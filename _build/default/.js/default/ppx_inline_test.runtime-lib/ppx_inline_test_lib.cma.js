// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_inline_test_lib
//# unitInfo: Requires: Base, Base__Exn, Base__Int63, Base__List, Base__Random, Base__String, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Filename, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__Random, Stdlib__Result, Stdlib__Scanf, Stdlib__String, Stdlib__Sys, Time_now
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = "\n",
    cst$15 = " ",
    cst_line = " , line ",
    cst_File = " File ",
    cst_threw = " threw",
    cst_s$0 = "%s",
    cst_s = "%s%!",
    cst$12 = ".\n",
    cst_Ppx_inline_test_lib$0 = "Ppx_inline_test_lib",
    cst_TES = "TES",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    cst_T_MODULE_at$0 = "T_MODULE at ",
    cst_T_MODULES = "T_MODULES",
    cst_inline_test_runner$0 = "inline-test-runner",
    cst_inline_tests_log$0 = "inline_tests.log",
    cst_ppx_inline_test_error_the_ =
      "ppx_inline_test error: the following -only-test flags matched nothing:",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$11 = cst$13,
    cst$9 = cst$14,
    cst$10 = cst$15,
    cst$7 = cst$14,
    cst$8 = cst$15,
    cst$5 = cst$14,
    cst$6 = "  ",
    cst$3 = cst$14,
    cst$4 = cst$13,
    cst$2 = ".",
    cst$0 = cst$13,
    cst$1 = ": ",
    initial = [0, 0, [0, "disabled", 0]],
    cst = cst$13,
    am_running_env_var = cst_TESTING_FRAMEWORK,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Result = global_data.Stdlib__Result,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Random = global_data.Base__Random,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int63 = global_data.Base__Int63,
    Time_now = global_data.Time_now,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_source_tree_root$0 = "source_tree_root",
    cst_diff_path_prefix$0 = "diff_path_prefix",
    cst_diff_command = "diff_command",
    cst_in_place$0 = "in_place",
    cst_use_color = "use_color",
    _O_ =
      [0,
       [11,
        "ppx_inline_test error: attempted to access the [",
        [2, 0, [11, "] config before [init] was called", 0]]],
       "ppx_inline_test error: attempted to access the [%s] config before [init] was called"],
    _N_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _M_ = [0, 1, [0, 7, 0]],
    _F_ = [0, [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, 0]]]], " %s:%d"],
    _G_ = [0, [12, 32, [2, 0, 0]], " %s"],
    _B_ =
      [0,
       [11,
        "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n",
        [10, 0]],
       "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n%!"],
    _C_ =
      [0,
       [11,
        "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n",
        [10, 0]],
       "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n%!"],
    _D_ =
      [0,
       [4,
        0,
        0,
        0,
        [11,
         " tests ran, ",
         [4, 0, 0, 0, [11, " test_modules ran\n", [10, 0]]]]],
       "%d tests ran, %d test_modules ran\n%!"],
    _E_ =
      [0,
       [11, cst_ppx_inline_test_error_the_, 0],
       cst_ppx_inline_test_error_the_],
    _H_ = [0, [11, cst$12, [10, 0]], ".\n%!"],
    _I_ =
      [0,
       [11, "ppx_inline_test error: no tests have been run.\n", [10, 0]],
       "ppx_inline_test error: no tests have been run.\n%!"],
    _K_ = [0, [11, cst_T_MODULES, 0], cst_T_MODULES],
    _L_ = [0, [11, ", ", [4, 0, 0, 0, [11, " TES", 0]]], ", %d TES"],
    _J_ =
      [0,
       [11,
        "FAILED ",
        [4,
         0,
         0,
         0,
         [11, " / ", [4, 0, 0, 0, [11, " tests", [2, 0, [12, 10, [10, 0]]]]]]]],
       "FAILED %d / %d tests%s\n%!"],
    _z_ =
      [0,
       [11,
        cst_T_MODULE_at$0,
        [2,
         0,
         [11,
          cst_threw,
          [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]]],
       "T_MODULE at %s threw%s%s.\n%s%s\n%!"],
    _A_ = [0, [11, cst_TES, 0], cst_TES],
    cst_ppx_inline_test_cannot_use =
      "ppx_inline_test: cannot use -list-partition or -partition without specifying a partition at preprocessing time",
    _t_ = [0, [2, 0, [12, 10, [2, 0, 0]]], "%s\n%s"],
    _u_ = [0, [2, 0, [10, 0]], cst_s],
    _v_ = [0, 1],
    _w_ =
      [0,
       [11, " (", [8, [0, 0, 0], 0, [0, 3], [11, " sec)\n", [10, 0]]]],
       " (%.3f sec)\n%!"],
    _x_ =
      [0,
       [2, 0, [11, " is false.\n", [2, 0, [12, 10, [10, 0]]]]],
       "%s is false.\n%s\n%!"],
    _y_ =
      [0,
       [2,
        0,
        [11,
         cst_threw,
         [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]],
       "%s threw%s%s.\n%s%s\n%!"],
    _s_ = [0, [2, 0, [10, 0]], cst_s],
    _r_ = [0, [2, 0, [10, 0]], cst_s],
    _q_ = [0, [12, 10, [2, 0, [12, 10, [10, 0]]]], "\n%s\n%!"],
    cst_T_MODULE_at = cst_T_MODULE_at$0,
    cst_in_TES = "  in TES",
    cst_time_without_resetting_ran = "time_without_resetting_random_seeds",
    cst_Ppx_inline_test_lib = cst_Ppx_inline_test_lib$0,
    _l_ = [0, 0],
    _j_ = [0, 0],
    cst_inline_tests_log = cst_inline_tests_log$0,
    _i_ =
      [0,
       [11,
        "Argument ",
        [2,
         0,
         [11, " doesn't fit the format filename[:line_number]\n", [10, 0]]]],
       "Argument %s doesn't fit the format filename[:line_number]\n%!"],
    _h_ =
      [0,
       [2,
        0,
        [11, ": unexpected anonymous argument ", [2, 0, [12, 10, [10, 0]]]]],
       "%s: unexpected anonymous argument %s\n%!"],
    cst_The_inline_test_runner_can =
      "The inline test runner can only be initialized once, and has already been initialized.",
    cst_inline_test_runner = cst_inline_test_runner$0,
    _g_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " [args]", 0]]]]]],
       "%s %s %s [args]"],
    cst_Prefix_to_prepend_to_filep =
      " Prefix to prepend to filepaths in test output",
    cst_diff_path_prefix = "-diff-path-prefix",
    cst_Path_to_the_root_of_the_so = " Path to the root of the source tree",
    cst_source_tree_root = "-source-tree-root",
    cst_Diff_command_for_tests_tha =
      " Diff command for tests that require diffing (use - to disable diffing)",
    cst_diff_cmd = "-diff-cmd",
    cst_Update_expect_tests_in_pla = " Update expect tests in place",
    cst_in_place = "-in-place",
    cst_Summarize_tests_without_us = " Summarize tests without using color",
    cst_no_color = "-no-color",
    cst_location_Run_only_the_test =
      'location Run only the tests specified by all the -only-test options.\n                      Locations can be one of these forms:\n                      - file.ml\n                      - file.ml:line_number\n                      - File "file.ml"\n                      - File "file.ml", line 23\n                      - File "file.ml", line 23, characters 2-3',
    cst_only_test = "-only-test",
    cst_substring_Only_run_tests_w =
      "substring Only run tests whose names contain the given substring",
    cst_matching = "-matching",
    cst_tag_Only_run_tests_tagged_ =
      "tag Only run tests tagged with [tag] (overrides previous -drop-tag)",
    cst_require_tag = "-require-tag",
    cst_tag_Only_run_tests_not_tag =
      "tag Only run tests not tagged with [tag] (overrides previous -require-tag)",
    cst_drop_tag = "-drop-tag",
    cst_Log_the_tests_run_in_inlin = " Log the tests run in inline_tests.log",
    cst_log = "-log",
    cst_Show_the_number_of_tests_r = " Show the number of tests ran",
    cst_show_counts = "-show-counts",
    cst_End_with_an_error_if_no_te = " End with an error if no tests were run",
    cst_strict = "-strict",
    cst_Run_tests_only_up_to_the_f =
      " Run tests only up to the first error (doesn't work for expect tests)",
    cst_stop_on_error = "-stop-on-error",
    cst_Show_the_tests_as_they_run = " Show the tests as they run",
    cst_verbose = "-verbose",
    cst_Only_run_the_tests_in_the_ =
      " Only run the tests in the given partition",
    cst_partition = "-partition",
    cst_Lists_all_the_partitions_t =
      " Lists all the partitions that contain at least one test or test_module into FILE",
    cst_list_partitions_into_file = "-list-partitions-into-file",
    cst_Lists_all_the_partitions_t$0 =
      " Lists all the partitions that contain at least one test or test_module",
    cst_list_partitions = "-list-partitions",
    cst_Do_not_run_tests_but_show_ =
      " Do not run tests but show what would have been run",
    cst_list_test_names = "-list-test-names",
    _f_ =
      [0,
       [11,
        cst_File,
        [3,
         0,
         [11,
          cst_line,
          [4,
           0,
           0,
           0,
           [11,
            " , characters ",
            [4, 0, 0, 0, [11, " - ", [4, 0, 0, 0, [12, 32, [10, 0]]]]]]]]]],
       " File %S , line %d , characters %d - %d %!"],
    _e_ =
      [0,
       [11, cst_File, [3, 0, [11, cst_line, [4, 0, 0, 0, [12, 32, [10, 0]]]]]],
       " File %S , line %d %!"],
    _d_ = [0, [11, cst_File, [3, 0, [12, 32, [10, 0]]]], " File %S %!"],
    _c_ =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [2, 0, 0]]]]]]]]],
       "File %S, line %d, characters %d-%d%s"],
    cst_success = "success",
    cst_failure = "failure",
    cst_error = "error",
    _k_ = [0, [2, 0, 0], cst_s$0],
    _R_ = [0, [2, 0, 0], cst_s$0],
    _p_ = [0, 187165616, 545942154],
    _P_ = [0, 187165616, -863538453];
   function to_string(param){
    switch(param){
      case 0:
       return cst_success;
      case 1:
       return cst_failure;
      default: return cst_error;
    }
   }
   function combine(t1, t2){
    a:
    {
     switch(t1){
       case 0:
        if(! t2) return 0; break;
       case 1: break;
       default: break a;
     }
     if(2 !== t2) return 1;
    }
    return 2;
   }
   function combine_all(ts){
    return caml_call3(Stdlib_List[26], combine, 0, ts);
   }
   var
    already_initialized = [0, 0],
    test_modules_ran = [0, 0],
    test_modules_failed = [0, 0],
    tests_ran = [0, 0],
    tests_failed = [0, 0],
    dynamic_lib = [0, 0],
    action = [0, -950194894];
   try{
    caml_sys_getenv("FORCE_DROP_INLINE_TEST");
    var _T_ = 1, force_drop = _T_;
   }
   catch(_cb_){
    var _a_ = caml_wrap_exception(_cb_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var force_drop = 0;
   }
   function get(param){return force_drop ? -950194894 : action[1];}
   var _b_ = caml_call2(Stdlib_Hashtbl[1], 0, 23), current = [0, cst];
   function found_test(param){
    var
     _b$_ = caml_string_notequal(current[1], cst$13),
     _ca_ = _b$_ ? 1 - caml_call2(Stdlib_Hashtbl[9], _b_, current[1]) : _b$_;
    return _ca_ ? caml_call3(Stdlib_Hashtbl[5], _b_, current[1], 0) : _ca_;
   }
   function is_current(param){
    if(! param) return 1;
    var p = param[1];
    return caml_string_equal(p, current[1]);
   }
   var current$0 = [0, 0];
   function current_tags(param){
    var t = current$0[1];
    function _b9_(m){return m[2];}
    var _b__ = caml_call2(Stdlib_List[20], _b9_, t);
    return caml_call1(Stdlib_List[14], _b__);
   }
   var
    verbose = [0, 0],
    strict = [0, 0],
    show_counts = [0, 0],
    list_test_names = [0, 0],
    delayed_errors = [0, 0],
    stop_on_error = [0, 0],
    log = [0, 0],
    time_sec = [0, 0.],
    use_color = [0, 1],
    in_place = [0, 0],
    diff_command = [0, 0],
    source_tree_root = [0, 0],
    diff_path_prefix = [0, 0];
   function displayed_descr(descr, filename, line, start_pos, end_pos){
    var _b7_ = caml_obj_tag(descr);
    a:
    if(250 === _b7_)
     var descr$0 = descr[1];
    else{
     if(246 !== _b7_ && 244 !== _b7_){var descr$0 = descr; break a;}
     var descr$0 = caml_call1(CamlinternalLazy[2], descr);
    }
    var
     _b8_ =
       caml_string_equal(descr$0, cst$13)
        ? cst$0
        : caml_call2(Stdlib[28], cst$1, descr$0);
    return caml_call6
            (Stdlib_Printf[4], _c_, filename, line, start_pos, end_pos, _b8_);
   }
   function parse_argv(current, args){
    if(args){
     var _bs_ = args[2];
     if(_bs_){
      var name = args[1];
      if(! caml_string_notequal(_bs_[1], cst_inline_test_runner$0)){
       var match = _bs_[2];
       if(match){
        var rest = match[2], lib = match[1];
        if(already_initialized[1])
         throw caml_maybe_attach_backtrace
                ([0, Stdlib_Arg[8], cst_The_inline_test_runner_can], 1);
        already_initialized[1] = 1;
        var
         tests = [0, 0],
         list_partitions = [0, 0],
         partition = [0, 0],
         tag_predicate = [0, initial],
         name_filter = [0, 0],
         _bt_ =
           caml_call4
            (Stdlib_Printf[4], _g_, name, cst_inline_test_runner, lib),
         _bu_ =
           function(anon){
            var _b6_ = caml_call3(Stdlib_Printf[4], _h_, name, anon);
            throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], _b6_], 1);
           },
         _bv_ = 0,
         _bw_ =
           [0,
            [0,
             cst_diff_path_prefix,
             [4, function(s){diff_path_prefix[1] = [0, s]; return 0;}],
             cst_Prefix_to_prepend_to_filep],
            _bv_],
         _bx_ =
           [0,
            [0,
             cst_source_tree_root,
             [4, function(s){source_tree_root[1] = [0, s]; return 0;}],
             cst_Path_to_the_root_of_the_so],
            _bw_],
         _by_ =
           [0,
            [0, cst_no_color, [3, use_color], cst_Summarize_tests_without_us],
            [0,
             [0, cst_in_place, [2, in_place], cst_Update_expect_tests_in_pla],
             [0,
              [0,
               cst_diff_cmd,
               [4, function(s){diff_command[1] = [0, s]; return 0;}],
               cst_Diff_command_for_tests_tha],
              _bx_]]],
         _bz_ =
           [0,
            [0,
             cst_only_test,
             [4,
              function(str){
               try{
                var
                 _bY_ =
                   function(file, line, start_pos, end_pos){return [0, file, [0, line]];
                   },
                 _bZ_ = [0, caml_call3(Stdlib_Scanf[5], str, _f_, _bY_)],
                 match = _bZ_;
               }
               catch(_b3_){
                try{
                 var
                  _bW_ = function(file, line){return [0, file, [0, line]];},
                  _bX_ = [0, caml_call3(Stdlib_Scanf[5], str, _e_, _bW_)],
                  match = _bX_;
                }
                catch(_b4_){
                 try{
                  var
                   _bU_ = function(file){return [0, file, 0];},
                   _bV_ = [0, caml_call3(Stdlib_Scanf[5], str, _d_, _bU_)],
                   match = _bV_;
                 }
                 catch(_b5_){var match = 0;}
                }
               }
               if(match)
                var
                 match$0 = match[1],
                 index = match$0[2],
                 file = match$0[1],
                 index$0 = index,
                 filename = file;
               else if(caml_call2(Stdlib_String[15], str, 58)){
                var
                 i = caml_call2(Stdlib_String[36], str, 58),
                 filename$0 = caml_call3(Stdlib_String[16], str, 0, i),
                 index_string =
                   caml_call3
                    (Stdlib_String[16],
                     str,
                     i + 1 | 0,
                     (caml_ml_string_length(str) - i | 0) - 1 | 0);
                try{var index$1 = runtime.caml_int_of_string(index_string);}
                catch(_b2_){
                 var _b0_ = caml_wrap_exception(_b2_);
                 if(_b0_[1] !== Stdlib[7])
                  throw caml_maybe_attach_backtrace(_b0_, 0);
                 var _b1_ = caml_call2(Stdlib_Printf[4], _i_, str);
                 throw caml_maybe_attach_backtrace
                        ([0, Stdlib_Arg[8], _b1_], 1);
                }
                var index$0 = [0, index$1], filename = filename$0;
               }
               else
                var index$0 = 0, filename = str;
               tests[1] = [0, [0, filename, index$0, [0, 0]], tests[1]];
               return 0;
              }],
             cst_location_Run_only_the_test],
            _by_],
         _bA_ =
           [0,
            [0,
             cst_matching,
             [4,
              function(s){name_filter[1] = [0, s, name_filter[1]]; return 0;}],
             cst_substring_Only_run_tests_w],
            _bz_],
         _bB_ =
           [0,
            [0,
             cst_require_tag,
             [4,
              function(tag){
               var t = tag_predicate[1], _bQ_ = t[2];
               function _bR_(_bT_){return caml_string_notequal(tag, _bT_);}
               var _bS_ = caml_call2(Stdlib_List[44], _bR_, _bQ_);
               tag_predicate[1] = [0, [0, tag, t[1]], _bS_];
               return 0;
              }],
             cst_tag_Only_run_tests_tagged_],
            _bA_],
         _bC_ =
           [0,
            [0,
             cst_drop_tag,
             [4,
              function(tag){
               var t = tag_predicate[1], _bM_ = [0, tag, t[2]], _bN_ = t[1];
               function _bO_(_bP_){return caml_string_notequal(tag, _bP_);}
               tag_predicate[1] =
                [0, caml_call2(Stdlib_List[44], _bO_, _bN_), _bM_];
               return 0;
              }],
             cst_tag_Only_run_tests_not_tag],
            _bB_],
         _bD_ =
           [0,
            [0, cst_verbose, [2, verbose], cst_Show_the_tests_as_they_run],
            [0,
             [0,
              cst_stop_on_error,
              [2, stop_on_error],
              cst_Run_tests_only_up_to_the_f],
             [0,
              [0, cst_strict, [2, strict], cst_End_with_an_error_if_no_te],
              [0,
               [0,
                cst_show_counts,
                [2, show_counts],
                cst_Show_the_number_of_tests_r],
               [0,
                [0,
                 cst_log,
                 [0,
                  function(param){
                   try{runtime.caml_sys_remove(cst_inline_tests_log$0);}
                   catch(_bL_){}
                   log[1] = [0, caml_call1(Stdlib[60], cst_inline_tests_log)];
                   return 0;
                  }],
                 cst_Log_the_tests_run_in_inlin],
                _bC_]]]]],
         _bE_ =
           [0,
            [0,
             cst_partition,
             [4, function(i){partition[1] = [0, i]; return 0;}],
             cst_Only_run_the_tests_in_the_],
            _bD_],
         _bF_ =
           [0,
            [0,
             cst_list_partitions_into_file,
             [4,
              function(file){list_partitions[1] = [0, [0, file]]; return 0;}],
             cst_Lists_all_the_partitions_t],
            _bE_],
         _bG_ =
           [0,
            [0,
             cst_list_partitions,
             [0, function(param){list_partitions[1] = _j_; return 0;}],
             cst_Lists_all_the_partitions_t$0],
            _bF_],
         _bH_ =
           [0,
            [0,
             cst_list_test_names,
             [0,
              function(param){
               list_test_names[1] = 1;
               verbose[1] = 1;
               return 0;
              }],
             cst_Do_not_run_tests_but_show_],
            _bG_],
         _bI_ = caml_call2(Stdlib_Arg[11], 0, _bH_),
         _bJ_ = caml_call1(Stdlib_Array[10], [0, name, rest]);
        caml_call5(Stdlib_Arg[3], current, _bJ_, _bI_, _bu_, _bt_);
        var match$0 = list_partitions[1];
        if(match$0)
         var
          where_to_list = match$0[1],
          _bK_ = [0, -260537174, where_to_list];
        else
         var _bK_ = [0, 1025081494, partition[1]];
        var
         v =
           [0,
            -753295984,
            [0, [0, lib, tests[1], name_filter[1], tag_predicate[1]], _bK_]];
        action[1] = v;
        return;
       }
      }
     }
    }
    return;
   }
   if(Base[87][1])
    try{
     var _S_ = caml_sys_argv(0);
     parse_argv(0, caml_call1(Stdlib_Array[9], _S_));
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Stdlib_Arg[8]){
      var msg = exn[2];
      caml_call2(Stdlib_Printf[3], _k_, msg);
      caml_call1(Stdlib[99], 1);
     }
     else{
      if(exn[1] !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn, 0);
      var msg$0 = exn[2];
      caml_call2(Stdlib_Printf[2], _R_, msg$0);
      caml_call1(Stdlib[99], 0);
     }
    }
   function init(args){
    var current = [0, 0];
    try{parse_argv([0, current], args); return _l_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Stdlib_Arg[8]){var msg = exn[2]; return [1, msg];}
     if(exn[1] !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$0 = exn[2];
     return [0, [0, msg$0]];
    }
   }
   var am_test_runner = typeof get(0) === "number" ? 0 : 1;
   a:
   {
    try{caml_sys_getenv("PPX_INLINE_TEST_LIB_AM_RUNNING_INLINE_TEST");}
    catch(_bq_){
     var _m_ = caml_wrap_exception(_bq_);
     if(_m_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_m_, 0);
     b:
     {
      try{var val = caml_sys_getenv(cst_TESTING_FRAMEWORK);}
      catch(_br_){
       var _n_ = caml_wrap_exception(_br_);
       if(_n_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_n_, 0);
       var _o_ = 0;
       break b;
      }
      var _Q_ = caml_string_notequal(val, "inline-test") ? 0 : 1, _o_ = _Q_;
     }
     var am_running = _o_;
     break a;
    }
    var am_running = 1;
   }
   var testing = am_test_runner ? _p_ : am_running ? _P_ : 822171972;
   function timestamp_ns(param){return caml_call1(Time_now[2], 0);}
   var
    where_to_cut_backtrace =
      [246,
       function(param){
        var
         _bo_ = caml_call2(Stdlib[28], cst$2, cst_time_without_resetting_ran),
         _bp_ = caml_call2(Stdlib[28], cst_Ppx_inline_test_lib, _bo_);
        return caml_call2(Base_String[86][2], 0, _bp_);
       }];
   function time_without_resetting_random_(f){
    var before_ns = timestamp_ns(0);
    try{var _bn_ = [0, caml_call1(f, 0)], res = _bn_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      res = [1, [0, exn, caml_call1(Stdlib_Printexc[6], 0)]];
    }
    var
     _bl_ = timestamp_ns(0),
     _bm_ = caml_call2(Base_Int63[46], _bl_, before_ns);
    time_sec[1] = caml_call1(Base_Int63[3], _bm_) / 1000000000.;
    return res;
   }
   var
    saved_caml_random_state =
      [246,
       function(_bk_){
        return caml_call1(Stdlib_Random[15][1], [0, 100, 200, 300]);
       }],
    saved_base_random_state =
      [246,
       function(_bj_){
        return caml_call1(Base_Random[19][2], [0, 111, 222, 333]);
       }];
   function string_of_module_descr(param){
    var t = current$0[1];
    function _bc_(m){return m[1];}
    var _bd_ = caml_call2(Stdlib_List[20], _bc_, t);
    function _be_(s){
     var
      _bg_ = caml_call1(Stdlib_String[29], s),
      _bh_ = caml_call2(Stdlib[28], _bg_, cst$3),
      _bi_ = caml_call2(Stdlib[28], cst_T_MODULE_at, _bh_);
     return caml_call2(Stdlib[28], cst_in_TES, _bi_);
    }
    var _bf_ = caml_call2(Stdlib_List[20], _be_, _bd_);
    return caml_call2(Stdlib_String[7], cst$4, _bf_);
   }
   function print_delayed_errors(param){
    var delayed_errors$0 = caml_call1(Stdlib_List[10], delayed_errors[1]);
    if(! delayed_errors$0) return;
    var _ba_ = caml_call2(Stdlib_String[1], 70, 61);
    caml_call2(Stdlib_Printf[3], _q_, _ba_);
    function _bb_(message){return caml_call2(Stdlib_Printf[3], _r_, message);}
    return caml_call2(Stdlib_List[18], _bb_, delayed_errors$0);
   }
   function eprintf_or_delay(fmt){
    function _a__(s){
     if(verbose[1])
      delayed_errors[1] = [0, s, delayed_errors[1]];
     else
      caml_call2(Stdlib_Printf[3], _s_, s);
     var _a$_ = stop_on_error[1];
     return _a$_ ? (print_delayed_errors(0), caml_call1(Stdlib[99], 2)) : _a$_;
    }
    return caml_call2(Stdlib_Printf[10], _a__, fmt);
   }
   function add_hooks(C, f, param){
    caml_call1(C[1], 0);
    return caml_call1(f, 0);
   }
   function hum_backtrace(backtrace){
    var
     _a2_ = caml_call1(Base_String[104], backtrace),
     _a3_ = Base_List[141],
     _a4_ =
       caml_call2
        (_a3_,
         _a2_,
         function(str){
          var _a8_ = caml_obj_tag(where_to_cut_backtrace);
          a:
          if(250 === _a8_)
           var _a9_ = where_to_cut_backtrace[1];
          else{
           if(246 !== _a8_ && 244 !== _a8_){
            var _a9_ = where_to_cut_backtrace;
            break a;
           }
           var _a9_ = caml_call1(CamlinternalLazy[2], where_to_cut_backtrace);
          }
          return 1 - caml_call2(Base_String[86][5], _a9_, str);
         }),
     _a5_ = Base_List[53],
     _a6_ =
       caml_call2
        (_a5_,
         _a4_,
         function(str){
          var _a7_ = caml_call2(Base[241], str, cst$5);
          return caml_call2(Base[241], cst$6, _a7_);
         });
    return caml_call2(Base_String[68], 0, _a6_);
   }
   function test_inner
   (config,
    descr,
    tags,
    def_filename,
    def_line_number,
    start_pos,
    end_pos,
    f,
    bool_of_f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _aI_ = match[2],
     what_to_do = _aI_[2],
     match$0 = _aI_[1],
     which_tags = match$0[4],
     name_filter = match$0[3],
     only_test_location = match$0[2],
     libname = match$0[1];
    function f$0(_a1_){return add_hooks(config, f, _a1_);}
    var
     descr$0 =
       [246,
        function(_a0_){
         return displayed_descr
                 (descr, def_filename, def_line_number, start_pos, end_pos);
        }],
     _aJ_ = current_tags(0),
     complete_tags = caml_call2(Stdlib[37], tags, _aJ_),
     _aK_ = caml_equal([0, libname], dynamic_lib[1]);
    if(_aK_){
     if(only_test_location)
      var
       _aG_ =
         function(param){
          var
           used = param[3],
           line_number_opt = param[2],
           filename = param[1],
           position_start =
             caml_ml_string_length(def_filename)
             - caml_ml_string_length(filename)
             | 0,
           _aV_ = 0 <= position_start ? 1 : 0;
          if(_aV_){
           var
            end_of_def_filename =
              caml_call3
               (Stdlib_String[16],
                def_filename,
                position_start,
                caml_ml_string_length(filename)),
            _aW_ = caml_string_equal(end_of_def_filename, filename);
           if(_aW_){
            var
             _aX_ = 0 === position_start ? 1 : 0,
             _aY_ =
               _aX_
               ||
                (47
                  ===
                   runtime.caml_string_get
                    (def_filename, position_start - 1 | 0)
                  ? 1
                  : 0);
            if(_aY_)
             if(line_number_opt)
              var
               line_number = line_number_opt[1],
               _aZ_ = caml_equal(def_line_number, line_number);
             else
              var _aZ_ = 1;
            else
             var _aZ_ = _aY_;
           }
           else
            var _aZ_ = _aW_;
           var found = _aZ_;
          }
          else
           var found = _aV_;
          if(found) used[1] = 1;
          return found;
         },
       _aL_ = caml_call2(Stdlib_List[34], _aG_, only_test_location);
     else
      var _aL_ = 1;
     if(_aL_){
      var
       _ax_ = which_tags[1],
       _ay_ =
         function(req){
          return 1 - caml_call2(Stdlib_List[37], req, complete_tags);
         },
       _az_ = caml_call2(Stdlib_List[34], _ay_, _ax_);
      if(_az_)
       var _aM_ = _az_;
      else
       var
        _aA_ = which_tags[2],
        _aB_ =
          function(dropped){
           return caml_call2(Stdlib_List[37], dropped, complete_tags);
          },
        _aM_ = caml_call2(Stdlib_List[34], _aB_, _aA_);
      var _aN_ = 1 - _aM_;
      if(_aN_){
       var _aO_ = caml_obj_tag(descr$0);
       a:
       if(250 === _aO_)
        var descr$1 = descr$0[1];
       else{
        if(246 !== _aO_ && 244 !== _aO_){var descr$1 = descr$0; break a;}
        var descr$1 = caml_call1(CamlinternalLazy[2], descr$0);
       }
       if(name_filter)
        var
         _aH_ =
           function(substring){
            return caml_call2(Base_String[92], descr$1, substring);
           },
         _aP_ = caml_call2(Stdlib_List[34], _aH_, name_filter);
       else
        var _aP_ = 1;
       var should_run = _aP_;
      }
      else
       var should_run = _aN_;
     }
     else
      var should_run = _aL_;
    }
    else
     var should_run = _aK_;
    if(! should_run) return should_run;
    if(1025081494 > what_to_do[1]) return found_test(0);
    var partition = what_to_do[2], _aQ_ = is_current(partition);
    if(! _aQ_) return _aQ_;
    var _aR_ = caml_obj_tag(descr$0);
    a:
    if(250 === _aR_)
     var descr$2 = descr$0[1];
    else{
     if(246 !== _aR_ && 244 !== _aR_){var descr$2 = descr$0; break a;}
     var descr$2 = caml_call1(CamlinternalLazy[2], descr$0);
    }
    tests_ran[1]++;
    var match$1 = log[1];
    if(match$1){
     var ch = match$1[1], _aS_ = string_of_module_descr(0);
     caml_call4(Stdlib_Printf[1], ch, _t_, descr$2, _aS_);
    }
    if(verbose[1]) caml_call2(Stdlib_Printf[2], _u_, descr$2);
    if(list_test_names[1])
     var result$0 = _v_;
    else{
     var
      caml_random_state = caml_call1(Stdlib_Random[16], 0),
      base_random_state = caml_call1(Base_Random[19][4], Base_Random[19][1]),
      _aC_ = caml_obj_tag(saved_caml_random_state);
     a:
     if(250 === _aC_)
      var _aD_ = saved_caml_random_state[1];
     else{
      if(246 !== _aC_ && 244 !== _aC_){
       var _aD_ = saved_caml_random_state;
       break a;
      }
      var _aD_ = caml_call1(CamlinternalLazy[2], saved_caml_random_state);
     }
     caml_call1(Stdlib_Random[17], _aD_);
     var _aE_ = caml_obj_tag(saved_base_random_state);
     a:
     if(250 === _aE_)
      var _aF_ = saved_base_random_state[1];
     else{
      if(246 !== _aE_ && 244 !== _aE_){
       var _aF_ = saved_base_random_state;
       break a;
      }
      var _aF_ = caml_call1(CamlinternalLazy[2], saved_base_random_state);
     }
     caml_call1(Base_Random[20], _aF_);
     var result = time_without_resetting_random_(f$0);
     caml_call1(Stdlib_Random[17], caml_random_state);
     caml_call1(Base_Random[20], base_random_state);
     var result$0 = caml_call2(Stdlib_Result[8], bool_of_f, result);
    }
    if(verbose[1]) caml_call2(Stdlib_Printf[2], _w_, time_sec[1]);
    if(0 !== result$0[0]){
     var match$2 = result$0[1], backtrace = match$2[2], exn = match$2[1];
     tests_failed[1]++;
     var
      backtrace$0 = hum_backtrace(backtrace),
      exn_str = caml_call1(Sexplib0_Sexp_conv[70], exn),
      sep = caml_call2(Stdlib_String[15], exn_str, 10) ? cst$7 : cst$8,
      _aU_ = string_of_module_descr(0);
     return caml_call5
             (eprintf_or_delay(_y_), descr$2, sep, exn_str, backtrace$0, _aU_);
    }
    if(result$0[1]) return 0;
    tests_failed[1]++;
    var _aT_ = string_of_module_descr(0);
    return caml_call2(eprintf_or_delay(_x_), descr$2, _aT_);
   }
   function set_lib_and_partition(static_lib, partition){
    if(dynamic_lib[1]) return 0;
    dynamic_lib[1] = [0, static_lib];
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     match$0 = match[2],
     what_to_do = match$0[2],
     which_tests = match$0[1],
     _aw_ = caml_string_equal(which_tests[1], static_lib);
    if(! _aw_) return _aw_;
    a:
    {
     if(1025081494 <= what_to_do[1] && ! what_to_do[2]){var requires_partition = 0; break a;}
     var requires_partition = 1;
    }
    if(caml_string_equal(partition, cst$13) && requires_partition)
     return caml_call1(Stdlib[2], cst_ppx_inline_test_cannot_use);
    current[1] = partition;
    return 0;
   }
   function unset_lib(static_lib){
    var match = dynamic_lib[1];
    if(! match) return 0;
    var
     lib = match[1],
     _au_ = caml_string_equal(lib, static_lib),
     _av_ = _au_ ? (dynamic_lib[1] = 0, 0) : _au_;
    return _av_;
   }
   function test
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(b){return b;});
   }
   function test_unit
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(param){return 1;});
   }
   function test_module
   (config, descr, tags, def_filename, def_line_number, start_pos, end_pos, f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _an_ = match[2],
     what_to_do = _an_[2],
     match$0 = _an_[1],
     which_tags = match$0[4],
     libname = match$0[1];
    function f$0(_at_){return add_hooks(config, f, _at_);}
    var
     _ao_ = current_tags(0),
     partial_tags = caml_call2(Stdlib[37], tags, _ao_),
     _ap_ = caml_equal([0, libname], dynamic_lib[1]);
    if(_ap_)
     var
      _al_ = which_tags[2],
      _am_ =
        function(dropped){
         return caml_call2(Stdlib_List[37], dropped, partial_tags);
        },
      should_run = 1 - caml_call2(Stdlib_List[34], _am_, _al_);
    else
     var should_run = _ap_;
    if(! should_run) return should_run;
    if(1025081494 > what_to_do[1]) return found_test(0);
    var partition = what_to_do[2], _aq_ = is_current(partition);
    if(! _aq_) return _aq_;
    test_modules_ran[1]++;
    var
     descr$0 =
       displayed_descr
        (descr, def_filename, def_line_number, start_pos, end_pos),
     prev = current$0[1];
    current$0[1] = [0, [0, descr$0, tags], prev];
    try{var x = time_without_resetting_random_(f$0); current$0[1] = prev;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     current$0[1] = prev;
     throw caml_maybe_attach_backtrace(e, 0);
    }
    if(0 === x[0]) return 0;
    var match$1 = x[1], backtrace = match$1[2], exn = match$1[1];
    test_modules_failed[1]++;
    var
     backtrace$0 = hum_backtrace(backtrace),
     exn_str = caml_call1(Sexplib0_Sexp_conv[70], exn),
     sep = caml_call2(Stdlib_String[15], exn_str, 10) ? cst$9 : cst$10,
     _ar_ = string_of_module_descr(0),
     _as_ = caml_call1(Stdlib_String[29], descr$0);
    return caml_call5
            (eprintf_or_delay(caml_call2(Stdlib[98], _A_, _z_)),
             _as_,
             sep,
             exn_str,
             backtrace$0,
             _ar_);
   }
   function summarize(param){
    var match = get(0);
    if(typeof match !== "number"){
     var ___ = match[2], match$0 = ___[2], which_tests = ___[1];
     if(1025081494 > match$0[1]){
      var
       where_to_list = match$0[2],
       f =
         function(fout){
          var _ag_ = 0;
          function _ah_(k, param, acc){return [0, k, acc];}
          var
           _ai_ = caml_call3(Stdlib_Hashtbl[14], _ah_, _b_, _ag_),
           _aj_ = caml_call2(Stdlib_List[59], Stdlib_String[10], _ai_),
           _ak_ = caml_call2(Stdlib_Printf[1], fout, _N_);
          return caml_call2(Stdlib_List[18], _ak_, _aj_);
         };
      if(where_to_list){
       var
        file = where_to_list[1],
        _ae_ = caml_call3(Stdlib[62], _M_, 0, file),
        _af_ = caml_call1(Base_Exn[12], f);
       caml_call2(_af_, _ae_, Stdlib[76]);
      }
      else
       f(Stdlib[39]);
      return 0;
     }
     var match$1 = log[1];
     if(match$1){var ch = match$1[1]; caml_call1(Stdlib[76], ch);}
     print_delayed_errors(0);
     var count = tests_failed[1], count_test_modules = test_modules_failed[1];
     if(0 === count && 0 === count_test_modules){
      if(show_counts[1])
       caml_call3(Stdlib_Printf[3], _D_, tests_ran[1], test_modules_ran[1]);
      var
       _$_ = which_tests[2],
       _aa_ = function(param){var used = param[3]; return 1 - used[1];},
       unused_tests = caml_call2(Stdlib_List[44], _aa_, _$_),
       errors = unused_tests ? [0, unused_tests] : 0;
      if(errors){
       var tests = errors[1];
       caml_call1(Stdlib_Printf[3], _E_);
       var
        _ab_ =
          function(param){
           var line_number_opt = param[2], filename = param[1];
           if(! line_number_opt)
            return caml_call2(Stdlib_Printf[3], _G_, filename);
           var line_number = line_number_opt[1];
           return caml_call3(Stdlib_Printf[3], _F_, filename, line_number);
          };
       caml_call2(Stdlib_List[18], _ab_, tests);
       caml_call1(Stdlib_Printf[3], _H_);
       return 2;
      }
      if(0 === tests_ran[1] && strict[1]){
       caml_call1(Stdlib_Printf[3], _I_);
       return 2;
      }
      return 0;
     }
     if(0 === count_test_modules)
      var _ac_ = cst$11;
     else
      var
       _ad_ = caml_call2(Stdlib[98], _L_, _K_),
       _ac_ = caml_call2(Stdlib_Printf[4], _ad_, count_test_modules);
     caml_call4(Stdlib_Printf[3], _J_, count, tests_ran[1], _ac_);
     return 1;
    }
    a:
    {
     if(runtime.caml_notequal(caml_sys_argv(0), [0])){
      var _Z_ = runtime.caml_check_bound(caml_sys_argv(0), 0)[1];
      if
       (caml_string_equal
         (caml_call1(Stdlib_Filename[13], _Z_), "inline_tests_runner.exe")){caml_call1(Stdlib_Printf[3], _B_); break a;}
     }
     caml_call1(Stdlib_Printf[3], _C_);
    }
    return 2;
   }
   function assert_test_configs_initialize(config){
    var _X_ = 1 - already_initialized[1];
    if(! _X_) return _X_;
    var _Y_ = caml_call2(Stdlib_Printf[4], _O_, config);
    return caml_call1(Stdlib[2], _Y_);
   }
   function use_color$0(param){
    assert_test_configs_initialize(cst_use_color);
    return use_color[1];
   }
   function in_place$0(param){
    assert_test_configs_initialize(cst_in_place$0);
    return in_place[1];
   }
   function diff_command$0(param){
    assert_test_configs_initialize(cst_diff_command);
    return diff_command[1];
   }
   function diff_path_prefix$0(param){
    assert_test_configs_initialize(cst_diff_path_prefix$0);
    return diff_path_prefix[1];
   }
   function source_tree_root$0(param){
    assert_test_configs_initialize(cst_source_tree_root$0);
    return source_tree_root[1];
   }
   var evaluators = [0, [0, summarize, 0]];
   function add_evaluator(f){evaluators[1] = [0, f, evaluators[1]]; return 0;}
   function exit(param){
    var _U_ = caml_call1(Stdlib_List[10], evaluators[1]);
    function _V_(f){return caml_call1(f, 0);}
    switch(combine_all(caml_call2(Stdlib_List[20], _V_, _U_))){
      case 0:
       var _W_ = 0; break;
      case 1:
       var _W_ = 2; break;
      default: var _W_ = 1;
    }
    return caml_call1(Stdlib[99], _W_);
   }
   var
    Ppx_inline_test_lib =
      [0,
       am_running,
       am_running_env_var,
       testing,
       init,
       [0, combine, combine_all, to_string],
       set_lib_and_partition,
       unset_lib,
       test,
       test_unit,
       test_module,
       use_color$0,
       in_place$0,
       diff_command$0,
       diff_path_prefix$0,
       source_tree_root$0,
       add_evaluator,
       exit];
   runtime.caml_register_global
    (137, Ppx_inline_test_lib, cst_Ppx_inline_test_lib$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
