// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Int_repr
//# unitInfo: Requires: Base, Base__Comparable, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base_quickcheck, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__Bytes, Stdlib__Int32, Stdlib__Int64, Stdlib__Printf, Stdlib__Scanf, Stdlib__String, Stdlib__Sys, Typerep_lib__Std
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lu = "%Lu",
    cst_lu = "%lu",
    cst_Int32 = "Int32",
    cst_Int_repr$0 = "Int_repr",
    cst_Uint32 = "Uint32",
    cst_int_repr$0 = "int_repr",
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_div = runtime.caml_div,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_string_get16 = runtime.caml_string_get16,
    caml_string_get32 = runtime.caml_string_get32,
    caml_string_get64 = runtime.caml_string_get64;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    mod_name = "Int8",
    mod_name$0 = "Uint8",
    mod_name$1 = "Int16",
    mod_name$2 = "Uint16",
    mod_name$3 = cst_Int32,
    mod_name$4 = cst_Uint32,
    mod_name$5 = cst_Int32,
    mod_name$6 = cst_Uint32,
    mod_name$7 = "Int63",
    mod_name$8 = "Uint63",
    mod_name$9 = "Int64",
    max_value$12 =
      runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    mod_name$10 = "Uint64",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base_Int63 = global_data.Base__Int63,
    Base_Int64 = global_data.Base__Int64,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Int32 = global_data.Base__Int32,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Base_Int = global_data.Base__Int,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Comparable = global_data.Base__Comparable,
    Typerep_lib_Std = global_data.Typerep_lib__Std,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_quickcheck = global_data.Base_quickcheck,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   global_data.Stdlib__String;
   caml_call1(Ppx_module_timer_runtime[4], cst_Int_repr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_int_repr$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/int_repr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_int_repr$0, "int_repr.ml");
   var
    _w_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    cst_Int_repr_Uint64_t_of_sexp_ =
      "Int_repr.Uint64.t_of_sexp: integer atom needed",
    cst_Int_repr_Uint64_t_of_sexp_$0 =
      "Int_repr.Uint64.t_of_sexp: atom needed",
    _v_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    _u_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    _t_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    cst_Int_repr_Uint63_t_of_sexp_ =
      "Int_repr.Uint63.t_of_sexp: integer atom needed",
    cst_Int_repr_Uint63_t_of_sexp_$0 =
      "Int_repr.Uint63.t_of_sexp: atom needed",
    _s_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    _r_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _q_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    _p_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _n_ = [0, [5, 12, 0, 0, 0], cst_lu],
    cst_Int_repr_Uint32_t_of_sexp_ =
      "Int_repr.Uint32.t_of_sexp: integer atom needed",
    cst_Int_repr_Uint32_t_of_sexp_$0 =
      "Int_repr.Uint32.t_of_sexp: atom needed",
    _m_ = [0, [5, 12, 0, 0, 0], cst_lu],
    _l_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    _j_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _k_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    _h_ = runtime.caml_int64_create_lo_mi_hi(16777215, 127, 0),
    cst_value_cannot_be_represente = ": value cannot be represented",
    _f_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    _o_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    cst_int_repr = cst_int_repr$0,
    cst_Int_repr = cst_Int_repr$0;
   function raise_cannot_repr(mod_name, to_string, x){
    var
     _by_ = caml_call1(to_string, x),
     _bz_ = [0, caml_call1(Sexplib0_Sexp_conv[7], _by_), 0],
     _bA_ = caml_call2(Stdlib[28], mod_name, cst_value_cannot_be_represente),
     _bB_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], _bA_), _bz_]];
    return caml_call1(Base[246], _bB_);
   }
   function trunc_unsigned(conv, logand, mask, x){
    return caml_call1(conv, caml_call2(logand, x, mask));
   }
   function exn_unsigned(conv, logand, mask, equal, mod_name, to_string, x){
    var y = trunc_unsigned(function(_bx_){return _bx_;}, logand, mask, x);
    return caml_call2(equal, x, y)
            ? caml_call1(conv, y)
            : raise_cannot_repr(mod_name, to_string, x);
   }
   function trunc_signed(shift_left, shift_right, shift, x){
    return caml_call2(shift_right, caml_call2(shift_left, x, shift), shift);
   }
   function exn_signed
   (shift_left, shift_right, shift, equal, mod_name, to_string, x){
    var y = trunc_signed(shift_left, shift_right, shift, x);
    return caml_call2(equal, x, y)
            ? y
            : raise_cannot_repr(mod_name, to_string, x);
   }
   function identity_if_positive(greater_equal, zero, mod_name, to_string, x){
    return caml_call2(greater_equal, x, zero)
            ? x
            : raise_cannot_repr(mod_name, to_string, x);
   }
   function of_sexp_error(what, sexp){
    throw caml_maybe_attach_backtrace
           ([0, Sexplib0_Sexp_conv[25], [0, Stdlib[7], what], sexp], 1);
   }
   var
    include = caml_call1(caml_call1(Stdlib_Sys[51][1], [0]), [0]),
    repr = include[1];
   function to_int32(x){return repr ? x : caml_call1(Base_Int32[108], x);}
   function to_int64(x){
    return repr ? caml_int64_of_int32(x) : caml_int64_of_int32(x);
   }
   var
    compare = Base_Int[14],
    globalize = Base_Int[1],
    hash_fold_t = Base_Int[7],
    func = Base_Int[8];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    include$0 = caml_call1(Base_Comparable[11], [0, compare, sexp_of_t]),
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    equal = include$0[7],
    compare$0 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    typerep_of_t = Typerep_lib_Std[2],
    typename_of_t = Typerep_lib_Std[25],
    zero = Base_Int[79],
    shift_left = Base_Int[53],
    shift_right = Base_Int[54],
    shift = Base_Int[64] - 8 | 0,
    to_string = Base_Int[12],
    min_value = -128,
    max_value = 127,
    signed = 1,
    num_bits = 8,
    num_bytes = 1;
   function trunc(x){return trunc_signed(shift_left, shift_right, shift, x);}
   function exn(x){
    return exn_signed
            (shift_left, shift_right, shift, equal, mod_name, to_string, x);
   }
   function of_base_int_trunc(x){return trunc(x);}
   function of_base_int_exn(x){return exn(x);}
   function to_base_int(x){return x;}
   function of_int16_trunc(x){return trunc(x);}
   function of_int16_exn(x){return exn(x);}
   function of_int32_trunc(x){
    var _bw_ = to_int32(x);
    return trunc(caml_call1(Base_Int32[109], _bw_));
   }
   function of_int32_exn(x){
    var _bv_ = to_int32(x);
    return exn(caml_call1(Base_Int32[6], _bv_));
   }
   function of_int63_trunc(x){return trunc(caml_call1(Base_Int63[107], x));}
   function of_int63_exn(x){return exn(caml_call1(Base_Int63[5], x));}
   function of_int64_trunc(x){return trunc(caml_int64_to_int32(x));}
   function of_int64_exn(x){return exn(caml_call1(Base_Int64[6], x));}
   function of_uint8_wrap(x){return trunc(x);}
   function of_uint8_exn(x){return exn(x);}
   var
    quickcheck_generator =
      caml_call2(Base_quickcheck_Generator[69], min_value, max_value),
    quickcheck_observer =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc);
   function _a_(x){return caml_call2(equal, x, trunc(x));}
   var
    quickcheck_shrinker =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _a_);
   function symbol$5(_bu_, _bt_){return _bt_ <= _bu_ ? 1 : 0;}
   function symbol$6(_bs_, _br_){return _bs_ <= _br_ ? 1 : 0;}
   function symbol$7(_bq_, _bp_){return _bq_ === _bp_ ? 1 : 0;}
   function symbol$8(_bo_, _bn_){return _bn_ < _bo_ ? 1 : 0;}
   function symbol$9(_bm_, _bl_){return _bm_ < _bl_ ? 1 : 0;}
   function symbol$10(_bk_, _bj_){return _bk_ !== _bj_ ? 1 : 0;}
   function symbol$11(x, y){return trunc(x + y | 0);}
   function symbol$12(x, y){return trunc(x - y | 0);}
   function symbol$13(x, y){return trunc(caml_mul(x, y));}
   function symbol$14(x, y){return trunc(caml_div(x, y));}
   var
    Wrap = [0, symbol$11, symbol$12, symbol$13, symbol$14],
    O = [0, symbol$5, symbol$6, symbol$7, symbol$8, symbol$9, symbol$10, Wrap],
    compare$1 = Base_Int[14],
    globalize$0 = Base_Int[1],
    hash_fold_t$0 = Base_Int[7],
    func$0 = Base_Int[8];
   function hash$0(x){return caml_call1(func$0, x);}
   var
    t_of_sexp$0 = Base_Int[9],
    sexp_of_t$0 = Base_Int[10],
    include$1 = caml_call1(Base_Comparable[11], [0, compare$1, sexp_of_t$0]),
    symbol$15 = include$1[1],
    symbol$16 = include$1[2],
    symbol$17 = include$1[3],
    symbol$18 = include$1[4],
    symbol$19 = include$1[5],
    symbol$20 = include$1[6],
    compare$2 = include$1[8],
    min$0 = include$1[9],
    max$0 = include$1[10],
    typerep_of_t$0 = Typerep_lib_Std[2],
    typename_of_t$0 = Typerep_lib_Std[25],
    zero$0 = Base_Int[79],
    min_value$0 = Base_Int[79],
    conv = caml_int64_to_int32,
    max_value$0 = 255,
    signed$0 = 0,
    num_bits$0 = 8,
    num_bytes$0 = 1;
   function logand(_bi_, _bh_){return _bi_ & _bh_;}
   var
    logand64 = caml_int64_and,
    mask64 = caml_int64_of_int32(255),
    equal$0 = Base_Int[13],
    equal64 = Base_Int64[13],
    to_string$0 = Base_Int[12],
    to_string64 = Base_Int64[12],
    mask = 255;
   function trunc$0(x){
    return trunc_unsigned(function(_bg_){return _bg_;}, logand, mask, x);
   }
   function exn$0(x){
    return exn_unsigned
            (function(_bf_){return _bf_;},
             logand,
             mask,
             equal$0,
             mod_name$0,
             to_string$0,
             x);
   }
   function trunc64(x){return trunc_unsigned(conv, logand64, mask64, x);}
   function exn64(x){
    return exn_unsigned
            (conv, logand64, mask64, equal64, mod_name$0, to_string64, x);
   }
   function of_base_int_trunc$0(x){return trunc$0(x);}
   function of_base_int_exn$0(x){return exn$0(x);}
   function to_base_int$0(x){return x;}
   function of_uint16_trunc(x){return trunc$0(x);}
   function of_uint16_exn(x){return exn$0(x);}
   function of_uint32_trunc(x){return trunc64(to_int64(x));}
   function of_uint32_exn(x){return exn64(to_int64(x));}
   function of_uint63_trunc(x){return trunc64(caml_call1(Base_Int63[83], x));}
   function of_uint63_exn(x){return exn64(caml_call1(Base_Int63[83], x));}
   function of_uint64_trunc(x){return trunc64(x);}
   function of_uint64_exn(x){return exn64(x);}
   function of_int8_wrap(x){return trunc$0(x);}
   function of_int8_exn(x){return exn$0(x);}
   var
    quickcheck_generator$0 =
      caml_call2(Base_quickcheck_Generator[69], min_value$0, max_value$0),
    quickcheck_observer$0 =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc$0);
   function _b_(x){return caml_call2(equal$0, x, trunc$0(x));}
   var
    quickcheck_shrinker$0 =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _b_);
   function symbol$21(_be_, _bd_){return _bd_ <= _be_ ? 1 : 0;}
   function symbol$22(_bc_, _bb_){return _bc_ <= _bb_ ? 1 : 0;}
   function symbol$23(_ba_, _a$_){return _ba_ === _a$_ ? 1 : 0;}
   function symbol$24(_a__, _a9_){return _a9_ < _a__ ? 1 : 0;}
   function symbol$25(_a8_, _a7_){return _a8_ < _a7_ ? 1 : 0;}
   function symbol$26(_a6_, _a5_){return _a6_ !== _a5_ ? 1 : 0;}
   function symbol$27(x, y){return trunc$0(x + y | 0);}
   function symbol$28(x, y){return trunc$0(x - y | 0);}
   function symbol$29(x, y){return trunc$0(caml_mul(x, y));}
   function symbol$30(x, y){return trunc$0(caml_div(x, y));}
   var
    Wrap$0 = [0, symbol$27, symbol$28, symbol$29, symbol$30],
    O$0 =
      [0,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       Wrap$0],
    compare$3 = Base_Int[14],
    globalize$1 = Base_Int[1],
    hash_fold_t$1 = Base_Int[7],
    func$1 = Base_Int[8];
   function hash$1(x){return caml_call1(func$1, x);}
   var
    t_of_sexp$1 = Base_Int[9],
    sexp_of_t$1 = Base_Int[10],
    include$2 = caml_call1(Base_Comparable[11], [0, compare$3, sexp_of_t$1]),
    symbol$31 = include$2[1],
    symbol$32 = include$2[2],
    symbol$33 = include$2[3],
    symbol$34 = include$2[4],
    symbol$35 = include$2[5],
    symbol$36 = include$2[6],
    equal$1 = include$2[7],
    compare$4 = include$2[8],
    min$1 = include$2[9],
    max$1 = include$2[10],
    typerep_of_t$1 = Typerep_lib_Std[2],
    typename_of_t$1 = Typerep_lib_Std[25],
    zero$1 = Base_Int[79],
    shift_left$0 = Base_Int[53],
    shift_right$0 = Base_Int[54],
    shift$0 = Base_Int[64] - 16 | 0,
    to_string$1 = Base_Int[12],
    min_value$1 = -32768,
    max_value$1 = 32767,
    signed$1 = 1,
    num_bits$1 = 16,
    num_bytes$1 = 2;
   function trunc$1(x){
    return trunc_signed(shift_left$0, shift_right$0, shift$0, x);
   }
   function exn$1(x){
    return exn_signed
            (shift_left$0,
             shift_right$0,
             shift$0,
             equal$1,
             mod_name$1,
             to_string$1,
             x);
   }
   function of_base_int_trunc$1(x){return trunc$1(x);}
   function of_base_int_exn$1(x){return exn$1(x);}
   function to_base_int$1(x){return x;}
   function of_int8(x){return x;}
   function of_int32_trunc$0(x){
    var _a4_ = to_int32(x);
    return trunc$1(caml_call1(Base_Int32[109], _a4_));
   }
   function of_int32_exn$0(x){
    var _a3_ = to_int32(x);
    return exn$1(caml_call1(Base_Int32[6], _a3_));
   }
   function of_int63_trunc$0(x){
    return trunc$1(caml_call1(Base_Int63[107], x));
   }
   function of_int63_exn$0(x){return exn$1(caml_call1(Base_Int63[5], x));}
   function of_int64_trunc$0(x){return trunc$1(caml_int64_to_int32(x));}
   function of_int64_exn$0(x){return exn$1(caml_call1(Base_Int64[6], x));}
   function of_uint16_wrap(x){return trunc$1(x);}
   function of_uint16_exn$0(x){return exn$1(x);}
   var
    quickcheck_generator$1 =
      caml_call2(Base_quickcheck_Generator[69], min_value$1, max_value$1),
    quickcheck_observer$1 =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc$1);
   function _c_(x){return caml_call2(equal$1, x, trunc$1(x));}
   var
    quickcheck_shrinker$1 =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _c_);
   function symbol$37(_a2_, _a1_){return _a1_ <= _a2_ ? 1 : 0;}
   function symbol$38(_a0_, _aZ_){return _a0_ <= _aZ_ ? 1 : 0;}
   function symbol$39(_aY_, _aX_){return _aY_ === _aX_ ? 1 : 0;}
   function symbol$40(_aW_, _aV_){return _aV_ < _aW_ ? 1 : 0;}
   function symbol$41(_aU_, _aT_){return _aU_ < _aT_ ? 1 : 0;}
   function symbol$42(_aS_, _aR_){return _aS_ !== _aR_ ? 1 : 0;}
   function symbol$43(x, y){return trunc$1(x + y | 0);}
   function symbol$44(x, y){return trunc$1(x - y | 0);}
   function symbol$45(x, y){return trunc$1(caml_mul(x, y));}
   function symbol$46(x, y){return trunc$1(caml_div(x, y));}
   var
    Wrap$1 = [0, symbol$43, symbol$44, symbol$45, symbol$46],
    O$1 =
      [0,
       symbol$37,
       symbol$38,
       symbol$39,
       symbol$40,
       symbol$41,
       symbol$42,
       Wrap$1],
    compare$5 = Base_Int[14],
    globalize$2 = Base_Int[1],
    hash_fold_t$2 = Base_Int[7],
    func$2 = Base_Int[8];
   function hash$2(x){return caml_call1(func$2, x);}
   var
    t_of_sexp$2 = Base_Int[9],
    sexp_of_t$2 = Base_Int[10],
    include$3 = caml_call1(Base_Comparable[11], [0, compare$5, sexp_of_t$2]),
    symbol$47 = include$3[1],
    symbol$48 = include$3[2],
    symbol$49 = include$3[3],
    symbol$50 = include$3[4],
    symbol$51 = include$3[5],
    symbol$52 = include$3[6],
    compare$6 = include$3[8],
    min$2 = include$3[9],
    max$2 = include$3[10],
    typerep_of_t$2 = Typerep_lib_Std[2],
    typename_of_t$2 = Typerep_lib_Std[25],
    zero$2 = Base_Int[79],
    min_value$2 = Base_Int[79],
    conv$0 = caml_int64_to_int32,
    max_value$2 = 65535,
    signed$2 = 0,
    num_bits$2 = 16,
    num_bytes$2 = 2;
   function logand$0(_aQ_, _aP_){return _aQ_ & _aP_;}
   var
    logand64$0 = caml_int64_and,
    mask64$0 = caml_int64_of_int32(65535),
    equal$2 = Base_Int[13],
    equal64$0 = Base_Int64[13],
    to_string$2 = Base_Int[12],
    to_string64$0 = Base_Int64[12],
    mask$0 = 65535;
   function trunc$2(x){
    return trunc_unsigned(function(_aO_){return _aO_;}, logand$0, mask$0, x);
   }
   function exn$2(x){
    return exn_unsigned
            (function(_aN_){return _aN_;},
             logand$0,
             mask$0,
             equal$2,
             mod_name$2,
             to_string$2,
             x);
   }
   function trunc64$0(x){
    return trunc_unsigned(conv$0, logand64$0, mask64$0, x);
   }
   function exn64$0(x){
    return exn_unsigned
            (conv$0,
             logand64$0,
             mask64$0,
             equal64$0,
             mod_name$2,
             to_string64$0,
             x);
   }
   function of_base_int_trunc$2(x){return trunc$2(x);}
   function of_base_int_exn$2(x){return exn$2(x);}
   function to_base_int$2(x){return x;}
   function of_uint8(x){return x;}
   function of_uint32_trunc$0(x){return trunc64$0(to_int64(x));}
   function of_uint32_exn$0(x){return exn64$0(to_int64(x));}
   function of_uint63_trunc$0(x){
    return trunc64$0(caml_call1(Base_Int63[83], x));
   }
   function of_uint63_exn$0(x){return exn64$0(caml_call1(Base_Int63[83], x));}
   function of_uint64_trunc$0(x){return trunc64$0(x);}
   function of_uint64_exn$0(x){return exn64$0(x);}
   function of_int16_wrap(x){return trunc$2(x);}
   function of_int16_exn$0(x){return exn$2(x);}
   var
    quickcheck_generator$2 =
      caml_call2(Base_quickcheck_Generator[69], min_value$2, max_value$2),
    quickcheck_observer$2 =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc$2);
   function _d_(x){return caml_call2(equal$2, x, trunc$2(x));}
   var
    quickcheck_shrinker$2 =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _d_);
   function symbol$53(_aM_, _aL_){return _aL_ <= _aM_ ? 1 : 0;}
   function symbol$54(_aK_, _aJ_){return _aK_ <= _aJ_ ? 1 : 0;}
   function symbol$55(_aI_, _aH_){return _aI_ === _aH_ ? 1 : 0;}
   function symbol$56(_aG_, _aF_){return _aF_ < _aG_ ? 1 : 0;}
   function symbol$57(_aE_, _aD_){return _aE_ < _aD_ ? 1 : 0;}
   function symbol$58(_aC_, _aB_){return _aC_ !== _aB_ ? 1 : 0;}
   function symbol$59(x, y){return trunc$2(x + y | 0);}
   function symbol$60(x, y){return trunc$2(x - y | 0);}
   function symbol$61(x, y){return trunc$2(caml_mul(x, y));}
   function symbol$62(x, y){return trunc$2(caml_div(x, y));}
   var
    Wrap$2 = [0, symbol$59, symbol$60, symbol$61, symbol$62],
    O$2 =
      [0,
       symbol$53,
       symbol$54,
       symbol$55,
       symbol$56,
       symbol$57,
       symbol$58,
       Wrap$2],
    compare$7 = Base_Int[14],
    hash_fold_t$3 = Base_Int[7],
    func$3 = Base_Int[8];
   function hash$3(x){return caml_call1(func$3, x);}
   var
    t_of_sexp$3 = Base_Int[9],
    sexp_of_t$3 = Base_Int[10],
    include$4 = caml_call1(Base_Comparable[11], [0, compare$7, sexp_of_t$3]),
    symbol$63 = include$4[1],
    symbol$64 = include$4[2],
    symbol$65 = include$4[3],
    symbol$66 = include$4[4],
    symbol$67 = include$4[5],
    symbol$68 = include$4[6],
    equal$3 = include$4[7],
    compare$8 = include$4[8],
    min$3 = include$4[9],
    max$3 = include$4[10],
    typerep_of_t$3 = Typerep_lib_Std[2],
    typename_of_t$3 = Typerep_lib_Std[25],
    zero$3 = Base_Int[79],
    min_value$3 = caml_call1(Base_Int32[109], Base_Int32[90]),
    max_value$3 = caml_call1(Base_Int32[109], Base_Int32[89]),
    shift_left$1 = Base_Int[53],
    shift_right$1 = Base_Int[54],
    shift$1 = Base_Int[64] - 32 | 0,
    to_string$3 = Base_Int[12],
    signed$3 = 1,
    num_bits$3 = 32,
    num_bytes$3 = 4;
   function trunc$3(x){
    return trunc_signed(shift_left$1, shift_right$1, shift$1, x);
   }
   function exn$3(x){
    return exn_signed
            (shift_left$1,
             shift_right$1,
             shift$1,
             equal$3,
             mod_name$3,
             to_string$3,
             x);
   }
   function of_base_int32(x){return caml_call1(Base_Int32[109], x);}
   function to_base_int32(x){return caml_call1(Base_Int32[108], x);}
   function of_int8$0(x){return x;}
   function of_int16(x){return x;}
   function of_int63_trunc$1(x){
    return trunc$3(caml_call1(Base_Int63[107], x));
   }
   function of_int63_exn$1(x){return exn$3(caml_call1(Base_Int63[5], x));}
   function of_int64_trunc$1(x){return trunc$3(caml_int64_to_int32(x));}
   function of_int64_exn$1(x){return exn$3(caml_call1(Base_Int64[6], x));}
   function of_uint32_wrap(x){return trunc$3(x);}
   function of_uint32_exn$1(x){return exn$3(x);}
   var
    quickcheck_generator$3 =
      caml_call2(Base_quickcheck_Generator[69], min_value$3, max_value$3),
    quickcheck_observer$3 =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc$3);
   function _e_(x){return caml_call2(equal$3, x, trunc$3(x));}
   var
    quickcheck_shrinker$3 =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _e_);
   function symbol$69(_aA_, _az_){return _az_ <= _aA_ ? 1 : 0;}
   function symbol$70(_ay_, _ax_){return _ay_ <= _ax_ ? 1 : 0;}
   function symbol$71(_aw_, _av_){return _aw_ === _av_ ? 1 : 0;}
   function symbol$72(_au_, _at_){return _at_ < _au_ ? 1 : 0;}
   function symbol$73(_as_, _ar_){return _as_ < _ar_ ? 1 : 0;}
   function symbol$74(_aq_, _ap_){return _aq_ !== _ap_ ? 1 : 0;}
   function symbol$75(x, y){return trunc$3(x + y | 0);}
   function symbol$76(x, y){return trunc$3(x - y | 0);}
   function symbol$77(x, y){return trunc$3(caml_mul(x, y));}
   function symbol$78(x, y){return trunc$3(caml_div(x, y));}
   var
    Wrap$3 = [0, symbol$75, symbol$76, symbol$77, symbol$78],
    O$3 =
      [0,
       symbol$69,
       symbol$70,
       symbol$71,
       symbol$72,
       symbol$73,
       symbol$74,
       Wrap$3],
    compare$9 = Base_Int[14],
    hash_fold_t$4 = Base_Int[7],
    func$4 = Base_Int[8];
   function hash$4(x){return caml_call1(func$4, x);}
   var
    t_of_sexp$4 = Base_Int[9],
    sexp_of_t$4 = Base_Int[10],
    include$5 = caml_call1(Base_Comparable[11], [0, compare$9, sexp_of_t$4]),
    symbol$79 = include$5[1],
    symbol$80 = include$5[2],
    symbol$81 = include$5[3],
    symbol$82 = include$5[4],
    symbol$83 = include$5[5],
    symbol$84 = include$5[6],
    compare$10 = include$5[8],
    min$4 = include$5[9],
    max$4 = include$5[10],
    typerep_of_t$4 = Typerep_lib_Std[2],
    typename_of_t$4 = Typerep_lib_Std[25],
    zero$4 = Base_Int[79],
    min_value$4 = Base_Int[79],
    max_value$4 = caml_int64_to_int32(_f_),
    conv$1 = caml_int64_to_int32,
    signed$4 = 0,
    num_bits$4 = 32,
    num_bytes$4 = 4;
   function logand$1(_ao_, _an_){return _ao_ & _an_;}
   var
    logand64$1 = caml_int64_and,
    mask$1 = caml_int64_to_int32(_g_),
    mask64$1 = caml_int64_of_int32(mask$1),
    equal$4 = Base_Int[13],
    equal64$1 = Base_Int64[13],
    to_string$4 = Base_Int[12],
    to_string64$1 = Base_Int64[12];
   function trunc$4(x){
    return trunc_unsigned(function(_am_){return _am_;}, logand$1, mask$1, x);
   }
   function exn$4(x){
    return exn_unsigned
            (function(_al_){return _al_;},
             logand$1,
             mask$1,
             equal$4,
             mod_name$4,
             to_string$4,
             x);
   }
   function trunc64$1(x){
    return trunc_unsigned(conv$1, logand64$1, mask64$1, x);
   }
   function exn64$1(x){
    return exn_unsigned
            (conv$1,
             logand64$1,
             mask64$1,
             equal64$1,
             mod_name$4,
             to_string64$1,
             x);
   }
   function of_base_int32_trunc(x){
    return caml_int64_to_int32
            (caml_int64_and(caml_int64_of_int32(x), mask64$1));
   }
   function of_base_int32_exn(x){
    return exn$4(caml_call1(Base_Int32[109], x));
   }
   function to_base_int32_trunc(x){return x;}
   function to_base_int32_exn(x){
    return x <= caml_int64_to_int32(_h_)
            ? caml_call1(Base_Int32[108], x)
            : raise_cannot_repr(mod_name$4, Base_Int[12], x);
   }
   function of_base_int64_trunc(x){return trunc64$1(x);}
   function of_base_int64_exn(x){return exn64$1(x);}
   function to_base_int64(x){return caml_call1(Base_Int[60], x);}
   function of_base_int_exn$3(x){return exn$4(x);}
   function to_base_int_exn(x){return x;}
   function of_uint8$0(x){return x;}
   function of_uint16(x){return x;}
   function of_uint63_trunc$1(x){
    return trunc64$1(caml_call1(Base_Int63[83], x));
   }
   function of_uint63_exn$1(x){return exn64$1(caml_call1(Base_Int63[83], x));}
   function of_uint64_trunc$1(x){return trunc64$1(x);}
   function of_uint64_exn$1(x){return exn64$1(x);}
   function of_int32_wrap(x){return trunc$4(x);}
   function of_int32_exn$1(x){return exn$4(x);}
   var
    quickcheck_generator$4 =
      caml_call2(Base_quickcheck_Generator[69], min_value$4, max_value$4),
    quickcheck_observer$4 =
      caml_call2
       (Base_quickcheck_Observer[33], Base_quickcheck_Observer[7], trunc$4);
   function _i_(x){return caml_call2(equal$4, x, trunc$4(x));}
   var
    quickcheck_shrinker$4 =
      caml_call2
       (Base_quickcheck_Shrinker[32], Base_quickcheck_Shrinker[7], _i_);
   function symbol$85(_ak_, _aj_){return _aj_ <= _ak_ ? 1 : 0;}
   function symbol$86(_ai_, _ah_){return _ai_ <= _ah_ ? 1 : 0;}
   function symbol$87(_ag_, _af_){return _ag_ === _af_ ? 1 : 0;}
   function symbol$88(_ae_, _ad_){return _ad_ < _ae_ ? 1 : 0;}
   function symbol$89(_ac_, _ab_){return _ac_ < _ab_ ? 1 : 0;}
   function symbol$90(_aa_, _$_){return _aa_ !== _$_ ? 1 : 0;}
   function symbol$91(x, y){return trunc$4(x + y | 0);}
   function symbol$92(x, y){return trunc$4(x - y | 0);}
   function symbol$93(x, y){return trunc$4(caml_mul(x, y));}
   function symbol$94(x, y){return trunc$4(caml_div(x, y));}
   var
    Wrap$4 = [0, symbol$91, symbol$92, symbol$93, symbol$94],
    O$4 =
      [0,
       symbol$85,
       symbol$86,
       symbol$87,
       symbol$88,
       symbol$89,
       symbol$90,
       Wrap$4],
    compare$11 = Base_Int32[20],
    hash_fold_t$5 = Base_Int32[7],
    func$5 = Base_Int32[8];
   function hash$5(x){return caml_call1(func$5, x);}
   var
    t_of_sexp$5 = Base_Int32[9],
    sexp_of_t$5 = Base_Int32[10],
    include$6 = caml_call1(Base_Comparable[11], [0, compare$11, sexp_of_t$5]),
    symbol$95 = include$6[1],
    symbol$96 = include$6[2],
    symbol$97 = include$6[3],
    symbol$98 = include$6[4],
    symbol$99 = include$6[5],
    symbol$100 = include$6[6],
    equal$5 = include$6[7],
    compare$12 = include$6[8],
    min$5 = include$6[9],
    max$5 = include$6[10],
    quickcheck_generator$5 = Base_quickcheck[7],
    quickcheck_observer$5 = Base_quickcheck[17],
    quickcheck_shrinker$5 = Base_quickcheck[27],
    typerep_of_t$5 = Typerep_lib_Std[3],
    typename_of_t$5 = Typerep_lib_Std[26],
    zero$5 = Base_Int32[43],
    min_value$5 = Base_Int32[90],
    max_value$5 = Base_Int32[89],
    greater_equal = Base_Int32[13],
    to_string$5 = Base_Int32[12],
    signed$5 = 1,
    num_bits$5 = 32,
    num_bytes$5 = 4;
   function of_base_int32$0(x){return x;}
   function to_base_int32$0(x){return x;}
   function of_int8$1(x){return caml_call1(Base_Int32[108], x);}
   function of_int16$0(x){return caml_call1(Base_Int32[108], x);}
   function of_int63_trunc$2(x){return caml_call1(Base_Int63[108], x);}
   function of_int63_exn$2(x){return caml_call1(Base_Int63[81], x);}
   var of_int64_trunc$2 = caml_int64_to_int32;
   function of_int64_exn$2(x){return caml_call1(Base_Int64[58], x);}
   function of_uint32_wrap$0(x){return x;}
   function of_uint32_exn$2(x){
    return identity_if_positive
            (greater_equal, zero$5, mod_name$5, to_string$5, x);
   }
   var
    symbol$101 = Base_Int32[13],
    symbol$102 = Base_Int32[14],
    symbol$103 = Base_Int32[15],
    symbol$104 = Base_Int32[16],
    symbol$105 = Base_Int32[17],
    symbol$106 = Base_Int32[18],
    symbol$107 = Base_Int32[46],
    symbol$108 = Base_Int32[47],
    symbol$109 = Base_Int32[48],
    symbol$110 = Base_Int32[54],
    Wrap$5 = [0, symbol$107, symbol$108, symbol$109, symbol$110],
    O$5 =
      [0,
       symbol$101,
       symbol$102,
       symbol$103,
       symbol$104,
       symbol$105,
       symbol$106,
       Wrap$5],
    hash_fold_t$6 = Base_Int32[7],
    func$6 = Base_Int32[8];
   function hash$6(x){return caml_call1(func$6, x);}
   var
    quickcheck_generator$6 = Base_quickcheck[7],
    quickcheck_observer$6 = Base_quickcheck[17],
    quickcheck_shrinker$6 = Base_quickcheck[27];
   function compare$13(x, y){return caml_call2(Stdlib_Int32[16], x, y);}
   var
    typerep_of_t$6 = Typerep_lib_Std[3],
    typename_of_t$6 = Typerep_lib_Std[26],
    zero$6 = Base_Int32[43],
    min_value$6 = Base_Int32[43],
    greater_equal$0 = Base_Int32[13],
    to_string$6 = Base_Int32[12],
    max_value$6 = -1,
    signed$6 = 0,
    num_bits$6 = 32,
    num_bytes$6 = 4;
   function of_base_int32_trunc$0(x){return x;}
   function of_base_int32_exn$0(x){
    return identity_if_positive
            (greater_equal$0, zero$6, mod_name$6, to_string$6, x);
   }
   function to_base_int32_trunc$0(x){return x;}
   function to_base_int32_exn$0(x){
    return identity_if_positive
            (greater_equal$0, zero$6, mod_name$6, to_string$6, x);
   }
   function of_base_int64_trunc$0(x){return caml_call1(Base_Int32[111], x);}
   function of_base_int64_exn$0(x){
    if(caml_greaterequal(x, _j_) && caml_lessequal(x, _k_))
     return caml_int64_to_int32(x);
    return raise_cannot_repr(mod_name$6, Base_Int64[12], x);
   }
   function to_base_int64$0(x){
    return caml_int64_and(caml_call1(Base_Int32[84], x), _l_);
   }
   function of_base_int_exn$4(x){
    return identity_if_positive
            (greater_equal$0,
             zero$6,
             mod_name$6,
             to_string$6,
             caml_call1(Base_Int32[5], x));
   }
   function to_base_int_exn$0(x){
    var
     ___ =
       identity_if_positive
        (greater_equal$0, zero$6, mod_name$6, to_string$6, x);
    return caml_call1(Base_Int32[6], ___);
   }
   function of_uint8$1(x){return caml_call1(Base_Int32[108], x);}
   function of_uint16$0(x){return caml_call1(Base_Int32[108], x);}
   function of_uint63_trunc$2(x){
    return of_base_int64_trunc$0(caml_call1(Base_Int63[83], x));
   }
   function of_uint63_exn$2(x){
    return of_base_int64_exn$0(caml_call1(Base_Int63[83], x));
   }
   function of_uint64_trunc$2(x){return of_base_int64_trunc$0(x);}
   function of_uint64_exn$2(x){return of_base_int64_exn$0(x);}
   function of_int32_wrap$0(x){return x;}
   function of_int32_exn$2(x){
    return identity_if_positive
            (greater_equal$0, zero$6, mod_name$6, to_string$6, x);
   }
   function sexp_of_t$6(x){return [0, caml_call2(Stdlib_Printf[4], _m_, x)];}
   function t_of_sexp$6(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_Int_repr_Uint32_t_of_sexp_$0, sexp);
    var s = sexp[1];
    try{
     var
      _W_ = function(_Z_){return _Z_;},
      _X_ = caml_call3(Stdlib_Scanf[5], s, _n_, _W_);
     return _X_;
    }
    catch(_Y_){return of_sexp_error(cst_Int_repr_Uint32_t_of_sexp_, sexp);}
   }
   function symbol$111(x, y){return 0 <= compare$13(x, y) ? 1 : 0;}
   function symbol$112(x, y){return compare$13(x, y) <= 0 ? 1 : 0;}
   function symbol$113(x, y){return 0 === compare$13(x, y) ? 1 : 0;}
   function symbol$114(x, y){return 0 < compare$13(x, y) ? 1 : 0;}
   function symbol$115(x, y){return compare$13(x, y) < 0 ? 1 : 0;}
   function symbol$116(x, y){return 0 !== compare$13(x, y) ? 1 : 0;}
   var
    symbol$117 = Base_Int32[46],
    symbol$118 = Base_Int32[47],
    symbol$119 = Base_Int32[48],
    symbol$120 = Stdlib_Int32[4],
    Wrap$6 = [0, symbol$117, symbol$118, symbol$119, symbol$120],
    O$6 =
      [0,
       symbol$111,
       symbol$112,
       symbol$113,
       symbol$114,
       symbol$115,
       symbol$116,
       Wrap$6],
    include$7 = caml_call1(Base_Comparable[11], [0, compare$13, sexp_of_t$6]),
    symbol$121 = include$7[1],
    symbol$122 = include$7[2],
    symbol$123 = include$7[3],
    symbol$124 = include$7[4],
    symbol$125 = include$7[5],
    symbol$126 = include$7[6],
    equal$6 = include$7[7],
    compare$14 = include$7[8],
    min$6 = include$7[9],
    max$6 = include$7[10],
    impl =
      repr
       ? [0,
         [0,
          quickcheck_generator$5,
          quickcheck_observer$5,
          quickcheck_shrinker$5,
          t_of_sexp$5,
          sexp_of_t$5,
          typerep_of_t$5,
          typename_of_t$5,
          signed$5,
          num_bits$5,
          num_bytes$5,
          zero$5,
          min_value$5,
          max_value$5,
          hash_fold_t$5,
          hash$5,
          symbol$95,
          symbol$96,
          symbol$97,
          symbol$98,
          symbol$99,
          symbol$100,
          equal$5,
          compare$12,
          min$5,
          max$5,
          O$5,
          of_base_int32$0,
          to_base_int32$0,
          of_int8$1,
          of_int16$0,
          of_int63_trunc$2,
          of_int63_exn$2,
          of_int64_trunc$2,
          of_int64_exn$2,
          of_uint32_wrap$0,
          of_uint32_exn$2],
         [0,
          quickcheck_generator$6,
          quickcheck_observer$6,
          quickcheck_shrinker$6,
          t_of_sexp$6,
          sexp_of_t$6,
          typerep_of_t$6,
          typename_of_t$6,
          signed$6,
          num_bits$6,
          num_bytes$6,
          zero$6,
          min_value$6,
          max_value$6,
          hash_fold_t$6,
          hash$6,
          symbol$121,
          symbol$122,
          symbol$123,
          symbol$124,
          symbol$125,
          symbol$126,
          equal$6,
          compare$14,
          min$6,
          max$6,
          O$6,
          of_base_int32_trunc$0,
          of_base_int32_exn$0,
          to_base_int32_trunc$0,
          to_base_int32_exn$0,
          of_base_int64_trunc$0,
          of_base_int64_exn$0,
          to_base_int64$0,
          of_base_int_exn$4,
          to_base_int_exn$0,
          of_uint8$1,
          of_uint16$0,
          of_uint63_trunc$2,
          of_uint63_exn$2,
          of_uint64_trunc$2,
          of_uint64_exn$2,
          of_int32_wrap$0,
          of_int32_exn$2]]
       : [0,
         [0,
          quickcheck_generator$3,
          quickcheck_observer$3,
          quickcheck_shrinker$3,
          t_of_sexp$3,
          sexp_of_t$3,
          typerep_of_t$3,
          typename_of_t$3,
          signed$3,
          num_bits$3,
          num_bytes$3,
          zero$3,
          min_value$3,
          max_value$3,
          hash_fold_t$3,
          hash$3,
          symbol$63,
          symbol$64,
          symbol$65,
          symbol$66,
          symbol$67,
          symbol$68,
          equal$3,
          compare$8,
          min$3,
          max$3,
          O$3,
          of_base_int32,
          to_base_int32,
          of_int8$0,
          of_int16,
          of_int63_trunc$1,
          of_int63_exn$1,
          of_int64_trunc$1,
          of_int64_exn$1,
          of_uint32_wrap,
          of_uint32_exn$1],
         [0,
          quickcheck_generator$4,
          quickcheck_observer$4,
          quickcheck_shrinker$4,
          t_of_sexp$4,
          sexp_of_t$4,
          typerep_of_t$4,
          typename_of_t$4,
          signed$4,
          num_bits$4,
          num_bytes$4,
          zero$4,
          min_value$4,
          max_value$4,
          hash_fold_t$4,
          hash$4,
          symbol$79,
          symbol$80,
          symbol$81,
          symbol$82,
          symbol$83,
          symbol$84,
          equal$4,
          compare$10,
          min$4,
          max$4,
          O$4,
          of_base_int32_trunc,
          of_base_int32_exn,
          to_base_int32_trunc,
          to_base_int32_exn,
          of_base_int64_trunc,
          of_base_int64_exn,
          to_base_int64,
          of_base_int_exn$3,
          to_base_int_exn,
          of_uint8$0,
          of_uint16,
          of_uint63_trunc$1,
          of_uint63_exn$1,
          of_uint64_trunc$1,
          of_uint64_exn$1,
          of_int32_wrap,
          of_int32_exn$1]],
    include$8 = impl[1],
    quickcheck_generator$7 = include$8[1],
    quickcheck_observer$7 = include$8[2],
    quickcheck_shrinker$7 = include$8[3],
    t_of_sexp$7 = include$8[4],
    sexp_of_t$7 = include$8[5],
    typerep_of_t$7 = include$8[6],
    typename_of_t$7 = include$8[7],
    signed$7 = include$8[8],
    num_bits$7 = include$8[9],
    num_bytes$7 = include$8[10],
    zero$7 = include$8[11],
    min_value$7 = include$8[12],
    max_value$7 = include$8[13],
    hash_fold_t$7 = include$8[14],
    hash$7 = include$8[15],
    symbol$127 = include$8[16],
    symbol$128 = include$8[17],
    symbol$129 = include$8[18],
    symbol$130 = include$8[19],
    symbol$131 = include$8[20],
    symbol$132 = include$8[21],
    equal$7 = include$8[22],
    compare$15 = include$8[23],
    min$7 = include$8[24],
    max$7 = include$8[25],
    O$7 = include$8[26],
    of_base_int32$1 = include$8[27],
    to_base_int32$1 = include$8[28],
    of_int8$2 = include$8[29],
    of_int16$1 = include$8[30],
    of_int63_trunc$3 = include$8[31],
    of_int63_exn$3 = include$8[32],
    of_int64_trunc$3 = include$8[33],
    of_int64_exn$3 = include$8[34],
    of_uint32_wrap$1 = include$8[35],
    of_uint32_exn$3 = include$8[36],
    include$9 = impl[2],
    quickcheck_generator$8 = include$9[1],
    quickcheck_observer$8 = include$9[2],
    quickcheck_shrinker$8 = include$9[3],
    t_of_sexp$8 = include$9[4],
    sexp_of_t$8 = include$9[5],
    typerep_of_t$8 = include$9[6],
    typename_of_t$8 = include$9[7],
    signed$8 = include$9[8],
    num_bits$8 = include$9[9],
    num_bytes$8 = include$9[10],
    zero$8 = include$9[11],
    min_value$8 = include$9[12],
    max_value$8 = include$9[13],
    hash_fold_t$8 = include$9[14],
    hash$8 = include$9[15],
    symbol$133 = include$9[16],
    symbol$134 = include$9[17],
    symbol$135 = include$9[18],
    symbol$136 = include$9[19],
    symbol$137 = include$9[20],
    symbol$138 = include$9[21],
    equal$8 = include$9[22],
    compare$16 = include$9[23],
    min$8 = include$9[24],
    max$8 = include$9[25],
    O$8 = include$9[26],
    of_base_int32_trunc$1 = include$9[27],
    of_base_int32_exn$1 = include$9[28],
    to_base_int32_trunc$1 = include$9[29],
    to_base_int32_exn$1 = include$9[30],
    of_base_int64_trunc$1 = include$9[31],
    of_base_int64_exn$1 = include$9[32],
    to_base_int64$1 = include$9[33],
    of_base_int_exn$5 = include$9[34],
    to_base_int_exn$1 = include$9[35],
    of_uint8$2 = include$9[36],
    of_uint16$1 = include$9[37],
    of_uint63_trunc$3 = include$9[38],
    of_uint63_exn$3 = include$9[39],
    of_uint64_trunc$3 = include$9[40],
    of_uint64_exn$3 = include$9[41],
    of_int32_wrap$1 = include$9[42],
    of_int32_exn$3 = include$9[43],
    compare$17 = Base_Int63[19],
    hash_fold_t$9 = Base_Int63[6],
    func$7 = Base_Int63[7];
   function hash$9(x){return caml_call1(func$7, x);}
   var
    t_of_sexp$9 = Base_Int63[8],
    sexp_of_t$9 = Base_Int63[9],
    include$10 = caml_call1(Base_Comparable[11], [0, compare$17, sexp_of_t$9]),
    symbol$139 = include$10[1],
    symbol$140 = include$10[2],
    symbol$141 = include$10[3],
    symbol$142 = include$10[4],
    symbol$143 = include$10[5],
    symbol$144 = include$10[6],
    equal$9 = include$10[7],
    compare$18 = include$10[8],
    min$9 = include$10[9],
    max$9 = include$10[10],
    quickcheck_generator$9 = Base_quickcheck_Generator[66],
    quickcheck_observer$9 = Base_quickcheck_Observer[9],
    quickcheck_shrinker$9 = Base_quickcheck_Shrinker[9],
    typerep_of_t$9 = Typerep_lib_Std[6],
    typename_of_t$9 = Typerep_lib_Std[29],
    zero$9 = Base_Int63[42],
    min_value$9 = Base_Int63[89],
    max_value$9 = Base_Int63[88],
    greater_equal$1 = Base_Int63[12],
    to_string$7 = Base_Int63[11],
    signed$9 = 1,
    num_bits$9 = 63,
    num_bytes$9 = 8;
   function of_int8$3(x){return caml_call1(Base_Int63[100], x);}
   function of_int16$2(x){return caml_call1(Base_Int63[100], x);}
   function of_int32(x){
    var _V_ = to_base_int32$1(x);
    return caml_call1(Base_Int63[102], _V_);
   }
   function of_int64_trunc$4(x){return caml_call1(Base_Int63[109], x);}
   function of_int64_exn$4(x){return caml_call1(Base_Int63[82], x);}
   function of_uint63_wrap(x){return x;}
   function of_uint63_exn$4(x){
    return identity_if_positive
            (greater_equal$1, zero$9, mod_name$7, to_string$7, x);
   }
   var
    symbol$145 = Base_Int63[12],
    symbol$146 = Base_Int63[13],
    symbol$147 = Base_Int63[14],
    symbol$148 = Base_Int63[15],
    symbol$149 = Base_Int63[16],
    symbol$150 = Base_Int63[17],
    symbol$151 = Base_Int63[45],
    symbol$152 = Base_Int63[46],
    symbol$153 = Base_Int63[47],
    symbol$154 = Base_Int63[53],
    Wrap$7 = [0, symbol$151, symbol$152, symbol$153, symbol$154],
    O$9 =
      [0,
       symbol$145,
       symbol$146,
       symbol$147,
       symbol$148,
       symbol$149,
       symbol$150,
       Wrap$7],
    hash_fold_t$10 = Base_Int63[6],
    func$8 = Base_Int63[7];
   function hash$10(x){return caml_call1(func$8, x);}
   var
    quickcheck_generator$10 = Base_quickcheck_Generator[66],
    quickcheck_observer$10 = Base_quickcheck_Observer[9],
    quickcheck_shrinker$10 = Base_quickcheck_Shrinker[9];
   function compare$19(x, y){
    var
     _T_ = caml_call1(Base_Int63[83], y),
     _U_ = caml_call1(Base_Int63[83], x);
    return caml_call2(Stdlib_Int64[16], _U_, _T_);
   }
   var
    typerep_of_t$10 = Typerep_lib_Std[6],
    typename_of_t$10 = Typerep_lib_Std[29],
    zero$10 = Base_Int63[42],
    min_value$10 = Base_Int63[42],
    max_value$10 = caml_call1(Base_Int63[109], _o_),
    greater_equal$2 = Base_Int63[12],
    to_string$8 = Base_Int63[11],
    signed$10 = 0,
    num_bits$10 = 63,
    num_bytes$10 = 8;
   function of_base_int64_trunc$2(x){return caml_call1(Base_Int63[109], x);}
   function of_base_int64_exn$2(x){
    return caml_greaterequal(x, _p_)
            ? caml_call1(Base_Int63[109], x)
            : raise_cannot_repr(mod_name$8, Base_Int64[12], x);
   }
   function to_base_int64$2(x){
    return caml_int64_and(caml_call1(Base_Int63[83], x), _q_);
   }
   function of_uint8$3(x){return caml_call1(Base_Int63[100], x);}
   function of_uint16$2(x){return caml_call1(Base_Int63[100], x);}
   function of_uint32(x){
    var _S_ = to_base_int64$1(x);
    return caml_call1(Base_Int63[109], _S_);
   }
   function of_uint64_trunc$4(x){return caml_call1(Base_Int63[109], x);}
   function of_uint64_exn$4(x){
    return caml_greaterequal(x, _r_)
            ? caml_call1(Base_Int63[109], x)
            : raise_cannot_repr(mod_name$8, Base_Int64[12], x);
   }
   function of_int63_wrap(x){return x;}
   function of_int63_exn$4(x){
    return identity_if_positive
            (greater_equal$2, zero$10, mod_name$8, to_string$8, x);
   }
   function sexp_of_t$10(x){
    var _R_ = to_base_int64$2(x);
    return [0, caml_call2(Stdlib_Printf[4], _s_, _R_)];
   }
   function t_of_sexp$10(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_Int_repr_Uint63_t_of_sexp_$0, sexp);
    var s = sexp[1];
    try{
     var _P_ = caml_call3(Stdlib_Scanf[5], s, _t_, of_base_int64_exn$2);
     return _P_;
    }
    catch(_Q_){return of_sexp_error(cst_Int_repr_Uint63_t_of_sexp_, sexp);}
   }
   function symbol$155(x, y){return 0 <= compare$19(x, y) ? 1 : 0;}
   function symbol$156(x, y){return compare$19(x, y) <= 0 ? 1 : 0;}
   function symbol$157(x, y){return 0 === compare$19(x, y) ? 1 : 0;}
   function symbol$158(x, y){return 0 < compare$19(x, y) ? 1 : 0;}
   function symbol$159(x, y){return compare$19(x, y) < 0 ? 1 : 0;}
   function symbol$160(x, y){return 0 !== compare$19(x, y) ? 1 : 0;}
   var
    symbol$161 = Base_Int63[45],
    symbol$162 = Base_Int63[46],
    symbol$163 = Base_Int63[47];
   function symbol$164(x, y){
    var _O_ = to_base_int64$2(y);
    return of_base_int64_trunc$2(caml_int64_div(to_base_int64$2(x), _O_));
   }
   var
    Wrap$8 = [0, symbol$161, symbol$162, symbol$163, symbol$164],
    O$10 =
      [0,
       symbol$155,
       symbol$156,
       symbol$157,
       symbol$158,
       symbol$159,
       symbol$160,
       Wrap$8],
    include$11 =
      caml_call1(Base_Comparable[11], [0, compare$19, sexp_of_t$10]),
    symbol$165 = include$11[1],
    symbol$166 = include$11[2],
    symbol$167 = include$11[3],
    symbol$168 = include$11[4],
    symbol$169 = include$11[5],
    symbol$170 = include$11[6],
    equal$10 = include$11[7],
    compare$20 = include$11[8],
    min$10 = include$11[9],
    max$10 = include$11[10],
    compare$21 = Base_Int64[14],
    globalize$3 = Base_Int64[1],
    hash_fold_t$11 = Base_Int64[7],
    func$9 = Base_Int64[8];
   function hash$11(x){return caml_call1(func$9, x);}
   var
    t_of_sexp$11 = Base_Int64[9],
    sexp_of_t$11 = Base_Int64[10],
    include$12 =
      caml_call1(Base_Comparable[11], [0, compare$21, sexp_of_t$11]),
    symbol$171 = include$12[1],
    symbol$172 = include$12[2],
    symbol$173 = include$12[3],
    symbol$174 = include$12[4],
    symbol$175 = include$12[5],
    symbol$176 = include$12[6],
    equal$11 = include$12[7],
    compare$22 = include$12[8],
    min$11 = include$12[9],
    max$11 = include$12[10],
    quickcheck_generator$11 = Base_quickcheck[8],
    quickcheck_observer$11 = Base_quickcheck[18],
    quickcheck_shrinker$11 = Base_quickcheck[28],
    typerep_of_t$11 = Typerep_lib_Std[4],
    typename_of_t$11 = Typerep_lib_Std[27],
    zero$11 = Base_Int64[79],
    min_value$11 = Base_Int64[66],
    max_value$11 = Base_Int64[65],
    greater_equal$3 = caml_greaterequal,
    to_string$9 = Base_Int64[12],
    of_int8$4 = caml_int64_of_int32,
    of_int16$3 = caml_int64_of_int32,
    signed$11 = 1,
    num_bits$11 = 64,
    num_bytes$11 = 8;
   function of_int32$0(x){return caml_int64_of_int32(to_base_int32$1(x));}
   function of_int63(x){return caml_call1(Base_Int63[83], x);}
   function of_uint64_wrap(x){return x;}
   function of_uint64_exn$5(x){
    return identity_if_positive
            (greater_equal$3, zero$11, mod_name$9, to_string$9, x);
   }
   var
    symbol$177 = caml_greaterequal,
    symbol$178 = caml_lessequal,
    symbol$179 = runtime.caml_equal,
    symbol$180 = runtime.caml_greaterthan,
    symbol$181 = runtime.caml_lessthan,
    symbol$182 = runtime.caml_notequal,
    symbol$183 = caml_int64_add,
    symbol$184 = caml_int64_sub,
    symbol$185 = caml_int64_mul,
    symbol$186 = caml_int64_div,
    Wrap$9 = [0, symbol$183, symbol$184, symbol$185, symbol$186],
    O$11 =
      [0,
       symbol$177,
       symbol$178,
       symbol$179,
       symbol$180,
       symbol$181,
       symbol$182,
       Wrap$9],
    globalize$4 = Base_Int64[1],
    hash_fold_t$12 = Base_Int64[7],
    func$10 = Base_Int64[8];
   function hash$12(x){return caml_call1(func$10, x);}
   var
    quickcheck_generator$12 = Base_quickcheck[8],
    quickcheck_observer$12 = Base_quickcheck[18],
    quickcheck_shrinker$12 = Base_quickcheck[28],
    compare$23 = Stdlib_Int64[16],
    typerep_of_t$12 = Typerep_lib_Std[4],
    typename_of_t$12 = Typerep_lib_Std[27],
    zero$12 = Base_Int64[79],
    min_value$12 = Base_Int64[79],
    greater_equal$4 = caml_greaterequal,
    to_string$10 = Base_Int64[12],
    signed$12 = 0,
    num_bits$12 = 64,
    num_bytes$12 = 8;
   function exn$5(x){
    return identity_if_positive
            (greater_equal$4, zero$12, mod_name$10, to_string$10, x);
   }
   function of_base_int64_trunc$3(x){return x;}
   function of_base_int64_exn$3(x){return exn$5(x);}
   function to_base_int64_trunc(x){return x;}
   function to_base_int64_exn(x){return exn$5(x);}
   var of_uint8$4 = caml_int64_of_int32, of_uint16$3 = caml_int64_of_int32;
   function of_uint32$0(x){return to_base_int64$1(x);}
   function of_uint63(x){
    return caml_int64_and(caml_call1(Base_Int63[83], x), _u_);
   }
   function of_int64_wrap(x){return x;}
   function of_int64_exn$5(x){return exn$5(x);}
   function sexp_of_t$12(x){return [0, caml_call2(Stdlib_Printf[4], _v_, x)];}
   function t_of_sexp$12(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_Int_repr_Uint64_t_of_sexp_$0, sexp);
    var s = sexp[1];
    try{
     var
      _K_ = function(_N_){return _N_;},
      _L_ = caml_call3(Stdlib_Scanf[5], s, _w_, _K_);
     return _L_;
    }
    catch(_M_){return of_sexp_error(cst_Int_repr_Uint64_t_of_sexp_, sexp);}
   }
   function symbol$187(x, y){
    return 0 <= caml_call2(compare$23, x, y) ? 1 : 0;
   }
   function symbol$188(x, y){
    return caml_call2(compare$23, x, y) <= 0 ? 1 : 0;
   }
   function symbol$189(x, y){
    return 0 === caml_call2(compare$23, x, y) ? 1 : 0;
   }
   function symbol$190(x, y){return 0 < caml_call2(compare$23, x, y) ? 1 : 0;}
   function symbol$191(x, y){return caml_call2(compare$23, x, y) < 0 ? 1 : 0;}
   function symbol$192(x, y){
    return 0 !== caml_call2(compare$23, x, y) ? 1 : 0;
   }
   var
    symbol$193 = caml_int64_add,
    symbol$194 = caml_int64_sub,
    symbol$195 = caml_int64_mul,
    symbol$196 = Stdlib_Int64[4],
    Wrap$10 = [0, symbol$193, symbol$194, symbol$195, symbol$196],
    O$12 =
      [0,
       symbol$187,
       symbol$188,
       symbol$189,
       symbol$190,
       symbol$191,
       symbol$192,
       Wrap$10],
    include$13 =
      caml_call1(Base_Comparable[11], [0, compare$23, sexp_of_t$12]),
    symbol$197 = include$13[1],
    symbol$198 = include$13[2],
    symbol$199 = include$13[3],
    symbol$200 = include$13[4],
    symbol$201 = include$13[5],
    symbol$202 = include$13[6],
    equal$12 = include$13[7],
    compare$24 = include$13[8],
    min$12 = include$13[9],
    max$12 = include$13[10];
   function Make_get(F){
    function get_int8(t, pos){
     return of_base_int_trunc(caml_call2(F[1], t, pos));
    }
    function get_uint8(t, pos){
     return of_base_int_trunc$0(caml_call2(F[1], t, pos));
    }
    function get_int16_le(t, pos){
     var
      x = caml_call2(F[2], t, pos),
      _J_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
     return of_base_int_trunc$1(_J_);
    }
    function get_int16_be(t, pos){
     var
      x = caml_call2(F[2], t, pos),
      x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
     return of_base_int_trunc$1(x$0);
    }
    function get_uint16_le(t, pos){
     var
      x = caml_call2(F[2], t, pos),
      _I_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
     return of_base_int_trunc$2(_I_);
    }
    function get_uint16_be(t, pos){
     var
      x = caml_call2(F[2], t, pos),
      x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
     return of_base_int_trunc$2(x$0);
    }
    function get_int32_le(t, pos){
     var
      x = caml_call2(F[3], t, pos),
      _H_ = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
     return of_base_int32$1(_H_);
    }
    function get_int32_be(t, pos){
     var
      x = caml_call2(F[3], t, pos),
      x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
     return of_base_int32$1(x$0);
    }
    function get_uint32_le(t, pos){
     var
      x = caml_call2(F[3], t, pos),
      _G_ = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
     return of_base_int32_trunc$1(_G_);
    }
    function get_uint32_be(t, pos){
     var
      x = caml_call2(F[3], t, pos),
      x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
     return of_base_int32_trunc$1(x$0);
    }
    function get_int64_le(t, pos){
     var x = caml_call2(F[4], t, pos);
     return Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    }
    function get_int64_be(t, pos){
     var x = caml_call2(F[4], t, pos);
     return Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    }
    function get_uint64_le(t, pos){
     var
      x = caml_call2(F[4], t, pos),
      _F_ = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
     return _F_;
    }
    function get_uint64_be(t, pos){
     var
      x = caml_call2(F[4], t, pos),
      x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
     return x$0;
    }
    function get_int64_le$0(t, pos){
     var x = caml_call2(F[5][1], t, pos);
     return Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    }
    function get_int64_be$0(t, pos){
     var x = caml_call2(F[5][1], t, pos);
     return Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    }
    function get_uint64_le$0(t, pos){
     var x = caml_call2(F[5][1], t, pos);
     return Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    }
    function get_uint64_be$0(t, pos){
     var x = caml_call2(F[5][1], t, pos);
     return Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    }
    var
     Local =
       [0, get_int64_le$0, get_int64_be$0, get_uint64_le$0, get_uint64_be$0];
    return [0,
            get_int8,
            get_uint8,
            get_int16_le,
            get_int16_be,
            get_uint16_le,
            get_uint16_be,
            get_int32_le,
            get_int32_be,
            get_uint32_le,
            get_uint32_be,
            get_int64_le,
            get_int64_be,
            get_uint64_le,
            get_uint64_be,
            Local];
   }
   function Make_set(F){
    function set_uint8(t, pos, x){return caml_call3(F[1], t, pos, x);}
    function set_int8(t, pos, x){return set_uint8(t, pos, of_int8_wrap(x));}
    function set_uint16_le(t, pos, x){
     var x$0 = Stdlib_Sys[11] ? caml_bswap16(x) : x;
     return caml_call3(F[2], t, pos, x$0);
    }
    function set_uint16_be(t, pos, x){
     var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
     return caml_call3(F[2], t, pos, x$0);
    }
    function set_int16_le(t, pos, x){
     return set_uint16_le(t, pos, of_int16_wrap(x));
    }
    function set_int16_be(t, pos, x){
     return set_uint16_be(t, pos, of_int16_wrap(x));
    }
    function set_int32_le(t, pos, x){
     var
      x$0 = to_base_int32$1(x),
      x$1 = Stdlib_Sys[11] ? caml_int32_bswap(x$0) : x$0;
     return caml_call3(F[3], t, pos, x$1);
    }
    function set_int32_be(t, pos, x){
     var
      x$0 = to_base_int32$1(x),
      x$1 = Stdlib_Sys[11] ? x$0 : caml_int32_bswap(x$0);
     return caml_call3(F[3], t, pos, x$1);
    }
    function set_uint32_le(t, pos, x){
     return set_int32_le(t, pos, of_uint32_wrap$1(x));
    }
    function set_uint32_be(t, pos, x){
     return set_int32_be(t, pos, of_uint32_wrap$1(x));
    }
    function set_int64_le(t, pos, x){
     var x$0 = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
     return caml_call3(F[4], t, pos, x$0);
    }
    function set_int64_be(t, pos, x){
     var x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
     return caml_call3(F[4], t, pos, x$0);
    }
    function set_uint64_le(t, pos, x){return set_int64_le(t, pos, x);}
    function set_uint64_be(t, pos, x){return set_int64_be(t, pos, x);}
    return [0,
            set_int8,
            set_uint8,
            set_int16_le,
            set_int16_be,
            set_uint16_le,
            set_uint16_be,
            set_int32_le,
            set_int32_be,
            set_uint32_le,
            set_uint32_be,
            set_int64_le,
            set_int64_be,
            set_uint64_le,
            set_uint64_be];
   }
   var
    get_uint8 = Stdlib_Bytes[59],
    get_uint16_ne = Stdlib_Bytes[61],
    get_int32_ne = Stdlib_Bytes[67],
    get_int64_ne = Stdlib_Bytes[70],
    set_uint8 = Stdlib_Bytes[73],
    set_uint16_ne = Stdlib_Bytes[75],
    set_int32_ne = Stdlib_Bytes[81],
    _x_ =
      Make_get
       ([0,
         get_uint8,
         get_uint16_ne,
         get_int32_ne,
         get_int64_ne,
         [0, caml_bytes_get64]]),
    get_int8 = _x_[1],
    get_uint8$0 = _x_[2],
    get_int16_le = _x_[3],
    get_int16_be = _x_[4],
    get_uint16_le = _x_[5],
    get_uint16_be = _x_[6],
    get_int32_le = _x_[7],
    get_int32_be = _x_[8],
    get_uint32_le = _x_[9],
    get_uint32_be = _x_[10],
    get_int64_le = _x_[11],
    get_int64_be = _x_[12],
    get_uint64_le = _x_[13],
    get_uint64_be = _x_[14],
    Local = _x_[15],
    include$14 =
      Make_set([0, set_uint8, set_uint16_ne, set_int32_ne, caml_bytes_set64]),
    set_int8 = include$14[1],
    set_uint8$0 = include$14[2],
    set_int16_le = include$14[3],
    set_int16_be = include$14[4],
    set_uint16_le = include$14[5],
    set_uint16_be = include$14[6],
    set_int32_le = include$14[7],
    set_int32_be = include$14[8],
    set_uint32_le = include$14[9],
    set_uint32_be = include$14[10],
    set_int64_le = include$14[11],
    set_int64_be = include$14[12],
    set_uint64_le = include$14[13],
    set_uint64_be = include$14[14],
    _y_ =
      Make_get
       ([0,
         runtime.caml_bytes_unsafe_get,
         runtime.caml_bytes_get16,
         runtime.caml_bytes_get32,
         caml_bytes_get64,
         [0, caml_bytes_get64]]),
    get_int8$0 = _y_[1],
    get_uint8$1 = _y_[2],
    get_int16_le$0 = _y_[3],
    get_int16_be$0 = _y_[4],
    get_uint16_le$0 = _y_[5],
    get_uint16_be$0 = _y_[6],
    get_int32_le$0 = _y_[7],
    get_int32_be$0 = _y_[8],
    get_uint32_le$0 = _y_[9],
    get_uint32_be$0 = _y_[10],
    get_int64_le$0 = _y_[11],
    get_int64_be$0 = _y_[12],
    get_uint64_le$0 = _y_[13],
    get_uint64_be$0 = _y_[14],
    Local$0 = _y_[15],
    _z_ = caml_bytes_set64,
    _A_ = runtime.caml_bytes_set32,
    _B_ = runtime.caml_bytes_set16,
    include$15 =
      Make_set
       ([0,
         function(_E_, _D_, _C_){
          runtime.caml_bytes_unsafe_set(_E_, _D_, _C_);
          return 0;
         },
         _B_,
         _A_,
         _z_]),
    set_int8$0 = include$15[1],
    set_uint8$1 = include$15[2],
    set_int16_le$0 = include$15[3],
    set_int16_be$0 = include$15[4],
    set_uint16_le$0 = include$15[5],
    set_uint16_be$0 = include$15[6],
    set_int32_le$0 = include$15[7],
    set_int32_be$0 = include$15[8],
    set_uint32_le$0 = include$15[9],
    set_uint32_be$0 = include$15[10],
    set_int64_le$0 = include$15[11],
    set_int64_be$0 = include$15[12],
    set_uint64_le$0 = include$15[13],
    set_uint64_be$0 = include$15[14],
    Unsafe =
      [0,
       get_int8$0,
       get_uint8$1,
       get_int16_le$0,
       get_int16_be$0,
       get_uint16_le$0,
       get_uint16_be$0,
       get_int32_le$0,
       get_int32_be$0,
       get_uint32_le$0,
       get_uint32_be$0,
       get_int64_le$0,
       get_int64_be$0,
       get_uint64_le$0,
       get_uint64_be$0,
       Local$0,
       set_int8$0,
       set_uint8$1,
       set_int16_le$0,
       set_int16_be$0,
       set_uint16_le$0,
       set_uint16_be$0,
       set_int32_le$0,
       set_int32_be$0,
       set_uint32_le$0,
       set_uint32_be$0,
       set_int64_le$0,
       set_int64_be$0,
       set_uint64_le$0,
       set_uint64_be$0],
    include$16 =
      Make_get
       ([0,
         runtime.caml_string_get,
         caml_string_get16,
         caml_string_get32,
         caml_string_get64,
         [0, caml_string_get64]]),
    get_int8$1 = include$16[1],
    get_uint8$2 = include$16[2],
    get_int16_le$1 = include$16[3],
    get_int16_be$1 = include$16[4],
    get_uint16_le$1 = include$16[5],
    get_uint16_be$1 = include$16[6],
    get_int32_le$1 = include$16[7],
    get_int32_be$1 = include$16[8],
    get_uint32_le$1 = include$16[9],
    get_uint32_be$1 = include$16[10],
    get_int64_le$1 = include$16[11],
    get_int64_be$1 = include$16[12],
    get_uint64_le$1 = include$16[13],
    get_uint64_be$1 = include$16[14],
    Local$1 = include$16[15],
    include$17 =
      Make_get
       ([0,
         runtime.caml_string_unsafe_get,
         caml_string_get16,
         caml_string_get32,
         caml_string_get64,
         [0, caml_string_get64]]),
    get_int8$2 = include$17[1],
    get_uint8$3 = include$17[2],
    get_int16_le$2 = include$17[3],
    get_int16_be$2 = include$17[4],
    get_uint16_le$2 = include$17[5],
    get_uint16_be$2 = include$17[6],
    get_int32_le$2 = include$17[7],
    get_int32_be$2 = include$17[8],
    get_uint32_le$2 = include$17[9],
    get_uint32_be$2 = include$17[10],
    get_int64_le$2 = include$17[11],
    get_int64_be$2 = include$17[12],
    get_uint64_le$2 = include$17[13],
    get_uint64_be$2 = include$17[14],
    Local$2 = include$17[15],
    Unsafe$0 =
      [0,
       get_int8$2,
       get_uint8$3,
       get_int16_le$2,
       get_int16_be$2,
       get_uint16_le$2,
       get_uint16_be$2,
       get_int32_le$2,
       get_int32_be$2,
       get_uint32_le$2,
       get_uint32_be$2,
       get_int64_le$2,
       get_int64_be$2,
       get_uint64_le$2,
       get_uint64_be$2,
       Local$2],
    String =
      [0,
       get_int8$1,
       get_uint8$2,
       get_int16_le$1,
       get_int16_be$1,
       get_uint16_le$1,
       get_uint16_be$1,
       get_int32_le$1,
       get_int32_be$1,
       get_uint32_le$1,
       get_uint32_be$1,
       get_int64_le$1,
       get_int64_be$1,
       get_uint64_le$1,
       get_uint64_be$1,
       Local$1,
       Unsafe$0];
   caml_call1(Ppx_inline_test_lib[7], cst_int_repr);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Int_repr);
   var
    Int_repr =
      [0,
       [0,
        globalize,
        quickcheck_generator,
        quickcheck_observer,
        quickcheck_shrinker,
        t_of_sexp,
        sexp_of_t,
        typerep_of_t,
        typename_of_t,
        signed,
        num_bits,
        num_bytes,
        zero,
        min_value,
        max_value,
        hash_fold_t,
        hash,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare$0,
        min,
        max,
        O,
        of_base_int_trunc,
        of_base_int_exn,
        to_base_int,
        of_int16_trunc,
        of_int16_exn,
        of_int32_trunc,
        of_int32_exn,
        of_int63_trunc,
        of_int63_exn,
        of_int64_trunc,
        of_int64_exn,
        of_uint8_wrap,
        of_uint8_exn],
       [0,
        globalize$0,
        quickcheck_generator$0,
        quickcheck_observer$0,
        quickcheck_shrinker$0,
        t_of_sexp$0,
        sexp_of_t$0,
        typerep_of_t$0,
        typename_of_t$0,
        signed$0,
        num_bits$0,
        num_bytes$0,
        zero$0,
        min_value$0,
        max_value$0,
        hash_fold_t$0,
        hash$0,
        symbol$15,
        symbol$16,
        symbol$17,
        symbol$18,
        symbol$19,
        symbol$20,
        equal$0,
        compare$2,
        min$0,
        max$0,
        O$0,
        of_base_int_trunc$0,
        of_base_int_exn$0,
        to_base_int$0,
        of_uint16_trunc,
        of_uint16_exn,
        of_uint32_trunc,
        of_uint32_exn,
        of_uint63_trunc,
        of_uint63_exn,
        of_uint64_trunc,
        of_uint64_exn,
        of_int8_wrap,
        of_int8_exn],
       [0,
        globalize$1,
        quickcheck_generator$1,
        quickcheck_observer$1,
        quickcheck_shrinker$1,
        t_of_sexp$1,
        sexp_of_t$1,
        typerep_of_t$1,
        typename_of_t$1,
        signed$1,
        num_bits$1,
        num_bytes$1,
        zero$1,
        min_value$1,
        max_value$1,
        hash_fold_t$1,
        hash$1,
        symbol$31,
        symbol$32,
        symbol$33,
        symbol$34,
        symbol$35,
        symbol$36,
        equal$1,
        compare$4,
        min$1,
        max$1,
        O$1,
        of_base_int_trunc$1,
        of_base_int_exn$1,
        to_base_int$1,
        of_int8,
        of_int32_trunc$0,
        of_int32_exn$0,
        of_int63_trunc$0,
        of_int63_exn$0,
        of_int64_trunc$0,
        of_int64_exn$0,
        of_uint16_wrap,
        of_uint16_exn$0],
       [0,
        globalize$2,
        quickcheck_generator$2,
        quickcheck_observer$2,
        quickcheck_shrinker$2,
        t_of_sexp$2,
        sexp_of_t$2,
        typerep_of_t$2,
        typename_of_t$2,
        signed$2,
        num_bits$2,
        num_bytes$2,
        zero$2,
        min_value$2,
        max_value$2,
        hash_fold_t$2,
        hash$2,
        symbol$47,
        symbol$48,
        symbol$49,
        symbol$50,
        symbol$51,
        symbol$52,
        equal$2,
        compare$6,
        min$2,
        max$2,
        O$2,
        of_base_int_trunc$2,
        of_base_int_exn$2,
        to_base_int$2,
        of_uint8,
        of_uint32_trunc$0,
        of_uint32_exn$0,
        of_uint63_trunc$0,
        of_uint63_exn$0,
        of_uint64_trunc$0,
        of_uint64_exn$0,
        of_int16_wrap,
        of_int16_exn$0],
       [0,
        quickcheck_generator$7,
        quickcheck_observer$7,
        quickcheck_shrinker$7,
        t_of_sexp$7,
        sexp_of_t$7,
        typerep_of_t$7,
        typename_of_t$7,
        signed$7,
        num_bits$7,
        num_bytes$7,
        zero$7,
        min_value$7,
        max_value$7,
        hash_fold_t$7,
        hash$7,
        symbol$127,
        symbol$128,
        symbol$129,
        symbol$130,
        symbol$131,
        symbol$132,
        equal$7,
        compare$15,
        min$7,
        max$7,
        O$7,
        of_base_int32$1,
        to_base_int32$1,
        of_int8$2,
        of_int16$1,
        of_int63_trunc$3,
        of_int63_exn$3,
        of_int64_trunc$3,
        of_int64_exn$3,
        of_uint32_wrap$1,
        of_uint32_exn$3],
       [0,
        quickcheck_generator$8,
        quickcheck_observer$8,
        quickcheck_shrinker$8,
        t_of_sexp$8,
        sexp_of_t$8,
        typerep_of_t$8,
        typename_of_t$8,
        signed$8,
        num_bits$8,
        num_bytes$8,
        zero$8,
        min_value$8,
        max_value$8,
        hash_fold_t$8,
        hash$8,
        symbol$133,
        symbol$134,
        symbol$135,
        symbol$136,
        symbol$137,
        symbol$138,
        equal$8,
        compare$16,
        min$8,
        max$8,
        O$8,
        of_base_int32_trunc$1,
        of_base_int32_exn$1,
        to_base_int32_trunc$1,
        to_base_int32_exn$1,
        of_base_int64_trunc$1,
        of_base_int64_exn$1,
        to_base_int64$1,
        of_base_int_exn$5,
        to_base_int_exn$1,
        of_uint8$2,
        of_uint16$1,
        of_uint63_trunc$3,
        of_uint63_exn$3,
        of_uint64_trunc$3,
        of_uint64_exn$3,
        of_int32_wrap$1,
        of_int32_exn$3],
       [0,
        quickcheck_generator$9,
        quickcheck_observer$9,
        quickcheck_shrinker$9,
        t_of_sexp$9,
        sexp_of_t$9,
        typerep_of_t$9,
        typename_of_t$9,
        signed$9,
        num_bits$9,
        num_bytes$9,
        zero$9,
        min_value$9,
        max_value$9,
        hash_fold_t$9,
        hash$9,
        symbol$139,
        symbol$140,
        symbol$141,
        symbol$142,
        symbol$143,
        symbol$144,
        equal$9,
        compare$18,
        min$9,
        max$9,
        O$9,
        of_int8$3,
        of_int16$2,
        of_int32,
        of_int64_trunc$4,
        of_int64_exn$4,
        of_uint63_wrap,
        of_uint63_exn$4],
       [0,
        quickcheck_generator$10,
        quickcheck_observer$10,
        quickcheck_shrinker$10,
        t_of_sexp$10,
        sexp_of_t$10,
        typerep_of_t$10,
        typename_of_t$10,
        signed$10,
        num_bits$10,
        num_bytes$10,
        zero$10,
        min_value$10,
        max_value$10,
        hash_fold_t$10,
        hash$10,
        symbol$165,
        symbol$166,
        symbol$167,
        symbol$168,
        symbol$169,
        symbol$170,
        equal$10,
        compare$20,
        min$10,
        max$10,
        O$10,
        of_base_int64_trunc$2,
        of_base_int64_exn$2,
        to_base_int64$2,
        of_uint8$3,
        of_uint16$2,
        of_uint32,
        of_uint64_trunc$4,
        of_uint64_exn$4,
        of_int63_wrap,
        of_int63_exn$4],
       [0,
        globalize$3,
        quickcheck_generator$11,
        quickcheck_observer$11,
        quickcheck_shrinker$11,
        t_of_sexp$11,
        sexp_of_t$11,
        typerep_of_t$11,
        typename_of_t$11,
        signed$11,
        num_bits$11,
        num_bytes$11,
        zero$11,
        min_value$11,
        max_value$11,
        hash_fold_t$11,
        hash$11,
        symbol$171,
        symbol$172,
        symbol$173,
        symbol$174,
        symbol$175,
        symbol$176,
        equal$11,
        compare$22,
        min$11,
        max$11,
        O$11,
        of_int8$4,
        of_int16$3,
        of_int32$0,
        of_int63,
        of_uint64_wrap,
        of_uint64_exn$5],
       [0,
        globalize$4,
        quickcheck_generator$12,
        quickcheck_observer$12,
        quickcheck_shrinker$12,
        t_of_sexp$12,
        sexp_of_t$12,
        typerep_of_t$12,
        typename_of_t$12,
        signed$12,
        num_bits$12,
        num_bytes$12,
        zero$12,
        min_value$12,
        max_value$12,
        hash_fold_t$12,
        hash$12,
        symbol$197,
        symbol$198,
        symbol$199,
        symbol$200,
        symbol$201,
        symbol$202,
        equal$12,
        compare$24,
        min$12,
        max$12,
        O$12,
        of_base_int64_trunc$3,
        of_base_int64_exn$3,
        to_base_int64_trunc,
        to_base_int64_exn,
        of_uint8$4,
        of_uint16$3,
        of_uint32$0,
        of_uint63,
        of_int64_wrap,
        of_int64_exn$5],
       Make_get,
       Make_set,
       [0,
        get_int8,
        get_uint8$0,
        get_int16_le,
        get_int16_be,
        get_uint16_le,
        get_uint16_be,
        get_int32_le,
        get_int32_be,
        get_uint32_le,
        get_uint32_be,
        get_int64_le,
        get_int64_be,
        get_uint64_le,
        get_uint64_be,
        Local,
        set_int8,
        set_uint8$0,
        set_int16_le,
        set_int16_be,
        set_uint16_le,
        set_uint16_be,
        set_int32_le,
        set_int32_be,
        set_uint32_le,
        set_uint32_be,
        set_int64_le,
        set_int64_be,
        set_uint64_le,
        set_uint64_be,
        Unsafe],
       String];
   runtime.caml_register_global(69, Int_repr, cst_Int_repr$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
