// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Macaddr
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_hex_pairs_required$2 = "hex pairs required",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) == 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [4, 6, [0, 2, 2], 0, 0],
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Parse_error = [248, "Macaddr.Parse_error", runtime.caml_fresh_oo_id(0)],
    _d_ = [0, [2, 0, 0], "%s"],
    _c_ =
      [0,
       [4,
        6,
        [0, 2, 2],
        0,
        [0,
         [4,
          6,
          [0, 2, 2],
          0,
          [0,
           [4,
            6,
            [0, 2, 2],
            0,
            [0, [4, 6, [0, 2, 2], 0, [0, [4, 6, [0, 2, 2], 0, [0, partial]]]]]]]]]],
       "%02x%c%02x%c%02x%c%02x%c%02x%c%02x"],
    _b_ = [0, 58, [0, 45, 0]],
    cst_hex_pairs_required = cst_hex_pairs_required$2,
    cst_hex_pairs_required$1 = cst_hex_pairs_required$2,
    cst_hex_pairs_required$0 = cst_hex_pairs_required$2,
    cst_address_segment_too_large = "address segment too large",
    _a_ =
      [0,
       [11, "invalid character '", [0, [11, "' at ", [4, 0, 0, 0, 0]]]],
       "invalid character '%c' at %d"],
    cst_MAC_is_exactly_6_bytes = "MAC is exactly 6 bytes",
    cst_Macaddr = "Macaddr: ",
    cst_not_enough_data = "not enough data";
   function need_more(x){return [0, Parse_error, cst_not_enough_data, x];}
   function try_with_result(fn, a){
    try{var _z_ = [0, caml_call1(fn, a)]; return _z_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [1, [0, 3854881, caml_call2(Stdlib[28], cst_Macaddr, msg)]];
    }
   }
   var compare = Stdlib_Bytes[40];
   function of_octets_exn(x){
    if(6 === caml_ml_string_length(x)) return caml_call1(Stdlib_Bytes[5], x);
    throw caml_maybe_attach_backtrace
           ([0, Parse_error, cst_MAC_is_exactly_6_bytes, x], 1);
   }
   function of_octets(x){return try_with_result(of_octets_exn, x);}
   function int_of_hex_char(c){
    var c$0 = caml_call1(Stdlib_Char[4], c) - 48 | 0;
    return 9 < c$0 ? 16 < c$0 ? c$0 - 7 | 0 : -1 : c$0;
   }
   function is_hex(i){
    var _x_ = 0 <= i ? 1 : 0, _y_ = _x_ ? i < 16 ? 1 : 0 : _x_;
    return _y_;
   }
   function bad_char(i, s){
    var
     _w_ = caml_string_get(s, i),
     msg = caml_call3(Stdlib_Printf[4], _a_, _w_, i);
    return [0, Parse_error, msg, s];
   }
   function parse_hex_int(term, s, i){
    var len = caml_ml_string_length(s), i$0 = i[1];
    if(i$0 >= len) throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(! is_hex(int_of_hex_char(caml_string_get(s, i$0))))
     throw caml_maybe_attach_backtrace(bad_char(i$0, s), 1);
    var prev = 0;
    for(;;){
     var j = i[1];
     if(len <= j) return prev;
     var c = caml_string_get(s, j), k = int_of_hex_char(c);
     if(! is_hex(k)){
      if(caml_call2(Stdlib_List[37], c, term)) return prev;
      throw caml_maybe_attach_backtrace(bad_char(j, s), 1);
     }
     i[1]++;
     var prev$0 = (prev << 4) + k | 0, prev = prev$0;
    }
   }
   function of_string_exn(x){
    var i = [0, 0], m = caml_create_bytes(6);
    try{
     var p = i[1], _r_ = parse_hex_int(_b_, x, i);
     caml_bytes_set(m, 0, caml_call1(Stdlib_Char[1], _r_));
     if(caml_ml_string_length(x) <= i[1])
      throw caml_maybe_attach_backtrace(need_more(x), 1);
     var sep = [0, caml_string_get(x, i[1]), 0];
     if(2 !== (i[1] - p | 0))
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, cst_hex_pairs_required, x], 1);
     i[1]++;
     var k = 1;
     for(;;){
      var p$1 = i[1], _t_ = parse_hex_int(sep, x, i);
      caml_bytes_set(m, k, caml_call1(Stdlib_Char[1], _t_));
      if(2 !== (i[1] - p$1 | 0))
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, cst_hex_pairs_required$1, x], 1);
      i[1]++;
      var _u_ = k + 1 | 0;
      if(4 === k){
       var p$0 = i[1], _s_ = parse_hex_int(0, x, i);
       caml_bytes_set(m, 5, caml_call1(Stdlib_Char[1], _s_));
       if(2 !== (i[1] - p$0 | 0))
        throw caml_maybe_attach_backtrace
               ([0, Parse_error, cst_hex_pairs_required$0, x], 1);
       return m;
      }
      var k = _u_;
     }
    }
    catch(_v_){
     var _q_ = caml_wrap_exception(_v_);
     if(_q_[1] === Stdlib[6])
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, cst_address_segment_too_large, x], 1);
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function of_string(x){return try_with_result(of_string_exn, x);}
   function to_string(opt, x){
    if(opt) var sth = opt[1], sep = sth; else var sep = 58;
    var
     _k_ = caml_bytes_get(x, 5),
     _l_ = caml_bytes_get(x, 4),
     _m_ = caml_bytes_get(x, 3),
     _n_ = caml_bytes_get(x, 2),
     _o_ = caml_bytes_get(x, 1),
     _p_ = caml_bytes_get(x, 0);
    return caml_call12
            (Stdlib_Printf[4],
             _c_,
             _p_,
             sep,
             _o_,
             sep,
             _n_,
             sep,
             _m_,
             sep,
             _l_,
             sep,
             _k_);
   }
   function to_octets(x){return caml_call1(Stdlib_Bytes[6], x);}
   function pp(ppf, i){
    var _j_ = to_string(0, i);
    return caml_call3(Stdlib_Format[137], ppf, _d_, _j_);
   }
   var broadcast = caml_call2(Stdlib_Bytes[1], 6, 255);
   function make_local(bytegenf){
    var
     x = caml_create_bytes(6),
     _g_ = ((caml_call1(bytegenf, 0) | 2) >>> 1 | 0) << 1;
    caml_bytes_set(x, 0, caml_call1(Stdlib_Char[1], _g_));
    var i = 1;
    for(;;){
     var _h_ = caml_call1(bytegenf, i);
     caml_bytes_set(x, i, caml_call1(Stdlib_Char[1], _h_));
     var _i_ = i + 1 | 0;
     if(5 === i) return x;
     var i = _i_;
    }
   }
   function get_oui(x){
    var _e_ = caml_bytes_get(x, 2), _f_ = caml_bytes_get(x, 1) << 8;
    return caml_bytes_get(x, 0) << 16 | _f_ | _e_;
   }
   function is_local(x){
    return 1 === ((caml_bytes_get(x, 0) >>> 1 | 0) & 1) ? 1 : 0;
   }
   function is_unicast(x){return 0 === (caml_bytes_get(x, 0) & 1) ? 1 : 0;}
   var
    Macaddr =
      [0,
       Parse_error,
       of_octets_exn,
       of_octets,
       of_string_exn,
       of_string,
       to_octets,
       to_string,
       pp,
       broadcast,
       make_local,
       get_oui,
       is_local,
       is_unicast,
       compare];
   runtime.caml_register_global(18, Macaddr, "Macaddr");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
