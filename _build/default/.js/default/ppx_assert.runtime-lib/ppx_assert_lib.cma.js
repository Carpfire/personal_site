// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_assert_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_assert_lib = [0];
   runtime.caml_register_global(0, Ppx_assert_lib, "Ppx_assert_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_assert_lib__Runtime
//# unitInfo: Requires: Base, Base__Source_code_position, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    Base = global_data.Base,
    Base_Source_code_position = global_data.Base__Source_code_position,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    E = [248, "Ppx_assert_lib.Runtime.E", runtime.caml_fresh_oo_id(0)],
    _h_ = [0, "got"],
    _i_ = [0, "expected"],
    cst_got_unexpected_result = "got unexpected result",
    _g_ = [0, "vs"],
    cst_comparison_failed = "comparison failed",
    _f_ = [0, "Value"],
    cst_predicate_failed = "predicate failed",
    _d_ = [0, "Stack"],
    _e_ = [0, "Loc"],
    _b_ = [0, "runtime-lib/runtime.ml.E"],
    _c_ = [0, "_none_", 0, -1];
   function _a_(param){
    if(param[1] !== E)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(Base[202], arg0_001),
     res1_004 = caml_call1(Base[85][5], arg1_002);
    return [1, [0, _b_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, E, _a_);
   function exn_sexp_style(message, pos, x_005, tag, body){
    if(message)
     var
      s = message[1],
      _k_ = caml_call2(Base[241], cst, tag),
      message$0 = caml_call2(Base[241], s, _k_);
    else
     var message$0 = tag;
    var
     _l_ =
       x_005
        ? [0,
          [1,
           [0,
            _d_,
            [0, caml_call2(Base[165], Base_Source_code_position[3], x_005), 0]]],
          0]
        : 0,
     _m_ = caml_call2(Base[222], [0, [1, [0, _e_, [0, [0, pos], 0]]], 0], _l_),
     sexp = [1, caml_call2(Base[222], body, _m_)];
    return [0, E, message$0, sexp];
   }
   function test_pred(pos, sexpifier, here, message, predicate, t){
    var _j_ = 1 - caml_call1(predicate, t);
    if(_j_)
     throw caml_maybe_attach_backtrace
            (exn_sexp_style
              (message,
               pos,
               here,
               cst_predicate_failed,
               [0, [1, [0, _f_, [0, caml_call1(sexpifier, t), 0]]], 0]),
             1);
    return _j_;
   }
   var r_diff = [0, 0];
   function set_diff_function(f){r_diff[1] = f; return 0;}
   function test_result_or_eq(sexpifier, comparator, equal, expect$0, got$0){
    if(equal)
     var f = equal[1], pass = caml_call2(f, got$0, expect$0);
    else
     var pass = 0 === caml_call2(comparator, got$0, expect$0) ? 1 : 0;
    if(pass) return 892014833;
    var
     got = caml_call1(sexpifier, got$0),
     expect = caml_call1(sexpifier, expect$0),
     match = r_diff[1];
    if(match){
     var
      diff = match[1],
      from = caml_call2(Base[85][14], 0, expect),
      to = caml_call2(Base[85][14], 0, got);
     caml_call2(diff, from, to);
    }
    return [0, 781116926, [0, expect, got]];
   }
   function test_eq(pos, sexpifier, comparator, here, message, equal, t1, t2){
    var match = test_result_or_eq(sexpifier, comparator, equal, t1, t2);
    if(typeof match === "number") return 0;
    var match$0 = match[2], t2$0 = match$0[2], t1$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_comparison_failed,
              [0, t1$0, [0, _g_, [0, t2$0, 0]]]),
            1);
   }
   function test_result
   (pos, sexpifier, comparator, here, message, equal, expect, got){
    var match = test_result_or_eq(sexpifier, comparator, equal, expect, got);
    if(typeof match === "number") return 0;
    var match$0 = match[2], got$0 = match$0[2], expect$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_got_unexpected_result,
              [0,
               [1, [0, _i_, [0, expect$0, 0]]],
               [0, [1, [0, _h_, [0, got$0, 0]]], 0]]),
            1);
   }
   var
    Ppx_assert_lib_Runtime =
      [0, test_pred, test_eq, test_result, set_diff_function];
   runtime.caml_register_global
    (17, Ppx_assert_lib_Runtime, "Ppx_assert_lib__Runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfYXNzZXJ0X2xpYi5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZXhuX3NleHBfc3R5bGUiLCJtZXNzYWdlIiwicG9zIiwieF8wMDUiLCJ0YWciLCJib2R5IiwicyIsIm1lc3NhZ2UkMCIsInNleHAiLCJ0ZXN0X3ByZWQiLCJzZXhwaWZpZXIiLCJoZXJlIiwicHJlZGljYXRlIiwidCIsInJfZGlmZiIsInNldF9kaWZmX2Z1bmN0aW9uIiwiZiIsInRlc3RfcmVzdWx0X29yX2VxIiwiY29tcGFyYXRvciIsImVxdWFsIiwiZXhwZWN0JDAiLCJnb3QkMCIsInBhc3MiLCJnb3QiLCJleHBlY3QiLCJkaWZmIiwiZnJvbSIsInRvIiwidGVzdF9lcSIsInQxIiwidDIiLCJ0MiQwIiwidDEkMCIsInRlc3RfcmVzdWx0Il0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvcHB4X2Fzc2VydC9ydW50aW1lLWxpYi9ydW50aW1lLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0dBcUJBOzs7Ozs7O0lBQUE7Ozs7Ozs7Ozs7Ozs7STs7Ozs7Ozs7OztZQUVJQSxlQUFnQkMsU0FBU0MsS0FBS0MsT0FBTUMsS0FBSUM7SUFDMUMsR0FEa0JKO0tBSUE7TUFBVEssSUFKU0w7TUFJQSxNQUFBLDJCQUpvQkc7TUFDbENHLFlBR1Usc0JBQUxEOztTQUhMQyxZQURrQ0g7SUFNdEM7S0FBQTtPQU5nQ0Q7Ozs7O29FQUFBQTs7O0tBU3pCLE1BQUEsK0NBVG9CRDtLQU12Qk0sV0FFQSxzQkFSc0NIO0lBb0IxQyxjQW5CSUUsV0FLQUM7R0FjYTtZQVlmQyxVQUFXUCxLQUFLUSxXQUFXQyxNQUFNVixTQUFRVyxXQUFVQztJQUM5QyxjQUFBLFdBRG9DRCxXQUFVQzs7S0FDckIsTUFBQTthQWpDOUJiO2VBZ0NpQ0M7ZUFBdEJDO2VBQWdCUzs7b0NBSE0sV0FHakJELFdBQW1DRzs7SUFDOUM7R0FBeUU7R0FHbkIsSUFBM0RDO1lBQ0FDLGtCQUFrQkMsR0FEbEJGLFlBQ2tCRSxZQUFlO1lBY2pDQyxrQkFBbUJQLFdBQVdRLFlBQVlDLE9BQU9DLFVBQVFDO0lBQzNELEdBRDRDRjtTQUluQ0gsSUFKbUNHLFVBQ3hDRyxPQUdVLFdBQUxOLEdBSmtESyxPQUFSRDs7U0FDL0NFLGFBRVEsV0FIb0JKLFlBQTJCRyxPQUFSRDtJQU1uRCxHQUxJRSxNQUtTO0lBakJIO0tBQU5DLE1BQU0sV0FXV2IsV0FBc0NXO0tBVnZERyxTQUFTLFdBVVFkLFdBQThCVTtLQVRuRCxRQU5FTjs7S0FTYTtNQURQVztNQUNEQyxPQUFRLDRCQUpYRjtNQUtHRyxLQUFNLDRCQU5USjtLQU9ELFdBSEtFLE1BQ0RDLE1BQ0FDOztJQUVQLDBCQVBJSCxRQURBRDtHQWlCb0U7WUFPdEVLLFFBQVMxQixLQUFLUSxXQUFXUSxZQUFZUCxNQUFNVixTQUFTa0IsT0FBTVUsSUFBR0M7SUFDekQsWUFkSmIsa0JBYWNQLFdBQVdRLFlBQTJCQyxPQUFNVSxJQUFHQztrQ0FFcEQ7NEJBTm1DQyxtQkFBSkM7SUFPaEIsTUFBQTtZQW5FeEJoQztjQWdFMkNDO2NBQWxDQztjQUE0QlM7O2tCQUpHcUIsbUJBQUlEOztHQU9xQjtZQVlqREU7SUFDakIvQixLQUNBUSxXQUNBUSxZQUNBUCxNQUNBVixTQUNBa0IsT0FDQUssUUFDQUQ7SUFFSyxZQXRDSk4sa0JBOEJEUCxXQUNBUSxZQUdBQyxPQUNBSyxRQUNBRDtrQ0FHVTs0QkFwQjJDRixvQkFBUkQ7SUFxQmYsTUFBQTtZQTNGN0JwQjtjQW9GREM7Y0FKQUM7Y0FHQVM7OztnQ0FiNkNTO29DQUFRQzs7R0FxQjJCOzs7VUEzRC9FWixXQWdDQW1CLFNBZWdCSyxhQTFDaEJsQjs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBCYXNlXG5cbnR5cGUgJ2EgdGVzdF9wcmVkID1cbiAgP2hlcmU6TGV4aW5nLnBvc2l0aW9uIGxpc3QgLT4gP21lc3NhZ2U6c3RyaW5nIC0+ICgnYSAtPiBib29sKSAtPiAnYSAtPiB1bml0XG5cbnR5cGUgJ2EgdGVzdF9lcSA9XG4gID9oZXJlOkxleGluZy5wb3NpdGlvbiBsaXN0XG4gIC0+ID9tZXNzYWdlOnN0cmluZ1xuICAtPiA/ZXF1YWw6KCdhIC0+ICdhIC0+IGJvb2wpXG4gIC0+ICdhXG4gIC0+ICdhXG4gIC0+IHVuaXRcblxudHlwZSAnYSB0ZXN0X3Jlc3VsdCA9XG4gID9oZXJlOkxleGluZy5wb3NpdGlvbiBsaXN0XG4gIC0+ID9tZXNzYWdlOnN0cmluZ1xuICAtPiA/ZXF1YWw6KCdhIC0+ICdhIC0+IGJvb2wpXG4gIC0+IGV4cGVjdDonYVxuICAtPiAnYVxuICAtPiB1bml0XG5cbmV4Y2VwdGlvbiBFIG9mIHN0cmluZyAqIFNleHAudCBbQEBkZXJpdmluZyBzZXhwXVxuXG5sZXQgZXhuX3NleHBfc3R5bGUgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+dGFnIGJvZHkgPVxuICBsZXQgbWVzc2FnZSA9XG4gICAgbWF0Y2ggbWVzc2FnZSB3aXRoXG4gICAgfCBOb25lIC0+IHRhZ1xuICAgIHwgU29tZSBzIC0+IHMgXiBcIjogXCIgXiB0YWdcbiAgaW5cbiAgbGV0IHNleHAgPVxuICAgIFNleHAuTGlzdFxuICAgICAgKGJvZHlcbiAgICAgICBAIFsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiTG9jXCI7IFNleHAuQXRvbSBwb3MgXSBdXG4gICAgICAgQFxuICAgICAgIG1hdGNoIGhlcmUgd2l0aFxuICAgICAgIHwgW10gLT4gW11cbiAgICAgICB8IF8gLT5cbiAgICAgICAgIFsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiU3RhY2tcIjsgWyVzZXhwX29mOiBTb3VyY2VfY29kZV9wb3NpdGlvbi50IGxpc3RdIGhlcmUgXSBdXG4gICAgICApXG4gIGluXG4gICgqIEhlcmUgYW5kIGluIG90aGVyIHBsYWNlcyB3ZSByZXR1cm4gZXhjZXB0aW9ucywgcmF0aGVyIHRoYW4gZGlyZWN0bHkgcmFpc2luZywgYW5kXG4gICAgIGluc3RlYWQgcmFpc2UgYXQgdGhlIGxhdGVzdCBtb21lbnQgcG9zc2libGUsIHNvIGJhY2t0cmFjZSBkb24ndCBpbmNsdWRlIG5vaXNlIGZyb21cbiAgICAgdGhlc2UgZnVuY3Rpb25zIHRoYXQgY29uc3RydWN0IGV4Y2VwdGlvbnMuICopXG4gIEUgKG1lc3NhZ2UsIHNleHApXG47O1xuXG5sZXRbQGNvbGRdIGV4bl90ZXN0X3ByZWQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+c2V4cGlmaWVyIHQgPVxuICBleG5fc2V4cF9zdHlsZVxuICAgIH5tZXNzYWdlXG4gICAgfnBvc1xuICAgIH5oZXJlXG4gICAgfnRhZzpcInByZWRpY2F0ZSBmYWlsZWRcIlxuICAgIFsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiVmFsdWVcIjsgc2V4cGlmaWVyIHQgXSBdXG47O1xuXG5sZXQgdGVzdF9wcmVkIH5wb3MgfnNleHBpZmllciB+aGVyZSA/bWVzc2FnZSBwcmVkaWNhdGUgdCA9XG4gIGlmIG5vdCAocHJlZGljYXRlIHQpIHRoZW4gcmFpc2UgKGV4bl90ZXN0X3ByZWQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+c2V4cGlmaWVyIHQpXG47O1xuXG5sZXQgcl9kaWZmIDogKGZyb21fOnN0cmluZyAtPiB0b186c3RyaW5nIC0+IHVuaXQpIG9wdGlvbiByZWYgPSByZWYgTm9uZVxubGV0IHNldF9kaWZmX2Z1bmN0aW9uIGYgPSByX2RpZmYgOj0gZlxuXG5sZXRbQGNvbGRdIHRlc3RfcmVzdWx0X29yX2VxX2ZhaWxlZCB+c2V4cGlmaWVyIH5leHBlY3QgfmdvdCA9XG4gIGxldCBnb3QgPSBzZXhwaWZpZXIgZ290IGluXG4gIGxldCBleHBlY3QgPSBzZXhwaWZpZXIgZXhwZWN0IGluXG4gIChtYXRjaCAhcl9kaWZmIHdpdGhcbiAgIHwgTm9uZSAtPiAoKVxuICAgfCBTb21lIGRpZmYgLT5cbiAgICAgbGV0IGZyb21fID0gU2V4cC50b19zdHJpbmdfaHVtIGV4cGVjdCBpblxuICAgICBsZXQgdG9fID0gU2V4cC50b19zdHJpbmdfaHVtIGdvdCBpblxuICAgICBkaWZmIH5mcm9tXyB+dG9fKTtcbiAgYEZhaWwgKGV4cGVjdCwgZ290KVxuOztcblxubGV0IHRlc3RfcmVzdWx0X29yX2VxIH5zZXhwaWZpZXIgfmNvbXBhcmF0b3IgfmVxdWFsIH5leHBlY3QgfmdvdCA9XG4gIGxldCBwYXNzID1cbiAgICBtYXRjaCBlcXVhbCB3aXRoXG4gICAgfCBOb25lIC0+IGNvbXBhcmF0b3IgZ290IGV4cGVjdCA9IDBcbiAgICB8IFNvbWUgZiAtPiBmIGdvdCBleHBlY3RcbiAgaW5cbiAgaWYgcGFzcyB0aGVuIGBQYXNzIGVsc2UgdGVzdF9yZXN1bHRfb3JfZXFfZmFpbGVkIH5zZXhwaWZpZXIgfmV4cGVjdCB+Z290XG47O1xuXG5sZXRbQGNvbGRdIGV4bl90ZXN0X2VxIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnQxIH50MiA9XG4gIGV4bl9zZXhwX3N0eWxlIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnRhZzpcImNvbXBhcmlzb24gZmFpbGVkXCIgWyB0MTsgU2V4cC5BdG9tIFwidnNcIjsgdDIgXVxuOztcblxubGV0IHRlc3RfZXEgfnBvcyB+c2V4cGlmaWVyIH5jb21wYXJhdG9yIH5oZXJlID9tZXNzYWdlID9lcXVhbCB0MSB0MiA9XG4gIG1hdGNoIHRlc3RfcmVzdWx0X29yX2VxIH5zZXhwaWZpZXIgfmNvbXBhcmF0b3IgfmVxdWFsIH5leHBlY3Q6dDEgfmdvdDp0MiB3aXRoXG4gIHwgYFBhc3MgLT4gKClcbiAgfCBgRmFpbCAodDEsIHQyKSAtPiByYWlzZSAoZXhuX3Rlc3RfZXEgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+dDEgfnQyKVxuOztcblxubGV0W0Bjb2xkXSBleG5fdGVzdF9yZXN1bHQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+ZXhwZWN0IH5nb3QgPVxuICBleG5fc2V4cF9zdHlsZVxuICAgIH5tZXNzYWdlXG4gICAgfnBvc1xuICAgIH5oZXJlXG4gICAgfnRhZzpcImdvdCB1bmV4cGVjdGVkIHJlc3VsdFwiXG4gICAgWyBTZXhwLkxpc3QgWyBTZXhwLkF0b20gXCJleHBlY3RlZFwiOyBleHBlY3QgXTsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiZ290XCI7IGdvdCBdIF1cbjs7XG5cbmxldFtAd2FybmluZyBcIi0xNlwiXSB0ZXN0X3Jlc3VsdFxuICB+cG9zXG4gIH5zZXhwaWZpZXJcbiAgfmNvbXBhcmF0b3JcbiAgfmhlcmVcbiAgP21lc3NhZ2VcbiAgP2VxdWFsXG4gIH5leHBlY3RcbiAgfmdvdFxuICA9XG4gIG1hdGNoIHRlc3RfcmVzdWx0X29yX2VxIH5zZXhwaWZpZXIgfmNvbXBhcmF0b3IgfmVxdWFsIH5leHBlY3QgfmdvdCB3aXRoXG4gIHwgYFBhc3MgLT4gKClcbiAgfCBgRmFpbCAoZXhwZWN0LCBnb3QpIC0+IHJhaXNlIChleG5fdGVzdF9yZXN1bHQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+ZXhwZWN0IH5nb3QpXG47O1xuIl19
