// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lwt_ssl
//# unitInfo: Requires: Lwt, Lwt_bytes, Lwt_io, Lwt_unix, Ssl, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Unix = global_data.Unix,
    Ssl = global_data.Ssl,
    Lwt_unix = global_data.Lwt_unix,
    Lwt_io = global_data.Lwt_io,
    Lwt = global_data.Lwt,
    Lwt_bytes = global_data.Lwt_bytes;
   function ssl_socket(param){
    var kind = param[2];
    if(! kind) return 0;
    var socket = kind[1];
    return [0, socket];
   }
   function ssl_socket_of_uninitialized_so(param){var socket = param[2]; return socket;
   }
   function is_ssl(s){return s[2] ? 1 : 0;}
   function wrap_call(f, param){
    try{var _O_ = caml_call1(f, 0); return _O_;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     if(e[1] === Ssl[12] || e[1] === Ssl[13] || e[1] === Ssl[14])
      var err = e[2];
     else{
      if(e[1] !== Ssl[15]) throw caml_maybe_attach_backtrace(e, 0);
      var err = e[2];
     }
     if(2 === err) throw caml_maybe_attach_backtrace(Lwt_unix[146], 1);
     if(3 === err) throw caml_maybe_attach_backtrace(Lwt_unix[147], 1);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function repeat_call(fd, f){
    function _G_(blocking){
     try{var _K_ = wrap_call(f, 0), _L_ = caml_call1(Lwt[4], _K_); return _L_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e === Lwt_unix[146]){
       var _I_ = function(_N_){return wrap_call(f, _N_);};
       return caml_call3(Lwt_unix[150], 0, fd, _I_);
      }
      if(e !== Lwt_unix[147]) return caml_call1(Lwt[5], e);
      var _J_ = function(_M_){return wrap_call(f, _M_);};
      return caml_call3(Lwt_unix[150], 1, fd, _J_);
     }
    }
    var _H_ = caml_call1(Lwt_unix[12], fd);
    return caml_call2(Lwt[33][1], _H_, _G_);
   }
   function plain(fd){return [0, fd, 0];}
   function embed_socket(fd, context){
    var _F_ = caml_call1(Lwt_unix[10], fd);
    return [0, fd, [0, caml_call2(Ssl[61], _F_, context)]];
   }
   function embed_uninitialized_socket(fd, context){
    var _E_ = caml_call1(Lwt_unix[10], fd);
    return [0, fd, caml_call2(Ssl[61], _E_, context)];
   }
   function ssl_accept(fd, ctx){
    var
     _B_ = caml_call1(Lwt_unix[10], fd),
     socket = caml_call2(Ssl[61], _B_, ctx);
    function _C_(param){return caml_call1(Lwt[4], [0, fd, [0, socket]]);}
    var
     _D_ =
       repeat_call(fd, function(param){return caml_call1(Ssl[71], socket);});
    return caml_call2(Lwt[6], _D_, _C_);
   }
   function ssl_connect(fd, ctx){
    var
     _y_ = caml_call1(Lwt_unix[10], fd),
     socket = caml_call2(Ssl[61], _y_, ctx);
    function _z_(param){return caml_call1(Lwt[4], [0, fd, [0, socket]]);}
    var
     _A_ =
       repeat_call(fd, function(param){return caml_call1(Ssl[70], socket);});
    return caml_call2(Lwt[6], _A_, _z_);
   }
   function ssl_accept_handshake(param){
    var socket = param[2], fd = param[1];
    function _w_(param){return caml_call1(Lwt[4], [0, fd, [0, socket]]);}
    var
     _x_ =
       repeat_call(fd, function(param){return caml_call1(Ssl[71], socket);});
    return caml_call2(Lwt[6], _x_, _w_);
   }
   function ssl_perform_handshake(param){
    var socket = param[2], fd = param[1];
    function _u_(param){return caml_call1(Lwt[4], [0, fd, [0, socket]]);}
    var
     _v_ =
       repeat_call(fd, function(param){return caml_call1(Ssl[70], socket);});
    return caml_call2(Lwt[6], _v_, _u_);
   }
   function read(param, buf, pos, len){
    var s = param[2], fd = param[1];
    if(! s) return caml_call4(Lwt_unix[26], fd, buf, pos, len);
    var s$0 = s[1];
    return 0 === len
            ? caml_call1(Lwt[4], 0)
            : repeat_call
              (fd,
               function(param){
                try{
                 var _s_ = caml_call4(Ssl[78], s$0, buf, pos, len);
                 return _s_;
                }
                catch(_t_){
                 var _r_ = caml_wrap_exception(_t_);
                 if(_r_[1] === Ssl[14] && 6 === _r_[2]) return 0;
                 throw caml_maybe_attach_backtrace(_r_, 0);
                }
               });
   }
   function read_bytes(param, buf, pos, len){
    var s = param[2], fd = param[1];
    if(! s) return caml_call4(Lwt_bytes[23], fd, buf, pos, len);
    var s$0 = s[1];
    return 0 === len
            ? caml_call1(Lwt[4], 0)
            : repeat_call
              (fd,
               function(param){
                try{
                 var _p_ = caml_call4(Ssl[79], s$0, buf, pos, len);
                 return _p_;
                }
                catch(_q_){
                 var _o_ = caml_wrap_exception(_q_);
                 if(_o_[1] === Ssl[14] && 6 === _o_[2]) return 0;
                 throw caml_maybe_attach_backtrace(_o_, 0);
                }
               });
   }
   function write(param, buf, pos, len){
    var s = param[2], fd = param[1];
    if(! s) return caml_call4(Lwt_unix[28], fd, buf, pos, len);
    var s$0 = s[1];
    return 0 === len
            ? caml_call1(Lwt[4], 0)
            : repeat_call
              (fd,
               function(param){
                return caml_call4(Ssl[80], s$0, buf, pos, len);
               });
   }
   function write_bytes(param, buf, pos, len){
    var s = param[2], fd = param[1];
    if(! s) return caml_call4(Lwt_bytes[24], fd, buf, pos, len);
    var s$0 = s[1];
    return 0 === len
            ? caml_call1(Lwt[4], 0)
            : repeat_call
              (fd,
               function(param){
                return caml_call4(Ssl[82], s$0, buf, pos, len);
               });
   }
   function wait_read(param){
    var s = param[2], fd = param[1];
    return s ? caml_call1(Lwt[57], 0) : caml_call1(Lwt_unix[37], fd);
   }
   function wait_write(param){
    var s = param[2], fd = param[1];
    return s ? caml_call1(Lwt[57], 0) : caml_call1(Lwt_unix[38], fd);
   }
   function ssl_shutdown(param){
    var s = param[2], fd = param[1];
    if(! s) return Lwt[36];
    var s$0 = s[1];
    return repeat_call(fd, function(param){return caml_call1(Ssl[76], s$0);});
   }
   function shutdown(param, cmd){
    var fd = param[1];
    return caml_call2(Lwt_unix[99], fd, cmd);
   }
   function close_notify(s){
    var match = s[2], fd = s[1];
    if(match){
     var s$0 = match[1];
     return repeat_call(fd, function(param){return caml_call1(Ssl[74], s$0);});
    }
    shutdown(s, 1);
    return Lwt[39];
   }
   function close(param){
    var fd = param[1];
    return caml_call1(Lwt_unix[25], fd);
   }
   function abort(param){
    var fd = param[1];
    return caml_call1(Lwt_unix[14], fd);
   }
   function shutdown_and_close(s){
    function _k_(param){
     function _m_(param){return close(s);}
     var _n_ = caml_call3(Lwt[64], shutdown, s, 2);
     return caml_call2(Lwt[33][1], _n_, _m_);
    }
    var _l_ = ssl_shutdown(s);
    return caml_call2(Lwt[33][1], _l_, _k_);
   }
   function out_channel_of_descr(buffer, s){
    function _g_(buf, pos, len){return write_bytes(s, buf, pos, len);}
    var
     _h_ = Lwt_io[3],
     _i_ = 0,
     _j_ = [0, function(param){return shutdown_and_close(s);}];
    return caml_call5(Lwt_io[11], buffer, _j_, _i_, _h_, _g_);
   }
   function in_channel_of_descr(buffer, s){
    function _c_(buf, pos, len){return read_bytes(s, buf, pos, len);}
    var
     _d_ = Lwt_io[2],
     _e_ = 0,
     _f_ = [0, function(param){return shutdown_and_close(s);}];
    return caml_call5(Lwt_io[11], buffer, _f_, _e_, _d_, _c_);
   }
   function get_fd(param){var fd = param[1]; return fd;}
   function get_unix_fd(param){
    var socket = param[2], fd = param[1];
    if(! socket) return caml_call1(Lwt_unix[10], fd);
    var socket$0 = socket[1];
    return caml_call1(Ssl[69], socket$0);
   }
   function getsockname(s){
    var _b_ = get_unix_fd(s);
    return caml_call1(Unix[141], _b_);
   }
   function getpeername(s){
    var _a_ = get_unix_fd(s);
    return caml_call1(Unix[142], _a_);
   }
   var
    Lwt_ssl =
      [0,
       ssl_socket,
       ssl_socket_of_uninitialized_so,
       is_ssl,
       ssl_accept,
       ssl_connect,
       plain,
       embed_socket,
       embed_uninitialized_socket,
       ssl_perform_handshake,
       ssl_accept_handshake,
       read,
       write,
       read_bytes,
       write_bytes,
       wait_read,
       wait_write,
       shutdown,
       close,
       in_channel_of_descr,
       out_channel_of_descr,
       close_notify,
       ssl_shutdown,
       abort,
       get_fd,
       get_unix_fd,
       getsockname,
       getpeername];
   runtime.caml_register_global(6, Lwt_ssl, "Lwt_ssl");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
