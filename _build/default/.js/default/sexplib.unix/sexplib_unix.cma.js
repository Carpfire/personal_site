// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Sexplib_unix
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_unix = [0];
   runtime.caml_register_global(0, Sexplib_unix, "Sexplib_unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib_unix__Sexplib_unix_conv
//# unitInfo: Requires: Sexplib__Conv, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Unix = global_data.Unix,
    Assert_failure = global_data.Assert_failure,
    Sexplib_Conv = global_data.Sexplib__Conv,
    _b_ = [0, "Unix.Unix_error"],
    _c_ = [0, "unix/lib/sexplib_unix_conv.ml", 20, 11],
    _d_ = [0, 0],
    _e_ = [0, 0];
   function _a_(param){
    if(param[1] !== Unix[1])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     arg = param[4],
     loc = param[3],
     err = param[2],
     err_str = caml_call1(Unix[2], err);
    return [1, [0, _b_, [0, [0, err_str], [0, [0, loc], [0, [0, arg], 0]]]]];
   }
   caml_call4(Sexplib_Conv[72][1], _e_, _d_, Unix[1], _a_);
   var Sexplib_unix_Sexplib_unix_conv = [0, 0];
   runtime.caml_register_global
    (7, Sexplib_unix_Sexplib_unix_conv, "Sexplib_unix__Sexplib_unix_conv");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzZXhwbGliX3VuaXguY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImFyZyIsImxvYyIsImVyciIsImVycl9zdHIiXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9zZXhwbGliL3VuaXgvc2V4cGxpYl91bml4X2NvbnYubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7O0lBZUk7S0FJTyxNQUFBO0lBRlM7S0FEYUE7S0FBTEM7S0FBTEM7S0FDYkMsVUFBVSxvQkFER0Q7SUFFakIsNEJBRElDLGtCQURrQkYsY0FBS0Q7R0FHVDtHQVJ0Qjs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqKiBFeGNlcHRpb24gc2V4cCBjb252ZXJ0ZXJzIHRoYXQgYXJlIFVuaXgtc3BlY2lmaWMuIEhhbmRsZXMgW1VuaXguVW5peF9lcnJvcl0uXG5cbiAgICBXcml0ZSBbbGV0ICgpID0gU2V4cGxpYl91bml4LlNleHBsaWJfdW5peF9jb252LmxpbmttZV0gaW4geW91ciBwcm9ncmFtIHRvIGVuc3VyZSB0aGF0XG4gICAgdGhlIGNvZGUgaW4gdGhpcyBtb2R1bGUgaXMgcnVuLCBpLmUuIHRoZSB1bml4LXNwZWNpZmljIGV4Y2VwdGlvbiBjb252ZXJ0ZXJzIGFyZSBhZGRlZC5cbiAgICBUaGlzIGlzIGFscmVhZHkgZG9uZSBieSBbQ29yZV0sIHNvIGFueSBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgQ29yZSBuZWVkIG5vdCB3b3JyeVxuICAgIGFib3V0IHRoaXMgbW9kdWxlIGF0IGFsbC4gKilcbm9wZW4gU2V4cGxpYi5TZXhwXG5cbm9wZW4gU2V4cGxpYi5Db252XG5cbmxldCAoKSA9XG4gIEV4bl9jb252ZXJ0ZXIuYWRkXG4gICAgfnByaW50ZXhjOmZhbHNlXG4gICAgfmZpbmFsaXNlOmZhbHNlXG4gICAgWyVleHRlbnNpb25fY29uc3RydWN0b3IgVW5peC5Vbml4X2Vycm9yXVxuICAgIChmdW5jdGlvblxuICAgIHwgVW5peC5Vbml4X2Vycm9yIChlcnIsIGxvYywgYXJnKSAtPlxuICAgICAgbGV0IGVycl9zdHIgPSBVbml4LmVycm9yX21lc3NhZ2UgZXJyIGluXG4gICAgICBMaXN0IFsgQXRvbSBcIlVuaXguVW5peF9lcnJvclwiOyBBdG9tIGVycl9zdHI7IEF0b20gbG9jOyBBdG9tIGFyZyBdXG4gICAgfCBfIC0+IGFzc2VydCBmYWxzZSlcbjs7XG5cbmxldCBsaW5rbWUgPSAoKVxuIl19
