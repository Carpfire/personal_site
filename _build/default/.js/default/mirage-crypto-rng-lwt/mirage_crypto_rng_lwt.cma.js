// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Mirage_crypto_rng_lwt
//# unitInfo: Requires: Duration, Logs, Lwt, Lwt_main, Lwt_unix, Mirage_crypto_rng, Mirage_crypto_rng_unix, Mtime_clock, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Mirage_crypto_rng_default_ =
      "Mirage_crypto_rng.default_generator has already been set (but not via Mirage_crypto_rng_lwt.initialize). Please check that this is intentional",
    cst_Mirage_crypto_rng_lwt_init =
      "Mirage_crypto_rng_lwt.initialize has already been called, ignoring this call.",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Duration = global_data.Duration,
    Mirage_crypto_rng = global_data.Mirage_crypto_rng,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Mtime_clock = global_data.Mtime_clock,
    Lwt_main = global_data.Lwt_main,
    Mirage_crypto_rng_unix = global_data.Mirage_crypto_rng_unix,
    Lwt_unix = global_data.Lwt_unix,
    Lwt = global_data.Lwt,
    Logs = global_data.Logs,
    src =
      caml_call2
       (Logs[7][1], [0, "Mirage crypto RNG Lwt"], "mirage-crypto-rng-lwt"),
    Log = caml_call1(Logs[18], src),
    _c_ =
      [0,
       [11, cst_Mirage_crypto_rng_default_, 0],
       cst_Mirage_crypto_rng_default_],
    _a_ =
      [0,
       [11, cst_Mirage_crypto_rng_lwt_init, 0],
       cst_Mirage_crypto_rng_lwt_init],
    cst_getrandom = "getrandom",
    _b_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0);
   function periodic(f, delta){
    function _k_(param){
     function one(param){
      caml_call1(f, 0);
      var
       _l_ = caml_call1(Duration[23], delta),
       _m_ = caml_call1(Lwt_unix[2], _l_);
      return caml_call2(Lwt[33][1], _m_, one);
     }
     return one(0);
    }
    return caml_call1(Lwt[11], _k_);
   }
   var running = [0, 0];
   function getrandom_init(i){
    var data = caml_call1(Mirage_crypto_rng_unix[2], 128);
    return caml_call2(Mirage_crypto_rng[3][12], i, data);
   }
   function initialize(g, opt, rng){
    if(opt)
     var sth = opt[1], sleep = sth;
    else
     var sleep = caml_call1(Duration[6], 1);
    if(running[1]){
     var _d_ = function(m){return caml_call3(m, 0, 0, _a_);};
     return caml_call1(Log[6], _d_);
    }
    try{
     caml_call1(Mirage_crypto_rng[7], 0);
     var _i_ = function(m){return caml_call3(m, 0, 0, _c_);};
     caml_call1(Log[4], _i_);
    }
    catch(_j_){
     var _e_ = caml_wrap_exception(_j_);
     if(_e_ !== Mirage_crypto_rng[2])
      throw caml_maybe_attach_backtrace(_e_, 0);
    }
    running[1] = 1;
    var
     init =
       [0,
        Mirage_crypto_rng[3][6],
        [0,
         Mirage_crypto_rng[3][4],
         [0, Mirage_crypto_rng[3][6], [0, getrandom_init, 0]]]];
    function _f_(i, f){return caml_call1(f, i);}
    var
     _g_ = caml_call2(Stdlib_List[21], _f_, init),
     seed = caml_call1(caml_call1(Stdlib_String[7], cst), _g_),
     rng$0 =
       caml_call5
        (Mirage_crypto_rng[6], g, [0, seed], 0, [0, Mtime_clock[6]], rng);
    caml_call1(Mirage_crypto_rng[8], rng$0);
    var match = Mirage_crypto_rng[3][10];
    if(0 === match[0]){
     var cpu_rng = match[1];
     periodic(caml_call1(cpu_rng, 0), sleep);
    }
    var
     source = caml_call1(Mirage_crypto_rng[3][3], cst_getrandom),
     delta = runtime.caml_int64_mul(sleep, _b_);
    function task(param){
     var
      size = 8 * caml_call1(Mirage_crypto_rng[16], 0) | 0,
      random = caml_call1(Mirage_crypto_rng_unix[2], size),
      idx = [0, 0],
      per_pool = 8;
     function f(param){
      idx[1]++;
      return caml_call3
              (Stdlib_String[16], random, 8 * (idx[1] - 1 | 0) | 0, per_pool);
     }
     return caml_call3(Mirage_crypto_rng[3][9], 0, source, f);
    }
    periodic(task, delta);
    var _h_ = caml_call1(Mirage_crypto_rng[3][8], 0);
    caml_call1(Lwt_main[4][1], _h_);
    return 0;
   }
   var Mirage_crypto_rng_lwt = [0, initialize];
   runtime.caml_register_global
    (17, Mirage_crypto_rng_lwt, "Mirage_crypto_rng_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtaXJhZ2VfY3J5cHRvX3JuZ19sd3QuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInNyYyIsInBlcmlvZGljIiwiZiIsImRlbHRhIiwib25lIiwicnVubmluZyIsImdldHJhbmRvbV9pbml0IiwiaSIsImRhdGEiLCJpbml0aWFsaXplIiwiZyIsIm9wdCIsInJuZyIsInN0aCIsInNsZWVwIiwibSIsImluaXQiLCJzZWVkIiwicm5nJDAiLCJjcHVfcm5nIiwic291cmNlIiwidGFzayIsInNpemUiLCJyYW5kb20iLCJpZHgiLCJwZXJfcG9vbCJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL21pcmFnZS1jcnlwdG8tcm5nLWx3dC9taXJhZ2VfY3J5cHRvX3JuZ19sd3QubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7R0FFVTs7Ozs7Ozs7Ozs7OztJQUFOQTtNQUFNOztJQUNRLE1BQUEscUJBRGRBOzs7Ozs7Ozs7OztZQUdBQyxTQUFTQyxHQUFFQzs7Y0FHREM7TUFDTixXQUpLRjtNQUlnQjtPQUFBLE1BQUEseUJBSmRDO09BSUQsTUFBQTtNQUFBLE9BQUEsNEJBREFDO0tBQzRDO0tBRXBELE9BSFFBO0lBR0Y7SUFKQSxPQUFBO0dBSUM7R0FxQkMsSUFBVkM7WUFFQUMsZUFBZUM7SUFDTixJQUFQQyxPQUFPO0lBQ1gsT0FBQSxxQ0FGaUJELEdBQ2JDO0dBQ2lCO1lBRW5CQyxXQUFxQkMsR0FBSUMsS0FBNEJDO0lBQ3ZELEdBRDJCRDtTQUFRRSxNQUFSRixRQUFBRyxRQUFRRDs7U0FBUkMsUUFBUTtPQU5qQ1Q7S0FRQSxtQkFDT1UsR0FBSyxPQUFBLFdBQUxBLGNBQzRCO0tBRGpDLE9BQUE7O0lBRUM7S0FFUTtLQUFBLG1CQUNNQSxHQUFLLE9BQUEsV0FBTEEsY0FHaUM7S0FIL0M7Ozs7Ozs7SUFkSFY7SUF1Qlk7S0FETlc7Ozs7OzBDQXBCTlY7aUJBdUJpQkMsR0FBRUwsR0FBSyxPQUFBLFdBQUxBLEdBQUZLLEdBQVU7SUFBekI7S0FBQSxNQUFBLGlDQUhJUztLQURGQyxPQUlGLFdBQW1DO0tBRWpDQztPQUFNOytCQXJCV1IsT0FlakJPLCtCQWZpREw7SUFzQnJELGlDQURJTTs7O1NBN0JEQztLQXpCSGxCLFNBeUJ1QixXQUFwQmtCLGFBUXNCTDs7SUF3Qlo7S0FqRFFNLFNBaURSO0tBakRFakIsUUFrREEsdUJBekJVVzthQXhCdkJPO0tBQ0Y7TUFDSUMsV0FBa0I7TUFDbEJDLFNBQVMsc0NBRFREO01BRUFFO01BSEFDO2NBSUF2QjtNQURBc0I7TUFISixPQUFBO2tDQUVJRCxhQUNBQyxxQkFIQUM7S0FNaUQ7S0FFckQsT0FBQSx1Q0FWcUJMLFFBTWpCbEI7SUFJNEI7SUFsQmhDRCxTQVNFb0IsTUFEYWxCO0lBb0R1QixVQUFBO0lBQXBDO0lBQUE7R0FHRDttQ0E5QkRNOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIE1pcmFnZV9jcnlwdG9fcm5nXG5cbmxldCBzcmMgPSBMb2dzLlNyYy5jcmVhdGUgXCJtaXJhZ2UtY3J5cHRvLXJuZy1sd3RcIiB+ZG9jOlwiTWlyYWdlIGNyeXB0byBSTkcgTHd0XCJcbm1vZHVsZSBMb2cgPSAodmFsIExvZ3Muc3JjX2xvZyBzcmMgOiBMb2dzLkxPRylcblxubGV0IHBlcmlvZGljIGYgZGVsdGEgPVxuICBsZXQgb3BlbiBMd3QuSW5maXggaW5cbiAgTHd0LmFzeW5jIChmdW4gKCkgLT5cbiAgICAgIGxldCByZWMgb25lICgpID1cbiAgICAgICAgZiAoKTsgTHd0X3VuaXguc2xlZXAgKER1cmF0aW9uLnRvX2YgZGVsdGEpID4+PSBvbmVcbiAgICAgIGluXG4gICAgICBvbmUgKCkpXG5cbmxldCBnZXRyYW5kb21fdGFzayBkZWx0YSBzb3VyY2UgPVxuICBsZXQgdGFzayAoKSA9XG4gICAgbGV0IHBlcl9wb29sID0gOCBpblxuICAgIGxldCBzaXplID0gcGVyX3Bvb2wgKiBwb29scyBOb25lIGluXG4gICAgbGV0IHJhbmRvbSA9IE1pcmFnZV9jcnlwdG9fcm5nX3VuaXguZ2V0cmFuZG9tIHNpemUgaW5cbiAgICBsZXQgaWR4ID0gcmVmIDAgaW5cbiAgICBsZXQgZiAoKSA9XG4gICAgICBpbmNyIGlkeDtcbiAgICAgIFN0cmluZy5zdWIgcmFuZG9tIChwZXJfcG9vbCAqIChwcmVkICFpZHgpKSBwZXJfcG9vbFxuICAgIGluXG4gICAgRW50cm9weS5mZWVkX3Bvb2xzIE5vbmUgc291cmNlIGZcbiAgaW5cbiAgcGVyaW9kaWMgdGFzayBkZWx0YVxuXG5sZXQgcmRyYW5kX3Rhc2sgZGVsdGEgPVxuICBtYXRjaCBFbnRyb3B5LmNwdV9ybmcgd2l0aFxuICB8IEVycm9yIGBOb3Rfc3VwcG9ydGVkIC0+ICgpXG4gIHwgT2sgY3B1X3JuZyAtPiBwZXJpb2RpYyAoY3B1X3JuZyBOb25lKSBkZWx0YVxuXG5sZXQgcnVubmluZyA9IHJlZiBmYWxzZVxuXG5sZXQgZ2V0cmFuZG9tX2luaXQgaSA9XG4gIGxldCBkYXRhID0gTWlyYWdlX2NyeXB0b19ybmdfdW5peC5nZXRyYW5kb20gMTI4IGluXG4gIEVudHJvcHkuaGVhZGVyIGkgZGF0YVxuXG5sZXQgaW5pdGlhbGl6ZSAodHlwZSBhKSA/ZyA/KHNsZWVwID0gRHVyYXRpb24ub2Zfc2VjIDEpIChybmcgOiBhIGdlbmVyYXRvcikgPVxuICBpZiAhcnVubmluZyB0aGVuXG4gICAgTG9nLmRlYnVnXG4gICAgICAoZnVuIG0gLT4gbSBcIk1pcmFnZV9jcnlwdG9fcm5nX2x3dC5pbml0aWFsaXplIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkLCBcXFxuICAgICAgICAgICAgICAgICAgIGlnbm9yaW5nIHRoaXMgY2FsbC5cIilcbiAgZWxzZSBiZWdpblxuICAgICh0cnlcbiAgICAgICBsZXQgXyA9IGRlZmF1bHRfZ2VuZXJhdG9yICgpIGluXG4gICAgICAgTG9nLndhcm4gKGZ1biBtIC0+IG0gXCJNaXJhZ2VfY3J5cHRvX3JuZy5kZWZhdWx0X2dlbmVyYXRvciBoYXMgYWxyZWFkeSBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIHNldCAoYnV0IG5vdCB2aWEgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWlyYWdlX2NyeXB0b19ybmdfbHd0LmluaXRpYWxpemUpLiBQbGVhc2UgY2hlY2sgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIGlzIGludGVudGlvbmFsXCIpO1xuICAgICB3aXRoXG4gICAgICAgTm9fZGVmYXVsdF9nZW5lcmF0b3IgLT4gKCkpO1xuICAgIHJ1bm5pbmcgOj0gdHJ1ZTtcbiAgICBsZXQgc2VlZCA9XG4gICAgICBsZXQgaW5pdCA9XG4gICAgICAgIEVudHJvcHkuWyBib290c3RyYXAgOyB3aGlybHdpbmRfYm9vdHN0cmFwIDsgYm9vdHN0cmFwIDsgZ2V0cmFuZG9tX2luaXQgXVxuICAgICAgaW5cbiAgICAgIExpc3QubWFwaSAoZnVuIGkgZiAtPiBmIGkpIGluaXQgfD4gU3RyaW5nLmNvbmNhdCBcIlwiXG4gICAgaW5cbiAgICBsZXQgcm5nID0gY3JlYXRlID9nIH5zZWVkIH50aW1lOk10aW1lX2Nsb2NrLmVsYXBzZWRfbnMgcm5nIGluXG4gICAgc2V0X2RlZmF1bHRfZ2VuZXJhdG9yIHJuZztcbiAgICByZHJhbmRfdGFzayBzbGVlcDtcbiAgICBsZXQgc291cmNlID0gRW50cm9weS5yZWdpc3Rlcl9zb3VyY2UgXCJnZXRyYW5kb21cIiBpblxuICAgIGdldHJhbmRvbV90YXNrIChJbnQ2NC5tdWwgc2xlZXAgMTBMKSBzb3VyY2U7XG4gICAgbGV0IF8gPVxuICAgICAgTHd0X21haW4uRW50ZXJfaXRlcl9ob29rcy5hZGRfZmlyc3QgKEVudHJvcHkudGltZXJfYWNjdW11bGF0b3IgTm9uZSlcbiAgICBpblxuICAgICgpXG4gIGVuZFxuIl19
