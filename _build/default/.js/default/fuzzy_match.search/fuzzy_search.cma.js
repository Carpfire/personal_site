// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Fuzzy_search
//# unitInfo: Requires: Core, Core__Array, Core__Char, Core__Int, Core__List, Core__Option, Core__Queue, Core__Set, Core__String, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Fuzzy_search$0 = "Fuzzy_search",
    cst_fuzzy_search$0 = "fuzzy_search",
    caml_check_bound = runtime.caml_check_bound,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Array = global_data.Core__Array,
    Core_Tuple = global_data.Core__Tuple,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Core_Char = global_data.Core__Char,
    Core_Queue = global_data.Core__Queue,
    Core_Set = global_data.Core__Set,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Fuzzy_search$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_fuzzy_search$0);
   caml_call1(Ppx_expect_runtime[1][1], "search/src/fuzzy_search.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_fuzzy_search$0, "fuzzy_search.ml");
   var
    cst_fuzzy_search = cst_fuzzy_search$0,
    cst_Fuzzy_search = cst_Fuzzy_search$0;
   function create(query){
    function _u_(s){return 1 - caml_call1(Core_String[14], s);}
    var
     _v_ = caml_call2(Core_String[78], query, 32),
     _w_ = caml_call2(Core_List[12], _v_, _u_),
     queries = caml_call1(Core_Array[24], _w_),
     case_sensitive = caml_call2(Core_String[19], query, Core_Char[20]);
    return [0, queries, query, case_sensitive];
   }
   function is_empty(t){return caml_call1(Core_String[14], t[2]);}
   var the_one_and_only = [0, 0, 0, 0];
   function equal_ignore_case(char1, char2){
    var
     _s_ = caml_call1(Core_Char[16], char2),
     _t_ = caml_call1(Core_Char[16], char1);
    return caml_call2(Core_Char[54], _t_, _s_);
   }
   function find_start_end_indices(query, item, param){
    var item_idx = [0, 0], query_idx = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], item_idx[1], caml_ml_string_length(item)))
      break;
     if(! caml_call2(Core[92], query_idx[1], caml_ml_string_length(query)))
      break;
     var
      item_char = caml_string_get(item, item_idx[1]),
      query_char = caml_string_get(query, query_idx[1]);
     if(equal_ignore_case(item_char, query_char)) query_idx[1]++;
     item_idx[1]++;
    }
    if(caml_call2(Core[92], query_idx[1], caml_ml_string_length(query)))
     the_one_and_only[1] = 0;
    else{
     var
      end_idx = item_idx[1],
      item_idx$0 = [0, end_idx - 1 | 0],
      query_idx$0 = [0, caml_ml_string_length(query) - 1 | 0];
     for(;;){
      if(! caml_call2(Core[88], query_idx$0[1], 0)){
       var start_idx = item_idx$0[1] + 1 | 0;
       the_one_and_only[1] = 1;
       the_one_and_only[2] = start_idx;
       the_one_and_only[3] = end_idx;
       break;
      }
      var
       item_char$0 = caml_string_get(item, item_idx$0[1]),
       query_char$0 = caml_string_get(query, query_idx$0[1]);
      if(equal_ignore_case(item_char$0, query_char$0)) query_idx$0[1] += -1;
      item_idx$0[1] += -1;
     }
    }
    return the_one_and_only;
   }
   function matching_indices(query, item){
    if(is_empty(query)) return [0, [0]];
    function _p_(init, query){
     var
      f = Core_Set[12],
      match = find_start_end_indices(query, item, 0),
      found = match[1],
      start_idx = match[2],
      end_idx = match[3],
      acc = [0, init];
     if(found){
      var query_idx = [0, 0], _q_ = end_idx - 1 | 0;
      if(_q_ >= start_idx){
       var item_idx = start_idx;
       for(;;){
        var
         item_char = caml_string_get(item, item_idx),
         query_char = caml_string_get(query, query_idx[1]);
        if(equal_ignore_case(item_char, query_char)){
         acc[1] = caml_call2(f, acc[1], item_idx);
         query_idx[1]++;
        }
        var _r_ = item_idx + 1 | 0;
        if(_q_ === item_idx) break;
        var item_idx = _r_;
       }
      }
     }
     return acc[1];
    }
    var indices = caml_call3(Core_Array[36], query[1], Core_Int[99][5], _p_);
    return caml_call1(Core_Set[10], indices)
            ? 0
            : [0, caml_call1(Core_Set[40], indices)];
   }
   function split_by_matching_sections(query, item){
    var match = matching_indices(query, item);
    if(! match) return 0;
    var matches = match[1], len = matches.length - 1;
    if(! len) return [0, [0, [0, 357846217, item], 0]];
    var sections = caml_call2(Core_Queue[66], 0, 0);
    function add_section(matching, start, end_inclusive){
     var
      _o_ =
        [0,
         matching,
         caml_call3
          (Core_String[3], item, start, (end_inclusive - start | 0) + 1 | 0)];
     return caml_call2(Core_Queue[43], sections, _o_);
    }
    var first = caml_check_bound(matches, 0)[1];
    if(caml_call2(Core[91], first, 0))
     add_section(357846217, 0, first - 1 | 0);
    var matching_range_start = [0, first], matching_range_end = [0, first];
    function _n_(idx){
     if(caml_call2(Core[91], idx, matching_range_end[1] + 1 | 0)){
      add_section(485349597, matching_range_start[1], matching_range_end[1]);
      add_section(357846217, matching_range_end[1] + 1 | 0, idx - 1 | 0);
      matching_range_start[1] = idx;
     }
     matching_range_end[1] = idx;
     return 0;
    }
    caml_call2(Core_Array[35], matches, _n_);
    add_section(485349597, matching_range_start[1], matching_range_end[1]);
    if
     (caml_call2
       (Core[92], matching_range_end[1], caml_ml_string_length(item) - 1 | 0))
     add_section
      (357846217,
       matching_range_end[1] + 1 | 0,
       caml_ml_string_length(item) - 1 | 0);
    return [0, caml_call1(Core_Queue[28], sections)];
   }
   function of_char(param){
    if(65 <= param){
     if(97 <= param){if(123 > param) return 1;} else if(91 > param) return 0;
    }
    else if(9 >= param - 48 >>> 0) return 2;
    return 3;
   }
   var
    start_of_word_bonus = 480,
    camel_case_bonus = 360,
    non_word_bonus = 480,
    match_bonus = 320;
   function score(query, item){
    var
     match$0 = caml_call1(Core_String[14], item),
     match$1 = is_empty(query);
    if(match$0) return 0;
    if(match$1) return 1;
    var
     case_sensitive = query[3],
     raw = query[2],
     queries = query[1],
     raw_score = [0, 0],
     any_mismatch = [0, 0],
     _l_ = queries.length - 1 - 1 | 0,
     _k_ = 0;
    if(_l_ >= 0){
     var i = _k_;
     for(;;){
      var
       query$0 = caml_check_bound(queries, i)[1 + i],
       match = find_start_end_indices(query$0, item, 0),
       found = match[1],
       start_idx = match[2],
       end_idx = match[3];
      if(found){
       var
        start_char_class =
          caml_call2(Core[90], start_idx, 0)
           ? 3
           : of_char(caml_string_get(item, start_idx - 1 | 0)),
        query_idx = [0, 0],
        score = [0, 0],
        in_gap = [0, 0],
        prev_char_class = [0, start_char_class],
        prev_char_score = [0, 0],
        _h_ = end_idx - 1 | 0;
       if(_h_ >= start_idx){
        var item_idx = start_idx;
        for(;;){
         var
          item_char = caml_string_get(item, item_idx),
          query_char = caml_string_get(query$0, query_idx[1]);
         if(equal_ignore_case(item_char, query_char)){
          var char_class = of_char(item_char), _i_ = prev_char_class[1];
          a:
          {
           b:
           {
            c:
            {
             if(_i_)
              switch(_i_ - 1 | 0){
                case 0:
                 if(1 === char_class) break b;
                 if(! char_class) break c;
                 break;
                case 1: break;
                default:
                 if(3 > char_class){
                  var base_score = start_of_word_bonus;
                  break a;
                 }
              }
             if(2 !== char_class){
              if(3 > char_class) break b;
              var base_score = non_word_bonus;
              break a;
             }
            }
            var base_score = camel_case_bonus;
            break a;
           }
           var base_score = match_bonus;
          }
          var
           with_start_of_item_bonus =
             caml_call2(Core[90], item_idx, 0)
              ? base_score + 1 | 0
              : base_score,
           with_consecutive_bonus =
             in_gap[1]
              ? with_start_of_item_bonus
              : caml_call2
                (Core_Int[90], with_start_of_item_bonus, prev_char_score[1]);
          a:
          {
           if
            (!
             caml_call2(Core_Char[54], item_char, query_char)
             && case_sensitive){
            var with_wrong_case_penalty = with_consecutive_bonus - 120 | 0;
            break a;
           }
           var with_wrong_case_penalty = with_consecutive_bonus;
          }
          var
           this_char_score =
             caml_call2(Core[90], query_idx[1], 0)
              ? 2 * with_wrong_case_penalty | 0
              : with_wrong_case_penalty;
          query_idx[1]++;
          score[1] = score[1] + this_char_score | 0;
          prev_char_class[1] = char_class;
          prev_char_score[1] = this_char_score;
          in_gap[1] = 0;
         }
         else{
          var this_char_score$0 = in_gap[1] ? -20 : -60;
          score[1] = score[1] + this_char_score$0 | 0;
          in_gap[1] = 1;
         }
         var _j_ = item_idx + 1 | 0;
         if(_h_ === item_idx) break;
         var item_idx = _j_;
        }
       }
       var score$0 = score[1];
      }
      else
       var score$0 = 0;
      if(caml_call2(Core[90], score$0, 0)) any_mismatch[1] = 1;
      raw_score[1] = raw_score[1] + score$0 | 0;
      var _m_ = i + 1 | 0;
      if(_l_ === i) break;
      var i = _m_;
     }
    }
    if(0 === raw_score[1]) return 0;
    if(any_mismatch[1]) return 0;
    var query_length = caml_ml_string_length(raw);
    return ((962 * query_length | 0) + 1 | 0) - raw_score[1] | 0;
   }
   function score_opt(query, item){
    var x = score(query, item);
    return 0 === x ? 0 : [0, x];
   }
   function find_start_end_indices$0(query, item, param){
    var
     match = find_start_end_indices(query, item, 0),
     found = match[1],
     start_idx = match[2],
     end_idx = match[3];
    return caml_call2(Core_Option[60], found, [0, start_idx, end_idx]);
   }
   var For_testing = [0, find_start_end_indices$0];
   function search(query, items){
    var _c_ = Core_Tuple[2][10];
    function _d_(a_001, b_002){
     var
      t_005 = a_001[3],
      t_004 = a_001[2],
      t_003 = a_001[1],
      t_008 = b_002[3],
      t_007 = b_002[2],
      t_006 = b_002[1],
      n = caml_call2(Core[382], t_003, t_006);
     if(0 !== n) return n;
     var n$0 = caml_call2(Core[382], t_004, t_007);
     return 0 === n$0 ? caml_call2(Core[551], t_005, t_008) : n$0;
    }
    function _e_(item){
     var score$0 = score(query, item);
     return 0 === score$0
             ? 0
             : [0, [0, score$0, caml_ml_string_length(item), item]];
    }
    var
     _f_ = caml_call2(Core_List[13], items, _e_),
     _g_ = caml_call2(Core_List[79], _f_, _d_);
    return caml_call2(Core_List[51], _g_, _c_);
   }
   function search$0(query, items){
    function _a_(item){
     var score$0 = score(query, item);
     return 0 === score$0
             ? 0
             : [0, [0, score$0, caml_ml_string_length(item), item]];
    }
    var items_by_score = caml_call2(Core_Array[29], items, _a_);
    function _b_(a_009, b_010){
     var
      t_013 = a_009[3],
      t_012 = a_009[2],
      t_011 = a_009[1],
      t_016 = b_010[3],
      t_015 = b_010[2],
      t_014 = b_010[1],
      n = caml_call2(Core[382], t_011, t_014);
     if(0 !== n) return n;
     var n$0 = caml_call2(Core[382], t_012, t_015);
     return 0 === n$0 ? caml_call2(Core[551], t_013, t_016) : n$0;
    }
    caml_call4(Core_Array[81], 0, 0, items_by_score, _b_);
    return caml_call2(Core_Array[27], items_by_score, Core_Tuple[2][10]);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_fuzzy_search);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Fuzzy_search);
   var
    Fuzzy_search =
      [0,
       [0, create],
       score,
       score_opt,
       matching_indices,
       split_by_matching_sections,
       search,
       search$0,
       For_testing];
   runtime.caml_register_global(21, Fuzzy_search, cst_Fuzzy_search$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
