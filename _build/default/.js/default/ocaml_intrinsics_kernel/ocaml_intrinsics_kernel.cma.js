// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ocaml_intrinsics_kernel
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ocaml_intrinsics_kernel = [0];
   runtime.caml_register_global
    (0, Ocaml_intrinsics_kernel, "Ocaml_intrinsics_kernel");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Common
//# unitInfo: Requires: Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Sys = global_data.Stdlib__Sys,
    _a_ = Stdlib_Sys[5];
   a:
   {
    if(typeof _a_ === "number" && ! _a_){
     var available = Stdlib_Sys[6];
     break a;
    }
    var available = 0;
   }
   var Ocaml_intrinsics_kernel_Common = [0, available];
   runtime.caml_register_global
    (1, Ocaml_intrinsics_kernel_Common, "Ocaml_intrinsics_kernel__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Naive_ints
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/naive_ints.ml", 23, 9],
    Ocaml_intrinsics_kernel_Naive_ =
      [0,
       function(Int){
        function is_least_significant_bit_set(n){
         var lsb = caml_call2(Int[1], n, Int[3]);
         if(caml_call2(Int[4], lsb, Int[3])) return 1;
         if(caml_call2(Int[4], lsb, Int[2])) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        }
        function count_trailing_zeros(mask){
         if(caml_call2(Int[4], mask, Int[2])) return Int[8];
         var acc = 0, mask$0 = mask;
         for(;;){
          if(is_least_significant_bit_set(mask$0)) return acc;
          var
           mask$1 = caml_call2(Int[6], mask$0, 1),
           acc$0 = acc + 1 | 0,
           acc = acc$0,
           mask$0 = mask$1;
         }
        }
        function count_leading_zeros(mask){
         if(caml_call2(Int[4], mask, Int[2])) return Int[8];
         var acc = 0, mask$0 = mask;
         for(;;){
          var _b_ = 0 <= caml_call2(Int[5], mask$0, Int[2]) ? 0 : 1;
          if(_b_) return acc;
          var
           mask$1 = caml_call2(Int[7], mask$0, 1),
           acc$0 = acc + 1 | 0,
           acc = acc$0,
           mask$0 = mask$1;
         }
        }
        function count_set_bits(mask){
         var acc = 0, mask$0 = mask;
         for(;;){
          if(caml_call2(Int[4], mask$0, Int[2])) return acc;
          var
           acc$0 = is_least_significant_bit_set(mask$0) ? acc + 1 | 0 : acc,
           mask$1 = caml_call2(Int[6], mask$0, 1),
           acc = acc$0,
           mask$0 = mask$1;
         }
        }
        return [0, count_leading_zeros, count_set_bits, count_trailing_zeros];
       }];
   runtime.caml_register_global
    (2, Ocaml_intrinsics_kernel_Naive_, "Ocaml_intrinsics_kernel__Naive_ints");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Nativeint
//# unitInfo: Requires: Ocaml_intrinsics_kernel__Common, Ocaml_intrinsics_kernel__Naive_ints, Stdlib__Nativeint, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ocaml_intrinsics_kernel_Common =
      global_data.Ocaml_intrinsics_kernel__Common,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Ocaml_intrinsics_kernel_Naive_ =
      global_data.Ocaml_intrinsics_kernel__Naive_ints,
    available = Ocaml_intrinsics_kernel_Common[1],
    zero = Stdlib_Nativeint[1],
    one = Stdlib_Nativeint[2],
    compare = Stdlib_Nativeint[16],
    equal = Stdlib_Nativeint[18],
    bitwidth = Stdlib_Sys[9];
   function _a_(_i_, _h_){return _i_ << _h_;}
   function _b_(_g_, _f_){return _g_ >>> _f_ | 0;}
   var
    _c_ =
      [0,
       function(_e_, _d_){return _e_ & _d_;},
       zero,
       one,
       equal,
       compare,
       _b_,
       _a_,
       bitwidth],
    Naive = caml_call1(Ocaml_intrinsics_kernel_Naive_[1], _c_);
   function count_leading_zeros(n){
    return available ? runtime.caml_nativeint_clz(n) : caml_call1(Naive[1], n);
   }
   function count_leading_zeros_nonzero_ar(n){
    return available ? runtime.caml_nativeint_clz(n) : caml_call1(Naive[1], n);
   }
   function count_trailing_zeros(n){
    return available ? runtime.caml_nativeint_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_trailing_zeros_nonzero_a(n){
    return available ? runtime.caml_nativeint_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_set_bits(n){
    return available
            ? runtime.caml_nativeint_popcnt(n)
            : caml_call1(Naive[2], n);
   }
   var
    Ocaml_intrinsics_kernel_Native =
      [0,
       count_leading_zeros,
       count_leading_zeros_nonzero_ar,
       count_trailing_zeros,
       count_trailing_zeros_nonzero_a,
       count_set_bits];
   runtime.caml_register_global
    (4, Ocaml_intrinsics_kernel_Native, "Ocaml_intrinsics_kernel__Nativeint");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Int64
//# unitInfo: Requires: Ocaml_intrinsics_kernel__Common, Ocaml_intrinsics_kernel__Naive_ints, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ocaml_intrinsics_kernel_Common =
      global_data.Ocaml_intrinsics_kernel__Common,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Ocaml_intrinsics_kernel_Naive_ =
      global_data.Ocaml_intrinsics_kernel__Naive_ints,
    available = Ocaml_intrinsics_kernel_Common[1],
    zero = Stdlib_Int64[1],
    one = Stdlib_Int64[2],
    compare = Stdlib_Int64[15],
    equal = Stdlib_Int64[17],
    Naive =
      caml_call1
       (Ocaml_intrinsics_kernel_Naive_[1],
        [0,
         runtime.caml_int64_and,
         zero,
         one,
         equal,
         compare,
         runtime.caml_int64_shift_right_unsigned,
         runtime.caml_int64_shift_left,
         64]);
   function count_leading_zeros(n){
    return available ? runtime.caml_int64_clz(n) : caml_call1(Naive[1], n);
   }
   function count_leading_zeros_nonzero_ar(n){
    return available ? runtime.caml_int64_clz(n) : caml_call1(Naive[1], n);
   }
   function count_trailing_zeros(n){
    return available ? runtime.caml_int64_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_trailing_zeros_nonzero_a(n){
    return available ? runtime.caml_int64_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_set_bits(n){
    return available ? runtime.caml_int64_popcnt(n) : caml_call1(Naive[2], n);
   }
   var
    Ocaml_intrinsics_kernel_Int64 =
      [0,
       count_leading_zeros,
       count_leading_zeros_nonzero_ar,
       count_trailing_zeros,
       count_trailing_zeros_nonzero_a,
       count_set_bits];
   runtime.caml_register_global
    (3, Ocaml_intrinsics_kernel_Int64, "Ocaml_intrinsics_kernel__Int64");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Int32
//# unitInfo: Requires: Ocaml_intrinsics_kernel__Common, Ocaml_intrinsics_kernel__Naive_ints, Stdlib__Int32
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ocaml_intrinsics_kernel_Common =
      global_data.Ocaml_intrinsics_kernel__Common,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Ocaml_intrinsics_kernel_Naive_ =
      global_data.Ocaml_intrinsics_kernel__Naive_ints,
    available = Ocaml_intrinsics_kernel_Common[1],
    zero = Stdlib_Int32[1],
    one = Stdlib_Int32[2],
    compare = Stdlib_Int32[15],
    equal = Stdlib_Int32[17],
    bitwidth = 32;
   function _a_(_i_, _h_){return _i_ << _h_;}
   function _b_(_g_, _f_){return _g_ >>> _f_ | 0;}
   var
    _c_ =
      [0,
       function(_e_, _d_){return _e_ & _d_;},
       zero,
       one,
       equal,
       compare,
       _b_,
       _a_,
       bitwidth],
    Naive = caml_call1(Ocaml_intrinsics_kernel_Naive_[1], _c_);
   function count_leading_zeros(n){
    return available ? runtime.caml_int32_clz(n) : caml_call1(Naive[1], n);
   }
   function count_leading_zeros_nonzero_ar(n){
    return available ? runtime.caml_int32_clz(n) : caml_call1(Naive[1], n);
   }
   function count_trailing_zeros(n){
    return available ? runtime.caml_int32_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_trailing_zeros_nonzero_a(n){
    return available ? runtime.caml_int32_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_set_bits(n){
    return available ? runtime.caml_int32_popcnt(n) : caml_call1(Naive[2], n);
   }
   var
    Ocaml_intrinsics_kernel_Int32 =
      [0,
       count_leading_zeros,
       count_leading_zeros_nonzero_ar,
       count_trailing_zeros,
       count_trailing_zeros_nonzero_a,
       count_set_bits];
   runtime.caml_register_global
    (3, Ocaml_intrinsics_kernel_Int32, "Ocaml_intrinsics_kernel__Int32");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Int
//# unitInfo: Requires: Ocaml_intrinsics_kernel__Common, Ocaml_intrinsics_kernel__Naive_ints, Stdlib__Int, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ocaml_intrinsics_kernel_Common =
      global_data.Ocaml_intrinsics_kernel__Common,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Ocaml_intrinsics_kernel_Naive_ =
      global_data.Ocaml_intrinsics_kernel__Naive_ints,
    available = Ocaml_intrinsics_kernel_Common[1],
    zero = Stdlib_Int[1],
    one = Stdlib_Int[2],
    equal = Stdlib_Int[8],
    compare = Stdlib_Int[9],
    bitwidth = Stdlib_Sys[10];
   function _a_(_i_, _h_){return _i_ << _h_;}
   function _b_(_g_, _f_){return _g_ >>> _f_ | 0;}
   var
    _c_ =
      [0,
       function(_e_, _d_){return _e_ & _d_;},
       zero,
       one,
       equal,
       compare,
       _b_,
       _a_,
       bitwidth],
    Naive = caml_call1(Ocaml_intrinsics_kernel_Naive_[1], _c_);
   function count_leading_zeros(n){
    return available ? runtime.caml_int_clz(n) : caml_call1(Naive[1], n);
   }
   function count_leading_zeros2(n){
    return available ? runtime.caml_int_clz(n) : caml_call1(Naive[1], n);
   }
   function count_set_bits2(n){
    return available ? runtime.caml_int_popcnt(n) : caml_call1(Naive[2], n);
   }
   function count_trailing_zeros(n){
    return available ? runtime.caml_int_ctz(n) : caml_call1(Naive[3], n);
   }
   function count_set_bits(n){
    return available ? runtime.caml_int_popcnt(n) : caml_call1(Naive[2], n);
   }
   var
    Ocaml_intrinsics_kernel_Int =
      [0,
       count_leading_zeros,
       count_leading_zeros2,
       count_set_bits,
       count_set_bits2,
       count_trailing_zeros];
   runtime.caml_register_global
    (4, Ocaml_intrinsics_kernel_Int, "Ocaml_intrinsics_kernel__Int");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Float
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ocaml_intrinsics_kernel_Float = [0];
   runtime.caml_register_global
    (0, Ocaml_intrinsics_kernel_Float, "Ocaml_intrinsics_kernel__Float");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ocaml_intrinsics_kernel__Conditional
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ocaml_intrinsics_kernel_Condit = [0];
   runtime.caml_register_global
    (0,
     Ocaml_intrinsics_kernel_Condit,
     "Ocaml_intrinsics_kernel__Conditional");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
