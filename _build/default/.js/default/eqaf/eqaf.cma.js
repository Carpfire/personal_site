// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Eqaf__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Eqaf = [0];
   runtime.caml_register_global(0, Eqaf, "Eqaf__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eqaf__Unsafe
//# unitInfo: Requires: Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function set_int32_le(b, i, x){
    return caml_call3(Stdlib_Bytes[83], b, i, x);
   }
   function get_int64_le(b, i){return caml_call2(Stdlib_Bytes[72], b, i);}
   var Eqaf_Unsafe = [0, set_int32_le, get_int64_le];
   runtime.caml_register_global(1, Eqaf_Unsafe, "Eqaf__Unsafe");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eqaf
//# unitInfo: Requires: Eqaf__Unsafe, Stdlib, Stdlib__Bytes, Stdlib__Int32, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_string_get = runtime.caml_string_get,
    caml_string_get16 = runtime.caml_string_get16,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Eqaf_Unsafe = global_data.Eqaf__Unsafe,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_digits_0 = "digits < 0",
    cst_m_0 = "m <= 0",
    cst_m_16348_not_supported = "m >= 16348 not supported",
    cst_compare_be_with_len = "compare_be_with_len",
    cst_compare_le_with_len = "compare_le_with_len";
   function equal(a, b){
    var al = caml_ml_string_length(a), bl = caml_ml_string_length(b);
    if(al !== bl) return 0;
    var l1 = al >> 1, r = [0, 0], _q_ = l1 - 1 | 0, _p_ = 0;
    if(_q_ >= 0){
     var i = _p_;
     for(;;){
      var
       _u_ = caml_string_get16(b, i * 2 | 0),
       _v_ = caml_string_get16(a, i * 2 | 0) ^ _u_;
      r[1] = r[1] | _v_;
      var _w_ = i + 1 | 0;
      if(_q_ === i) break;
      var i = _w_;
     }
    }
    var _s_ = al & 1, _r_ = 1;
    if(_s_ >= 1){
     var for$0 = _r_;
     for(;;){
      r[1] =
       r[1]
       |
        caml_string_unsafe_get(a, al - 1 | 0)
        ^ caml_string_unsafe_get(b, al - 1 | 0);
      var _t_ = for$0 + 1 | 0;
      if(_s_ === for$0) break;
      var for$0 = _t_;
     }
    }
    return 0 === r[1] ? 1 : 0;
   }
   function sixteen_if_minus_one_or_less(n){return n >> Stdlib_Sys[10] & 16;}
   function eight_if_one_or_more(n){return (- n | 0) >> Stdlib_Sys[10] & 8;}
   function _a_(ln, a, b){
    var r = [0, 0], i = [0, ln - 1 | 0];
    for(;;){
     if(0 > i[1]) return (r[1] & 8) - (r[1] & 16) | 0;
     var
      xa = caml_string_unsafe_get(a, i[1]),
      xb = caml_string_unsafe_get(b, i[1]),
      c = xa - xb | 0,
      _m_ = r[1],
      _n_ = eight_if_one_or_more(c),
      _o_ = (sixteen_if_minus_one_or_less(c) + _n_ | 0) >>> _m_ | 0;
     r[1] = r[1] | _o_;
     i[1] += -1;
    }
   }
   function compare_le_with_len(ln, a, b){
    var al = caml_ml_string_length(a), bl = caml_ml_string_length(b);
    return 0 === ln
            ? 0
            : 0
              === (al ^ ln | bl ^ ln)
              ? _a_(ln, a, b)
              : caml_call1(Stdlib[1], cst_compare_le_with_len);
   }
   function compare_le(a, b){
    var al = caml_ml_string_length(a), bl = caml_ml_string_length(b);
    return al < bl ? 1 : bl < al ? -1 : _a_(al, a, b);
   }
   function _b_(ln, a, b){
    var r = [0, 0], i = [0, 0];
    for(;;){
     if(i[1] >= ln) return (r[1] & 8) - (r[1] & 16) | 0;
     var
      xa = caml_string_unsafe_get(a, i[1]),
      xb = caml_string_unsafe_get(b, i[1]),
      c = xa - xb | 0,
      _j_ = r[1],
      _k_ = eight_if_one_or_more(c),
      _l_ = (sixteen_if_minus_one_or_less(c) + _k_ | 0) >>> _j_ | 0;
     r[1] = r[1] | _l_;
     i[1]++;
    }
   }
   function compare_be_with_len(ln, a, b){
    var al = caml_ml_string_length(a), bl = caml_ml_string_length(b);
    return 0 === ln
            ? 0
            : 0
              === (al ^ ln | bl ^ ln)
              ? _b_(ln, a, b)
              : caml_call1(Stdlib[1], cst_compare_be_with_len);
   }
   function compare_be(a, b){
    var al = caml_ml_string_length(a), bl = caml_ml_string_length(b);
    return al < bl ? 1 : bl < al ? -1 : _b_(al, a, b);
   }
   function one_if_not_zero(n){
    var n$0 = - n | 0 | n;
    return n$0 >>> (Stdlib_Sys[10] - 1 | 0) | 0;
   }
   function zero_if_not_zero(n){return one_if_not_zero(n) - 1 | 0;}
   function select_int(choose_b, a, b){
    var mask = (- choose_b | 0 | choose_b) >> Stdlib_Sys[10];
    return a & caml_call1(Stdlib[21], mask) | b & mask;
   }
   function bool_of_int(n){return one_if_not_zero(n);}
   function find_uint8(opt, f, str){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var
     len = caml_ml_string_length(str),
     i = [0, len - 1 | 0],
     a = [0, caml_call1(Stdlib[21], 0)];
    for(;;){
     if(off > i[1]) return a[1];
     var
      byte$0 = caml_string_unsafe_get(str, i[1]),
      pred = caml_call1(f, byte$0);
     a[1] = select_int((i[1] - off | 0) & Stdlib[20] | pred, a[1], i[1]);
     i[1] += -1;
    }
   }
   function exists_uint8(off, f, str){
    var v = find_uint8(off, f, str), r = select_int(v + 1 | 0, 0, 1);
    return r;
   }
   function divmod(x, m){
    if(runtime.caml_lessequal(m, 0))
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_m_0], 1);
    if(runtime.caml_greaterequal(m, 16348))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_m_16348_not_supported], 1);
    function of_uint32(uint){
     var b = caml_call2(Stdlib_Bytes[1], 8, 0);
     caml_call3(Eqaf_Unsafe[1], b, 0, uint);
     return caml_call2(Eqaf_Unsafe[2], b, 0);
    }
    var n = Stdlib_Int32[10], min_int = Stdlib_Int32[10];
    function int32_unsigned_compare(n, m){
     return caml_call2(Stdlib_Int32[15], n - min_int | 0, m - min_int | 0);
    }
    if(runtime.caml_lessthan(m, 0))
     var _i_ = 0 <= int32_unsigned_compare(n, m) ? 1 : 0;
    else
     var
      q = runtime.caml_div(n >>> 1 | 0, m) << 1,
      r = n - caml_mul(q, m) | 0,
      _i_ =
        0 <= int32_unsigned_compare(r, m) ? caml_call1(Stdlib_Int32[6], q) : q;
    var
     v = of_uint32(_i_),
     qpart_0 =
       caml_int64_to_int32
        (caml_int64_shift_right_unsigne(caml_int64_mul(of_uint32(x), v), 31)),
     x_1 = x - caml_mul(qpart_0, m) | 0,
     qpart_1 =
       caml_int64_to_int32
        (caml_int64_shift_right_unsigne(caml_int64_mul(of_uint32(x_1), v), 31)),
     q_1 = (qpart_0 + qpart_1 | 0) + 1 | 0,
     x_2 = x_1 - caml_mul(qpart_1, m) | 0,
     x_3 = x_2 - m | 0,
     mask = 0 - (x_3 >>> 31 | 0) | 0;
    return [0, q_1 + mask | 0, x_3 + (mask & m) | 0];
   }
   function ascii_of_int32(digits, n){
    if(digits < 0)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_digits_0], 1);
    var
     out = caml_call2(Stdlib_Bytes[1], digits, 48),
     idx$1 = digits - 1 | 0,
     x = n,
     idx = idx$1;
    for(;;){
     if(-1 === idx) return caml_call1(Stdlib_Bytes[44], out);
     var match = divmod(x, 10), this$0 = match[2], next = match[1];
     runtime.caml_bytes_set(out, idx, (48 | this$0) & 255);
     var idx$0 = idx - 1 | 0, x = next, idx = idx$0;
    }
   }
   function hex_of_string(rawbytes){
    function _h_(idx){
     var
      byt = caml_string_get(rawbytes, idx >>> 1 | 0),
      nib = 15 & (byt >>> ((caml_call1(Stdlib[21], idx) & 1) << 2) | 0),
      a = 86 + nib | 0,
      c = 1 + (a - (71 * ((a & 16) >>> 4 | 0) | 0) | 0 | 32) | 0;
     return c & 255;
    }
    return caml_call2
            (Stdlib_String[2], 2 * caml_ml_string_length(rawbytes) | 0, _h_);
   }
   function hex_of_bytes(rawbytes){
    return hex_of_string(caml_call1(Stdlib_Bytes[44], rawbytes));
   }
   function select_a_if_in_range(low, high, n, a, b){
    var out_of_range = (n - low | 0 | high - n | 0) & Stdlib[20];
    return select_int(out_of_range, a, b);
   }
   function lowercase_ascii(src){
    function _g_(ch){
     return select_a_if_in_range(65, 90, ch, ch | 32, ch) & 255;
    }
    return caml_call2(Stdlib_String[18], _g_, src);
   }
   function uppercase_ascii(src){
    function _f_(ch){
     return select_a_if_in_range(97, 122, ch, ch ^ 32, ch) & 255;
    }
    return caml_call2(Stdlib_String[18], _f_, src);
   }
   function bytes_of_hex(rawhex){
    var error_bitmap = [0, (caml_ml_string_length(rawhex) & 1) << 4];
    function _d_(idx){
     var idx$0 = idx << 1;
     function nib(idx){
      var
       n = caml_string_get(rawhex, idx),
       n$0 = select_a_if_in_range(65, 90, n, n | 32, n);
      return select_a_if_in_range
              (48,
               57,
               n$0,
               n$0 - 48 | 0,
               select_a_if_in_range
                (97, 102, n$0, (n$0 - 97 | 0) + 10 | 0, 255));
     }
     var nibf0 = nib(idx$0), nib0f = nib(idx$0 + 1 | 0);
     error_bitmap[1] = error_bitmap[1] | nibf0 | nib0f;
     return (nibf0 << 4 | nib0f) & 255;
    }
    var
     decoded =
       caml_call2
        (Stdlib_Bytes[2], caml_ml_string_length(rawhex) >>> 1 | 0, _d_),
     _e_ = caml_call1(Stdlib[21], 15);
    return [0, decoded, error_bitmap[1] & _e_];
   }
   function string_of_hex(rawhex){
    var match = bytes_of_hex(rawhex), error = match[2], byt = match[1];
    return [0, caml_call1(Stdlib_Bytes[44], byt), error];
   }
   var
    Eqaf =
      [0,
       equal,
       compare_be,
       compare_be_with_len,
       compare_le,
       compare_le_with_len,
       divmod,
       find_uint8,
       exists_uint8,
       ascii_of_int32,
       lowercase_ascii,
       uppercase_ascii,
       hex_of_bytes,
       hex_of_string,
       bytes_of_hex,
       string_of_hex,
       one_if_not_zero,
       zero_if_not_zero,
       function(_c_){return _c_;},
       bool_of_int,
       select_int,
       select_a_if_in_range];
   runtime.caml_register_global(19, Eqaf, "Eqaf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
