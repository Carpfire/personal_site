// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_quickcheck__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_quickcheck = [0],
    Async_quickcheck$0 = [0, Async_quickcheck];
   runtime.caml_register_global(0, Async_quickcheck$0, "Async_quickcheck__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_quickcheck__Async_quickcheck_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_quickcheck_Async_qui = "Async_quickcheck__Async_quickcheck_intf",
    cst_async_quickcheck = "async_quickcheck";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_quickcheck_Async_qui);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_quickcheck);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "async_quickcheck/src/async_quickcheck_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_quickcheck, "async_quickcheck_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_quickcheck);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_quickcheck_Async_qui);
   var Async_quickcheck_Async_quickch = [0];
   runtime.caml_register_global
    (11, Async_quickcheck_Async_quickch, cst_Async_quickcheck_Async_qui);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_quickcheck
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Core__Error, Core__Int, Core__Option, Core__Quickcheck, Core__Sequence, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_quickcheck$0 = "Async_quickcheck",
    cst_async_quickcheck$0 = "async_quickcheck";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Error = global_data.Core__Error,
    Core_Int = global_data.Core__Int,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Sequence = global_data.Core__Sequence,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_quickcheck$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_quickcheck$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "async_quickcheck/src/async_quickcheck.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_quickcheck$0, "async_quickcheck.ml");
   var
    _g_ = [0, 0],
    _d_ = [0, -146189108],
    _e_ = [0, 3903734],
    _f_ = [0, 1],
    cst_random_input = "random input",
    _a_ = [0, -146189108],
    _b_ = [0, 3903734],
    _c_ = [0, 1],
    cst_async_quickcheck = cst_async_quickcheck$0,
    cst_Async_quickcheck = cst_Async_quickcheck$0;
   function Configure(Config){
    var
     include = caml_call1(Core_Quickcheck[17], Config),
     default_seed = include[1],
     default_sizes = include[2],
     default_trial_count = include[3],
     default_can_generate_trial_cou = include[4],
     default_shrink_attempts = include[5],
     random_value = include[6],
     iter = include[7],
     test = include[8],
     test_or_error = include[9],
     test_can_generate = include[10],
     test_distinct_values = include[11],
     random_sequence = include[12];
    function shrink_error(shrinker, shrink_count, f, input, error){
     function loop(shrink_count, alternates, input, error){
      if(0 === shrink_count)
       return caml_call1(Async_kernel[20], [0, input, error]);
      var
       shrink_count$0 = shrink_count - 1 | 0,
       match = caml_call1(Core_Sequence[50], alternates);
      if(! match) return caml_call1(Async_kernel[20], [0, input, error]);
      var
       match$0 = match[1],
       alternates$0 = match$0[2],
       alternate = match$0[1];
      function _G_(param){
       if(0 === param[0])
        return loop(shrink_count$0, alternates$0, input, error);
       var
        error$0 = param[1],
        alternates = caml_call2(Core_Quickcheck[3][1], shrinker, alternate);
       return loop(shrink_count$0, alternates, alternate, error$0);
      }
      var _H_ = caml_call1(f, alternate);
      return caml_call2(Async_kernel[23][2], _H_, _G_);
     }
     var alternates = caml_call2(Core_Quickcheck[3][1], shrinker, input);
     return loop(shrink_count, alternates, input, error);
    }
    function test_cases(seed, sizes, examples, trials, quickcheck_generator){
     var
      _D_ = caml_call3(random_sequence, seed, sizes, quickcheck_generator),
      _E_ = caml_call2(Core_Sequence[90], _D_, trials),
      _F_ = caml_call1(Core_Sequence[111], examples);
     return caml_call2(Core_Sequence[71], _F_, _E_);
    }
    function failing_case(test_cases, f){
     function _z_(param){return caml_call1(Async_kernel[20], 0);}
     function _A_(param, x, k){
      function _B_(param){
       if(0 === param[0]) return caml_call1(k, 0);
       var error = param[1];
       return caml_call1(Async_kernel[20], [0, [0, x, error]]);
      }
      var _C_ = caml_call1(f, x);
      return caml_call2(Async_kernel[23][2], _C_, _B_);
     }
     return caml_call4(Core_Sequence[107], test_cases, 0, _A_, _z_);
    }
    function shrunken_case(shrinker, failing_case, shrink_attempts, f){
     if(! shrinker) return caml_call1(Async_kernel[20], failing_case);
     var shrinker$0 = shrinker[1];
     if(typeof shrink_attempts === "number")
      var shrink_count = Core_Int[45];
     else
      var n = shrink_attempts[2], shrink_count = n;
     if(! failing_case) return caml_call1(Async_kernel[20], 0);
     var
      match = failing_case[1],
      error = match[2],
      input = match[1],
      _x_ = Core_Option[58],
      _y_ = shrink_error(shrinker$0, shrink_count, f, input, error);
     return caml_call2(Async_kernel_Deferred[17][2], _y_, _x_);
    }
    function async_test
    (seed, sizes, opt, shrinker, _r_, sexp_of, _q_, quickcheck_generator, f){
     if(opt)
      var sth = opt[1], trials = sth;
     else
      var trials = default_trial_count;
     if(_r_)
      var sth$0 = _r_[1], shrink_attempts = sth$0;
     else
      var shrink_attempts = default_shrink_attempts;
     if(_q_) var sth$1 = _q_[1], examples = sth$1; else var examples = 0;
     function f$0(x){
      function _w_(param){return caml_call1(f, x);}
      return caml_call6
              (Async_kernel_Deferred_or_error[38], _c_, _b_, _a_, 0, 0, _w_);
     }
     var
      test_cases$0 =
        test_cases(seed, sizes, examples, trials, quickcheck_generator);
     function _s_(failing_case){
      function _u_(shrunken_case){
       if(! shrunken_case) return 0;
       var match = shrunken_case[1], error = match[2], input = match[1];
       if(sexp_of)
        var
         sexp_of_arg = sexp_of[1],
         tagged_error =
           caml_call4
            (Core_Error[25], error, cst_random_input, input, sexp_of_arg);
       else
        var tagged_error = error;
       return caml_call1(Core_Error[30], tagged_error);
      }
      var _v_ = shrunken_case(shrinker, failing_case, shrink_attempts, f$0);
      return caml_call2(Async_kernel[23][3], _v_, _u_);
     }
     var _t_ = failing_case(test_cases$0, f$0);
     return caml_call2(Async_kernel[23][2], _t_, _s_);
    }
    function async_test_or_error
    (seed, sizes, opt, shrinker, _k_, _j_, quickcheck_generator, f){
     if(opt)
      var sth = opt[1], trials = sth;
     else
      var trials = default_trial_count;
     if(_k_)
      var sth$0 = _k_[1], shrink_attempts = sth$0;
     else
      var shrink_attempts = default_shrink_attempts;
     if(_j_) var sth$1 = _j_[1], examples = sth$1; else var examples = 0;
     function f$0(x){
      function _p_(param){return caml_call1(f, x);}
      return caml_call6
              (Async_kernel_Deferred_or_error[39], _f_, _e_, _d_, 0, 0, _p_);
     }
     var
      test_cases$0 =
        test_cases(seed, sizes, examples, trials, quickcheck_generator);
     function _l_(failing_case){
      function _n_(shrunken_case){
       if(! shrunken_case) return _g_;
       var match = shrunken_case[1], error = match[2], input = match[1];
       return [1, [0, input, error]];
      }
      var _o_ = shrunken_case(shrinker, failing_case, shrink_attempts, f$0);
      return caml_call2(Async_kernel[23][3], _o_, _n_);
     }
     var _m_ = failing_case(test_cases$0, f$0);
     return caml_call2(Async_kernel[23][2], _m_, _l_);
    }
    return [0,
            default_seed,
            default_sizes,
            default_trial_count,
            default_can_generate_trial_cou,
            default_shrink_attempts,
            random_value,
            iter,
            test,
            test_or_error,
            test_can_generate,
            test_distinct_values,
            random_sequence,
            ,
            ,
            ,
            ,
            async_test,
            async_test_or_error];
   }
   var
    include =
      Configure
       ([0,
         Core_Quickcheck[5],
         Core_Quickcheck[6],
         Core_Quickcheck[7],
         Core_Quickcheck[8],
         Core_Quickcheck[9]]),
    default_seed = include[1],
    default_sizes = include[2],
    default_trial_count = include[3],
    default_can_generate_trial_cou = include[4],
    default_shrink_attempts = include[5],
    random_value = include[6],
    iter = include[7],
    test = include[8],
    test_or_error = include[9],
    test_can_generate = include[10],
    test_distinct_values = include[11],
    random_sequence = include[12],
    async_test = include[17],
    async_test_or_error = include[18];
   caml_call1(Ppx_inline_test_lib[7], cst_async_quickcheck);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_quickcheck);
   var
    Async_quickcheck =
      [0,
       default_seed,
       default_sizes,
       default_trial_count,
       default_can_generate_trial_cou,
       default_shrink_attempts,
       random_value,
       iter,
       test,
       test_or_error,
       test_can_generate,
       test_distinct_values,
       random_sequence,
       async_test,
       async_test_or_error,
       function(_h_){
        var _i_ = Configure(_h_);
        return [0,
                _i_[1],
                _i_[2],
                _i_[3],
                _i_[4],
                _i_[5],
                _i_[6],
                _i_[7],
                _i_[8],
                _i_[9],
                _i_[10],
                _i_[11],
                _i_[12],
                _i_[17],
                _i_[18]];
       }];
   runtime.caml_register_global(27, Async_quickcheck, cst_Async_quickcheck$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
