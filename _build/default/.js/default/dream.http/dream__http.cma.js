// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream__http
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_http = [0];
   runtime.caml_register_global(0, Dream_http, "Dream__http");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__http__Adapt
//# unitInfo: Requires: Dream_h2__H2, Dream_httpaf___Httpaf, Dream_pure__Message, Dream_pure__Stream, Stdlib__Printf, Unix
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_h2_H2 = global_data.Dream_h2__H2,
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Unix = global_data.Unix,
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ = [0, [2, 0, [12, 58, [4, 3, 0, 0, 0]]], "%s:%i"];
   function address_to_string(param){
    if(0 === param[0]){var path = param[1]; return path;}
    var
     port = param[2],
     address = param[1],
     _h_ = caml_call1(Unix[127], address);
    return caml_call3(Stdlib_Printf[4], _a_, _h_, port);
   }
   function forward_body_general
   (response, write_string, write_buffer, http_flush, close){
    function abort(exn){return caml_call1(close, 1000);}
    var bytes_since_flush = [0, 0];
    function send(param){
     var stream = caml_call1(Dream_pure_Message[27], response);
     return caml_call7
             (Dream_pure_Stream[12],
              stream,
              data,
              flush,
              ping,
              pong,
              close,
              abort);
    }
    function data(chunk, off, len, binary, fin){
     caml_call3(write_buffer, [0, off], [0, len], chunk);
     bytes_since_flush[1] = bytes_since_flush[1] + len | 0;
     return 4096 <= bytes_since_flush[1]
             ? (bytes_since_flush[1] = 0, caml_call1(http_flush, send))
             : send(0);
    }
    function flush(param){
     bytes_since_flush[1] = 0;
     return caml_call1(http_flush, send);
    }
    function ping(buffer, offset, length){return send(0);}
    function pong(buffer, offset, length){return send(0);}
    return send(0);
   }
   function forward_body(response, body){
    function _e_(code){return caml_call1(Dream_httpaf_Httpaf[5][2][6], body);}
    var
     _f_ = caml_call1(Dream_httpaf_Httpaf[5][2][5], body),
     _g_ = caml_call1(Dream_httpaf_Httpaf[5][2][3], body);
    return forward_body_general
            (response,
             caml_call1(Dream_httpaf_Httpaf[5][2][2], body),
             _g_,
             _f_,
             _e_);
   }
   function forward_body_h2(response, body){
    function _b_(code){return caml_call1(Dream_h2_H2[4][2][6], body);}
    var
     _c_ = caml_call1(Dream_h2_H2[4][2][5], body),
     _d_ = caml_call1(Dream_h2_H2[4][2][3], body);
    return forward_body_general
            (response, caml_call1(Dream_h2_H2[4][2][2], body), _d_, _c_, _b_);
   }
   var
    Dream_http_Adapt =
      [0,
       address_to_string,
       forward_body_general,
       forward_body,
       forward_body_h2];
   runtime.caml_register_global(7, Dream_http_Adapt, "Dream__http__Adapt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__http__Error_handler
//# unitInfo: Requires: Dream__http__Adapt, Dream__server__Error_template, Dream__server__Helpers, Dream__server__Log, Dream_h2__H2, Dream_httpaf___Httpaf, Dream_pure__Formats, Dream_pure__Message, Dream_pure__Method, Dream_pure__Status, Dream_pure__Stream, Dream_websocketaf__Websocketaf, Lwt, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst$6 = "\n",
    cst_s_s = "\n%s: %s",
    cst_s = "%s",
    cst_s$0 = "%s\n",
    cst_Library_error_without_desc =
      "(Library error without description payload)\n",
    cst$5 = ": ",
    cst_Bad_request = "Bad request",
    cst_Content_Length_missing_or_ = "Content-Length missing or negative",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ")",
    cst$0 = " (",
    cst$3 = cst$4,
    cst$2 = cst$4,
    cst$1 = cst$5,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Lwt = global_data.Lwt,
    Dream_websocketaf_Websocketaf = global_data.Dream_websocketaf__Websocketaf,
    Dream_http_Adapt = global_data.Dream__http__Adapt,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_h2_H2 = global_data.Dream_h2__H2,
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Dream_server_Log = global_data.Dream__server__Log,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_server_Error_template = global_data.Dream__server__Error_template,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Dream_pure_Method = global_data.Dream_pure__Method,
    Stdlib_List = global_data.Stdlib__List,
    log = caml_call2(Dream_server_Log[19], 0, "dream.http"),
    _y_ = [0, -976970511, cst_Bad_request],
    _z_ = [0, -976970511, cst_Content_Length_missing_or_],
    _x_ = [0, -976970511, cst_Bad_request],
    _w_ = [0, -976970511, cst_Content_Length_missing_or_],
    _u_ = [0, -949323947],
    _v_ = [0, 798549870],
    _t_ = [0, 798549870],
    _s_ = [0, 798549870],
    _r_ = [0, [2, 0, 0], cst_s],
    _q_ =
      [0,
       [11, "Error handler raised: ", [2, 0, 0]],
       "Error handler raised: %s"],
    cst_Content_Type = "Content-Type",
    _p_ = [0, [2, 0, 0], cst_s],
    _o_ = [0, [2, 0, 0], cst_s],
    cst_HTTP = "HTTP",
    cst_HTTP_2 = "HTTP/2",
    cst_WebSocket = "WebSocket",
    cst_TLS = "TLS",
    _i_ = [0, [12, 10, 0], cst$6],
    _j_ = [0, [12, 10, [2, 0, [11, cst$5, [2, 0, 0]]]], cst_s_s],
    _h_ = [0, [12, 10, [2, 0, [11, cst$5, [2, 0, 0]]]], cst_s_s],
    _k_ = [0, [2, 0, [12, 10, 0]], cst_s$0],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s$0],
    _n_ =
      [0,
       [11, cst_Library_error_without_desc, 0],
       cst_Library_error_without_desc],
    _m_ = [0, [2, 0, [12, 10, 0]], cst_s$0],
    _a_ = [0, [4, 3, 0, 0, [12, 32, [2, 0, [12, 10, 0]]]], "%i %s\n"],
    _b_ = [0, [12, 10, 0], cst$6],
    cst_HTTP_library = "HTTP library",
    cst_HTTP2_library = "HTTP2 library",
    cst_WebSocket_library = "WebSocket library",
    cst_Application = "Application",
    cst_TLS_library = "TLS library",
    cst_Client = "Client",
    cst_Server = "Server",
    cst_Info = "Info",
    cst_Error = "Error",
    cst_Debug = "Debug",
    cst_Warning = "Warning",
    _c_ = [0, [11, "From: ", [2, 0, [12, 10, 0]]], "From: %s\n"],
    _d_ = [0, [11, "Blame: ", [2, 0, [12, 10, 0]]], "Blame: %s\n"],
    _e_ = [0, [11, "Severity: ", [2, 0, 0]], "Severity: %s"],
    _f_ = [0, [11, "\n\nClient: ", [2, 0, 0]], "\n\nClient: %s"],
    _g_ = [0, [11, "\n\n", [2, 0, [12, 32, [2, 0, 0]]]], "\n\n%s %s"];
   function select_log(param){
    return 106380200 <= param
            ? 815031438 <= param ? log[3] : log[1]
            : -364068301 <= param ? log[4] : log[2];
   }
   function customize(template, error){
    var condition = error[1];
    if(-71406943 !== condition[1]){
     var match$3 = error[6];
     if(match$3)
      var
       client$0 = match$3[1],
       _at_ = caml_call2(Stdlib[28], client$0, cst),
       client$1 = caml_call2(Stdlib[28], cst$0, _at_);
     else
      var client$1 = cst$3;
     var
      _au_ = error[2],
      layer$0 =
        4194267 === _au_
         ? [0, caml_call2(Stdlib[28], cst_TLS, client$1), 0]
         : 748663722
           <= _au_
           ? 802644872
             <= _au_
             ? [0, caml_call2(Stdlib[28], cst_HTTP, client$1), 0]
             : [0, caml_call2(Stdlib[28], cst_HTTP_2, client$1), 0]
           : 117713735
             <= _au_
             ? [0, caml_call2(Stdlib[28], cst_WebSocket, client$1), 0]
             : 0;
     if(3458171 <= condition[1])
      var
       exn$0 = condition[2],
       backtrace$0 = caml_call1(Stdlib_Printexc[6], 0),
       backtrace$1 = backtrace$0,
       description = caml_call1(Stdlib_Printexc[1], exn$0);
     else
      var
       string$0 = condition[2],
       backtrace$1 = cst$2,
       description = string$0;
     var
      _av_ = caml_call2(Stdlib[37], layer$0, [0, description, 0]),
      message = caml_call2(Stdlib_String[7], cst$1, _av_),
      _aw_ = function(log){return caml_call3(log, error[4], _o_, message);};
     caml_call1(select_log(error[7]), _aw_);
     var
      _ax_ =
        function(line){
         function _ay_(log){return caml_call3(log, error[4], _p_, line);}
         return caml_call1(select_log(error[7]), _ay_);
        };
     caml_call1(caml_call1(Dream_server_Log[21], _ax_), backtrace$1);
    }
    if(! error[8]) return Lwt[37];
    var buffer = caml_call1(Stdlib_Buffer[1], 4096);
    function p(format){return caml_call2(Stdlib_Printf[5], buffer, format);}
    var match = error[1], _ad_ = match[1];
    if(-71406943 === _ad_){
     var
      response = match[2],
      status = caml_call1(Dream_pure_Message[7], response),
      _ae_ = caml_call1(Dream_pure_Status[9], status),
      _af_ = caml_call1(Dream_pure_Status[6], status);
     caml_call2(p(_a_), _af_, _ae_);
    }
    else if(3458171 <= _ad_){
     var
      exn = match[2],
      backtrace = caml_call1(Stdlib_Printexc[6], 0),
      _ap_ = caml_call1(Stdlib_Printexc[1], exn);
     caml_call1(p(_k_), _ap_);
     var _aq_ = p(_l_);
     caml_call1(caml_call1(Dream_server_Log[21], _aq_), backtrace);
    }
    else{
     var string = match[2];
     if(runtime.caml_string_notequal(string, cst$4))
      caml_call1(p(_m_), string);
     else
      p(_n_);
    }
    p(_b_);
    var
     _ag_ = error[2],
     layer =
       4194267 === _ag_
        ? cst_TLS_library
        : 748663722
          <= _ag_
          ? 802644872 <= _ag_ ? cst_HTTP_library : cst_HTTP2_library
          : 117713735 <= _ag_ ? cst_WebSocket_library : cst_Application,
     blame = 1055145579 <= error[3] ? cst_Client : cst_Server,
     _ah_ = error[7],
     severity =
       106380200 <= _ah_
        ? 815031438 <= _ah_ ? cst_Info : cst_Error
        : -364068301 <= _ah_ ? cst_Debug : cst_Warning;
    caml_call1(p(_c_), layer);
    caml_call1(p(_d_), blame);
    caml_call1(p(_e_), severity);
    var match$0 = error[6];
    if(match$0){var client = match$0[1]; caml_call1(p(_f_), client);}
    var match$1 = error[4];
    if(match$1){
     var
      request = match$1[1],
      _ai_ = caml_call1(Dream_pure_Message[3], request),
      _aj_ = caml_call1(Dream_pure_Message[2], request),
      _ak_ = caml_call1(Dream_pure_Method[1], _aj_);
     caml_call2(p(_g_), _ak_, _ai_);
     var
      _al_ = caml_call1(Dream_pure_Message[11], request),
      _am_ =
        function(param){
         var value = param[2], name = param[1];
         return caml_call2(p(_h_), name, value);
        };
     caml_call1(caml_call1(Stdlib_List[18], _am_), _al_);
     var
      _an_ = 1,
      _ao_ =
        function(name, value, first){
         if(first) p(_i_);
         caml_call2(p(_j_), name, value);
         return 0;
        };
     caml_call3(Dream_pure_Message[42], _ao_, _an_, request);
    }
    var debug_dump = caml_call1(Stdlib_Buffer[2], buffer), match$2 = error[1];
    a:
    {
     if(typeof match$2 !== "number" && -71406943 === match$2[1]){
      var response$1 = match$2[2], response$0 = response$1;
      break a;
     }
     var
      status$0 = 1055145579 <= error[3] ? -949323947 : 798549870,
      response$0 =
        caml_call5
         (Dream_pure_Message[6],
          [0, status$0],
          0,
          0,
          Dream_pure_Stream[8],
          Dream_pure_Stream[7]);
    }
    var ppx_lwt_0 = caml_call3(template, error, debug_dump, response$0);
    function _ar_(response){return caml_call1(Lwt[4], [0, response]);}
    function _as_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _as_, ppx_lwt_0, _ar_);
   }
   function default_template(error, debug_dump, response){return caml_call1(Lwt[4], response);
   }
   function debug_template(error, debug_dump, response){
    var
     status = caml_call1(Dream_pure_Message[7], response),
     code = caml_call1(Dream_pure_Status[6], status),
     reason = caml_call1(Dream_pure_Status[9], status);
    caml_call3
     (Dream_pure_Message[15],
      response,
      cst_Content_Type,
      Dream_pure_Formats[13]);
    var
     _ac_ =
       caml_call3(Dream_server_Error_template[2], debug_dump, code, reason);
    caml_call2(Dream_pure_Message[20], response, _ac_);
    return caml_call1(Lwt[4], response);
   }
   function default$0(_ab_){return customize(default_template, _ab_);}
   function debug_error_handler(_aa_){return customize(debug_template, _aa_);}
   function double_faults(f, default$0){
    function _Y_(exn){
     var backtrace = caml_call1(Stdlib_Printexc[6], 0);
     function _Z_(log){
      return caml_call3(log, 0, _q_, caml_call1(Stdlib_Printexc[1], exn));
     }
     caml_call1(log[1], _Z_);
     function ___(line){
      function _$_(log){return caml_call3(log, 0, _r_, line);}
      return caml_call1(log[1], _$_);
     }
     caml_call1(caml_call1(Dream_server_Log[21], ___), backtrace);
     return caml_call1(default$0, 0);
    }
    return caml_call2(Lwt[7], f, _Y_);
   }
   function respond_with_option(f){
    function _U_(param){
     var
      _X_ =
        caml_call5
         (Dream_pure_Message[6],
          _s_,
          0,
          0,
          Dream_pure_Stream[8],
          Dream_pure_Stream[7]);
     return caml_call1(Lwt[4], _X_);
    }
    return double_faults
            (function(param){
              var _V_ = caml_call1(f, 0);
              function _W_(param){
               if(! param)
                return caml_call5
                        (Dream_pure_Message[6],
                         _t_,
                         0,
                         0,
                         Dream_pure_Stream[8],
                         Dream_pure_Stream[7]);
               var response = param[1];
               return response;
              }
              return caml_call1(caml_call1(Lwt[28], _W_), _V_);
             },
             _U_);
   }
   function app(user_s_error_handler, error){
    return respond_with_option
            (function(param){return caml_call1(user_s_error_handler, error);});
   }
   function default_response(param){
    return 1055145579 <= param
            ? caml_call5
              (Dream_pure_Message[6],
               _u_,
               0,
               0,
               Dream_pure_Stream[8],
               Dream_pure_Stream[7])
            : caml_call5
              (Dream_pure_Message[6],
               _v_,
               0,
               0,
               Dream_pure_Stream[8],
               Dream_pure_Stream[7]);
   }
   function httpaf
   (user_s_error_handler, client_address, request, error, start_response){
    if(typeof error === "number")
     if(-732353682 === error)
      var caused_by = 583778019, severity = 106380200, condition = _w_;
     else
      var caused_by = 1055145579, severity = -685964740, condition = _x_;
    else
     var
      exn = error[2],
      condition$0 = [0, 3458171, exn],
      caused_by = 583778019,
      severity = 106380200,
      condition = condition$0;
    var
     error$0 =
       [0,
        condition,
        802644872,
        caused_by,
        0,
        0,
        [0, caml_call1(Dream_http_Adapt[1], client_address)],
        severity,
        1];
    function _P_(param){
     var _Q_ = Lwt[4];
     return double_faults
             (function(param){
               var ppx_lwt_0 = caml_call1(user_s_error_handler, error$0);
               function _R_(response){
                if(response)
                 var response$0 = response[1], response$1 = response$0;
                else
                 var response$1 = default_response(caused_by);
                var
                 _T_ = caml_call1(Dream_pure_Message[11], response$1),
                 headers = caml_call1(Dream_httpaf_Httpaf[4][2], _T_),
                 body = caml_call1(start_response, headers);
                caml_call2(Dream_http_Adapt[3], response$1, body);
                return Lwt[36];
               }
               function _S_(exn){
                try{throw caml_maybe_attach_backtrace(exn, 0);}
                catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;
                }
               }
               return caml_call3(Lwt[81], _S_, ppx_lwt_0, _R_);
              },
              _Q_);
    }
    return caml_call1(Lwt[11], _P_);
   }
   function h2
   (user_s_error_handler, client_address, request, error, start_response){
    if(typeof error === "number")
     if(-99004555 <= error)
      var caused_by = 1055145579, severity = -685964740, condition = _y_;
     else
      var caused_by = 583778019, severity = 106380200, condition = _z_;
    else
     var
      exn = error[2],
      condition$0 = [0, 3458171, exn],
      caused_by = 583778019,
      severity = 106380200,
      condition = condition$0;
    var
     error$0 =
       [0,
        condition,
        748663722,
        caused_by,
        0,
        0,
        [0, caml_call1(Dream_http_Adapt[1], client_address)],
        severity,
        1];
    function _K_(param){
     var _L_ = Lwt[4];
     return double_faults
             (function(param){
               var ppx_lwt_0 = caml_call1(user_s_error_handler, error$0);
               function _M_(response){
                if(response)
                 var response$0 = response[1], response$1 = response$0;
                else
                 var response$1 = default_response(caused_by);
                var
                 _O_ = caml_call1(Dream_pure_Message[11], response$1),
                 headers = caml_call1(Dream_h2_H2[3][2], _O_),
                 body = caml_call1(start_response, headers);
                caml_call2(Dream_http_Adapt[4], response$1, body);
                return Lwt[36];
               }
               function _N_(exn){
                try{throw caml_maybe_attach_backtrace(exn, 0);}
                catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;
                }
               }
               return caml_call3(Lwt[81], _N_, ppx_lwt_0, _M_);
              },
              _L_);
    }
    return caml_call1(Lwt[11], _K_);
   }
   function tls(user_s_error_handler, client_address, error){
    var
     error$0 =
       [0,
        [0, 3458171, error],
        4194267,
        1055145579,
        0,
        0,
        [0, caml_call1(Dream_http_Adapt[1], client_address)],
        -685964740,
        0];
    function _F_(param){
     var _G_ = Lwt[4];
     return double_faults
             (function(param){
               var _H_ = caml_call1(user_s_error_handler, error$0);
               function _I_(_J_){return 0;}
               return caml_call2(Lwt[28], _I_, _H_);
              },
              _G_);
    }
    return caml_call1(Lwt[11], _F_);
   }
   function websocket(user_s_error_handler, request, response, socket, error){
    caml_call2(Dream_websocketaf_Websocketaf[3][6], 0, socket);
    var
     exn = error[2],
     error$0 =
       [0,
        [0, 3458171, exn],
        117713735,
        583778019,
        [0, request],
        [0, response],
        [0, caml_call1(Dream_server_Helpers[2], request)],
        -685964740,
        0];
    function _A_(param){
     var _B_ = Lwt[4];
     return double_faults
             (function(param){
               var _C_ = caml_call1(user_s_error_handler, error$0);
               function _D_(_E_){return 0;}
               return caml_call2(Lwt[28], _D_, _C_);
              },
              _B_);
    }
    return caml_call1(Lwt[11], _A_);
   }
   function websocket_handshake
   (user_s_error_handler, request, response, error_string){
    var
     error =
       [0,
        [0, -976970511, error_string],
        117713735,
        1055145579,
        [0, request],
        [0, response],
        [0, caml_call1(Dream_server_Helpers[2], request)],
        -685964740,
        1];
    return respond_with_option
            (function(param){return caml_call1(user_s_error_handler, error);});
   }
   var
    Dream_http_Error_handler =
      [0,
       default$0,
       debug_error_handler,
       customize,
       app,
       httpaf,
       h2,
       tls,
       websocket,
       websocket_handshake,
       log];
   runtime.caml_register_global
    (68, Dream_http_Error_handler, "Dream__http__Error_handler");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__http__Http
//# unitInfo: Requires: Digestif, Dream__certificate, Dream__http__Adapt, Dream__http__Error_handler, Dream__server__Catch, Dream__server__Helpers, Dream__server__Log, Dream_gluten__Gluten, Dream_gluten_lwt_unix__Gluten_lwt_unix, Dream_h2__H2, Dream_h2_lwt_unix__H2_lwt_unix, Dream_httpaf__Websocket, Dream_httpaf___Httpaf, Dream_httpaf__lwt_unix__Httpaf_lwt_unix, Dream_pure__Message, Dream_pure__Method, Dream_pure__Status, Dream_pure__Stream, Dream_websocketaf__Websocketaf, Lwt, Lwt_io, Lwt_main, Lwt_ssl, Lwt_unix, Ssl, Stdlib, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_127_0_0_1 = "127.0.0.1",
    cst_localhost = "://localhost:",
    cst_A_response_header_is_empty =
      "A response header is empty or contains only whitespace",
    cst_Dream = "Dream.",
    cst_Dream_run_adjust_terminal_ =
      "Dream.run: ~adjust_terminal is deprecated",
    cst_In_memory_certificates_wil =
      "In-memory certificates will be written to temporary files",
    cst_Running_on = "Running on ",
    cst_See_arguments_certificate_ =
      "See arguments ~certificate_file and ~key_file",
    cst_Type_Ctrl_C_to_stop = "Type Ctrl+C to stop",
    cst_Using_a_development_SSL_ce =
      "Using a development SSL certificate on a public interface",
    cst_h2 = "h2",
    cst_http_1_1 = "http/1.1",
    cst_localhost$0 = "localhost",
    cst_src_http_http_ml = "src/http/http.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    default_interface = cst_localhost$0,
    Dream_http_Error_handler = global_data.Dream__http__Error_handler,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Dream_server_Log = global_data.Dream__server__Log,
    Lwt_main = global_data.Lwt_main,
    Lwt_io = global_data.Lwt_io,
    Lwt = global_data.Lwt,
    Dream_certificate = global_data.Dream__certificate,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt_unix = global_data.Lwt_unix,
    Dream_server_Catch = global_data.Dream__server__Catch,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Dream_httpaf_lwt_unix_Httpaf_l =
      global_data.Dream_httpaf__lwt_unix__Httpaf_lwt_unix,
    Lwt_ssl = global_data.Lwt_ssl,
    Ssl = global_data.Ssl,
    Assert_failure = global_data.Assert_failure,
    Dream_h2_lwt_unix_H2_lwt_unix = global_data.Dream_h2_lwt_unix__H2_lwt_unix,
    Dream_gluten_lwt_unix_Gluten_l =
      global_data.Dream_gluten_lwt_unix__Gluten_lwt_unix,
    Dream_h2_H2 = global_data.Dream_h2__H2,
    Dream_http_Adapt = global_data.Dream__http__Adapt,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Dream_httpaf_Websocket = global_data.Dream_httpaf__Websocket,
    Dream_websocketaf_Websocketaf = global_data.Dream_websocketaf__Websocketaf,
    Dream_gluten_Gluten = global_data.Dream_gluten__Gluten,
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Digestif = global_data.Digestif,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Dream_pure_Method = global_data.Dream_pure__Method,
    _m_ =
      [0,
       [11, cst_Dream_run_adjust_terminal_, 0],
       cst_Dream_run_adjust_terminal_],
    cst_https = "https",
    cst_http = "http",
    _n_ = [0, [11, cst_Running_on, [2, 0, 0]], "Running on %s"],
    _q_ =
      [0,
       [11, "Running at ", [2, 0, [11, cst_localhost, [4, 3, 0, 0, 0]]]],
       "Running at %s://localhost:%i"],
    _p_ =
      [0,
       [11,
        cst_Running_on,
        [2,
         0,
         [12,
          58,
          [4,
           3,
           0,
           0,
           [11, " (", [2, 0, [11, cst_localhost, [4, 3, 0, 0, [12, 41, 0]]]]]]]]],
       "Running on %s:%i (%s://localhost:%i)"],
    _o_ = [0, [11, cst_Type_Ctrl_C_to_stop, 0], cst_Type_Ctrl_C_to_stop],
    cst_run = "run",
    cst_serve = "serve",
    _i_ = [0, [11, "Writing key to ", [2, 0, 0]], "Writing key to %s"],
    _h_ =
      [0,
       [11, "Writing certificate to ", [2, 0, 0]],
       "Writing certificate to %s"],
    _l_ =
      [0,
       [11, cst_See_arguments_certificate_, 0],
       cst_See_arguments_certificate_],
    _k_ =
      [0,
       [11, cst_Using_a_development_SSL_ce, 0],
       cst_Using_a_development_SSL_ce],
    _j_ =
      [0,
       [11, cst_In_memory_certificates_wil, 0],
       cst_In_memory_certificates_wil],
    cst_Must_specify_exactly_one_p =
      "Must specify exactly one pair of certificate and key",
    _g_ = [0, [2, 0, 0], "%s"],
    _f_ =
      [0,
       [11, cst_Dream, [2, 0, [11, ": exception ", [2, 0, 0]]]],
       "Dream.%s: exception %s"],
    _e_ =
      [0,
       [11,
        cst_Dream,
        [2, 0, [11, ": no interface with address ", [2, 0, 0]]]],
       "Dream.%s: no interface with address %s"],
    _d_ =
      [0,
       [11, cst_A_response_header_is_empty, 0],
       cst_A_response_header_is_empty],
    _b_ = [0, cst_src_http_http_ml, 366, 10],
    _c_ = [0, cst_src_http_http_ml, 346, 8],
    _a_ = [0, [0, cst_h2, [0, cst_http_1_1, 0]]],
    cst_dream_websocket = "dream.websocket";
   function to_dream_method(method){
    var _bc_ = caml_call1(Dream_httpaf_Httpaf[2][4], method);
    return caml_call1(Dream_pure_Method[2], _bc_);
   }
   function to_httpaf_status(status){
    var _bb_ = caml_call1(Dream_pure_Status[6], status);
    return caml_call1(Dream_httpaf_Httpaf[3][3], _bb_);
   }
   function to_h2_status(status){
    var _ba_ = caml_call1(Dream_pure_Status[6], status);
    return caml_call1(Dream_h2_H2[2][3], _ba_);
   }
   function sha1(s){
    var _a$_ = caml_call3(Digestif[2][12], 0, 0, s);
    return caml_call1(Digestif[2][39], _a$_);
   }
   var
    websocket_log = caml_call2(Dream_server_Log[19], 0, cst_dream_websocket);
   function wrap_handler(tls, user_s_error_handler, user_s_dream_handler){
    function httpaf_request_handler(client_address, conn){
     caml_call1(Dream_server_Log[23], 0);
     var
      upgrade = conn[2],
      conn$0 = conn[1],
      httpaf_request = caml_call1(Dream_httpaf_Httpaf[9][1], conn$0),
      client = caml_call1(Dream_http_Adapt[1], client_address),
      method = to_dream_method(httpaf_request[1]),
      target = httpaf_request[2],
      headers = caml_call1(Dream_httpaf_Httpaf[4][4], httpaf_request[4]),
      body = caml_call1(Dream_httpaf_Httpaf[9][2], conn$0);
     function read(data, param, _a8_, _a7_, close, _a6_){
      function _a9_(buffer, off, len){
       return caml_call5(data, buffer, off, len, 1, 0);
      }
      function _a__(param){return caml_call1(close, 1000);}
      return caml_call3(Dream_httpaf_Httpaf[5][1][1], body, _a__, _a9_);
     }
     function close(code){
      return caml_call1(Dream_httpaf_Httpaf[5][1][2], body);
     }
     var
      body$0 = caml_call3(Dream_pure_Stream[1], read, close, close),
      body$1 = caml_call2(Dream_pure_Stream[6], body$0, Dream_pure_Stream[5]),
      request =
        caml_call6
         (Dream_server_Helpers[7],
          client,
          method,
          target,
          tls,
          headers,
          body$1);
     function _aU_(param){
      function _aV_(exn){
       caml_call2(Dream_httpaf_Httpaf[9][10], conn$0, exn);
       return Lwt[36];
      }
      function _aW_(param){
       var ppx_lwt_0 = caml_call1(user_s_dream_handler, request);
       function _aX_(response){
        function forward_response(response){
         caml_call1(Dream_pure_Message[21], response);
         var
          _a5_ = caml_call1(Dream_pure_Message[11], response),
          headers = caml_call1(Dream_httpaf_Httpaf[4][2], _a5_),
          status =
            to_httpaf_status(caml_call1(Dream_pure_Message[7], response)),
          httpaf_response =
            caml_call4(Dream_httpaf_Httpaf[7][1], 0, 0, [0, headers], status),
          body =
            caml_call3(Dream_httpaf_Httpaf[9][7], 0, conn$0, httpaf_response);
         caml_call2(Dream_http_Adapt[3], response, body);
         return Lwt[36];
        }
        var match = caml_call1(Dream_pure_Message[32], response);
        if(! match) return forward_response(response);
        var
         client_stream = match[1][1],
         error_handler =
           caml_call3
            (Dream_http_Error_handler[8],
             user_s_error_handler,
             request,
             response);
        function proceed(param){
         var
          _a2_ = caml_call1(Dream_httpaf_Websocket[1], client_stream),
          _a3_ =
            caml_call2
             (Dream_websocketaf_Websocketaf[7][2], [0, error_handler], _a2_),
          _a4_ = Dream_websocketaf_Websocketaf[7];
         return caml_call1
                 (upgrade,
                  caml_call1
                   (caml_call1
                     (Dream_gluten_Gluten[1],
                      [0,
                       _a4_[3],
                       _a4_[5],
                       _a4_[6],
                       _a4_[9],
                       _a4_[4],
                       _a4_[7],
                       _a4_[10],
                       _a4_[8],
                       _a4_[11],
                       _a4_[12]]),
                    _a3_));
        }
        var
         _aZ_ = caml_call1(Dream_pure_Message[11], response),
         headers = caml_call1(Dream_httpaf_Httpaf[4][2], _aZ_),
         param =
           caml_call4
            (Dream_websocketaf_Websocketaf[4][3],
             [0, headers],
             sha1,
             conn$0,
             proceed);
        if(0 === param[0]) return Lwt[36];
        var
         error_string = param[1],
         ppx_lwt_0 =
           caml_call4
            (Dream_http_Error_handler[9],
             user_s_error_handler,
             request,
             response,
             error_string);
        function _a0_(response){return forward_response(response);}
        function _a1_(exn){
         try{throw caml_maybe_attach_backtrace(exn, 0);}
         catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
        }
        return caml_call3(Lwt[81], _a1_, ppx_lwt_0, _a0_);
       }
       function _aY_(exn){
        try{throw caml_maybe_attach_backtrace(exn, 0);}
        catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
       }
       return caml_call3(Lwt[81], _aY_, ppx_lwt_0, _aX_);
      }
      return caml_call1(caml_call1(Lwt[7], _aW_), _aV_);
     }
     return caml_call1(Lwt[11], _aU_);
    }
    return httpaf_request_handler;
   }
   function wrap_handler_h2(tls, user_s_error_handler, user_s_dream_handler){
    function httpaf_request_handler(client_address, conn){
     caml_call1(Dream_server_Log[23], 0);
     var
      httpaf_request = caml_call1(Dream_h2_H2[8][1], conn),
      client = caml_call1(Dream_http_Adapt[1], client_address),
      method = to_dream_method(httpaf_request[1]),
      target = httpaf_request[2],
      headers = caml_call1(Dream_h2_H2[3][4], httpaf_request[4]),
      body = caml_call1(Dream_h2_H2[8][2], conn);
     function read(data, param, _aR_, _aQ_, close, _aP_){
      function _aS_(buffer, off, len){
       return caml_call5(data, buffer, off, len, 1, 0);
      }
      function _aT_(param){return caml_call1(close, 1000);}
      return caml_call3(Dream_h2_H2[4][1][1], body, _aT_, _aS_);
     }
     function close(code){return caml_call1(Dream_h2_H2[4][1][2], body);}
     var
      body$0 = caml_call3(Dream_pure_Stream[1], read, close, close),
      body$1 = caml_call2(Dream_pure_Stream[6], body$0, Dream_pure_Stream[5]),
      request =
        caml_call6
         (Dream_server_Helpers[7],
          client,
          method,
          target,
          tls,
          headers,
          body$1);
     function _aJ_(param){
      function _aK_(exn){
       caml_call2(Dream_h2_H2[8][11], conn, exn);
       return Lwt[36];
      }
      function _aL_(param){
       var ppx_lwt_0 = caml_call1(user_s_dream_handler, request);
       function _aM_(response){
        if(caml_call1(Dream_pure_Message[32], response)) return Lwt[36];
        caml_call1(Dream_pure_Message[22], response);
        caml_call1(Dream_pure_Message[18], response);
        var
         _aO_ = caml_call1(Dream_pure_Message[11], response),
         headers = caml_call1(Dream_h2_H2[3][2], _aO_),
         status = to_h2_status(caml_call1(Dream_pure_Message[7], response)),
         h2_response = caml_call2(Dream_h2_H2[6][1], [0, headers], status),
         body = caml_call3(Dream_h2_H2[8][7], conn, 0, h2_response);
        caml_call2(Dream_http_Adapt[4], response, body);
        return Lwt[36];
       }
       function _aN_(exn){
        try{throw caml_maybe_attach_backtrace(exn, 0);}
        catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
       }
       return caml_call3(Lwt[81], _aN_, ppx_lwt_0, _aM_);
      }
      return caml_call1(caml_call1(Lwt[7], _aL_), _aK_);
     }
     return caml_call1(Lwt[11], _aJ_);
    }
    return httpaf_request_handler;
   }
   var
    log = Dream_http_Error_handler[10],
    no_tls =
      [0,
       function(param, _aG_, handler, error_handler){
        var
         _aH_ = caml_call1(Dream_http_Error_handler[5], error_handler),
         _aI_ = wrap_handler(0, error_handler, handler);
        return caml_call3(Dream_httpaf_lwt_unix_Httpaf_l[1][1], 0, _aI_, _aH_);
       }],
    openssl =
      [0,
       function(certificate_file, key_file, handler, error_handler){
        var
         _az_ = caml_call1(Dream_http_Error_handler[5], error_handler),
         _aA_ = wrap_handler(1, error_handler, handler),
         httpaf_handler =
           caml_call3(Dream_httpaf_lwt_unix_Httpaf_l[1][3][1], 0, _aA_, _az_),
         _aB_ = caml_call1(Dream_http_Error_handler[6], error_handler),
         _aC_ = wrap_handler_h2(1, error_handler, handler),
         h2_handler =
           caml_call3(Dream_h2_lwt_unix_H2_lwt_unix[1][3][1], 0, _aC_, _aB_),
         perform_tls_handshake =
           caml_call3
            (Dream_gluten_lwt_unix_Gluten_l[1][4][3],
             _a_,
             certificate_file,
             key_file);
        return function(client_address, unix_socket){
         var
          ppx_lwt_0 =
            caml_call2(perform_tls_handshake, client_address, unix_socket);
         function _aD_(tls_endpoint){
          var match = caml_call1(Lwt_ssl[1], tls_endpoint);
          if(! match)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
          var
           tls_socket = match[1],
           match$0 = caml_call1(Ssl[64], tls_socket);
          if(! match$0)
           return caml_call2(httpaf_handler, client_address, tls_endpoint);
          var _aF_ = match$0[1];
          if(! caml_string_notequal(_aF_, cst_h2))
           return caml_call2(h2_handler, client_address, tls_endpoint);
          if(caml_string_notequal(_aF_, cst_http_1_1))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
          return caml_call2(httpaf_handler, client_address, tls_endpoint);
         }
         function _aE_(exn){
          try{throw caml_maybe_attach_backtrace(exn, 0);}
          catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
         }
         return caml_call3(Lwt[81], _aE_, ppx_lwt_0, _aD_);};
       }],
    ocaml_tls =
      [0,
       function(certificate_file, key_file, handler, error_handler){
        var
         _ax_ = caml_call1(Dream_http_Error_handler[5], error_handler),
         _ay_ = wrap_handler(1, error_handler, handler);
        return caml_call5
                (Dream_httpaf_lwt_unix_Httpaf_l[1][2][2],
                 certificate_file,
                 key_file,
                 0,
                 _ay_,
                 _ax_);
       }];
   function check_headers_middleware(next_handler, request){
    var ppx_lwt_0 = caml_call1(next_handler, request);
    function _as_(response){
     var _au_ = caml_call1(Dream_pure_Message[11], response);
     function _av_(param){
      var name = param[1];
      return caml_string_equal(caml_call1(Stdlib_String[24], name), cst$1);
     }
     var
      invalid_headers_exist =
        caml_call1(caml_call1(Stdlib_List[34], _av_), _au_);
     if(invalid_headers_exist){
      var _aw_ = function(log){return caml_call2(log, [0, request], _d_);};
      caml_call1(log[2], _aw_);
     }
     return caml_call1(Lwt[4], response);
    }
    function _at_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _at_, ppx_lwt_0, _as_);
   }
   function built_in_middleware(error_handler){
    var
     _aq_ = caml_call1(Dream_http_Error_handler[4], error_handler),
     _ar_ =
       [0,
        check_headers_middleware,
        [0, caml_call1(Dream_server_Catch[1], _aq_), 0]];
    return caml_call1(Dream_pure_Message[38], _ar_);
   }
   function serve_with_details
   (caller_function_for_error_mess,
    tls_library,
    interface$0,
    network,
    ppx_lwt_0,
    error_handler,
    certificate_file,
    key_file,
    builtins,
    user_s_dream_handler){
    var
     user_s_dream_handler$0 =
       builtins
        ? caml_call1(built_in_middleware(error_handler), user_s_dream_handler)
        : user_s_dream_handler,
     httpaf_connection_handler =
       caml_call4
        (tls_library[1],
         certificate_file,
         key_file,
         user_s_dream_handler$0,
         error_handler),
     tls_error_handler =
       caml_call1(Dream_http_Error_handler[7], error_handler);
    function httpaf_connection_handler$0(client_address, socket){
     function _ao_(exn){
      caml_call2(tls_error_handler, client_address, exn);
      return Lwt[36];
     }
     function _ap_(param){
      return caml_call2(httpaf_connection_handler, client_address, socket);
     }
     return caml_call2(Lwt[7], _ap_, _ao_);
    }
    if(948106920 <= network[1])
     var path = network[2], ppx_lwt_0$0 = caml_call1(Lwt[4], [0, path]);
    else
     var
      port = network[2],
      _ah_ = caml_call1(Stdlib[33], port),
      ppx_lwt_0$1 = caml_call3(Lwt_unix[130], interface$0, _ah_, 0),
      _ai_ =
        function(addresses){
         if(! addresses)
          return caml_call4
                  (Stdlib_Printf[10],
                   Stdlib[2],
                   _e_,
                   caller_function_for_error_mess,
                   interface$0);
         var address = addresses[1];
         return caml_call1(Lwt[4], address[4]);
        },
      _aj_ =
        function(exn){
         try{throw caml_maybe_attach_backtrace(exn, 0);}
         catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
        },
      ppx_lwt_0$0 = caml_call3(Lwt[81], _aj_, ppx_lwt_0$1, _ai_);
    function _af_(listen_address){
     var
      ppx_lwt_0$0 =
        caml_call5
         (Lwt_io[77], 0, 0, 0, listen_address, httpaf_connection_handler$0);
     function _ak_(server){
      function _am_(param){return caml_call1(Lwt_io[79], server);}
      function _an_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _an_, ppx_lwt_0, _am_);
     }
     function _al_(exn){
      try{throw caml_maybe_attach_backtrace(exn, 0);}
      catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
     }
     return caml_call3(Lwt[81], _al_, ppx_lwt_0$0, _ak_);
    }
    function _ag_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _ag_, ppx_lwt_0$0, _af_);
   }
   function is_localhost(interface$0){
    var
     _ad_ = caml_string_equal(interface$0, cst_localhost$0),
     _ae_ = _ad_ || caml_string_equal(interface$0, cst_127_0_0_1);
    return _ae_;
   }
   function serve_with_maybe_https
   (caller_function_for_error_mess,
    interface$0,
    network,
    stop,
    error_handler,
    tls_library,
    certificate_file,
    key_file,
    certificate_string,
    key_string,
    builtins,
    user_s_dream_handler){
    function _K_(exn){
     var backtrace = caml_call1(Stdlib_Printexc[6], 0);
     function _aa_(log){
      return caml_call4
              (log,
               0,
               _f_,
               caller_function_for_error_mess,
               caml_call1(Stdlib_Printexc[1], exn));
     }
     caml_call1(log[1], _aa_);
     function _ab_(line){
      function _ac_(log){return caml_call3(log, 0, _g_, line);}
      return caml_call1(log[1], _ac_);
     }
     caml_call1(caml_call1(Dream_server_Log[21], _ab_), backtrace);
     throw caml_maybe_attach_backtrace(exn, 1);
    }
    function _L_(param){
     if(17505 === tls_library)
      return serve_with_details
              (caller_function_for_error_mess,
               no_tls,
               interface$0,
               network,
               stop,
               error_handler,
               cst$0,
               cst,
               builtins,
               user_s_dream_handler);
     a:
     {
      if(certificate_file){
       if(key_file && ! certificate_string && ! key_string){
        var
         key_file$0 = key_file[1],
         certificate_file$0 = certificate_file[1],
         certificate_and_key =
           [0, 781515420, [0, certificate_file$0, key_file$0]];
        break a;
       }
      }
      else
       if(! key_file)
        if(certificate_string){
         if(key_string){
          var
           key_string$1 = key_string[1],
           certificate_string$1 = certificate_string[1],
           _O_ = function(log){return caml_call2(log, 0, _j_);};
          caml_call1(log[2], _O_);
          var
           certificate_and_key =
             [0,
              961822497,
              [0, certificate_string$1, key_string$1, 1057685346]];
          break a;
         }
        }
        else if(! key_string){
         if(1 - is_localhost(interface$0)){
          var _P_ = function(log){return caml_call2(log, 0, _k_);};
          caml_call1(log[2], _P_);
          var _Q_ = function(log){return caml_call2(log, 0, _l_);};
          caml_call1(log[2], _Q_);
         }
         var
          certificate_and_key =
            [0,
             961822497,
             [0, Dream_certificate[1], Dream_certificate[2], -329127243]];
         break a;
        }
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Must_specify_exactly_one_p], 1);
     }
     var tls_library$0 = 226845186 <= tls_library ? openssl : ocaml_tls;
     if(961822497 <= certificate_and_key[1]){
      var
       match = certificate_and_key[2],
       verbose_or_silent = match[3],
       key_string$0 = match[2],
       certificate_string$0 = match[1],
       _N_ =
         function(param){
          var certificate_stream = param[2], certificate_file = param[1];
          function _R_(param){
           var key_stream = param[2], key_file = param[1];
           if(-329127243 !== verbose_or_silent){
            var
             _S_ =
               function(log){
                return caml_call3(log, 0, _h_, certificate_file);
               };
            caml_call1(log[2], _S_);
            var
             _T_ = function(log){return caml_call3(log, 0, _i_, key_file);};
            caml_call1(log[2], _T_);
           }
           var
            ppx_lwt_0 =
              caml_call2(Lwt_io[43], certificate_stream, certificate_string$0);
           function _U_(param){
            var ppx_lwt_0 = caml_call2(Lwt_io[43], key_stream, key_string$0);
            function _W_(param){
             var ppx_lwt_0 = caml_call1(Lwt_io[15], certificate_stream);
             function _Y_(param){
              var ppx_lwt_0 = caml_call1(Lwt_io[15], key_stream);
              function ___(param){
               return serve_with_details
                       (caller_function_for_error_mess,
                        tls_library$0,
                        interface$0,
                        network,
                        stop,
                        error_handler,
                        certificate_file,
                        key_file,
                        builtins,
                        user_s_dream_handler);
              }
              function _$_(exn){
               try{throw caml_maybe_attach_backtrace(exn, 0);}
               catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
              }
              return caml_call3(Lwt[81], _$_, ppx_lwt_0, ___);
             }
             function _Z_(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             }
             return caml_call3(Lwt[81], _Z_, ppx_lwt_0, _Y_);
            }
            function _X_(exn){
             try{throw caml_maybe_attach_backtrace(exn, 0);}
             catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
            }
            return caml_call3(Lwt[81], _X_, ppx_lwt_0, _W_);
           }
           function _V_(exn){
            try{throw caml_maybe_attach_backtrace(exn, 0);}
            catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
           }
           return caml_call3(Lwt[81], _V_, ppx_lwt_0, _U_);
          }
          return caml_call7(Lwt_io[70], 0, 0, 0, 0, 0, 0, _R_);
         };
      return caml_call7(Lwt_io[70], 0, 0, 0, 0, 0, 0, _N_);
     }
     var
      match$0 = certificate_and_key[2],
      key_file$1 = match$0[2],
      certificate_file$1 = match$0[1];
     return serve_with_details
             (caller_function_for_error_mess,
              tls_library$0,
              interface$0,
              network,
              stop,
              error_handler,
              certificate_file$1,
              key_file$1,
              builtins,
              user_s_dream_handler);
    }
    function _M_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[82], _M_, _L_, _K_);
   }
   var never = caml_call1(Lwt[1], 0)[1], default_port = 8080;
   function network(port, socket_path){
    if(! socket_path) return [0, 815031220, port];
    var path = socket_path[1];
    return [0, 948106920, path];
   }
   function serve
   (opt,
    _G_,
    socket_path,
    _F_,
    _E_,
    _D_,
    certificate_file,
    key_file,
    _C_,
    user_s_dream_handler){
    if(opt)
     var sth = opt[1], interface$0 = sth;
    else
     var interface$0 = default_interface;
    if(_G_) var sth$0 = _G_[1], port = sth$0; else var port = default_port;
    if(_F_) var sth$1 = _F_[1], stop = sth$1; else var stop = never;
    if(_E_)
     var sth$2 = _E_[1], error_handler = sth$2;
    else
     var error_handler = Dream_http_Error_handler[1];
    if(_D_) var sth$3 = _D_[1], tls = sth$3; else var tls = 0;
    if(_C_) var sth$4 = _C_[1], builtins = sth$4; else var builtins = 1;
    var _H_ = 0, _I_ = 0, _J_ = tls ? 226845186 : 17505;
    return serve_with_maybe_https
            (cst_serve,
             interface$0,
             network(port, socket_path),
             stop,
             error_handler,
             _J_,
             certificate_file,
             key_file,
             _I_,
             _H_,
             builtins,
             user_s_dream_handler);
   }
   function run
   (opt,
    _w_,
    socket_path,
    _v_,
    _u_,
    _t_,
    certificate_file,
    key_file,
    _s_,
    _r_,
    adjust_terminal,
    user_s_dream_handler){
    if(opt)
     var sth = opt[1], interface$0 = sth;
    else
     var interface$0 = default_interface;
    if(_w_) var sth$0 = _w_[1], port = sth$0; else var port = default_port;
    if(_v_) var sth$1 = _v_[1], stop = sth$1; else var stop = never;
    if(_u_)
     var sth$2 = _u_[1], error_handler = sth$2;
    else
     var error_handler = Dream_http_Error_handler[1];
    if(_t_) var sth$3 = _t_[1], tls = sth$3; else var tls = 0;
    if(_s_) var sth$4 = _s_[1], builtins = sth$4; else var builtins = 1;
    if(_r_) var sth$5 = _r_[1], greeting = sth$5; else var greeting = 1;
    if(Stdlib_Sys[6]) caml_call2(Stdlib_Sys[15], Stdlib_Sys[23], 1);
    var log = Dream_server_Log[20];
    if(0 !== adjust_terminal){
     var _x_ = function(log){return caml_call2(log, 0, _m_);};
     caml_call1(Dream_http_Error_handler[10][2], _x_);
    }
    if(greeting){
     var scheme = tls ? cst_https : cst_http;
     a:
     if(socket_path){
      var path = socket_path[1];
      caml_call2(log, _n_, path);
     }
     else{
      b:
      {
       if
        (caml_string_notequal(interface$0, cst_127_0_0_1)
         && caml_string_notequal(interface$0, cst_localhost$0))
        break b;
       if(! socket_path){caml_call3(log, _q_, scheme, port); break a;}
      }
      caml_call5(log, _p_, interface$0, port, scheme, port);
     }
     caml_call1(log, _o_);
    }
    var
     _y_ = 0,
     _z_ = 0,
     _A_ = tls ? 226845186 : 17505,
     _B_ =
       serve_with_maybe_https
        (cst_run,
         interface$0,
         network(port, socket_path),
         stop,
         error_handler,
         _A_,
         certificate_file,
         key_file,
         _z_,
         _y_,
         builtins,
         user_s_dream_handler);
    return caml_call1(Lwt_main[1], _B_);
   }
   var
    Dream_http_Http =
      [0,
       to_dream_method,
       to_httpaf_status,
       to_h2_status,
       sha1,
       websocket_log,
       wrap_handler,
       wrap_handler_h2,
       log,
       no_tls,
       openssl,
       ocaml_tls,
       check_headers_middleware,
       built_in_middleware,
       serve_with_details,
       is_localhost,
       serve_with_maybe_https,
       default_interface,
       default_port,
       never,
       network,
       serve,
       run];
   runtime.caml_register_global(65, Dream_http_Http, "Dream__http__Http");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
