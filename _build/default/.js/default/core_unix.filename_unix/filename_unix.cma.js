// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Filename_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Filename_unix = [0],
    Filename_unix$0 = [0, Filename_unix];
   runtime.caml_register_global(0, Filename_unix$0, "Filename_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Filename_unix__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Filename_unix_Import = "Filename_unix__Import",
    cst_filename_unix = "filename_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Filename_unix_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_filename_unix);
   caml_call1(Ppx_expect_runtime[1][1], "filename_unix/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_filename_unix, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_filename_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Filename_unix_Import);
   var Filename_unix_Import = [0];
   runtime.caml_register_global
    (11, Filename_unix_Import, cst_Filename_unix_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Filename_unix
//# unitInfo: Requires: Caml_unix, Core, Core__Command_internal, Core__Filename, Core__List, Core__Option, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio__In_channel, Stdlib__Domain, Stdlib__Random, Sys_unix, UnixLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "/",
    cst_Filename_unix$0 = "Filename_unix",
    cst_filename_unix$0 = "filename_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    mode = [0, 7, [0, 5, [0, 2, 0]]],
    cst = cst$1,
    cst$0 = cst$1,
    Caml_unix = global_data.Caml_unix,
    UnixLabels = global_data.UnixLabels,
    Core_String = global_data.Core__String,
    Core = global_data.Core,
    Core_Filename = global_data.Core__Filename,
    Core_Option = global_data.Core__Option,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Sys_unix = global_data.Sys_unix,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Core_List = global_data.Core__List,
    Core_Command_internal = global_data.Core__Command_internal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Filename_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_filename_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "filename_unix/src/filename_unix.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_filename_unix$0, "filename_unix.ml");
   var
    _c_ = [0, 13, [0, 7, [0, 5, 0]]],
    _b_ = [0, [2, 0, [11, ".tmp.", [2, 0, [2, 0, 0]]]], "%s.tmp.%s%s"],
    _a_ =
      [0,
       [11, "bash -c 'compgen -f ", [2, 0, [12, 39, 0]]],
       "bash -c 'compgen -f %s'"],
    cst_x = "x",
    cst_filename_unix = cst_filename_unix$0,
    cst_Filename_unix = cst_Filename_unix$0;
   function create_arg_type(key, of_string){
    var
     _m_ =
       [0,
        function(param, part){
         var
          command = caml_call2(Core[265], _a_, part),
          chan_in = caml_call1(Caml_unix[74], command),
          completions = caml_call2(Stdio_In_channel[18], 0, chan_in);
         caml_call1(Caml_unix[86], chan_in);
         function _n_(comp){
          return 4448519 === caml_call2(Sys_unix[4], 0, comp)
                  ? caml_call2(Core[18], comp, cst)
                  : comp;
         }
         var
          _o_ = caml_call2(Core_List[79], completions, Core_String[146]),
          completions$0 = caml_call2(Core_List[51], _o_, _n_);
         if(completions$0 && ! completions$0[2]){
          var dir = completions$0[1];
          if(caml_call2(Core_String[72], dir, cst$0))
           return [0, dir, [0, caml_call2(Core[18], dir, cst_x), 0]];
         }
         return completions$0;
        }];
    return caml_call3(Core_Command_internal[19][1], _m_, key, of_string);
   }
   var
    arg_type = create_arg_type(0, function(_l_){return _l_;}),
    prng_key = caml_call2(Stdlib_Domain[10][1], 0, Stdlib_Random[15][2]);
   function retry(in_dir, prefix, suffix, f){
    var in_dir$0 = caml_call2(Core_Option[39], in_dir, Core_Filename[6]);
    function escape(s){
     function _j_(c){
      a:
      {
       if(11 <= c){
        var _k_ = c - 39 | 0;
        if(8 < _k_ >>> 0) break a;
        switch(_k_){case 0:case 6:case 8: break;default: break a;
        }
       }
       else if(8 >= c - 1 >>> 0) break a;
       return 95;
      }
      return c;
     }
     return caml_call2(Core_String[9], s, _j_);
    }
    var
     prefix$0 = escape(prefix),
     suffix$0 = escape(suffix),
     attempts = 238328;
    for(;;){
     var
      _g_ =
        function(param){
         var prng = caml_call1(Stdlib_Domain[10][2], prng_key);
         return runtime.caml_string_get
                 ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                  caml_call2(Stdlib_Random[15][5], prng, 62));
        },
      rnd = caml_call2(Core_String[36], 6, _g_),
      name = caml_call4(Core[265], _b_, prefix$0, rnd, suffix$0),
      name$0 = caml_call2(Core_Filename[10], in_dir$0, name);
     try{var _i_ = caml_call1(f, name$0); return _i_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Caml_unix[1]){
       var _h_ = exn[2];
       if(typeof _h_ === "number")
        if(8 === _h_){
         if(0 < attempts){
          var attempts$0 = attempts - 1 | 0, attempts = attempts$0;
          continue;
         }
        }
        else if(11 === _h_) continue;
      }
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
   }
   function temp_dir(opt, in_dir, prefix, suffix){
    if(opt) var sth = opt[1], perm = sth; else var perm = 448;
    return retry
            (in_dir,
             prefix,
             suffix,
             function(name){
              caml_call2(UnixLabels[61], name, perm);
              return name;
             });
   }
   function open_temp_file_fd(opt, _f_, in_dir, prefix, suffix){
    if(opt) var sth = opt[1], close_on_exec = sth; else var close_on_exec = 0;
    if(_f_) var sth$0 = _f_[1], perm = sth$0; else var perm = 384;
    var mode$0 = close_on_exec ? [0, 13, mode] : mode;
    return retry
            (in_dir,
             prefix,
             suffix,
             function(name){
              return [0, name, caml_call3(UnixLabels[24], name, mode$0, perm)];
             });
   }
   function temp_file(opt, in_dir, prefix, suffix){
    if(opt) var sth = opt[1], perm = sth; else var perm = 384;
    return retry
            (in_dir,
             prefix,
             suffix,
             function(name){
              var fd = caml_call3(UnixLabels[24], name, _c_, perm);
              try{caml_call1(Caml_unix[25], fd);}catch(_e_){}
              return name;
             });
   }
   function open_temp_file(opt, perm, in_dir, prefix, suffix){
    if(opt) var sth = opt[1], close_on_exec = sth; else var close_on_exec = 1;
    var
     match =
       open_temp_file_fd([0, close_on_exec], perm, in_dir, prefix, suffix),
     fd = match[2],
     name = match[1],
     out = caml_call1(Caml_unix[33], fd);
    return [0, name, out];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_filename_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Filename_unix);
   var
    Filename_unix =
      [0,
       function(_d_){return runtime.core_unix_realpath(_d_);},
       open_temp_file,
       open_temp_file_fd,
       temp_file,
       temp_dir,
       create_arg_type,
       arg_type];
   runtime.caml_register_global(31, Filename_unix, cst_Filename_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
