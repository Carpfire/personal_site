// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_httpaf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf = [0];
   runtime.caml_register_global(0, Dream_httpaf, "Dream_httpaf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf__Websocket
//# unitInfo: Requires: Bigstringaf, Dream_pure__Stream, Dream_websocketaf__Websocketaf, Lwt, Lwt_stream, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bigstringaf = global_data.Bigstringaf,
    Dream_websocketaf_Websocketaf = global_data.Dream_websocketaf__Websocketaf,
    Lwt_stream = global_data.Lwt_stream,
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    cst_Ping_payload_cannot_exceed = "Ping payload cannot exceed 125 bytes",
    cst_Pong_payload_cannot_exceed = "Pong payload cannot exceed 125 bytes";
   function websocket_handler(stream, socket){
    var
     match = caml_call1(Lwt_stream[4], 0),
     push_frame = match[2],
     frames = match[1],
     message_is_binary = [0, 564146209];
    function frame(opcode, is_fin, param, payload){
     return typeof opcode === "number"
             ? 892411538
               <= opcode
               ? 915654071
                 <= opcode
                 ? 936573133
                   <= opcode
                   ? (message_is_binary
                      [1]
                     = 936573133,
                     caml_call1
                      (push_frame,
                       [0, [0, [0, 758940234, [0, 936573133, is_fin]], payload]]))
                   : caml_call1(push_frame, [0, [0, -611285096, payload]])
                 : 892709912
                   <= opcode
                   ? caml_call1(push_frame, [0, [0, 892709912, payload]])
                   : caml_call1(push_frame, [0, [0, 892411538, payload]])
               : 564146209
                 <= opcode
                 ? (message_is_binary
                    [1]
                   = 564146209,
                   caml_call1
                    (push_frame,
                     [0, [0, [0, 758940234, [0, 564146209, is_fin]], payload]]))
                 : caml_call1
                   (push_frame,
                    [0,
                     [0,
                      [0, 758940234, [0, message_is_binary[1], is_fin]],
                      payload]])
             : caml_call1(push_frame, [0, [0, -912009552, payload]]);
    }
    function eof(param){return caml_call1(push_frame, 0);}
    var
     closed = [0, 0],
     close_code = [0, 1005],
     current_payload = [0, 0],
     last_chunk = [0, 0],
     first_chunk_received = [0, 0],
     first_chunk = [0, Bigstringaf[2]],
     first_chunk_offset = [0, 0],
     first_chunk_length = [0, 0];
    function drain_payload(payload, continuation){
     function _o_(buffer, off, len){
      if(! first_chunk_received[1]){
       first_chunk[1] = buffer;
       first_chunk_offset[1] = off;
       first_chunk_length[1] = len;
       first_chunk_received[1] = 1;
      }
      return drain_payload(payload, continuation);
     }
     function _p_(param){
      var
       payload = first_chunk[1],
       offset = first_chunk_offset[1],
       length = first_chunk_length[1];
      first_chunk_received[1] = 0;
      first_chunk[1] = Bigstringaf[2];
      first_chunk_offset[1] = 0;
      first_chunk_length[1] = 0;
      return caml_call3(continuation, payload, offset, length);
     }
     return caml_call3(Dream_websocketaf_Websocketaf[1][2], payload, _p_, _o_);
    }
    function read(data, flush, ping, pong, close, exn){
     if(closed[1]) return caml_call1(close, close_code[1]);
     var _f_ = current_payload[1];
     if(_f_){
      var
       _g_ = _f_[1],
       payload = _g_[2],
       match = _g_[1],
       fin = match[2],
       binary = match[1],
       _h_ =
         function(buffer, off, len){
          var _n_ = last_chunk[1];
          if(_n_){
           var
            match = _n_[1],
            last_length = match[3],
            last_offset = match[2],
            last_buffer = match[1];
           last_chunk[1] = [0, [0, buffer, off, len]];
           var binary$0 = 564146209 === binary ? 1 : 0;
           return caml_call5
                   (data, last_buffer, last_offset, last_length, binary$0, 0);
          }
          last_chunk[1] = [0, [0, buffer, off, len]];
          return read(data, flush, ping, pong, close, exn);
         },
       _i_ =
         function(param){
          current_payload[1] = 0;
          var _m_ = last_chunk[1];
          if(! _m_) return read(data, flush, ping, pong, close, exn);
          var
           match = _m_[1],
           last_length = match[3],
           last_offset = match[2],
           last_buffer = match[1];
          last_chunk[1] = 0;
          var binary$0 = 564146209 === binary ? 1 : 0;
          return caml_call5
                  (data, last_buffer, last_offset, last_length, binary$0, fin);
         };
      return caml_call3
              (Dream_websocketaf_Websocketaf[1][2], payload, _i_, _h_);
     }
     function _j_(param){
      if(! param){
       if(1 - closed[1]){closed[1] = 1; close_code[1] = 1005;}
       caml_call2(Dream_websocketaf_Websocketaf[3][6], 0, socket);
       return caml_call1(close, close_code[1]);
      }
      var _l_ = param[1], match = _l_[1];
      if(typeof match !== "number"){
       var payload$3 = _l_[2], properties = match[2];
       current_payload[1] = [0, [0, properties, payload$3]];
       return read(data, flush, ping, pong, close, exn);
      }
      if(892411538 <= match){
       if(892709912 <= match){
        var payload = _l_[2];
        return drain_payload(payload, pong);
       }
       var payload$0 = _l_[2];
       return drain_payload(payload$0, ping);
      }
      if(-611285096 <= match){
       var payload$1 = _l_[2];
       return drain_payload
               (payload$1,
                function(buffer, offset, length){
                 if(2 <= length)
                  var
                   high_byte = caml_ba_get_1(buffer, offset),
                   low_byte = caml_ba_get_1(buffer, offset + 1 | 0),
                   code = high_byte << 8 | low_byte;
                 else
                  var code = 1005;
                 if(1 - closed[1]) close_code[1] = code;
                 return caml_call1(close, close_code[1]);
                });
      }
      var payload$2 = _l_[2];
      return drain_payload
              (payload$2,
               function(buffer, offset, length){
                return read(data, flush, ping, pong, close, exn);
               });
     }
     var _k_ = caml_call1(Lwt_stream[21], frames);
     return caml_call2(Lwt[29], _k_, _j_);
    }
    var bytes_since_flush = [0, 0];
    function flush(close, ok){
     bytes_since_flush[1] = 0;
     return closed[1]
             ? caml_call1(close, close_code[1])
             : caml_call2(Dream_websocketaf_Websocketaf[3][5], socket, ok);
    }
    function close(code){
     var _e_ = 1 - closed[1];
     return _e_
             ? caml_call2
               (Dream_websocketaf_Websocketaf[3][6],
                [0, [0, -912009552, code]],
                socket)
             : _e_;
    }
    function abort(exn){return close(1005);}
    var reader = caml_call3(Dream_pure_Stream[1], read, close, abort);
    caml_call2(Dream_pure_Stream[3], reader, stream);
    function outgoing_loop(param){
     function _a_(buffer, offset, length){
      if(125 < length)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_Pong_payload_cannot_exceed], 1);
      if(closed[1]) return close(close_code[1]);
      if(0 === length)
       caml_call2(Dream_websocketaf_Websocketaf[3][4], 0, socket);
      else
       caml_call2
        (Dream_websocketaf_Websocketaf[3][4],
         [0, [0, buffer, offset, length]],
         socket);
      return outgoing_loop(0);
     }
     function _b_(buffer, offset, length){
      if(125 < length)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_Ping_payload_cannot_exceed], 1);
      if(closed[1]) return close(close_code[1]);
      if(0 === length)
       caml_call2(Dream_websocketaf_Websocketaf[3][3], 0, socket);
      else
       caml_call2
        (Dream_websocketaf_Websocketaf[3][3],
         [0, [0, buffer, offset, length]],
         socket);
      return outgoing_loop(0);
     }
     function _c_(param){return flush(close, outgoing_loop);}
     function _d_(buffer, offset, length, binary, fin){
      var kind = binary ? 564146209 : 936573133;
      return closed[1]
              ? close(close_code[1])
              : (caml_call6
                 (Dream_websocketaf_Websocketaf[3][1],
                  socket,
                  [0, fin],
                  kind,
                  buffer,
                  offset,
                  length),
                bytes_since_flush[1] = bytes_since_flush[1] + length | 0,
                4096 <= bytes_since_flush[1]
                 ? flush(close, outgoing_loop)
                 : outgoing_loop(0));
     }
     return caml_call7
             (Dream_pure_Stream[12], stream, _d_, _c_, _b_, _a_, close, abort);
    }
    outgoing_loop(0);
    return [0, frame, eof];
   }
   var Dream_httpaf_Websocket = [0, websocket_handler];
   runtime.caml_register_global
    (8, Dream_httpaf_Websocket, "Dream_httpaf__Websocket");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
