// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_pure
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_pure = [0];
   runtime.caml_register_global(0, Dream_pure, "Dream_pure");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_pure__Stream
//# unitInfo: Requires: Bigstringaf, Lwt, Stdlib, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Bigstringaf = global_data.Bigstringaf,
    Lwt = global_data.Lwt,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib = global_data.Stdlib,
    cst_stream_read_the_previous_r =
      "stream read: the previous read has not completed",
    cst_write_to_a_read_only_strea = "write to a read-only stream",
    cst_flush_of_a_read_only_strea = "flush of a read-only stream",
    cst_ping_on_a_read_only_stream = "ping on a read-only stream",
    cst_pong_on_a_read_only_stream = "pong on a read-only stream",
    cst_read_from_a_non_readable_s = "read from a non-readable stream";
   function stream(reader, writer){return [0, reader, writer];}
   function _a_(_al_){return 0;}
   function _b_(_ak_){return 0;}
   var
    no_reader =
      [0,
       function(param, _aj_, _ai_, _ah_, _ag_, _af_){
        throw caml_maybe_attach_backtrace
               ([0, Stdlib[7], cst_read_from_a_non_readable_s], 1);
       },
       _b_,
       _a_];
   function _c_(_ae_){return 0;}
   function _d_(_ad_){return 0;}
   function _e_(buffer, offset, length, param, _ac_, ok){
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[7], cst_pong_on_a_read_only_stream], 1);
   }
   function _f_(buffer, offset, length, param, _ab_, ok){
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[7], cst_ping_on_a_read_only_stream], 1);
   }
   function _g_(param, _aa_, ok){
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[7], cst_flush_of_a_read_only_strea], 1);
   }
   var
    no_writer =
      [0,
       function(buffer, offset, length, binary, fin, param, _$_, ok){
        throw caml_maybe_attach_backtrace
               ([0, Stdlib[7], cst_write_to_a_read_only_strea], 1);
       },
       _g_,
       _f_,
       _e_,
       _d_,
       _c_];
   function reader(read, close, abort){return [0, read, close, abort];}
   var null$0 = [0, no_reader, no_writer];
   function _h_(___){return 0;}
   function _i_(_Z_){return 0;}
   var
    empty_reader =
      [0,
       function(param, _Y_, _X_, _W_, close, _V_){return caml_call1(close, 1000);
       },
       _i_,
       _h_],
    empty = [0, empty_reader, no_writer];
   function string(the_string){
    if(0 === caml_ml_string_length(the_string)) return empty;
    var string_ref = [0, [0, the_string]], exn_ref = [0, 0];
    function read(data, param, _U_, _T_, close, exn){
     var match = exn_ref[1];
     if(match){var the_exn = match[1]; return caml_call1(exn, the_exn);}
     var match$0 = string_ref[1];
     if(! match$0) return caml_call1(close, 1000);
     var stored_string = match$0[1];
     string_ref[1] = 0;
     var length = caml_ml_string_length(stored_string);
     return caml_call5
             (data,
              caml_call3(Bigstringaf[3], 0, length, stored_string),
              0,
              length,
              1,
              1);
    }
    function close(code){string_ref[1] = 0; return 0;}
    function abort(exn){string_ref[1] = 0; exn_ref[1] = [0, exn]; return 0;}
    return [0, [0, read, close, abort], no_writer];
   }
   function read(stream, data, flush, ping, pong, close, exn){
    return caml_call6(stream[1][1], data, flush, ping, pong, close, exn);
   }
   function close(stream, code){
    caml_call1(stream[1][2], code);
    return caml_call1(stream[2][5], code);
   }
   function abort(stream, exn){
    caml_call1(stream[1][3], exn);
    return caml_call1(stream[2][6], exn);
   }
   function write(stream, buffer, offset, length, binary, fin, close, exn, ok){
    return caml_call8
            (stream[2][1],
             buffer,
             offset,
             length,
             binary,
             fin,
             close,
             exn,
             ok);
   }
   function flush(stream, close, exn, ok){
    return caml_call3(stream[2][2], close, exn, ok);
   }
   function ping(stream, buffer, offset, length, close, exn, ok){
    return caml_call6(stream[2][3], buffer, offset, length, close, exn, ok);
   }
   function pong(stream, buffer, offset, length, close, exn, ok){
    return caml_call6(stream[2][4], buffer, offset, length, close, exn, ok);
   }
   function dummy_read_data_callback(buffer, offset, length, binary, fin){return 0;
   }
   function dummy_ping_pong_callback(buffer, offset, length){return 0;}
   function clean_up_reader_fields(pipe){
    pipe[2] = dummy_read_data_callback;
    pipe[3] = function(_S_){return 0;};
    pipe[4] = dummy_ping_pong_callback;
    pipe[5] = dummy_ping_pong_callback;
    pipe[6] = function(_R_){return 0;};
    pipe[7] = function(_Q_){return 0;};
    return;
   }
   function clean_up_writer_fields(pipe){
    pipe[8] = function(_P_){return 0;};
    pipe[9] = function(_O_){return 0;};
    pipe[10] = function(_N_){return 0;};
    return;
   }
   function pipe(param){
    function _A_(_M_){return 0;}
    function _B_(_L_){return 0;}
    function _C_(_K_){return 0;}
    function _D_(_J_){return 0;}
    function _E_(_I_){return 0;}
    var
     internal =
       [0,
        814535476,
        dummy_read_data_callback,
        function(_H_){return 0;},
        dummy_ping_pong_callback,
        dummy_ping_pong_callback,
        _E_,
        _D_,
        _C_,
        _B_,
        _A_];
    function read(data, flush, ping, pong, close, exn){
     var match = internal[1];
     if(typeof match === "number"){
      if(814535476 > match)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_stream_read_the_previous_r], 1);
      internal[1] = 111343473;
      internal[2] = data;
      internal[3] = flush;
      internal[4] = ping;
      internal[5] = pong;
      internal[6] = close;
      internal[7] = exn;
      var write_ok_callback = internal[8];
      clean_up_writer_fields(internal);
      return caml_call1(write_ok_callback, 0);
     }
     if(-216426513 <= match[1]){
      var the_exn = match[2];
      return caml_call1(exn, the_exn);
     }
     var code = match[2];
     return caml_call1(close, code);
    }
    function data(buffer, offset, length, binary, fin, close, exn, ok){
     var match = internal[1];
     if(typeof match === "number"){
      if(814535476 <= match){
       internal[8] =
        function(param){
         return data(buffer, offset, length, binary, fin, close, exn, ok);
        };
       internal[9] = close;
       internal[10] = exn;
       return 0;
      }
      internal[1] = 814535476;
      var read_data_callback = internal[2];
      clean_up_reader_fields(internal);
      caml_call5(read_data_callback, buffer, offset, length, binary, fin);
      return caml_call1(ok, 0);
     }
     if(-216426513 <= match[1]){
      var the_exn = match[2];
      return caml_call1(exn, the_exn);
     }
     var code = match[2];
     return caml_call1(close, code);
    }
    function flush(close, exn, ok){
     var match = internal[1];
     if(typeof match === "number"){
      if(814535476 <= match){
       internal[8] = function(param){return flush(close, exn, ok);};
       internal[9] = close;
       internal[10] = exn;
       return 0;
      }
      internal[1] = 814535476;
      var read_flush_callback = internal[3];
      clean_up_reader_fields(internal);
      caml_call1(read_flush_callback, 0);
      return caml_call1(ok, 0);
     }
     if(-216426513 <= match[1]){
      var the_exn = match[2];
      return caml_call1(exn, the_exn);
     }
     var code = match[2];
     return caml_call1(close, code);
    }
    function ping(buffer, offset, length, close, exn, ok){
     var match = internal[1];
     if(typeof match === "number"){
      if(814535476 <= match){
       internal[8] =
        function(param){return ping(buffer, offset, length, close, exn, ok);};
       internal[9] = close;
       internal[10] = exn;
       return 0;
      }
      internal[1] = 814535476;
      var read_ping_callback = internal[4];
      clean_up_reader_fields(internal);
      caml_call3(read_ping_callback, buffer, offset, length);
      return caml_call1(ok, 0);
     }
     if(-216426513 <= match[1]){
      var the_exn = match[2];
      return caml_call1(exn, the_exn);
     }
     var code = match[2];
     return caml_call1(close, code);
    }
    function pong(buffer, offset, length, close, exn, ok){
     var match = internal[1];
     if(typeof match === "number"){
      if(814535476 <= match){
       internal[8] =
        function(param){return pong(buffer, offset, length, close, exn, ok);};
       internal[9] = close;
       internal[10] = exn;
       return 0;
      }
      internal[1] = 814535476;
      var read_pong_callback = internal[5];
      clean_up_reader_fields(internal);
      caml_call3(read_pong_callback, buffer, offset, length);
      return caml_call1(ok, 0);
     }
     if(-216426513 <= match[1]){
      var the_exn = match[2];
      return caml_call1(exn, the_exn);
     }
     var code = match[2];
     return caml_call1(close, code);
    }
    function close(code){
     var _G_ = internal[1];
     if(typeof _G_ !== "number") return -216426513 <= _G_[1] ? 0 : 0;
     if(814535476 <= _G_){
      internal[1] = [0, -1025106484, code];
      var write_close_callback = internal[9];
      clean_up_writer_fields(internal);
      return caml_call1(write_close_callback, code);
     }
     internal[1] = [0, -1025106484, code];
     var read_close_callback = internal[6];
     clean_up_reader_fields(internal);
     return caml_call1(read_close_callback, code);
    }
    function abort(exn){
     var _F_ = internal[1];
     if(typeof _F_ !== "number") return -216426513 <= _F_[1] ? 0 : 0;
     if(814535476 <= _F_){
      internal[1] = [0, -216426513, exn];
      var write_abort_callback = internal[10];
      clean_up_writer_fields(internal);
      return caml_call1(write_abort_callback, exn);
     }
     internal[1] = [0, -216426513, exn];
     var read_abort_callback = internal[7];
     clean_up_reader_fields(internal);
     return caml_call1(read_abort_callback, exn);
    }
    var
     reader = [0, read, close, abort],
     writer = [0, data, flush, ping, pong, close, abort];
    return [0, reader, writer];
   }
   function forward(reader, stream){
    function loop(param){
     var _u_ = stream[2][6], _v_ = stream[2][5];
     function _w_(buffer, offset, length){
      return caml_call6
              (stream[2][4],
               buffer,
               offset,
               length,
               reader[2],
               reader[3],
               loop);
     }
     function _x_(buffer, offset, length){
      return caml_call6
              (stream[2][3],
               buffer,
               offset,
               length,
               reader[2],
               reader[3],
               loop);
     }
     function _y_(param){
      return caml_call3(stream[2][2], reader[2], reader[3], loop);
     }
     function _z_(buffer, offset, length, binary, fin){
      return caml_call8
              (stream[2][1],
               buffer,
               offset,
               length,
               binary,
               fin,
               reader[2],
               reader[3],
               loop);
     }
     return caml_call6(reader[1], _z_, _y_, _x_, _w_, _v_, _u_);
    }
    return loop(0);
   }
   function read_convenience(stream){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1];
    function close(code){return caml_call2(Lwt[2], resolver, 0);}
    function abort(exn){return caml_call2(Lwt[3], resolver, exn);}
    function loop(param){
     function _o_(buffer, offset, length){return loop(0);}
     function _p_(buffer, offset, length){
      return caml_call6
              (stream[2][4], buffer, offset, length, close, abort, loop);
     }
     function _q_(buffer, offset, length, binary, fin){
      var
       _r_ = caml_call3(Bigstringaf[5], buffer, offset, length),
       _s_ = caml_call1(Bigstringaf[8], _r_),
       _t_ = caml_call1(Stdlib_Option[2], _s_);
      return caml_call1(caml_call1(Lwt[2], resolver), _t_);
     }
     return caml_call6(stream[1][1], _q_, loop, _p_, _o_, close, abort);
    }
    loop(0);
    return promise;
   }
   function read_until_close(stream){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1],
     length = [0, 0],
     buffer = [0, caml_call1(Bigstringaf[1], 4096)];
    function close(code){
     var
      _m_ = caml_call3(Bigstringaf[5], buffer[1], 0, length[1]),
      _n_ = caml_call1(Bigstringaf[8], _m_);
     return caml_call1(caml_call1(Lwt[2], resolver), _n_);
    }
    function abort(exn){return caml_call2(Lwt[3], resolver, exn);}
    function loop(param){
     function _j_(buffer, offset, length){return loop(0);}
     function _k_(buffer, offset, length){
      return caml_call6
              (stream[2][4], buffer, offset, length, close, abort, loop);
     }
     function _l_(chunk, offset, chunk_length, binary, fin){
      var new_length = length[1] + chunk_length | 0;
      if(caml_call1(Bigstringaf[6], buffer[1]) < new_length){
       var new_buffer = caml_call1(Bigstringaf[1], new_length * 2 | 0);
       caml_call5(Bigstringaf[23], buffer[1], 0, new_buffer, 0, length[1]);
       buffer[1] = new_buffer;
      }
      caml_call5
       (Bigstringaf[23], chunk, offset, buffer[1], length[1], chunk_length);
      length[1] = new_length;
      return loop(0);
     }
     return caml_call6(stream[1][1], _l_, loop, _k_, _j_, close, abort);
    }
    loop(0);
    return promise;
   }
   var
    Dream_pure_Stream =
      [0,
       reader,
       pipe,
       forward,
       no_reader,
       no_writer,
       stream,
       null$0,
       empty,
       string,
       close,
       abort,
       read,
       read_convenience,
       read_until_close,
       write,
       flush,
       ping,
       pong];
   runtime.caml_register_global(10, Dream_pure_Stream, "Dream_pure__Stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_pure__Status
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Unknown = "Unknown",
    _a_ = [0, "Reset Content"],
    _b_ = [0, "Service Unavailable"],
    _c_ = [0, "Method Not Allowed"],
    _d_ = [0, "Internal Server Error"],
    _e_ = [0, "Gone"],
    _f_ = [0, "Payment Required"],
    _g_ = [0, "No Content"],
    _h_ = [0, "Upgrade Required"],
    _i_ = [0, "Too Many Requests"],
    _j_ = [0, "See Other"],
    _k_ = [0, "Accepted"],
    _l_ = [0, "Found"],
    _m_ = [0, "Temporary Redirect"],
    _n_ = [0, "Bad Gateway"],
    _o_ = [0, "Unauthorized"],
    _p_ = [0, "Request Timeout"],
    _q_ = [0, "Continue"],
    _r_ = [0, "Request Header Fields Too Large"],
    _s_ = [0, "Precondition Required"],
    _t_ = [0, "Range Not Satisfiable"],
    _u_ = [0, "Too Early"],
    _v_ = [0, "Partial Content"],
    _w_ = [0, "OK"],
    _x_ = [0, "Unavailable For Legal Reasons"],
    _y_ = [0, "Conflict"],
    _z_ = [0, "Not Found"],
    _A_ = [0, "Moved Permanently"],
    _B_ = [0, "Gateway Timeout"],
    _C_ = [0, "Permanent Redirect"],
    _D_ = [0, "Not Acceptable"],
    _E_ = [0, "Expectation Failed"],
    _F_ = [0, "Forbidden"],
    _G_ = [0, "Switching Protocols"],
    _H_ = [0, "Misdirected Request"],
    _I_ = [0, "Created"],
    _J_ = [0, "Payload Too Large"],
    _K_ = [0, "Proxy Authentication Required"],
    _L_ = [0, "Multiple Choices"],
    _M_ = [0, "Length Required"],
    _N_ = [0, "URI Too Long"],
    _O_ = [0, "Non-Authoritative Information"],
    _P_ = [0, "HTTP Version Not Supported"],
    _R_ = [0, "Bad Request"],
    _S_ = [0, "Not Implemented"],
    _T_ = [0, "Unsupported Media Type"],
    _U_ = [0, "Not Modified"],
    _Q_ = [0, "Precondition Failed"],
    _V_ = [0, "Variant Also Negotiates"],
    _W_ = [0, "Insufficient Storage"],
    _X_ = [0, "Loop Detected"],
    _Y_ = [0, "Not Extended"],
    _Z_ = [0, "Network Authentication Required"],
    ___ = [0, "I'm a teapot"],
    _$_ = [0, "Unprocessable Entity"],
    _aa_ = [0, "Locked"],
    _ab_ = [0, "Failed Dependency"],
    _ad_ = [0, "Switch Proxy"],
    _ac_ = [0, "Use Proxy"],
    _ae_ = [0, "IM Used"],
    _af_ = [0, "Already Reported"],
    _ag_ = [0, "Multi-Status"],
    _ai_ = [0, "Early Hints"],
    _ah_ = [0, "Processing"];
   function is_informational(param){
    a:
    {
     if(typeof param === "number"){
      if(-454208630 !== param && 192584839 !== param) break a;
      return 1;
     }
     var code = param[2];
     if(100 <= code && 199 >= code) return 1;
    }
    return 0;
   }
   function is_successful(param){
    a:
    {
     if(typeof param === "number"){
      if(48647480 <= param){
       if(566851975 !== param && 769530875 !== param && 1063161673 > param)
        break a;
      }
      else if(-915700886 !== param && -558113336 !== param && 17692 > param)
       break a;
      return 1;
     }
     var code = param[2];
     if(200 <= code && 299 >= code) return 1;
    }
    return 0;
   }
   function is_redirection(param){
    a:
    {
     if(typeof param === "number"){
      if(-82278737 <= param){
       if(566851975 === param) break a;
       if(339662859 <= param){
        if(629682905 <= param) break a;
       }
       else if(-36502890 <= param) break a;
      }
      else if
       (-831421053 !== param && -128210227 !== param && -1030633610 <= param)
       break a;
      return 1;
     }
     var code = param[2];
     if(300 <= code && 399 >= code) return 1;
    }
    return 0;
   }
   function is_client_error(param){
    a:
    {
     if(typeof param === "number"){
      if(-128210227 <= param)
       if(339662858 <= param){
        if(769530875 === param) break a;
        if(798549870 <= param){
         if(844547326 !== param) break a;
        }
        else if(581896613 > param) break a;
       }
       else{
        if(192584839 === param) break a;
        if(17692 <= param){
         if(42915580 > param) break a;
        }
        else if(-36502890 > param) break a;
       }
      else
       if(-831421053 <= param){
        if(-558113336 === param || -454208630 === param || -831421052 > param)
         break a;
       }
       else{
        if(-964644842 === param) break a;
        if(-922442620 <= param){
         if(-868560614 > param) break a;
        }
        else if(-1030633610 > param) break a;
       }
      return 1;
     }
     var code = param[2];
     if(400 <= code && 499 >= code) return 1;
    }
    return 0;
   }
   function is_server_error(param){
    a:
    {
     if(typeof param === "number"){
      if(-82278737 <= param){
       if(339662858 !== param && 798549870 !== param && 906278342 !== param)
        break a;
      }
      else if
       (-964644842 !== param && -922442620 !== param && -118781978 > param)
       break a;
      return 1;
     }
     var code = param[2];
     if(500 <= code && 599 >= code) return 1;
    }
    return 0;
   }
   function status_to_int(param){
    if(typeof param === "number")
     return -10298236 <= param
             ? 398750242
               <= param
               ? 784803128
                 <= param
                 ? 798549870
                   <= param
                   ? 906278342
                     <= param
                     ? 1063161673 <= param ? 205 : 503
                     : 844547326 <= param ? 405 : 500
                   : 792903807 <= param ? 410 : 402
                 : 581896612
                   <= param
                   ? 637401314
                     <= param
                     ? 769530875 <= param ? 204 : 426
                     : 629682905 <= param ? 429 : 303
                   : 566851975 <= param ? 202 : 302
               : 166639020
                 <= param
                 ? 201845297
                   <= param
                   ? 339662858
                     <= param
                     ? 391793418 <= param ? 307 : 502
                     : 324098644 <= param ? 401 : 408
                   : 192584839 <= param ? 100 : 431
                 : 42915579
                   <= param
                   ? 108106591
                     <= param
                     ? 164766886 <= param ? 428 : 416
                     : 48647480 <= param ? 425 : 206
                   : 17692 <= param ? 200 : 451
             : -692678401
               <= param
               ? -332958770
                 <= param
                 ? -118781978
                   <= param
                   ? -36502890
                     <= param
                     ? -36288910 <= param ? 409 : 404
                     : -82278737 <= param ? 301 : 504
                   : -128210227 <= param ? 308 : 406
                 : -458928145
                   <= param
                   ? -438114087
                     <= param
                     ? -367911712 <= param ? 417 : 403
                     : -454208630 <= param ? 101 : 421
                   : -558113336 <= param ? 201 : 413
               : -922442620
                 <= param
                 ? -868560614
                   <= param
                   ? -831421053
                     <= param
                     ? -761991147 <= param ? 407 : 300
                     : -863769832 <= param ? 411 : 414
                   : -915700886 <= param ? 203 : 505
                 : -982963900
                   === param
                   ? 412
                   : -964644842
                     <= param
                     ? -949323947 <= param ? 400 : 501
                     : -970181089 <= param ? 415 : 304;
    var code = param[2];
    return code;
   }
   function int_to_status(code){
    if(207 <= code){
     if(309 <= code){
      var switcher = code - 400 | 0;
      if(105 >= switcher >>> 0)
       switch(switcher){
         case 0:
          return -949323947;
         case 1:
          return 324098644;
         case 2:
          return 784803128;
         case 3:
          return -438114087;
         case 4:
          return -36502890;
         case 5:
          return 844547326;
         case 6:
          return -332958770;
         case 7:
          return -761991147;
         case 8:
          return 201845297;
         case 9:
          return -36288910;
         case 10:
          return 792903807;
         case 11:
          return -863769832;
         case 12:
          return -982963900;
         case 13:
          return -692678401;
         case 14:
          return -868560614;
         case 15:
          return -970181089;
         case 16:
          return 108106591;
         case 17:
          return -367911712;
         case 21:
          return -458928145;
         case 25:
          return 48647480;
         case 26:
          return 637401314;
         case 28:
          return 164766886;
         case 29:
          return 629682905;
         case 31:
          return 166639020;
         case 51:
          return -10298236;
         case 100:
          return 798549870;
         case 101:
          return -964644842;
         case 102:
          return 339662858;
         case 103:
          return 906278342;
         case 104:
          return -118781978;
         case 105:
          return -922442620;
       }
     }
     else if(300 <= code)
      switch(code - 300 | 0){
        case 0:
         return -831421053;
        case 1:
         return -82278737;
        case 2:
         return 398750242;
        case 3:
         return 581896612;
        case 4:
         return -1030633611;
        case 7:
         return 391793418;
        case 8:
         return -128210227;
      }
    }
    else{
     var switcher$0 = code - 100 | 0;
     if(1 >= switcher$0 >>> 0) return switcher$0 ? -454208630 : 192584839;
     if(100 <= switcher$0)
      switch(switcher$0 - 100 | 0){
        case 0:
         return 17692;
        case 1:
         return -558113336;
        case 2:
         return 566851975;
        case 3:
         return -915700886;
        case 4:
         return 769530875;
        case 5:
         return 1063161673;
        default: return 42915579;
      }
    }
    return [0, 982539090, code];
   }
   function status_to_reason(status){
    a:
    {
     if(typeof status !== "number" && 982539090 === status[1]){
      var code = status[2], status$0 = int_to_status(code);
      break a;
     }
     var status$0 = status;
    }
    if(typeof status$0 === "number")
     return -10298236 <= status$0
             ? 398750242
               <= status$0
               ? 784803128
                 <= status$0
                 ? 798549870
                   <= status$0
                   ? 906278342
                     <= status$0
                     ? 1063161673 <= status$0 ? _a_ : _b_
                     : 844547326 <= status$0 ? _c_ : _d_
                   : 792903807 <= status$0 ? _e_ : _f_
                 : 581896612
                   <= status$0
                   ? 637401314
                     <= status$0
                     ? 769530875 <= status$0 ? _g_ : _h_
                     : 629682905 <= status$0 ? _i_ : _j_
                   : 566851975 <= status$0 ? _k_ : _l_
               : 166639020
                 <= status$0
                 ? 201845297
                   <= status$0
                   ? 339662858
                     <= status$0
                     ? 391793418 <= status$0 ? _m_ : _n_
                     : 324098644 <= status$0 ? _o_ : _p_
                   : 192584839 <= status$0 ? _q_ : _r_
                 : 42915579
                   <= status$0
                   ? 108106591
                     <= status$0
                     ? 164766886 <= status$0 ? _s_ : _t_
                     : 48647480 <= status$0 ? _u_ : _v_
                   : 17692 <= status$0 ? _w_ : _x_
             : -692678401
               <= status$0
               ? -332958770
                 <= status$0
                 ? -118781978
                   <= status$0
                   ? -36502890
                     <= status$0
                     ? -36288910 <= status$0 ? _y_ : _z_
                     : -82278737 <= status$0 ? _A_ : _B_
                   : -128210227 <= status$0 ? _C_ : _D_
                 : -458928145
                   <= status$0
                   ? -438114087
                     <= status$0
                     ? -367911712 <= status$0 ? _E_ : _F_
                     : -454208630 <= status$0 ? _G_ : _H_
                   : -558113336 <= status$0 ? _I_ : _J_
               : -922442620
                 <= status$0
                 ? -868560614
                   <= status$0
                   ? -831421053
                     <= status$0
                     ? -761991147 <= status$0 ? _K_ : _L_
                     : -863769832 <= status$0 ? _M_ : _N_
                   : -915700886 <= status$0 ? _O_ : _P_
                 : -982963900
                   === status$0
                   ? _Q_
                   : -964644842
                     <= status$0
                     ? -949323947 <= status$0 ? _R_ : _S_
                     : -970181089 <= status$0 ? _T_ : _U_;
    var _ak_ = status$0[2];
    if(229 <= _ak_)
     if(418 <= _ak_){
      if(506 <= _ak_){
       if(512 > _ak_)
        switch(_ak_ - 506 | 0){
          case 0:
           return _V_;
          case 1:
           return _W_;
          case 2:
           return _X_;
          case 3: break;
          case 4:
           return _Y_;
          default: return _Z_;
        }
      }
      else if(425 > _ak_)
       switch(_ak_ - 418 | 0){
         case 0:
          return ___;
         case 4:
          return _$_;
         case 5:
          return _aa_;
         case 6:
          return _ab_;
       }
     }
     else{if(305 === _ak_) return _ac_; if(306 === _ak_) return _ad_;}
    else if(207 <= _ak_){
     if(209 > _ak_) return 208 <= _ak_ ? _af_ : _ag_;
     if(228 <= _ak_) return _ae_;
    }
    else{if(102 === _ak_) return _ah_; if(103 === _ak_) return _ai_;}
    return 0;
   }
   function status_to_string(status){
    var match = status_to_reason(status);
    if(match){var reason = match[1]; return reason;}
    if(typeof status !== "number" && 982539090 === status[1]){
     var code = status[2];
     return caml_call1(Stdlib[33], code);
    }
    return cst_Unknown;
   }
   function normalize_status(status){
    if(typeof status !== "number" && 982539090 === status[1]){var code = status[2]; return int_to_status(code);}
    return status;
   }
   function status_codes_equal(status_1, status_2){
    var _aj_ = normalize_status(status_2);
    return runtime.caml_equal(normalize_status(status_1), _aj_);
   }
   var
    Dream_pure_Status =
      [0,
       is_informational,
       is_successful,
       is_redirection,
       is_client_error,
       is_server_error,
       status_to_int,
       int_to_status,
       status_to_reason,
       status_to_string,
       normalize_status,
       status_codes_equal];
   runtime.caml_register_global(65, Dream_pure_Status, "Dream_pure__Status");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_pure__Method
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_CONNECT$0 = "CONNECT",
    cst_DELETE$0 = "DELETE",
    cst_GET$0 = "GET",
    cst_HEAD$0 = "HEAD",
    cst_OPTIONS$0 = "OPTIONS",
    cst_PATCH$0 = "PATCH",
    cst_POST$0 = "POST",
    cst_PUT$0 = "PUT",
    cst_TRACE$0 = "TRACE",
    caml_string_notequal = runtime.caml_string_notequal,
    cst_PATCH = cst_PATCH$0,
    cst_POST = cst_POST$0,
    cst_HEAD = cst_HEAD$0,
    cst_CONNECT = cst_CONNECT$0,
    cst_DELETE = cst_DELETE$0,
    cst_TRACE = cst_TRACE$0,
    cst_PUT = cst_PUT$0,
    cst_GET = cst_GET$0,
    cst_OPTIONS = cst_OPTIONS$0;
   function method_to_string(param){
    if(typeof param === "number")
     return 357830602 <= param
             ? 492530731
               === param
               ? cst_DELETE
               : 891112544
                 <= param
                 ? 994393768 <= param ? cst_PATCH : cst_POST
                 : 801894688 <= param ? cst_HEAD : cst_CONNECT
             : 3997359
               <= param
               ? 336447077 <= param ? cst_TRACE : cst_PUT
               : 3546230 <= param ? cst_GET : cst_OPTIONS;
    var method = param[2];
    return method;
   }
   function string_to_method(method){
    return caml_string_notequal(method, cst_CONNECT$0)
            ? caml_string_notequal
               (method, cst_DELETE$0)
              ? caml_string_notequal
                 (method, cst_GET$0)
                ? caml_string_notequal
                   (method, cst_HEAD$0)
                  ? caml_string_notequal
                     (method, cst_OPTIONS$0)
                    ? caml_string_notequal
                       (method, cst_PATCH$0)
                      ? caml_string_notequal
                         (method, cst_POST$0)
                        ? caml_string_notequal
                           (method, cst_PUT$0)
                          ? caml_string_notequal
                             (method, cst_TRACE$0)
                            ? [0, 1039100673, method]
                            : 336447077
                          : 3997359
                        : 891112544
                      : 994393768
                    : -539883714
                  : 801894688
                : 3546230
              : 492530731
            : 357830602;
   }
   function normalize_method(method){
    if(typeof method !== "number" && 1039100673 === method[1]){
     var _b_ = method[2];
     return caml_string_notequal(_b_, cst_CONNECT$0)
             ? caml_string_notequal
                (_b_, cst_DELETE$0)
               ? caml_string_notequal
                  (_b_, cst_GET$0)
                 ? caml_string_notequal
                    (_b_, cst_HEAD$0)
                   ? caml_string_notequal
                      (_b_, cst_OPTIONS$0)
                     ? caml_string_notequal
                        (_b_, cst_PATCH$0)
                       ? caml_string_notequal
                          (_b_, cst_POST$0)
                         ? caml_string_notequal
                            (_b_, cst_PUT$0)
                           ? caml_string_notequal
                              (_b_, cst_TRACE$0)
                             ? method
                             : 336447077
                           : 3997359
                         : 891112544
                       : 994393768
                     : -539883714
                   : 801894688
                 : 3546230
               : 492530731
             : 357830602;
    }
    return method;
   }
   function methods_equal(method_1, method_2){
    var _a_ = normalize_method(method_2);
    return runtime.caml_equal(normalize_method(method_1), _a_);
   }
   var
    Dream_pure_Method =
      [0, method_to_string, string_to_method, normalize_method, methods_equal];
   runtime.caml_register_global(27, Dream_pure_Method, "Dream_pure__Method");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_pure__Message
//# unitInfo: Requires: Bigstringaf, Dream_pure__Status, Dream_pure__Stream, Hmap, Lwt, Stdlib, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Content_Length$2 = "Content-Length",
    cst_Transfer_Encoding$3 = "Transfer-Encoding",
    cst_chunked$1 = "chunked",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "/",
    Stdlib = global_data.Stdlib,
    Lwt = global_data.Lwt,
    Bigstringaf = global_data.Bigstringaf,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Hmap = global_data.Hmap,
    Fields = caml_call1(Hmap[18], [0]),
    cst_Content_Length$1 = cst_Content_Length$2,
    cst_Transfer_Encoding$2 = cst_Transfer_Encoding$3,
    cst_Content_Length = cst_Content_Length$2,
    cst_Transfer_Encoding = cst_Transfer_Encoding$3,
    cst_Content_Length$0 = cst_Content_Length$2,
    cst_chunked = cst_chunked$1,
    cst_Transfer_Encoding$0 = cst_Transfer_Encoding$3,
    cst_chunked$0 = cst_chunked$1,
    cst_Transfer_Encoding$1 = cst_Transfer_Encoding$3;
   function request(method, opt, _W_, client_stream, server_stream){
    if(opt) var sth = opt[1], target = sth; else var target = cst;
    if(_W_) var sth$0 = _W_[1], headers = sth$0; else var headers = 0;
    if(method)
     var method$0 = method[1], method$1 = method$0;
    else
     var method$1 = 3546230;
    return [0,
            0,
            [0, method$1, target],
            headers,
            client_stream,
            server_stream,
            0,
            Fields[2]];
   }
   function method(request){return request[2][1];}
   function target(request){return request[2][2];}
   function set_method(request, method){request[2][1] = method; return 0;}
   function set_target(request, target){request[2][2] = target; return 0;}
   function response(status, code, opt, client_stream, server_stream){
    if(opt) var sth = opt[1], headers = sth; else var headers = 0;
    if(status)
     var status$0 = status[1], status$1 = status$0;
    else if(code)
     var
      code$0 = code[1],
      status$1 = caml_call1(Dream_pure_Status[7], code$0);
    else
     var status$1 = 17692;
    return [0,
            1,
            [0, status$1, 0],
            headers,
            client_stream,
            server_stream,
            0,
            Fields[2]];
   }
   function status(response){return response[2][1];}
   function set_status(response, status){response[2][1] = status; return 0;}
   function header_basic(name, message){
    var name$0 = caml_call1(Stdlib_String[27], name), _U_ = message[3];
    function _V_(param){
     var name = param[1];
     return caml_string_equal(caml_call1(Stdlib_String[27], name), name$0);
    }
    return caml_call1(caml_call1(Stdlib_List[39], _V_), _U_)[2];
   }
   function header(message, name){
    try{var _S_ = [0, header_basic(name, message)]; return _S_;}
    catch(_T_){
     var _R_ = caml_wrap_exception(_T_);
     if(_R_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_R_, 0);
    }
   }
   function headers(message, name){
    var
     name$0 = caml_call1(Stdlib_String[27], name),
     _N_ = message[3],
     _O_ = 0;
    function _P_(matched, param){
     var value = param[2], name = param[1];
     return caml_string_equal(caml_call1(Stdlib_String[27], name), name$0)
             ? [0, value, matched]
             : matched;
    }
    var _Q_ = caml_call1(caml_call2(Stdlib_List[26], _P_, _O_), _N_);
    return caml_call1(Stdlib_List[10], _Q_);
   }
   function all_headers(message){return message[3];}
   function has_header(message, name){
    try{header_basic(name, message); var _L_ = 1; return _L_;}
    catch(_M_){
     var _K_ = caml_wrap_exception(_M_);
     if(_K_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_K_, 0);
    }
   }
   function add_header(message, name, value){
    message[3] = caml_call2(Stdlib[37], message[3], [0, [0, name, value], 0]);
    return 0;
   }
   function drop_header(message, name){
    var name$0 = caml_call1(Stdlib_String[27], name), _I_ = message[3];
    function _J_(param){
     var name = param[1];
     return runtime.caml_string_notequal
             (caml_call1(Stdlib_String[27], name), name$0);
    }
    message[3] = caml_call1(caml_call1(Stdlib_List[44], _J_), _I_);
    return 0;
   }
   function set_header(message, name, value){
    drop_header(message, name);
    return add_header(message, name, value);
   }
   function set_all_headers(message, headers){message[3] = headers; return 0;}
   function sort_headers(headers){
    function _G_(param, _H_){
     var name = _H_[1], name$0 = param[1];
     return runtime.caml_compare(name$0, name);
    }
    return caml_call2(Stdlib_List[60], _G_, headers);
   }
   function lowercase_headers(message){
    var _E_ = message[3];
    function _F_(param){
     var value = param[2], name = param[1];
     return [0, caml_call1(Stdlib_String[27], name), value];
    }
    var headers = caml_call1(caml_call1(Stdlib_List[20], _F_), _E_);
    message[3] = headers;
    return 0;
   }
   function body(message){
    var match = message[6];
    if(match){var body_promise = match[1]; return body_promise;}
    var
     stream = message[1] ? message[4] : message[5],
     body_promise$0 = caml_call1(Dream_pure_Stream[14], stream);
    message[6] = [0, body_promise$0];
    return body_promise$0;
   }
   function set_body(message, body){
    message[6] = [0, caml_call1(Lwt[4], body)];
    return message[1]
            ? (message[4] = caml_call1(Dream_pure_Stream[9], body), 0)
            : (message[5] = caml_call1(Dream_pure_Stream[9], body), 0);
   }
   function set_content_length_headers(message){
    if(has_header(message, cst_Content_Length)) return 0;
    if(has_header(message, cst_Transfer_Encoding)) return 0;
    var match = message[6];
    if(! match)
     return add_header(message, cst_Transfer_Encoding$1, cst_chunked$0);
    var body_promise = match[1], match$0 = caml_call1(Lwt[79], body_promise);
    if(! match$0)
     return add_header(message, cst_Transfer_Encoding$0, cst_chunked);
    var
     body = match$0[1],
     length = caml_call1(Stdlib[33], caml_ml_string_length(body));
    return add_header(message, cst_Content_Length$0, length);
   }
   function drop_content_length_headers(message){
    drop_header(message, cst_Content_Length$1);
    return drop_header(message, cst_Transfer_Encoding$2);
   }
   function read(stream){return caml_call1(Dream_pure_Stream[13], stream);}
   function write(stream, chunk){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1],
     length = caml_ml_string_length(chunk),
     buffer = caml_call3(Bigstringaf[3], 0, length, chunk);
    function _B_(param){return caml_call2(Lwt[2], resolver, 0);}
    function _C_(exn){return caml_call2(Lwt[3], resolver, exn);}
    function _D_(code){return caml_call2(Lwt[3], resolver, Stdlib[12]);}
    caml_call9
     (Dream_pure_Stream[15], stream, buffer, 0, length, 0, 1, _D_, _C_, _B_);
    return promise;
   }
   function flush(stream){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1],
     _y_ = caml_call1(Lwt[2], resolver);
    function _z_(exn){return caml_call2(Lwt[3], resolver, exn);}
    function _A_(code){return caml_call2(Lwt[3], resolver, Stdlib[12]);}
    caml_call4(Dream_pure_Stream[16], stream, _A_, _z_, _y_);
    return promise;
   }
   function close(stream){
    caml_call2(Dream_pure_Stream[10], stream, 1000);
    return Lwt[36];
   }
   function client_stream(message){return message[4];}
   function server_stream(message){return message[5];}
   function set_client_stream(message, client_stream){message[4] = client_stream; return 0;
   }
   function set_server_stream(message, server_stream){message[5] = server_stream; return 0;
   }
   function create_websocket(response){
    var
     match = caml_call1(Dream_pure_Stream[2], 0),
     in_writer = match[2],
     in_reader = match[1],
     match$0 = caml_call1(Dream_pure_Stream[2], 0),
     out_writer = match$0[2],
     out_reader = match$0[1],
     client_stream = caml_call2(Dream_pure_Stream[6], out_reader, in_writer),
     server_stream = caml_call2(Dream_pure_Stream[6], in_reader, out_writer),
     websocket = [0, client_stream, server_stream];
    response[2][2] = [0, websocket];
    return websocket;
   }
   function get_websocket(response){return response[2][2];}
   function close_websocket(opt, param){
    var server_stream = param[2], client_stream = param[1];
    if(opt) var sth = opt[1], code = sth; else var code = 1000;
    caml_call2(Dream_pure_Stream[10], client_stream, code);
    caml_call2(Dream_pure_Stream[10], server_stream, code);
    return Lwt[36];
   }
   function receive_fragment(stream){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1];
    function close(code){return caml_call2(Lwt[2], resolver, 0);}
    function abort(exn){return caml_call2(Lwt[3], resolver, exn);}
    function loop(param){
     function _u_(buffer, offset, length){return loop(0);}
     function _v_(buffer, offset, length){
      return caml_call7
              (Dream_pure_Stream[18],
               stream,
               buffer,
               offset,
               length,
               close,
               abort,
               loop);
     }
     function _w_(buffer, offset, length, binary, fin){
      var
       _x_ = caml_call3(Bigstringaf[5], buffer, offset, length),
       string = caml_call1(Bigstringaf[8], _x_),
       text_or_binary = binary ? 564146209 : 936573133,
       end_of_message = fin ? 855729315 : -3253748;
      return caml_call2
              (Lwt[2],
               resolver,
               [0, [0, string, text_or_binary, end_of_message]]);
     }
     return caml_call7
             (Dream_pure_Stream[12],
              stream,
              _w_,
              loop,
              _v_,
              _u_,
              close,
              abort);
    }
    loop(0);
    return promise;
   }
   function receive(stream){
    function _i_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
    function _j_(param){
     if(! param) return Lwt[37];
     var message = param[1][1];
     return caml_call1(Lwt[4], [0, message]);
    }
    function _k_(param){
     function receive_continuations(text_or_binary, acc){
      function _p_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
      function _q_(param){
       if(! param) return caml_call1(Lwt[4], [0, [0, acc, text_or_binary]]);
       var _s_ = param[1], fragment = _s_[1];
       if(855729315 > _s_[3])
        return receive_continuations
                (text_or_binary, caml_call2(Stdlib[28], acc, fragment));
       var
        _t_ = [0, [0, caml_call2(Stdlib[28], acc, fragment), text_or_binary]];
       return caml_call1(Lwt[4], _t_);
      }
      function _r_(param){return receive_fragment(stream);}
      return caml_call3(Lwt[9], _r_, _q_, _p_);
     }
     function _l_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
     function _m_(param){
      if(! param) return Lwt[37];
      var _o_ = param[1], text_or_binary = _o_[2], fragment = _o_[1];
      return 855729315 <= _o_[3]
              ? caml_call1(Lwt[4], [0, [0, fragment, text_or_binary]])
              : receive_continuations(text_or_binary, fragment);
     }
     function _n_(param){return receive_fragment(stream);}
     return caml_call3(Lwt[9], _n_, _m_, _l_);
    }
    return caml_call3(Lwt[9], _k_, _j_, _i_);
   }
   function send(text_or_binary, end_of_message, stream, data){
    var
     match = caml_call1(Lwt[1], 0),
     resolver = match[2],
     promise = match[1];
    if(text_or_binary)
     var _d_ = 936573133 <= text_or_binary[1] ? 0 : 1, binary = _d_;
    else
     var binary = 0;
    if(end_of_message)
     var _e_ = 855729315 <= end_of_message[1] ? 1 : 0, fin = _e_;
    else
     var fin = 1;
    var
     length = caml_ml_string_length(data),
     buffer = caml_call3(Bigstringaf[3], 0, length, data);
    function _f_(param){return caml_call2(Lwt[2], resolver, 0);}
    function _g_(exn){return caml_call2(Lwt[3], resolver, exn);}
    function _h_(code){return caml_call2(Lwt[3], resolver, Stdlib[12]);}
    caml_call9
     (Dream_pure_Stream[15],
      stream,
      buffer,
      0,
      length,
      binary,
      fin,
      _h_,
      _g_,
      _f_);
    return promise;
   }
   function no_middleware(handler, request){return caml_call1(handler, request);
   }
   function pipeline(middlewares, handler){
    if(! middlewares) return handler;
    var more = middlewares[2], middleware = middlewares[1];
    return caml_call1(middleware, pipeline(more, handler));
   }
   function new_field(name, show_value, param){
    return caml_call1(Fields[1][1], [0, name, show_value]);
   }
   function field(message, key){
    return caml_call2(Fields[8], key, message[7]);
   }
   function set_field(message, key, value){
    message[7] = caml_call3(Fields[5], key, value, message[7]);
    return 0;
   }
   function fold_fields(f, initial, message){
    var _a_ = message[7];
    function _b_(param, accumulator){
     var
      value = param[2],
      key = param[1],
      match = caml_call1(Fields[1][2], key),
      _c_ = match[1];
     if(_c_){
      var match$0 = match[2];
      if(match$0){
       var show_value = match$0[1], name = _c_[1];
       return caml_call3(f, name, caml_call1(show_value, value), accumulator);
      }
     }
     return accumulator;
    }
    return caml_call3(Fields[11], _b_, _a_, initial);
   }
   var
    Dream_pure_Message =
      [0,
       request,
       method,
       target,
       set_method,
       set_target,
       response,
       status,
       set_status,
       header,
       headers,
       all_headers,
       has_header,
       add_header,
       drop_header,
       set_header,
       set_all_headers,
       sort_headers,
       lowercase_headers,
       body,
       set_body,
       set_content_length_headers,
       drop_content_length_headers,
       read,
       write,
       flush,
       close,
       client_stream,
       server_stream,
       set_client_stream,
       set_server_stream,
       create_websocket,
       get_websocket,
       close_websocket,
       receive,
       receive_fragment,
       send,
       no_middleware,
       pipeline,
       new_field,
       field,
       set_field,
       fold_fields];
   runtime.caml_register_global(18, Dream_pure_Message, "Dream_pure__Message");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_pure__Formats
//# unitInfo: Requires: Base64, Ptime, Stdlib, Stdlib__Buffer, Stdlib__Char, Stdlib__List, Stdlib__Option, Stdlib__Printf, Stdlib__String, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$10 = cst$11,
    cst$9 = "/",
    cst$8 = cst$11,
    cst$7 = ",",
    partial =
      [12,
       58,
       [4, 3, [0, 2, 2], 0, [12, 58, [4, 3, [0, 2, 2], 0, [11, " GMT", 0]]]]],
    partial$0 = [0, 2, 2],
    cst$5 = cst$11,
    cst$4 = cst$11,
    cst$3 = cst$11,
    cst$2 = cst$11,
    cst$1 = cst$11,
    cst$0 = cst$11,
    cst = cst$11,
    cst$6 = cst$11,
    text_html = "text/html; charset=utf-8",
    application_json = "application/json",
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Uri = global_data.Uri,
    Stdlib_Char = global_data.Stdlib__Char,
    Ptime = global_data.Ptime,
    Stdlib_Option = global_data.Stdlib__Option,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base64 = global_data.Base64,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    _j_ = [0, cst$11, [0, cst$11, 0]],
    cst_Wed = "Wed",
    cst_Tue = "Tue",
    cst_Thu = "Thu",
    cst_Sun = "Sun",
    cst_Sat = "Sat",
    cst_Fri = "Fri",
    cst_Mon = "Mon",
    _c_ = [0, "src/pure/formats.ml", 69, 15],
    cst_Jan = "Jan",
    cst_Feb = "Feb",
    cst_Mar = "Mar",
    cst_Apr = "Apr",
    cst_May = "May",
    cst_Jun = "Jun",
    cst_Jul = "Jul",
    cst_Aug = "Aug",
    cst_Sep = "Sep",
    cst_Oct = "Oct",
    cst_Nov = "Nov",
    cst_Dec = "Dec",
    _d_ =
      [0,
       [11,
        "; Expires=",
        [2,
         0,
         [11,
          ", ",
          [4,
           3,
           [0, 2, 2],
           0,
           [12,
            32,
            [2,
             0,
             [12, 32, [4, 3, 0, 0, [12, 32, [4, 3, partial$0, 0, partial]]]]]]]]]],
       "; Expires=%s, %02i %s %i %02i:%02i:%02i GMT"],
    _e_ =
      [0, [11, "; Max-Age=", [8, [0, 0, 0], 0, [0, 0], 0]], "; Max-Age=%.0f"],
    _f_ = [0, [11, "; Domain=", [2, 0, 0]], "; Domain=%s"],
    _g_ = [0, [11, "; Path=", [2, 0, 0]], "; Path=%s"],
    cst_Secure = "; Secure",
    cst_HttpOnly = "; HttpOnly",
    cst_SameSite_None = "; SameSite=None",
    cst_SameSite_Strict = "; SameSite=Strict",
    cst_SameSite_Lax = "; SameSite=Lax",
    _h_ =
      [0,
       [2,
        0,
        [12,
         61,
         [2, 0, [2, 0, [2, 0, [2, 0, [2, 0, [2, 0, [2, 0, [2, 0, 0]]]]]]]]]],
       "%s=%s%s%s%s%s%s%s%s"],
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_lt = "&lt;",
    cst_gt = "&gt;",
    cst_quot = "&quot;",
    cst_amp = "&amp;",
    cst_x27 = "&#x27;";
   function html_escape(s){
    var
     buffer =
       caml_call1(Stdlib_Buffer[1], runtime.caml_ml_string_length(s) * 2 | 0);
    function _E_(c){
     if(40 <= c){
      var switcher = c - 60 | 0;
      if(2 >= switcher >>> 0)
       switch(switcher){
         case 0:
          return caml_call2(Stdlib_Buffer[16], buffer, cst_lt);
         case 1: break;
         default: return caml_call2(Stdlib_Buffer[16], buffer, cst_gt);
       }
     }
     else if(34 <= c)
      switch(c - 34 | 0){
        case 0:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_quot);
        case 4:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_amp);
        case 5:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_x27);
      }
     return caml_call2(Stdlib_Buffer[12], buffer, c);
    }
    caml_call1(caml_call1(Stdlib_String[30], _E_), s);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   function to_base64url(string){
    return caml_call3(Base64[10], _a_, [0, Base64[2]], string);
   }
   function from_base64url(string){
    var match = caml_call5(Base64[8], _b_, [0, Base64[2]], 0, 0, string);
    if(0 !== match[0]) return 0;
    var result = match[1];
    return [0, result];
   }
   function from_cookie(s){
    var
     _y_ = caml_call1(caml_call1(Stdlib_String[17], 59), s),
     _z_ = caml_call1(Stdlib_String[17], 61),
     pairs = caml_call1(caml_call1(Stdlib_List[20], _z_), _y_),
     _A_ = 0;
    function _B_(pairs, param){
     if(param){
      var _C_ = param[2];
      if(_C_ && ! _C_[2]){
       var
        value = _C_[1],
        name = param[1],
        _D_ = caml_call1(Stdlib_String[24], value);
       return [0, [0, caml_call1(Stdlib_String[24], name), _D_], pairs];
      }
     }
     return pairs;
    }
    return caml_call1(caml_call2(Stdlib_List[26], _B_, _A_), pairs);
   }
   function to_set_cookie
   (expires, max_age, domain, path, secure, http_only, same_site, name, value){
    var match = caml_call2(Stdlib_Option[5], expires, Ptime[9]);
    if(match){
     var
      time = match[1],
      match$0 = caml_call2(Ptime[26], 0, time),
      weekday =
        4153708 <= match$0
         ? 4203428
           <= match$0
           ? 4349046 <= match$0 ? cst_Wed : cst_Tue
           : 4200545 <= match$0 ? cst_Thu : cst_Sun
         : 3853996
           === match$0
           ? cst_Mon
           : 4149254 <= match$0 ? cst_Sat : cst_Fri,
      _u_ = caml_call2(Ptime[21], 0, time),
      _v_ = _u_[2][1],
      ss = _v_[3],
      mm = _v_[2],
      hh = _v_[1],
      match$1 = _u_[1],
      d = match$1[3],
      m = match$1[2],
      y = match$1[1],
      switcher = m - 1 | 0;
     if(11 < switcher >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     switch(switcher){
       case 0:
        var month = cst_Jan; break;
       case 1:
        var month = cst_Feb; break;
       case 2:
        var month = cst_Mar; break;
       case 3:
        var month = cst_Apr; break;
       case 4:
        var month = cst_May; break;
       case 5:
        var month = cst_Jun; break;
       case 6:
        var month = cst_Jul; break;
       case 7:
        var month = cst_Aug; break;
       case 8:
        var month = cst_Sep; break;
       case 9:
        var month = cst_Oct; break;
       case 10:
        var month = cst_Nov; break;
       default: var month = cst_Dec;
     }
     var
      seconds = 60 <= ss ? 59 : ss,
      expires$0 =
        caml_call8
         (Stdlib_Printf[4], _d_, weekday, d, month, y, hh, mm, seconds);
    }
    else
     var expires$0 = cst$5;
    if(max_age)
     var
      seconds$0 = max_age[1],
      max_age$0 = caml_call2(Stdlib_Printf[4], _e_, Math.floor(seconds$0));
    else
     var max_age$0 = cst$4;
    if(domain)
     var
      domain$0 = domain[1],
      domain$1 = caml_call2(Stdlib_Printf[4], _f_, domain$0);
    else
     var domain$1 = cst$3;
    if(path)
     var path$0 = path[1], path$1 = caml_call2(Stdlib_Printf[4], _g_, path$0);
    else
     var path$1 = cst$2;
    a:
    {
     if(secure && secure[1]){var secure$0 = cst_Secure; break a;}
     var secure$0 = cst$1;
    }
    a:
    {
     if(http_only && http_only[1]){var http_only$0 = cst_HttpOnly; break a;}
     var http_only$0 = cst$0;
    }
    if(same_site)
     var
      _w_ = same_site[1],
      _x_ =
        3801155 === _w_
         ? cst_SameSite_Lax
         : 870530776 <= _w_ ? cst_SameSite_None : cst_SameSite_Strict,
      same_site$0 = _x_;
    else
     var same_site$0 = cst;
    return caml_call10
            (Stdlib_Printf[4],
             _h_,
             name,
             value,
             expires$0,
             max_age$0,
             domain$1,
             path$1,
             secure$0,
             http_only$0,
             same_site$0);
   }
   function _i_(i){return caml_call1(Stdlib_Char[1], i + 128 | 0);}
   var
    iri_safe_octets = caml_call2(Stdlib_String[2], 128, _i_),
    iri_generic = [0, -198771759, [0, 61643255, iri_safe_octets, cst$6]];
   function to_percent_encoded(opt, string){
    if(opt) var sth = opt[1], international = sth; else var international = 1;
    var component = international ? iri_generic : 61643255;
    return caml_call3(Uri[4], 0, [0, component], string);
   }
   function from_percent_encoded(string){return caml_call1(Uri[6], string);}
   function to_form_urlencoded(dictionary){
    function _s_(param){
     var value = param[2], name = param[1];
     return [0, name, [0, value, 0]];
    }
    var _t_ = caml_call1(caml_call1(Stdlib_List[20], _s_), dictionary);
    return caml_call3(Uri[15], 0, 0, _t_);
   }
   function from_form_urlencoded(string){
    if(caml_string_equal(string, cst$11)) return 0;
    var _q_ = caml_call1(Uri[16], string);
    function _r_(param){
     var values = param[2], name = param[1];
     return [0, name, caml_call2(Stdlib_String[7], cst$7, values)];
    }
    return caml_call1(caml_call1(Stdlib_List[20], _r_), _q_);
   }
   function split_target(string){
    var uri = caml_call1(Uri[7], string), match = caml_call2(Uri[14], 0, uri);
    if(match) var query = match[1], query$0 = query; else var query$0 = cst$8;
    return [0, caml_call2(Uri[26], 0, uri), query$0];
   }
   function filter_components(components){
    var components$0 = components;
    for(;;){
     if(! components$0) return 0;
     var component = components$0[1];
     if(caml_string_notequal(component, cst$11)){
      var components$1 = components$0[2];
      return [0, component, filter_components(components$1)];
     }
     var components$2 = components$0[2];
     if(! components$2) return components$0;
     var components$0 = components$2;
    }
   }
   function from_path(string){
    if(caml_string_equal(string, cst$11))
     var components = 0;
    else
     var
      _p_ = filter_components(caml_call2(Stdlib_String[17], 47, string)),
      components = caml_call1(caml_call1(Stdlib_List[20], Uri[6]), _p_);
    return components;
   }
   function drop_trailing_slash(param){
    if(! param) return 0;
    var component = param[1];
    if(! caml_string_notequal(component, cst$11) && ! param[2]) return 0;
    var components = param[2];
    return [0, component, drop_trailing_slash(components)];
   }
   function to_path(opt, _k_, components){
    if(opt) var sth = opt[1], relative = sth; else var relative = 0;
    if(_k_)
     var sth$0 = _k_[1], international = sth$0;
    else
     var international = 1;
    function filter_empty_components(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var component = param$0[1];
      if(! caml_string_notequal(component, cst$11)){
       var path$0 = param$0[2];
       if(path$0){var param$0 = path$0; continue;}
      }
      var path = param$0[2];
      return [0, component, filter_empty_components(path)];
     }
    }
    var
     components$0 = filter_empty_components(components),
     components$1 =
       relative
        ? components$0
        : components$0 ? [0, cst$10, components$0] : _j_,
     _l_ = [0, international];
    function _m_(_o_){return to_percent_encoded(_l_, _o_);}
    var _n_ = caml_call1(caml_call1(Stdlib_List[20], _m_), components$1);
    return caml_call1(caml_call1(Stdlib_String[7], cst$9), _n_);
   }
   var
    Dream_pure_Formats =
      [0,
       html_escape,
       to_base64url,
       from_base64url,
       to_percent_encoded,
       from_percent_encoded,
       to_form_urlencoded,
       from_form_urlencoded,
       from_cookie,
       split_target,
       from_path,
       to_path,
       drop_trailing_slash,
       text_html,
       application_json,
       to_set_cookie];
   runtime.caml_register_global(67, Dream_pure_Formats, "Dream_pure__Formats");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
