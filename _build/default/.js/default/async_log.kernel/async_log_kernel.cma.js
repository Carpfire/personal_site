// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_log_kernel__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_log_kernel = [0],
    Async_log_kernel$0 = [0, Async_log_kernel];
   runtime.caml_register_global(0, Async_log_kernel$0, "Async_log_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Import = "Async_log_kernel__Import",
    cst_async_log_kernel = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Import);
   var Async_log_kernel_Import = [0];
   runtime.caml_register_global
    (11, Async_log_kernel_Import, cst_Async_log_kernel_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Versioned_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Versioned = "Async_log_kernel__Versioned_intf",
    cst_async_log_kernel = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Versioned);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/versioned_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel, "versioned_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Versioned);
   var Async_log_kernel_Versioned_int = [0];
   runtime.caml_register_global
    (11, Async_log_kernel_Versioned_int, cst_Async_log_kernel_Versioned);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Versioned
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Binable, Core__Sexp, Core__Sexpable, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Versioned$0 = "Async_log_kernel__Versioned",
    cst_V2 = "V2",
    cst_a$1 = "a",
    cst_async_log_kernel$0 = "async_log_kernel",
    cst_kernel_versioned_ml$0 = "kernel/versioned.ml",
    cst_kernel_versioned_ml_Stable$1 =
      "kernel/versioned.ml.Stable.Make.Versioned.t",
    cst_kernel_versioned_ml_Stable$2 = "kernel/versioned.ml.Stable.Version.t",
    cst_t$1 = "t",
    cst_v2 = "v2",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_014 = cst_kernel_versioned_ml_Stable$1,
    error_source_003 = cst_kernel_versioned_ml_Stable$2,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Sexpable = global_data.Core__Sexpable,
    Core_Binable = global_data.Core__Binable,
    Core_Sexp = global_data.Core__Sexp,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Versioned$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_kernel_versioned_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "versioned.ml");
   var
    _a_ = caml_call1(Bin_prot_Shape[5], [0, [0, cst_V2, 0], 0]),
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "kernel/versioned.ml:5:4"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    cst_version_mismatch_Version_t =
      "version mismatch %{Version} <> to expected version %{Version}",
    _g_ = [0, 0],
    cst_to_expected_version = " <> to expected version ",
    _h_ = [0, 0],
    cst_version_mismatch = "version mismatch ",
    cst_kernel_versioned_ml_Stable$0 = cst_kernel_versioned_ml_Stable$1,
    cst_t$0 = cst_t$1,
    cst_a = cst_a$1,
    cst_kernel_versioned_ml_18_30 = "kernel/versioned.ml:18:30",
    cst_a$0 = cst_a$1,
    cst_t = cst_t$1,
    cst_kernel_versioned_ml_18_6 = "kernel/versioned.ml:18:6",
    _f_ = [0, cst_V2],
    _e_ = [1, cst_kernel_versioned_ml_Stable$2],
    cst_kernel_versioned_ml_Stable = cst_kernel_versioned_ml_Stable$2,
    _j_ =
      [0,
       [0,
        [0, " 6ae8dff060dc8c96585060b4f76d2974 ", [0, ""]],
        [0, 218, 233, 271]]],
    _k_ = [0, 218, 224, 272],
    _n_ = [0, "bin_digest Message.Version.V2"],
    _q_ = [0, 126, 130, 272],
    _r_ = [0, 218, 272, 272],
    _s_ = [0, 126, 130, 272],
    cst_kernel_versioned_ml = cst_kernel_versioned_ml$0,
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Versioned = cst_Async_log_kernel_Versioned$0;
   function bin_size_t(param){return 1;}
   function bin_write_t(buf, pos, param){
    return caml_call3(Bin_prot_Write[30], buf, pos, 0);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_kernel_versioned_ml_Stable, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    return 0 === caml_call2(Bin_prot_Read[29], buf, pos_ref)
            ? 0
            : caml_call2(Bin_prot_Common[18], _e_, pos_ref[1]);
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _O_ = sexp_004[1];
      if
       (caml_string_notequal(_O_, cst_V2) && caml_string_notequal(_O_, cst_v2))
       break a;
      return 0;
     }
     var _P_ = sexp_004[1];
     if(! _P_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _Q_ = _P_[1];
     if(0 !== _Q_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _R_ = _Q_[1];
     if
      (caml_string_notequal(_R_, cst_V2) && caml_string_notequal(_R_, cst_v2))
      break a;
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){return _f_;}
   var compare = caml_int_compare;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _i_ =
       function(param){
        var
         _L_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _M_ = caml_call1(Bin_shape[19][4], _L_);
        caml_call1(Stdlib[46], _M_);
        var _N_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _N_);
       },
     _l_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _k_,
         _j_),
     _m_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _l_], 0],
     _o_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _p_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_kernel_versioned_ml,
      7,
      _s_,
      _r_,
      _q_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _p_,
      _o_,
      _n_,
      0,
      Inline_test_config,
      _m_,
      _i_);
   }
   function symbol(t1, t2){return 0 !== caml_int_compare(t1, t2) ? 1 : 0;}
   function to_string(t){
    var _K_ = sexp_of_t(t);
    return caml_call1(Core_Sexp[86], _K_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Versioned);
   var
    Async_log_kernel_Versioned =
      [0,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t,
         compare,
         symbol,
         to_string],
        function(T){
         var
          _t_ = caml_call1(Bin_shape[3][1], cst_a),
          _u_ = caml_call1(Bin_shape[4][1], cst_kernel_versioned_ml_18_30),
          _v_ = caml_call2(Bin_prot_Shape[11], _u_, _t_),
          _w_ = [0, bin_shape_t, [0, caml_call1(T[1], _v_), 0]],
          _x_ = caml_call1(Bin_prot_Shape[3], _w_),
          _y_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
          _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _y_, _x_], 0],
          _A_ = caml_call1(Bin_shape[4][1], cst_kernel_versioned_ml_18_6),
          group = caml_call2(Bin_prot_Shape[2], _A_, _z_);
         function bin_shape_t$0(a){
          var _J_ = caml_call1(Bin_shape[2][1], cst_t$0);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[10], group, _J_), [0, a, 0]);
         }
         function bin_size_t(size_of_a, param){
          var
           v2 = param[2],
           size = caml_call2(Bin_prot_Common[23], 0, 1),
           _I_ = caml_call2(T[2], size_of_a, v2);
          return caml_call2(Bin_prot_Common[23], size, _I_);
         }
         function bin_write_t$0(write_a, buf, pos, param){
          var v2 = param[2], v1 = param[1], pos$0 = bin_write_t(buf, pos, v1);
          return caml_call4(T[3], write_a, buf, pos$0, v2);
         }
         function bin_read_t(of_a, buf, pos_ref, vint){
          return caml_call2
                  (Bin_prot_Common[19],
                   cst_kernel_versioned_ml_Stable$0,
                   pos_ref[1]);
         }
         function bin_read_t$1(of_a, buf, pos_ref){
          var
           v1 = bin_read_t$0(buf, pos_ref),
           v2 = caml_call2(caml_call1(T[4], of_a), buf, pos_ref);
          return [0, v1, v2];
         }
         function t_of_sexp$0(of_a_007, sexp_013){
          if(1 === sexp_013[0]){
           var _G_ = sexp_013[1];
           if(_G_){
            var _H_ = _G_[2];
            if(_H_ && ! _H_[2]){
             var
              arg1_010 = _H_[1],
              arg0_009 = _G_[1],
              res0_011 = t_of_sexp(arg0_009),
              res1_012 = caml_call2(T[9], of_a_007, arg1_010);
             return [0, res0_011, res1_012];
            }
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4], error_source_014, 2, sexp_013);
         }
         function sexp_of_t$0(of_a_015, param){
          var
           arg1_017 = param[2],
           arg0_016 = param[1],
           res0_018 = sexp_of_t(arg0_016),
           res1_019 = caml_call2(T[10], of_a_015, arg1_017);
          return [1, [0, res0_018, [0, res1_019, 0]]];
         }
         function of_versioned(param){
          var t = param[2], version = param[1];
          if(! symbol(version, T[11])) return t;
          var
           _B_ = 0,
           _C_ = T[11],
           _D_ = 0,
           _E_ =
             [11,
              cst_to_expected_version,
              [24,
               _g_,
               function(param, custom_printf_020){
                return to_string(custom_printf_020);
               },
               _D_]],
           _F_ =
             [0,
              [11,
               cst_version_mismatch,
               [24,
                _h_,
                function(param, custom_printf_021){
                 return to_string(custom_printf_021);
                },
                _E_]],
              cst_version_mismatch_Version_t];
          return caml_call4(Core[246], _F_, version, _C_, _B_);
         }
         function to_sexpable(t){return [0, T[11], t];}
         var
          include =
            caml_call1
             (caml_call1
               (Core_Sexpable[2][2][1], [0, t_of_sexp$0, sexp_of_t$0]),
              [0, to_sexpable, of_versioned]),
          t_of_sexp$1 = include[1],
          sexp_of_t$1 = include[2];
         function to_binable(t){return [0, T[11], t];}
         var
          include$0 =
            caml_call1
             (caml_call1
               (Core_Binable[16][2][1],
                [0,
                 bin_shape_t$0,
                 bin_size_t,
                 bin_write_t$0,
                 bin_read_t$1,
                 bin_read_t]),
              [0, to_binable, of_versioned]),
          bin_shape_t$1 = include$0[1],
          bin_size_t$0 = include$0[2],
          bin_write_t$1 = include$0[3],
          bin_read_t$2 = include$0[4],
          bin_read_t$3 = include$0[5],
          bin_writer_t = include$0[6],
          bin_reader_t = include$0[7],
          bin_t = include$0[8];
         return [0,
                 bin_shape_t$1,
                 bin_size_t$0,
                 bin_write_t$1,
                 bin_read_t$2,
                 bin_read_t$3,
                 bin_writer_t,
                 bin_reader_t,
                 bin_t,
                 t_of_sexp$1,
                 sexp_of_t$1];
        }]];
   runtime.caml_register_global
    (59, Async_log_kernel_Versioned, cst_Async_log_kernel_Versioned$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Sexp_or_string
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core__Sexp, Core__Stable, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Sexp_or_s$0 = "Async_log_kernel__Sexp_or_string",
    cst_Sexp = "Sexp",
    cst_String = "String",
    cst_async_log_kernel$0 = "async_log_kernel",
    cst_kernel_sexp_or_string_ml$0 = "kernel/sexp_or_string.ml",
    cst_kernel_sexp_or_string_ml_S = "kernel/sexp_or_string.ml.Stable.V1.t",
    cst_t = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err = [2, cst_kernel_sexp_or_string_ml_S],
    error_source_009 = cst_kernel_sexp_or_string_ml_S,
    error_source_014 = cst_kernel_sexp_or_string_ml_S,
    Core_Sexp = global_data.Core__Sexp,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Stable = global_data.Core__Stable,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Sexp_or_s$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_kernel_sexp_or_string_ml$0);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "sexp_or_string.ml");
   var
    _a_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_String, [0, Core_Stable[99]]), 0],
    _b_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Sexp, [0, Core_Sexp[114][1][7]]),
       _a_],
    _c_ = caml_call1(Bin_shape[4][1], "kernel/sexp_or_string.ml:6:6"),
    _d_ = caml_call2(Bin_prot_Shape[8], _c_, _b_),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], "kernel/sexp_or_string.ml:5:4"),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0),
    _h_ = [0, cst_Sexp],
    _i_ = [0, cst_String],
    _k_ =
      [0,
       [0,
        [0, " 7604679c48980b04476c108e66cf67c8 ", [0, ""]],
        [0, 265, 280, 318]]],
    _l_ = [0, 265, 271, 319],
    _o_ = [0, "bin_digest Sexp_or_string.V1"],
    _r_ = [0, 174, 178, 319],
    _s_ = [0, 265, 319, 319],
    _t_ = [0, 174, 178, 319],
    cst_kernel_sexp_or_string_ml = cst_kernel_sexp_or_string_ml$0,
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Sexp_or_s = cst_Async_log_kernel_Sexp_or_s$0;
   function bin_size_t(param){
    if(925483562 <= param[1]){
     var args = param[2], size_args = caml_call1(Core_Sexp[114][1][3], args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    var args$0 = param[2], size_args$0 = caml_call1(Core_Stable[3], args$0);
    return caml_call2(Bin_prot_Common[23], size_args$0, 4);
   }
   function bin_write_t(buf, pos, param){
    if(925483562 <= param[1]){
     var
      args = param[2],
      pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 925483562);
     return caml_call3(Core_Sexp[114][1][4], buf, pos$0, args);
    }
    var
     args$0 = param[2],
     pos$1 = caml_call3(Bin_prot_Write[29], buf, pos, -976970511);
    return caml_call3(Core_Stable[101], buf, pos$1, args$0);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    if(-976970511 === vint){
     var arg_1 = caml_call2(Core_Stable[104], buf, pos_ref);
     return [0, -976970511, arg_1];
    }
    if(925483562 !== vint)
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
    var arg_1$0 = caml_call2(Core_Sexp[114][1][5], buf, pos_ref);
    return [0, 925483562, arg_1$0];
   }
   function bin_read_t$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _C_ = bin_read_t(buf, pos_ref, vint); return _C_;}
    catch(_D_){
     var _B_ = caml_wrap_exception(_D_);
     if(_B_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_B_, 0);
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(sexp_013){
    try{
     a:
     if(0 === sexp_013[0])
      var
       atom_002 = sexp_013[1],
       _z_ =
         caml_string_notequal(atom_002, cst_Sexp)
          ? caml_string_notequal
             (atom_002, cst_String)
            ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
            : caml_call2
              (Sexplib0_Sexp_conv_error[27], error_source_009, sexp_013)
          : caml_call2
            (Sexplib0_Sexp_conv_error[27], error_source_009, sexp_013);
     else{
      var _x_ = sexp_013[1];
      if(_x_){
       var match = _x_[1];
       if(0 === match[0]){
        var sexp_args_005 = _x_[2], atom_002$0 = match[1];
        if(caml_string_notequal(atom_002$0, cst_Sexp))
         if(caml_string_notequal(atom_002$0, cst_String))
          var _z_ = caml_call1(Sexplib0_Sexp_conv_error[23], 0);
         else{
          if(sexp_args_005 && ! sexp_args_005[2]){
           var
            arg0_007 = sexp_args_005[1],
            res0_008 = caml_call1(Core_Stable[355], arg0_007),
            _z_ = [0, -976970511, res0_008];
           break a;
          }
          var
           _z_ =
             caml_call3
              (Sexplib0_Sexp_conv_error[26],
               error_source_009,
               atom_002$0,
               sexp_013);
         }
        else{
         if(sexp_args_005 && ! sexp_args_005[2]){
          var
           arg0_011 = sexp_args_005[1],
           res0_012 = caml_call1(Core_Sexp[114][1][1], arg0_011),
           _z_ = [0, 925483562, res0_012];
          break a;
         }
         var
          _z_ =
            caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_009,
              atom_002$0,
              sexp_013);
        }
       }
       else
        var
         _z_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_009, sexp_013);
      }
      else
       var
        _z_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_009, sexp_013);
     }
     return _z_;
    }
    catch(_A_){
     var _y_ = caml_wrap_exception(_A_);
     if(_y_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_014, sexp_013);
     throw caml_maybe_attach_backtrace(_y_, 0);
    }
   }
   function sexp_of_t(param){
    if(925483562 <= param[1]){
     var v_015 = param[2];
     return [1, [0, _h_, [0, caml_call1(Core_Sexp[114][1][2], v_015), 0]]];
    }
    var v_016 = param[2];
    return [1, [0, _i_, [0, caml_call1(Core_Stable[354], v_016), 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _j_ =
       function(param){
        var
         _u_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _v_ = caml_call1(Bin_shape[19][4], _u_);
        caml_call1(Stdlib[46], _v_);
        var _w_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _w_);
       },
     _m_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _l_,
         _k_),
     _n_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _m_], 0],
     _p_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _q_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_kernel_sexp_or_string_ml,
      11,
      _t_,
      _s_,
      _r_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _q_,
      _p_,
      _o_,
      0,
      Inline_test_config,
      _n_,
      _j_);
   }
   function to_string(param){
    if(925483562 <= param[1]){
     var sexp = param[2];
     return caml_call1(Core_Sexp[86], sexp);
    }
    var str = param[2];
    return str;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Sexp_or_s);
   var
    Async_log_kernel_Sexp_or_strin =
      [0,
       sexp_of_t,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t,
         to_string]]];
   runtime.caml_register_global
    (47, Async_log_kernel_Sexp_or_strin, cst_Async_log_kernel_Sexp_or_s$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Level
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Command_internal, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Level$0 = "Async_log_kernel__Level",
    cst_Debug$1 = "Debug",
    cst_Error$1 = "Error",
    cst_Info$1 = "Info",
    cst_async_log_kernel$0 = "async_log_kernel",
    cst_kernel_level_ml$0 = "kernel/level.ml",
    cst_kernel_level_ml_Stable_V1_ = "kernel/level.ml.Stable.V1.t",
    cst_kernel_level_ml_T_t = "kernel/level.ml.T.t",
    cst_t$1 = "t",
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err$0 = [2, cst_kernel_level_ml_T_t],
    err = [2, cst_kernel_level_ml_Stable_V1_],
    error_source_008 = cst_kernel_level_ml_Stable_V1_,
    error_source_010 = cst_kernel_level_ml_Stable_V1_,
    all = [0, -364068301, [0, 815031438, [0, 106380200, 0]]],
    error_source_018 = cst_kernel_level_ml_T_t,
    error_source_020 = cst_kernel_level_ml_T_t,
    t_sexp_grammar =
      [3,
       [0,
        1,
        [0,
         [1, [0, cst_Debug$1, 0]],
         [0, [1, [0, cst_Info$1, 0]], [0, [1, [0, cst_Error$1, 0]], 0]]]]],
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_Command_internal = global_data.Core__Command_internal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Level$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_kernel_level_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "level.ml");
   var
    _a_ = [0, caml_call2(Bin_prot_Shape[6], cst_Error$1, 0), 0],
    _b_ = [0, caml_call2(Bin_prot_Shape[6], cst_Info$1, 0), _a_],
    _c_ = [0, caml_call2(Bin_prot_Shape[6], cst_Debug$1, 0), _b_],
    _d_ = caml_call1(Bin_shape[4][1], "kernel/level.ml:4:6"),
    _e_ = caml_call2(Bin_prot_Shape[8], _d_, _c_),
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _e_], 0],
    _g_ = caml_call1(Bin_shape[4][1], "kernel/level.ml:3:4"),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    _h_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _h_), 0),
    _w_ = [0, [11, "not a valid level ", [2, 0, 0]], "not a valid level %s"],
    cst_Info$0 = cst_Info$1,
    cst_Debug$0 = cst_Debug$1,
    cst_Error$0 = cst_Error$1,
    _u_ = [0, cst_Info$1],
    _v_ = [0, cst_Debug$1],
    _t_ = [0, cst_Error$1],
    _j_ = [0, cst_Info$1],
    _k_ = [0, cst_Debug$1],
    _i_ = [0, cst_Error$1],
    _A_ =
      [0,
       [0,
        [0, " 62fa833cdabec8a41d614848cd11f858 ", [0, ""]],
        [0, 231, 246, 284]]],
    _B_ = [0, 231, 237, 285],
    _E_ = [0, "bin_digest Level.V1"],
    _H_ = [0, 149, 153, 285],
    _I_ = [0, 231, 285, 285],
    _J_ = [0, 149, 153, 285],
    cst_kernel_level_ml = cst_kernel_level_ml$0,
    cst_Error = cst_Error$1,
    cst_Info = cst_Info$1,
    cst_Debug = cst_Debug$1,
    cst_kernel_level_ml_19_4 = "kernel/level.ml:19:4",
    cst_t = cst_t$1,
    cst_kernel_level_ml_18_2 = "kernel/level.ml:18:2",
    cst_t$0 = cst_t$1,
    _x_ = [0, 1],
    _y_ = [0, 0],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Level = cst_Async_log_kernel_Level$0;
   function bin_size_t(param){return 4;}
   function bin_write_t(buf, pos, param){
    return 106380200 === param
            ? caml_call3(Bin_prot_Write[29], buf, pos, 106380200)
            : 815031438
              <= param
              ? caml_call3(Bin_prot_Write[29], buf, pos, 815031438)
              : caml_call3(Bin_prot_Write[29], buf, pos, -364068301);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, param, vint){
    if(-364068301 === vint) return -364068301;
    if(106380200 === vint) return 106380200;
    if(815031438 === vint) return 815031438;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_t$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _Z_ = bin_read_t(buf, pos_ref, vint); return _Z_;}
    catch(___){
     var _Y_ = caml_wrap_exception(___);
     if(_Y_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_Y_, 0);
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    if(106380200 === a_001){
     if(typeof b_002 === "number" && 106380200 === b_002) return 0;
    }
    else
     if(815031438 <= a_001){
      if(typeof b_002 === "number" && 815031438 === b_002) return 0;
     }
     else if(typeof b_002 === "number" && -364068301 === b_002) return 0;
    return caml_int_compare(a_001, b_002);
   }
   function t_of_sexp(sexp_009){
    try{
     if(0 === sexp_009[0])
      var
       atom_004 = sexp_009[1],
       _W_ =
         caml_string_notequal(atom_004, cst_Debug$1)
          ? caml_string_notequal
             (atom_004, cst_Error$1)
            ? caml_string_notequal
               (atom_004, cst_Info$1)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : 815031438
            : 106380200
          : -364068301;
     else{
      var _U_ = sexp_009[1];
      if(_U_){
       var match = _U_[1];
       if(0 === match[0])
        var
         atom_004$0 = match[1],
         _W_ =
           caml_string_notequal(atom_004$0, cst_Debug$1)
            ? caml_string_notequal
               (atom_004$0, cst_Error$1)
              ? caml_string_notequal
                 (atom_004$0, cst_Info$1)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_008, sexp_009)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_008, sexp_009)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_008, sexp_009);
       else
        var
         _W_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_008, sexp_009);
      }
      else
       var
        _W_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_008, sexp_009);
     }
     return _W_;
    }
    catch(_X_){
     var _V_ = caml_wrap_exception(_X_);
     if(_V_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_010, sexp_009);
     throw caml_maybe_attach_backtrace(_V_, 0);
    }
   }
   function sexp_of_t(param){
    return 106380200 === param ? _i_ : 815031438 <= param ? _j_ : _k_;
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _z_ =
       function(param){
        var
         _R_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _S_ = caml_call1(Bin_shape[19][4], _R_);
        caml_call1(Stdlib[46], _S_);
        var _T_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _T_);
       },
     _C_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _B_,
         _A_),
     _D_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _C_], 0],
     _F_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _G_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_kernel_level_ml,
      10,
      _J_,
      _I_,
      _H_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _G_,
      _F_,
      _E_,
      0,
      Inline_test_config,
      _D_,
      _z_);
   }
   var
    _l_ = [0, caml_call2(Bin_prot_Shape[6], cst_Error, 0), 0],
    _m_ = [0, caml_call2(Bin_prot_Shape[6], cst_Info, 0), _l_],
    _n_ = [0, caml_call2(Bin_prot_Shape[6], cst_Debug, 0), _m_],
    _o_ = caml_call1(Bin_shape[4][1], cst_kernel_level_ml_19_4),
    _p_ = caml_call2(Bin_prot_Shape[8], _o_, _n_),
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _p_], 0],
    _r_ = caml_call1(Bin_shape[4][1], cst_kernel_level_ml_18_2),
    group$0 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _s_), 0);
   function bin_size_t$0(param){return 4;}
   function bin_write_t$0(buf, pos, param){
    return 106380200 === param
            ? caml_call3(Bin_prot_Write[29], buf, pos, 106380200)
            : 815031438
              <= param
              ? caml_call3(Bin_prot_Write[29], buf, pos, 815031438)
              : caml_call3(Bin_prot_Write[29], buf, pos, -364068301);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, param, vint){
    if(-364068301 === vint) return -364068301;
    if(106380200 === vint) return 106380200;
    if(815031438 === vint) return 815031438;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_t$2(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _P_ = bin_read_t$1(buf, pos_ref, vint); return _P_;}
    catch(_Q_){
     var _O_ = caml_wrap_exception(_Q_);
     if(_O_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$0, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_O_, 0);
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function compare$0(a_011, b_012){
    if(a_011 === b_012) return 0;
    if(106380200 === a_011){
     if(typeof b_012 === "number" && 106380200 === b_012) return 0;
    }
    else
     if(815031438 <= a_011){
      if(typeof b_012 === "number" && 815031438 === b_012) return 0;
     }
     else if(typeof b_012 === "number" && -364068301 === b_012) return 0;
    return caml_int_compare(a_011, b_012);
   }
   function t_of_sexp$0(sexp_016){
    if(0 === sexp_016[0]){
     var atom_014 = sexp_016[1];
     return caml_string_notequal(atom_014, cst_Debug$1)
             ? caml_string_notequal
                (atom_014, cst_Error$1)
               ? caml_string_notequal
                  (atom_014, cst_Info$1)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : 815031438
               : 106380200
             : -364068301;
    }
    var _N_ = sexp_016[1];
    if(! _N_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_018, sexp_016);
    var match = _N_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_018, sexp_016);
    var atom_014$0 = match[1];
    return caml_string_notequal(atom_014$0, cst_Debug$1)
            ? caml_string_notequal
               (atom_014$0, cst_Error$1)
              ? caml_string_notequal
                 (atom_014$0, cst_Info$1)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_018, sexp_016)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_018, sexp_016)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_018, sexp_016);
   }
   function t_of_sexp$1(sexp_019){
    try{var _L_ = t_of_sexp$0(sexp_019); return _L_;}
    catch(_M_){
     var _K_ = caml_wrap_exception(_M_);
     if(_K_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_020, sexp_019);
     throw caml_maybe_attach_backtrace(_K_, 0);
    }
   }
   function sexp_of_t$0(param){
    return 106380200 === param ? _t_ : 815031438 <= param ? _u_ : _v_;
   }
   function to_string(param){
    return 106380200 === param
            ? cst_Error$0
            : 815031438 <= param ? cst_Info$0 : cst_Debug$0;
   }
   function of_string(s){
    return caml_string_notequal(s, cst_Debug$1)
            ? caml_string_notequal
               (s, cst_Error$1)
              ? caml_string_notequal
                 (s, cst_Info$1)
                ? caml_call3(Core[246], _w_, s, 0)
                : 815031438
              : 106380200
            : -364068301;
   }
   var
    arg =
      caml_call6
       (Core_Command_internal[19][7], 0, _y_, _x_, 0, 0, [0, all, to_string]);
   function as_or_more_verbose_than(log_level, msg_level){
    if(106380200 === log_level){
     if(msg_level && 106380200 === msg_level[1]) return 1;
     return 0;
    }
    if(815031438 > log_level) return 1;
    if(msg_level && 106380200 > msg_level[1]) return 0;
    return 1;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Level);
   var
    Async_log_kernel_Level =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       compare$0,
       all,
       sexp_of_t$0,
       t_of_sexp$1,
       t_of_sexp$0,
       t_sexp_grammar,
       of_string,
       to_string,
       arg,
       as_or_more_verbose_than,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t]]];
   runtime.caml_register_global
    (81, Async_log_kernel_Level, cst_Async_log_kernel_Level$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Live_entry_registry
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_gc, Async_kernel__Deferred, Core__Bag, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Weak
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Live_entr$0 = "Async_log_kernel__Live_entry_registry",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Async_gc = global_data.Async_kernel__Async_gc,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Stdlib_Weak = global_data.Stdlib__Weak,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Live_entr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/live_entry_registry.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "live_entry_registry.ml");
   var
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Live_entr = cst_Async_log_kernel_Live_entr$0;
   function create(M){
    var
     Weak_table = caml_call1(Stdlib_Weak[9], [0, M[1], M[2]]),
     pending_actions = caml_call1(Core_Bag[22], 0),
     live_entries = caml_call1(Weak_table[1], 1);
    function add_pending(t, action){
     var _h_ = 1 - caml_call1(M[4], t);
     if(! _h_) return _h_;
     var
      finished = caml_call1(action, t),
      tag = caml_call2(Core_Bag[23], pending_actions, finished);
     function _i_(param){
      return caml_call2(Core_Bag[26], pending_actions, tag);
     }
     return caml_call2(Async_kernel[12], finished, _i_);
    }
    function live_entries_flushed(param){
     var _d_ = M[3];
     function _e_(_g_){return add_pending(_g_, _d_);}
     caml_call2(Weak_table[10], _e_, live_entries);
     var _f_ = caml_call1(Core_Bag[17], pending_actions);
     return caml_call1(Async_kernel_Deferred[22], _f_);
    }
    function register(entry){
     caml_call2(Weak_table[5], live_entries, entry);
     caml_call2(Weak_table[4], live_entries, entry);
     var _a_ = M[5];
     function _b_(_c_){return add_pending(_c_, _a_);}
     return caml_call2(Async_kernel_Async_gc[17], entry, _b_);
    }
    return [0, register, live_entries_flushed];
   }
   function register(t, entry){return caml_call1(t[1], entry);}
   function live_entries_flushed(t){return caml_call1(t[2], 0);}
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Live_entr);
   var
    Async_log_kernel_Live_entry_re =
      [0, create, register, live_entries_flushed];
   runtime.caml_register_global
    (16, Async_log_kernel_Live_entry_re, cst_Async_log_kernel_Live_entr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Message
//# unitInfo: Requires: Async_log_kernel__Level, Async_log_kernel__Sexp_or_string, Async_log_kernel__Versioned, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__List, Core__Option, Core__Sexp, Core__Stable, Core__String, Core__Time_float, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = " ",
    cst_Async_log_kernel_Message$0 = "Async_log_kernel__Message",
    cst_async_log_kernel$0 = "async_log_kernel",
    cst_kernel_message_ml$1 = "kernel/message.ml",
    cst_kernel_message_ml_Stable_T$0 = "kernel/message.ml.Stable.T2.t",
    cst_level$0 = "level",
    cst_message$0 = "message",
    cst_t$4 = "t",
    cst_tags$0 = "tags",
    cst_time$4 = "time",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ": ",
    cst$1 = " [",
    cst = cst$5,
    cst$4 = cst$6,
    cst$2 = " --",
    cst$3 = cst$5,
    error_source_004 = cst_kernel_message_ml_Stable_T$0,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Core_Time_float = global_data.Core__Time_float,
    Core_String = global_data.Core__String,
    Async_log_kernel_Sexp_or_strin =
      global_data.Async_log_kernel__Sexp_or_string,
    Core_Option = global_data.Core__Option,
    Core_Sexp = global_data.Core__Sexp,
    Async_log_kernel_Versioned = global_data.Async_log_kernel__Versioned,
    Core_Stable = global_data.Core__Stable,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Message$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_kernel_message_ml$1);
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "message.ml");
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[3], [0, Core_Stable[99], [0, Core_Stable[99], 0]]),
    _b_ = [0, [0, cst_tags$0, caml_call1(Core_Stable[203], _a_)], 0],
    _c_ = caml_call1(Bin_shape[3][1], cst_message$0),
    _d_ = caml_call1(Bin_shape[4][1], "kernel/message.ml:15:18"),
    _e_ =
      [0, [0, cst_message$0, caml_call2(Bin_prot_Shape[11], _d_, _c_)], _b_],
    _f_ =
      [0,
       [0,
        cst_level$0,
        caml_call1(Core_Stable[195], Async_log_kernel_Level[19][1][5])],
       _e_],
    _g_ = caml_call1(Bin_shape[3][1], cst_time$4),
    _h_ = caml_call1(Bin_shape[4][1], "kernel/message.ml:13:15"),
    _i_ = [0, [0, cst_time$4, caml_call2(Bin_prot_Shape[11], _h_, _g_)], _f_],
    _j_ = caml_call1(Bin_prot_Shape[4], _i_),
    _k_ = [0, caml_call1(Bin_shape[3][1], cst_message$0), 0],
    _l_ = [0, caml_call1(Bin_shape[3][1], cst_time$4), _k_],
    _m_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$4), _l_, _j_], 0],
    _n_ = caml_call1(Bin_shape[4][1], "kernel/message.ml:12:4"),
    group = caml_call2(Bin_prot_Shape[2], _n_, _m_),
    _H_ = [0, "]", 0],
    _I_ = [0, cst$6],
    cst_Log_Message_t_of_sexp_malf =
      "Log.Message.t_of_sexp: malformed sexp: %{Core.Sexp}",
    _G_ = [0, 0],
    cst_Log_Message_t_of_sexp_malf$0 =
      "Log.Message.t_of_sexp: malformed sexp: ",
    cst_t$3 = cst_t$4,
    cst_t$1 = cst_t$4,
    _o_ = [0, cst_tags$0],
    _p_ = [0, cst_message$0],
    _q_ = [0, cst_level$0],
    _r_ = [0, cst_time$4],
    cst_tags = cst_tags$0,
    cst_message = cst_message$0,
    cst_level = cst_level$0,
    cst_time = cst_time$4,
    cst_kernel_message_ml_Stable_T = cst_kernel_message_ml_Stable_T$0,
    cst_t = cst_t$4,
    cst_time$0 = cst_time$4,
    cst_kernel_message_ml_26_22 = "kernel/message.ml:26:22",
    cst_time$1 = cst_time$4,
    cst_t$0 = cst_t$4,
    cst_kernel_message_ml_26_6 = "kernel/message.ml:26:6",
    _V_ =
      [0,
       [0,
        [0, " 33933efbb30917a1607deebcdb187fc6 ", [0, cst$6]],
        [0, 989, 1006, 1044]]],
    _W_ = [0, 989, 997, 1045],
    _Z_ = [0, "bin_digest Message.V1.t"],
    _aa_ = [0, 894, 900, 1045],
    _ab_ = [0, 989, 1045, 1045],
    _ac_ = [0, 894, 900, 1045],
    cst_kernel_message_ml$0 = cst_kernel_message_ml$1,
    cst_time$2 = cst_time$4,
    cst_kernel_message_ml_36_24 = "kernel/message.ml:36:24",
    cst_time$3 = cst_time$4,
    cst_t$2 = cst_t$4,
    cst_kernel_message_ml_36_8 = "kernel/message.ml:36:8",
    _K_ =
      [0,
       [0,
        [0, " 26b02919ac3971aaace97169310e9d15 ", [0, cst$6]],
        [0, 1319, 1338, 1376]]],
    _L_ = [0, 1319, 1329, 1377],
    _O_ = [0, "bin_digest Message.V2"],
    _R_ = [0, 1222, 1230, 1377],
    _S_ = [0, 1319, 1377, 1377],
    _T_ = [0, 1222, 1230, 1377],
    cst_kernel_message_ml = cst_kernel_message_ml$1,
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Message = cst_Async_log_kernel_Message$0;
   function bin_shape_t(time, message){
    var _a5_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _a5_),
             [0, time, [0, message, 0]]);
   }
   function t_of_sexp(of_time_001, of_message_002, x_010){
    function _aU_(param){
     var
      _a3_ = param[2],
      _a4_ = _a3_[2],
      tags = _a4_[2][1],
      message = _a4_[1],
      level = _a3_[1],
      time = param[1];
     return [0, time, level, message, tags];
    }
    var _aV_ = 0;
    function _aW_(param){
     return caml_string_notequal(param, cst_level$0)
             ? caml_string_notequal
                (param, cst_message$0)
               ? caml_string_notequal
                  (param, cst_tags$0)
                 ? caml_string_notequal(param, cst_time$4) ? -1 : 0
                 : 3
               : 2
             : 1;
    }
    var _aX_ = 0;
    function _aY_(sexp_009){
     if(1 === sexp_009[0]){
      var _a1_ = sexp_009[1];
      if(_a1_){
       var _a2_ = _a1_[2];
       if(_a2_ && ! _a2_[2]){
        var
         arg1_006 = _a2_[1],
         arg0_005 = _a1_[1],
         res0_007 = caml_call1(Core_Stable[355], arg0_005),
         res1_008 = caml_call1(Core_Stable[355], arg1_006);
        return [0, res0_007, res1_008];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_004, 2, sexp_009);
    }
    var
     _aZ_ =
       [0,
        cst_message,
        1,
        of_message_002,
        [0, cst_tags, 1, caml_call1(Core_Stable[343], _aY_), _aX_]],
     _a0_ =
       [0,
        cst_time,
        1,
        of_time_001,
        [0,
         cst_level,
         1,
         caml_call1(Core_Stable[349], Async_log_kernel_Level[19][1][10]),
         _aZ_]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_004,
             _a0_,
             _aW_,
             _aV_,
             _aU_,
             x_010);
   }
   function sexp_of_t(of_time_011, of_message_012, param){
    var
     tags_020 = param[4],
     message_018 = param[3],
     level_016 = param[2],
     time_014 = param[1],
     bnds_013 = 0;
    function _aT_(param){
     var
      arg1_023 = param[2],
      arg0_022 = param[1],
      res0_024 = caml_call1(Core_Stable[354], arg0_022),
      res1_025 = caml_call1(Core_Stable[354], arg1_023);
     return [1, [0, res0_024, [0, res1_025, 0]]];
    }
    var
     arg_021 = caml_call2(Core_Stable[342], _aT_, tags_020),
     bnds_013$0 = [0, [1, [0, _o_, [0, arg_021, 0]]], bnds_013],
     arg_019 = caml_call1(of_message_012, message_018),
     bnds_013$1 = [0, [1, [0, _p_, [0, arg_019, 0]]], bnds_013$0],
     arg_017 =
       caml_call2
        (Core_Stable[348], Async_log_kernel_Level[19][1][11], level_016),
     bnds_013$2 = [0, [1, [0, _q_, [0, arg_017, 0]]], bnds_013$1],
     arg_015 = caml_call1(of_time_011, time_014),
     bnds_013$3 = [0, [1, [0, _r_, [0, arg_015, 0]]], bnds_013$2];
    return [1, bnds_013$3];
   }
   function map_message(t, f){
    var _aR_ = t[4], _aS_ = caml_call1(f, t[3]);
    return [0, t[1], t[2], _aS_, _aR_];
   }
   var
    _s_ = Core_Stable[99],
    _t_ = caml_call1(Bin_shape[3][1], cst_time$0),
    _u_ = caml_call1(Bin_shape[4][1], cst_kernel_message_ml_26_22),
    _ad_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _u_, _t_), _s_),
    _v_ = [0, caml_call1(Bin_shape[3][1], cst_time$1), 0],
    _w_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _v_, _ad_], 0],
    _x_ = caml_call1(Bin_shape[4][1], cst_kernel_message_ml_26_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _x_, _w_);
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _U_ =
       function(param){
        var
         time = Core_Stable[83],
         _aM_ = caml_call1(Bin_shape[2][1], cst_t$1),
         _aN_ =
           caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _aM_), [0, time, 0]),
         _aO_ = caml_call1(Bin_prot_Shape[15], _aN_),
         _aP_ = caml_call1(Bin_shape[19][4], _aO_);
        caml_call1(Stdlib[46], _aP_);
        var _aQ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$0[2], _aQ_);
       },
     _X_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _W_,
         _V_),
     _Y_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _X_], 0],
     ___ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_kernel_message_ml$0,
      28,
      _ac_,
      _ab_,
      _aa_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _$_,
      ___,
      _Z_,
      0,
      Inline_test_config,
      _Y_,
      _U_);
   }
   var
    _y_ = Async_log_kernel_Sexp_or_strin[2][1][5],
    _z_ = caml_call1(Bin_shape[3][1], cst_time$2),
    _A_ = caml_call1(Bin_shape[4][1], cst_kernel_message_ml_36_24),
    _ae_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _A_, _z_), _y_),
    _B_ = [0, caml_call1(Bin_shape[3][1], cst_time$3), 0],
    _C_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$2), _B_, _ae_], 0],
    _D_ = caml_call1(Bin_shape[4][1], cst_kernel_message_ml_36_8),
    group$1 = caml_call2(Bin_prot_Shape[2], _D_, _C_);
   function bin_shape_t$0(time){
    var _aL_ = caml_call1(Bin_shape[2][1], cst_t$3);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _aL_), [0, time, 0]);
   }
   function bin_size_t(size_of_time, v){
    var
     size_of_message = Async_log_kernel_Sexp_or_strin[2][1][1],
     v4 = v[4],
     v3 = v[3],
     v2 = v[2],
     v1 = v[1],
     _aE_ = caml_call1(size_of_time, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _aE_),
     _aF_ = caml_call2(Core_Stable[15], Async_log_kernel_Level[19][1][1], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _aF_),
     _aG_ = caml_call1(size_of_message, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _aG_);
    function _aH_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _aJ_ = caml_call1(Core_Stable[3], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _aJ_),
      _aK_ = caml_call1(Core_Stable[3], v2);
     return caml_call2(Bin_prot_Common[23], size, _aK_);
    }
    var _aI_ = caml_call2(Core_Stable[18], _aH_, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _aI_);
   }
   function bin_write_t(write_time, buf, pos$2, v){
    var
     write_message = Async_log_kernel_Sexp_or_strin[2][1][2],
     v4 = v[4],
     v3 = v[3],
     v2 = v[2],
     v1 = v[1],
     pos = caml_call3(write_time, buf, pos$2, v1),
     pos$0 =
       caml_call4
        (Core_Stable[197], Async_log_kernel_Level[19][1][2], buf, pos, v2),
     pos$1 = caml_call3(write_message, buf, pos$0, v3);
    function _aD_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Core_Stable[101], buf, pos, v1);
     return caml_call3(Core_Stable[101], buf, pos$0, v2);
    }
    return caml_call4(Core_Stable[205], _aD_, buf, pos$1, v4);
   }
   function bin_writer_t(bin_writer_time){
    function _az_(v){
     var _aA_ = bin_writer_time[2];
     return function(_aB_, _aC_){return bin_write_t(_aA_, v, _aB_, _aC_);};
    }
    return [0, function(v){return bin_size_t(bin_writer_time[1], v);}, _az_];
   }
   function bin_read_t(of_time, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_kernel_message_ml_Stable_T, pos_ref[1]);
   }
   function bin_read_t$0(of_time, buf, pos_ref){
    var
     of_message = Async_log_kernel_Sexp_or_strin[2][1][3],
     v_time = caml_call2(of_time, buf, pos_ref),
     v_level =
       caml_call2
        (caml_call1(Core_Stable[200], Async_log_kernel_Level[19][1][3]),
         buf,
         pos_ref),
     v_message = caml_call2(of_message, buf, pos_ref);
    function _ay_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[104], buf, pos_ref),
      v2 = caml_call2(Core_Stable[104], buf, pos_ref);
     return [0, v1, v2];
    }
    var v_tags = caml_call2(caml_call1(Core_Stable[208], _ay_), buf, pos_ref);
    return [0, v_time, v_level, v_message, v_tags];
   }
   function bin_reader_t(bin_reader_time){
    function _ax_(buf, pos_ref, vtag){
     return bin_read_t(bin_reader_time[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0(bin_reader_time[1], buf, pos_ref);
            },
            _ax_];
   }
   function bin_t(bin_time){
    var _av_ = bin_reader_t(bin_time[3]), _aw_ = bin_writer_t(bin_time[2]);
    return [0, bin_shape_t$0(bin_time[1]), _aw_, _av_];
   }
   function t_of_sexp$0(of_time_031, x_033){
    return t_of_sexp
            (of_time_031, Async_log_kernel_Sexp_or_strin[2][1][9], x_033);
   }
   function sexp_of_t$0(of_time_034, x_035){
    return sexp_of_t
            (of_time_034, Async_log_kernel_Sexp_or_strin[2][1][10], x_035);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _J_ =
       function(param){
        var
         _ar_ = bin_shape_t$0(Core_Stable[83]),
         _as_ = caml_call1(Bin_prot_Shape[15], _ar_),
         _at_ = caml_call1(Bin_shape[19][4], _as_);
        caml_call1(Stdlib[46], _at_);
        var _au_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _au_);
       },
     _M_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _L_,
         _K_),
     _N_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _M_], 0],
     _P_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _Q_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_kernel_message_ml,
      38,
      _T_,
      _S_,
      _R_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _Q_,
      _P_,
      _O_,
      0,
      Inline_test_config,
      _N_,
      _J_);
   }
   var
    include =
      caml_call1
       (Async_log_kernel_Versioned[1][2],
        [0,
         bin_shape_t$0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp$0,
         sexp_of_t$0,
         0]),
    bin_shape_t$1 = include[1],
    bin_size_t$0 = include[2],
    bin_write_t$0 = include[3],
    bin_read_t$1 = include[4],
    bin_read_t$2 = include[5],
    bin_writer_t$0 = include[6],
    bin_reader_t$0 = include[7],
    bin_t$0 = include[8],
    t_of_sexp$1 = include[9],
    sexp_of_t$1 = include[10];
   function _E_(m){return [0, -976970511, m];}
   var _F_ = Async_log_kernel_Sexp_or_strin[2][1][11];
   function t_of_sexp$2(time_of_sexp, x_028){
    if(1 === x_028[0]){
     var _an_ = x_028[1];
     if(_an_){
      var version = _an_[1];
      if(0 === version[0]){
       var _ao_ = _an_[2];
       if(_ao_ && ! _ao_[2]){
        caml_call1(Async_log_kernel_Versioned[1][1][9], version);
        return caml_call2(t_of_sexp$1, time_of_sexp, x_028);
       }
      }
      else{
       var _ap_ = version[1];
       if(_ap_){
        var _aq_ = _ap_[1];
        if(0 === _aq_[0] && ! caml_string_notequal(_aq_[1], cst_time$4))
         return map_message
                 (t_of_sexp(time_of_sexp, Core_Stable[355], x_028), _E_);
       }
      }
     }
    }
    var
     _ak_ = 0,
     _al_ = 0,
     _am_ =
       [0,
        [11,
         cst_Log_Message_t_of_sexp_malf$0,
         [24,
          _G_,
          function(param, custom_printf_036){
           return caml_call1(Core_Sexp[86], custom_printf_036);
          },
          _al_]],
        cst_Log_Message_t_of_sexp_malf];
    return caml_call3(Core[246], _am_, x_028, _ak_);
   }
   function sexp_of_t_as_v0(sexp_of_time, t){
    var x_030 = map_message(t, _F_);
    return sexp_of_t(sexp_of_time, Core_Stable[354], x_030);
   }
   var For_testing = [0, sexp_of_t_as_v0], T1 = [0, sexp_of_t$1];
   function create(level, time, tags$0, message){
    var time$0 = caml_call2(Core_Option[42], time, Core_Time_float[47]);
    if(tags$0) var sth = tags$0[1], tags = sth; else var tags = 0;
    return [0, time$0, level, message, tags];
   }
   function time(t){return t[1];}
   function level(t){return t[2];}
   function set_level(t, level){return [0, t[1], level, t[3], t[4]];}
   function raw_message(t){return t[3];}
   function message(t){
    return caml_call1(Async_log_kernel_Sexp_or_strin[2][1][11], t[3]);
   }
   function tags(t){return t[4];}
   function add_tags(t, tags){
    var _aj_ = caml_call2(Core_List[60], tags, t[4]);
    return [0, t[1], t[2], t[3], _aj_];
   }
   function to_write_only_text(t, zone){
    var match = t[2];
    if(match)
     var
      l = match[1],
      _af_ = caml_call1(Async_log_kernel_Level[16], l),
      prefix = caml_call2(Core[18], _af_, cst);
    else
     var prefix = cst$4;
    if(t[4])
     var
      _ag_ =
        function(param){
         var v = param[2], t = param[1];
         return [0, cst$1, [0, t, [0, cst$0, [0, v, _H_]]]];
        },
      formatted_tags = [0, cst$2, caml_call2(Core_List[14], t[4], _ag_)];
    else
     var formatted_tags = 0;
    var
     _ah_ = [0, cst$3, [0, prefix, [0, message(t), formatted_tags]]],
     _ai_ = [0, caml_call2(Core_Time_float[71], t[1], zone), _ah_];
    return caml_call2(Core_String[46], _I_, _ai_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Message);
   var
    Async_log_kernel_Message =
      [0,
       T1,
       create,
       time,
       level,
       set_level,
       message,
       raw_message,
       tags,
       add_tags,
       to_write_only_text,
       [0,
        [0,
         [0,
          bin_shape_t$1,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$1,
          bin_read_t$2,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          t_of_sexp$2,
          sexp_of_t$1,
          For_testing]]]];
   runtime.caml_register_global
    (97, Async_log_kernel_Message, cst_Async_log_kernel_Message$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Message_event
//# unitInfo: Requires: Async_log_kernel__Level, Async_log_kernel__Message, Async_log_kernel__Sexp_or_string, Core, Core__List, Core__Option, Core__Sexp, Core__Time_float, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Message_data, Ppx_log_types__Message_sexp, Ppx_log_types__Message_source, Ppx_module_timer_runtime, Sexp_hidden_in_test, Univ
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Message_e$0 = "Async_log_kernel__Message_event",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Univ = global_data.Univ,
    Ppx_log_types_Message_source = global_data.Ppx_log_types__Message_source,
    Sexp_hidden_in_test = global_data.Sexp_hidden_in_test,
    Ppx_log_types_Message_data = global_data.Ppx_log_types__Message_data,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_log_kernel_Message = global_data.Async_log_kernel__Message,
    Ppx_log_types_Message_sexp = global_data.Ppx_log_types__Message_sexp,
    Core_List = global_data.Core__List,
    Async_log_kernel_Sexp_or_strin =
      global_data.Async_log_kernel__Sexp_or_string,
    Core_Sexp = global_data.Core__Sexp,
    Core_Time_float = global_data.Core__Time_float,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Message_e$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/message_event.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "message_event.ml");
   var
    _b_ = [0, "async_trace_span"],
    _c_ = [0, "function_name"],
    _d_ = [0, "user_scope"],
    _i_ = [0, "legacy_tags"],
    _e_ = [0, "source"],
    _f_ = [0, "raw_message"],
    _g_ = [0, "level"],
    _h_ = [0, "time"],
    _a_ = [0, "from serialized message"],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Message_e = cst_Async_log_kernel_Message_e$0;
   function async_trace_span(r){return r[8];}
   function user_scope(r){return r[6];}
   function source(r){return r[4];}
   function raw_message(r){return r[3];}
   function level(r){return r[2];}
   function time(r){return r[1];}
   function create(time, opt, _R_, level, raw_message){
    if(opt) var sth = opt[1], source = sth; else var source = cst;
    if(_R_) var sth$0 = _R_[1], legacy_tags = sth$0; else var legacy_tags = 0;
    var time$0 = caml_call2(Core_Option[42], time, Core_Time_float[47]);
    return [0, time$0, level, raw_message, [0, source], legacy_tags, 0, 0, 0];
   }
   function set_level(t, level){
    return [0, t[1], level, t[3], t[4], t[5], t[6], t[7], t[8]];
   }
   function message(t){
    var s = t[3];
    if(348871921 !== s[1])
     return caml_call1(Async_log_kernel_Sexp_or_strin[2][1][11], s);
    var m = s[2], _Q_ = caml_call1(Ppx_log_types_Message_sexp[5], m);
    return caml_call1(Core_Sexp[86], _Q_);
   }
   function downgrade_to_unstructured_and_(init, f){
    var
     s = init[3],
     _K_ = init[8],
     _L_ = init[7],
     _M_ = init[6],
     _N_ = init[5],
     _O_ = init[4];
    if(348871921 === s[1])
     var
      m = s[2],
      _P_ =
        caml_call1
         (f, [0, 925483562, caml_call1(Ppx_log_types_Message_sexp[5], m)]);
    else
     var _P_ = caml_call1(f, s);
    return [0, init[1], init[2], _P_, _O_, _N_, _M_, _L_, _K_];
   }
   function stringify_message_and_map(t, f){
    var
     _E_ = t[8],
     _F_ = t[7],
     _G_ = t[6],
     _H_ = t[5],
     _I_ = t[4],
     _J_ = [0, -976970511, caml_call1(f, message(t))];
    return [0, t[1], t[2], _J_, _I_, _H_, _G_, _F_, _E_];
   }
   function add_tags(t, tags){
    var
     _A_ = t[8],
     _B_ = t[7],
     _C_ = t[6],
     _D_ = caml_call2(Core_List[60], tags, t[5]);
    return [0, t[1], t[2], t[3], t[4], _D_, _C_, _B_, _A_];
   }
   function map_legacy_tags(t, f){
    var
     _w_ = t[8],
     _x_ = t[7],
     _y_ = t[6],
     _z_ = caml_call2(Core_List[51], t[5], f);
    return [0, t[1], t[2], t[3], t[4], _z_, _y_, _x_, _w_];
   }
   function legacy_tags(t){return t[5];}
   function to_serialized_message_lossy(param){
    var
     legacy_tags = param[5],
     raw_message = param[3],
     level = param[2],
     time = param[1];
    if(348871921 === raw_message[1])
     var
      data = raw_message[2],
      _v_ = [0, 925483562, caml_call1(Ppx_log_types_Message_sexp[5], data)];
    else
     var _v_ = raw_message;
    return caml_call4
            (Async_log_kernel_Message[2],
             level,
             [0, time],
             [0, legacy_tags],
             _v_);
   }
   function of_serialized_message(msg){
    var
     _s_ = caml_call1(Async_log_kernel_Message[8], msg),
     _t_ = caml_call1(Async_log_kernel_Message[7], msg),
     _u_ = caml_call1(Async_log_kernel_Message[4], msg);
    return [0,
            caml_call1(Async_log_kernel_Message[3], msg),
            _u_,
            _t_,
            _a_,
            _s_,
            0,
            0,
            0];
   }
   function sexp_of_t(param){
    var
     async_trace_span_028 = param[8],
     function_name_024 = param[7],
     user_scope_020 = param[6],
     legacy_tags_013 = param[5],
     source_010 = param[4],
     raw_message_008 = param[3],
     level_004 = param[2],
     time_002 = param[1],
     bnds_001 = 0;
    if(async_trace_span_028)
     var
      v_029 = async_trace_span_028[1],
      arg_031 = caml_call1(Univ[1], v_029),
      bnd_030 = [1, [0, _b_, [0, arg_031, 0]]],
      bnds_001$0 = [0, bnd_030, bnds_001];
    else
     var bnds_001$0 = bnds_001;
    if(function_name_024)
     var
      v_025 = function_name_024[1],
      arg_027 = caml_call1(Core[558], v_025),
      bnd_026 = [1, [0, _c_, [0, arg_027, 0]]],
      bnds_001$1 = [0, bnd_026, bnds_001$0];
    else
     var bnds_001$1 = bnds_001$0;
    if(user_scope_020)
     var
      v_021 = user_scope_020[1],
      arg_023 = caml_call1(Core[558], v_021),
      bnd_022 = [1, [0, _d_, [0, arg_023, 0]]],
      bnds_001$2 = [0, bnd_022, bnds_001$1];
    else
     var bnds_001$2 = bnds_001$1;
    var _q_ = legacy_tags_013 ? 0 : 1;
    if(_q_)
     var bnds_001$3 = bnds_001$2;
    else
     var
      _r_ =
        function(param){
         var
          arg1_015 = param[2],
          arg0_014 = param[1],
          res0_016 = caml_call1(Core[558], arg0_014),
          res1_017 = caml_call1(Core[558], arg1_015);
         return [1, [0, res0_016, [0, res1_017, 0]]];
        },
      arg_019 = caml_call1(caml_call1(Core[472], _r_), legacy_tags_013),
      bnd_018 = [1, [0, _i_, [0, arg_019, 0]]],
      bnds_001$3 = [0, bnd_018, bnds_001$2];
    var
     arg_011 =
       caml_call2
        (Sexp_hidden_in_test[11], Ppx_log_types_Message_source[2], source_010),
     bnds_001$4 = [0, [1, [0, _e_, [0, arg_011, 0]]], bnds_001$3],
     arg_009 = caml_call1(Ppx_log_types_Message_data[1][1], raw_message_008),
     bnds_001$5 = [0, [1, [0, _f_, [0, arg_009, 0]]], bnds_001$4];
    if(level_004)
     var
      v_005 = level_004[1],
      arg_007 = caml_call1(Async_log_kernel_Level[11], v_005),
      bnd_006 = [1, [0, _g_, [0, arg_007, 0]]],
      bnds_001$6 = [0, bnd_006, bnds_001$5];
    else
     var bnds_001$6 = bnds_001$5;
    var
     _p_ = caml_call1(Core_Time_ns[94], time_002),
     arg_003 = caml_call1(Core_Time_ns[25][12], _p_),
     bnds_001$7 = [0, [1, [0, _h_, [0, arg_003, 0]]], bnds_001$6];
    return [1, bnds_001$7];
   }
   function create$0(raw_message, source){
    return function(_j_){
     return function(_k_){
      return function(_l_, _m_, _n_, _o_){
       return [0, _j_, _k_, raw_message, source, _l_, _m_, _n_, _o_];};};};
   }
   var Private = [0, create$0, async_trace_span, user_scope];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Message_e);
   var
    Async_log_kernel_Message_event =
      [0,
       create,
       raw_message,
       message,
       source,
       legacy_tags,
       level,
       time,
       add_tags,
       map_legacy_tags,
       stringify_message_and_map,
       downgrade_to_unstructured_and_,
       set_level,
       to_serialized_message_lossy,
       of_serialized_message,
       [0, sexp_of_t],
       Private];
   runtime.caml_register_global
    (43, Async_log_kernel_Message_event, cst_Async_log_kernel_Message_e$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Buffered_output
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_log_kernel__Message_event, Core, Core__Queue, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Buffered_$0 = "Async_log_kernel__Buffered_output",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Core_Queue = global_data.Core__Queue;
   global_data.Async_log_kernel__Message_event;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Buffered_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/buffered_output.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "buffered_output.ml");
   var
    cst_Bug_Log_processor_pipe_clo =
      "Bug: Log processor pipe closed unexpectedly",
    _a_ = [0, 3804260],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Buffered_ = cst_Async_log_kernel_Buffered_$0,
    batch_size = 100;
   function write_msgs_to_output(t, and_then){
    var _p_ = caml_call1(Core_Queue[16], t[4]);
    if(caml_call2(Core[90], _p_, 0)) return caml_call1(and_then, 0);
    function _q_(param){
     caml_call1(Core_Queue[51], t[4]);
     return caml_call1(and_then, 0);
    }
    var _r_ = caml_call1(t[1], t[4]);
    return caml_call2(Async_kernel[23][2], _r_, _q_);
   }
   function background_error(r){return r[2];}
   function create(flush, rotate, write){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     w = match[2],
     r = match[1],
     process_log = [0, write, rotate, flush, caml_call2(Core_Queue[66], 0, 0)];
    function _e_(param){
     if(0 === param[0]){
      var
       _o_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Bug_Log_processor_pipe_clo);
      return caml_call1(Core[261], _o_);
     }
     var exn = param[1];
     return exn;
    }
    function _f_(param){
     function _h_(updates){
      function loop(yield_every){
       var yield_every$0 = yield_every;
       for(;;){
        var yield_every$1 = yield_every$0 - 1 | 0;
        if(caml_call2(Core[90], yield_every$1, 0)){
         var
          _i_ = function(param){return loop(batch_size);},
          _j_ = caml_call1(Async_kernel_Async_kernel_sche[29], 0);
         return caml_call2(Async_kernel[23][2], _j_, _i_);
        }
        var match = caml_call1(Core_Queue[45], updates);
        if(! match)
         return write_msgs_to_output(process_log, Async_kernel[20]);
        var update = match[1];
        switch(update[0]){
          case 0:
           var msg = update[1];
           caml_call2(Core_Queue[43], process_log[4], msg);
           var yield_every$0 = yield_every$1;
           break;
          case 1:
           var i = update[1];
           return write_msgs_to_output
                   (process_log,
                    function(param){
                     function _m_(param){
                      caml_call2(Async_kernel_Ivar[14], i, 0);
                      return loop(yield_every$1);
                     }
                     var _n_ = caml_call1(process_log[3], 0);
                     return caml_call2(Async_kernel[23][2], _n_, _m_);
                    });
          default:
           var i$0 = update[1];
           return write_msgs_to_output
                   (process_log,
                    function(param){
                     function _k_(param){
                      caml_call2(Async_kernel_Ivar[14], i$0, 0);
                      return loop(yield_every$1);
                     }
                     var _l_ = caml_call1(process_log[2], 0);
                     return caml_call2(Async_kernel[23][2], _l_, _k_);
                    });
        }
       }
      }
      return loop(batch_size);
     }
     return caml_call5(Async_kernel_Pipe[53], 0, 0, 0, r, _h_);
    }
    var
     _g_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, 0, _a_, _f_),
     background_error = caml_call2(Async_kernel[23][3], _g_, _e_);
    return [0, w, background_error, 860831386];
   }
   function push_update(t, update){
    if(1 === update[0])
     var
      i = update[1],
      _d_ = [0, 365482660, caml_call1(Async_kernel_Ivar[19], i)];
    else
     var _d_ = 860831386;
    t[3] = _d_;
    return caml_call2(Async_kernel_Pipe[30], t[1], update);
   }
   function flushed(t){
    var match = t[3];
    if(typeof match === "number"){
     var _c_ = function(i){return push_update(t, [1, i]);};
     return caml_call1(Async_kernel_Deferred[3], _c_);
    }
    var f = match[2];
    return f;
   }
   function rotate(t){
    function _b_(i){return push_update(t, [2, i]);}
    return caml_call1(Async_kernel_Deferred[3], _b_);
   }
   function write(t, msg){return push_update(t, [0, msg]);}
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Buffered_);
   var
    Async_log_kernel_Buffered_outp =
      [0, create, flushed, rotate, write, background_error];
   runtime.caml_register_global
    (26, Async_log_kernel_Buffered_outp, cst_Async_log_kernel_Buffered_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Output
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_gc, Async_kernel__Deferred, Async_log_kernel__Buffered_output, Async_log_kernel__Level, Async_log_kernel__Message, Async_log_kernel__Message_event, Core, Core__Option, Core__Queue, Core__Set_once, Core__String, Heap_block, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Timezone
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Output$0 = "Async_log_kernel__Output",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Set_once = global_data.Core__Set_once,
    Async_log_kernel_Message_event =
      global_data.Async_log_kernel__Message_event,
    Core = global_data.Core,
    Async_kernel = global_data.Async_kernel,
    Async_log_kernel_Message = global_data.Async_log_kernel__Message,
    Timezone = global_data.Timezone,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Queue = global_data.Core__Queue,
    Async_log_kernel_Buffered_outp =
      global_data.Async_log_kernel__Buffered_output,
    Heap_block = global_data.Heap_block,
    Async_kernel_Async_gc = global_data.Async_kernel__Async_gc,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_String = global_data.Core__String;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Output$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/output.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "output.ml");
   var
    the_one_and_only = caml_call2(Core_String[44], 1, 32),
    cst_nyc = "nyc",
    _c_ = [0, "<opaque>"],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Output = cst_Async_log_kernel_Output$0;
   function aux_create
   (finalize, rotate, flush, buffered_background_error, write){
    var
     t =
       [0, write, rotate, flush, buffered_background_error, the_one_and_only];
    function _r_(finalize){
     function _s_(t){
      var t$0 = caml_call1(Heap_block[4], t);
      function _u_(param){return caml_call1(finalize, 0);}
      var
       _v_ = caml_call1(t$0[3], 0),
       _w_ = caml_call2(Async_kernel[23][2], _v_, _u_);
      return caml_call1(Async_kernel[6], _w_);
     }
     var _t_ = caml_call1(Heap_block[3], t);
     return caml_call2(Async_kernel_Async_gc[16], _t_, _s_);
    }
    caml_call2(Core_Option[46], finalize, _r_);
    return t;
   }
   function create_expert(opt, finalize, flush, write){
    if(opt)
     var sth = opt[1], rotate = sth;
    else
     var rotate = Async_kernel[20];
    var
     output =
       caml_call3(Async_log_kernel_Buffered_outp[1], flush, rotate, write),
     _o_ = caml_call1(Async_log_kernel_Buffered_outp[4], output),
     _p_ =
       [0, 106380200, caml_call1(Async_log_kernel_Buffered_outp[5], output)];
    function _q_(param){
     return caml_call1(Async_log_kernel_Buffered_outp[2], output);
    }
    return aux_create
            (finalize,
             function(param){
              return caml_call1(Async_log_kernel_Buffered_outp[3], output);
             },
             _q_,
             _p_,
             _o_);
   }
   function create_unbuffered(finalize, flush, write){
    return aux_create(finalize, Async_kernel[20], flush, -74183345, write);
   }
   function create(rotate, finalize, flush, write){
    return create_expert
            (rotate,
             finalize,
             flush,
             function(messages){
              return caml_call1
                      (write,
                       caml_call2
                        (Core_Queue[53],
                         messages,
                         Async_log_kernel_Message_event[13]));
             });
   }
   var _a_ = 0;
   function create_expert$0(_l_, _m_, _n_){
    return create_expert(_a_, _l_, _m_, _n_);
   }
   function _b_(param){return Async_kernel_Deferred[18];}
   var empty = create_expert$0(0, Async_kernel[20], _b_);
   function write(t){return t[1];}
   function rotate(t){return caml_call1(t[2], 0);}
   function flush(t){return caml_call1(t[3], 0);}
   function sexp_of_t(param){return _c_;}
   function filter_to_level(t, level){
    function write(message){
     var
      _j_ = caml_call1(Async_log_kernel_Message_event[6], message),
      _k_ = caml_call2(Async_log_kernel_Level[18], level, _j_);
     return _k_ ? caml_call1(t[1], message) : _k_;
    }
    return [0, write, t[2], t[3], t[4], t[5]];
   }
   var
    stderr_sync =
      [246,
       function(_f_){
        var
         zone =
           Core[628]
            ? caml_call1(Timezone[66], cst_nyc)
            : caml_call1(Core[248], Timezone[67]);
        function _g_(msg){
         var
          _h_ = caml_call1(Async_log_kernel_Message_event[13], msg),
          _i_ = caml_call2(Async_log_kernel_Message[10], _h_, zone);
         return caml_call1(Core[39], _i_);
        }
        return create_unbuffered(0, Async_kernel[20], _g_);
       }],
    stderr_async = caml_call1(Core_Set_once[5], 0),
    stderr =
      [246,
       function(param){
        var match = caml_call1(Core_Set_once[9], stderr_async);
        if(! match) return caml_call1(Core[248], stderr_sync);
        var stderr = match[1];
        return caml_call1(Core[248], stderr);
       }];
   function buffered_background_error(t){return t[4];}
   function set_async_stderr_output(t, here){
    return caml_call3(Core_Set_once[7], stderr_async, here, t);
   }
   var Private = [0, buffered_background_error, set_async_stderr_output];
   function create$0(map_output){
    function _d_(msg){
     var
      _e_ =
        caml_call1
         (map_output, caml_call1(Async_log_kernel_Message_event[3], msg));
     return caml_call1(Core[32], _e_);
    }
    return create_unbuffered(0, Async_kernel[20], _d_);
   }
   function is_async_stderr_output_set(param){
    return caml_call1(Core_Set_once[12], stderr_async);
   }
   var For_testing = [0, create$0, is_async_stderr_output_set];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Output);
   var
    Async_log_kernel_Output =
      [0,
       sexp_of_t,
       create,
       create_expert$0,
       create_unbuffered,
       empty,
       write,
       rotate,
       flush,
       filter_to_level,
       stderr,
       Private,
       For_testing];
   runtime.caml_register_global
    (27, Async_log_kernel_Output, cst_Async_log_kernel_Output$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Mutable_outputs
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_log_kernel__Output, Core__List, Eager_deferred, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Mutable_o$0 = "Async_log_kernel__Mutable_outputs",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_log_kernel_Output = global_data.Async_log_kernel__Output,
    Core_List = global_data.Core__List,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Eager_deferred = global_data.Eager_deferred,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Mutable_o$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/mutable_outputs.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "mutable_outputs.ml");
   var
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Mutable_o = cst_Async_log_kernel_Mutable_o$0;
   function flushed(t){
    function _j_(param){
     return caml_call3
             (Eager_deferred[32][1][28][14],
              -686623969,
              t[1],
              Async_log_kernel_Output[8]);
    }
    return caml_call2(Eager_deferred[32][5][2], t[2], _j_);
   }
   function create(outputs, previous, on_background_output_error){
    var stop_watching_for_background_e = caml_call1(Async_kernel_Ivar[12], 0);
    if(previous)
     var
      previous$0 = previous[1],
      _c_ =
        function(param){
         return caml_call2(Async_kernel_Ivar[16], previous$0[3], 0);
        },
      _d_ = flushed(previous$0),
      previous_outputs_flushed =
        caml_call2(Eager_deferred[12][4][3], _d_, _c_);
    else
     var previous_outputs_flushed = Async_kernel_Deferred[18];
    var
     stop = caml_call1(Async_kernel_Ivar[19], stop_watching_for_background_e);
    function _b_(output){
     var match = caml_call1(Async_log_kernel_Output[11][1], output);
     if(typeof match === "number") return 0;
     var
      e = match[2],
      _e_ = [0, caml_call2(Async_kernel[4], e, on_background_output_error), 0];
     function _f_(_i_){return _i_;}
     var
      _g_ = [0, caml_call2(Async_kernel[4], stop, _f_), _e_],
      _h_ = caml_call1(Async_kernel[5], _g_);
     return caml_call1(Async_kernel[6], _h_);
    }
    caml_call2(Core_List[19], outputs, _b_);
    return [0,
            outputs,
            previous_outputs_flushed,
            stop_watching_for_background_e];
   }
   function create$0(outputs, on_background_output_error){
    return [0,
            create(outputs, 0, on_background_output_error),
            860831386,
            on_background_output_error];
   }
   function is_empty(t){
    var t$0 = t[1];
    return caml_call1(Core_List[18], t$0[1]);
   }
   function write(t){
    t[2] = 860831386;
    var t$0 = t[1];
    return function(msg){
     function _a_(output){
      return caml_call2(Async_log_kernel_Output[6], output, msg);
     }
     return caml_call2(Core_List[19], t$0[1], _a_);};
   }
   function flushed$0(t){
    var match = t[2];
    if(typeof match === "number"){
     var flush = flushed(t[1]);
     t[2] = [0, 365482660, flush];
     return flush;
    }
    var flush$0 = match[2];
    return flush$0;
   }
   function update_outputs(t, outputs){
    t[2] = 860831386;
    t[1] = create(outputs, [0, t[1]], t[3]);
    return 0;
   }
   function current_outputs(t){return t[1][1];}
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Mutable_o);
   var
    Async_log_kernel_Mutable_outpu =
      [0,
       create$0,
       is_empty,
       write,
       flushed$0,
       current_outputs,
       update_outputs];
   runtime.caml_register_global
    (20, Async_log_kernel_Mutable_outpu, cst_Async_log_kernel_Mutable_o$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__On_error
//# unitInfo: Requires: Async_kernel__Monitor, Core__Error, Core__Fn, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_On_error$0 = "Async_log_kernel__On_error",
    cst_async_log_kernel$0 = "async_log_kernel",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Error = global_data.Core__Error,
    Core_Fn = global_data.Core__Fn,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_On_error$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/on_error.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "on_error.ml");
   var
    _a_ = [0, 3553398],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_On_error = cst_Async_log_kernel_On_error$0,
    send_to_top_level_monitor =
      [0,
       747848894,
       function(e){
        try{var _d_ = caml_call1(Core_Error[30], e), e$1 = _d_;}
        catch(e){var e$0 = caml_wrap_exception(e), e$1 = e$0;}
        return caml_call3
                (Async_kernel_Monitor[15], Async_kernel_Monitor[24], _a_, e$1);
       }];
   function handle_error(param){
    if(typeof param === "number")
     return function(_c_){throw caml_maybe_attach_backtrace(_c_, 0);};
    var f = param[2], arg = Core_Error[27];
    function _b_(eta){return caml_call2(arg, 0, eta);}
    return caml_call2(Core_Fn[5], f, _b_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_On_error);
   var
    Async_log_kernel_On_error = [0, send_to_top_level_monitor, handle_error];
   runtime.caml_register_global
    (15, Async_log_kernel_On_error, cst_Async_log_kernel_On_error$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Raw_log
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Synchronous_time_source, Async_log_kernel__Level, Async_log_kernel__Live_entry_registry, Async_log_kernel__Mutable_outputs, Async_log_kernel__On_error, Core, Core__Lazy, Core__Option, Core__Time_ns, Core__Unique_id, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Raw_log$0 = "Async_log_kernel__Raw_log",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Lazy = global_data.Core__Lazy,
    Async_log_kernel_Live_entry_re =
      global_data.Async_log_kernel__Live_entry_registry,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_log_kernel_Mutable_outpu =
      global_data.Async_log_kernel__Mutable_outputs,
    Core_Option = global_data.Core__Option,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Async_log_kernel_On_error = global_data.Async_log_kernel__On_error,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core = global_data.Core,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Raw_log$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/raw_log.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "raw_log.ml");
   var
    Id = caml_call1(Core_Unique_id[1], 0),
    cst_write_message = "write message",
    cst_set_output = "set output",
    cst_flush = "flush",
    _a_ =
      [0,
       [11,
        "Log: can't ",
        [2, 0, [11, " because this log has been closed", 0]]],
       "Log: can't %s because this log has been closed"],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Raw_log = cst_Async_log_kernel_Raw_log$0;
   function assert_open(t, tag){
    var _k_ = t[3];
    return _k_ ? caml_call3(Core[246], _a_, tag, 0) : _k_;
   }
   function flushed(t){
    assert_open(t, cst_flush);
    return caml_call1(Async_log_kernel_Mutable_outpu[4], t[5]);
   }
   function is_closed(t){return t[3];}
   function flush_and_close(t){
    if(t[3]) return caml_call1(Async_kernel[20], 0);
    var finished = flushed(t);
    t[3] = 1;
    return finished;
   }
   var
    live_logs =
      [246,
       function(param){
        function equal(t1, t2){return caml_call2(Id[19], t1[1], t2[1]);}
        function hash(t1){return caml_call1(Id[36], t1[1]);}
        return caml_call1
                (Async_log_kernel_Live_entry_re[1],
                 [0, equal, hash, flushed, is_closed, flush_and_close]);
       }];
   function create(level, output, on_error, time_source, transform){
    if(time_source)
     var time_source$0 = time_source[1], time_source$1 = time_source$0;
    else if(Ppx_inline_test_lib[1])
     var
      _j_ =
        caml_call3(Async_kernel_Synchronous_time_[9], 0, Core_Time_ns[59], 0),
      time_source$1 = caml_call1(Async_kernel_Synchronous_time_[8], _j_);
    else
     var time_source$1 = caml_call1(Async_kernel_Synchronous_time_[21], 0);
    var on_error$0 = [0, on_error];
    function _h_(exn){
     return caml_call2(Async_log_kernel_On_error[2], on_error$0[1], exn);
    }
    var
     output$0 = caml_call2(Async_log_kernel_Mutable_outpu[1], output, _h_),
     id = caml_call1(Id[45], 0),
     t = [0, id, on_error$0, 0, level, output$0, time_source$1, transform],
     _i_ = caml_call1(Core[248], live_logs);
    caml_call2(Async_log_kernel_Live_entry_re[2], _i_, t);
    return t;
   }
   function set_output(t, new_outputs){
    assert_open(t, cst_set_output);
    return caml_call2(Async_log_kernel_Mutable_outpu[6], t[5], new_outputs);
   }
   function get_output(t){
    return caml_call1(Async_log_kernel_Mutable_outpu[5], t[5]);
   }
   function get_on_error(t){return t[2][1];}
   function set_on_error(t, handler){t[2][1] = handler; return 0;}
   function level(t){return t[4];}
   function set_level(t, level){t[4] = level; return 0;}
   function get_time_source(t){return t[6];}
   function set_time_source(t, time_source){t[6] = time_source; return 0;}
   function get_transform(t){return t[7];}
   function set_transform(t, f){t[7] = f; return 0;}
   function copy(t){
    var
     _d_ = t[7],
     _e_ = [0, t[6]],
     _f_ = get_on_error(t),
     _g_ = get_output(t);
    return create(t[4], _g_, _f_, _e_, _d_);
   }
   function would_log(t, msg_level){
    var
     _c_ = 1 - caml_call1(Async_log_kernel_Mutable_outpu[2], t[5]),
     output_or_transform_is_enabled = _c_ || caml_call1(Core_Option[62], t[7]);
    return output_or_transform_is_enabled
            ? caml_call2(Async_log_kernel_Level[18], t[4], msg_level)
            : output_or_transform_is_enabled;
   }
   function push_message_event(t, msg){
    var match = t[7];
    if(match)
     var f = match[1], msg$0 = caml_call1(f, msg);
    else
     var msg$0 = msg;
    var _b_ = 1 - caml_call1(Async_log_kernel_Mutable_outpu[2], t[5]);
    return _b_
            ? (assert_open
               (t, cst_write_message),
              caml_call2(Async_log_kernel_Mutable_outpu[3], t[5], msg$0))
            : _b_;
   }
   function all_live_logs_flushed(param){
    var match = caml_call1(Core_Lazy[41], live_logs);
    if(! match) return Async_kernel_Deferred[18];
    var live_logs$0 = match[1];
    return caml_call1(Async_log_kernel_Live_entry_re[3], live_logs$0);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Raw_log);
   var
    Async_log_kernel_Raw_log =
      [0,
       create,
       copy,
       level,
       set_level,
       set_output,
       get_output,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       get_on_error,
       set_on_error,
       flush_and_close,
       is_closed,
       flushed,
       would_log,
       push_message_event,
       all_live_logs_flushed];
   runtime.caml_register_global
    (27, Async_log_kernel_Raw_log, cst_Async_log_kernel_Raw_log$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Log
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Monitor, Async_kernel__Synchronous_time_source, Async_log_kernel__Level, Async_log_kernel__Message, Async_log_kernel__Message_event, Async_log_kernel__Output, Async_log_kernel__Raw_log, Base, Base__Exn, Base__Random, CamlinternalLazy, Core, Core__Command_internal, Core__Option, Core__Sexp, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Log$0 = "Async_log_kernel__Log",
    cst_Raised_while$1 = "Raised while ",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ":",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Option = global_data.Core__Option,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Core_Command_internal = global_data.Core__Command_internal,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core = global_data.Core,
    Base_Exn = global_data.Base__Exn,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base = global_data.Base,
    Uuid = global_data.Uuid,
    Base_Random = global_data.Base__Random,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_log_kernel_Message_event =
      global_data.Async_log_kernel__Message_event,
    Async_log_kernel_Message = global_data.Async_log_kernel__Message,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_kernel_Raw_log = global_data.Async_log_kernel__Raw_log,
    Async_log_kernel_Output = global_data.Async_log_kernel__Output;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Log$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/log.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "log.ml");
   var
    create = Async_log_kernel_Raw_log[1],
    copy = Async_log_kernel_Raw_log[2],
    level = Async_log_kernel_Raw_log[3],
    set_level = Async_log_kernel_Raw_log[4],
    set_output = Async_log_kernel_Raw_log[5],
    get_output = Async_log_kernel_Raw_log[6],
    get_time_source = Async_log_kernel_Raw_log[7],
    set_time_source = Async_log_kernel_Raw_log[8],
    get_transform = Async_log_kernel_Raw_log[9],
    set_transform = Async_log_kernel_Raw_log[10],
    get_on_error = Async_log_kernel_Raw_log[11],
    set_on_error = Async_log_kernel_Raw_log[12],
    close = Async_log_kernel_Raw_log[13],
    is_closed = Async_log_kernel_Raw_log[14],
    flushed = Async_log_kernel_Raw_log[15],
    would_log = Async_log_kernel_Raw_log[16],
    _a_ = Async_log_kernel_Raw_log[17],
    _m_ = [0, 106380200],
    _l_ = [0, 815031438],
    _k_ = [0, -364068301],
    _j_ = [0, 106380200],
    _i_ = [0, 815031438],
    _h_ = [0, -364068301],
    cst_LEVEL_The_log_level = "LEVEL The log level",
    cst_log_level = "log-level",
    _g_ = [0, 523273847],
    _f_ = [0, 523273847],
    cst_Exit$0 = "Exit ",
    cst_Raised_while$0 = cst_Raised_while$1,
    cst_Enter$0 = "Enter ",
    _d_ = [0, "exn"],
    cst_Raised_while = cst_Raised_while$1,
    cst_Exit = "Exit",
    cst_sexp_Sexp_t = "%{sexp:Sexp.t}",
    _e_ = [0, 0],
    cst_Enter = "Enter",
    cst_Log_surround_id = "Log.surround_id",
    _c_ = [0, "from async log"],
    _b_ = [0, "<opaque>"],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Log = cst_Async_log_kernel_Log$0;
   function sexp_of_t(param){return _b_;}
   var async_trace_hook = [0, 0];
   function message(t, msg){
    var
     _$_ =
       caml_call2(would_log, t, caml_call1(Async_log_kernel_Message[4], msg));
    return _$_
            ? caml_call2
              (_a_, t, caml_call1(Async_log_kernel_Message_event[14], msg))
            : _$_;
   }
   function message_event(t, msg){
    var
     ___ =
       caml_call2
        (would_log, t, caml_call1(Async_log_kernel_Message_event[6], msg));
    return ___ ? caml_call2(_a_, t, msg) : ___;
   }
   function push_message_event(t, data, source, level, time, legacy_tags){
    function _X_(param){
     var
      _Y_ = caml_call1(get_time_source, t),
      _Z_ = caml_call1(Async_kernel_Synchronous_time_[12], _Y_);
     return caml_call1(Core_Time_ns[92], _Z_);
    }
    var
     time$0 = caml_call2(Core_Option[42], time, _X_),
     legacy_tags$0 = caml_call2(Core_Option[39], legacy_tags, 0),
     match = async_trace_hook[1];
    if(match)
     var hook = match[1], async_trace_span = caml_call1(hook, 0);
    else
     var async_trace_span = 0;
    return caml_call2
            (_a_,
             t,
             caml_call8
              (Async_log_kernel_Message_event[16][1],
               data,
               source,
               time$0,
               level,
               legacy_tags$0,
               0,
               0,
               async_trace_span));
   }
   function push_message(t, msg, level, time, tags){
    return push_message_event(t, msg, _c_, level, time, tags);
   }
   function sexp(level, time, tags, t, sexp){
    var _W_ = caml_call2(would_log, t, level);
    return _W_
            ? push_message(t, [0, 925483562, sexp], level, time, tags)
            : _W_;
   }
   function string(level, time, tags, t, s){
    var _V_ = caml_call2(would_log, t, level);
    return _V_ ? push_message(t, [0, -976970511, s], level, time, tags) : _V_;
   }
   function structured_message(level, time, tags, t, data, source){
    var _U_ = caml_call2(would_log, t, level);
    return _U_ ? push_message_event(t, data, source, level, time, tags) : _U_;
   }
   function printf(level, time, tags, t, fmt){
    if(! caml_call2(would_log, t, level))
     return caml_call2(Core[251], 0, fmt);
    function _T_(msg){
     return push_message(t, [0, -976970511, msg], level, time, tags);
    }
    return caml_call2(Core[254], _T_, fmt);
   }
   function add_uuid_to_tags(tags){
    var
     uuid =
       Base[87][1]
        ? Uuid[49][1][22]
        : caml_call1(Uuid[46], Base_Random[19][1]);
    return [0, [0, cst_Log_surround_id, caml_call1(Uuid[11], uuid)], tags];
   }
   function surround_s(on_subsequent_errors, level, time, tags$1, t, msg, eta){
    function log_sexp(tags, s){return sexp(level, time, tags, t, s);}
    var
     map_return = Async_kernel_Deferred[13],
     _K_ = Async_kernel_Monitor[16],
     _L_ = [0, on_subsequent_errors];
    if(tags$1) var sth = tags$1[1], tags = sth; else var tags = 0;
    var
     tags$0 = add_uuid_to_tags(tags),
     _I_ = [0, caml_call1(Core_Sexp[93], msg), 0];
    log_sexp
     ([0, tags$0],
      [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Enter), _I_]]);
    function _J_(param){
     if(0 === param[0]){
      var x = param[1], _M_ = [0, caml_call1(Core_Sexp[93], msg), 0];
      log_sexp
       ([0, tags$0],
        [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Exit), _M_]]);
      return x;
     }
     var
      exn = param[1],
      _N_ = [0, [1, [0, _d_, [0, caml_call1(Core[625], exn), 0]]], 0],
      _O_ = [0, caml_call1(Core_Sexp[93], msg), _N_];
     log_sexp
      ([0, tags$0],
       [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Raised_while), _O_]]);
     var
      _P_ = 0,
      _Q_ =
        [0,
         [24,
          _e_,
          function(param, custom_printf_001){
           var _S_ = caml_call1(Core_Sexp[93], custom_printf_001);
           return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _S_);
          },
          _P_],
         cst_sexp_Sexp_t],
      _R_ = caml_call2(Core[265], _Q_, msg);
     return caml_call2(Base_Exn[8], exn, _R_);
    }
    return caml_call2
            (map_return,
             caml_call1(caml_call6(_K_, 0, 0, 0, 0, _f_, _L_), eta),
             _J_);
   }
   function surroundf(on_subsequent_errors, level, time, tags$0, t, fmt){
    function log_string(tags){
     return function(_H_){return string(level, time, tags, t, _H_);};
    }
    var
     map_return = Async_kernel_Deferred[13],
     _y_ = Async_kernel_Monitor[16],
     _z_ = [0, on_subsequent_errors];
    if(tags$0) var sth = tags$0[1], tags = sth; else var tags = 0;
    function _x_(msg, eta){
     var
      tags$0 = add_uuid_to_tags(tags),
      _A_ = caml_call2(Core[18], cst_Enter$0, msg);
     log_string([0, tags$0])(_A_);
     function _B_(param){
      if(0 === param[0]){
       var x = param[1], _C_ = caml_call2(Core[18], cst_Exit$0, msg);
       log_string([0, tags$0])(_C_);
       return x;
      }
      var
       exn = param[1],
       _D_ = caml_call1(Base_Exn[10], exn),
       _E_ = caml_call2(Core[18], cst, _D_),
       _F_ = caml_call2(Core[18], msg, _E_),
       _G_ = caml_call2(Core[18], cst_Raised_while$0, _F_);
      log_string([0, tags$0])(_G_);
      return caml_call2(Base_Exn[8], exn, msg);
     }
     return caml_call2
             (map_return,
              caml_call1(caml_call6(_y_, 0, 0, 0, 0, _g_, _z_), eta),
              _B_);
    }
    return caml_call1(caml_call1(Core[254], _x_), fmt);
   }
   function set_level_via_param_helper(f){
    var _s_ = Core_Option[46];
    function _t_(_w_){return caml_call2(_s_, _w_, f);}
    var
     _u_ =
       caml_call1(Core_Command_internal[20][29], Async_log_kernel_Level[17]),
     _v_ =
       caml_call5
        (Core_Command_internal[20][17],
         0,
         0,
         cst_log_level,
         _u_,
         cst_LEVEL_The_log_level);
    return caml_call2(Core_Command_internal[20][2], _v_, _t_);
   }
   function set_level_via_param(log){
    return set_level_via_param_helper(caml_call1(set_level, log));
   }
   function set_level_via_param_lazy(log){
    return set_level_via_param_helper
            (function(level){
              var _q_ = runtime.caml_obj_tag(log);
              a:
              if(250 === _q_)
               var _r_ = log[1];
              else{
               if(246 !== _q_ && 244 !== _q_){var _r_ = log; break a;}
               var _r_ = caml_call1(CamlinternalLazy[2], log);
              }
              return caml_call2(set_level, _r_, level);
             });
   }
   function raw(time, tags, t, fmt){return printf(0, time, tags, t, fmt);}
   function debug(time, tags, t, fmt){return printf(_h_, time, tags, t, fmt);}
   function info(time, tags, t, fmt){return printf(_i_, time, tags, t, fmt);}
   function error(time, tags, t, fmt){return printf(_j_, time, tags, t, fmt);}
   function raw_s(time, tags, t, the_sexp){
    return sexp(0, time, tags, t, the_sexp);
   }
   function debug_s(time, tags, t, the_sexp){
    return sexp(_k_, time, tags, t, the_sexp);
   }
   function info_s(time, tags, t, the_sexp){
    return sexp(_l_, time, tags, t, the_sexp);
   }
   function error_s(time, tags, t, the_sexp){
    return sexp(_m_, time, tags, t, the_sexp);
   }
   var create_output = Async_log_kernel_Output[12][1];
   function create$0(map_output, level){
    var output = [0, caml_call1(create_output, map_output), 0];
    return caml_call5(create, level, output, -146189108, 0, 0);
   }
   var
    For_testing = [0, create_output, create$0],
    push_message_event$0 = Async_log_kernel_Raw_log[17];
   function set_async_trace_hook(f){async_trace_hook[1] = [0, f]; return 0;}
   var
    all_live_logs_flushed = Async_log_kernel_Raw_log[18],
    Private =
      [0,
       push_message_event$0,
       set_async_trace_hook,
       set_level_via_param_lazy,
       all_live_logs_flushed];
   function create$1(level, output, on_error, time_source, transform, param){
    return caml_call5(create, level, output, on_error, time_source, transform);
   }
   function create_null(param){
    var _n_ = 0, _o_ = 0, _p_ = 0;
    return create$1
            (106380200,
             0,
             [0, 747848894, function(param){return 0;}],
             _p_,
             _o_,
             _n_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Log);
   var
    Async_log_kernel_Log =
      [0,
       sexp_of_t,
       set_level_via_param,
       set_level,
       level,
       set_output,
       get_output,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       get_on_error,
       set_on_error,
       close,
       is_closed,
       flushed,
       create$1,
       create_null,
       copy,
       raw,
       debug,
       info,
       error,
       printf,
       raw_s,
       info_s,
       error_s,
       debug_s,
       sexp,
       string,
       structured_message,
       message,
       message_event,
       surround_s,
       surroundf,
       would_log,
       For_testing,
       Private];
   runtime.caml_register_global
    (54, Async_log_kernel_Log, cst_Async_log_kernel_Log$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Global_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Global_in = "Async_log_kernel__Global_intf",
    cst_async_log_kernel = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Global_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/global_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel, "global_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Global_in);
   var Async_log_kernel_Global_intf = [0];
   runtime.caml_register_global
    (11, Async_log_kernel_Global_intf, cst_Async_log_kernel_Global_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Global
//# unitInfo: Requires: Async_log_kernel__Log, Async_log_kernel__On_error, Async_log_kernel__Output, CamlinternalLazy, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Global$0 = "Async_log_kernel__Global",
    cst_async_log_kernel$0 = "async_log_kernel",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_log_kernel_Output = global_data.Async_log_kernel__Output,
    Async_log_kernel_Log = global_data.Async_log_kernel__Log,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Async_log_kernel_On_error = global_data.Async_log_kernel__On_error,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Global$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/global.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log_kernel$0, "global.ml");
   var
    _c_ = [0, 106380200],
    _b_ = [0, 815031438],
    _a_ = [0, -364068301],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Global = cst_Async_log_kernel_Global$0;
   function Make(symbol){
    var
     log =
       [246,
        function(param){
         var
          _ag_ = Async_log_kernel_On_error[1],
          _ah_ = [0, caml_call1(Core[248], Async_log_kernel_Output[10]), 0];
         return caml_call6
                 (Async_log_kernel_Log[16], 815031438, _ah_, _ag_, 0, 0, 0);
        }];
    function level(param){
     var _ae_ = caml_obj_tag(log);
     a:
     if(250 === _ae_)
      var _af_ = log[1];
     else{
      if(246 !== _ae_ && 244 !== _ae_){var _af_ = log; break a;}
      var _af_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call1(Async_log_kernel_Log[4], _af_);
    }
    function set_level(level){
     var _ac_ = caml_obj_tag(log);
     a:
     if(250 === _ac_)
      var _ad_ = log[1];
     else{
      if(246 !== _ac_ && 244 !== _ac_){var _ad_ = log; break a;}
      var _ad_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[3], _ad_, level);
    }
    function set_output(output){
     var _aa_ = caml_obj_tag(log);
     a:
     if(250 === _aa_)
      var _ab_ = log[1];
     else{
      if(246 !== _aa_ && 244 !== _aa_){var _ab_ = log; break a;}
      var _ab_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[5], _ab_, output);
    }
    function get_output(param){
     var ___ = caml_obj_tag(log);
     a:
     if(250 === ___)
      var _$_ = log[1];
     else{
      if(246 !== ___ && 244 !== ___){var _$_ = log; break a;}
      var _$_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call1(Async_log_kernel_Log[6], _$_);
    }
    function set_on_error(handler){
     var _Y_ = caml_obj_tag(log);
     a:
     if(250 === _Y_)
      var _Z_ = log[1];
     else{
      if(246 !== _Y_ && 244 !== _Y_){var _Z_ = log; break a;}
      var _Z_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[12], _Z_, handler);
    }
    function get_time_source(param){
     var _W_ = caml_obj_tag(log);
     a:
     if(250 === _W_)
      var _X_ = log[1];
     else{
      if(246 !== _W_ && 244 !== _W_){var _X_ = log; break a;}
      var _X_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call1(Async_log_kernel_Log[7], _X_);
    }
    function set_time_source(time_source){
     var _U_ = caml_obj_tag(log);
     a:
     if(250 === _U_)
      var _V_ = log[1];
     else{
      if(246 !== _U_ && 244 !== _U_){var _V_ = log; break a;}
      var _V_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[8], _V_, time_source);
    }
    function get_transform(param){
     var _S_ = caml_obj_tag(log);
     a:
     if(250 === _S_)
      var _T_ = log[1];
     else{
      if(246 !== _S_ && 244 !== _S_){var _T_ = log; break a;}
      var _T_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call1(Async_log_kernel_Log[9], _T_);
    }
    function set_transform(transform){
     var _Q_ = caml_obj_tag(log);
     a:
     if(250 === _Q_)
      var _R_ = log[1];
     else{
      if(246 !== _Q_ && 244 !== _Q_){var _R_ = log; break a;}
      var _R_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[10], _R_, transform);
    }
    function would_log(level){
     var _O_ = caml_obj_tag(log);
     a:
     if(250 === _O_)
      var _P_ = log[1];
     else{
      if(246 !== _O_ && 244 !== _O_){var _P_ = log; break a;}
      var _P_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[35], _P_, level);
    }
    function raw(time, tags, k){
     var _M_ = caml_obj_tag(log);
     a:
     if(250 === _M_)
      var _N_ = log[1];
     else{
      if(246 !== _M_ && 244 !== _M_){var _N_ = log; break a;}
      var _N_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call4(Async_log_kernel_Log[19], time, tags, _N_, k);
    }
    function info(time, tags, k){
     var _K_ = caml_obj_tag(log);
     a:
     if(250 === _K_)
      var _L_ = log[1];
     else{
      if(246 !== _K_ && 244 !== _K_){var _L_ = log; break a;}
      var _L_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call4(Async_log_kernel_Log[21], time, tags, _L_, k);
    }
    function error(time, tags, k){
     var _I_ = caml_obj_tag(log);
     a:
     if(250 === _I_)
      var _J_ = log[1];
     else{
      if(246 !== _I_ && 244 !== _I_){var _J_ = log; break a;}
      var _J_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call4(Async_log_kernel_Log[22], time, tags, _J_, k);
    }
    function debug(time, tags, k){
     var _G_ = caml_obj_tag(log);
     a:
     if(250 === _G_)
      var _H_ = log[1];
     else{
      if(246 !== _G_ && 244 !== _G_){var _H_ = log; break a;}
      var _H_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call4(Async_log_kernel_Log[20], time, tags, _H_, k);
    }
    function raw_s(time, tags, the_sexp){
     var _E_ = caml_obj_tag(log);
     a:
     if(250 === _E_)
      var _F_ = log[1];
     else{
      if(246 !== _E_ && 244 !== _E_){var _F_ = log; break a;}
      var _F_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5(Async_log_kernel_Log[28], 0, time, tags, _F_, the_sexp);
    }
    function debug_s(time, tags, the_sexp){
     var _C_ = caml_obj_tag(log);
     a:
     if(250 === _C_)
      var _D_ = log[1];
     else{
      if(246 !== _C_ && 244 !== _C_){var _D_ = log; break a;}
      var _D_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5
             (Async_log_kernel_Log[28], _a_, time, tags, _D_, the_sexp);
    }
    function info_s(time, tags, the_sexp){
     var _A_ = caml_obj_tag(log);
     a:
     if(250 === _A_)
      var _B_ = log[1];
     else{
      if(246 !== _A_ && 244 !== _A_){var _B_ = log; break a;}
      var _B_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5
             (Async_log_kernel_Log[28], _b_, time, tags, _B_, the_sexp);
    }
    function error_s(time, tags, the_sexp){
     var _y_ = caml_obj_tag(log);
     a:
     if(250 === _y_)
      var _z_ = log[1];
     else{
      if(246 !== _y_ && 244 !== _y_){var _z_ = log; break a;}
      var _z_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5
             (Async_log_kernel_Log[28], _c_, time, tags, _z_, the_sexp);
    }
    function flushed(param){
     var _w_ = caml_obj_tag(log);
     a:
     if(250 === _w_)
      var _x_ = log[1];
     else{
      if(246 !== _w_ && 244 !== _w_){var _x_ = log; break a;}
      var _x_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call1(Async_log_kernel_Log[15], _x_);
    }
    function printf(level, time, tags, k){
     var _u_ = caml_obj_tag(log);
     a:
     if(250 === _u_)
      var _v_ = log[1];
     else{
      if(246 !== _u_ && 244 !== _u_){var _v_ = log; break a;}
      var _v_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5(Async_log_kernel_Log[23], level, time, tags, _v_, k);
    }
    function sexp(level, time, tags, s){
     var _s_ = caml_obj_tag(log);
     a:
     if(250 === _s_)
      var _t_ = log[1];
     else{
      if(246 !== _s_ && 244 !== _s_){var _t_ = log; break a;}
      var _t_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5(Async_log_kernel_Log[28], level, time, tags, _t_, s);
    }
    function string(level, time, tags, s){
     var _q_ = caml_obj_tag(log);
     a:
     if(250 === _q_)
      var _r_ = log[1];
     else{
      if(246 !== _q_ && 244 !== _q_){var _r_ = log; break a;}
      var _r_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call5(Async_log_kernel_Log[29], level, time, tags, _r_, s);
    }
    function message(msg){
     var _o_ = caml_obj_tag(log);
     a:
     if(250 === _o_)
      var _p_ = log[1];
     else{
      if(246 !== _o_ && 244 !== _o_){var _p_ = log; break a;}
      var _p_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[31], _p_, msg);
    }
    function message_event(msg){
     var _m_ = caml_obj_tag(log);
     a:
     if(250 === _m_)
      var _n_ = log[1];
     else{
      if(246 !== _m_ && 244 !== _m_){var _n_ = log; break a;}
      var _n_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call2(Async_log_kernel_Log[32], _n_, msg);
    }
    function structured_message(level, time, tags){
     var _k_ = caml_obj_tag(log);
     a:
     if(250 === _k_)
      var _l_ = log[1];
     else{
      if(246 !== _k_ && 244 !== _k_){var _l_ = log; break a;}
      var _l_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call4(Async_log_kernel_Log[30], level, time, tags, _l_);
    }
    function surround_s(on_subsequent_errors, level, time, tags, msg, f){
     var _i_ = caml_obj_tag(log);
     a:
     if(250 === _i_)
      var _j_ = log[1];
     else{
      if(246 !== _i_ && 244 !== _i_){var _j_ = log; break a;}
      var _j_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call7
             (Async_log_kernel_Log[33],
              on_subsequent_errors,
              level,
              time,
              tags,
              _j_,
              msg,
              f);
    }
    function surroundf(on_subsequent_errors, level, time, tags, fmt){
     var _g_ = caml_obj_tag(log);
     a:
     if(250 === _g_)
      var _h_ = log[1];
     else{
      if(246 !== _g_ && 244 !== _g_){var _h_ = log; break a;}
      var _h_ = caml_call1(CamlinternalLazy[2], log);
     }
     return caml_call6
             (Async_log_kernel_Log[34],
              on_subsequent_errors,
              level,
              time,
              tags,
              _h_,
              fmt);
    }
    function set_level_via_param(param){
     return caml_call1(Async_log_kernel_Log[37][3], log);
    }
    function use_test_output(opt, param){
     if(opt)
      var sth = opt[1], map_output = sth;
     else
      var map_output = function(_f_){return _f_;};
     return set_output
             ([0, caml_call1(Async_log_kernel_Output[12][1], map_output), 0]);
    }
    var For_testing = [0, use_test_output];
    return [0,
            log,
            level,
            set_level,
            set_output,
            get_output,
            set_on_error,
            get_time_source,
            set_time_source,
            get_transform,
            set_transform,
            would_log,
            raw,
            info,
            error,
            debug,
            raw_s,
            debug_s,
            info_s,
            error_s,
            flushed,
            printf,
            sexp,
            string,
            message,
            message_event,
            structured_message,
            surround_s,
            surroundf,
            set_level_via_param,
            For_testing];
   }
   var
    include = Make(0),
    log = include[1],
    level = include[2],
    set_level = include[3],
    set_output = include[4],
    get_output = include[5],
    set_on_error = include[6],
    get_time_source = include[7],
    set_time_source = include[8],
    get_transform = include[9],
    set_transform = include[10],
    would_log = include[11],
    raw = include[12],
    info = include[13],
    error = include[14],
    debug = include[15],
    raw_s = include[16],
    debug_s = include[17],
    info_s = include[18],
    error_s = include[19],
    flushed = include[20],
    printf = include[21],
    sexp = include[22],
    string = include[23],
    message = include[24],
    message_event = include[25],
    structured_message = include[26],
    surround_s = include[27],
    surroundf = include[28],
    set_level_via_param = include[29],
    For_testing = include[30];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Global);
   var
    Async_log_kernel_Global =
      [0,
       function(_d_){
        var _e_ = Make(_d_);
        return [0,
                _e_[1],
                _e_[2],
                _e_[3],
                _e_[4],
                _e_[5],
                _e_[6],
                _e_[7],
                _e_[8],
                _e_[9],
                _e_[10],
                _e_[11],
                _e_[29],
                _e_[12],
                _e_[13],
                _e_[14],
                _e_[15],
                _e_[20],
                _e_[21],
                _e_[16],
                _e_[18],
                _e_[19],
                _e_[17],
                _e_[22],
                _e_[23],
                _e_[26],
                _e_[24],
                _e_[25],
                _e_[27],
                _e_[28],
                _e_[30]];
       },
       log,
       level,
       set_level,
       set_output,
       get_output,
       set_on_error,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       would_log,
       set_level_via_param,
       raw,
       info,
       error,
       debug,
       flushed,
       printf,
       raw_s,
       info_s,
       error_s,
       debug_s,
       sexp,
       string,
       structured_message,
       message,
       message_event,
       surround_s,
       surroundf,
       For_testing];
   runtime.caml_register_global
    (19, Async_log_kernel_Global, cst_Async_log_kernel_Global$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Ppx_log_syntax
//# unitInfo: Requires: Async_log_kernel__Global, Async_log_kernel__Log, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Ppx_log_s$0 = "Async_log_kernel__Ppx_log_syntax",
    cst_async_log_kernel$0 = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_kernel_Log = global_data.Async_log_kernel__Log,
    Async_log_kernel_Global = global_data.Async_log_kernel__Global;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Ppx_log_s$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/ppx_log_syntax.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "ppx_log_syntax.ml");
   var
    would_log = Async_log_kernel_Log[35],
    message = Async_log_kernel_Log[30],
    would_log$0 = Async_log_kernel_Global[12],
    message$0 = Async_log_kernel_Global[26],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Ppx_log_s = cst_Async_log_kernel_Ppx_log_s$0,
    default$0 = 0,
    default$1 = 0,
    default$2 = -750766706;
   function would_log$1(param){return 0;}
   function message$1(param, _d_, _c_, _b_, _a_){return -750766706;}
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Ppx_log_s);
   var
    Async_log_kernel_Ppx_log_synta =
      [0,
       would_log,
       default$0,
       message,
       [0, would_log$0, default$1, message$0],
       [0,
        [0,
         would_log,
         default$0,
         message,
         [0, would_log$1, default$2, message$1]]]];
   runtime.caml_register_global
    (13, Async_log_kernel_Ppx_log_synta, cst_Async_log_kernel_Ppx_log_s$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel__Output_format
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel_Output_fo$0 = "Async_log_kernel__Output_format",
    cst_Bin_prot$0 = "Bin_prot",
    cst_Sexp$0 = "Sexp",
    cst_Sexp_hum$0 = "Sexp_hum",
    cst_Text$0 = "Text",
    cst_async_log_kernel$0 = "async_log_kernel",
    cst_kernel_output_format_ml_St = "kernel/output_format.ml.Stable.V1.t",
    cst_kernel_output_format_ml_ma =
      "kernel/output_format.ml.machine_readable",
    cst_kernel_output_format_ml_t = "kernel/output_format.ml.t",
    cst_machine_readable$1 = "machine_readable",
    cst_t$1 = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err$1 = [2, cst_kernel_output_format_ml_t],
    err$0 = [2, cst_kernel_output_format_ml_ma],
    err = [2, cst_kernel_output_format_ml_St],
    error_source_006 = "kernel/output_format.ml.Stable.V1.machine_readable",
    error_source_014 = cst_kernel_output_format_ml_St,
    error_source_016 = cst_kernel_output_format_ml_St,
    all_of_machine_readable =
      [0, 925483562, [0, 706852075, [0, -973032065, 0]]],
    error_source_023 = cst_kernel_output_format_ml_ma,
    error_source_025 = cst_kernel_output_format_ml_ma,
    error_source_031 = cst_kernel_output_format_ml_t,
    error_source_033 = cst_kernel_output_format_ml_t,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib_List = global_data.Stdlib__List;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel_Output_fo$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/output_format.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel$0, "output_format.ml");
   var
    _a_ = [0, caml_call2(Bin_prot_Shape[6], cst_Bin_prot$0, 0), 0],
    _b_ = [0, caml_call2(Bin_prot_Shape[6], cst_Sexp_hum$0, 0), _a_],
    _c_ = [0, caml_call2(Bin_prot_Shape[6], cst_Sexp$0, 0), _b_],
    _d_ = caml_call1(Bin_shape[4][1], "kernel/output_format.ml:7:6"),
    _e_ = caml_call2(Bin_prot_Shape[8], _d_, _c_),
    _f_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_machine_readable$1), 0, _e_], 0],
    _g_ = caml_call1(Bin_shape[4][1], "kernel/output_format.ml:6:4"),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    _h_ = caml_call1(Bin_shape[2][1], cst_machine_readable$1),
    bin_shape_machine_readable =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _h_), 0),
    _l_ = [0, caml_call2(Bin_prot_Shape[6], cst_Text$0, 0), 0],
    _m_ = caml_call1(Bin_shape[4][1], "kernel/output_format.ml:14:8"),
    _n_ =
      [0, caml_call2(Bin_prot_Shape[7], _m_, bin_shape_machine_readable), _l_],
    _o_ = caml_call1(Bin_shape[4][1], "kernel/output_format.ml:14:6"),
    _p_ = caml_call2(Bin_prot_Shape[8], _o_, _n_),
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _p_], 0],
    _r_ = caml_call1(Bin_shape[4][1], "kernel/output_format.ml:13:4"),
    group$0 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _s_), 0),
    _O_ = [0, cst_Text$0],
    _D_ = [0, cst_Sexp$0],
    _E_ = [0, cst_Bin_prot$0],
    _C_ = [0, cst_Sexp_hum$0],
    _t_ = [0, cst_Text$0],
    _j_ = [0, cst_Sexp$0],
    _k_ = [0, cst_Bin_prot$0],
    _i_ = [0, cst_Sexp_hum$0],
    cst_Bin_prot = cst_Bin_prot$0,
    cst_Sexp_hum = cst_Sexp_hum$0,
    cst_Sexp = cst_Sexp$0,
    cst_kernel_output_format_ml_22 = "kernel/output_format.ml:22:2",
    cst_machine_readable = cst_machine_readable$1,
    cst_kernel_output_format_ml_21 = "kernel/output_format.ml:21:0",
    cst_machine_readable$0 = cst_machine_readable$1,
    cst_Text = cst_Text$0,
    cst_kernel_output_format_ml_29 = "kernel/output_format.ml:29:4",
    cst_kernel_output_format_ml_29$0 = "kernel/output_format.ml:29:2",
    cst_t = cst_t$1,
    cst_kernel_output_format_ml_28 = "kernel/output_format.ml:28:0",
    cst_t$0 = cst_t$1,
    _N_ = [0, 936573133, 0],
    cst_async_log_kernel = cst_async_log_kernel$0,
    cst_Async_log_kernel_Output_fo = cst_Async_log_kernel_Output_fo$0;
   function bin_size_t(v){
    a:
    if(typeof v === "number"){
     if(-973032065 !== v && 706852075 !== v && 925483562 !== v) break a;
     return 4;
    }
    return 4;
   }
   function bin_write_t(buf, pos, v){
    return 936573133 <= v
            ? caml_call3(Bin_prot_Write[29], buf, pos, 936573133)
            : 706852075
              === v
              ? caml_call3(Bin_prot_Write[29], buf, pos, 706852075)
              : 925483562
                <= v
                ? caml_call3(Bin_prot_Write[29], buf, pos, 925483562)
                : caml_call3(Bin_prot_Write[29], buf, pos, -973032065);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    try{
     if(-973032065 === vint)
      var _at_ = -973032065;
     else if(706852075 === vint)
      var _at_ = 706852075;
     else{
      if(925483562 !== vint)
       throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
      var _at_ = 925483562;
     }
     return _at_;
    }
    catch(_au_){
     var _as_ = caml_wrap_exception(_au_);
     if(_as_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_as_, 0);
     if(936573133 === vint) return 936573133;
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
    }
   }
   function bin_read_t$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _aq_ = bin_read_t(buf, pos_ref, vint); return _aq_;}
    catch(_ar_){
     var _ap_ = caml_wrap_exception(_ar_);
     if(_ap_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_ap_, 0);
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(sexp_015){
    try{
     try{
      if(0 === sexp_015[0])
       var
        atom_002 = sexp_015[1],
        _ak_ =
          caml_string_notequal(atom_002, cst_Bin_prot$0)
           ? caml_string_notequal
              (atom_002, cst_Sexp$0)
             ? caml_string_notequal
                (atom_002, cst_Sexp_hum$0)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : 706852075
             : 925483562
           : -973032065;
      else{
       var _ah_ = sexp_015[1];
       if(_ah_){
        var match = _ah_[1];
        if(0 === match[0])
         var
          atom_002$0 = match[1],
          _ak_ =
            caml_string_notequal(atom_002$0, cst_Bin_prot$0)
             ? caml_string_notequal
                (atom_002$0, cst_Sexp$0)
               ? caml_string_notequal
                  (atom_002$0, cst_Sexp_hum$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_015)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_015)
             : caml_call2
               (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_015);
        else
         var
          _ak_ =
            caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_006, sexp_015);
       }
       else
        var
         _ak_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[29], error_source_006, sexp_015);
      }
      var _am_ = _ak_;
     }
     catch(_ao_){
      var _ai_ = caml_wrap_exception(_ao_);
      if(_ai_ !== Sexplib0_Sexp_conv_error[22])
       throw caml_maybe_attach_backtrace(_ai_, 0);
      if(0 === sexp_015[0])
       var
        atom_010 = sexp_015[1],
        _am_ =
          caml_string_notequal(atom_010, cst_Text$0)
           ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
           : 936573133;
      else{
       var _aj_ = sexp_015[1];
       if(_aj_){
        var match$0 = _aj_[1];
        if(0 === match$0[0])
         var
          atom_010$0 = match$0[1],
          _am_ =
            caml_string_notequal(atom_010$0, cst_Text$0)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[25], error_source_014, sexp_015);
        else
         var
          _am_ =
            caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_014, sexp_015);
       }
       else
        var
         _am_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[29], error_source_014, sexp_015);
      }
     }
     return _am_;
    }
    catch(_an_){
     var _al_ = caml_wrap_exception(_an_);
     if(_al_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_016, sexp_015);
     throw caml_maybe_attach_backtrace(_al_, 0);
    }
   }
   function sexp_of_t(v_017){
    return 936573133 <= v_017
            ? _t_
            : 706852075 === v_017 ? _i_ : 925483562 <= v_017 ? _j_ : _k_;
   }
   var
    _u_ = [0, caml_call2(Bin_prot_Shape[6], cst_Bin_prot, 0), 0],
    _v_ = [0, caml_call2(Bin_prot_Shape[6], cst_Sexp_hum, 0), _u_],
    _w_ = [0, caml_call2(Bin_prot_Shape[6], cst_Sexp, 0), _v_],
    _x_ = caml_call1(Bin_shape[4][1], cst_kernel_output_format_ml_22),
    _y_ = caml_call2(Bin_prot_Shape[8], _x_, _w_),
    _z_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_machine_readable), 0, _y_], 0],
    _A_ = caml_call1(Bin_shape[4][1], cst_kernel_output_format_ml_21),
    group$1 = caml_call2(Bin_prot_Shape[2], _A_, _z_),
    _B_ = caml_call1(Bin_shape[2][1], cst_machine_readable$0),
    bin_shape_machine_readable$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _B_), 0);
   function bin_size_machine_readable(param){return 4;}
   function bin_write_machine_readable(buf, pos, param){
    return 706852075 === param
            ? caml_call3(Bin_prot_Write[29], buf, pos, 706852075)
            : 925483562
              <= param
              ? caml_call3(Bin_prot_Write[29], buf, pos, 925483562)
              : caml_call3(Bin_prot_Write[29], buf, pos, -973032065);
   }
   var
    bin_writer_machine_readable =
      [0, bin_size_machine_readable, bin_write_machine_readable];
   function bin_read_machine_readable(buf, param, vint){
    if(-973032065 === vint) return -973032065;
    if(706852075 === vint) return 706852075;
    if(925483562 === vint) return 925483562;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_machine_readable$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _af_ = bin_read_machine_readable(buf, pos_ref, vint); return _af_;
    }
    catch(_ag_){
     var _ae_ = caml_wrap_exception(_ag_);
     if(_ae_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$0, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_ae_, 0);
    }
   }
   var
    bin_reader_machine_readable =
      [0, bin_read_machine_readable$0, bin_read_machine_readable],
    bin_machine_readable =
      [0,
       bin_shape_machine_readable$0,
       bin_writer_machine_readable,
       bin_reader_machine_readable];
   function machine_readable_of_sexp(sexp_021){
    if(0 === sexp_021[0]){
     var atom_019 = sexp_021[1];
     return caml_string_notequal(atom_019, cst_Bin_prot$0)
             ? caml_string_notequal
                (atom_019, cst_Sexp$0)
               ? caml_string_notequal
                  (atom_019, cst_Sexp_hum$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : 706852075
               : 925483562
             : -973032065;
    }
    var _ad_ = sexp_021[1];
    if(! _ad_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_023, sexp_021);
    var match = _ad_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_023, sexp_021);
    var atom_019$0 = match[1];
    return caml_string_notequal(atom_019$0, cst_Bin_prot$0)
            ? caml_string_notequal
               (atom_019$0, cst_Sexp$0)
              ? caml_string_notequal
                 (atom_019$0, cst_Sexp_hum$0)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_023, sexp_021)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_023, sexp_021)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_023, sexp_021);
   }
   function machine_readable_of_sexp$0(sexp_024){
    try{var _ab_ = machine_readable_of_sexp(sexp_024); return _ab_;}
    catch(_ac_){
     var _aa_ = caml_wrap_exception(_ac_);
     if(_aa_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_025, sexp_024);
     throw caml_maybe_attach_backtrace(_aa_, 0);
    }
   }
   function sexp_of_machine_readable(param){
    return 706852075 === param ? _C_ : 925483562 <= param ? _D_ : _E_;
   }
   var
    _F_ = [0, caml_call2(Bin_prot_Shape[6], cst_Text, 0), 0],
    _G_ = caml_call1(Bin_shape[4][1], cst_kernel_output_format_ml_29),
    _H_ =
      [0,
       caml_call2(Bin_prot_Shape[7], _G_, bin_shape_machine_readable$0),
       _F_],
    _I_ = caml_call1(Bin_shape[4][1], cst_kernel_output_format_ml_29$0),
    _J_ = caml_call2(Bin_prot_Shape[8], _I_, _H_),
    _K_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _J_], 0],
    _L_ = caml_call1(Bin_shape[4][1], cst_kernel_output_format_ml_28),
    group$2 = caml_call2(Bin_prot_Shape[2], _L_, _K_),
    _M_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _M_), 0);
   function bin_size_t$0(v){
    a:
    if(typeof v === "number"){
     if(-973032065 !== v && 706852075 !== v && 925483562 !== v) break a;
     return 4;
    }
    return 4;
   }
   function bin_write_t$0(buf, pos, v){
    return 936573133 <= v
            ? caml_call3(Bin_prot_Write[29], buf, pos, 936573133)
            : bin_write_machine_readable(buf, pos, v);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    try{var ___ = bin_read_machine_readable(buf, pos_ref, vint); return ___;}
    catch(_$_){
     var _Z_ = caml_wrap_exception(_$_);
     if(_Z_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_Z_, 0);
     if(936573133 === vint) return 936573133;
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
    }
   }
   function bin_read_t$2(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _X_ = bin_read_t$1(buf, pos_ref, vint); return _X_;}
    catch(_Y_){
     var _W_ = caml_wrap_exception(_Y_);
     if(_W_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$1, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    all = caml_call2(Stdlib_List[12], all_of_machine_readable, _N_);
   function t_of_sexp$0(sexp_026){
    try{var _U_ = machine_readable_of_sexp(sexp_026); return _U_;}
    catch(_V_){
     var _S_ = caml_wrap_exception(_V_);
     if(_S_ !== Sexplib0_Sexp_conv_error[22])
      throw caml_maybe_attach_backtrace(_S_, 0);
     if(0 === sexp_026[0]){
      var atom_027 = sexp_026[1];
      return caml_string_notequal(atom_027, cst_Text$0)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : 936573133;
     }
     var _T_ = sexp_026[1];
     if(! _T_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_031, sexp_026);
     var match = _T_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[28], error_source_031, sexp_026);
     var atom_027$0 = match[1];
     return caml_string_notequal(atom_027$0, cst_Text$0)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[25], error_source_031, sexp_026);
    }
   }
   function t_of_sexp$1(sexp_032){
    try{var _Q_ = t_of_sexp$0(sexp_032); return _Q_;}
    catch(_R_){
     var _P_ = caml_wrap_exception(_R_);
     if(_P_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_033, sexp_032);
     throw caml_maybe_attach_backtrace(_P_, 0);
    }
   }
   function sexp_of_t$0(v_034){
    return 936573133 <= v_034 ? _O_ : sexp_of_machine_readable(v_034);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel_Output_fo);
   var
    Async_log_kernel_Output_format =
      [0,
       bin_shape_machine_readable$0,
       bin_size_machine_readable,
       bin_write_machine_readable,
       bin_writer_machine_readable,
       bin_read_machine_readable$0,
       bin_read_machine_readable,
       bin_reader_machine_readable,
       bin_machine_readable,
       all_of_machine_readable,
       sexp_of_machine_readable,
       machine_readable_of_sexp$0,
       machine_readable_of_sexp,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       all,
       sexp_of_t$0,
       t_of_sexp$1,
       t_of_sexp$0,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t]]];
   runtime.caml_register_global
    (82, Async_log_kernel_Output_format, cst_Async_log_kernel_Output_fo$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log_kernel
//# unitInfo: Requires: Async_log_kernel__Output, Async_log_kernel__Ppx_log_syntax, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_kernel = "Async_log_kernel",
    cst_async_log_kernel = "async_log_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_kernel_Output = global_data.Async_log_kernel__Output,
    Async_log_kernel_Ppx_log_synta =
      global_data.Async_log_kernel__Ppx_log_syntax;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_kernel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "kernel/async_log_kernel.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log_kernel, "async_log_kernel.ml");
   var
    create = Async_log_kernel_Output[2],
    create_expert = Async_log_kernel_Output[3],
    create_unbuffered = Async_log_kernel_Output[4],
    empty = Async_log_kernel_Output[5],
    rotate = Async_log_kernel_Output[7],
    filter_to_level = Async_log_kernel_Output[9],
    Private = Async_log_kernel_Output[11],
    For_testing = Async_log_kernel_Output[12],
    For_testing$0 = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_kernel);
   var
    Async_log_kernel =
      [0,
       [0,
        create,
        create_expert,
        create_unbuffered,
        filter_to_level,
        empty,
        rotate,
        [0, Private[2]],
        [0, For_testing[2]]],
       [0, Async_log_kernel_Ppx_log_synta],
       For_testing$0];
   runtime.caml_register_global(13, Async_log_kernel, cst_Async_log_kernel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
