// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Command__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Command = [0],
    Command$0 = [0, Command];
   runtime.caml_register_global(0, Command$0, "Command__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Import
//# unitInfo: Requires: Base__Printf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Import = "Command__Import",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio,
    Base_Printf = global_data.Base__Printf;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   caml_call1(Ppx_expect_runtime[1][1], "command/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_command, "import.ml");
   var
    eprintf = Stdio[7],
    printf = Stdio[4],
    print_s = Stdio[5],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10],
    sprintf = Base_Printf[2],
    failwithf = Base_Printf[6],
    ksprintf = Base_Printf[4];
   caml_call1(Ppx_inline_test_lib[7], cst_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Import);
   var
    Command_Import =
      [0,
       eprintf,
       printf,
       print_s,
       print_string,
       print_endline,
       prerr_endline,
       sprintf,
       failwithf,
       ksprintf];
   runtime.caml_register_global(13, Command_Import, cst_Command_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Env_var
//# unitInfo: Requires: Base, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Env_var$0 = "Command__Env_var",
    cst_command$0 = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Env_var$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   caml_call1(Ppx_expect_runtime[1][1], "command/src/env_var.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_command$0, "env_var.ml");
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, "COMMAND_OUTPUT_INSTALLATION_BASH"],
    _b_ = [0, "COMMAND_OUTPUT_HELP_SEXP"],
    _c_ = [0, "COMP_CWORD"],
    cst_command = cst_command$0,
    cst_Command_Env_var = cst_Command_Env_var$0;
   function sexp_of_t(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   function to_string(t){
    var _d_ = sexp_of_t(t);
    return caml_call1(Base[85][16], _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Env_var);
   var Command_Env_var = [0, compare, all, sexp_of_t, to_string];
   runtime.caml_register_global(16, Command_Env_var, cst_Command_Env_var$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Shape
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__Fn, Base__Int, Base__Invariant, Base__Lazy, Base__List, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__String, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, CamlinternalLazy, Command__Env_var, Command__Import, Expect_test_config, Filename_base, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stable_witness, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$8 = " ",
    cst$6 = ", ",
    cst$5 = "-",
    cst_Ad_hoc = "Ad_hoc",
    cst_Base = "Base",
    cst_Basic = "Basic",
    cst_Command_Shape$0 = "Command__Shape",
    cst_Concat = "Concat",
    cst_Exec = "Exec",
    cst_Grammar = "Grammar",
    cst_Group = "Group",
    cst_Lazy = "Lazy",
    cst_Many = "Many",
    cst_Maybe = "Maybe",
    cst_One = "One",
    cst_Usage = "Usage",
    cst_V1$0 = "V1",
    cst_V2$0 = "V2",
    cst_V3$0 = "V3",
    cst_Zero = "Zero",
    cst_build_info = "[-build-info]",
    cst_help = "[-help]",
    cst_version = "[-version]",
    cst_a$1 = "a",
    cst_ad_hoc = "ad_hoc",
    cst_aliases$1 = "aliases",
    cst_anons$1 = "anons",
    cst_base = "base",
    cst_basic = "basic",
    cst_bug_in_command_ml$1 = "bug in command.ml",
    cst_child_subcommand$1 = "child_subcommand",
    cst_command$0 = "command",
    cst_command_src_shape_ml$0 = "command/src/shape.ml",
    cst_concat = "concat",
    cst_doc$1 = "doc",
    cst_exec = "exec",
    cst_flags$2 = "flags",
    cst_grammar = "grammar",
    cst_group = "group",
    cst_help$0 = "help",
    cst_lazy = "lazy",
    cst_many = "many",
    cst_maybe = "maybe",
    cst_name$1 = "name",
    cst_one = "one",
    cst_path_to_exe$3 = "path_to_exe",
    cst_readme$9 = "readme",
    cst_subcommands$2 = "subcommands",
    cst_summary$9 = "summary",
    cst_usage$0 = "usage",
    cst_v1 = "v1",
    cst_v2 = "v2",
    cst_v3 = "v3",
    cst_version$0 = "version",
    cst_working_dir$2 = "working_dir",
    cst_zero = "zero",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$5,
    cst$3 = cst$5,
    cst$2 = cst$7,
    cst$1 = cst$8,
    flag_name$0 = cst_name$1,
    cst$0 = "/",
    cst = cst$7,
    error_source_022 = "command/src/shape.ml.Stable.Anons.Grammar.V1.t",
    error_source_067 = "command/src/shape.ml.Stable.Anons.V2.t",
    error_source_088 = "command/src/shape.ml.Stable.Flag_info.V1.t",
    error_source_104 = "command/src/shape.ml.Stable.Base_info.V2.t",
    error_source_118 = "command/src/shape.ml.Stable.Base_info.V1.t",
    error_source_145 = "command/src/shape.ml.Stable.Group_info.V2.t",
    error_source_178 = "command/src/shape.ml.Stable.Group_info.V1.t",
    error_source_206 = "command/src/shape.ml.Stable.Exec_info.V3.t",
    error_source_222 = "command/src/shape.ml.Stable.Exec_info.V2.t",
    error_source_236 = "command/src/shape.ml.Stable.Exec_info.V1.t",
    error_source_261 = "command/src/shape.ml.Stable.Fully_forced.V1.t",
    error_source_290 = "command/src/shape.ml.Stable.Sexpable.V3.t",
    error_source_322 = "command/src/shape.ml.Stable.Sexpable.V2.t",
    error_source_347 = "command/src/shape.ml.Stable.Sexpable.V1.t",
    error_source_372 = "command/src/shape.ml.Stable.Sexpable.Versioned.t",
    error_source_411 = "command/src/shape.ml.Anons.Grammar.t",
    error_source_456 = "command/src/shape.ml.Anons.t",
    enumerate_474 = [0, 0, [0, 1, 0]],
    enumerate_475 = [0, 0, [0, 1, 0]],
    maybe_missing_prefix = "[",
    maybe_missing_suffix = "]",
    maybe_more_suffix = " ...",
    error_source_499 = "command/src/shape.ml.Flag_info.t",
    indentation = "  ",
    spacing_dot = ". ",
    error_source_517 = "command/src/shape.ml.Base_info.t",
    error_source_546 = "command/src/shape.ml.Group_info.t",
    error_source_574 = "command/src/shape.ml.Exec_info.t",
    error_source_603 = "command/src/shape.ml.Fully_forced.t",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Set = global_data.Base__Set,
    Base_Lazy = global_data.Base__Lazy,
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base = global_data.Base,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_String = global_data.Base__String,
    Base_Error = global_data.Base__Error,
    Base_Result = global_data.Base__Result,
    Base_Or_error = global_data.Base__Or_error,
    Base_Char = global_data.Base__Char,
    Command_Import = global_data.Command__Import,
    Assert_failure = global_data.Assert_failure,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Option = global_data.Base__Option,
    Stdlib_List = global_data.Stdlib__List,
    Stable_witness = global_data.Stable_witness,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Filename_base = global_data.Filename_base;
   global_data.Bin_prot__Read;
   global_data.Bin_prot__Common;
   global_data.Bin_prot__Write;
   var
    Stdlib = global_data.Stdlib,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Base_Fn = global_data.Base__Fn,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Command_Env_var = global_data.Command__Env_var,
    Base_Int = global_data.Base__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Shape$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_command_src_shape_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_command$0, "shape.ml");
   var
    t_of_sexp = Sexplib0_Sexp_conv[40],
    sexp_of_t = Sexplib0_Sexp_conv[16],
    compare = Base_Lazy[1],
    _aW_ = [0, cst_Base],
    _aX_ = [0, cst_Group],
    _aY_ = [0, cst_Exec],
    _aZ_ = [0, cst_Lazy],
    _aV_ = [0, 0, 0],
    _aS_ = [0, cst_Basic],
    _aT_ = [0, cst_Group],
    _aU_ = [0, cst_Exec],
    _aN_ = [0, cst_child_subcommand$1],
    _aO_ = [0, cst_path_to_exe$3],
    _aP_ = [0, cst_working_dir$2],
    _aQ_ = [0, cst_readme$9],
    _aR_ = [0, cst_summary$9],
    cst_child_subcommand$0 = cst_child_subcommand$1,
    cst_path_to_exe$2 = cst_path_to_exe$3,
    cst_working_dir$1 = cst_working_dir$2,
    cst_readme$8 = cst_readme$9,
    cst_summary$8 = cst_summary$9,
    cst_Subcommands_must_not_begin = "Subcommands must not begin with '-'",
    _aK_ = [0, cst_subcommands$2],
    _aL_ = [0, cst_readme$9],
    _aM_ = [0, cst_summary$9],
    cst_subcommands$1 = cst_subcommands$2,
    cst_readme$7 = cst_readme$9,
    cst_summary$7 = cst_summary$9,
    cst_Flags_must_begin_with = "Flags must begin with '-'",
    _aG_ = [0, cst_flags$2],
    _aH_ = [0, cst_anons$1],
    _aI_ = [0, cst_readme$9],
    _aJ_ = [0, cst_summary$9],
    cst_flags$1 = cst_flags$2,
    cst_anons$0 = cst_anons$1,
    cst_readme$6 = cst_readme$9,
    cst_summary$6 = cst_summary$9,
    _aB_ = [0, cst$6],
    cst_Key_type_s_is_an_ambiguous =
      "%{Key_type} %s is an ambiguous prefix: %s",
    _aC_ = [12, 32, [2, 0, [11, " is an ambiguous prefix: ", [2, 0, 0]]]],
    _aD_ = [0, 0],
    cst_unknown_Key_type_s = "unknown %{Key_type} %s",
    _aE_ = [12, 32, [2, 0, 0]],
    _aF_ = [0, 0],
    cst_unknown = "unknown ",
    cst_flag = "flag",
    cst_subcommand = "subcommand",
    _aA_ = [0, cst$6],
    _ax_ = [0, [0, "\n", 0], 0],
    cst_Unable_to_parse = "Unable to parse",
    _au_ = [0, cst_aliases$1],
    _av_ = [0, cst_doc$1],
    _aw_ = [0, cst_name$1],
    cst_aliases$0 = cst_aliases$1,
    cst_doc$0 = cst_doc$1,
    cst_name$0 = cst_name$1,
    _a2_ = [0, cst_command_src_shape_ml$0, 414, 6],
    _a1_ = [0, cst_command_src_shape_ml$0, 415, 6],
    _as_ = [0, "at_most_once"],
    _at_ = [0, "at_least_once"],
    _aq_ = [0, cst_Usage],
    _ar_ = [0, cst_Grammar],
    _ak_ = [0, cst_Zero],
    _al_ = [0, cst_One],
    _am_ = [0, cst_Many],
    _an_ = [0, cst_Maybe],
    _ao_ = [0, cst_Concat],
    _ap_ = [0, cst_Ad_hoc],
    cst_unsupported_version_to_use = "unsupported version_to_use",
    _aj_ = [0, [0, cst_command_src_shape_ml$0, 336, 8993, 9011]],
    _ag_ = [0, cst_V1$0],
    _ah_ = [0, cst_V2$0],
    _ai_ = [0, cst_V3$0],
    _ad_ = [0, cst_Base],
    _ae_ = [0, cst_Group],
    _af_ = [0, cst_Exec],
    _aa_ = [0, cst_Base],
    _ab_ = [0, cst_Group],
    _ac_ = [0, cst_Exec],
    _Y_ = [0, cst_Base],
    _Z_ = [0, cst_Group],
    ___ = [0, cst_Exec],
    _$_ = [0, cst_Lazy],
    _V_ = [0, cst_Basic],
    _W_ = [0, cst_Group],
    _X_ = [0, cst_Exec],
    _S_ = [0, cst_path_to_exe$3],
    _T_ = [0, cst_readme$9],
    _U_ = [0, cst_summary$9],
    cst_path_to_exe$1 = cst_path_to_exe$3,
    cst_readme$5 = cst_readme$9,
    cst_summary$5 = cst_summary$9,
    _O_ = [0, cst_path_to_exe$3],
    _P_ = [0, cst_working_dir$2],
    _Q_ = [0, cst_readme$9],
    _R_ = [0, cst_summary$9],
    cst_path_to_exe$0 = cst_path_to_exe$3,
    cst_working_dir$0 = cst_working_dir$2,
    cst_readme$4 = cst_readme$9,
    cst_summary$4 = cst_summary$9,
    _J_ = [0, cst_child_subcommand$1],
    _K_ = [0, cst_path_to_exe$3],
    _L_ = [0, cst_working_dir$2],
    _M_ = [0, cst_readme$9],
    _N_ = [0, cst_summary$9],
    cst_child_subcommand = cst_child_subcommand$1,
    cst_path_to_exe = cst_path_to_exe$3,
    cst_working_dir = cst_working_dir$2,
    cst_readme$3 = cst_readme$9,
    cst_summary$3 = cst_summary$9,
    _G_ = [0, cst_subcommands$2],
    _H_ = [0, cst_readme$9],
    _I_ = [0, cst_summary$9],
    cst_subcommands$0 = cst_subcommands$2,
    cst_readme$2 = cst_readme$9,
    cst_summary$2 = cst_summary$9,
    _D_ = [0, cst_subcommands$2],
    _E_ = [0, cst_readme$9],
    _F_ = [0, cst_summary$9],
    cst_subcommands = cst_subcommands$2,
    cst_readme$1 = cst_readme$9,
    cst_summary$1 = cst_summary$9,
    _u_ = [0, cst_flags$2],
    _v_ = [0, cst_usage$0],
    _w_ = [0, cst_readme$9],
    _x_ = [0, cst_summary$9],
    cst_flags$0 = cst_flags$2,
    cst_usage = cst_usage$0,
    cst_readme$0 = cst_readme$9,
    cst_summary$0 = cst_summary$9,
    _q_ = [0, cst_flags$2],
    _r_ = [0, cst_anons$1],
    _s_ = [0, cst_readme$9],
    _t_ = [0, cst_summary$9],
    cst_flags = cst_flags$2,
    cst_anons = cst_anons$1,
    cst_readme = cst_readme$9,
    cst_summary = cst_summary$9,
    _n_ = [0, cst_aliases$1],
    _o_ = [0, cst_doc$1],
    _p_ = [0, cst_name$1],
    cst_aliases = cst_aliases$1,
    cst_doc = cst_doc$1,
    cst_name = cst_name$1,
    _l_ = [0, cst_Usage],
    _m_ = [0, cst_Grammar],
    cst_Many_Zero_should_be_just_Z = "Many Zero should be just Zero",
    cst_Maybe_Zero_should_be_just_ = "Maybe Zero should be just Zero",
    cst_Flatten_zero_and_one_eleme = "Flatten zero and one-element Concat",
    _g_ = [0, cst_command_src_shape_ml$0, 25, 586, 621],
    _i_ = [0, [11, "[(", [2, 0, [11, ") ...]", 0]]], "[(%s) ...]"],
    cst_bug_in_command_ml = cst_bug_in_command_ml$1,
    _h_ = [0, [12, 91, [2, 0, [11, " ...]", 0]]], "[%s ...]"],
    cst_bug_in_command_ml$0 = cst_bug_in_command_ml$1,
    _j_ = [0, [12, 91, [2, 0, [12, 93, 0]]], "[%s]"],
    _k_ = [0, cst$8],
    _a_ = [0, cst_Zero],
    _b_ = [0, cst_One],
    _c_ = [0, cst_Many],
    _d_ = [0, cst_Maybe],
    _e_ = [0, cst_Concat],
    _f_ = [0, cst_Ad_hoc],
    _y_ =
      [0,
       [0,
        "Dummy_type_because_we_cannot_digest_type_constructors_only_concrete_types",
        0],
       0],
    cst_a = cst_a$1,
    cst_command_src_shape_ml_125_4 = "command/src/shape.ml:125:4",
    cst_a$0 = cst_a$1,
    cst_V1 = cst_V1$0,
    cst_V2 = cst_V2$0,
    cst_V3 = cst_V3$0,
    _a3_ =
      [0,
       [0,
        [0,
         '\n      (((at_least_once false) (at_most_once false)) "[name] ...")\n      (((at_least_once true) (at_most_once false)) "name ...")\n      (((at_least_once false) (at_most_once true)) [name])\n      (((at_least_once true) (at_most_once true)) name)\n      ',
         [0, cst$7]],
        [0, 11098, 11104, 11359]]],
    _a4_ = [0, 11085, 11089, 11360],
    _a7_ = [0, "to_help_string"],
    _a__ = [0, 10743, 10745, 11360],
    _a$_ = [0, 11351, 11360, 11360],
    _ba_ = [0, 10743, 10745, 11360],
    cst_command_src_shape_ml = cst_command_src_shape_ml$0,
    cst_command = cst_command$0,
    cst_Command_Shape = cst_Command_Shape$0;
   function compare$0(a_006, b_007){
    var a_006$0 = a_006, b_007$0 = b_007;
    for(;;){
     if(a_006$0 === b_007$0) return 0;
     if(typeof a_006$0 === "number")
      return typeof b_007$0 === "number" ? 0 : -1;
     a:
     {
      b:
      {
       c:
       {
        switch(a_006$0[0]){
          case 0:
           var a_008 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           if(0 !== b_007$0[0]) return -1;
           var b_009 = b_007$0[1];
           return caml_call2(Ppx_compare_lib[5][8], a_008, b_009);
          case 1:
           var a_010 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              var b_011 = b_007$0[1], a_006$0 = a_010, b_007$0 = b_011;
              continue;
             default: return -1;
           }
          case 2:
           var a_012 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2:
              var b_013 = b_007$0[1], a_006$0 = a_012, b_007$0 = b_013;
              continue;
             default: return -1;
           }
          case 3:
           var a_014 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              var
               b_015 = b_007$0[1],
               _fv_ = function(a_016, b_017){return compare$0(a_016, b_017);};
              return caml_call3(Ppx_compare_lib[5][12], _fv_, a_014, b_015);
             default: return -1;
           }
           break;
          default:
           var a_018 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              return 1;
             default:
              var b_019 = b_007$0[1];
              return caml_call2(Ppx_compare_lib[5][8], a_018, b_019);
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var t_of_sexp$0 = function _fu_(_ft_){return _fu_.fun(_ft_);};
   caml_update_dummy
    (t_of_sexp$0,
     function(sexp_024){
      a:
      {
       if(0 === sexp_024[0]){
        var _fo_ = sexp_024[1], _fp_ = caml_string_compare(_fo_, cst_ad_hoc);
        b:
        {
         c:
         {
          d:
          {
           e:
           {
            f:
            {
             if(0 <= _fp_){
              if(0 < _fp_){
               if(! caml_string_notequal(_fo_, cst_concat)) break f;
               if(! caml_string_notequal(_fo_, cst_many)) break e;
               if(! caml_string_notequal(_fo_, cst_maybe)) break d;
               if(! caml_string_notequal(_fo_, cst_one)) break c;
               if(caml_string_notequal(_fo_, cst_zero)) break a;
               break b;
              }
             }
             else if(caml_string_notequal(_fo_, cst_Ad_hoc)){
              if(! caml_string_notequal(_fo_, cst_Concat)) break f;
              if(! caml_string_notequal(_fo_, cst_Many)) break e;
              if(! caml_string_notequal(_fo_, cst_Maybe)) break d;
              if(! caml_string_notequal(_fo_, cst_One)) break c;
              if(caml_string_notequal(_fo_, cst_Zero)) break a;
              break b;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
        }
        return 0;
       }
       var _fq_ = sexp_024[1];
       if(! _fq_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_022, sexp_024);
       var _fr_ = _fq_[1];
       if(0 !== _fr_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_022, sexp_024);
       var tag_025 = _fr_[1], _fs_ = caml_string_compare(tag_025, cst_ad_hoc);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _fs_){
             if(0 < _fs_){
              if(! caml_string_notequal(tag_025, cst_concat)) break f;
              if(! caml_string_notequal(tag_025, cst_many)) break e;
              if(! caml_string_notequal(tag_025, cst_maybe)) break d;
              if(! caml_string_notequal(tag_025, cst_one)) break c;
              if(caml_string_notequal(tag_025, cst_zero)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(tag_025, cst_Ad_hoc)){
             if(! caml_string_notequal(tag_025, cst_Concat)) break f;
             if(! caml_string_notequal(tag_025, cst_Many)) break e;
             if(! caml_string_notequal(tag_025, cst_Maybe)) break d;
             if(! caml_string_notequal(tag_025, cst_One)) break c;
             if(caml_string_notequal(tag_025, cst_Zero)) break a;
             break b;
            }
            var sexp_args_046 = _fq_[2];
            if(sexp_args_046 && ! sexp_args_046[2]){
             var
              arg0_047 = sexp_args_046[1],
              res0_048 = caml_call1(Sexplib0_Sexp_conv[31], arg0_047);
             return [4, res0_048];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_022,
                     tag_025,
                     sexp_024);
           }
           var sexp_args_041 = _fq_[2];
           if(sexp_args_041 && ! sexp_args_041[2]){
            var
             arg0_042 = sexp_args_041[1],
             res0_043 =
               caml_call2(Sexplib0_Sexp_conv[44], t_of_sexp$0, arg0_042);
            return [3, res0_043];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_022,
                    tag_025,
                    sexp_024);
          }
          var sexp_args_031 = _fq_[2];
          if(sexp_args_031 && ! sexp_args_031[2]){
           var
            arg0_032 = sexp_args_031[1],
            res0_033 = caml_call1(t_of_sexp$0, arg0_032);
           return [1, res0_033];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_022,
                   tag_025,
                   sexp_024);
         }
         var sexp_args_036 = _fq_[2];
         if(sexp_args_036 && ! sexp_args_036[2]){
          var
           arg0_037 = sexp_args_036[1],
           res0_038 = caml_call1(t_of_sexp$0, arg0_037);
          return [2, res0_038];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_022,
                  tag_025,
                  sexp_024);
        }
        var sexp_args_026 = _fq_[2];
        if(sexp_args_026 && ! sexp_args_026[2]){
         var
          arg0_027 = sexp_args_026[1],
          res0_028 = caml_call1(Sexplib0_Sexp_conv[31], arg0_027);
         return [0, res0_028];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_022,
                 tag_025,
                 sexp_024);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_022, sexp_024);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_022, sexp_024);
     });
   function sexp_of_t$0(param){
    if(typeof param === "number") return _a_;
    switch(param[0]){
      case 0:
       var
        arg0_049 = param[1],
        res0_050 = caml_call1(Sexplib0_Sexp_conv[7], arg0_049);
       return [1, [0, _b_, [0, res0_050, 0]]];
      case 1:
       var arg0_051 = param[1], res0_052 = sexp_of_t$0(arg0_051);
       return [1, [0, _c_, [0, res0_052, 0]]];
      case 2:
       var arg0_053 = param[1], res0_054 = sexp_of_t$0(arg0_053);
       return [1, [0, _d_, [0, res0_054, 0]]];
      case 3:
       var
        arg0_055 = param[1],
        res0_056 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$0, arg0_055);
       return [1, [0, _e_, [0, res0_056, 0]]];
      default:
       var
        arg0_057 = param[1],
        res0_058 = caml_call1(Sexplib0_Sexp_conv[7], arg0_057);
       return [1, [0, _f_, [0, res0_058, 0]]];
    }
   }
   var
    stable_witness_checks_for_t = function _fn_(_fm_){return _fn_.fun(_fm_);},
    stable_witness = Stable_witness[6];
   caml_update_dummy(stable_witness_checks_for_t, function(param){return 0;});
   function invariant(t){
    function _fl_(param){
     if(typeof t === "number") return 0;
     switch(t[0]){
       case 0:
        return 0;
       case 1:
        var t$0 = t[1];
        return typeof t$0 === "number"
                ? caml_call1(Stdlib[2], cst_Many_Zero_should_be_just_Z)
                : invariant(t$0);
       case 2:
        var t$1 = t[1];
        return typeof t$1 === "number"
                ? caml_call1(Stdlib[2], cst_Maybe_Zero_should_be_just_)
                : invariant(t$1);
       case 3:
        var ts = t[1];
        if(ts && ts[2]) return caml_call2(Base_List[19], ts, invariant);
        return caml_call1(Stdlib[2], cst_Flatten_zero_and_one_eleme);
       default: return 0;
     }
    }
    return caml_call4(Base_Invariant[1], _g_, t, sexp_of_t$0, _fl_);
   }
   function t_of_sexp$1(sexp){
    var t = caml_call1(t_of_sexp$0, sexp);
    invariant(t);
    return t;
   }
   function usage(param){
    if(typeof param === "number") return cst;
    switch(param[0]){
      case 0:
       var usage$0 = param[1]; return usage$0;
      case 1:
       var t = param[1];
       if(typeof t === "number")
        return caml_call1(Stdlib[2], cst_bug_in_command_ml);
       if(0 === t[0]){
        var _fh_ = usage(t);
        return caml_call2(Command_Import[7], _h_, _fh_);
       }
       var _fi_ = usage(t);
       return caml_call2(Command_Import[7], _i_, _fi_);
      case 2:
       var t$0 = param[1];
       if(typeof t$0 === "number")
        return caml_call1(Stdlib[2], cst_bug_in_command_ml$0);
       var _fj_ = usage(t$0);
       return caml_call2(Command_Import[7], _j_, _fj_);
      case 3:
       var ts = param[1], _fk_ = caml_call2(Base_List[53], ts, usage);
       return caml_call2(Base_String[68], _k_, _fk_);
      default: var usage$1 = param[1]; return usage$1;
    }
   }
   function compare$1(a_059, b_060){
    if(a_059 === b_060) return 0;
    if(0 === a_059[0]){
     var a_061 = a_059[1];
     if(0 !== b_060[0]) return -1;
     var b_062 = b_060[1];
     return caml_call2(Ppx_compare_lib[5][8], a_061, b_062);
    }
    var a_063 = a_059[1];
    if(0 === b_060[0]) return 1;
    var b_064 = b_060[1];
    return compare$0(a_063, b_064);
   }
   function t_of_sexp$2(sexp_069){
    a:
    {
     if(0 === sexp_069[0]){
      var _fe_ = sexp_069[1];
      b:
      if(caml_string_notequal(_fe_, cst_Grammar)){
       if(caml_string_notequal(_fe_, cst_Usage)){
        if(! caml_string_notequal(_fe_, cst_grammar)) break b;
        if(caml_string_notequal(_fe_, cst_usage$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_067, sexp_069);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_067, sexp_069);
     }
     var _ff_ = sexp_069[1];
     if(! _ff_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_067, sexp_069);
     var _fg_ = _ff_[1];
     if(0 !== _fg_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_067, sexp_069);
     var tag_070 = _fg_[1];
     b:
     if(caml_string_notequal(tag_070, cst_Grammar)){
      if(caml_string_notequal(tag_070, cst_Usage)){
       if(! caml_string_notequal(tag_070, cst_grammar)) break b;
       if(caml_string_notequal(tag_070, cst_usage$0)) break a;
      }
      var sexp_args_071 = _ff_[2];
      if(sexp_args_071 && ! sexp_args_071[2]){
       var
        arg0_072 = sexp_args_071[1],
        res0_073 = caml_call1(Sexplib0_Sexp_conv[31], arg0_072);
       return [0, res0_073];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_067,
               tag_070,
               sexp_069);
     }
     var sexp_args_076 = _ff_[2];
     if(sexp_args_076 && ! sexp_args_076[2]){
      var arg0_077 = sexp_args_076[1], res0_078 = t_of_sexp$1(arg0_077);
      return [1, res0_078];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_067,
              tag_070,
              sexp_069);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_067, sexp_069);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var
      arg0_079 = param[1],
      res0_080 = caml_call1(Sexplib0_Sexp_conv[7], arg0_079);
     return [1, [0, _l_, [0, res0_080, 0]]];
    }
    var arg0_081 = param[1], res0_082 = sexp_of_t$0(arg0_081);
    return [1, [0, _m_, [0, res0_082, 0]]];
   }
   var stable_witness$0 = Stable_witness[6];
   function compare$2(a_083, b_084){
    if(a_083 === b_084) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_083[1], b_084[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Ppx_compare_lib[5][8], a_083[2], b_084[2]);
    if(0 !== n$0) return n$0;
    var _fb_ = b_084[3], _fc_ = a_083[3];
    function _fd_(a_085, b_086){
     return caml_call2(Ppx_compare_lib[5][8], a_085, b_086);
    }
    return caml_call3(Ppx_compare_lib[5][12], _fd_, _fc_, _fb_);
   }
   function t_of_sexp$3(x_089){
    function _e8_(param){
     var
      _fa_ = param[2],
      aliases = _fa_[2][1],
      doc = _fa_[1],
      name = param[1];
     return [0, name, doc, aliases];
    }
    var _e9_ = 0;
    function _e__(param){
     return caml_string_notequal(param, cst_aliases$1)
             ? caml_string_notequal
                (param, cst_doc$1)
               ? caml_string_notequal(param, cst_name$1) ? -1 : 0
               : 1
             : 2;
    }
    var
     _e$_ =
       [0,
        cst_aliases,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_088,
             [0,
              cst_name,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_doc, 1, Sexplib0_Sexp_conv[31], _e$_]],
             _e__,
             _e9_,
             _e8_,
             x_089);
   }
   function sexp_of_t$2(param){
    var
     aliases_095 = param[3],
     doc_093 = param[2],
     name_091 = param[1],
     arg_096 =
       caml_call2(Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], aliases_095),
     bnds_090 = [0, [1, [0, _n_, [0, arg_096, 0]]], 0],
     arg_094 = caml_call1(Sexplib0_Sexp_conv[7], doc_093),
     bnds_090$0 = [0, [1, [0, _o_, [0, arg_094, 0]]], bnds_090],
     arg_092 = caml_call1(Sexplib0_Sexp_conv[7], name_091),
     bnds_090$1 = [0, [1, [0, _p_, [0, arg_092, 0]]], bnds_090$0];
    return [1, bnds_090$1];
   }
   var stable_witness$1 = Stable_witness[6];
   function compare$3(a_097, b_098){
    if(a_097 === b_098) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_097[1], b_098[1]);
    if(0 !== n) return n;
    var _e2_ = b_098[2], _e3_ = a_097[2];
    function _e4_(a_099, b_100){
     return caml_call2(Ppx_compare_lib[5][8], a_099, b_100);
    }
    var n$0 = caml_call3(Ppx_compare_lib[5][13], _e4_, _e3_, _e2_);
    if(0 !== n$0) return n$0;
    var n$1 = compare$1(a_097[3], b_098[3]);
    if(0 !== n$1) return n$1;
    var _e5_ = b_098[4], _e6_ = a_097[4];
    function _e7_(a_101, b_102){return compare$2(a_101, b_102);}
    return caml_call3(Ppx_compare_lib[5][12], _e7_, _e6_, _e5_);
   }
   function t_of_sexp$4(x_105){
    function _eW_(param){
     var
      _e0_ = param[2],
      _e1_ = _e0_[2],
      flags = _e1_[2][1],
      anons = _e1_[1],
      readme = _e0_[1],
      summary = param[1];
     return [0, summary, readme, anons, flags];
    }
    var _eX_ = 0;
    function _eY_(param){
     return caml_string_notequal(param, cst_anons$1)
             ? caml_string_notequal
                (param, cst_flags$2)
               ? caml_string_notequal
                  (param, cst_readme$9)
                 ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
                 : 1
               : 3
             : 2;
    }
    var
     _eZ_ =
       [0,
        cst_anons,
        1,
        t_of_sexp$2,
        [0, cst_flags, 1, caml_call1(Sexplib0_Sexp_conv[44], t_of_sexp$3), 0]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_104,
             [0,
              cst_summary,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme, 5, Sexplib0_Sexp_conv[31], _eZ_]],
             _eY_,
             _eX_,
             _eW_,
             x_105);
   }
   function sexp_of_t$3(param){
    var
     flags_115 = param[4],
     anons_113 = param[3],
     readme_109 = param[2],
     summary_107 = param[1],
     arg_116 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$2, flags_115),
     bnds_106 = [0, [1, [0, _q_, [0, arg_116, 0]]], 0],
     arg_114 = sexp_of_t$1(anons_113),
     bnds_106$0 = [0, [1, [0, _r_, [0, arg_114, 0]]], bnds_106];
    if(readme_109)
     var
      v_110 = readme_109[1],
      arg_112 = caml_call1(Sexplib0_Sexp_conv[7], v_110),
      bnd_111 = [1, [0, _s_, [0, arg_112, 0]]],
      bnds_106$1 = [0, bnd_111, bnds_106$0];
    else
     var bnds_106$1 = bnds_106$0;
    var
     arg_108 = caml_call1(Sexplib0_Sexp_conv[7], summary_107),
     bnds_106$2 = [0, [1, [0, _t_, [0, arg_108, 0]]], bnds_106$1];
    return [1, bnds_106$2];
   }
   var stable_witness$2 = Stable_witness[6];
   function t_of_sexp$5(x_119){
    function _eQ_(param){
     var
      _eU_ = param[2],
      _eV_ = _eU_[2],
      flags = _eV_[2][1],
      usage = _eV_[1],
      readme = _eU_[1],
      summary = param[1];
     return [0, summary, readme, usage, flags];
    }
    var _eR_ = 0;
    function _eS_(param){
     return caml_string_notequal(param, cst_flags$2)
             ? caml_string_notequal
                (param, cst_readme$9)
               ? caml_string_notequal
                  (param, cst_summary$9)
                 ? caml_string_notequal(param, cst_usage$0) ? -1 : 2
                 : 0
               : 1
             : 3;
    }
    var
     _eT_ =
       [0, cst_flags$0, 1, caml_call1(Sexplib0_Sexp_conv[44], t_of_sexp$3), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_118,
             [0,
              cst_summary$0,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$0,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_usage, 1, Sexplib0_Sexp_conv[31], _eT_]]],
             _eS_,
             _eR_,
             _eQ_,
             x_119);
   }
   function sexp_of_t$4(param){
    var
     flags_129 = param[4],
     usage_127 = param[3],
     readme_123 = param[2],
     summary_121 = param[1],
     arg_130 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$2, flags_129),
     bnds_120 = [0, [1, [0, _u_, [0, arg_130, 0]]], 0],
     arg_128 = caml_call1(Sexplib0_Sexp_conv[7], usage_127),
     bnds_120$0 = [0, [1, [0, _v_, [0, arg_128, 0]]], bnds_120];
    if(readme_123)
     var
      v_124 = readme_123[1],
      arg_126 = caml_call1(Sexplib0_Sexp_conv[7], v_124),
      bnd_125 = [1, [0, _w_, [0, arg_126, 0]]],
      bnds_120$1 = [0, bnd_125, bnds_120$0];
    else
     var bnds_120$1 = bnds_120$0;
    var
     arg_122 = caml_call1(Sexplib0_Sexp_conv[7], summary_121),
     bnds_120$2 = [0, [1, [0, _x_, [0, arg_122, 0]]], bnds_120$1];
    return [1, bnds_120$2];
   }
   var stable_witness$3 = Stable_witness[6];
   function to_latest(param){
    var
     flags = param[4],
     usage = param[3],
     readme = param[2],
     summary = param[1];
    return [0, summary, readme, [0, usage], flags];
   }
   function of_latest(param){
    var
     flags = param[4],
     anons = param[3],
     readme = param[2],
     summary = param[1];
    if(0 === anons[0])
     var usage$0 = anons[1], usage$1 = usage$0;
    else
     var grammar = anons[1], usage$1 = usage(grammar);
    return [0, summary, readme, usage$1, flags];
   }
   var
    _z_ = caml_call1(Bin_prot_Shape[5], _y_),
    _A_ = [0, [0, caml_call1(Bin_shape[2][1], cst_a), 0, _z_], 0],
    _B_ = caml_call1(Bin_shape[4][1], cst_command_src_shape_ml_125_4),
    group = caml_call2(Bin_prot_Shape[2], _B_, _A_),
    _C_ = caml_call1(Bin_shape[2][1], cst_a$0);
   caml_call1(caml_call2(Bin_prot_Shape[10], group, _C_), 0);
   function compare$4(cmp_a, a_131, b_132){
    if(a_131 === b_132) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_131[1], b_132[1]);
    if(0 !== n) return n;
    var _eK_ = b_132[2], _eL_ = a_131[2];
    function _eM_(a_133, b_134){
     return caml_call2(Ppx_compare_lib[5][8], a_133, b_134);
    }
    var n$0 = caml_call3(Ppx_compare_lib[5][13], _eM_, _eL_, _eK_);
    if(0 !== n$0) return n$0;
    var _eN_ = b_132[3], _eO_ = a_131[3];
    return caml_call3
            (compare,
             function(a_135, b_136){
              function _eP_(a_137, b_138){
               var
                t_140 = a_137[2],
                t_139 = a_137[1],
                t_142 = b_138[2],
                t_141 = b_138[1],
                n = caml_call2(Ppx_compare_lib[5][8], t_139, t_141);
               return 0 === n ? caml_call2(cmp_a, t_140, t_142) : n;
              }
              return caml_call3(Ppx_compare_lib[5][12], _eP_, a_135, b_136);
             },
             _eO_,
             _eN_);
   }
   function t_of_sexp$6(of_a_143, x_151){
    function _eB_(param){
     var
      _eJ_ = param[2],
      subcommands = _eJ_[2][1],
      readme = _eJ_[1],
      summary = param[1];
     return [0, summary, readme, subcommands];
    }
    var _eC_ = 0;
    function _eD_(param){
     return caml_string_notequal(param, cst_readme$9)
             ? caml_string_notequal
                (param, cst_subcommands$2)
               ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
               : 2
             : 1;
    }
    var _eE_ = 0;
    function _eF_(sexp_150){
     if(1 === sexp_150[0]){
      var _eH_ = sexp_150[1];
      if(_eH_){
       var _eI_ = _eH_[2];
       if(_eI_ && ! _eI_[2]){
        var
         arg1_147 = _eI_[1],
         arg0_146 = _eH_[1],
         res0_148 = caml_call1(Sexplib0_Sexp_conv[31], arg0_146),
         res1_149 = caml_call1(of_a_143, arg1_147);
        return [0, res0_148, res1_149];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_145, 2, sexp_150);
    }
    var
     _eG_ =
       [0,
        cst_subcommands,
        1,
        caml_call1(t_of_sexp, caml_call1(Sexplib0_Sexp_conv[44], _eF_)),
        _eE_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_145,
             [0,
              cst_summary$1,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme$1, 5, Sexplib0_Sexp_conv[31], _eG_]],
             _eD_,
             _eC_,
             _eB_,
             x_151);
   }
   function sexp_of_t$5(of_a_152, param){
    var
     subcommands_160 = param[3],
     readme_156 = param[2],
     summary_154 = param[1],
     bnds_153 = 0;
    function _eA_(param){
     var
      arg1_163 = param[2],
      arg0_162 = param[1],
      res0_164 = caml_call1(Sexplib0_Sexp_conv[7], arg0_162),
      res1_165 = caml_call1(of_a_152, arg1_163);
     return [1, [0, res0_164, [0, res1_165, 0]]];
    }
    var
     arg_161 =
       caml_call2
        (sexp_of_t, caml_call1(Sexplib0_Sexp_conv[20], _eA_), subcommands_160),
     bnds_153$0 = [0, [1, [0, _D_, [0, arg_161, 0]]], bnds_153];
    if(readme_156)
     var
      v_157 = readme_156[1],
      arg_159 = caml_call1(Sexplib0_Sexp_conv[7], v_157),
      bnd_158 = [1, [0, _E_, [0, arg_159, 0]]],
      bnds_153$1 = [0, bnd_158, bnds_153$0];
    else
     var bnds_153$1 = bnds_153$0;
    var
     arg_155 = caml_call1(Sexplib0_Sexp_conv[7], summary_154),
     bnds_153$2 = [0, [1, [0, _F_, [0, arg_155, 0]]], bnds_153$1];
    return [1, bnds_153$2];
   }
   function stable_witness$4(a_stable_witness){return Stable_witness[6];}
   function map(t, f){
    var _ew_ = Base_List[137][9];
    function _ex_(_ez_){return caml_call2(_ew_, _ez_, f);}
    var _ey_ = caml_call2(Base_Lazy[15], t[3], _ex_);
    return [0, t[1], t[2], _ey_];
   }
   function t_of_sexp$7(of_a_176, x_184){
    function _en_(param){
     var
      _ev_ = param[2],
      subcommands = _ev_[2][1],
      readme = _ev_[1],
      summary = param[1];
     return [0, summary, readme, subcommands];
    }
    var _eo_ = 0;
    function _ep_(param){
     return caml_string_notequal(param, cst_readme$9)
             ? caml_string_notequal
                (param, cst_subcommands$2)
               ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
               : 2
             : 1;
    }
    var _eq_ = 0;
    function _er_(sexp_183){
     if(1 === sexp_183[0]){
      var _et_ = sexp_183[1];
      if(_et_){
       var _eu_ = _et_[2];
       if(_eu_ && ! _eu_[2]){
        var
         arg1_180 = _eu_[1],
         arg0_179 = _et_[1],
         res0_181 = caml_call1(Sexplib0_Sexp_conv[31], arg0_179),
         res1_182 = caml_call1(of_a_176, arg1_180);
        return [0, res0_181, res1_182];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_178, 2, sexp_183);
    }
    var
     _es_ =
       [0,
        cst_subcommands$0,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], _er_),
        _eq_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_178,
             [0,
              cst_summary$2,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme$2, 5, Sexplib0_Sexp_conv[31], _es_]],
             _ep_,
             _eo_,
             _en_,
             x_184);
   }
   function sexp_of_t$6(of_a_185, param){
    var
     subcommands_193 = param[3],
     readme_189 = param[2],
     summary_187 = param[1],
     bnds_186 = 0;
    function _em_(param){
     var
      arg1_196 = param[2],
      arg0_195 = param[1],
      res0_197 = caml_call1(Sexplib0_Sexp_conv[7], arg0_195),
      res1_198 = caml_call1(of_a_185, arg1_196);
     return [1, [0, res0_197, [0, res1_198, 0]]];
    }
    var
     arg_194 = caml_call2(Sexplib0_Sexp_conv[20], _em_, subcommands_193),
     bnds_186$0 = [0, [1, [0, _G_, [0, arg_194, 0]]], bnds_186];
    if(readme_189)
     var
      v_190 = readme_189[1],
      arg_192 = caml_call1(Sexplib0_Sexp_conv[7], v_190),
      bnd_191 = [1, [0, _H_, [0, arg_192, 0]]],
      bnds_186$1 = [0, bnd_191, bnds_186$0];
    else
     var bnds_186$1 = bnds_186$0;
    var
     arg_188 = caml_call1(Sexplib0_Sexp_conv[7], summary_187),
     bnds_186$2 = [0, [1, [0, _I_, [0, arg_188, 0]]], bnds_186$1];
    return [1, bnds_186$2];
   }
   function map$0(t, f){
    var _el_ = caml_call2(Base_List[137][9], t[3], f);
    return [0, t[1], t[2], _el_];
   }
   function to_latest$0(param){
    var subcommands = param[3], readme = param[2], summary = param[1];
    return [0, summary, readme, caml_call1(Base_Lazy[24], subcommands)];
   }
   function of_latest$0(param){
    var
     subcommands = param[3],
     readme = param[2],
     summary = param[1],
     _ej_ = caml_obj_tag(subcommands);
    a:
    if(250 === _ej_)
     var _ek_ = subcommands[1];
    else{
     if(246 !== _ej_ && 244 !== _ej_){var _ek_ = subcommands; break a;}
     var _ek_ = caml_call1(CamlinternalLazy[2], subcommands);
    }
    return [0, summary, readme, _ek_];
   }
   function abs_path(dir, path){
    return caml_call1(Filename_base[30], path)
            ? path
            : caml_call2(Filename_base[28], dir, path);
   }
   function compare$5(a_199, b_200){
    if(a_199 === b_200) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_199[1], b_200[1]);
    if(0 !== n) return n;
    var _ed_ = b_200[2], _ee_ = a_199[2];
    function _ef_(a_201, b_202){
     return caml_call2(Ppx_compare_lib[5][8], a_201, b_202);
    }
    var n$0 = caml_call3(Ppx_compare_lib[5][13], _ef_, _ee_, _ed_);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Ppx_compare_lib[5][8], a_199[3], b_200[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Ppx_compare_lib[5][8], a_199[4], b_200[4]);
    if(0 !== n$2) return n$2;
    var _eg_ = b_200[5], _eh_ = a_199[5];
    function _ei_(a_203, b_204){
     return caml_call2(Ppx_compare_lib[5][8], a_203, b_204);
    }
    return caml_call3(Ppx_compare_lib[5][12], _ei_, _eh_, _eg_);
   }
   function t_of_sexp$8(x_207){
    function _d8_(param){
     var
      _ea_ = param[2],
      _eb_ = _ea_[2],
      _ec_ = _eb_[2],
      child_subcommand = _ec_[2][1],
      path_to_exe = _ec_[1],
      working_dir = _eb_[1],
      readme = _ea_[1],
      summary = param[1];
     return [0, summary, readme, working_dir, path_to_exe, child_subcommand];
    }
    var _d9_ = 0;
    function _d__(param){
     return caml_string_notequal(param, cst_child_subcommand$1)
             ? caml_string_notequal
                (param, cst_path_to_exe$3)
               ? caml_string_notequal
                  (param, cst_readme$9)
                 ? caml_string_notequal
                    (param, cst_summary$9)
                   ? caml_string_notequal(param, cst_working_dir$2) ? -1 : 2
                   : 0
                 : 1
               : 3
             : 4;
    }
    var
     _d$_ =
       [0,
        cst_child_subcommand,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_206,
             [0,
              cst_summary$3,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$3,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_path_to_exe, 1, Sexplib0_Sexp_conv[31], _d$_]]]],
             _d__,
             _d9_,
             _d8_,
             x_207);
   }
   function sexp_of_t$7(param){
    var
     child_subcommand_219 = param[5],
     path_to_exe_217 = param[4],
     working_dir_215 = param[3],
     readme_211 = param[2],
     summary_209 = param[1],
     arg_220 =
       caml_call2
        (Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], child_subcommand_219),
     bnds_208 = [0, [1, [0, _J_, [0, arg_220, 0]]], 0],
     arg_218 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_217),
     bnds_208$0 = [0, [1, [0, _K_, [0, arg_218, 0]]], bnds_208],
     arg_216 = caml_call1(Sexplib0_Sexp_conv[7], working_dir_215),
     bnds_208$1 = [0, [1, [0, _L_, [0, arg_216, 0]]], bnds_208$0];
    if(readme_211)
     var
      v_212 = readme_211[1],
      arg_214 = caml_call1(Sexplib0_Sexp_conv[7], v_212),
      bnd_213 = [1, [0, _M_, [0, arg_214, 0]]],
      bnds_208$2 = [0, bnd_213, bnds_208$1];
    else
     var bnds_208$2 = bnds_208$1;
    var
     arg_210 = caml_call1(Sexplib0_Sexp_conv[7], summary_209),
     bnds_208$3 = [0, [1, [0, _N_, [0, arg_210, 0]]], bnds_208$2];
    return [1, bnds_208$3];
   }
   var stable_witness$5 = Stable_witness[6];
   function to_latest$1(_d7_){return _d7_;}
   function of_latest$1(_d6_){return _d6_;}
   function t_of_sexp$9(x_223){
    function _d1_(param){
     var
      _d4_ = param[2],
      _d5_ = _d4_[2],
      path_to_exe = _d5_[2][1],
      working_dir = _d5_[1],
      readme = _d4_[1],
      summary = param[1];
     return [0, summary, readme, working_dir, path_to_exe];
    }
    var _d2_ = 0;
    function _d3_(param){
     return caml_string_notequal(param, cst_path_to_exe$3)
             ? caml_string_notequal
                (param, cst_readme$9)
               ? caml_string_notequal
                  (param, cst_summary$9)
                 ? caml_string_notequal(param, cst_working_dir$2) ? -1 : 2
                 : 0
               : 1
             : 3;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_222,
             [0,
              cst_summary$4,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$4,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir$0,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_path_to_exe$0, 1, Sexplib0_Sexp_conv[31], 0]]]],
             _d3_,
             _d2_,
             _d1_,
             x_223);
   }
   function sexp_of_t$8(param){
    var
     path_to_exe_233 = param[4],
     working_dir_231 = param[3],
     readme_227 = param[2],
     summary_225 = param[1],
     arg_234 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_233),
     bnds_224 = [0, [1, [0, _O_, [0, arg_234, 0]]], 0],
     arg_232 = caml_call1(Sexplib0_Sexp_conv[7], working_dir_231),
     bnds_224$0 = [0, [1, [0, _P_, [0, arg_232, 0]]], bnds_224];
    if(readme_227)
     var
      v_228 = readme_227[1],
      arg_230 = caml_call1(Sexplib0_Sexp_conv[7], v_228),
      bnd_229 = [1, [0, _Q_, [0, arg_230, 0]]],
      bnds_224$1 = [0, bnd_229, bnds_224$0];
    else
     var bnds_224$1 = bnds_224$0;
    var
     arg_226 = caml_call1(Sexplib0_Sexp_conv[7], summary_225),
     bnds_224$2 = [0, [1, [0, _R_, [0, arg_226, 0]]], bnds_224$1];
    return [1, bnds_224$2];
   }
   var stable_witness$6 = Stable_witness[6];
   function to_v3(t){return [0, t[1], t[2], t[3], t[4], 0];}
   function of_v3(t){
    var _d0_ = abs_path(t[3], t[4]);
    return [0, t[1], t[2], t[3], _d0_];
   }
   var
    to_latest$2 = caml_call2(Base_Fn[5], to_latest$1, to_v3),
    of_latest$2 = caml_call2(Base_Fn[5], of_v3, of_latest$1);
   function t_of_sexp$10(x_237){
    function _dW_(param){
     var
      _dZ_ = param[2],
      path_to_exe = _dZ_[2][1],
      readme = _dZ_[1],
      summary = param[1];
     return [0, summary, readme, path_to_exe];
    }
    var _dX_ = 0;
    function _dY_(param){
     return caml_string_notequal(param, cst_path_to_exe$3)
             ? caml_string_notequal
                (param, cst_readme$9)
               ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
               : 1
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_236,
             [0,
              cst_summary$5,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$5,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_path_to_exe$1, 1, Sexplib0_Sexp_conv[31], 0]]],
             _dY_,
             _dX_,
             _dW_,
             x_237);
   }
   function sexp_of_t$9(param){
    var
     path_to_exe_245 = param[3],
     readme_241 = param[2],
     summary_239 = param[1],
     arg_246 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_245),
     bnds_238 = [0, [1, [0, _S_, [0, arg_246, 0]]], 0];
    if(readme_241)
     var
      v_242 = readme_241[1],
      arg_244 = caml_call1(Sexplib0_Sexp_conv[7], v_242),
      bnd_243 = [1, [0, _T_, [0, arg_244, 0]]],
      bnds_238$0 = [0, bnd_243, bnds_238];
    else
     var bnds_238$0 = bnds_238;
    var
     arg_240 = caml_call1(Sexplib0_Sexp_conv[7], summary_239),
     bnds_238$1 = [0, [1, [0, _U_, [0, arg_240, 0]]], bnds_238$0];
    return [1, bnds_238$1];
   }
   var stable_witness$7 = Stable_witness[6];
   function to_v2(t){return [0, t[1], t[2], cst$0, t[3]];}
   function of_v2(t){
    var _dV_ = abs_path(t[3], t[4]);
    return [0, t[1], t[2], _dV_];
   }
   var
    to_latest$3 = caml_call2(Base_Fn[5], to_latest$2, to_v2),
    of_latest$3 = caml_call2(Base_Fn[5], of_v2, of_latest$2);
   function compare$6(a_247, b_248){
    var a_247$0 = a_247, b_248$0 = b_248;
    for(;;){
     if(a_247$0 === b_248$0) return 0;
     switch(a_247$0[0]){
       case 0:
        var a_249 = a_247$0[1];
        if(0 !== b_248$0[0]) return -1;
        var b_250 = b_248$0[1];
        return compare$3(a_249, b_250);
       case 1:
        var a_251 = a_247$0[1];
        switch(b_248$0[0]){
          case 0: break;
          case 1:
           var b_252 = b_248$0[1];
           return compare$4
                   (function(a_253, b_254){return compare$6(a_253, b_254);},
                    a_251,
                    b_252);
          default: return -1;
        }
        break;
       default:
        var a_257 = a_247$0[2], a_255 = a_247$0[1];
        switch(b_248$0[0]){
          case 0: break;
          case 1:
           return 1;
          default:
           var
            b_258 = b_248$0[2],
            b_256 = b_248$0[1],
            n = compare$5(a_255, b_256);
           if(0 !== n) return n;
           var a_247$0 = a_257, b_248$0 = b_258;
           continue;
        }
     }
     return 1;
    }
   }
   var t_of_sexp$11 = function _dU_(_dT_){return _dU_.fun(_dT_);};
   caml_update_dummy
    (t_of_sexp$11,
     function(sexp_263){
      a:
      {
       if(0 === sexp_263[0]){
        var _dP_ = sexp_263[1];
        b:
        if(caml_string_notequal(_dP_, cst_Basic)){
         c:
         if(caml_string_notequal(_dP_, cst_Exec)){
          if(caml_string_notequal(_dP_, cst_Group)){
           if(! caml_string_notequal(_dP_, cst_basic)) break b;
           if(! caml_string_notequal(_dP_, cst_exec)) break c;
           if(caml_string_notequal(_dP_, cst_group)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_261, sexp_263);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_261, sexp_263);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_261, sexp_263);
       }
       var _dQ_ = sexp_263[1];
       if(! _dQ_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_261, sexp_263);
       var _dR_ = _dQ_[1];
       if(0 !== _dR_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_261, sexp_263);
       var tag_264 = _dR_[1];
       b:
       if(caml_string_notequal(tag_264, cst_Basic)){
        c:
        if(caml_string_notequal(tag_264, cst_Exec)){
         if(caml_string_notequal(tag_264, cst_Group)){
          if(! caml_string_notequal(tag_264, cst_basic)) break b;
          if(! caml_string_notequal(tag_264, cst_exec)) break c;
          if(caml_string_notequal(tag_264, cst_group)) break a;
         }
         var sexp_args_270 = _dQ_[2];
         if(sexp_args_270 && ! sexp_args_270[2]){
          var
           arg0_271 = sexp_args_270[1],
           res0_272 = t_of_sexp$6(t_of_sexp$11, arg0_271);
          return [1, res0_272];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_261,
                  tag_264,
                  sexp_263);
        }
        var sexp_args_275 = _dQ_[2];
        if(sexp_args_275){
         var _dS_ = sexp_args_275[2];
         if(_dS_ && ! _dS_[2]){
          var
           arg1_277 = _dS_[1],
           arg0_276 = sexp_args_275[1],
           res0_278 = t_of_sexp$8(arg0_276),
           res1_279 = caml_call1(t_of_sexp$11, arg1_277);
          return [2, res0_278, res1_279];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_261,
                 tag_264,
                 sexp_263);
       }
       var sexp_args_265 = _dQ_[2];
       if(sexp_args_265 && ! sexp_args_265[2]){
        var arg0_266 = sexp_args_265[1], res0_267 = t_of_sexp$4(arg0_266);
        return [0, res0_267];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_261,
                tag_264,
                sexp_263);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_261, sexp_263);
     });
   function sexp_of_t$10(param){
    switch(param[0]){
      case 0:
       var arg0_280 = param[1], res0_281 = sexp_of_t$3(arg0_280);
       return [1, [0, _V_, [0, res0_281, 0]]];
      case 1:
       var
        arg0_282 = param[1],
        res0_283 = sexp_of_t$5(sexp_of_t$10, arg0_282);
       return [1, [0, _W_, [0, res0_283, 0]]];
      default:
       var
        arg1_285 = param[2],
        arg0_284 = param[1],
        res0_286 = sexp_of_t$7(arg0_284),
        res1_287 = sexp_of_t$10(arg1_285);
       return [1, [0, _X_, [0, res0_286, [0, res1_287, 0]]]];
    }
   }
   var
    stable_witness_checks_for_t$0 =
      function _dO_(_dN_){return _dO_.fun(_dN_);},
    stable_witness$8 = Stable_witness[6];
   caml_update_dummy
    (stable_witness_checks_for_t$0, function(param){return 0;});
   var t_of_sexp$12 = function _dM_(_dL_){return _dM_.fun(_dL_);};
   caml_update_dummy
    (t_of_sexp$12,
     function(sexp_292){
      a:
      {
       if(0 === sexp_292[0]){
        var _dI_ = sexp_292[1];
        b:
        if(caml_string_notequal(_dI_, cst_Base)){
         c:
         if(caml_string_notequal(_dI_, cst_Exec)){
          d:
          if(caml_string_notequal(_dI_, cst_Group)){
           if(caml_string_notequal(_dI_, cst_Lazy)){
            if(! caml_string_notequal(_dI_, cst_base)) break b;
            if(! caml_string_notequal(_dI_, cst_exec)) break c;
            if(! caml_string_notequal(_dI_, cst_group)) break d;
            if(caml_string_notequal(_dI_, cst_lazy)) break a;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_290, sexp_292);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_290, sexp_292);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_290, sexp_292);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_290, sexp_292);
       }
       var _dJ_ = sexp_292[1];
       if(! _dJ_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_290, sexp_292);
       var _dK_ = _dJ_[1];
       if(0 !== _dK_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_290, sexp_292);
       var tag_293 = _dK_[1];
       b:
       if(caml_string_notequal(tag_293, cst_Base)){
        c:
        if(caml_string_notequal(tag_293, cst_Exec)){
         d:
         if(caml_string_notequal(tag_293, cst_Group)){
          if(caml_string_notequal(tag_293, cst_Lazy)){
           if(! caml_string_notequal(tag_293, cst_base)) break b;
           if(! caml_string_notequal(tag_293, cst_exec)) break c;
           if(! caml_string_notequal(tag_293, cst_group)) break d;
           if(caml_string_notequal(tag_293, cst_lazy)) break a;
          }
          var sexp_args_309 = _dJ_[2];
          if(sexp_args_309 && ! sexp_args_309[2]){
           var
            arg0_310 = sexp_args_309[1],
            res0_311 = caml_call2(t_of_sexp, t_of_sexp$12, arg0_310);
           return [3, res0_311];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_290,
                   tag_293,
                   sexp_292);
         }
         var sexp_args_299 = _dJ_[2];
         if(sexp_args_299 && ! sexp_args_299[2]){
          var
           arg0_300 = sexp_args_299[1],
           res0_301 = t_of_sexp$6(t_of_sexp$12, arg0_300);
          return [1, res0_301];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_290,
                  tag_293,
                  sexp_292);
        }
        var sexp_args_304 = _dJ_[2];
        if(sexp_args_304 && ! sexp_args_304[2]){
         var arg0_305 = sexp_args_304[1], res0_306 = t_of_sexp$8(arg0_305);
         return [2, res0_306];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_290,
                 tag_293,
                 sexp_292);
       }
       var sexp_args_294 = _dJ_[2];
       if(sexp_args_294 && ! sexp_args_294[2]){
        var arg0_295 = sexp_args_294[1], res0_296 = t_of_sexp$4(arg0_295);
        return [0, res0_296];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_290,
                tag_293,
                sexp_292);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_290, sexp_292);
     });
   function sexp_of_t$11(param){
    switch(param[0]){
      case 0:
       var arg0_312 = param[1], res0_313 = sexp_of_t$3(arg0_312);
       return [1, [0, _Y_, [0, res0_313, 0]]];
      case 1:
       var
        arg0_314 = param[1],
        res0_315 = sexp_of_t$5(sexp_of_t$11, arg0_314);
       return [1, [0, _Z_, [0, res0_315, 0]]];
      case 2:
       var arg0_316 = param[1], res0_317 = sexp_of_t$7(arg0_316);
       return [1, [0, ___, [0, res0_317, 0]]];
      default:
       var
        arg0_318 = param[1],
        res0_319 = caml_call2(sexp_of_t, sexp_of_t$11, arg0_318);
       return [1, [0, _$_, [0, res0_319, 0]]];
    }
   }
   var
    stable_witness_checks_for_t$1 =
      function _dH_(_dG_){return _dH_.fun(_dG_);};
   caml_update_dummy
    (stable_witness_checks_for_t$1, function(param){return 0;});
   var t_of_sexp$13 = function _dF_(_dE_){return _dF_.fun(_dE_);};
   caml_update_dummy
    (t_of_sexp$13,
     function(sexp_324){
      a:
      {
       if(0 === sexp_324[0]){
        var _dB_ = sexp_324[1];
        b:
        if(caml_string_notequal(_dB_, cst_Base)){
         c:
         if(caml_string_notequal(_dB_, cst_Exec)){
          if(caml_string_notequal(_dB_, cst_Group)){
           if(! caml_string_notequal(_dB_, cst_base)) break b;
           if(! caml_string_notequal(_dB_, cst_exec)) break c;
           if(caml_string_notequal(_dB_, cst_group)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_322, sexp_324);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_322, sexp_324);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_322, sexp_324);
       }
       var _dC_ = sexp_324[1];
       if(! _dC_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_322, sexp_324);
       var _dD_ = _dC_[1];
       if(0 !== _dD_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_322, sexp_324);
       var tag_325 = _dD_[1];
       b:
       if(caml_string_notequal(tag_325, cst_Base)){
        c:
        if(caml_string_notequal(tag_325, cst_Exec)){
         if(caml_string_notequal(tag_325, cst_Group)){
          if(! caml_string_notequal(tag_325, cst_base)) break b;
          if(! caml_string_notequal(tag_325, cst_exec)) break c;
          if(caml_string_notequal(tag_325, cst_group)) break a;
         }
         var sexp_args_331 = _dC_[2];
         if(sexp_args_331 && ! sexp_args_331[2]){
          var
           arg0_332 = sexp_args_331[1],
           res0_333 = t_of_sexp$7(t_of_sexp$13, arg0_332);
          return [1, res0_333];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_322,
                  tag_325,
                  sexp_324);
        }
        var sexp_args_336 = _dC_[2];
        if(sexp_args_336 && ! sexp_args_336[2]){
         var arg0_337 = sexp_args_336[1], res0_338 = t_of_sexp$9(arg0_337);
         return [2, res0_338];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_322,
                 tag_325,
                 sexp_324);
       }
       var sexp_args_326 = _dC_[2];
       if(sexp_args_326 && ! sexp_args_326[2]){
        var arg0_327 = sexp_args_326[1], res0_328 = t_of_sexp$4(arg0_327);
        return [0, res0_328];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_322,
                tag_325,
                sexp_324);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_322, sexp_324);
     });
   function sexp_of_t$12(param){
    switch(param[0]){
      case 0:
       var arg0_339 = param[1], res0_340 = sexp_of_t$3(arg0_339);
       return [1, [0, _aa_, [0, res0_340, 0]]];
      case 1:
       var
        arg0_341 = param[1],
        res0_342 = sexp_of_t$6(sexp_of_t$12, arg0_341);
       return [1, [0, _ab_, [0, res0_342, 0]]];
      default:
       var arg0_343 = param[1], res0_344 = sexp_of_t$8(arg0_343);
       return [1, [0, _ac_, [0, res0_344, 0]]];
    }
   }
   var
    stable_witness_checks_for_t$2 =
      function _dA_(_dz_){return _dA_.fun(_dz_);};
   caml_update_dummy
    (stable_witness_checks_for_t$2, function(param){return 0;});
   function to_latest$4(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, b];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$4))];
      default: var e = param[1]; return [2, caml_call1(to_latest$2, e)];
    }
   }
   function of_latest$4(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, b];
       case 1:
        var g = param$0[1]; return [1, map$0(of_latest$0(g), of_latest$4)];
       case 2:
        var e = param$0[1]; return [2, caml_call1(of_latest$2, e)];
       default:
        var thunk = param$0[1], _dy_ = caml_obj_tag(thunk);
        a:
        if(250 === _dy_)
         var param$1 = thunk[1];
        else{
         if(246 !== _dy_ && 244 !== _dy_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
     }
   }
   var t_of_sexp$14 = function _dx_(_dw_){return _dx_.fun(_dw_);};
   caml_update_dummy
    (t_of_sexp$14,
     function(sexp_349){
      a:
      {
       if(0 === sexp_349[0]){
        var _dt_ = sexp_349[1];
        b:
        if(caml_string_notequal(_dt_, cst_Base)){
         c:
         if(caml_string_notequal(_dt_, cst_Exec)){
          if(caml_string_notequal(_dt_, cst_Group)){
           if(! caml_string_notequal(_dt_, cst_base)) break b;
           if(! caml_string_notequal(_dt_, cst_exec)) break c;
           if(caml_string_notequal(_dt_, cst_group)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_347, sexp_349);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_347, sexp_349);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_347, sexp_349);
       }
       var _du_ = sexp_349[1];
       if(! _du_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_347, sexp_349);
       var _dv_ = _du_[1];
       if(0 !== _dv_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_347, sexp_349);
       var tag_350 = _dv_[1];
       b:
       if(caml_string_notequal(tag_350, cst_Base)){
        c:
        if(caml_string_notequal(tag_350, cst_Exec)){
         if(caml_string_notequal(tag_350, cst_Group)){
          if(! caml_string_notequal(tag_350, cst_base)) break b;
          if(! caml_string_notequal(tag_350, cst_exec)) break c;
          if(caml_string_notequal(tag_350, cst_group)) break a;
         }
         var sexp_args_356 = _du_[2];
         if(sexp_args_356 && ! sexp_args_356[2]){
          var
           arg0_357 = sexp_args_356[1],
           res0_358 = t_of_sexp$7(t_of_sexp$14, arg0_357);
          return [1, res0_358];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_347,
                  tag_350,
                  sexp_349);
        }
        var sexp_args_361 = _du_[2];
        if(sexp_args_361 && ! sexp_args_361[2]){
         var arg0_362 = sexp_args_361[1], res0_363 = t_of_sexp$10(arg0_362);
         return [2, res0_363];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_347,
                 tag_350,
                 sexp_349);
       }
       var sexp_args_351 = _du_[2];
       if(sexp_args_351 && ! sexp_args_351[2]){
        var arg0_352 = sexp_args_351[1], res0_353 = t_of_sexp$5(arg0_352);
        return [0, res0_353];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_347,
                tag_350,
                sexp_349);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_347, sexp_349);
     });
   function sexp_of_t$13(param){
    switch(param[0]){
      case 0:
       var arg0_364 = param[1], res0_365 = sexp_of_t$4(arg0_364);
       return [1, [0, _ad_, [0, res0_365, 0]]];
      case 1:
       var
        arg0_366 = param[1],
        res0_367 = sexp_of_t$6(sexp_of_t$13, arg0_366);
       return [1, [0, _ae_, [0, res0_367, 0]]];
      default:
       var arg0_368 = param[1], res0_369 = sexp_of_t$9(arg0_368);
       return [1, [0, _af_, [0, res0_369, 0]]];
    }
   }
   var
    stable_witness_checks_for_t$3 =
      function _ds_(_dr_){return _ds_.fun(_dr_);};
   caml_update_dummy
    (stable_witness_checks_for_t$3, function(param){return 0;});
   function to_latest$5(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, to_latest(b)];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$5))];
      default: var e = param[1]; return [2, caml_call1(to_latest$3, e)];
    }
   }
   function of_latest$5(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, of_latest(b)];
       case 1:
        var g = param$0[1]; return [1, map$0(of_latest$0(g), of_latest$5)];
       case 2:
        var e = param$0[1]; return [2, caml_call1(of_latest$3, e)];
       default:
        var thunk = param$0[1], _dq_ = caml_obj_tag(thunk);
        a:
        if(250 === _dq_)
         var param$1 = thunk[1];
        else{
         if(246 !== _dq_ && 244 !== _dq_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
     }
   }
   function t_of_sexp$15(sexp_374){
    a:
    {
     if(0 === sexp_374[0]){
      var _dn_ = sexp_374[1];
      b:
      if(caml_string_notequal(_dn_, cst_V1$0)){
       c:
       if(caml_string_notequal(_dn_, cst_V2$0)){
        if(caml_string_notequal(_dn_, cst_V3$0)){
         if(! caml_string_notequal(_dn_, cst_v1)) break b;
         if(! caml_string_notequal(_dn_, cst_v2)) break c;
         if(caml_string_notequal(_dn_, cst_v3)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_372, sexp_374);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_372, sexp_374);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_372, sexp_374);
     }
     var _do_ = sexp_374[1];
     if(! _do_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_372, sexp_374);
     var _dp_ = _do_[1];
     if(0 !== _dp_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_372, sexp_374);
     var tag_375 = _dp_[1];
     b:
     if(caml_string_notequal(tag_375, cst_V1$0)){
      c:
      if(caml_string_notequal(tag_375, cst_V2$0)){
       if(caml_string_notequal(tag_375, cst_V3$0)){
        if(! caml_string_notequal(tag_375, cst_v1)) break b;
        if(! caml_string_notequal(tag_375, cst_v2)) break c;
        if(caml_string_notequal(tag_375, cst_v3)) break a;
       }
       var sexp_args_386 = _do_[2];
       if(sexp_args_386 && ! sexp_args_386[2]){
        var
         arg0_387 = sexp_args_386[1],
         res0_388 = caml_call1(t_of_sexp$12, arg0_387);
        return [2, res0_388];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_372,
                tag_375,
                sexp_374);
      }
      var sexp_args_381 = _do_[2];
      if(sexp_args_381 && ! sexp_args_381[2]){
       var
        arg0_382 = sexp_args_381[1],
        res0_383 = caml_call1(t_of_sexp$13, arg0_382);
       return [1, res0_383];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_372,
               tag_375,
               sexp_374);
     }
     var sexp_args_376 = _do_[2];
     if(sexp_args_376 && ! sexp_args_376[2]){
      var
       arg0_377 = sexp_args_376[1],
       res0_378 = caml_call1(t_of_sexp$14, arg0_377);
      return [0, res0_378];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_372,
              tag_375,
              sexp_374);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_372, sexp_374);
   }
   function sexp_of_t$14(param){
    switch(param[0]){
      case 0:
       var arg0_389 = param[1], res0_390 = sexp_of_t$13(arg0_389);
       return [1, [0, _ag_, [0, res0_390, 0]]];
      case 1:
       var arg0_391 = param[1], res0_392 = sexp_of_t$12(arg0_391);
       return [1, [0, _ah_, [0, res0_392, 0]]];
      default:
       var arg0_393 = param[1], res0_394 = sexp_of_t$11(arg0_393);
       return [1, [0, _ai_, [0, res0_394, 0]]];
    }
   }
   function v1(v0){return [0, v0];}
   function v2(v0){return [1, v0];}
   function v3(v0){return [2, v0];}
   var
    v1$0 = [0, cst_V1, 0, v1],
    v2$0 = [0, cst_V2, 1, v2],
    v3$0 = [0, cst_V3, 2, v3];
   function of_versioned(param){
    switch(param[0]){
      case 0:
       var t = param[1]; return to_latest$5(t);
      case 1:
       var t$0 = param[1]; return to_latest$4(t$0);
      default: var t$1 = param[1]; return t$1;
    }
   }
   function compare$7(a_395, b_396){
    var a_395$0 = a_395, b_396$0 = b_396;
    for(;;){
     if(a_395$0 === b_396$0) return 0;
     if(typeof a_395$0 === "number")
      return typeof b_396$0 === "number" ? 0 : -1;
     a:
     {
      b:
      {
       c:
       {
        switch(a_395$0[0]){
          case 0:
           var a_397 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           if(0 !== b_396$0[0]) return -1;
           var b_398 = b_396$0[1];
           return caml_call2(Base[195], a_397, b_398);
          case 1:
           var a_399 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              var b_400 = b_396$0[1], a_395$0 = a_399, b_396$0 = b_400;
              continue;
             default: return -1;
           }
          case 2:
           var a_401 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2:
              var b_402 = b_396$0[1], a_395$0 = a_401, b_396$0 = b_402;
              continue;
             default: return -1;
           }
          case 3:
           var a_403 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              var
               b_404 = b_396$0[1],
               _dm_ = function(a_405, b_406){return compare$7(a_405, b_406);};
              return caml_call3(Base[159], _dm_, a_403, b_404);
             default: return -1;
           }
           break;
          default:
           var a_407 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              return 1;
             default:
              var b_408 = b_396$0[1];
              return caml_call2(Base[195], a_407, b_408);
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var t_of_sexp$16 = function _dl_(_dk_){return _dl_.fun(_dk_);};
   caml_update_dummy
    (t_of_sexp$16,
     function(sexp_413){
      a:
      {
       if(0 === sexp_413[0]){
        var _df_ = sexp_413[1], _dg_ = caml_string_compare(_df_, cst_ad_hoc);
        b:
        {
         c:
         {
          d:
          {
           e:
           {
            f:
            {
             if(0 <= _dg_){
              if(0 < _dg_){
               if(! caml_string_notequal(_df_, cst_concat)) break f;
               if(! caml_string_notequal(_df_, cst_many)) break e;
               if(! caml_string_notequal(_df_, cst_maybe)) break d;
               if(! caml_string_notequal(_df_, cst_one)) break c;
               if(caml_string_notequal(_df_, cst_zero)) break a;
               break b;
              }
             }
             else if(caml_string_notequal(_df_, cst_Ad_hoc)){
              if(! caml_string_notequal(_df_, cst_Concat)) break f;
              if(! caml_string_notequal(_df_, cst_Many)) break e;
              if(! caml_string_notequal(_df_, cst_Maybe)) break d;
              if(! caml_string_notequal(_df_, cst_One)) break c;
              if(caml_string_notequal(_df_, cst_Zero)) break a;
              break b;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_411, sexp_413);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_411, sexp_413);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_411, sexp_413);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_411, sexp_413);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_411, sexp_413);
        }
        return 0;
       }
       var _dh_ = sexp_413[1];
       if(! _dh_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_411, sexp_413);
       var _di_ = _dh_[1];
       if(0 !== _di_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_411, sexp_413);
       var tag_414 = _di_[1], _dj_ = caml_string_compare(tag_414, cst_ad_hoc);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _dj_){
             if(0 < _dj_){
              if(! caml_string_notequal(tag_414, cst_concat)) break f;
              if(! caml_string_notequal(tag_414, cst_many)) break e;
              if(! caml_string_notequal(tag_414, cst_maybe)) break d;
              if(! caml_string_notequal(tag_414, cst_one)) break c;
              if(caml_string_notequal(tag_414, cst_zero)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(tag_414, cst_Ad_hoc)){
             if(! caml_string_notequal(tag_414, cst_Concat)) break f;
             if(! caml_string_notequal(tag_414, cst_Many)) break e;
             if(! caml_string_notequal(tag_414, cst_Maybe)) break d;
             if(! caml_string_notequal(tag_414, cst_One)) break c;
             if(caml_string_notequal(tag_414, cst_Zero)) break a;
             break b;
            }
            var sexp_args_435 = _dh_[2];
            if(sexp_args_435 && ! sexp_args_435[2]){
             var
              arg0_436 = sexp_args_435[1],
              res0_437 = caml_call1(Base[201], arg0_436);
             return [4, res0_437];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_411,
                     tag_414,
                     sexp_413);
           }
           var sexp_args_430 = _dh_[2];
           if(sexp_args_430 && ! sexp_args_430[2]){
            var
             arg0_431 = sexp_args_430[1],
             res0_432 = caml_call2(Base[164], t_of_sexp$16, arg0_431);
            return [3, res0_432];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_411,
                    tag_414,
                    sexp_413);
          }
          var sexp_args_420 = _dh_[2];
          if(sexp_args_420 && ! sexp_args_420[2]){
           var
            arg0_421 = sexp_args_420[1],
            res0_422 = caml_call1(t_of_sexp$16, arg0_421);
           return [1, res0_422];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_411,
                   tag_414,
                   sexp_413);
         }
         var sexp_args_425 = _dh_[2];
         if(sexp_args_425 && ! sexp_args_425[2]){
          var
           arg0_426 = sexp_args_425[1],
           res0_427 = caml_call1(t_of_sexp$16, arg0_426);
          return [2, res0_427];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_411,
                  tag_414,
                  sexp_413);
        }
        var sexp_args_415 = _dh_[2];
        if(sexp_args_415 && ! sexp_args_415[2]){
         var
          arg0_416 = sexp_args_415[1],
          res0_417 = caml_call1(Base[201], arg0_416);
         return [0, res0_417];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_411,
                 tag_414,
                 sexp_413);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_411, sexp_413);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_411, sexp_413);
     });
   function sexp_of_t$15(param){
    if(typeof param === "number") return _ak_;
    switch(param[0]){
      case 0:
       var arg0_438 = param[1], res0_439 = caml_call1(Base[202], arg0_438);
       return [1, [0, _al_, [0, res0_439, 0]]];
      case 1:
       var arg0_440 = param[1], res0_441 = sexp_of_t$15(arg0_440);
       return [1, [0, _am_, [0, res0_441, 0]]];
      case 2:
       var arg0_442 = param[1], res0_443 = sexp_of_t$15(arg0_442);
       return [1, [0, _an_, [0, res0_443, 0]]];
      case 3:
       var
        arg0_444 = param[1],
        res0_445 = caml_call2(Base[165], sexp_of_t$15, arg0_444);
       return [1, [0, _ao_, [0, res0_445, 0]]];
      default:
       var arg0_446 = param[1], res0_447 = caml_call1(Base[202], arg0_446);
       return [1, [0, _ap_, [0, res0_447, 0]]];
    }
   }
   function compare$8(a_448, b_449){
    if(a_448 === b_449) return 0;
    if(0 === a_448[0]){
     var a_450 = a_448[1];
     if(0 !== b_449[0]) return -1;
     var b_451 = b_449[1];
     return caml_call2(Base[195], a_450, b_451);
    }
    var a_452 = a_448[1];
    if(0 === b_449[0]) return 1;
    var b_453 = b_449[1];
    return compare$7(a_452, b_453);
   }
   function t_of_sexp$17(sexp_458){
    a:
    {
     if(0 === sexp_458[0]){
      var _dc_ = sexp_458[1];
      b:
      if(caml_string_notequal(_dc_, cst_Grammar)){
       if(caml_string_notequal(_dc_, cst_Usage)){
        if(! caml_string_notequal(_dc_, cst_grammar)) break b;
        if(caml_string_notequal(_dc_, cst_usage$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_456, sexp_458);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_456, sexp_458);
     }
     var _dd_ = sexp_458[1];
     if(! _dd_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_456, sexp_458);
     var _de_ = _dd_[1];
     if(0 !== _de_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_456, sexp_458);
     var tag_459 = _de_[1];
     b:
     if(caml_string_notequal(tag_459, cst_Grammar)){
      if(caml_string_notequal(tag_459, cst_Usage)){
       if(! caml_string_notequal(tag_459, cst_grammar)) break b;
       if(caml_string_notequal(tag_459, cst_usage$0)) break a;
      }
      var sexp_args_460 = _dd_[2];
      if(sexp_args_460 && ! sexp_args_460[2]){
       var
        arg0_461 = sexp_args_460[1],
        res0_462 = caml_call1(Base[201], arg0_461);
       return [0, res0_462];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_456,
               tag_459,
               sexp_458);
     }
     var sexp_args_465 = _dd_[2];
     if(sexp_args_465 && ! sexp_args_465[2]){
      var
       arg0_466 = sexp_args_465[1],
       res0_467 = caml_call1(t_of_sexp$16, arg0_466);
      return [1, res0_467];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_456,
              tag_459,
              sexp_458);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_456, sexp_458);
   }
   function sexp_of_t$16(param){
    if(0 === param[0]){
     var arg0_468 = param[1], res0_469 = caml_call1(Base[202], arg0_468);
     return [1, [0, _aq_, [0, res0_469, 0]]];
    }
    var arg0_470 = param[1], res0_471 = sexp_of_t$15(arg0_470);
    return [1, [0, _ar_, [0, res0_471, 0]]];
   }
   function compare$9(a_472, b_473){
    if(a_472 === b_473) return 0;
    var n = caml_call2(Base[98], a_472[1], b_473[1]);
    return 0 === n ? caml_call2(Base[98], a_472[2], b_473[2]) : n;
   }
   var acc = 0, enumerate_478 = enumerate_474, enumerate_479 = enumerate_475;
   for(;;){
    if(! enumerate_479) break;
    if(enumerate_478)
     var
      enumerate_477 = enumerate_479[1],
      enumerate_480 = enumerate_478[2],
      enumerate_476 = enumerate_478[1],
      acc$0 = [0, [0, enumerate_476, enumerate_477], acc],
      acc = acc$0,
      enumerate_478 = enumerate_480;
    else
     var
      enumerate_480$0 = enumerate_479[2],
      enumerate_478 = enumerate_474,
      enumerate_479 = enumerate_480$0;
   }
   var all = caml_call1(Stdlib_List[10], acc);
   function sexp_of_t$17(param){
    var
     at_most_once_484 = param[2],
     at_least_once_482 = param[1],
     arg_485 = caml_call1(Base[105], at_most_once_484),
     bnds_481 = [0, [1, [0, _as_, [0, arg_485, 0]]], 0],
     arg_483 = caml_call1(Base[105], at_least_once_482),
     bnds_481$0 = [0, [1, [0, _at_, [0, arg_483, 0]]], bnds_481];
    return [1, bnds_481$0];
   }
   function to_help_string(t, flag_name){
    var
     at_most_once = t[2],
     at_least_once = t[1],
     description =
       at_least_once
        ? flag_name
        : caml_call2
          (Base_String[68],
           0,
           [0,
            maybe_missing_prefix,
            [0, flag_name, [0, maybe_missing_suffix, 0]]]);
    return at_most_once
            ? description
            : caml_call2
              (Base_String[68],
               0,
               [0, description, [0, maybe_more_suffix, 0]]);
   }
   function of_help_string(name){
    var match = caml_call2(Base_String[116], name, maybe_more_suffix);
    if(match)
     var name$0 = match[1], name$1 = name$0, at_most_once = 0;
    else
     var name$1 = name, at_most_once = 1;
    var _c__ = Base_String[116];
    function _c$_(_db_){return caml_call2(_c__, _db_, maybe_missing_suffix);}
    var
     _da_ = caml_call2(Base_String[117], name$1, maybe_missing_prefix),
     match$0 = caml_call2(Base_Option[22], _da_, _c$_);
    if(match$0)
     var name$2 = match$0[1], name$3 = name$2, at_least_once = 0;
    else
     var name$3 = name$1, at_least_once = 1;
    return [0, [0, at_least_once, at_most_once], name$3];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a0_ =
       function(param){
        function _c4_(x_486){
         var
          s = to_help_string(x_486, flag_name$0),
          _c6_ = [0, caml_call1(Sexplib0_Sexp_conv[7], s), 0],
          _c7_ = [1, [0, sexp_of_t$17(x_486), _c6_]];
         caml_call2(Command_Import[3], 0, _c7_);
         var
          match = of_help_string(s),
          flag_name = match[2],
          x_487 = match[1],
          _c8_ = 0 === compare$9(x_486, x_487) ? 1 : 0;
         if(! _c8_)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a2_], 1);
         var
          _c9_ = 0 === caml_call2(Base[195], flag_name$0, flag_name) ? 1 : 0;
         if(_c9_) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a1_], 1);
        }
        caml_call2(Base_List[19], all, _c4_);
        var _c5_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _c5_);
       },
     _a5_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _a4_,
         _a3_),
     _a6_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _a5_], 0],
     _a8_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _a9_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_command_src_shape_ml,
      408,
      _ba_,
      _a$_,
      _a__,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _a9_,
      _a8_,
      _a7_,
      0,
      Inline_test_config,
      _a6_,
      _a0_);
   }
   function compare$10(a_494, b_495){
    if(a_494 === b_495) return 0;
    var n = caml_call2(Base[195], a_494[1], b_495[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base[195], a_494[2], b_495[2]);
    if(0 !== n$0) return n$0;
    var _c1_ = b_495[3], _c2_ = a_494[3];
    function _c3_(a_496, b_497){return caml_call2(Base[195], a_496, b_497);}
    return caml_call3(Base[159], _c3_, _c2_, _c1_);
   }
   function aliases(r){return r[3];}
   function doc(r){return r[2];}
   function name(r){return r[1];}
   function t_of_sexp$18(x_500){
    function _cW_(param){
     var
      _c0_ = param[2],
      aliases = _c0_[2][1],
      doc = _c0_[1],
      name = param[1];
     return [0, name, doc, aliases];
    }
    var _cX_ = 0;
    function _cY_(param){
     return caml_string_notequal(param, cst_aliases$1)
             ? caml_string_notequal
                (param, cst_doc$1)
               ? caml_string_notequal(param, cst_name$1) ? -1 : 0
               : 1
             : 2;
    }
    var _cZ_ = [0, cst_aliases$0, 1, caml_call1(Base[164], Base[201]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_499,
             [0, cst_name$0, 1, Base[201], [0, cst_doc$0, 1, Base[201], _cZ_]],
             _cY_,
             _cX_,
             _cW_,
             x_500);
   }
   function sexp_of_t$18(param){
    var
     aliases_506 = param[3],
     doc_504 = param[2],
     name_502 = param[1],
     arg_507 = caml_call2(Base[165], Base[202], aliases_506),
     bnds_501 = [0, [1, [0, _au_, [0, arg_507, 0]]], 0],
     arg_505 = caml_call1(Base[202], doc_504),
     bnds_501$0 = [0, [1, [0, _av_, [0, arg_505, 0]]], bnds_501],
     arg_503 = caml_call1(Base[202], name_502),
     bnds_501$1 = [0, [1, [0, _aw_, [0, arg_503, 0]]], bnds_501$0];
    return [1, bnds_501$1];
   }
   function parse_name(t){
    var
     match = of_help_string(t[1]),
     flag_name = match[2],
     num_occurrences = match[1],
     match$0 = caml_call2(Base_String[102], flag_name, 32);
    if(match$0){
     var _cT_ = match$0[2], flag_name$0 = match$0[1];
     if(! _cT_) return [0, [0, num_occurrences, 0, flag_name$0]];
     if(! _cT_[2]) return [0, [0, num_occurrences, 1, flag_name$0]];
    }
    var
     _cU_ = [0, caml_call1(Sexplib0_Sexp_conv[7], flag_name), 0],
     _cV_ =
       [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unable_to_parse), _cU_]];
    return [1, caml_call1(Base_Error[20], _cV_)];
   }
   function flag_name(t){
    function _cR_(param){var flag_name = param[3]; return flag_name;}
    var _cS_ = parse_name(t);
    return caml_call2(Base_Or_error[47], _cS_, _cR_);
   }
   function num_occurrences(t){
    function _cP_(param){
     var num_occurrences = param[1];
     return num_occurrences;
    }
    var _cQ_ = parse_name(t);
    return caml_call2(Base_Or_error[47], _cQ_, _cP_);
   }
   function requires_arg(t){
    function _cN_(param){var requires_arg = param[2]; return requires_arg;}
    var _cO_ = parse_name(t);
    return caml_call2(Base_Or_error[47], _cO_, _cN_);
   }
   function help_screen_compare(a, b){
    return caml_string_notequal(b, cst_help)
            ? caml_string_notequal
               (a, cst_help)
              ? caml_string_notequal
                 (b, cst_version)
                ? caml_string_notequal
                   (a, cst_version)
                  ? caml_string_notequal
                     (b, cst_build_info)
                    ? caml_string_notequal
                       (a, cst_build_info)
                      ? caml_string_notequal
                         (b, cst_help$0)
                        ? caml_string_notequal
                           (a, cst_help$0)
                          ? caml_string_notequal
                             (b, cst_version$0)
                            ? caml_string_notequal(a, cst_version$0) ? 0 : 1
                            : -1
                          : 1
                        : -1
                      : 1
                    : -1
                  : 1
                : -1
              : 1
            : -1;
   }
   function sort(t){
    function _cM_(a, b){return help_screen_compare(a[1], b[1]);}
    return caml_call2(Base_List[84], t, _cM_);
   }
   function word_wrap_and_strip(text, width){
    var chunks = caml_call2(Base_String[102], text, 10);
    function _cF_(text){
     function _cG_(word){return 1 - caml_call1(Base_String[14], word);}
     var
      _cH_ = caml_call2(Base_String[102], text, 32),
      words = caml_call2(Base_List[12], _cH_, _cG_);
     function _cI_(acc, word){
      if(acc)
       var
        match = acc[1],
        line = match[2],
        lines = match[1],
        _cJ_ = caml_call2(Base[241], cst$1, word),
        line_and_word = caml_call2(Base[241], line, _cJ_),
        _cK_ =
          caml_ml_string_length(line_and_word) <= width
           ? [0, lines, line_and_word]
           : [0, [0, line, lines], word],
        _cL_ = _cK_;
      else
       var _cL_ = [0, 0, word];
      return [0, _cL_];
     }
     var match = caml_call3(Base_List[20], words, 0, _cI_);
     if(! match) return 0;
     var match$0 = match[1], line = match$0[2], lines = match$0[1];
     return caml_call1(Base_List[63], [0, line, lines]);
    }
    return caml_call2(Base_List[14], chunks, _cF_);
   }
   function spaces_string(width){
    return caml_call2(Base_String[66], width, 32);
   }
   function pad_spaces_to_suffix(x, width){
    var
     slack = width - caml_ml_string_length(x) | 0,
     _cE_ = spaces_string(slack);
    return caml_call2(Base[241], x, _cE_);
   }
   function indent_and_newline(x){
    return caml_call1(Base_List[11], [0, [0, indentation, 0], [0, x, _ax_]]);
   }
   var
    lhs_pad = spaces_string(29),
    dot_indentation_offset = 27,
    _ay_ = Base_List[53];
   function _az_(v){return indent_and_newline([0, lhs_pad, [0, v, 0]]);}
   function to_string(t){
    function _cB_(t){
     var
      flag = t[1],
      flag_name_with_aliases =
        caml_call2(Base_String[68], _aA_, [0, flag, t[3]]),
      documentation = t[2],
      flag_width = 2 + caml_ml_string_length(flag_name_with_aliases) | 0,
      flag_on_its_own_line =
        29 <= flag_width
         ? indent_and_newline([0, flag_name_with_aliases, 0])
         : indent_and_newline
           ([0,
             pad_spaces_to_suffix
              (flag_name_with_aliases, dot_indentation_offset),
             [0, spacing_dot, 0]]),
      wrapped_documentation = word_wrap_and_strip(documentation, 49);
     if(wrapped_documentation)
      var
       doc_wrapped_rest_lines = wrapped_documentation[2],
       doc_wrapped_first_line = wrapped_documentation[1],
       wrapped_doc_lines = caml_call2(_ay_, doc_wrapped_rest_lines, _az_),
       prefix_doc_wrapped_first_line_ =
         function(x){
          return indent_and_newline
                  ([0,
                    pad_spaces_to_suffix(x, dot_indentation_offset),
                    [0, spacing_dot, [0, doc_wrapped_first_line, 0]]]);
         },
       _cD_ =
         27 <= caml_ml_string_length(flag_name_with_aliases)
          ? [0,
            flag_on_its_own_line,
            [0, prefix_doc_wrapped_first_line_(cst$2), wrapped_doc_lines]]
          : [0,
            prefix_doc_wrapped_first_line_(flag_name_with_aliases),
            wrapped_doc_lines];
     else
      var _cD_ = [0, flag_on_its_own_line, 0];
     return caml_call1(Base_List[11], _cD_);
    }
    var _cC_ = caml_call2(Base_List[14], t, _cB_);
    return caml_call2(Base_String[68], 0, _cC_);
   }
   function to_string$0(param){return param ? cst_flag : cst_subcommand;}
   var Key_type = [0, to_string$0];
   function lookup_expand(alist, prefix, key_type){
    var is_dash = caml_call1(Base_Char[16], 45);
    if(caml_call2(Base_String[20], prefix, is_dash))
     var
      _ct_ =
        function(param){
         var data = param[2][1], key = param[1];
         return [0, key, [0, data, -461087063]];
        },
      alist$0 = caml_call2(Base_List[53], alist, _ct_);
    else
     var alist$0 = alist;
    function _cu_(param){
     var key = param[1];
     return -461087063 <= param[2][2]
             ? caml_call2(Base_String[47], key, prefix)
             : caml_call2(Base_String[97], key, prefix);
    }
    var matches = caml_call2(Base_List[12], alist$0, _cu_);
    if(! matches){
     var
      _cA_ =
        [0,
         [11,
          cst_unknown,
          [24,
           _aF_,
           function(param, custom_printf_508){
            return caml_call1(Key_type[1], custom_printf_508);
           },
           _aE_]],
         cst_unknown_Key_type_s];
     return [1, caml_call3(Command_Import[7], _cA_, key_type, prefix)];
    }
    if(! matches[2]){
     var _cz_ = matches[1], data$0 = _cz_[2][1], key$0 = _cz_[1];
     return [0, [0, key$0, data$0]];
    }
    function _cv_(param){
     var key = param[1];
     return caml_call2(Base_String[47], key, prefix);
    }
    var match = caml_call2(Base_List[27], matches, _cv_);
    if(match){
     var _cw_ = match[1], data = _cw_[2][1], key = _cw_[1];
     return [0, [0, key, data]];
    }
    var
     matching_keys = caml_call2(Base_List[53], matches, Base[242]),
     _cx_ = caml_call2(Base_String[68], _aB_, matching_keys),
     _cy_ =
       [0,
        [24,
         _aD_,
         function(param, custom_printf_509){
          return caml_call1(Key_type[1], custom_printf_509);
         },
         _aC_],
        cst_Key_type_s_is_an_ambiguous];
    return [1, caml_call4(Command_Import[7], _cy_, key_type, prefix, _cx_)];
   }
   function compare$11(a_510, b_511){
    if(a_510 === b_511) return 0;
    var n = caml_call2(Base[195], a_510[1], b_511[1]);
    if(0 !== n) return n;
    var _cn_ = b_511[2], _co_ = a_510[2];
    function _cp_(a_512, b_513){return caml_call2(Base[195], a_512, b_513);}
    var n$0 = caml_call3(Base[178], _cp_, _co_, _cn_);
    if(0 !== n$0) return n$0;
    var n$1 = compare$8(a_510[3], b_511[3]);
    if(0 !== n$1) return n$1;
    var _cq_ = b_511[4], _cr_ = a_510[4];
    function _cs_(a_514, b_515){return compare$10(a_514, b_515);}
    return caml_call3(Base[159], _cs_, _cr_, _cq_);
   }
   function flags(r){return r[4];}
   function anons(r){return r[3];}
   function readme(r){return r[2];}
   function summary(r){return r[1];}
   function t_of_sexp$19(x_518){
    function _ch_(param){
     var
      _cl_ = param[2],
      _cm_ = _cl_[2],
      flags = _cm_[2][1],
      anons = _cm_[1],
      readme = _cl_[1],
      summary = param[1];
     return [0, summary, readme, anons, flags];
    }
    var _ci_ = 0;
    function _cj_(param){
     return caml_string_notequal(param, cst_anons$1)
             ? caml_string_notequal
                (param, cst_flags$2)
               ? caml_string_notequal
                  (param, cst_readme$9)
                 ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
                 : 1
               : 3
             : 2;
    }
    var
     _ck_ =
       [0,
        cst_anons$0,
        1,
        t_of_sexp$17,
        [0, cst_flags$1, 1, caml_call1(Base[164], t_of_sexp$18), 0]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_517,
             [0,
              cst_summary$6,
              1,
              Base[201],
              [0, cst_readme$6, 5, Base[201], _ck_]],
             _cj_,
             _ci_,
             _ch_,
             x_518);
   }
   function sexp_of_t$19(param){
    var
     flags_528 = param[4],
     anons_526 = param[3],
     readme_522 = param[2],
     summary_520 = param[1],
     arg_529 = caml_call2(Base[165], sexp_of_t$18, flags_528),
     bnds_519 = [0, [1, [0, _aG_, [0, arg_529, 0]]], 0],
     arg_527 = sexp_of_t$16(anons_526),
     bnds_519$0 = [0, [1, [0, _aH_, [0, arg_527, 0]]], bnds_519];
    if(readme_522)
     var
      v_523 = readme_522[1],
      arg_525 = caml_call1(Base[202], v_523),
      bnd_524 = [1, [0, _aI_, [0, arg_525, 0]]],
      bnds_519$1 = [0, bnd_524, bnds_519$0];
    else
     var bnds_519$1 = bnds_519$0;
    var
     arg_521 = caml_call1(Base[202], summary_520),
     bnds_519$2 = [0, [1, [0, _aJ_, [0, arg_521, 0]]], bnds_519$1];
    return [1, bnds_519$2];
   }
   function find_flag(t, prefix){
    if(caml_call2(Base_String[97], prefix, cst$3)){
     var
      _b6_ =
        function(choices){
         var
          _cd_ = Base[243],
          _ce_ = Base_Error[14],
          _cf_ = lookup_expand(caml_call1(Base_List[11], choices), prefix, 1),
          _cg_ = caml_call2(Base_Result[34], _cf_, _ce_);
         return caml_call2(Base_Or_error[47], _cg_, _cd_);
        },
      _b7_ =
        function(flag_info){
         function _ca_(flag_name){
          function _cc_(key){return [0, key, [0, flag_info, -481604174]];}
          return [0,
                  caml_call2
                   (Base_List[53], [0, flag_name, flag_info[3]], _cc_)];
         }
         var _cb_ = flag_name(flag_info);
         return caml_call2(Base_Or_error[28][4][2], _cb_, _ca_);
        },
      _b8_ = caml_call2(Base_List[53], t[4], _b7_),
      _b9_ = caml_call1(Base_Or_error[50], _b8_);
     return caml_call2(Base_Or_error[28][4][2], _b9_, _b6_);
    }
    var
     _b__ = [0, caml_call1(Sexplib0_Sexp_conv[7], prefix), 0],
     _b$_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Flags_must_begin_with),
         _b__]];
    return [1, caml_call1(Base_Error[20], _b$_)];
   }
   function get_usage(t){
    var match = t[3];
    if(0 === match[0]){var usage$0 = match[1]; return usage$0;}
    var grammar = match[1];
    return usage(grammar);
   }
   function compare$12(cmp_a, a_532, b_533){
    if(a_532 === b_533) return 0;
    var n = caml_call2(Base[195], a_532[1], b_533[1]);
    if(0 !== n) return n;
    var _bZ_ = b_533[2], _b0_ = a_532[2];
    function _b1_(a_534, b_535){return caml_call2(Base[195], a_534, b_535);}
    var n$0 = caml_call3(Base[178], _b1_, _b0_, _bZ_);
    if(0 !== n$0) return n$0;
    var _b2_ = b_533[3], _b3_ = a_532[3];
    function _b4_(a_536, b_537){
     function _b5_(a_538, b_539){
      var
       t_541 = a_538[2],
       t_540 = a_538[1],
       t_543 = b_539[2],
       t_542 = b_539[1],
       n = caml_call2(Base[195], t_540, t_542);
      return 0 === n ? caml_call2(cmp_a, t_541, t_543) : n;
     }
     return caml_call3(Base_List[1], _b5_, a_536, b_537);
    }
    return caml_call3(Base_Lazy[1], _b4_, _b3_, _b2_);
   }
   function subcommands(r){return r[3];}
   function readme$0(r){return r[2];}
   function summary$0(r){return r[1];}
   function t_of_sexp$20(of_a_544, x_552){
    function _bP_(param){
     var
      _bY_ = param[2],
      subcommands = _bY_[2][1],
      readme = _bY_[1],
      summary = param[1];
     return [0, summary, readme, subcommands];
    }
    var _bQ_ = 0;
    function _bR_(param){
     return caml_string_notequal(param, cst_readme$9)
             ? caml_string_notequal
                (param, cst_subcommands$2)
               ? caml_string_notequal(param, cst_summary$9) ? -1 : 0
               : 2
             : 1;
    }
    var _bS_ = 0;
    function _bT_(sexp_551){
     if(1 === sexp_551[0]){
      var _bW_ = sexp_551[1];
      if(_bW_){
       var _bX_ = _bW_[2];
       if(_bX_ && ! _bX_[2]){
        var
         arg1_548 = _bX_[1],
         arg0_547 = _bW_[1],
         res0_549 = caml_call1(Base[201], arg0_547),
         res1_550 = caml_call1(of_a_544, arg1_548);
        return [0, res0_549, res1_550];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_546, 2, sexp_551);
    }
    var
     _bU_ = caml_call1(Base_List[5], _bT_),
     _bV_ = [0, cst_subcommands$1, 1, caml_call1(Base_Lazy[7], _bU_), _bS_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_546,
             [0,
              cst_summary$7,
              1,
              Base[201],
              [0, cst_readme$7, 5, Base[201], _bV_]],
             _bR_,
             _bQ_,
             _bP_,
             x_552);
   }
   function sexp_of_t$20(of_a_553, param){
    var
     subcommands_561 = param[3],
     readme_557 = param[2],
     summary_555 = param[1],
     bnds_554 = 0;
    function _bN_(param){
     var
      arg1_564 = param[2],
      arg0_563 = param[1],
      res0_565 = caml_call1(Base[202], arg0_563),
      res1_566 = caml_call1(of_a_553, arg1_564);
     return [1, [0, res0_565, [0, res1_566, 0]]];
    }
    var
     _bO_ = caml_call1(Base_List[6], _bN_),
     arg_562 = caml_call2(Base_Lazy[8], _bO_, subcommands_561),
     bnds_554$0 = [0, [1, [0, _aK_, [0, arg_562, 0]]], bnds_554];
    if(readme_557)
     var
      v_558 = readme_557[1],
      arg_560 = caml_call1(Base[202], v_558),
      bnd_559 = [1, [0, _aL_, [0, arg_560, 0]]],
      bnds_554$1 = [0, bnd_559, bnds_554$0];
    else
     var bnds_554$1 = bnds_554$0;
    var
     arg_556 = caml_call1(Base[202], summary_555),
     bnds_554$2 = [0, [1, [0, _aM_, [0, arg_556, 0]]], bnds_554$1];
    return [1, bnds_554$2];
   }
   function find_subcommand(t, prefix){
    if(caml_call2(Base_String[97], prefix, cst$4)){
     var
      _bD_ = [0, caml_call1(Sexplib0_Sexp_conv[7], prefix), 0],
      _bE_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Subcommands_must_not_begin),
          _bD_]];
     return [1, caml_call1(Base_Error[20], _bE_)];
    }
    function _bF_(param){
     var a = param[2], key = param[1];
     return [0, key, [0, a, -481604174]];
    }
    var _bG_ = t[3], _bH_ = caml_obj_tag(_bG_);
    a:
    if(250 === _bH_)
     var _bI_ = _bG_[1];
    else{
     if(246 !== _bH_ && 244 !== _bH_){var _bI_ = _bG_; break a;}
     var _bI_ = caml_call1(CamlinternalLazy[2], _bG_);
    }
    var
     choices = caml_call2(Base_List[53], _bI_, _bF_),
     _bJ_ = Base[243],
     _bK_ = Base_Error[14],
     _bL_ = lookup_expand(choices, prefix, 0),
     _bM_ = caml_call2(Base_Result[34], _bL_, _bK_);
    return caml_call2(Base_Or_error[47], _bM_, _bJ_);
   }
   function compare$13(a_567, b_568){
    if(a_567 === b_568) return 0;
    var n = caml_call2(Base[195], a_567[1], b_568[1]);
    if(0 !== n) return n;
    var _bx_ = b_568[2], _by_ = a_567[2];
    function _bz_(a_569, b_570){return caml_call2(Base[195], a_569, b_570);}
    var n$0 = caml_call3(Base[178], _bz_, _by_, _bx_);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base[195], a_567[3], b_568[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Base[195], a_567[4], b_568[4]);
    if(0 !== n$2) return n$2;
    var _bA_ = b_568[5], _bB_ = a_567[5];
    function _bC_(a_571, b_572){return caml_call2(Base[195], a_571, b_572);}
    return caml_call3(Base[159], _bC_, _bB_, _bA_);
   }
   function t_of_sexp$21(x_575){
    function _bq_(param){
     var
      _bu_ = param[2],
      _bv_ = _bu_[2],
      _bw_ = _bv_[2],
      child_subcommand = _bw_[2][1],
      path_to_exe = _bw_[1],
      working_dir = _bv_[1],
      readme = _bu_[1],
      summary = param[1];
     return [0, summary, readme, working_dir, path_to_exe, child_subcommand];
    }
    var _br_ = 0;
    function _bs_(param){
     return caml_string_notequal(param, cst_child_subcommand$1)
             ? caml_string_notequal
                (param, cst_path_to_exe$3)
               ? caml_string_notequal
                  (param, cst_readme$9)
                 ? caml_string_notequal
                    (param, cst_summary$9)
                   ? caml_string_notequal(param, cst_working_dir$2) ? -1 : 2
                   : 0
                 : 1
               : 3
             : 4;
    }
    var
     _bt_ =
       [0, cst_child_subcommand$0, 1, caml_call1(Base[164], Base[201]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_574,
             [0,
              cst_summary$8,
              1,
              Base[201],
              [0,
               cst_readme$8,
               5,
               Base[201],
               [0,
                cst_working_dir$1,
                1,
                Base[201],
                [0, cst_path_to_exe$2, 1, Base[201], _bt_]]]],
             _bs_,
             _br_,
             _bq_,
             x_575);
   }
   function sexp_of_t$21(param){
    var
     child_subcommand_587 = param[5],
     path_to_exe_585 = param[4],
     working_dir_583 = param[3],
     readme_579 = param[2],
     summary_577 = param[1],
     arg_588 = caml_call2(Base[165], Base[202], child_subcommand_587),
     bnds_576 = [0, [1, [0, _aN_, [0, arg_588, 0]]], 0],
     arg_586 = caml_call1(Base[202], path_to_exe_585),
     bnds_576$0 = [0, [1, [0, _aO_, [0, arg_586, 0]]], bnds_576],
     arg_584 = caml_call1(Base[202], working_dir_583),
     bnds_576$1 = [0, [1, [0, _aP_, [0, arg_584, 0]]], bnds_576$0];
    if(readme_579)
     var
      v_580 = readme_579[1],
      arg_582 = caml_call1(Base[202], v_580),
      bnd_581 = [1, [0, _aQ_, [0, arg_582, 0]]],
      bnds_576$2 = [0, bnd_581, bnds_576$1];
    else
     var bnds_576$2 = bnds_576$1;
    var
     arg_578 = caml_call1(Base[202], summary_577),
     bnds_576$3 = [0, [1, [0, _aR_, [0, arg_578, 0]]], bnds_576$2];
    return [1, bnds_576$3];
   }
   function compare$14(a_589, b_590){
    var a_589$0 = a_589, b_590$0 = b_590;
    for(;;){
     if(a_589$0 === b_590$0) return 0;
     switch(a_589$0[0]){
       case 0:
        var a_591 = a_589$0[1];
        if(0 !== b_590$0[0]) return -1;
        var b_592 = b_590$0[1];
        return compare$11(a_591, b_592);
       case 1:
        var a_593 = a_589$0[1];
        switch(b_590$0[0]){
          case 0: break;
          case 1:
           var b_594 = b_590$0[1];
           return compare$12
                   (function(a_595, b_596){return compare$14(a_595, b_596);},
                    a_593,
                    b_594);
          default: return -1;
        }
        break;
       default:
        var a_599 = a_589$0[2], a_597 = a_589$0[1];
        switch(b_590$0[0]){
          case 0: break;
          case 1:
           return 1;
          default:
           var
            b_600 = b_590$0[2],
            b_598 = b_590$0[1],
            n = compare$13(a_597, b_598);
           if(0 !== n) return n;
           var a_589$0 = a_599, b_590$0 = b_600;
           continue;
        }
     }
     return 1;
    }
   }
   var t_of_sexp$22 = function _bp_(_bo_){return _bp_.fun(_bo_);};
   caml_update_dummy
    (t_of_sexp$22,
     function(sexp_605){
      a:
      {
       if(0 === sexp_605[0]){
        var _bk_ = sexp_605[1];
        b:
        if(caml_string_notequal(_bk_, cst_Basic)){
         c:
         if(caml_string_notequal(_bk_, cst_Exec)){
          if(caml_string_notequal(_bk_, cst_Group)){
           if(! caml_string_notequal(_bk_, cst_basic)) break b;
           if(! caml_string_notequal(_bk_, cst_exec)) break c;
           if(caml_string_notequal(_bk_, cst_group)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_603, sexp_605);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_603, sexp_605);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_603, sexp_605);
       }
       var _bl_ = sexp_605[1];
       if(! _bl_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_603, sexp_605);
       var _bm_ = _bl_[1];
       if(0 !== _bm_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_603, sexp_605);
       var tag_606 = _bm_[1];
       b:
       if(caml_string_notequal(tag_606, cst_Basic)){
        c:
        if(caml_string_notequal(tag_606, cst_Exec)){
         if(caml_string_notequal(tag_606, cst_Group)){
          if(! caml_string_notequal(tag_606, cst_basic)) break b;
          if(! caml_string_notequal(tag_606, cst_exec)) break c;
          if(caml_string_notequal(tag_606, cst_group)) break a;
         }
         var sexp_args_612 = _bl_[2];
         if(sexp_args_612 && ! sexp_args_612[2]){
          var
           arg0_613 = sexp_args_612[1],
           res0_614 = t_of_sexp$20(t_of_sexp$22, arg0_613);
          return [1, res0_614];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_603,
                  tag_606,
                  sexp_605);
        }
        var sexp_args_617 = _bl_[2];
        if(sexp_args_617){
         var _bn_ = sexp_args_617[2];
         if(_bn_ && ! _bn_[2]){
          var
           arg1_619 = _bn_[1],
           arg0_618 = sexp_args_617[1],
           res0_620 = t_of_sexp$21(arg0_618),
           res1_621 = caml_call1(t_of_sexp$22, arg1_619);
          return [2, res0_620, res1_621];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_603,
                 tag_606,
                 sexp_605);
       }
       var sexp_args_607 = _bl_[2];
       if(sexp_args_607 && ! sexp_args_607[2]){
        var arg0_608 = sexp_args_607[1], res0_609 = t_of_sexp$19(arg0_608);
        return [0, res0_609];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_603,
                tag_606,
                sexp_605);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_603, sexp_605);
     });
   function sexp_of_t$22(param){
    switch(param[0]){
      case 0:
       var arg0_622 = param[1], res0_623 = sexp_of_t$19(arg0_622);
       return [1, [0, _aS_, [0, res0_623, 0]]];
      case 1:
       var
        arg0_624 = param[1],
        res0_625 = sexp_of_t$20(sexp_of_t$22, arg0_624);
       return [1, [0, _aT_, [0, res0_625, 0]]];
      default:
       var
        arg1_627 = param[2],
        arg0_626 = param[1],
        res0_628 = sexp_of_t$21(arg0_626),
        res1_629 = sexp_of_t$22(arg1_627);
       return [1, [0, _aU_, [0, res0_628, [0, res1_629, 0]]]];
    }
   }
   function expanded_subcommands(t){
    function expand(param){
     var param$0 = param;
     for(;;)
      switch(param$0[0]){
        case 0:
         return _aV_;
        case 1:
         var
          subcommands = param$0[1][3],
          _bf_ =
            function(param){
             var t = param[2], name = param[1];
             function _bi_(path){return [0, name, path];}
             var _bj_ = expand(t);
             return caml_call2(Base_List[53], _bj_, _bi_);
            },
          _bg_ = caml_obj_tag(subcommands);
         a:
         if(250 === _bg_)
          var _bh_ = subcommands[1];
         else{
          if(246 !== _bg_ && 244 !== _bg_){var _bh_ = subcommands; break a;}
          var _bh_ = caml_call1(CamlinternalLazy[2], subcommands);
         }
         return caml_call2(Base_List[14], _bh_, _bf_);
        default: var t = param$0[2], param$0 = t;
      }
    }
    var _be_ = expand(t);
    return caml_call1(Base_List[63], _be_);
   }
   function sexp_of_t$23(param){
    switch(param[0]){
      case 0:
       var arg0_630 = param[1], res0_631 = sexp_of_t$19(arg0_630);
       return [1, [0, _aW_, [0, res0_631, 0]]];
      case 1:
       var
        arg0_632 = param[1],
        res0_633 = sexp_of_t$20(sexp_of_t$23, arg0_632);
       return [1, [0, _aX_, [0, res0_633, 0]]];
      case 2:
       var arg0_634 = param[1], res0_635 = sexp_of_t$21(arg0_634);
       return [1, [0, _aY_, [0, res0_635, 0]]];
      default:
       var
        arg0_636 = param[1],
        res0_637 = caml_call2(Base_Lazy[8], sexp_of_t$23, arg0_636);
       return [1, [0, _aZ_, [0, res0_637, 0]]];
    }
   }
   var extraction_var = caml_call1(Command_Env_var[4], 1);
   function f(i, supported, param){
    return caml_call2(Base_Set[10], supported, i);
   }
   var
    init = caml_call1(Base_Set[5], [0, Base_Int[22]]),
    supported_versions = f(3, f(2, f(1, init, v1$0), v2$0), v3$0);
   function to_versioned(latest, version_to_use){
    var switcher = version_to_use - 1 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return [0, of_latest$5(latest)];
       case 1:
        return [1, of_latest$4(latest)];
       default: return [2, latest];
     }
    var
     _bd_ =
       caml_call5
        (Base_Error[19],
         _aj_,
         0,
         cst_unsupported_version_to_use,
         version_to_use,
         Sexplib0_Sexp_conv[10]);
    return caml_call1(Base_Error[31], _bd_);
   }
   function fully_forced(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, b];
       case 1:
        var g = param$0[1]; return [1, map(g, fully_forced)];
       case 2:
        var f = param$0[2], e = param$0[1];
        return [2, e, fully_forced(caml_call1(f, 0))];
       default:
        var thunk = param$0[1], _bc_ = caml_obj_tag(thunk);
        a:
        if(250 === _bc_)
         var param$1 = thunk[1];
        else{
         if(246 !== _bc_ && 244 !== _bc_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
     }
   }
   function get_summary(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return b[1];
       case 1:
        var g = param$0[1]; return g[1];
       case 2:
        var e = param$0[1]; return e[1];
       default:
        var thunk = param$0[1], _bb_ = caml_obj_tag(thunk);
        a:
        if(250 === _bb_)
         var param$1 = thunk[1];
        else{
         if(246 !== _bb_ && 244 !== _bb_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
     }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Shape);
   var
    Command_Shape =
      [0,
       [0,
        [0, compare$7, sexp_of_t$15, invariant, usage],
        compare$8,
        sexp_of_t$16],
       [0, compare$9, all, sexp_of_t$17, to_help_string],
       [0,
        compare$10,
        aliases,
        doc,
        name,
        sexp_of_t$18,
        flag_name,
        num_occurrences,
        requires_arg,
        t_of_sexp$18],
       [0, sort, to_string],
       [0,
        compare$11,
        flags,
        anons,
        readme,
        summary,
        sexp_of_t$19,
        find_flag,
        get_usage,
        t_of_sexp$19],
       [0,
        compare$12,
        subcommands,
        readme$0,
        summary$0,
        sexp_of_t$20,
        find_subcommand,
        map,
        t_of_sexp$20],
       [0, compare$13, sexp_of_t$21, t_of_sexp$21],
       [0, compare$14, sexp_of_t$22, expanded_subcommands, t_of_sexp$22],
       fully_forced,
       get_summary,
       [0,
        sexp_of_t$23,
        extraction_var,
        supported_versions,
        [0, t_of_sexp$15, sexp_of_t$14],
        of_versioned,
        to_versioned],
       228660148,
       [0,
        [0,
         [0, [0, compare$0, t_of_sexp$1, sexp_of_t$0, stable_witness]],
         [0, compare$1, t_of_sexp$2, sexp_of_t$1, stable_witness$0]],
        [0, [0, compare$2, t_of_sexp$3, sexp_of_t$2, stable_witness$1]],
        [0,
         [0, compare$3, t_of_sexp$4, sexp_of_t$3, stable_witness$2],
         [0, t_of_sexp$5, sexp_of_t$4, stable_witness$3, to_latest, of_latest]],
        [0, [0, compare$4, t_of_sexp$6, sexp_of_t$5, stable_witness$4, map]],
        [0,
         [0, compare$5, t_of_sexp$8, sexp_of_t$7, stable_witness$5],
         [0,
          t_of_sexp$9,
          sexp_of_t$8,
          stable_witness$6,
          to_latest$2,
          of_latest$2],
         [0,
          t_of_sexp$10,
          sexp_of_t$9,
          stable_witness$7,
          to_latest$3,
          of_latest$3]],
        [0, [0, compare$6, t_of_sexp$11, sexp_of_t$10, stable_witness$8]]],
       [0,
        Key_type,
        abs_path,
        help_screen_compare,
        lookup_expand,
        word_wrap_and_strip]];
   runtime.caml_register_global(455, Command_Shape, cst_Command_Shape$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Command_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Command_intf = "Command__Command_intf",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Command_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   caml_call1(Ppx_expect_runtime[1][1], "command/src/command_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_command, "command_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Command_intf);
   var Command_Command_intf = [0];
   runtime.caml_register_global
    (11, Command_Command_intf, cst_Command_Command_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command
//# unitInfo: Requires: Base, Base__Applicative, Base__Array, Base__Bool, Base__Char, Base__Comparator, Base__Error, Base__Exn, Base__Float, Base__Fn, Base__Info, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Nothing, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__Staged, Base__String, Base__Type_equal, CamlinternalLazy, Command__Command_intf, Command__Env_var, Command__Import, Command__Shape, Expect_test_config, Filename_base, Inline_test_config, Parsexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Sexplib__Conv, Sexplib__Sexp, Stdio, Stdio__In_channel, Stdlib, Stdlib__List, Stdlib__Sys, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$23 = "",
    cst$26 = "\n",
    cst$28 = "\n\n",
    cst$21 = " ",
    cst$22 = "  ",
    cst_passed_more_than_once = " passed more than once",
    cst_value = " value ",
    cst_s = "%s",
    cst$27 = ",",
    cst$24 = "-",
    cst_build_info$1 = "--build-info",
    cst_help$9 = "--help",
    cst_version$2 = "--version",
    cst_build_info$2 = "-build-info",
    cst_expand_dots$1 = "-expand-dots",
    cst_flags$1 = "-flags",
    cst_help$8 = "-help",
    cst_version$3 = "-version",
    cst$25 = ".",
    cst_Command$0 = "Command",
    cst$29 = "_",
    cst_command$0 = "command",
    cst_command_src_command_ml$3 = "command/src/command.ml",
    cst_failed_to_parse = "failed to parse ",
    cst_flag = "flag ",
    cst_flag_s_passed_more_than_on = "flag %s passed more than once",
    cst_help$7 = "help",
    cst_invalid$1 = "invalid ",
    cst_missing_required_flag$0 = "missing required flag: ",
    cst_missing_required_flag_s = "missing required flag: %s",
    cst_multiple_flags_named = "multiple flags named ",
    cst_multiple_flags_named_s = "multiple flags named %s",
    cst_same_as = 'same as "',
    cst_same_as_s = 'same as "%s"',
    cst_stderr$0 = "stderr",
    cst_stdout$0 = "stdout",
    cst_too_many_anonymous_argumen = "too many anonymous arguments",
    cst_unknown_subcommand = "unknown subcommand ",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$19 = cst$21,
    cst$20 = cst$22,
    name = "-validate-parsing",
    cst$18 = cst$22,
    cst$17 = cst$24,
    partial = [12, 32, [2, 0, [12, 10, [10, 0]]]],
    cst$15 = cst$21,
    cst$16 = cst$25,
    opt = [0, 0],
    version_list =
      [0, "hg://some/path_0xdeadbeef", [0, "ssh://a/path_8badf00d", 0]],
    cst$9 = cst$24,
    cst$10 = cst$24,
    cst$14 = cst$23,
    cst$13 = cst$23,
    cst$12 = cst$21,
    cst$11 = cst$22,
    cst$8 = cst$22,
    cst$5 = cst$24,
    cst$6 = cst$24,
    cst$7 = cst$24,
    cst$4 = cst$25,
    cst$3 = cst$21,
    cst$2 = cst$21,
    cst$1 = cst$27,
    cst$0 = cst$23,
    cst = ")",
    enumerate_008 = [0, 0, [0, 1, 0]],
    enumerate_009 = [0, 0, [0, 1, 0]],
    any = [0, 0, 0],
    at_least_once = [0, 1, 0],
    at_most_once = [0, 0, 1],
    exactly_once = [0, 1, 1],
    Base_Lazy = global_data.Base__Lazy,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Option = global_data.Base__Option,
    Base_Error = global_data.Base__Error,
    Stdio = global_data.Stdio,
    Base_String = global_data.Base__String,
    Command_Shape = global_data.Command__Shape,
    Base_Int = global_data.Base__Int,
    Command_Import = global_data.Command__Import,
    Base_Array = global_data.Base__Array,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Base_Set = global_data.Base__Set,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Info = global_data.Base__Info,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_Result = global_data.Base__Result,
    Base_Staged = global_data.Base__Staged,
    Base_Nothing = global_data.Base__Nothing,
    Command_Env_var = global_data.Command__Env_var,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Map = global_data.Base__Map,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Filename_base = global_data.Filename_base,
    Univ_map = global_data.Univ_map,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Base_Char = global_data.Base__Char,
    Base_Fn = global_data.Base__Fn,
    Base_Type_equal = global_data.Base__Type_equal,
    Stdlib_List = global_data.Stdlib__List,
    Parsexp = global_data.Parsexp,
    Base_Or_error = global_data.Base__Or_error,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Base_Exn = global_data.Base__Exn,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Base_Applicative = global_data.Base__Applicative,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base_Comparator = global_data.Base__Comparator;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_command_src_command_ml$3);
   caml_call2(Ppx_inline_test_lib[6], cst_command$0, "command.ml");
   var _a_ = Ppx_inline_test_lib[3];
   a:
   {
    var
     _aZ_ = [0, "=== flags ==="],
     cst_help$5 = cst_help$7,
     _a8_ =
       [0,
        [11, "missing subcommand for command ", [2, 0, 0]],
        "missing subcommand for command %s"],
     _a9_ = [0, cst$21],
     _a6_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
     _a7_ = [0, [2, 0, 0], cst_s],
     cst_expand_dots$0 = cst_expand_dots$1,
     cst_flags$0 = cst_flags$1,
     cst_r = "-r",
     cst_help$6 = cst_help$8,
     cst_validate_arguments_are_par =
       " validate arguments are parsed correctly and exit immediately",
     _a5_ = [0, "--validate-parsing", 0],
     _a4_ = [0, cst$23, 0],
     cst_missing_executable_name = "missing executable name",
     cst_Couldn_t_choose_a_supporte =
       "Couldn't choose a supported help output version for Command.exec from the given supported versions.",
     _a3_ = [0, [0, cst_command_src_command_ml$3, 3102, 96602, 96616]],
     _a2_ = [0, [2, 0, 0], cst_s],
     _a1_ = [0, cst_command_src_command_ml$3, 3047, 22],
     _a0_ =
       [0,
        [11,
         cst_unknown_subcommand,
         [2, 0, [11, " for command ", [2, 0, [11, ": ", [2, 0, 0]]]]]],
        "unknown subcommand %s for command %s: %s"],
     cst_SUBCOMMAND = "SUBCOMMAND",
     cst_expand_subcommands_in_recu = " expand subcommands in recursive help",
     cst_expand_dots = cst_expand_dots$1,
     cst_show_flags_as_well_in_recu = " show flags as well in recursive help",
     cst_flags = cst_flags$1,
     cst_show_subcommands_of_subcom = " show subcommands of subcommands, etc.",
     cst_recursive = "-recursive",
     cst_explain_a_given_subcommand =
       "explain a given subcommand (perhaps recursively)",
     cst_subcommands_and_flags = "=== subcommands and flags ===",
     cst_subcommands$0 = "=== subcommands ===",
     _aY_ = [0, " SUBCOMMAND", 0],
     cst_help$4 = "[-help]",
     cst_help$3 = cst_help$7,
     _aW_ =
       [0,
        [11, "unexpected subcommand ", [3, 0, 0]],
        "unexpected subcommand %S"],
     _aX_ =
       [0, [11, cst_unknown_subcommand, [3, 0, 0]], "unknown subcommand %S"],
     _aU_ = [0, cst_stderr$0],
     _aV_ = [0, cst_stdout$0],
     cst_cannot_parse_command_shape = "cannot parse command shape",
     _aT_ = [0, "info"],
     cst_BUG_failed_to_read = "BUG failed to read",
     cst_stdout = cst_stdout$0,
     cst_stderr = cst_stderr$0,
     cst_argv_0 = "<argv_0>",
     _aR_ =
       [0, [11, "_jsautocom_", [4, 0, [0, 2, 10], 0, 0]], "_jsautocom_%010d"],
     _aS_ =
       [0,
        [11,
         "function ",
         [2,
          0,
          [11,
           " {\n  export COMP_CWORD\n  COMP_WORDS[0]=",
           [2,
            0,
            [11,
             '\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[',
             [17,
              0,
              [11,
               '}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[',
               [17, 0, [11, '}")\n  fi\n}\ncomplete -F ', [2, 0, partial]]]]]]]]]],
        'function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!'],
     _aQ_ = [0, cst_command_src_command_ml$3, 2670, 26],
     cst_some_build_info = "some build info",
     _aK_ =
       [0,
        [0,
         [0,
          "\n        hg://some/path_0xdeadbeef\n        ssh://a/path_8badf00d\n        ",
          [0, cst$23]],
         [0, 79767, 79775, 79852]]],
     _aL_ = [0, 79752, 79758, 79853],
     _aM_ = [0, "print version where multiple repos are used"],
     _aN_ = [0, 79612, 79616, 79853],
     _aO_ = [0, 79842, 79853, 79853],
     _aP_ = [0, 79612, 79616, 79853],
     cst_command_src_command_ml$0 = cst_command_src_command_ml$3,
     _aE_ =
       [0,
        [0, [0, " some build info ", [0, cst$23]], [0, 79977, 79992, 80013]]],
     _aF_ = [0, 79977, 79983, 80014],
     _aG_ = [0, "print build info"],
     _aH_ = [0, 79862, 79866, 80014],
     _aI_ = [0, 79977, 80014, 80014],
     _aJ_ = [0, 79862, 79866, 80014],
     cst_command_src_command_ml = cst_command_src_command_ml$3,
     cst_version$1 = "version",
     cst_the_version_of_this_build = "the version of this build",
     _aA_ = [0, cst_version$2, 0],
     cst_version$0 = cst_version$3,
     cst_info_about_this_build = "info about this build",
     _aB_ = [0, cst_build_info$1, 0],
     cst_build_info$0 = cst_build_info$2,
     _aC_ = [0, cst$26],
     cst_print_build_info_for_this_ = " print build info for this build",
     cst_build_info = cst_build_info$2,
     cst_print_the_version_of_this_ = " print the version of this build",
     cst_version = cst_version$3,
     cst_print_version_information = "print version information",
     cst_Path_passed_to_Absolute_mu =
       "Path passed to `Absolute must be absolute",
     cst_Path_passed_to_Relative_to =
       "Path passed to `Relative_to_me must be relative",
     _az_ =
       [0,
        [11, "multiple subcommands named ", [2, 0, 0]],
        "multiple subcommands named %s"],
     _aw_ = [0, [2, 0, 0], cst_s],
     cst_this_help_text = "this help text",
     _ax_ = [0, cst_help$9, 0],
     _ay_ = [0, "-?", 0],
     cst_help$2 = cst_help$8,
     _av_ =
       [0,
        [11, " print ", [2, 0, [11, " and exit", 0]]],
        " print %s and exit"],
     _au_ =
       [0,
        [11, "there is already a ", [2, 0, [11, " named ", [2, 0, 0]]]],
        "there is already a %s named %s"],
     cst_Arg_Tuple_is_not_supported =
       "Arg.Tuple is not supported by Command.Spec.flags_of_args_exn",
     _at_ = [0, 0],
     cst_Arg_Rest_all_is_not_suppor =
       "Arg.Rest_all is not supported by Command.Spec.flags_of_args_exn",
     cst_Arg_Expand_is_not_supporte =
       "Arg.Expand is not supported by Command.Spec.flags_of_args_exn",
     cst_No_help_for_parsing = "No help for parsing",
     _ar_ = [0, 1],
     _as_ = [0, [0, cst_command_src_command_ml$3, 2155, 65352, 65381]],
     cst_and_arg_name_expects_exact =
       "[and_arg_name] expects exactly one name, got",
     cst_missing_required_flag = "missing required flag",
     _aq_ = [0, 0],
     cst_Cannot_pass_more_than_one_ =
       "Cannot pass more than one of these: \n  %{Choice_name.list_to_string}",
     _al_ = [0, 0],
     cst_Cannot_pass_more_than_one_$0 =
       "Cannot pass more than one of these: \n  ",
     _ao_ =
       [0,
        [11,
         'Not all flags in group "',
         [2, 0, [11, '" are given: ', [2, 0, 0]]]],
        'Not all flags in group "%s" are given: %s'],
     _am_ = [0, 0],
     cst_Must_pass_one_of_these_Cho =
       "Must pass one of these:\n  %{Choice_name.list_to_string}",
     _an_ = [0, 0],
     cst_Must_pass_one_of_these = "Must pass one of these:\n  ",
     _aj_ =
       [0, [11, ' [requires: "', [2, 0, [11, '"]', 0]]], ' [requires: "%s"]'],
     _ak_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
     cst_Command_Spec_choose_one_ca =
       "[Command.Spec.choose_one] called with duplicate name",
     _ap_ = [0, [0, cst_command_src_command_ml$3, 2018, 60195, 60213]],
     _ai_ = [0, "\n  "],
     _ah_ = [0, cst$27],
     _af_ = [0, cst$27],
     _ag_ = [0, cst$27],
     cst_choose_one_expects_choices =
       "[choose_one] expects choices to read command-line arguments.",
     cst_For_simplicity_Command_Spe =
       "For simplicity, [Command.Spec.choose_one] does not support names with commas.",
     _ae_ = [0, [0, cst_command_src_command_ml$3, 1936, 57337, 57357]],
     cst_optional_to_required_got_a =
       "[optional_to_required] got a [None] result",
     cst_s_default_Sexp = "%s (default: %{Sexp})",
     _ac_ = [12, 41, 0],
     _ad_ = [0, 0],
     cst_default = " (default: ",
     cst_ARG = "ARG",
     cst_help$1 = " -help\n",
     cst_For_usage_information_run = "For usage information, run",
     cst_Error_parsing_command_line = "Error parsing command line:",
     _Z_ = [0, cst$28],
     _Y_ =
       [0,
        [11, "missing argument for flag ", [2, 0, 0]],
        "missing argument for flag %s"],
     _X_ = [0, [2, 0, 0], cst_s],
     _W_ = [0, cst$26],
     cst_help = cst_help$8,
     _V_ =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     cst_invalid_Key_type_name_S = "invalid %{Key_type} name: %S",
     _R_ = [11, " name: ", [3, 0, 0]],
     _S_ = [0, 0],
     cst_invalid = cst_invalid$1,
     cst_invalid_Key_type_name_cont =
       "invalid %{Key_type} name (contains whitespace): %S",
     _T_ = [11, " name (contains whitespace): ", [3, 0, 0]],
     _U_ = [0, 0],
     cst_invalid$0 = cst_invalid$1,
     _Q_ =
       [0,
        [2,
         0,
         [12,
          32,
          [2, 0, [11, " contains an underscore. Use a dash instead.", 0]]]],
        "%s %s contains an underscore. Use a dash instead."],
     cst_WILL_NEVER_BE_PRINTED = "WILL NEVER BE PRINTED",
     cst_Empty_anonymous_argument_n = "Empty anonymous argument name provided",
     _O_ =
       [0,
        [11, "argument name ", [3, 0, [11, " has surrounding whitespace", 0]]],
        "argument name %S has surrounding whitespace"],
     _P_ =
       [0,
        60,
        [0, 62, [0, 91, [0, 93, [0, 40, [0, 41, [0, 123, [0, 125, 0]]]]]]]],
     _L_ = [0, cst_command_src_command_ml$3, 1210, 8],
     cst_BUG_asked_for_final_value_ =
       "BUG: asked for final value when doing completion",
     _M_ =
       [0,
        [11, cst_too_many_anonymous_argumen, 0],
        cst_too_many_anonymous_argumen],
     _N_ = [3, 0],
     _K_ =
       [0,
        [11, "missing anonymous argument: ", [2, 0, 0]],
        "missing anonymous argument: %s"],
     _I_ = [3, 0],
     _J_ =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [12, 10, [2, 0, 0]]]]]],
        "failed to parse %s value %S\n%s"],
     _F_ = [0, cst_command_src_command_ml$3, 959, 11],
     cst_bug_in_command_ml = "bug in command.ml",
     _H_ =
       [0,
        [11,
         "the grammar ",
         [2,
          0,
          [11,
           " for anonymous arguments is not supported because there is the possibility for arguments (",
           [2,
            0,
            [11,
             ") following a variable number of arguments (",
             [2,
              0,
              [11,
               ").  Supporting such grammars would complicate the implementation significantly.",
               0]]]]]]],
        "the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly."],
     _G_ =
       [0,
        [11,
         "iteration of variable-length grammars such as ",
         [2, 0, [11, " is disallowed", 0]]],
        "iteration of variable-length grammars such as %s is disallowed"],
     _E_ = [0, cst_command_src_command_ml$3, 909, 11],
     _D_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _C_ = [0, cst$29],
     _B_ = [0, cst$29],
     _A_ = [0, cst_command_src_command_ml$3, 764, 19],
     _z_ =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     _y_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _x_ = [0, cst$29],
     _w_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _v_ = [0, cst$29],
     _u_ =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     _t_ =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [11, ".\n", [2, 0, 0]]]]]],
        "failed to parse %s value %S.\n%s"],
     _r_ =
       [0,
        [11, "multiple flags or aliases named ", [2, 0, 0]],
        "multiple flags or aliases named %s"],
     _s_ =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     _q_ = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     _p_ = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     _o_ = [0, cst$29],
     cst_Command_Spec_Arg_type_comm =
       "Command.Spec.Arg_type.comma_separated: empty list not allowed",
     _n_ = [0, cst$27],
     cst_case_insensitive = " (case insensitive)",
     _k_ = [0, cst$27],
     _l_ =
       [0,
        [11, "valid arguments", [2, 0, [11, ": {", [2, 0, [12, 125, 0]]]]],
        "valid arguments%s: {%s}"],
     _j_ = [0, ", "],
     cst_can_be = "(can be: ",
     _i_ = [0, "duplicate_keys"],
     cst_Command_Spec_Arg_type_of_a = "Command.Spec.Arg_type.of_alist_exn",
     _g_ = [0, cst$28],
     _f_ = [0, cst$21],
     _c_ = [0, "status"],
     _d_ = [0, "command/src/command.ml.Exit_called"],
     _e_ = [0, "_none_", 0, -1],
     cst_Command_Exit_called = "Command.Exit_called",
     cst_Command_Failed_to_parse_co = "Command.Failed_to_parse_command_line",
     cst_internal_validate_parsing = "----internal-validate-parsing",
     _m_ = [0, 0],
     cst_path = "path",
     cst_args = "args",
     cst_help$0 = cst_help$7,
     cst_subcommands = "subcommands",
     cst_command_src_command_ml$1 = cst_command_src_command_ml$3,
     cst_Version_info = "Version_info",
     _a$_ =
       [0,
        [0,
         [0,
          '\n    function _jsautocom_0000012345 {\n      export COMP_CWORD\n      COMP_WORDS[0]=<argv_0>\n      if type readarray > /dev/null\n      then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n      else IFS="\n    " read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n      fi\n    }\n    complete -F _jsautocom_0000012345 <argv_0>\n    ',
          [0, cst$23]],
         [0, 83018, 83022, 83348]]],
     _ba_ = [0, 83007, 83009, 83349],
     _bd_ = [0, "Demonstrate [autocomplete_function]"],
     _bg_ = [0, 82879, 82879, 83349],
     _bh_ = [0, 83342, 83349, 83349],
     _bi_ = [0, 82879, 82879, 83349],
     cst_command_src_command_ml$2 = cst_command_src_command_ml$3,
     cst_command = cst_command$0,
     cst_Command = cst_Command$0;
    if(typeof _a_ !== "number" && 545942154 <= _a_[2]){var raise_instead_of_exit = 1; break a;}
    var raise_instead_of_exit = 0;
   }
   var Exit_called = [248, cst_Command_Exit_called, caml_fresh_oo_id(0)];
   function _b_(param){
    if(param[1] !== Exit_called)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    var
     status_002 = param[2],
     arg_003 = caml_call1(Base[136], status_002),
     bnds_001 = [0, [1, [0, _c_, [0, arg_003, 0]]], 0];
    return [1, [0, _d_, bnds_001]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Exit_called, _b_);
   function exit(status){
    if(raise_instead_of_exit)
     throw caml_maybe_attach_backtrace([0, Exit_called, status], 1);
    return caml_call1(Stdlib[99], status);
   }
   function unparagraphs(xs){return caml_call2(Base_String[68], _g_, xs);}
   var
    Failed_to_parse_command_line =
      [248, cst_Command_Failed_to_parse_co, caml_fresh_oo_id(0)];
   function die(fmt){
    function _jz_(msg, param){
     throw caml_maybe_attach_backtrace
            ([0, Failed_to_parse_command_line, msg], 1);
    }
    return caml_call2(Command_Import[9], _jz_, fmt);
   }
   var
    help_screen_compare = Command_Shape[14][3],
    empty = Univ_map[4],
    set = Univ_map[7],
    mem = Univ_map[8],
    find = Univ_map[10],
    find_exn = Univ_map[11],
    update = Univ_map[16],
    With_default = Univ_map[30];
   function key_create(name){
    return caml_call2(Base_Type_equal[12][4], name, Sexplib_Conv[23]);
   }
   var
    multi_add = Univ_map[32][4],
    set_with_default = Univ_map[30][2],
    key_internal_validate_parsing =
      caml_call2
       (Base_Type_equal[12][4], cst_internal_validate_parsing, Base[220]);
   function apply(f, x){
    var _ju_ = f[2], _jv_ = _ju_ || x[2];
    function _jw_(param, _jy_){
     var err_1 = param[2];
     return [0, 696341824, err_1];
    }
    function _jx_(f, x){return caml_call1(f, x);}
    return [0, caml_call4(Base_Result[35], f[1], x[1], _jx_, _jw_), _jv_];
   }
   function introduce_missing_required_fla(t){
    var _jt_ = t[2];
    return [0, caml_call1(Base_Result[16], t[1]), _jt_];
   }
   function _h_(param, f){
    var has_arg = param[2], result = param[1];
    return [0, caml_call2(Base_Result[33], result, f), has_arg];
   }
   function return_no_arg(v){return [0, [0, v], 0];}
   function return_with_arg(v){return [0, [0, v], 1];}
   function error(has_arg, err){return [0, [1, err], has_arg];}
   var
    map = [0, -198771759, _h_],
    include = caml_call1(Base_Applicative[7], [0, return_no_arg, apply, map]),
    return$0 = include[1],
    map$0 = include[2],
    symbol = include[4],
    apply$0 = include[8],
    For_escape = [0],
    Auto_complete = [0, For_escape];
   function run_and_exit(t, env, part){
    function _jq_(completions){
     var _jr_ = Command_Import[5], _js_ = caml_call2(completions, env, part);
     return caml_call2(Base_List[19], _js_, _jr_);
    }
    caml_call2(Base_Option[37], t, _jq_);
    return exit(0);
   }
   function extra_doc(r){return r[4];}
   function parse(t, s){
    function _jp_(param){return caml_call1(t[1], s);}
    return caml_call2(Base_Or_error[31], 0, _jp_);
   }
   function create(complete, key, of_string){
    return [0, of_string, complete, key, caml_call1(Base_Lazy[24], 0)];
   }
   function map$1(key, t, f){
    var _jn_ = t[4], _jo_ = t[2];
    return [0,
            function(s){return caml_call1(f, caml_call1(t[1], s));},
            _jo_,
            key,
            _jn_];
   }
   function of_lazy(key, t){
    function parse(str){
     var _jl_ = caml_obj_tag(t);
     a:
     if(250 === _jl_)
      var _jm_ = t[1];
     else{
      if(246 !== _jl_ && 244 !== _jl_){var _jm_ = t; break a;}
      var _jm_ = caml_call1(CamlinternalLazy[2], t);
     }
     return caml_call1(_jm_[1], str);
    }
    function complete(env, part){
     var _jj_ = caml_obj_tag(t);
     a:
     if(250 === _jj_)
      var _jk_ = t[1];
     else{
      if(246 !== _jj_ && 244 !== _jj_){var _jk_ = t; break a;}
      var _jk_ = caml_call1(CamlinternalLazy[2], t);
     }
     var match = _jk_[2];
     if(! match) return 0;
     var complete = match[1];
     return caml_call2(complete, env, part);
    }
    var extra_doc$0 = caml_call2(Base_Lazy[13], t, extra_doc);
    return [0, parse, [0, complete], key, extra_doc$0];
   }
   var
    string = create(0, 0, function(_ji_){return _ji_;}),
    int$0 = create(0, 0, Base_Int[11]),
    char$0 = create(0, 0, Base_Char[8]),
    float$0 = create(0, 0, Base_Float[9]),
    sexp = create(0, 0, Parsexp[3][10]);
   function sexp_conv(complete, of_sexp){
    return create
            (complete,
             0,
             function(s){
              return caml_call1(of_sexp, caml_call1(Parsexp[3][10], s));
             });
   }
   function of_alist_exn
   (accept_unique_prefixes$0,
    opt,
    list_values_in_help$0,
    auto_complete,
    key,
    alist){
    if(opt)
     var sth$1 = opt[1], case_sensitive = sth$1;
    else
     var case_sensitive = 1;
    if(accept_unique_prefixes$0)
     var sth = accept_unique_prefixes$0[1], accept_unique_prefixes = sth;
    else
     var accept_unique_prefixes = 1;
    if(list_values_in_help$0)
     var sth$0 = list_values_in_help$0[1], list_values_in_help = sth$0;
    else
     var list_values_in_help = 1;
    function make(cmp){
     var match = caml_call2(Base_Map[8], [0, cmp[1]], alist);
     if(17724 <= match[1])
      var map = match[2], _jh_ = map;
     else
      var
       _i$_ = function(param){if(param && param[2]) return 1; return 0;},
       _ja_ = function(param){var k = param[1]; return [0, k, k];},
       _jb_ = caml_call2(Base_List[53], alist, _ja_),
       _jc_ = caml_call2(Base_Map[11], [0, cmp[1]], _jb_),
       _jd_ = caml_call2(Base_Map[60], _jc_, _i$_),
       duplicate_keys = caml_call1(Base_Map[74], _jd_),
       _je_ = caml_call1(Base[165], Base[202]),
       _jf_ =
         [0,
          [1, [0, _i_, [0, caml_call2(Base[165], _je_, duplicate_keys), 0]]],
          0],
       _jg_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Command_Spec_Arg_type_of_a),
           _jf_]],
       _jh_ = caml_call1(Base[246], _jg_);
     return [0, cmp, _jh_];
    }
    if(case_sensitive)
     var match = make([0, Base_String[59], Base_String[97]]);
    else
     var _i0_ = Base_String[75], match = make([0, _i0_[21], _i0_[24]]);
    var map = match[2], S = match[1];
    function complete(univ_map, prefix){
     if(auto_complete){
      var complete = auto_complete[1];
      return caml_call2(complete, univ_map, prefix);
     }
     function _i9_(param){
      var name = param[1];
      if(! caml_call2(S[2], name, prefix)) return 0;
      var
       suffix =
         caml_call3
          (Base_String[5], [0, caml_ml_string_length(prefix)], 0, name),
       name$0 = caml_call2(Base[241], prefix, suffix);
      return [0, name$0];
     }
     var _i__ = caml_call2(Base_Map[75], 0, map);
     return caml_call2(Base_List[13], _i__, _i9_);
    }
    var
     _iZ_ =
       [246,
        function(_i5_){
         if(! list_values_in_help) return 0;
         var
          _i6_ = caml_call1(Base_Map[73], map),
          values = caml_call2(Base_String[68], _j_, _i6_),
          _i7_ =
            [0, values, [0, caml_call1(Ppx_string_runtime[1][2], cst), 0]],
          _i8_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_can_be), _i7_];
         return [0, caml_call1(Ppx_string_runtime[1][4], _i8_)];
        }];
    return [0,
            function(arg){
             var s = caml_call2(Base_Map[42], map, arg);
             a:
             if(s)
              var match$0 = s;
             else if(accept_unique_prefixes){
              var
               _i1_ =
                 function(param){
                  var name = param[1];
                  return caml_call2(S[2], name, arg);
                 },
               _i2_ = caml_call2(Base_Map[75], 0, map),
               match = caml_call2(Base_List[12], _i2_, _i1_);
              if(match && ! match[2]){
               var v = match[1][2], match$0 = [0, v];
               break a;
              }
              var match$0 = 0;
             }
             else
              var match$0 = 0;
             if(match$0){var v$0 = match$0[1]; return v$0;}
             var
              valid_arguments_extra =
                case_sensitive ? cst$0 : cst_case_insensitive,
              _i3_ = caml_call1(Base_Map[73], map),
              _i4_ = caml_call2(Base_String[68], _k_, _i3_);
             return caml_call4
                     (Command_Import[8], _l_, valid_arguments_extra, _i4_, 0);
            },
            [0, complete],
            key,
            _iZ_];
   }
   function of_map
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    map){
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             caml_call2(Base_Map[75], 0, map));
   }
   function enumerated
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    function _iY_(t){return [0, caml_call1(E[2], t), t];}
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             caml_call2(Base_List[58][4][3], E[1], _iY_));
   }
   function enumerated_sexpable
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    var all = E[1];
    function to_string(t){
     var _iX_ = caml_call1(E[2], t);
     return caml_call1(Base[85][16], _iX_);
    }
    return enumerated
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             [0, all, to_string]);
   }
   var bool = enumerated(0, 0, _m_, 0, 0, [0, Base_Bool[1], Base_Bool[9]]);
   function comma_separated(opt, key, _iJ_, _iI_, t){
    if(opt) var sth = opt[1], allow_empty = sth; else var allow_empty = 0;
    if(_iJ_)
     var sth$0 = _iJ_[1], strip_whitespace = sth$0;
    else
     var strip_whitespace = 0;
    if(_iI_)
     var sth$1 = _iI_[1], unique_values = sth$1;
    else
     var unique_values = 0;
    var
     strip =
       strip_whitespace
        ? function(str){return caml_call2(Base_String[109], 0, str);}
        : function(_iW_){return _iW_;};
    function _iK_(complete_elt, env, part){
     var
      _iO_ = caml_call2(Base_String[102], part, 44),
      match = caml_call1(Base_List[63], _iO_);
     if(match)
      var
       tl = match[2],
       hd = match[1],
       suffix = hd,
       prefixes = caml_call1(Base_List[63], tl);
     else
      var suffix = part, prefixes = 0;
     if(unique_values)
      var
       _iP_ = caml_call2(Base_List[53], prefixes, strip),
       seen_already = caml_call2(Base_Set[32], [0, Base_String[59]], _iP_),
       is_allowed =
         function(choice){
          var _iV_ = strip(choice);
          return 1 - caml_call2(Base_Set[9], seen_already, _iV_);
         };
     else
      var is_allowed = function(param){return 1;};
     function _iQ_(choice){
      var _iU_ = 1 - caml_call2(Base_String[65], choice, 44);
      return _iU_ ? is_allowed(choice) : _iU_;
     }
     var
      _iR_ = caml_call2(complete_elt, env, suffix),
      choices = caml_call2(Base_List[12], _iR_, _iQ_);
     a:
     {
      if(choices && ! choices[2]){
       var
        choice = choices[1],
        choices$0 = [0, choice, [0, caml_call2(Base[241], choice, cst$1), 0]];
       break a;
      }
      var choices$0 = choices;
     }
     function _iS_(choice){
      var _iT_ = caml_call2(Base[222], prefixes, [0, choice, 0]);
      return caml_call2(Base_String[68], _n_, _iT_);
     }
     return caml_call2(Base_List[53], choices$0, _iS_);
    }
    var complete = caml_call2(Base_Option[24], t[2], _iK_);
    function of_string(string){
     var string$0 = strip(string);
     if(caml_call1(Base_String[14], string$0))
      return allow_empty
              ? 0
              : caml_call1(Base[244], cst_Command_Spec_Arg_type_comm);
     function _iL_(str){var _iN_ = strip(str); return caml_call1(t[1], _iN_);}
     var _iM_ = caml_call2(Base_String[102], string$0, 44);
     return caml_call2(Base_List[53], _iM_, _iL_);
    }
    return create(complete, key, of_string);
   }
   var include$0 = [0, string, int$0, char$0, float$0, bool, sexp, sexp_conv];
   function auto_complete(t){
    var match = t[2];
    if(! match) return function(param, _iH_){return 0;};
    var f = match[1];
    return f;
   }
   var acc = 0, enumerate_012 = enumerate_008, enumerate_013 = enumerate_009;
   for(;;){
    if(! enumerate_013) break;
    if(enumerate_012)
     var
      enumerate_011 = enumerate_013[1],
      enumerate_014 = enumerate_012[2],
      enumerate_010 = enumerate_012[1],
      acc$0 = [0, [0, enumerate_010, enumerate_011], acc],
      acc = acc$0,
      enumerate_012 = enumerate_014;
    else
     var
      enumerate_014$0 = enumerate_013[2],
      enumerate_012 = enumerate_008,
      enumerate_013 = enumerate_014$0;
   }
   caml_call1(Stdlib_List[10], acc);
   var to_help_string = Command_Shape[2][4];
   function parse$0(action, doc){
    var match = caml_call2(Base_String[100], doc, 32);
    a:
    {
     switch(action[0]){
       case 2:
        if(match && caml_string_notequal(match[1][1], cst$23)) break;
        var doc$0 = doc, arg_doc = _o_;
        break a;
       case 3:
        if(match && caml_string_notequal(match[1][1], cst$23)) break;
        var doc$0 = doc, arg_doc = 0;
        break a;
       default: var doc$0 = doc, arg_doc = 0; break a;
     }
     var
      match$0 = match[1],
      doc$1 = match$0[2],
      arg = match$0[1],
      arg_doc$0 = [0, arg],
      doc$0 = doc$1,
      arg_doc = arg_doc$0;
    }
    return [0, arg_doc, caml_call2(Base_String[109], 0, doc$0)];
   }
   function concat(name, arg_doc){
    if(! arg_doc) return name;
    var
     arg_doc$0 = arg_doc[1],
     _iG_ = caml_call2(Base[241], cst$2, arg_doc$0);
    return caml_call2(Base[241], name, _iG_);
   }
   function wrap_if_optional(t, flag_name){
    var at_least_once = t[6][1];
    return caml_call2(to_help_string, [0, at_least_once, 1], flag_name);
   }
   function help(t){
    var doc = t[5], action = t[4], aliases = t[2], name = t[1];
    if(caml_call2(Base_String[97], doc, cst$3)){
     var
      _iB_ =
        function(x){return [0, x, caml_call2(Command_Import[7], _p_, name)];},
      _iC_ = caml_call2(Base_List[53], aliases, _iB_);
     return [0, [0, name, caml_call2(Base_String[107], 0, doc)], _iC_];
    }
    var match = parse$0(action, doc), doc$0 = match[2], arg_doc = match[1];
    function _iD_(x){
     var _iF_ = caml_call2(Command_Import[7], _q_, name);
     return [0, wrap_if_optional(t, concat(x, arg_doc)), _iF_];
    }
    var _iE_ = caml_call2(Base_List[53], aliases, _iD_);
    return [0, [0, wrap_if_optional(t, concat(name, arg_doc)), doc$0], _iE_];
   }
   function align(t){
    var
     doc = t[5],
     action = t[4],
     aliases = t[2],
     name$0 = t[1],
     match = parse$0(action, doc),
     doc$0 = match[2],
     arg_doc = match[1],
     flag_name = concat(name$0, arg_doc),
     name = caml_call2(to_help_string, t[6], flag_name);
    return [0, name, doc$0, aliases];
   }
   function create$0(flags){
    function _iu_(flag){return [0, flag[1], flag];}
    var
     _iv_ = caml_call2(Base_List[53], flags, _iu_),
     match = caml_call2(Base_Map[8], [0, Base_String[59]], _iv_);
    if(17724 <= match[1]){
     var
      map = match[2],
      _iw_ = function(x){return caml_call3(Command_Import[8], _r_, x, 0);},
      _ix_ =
        function(a_020, b_021){return caml_call2(Base[195], a_020, b_021);},
      _iy_ = function(flag){return [0, flag[1], flag[2]];},
      _iz_ = caml_call2(Base_List[14], flags, _iy_),
      _iA_ = caml_call2(Base_List[128], _iz_, _ix_);
     caml_call2(Base_Option[37], _iA_, _iw_);
     return map;
    }
    var flag = match[2];
    return caml_call3(Command_Import[8], _s_, flag, 0);
   }
   function arg_flag(name, arg_type, read, write, num_occurrences){
    var _is_ = arg_type[4];
    function update(env, arg){
     var match = parse(arg_type, arg);
     if(0 !== match[0]){
      var error = match[1], _it_ = caml_call1(Base_Error[12], error);
      return caml_call4(die(_t_), name, arg, _it_, 0);
     }
     var
      arg$0 = match[1],
      env$0 = caml_call2(write, env, arg$0),
      match$0 = arg_type[3];
     if(! match$0) return env$0;
     var key = match$0[1];
     return caml_call3(multi_add, env$0, key, arg$0);
    }
    return [0, [2, update, arg_type[2]], read, num_occurrences, _is_];
   }
   function map_flag(t, f, input){
    var
     match = caml_call1(t, input),
     extra_doc = match[4],
     num_occurrences = match[3],
     read = match[2],
     action = match[1];
    return [0,
            action,
            function(env){return caml_call2(map$0, caml_call1(read, env), f);},
            num_occurrences,
            extra_doc];
   }
   function write_option(name, key, env, arg){
    return caml_call3
            (update,
             env,
             key,
             function(param){
              return param ? caml_call2(die(_u_), name, 0) : arg;
             });
   }
   function required_value(default$0, arg_type, name, num_occurrences){
    function _iq_(param){return _v_;}
    var key = caml_call2(Base_Type_equal[12][4], name, _iq_);
    function read(env){
     var match = caml_call2(find, env, key);
     if(match){var v = match[1]; return return_with_arg(v);}
     if(default$0){var v$0 = default$0[1]; return return_no_arg(v$0);}
     var _ir_ = caml_call2(Command_Import[7], _w_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[14], _ir_)]);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, num_occurrences);
   }
   function required(arg_type, name){
    return required_value(0, arg_type, name, exactly_once);
   }
   function optional_with_default(default$0, arg_type, name){
    return required_value([0, default$0], arg_type, name, at_most_once);
   }
   function optional(arg_type, name){
    function _ip_(param){return _x_;}
    var key = caml_call2(Base_Type_equal[12][4], name, _ip_);
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, at_most_once);
   }
   function no_arg_general(is_required, key_value, deprecated_hook, name){
    var key = caml_call2(Base_Type_equal[12][4], name, Base[220]);
    function read(env){
     if(caml_call2(mem, env, key)) return return_with_arg(1);
     if(! is_required) return return_no_arg(0);
     var _io_ = caml_call2(Command_Import[7], _y_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[14], _io_)]);
    }
    function action(env){
     function _in_(env, param){
      var value = param[2], key = param[1];
      return caml_call3(set_with_default, env, key, value);
     }
     var env$0 = caml_call3(Base_Option[34], key_value, env, _in_);
     return caml_call2(mem, env$0, key)
             ? caml_call2(die(_z_), name, 0)
             : caml_call3(set, env$0, key, 0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 =
        function(env){
         var env$0 = action(env);
         caml_call1(f, 0);
         return env$0;
        };
    else
     var action$0 = action;
    var
     _il_ = caml_call1(Base_Lazy[24], 0),
     _im_ = is_required ? exactly_once : at_most_once;
    return [0, [0, action$0], read, _im_, _il_];
   }
   function no_arg(name){return no_arg_general(0, 0, 0, name);}
   function no_arg_required(v, name){
    function _ig_(param){
     if(param) return v;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
    }
    var _ih_ = 0, _ii_ = 0, _ij_ = 1;
    return map_flag
            (function(_ik_){return no_arg_general(_ij_, _ii_, _ih_, _ik_);},
             _ig_,
             name);
   }
   function no_arg_register(key, value, name){
    return no_arg_general(0, [0, [0, key, value]], 0, name);
   }
   function no_arg_some(value){
    function _ie_(param){return param ? [0, value] : 0;}
    return function(_if_){return map_flag(no_arg, _ie_, _if_);};
   }
   function listed(arg_type, name){
    function _ia_(x_022){
     function _id_(param){return _B_;}
     return caml_call2(Base[165], _id_, x_022);
    }
    var key = caml_call3(With_default[1][1], 0, name, _ia_);
    function read(env){
     var
      _ic_ = caml_call2(With_default[3], env, key),
      value_list = caml_call1(Base_List[63], _ic_);
     return value_list ? return_with_arg(value_list) : return_no_arg(0);
    }
    function write(env, arg){
     function _ib_(list){return [0, arg, list];}
     return caml_call3(With_default[4], env, key, _ib_);
    }
    return arg_flag(name, arg_type, read, write, any);
   }
   function one_or_more_as_pair(arg_type, name){
    function _h7_(x_023){
     function _h$_(param){return _C_;}
     return caml_call2(Base[165], _h$_, x_023);
    }
    var key = caml_call3(With_default[1][1], 0, name, _h7_);
    function read(env){
     var
      _h9_ = caml_call2(With_default[3], env, key),
      match = caml_call1(Base_List[63], _h9_);
     if(match){
      var rest = match[2], first = match[1];
      return return_with_arg([0, first, rest]);
     }
     var _h__ = caml_call2(Command_Import[7], _D_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[14], _h__)]);
    }
    function write(env, arg){
     function _h8_(q){return [0, arg, q];}
     return caml_call3(With_default[4], env, key, _h8_);
    }
    return arg_flag(name, arg_type, read, write, at_least_once);
   }
   function one_or_more_as_list(arg_type){
    function _h3_(param){var xs = param[2], x = param[1]; return [0, x, xs];}
    function _h4_(_h6_){return one_or_more_as_pair(arg_type, _h6_);}
    return function(_h5_){return map_flag(_h4_, _h3_, _h5_);};
   }
   function escape_general(complete, deprecated_hook, name){
    function _h2_(x_024){return caml_call2(Base[165], Base[202], x_024);}
    var key = caml_call2(Base_Type_equal[12][4], name, _h2_);
    function action(env, cmd_line){
     return caml_call3(set, env, key, cmd_line);
    }
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 = function(env, x){caml_call1(f, x); return action(env, x);};
    else
     var action$0 = action;
    return [0,
            [3, action$0, complete],
            read,
            at_most_once,
            caml_call1(Base_Lazy[24], 0)];
   }
   function no_arg_abort(exit, name){
    var _hZ_ = caml_call1(Base_Lazy[24], 0);
    function _h0_(param){return return_no_arg(0);}
    return [0,
            [0,
             function(param){
              var _h1_ = caml_call1(exit, 0);
              return caml_call1(Base_Nothing[4], _h1_);
             }],
            _h0_,
            at_most_once,
            _hZ_];
   }
   function escape(name){return escape_general(0, 0, name);}
   function escape_with_autocomplete(complete, name){return escape_general([0, complete], 0, name);
   }
   function no_arg$0(hook, name){
    return no_arg_general(0, 0, [0, hook], name);
   }
   function escape$0(hook){
    var _hW_ = [0, hook], _hX_ = 0;
    return function(_hY_){return escape_general(_hX_, _hW_, _hY_);};
   }
   var empty$0 = 0;
   function create$1(path_to_exe){return [0, path_to_exe, 0];}
   function append(t, subcommand){return [0, subcommand, t];}
   var parts = Base_List[63];
   function parts_exe_basename(t){
    var match = caml_call1(Base_List[63], t);
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    return [0, caml_call1(Filename_base[37], hd), tl];
   }
   function to_string(t){
    var xs = parts_exe_basename(t);
    return caml_call2(Base_String[68], _f_, xs);
   }
   var length = Base_List[45];
   function replace_first(t, from, to){
    var parts$2 = caml_call1(parts, t), parts$0 = parts$2, acc = 0;
    for(;;){
     if(! parts$0) return acc;
     var parts$1 = parts$0[2], hd = parts$0[1];
     if(caml_call2(Base_String[47], hd, from))
      return caml_call2(Base_List[64], parts$1, [0, to, acc]);
     var acc$0 = [0, hd, acc], parts$0 = parts$1, acc = acc$0;
    }
   }
   function to_string_dots(t){
    if(t)
     var
      init = t[2],
      last = t[1],
      _hU_ = caml_call1(Base_Fn[1], cst$4),
      _hV_ = [0, last, caml_call2(Base_List[53], init, _hU_)];
    else
     var _hV_ = 0;
    return to_string(_hV_);
   }
   var
    is_empty = Base_List[18],
    invariant = Command_Shape[1][1][3],
    usage = Command_Shape[1][1][4];
   function is_fixed_arity(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 1;
     switch(param$0[0]){
       case 0:
        return 1;
       case 1:
        return 0;
       case 2:
        return 0;
       case 3:
        var ts = param$0[1], match = caml_call1(Base_List[63], ts);
        if(! match) return caml_call1(Base[244], cst_bug_in_command_ml);
        var others = match[2], last = match[1];
        if(! caml_call2(Base_List[24], others, is_fixed_arity))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
        var param$0 = last;
        break;
       default: return 0;
     }
    }
   }
   function names(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     switch(param$0[0]){
       case 0:
        var s = param$0[1]; return [0, s, 0];
       case 1:
        var t = param$0[1], param$0 = t; break;
       case 2:
        var t$0 = param$0[1], param$0 = t$0; break;
       case 3:
        var ts = param$0[1]; return caml_call2(Base_List[14], ts, names);
       default: var s$0 = param$0[1]; return [0, s$0, 0];
     }
    }
   }
   var zero = 0;
   function concat$0(param){
    if(! param) return 0;
    var cdr = param[2], car = param[1];
    function _hQ_(param, t2){
     var acc = param[2], t1 = param[1];
     if(typeof t1 === "number")
      var t = t2;
     else{
      if(typeof t2 !== "number"){
       if(is_fixed_arity(t1)) return [0, t2, [0, t1, acc]];
       var
        _hR_ = caml_call1(usage, t1),
        _hS_ = caml_call1(usage, t2),
        _hT_ =
          caml_call1
           (usage, [3, caml_call1(Base_List[63], [0, t2, [0, t1, acc]])]);
       return caml_call5(Command_Import[8], _H_, _hT_, _hS_, _hR_, 0);
      }
      var t = t1;
     }
     return [0, t, acc];
    }
    var
     match = caml_call3(Base_List[20], cdr, [0, car, 0], _hQ_),
     cdr$0 = match[2],
     car$0 = match[1];
    return cdr$0 ? [3, caml_call1(Base_List[63], [0, car$0, cdr$0])] : car$0;
   }
   function parse_more(param, f){
    var complete = param[3], parse = param[2], name = param[1];
    function parse$0(arg, for_completion){
     var
      match = caml_call2(parse, arg, for_completion),
      update_env = match[2],
      parser = match[1];
     return [0, caml_call1(f, parser), update_env];
    }
    return [1, [0, name, parse$0, complete]];
   }
   function pack_for_completion(x){
    switch(x[0]){
      case 0:
       return 0;
      case 3:
       var ps = x[1]; return ps;
      default: return [0, [0, x], 0];
    }
   }
   function symbol$0(t_left, t_right){
    a:
    {
     switch(t_left[0]){
       case 0:
        var f = t_left[1];
        switch(t_right[0]){
          case 0:
           var x = t_right[1];
           return [0,
                   function(env){
                    var
                     f_outcome = caml_call1(f, env),
                     x_outcome = caml_call1(x, env);
                    return caml_call1(f_outcome, x_outcome);
                   }];
          case 1:
           var more = t_right[1];
           return parse_more(more, function(tr){return symbol$0(t_left, tr);});
          case 2:
           var test = t_right[1];
           return [2,
                   function(more){
                    return symbol$0(t_left, caml_call1(test, more));
                   }];
          case 3:
           break a;
          default: var tr = t_right[1], tl = t_left;
        }
        break;
       case 1:
        var more$0 = t_left[1];
        return parse_more(more$0, function(tl){return symbol$0(tl, t_right);});
       case 2:
        var test$0 = t_left[1];
        return [2,
                function(more){
                 return symbol$0(caml_call1(test$0, more), t_right);
                }];
       case 4:
        var tr = t_right, tl = t_left[1]; break;
       default: break a;
     }
     return [4, symbol$0(tl, tr)];
    }
    var
     _hO_ = pack_for_completion(t_right),
     _hP_ = pack_for_completion(t_left);
    return [3, caml_call2(Base[222], _hP_, _hO_)];
   }
   function return$1(a){return [0, function(param){return a;}];}
   function symbol_map(t, f){return symbol$0(return$1(f), t);}
   function from_env(f){
    return [0, function(env){return caml_call1(f, env);}];
   }
   function symbol_map$0(t, f){
    return symbol_map(t, function(_hN_){return caml_call2(map$0, _hN_, f);});
   }
   function symbol$1(t_left, t_right){
    return symbol$0(symbol$0(return$1(symbol), t_left), t_right);
   }
   function return$2(a){return return$1(caml_call1(return$0, a));}
   function return_with_arg$0(a){
    return [0, function(param){return return_with_arg(a);}];
   }
   function one(name, arg_type){
    return [2,
            function(more){
             if(! more)
              return [0,
                      function(param){
                       var _hM_ = caml_call2(Command_Import[7], _K_, name);
                       return error
                               (0, [0, 696341824, caml_call1(Base_Error[14], _hM_)]);
                      }];
             function parse$0(anon, for_completion){
              var match = parse(arg_type, anon);
              if(0 === match[0]){
               var
                v = match[1],
                _hI_ =
                  function(env){
                   function _hL_(env, key){
                    return caml_call3(multi_add, env, key, v);
                   }
                   return caml_call3(Base_Option[34], arg_type[3], env, _hL_);
                  };
               return [0, return_with_arg$0(v), _hI_];
              }
              var error = match[1];
              if(for_completion)
               return [0, _I_, function(_hK_){return _hK_;}];
              var _hJ_ = caml_call1(Base_Error[12], error);
              return caml_call4(die(_J_), name, anon, _hJ_, 0);
             }
             return [1, [0, name, parse$0, arg_type[2]]];
            }];
   }
   function sequence(t){
    var loop = [];
    runtime.caml_update_dummy
     (loop,
      [2,
       function(more){
        return more
                ? symbol$1
                  (symbol$1
                    (return$2(function(v, acc){return [0, v, acc];}), t),
                   loop)
                : return$2(0);
       }]);
    return loop;
   }
   function consume(t, arg, for_completion){
    var t$0 = t;
    for(;;)
     switch(t$0[0]){
       case 0:
        return caml_call1(die(_M_), 0);
       case 1:
        var
         parse = t$0[1][2],
         match = caml_call2(parse, arg, for_completion),
         update_env = match[2],
         parser = match[1];
        return [0, parser, 1, update_env];
       case 2:
        var f = t$0[1], t$1 = caml_call1(f, 1), t$0 = t$1; break;
       case 3:
        var packed = t$0[1];
        if(! packed) return [0, _N_, 1, function(_hH_){return _hH_;}];
        var
         rest = packed[2],
         t$2 = packed[1][1],
         match$0 = consume(t$2, arg, for_completion),
         update_env$0 = match$0[3],
         parse_flags = match$0[2],
         parser$0 = match$0[1],
         _hF_ = pack_for_completion(parser$0);
        return [0,
                [3, caml_call2(Base[222], _hF_, rest)],
                parse_flags,
                update_env$0];
       default:
        var t$3 = t$0[1], _hG_ = consume(t$3, arg, for_completion);
        return [0, _hG_[1], 0, _hG_[3]];
     }
   }
   function t2(t1, t2){
    var
     _hC_ = concat$0([0, t1[2], [0, t2[2], 0]]),
     _hD_ = t2[1],
     _hE_ = t1[1];
    return [0,
            symbol$1
             (symbol$1(return$2(function(a1, a2){return [0, a1, a2];}), _hE_),
              _hD_),
            _hC_];
   }
   function t3(t1, t2, t3){
    var
     _hy_ = concat$0([0, t1[2], [0, t2[2], [0, t3[2], 0]]]),
     _hz_ = t3[1],
     _hA_ = t2[1],
     _hB_ = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (return$2(function(a1, a2, a3){return [0, a1, a2, a3];}),
                  _hB_),
                _hA_),
              _hz_),
            _hy_];
   }
   function t4(t1, t2, t3, t4){
    var
     _ht_ = concat$0([0, t1[2], [0, t2[2], [0, t3[2], [0, t4[2], 0]]]]),
     _hu_ = t4[1],
     _hv_ = t3[1],
     _hw_ = t2[1],
     _hx_ = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (symbol$1
                   (return$2
                     (function(a1, a2, a3, a4){return [0, a1, a2, a3, a4];}),
                    _hx_),
                  _hw_),
                _hv_),
              _hu_),
            _ht_];
   }
   function normalize(str){
    var strlen = caml_ml_string_length(str);
    if(0 === strlen) caml_call1(Base[244], cst_Empty_anonymous_argument_n);
    var _hr_ = caml_call2(Base_String[109], 0, str);
    if(caml_call2(Base_String[50], _hr_, str))
     caml_call3(Command_Import[8], _O_, str, 0);
    var
     special_chars = caml_call2(Base_Set[32], [0, Base_Char[25]], _P_),
     _hs_ = caml_call1(Base_Set[9], special_chars),
     has_special_chars = caml_call2(Base_String[19], str, _hs_);
    return has_special_chars ? str : caml_call1(Base_String[71], str);
   }
   function symbol$2(name, arg_type){
    var name$0 = normalize(name);
    return [0, one(name$0, arg_type), [0, name$0]];
   }
   function map_anons(t, f){
    var _hq_ = t[2];
    return [0, symbol_map$0(t[1], f), _hq_];
   }
   function maybe(t){
    var t$0 = t[2], _hp_ = typeof t$0 === "number" ? 0 : [2, t$0], t$1 = t[1];
    return [0,
            [2,
             function(more){
              return more
                      ? symbol$1
                        (return_with_arg$0(function(a){return [0, a];}), t$1)
                      : return$2(0);
             }],
            _hp_];
   }
   function maybe_with_default(default$0, t){
    var t$0 = maybe(t), _hn_ = t$0[2];
    function _ho_(v){return caml_call2(Base_Option[30], v, default$0);}
    return [0, symbol_map$0(t$0[1], _ho_), _hn_];
   }
   function sequence$0(t){
    var t$0 = t[2];
    if(typeof t$0 === "number")
     var _hm_ = 0;
    else{
     if(1 - is_fixed_arity(t$0)){
      var _hl_ = caml_call1(usage, t$0);
      caml_call3(Command_Import[8], _G_, _hl_, 0);
     }
     var _hm_ = [1, t$0];
    }
    return [0, sequence(t[1]), _hm_];
   }
   function non_empty_sequence_as_pair(t){return t2(t, sequence$0(t));}
   function non_empty_sequence_as_list(t){
    var t$0 = non_empty_sequence_as_pair(t), _hj_ = t$0[2];
    function _hk_(param){var xs = param[2], x = param[1]; return [0, x, xs];}
    return [0, symbol_map$0(t$0[1], _hk_), _hj_];
   }
   function ad_hoc(usage_arg){
    return [0,
            sequence(one(cst_WILL_NEVER_BE_PRINTED, include$0[1])),
            [4, usage_arg]];
   }
   function compare(a_025, b_026){
    var a_025$0 = a_025, b_026$0 = b_026;
    for(;;){
     if(a_025$0 === b_026$0) return 0;
     if(typeof a_025$0 === "number")
      return typeof b_026$0 === "number" ? 0 : -1;
     if(0 === a_025$0[0]){
      var a_029 = a_025$0[2], a_027 = a_025$0[1];
      if(typeof b_026$0 !== "number"){
       if(0 !== b_026$0[0]) return -1;
       var
        b_030 = b_026$0[2],
        b_028 = b_026$0[1],
        n = caml_call2(Base[195], a_027, b_028);
       if(0 !== n) return n;
       var a_025$0 = a_029, b_026$0 = b_030;
       continue;
      }
     }
     else{
      var a_031 = a_025$0[1];
      if(typeof b_026$0 !== "number"){
       if(0 === b_026$0[0]) return 1;
       var b_032 = b_026$0[1];
       return caml_call2(Base[195], a_031, b_032);
      }
     }
     return 1;
    }
   }
   function of_list(args){
    var _hh_ = 0;
    function _hi_(arg, args){return [0, arg, args];}
    return caml_call3(Base_List[105], args, _hi_, _hh_);
   }
   function to_list(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){
     var xs = param[2], x = param[1];
     return [0, x, to_list(xs)];
    }
    var x$0 = param[1];
    return [0, x$0, 0];
   }
   function ends_in_complete(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 !== param$0[0]) return 1;
     var args = param$0[2], param$0 = args;
    }
   }
   function extend(t, extend, path){
    if(ends_in_complete(t)) return t;
    var
     _hd_ = caml_call1(parts, path),
     _he_ = caml_call1(Base_List[87], _hd_),
     path_list = caml_call2(Base_Option[30], _he_, 0),
     _hf_ = caml_call1(extend, path_list),
     _hg_ = to_list(t);
    return of_list(caml_call2(Base[222], _hg_, _hf_));
   }
   function normalize$0(key_type, flag_or_subcommand){
    function _g9_(c){return caml_call2(Base_Char[12], c, 95);}
    if(caml_call2(Base_String[19], flag_or_subcommand, _g9_)){
     var _g__ = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call4(Command_Import[8], _Q_, _g__, flag_or_subcommand, 0);
    }
    if(! key_type) return caml_call1(Base_String[72], flag_or_subcommand);
    if(caml_call2(Base_String[134], flag_or_subcommand, cst$5)){
     var
      _g$_ = 0,
      _ha_ =
        [0,
         [11,
          cst_invalid,
          [24,
           _S_,
           function(param, custom_printf_033){
            return caml_call1(Command_Shape[14][1][1], custom_printf_033);
           },
           _R_]],
         cst_invalid_Key_type_name_S];
     caml_call4(Command_Import[8], _ha_, key_type, flag_or_subcommand, _g$_);
    }
    if(caml_call2(Base_String[19], flag_or_subcommand, Base_Char[45])){
     var
      _hb_ = 0,
      _hc_ =
        [0,
         [11,
          cst_invalid$0,
          [24,
           _U_,
           function(param, custom_printf_034){
            return caml_call1(Command_Shape[14][1][1], custom_printf_034);
           },
           _T_]],
         cst_invalid_Key_type_name_cont];
     caml_call4(Command_Import[8], _hc_, key_type, flag_or_subcommand, _hb_);
    }
    return caml_call2(Base_String[97], flag_or_subcommand, cst$6)
            ? flag_or_subcommand
            : caml_call2(Base[241], cst$7, flag_or_subcommand);
   }
   var lookup_expand = Command_Shape[14][4];
   function subcommand_cmp_fst(param, _g8_){
    var c = _g8_[1], a = param[1];
    return caml_call2(help_screen_compare, a, c);
   }
   function shape(t){
    function _g0_(a, b){return caml_call2(Base_String[51], a[1], b[1]);}
    var
     _g1_ = caml_call1(Base_Map[74], t[3]),
     _g2_ = caml_call2(Base_List[53], _g1_, align),
     _g3_ = caml_call2(Base_List[83], _g2_, _g0_),
     _g4_ = caml_call1(Command_Shape[4][1], _g3_),
     _g5_ = [1, t[5]];
    function _g6_(readme){return caml_call1(readme, 0);}
    var _g7_ = caml_call2(Base_Option[24], t[2], _g6_);
    return [0, t[1], _g7_, _g5_, _g4_];
   }
   var
    path_key = key_create(cst_path),
    args_key = key_create(cst_args),
    help_key = key_create(cst_help$0),
    normalized_path = [0, 0],
    normalized_args = [0, 0];
   function get_flag_and_action(t, prefix){
    var map = t[3], key_type = 1;
    function _gV_(flag){
     var
      name_matching = flag[8],
      aliases_excluded_from_help = flag[3],
      aliases = flag[2],
      name = flag[1],
      data = [0, flag, name_matching],
      aliases$0 = caml_call2(Base[222], aliases_excluded_from_help, aliases);
     function _gZ_(alias){return [0, alias, data];}
     return [0, [0, name, data], caml_call2(Base_List[53], aliases$0, _gZ_)];
    }
    var
     _gW_ = caml_call1(Base_Map[74], map),
     alist = caml_call2(Base_List[14], _gW_, _gV_);
    function _gX_(param, _gY_){
     var s2 = _gY_[1], s1 = param[1];
     return caml_call2(Base_String[51], s1, s2);
    }
    var match = caml_call2(Base_List[128], alist, _gX_);
    if(match)
     var
      flag = match[1][1],
      match$0 = caml_call3(Command_Import[8], _V_, flag, 0);
    else
     var match$0 = caml_call3(lookup_expand, alist, prefix, key_type);
    if(0 === match$0[0]){
     var match$1 = match$0[1], flag$0 = match$1[2], flag_name = match$1[1];
     return [0, flag_name, flag$0[4]];
    }
    var msg = match$0[1];
    return caml_call2(die(_X_), msg, 0);
   }
   function run_exn(exn, for_completion, path, verbose_on_parse_error){
    if(exn[1] === Failed_to_parse_command_line && for_completion)
     return exit(0);
    if(exn[1] === Exit_called){var status = exn[2]; return exit(status);}
    if(exn[1] === Failed_to_parse_command_line)
     var msg = exn[2], exn_str = msg;
    else
     var
      _gU_ = caml_call1(Base[117], exn),
      exn_str = caml_call2(Base[85][14], 0, _gU_);
    var verbose = caml_call2(Base_Option[30], verbose_on_parse_error, 1);
    if(verbose)
     var
      _gQ_ = to_string(path),
      _gR_ = caml_call2(Base[241], _gQ_, cst_help$1),
      _gS_ =
        [0,
         cst_For_usage_information_run,
         [0, caml_call2(Base[241], cst$11, _gR_), 0]],
      _gN_ = function(line){return caml_call2(Base[241], cst$8, line);},
      _gO_ = caml_call2(Base_String[102], exn_str, 10),
      _gP_ = caml_call2(Base_List[53], _gO_, _gN_),
      _gT_ =
        [0,
         cst_Error_parsing_command_line,
         [0, caml_call2(Base_String[68], _W_, _gP_), _gS_]],
      error_msg = caml_call2(Base_String[68], _Z_, _gT_);
    else
     var error_msg = exn_str;
    caml_call1(Command_Import[6], error_msg);
    return exit(1);
   }
   function run
   (t,
    env,
    when_parsing_succeeds,
    path,
    cmdline,
    verbose_on_parse_error,
    help_text,
    on_failure){
    var
     for_completion = ends_in_complete(cmdline),
     _gw_ = to_list(cmdline),
     env$0 =
       caml_call3
        (set,
         caml_call3(set, caml_call3(set, env, path_key, path), args_key, _gw_),
         help_key,
         help_text);
    function _gx_(param){
     var parser$1 = caml_call1(t[4], 0);
     a:
     {
      b:
      {
       var
        env$1 = env$0,
        parser = parser$1,
        cmdline$0 = cmdline,
        parse_flags = 1,
        normalized_args$0 = 0;
       for(;;){
        if(typeof cmdline$0 === "number") break b;
        if(0 !== cmdline$0[0]) break;
        var args = cmdline$0[2], arg$1 = cmdline$0[1];
        c:
        if(parse_flags && caml_string_notequal(arg$1, cst$24)){
         if
          (!
           caml_string_notequal(arg$1, "-anon")
           && typeof args !== "number" && 0 === args[0]){
          var
           args$0 = args[2],
           arg$3 = args[1],
           arg_is_flag = 0,
           cmdline$1 = args$0,
           arg$2 = arg$3;
          break c;
         }
         var
          arg_is_flag = caml_call2(Base_String[97], arg$1, cst$9),
          cmdline$1 = args,
          arg$2 = arg$1;
        }
        else
         var arg_is_flag = 0, cmdline$1 = args, arg$2 = arg$1;
        if(arg_is_flag){
         var
          match = get_flag_and_action(t, arg$2),
          action = match[2],
          flag = match[1];
         switch(action[0]){
           case 0:
            var _gI_ = [0, flag, 0]; break;
           case 1:
            var _gI_ = [0, flag, 0]; break;
           case 2:
            if(typeof cmdline$1 !== "number" && 0 === cmdline$1[0]){
             var arg = cmdline$1[1], _gI_ = [0, flag, [0, arg, 0]];
             break;
            }
            var _gI_ = 0;
            break;
           default: var _gI_ = [0, flag, to_list(cmdline$1)];
         }
         var
          normalized_args$1 = [0, _gI_, normalized_args$0],
          match$0 = get_flag_and_action(t, arg$2),
          action$0 = match$0[2],
          flag$0 = match$0[1];
         switch(action$0[0]){
           case 0:
            var
             f$1 = action$0[1],
             match$1 = [0, caml_call1(f$1, env$1), cmdline$1];
            break;
           case 1:
            var info = action$0[1], completing = ends_in_complete(cmdline$1);
            if(completing)
             var match$1 = [0, env$1, cmdline$1];
            else{
             var _gz_ = caml_call1(info, env$1);
             caml_call1(Command_Import[5], _gz_);
             var match$1 = exit(0);
            }
            break;
           case 2:
            var comp = action$0[2], f$2 = action$0[1];
            if(typeof cmdline$1 === "number")
             var match$1 = caml_call2(die(_Y_), flag$0, 0);
            else if(0 === cmdline$1[0]){
             var rest = cmdline$1[2], arg$0 = cmdline$1[1];
             try{var _gA_ = caml_call2(f$2, env$1, arg$0), env = _gA_;}
             catch(e$0){
              var e = caml_wrap_exception(e$0);
              if(e[1] !== Failed_to_parse_command_line)
               throw caml_maybe_attach_backtrace(e, 0);
              if(! ends_in_complete(rest))
               throw caml_maybe_attach_backtrace(e, 0);
              var env = env$1;
             }
             var match$1 = [0, env, rest];
            }
            else
             var
              part = cmdline$1[1],
              _gB_ = run_and_exit(comp, env$1, part),
              match$1 = caml_call1(Base_Nothing[4], _gB_);
            break;
           default:
            var
             comp$0 = action$0[2],
             f$3 = action$0[1],
             arg_list = to_list(cmdline$1);
            if(ends_in_complete(cmdline$1)){
             var _gC_ = run_and_exit(comp$0, env$1, arg_list);
             caml_call1(Base_Nothing[4], _gC_);
            }
            var match$1 = [0, caml_call2(f$3, env$1, arg_list), 0];
         }
         var
          cmdline$2 = match$1[2],
          env$2 = match$1[1],
          env$1 = env$2,
          cmdline$0 = cmdline$2,
          normalized_args$0 = normalized_args$1;
        }
        else
         var
          match$2 = consume(parser, arg$2, for_completion),
          update_env = match$2[3],
          parse_flags2 = match$2[2],
          parser$0 = match$2[1],
          env$3 = caml_call1(update_env, env$1),
          parse_flags$0 = parse_flags ? parse_flags2 : parse_flags,
          normalized_args$2 = [0, [0, arg$2, 0], normalized_args$0],
          env$1 = env$3,
          parser = parser$0,
          cmdline$0 = cmdline$1,
          parse_flags = parse_flags$0,
          normalized_args$0 = normalized_args$2;
       }
       var part$0 = cmdline$0[1];
       if(parse_flags && caml_call2(Base_String[97], part$0, cst$10)){
        var
         _gJ_ =
           function(name){
            var _gM_ = caml_call2(Base_String[97], name, part$0);
            return _gM_ ? caml_call1(Command_Import[5], name) : _gM_;
           },
         _gK_ = caml_call1(Base_Map[73], t[3]);
        caml_call2(Base_List[19], _gK_, _gJ_);
        var match$3 = exit(0);
        break a;
       }
       var t$3 = parser;
       for(;;){
        switch(t$3[0]){
          case 0:
           var _gL_ = exit(0); break;
          case 1:
           var
            complete = t$3[1][3],
            _gL_ = run_and_exit(complete, env$1, part$0);
           break;
          case 2:
           var f$0 = t$3[1], t$4 = caml_call1(f$0, 1), t$3 = t$4; continue;
          case 3:
           var t$5 = t$3[1];
           if(t$5){var t$6 = t$5[1][1], t$3 = t$6; continue;}
           var _gL_ = exit(0);
           break;
          default: var t$7 = t$3[1], t$3 = t$7; continue;
        }
        var match$3 = caml_call1(Base_Nothing[4], _gL_);
        break a;
       }
      }
      var
       _gD_ = function(flag){return caml_call1(flag[7], env$1);},
       _gE_ = caml_call1(Base_Map[74], t[3]);
      caml_call2(Base_List[19], _gE_, _gD_);
      var
       _gF_ = caml_call1(Base_List[63], normalized_args$0),
       t$0 = parser,
       _gG_ = caml_call1(Base_List[11], _gF_);
      for(;;){
       switch(t$0[0]){
         case 0:
          var a = t$0[1], _gH_ = caml_call1(a, env$1); break;
         case 1:
          throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
         case 2:
          var f = t$0[1], t$1 = caml_call1(f, 0), t$0 = t$1; continue;
         case 3:
          var _gH_ = caml_call1(Base[244], cst_BUG_asked_for_final_value_);
          break;
         default: var t$2 = t$0[1], t$0 = t$2; continue;
       }
       var
        match$3 =
          [0,
           [0,
            -1061020774,
            caml_call2(mem, env$1, key_internal_validate_parsing)],
           _gH_,
           _gG_];
       break;
      }
     }
     var
      parsed_normalized_args = match$3[3],
      main = match$3[2],
      is_using_validate_parsing = match$3[1];
     normalized_path[1] = [0, path];
     normalized_args[1] = [0, parsed_normalized_args];
     return [0, is_using_validate_parsing, caml_call1(main, 15369289)];
    }
    var match = caml_call1(Base_Result[41], _gx_);
    if(0 !== match[0]){
     var exn = match[1];
     return caml_call4
             (on_failure, exn, for_completion, path, verbose_on_parse_error);
    }
    var _gy_ = match[1];
    if(_gy_[1][2]){caml_call1(when_parsing_succeeds, 0); return exit(0);}
    var thunk = _gy_[2];
    caml_call1(when_parsing_succeeds, 0);
    return caml_call1(thunk, -903816947);
   }
   function wrap_value(v, param){return return_no_arg(v);}
   function apply$1(f, x){
    function _gp_(param){
     var _gu_ = caml_call1(f[3], 0), _gv_ = caml_call1(x[3], 0);
     return caml_call2(Base[222], _gv_, _gu_);
    }
    function _gq_(param){
     var _gt_ = [0, caml_call1(x[2], 0), 0];
     return concat$0([0, caml_call1(f[2], 0), _gt_]);
    }
    return [0,
            function(param){
             var _gr_ = caml_call1(x[1], 0), _gs_ = caml_call1(f[1], 0);
             return symbol$0
                     (symbol$0
                       (return$1
                         (function(f, x, param){
                           var
                            f_outcome = caml_call1(f, 0),
                            x_outcome = caml_call1(x, 0);
                           return caml_call2(apply$0, f_outcome, x_outcome);
                          }),
                        _gs_),
                      _gr_);
            },
            _gq_,
            _gp_];
   }
   function ___(param){return 0;}
   function _$_(param){return zero;}
   var
    empty_spec =
      [0,
       function(param){
        return return$1
                (function(param){
                  return return_no_arg(function(_go_){return _go_;});
                 });
       },
       _$_,
       ___];
   function map_outcome(x, f){
    var _gl_ = x[3], _gm_ = x[2];
    return [0,
            function(param){
             function _gn_(x, param){
              var x_outcome = caml_call1(x, 0);
              return caml_call1(f, x_outcome);
             }
             return symbol_map(caml_call1(x[1], 0), _gn_);
            },
            _gm_,
            _gl_];
   }
   function map$2(x, f){
    return map_outcome(x, function(_gk_){return caml_call2(map$0, _gk_, f);});
   }
   function lookup(key){
    function _gi_(param){return 0;}
    function _gj_(param){return zero;}
    return [0,
            function(param){
             return symbol_map
                     (from_env
                       (function(env){return caml_call2(find_exn, env, key);}),
                      wrap_value);
            },
            _gj_,
            _gi_];
   }
   var
    path = lookup(path_key),
    args = lookup(args_key),
    help$0 = lookup(help_key);
   function _aa_(param){return 0;}
   function _ab_(param){return zero;}
   var
    env =
      [0,
       function(param){
        return symbol_map(from_env(function(env){return env;}), wrap_value);
       },
       _ab_,
       _aa_],
    string$0 = include$0[1],
    int$1 = include$0[2],
    char$1 = include$0[3],
    float$1 = include$0[4],
    bool$0 = include$0[5],
    sexp$0 = include$0[6],
    sexp_conv$0 = include$0[7];
   function anon(spec){
    caml_call1(invariant, spec[2]);
    function _gf_(param){return 0;}
    function _gg_(param){return spec[2];}
    return [0,
            function(param){
             function _gh_(outcome, param){return outcome;}
             return symbol_map(spec[1], _gh_);
            },
            _gg_,
            _gf_];
   }
   function escape_anon(final_anon){
    var t = t2(final_anon, sequence$0(symbol$2(cst_ARG, string$0)));
    return anon([0, [4, t[1]], t[2]]);
   }
   function flag(opt, full_flag_required, name){
    return function(mode){
     return function(doc){
      var aliases_excluded_from_help = 0;
      if(opt) var sth = opt[1], aliases = sth; else var aliases = 0;
      function normalize(flag){return normalize$0(1, flag);}
      var
       name$0 = normalize(name),
       aliases$0 = caml_call2(Base_List[53], aliases, normalize),
       match = caml_call1(mode, name$0),
       extra_doc = match[4],
       num_occurrences = match[3],
       read = match[2],
       action = match[1],
       check_available =
         num_occurrences[1]
          ? function(env){caml_call1(read, env); return 0;}
          : function(_ge_){return 0;},
       name_matching =
         caml_call1(Base_Option[53], full_flag_required)
          ? -461087063
          : -481604174;
      function _f9_(param){
       var _gb_ = caml_obj_tag(extra_doc);
       a:
       {
        var _ga_ = 0;
        if(250 === _gb_)
         var match = extra_doc[1];
        else{
         if(246 !== _gb_ && 244 !== _gb_){var match = extra_doc; break a;}
         var match = caml_call1(CamlinternalLazy[2], extra_doc);
        }
       }
       if(match)
        var
         extra_doc$0 = match[1],
         _gc_ =
           [0,
            doc,
            [0,
             caml_call1(Ppx_string_runtime[1][2], cst$12),
             [0, extra_doc$0, 0]]],
         _gd_ = caml_call1(Ppx_string_runtime[1][4], _gc_);
       else
        var _gd_ = doc;
       return [0,
               [0,
                name$0,
                aliases$0,
                aliases_excluded_from_help,
                action,
                _gd_,
                num_occurrences,
                check_available,
                name_matching],
               _ga_];
      }
      function _f__(param){return zero;}
      return [0,
              function(param){
               function _f$_(v, param){return v;}
               return symbol_map
                       (from_env(function(env){return caml_call1(read, env);}),
                        _f$_);
              },
              _f__,
              _f9_];};};
   }
   function flag_optional_with_default_doc
   (aliases,
    full_flag_required,
    name,
    arg_type,
    sexp_of_default,
    default$0,
    doc){
    var default_sexp = caml_call1(sexp_of_default, default$0);
    a:
    {
     if
      (0 === default_sexp[0]
       && ! caml_string_notequal(default_sexp[1], cst$29)){var doc$0 = doc; break a;}
     var
      _f6_ =
        [0,
         [2,
          0,
          [11,
           cst_default,
           [24,
            _ad_,
            function(param, custom_printf_035){
             return caml_call1(Base[85][16], custom_printf_035);
            },
            _ac_]]],
         cst_s_default_Sexp],
      doc$0 = caml_call3(Command_Import[7], _f6_, doc, default_sexp);
    }
    function _f7_(_f8_){
     return optional_with_default(default$0, arg_type, _f8_);
    }
    return caml_call1(flag(aliases, full_flag_required, name)(_f7_), doc$0);
   }
   function return$3(v){
    function _f4_(param){return 0;}
    function _f5_(param){return zero;}
    return [0,
            function(param){
             return return$1(function(param){return return_no_arg(v);});
            },
            _f5_,
            _f4_];
   }
   function optional_to_required(t){
    var _f1_ = t[3], _f2_ = t[2];
    return [0,
            function(param){
             function _f3_(f, param){
              var outcome = caml_call1(f, 0);
              return introduce_missing_required_fla
                      (caml_call2
                        (map$0,
                         outcome,
                         function(param){
                          if(! param)
                           return [1,
                                   [0,
                                    696341824,
                                    caml_call1(Base_Error[14], cst_optional_to_required_got_a)]];
                          var v = param[1];
                          return [0, v];
                         }));
             }
             return symbol_map(caml_call1(t[1], 0), _f3_);
            },
            _f2_,
            _f1_];
   }
   var
    map$3 = [0, -198771759, map$2],
    include$1 = caml_call1(Base_Applicative[7], [0, return$3, apply$1, map$3]),
    return$4 = include$1[1],
    map$4 = include$1[2],
    both = include$1[3],
    symbol$3 = include$1[4],
    symbol$4 = include$1[5],
    symbol$5 = include$1[6],
    symbol_map$1 = include$1[7],
    apply$2 = include$1[8],
    map2 = include$1[9],
    map3 = include$1[10],
    all = include$1[11],
    all_unit = include$1[12],
    Applicative_infix = include$1[13];
   function arg_names(t){
    var
     flags = create$0(caml_call1(t[3], 0)),
     flag_names = caml_call1(Base_Map[73], flags),
     anon_names = names(caml_call1(t[2], 0));
    return caml_call1(Base_List[11], [0, flag_names, [0, anon_names, 0]]);
   }
   function compare$0(a_036, b_037){
    if(a_036 === b_037) return 0;
    var _fV_ = b_037[1], _fW_ = a_036[1];
    function _fX_(a_038, b_039){return caml_call2(Base[195], a_038, b_039);}
    var n = caml_call3(Base[159], _fX_, _fW_, _fV_);
    if(0 !== n) return n;
    var _fY_ = b_037[2], _fZ_ = a_036[2];
    function _f0_(a_040, b_041){return caml_call2(Base[195], a_040, b_041);}
    return caml_call3(Base[159], _f0_, _fZ_, _fY_);
   }
   function sexp_of_t(t){
    var x_042 = t[1];
    return caml_call2(Base[165], Base[202], x_042);
   }
   var
    T = [0, compare$0, sexp_of_t],
    sexp_of_t$0 = T[2],
    include$2 = caml_call1(Base_Comparator[7], T),
    comparator = include$2[1];
   function create_exn(t){
    var flags = create$0(caml_call1(t[3], 0));
    function _fP_(param){
     var flag = param[2], name = param[1];
     return flag[6][1] ? [0, name] : 0;
    }
    var
     _fQ_ = caml_call2(Base_Map[75], 0, flags),
     required_args = caml_call2(Base_List[13], _fQ_, _fP_),
     names = arg_names(t);
    function _fR_(s){return caml_call4(Base_String[70], 0, 0, s, 44);}
    var names_with_commas = caml_call2(Base_List[12], names, _fR_);
    if(1 - caml_call1(Base_List[18], names_with_commas)){
     var
      _fS_ = function(x_043){return caml_call2(Base[165], Base[202], x_043);},
      _fT_ =
        caml_call5
         (Base_Error[19],
          _ae_,
          0,
          cst_For_simplicity_Command_Spe,
          names_with_commas,
          _fS_);
     caml_call1(Base_Error[31], _fT_);
    }
    if(names) return [0, names, required_args];
    var
     _fU_ = caml_call1(Sexplib0_Sexp_conv[7], cst_choose_one_expects_choices);
    return caml_call1(Base[246], _fU_);
   }
   function to_string$0(t){
    return t[2]
            ? caml_call2(Base_String[68], _af_, t[2])
            : caml_call2(Base_String[68], _ag_, t[1]);
   }
   function list_to_string(ts){
    var _fO_ = caml_call2(Base_List[53], ts, to_string$0);
    return caml_call2(Base_String[68], _ai_, _fO_);
   }
   var If_nothing_chosen = [0];
   function choose_one_non_optional(opt, ts, if_nothing_chosen){
    if(opt) var sth = opt[1], new_behavior = sth; else var new_behavior = 1;
    function _fb_(t){
     if(new_behavior)
      var
       name_of_the_group = create_exn(t),
       _fA_ =
         function(param){
          function _fD_(flag_internal){
           var
            except = flag_internal[1],
            _fG_ = flag_internal[8],
            _fH_ = flag_internal[7],
            _fI_ = [0, 0, flag_internal[6][2]],
            _fJ_ = flag_internal[5],
            _fK_ = flag_internal[4],
            _fL_ = flag_internal[3],
            _fM_ = flag_internal[2];
           function _fF_(x){
            return 1 - caml_call2(Base_String[134], except, x);
           }
           var
            l = caml_call2(Base_List[12], name_of_the_group[2], _fF_),
            match = l ? [0, caml_call2(Base_String[68], _ah_, l)] : 0;
           if(match)
            var
             group = match[1],
             _fN_ = caml_call2(Command_Import[7], _aj_, group);
           else
            var _fN_ = cst$13;
           return [0,
                   except,
                   _fM_,
                   _fL_,
                   _fK_,
                   caml_call3(Command_Import[7], _ak_, _fJ_, _fN_),
                   _fI_,
                   _fH_,
                   _fG_];
          }
          var _fE_ = caml_call1(t[3], 0);
          return caml_call2(Base_List[53], _fE_, _fD_);
         },
       _fB_ =
         function(param){
          var anon = caml_call1(t[2], 0);
          if(typeof anon === "number") return 0;
          switch(anon[0]){
            case 1:
             var t$0 = anon[1]; return [1, t$0];
            case 2:
             var t$1 = anon[1]; return [2, t$1];
            default: return [2, anon];
          }
         },
       _fC_ = [0, t[1], _fB_, _fA_];
     else
      var _fC_ = t;
     return [0, create_exn(t), _fC_];
    }
    var
     _fc_ = caml_call2(Base_List[53], ts, _fb_),
     match = caml_call2(Base_Map[8], [0, comparator], _fc_);
    if(17724 <= match[1]){
     var
      ts$0 = match[2],
      _fd_ =
        function(value_list){
         var arg_counter = caml_call1(Base_List[45], value_list);
         function more_than_one_error(passed){
          var
           _fx_ = 0,
           _fy_ = caml_call2(Base_List[53], passed, Base[242]),
           _fz_ = 0;
          return caml_call2
                  (die
                    ([0,
                      [11,
                       cst_Cannot_pass_more_than_one_$0,
                       [24,
                        _al_,
                        function(param, custom_printf_044){
                         return list_to_string(custom_printf_044);
                        },
                        _fz_]],
                      cst_Cannot_pass_more_than_one_]),
                   _fy_,
                   _fx_);
         }
         function _fn_(param){
          var match = param[2], name = param[1];
          if(0 === match[0]){
           var value = match[1];
           return [0, [0, name, value]];
          }
          var err = match[1];
          return [1, [0, name, err]];
         }
         var
          match = caml_call2(Base_List[16], value_list, _fn_),
          error_list = match[2],
          success_list = match[1];
         if(success_list){
          var _fo_ = success_list[1];
          if(success_list[2]) return more_than_one_error(success_list);
          var value = _fo_[2];
          if(1 < arg_counter) return more_than_one_error(value_list);
          var
           _fp_ =
             typeof if_nothing_chosen === "number"
              ? if_nothing_chosen ? [0, value] : value
              : value;
          return [0, _fp_];
         }
         if(error_list && ! error_list[2]){
          var
           _ft_ = error_list[1],
           err = _ft_[2][2],
           name = _ft_[1],
           _fu_ = caml_call1(Base_Error[12], err),
           _fv_ = to_string$0(name),
           _fw_ = caml_call3(Command_Import[7], _ao_, _fv_, _fu_);
          return [1, [0, 696341824, caml_call1(Base_Error[14], _fw_)]];
         }
         if(typeof if_nothing_chosen !== "number"){
          var value$0 = if_nothing_chosen[1];
          return [0, value$0];
         }
         if(if_nothing_chosen) return _am_;
         var
          _fq_ = 0,
          _fr_ = caml_call1(Base_Map[73], ts$0),
          _fs_ = 0,
          fmt =
            [0,
             [11,
              cst_Must_pass_one_of_these,
              [24,
               _an_,
               function(param, custom_printf_045){
                return list_to_string(custom_printf_045);
               },
               _fs_]],
             cst_Must_pass_one_of_these_Cho];
         function _fm_(msg, param){
          return [1, [0, 696341824, caml_call1(Base_Error[14], msg)]];
         }
         return caml_call2
                 (caml_call2(Command_Import[9], _fm_, fmt), _fr_, _fq_);
        },
      _fe_ =
        function(name, t, acc){
         function _fk_(acc, param){
          var has_arg = param[2], value = param[1];
          return has_arg ? [0, [0, name, value], acc] : acc;
         }
         var _fi_ = t[3], _fj_ = t[2];
         return caml_call3
                 (map2,
                  acc,
                  [0,
                   function(param){
                    function _fl_(f, param){
                     var outcome = caml_call1(f, 0);
                     return [0, [0, outcome], outcome[2]];
                    }
                    return symbol_map(caml_call1(t[1], 0), _fl_);
                   },
                   _fj_,
                   _fi_],
                  _fk_);
        },
      _ff_ = caml_call1(return$4, 0),
      t = caml_call2(map$4, caml_call3(Base_Map[55], ts$0, _ff_, _fe_), _fd_),
      _e$_ = t[3],
      _fa_ = t[2];
     return [0,
             function(param){
              function _fh_(f, param){
               var outcome = caml_call1(f, 0);
               return introduce_missing_required_fla(outcome);
              }
              return symbol_map(caml_call1(t[1], 0), _fh_);
             },
             _fa_,
             _e$_];
    }
    var
     name = match[2],
     _fg_ =
       caml_call5
        (Base_Error[19],
         _ap_,
         0,
         cst_Command_Spec_choose_one_ca,
         name,
         sexp_of_t$0);
    return caml_call1(Base_Error[31], _fg_);
   }
   function choose_one(ts, if_nothing_chosen){
    function _e__(t){
     return map_outcome
             (t,
              function(param){
               var has_arg = param[2], result = param[1];
               if(0 !== result[0]) return [0, result, has_arg];
               var match = result[1];
               if(! match)
                return [0,
                        [1,
                         [0,
                          696341824,
                          caml_call1(Base_Error[14], cst_missing_required_flag)]],
                        0];
               var value = match[1];
               return [0, [0, value], 1];
              });
    }
    return choose_one_non_optional
            (_aq_, caml_call2(Base_List[53], ts, _e__), if_nothing_chosen);
   }
   function choose_one_non_optional$0(lst, if_nothing_chosen){
    return choose_one_non_optional(0, lst, if_nothing_chosen);
   }
   function and_arg_names(t){
    return caml_call2
            (map$4, t, function(value){return [0, value, arg_names(t)];});
   }
   function and_arg_name(t){
    var names = arg_names(t);
    if(names && ! names[2]){
     var name = names[1];
     return caml_call2(map$4, t, function(value){return [0, value, name];});
    }
    var
     _e8_ = [0, caml_call2(Base[165], Base[202], names), 0],
     _e9_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_and_arg_name_expects_exact),
         _e8_]];
    return caml_call1(Base[246], _e9_);
   }
   function parse$1(param, args){
    var
     flags = param[3],
     f = param[1],
     cmdline = of_list(args),
     result = [0, 0];
    function _eZ_(exn, param, _e7_, _e6_){
     result[1] = [0, [1, caml_call2(Base_Error[27], 0, exn)]];
     return 0;
    }
    function _e0_(_e5_){return _e5_;}
    var _e1_ = Univ_map[4];
    function _e2_(param){
     function _e3_(params, param, _e4_){
      var outcome = caml_call1(params, 0), match = outcome[1];
      if(0 === match[0]){var x = match[1]; result[1] = [0, [0, x]]; return 0;}
      var err = match[1][2];
      result[1] = [0, [1, err]];
      return 0;
     }
     return symbol_map(caml_call1(f, 0), _e3_);
    }
    run
     ([0, cst$14, 0, create$0(caml_call1(flags, 0)), _e2_, zero],
      _e1_,
      _e0_,
      empty$0,
      cmdline,
      _ar_,
      cst_No_help_for_parsing,
      _eZ_);
    return caml_call4(Base_Option[31], _as_, 0, 0, result[1]);
   }
   function symbol$6(t1, t2){
    return caml_call3
            (map2,
             t1,
             t2,
             function(f1, f2, x){return caml_call1(f2, caml_call1(f1, x));});
   }
   function symbol$7(t1, p2){
    return caml_call3
            (map2,
             t1,
             p2,
             function(f1, p2, x){return caml_call1(caml_call1(f1, x), p2);});
   }
   function symbol$8(t1, p2){
    return caml_call3
            (map2,
             p2,
             t1,
             function(p2, f1, x){return caml_call1(f1, caml_call1(x, p2));});
   }
   function step(f){return caml_call1(return$4, f);}
   function const$0(x){return caml_call1(return$4, x);}
   function wrap(f, t){
    return caml_call2
            (map$4, t, function(run, main){return caml_call2(f, run, main);});
   }
   function of_param(p){
    return caml_call2(map$4, p, function(f, k){return caml_call1(k, f);});
   }
   function to_param(t, m){
    return caml_call2(map$4, t, function(f){return caml_call1(f, m);});
   }
   var
    string$1 = include$0[1],
    int$2 = include$0[2],
    char$2 = include$0[3],
    float$2 = include$0[4],
    bool$1 = include$0[5],
    sexp$1 = include$0[6],
    sexp_conv$1 = include$0[7],
    map$5 = [0, -198771759, map$4],
    include$3 = caml_call1(Base_Applicative[7], [0, return$4, apply$2, map$5]),
    return$5 = include$3[1],
    map$6 = include$3[2],
    both$0 = include$3[3],
    symbol$9 = include$3[4],
    symbol$10 = include$3[5],
    symbol$11 = include$3[6],
    symbol_map$2 = include$3[7],
    apply$3 = include$3[8],
    map2$0 = include$3[9],
    map3$0 = include$3[10],
    all$0 = include$3[11],
    all_unit$0 = include$3[12],
    Applicative_infix$0 = include$3[13];
   function flags_of_args_exn(args){
    function _eP_(acc, param){
     var doc = param[3], spec = param[2], name = param[1];
     function gen(f, flag_type){
      var _eY_ = caml_call1(flag(0, 0, name)(flag_type), doc);
      return symbol$7(step(function(m, x){caml_call1(f, x); return m;}), _eY_);
     }
     function call(f, arg_type){
      function _eW_(_eX_){return optional(arg_type, _eX_);}
      return gen(function(x){return caml_call2(Base_Option[37], x, f);}, _eW_);
     }
     function set(r, arg_type){
      return call(function(x){r[1] = x; return 0;}, arg_type);
     }
     function set_bool(r, b){
      return gen
              (function(passed){
                var _eV_ = passed ? (r[1] = b, 0) : passed;
                return _eV_;
               },
               no_arg);
     }
     switch(spec[0]){
       case 0:
        var
         f = spec[1],
         _eQ_ =
           gen
            (function(passed){return passed ? caml_call1(f, 0) : passed;},
             no_arg);
        break;
       case 1:
        var f$0 = spec[1], _eQ_ = call(f$0, bool$1); break;
       case 2:
        var r = spec[1], _eQ_ = set_bool(r, 1); break;
       case 3:
        var r$0 = spec[1], _eQ_ = set_bool(r$0, 0); break;
       case 4:
        var f$1 = spec[1], _eQ_ = call(f$1, string$1); break;
       case 5:
        var r$1 = spec[1], _eQ_ = set(r$1, string$1); break;
       case 6:
        var f$2 = spec[1], _eQ_ = call(f$2, int$2); break;
       case 7:
        var r$2 = spec[1], _eQ_ = set(r$2, int$2); break;
       case 8:
        var f$3 = spec[1], _eQ_ = call(f$3, float$2); break;
       case 9:
        var r$3 = spec[1], _eQ_ = set(r$3, float$2); break;
       case 10:
        var _eQ_ = caml_call1(Base[244], cst_Arg_Tuple_is_not_supported);
        break;
       case 11:
        var
         f$4 = spec[2],
         syms = spec[1],
         _eR_ = function(sym){return [0, sym, sym];},
         arg_type =
           of_alist_exn
            (0, 0, _at_, 0, 0, caml_call2(Base_List[53], syms, _eR_)),
         _eQ_ = call(f$4, arg_type);
        break;
       case 12:
        var
         f$5 = spec[1],
         _eQ_ =
           gen
            (function(x){
              var _eS_ = Base_List[19];
              function _eT_(_eU_){return caml_call2(_eS_, _eU_, f$5);}
              return caml_call2(Base_Option[37], x, _eT_);
             },
             escape);
        break;
       case 13:
        var _eQ_ = caml_call1(Base[244], cst_Arg_Rest_all_is_not_suppor);
        break;
       default:
        var _eQ_ = caml_call1(Base[244], cst_Arg_Expand_is_not_supporte);
     }
     return symbol$6(acc, _eQ_);
    }
    return caml_call3(Base_List[20], args, empty_spec, _eP_);
   }
   var Deprecated = [0, no_arg$0, escape$0, ad_hoc];
   function shape$0(subcommand_to_shape, t){
    var _eJ_ = Base_List[137][9];
    function _eK_(_eO_){return caml_call2(_eJ_, _eO_, subcommand_to_shape);}
    var _eL_ = caml_call2(Base_Lazy[15], t[3], _eK_);
    function _eM_(readme){return caml_call1(readme, 0);}
    var _eN_ = caml_call2(Base_Option[24], t[2], _eM_);
    return [0, t[1], _eN_, _eL_];
   }
   var abs_path = Command_Shape[14][2], comp_cword = 2;
   function shape$1(t){
    var _eE_ = t[5], _eF_ = t[4], _eG_ = t[3];
    function _eH_(readme){return caml_call1(readme, 0);}
    var _eI_ = caml_call2(Base_Option[24], t[2], _eH_);
    return [0, t[1], _eI_, _eG_, _eF_, _eE_];
   }
   function sexpable_shape(param){
    switch(param[0]){
      case 0:
       var base = param[1]; return [0, shape(base)];
      case 1:
       var group = param[1]; return [1, shape$0(sexpable_shape, group)];
      case 2:
       var exec = param[1]; return [2, shape$1(exec)];
      default:
       var thunk = param[1];
       return [3, caml_call2(Base_Lazy[15], thunk, sexpable_shape)];
    }
   }
   function extend_exn(mem, add, map, key_type, key, data){
    if(caml_call2(mem, map, key)){
     var _eD_ = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call4(Command_Import[8], _au_, _eD_, key, 0);
    }
    return caml_call3(add, map, key, data);
   }
   function extend_map_exn(map, key_type, key, data){
    return extend_exn(Base_Map[45], Base_Map[34], map, key_type, key, data);
   }
   function extend_alist_exn(alist, key_type, key, data){
    function _eC_(alist, key, data){
     return caml_call4(Base_List[137][4], alist, Base_String[134], key, data);
    }
    return extend_exn
            (function(alist, key){
              return caml_call3
                      (Base_List[137][7], alist, Base_String[134], key);
             },
             _eC_,
             alist,
             key_type,
             key,
             data);
   }
   function add
   (base, name, aliases, aliases_excluded_from_help, text, text_summary){
    var flags = base[3], _ey_ = -481604174;
    function _ez_(_eB_){return 0;}
    var
     _eA_ = caml_call2(Command_Import[7], _av_, text_summary),
     flags$0 =
       extend_map_exn
        (flags,
         1,
         name,
         [0,
          name,
          aliases,
          aliases_excluded_from_help,
          [1, function(env){return caml_call1(text, env);}],
          _eA_,
          at_most_once,
          _ez_,
          _ey_]);
    return [0, base[1], base[2], flags$0, base[4], base[5]];
   }
   function basic(summary, readme, param){
    var
     flags = param[3],
     usage = param[2],
     f = param[1],
     flags$0 = caml_call1(flags, 0),
     usage$0 = caml_call1(usage, 0);
    function anons(param){
     function _ew_(params, param){
      var outcome = caml_call1(params, 0), match = outcome[1];
      if(0 === match[0]){
       var thunk = match[1];
       return function(param){return caml_call1(thunk, 0);};
      }
      var err = match[1][2], _ex_ = caml_call1(Base_Error[12], err);
      return caml_call2(die(_aw_), _ex_, 0);
     }
     return symbol_map(caml_call1(f, 0), _ew_);
    }
    var
     flags$1 = create$0(flags$0),
     base = [0, summary, readme, flags$1, anons, usage$0],
     base$0 =
       add
        (base,
         cst_help$2,
         _ay_,
         _ax_,
         function(env){
          var
           _eu_ = caml_call2(find_exn, env, help_key),
           _ev_ = caml_obj_tag(_eu_);
          if(250 === _ev_) return _eu_[1];
          if(246 !== _ev_ && 244 !== _ev_) return _eu_;
          return caml_call1(CamlinternalLazy[2], _eu_);
         },
         cst_this_help_text);
    return [0, base$0];
   }
   function basic_spec(summary, readme, spec, main){
    return basic(summary, readme, to_param(spec, main));
   }
   var subs_key = key_create(cst_subcommands);
   function lazy_group
   (summary, readme, preserve_subcommand_order, body, alist){
    function _es_(alist){
     function _et_(param){
      var t = param[2], name = param[1];
      return [0, normalize$0(0, name), t];
     }
     var
      alist$0 = caml_call2(Base_List[53], alist, _et_),
      match = caml_call2(Base_Map[8], [0, Base_String[59]], alist$0);
     if(17724 <= match[1]){
      var map = match[2];
      return preserve_subcommand_order
              ? alist$0
              : caml_call2(Base_Map[75], 0, map);
     }
     var name = match[2];
     return caml_call3(Command_Import[8], _az_, name, 0);
    }
    var subcommands = caml_call2(Base_Lazy[15], alist, _es_);
    return [1, [0, summary, readme, subcommands, body]];
   }
   function group(summary, readme, preserve_subcommand_order, body, alist){
    function _eq_(f, param){
     var _er_ = caml_call1(f, 0);
     return caml_call2(Base_String[109], 0, _er_);
    }
    var readme$0 = caml_call2(Base_Option[24], readme, _eq_);
    return lazy_group
            (summary,
             readme$0,
             preserve_subcommand_order,
             body,
             caml_call1(Base_Lazy[24], alist));
   }
   function exec(summary, readme, opt, env, path_to_exe, param){
    if(opt)
     var sth = opt[1], child_subcommand = sth;
    else
     var child_subcommand = 0;
    var
     _ep_ =
       -310138871 <= path_to_exe[1]
        ? Stdlib_Sys[1]
        : caml_check_bound(caml_sys_argv(0), 0)[1],
     working_dir = caml_call1(Filename_base[38], _ep_);
    if(491227799 <= path_to_exe[1])
     var
      p = path_to_exe[2],
      p$0 =
        caml_call1(Filename_base[30], p)
         ? p
         : caml_call1(Base[244], cst_Path_passed_to_Absolute_mu),
      path_to_exe$0 = p$0;
    else
     var
      p$1 = path_to_exe[2],
      p$2 =
        caml_call1(Filename_base[29], p$1)
         ? p$1
         : caml_call1(Base[244], cst_Path_passed_to_Relative_to),
      path_to_exe$0 = p$2;
    return [2,
            [0,
             summary,
             readme,
             working_dir,
             path_to_exe$0,
             child_subcommand,
             env]];
   }
   function of_lazy$0(thunk){return [3, thunk];}
   function proxy_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    var
     kind =
       kind_of_sexpable
        (sexpable,
         working_dir,
         path_to_exe,
         child_subcommand,
         path_to_subcommand);
    return [0,
            working_dir,
            path_to_exe,
            path_to_subcommand,
            child_subcommand,
            kind];
   }
   function kind_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    switch(sexpable[0]){
      case 0:
       var b = sexpable[1]; return [0, b];
      case 1:
       var
        g = sexpable[1],
        _ej_ = Base_List[53],
        _ek_ =
          function(param){
           var
            sexpable = param[2],
            str = param[1],
            path_to_subcommand$0 =
              caml_call2(Base[222], path_to_subcommand, [0, str, 0]),
            proxy =
              proxy_of_sexpable
               (sexpable,
                working_dir,
                path_to_exe,
                child_subcommand,
                path_to_subcommand$0);
           return [0, str, proxy];
          },
        _el_ = function(_eo_){return caml_call2(_ej_, _eo_, _ek_);},
        _em_ = caml_call2(Base_Lazy[15], g[3], _el_);
       return [1, [0, g[1], g[2], _em_]];
      case 2:
       var e = sexpable[1]; return [2, e];
      default:
       var
        l = sexpable[1],
        _en_ =
          function(sexpable){
           return kind_of_sexpable
                   (sexpable,
                    working_dir,
                    path_to_exe,
                    child_subcommand,
                    path_to_subcommand);
          };
       return [3, caml_call2(Base_Lazy[15], l, _en_)];
    }
   }
   function Version_info(Version_util){
    function print_version(version){
     var _eh_ = caml_obj_tag(version);
     a:
     if(250 === _eh_)
      var _ei_ = version[1];
     else{
      if(246 !== _eh_ && 244 !== _eh_){var _ei_ = version; break a;}
      var _ei_ = caml_call1(CamlinternalLazy[2], version);
     }
     return caml_call1(Command_Import[5], _ei_);
    }
    function print_build_info(build_info){
     var _ef_ = caml_obj_tag(build_info);
     a:
     if(250 === _ef_)
      var _eg_ = build_info[1];
     else{
      if(246 !== _ef_ && 244 !== _ef_){var _eg_ = build_info; break a;}
      var _eg_ = caml_call1(CamlinternalLazy[2], build_info);
     }
     return caml_call1(Command_Import[5], _eg_);
    }
    function command(version, build_info){
     var
      _ed_ =
        caml_call1
         (flag(0, 0, cst_build_info)(no_arg), cst_print_build_info_for_this_),
      _ee_ =
        caml_call1
         (flag(0, 0, cst_version)(no_arg), cst_print_the_version_of_this_);
     return basic
             (cst_print_version_information,
              0,
              caml_call2
               (symbol$3,
                caml_call2
                 (symbol$3,
                  caml_call1
                   (return$4,
                    function(version_flag, build_info_flag){
                     if(build_info_flag)
                      print_build_info(build_info);
                     else if(version_flag)
                      print_version(version);
                     else{print_build_info(build_info); print_version(version);}
                     return exit(0);
                    }),
                  _ee_),
                _ed_));
    }
    function add$0(version, build_info, unversioned){
     switch(unversioned[0]){
       case 0:
        var
         base = unversioned[1],
         base$0 =
           add
            (base,
             cst_version$0,
             0,
             _aA_,
             function(param){
              var _ec_ = caml_obj_tag(version);
              if(250 === _ec_) return version[1];
              if(246 !== _ec_ && 244 !== _ec_) return version;
              return caml_call1(CamlinternalLazy[2], version);
             },
             cst_the_version_of_this_build),
         base$1 =
           add
            (base$0,
             cst_build_info$0,
             0,
             _aB_,
             function(param){
              var _eb_ = caml_obj_tag(build_info);
              if(250 === _eb_) return build_info[1];
              if(246 !== _eb_ && 244 !== _eb_) return build_info;
              return caml_call1(CamlinternalLazy[2], build_info);
             },
             cst_info_about_this_build);
        return [0, base$1];
       case 1:
        var
         group = unversioned[1],
         _d9_ =
           function(subcommands){
            return extend_alist_exn
                    (subcommands,
                     0,
                     cst_version$1,
                     command(version, build_info));
           },
         subcommands = caml_call2(Base_Lazy[15], group[3], _d9_);
        return [1, [0, group[1], group[2], subcommands, group[4]]];
       case 2:
        var exec = unversioned[1]; return [2, exec];
       default:
        var thunk = unversioned[1];
        return [3,
                [246,
                 function(_d__){
                  var _d$_ = caml_obj_tag(thunk);
                  a:
                  if(250 === _d$_)
                   var _ea_ = thunk[1];
                  else{
                   if(246 !== _d$_ && 244 !== _d$_){var _ea_ = thunk; break a;}
                   var _ea_ = caml_call1(CamlinternalLazy[2], thunk);
                  }
                  return add$0(version, build_info, _ea_);
                 }]];
     }
    }
    function normalize_version_lines(lines){
     var _d8_ = caml_call2(Base_List[83], lines, Base_String[51]);
     return caml_call2(Base_String[68], _aC_, _d8_);
    }
    var
     default_version =
       [246, function(_d7_){return normalize_version_lines(Version_util[2]);}],
     default_build_info =
       [246,
        function(_d6_){
         return caml_call1(Version_util[3], Version_util[1][1]);
        }];
    return [0,
            print_version,
            print_build_info,
            ,
            add$0,
            normalize_version_lines,
            default_version,
            default_build_info];
   }
   function _aD_(param){
    function reprint_build_info(to_sexp){
     var _d5_ = caml_call1(to_sexp, 0);
     return caml_call1(Base[85][16], _d5_);
    }
    var
     sexp_of_t = Base[220],
     Time = [0, sexp_of_t],
     Version_info$0 =
       Version_info([0, Time, version_list, reprint_build_info]);
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _dY_ =
        function(param){
         Version_info$0[1].call(null, Version_info$0[6]);
         var _d4_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$0[2], _d4_);
        },
      _dZ_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aL_,
          _aK_),
      _d0_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _dZ_], 0],
      _d1_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _d2_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_command_src_command_ml$0,
       2633,
       _aP_,
       _aO_,
       _aN_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _d2_,
       _d1_,
       _aM_,
       0,
       Inline_test_config,
       _d0_,
       _dY_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _dT_ =
        function(param){
         Version_info$0[2].call(null, cst_some_build_info);
         var _d3_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block[2], _d3_);
        },
      _dU_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aF_,
          _aE_),
      _dV_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _dU_], 0],
      _dW_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _dX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_command_src_command_ml,
       2642,
       _aJ_,
       _aI_,
       _aH_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _dX_,
       _dW_,
       _aG_,
       0,
       Inline_test_config,
       _dV_,
       _dT_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_Version_info,
     0,
     cst_command_src_command_ml$1,
     2622,
     0,
     752,
     _aD_);
   function summary(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var x = param$0[1]; return x[1];
       case 1:
        var x$0 = param$0[1]; return x$0[1];
       case 2:
        var x$1 = param$0[1]; return x$1[1];
       default:
        var thunk = param$0[1], _dS_ = caml_obj_tag(thunk);
        a:
        if(250 === _dS_)
         var param$1 = thunk[1];
        else{
         if(246 !== _dS_ && 244 !== _dS_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
     }
   }
   var path$0 = caml_call2(map$6, path, parts_exe_basename);
   function get_flag_names(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var base = param$0[1]; return caml_call1(Base_Map[73], base[3]);
       case 3:
        var thunk = param$0[1], _dR_ = caml_obj_tag(thunk);
        a:
        if(250 === _dR_)
         var param$1 = thunk[1];
        else{
         if(246 !== _dR_ && 244 !== _dR_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        var param$0 = param$1;
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
     }
   }
   function help_recursive(cmd, with_flags, expand_dots, t, s){
    function help_recursive_rec(cmd, t, s){
     var t$0 = t;
     for(;;){
      var
       cmd$0 = expand_dots ? cmd : cst$16,
       _dH_ = caml_call2(Base[241], cmd$0, cst$15),
       new_s = caml_call2(Base[241], s, _dH_);
      switch(t$0[0]){
        case 0:
         var
          base = t$0[1],
          _dI_ = summary([0, base]),
          base_help = [0, caml_call2(Base[241], s, cmd), _dI_];
         if(! with_flags) return [0, base_help, 0];
         var
          _dJ_ =
            function(param){
             var h = param[2], flag = param[1];
             return [0, caml_call2(Base[241], new_s, flag), h];
            },
          display_help_flags = opt[1],
          flags = caml_call1(Base_Map[74], base[3]);
         if(display_help_flags)
          var flags$0 = flags;
         else
          var
           _dG_ =
             function(f){return caml_call2(Base_String[50], f[1], cst_help);},
           flags$0 = caml_call2(Base_List[12], flags, _dG_);
         var
          _dF_ = caml_call2(Base_List[14], flags$0, help),
          _dK_ = caml_call2(Base_List[83], _dF_, subcommand_cmp_fst);
         return [0, base_help, caml_call2(Base_List[53], _dK_, _dJ_)];
        case 1:
         var
          match = t$0[1],
          subcommands = match[3],
          summary$0 = match[1],
          _dL_ =
            function(param){
             var t = param[2], cmd = param[1];
             return help_recursive_rec(cmd, t, new_s);
            },
          _dM_ = caml_obj_tag(subcommands);
         a:
         if(250 === _dM_)
          var _dN_ = subcommands[1];
         else{
          if(246 !== _dM_ && 244 !== _dM_){var _dN_ = subcommands; break a;}
          var _dN_ = caml_call1(CamlinternalLazy[2], subcommands);
         }
         var
          _dO_ = caml_call2(Base_List[83], _dN_, subcommand_cmp_fst),
          _dP_ = caml_call2(Base_List[14], _dO_, _dL_);
         return [0, [0, caml_call2(Base[241], s, cmd), summary$0], _dP_];
        case 2:
         return 0;
        default:
         var thunk = t$0[1], _dQ_ = caml_obj_tag(thunk);
         a:
         if(250 === _dQ_)
          var t$1 = thunk[1];
         else{
          if(246 !== _dQ_ && 244 !== _dQ_){var t$1 = thunk; break a;}
          var t$1 = caml_call1(CamlinternalLazy[2], thunk);
         }
         var t$0 = t$1;
      }
     }
    }
    return help_recursive_rec(cmd, t, s);
   }
   function autocomplete_function(argv_0, pid){
    var fname = caml_call2(Command_Import[7], _aR_, pid);
    return caml_call5(Command_Import[7], _aS_, fname, argv_0, fname, argv_0);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a__ =
       function(param){
        var _dD_ = autocomplete_function(cst_argv_0, 12345);
        caml_call1(Command_Import[5], _dD_);
        var _dE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block[2], _dE_);
       },
     _bb_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ba_,
         _a$_),
     _bc_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _bb_], 0],
     _be_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _bf_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_command_src_command_ml$2,
      2736,
      _bi_,
      _bh_,
      _bg_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bf_,
      _be_,
      _bd_,
      0,
      Inline_test_config,
      _bc_,
      _a__);
   }
   var path$1 = caml_call2(map$4, path, parts_exe_basename);
   function basic$0(summary, readme, param){
    function _dB_(f, param){
     var _dC_ = caml_call1(f, 0);
     return caml_call2(Base_String[109], 0, _dC_);
    }
    var readme$0 = caml_call2(Base_Option[24], readme, _dB_);
    return basic(summary, readme$0, param);
   }
   function basic_or_error(summary, readme, param){
    return basic$0
            (summary,
             readme,
             caml_call2
              (map$4,
               param,
               function(run, param){
                var match = caml_call1(run, 0);
                if(0 === match[0]) return 0;
                var e = match[1], _dA_ = caml_call1(Base_Error[12], e);
                caml_call1(Stdio[10], _dA_);
                return exit(1);
               }));
   }
   function normalized_path$0(param){
    return caml_call2(Base_Option[24], normalized_path[1], parts);
   }
   function normalized_args$0(param){return normalized_args[1];}
   var
    For_telemetry = [0, normalized_path$0, normalized_args$0],
    word_wrap = Command_Shape[14][5];
   function to_string_for_choose_one(param){return to_string$0(create_exn(param));
   }
   caml_call1(Ppx_inline_test_lib[7], cst_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command);
   var
    run$0 = 228660148,
    shape$2 = 228660148,
    Command =
      [0,
       Auto_complete,
       [0,
        create,
        parse,
        map$1,
        of_lazy,
        of_map,
        of_alist_exn,
        enumerated,
        enumerated_sexpable,
        comma_separated,
        include$0,
        auto_complete],
       [0,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag],
       [0,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$4,
        map$4,
        both,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        apply$2,
        map2,
        map3,
        all,
        all_unit,
        Applicative_infix,
        help$0,
        path$1,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        optional_to_required,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string$0,
        int$1,
        char$1,
        float$1,
        bool$0,
        sexp$0,
        sexp_conv$0,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        parse$1],
       [0,
        return$4,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        [0, return$4, map$4, both]],
       [0,
        return$5,
        map$6,
        both$0,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol_map$2,
        apply$3,
        map2$0,
        map3$0,
        all$0,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        const$0,
        both,
        empty_spec,
        symbol$6,
        symbol$7,
        symbol$8,
        step,
        wrap,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string$1,
        int$2,
        char$2,
        float$2,
        bool$1,
        sexp$1,
        sexp_conv$1,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        flags_of_args_exn,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic_spec,
       basic$0,
       basic_or_error,
       group,
       lazy_group,
       exec,
       of_lazy$0,
       summary,
       exit,
       For_telemetry,
       [0, Deprecated, summary, help_recursive, get_flag_names],
       run$0,
       [0],
       shape$2,
       [0,
        abs_path,
        word_wrap,
        [0, normalize],
        [0,
         empty$0,
         create$1,
         append,
         parts,
         replace_first,
         to_string,
         to_string_dots],
        [0, compare, of_list, extend],
        [0, flags_of_args_exn, to_string_for_choose_one],
        function(For_unix_with_string_env_var){
         var
          Version_info$0 = Version_info(For_unix_with_string_env_var[1]),
          Pid = For_unix_with_string_env_var[2],
          Thread = For_unix_with_string_env_var[4],
          Unix = For_unix_with_string_env_var[5],
          getpid = Unix[2],
          close = Unix[3],
          in_channel_of_descr = Unix[4],
          wait = Unix[11],
          _bj_ = Unix[5],
          _bk_ = Unix[6],
          _bl_ = Unix[7],
          _bm_ = Unix[10];
         function getenv_and_clear(var$0){
          var value = caml_call1(_bl_, caml_call1(Command_Env_var[4], var$0));
          if(caml_call1(Base_Option[53], value))
           caml_call1(_bk_, caml_call1(Command_Env_var[4], var$0));
          return value;
         }
         var
          include = Command_Shape[11],
          supported_versions = include[3],
          Versioned = include[4],
          of_versioned = include[5],
          to_versioned = include[6];
         function of_external(working_dir, path_to_exe, child_subcommand){
          var
           _dl_ =
             caml_call2(Base_Set[68], [0, Base_Int[10]], supported_versions),
           help_sexp = caml_call1(Base[85][16], _dl_),
           env = [0, -72399366, [0, [0, 1, help_sexp], 0]],
           prog = caml_call2(abs_path, working_dir, path_to_exe),
           argv0 = 0,
           prog_search_path = 0,
           working_dir$0 = 0,
           _dh_ = 0;
          function convert_command_env_var_to_str(list){
           function _dz_(param){
            var str = param[2], env_var = param[1];
            return [0, caml_call1(Command_Env_var[4], env_var), str];
           }
           return caml_call2(Base_List[53], list, _dz_);
          }
          var _dg_ = env[1];
          if(-72399366 <= _dg_)
           if(584703596 <= _dg_)
            var
             list = env[2],
             _di_ = [0, 584703596, convert_command_env_var_to_str(list)];
           else
            var
             list$0 = env[2],
             _di_ = [0, -72399366, convert_command_env_var_to_str(list$0)];
          else if(-126259180 <= _dg_)
           var
            list$1 = env[2],
            _di_ = [0, -126259180, convert_command_env_var_to_str(list$1)];
          else
           var _di_ = env;
          var
           process_info =
             caml_call7
              (_bm_,
               working_dir$0,
               prog_search_path,
               argv0,
               prog,
               child_subcommand,
               _di_,
               _dh_);
          caml_call2(close, 0, process_info[2]);
          function start_reading(descr, info){
           var output = [0, 0], _dr_ = 0;
           function _ds_(param){
            function _dx_(param){
             var _dy_ = caml_call1(in_channel_of_descr, descr);
             return caml_call1(Stdio_In_channel[14], _dy_);
            }
            var result = caml_call1(Base_Result[41], _dx_);
            output[1] = [0, result];
            return 0;
           }
           var thread = caml_call3(Thread[1], 890699316, _ds_, _dr_);
           function _dt_(param){
            caml_call1(Thread[2], thread);
            caml_call2(close, 0, descr);
            var _du_ = output[1];
            if(! _du_){
             var
              _dv_ =
                [0, [1, [0, _aT_, [0, caml_call1(Base_Info[9], info), 0]]], 0],
              _dw_ =
                [1,
                 [0,
                  caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_failed_to_read),
                  _dv_]];
             return caml_call1(Base[246], _dw_);
            }
            var match = _du_[1];
            if(0 === match[0]){var output$0 = match[1]; return output$0;}
            var exn = match[1];
            throw caml_maybe_attach_backtrace(exn, 1);
           }
           return caml_call1(Base_Staged[1], _dt_);
          }
          var
           _dj_ = caml_call1(Base_Info[14], cst_stdout),
           finish_stdout = start_reading(process_info[3], _dj_),
           _dk_ = caml_call1(Base_Info[14], cst_stderr),
           finish_stderr = start_reading(process_info[4], _dk_),
           stderr = caml_call2(Base_Staged[2], finish_stderr, 0),
           stdout = caml_call2(Base_Staged[2], finish_stdout, 0);
          caml_call1(wait, process_info[1]);
          try{
           var
            _dq_ = caml_call1(Sexplib_Sexp[43], stdout),
            t = caml_call1(of_versioned, caml_call1(Versioned[1], _dq_));
           return t;
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _dm_ =
              [0, [1, [0, _aU_, [0, caml_call1(Base[202], stderr), 0]]], 0],
            _dn_ =
              [0, [1, [0, _aV_, [0, caml_call1(Base[202], stdout), 0]]], _dm_],
            _do_ = [0, caml_call1(Base[117], exn), _dn_],
            _dp_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_cannot_parse_command_shape),
                _do_]];
           return caml_call1(Base[246], _dp_);
          }
         }
         function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5]);}
         function shape_of_exe
         (param, child_subcommand, path_to_exe, working_dir){
          return shape_of_proxy
                  (proxy_of_sexpable
                    (of_external(working_dir, path_to_exe, child_subcommand),
                     working_dir,
                     path_to_exe,
                     child_subcommand,
                     0));
         }
         function shape_of_proxy_kind(kind){
          switch(kind[0]){
            case 0:
             var b = kind[1]; return [0, b];
            case 1:
             var
              g = kind[1],
              _db_ = Base_List[137][9],
              _dc_ =
                function(_df_){return caml_call2(_db_, _df_, shape_of_proxy);},
              _dd_ = caml_call2(Base_Lazy[15], g[3], _dc_);
             return [1, [0, g[1], g[2], _dd_]];
            case 2:
             var
              e = kind[1],
              child_subcommand = e[5],
              path_to_exe = e[4],
              working_dir = e[3];
             return [2,
                     e,
                     function(_de_){
                      return shape_of_exe
                              (_de_, child_subcommand, path_to_exe, working_dir);
                     }];
            default:
             var l = kind[1];
             return [3, caml_call2(Base_Lazy[15], l, shape_of_proxy_kind)];
          }
         }
         function shape$2(t){
          var t$0 = t;
          for(;;)
           switch(t$0[0]){
             case 0:
              var b = t$0[1]; return [0, shape(b)];
             case 1:
              var g = t$0[1]; return [1, shape$0(shape$2, g)];
             case 2:
              var
               e = t$0[1],
               child_subcommand = e[5],
               path_to_exe = e[4],
               working_dir = e[3],
               _c__ =
                 function(_da_){
                  return shape_of_exe
                          (_da_, child_subcommand, path_to_exe, working_dir);
                 };
              return [2, shape$1(e), _c__];
             default:
              var thunk = t$0[1], _c$_ = caml_obj_tag(thunk);
              a:
              if(250 === _c$_)
               var t$1 = thunk[1];
              else{
               if(246 !== _c$_ && 244 !== _c$_){var t$1 = thunk; break a;}
               var t$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              var t$0 = t$1;
           }
         }
         function group_or_exec_help_text
         (flags, path, summary, readme, format_list){
          var
           _c6_ = [0, [0, caml_call1(Command_Shape[4][2], format_list)], 0],
           _c7_ = flags ? cst_subcommands_and_flags : cst_subcommands$0,
           _c8_ = [0, cst$18, [0, to_string(path), _aY_]],
           _c9_ =
             [0,
              [0, summary],
              [0,
               [0, caml_call2(Base_String[68], 0, _c8_)],
               [0, readme, [0, [0, _c7_], _c6_]]]];
          return unparagraphs(caml_call1(Base_List[136], _c9_));
         }
         function help_for_shape(shape, path, expand_dots, flags, recursive){
          var shape$0 = shape;
          for(;;){
           var
            loop =
              function(path, acc, shape){
               var shape$0 = shape;
               for(;;){
                var string_of_path = expand_dots ? to_string : to_string_dots;
                switch(shape$0[0]){
                  case 0:
                   var b = shape$0[1];
                   if(! flags) return acc;
                   var
                    _cV_ =
                      function(acc, fmt){
                       var
                        path$0 = [0, fmt[1], path],
                        _c4_ = fmt[3],
                        _c5_ = fmt[2],
                        fmt$0 = [0, string_of_path(path$0), _c5_, _c4_];
                       return [0, fmt$0, acc];
                      },
                    _cW_ =
                      function(fmt){
                       return caml_call2(Base_String[50], fmt[1], cst_help$4);
                      },
                    _cX_ = caml_call2(Base_List[12], b[4], _cW_);
                   return caml_call3(Base_List[20], _cX_, acc, _cV_);
                  case 1:
                   var g = shape$0[1], _cY_ = g[3], _cZ_ = caml_obj_tag(_cY_);
                   a:
                   if(250 === _cZ_)
                    var subcommands = _cY_[1];
                   else{
                    if(246 !== _cZ_ && 244 !== _cZ_){
                     var subcommands = _cY_;
                     break a;
                    }
                    var subcommands = caml_call1(CamlinternalLazy[2], _cY_);
                   }
                   var
                    filtered_subcommands =
                      caml_call1(is_empty, path)
                       ? subcommands
                       : caml_call3
                         (Base_List[137][8],
                          subcommands,
                          Base_String[47],
                          cst_help$3),
                    _cS_ =
                      function(acc, param){
                       var
                        shape = param[2],
                        subcommand = param[1],
                        path$0 = [0, subcommand, path],
                        name = string_of_path(path$0),
                        doc = caml_call1(Command_Shape[10], shape),
                        acc$0 = [0, [0, name, doc, 0], acc];
                       return recursive ? loop(path$0, acc$0, shape) : acc$0;
                      },
                    _cT_ =
                      function(a, b){
                       var _c3_ = caml_call1(Base[242], b);
                       return caml_call2
                               (help_screen_compare, caml_call1(Base[242], a), _c3_);
                      },
                    _cU_ = caml_call2(Base_List[84], filtered_subcommands, _cT_);
                   return caml_call3(Base_List[20], _cU_, acc, _cS_);
                  case 2:
                   var shape$1 = shape$0[2];
                   try{
                    var _c0_ = loop(path, acc, caml_call1(shape$1, 0));
                    return _c0_;
                   }
                   catch(_c2_){return acc;}
                  default:
                   var thunk = shape$0[1], _c1_ = caml_obj_tag(thunk);
                   a:
                   if(250 === _c1_)
                    var shape$2 = thunk[1];
                   else{
                    if(246 !== _c1_ && 244 !== _c1_){var shape$2 = thunk; break a;}
                    var shape$2 = caml_call1(CamlinternalLazy[2], thunk);
                   }
                   var shape$0 = shape$2;
                }
               }
              },
            _cK_ = loop(empty$0, 0, shape$0),
            format_list = caml_call1(Base_List[63], _cK_);
           switch(shape$0[0]){
             case 0:
              var
               b = shape$0[1],
               usage = caml_call1(Command_Shape[5][8], b),
               _cL_ =
                 [0, _aZ_, [0, [0, caml_call1(Command_Shape[4][2], b[4])], 0]],
               _cM_ = [0, b[2], _cL_],
               _cN_ = caml_call2(Base[241], cst$19, usage),
               _cO_ = to_string(path),
               _cP_ = caml_call2(Base[241], _cO_, _cN_),
               _cQ_ = [0, [0, caml_call2(Base[241], cst$20, _cP_)], _cM_];
              return unparagraphs
                      (caml_call1(Base_List[136], [0, [0, b[1]], _cQ_]));
             case 1:
              var g = shape$0[1];
              return group_or_exec_help_text
                      (flags, path, g[1], g[2], format_list);
             case 2:
              var e = shape$0[1];
              return group_or_exec_help_text
                      (flags, path, e[1], e[2], format_list);
             default:
              var thunk = shape$0[1], _cR_ = caml_obj_tag(thunk);
              a:
              if(250 === _cR_)
               var shape$1 = thunk[1];
              else{
               if(246 !== _cR_ && 244 !== _cR_){var shape$1 = thunk; break a;}
               var shape$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              var shape$0 = shape$1;
           }
          }
         }
         function add(t){
          switch(t[0]){
            case 0:
             var
              base = t[1],
              flags = base[3],
              _cC_ = -481604174,
              _cD_ = function(_cJ_){return 0;},
              flags$0 =
                extend_map_exn
                 (flags,
                  1,
                  name,
                  [0,
                   name,
                   0,
                   _a5_,
                   [0,
                    function(env){
                     return caml_call3
                             (set, env, key_internal_validate_parsing, 0);
                    }],
                   cst_validate_arguments_are_par,
                   at_most_once,
                   _cD_,
                   _cC_]);
             return [0, [0, base[1], base[2], flags$0, base[4], base[5]]];
            case 1:
             var
              match = t[1],
              body = match[4],
              subcommands = match[3],
              readme = match[2],
              summary = match[1],
              _cE_ =
                function(subcommands){
                 function _cI_(param){
                  var command = param[2], name = param[1];
                  return [0, name, add(command)];
                 }
                 return caml_call2(Base_List[53], subcommands, _cI_);
                },
              subcommands$0 = caml_call2(Base_Lazy[15], subcommands, _cE_);
             return [1, [0, summary, readme, subcommands$0, body]];
            case 2:
             return t;
            default:
             var thunk = t[1];
             return [3,
                     [246,
                      function(_cF_){
                       var _cG_ = caml_obj_tag(thunk);
                       a:
                       if(250 === _cG_)
                        var _cH_ = thunk[1];
                       else{
                        if(246 !== _cG_ && 244 !== _cG_){var _cH_ = thunk; break a;}
                        var _cH_ = caml_call1(CamlinternalLazy[2], thunk);
                       }
                       return add(_cH_);
                      }]];
          }
         }
         function add_help_subcommands(t){
          switch(t[0]){
            case 0:
             return t;
            case 1:
             var
              match = t[1],
              body = match[4],
              subcommands = match[3],
              readme = match[2],
              summary = match[1],
              _cl_ =
                function(subcommands){
                 var
                  _cp_ = anon(maybe(symbol$2(cst_SUBCOMMAND, string$0))),
                  _cq_ =
                    caml_call1
                     (flag(0, 0, cst_expand_dots)(no_arg),
                      cst_expand_subcommands_in_recu),
                  _cr_ =
                    caml_call1
                     (flag(0, 0, cst_flags)(no_arg),
                      cst_show_flags_as_well_in_recu),
                  _cs_ =
                    caml_call1
                     (flag(0, 0, cst_recursive)(no_arg),
                      cst_show_subcommands_of_subcom),
                  _ct_ =
                    basic
                     (cst_explain_a_given_subcommand,
                      0,
                      caml_call2
                       (symbol$3,
                        caml_call2
                         (symbol$3,
                          caml_call2
                           (symbol$3,
                            caml_call2
                             (symbol$3,
                              caml_call2
                               (symbol$3,
                                caml_call2
                                 (symbol$3,
                                  caml_call1
                                   (return$4,
                                    function
                                    (recursive, flags, expand_dots, path$0, env, cmd_opt, param){
                                     var match = caml_call2(find, env, subs_key);
                                     if(! match)
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _a1_], 1);
                                     var subs = match[1];
                                     if(path$0 && ! caml_string_notequal(path$0[1], cst_help$7)){
                                      var
                                       path = path$0[2],
                                       _cu_ =
                                         function(path, subcommand){return [0, subcommand, path];},
                                       path$1 = caml_call3(Base_Option[34], cmd_opt, path, _cu_);
                                      if(cmd_opt){
                                       var
                                        cmd = cmd_opt[1],
                                        _cv_ = 0,
                                        _cw_ = function(x){return [0, x, -481604174];},
                                        match$0 =
                                          caml_call3
                                           (lookup_expand,
                                            caml_call2(Base_List[137][9], subs, _cw_),
                                            cmd,
                                            _cv_);
                                       if(0 === match$0[0])
                                        var
                                         match$1 = match$0[1],
                                         t = match$1[2],
                                         possibly_expanded_name = match$1[1],
                                         path$2 = replace_first(path$1, cmd, possibly_expanded_name),
                                         shape = shape$2(t),
                                         path$3 = path$2;
                                       else
                                        var
                                         e = match$0[1],
                                         _cy_ = to_string(path$1),
                                         _cz_ = caml_call4(die(_a0_), cmd, _cy_, e, 0),
                                         shape = _cz_[2],
                                         path$3 = _cz_[1];
                                      }
                                      else
                                       var
                                        _cA_ = caml_call2(Base_List[137][9], subs, shape$2),
                                        subcommands = caml_call1(Base_Lazy[24], _cA_),
                                        _cB_ = function(readme){return caml_call1(readme, 0);},
                                        readme$0 = caml_call2(Base_Option[24], readme, _cB_),
                                        shape$0 = [1, [0, summary, readme$0, subcommands]],
                                        shape = shape$0,
                                        path$3 = path$1;
                                      var
                                       _cx_ =
                                         help_for_shape(shape, path$3, expand_dots, flags, recursive);
                                      return caml_call1(Command_Import[5], _cx_);
                                     }
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _E_], 1);
                                    }),
                                  _cs_),
                                _cr_),
                              _cq_),
                            path),
                          env),
                        _cp_));
                 return extend_alist_exn
                         (caml_call2
                           (Base_List[137][9], subcommands, add_help_subcommands),
                          0,
                          cst_help$5,
                          _ct_);
                },
              subcommands$0 = caml_call2(Base_Lazy[15], subcommands, _cl_);
             return [1, [0, summary, readme, subcommands$0, body]];
            case 2:
             return t;
            default:
             var thunk = t[1];
             return [3,
                     [246,
                      function(_cm_){
                       var _cn_ = caml_obj_tag(thunk);
                       a:
                       if(250 === _cn_)
                        var _co_ = thunk[1];
                       else{
                        if(246 !== _cn_ && 244 !== _cn_){var _co_ = thunk; break a;}
                        var _co_ = caml_call1(CamlinternalLazy[2], thunk);
                       }
                       return add_help_subcommands(_co_);
                      }]];
          }
         }
         function maybe_apply_extend(args, extend$0, path){
          function _ck_(f){return extend(args, f, path);}
          return caml_call3(Base_Option[32], extend$0, args, _ck_);
         }
         function dispatch
         (t,
          env$0,
          extend,
          path,
          args$0,
          maybe_new_comp_cword,
          version,
          build_info,
          verbose_on_parse_error,
          when_parsing_succeeds,
          complete_subcommands){
          var t$0 = t;
          for(;;)
           switch(t$0[0]){
             case 0:
              var
               base = t$0[1],
               args$1 = maybe_apply_extend(args$0, extend, path),
               help_text =
                 [246,
                  function(param){
                   return help_for_shape(shape$2(t$0), path, 0, 1, 0);
                  }];
              return run
                      (base,
                       env$0,
                       when_parsing_succeeds,
                       path,
                       args$1,
                       verbose_on_parse_error,
                       help_text,
                       run_exn);
             case 1:
              var
               group = t$0[1],
               body = group[4],
               subs = group[3],
               readme = group[2],
               summary = group[1],
               completing = ends_in_complete(args$0),
               _b3_ = caml_obj_tag(subs);
              a:
              if(250 === _b3_)
               var _b4_ = subs[1];
              else{
               if(246 !== _b3_ && 244 !== _b3_){var _b4_ = subs; break a;}
               var _b4_ = caml_call1(CamlinternalLazy[2], subs);
              }
              var
               env$1 = caml_call3(set, env$0, subs_key, _b4_),
               die_showing_help =
                 function(msg){
                  if(completing) return exit(0);
                  var
                   _cj_ =
                     help_for_shape
                      (shape$2([1, [0, summary, readme, subs, body]]),
                       path,
                       0,
                       0,
                       0);
                  caml_call2(Command_Import[1], _a6_, _cj_);
                  return caml_call2(die(_a7_), msg, 0);
                 },
               parse_group =
                 function(args, maybe_new_comp_cword){
                  var
                   maybe_new_comp_cword$0 =
                     caml_call2
                      (Base_Option[24], maybe_new_comp_cword, Base_Int[46]);
                  function skip(rest){
                   return parse_group(rest, maybe_new_comp_cword$0);
                  }
                  function resolve(sub, rest){
                   function _cg_(x){return [0, x, -481604174];}
                   var _ch_ = caml_obj_tag(subs);
                   a:
                   if(250 === _ch_)
                    var _ci_ = subs[1];
                   else{
                    if(246 !== _ch_ && 244 !== _ch_){var _ci_ = subs; break a;}
                    var _ci_ = caml_call1(CamlinternalLazy[2], subs);
                   }
                   var
                    subs$0 = caml_call2(Base_List[137][9], _ci_, _cg_),
                    match = caml_call3(lookup_expand, subs$0, sub, 0);
                   if(0 === match[0]){
                    var match$0 = match[1], t = match$0[2], sub$0 = match$0[1];
                    return dispatch
                            (t,
                             env$1,
                             extend,
                             [0, sub$0, path],
                             rest,
                             maybe_new_comp_cword$0,
                             version,
                             build_info,
                             verbose_on_parse_error,
                             when_parsing_succeeds,
                             complete_subcommands);
                   }
                   var msg = match[1];
                   return die_showing_help(msg);
                  }
                  if(typeof args === "number"){
                   if(body){
                    var body$0 = body[1];
                    return caml_call1(body$0, parts_exe_basename(path));
                   }
                   var _b6_ = to_string(path);
                   return die_showing_help
                           (caml_call2(Command_Import[7], _a8_, _b6_));
                  }
                  if(0 !== args[0]){
                   var
                    part = args[1],
                    _b8_ = Base_String[51],
                    _b9_ =
                      function(name){
                       return caml_call2(Base_String[97], name, part);
                      },
                    _b__ = Base[242],
                    _b$_ = caml_obj_tag(subs);
                   a:
                   if(250 === _b$_)
                    var _ca_ = subs[1];
                   else{
                    if(246 !== _b$_ && 244 !== _b$_){var _ca_ = subs; break a;}
                    var _ca_ = caml_call1(CamlinternalLazy[2], subs);
                   }
                   var
                    _cb_ = caml_call2(Base_List[53], _ca_, _b__),
                    _cc_ = caml_call2(Base_List[12], _cb_, _b9_),
                    subs$0 = caml_call2(Base_List[83], _cc_, _b8_);
                   if(! complete_subcommands){
                    caml_call2(Base_List[19], subs$0, Command_Import[5]);
                    return exit(0);
                   }
                   var
                    f = complete_subcommands[1],
                    _cd_ = shape$2(t$0),
                    _ce_ = caml_call1(Command_Shape[9], _cd_),
                    subcommands = caml_call1(Command_Shape[8][3], _ce_),
                    match =
                      caml_call3(f, caml_call1(parts, path), part, subcommands);
                   if(! match) return exit(1);
                   var
                    to_output = match[1],
                    _cf_ = caml_call2(Base_String[68], _a9_, to_output);
                   caml_call1(Command_Import[5], _cf_);
                   return exit(0);
                  }
                  var rest = args[2], sub = args[1];
                  a:
                  {
                   b:
                   if(caml_string_notequal(sub, cst_build_info$1)){
                    c:
                    if(caml_string_notequal(sub, cst_help$9)){
                     if(caml_string_notequal(sub, cst_version$2)){
                      if(! caml_string_notequal(sub, cst_build_info$2)) break b;
                      if(! caml_string_notequal(sub, cst_help$8)) break c;
                      if(caml_string_notequal(sub, cst_version$3)) break a;
                     }
                     if(1 === caml_call1(length, path))
                      return completing
                              ? skip(rest)
                              : (Version_info$0[1].call(null, version), exit(0));
                     break a;
                    }
                    if(completing) return skip(rest);
                    if(typeof rest !== "number" && 0 === rest[0]){
                     var rest_of_rest = rest[2], first_of_rest = rest[1];
                     return resolve(first_of_rest, [0, sub, rest_of_rest]);
                    }
                    var
                     _b7_ =
                       help_for_shape
                        (shape$2([1, [0, group[1], group[2], subs, group[4]]]),
                         path,
                         0,
                         0,
                         0);
                    caml_call1(Command_Import[5], _b7_);
                    return exit(0);
                   }
                   if(1 === caml_call1(length, path))
                    return completing
                            ? skip(rest)
                            : (Version_info$0[2].call(null, build_info), exit(0));
                  }
                  return resolve(sub, rest);
                 };
              return parse_group(args$0, maybe_new_comp_cword);
             case 2:
              var
               exec = t$0[1],
               args$2 = to_list(maybe_apply_extend(args$0, extend, path)),
               prog = caml_call2(abs_path, exec[3], exec[4]),
               args = caml_call2(Base[222], exec[5], args$2),
               env = exec[6],
               _b1_ =
                 function(n){
                  var
                   new_value$0 = n + caml_call1(Base_List[45], exec[5]) | 0,
                   new_value = caml_call1(Base_Int[12], new_value$0);
                  return caml_call2
                          (_bj_,
                           caml_call1(Command_Env_var[4], comp_cword),
                           new_value);
                 };
              caml_call2(Base_Option[37], maybe_new_comp_cword, _b1_);
              var
               _b2_ =
                 caml_call5
                  (For_unix_with_string_env_var[5][8],
                   prog,
                   [0, prog, args],
                   0,
                   env,
                   0);
              return caml_call1(Base_Nothing[4], _b2_);
             default:
              var thunk = t$0[1], _b5_ = caml_obj_tag(thunk);
              a:
              if(250 === _b5_)
               var t$1 = thunk[1];
              else{
               if(246 !== _b5_ && 244 !== _b5_){var t$1 = thunk; break a;}
               var t$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              var t$0 = t$1;
           }
         }
         function run$0
         (opt,
          verbose_on_parse_error,
          version,
          build_info,
          _bt_,
          extend,
          _bs_,
          complete_subcommands,
          t){
          if(opt)
           var sth = opt[1], add_validate_parsing_flag = sth;
          else
           var add_validate_parsing_flag = 0;
          if(_bt_)
           var sth$0 = _bt_[1], argv = sth$0;
          else
           var
            _bu_ = caml_sys_argv(0),
            argv = caml_call1(Base_Array[30], _bu_);
          if(_bs_)
           var sth$1 = _bs_[1], when_parsing_succeeds = sth$1;
          else
           var when_parsing_succeeds = function(_b0_){return _b0_;};
          if(build_info)
           var v = build_info[1], build_info$0 = v;
          else
           var build_info$0 = Version_info$0[7];
          if(version)
           var
            v$0 = version[1],
            version$0 =
              [246,
               function(param){
                var _bV_ = Base_String[102];
                function _bW_(_bZ_){return caml_call2(_bV_, _bZ_, 10);}
                var
                 _bX_ = caml_call2(Base_String[102], v$0, 32),
                 _bY_ = caml_call2(Base_List[14], _bX_, _bW_);
                return Version_info$0[5].call(null, _bY_);
               }];
          else
           var version$0 = Version_info$0[6];
          function f(param){
           var
            t$0 = Version_info$0[4].call(null, version$0, build_info$0, t),
            t$1 = add_help_subcommands(t$0),
            t$2 = add_validate_parsing_flag ? add(t$1) : t$1;
           if(argv){
            var
             path_to_subcommand = argv[2],
             cmd = argv[1],
             _bx_ =
               function(version){
                var
                 _bU_ = caml_call1(Sexplib_Sexp[43], version),
                 supported_versions$0 =
                   caml_call2
                    (Base_Set[69], [0, Base_Int[9], Base_Int[22]], _bU_),
                 _bN_ =
                   caml_call2
                    (Base_Set[14], supported_versions, supported_versions$0),
                 param = caml_call1(Base_Set[54], _bN_);
                if(param){
                 var
                  version_to_use = param[1],
                  t$4 = sexpable_shape(t$2),
                  t = t$4,
                  path_to_subcommand$0 = path_to_subcommand;
                 for(;;){
                  if(path_to_subcommand$0){
                   var
                    path_to_subcommand$1 = path_to_subcommand$0[2],
                    sub = path_to_subcommand$0[1];
                   if(caml_call2(Base_String[97], sub, cst$17))
                    var _bO_ = t;
                   else
                    switch(t[0]){
                      case 0:
                       var _bO_ = caml_call3(Command_Import[8], _aW_, sub, 0);
                       break;
                      case 1:
                       var
                        g = t[1],
                        _bJ_ = g[3],
                        _bI_ = Base_String[134],
                        _bK_ = caml_obj_tag(_bJ_);
                       a:
                       if(250 === _bK_)
                        var _bL_ = _bJ_[1];
                       else{
                        if(246 !== _bK_ && 244 !== _bK_){var _bL_ = _bJ_; break a;}
                        var _bL_ = caml_call1(CamlinternalLazy[2], _bJ_);
                       }
                       var match = caml_call3(Base_List[137][5], _bL_, _bI_, sub);
                       if(match){
                        var
                         t$0 = match[1],
                         t = t$0,
                         path_to_subcommand$0 = path_to_subcommand$1;
                        continue;
                       }
                       var _bO_ = caml_call3(Command_Import[8], _aX_, sub, 0);
                       break;
                      case 2:
                       var
                        match$0 = t[1],
                        child_subcommand = match$0[5],
                        path_to_exe = match$0[4],
                        working_dir = match$0[3],
                        path_to_subcommand$2 =
                          [0,
                           sub,
                           caml_call2
                            (Base[222], path_to_subcommand$1, child_subcommand)],
                        t$1 =
                          of_external(working_dir, path_to_exe, child_subcommand),
                        t = t$1,
                        path_to_subcommand$0 = path_to_subcommand$2;
                       continue;
                      default:
                       var thunk = t[1], _bM_ = caml_obj_tag(thunk);
                       a:
                       if(250 === _bM_)
                        var t$3 = thunk[1];
                       else{
                        if(246 !== _bM_ && 244 !== _bM_){var t$3 = thunk; break a;}
                        var t$3 = caml_call1(CamlinternalLazy[2], thunk);
                       }
                       var t = t$3;
                       continue;
                    }
                  }
                  else
                   var _bO_ = t;
                  var
                   _bP_ = caml_call2(to_versioned, _bO_, version_to_use),
                   _bQ_ = caml_call1(Versioned[2], _bP_),
                   _bR_ = caml_call1(Base[85][16], _bQ_);
                  caml_call1(Command_Import[4], _bR_);
                  break;
                 }
                }
                else{
                 var
                  _bS_ = caml_call1(Base_Set[68], [0, Base_Int[10]]),
                  _bT_ =
                    caml_call5
                     (Base_Error[19],
                      _a3_,
                      0,
                      cst_Couldn_t_choose_a_supporte,
                      supported_versions,
                      _bS_);
                 caml_call1(Base_Error[31], _bT_);
                }
                return exit(0);
               },
             _by_ = getenv_and_clear(1);
            caml_call2(Base_Option[37], _by_, _bx_);
            var
             _bz_ =
               function(param){
                var
                 _bF_ = caml_call1(getpid, 0),
                 _bG_ = caml_call1(Pid[1], _bF_),
                 _bH_ =
                   autocomplete_function
                    (caml_check_bound(caml_sys_argv(0), 0)[1], _bG_);
                caml_call2(Command_Import[2], _a2_, _bH_);
                return exit(0);
               },
             _bA_ = getenv_and_clear(0);
            caml_call2(Base_Option[37], _bA_, _bz_);
            var match = [0, cmd, path_to_subcommand];
           }
           else
            var match = caml_call1(Base[244], cst_missing_executable_name);
           var
            args$1 = match[2],
            cmd$0 = match[1],
            _bv_ = Base_Int[11],
            _bw_ = getenv_and_clear(comp_cword),
            maybe_new_comp_cword = caml_call2(Base_Option[24], _bw_, _bv_);
           if(maybe_new_comp_cword)
            var
             comp_cword$0 = maybe_new_comp_cword[1],
             _bB_ = caml_call2(Base[222], args$1, _a4_),
             args = caml_call2(Base_List[139], _bB_, comp_cword$0),
             _bC_ = 0,
             _bD_ =
               function(arg, args){
                return typeof args === "number" ? [1, arg] : [0, arg, args];
               },
             args$0 = caml_call3(Base_List[105], args, _bD_, _bC_);
           else
            var args$0 = of_list(args$1);
           var path = create$1(cmd$0);
           try{
            var
             _bE_ =
               dispatch
                (t$2,
                 empty,
                 extend,
                 path,
                 args$0,
                 maybe_new_comp_cword,
                 version$0,
                 build_info$0,
                 verbose_on_parse_error,
                 when_parsing_succeeds,
                 complete_subcommands);
            return _bE_;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] !== Failed_to_parse_command_line)
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return ends_in_complete(args$0)
                    ? exit(0)
                    : (caml_call1(Command_Import[6], msg), exit(1));
           }
          }
          if(! raise_instead_of_exit) return caml_call1(Base_Exn[15], f);
          try{var _br_ = f(0); return _br_;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn[1] === Exit_called && 0 === exn[2]){
            var _bq_ = caml_call1(Base[117], exn);
            return caml_call2(Command_Import[3], 0, _bq_);
           }
           throw caml_maybe_attach_backtrace(exn, 0);
          }
         }
         function deprecated_run
         (t,
          cmd,
          args,
          is_help,
          is_help_rec,
          is_help_rec_flags,
          is_expand_dots){
          var
           path_strings = caml_call2(Base_String[102], cmd, 32),
           path = caml_call1(Base_List[63], path_strings),
           args$0 = is_expand_dots ? [0, cst_expand_dots$0, args] : args,
           args$1 = is_help_rec_flags ? [0, cst_flags$0, args$0] : args$0,
           args$2 = is_help_rec ? [0, cst_r, args$1] : args$1,
           args$3 = is_help ? [0, cst_help$6, args$2] : args$2,
           args$4 = of_list(args$3),
           t$0 = add_help_subcommands(t),
           _bn_ = 0;
          function _bo_(_bp_){return _bp_;}
          return dispatch
                  (t$0,
                   empty,
                   0,
                   path,
                   args$4,
                   0,
                   Version_info$0[6],
                   Version_info$0[7],
                   0,
                   _bo_,
                   _bn_);
         }
         return [0, shape$2, help_for_shape, run$0, deprecated_run];
        }]];
   runtime.caml_register_global(300, Command, cst_Command$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
