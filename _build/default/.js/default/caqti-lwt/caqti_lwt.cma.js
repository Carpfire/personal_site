// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Caqti_lwt
//# unitInfo: Requires: Caqti_error, Caqti_platform__Logging, Caqti_platform__Stream, Caqti_platform__Switch, Logs_lwt, Lwt, Lwt_mutex, Lwt_mvar
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Caqti_error = global_data.Caqti_error,
    Lwt_mutex = global_data.Lwt_mutex,
    Caqti_platform_Logging = global_data.Caqti_platform__Logging,
    Logs_lwt = global_data.Logs_lwt,
    Lwt_mvar = global_data.Lwt_mvar,
    Caqti_platform_Stream = global_data.Caqti_platform__Stream,
    Caqti_platform_Switch = global_data.Caqti_platform__Switch,
    symbol_bind = Lwt[33][1],
    symbol = Lwt[33][2],
    Infix = [0, symbol_bind, symbol],
    return$0 = Lwt[4],
    catch$0 = Lwt[7],
    finally$0 = Lwt[8];
   function cleanup(f, g){
    function _c_(exn){
     function _d_(param){return caml_call1(Lwt[5], exn);}
     var _e_ = caml_call1(g, 0);
     return caml_call2(Infix[1], _e_, _d_);
    }
    return caml_call2(Lwt[7], f, _c_);
   }
   var
    Fiber = [0, Infix, return$0, catch$0, finally$0, cleanup],
    Stream = caml_call1(Caqti_platform_Stream[1], [0, Fiber[1], Fiber[2]]),
    Switch =
      caml_call1
       (Caqti_platform_Switch[1], [0, Fiber[2], [0, Fiber[1][1]], Fiber[4]]);
   function async(param){return Lwt[11];}
   var create = Lwt_mvar[2];
   function release(v){
    var _b_ = caml_call1(Lwt_mvar[3], v);
    return caml_call1(Lwt[11], _b_);
   }
   var acquire = Lwt_mvar[4], Semaphore = [0, create, release, acquire];
   function err(opt){
    if(opt)
     var sth = opt[1], src = sth;
    else
     var src = Caqti_platform_Logging[1];
    return caml_call1(Logs_lwt[3], [0, src]);
   }
   function warn(opt){
    if(opt)
     var sth = opt[1], src = sth;
    else
     var src = Caqti_platform_Logging[1];
    return caml_call1(Logs_lwt[4], [0, src]);
   }
   function info(opt){
    if(opt)
     var sth = opt[1], src = sth;
    else
     var src = Caqti_platform_Logging[1];
    return caml_call1(Logs_lwt[5], [0, src]);
   }
   function debug(opt){
    if(opt)
     var sth = opt[1], src = sth;
    else
     var src = Caqti_platform_Logging[1];
    return caml_call1(Logs_lwt[6], [0, src]);
   }
   var Log = [0, err, warn, info, debug];
   function create$0(m){return [0, m, caml_call1(Lwt_mutex[1], 0)];}
   function enqueue(param, f){
    var mutex = param[2], m = param[1];
    function _a_(param){return caml_call1(f, m);}
    return caml_call2(Lwt_mutex[6], mutex, _a_);
   }
   var Sequencer = [0, create$0, enqueue];
   function or_fail(param){
    if(0 === param[0]){var x = param[1]; return caml_call1(Lwt[4], x);}
    var err = param[1];
    return caml_call1(Lwt[5], [0, Caqti_error[23], err]);
   }
   var
    Caqti_lwt =
      [0,
       Stream,
       Switch,
       [0,
        Fiber,
        [0, Switch[5], Switch[6], Switch[7], Switch[8]],
        async,
        Semaphore,
        Log,
        Stream,
        Sequencer],
       or_fail];
   runtime.caml_register_global(8, Caqti_lwt, "Caqti_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJjYXF0aV9sd3QuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInN5bWJvbF9iaW5kIiwic3ltYm9sIiwicmV0dXJuJDAiLCJjYXRjaCQwIiwiZmluYWxseSQwIiwiY2xlYW51cCIsImYiLCJnIiwiZXhuIiwiYXN5bmMiLCJjcmVhdGUiLCJyZWxlYXNlIiwidiIsImFjcXVpcmUiLCJlcnIiLCJvcHQiLCJzdGgiLCJzcmMiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwiY3JlYXRlJDAiLCJtIiwiZW5xdWV1ZSIsIm11dGV4Iiwib3JfZmFpbCIsIngiXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9jYXF0aS1sd3QvY2FxdGlfbHd0Lm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7R0FzQmlCOzs7Ozs7Ozs7O0lBQ1RBO0lBQ0FDO0lBRlMsWUFDVEQsYUFDQUM7SUFJRkM7SUFDQUM7SUFDQUM7WUFDQUMsUUFBUUMsR0FBRUM7aUJBQXFCQzt5QkFBMEIsT0FBbkIsbUJBQVBBLEtBQXNDO0tBQS9CLFVBQUEsV0FBNUJEO0tBQXFDLE9BQUE7SUFBc0I7SUFBM0MsT0FBQSxtQkFBbEJEO0dBQThEO0dBWjdEO0lBQUEsbUJBU1RKLFVBQ0FDLFNBQ0FDLFdBQ0FDOzs7OztZQVdBSSxhQUFjLGVBQVM7T0FJckJDO1lBQ0FDLFFBQVFDO0lBQWMsVUFBQSx3QkFBZEE7SUFBYyxPQUFBO0dBQWdCO0dBSHpCLElBSWJDLHVCQUphLGdCQUViSCxRQUNBQyxTQUNBRTtZQUtBQyxJQUFNQztJLEdBQUFBO1NBQU1DLE1BQU5ELFFBQUFFLE1BQU1EOztTQUFOQztJQUErQyxPQUFBLDRCQUEvQ0E7O1lBQ05DLEtBQU9IO0ksR0FBQUE7U0FBTUMsTUFBTkQsUUFBQUUsTUFBTUQ7O1NBQU5DO0lBQWdELE9BQUEsNEJBQWhEQTs7WUFDUEUsS0FBT0o7SSxHQUFBQTtTQUFNQyxNQUFORCxRQUFBRSxNQUFNRDs7U0FBTkM7SUFBZ0QsT0FBQSw0QkFBaERBOztZQUNQRyxNQUFRTDtJLEdBQUFBO1NBQU1DLE1BQU5ELFFBQUFFLE1BQU1EOztTQUFOQztJQUFpRCxPQUFBLDRCQUFqREE7O0dBTEQsY0FFUEgsS0FDQUksTUFDQUMsTUFDQUM7WUFNQUMsU0FBT0MsR0FBSSxXQUFKQSxHQUFRLDZCQUFvQjtZQUNuQ0MsZUFBbUJqQjtRQUFQa0Isa0JBQUhGO3dCQUFtRCxPQUFyQyxXQUFKaEIsR0FBVmdCLEdBQXNEO0lBQWQsT0FBQSx5QkFBckNFOztHQUhDLG9CQUViSCxVQUNBRTtZQVVKRTtJQUFVLHVCQUNSQyxjQUFLLE9BQUEsbUJBQUxBO1FBQ0daO0lBQW9DLE9BQUEsd0NBQXBDQTtHQUF5RDs7Ozs7Ozs7O1FBakM1REw7Ozs7O09BK0JGZ0I7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogQ29weXJpZ2h0IChDKSAyMDIyLS0yMDIzICBQZXR0ZXIgQS4gVXJrZWRhbCA8cGF1cmtlZGFsQGdtYWlsLmNvbT5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdFxuICogdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91clxuICogb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbiwgd2l0aCB0aGUgTEdQTC0zLjAgTGlua2luZyBFeGNlcHRpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUXG4gKiBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3JcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbmQgdGhlIExHUEwtMy4wIExpbmtpbmcgRXhjZXB0aW9uIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5LiAgSWYgbm90LCBzZWVcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPiBhbmQgPGh0dHBzOi8vc3BkeC5vcmc+LCByZXNwZWN0aXZlbHkuXG4gKilcblxub3BlbiBDYXF0aV9wbGF0Zm9ybVxuXG5tb2R1bGUgRmliZXIgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gJ2EgTHd0LnRcblxuICBtb2R1bGUgSW5maXggPSBzdHJ1Y3RcbiAgICBsZXQgKD4+PSkgPSBMd3QuSW5maXguKD4+PSlcbiAgICBsZXQgKD58PSkgPSBMd3QuSW5maXguKD58PSlcbiAgZW5kXG4gIG9wZW4gSW5maXhcblxuICBsZXQgcmV0dXJuID0gTHd0LnJldHVyblxuICBsZXQgY2F0Y2ggPSBMd3QuY2F0Y2hcbiAgbGV0IGZpbmFsbHkgPSBMd3QuZmluYWxpemVcbiAgbGV0IGNsZWFudXAgZiBnID0gTHd0LmNhdGNoIGYgKGZ1biBleG4gLT4gZyAoKSA+Pj0gZnVuICgpIC0+IEx3dC5mYWlsIGV4bilcbmVuZFxuXG5tb2R1bGUgU3RyZWFtID0gQ2FxdGlfcGxhdGZvcm0uU3RyZWFtLk1ha2UgKEZpYmVyKVxubW9kdWxlIFN3aXRjaCA9IENhcXRpX3BsYXRmb3JtLlN3aXRjaC5NYWtlIChGaWJlcilcblxubW9kdWxlIFN5c3RlbV9jb3JlID0gc3RydWN0XG4gIG1vZHVsZSBGaWJlciA9IEZpYmVyXG4gIG1vZHVsZSBTdHJlYW0gPSBTdHJlYW1cbiAgbW9kdWxlIFN3aXRjaCA9IFN3aXRjaFxuXG4gIGxldCBhc3luYyB+c3c6XyA9IEx3dC5hc3luY1xuXG4gIG1vZHVsZSBTZW1hcGhvcmUgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPSB1bml0IEx3dF9tdmFyLnRcbiAgICBsZXQgY3JlYXRlID0gTHd0X212YXIuY3JlYXRlX2VtcHR5XG4gICAgbGV0IHJlbGVhc2UgdiA9IEx3dC5hc3luYyAoTHd0X212YXIucHV0IHYpXG4gICAgbGV0IGFjcXVpcmUgPSBMd3RfbXZhci50YWtlXG4gIGVuZFxuXG4gIG1vZHVsZSBMb2cgPSBzdHJ1Y3RcbiAgICB0eXBlICdhIGxvZyA9ICdhIExvZ3NfbHd0LmxvZ1xuICAgIGxldCBlcnIgPyhzcmMgPSBMb2dnaW5nLmRlZmF1bHRfbG9nX3NyYykgPSBMb2dzX2x3dC5lcnIgfnNyY1xuICAgIGxldCB3YXJuID8oc3JjID0gTG9nZ2luZy5kZWZhdWx0X2xvZ19zcmMpID0gTG9nc19sd3Qud2FybiB+c3JjXG4gICAgbGV0IGluZm8gPyhzcmMgPSBMb2dnaW5nLmRlZmF1bHRfbG9nX3NyYykgPSBMb2dzX2x3dC5pbmZvIH5zcmNcbiAgICBsZXQgZGVidWcgPyhzcmMgPSBMb2dnaW5nLmRlZmF1bHRfbG9nX3NyYykgPSBMb2dzX2x3dC5kZWJ1ZyB+c3JjXG4gIGVuZFxuXG4gICgqIENmLiBwZ3hfbHd0LiAqKVxuICBtb2R1bGUgU2VxdWVuY2VyID0gc3RydWN0XG4gICAgdHlwZSAnYSB0ID0gJ2EgKiBMd3RfbXV0ZXgudFxuICAgIGxldCBjcmVhdGUgbSA9IChtLCBMd3RfbXV0ZXguY3JlYXRlICgpKVxuICAgIGxldCBlbnF1ZXVlIChtLCBtdXRleCkgZiA9IEx3dF9tdXRleC53aXRoX2xvY2sgbXV0ZXggKGZ1biAoKSAtPiBmIG0pXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSB0eXBlIENPTk5FQ1RJT04gPSBDYXF0aV9jb25uZWN0aW9uX3NpZy5TXG4gIHdpdGggdHlwZSAnYSBmaWJlciA6PSAnYSBMd3QudFxuICAgYW5kIHR5cGUgKCdhLCAnZSkgc3RyZWFtIDo9ICgnYSwgJ2UpIFN0cmVhbS50XG5cbnR5cGUgY29ubmVjdGlvbiA9IChtb2R1bGUgQ09OTkVDVElPTilcblxubGV0IG9yX2ZhaWwgPSBmdW5jdGlvblxuIHwgT2sgeCAtPiBMd3QucmV0dXJuIHhcbiB8IEVycm9yICgjQ2FxdGlfZXJyb3IudCBhcyBlcnIpIC0+IEx3dC5mYWlsIChDYXF0aV9lcnJvci5FeG4gZXJyKVxuIl19
