// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Stream
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Bytes, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = ")",
    cst$4 = ", ",
    cst_stream_ml = "stream.ml",
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "}",
    cst$0 = cst$4,
    cst$1 = cst$5,
    cst$2 = cst$4,
    cst$3 = cst$5,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Failure = [248, "Stream.Failure", caml_fresh_oo_id(0)],
    Error = [248, "Stream.Error", caml_fresh_oo_id(0)],
    _a_ = [0, cst_stream_ml, 53, 12],
    _b_ = [0, 0],
    _c_ = [0, cst_stream_ml, 82, 12],
    cst_count = "{count = ",
    cst_data = "; data = ",
    cst_Sempty = "Sempty",
    cst_Scons = "Scons (",
    cst_Sapp = "Sapp (",
    cst_Slazy = "Slazy",
    cst_Sgen = "Sgen",
    cst_Sbuffio = "Sbuffio";
   function count(param){
    if(! param) return 0;
    var count = param[1][1];
    return count;
   }
   function data(param){
    if(! param) return 0;
    var data = param[1][2];
    return data;
   }
   function fill_buff(b){
    b[3] = caml_call4(Stdlib[84], b[1], b[2], 0, caml_ml_bytes_length(b[2]));
    b[4] = 0;
    return;
   }
   function get_data(count, d){
    var d$0 = d;
    for(;;){
     if(typeof d$0 !== "number")
      switch(d$0[0]){
        case 1:
         var d2 = d$0[2], d1 = d$0[1], match = get_data(count, d1);
         if(typeof match === "number"){var d$0 = d2; continue;}
         if(0 !== match[0])
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
         var d11 = match[2], a = match[1];
         return [0, a, [1, d11, d2]];
        case 2:
         var f = d$0[1], _l_ = caml_obj_tag(f);
         a:
         if(250 === _l_)
          var d$1 = f[1];
         else{
          if(246 !== _l_ && 244 !== _l_){var d$1 = f; break a;}
          var d$1 = caml_call1(CamlinternalLazy[2], f);
         }
         var d$0 = d$1;
         continue;
        case 3:
         var g = d$0[1], _m_ = g[1];
         if(_m_){
          var match$0 = _m_[1];
          if(! match$0) return 0;
          var a$0 = match$0[1];
          g[1] = 0;
          return [0, a$0, d$0];
         }
         var match$1 = caml_call1(g[2], count);
         if(match$1){var a$1 = match$1[1]; return [0, a$1, d$0];}
         g[1] = _b_;
         return 0;
        case 4:
         var b = d$0[1];
         if(b[3] <= b[4]) fill_buff(b);
         if(0 === b[3]) return 0;
         var r = caml_bytes_unsafe_get(b[2], b[4]);
         b[4] = b[4] + 1 | 0;
         return [0, r, d$0];
      }
     return d$0;
    }
   }
   function peek_data(s){
    for(;;){
     var match = s[2];
     if(typeof match === "number") return 0;
     switch(match[0]){
       case 0:
        var a = match[1]; return [0, a];
       case 1:
        var d = get_data(s[1], s[2]);
        if(typeof d === "number") return 0;
        if(0 !== d[0])
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        var a$0 = d[1];
        s[2] = d;
        return [0, a$0];
       case 2:
        var f = match[1], _j_ = caml_obj_tag(f);
        a:
        if(250 === _j_)
         var _k_ = f[1];
        else{
         if(246 !== _j_ && 244 !== _j_){var _k_ = f; break a;}
         var _k_ = caml_call1(CamlinternalLazy[2], f);
        }
        s[2] = _k_;
        break;
       case 3:
        var g = match[1], match$0 = g[1];
        if(match$0){var a$1 = match$0[1]; return a$1;}
        var x = caml_call1(g[2], s[1]);
        g[1] = [0, x];
        return x;
       default:
        var b = match[1];
        if(b[3] <= b[4]) fill_buff(b);
        return 0 === b[3]
                ? (s[2] = 0, 0)
                : [0, caml_bytes_unsafe_get(b[2], b[4])];
     }
    }
   }
   function peek(param){
    if(! param) return 0;
    var s = param[1];
    return peek_data(s);
   }
   function junk_data(s){
    for(;;){
     var match = s[2];
     if(typeof match !== "number")
      switch(match[0]){
        case 0:
         var d = match[2]; s[1] = s[1] + 1 | 0; s[2] = d; return 0;
        case 3:
         var g = match[1];
         if(g[1]){s[1] = s[1] + 1 | 0; g[1] = 0; return 0;}
         break;
        case 4:
         var b = match[1];
         if(b[3] <= b[4]) fill_buff(b);
         return 0 === b[3]
                 ? (s[2] = 0, 0)
                 : (s[1] = s[1] + 1 | 0, b[4] = b[4] + 1 | 0, 0);
      }
     if(! peek_data(s)) return 0;
    }
   }
   function junk(param){
    if(! param) return 0;
    var data = param[1];
    return junk_data(data);
   }
   function nget_data(n, s){
    if(0 >= n) return [0, 0, s[2], 0];
    var match = peek_data(s);
    if(! match) return [0, 0, s[2], 0];
    var a = match[1];
    junk_data(s);
    var
     match$0 = nget_data(n - 1 | 0, s),
     k = match$0[3],
     d = match$0[2],
     al = match$0[1];
    return [0, [0, a, al], [0, a, d], k + 1 | 0];
   }
   function npeek(n, param){
    if(! param) return 0;
    var
     d$0 = param[1],
     match = nget_data(n, d$0),
     len = match[3],
     d = match[2],
     al = match[1];
    d$0[1] = d$0[1] - len | 0;
    d$0[2] = d;
    return al;
   }
   function next(s){
    var match = peek(s);
    if(! match) throw caml_maybe_attach_backtrace(Failure, 1);
    var a = match[1];
    junk(s);
    return a;
   }
   function empty(s){
    if(peek(s)) throw caml_maybe_attach_backtrace(Failure, 1);
    return 0;
   }
   function iter(f, strm){
    for(;;){
     var match = peek(strm);
     if(! match) return 0;
     var a = match[1];
     junk(strm);
     caml_call1(f, a);
    }
   }
   function from(f){return [0, [0, 0, [3, [0, 0, f]]]];}
   function of_list(l){
    var _h_ = 0;
    function _i_(x, l){return [0, x, l];}
    return [0, [0, 0, caml_call3(Stdlib_List[27], _i_, l, _h_)]];
   }
   function of_string(s){
    var count = [0, 0];
    return from
            (function(param){
              var c = count[1];
              return c < runtime.caml_ml_string_length(s)
                      ? (count[1]++, [0, runtime.caml_string_get(s, c)])
                      : 0;
             });
   }
   function of_bytes(s){
    var count = [0, 0];
    return from
            (function(param){
              var c = count[1];
              return c < caml_ml_bytes_length(s)
                      ? (count[1]++, [0, runtime.caml_bytes_get(s, c)])
                      : 0;
             });
   }
   function of_channel(ic){
    return [0, [0, 0, [4, [0, ic, runtime.caml_create_bytes(4096), 0, 0]]]];
   }
   function iapp(i, s){
    var _g_ = data(s);
    return [0, [0, 0, [1, data(i), _g_]]];
   }
   function icons(i, s){return [0, [0, 0, [0, i, data(s)]]];}
   function ising(i){return [0, [0, 0, [0, i, 0]]];}
   function lapp(f, s){
    return [0,
            [0,
             0,
             [2,
              [246,
               function(param){
                var _f_ = data(s);
                return [1, data(caml_call1(f, 0)), _f_];
               }]]]];
   }
   function lcons(f, s){
    return [0,
            [0,
             0,
             [2,
              [246,
               function(param){
                var _e_ = data(s);
                return [0, caml_call1(f, 0), _e_];
               }]]]];
   }
   function lsing(f){
    return [0,
            [0,
             0,
             [2, [246, function(param){return [0, caml_call1(f, 0), 0];}]]]];
   }
   var sempty = 0;
   function slazy(f){
    return [0,
            [0,
             0,
             [2, [246, function(param){return data(caml_call1(f, 0));}]]]];
   }
   function dump(f, s){
    caml_call1(Stdlib[42], cst_count);
    var _d_ = count(s);
    caml_call1(Stdlib[44], _d_);
    caml_call1(Stdlib[42], cst_data);
    dump_data(f, data(s));
    caml_call1(Stdlib[42], cst);
    return caml_call1(Stdlib[47], 0);
   }
   function dump_data(f, param){
    if(typeof param === "number") return caml_call1(Stdlib[42], cst_Sempty);
    switch(param[0]){
      case 0:
       var d = param[2], a = param[1];
       caml_call1(Stdlib[42], cst_Scons);
       caml_call1(f, a);
       caml_call1(Stdlib[42], cst$0);
       dump_data(f, d);
       return caml_call1(Stdlib[42], cst$1);
      case 1:
       var d2 = param[2], d1 = param[1];
       caml_call1(Stdlib[42], cst_Sapp);
       dump_data(f, d1);
       caml_call1(Stdlib[42], cst$2);
       dump_data(f, d2);
       return caml_call1(Stdlib[42], cst$3);
      case 2:
       return caml_call1(Stdlib[42], cst_Slazy);
      case 3:
       return caml_call1(Stdlib[42], cst_Sgen);
      default: return caml_call1(Stdlib[42], cst_Sbuffio);
    }
   }
   var
    Stream =
      [0,
       Failure,
       Error,
       from,
       of_list,
       of_string,
       of_bytes,
       of_channel,
       iter,
       next,
       empty,
       peek,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
   runtime.caml_register_global(22, Stream, "Stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Genlex
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char, Stdlib__Hashtbl, Stdlib__List, Stdlib__String, Stream
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = cst$5,
    cst$0 = cst$5,
    cst$1 = cst$5,
    cst$2 = cst$5,
    cst$4 = cst$5,
    cst$3 = cst$5,
    Stream = global_data.Stream,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    initial_buffer = caml_create_bytes(32),
    buffer = [0, initial_buffer],
    bufpos = [0, 0],
    cst_Illegal_character = "Illegal character ";
   function reset_buffer(param){
    buffer[1] = initial_buffer;
    bufpos[1] = 0;
    return;
   }
   function store(c){
    if(runtime.caml_ml_bytes_length(buffer[1]) <= bufpos[1]){
     var newbuffer = caml_create_bytes(2 * bufpos[1] | 0);
     caml_call5(Stdlib_Bytes[11], buffer[1], 0, newbuffer, 0, bufpos[1]);
     buffer[1] = newbuffer;
    }
    runtime.caml_bytes_set(buffer[1], bufpos[1], c);
    bufpos[1]++;
    return;
   }
   function get_string(param){
    var s = caml_call3(Stdlib_Bytes[8], buffer[1], 0, bufpos[1]);
    buffer[1] = initial_buffer;
    return s;
   }
   function make_lexer(keywords){
    var kwd_table = caml_call2(Stdlib_Hashtbl[1], 0, 17);
    function _a_(s){
     return caml_call3(Stdlib_Hashtbl[5], kwd_table, s, [0, s]);
    }
    caml_call2(Stdlib_List[18], _a_, keywords);
    function ident_or_keyword(id){
     try{var _u_ = caml_call2(Stdlib_Hashtbl[6], kwd_table, id); return _u_;}
     catch(_v_){
      var _t_ = caml_wrap_exception(_v_);
      if(_t_ === Stdlib[8]) return [1, id];
      throw caml_maybe_attach_backtrace(_t_, 0);
     }
    }
    function keyword_or_error(c){
     var s = caml_call2(Stdlib_String[1], 1, c);
     try{var _r_ = caml_call2(Stdlib_Hashtbl[6], kwd_table, s); return _r_;}
     catch(_s_){
      var _p_ = caml_wrap_exception(_s_);
      if(_p_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_p_, 0);
      var _q_ = caml_call2(Stdlib[28], cst_Illegal_character, s);
      throw caml_maybe_attach_backtrace([0, Stream[2], _q_], 1);
     }
    }
    function next_token(strm){
     for(;;){
      var match = caml_call1(Stream[11], strm);
      if(! match) return 0;
      var c = match[1];
      a:
      {
       b:
       {
        if(124 <= c){
         if(127 <= c){if(192 <= c) break a; break b;}
         if(125 === c) break b;
        }
        else{
         var _f_ = c - 65 | 0;
         if(57 < _f_ >>> 0){
          if(58 <= _f_) break b;
          switch(_f_ + 65 | 0){
            case 34:
             caml_call1(Stream[12], strm);
             reset_buffer(0);
             for(;;){
              var match$3 = caml_call1(Stream[11], strm);
              if(! match$3) throw caml_maybe_attach_backtrace(Stream[1], 1);
              var c$3 = match$3[1];
              if(34 === c$3){
               caml_call1(Stream[12], strm);
               return [0, [4, get_string(0)]];
              }
              if(92 === c$3){
               caml_call1(Stream[12], strm);
               try{var c$4 = escape(strm);}
               catch(_o_){
                var _j_ = caml_wrap_exception(_o_);
                if(_j_ === Stream[1])
                 throw caml_maybe_attach_backtrace([0, Stream[2], cst$1], 1);
                throw caml_maybe_attach_backtrace(_j_, 0);
               }
               store(c$4);
              }
              else{caml_call1(Stream[12], strm); store(c$3);}
             }
             break;
            case 39:
             caml_call1(Stream[12], strm);
             try{
              var match$4 = caml_call1(Stream[11], strm);
              if(! match$4) throw caml_maybe_attach_backtrace(Stream[1], 1);
              var c$5 = match$4[1];
              if(92 === c$5){
               caml_call1(Stream[12], strm);
               try{var _l_ = escape(strm), c$0 = _l_;}
               catch(_n_){
                var _k_ = caml_wrap_exception(_n_);
                if(_k_ === Stream[1])
                 throw caml_maybe_attach_backtrace([0, Stream[2], cst$2], 1);
                throw caml_maybe_attach_backtrace(_k_, 0);
               }
              }
              else{caml_call1(Stream[12], strm); var c$0 = c$5;}
             }
             catch(_m_){
              var _g_ = caml_wrap_exception(_m_);
              if(_g_ === Stream[1])
               throw caml_maybe_attach_backtrace([0, Stream[2], cst], 1);
              throw caml_maybe_attach_backtrace(_g_, 0);
             }
             var match$0 = caml_call1(Stream[11], strm);
             if(match$0 && 39 === match$0[1]){
              caml_call1(Stream[12], strm);
              return [0, [5, c$0]];
             }
             throw caml_maybe_attach_backtrace([0, Stream[2], cst$0], 1);
            case 40:
             caml_call1(Stream[12], strm);
             var match$5 = caml_call1(Stream[11], strm);
             if(match$5 && 42 === match$5[1]){
              caml_call1(Stream[12], strm);
              comment(strm);
              continue;
             }
             return [0, keyword_or_error(40)];
            case 45:
             caml_call1(Stream[12], strm);
             var match$2 = caml_call1(Stream[11], strm);
             if(match$2){
              var c$2 = match$2[1];
              if(9 >= c$2 - 48 >>> 0){
               caml_call1(Stream[12], strm);
               reset_buffer(0);
               store(45);
               store(c$2);
               return number(strm);
              }
             }
             reset_buffer(0);
             store(45);
             return ident2(strm);
            case 9:
            case 10:
            case 12:
            case 13:
            case 26:
            case 32:
             caml_call1(Stream[12], strm); continue;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
             caml_call1(Stream[12], strm);
             reset_buffer(0);
             store(c);
             return number(strm);
            case 33:
            case 35:
            case 36:
            case 37:
            case 38:
            case 42:
            case 43:
            case 47:
            case 58:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64: break;
            default: break b;
          }
         }
         else{
          var _h_ = _f_ - 26 | 0;
          if(5 < _h_ >>> 0) break a;
          switch(_h_){case 4: break a;case 1:case 3: break;default: break b;
          }
         }
        }
        caml_call1(Stream[12], strm);
        reset_buffer(0);
        store(c);
        return ident2(strm);
       }
       caml_call1(Stream[12], strm);
       return [0, keyword_or_error(c)];
      }
      caml_call1(Stream[12], strm);
      reset_buffer(0);
      store(c);
      for(;;){
       var match$1 = caml_call1(Stream[11], strm);
       a:
       if(match$1){
        var c$1 = match$1[1];
        if(91 <= c$1){
         var _i_ = c$1 - 95 | 0;
         if(27 < _i_ >>> 0){if(97 > _i_) break a;} else if(1 === _i_) break a;
        }
        else
         if(48 <= c$1){
          if(6 >= c$1 - 58 >>> 0) break a;
         }
         else if(39 !== c$1) break a;
        caml_call1(Stream[12], strm);
        store(c$1);
        continue;
       }
       return [0, ident_or_keyword(get_string(0))];
      }
     }
    }
    function ident2(strm){
     for(;;){
      var match = caml_call1(Stream[11], strm);
      a:
      if(match){
       var c = match[1];
       if(94 <= c){
        var _e_ = c - 95 | 0;
        if(30 < _e_ >>> 0){
         if(32 <= _e_) break a;
        }
        else if(29 !== _e_) break a;
       }
       else
        if(65 <= c){
         if(92 !== c) break a;
        }
        else{
         if(33 > c) break a;
         switch(c - 33 | 0){
           case 0:
           case 2:
           case 3:
           case 4:
           case 5:
           case 9:
           case 10:
           case 12:
           case 14:
           case 25:
           case 27:
           case 28:
           case 29:
           case 30:
           case 31: break;
           default: break a;
         }
        }
       caml_call1(Stream[12], strm);
       store(c);
       continue;
      }
      return [0, ident_or_keyword(get_string(0))];
     }
    }
    function number(strm){
     for(;;){
      var match = caml_call1(Stream[11], strm);
      a:
      if(match){
       var c = match[1];
       if(58 <= c){
        if(69 !== c && 101 !== c) break a;
        caml_call1(Stream[12], strm);
        store(69);
        return exponent_part(strm);
       }
       if(46 === c){
        caml_call1(Stream[12], strm);
        store(46);
        for(;;){
         var match$0 = caml_call1(Stream[11], strm);
         if(match$0){
          var c$0 = match$0[1], _d_ = c$0 - 69 | 0;
          if(32 < _d_ >>> 0){
           if(9 >= _d_ + 21 >>> 0){
            caml_call1(Stream[12], strm);
            store(c$0);
            continue;
           }
          }
          else if(30 < _d_ - 1 >>> 0){
           caml_call1(Stream[12], strm);
           store(69);
           return exponent_part(strm);
          }
         }
         return [0, [3, caml_float_of_string(get_string(0))]];
        }
       }
       if(48 <= c){caml_call1(Stream[12], strm); store(c); continue;}
      }
      return [0, [2, runtime.caml_int_of_string(get_string(0))]];
     }
    }
    function exponent_part(strm){
     var match = caml_call1(Stream[11], strm);
     a:
     if(match){
      var c = match[1];
      if(43 !== c && 45 !== c) break a;
      caml_call1(Stream[12], strm);
      store(c);
      return end_exponent_part(strm);
     }
     return end_exponent_part(strm);
    }
    function end_exponent_part(strm){
     for(;;){
      var match = caml_call1(Stream[11], strm);
      if(match){
       var c = match[1];
       if(9 >= c - 48 >>> 0){
        caml_call1(Stream[12], strm);
        store(c);
        continue;
       }
      }
      return [0, [3, caml_float_of_string(get_string(0))]];
     }
    }
    function escape(strm){
     var match = caml_call1(Stream[11], strm);
     if(! match) throw caml_maybe_attach_backtrace(Stream[1], 1);
     var c1 = match[1];
     if(58 <= c1){
      var switcher = c1 - 110 | 0;
      if(6 >= switcher >>> 0)
       switch(switcher){
         case 0:
          caml_call1(Stream[12], strm); return 10;
         case 4:
          caml_call1(Stream[12], strm); return 13;
         case 6:
          caml_call1(Stream[12], strm); return 9;
       }
     }
     else if(48 <= c1){
      caml_call1(Stream[12], strm);
      var match$0 = caml_call1(Stream[11], strm);
      if(match$0){
       var c2 = match$0[1];
       if(9 >= c2 - 48 >>> 0){
        caml_call1(Stream[12], strm);
        var match$1 = caml_call1(Stream[11], strm);
        if(match$1){
         var c3 = match$1[1];
         if(9 >= c3 - 48 >>> 0){
          caml_call1(Stream[12], strm);
          return caml_call1
                  (Stdlib_Char[1],
                   (((c1 - 48 | 0) * 100 | 0) + ((c2 - 48 | 0) * 10 | 0) | 0)
                   + (c3 - 48 | 0)
                   | 0);
         }
        }
        throw caml_maybe_attach_backtrace([0, Stream[2], cst$4], 1);
       }
      }
      throw caml_maybe_attach_backtrace([0, Stream[2], cst$3], 1);
     }
     caml_call1(Stream[12], strm);
     return c1;
    }
    function comment(strm){
     for(;;){
      var match = caml_call1(Stream[11], strm);
      if(! match) throw caml_maybe_attach_backtrace(Stream[1], 1);
      var switcher = match[1] - 40 | 0;
      if(2 >= switcher >>> 0)
       switch(switcher){
         case 0:
          caml_call1(Stream[12], strm);
          var match$0 = caml_call1(Stream[11], strm);
          if(! match$0) throw caml_maybe_attach_backtrace(Stream[1], 1);
          if(42 === match$0[1]){
           caml_call1(Stream[12], strm);
           comment(strm);
           continue;
          }
          caml_call1(Stream[12], strm);
          continue;
         case 1: break;
         default:
          caml_call1(Stream[12], strm);
          for(;;){
           var match$1 = caml_call1(Stream[11], strm);
           if(! match$1) throw caml_maybe_attach_backtrace(Stream[1], 1);
           var _c_ = match$1[1];
           if(41 === _c_){caml_call1(Stream[12], strm); return;}
           if(42 !== _c_) break;
           caml_call1(Stream[12], strm);
          }
          caml_call1(Stream[12], strm);
          continue;
       }
      caml_call1(Stream[12], strm);
     }
    }
    return function(input){
     function _b_(count){return next_token(input);}
     return caml_call1(Stream[3], _b_);};
   }
   var Genlex = [0, make_lexer];
   runtime.caml_register_global(14, Genlex, "Genlex");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
