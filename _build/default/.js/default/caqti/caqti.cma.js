// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Caqti_type_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_type_sig = [0];
   runtime.caml_register_global(0, Caqti_type_sig, "Caqti_type_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_type
//# unitInfo: Requires: Ptime, Stdlib__Bool, Stdlib__Buffer, Stdlib__Float, Stdlib__Format, Stdlib__Int, Stdlib__Int32, Stdlib__Int64, Stdlib__String
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_S = "%S",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " \xc3\x97 ",
    cst$0 = ", ",
    bool = [0, 0],
    int$0 = [0, 1],
    int16 = [0, 2],
    int32 = [0, 3],
    int64 = [0, 4],
    float$0 = [0, 5],
    string = [0, 6],
    octets = [0, 7],
    pdate = [0, 8],
    ptime = [0, 9],
    ptime_span = [0, 10],
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Ptime = global_data.Ptime,
    Stdlib_Bool = global_data.Stdlib__Bool,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib_String = global_data.Stdlib__String,
    Reject = [248, "Caqti_type.Reject", caml_fresh_oo_id(0)],
    _v_ = [0, 0],
    cst_option = " option",
    cst_unit = "unit",
    cst_redacted = " redacted",
    cst_Some = "Some ",
    cst_None = "None",
    cst_redacted$0 = "#redacted#",
    _u_ = [0, 0],
    cst_Serial = "Serial",
    _o_ = [0, [5, 0, 0, 0, [12, 108, 0]], "%ldl"],
    _p_ = [0, [7, 0, 0, 0, [12, 76, 0]], "%LdL"],
    _q_ = [0, [8, [0, 0, 5], 0, 0, 0], "%F"],
    _r_ = [0, [3, 0, 0], cst_S],
    _s_ = [0, [3, 0, 0], cst_S],
    _t_ =
      [0,
       [4,
        0,
        0,
        0,
        [12, 45, [4, 0, [0, 2, 2], 0, [12, 45, [4, 0, [0, 2, 2], 0, 0]]]]],
       "%d-%02d-%02d"],
    cst_bool = "bool",
    cst_int = "int",
    cst_int16 = "int16",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_float = "float",
    cst_string = "string",
    cst_octets = "octets",
    cst_pdate = "pdate",
    cst_ptime = "ptime",
    cst_ptime_span = "ptime_span",
    _a_ = [0, 0],
    _b_ = [0, 0],
    _c_ = [0, 0],
    _d_ = [0, 0],
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _i_ = [0, 0],
    _j_ = [0, 0],
    _k_ = [0, 0],
    _l_ = [0, 0],
    _m_ = [0, 0],
    _n_ = [0, 0];
   function unify(ft1, ft2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    if(typeof ft1 === "number"){
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         switch(ft1){
                           case 0:
                            if(typeof ft2 !== "number") break a;
                            if(ft2) break a;
                            return _a_;
                           case 1:
                            if(typeof ft2 !== "number") break q;
                            if(1 === ft2) return _b_;
                            if(ft2) break q;
                            break c;
                           case 2:
                            if(typeof ft2 !== "number") break q;
                            if(2 === ft2) return _c_;
                            if(3 <= ft2) break q;
                            break c;
                           case 3:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 3:
                                return _d_;
                               case 2:
                                break f;
                               case 0:
                               case 1:
                                break c;
                               default: break r;
                             }
                            break r;
                           case 4:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 4:
                                return _e_;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               default: break r;
                             }
                            break r;
                           case 5:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 5:
                                return _f_;
                               case 4:
                                break i;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               default: break s;
                             }
                            break s;
                           case 6:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 6:
                                return _g_;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               case 4:
                               case 5:
                                break i;
                               default: break s;
                             }
                            break s;
                           case 7:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 7:
                                return _h_;
                               case 6:
                                break l;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               case 4:
                               case 5:
                                break i;
                               default: break t;
                             }
                            break t;
                           case 8:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 8:
                                return _i_;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               case 4:
                               case 5:
                                break i;
                               case 6:
                               case 7:
                                break l;
                               default: break t;
                             }
                            break t;
                           case 9:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 9:
                                return _j_;
                               case 8:
                                break o;
                               case 10: break;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               case 4:
                               case 5:
                                break i;
                               default: break l;
                             }
                            break;
                           default:
                            if(typeof ft2 === "number")
                             switch(ft2){
                               case 10:
                                return _k_;
                               case 0:
                               case 1:
                                break c;
                               case 2:
                               case 3:
                                break f;
                               case 4:
                               case 5:
                                break i;
                               case 6:
                               case 7:
                                break l;
                               default: break o;
                             }
                         }
                         if(typeof ft1 !== "number") break n;
                         if(10 === ft1) break p;
                         break n;
                        }
                        if(typeof ft1 !== "number") break k;
                        if(8 === ft1) break m;
                        break k;
                       }
                       if(typeof ft1 !== "number") break h;
                       if(6 === ft1) break j;
                       break h;
                      }
                      if(typeof ft1 !== "number") break e;
                      if(4 === ft1) break g;
                      break e;
                     }
                     if(typeof ft1 !== "number") break b;
                     if(2 === ft1) break d;
                     break b;
                    }
                    var name1 = ft1[1];
                    if(typeof ft2 !== "number"){
                     var name2 = ft2[1];
                     return runtime.caml_string_equal(name1, name2) ? _l_ : 0;
                    }
                    switch(ft2){
                      case 10: break;
                      case 0:
                      case 1:
                       break c;
                      case 2:
                      case 3:
                       break f;
                      case 4:
                      case 5:
                       break i;
                      case 6:
                      case 7:
                       break l;
                      default: break o;
                    }
                   }
                   return 0;
                  }
                  if(typeof ft2 !== "number" || 9 !== ft2) break m;
                 }
                 return 0;
                }
                return 0;
               }
               if(typeof ft2 !== "number" || 7 !== ft2) break j;
              }
              return 0;
             }
             return 0;
            }
            if(typeof ft2 !== "number" || 5 !== ft2) break g;
           }
           return 0;
          }
          return 0;
         }
         if(typeof ft2 !== "number" || 3 !== ft2) break d;
        }
        return 0;
       }
       return 0;
      }
      if(typeof ft2 !== "number" || 1 !== ft2) break a;
     }
     return 0;
    }
    return 0;
   }
   function equal_value(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return Stdlib_Bool[2];
       case 1:
        return Stdlib_Int[8];
       case 2:
        return Stdlib_Int[8];
       case 3:
        return Stdlib_Int32[17];
       case 4:
        return Stdlib_Int64[17];
       case 5:
        return Stdlib_Float[22];
       case 6:
        return Stdlib_String[9];
       case 7:
        return Stdlib_String[9];
       case 8:
        return Ptime[13];
       case 9:
        return Ptime[13];
       default: return Ptime[1][11];
     }
    return Stdlib_String[9];
   }
   function to_string(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_bool;
       case 1:
        return cst_int;
       case 2:
        return cst_int16;
       case 3:
        return cst_int32;
       case 4:
        return cst_int64;
       case 5:
        return cst_float;
       case 6:
        return cst_string;
       case 7:
        return cst_octets;
       case 8:
        return cst_pdate;
       case 9:
        return cst_ptime;
       default: return cst_ptime_span;
     }
    var name = param[1];
    return name;
   }
   function pp(ppf, ft){
    var _aU_ = to_string(ft);
    return caml_call2(Stdlib_Format[13], ppf, _aU_);
   }
   var pp_ptime = caml_call4(Ptime[33], _n_, 0, _m_, 0);
   function pp_value(ppf, param){
    var _aT_ = param[1];
    if(typeof _aT_ === "number")
     switch(_aT_){
       case 0:
        var x = param[2]; return caml_call2(Stdlib_Format[25], ppf, x);
       case 1:
        var x$0 = param[2]; return caml_call2(Stdlib_Format[19], ppf, x$0);
       case 2:
        var x$1 = param[2]; return caml_call2(Stdlib_Format[19], ppf, x$1);
       case 3:
        var x$2 = param[2];
        return caml_call3(Stdlib_Format[137], ppf, _o_, x$2);
       case 4:
        var x$3 = param[2];
        return caml_call3(Stdlib_Format[137], ppf, _p_, x$3);
       case 5:
        var x$4 = param[2];
        return caml_call3(Stdlib_Format[137], ppf, _q_, x$4);
       case 6:
        var x$5 = param[2];
        return caml_call3(Stdlib_Format[137], ppf, _r_, x$5);
       case 7:
        var x$6 = param[2];
        return caml_call3(Stdlib_Format[137], ppf, _s_, x$6);
       case 8:
        var
         x$7 = param[2],
         match = caml_call2(Ptime[23], 0, x$7),
         d = match[3],
         m = match[2],
         y = match[1];
        return caml_call5(Stdlib_Format[137], ppf, _t_, y, m, d);
       case 9:
        var x$8 = param[2]; return caml_call2(pp_ptime, ppf, x$8);
       default: var x$9 = param[2]; return caml_call2(Ptime[1][19], ppf, x$9);
     }
    var x$10 = param[2];
    return caml_call2(Stdlib_Format[13], ppf, x$10);
   }
   function unify$0(t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     a:
     {
      b:
      {
       c:
       {
        d:
        {
         switch(t1$0[0]){
           case 0:
            var ft1 = t1$0[1];
            if(0 !== t2$0[0]) break a;
            var ft2 = t2$0[1];
            return unify(ft1, ft2);
           case 1:
            var t1$1 = t1$0[1];
            switch(t2$0[0]){
              case 0:
               break c;
              case 1:
               var t2$1 = t2$0[1]; return unify$0(t1$1, t2$1) ? _v_ : 0;
            }
            break;
           case 2:
            var id1 = t1$0[1];
            switch(t2$0[0]){
              case 2:
               var id2 = t2$0[1], serial = id2[1], is_serial = id1[2];
               return caml_call1(is_serial, serial);
              case 3: break;
              default: break c;
            }
            break;
           default:
            var t1$2 = t1$0[2];
            switch(t2$0[0]){
              case 2:
               break d;
              case 3:
               var t2$2 = t2$0[2], t1$0 = t1$2, t2$0 = t2$2; continue;
              default: break c;
            }
         }
         if(2 !== t1$0[0]) break b;
        }
        return 0;
       }
       if(1 !== t2$0[0]) break a;
      }
      return 0;
     }
     return 0;
    }
   }
   function equal_value$0(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var ft = param$0[1]; return equal_value(ft);
       case 1:
        var t = param$0[1], f = equal_value$0(t);
        return function(x$0, y$0){
         if(x$0){
          if(y$0){var y = y$0[1], x = x$0[1]; return caml_call2(f, x, y);}
         }
         else if(! y$0) return 1;
         return 0;};
       case 2:
        var prod = param$0[3]; return equal_value_prod(prod);
       default: var t$0 = param$0[2], param$0 = t$0;
     }
   }
   function equal_value_prod(param){
    if(! param) return function(param, _aS_){return 1;};
    var
     prod = param[3],
     p = param[2],
     t = param[1],
     eq_first = equal_value$0(t),
     eq_rest = equal_value_prod(prod);
    return function(x, y){
     var
      _aQ_ = caml_call1(p, y),
      _aR_ = caml_call2(eq_first, caml_call1(p, x), _aQ_);
     return _aR_ ? eq_rest(x, y) : _aR_;};
   }
   function length(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        return 1;
       case 1:
        var t = param$0[1], param$0 = t; break;
       case 2:
        var
         prod = param$0[3],
         loop =
           function(param){
            if(! param) return function(_aP_){return _aP_;};
            var prod = param[3], t = param[1];
            return function(n){
             var _aO_ = n + length(t) | 0;
             return loop(prod)(_aO_);};
           };
        return loop(prod)(0);
       default: var t$0 = param$0[2], param$0 = t$0;
     }
   }
   function pp_at(prec, ppf, param){
    switch(param[0]){
      case 0:
       var ft = param[1], _aM_ = to_string(ft);
       return caml_call2(Stdlib_Format[13], ppf, _aM_);
      case 1:
       var t = param[1];
       pp_at(1, ppf, t);
       return caml_call2(Stdlib_Format[13], ppf, cst_option);
      case 2:
       var match = param[3];
       if(! match) return caml_call2(Stdlib_Format[13], ppf, cst_unit);
       var prod = match[3], t0 = match[1];
       if(0 < prec) caml_call2(Stdlib_Format[23], ppf, 40);
       pp_at(1, ppf, t0);
       var param$0 = prod;
       for(;;){
        if(! param$0){
         var _aN_ = 0 < prec ? 1 : 0;
         return _aN_ ? caml_call2(Stdlib_Format[23], ppf, 41) : _aN_;
        }
        var prod$0 = param$0[3], t$0 = param$0[1];
        caml_call2(Stdlib_Format[13], ppf, cst);
        pp_at(1, ppf, t$0);
        var param$0 = prod$0;
       }
       break;
      default:
       var t$1 = param[2];
       pp_at(1, ppf, t$1);
       return caml_call2(Stdlib_Format[13], ppf, cst_redacted);
    }
   }
   function pp$0(ppf){
    var _aK_ = 0;
    return function(_aL_){return pp_at(_aK_, ppf, _aL_);};
   }
   function pp_any(ppf, param){var t = param[1]; return pp_at(0, ppf, t);}
   function pp_value$0(ppf, param){
    var param$0 = param;
    for(;;){
     var match = param$0[1];
     switch(match[0]){
       case 0:
        var fv = param$0[2], ft = match[1]; return pp_value(ppf, [0, ft, fv]);
       case 1:
        var match$0 = param$0[2], t = match[1];
        if(! match$0) return caml_call2(Stdlib_Format[13], ppf, cst_None);
        var x = match$0[1];
        caml_call2(Stdlib_Format[13], ppf, cst_Some);
        var param$0 = [0, t, x];
        break;
       case 2:
        var x$0 = param$0[2], prod = match[3], i = 0, param$1 = prod;
        for(;;){
         if(! param$1) return 0;
         var prod$0 = param$1[3], p = param$1[2], t$0 = param$1[1];
         if(0 < i) caml_call2(Stdlib_Format[13], ppf, cst$0);
         pp_value$0(ppf, [0, t$0, caml_call1(p, x$0)]);
         var i$0 = i + 1 | 0, i = i$0, param$1 = prod$0;
        }
        break;
       default: return caml_call2(Stdlib_Format[13], ppf, cst_redacted$0);
     }
    }
   }
   function show(t){
    var
     buf = caml_call1(Stdlib_Buffer[1], 64),
     ppf = caml_call1(Stdlib_Format[114], buf);
    pp$0(ppf)(t);
    caml_call2(Stdlib_Format[38], ppf, 0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function field(ft){return [0, ft];}
   function option(t){return [1, t];}
   function product(intro, prod){
    var Serial = [248, cst_Serial, caml_fresh_oo_id(0)];
    function is_serial(param){return param === Serial ? _u_ : 0;}
    return [2, [0, Serial, is_serial], intro, prod];
   }
   function proj(t, p, prod){return [0, t, p, prod];}
   var unit = product(0, 0), proj_end = 0;
   function tup2(t1, t2){
    function intro(x1, x2){return [0, x1, x2];}
    var _aH_ = [0, t2, function(_aJ_){return _aJ_[2];}, proj_end];
    return product(intro, [0, t1, function(_aI_){return _aI_[1];}, _aH_]);
   }
   function tup3(t1, t2, t3){
    function intro(x1, x2, x3){return [0, x1, x2, x3];}
    var
     _aG_ = [0, t3, function(param){var x = param[3]; return x;}, proj_end],
     _aF_ = [0, t2, function(param){var x = param[2]; return x;}, _aG_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _aF_]);
   }
   function tup4(t1, t2, t3, t4){
    function intro(x1, x2, x3, x4){return [0, x1, x2, x3, x4];}
    var
     _aE_ = [0, t4, function(param){var x = param[4]; return x;}, proj_end],
     _aD_ = [0, t3, function(param){var x = param[3]; return x;}, _aE_],
     _aC_ = [0, t2, function(param){var x = param[2]; return x;}, _aD_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _aC_]);
   }
   function t5(t1, t2, t3, t4, t5){
    function intro(x1, x2, x3, x4, x5){return [0, x1, x2, x3, x4, x5];}
    var
     _aB_ = [0, t5, function(param){var x = param[5]; return x;}, proj_end],
     _aA_ = [0, t4, function(param){var x = param[4]; return x;}, _aB_],
     _az_ = [0, t3, function(param){var x = param[3]; return x;}, _aA_],
     _ay_ = [0, t2, function(param){var x = param[2]; return x;}, _az_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _ay_]);
   }
   function t6(t1, t2, t3, t4, t5, t6){
    function intro(x1, x2, x3, x4, x5, x6){return [0, x1, x2, x3, x4, x5, x6];
    }
    var
     _ax_ = [0, t6, function(param){var x = param[6]; return x;}, proj_end],
     _aw_ = [0, t5, function(param){var x = param[5]; return x;}, _ax_],
     _av_ = [0, t4, function(param){var x = param[4]; return x;}, _aw_],
     _au_ = [0, t3, function(param){var x = param[3]; return x;}, _av_],
     _at_ = [0, t2, function(param){var x = param[2]; return x;}, _au_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _at_]);
   }
   function t7(t1, t2, t3, t4, t5, t6, t7){
    function intro(x1, x2, x3, x4, x5, x6, x7){return [0, x1, x2, x3, x4, x5, x6, x7];
    }
    var
     _as_ = [0, t7, function(param){var x = param[7]; return x;}, proj_end],
     _ar_ = [0, t6, function(param){var x = param[6]; return x;}, _as_],
     _aq_ = [0, t5, function(param){var x = param[5]; return x;}, _ar_],
     _ap_ = [0, t4, function(param){var x = param[4]; return x;}, _aq_],
     _ao_ = [0, t3, function(param){var x = param[3]; return x;}, _ap_],
     _an_ = [0, t2, function(param){var x = param[2]; return x;}, _ao_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _an_]);
   }
   function t8(t1, t2, t3, t4, t5, t6, t7, t8){
    function intro(x1, x2, x3, x4, x5, x6, x7, x8){return [0, x1, x2, x3, x4, x5, x6, x7, x8];
    }
    var
     _am_ = [0, t8, function(param){var x = param[8]; return x;}, proj_end],
     _al_ = [0, t7, function(param){var x = param[7]; return x;}, _am_],
     _ak_ = [0, t6, function(param){var x = param[6]; return x;}, _al_],
     _aj_ = [0, t5, function(param){var x = param[5]; return x;}, _ak_],
     _ai_ = [0, t4, function(param){var x = param[4]; return x;}, _aj_],
     _ah_ = [0, t3, function(param){var x = param[3]; return x;}, _ai_],
     _ag_ = [0, t2, function(param){var x = param[2]; return x;}, _ah_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _ag_]);
   }
   function t9(t1, t2, t3, t4, t5, t6, t7, t8, t9){
    function intro(x1, x2, x3, x4, x5, x6, x7, x8, x9){return [0, x1, x2, x3, x4, x5, x6, x7, x8, x9];
    }
    var
     _af_ = [0, t9, function(param){var x = param[9]; return x;}, proj_end],
     _ae_ = [0, t8, function(param){var x = param[8]; return x;}, _af_],
     _ad_ = [0, t7, function(param){var x = param[7]; return x;}, _ae_],
     _ac_ = [0, t6, function(param){var x = param[6]; return x;}, _ad_],
     _ab_ = [0, t5, function(param){var x = param[5]; return x;}, _ac_],
     _aa_ = [0, t4, function(param){var x = param[4]; return x;}, _ab_],
     _$_ = [0, t3, function(param){var x = param[3]; return x;}, _aa_],
     ___ = [0, t2, function(param){var x = param[2]; return x;}, _$_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, ___]);
   }
   function t10(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10){
    function intro(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10){return [0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10];
    }
    var
     _Z_ = [0, t10, function(param){var x = param[10]; return x;}, proj_end],
     _Y_ = [0, t9, function(param){var x = param[9]; return x;}, _Z_],
     _X_ = [0, t8, function(param){var x = param[8]; return x;}, _Y_],
     _W_ = [0, t7, function(param){var x = param[7]; return x;}, _X_],
     _V_ = [0, t6, function(param){var x = param[6]; return x;}, _W_],
     _U_ = [0, t5, function(param){var x = param[5]; return x;}, _V_],
     _T_ = [0, t4, function(param){var x = param[4]; return x;}, _U_],
     _S_ = [0, t3, function(param){var x = param[3]; return x;}, _T_],
     _R_ = [0, t2, function(param){var x = param[2]; return x;}, _S_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _R_]);
   }
   function t11(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11){
    function intro(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11){return [0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11];
    }
    var
     _Q_ = [0, t11, function(param){var x = param[11]; return x;}, proj_end],
     _P_ = [0, t10, function(param){var x = param[10]; return x;}, _Q_],
     _O_ = [0, t9, function(param){var x = param[9]; return x;}, _P_],
     _N_ = [0, t8, function(param){var x = param[8]; return x;}, _O_],
     _M_ = [0, t7, function(param){var x = param[7]; return x;}, _N_],
     _L_ = [0, t6, function(param){var x = param[6]; return x;}, _M_],
     _K_ = [0, t5, function(param){var x = param[5]; return x;}, _L_],
     _J_ = [0, t4, function(param){var x = param[4]; return x;}, _K_],
     _I_ = [0, t3, function(param){var x = param[3]; return x;}, _J_],
     _H_ = [0, t2, function(param){var x = param[2]; return x;}, _I_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _H_]);
   }
   function t12(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12){
    function intro(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12){return [0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12];
    }
    var
     _G_ = [0, t12, function(param){var x = param[12]; return x;}, proj_end],
     _F_ = [0, t11, function(param){var x = param[11]; return x;}, _G_],
     _E_ = [0, t10, function(param){var x = param[10]; return x;}, _F_],
     _D_ = [0, t9, function(param){var x = param[9]; return x;}, _E_],
     _C_ = [0, t8, function(param){var x = param[8]; return x;}, _D_],
     _B_ = [0, t7, function(param){var x = param[7]; return x;}, _C_],
     _A_ = [0, t6, function(param){var x = param[6]; return x;}, _B_],
     _z_ = [0, t5, function(param){var x = param[5]; return x;}, _A_],
     _y_ = [0, t4, function(param){var x = param[4]; return x;}, _z_],
     _x_ = [0, t3, function(param){var x = param[3]; return x;}, _y_],
     _w_ = [0, t2, function(param){var x = param[2]; return x;}, _x_];
    return product
            (intro,
             [0, t1, function(param){var x = param[1]; return x;}, _w_]);
   }
   function custom(encode, decode, rep){
    function encode$0(x){
     var match = caml_call1(encode, x);
     if(0 === match[0]){var y = match[1]; return y;}
     var msg = match[1];
     throw caml_maybe_attach_backtrace([0, Reject, msg], 1);
    }
    function decode$0(y){
     var match = caml_call1(decode, y);
     if(0 === match[0]){var x = match[1]; return x;}
     var msg = match[1];
     throw caml_maybe_attach_backtrace([0, Reject, msg], 1);
    }
    return product(decode$0, [0, rep, encode$0, proj_end]);
   }
   function redacted(t){return [3, -780714144, t];}
   function enum$0(encode, decode, name){
    function decode$0(y){
     var match = caml_call1(decode, y);
     if(0 === match[0]){var x = match[1]; return x;}
     var msg = match[1];
     throw caml_maybe_attach_backtrace([0, Reject, msg], 1);
    }
    return product(decode$0, [0, [0, [0, name]], encode, proj_end]);
   }
   var
    Caqti_type =
      [0,
       Reject,
       [0, unify, equal_value, to_string, pp, pp_value],
       unify$0,
       equal_value$0,
       length,
       pp$0,
       pp_any,
       pp_value$0,
       show,
       field,
       [0,
        bool,
        int$0,
        int16,
        int32,
        int64,
        float$0,
        string,
        octets,
        pdate,
        ptime,
        ptime_span,
        enum$0,
        product,
        proj,
        proj_end,
        custom,
        option,
        redacted,
        unit,
        tup2,
        tup3,
        tup4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        tup2,
        tup3,
        tup4],
       bool,
       int$0,
       int16,
       int32,
       int64,
       float$0,
       string,
       octets,
       pdate,
       ptime,
       ptime_span,
       enum$0,
       product,
       proj,
       proj_end,
       custom,
       option,
       redacted,
       unit,
       tup2,
       tup3,
       tup4,
       t5,
       t6,
       t7,
       t8,
       t9,
       t10,
       t11,
       t12,
       tup2,
       tup3,
       tup4];
   runtime.caml_register_global(63, Caqti_type, "Caqti_type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_switch_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_switch_sig = [0];
   runtime.caml_register_global(0, Caqti_switch_sig, "Caqti_switch_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_stream_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_stream_sig = [0];
   runtime.caml_register_global(0, Caqti_stream_sig, "Caqti_stream_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_query
//# unitInfo: Requires: Angstrom, Bigstringaf, Caqti_type, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Printf, Stdlib__String
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$15 = "",
    cst$16 = "$$",
    cst$14 = "$(",
    cst$17 = ".",
    cst_E$0 = "E",
    cst_Q = "Q",
    cst_caqti_lib_caqti_query_ml = "caqti/lib/caqti_query.ml",
    cst_unterminated$1 = "unterminated",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "\\'",
    cst$0 = "\\\\",
    cst$13 = cst$15,
    cst$12 = cst$15,
    cst$10 = cst$15,
    cst$11 = cst$15,
    cst$9 = cst$15,
    cst = cst$15,
    cst$2 = "''",
    cst$3 = '""',
    cst$4 = "$.",
    cst$5 = cst$14,
    cst$6 = cst$16,
    cst$7 = cst$16,
    cst$8 = "--",
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Caqti_type = global_data.Caqti_type,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Angstrom = global_data.Angstrom,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_E = "E'",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r",
    _d_ = [0, [11, "\\x", [4, 6, [0, 2, 2], 0, 0]], "\\x%02x"],
    _e_ = [0, [11, cst$14, [2, 0, [12, 41, 0]]], "$(%s)"],
    cst_invalid_nesting_of_query_t =
      "invalid nesting of query tags; did you forget a `@}`?",
    _aT_ = [0, cst_caqti_lib_caqti_query_ml, 389, 64],
    _aS_ = [0, cst_caqti_lib_caqti_query_ml, 384, 53],
    cst_SQL_FRAGMENT = "... SQL FRAGMENT ...",
    _aR_ =
      [0,
       [11, "Parse error at byte ", [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]],
       "Parse error at byte %d: %s"],
    cst_Expression_cannot_contain_ = "Expression cannot contain semicolon.",
    _aQ_ = [0, cst_caqti_lib_caqti_query_ml, 318, 6],
    cst_unterminated$0 = cst_unterminated$1,
    cst_unterminated = cst_unterminated$1,
    cst_Inconsistent_parameter_sty = "Inconsistent parameter style.",
    _ar_ = [0, ";"],
    _ap_ = [3, -1],
    cst_is_not_allowed_after_param =
      "':' is not allowed after parameter reference '?'",
    _ao_ =
      [0,
       [1, [11, " is not allowed after parameter reference '?'", 0]],
       "%C is not allowed after parameter reference '?'"],
    _an_ = [0, "invalid dollar sequence"],
    _af_ = [0, [0, cst$16], 0],
    _ag_ = [0, [0, cst$16], 0],
    _R_ = [4, cst$17],
    _w_ = [0, [1, [11, " is not valid here", 0]], "%C is not valid here"],
    _h_ = [0, [0, cst$17], 0],
    _f_ =
      [0,
       [11, "Undefined variable ", [2, 0, [11, " in query ", [15, 0]]]],
       "Undefined variable %s in query %a"],
    _g_ =
      [0,
       [11,
        "While expanding ",
        [15,
         [11,
          ", lookup of ",
          [2,
           0,
           [11,
            " gives ",
            [15,
             [11,
              ", which is invalid because it contains an environment or parameter reference.",
              0]]]]]]],
       "While expanding %a, lookup of %s gives %a, which is invalid because it contains an environment or parameter reference."],
    _c_ = [5, 0],
    _b_ = [0, "NULL"],
    _a_ = [5, 0],
    cst_Caqti_query_Expand_error = "Caqti_query.Expand_error",
    ___ = [0, "invalid environment lookup"],
    cst_Caqti_query_Stag_query = "Caqti_query.Stag_query";
   function concat(sep, param$0){
    if(! param$0) return _a_;
    var
     qs$0 = param$0[2],
     q$0 = param$0[1],
     pfx = [0, sep],
     acc = 0,
     param = caml_call1(Stdlib_List[10], qs$0);
    for(;;){
     if(! param) return [5, [0, q$0, acc]];
     var
      qs = param[2],
      q = param[1],
      acc$0 = [0, pfx, [0, q, acc]],
      acc = acc$0,
      param = qs;
    }
   }
   function bool(x){return [1, 0, x];}
   function int$0(x){return [1, 1, x];}
   function float$0(x){return [1, 5, x];}
   function string(x){return [1, 6, x];}
   function octets(x){return [1, 7, x];}
   function pdate(x){return [1, 8, x];}
   function ptime(x){return [1, 9, x];}
   function ptime_span(x){return [1, 10, x];}
   function const_fields(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var ft = param$0[1]; return function(x){return [0, [1, ft, x], 0];};
       case 1:
        var t = param$0[1];
        return function(param){
         if(param){var x = param[1]; return const_fields(t)(x);}
         function _bY_(param){return _b_;}
         var _bZ_ = caml_call1(Caqti_type[5], t);
         return caml_call2(Stdlib_List[11], _bZ_, _bY_);};
       case 2:
        var pt = param$0[3]; return const_fields_product(pt);
       default: var t$0 = param$0[2], param$0 = t$0;
     }
   }
   function const_fields_product(param){
    if(! param) return function(param){return 0;};
    var pt = param[3], p = param[2], t = param[1];
    return function(x){
     var
      _bV_ = const_fields_product(pt)(x),
      _bW_ = caml_call1(p, x),
      _bX_ = const_fields(t)(_bW_);
     return caml_call2(Stdlib[37], _bX_, _bV_);};
   }
   function normal(q$2){
    var acc = 0, param = [0, q$2, 0];
    for(;;){
     if(! param){
      var qs$4 = caml_call1(Stdlib_List[10], acc);
      if(! qs$4) return _c_;
      if(qs$4[2]) return [5, qs$4];
      var q$3 = qs$4[1];
      return q$3;
     }
     var q = param[1];
     switch(q[0]){
       case 0:
        var s = q[1];
        if(caml_string_notequal(s, cst$15)){
         var qs = param[2], accL = [0, s, 0];
         a:
         {
          var accL$0 = accL, qs$5 = qs;
          b:
          for(;;){
           if(! qs$5) break a;
           var _bT_ = qs$5[1];
           switch(_bT_[0]){
             case 0:
              var s$0 = _bT_[1];
              if(caml_string_notequal(s$0, cst$15)){
               var
                qs$6 = qs$5[2],
                accL$1 = [0, s$0, accL$0],
                accL$0 = accL$1,
                qs$5 = qs$6;
               continue;
              }
              break;
             case 5:
              var match$0 = _bT_[1];
              if(match$0){
               var
                qs$8 = qs$5[2],
                qs$9 = match$0[2],
                q$1 = match$0[1],
                qs$10 = [0, q$1, [0, [5, qs$9], qs$8]],
                qs$5 = qs$10;
               continue;
              }
              break;
             default: break b;
           }
           var qs$7 = qs$5[2], qs$5 = qs$7;
          }
         }
         var
          _bU_ = caml_call1(Stdlib_List[10], accL$0),
          acc$1 = [0, [0, caml_call2(Stdlib_String[7], cst, _bU_)], acc],
          acc = acc$1,
          param = qs$5;
         continue;
        }
        break;
       case 5:
        var match = q[1];
        if(match){
         var
          qs$2 = param[2],
          qs$3 = match[2],
          q$0 = match[1],
          param = [0, q$0, [0, [5, qs$3], qs$2]];
         continue;
        }
        break;
       default:
        var qs$1 = param[2], acc$0 = [0, q, acc], acc = acc$0, param = qs$1;
        continue;
     }
     var qs$0 = param[2], param = qs$0;
    }
   }
   function equal(t1, t2){
    switch(t1[0]){
      case 0:
       var s1 = t1[1];
       if(0 !== t2[0]) return 0;
       var s2 = t2[1];
       return caml_call2(Stdlib_String[9], s1, s2);
      case 1:
       var t1$0 = t1[1];
       if(1 !== t2[0]) return 0;
       var v2 = t2[2], t2$0 = t2[1], v1 = t1[2];
       return caml_call2(Caqti_type[2][1], t1$0, t2$0)
               ? caml_call3(Caqti_type[2][2], t1$0, v1, v2)
               : 0;
      case 2:
       var s1$0 = t1[1];
       if(2 !== t2[0]) return 0;
       var s2$0 = t2[1];
       return caml_call2(Stdlib_String[9], s1$0, s2$0);
      case 3:
       var i1 = t1[1];
       if(3 !== t2[0]) return 0;
       var i2 = t2[1];
       return caml_call2(Stdlib_Int[8], i1, i2);
      case 4:
       var n1 = t1[1];
       if(4 !== t2[0]) return 0;
       var n2 = t2[1];
       return caml_call2(Stdlib_String[9], n1, n2);
      default:
       var ts1 = t1[1];
       if(5 !== t2[0]) return 0;
       var ts2 = t2[1], xs = ts1, ys = ts2;
       for(;;){
        if(xs){
         if(ys){
          var
           ys$0 = ys[2],
           y = ys[1],
           xs$0 = xs[2],
           x = xs[1],
           _bS_ = equal(x, y);
          if(! _bS_) return _bS_;
          var xs = xs$0, ys = ys$0;
          continue;
         }
        }
        else if(! ys) return 1;
        return 0;
       }
    }
   }
   var hash = Stdlib_Hashtbl[28];
   function pp(ppf, param){
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call2(Stdlib_Format[13], ppf, s);
      case 1:
       var v = param[2], t = param[1];
       return caml_call2(Caqti_type[2][5], ppf, [0, t, v]);
      case 2:
       var s$0 = param[1];
       caml_call2(Stdlib_Format[13], ppf, cst_E);
       var _bN_ = caml_ml_string_length(s$0) - 1 | 0, _bM_ = 0;
       if(_bN_ >= 0){
        var i = _bM_;
        for(;;){
         var c = caml_string_get(s$0, i);
         a:
         {
          b:
          {
           if(39 > c){
            c:
            if(14 <= c){
             if(32 <= c) break b;
            }
            else if(9 <= c){
             switch(c - 9 | 0){
               case 0:
                caml_call2(Stdlib_Format[13], ppf, cst_t); break;
               case 1:
                caml_call2(Stdlib_Format[13], ppf, cst_n); break;
               case 4:
                caml_call2(Stdlib_Format[13], ppf, cst_r); break;
               default: break c;
             }
             break a;
            }
            caml_call3(Stdlib_Format[137], ppf, _d_, c);
            break a;
           }
           if(92 === c){caml_call2(Stdlib_Format[13], ppf, cst$0); break a;}
           if(40 > c){caml_call2(Stdlib_Format[13], ppf, cst$1); break a;}
          }
          var _bP_ = caml_string_get(s$0, i);
          caml_call2(Stdlib_Format[23], ppf, _bP_);
         }
         var _bO_ = i + 1 | 0;
         if(_bN_ === i) break;
         var i = _bO_;
        }
       }
       return caml_call2(Stdlib_Format[23], ppf, 39);
      case 3:
       var n = param[1];
       caml_call2(Stdlib_Format[23], ppf, 36);
       return caml_call2(Stdlib_Format[19], ppf, n + 1 | 0);
      case 4:
       var n$0 = param[1];
       return caml_call3(Stdlib_Format[137], ppf, _e_, n$0);
      default:
       var qs = param[1], _bQ_ = function(_bR_){return pp(ppf, _bR_);};
       return caml_call2(Stdlib_List[18], _bQ_, qs);
    }
   }
   function show(q){
    var
     buf = caml_call1(Stdlib_Buffer[1], 512),
     ppf = caml_call1(Stdlib_Format[114], buf);
    pp(ppf, q);
    caml_call2(Stdlib_Format[38], ppf, 0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function pp_expand_error(ppf, param){
    var reason = param[3], var$0 = param[2], query = param[1];
    if(typeof reason === "number")
     return caml_call5(Stdlib_Format[137], ppf, _f_, var$0, pp, query);
    var expansion = reason[2];
    return caml_call7
            (Stdlib_Format[137], ppf, _g_, pp, query, var$0, pp, expansion);
   }
   var
    Expand_error = [248, cst_Caqti_query_Expand_error, caml_fresh_oo_id(0)];
   function expand(opt, f, query){
    if(opt) var sth = opt[1], final$0 = sth; else var final$0 = 0;
    function is_valid(param){
     switch(param[0]){
       case 5:
        var qs = param[1]; return caml_call2(Stdlib_List[33], is_valid, qs);
       case 3:
       case 4:
        return 0;
       default: return 1;
     }
    }
    function recurse(q){
     switch(q[0]){
       case 4:
        var
         var$0 = q[1],
         not_found =
           function(param){
            if(final$0)
             throw caml_maybe_attach_backtrace
                    ([0, Expand_error, [0, query, var$0, 1054678640]], 1);
            return q;
           };
        try{var q$1 = caml_call1(f, var$0);}
        catch(_bK_){
         var _bI_ = caml_wrap_exception(_bK_);
         if(_bI_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_bI_, 0);
         var l = caml_ml_string_length(var$0);
         if(0 < l && 46 === caml_string_get(var$0, l - 1 | 0)){
          try{
           var
            q$0 =
              normal
               (caml_call1
                 (f, caml_call3(Stdlib_String[16], var$0, 0, l - 1 | 0)));
          }
          catch(_bL_){
           var _bJ_ = caml_wrap_exception(_bL_);
           if(_bJ_ === Stdlib[8]) return not_found(0);
           throw caml_maybe_attach_backtrace(_bJ_, 0);
          }
          if(5 === q$0[0] && ! q$0[1]) return q$0;
          return [5, [0, q$0, _h_]];
         }
         return not_found(0);
        }
        if(is_valid(q$1)) return q$1;
        throw caml_maybe_attach_backtrace
               ([0, Expand_error, [0, query, var$0, [0, 144245463, q$1]]], 1);
       case 5:
        var qs = q[1]; return [5, caml_call2(Stdlib_List[20], recurse, qs)];
       default: return q;
     }
    }
    return recurse(query);
   }
   var failf = caml_call1(Stdlib_Printf[10], Angstrom[52]);
   function ign(p){
    function _bH_(param){return 0;}
    return caml_call2(Angstrom[55], p, _bH_);
   }
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function is_digit_nz(param){return 8 < param - 49 >>> 0 ? 0 : 1;}
   function is_idrfst(param){
    var _bG_ = param - 91 | 0;
    a:
    {
     if(5 < _bG_ >>> 0){
      if(57 < _bG_ + 26 >>> 0) break a;
     }
     else if(4 !== _bG_) break a;
     return 1;
    }
    return 0;
   }
   function is_idrcnt(param){
    a:
    {
     if(91 <= param){
      if(97 <= param){if(123 > param) break a;} else if(95 === param) break a;
     }
     else
      if(58 <= param){if(65 <= param) break a;} else if(48 <= param) break a;
     return 0;
    }
    return 1;
   }
   function is_space(param){
    var _bF_ = param - 9 | 0;
    a:
    {
     if(4 < _bF_ >>> 0){
      if(23 === _bF_) break a;
     }
     else if(1 < _bF_ - 2 >>> 0) break a;
     return 0;
    }
    return 1;
   }
   var
    _i_ = ign(caml_call1(Angstrom[8], cst$2)),
    _j_ = ign(caml_call1(Angstrom[5], 39)),
    _k_ = caml_call2(Angstrom[47], _j_, _i_),
    single_quoted = caml_call1(Angstrom[43], _k_),
    _l_ = ign(caml_call1(Angstrom[8], cst$3)),
    _m_ = ign(caml_call1(Angstrom[5], 34)),
    _n_ = caml_call2(Angstrom[47], _m_, _l_),
    double_quoted = caml_call1(Angstrom[43], _n_);
   function _o_(tag){
    function _by_(param){return 0;}
    var
     _bz_ = caml_call1(Angstrom[4], 36),
     _bA_ = caml_call1(Angstrom[8], tag),
     _bB_ = caml_call1(Angstrom[4], 36),
     _bC_ = caml_call2(Angstrom[58], _bB_, _bA_),
     _bD_ = caml_call2(Angstrom[59], _bC_, _bz_),
     _bE_ = caml_call2(Angstrom[40], Angstrom[6], _bD_);
    return caml_call2(Angstrom[55], _bE_, _by_);
   }
   var
    _p_ = caml_call1(Angstrom[4], 36),
    _q_ = caml_call1(Angstrom[11], is_idrcnt),
    _r_ = caml_call1(Angstrom[10], is_idrfst),
    _s_ = caml_call2(Angstrom[58], _r_, _q_),
    _t_ = caml_call1(Angstrom[16], _s_),
    _u_ = caml_call2(Angstrom[59], _t_, _p_),
    tagged_quote_cont = caml_call2(Angstrom[53], _u_, _o_);
   function _v_(c){
    if(64 <= c){
     if(96 === c){
      var
       _bo_ = caml_call1(Angstrom[4], 96),
       _bp_ = caml_call1(Angstrom[5], 96),
       _bq_ = caml_call1(Angstrom[43], _bp_);
      return caml_call2(Angstrom[59], _bq_, _bo_);
     }
    }
    else if(34 <= c)
     switch(c - 34 | 0){
       case 0:
        var _br_ = caml_call1(Angstrom[4], 34);
        return caml_call2(Angstrom[59], double_quoted, _br_);
       case 2:
        return tagged_quote_cont;
       case 5:
        var _bs_ = caml_call1(Angstrom[4], 39);
        return caml_call2(Angstrom[59], single_quoted, _bs_);
       case 11:
        var
         _bt_ =
           function(param){
            if(param && 45 === param[1]){
             var
              _bu_ = caml_call1(Angstrom[4], 10),
              _bv_ = function(_bx_){return 10 !== _bx_ ? 1 : 0;},
              _bw_ = caml_call1(Angstrom[11], _bv_);
             return caml_call2(Angstrom[59], _bw_, _bu_);
            }
            return caml_call1(Angstrom[51], 0);
           };
        return caml_call2(Angstrom[53], Angstrom[1], _bt_);
       case 25:
       case 29:
        return caml_call2(failf, _w_, c);
     }
    return caml_call1(Angstrom[51], 0);
   }
   var fragment = caml_call2(Angstrom[53], Angstrom[6], _v_);
   function _x_(s){return [0, s];}
   var
    _y_ = caml_call1(Angstrom[39], fragment),
    _z_ = caml_call1(Angstrom[16], _y_),
    verbatim = caml_call2(Angstrom[55], _z_, _x_),
    _A_ = caml_call1(Angstrom[11], is_idrcnt),
    _B_ = caml_call1(Angstrom[10], is_idrfst),
    skip_idr = caml_call2(Angstrom[58], _B_, _A_),
    _C_ = caml_call1(Angstrom[4], 46),
    _D_ = caml_call2(Angstrom[58], skip_idr, _C_),
    identifier_dot = caml_call1(Angstrom[16], _D_),
    _E_ = caml_call1(Angstrom[4], 46),
    _F_ = caml_call2(Angstrom[34], 32, _E_),
    _G_ = caml_call2(Angstrom[34], 0, skip_idr),
    _H_ = caml_call2(Angstrom[58], _G_, _F_),
    identifier_dotopt = caml_call1(Angstrom[16], _H_),
    _I_ = caml_call1(Angstrom[11], is_digit),
    _J_ = caml_call1(Angstrom[10], is_digit_nz),
    _K_ = caml_call2(Angstrom[58], _J_, _I_),
    parameter_number = caml_call1(Angstrom[16], _K_),
    _L_ = 0;
   function _M_(v){return [4, v];}
   var
    _N_ = caml_call1(Angstrom[4], 36),
    _O_ = caml_call2(Angstrom[58], _N_, identifier_dot),
    _P_ = [0, caml_call2(Angstrom[55], _O_, _M_), _L_];
   function _Q_(param){return _R_;}
   var
    _S_ = caml_call1(Angstrom[8], cst$4),
    _T_ = [0, caml_call2(Angstrom[55], _S_, _Q_), _P_];
   function _U_(v){return [4, v];}
   var
    _V_ = caml_call1(Angstrom[4], 41),
    _W_ = caml_call1(Angstrom[8], cst$5),
    _X_ = caml_call2(Angstrom[58], _W_, identifier_dotopt),
    _Y_ = caml_call2(Angstrom[59], _X_, _V_),
    _Z_ = [0, caml_call2(Angstrom[55], _Y_, _U_), _T_],
    lookup = caml_call2(Angstrom[48], ___, _Z_);
   function _$_(s){return [0, s];}
   function _aa_(param){return 36 === param ? 0 : 1;}
   var
    _ab_ = caml_call1(Angstrom[7], _aa_),
    _ac_ = caml_call1(Angstrom[39], _ab_),
    _ad_ = caml_call1(Angstrom[16], _ac_),
    nonlookup = caml_call2(Angstrom[55], _ad_, _$_);
   function _ae_(qs){
    var _bn_ = caml_call2(Stdlib[37], qs, _af_);
    return normal([5, caml_call2(Stdlib[37], _ag_, _bn_)]);
   }
   var
    _ah_ = caml_call1(Angstrom[8], cst$6),
    _ai_ = caml_call2(Angstrom[47], lookup, nonlookup),
    _aj_ = caml_call2(Angstrom[40], _ai_, _ah_),
    _ak_ = caml_call1(Angstrom[8], cst$7),
    _al_ = caml_call2(Angstrom[58], _ak_, _aj_),
    untagged_quote = caml_call2(Angstrom[55], _al_, _ae_);
   function _am_(param){
    if(36 === param){
     var
      _bc_ = [0, lookup, [0, untagged_quote, [0, verbatim, 0]]],
      _bd_ = function(iP){return [3, runtime.caml_int_of_string(iP) - 1 | 0];},
      _be_ = caml_call1(Angstrom[4], 36),
      _bf_ = caml_call2(Angstrom[58], _be_, parameter_number),
      _bg_ = [0, caml_call2(Angstrom[55], _bf_, _bd_), _bc_];
     return caml_call2(Angstrom[48], _an_, _bg_);
    }
    if(63 !== param) return verbatim;
    function _bh_(param){
     a:
     if(param){
      var c = param[1];
      if(60 <= c){
       if(124 <= c){
        if(125 === c || 127 <= c) break a;
       }
       else
        if(94 <= c){if(123 <= c) break a;} else if(91 <= c) break a;
      }
      else if(47 <= c){
       if(58 <= c){
        if(59 <= c) break a;
        var
         _bl_ =
           function(param){
            return caml_string_notequal(param, "::")
                    ? caml_call1(Angstrom[52], cst_is_not_allowed_after_param)
                    : caml_call1(Angstrom[51], 0);
           },
         _bm_ = caml_call1(Angstrom[3], 2);
        return caml_call2(Angstrom[53], _bm_, _bl_);
       }
       if(48 > c) break a;
      }
      else
       if(40 <= c){if(46 > c) break a;} else if(33 > c) break a;
      return caml_call2(failf, _ao_, c);
     }
     return caml_call1(Angstrom[51], 0);
    }
    var valid_lookahead = caml_call2(Angstrom[53], Angstrom[1], _bh_);
    function _bi_(param){return _ap_;}
    var
     _bj_ = caml_call1(Angstrom[4], 63),
     _bk_ = caml_call2(Angstrom[55], _bj_, _bi_);
    return caml_call2(Angstrom[59], _bk_, valid_lookahead);
   }
   var atom = caml_call2(Angstrom[53], Angstrom[2], _am_);
   function _aq_(param){return _ar_;}
   var
    _as_ = caml_call1(Angstrom[4], 59),
    _at_ = caml_call2(Angstrom[55], _as_, _aq_),
    atom_or_semi = caml_call2(Angstrom[47], _at_, atom);
   function reindex(atoms){
    function _ba_(param){
     if(3 === param[0] && -1 === param[1]) return 0;
     return 1;
    }
    if(caml_call2(Stdlib_List[33], _ba_, atoms))
     return caml_call1(Angstrom[51], atoms);
    var iP = 0, acc = 0, param = atoms;
    for(;;){
     if(! param){
      var _bb_ = caml_call1(Stdlib_List[10], acc);
      return caml_call1(Angstrom[51], _bb_);
     }
     var frag = param[1];
     if(3 === frag[0]){
      if(-1 !== frag[1])
       return caml_call1(Angstrom[52], cst_Inconsistent_parameter_sty);
      var
       frags$0 = param[2],
       acc$1 = [0, [3, iP], acc],
       iP$0 = iP + 1 | 0,
       iP = iP$0,
       acc = acc$1,
       param = frags$0;
     }
     else
      var
       frags = param[2],
       acc$0 = [0, frag, acc],
       acc = acc$0,
       param = frags;
    }
   }
   function _au_(param){
    if(param && 59 !== param[1])
     return caml_call1(Angstrom[52], cst_unterminated);
    return caml_call1(Angstrom[51], 0);
   }
   var stop = caml_call2(Angstrom[53], Angstrom[1], _au_);
   function _av_(qs){
    if(qs && ! qs[2]){var q = qs[1]; return q;}
    return [5, qs];
   }
   function _aw_(p){
    var
     _a8_ = caml_call2(Angstrom[57], Stdlib_List[5], atom),
     _a9_ = caml_call2(Angstrom[56], _a8_, p),
     _a__ = caml_call1(Angstrom[51], 0),
     _a$_ = caml_call2(Angstrom[58], stop, _a__);
    return caml_call2(Angstrom[47], _a$_, _a9_);
   }
   var
    _ax_ = caml_call1(Angstrom[45], _aw_),
    _ay_ = caml_call2(Angstrom[53], _ax_, reindex),
    angstrom_parser = caml_call2(Angstrom[55], _ay_, _av_);
   function _az_(param){
    return param
            ? caml_call1(Angstrom[52], cst_unterminated$0)
            : caml_call1(Angstrom[51], 0);
   }
   var stop$0 = caml_call2(Angstrom[53], Angstrom[1], _az_);
   function _aA_(qs){
    if(qs && ! qs[2]){var q = qs[1]; return q;}
    return [5, qs];
   }
   function _aB_(p){
    var
     _a4_ = caml_call2(Angstrom[57], Stdlib_List[5], atom_or_semi),
     _a5_ = caml_call2(Angstrom[56], _a4_, p),
     _a6_ = caml_call1(Angstrom[51], 0),
     _a7_ = caml_call2(Angstrom[58], stop$0, _a6_);
    return caml_call2(Angstrom[47], _a7_, _a5_);
   }
   var
    _aC_ = caml_call1(Angstrom[45], _aB_),
    _aD_ = caml_call2(Angstrom[53], _aC_, reindex),
    angstrom_parser_with_semicolon = caml_call2(Angstrom[55], _aD_, _aA_),
    _aE_ = Angstrom[50];
   function _aF_(_a3_){return 10 === _a3_ ? 1 : 0;}
   var
    _aG_ = caml_call1(Angstrom[15], _aF_),
    _aH_ = caml_call1(Angstrom[8], cst$8),
    _aI_ = caml_call2(Angstrom[58], _aH_, _aG_),
    _aJ_ = caml_call1(Angstrom[14], is_space),
    _aK_ = caml_call2(Angstrom[47], _aJ_, _aI_),
    _aL_ = caml_call1(Angstrom[38], _aK_),
    white = caml_call2(Angstrom[59], _aL_, _aE_),
    _aM_ = caml_call1(Angstrom[4], 59),
    _aN_ = caml_call2(Angstrom[59], angstrom_parser, _aM_),
    _aO_ = caml_call2(Angstrom[59], _aN_, white),
    _aP_ = caml_call1(Angstrom[38], _aO_),
    angstrom_list_parser = caml_call2(Angstrom[58], white, _aP_);
   function of_string(s){
    var match = caml_call1(Angstrom[77][1], angstrom_parser_with_semicolon);
    if(0 === match[0]){
     var _a2_ = match[1];
     if(0 === _a2_[1]){
      var
       continue$0 = _a2_[2],
       len = caml_ml_string_length(s),
       bs = caml_call3(Bigstringaf[3], 0, len, s),
       match$0 = caml_call4(continue$0, bs, 0, len, 0);
      switch(match$0[0]){
        case 0:
         var committed = match$0[1][1]; break;
        case 1:
         var committed$0 = match$0[1], q = match$0[2];
         if(committed$0 === len) return [0, q];
         var committed = committed$0;
         break;
        default:
         var msg = match$0[3], committed$1 = match$0[1];
         return [1, [0, 144245463, [0, committed$1, msg]]];
      }
      return [1,
              [0, 144245463, [0, committed, cst_Expression_cannot_contain_]]];
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
   }
   function of_string_exn(s){
    var match = of_string(s);
    if(0 === match[0]){var q = match[1]; return q;}
    var match$0 = match[1][2], msg = match$0[2], pos = match$0[1];
    return caml_call4(Stdlib_Printf[10], Stdlib[2], _aR_, pos, msg);
   }
   var Stag_query = [248, cst_Caqti_query_Stag_query, caml_fresh_oo_id(0)];
   function query(ppf, q){
    caml_call2(Stdlib_Format[80], ppf, [0, Stag_query, q]);
    caml_call2(Stdlib_Format[13], ppf, cst_SQL_FRAGMENT);
    return caml_call2(Stdlib_Format[82], ppf, 0);
   }
   function quote(ppf, q){return query(ppf, [2, q]);}
   function env(ppf, e){return query(ppf, [4, e]);}
   function param(ppf, p){return query(ppf, [3, p]);}
   function kqprintf(k, fmt){
    var elems = [0, 0], buf = caml_call1(Stdlib_Buffer[1], 512);
    function push(q){elems[1] = [0, q, elems[1]]; return 0;}
    var mode = [0, 0];
    function flush_literal(param){
     var _a1_ = mode[1];
     if(typeof _a1_ === "number" && ! _a1_) return 0;
     return caml_call1(Stdlib[2], cst_invalid_nesting_of_query_t);
    }
    function output_string(s, p, n){
     var _aZ_ = mode[1];
     if(typeof _aZ_ !== "number")
      return caml_call4(Stdlib_Buffer[18], buf, s, p, n);
     if(_aZ_) return 0;
     var _a0_ = 0 < n ? 1 : 0;
     if(! _a0_) return _a0_;
     if(0 === p && n === caml_ml_string_length(s)) return push([0, s]);
     return push([0, caml_call3(Stdlib_String[16], s, p, n)]);
    }
    var
     ppf = caml_call2(Stdlib_Format[120], output_string, flush_literal),
     match = caml_call2(Stdlib_Format[106], ppf, 0),
     print_close_stag = match[4],
     print_open_stag = match[3],
     mark_close_stag = match[2],
     mark_open_stag = match[1];
    function mark_open_stag$0(t){
     if(t[1] === Stdlib_Format[79]){
      var _aY_ = t[2];
      if(! caml_string_notequal(_aY_, cst_E$0)){
       flush_literal(0);
       mode[1] = [0, function(s){return [4, s];}];
       return cst$11;
      }
      if(! caml_string_notequal(_aY_, cst_Q)){
       flush_literal(0);
       mode[1] = [0, function(s){return [2, s];}];
       return cst$10;
      }
     }
     if(t[1] !== Stag_query) return caml_call1(mark_open_stag, t);
     var q = t[2];
     flush_literal(0);
     push(q);
     mode[1] = 1;
     return cst$9;
    }
    function mark_close_stag$0(t){
     a:
     if(t[1] === Stdlib_Format[79]){
      var _aX_ = t[2];
      if
       (caml_string_notequal(_aX_, cst_E$0)
        && caml_string_notequal(_aX_, cst_Q))
       break a;
      var match = mode[1];
      if(typeof match === "number")
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
      var mk = match[1];
      push(caml_call1(mk, caml_call1(Stdlib_Buffer[2], buf)));
      caml_call1(Stdlib_Buffer[9], buf);
      mode[1] = 0;
      return cst$13;
     }
     if(t[1] !== Stag_query) return caml_call1(mark_close_stag, t);
     var _aW_ = mode[1];
     if(typeof _aW_ === "number" && _aW_){mode[1] = 0; return cst$12;}
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
    }
    caml_call2
     (Stdlib_Format[104],
      ppf,
      [0,
       mark_open_stag$0,
       mark_close_stag$0,
       print_open_stag,
       print_close_stag]);
    caml_call2(Stdlib_Format[88], ppf, 1);
    function _aV_(ppf){
     caml_call2(Stdlib_Format[38], ppf, 0);
     return caml_call1(k, [5, caml_call1(Stdlib_List[10], elems[1])]);
    }
    return caml_call3(Stdlib_Format[144], _aV_, ppf, fmt);
   }
   function qprintf(fmt){return kqprintf(function(_aU_){return _aU_;}, fmt);}
   var
    Caqti_query =
      [0,
       concat,
       bool,
       int$0,
       float$0,
       string,
       octets,
       pdate,
       ptime,
       ptime_span,
       const_fields,
       normal,
       equal,
       hash,
       pp,
       show,
       pp_expand_error,
       Expand_error,
       expand,
       angstrom_parser,
       angstrom_parser_with_semicolon,
       angstrom_list_parser,
       of_string,
       of_string_exn,
       qprintf,
       kqprintf,
       param,
       env,
       quote,
       query];
   runtime.caml_register_global(68, Caqti_query, "Caqti_query");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_error
//# unitInfo: Requires: Caqti_query, Caqti_type, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Hashtbl, Stdlib__Obj, Stdlib__Printexc, Stdlib__Printf, Uri
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_for = " for <",
    cst$3 = ": ",
    cst_failed = "> failed",
    cst_Field_type_not_supported_a$1 =
      "Field type not supported and no fallback provided.",
    cst_caqti_lib_caqti_error_ml = "caqti/lib/caqti_error.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$1 = cst$3,
    cst$0 = cst$3,
    cst = cst$3,
    Stdlib_Format = global_data.Stdlib__Format,
    Caqti_query = global_data.Caqti_query,
    Match_failure = global_data.Match_failure,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Caqti_type = global_data.Caqti_type,
    Uri = global_data.Uri,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    _e_ =
      [0,
       [11, "Failed to load driver for <", [15, [12, 62, 0]]],
       "Failed to load driver for <%a>"],
    _f_ =
      [0,
       [11, "Cannot connect to <", [15, [12, 62, 0]]],
       "Cannot connect to <%a>"],
    cst_During_post_connect = "During post-connect: ",
    _g_ =
      [0,
       [11, "Request to <", [15, [11, cst_failed, 0]]],
       "Request to <%a> failed"],
    _h_ =
      [0,
       [11, "Cannot load driver for <", [15, [12, 62, 0]]],
       "Cannot load driver for <%a>"],
    _i_ =
      [0,
       [11, "Failed to bind ", [15, [11, cst_for, [15, [12, 62, 0]]]]],
       "Failed to bind %a for <%a>"],
    _k_ =
      [0,
       [11, "Cannot decode ", [15, [11, " from <", [15, [12, 62, 0]]]]],
       "Cannot decode %a from <%a>"],
    _l_ =
      [0,
       [11, "Failed to connect to <", [15, [12, 62, 0]]],
       "Failed to connect to <%a>"],
    _m_ =
      [0,
       [11, "Cannot encode ", [15, [11, cst_for, [15, [12, 62, 0]]]]],
       "Cannot encode %a for <%a>"],
    _n_ =
      [0,
       [11, "Response from <", [15, [11, cst_failed, 0]]],
       "Response from <%a> failed"],
    _j_ =
      [0,
       [11, "Unexpected result from <", [15, [12, 62, 0]]],
       "Unexpected result from <%a>"],
    _o_ = [0, cst_caqti_lib_caqti_error_ml, 270, 48],
    cst_Field_type_not_supported_a$0 = cst_Field_type_not_supported_a$1,
    cst_Field_type_not_supported_a = cst_Field_type_not_supported_a$1,
    _d_ = [0, [11, " Query: ", [3, 0, [12, 46, 0]]], " Query: %S."],
    _c_ = [0, "_"],
    _b_ = [0, cst_caqti_lib_caqti_error_ml, 96, 10],
    _a_ =
      [0,
       [11,
        "Missing call to Caqti_error.define_msg for (",
        [2, 0, [11, " _ : Caqti_error.msg)]", 0]]],
       "Missing call to Caqti_error.define_msg for (%s _ : Caqti_error.msg)]"],
    cst_too_many_connections = "too many connections",
    cst_exclusion_violation = "exclusion violation",
    cst_UNIQUE_constraint_violatio = "UNIQUE constraint violation",
    cst_RESTRICT_violation = "RESTRICT violation",
    cst_insufficient_resources = "insufficient resources",
    cst_FOREIGN_KEY_constraint_vio = "FOREIGN KEY constraint violation",
    cst_out_of_memory = "out of memory",
    cst_NOT_NULL_constraint_violat = "NOT NULL constraint violation",
    cst_unknown_cause = "unknown cause",
    cst_disk_full = "disk full",
    cst_configuration_limit_exceed = "configuration limit exceeded",
    cst_integrity_constraint_viola = "integrity constraint violation",
    cst_CHECK_constraint_violation = "CHECK constraint violation",
    cst_Caqti_error_Msg = "Caqti_error.Msg",
    cst_Caqti_error_Exn = "Caqti_error.Exn";
   function show_cause(param){
    return 58559994 <= param
            ? 328993730
              <= param
              ? 439010708
                <= param
                ? 504538400
                  <= param
                  ? cst_too_many_connections
                  : cst_exclusion_violation
                : 406226903
                  <= param
                  ? cst_UNIQUE_constraint_violatio
                  : cst_RESTRICT_violation
              : 122406424
                === param
                ? cst_out_of_memory
                : 327437805
                  <= param
                  ? cst_insufficient_resources
                  : cst_FOREIGN_KEY_constraint_vio
            : -435482528
              <= param
              ? -123350241
                <= param
                ? -113858631
                  <= param
                  ? cst_NOT_NULL_constraint_violat
                  : cst_unknown_cause
                : -352670511
                  <= param
                  ? cst_disk_full
                  : cst_configuration_limit_exceed
              : -793072735
                <= param
                ? cst_integrity_constraint_viola
                : cst_CHECK_constraint_violation;
   }
   var msg_impl = caml_call2(Stdlib_Hashtbl[1], 0, 7);
   function default_cause(param){return -123350241;}
   function define_msg(pp, opt, ec){
    if(opt) var sth = opt[1], cause = sth; else var cause = default_cause;
    return caml_call3(Stdlib_Hashtbl[5], msg_impl, ec, [0, pp, cause]);
   }
   function find_impl(msg){
    var c = caml_call1(Stdlib_Obj[23][1], msg);
    try{var _A_ = caml_call2(Stdlib_Hashtbl[6], msg_impl, c); return _A_;}
    catch(_B_){
     var _y_ = caml_wrap_exception(_B_);
     if(_y_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_y_, 0);
     var _z_ = caml_call1(Stdlib_Obj[23][2], c);
     return caml_call3(Stdlib_Printf[10], Stdlib[2], _a_, _z_);
    }
   }
   var Msg = [248, cst_Caqti_error_Msg, caml_fresh_oo_id(0)];
   function pp(ppf, param){
    if(param[1] !== Msg)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var s = param[2];
    caml_call2(Stdlib_Format[13], ppf, s);
    var _v_ = runtime.caml_string_notequal(s, "");
    if(_v_){
     var
      _u_ =
        runtime.caml_string_get(s, runtime.caml_ml_string_length(s) - 1 | 0)
        - 33
        | 0;
     a:
     {
      b:
      {
       if(13 < _u_ >>> 0){
        if(30 === _u_) break b;
       }
       else if(11 < _u_ - 1 >>> 0) break b;
       var _w_ = 0;
       break a;
      }
      var _w_ = 1;
     }
     var _x_ = 1 - _w_;
    }
    else
     var _x_ = _v_;
    return _x_ ? caml_call2(Stdlib_Format[23], ppf, 46) : _x_;
   }
   define_msg(pp, [0, default_cause], Msg);
   function pp_msg(ppf, msg){return caml_call2(find_impl(msg)[1], ppf, msg);}
   function pp_uri(ppf, uri){
    if(! caml_call1(Uri[34], uri)) return caml_call2(Uri[44], ppf, uri);
    var _t_ = caml_call2(Uri[35], uri, _c_);
    return caml_call2(Uri[44], ppf, _t_);
   }
   function pp_load_msg(ppf, fmt, err){
    caml_call4(Stdlib_Format[137], ppf, fmt, pp_uri, err[1]);
    caml_call2(Stdlib_Format[13], ppf, cst);
    return pp_msg(ppf, err[2]);
   }
   function pp_connection_msg(ppf, fmt, err){
    caml_call4(Stdlib_Format[137], ppf, fmt, pp_uri, err[1]);
    caml_call2(Stdlib_Format[13], ppf, cst$0);
    return pp_msg(ppf, err[2]);
   }
   function pp_query_msg(ppf, fmt, err){
    caml_call4(Stdlib_Format[137], ppf, fmt, pp_uri, err[1]);
    caml_call2(Stdlib_Format[13], ppf, cst$1);
    pp_msg(ppf, err[3]);
    return caml_call3(Stdlib_Format[137], ppf, _d_, err[2]);
   }
   function pp_coding_error(ppf, fmt, err){
    caml_call6
     (Stdlib_Format[137], ppf, fmt, Caqti_type[7], err[2], pp_uri, err[1]);
    caml_call2(Stdlib_Format[13], ppf, cst$2);
    return pp_msg(ppf, err[3]);
   }
   function load_rejected(uri, msg){return [0, 463288279, [0, uri, msg]];}
   function load_failed(uri, msg){return [0, 1039467990, [0, uri, msg]];}
   function connect_rejected(uri, msg){return [0, 893831635, [0, uri, msg]];}
   function connect_failed(uri, msg){return [0, 62185682, [0, uri, msg]];}
   function encode_missing(uri, field_type, param){
    var
     typ = [0, caml_call1(Caqti_type[10], field_type)],
     msg = [0, Msg, cst_Field_type_not_supported_a];
    return [0, -249947673, [0, uri, typ, msg]];
   }
   function encode_rejected(uri, typ, msg){
    var typ$0 = [0, typ];
    return [0, -249947673, [0, uri, typ$0, msg]];
   }
   function encode_failed(uri, typ, msg){
    var typ$0 = [0, typ];
    return [0, 286933990, [0, uri, typ$0, msg]];
   }
   function request_failed(uri, query, msg){
    return [0, 750887949, [0, uri, query, msg]];
   }
   function decode_missing(uri, field_type, param){
    var
     typ = [0, caml_call1(Caqti_type[10], field_type)],
     msg = [0, Msg, cst_Field_type_not_supported_a$0];
    return [0, 67537871, [0, uri, typ, msg]];
   }
   function decode_rejected(uri, typ, msg){
    var typ$0 = [0, typ];
    return [0, 67537871, [0, uri, typ$0, msg]];
   }
   function response_failed(uri, query, msg){
    return [0, -898469157, [0, uri, query, msg]];
   }
   function response_rejected(uri, query, msg){
    return [0, -736907236, [0, uri, query, msg]];
   }
   function uri(param){
    var param$0 = param;
    for(;;){
     var _s_ = param$0[1];
     if(286933990 > _s_){
      if(-736907236 === _s_){var uri$4 = param$0[2][1]; return uri$4;}
      if(62185682 <= _s_){
       if(67537871 <= _s_){var uri$5 = param$0[2][1]; return uri$5;}
       var uri$6 = param$0[2][1];
       return uri$6;
      }
      if(-249947673 <= _s_){var uri$7 = param$0[2][1]; return uri$7;}
      var uri$8 = param$0[2][1];
      return uri$8;
     }
     if(750887949 > _s_){
      if(463288279 <= _s_){var uri$2 = param$0[2][1]; return uri$2;}
      var uri$3 = param$0[2][1];
      return uri$3;
     }
     if(893831635 <= _s_){
      if(1039467990 <= _s_){var uri = param$0[2][1]; return uri;}
      var uri$0 = param$0[2][1];
      return uri$0;
     }
     if(844285419 > _s_){var uri$1 = param$0[2][1]; return uri$1;}
     var err = param$0[2], param$0 = err;
    }
   }
   function pp$0(ppf, param){
    var param$0 = param;
    for(;;){
     var _r_ = param$0[1];
     if(286933990 > _r_){
      if(-736907236 === _r_){
       var err$5 = param$0[2];
       return pp_query_msg(ppf, _j_, err$5);
      }
      if(62185682 <= _r_){
       if(67537871 <= _r_){
        var err$6 = param$0[2];
        return pp_coding_error(ppf, _k_, err$6);
       }
       var err$7 = param$0[2];
       return pp_connection_msg(ppf, _l_, err$7);
      }
      if(-249947673 <= _r_){
       var err$8 = param$0[2];
       return pp_coding_error(ppf, _m_, err$8);
      }
      var err$9 = param$0[2];
      return pp_query_msg(ppf, _n_, err$9);
     }
     if(750887949 > _r_){
      if(463288279 <= _r_){
       var err$3 = param$0[2];
       return pp_load_msg(ppf, _h_, err$3);
      }
      var err$4 = param$0[2];
      return pp_coding_error(ppf, _i_, err$4);
     }
     if(893831635 <= _r_){
      if(1039467990 <= _r_){
       var err = param$0[2];
       return pp_load_msg(ppf, _e_, err);
      }
      var err$0 = param$0[2];
      return pp_connection_msg(ppf, _f_, err$0);
     }
     if(844285419 > _r_){
      var err$2 = param$0[2];
      return pp_query_msg(ppf, _g_, err$2);
     }
     var err$1 = param$0[2];
     caml_call2(Stdlib_Format[13], ppf, cst_During_post_connect);
     var param$0 = err$1;
    }
   }
   function show_of_pp(pp, err){
    var
     buf = caml_call1(Stdlib_Buffer[1], 128),
     ppf = caml_call1(Stdlib_Format[114], buf);
    caml_call2(pp, ppf, err);
    caml_call2(Stdlib_Format[38], ppf, 0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function show(err){return show_of_pp(pp$0, err);}
   function cause(param){
    var err = param[2], _q_ = err[3];
    return caml_call1(find_impl(err[3])[2], _q_);
   }
   function uncongested(x){
    if(1 === x[0] && 48080384 === x[1][1])
     throw caml_maybe_attach_backtrace([0, Match_failure, _o_], 1);
    return x;
   }
   var Exn = [248, cst_Caqti_error_Exn, caml_fresh_oo_id(0)];
   function _p_(param){
    if(param[1] === Exn){var err = param[2]; return [0, show(err)];}
    if(param[1] !== Caqti_query[17]) return 0;
    var err$0 = param[2];
    return [0, show_of_pp(Caqti_query[16], err$0)];
   }
   caml_call1(Stdlib_Printexc[9], _p_);
   var
    Caqti_error =
      [0,
       show_cause,
       define_msg,
       pp_msg,
       Msg,
       pp_uri,
       load_rejected,
       load_failed,
       connect_rejected,
       connect_failed,
       encode_missing,
       encode_rejected,
       encode_failed,
       request_failed,
       decode_missing,
       decode_rejected,
       response_failed,
       response_rejected,
       uri,
       pp$0,
       show,
       cause,
       uncongested,
       Exn];
   runtime.caml_register_global(50, Caqti_error, "Caqti_error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_response_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_response_sig = [0];
   runtime.caml_register_global(0, Caqti_response_sig, "Caqti_response_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_driver_info
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_dummy = "dummy";
   function create
   (uri_scheme, opt, _a_, can_pool, can_concur, can_transact, param){
    if(opt)
     var sth = opt[1], dialect_tag = sth;
    else
     var dialect_tag = -912009552;
    if(_a_)
     var sth$0 = _a_[1], parameter_style = sth$0;
    else
     var parameter_style = 870530776;
    return [0,
            uri_scheme,
            dialect_tag,
            parameter_style,
            can_transact,
            can_pool,
            can_concur];
   }
   var dummy = create(cst_dummy, 0, 0, 0, 0, 0, 0);
   function uri_scheme(di){return di[1];}
   function dialect_tag(di){return di[2];}
   function parameter_style(di){return di[3];}
   function can_pool(di){return di[5];}
   function can_concur(di){return di[6];}
   function can_transact(di){return di[4];}
   var
    Caqti_driver_info =
      [0,
       create,
       dummy,
       uri_scheme,
       dialect_tag,
       parameter_style,
       can_pool,
       can_concur,
       can_transact];
   runtime.caml_register_global(1, Caqti_driver_info, "Caqti_driver_info");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_mult
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_caqti_lib_caqti_mult_ml = "caqti/lib/caqti_mult.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    _c_ = [0, cst_caqti_lib_caqti_mult_ml, 42, 35],
    _b_ = [0, cst_caqti_lib_caqti_mult_ml, 40, 28],
    _a_ = [0, cst_caqti_lib_caqti_mult_ml, 38, 29],
    zero = 0,
    one = 1,
    zero_or_one = 2,
    zero_or_more = 3;
   function only_zero(param){
    if(param) throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return 0;
   }
   function only_one(param){
    if(1 === param) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function only_zero_or_one(param){
    if(2 <= param)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    return 0;
   }
   function expose(param){
    switch(param){
      case 0:
       return 1003109192;
      case 1:
       return 3953222;
      case 2:
       return 450190689;
      default: return -561334214;
    }
   }
   function can_be_zero(param){return 1 === param ? 0 : 1;}
   function can_be_many(param){return 3 <= param ? 1 : 0;}
   var
    Caqti_mult =
      [0,
       zero,
       one,
       zero_or_one,
       zero_or_more,
       only_zero,
       only_one,
       only_zero_or_one,
       expose,
       can_be_zero,
       can_be_many];
   runtime.caml_register_global(4, Caqti_mult, "Caqti_mult");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_request
//# unitInfo: Requires: Caqti_driver_info, Caqti_mult, Caqti_query, Caqti_type, Logs, Stdlib, Stdlib__Format, Stdlib__Sys
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ".",
    cst$0 = "?",
    cst$1 = "",
    cst$2 = "*",
    Caqti_type = global_data.Caqti_type,
    Stdlib_Format = global_data.Stdlib__Format,
    Caqti_driver_info = global_data.Caqti_driver_info,
    Caqti_query = global_data.Caqti_query,
    Caqti_mult = global_data.Caqti_mult,
    Stdlib = global_data.Stdlib,
    Logs = global_data.Logs,
    _d_ = [0, [12, 32, [15, 0]], " %a"],
    _f_ =
      [0,
       [11,
        "Invalid value ",
        [2, 0, [11, " for CAQTI_DEBUG_PARAM, assuming false.", 0]]],
       "Invalid value %s for CAQTI_DEBUG_PARAM, assuming false."],
    _b_ =
      [0,
       [12,
        40,
        [15,
         [11,
          " -->",
          [2, 0, [12, 32, [15, [11, ") {|", [15, [11, "|}", 0]]]]]]]]],
       "(%a -->%s %a) {|%a|}"],
    cst_caqti = "caqti";
   function symbol(f, g, x){return caml_call1(f, caml_call1(g, x));}
   var
    _a_ = caml_call2(Logs[7][1], 0, cst_caqti),
    Log = caml_call1(Logs[18], _a_),
    last_id = [0, -1];
   function create(opt, param_type, row_type, row_mult, query){
    if(opt) var sth = opt[1], oneshot = sth; else var oneshot = 0;
    var id = oneshot ? 0 : (last_id[1]++, [0, last_id[1]]);
    return [0, id, query, param_type, row_type, row_mult];
   }
   function param_type(request){return request[3];}
   function row_type(request){return request[4];}
   function row_mult(request){return request[5];}
   function query_id(request){return request[1];}
   function query(request){return request[2];}
   function symbol$0(t, u, oneshot, f){
    return create(oneshot, t, u, Caqti_mult[1], f);
   }
   function symbol$1(t, u, oneshot, f){
    return create(oneshot, t, u, Caqti_mult[2], f);
   }
   function symbol$2(t, u, oneshot, f){
    return create(oneshot, t, u, Caqti_mult[3], f);
   }
   function symbol$3(t, u, oneshot, f){
    return create(oneshot, t, u, Caqti_mult[4], f);
   }
   function symbol$4(f, s){
    var q = caml_call1(Caqti_query[23], s);
    return caml_call1(f, function(param){return q;});
   }
   function symbol$5(f, g){
    var _D_ = Caqti_driver_info[4], _E_ = Caqti_query[23];
    function _F_(_H_){return symbol(_E_, g, _H_);}
    return caml_call1(f, function(_G_){return symbol(_F_, _D_, _G_);});
   }
   function symbol$6(t, u, oneshot, s){
    var _B_ = Caqti_mult[1];
    return symbol$4(function(_C_){return create(oneshot, t, u, _B_, _C_);}, s);
   }
   function symbol$7(t, u, oneshot, s){
    var _z_ = Caqti_mult[2];
    return symbol$4(function(_A_){return create(oneshot, t, u, _z_, _A_);}, s);
   }
   function symbol$8(t, u, oneshot, s){
    var _x_ = Caqti_mult[3];
    return symbol$4(function(_y_){return create(oneshot, t, u, _x_, _y_);}, s);
   }
   function symbol$9(t, u, oneshot, s){
    var _v_ = Caqti_mult[4];
    return symbol$4(function(_w_){return create(oneshot, t, u, _v_, _w_);}, s);
   }
   function no_env(param, _u_){
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function make_pp(opt, _n_, param, ppf, req){
    if(opt) var sth = opt[1], env = sth; else var env = no_env;
    if(_n_)
     var sth$0 = _n_[1], driver_info = sth$0;
    else
     var driver_info = Caqti_driver_info[2];
    var
     _o_ = caml_call1(req[2], driver_info),
     _p_ = caml_call1(env, driver_info),
     query = caml_call3(Caqti_query[18], 0, _p_, _o_),
     _q_ = Caqti_query[14],
     _r_ = req[4],
     _s_ = Caqti_type[6],
     match = caml_call1(Caqti_mult[8], req[5]),
     _t_ =
       450190689 <= match
        ? 1003109192 <= match ? cst : cst$0
        : 3953222 <= match ? cst$1 : cst$2;
    return caml_call9
            (Stdlib_Format[137],
             ppf,
             _b_,
             Caqti_type[6],
             req[3],
             _t_,
             _s_,
             _r_,
             _q_,
             query);
   }
   function pp(ppf){
    var _j_ = 0, _k_ = 0, _l_ = 0;
    return function(_m_){return make_pp(_l_, _k_, _j_, ppf, _m_);};
   }
   a:
   {
    try{var s = runtime.caml_sys_getenv("CAQTI_DEBUG_PARAM");}
    catch(_i_){
     var _c_ = caml_wrap_exception(_i_);
     if(_c_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_c_, 0);
     var pp_with_param_enabled = 0;
     break a;
    }
    if(caml_string_notequal(s, "false"))
     if(caml_string_notequal(s, "true")){
      var _e_ = function(f){return caml_call4(f, 0, 0, _f_, s);};
      caml_call1(Log[3], _e_);
      var _g_ = 0;
     }
     else
      var _g_ = 1;
    else
     var _g_ = 0;
    var pp_with_param_enabled = _g_;
   }
   function make_pp_with_param(env, driver_info, param, ppf, _h_){
    var req = _h_[1], param$0 = _h_[2];
    make_pp(env, driver_info, 0, ppf, req);
    return pp_with_param_enabled
            ? caml_call4
              (Stdlib_Format[137],
               ppf,
               _d_,
               Caqti_type[8],
               [0, req[3], param$0])
            : pp_with_param_enabled;
   }
   var
    Caqti_request =
      [0,
       create,
       param_type,
       row_type,
       row_mult,
       query_id,
       query,
       [0,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$5],
       make_pp,
       pp,
       make_pp_with_param];
   runtime.caml_register_global(18, Caqti_request, "Caqti_request");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_query_fmt
//# unitInfo: Requires: Caqti_query
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Caqti_query = global_data.Caqti_query,
    qprintf = Caqti_query[24],
    kqprintf = Caqti_query[25],
    env = Caqti_query[27],
    quote = Caqti_query[28],
    query = Caqti_query[29],
    param = Caqti_query[26];
   function bool(ppf, x){return caml_call2(query, ppf, [1, 0, x]);}
   function int$0(ppf, x){return caml_call2(query, ppf, [1, 1, x]);}
   function float$0(ppf, x){return caml_call2(query, ppf, [1, 5, x]);}
   function string(ppf, x){return caml_call2(query, ppf, [1, 6, x]);}
   function octets(ppf, x){return caml_call2(query, ppf, [1, 7, x]);}
   function pdate(ppf, x){return caml_call2(query, ppf, [1, 8, x]);}
   function ptime(ppf, x){return caml_call2(query, ppf, [1, 9, x]);}
   function ptime_span(ppf, x){return caml_call2(query, ppf, [1, 10, x]);}
   var
    Caqti_query_fmt =
      [0,
       qprintf,
       kqprintf,
       param,
       env,
       quote,
       query,
       bool,
       int$0,
       float$0,
       string,
       octets,
       pdate,
       ptime,
       ptime_span];
   runtime.caml_register_global(1, Caqti_query_fmt, "Caqti_query_fmt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_pool_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_pool_sig = [0];
   runtime.caml_register_global(0, Caqti_pool_sig, "Caqti_pool_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_pool_config
//# unitInfo: Requires: Logs, Mtime, Stdlib, Stdlib__List, Stdlib__Sys
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pfx = "CAQTI_POOL",
    keys = [0, [0, 0], [0, [0, 1], [0, [0, 2], [0, [0, 3], 0]]]],
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Mtime = global_data.Mtime,
    Logs = global_data.Logs,
    _a_ = caml_call2(Logs[7][1], 0, "caqti.config"),
    Log = caml_call1(Logs[18], _a_),
    _b_ =
      [0,
       [11, "Failed to parse $", [2, 0, [11, " = ", [2, 0, [12, 46, 0]]]]],
       "Failed to parse $%s = %s."],
    cst_MAX_USE_COUNT = "_MAX_USE_COUNT",
    cst_MAX_IDLE_AGE = "_MAX_IDLE_AGE",
    cst_MAX_IDLE_SIZE = "_MAX_IDLE_SIZE",
    cst_MAX_SIZE = "_MAX_SIZE",
    cst_Mtime_Span_of_float_ns = "Mtime.Span.of_float_ns";
   function create
   (max_size, max_idle_size, max_idle_age, max_use_count, param){
    return [0, max_size, max_idle_size, max_idle_age, max_use_count];
   }
   function option_of_string(f, s){
    if(caml_string_notequal(s, "") && caml_string_notequal(s, "none"))
     return [0, caml_call1(f, s)];
    return 0;
   }
   function mtime_span_of_string(s){
    var
     x = runtime.caml_float_of_string(s),
     match = caml_call1(Mtime[1][22], x * 1000000000.);
    if(! match) return caml_call1(Stdlib[2], cst_Mtime_Span_of_float_ns);
    var x$0 = match[1];
    return x$0;
   }
   var default$0 = [0, 0, 0, 0, 0];
   function default_from_env(param){
    function get(conv, sfx){
     var
      var$0 = caml_call2(Stdlib[28], pfx, sfx),
      match = caml_call1(Stdlib_Sys[2], var$0);
     if(! match) return 0;
     var str = match[1];
     try{var value = caml_call1(conv, str);}
     catch(_k_){
      var _i_ = caml_wrap_exception(_k_);
      if(_i_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_i_, 0);
      var _j_ = function(m){return caml_call5(m, 0, 0, _b_, var$0, str);};
      caml_call1(Log[3], _j_);
      return 0;
     }
     return [0, value];
    }
    var
     _c_ = caml_int_of_string,
     _d_ =
       get
        (function(_h_){return option_of_string(_c_, _h_);}, cst_MAX_USE_COUNT),
     _e_ =
       get
        (function(_g_){return option_of_string(mtime_span_of_string, _g_);},
         cst_MAX_IDLE_AGE),
     _f_ = get(caml_int_of_string, cst_MAX_IDLE_SIZE);
    return [0, get(caml_int_of_string, cst_MAX_SIZE), _f_, _e_, _d_];
   }
   var max_size = 0, max_idle_size = 1, max_idle_age = 2, max_use_count = 3;
   function get(k, config){
    switch(k){
      case 0:
       return config[1];
      case 1:
       return config[2];
      case 2:
       return config[3];
      default: return config[4];
    }
   }
   function modify(k, v, config){
    switch(k){
      case 0:
       return [0, v, config[2], config[3], config[4]];
      case 1:
       return [0, config[1], v, config[3], config[4]];
      case 2:
       return [0, config[1], config[2], v, config[4]];
      default: return [0, config[1], config[2], config[3], v];
    }
   }
   function set(k, v, config){return modify(k, [0, v], config);}
   function unset(k, config){return modify(k, 0, config);}
   function merge_left(cL, cR){
    function add(acc, param){
     var k = param[1], match = get(k, cL);
     if(! match) return acc;
     var v = match[1];
     return set(k, v, acc);
    }
    return caml_call3(Stdlib_List[26], add, cR, keys);
   }
   var
    Caqti_pool_config =
      [0,
       create,
       default$0,
       default_from_env,
       merge_left,
       get,
       set,
       unset,
       max_size,
       max_idle_size,
       max_idle_age,
       max_use_count];
   runtime.caml_register_global(17, Caqti_pool_config, "Caqti_pool_config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_connection_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_connection_sig = [0];
   runtime.caml_register_global
    (0, Caqti_connection_sig, "Caqti_connection_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_connect_config
//# unitInfo: Requires: Stdlib__Map, Stdlib__String
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Map = global_data.Stdlib__Map,
    cst_Tag = "Tag",
    _a_ = [0, 1, 7],
    cst_tweaks_version = "tweaks_version";
   function create_key(name, default$0){
    var Tag = [248, cst_Tag, runtime.caml_fresh_oo_id(0)];
    return [0, Tag, name, default$0];
   }
   var
    String_map = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
    default$0 = String_map[1];
   function mem_name(key_name){return caml_call1(String_map[32], key_name);}
   function get(Key, m){
    var match = caml_call2(String_map[18], Key[2], m);
    if(match){
     var _b_ = match[1];
     if(_b_[1] === Key[1]){var v = _b_[2]; return v;}
    }
    return Key[3];
   }
   function set(Key, v, m){
    return caml_call3(String_map[2], Key[2], [0, Key[1], v], m);
   }
   function reset(Key, m){return caml_call2(String_map[6], Key[2], m);}
   var
    tweaks_version = create_key(cst_tweaks_version, _a_),
    Caqti_connect_config =
      [0, default$0, get, set, reset, tweaks_version, create_key, mem_name];
   runtime.caml_register_global
    (5, Caqti_connect_config, "Caqti_connect_config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_connect_sig
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_connect_sig = [0];
   runtime.caml_register_global(0, Caqti_connect_sig, "Caqti_connect_sig");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
