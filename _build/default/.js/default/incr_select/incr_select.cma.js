// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incr_select__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Incr_select = [0],
    Incr_select$0 = [0, Incr_select];
   runtime.caml_register_global(0, Incr_select$0, "Incr_select__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_select__Incr_select_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_select_Incr_select_in = "Incr_select__Incr_select_intf",
    cst_incr_select = "incr_select";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_select_Incr_select_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_select);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr_select_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_select, "incr_select_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incr_select);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_select_Incr_select_in);
   var Incr_select_Incr_select_intf = [0];
   runtime.caml_register_global
    (11, Incr_select_Incr_select_intf, cst_Incr_select_Incr_select_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_select
//# unitInfo: Requires: Core, Core__Fn, Core__Hash_set, Core__Hashtbl, Core__List, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_select = "Incr_select",
    cst_incr_select = "incr_select";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Hash_set = global_data.Core__Hash_set,
    Core_List = global_data.Core__List,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_Fn = global_data.Core__Fn,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_select);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_select);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr_select.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_select, "incr_select.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incr_select);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_select);
   var
    Incr_select =
      [0,
       function(Incr){
        var E = Incr[78], hashtbl_size = 10;
        function setup_generator(hashable, compute_output, make_input_node){
         var
          necessary_dependencies =
            caml_call4(Core_Hashtbl[87][1], 0, [0, hashtbl_size], hashable, 0);
         function make_key_stale(key){
          var
           _v_ = E[2][4],
           _w_ = caml_call2(Core_Hashtbl[56], necessary_dependencies, key),
           _x_ = caml_call2(Core_Option[39], _w_, 0);
          return caml_call2(Core_List[19], _x_, _v_);
         }
         var input_node = caml_call1(make_input_node, make_key_stale);
         caml_call2(Incr[58], input_node, Incr[57][6]);
         function _l_(key){
          var
           input_dep = caml_call2(E[1][2], 0, input_node),
           output_node = [];
          runtime.caml_update_dummy
           (output_node,
            [246,
             function(_m_){
              function _n_(param){return caml_call1(compute_output, key);}
              var
               _o_ =
                 [0,
                  function(is_now_observable){
                   if(is_now_observable){
                    var _p_ = caml_call1(Core[248], output_node);
                    return caml_call3
                            (Core_Hashtbl[81], necessary_dependencies, key, _p_);
                   }
                   function _q_(param){
                    if(! param) return 0;
                    var l = param[1], _r_ = caml_call1(Core[248], output_node);
                    function _s_(_u_){return _r_ === _u_ ? 1 : 0;}
                    var
                     _t_ = caml_call1(Core_Fn[2], _s_),
                     l$0 = caml_call2(Core_List[12], l, _t_);
                    return l$0 ? [0, l$0] : 0;
                   }
                   return caml_call3
                           (Core_Hashtbl[40], necessary_dependencies, key, _q_);
                  }];
              return caml_call2(E[2][2], _o_, _n_);
             }]);
          var output_node$0 = caml_call1(Core[248], output_node);
          caml_call2(E[2][6], output_node$0, input_dep);
          return caml_call1(E[2][3], output_node$0);
         }
         return caml_call1(Core[266], _l_);
        }
        function update_one(input, selected, make_stale){
         function _k_(inp){
          caml_call2(Core_Option[46], inp, make_stale);
          caml_call2(Core_Option[46], selected[1], make_stale);
          selected[1] = inp;
          return 0;
         }
         return caml_call2(Incr[9], input, _k_);
        }
        function select_one(H, input){
         var selected = [0, 0];
         function compute_output(key){
          var match = selected[1];
          if(! match) return 0;
          var key$0 = match[1], _j_ = caml_call2(H[1], key, key$0);
          return caml_call2(Core[90], _j_, 0);
         }
         function make_input_node(make_key_stale){
          return update_one(input, selected, make_key_stale);
         }
         return setup_generator(H[4], compute_output, make_input_node);
        }
        function select_one$0(h, input){
         return select_one(h, caml_call2(Incr[9], input, Core_Option[58]));
        }
        function select_one_value(H, default$0, input){
         var selected = [0, 0];
         function compute_output(key){
          var _h_ = selected[1];
          if(! _h_) return default$0;
          var
           match = _h_[1],
           data = match[2],
           key$0 = match[1],
           _i_ = caml_call2(H[1], key, key$0);
          return caml_call2(Core[90], _i_, 0) ? data : default$0;
         }
         function make_input_node(make_key_stale){
          return update_one
                  (input,
                   selected,
                   function(param){
                    var key = param[1];
                    return caml_call1(make_key_stale, key);
                   });
         }
         return setup_generator(H[4], compute_output, make_input_node);
        }
        function select_one_value$0(h, default$0, input){
         return select_one_value
                 (h, default$0, caml_call2(Incr[9], input, Core_Option[58]));
        }
        function select_many_values(H, default$0, input){
         var
          hashable = H[4],
          selected =
            caml_call4(Core_Hashtbl[87][1], 0, [0, hashtbl_size], hashable, 0);
         function compute_output(key){
          var _g_ = caml_call2(Core_Hashtbl[56], selected, key);
          return caml_call2(Core_Option[39], _g_, default$0);
         }
         function make_input_node(make_key_stale){
          function _e_(inp){
           caml_call2(Core_Hashtbl[19], selected, make_key_stale);
           caml_call1(Core_Hashtbl[16], selected);
           function _f_(param){
            var data = param[2], key = param[1];
            caml_call1(make_key_stale, key);
            return caml_call3(Core_Hashtbl[37], selected, key, data);
           }
           return caml_call2(Core_List[19], inp, _f_);
          }
          return caml_call2(Incr[9], input, _e_);
         }
         return setup_generator(hashable, compute_output, make_input_node);
        }
        function select_many(H, input){
         var
          hashable = H[4],
          selected =
            caml_call4
             (Core_Hash_set[38][1], 0, [0, hashtbl_size], hashable, 0);
         function compute_output(key){
          return caml_call2(Core_Hash_set[20], selected, key);
         }
         function make_input_node(make_key_stale){
          function _a_(inp){
           var old_set = caml_call1(Core_Hash_set[21], selected);
           caml_call1(Core_Hash_set[28], selected);
           function _b_(key){
            if(1 - caml_call2(Core_Hash_set[20], old_set, key))
             caml_call1(make_key_stale, key);
            return caml_call2(Core_Hash_set[22], selected, key);
           }
           caml_call2(Core_List[19], inp, _b_);
           function _c_(key){
            var _d_ = 1 - caml_call2(Core_Hash_set[20], selected, key);
            return _d_ ? caml_call1(make_key_stale, key) : _d_;
           }
           return caml_call2(Core_Hash_set[6], old_set, _c_);
          }
          return caml_call2(Incr[9], input, _a_);
         }
         return setup_generator(hashable, compute_output, make_input_node);
        }
        return [0,
                select_one$0,
                select_one,
                select_one_value$0,
                select_one_value,
                select_many,
                select_many_values];
       }];
   runtime.caml_register_global(17, Incr_select, cst_Incr_select);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
