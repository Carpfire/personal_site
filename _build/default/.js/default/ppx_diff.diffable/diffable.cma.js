// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Diffable__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Diffable = [0],
    Diffable$0 = [0, Diffable];
   runtime.caml_register_global(0, Diffable$0, "Diffable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Optional_diff
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Optional_diff$0 = "Diffable__Optional_diff",
    cst_diffable$0 = "diffable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Optional_diff$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/optional_diff.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "optional_diff.ml");
   var
    cst_Optional_diff_unsafe_value =
      "[Optional_diff.unsafe_value] called on [Optional_diff.none]",
    cst_diffable = cst_diffable$0,
    cst_Diffable_Optional_diff = cst_Diffable_Optional_diff$0,
    none = 0;
   function return$0(diff){return [0, diff];}
   function map(t, f){return t ? [0, caml_call1(f, t[1])] : 0;}
   function bind(t, f){return t ? caml_call1(f, t[1]) : 0;}
   var both = -520705283;
   function symbol_map(x, f){return map(x, f);}
   function symbol_bind(x, f){return bind(x, f);}
   function is_none(t){return t ? 0 : 1;}
   function unsafe_value(t){
    return t ? t[1] : caml_call1(Stdlib[2], cst_Optional_diff_unsafe_value);
   }
   var
    Optional_syntax = [0, is_none, unsafe_value],
    Optional_syntax$0 = [0, Optional_syntax],
    include = Optional_syntax$0[1],
    is_none$0 = include[1],
    unsafe_value$0 = include[2];
   function to_option(t){return t ? [0, t[1]] : 0;}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$0, map, bind, both, Open_on_rhs],
    Let_syntax$0 = [0, return$0, Let_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Optional_diff);
   var
    Diffable_Optional_diff =
      [0,
       none,
       return$0,
       map,
       bind,
       both,
       symbol_map,
       symbol_bind,
       is_none$0,
       unsafe_value$0,
       to_option,
       Optional_syntax$0,
       Let_syntax$0];
   runtime.caml_register_global
    (13, Diffable_Optional_diff, cst_Diffable_Optional_diff$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Tuples
//# unitInfo: Requires: Base, Base__Int, Base__List, Base__Sequence, Base_quickcheck__Export, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Diffable__Optional_diff, Diffable_cinaps__Tuple_helpers, Gel, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_BUG_non_empty_diff_after_a$9 = "BUG: non-empty diff after apply",
    cst_Diffable_Tuples$0 = "Diffable__Tuples",
    cst_Duplicate_entry_in_tuple_d$4 = "Duplicate entry in tuple diff: ",
    cst_T1$14 = "T1",
    cst_T2$14 = "T2",
    cst_T3$11 = "T3",
    cst_T4$8 = "T4",
    cst_T5$5 = "T5",
    cst_T6$2 = "T6",
    cst_a1$44 = "a1",
    cst_a1_diff$29 = "a1_diff",
    cst_a2$44 = "a2",
    cst_a2_diff$29 = "a2_diff",
    cst_a3$35 = "a3",
    cst_a3_diff$23 = "a3_diff",
    cst_a4$26 = "a4",
    cst_a4_diff$17 = "a4_diff",
    cst_a5$17 = "a5",
    cst_a5_diff$11 = "a5_diff",
    cst_a6$8 = "a6",
    cst_a6_diff$5 = "a6_diff",
    cst_diffable$0 = "diffable",
    cst_lib_src_tuples_ml = "lib/src/tuples.ml",
    cst_lib_src_tuples_ml_Tuple2_D$0 =
      "lib/src/tuples.ml.Tuple2.Diff.Entry_diff.t",
    cst_lib_src_tuples_ml_Tuple2_F$0 =
      "lib/src/tuples.ml.Tuple2.For_inlined_tuple.t",
    cst_lib_src_tuples_ml_Tuple2_t$0 = "lib/src/tuples.ml.Tuple2.t",
    cst_lib_src_tuples_ml_Tuple3_D$0 =
      "lib/src/tuples.ml.Tuple3.Diff.Entry_diff.t",
    cst_lib_src_tuples_ml_Tuple3_F$0 =
      "lib/src/tuples.ml.Tuple3.For_inlined_tuple.t",
    cst_lib_src_tuples_ml_Tuple3_t$0 = "lib/src/tuples.ml.Tuple3.t",
    cst_lib_src_tuples_ml_Tuple4_D$0 =
      "lib/src/tuples.ml.Tuple4.Diff.Entry_diff.t",
    cst_lib_src_tuples_ml_Tuple4_F$0 =
      "lib/src/tuples.ml.Tuple4.For_inlined_tuple.t",
    cst_lib_src_tuples_ml_Tuple4_t$0 = "lib/src/tuples.ml.Tuple4.t",
    cst_lib_src_tuples_ml_Tuple5_D$0 =
      "lib/src/tuples.ml.Tuple5.Diff.Entry_diff.t",
    cst_lib_src_tuples_ml_Tuple5_F$0 =
      "lib/src/tuples.ml.Tuple5.For_inlined_tuple.t",
    cst_lib_src_tuples_ml_Tuple5_t$0 = "lib/src/tuples.ml.Tuple5.t",
    cst_lib_src_tuples_ml_Tuple6_D$0 =
      "lib/src/tuples.ml.Tuple6.Diff.Entry_diff.t",
    cst_lib_src_tuples_ml_Tuple6_F$0 =
      "lib/src/tuples.ml.Tuple6.For_inlined_tuple.t",
    cst_lib_src_tuples_ml_Tuple6_t$0 = "lib/src/tuples.ml.Tuple6.t",
    cst_t$49 = "t",
    cst_t1 = "t1",
    cst_t2 = "t2",
    cst_t3 = "t3",
    cst_t4 = "t4",
    cst_t5 = "t5",
    cst_t6 = "t6",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_009 = cst_lib_src_tuples_ml_Tuple2_t$0,
    descriptions = [0, [0, cst_T1$14, 1], [0, [0, cst_T2$14, 1], 0]],
    error_source_022 = cst_lib_src_tuples_ml_Tuple2_D$0,
    error_source_104 = cst_lib_src_tuples_ml_Tuple2_F$0,
    error_source_145 = cst_lib_src_tuples_ml_Tuple3_t$0,
    descriptions$0 =
      [0,
       [0, cst_T1$14, 1],
       [0, [0, cst_T2$14, 1], [0, [0, cst_T3$11, 1], 0]]],
    error_source_163 = cst_lib_src_tuples_ml_Tuple3_D$0,
    error_source_281 = cst_lib_src_tuples_ml_Tuple3_F$0,
    error_source_338 = cst_lib_src_tuples_ml_Tuple4_t$0,
    descriptions$1 =
      [0,
       [0, cst_T1$14, 1],
       [0,
        [0, cst_T2$14, 1],
        [0, [0, cst_T3$11, 1], [0, [0, cst_T4$8, 1], 0]]]],
    error_source_361 = cst_lib_src_tuples_ml_Tuple4_D$0,
    error_source_515 = cst_lib_src_tuples_ml_Tuple4_F$0,
    error_source_588 = cst_lib_src_tuples_ml_Tuple5_t$0,
    descriptions$2 =
      [0,
       [0, cst_T1$14, 1],
       [0,
        [0, cst_T2$14, 1],
        [0,
         [0, cst_T3$11, 1],
         [0, [0, cst_T4$8, 1], [0, [0, cst_T5$5, 1], 0]]]]],
    error_source_616 = cst_lib_src_tuples_ml_Tuple5_D$0,
    error_source_806 = cst_lib_src_tuples_ml_Tuple5_F$0,
    error_source_895 = cst_lib_src_tuples_ml_Tuple6_t$0,
    descriptions$3 =
      [0,
       [0, cst_T1$14, 1],
       [0,
        [0, cst_T2$14, 1],
        [0,
         [0, cst_T3$11, 1],
         [0,
          [0, cst_T4$8, 1],
          [0, [0, cst_T5$5, 1], [0, [0, cst_T6$2, 1], 0]]]]]],
    error_source_928 = cst_lib_src_tuples_ml_Tuple6_D$0,
    error_source_1154 = cst_lib_src_tuples_ml_Tuple6_F$0,
    Base = global_data.Base,
    Diffable_Optional_diff = global_data.Diffable__Optional_diff,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Gel = global_data.Gel,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_List = global_data.Base__List,
    Assert_failure = global_data.Assert_failure,
    Base_Int = global_data.Base__Int,
    Base_quickcheck_Export = global_data.Base_quickcheck__Export,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_Sequence = global_data.Base__Sequence,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Diffable_cinaps_Tuple_helpers = global_data.Diffable_cinaps__Tuple_helpers;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Tuples$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_lib_src_tuples_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "tuples.ml");
   var
    cst_BUG_non_empty_diff_after_a$8 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$48 = cst_t$49,
    cst_lib_src_tuples_ml_Tuple6_F = cst_lib_src_tuples_ml_Tuple6_F$0,
    cst_t$46 = cst_t$49,
    cst_Duplicate_entry_in_tuple_d$3 = cst_Duplicate_entry_in_tuple_d$4,
    _i4_ = [0, cst_lib_src_tuples_ml, 1513, 26],
    _i3_ = [0, cst_lib_src_tuples_ml, 1499, 26],
    _i2_ = [0, cst_lib_src_tuples_ml, 1485, 26],
    _i1_ = [0, cst_lib_src_tuples_ml, 1471, 26],
    _i0_ = [0, cst_lib_src_tuples_ml, 1457, 26],
    _iZ_ = [0, cst_lib_src_tuples_ml, 1443, 26],
    cst_BUG_non_empty_diff_after_a$7 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$44 = cst_t$49,
    _ia_ = [1, cst_lib_src_tuples_ml_Tuple6_D$0],
    cst_lib_src_tuples_ml_Tuple6_D = cst_lib_src_tuples_ml_Tuple6_D$0,
    cst_t$42 = cst_t$49,
    _hz_ = [0, cst_T1$14],
    _hA_ = [0, cst_T2$14],
    _hB_ = [0, cst_T3$11],
    _hC_ = [0, cst_T4$8],
    _hD_ = [0, cst_T5$5],
    _hE_ = [0, cst_T6$2],
    cst_T1$12 = cst_T1$14,
    cst_T2$12 = cst_T2$14,
    cst_T3$9 = cst_T3$11,
    cst_T4$6 = cst_T4$8,
    cst_T5$3 = cst_T5$5,
    cst_T6$0 = cst_T6$2,
    cst_lib_src_tuples_ml_Tuple6_t = cst_lib_src_tuples_ml_Tuple6_t$0,
    cst_t$40 = cst_t$49,
    cst_BUG_non_empty_diff_after_a$6 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$38 = cst_t$49,
    cst_lib_src_tuples_ml_Tuple5_F = cst_lib_src_tuples_ml_Tuple5_F$0,
    cst_t$36 = cst_t$49,
    cst_Duplicate_entry_in_tuple_d$2 = cst_Duplicate_entry_in_tuple_d$4,
    _f4_ = [0, cst_lib_src_tuples_ml, 1034, 26],
    _f3_ = [0, cst_lib_src_tuples_ml, 1020, 26],
    _f2_ = [0, cst_lib_src_tuples_ml, 1006, 26],
    _f1_ = [0, cst_lib_src_tuples_ml, 992, 26],
    _f0_ = [0, cst_lib_src_tuples_ml, 978, 26],
    cst_BUG_non_empty_diff_after_a$5 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$34 = cst_t$49,
    _fj_ = [1, cst_lib_src_tuples_ml_Tuple5_D$0],
    cst_lib_src_tuples_ml_Tuple5_D = cst_lib_src_tuples_ml_Tuple5_D$0,
    cst_t$32 = cst_t$49,
    _eO_ = [0, cst_T1$14],
    _eP_ = [0, cst_T2$14],
    _eQ_ = [0, cst_T3$11],
    _eR_ = [0, cst_T4$8],
    _eS_ = [0, cst_T5$5],
    cst_T1$9 = cst_T1$14,
    cst_T2$9 = cst_T2$14,
    cst_T3$6 = cst_T3$11,
    cst_T4$3 = cst_T4$8,
    cst_T5$0 = cst_T5$5,
    cst_lib_src_tuples_ml_Tuple5_t = cst_lib_src_tuples_ml_Tuple5_t$0,
    cst_t$30 = cst_t$49,
    cst_BUG_non_empty_diff_after_a$4 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$28 = cst_t$49,
    cst_lib_src_tuples_ml_Tuple4_F = cst_lib_src_tuples_ml_Tuple4_F$0,
    cst_t$26 = cst_t$49,
    cst_Duplicate_entry_in_tuple_d$1 = cst_Duplicate_entry_in_tuple_d$4,
    _dy_ = [0, cst_lib_src_tuples_ml, 654, 26],
    _dx_ = [0, cst_lib_src_tuples_ml, 640, 26],
    _dw_ = [0, cst_lib_src_tuples_ml, 626, 26],
    _dv_ = [0, cst_lib_src_tuples_ml, 612, 26],
    cst_BUG_non_empty_diff_after_a$3 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$24 = cst_t$49,
    _cY_ = [1, cst_lib_src_tuples_ml_Tuple4_D$0],
    cst_lib_src_tuples_ml_Tuple4_D = cst_lib_src_tuples_ml_Tuple4_D$0,
    cst_t$22 = cst_t$49,
    _cx_ = [0, cst_T1$14],
    _cy_ = [0, cst_T2$14],
    _cz_ = [0, cst_T3$11],
    _cA_ = [0, cst_T4$8],
    cst_T1$6 = cst_T1$14,
    cst_T2$6 = cst_T2$14,
    cst_T3$3 = cst_T3$11,
    cst_T4$0 = cst_T4$8,
    cst_lib_src_tuples_ml_Tuple4_t = cst_lib_src_tuples_ml_Tuple4_t$0,
    cst_t$20 = cst_t$49,
    cst_BUG_non_empty_diff_after_a$2 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$18 = cst_t$49,
    cst_lib_src_tuples_ml_Tuple3_F = cst_lib_src_tuples_ml_Tuple3_F$0,
    cst_t$16 = cst_t$49,
    cst_Duplicate_entry_in_tuple_d$0 = cst_Duplicate_entry_in_tuple_d$4,
    _by_ = [0, cst_lib_src_tuples_ml, 349, 26],
    _bx_ = [0, cst_lib_src_tuples_ml, 335, 26],
    _bw_ = [0, cst_lib_src_tuples_ml, 321, 26],
    cst_BUG_non_empty_diff_after_a$1 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$14 = cst_t$49,
    _a7_ = [1, cst_lib_src_tuples_ml_Tuple3_D$0],
    cst_lib_src_tuples_ml_Tuple3_D = cst_lib_src_tuples_ml_Tuple3_D$0,
    cst_t$12 = cst_t$49,
    _aM_ = [0, cst_T1$14],
    _aN_ = [0, cst_T2$14],
    _aO_ = [0, cst_T3$11],
    cst_T1$3 = cst_T1$14,
    cst_T2$3 = cst_T2$14,
    cst_T3$0 = cst_T3$11,
    cst_lib_src_tuples_ml_Tuple3_t = cst_lib_src_tuples_ml_Tuple3_t$0,
    cst_t$10 = cst_t$49,
    cst_BUG_non_empty_diff_after_a$0 = cst_BUG_non_empty_diff_after_a$9,
    cst_t$8 = cst_t$49,
    cst_lib_src_tuples_ml_Tuple2_F = cst_lib_src_tuples_ml_Tuple2_F$0,
    cst_t$6 = cst_t$49,
    cst_Duplicate_entry_in_tuple_d = cst_Duplicate_entry_in_tuple_d$4,
    _U_ = [0, cst_lib_src_tuples_ml, 109, 26],
    _T_ = [0, cst_lib_src_tuples_ml, 95, 26],
    cst_BUG_non_empty_diff_after_a = cst_BUG_non_empty_diff_after_a$9,
    cst_t$4 = cst_t$49,
    _A_ = [1, cst_lib_src_tuples_ml_Tuple2_D$0],
    cst_lib_src_tuples_ml_Tuple2_D = cst_lib_src_tuples_ml_Tuple2_D$0,
    cst_t$2 = cst_t$49,
    _l_ = [0, cst_T1$14],
    _m_ = [0, cst_T2$14],
    cst_T1$0 = cst_T1$14,
    cst_T2$0 = cst_T2$14,
    cst_lib_src_tuples_ml_Tuple2_t = cst_lib_src_tuples_ml_Tuple2_t$0,
    cst_t$0 = cst_t$49,
    cst_a2 = cst_a2$44,
    cst_lib_src_tuples_ml_12_28 = "lib/src/tuples.ml:12:28",
    cst_a1 = cst_a1$44,
    cst_lib_src_tuples_ml_12_22 = "lib/src/tuples.ml:12:22",
    cst_a2$0 = cst_a2$44,
    cst_a1$0 = cst_a1$44,
    cst_t = cst_t$49,
    cst_lib_src_tuples_ml_12_2 = "lib/src/tuples.ml:12:2",
    cst_T1 = cst_T1$14,
    cst_T2 = cst_T2$14,
    cst_a2_diff = cst_a2_diff$29,
    cst_lib_src_tuples_ml_20_16 = "lib/src/tuples.ml:20:16",
    cst_T2$1 = cst_T2$14,
    cst_a1_diff = cst_a1_diff$29,
    cst_lib_src_tuples_ml_19_16 = "lib/src/tuples.ml:19:16",
    cst_T1$1 = cst_T1$14,
    cst_a2_diff$0 = cst_a2_diff$29,
    cst_a1_diff$0 = cst_a1_diff$29,
    cst_a2$1 = cst_a2$44,
    cst_a1$1 = cst_a1$44,
    cst_t$1 = cst_t$49,
    cst_lib_src_tuples_ml_18_6 = "lib/src/tuples.ml:18:6",
    cst_a2_diff$1 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_27_27 = "lib/src/tuples.ml:27:27",
    cst_a1_diff$1 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_27_17 = "lib/src/tuples.ml:27:17",
    cst_a2$2 = cst_a2$44,
    cst_lib_src_tuples_ml_27_12 = "lib/src/tuples.ml:27:12",
    cst_a1$2 = cst_a1$44,
    cst_lib_src_tuples_ml_27_7 = "lib/src/tuples.ml:27:7",
    cst_a2_diff$2 = cst_a2_diff$29,
    cst_a1_diff$2 = cst_a1_diff$29,
    cst_a2$3 = cst_a2$44,
    cst_a1$3 = cst_a1$44,
    cst_t$3 = cst_t$49,
    cst_lib_src_tuples_ml_26_4 = "lib/src/tuples.ml:26:4",
    cst_a2$4 = cst_a2$44,
    cst_lib_src_tuples_ml_163_36 = "lib/src/tuples.ml:163:36",
    cst_a1$4 = cst_a1$44,
    cst_lib_src_tuples_ml_163_24 = "lib/src/tuples.ml:163:24",
    cst_a2$5 = cst_a2$44,
    cst_a1$5 = cst_a1$44,
    cst_t$5 = cst_t$49,
    cst_lib_src_tuples_ml_163_4 = "lib/src/tuples.ml:163:4",
    cst_a2_diff$3 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_168_67 = "lib/src/tuples.ml:168:67",
    cst_a1_diff$3 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_168_57 = "lib/src/tuples.ml:168:57",
    cst_a2$6 = cst_a2$44,
    cst_lib_src_tuples_ml_168_52 = "lib/src/tuples.ml:168:52",
    cst_a1$6 = cst_a1$44,
    cst_lib_src_tuples_ml_168_47 = "lib/src/tuples.ml:168:47",
    cst_a2_diff$4 = cst_a2_diff$29,
    cst_a1_diff$4 = cst_a1_diff$29,
    cst_a2$7 = cst_a2$44,
    cst_a1$7 = cst_a1$44,
    cst_t$7 = cst_t$49,
    cst_lib_src_tuples_ml_168_6 = "lib/src/tuples.ml:168:6",
    cst_a3 = cst_a3$35,
    cst_lib_src_tuples_ml_219_39 = "lib/src/tuples.ml:219:39",
    cst_a2$8 = cst_a2$44,
    cst_lib_src_tuples_ml_219_33 = "lib/src/tuples.ml:219:33",
    cst_a1$8 = cst_a1$44,
    cst_lib_src_tuples_ml_219_27 = "lib/src/tuples.ml:219:27",
    cst_a3$0 = cst_a3$35,
    cst_a2$9 = cst_a2$44,
    cst_a1$9 = cst_a1$44,
    cst_t$9 = cst_t$49,
    cst_lib_src_tuples_ml_219_2 = "lib/src/tuples.ml:219:2",
    cst_T1$2 = cst_T1$14,
    cst_T2$2 = cst_T2$14,
    cst_T3 = cst_T3$11,
    cst_a3_diff = cst_a3_diff$23,
    cst_lib_src_tuples_ml_228_16 = "lib/src/tuples.ml:228:16",
    cst_T3$1 = cst_T3$11,
    cst_a2_diff$5 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_227_16 = "lib/src/tuples.ml:227:16",
    cst_T2$4 = cst_T2$14,
    cst_a1_diff$5 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_226_16 = "lib/src/tuples.ml:226:16",
    cst_T1$4 = cst_T1$14,
    cst_a3_diff$0 = cst_a3_diff$23,
    cst_a2_diff$6 = cst_a2_diff$29,
    cst_a1_diff$6 = cst_a1_diff$29,
    cst_a3$1 = cst_a3$35,
    cst_a2$10 = cst_a2$44,
    cst_a1$10 = cst_a1$44,
    cst_t$11 = cst_t$49,
    cst_lib_src_tuples_ml_225_6 = "lib/src/tuples.ml:225:6",
    cst_a3_diff$1 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_235_42 = "lib/src/tuples.ml:235:42",
    cst_a2_diff$7 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_235_32 = "lib/src/tuples.ml:235:32",
    cst_a1_diff$7 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_235_22 = "lib/src/tuples.ml:235:22",
    cst_a3$2 = cst_a3$35,
    cst_lib_src_tuples_ml_235_17 = "lib/src/tuples.ml:235:17",
    cst_a2$11 = cst_a2$44,
    cst_lib_src_tuples_ml_235_12 = "lib/src/tuples.ml:235:12",
    cst_a1$11 = cst_a1$44,
    cst_lib_src_tuples_ml_235_7 = "lib/src/tuples.ml:235:7",
    cst_a3_diff$2 = cst_a3_diff$23,
    cst_a2_diff$8 = cst_a2_diff$29,
    cst_a1_diff$8 = cst_a1_diff$29,
    cst_a3$3 = cst_a3$35,
    cst_a2$12 = cst_a2$44,
    cst_a1$12 = cst_a1$44,
    cst_t$13 = cst_t$49,
    cst_lib_src_tuples_ml_234_4 = "lib/src/tuples.ml:234:4",
    cst_a3$4 = cst_a3$35,
    cst_lib_src_tuples_ml_428_53 = "lib/src/tuples.ml:428:53",
    cst_a2$13 = cst_a2$44,
    cst_lib_src_tuples_ml_428_41 = "lib/src/tuples.ml:428:41",
    cst_a1$13 = cst_a1$44,
    cst_lib_src_tuples_ml_428_29 = "lib/src/tuples.ml:428:29",
    cst_a3$5 = cst_a3$35,
    cst_a2$14 = cst_a2$44,
    cst_a1$14 = cst_a1$44,
    cst_t$15 = cst_t$49,
    cst_lib_src_tuples_ml_428_4 = "lib/src/tuples.ml:428:4",
    cst_a3_diff$3 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_434_44 = "lib/src/tuples.ml:434:44",
    cst_a2_diff$9 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_434_34 = "lib/src/tuples.ml:434:34",
    cst_a1_diff$9 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_434_24 = "lib/src/tuples.ml:434:24",
    cst_a3$6 = cst_a3$35,
    cst_lib_src_tuples_ml_434_19 = "lib/src/tuples.ml:434:19",
    cst_a2$15 = cst_a2$44,
    cst_lib_src_tuples_ml_434_14 = "lib/src/tuples.ml:434:14",
    cst_a1$15 = cst_a1$44,
    cst_lib_src_tuples_ml_434_9 = "lib/src/tuples.ml:434:9",
    cst_a3_diff$4 = cst_a3_diff$23,
    cst_a2_diff$10 = cst_a2_diff$29,
    cst_a1_diff$10 = cst_a1_diff$29,
    cst_a3$7 = cst_a3$35,
    cst_a2$16 = cst_a2$44,
    cst_a1$16 = cst_a1$44,
    cst_t$17 = cst_t$49,
    cst_lib_src_tuples_ml_433_6 = "lib/src/tuples.ml:433:6",
    cst_a4 = cst_a4$26,
    cst_lib_src_tuples_ml_497_50 = "lib/src/tuples.ml:497:50",
    cst_a3$8 = cst_a3$35,
    cst_lib_src_tuples_ml_497_44 = "lib/src/tuples.ml:497:44",
    cst_a2$17 = cst_a2$44,
    cst_lib_src_tuples_ml_497_38 = "lib/src/tuples.ml:497:38",
    cst_a1$17 = cst_a1$44,
    cst_lib_src_tuples_ml_497_32 = "lib/src/tuples.ml:497:32",
    cst_a4$0 = cst_a4$26,
    cst_a3$9 = cst_a3$35,
    cst_a2$18 = cst_a2$44,
    cst_a1$18 = cst_a1$44,
    cst_t$19 = cst_t$49,
    cst_lib_src_tuples_ml_497_2 = "lib/src/tuples.ml:497:2",
    cst_T1$5 = cst_T1$14,
    cst_T2$5 = cst_T2$14,
    cst_T3$2 = cst_T3$11,
    cst_T4 = cst_T4$8,
    cst_a4_diff = cst_a4_diff$17,
    cst_lib_src_tuples_ml_507_16 = "lib/src/tuples.ml:507:16",
    cst_T4$1 = cst_T4$8,
    cst_a3_diff$5 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_506_16 = "lib/src/tuples.ml:506:16",
    cst_T3$4 = cst_T3$11,
    cst_a2_diff$11 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_505_16 = "lib/src/tuples.ml:505:16",
    cst_T2$7 = cst_T2$14,
    cst_a1_diff$11 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_504_16 = "lib/src/tuples.ml:504:16",
    cst_T1$7 = cst_T1$14,
    cst_a4_diff$0 = cst_a4_diff$17,
    cst_a3_diff$6 = cst_a3_diff$23,
    cst_a2_diff$12 = cst_a2_diff$29,
    cst_a1_diff$12 = cst_a1_diff$29,
    cst_a4$1 = cst_a4$26,
    cst_a3$10 = cst_a3$35,
    cst_a2$19 = cst_a2$44,
    cst_a1$19 = cst_a1$44,
    cst_t$21 = cst_t$49,
    cst_lib_src_tuples_ml_503_6 = "lib/src/tuples.ml:503:6",
    cst_a4_diff$1 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_514_57 = "lib/src/tuples.ml:514:57",
    cst_a3_diff$7 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_514_47 = "lib/src/tuples.ml:514:47",
    cst_a2_diff$13 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_514_37 = "lib/src/tuples.ml:514:37",
    cst_a1_diff$13 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_514_27 = "lib/src/tuples.ml:514:27",
    cst_a4$2 = cst_a4$26,
    cst_lib_src_tuples_ml_514_22 = "lib/src/tuples.ml:514:22",
    cst_a3$11 = cst_a3$35,
    cst_lib_src_tuples_ml_514_17 = "lib/src/tuples.ml:514:17",
    cst_a2$20 = cst_a2$44,
    cst_lib_src_tuples_ml_514_12 = "lib/src/tuples.ml:514:12",
    cst_a1$20 = cst_a1$44,
    cst_lib_src_tuples_ml_514_7 = "lib/src/tuples.ml:514:7",
    cst_a4_diff$2 = cst_a4_diff$17,
    cst_a3_diff$8 = cst_a3_diff$23,
    cst_a2_diff$14 = cst_a2_diff$29,
    cst_a1_diff$14 = cst_a1_diff$29,
    cst_a4$3 = cst_a4$26,
    cst_a3$12 = cst_a3$35,
    cst_a2$21 = cst_a2$44,
    cst_a1$21 = cst_a1$44,
    cst_t$23 = cst_t$49,
    cst_lib_src_tuples_ml_513_4 = "lib/src/tuples.ml:513:4",
    cst_a4$4 = cst_a4$26,
    cst_lib_src_tuples_ml_747_70 = "lib/src/tuples.ml:747:70",
    cst_a3$13 = cst_a3$35,
    cst_lib_src_tuples_ml_747_58 = "lib/src/tuples.ml:747:58",
    cst_a2$22 = cst_a2$44,
    cst_lib_src_tuples_ml_747_46 = "lib/src/tuples.ml:747:46",
    cst_a1$22 = cst_a1$44,
    cst_lib_src_tuples_ml_747_34 = "lib/src/tuples.ml:747:34",
    cst_a4$5 = cst_a4$26,
    cst_a3$14 = cst_a3$35,
    cst_a2$23 = cst_a2$44,
    cst_a1$23 = cst_a1$44,
    cst_t$25 = cst_t$49,
    cst_lib_src_tuples_ml_747_4 = "lib/src/tuples.ml:747:4",
    cst_a4_diff$3 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_754_59 = "lib/src/tuples.ml:754:59",
    cst_a3_diff$9 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_754_49 = "lib/src/tuples.ml:754:49",
    cst_a2_diff$15 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_754_39 = "lib/src/tuples.ml:754:39",
    cst_a1_diff$15 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_754_29 = "lib/src/tuples.ml:754:29",
    cst_a4$6 = cst_a4$26,
    cst_lib_src_tuples_ml_754_24 = "lib/src/tuples.ml:754:24",
    cst_a3$15 = cst_a3$35,
    cst_lib_src_tuples_ml_754_19 = "lib/src/tuples.ml:754:19",
    cst_a2$24 = cst_a2$44,
    cst_lib_src_tuples_ml_754_14 = "lib/src/tuples.ml:754:14",
    cst_a1$24 = cst_a1$44,
    cst_lib_src_tuples_ml_754_9 = "lib/src/tuples.ml:754:9",
    cst_a4_diff$4 = cst_a4_diff$17,
    cst_a3_diff$10 = cst_a3_diff$23,
    cst_a2_diff$16 = cst_a2_diff$29,
    cst_a1_diff$16 = cst_a1_diff$29,
    cst_a4$7 = cst_a4$26,
    cst_a3$16 = cst_a3$35,
    cst_a2$25 = cst_a2$44,
    cst_a1$25 = cst_a1$44,
    cst_t$27 = cst_t$49,
    cst_lib_src_tuples_ml_753_6 = "lib/src/tuples.ml:753:6",
    cst_a5 = cst_a5$17,
    cst_lib_src_tuples_ml_839_61 = "lib/src/tuples.ml:839:61",
    cst_a4$8 = cst_a4$26,
    cst_lib_src_tuples_ml_839_55 = "lib/src/tuples.ml:839:55",
    cst_a3$17 = cst_a3$35,
    cst_lib_src_tuples_ml_839_49 = "lib/src/tuples.ml:839:49",
    cst_a2$26 = cst_a2$44,
    cst_lib_src_tuples_ml_839_43 = "lib/src/tuples.ml:839:43",
    cst_a1$26 = cst_a1$44,
    cst_lib_src_tuples_ml_839_37 = "lib/src/tuples.ml:839:37",
    cst_a5$0 = cst_a5$17,
    cst_a4$9 = cst_a4$26,
    cst_a3$18 = cst_a3$35,
    cst_a2$27 = cst_a2$44,
    cst_a1$27 = cst_a1$44,
    cst_t$29 = cst_t$49,
    cst_lib_src_tuples_ml_839_2 = "lib/src/tuples.ml:839:2",
    cst_T1$8 = cst_T1$14,
    cst_T2$8 = cst_T2$14,
    cst_T3$5 = cst_T3$11,
    cst_T4$2 = cst_T4$8,
    cst_T5 = cst_T5$5,
    cst_a5_diff = cst_a5_diff$11,
    cst_lib_src_tuples_ml_850_16 = "lib/src/tuples.ml:850:16",
    cst_T5$1 = cst_T5$5,
    cst_a4_diff$5 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_849_16 = "lib/src/tuples.ml:849:16",
    cst_T4$4 = cst_T4$8,
    cst_a3_diff$11 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_848_16 = "lib/src/tuples.ml:848:16",
    cst_T3$7 = cst_T3$11,
    cst_a2_diff$17 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_847_16 = "lib/src/tuples.ml:847:16",
    cst_T2$10 = cst_T2$14,
    cst_a1_diff$17 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_846_16 = "lib/src/tuples.ml:846:16",
    cst_T1$10 = cst_T1$14,
    cst_a5_diff$0 = cst_a5_diff$11,
    cst_a4_diff$6 = cst_a4_diff$17,
    cst_a3_diff$12 = cst_a3_diff$23,
    cst_a2_diff$18 = cst_a2_diff$29,
    cst_a1_diff$18 = cst_a1_diff$29,
    cst_a5$1 = cst_a5$17,
    cst_a4$10 = cst_a4$26,
    cst_a3$19 = cst_a3$35,
    cst_a2$28 = cst_a2$44,
    cst_a1$28 = cst_a1$44,
    cst_t$31 = cst_t$49,
    cst_lib_src_tuples_ml_845_6 = "lib/src/tuples.ml:845:6",
    cst_a5_diff$1 = cst_a5_diff$11,
    cst_lib_src_tuples_ml_866_8 = "lib/src/tuples.ml:866:8",
    cst_a4_diff$7 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_865_8 = "lib/src/tuples.ml:865:8",
    cst_a3_diff$13 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_864_8 = "lib/src/tuples.ml:864:8",
    cst_a2_diff$19 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_863_8 = "lib/src/tuples.ml:863:8",
    cst_a1_diff$19 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_862_8 = "lib/src/tuples.ml:862:8",
    cst_a5$2 = cst_a5$17,
    cst_lib_src_tuples_ml_861_8 = "lib/src/tuples.ml:861:8",
    cst_a4$11 = cst_a4$26,
    cst_lib_src_tuples_ml_860_8 = "lib/src/tuples.ml:860:8",
    cst_a3$20 = cst_a3$35,
    cst_lib_src_tuples_ml_859_8 = "lib/src/tuples.ml:859:8",
    cst_a2$29 = cst_a2$44,
    cst_lib_src_tuples_ml_858_8 = "lib/src/tuples.ml:858:8",
    cst_a1$29 = cst_a1$44,
    cst_lib_src_tuples_ml_857_8 = "lib/src/tuples.ml:857:8",
    cst_a5_diff$2 = cst_a5_diff$11,
    cst_a4_diff$8 = cst_a4_diff$17,
    cst_a3_diff$14 = cst_a3_diff$23,
    cst_a2_diff$20 = cst_a2_diff$29,
    cst_a1_diff$20 = cst_a1_diff$29,
    cst_a5$3 = cst_a5$17,
    cst_a4$12 = cst_a4$26,
    cst_a3$21 = cst_a3$35,
    cst_a2$30 = cst_a2$44,
    cst_a1$30 = cst_a1$44,
    cst_t$33 = cst_t$49,
    cst_lib_src_tuples_ml_856_4 = "lib/src/tuples.ml:856:4",
    cst_a5$4 = cst_a5$17,
    cst_lib_src_tuples_ml_1142_54 = "lib/src/tuples.ml:1142:54",
    cst_a4$13 = cst_a4$26,
    cst_lib_src_tuples_ml_1142_42 = "lib/src/tuples.ml:1142:42",
    cst_a3$22 = cst_a3$35,
    cst_lib_src_tuples_ml_1142_30 = "lib/src/tuples.ml:1142:30",
    cst_a2$31 = cst_a2$44,
    cst_lib_src_tuples_ml_1142_18 = "lib/src/tuples.ml:1142:18",
    cst_a1$31 = cst_a1$44,
    cst_lib_src_tuples_ml_1142_6 = "lib/src/tuples.ml:1142:6",
    cst_a5$5 = cst_a5$17,
    cst_a4$14 = cst_a4$26,
    cst_a3$23 = cst_a3$35,
    cst_a2$32 = cst_a2$44,
    cst_a1$32 = cst_a1$44,
    cst_t$35 = cst_t$49,
    cst_lib_src_tuples_ml_1141_4 = "lib/src/tuples.ml:1141:4",
    cst_a5_diff$3 = cst_a5_diff$11,
    cst_lib_src_tuples_ml_1149_74 = "lib/src/tuples.ml:1149:74",
    cst_a4_diff$9 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_1149_64 = "lib/src/tuples.ml:1149:64",
    cst_a3_diff$15 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_1149_54 = "lib/src/tuples.ml:1149:54",
    cst_a2_diff$21 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_1149_44 = "lib/src/tuples.ml:1149:44",
    cst_a1_diff$21 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_1149_34 = "lib/src/tuples.ml:1149:34",
    cst_a5$6 = cst_a5$17,
    cst_lib_src_tuples_ml_1149_29 = "lib/src/tuples.ml:1149:29",
    cst_a4$15 = cst_a4$26,
    cst_lib_src_tuples_ml_1149_24 = "lib/src/tuples.ml:1149:24",
    cst_a3$24 = cst_a3$35,
    cst_lib_src_tuples_ml_1149_19 = "lib/src/tuples.ml:1149:19",
    cst_a2$33 = cst_a2$44,
    cst_lib_src_tuples_ml_1149_14 = "lib/src/tuples.ml:1149:14",
    cst_a1$33 = cst_a1$44,
    cst_lib_src_tuples_ml_1149_9 = "lib/src/tuples.ml:1149:9",
    cst_a5_diff$4 = cst_a5_diff$11,
    cst_a4_diff$10 = cst_a4_diff$17,
    cst_a3_diff$16 = cst_a3_diff$23,
    cst_a2_diff$22 = cst_a2_diff$29,
    cst_a1_diff$22 = cst_a1_diff$29,
    cst_a5$7 = cst_a5$17,
    cst_a4$16 = cst_a4$26,
    cst_a3$25 = cst_a3$35,
    cst_a2$34 = cst_a2$44,
    cst_a1$34 = cst_a1$44,
    cst_t$37 = cst_t$49,
    cst_lib_src_tuples_ml_1148_6 = "lib/src/tuples.ml:1148:6",
    cst_a6 = cst_a6$8,
    cst_lib_src_tuples_ml_1253_72 = "lib/src/tuples.ml:1253:72",
    cst_a5$8 = cst_a5$17,
    cst_lib_src_tuples_ml_1253_66 = "lib/src/tuples.ml:1253:66",
    cst_a4$17 = cst_a4$26,
    cst_lib_src_tuples_ml_1253_60 = "lib/src/tuples.ml:1253:60",
    cst_a3$26 = cst_a3$35,
    cst_lib_src_tuples_ml_1253_54 = "lib/src/tuples.ml:1253:54",
    cst_a2$35 = cst_a2$44,
    cst_lib_src_tuples_ml_1253_48 = "lib/src/tuples.ml:1253:48",
    cst_a1$35 = cst_a1$44,
    cst_lib_src_tuples_ml_1253_42 = "lib/src/tuples.ml:1253:42",
    cst_a6$0 = cst_a6$8,
    cst_a5$9 = cst_a5$17,
    cst_a4$18 = cst_a4$26,
    cst_a3$27 = cst_a3$35,
    cst_a2$36 = cst_a2$44,
    cst_a1$36 = cst_a1$44,
    cst_t$39 = cst_t$49,
    cst_lib_src_tuples_ml_1253_2 = "lib/src/tuples.ml:1253:2",
    cst_T1$11 = cst_T1$14,
    cst_T2$11 = cst_T2$14,
    cst_T3$8 = cst_T3$11,
    cst_T4$5 = cst_T4$8,
    cst_T5$2 = cst_T5$5,
    cst_T6 = cst_T6$2,
    cst_a6_diff = cst_a6_diff$5,
    cst_lib_src_tuples_ml_1278_16 = "lib/src/tuples.ml:1278:16",
    cst_T6$1 = cst_T6$2,
    cst_a5_diff$5 = cst_a5_diff$11,
    cst_lib_src_tuples_ml_1277_16 = "lib/src/tuples.ml:1277:16",
    cst_T5$4 = cst_T5$5,
    cst_a4_diff$11 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_1276_16 = "lib/src/tuples.ml:1276:16",
    cst_T4$7 = cst_T4$8,
    cst_a3_diff$17 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_1275_16 = "lib/src/tuples.ml:1275:16",
    cst_T3$10 = cst_T3$11,
    cst_a2_diff$23 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_1274_16 = "lib/src/tuples.ml:1274:16",
    cst_T2$13 = cst_T2$14,
    cst_a1_diff$23 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_1273_16 = "lib/src/tuples.ml:1273:16",
    cst_T1$13 = cst_T1$14,
    cst_a6_diff$0 = cst_a6_diff$5,
    cst_a5_diff$6 = cst_a5_diff$11,
    cst_a4_diff$12 = cst_a4_diff$17,
    cst_a3_diff$18 = cst_a3_diff$23,
    cst_a2_diff$24 = cst_a2_diff$29,
    cst_a1_diff$24 = cst_a1_diff$29,
    cst_a6$1 = cst_a6$8,
    cst_a5$10 = cst_a5$17,
    cst_a4$19 = cst_a4$26,
    cst_a3$28 = cst_a3$35,
    cst_a2$37 = cst_a2$44,
    cst_a1$37 = cst_a1$44,
    cst_t$41 = cst_t$49,
    cst_lib_src_tuples_ml_1260_6 = "lib/src/tuples.ml:1260:6",
    cst_a6_diff$1 = cst_a6_diff$5,
    cst_lib_src_tuples_ml_1308_8 = "lib/src/tuples.ml:1308:8",
    cst_a5_diff$7 = cst_a5_diff$11,
    cst_lib_src_tuples_ml_1307_8 = "lib/src/tuples.ml:1307:8",
    cst_a4_diff$13 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_1306_8 = "lib/src/tuples.ml:1306:8",
    cst_a3_diff$19 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_1305_8 = "lib/src/tuples.ml:1305:8",
    cst_a2_diff$25 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_1304_8 = "lib/src/tuples.ml:1304:8",
    cst_a1_diff$25 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_1303_8 = "lib/src/tuples.ml:1303:8",
    cst_a6$2 = cst_a6$8,
    cst_lib_src_tuples_ml_1302_8 = "lib/src/tuples.ml:1302:8",
    cst_a5$11 = cst_a5$17,
    cst_lib_src_tuples_ml_1301_8 = "lib/src/tuples.ml:1301:8",
    cst_a4$20 = cst_a4$26,
    cst_lib_src_tuples_ml_1300_8 = "lib/src/tuples.ml:1300:8",
    cst_a3$29 = cst_a3$35,
    cst_lib_src_tuples_ml_1299_8 = "lib/src/tuples.ml:1299:8",
    cst_a2$38 = cst_a2$44,
    cst_lib_src_tuples_ml_1298_8 = "lib/src/tuples.ml:1298:8",
    cst_a1$38 = cst_a1$44,
    cst_lib_src_tuples_ml_1297_8 = "lib/src/tuples.ml:1297:8",
    cst_a6_diff$2 = cst_a6_diff$5,
    cst_a5_diff$8 = cst_a5_diff$11,
    cst_a4_diff$14 = cst_a4_diff$17,
    cst_a3_diff$20 = cst_a3_diff$23,
    cst_a2_diff$26 = cst_a2_diff$29,
    cst_a1_diff$26 = cst_a1_diff$29,
    cst_a6$3 = cst_a6$8,
    cst_a5$12 = cst_a5$17,
    cst_a4$21 = cst_a4$26,
    cst_a3$30 = cst_a3$35,
    cst_a2$39 = cst_a2$44,
    cst_a1$39 = cst_a1$44,
    cst_t$43 = cst_t$49,
    cst_lib_src_tuples_ml_1284_4 = "lib/src/tuples.ml:1284:4",
    cst_a6$4 = cst_a6$8,
    cst_lib_src_tuples_ml_1635_66 = "lib/src/tuples.ml:1635:66",
    cst_a5$13 = cst_a5$17,
    cst_lib_src_tuples_ml_1635_54 = "lib/src/tuples.ml:1635:54",
    cst_a4$22 = cst_a4$26,
    cst_lib_src_tuples_ml_1635_42 = "lib/src/tuples.ml:1635:42",
    cst_a3$31 = cst_a3$35,
    cst_lib_src_tuples_ml_1635_30 = "lib/src/tuples.ml:1635:30",
    cst_a2$40 = cst_a2$44,
    cst_lib_src_tuples_ml_1635_18 = "lib/src/tuples.ml:1635:18",
    cst_a1$40 = cst_a1$44,
    cst_lib_src_tuples_ml_1635_6 = "lib/src/tuples.ml:1635:6",
    cst_a6$5 = cst_a6$8,
    cst_a5$14 = cst_a5$17,
    cst_a4$23 = cst_a4$26,
    cst_a3$32 = cst_a3$35,
    cst_a2$41 = cst_a2$44,
    cst_a1$41 = cst_a1$44,
    cst_t$45 = cst_t$49,
    cst_lib_src_tuples_ml_1634_4 = "lib/src/tuples.ml:1634:4",
    cst_a6_diff$3 = cst_a6_diff$5,
    cst_lib_src_tuples_ml_1665_10 = "lib/src/tuples.ml:1665:10",
    cst_a5_diff$9 = cst_a5_diff$11,
    cst_lib_src_tuples_ml_1664_10 = "lib/src/tuples.ml:1664:10",
    cst_a4_diff$15 = cst_a4_diff$17,
    cst_lib_src_tuples_ml_1663_10 = "lib/src/tuples.ml:1663:10",
    cst_a3_diff$21 = cst_a3_diff$23,
    cst_lib_src_tuples_ml_1662_10 = "lib/src/tuples.ml:1662:10",
    cst_a2_diff$27 = cst_a2_diff$29,
    cst_lib_src_tuples_ml_1661_10 = "lib/src/tuples.ml:1661:10",
    cst_a1_diff$27 = cst_a1_diff$29,
    cst_lib_src_tuples_ml_1660_10 = "lib/src/tuples.ml:1660:10",
    cst_a6$6 = cst_a6$8,
    cst_lib_src_tuples_ml_1659_10 = "lib/src/tuples.ml:1659:10",
    cst_a5$15 = cst_a5$17,
    cst_lib_src_tuples_ml_1658_10 = "lib/src/tuples.ml:1658:10",
    cst_a4$24 = cst_a4$26,
    cst_lib_src_tuples_ml_1657_10 = "lib/src/tuples.ml:1657:10",
    cst_a3$33 = cst_a3$35,
    cst_lib_src_tuples_ml_1656_10 = "lib/src/tuples.ml:1656:10",
    cst_a2$42 = cst_a2$44,
    cst_lib_src_tuples_ml_1655_10 = "lib/src/tuples.ml:1655:10",
    cst_a1$42 = cst_a1$44,
    cst_lib_src_tuples_ml_1654_10 = "lib/src/tuples.ml:1654:10",
    cst_a6_diff$4 = cst_a6_diff$5,
    cst_a5_diff$10 = cst_a5_diff$11,
    cst_a4_diff$16 = cst_a4_diff$17,
    cst_a3_diff$22 = cst_a3_diff$23,
    cst_a2_diff$28 = cst_a2_diff$29,
    cst_a1_diff$28 = cst_a1_diff$29,
    cst_a6$7 = cst_a6$8,
    cst_a5$16 = cst_a5$17,
    cst_a4$25 = cst_a4$26,
    cst_a3$34 = cst_a3$35,
    cst_a2$43 = cst_a2$44,
    cst_a1$43 = cst_a1$44,
    cst_t$47 = cst_t$49,
    cst_lib_src_tuples_ml_1641_6 = "lib/src/tuples.ml:1641:6",
    cst_diffable = cst_diffable$0,
    cst_Diffable_Tuples = cst_Diffable_Tuples$0;
   function t_of_sexp(of_a1_001, of_a2_002, sexp_008){
    if(1 === sexp_008[0]){
     var _wT_ = sexp_008[1];
     if(_wT_){
      var _wU_ = _wT_[2];
      if(_wU_ && ! _wU_[2]){
       var
        arg1_005 = _wU_[1],
        arg0_004 = _wT_[1],
        res0_006 = caml_call1(of_a1_001, arg0_004),
        res1_007 = caml_call1(of_a2_002, arg1_005);
       return [0, res0_006, res1_007];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_009, 2, sexp_008);
   }
   function sexp_of_t(of_a1_010, of_a2_011, param){
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = caml_call1(of_a1_010, arg0_012),
     res1_015 = caml_call1(of_a2_011, arg1_013);
    return [1, [0, res0_014, [0, res1_015, 0]]];
   }
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a2),
    _b_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_12_28),
    _c_ = [0, caml_call2(Bin_prot_Shape[11], _b_, _a_), 0],
    _d_ = caml_call1(Bin_shape[3][1], cst_a1),
    _e_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_12_22),
    _f_ = [0, caml_call2(Bin_prot_Shape[11], _e_, _d_), _c_],
    _g_ = caml_call1(Bin_prot_Shape[3], _f_),
    _h_ = [0, caml_call1(Bin_shape[3][1], cst_a2$0), 0],
    _i_ = [0, caml_call1(Bin_shape[3][1], cst_a1$0), _h_],
    _j_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _i_, _g_], 0],
    _k_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_12_2),
    group = caml_call2(Bin_prot_Shape[2], _k_, _j_);
   function bin_shape_t(a1, a2){
    var _wS_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _wS_), [0, a1, [0, a2, 0]]);
   }
   function bin_size_t(size_of_a1, size_of_a2, param){
    var
     v2 = param[2],
     v1 = param[1],
     _wQ_ = caml_call1(size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _wQ_),
     _wR_ = caml_call1(size_of_a2, v2);
    return caml_call2(Bin_prot_Common[23], size, _wR_);
   }
   function bin_write_t(write_a1, write_a2, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a1, buf, pos, v1);
    return caml_call3(write_a2, buf, pos$0, v2);
   }
   function bin_writer_t(bin_writer_a1, bin_writer_a2){
    function _wL_(v){
     var _wM_ = bin_writer_a2[2], _wN_ = bin_writer_a1[2];
     return function(_wO_, _wP_){
      return bin_write_t(_wN_, _wM_, v, _wO_, _wP_);};
    }
    return [0,
            function(v){
             return bin_size_t(bin_writer_a1[1], bin_writer_a2[1], v);
            },
            _wL_];
   }
   function bin_read_t(of_a1, of_a2, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple2_t, pos_ref[1]);
   }
   function bin_read_t$0(of_a1, of_a2, buf, pos_ref){
    var
     v1 = caml_call2(of_a1, buf, pos_ref),
     v2 = caml_call2(of_a2, buf, pos_ref);
    return [0, v1, v2];
   }
   function bin_reader_t(bin_reader_a1, bin_reader_a2){
    function _wK_(buf, pos_ref, vtag){
     return bin_read_t(bin_reader_a1[1], bin_reader_a2[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0
                     (bin_reader_a1[1], bin_reader_a2[1], buf, pos_ref);
            },
            _wK_];
   }
   function bin_t(bin_a1, bin_a2){
    var
     _wI_ = bin_reader_t(bin_a1[3], bin_a2[3]),
     _wJ_ = bin_writer_t(bin_a1[2], bin_a2[2]);
    return [0, bin_shape_t(bin_a1[1], bin_a2[1]), _wJ_, _wI_];
   }
   function t1(v0){return [0, v0];}
   function t2(v0){return [1, v0];}
   function is_t1(param){return 0 === param[0] ? 1 : 0;}
   function is_t2(param){return 0 === param[0] ? 0 : 1;}
   function t1_val(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t2_val(param){
    if(0 === param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var t1$0 = [0, cst_T1, 0, t1], t2$0 = [0, cst_T2, 1, t2];
   function fold(init, t1_fun, t2_fun){
    return caml_call2(t2_fun, caml_call2(t1_fun, init, t1$0), t2$0);
   }
   function iter(t1_fun, t2_fun){
    caml_call1(t1_fun, t1$0);
    return caml_call1(t2_fun, t2$0);
   }
   function map(t, t1_fun, t2_fun){
    if(0 === t[0]){var v0 = t[1]; return caml_call2(t1_fun, t1$0, v0);}
    var v0$0 = t[1];
    return caml_call2(t2_fun, t2$0, v0$0);
   }
   function make_matcher(t1_fun, t2_fun, compile_acc){
    var
     match = caml_call2(t1_fun, t1$0, compile_acc),
     compile_acc$0 = match[2],
     t1_gen = match[1],
     match$0 = caml_call2(t2_fun, t2$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     t2_gen = match$0[1];
    function _wF_(param){return t1_gen;}
    function _wG_(param){return t2_gen;}
    return [0, function(_wH_){return map(_wH_, _wF_, _wG_);}, compile_acc$1];
   }
   function to_rank(param){return 0 === param[0] ? 0 : 1;}
   function to_name(param){return 0 === param[0] ? cst_T1$0 : cst_T2$0;}
   var
    Variants =
      [0,
       t1$0,
       t2$0,
       fold,
       iter,
       map,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
   function t_of_sexp$0
   (of_a1_016, of_a2_017, of_a1_diff_018, of_a2_diff_019, sexp_024){
    a:
    {
     if(0 === sexp_024[0]){
      var _wC_ = sexp_024[1];
      b:
      if(caml_string_notequal(_wC_, cst_T1$14)){
       if(caml_string_notequal(_wC_, cst_T2$14)){
        if(! caml_string_notequal(_wC_, cst_t1)) break b;
        if(caml_string_notequal(_wC_, cst_t2)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_022, sexp_024);
     }
     var _wD_ = sexp_024[1];
     if(! _wD_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_022, sexp_024);
     var _wE_ = _wD_[1];
     if(0 !== _wE_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_022, sexp_024);
     var tag_025 = _wE_[1];
     b:
     if(caml_string_notequal(tag_025, cst_T1$14)){
      if(caml_string_notequal(tag_025, cst_T2$14)){
       if(! caml_string_notequal(tag_025, cst_t1)) break b;
       if(caml_string_notequal(tag_025, cst_t2)) break a;
      }
      var sexp_args_031 = _wD_[2];
      if(sexp_args_031 && ! sexp_args_031[2]){
       var
        arg0_032 = sexp_args_031[1],
        res0_033 = caml_call1(of_a2_diff_019, arg0_032);
       return [1, res0_033];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_022,
               tag_025,
               sexp_024);
     }
     var sexp_args_026 = _wD_[2];
     if(sexp_args_026 && ! sexp_args_026[2]){
      var
       arg0_027 = sexp_args_026[1],
       res0_028 = caml_call1(of_a1_diff_018, arg0_027);
      return [0, res0_028];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_022,
              tag_025,
              sexp_024);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_022, sexp_024);
   }
   function sexp_of_t$0
   (of_a1_038, of_a2_039, of_a1_diff_040, of_a2_diff_041, param){
    if(0 === param[0]){
     var arg0_042 = param[1], res0_043 = caml_call1(of_a1_diff_040, arg0_042);
     return [1, [0, _l_, [0, res0_043, 0]]];
    }
    var arg0_044 = param[1], res0_045 = caml_call1(of_a2_diff_041, arg0_044);
    return [1, [0, _m_, [0, res0_045, 0]]];
   }
   var
    _n_ = caml_call1(Bin_shape[3][1], cst_a2_diff),
    _o_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_20_16),
    _p_ =
      [0, [0, cst_T2$1, [0, caml_call2(Bin_prot_Shape[11], _o_, _n_), 0]], 0],
    _q_ = caml_call1(Bin_shape[3][1], cst_a1_diff),
    _r_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_19_16),
    _s_ =
      [0,
       [0, cst_T1$1, [0, caml_call2(Bin_prot_Shape[11], _r_, _q_), 0]],
       _p_],
    _t_ = caml_call1(Bin_prot_Shape[5], _s_),
    _u_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$0), 0],
    _v_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$0), _u_],
    _w_ = [0, caml_call1(Bin_shape[3][1], cst_a2$1), _v_],
    _x_ = [0, caml_call1(Bin_shape[3][1], cst_a1$1), _w_],
    _y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _x_, _t_], 0],
    _z_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_18_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _z_, _y_);
   function bin_shape_t$0(a1, a2, a1_diff, a2_diff){
    var _wB_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _wB_),
             [0, a1, [0, a2, [0, a1_diff, [0, a2_diff, 0]]]]);
   }
   function bin_size_t$0
   (size_of_a1, size_of_a2, size_of_a1_diff, size_of_a2_diff, param){
    if(0 === param[0]){
     var v1 = param[1], _wz_ = caml_call1(size_of_a1_diff, v1);
     return caml_call2(Bin_prot_Common[23], 1, _wz_);
    }
    var v1$0 = param[1], _wA_ = caml_call1(size_of_a2_diff, v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _wA_);
   }
   function bin_write_t$0
   (write_a1, write_a2, write_a1_diff, write_a2_diff, buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(write_a1_diff, buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return caml_call3(write_a2_diff, buf, pos$1, v1$0);
   }
   function bin_writer_t$0
   (bin_writer_a1, bin_writer_a2, bin_writer_a1_diff, bin_writer_a2_diff){
    function _ws_(v){
     var
      _wt_ = bin_writer_a2_diff[2],
      _wu_ = bin_writer_a1_diff[2],
      _wv_ = bin_writer_a2[2],
      _ww_ = bin_writer_a1[2];
     return function(_wx_, _wy_){
      return bin_write_t$0(_ww_, _wv_, _wu_, _wt_, v, _wx_, _wy_);};
    }
    return [0,
            function(v){
             return bin_size_t$0
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      v);
            },
            _ws_];
   }
   function bin_read_t$1
   (of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple2_D, pos_ref[1]);
   }
   function bin_read_t$2(of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(of_a1_diff, buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _A_, pos_ref[1]);
    var arg_1$0 = caml_call2(of_a2_diff, buf, pos_ref);
    return [1, arg_1$0];
   }
   function bin_reader_t$0
   (bin_reader_a1, bin_reader_a2, bin_reader_a1_diff, bin_reader_a2_diff){
    function _wr_(buf, pos_ref, vtag){
     return bin_read_t$1
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$2
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      buf,
                      pos_ref);
            },
            _wr_];
   }
   function bin_t$0(bin_a1, bin_a2, bin_a1_diff, bin_a2_diff){
    var
     _wp_ =
       bin_reader_t$0(bin_a1[3], bin_a2[3], bin_a1_diff[3], bin_a2_diff[3]),
     _wq_ =
       bin_writer_t$0(bin_a1[2], bin_a2[2], bin_a1_diff[2], bin_a2_diff[2]);
    return [0,
            bin_shape_t$0
             (bin_a1[1], bin_a2[1], bin_a1_diff[1], bin_a2_diff[1]),
            _wq_,
            _wp_];
   }
   function quickcheck_generator
   (generator_065, generator_066, generator_067, generator_068){
    var _wk_ = 0;
    function _wl_(size_071, random_072){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_068,
               size_071,
               random_072)];
    }
    var
     _wm_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _wl_)], _wk_];
    function _wn_(size_069, random_070){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_067,
               size_069,
               random_070)];
    }
    var
     _wo_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _wn_)], _wm_];
    return caml_call1(Base_quickcheck_Generator[60], _wo_);
   }
   function quickcheck_observer
   (observer_056, observer_057, observer_058, observer_059){
    function _wj_(x_060, size_061, hash_062){
     if(0 === x_060[0]){
      var
       x_063 = x_060[1],
       hash_062$0 = caml_call2(Base[133], hash_062, 0),
       hash_062$1 =
         caml_call4
          (Base_quickcheck_Observer[37],
           observer_058,
           x_063,
           size_061,
           hash_062$0);
      return hash_062$1;
     }
     var
      x_064 = x_060[1],
      hash_062$2 = caml_call2(Base[133], hash_062, 1),
      hash_062$3 =
        caml_call4
         (Base_quickcheck_Observer[37],
          observer_059,
          x_064,
          size_061,
          hash_062$2);
     return hash_062$3;
    }
    return caml_call1(Base_quickcheck_Observer[36], _wj_);
   }
   function quickcheck_shrinker
   (shrinker_050, shrinker_051, shrinker_052, shrinker_053){
    function _wa_(param){
     if(0 === param[0]){
      var
       x_054 = param[1],
       _wb_ = 0,
       _wc_ = function(x_054){return [0, x_054];},
       _wd_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_052, x_054),
       _we_ = [0, caml_call2(Base_Sequence[35], _wd_, _wc_), _wb_];
      return caml_call1(Base_Sequence[70], _we_);
     }
     var x_055 = param[1], _wf_ = 0;
     function _wg_(x_055){return [1, x_055];}
     var
      _wh_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_053, x_055),
      _wi_ = [0, caml_call2(Base_Sequence[35], _wh_, _wg_), _wf_];
     return caml_call1(Base_Sequence[70], _wi_);
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _wa_);
   }
   function sexp_of_t$1
   (of_a1_079, of_a2_080, of_a1_diff_081, of_a2_diff_082, x_083){
    function _v__(_v$_){
     return sexp_of_t$0
             (of_a1_079, of_a2_080, of_a1_diff_081, of_a2_diff_082, _v$_);
    }
    return caml_call2(Base[165], _v__, x_083);
   }
   var
    _B_ = caml_call1(Bin_shape[3][1], cst_a2_diff$1),
    _C_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_27_27),
    _D_ = caml_call2(Bin_prot_Shape[11], _C_, _B_),
    _E_ = caml_call1(Bin_shape[3][1], cst_a1_diff$1),
    _F_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_27_17),
    _G_ = caml_call2(Bin_prot_Shape[11], _F_, _E_),
    _H_ = caml_call1(Bin_shape[3][1], cst_a2$2),
    _I_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_27_12),
    _J_ = caml_call2(Bin_prot_Shape[11], _I_, _H_),
    _K_ = caml_call1(Bin_shape[3][1], cst_a1$2),
    _L_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_27_7),
    _ku_ =
      bin_shape_t$0(caml_call2(Bin_prot_Shape[11], _L_, _K_), _J_, _G_, _D_),
    _M_ = caml_call1(Bin_prot_Std[203], _ku_),
    _N_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$2), 0],
    _O_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$2), _N_],
    _P_ = [0, caml_call1(Bin_shape[3][1], cst_a2$3), _O_],
    _Q_ = [0, caml_call1(Bin_shape[3][1], cst_a1$3), _P_],
    _R_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _Q_, _M_], 0],
    _S_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_26_4),
    group$1 = caml_call2(Bin_prot_Shape[2], _S_, _R_);
   function bin_shape_t$1(a1, a2, a1_diff, a2_diff){
    var _v9_ = caml_call1(Bin_shape[2][1], cst_t$4);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _v9_),
             [0, a1, [0, a2, [0, a1_diff, [0, a2_diff, 0]]]]);
   }
   function bin_size_t$1
   (size_of_a1, size_of_a2, size_of_a1_diff, size_of_a2_diff, v){
    function _v7_(_v8_){
     return bin_size_t$0
             (size_of_a1, size_of_a2, size_of_a1_diff, size_of_a2_diff, _v8_);
    }
    return caml_call2(Bin_prot_Std[18], _v7_, v);
   }
   function bin_write_t$1
   (write_a1, write_a2, write_a1_diff, write_a2_diff, buf, pos, v){
    function _v3_(_v4_, _v5_, _v6_){
     return bin_write_t$0
             (write_a1,
              write_a2,
              write_a1_diff,
              write_a2_diff,
              _v4_,
              _v5_,
              _v6_);
    }
    return caml_call4(Bin_prot_Std[205], _v3_, buf, pos, v);
   }
   function bin_writer_t$1
   (bin_writer_a1, bin_writer_a2, bin_writer_a1_diff, bin_writer_a2_diff){
    function _vW_(v){
     var
      _vX_ = bin_writer_a2_diff[2],
      _vY_ = bin_writer_a1_diff[2],
      _vZ_ = bin_writer_a2[2],
      _v0_ = bin_writer_a1[2];
     return function(_v1_, _v2_){
      return bin_write_t$1(_v0_, _vZ_, _vY_, _vX_, v, _v1_, _v2_);};
    }
    return [0,
            function(v){
             return bin_size_t$1
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      v);
            },
            _vW_];
   }
   function bin_read_t$3
   (of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref, vint){
    function _vT_(_vU_, _vV_){
     return bin_read_t$2(of_a1, of_a2, of_a1_diff, of_a2_diff, _vU_, _vV_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _vT_), buf, pos_ref, vint);
   }
   function bin_read_t$4(of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref){
    function _vQ_(_vR_, _vS_){
     return bin_read_t$2(of_a1, of_a2, of_a1_diff, of_a2_diff, _vR_, _vS_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _vQ_), buf, pos_ref);
   }
   function bin_reader_t$1
   (bin_reader_a1, bin_reader_a2, bin_reader_a1_diff, bin_reader_a2_diff){
    function _vP_(buf, pos_ref, vtag){
     return bin_read_t$3
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$4
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      buf,
                      pos_ref);
            },
            _vP_];
   }
   function bin_t$1(bin_a1, bin_a2, bin_a1_diff, bin_a2_diff){
    var
     _vN_ =
       bin_reader_t$1(bin_a1[3], bin_a2[3], bin_a1_diff[3], bin_a2_diff[3]),
     _vO_ =
       bin_writer_t$1(bin_a1[2], bin_a2[2], bin_a1_diff[2], bin_a2_diff[2]);
    return [0,
            bin_shape_t$1
             (bin_a1[1], bin_a2[1], bin_a1_diff[1], bin_a2_diff[1]),
            _vO_,
            _vN_];
   }
   function quickcheck_generator$0
   (generator_092, generator_093, generator_094, generator_095){
    var
     _vM_ =
       quickcheck_generator
        (generator_092, generator_093, generator_094, generator_095);
    return caml_call1(Base_quickcheck_Export[32], _vM_);
   }
   function quickcheck_observer$0
   (observer_088, observer_089, observer_090, observer_091){
    var
     _vL_ =
       quickcheck_observer
        (observer_088, observer_089, observer_090, observer_091);
    return caml_call1(Base_quickcheck_Export[37], _vL_);
   }
   function quickcheck_shrinker$0
   (shrinker_084, shrinker_085, shrinker_086, shrinker_087){
    var
     _vK_ =
       quickcheck_shrinker
        (shrinker_084, shrinker_085, shrinker_086, shrinker_087);
    return caml_call1(Base_quickcheck_Export[42], _vK_);
   }
   function compare_rank(t1, t2){
    var
     _vI_ = caml_call1(Variants[7], t2),
     _vJ_ = caml_call1(Variants[7], t1);
    return caml_call2(Base_Int[14], _vJ_, _vI_);
   }
   function equal_rank(t1, t2){
    var
     _vG_ = caml_call1(Variants[7], t2),
     _vH_ = caml_call1(Variants[7], t1);
    return caml_call2(Base_Int[13], _vH_, _vG_);
   }
   function get(get1, get2, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_2 = from[2],
     from_1 = from[1],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get2, from_2, to_2),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$1 = diff;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$1 = [0, [1, d$0], diff];
    var ppx_optional_e_0$0 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn(apply1_exn, apply2_exn, derived_on, diff){
    var derived_on2 = derived_on[2], derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(0 !== match$0[0]){
       var
        tl$0 = diff$0[2],
        d$0 = match$0[1],
        diff$1 = tl$0,
        t2 = caml_call2(apply2_exn, derived_on2, d$0);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    return diff$1
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a)
            : [0, t1, t2];
   }
   function of_list_exn
   (of_list1_exn, apply1_exn, of_list2_exn, apply2_exn, ts){
    if(! ts) return Diffable_Optional_diff[1];
    var
     _vA_ = caml_call1(Base_List[11], ts),
     diff = caml_call2(Base_List[84], _vA_, compare_rank);
    if(! diff) return caml_call1(Diffable_Optional_diff[2], 0);
    var acc = 0, param = diff;
    for(;;){
     if(! param){
      var _vF_ = caml_call1(Base_List[63], acc);
      return caml_call1(Diffable_Optional_diff[2], _vF_);
     }
     var match = param[1];
     if(0 === match[0]){
      var
       tl = param[2],
       d = match[1],
       _vB_ = function(param){return 0 === param[0] ? 1 : 0;},
       match$0 = caml_call2(Base_List[143], tl, _vB_),
       tl$0 = match$0[2],
       ds = match$0[1],
       _vC_ =
         function(param){
          if(0 !== param[0])
           throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
          var x = param[1];
          return x;
         },
       ds$0 = caml_call2(Base_List[53], ds, _vC_),
       ppx_optional_e_0 = caml_call1(of_list1_exn, [0, d, ds$0]);
      if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
       var param = tl$0;
      else
       var
        d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
        acc$0 = [0, [0, d$0], acc],
        acc = acc$0,
        param = tl$0;
     }
     else{
      var
       tl$1 = param[2],
       d$1 = match[1],
       _vD_ = function(param){return 0 === param[0] ? 0 : 1;},
       match$1 = caml_call2(Base_List[143], tl$1, _vD_),
       tl$2 = match$1[2],
       ds$1 = match$1[1],
       _vE_ =
         function(param){
          if(0 === param[0])
           throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
          var x = param[1];
          return x;
         },
       ds$2 = caml_call2(Base_List[53], ds$1, _vE_),
       ppx_optional_e_0$0 = caml_call1(of_list2_exn, [0, d$1, ds$2]);
      if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
       var param = tl$2;
      else
       var
        d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
        acc$1 = [0, [1, d$2], acc],
        acc = acc$1,
        param = tl$2;
     }
    }
   }
   function singleton(entry_diff){return [0, entry_diff, 0];}
   function t_of_sexp$1
   (a1_of_sexp, a2_of_sexp, a1_diff_of_sexp, a2_diff_of_sexp, x_078){
    function _vv_(_vz_){
     return t_of_sexp$0
             (a1_of_sexp, a2_of_sexp, a1_diff_of_sexp, a2_diff_of_sexp, _vz_);
    }
    var
     _vw_ = caml_call2(Base[164], _vv_, x_078),
     l = caml_call2(Base_List[83], _vw_, compare_rank),
     match = caml_call2(Base_List[124], l, equal_rank);
    if(! match) return l;
    var
     dup = match[1][1],
     _vx_ = caml_call1(Variants[8], dup),
     _vy_ = caml_call2(Base[241], cst_Duplicate_entry_in_tuple_d, _vx_);
    return caml_call1(Base[244], _vy_);
   }
   function create(t1, t2, param){
    var diff = 0;
    if(t2) var d = t2[1], diff$0 = [0, [1, d], diff]; else var diff$0 = diff;
    if(t1)
     var d$0 = t1[1], diff$1 = [0, [0, d$0], diff$0];
    else
     var diff$1 = diff$0;
    return diff$1;
   }
   function create_of_variants(t1, t2){
    var ppx_optional_e_0 = caml_call1(t2, Variants[2]), diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$1 = diff;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$1 = [0, [1, d$0], diff];
    var ppx_optional_e_0$0 = caml_call1(t1, Variants[1]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$0 = [0, [0, d], diff$1];
    return diff$0;
   }
   function t_of_sexp$2(of_a1_096, of_a2_097, sexp_103){
    if(1 === sexp_103[0]){
     var _vt_ = sexp_103[1];
     if(_vt_){
      var _vu_ = _vt_[2];
      if(_vu_ && ! _vu_[2]){
       var
        arg1_100 = _vu_[1],
        arg0_099 = _vt_[1],
        res0_101 = caml_call2(Gel[12], of_a1_096, arg0_099),
        res1_102 = caml_call2(Gel[12], of_a2_097, arg1_100);
       return [0, res0_101, res1_102];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_104, 2, sexp_103);
   }
   function sexp_of_t$2(of_a1_105, of_a2_106, param){
    var
     arg1_108 = param[2],
     arg0_107 = param[1],
     res0_109 = caml_call2(Gel[13], of_a1_105, arg0_107),
     res1_110 = caml_call2(Gel[13], of_a2_106, arg1_108);
    return [1, [0, res0_109, [0, res1_110, 0]]];
   }
   var
    _V_ = caml_call1(Bin_shape[3][1], cst_a2$4),
    _W_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_163_36),
    _X_ = caml_call2(Bin_prot_Shape[11], _W_, _V_),
    _Y_ = [0, caml_call1(Gel[1], _X_), 0],
    _Z_ = caml_call1(Bin_shape[3][1], cst_a1$4),
    ___ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_163_24),
    _$_ = caml_call2(Bin_prot_Shape[11], ___, _Z_),
    _aa_ = [0, caml_call1(Gel[1], _$_), _Y_],
    _ab_ = caml_call1(Bin_prot_Shape[3], _aa_),
    _ac_ = [0, caml_call1(Bin_shape[3][1], cst_a2$5), 0],
    _ad_ = [0, caml_call1(Bin_shape[3][1], cst_a1$5), _ac_],
    _ae_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), _ad_, _ab_], 0],
    _af_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_163_4),
    group$2 = caml_call2(Bin_prot_Shape[2], _af_, _ae_);
   function bin_shape_t$2(a1, a2){
    var _vs_ = caml_call1(Bin_shape[2][1], cst_t$6);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$2, _vs_),
             [0, a1, [0, a2, 0]]);
   }
   function bin_size_t$2(size_of_a1, size_of_a2, param){
    var
     v2 = param[2],
     v1 = param[1],
     _vq_ = caml_call2(Gel[2], size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _vq_),
     _vr_ = caml_call2(Gel[2], size_of_a2, v2);
    return caml_call2(Bin_prot_Common[23], size, _vr_);
   }
   function bin_write_t$2(write_a1, write_a2, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call4(Gel[3], write_a1, buf, pos, v1);
    return caml_call4(Gel[3], write_a2, buf, pos$0, v2);
   }
   function bin_writer_t$2(bin_writer_a1, bin_writer_a2){
    function _vl_(v){
     var _vm_ = bin_writer_a2[2], _vn_ = bin_writer_a1[2];
     return function(_vo_, _vp_){
      return bin_write_t$2(_vn_, _vm_, v, _vo_, _vp_);};
    }
    return [0,
            function(v){
             return bin_size_t$2(bin_writer_a1[1], bin_writer_a2[1], v);
            },
            _vl_];
   }
   function bin_read_t$5(of_a1, of_a2, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple2_F, pos_ref[1]);
   }
   function bin_read_t$6(of_a1, of_a2, buf, pos_ref){
    var
     v1 = caml_call2(caml_call1(Gel[4], of_a1), buf, pos_ref),
     v2 = caml_call2(caml_call1(Gel[4], of_a2), buf, pos_ref);
    return [0, v1, v2];
   }
   function bin_reader_t$2(bin_reader_a1, bin_reader_a2){
    function _vk_(buf, pos_ref, vtag){
     return bin_read_t$5
             (bin_reader_a1[1], bin_reader_a2[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$6
                     (bin_reader_a1[1], bin_reader_a2[1], buf, pos_ref);
            },
            _vk_];
   }
   function bin_t$2(bin_a1, bin_a2){
    var
     _vi_ = bin_reader_t$2(bin_a1[3], bin_a2[3]),
     _vj_ = bin_writer_t$2(bin_a1[2], bin_a2[2]);
    return [0, bin_shape_t$2(bin_a1[1], bin_a2[1]), _vj_, _vi_];
   }
   var
    _ag_ = caml_call1(Bin_shape[3][1], cst_a2_diff$3),
    _ah_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_168_67),
    _ai_ = caml_call2(Bin_prot_Shape[11], _ah_, _ag_),
    _aj_ = caml_call1(Bin_shape[3][1], cst_a1_diff$3),
    _ak_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_168_57),
    _al_ = caml_call2(Bin_prot_Shape[11], _ak_, _aj_),
    _am_ = caml_call1(Bin_shape[3][1], cst_a2$6),
    _an_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_168_52),
    _ao_ = caml_call2(Bin_prot_Shape[11], _an_, _am_),
    _ap_ = caml_call1(Bin_shape[3][1], cst_a1$6),
    _aq_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_168_47),
    _kt_ =
      bin_shape_t$1
       (caml_call2(Bin_prot_Shape[11], _aq_, _ap_), _ao_, _al_, _ai_),
    _ar_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$4), 0],
    _as_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$4), _ar_],
    _at_ = [0, caml_call1(Bin_shape[3][1], cst_a2$7), _as_],
    _au_ = [0, caml_call1(Bin_shape[3][1], cst_a1$7), _at_],
    _av_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), _au_, _kt_], 0],
    _aw_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_168_6),
    group$3 = caml_call2(Bin_prot_Shape[2], _aw_, _av_);
   function bin_shape_t$3(a1, a2, a1_diff, a2_diff){
    var _vh_ = caml_call1(Bin_shape[2][1], cst_t$8);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$3, _vh_),
             [0, a1, [0, a2, [0, a1_diff, [0, a2_diff, 0]]]]);
   }
   function bin_size_t$3
   (size_of_a1, size_of_a2, size_of_a1_diff, size_of_a2_diff, v){
    return bin_size_t$1
            (size_of_a1, size_of_a2, size_of_a1_diff, size_of_a2_diff, v);
   }
   function bin_write_t$3
   (write_a1, write_a2, write_a1_diff, write_a2_diff, buf, pos, v){
    return bin_write_t$1
            (write_a1, write_a2, write_a1_diff, write_a2_diff, buf, pos, v);
   }
   function bin_writer_t$3
   (bin_writer_a1, bin_writer_a2, bin_writer_a1_diff, bin_writer_a2_diff){
    function _va_(v){
     var
      _vb_ = bin_writer_a2_diff[2],
      _vc_ = bin_writer_a1_diff[2],
      _vd_ = bin_writer_a2[2],
      _ve_ = bin_writer_a1[2];
     return function(_vf_, _vg_){
      return bin_write_t$3(_ve_, _vd_, _vc_, _vb_, v, _vf_, _vg_);};
    }
    return [0,
            function(v){
             return bin_size_t$3
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      v);
            },
            _va_];
   }
   function bin_read_t$7
   (of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref, vint){
    return bin_read_t$3
            (of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref, vint);
   }
   function bin_read_t$8(of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref){return bin_read_t$4(of_a1, of_a2, of_a1_diff, of_a2_diff, buf, pos_ref);
   }
   function bin_reader_t$3
   (bin_reader_a1, bin_reader_a2, bin_reader_a1_diff, bin_reader_a2_diff){
    function _u$_(buf, pos_ref, vtag){
     return bin_read_t$7
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$8
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      buf,
                      pos_ref);
            },
            _u$_];
   }
   function bin_t$3(bin_a1, bin_a2, bin_a1_diff, bin_a2_diff){
    var
     _u9_ =
       bin_reader_t$3(bin_a1[3], bin_a2[3], bin_a1_diff[3], bin_a2_diff[3]),
     _u__ =
       bin_writer_t$3(bin_a1[2], bin_a2[2], bin_a1_diff[2], bin_a2_diff[2]);
    return [0,
            bin_shape_t$3
             (bin_a1[1], bin_a2[1], bin_a1_diff[1], bin_a2_diff[1]),
            _u__,
            _u9_];
   }
   function quickcheck_generator$1
   (generator_130, generator_131, generator_132, generator_133){
    return quickcheck_generator$0
            (generator_130, generator_131, generator_132, generator_133);
   }
   function quickcheck_observer$1
   (observer_126, observer_127, observer_128, observer_129){
    return quickcheck_observer$0
            (observer_126, observer_127, observer_128, observer_129);
   }
   function quickcheck_shrinker$1
   (shrinker_122, shrinker_123, shrinker_124, shrinker_125){
    return quickcheck_shrinker$0
            (shrinker_122, shrinker_123, shrinker_124, shrinker_125);
   }
   function get$0(get1, get2, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_2 = from[2],
     from_1 = from[1],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get2, from_2, to_2),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$1 = diff;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$1 = [0, [1, d$0], diff];
    var ppx_optional_e_0$0 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$0(apply1_exn, apply2_exn, derived_on, diff){
    var derived_on2 = derived_on[2], derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(0 !== match$0[0]){
       var
        tl$0 = diff$0[2],
        d$0 = match$0[1],
        diff$1 = tl$0,
        t2 = caml_call2(apply2_exn, derived_on2, d$0);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    return diff$1
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$0)
            : [0, t1, t2];
   }
   function t_of_sexp$3(of_a1_134, of_a2_135, of_a3_136, sexp_144){
    if(1 === sexp_144[0]){
     var _u6_ = sexp_144[1];
     if(_u6_){
      var _u7_ = _u6_[2];
      if(_u7_){
       var _u8_ = _u7_[2];
       if(_u8_ && ! _u8_[2]){
        var
         arg2_140 = _u8_[1],
         arg1_139 = _u7_[1],
         arg0_138 = _u6_[1],
         res0_141 = caml_call1(of_a1_134, arg0_138),
         res1_142 = caml_call1(of_a2_135, arg1_139),
         res2_143 = caml_call1(of_a3_136, arg2_140);
        return [0, res0_141, res1_142, res2_143];
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_145, 3, sexp_144);
   }
   function sexp_of_t$3(of_a1_146, of_a2_147, of_a3_148, param){
    var
     arg2_151 = param[3],
     arg1_150 = param[2],
     arg0_149 = param[1],
     res0_152 = caml_call1(of_a1_146, arg0_149),
     res1_153 = caml_call1(of_a2_147, arg1_150),
     res2_154 = caml_call1(of_a3_148, arg2_151);
    return [1, [0, res0_152, [0, res1_153, [0, res2_154, 0]]]];
   }
   var
    _ax_ = caml_call1(Bin_shape[3][1], cst_a3),
    _ay_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_219_39),
    _az_ = [0, caml_call2(Bin_prot_Shape[11], _ay_, _ax_), 0],
    _aA_ = caml_call1(Bin_shape[3][1], cst_a2$8),
    _aB_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_219_33),
    _aC_ = [0, caml_call2(Bin_prot_Shape[11], _aB_, _aA_), _az_],
    _aD_ = caml_call1(Bin_shape[3][1], cst_a1$8),
    _aE_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_219_27),
    _aF_ = [0, caml_call2(Bin_prot_Shape[11], _aE_, _aD_), _aC_],
    _aG_ = caml_call1(Bin_prot_Shape[3], _aF_),
    _aH_ = [0, caml_call1(Bin_shape[3][1], cst_a3$0), 0],
    _aI_ = [0, caml_call1(Bin_shape[3][1], cst_a2$9), _aH_],
    _aJ_ = [0, caml_call1(Bin_shape[3][1], cst_a1$9), _aI_],
    _aK_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), _aJ_, _aG_], 0],
    _aL_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_219_2),
    group$4 = caml_call2(Bin_prot_Shape[2], _aL_, _aK_);
   function bin_shape_t$4(a1, a2, a3){
    var _u5_ = caml_call1(Bin_shape[2][1], cst_t$10);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$4, _u5_),
             [0, a1, [0, a2, [0, a3, 0]]]);
   }
   function bin_size_t$4(size_of_a1, size_of_a2, size_of_a3, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _u2_ = caml_call1(size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _u2_),
     _u3_ = caml_call1(size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _u3_),
     _u4_ = caml_call1(size_of_a3, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _u4_);
   }
   function bin_write_t$4(write_a1, write_a2, write_a3, buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a1, buf, pos, v1),
     pos$1 = caml_call3(write_a2, buf, pos$0, v2);
    return caml_call3(write_a3, buf, pos$1, v3);
   }
   function bin_writer_t$4(bin_writer_a1, bin_writer_a2, bin_writer_a3){
    function _uW_(v){
     var
      _uX_ = bin_writer_a3[2],
      _uY_ = bin_writer_a2[2],
      _uZ_ = bin_writer_a1[2];
     return function(_u0_, _u1_){
      return bin_write_t$4(_uZ_, _uY_, _uX_, v, _u0_, _u1_);};
    }
    return [0,
            function(v){
             return bin_size_t$4
                     (bin_writer_a1[1], bin_writer_a2[1], bin_writer_a3[1], v);
            },
            _uW_];
   }
   function bin_read_t$9(of_a1, of_a2, of_a3, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple3_t, pos_ref[1]);
   }
   function bin_read_t$10(of_a1, of_a2, of_a3, buf, pos_ref){
    var
     v1 = caml_call2(of_a1, buf, pos_ref),
     v2 = caml_call2(of_a2, buf, pos_ref),
     v3 = caml_call2(of_a3, buf, pos_ref);
    return [0, v1, v2, v3];
   }
   function bin_reader_t$4(bin_reader_a1, bin_reader_a2, bin_reader_a3){
    function _uV_(buf, pos_ref, vtag){
     return bin_read_t$9
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$10
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      buf,
                      pos_ref);
            },
            _uV_];
   }
   function bin_t$4(bin_a1, bin_a2, bin_a3){
    var
     _uT_ = bin_reader_t$4(bin_a1[3], bin_a2[3], bin_a3[3]),
     _uU_ = bin_writer_t$4(bin_a1[2], bin_a2[2], bin_a3[2]);
    return [0, bin_shape_t$4(bin_a1[1], bin_a2[1], bin_a3[1]), _uU_, _uT_];
   }
   function t1$1(v0){return [0, v0];}
   function t2$1(v0){return [1, v0];}
   function t3(v0){return [2, v0];}
   function is_t1$0(param){return 0 === param[0] ? 1 : 0;}
   function is_t2$0(param){return 1 === param[0] ? 1 : 0;}
   function is_t3(param){return 2 === param[0] ? 1 : 0;}
   function t1_val$0(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t2_val$0(param){
    if(1 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t3_val(param){
    if(2 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var
    t1$2 = [0, cst_T1$2, 0, t1$1],
    t2$2 = [0, cst_T2$2, 1, t2$1],
    t3$0 = [0, cst_T3, 2, t3];
   function fold$0(init, t1_fun, t2_fun, t3_fun){
    return caml_call2
            (t3_fun,
             caml_call2(t2_fun, caml_call2(t1_fun, init, t1$2), t2$2),
             t3$0);
   }
   function iter$0(t1_fun, t2_fun, t3_fun){
    caml_call1(t1_fun, t1$2);
    caml_call1(t2_fun, t2$2);
    return caml_call1(t3_fun, t3$0);
   }
   function map$0(t, t1_fun, t2_fun, t3_fun){
    switch(t[0]){
      case 0:
       var v0 = t[1]; return caml_call2(t1_fun, t1$2, v0);
      case 1:
       var v0$0 = t[1]; return caml_call2(t2_fun, t2$2, v0$0);
      default: var v0$1 = t[1]; return caml_call2(t3_fun, t3$0, v0$1);
    }
   }
   function make_matcher$0(t1_fun, t2_fun, t3_fun, compile_acc){
    var
     match = caml_call2(t1_fun, t1$2, compile_acc),
     compile_acc$0 = match[2],
     t1_gen = match[1],
     match$0 = caml_call2(t2_fun, t2$2, compile_acc$0),
     compile_acc$1 = match$0[2],
     t2_gen = match$0[1],
     match$1 = caml_call2(t3_fun, t3$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     t3_gen = match$1[1];
    function _uP_(param){return t1_gen;}
    function _uQ_(param){return t2_gen;}
    function _uR_(param){return t3_gen;}
    return [0,
            function(_uS_){return map$0(_uS_, _uP_, _uQ_, _uR_);},
            compile_acc$2];
   }
   function to_rank$0(param){
    switch(param[0]){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function to_name$0(param){
    switch(param[0]){
      case 0:
       return cst_T1$3;
      case 1:
       return cst_T2$3;
      default: return cst_T3$0;
    }
   }
   var
    Variants$0 =
      [0,
       t1$2,
       t2$2,
       t3$0,
       fold$0,
       iter$0,
       map$0,
       make_matcher$0,
       to_rank$0,
       to_name$0,
       descriptions$0];
   function t_of_sexp$4
   (of_a1_155,
    of_a2_156,
    of_a3_157,
    of_a1_diff_158,
    of_a2_diff_159,
    of_a3_diff_160,
    sexp_165){
    a:
    {
     if(0 === sexp_165[0]){
      var _uM_ = sexp_165[1];
      b:
      if(caml_string_notequal(_uM_, cst_T1$14)){
       c:
       if(caml_string_notequal(_uM_, cst_T2$14)){
        if(caml_string_notequal(_uM_, cst_T3$11)){
         if(! caml_string_notequal(_uM_, cst_t1)) break b;
         if(! caml_string_notequal(_uM_, cst_t2)) break c;
         if(caml_string_notequal(_uM_, cst_t3)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_163, sexp_165);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_163, sexp_165);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_163, sexp_165);
     }
     var _uN_ = sexp_165[1];
     if(! _uN_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_163, sexp_165);
     var _uO_ = _uN_[1];
     if(0 !== _uO_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_163, sexp_165);
     var tag_166 = _uO_[1];
     b:
     if(caml_string_notequal(tag_166, cst_T1$14)){
      c:
      if(caml_string_notequal(tag_166, cst_T2$14)){
       if(caml_string_notequal(tag_166, cst_T3$11)){
        if(! caml_string_notequal(tag_166, cst_t1)) break b;
        if(! caml_string_notequal(tag_166, cst_t2)) break c;
        if(caml_string_notequal(tag_166, cst_t3)) break a;
       }
       var sexp_args_177 = _uN_[2];
       if(sexp_args_177 && ! sexp_args_177[2]){
        var
         arg0_178 = sexp_args_177[1],
         res0_179 = caml_call1(of_a3_diff_160, arg0_178);
        return [2, res0_179];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_163,
                tag_166,
                sexp_165);
      }
      var sexp_args_172 = _uN_[2];
      if(sexp_args_172 && ! sexp_args_172[2]){
       var
        arg0_173 = sexp_args_172[1],
        res0_174 = caml_call1(of_a2_diff_159, arg0_173);
       return [1, res0_174];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_163,
               tag_166,
               sexp_165);
     }
     var sexp_args_167 = _uN_[2];
     if(sexp_args_167 && ! sexp_args_167[2]){
      var
       arg0_168 = sexp_args_167[1],
       res0_169 = caml_call1(of_a1_diff_158, arg0_168);
      return [0, res0_169];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_163,
              tag_166,
              sexp_165);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_163, sexp_165);
   }
   function sexp_of_t$4
   (of_a1_186,
    of_a2_187,
    of_a3_188,
    of_a1_diff_189,
    of_a2_diff_190,
    of_a3_diff_191,
    param){
    switch(param[0]){
      case 0:
       var
        arg0_192 = param[1],
        res0_193 = caml_call1(of_a1_diff_189, arg0_192);
       return [1, [0, _aM_, [0, res0_193, 0]]];
      case 1:
       var
        arg0_194 = param[1],
        res0_195 = caml_call1(of_a2_diff_190, arg0_194);
       return [1, [0, _aN_, [0, res0_195, 0]]];
      default:
       var
        arg0_196 = param[1],
        res0_197 = caml_call1(of_a3_diff_191, arg0_196);
       return [1, [0, _aO_, [0, res0_197, 0]]];
    }
   }
   var
    _aP_ = caml_call1(Bin_shape[3][1], cst_a3_diff),
    _aQ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_228_16),
    _aR_ =
      [0,
       [0, cst_T3$1, [0, caml_call2(Bin_prot_Shape[11], _aQ_, _aP_), 0]],
       0],
    _aS_ = caml_call1(Bin_shape[3][1], cst_a2_diff$5),
    _aT_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_227_16),
    _aU_ =
      [0,
       [0, cst_T2$4, [0, caml_call2(Bin_prot_Shape[11], _aT_, _aS_), 0]],
       _aR_],
    _aV_ = caml_call1(Bin_shape[3][1], cst_a1_diff$5),
    _aW_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_226_16),
    _aX_ =
      [0,
       [0, cst_T1$4, [0, caml_call2(Bin_prot_Shape[11], _aW_, _aV_), 0]],
       _aU_],
    _aY_ = caml_call1(Bin_prot_Shape[5], _aX_),
    _aZ_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$0), 0],
    _a0_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$6), _aZ_],
    _a1_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$6), _a0_],
    _a2_ = [0, caml_call1(Bin_shape[3][1], cst_a3$1), _a1_],
    _a3_ = [0, caml_call1(Bin_shape[3][1], cst_a2$10), _a2_],
    _a4_ = [0, caml_call1(Bin_shape[3][1], cst_a1$10), _a3_],
    _a5_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), _a4_, _aY_], 0],
    _a6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_225_6),
    group$5 = caml_call2(Bin_prot_Shape[2], _a6_, _a5_);
   function bin_shape_t$5(a1, a2, a3, a1_diff, a2_diff, a3_diff){
    var _uL_ = caml_call1(Bin_shape[2][1], cst_t$12);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$5, _uL_),
             [0,
              a1,
              [0, a2, [0, a3, [0, a1_diff, [0, a2_diff, [0, a3_diff, 0]]]]]]);
   }
   function bin_size_t$5
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _uI_ = caml_call1(size_of_a1_diff, v1);
       return caml_call2(Bin_prot_Common[23], 1, _uI_);
      case 1:
       var v1$0 = param[1], _uJ_ = caml_call1(size_of_a2_diff, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _uJ_);
      default:
       var v1$1 = param[1], _uK_ = caml_call1(size_of_a3_diff, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _uK_);
    }
   }
   function bin_write_t$5
   (write_a1,
    write_a2,
    write_a3,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    buf,
    pos,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(write_a1_diff, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(write_a2_diff, buf, pos$1, v1$0);
      default:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(write_a3_diff, buf, pos$2, v1$1);
    }
   }
   function bin_writer_t$5
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff){
    function _uz_(v){
     var
      _uA_ = bin_writer_a3_diff[2],
      _uB_ = bin_writer_a2_diff[2],
      _uC_ = bin_writer_a1_diff[2],
      _uD_ = bin_writer_a3[2],
      _uE_ = bin_writer_a2[2],
      _uF_ = bin_writer_a1[2];
     return function(_uG_, _uH_){
      return bin_write_t$5(_uF_, _uE_, _uD_, _uC_, _uB_, _uA_, v, _uG_, _uH_);};
    }
    return [0,
            function(v){
             return bin_size_t$5
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      v);
            },
            _uz_];
   }
   function bin_read_t$11
   (of_a1,
    of_a2,
    of_a3,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    buf,
    pos_ref,
    vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple3_D, pos_ref[1]);
   }
   function bin_read_t$12
   (of_a1, of_a2, of_a3, of_a1_diff, of_a2_diff, of_a3_diff, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _a7_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(of_a1_diff, buf, pos_ref); return [0, arg_1];
      case 1:
       var arg_1$0 = caml_call2(of_a2_diff, buf, pos_ref);
       return [1, arg_1$0];
      default:
       var arg_1$1 = caml_call2(of_a3_diff, buf, pos_ref);
       return [2, arg_1$1];
    }
   }
   function bin_reader_t$5
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff){
    function _uy_(buf, pos_ref, vtag){
     return bin_read_t$11
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$12
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      buf,
                      pos_ref);
            },
            _uy_];
   }
   function bin_t$5
   (bin_a1, bin_a2, bin_a3, bin_a1_diff, bin_a2_diff, bin_a3_diff){
    var
     _uw_ =
       bin_reader_t$5
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3]),
     _ux_ =
       bin_writer_t$5
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2]);
    return [0,
            bin_shape_t$5
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1]),
            _ux_,
            _uw_];
   }
   function quickcheck_generator$2
   (generator_225,
    generator_226,
    generator_227,
    generator_228,
    generator_229,
    generator_230){
    var _up_ = 0;
    function _uq_(size_235, random_236){
     return [2,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_230,
               size_235,
               random_236)];
    }
    var
     _ur_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _uq_)], _up_];
    function _us_(size_233, random_234){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_229,
               size_233,
               random_234)];
    }
    var
     _ut_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _us_)], _ur_];
    function _uu_(size_231, random_232){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_228,
               size_231,
               random_232)];
    }
    var
     _uv_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _uu_)], _ut_];
    return caml_call1(Base_quickcheck_Generator[60], _uv_);
   }
   function quickcheck_observer$2
   (observer_213,
    observer_214,
    observer_215,
    observer_216,
    observer_217,
    observer_218){
    function _uo_(x_219, size_220, hash_221){
     switch(x_219[0]){
       case 0:
        var
         x_222 = x_219[1],
         hash_221$0 = caml_call2(Base[133], hash_221, 0),
         hash_221$1 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_216,
             x_222,
             size_220,
             hash_221$0);
        return hash_221$1;
       case 1:
        var
         x_223 = x_219[1],
         hash_221$2 = caml_call2(Base[133], hash_221, 1),
         hash_221$3 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_217,
             x_223,
             size_220,
             hash_221$2);
        return hash_221$3;
       default:
        var
         x_224 = x_219[1],
         hash_221$4 = caml_call2(Base[133], hash_221, 2),
         hash_221$5 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_218,
             x_224,
             size_220,
             hash_221$4);
        return hash_221$5;
     }
    }
    return caml_call1(Base_quickcheck_Observer[36], _uo_);
   }
   function quickcheck_shrinker$2
   (shrinker_204,
    shrinker_205,
    shrinker_206,
    shrinker_207,
    shrinker_208,
    shrinker_209){
    function _ub_(param){
     switch(param[0]){
       case 0:
        var
         x_210 = param[1],
         _uc_ = 0,
         _ud_ = function(x_210){return [0, x_210];},
         _ue_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_207, x_210),
         _uf_ = [0, caml_call2(Base_Sequence[35], _ue_, _ud_), _uc_];
        return caml_call1(Base_Sequence[70], _uf_);
       case 1:
        var
         x_211 = param[1],
         _ug_ = 0,
         _uh_ = function(x_211){return [1, x_211];},
         _ui_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_208, x_211),
         _uj_ = [0, caml_call2(Base_Sequence[35], _ui_, _uh_), _ug_];
        return caml_call1(Base_Sequence[70], _uj_);
       default:
        var
         x_212 = param[1],
         _uk_ = 0,
         _ul_ = function(x_212){return [2, x_212];},
         _um_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_209, x_212),
         _un_ = [0, caml_call2(Base_Sequence[35], _um_, _ul_), _uk_];
        return caml_call1(Base_Sequence[70], _un_);
     }
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _ub_);
   }
   function sexp_of_t$5
   (of_a1_245,
    of_a2_246,
    of_a3_247,
    of_a1_diff_248,
    of_a2_diff_249,
    of_a3_diff_250,
    x_251){
    function _t$_(_ua_){
     return sexp_of_t$4
             (of_a1_245,
              of_a2_246,
              of_a3_247,
              of_a1_diff_248,
              of_a2_diff_249,
              of_a3_diff_250,
              _ua_);
    }
    return caml_call2(Base[165], _t$_, x_251);
   }
   var
    _a8_ = caml_call1(Bin_shape[3][1], cst_a3_diff$1),
    _a9_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_42),
    _a__ = caml_call2(Bin_prot_Shape[11], _a9_, _a8_),
    _a$_ = caml_call1(Bin_shape[3][1], cst_a2_diff$7),
    _ba_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_32),
    _bb_ = caml_call2(Bin_prot_Shape[11], _ba_, _a$_),
    _bc_ = caml_call1(Bin_shape[3][1], cst_a1_diff$7),
    _bd_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_22),
    _be_ = caml_call2(Bin_prot_Shape[11], _bd_, _bc_),
    _bf_ = caml_call1(Bin_shape[3][1], cst_a3$2),
    _bg_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_17),
    _bh_ = caml_call2(Bin_prot_Shape[11], _bg_, _bf_),
    _bi_ = caml_call1(Bin_shape[3][1], cst_a2$11),
    _bj_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_12),
    _bk_ = caml_call2(Bin_prot_Shape[11], _bj_, _bi_),
    _bl_ = caml_call1(Bin_shape[3][1], cst_a1$11),
    _bm_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_235_7),
    _ks_ =
      bin_shape_t$5
       (caml_call2(Bin_prot_Shape[11], _bm_, _bl_),
        _bk_,
        _bh_,
        _be_,
        _bb_,
        _a__),
    _bn_ = caml_call1(Bin_prot_Std[203], _ks_),
    _bo_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$2), 0],
    _bp_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$8), _bo_],
    _bq_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$8), _bp_],
    _br_ = [0, caml_call1(Bin_shape[3][1], cst_a3$3), _bq_],
    _bs_ = [0, caml_call1(Bin_shape[3][1], cst_a2$12), _br_],
    _bt_ = [0, caml_call1(Bin_shape[3][1], cst_a1$12), _bs_],
    _bu_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), _bt_, _bn_], 0],
    _bv_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_234_4),
    group$6 = caml_call2(Bin_prot_Shape[2], _bv_, _bu_);
   function bin_shape_t$6(a1, a2, a3, a1_diff, a2_diff, a3_diff){
    var _t__ = caml_call1(Bin_shape[2][1], cst_t$14);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$6, _t__),
             [0,
              a1,
              [0, a2, [0, a3, [0, a1_diff, [0, a2_diff, [0, a3_diff, 0]]]]]]);
   }
   function bin_size_t$6
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    v){
    function _t8_(_t9_){
     return bin_size_t$5
             (size_of_a1,
              size_of_a2,
              size_of_a3,
              size_of_a1_diff,
              size_of_a2_diff,
              size_of_a3_diff,
              _t9_);
    }
    return caml_call2(Bin_prot_Std[18], _t8_, v);
   }
   function bin_write_t$6
   (write_a1,
    write_a2,
    write_a3,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    buf,
    pos,
    v){
    function _t4_(_t5_, _t6_, _t7_){
     return bin_write_t$5
             (write_a1,
              write_a2,
              write_a3,
              write_a1_diff,
              write_a2_diff,
              write_a3_diff,
              _t5_,
              _t6_,
              _t7_);
    }
    return caml_call4(Bin_prot_Std[205], _t4_, buf, pos, v);
   }
   function bin_writer_t$6
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff){
    function _tV_(v){
     var
      _tW_ = bin_writer_a3_diff[2],
      _tX_ = bin_writer_a2_diff[2],
      _tY_ = bin_writer_a1_diff[2],
      _tZ_ = bin_writer_a3[2],
      _t0_ = bin_writer_a2[2],
      _t1_ = bin_writer_a1[2];
     return function(_t2_, _t3_){
      return bin_write_t$6(_t1_, _t0_, _tZ_, _tY_, _tX_, _tW_, v, _t2_, _t3_);};
    }
    return [0,
            function(v){
             return bin_size_t$6
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      v);
            },
            _tV_];
   }
   function bin_read_t$13
   (of_a1,
    of_a2,
    of_a3,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    buf,
    pos_ref,
    vint){
    function _tS_(_tT_, _tU_){
     return bin_read_t$12
             (of_a1,
              of_a2,
              of_a3,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              _tT_,
              _tU_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _tS_), buf, pos_ref, vint);
   }
   function bin_read_t$14
   (of_a1, of_a2, of_a3, of_a1_diff, of_a2_diff, of_a3_diff, buf, pos_ref){
    function _tP_(_tQ_, _tR_){
     return bin_read_t$12
             (of_a1,
              of_a2,
              of_a3,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              _tQ_,
              _tR_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _tP_), buf, pos_ref);
   }
   function bin_reader_t$6
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff){
    function _tO_(buf, pos_ref, vtag){
     return bin_read_t$13
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$14
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      buf,
                      pos_ref);
            },
            _tO_];
   }
   function bin_t$6
   (bin_a1, bin_a2, bin_a3, bin_a1_diff, bin_a2_diff, bin_a3_diff){
    var
     _tM_ =
       bin_reader_t$6
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3]),
     _tN_ =
       bin_writer_t$6
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2]);
    return [0,
            bin_shape_t$6
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1]),
            _tN_,
            _tM_];
   }
   function quickcheck_generator$3
   (generator_264,
    generator_265,
    generator_266,
    generator_267,
    generator_268,
    generator_269){
    var
     _tL_ =
       quickcheck_generator$2
        (generator_264,
         generator_265,
         generator_266,
         generator_267,
         generator_268,
         generator_269);
    return caml_call1(Base_quickcheck_Export[32], _tL_);
   }
   function quickcheck_observer$3
   (observer_258,
    observer_259,
    observer_260,
    observer_261,
    observer_262,
    observer_263){
    var
     _tK_ =
       quickcheck_observer$2
        (observer_258,
         observer_259,
         observer_260,
         observer_261,
         observer_262,
         observer_263);
    return caml_call1(Base_quickcheck_Export[37], _tK_);
   }
   function quickcheck_shrinker$3
   (shrinker_252,
    shrinker_253,
    shrinker_254,
    shrinker_255,
    shrinker_256,
    shrinker_257){
    var
     _tJ_ =
       quickcheck_shrinker$2
        (shrinker_252,
         shrinker_253,
         shrinker_254,
         shrinker_255,
         shrinker_256,
         shrinker_257);
    return caml_call1(Base_quickcheck_Export[42], _tJ_);
   }
   function compare_rank$0(t1, t2){
    var
     _tH_ = caml_call1(Variants$0[8], t2),
     _tI_ = caml_call1(Variants$0[8], t1);
    return caml_call2(Base_Int[14], _tI_, _tH_);
   }
   function equal_rank$0(t1, t2){
    var
     _tF_ = caml_call1(Variants$0[8], t2),
     _tG_ = caml_call1(Variants$0[8], t1);
    return caml_call2(Base_Int[13], _tG_, _tF_);
   }
   function get$1(get1, get2, get3, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get3, from_3, to_3),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$2 = diff;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$2 = [0, [2, d$1], diff];
    var ppx_optional_e_0$0 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$1 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$1(apply1_exn, apply2_exn, apply3_exn, derived_on, diff){
    var
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$1 = diff$0[2],
        d$1 = match$0[1],
        diff$1 = tl$1,
        t2 = caml_call2(apply2_exn, derived_on2, d$1);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$0 = diff$1[2],
        d$0 = match$1[1],
        diff$2 = tl$0,
        t3 = caml_call2(apply3_exn, derived_on3, d$0);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    return diff$2
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$1)
            : [0, t1, t2, t3];
   }
   function of_list_exn$0
   (of_list1_exn,
    apply1_exn,
    of_list2_exn,
    apply2_exn,
    of_list3_exn,
    apply3_exn,
    ts){
    if(! ts) return Diffable_Optional_diff[1];
    var
     _tx_ = caml_call1(Base_List[11], ts),
     diff = caml_call2(Base_List[84], _tx_, compare_rank$0);
    if(! diff) return caml_call1(Diffable_Optional_diff[2], 0);
    var acc = 0, param = diff;
    for(;;){
     if(! param){
      var _tE_ = caml_call1(Base_List[63], acc);
      return caml_call1(Diffable_Optional_diff[2], _tE_);
     }
     var match = param[1];
     switch(match[0]){
       case 0:
        var
         tl = param[2],
         d = match[1],
         _ty_ = function(param){return 0 === param[0] ? 1 : 0;},
         match$0 = caml_call2(Base_List[143], tl, _ty_),
         tl$0 = match$0[2],
         ds = match$0[1],
         _tz_ =
           function(param){
            if(0 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bw_], 1);
            var x = param[1];
            return x;
           },
         ds$0 = caml_call2(Base_List[53], ds, _tz_),
         ppx_optional_e_0 = caml_call1(of_list1_exn, [0, d, ds$0]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
         var param = tl$0;
        else
         var
          d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
          acc$0 = [0, [0, d$0], acc],
          acc = acc$0,
          param = tl$0;
        break;
       case 1:
        var
         tl$1 = param[2],
         d$1 = match[1],
         _tA_ = function(param){return 1 === param[0] ? 1 : 0;},
         match$1 = caml_call2(Base_List[143], tl$1, _tA_),
         tl$2 = match$1[2],
         ds$1 = match$1[1],
         _tB_ =
           function(param){
            if(1 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bx_], 1);
            var x = param[1];
            return x;
           },
         ds$2 = caml_call2(Base_List[53], ds$1, _tB_),
         ppx_optional_e_0$0 = caml_call1(of_list2_exn, [0, d$1, ds$2]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
         var param = tl$2;
        else
         var
          d$2 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
          acc$1 = [0, [1, d$2], acc],
          acc = acc$1,
          param = tl$2;
        break;
       default:
        var
         tl$3 = param[2],
         d$3 = match[1],
         _tC_ = function(param){return 2 === param[0] ? 1 : 0;},
         match$2 = caml_call2(Base_List[143], tl$3, _tC_),
         tl$4 = match$2[2],
         ds$3 = match$2[1],
         _tD_ =
           function(param){
            if(2 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _by_], 1);
            var x = param[1];
            return x;
           },
         ds$4 = caml_call2(Base_List[53], ds$3, _tD_),
         ppx_optional_e_0$1 = caml_call1(of_list3_exn, [0, d$3, ds$4]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
         var param = tl$4;
        else
         var
          d$4 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
          acc$2 = [0, [2, d$4], acc],
          acc = acc$2,
          param = tl$4;
     }
    }
   }
   function singleton$0(entry_diff){return [0, entry_diff, 0];}
   function t_of_sexp$5
   (a1_of_sexp,
    a2_of_sexp,
    a3_of_sexp,
    a1_diff_of_sexp,
    a2_diff_of_sexp,
    a3_diff_of_sexp,
    x_244){
    function _ts_(_tw_){
     return t_of_sexp$4
             (a1_of_sexp,
              a2_of_sexp,
              a3_of_sexp,
              a1_diff_of_sexp,
              a2_diff_of_sexp,
              a3_diff_of_sexp,
              _tw_);
    }
    var
     _tt_ = caml_call2(Base[164], _ts_, x_244),
     l = caml_call2(Base_List[83], _tt_, compare_rank$0),
     match = caml_call2(Base_List[124], l, equal_rank$0);
    if(! match) return l;
    var
     dup = match[1][1],
     _tu_ = caml_call1(Variants$0[9], dup),
     _tv_ = caml_call2(Base[241], cst_Duplicate_entry_in_tuple_d$0, _tu_);
    return caml_call1(Base[244], _tv_);
   }
   function create$0(t1, t2, t3, param){
    var diff = 0;
    if(t3) var d = t3[1], diff$0 = [0, [2, d], diff]; else var diff$0 = diff;
    if(t2)
     var d$0 = t2[1], diff$1 = [0, [1, d$0], diff$0];
    else
     var diff$1 = diff$0;
    if(t1)
     var d$1 = t1[1], diff$2 = [0, [0, d$1], diff$1];
    else
     var diff$2 = diff$1;
    return diff$2;
   }
   function create_of_variants$0(t1, t2, t3){
    var ppx_optional_e_0 = caml_call1(t3, Variants$0[3]), diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$2 = diff;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$2 = [0, [2, d$1], diff];
    var ppx_optional_e_0$0 = caml_call1(t2, Variants$0[2]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$1 = caml_call1(t1, Variants$0[1]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$0 = [0, [0, d], diff$1];
    return diff$0;
   }
   function t_of_sexp$6(of_a1_270, of_a2_271, of_a3_272, sexp_280){
    if(1 === sexp_280[0]){
     var _tp_ = sexp_280[1];
     if(_tp_){
      var _tq_ = _tp_[2];
      if(_tq_){
       var _tr_ = _tq_[2];
       if(_tr_ && ! _tr_[2]){
        var
         arg2_276 = _tr_[1],
         arg1_275 = _tq_[1],
         arg0_274 = _tp_[1],
         res0_277 = caml_call2(Gel[12], of_a1_270, arg0_274),
         res1_278 = caml_call2(Gel[12], of_a2_271, arg1_275),
         res2_279 = caml_call2(Gel[12], of_a3_272, arg2_276);
        return [0, res0_277, res1_278, res2_279];
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_281, 3, sexp_280);
   }
   function sexp_of_t$6(of_a1_282, of_a2_283, of_a3_284, param){
    var
     arg2_287 = param[3],
     arg1_286 = param[2],
     arg0_285 = param[1],
     res0_288 = caml_call2(Gel[13], of_a1_282, arg0_285),
     res1_289 = caml_call2(Gel[13], of_a2_283, arg1_286),
     res2_290 = caml_call2(Gel[13], of_a3_284, arg2_287);
    return [1, [0, res0_288, [0, res1_289, [0, res2_290, 0]]]];
   }
   var
    _bz_ = caml_call1(Bin_shape[3][1], cst_a3$4),
    _bA_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_428_53),
    _bB_ = caml_call2(Bin_prot_Shape[11], _bA_, _bz_),
    _bC_ = [0, caml_call1(Gel[1], _bB_), 0],
    _bD_ = caml_call1(Bin_shape[3][1], cst_a2$13),
    _bE_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_428_41),
    _bF_ = caml_call2(Bin_prot_Shape[11], _bE_, _bD_),
    _bG_ = [0, caml_call1(Gel[1], _bF_), _bC_],
    _bH_ = caml_call1(Bin_shape[3][1], cst_a1$13),
    _bI_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_428_29),
    _bJ_ = caml_call2(Bin_prot_Shape[11], _bI_, _bH_),
    _bK_ = [0, caml_call1(Gel[1], _bJ_), _bG_],
    _bL_ = caml_call1(Bin_prot_Shape[3], _bK_),
    _bM_ = [0, caml_call1(Bin_shape[3][1], cst_a3$5), 0],
    _bN_ = [0, caml_call1(Bin_shape[3][1], cst_a2$14), _bM_],
    _bO_ = [0, caml_call1(Bin_shape[3][1], cst_a1$14), _bN_],
    _bP_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), _bO_, _bL_], 0],
    _bQ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_428_4),
    group$7 = caml_call2(Bin_prot_Shape[2], _bQ_, _bP_);
   function bin_shape_t$7(a1, a2, a3){
    var _to_ = caml_call1(Bin_shape[2][1], cst_t$16);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$7, _to_),
             [0, a1, [0, a2, [0, a3, 0]]]);
   }
   function bin_size_t$7(size_of_a1, size_of_a2, size_of_a3, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _tl_ = caml_call2(Gel[2], size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _tl_),
     _tm_ = caml_call2(Gel[2], size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _tm_),
     _tn_ = caml_call2(Gel[2], size_of_a3, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _tn_);
   }
   function bin_write_t$7(write_a1, write_a2, write_a3, buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call4(Gel[3], write_a1, buf, pos, v1),
     pos$1 = caml_call4(Gel[3], write_a2, buf, pos$0, v2);
    return caml_call4(Gel[3], write_a3, buf, pos$1, v3);
   }
   function bin_writer_t$7(bin_writer_a1, bin_writer_a2, bin_writer_a3){
    function _tf_(v){
     var
      _tg_ = bin_writer_a3[2],
      _th_ = bin_writer_a2[2],
      _ti_ = bin_writer_a1[2];
     return function(_tj_, _tk_){
      return bin_write_t$7(_ti_, _th_, _tg_, v, _tj_, _tk_);};
    }
    return [0,
            function(v){
             return bin_size_t$7
                     (bin_writer_a1[1], bin_writer_a2[1], bin_writer_a3[1], v);
            },
            _tf_];
   }
   function bin_read_t$15(of_a1, of_a2, of_a3, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple3_F, pos_ref[1]);
   }
   function bin_read_t$16(of_a1, of_a2, of_a3, buf, pos_ref){
    var
     v1 = caml_call2(caml_call1(Gel[4], of_a1), buf, pos_ref),
     v2 = caml_call2(caml_call1(Gel[4], of_a2), buf, pos_ref),
     v3 = caml_call2(caml_call1(Gel[4], of_a3), buf, pos_ref);
    return [0, v1, v2, v3];
   }
   function bin_reader_t$7(bin_reader_a1, bin_reader_a2, bin_reader_a3){
    function _te_(buf, pos_ref, vtag){
     return bin_read_t$15
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$16
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      buf,
                      pos_ref);
            },
            _te_];
   }
   function bin_t$7(bin_a1, bin_a2, bin_a3){
    var
     _tc_ = bin_reader_t$7(bin_a1[3], bin_a2[3], bin_a3[3]),
     _td_ = bin_writer_t$7(bin_a1[2], bin_a2[2], bin_a3[2]);
    return [0, bin_shape_t$7(bin_a1[1], bin_a2[1], bin_a3[1]), _td_, _tc_];
   }
   var
    _bR_ = caml_call1(Bin_shape[3][1], cst_a3_diff$3),
    _bS_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_44),
    _bT_ = caml_call2(Bin_prot_Shape[11], _bS_, _bR_),
    _bU_ = caml_call1(Bin_shape[3][1], cst_a2_diff$9),
    _bV_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_34),
    _bW_ = caml_call2(Bin_prot_Shape[11], _bV_, _bU_),
    _bX_ = caml_call1(Bin_shape[3][1], cst_a1_diff$9),
    _bY_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_24),
    _bZ_ = caml_call2(Bin_prot_Shape[11], _bY_, _bX_),
    _b0_ = caml_call1(Bin_shape[3][1], cst_a3$6),
    _b1_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_19),
    _b2_ = caml_call2(Bin_prot_Shape[11], _b1_, _b0_),
    _b3_ = caml_call1(Bin_shape[3][1], cst_a2$15),
    _b4_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_14),
    _b5_ = caml_call2(Bin_prot_Shape[11], _b4_, _b3_),
    _b6_ = caml_call1(Bin_shape[3][1], cst_a1$15),
    _b7_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_434_9),
    _kr_ =
      bin_shape_t$6
       (caml_call2(Bin_prot_Shape[11], _b7_, _b6_),
        _b5_,
        _b2_,
        _bZ_,
        _bW_,
        _bT_),
    _b8_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$4), 0],
    _b9_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$10), _b8_],
    _b__ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$10), _b9_],
    _b$_ = [0, caml_call1(Bin_shape[3][1], cst_a3$7), _b__],
    _ca_ = [0, caml_call1(Bin_shape[3][1], cst_a2$16), _b$_],
    _cb_ = [0, caml_call1(Bin_shape[3][1], cst_a1$16), _ca_],
    _cc_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$17), _cb_, _kr_], 0],
    _cd_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_433_6),
    group$8 = caml_call2(Bin_prot_Shape[2], _cd_, _cc_);
   function bin_shape_t$8(a1, a2, a3, a1_diff, a2_diff, a3_diff){
    var _tb_ = caml_call1(Bin_shape[2][1], cst_t$18);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$8, _tb_),
             [0,
              a1,
              [0, a2, [0, a3, [0, a1_diff, [0, a2_diff, [0, a3_diff, 0]]]]]]);
   }
   function bin_size_t$8
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    v){
    return bin_size_t$6
            (size_of_a1,
             size_of_a2,
             size_of_a3,
             size_of_a1_diff,
             size_of_a2_diff,
             size_of_a3_diff,
             v);
   }
   function bin_write_t$8
   (write_a1,
    write_a2,
    write_a3,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    buf,
    pos,
    v){
    return bin_write_t$6
            (write_a1,
             write_a2,
             write_a3,
             write_a1_diff,
             write_a2_diff,
             write_a3_diff,
             buf,
             pos,
             v);
   }
   function bin_writer_t$8
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff){
    function _s4_(v){
     var
      _s5_ = bin_writer_a3_diff[2],
      _s6_ = bin_writer_a2_diff[2],
      _s7_ = bin_writer_a1_diff[2],
      _s8_ = bin_writer_a3[2],
      _s9_ = bin_writer_a2[2],
      _s__ = bin_writer_a1[2];
     return function(_s$_, _ta_){
      return bin_write_t$8(_s__, _s9_, _s8_, _s7_, _s6_, _s5_, v, _s$_, _ta_);};
    }
    return [0,
            function(v){
             return bin_size_t$8
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      v);
            },
            _s4_];
   }
   function bin_read_t$17
   (of_a1,
    of_a2,
    of_a3,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    buf,
    pos_ref,
    vint){
    return bin_read_t$13
            (of_a1,
             of_a2,
             of_a3,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$18
   (of_a1, of_a2, of_a3, of_a1_diff, of_a2_diff, of_a3_diff, buf, pos_ref){
    return bin_read_t$14
            (of_a1,
             of_a2,
             of_a3,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             buf,
             pos_ref);
   }
   function bin_reader_t$8
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff){
    function _s3_(buf, pos_ref, vtag){
     return bin_read_t$17
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$18
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      buf,
                      pos_ref);
            },
            _s3_];
   }
   function bin_t$8
   (bin_a1, bin_a2, bin_a3, bin_a1_diff, bin_a2_diff, bin_a3_diff){
    var
     _s1_ =
       bin_reader_t$8
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3]),
     _s2_ =
       bin_writer_t$8
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2]);
    return [0,
            bin_shape_t$8
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1]),
            _s2_,
            _s1_];
   }
   function quickcheck_generator$4
   (generator_318,
    generator_319,
    generator_320,
    generator_321,
    generator_322,
    generator_323){
    return quickcheck_generator$3
            (generator_318,
             generator_319,
             generator_320,
             generator_321,
             generator_322,
             generator_323);
   }
   function quickcheck_observer$4
   (observer_312,
    observer_313,
    observer_314,
    observer_315,
    observer_316,
    observer_317){
    return quickcheck_observer$3
            (observer_312,
             observer_313,
             observer_314,
             observer_315,
             observer_316,
             observer_317);
   }
   function quickcheck_shrinker$4
   (shrinker_306,
    shrinker_307,
    shrinker_308,
    shrinker_309,
    shrinker_310,
    shrinker_311){
    return quickcheck_shrinker$3
            (shrinker_306,
             shrinker_307,
             shrinker_308,
             shrinker_309,
             shrinker_310,
             shrinker_311);
   }
   function get$2(get1, get2, get3, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get3, from_3, to_3),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$2 = diff;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$2 = [0, [2, d$1], diff];
    var ppx_optional_e_0$0 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$1 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$2(apply1_exn, apply2_exn, apply3_exn, derived_on, diff){
    var
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$1 = diff$0[2],
        d$1 = match$0[1],
        diff$1 = tl$1,
        t2 = caml_call2(apply2_exn, derived_on2, d$1);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$0 = diff$1[2],
        d$0 = match$1[1],
        diff$2 = tl$0,
        t3 = caml_call2(apply3_exn, derived_on3, d$0);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    return diff$2
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$2)
            : [0, t1, t2, t3];
   }
   function t_of_sexp$7(of_a1_324, of_a2_325, of_a3_326, of_a4_327, sexp_337){
    if(1 === sexp_337[0]){
     var _sX_ = sexp_337[1];
     if(_sX_){
      var _sY_ = _sX_[2];
      if(_sY_){
       var _sZ_ = _sY_[2];
       if(_sZ_){
        var _s0_ = _sZ_[2];
        if(_s0_ && ! _s0_[2]){
         var
          arg3_332 = _s0_[1],
          arg2_331 = _sZ_[1],
          arg1_330 = _sY_[1],
          arg0_329 = _sX_[1],
          res0_333 = caml_call1(of_a1_324, arg0_329),
          res1_334 = caml_call1(of_a2_325, arg1_330),
          res2_335 = caml_call1(of_a3_326, arg2_331),
          res3_336 = caml_call1(of_a4_327, arg3_332);
         return [0, res0_333, res1_334, res2_335, res3_336];
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_338, 4, sexp_337);
   }
   function sexp_of_t$7(of_a1_339, of_a2_340, of_a3_341, of_a4_342, param){
    var
     arg3_346 = param[4],
     arg2_345 = param[3],
     arg1_344 = param[2],
     arg0_343 = param[1],
     res0_347 = caml_call1(of_a1_339, arg0_343),
     res1_348 = caml_call1(of_a2_340, arg1_344),
     res2_349 = caml_call1(of_a3_341, arg2_345),
     res3_350 = caml_call1(of_a4_342, arg3_346);
    return [1, [0, res0_347, [0, res1_348, [0, res2_349, [0, res3_350, 0]]]]];
   }
   var
    _ce_ = caml_call1(Bin_shape[3][1], cst_a4),
    _cf_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_497_50),
    _cg_ = [0, caml_call2(Bin_prot_Shape[11], _cf_, _ce_), 0],
    _ch_ = caml_call1(Bin_shape[3][1], cst_a3$8),
    _ci_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_497_44),
    _cj_ = [0, caml_call2(Bin_prot_Shape[11], _ci_, _ch_), _cg_],
    _ck_ = caml_call1(Bin_shape[3][1], cst_a2$17),
    _cl_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_497_38),
    _cm_ = [0, caml_call2(Bin_prot_Shape[11], _cl_, _ck_), _cj_],
    _cn_ = caml_call1(Bin_shape[3][1], cst_a1$17),
    _co_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_497_32),
    _cp_ = [0, caml_call2(Bin_prot_Shape[11], _co_, _cn_), _cm_],
    _cq_ = caml_call1(Bin_prot_Shape[3], _cp_),
    _cr_ = [0, caml_call1(Bin_shape[3][1], cst_a4$0), 0],
    _cs_ = [0, caml_call1(Bin_shape[3][1], cst_a3$9), _cr_],
    _ct_ = [0, caml_call1(Bin_shape[3][1], cst_a2$18), _cs_],
    _cu_ = [0, caml_call1(Bin_shape[3][1], cst_a1$18), _ct_],
    _cv_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$19), _cu_, _cq_], 0],
    _cw_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_497_2),
    group$9 = caml_call2(Bin_prot_Shape[2], _cw_, _cv_);
   function bin_shape_t$9(a1, a2, a3, a4){
    var _sW_ = caml_call1(Bin_shape[2][1], cst_t$20);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$9, _sW_),
             [0, a1, [0, a2, [0, a3, [0, a4, 0]]]]);
   }
   function bin_size_t$9
   (size_of_a1, size_of_a2, size_of_a3, size_of_a4, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _sS_ = caml_call1(size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _sS_),
     _sT_ = caml_call1(size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _sT_),
     _sU_ = caml_call1(size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _sU_),
     _sV_ = caml_call1(size_of_a4, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _sV_);
   }
   function bin_write_t$9
   (write_a1, write_a2, write_a3, write_a4, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a1, buf, pos, v1),
     pos$1 = caml_call3(write_a2, buf, pos$0, v2),
     pos$2 = caml_call3(write_a3, buf, pos$1, v3);
    return caml_call3(write_a4, buf, pos$2, v4);
   }
   function bin_writer_t$9
   (bin_writer_a1, bin_writer_a2, bin_writer_a3, bin_writer_a4){
    function _sL_(v){
     var
      _sM_ = bin_writer_a4[2],
      _sN_ = bin_writer_a3[2],
      _sO_ = bin_writer_a2[2],
      _sP_ = bin_writer_a1[2];
     return function(_sQ_, _sR_){
      return bin_write_t$9(_sP_, _sO_, _sN_, _sM_, v, _sQ_, _sR_);};
    }
    return [0,
            function(v){
             return bin_size_t$9
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      v);
            },
            _sL_];
   }
   function bin_read_t$19(of_a1, of_a2, of_a3, of_a4, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple4_t, pos_ref[1]);
   }
   function bin_read_t$20(of_a1, of_a2, of_a3, of_a4, buf, pos_ref){
    var
     v1 = caml_call2(of_a1, buf, pos_ref),
     v2 = caml_call2(of_a2, buf, pos_ref),
     v3 = caml_call2(of_a3, buf, pos_ref),
     v4 = caml_call2(of_a4, buf, pos_ref);
    return [0, v1, v2, v3, v4];
   }
   function bin_reader_t$9
   (bin_reader_a1, bin_reader_a2, bin_reader_a3, bin_reader_a4){
    function _sK_(buf, pos_ref, vtag){
     return bin_read_t$19
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$20
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      buf,
                      pos_ref);
            },
            _sK_];
   }
   function bin_t$9(bin_a1, bin_a2, bin_a3, bin_a4){
    var
     _sI_ = bin_reader_t$9(bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3]),
     _sJ_ = bin_writer_t$9(bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2]);
    return [0,
            bin_shape_t$9(bin_a1[1], bin_a2[1], bin_a3[1], bin_a4[1]),
            _sJ_,
            _sI_];
   }
   function t1$3(v0){return [0, v0];}
   function t2$3(v0){return [1, v0];}
   function t3$1(v0){return [2, v0];}
   function t4(v0){return [3, v0];}
   function is_t1$1(param){return 0 === param[0] ? 1 : 0;}
   function is_t2$1(param){return 1 === param[0] ? 1 : 0;}
   function is_t3$0(param){return 2 === param[0] ? 1 : 0;}
   function is_t4(param){return 3 === param[0] ? 1 : 0;}
   function t1_val$1(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t2_val$1(param){
    if(1 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t3_val$0(param){
    if(2 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t4_val(param){
    if(3 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var
    t1$4 = [0, cst_T1$5, 0, t1$3],
    t2$4 = [0, cst_T2$5, 1, t2$3],
    t3$2 = [0, cst_T3$2, 2, t3$1],
    t4$0 = [0, cst_T4, 3, t4];
   function fold$1(init, t1_fun, t2_fun, t3_fun, t4_fun){
    return caml_call2
            (t4_fun,
             caml_call2
              (t3_fun,
               caml_call2(t2_fun, caml_call2(t1_fun, init, t1$4), t2$4),
               t3$2),
             t4$0);
   }
   function iter$1(t1_fun, t2_fun, t3_fun, t4_fun){
    caml_call1(t1_fun, t1$4);
    caml_call1(t2_fun, t2$4);
    caml_call1(t3_fun, t3$2);
    return caml_call1(t4_fun, t4$0);
   }
   function map$1(t, t1_fun, t2_fun, t3_fun, t4_fun){
    switch(t[0]){
      case 0:
       var v0 = t[1]; return caml_call2(t1_fun, t1$4, v0);
      case 1:
       var v0$0 = t[1]; return caml_call2(t2_fun, t2$4, v0$0);
      case 2:
       var v0$1 = t[1]; return caml_call2(t3_fun, t3$2, v0$1);
      default: var v0$2 = t[1]; return caml_call2(t4_fun, t4$0, v0$2);
    }
   }
   function make_matcher$1(t1_fun, t2_fun, t3_fun, t4_fun, compile_acc){
    var
     match = caml_call2(t1_fun, t1$4, compile_acc),
     compile_acc$0 = match[2],
     t1_gen = match[1],
     match$0 = caml_call2(t2_fun, t2$4, compile_acc$0),
     compile_acc$1 = match$0[2],
     t2_gen = match$0[1],
     match$1 = caml_call2(t3_fun, t3$2, compile_acc$1),
     compile_acc$2 = match$1[2],
     t3_gen = match$1[1],
     match$2 = caml_call2(t4_fun, t4$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     t4_gen = match$2[1];
    function _sD_(param){return t1_gen;}
    function _sE_(param){return t2_gen;}
    function _sF_(param){return t3_gen;}
    function _sG_(param){return t4_gen;}
    return [0,
            function(_sH_){return map$1(_sH_, _sD_, _sE_, _sF_, _sG_);},
            compile_acc$3];
   }
   function to_rank$1(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   function to_name$1(param){
    switch(param[0]){
      case 0:
       return cst_T1$6;
      case 1:
       return cst_T2$6;
      case 2:
       return cst_T3$3;
      default: return cst_T4$0;
    }
   }
   var
    Variants$1 =
      [0,
       t1$4,
       t2$4,
       t3$2,
       t4$0,
       fold$1,
       iter$1,
       map$1,
       make_matcher$1,
       to_rank$1,
       to_name$1,
       descriptions$1];
   function t_of_sexp$8
   (of_a1_351,
    of_a2_352,
    of_a3_353,
    of_a4_354,
    of_a1_diff_355,
    of_a2_diff_356,
    of_a3_diff_357,
    of_a4_diff_358,
    sexp_363){
    a:
    {
     if(0 === sexp_363[0]){
      var _sA_ = sexp_363[1];
      b:
      if(caml_string_notequal(_sA_, cst_T1$14)){
       c:
       if(caml_string_notequal(_sA_, cst_T2$14)){
        d:
        if(caml_string_notequal(_sA_, cst_T3$11)){
         if(caml_string_notequal(_sA_, cst_T4$8)){
          if(! caml_string_notequal(_sA_, cst_t1)) break b;
          if(! caml_string_notequal(_sA_, cst_t2)) break c;
          if(! caml_string_notequal(_sA_, cst_t3)) break d;
          if(caml_string_notequal(_sA_, cst_t4)) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_361, sexp_363);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_361, sexp_363);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_361, sexp_363);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_361, sexp_363);
     }
     var _sB_ = sexp_363[1];
     if(! _sB_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_361, sexp_363);
     var _sC_ = _sB_[1];
     if(0 !== _sC_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_361, sexp_363);
     var tag_364 = _sC_[1];
     b:
     if(caml_string_notequal(tag_364, cst_T1$14)){
      c:
      if(caml_string_notequal(tag_364, cst_T2$14)){
       d:
       if(caml_string_notequal(tag_364, cst_T3$11)){
        if(caml_string_notequal(tag_364, cst_T4$8)){
         if(! caml_string_notequal(tag_364, cst_t1)) break b;
         if(! caml_string_notequal(tag_364, cst_t2)) break c;
         if(! caml_string_notequal(tag_364, cst_t3)) break d;
         if(caml_string_notequal(tag_364, cst_t4)) break a;
        }
        var sexp_args_380 = _sB_[2];
        if(sexp_args_380 && ! sexp_args_380[2]){
         var
          arg0_381 = sexp_args_380[1],
          res0_382 = caml_call1(of_a4_diff_358, arg0_381);
         return [3, res0_382];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_361,
                 tag_364,
                 sexp_363);
       }
       var sexp_args_375 = _sB_[2];
       if(sexp_args_375 && ! sexp_args_375[2]){
        var
         arg0_376 = sexp_args_375[1],
         res0_377 = caml_call1(of_a3_diff_357, arg0_376);
        return [2, res0_377];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_361,
                tag_364,
                sexp_363);
      }
      var sexp_args_370 = _sB_[2];
      if(sexp_args_370 && ! sexp_args_370[2]){
       var
        arg0_371 = sexp_args_370[1],
        res0_372 = caml_call1(of_a2_diff_356, arg0_371);
       return [1, res0_372];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_361,
               tag_364,
               sexp_363);
     }
     var sexp_args_365 = _sB_[2];
     if(sexp_args_365 && ! sexp_args_365[2]){
      var
       arg0_366 = sexp_args_365[1],
       res0_367 = caml_call1(of_a1_diff_355, arg0_366);
      return [0, res0_367];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_361,
              tag_364,
              sexp_363);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_361, sexp_363);
   }
   function sexp_of_t$8
   (of_a1_391,
    of_a2_392,
    of_a3_393,
    of_a4_394,
    of_a1_diff_395,
    of_a2_diff_396,
    of_a3_diff_397,
    of_a4_diff_398,
    param){
    switch(param[0]){
      case 0:
       var
        arg0_399 = param[1],
        res0_400 = caml_call1(of_a1_diff_395, arg0_399);
       return [1, [0, _cx_, [0, res0_400, 0]]];
      case 1:
       var
        arg0_401 = param[1],
        res0_402 = caml_call1(of_a2_diff_396, arg0_401);
       return [1, [0, _cy_, [0, res0_402, 0]]];
      case 2:
       var
        arg0_403 = param[1],
        res0_404 = caml_call1(of_a3_diff_397, arg0_403);
       return [1, [0, _cz_, [0, res0_404, 0]]];
      default:
       var
        arg0_405 = param[1],
        res0_406 = caml_call1(of_a4_diff_398, arg0_405);
       return [1, [0, _cA_, [0, res0_406, 0]]];
    }
   }
   var
    _cB_ = caml_call1(Bin_shape[3][1], cst_a4_diff),
    _cC_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_507_16),
    _cD_ =
      [0,
       [0, cst_T4$1, [0, caml_call2(Bin_prot_Shape[11], _cC_, _cB_), 0]],
       0],
    _cE_ = caml_call1(Bin_shape[3][1], cst_a3_diff$5),
    _cF_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_506_16),
    _cG_ =
      [0,
       [0, cst_T3$4, [0, caml_call2(Bin_prot_Shape[11], _cF_, _cE_), 0]],
       _cD_],
    _cH_ = caml_call1(Bin_shape[3][1], cst_a2_diff$11),
    _cI_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_505_16),
    _cJ_ =
      [0,
       [0, cst_T2$7, [0, caml_call2(Bin_prot_Shape[11], _cI_, _cH_), 0]],
       _cG_],
    _cK_ = caml_call1(Bin_shape[3][1], cst_a1_diff$11),
    _cL_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_504_16),
    _cM_ =
      [0,
       [0, cst_T1$7, [0, caml_call2(Bin_prot_Shape[11], _cL_, _cK_), 0]],
       _cJ_],
    _cN_ = caml_call1(Bin_prot_Shape[5], _cM_),
    _cO_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$0), 0],
    _cP_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$6), _cO_],
    _cQ_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$12), _cP_],
    _cR_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$12), _cQ_],
    _cS_ = [0, caml_call1(Bin_shape[3][1], cst_a4$1), _cR_],
    _cT_ = [0, caml_call1(Bin_shape[3][1], cst_a3$10), _cS_],
    _cU_ = [0, caml_call1(Bin_shape[3][1], cst_a2$19), _cT_],
    _cV_ = [0, caml_call1(Bin_shape[3][1], cst_a1$19), _cU_],
    _cW_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$21), _cV_, _cN_], 0],
    _cX_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_503_6),
    group$10 = caml_call2(Bin_prot_Shape[2], _cX_, _cW_);
   function bin_shape_t$10(a1, a2, a3, a4, a1_diff, a2_diff, a3_diff, a4_diff){
    var _sz_ = caml_call1(Bin_shape[2][1], cst_t$22);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$10, _sz_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0, a1_diff, [0, a2_diff, [0, a3_diff, [0, a4_diff, 0]]]]]]]]);
   }
   function bin_size_t$10
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _sv_ = caml_call1(size_of_a1_diff, v1);
       return caml_call2(Bin_prot_Common[23], 1, _sv_);
      case 1:
       var v1$0 = param[1], _sw_ = caml_call1(size_of_a2_diff, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _sw_);
      case 2:
       var v1$1 = param[1], _sx_ = caml_call1(size_of_a3_diff, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _sx_);
      default:
       var v1$2 = param[1], _sy_ = caml_call1(size_of_a4_diff, v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _sy_);
    }
   }
   function bin_write_t$10
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    buf,
    pos,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(write_a1_diff, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(write_a2_diff, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(write_a3_diff, buf, pos$2, v1$1);
      default:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call3(write_a4_diff, buf, pos$3, v1$2);
    }
   }
   function bin_writer_t$10
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff){
    function _sk_(v){
     var
      _sl_ = bin_writer_a4_diff[2],
      _sm_ = bin_writer_a3_diff[2],
      _sn_ = bin_writer_a2_diff[2],
      _so_ = bin_writer_a1_diff[2],
      _sp_ = bin_writer_a4[2],
      _sq_ = bin_writer_a3[2],
      _sr_ = bin_writer_a2[2],
      _ss_ = bin_writer_a1[2];
     return function(_st_, _su_){
      return bin_write_t$10
              (_ss_, _sr_, _sq_, _sp_, _so_, _sn_, _sm_, _sl_, v, _st_, _su_);};
    }
    return [0,
            function(v){
             return bin_size_t$10
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      v);
            },
            _sk_];
   }
   function bin_read_t$21
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref,
    vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple4_D, pos_ref[1]);
   }
   function bin_read_t$22
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _cY_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(of_a1_diff, buf, pos_ref); return [0, arg_1];
      case 1:
       var arg_1$0 = caml_call2(of_a2_diff, buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var arg_1$1 = caml_call2(of_a3_diff, buf, pos_ref);
       return [2, arg_1$1];
      default:
       var arg_1$2 = caml_call2(of_a4_diff, buf, pos_ref);
       return [3, arg_1$2];
    }
   }
   function bin_reader_t$10
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff){
    function _sj_(buf, pos_ref, vtag){
     return bin_read_t$21
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$22
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      buf,
                      pos_ref);
            },
            _sj_];
   }
   function bin_t$10
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff){
    var
     _sh_ =
       bin_reader_t$10
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3]),
     _si_ =
       bin_writer_t$10
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2]);
    return [0,
            bin_shape_t$10
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1]),
            _si_,
            _sh_];
   }
   function quickcheck_generator$5
   (generator_442,
    generator_443,
    generator_444,
    generator_445,
    generator_446,
    generator_447,
    generator_448,
    generator_449){
    var _r__ = 0;
    function _r$_(size_456, random_457){
     return [3,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_449,
               size_456,
               random_457)];
    }
    var
     _sa_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _r$_)], _r__];
    function _sb_(size_454, random_455){
     return [2,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_448,
               size_454,
               random_455)];
    }
    var
     _sc_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _sb_)], _sa_];
    function _sd_(size_452, random_453){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_447,
               size_452,
               random_453)];
    }
    var
     _se_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _sd_)], _sc_];
    function _sf_(size_450, random_451){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_446,
               size_450,
               random_451)];
    }
    var
     _sg_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _sf_)], _se_];
    return caml_call1(Base_quickcheck_Generator[60], _sg_);
   }
   function quickcheck_observer$5
   (observer_427,
    observer_428,
    observer_429,
    observer_430,
    observer_431,
    observer_432,
    observer_433,
    observer_434){
    function _r9_(x_435, size_436, hash_437){
     switch(x_435[0]){
       case 0:
        var
         x_438 = x_435[1],
         hash_437$0 = caml_call2(Base[133], hash_437, 0),
         hash_437$1 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_431,
             x_438,
             size_436,
             hash_437$0);
        return hash_437$1;
       case 1:
        var
         x_439 = x_435[1],
         hash_437$2 = caml_call2(Base[133], hash_437, 1),
         hash_437$3 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_432,
             x_439,
             size_436,
             hash_437$2);
        return hash_437$3;
       case 2:
        var
         x_440 = x_435[1],
         hash_437$4 = caml_call2(Base[133], hash_437, 2),
         hash_437$5 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_433,
             x_440,
             size_436,
             hash_437$4);
        return hash_437$5;
       default:
        var
         x_441 = x_435[1],
         hash_437$6 = caml_call2(Base[133], hash_437, 3),
         hash_437$7 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_434,
             x_441,
             size_436,
             hash_437$6);
        return hash_437$7;
     }
    }
    return caml_call1(Base_quickcheck_Observer[36], _r9_);
   }
   function quickcheck_shrinker$5
   (shrinker_415,
    shrinker_416,
    shrinker_417,
    shrinker_418,
    shrinker_419,
    shrinker_420,
    shrinker_421,
    shrinker_422){
    function _rS_(param){
     switch(param[0]){
       case 0:
        var
         x_423 = param[1],
         _rT_ = 0,
         _rU_ = function(x_423){return [0, x_423];},
         _rV_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_419, x_423),
         _rW_ = [0, caml_call2(Base_Sequence[35], _rV_, _rU_), _rT_];
        return caml_call1(Base_Sequence[70], _rW_);
       case 1:
        var
         x_424 = param[1],
         _rX_ = 0,
         _rY_ = function(x_424){return [1, x_424];},
         _rZ_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_420, x_424),
         _r0_ = [0, caml_call2(Base_Sequence[35], _rZ_, _rY_), _rX_];
        return caml_call1(Base_Sequence[70], _r0_);
       case 2:
        var
         x_425 = param[1],
         _r1_ = 0,
         _r2_ = function(x_425){return [2, x_425];},
         _r3_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_421, x_425),
         _r4_ = [0, caml_call2(Base_Sequence[35], _r3_, _r2_), _r1_];
        return caml_call1(Base_Sequence[70], _r4_);
       default:
        var
         x_426 = param[1],
         _r5_ = 0,
         _r6_ = function(x_426){return [3, x_426];},
         _r7_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_422, x_426),
         _r8_ = [0, caml_call2(Base_Sequence[35], _r7_, _r6_), _r5_];
        return caml_call1(Base_Sequence[70], _r8_);
     }
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _rS_);
   }
   function sexp_of_t$9
   (of_a1_468,
    of_a2_469,
    of_a3_470,
    of_a4_471,
    of_a1_diff_472,
    of_a2_diff_473,
    of_a3_diff_474,
    of_a4_diff_475,
    x_476){
    function _rQ_(_rR_){
     return sexp_of_t$8
             (of_a1_468,
              of_a2_469,
              of_a3_470,
              of_a4_471,
              of_a1_diff_472,
              of_a2_diff_473,
              of_a3_diff_474,
              of_a4_diff_475,
              _rR_);
    }
    return caml_call2(Base[165], _rQ_, x_476);
   }
   var
    _cZ_ = caml_call1(Bin_shape[3][1], cst_a4_diff$1),
    _c0_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_57),
    _c1_ = caml_call2(Bin_prot_Shape[11], _c0_, _cZ_),
    _c2_ = caml_call1(Bin_shape[3][1], cst_a3_diff$7),
    _c3_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_47),
    _c4_ = caml_call2(Bin_prot_Shape[11], _c3_, _c2_),
    _c5_ = caml_call1(Bin_shape[3][1], cst_a2_diff$13),
    _c6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_37),
    _c7_ = caml_call2(Bin_prot_Shape[11], _c6_, _c5_),
    _c8_ = caml_call1(Bin_shape[3][1], cst_a1_diff$13),
    _c9_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_27),
    _c__ = caml_call2(Bin_prot_Shape[11], _c9_, _c8_),
    _c$_ = caml_call1(Bin_shape[3][1], cst_a4$2),
    _da_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_22),
    _db_ = caml_call2(Bin_prot_Shape[11], _da_, _c$_),
    _dc_ = caml_call1(Bin_shape[3][1], cst_a3$11),
    _dd_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_17),
    _de_ = caml_call2(Bin_prot_Shape[11], _dd_, _dc_),
    _df_ = caml_call1(Bin_shape[3][1], cst_a2$20),
    _dg_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_12),
    _dh_ = caml_call2(Bin_prot_Shape[11], _dg_, _df_),
    _di_ = caml_call1(Bin_shape[3][1], cst_a1$20),
    _dj_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_514_7),
    _kq_ =
      bin_shape_t$10
       (caml_call2(Bin_prot_Shape[11], _dj_, _di_),
        _dh_,
        _de_,
        _db_,
        _c__,
        _c7_,
        _c4_,
        _c1_),
    _dk_ = caml_call1(Bin_prot_Std[203], _kq_),
    _dl_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$2), 0],
    _dm_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$8), _dl_],
    _dn_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$14), _dm_],
    _do_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$14), _dn_],
    _dp_ = [0, caml_call1(Bin_shape[3][1], cst_a4$3), _do_],
    _dq_ = [0, caml_call1(Bin_shape[3][1], cst_a3$12), _dp_],
    _dr_ = [0, caml_call1(Bin_shape[3][1], cst_a2$21), _dq_],
    _ds_ = [0, caml_call1(Bin_shape[3][1], cst_a1$21), _dr_],
    _dt_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$23), _ds_, _dk_], 0],
    _du_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_513_4),
    group$11 = caml_call2(Bin_prot_Shape[2], _du_, _dt_);
   function bin_shape_t$11(a1, a2, a3, a4, a1_diff, a2_diff, a3_diff, a4_diff){
    var _rP_ = caml_call1(Bin_shape[2][1], cst_t$24);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$11, _rP_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0, a1_diff, [0, a2_diff, [0, a3_diff, [0, a4_diff, 0]]]]]]]]);
   }
   function bin_size_t$11
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    v){
    function _rN_(_rO_){
     return bin_size_t$10
             (size_of_a1,
              size_of_a2,
              size_of_a3,
              size_of_a4,
              size_of_a1_diff,
              size_of_a2_diff,
              size_of_a3_diff,
              size_of_a4_diff,
              _rO_);
    }
    return caml_call2(Bin_prot_Std[18], _rN_, v);
   }
   function bin_write_t$11
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    buf,
    pos,
    v){
    function _rJ_(_rK_, _rL_, _rM_){
     return bin_write_t$10
             (write_a1,
              write_a2,
              write_a3,
              write_a4,
              write_a1_diff,
              write_a2_diff,
              write_a3_diff,
              write_a4_diff,
              _rK_,
              _rL_,
              _rM_);
    }
    return caml_call4(Bin_prot_Std[205], _rJ_, buf, pos, v);
   }
   function bin_writer_t$11
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff){
    function _ry_(v){
     var
      _rz_ = bin_writer_a4_diff[2],
      _rA_ = bin_writer_a3_diff[2],
      _rB_ = bin_writer_a2_diff[2],
      _rC_ = bin_writer_a1_diff[2],
      _rD_ = bin_writer_a4[2],
      _rE_ = bin_writer_a3[2],
      _rF_ = bin_writer_a2[2],
      _rG_ = bin_writer_a1[2];
     return function(_rH_, _rI_){
      return bin_write_t$11
              (_rG_, _rF_, _rE_, _rD_, _rC_, _rB_, _rA_, _rz_, v, _rH_, _rI_);};
    }
    return [0,
            function(v){
             return bin_size_t$11
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      v);
            },
            _ry_];
   }
   function bin_read_t$23
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref,
    vint){
    function _rv_(_rw_, _rx_){
     return bin_read_t$22
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              _rw_,
              _rx_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _rv_), buf, pos_ref, vint);
   }
   function bin_read_t$24
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref){
    function _rs_(_rt_, _ru_){
     return bin_read_t$22
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              _rt_,
              _ru_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _rs_), buf, pos_ref);
   }
   function bin_reader_t$11
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff){
    function _rr_(buf, pos_ref, vtag){
     return bin_read_t$23
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$24
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      buf,
                      pos_ref);
            },
            _rr_];
   }
   function bin_t$11
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff){
    var
     _rp_ =
       bin_reader_t$11
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3]),
     _rq_ =
       bin_writer_t$11
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2]);
    return [0,
            bin_shape_t$11
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1]),
            _rq_,
            _rp_];
   }
   function quickcheck_generator$6
   (generator_493,
    generator_494,
    generator_495,
    generator_496,
    generator_497,
    generator_498,
    generator_499,
    generator_500){
    var
     _ro_ =
       quickcheck_generator$5
        (generator_493,
         generator_494,
         generator_495,
         generator_496,
         generator_497,
         generator_498,
         generator_499,
         generator_500);
    return caml_call1(Base_quickcheck_Export[32], _ro_);
   }
   function quickcheck_observer$6
   (observer_485,
    observer_486,
    observer_487,
    observer_488,
    observer_489,
    observer_490,
    observer_491,
    observer_492){
    var
     _rn_ =
       quickcheck_observer$5
        (observer_485,
         observer_486,
         observer_487,
         observer_488,
         observer_489,
         observer_490,
         observer_491,
         observer_492);
    return caml_call1(Base_quickcheck_Export[37], _rn_);
   }
   function quickcheck_shrinker$6
   (shrinker_477,
    shrinker_478,
    shrinker_479,
    shrinker_480,
    shrinker_481,
    shrinker_482,
    shrinker_483,
    shrinker_484){
    var
     _rm_ =
       quickcheck_shrinker$5
        (shrinker_477,
         shrinker_478,
         shrinker_479,
         shrinker_480,
         shrinker_481,
         shrinker_482,
         shrinker_483,
         shrinker_484);
    return caml_call1(Base_quickcheck_Export[42], _rm_);
   }
   function compare_rank$1(t1, t2){
    var
     _rk_ = caml_call1(Variants$1[9], t2),
     _rl_ = caml_call1(Variants$1[9], t1);
    return caml_call2(Base_Int[14], _rl_, _rk_);
   }
   function equal_rank$1(t1, t2){
    var
     _ri_ = caml_call1(Variants$1[9], t2),
     _rj_ = caml_call1(Variants$1[9], t1);
    return caml_call2(Base_Int[13], _rj_, _ri_);
   }
   function get$3(get1, get2, get3, get4, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get4, from_4, to_4),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$3 = diff;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$3 = [0, [3, d$2], diff];
    var ppx_optional_e_0$0 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$1 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$2 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$3
   (apply1_exn, apply2_exn, apply3_exn, apply4_exn, derived_on, diff){
    var
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$2 = diff$0[2],
        d$2 = match$0[1],
        diff$1 = tl$2,
        t2 = caml_call2(apply2_exn, derived_on2, d$2);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$1 = diff$1[2],
        d$1 = match$1[1],
        diff$2 = tl$1,
        t3 = caml_call2(apply3_exn, derived_on3, d$1);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$0 = diff$2[2],
        d$0 = match$2[1],
        diff$3 = tl$0,
        t4 = caml_call2(apply4_exn, derived_on4, d$0);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    return diff$3
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$3)
            : [0, t1, t2, t3, t4];
   }
   function of_list_exn$1
   (of_list1_exn,
    apply1_exn,
    of_list2_exn,
    apply2_exn,
    of_list3_exn,
    apply3_exn,
    of_list4_exn,
    apply4_exn,
    ts){
    if(! ts) return Diffable_Optional_diff[1];
    var
     _q__ = caml_call1(Base_List[11], ts),
     diff = caml_call2(Base_List[84], _q__, compare_rank$1);
    if(! diff) return caml_call1(Diffable_Optional_diff[2], 0);
    var acc = 0, param = diff;
    for(;;){
     if(! param){
      var _rh_ = caml_call1(Base_List[63], acc);
      return caml_call1(Diffable_Optional_diff[2], _rh_);
     }
     var match = param[1];
     switch(match[0]){
       case 0:
        var
         tl = param[2],
         d = match[1],
         _q$_ = function(param){return 0 === param[0] ? 1 : 0;},
         match$0 = caml_call2(Base_List[143], tl, _q$_),
         tl$0 = match$0[2],
         ds = match$0[1],
         _ra_ =
           function(param){
            if(0 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dv_], 1);
            var x = param[1];
            return x;
           },
         ds$0 = caml_call2(Base_List[53], ds, _ra_),
         ppx_optional_e_0 = caml_call1(of_list1_exn, [0, d, ds$0]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
         var param = tl$0;
        else
         var
          d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
          acc$0 = [0, [0, d$0], acc],
          acc = acc$0,
          param = tl$0;
        break;
       case 1:
        var
         tl$1 = param[2],
         d$1 = match[1],
         _rb_ = function(param){return 1 === param[0] ? 1 : 0;},
         match$1 = caml_call2(Base_List[143], tl$1, _rb_),
         tl$2 = match$1[2],
         ds$1 = match$1[1],
         _rc_ =
           function(param){
            if(1 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dw_], 1);
            var x = param[1];
            return x;
           },
         ds$2 = caml_call2(Base_List[53], ds$1, _rc_),
         ppx_optional_e_0$0 = caml_call1(of_list2_exn, [0, d$1, ds$2]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
         var param = tl$2;
        else
         var
          d$2 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
          acc$1 = [0, [1, d$2], acc],
          acc = acc$1,
          param = tl$2;
        break;
       case 2:
        var
         tl$3 = param[2],
         d$3 = match[1],
         _rd_ = function(param){return 2 === param[0] ? 1 : 0;},
         match$2 = caml_call2(Base_List[143], tl$3, _rd_),
         tl$4 = match$2[2],
         ds$3 = match$2[1],
         _re_ =
           function(param){
            if(2 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dx_], 1);
            var x = param[1];
            return x;
           },
         ds$4 = caml_call2(Base_List[53], ds$3, _re_),
         ppx_optional_e_0$1 = caml_call1(of_list3_exn, [0, d$3, ds$4]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
         var param = tl$4;
        else
         var
          d$4 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
          acc$2 = [0, [2, d$4], acc],
          acc = acc$2,
          param = tl$4;
        break;
       default:
        var
         tl$5 = param[2],
         d$5 = match[1],
         _rf_ = function(param){return 3 === param[0] ? 1 : 0;},
         match$3 = caml_call2(Base_List[143], tl$5, _rf_),
         tl$6 = match$3[2],
         ds$5 = match$3[1],
         _rg_ =
           function(param){
            if(3 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dy_], 1);
            var x = param[1];
            return x;
           },
         ds$6 = caml_call2(Base_List[53], ds$5, _rg_),
         ppx_optional_e_0$2 = caml_call1(of_list4_exn, [0, d$5, ds$6]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
         var param = tl$6;
        else
         var
          d$6 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
          acc$3 = [0, [3, d$6], acc],
          acc = acc$3,
          param = tl$6;
     }
    }
   }
   function singleton$1(entry_diff){return [0, entry_diff, 0];}
   function t_of_sexp$9
   (a1_of_sexp,
    a2_of_sexp,
    a3_of_sexp,
    a4_of_sexp,
    a1_diff_of_sexp,
    a2_diff_of_sexp,
    a3_diff_of_sexp,
    a4_diff_of_sexp,
    x_467){
    function _q5_(_q9_){
     return t_of_sexp$8
             (a1_of_sexp,
              a2_of_sexp,
              a3_of_sexp,
              a4_of_sexp,
              a1_diff_of_sexp,
              a2_diff_of_sexp,
              a3_diff_of_sexp,
              a4_diff_of_sexp,
              _q9_);
    }
    var
     _q6_ = caml_call2(Base[164], _q5_, x_467),
     l = caml_call2(Base_List[83], _q6_, compare_rank$1),
     match = caml_call2(Base_List[124], l, equal_rank$1);
    if(! match) return l;
    var
     dup = match[1][1],
     _q7_ = caml_call1(Variants$1[10], dup),
     _q8_ = caml_call2(Base[241], cst_Duplicate_entry_in_tuple_d$1, _q7_);
    return caml_call1(Base[244], _q8_);
   }
   function create$1(t1, t2, t3, t4, param){
    var diff = 0;
    if(t4) var d = t4[1], diff$0 = [0, [3, d], diff]; else var diff$0 = diff;
    if(t3)
     var d$0 = t3[1], diff$1 = [0, [2, d$0], diff$0];
    else
     var diff$1 = diff$0;
    if(t2)
     var d$1 = t2[1], diff$2 = [0, [1, d$1], diff$1];
    else
     var diff$2 = diff$1;
    if(t1)
     var d$2 = t1[1], diff$3 = [0, [0, d$2], diff$2];
    else
     var diff$3 = diff$2;
    return diff$3;
   }
   function create_of_variants$1(t1, t2, t3, t4){
    var ppx_optional_e_0 = caml_call1(t4, Variants$1[4]), diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$3 = diff;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$3 = [0, [3, d$2], diff];
    var ppx_optional_e_0$0 = caml_call1(t3, Variants$1[3]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$1 = caml_call1(t2, Variants$1[2]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$2 = caml_call1(t1, Variants$1[1]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$0 = [0, [0, d], diff$1];
    return diff$0;
   }
   function t_of_sexp$10(of_a1_501, of_a2_502, of_a3_503, of_a4_504, sexp_514){
    if(1 === sexp_514[0]){
     var _q1_ = sexp_514[1];
     if(_q1_){
      var _q2_ = _q1_[2];
      if(_q2_){
       var _q3_ = _q2_[2];
       if(_q3_){
        var _q4_ = _q3_[2];
        if(_q4_ && ! _q4_[2]){
         var
          arg3_509 = _q4_[1],
          arg2_508 = _q3_[1],
          arg1_507 = _q2_[1],
          arg0_506 = _q1_[1],
          res0_510 = caml_call2(Gel[12], of_a1_501, arg0_506),
          res1_511 = caml_call2(Gel[12], of_a2_502, arg1_507),
          res2_512 = caml_call2(Gel[12], of_a3_503, arg2_508),
          res3_513 = caml_call2(Gel[12], of_a4_504, arg3_509);
         return [0, res0_510, res1_511, res2_512, res3_513];
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_515, 4, sexp_514);
   }
   function sexp_of_t$10(of_a1_516, of_a2_517, of_a3_518, of_a4_519, param){
    var
     arg3_523 = param[4],
     arg2_522 = param[3],
     arg1_521 = param[2],
     arg0_520 = param[1],
     res0_524 = caml_call2(Gel[13], of_a1_516, arg0_520),
     res1_525 = caml_call2(Gel[13], of_a2_517, arg1_521),
     res2_526 = caml_call2(Gel[13], of_a3_518, arg2_522),
     res3_527 = caml_call2(Gel[13], of_a4_519, arg3_523);
    return [1, [0, res0_524, [0, res1_525, [0, res2_526, [0, res3_527, 0]]]]];
   }
   var
    _dz_ = caml_call1(Bin_shape[3][1], cst_a4$4),
    _dA_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_747_70),
    _dB_ = caml_call2(Bin_prot_Shape[11], _dA_, _dz_),
    _dC_ = [0, caml_call1(Gel[1], _dB_), 0],
    _dD_ = caml_call1(Bin_shape[3][1], cst_a3$13),
    _dE_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_747_58),
    _dF_ = caml_call2(Bin_prot_Shape[11], _dE_, _dD_),
    _dG_ = [0, caml_call1(Gel[1], _dF_), _dC_],
    _dH_ = caml_call1(Bin_shape[3][1], cst_a2$22),
    _dI_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_747_46),
    _dJ_ = caml_call2(Bin_prot_Shape[11], _dI_, _dH_),
    _dK_ = [0, caml_call1(Gel[1], _dJ_), _dG_],
    _dL_ = caml_call1(Bin_shape[3][1], cst_a1$22),
    _dM_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_747_34),
    _dN_ = caml_call2(Bin_prot_Shape[11], _dM_, _dL_),
    _dO_ = [0, caml_call1(Gel[1], _dN_), _dK_],
    _dP_ = caml_call1(Bin_prot_Shape[3], _dO_),
    _dQ_ = [0, caml_call1(Bin_shape[3][1], cst_a4$5), 0],
    _dR_ = [0, caml_call1(Bin_shape[3][1], cst_a3$14), _dQ_],
    _dS_ = [0, caml_call1(Bin_shape[3][1], cst_a2$23), _dR_],
    _dT_ = [0, caml_call1(Bin_shape[3][1], cst_a1$23), _dS_],
    _dU_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$25), _dT_, _dP_], 0],
    _dV_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_747_4),
    group$12 = caml_call2(Bin_prot_Shape[2], _dV_, _dU_);
   function bin_shape_t$12(a1, a2, a3, a4){
    var _q0_ = caml_call1(Bin_shape[2][1], cst_t$26);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$12, _q0_),
             [0, a1, [0, a2, [0, a3, [0, a4, 0]]]]);
   }
   function bin_size_t$12
   (size_of_a1, size_of_a2, size_of_a3, size_of_a4, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _qW_ = caml_call2(Gel[2], size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _qW_),
     _qX_ = caml_call2(Gel[2], size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _qX_),
     _qY_ = caml_call2(Gel[2], size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _qY_),
     _qZ_ = caml_call2(Gel[2], size_of_a4, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _qZ_);
   }
   function bin_write_t$12
   (write_a1, write_a2, write_a3, write_a4, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call4(Gel[3], write_a1, buf, pos, v1),
     pos$1 = caml_call4(Gel[3], write_a2, buf, pos$0, v2),
     pos$2 = caml_call4(Gel[3], write_a3, buf, pos$1, v3);
    return caml_call4(Gel[3], write_a4, buf, pos$2, v4);
   }
   function bin_writer_t$12
   (bin_writer_a1, bin_writer_a2, bin_writer_a3, bin_writer_a4){
    function _qP_(v){
     var
      _qQ_ = bin_writer_a4[2],
      _qR_ = bin_writer_a3[2],
      _qS_ = bin_writer_a2[2],
      _qT_ = bin_writer_a1[2];
     return function(_qU_, _qV_){
      return bin_write_t$12(_qT_, _qS_, _qR_, _qQ_, v, _qU_, _qV_);};
    }
    return [0,
            function(v){
             return bin_size_t$12
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      v);
            },
            _qP_];
   }
   function bin_read_t$25(of_a1, of_a2, of_a3, of_a4, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple4_F, pos_ref[1]);
   }
   function bin_read_t$26(of_a1, of_a2, of_a3, of_a4, buf, pos_ref){
    var
     v1 = caml_call2(caml_call1(Gel[4], of_a1), buf, pos_ref),
     v2 = caml_call2(caml_call1(Gel[4], of_a2), buf, pos_ref),
     v3 = caml_call2(caml_call1(Gel[4], of_a3), buf, pos_ref),
     v4 = caml_call2(caml_call1(Gel[4], of_a4), buf, pos_ref);
    return [0, v1, v2, v3, v4];
   }
   function bin_reader_t$12
   (bin_reader_a1, bin_reader_a2, bin_reader_a3, bin_reader_a4){
    function _qO_(buf, pos_ref, vtag){
     return bin_read_t$25
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$26
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      buf,
                      pos_ref);
            },
            _qO_];
   }
   function bin_t$12(bin_a1, bin_a2, bin_a3, bin_a4){
    var
     _qM_ = bin_reader_t$12(bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3]),
     _qN_ = bin_writer_t$12(bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2]);
    return [0,
            bin_shape_t$12(bin_a1[1], bin_a2[1], bin_a3[1], bin_a4[1]),
            _qN_,
            _qM_];
   }
   var
    _dW_ = caml_call1(Bin_shape[3][1], cst_a4_diff$3),
    _dX_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_59),
    _dY_ = caml_call2(Bin_prot_Shape[11], _dX_, _dW_),
    _dZ_ = caml_call1(Bin_shape[3][1], cst_a3_diff$9),
    _d0_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_49),
    _d1_ = caml_call2(Bin_prot_Shape[11], _d0_, _dZ_),
    _d2_ = caml_call1(Bin_shape[3][1], cst_a2_diff$15),
    _d3_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_39),
    _d4_ = caml_call2(Bin_prot_Shape[11], _d3_, _d2_),
    _d5_ = caml_call1(Bin_shape[3][1], cst_a1_diff$15),
    _d6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_29),
    _d7_ = caml_call2(Bin_prot_Shape[11], _d6_, _d5_),
    _d8_ = caml_call1(Bin_shape[3][1], cst_a4$6),
    _d9_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_24),
    _d__ = caml_call2(Bin_prot_Shape[11], _d9_, _d8_),
    _d$_ = caml_call1(Bin_shape[3][1], cst_a3$15),
    _ea_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_19),
    _eb_ = caml_call2(Bin_prot_Shape[11], _ea_, _d$_),
    _ec_ = caml_call1(Bin_shape[3][1], cst_a2$24),
    _ed_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_14),
    _ee_ = caml_call2(Bin_prot_Shape[11], _ed_, _ec_),
    _ef_ = caml_call1(Bin_shape[3][1], cst_a1$24),
    _eg_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_754_9),
    _kp_ =
      bin_shape_t$11
       (caml_call2(Bin_prot_Shape[11], _eg_, _ef_),
        _ee_,
        _eb_,
        _d__,
        _d7_,
        _d4_,
        _d1_,
        _dY_),
    _eh_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$4), 0],
    _ei_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$10), _eh_],
    _ej_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$16), _ei_],
    _ek_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$16), _ej_],
    _el_ = [0, caml_call1(Bin_shape[3][1], cst_a4$7), _ek_],
    _em_ = [0, caml_call1(Bin_shape[3][1], cst_a3$16), _el_],
    _en_ = [0, caml_call1(Bin_shape[3][1], cst_a2$25), _em_],
    _eo_ = [0, caml_call1(Bin_shape[3][1], cst_a1$25), _en_],
    _ep_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$27), _eo_, _kp_], 0],
    _eq_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_753_6),
    group$13 = caml_call2(Bin_prot_Shape[2], _eq_, _ep_);
   function bin_shape_t$13(a1, a2, a3, a4, a1_diff, a2_diff, a3_diff, a4_diff){
    var _qL_ = caml_call1(Bin_shape[2][1], cst_t$28);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$13, _qL_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0, a1_diff, [0, a2_diff, [0, a3_diff, [0, a4_diff, 0]]]]]]]]);
   }
   function bin_size_t$13
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    v){
    return bin_size_t$11
            (size_of_a1,
             size_of_a2,
             size_of_a3,
             size_of_a4,
             size_of_a1_diff,
             size_of_a2_diff,
             size_of_a3_diff,
             size_of_a4_diff,
             v);
   }
   function bin_write_t$13
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    buf,
    pos,
    v){
    return bin_write_t$11
            (write_a1,
             write_a2,
             write_a3,
             write_a4,
             write_a1_diff,
             write_a2_diff,
             write_a3_diff,
             write_a4_diff,
             buf,
             pos,
             v);
   }
   function bin_writer_t$13
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff){
    function _qA_(v){
     var
      _qB_ = bin_writer_a4_diff[2],
      _qC_ = bin_writer_a3_diff[2],
      _qD_ = bin_writer_a2_diff[2],
      _qE_ = bin_writer_a1_diff[2],
      _qF_ = bin_writer_a4[2],
      _qG_ = bin_writer_a3[2],
      _qH_ = bin_writer_a2[2],
      _qI_ = bin_writer_a1[2];
     return function(_qJ_, _qK_){
      return bin_write_t$13
              (_qI_, _qH_, _qG_, _qF_, _qE_, _qD_, _qC_, _qB_, v, _qJ_, _qK_);};
    }
    return [0,
            function(v){
             return bin_size_t$13
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      v);
            },
            _qA_];
   }
   function bin_read_t$27
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref,
    vint){
    return bin_read_t$23
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$28
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    buf,
    pos_ref){
    return bin_read_t$24
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             buf,
             pos_ref);
   }
   function bin_reader_t$13
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff){
    function _qz_(buf, pos_ref, vtag){
     return bin_read_t$27
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$28
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      buf,
                      pos_ref);
            },
            _qz_];
   }
   function bin_t$13
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff){
    var
     _qx_ =
       bin_reader_t$13
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3]),
     _qy_ =
       bin_writer_t$13
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2]);
    return [0,
            bin_shape_t$13
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1]),
            _qy_,
            _qx_];
   }
   function quickcheck_generator$7
   (generator_563,
    generator_564,
    generator_565,
    generator_566,
    generator_567,
    generator_568,
    generator_569,
    generator_570){
    return quickcheck_generator$6
            (generator_563,
             generator_564,
             generator_565,
             generator_566,
             generator_567,
             generator_568,
             generator_569,
             generator_570);
   }
   function quickcheck_observer$7
   (observer_555,
    observer_556,
    observer_557,
    observer_558,
    observer_559,
    observer_560,
    observer_561,
    observer_562){
    return quickcheck_observer$6
            (observer_555,
             observer_556,
             observer_557,
             observer_558,
             observer_559,
             observer_560,
             observer_561,
             observer_562);
   }
   function quickcheck_shrinker$7
   (shrinker_547,
    shrinker_548,
    shrinker_549,
    shrinker_550,
    shrinker_551,
    shrinker_552,
    shrinker_553,
    shrinker_554){
    return quickcheck_shrinker$6
            (shrinker_547,
             shrinker_548,
             shrinker_549,
             shrinker_550,
             shrinker_551,
             shrinker_552,
             shrinker_553,
             shrinker_554);
   }
   function get$4(get1, get2, get3, get4, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get4, from_4, to_4),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$3 = diff;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$3 = [0, [3, d$2], diff];
    var ppx_optional_e_0$0 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$1 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$2 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$4
   (apply1_exn, apply2_exn, apply3_exn, apply4_exn, derived_on, diff){
    var
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$2 = diff$0[2],
        d$2 = match$0[1],
        diff$1 = tl$2,
        t2 = caml_call2(apply2_exn, derived_on2, d$2);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$1 = diff$1[2],
        d$1 = match$1[1],
        diff$2 = tl$1,
        t3 = caml_call2(apply3_exn, derived_on3, d$1);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$0 = diff$2[2],
        d$0 = match$2[1],
        diff$3 = tl$0,
        t4 = caml_call2(apply4_exn, derived_on4, d$0);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    return diff$3
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$4)
            : [0, t1, t2, t3, t4];
   }
   function t_of_sexp$11
   (of_a1_571, of_a2_572, of_a3_573, of_a4_574, of_a5_575, sexp_587){
    if(1 === sexp_587[0]){
     var _qs_ = sexp_587[1];
     if(_qs_){
      var _qt_ = _qs_[2];
      if(_qt_){
       var _qu_ = _qt_[2];
       if(_qu_){
        var _qv_ = _qu_[2];
        if(_qv_){
         var _qw_ = _qv_[2];
         if(_qw_ && ! _qw_[2]){
          var
           arg4_581 = _qw_[1],
           arg3_580 = _qv_[1],
           arg2_579 = _qu_[1],
           arg1_578 = _qt_[1],
           arg0_577 = _qs_[1],
           res0_582 = caml_call1(of_a1_571, arg0_577),
           res1_583 = caml_call1(of_a2_572, arg1_578),
           res2_584 = caml_call1(of_a3_573, arg2_579),
           res3_585 = caml_call1(of_a4_574, arg3_580),
           res4_586 = caml_call1(of_a5_575, arg4_581);
          return [0, res0_582, res1_583, res2_584, res3_585, res4_586];
         }
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_588, 5, sexp_587);
   }
   function sexp_of_t$11
   (of_a1_589, of_a2_590, of_a3_591, of_a4_592, of_a5_593, param){
    var
     arg4_598 = param[5],
     arg3_597 = param[4],
     arg2_596 = param[3],
     arg1_595 = param[2],
     arg0_594 = param[1],
     res0_599 = caml_call1(of_a1_589, arg0_594),
     res1_600 = caml_call1(of_a2_590, arg1_595),
     res2_601 = caml_call1(of_a3_591, arg2_596),
     res3_602 = caml_call1(of_a4_592, arg3_597),
     res4_603 = caml_call1(of_a5_593, arg4_598);
    return [1,
            [0,
             res0_599,
             [0, res1_600, [0, res2_601, [0, res3_602, [0, res4_603, 0]]]]]];
   }
   var
    _er_ = caml_call1(Bin_shape[3][1], cst_a5),
    _es_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_61),
    _et_ = [0, caml_call2(Bin_prot_Shape[11], _es_, _er_), 0],
    _eu_ = caml_call1(Bin_shape[3][1], cst_a4$8),
    _ev_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_55),
    _ew_ = [0, caml_call2(Bin_prot_Shape[11], _ev_, _eu_), _et_],
    _ex_ = caml_call1(Bin_shape[3][1], cst_a3$17),
    _ey_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_49),
    _ez_ = [0, caml_call2(Bin_prot_Shape[11], _ey_, _ex_), _ew_],
    _eA_ = caml_call1(Bin_shape[3][1], cst_a2$26),
    _eB_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_43),
    _eC_ = [0, caml_call2(Bin_prot_Shape[11], _eB_, _eA_), _ez_],
    _eD_ = caml_call1(Bin_shape[3][1], cst_a1$26),
    _eE_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_37),
    _eF_ = [0, caml_call2(Bin_prot_Shape[11], _eE_, _eD_), _eC_],
    _eG_ = caml_call1(Bin_prot_Shape[3], _eF_),
    _eH_ = [0, caml_call1(Bin_shape[3][1], cst_a5$0), 0],
    _eI_ = [0, caml_call1(Bin_shape[3][1], cst_a4$9), _eH_],
    _eJ_ = [0, caml_call1(Bin_shape[3][1], cst_a3$18), _eI_],
    _eK_ = [0, caml_call1(Bin_shape[3][1], cst_a2$27), _eJ_],
    _eL_ = [0, caml_call1(Bin_shape[3][1], cst_a1$27), _eK_],
    _eM_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$29), _eL_, _eG_], 0],
    _eN_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_839_2),
    group$14 = caml_call2(Bin_prot_Shape[2], _eN_, _eM_);
   function bin_shape_t$14(a1, a2, a3, a4, a5){
    var _qr_ = caml_call1(Bin_shape[2][1], cst_t$30);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$14, _qr_),
             [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]]);
   }
   function bin_size_t$14
   (size_of_a1, size_of_a2, size_of_a3, size_of_a4, size_of_a5, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _qm_ = caml_call1(size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _qm_),
     _qn_ = caml_call1(size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _qn_),
     _qo_ = caml_call1(size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _qo_),
     _qp_ = caml_call1(size_of_a4, v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _qp_),
     _qq_ = caml_call1(size_of_a5, v5);
    return caml_call2(Bin_prot_Common[23], size$2, _qq_);
   }
   function bin_write_t$14
   (write_a1, write_a2, write_a3, write_a4, write_a5, buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a1, buf, pos, v1),
     pos$1 = caml_call3(write_a2, buf, pos$0, v2),
     pos$2 = caml_call3(write_a3, buf, pos$1, v3),
     pos$3 = caml_call3(write_a4, buf, pos$2, v4);
    return caml_call3(write_a5, buf, pos$3, v5);
   }
   function bin_writer_t$14
   (bin_writer_a1, bin_writer_a2, bin_writer_a3, bin_writer_a4, bin_writer_a5){
    function _qe_(v){
     var
      _qf_ = bin_writer_a5[2],
      _qg_ = bin_writer_a4[2],
      _qh_ = bin_writer_a3[2],
      _qi_ = bin_writer_a2[2],
      _qj_ = bin_writer_a1[2];
     return function(_qk_, _ql_){
      return bin_write_t$14(_qj_, _qi_, _qh_, _qg_, _qf_, v, _qk_, _ql_);};
    }
    return [0,
            function(v){
             return bin_size_t$14
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      v);
            },
            _qe_];
   }
   function bin_read_t$29
   (of_a1, of_a2, of_a3, of_a4, of_a5, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple5_t, pos_ref[1]);
   }
   function bin_read_t$30(of_a1, of_a2, of_a3, of_a4, of_a5, buf, pos_ref){
    var
     v1 = caml_call2(of_a1, buf, pos_ref),
     v2 = caml_call2(of_a2, buf, pos_ref),
     v3 = caml_call2(of_a3, buf, pos_ref),
     v4 = caml_call2(of_a4, buf, pos_ref),
     v5 = caml_call2(of_a5, buf, pos_ref);
    return [0, v1, v2, v3, v4, v5];
   }
   function bin_reader_t$14
   (bin_reader_a1, bin_reader_a2, bin_reader_a3, bin_reader_a4, bin_reader_a5){
    function _qd_(buf, pos_ref, vtag){
     return bin_read_t$29
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$30
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      buf,
                      pos_ref);
            },
            _qd_];
   }
   function bin_t$14(bin_a1, bin_a2, bin_a3, bin_a4, bin_a5){
    var
     _qb_ =
       bin_reader_t$14(bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3], bin_a5[3]),
     _qc_ =
       bin_writer_t$14(bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2], bin_a5[2]);
    return [0,
            bin_shape_t$14
             (bin_a1[1], bin_a2[1], bin_a3[1], bin_a4[1], bin_a5[1]),
            _qc_,
            _qb_];
   }
   function t1$5(v0){return [0, v0];}
   function t2$5(v0){return [1, v0];}
   function t3$3(v0){return [2, v0];}
   function t4$1(v0){return [3, v0];}
   function t5(v0){return [4, v0];}
   function is_t1$2(param){return 0 === param[0] ? 1 : 0;}
   function is_t2$2(param){return 1 === param[0] ? 1 : 0;}
   function is_t3$1(param){return 2 === param[0] ? 1 : 0;}
   function is_t4$0(param){return 3 === param[0] ? 1 : 0;}
   function is_t5(param){return 4 === param[0] ? 1 : 0;}
   function t1_val$2(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t2_val$2(param){
    if(1 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t3_val$1(param){
    if(2 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t4_val$0(param){
    if(3 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t5_val(param){
    if(4 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var
    t1$6 = [0, cst_T1$8, 0, t1$5],
    t2$6 = [0, cst_T2$8, 1, t2$5],
    t3$4 = [0, cst_T3$5, 2, t3$3],
    t4$2 = [0, cst_T4$2, 3, t4$1],
    t5$0 = [0, cst_T5, 4, t5];
   function fold$2(init, t1_fun, t2_fun, t3_fun, t4_fun, t5_fun){
    return caml_call2
            (t5_fun,
             caml_call2
              (t4_fun,
               caml_call2
                (t3_fun,
                 caml_call2(t2_fun, caml_call2(t1_fun, init, t1$6), t2$6),
                 t3$4),
               t4$2),
             t5$0);
   }
   function iter$2(t1_fun, t2_fun, t3_fun, t4_fun, t5_fun){
    caml_call1(t1_fun, t1$6);
    caml_call1(t2_fun, t2$6);
    caml_call1(t3_fun, t3$4);
    caml_call1(t4_fun, t4$2);
    return caml_call1(t5_fun, t5$0);
   }
   function map$2(t, t1_fun, t2_fun, t3_fun, t4_fun, t5_fun){
    switch(t[0]){
      case 0:
       var v0 = t[1]; return caml_call2(t1_fun, t1$6, v0);
      case 1:
       var v0$0 = t[1]; return caml_call2(t2_fun, t2$6, v0$0);
      case 2:
       var v0$1 = t[1]; return caml_call2(t3_fun, t3$4, v0$1);
      case 3:
       var v0$2 = t[1]; return caml_call2(t4_fun, t4$2, v0$2);
      default: var v0$3 = t[1]; return caml_call2(t5_fun, t5$0, v0$3);
    }
   }
   function make_matcher$2
   (t1_fun, t2_fun, t3_fun, t4_fun, t5_fun, compile_acc){
    var
     match = caml_call2(t1_fun, t1$6, compile_acc),
     compile_acc$0 = match[2],
     t1_gen = match[1],
     match$0 = caml_call2(t2_fun, t2$6, compile_acc$0),
     compile_acc$1 = match$0[2],
     t2_gen = match$0[1],
     match$1 = caml_call2(t3_fun, t3$4, compile_acc$1),
     compile_acc$2 = match$1[2],
     t3_gen = match$1[1],
     match$2 = caml_call2(t4_fun, t4$2, compile_acc$2),
     compile_acc$3 = match$2[2],
     t4_gen = match$2[1],
     match$3 = caml_call2(t5_fun, t5$0, compile_acc$3),
     compile_acc$4 = match$3[2],
     t5_gen = match$3[1];
    function _p7_(param){return t1_gen;}
    function _p8_(param){return t2_gen;}
    function _p9_(param){return t3_gen;}
    function _p__(param){return t4_gen;}
    function _p$_(param){return t5_gen;}
    return [0,
            function(_qa_){return map$2(_qa_, _p7_, _p8_, _p9_, _p__, _p$_);},
            compile_acc$4];
   }
   function to_rank$2(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      default: return 4;
    }
   }
   function to_name$2(param){
    switch(param[0]){
      case 0:
       return cst_T1$9;
      case 1:
       return cst_T2$9;
      case 2:
       return cst_T3$6;
      case 3:
       return cst_T4$3;
      default: return cst_T5$0;
    }
   }
   var
    Variants$2 =
      [0,
       t1$6,
       t2$6,
       t3$4,
       t4$2,
       t5$0,
       fold$2,
       iter$2,
       map$2,
       make_matcher$2,
       to_rank$2,
       to_name$2,
       descriptions$2];
   function t_of_sexp$12
   (of_a1_604,
    of_a2_605,
    of_a3_606,
    of_a4_607,
    of_a5_608,
    of_a1_diff_609,
    of_a2_diff_610,
    of_a3_diff_611,
    of_a4_diff_612,
    of_a5_diff_613,
    sexp_618){
    a:
    {
     if(0 === sexp_618[0]){
      var _p2_ = sexp_618[1], _p3_ = caml_string_compare(_p2_, cst_t1);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _p3_){
           if(0 < _p3_){
            if(! caml_string_notequal(_p2_, cst_t2)) break e;
            if(! caml_string_notequal(_p2_, cst_t3)) break d;
            if(! caml_string_notequal(_p2_, cst_t4)) break c;
            if(caml_string_notequal(_p2_, cst_t5)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_p2_, cst_T1$14)){
           if(! caml_string_notequal(_p2_, cst_T2$14)) break e;
           if(! caml_string_notequal(_p2_, cst_T3$11)) break d;
           if(! caml_string_notequal(_p2_, cst_T4$8)) break c;
           if(caml_string_notequal(_p2_, cst_T5$5)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_616, sexp_618);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_616, sexp_618);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_616, sexp_618);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_616, sexp_618);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_616, sexp_618);
     }
     var _p4_ = sexp_618[1];
     if(! _p4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_616, sexp_618);
     var _p5_ = _p4_[1];
     if(0 !== _p5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_616, sexp_618);
     var tag_619 = _p5_[1], _p6_ = caml_string_compare(tag_619, cst_t1);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= _p6_){
          if(0 < _p6_){
           if(! caml_string_notequal(tag_619, cst_t2)) break e;
           if(! caml_string_notequal(tag_619, cst_t3)) break d;
           if(! caml_string_notequal(tag_619, cst_t4)) break c;
           if(caml_string_notequal(tag_619, cst_t5)) break a;
           break b;
          }
         }
         else if(caml_string_notequal(tag_619, cst_T1$14)){
          if(! caml_string_notequal(tag_619, cst_T2$14)) break e;
          if(! caml_string_notequal(tag_619, cst_T3$11)) break d;
          if(! caml_string_notequal(tag_619, cst_T4$8)) break c;
          if(caml_string_notequal(tag_619, cst_T5$5)) break a;
          break b;
         }
         var sexp_args_620 = _p4_[2];
         if(sexp_args_620 && ! sexp_args_620[2]){
          var
           arg0_621 = sexp_args_620[1],
           res0_622 = caml_call1(of_a1_diff_609, arg0_621);
          return [0, res0_622];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_616,
                  tag_619,
                  sexp_618);
        }
        var sexp_args_625 = _p4_[2];
        if(sexp_args_625 && ! sexp_args_625[2]){
         var
          arg0_626 = sexp_args_625[1],
          res0_627 = caml_call1(of_a2_diff_610, arg0_626);
         return [1, res0_627];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_616,
                 tag_619,
                 sexp_618);
       }
       var sexp_args_630 = _p4_[2];
       if(sexp_args_630 && ! sexp_args_630[2]){
        var
         arg0_631 = sexp_args_630[1],
         res0_632 = caml_call1(of_a3_diff_611, arg0_631);
        return [2, res0_632];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_616,
                tag_619,
                sexp_618);
      }
      var sexp_args_635 = _p4_[2];
      if(sexp_args_635 && ! sexp_args_635[2]){
       var
        arg0_636 = sexp_args_635[1],
        res0_637 = caml_call1(of_a4_diff_612, arg0_636);
       return [3, res0_637];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_616,
               tag_619,
               sexp_618);
     }
     var sexp_args_640 = _p4_[2];
     if(sexp_args_640 && ! sexp_args_640[2]){
      var
       arg0_641 = sexp_args_640[1],
       res0_642 = caml_call1(of_a5_diff_613, arg0_641);
      return [4, res0_642];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_616,
              tag_619,
              sexp_618);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_616, sexp_618);
   }
   function sexp_of_t$12
   (of_a1_653,
    of_a2_654,
    of_a3_655,
    of_a4_656,
    of_a5_657,
    of_a1_diff_658,
    of_a2_diff_659,
    of_a3_diff_660,
    of_a4_diff_661,
    of_a5_diff_662,
    param){
    switch(param[0]){
      case 0:
       var
        arg0_663 = param[1],
        res0_664 = caml_call1(of_a1_diff_658, arg0_663);
       return [1, [0, _eO_, [0, res0_664, 0]]];
      case 1:
       var
        arg0_665 = param[1],
        res0_666 = caml_call1(of_a2_diff_659, arg0_665);
       return [1, [0, _eP_, [0, res0_666, 0]]];
      case 2:
       var
        arg0_667 = param[1],
        res0_668 = caml_call1(of_a3_diff_660, arg0_667);
       return [1, [0, _eQ_, [0, res0_668, 0]]];
      case 3:
       var
        arg0_669 = param[1],
        res0_670 = caml_call1(of_a4_diff_661, arg0_669);
       return [1, [0, _eR_, [0, res0_670, 0]]];
      default:
       var
        arg0_671 = param[1],
        res0_672 = caml_call1(of_a5_diff_662, arg0_671);
       return [1, [0, _eS_, [0, res0_672, 0]]];
    }
   }
   var
    _eT_ = caml_call1(Bin_shape[3][1], cst_a5_diff),
    _eU_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_850_16),
    _eV_ =
      [0,
       [0, cst_T5$1, [0, caml_call2(Bin_prot_Shape[11], _eU_, _eT_), 0]],
       0],
    _eW_ = caml_call1(Bin_shape[3][1], cst_a4_diff$5),
    _eX_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_849_16),
    _eY_ =
      [0,
       [0, cst_T4$4, [0, caml_call2(Bin_prot_Shape[11], _eX_, _eW_), 0]],
       _eV_],
    _eZ_ = caml_call1(Bin_shape[3][1], cst_a3_diff$11),
    _e0_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_848_16),
    _e1_ =
      [0,
       [0, cst_T3$7, [0, caml_call2(Bin_prot_Shape[11], _e0_, _eZ_), 0]],
       _eY_],
    _e2_ = caml_call1(Bin_shape[3][1], cst_a2_diff$17),
    _e3_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_847_16),
    _e4_ =
      [0,
       [0, cst_T2$10, [0, caml_call2(Bin_prot_Shape[11], _e3_, _e2_), 0]],
       _e1_],
    _e5_ = caml_call1(Bin_shape[3][1], cst_a1_diff$17),
    _e6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_846_16),
    _e7_ =
      [0,
       [0, cst_T1$10, [0, caml_call2(Bin_prot_Shape[11], _e6_, _e5_), 0]],
       _e4_],
    _e8_ = caml_call1(Bin_prot_Shape[5], _e7_),
    _e9_ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$0), 0],
    _e__ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$6), _e9_],
    _e$_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$12), _e__],
    _fa_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$18), _e$_],
    _fb_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$18), _fa_],
    _fc_ = [0, caml_call1(Bin_shape[3][1], cst_a5$1), _fb_],
    _fd_ = [0, caml_call1(Bin_shape[3][1], cst_a4$10), _fc_],
    _fe_ = [0, caml_call1(Bin_shape[3][1], cst_a3$19), _fd_],
    _ff_ = [0, caml_call1(Bin_shape[3][1], cst_a2$28), _fe_],
    _fg_ = [0, caml_call1(Bin_shape[3][1], cst_a1$28), _ff_],
    _fh_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$31), _fg_, _e8_], 0],
    _fi_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_845_6),
    group$15 = caml_call2(Bin_prot_Shape[2], _fi_, _fh_);
   function bin_shape_t$15
   (a1, a2, a3, a4, a5, a1_diff, a2_diff, a3_diff, a4_diff, a5_diff){
    var _p1_ = caml_call1(Bin_shape[2][1], cst_t$32);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$15, _p1_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a1_diff,
                   [0, a2_diff, [0, a3_diff, [0, a4_diff, [0, a5_diff, 0]]]]]]]]]]);
   }
   function bin_size_t$15
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _pW_ = caml_call1(size_of_a1_diff, v1);
       return caml_call2(Bin_prot_Common[23], 1, _pW_);
      case 1:
       var v1$0 = param[1], _pX_ = caml_call1(size_of_a2_diff, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _pX_);
      case 2:
       var v1$1 = param[1], _pY_ = caml_call1(size_of_a3_diff, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _pY_);
      case 3:
       var v1$2 = param[1], _pZ_ = caml_call1(size_of_a4_diff, v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _pZ_);
      default:
       var v1$3 = param[1], _p0_ = caml_call1(size_of_a5_diff, v1$3);
       return caml_call2(Bin_prot_Common[23], 1, _p0_);
    }
   }
   function bin_write_t$15
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    buf,
    pos,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(write_a1_diff, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(write_a2_diff, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(write_a3_diff, buf, pos$2, v1$1);
      case 3:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call3(write_a4_diff, buf, pos$3, v1$2);
      default:
       var
        v1$3 = param[1],
        pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
       return caml_call3(write_a5_diff, buf, pos$4, v1$3);
    }
   }
   function bin_writer_t$15
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff){
    function _pJ_(v){
     var
      _pK_ = bin_writer_a5_diff[2],
      _pL_ = bin_writer_a4_diff[2],
      _pM_ = bin_writer_a3_diff[2],
      _pN_ = bin_writer_a2_diff[2],
      _pO_ = bin_writer_a1_diff[2],
      _pP_ = bin_writer_a5[2],
      _pQ_ = bin_writer_a4[2],
      _pR_ = bin_writer_a3[2],
      _pS_ = bin_writer_a2[2],
      _pT_ = bin_writer_a1[2];
     return function(_pU_, _pV_){
      return bin_write_t$15
              (_pT_,
               _pS_,
               _pR_,
               _pQ_,
               _pP_,
               _pO_,
               _pN_,
               _pM_,
               _pL_,
               _pK_,
               v,
               _pU_,
               _pV_);};
    }
    return [0,
            function(v){
             return bin_size_t$15
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      v);
            },
            _pJ_];
   }
   function bin_read_t$31
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref,
    vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple5_D, pos_ref[1]);
   }
   function bin_read_t$32
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(4 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _fj_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(of_a1_diff, buf, pos_ref); return [0, arg_1];
      case 1:
       var arg_1$0 = caml_call2(of_a2_diff, buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var arg_1$1 = caml_call2(of_a3_diff, buf, pos_ref);
       return [2, arg_1$1];
      case 3:
       var arg_1$2 = caml_call2(of_a4_diff, buf, pos_ref);
       return [3, arg_1$2];
      default:
       var arg_1$3 = caml_call2(of_a5_diff, buf, pos_ref);
       return [4, arg_1$3];
    }
   }
   function bin_reader_t$15
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff){
    function _pI_(buf, pos_ref, vtag){
     return bin_read_t$31
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$32
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      buf,
                      pos_ref);
            },
            _pI_];
   }
   function bin_t$15
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff){
    var
     _pG_ =
       bin_reader_t$15
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3]),
     _pH_ =
       bin_writer_t$15
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2]);
    return [0,
            bin_shape_t$15
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1]),
            _pH_,
            _pG_];
   }
   function quickcheck_generator$8
   (generator_716,
    generator_717,
    generator_718,
    generator_719,
    generator_720,
    generator_721,
    generator_722,
    generator_723,
    generator_724,
    generator_725){
    var _pv_ = 0;
    function _pw_(size_734, random_735){
     return [4,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_725,
               size_734,
               random_735)];
    }
    var
     _px_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _pw_)], _pv_];
    function _py_(size_732, random_733){
     return [3,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_724,
               size_732,
               random_733)];
    }
    var
     _pz_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _py_)], _px_];
    function _pA_(size_730, random_731){
     return [2,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_723,
               size_730,
               random_731)];
    }
    var
     _pB_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _pA_)], _pz_];
    function _pC_(size_728, random_729){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_722,
               size_728,
               random_729)];
    }
    var
     _pD_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _pC_)], _pB_];
    function _pE_(size_726, random_727){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_721,
               size_726,
               random_727)];
    }
    var
     _pF_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _pE_)], _pD_];
    return caml_call1(Base_quickcheck_Generator[60], _pF_);
   }
   function quickcheck_observer$8
   (observer_698,
    observer_699,
    observer_700,
    observer_701,
    observer_702,
    observer_703,
    observer_704,
    observer_705,
    observer_706,
    observer_707){
    function _pu_(x_708, size_709, hash_710){
     switch(x_708[0]){
       case 0:
        var
         x_711 = x_708[1],
         hash_710$0 = caml_call2(Base[133], hash_710, 0),
         hash_710$1 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_703,
             x_711,
             size_709,
             hash_710$0);
        return hash_710$1;
       case 1:
        var
         x_712 = x_708[1],
         hash_710$2 = caml_call2(Base[133], hash_710, 1),
         hash_710$3 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_704,
             x_712,
             size_709,
             hash_710$2);
        return hash_710$3;
       case 2:
        var
         x_713 = x_708[1],
         hash_710$4 = caml_call2(Base[133], hash_710, 2),
         hash_710$5 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_705,
             x_713,
             size_709,
             hash_710$4);
        return hash_710$5;
       case 3:
        var
         x_714 = x_708[1],
         hash_710$6 = caml_call2(Base[133], hash_710, 3),
         hash_710$7 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_706,
             x_714,
             size_709,
             hash_710$6);
        return hash_710$7;
       default:
        var
         x_715 = x_708[1],
         hash_710$8 = caml_call2(Base[133], hash_710, 4),
         hash_710$9 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_707,
             x_715,
             size_709,
             hash_710$8);
        return hash_710$9;
     }
    }
    return caml_call1(Base_quickcheck_Observer[36], _pu_);
   }
   function quickcheck_shrinker$8
   (shrinker_683,
    shrinker_684,
    shrinker_685,
    shrinker_686,
    shrinker_687,
    shrinker_688,
    shrinker_689,
    shrinker_690,
    shrinker_691,
    shrinker_692){
    function _o$_(param){
     switch(param[0]){
       case 0:
        var
         x_693 = param[1],
         _pa_ = 0,
         _pb_ = function(x_693){return [0, x_693];},
         _pc_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_688, x_693),
         _pd_ = [0, caml_call2(Base_Sequence[35], _pc_, _pb_), _pa_];
        return caml_call1(Base_Sequence[70], _pd_);
       case 1:
        var
         x_694 = param[1],
         _pe_ = 0,
         _pf_ = function(x_694){return [1, x_694];},
         _pg_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_689, x_694),
         _ph_ = [0, caml_call2(Base_Sequence[35], _pg_, _pf_), _pe_];
        return caml_call1(Base_Sequence[70], _ph_);
       case 2:
        var
         x_695 = param[1],
         _pi_ = 0,
         _pj_ = function(x_695){return [2, x_695];},
         _pk_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_690, x_695),
         _pl_ = [0, caml_call2(Base_Sequence[35], _pk_, _pj_), _pi_];
        return caml_call1(Base_Sequence[70], _pl_);
       case 3:
        var
         x_696 = param[1],
         _pm_ = 0,
         _pn_ = function(x_696){return [3, x_696];},
         _po_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_691, x_696),
         _pp_ = [0, caml_call2(Base_Sequence[35], _po_, _pn_), _pm_];
        return caml_call1(Base_Sequence[70], _pp_);
       default:
        var
         x_697 = param[1],
         _pq_ = 0,
         _pr_ = function(x_697){return [4, x_697];},
         _ps_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_692, x_697),
         _pt_ = [0, caml_call2(Base_Sequence[35], _ps_, _pr_), _pq_];
        return caml_call1(Base_Sequence[70], _pt_);
     }
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _o$_);
   }
   function sexp_of_t$13
   (of_a1_748,
    of_a2_749,
    of_a3_750,
    of_a4_751,
    of_a5_752,
    of_a1_diff_753,
    of_a2_diff_754,
    of_a3_diff_755,
    of_a4_diff_756,
    of_a5_diff_757,
    x_758){
    function _o9_(_o__){
     return sexp_of_t$12
             (of_a1_748,
              of_a2_749,
              of_a3_750,
              of_a4_751,
              of_a5_752,
              of_a1_diff_753,
              of_a2_diff_754,
              of_a3_diff_755,
              of_a4_diff_756,
              of_a5_diff_757,
              _o__);
    }
    return caml_call2(Base[165], _o9_, x_758);
   }
   var
    _fk_ = caml_call1(Bin_shape[3][1], cst_a5_diff$1),
    _fl_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_866_8),
    _fm_ = caml_call2(Bin_prot_Shape[11], _fl_, _fk_),
    _fn_ = caml_call1(Bin_shape[3][1], cst_a4_diff$7),
    _fo_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_865_8),
    _fp_ = caml_call2(Bin_prot_Shape[11], _fo_, _fn_),
    _fq_ = caml_call1(Bin_shape[3][1], cst_a3_diff$13),
    _fr_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_864_8),
    _fs_ = caml_call2(Bin_prot_Shape[11], _fr_, _fq_),
    _ft_ = caml_call1(Bin_shape[3][1], cst_a2_diff$19),
    _fu_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_863_8),
    _fv_ = caml_call2(Bin_prot_Shape[11], _fu_, _ft_),
    _fw_ = caml_call1(Bin_shape[3][1], cst_a1_diff$19),
    _fx_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_862_8),
    _fy_ = caml_call2(Bin_prot_Shape[11], _fx_, _fw_),
    _fz_ = caml_call1(Bin_shape[3][1], cst_a5$2),
    _fA_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_861_8),
    _fB_ = caml_call2(Bin_prot_Shape[11], _fA_, _fz_),
    _fC_ = caml_call1(Bin_shape[3][1], cst_a4$11),
    _fD_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_860_8),
    _fE_ = caml_call2(Bin_prot_Shape[11], _fD_, _fC_),
    _fF_ = caml_call1(Bin_shape[3][1], cst_a3$20),
    _fG_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_859_8),
    _fH_ = caml_call2(Bin_prot_Shape[11], _fG_, _fF_),
    _fI_ = caml_call1(Bin_shape[3][1], cst_a2$29),
    _fJ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_858_8),
    _fK_ = caml_call2(Bin_prot_Shape[11], _fJ_, _fI_),
    _fL_ = caml_call1(Bin_shape[3][1], cst_a1$29),
    _fM_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_857_8),
    _ko_ =
      bin_shape_t$15
       (caml_call2(Bin_prot_Shape[11], _fM_, _fL_),
        _fK_,
        _fH_,
        _fE_,
        _fB_,
        _fy_,
        _fv_,
        _fs_,
        _fp_,
        _fm_),
    _fN_ = caml_call1(Bin_prot_Std[203], _ko_),
    _fO_ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$2), 0],
    _fP_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$8), _fO_],
    _fQ_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$14), _fP_],
    _fR_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$20), _fQ_],
    _fS_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$20), _fR_],
    _fT_ = [0, caml_call1(Bin_shape[3][1], cst_a5$3), _fS_],
    _fU_ = [0, caml_call1(Bin_shape[3][1], cst_a4$12), _fT_],
    _fV_ = [0, caml_call1(Bin_shape[3][1], cst_a3$21), _fU_],
    _fW_ = [0, caml_call1(Bin_shape[3][1], cst_a2$30), _fV_],
    _fX_ = [0, caml_call1(Bin_shape[3][1], cst_a1$30), _fW_],
    _fY_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$33), _fX_, _fN_], 0],
    _fZ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_856_4),
    group$16 = caml_call2(Bin_prot_Shape[2], _fZ_, _fY_);
   function bin_shape_t$16
   (a1, a2, a3, a4, a5, a1_diff, a2_diff, a3_diff, a4_diff, a5_diff){
    var _o8_ = caml_call1(Bin_shape[2][1], cst_t$34);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$16, _o8_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a1_diff,
                   [0, a2_diff, [0, a3_diff, [0, a4_diff, [0, a5_diff, 0]]]]]]]]]]);
   }
   function bin_size_t$16
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    v){
    function _o6_(_o7_){
     return bin_size_t$15
             (size_of_a1,
              size_of_a2,
              size_of_a3,
              size_of_a4,
              size_of_a5,
              size_of_a1_diff,
              size_of_a2_diff,
              size_of_a3_diff,
              size_of_a4_diff,
              size_of_a5_diff,
              _o7_);
    }
    return caml_call2(Bin_prot_Std[18], _o6_, v);
   }
   function bin_write_t$16
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    buf,
    pos,
    v){
    function _o2_(_o3_, _o4_, _o5_){
     return bin_write_t$15
             (write_a1,
              write_a2,
              write_a3,
              write_a4,
              write_a5,
              write_a1_diff,
              write_a2_diff,
              write_a3_diff,
              write_a4_diff,
              write_a5_diff,
              _o3_,
              _o4_,
              _o5_);
    }
    return caml_call4(Bin_prot_Std[205], _o2_, buf, pos, v);
   }
   function bin_writer_t$16
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff){
    function _oP_(v){
     var
      _oQ_ = bin_writer_a5_diff[2],
      _oR_ = bin_writer_a4_diff[2],
      _oS_ = bin_writer_a3_diff[2],
      _oT_ = bin_writer_a2_diff[2],
      _oU_ = bin_writer_a1_diff[2],
      _oV_ = bin_writer_a5[2],
      _oW_ = bin_writer_a4[2],
      _oX_ = bin_writer_a3[2],
      _oY_ = bin_writer_a2[2],
      _oZ_ = bin_writer_a1[2];
     return function(_o0_, _o1_){
      return bin_write_t$16
              (_oZ_,
               _oY_,
               _oX_,
               _oW_,
               _oV_,
               _oU_,
               _oT_,
               _oS_,
               _oR_,
               _oQ_,
               v,
               _o0_,
               _o1_);};
    }
    return [0,
            function(v){
             return bin_size_t$16
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      v);
            },
            _oP_];
   }
   function bin_read_t$33
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref,
    vint){
    function _oM_(_oN_, _oO_){
     return bin_read_t$32
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a5,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              of_a5_diff,
              _oN_,
              _oO_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _oM_), buf, pos_ref, vint);
   }
   function bin_read_t$34
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref){
    function _oJ_(_oK_, _oL_){
     return bin_read_t$32
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a5,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              of_a5_diff,
              _oK_,
              _oL_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _oJ_), buf, pos_ref);
   }
   function bin_reader_t$16
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff){
    function _oI_(buf, pos_ref, vtag){
     return bin_read_t$33
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$34
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      buf,
                      pos_ref);
            },
            _oI_];
   }
   function bin_t$16
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff){
    var
     _oG_ =
       bin_reader_t$16
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3]),
     _oH_ =
       bin_writer_t$16
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2]);
    return [0,
            bin_shape_t$16
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1]),
            _oH_,
            _oG_];
   }
   function quickcheck_generator$9
   (generator_779,
    generator_780,
    generator_781,
    generator_782,
    generator_783,
    generator_784,
    generator_785,
    generator_786,
    generator_787,
    generator_788){
    var
     _oF_ =
       quickcheck_generator$8
        (generator_779,
         generator_780,
         generator_781,
         generator_782,
         generator_783,
         generator_784,
         generator_785,
         generator_786,
         generator_787,
         generator_788);
    return caml_call1(Base_quickcheck_Export[32], _oF_);
   }
   function quickcheck_observer$9
   (observer_769,
    observer_770,
    observer_771,
    observer_772,
    observer_773,
    observer_774,
    observer_775,
    observer_776,
    observer_777,
    observer_778){
    var
     _oE_ =
       quickcheck_observer$8
        (observer_769,
         observer_770,
         observer_771,
         observer_772,
         observer_773,
         observer_774,
         observer_775,
         observer_776,
         observer_777,
         observer_778);
    return caml_call1(Base_quickcheck_Export[37], _oE_);
   }
   function quickcheck_shrinker$9
   (shrinker_759,
    shrinker_760,
    shrinker_761,
    shrinker_762,
    shrinker_763,
    shrinker_764,
    shrinker_765,
    shrinker_766,
    shrinker_767,
    shrinker_768){
    var
     _oD_ =
       quickcheck_shrinker$8
        (shrinker_759,
         shrinker_760,
         shrinker_761,
         shrinker_762,
         shrinker_763,
         shrinker_764,
         shrinker_765,
         shrinker_766,
         shrinker_767,
         shrinker_768);
    return caml_call1(Base_quickcheck_Export[42], _oD_);
   }
   function compare_rank$2(t1, t2){
    var
     _oB_ = caml_call1(Variants$2[10], t2),
     _oC_ = caml_call1(Variants$2[10], t1);
    return caml_call2(Base_Int[14], _oC_, _oB_);
   }
   function equal_rank$2(t1, t2){
    var
     _oz_ = caml_call1(Variants$2[10], t2),
     _oA_ = caml_call1(Variants$2[10], t1);
    return caml_call2(Base_Int[13], _oA_, _oz_);
   }
   function get$5(get1, get2, get3, get4, get5, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_5 = from[5],
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_5 = to[5],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get5, from_5, to_5),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$4 = diff;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$4 = [0, [4, d$3], diff];
    var ppx_optional_e_0$0 = caml_call2(get4, from_4, to_4);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$1 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$2 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$3 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$5
   (apply1_exn,
    apply2_exn,
    apply3_exn,
    apply4_exn,
    apply5_exn,
    derived_on,
    diff){
    var
     derived_on5 = derived_on[5],
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$3 = diff$0[2],
        d$3 = match$0[1],
        diff$1 = tl$3,
        t2 = caml_call2(apply2_exn, derived_on2, d$3);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$2 = diff$1[2],
        d$2 = match$1[1],
        diff$2 = tl$2,
        t3 = caml_call2(apply3_exn, derived_on3, d$2);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$1 = diff$2[2],
        d$1 = match$2[1],
        diff$3 = tl$1,
        t4 = caml_call2(apply4_exn, derived_on4, d$1);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    a:
    {
     if(diff$3){
      var match$3 = diff$3[1];
      if(4 === match$3[0]){
       var
        tl$0 = diff$3[2],
        d$0 = match$3[1],
        diff$4 = tl$0,
        t5 = caml_call2(apply5_exn, derived_on5, d$0);
       break a;
      }
     }
     var diff$4 = diff$3, t5 = derived_on5;
    }
    return diff$4
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$5)
            : [0, t1, t2, t3, t4, t5];
   }
   function of_list_exn$2
   (of_list1_exn,
    apply1_exn,
    of_list2_exn,
    apply2_exn,
    of_list3_exn,
    apply3_exn,
    of_list4_exn,
    apply4_exn,
    of_list5_exn,
    apply5_exn,
    ts){
    if(! ts) return Diffable_Optional_diff[1];
    var
     _on_ = caml_call1(Base_List[11], ts),
     diff = caml_call2(Base_List[84], _on_, compare_rank$2);
    if(! diff) return caml_call1(Diffable_Optional_diff[2], 0);
    var acc = 0, param = diff;
    for(;;){
     if(! param){
      var _oy_ = caml_call1(Base_List[63], acc);
      return caml_call1(Diffable_Optional_diff[2], _oy_);
     }
     var match = param[1];
     switch(match[0]){
       case 0:
        var
         tl = param[2],
         d = match[1],
         _oo_ = function(param){return 0 === param[0] ? 1 : 0;},
         match$0 = caml_call2(Base_List[143], tl, _oo_),
         tl$0 = match$0[2],
         ds = match$0[1],
         _op_ =
           function(param){
            if(0 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _f0_], 1);
            var x = param[1];
            return x;
           },
         ds$0 = caml_call2(Base_List[53], ds, _op_),
         ppx_optional_e_0 = caml_call1(of_list1_exn, [0, d, ds$0]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
         var param = tl$0;
        else
         var
          d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
          acc$0 = [0, [0, d$0], acc],
          acc = acc$0,
          param = tl$0;
        break;
       case 1:
        var
         tl$1 = param[2],
         d$1 = match[1],
         _oq_ = function(param){return 1 === param[0] ? 1 : 0;},
         match$1 = caml_call2(Base_List[143], tl$1, _oq_),
         tl$2 = match$1[2],
         ds$1 = match$1[1],
         _or_ =
           function(param){
            if(1 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _f1_], 1);
            var x = param[1];
            return x;
           },
         ds$2 = caml_call2(Base_List[53], ds$1, _or_),
         ppx_optional_e_0$0 = caml_call1(of_list2_exn, [0, d$1, ds$2]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
         var param = tl$2;
        else
         var
          d$2 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
          acc$1 = [0, [1, d$2], acc],
          acc = acc$1,
          param = tl$2;
        break;
       case 2:
        var
         tl$3 = param[2],
         d$3 = match[1],
         _os_ = function(param){return 2 === param[0] ? 1 : 0;},
         match$2 = caml_call2(Base_List[143], tl$3, _os_),
         tl$4 = match$2[2],
         ds$3 = match$2[1],
         _ot_ =
           function(param){
            if(2 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _f2_], 1);
            var x = param[1];
            return x;
           },
         ds$4 = caml_call2(Base_List[53], ds$3, _ot_),
         ppx_optional_e_0$1 = caml_call1(of_list3_exn, [0, d$3, ds$4]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
         var param = tl$4;
        else
         var
          d$4 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
          acc$2 = [0, [2, d$4], acc],
          acc = acc$2,
          param = tl$4;
        break;
       case 3:
        var
         tl$5 = param[2],
         d$5 = match[1],
         _ou_ = function(param){return 3 === param[0] ? 1 : 0;},
         match$3 = caml_call2(Base_List[143], tl$5, _ou_),
         tl$6 = match$3[2],
         ds$5 = match$3[1],
         _ov_ =
           function(param){
            if(3 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _f3_], 1);
            var x = param[1];
            return x;
           },
         ds$6 = caml_call2(Base_List[53], ds$5, _ov_),
         ppx_optional_e_0$2 = caml_call1(of_list4_exn, [0, d$5, ds$6]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
         var param = tl$6;
        else
         var
          d$6 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
          acc$3 = [0, [3, d$6], acc],
          acc = acc$3,
          param = tl$6;
        break;
       default:
        var
         tl$7 = param[2],
         d$7 = match[1],
         _ow_ = function(param){return 4 === param[0] ? 1 : 0;},
         match$4 = caml_call2(Base_List[143], tl$7, _ow_),
         tl$8 = match$4[2],
         ds$7 = match$4[1],
         _ox_ =
           function(param){
            if(4 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _f4_], 1);
            var x = param[1];
            return x;
           },
         ds$8 = caml_call2(Base_List[53], ds$7, _ox_),
         ppx_optional_e_0$3 = caml_call1(of_list5_exn, [0, d$7, ds$8]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
         var param = tl$8;
        else
         var
          d$8 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
          acc$4 = [0, [4, d$8], acc],
          acc = acc$4,
          param = tl$8;
     }
    }
   }
   function singleton$2(entry_diff){return [0, entry_diff, 0];}
   function t_of_sexp$13
   (a1_of_sexp,
    a2_of_sexp,
    a3_of_sexp,
    a4_of_sexp,
    a5_of_sexp,
    a1_diff_of_sexp,
    a2_diff_of_sexp,
    a3_diff_of_sexp,
    a4_diff_of_sexp,
    a5_diff_of_sexp,
    x_747){
    function _oi_(_om_){
     return t_of_sexp$12
             (a1_of_sexp,
              a2_of_sexp,
              a3_of_sexp,
              a4_of_sexp,
              a5_of_sexp,
              a1_diff_of_sexp,
              a2_diff_of_sexp,
              a3_diff_of_sexp,
              a4_diff_of_sexp,
              a5_diff_of_sexp,
              _om_);
    }
    var
     _oj_ = caml_call2(Base[164], _oi_, x_747),
     l = caml_call2(Base_List[83], _oj_, compare_rank$2),
     match = caml_call2(Base_List[124], l, equal_rank$2);
    if(! match) return l;
    var
     dup = match[1][1],
     _ok_ = caml_call1(Variants$2[11], dup),
     _ol_ = caml_call2(Base[241], cst_Duplicate_entry_in_tuple_d$2, _ok_);
    return caml_call1(Base[244], _ol_);
   }
   function create$2(t1, t2, t3, t4, t5, param){
    var diff = 0;
    if(t5) var d = t5[1], diff$0 = [0, [4, d], diff]; else var diff$0 = diff;
    if(t4)
     var d$0 = t4[1], diff$1 = [0, [3, d$0], diff$0];
    else
     var diff$1 = diff$0;
    if(t3)
     var d$1 = t3[1], diff$2 = [0, [2, d$1], diff$1];
    else
     var diff$2 = diff$1;
    if(t2)
     var d$2 = t2[1], diff$3 = [0, [1, d$2], diff$2];
    else
     var diff$3 = diff$2;
    if(t1)
     var d$3 = t1[1], diff$4 = [0, [0, d$3], diff$3];
    else
     var diff$4 = diff$3;
    return diff$4;
   }
   function create_of_variants$2(t1, t2, t3, t4, t5){
    var ppx_optional_e_0 = caml_call1(t5, Variants$2[5]), diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$4 = diff;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$4 = [0, [4, d$3], diff];
    var ppx_optional_e_0$0 = caml_call1(t4, Variants$2[4]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$1 = caml_call1(t3, Variants$2[3]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$2 = caml_call1(t2, Variants$2[2]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$3 = caml_call1(t1, Variants$2[1]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$0 = [0, [0, d], diff$1];
    return diff$0;
   }
   function t_of_sexp$14
   (of_a1_789, of_a2_790, of_a3_791, of_a4_792, of_a5_793, sexp_805){
    if(1 === sexp_805[0]){
     var _od_ = sexp_805[1];
     if(_od_){
      var _oe_ = _od_[2];
      if(_oe_){
       var _of_ = _oe_[2];
       if(_of_){
        var _og_ = _of_[2];
        if(_og_){
         var _oh_ = _og_[2];
         if(_oh_ && ! _oh_[2]){
          var
           arg4_799 = _oh_[1],
           arg3_798 = _og_[1],
           arg2_797 = _of_[1],
           arg1_796 = _oe_[1],
           arg0_795 = _od_[1],
           res0_800 = caml_call2(Gel[12], of_a1_789, arg0_795),
           res1_801 = caml_call2(Gel[12], of_a2_790, arg1_796),
           res2_802 = caml_call2(Gel[12], of_a3_791, arg2_797),
           res3_803 = caml_call2(Gel[12], of_a4_792, arg3_798),
           res4_804 = caml_call2(Gel[12], of_a5_793, arg4_799);
          return [0, res0_800, res1_801, res2_802, res3_803, res4_804];
         }
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_806, 5, sexp_805);
   }
   function sexp_of_t$14
   (of_a1_807, of_a2_808, of_a3_809, of_a4_810, of_a5_811, param){
    var
     arg4_816 = param[5],
     arg3_815 = param[4],
     arg2_814 = param[3],
     arg1_813 = param[2],
     arg0_812 = param[1],
     res0_817 = caml_call2(Gel[13], of_a1_807, arg0_812),
     res1_818 = caml_call2(Gel[13], of_a2_808, arg1_813),
     res2_819 = caml_call2(Gel[13], of_a3_809, arg2_814),
     res3_820 = caml_call2(Gel[13], of_a4_810, arg3_815),
     res4_821 = caml_call2(Gel[13], of_a5_811, arg4_816);
    return [1,
            [0,
             res0_817,
             [0, res1_818, [0, res2_819, [0, res3_820, [0, res4_821, 0]]]]]];
   }
   var
    _f5_ = caml_call1(Bin_shape[3][1], cst_a5$4),
    _f6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1142_54),
    _f7_ = caml_call2(Bin_prot_Shape[11], _f6_, _f5_),
    _f8_ = [0, caml_call1(Gel[1], _f7_), 0],
    _f9_ = caml_call1(Bin_shape[3][1], cst_a4$13),
    _f__ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1142_42),
    _f$_ = caml_call2(Bin_prot_Shape[11], _f__, _f9_),
    _ga_ = [0, caml_call1(Gel[1], _f$_), _f8_],
    _gb_ = caml_call1(Bin_shape[3][1], cst_a3$22),
    _gc_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1142_30),
    _gd_ = caml_call2(Bin_prot_Shape[11], _gc_, _gb_),
    _ge_ = [0, caml_call1(Gel[1], _gd_), _ga_],
    _gf_ = caml_call1(Bin_shape[3][1], cst_a2$31),
    _gg_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1142_18),
    _gh_ = caml_call2(Bin_prot_Shape[11], _gg_, _gf_),
    _gi_ = [0, caml_call1(Gel[1], _gh_), _ge_],
    _gj_ = caml_call1(Bin_shape[3][1], cst_a1$31),
    _gk_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1142_6),
    _gl_ = caml_call2(Bin_prot_Shape[11], _gk_, _gj_),
    _gm_ = [0, caml_call1(Gel[1], _gl_), _gi_],
    _gn_ = caml_call1(Bin_prot_Shape[3], _gm_),
    _go_ = [0, caml_call1(Bin_shape[3][1], cst_a5$5), 0],
    _gp_ = [0, caml_call1(Bin_shape[3][1], cst_a4$14), _go_],
    _gq_ = [0, caml_call1(Bin_shape[3][1], cst_a3$23), _gp_],
    _gr_ = [0, caml_call1(Bin_shape[3][1], cst_a2$32), _gq_],
    _gs_ = [0, caml_call1(Bin_shape[3][1], cst_a1$32), _gr_],
    _gt_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$35), _gs_, _gn_], 0],
    _gu_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1141_4),
    group$17 = caml_call2(Bin_prot_Shape[2], _gu_, _gt_);
   function bin_shape_t$17(a1, a2, a3, a4, a5){
    var _oc_ = caml_call1(Bin_shape[2][1], cst_t$36);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$17, _oc_),
             [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]]);
   }
   function bin_size_t$17
   (size_of_a1, size_of_a2, size_of_a3, size_of_a4, size_of_a5, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _n9_ = caml_call2(Gel[2], size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _n9_),
     _n__ = caml_call2(Gel[2], size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _n__),
     _n$_ = caml_call2(Gel[2], size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _n$_),
     _oa_ = caml_call2(Gel[2], size_of_a4, v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _oa_),
     _ob_ = caml_call2(Gel[2], size_of_a5, v5);
    return caml_call2(Bin_prot_Common[23], size$2, _ob_);
   }
   function bin_write_t$17
   (write_a1, write_a2, write_a3, write_a4, write_a5, buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call4(Gel[3], write_a1, buf, pos, v1),
     pos$1 = caml_call4(Gel[3], write_a2, buf, pos$0, v2),
     pos$2 = caml_call4(Gel[3], write_a3, buf, pos$1, v3),
     pos$3 = caml_call4(Gel[3], write_a4, buf, pos$2, v4);
    return caml_call4(Gel[3], write_a5, buf, pos$3, v5);
   }
   function bin_writer_t$17
   (bin_writer_a1, bin_writer_a2, bin_writer_a3, bin_writer_a4, bin_writer_a5){
    function _n1_(v){
     var
      _n2_ = bin_writer_a5[2],
      _n3_ = bin_writer_a4[2],
      _n4_ = bin_writer_a3[2],
      _n5_ = bin_writer_a2[2],
      _n6_ = bin_writer_a1[2];
     return function(_n7_, _n8_){
      return bin_write_t$17(_n6_, _n5_, _n4_, _n3_, _n2_, v, _n7_, _n8_);};
    }
    return [0,
            function(v){
             return bin_size_t$17
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      v);
            },
            _n1_];
   }
   function bin_read_t$35
   (of_a1, of_a2, of_a3, of_a4, of_a5, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple5_F, pos_ref[1]);
   }
   function bin_read_t$36(of_a1, of_a2, of_a3, of_a4, of_a5, buf, pos_ref){
    var
     v1 = caml_call2(caml_call1(Gel[4], of_a1), buf, pos_ref),
     v2 = caml_call2(caml_call1(Gel[4], of_a2), buf, pos_ref),
     v3 = caml_call2(caml_call1(Gel[4], of_a3), buf, pos_ref),
     v4 = caml_call2(caml_call1(Gel[4], of_a4), buf, pos_ref),
     v5 = caml_call2(caml_call1(Gel[4], of_a5), buf, pos_ref);
    return [0, v1, v2, v3, v4, v5];
   }
   function bin_reader_t$17
   (bin_reader_a1, bin_reader_a2, bin_reader_a3, bin_reader_a4, bin_reader_a5){
    function _n0_(buf, pos_ref, vtag){
     return bin_read_t$35
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$36
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      buf,
                      pos_ref);
            },
            _n0_];
   }
   function bin_t$17(bin_a1, bin_a2, bin_a3, bin_a4, bin_a5){
    var
     _nY_ =
       bin_reader_t$17(bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3], bin_a5[3]),
     _nZ_ =
       bin_writer_t$17(bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2], bin_a5[2]);
    return [0,
            bin_shape_t$17
             (bin_a1[1], bin_a2[1], bin_a3[1], bin_a4[1], bin_a5[1]),
            _nZ_,
            _nY_];
   }
   var
    _gv_ = caml_call1(Bin_shape[3][1], cst_a5_diff$3),
    _gw_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_74),
    _gx_ = caml_call2(Bin_prot_Shape[11], _gw_, _gv_),
    _gy_ = caml_call1(Bin_shape[3][1], cst_a4_diff$9),
    _gz_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_64),
    _gA_ = caml_call2(Bin_prot_Shape[11], _gz_, _gy_),
    _gB_ = caml_call1(Bin_shape[3][1], cst_a3_diff$15),
    _gC_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_54),
    _gD_ = caml_call2(Bin_prot_Shape[11], _gC_, _gB_),
    _gE_ = caml_call1(Bin_shape[3][1], cst_a2_diff$21),
    _gF_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_44),
    _gG_ = caml_call2(Bin_prot_Shape[11], _gF_, _gE_),
    _gH_ = caml_call1(Bin_shape[3][1], cst_a1_diff$21),
    _gI_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_34),
    _gJ_ = caml_call2(Bin_prot_Shape[11], _gI_, _gH_),
    _gK_ = caml_call1(Bin_shape[3][1], cst_a5$6),
    _gL_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_29),
    _gM_ = caml_call2(Bin_prot_Shape[11], _gL_, _gK_),
    _gN_ = caml_call1(Bin_shape[3][1], cst_a4$15),
    _gO_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_24),
    _gP_ = caml_call2(Bin_prot_Shape[11], _gO_, _gN_),
    _gQ_ = caml_call1(Bin_shape[3][1], cst_a3$24),
    _gR_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_19),
    _gS_ = caml_call2(Bin_prot_Shape[11], _gR_, _gQ_),
    _gT_ = caml_call1(Bin_shape[3][1], cst_a2$33),
    _gU_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_14),
    _gV_ = caml_call2(Bin_prot_Shape[11], _gU_, _gT_),
    _gW_ = caml_call1(Bin_shape[3][1], cst_a1$33),
    _gX_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1149_9),
    _kn_ =
      bin_shape_t$16
       (caml_call2(Bin_prot_Shape[11], _gX_, _gW_),
        _gV_,
        _gS_,
        _gP_,
        _gM_,
        _gJ_,
        _gG_,
        _gD_,
        _gA_,
        _gx_),
    _gY_ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$4), 0],
    _gZ_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$10), _gY_],
    _g0_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$16), _gZ_],
    _g1_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$22), _g0_],
    _g2_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$22), _g1_],
    _g3_ = [0, caml_call1(Bin_shape[3][1], cst_a5$7), _g2_],
    _g4_ = [0, caml_call1(Bin_shape[3][1], cst_a4$16), _g3_],
    _g5_ = [0, caml_call1(Bin_shape[3][1], cst_a3$25), _g4_],
    _g6_ = [0, caml_call1(Bin_shape[3][1], cst_a2$34), _g5_],
    _g7_ = [0, caml_call1(Bin_shape[3][1], cst_a1$34), _g6_],
    _g8_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$37), _g7_, _kn_], 0],
    _g9_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1148_6),
    group$18 = caml_call2(Bin_prot_Shape[2], _g9_, _g8_);
   function bin_shape_t$18
   (a1, a2, a3, a4, a5, a1_diff, a2_diff, a3_diff, a4_diff, a5_diff){
    var _nX_ = caml_call1(Bin_shape[2][1], cst_t$38);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$18, _nX_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a1_diff,
                   [0, a2_diff, [0, a3_diff, [0, a4_diff, [0, a5_diff, 0]]]]]]]]]]);
   }
   function bin_size_t$18
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    v){
    return bin_size_t$16
            (size_of_a1,
             size_of_a2,
             size_of_a3,
             size_of_a4,
             size_of_a5,
             size_of_a1_diff,
             size_of_a2_diff,
             size_of_a3_diff,
             size_of_a4_diff,
             size_of_a5_diff,
             v);
   }
   function bin_write_t$18
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    buf,
    pos,
    v){
    return bin_write_t$16
            (write_a1,
             write_a2,
             write_a3,
             write_a4,
             write_a5,
             write_a1_diff,
             write_a2_diff,
             write_a3_diff,
             write_a4_diff,
             write_a5_diff,
             buf,
             pos,
             v);
   }
   function bin_writer_t$18
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff){
    function _nK_(v){
     var
      _nL_ = bin_writer_a5_diff[2],
      _nM_ = bin_writer_a4_diff[2],
      _nN_ = bin_writer_a3_diff[2],
      _nO_ = bin_writer_a2_diff[2],
      _nP_ = bin_writer_a1_diff[2],
      _nQ_ = bin_writer_a5[2],
      _nR_ = bin_writer_a4[2],
      _nS_ = bin_writer_a3[2],
      _nT_ = bin_writer_a2[2],
      _nU_ = bin_writer_a1[2];
     return function(_nV_, _nW_){
      return bin_write_t$18
              (_nU_,
               _nT_,
               _nS_,
               _nR_,
               _nQ_,
               _nP_,
               _nO_,
               _nN_,
               _nM_,
               _nL_,
               v,
               _nV_,
               _nW_);};
    }
    return [0,
            function(v){
             return bin_size_t$18
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      v);
            },
            _nK_];
   }
   function bin_read_t$37
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref,
    vint){
    return bin_read_t$33
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a5,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             of_a5_diff,
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$38
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    buf,
    pos_ref){
    return bin_read_t$34
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a5,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             of_a5_diff,
             buf,
             pos_ref);
   }
   function bin_reader_t$18
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff){
    function _nJ_(buf, pos_ref, vtag){
     return bin_read_t$37
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$38
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      buf,
                      pos_ref);
            },
            _nJ_];
   }
   function bin_t$18
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff){
    var
     _nH_ =
       bin_reader_t$18
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3]),
     _nI_ =
       bin_writer_t$18
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2]);
    return [0,
            bin_shape_t$18
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1]),
            _nI_,
            _nH_];
   }
   function quickcheck_generator$10
   (generator_865,
    generator_866,
    generator_867,
    generator_868,
    generator_869,
    generator_870,
    generator_871,
    generator_872,
    generator_873,
    generator_874){
    return quickcheck_generator$9
            (generator_865,
             generator_866,
             generator_867,
             generator_868,
             generator_869,
             generator_870,
             generator_871,
             generator_872,
             generator_873,
             generator_874);
   }
   function quickcheck_observer$10
   (observer_855,
    observer_856,
    observer_857,
    observer_858,
    observer_859,
    observer_860,
    observer_861,
    observer_862,
    observer_863,
    observer_864){
    return quickcheck_observer$9
            (observer_855,
             observer_856,
             observer_857,
             observer_858,
             observer_859,
             observer_860,
             observer_861,
             observer_862,
             observer_863,
             observer_864);
   }
   function quickcheck_shrinker$10
   (shrinker_845,
    shrinker_846,
    shrinker_847,
    shrinker_848,
    shrinker_849,
    shrinker_850,
    shrinker_851,
    shrinker_852,
    shrinker_853,
    shrinker_854){
    return quickcheck_shrinker$9
            (shrinker_845,
             shrinker_846,
             shrinker_847,
             shrinker_848,
             shrinker_849,
             shrinker_850,
             shrinker_851,
             shrinker_852,
             shrinker_853,
             shrinker_854);
   }
   function get$6(get1, get2, get3, get4, get5, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_5 = from[5],
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_5 = to[5],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get5, from_5, to_5),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$4 = diff;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$4 = [0, [4, d$3], diff];
    var ppx_optional_e_0$0 = caml_call2(get4, from_4, to_4);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$1 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$2 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$3 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$6
   (apply1_exn,
    apply2_exn,
    apply3_exn,
    apply4_exn,
    apply5_exn,
    derived_on,
    diff){
    var
     derived_on5 = derived_on[5],
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$3 = diff$0[2],
        d$3 = match$0[1],
        diff$1 = tl$3,
        t2 = caml_call2(apply2_exn, derived_on2, d$3);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$2 = diff$1[2],
        d$2 = match$1[1],
        diff$2 = tl$2,
        t3 = caml_call2(apply3_exn, derived_on3, d$2);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$1 = diff$2[2],
        d$1 = match$2[1],
        diff$3 = tl$1,
        t4 = caml_call2(apply4_exn, derived_on4, d$1);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    a:
    {
     if(diff$3){
      var match$3 = diff$3[1];
      if(4 === match$3[0]){
       var
        tl$0 = diff$3[2],
        d$0 = match$3[1],
        diff$4 = tl$0,
        t5 = caml_call2(apply5_exn, derived_on5, d$0);
       break a;
      }
     }
     var diff$4 = diff$3, t5 = derived_on5;
    }
    return diff$4
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$6)
            : [0, t1, t2, t3, t4, t5];
   }
   function t_of_sexp$15
   (of_a1_875,
    of_a2_876,
    of_a3_877,
    of_a4_878,
    of_a5_879,
    of_a6_880,
    sexp_894){
    if(1 === sexp_894[0]){
     var _nB_ = sexp_894[1];
     if(_nB_){
      var _nC_ = _nB_[2];
      if(_nC_){
       var _nD_ = _nC_[2];
       if(_nD_){
        var _nE_ = _nD_[2];
        if(_nE_){
         var _nF_ = _nE_[2];
         if(_nF_){
          var _nG_ = _nF_[2];
          if(_nG_ && ! _nG_[2]){
           var
            arg5_887 = _nG_[1],
            arg4_886 = _nF_[1],
            arg3_885 = _nE_[1],
            arg2_884 = _nD_[1],
            arg1_883 = _nC_[1],
            arg0_882 = _nB_[1],
            res0_888 = caml_call1(of_a1_875, arg0_882),
            res1_889 = caml_call1(of_a2_876, arg1_883),
            res2_890 = caml_call1(of_a3_877, arg2_884),
            res3_891 = caml_call1(of_a4_878, arg3_885),
            res4_892 = caml_call1(of_a5_879, arg4_886),
            res5_893 = caml_call1(of_a6_880, arg5_887);
           return [0,
                   res0_888,
                   res1_889,
                   res2_890,
                   res3_891,
                   res4_892,
                   res5_893];
          }
         }
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_895, 6, sexp_894);
   }
   function sexp_of_t$15
   (of_a1_896, of_a2_897, of_a3_898, of_a4_899, of_a5_900, of_a6_901, param){
    var
     arg5_907 = param[6],
     arg4_906 = param[5],
     arg3_905 = param[4],
     arg2_904 = param[3],
     arg1_903 = param[2],
     arg0_902 = param[1],
     res0_908 = caml_call1(of_a1_896, arg0_902),
     res1_909 = caml_call1(of_a2_897, arg1_903),
     res2_910 = caml_call1(of_a3_898, arg2_904),
     res3_911 = caml_call1(of_a4_899, arg3_905),
     res4_912 = caml_call1(of_a5_900, arg4_906),
     res5_913 = caml_call1(of_a6_901, arg5_907);
    return [1,
            [0,
             res0_908,
             [0,
              res1_909,
              [0, res2_910, [0, res3_911, [0, res4_912, [0, res5_913, 0]]]]]]];
   }
   var
    _g__ = caml_call1(Bin_shape[3][1], cst_a6),
    _g$_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_72),
    _ha_ = [0, caml_call2(Bin_prot_Shape[11], _g$_, _g__), 0],
    _hb_ = caml_call1(Bin_shape[3][1], cst_a5$8),
    _hc_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_66),
    _hd_ = [0, caml_call2(Bin_prot_Shape[11], _hc_, _hb_), _ha_],
    _he_ = caml_call1(Bin_shape[3][1], cst_a4$17),
    _hf_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_60),
    _hg_ = [0, caml_call2(Bin_prot_Shape[11], _hf_, _he_), _hd_],
    _hh_ = caml_call1(Bin_shape[3][1], cst_a3$26),
    _hi_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_54),
    _hj_ = [0, caml_call2(Bin_prot_Shape[11], _hi_, _hh_), _hg_],
    _hk_ = caml_call1(Bin_shape[3][1], cst_a2$35),
    _hl_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_48),
    _hm_ = [0, caml_call2(Bin_prot_Shape[11], _hl_, _hk_), _hj_],
    _hn_ = caml_call1(Bin_shape[3][1], cst_a1$35),
    _ho_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_42),
    _hp_ = [0, caml_call2(Bin_prot_Shape[11], _ho_, _hn_), _hm_],
    _hq_ = caml_call1(Bin_prot_Shape[3], _hp_),
    _hr_ = [0, caml_call1(Bin_shape[3][1], cst_a6$0), 0],
    _hs_ = [0, caml_call1(Bin_shape[3][1], cst_a5$9), _hr_],
    _ht_ = [0, caml_call1(Bin_shape[3][1], cst_a4$18), _hs_],
    _hu_ = [0, caml_call1(Bin_shape[3][1], cst_a3$27), _ht_],
    _hv_ = [0, caml_call1(Bin_shape[3][1], cst_a2$36), _hu_],
    _hw_ = [0, caml_call1(Bin_shape[3][1], cst_a1$36), _hv_],
    _hx_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$39), _hw_, _hq_], 0],
    _hy_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1253_2),
    group$19 = caml_call2(Bin_prot_Shape[2], _hy_, _hx_);
   function bin_shape_t$19(a1, a2, a3, a4, a5, a6){
    var _nA_ = caml_call1(Bin_shape[2][1], cst_t$40);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$19, _nA_),
             [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]]);
   }
   function bin_size_t$19
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a6,
    param){
    var
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _nu_ = caml_call1(size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _nu_),
     _nv_ = caml_call1(size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _nv_),
     _nw_ = caml_call1(size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _nw_),
     _nx_ = caml_call1(size_of_a4, v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _nx_),
     _ny_ = caml_call1(size_of_a5, v5),
     size$3 = caml_call2(Bin_prot_Common[23], size$2, _ny_),
     _nz_ = caml_call1(size_of_a6, v6);
    return caml_call2(Bin_prot_Common[23], size$3, _nz_);
   }
   function bin_write_t$19
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a6,
    buf,
    pos,
    param){
    var
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a1, buf, pos, v1),
     pos$1 = caml_call3(write_a2, buf, pos$0, v2),
     pos$2 = caml_call3(write_a3, buf, pos$1, v3),
     pos$3 = caml_call3(write_a4, buf, pos$2, v4),
     pos$4 = caml_call3(write_a5, buf, pos$3, v5);
    return caml_call3(write_a6, buf, pos$4, v6);
   }
   function bin_writer_t$19
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a6){
    function _nl_(v){
     var
      _nm_ = bin_writer_a6[2],
      _nn_ = bin_writer_a5[2],
      _no_ = bin_writer_a4[2],
      _np_ = bin_writer_a3[2],
      _nq_ = bin_writer_a2[2],
      _nr_ = bin_writer_a1[2];
     return function(_ns_, _nt_){
      return bin_write_t$19(_nr_, _nq_, _np_, _no_, _nn_, _nm_, v, _ns_, _nt_);};
    }
    return [0,
            function(v){
             return bin_size_t$19
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a6[1],
                      v);
            },
            _nl_];
   }
   function bin_read_t$39
   (of_a1, of_a2, of_a3, of_a4, of_a5, of_a6, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple6_t, pos_ref[1]);
   }
   function bin_read_t$40
   (of_a1, of_a2, of_a3, of_a4, of_a5, of_a6, buf, pos_ref){
    var
     v1 = caml_call2(of_a1, buf, pos_ref),
     v2 = caml_call2(of_a2, buf, pos_ref),
     v3 = caml_call2(of_a3, buf, pos_ref),
     v4 = caml_call2(of_a4, buf, pos_ref),
     v5 = caml_call2(of_a5, buf, pos_ref),
     v6 = caml_call2(of_a6, buf, pos_ref);
    return [0, v1, v2, v3, v4, v5, v6];
   }
   function bin_reader_t$19
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a6){
    function _nk_(buf, pos_ref, vtag){
     return bin_read_t$39
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a6[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$40
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a6[1],
                      buf,
                      pos_ref);
            },
            _nk_];
   }
   function bin_t$19(bin_a1, bin_a2, bin_a3, bin_a4, bin_a5, bin_a6){
    var
     _ni_ =
       bin_reader_t$19
        (bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3], bin_a5[3], bin_a6[3]),
     _nj_ =
       bin_writer_t$19
        (bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2], bin_a5[2], bin_a6[2]);
    return [0,
            bin_shape_t$19
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a6[1]),
            _nj_,
            _ni_];
   }
   function t1$7(v0){return [0, v0];}
   function t2$7(v0){return [1, v0];}
   function t3$5(v0){return [2, v0];}
   function t4$3(v0){return [3, v0];}
   function t5$1(v0){return [4, v0];}
   function t6(v0){return [5, v0];}
   function is_t1$3(param){return 0 === param[0] ? 1 : 0;}
   function is_t2$3(param){return 1 === param[0] ? 1 : 0;}
   function is_t3$2(param){return 2 === param[0] ? 1 : 0;}
   function is_t4$1(param){return 3 === param[0] ? 1 : 0;}
   function is_t5$0(param){return 4 === param[0] ? 1 : 0;}
   function is_t6(param){return 5 === param[0] ? 1 : 0;}
   function t1_val$3(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t2_val$3(param){
    if(1 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t3_val$2(param){
    if(2 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t4_val$1(param){
    if(3 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t5_val$0(param){
    if(4 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function t6_val(param){
    if(5 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var
    t1$8 = [0, cst_T1$11, 0, t1$7],
    t2$8 = [0, cst_T2$11, 1, t2$7],
    t3$6 = [0, cst_T3$8, 2, t3$5],
    t4$4 = [0, cst_T4$5, 3, t4$3],
    t5$2 = [0, cst_T5$2, 4, t5$1],
    t6$0 = [0, cst_T6, 5, t6];
   function fold$3(init, t1_fun, t2_fun, t3_fun, t4_fun, t5_fun, t6_fun){
    return caml_call2
            (t6_fun,
             caml_call2
              (t5_fun,
               caml_call2
                (t4_fun,
                 caml_call2
                  (t3_fun,
                   caml_call2(t2_fun, caml_call2(t1_fun, init, t1$8), t2$8),
                   t3$6),
                 t4$4),
               t5$2),
             t6$0);
   }
   function iter$3(t1_fun, t2_fun, t3_fun, t4_fun, t5_fun, t6_fun){
    caml_call1(t1_fun, t1$8);
    caml_call1(t2_fun, t2$8);
    caml_call1(t3_fun, t3$6);
    caml_call1(t4_fun, t4$4);
    caml_call1(t5_fun, t5$2);
    return caml_call1(t6_fun, t6$0);
   }
   function map$3(t, t1_fun, t2_fun, t3_fun, t4_fun, t5_fun, t6_fun){
    switch(t[0]){
      case 0:
       var v0 = t[1]; return caml_call2(t1_fun, t1$8, v0);
      case 1:
       var v0$0 = t[1]; return caml_call2(t2_fun, t2$8, v0$0);
      case 2:
       var v0$1 = t[1]; return caml_call2(t3_fun, t3$6, v0$1);
      case 3:
       var v0$2 = t[1]; return caml_call2(t4_fun, t4$4, v0$2);
      case 4:
       var v0$3 = t[1]; return caml_call2(t5_fun, t5$2, v0$3);
      default: var v0$4 = t[1]; return caml_call2(t6_fun, t6$0, v0$4);
    }
   }
   function make_matcher$3
   (t1_fun, t2_fun, t3_fun, t4_fun, t5_fun, t6_fun, compile_acc){
    var
     match = caml_call2(t1_fun, t1$8, compile_acc),
     compile_acc$0 = match[2],
     t1_gen = match[1],
     match$0 = caml_call2(t2_fun, t2$8, compile_acc$0),
     compile_acc$1 = match$0[2],
     t2_gen = match$0[1],
     match$1 = caml_call2(t3_fun, t3$6, compile_acc$1),
     compile_acc$2 = match$1[2],
     t3_gen = match$1[1],
     match$2 = caml_call2(t4_fun, t4$4, compile_acc$2),
     compile_acc$3 = match$2[2],
     t4_gen = match$2[1],
     match$3 = caml_call2(t5_fun, t5$2, compile_acc$3),
     compile_acc$4 = match$3[2],
     t5_gen = match$3[1],
     match$4 = caml_call2(t6_fun, t6$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     t6_gen = match$4[1];
    function _nb_(param){return t1_gen;}
    function _nc_(param){return t2_gen;}
    function _nd_(param){return t3_gen;}
    function _ne_(param){return t4_gen;}
    function _nf_(param){return t5_gen;}
    function _ng_(param){return t6_gen;}
    return [0,
            function(_nh_){
             return map$3(_nh_, _nb_, _nc_, _nd_, _ne_, _nf_, _ng_);
            },
            compile_acc$5];
   }
   function to_rank$3(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      case 4:
       return 4;
      default: return 5;
    }
   }
   function to_name$3(param){
    switch(param[0]){
      case 0:
       return cst_T1$12;
      case 1:
       return cst_T2$12;
      case 2:
       return cst_T3$9;
      case 3:
       return cst_T4$6;
      case 4:
       return cst_T5$3;
      default: return cst_T6$0;
    }
   }
   var
    Variants$3 =
      [0,
       t1$8,
       t2$8,
       t3$6,
       t4$4,
       t5$2,
       t6$0,
       fold$3,
       iter$3,
       map$3,
       make_matcher$3,
       to_rank$3,
       to_name$3,
       descriptions$3];
   function t_of_sexp$16
   (of_a1_914,
    of_a2_915,
    of_a3_916,
    of_a4_917,
    of_a5_918,
    of_a6_919,
    of_a1_diff_920,
    of_a2_diff_921,
    of_a3_diff_922,
    of_a4_diff_923,
    of_a5_diff_924,
    of_a6_diff_925,
    sexp_930){
    a:
    {
     if(0 === sexp_930[0]){
      var _m8_ = sexp_930[1], _m9_ = caml_string_compare(_m8_, cst_t1);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _m9_){
            if(0 < _m9_){
             if(! caml_string_notequal(_m8_, cst_t2)) break f;
             if(! caml_string_notequal(_m8_, cst_t3)) break e;
             if(! caml_string_notequal(_m8_, cst_t4)) break d;
             if(! caml_string_notequal(_m8_, cst_t5)) break c;
             if(caml_string_notequal(_m8_, cst_t6)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_m8_, cst_T1$14)){
            if(! caml_string_notequal(_m8_, cst_T2$14)) break f;
            if(! caml_string_notequal(_m8_, cst_T3$11)) break e;
            if(! caml_string_notequal(_m8_, cst_T4$8)) break d;
            if(! caml_string_notequal(_m8_, cst_T5$5)) break c;
            if(caml_string_notequal(_m8_, cst_T6$2)) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_928, sexp_930);
     }
     var _m__ = sexp_930[1];
     if(! _m__)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_928, sexp_930);
     var _m$_ = _m__[1];
     if(0 !== _m$_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_928, sexp_930);
     var tag_931 = _m$_[1], _na_ = caml_string_compare(tag_931, cst_t1);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _na_){
           if(0 < _na_){
            if(! caml_string_notequal(tag_931, cst_t2)) break f;
            if(! caml_string_notequal(tag_931, cst_t3)) break e;
            if(! caml_string_notequal(tag_931, cst_t4)) break d;
            if(! caml_string_notequal(tag_931, cst_t5)) break c;
            if(caml_string_notequal(tag_931, cst_t6)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_931, cst_T1$14)){
           if(! caml_string_notequal(tag_931, cst_T2$14)) break f;
           if(! caml_string_notequal(tag_931, cst_T3$11)) break e;
           if(! caml_string_notequal(tag_931, cst_T4$8)) break d;
           if(! caml_string_notequal(tag_931, cst_T5$5)) break c;
           if(caml_string_notequal(tag_931, cst_T6$2)) break a;
           break b;
          }
          var sexp_args_932 = _m__[2];
          if(sexp_args_932 && ! sexp_args_932[2]){
           var
            arg0_933 = sexp_args_932[1],
            res0_934 = caml_call1(of_a1_diff_920, arg0_933);
           return [0, res0_934];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_928,
                   tag_931,
                   sexp_930);
         }
         var sexp_args_937 = _m__[2];
         if(sexp_args_937 && ! sexp_args_937[2]){
          var
           arg0_938 = sexp_args_937[1],
           res0_939 = caml_call1(of_a2_diff_921, arg0_938);
          return [1, res0_939];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_928,
                  tag_931,
                  sexp_930);
        }
        var sexp_args_942 = _m__[2];
        if(sexp_args_942 && ! sexp_args_942[2]){
         var
          arg0_943 = sexp_args_942[1],
          res0_944 = caml_call1(of_a3_diff_922, arg0_943);
         return [2, res0_944];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_928,
                 tag_931,
                 sexp_930);
       }
       var sexp_args_947 = _m__[2];
       if(sexp_args_947 && ! sexp_args_947[2]){
        var
         arg0_948 = sexp_args_947[1],
         res0_949 = caml_call1(of_a4_diff_923, arg0_948);
        return [3, res0_949];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_928,
                tag_931,
                sexp_930);
      }
      var sexp_args_952 = _m__[2];
      if(sexp_args_952 && ! sexp_args_952[2]){
       var
        arg0_953 = sexp_args_952[1],
        res0_954 = caml_call1(of_a5_diff_924, arg0_953);
       return [4, res0_954];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_928,
               tag_931,
               sexp_930);
     }
     var sexp_args_957 = _m__[2];
     if(sexp_args_957 && ! sexp_args_957[2]){
      var
       arg0_958 = sexp_args_957[1],
       res0_959 = caml_call1(of_a6_diff_925, arg0_958);
      return [5, res0_959];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_928,
              tag_931,
              sexp_930);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_928, sexp_930);
   }
   function sexp_of_t$16
   (of_a1_972,
    of_a2_973,
    of_a3_974,
    of_a4_975,
    of_a5_976,
    of_a6_977,
    of_a1_diff_978,
    of_a2_diff_979,
    of_a3_diff_980,
    of_a4_diff_981,
    of_a5_diff_982,
    of_a6_diff_983,
    param){
    switch(param[0]){
      case 0:
       var
        arg0_984 = param[1],
        res0_985 = caml_call1(of_a1_diff_978, arg0_984);
       return [1, [0, _hz_, [0, res0_985, 0]]];
      case 1:
       var
        arg0_986 = param[1],
        res0_987 = caml_call1(of_a2_diff_979, arg0_986);
       return [1, [0, _hA_, [0, res0_987, 0]]];
      case 2:
       var
        arg0_988 = param[1],
        res0_989 = caml_call1(of_a3_diff_980, arg0_988);
       return [1, [0, _hB_, [0, res0_989, 0]]];
      case 3:
       var
        arg0_990 = param[1],
        res0_991 = caml_call1(of_a4_diff_981, arg0_990);
       return [1, [0, _hC_, [0, res0_991, 0]]];
      case 4:
       var
        arg0_992 = param[1],
        res0_993 = caml_call1(of_a5_diff_982, arg0_992);
       return [1, [0, _hD_, [0, res0_993, 0]]];
      default:
       var
        arg0_994 = param[1],
        res0_995 = caml_call1(of_a6_diff_983, arg0_994);
       return [1, [0, _hE_, [0, res0_995, 0]]];
    }
   }
   var
    _hF_ = caml_call1(Bin_shape[3][1], cst_a6_diff),
    _hG_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1278_16),
    _hH_ =
      [0,
       [0, cst_T6$1, [0, caml_call2(Bin_prot_Shape[11], _hG_, _hF_), 0]],
       0],
    _hI_ = caml_call1(Bin_shape[3][1], cst_a5_diff$5),
    _hJ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1277_16),
    _hK_ =
      [0,
       [0, cst_T5$4, [0, caml_call2(Bin_prot_Shape[11], _hJ_, _hI_), 0]],
       _hH_],
    _hL_ = caml_call1(Bin_shape[3][1], cst_a4_diff$11),
    _hM_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1276_16),
    _hN_ =
      [0,
       [0, cst_T4$7, [0, caml_call2(Bin_prot_Shape[11], _hM_, _hL_), 0]],
       _hK_],
    _hO_ = caml_call1(Bin_shape[3][1], cst_a3_diff$17),
    _hP_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1275_16),
    _hQ_ =
      [0,
       [0, cst_T3$10, [0, caml_call2(Bin_prot_Shape[11], _hP_, _hO_), 0]],
       _hN_],
    _hR_ = caml_call1(Bin_shape[3][1], cst_a2_diff$23),
    _hS_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1274_16),
    _hT_ =
      [0,
       [0, cst_T2$13, [0, caml_call2(Bin_prot_Shape[11], _hS_, _hR_), 0]],
       _hQ_],
    _hU_ = caml_call1(Bin_shape[3][1], cst_a1_diff$23),
    _hV_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1273_16),
    _hW_ =
      [0,
       [0, cst_T1$13, [0, caml_call2(Bin_prot_Shape[11], _hV_, _hU_), 0]],
       _hT_],
    _hX_ = caml_call1(Bin_prot_Shape[5], _hW_),
    _hY_ = [0, caml_call1(Bin_shape[3][1], cst_a6_diff$0), 0],
    _hZ_ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$6), _hY_],
    _h0_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$12), _hZ_],
    _h1_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$18), _h0_],
    _h2_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$24), _h1_],
    _h3_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$24), _h2_],
    _h4_ = [0, caml_call1(Bin_shape[3][1], cst_a6$1), _h3_],
    _h5_ = [0, caml_call1(Bin_shape[3][1], cst_a5$10), _h4_],
    _h6_ = [0, caml_call1(Bin_shape[3][1], cst_a4$19), _h5_],
    _h7_ = [0, caml_call1(Bin_shape[3][1], cst_a3$28), _h6_],
    _h8_ = [0, caml_call1(Bin_shape[3][1], cst_a2$37), _h7_],
    _h9_ = [0, caml_call1(Bin_shape[3][1], cst_a1$37), _h8_],
    _h__ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$41), _h9_, _hX_], 0],
    _h$_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1260_6),
    group$20 = caml_call2(Bin_prot_Shape[2], _h$_, _h__);
   function bin_shape_t$20
   (a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a1_diff,
    a2_diff,
    a3_diff,
    a4_diff,
    a5_diff,
    a6_diff){
    var _m7_ = caml_call1(Bin_shape[2][1], cst_t$42);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$20, _m7_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a6,
                   [0,
                    a1_diff,
                    [0,
                     a2_diff,
                     [0, a3_diff, [0, a4_diff, [0, a5_diff, [0, a6_diff, 0]]]]]]]]]]]]);
   }
   function bin_size_t$20
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a6,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    size_of_a6_diff,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _m1_ = caml_call1(size_of_a1_diff, v1);
       return caml_call2(Bin_prot_Common[23], 1, _m1_);
      case 1:
       var v1$0 = param[1], _m2_ = caml_call1(size_of_a2_diff, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _m2_);
      case 2:
       var v1$1 = param[1], _m3_ = caml_call1(size_of_a3_diff, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _m3_);
      case 3:
       var v1$2 = param[1], _m4_ = caml_call1(size_of_a4_diff, v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _m4_);
      case 4:
       var v1$3 = param[1], _m5_ = caml_call1(size_of_a5_diff, v1$3);
       return caml_call2(Bin_prot_Common[23], 1, _m5_);
      default:
       var v1$4 = param[1], _m6_ = caml_call1(size_of_a6_diff, v1$4);
       return caml_call2(Bin_prot_Common[23], 1, _m6_);
    }
   }
   function bin_write_t$20
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a6,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    write_a6_diff,
    buf,
    pos,
    param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(write_a1_diff, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(write_a2_diff, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(write_a3_diff, buf, pos$2, v1$1);
      case 3:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call3(write_a4_diff, buf, pos$3, v1$2);
      case 4:
       var
        v1$3 = param[1],
        pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
       return caml_call3(write_a5_diff, buf, pos$4, v1$3);
      default:
       var
        v1$4 = param[1],
        pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
       return caml_call3(write_a6_diff, buf, pos$5, v1$4);
    }
   }
   function bin_writer_t$20
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a6,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff,
    bin_writer_a6_diff){
    function _mM_(v){
     var
      _mN_ = bin_writer_a6_diff[2],
      _mO_ = bin_writer_a5_diff[2],
      _mP_ = bin_writer_a4_diff[2],
      _mQ_ = bin_writer_a3_diff[2],
      _mR_ = bin_writer_a2_diff[2],
      _mS_ = bin_writer_a1_diff[2],
      _mT_ = bin_writer_a6[2],
      _mU_ = bin_writer_a5[2],
      _mV_ = bin_writer_a4[2],
      _mW_ = bin_writer_a3[2],
      _mX_ = bin_writer_a2[2],
      _mY_ = bin_writer_a1[2];
     return function(_mZ_, _m0_){
      return bin_write_t$20
              (_mY_,
               _mX_,
               _mW_,
               _mV_,
               _mU_,
               _mT_,
               _mS_,
               _mR_,
               _mQ_,
               _mP_,
               _mO_,
               _mN_,
               v,
               _mZ_,
               _m0_);};
    }
    return [0,
            function(v){
             return bin_size_t$20
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a6[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      bin_writer_a6_diff[1],
                      v);
            },
            _mM_];
   }
   function bin_read_t$41
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref,
    vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple6_D, pos_ref[1]);
   }
   function bin_read_t$42
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(5 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _ia_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(of_a1_diff, buf, pos_ref); return [0, arg_1];
      case 1:
       var arg_1$0 = caml_call2(of_a2_diff, buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var arg_1$1 = caml_call2(of_a3_diff, buf, pos_ref);
       return [2, arg_1$1];
      case 3:
       var arg_1$2 = caml_call2(of_a4_diff, buf, pos_ref);
       return [3, arg_1$2];
      case 4:
       var arg_1$3 = caml_call2(of_a5_diff, buf, pos_ref);
       return [4, arg_1$3];
      default:
       var arg_1$4 = caml_call2(of_a6_diff, buf, pos_ref);
       return [5, arg_1$4];
    }
   }
   function bin_reader_t$20
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a6,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff,
    bin_reader_a6_diff){
    function _mL_(buf, pos_ref, vtag){
     return bin_read_t$41
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a6[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              bin_reader_a6_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$42
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a6[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      bin_reader_a6_diff[1],
                      buf,
                      pos_ref);
            },
            _mL_];
   }
   function bin_t$20
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a6,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff,
    bin_a6_diff){
    var
     _mJ_ =
       bin_reader_t$20
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a6[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3],
         bin_a6_diff[3]),
     _mK_ =
       bin_writer_t$20
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a6[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2],
         bin_a6_diff[2]);
    return [0,
            bin_shape_t$20
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a6[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1],
              bin_a6_diff[1]),
            _mK_,
            _mJ_];
   }
   function quickcheck_generator$11
   (generator_1047,
    generator_1048,
    generator_1049,
    generator_1050,
    generator_1051,
    generator_1052,
    generator_1053,
    generator_1054,
    generator_1055,
    generator_1056,
    generator_1057,
    generator_1058){
    var _mw_ = 0;
    function _mx_(size_1069, random_1070){
     return [5,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1058,
               size_1069,
               random_1070)];
    }
    var
     _my_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mx_)], _mw_];
    function _mz_(size_1067, random_1068){
     return [4,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1057,
               size_1067,
               random_1068)];
    }
    var
     _mA_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mz_)], _my_];
    function _mB_(size_1065, random_1066){
     return [3,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1056,
               size_1065,
               random_1066)];
    }
    var
     _mC_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mB_)], _mA_];
    function _mD_(size_1063, random_1064){
     return [2,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1055,
               size_1063,
               random_1064)];
    }
    var
     _mE_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mD_)], _mC_];
    function _mF_(size_1061, random_1062){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1054,
               size_1061,
               random_1062)];
    }
    var
     _mG_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mF_)], _mE_];
    function _mH_(size_1059, random_1060){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_1053,
               size_1059,
               random_1060)];
    }
    var
     _mI_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _mH_)], _mG_];
    return caml_call1(Base_quickcheck_Generator[60], _mI_);
   }
   function quickcheck_observer$11
   (observer_1026,
    observer_1027,
    observer_1028,
    observer_1029,
    observer_1030,
    observer_1031,
    observer_1032,
    observer_1033,
    observer_1034,
    observer_1035,
    observer_1036,
    observer_1037){
    function _mv_(x_1038, size_1039, hash_1040){
     switch(x_1038[0]){
       case 0:
        var
         x_1041 = x_1038[1],
         hash_1040$0 = caml_call2(Base[133], hash_1040, 0),
         hash_1040$1 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1032,
             x_1041,
             size_1039,
             hash_1040$0);
        return hash_1040$1;
       case 1:
        var
         x_1042 = x_1038[1],
         hash_1040$2 = caml_call2(Base[133], hash_1040, 1),
         hash_1040$3 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1033,
             x_1042,
             size_1039,
             hash_1040$2);
        return hash_1040$3;
       case 2:
        var
         x_1043 = x_1038[1],
         hash_1040$4 = caml_call2(Base[133], hash_1040, 2),
         hash_1040$5 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1034,
             x_1043,
             size_1039,
             hash_1040$4);
        return hash_1040$5;
       case 3:
        var
         x_1044 = x_1038[1],
         hash_1040$6 = caml_call2(Base[133], hash_1040, 3),
         hash_1040$7 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1035,
             x_1044,
             size_1039,
             hash_1040$6);
        return hash_1040$7;
       case 4:
        var
         x_1045 = x_1038[1],
         hash_1040$8 = caml_call2(Base[133], hash_1040, 4),
         hash_1040$9 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1036,
             x_1045,
             size_1039,
             hash_1040$8);
        return hash_1040$9;
       default:
        var
         x_1046 = x_1038[1],
         hash_1040$10 = caml_call2(Base[133], hash_1040, 5),
         hash_1040$11 =
           caml_call4
            (Base_quickcheck_Observer[37],
             observer_1037,
             x_1046,
             size_1039,
             hash_1040$10);
        return hash_1040$11;
     }
    }
    return caml_call1(Base_quickcheck_Observer[36], _mv_);
   }
   function quickcheck_shrinker$11
   (shrinker_1008,
    shrinker_1009,
    shrinker_1010,
    shrinker_1011,
    shrinker_1012,
    shrinker_1013,
    shrinker_1014,
    shrinker_1015,
    shrinker_1016,
    shrinker_1017,
    shrinker_1018,
    shrinker_1019){
    function _l8_(param){
     switch(param[0]){
       case 0:
        var
         x_1020 = param[1],
         _l9_ = 0,
         _l__ = function(x_1020){return [0, x_1020];},
         _l$_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1014, x_1020),
         _ma_ = [0, caml_call2(Base_Sequence[35], _l$_, _l__), _l9_];
        return caml_call1(Base_Sequence[70], _ma_);
       case 1:
        var
         x_1021 = param[1],
         _mb_ = 0,
         _mc_ = function(x_1021){return [1, x_1021];},
         _md_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1015, x_1021),
         _me_ = [0, caml_call2(Base_Sequence[35], _md_, _mc_), _mb_];
        return caml_call1(Base_Sequence[70], _me_);
       case 2:
        var
         x_1022 = param[1],
         _mf_ = 0,
         _mg_ = function(x_1022){return [2, x_1022];},
         _mh_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1016, x_1022),
         _mi_ = [0, caml_call2(Base_Sequence[35], _mh_, _mg_), _mf_];
        return caml_call1(Base_Sequence[70], _mi_);
       case 3:
        var
         x_1023 = param[1],
         _mj_ = 0,
         _mk_ = function(x_1023){return [3, x_1023];},
         _ml_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1017, x_1023),
         _mm_ = [0, caml_call2(Base_Sequence[35], _ml_, _mk_), _mj_];
        return caml_call1(Base_Sequence[70], _mm_);
       case 4:
        var
         x_1024 = param[1],
         _mn_ = 0,
         _mo_ = function(x_1024){return [4, x_1024];},
         _mp_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1018, x_1024),
         _mq_ = [0, caml_call2(Base_Sequence[35], _mp_, _mo_), _mn_];
        return caml_call1(Base_Sequence[70], _mq_);
       default:
        var
         x_1025 = param[1],
         _mr_ = 0,
         _ms_ = function(x_1025){return [5, x_1025];},
         _mt_ =
           caml_call2(Base_quickcheck_Shrinker[37], shrinker_1019, x_1025),
         _mu_ = [0, caml_call2(Base_Sequence[35], _mt_, _ms_), _mr_];
        return caml_call1(Base_Sequence[70], _mu_);
     }
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _l8_);
   }
   function sexp_of_t$17
   (of_a1_1085,
    of_a2_1086,
    of_a3_1087,
    of_a4_1088,
    of_a5_1089,
    of_a6_1090,
    of_a1_diff_1091,
    of_a2_diff_1092,
    of_a3_diff_1093,
    of_a4_diff_1094,
    of_a5_diff_1095,
    of_a6_diff_1096,
    x_1097){
    function _l6_(_l7_){
     return sexp_of_t$16
             (of_a1_1085,
              of_a2_1086,
              of_a3_1087,
              of_a4_1088,
              of_a5_1089,
              of_a6_1090,
              of_a1_diff_1091,
              of_a2_diff_1092,
              of_a3_diff_1093,
              of_a4_diff_1094,
              of_a5_diff_1095,
              of_a6_diff_1096,
              _l7_);
    }
    return caml_call2(Base[165], _l6_, x_1097);
   }
   var
    _ib_ = caml_call1(Bin_shape[3][1], cst_a6_diff$1),
    _ic_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1308_8),
    _id_ = caml_call2(Bin_prot_Shape[11], _ic_, _ib_),
    _ie_ = caml_call1(Bin_shape[3][1], cst_a5_diff$7),
    _if_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1307_8),
    _ig_ = caml_call2(Bin_prot_Shape[11], _if_, _ie_),
    _ih_ = caml_call1(Bin_shape[3][1], cst_a4_diff$13),
    _ii_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1306_8),
    _ij_ = caml_call2(Bin_prot_Shape[11], _ii_, _ih_),
    _ik_ = caml_call1(Bin_shape[3][1], cst_a3_diff$19),
    _il_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1305_8),
    _im_ = caml_call2(Bin_prot_Shape[11], _il_, _ik_),
    _in_ = caml_call1(Bin_shape[3][1], cst_a2_diff$25),
    _io_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1304_8),
    _ip_ = caml_call2(Bin_prot_Shape[11], _io_, _in_),
    _iq_ = caml_call1(Bin_shape[3][1], cst_a1_diff$25),
    _ir_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1303_8),
    _is_ = caml_call2(Bin_prot_Shape[11], _ir_, _iq_),
    _it_ = caml_call1(Bin_shape[3][1], cst_a6$2),
    _iu_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1302_8),
    _iv_ = caml_call2(Bin_prot_Shape[11], _iu_, _it_),
    _iw_ = caml_call1(Bin_shape[3][1], cst_a5$11),
    _ix_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1301_8),
    _iy_ = caml_call2(Bin_prot_Shape[11], _ix_, _iw_),
    _iz_ = caml_call1(Bin_shape[3][1], cst_a4$20),
    _iA_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1300_8),
    _iB_ = caml_call2(Bin_prot_Shape[11], _iA_, _iz_),
    _iC_ = caml_call1(Bin_shape[3][1], cst_a3$29),
    _iD_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1299_8),
    _iE_ = caml_call2(Bin_prot_Shape[11], _iD_, _iC_),
    _iF_ = caml_call1(Bin_shape[3][1], cst_a2$38),
    _iG_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1298_8),
    _iH_ = caml_call2(Bin_prot_Shape[11], _iG_, _iF_),
    _iI_ = caml_call1(Bin_shape[3][1], cst_a1$38),
    _iJ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1297_8),
    _km_ =
      bin_shape_t$20
       (caml_call2(Bin_prot_Shape[11], _iJ_, _iI_),
        _iH_,
        _iE_,
        _iB_,
        _iy_,
        _iv_,
        _is_,
        _ip_,
        _im_,
        _ij_,
        _ig_,
        _id_),
    _iK_ = caml_call1(Bin_prot_Std[203], _km_),
    _iL_ = [0, caml_call1(Bin_shape[3][1], cst_a6_diff$2), 0],
    _iM_ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$8), _iL_],
    _iN_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$14), _iM_],
    _iO_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$20), _iN_],
    _iP_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$26), _iO_],
    _iQ_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$26), _iP_],
    _iR_ = [0, caml_call1(Bin_shape[3][1], cst_a6$3), _iQ_],
    _iS_ = [0, caml_call1(Bin_shape[3][1], cst_a5$12), _iR_],
    _iT_ = [0, caml_call1(Bin_shape[3][1], cst_a4$21), _iS_],
    _iU_ = [0, caml_call1(Bin_shape[3][1], cst_a3$30), _iT_],
    _iV_ = [0, caml_call1(Bin_shape[3][1], cst_a2$39), _iU_],
    _iW_ = [0, caml_call1(Bin_shape[3][1], cst_a1$39), _iV_],
    _iX_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$43), _iW_, _iK_], 0],
    _iY_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1284_4),
    group$21 = caml_call2(Bin_prot_Shape[2], _iY_, _iX_);
   function bin_shape_t$21
   (a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a1_diff,
    a2_diff,
    a3_diff,
    a4_diff,
    a5_diff,
    a6_diff){
    var _l5_ = caml_call1(Bin_shape[2][1], cst_t$44);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$21, _l5_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a6,
                   [0,
                    a1_diff,
                    [0,
                     a2_diff,
                     [0, a3_diff, [0, a4_diff, [0, a5_diff, [0, a6_diff, 0]]]]]]]]]]]]);
   }
   function bin_size_t$21
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a6,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    size_of_a6_diff,
    v){
    function _l3_(_l4_){
     return bin_size_t$20
             (size_of_a1,
              size_of_a2,
              size_of_a3,
              size_of_a4,
              size_of_a5,
              size_of_a6,
              size_of_a1_diff,
              size_of_a2_diff,
              size_of_a3_diff,
              size_of_a4_diff,
              size_of_a5_diff,
              size_of_a6_diff,
              _l4_);
    }
    return caml_call2(Bin_prot_Std[18], _l3_, v);
   }
   function bin_write_t$21
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a6,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    write_a6_diff,
    buf,
    pos,
    v){
    function _lZ_(_l0_, _l1_, _l2_){
     return bin_write_t$20
             (write_a1,
              write_a2,
              write_a3,
              write_a4,
              write_a5,
              write_a6,
              write_a1_diff,
              write_a2_diff,
              write_a3_diff,
              write_a4_diff,
              write_a5_diff,
              write_a6_diff,
              _l0_,
              _l1_,
              _l2_);
    }
    return caml_call4(Bin_prot_Std[205], _lZ_, buf, pos, v);
   }
   function bin_writer_t$21
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a6,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff,
    bin_writer_a6_diff){
    function _lK_(v){
     var
      _lL_ = bin_writer_a6_diff[2],
      _lM_ = bin_writer_a5_diff[2],
      _lN_ = bin_writer_a4_diff[2],
      _lO_ = bin_writer_a3_diff[2],
      _lP_ = bin_writer_a2_diff[2],
      _lQ_ = bin_writer_a1_diff[2],
      _lR_ = bin_writer_a6[2],
      _lS_ = bin_writer_a5[2],
      _lT_ = bin_writer_a4[2],
      _lU_ = bin_writer_a3[2],
      _lV_ = bin_writer_a2[2],
      _lW_ = bin_writer_a1[2];
     return function(_lX_, _lY_){
      return bin_write_t$21
              (_lW_,
               _lV_,
               _lU_,
               _lT_,
               _lS_,
               _lR_,
               _lQ_,
               _lP_,
               _lO_,
               _lN_,
               _lM_,
               _lL_,
               v,
               _lX_,
               _lY_);};
    }
    return [0,
            function(v){
             return bin_size_t$21
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a6[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      bin_writer_a6_diff[1],
                      v);
            },
            _lK_];
   }
   function bin_read_t$43
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref,
    vint){
    function _lH_(_lI_, _lJ_){
     return bin_read_t$42
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a5,
              of_a6,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              of_a5_diff,
              of_a6_diff,
              _lI_,
              _lJ_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _lH_), buf, pos_ref, vint);
   }
   function bin_read_t$44
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref){
    function _lE_(_lF_, _lG_){
     return bin_read_t$42
             (of_a1,
              of_a2,
              of_a3,
              of_a4,
              of_a5,
              of_a6,
              of_a1_diff,
              of_a2_diff,
              of_a3_diff,
              of_a4_diff,
              of_a5_diff,
              of_a6_diff,
              _lF_,
              _lG_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _lE_), buf, pos_ref);
   }
   function bin_reader_t$21
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a6,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff,
    bin_reader_a6_diff){
    function _lD_(buf, pos_ref, vtag){
     return bin_read_t$43
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a6[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              bin_reader_a6_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$44
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a6[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      bin_reader_a6_diff[1],
                      buf,
                      pos_ref);
            },
            _lD_];
   }
   function bin_t$21
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a6,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff,
    bin_a6_diff){
    var
     _lB_ =
       bin_reader_t$21
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a6[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3],
         bin_a6_diff[3]),
     _lC_ =
       bin_writer_t$21
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a6[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2],
         bin_a6_diff[2]);
    return [0,
            bin_shape_t$21
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a6[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1],
              bin_a6_diff[1]),
            _lC_,
            _lB_];
   }
   function quickcheck_generator$12
   (generator_1122,
    generator_1123,
    generator_1124,
    generator_1125,
    generator_1126,
    generator_1127,
    generator_1128,
    generator_1129,
    generator_1130,
    generator_1131,
    generator_1132,
    generator_1133){
    var
     _lA_ =
       quickcheck_generator$11
        (generator_1122,
         generator_1123,
         generator_1124,
         generator_1125,
         generator_1126,
         generator_1127,
         generator_1128,
         generator_1129,
         generator_1130,
         generator_1131,
         generator_1132,
         generator_1133);
    return caml_call1(Base_quickcheck_Export[32], _lA_);
   }
   function quickcheck_observer$12
   (observer_1110,
    observer_1111,
    observer_1112,
    observer_1113,
    observer_1114,
    observer_1115,
    observer_1116,
    observer_1117,
    observer_1118,
    observer_1119,
    observer_1120,
    observer_1121){
    var
     _lz_ =
       quickcheck_observer$11
        (observer_1110,
         observer_1111,
         observer_1112,
         observer_1113,
         observer_1114,
         observer_1115,
         observer_1116,
         observer_1117,
         observer_1118,
         observer_1119,
         observer_1120,
         observer_1121);
    return caml_call1(Base_quickcheck_Export[37], _lz_);
   }
   function quickcheck_shrinker$12
   (shrinker_1098,
    shrinker_1099,
    shrinker_1100,
    shrinker_1101,
    shrinker_1102,
    shrinker_1103,
    shrinker_1104,
    shrinker_1105,
    shrinker_1106,
    shrinker_1107,
    shrinker_1108,
    shrinker_1109){
    var
     _ly_ =
       quickcheck_shrinker$11
        (shrinker_1098,
         shrinker_1099,
         shrinker_1100,
         shrinker_1101,
         shrinker_1102,
         shrinker_1103,
         shrinker_1104,
         shrinker_1105,
         shrinker_1106,
         shrinker_1107,
         shrinker_1108,
         shrinker_1109);
    return caml_call1(Base_quickcheck_Export[42], _ly_);
   }
   function compare_rank$3(t1, t2){
    var
     _lw_ = caml_call1(Variants$3[11], t2),
     _lx_ = caml_call1(Variants$3[11], t1);
    return caml_call2(Base_Int[14], _lx_, _lw_);
   }
   function equal_rank$3(t1, t2){
    var
     _lu_ = caml_call1(Variants$3[11], t2),
     _lv_ = caml_call1(Variants$3[11], t1);
    return caml_call2(Base_Int[13], _lv_, _lu_);
   }
   function get$7(get1, get2, get3, get4, get5, get6, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_6 = from[6],
     from_5 = from[5],
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_6 = to[6],
     to_5 = to[5],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get6, from_6, to_6),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$5 = diff;
    else
     var
      d$4 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$5 = [0, [5, d$4], diff];
    var ppx_optional_e_0$0 = caml_call2(get5, from_5, to_5);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$4 = diff$5;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$4 = [0, [4, d$3], diff$5];
    var ppx_optional_e_0$1 = caml_call2(get4, from_4, to_4);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$2 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$3 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$4 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$4))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$4),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$7
   (apply1_exn,
    apply2_exn,
    apply3_exn,
    apply4_exn,
    apply5_exn,
    apply6_exn,
    derived_on,
    diff){
    var
     derived_on6 = derived_on[6],
     derived_on5 = derived_on[5],
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$4 = diff$0[2],
        d$4 = match$0[1],
        diff$1 = tl$4,
        t2 = caml_call2(apply2_exn, derived_on2, d$4);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$3 = diff$1[2],
        d$3 = match$1[1],
        diff$2 = tl$3,
        t3 = caml_call2(apply3_exn, derived_on3, d$3);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$2 = diff$2[2],
        d$2 = match$2[1],
        diff$3 = tl$2,
        t4 = caml_call2(apply4_exn, derived_on4, d$2);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    a:
    {
     if(diff$3){
      var match$3 = diff$3[1];
      if(4 === match$3[0]){
       var
        tl$1 = diff$3[2],
        d$1 = match$3[1],
        diff$4 = tl$1,
        t5 = caml_call2(apply5_exn, derived_on5, d$1);
       break a;
      }
     }
     var diff$4 = diff$3, t5 = derived_on5;
    }
    a:
    {
     if(diff$4){
      var match$4 = diff$4[1];
      if(5 === match$4[0]){
       var
        tl$0 = diff$4[2],
        d$0 = match$4[1],
        diff$5 = tl$0,
        t6 = caml_call2(apply6_exn, derived_on6, d$0);
       break a;
      }
     }
     var diff$5 = diff$4, t6 = derived_on6;
    }
    return diff$5
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$7)
            : [0, t1, t2, t3, t4, t5, t6];
   }
   function of_list_exn$3
   (of_list1_exn,
    apply1_exn,
    of_list2_exn,
    apply2_exn,
    of_list3_exn,
    apply3_exn,
    of_list4_exn,
    apply4_exn,
    of_list5_exn,
    apply5_exn,
    of_list6_exn,
    apply6_exn,
    ts){
    if(! ts) return Diffable_Optional_diff[1];
    var
     _lg_ = caml_call1(Base_List[11], ts),
     diff = caml_call2(Base_List[84], _lg_, compare_rank$3);
    if(! diff) return caml_call1(Diffable_Optional_diff[2], 0);
    var acc = 0, param = diff;
    for(;;){
     if(! param){
      var _lt_ = caml_call1(Base_List[63], acc);
      return caml_call1(Diffable_Optional_diff[2], _lt_);
     }
     var match = param[1];
     switch(match[0]){
       case 0:
        var
         tl = param[2],
         d = match[1],
         _lh_ = function(param){return 0 === param[0] ? 1 : 0;},
         match$0 = caml_call2(Base_List[143], tl, _lh_),
         tl$0 = match$0[2],
         ds = match$0[1],
         _li_ =
           function(param){
            if(0 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _iZ_], 1);
            var x = param[1];
            return x;
           },
         ds$0 = caml_call2(Base_List[53], ds, _li_),
         ppx_optional_e_0 = caml_call1(of_list1_exn, [0, d, ds$0]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
         var param = tl$0;
        else
         var
          d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
          acc$0 = [0, [0, d$0], acc],
          acc = acc$0,
          param = tl$0;
        break;
       case 1:
        var
         tl$1 = param[2],
         d$1 = match[1],
         _lj_ = function(param){return 1 === param[0] ? 1 : 0;},
         match$1 = caml_call2(Base_List[143], tl$1, _lj_),
         tl$2 = match$1[2],
         ds$1 = match$1[1],
         _lk_ =
           function(param){
            if(1 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _i0_], 1);
            var x = param[1];
            return x;
           },
         ds$2 = caml_call2(Base_List[53], ds$1, _lk_),
         ppx_optional_e_0$0 = caml_call1(of_list2_exn, [0, d$1, ds$2]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
         var param = tl$2;
        else
         var
          d$2 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
          acc$1 = [0, [1, d$2], acc],
          acc = acc$1,
          param = tl$2;
        break;
       case 2:
        var
         tl$3 = param[2],
         d$3 = match[1],
         _ll_ = function(param){return 2 === param[0] ? 1 : 0;},
         match$2 = caml_call2(Base_List[143], tl$3, _ll_),
         tl$4 = match$2[2],
         ds$3 = match$2[1],
         _lm_ =
           function(param){
            if(2 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _i1_], 1);
            var x = param[1];
            return x;
           },
         ds$4 = caml_call2(Base_List[53], ds$3, _lm_),
         ppx_optional_e_0$1 = caml_call1(of_list3_exn, [0, d$3, ds$4]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
         var param = tl$4;
        else
         var
          d$4 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
          acc$2 = [0, [2, d$4], acc],
          acc = acc$2,
          param = tl$4;
        break;
       case 3:
        var
         tl$5 = param[2],
         d$5 = match[1],
         _ln_ = function(param){return 3 === param[0] ? 1 : 0;},
         match$3 = caml_call2(Base_List[143], tl$5, _ln_),
         tl$6 = match$3[2],
         ds$5 = match$3[1],
         _lo_ =
           function(param){
            if(3 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _i2_], 1);
            var x = param[1];
            return x;
           },
         ds$6 = caml_call2(Base_List[53], ds$5, _lo_),
         ppx_optional_e_0$2 = caml_call1(of_list4_exn, [0, d$5, ds$6]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
         var param = tl$6;
        else
         var
          d$6 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
          acc$3 = [0, [3, d$6], acc],
          acc = acc$3,
          param = tl$6;
        break;
       case 4:
        var
         tl$7 = param[2],
         d$7 = match[1],
         _lp_ = function(param){return 4 === param[0] ? 1 : 0;},
         match$4 = caml_call2(Base_List[143], tl$7, _lp_),
         tl$8 = match$4[2],
         ds$7 = match$4[1],
         _lq_ =
           function(param){
            if(4 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _i3_], 1);
            var x = param[1];
            return x;
           },
         ds$8 = caml_call2(Base_List[53], ds$7, _lq_),
         ppx_optional_e_0$3 = caml_call1(of_list5_exn, [0, d$7, ds$8]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
         var param = tl$8;
        else
         var
          d$8 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
          acc$4 = [0, [4, d$8], acc],
          acc = acc$4,
          param = tl$8;
        break;
       default:
        var
         tl$9 = param[2],
         d$9 = match[1],
         _lr_ = function(param){return 5 === param[0] ? 1 : 0;},
         match$5 = caml_call2(Base_List[143], tl$9, _lr_),
         tl$10 = match$5[2],
         ds$9 = match$5[1],
         _ls_ =
           function(param){
            if(5 !== param[0])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _i4_], 1);
            var x = param[1];
            return x;
           },
         ds$10 = caml_call2(Base_List[53], ds$9, _ls_),
         ppx_optional_e_0$4 = caml_call1(of_list6_exn, [0, d$9, ds$10]);
        if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$4))
         var param = tl$10;
        else
         var
          d$10 =
            caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$4),
          acc$5 = [0, [5, d$10], acc],
          acc = acc$5,
          param = tl$10;
     }
    }
   }
   function singleton$3(entry_diff){return [0, entry_diff, 0];}
   function t_of_sexp$17
   (a1_of_sexp,
    a2_of_sexp,
    a3_of_sexp,
    a4_of_sexp,
    a5_of_sexp,
    a6_of_sexp,
    a1_diff_of_sexp,
    a2_diff_of_sexp,
    a3_diff_of_sexp,
    a4_diff_of_sexp,
    a5_diff_of_sexp,
    a6_diff_of_sexp,
    x_1084){
    function _lb_(_lf_){
     return t_of_sexp$16
             (a1_of_sexp,
              a2_of_sexp,
              a3_of_sexp,
              a4_of_sexp,
              a5_of_sexp,
              a6_of_sexp,
              a1_diff_of_sexp,
              a2_diff_of_sexp,
              a3_diff_of_sexp,
              a4_diff_of_sexp,
              a5_diff_of_sexp,
              a6_diff_of_sexp,
              _lf_);
    }
    var
     _lc_ = caml_call2(Base[164], _lb_, x_1084),
     l = caml_call2(Base_List[83], _lc_, compare_rank$3),
     match = caml_call2(Base_List[124], l, equal_rank$3);
    if(! match) return l;
    var
     dup = match[1][1],
     _ld_ = caml_call1(Variants$3[12], dup),
     _le_ = caml_call2(Base[241], cst_Duplicate_entry_in_tuple_d$3, _ld_);
    return caml_call1(Base[244], _le_);
   }
   function create$3(t1, t2, t3, t4, t5, t6, param){
    var diff = 0;
    if(t6) var d = t6[1], diff$0 = [0, [5, d], diff]; else var diff$0 = diff;
    if(t5)
     var d$0 = t5[1], diff$1 = [0, [4, d$0], diff$0];
    else
     var diff$1 = diff$0;
    if(t4)
     var d$1 = t4[1], diff$2 = [0, [3, d$1], diff$1];
    else
     var diff$2 = diff$1;
    if(t3)
     var d$2 = t3[1], diff$3 = [0, [2, d$2], diff$2];
    else
     var diff$3 = diff$2;
    if(t2)
     var d$3 = t2[1], diff$4 = [0, [1, d$3], diff$3];
    else
     var diff$4 = diff$3;
    if(t1)
     var d$4 = t1[1], diff$5 = [0, [0, d$4], diff$4];
    else
     var diff$5 = diff$4;
    return diff$5;
   }
   function create_of_variants$3(t1, t2, t3, t4, t5, t6){
    var ppx_optional_e_0 = caml_call1(t6, Variants$3[6]), diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$5 = diff;
    else
     var
      d$4 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$5 = [0, [5, d$4], diff];
    var ppx_optional_e_0$0 = caml_call1(t5, Variants$3[5]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$4 = diff$5;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$4 = [0, [4, d$3], diff$5];
    var ppx_optional_e_0$1 = caml_call1(t4, Variants$3[4]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$2 = caml_call1(t3, Variants$3[3]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$3 = caml_call1(t2, Variants$3[2]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$4 = caml_call1(t1, Variants$3[1]);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$4))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$4),
      diff$0 = [0, [0, d], diff$1];
    return diff$0;
   }
   function t_of_sexp$18
   (of_a1_1134,
    of_a2_1135,
    of_a3_1136,
    of_a4_1137,
    of_a5_1138,
    of_a6_1139,
    sexp_1153){
    if(1 === sexp_1153[0]){
     var _k7_ = sexp_1153[1];
     if(_k7_){
      var _k8_ = _k7_[2];
      if(_k8_){
       var _k9_ = _k8_[2];
       if(_k9_){
        var _k__ = _k9_[2];
        if(_k__){
         var _k$_ = _k__[2];
         if(_k$_){
          var _la_ = _k$_[2];
          if(_la_ && ! _la_[2]){
           var
            arg5_1146 = _la_[1],
            arg4_1145 = _k$_[1],
            arg3_1144 = _k__[1],
            arg2_1143 = _k9_[1],
            arg1_1142 = _k8_[1],
            arg0_1141 = _k7_[1],
            res0_1147 = caml_call2(Gel[12], of_a1_1134, arg0_1141),
            res1_1148 = caml_call2(Gel[12], of_a2_1135, arg1_1142),
            res2_1149 = caml_call2(Gel[12], of_a3_1136, arg2_1143),
            res3_1150 = caml_call2(Gel[12], of_a4_1137, arg3_1144),
            res4_1151 = caml_call2(Gel[12], of_a5_1138, arg4_1145),
            res5_1152 = caml_call2(Gel[12], of_a6_1139, arg5_1146);
           return [0,
                   res0_1147,
                   res1_1148,
                   res2_1149,
                   res3_1150,
                   res4_1151,
                   res5_1152];
          }
         }
        }
       }
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_1154, 6, sexp_1153);
   }
   function sexp_of_t$18
   (of_a1_1155,
    of_a2_1156,
    of_a3_1157,
    of_a4_1158,
    of_a5_1159,
    of_a6_1160,
    param){
    var
     arg5_1166 = param[6],
     arg4_1165 = param[5],
     arg3_1164 = param[4],
     arg2_1163 = param[3],
     arg1_1162 = param[2],
     arg0_1161 = param[1],
     res0_1167 = caml_call2(Gel[13], of_a1_1155, arg0_1161),
     res1_1168 = caml_call2(Gel[13], of_a2_1156, arg1_1162),
     res2_1169 = caml_call2(Gel[13], of_a3_1157, arg2_1163),
     res3_1170 = caml_call2(Gel[13], of_a4_1158, arg3_1164),
     res4_1171 = caml_call2(Gel[13], of_a5_1159, arg4_1165),
     res5_1172 = caml_call2(Gel[13], of_a6_1160, arg5_1166);
    return [1,
            [0,
             res0_1167,
             [0,
              res1_1168,
              [0,
               res2_1169,
               [0, res3_1170, [0, res4_1171, [0, res5_1172, 0]]]]]]];
   }
   var
    _i5_ = caml_call1(Bin_shape[3][1], cst_a6$4),
    _i6_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_66),
    _i7_ = caml_call2(Bin_prot_Shape[11], _i6_, _i5_),
    _i8_ = [0, caml_call1(Gel[1], _i7_), 0],
    _i9_ = caml_call1(Bin_shape[3][1], cst_a5$13),
    _i__ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_54),
    _i$_ = caml_call2(Bin_prot_Shape[11], _i__, _i9_),
    _ja_ = [0, caml_call1(Gel[1], _i$_), _i8_],
    _jb_ = caml_call1(Bin_shape[3][1], cst_a4$22),
    _jc_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_42),
    _jd_ = caml_call2(Bin_prot_Shape[11], _jc_, _jb_),
    _je_ = [0, caml_call1(Gel[1], _jd_), _ja_],
    _jf_ = caml_call1(Bin_shape[3][1], cst_a3$31),
    _jg_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_30),
    _jh_ = caml_call2(Bin_prot_Shape[11], _jg_, _jf_),
    _ji_ = [0, caml_call1(Gel[1], _jh_), _je_],
    _jj_ = caml_call1(Bin_shape[3][1], cst_a2$40),
    _jk_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_18),
    _jl_ = caml_call2(Bin_prot_Shape[11], _jk_, _jj_),
    _jm_ = [0, caml_call1(Gel[1], _jl_), _ji_],
    _jn_ = caml_call1(Bin_shape[3][1], cst_a1$40),
    _jo_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1635_6),
    _jp_ = caml_call2(Bin_prot_Shape[11], _jo_, _jn_),
    _jq_ = [0, caml_call1(Gel[1], _jp_), _jm_],
    _jr_ = caml_call1(Bin_prot_Shape[3], _jq_),
    _js_ = [0, caml_call1(Bin_shape[3][1], cst_a6$5), 0],
    _jt_ = [0, caml_call1(Bin_shape[3][1], cst_a5$14), _js_],
    _ju_ = [0, caml_call1(Bin_shape[3][1], cst_a4$23), _jt_],
    _jv_ = [0, caml_call1(Bin_shape[3][1], cst_a3$32), _ju_],
    _jw_ = [0, caml_call1(Bin_shape[3][1], cst_a2$41), _jv_],
    _jx_ = [0, caml_call1(Bin_shape[3][1], cst_a1$41), _jw_],
    _jy_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$45), _jx_, _jr_], 0],
    _jz_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1634_4),
    group$22 = caml_call2(Bin_prot_Shape[2], _jz_, _jy_);
   function bin_shape_t$22(a1, a2, a3, a4, a5, a6){
    var _k6_ = caml_call1(Bin_shape[2][1], cst_t$46);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$22, _k6_),
             [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]]);
   }
   function bin_size_t$22
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a6,
    param){
    var
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _k0_ = caml_call2(Gel[2], size_of_a1, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _k0_),
     _k1_ = caml_call2(Gel[2], size_of_a2, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _k1_),
     _k2_ = caml_call2(Gel[2], size_of_a3, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _k2_),
     _k3_ = caml_call2(Gel[2], size_of_a4, v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _k3_),
     _k4_ = caml_call2(Gel[2], size_of_a5, v5),
     size$3 = caml_call2(Bin_prot_Common[23], size$2, _k4_),
     _k5_ = caml_call2(Gel[2], size_of_a6, v6);
    return caml_call2(Bin_prot_Common[23], size$3, _k5_);
   }
   function bin_write_t$22
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a6,
    buf,
    pos,
    param){
    var
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call4(Gel[3], write_a1, buf, pos, v1),
     pos$1 = caml_call4(Gel[3], write_a2, buf, pos$0, v2),
     pos$2 = caml_call4(Gel[3], write_a3, buf, pos$1, v3),
     pos$3 = caml_call4(Gel[3], write_a4, buf, pos$2, v4),
     pos$4 = caml_call4(Gel[3], write_a5, buf, pos$3, v5);
    return caml_call4(Gel[3], write_a6, buf, pos$4, v6);
   }
   function bin_writer_t$22
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a6){
    function _kR_(v){
     var
      _kS_ = bin_writer_a6[2],
      _kT_ = bin_writer_a5[2],
      _kU_ = bin_writer_a4[2],
      _kV_ = bin_writer_a3[2],
      _kW_ = bin_writer_a2[2],
      _kX_ = bin_writer_a1[2];
     return function(_kY_, _kZ_){
      return bin_write_t$22(_kX_, _kW_, _kV_, _kU_, _kT_, _kS_, v, _kY_, _kZ_);};
    }
    return [0,
            function(v){
             return bin_size_t$22
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a6[1],
                      v);
            },
            _kR_];
   }
   function bin_read_t$45
   (of_a1, of_a2, of_a3, of_a4, of_a5, of_a6, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_tuples_ml_Tuple6_F, pos_ref[1]);
   }
   function bin_read_t$46
   (of_a1, of_a2, of_a3, of_a4, of_a5, of_a6, buf, pos_ref){
    var
     v1 = caml_call2(caml_call1(Gel[4], of_a1), buf, pos_ref),
     v2 = caml_call2(caml_call1(Gel[4], of_a2), buf, pos_ref),
     v3 = caml_call2(caml_call1(Gel[4], of_a3), buf, pos_ref),
     v4 = caml_call2(caml_call1(Gel[4], of_a4), buf, pos_ref),
     v5 = caml_call2(caml_call1(Gel[4], of_a5), buf, pos_ref),
     v6 = caml_call2(caml_call1(Gel[4], of_a6), buf, pos_ref);
    return [0, v1, v2, v3, v4, v5, v6];
   }
   function bin_reader_t$22
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a6){
    function _kQ_(buf, pos_ref, vtag){
     return bin_read_t$45
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a6[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$46
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a6[1],
                      buf,
                      pos_ref);
            },
            _kQ_];
   }
   function bin_t$22(bin_a1, bin_a2, bin_a3, bin_a4, bin_a5, bin_a6){
    var
     _kO_ =
       bin_reader_t$22
        (bin_a1[3], bin_a2[3], bin_a3[3], bin_a4[3], bin_a5[3], bin_a6[3]),
     _kP_ =
       bin_writer_t$22
        (bin_a1[2], bin_a2[2], bin_a3[2], bin_a4[2], bin_a5[2], bin_a6[2]);
    return [0,
            bin_shape_t$22
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a6[1]),
            _kP_,
            _kO_];
   }
   var
    _jA_ = caml_call1(Bin_shape[3][1], cst_a6_diff$3),
    _jB_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1665_10),
    _jC_ = caml_call2(Bin_prot_Shape[11], _jB_, _jA_),
    _jD_ = caml_call1(Bin_shape[3][1], cst_a5_diff$9),
    _jE_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1664_10),
    _jF_ = caml_call2(Bin_prot_Shape[11], _jE_, _jD_),
    _jG_ = caml_call1(Bin_shape[3][1], cst_a4_diff$15),
    _jH_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1663_10),
    _jI_ = caml_call2(Bin_prot_Shape[11], _jH_, _jG_),
    _jJ_ = caml_call1(Bin_shape[3][1], cst_a3_diff$21),
    _jK_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1662_10),
    _jL_ = caml_call2(Bin_prot_Shape[11], _jK_, _jJ_),
    _jM_ = caml_call1(Bin_shape[3][1], cst_a2_diff$27),
    _jN_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1661_10),
    _jO_ = caml_call2(Bin_prot_Shape[11], _jN_, _jM_),
    _jP_ = caml_call1(Bin_shape[3][1], cst_a1_diff$27),
    _jQ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1660_10),
    _jR_ = caml_call2(Bin_prot_Shape[11], _jQ_, _jP_),
    _jS_ = caml_call1(Bin_shape[3][1], cst_a6$6),
    _jT_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1659_10),
    _jU_ = caml_call2(Bin_prot_Shape[11], _jT_, _jS_),
    _jV_ = caml_call1(Bin_shape[3][1], cst_a5$15),
    _jW_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1658_10),
    _jX_ = caml_call2(Bin_prot_Shape[11], _jW_, _jV_),
    _jY_ = caml_call1(Bin_shape[3][1], cst_a4$24),
    _jZ_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1657_10),
    _j0_ = caml_call2(Bin_prot_Shape[11], _jZ_, _jY_),
    _j1_ = caml_call1(Bin_shape[3][1], cst_a3$33),
    _j2_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1656_10),
    _j3_ = caml_call2(Bin_prot_Shape[11], _j2_, _j1_),
    _j4_ = caml_call1(Bin_shape[3][1], cst_a2$42),
    _j5_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1655_10),
    _j6_ = caml_call2(Bin_prot_Shape[11], _j5_, _j4_),
    _j7_ = caml_call1(Bin_shape[3][1], cst_a1$42),
    _j8_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1654_10),
    _kl_ =
      bin_shape_t$21
       (caml_call2(Bin_prot_Shape[11], _j8_, _j7_),
        _j6_,
        _j3_,
        _j0_,
        _jX_,
        _jU_,
        _jR_,
        _jO_,
        _jL_,
        _jI_,
        _jF_,
        _jC_),
    _j9_ = [0, caml_call1(Bin_shape[3][1], cst_a6_diff$4), 0],
    _j__ = [0, caml_call1(Bin_shape[3][1], cst_a5_diff$10), _j9_],
    _j$_ = [0, caml_call1(Bin_shape[3][1], cst_a4_diff$16), _j__],
    _ka_ = [0, caml_call1(Bin_shape[3][1], cst_a3_diff$22), _j$_],
    _kb_ = [0, caml_call1(Bin_shape[3][1], cst_a2_diff$28), _ka_],
    _kc_ = [0, caml_call1(Bin_shape[3][1], cst_a1_diff$28), _kb_],
    _kd_ = [0, caml_call1(Bin_shape[3][1], cst_a6$7), _kc_],
    _ke_ = [0, caml_call1(Bin_shape[3][1], cst_a5$16), _kd_],
    _kf_ = [0, caml_call1(Bin_shape[3][1], cst_a4$25), _ke_],
    _kg_ = [0, caml_call1(Bin_shape[3][1], cst_a3$34), _kf_],
    _kh_ = [0, caml_call1(Bin_shape[3][1], cst_a2$43), _kg_],
    _ki_ = [0, caml_call1(Bin_shape[3][1], cst_a1$43), _kh_],
    _kj_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$47), _ki_, _kl_], 0],
    _kk_ = caml_call1(Bin_shape[4][1], cst_lib_src_tuples_ml_1641_6),
    group$23 = caml_call2(Bin_prot_Shape[2], _kk_, _kj_);
   function bin_shape_t$23
   (a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a1_diff,
    a2_diff,
    a3_diff,
    a4_diff,
    a5_diff,
    a6_diff){
    var _kN_ = caml_call1(Bin_shape[2][1], cst_t$48);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$23, _kN_),
             [0,
              a1,
              [0,
               a2,
               [0,
                a3,
                [0,
                 a4,
                 [0,
                  a5,
                  [0,
                   a6,
                   [0,
                    a1_diff,
                    [0,
                     a2_diff,
                     [0, a3_diff, [0, a4_diff, [0, a5_diff, [0, a6_diff, 0]]]]]]]]]]]]);
   }
   function bin_size_t$23
   (size_of_a1,
    size_of_a2,
    size_of_a3,
    size_of_a4,
    size_of_a5,
    size_of_a6,
    size_of_a1_diff,
    size_of_a2_diff,
    size_of_a3_diff,
    size_of_a4_diff,
    size_of_a5_diff,
    size_of_a6_diff,
    v){
    return bin_size_t$21
            (size_of_a1,
             size_of_a2,
             size_of_a3,
             size_of_a4,
             size_of_a5,
             size_of_a6,
             size_of_a1_diff,
             size_of_a2_diff,
             size_of_a3_diff,
             size_of_a4_diff,
             size_of_a5_diff,
             size_of_a6_diff,
             v);
   }
   function bin_write_t$23
   (write_a1,
    write_a2,
    write_a3,
    write_a4,
    write_a5,
    write_a6,
    write_a1_diff,
    write_a2_diff,
    write_a3_diff,
    write_a4_diff,
    write_a5_diff,
    write_a6_diff,
    buf,
    pos,
    v){
    return bin_write_t$21
            (write_a1,
             write_a2,
             write_a3,
             write_a4,
             write_a5,
             write_a6,
             write_a1_diff,
             write_a2_diff,
             write_a3_diff,
             write_a4_diff,
             write_a5_diff,
             write_a6_diff,
             buf,
             pos,
             v);
   }
   function bin_writer_t$23
   (bin_writer_a1,
    bin_writer_a2,
    bin_writer_a3,
    bin_writer_a4,
    bin_writer_a5,
    bin_writer_a6,
    bin_writer_a1_diff,
    bin_writer_a2_diff,
    bin_writer_a3_diff,
    bin_writer_a4_diff,
    bin_writer_a5_diff,
    bin_writer_a6_diff){
    function _ky_(v){
     var
      _kz_ = bin_writer_a6_diff[2],
      _kA_ = bin_writer_a5_diff[2],
      _kB_ = bin_writer_a4_diff[2],
      _kC_ = bin_writer_a3_diff[2],
      _kD_ = bin_writer_a2_diff[2],
      _kE_ = bin_writer_a1_diff[2],
      _kF_ = bin_writer_a6[2],
      _kG_ = bin_writer_a5[2],
      _kH_ = bin_writer_a4[2],
      _kI_ = bin_writer_a3[2],
      _kJ_ = bin_writer_a2[2],
      _kK_ = bin_writer_a1[2];
     return function(_kL_, _kM_){
      return bin_write_t$23
              (_kK_,
               _kJ_,
               _kI_,
               _kH_,
               _kG_,
               _kF_,
               _kE_,
               _kD_,
               _kC_,
               _kB_,
               _kA_,
               _kz_,
               v,
               _kL_,
               _kM_);};
    }
    return [0,
            function(v){
             return bin_size_t$23
                     (bin_writer_a1[1],
                      bin_writer_a2[1],
                      bin_writer_a3[1],
                      bin_writer_a4[1],
                      bin_writer_a5[1],
                      bin_writer_a6[1],
                      bin_writer_a1_diff[1],
                      bin_writer_a2_diff[1],
                      bin_writer_a3_diff[1],
                      bin_writer_a4_diff[1],
                      bin_writer_a5_diff[1],
                      bin_writer_a6_diff[1],
                      v);
            },
            _ky_];
   }
   function bin_read_t$47
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref,
    vint){
    return bin_read_t$43
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a5,
             of_a6,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             of_a5_diff,
             of_a6_diff,
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$48
   (of_a1,
    of_a2,
    of_a3,
    of_a4,
    of_a5,
    of_a6,
    of_a1_diff,
    of_a2_diff,
    of_a3_diff,
    of_a4_diff,
    of_a5_diff,
    of_a6_diff,
    buf,
    pos_ref){
    return bin_read_t$44
            (of_a1,
             of_a2,
             of_a3,
             of_a4,
             of_a5,
             of_a6,
             of_a1_diff,
             of_a2_diff,
             of_a3_diff,
             of_a4_diff,
             of_a5_diff,
             of_a6_diff,
             buf,
             pos_ref);
   }
   function bin_reader_t$23
   (bin_reader_a1,
    bin_reader_a2,
    bin_reader_a3,
    bin_reader_a4,
    bin_reader_a5,
    bin_reader_a6,
    bin_reader_a1_diff,
    bin_reader_a2_diff,
    bin_reader_a3_diff,
    bin_reader_a4_diff,
    bin_reader_a5_diff,
    bin_reader_a6_diff){
    function _kx_(buf, pos_ref, vtag){
     return bin_read_t$47
             (bin_reader_a1[1],
              bin_reader_a2[1],
              bin_reader_a3[1],
              bin_reader_a4[1],
              bin_reader_a5[1],
              bin_reader_a6[1],
              bin_reader_a1_diff[1],
              bin_reader_a2_diff[1],
              bin_reader_a3_diff[1],
              bin_reader_a4_diff[1],
              bin_reader_a5_diff[1],
              bin_reader_a6_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$48
                     (bin_reader_a1[1],
                      bin_reader_a2[1],
                      bin_reader_a3[1],
                      bin_reader_a4[1],
                      bin_reader_a5[1],
                      bin_reader_a6[1],
                      bin_reader_a1_diff[1],
                      bin_reader_a2_diff[1],
                      bin_reader_a3_diff[1],
                      bin_reader_a4_diff[1],
                      bin_reader_a5_diff[1],
                      bin_reader_a6_diff[1],
                      buf,
                      pos_ref);
            },
            _kx_];
   }
   function bin_t$23
   (bin_a1,
    bin_a2,
    bin_a3,
    bin_a4,
    bin_a5,
    bin_a6,
    bin_a1_diff,
    bin_a2_diff,
    bin_a3_diff,
    bin_a4_diff,
    bin_a5_diff,
    bin_a6_diff){
    var
     _kv_ =
       bin_reader_t$23
        (bin_a1[3],
         bin_a2[3],
         bin_a3[3],
         bin_a4[3],
         bin_a5[3],
         bin_a6[3],
         bin_a1_diff[3],
         bin_a2_diff[3],
         bin_a3_diff[3],
         bin_a4_diff[3],
         bin_a5_diff[3],
         bin_a6_diff[3]),
     _kw_ =
       bin_writer_t$23
        (bin_a1[2],
         bin_a2[2],
         bin_a3[2],
         bin_a4[2],
         bin_a5[2],
         bin_a6[2],
         bin_a1_diff[2],
         bin_a2_diff[2],
         bin_a3_diff[2],
         bin_a4_diff[2],
         bin_a5_diff[2],
         bin_a6_diff[2]);
    return [0,
            bin_shape_t$23
             (bin_a1[1],
              bin_a2[1],
              bin_a3[1],
              bin_a4[1],
              bin_a5[1],
              bin_a6[1],
              bin_a1_diff[1],
              bin_a2_diff[1],
              bin_a3_diff[1],
              bin_a4_diff[1],
              bin_a5_diff[1],
              bin_a6_diff[1]),
            _kw_,
            _kv_];
   }
   function quickcheck_generator$13
   (generator_1224,
    generator_1225,
    generator_1226,
    generator_1227,
    generator_1228,
    generator_1229,
    generator_1230,
    generator_1231,
    generator_1232,
    generator_1233,
    generator_1234,
    generator_1235){
    return quickcheck_generator$12
            (generator_1224,
             generator_1225,
             generator_1226,
             generator_1227,
             generator_1228,
             generator_1229,
             generator_1230,
             generator_1231,
             generator_1232,
             generator_1233,
             generator_1234,
             generator_1235);
   }
   function quickcheck_observer$13
   (observer_1212,
    observer_1213,
    observer_1214,
    observer_1215,
    observer_1216,
    observer_1217,
    observer_1218,
    observer_1219,
    observer_1220,
    observer_1221,
    observer_1222,
    observer_1223){
    return quickcheck_observer$12
            (observer_1212,
             observer_1213,
             observer_1214,
             observer_1215,
             observer_1216,
             observer_1217,
             observer_1218,
             observer_1219,
             observer_1220,
             observer_1221,
             observer_1222,
             observer_1223);
   }
   function quickcheck_shrinker$13
   (shrinker_1200,
    shrinker_1201,
    shrinker_1202,
    shrinker_1203,
    shrinker_1204,
    shrinker_1205,
    shrinker_1206,
    shrinker_1207,
    shrinker_1208,
    shrinker_1209,
    shrinker_1210,
    shrinker_1211){
    return quickcheck_shrinker$12
            (shrinker_1200,
             shrinker_1201,
             shrinker_1202,
             shrinker_1203,
             shrinker_1204,
             shrinker_1205,
             shrinker_1206,
             shrinker_1207,
             shrinker_1208,
             shrinker_1209,
             shrinker_1210,
             shrinker_1211);
   }
   function get$8(get1, get2, get3, get4, get5, get6, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    var
     from_6 = from[6],
     from_5 = from[5],
     from_4 = from[4],
     from_3 = from[3],
     from_2 = from[2],
     from_1 = from[1],
     to_6 = to[6],
     to_5 = to[5],
     to_4 = to[4],
     to_3 = to[3],
     to_2 = to[2],
     to_1 = to[1],
     ppx_optional_e_0 = caml_call2(get6, from_6, to_6),
     diff = 0;
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0))
     var diff$5 = diff;
    else
     var
      d$4 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0),
      diff$5 = [0, [5, d$4], diff];
    var ppx_optional_e_0$0 = caml_call2(get5, from_5, to_5);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$0))
     var diff$4 = diff$5;
    else
     var
      d$3 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$0),
      diff$4 = [0, [4, d$3], diff$5];
    var ppx_optional_e_0$1 = caml_call2(get4, from_4, to_4);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$1))
     var diff$3 = diff$4;
    else
     var
      d$2 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$1),
      diff$3 = [0, [3, d$2], diff$4];
    var ppx_optional_e_0$2 = caml_call2(get3, from_3, to_3);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$2))
     var diff$2 = diff$3;
    else
     var
      d$1 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$2),
      diff$2 = [0, [2, d$1], diff$3];
    var ppx_optional_e_0$3 = caml_call2(get2, from_2, to_2);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$3))
     var diff$1 = diff$2;
    else
     var
      d$0 = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$3),
      diff$1 = [0, [1, d$0], diff$2];
    var ppx_optional_e_0$4 = caml_call2(get1, from_1, to_1);
    if(caml_call1(Diffable_Optional_diff[11][1][1], ppx_optional_e_0$4))
     var diff$0 = diff$1;
    else
     var
      d = caml_call1(Diffable_Optional_diff[11][1][2], ppx_optional_e_0$4),
      diff$0 = [0, [0, d], diff$1];
    return diff$0
            ? caml_call1(Diffable_Optional_diff[2], diff$0)
            : Diffable_Optional_diff[1];
   }
   function apply_exn$8
   (apply1_exn,
    apply2_exn,
    apply3_exn,
    apply4_exn,
    apply5_exn,
    apply6_exn,
    derived_on,
    diff){
    var
     derived_on6 = derived_on[6],
     derived_on5 = derived_on[5],
     derived_on4 = derived_on[4],
     derived_on3 = derived_on[3],
     derived_on2 = derived_on[2],
     derived_on1 = derived_on[1];
    a:
    {
     if(diff){
      var match = diff[1];
      if(0 === match[0]){
       var
        tl = diff[2],
        d = match[1],
        diff$0 = tl,
        t1 = caml_call2(apply1_exn, derived_on1, d);
       break a;
      }
     }
     var diff$0 = diff, t1 = derived_on1;
    }
    a:
    {
     if(diff$0){
      var match$0 = diff$0[1];
      if(1 === match$0[0]){
       var
        tl$4 = diff$0[2],
        d$4 = match$0[1],
        diff$1 = tl$4,
        t2 = caml_call2(apply2_exn, derived_on2, d$4);
       break a;
      }
     }
     var diff$1 = diff$0, t2 = derived_on2;
    }
    a:
    {
     if(diff$1){
      var match$1 = diff$1[1];
      if(2 === match$1[0]){
       var
        tl$3 = diff$1[2],
        d$3 = match$1[1],
        diff$2 = tl$3,
        t3 = caml_call2(apply3_exn, derived_on3, d$3);
       break a;
      }
     }
     var diff$2 = diff$1, t3 = derived_on3;
    }
    a:
    {
     if(diff$2){
      var match$2 = diff$2[1];
      if(3 === match$2[0]){
       var
        tl$2 = diff$2[2],
        d$2 = match$2[1],
        diff$3 = tl$2,
        t4 = caml_call2(apply4_exn, derived_on4, d$2);
       break a;
      }
     }
     var diff$3 = diff$2, t4 = derived_on4;
    }
    a:
    {
     if(diff$3){
      var match$3 = diff$3[1];
      if(4 === match$3[0]){
       var
        tl$1 = diff$3[2],
        d$1 = match$3[1],
        diff$4 = tl$1,
        t5 = caml_call2(apply5_exn, derived_on5, d$1);
       break a;
      }
     }
     var diff$4 = diff$3, t5 = derived_on5;
    }
    a:
    {
     if(diff$4){
      var match$4 = diff$4[1];
      if(5 === match$4[0]){
       var
        tl$0 = diff$4[2],
        d$0 = match$4[1],
        diff$5 = tl$0,
        t6 = caml_call2(apply6_exn, derived_on6, d$0);
       break a;
      }
     }
     var diff$5 = diff$4, t6 = derived_on6;
    }
    return diff$5
            ? caml_call1(Base[244], cst_BUG_non_empty_diff_after_a$8)
            : [0, t1, t2, t3, t4, t5, t6];
   }
   var max_supported = Diffable_cinaps_Tuple_helpers[1];
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Tuples);
   var
    Diffable_Tuples =
      [0,
       max_supported,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        [0,
         [0,
          t1,
          t2,
          is_t1,
          is_t2,
          t1_val,
          t2_val,
          Variants,
          sexp_of_t$0,
          t_of_sexp$0,
          bin_shape_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_writer_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_reader_t$0,
          bin_t$0,
          quickcheck_generator,
          quickcheck_observer,
          quickcheck_shrinker],
         sexp_of_t$1,
         t_of_sexp$1,
         bin_shape_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_writer_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_reader_t$1,
         bin_t$1,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0,
         get,
         apply_exn,
         of_list_exn,
         singleton,
         create,
         create_of_variants],
        [0,
         t_of_sexp$2,
         sexp_of_t$2,
         bin_shape_t$2,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         [0,
          sexp_of_t$1,
          t_of_sexp$1,
          bin_shape_t$3,
          bin_size_t$3,
          bin_write_t$3,
          bin_writer_t$3,
          bin_read_t$8,
          bin_read_t$7,
          bin_reader_t$3,
          bin_t$3,
          quickcheck_generator$1,
          quickcheck_observer$1,
          quickcheck_shrinker$1,
          get$0,
          apply_exn$0,
          of_list_exn]]],
       [0,
        t_of_sexp$3,
        sexp_of_t$3,
        bin_shape_t$4,
        bin_size_t$4,
        bin_write_t$4,
        bin_read_t$10,
        bin_read_t$9,
        bin_writer_t$4,
        bin_reader_t$4,
        bin_t$4,
        [0,
         [0,
          t1$1,
          t2$1,
          t3,
          is_t1$0,
          is_t2$0,
          is_t3,
          t1_val$0,
          t2_val$0,
          t3_val,
          Variants$0,
          sexp_of_t$4,
          t_of_sexp$4,
          bin_shape_t$5,
          bin_size_t$5,
          bin_write_t$5,
          bin_writer_t$5,
          bin_read_t$12,
          bin_read_t$11,
          bin_reader_t$5,
          bin_t$5,
          quickcheck_generator$2,
          quickcheck_observer$2,
          quickcheck_shrinker$2],
         sexp_of_t$5,
         t_of_sexp$5,
         bin_shape_t$6,
         bin_size_t$6,
         bin_write_t$6,
         bin_writer_t$6,
         bin_read_t$14,
         bin_read_t$13,
         bin_reader_t$6,
         bin_t$6,
         quickcheck_generator$3,
         quickcheck_observer$3,
         quickcheck_shrinker$3,
         get$1,
         apply_exn$1,
         of_list_exn$0,
         singleton$0,
         create$0,
         create_of_variants$0],
        [0,
         t_of_sexp$6,
         sexp_of_t$6,
         bin_shape_t$7,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$16,
         bin_read_t$15,
         bin_writer_t$7,
         bin_reader_t$7,
         bin_t$7,
         [0,
          sexp_of_t$5,
          t_of_sexp$5,
          bin_shape_t$8,
          bin_size_t$8,
          bin_write_t$8,
          bin_writer_t$8,
          bin_read_t$18,
          bin_read_t$17,
          bin_reader_t$8,
          bin_t$8,
          quickcheck_generator$4,
          quickcheck_observer$4,
          quickcheck_shrinker$4,
          get$2,
          apply_exn$2,
          of_list_exn$0]]],
       [0,
        sexp_of_t$7,
        t_of_sexp$7,
        bin_shape_t$9,
        bin_size_t$9,
        bin_write_t$9,
        bin_writer_t$9,
        bin_read_t$20,
        bin_read_t$19,
        bin_reader_t$9,
        bin_t$9,
        [0,
         [0,
          t1$3,
          t2$3,
          t3$1,
          t4,
          is_t1$1,
          is_t2$1,
          is_t3$0,
          is_t4,
          t1_val$1,
          t2_val$1,
          t3_val$0,
          t4_val,
          Variants$1,
          sexp_of_t$8,
          t_of_sexp$8,
          bin_shape_t$10,
          bin_size_t$10,
          bin_write_t$10,
          bin_writer_t$10,
          bin_read_t$22,
          bin_read_t$21,
          bin_reader_t$10,
          bin_t$10,
          quickcheck_generator$5,
          quickcheck_observer$5,
          quickcheck_shrinker$5],
         sexp_of_t$9,
         t_of_sexp$9,
         bin_shape_t$11,
         bin_size_t$11,
         bin_write_t$11,
         bin_writer_t$11,
         bin_read_t$24,
         bin_read_t$23,
         bin_reader_t$11,
         bin_t$11,
         quickcheck_generator$6,
         quickcheck_observer$6,
         quickcheck_shrinker$6,
         get$3,
         apply_exn$3,
         of_list_exn$1,
         singleton$1,
         create$1,
         create_of_variants$1],
        [0,
         sexp_of_t$10,
         t_of_sexp$10,
         bin_shape_t$12,
         bin_size_t$12,
         bin_write_t$12,
         bin_writer_t$12,
         bin_read_t$26,
         bin_read_t$25,
         bin_reader_t$12,
         bin_t$12,
         [0,
          sexp_of_t$9,
          t_of_sexp$9,
          bin_shape_t$13,
          bin_size_t$13,
          bin_write_t$13,
          bin_writer_t$13,
          bin_read_t$28,
          bin_read_t$27,
          bin_reader_t$13,
          bin_t$13,
          quickcheck_generator$7,
          quickcheck_observer$7,
          quickcheck_shrinker$7,
          get$4,
          apply_exn$4,
          of_list_exn$1]]],
       [0,
        sexp_of_t$11,
        t_of_sexp$11,
        bin_shape_t$14,
        bin_size_t$14,
        bin_write_t$14,
        bin_writer_t$14,
        bin_read_t$30,
        bin_read_t$29,
        bin_reader_t$14,
        bin_t$14,
        [0,
         [0,
          t1$5,
          t2$5,
          t3$3,
          t4$1,
          t5,
          is_t1$2,
          is_t2$2,
          is_t3$1,
          is_t4$0,
          is_t5,
          t1_val$2,
          t2_val$2,
          t3_val$1,
          t4_val$0,
          t5_val,
          Variants$2,
          sexp_of_t$12,
          t_of_sexp$12,
          bin_shape_t$15,
          bin_size_t$15,
          bin_write_t$15,
          bin_writer_t$15,
          bin_read_t$32,
          bin_read_t$31,
          bin_reader_t$15,
          bin_t$15,
          quickcheck_generator$8,
          quickcheck_observer$8,
          quickcheck_shrinker$8],
         sexp_of_t$13,
         t_of_sexp$13,
         bin_shape_t$16,
         bin_size_t$16,
         bin_write_t$16,
         bin_writer_t$16,
         bin_read_t$34,
         bin_read_t$33,
         bin_reader_t$16,
         bin_t$16,
         quickcheck_generator$9,
         quickcheck_observer$9,
         quickcheck_shrinker$9,
         get$5,
         apply_exn$5,
         of_list_exn$2,
         singleton$2,
         create$2,
         create_of_variants$2],
        [0,
         sexp_of_t$14,
         t_of_sexp$14,
         bin_shape_t$17,
         bin_size_t$17,
         bin_write_t$17,
         bin_writer_t$17,
         bin_read_t$36,
         bin_read_t$35,
         bin_reader_t$17,
         bin_t$17,
         [0,
          sexp_of_t$13,
          t_of_sexp$13,
          bin_shape_t$18,
          bin_size_t$18,
          bin_write_t$18,
          bin_writer_t$18,
          bin_read_t$38,
          bin_read_t$37,
          bin_reader_t$18,
          bin_t$18,
          quickcheck_generator$10,
          quickcheck_observer$10,
          quickcheck_shrinker$10,
          get$6,
          apply_exn$6,
          of_list_exn$2]]],
       [0,
        sexp_of_t$15,
        t_of_sexp$15,
        bin_shape_t$19,
        bin_size_t$19,
        bin_write_t$19,
        bin_writer_t$19,
        bin_read_t$40,
        bin_read_t$39,
        bin_reader_t$19,
        bin_t$19,
        [0,
         [0,
          t1$7,
          t2$7,
          t3$5,
          t4$3,
          t5$1,
          t6,
          is_t1$3,
          is_t2$3,
          is_t3$2,
          is_t4$1,
          is_t5$0,
          is_t6,
          t1_val$3,
          t2_val$3,
          t3_val$2,
          t4_val$1,
          t5_val$0,
          t6_val,
          Variants$3,
          sexp_of_t$16,
          t_of_sexp$16,
          bin_shape_t$20,
          bin_size_t$20,
          bin_write_t$20,
          bin_writer_t$20,
          bin_read_t$42,
          bin_read_t$41,
          bin_reader_t$20,
          bin_t$20,
          quickcheck_generator$11,
          quickcheck_observer$11,
          quickcheck_shrinker$11],
         sexp_of_t$17,
         t_of_sexp$17,
         bin_shape_t$21,
         bin_size_t$21,
         bin_write_t$21,
         bin_writer_t$21,
         bin_read_t$44,
         bin_read_t$43,
         bin_reader_t$21,
         bin_t$21,
         quickcheck_generator$12,
         quickcheck_observer$12,
         quickcheck_shrinker$12,
         get$7,
         apply_exn$7,
         of_list_exn$3,
         singleton$3,
         create$3,
         create_of_variants$3],
        [0,
         sexp_of_t$18,
         t_of_sexp$18,
         bin_shape_t$22,
         bin_size_t$22,
         bin_write_t$22,
         bin_writer_t$22,
         bin_read_t$46,
         bin_read_t$45,
         bin_reader_t$22,
         bin_t$22,
         [0,
          sexp_of_t$17,
          t_of_sexp$17,
          bin_shape_t$23,
          bin_size_t$23,
          bin_write_t$23,
          bin_writer_t$23,
          bin_read_t$48,
          bin_read_t$47,
          bin_reader_t$23,
          bin_t$23,
          quickcheck_generator$13,
          quickcheck_observer$13,
          quickcheck_shrinker$13,
          get$8,
          apply_exn$8,
          of_list_exn$3]]]];
   runtime.caml_register_global(800, Diffable_Tuples, cst_Diffable_Tuples$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Diff_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Diff_intf = "Diffable__Diff_intf",
    cst_diffable = "diffable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Diff_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/diff_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable, "diff_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Diff_intf);
   var Diffable_Diff_intf = [0];
   runtime.caml_register_global
    (11, Diffable_Diff_intf, cst_Diffable_Diff_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Set_diff
//# unitInfo: Requires: Base, Base__List, Base__Sequence, Base__Set, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Diffable__Optional_diff, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Add = "Add",
    cst_Diffable_Set_diff$0 = "Diffable__Set_diff",
    cst_Remove = "Remove",
    cst_a$1 = "a",
    cst_add = "add",
    cst_diffable$0 = "diffable",
    cst_lib_src_set_diff_ml_Stable = "lib/src/set_diff.ml.Stable.V1.Change.t",
    cst_remove = "remove",
    cst_t$2 = "t",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_004 = cst_lib_src_set_diff_ml_Stable,
    Base_List = global_data.Base__List,
    Diffable_Optional_diff = global_data.Diffable__Optional_diff,
    Base_Set = global_data.Base__Set,
    Base_Sequence = global_data.Base__Sequence,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Base = global_data.Base,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Set_diff$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/set_diff.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "set_diff.ml");
   var
    _c_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _d_ = caml_call1(Bin_shape[4][1], "lib/src/set_diff.ml:9:20"),
    _e_ =
      [0,
       [0, cst_Remove, [0, caml_call2(Bin_prot_Shape[11], _d_, _c_), 0]],
       0],
    _f_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _g_ = caml_call1(Bin_shape[4][1], "lib/src/set_diff.ml:8:17"),
    _h_ =
      [0, [0, cst_Add, [0, caml_call2(Bin_prot_Shape[11], _g_, _f_), 0]], _e_],
    _i_ = caml_call1(Bin_prot_Shape[5], _h_),
    _j_ = [0, caml_call1(Bin_shape[3][1], cst_a$1), 0],
    _k_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$2), _j_, _i_], 0],
    _l_ = caml_call1(Bin_shape[4][1], "lib/src/set_diff.ml:7:6"),
    group = caml_call2(Bin_prot_Shape[2], _l_, _k_),
    cst_t$1 = cst_t$2,
    _o_ = [1, cst_lib_src_set_diff_ml_Stable],
    cst_t = cst_t$2,
    _a_ = [0, cst_Add],
    _b_ = [0, cst_Remove],
    cst_a = cst_a$1,
    cst_lib_src_set_diff_ml_13_16 = "lib/src/set_diff.ml:13:16",
    cst_a$0 = cst_a$1,
    cst_t$0 = cst_t$2,
    cst_lib_src_set_diff_ml_13_4 = "lib/src/set_diff.ml:13:4",
    cst_diffable = cst_diffable$0,
    cst_Diffable_Set_diff = cst_Diffable_Set_diff$0;
   function bin_read_t(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _o_, pos_ref[1]);
    var arg_1$0 = caml_call2(of_a, buf, pos_ref);
    return [1, arg_1$0];
   }
   function t_of_sexp(of_a_023, x_025){
    function _T_(sexp_006){
     a:
     {
      if(0 === sexp_006[0]){
       var _U_ = sexp_006[1];
       b:
       if(caml_string_notequal(_U_, cst_Add)){
        if(caml_string_notequal(_U_, cst_Remove)){
         if(! caml_string_notequal(_U_, cst_add)) break b;
         if(caml_string_notequal(_U_, cst_remove)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_004, sexp_006);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_004, sexp_006);
      }
      var _V_ = sexp_006[1];
      if(! _V_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_004, sexp_006);
      var _W_ = _V_[1];
      if(0 !== _W_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_004, sexp_006);
      var tag_007 = _W_[1];
      b:
      if(caml_string_notequal(tag_007, cst_Add)){
       if(caml_string_notequal(tag_007, cst_Remove)){
        if(! caml_string_notequal(tag_007, cst_add)) break b;
        if(caml_string_notequal(tag_007, cst_remove)) break a;
       }
       var sexp_args_013 = _V_[2];
       if(sexp_args_013 && ! sexp_args_013[2]){
        var
         arg0_014 = sexp_args_013[1],
         res0_015 = caml_call1(of_a_023, arg0_014);
        return [1, res0_015];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_004,
                tag_007,
                sexp_006);
      }
      var sexp_args_008 = _V_[2];
      if(sexp_args_008 && ! sexp_args_008[2]){
       var
        arg0_009 = sexp_args_008[1],
        res0_010 = caml_call1(of_a_023, arg0_009);
       return [0, res0_010];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_004,
               tag_007,
               sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_004, sexp_006);
    }
    return caml_call2(Base[164], _T_, x_025);
   }
   function sexp_of_t(of_a_026, x_027){
    function _S_(param){
     if(0 === param[0]){
      var arg0_018 = param[1], res0_019 = caml_call1(of_a_026, arg0_018);
      return [1, [0, _a_, [0, res0_019, 0]]];
     }
     var arg0_020 = param[1], res0_021 = caml_call1(of_a_026, arg0_020);
     return [1, [0, _b_, [0, res0_021, 0]]];
    }
    return caml_call2(Base[165], _S_, x_027);
   }
   var
    _p_ = caml_call1(Bin_shape[3][1], cst_a),
    _q_ = caml_call1(Bin_shape[4][1], cst_lib_src_set_diff_ml_13_16),
    a = caml_call2(Bin_prot_Shape[11], _q_, _p_),
    _m_ = caml_call1(Bin_shape[2][1], cst_t),
    _n_ = caml_call1(caml_call2(Bin_prot_Shape[10], group, _m_), [0, a, 0]),
    _r_ = caml_call1(Bin_prot_Std[203], _n_),
    _s_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _t_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _s_, _r_], 0],
    _u_ = caml_call1(Bin_shape[4][1], cst_lib_src_set_diff_ml_13_4),
    group$0 = caml_call2(Bin_prot_Shape[2], _u_, _t_);
   function bin_shape_t(a){
    var _R_ = caml_call1(Bin_shape[2][1], cst_t$1);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _R_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, v){
    function _O_(param){
     if(0 === param[0]){
      var v1 = param[1], _P_ = caml_call1(size_of_a, v1);
      return caml_call2(Bin_prot_Common[23], 1, _P_);
     }
     var v1$0 = param[1], _Q_ = caml_call1(size_of_a, v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _Q_);
    }
    return caml_call2(Bin_prot_Std[18], _O_, v);
   }
   function bin_write_t(write_a, buf, pos, v){
    function _N_(buf, pos$1, param){
     if(0 === param[0]){
      var v1 = param[1], pos = caml_call3(Bin_prot_Write[30], buf, pos$1, 0);
      return caml_call3(write_a, buf, pos, v1);
     }
     var
      v1$0 = param[1],
      pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$1, 1);
     return caml_call3(write_a, buf, pos$0, v1$0);
    }
    return caml_call4(Bin_prot_Std[205], _N_, buf, pos, v);
   }
   function bin_writer_t(bin_writer_a){
    function _J_(v){
     var _K_ = bin_writer_a[2];
     return function(_L_, _M_){return bin_write_t(_K_, v, _L_, _M_);};
    }
    return [0, function(v){return bin_size_t(bin_writer_a[1], v);}, _J_];
   }
   function bin_read_t$0(of_a, buf, pos_ref, vint){
    function _G_(_H_, _I_){return bin_read_t(of_a, _H_, _I_);}
    return caml_call3(caml_call1(Bin_prot_Std[209], _G_), buf, pos_ref, vint);
   }
   function bin_read_t$1(of_a, buf, pos_ref){
    function _D_(_E_, _F_){return bin_read_t(of_a, _E_, _F_);}
    return caml_call2(caml_call1(Bin_prot_Std[208], _D_), buf, pos_ref);
   }
   function bin_reader_t(bin_reader_a){
    function _C_(buf, pos_ref, vtag){
     return bin_read_t$0(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$1(bin_reader_a[1], buf, pos_ref);
            },
            _C_];
   }
   function bin_t(bin_a){
    var _A_ = bin_reader_t(bin_a[3]), _B_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _B_, _A_];
   }
   function get(from, to){
    if(from === to) return Diffable_Optional_diff[1];
    function _x_(param){
     if(0 === param[0]){var a = param[1]; return [1, a];}
     var a$0 = param[1];
     return [0, a$0];
    }
    var
     _y_ = caml_call2(Base_Set[16], from, to),
     _z_ = caml_call1(Base_Sequence[20], _y_),
     diff = caml_call2(Base_List[53], _z_, _x_);
    return caml_call1(Base_List[18], diff)
            ? Diffable_Optional_diff[1]
            : caml_call1(Diffable_Optional_diff[2], diff);
   }
   function apply_exn(set, diff){
    function _w_(acc, diff){
     if(0 === diff[0]){
      var set = diff[1];
      return caml_call2(Base_Set[10], acc, set);
     }
     var set$0 = diff[1];
     return caml_call2(Base_Set[11], acc, set$0);
    }
    return caml_call3(Base_List[20], diff, set, _w_);
   }
   function of_list_exn(l){
    if(! l) return Diffable_Optional_diff[1];
    var _v_ = caml_call1(Base_List[11], l);
    return caml_call1(Diffable_Optional_diff[2], _v_);
   }
   function Make(S){return [0, get, apply_exn, of_list_exn];}
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Set_diff);
   var
    Diffable_Set_diff =
      [0,
       [0,
        [0,
         [0],
         t_of_sexp,
         sexp_of_t,
         bin_shape_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$1,
         bin_read_t$0,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         get,
         apply_exn,
         of_list_exn,
         Make]],
       [0],
       t_of_sexp,
       sexp_of_t,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t$1,
       bin_read_t$0,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       get,
       apply_exn,
       of_list_exn,
       Make];
   runtime.caml_register_global
    (52, Diffable_Set_diff, cst_Diffable_Set_diff$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Of_variant
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Of_variant = "Diffable__Of_variant",
    cst_diffable = "diffable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Of_variant);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/of_variant.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable, "of_variant.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Of_variant);
   var Diffable_Of_variant = [0];
   runtime.caml_register_global
    (11, Diffable_Of_variant, cst_Diffable_Of_variant);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Map_diff
//# unitInfo: Requires: Base, Base__List, Base__Map, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Diffable__Optional_diff, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stable_witness
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Add$0 = "Add",
    cst_Diff$0 = "Diff",
    cst_Diffable_Map_diff$0 = "Diffable__Map_diff",
    cst_Remove$0 = "Remove",
    cst_add = "add",
    cst_diff = "diff",
    cst_diffable$0 = "diffable",
    cst_k$5 = "k",
    cst_lib_src_map_diff_ml_Stable$0 =
      "lib/src/map_diff.ml.Stable.V1.Change.t",
    cst_remove = "remove",
    cst_t$3 = "t",
    cst_v$3 = "v",
    cst_v_diff$3 = "v_diff",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = cst_lib_src_map_diff_ml_Stable$0,
    Base_List = global_data.Base__List,
    Diffable_Optional_diff = global_data.Diffable__Optional_diff,
    Base_Map = global_data.Base__Map,
    Stable_witness = global_data.Stable_witness,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Base = global_data.Base,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Map_diff$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/map_diff.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "map_diff.ml");
   var
    cst_t$2 = cst_t$3,
    _y_ = [1, cst_lib_src_map_diff_ml_Stable$0],
    cst_lib_src_map_diff_ml_Stable = cst_lib_src_map_diff_ml_Stable$0,
    cst_t$0 = cst_t$3,
    _a_ = [0, cst_Remove$0],
    _b_ = [0, cst_Add$0],
    _c_ = [0, cst_Diff$0],
    cst_v_diff = cst_v_diff$3,
    cst_lib_src_map_diff_ml_11_23 = "lib/src/map_diff.ml:11:23",
    cst_k = cst_k$5,
    cst_lib_src_map_diff_ml_11_18 = "lib/src/map_diff.ml:11:18",
    cst_Diff = cst_Diff$0,
    cst_v = cst_v$3,
    cst_lib_src_map_diff_ml_10_22 = "lib/src/map_diff.ml:10:22",
    cst_k$0 = cst_k$5,
    cst_lib_src_map_diff_ml_10_17 = "lib/src/map_diff.ml:10:17",
    cst_Add = cst_Add$0,
    cst_k$1 = cst_k$5,
    cst_lib_src_map_diff_ml_9_20 = "lib/src/map_diff.ml:9:20",
    cst_Remove = cst_Remove$0,
    cst_v_diff$0 = cst_v_diff$3,
    cst_v$0 = cst_v$3,
    cst_k$2 = cst_k$5,
    cst_t = cst_t$3,
    cst_lib_src_map_diff_ml_8_6 = "lib/src/map_diff.ml:8:6",
    cst_v_diff$1 = cst_v_diff$3,
    cst_lib_src_map_diff_ml_15_40 = "lib/src/map_diff.ml:15:40",
    cst_v$1 = cst_v$3,
    cst_lib_src_map_diff_ml_15_36 = "lib/src/map_diff.ml:15:36",
    cst_k$3 = cst_k$5,
    cst_lib_src_map_diff_ml_15_32 = "lib/src/map_diff.ml:15:32",
    cst_v_diff$2 = cst_v_diff$3,
    cst_v$2 = cst_v$3,
    cst_k$4 = cst_k$5,
    cst_t$1 = cst_t$3,
    cst_lib_src_map_diff_ml_15_4 = "lib/src/map_diff.ml:15:4",
    cst_diffable = cst_diffable$0,
    cst_Diffable_Map_diff = cst_Diffable_Map_diff$0;
   function t_of_sexp(of_k_001, of_v_002, of_v_diff_003, sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var _aL_ = sexp_008[1];
      b:
      if(caml_string_notequal(_aL_, cst_Add$0)){
       c:
       if(caml_string_notequal(_aL_, cst_Diff$0)){
        if(caml_string_notequal(_aL_, cst_Remove$0)){
         if(! caml_string_notequal(_aL_, cst_add)) break b;
         if(! caml_string_notequal(_aL_, cst_diff)) break c;
         if(caml_string_notequal(_aL_, cst_remove)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_006, sexp_008);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_006, sexp_008);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_006, sexp_008);
     }
     var _aM_ = sexp_008[1];
     if(! _aM_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_006, sexp_008);
     var _aN_ = _aM_[1];
     if(0 !== _aN_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_006, sexp_008);
     var tag_009 = _aN_[1];
     b:
     if(caml_string_notequal(tag_009, cst_Add$0)){
      c:
      if(caml_string_notequal(tag_009, cst_Diff$0)){
       if(caml_string_notequal(tag_009, cst_Remove$0)){
        if(! caml_string_notequal(tag_009, cst_add)) break b;
        if(! caml_string_notequal(tag_009, cst_diff)) break c;
        if(caml_string_notequal(tag_009, cst_remove)) break a;
       }
       var sexp_args_010 = _aM_[2];
       if(sexp_args_010 && ! sexp_args_010[2]){
        var
         arg0_011 = sexp_args_010[1],
         res0_012 = caml_call1(of_k_001, arg0_011);
        return [0, res0_012];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_006,
                tag_009,
                sexp_008);
      }
      var sexp_args_022 = _aM_[2];
      if(sexp_args_022){
       var _aO_ = sexp_args_022[2];
       if(_aO_ && ! _aO_[2]){
        var
         arg1_024 = _aO_[1],
         arg0_023 = sexp_args_022[1],
         res0_025 = caml_call1(of_k_001, arg0_023),
         res1_026 = caml_call1(of_v_diff_003, arg1_024);
        return [2, res0_025, res1_026];
       }
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_006,
               tag_009,
               sexp_008);
     }
     var sexp_args_015 = _aM_[2];
     if(sexp_args_015){
      var _aP_ = sexp_args_015[2];
      if(_aP_ && ! _aP_[2]){
       var
        arg1_017 = _aP_[1],
        arg0_016 = sexp_args_015[1],
        res0_018 = caml_call1(of_k_001, arg0_016),
        res1_019 = caml_call1(of_v_002, arg1_017);
       return [1, res0_018, res1_019];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_006,
              tag_009,
              sexp_008);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_006, sexp_008);
   }
   function sexp_of_t(of_k_030, of_v_031, of_v_diff_032, param){
    switch(param[0]){
      case 0:
       var arg0_033 = param[1], res0_034 = caml_call1(of_k_030, arg0_033);
       return [1, [0, _a_, [0, res0_034, 0]]];
      case 1:
       var
        arg1_036 = param[2],
        arg0_035 = param[1],
        res0_037 = caml_call1(of_k_030, arg0_035),
        res1_038 = caml_call1(of_v_031, arg1_036);
       return [1, [0, _b_, [0, res0_037, [0, res1_038, 0]]]];
      default:
       var
        arg1_040 = param[2],
        arg0_039 = param[1],
        res0_041 = caml_call1(of_k_030, arg0_039),
        res1_042 = caml_call1(of_v_diff_032, arg1_040);
       return [1, [0, _c_, [0, res0_041, [0, res1_042, 0]]]];
    }
   }
   var
    _d_ = caml_call1(Bin_shape[3][1], cst_v_diff),
    _e_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_11_23),
    _f_ = [0, caml_call2(Bin_prot_Shape[11], _e_, _d_), 0],
    _g_ = caml_call1(Bin_shape[3][1], cst_k),
    _h_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_11_18),
    _i_ =
      [0,
       [0, cst_Diff, [0, caml_call2(Bin_prot_Shape[11], _h_, _g_), _f_]],
       0],
    _j_ = caml_call1(Bin_shape[3][1], cst_v),
    _k_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_10_22),
    _l_ = [0, caml_call2(Bin_prot_Shape[11], _k_, _j_), 0],
    _m_ = caml_call1(Bin_shape[3][1], cst_k$0),
    _n_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_10_17),
    _o_ =
      [0,
       [0, cst_Add, [0, caml_call2(Bin_prot_Shape[11], _n_, _m_), _l_]],
       _i_],
    _p_ = caml_call1(Bin_shape[3][1], cst_k$1),
    _q_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_9_20),
    _r_ =
      [0,
       [0, cst_Remove, [0, caml_call2(Bin_prot_Shape[11], _q_, _p_), 0]],
       _o_],
    _s_ = caml_call1(Bin_prot_Shape[5], _r_),
    _t_ = [0, caml_call1(Bin_shape[3][1], cst_v_diff$0), 0],
    _u_ = [0, caml_call1(Bin_shape[3][1], cst_v$0), _t_],
    _v_ = [0, caml_call1(Bin_shape[3][1], cst_k$2), _u_],
    _w_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _v_, _s_], 0],
    _x_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_8_6),
    group = caml_call2(Bin_prot_Shape[2], _x_, _w_);
   function bin_shape_t(k, v, v_diff){
    var _aK_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _aK_),
             [0, k, [0, v, [0, v_diff, 0]]]);
   }
   function bin_size_t(size_of_k, size_of_v, size_of_v_diff, param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _aF_ = caml_call1(size_of_k, v1);
       return caml_call2(Bin_prot_Common[23], 1, _aF_);
      case 1:
       var
        v2 = param[2],
        v1$0 = param[1],
        _aG_ = caml_call1(size_of_k, v1$0),
        size = caml_call2(Bin_prot_Common[23], 1, _aG_),
        _aH_ = caml_call1(size_of_v, v2);
       return caml_call2(Bin_prot_Common[23], size, _aH_);
      default:
       var
        v2$0 = param[2],
        v1$1 = param[1],
        _aI_ = caml_call1(size_of_k, v1$1),
        size$0 = caml_call2(Bin_prot_Common[23], 1, _aI_),
        _aJ_ = caml_call1(size_of_v_diff, v2$0);
       return caml_call2(Bin_prot_Common[23], size$0, _aJ_);
    }
   }
   function bin_write_t(write_k, write_v, write_v_diff, buf, pos, param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(write_k, buf, pos$0, v1);
      case 1:
       var
        v2 = param[2],
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
        pos$2 = caml_call3(write_k, buf, pos$1, v1$0);
       return caml_call3(write_v, buf, pos$2, v2);
      default:
       var
        v2$0 = param[2],
        v1$1 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
        pos$4 = caml_call3(write_k, buf, pos$3, v1$1);
       return caml_call3(write_v_diff, buf, pos$4, v2$0);
    }
   }
   function bin_writer_t(bin_writer_k, bin_writer_v, bin_writer_v_diff){
    function _az_(v){
     var
      _aA_ = bin_writer_v_diff[2],
      _aB_ = bin_writer_v[2],
      _aC_ = bin_writer_k[2];
     return function(_aD_, _aE_){
      return bin_write_t(_aC_, _aB_, _aA_, v, _aD_, _aE_);};
    }
    return [0,
            function(v){
             return bin_size_t
                     (bin_writer_k[1], bin_writer_v[1], bin_writer_v_diff[1], v);
            },
            _az_];
   }
   function bin_read_t(of_k, of_v, of_v_diff, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_map_diff_ml_Stable, pos_ref[1]);
   }
   function bin_read_t$0(of_k, of_v, of_v_diff, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _y_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(of_k, buf, pos_ref); return [0, arg_1];
      case 1:
       var
        arg_1$0 = caml_call2(of_k, buf, pos_ref),
        arg_2 = caml_call2(of_v, buf, pos_ref);
       return [1, arg_1$0, arg_2];
      default:
       var
        arg_1$1 = caml_call2(of_k, buf, pos_ref),
        arg_2$0 = caml_call2(of_v_diff, buf, pos_ref);
       return [2, arg_1$1, arg_2$0];
    }
   }
   function bin_reader_t(bin_reader_k, bin_reader_v, bin_reader_v_diff){
    function _ay_(buf, pos_ref, vtag){
     return bin_read_t
             (bin_reader_k[1],
              bin_reader_v[1],
              bin_reader_v_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0
                     (bin_reader_k[1],
                      bin_reader_v[1],
                      bin_reader_v_diff[1],
                      buf,
                      pos_ref);
            },
            _ay_];
   }
   function bin_t(bin_k, bin_v, bin_v_diff){
    var
     _aw_ = bin_reader_t(bin_k[3], bin_v[3], bin_v_diff[3]),
     _ax_ = bin_writer_t(bin_k[2], bin_v[2], bin_v_diff[2]);
    return [0, bin_shape_t(bin_k[1], bin_v[1], bin_v_diff[1]), _ax_, _aw_];
   }
   function stable_witness
   (k_stable_witness, v_stable_witness, v_diff_stable_witness){return Stable_witness[6];
   }
   function t_of_sexp$0(of_k_046, of_v_047, of_v_diff_048, x_050){
    function _au_(_av_){
     return t_of_sexp(of_k_046, of_v_047, of_v_diff_048, _av_);
    }
    return caml_call2(Base[164], _au_, x_050);
   }
   function sexp_of_t$0(of_k_051, of_v_052, of_v_diff_053, x_054){
    function _as_(_at_){
     return sexp_of_t(of_k_051, of_v_052, of_v_diff_053, _at_);
    }
    return caml_call2(Base[165], _as_, x_054);
   }
   var
    _z_ = caml_call1(Bin_shape[3][1], cst_v_diff$1),
    _A_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_15_40),
    _B_ = caml_call2(Bin_prot_Shape[11], _A_, _z_),
    _C_ = caml_call1(Bin_shape[3][1], cst_v$1),
    _D_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_15_36),
    _E_ = caml_call2(Bin_prot_Shape[11], _D_, _C_),
    _F_ = caml_call1(Bin_shape[3][1], cst_k$3),
    _G_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_15_32),
    _N_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _G_, _F_), _E_, _B_),
    _H_ = caml_call1(Bin_prot_Std[203], _N_),
    _I_ = [0, caml_call1(Bin_shape[3][1], cst_v_diff$2), 0],
    _J_ = [0, caml_call1(Bin_shape[3][1], cst_v$2), _I_],
    _K_ = [0, caml_call1(Bin_shape[3][1], cst_k$4), _J_],
    _L_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _K_, _H_], 0],
    _M_ = caml_call1(Bin_shape[4][1], cst_lib_src_map_diff_ml_15_4),
    group$0 = caml_call2(Bin_prot_Shape[2], _M_, _L_);
   function bin_shape_t$0(k, v, v_diff){
    var _ar_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _ar_),
             [0, k, [0, v, [0, v_diff, 0]]]);
   }
   function bin_size_t$0(size_of_k, size_of_v, size_of_v_diff, v){
    function _ap_(_aq_){
     return bin_size_t(size_of_k, size_of_v, size_of_v_diff, _aq_);
    }
    return caml_call2(Bin_prot_Std[18], _ap_, v);
   }
   function bin_write_t$0(write_k, write_v, write_v_diff, buf, pos, v){
    function _al_(_am_, _an_, _ao_){
     return bin_write_t(write_k, write_v, write_v_diff, _am_, _an_, _ao_);
    }
    return caml_call4(Bin_prot_Std[205], _al_, buf, pos, v);
   }
   function bin_writer_t$0(bin_writer_k, bin_writer_v, bin_writer_v_diff){
    function _af_(v){
     var
      _ag_ = bin_writer_v_diff[2],
      _ah_ = bin_writer_v[2],
      _ai_ = bin_writer_k[2];
     return function(_aj_, _ak_){
      return bin_write_t$0(_ai_, _ah_, _ag_, v, _aj_, _ak_);};
    }
    return [0,
            function(v){
             return bin_size_t$0
                     (bin_writer_k[1], bin_writer_v[1], bin_writer_v_diff[1], v);
            },
            _af_];
   }
   function bin_read_t$1(of_k, of_v, of_v_diff, buf, pos_ref, vint){
    function _ac_(_ad_, _ae_){
     return bin_read_t$0(of_k, of_v, of_v_diff, _ad_, _ae_);
    }
    return caml_call3(caml_call1(Bin_prot_Std[209], _ac_), buf, pos_ref, vint);
   }
   function bin_read_t$2(of_k, of_v, of_v_diff, buf, pos_ref){
    function _$_(_aa_, _ab_){
     return bin_read_t$0(of_k, of_v, of_v_diff, _aa_, _ab_);
    }
    return caml_call2(caml_call1(Bin_prot_Std[208], _$_), buf, pos_ref);
   }
   function bin_reader_t$0(bin_reader_k, bin_reader_v, bin_reader_v_diff){
    function ___(buf, pos_ref, vtag){
     return bin_read_t$1
             (bin_reader_k[1],
              bin_reader_v[1],
              bin_reader_v_diff[1],
              buf,
              pos_ref,
              vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$2
                     (bin_reader_k[1],
                      bin_reader_v[1],
                      bin_reader_v_diff[1],
                      buf,
                      pos_ref);
            },
            ___];
   }
   function bin_t$0(bin_k, bin_v, bin_v_diff){
    var
     _Y_ = bin_reader_t$0(bin_k[3], bin_v[3], bin_v_diff[3]),
     _Z_ = bin_writer_t$0(bin_k[2], bin_v[2], bin_v_diff[2]);
    return [0, bin_shape_t$0(bin_k[1], bin_v[1], bin_v_diff[1]), _Z_, _Y_];
   }
   function stable_witness$0
   (k_stable_witness, v_stable_witness, v_diff_stable_witness){return Stable_witness[6];
   }
   function get(get_a, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    function _S_(acc, param){
     var diff = param[2], key = param[1], _X_ = diff[1];
     if(847852583 === _X_) return [0, [0, key], acc];
     if(1013247643 <= _X_){
      var
       match = diff[2],
       to = match[2],
       from = match[1],
       diff$0 = caml_call2(get_a, from, to);
      return caml_call1(Diffable_Optional_diff[8], diff$0)
              ? acc
              : [0,
                [2, key, caml_call1(Diffable_Optional_diff[9], diff$0)],
                acc];
     }
     var value = diff[2];
     return [0, [1, key, value], acc];
    }
    var _T_ = 0;
    function _U_(_W_, _V_){return _W_ === _V_ ? 1 : 0;}
    var diff = caml_call5(Base_Map[81], from, to, _U_, _T_, _S_);
    return caml_call1(Base_List[18], diff)
            ? Diffable_Optional_diff[1]
            : caml_call1(Diffable_Optional_diff[2], diff);
   }
   function apply_exn(apply_a_exn, derived_on, diff){
    function _Q_(acc, param){
     switch(param[0]){
       case 0:
        var key = param[1]; return caml_call2(Base_Map[44], acc, key);
       case 1:
        var data = param[2], key$0 = param[1];
        return caml_call3(Base_Map[34], acc, key$0, data);
       default:
        var
         diff = param[2],
         key$1 = param[1],
         _R_ =
           caml_call2(apply_a_exn, caml_call2(Base_Map[43], acc, key$1), diff);
        return caml_call3(Base_Map[34], acc, key$1, _R_);
     }
    }
    return caml_call3(Base_List[20], diff, derived_on, _Q_);
   }
   function of_list_exn(param, _O_, l){
    if(! l) return Diffable_Optional_diff[1];
    var _P_ = caml_call1(Base_List[11], l);
    return caml_call1(Diffable_Optional_diff[2], _P_);
   }
   function Make(M){return [0, get, apply_exn, of_list_exn];}
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Map_diff);
   var
    Diffable_Map_diff =
      [0,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_shape_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          stable_witness],
         t_of_sexp$0,
         sexp_of_t$0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         stable_witness$0,
         get,
         apply_exn,
         of_list_exn,
         Make]],
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        stable_witness],
       t_of_sexp$0,
       sexp_of_t$0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       stable_witness$0,
       get,
       apply_exn,
       of_list_exn,
       Make];
   runtime.caml_register_global
    (72, Diffable_Map_diff, cst_Diffable_Map_diff$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Diffable_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Diffable_intf = "Diffable__Diffable_intf",
    cst_diffable = "diffable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Diffable_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/diffable_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable, "diffable_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Diffable_intf);
   var Diffable_Diffable_intf = [0];
   runtime.caml_register_global
    (11, Diffable_Diffable_intf, cst_Diffable_Diffable_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Atomic
//# unitInfo: Requires: Base__List, Bin_prot__Shape, Bin_shape, Diffable__Optional_diff, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Atomic$0 = "Diffable__Atomic",
    cst_diffable$0 = "diffable",
    cst_t$1 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Base_List = global_data.Base__List,
    Diffable_Optional_diff = global_data.Diffable__Optional_diff,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Atomic$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/atomic.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "atomic.ml");
   var
    cst_t = cst_t$1,
    cst_lib_src_atomic_ml_36_2 = "lib/src/atomic.ml:36:2",
    cst_t$0 = cst_t$1,
    cst_diffable = cst_diffable$0,
    cst_Diffable_Atomic = cst_Diffable_Atomic$0;
   function Make_base_diff(M){
    function get(from, to){
     if(from !== to && ! caml_call2(M[1], from, to))
      return caml_call1(Diffable_Optional_diff[2], to);
     return Diffable_Optional_diff[1];
    }
    function apply_exn(param, t){return t;}
    function of_list_exn(l){
     if(! l) return Diffable_Optional_diff[1];
     var _l_ = caml_call1(Base_List[121], l);
     return caml_call1(Diffable_Optional_diff[2], _l_);
    }
    return [0, get, apply_exn, of_list_exn];
   }
   function Make_diff_plain(M){
    var
     include = Make_base_diff(M),
     get = include[1],
     apply_exn = include[2],
     of_list_exn = include[3];
    return [0, , get, apply_exn, of_list_exn];
   }
   function Make_diff(M){
    var
     t_of_sexp = M[1],
     sexp_of_t = M[2],
     _h_ = M[7],
     _i_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _h_], 0],
     _j_ = caml_call1(Bin_shape[4][1], cst_lib_src_atomic_ml_36_2),
     group = caml_call2(Bin_prot_Shape[2], _j_, _i_),
     _k_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _k_), 0),
     bin_size_t = M[3],
     bin_write_t = M[4],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     bin_read_t = M[6],
     bin_read_t$0 = M[5],
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     include = Make_base_diff([0, M[11]]),
     get = include[1],
     apply_exn = include[2],
     of_list_exn = include[3];
    return [0,
            t_of_sexp,
            sexp_of_t,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_writer_t,
            bin_read_t,
            bin_read_t$0,
            bin_reader_t,
            bin_t,
            ,
            get,
            apply_exn,
            of_list_exn];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Atomic);
   function _a_(M){
    var Diff = Make_diff_plain(M);
    return [0, [0, Diff[2], Diff[3], Diff[4]]];
   }
   function _b_(M){
    var
     Diff =
       Make_diff
        ([0,
          M[2],
          M[3],
          M[4],
          M[5],
          M[6],
          M[7],
          M[8],
          M[9],
          M[10],
          M[11],
          M[1]]);
    return [0,
            [0,
             Diff[1],
             Diff[2],
             Diff[4],
             Diff[5],
             Diff[8],
             Diff[7],
             Diff[3],
             Diff[6],
             Diff[9],
             Diff[10],
             Diff[12],
             Diff[13],
             Diff[14]]];
   }
   function _c_(_f_){
    var _g_ = Make_diff_plain(_f_);
    return [0, _g_[2], _g_[3], _g_[4]];
   }
   var
    Diffable_Atomic =
      [0,
       function(_d_){
        var _e_ = Make_diff(_d_);
        return [0,
                _e_[1],
                _e_[2],
                _e_[4],
                _e_[5],
                _e_[8],
                _e_[7],
                _e_[3],
                _e_[6],
                _e_[9],
                _e_[10],
                _e_[12],
                _e_[13],
                _e_[14]];
       },
       _c_,
       _b_,
       _a_];
   runtime.caml_register_global(18, Diffable_Atomic, cst_Diffable_Atomic$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Basic_diffs
//# unitInfo: Requires: Base, Base__List, Base__Sequence, Base_quickcheck__Export, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Diffable__Atomic, Diffable__Optional_diff, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diff_some$2 = "Diff_some",
    cst_Diffable_Basic_diffs$0 = "Diffable__Basic_diffs",
    cst_Set_to_none$0 = "Set_to_none",
    cst_Set_to_some$0 = "Set_to_some",
    cst_a$3 = "a",
    cst_a_diff$1 = "a_diff",
    cst_derived_on$1 = "derived_on",
    cst_diff_some = "diff_some",
    cst_diffable$0 = "diffable",
    cst_lib_src_basic_diffs_ml = "lib/src/basic_diffs.ml",
    cst_lib_src_basic_diffs_ml_Dif$0 =
      "lib/src/basic_diffs.ml.Diff_of_option.t",
    cst_set_to_none = "set_to_none",
    cst_set_to_some = "set_to_some",
    cst_t$13 = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_032 = cst_lib_src_basic_diffs_ml_Dif$0,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base = global_data.Base,
    Diffable_Optional_diff = global_data.Diffable__Optional_diff,
    Base_Sequence = global_data.Base__Sequence,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_quickcheck_Export = global_data.Base_quickcheck__Export;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Basic_diffs$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_lib_src_basic_diffs_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_diffable$0, "basic_diffs.ml");
   var
    cst_Diff_some$1 = cst_Diff_some$2,
    _Y_ = [0, "second_diff"],
    cst_Set_to_none = cst_Set_to_none$0,
    _Z_ = [0, "first_diff"],
    cst_Could_not_combine_diffs_Va =
      "Could not combine diffs. Variant mismatch.",
    _X_ = [0, cst_lib_src_basic_diffs_ml, 97, 43],
    ___ = [0, cst_lib_src_basic_diffs_ml, 100, 41],
    cst_Diff_some$0 = cst_Diff_some$2,
    _V_ = [0, "diff"],
    cst_None = "None",
    _W_ = [0, cst_derived_on$1],
    cst_Could_not_apply_diff_Varia = "Could not apply diff. Variant mismatch.",
    _U_ = [1, cst_lib_src_basic_diffs_ml_Dif$0],
    cst_lib_src_basic_diffs_ml_Dif = cst_lib_src_basic_diffs_ml_Dif$0,
    cst_t$12 = cst_t$13,
    _F_ = [0, cst_Set_to_none$0],
    _G_ = [0, cst_Set_to_some$0],
    _H_ = [0, cst_Diff_some$2],
    cst_derived_on$0 = cst_derived_on$1,
    cst_t = cst_t$13,
    cst_lib_src_basic_diffs_ml_21_ = "lib/src/basic_diffs.ml:21:2",
    cst_t$0 = cst_t$13,
    cst_t$1 = cst_t$13,
    cst_lib_src_basic_diffs_ml_25_ = "lib/src/basic_diffs.ml:25:2",
    cst_t$2 = cst_t$13,
    cst_t$3 = cst_t$13,
    cst_lib_src_basic_diffs_ml_29_ = "lib/src/basic_diffs.ml:29:2",
    cst_t$4 = cst_t$13,
    cst_t$5 = cst_t$13,
    cst_lib_src_basic_diffs_ml_40_ = "lib/src/basic_diffs.ml:40:2",
    cst_t$6 = cst_t$13,
    cst_t$7 = cst_t$13,
    cst_lib_src_basic_diffs_ml_44_ = "lib/src/basic_diffs.ml:44:2",
    cst_t$8 = cst_t$13,
    cst_t$9 = cst_t$13,
    cst_lib_src_basic_diffs_ml_48_ = "lib/src/basic_diffs.ml:48:2",
    cst_t$10 = cst_t$13,
    cst_a = cst_a$3,
    cst_lib_src_basic_diffs_ml_52_ = "lib/src/basic_diffs.ml:52:23",
    cst_a$0 = cst_a$3,
    cst_derived_on = cst_derived_on$1,
    cst_lib_src_basic_diffs_ml_52_$0 = "lib/src/basic_diffs.ml:52:2",
    cst_a_diff = cst_a_diff$1,
    cst_lib_src_basic_diffs_ml_57_ = "lib/src/basic_diffs.ml:57:19",
    cst_Diff_some = cst_Diff_some$2,
    cst_a$1 = cst_a$3,
    cst_lib_src_basic_diffs_ml_56_ = "lib/src/basic_diffs.ml:56:21",
    cst_Set_to_some = cst_Set_to_some$0,
    _N_ = [0, cst_Set_to_none$0, 0],
    cst_a_diff$0 = cst_a_diff$1,
    cst_a$2 = cst_a$3,
    cst_t$11 = cst_t$13,
    cst_lib_src_basic_diffs_ml_54_ = "lib/src/basic_diffs.ml:54:2",
    cst_diffable = cst_diffable$0,
    cst_Diffable_Basic_diffs = cst_Diffable_Basic_diffs$0;
   function Make_atomic_with_quickcheck(M){
    var
     include =
       caml_call1
        (Diffable_Atomic[1],
         [0,
          M[1],
          M[2],
          M[3],
          M[4],
          M[5],
          M[6],
          M[7],
          M[8],
          M[9],
          M[10],
          M[11]]),
     t_of_sexp = include[1],
     sexp_of_t = include[2],
     bin_size_t = include[3],
     bin_write_t = include[4],
     bin_read_t = include[5],
     bin_read_t$0 = include[6],
     bin_shape_t = include[7],
     bin_writer_t = include[8],
     bin_reader_t = include[9],
     bin_t = include[10],
     get = include[11],
     apply_exn = include[12],
     of_list_exn = include[13],
     quickcheck_generator = M[12],
     quickcheck_observer = M[13],
     quickcheck_shrinker = M[14];
    return [0,
            t_of_sexp,
            sexp_of_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            get,
            apply_exn,
            of_list_exn,
            quickcheck_generator,
            quickcheck_observer,
            quickcheck_shrinker];
   }
   var
    t_of_sexp = Base[104],
    sexp_of_t = Base[105],
    _a_ = Bin_prot_Std[91],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_21_),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_t = Bin_prot_Std[2],
    bin_write_t = Bin_prot_Std[93],
    bin_writer_t = [0, bin_size_t, bin_write_t],
    bin_read_t = Bin_prot_Std[97],
    bin_read_t$0 = Bin_prot_Std[96],
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    equal = Base[100],
    quickcheck_generator = Base_quickcheck_Export[2],
    quickcheck_observer = Base_quickcheck_Export[12],
    quickcheck_shrinker = Base_quickcheck_Export[22],
    Diff_of_bool =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp,
         sexp_of_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         equal,
         quickcheck_generator,
         quickcheck_observer,
         quickcheck_shrinker]),
    t_of_sexp$0 = Base[114],
    sexp_of_t$0 = Base[115],
    _e_ = Bin_prot_Std[115],
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _e_], 0],
    _g_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_25_),
    group$0 = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    _h_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _h_), 0),
    bin_size_t$0 = Bin_prot_Std[5],
    bin_write_t$0 = Bin_prot_Std[117],
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    bin_read_t$1 = Bin_prot_Std[121],
    bin_read_t$2 = Bin_prot_Std[120],
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    equal$0 = Base[110],
    quickcheck_generator$0 = Base_quickcheck_Export[3],
    quickcheck_observer$0 = Base_quickcheck_Export[13],
    quickcheck_shrinker$0 = Base_quickcheck_Export[23],
    Diff_of_char =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp$0,
         sexp_of_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         equal$0,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0]),
    t_of_sexp$1 = Base[125],
    sexp_of_t$1 = Base[126],
    _i_ = Bin_prot_Std[131],
    _j_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _i_], 0],
    _k_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_29_),
    group$1 = caml_call2(Bin_prot_Shape[2], _k_, _j_),
    _l_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _l_), 0),
    bin_size_t$1 = Bin_prot_Std[7],
    bin_write_t$1 = Bin_prot_Std[133],
    bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1],
    bin_read_t$3 = Bin_prot_Std[137],
    bin_read_t$4 = Bin_prot_Std[136],
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$1, bin_writer_t$1, bin_reader_t$1],
    compare = Base[119],
    quickcheck_generator$1 = Base_quickcheck_Export[10],
    quickcheck_observer$1 = Base_quickcheck_Export[20],
    quickcheck_shrinker$1 = Base_quickcheck_Export[30];
   function equal$1(x_010, x_011){
    return 0 === caml_call2(compare, x_010, x_011) ? 1 : 0;
   }
   var
    Diff_of_float =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         equal$1,
         quickcheck_generator$1,
         quickcheck_observer$1,
         quickcheck_shrinker$1]),
    t_of_sexp$2 = Base[135],
    sexp_of_t$2 = Base[136],
    _m_ = Bin_prot_Std[123],
    _n_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _m_], 0],
    _o_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_40_),
    group$2 = caml_call2(Bin_prot_Shape[2], _o_, _n_),
    _p_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _p_), 0),
    bin_size_t$2 = Bin_prot_Std[6],
    bin_write_t$2 = Bin_prot_Std[125],
    bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2],
    bin_read_t$5 = Bin_prot_Std[129],
    bin_read_t$6 = Bin_prot_Std[128],
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2],
    equal$2 = Base[131],
    quickcheck_generator$2 = Base_quickcheck_Export[6],
    quickcheck_observer$2 = Base_quickcheck_Export[16],
    quickcheck_shrinker$2 = Base_quickcheck_Export[26],
    Diff_of_int =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp$2,
         sexp_of_t$2,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         equal$2,
         quickcheck_generator$2,
         quickcheck_observer$2,
         quickcheck_shrinker$2]),
    t_of_sexp$3 = Base[201],
    sexp_of_t$3 = Base[202],
    _q_ = Bin_prot_Std[99],
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _q_], 0],
    _s_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_44_),
    group$3 = caml_call2(Bin_prot_Shape[2], _s_, _r_),
    _t_ = caml_call1(Bin_shape[2][1], cst_t$8),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _t_), 0),
    bin_size_t$3 = Bin_prot_Std[3],
    bin_write_t$3 = Bin_prot_Std[101],
    bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3],
    bin_read_t$7 = Bin_prot_Std[105],
    bin_read_t$8 = Bin_prot_Std[104],
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3],
    equal$3 = Base[197],
    quickcheck_generator$3 = Base_quickcheck_Export[4],
    quickcheck_observer$3 = Base_quickcheck_Export[14],
    quickcheck_shrinker$3 = Base_quickcheck_Export[24],
    Diff_of_string =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp$3,
         sexp_of_t$3,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$8,
         bin_read_t$7,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         equal$3,
         quickcheck_generator$3,
         quickcheck_observer$3,
         quickcheck_shrinker$3]),
    t_of_sexp$4 = Base[219],
    sexp_of_t$4 = Base[220],
    _u_ = Bin_prot_Std[83],
    _v_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _u_], 0],
    _w_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_48_),
    group$4 = caml_call2(Bin_prot_Shape[2], _w_, _v_),
    _x_ = caml_call1(Bin_shape[2][1], cst_t$10),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _x_), 0),
    bin_size_t$4 = Bin_prot_Std[1],
    bin_write_t$4 = Bin_prot_Std[85],
    bin_writer_t$4 = [0, bin_size_t$4, bin_write_t$4],
    bin_read_t$9 = Bin_prot_Std[89],
    bin_read_t$10 = Bin_prot_Std[88],
    bin_reader_t$4 = [0, bin_read_t$10, bin_read_t$9],
    bin_t$4 = [0, bin_shape_t$4, bin_writer_t$4, bin_reader_t$4],
    equal$4 = Base[215],
    quickcheck_generator$4 = Base_quickcheck_Export[1],
    quickcheck_observer$4 = Base_quickcheck_Export[11],
    quickcheck_shrinker$4 = Base_quickcheck_Export[21],
    Diff_of_unit =
      Make_atomic_with_quickcheck
       ([0,
         t_of_sexp$4,
         sexp_of_t$4,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$10,
         bin_read_t$9,
         bin_shape_t$4,
         bin_writer_t$4,
         bin_reader_t$4,
         bin_t$4,
         equal$4,
         quickcheck_generator$4,
         quickcheck_observer$4,
         quickcheck_shrinker$4]),
    derived_on_of_sexp = Base[183],
    sexp_of_derived_on = Base[184],
    _y_ = caml_call1(Bin_shape[3][1], cst_a),
    _z_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_52_),
    _A_ = caml_call2(Bin_prot_Shape[11], _z_, _y_),
    _B_ = caml_call1(Bin_prot_Std[195], _A_),
    _C_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _D_ = [0, [0, caml_call1(Bin_shape[2][1], cst_derived_on), _C_, _B_], 0],
    _E_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_52_$0),
    group$5 = caml_call2(Bin_prot_Shape[2], _E_, _D_);
   function bin_shape_derived_on(a){
    var _aZ_ = caml_call1(Bin_shape[2][1], cst_derived_on$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$5, _aZ_), [0, a, 0]);
   }
   function bin_size_derived_on(size_of_a, v){
    return caml_call2(Bin_prot_Std[15], size_of_a, v);
   }
   function bin_write_derived_on(write_a, buf, pos, v){
    return caml_call4(Bin_prot_Std[197], write_a, buf, pos, v);
   }
   function bin_writer_derived_on(bin_writer_a){
    function _aV_(v){
     var _aW_ = bin_writer_a[2];
     return function(_aX_, _aY_){
      return bin_write_derived_on(_aW_, v, _aX_, _aY_);};
    }
    return [0,
            function(v){return bin_size_derived_on(bin_writer_a[1], v);},
            _aV_];
   }
   function bin_read_derived_on(of_a, buf, pos_ref, vint){
    return caml_call3(caml_call1(Bin_prot_Std[201], of_a), buf, pos_ref, vint);
   }
   function bin_read_derived_on$0(of_a, buf, pos_ref){
    return caml_call2(caml_call1(Bin_prot_Std[200], of_a), buf, pos_ref);
   }
   function bin_reader_derived_on(bin_reader_a){
    function _aU_(buf, pos_ref, vtag){
     return bin_read_derived_on(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_derived_on$0(bin_reader_a[1], buf, pos_ref);
            },
            _aU_];
   }
   function bin_derived_on(bin_a){
    var
     _aS_ = bin_reader_derived_on(bin_a[3]),
     _aT_ = bin_writer_derived_on(bin_a[2]);
    return [0, bin_shape_derived_on(bin_a[1]), _aT_, _aS_];
   }
   function t_of_sexp$5(of_a_028, of_a_diff_029, sexp_034){
    a:
    {
     if(0 === sexp_034[0]){
      var _aP_ = sexp_034[1];
      b:
      if(caml_string_notequal(_aP_, cst_Diff_some$2)){
       c:
       if(caml_string_notequal(_aP_, cst_Set_to_none$0)){
        if(caml_string_notequal(_aP_, cst_Set_to_some$0)){
         if(! caml_string_notequal(_aP_, cst_diff_some)) break b;
         if(! caml_string_notequal(_aP_, cst_set_to_none)) break c;
         if(caml_string_notequal(_aP_, cst_set_to_some)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_032, sexp_034);
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_032, sexp_034);
     }
     var _aQ_ = sexp_034[1];
     if(! _aQ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_032, sexp_034);
     var _aR_ = _aQ_[1];
     if(0 !== _aR_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_032, sexp_034);
     var tag_035 = _aR_[1];
     b:
     if(caml_string_notequal(tag_035, cst_Diff_some$2)){
      c:
      if(caml_string_notequal(tag_035, cst_Set_to_none$0)){
       if(caml_string_notequal(tag_035, cst_Set_to_some$0)){
        if(! caml_string_notequal(tag_035, cst_diff_some)) break b;
        if(! caml_string_notequal(tag_035, cst_set_to_none)) break c;
        if(caml_string_notequal(tag_035, cst_set_to_some)) break a;
       }
       var sexp_args_036 = _aQ_[2];
       if(sexp_args_036 && ! sexp_args_036[2]){
        var
         arg0_037 = sexp_args_036[1],
         res0_038 = caml_call1(of_a_028, arg0_037);
        return [0, res0_038];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_032,
                tag_035,
                sexp_034);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_032, sexp_034);
     }
     var sexp_args_041 = _aQ_[2];
     if(sexp_args_041 && ! sexp_args_041[2]){
      var
       arg0_042 = sexp_args_041[1],
       res0_043 = caml_call1(of_a_diff_029, arg0_042);
      return [1, res0_043];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_032,
              tag_035,
              sexp_034);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_032, sexp_034);
   }
   function sexp_of_t$5(of_a_046, of_a_diff_047, param){
    if(typeof param === "number") return _F_;
    if(0 === param[0]){
     var arg0_048 = param[1], res0_049 = caml_call1(of_a_046, arg0_048);
     return [1, [0, _G_, [0, res0_049, 0]]];
    }
    var arg0_050 = param[1], res0_051 = caml_call1(of_a_diff_047, arg0_050);
    return [1, [0, _H_, [0, res0_051, 0]]];
   }
   var
    _I_ = caml_call1(Bin_shape[3][1], cst_a_diff),
    _J_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_57_),
    _K_ =
      [0,
       [0, cst_Diff_some, [0, caml_call2(Bin_prot_Shape[11], _J_, _I_), 0]],
       0],
    _L_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _M_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_56_),
    _O_ =
      [0,
       _N_,
       [0,
        [0, cst_Set_to_some, [0, caml_call2(Bin_prot_Shape[11], _M_, _L_), 0]],
        _K_]],
    _P_ = caml_call1(Bin_prot_Shape[5], _O_),
    _Q_ = [0, caml_call1(Bin_shape[3][1], cst_a_diff$0), 0],
    _R_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), _Q_],
    _S_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), _R_, _P_], 0],
    _T_ = caml_call1(Bin_shape[4][1], cst_lib_src_basic_diffs_ml_54_),
    group$6 = caml_call2(Bin_prot_Shape[2], _T_, _S_);
   function bin_shape_t$5(a, a_diff){
    var _aO_ = caml_call1(Bin_shape[2][1], cst_t$12);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$6, _aO_),
             [0, a, [0, a_diff, 0]]);
   }
   function bin_size_t$5(size_of_a, size_of_a_diff, param){
    if(typeof param === "number") return 1;
    if(0 === param[0]){
     var v1 = param[1], _aM_ = caml_call1(size_of_a, v1);
     return caml_call2(Bin_prot_Common[23], 1, _aM_);
    }
    var v1$0 = param[1], _aN_ = caml_call1(size_of_a_diff, v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _aN_);
   }
   function bin_write_t$5(write_a, write_a_diff, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 0);
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(write_a, buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
    return caml_call3(write_a_diff, buf, pos$1, v1$0);
   }
   function bin_writer_t$5(bin_writer_a, bin_writer_a_diff){
    function _aH_(v){
     var _aI_ = bin_writer_a_diff[2], _aJ_ = bin_writer_a[2];
     return function(_aK_, _aL_){
      return bin_write_t$5(_aJ_, _aI_, v, _aK_, _aL_);};
    }
    return [0,
            function(v){
             return bin_size_t$5(bin_writer_a[1], bin_writer_a_diff[1], v);
            },
            _aH_];
   }
   function bin_read_t$11(of_a, of_a_diff, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_lib_src_basic_diffs_ml_Dif, pos_ref[1]);
   }
   function bin_read_t$12(of_a, of_a_diff, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _U_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       var arg_1 = caml_call2(of_a, buf, pos_ref); return [0, arg_1];
      default:
       var arg_1$0 = caml_call2(of_a_diff, buf, pos_ref); return [1, arg_1$0];
    }
   }
   function bin_reader_t$5(bin_reader_a, bin_reader_a_diff){
    function _aG_(buf, pos_ref, vtag){
     return bin_read_t$11
             (bin_reader_a[1], bin_reader_a_diff[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$12
                     (bin_reader_a[1], bin_reader_a_diff[1], buf, pos_ref);
            },
            _aG_];
   }
   function bin_t$5(bin_a, bin_a_diff){
    var
     _aE_ = bin_reader_t$5(bin_a[3], bin_a_diff[3]),
     _aF_ = bin_writer_t$5(bin_a[2], bin_a_diff[2]);
    return [0, bin_shape_t$5(bin_a[1], bin_a_diff[1]), _aF_, _aE_];
   }
   function quickcheck_generator$5(generator_065, generator_066){
    var _ax_ = 0;
    function _ay_(size_071, random_072){
     return [1,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_066,
               size_071,
               random_072)];
    }
    var
     _az_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _ay_)], _ax_];
    function _aA_(size_069, random_070){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_065,
               size_069,
               random_070)];
    }
    var
     _aB_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aA_)], _az_];
    function _aC_(size_067, random_068){return 0;}
    var
     _aD_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aC_)], _aB_];
    return caml_call1(Base_quickcheck_Generator[60], _aD_);
   }
   function quickcheck_observer$5(observer_058, observer_059){
    function _aw_(x_060, size_061, hash_062){
     if(typeof x_060 === "number"){
      var hash_062$0 = caml_call2(Base[133], hash_062, 0);
      return hash_062$0;
     }
     if(0 === x_060[0]){
      var
       x_063 = x_060[1],
       hash_062$1 = caml_call2(Base[133], hash_062, 1),
       hash_062$2 =
         caml_call4
          (Base_quickcheck_Observer[37],
           observer_058,
           x_063,
           size_061,
           hash_062$1);
      return hash_062$2;
     }
     var
      x_064 = x_060[1],
      hash_062$3 = caml_call2(Base[133], hash_062, 2),
      hash_062$4 =
        caml_call4
         (Base_quickcheck_Observer[37],
          observer_059,
          x_064,
          size_061,
          hash_062$3);
     return hash_062$4;
    }
    return caml_call1(Base_quickcheck_Observer[36], _aw_);
   }
   function quickcheck_shrinker$5(shrinker_054, shrinker_055){
    function _an_(param){
     if(typeof param === "number") return caml_call1(Base_Sequence[70], 0);
     if(0 === param[0]){
      var
       x_056 = param[1],
       _ao_ = 0,
       _ap_ = function(x_056){return [0, x_056];},
       _aq_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_054, x_056),
       _ar_ = [0, caml_call2(Base_Sequence[35], _aq_, _ap_), _ao_];
      return caml_call1(Base_Sequence[70], _ar_);
     }
     var x_057 = param[1], _as_ = 0;
     function _at_(x_057){return [1, x_057];}
     var
      _au_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_055, x_057),
      _av_ = [0, caml_call2(Base_Sequence[35], _au_, _at_), _as_];
     return caml_call1(Base_Sequence[70], _av_);
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _an_);
   }
   function get(get_a, from, to){
    if(from === to) return Diffable_Optional_diff[1];
    if(from){
     var from$0 = from[1];
     if(! to) return caml_call1(Diffable_Optional_diff[2], 0);
     var
      to$0 = to[1],
      _al_ = function(d){return [1, d];},
      _am_ = caml_call2(get_a, from$0, to$0);
     return caml_call2(Diffable_Optional_diff[3], _am_, _al_);
    }
    if(! to) return Diffable_Optional_diff[1];
    var x = to[1];
    return caml_call1(Diffable_Optional_diff[2], [0, x]);
   }
   function apply_exn(apply_a_exn, derived_on, diff){
    if(typeof diff === "number") return 0;
    if(0 === diff[0]){var x = diff[1]; return [0, x];}
    if(derived_on){
     var diff$0 = diff[1], derived_on$0 = derived_on[1];
     return [0, caml_call2(apply_a_exn, derived_on$0, diff$0)];
    }
    var
     _ai_ =
       [0,
        [1,
         [0, _V_, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Diff_some$0), 0]]],
        0],
     _aj_ =
       [0,
        [1, [0, _W_, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_None), 0]]],
        _ai_],
     _ak_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Could_not_apply_diff_Varia),
         _aj_]];
    return caml_call1(Base[246], _ak_);
   }
   function of_list_exn(of_list_exn_a, apply_a_exn, diffs){
    if(! diffs) return Diffable_Optional_diff[1];
    if(! diffs[2]){
     var hd = diffs[1];
     return caml_call1(Diffable_Optional_diff[2], hd);
    }
    function _$_(param){
     if(typeof param !== "number" && 1 === param[0]) return 1;
     return 0;
    }
    var
     _aa_ = caml_call1(Base_List[63], diffs),
     match = caml_call2(Base_List[143], _aa_, _$_),
     rest_rev = match[2],
     trailing_diffs_rev = match[1];
    function _ab_(param){
     if(typeof param !== "number" && 1 === param[0]){var a_diff = param[1]; return a_diff;}
     throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
    }
    var a_diffs = caml_call2(Base_List[66], trailing_diffs_rev, _ab_);
    a:
    {
     if(rest_rev){
      var t = rest_rev[1];
      if(typeof t === "number"){
       if(a_diffs){
        var
         _ac_ =
           [0,
            [1,
             [0,
              _Y_,
              [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Diff_some$1), 0]]],
            0],
         _ad_ =
           [0,
            [1,
             [0,
              _Z_,
              [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Set_to_none), 0]]],
            _ac_],
         _ae_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Could_not_combine_diffs_Va),
             _ad_]];
        return caml_call1(Base[246], _ae_);
       }
      }
      else if(1 === t[0]) break a;
      if(! a_diffs) return caml_call1(Diffable_Optional_diff[2], t);
      var
       a = t[1],
       _af_ = [0, caml_call3(Base_List[20], a_diffs, a, apply_a_exn)];
      return caml_call1(Diffable_Optional_diff[2], _af_);
     }
     if(a_diffs){
      var
       _ag_ = function(a_diff){return [1, a_diff];},
       _ah_ = caml_call1(of_list_exn_a, a_diffs);
      return caml_call2(Diffable_Optional_diff[12][2][2], _ah_, _ag_);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, ___], 1);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Basic_diffs);
   var
    Diffable_Basic_diffs =
      [0,
       [0,
        Diff_of_bool[14],
        Diff_of_bool[15],
        Diff_of_bool[16],
        Diff_of_bool[1],
        Diff_of_bool[2],
        Diff_of_bool[3],
        Diff_of_bool[4],
        Diff_of_bool[5],
        Diff_of_bool[6],
        Diff_of_bool[7],
        Diff_of_bool[8],
        Diff_of_bool[9],
        Diff_of_bool[10],
        Diff_of_bool[11],
        Diff_of_bool[12],
        Diff_of_bool[13]],
       [0,
        Diff_of_char[14],
        Diff_of_char[15],
        Diff_of_char[16],
        Diff_of_char[1],
        Diff_of_char[2],
        Diff_of_char[3],
        Diff_of_char[4],
        Diff_of_char[5],
        Diff_of_char[6],
        Diff_of_char[7],
        Diff_of_char[8],
        Diff_of_char[9],
        Diff_of_char[10],
        Diff_of_char[11],
        Diff_of_char[12],
        Diff_of_char[13]],
       [0,
        Diff_of_float[14],
        Diff_of_float[15],
        Diff_of_float[16],
        Diff_of_float[1],
        Diff_of_float[2],
        Diff_of_float[3],
        Diff_of_float[4],
        Diff_of_float[5],
        Diff_of_float[6],
        Diff_of_float[7],
        Diff_of_float[8],
        Diff_of_float[9],
        Diff_of_float[10],
        Diff_of_float[11],
        Diff_of_float[12],
        Diff_of_float[13]],
       [0,
        Diff_of_int[14],
        Diff_of_int[15],
        Diff_of_int[16],
        Diff_of_int[1],
        Diff_of_int[2],
        Diff_of_int[3],
        Diff_of_int[4],
        Diff_of_int[5],
        Diff_of_int[6],
        Diff_of_int[7],
        Diff_of_int[8],
        Diff_of_int[9],
        Diff_of_int[10],
        Diff_of_int[11],
        Diff_of_int[12],
        Diff_of_int[13]],
       [0,
        Diff_of_string[14],
        Diff_of_string[15],
        Diff_of_string[16],
        Diff_of_string[1],
        Diff_of_string[2],
        Diff_of_string[3],
        Diff_of_string[4],
        Diff_of_string[5],
        Diff_of_string[6],
        Diff_of_string[7],
        Diff_of_string[8],
        Diff_of_string[9],
        Diff_of_string[10],
        Diff_of_string[11],
        Diff_of_string[12],
        Diff_of_string[13]],
       [0,
        Diff_of_unit[14],
        Diff_of_unit[15],
        Diff_of_unit[16],
        Diff_of_unit[1],
        Diff_of_unit[2],
        Diff_of_unit[3],
        Diff_of_unit[4],
        Diff_of_unit[5],
        Diff_of_unit[6],
        Diff_of_unit[7],
        Diff_of_unit[8],
        Diff_of_unit[9],
        Diff_of_unit[10],
        Diff_of_unit[11],
        Diff_of_unit[12],
        Diff_of_unit[13]],
       [0,
        sexp_of_derived_on,
        derived_on_of_sexp,
        bin_shape_derived_on,
        bin_size_derived_on,
        bin_write_derived_on,
        bin_writer_derived_on,
        bin_read_derived_on$0,
        bin_read_derived_on,
        bin_reader_derived_on,
        bin_derived_on,
        quickcheck_generator$5,
        quickcheck_observer$5,
        quickcheck_shrinker$5,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_shape_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$12,
        bin_read_t$11,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5,
        get,
        apply_exn,
        of_list_exn]];
   runtime.caml_register_global
    (98, Diffable_Basic_diffs, cst_Diffable_Basic_diffs$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable
//# unitInfo: Requires: Diffable__Basic_diffs, Diffable__Diffable_intf, Diffable__Tuples, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable = "Diffable",
    cst_diffable = "diffable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Diffable_Basic_diffs = global_data.Diffable__Basic_diffs,
    Diffable_Tuples = global_data.Diffable__Tuples;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][1], "lib/src/diffable.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_diffable, "diffable.ml");
   var
    Diff_of_bool = Diffable_Basic_diffs[1],
    Diff_of_char = Diffable_Basic_diffs[2],
    Diff_of_float = Diffable_Basic_diffs[3],
    Diff_of_int = Diffable_Basic_diffs[4],
    Diff_of_string = Diffable_Basic_diffs[5],
    Diff_of_unit = Diffable_Basic_diffs[6],
    Diff_of_option = Diffable_Basic_diffs[7],
    Diff_of_bool$0 = Diffable_Basic_diffs[1],
    Diff_of_char$0 = Diffable_Basic_diffs[2],
    Diff_of_float$0 = Diffable_Basic_diffs[3],
    Diff_of_int$0 = Diffable_Basic_diffs[4],
    Diff_of_string$0 = Diffable_Basic_diffs[5],
    Diff_of_unit$0 = Diffable_Basic_diffs[6],
    Diff_of_option$0 = Diffable_Basic_diffs[7],
    max_supported = Diffable_Tuples[1],
    Tuple2 = Diffable_Tuples[2],
    Tuple3 = Diffable_Tuples[3],
    Tuple4 = Diffable_Tuples[4],
    Tuple5 = Diffable_Tuples[5],
    Tuple6 = Diffable_Tuples[6],
    For_ppx =
      [0,
       Diff_of_bool$0,
       Diff_of_char$0,
       Diff_of_float$0,
       Diff_of_int$0,
       Diff_of_string$0,
       Diff_of_unit$0,
       Diff_of_option$0,
       max_supported,
       Tuple2,
       Tuple3,
       Tuple4,
       Tuple5,
       Tuple6];
   caml_call1(Ppx_inline_test_lib[7], cst_diffable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable);
   var
    Diffable =
      [0,
       Diff_of_bool,
       Diff_of_char,
       Diff_of_float,
       Diff_of_int,
       Diff_of_string,
       Diff_of_unit,
       Diff_of_option,
       For_ppx];
   runtime.caml_register_global(13, Diffable, cst_Diffable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
