// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Faraday
//# unitInfo: Requires: Bigstringaf, Stdlib, Stdlib__Array, Stdlib__Bytes, Stdlib__Int32, Stdlib__Int64, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_faraday_ml = "lib/faraday.ml",
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_check_bound = runtime.caml_check_bound,
    caml_int32_bits_of_float = runtime.caml_int32_bits_of_float,
    caml_int64_bits_of_float = runtime.caml_int64_bits_of_float,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    deadbeef = "\xde\xad\xbe\xef",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_String = global_data.Stdlib__String,
    Dequeue_empty =
      [248, "Faraday.Dequeue_empty", runtime.caml_fresh_oo_id(0)],
    _d_ = [0, cst_lib_faraday_ml, 378, 4],
    _g_ = [0, cst_lib_faraday_ml, 480, 14],
    _h_ = [0, cst_lib_faraday_ml, 477, 4],
    _e_ = [0, cst_lib_faraday_ml, 462, 14],
    _f_ = [0, cst_lib_faraday_ml, 459, 4],
    cst_cannot_write_to_closed_wri = "cannot write to closed writer",
    _b_ = [0, cst_lib_faraday_ml, 131, 4],
    _a_ = [0, cst_lib_faraday_ml, 111, 4];
   function Deque(T){
    var sentinel = T[1];
    function create(size){return [0, caml_make_vect(size, sentinel), 0, 0];}
    function is_empty(t){return t[2] === t[3] ? 1 : 0;}
    function enqueue(e, t){
     if(t[3] === (t[1].length - 1 - 1 | 0)){
      var len = t[3] - t[2] | 0;
      if(0 < t[2]){
       caml_call5(Stdlib_Array[8], t[1], t[2], t[1], 0, len);
       caml_call4(Stdlib_Array[7], t[1], len, t[2], sentinel);
      }
      else{
       var
        old = t[1],
        new$0 = caml_make_vect(2 * (old.length - 1) | 0, sentinel);
       caml_call5(Stdlib_Array[8], old, t[2], new$0, 0, len);
       t[1] = new$0;
      }
      t[2] = 0;
      t[3] = len;
     }
     var _E_ = t[3];
     caml_check_bound(t[1], _E_)[1 + _E_] = e;
     t[3] = t[3] + 1 | 0;
     return 0;
    }
    function dequeue_exn(t){
     if(is_empty(t)) throw Dequeue_empty;
     var result = t[1][1 + t[2]];
     t[1][1 + t[2]] = sentinel;
     t[2] = t[2] + 1 | 0;
     return result;
    }
    function enqueue_front(e, t){
     if(0 >= t[2])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     t[2] = t[2] - 1 | 0;
     var _D_ = t[2];
     caml_check_bound(t[1], _D_)[1 + _D_] = e;
     return 0;
    }
    function map_to_list(t, f){
     var result = [0, 0], _z_ = t[3] - 1 | 0, _A_ = t[2];
     if(_z_ >= _A_){
      var i = _z_;
      for(;;){
       var _B_ = result[1];
       result[1] = [0, caml_call1(f, caml_check_bound(t[1], i)[1 + i]), _B_];
       var _C_ = i - 1 | 0;
       if(_A_ === i) break;
       var i = _C_;
      }
     }
     return result[1];
    }
    return [0,
            create,
            is_empty,
            enqueue,
            dequeue_exn,
            enqueue_front,
            map_to_list];
   }
   function lengthv(ts){
    var ts$0 = ts, acc = 0;
    for(;;){
     if(! ts$0) return acc;
     var
      ts$1 = ts$0[2],
      iovec = ts$0[1],
      acc$0 = iovec[3] + acc | 0,
      ts$0 = ts$1,
      acc = acc$0;
    }
   }
   var Flushed_reason = [0], buffer = caml_call1(Bigstringaf[1], 4), len = 4;
   function _c_(_x_, _y_){return caml_ba_set_1(buffer, _x_, _y_);}
   caml_call2(Stdlib_String[31], _c_, deadbeef);
   var
    sentinel = [0, buffer, 0, len],
    Buffers = Deque([0, sentinel]),
    sentinel$0 = [0, 0, function(param){return 0;}],
    Flushes = Deque([0, sentinel$0]);
   function of_bigstring(buffer){
    var _w_ = Flushes[1].call(null, 1);
    return [0, buffer, 0, 0, Buffers[1].call(null, 4), _w_, 0, 0, 0, 0];
   }
   function create(size){
    return of_bigstring(caml_call1(Bigstringaf[1], size));
   }
   function writable_exn(t){
    var _v_ = t[8];
    return _v_ ? caml_call1(Stdlib[2], cst_cannot_write_to_closed_wri) : _v_;
   }
   function schedule_iovec(t, opt, len, buffer){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    t[6] = t[6] + len | 0;
    return Buffers[3].call(null, [0, buffer, off, len], t[4]);
   }
   function flush_buffer(t){
    var len = t[3] - t[2] | 0, _t_ = 0 < len ? 1 : 0;
    if(_t_){
     var off = t[2];
     schedule_iovec(t, [0, off], len, t[1]);
     t[2] = t[3];
     var _u_ = 0;
    }
    else
     var _u_ = _t_;
    return _u_;
   }
   function flush_with_reason(t, f){
    t[9] = 0;
    flush_buffer(t);
    return Buffers[2].call(null, t[4])
            ? caml_call1(f, 2)
            : Flushes[3].call(null, [0, t[6], f], t[5]);
   }
   function flush(t, f){
    return flush_with_reason(t, function(param){return caml_call1(f, 0);});
   }
   function free_bytes_in_buffer(t){
    var buf_len = caml_call1(Bigstringaf[6], t[1]);
    return buf_len - t[3] | 0;
   }
   function schedule_bigstring(t, opt, len, a){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    writable_exn(t);
    flush_buffer(t);
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Bigstringaf[6], a) - off | 0;
    var _s_ = 0 < len$1 ? 1 : 0;
    return _s_ ? schedule_iovec(t, [0, off], len$1, a) : _s_;
   }
   function ensure_space(t, len){
    if(free_bytes_in_buffer(t) < len){
     flush_buffer(t);
     var
      _q_ = caml_call1(Bigstringaf[6], t[1]),
      _r_ = caml_call2(Stdlib[17], _q_, len);
     t[1] = caml_call1(Bigstringaf[1], _r_);
     t[3] = 0;
     t[2] = 0;
    }
    return;
   }
   function write_gen(t, length, blit, opt, len, a){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    writable_exn(t);
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, a) - off | 0;
    ensure_space(t, len$1);
    caml_call5(blit, a, off, t[1], t[3], len$1);
    t[3] = t[3] + len$1 | 0;
    return 0;
   }
   var length = runtime.caml_ml_string_length, blit = Bigstringaf[45];
   function write_string(t, off, len, a){
    return write_gen(t, length, blit, off, len, a);
   }
   var length$0 = runtime.caml_ml_bytes_length, blit$0 = Bigstringaf[46];
   function write_bytes(t, off, len, a){
    return write_gen(t, length$0, blit$0, off, len, a);
   }
   var length$1 = Bigstringaf[6], blit$1 = Bigstringaf[44];
   function write_bigstring(t, off, len, a){
    return write_gen(t, length$1, blit$1, off, len, a);
   }
   function write_char(t, c){
    writable_exn(t);
    ensure_space(t, 1);
    caml_ba_set_1(t[1], t[3], c);
    t[3] = t[3] + 1 | 0;
    return 0;
   }
   function write_uint8(t, b){
    writable_exn(t);
    ensure_space(t, 1);
    caml_ba_set_1(t[1], t[3], b);
    t[3] = t[3] + 1 | 0;
    return 0;
   }
   function write_uint16(t, i){
    writable_exn(t);
    ensure_space(t, 2);
    caml_call3(Bigstringaf[35], t[1], t[3], i);
    t[3] = t[3] + 2 | 0;
    return 0;
   }
   function write_uint32(t, i){
    writable_exn(t);
    ensure_space(t, 4);
    caml_call3(Bigstringaf[39], t[1], t[3], i);
    t[3] = t[3] + 4 | 0;
    return 0;
   }
   function write_uint48(t, i){
    writable_exn(t);
    ensure_space(t, 6);
    caml_call3
     (Bigstringaf[39],
      t[1],
      t[3],
      caml_int64_to_int32(caml_int64_shift_right_unsigne(i, 4)));
    caml_call3(Bigstringaf[35], t[1], t[3] + 2 | 0, caml_int64_to_int32(i));
    t[3] = t[3] + 6 | 0;
    return 0;
   }
   function write_uint64(t, i){
    writable_exn(t);
    ensure_space(t, 8);
    caml_call3(Bigstringaf[43], t[1], t[3], i);
    t[3] = t[3] + 8 | 0;
    return 0;
   }
   function write_float(t, f){
    writable_exn(t);
    ensure_space(t, 4);
    caml_call3(Bigstringaf[39], t[1], t[3], caml_int32_bits_of_float(f));
    t[3] = t[3] + 4 | 0;
    return 0;
   }
   function write_double(t, d){
    writable_exn(t);
    ensure_space(t, 8);
    caml_call3(Bigstringaf[43], t[1], t[3], caml_int64_bits_of_float(d));
    t[3] = t[3] + 8 | 0;
    return 0;
   }
   var
    BE =
      [0,
       write_uint16,
       write_uint32,
       write_uint48,
       write_uint64,
       write_float,
       write_double];
   function write_uint16$0(t, i){
    writable_exn(t);
    ensure_space(t, 2);
    caml_call3(Bigstringaf[34], t[1], t[3], i);
    t[3] = t[3] + 2 | 0;
    return 0;
   }
   function write_uint32$0(t, i){
    writable_exn(t);
    ensure_space(t, 4);
    caml_call3(Bigstringaf[38], t[1], t[3], i);
    t[3] = t[3] + 4 | 0;
    return 0;
   }
   function write_uint48$0(t, i){
    writable_exn(t);
    ensure_space(t, 6);
    caml_call3(Bigstringaf[34], t[1], t[3], caml_int64_to_int32(i));
    caml_call3
     (Bigstringaf[38],
      t[1],
      t[3] + 2 | 0,
      caml_int64_to_int32(caml_int64_shift_right_unsigne(i, 2)));
    t[3] = t[3] + 6 | 0;
    return 0;
   }
   function write_uint64$0(t, i){
    writable_exn(t);
    ensure_space(t, 8);
    caml_call3(Bigstringaf[42], t[1], t[3], i);
    t[3] = t[3] + 8 | 0;
    return 0;
   }
   function write_float$0(t, f){
    writable_exn(t);
    ensure_space(t, 4);
    caml_call3(Bigstringaf[38], t[1], t[3], caml_int32_bits_of_float(f));
    t[3] = t[3] + 4 | 0;
    return 0;
   }
   function write_double$0(t, d){
    writable_exn(t);
    ensure_space(t, 8);
    caml_call3(Bigstringaf[42], t[1], t[3], caml_int64_bits_of_float(d));
    t[3] = t[3] + 8 | 0;
    return 0;
   }
   var
    LE =
      [0,
       write_uint16$0,
       write_uint32$0,
       write_uint48$0,
       write_uint64$0,
       write_float$0,
       write_double$0];
   function close(t){t[8] = 1; return flush_buffer(t);}
   function is_closed(t){return t[8];}
   function pending_bytes(t){
    return (t[3] - t[2] | 0) + (t[6] - t[7] | 0) | 0;
   }
   function has_pending_output(t){return 0 !== pending_bytes(t) ? 1 : 0;}
   function yield$0(t){t[9] = 1; return 0;}
   function shift_internal(t, written$1, reason){
    a:
    {
     b:
     {
      var written = written$1;
      for(;;){
       try{var iovec = Buffers[4].call(null, t[4]);}
       catch(_p_){var _l_ = caml_wrap_exception(_p_); break;}
       var len$0 = iovec[3];
       if(len$0 > written) break b;
       var written$0 = written - len$0 | 0, written = written$0;
      }
      if(_l_ !== Dequeue_empty) throw caml_maybe_attach_backtrace(_l_, 0);
      if(0 !== written)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      if(t[2] === t[3]){t[2] = 0; t[3] = 0;}
      break a;
     }
     var len = iovec[3], off = iovec[2], buffer = iovec[1], _m_ = t[4];
     if(written >= len)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     Buffers[5].call
      (null, [0, buffer, off + written | 0, len - written | 0], _m_);
    }
    t[7] = t[7] + written$1 | 0;
    for(;;){
     try{var flush = Flushes[4].call(null, t[5]);}
     catch(_o_){
      var _n_ = caml_wrap_exception(_o_);
      if(_n_ === Dequeue_empty) return 0;
      throw caml_maybe_attach_backtrace(_n_, 0);
     }
     var f = flush[2], threshold = flush[1];
     if((threshold - Stdlib[20] | 0) > (t[7] - Stdlib[20] | 0))
      return Flushes[5].call(null, flush, t[5]);
     caml_call1(f, reason);
    }
   }
   function shift(t, written){return shift_internal(t, written, 0);}
   function operation(t){
    if(t[8]) t[9] = 0;
    flush_buffer(t);
    var nothing_to_do = 1 - has_pending_output(t);
    if(t[8] && nothing_to_do) return -611285096;
    if(! t[9] && ! nothing_to_do){
     var
      _k_ = function(x){return x;},
      iovecs = Buffers[6].call(null, t[4], _k_);
     return [0, 846875351, iovecs];
    }
    t[9] = 0;
    return 73271853;
   }
   function serialize(t, writev){
    for(;;){
     var next = operation(t);
     if(typeof next === "number") return next;
     var iovecs = next[2], match = caml_call1(writev, iovecs);
     if(typeof match === "number")
      close(t);
     else{
      var n = match[2];
      shift(t, n);
      if(1 - Buffers[2].call(null, t[4])) yield$0(t);
     }
    }
   }
   function serialize_to_string(t){
    close(t);
    var match = operation(t);
    if(typeof match === "number"){
     if(73271853 <= match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     return cst;
    }
    var
     iovecs = match[2],
     len = lengthv(iovecs),
     bytes = runtime.caml_create_bytes(len),
     pos = [0, 0];
    function _j_(param){
     var len = param[3], off = param[2], buffer = param[1];
     caml_call5(Bigstringaf[47], buffer, off, bytes, pos[1], len);
     pos[1] = pos[1] + len | 0;
     return 0;
    }
    caml_call2(Stdlib_List[18], _j_, iovecs);
    shift(t, len);
    if(-611285096 === operation(t))
     return caml_call1(Stdlib_Bytes[44], bytes);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   }
   function serialize_to_bigstring(t){
    close(t);
    var match = operation(t);
    if(typeof match === "number"){
     if(73271853 <= match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     return caml_call1(Bigstringaf[1], 0);
    }
    var
     iovecs = match[2],
     len = lengthv(iovecs),
     bs = caml_call1(Bigstringaf[1], len),
     pos = [0, 0];
    function _i_(param){
     var len = param[3], off = param[2], buffer = param[1];
     caml_call5(Bigstringaf[44], buffer, off, bs, pos[1], len);
     pos[1] = pos[1] + len | 0;
     return 0;
    }
    caml_call2(Stdlib_List[18], _i_, iovecs);
    shift(t, len);
    if(-611285096 === operation(t)) return bs;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
   }
   function drain(t){
    var acc = 0;
    for(;;){
     var match = operation(t);
     if(typeof match === "number"){
      if(73271853 > match) return acc;
     }
     else{
      var iovecs = match[2], len = lengthv(iovecs);
      shift_internal(t, len, 1);
      var acc$0 = len + acc | 0, acc = acc$0;
     }
    }
   }
   var
    Faraday =
      [0,
       create,
       of_bigstring,
       write_string,
       write_bytes,
       write_bigstring,
       write_gen,
       write_char,
       write_uint8,
       BE,
       LE,
       schedule_bigstring,
       free_bytes_in_buffer,
       has_pending_output,
       pending_bytes,
       yield$0,
       flush,
       Flushed_reason,
       flush_with_reason,
       close,
       is_closed,
       shift,
       drain,
       operation,
       serialize,
       serialize_to_string,
       serialize_to_bigstring];
   runtime.caml_register_global(18, Faraday, "Faraday");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
