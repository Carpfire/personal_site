// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ansi_kernel__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ansi_kernel = [0],
    Ansi_kernel$0 = [0, Ansi_kernel];
   runtime.caml_register_global(0, Ansi_kernel$0, "Ansi_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ansi_kernel__Color_256
//# unitInfo: Requires: Core, Core__Float, Core__List, Core__Option, Core__Stable, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ansi_kernel_Color_256$0 = "Ansi_kernel__Color_256",
    cst_ansi_kernel$0 = "ansi_kernel",
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    weights = [0, 0.299, 0.587, 0.114],
    scalers = [0, 36, [0, 6, [0, 1, 0]]],
    level_map_8bit_per_channel =
      [0,
       0,
       128,
       255,
       192,
       128,
       8,
       10,
       [0, 0, [0, 95, [0, 135, [0, 175, [0, 215, [0, 255, 0]]]]]],
       [0, 47.5, [0, 115., [0, 155., [0, 195., [0, 235., 0]]]]]],
    level_map_1000_per_channel =
      [0,
       0,
       500,
       1000,
       750,
       500,
       20,
       40,
       [0, 0, [0, 372, [0, 529, [0, 686, [0, 843, [0, 1000, 0]]]]]],
       [0, 186., [0, 450.5, [0, 607.5, [0, 764.5, [0, 921.5, 0]]]]]],
    Core = global_data.Core,
    Core_Tuple = global_data.Core__Tuple,
    Core_Float = global_data.Core__Float,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Stable = global_data.Core__Stable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ansi_kernel_Color_256$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ansi_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "ansi_kernel/src/color_256.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ansi_kernel$0, "color_256.ml");
   var
    t_of_sexp = Core_Stable[334],
    sexp_of_t = Core_Stable[333],
    compare = Core_Stable[438],
    hash_fold_t = Core_Stable[285],
    func = Core_Stable[299],
    _g_ =
      [0,
       [12,
        35,
        [4,
         6,
         [0, 1, 2],
         [0, 2],
         [4, 6, [0, 1, 2], [0, 2], [4, 6, [0, 1, 2], [0, 2], 0]]]],
       "#%2.2x%2.2x%2.2x"],
    _f_ = [0, 0, 1, 2],
    _e_ =
      [0,
       [11,
        "Grayscale value ",
        [4, 0, 0, 0, [11, " for 256-color palette out of range [0-23]", 0]]],
       "Grayscale value %d for 256-color palette out of range [0-23]"],
    _d_ =
      [0,
       [11,
        "RGB value ",
        [4,
         0,
         0,
         0,
         [11,
          " for 256-color palette is outside of the closed range [0-5]",
          0]]],
       "RGB value %d for 256-color palette is outside of the closed range [0-5]"],
    _c_ =
      [0,
       [11,
        "Attr.Color_256.of_int_exn: value ",
        [4, 0, 0, 0, [11, " is outside of the closed range [0-255]", 0]]],
       "Attr.Color_256.of_int_exn: value %d is outside of the closed range [0-255]"],
    cst_ansi_kernel = cst_ansi_kernel$0,
    cst_Ansi_kernel_Color_256 = cst_Ansi_kernel_Color_256$0;
   function hash(x){return caml_call1(func, x);}
   var
    equal = Core_Stable[452],
    V1 = [0, t_of_sexp, sexp_of_t, compare, hash_fold_t, hash, equal],
    Stable = [0, V1],
    sexp_of_t$0 = Stable[1][2],
    compare$0 = Stable[1][3],
    hash_fold_t$0 = Stable[1][4],
    func$0 = Stable[1][5];
   function hash$0(x){return caml_call1(func$0, x);}
   var equal$0 = Stable[1][6];
   function closest_cube_index(v, iterp_map){
    function _H_(idx, iterp_val){
     var _I_ = caml_call1(Core_Float[33], v);
     return caml_call2(Core_Float[130], _I_, iterp_val);
    }
    var match = caml_call2(Core_List[38], iterp_map, _H_);
    if(! match) return 5;
    var level = match[1][1];
    return level;
   }
   var _a_ = level_map_8bit_per_channel[9];
   function closest_8bit_cube_index(_G_){return closest_cube_index(_G_, _a_);}
   var _b_ = level_map_1000_per_channel[9];
   function closest_int1k_cube_index(_F_){return closest_cube_index(_F_, _b_);
   }
   function to_int(c){return c;}
   function of_int_exn(i){
    if(! caml_call2(Core[92], i, 0) && ! caml_call2(Core[91], i, 255))
     return i;
    return caml_call3(Core[246], _c_, i, 0);
   }
   function of_rgb6_exn(param){
    var
     b = param[3],
     g = param[2],
     r = param[1],
     in_vals = [0, r, [0, g, [0, b, 0]]];
    function _E_(acc, v, s){
     if(caml_call2(Core[88], v, 0) && caml_call2(Core[89], v, 5))
      return acc + caml_mul(v, s) | 0;
     return caml_call3(Core[246], _d_, v, 0);
    }
    return of_int_exn(caml_call4(Core_List[67], in_vals, scalers, 16, _E_));
   }
   function of_rgb(rgb){
    function _B_(f){
     var
      _C_ =
        caml_call1(Core_Float[65], f)
         ? caml_call3(Core_Float[139], f, 0., 1.)
         : 0.,
      _D_ = caml_call1(Core_Float[44], _C_ * 255.);
     return closest_8bit_cube_index(caml_call1(Core_Float[34], _D_));
    }
    return of_rgb6_exn(caml_call2(Core_Tuple[2][11], rgb, _B_));
   }
   function of_rgb_8bit(rgb){
    return of_rgb6_exn
            (caml_call2(Core_Tuple[2][11], rgb, closest_8bit_cube_index));
   }
   function of_rgb_int1k(rgb){
    return of_rgb6_exn
            (caml_call2(Core_Tuple[2][11], rgb, closest_int1k_cube_index));
   }
   function of_gray24_exn(g){
    a:
    {
     if(caml_call2(Core[88], g, 0) && caml_call2(Core[89], g, 23)){var _A_ = g + 232 | 0; break a;}
     var _A_ = caml_call3(Core[246], _e_, g, 0);
    }
    return of_int_exn(_A_);
   }
   function to_rgb_ints(ival, level_map){
    function bit3_result(v, v_set){
     function _z_(b){
      return caml_call2(Core[93], v & 1 << b, 0) ? v_set : level_map[1];
     }
     return caml_call2(Core_Tuple[2][11], _f_, _z_);
    }
    if(caml_call2(Core[92], ival, 7)) return bit3_result(ival, level_map[2]);
    if(caml_call2(Core[90], ival, 7))
     return [0, level_map[4], level_map[4], level_map[4]];
    if(caml_call2(Core[90], ival, 8))
     return [0, level_map[5], level_map[5], level_map[5]];
    if(caml_call2(Core[92], ival, 16))
     return bit3_result(ival - 8 | 0, level_map[3]);
    if(caml_call2(Core[91], ival, 255))
     return [0, level_map[3], level_map[3], level_map[3]];
    if(caml_call2(Core[88], ival, 232)){
     var
      gr_val = ival - 232 | 0,
      gr_part = level_map[6] + caml_mul(gr_val, level_map[7]) | 0;
     return [0, gr_part, gr_part, gr_part];
    }
    var
     rgb_val = ival - 16 | 0,
     r = rgb_val / 36 | 0,
     g = (rgb_val / 6 | 0) % 6 | 0,
     b = rgb_val % 6 | 0,
     _t_ = level_map[3],
     _u_ = caml_call2(Core_List[57], level_map[8], r),
     r_part = caml_call2(Core_Option[39], _u_, _t_),
     _v_ = level_map[3],
     _w_ = caml_call2(Core_List[57], level_map[8], g),
     g_part = caml_call2(Core_Option[39], _w_, _v_),
     _x_ = level_map[3],
     _y_ = caml_call2(Core_List[57], level_map[8], b),
     b_part = caml_call2(Core_Option[39], _y_, _x_);
    return [0, r_part, g_part, b_part];
   }
   function to_rgb_bytes(_s_){
    return to_rgb_ints(_s_, level_map_8bit_per_channel);
   }
   function to_rgb(c){
    if(caml_call2(Core[92], c, 16)) return [0, -791844958, c];
    function _q_(rgb){return caml_call2(Core[239], rgb, 255);}
    var _r_ = to_rgb_bytes(c);
    return [0, 4093677, caml_call2(Core_Tuple[2][11], _r_, _q_)];
   }
   function to_rgb_hex24(c){
    var match = to_rgb_bytes(c), b = match[3], g = match[2], r = match[1];
    return caml_call4(Core[265], _g_, r, g, b);
   }
   function to_luma(c){
    var rgb_bytes = to_rgb_bytes(c), _n_ = 1., _o_ = 0.;
    function f(byte_c, weight, acc){
     return acc + caml_call1(Core_Float[33], byte_c) * weight;
    }
    var
     _i_ = caml_call1(Core[234], weights),
     _j_ = f(caml_call1(Core[234], rgb_bytes), _i_, 0.),
     _k_ = caml_call1(Core[235], weights),
     _l_ = f(caml_call1(Core[235], rgb_bytes), _k_, _j_),
     _m_ = caml_call1(Core[236], weights),
     _p_ = f(caml_call1(Core[236], rgb_bytes), _m_, _l_) / 255.;
    return caml_call3(Core_Float[139], _p_, _o_, _n_);
   }
   function to_rgb_int1k(c){
    return to_rgb_ints(c, level_map_1000_per_channel);
   }
   function to_rgb6(c){
    var offset_ival = c - 16 | 0;
    if
     (!
      caml_call2(Core[92], offset_ival, 0)
      && ! caml_call2(Core[91], offset_ival, 215)){
     var
      r = offset_ival / 36 | 0,
      g = (offset_ival / 6 | 0) % 6 | 0,
      b = offset_ival % 6 | 0;
     return [0, r, g, b];
    }
    var _h_ = to_rgb_bytes(c);
    return caml_call2(Core_Tuple[2][11], _h_, closest_8bit_cube_index);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ansi_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ansi_kernel_Color_256);
   var
    Ansi_kernel_Color_256 =
      [0,
       sexp_of_t$0,
       compare$0,
       hash_fold_t$0,
       hash$0,
       equal$0,
       to_int,
       of_int_exn,
       of_rgb6_exn,
       of_rgb,
       of_rgb_8bit,
       of_rgb_int1k,
       of_gray24_exn,
       to_rgb,
       to_rgb_hex24,
       to_luma,
       to_rgb_bytes,
       to_rgb_int1k,
       to_rgb6,
       Stable];
   runtime.caml_register_global
    (34, Ansi_kernel_Color_256, cst_Ansi_kernel_Color_256$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ansi_kernel
//# unitInfo: Requires: Ansi_kernel__Color_256, Base__Hash, Core, Core__List, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst$2 = "\x1b[",
    cst_sm = "\x1b[%sm",
    cst$1 = ";",
    cst_Ansi_kernel$0 = "Ansi_kernel",
    cst_Bg = "Bg",
    cst_Black = "Black",
    cst_Blue = "Blue",
    cst_Bright = "Bright",
    cst_Color_256 = "Color_256",
    cst_Cyan = "Cyan",
    cst_Default_color = "Default_color",
    cst_Dim = "Dim",
    cst_Green = "Green",
    cst_Magenta = "Magenta",
    cst_Red = "Red",
    cst_Reverse = "Reverse",
    cst_Underscore = "Underscore",
    cst_White = "White",
    cst_Yellow = "Yellow",
    cst_ansi_kernel$0 = "ansi_kernel",
    cst_ansi_kernel_src_ansi_kerne$1 =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Attr.V1.t",
    cst_ansi_kernel_src_ansi_kerne$2 =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Attr.V2.t",
    cst_ansi_kernel_src_ansi_kerne =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Color.V1.t",
    cst_ansi_kernel_src_ansi_kerne$0 =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Color.V2.t",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$3,
    cst = cst$3,
    error_source_006 =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Color.V1.primary",
    error_source_021 = cst_ansi_kernel_src_ansi_kerne,
    error_source_023 = cst_ansi_kernel_src_ansi_kerne,
    error_source_043 =
      "ansi_kernel/src/ansi_kernel.ml.Stable.Color.V2.primary",
    error_source_055 = cst_ansi_kernel_src_ansi_kerne$0,
    error_source_060 = cst_ansi_kernel_src_ansi_kerne$0,
    error_source_080 = cst_ansi_kernel_src_ansi_kerne$1,
    error_source_085 = cst_ansi_kernel_src_ansi_kerne$1,
    error_source_105 = cst_ansi_kernel_src_ansi_kerne$2,
    error_source_110 = cst_ansi_kernel_src_ansi_kerne$2,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Base_Hash = global_data.Base__Hash,
    Ansi_kernel_Color_256 = global_data.Ansi_kernel__Color_256,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ansi_kernel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ansi_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "ansi_kernel/src/ansi_kernel.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ansi_kernel$0, "ansi_kernel.ml");
   var
    _Y_ = [0, cst$1],
    _Z_ = [0, [11, cst$2, [2, 0, [12, 109, 0]]], cst_sm],
    _X_ = [0, 8, 0],
    _W_ = [0, 0, 0],
    _V_ = [0, 5, 0],
    _U_ = [0, "Hidden"],
    _T_ = [0, "Reset"],
    _S_ = [0, "Blink"],
    _Q_ = [0, cst$1],
    _R_ = [0, [11, cst$2, [2, 0, [12, 109, 0]]], cst_sm],
    _N_ = [0, 2, 0],
    _M_ = [0, 7, 0],
    _P_ = [0, 1, 0],
    _O_ = [0, 4, 0],
    _E_ = [0, 32, 0],
    _F_ = [0, 36, 0],
    _G_ = [0, 34, 0],
    _H_ = [0, 31, 0],
    _D_ = [0, 33, 0],
    _I_ = [0, 37, 0],
    _J_ = [0, 35, 0],
    _K_ = [0, 39, 0],
    _L_ = [0, 30, 0],
    _z_ = [0, cst_Dim],
    _y_ = [0, cst_Reverse],
    _B_ = [0, cst_Bright],
    _A_ = [0, cst_Underscore],
    _C_ = [0, cst_Bg],
    _u_ = [0, cst_Dim],
    _t_ = [0, cst_Reverse],
    _w_ = [0, cst_Bright],
    _v_ = [0, cst_Underscore],
    _x_ = [0, cst_Bg],
    _r_ = [0, cst_Default_color],
    _s_ = [0, cst_Color_256],
    _j_ = [0, cst_Green],
    _k_ = [0, cst_Cyan],
    _l_ = [0, cst_Blue],
    _m_ = [0, cst_Yellow],
    _n_ = [0, cst_Red],
    _o_ = [0, cst_White],
    _p_ = [0, cst_Magenta],
    _q_ = [0, cst_Black],
    _i_ = [0, cst_Color_256],
    _a_ = [0, cst_Green],
    _b_ = [0, cst_Cyan],
    _c_ = [0, cst_Blue],
    _d_ = [0, cst_Yellow],
    _e_ = [0, cst_Red],
    _f_ = [0, cst_White],
    _g_ = [0, cst_Magenta],
    _h_ = [0, cst_Black],
    cst_ansi_kernel = cst_ansi_kernel$0,
    cst_Ansi_kernel = cst_Ansi_kernel$0;
   function t_of_sexp(sexp_013){
    try{
     if(0 === sexp_013[0])
      var
       atom_002 = sexp_013[1],
       _aX_ =
         caml_string_notequal(atom_002, cst_Black)
          ? caml_string_notequal
             (atom_002, cst_Blue)
            ? caml_string_notequal
               (atom_002, cst_Cyan)
              ? caml_string_notequal
                 (atom_002, cst_Green)
                ? caml_string_notequal
                   (atom_002, cst_Magenta)
                  ? caml_string_notequal
                     (atom_002, cst_Red)
                    ? caml_string_notequal
                       (atom_002, cst_White)
                      ? caml_string_notequal
                         (atom_002, cst_Yellow)
                        ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                        : 82908052
                      : -588596599
                    : 4100401
                  : -605101559
                : 756711075
              : 749039939
            : 737308346
          : -937474657;
     else{
      var _aU_ = sexp_013[1];
      if(_aU_){
       var match = _aU_[1];
       if(0 === match[0])
        var
         atom_002$0 = match[1],
         _aX_ =
           caml_string_notequal(atom_002$0, cst_Black)
            ? caml_string_notequal
               (atom_002$0, cst_Blue)
              ? caml_string_notequal
                 (atom_002$0, cst_Cyan)
                ? caml_string_notequal
                   (atom_002$0, cst_Green)
                  ? caml_string_notequal
                     (atom_002$0, cst_Magenta)
                    ? caml_string_notequal
                       (atom_002$0, cst_Red)
                      ? caml_string_notequal
                         (atom_002$0, cst_White)
                        ? caml_string_notequal
                           (atom_002$0, cst_Yellow)
                          ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                          : caml_call2
                            (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
                        : caml_call2
                          (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_013);
       else
        var
         _aX_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_006, sexp_013);
      }
      else
       var
        _aX_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_006, sexp_013);
     }
     return _aX_;
    }
    catch(_aY_){
     var _aV_ = caml_wrap_exception(_aY_);
     if(_aV_ !== Sexplib0_Sexp_conv_error[22])
      throw caml_maybe_attach_backtrace(_aV_, 0);
     if(0 === sexp_013[0]){
      var atom_014 = sexp_013[1];
      return caml_string_notequal(atom_014, cst_Color_256)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[27], error_source_021, sexp_013);
     }
     var _aW_ = sexp_013[1];
     if(! _aW_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_021, sexp_013);
     var match$0 = _aW_[1];
     if(0 !== match$0[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[28], error_source_021, sexp_013);
     var sexp_args_017 = _aW_[2], atom_014$0 = match$0[1];
     if(caml_string_notequal(atom_014$0, cst_Color_256))
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     if(sexp_args_017 && ! sexp_args_017[2]){
      var
       arg0_019 = sexp_args_017[1],
       res0_020 = caml_call1(Ansi_kernel_Color_256[19][1][1], arg0_019);
      return [0, -782720297, res0_020];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_021,
              atom_014$0,
              sexp_013);
    }
   }
   function t_of_sexp$0(sexp_022){
    try{var _aS_ = t_of_sexp(sexp_022); return _aS_;}
    catch(_aT_){
     var _aR_ = caml_wrap_exception(_aT_);
     if(_aR_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_023, sexp_022);
     throw caml_maybe_attach_backtrace(_aR_, 0);
    }
   }
   function sexp_of_t(v_024){
    if(typeof v_024 === "number")
     return 82908052 <= v_024
             ? 749039939
               <= v_024
               ? 756711075 <= v_024 ? _a_ : _b_
               : 737308346 <= v_024 ? _c_ : _d_
             : -588596599
               <= v_024
               ? 4100401 <= v_024 ? _e_ : _f_
               : -605101559 <= v_024 ? _g_ : _h_;
    var v_025 = v_024[2];
    return [1,
            [0,
             _i_,
             [0, caml_call1(Ansi_kernel_Color_256[19][1][2], v_025), 0]]];
   }
   function compare(a_026, b_027){
    if(a_026 === b_027) return 0;
    a:
    if(typeof a_026 === "number"){
     if(typeof b_027 === "number"){
      if(4100402 <= b_027){
       if(737308347 <= b_027){
        if(749039939 !== b_027 && 756711075 !== b_027) break a;
       }
       else if(82908052 !== b_027 && 737308346 > b_027) break a;
      }
      else
       if(-605101558 <= b_027){
        if(-588596599 !== b_027 && 4100401 > b_027) break a;
       }
       else if(-937474657 !== b_027 && -605101559 > b_027) break a;
      if(a_026 === b_027) return 0;
      if(82908052 <= a_026){
       if(749039939 <= a_026){
        if(756711075 <= a_026){
         if(typeof b_027 === "number" && 756711075 === b_027) return 0;
        }
        else if(typeof b_027 === "number" && 749039939 === b_027) return 0;
       }
       else
        if(737308346 <= a_026){
         if(typeof b_027 === "number" && 737308346 === b_027) return 0;
        }
        else if(typeof b_027 === "number" && 82908052 === b_027) return 0;
      }
      else
       if(-588596599 <= a_026){
        if(4100401 <= a_026){
         if(typeof b_027 === "number" && 4100401 === b_027) return 0;
        }
        else if(typeof b_027 === "number" && -588596599 === b_027) return 0;
       }
       else
        if(-605101559 <= a_026){
         if(typeof b_027 === "number" && -605101559 === b_027) return 0;
        }
        else if(typeof b_027 === "number" && -937474657 === b_027) return 0;
      return caml_int_compare(a_026, b_027);
     }
    }
    else if(typeof b_027 !== "number" && -782720297 === b_027[1]){
     var right_031 = b_027[2], left_030 = a_026[2];
     return caml_call2(Ansi_kernel_Color_256[19][1][3], left_030, right_031);
    }
    return caml_compare(a_026, b_027);
   }
   function hash_fold_t(hsv, arg){
    if(typeof arg === "number")
     return 82908052 <= arg
             ? 749039939
               <= arg
               ? 756711075
                 <= arg
                 ? caml_call2(Base_Hash[3], hsv, 756711075)
                 : caml_call2(Base_Hash[3], hsv, 749039939)
               : 737308346
                 <= arg
                 ? caml_call2(Base_Hash[3], hsv, 737308346)
                 : caml_call2(Base_Hash[3], hsv, 82908052)
             : -588596599
               <= arg
               ? 4100401
                 <= arg
                 ? caml_call2(Base_Hash[3], hsv, 4100401)
                 : caml_call2(Base_Hash[3], hsv, -588596599)
               : -605101559
                 <= arg
                 ? caml_call2(Base_Hash[3], hsv, -605101559)
                 : caml_call2(Base_Hash[3], hsv, -937474657);
    var v = arg[2], hsv$0 = caml_call2(Base_Hash[3], hsv, -782720297);
    return caml_call2(Ansi_kernel_Color_256[19][1][4], hsv$0, v);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _aQ_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _aQ_);
   }
   function equal(a_032, b_033){
    if(a_032 === b_033) return 1;
    a:
    if(typeof a_032 === "number"){
     if(typeof b_033 === "number"){
      if(4100402 <= b_033){
       if(737308347 <= b_033){
        if(749039939 !== b_033 && 756711075 !== b_033) break a;
       }
       else if(82908052 !== b_033 && 737308346 > b_033) break a;
      }
      else
       if(-605101558 <= b_033){
        if(-588596599 !== b_033 && 4100401 > b_033) break a;
       }
       else if(-937474657 !== b_033 && -605101559 > b_033) break a;
      if(a_032 === b_033) return 1;
      if(82908052 <= a_032){
       if(749039939 <= a_032){
        if(756711075 <= a_032){
         if(typeof b_033 === "number" && 756711075 === b_033) return 1;
        }
        else if(typeof b_033 === "number" && 749039939 === b_033) return 1;
       }
       else
        if(737308346 <= a_032){
         if(typeof b_033 === "number" && 737308346 === b_033) return 1;
        }
        else if(typeof b_033 === "number" && 82908052 === b_033) return 1;
      }
      else
       if(-588596599 <= a_032){
        if(4100401 <= a_032){
         if(typeof b_033 === "number" && 4100401 === b_033) return 1;
        }
        else if(typeof b_033 === "number" && -588596599 === b_033) return 1;
       }
       else
        if(-605101559 <= a_032){
         if(typeof b_033 === "number" && -605101559 === b_033) return 1;
        }
        else if(typeof b_033 === "number" && -937474657 === b_033) return 1;
      return a_032 === b_033 ? 1 : 0;
     }
    }
    else if(typeof b_033 !== "number" && -782720297 === b_033[1]){
     var right_037 = b_033[2], left_036 = a_032[2];
     return caml_call2(Ansi_kernel_Color_256[19][1][6], left_036, right_037);
    }
    return caml_equal(a_032, b_033);
   }
   function t_of_sexp$1(sexp_050){
    try{
     if(0 === sexp_050[0])
      var
       atom_039 = sexp_050[1],
       _aO_ =
         caml_string_notequal(atom_039, cst_Black)
          ? caml_string_notequal
             (atom_039, cst_Blue)
            ? caml_string_notequal
               (atom_039, cst_Cyan)
              ? caml_string_notequal
                 (atom_039, cst_Green)
                ? caml_string_notequal
                   (atom_039, cst_Magenta)
                  ? caml_string_notequal
                     (atom_039, cst_Red)
                    ? caml_string_notequal
                       (atom_039, cst_White)
                      ? caml_string_notequal
                         (atom_039, cst_Yellow)
                        ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                        : 82908052
                      : -588596599
                    : 4100401
                  : -605101559
                : 756711075
              : 749039939
            : 737308346
          : -937474657;
     else{
      var _aL_ = sexp_050[1];
      if(_aL_){
       var match = _aL_[1];
       if(0 === match[0])
        var
         atom_039$0 = match[1],
         _aO_ =
           caml_string_notequal(atom_039$0, cst_Black)
            ? caml_string_notequal
               (atom_039$0, cst_Blue)
              ? caml_string_notequal
                 (atom_039$0, cst_Cyan)
                ? caml_string_notequal
                   (atom_039$0, cst_Green)
                  ? caml_string_notequal
                     (atom_039$0, cst_Magenta)
                    ? caml_string_notequal
                       (atom_039$0, cst_Red)
                      ? caml_string_notequal
                         (atom_039$0, cst_White)
                        ? caml_string_notequal
                           (atom_039$0, cst_Yellow)
                          ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                          : caml_call2
                            (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
                        : caml_call2
                          (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_043, sexp_050);
       else
        var
         _aO_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_043, sexp_050);
      }
      else
       var
        _aO_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_043, sexp_050);
     }
     return _aO_;
    }
    catch(_aP_){
     var _aM_ = caml_wrap_exception(_aP_);
     if(_aM_ !== Sexplib0_Sexp_conv_error[22])
      throw caml_maybe_attach_backtrace(_aM_, 0);
     if(0 === sexp_050[0]){
      var atom_051 = sexp_050[1];
      return caml_string_notequal(atom_051, cst_Color_256)
              ? caml_string_notequal
                 (atom_051, cst_Default_color)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : -736598011
              : caml_call2
                (Sexplib0_Sexp_conv_error[27], error_source_055, sexp_050);
     }
     var _aN_ = sexp_050[1];
     if(! _aN_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_055, sexp_050);
     var match$0 = _aN_[1];
     if(0 !== match$0[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[28], error_source_055, sexp_050);
     var sexp_args_054 = _aN_[2], atom_051$0 = match$0[1];
     if(caml_string_notequal(atom_051$0, cst_Color_256))
      return caml_string_notequal(atom_051$0, cst_Default_color)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_055, sexp_050);
     if(sexp_args_054 && ! sexp_args_054[2]){
      var
       arg0_057 = sexp_args_054[1],
       res0_058 = caml_call1(Ansi_kernel_Color_256[19][1][1], arg0_057);
      return [0, -782720297, res0_058];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_055,
              atom_051$0,
              sexp_050);
    }
   }
   function t_of_sexp$2(sexp_059){
    try{var _aJ_ = t_of_sexp$1(sexp_059); return _aJ_;}
    catch(_aK_){
     var _aI_ = caml_wrap_exception(_aK_);
     if(_aI_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_060, sexp_059);
     throw caml_maybe_attach_backtrace(_aI_, 0);
    }
   }
   function sexp_of_t$0(v_061){
    if(typeof v_061 === "number")
     return -736598011 === v_061
             ? _r_
             : 82908052
               <= v_061
               ? 749039939
                 <= v_061
                 ? 756711075 <= v_061 ? _j_ : _k_
                 : 737308346 <= v_061 ? _l_ : _m_
               : -588596599
                 <= v_061
                 ? 4100401 <= v_061 ? _n_ : _o_
                 : -605101559 <= v_061 ? _p_ : _q_;
    var v_062 = v_061[2];
    return [1,
            [0,
             _s_,
             [0, caml_call1(Ansi_kernel_Color_256[19][1][2], v_062), 0]]];
   }
   function compare$0(a_063, b_064){
    if(a_063 === b_064) return 0;
    a:
    if(typeof a_063 === "number"){
     if(-736598011 === a_063){
      if(typeof b_064 === "number" && -736598011 === b_064) return 0;
     }
     else if(typeof b_064 === "number"){
      if(4100402 <= b_064){
       if(737308347 <= b_064){
        if(749039939 !== b_064 && 756711075 !== b_064) break a;
       }
       else if(82908052 !== b_064 && 737308346 > b_064) break a;
      }
      else
       if(-605101558 <= b_064){
        if(-588596599 !== b_064 && 4100401 > b_064) break a;
       }
       else if(-937474657 !== b_064 && -605101559 > b_064) break a;
      if(a_063 === b_064) return 0;
      if(82908052 <= a_063){
       if(749039939 <= a_063){
        if(756711075 <= a_063){
         if(typeof b_064 === "number" && 756711075 === b_064) return 0;
        }
        else if(typeof b_064 === "number" && 749039939 === b_064) return 0;
       }
       else
        if(737308346 <= a_063){
         if(typeof b_064 === "number" && 737308346 === b_064) return 0;
        }
        else if(typeof b_064 === "number" && 82908052 === b_064) return 0;
      }
      else
       if(-588596599 <= a_063){
        if(4100401 <= a_063){
         if(typeof b_064 === "number" && 4100401 === b_064) return 0;
        }
        else if(typeof b_064 === "number" && -588596599 === b_064) return 0;
       }
       else
        if(-605101559 <= a_063){
         if(typeof b_064 === "number" && -605101559 === b_064) return 0;
        }
        else if(typeof b_064 === "number" && -937474657 === b_064) return 0;
      return caml_int_compare(a_063, b_064);
     }
    }
    else if(typeof b_064 !== "number" && -782720297 === b_064[1]){
     var right_068 = b_064[2], left_067 = a_063[2];
     return caml_call2(Ansi_kernel_Color_256[19][1][3], left_067, right_068);
    }
    return caml_compare(a_063, b_064);
   }
   function hash_fold_t$0(hsv, arg){
    if(typeof arg === "number")
     return -736598011 === arg
             ? caml_call2(Base_Hash[3], hsv, -736598011)
             : 82908052
               <= arg
               ? 749039939
                 <= arg
                 ? 756711075
                   <= arg
                   ? caml_call2(Base_Hash[3], hsv, 756711075)
                   : caml_call2(Base_Hash[3], hsv, 749039939)
                 : 737308346
                   <= arg
                   ? caml_call2(Base_Hash[3], hsv, 737308346)
                   : caml_call2(Base_Hash[3], hsv, 82908052)
               : -588596599
                 <= arg
                 ? 4100401
                   <= arg
                   ? caml_call2(Base_Hash[3], hsv, 4100401)
                   : caml_call2(Base_Hash[3], hsv, -588596599)
                 : -605101559
                   <= arg
                   ? caml_call2(Base_Hash[3], hsv, -605101559)
                   : caml_call2(Base_Hash[3], hsv, -937474657);
    var v = arg[2], hsv$0 = caml_call2(Base_Hash[3], hsv, -782720297);
    return caml_call2(Ansi_kernel_Color_256[19][1][4], hsv$0, v);
   }
   function hash$0(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _aH_ = hash_fold_t$0(hsv, arg);
    return caml_call1(Base_Hash[9], _aH_);
   }
   function equal$0(a_069, b_070){
    if(a_069 === b_070) return 1;
    a:
    if(typeof a_069 === "number"){
     if(-736598011 === a_069){
      if(typeof b_070 === "number" && -736598011 === b_070) return 1;
     }
     else if(typeof b_070 === "number"){
      if(4100402 <= b_070){
       if(737308347 <= b_070){
        if(749039939 !== b_070 && 756711075 !== b_070) break a;
       }
       else if(82908052 !== b_070 && 737308346 > b_070) break a;
      }
      else
       if(-605101558 <= b_070){
        if(-588596599 !== b_070 && 4100401 > b_070) break a;
       }
       else if(-937474657 !== b_070 && -605101559 > b_070) break a;
      if(a_069 === b_070) return 1;
      if(82908052 <= a_069){
       if(749039939 <= a_069){
        if(756711075 <= a_069){
         if(typeof b_070 === "number" && 756711075 === b_070) return 1;
        }
        else if(typeof b_070 === "number" && 749039939 === b_070) return 1;
       }
       else
        if(737308346 <= a_069){
         if(typeof b_070 === "number" && 737308346 === b_070) return 1;
        }
        else if(typeof b_070 === "number" && 82908052 === b_070) return 1;
      }
      else
       if(-588596599 <= a_069){
        if(4100401 <= a_069){
         if(typeof b_070 === "number" && 4100401 === b_070) return 1;
        }
        else if(typeof b_070 === "number" && -588596599 === b_070) return 1;
       }
       else
        if(-605101559 <= a_069){
         if(typeof b_070 === "number" && -605101559 === b_070) return 1;
        }
        else if(typeof b_070 === "number" && -937474657 === b_070) return 1;
      return a_069 === b_070 ? 1 : 0;
     }
    }
    else if(typeof b_070 !== "number" && -782720297 === b_070[1]){
     var right_074 = b_070[2], left_073 = a_069[2];
     return caml_call2(Ansi_kernel_Color_256[19][1][6], left_073, right_074);
    }
    return caml_equal(a_069, b_070);
   }
   function of_v1(t){return t;}
   function to_v1(t, foreground){
    if(typeof t === "number" && -736598011 === t)
     return foreground ? -588596599 : -937474657;
    return t;
   }
   function primary_of_v1(t){return t;}
   function primary_to_v1(t){return t;}
   function t_of_sexp$3(sexp_084){
    try{
     a:
     if(0 === sexp_084[0]){
      var atom_076 = sexp_084[1];
      if(caml_string_notequal(atom_076, cst_Bright))
       if(caml_string_notequal(atom_076, cst_Dim))
        if(caml_string_notequal(atom_076, cst_Reverse))
         if(caml_string_notequal(atom_076, cst_Underscore))
          try{var _ay_ = t_of_sexp(sexp_084), _aD_ = _ay_;}
          catch(_aF_){
           var _ax_ = caml_wrap_exception(_aF_);
           if(_ax_ !== Sexplib0_Sexp_conv_error[22])
            throw caml_maybe_attach_backtrace(_ax_, 0);
           var
            _aD_ =
              caml_string_notequal(atom_076, cst_Bg)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_080, sexp_084);
          }
         else
          var _aD_ = -911610022;
        else
         var _aD_ = -397582078;
       else
        var _aD_ = 3405096;
      else
       var _aD_ = -856564646;
     }
     else{
      var _az_ = sexp_084[1];
      if(_az_){
       var match = _az_[1];
       if(0 === match[0]){
        var sexp_args_079 = _az_[2], atom_076$0 = match[1];
        try{var _aB_ = t_of_sexp(sexp_084), _aD_ = _aB_;}
        catch(_aG_){
         var _aA_ = caml_wrap_exception(_aG_);
         if(_aA_ !== Sexplib0_Sexp_conv_error[22])
          throw caml_maybe_attach_backtrace(_aA_, 0);
         if(caml_string_notequal(atom_076$0, cst_Bg))
          var
           _aD_ =
             caml_string_notequal(atom_076$0, cst_Bright)
              ? caml_string_notequal
                 (atom_076$0, cst_Dim)
                ? caml_string_notequal
                   (atom_076$0, cst_Reverse)
                  ? caml_string_notequal
                     (atom_076$0, cst_Underscore)
                    ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_080, sexp_084)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_080, sexp_084)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_080, sexp_084)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_080, sexp_084);
         else{
          if(sexp_args_079 && ! sexp_args_079[2]){
           var
            arg0_082 = sexp_args_079[1],
            res0_083 = t_of_sexp$0(arg0_082),
            _aD_ = [0, 14821, res0_083];
           break a;
          }
          var
           _aD_ =
             caml_call3
              (Sexplib0_Sexp_conv_error[26],
               error_source_080,
               atom_076$0,
               sexp_084);
         }
        }
       }
       else
        var
         _aD_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_080, sexp_084);
      }
      else
       var
        _aD_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_080, sexp_084);
     }
     return _aD_;
    }
    catch(_aE_){
     var _aC_ = caml_wrap_exception(_aE_);
     if(_aC_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_085, sexp_084);
     throw caml_maybe_attach_backtrace(_aC_, 0);
    }
   }
   function sexp_of_t$1(v_086){
    if(typeof v_086 === "number")
     if(-605101559 <= v_086){
      if(-397582078 === v_086) return _t_;
      if(3405096 === v_086) return _u_;
     }
     else{
      if(-911610022 === v_086) return _v_;
      if(-856564646 <= v_086) return _w_;
     }
    else if(14821 <= v_086[1]){
     var v_087 = v_086[2];
     return [1, [0, _x_, [0, sexp_of_t(v_087), 0]]];
    }
    return sexp_of_t(v_086);
   }
   function compare$1(a_088, b_089){
    if(a_088 === b_089) return 0;
    a:
    {
     if(typeof a_088 === "number")
      if(-605101559 <= a_088){
       if(-397582078 === a_088){
        if(typeof b_089 !== "number") break a;
        if(-397582078 === b_089) return 0;
        break a;
       }
       if(3405096 === a_088){
        if(typeof b_089 !== "number") break a;
        if(3405096 === b_089) return 0;
        break a;
       }
      }
      else{
       if(-911610022 === a_088){
        if(typeof b_089 !== "number") break a;
        if(-911610022 === b_089) return 0;
        break a;
       }
       if(-856564646 <= a_088){
        if(typeof b_089 !== "number") break a;
        if(-856564646 === b_089) return 0;
        break a;
       }
      }
     else if(14821 <= a_088[1]){
      if(typeof b_089 === "number") break a;
      if(14821 !== b_089[1]) break a;
      var right_093 = b_089[2], left_092 = a_088[2];
      return compare(left_092, right_093);
     }
     if(typeof b_089 === "number"){
      if(4100402 <= b_089){
       if(737308347 <= b_089){
        if(749039939 !== b_089 && 756711075 !== b_089) break a;
       }
       else if(82908052 !== b_089 && 737308346 > b_089) break a;
      }
      else
       if(-605101558 <= b_089){
        if(-588596599 !== b_089 && 4100401 > b_089) break a;
       }
       else if(-937474657 !== b_089 && -605101559 > b_089) break a;
     }
     else if(-782720297 !== b_089[1]) break a;
     return compare(a_088, b_089);
    }
    return caml_compare(a_088, b_089);
   }
   function hash_fold_t$1(hsv, arg){
    if(typeof arg === "number")
     if(-605101559 <= arg){
      if(-397582078 === arg) return caml_call2(Base_Hash[3], hsv, -397582078);
      if(3405096 === arg) return caml_call2(Base_Hash[3], hsv, 3405096);
     }
     else{
      if(-911610022 === arg) return caml_call2(Base_Hash[3], hsv, -911610022);
      if(-856564646 <= arg) return caml_call2(Base_Hash[3], hsv, -856564646);
     }
    else if(14821 <= arg[1]){
     var v = arg[2], hsv$0 = caml_call2(Base_Hash[3], hsv, 14821);
     return hash_fold_t(hsv$0, v);
    }
    return hash_fold_t(hsv, arg);
   }
   function hash$1(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _aw_ = hash_fold_t$1(hsv, arg);
    return caml_call1(Base_Hash[9], _aw_);
   }
   function equal$1(a_094, b_095){
    if(a_094 === b_095) return 1;
    a:
    {
     if(typeof a_094 === "number")
      if(-605101559 <= a_094){
       if(-397582078 === a_094){
        if(typeof b_095 !== "number") break a;
        if(-397582078 === b_095) return 1;
        break a;
       }
       if(3405096 === a_094){
        if(typeof b_095 !== "number") break a;
        if(3405096 === b_095) return 1;
        break a;
       }
      }
      else{
       if(-911610022 === a_094){
        if(typeof b_095 !== "number") break a;
        if(-911610022 === b_095) return 1;
        break a;
       }
       if(-856564646 <= a_094){
        if(typeof b_095 !== "number") break a;
        if(-856564646 === b_095) return 1;
        break a;
       }
      }
     else if(14821 <= a_094[1]){
      if(typeof b_095 === "number") break a;
      if(14821 !== b_095[1]) break a;
      var right_099 = b_095[2], left_098 = a_094[2];
      return equal(left_098, right_099);
     }
     if(typeof b_095 === "number"){
      if(4100402 <= b_095){
       if(737308347 <= b_095){
        if(749039939 !== b_095 && 756711075 !== b_095) break a;
       }
       else if(82908052 !== b_095 && 737308346 > b_095) break a;
      }
      else
       if(-605101558 <= b_095){
        if(-588596599 !== b_095 && 4100401 > b_095) break a;
       }
       else if(-937474657 !== b_095 && -605101559 > b_095) break a;
     }
     else if(-782720297 !== b_095[1]) break a;
     return equal(a_094, b_095);
    }
    return caml_equal(a_094, b_095);
   }
   function t_of_sexp$4(sexp_109){
    try{
     a:
     if(0 === sexp_109[0]){
      var atom_101 = sexp_109[1];
      if(caml_string_notequal(atom_101, cst_Bright))
       if(caml_string_notequal(atom_101, cst_Dim))
        if(caml_string_notequal(atom_101, cst_Reverse))
         if(caml_string_notequal(atom_101, cst_Underscore))
          try{var _an_ = t_of_sexp$1(sexp_109), _as_ = _an_;}
          catch(_au_){
           var _am_ = caml_wrap_exception(_au_);
           if(_am_ !== Sexplib0_Sexp_conv_error[22])
            throw caml_maybe_attach_backtrace(_am_, 0);
           var
            _as_ =
              caml_string_notequal(atom_101, cst_Bg)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_105, sexp_109);
          }
         else
          var _as_ = -911610022;
        else
         var _as_ = -397582078;
       else
        var _as_ = 3405096;
      else
       var _as_ = -856564646;
     }
     else{
      var _ao_ = sexp_109[1];
      if(_ao_){
       var match = _ao_[1];
       if(0 === match[0]){
        var sexp_args_104 = _ao_[2], atom_101$0 = match[1];
        try{var _aq_ = t_of_sexp$1(sexp_109), _as_ = _aq_;}
        catch(_av_){
         var _ap_ = caml_wrap_exception(_av_);
         if(_ap_ !== Sexplib0_Sexp_conv_error[22])
          throw caml_maybe_attach_backtrace(_ap_, 0);
         if(caml_string_notequal(atom_101$0, cst_Bg))
          var
           _as_ =
             caml_string_notequal(atom_101$0, cst_Bright)
              ? caml_string_notequal
                 (atom_101$0, cst_Dim)
                ? caml_string_notequal
                   (atom_101$0, cst_Reverse)
                  ? caml_string_notequal
                     (atom_101$0, cst_Underscore)
                    ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_105, sexp_109)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_105, sexp_109)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_105, sexp_109)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_105, sexp_109);
         else{
          if(sexp_args_104 && ! sexp_args_104[2]){
           var
            arg0_107 = sexp_args_104[1],
            res0_108 = t_of_sexp$2(arg0_107),
            _as_ = [0, 14821, res0_108];
           break a;
          }
          var
           _as_ =
             caml_call3
              (Sexplib0_Sexp_conv_error[26],
               error_source_105,
               atom_101$0,
               sexp_109);
         }
        }
       }
       else
        var
         _as_ =
           caml_call2
            (Sexplib0_Sexp_conv_error[28], error_source_105, sexp_109);
      }
      else
       var
        _as_ =
          caml_call2(Sexplib0_Sexp_conv_error[29], error_source_105, sexp_109);
     }
     return _as_;
    }
    catch(_at_){
     var _ar_ = caml_wrap_exception(_at_);
     if(_ar_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_110, sexp_109);
     throw caml_maybe_attach_backtrace(_ar_, 0);
    }
   }
   function sexp_of_t$2(v_111){
    if(typeof v_111 === "number")
     if(-736598011 <= v_111){
      if(-397582078 === v_111) return _y_;
      if(3405096 === v_111) return _z_;
     }
     else{
      if(-911610022 === v_111) return _A_;
      if(-856564646 <= v_111) return _B_;
     }
    else if(14821 <= v_111[1]){
     var v_112 = v_111[2];
     return [1, [0, _C_, [0, sexp_of_t$0(v_112), 0]]];
    }
    return sexp_of_t$0(v_111);
   }
   function compare$2(a_113, b_114){
    if(a_113 === b_114) return 0;
    a:
    {
     if(typeof a_113 === "number")
      if(-736598011 <= a_113){
       if(-397582078 === a_113){
        if(typeof b_114 !== "number") break a;
        if(-397582078 === b_114) return 0;
        break a;
       }
       if(3405096 === a_113){
        if(typeof b_114 !== "number") break a;
        if(3405096 === b_114) return 0;
        break a;
       }
      }
      else{
       if(-911610022 === a_113){
        if(typeof b_114 !== "number") break a;
        if(-911610022 === b_114) return 0;
        break a;
       }
       if(-856564646 <= a_113){
        if(typeof b_114 !== "number") break a;
        if(-856564646 === b_114) return 0;
        break a;
       }
      }
     else if(14821 <= a_113[1]){
      if(typeof b_114 === "number") break a;
      if(14821 !== b_114[1]) break a;
      var right_118 = b_114[2], left_117 = a_113[2];
      return compare$0(left_117, right_118);
     }
     if(typeof b_114 === "number"){
      if(4100401 <= b_114){
       if(737308347 <= b_114){
        if(749039939 !== b_114 && 756711075 !== b_114) break a;
       }
       else if(82908052 !== b_114 && 4100402 <= b_114 && 737308346 > b_114)
        break a;
      }
      else
       if(-736598010 <= b_114){
        if(-605101559 !== b_114 && -588596599 !== b_114) break a;
       }
       else if(-937474657 !== b_114 && -736598011 > b_114) break a;
     }
     else if(-782720297 !== b_114[1]) break a;
     return compare$0(a_113, b_114);
    }
    return caml_compare(a_113, b_114);
   }
   function hash_fold_t$2(hsv, arg){
    if(typeof arg === "number")
     if(-736598011 <= arg){
      if(-397582078 === arg) return caml_call2(Base_Hash[3], hsv, -397582078);
      if(3405096 === arg) return caml_call2(Base_Hash[3], hsv, 3405096);
     }
     else{
      if(-911610022 === arg) return caml_call2(Base_Hash[3], hsv, -911610022);
      if(-856564646 <= arg) return caml_call2(Base_Hash[3], hsv, -856564646);
     }
    else if(14821 <= arg[1]){
     var v = arg[2], hsv$0 = caml_call2(Base_Hash[3], hsv, 14821);
     return hash_fold_t$0(hsv$0, v);
    }
    return hash_fold_t$0(hsv, arg);
   }
   function hash$2(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _al_ = hash_fold_t$2(hsv, arg);
    return caml_call1(Base_Hash[9], _al_);
   }
   function equal$2(a_119, b_120){
    if(a_119 === b_120) return 1;
    a:
    {
     if(typeof a_119 === "number")
      if(-736598011 <= a_119){
       if(-397582078 === a_119){
        if(typeof b_120 !== "number") break a;
        if(-397582078 === b_120) return 1;
        break a;
       }
       if(3405096 === a_119){
        if(typeof b_120 !== "number") break a;
        if(3405096 === b_120) return 1;
        break a;
       }
      }
      else{
       if(-911610022 === a_119){
        if(typeof b_120 !== "number") break a;
        if(-911610022 === b_120) return 1;
        break a;
       }
       if(-856564646 <= a_119){
        if(typeof b_120 !== "number") break a;
        if(-856564646 === b_120) return 1;
        break a;
       }
      }
     else if(14821 <= a_119[1]){
      if(typeof b_120 === "number") break a;
      if(14821 !== b_120[1]) break a;
      var right_124 = b_120[2], left_123 = a_119[2];
      return equal$0(left_123, right_124);
     }
     if(typeof b_120 === "number"){
      if(4100401 <= b_120){
       if(737308347 <= b_120){
        if(749039939 !== b_120 && 756711075 !== b_120) break a;
       }
       else if(82908052 !== b_120 && 4100402 <= b_120 && 737308346 > b_120)
        break a;
      }
      else
       if(-736598010 <= b_120){
        if(-605101559 !== b_120 && -588596599 !== b_120) break a;
       }
       else if(-937474657 !== b_120 && -736598011 > b_120) break a;
     }
     else if(-782720297 !== b_120[1]) break a;
     return equal$0(a_119, b_120);
    }
    return caml_equal(a_119, b_120);
   }
   function of_v1$0(t){return t;}
   function to_v1$0(t){
    a:
    if(typeof t === "number"){
     if(-911610022 <= t){
      if(-397582078 <= t){
       if(4100401 <= t) break a;
      }
      else if(-736598011 <= t) break a;
      return t;
     }
    }
    else if(14821 <= t[1]){var bg = t[2]; return [0, 14821, to_v1(bg, 0)];}
    return to_v1(t, 1);
   }
   function hash$3(x){return hash$0(x);}
   function to_int_list(param){
    if(typeof param === "number")
     return 4100401 <= param
             ? 82908052
               === param
               ? _D_
               : 749039939
                 <= param
                 ? 756711075 <= param ? _E_ : _F_
                 : 737308346 <= param ? _G_ : _H_
             : -605101559
               <= param
               ? -588596599 <= param ? _I_ : _J_
               : -736598011 <= param ? _K_ : _L_;
    var c = param[2];
    return [0, 38, [0, 5, [0, caml_call1(Ansi_kernel_Color_256[6], c), 0]]];
   }
   function hash$4(x){return hash$2(x);}
   function to_int_list$0(c){
    if(typeof c === "number")
     if(-736598011 <= c){
      if(-397582078 === c) return _M_;
      if(3405096 === c) return _N_;
     }
     else{if(-911610022 === c) return _O_; if(-856564646 <= c) return _P_;}
    else if(14821 <= c[1]){
     var bg = c[2], match = to_int_list(bg);
     if(! match) return 0;
     var rest = match[2], ansi_code = match[1];
     return [0, ansi_code + 10 | 0, rest];
    }
    return to_int_list(c);
   }
   function list_to_string(l){
    if(! l) return cst;
    function _ag_(att){
     var _aj_ = Core[22], _ak_ = to_int_list$0(att);
     return caml_call2(Core_List[51], _ak_, _aj_);
    }
    var
     _ah_ = caml_call2(Core_List[14], l, _ag_),
     _ai_ = caml_call2(Core_String[46], _Q_, _ah_);
    return caml_call2(Core[265], _R_, _ai_);
   }
   var
    Attr =
      [0,
       sexp_of_t$2,
       compare$2,
       hash_fold_t$2,
       hash$4,
       equal$2,
       to_int_list$0,
       list_to_string];
   function sexp_of_t$3(v_137){
    if(typeof v_137 === "number"){
     if(-937074372 === v_137) return _S_;
     if(-101336657 === v_137) return _T_;
     if(19559306 === v_137) return _U_;
    }
    return caml_call1(Attr[1], v_137);
   }
   function compare$3(a_138, b_139){
    if(a_138 === b_139) return 0;
    a:
    {
     if(typeof a_138 === "number"){
      if(-937074372 === a_138){
       if(typeof b_139 !== "number") break a;
       if(-937074372 === b_139) return 0;
       break a;
      }
      if(-101336657 === a_138){
       if(typeof b_139 !== "number") break a;
       if(-101336657 === b_139) return 0;
       break a;
      }
      if(19559306 === a_138){
       if(typeof b_139 !== "number") break a;
       if(19559306 === b_139) return 0;
       break a;
      }
     }
     if(typeof b_139 === "number"){
      if(-397582078 <= b_139){
       if(82908053 <= b_139){
        if(737308346 !== b_139 && 749039939 !== b_139 && 756711075 !== b_139)
         break a;
       }
       else
        if(3405097 <= b_139){
         if(4100401 !== b_139 && 82908052 > b_139) break a;
        }
        else if(-397582077 <= b_139 && 3405096 > b_139) break a;
      }
      else
       if(-856564645 <= b_139){
        if
         (-736598011 !== b_139 && -605101559 !== b_139 && -588596599 !== b_139)
         break a;
       }
       else if
        (-937474657 !== b_139 && -911610022 !== b_139 && -856564646 > b_139)
        break a;
     }
     else{
      var _af_ = b_139[1];
      if(-782720297 !== _af_ && 14821 !== _af_) break a;
     }
     return caml_call2(Attr[2], a_138, b_139);
    }
    return caml_compare(a_138, b_139);
   }
   function hash_fold_t$3(hsv, arg){
    if(typeof arg === "number"){
     if(-937074372 === arg) return caml_call2(Base_Hash[3], hsv, -937074372);
     if(-101336657 === arg) return caml_call2(Base_Hash[3], hsv, -101336657);
     if(19559306 === arg) return caml_call2(Base_Hash[3], hsv, 19559306);
    }
    return caml_call2(Attr[3], hsv, arg);
   }
   function hash$5(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _ae_ = hash_fold_t$3(hsv, arg);
    return caml_call1(Base_Hash[9], _ae_);
   }
   function equal$3(a_142, b_143){
    if(a_142 === b_143) return 1;
    a:
    {
     if(typeof a_142 === "number"){
      if(-937074372 === a_142){
       if(typeof b_143 !== "number") break a;
       if(-937074372 === b_143) return 1;
       break a;
      }
      if(-101336657 === a_142){
       if(typeof b_143 !== "number") break a;
       if(-101336657 === b_143) return 1;
       break a;
      }
      if(19559306 === a_142){
       if(typeof b_143 !== "number") break a;
       if(19559306 === b_143) return 1;
       break a;
      }
     }
     if(typeof b_143 === "number"){
      if(-397582078 <= b_143){
       if(82908053 <= b_143){
        if(737308346 !== b_143 && 749039939 !== b_143 && 756711075 !== b_143)
         break a;
       }
       else
        if(3405097 <= b_143){
         if(4100401 !== b_143 && 82908052 > b_143) break a;
        }
        else if(-397582077 <= b_143 && 3405096 > b_143) break a;
      }
      else
       if(-856564645 <= b_143){
        if
         (-736598011 !== b_143 && -605101559 !== b_143 && -588596599 !== b_143)
         break a;
       }
       else if
        (-937474657 !== b_143 && -911610022 !== b_143 && -856564646 > b_143)
        break a;
     }
     else{
      var _ad_ = b_143[1];
      if(-782720297 !== _ad_ && 14821 !== _ad_) break a;
     }
     return caml_call2(Attr[5], a_142, b_143);
    }
    return caml_equal(a_142, b_143);
   }
   function to_int_list$1(attr){
    if(typeof attr === "number"){
     if(-937074372 === attr) return _V_;
     if(-101336657 === attr) return _W_;
     if(19559306 === attr) return _X_;
    }
    return caml_call1(Attr[6], attr);
   }
   function list_to_string$0(l){
    if(! l) return cst$0;
    function ___(att){
     var _ab_ = Core[22], _ac_ = to_int_list$1(att);
     return caml_call2(Core_List[51], _ac_, _ab_);
    }
    var
     _$_ = caml_call2(Core_List[14], l, ___),
     _aa_ = caml_call2(Core_String[46], _Y_, _$_);
    return caml_call2(Core[265], _Z_, _aa_);
   }
   var
    With_all_attrs =
      [0,
       sexp_of_t$3,
       compare$3,
       hash_fold_t$3,
       hash$5,
       equal$3,
       to_int_list$1,
       list_to_string$0];
   caml_call1(Ppx_inline_test_lib[7], cst_ansi_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ansi_kernel);
   var
    Ansi_kernel =
      [0,
       [0,
        sexp_of_t$0,
        compare$0,
        hash_fold_t$0,
        hash$3,
        equal$0,
        to_int_list],
       Attr,
       With_all_attrs,
       [0,
        [0,
         [0, t_of_sexp$0, sexp_of_t, compare, hash_fold_t, hash, equal],
         [0,
          t_of_sexp$2,
          sexp_of_t$0,
          compare$0,
          hash_fold_t$0,
          hash$0,
          equal$0,
          of_v1,
          to_v1,
          primary_of_v1,
          primary_to_v1]],
        [0,
         [0,
          t_of_sexp$3,
          sexp_of_t$1,
          compare$1,
          hash_fold_t$1,
          hash$1,
          equal$1],
         [0,
          t_of_sexp$4,
          sexp_of_t$2,
          compare$2,
          hash_fold_t$2,
          hash$2,
          equal$2,
          of_v1$0,
          to_v1$0]]]];
   runtime.caml_register_global(141, Ansi_kernel, cst_Ansi_kernel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
