// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Psq
//# unitInfo: Requires: Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst$0 = "@ ",
    cst_src_psq_ml = "src/psq.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    pf = Stdlib_Format[137],
    _h_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, 0, cst]],
         [15, [12, 44, [17, [0, cst$0, 1, 0], [15, [17, 0, [12, 41, 0]]]]]]]],
       "(@[%a,@ %a@])"],
    _g_ = [0, [12, 59, [17, [0, cst$0, 1, 0], 0]], ";@ "],
    _i_ =
      [0, [11, "of_sorted_list [", [15, [12, 93, 0]]], "of_sorted_list [%a]"],
    _f_ = [0, [18, [1, [0, 0, cst]], [15, [17, 0, 0]]], "@[%a@]"],
    _e_ = [0, 0, 0],
    _d_ = [0, cst_src_psq_ml, 113, 10],
    _c_ = [0, cst_src_psq_ml, 108, 10],
    _b_ = [0, cst_src_psq_ml, 103, 10],
    _a_ = [0, cst_src_psq_ml, 96, 10];
   function Make(K, P){
    var empty = 0;
    function sg(kp){var k = kp[1]; return [0, kp, k, 0];}
    function is_empty(param){return param ? 0 : 1;}
    function size_t(param){
     if(typeof param === "number") return 0;
     var w = param[5];
     return w;
    }
    function size(param){
     if(! param) return 0;
     var t = param[3];
     return size_t(t) + 1 | 0;
    }
    function nd(kp, t1, sk, t2){
     var k = kp[1];
     if(0 < caml_call2(K[1], k, sk)){
      var _ad_ = size_t(t2);
      return [1, kp, t1, sk, t2, (size_t(t1) + _ad_ | 0) + 1 | 0];
     }
     var _ac_ = size_t(t2);
     return [0, kp, t1, sk, t2, (size_t(t1) + _ac_ | 0) + 1 | 0];
    }
    function outweighs(s1, s2){
     return (s2 * 375 | 0) < (s1 * 100 | 0) ? 1 : 0;
    }
    function symbol(param, _ab_){
     var
      p2 = _ab_[2],
      k2 = _ab_[1],
      p1 = param[2],
      k1 = param[1],
      c = caml_call2(P[1], p1, p2);
     return 0 === c ? caml_call2(K[1], k1, k2) <= 0 ? 1 : 0 : c < 0 ? 1 : 0;
    }
    function rot_l(kp1, t1, sk1, param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     if(0 === param[0]){
      var kp2 = param[1], t3 = param[4], sk2 = param[3], t2 = param[2];
      if(symbol(kp1, kp2)) return nd(kp1, nd(kp2, t1, sk1, t2), sk2, t3);
      var t3$0 = param[4], sk2$0 = param[3], t2$0 = param[2], kp2$0 = kp2;
     }
     else
      var
       t3$1 = param[4],
       sk2$1 = param[3],
       t2$1 = param[2],
       kp2$1 = param[1],
       t3$0 = t3$1,
       sk2$0 = sk2$1,
       t2$0 = t2$1,
       kp2$0 = kp2$1;
     return nd(kp2$0, nd(kp1, t1, sk1, t2$0), sk2$0, t3$0);
    }
    function rot_r(kp1, tt, sk2, t3){
     if(typeof tt === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     if(0 === tt[0])
      var t2 = tt[4], sk1 = tt[3], t1 = tt[2], kp2 = tt[1];
     else{
      var kp2$0 = tt[1], t2$0 = tt[4], sk1$0 = tt[3], t1$0 = tt[2];
      if(symbol(kp1, kp2$0))
       return nd(kp1, t1$0, sk1$0, nd(kp2$0, t2$0, sk2, t3));
      var
       t2$1 = tt[4],
       sk1$1 = tt[3],
       t1$1 = tt[2],
       t2 = t2$1,
       sk1 = sk1$1,
       t1 = t1$1,
       kp2 = kp2$0;
     }
     return nd(kp2, t1, sk1, nd(kp1, t2, sk2, t3));
    }
    function nd_bal(kp1, t1$0, sk1$0, t2$1){
     var s1 = size_t(t1$0), s2 = size_t(t2$1);
     if(typeof t1$0 !== "number"){
      var t12 = t1$0[4], t11 = t1$0[2];
      if(1 < s1 && outweighs(s1, s2)){
       var _aa_ = size_t(t12);
       if(_aa_ < size_t(t11)) return rot_r(kp1, t1$0, sk1$0, t2$1);
       if(typeof t1$0 === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
       var t2$0 = t1$0[4], sk1 = t1$0[3], t1 = t1$0[2], kp2$0 = t1$0[1];
       return rot_r(kp1, rot_l(kp2$0, t1, sk1, t2$0), sk1$0, t2$1);
      }
     }
     if(typeof t2$1 !== "number"){
      var t22 = t2$1[4], t21 = t2$1[2];
      if(1 < s2 && outweighs(s2, s1)){
       var _$_ = size_t(t22);
       if(size_t(t21) < _$_) return rot_l(kp1, t1$0, sk1$0, t2$1);
       if(typeof t2$1 === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       var t3 = t2$1[4], sk2 = t2$1[3], t2 = t2$1[2], kp2 = t2$1[1];
       return rot_l(kp1, t1$0, sk1$0, rot_r(kp2, t2, sk2, t3));
      }
     }
     return nd(kp1, t1$0, sk1$0, t2$1);
    }
    function symbol$0(t1, t2){
     if(t1){
      if(t2){
       var
        t2$0 = t2[3],
        sk2 = t2[2],
        kp2 = t2[1],
        t1$0 = t1[3],
        sk1 = t1[2],
        kp1 = t1[1];
       return symbol(kp1, kp2)
               ? [0, kp1, sk2, nd_bal(kp2, t1$0, sk1, t2$0)]
               : [0, kp2, sk2, nd_bal(kp1, t1$0, sk1, t2$0)];
      }
      var t = t1;
     }
     else
      var t = t2;
     return t;
    }
    function symbol$1(kp1, kp2){
     var k2 = kp2[1], k1 = kp1[1];
     return symbol(kp1, kp2)
             ? [0, kp1, k2, [1, kp2, 0, k1, 0, 1]]
             : [0, kp2, k2, [0, kp1, 0, k1, 0, 1]];
    }
    function promote(sk0, param){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var t2 = param[4], sk = param[3], t1 = param[2], kp = param[1];
      return symbol$0([0, kp, sk, t1], promote(sk0, t2));
     }
     var t2$0 = param[4], sk$0 = param[3], t1$0 = param[2], kp$0 = param[1];
     return symbol$0(promote(sk$0, t1$0), [0, kp$0, sk0, t2$0]);
    }
    function min(param){
     if(! param) return 0;
     var kp = param[1];
     return [0, kp];
    }
    function rest(param){
     if(! param) return 0;
     var t = param[3], sk = param[2];
     return [0, promote(sk, t)];
    }
    function pop(param){
     if(! param) return 0;
     var t = param[3], sk = param[2], kp = param[1];
     return [0, [0, kp, promote(sk, t)]];
    }
    function find(k0, t){
     if(! t) return 0;
     var t$0 = t[3], match$0 = t[1], p$0 = match$0[2], k$0 = match$0[1];
     if(0 === caml_call2(K[1], k0, k$0)) return [0, p$0];
     var param = t$0;
     for(;;){
      if(typeof param === "number") return 0;
      var
       t2 = param[4],
       sk = param[3],
       t1 = param[2],
       match = param[1],
       p = match[2],
       k = match[1];
      if(0 === caml_call2(K[1], k0, k)) return [0, p];
      var param = 0 < caml_call2(K[1], k0, sk) ? t2 : t1;
     }
    }
    function mem(k0, t){
     if(! t) return 0;
     var
      t$0 = t[3],
      k$0 = t[1][1],
      ___ = 0 === caml_call2(K[1], k0, k$0) ? 1 : 0;
     if(___) return ___;
     var param = t$0;
     for(;;){
      if(typeof param === "number") return 0;
      var
       t2 = param[4],
       sk = param[3],
       t1 = param[2],
       k = param[1][1],
       _Z_ = 0 === caml_call2(K[1], k0, k) ? 1 : 0;
      if(_Z_) return _Z_;
      var param = 0 < caml_call2(K[1], k0, sk) ? t2 : t1;
     }
    }
    function foldr_at_most(p0, f, t, z){
     function f1$0(counter, p0, kp, f, z, t){
      var p = kp[2];
      if(0 < caml_call2(P[1], p, p0)) return caml_call1(z, 0);
      if(counter >= 50)
       return caml_trampoline_return(f2$0, [0, p0, kp, f, z, t]);
      var counter$0 = counter + 1 | 0;
      return f2$0(counter$0, p0, kp, f, z, t);
     }
     function f2$0(counter, p0, kp0, f, z, param){
      var z$0 = z, param$0 = param;
      for(;;){
       if(typeof param$0 === "number") return caml_call2(f, kp0, z$0);
       if(0 === param$0[0]){
        var
         t2 = param$0[4],
         t1 = param$0[2],
         kp = param$0[1],
         _Y_ = function(param){return f2(p0, kp0, f, z$0, t2);};
        if(counter >= 50)
         return caml_trampoline_return(f1$0, [0, p0, kp, f, _Y_, t1]);
        var counter$0 = counter + 1 | 0;
        return f1$0(counter$0, p0, kp, f, _Y_, t1);
       }
       var
        t2$0 = param$0[4],
        t1$0 = param$0[2],
        kp$0 = param$0[1],
        z$2 =
          function(z, t2, kp){
           function z$0(param){return f1(p0, kp, f, z, t2);}
           return z$0;
          },
        z$1 = z$2(z$0, t2$0, kp$0),
        z$0 = z$1,
        param$0 = t1$0;
      }
     }
     function f1(p0, kp, f, z, t){
      return caml_trampoline(f1$0(0, p0, kp, f, z, t));
     }
     function f2(p0, kp0, f, z, param){
      return caml_trampoline(f2$0(0, p0, kp0, f, z, param));
     }
     if(! t) return caml_call1(z, 0);
     var t$0 = t[3], kp0 = t[1];
     return f1(p0, kp0, f, z, t$0);
    }
    function fold_at_most(p0, f, z, t){
     function _X_(param){return z;}
     return foldr_at_most
             (p0,
              function(param, a){
               var p = param[2], k = param[1];
               return caml_call3(f, k, p, caml_call1(a, 0));
              },
              t,
              _X_);
    }
    function iter_at_most(p0, f, t){
     function _V_(_W_){return 0;}
     return foldr_at_most
             (p0,
              function(param, i){
               var p = param[2], k = param[1];
               caml_call2(f, k, p);
               return caml_call1(i, 0);
              },
              t,
              _V_);
    }
    function to_seq_at_most(p0, t, param){
     var _U_ = Stdlib_Seq[20];
     return foldr_at_most(p0, function(kp, seq){return [0, kp, seq];}, t, _U_);
    }
    function go(k0, f, kp1, sk1, param){
     var p1 = kp1[2], k1 = kp1[1];
     if(typeof param !== "number"){
      if(0 === param[0]){
       var t2 = param[4], sk2 = param[3], t1 = param[2], kp2 = param[1];
       return 0 < caml_call2(K[1], k0, sk2)
               ? symbol$0([0, kp2, sk2, t1], go(k0, f, kp1, sk1, t2))
               : symbol$0(go(k0, f, kp2, sk2, t1), [0, kp1, sk1, t2]);
      }
      var
       t2$0 = param[4],
       sk2$0 = param[3],
       t1$0 = param[2],
       kp2$0 = param[1];
      return 0 < caml_call2(K[1], k0, sk2$0)
              ? symbol$0([0, kp1, sk2$0, t1$0], go(k0, f, kp2$0, sk1, t2$0))
              : symbol$0(go(k0, f, kp1, sk2$0, t1$0), [0, kp2$0, sk1, t2$0]);
     }
     var c = caml_call2(K[1], k0, k1);
     if(0 === c){
      var match = caml_call1(f, [0, p1]);
      if(! match) return 0;
      var p = match[1];
      if(p === p1) throw Stdlib[3];
      return sg([0, k0, p]);
     }
     var match$0 = caml_call1(f, 0);
     if(! match$0) throw Stdlib[3];
     var p$0 = match$0[1];
     return 0 <= c ? symbol$1(kp1, [0, k0, p$0]) : symbol$1([0, k0, p$0], kp1);
    }
    function update(k0, f, t){
     if(t){
      var t1 = t[3], sk = t[2], kp = t[1];
      try{var _S_ = go(k0, f, kp, sk, t1); return _S_;}
      catch(_T_){
       var _R_ = caml_wrap_exception(_T_);
       if(_R_ === Stdlib[3]) return t;
       throw caml_maybe_attach_backtrace(_R_, 0);
      }
     }
     var match = caml_call1(f, 0);
     if(! match) return 0;
     var p = match[1];
     return sg([0, k0, p]);
    }
    function add(k, p, t){
     return update(k, function(param){return [0, p];}, t);
    }
    function push(k, p, t){
     return update
             (k,
              function(param){
               if(! param) return [0, p];
               var
                p0 = param[1],
                p0$0 = 0 <= caml_call2(P[1], p, p0) ? p0 : p;
               return [0, p0$0];
              },
              t);
    }
    function remove(k, t){return update(k, function(param){return 0;}, t);}
    function adjust(k, f, t){
     return update
             (k,
              function(param){
               if(! param) return 0;
               var p = param[1];
               return [0, caml_call1(f, p)];
              },
              t);
    }
    function go$0(pf, kp1, sk1, param){
     if(typeof param === "number")
      return caml_call2(pf, kp1[1], kp1[2]) ? sg(kp1) : 0;
     if(0 === param[0]){
      var
       t2 = param[4],
       sk2 = param[3],
       t1 = param[2],
       kp2 = param[1],
       _P_ = go$0(pf, kp1, sk1, t2);
      return symbol$0(go$0(pf, kp2, sk2, t1), _P_);
     }
     var
      t2$0 = param[4],
      sk2$0 = param[3],
      t1$0 = param[2],
      kp2$0 = param[1],
      _Q_ = go$0(pf, kp2$0, sk1, t2$0);
     return symbol$0(go$0(pf, kp1, sk2$0, t1$0), _Q_);
    }
    function filter(pf, param){
     if(! param) return 0;
     var t = param[3], sk = param[2], kp = param[1];
     return go$0(pf, kp, sk, t);
    }
    function partition(pf, t){
     var _O_ = filter(function(k, p){return 1 - caml_call2(pf, k, p);}, t);
     return [0, filter(pf, t), _O_];
    }
    function go$1(k0, pk, sk, param){
     if(typeof param === "number")
      return 0 < caml_call2(K[1], pk[1], k0)
              ? [0, empty, sg(pk)]
              : [0, sg(pk), empty];
     if(0 === param[0]){
      var t2 = param[4], sk1 = param[3], t1 = param[2], pk1 = param[1];
      if(0 < caml_call2(K[1], k0, sk1)){
       var match = go$1(k0, pk, sk, t2), t22 = match[2], t21 = match[1];
       return [0, symbol$0([0, pk1, sk1, t1], t21), t22];
      }
      var
       match$0 = go$1(k0, pk1, sk1, t1),
       t12 = match$0[2],
       t11 = match$0[1];
      return [0, t11, symbol$0(t12, [0, pk, sk, t2])];
     }
     var t2$0 = param[4], sk1$0 = param[3], t1$0 = param[2], pk1$0 = param[1];
     if(0 < caml_call2(K[1], k0, sk1$0)){
      var
       match$1 = go$1(k0, pk1$0, sk, t2$0),
       t22$0 = match$1[2],
       t21$0 = match$1[1];
      return [0, symbol$0([0, pk, sk1$0, t1$0], t21$0), t22$0];
     }
     var
      match$2 = go$1(k0, pk, sk1$0, t1$0),
      t12$0 = match$2[2],
      t11$0 = match$2[1];
     return [0, t11$0, symbol$0(t12$0, [0, pk1$0, sk, t2$0])];
    }
    function split_at(k0, param){
     if(! param) return _e_;
     var t = param[3], sk = param[2], pk = param[1];
     return go$1(k0, pk, sk, t);
    }
    var symbol$2 = function _N_(_L_, _M_){return _N_.fun(_L_, _M_);};
    function app(q1, param){
     if(! param) return q1;
     var match = param[3], sk = param[2], kp = param[1], p = kp[2], k = kp[1];
     if(typeof match === "number") return push(k, p, q1);
     a:
     {
      if(0 === match[0]){
       var kp1 = match[1];
       if(typeof match[2] === "number" && typeof match[4] === "number"){var p2 = kp1[2], k2 = kp1[1]; break a;}
       var
        t2 = match[4],
        sk1 = match[3],
        t1 = match[2],
        match$0 = split_at(sk1, q1),
        q12 = match$0[2],
        q11 = match$0[1],
        _J_ = caml_call2(symbol$2, q12, [0, kp, sk, t2]);
       return symbol$0(caml_call2(symbol$2, q11, [0, kp1, sk1, t1]), _J_);
      }
      var kp1$0 = match[1];
      if(typeof match[2] === "number" && typeof match[4] === "number"){var p2 = kp1$0[2], k2 = kp1$0[1]; break a;}
      var
       t2$0 = match[4],
       sk1$0 = match[3],
       t1$0 = match[2],
       match$1 = split_at(sk1$0, q1),
       q12$0 = match$1[2],
       q11$0 = match$1[1],
       _K_ = caml_call2(symbol$2, q12$0, [0, kp1$0, sk, t2$0]);
      return symbol$0(caml_call2(symbol$2, q11$0, [0, kp, sk1$0, t1$0]), _K_);
     }
     return push(k, p, push(k2, p2, q1));
    }
    runtime.caml_update_dummy
     (symbol$2,
      function(q1, q2){
       var _I_ = size(q2);
       return size(q1) < _I_ ? app(q2, q1) : app(q1, q2);
      });
    function group1(param){
     if(! param) return 0;
     var _D_ = param[2], x = param[1];
     if(! _D_) return [0, sg(x), 0];
     var _E_ = _D_[2], y = _D_[1];
     if(! _E_) return [0, symbol$1(x, y), 0];
     var match = _E_[2], z = _E_[1];
     if(match){
      var xs = match[2], w = match[1], _F_ = group1(xs), _G_ = symbol$1(z, w);
      return [0, symbol$0(symbol$1(x, y), _G_), _F_];
     }
     var _H_ = sg(z);
     return [0, symbol$0(symbol$1(x, y), _H_), 0];
    }
    function group2(r){
     if(r){
      var _z_ = r[2];
      if(_z_){
       var _A_ = _z_[2], y = _z_[1], x = r[1];
       if(! _A_) return [0, symbol$0(x, y), 0];
       var match = _A_[2], z = _A_[1];
       if(! match) return [0, symbol$0(symbol$0(x, y), z), 0];
       var
        xs = match[2],
        w = match[1],
        _B_ = group2(xs),
        _C_ = symbol$0(z, w);
       return [0, symbol$0(symbol$0(x, y), _C_), _B_];
      }
     }
     return r;
    }
    function of_sorted_list(xs){
     var ts$1 = group1(xs), ts = ts$1;
     for(;;){
      if(! ts) return 0;
      if(! ts[2]){var t = ts[1]; return t;}
      var ts$0 = group2(ts), ts = ts$0;
     }
    }
    function cmp_kv(param, _y_){
     var
      p2 = _y_[2],
      k2 = _y_[1],
      p1 = param[2],
      k1 = param[1],
      r = caml_call2(K[1], k2, k1);
     return 0 === r ? caml_call2(P[1], p1, p2) : r;
    }
    function of_list(xs){
     var match = caml_call2(Stdlib_List[59], cmp_kv, xs);
     if(! match) return empty;
     var
      kvs$0 = match[2],
      kv$0 = match[1],
      k0$1 = kv$0[1],
      a$1 = [0, kv$0, 0],
      k0 = k0$1,
      a = a$1,
      param = kvs$0;
     for(;;){
      if(! param) return of_sorted_list(a);
      var kvs = param[2], kv = param[1], k0$0 = kv[1];
      if(0 === caml_call2(K[1], k0, k0$0))
       var param = kvs;
      else
       var a$0 = [0, kv, a], k0 = k0$0, a = a$0, param = kvs;
     }
    }
    function of_seq(xs){
     var _w_ = 0;
     function _x_(xs, a){return [0, a, xs];}
     return of_list(caml_call3(Stdlib_Seq[5], _x_, _w_, xs));
    }
    function add_seq(xs, q){
     function _v_(q, param){
      var p = param[2], k = param[1];
      return add(k, p, q);
     }
     return caml_call3(Stdlib_Seq[5], _v_, q, xs);
    }
    function go$2(pk0, f, param){
     var pk0$0 = pk0, param$0 = param;
     for(;;){
      var k0 = pk0$0[2], p0 = pk0$0[1];
      if(typeof param$0 === "number") return caml_call2(f, p0, k0);
      if(0 === param$0[0]){
       var t2 = param$0[4], t1 = param$0[2], pk = param$0[1];
       go$2(pk, f, t1);
       var param$0 = t2;
      }
      else{
       var t2$0 = param$0[4], t1$0 = param$0[2], pk0$1 = param$0[1];
       go$2(pk0$0, f, t1$0);
       var pk0$0 = pk0$1, param$0 = t2$0;
      }
     }
    }
    function iter(f, param){
     if(! param) return 0;
     var t = param[3], pk = param[1];
     return go$2(pk, f, t);
    }
    function go$3(kp0, f, z, param){
     var kp0$0 = kp0, z$0 = z, param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return caml_call2(f, kp0$0, z$0);
      if(0 === param$0[0])
       var
        t2 = param$0[4],
        t1 = param$0[2],
        kp0$1 = param$0[1],
        z$1 = go$3(kp0$0, f, z$0, t2),
        kp0$0 = kp0$1,
        z$0 = z$1,
        param$0 = t1;
      else
       var
        t2$0 = param$0[4],
        t1$0 = param$0[2],
        kp = param$0[1],
        z$2 = go$3(kp, f, z$0, t2$0),
        z$0 = z$2,
        param$0 = t1$0;
     }
    }
    function foldr(f, z, param){
     if(! param) return z;
     var t = param[3], kp = param[1];
     return go$3(kp, f, z, t);
    }
    function go$4(kp0, f, z, param){
     var kp0$0 = kp0, z$0 = z, param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return caml_call2(f, kp0$0, z$0);
      if(0 === param$0[0])
       var
        t2 = param$0[4],
        t1 = param$0[2],
        kp0$1 = param$0[1],
        z$3 =
          function(z, kp0, t2){
           function z$0(param){return go$4(kp0, f, z, t2);}
           return z$0;
          },
        z$1 = z$3(z$0, kp0$0, t2),
        kp0$0 = kp0$1,
        z$0 = z$1,
        param$0 = t1;
      else
       var
        t2$0 = param$0[4],
        t1$0 = param$0[2],
        kp = param$0[1],
        z$4 =
          function(z, t2, kp){
           function z$0(param){return go$4(kp, f, z, t2);}
           return z$0;
          },
        z$2 = z$4(z$0, t2$0, kp),
        z$0 = z$2,
        param$0 = t1$0;
     }
    }
    function fold(f, z, t){
     return foldr
             (function(param, z){
               var p = param[2], k = param[1];
               return caml_call3(f, k, p, z);
              },
              z,
              t);
    }
    function to_list(t){
     var _u_ = 0;
     return foldr(function(kp, xs){return [0, kp, xs];}, _u_, t);
    }
    function to_seq(t$0, param){
     var z = Stdlib_Seq[20];
     function f(kp, xs){return [0, kp, xs];}
     if(! t$0) return caml_call1(z, 0);
     var t = t$0[3], kp = t$0[1];
     return go$4(kp, f, z, t);
    }
    function symbol$3(xs, ys){
     if(xs){
      if(ys){
       var yt = ys[2], y = ys[1], xt = xs[2], x = xs[1];
       return symbol(x, y)
               ? [0, x, symbol$3(xt, ys)]
               : [0, y, symbol$3(xs, yt)];
      }
      var l = xs;
     }
     else
      var l = ys;
     return l;
    }
    function go$5(param){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var t2 = param[4], t1 = param[2], kp2 = param[1], _s_ = go$5(t2);
      return symbol$3([0, kp2, go$5(t1)], _s_);
     }
     var
      t2$0 = param[4],
      t1$0 = param[2],
      kp2$0 = param[1],
      _t_ = [0, kp2$0, go$5(t2$0)];
     return symbol$3(go$5(t1$0), _t_);
    }
    function to_priority_list(param){
     if(! param) return 0;
     var t = param[3], kp = param[1];
     return [0, kp, go$5(t)];
    }
    function to_priority_seq(t, param){
     function symbol$0(n1, n2){
      if(n1){
       if(n2){
        var yt = n2[2], y = n2[1], xt = n1[2], x = n1[1];
        return symbol(x, y)
                ? [0,
                  x,
                  function(param){return symbol$0(caml_call1(xt, 0), n2);}]
                : [0,
                  y,
                  function(param){return symbol$0(n1, caml_call1(yt, 0));}];
       }
       var n = n1;
      }
      else
       var n = n2;
      return n;
     }
     function go(param){
      if(typeof param === "number") return 0;
      if(0 === param[0]){
       var t2 = param[4], t1 = param[2], kp2 = param[1], _q_ = go(t2);
       return symbol$0([0, kp2, function(param){return go(t1);}], _q_);
      }
      var
       t2$0 = param[4],
       t1$0 = param[2],
       kp2$0 = param[1],
       _r_ = [0, kp2$0, function(param){return go(t2$0);}];
      return symbol$0(go(t1$0), _r_);
     }
     if(! t) return 0;
     var t$0 = t[3], kp = t[1];
     return [0, kp, function(param){return go(t$0);}];
    }
    function sg$0(k, p){return sg([0, k, p]);}
    function depth(t){
     function go(param){
      if(typeof param === "number") return 0;
      var t2 = param[4], t1 = param[2], _o_ = go(t2), _p_ = go(t1);
      return caml_call2(Stdlib[17], _p_, _o_) + 1 | 0;
     }
     if(! t) return 0;
     var t$0 = t[3];
     return go(t$0) + 1 | 0;
    }
    function pp(opt, pp, ppf, t){
     if(opt) var sth = opt[1], sep = sth; else var sep = Stdlib_Format[27];
     var first = [0, 1];
     function k(ppf){
      function _m_(k, p){
       if(first[1]) first[1] = 0; else caml_call2(sep, ppf, 0);
       return caml_call2(pp, ppf, [0, k, p]);
      }
      return function(_n_){return iter(_m_, _n_);};
     }
     return caml_call4(pf, ppf, _f_, k, t);
    }
    function pp_dump(ppk, ppp, ppf){
     function sep(ppf, param){return caml_call2(pf, ppf, _g_);}
     function ppkp(ppf, param){
      var p = param[2], k = param[1];
      return caml_call6(pf, ppf, _h_, ppk, k, ppp, p);
     }
     var _j_ = [0, sep];
     return caml_call3
             (pf,
              ppf,
              _i_,
              function(_k_, _l_){return pp(_j_, ppkp, _k_, _l_);});
    }
    return [0,
            empty,
            sg$0,
            symbol$2,
            is_empty,
            size,
            mem,
            find,
            add,
            push,
            remove,
            adjust,
            update,
            split_at,
            min,
            rest,
            pop,
            fold_at_most,
            iter_at_most,
            to_seq_at_most,
            of_list,
            of_sorted_list,
            of_seq,
            add_seq,
            to_list,
            to_seq,
            fold,
            iter,
            to_priority_list,
            to_priority_seq,
            filter,
            partition,
            pp,
            pp_dump,
            depth];
   }
   var Psq = [0, Make];
   runtime.caml_register_global(14, Psq, "Psq");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
