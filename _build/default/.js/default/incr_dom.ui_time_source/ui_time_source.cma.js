// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ui_time_source
//# unitInfo: Requires: Core, Core__List, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Sexplib0__Sexp_conv, Timing_wheel, Ui_effect, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_time_source$0 = "Ui_time_source",
    cst_ui_time_source$0 = "ui_time_source",
    cst_ui_time_source_ui_time_sou = "ui_time_source/ui_time_source.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Reversed_list = global_data.Reversed_list,
    Ui_effect = global_data.Ui_effect,
    Core_List = global_data.Core__List,
    Timing_wheel = global_data.Timing_wheel,
    Ui_incr = global_data.Ui_incr,
    Core_Time_ns = global_data.Core__Time_ns,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_time_source$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_time_source$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_ui_time_source_ui_time_sou);
   caml_call2
    (Ppx_inline_test_lib[6], cst_ui_time_source$0, "ui_time_source.ml");
   var
    _c_ = [0, cst_ui_time_source_ui_time_sou, 66, 2],
    _a_ = [0, "incr_now"],
    _b_ = [0, "wheel_now"],
    cst_BUG_timing_wheel_and_incre =
      "BUG: timing wheel and incremental clock are out of sync",
    cst_ui_time_source = cst_ui_time_source$0,
    cst_Ui_time_source = cst_Ui_time_source$0;
   function invariant(t){
    var
     wheel_now = caml_call1(Timing_wheel[11], t[2]),
     incr_now = caml_call1(Ui_incr[80][6], t[1]),
     _r_ = 1 - caml_call2(Core_Time_ns[21], wheel_now, incr_now);
    if(! _r_) return _r_;
    var
     _s_ =
       [0,
        [1, [0, _a_, [0, caml_call1(Core_Time_ns[25][12], incr_now), 0]]],
        0],
     _t_ =
       [0,
        [1, [0, _b_, [0, caml_call1(Core_Time_ns[25][12], wheel_now), 0]]],
        _s_],
     _u_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_timing_wheel_and_incre),
         _t_]];
    return caml_call2(Core[257], 0, _u_);
   }
   function create(start){
    var
     _q_ = caml_call1(Core_Time_ns[93], start),
     start$0 = caml_call1(Core_Time_ns[95], _q_),
     config = Ui_incr[80][2],
     incr = caml_call3(Ui_incr[80][3], [0, config], start$0, 0),
     timing_wheel = caml_call2(Timing_wheel[9], config, start$0),
     t = [0, incr, timing_wheel, 0, 0, 0];
    invariant(t);
    return t;
   }
   function incr_clock(t){return t[1];}
   function now(t){
    var match = t[5];
    if(! match) return caml_call1(Timing_wheel[11], t[2]);
    var to = match[1];
    return to;
   }
   function at_intervals(t, span){
    return caml_call2(Ui_incr[80][12], t[1], span);
   }
   function watch_now(t){return caml_call1(Ui_incr[80][7], t[1]);}
   function at(t, at){return caml_call2(Ui_incr[80][10], t[1], at);}
   function advance_clock(t, to){
    var _p_ = now(t);
    if(! caml_call2(Core_Time_ns[15], to, _p_))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    t[5] = [0, to];
    return 0;
   }
   function advance_clock_by(t, span){
    var _o_ = now(t);
    return advance_clock(t, caml_call2(Core_Time_ns[67], _o_, span));
   }
   function until(t, at){
    function _n_(callback){t[3] = [0, [0, at, callback], t[3]]; return 0;}
    return caml_call2(Ui_effect[22][2], 0, _n_);
   }
   function sleep(t, span){
    function _l_(callback){
     var _m_ = now(t), at = caml_call2(Core_Time_ns[67], _m_, span);
     t[3] = [0, [0, at, callback], t[3]];
     return 0;
    }
    return caml_call2(Ui_effect[22][2], 0, _l_);
   }
   function wait_after_display(t){
    function _k_(callback){t[4] = [0, callback, t[4]]; return 0;}
    return caml_call2(Ui_effect[22][2], 0, _k_);
   }
   function flush(t){
    function handle_fired(callback){
     var
      _i_ = caml_call2(Timing_wheel[5][5], t[2], callback),
      _j_ = caml_call2(Ui_effect[22][1][3], _i_, 0);
     return caml_call1(Ui_effect[21][2], _j_);
    }
    function _g_(param){
     var callback = param[2], at = param[1];
     caml_call3(Timing_wheel[26], t[2], at, callback);
     return 0;
    }
    var _h_ = caml_call1(Reversed_list[3], t[3]);
    caml_call2(Core_List[19], _h_, _g_);
    t[3] = 0;
    var match = t[5];
    if(match){
     var to = match[1];
     t[5] = 0;
     caml_call3(Timing_wheel[20], t[2], to, handle_fired);
     caml_call2(Timing_wheel[22], t[2], handle_fired);
     caml_call2(Ui_incr[80][8], t[1], to);
    }
    else
     caml_call2(Timing_wheel[22], t[2], handle_fired);
    return invariant(t);
   }
   function trigger_after_display(t){
    var callbacks = t[4];
    t[4] = 0;
    function _d_(callback){
     var _f_ = caml_call2(Ui_effect[22][1][3], callback, 0);
     return caml_call1(Ui_effect[21][2], _f_);
    }
    var _e_ = caml_call1(Reversed_list[3], callbacks);
    return caml_call2(Core_List[19], _e_, _d_);
   }
   function has_after_display_events(t){
    return 1 - caml_call1(Reversed_list[7], t[4]);
   }
   var Private = [0, flush, trigger_after_display, has_after_display_events];
   caml_call1(Ppx_inline_test_lib[7], cst_ui_time_source);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_time_source);
   var
    Ui_time_source =
      [0,
       create,
       incr_clock,
       advance_clock_by,
       advance_clock,
       now,
       watch_now,
       at_intervals,
       at,
       until,
       sleep,
       wait_after_display,
       Private];
   runtime.caml_register_global(24, Ui_time_source, cst_Ui_time_source$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
