// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Fmt
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Format, Stdlib__Fun, Stdlib__Hashtbl, Stdlib__Int, Stdlib__Int64, Stdlib__List, Stdlib__Map, Stdlib__Option, Stdlib__Printexc, Stdlib__Queue, Stdlib__Seq, Stdlib__Stack, Stdlib__String, Stdlib__Sys, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$20 = "",
    cst_02x = "%02x",
    cst_Ld_s = "%Ld%s",
    cst_Ld_Ld_s = "%Ld.%Ld%s",
    cst_Lda = "%Lda",
    cst_d_s_s = "%d%s%s",
    cst_d_d_s_s = "%d.%d%s%s",
    cst_g = "%g",
    cst_0$0 = "0",
    cst_30$1 = "30",
    cst_31$1 = "31",
    cst_32$1 = "32",
    cst_33$1 = "33",
    cst_34$1 = "34",
    cst_35$1 = "35",
    cst_36$1 = "36",
    cst_37$1 = "37",
    cst$19 = ";",
    cst_1$0 = "<1>",
    cst_2$0 = "<2>",
    cst_v = "<v>",
    cst$18 = "@ ",
    cst$21 = "@,",
    cst_A$0 = "A",
    cst_N$0 = "N",
    cst_None = "None",
    cst_Unknown = "Unknown",
    cst_f$0 = "f",
    cst_h$1 = "h",
    cst_hashtbl = "hashtbl",
    cst_m$0 = "m",
    cst_min$1 = "min",
    cst_ok$0 = "ok",
    cst_queue = "queue",
    cst_s$1 = "s",
    cst_src_fmt_ml = "src/fmt.ml",
    cst_stack = "stack",
    cst_t$0 = "t",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst_us = "us",
    cst_ms = "ms",
    cst_s = cst_s$1,
    _au_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_s$0 = cst_s$1,
    cst_min = cst_min$1,
    _av_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_min$0 = cst_min$1,
    cst_h = cst_h$1,
    _aw_ = runtime.caml_int64_create_lo_mi_hi(24, 0, 0),
    cst_h$0 = cst_h$1,
    cst_d = "d",
    y = runtime.caml_int64_create_lo_mi_hi(366, 0, 0),
    zero = cst_0$0,
    cst$17 = cst$19,
    cst$16 = "\x1b[",
    cst$15 = cst$20,
    partial = [15, [11, " ?", [17, 0, 0]]],
    cst$14 = "...",
    cst$13 = cst$20,
    cst$12 = ": ",
    kstr$0 = "K",
    i = "i",
    cst$10 = " }",
    cst$11 = "{ ",
    cst$9 = '"',
    cst$7 = "}",
    cst$8 = "{",
    cst$5 = "|]",
    cst$6 = "[|",
    cst$3 = "]",
    cst$4 = "[",
    cst$1 = ")",
    cst$2 = "(",
    cst$0 = cst$19,
    cst = ",",
    us_span = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    ms_span = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    sec_span = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    min_span = runtime.caml_int64_create_lo_mi_hi(4675584, 3576, 0),
    hour_span = runtime.caml_int64_create_lo_mi_hi(12099584, 214576, 0),
    day_span = runtime.caml_int64_create_lo_mi_hi(5177344, 5149841, 0),
    year_span = runtime.caml_int64_create_lo_mi_hi(16171008, 1931345, 112),
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    stdout = Stdlib_Format[110],
    stderr = Stdlib_Format[112],
    pf = Stdlib_Format[137],
    pr = Stdlib_Format[138],
    epr = Stdlib_Format[139],
    str = Stdlib_Format[141],
    kpf = Stdlib_Format[144],
    kstr = Stdlib_Format[148],
    _E_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _G_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [2, 0, [2, 0, 0]]]]],
       cst_d_d_s_s],
    _F_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _I_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [2, 0, [2, 0, 0]]]]],
       cst_d_d_s_s],
    _J_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, [0, 2, 2], 0, [2, 0, [2, 0, 0]]]]],
       "%d.%02d%s%s"],
    _H_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _K_ =
      [0,
       [11, "~scale is ", [4, 0, 0, 0, [11, ", must be in [-8;8]", 0]]],
       "~scale is %d, must be in [-8;8]"],
    _L_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, 0]]], cst_d_s_s],
    _X_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _Y_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _Z_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    ___ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _$_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _aa_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ab_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ac_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _ad_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, [2, 0, 0]]]], cst_Ld_Ld_s],
    _ae_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _af_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _ag_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ah_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ai_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _aj_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ak_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _al_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _am_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, [2, 0, 0]]]], cst_Ld_Ld_s],
    _an_ =
      [0,
       [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 2], 0, [2, 0, 0]]]],
       "%Ld.%02Ld%s"],
    _ao_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _ap_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _aq_ = [0, [7, 0, 0, 0, [2, 0, 0]], cst_Ld_s],
    _ar_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _as_ = [0, [7, 0, 0, 0, [2, 0, [7, 0, 0, 0, [2, 0, 0]]]], "%Ld%s%Ld%s"],
    _at_ = [0, [7, 0, 0, 0, [11, "ns", 0]], "%Ldns"],
    _ax_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _ay_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _az_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _aA_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _aB_ = [0, [7, 0, 0, 0, [12, 97, [7, 0, 0, 0, [12, 100, 0]]]], "%Lda%Ldd"],
    _a$_ = [0, [15, 0], "%a"],
    _a__ = [0, [12, 58, [17, [0, cst$18, 1, 0], 0]], ":@ "],
    _a9_ =
      [0,
       [18, [1, [0, [11, cst_1$0, 0], cst_1$0]], [15, [15, [15, [17, 0, 0]]]]],
       "@[<1>%a%a%a@]"],
    cst_m = cst_m$0,
    cst_3 = "3",
    cst_0 = cst_0$0,
    cst_32 = cst_32$1,
    cst_36 = cst_36$1,
    cst_1 = "1",
    cst_4 = "4",
    cst_34 = cst_34$1,
    cst_2 = "2",
    cst_33 = cst_33$1,
    cst_31 = cst_31$1,
    cst_7 = "7",
    cst_37 = cst_37$1,
    cst_30 = cst_30$1,
    cst_35 = cst_35$1,
    cst_32$0 = cst_32$1,
    cst_36$0 = cst_36$1,
    cst_34$0 = cst_34$1,
    cst_33$0 = cst_33$1,
    cst_31$0 = cst_31$1,
    cst_37$0 = cst_37$1,
    cst_35$0 = cst_35$1,
    cst_30$0 = cst_30$1,
    cst_92 = "92",
    cst_96 = "96",
    cst_94 = "94",
    cst_93 = "93",
    cst_91 = "91",
    cst_97 = "97",
    cst_95 = "95",
    cst_90 = "90",
    cst_42 = "42",
    cst_46 = "46",
    cst_44 = "44",
    cst_43 = "43",
    cst_41 = "41",
    cst_47 = "47",
    cst_45 = "45",
    cst_40 = "40",
    cst_102 = "102",
    cst_106 = "106",
    cst_104 = "104",
    cst_103 = "103",
    cst_101 = "101",
    cst_107 = "107",
    cst_105 = "105",
    cst_100 = "100",
    _a6_ = [0, cst_src_fmt_ml, 647, 60],
    cst_N = cst_N$0,
    cst_A = cst_A$0,
    _a5_ = [0, cst_src_fmt_ml, 638, 55],
    cst_t = cst_t$0,
    cst_f = cst_f$0,
    cst_ok = cst_ok$0,
    _a4_ = [0, [11, cst_Unknown, 0], cst_Unknown],
    _a2_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [15,
         [12,
          32,
          [2,
           0,
           [12,
            32,
            [15,
             [15,
              [12,
               46,
               [17, [0, cst$18, 1, 0], [11, "Did you mean ", partial]]]]]]]]]],
       "@[%a %s %a%a.@ Did you mean %a ?@]"],
    _a3_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [15, [12, 32, [2, 0, [12, 32, [15, [15, [12, 46, [17, 0, 0]]]]]]]]],
       "@[%a %s %a%a.@]"],
    _aX_ = [0, [15, [12, 44, [17, [0, cst$18, 1, 0], 0]]], "%a,@ "],
    _aY_ = [0, [11, "or", [17, [0, cst$18, 1, 0], [15, 0]]], "or@ %a"],
    _aZ_ = [0, cst_src_fmt_ml, 587, 12],
    _a0_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [11,
         "one",
         [17,
          [0, cst$18, 1, 0],
          [11, "of", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[one@ of@ %a@]"],
    _a1_ =
      [0,
       [18,
        [1, [0, 0, cst$20]],
        [11,
         "either ",
         [15, [11, " or", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[either %a or@ %a@]"],
    _aV_ = [0, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]], "%d.%d"],
    _aW_ =
      [0,
       [4,
        0,
        0,
        0,
        [12,
         46,
         [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]]]]]],
       "%d.%d-%d.%d"],
    _aU_ = [0, cst_src_fmt_ml, 549, 13],
    _aT_ = [0, [4, 6, [0, 2, 2], 0, 0], cst_02x],
    _aS_ = [0, [4, 6, [0, 2, 8], 0, 0], "%08x"],
    _M_ = [0, [4, 0, 0, 0, [12, 66, 0]], "%dB"],
    _O_ = [0, [15, [2, 0, [2, 0, [12, 66, 0]]]], "%a%s%sB"],
    _N_ = [0, [4, 0, 0, 0, [2, 0, [2, 0, [12, 66, 0]]]], "%d%s%sB"],
    _Q_ = [0, [15, [12, 77, [2, 0, [12, 66, 0]]]], "%aM%sB"],
    _P_ = [0, [4, 0, 0, 0, [12, 77, [2, 0, [12, 66, 0]]]], "%dM%sB"],
    _S_ = [0, [15, [12, 71, [2, 0, [12, 66, 0]]]], "%aG%sB"],
    _R_ = [0, [4, 0, 0, 0, [12, 71, [2, 0, [12, 66, 0]]]], "%dG%sB"],
    _U_ = [0, [15, [12, 84, [2, 0, [12, 66, 0]]]], "%aT%sB"],
    _T_ = [0, [4, 0, 0, 0, [12, 84, [2, 0, [12, 66, 0]]]], "%dT%sB"],
    _W_ = [0, [15, [12, 80, [2, 0, [12, 66, 0]]]], "%aP%sB"],
    _V_ = [0, [4, 0, 0, 0, [12, 80, [2, 0, [12, 66, 0]]]], "%dP%sB"],
    cst_B = "B",
    _B_ = [0, [12, 59, [17, [0, cst$21, 0, 0], 0]], ";@,"],
    _C_ = [0, 2],
    _A_ =
      [0,
       [18,
        [1, [0, [11, cst_1$0, 0], cst_1$0]],
        [15, [11, " =", [17, [0, cst$18, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<1>%a =@ %a@]"],
    _z_ = [0, [11, cst_queue, 0], cst_queue],
    _y_ = [0, [11, cst_stack, 0], cst_stack],
    _x_ = [0, [11, cst_hashtbl, 0], cst_hashtbl],
    _v_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Ok",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Ok@ @[%a@]@]"],
    _w_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Error",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Error@ @[%a@]@]"],
    _t_ =
      [0,
       [18,
        [1, [0, [11, cst_2$0, 0], cst_2$0]],
        [11,
         "Some",
         [17,
          [0, cst$18, 1, 0],
          [18, [1, [0, 0, cst$20]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Some@ @[%a@]@]"],
    _u_ = [0, [11, cst_None, 0], cst_None],
    _s_ = [0, [3, 0, 0], "%S"],
    _r_ = [0, [11, "U+", [4, 8, [0, 2, 4], 0, 0]], "U+%04X"],
    _q_ = [0, [11, "SIG(", [4, 0, 0, 0, [12, 41, 0]]], "SIG(%d)"],
    _p_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g],
    _o_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g],
    _n_ = [0, [8, [0, 0, 3], 0, 0, 0], cst_g],
    cst_No_backtrace_available = "No backtrace available.",
    _m_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [11, "Exception: ", [15, [17, [0, cst$21, 0, 0], [15, [17, 0, 0]]]]]],
       "@[<v>Exception: %a@,%a@]"],
    _l_ = [0, [6, 12, 0, 0, 0], "%nu"],
    _k_ = [0, [7, 12, 0, 0, 0], "%Lu"],
    _j_ = [0, [5, 12, 0, 0, 0], "%lu"],
    _i_ = [0, [4, 12, 0, 0, 0], "%u"],
    _h_ = [0, [7, 0, 0, 0, 0], "%Ld"],
    _g_ = [0, [5, 0, 0, 0, 0], "%ld"],
    _f_ = [0, [6, 0, 0, 0, 0], "%nd"],
    _e_ = [0, 1],
    _d_ = [0, 1],
    _c_ = [0, 2],
    _b_ = [0, 1],
    _a_ = [0, 1],
    cst_SIGXFSZ = "SIGXFSZ",
    cst_SIGXCPU = "SIGXCPU",
    cst_SIGURG = "SIGURG",
    cst_SIGTRAP = "SIGTRAP",
    cst_SIGSYS = "SIGSYS",
    cst_SIGPOLL = "SIGPOLL",
    cst_SIGBUS = "SIGBUS",
    cst_SIGPROF = "SIGPROF",
    cst_SIGVTALRM = "SIGVTALRM",
    cst_SIGTTOU = "SIGTTOU",
    cst_SIGTTIN = "SIGTTIN",
    cst_SIGTSTP = "SIGTSTP",
    cst_SIGSTOP = "SIGSTOP",
    cst_SIGCONT = "SIGCONT",
    cst_SIGCHLD = "SIGCHLD",
    cst_SIGUSR2 = "SIGUSR2",
    cst_SIGUSR1 = "SIGUSR1",
    cst_SIGTERM = "SIGTERM",
    cst_SIGSEGV = "SIGSEGV",
    cst_SIGQUIT = "SIGQUIT",
    cst_SIGPIPE = "SIGPIPE",
    cst_SIGKILL = "SIGKILL",
    cst_SIGINT = "SIGINT",
    cst_SIGILL = "SIGILL",
    cst_SIGHUP = "SIGHUP",
    cst_SIGFPE = "SIGFPE",
    cst_SIGALRM = "SIGALRM",
    cst_SIGABRT = "SIGABRT",
    _D_ =
      [0,
       "y",
       "z",
       "a",
       cst_f$0,
       "p",
       "n",
       "u",
       cst_m$0,
       cst$20,
       "k",
       "M",
       "G",
       "T",
       "P",
       "E",
       "Z",
       "Y"],
    _aF_ = [0, [4, 6, [0, 2, 7], 0, 0], "%07x"],
    _aH_ = [0, [4, 6, [0, 2, 6], 0, 0], "%06x"],
    _aJ_ = [0, [4, 6, [0, 2, 5], 0, 0], "%05x"],
    _aL_ = [0, [4, 6, [0, 2, 4], 0, 0], "%04x"],
    _aN_ = [0, [4, 6, [0, 2, 3], 0, 0], "%03x"],
    _aP_ = [0, [4, 6, [0, 2, 2], 0, 0], cst_02x],
    _aR_ = [0, [4, 6, [0, 2, 1], 0, 0], "%01x"],
    cst_Fmt_Fmt_store_get = "Fmt.Fmt_store_get",
    cst_Fmt_Fmt_store_set = "Fmt.Fmt_store_set",
    _a8_ = [0, 15713, 82908052];
   function failwith(fmt){return caml_call2(kstr, Stdlib[2], fmt);}
   function failwith_notrace(fmt){
    return caml_call2(kstr, function(s){throw [0, Stdlib[7], s];}, fmt);
   }
   function invalid_arg(fmt){return caml_call2(kstr, Stdlib[1], fmt);}
   function error(fmt){
    return caml_call2(kstr, function(s){return [1, s];}, fmt);
   }
   function error_msg(fmt){
    return caml_call2(kstr, function(s){return [1, [0, 3854881, s]];}, fmt);
   }
   function flush(ppf, param){return caml_call2(Stdlib_Format[38], ppf, 0);}
   function nop(fmt, ppf){return 0;}
   function any(fmt, ppf, param){return caml_call2(pf, ppf, fmt);}
   function using(f, pp, ppf, v){
    return caml_call2(pp, ppf, caml_call1(f, v));
   }
   function const$0(pp_v, v, ppf, param){return caml_call2(pp_v, ppf, v);}
   function fmt(fmt, ppf){return caml_call2(pf, ppf, fmt);}
   function cut(ppf, param){return caml_call2(Stdlib_Format[29], ppf, 0);}
   function sp(ppf, param){return caml_call2(Stdlib_Format[27], ppf, 0);}
   function sps(n, ppf, param){
    return caml_call3(Stdlib_Format[31], ppf, n, 0);
   }
   function comma(ppf, param){
    caml_call2(Stdlib_Format[13], ppf, cst);
    return sp(ppf, 0);
   }
   function semi(ppf, param){
    caml_call2(Stdlib_Format[13], ppf, cst$0);
    return sp(ppf, 0);
   }
   function iter(opt, iter, pp_elt, ppf, v){
    if(opt) var sth = opt[1], pp_sep = sth; else var pp_sep = cut;
    var is_first = [0, 1];
    function pp_elt$0(v){
     if(is_first[1]) is_first[1] = 0; else caml_call2(pp_sep, ppf, 0);
     return caml_call2(pp_elt, ppf, v);
    }
    return caml_call2(iter, pp_elt$0, v);
   }
   function iter_bindings(opt, iter, pp_binding, ppf, v){
    if(opt) var sth = opt[1], pp_sep = sth; else var pp_sep = cut;
    var is_first = [0, 1];
    function pp_binding$0(k, v){
     if(is_first[1]) is_first[1] = 0; else caml_call2(pp_sep, ppf, 0);
     return caml_call2(pp_binding, ppf, [0, k, v]);
    }
    return caml_call2(iter, pp_binding$0, v);
   }
   function append(pp_v0, pp_v1, ppf, v){
    caml_call2(pp_v0, ppf, v);
    return caml_call2(pp_v1, ppf, v);
   }
   function concat(sep, pps, ppf, v){
    function _fk_(ppf, pp){return caml_call2(pp, ppf, v);}
    return iter(sep, Stdlib_List[18], _fk_, ppf, pps);
   }
   function box(opt, pp_v, ppf, v){
    if(opt) var sth = opt[1], indent = sth; else var indent = 0;
    caml_call2(Stdlib_Format[1], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hbox(pp_v, ppf, v){
    caml_call2(Stdlib_Format[5], ppf, 0);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function vbox(opt, pp_v, ppf, v){
    if(opt) var sth = opt[1], indent = sth; else var indent = 0;
    caml_call2(Stdlib_Format[7], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hvbox(opt, pp_v, ppf, v){
    if(opt) var sth = opt[1], indent = sth; else var indent = 0;
    caml_call2(Stdlib_Format[9], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function hovbox(opt, pp_v, ppf, v){
    if(opt) var sth = opt[1], indent = sth; else var indent = 0;
    caml_call2(Stdlib_Format[11], ppf, indent);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[3], ppf, 0);
   }
   function surround(s1, s2, pp_v, ppf, v){
    caml_call2(Stdlib_Format[13], ppf, s1);
    caml_call2(pp_v, ppf, v);
    return caml_call2(Stdlib_Format[13], ppf, s2);
   }
   function parens(pp_v){
    function _ff_(_fi_, _fj_){
     return surround(cst$2, cst$1, pp_v, _fi_, _fj_);
    }
    return function(_fg_, _fh_){return box(_a_, _ff_, _fg_, _fh_);};
   }
   function brackets(pp_v){
    function _fa_(_fd_, _fe_){
     return surround(cst$4, cst$3, pp_v, _fd_, _fe_);
    }
    return function(_fb_, _fc_){return box(_b_, _fa_, _fb_, _fc_);};
   }
   function braces(pp_v){
    function _e7_(_e__, _e$_){
     return surround(cst$8, cst$7, pp_v, _e__, _e$_);
    }
    return function(_e8_, _e9_){return box(_d_, _e7_, _e8_, _e9_);};
   }
   function quote(opt, pp_v){
    if(opt) var sth = opt[1], mark = sth; else var mark = cst$9;
    function pp_mark(ppf, param){
     return caml_call3(Stdlib_Format[17], ppf, 1, mark);
    }
    function _eZ_(_e5_, _e6_){return append(pp_mark, pp_v, _e5_, _e6_);}
    function _e0_(_e3_, _e4_){return append(_eZ_, pp_mark, _e3_, _e4_);}
    return function(_e1_, _e2_){return box(_e_, _e0_, _e1_, _e2_);};
   }
   var bool = Stdlib_Format[25], int$0 = Stdlib_Format[19];
   function nativeint(ppf, v){return caml_call3(pf, ppf, _f_, v);}
   function int32(ppf, v){return caml_call3(pf, ppf, _g_, v);}
   function int64(ppf, v){return caml_call3(pf, ppf, _h_, v);}
   function uint(ppf, v){return caml_call3(pf, ppf, _i_, v);}
   function uint32(ppf, v){return caml_call3(pf, ppf, _j_, v);}
   function uint64(ppf, v){return caml_call3(pf, ppf, _k_, v);}
   function unativeint(ppf, v){return caml_call3(pf, ppf, _l_, v);}
   var char$0 = Stdlib_Format[23], string = Stdlib_Format[13];
   function buffer(ppf, b){
    return caml_call2(string, ppf, caml_call1(Stdlib_Buffer[2], b));
   }
   function exn(ppf, e){
    return caml_call2(string, ppf, caml_call1(Stdlib_Printexc[1], e));
   }
   function exn_backtrace(ppf, param){
    var bt = param[2], e = param[1];
    function pp_backtrace_str(ppf, s){
     var stop = caml_ml_string_length(s) - 1 | 0;
     if(runtime.caml_string_equal(s, cst$20))
      return caml_call2(string, ppf, cst_No_backtrace_available);
     var left = 0, right = 0;
     for(;;){
      if(right === stop)
       return caml_call2
               (string,
                ppf,
                caml_call3(Stdlib_String[16], s, left, right - left | 0));
      if(10 === caml_string_get(s, right)){
       caml_call2
        (string,
         ppf,
         caml_call3(Stdlib_String[16], s, left, right - left | 0));
       cut(ppf, 0);
       var
        right$0 = right + 1 | 0,
        left$0 = right + 1 | 0,
        left = left$0,
        right = right$0;
      }
      else
       var right$1 = right + 1 | 0, right = right$1;
     }
    }
    return caml_call6
            (pf,
             ppf,
             _m_,
             exn,
             e,
             pp_backtrace_str,
             caml_call1(Stdlib_Printexc[14], bt));
   }
   function float$0(ppf, v){return caml_call3(pf, ppf, _n_, v);}
   function round_dfrac(d, x){
    if(x - Math.floor(x + 0.5) == 0.) return x;
    var m = Math.pow(10., d);
    return Math.floor(x * m + 0.5) / m;
   }
   function float_dfrac(d, ppf, f){
    return caml_call3(pf, ppf, _o_, round_dfrac(d, f));
   }
   function float_dsig(d, ppf, f){
    if(f == 0.)
     var _eY_ = 0.;
    else
     var
      m = Math.pow(10., Math.floor(runtime.caml_log10_float(Math.abs(f)))),
      _eY_ = round_dfrac(d, f / m) * m;
    return caml_call3(pf, ppf, _p_, _eY_);
   }
   function pair(opt, pp_fst, pp_snd, ppf, param){
    var snd = param[2], fst = param[1];
    if(opt) var sth = opt[1], pp_sep = sth; else var pp_sep = cut;
    caml_call2(pp_fst, ppf, fst);
    caml_call2(pp_sep, ppf, 0);
    return caml_call2(pp_snd, ppf, snd);
   }
   function option(opt, pp_v, ppf, param){
    if(opt) var sth = opt[1], pp_none = sth; else var pp_none = nop;
    if(! param) return caml_call2(pp_none, ppf, 0);
    var v = param[1];
    return caml_call2(pp_v, ppf, v);
   }
   function result(ok, error, ppf, param){
    if(0 === param[0]){var v = param[1]; return caml_call2(ok, ppf, v);}
    var e = param[1];
    return caml_call2(error, ppf, e);
   }
   function list(sep, pp_elt){
    var _eV_ = Stdlib_List[18];
    return function(_eW_, _eX_){return iter(sep, _eV_, pp_elt, _eW_, _eX_);};
   }
   function array(sep, pp_elt){
    var _eS_ = Stdlib_Array[11];
    return function(_eT_, _eU_){return iter(sep, _eS_, pp_elt, _eT_, _eU_);};
   }
   function seq(sep, pp_elt){
    var _eP_ = Stdlib_Seq[4];
    return function(_eQ_, _eR_){return iter(sep, _eP_, pp_elt, _eQ_, _eR_);};
   }
   function hashtbl(sep, pp_binding){
    var _eM_ = Stdlib_Hashtbl[12];
    return function(_eN_, _eO_){
     return iter_bindings(sep, _eM_, pp_binding, _eN_, _eO_);};
   }
   function queue(sep, pp_elt){
    var _eI_ = Stdlib_Queue[15], _eJ_ = 0;
    return function(_eK_, _eL_){return iter(_eJ_, _eI_, pp_elt, _eK_, _eL_);};
   }
   function stack(sep, pp_elt){
    var _eE_ = Stdlib_Stack[13], _eF_ = 0;
    return function(_eG_, _eH_){return iter(_eF_, _eE_, pp_elt, _eG_, _eH_);};
   }
   var
    sig_names =
      [0,
       [0, Stdlib_Sys[16], cst_SIGABRT],
       [0,
        [0, Stdlib_Sys[17], cst_SIGALRM],
        [0,
         [0, Stdlib_Sys[18], cst_SIGFPE],
         [0,
          [0, Stdlib_Sys[19], cst_SIGHUP],
          [0,
           [0, Stdlib_Sys[20], cst_SIGILL],
           [0,
            [0, Stdlib_Sys[21], cst_SIGINT],
            [0,
             [0, Stdlib_Sys[22], cst_SIGKILL],
             [0,
              [0, Stdlib_Sys[23], cst_SIGPIPE],
              [0,
               [0, Stdlib_Sys[24], cst_SIGQUIT],
               [0,
                [0, Stdlib_Sys[25], cst_SIGSEGV],
                [0,
                 [0, Stdlib_Sys[26], cst_SIGTERM],
                 [0,
                  [0, Stdlib_Sys[27], cst_SIGUSR1],
                  [0,
                   [0, Stdlib_Sys[28], cst_SIGUSR2],
                   [0,
                    [0, Stdlib_Sys[29], cst_SIGCHLD],
                    [0,
                     [0, Stdlib_Sys[30], cst_SIGCONT],
                     [0,
                      [0, Stdlib_Sys[31], cst_SIGSTOP],
                      [0,
                       [0, Stdlib_Sys[32], cst_SIGTSTP],
                       [0,
                        [0, Stdlib_Sys[33], cst_SIGTTIN],
                        [0,
                         [0, Stdlib_Sys[34], cst_SIGTTOU],
                         [0,
                          [0, Stdlib_Sys[35], cst_SIGVTALRM],
                          [0,
                           [0, Stdlib_Sys[36], cst_SIGPROF],
                           [0,
                            [0, Stdlib_Sys[37], cst_SIGBUS],
                            [0,
                             [0, Stdlib_Sys[38], cst_SIGPOLL],
                             [0,
                              [0, Stdlib_Sys[39], cst_SIGSYS],
                              [0,
                               [0, Stdlib_Sys[40], cst_SIGTRAP],
                               [0,
                                [0, Stdlib_Sys[41], cst_SIGURG],
                                [0,
                                 [0, Stdlib_Sys[42], cst_SIGXCPU],
                                 [0, [0, Stdlib_Sys[43], cst_SIGXFSZ], 0]]]]]]]]]]]]]]]]]]]]]]]]]]]];
   function signal(ppf, s){
    var match = caml_call2(Stdlib_List[52], s, sig_names);
    if(! match) return caml_call3(pf, ppf, _q_, s);
    var name = match[1];
    return caml_call2(string, ppf, name);
   }
   function uchar(ppf, u){
    return caml_call3(pf, ppf, _r_, caml_call1(Stdlib_Uchar[10], u));
   }
   function string$0(ppf, s){return caml_call3(pf, ppf, _s_, s);}
   function pair$0(pp_fst, pp_snd){
    var _eh_ = 0;
    function _ei_(_eC_, _eD_){return box(_eh_, pp_snd, _eC_, _eD_);}
    function _ej_(_eB_){return _eB_[2];}
    function _ek_(_ez_, _eA_){return using(_ej_, _ei_, _ez_, _eA_);}
    var _el_ = 0;
    function _em_(_ex_, _ey_){return box(_el_, pp_fst, _ex_, _ey_);}
    function _en_(_ew_){return _ew_[1];}
    function _eo_(_eu_, _ev_){return using(_en_, _em_, _eu_, _ev_);}
    function _ep_(_es_, _et_){return append(_eo_, comma, _es_, _et_);}
    return parens
            (function(_eq_, _er_){return append(_ep_, _ek_, _eq_, _er_);});
   }
   function option$0(pp_v, ppf, param){
    if(! param) return caml_call2(pf, ppf, _u_);
    var v = param[1];
    return caml_call4(pf, ppf, _t_, pp_v, v);
   }
   function result$0(ok, error, ppf, param){
    if(0 === param[0]){
     var v = param[1];
     return caml_call4(pf, ppf, _v_, ok, v);
    }
    var e = param[1];
    return caml_call4(pf, ppf, _w_, error, e);
   }
   function iter$0(iter_f, pp_name, pp_elt){
    var _d7_ = 0;
    function _d8_(_ef_, _eg_){return box(_d7_, pp_elt, _ef_, _eg_);}
    var _d9_ = [0, sp];
    function pp_v(_ed_, _ee_){return iter(_d9_, iter_f, _d8_, _ed_, _ee_);}
    function _d__(_eb_, _ec_){return append(pp_name, sp, _eb_, _ec_);}
    return parens
            (function(_d$_, _ea_){return append(_d__, pp_v, _d$_, _ea_);});
   }
   function iter_bindings$0(iter_f, pp_name, pp_k, pp_v){
    var _dY_ = pair$0(pp_k, pp_v), _dZ_ = [0, sp];
    function pp_v$0(_d5_, _d6_){
     return iter_bindings(_dZ_, iter_f, _dY_, _d5_, _d6_);
    }
    function _d0_(_d3_, _d4_){return append(pp_name, sp, _d3_, _d4_);}
    return parens
            (function(_d1_, _d2_){return append(_d0_, pp_v$0, _d1_, _d2_);});
   }
   function list$0(pp_elt){
    var _dV_ = 0;
    return brackets
            (list
              ([0, semi],
               function(_dW_, _dX_){return box(_dV_, pp_elt, _dW_, _dX_);}));
   }
   function array$0(pp_elt){
    var
     _dO_ = 0,
     pp_v =
       array
        ([0, semi],
         function(_dT_, _dU_){return box(_dO_, pp_elt, _dT_, _dU_);});
    function _dN_(_dR_, _dS_){
     return surround(cst$6, cst$5, pp_v, _dR_, _dS_);
    }
    return function(_dP_, _dQ_){return box(_c_, _dN_, _dP_, _dQ_);};
   }
   function seq$0(pp_elt){
    var _dK_ = 0;
    return brackets
            (seq
              ([0, semi],
               function(_dL_, _dM_){return box(_dK_, pp_elt, _dL_, _dM_);}));
   }
   function hashtbl$0(pp_k, pp_v){
    function _dH_(_dI_, _dJ_){return any(_x_, _dI_, _dJ_);}
    return iter_bindings$0(Stdlib_Hashtbl[12], _dH_, pp_k, pp_v);
   }
   function stack$0(pp_elt){
    function _dE_(_dF_, _dG_){return any(_y_, _dF_, _dG_);}
    return iter$0(Stdlib_Stack[13], _dE_, pp_elt);
   }
   function queue$0(pp_elt){
    function _dB_(_dC_, _dD_){return any(_z_, _dC_, _dD_);}
    return iter$0(Stdlib_Queue[15], _dB_, pp_elt);
   }
   function field(opt, l, prj, pp_v, ppf, v){
    if(opt) var sth = opt[1], label = sth; else var label = string$0;
    return caml_call6(pf, ppf, _A_, label, l, pp_v, caml_call1(prj, v));
   }
   function record(pps){
    var _dm_ = [0, function(_dz_, _dA_){return any(_B_, _dz_, _dA_);}];
    function _dn_(_dx_, _dy_){return concat(_dm_, pps, _dx_, _dy_);}
    var _do_ = 0;
    function _dp_(_dv_, _dw_){return vbox(_do_, _dn_, _dv_, _dw_);}
    function _dq_(_dt_, _du_){
     return surround(cst$11, cst$10, _dp_, _dt_, _du_);
    }
    return function(_dr_, _ds_){return box(_C_, _dq_, _dr_, _ds_);};
   }
   function ipow10(n){
    var acc = 1, n$0 = n;
    for(;;){
     if(0 === n$0) return acc;
     var n$1 = n$0 - 1 | 0, acc$0 = acc * 10 | 0, acc = acc$0, n$0 = n$1;
    }
   }
   var si_symb = _D_.slice(), si_symb_max = 16;
   function si_size(scale, u, ppf, s$2){
    var s$3 = s$2;
    for(;;){
     var _dk_ = scale < -8 ? 1 : 0, _dl_ = _dk_ || (8 < scale ? 1 : 0);
     if(_dl_) return caml_call1(invalid_arg(_K_), scale);
     if(0 === s$3)
      var pow_div_3 = 0;
     else{
      var p = -1, x = s$3;
      for(;;){
       if(0 === x) break;
       var x$0 = x / 10 | 0, p$0 = p + 1 | 0, p = p$0, x = x$0;
      }
      var pow_div_3 = p / 3 | 0;
     }
     var symb = (scale + 8 | 0) + pow_div_3 | 0;
     if(16 < symb)
      var factor = ipow10((8 - scale | 0) * 3 | 0), symb$0 = si_symb_max;
     else
      var
       factor$0 = ipow10(pow_div_3 * 3 | 0),
       factor = factor$0,
       symb$0 = symb;
     if(1 === factor)
      return caml_call5
              (pf,
               ppf,
               _L_,
               s$3,
               caml_check_bound(si_symb, symb$0)[1 + symb$0],
               u);
     var
      symb$1 = caml_check_bound(si_symb, symb$0)[1 + symb$0],
      m = caml_div(s$3, factor),
      n = caml_mod(s$3, factor);
     if(100 <= m){
      var m_up = 0 < n ? m + 1 | 0 : m;
      if(1000 > m_up) return caml_call5(pf, ppf, _E_, m_up, symb$1, u);
      var s = caml_mul(m_up, factor), s$3 = s;
     }
     else if(10 <= m){
      var
       f_factor = factor / 10 | 0,
       f_m = caml_div(n, f_factor),
       f_n = caml_mod(n, f_factor),
       f_m_up = 0 < f_n ? f_m + 1 | 0 : f_m;
      if(0 === f_m_up) return caml_call5(pf, ppf, _F_, m, symb$1, u);
      if(10 > f_m_up) return caml_call6(pf, ppf, _G_, m, f_m_up, symb$1, u);
      var
       s$0 = caml_mul(m, factor) + caml_mul(f_m_up, f_factor) | 0,
       s$3 = s$0;
     }
     else{
      var
       f_factor$0 = factor / 100 | 0,
       f_m$0 = caml_div(n, f_factor$0),
       f_n$0 = caml_mod(n, f_factor$0),
       f_m_up$0 = 0 < f_n$0 ? f_m$0 + 1 | 0 : f_m$0;
      if(0 === f_m_up$0) return caml_call5(pf, ppf, _H_, m, symb$1, u);
      if(100 > f_m_up$0)
       return 0 === (f_m_up$0 % 10 | 0)
               ? caml_call6(pf, ppf, _I_, m, f_m_up$0 / 10 | 0, symb$1, u)
               : caml_call6(pf, ppf, _J_, m, f_m_up$0, symb$1, u);
      var
       s$1 = caml_mul(m, factor) + caml_mul(f_m_up$0, f_factor$0) | 0,
       s$3 = s$1;
     }
    }
   }
   function byte_size(ppf, s){return si_size(0, cst_B, ppf, s);}
   function bi_byte_size(ppf, s){
    var k = 1024, _dh_ = 1;
    function pp_frac(_di_, _dj_){return float_dfrac(_dh_, _di_, _dj_);}
    function div_round_up(m, n){return caml_div((m + n | 0) - 1 | 0, n);}
    if(s < 1024) return caml_call3(pf, ppf, _M_, s);
    var m = 1048576;
    if(s < 1048576){
     var sk = s / 1024 | 0;
     return 10 <= sk
             ? caml_call5(pf, ppf, _N_, div_round_up(s, k), kstr$0, i)
             : caml_call6(pf, ppf, _O_, pp_frac, s / 1024, kstr$0, i);
    }
    var g = 1073741824;
    if(s < 1073741824){
     var sm = s / 1048576 | 0;
     return 10 <= sm
             ? caml_call4(pf, ppf, _P_, div_round_up(s, m), i)
             : caml_call5(pf, ppf, _Q_, pp_frac, s / 1048576, i);
    }
    var t = 0;
    if(s < 0){
     var sg = s / 1073741824 | 0;
     return 10 <= sg
             ? caml_call4(pf, ppf, _R_, div_round_up(s, g), i)
             : caml_call5(pf, ppf, _S_, pp_frac, s / 1073741824, i);
    }
    var p = 0;
    if(s < 0){
     var st = caml_div(s, 0);
     return 10 <= st
             ? caml_call4(pf, ppf, _T_, div_round_up(s, t), i)
             : caml_call5(pf, ppf, _U_, pp_frac, s / 0, i);
    }
    var sp = caml_div(s, 0);
    return 10 <= sp
            ? caml_call4(pf, ppf, _V_, div_round_up(s, p), i)
            : caml_call5(pf, ppf, _W_, pp_frac, s / 0, i);
   }
   function unsigned_compare(x0, x1){
    return caml_call2
            (Stdlib_Int64[15],
             caml_int64_sub(x0, Stdlib_Int64[10]),
             caml_int64_sub(x1, Stdlib_Int64[10]));
   }
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, Stdlib_Int64[1]))
     return 0 <= unsigned_compare(n, d) ? Stdlib_Int64[2] : Stdlib_Int64[1];
    var
     q =
       runtime.caml_int64_shift_left
        (caml_int64_div(runtime.caml_int64_shift_right_unsigned(n, 1), d), 1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return 0 <= unsigned_compare(r, d) ? caml_call1(Stdlib_Int64[6], q) : q;
   }
   function unsigned_rem(n, d){
    return caml_int64_sub
            (n, caml_int64_mul(caml_call2(Stdlib_Int64[4], n, d), d));
   }
   function pp_si_span(counter, unit_str, si_unit, si_higher_unit, ppf, span){
    function geq(x, y){return 0 <= unsigned_compare(x, y) ? 1 : 0;}
    var m = unsigned_div(span, si_unit), n = unsigned_rem(span, si_unit);
    if(geq(m, _X_)){
     var
      m_up =
        caml_call2(Stdlib_Int64[17], n, _Y_)
         ? m
         : caml_call1(Stdlib_Int64[6], m),
      span$0 = caml_int64_mul(m_up, si_unit);
     if(! geq(span$0, si_higher_unit))
      return caml_call4(pf, ppf, _Z_, m_up, unit_str);
     if(counter >= 50)
      return caml_trampoline_return(uint64_ns_span$0, [0, ppf, span$0]);
     var counter$0 = counter + 1 | 0;
     return uint64_ns_span$0(counter$0, ppf, span$0);
    }
    if(geq(m, ___)){
     var
      f_factor = unsigned_div(si_unit, _$_),
      f_m = unsigned_div(n, f_factor),
      f_n = unsigned_rem(n, f_factor),
      f_m_up =
        caml_call2(Stdlib_Int64[17], f_n, _aa_)
         ? f_m
         : caml_call1(Stdlib_Int64[6], f_m);
     if(! caml_notequal(f_m_up, _ab_))
      return caml_call4(pf, ppf, _ae_, m, unit_str);
     if(! geq(f_m_up, _ac_))
      return caml_call5(pf, ppf, _ad_, m, f_m_up, unit_str);
     var
      _df_ =
        caml_int64_add
         (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up, f_factor));
     if(counter >= 50)
      return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _df_]);
     var counter$1 = counter + 1 | 0;
     return uint64_ns_span$0(counter$1, ppf, _df_);
    }
    var
     f_factor$0 = unsigned_div(si_unit, _af_),
     f_m$0 = unsigned_div(n, f_factor$0),
     f_n$0 = unsigned_rem(n, f_factor$0),
     f_m_up$0 =
       caml_call2(Stdlib_Int64[17], f_n$0, _ag_)
        ? f_m$0
        : caml_call1(Stdlib_Int64[6], f_m$0);
    if(! caml_notequal(f_m_up$0, _ah_))
     return caml_call4(pf, ppf, _ao_, m, unit_str);
    if(! geq(f_m_up$0, _ai_))
     return caml_call2
              (Stdlib_Int64[17], runtime.caml_int64_mod(f_m_up$0, _ak_), _aj_)
             ? caml_call5
               (pf, ppf, _am_, m, caml_int64_div(f_m_up$0, _al_), unit_str)
             : caml_call5(pf, ppf, _an_, m, f_m_up$0, unit_str);
    var
     _dg_ =
       caml_int64_add
        (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up$0, f_factor$0));
    if(counter >= 50)
     return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _dg_]);
    var counter$2 = counter + 1 | 0;
    return uint64_ns_span$0(counter$2, ppf, _dg_);
   }
   function pp_non_si
   (counter, unit_str, unit, unit_lo_str, unit_lo, unit_lo_size, ppf, span){
    var m = unsigned_div(span, unit), n = unsigned_rem(span, unit);
    if(caml_call2(Stdlib_Int64[17], n, _ap_))
     return caml_call4(pf, ppf, _aq_, m, unit_str);
    var
     f_m = unsigned_div(n, unit_lo),
     f_n = unsigned_rem(n, unit_lo),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _ar_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    if(0 > unsigned_compare(f_m_up, unit_lo_size))
     return caml_call6(pf, ppf, _as_, m, unit_str, f_m_up, unit_lo_str);
    var
     _de_ =
       caml_int64_add
        (caml_int64_mul(m, unit), caml_int64_mul(f_m_up, unit_lo));
    if(counter >= 50)
     return caml_trampoline_return(uint64_ns_span$0, [0, ppf, _de_]);
    var counter$0 = counter + 1 | 0;
    return uint64_ns_span$0(counter$0, ppf, _de_);
   }
   function uint64_ns_span$0(counter, ppf, span){
    function lt(x, y){return -1 === unsigned_compare(x, y) ? 1 : 0;}
    if(lt(span, us_span)) return caml_call3(pf, ppf, _at_, span);
    if(lt(span, ms_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_us, us_span, ms_span, ppf, span]);
     var counter$0 = counter + 1 | 0;
     return pp_si_span(counter$0, cst_us, us_span, ms_span, ppf, span);
    }
    if(lt(span, sec_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_ms, ms_span, sec_span, ppf, span]);
     var counter$1 = counter + 1 | 0;
     return pp_si_span(counter$1, cst_ms, ms_span, sec_span, ppf, span);
    }
    if(lt(span, min_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_s, sec_span, min_span, ppf, span]);
     var counter$2 = counter + 1 | 0;
     return pp_si_span(counter$2, cst_s, sec_span, min_span, ppf, span);
    }
    if(lt(span, hour_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_min, min_span, cst_s$0, sec_span, _au_, ppf, span]);
     var counter$3 = counter + 1 | 0;
     return pp_non_si
             (counter$3,
              cst_min,
              min_span,
              cst_s$0,
              sec_span,
              _au_,
              ppf,
              span);
    }
    if(lt(span, day_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_h, hour_span, cst_min$0, min_span, _av_, ppf, span]);
     var counter$4 = counter + 1 | 0;
     return pp_non_si
             (counter$4,
              cst_h,
              hour_span,
              cst_min$0,
              min_span,
              _av_,
              ppf,
              span);
    }
    if(lt(span, year_span)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si,
               [0, cst_d, day_span, cst_h$0, hour_span, _aw_, ppf, span]);
     var counter$5 = counter + 1 | 0;
     return pp_non_si
             (counter$5, cst_d, day_span, cst_h$0, hour_span, _aw_, ppf, span);
    }
    var m = unsigned_div(span, year_span), n = unsigned_rem(span, year_span);
    if(caml_call2(Stdlib_Int64[17], n, _ax_))
     return caml_call3(pf, ppf, _ay_, m);
    var
     f_m = unsigned_div(n, day_span),
     f_n = unsigned_rem(n, day_span),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _az_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    return 0 <= unsigned_compare(f_m_up, y)
            ? caml_call3(pf, ppf, _aA_, caml_call1(Stdlib_Int64[6], m))
            : caml_call4(pf, ppf, _aB_, m, f_m_up);
   }
   function uint64_ns_span(ppf, span){
    return caml_trampoline(uint64_ns_span$0(0, ppf, span));
   }
   function iter_vec(f, param){
    var get = param[2], n = param[1], _dc_ = n - 1 | 0, _db_ = 0;
    if(_dc_ >= 0){
     var i = _db_;
     for(;;){
      caml_call2(f, i, caml_call1(get, i));
      var _dd_ = i + 1 | 0;
      if(_dc_ === i) break;
      var i = _dd_;
     }
    }
    return 0;
   }
   function vec(sep){
    return function(_c__, _c$_, _da_){
     return iter_bindings(sep, iter_vec, _c__, _c$_, _da_);};
   }
   function _aC_(s){
    return [0,
            caml_ml_string_length(s),
            function(_c9_){return caml_string_get(s, _c9_);}];
   }
   function on_string(_c6_, _c7_, _c8_){return using(_aC_, _c6_, _c7_, _c8_);}
   function _aD_(b){
    return [0,
            runtime.caml_ml_bytes_length(b),
            function(_c5_){return runtime.caml_bytes_get(b, _c5_);}];
   }
   function on_bytes(_c2_, _c3_, _c4_){return using(_aD_, _c2_, _c3_, _c4_);}
   var
    _aE_ = 0,
    _aG_ = [0, [0, 268435455, function(_c1_){return fmt(_aF_, _c1_);}], _aE_],
    _aI_ = [0, [0, 16777215, function(_c0_){return fmt(_aH_, _c0_);}], _aG_],
    _aK_ = [0, [0, 1048575, function(_cZ_){return fmt(_aJ_, _cZ_);}], _aI_],
    _aM_ = [0, [0, 65535, function(_cY_){return fmt(_aL_, _cY_);}], _aK_],
    _aO_ = [0, [0, 4095, function(_cX_){return fmt(_aN_, _cX_);}], _aM_],
    _aQ_ = [0, [0, 255, function(_cW_){return fmt(_aP_, _cW_);}], _aO_],
    prefix0x = [0, [0, 15, function(_cV_){return fmt(_aR_, _cV_);}], _aQ_];
   function ascii(opt, _cQ_, param, ppf, v){
    var n = v[1];
    if(opt) var sth = opt[1], w = sth; else var w = 0;
    if(_cQ_)
     var sth$0 = _cQ_[1], subst = sth$0;
    else
     var
      _cS_ = 46,
      subst = function(_cT_, _cU_){return const$0(char$0, _cS_, _cT_, _cU_);};
    function pp_char(ppf, param){
     var c = param[2];
     if(32 <= c && 127 > c) return caml_call2(char$0, ppf, c);
     return caml_call2(subst, ppf, 0);
    }
    vec(0)(pp_char, ppf, v);
    var _cR_ = n < w ? 1 : 0;
    return _cR_ ? sps(w - n | 0, ppf, 0) : _cR_;
   }
   function octets(opt, _cL_, param, ppf, v){
    var n = v[1];
    if(opt) var sth = opt[1], w = sth; else var w = 0;
    if(_cL_) var sth$0 = _cL_[1], sep = sth$0; else var sep = sp;
    function pp_sep(ppf, i){
     var _cO_ = 0 < i ? 1 : 0, _cP_ = _cO_ ? 0 === (i % 2 | 0) ? 1 : 0 : _cO_;
     return _cP_ ? caml_call2(sep, ppf, 0) : _cP_;
    }
    function pp_char(ppf, param){
     var c = param[2], i = param[1];
     pp_sep(ppf, i);
     return caml_call3(pf, ppf, _aT_, c);
    }
    vec([0, nop])(pp_char, ppf, v);
    var _cM_ = w - 1 | 0;
    if(_cM_ >= n){
     var i = n;
     for(;;){
      pp_sep(ppf, i);
      sps(2, ppf, 0);
      var _cN_ = i + 1 | 0;
      if(_cM_ === i) break;
      var i = _cN_;
     }
    }
    return 0;
   }
   function addresses(addr, opt, pp_vec, ppf, v){
    var n$0 = v[1];
    if(opt) var sth = opt[1], w = sth; else var w = 16;
    if(addr)
     var pp$0 = addr[1], addr$0 = pp$0;
    else{
     var
      _cy_ = function(_cJ_, _cK_){return const$0(string, cst$12, _cJ_, _cK_);},
      max = caml_mul(caml_div(n$0 - 1 | 0, w), w),
      _cx_ = function(param){var x = param[1]; return max <= x ? 1 : 0;},
      match = caml_call2(Stdlib_List[40], _cx_, prefix0x);
     if(match)
      var pp = match[1][2], _cz_ = pp;
     else
      var _cz_ = function(_cI_){return fmt(_aS_, _cI_);};
     var
      addr$0 = function(_cG_, _cH_){return append(_cz_, _cy_, _cG_, _cH_);};
    }
    function pp_sub(ppf, param){
     var sub = param[2], i = param[1];
     caml_call2(addr$0, ppf, caml_mul(i, w));
     return box(0, pp_vec, ppf, sub);
    }
    var get = v[2], n = v[1];
    function _cv_(j){
     var off = caml_mul(w, j);
     function _cF_(i){return caml_call1(get, i + off | 0);}
     return [0, caml_call2(Stdlib[16], w, n - off | 0), _cF_];
    }
    var _cw_ = [0, caml_div(n - 1 | 0, w) + 1 | 0, _cv_], _cA_ = vec(0);
    return vbox
            (0,
             function(_cB_, _cC_){
              var _cE_ = _cC_, _cD_ = _cB_;
              return _cA_(pp_sub, _cD_, _cE_);
             },
             ppf,
             _cw_);
   }
   function hex(opt, param){
    if(opt) var sth = opt[1], w = sth; else var w = 16;
    var _bZ_ = 0, _b0_ = 0, _b1_ = [0, w];
    function _b2_(_ct_, _cu_){return ascii(_b1_, _b0_, _bZ_, _ct_, _cu_);}
    var _b3_ = 0;
    function _b4_(_cr_, _cs_){return box(_b3_, _b2_, _cr_, _cs_);}
    var _b5_ = 2;
    function _b6_(_cp_, _cq_){return sps(_b5_, _cp_, _cq_);}
    var _b7_ = 0, _b8_ = 0, _b9_ = [0, w];
    function _b__(_cn_, _co_){return octets(_b9_, _b8_, _b7_, _cn_, _co_);}
    var _b$_ = 0;
    function _ca_(_cl_, _cm_){return box(_b$_, _b__, _cl_, _cm_);}
    function _cb_(_cj_, _ck_){return append(_ca_, _b6_, _cj_, _ck_);}
    function _cc_(_ch_, _ci_){return append(_cb_, _b4_, _ch_, _ci_);}
    var _cd_ = [0, w], _ce_ = 0;
    return function(_cf_, _cg_){
     return addresses(_ce_, _cd_, _cc_, _cf_, _cg_);};
   }
   function is_nl(c){return 10 === c ? 1 : 0;}
   function is_nl_or_sp(c){
    var _bX_ = 10 === c ? 1 : 0, _bY_ = _bX_ || (32 === c ? 1 : 0);
    return _bY_;
   }
   function is_white(param){
    a:
    {
     if(14 <= param){if(32 === param) break a;} else if(9 <= param) break a;
     return 0;
    }
    return 1;
   }
   function not_white(c){return 1 - is_white(c);}
   function not_white_or_nl(c){
    var _bW_ = 10 === c ? 1 : 0;
    return _bW_ ? _bW_ : not_white(c);
   }
   function stop_at(sat, start, max, s){
    var start$0 = start;
    for(;;){
     if(max < start$0) return start$0;
     if(caml_call1(sat, caml_string_get(s, start$0))) return start$0;
     var start$1 = start$0 + 1 | 0, start$0 = start$1;
    }
   }
   function sub(s, start, stop, max){
    if(start === stop) return cst$13;
    if(0 === start && max < stop) return s;
    return caml_call3(Stdlib_String[16], s, start, stop - start | 0);
   }
   function words(ppf, s){
    var
     max = caml_ml_string_length(s) - 1 | 0,
     start$1 = stop_at(not_white, 0, max, s);
    if(max < start$1) return 0;
    var start = start$1;
    for(;;){
     var stop = stop_at(is_white, start, max, s);
     if(max < stop){
      var _bU_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bU_);
     }
     var _bV_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bV_);
     var start$0 = stop_at(not_white, stop, max, s);
     if(max < start$0) return 0;
     caml_call2(Stdlib_Format[27], ppf, 0);
     var start = start$0;
    }
   }
   function paragraphs(ppf, s){
    var
     max = caml_ml_string_length(s) - 1 | 0,
     start$3 = stop_at(not_white, 0, max, s);
    if(max < start$3) return 0;
    var start = start$3;
    for(;;){
     var stop = stop_at(is_white, start, max, s);
     if(max < stop){
      var _bS_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bS_);
     }
     var _bT_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bT_);
     var start$0 = stop_at(not_white_or_nl, stop, max, s);
     if(max < start$0) return 0;
     if(10 === caml_string_get(s, start$0)){
      var start$1 = stop_at(not_white_or_nl, start$0 + 1 | 0, max, s);
      if(max < start$1) return 0;
      if(10 === caml_string_get(s, start$1)){
       var start$2 = stop_at(not_white, start$1 + 1 | 0, max, s);
       if(max < start$2) return 0;
       caml_call2(Stdlib_Format[34], ppf, 0);
       caml_call2(Stdlib_Format[34], ppf, 0);
       var start = start$2;
      }
      else{caml_call2(Stdlib_Format[27], ppf, 0); var start = start$1;}
     }
     else{caml_call2(Stdlib_Format[27], ppf, 0); var start = start$0;}
    }
   }
   function text(ppf, s){
    var max = caml_ml_string_length(s) - 1 | 0, start = 0;
    for(;;){
     var stop = stop_at(is_nl_or_sp, start, max, s);
     if(max < stop){
      var _bQ_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bQ_);
     }
     var _bR_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bR_);
     var match = caml_string_get(s, stop);
     if(10 === match)
      caml_call2(Stdlib_Format[34], ppf, 0);
     else{
      if(32 !== match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aU_], 1);
      caml_call2(Stdlib_Format[27], ppf, 0);
     }
     var start$0 = stop + 1 | 0, start = start$0;
    }
   }
   function lines(ppf, s){
    var max = caml_ml_string_length(s) - 1 | 0, start = 0;
    for(;;){
     var stop = stop_at(is_nl, start, max, s);
     if(max < stop){
      var _bO_ = sub(s, start, stop, max);
      return caml_call2(Stdlib_Format[13], ppf, _bO_);
     }
     var _bP_ = sub(s, start, stop, max);
     caml_call2(Stdlib_Format[13], ppf, _bP_);
     caml_call2(Stdlib_Format[34], ppf, 0);
     var start$0 = stop + 1 | 0, start = start$0;
    }
   }
   function truncated(max, ppf, s){
    if(caml_ml_string_length(s) <= max)
     return caml_call2(Stdlib_Format[13], ppf, s);
    var _bL_ = max - 4 | 0, _bK_ = 0;
    if(_bL_ >= 0){
     var i = _bK_;
     for(;;){
      var _bM_ = caml_string_get(s, i);
      caml_call2(Stdlib_Format[23], ppf, _bM_);
      var _bN_ = i + 1 | 0;
      if(_bL_ === i) break;
      var i = _bN_;
     }
    }
    return caml_call2(Stdlib_Format[13], ppf, cst$14);
   }
   function text_loc(ppf, param){
    var
     _bJ_ = param[2],
     c1 = _bJ_[2],
     l1 = _bJ_[1],
     match = param[1],
     c0 = match[2],
     l0 = match[1];
    if(l0 === l1 && c0 === c1) return caml_call4(pf, ppf, _aV_, l0, c0);
    return caml_call6(pf, ppf, _aW_, l0, c0, l1, c1);
   }
   function one_of(opt, pp_v, ppf, vs){
    if(opt) var sth = opt[1], empty = sth; else var empty = nop;
    if(! vs) return caml_call2(empty, ppf, 0);
    var v = vs[1], _bI_ = vs[2];
    if(! _bI_) return caml_call2(pp_v, ppf, v);
    if(_bI_[2]){
     var
      loop =
        function(ppf, param){
         var param$0 = param;
         for(;;){
          if(! param$0)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
          var v = param$0[1];
          if(! param$0[2]) return caml_call4(pf, ppf, _aY_, pp_v, v);
          var vs = param$0[2];
          caml_call4(pf, ppf, _aX_, pp_v, v);
          var param$0 = vs;
         }
        };
     return caml_call4(pf, ppf, _a0_, loop, vs);
    }
    var v1 = _bI_[1];
    return caml_call6(pf, ppf, _a1_, pp_v, v, pp_v, v1);
   }
   function did_you_mean(opt, _bC_, kind, pp_v, ppf, param){
    var hints = param[2], v = param[1];
    if(opt)
     var sth = opt[1], pre = sth;
    else
     var pre = function(_bG_, _bH_){return any(_a4_, _bG_, _bH_);};
    if(_bC_) var sth$0 = _bC_[1], post = sth$0; else var post = nop;
    if(! hints)
     return caml_call9(pf, ppf, _a3_, pre, 0, kind, pp_v, v, post, 0);
    var _bD_ = 0;
    return caml_call11
            (pf,
             ppf,
             _a2_,
             pre,
             0,
             kind,
             pp_v,
             v,
             post,
             0,
             function(_bE_, _bF_){return one_of(_bD_, pp_v, _bE_, _bF_);},
             hints);
   }
   var Imap = caml_call1(Stdlib_Map[1], [0, Stdlib_Int[9]]), id = [0, 0];
   function attr(enc, dec){id[1]++; return [0, id[1], enc, dec];}
   var
    Fmt_store_get = [248, cst_Fmt_Fmt_store_get, caml_fresh_oo_id(0)],
    Fmt_store_set = [248, cst_Fmt_Fmt_store_set, caml_fresh_oo_id(0)];
   function store_op(op, ppf){
    var funs = caml_call2(Stdlib_Format[106], ppf, 0);
    return caml_call1(funs[1], op);
   }
   function get(attr, ppf){
    var dec = attr[3], s = store_op([0, Fmt_store_get, attr], ppf);
    return caml_string_notequal(s, cst$20) ? [0, caml_call1(dec, s)] : 0;
   }
   function set(attr, v, ppf){
    for(;;){
     if
      (!
       caml_string_notequal
        (store_op([0, Fmt_store_set, attr, v], ppf), cst_ok$0))
      return 0;
     var
      funs = caml_call2(Stdlib_Format[106], ppf, 0),
      other = funs[1],
      s = [0, Imap[1]],
      mark_open_stag$0 =
        function(s, other){
         function mark_open_stag(stag){
          if(stag[1] === Fmt_store_get){
           var id = stag[2][1], _bz_ = caml_call2(Imap[18], id, s[1]);
           return caml_call2(Stdlib_Option[3], _bz_, cst$15);
          }
          if(stag[1] !== Fmt_store_set) return caml_call1(other, stag);
          var
           v = stag[3],
           match = stag[2],
           enc = match[2],
           id$0 = match[1],
           _bA_ = s[1],
           _bB_ = caml_call1(enc, v);
          s[1] = caml_call3(Imap[2], id$0, _bB_, _bA_);
          return cst_ok;
         }
         return mark_open_stag;
        },
      mark_open_stag = mark_open_stag$0(s, other);
     caml_call2
      (Stdlib_Format[104],
       ppf,
       [0, mark_open_stag, funs[2], funs[3], funs[4]]);
    }
   }
   function def(x, param){if(! param) return x; var y = param[1]; return y;}
   function enc(param){return param ? cst_t : cst_f;}
   function dec(param){
    if(! caml_string_notequal(param, cst_f$0)) return 0;
    if(caml_string_notequal(param, cst_t$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
    return 1;
   }
   var utf_8_attr = attr(enc, dec);
   function utf_8(ppf){return def(1, get(utf_8_attr, ppf));}
   function set_utf_8(ppf, x){return set(utf_8_attr, x, ppf);}
   function enc$0(param){return 870530776 <= param ? cst_N : cst_A;}
   function dec$0(param){
    if(! caml_string_notequal(param, cst_A$0)) return 323557469;
    if(caml_string_notequal(param, cst_N$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
    return 870530776;
   }
   var style_renderer_attr = attr(enc$0, dec$0);
   function style_renderer(ppf){
    return def(870530776, get(style_renderer_attr, ppf));
   }
   function set_style_renderer(ppf, x){
    return set(style_renderer_attr, x, ppf);
   }
   function with_buffer(like, buf){
    var ppf = caml_call1(Stdlib_Format[114], buf);
    if(! like) return ppf;
    var like$0 = like[1], funs = caml_call2(Stdlib_Format[106], like$0, 0);
    caml_call2(Stdlib_Format[104], ppf, funs);
    return ppf;
   }
   function str_like(ppf, fmt){
    var
     buf = caml_call1(Stdlib_Buffer[1], 64),
     bppf = with_buffer([0, ppf], buf);
    function flush(ppf){
     caml_call2(Stdlib_Format[38], ppf, 0);
     var s = caml_call1(Stdlib_Buffer[2], buf);
     caml_call1(Stdlib_Buffer[9], buf);
     return s;
    }
    return caml_call3(Stdlib_Format[144], flush, bppf, fmt);
   }
   function if_utf_8(pp_u, pp, ppf, v){
    var pp_u$0 = utf_8(ppf) ? pp_u : pp;
    return caml_call2(pp_u$0, ppf, v);
   }
   function pp_sgr(ppf, style){
    caml_call3(Stdlib_Format[17], ppf, 0, cst$16);
    caml_call3(Stdlib_Format[17], ppf, 0, style);
    return caml_call3(Stdlib_Format[17], ppf, 0, cst_m);
   }
   function _a7_(_by_){return _by_;}
   var curr_style = attr(function(_bx_){return _bx_;}, _a7_);
   function styled(style, pp_v, ppf, v){
    if(870530776 <= style_renderer(ppf)) return caml_call2(pp_v, ppf, v);
    var match = get(curr_style, ppf);
    if(match)
     var s = match[1], prev = s;
    else{set(curr_style, zero, ppf); var prev = zero;}
    if(typeof style === "number")
     var
      here =
        698610924 <= style
         ? 749039939
           <= style
           ? 870530776
             <= style
             ? 989373200 <= style ? cst_3 : cst_0
             : 756711075 <= style ? cst_32 : cst_36
           : 737308346 === style ? cst_34 : 737455525 <= style ? cst_1 : cst_4
         : -397582078
           <= style
           ? 82908052
             <= style
             ? 242899572 <= style ? cst_2 : cst_33
             : 4100401 <= style ? cst_31 : cst_7
           : -605101559
             === style
             ? cst_35
             : -588596599 <= style ? cst_37 : cst_30;
    else if(15713 <= style[1]){
     var _bs_ = style[2];
     if(typeof _bs_ === "number")
      var
       here =
         82908052 <= _bs_
          ? 749039939
            <= _bs_
            ? 756711075 <= _bs_ ? cst_32$0 : cst_36$0
            : 737308346 <= _bs_ ? cst_34$0 : cst_33$0
          : -588596599
            <= _bs_
            ? 4100401 <= _bs_ ? cst_31$0 : cst_37$0
            : -605101559 <= _bs_ ? cst_35$0 : cst_30$0;
     else
      var
       _bt_ = _bs_[2],
       here =
         82908052 <= _bt_
          ? 749039939
            <= _bt_
            ? 756711075 <= _bt_ ? cst_92 : cst_96
            : 737308346 <= _bt_ ? cst_94 : cst_93
          : -588596599
            <= _bt_
            ? 4100401 <= _bt_ ? cst_91 : cst_97
            : -605101559 <= _bt_ ? cst_95 : cst_90;
    }
    else{
     var _bu_ = style[2];
     if(typeof _bu_ === "number")
      var
       here =
         82908052 <= _bu_
          ? 749039939
            <= _bu_
            ? 756711075 <= _bu_ ? cst_42 : cst_46
            : 737308346 <= _bu_ ? cst_44 : cst_43
          : -588596599
            <= _bu_
            ? 4100401 <= _bu_ ? cst_41 : cst_47
            : -605101559 <= _bu_ ? cst_45 : cst_40;
     else
      var
       _bv_ = _bu_[2],
       here =
         82908052 <= _bv_
          ? 749039939
            <= _bv_
            ? 756711075 <= _bv_ ? cst_102 : cst_106
            : 737308346 <= _bv_ ? cst_104 : cst_103
          : -588596599
            <= _bv_
            ? 4100401 <= _bv_ ? cst_101 : cst_107
            : -605101559 <= _bv_ ? cst_105 : cst_100;
    }
    a:
    {
     if(typeof style === "number" && 870530776 === style){var curr = here; break a;}
     var curr = caml_call2(Stdlib_String[7], cst$17, [0, prev, [0, here, 0]]);
    }
    function finally$0(param){return set(curr_style, prev, ppf);}
    set(curr_style, curr, ppf);
    function _bw_(param){
     pp_sgr(ppf, here);
     caml_call2(pp_v, ppf, v);
     return pp_sgr(ppf, prev);
    }
    return caml_call1(caml_call1(Stdlib_Fun[4], finally$0), _bw_);
   }
   function id$0(_br_){return _br_;}
   function label(_bp_, _bq_){return styled(_a8_, string, _bp_, _bq_);}
   function field$0(opt, _bm_, l, prj, pp_v, ppf, v){
    if(opt) var sth = opt[1], label$0 = sth; else var label$0 = label;
    if(_bm_)
     var sth$0 = _bm_[1], sep = sth$0;
    else
     var sep = function(_bn_, _bo_){return any(_a__, _bn_, _bo_);};
    return caml_call8
            (pf, ppf, _a9_, label$0, l, sep, 0, pp_v, caml_call1(prj, v));
   }
   function record$0(opt, pps){
    if(opt) var sth = opt[1], sep = sth; else var sep = cut;
    var _bf_ = [0, sep];
    function _bg_(_bk_, _bl_){return concat(_bf_, pps, _bk_, _bl_);}
    var _bh_ = 0;
    return function(_bi_, _bj_){return vbox(_bh_, _bg_, _bi_, _bj_);};
   }
   function of_to_string(f, ppf, v){
    return caml_call2(string, ppf, caml_call1(f, v));
   }
   function to_to_string(pp_v, v){return caml_call3(str, _a$_, pp_v, v);}
   function prefix(pp_p, pp_v, ppf, v){
    caml_call2(pp_p, ppf, 0);
    return caml_call2(pp_v, ppf, v);
   }
   function suffix(pp_s, pp_v, ppf, v){
    caml_call2(pp_v, ppf, v);
    return caml_call2(pp_s, ppf, 0);
   }
   function styled_unit(style, fmt){
    function _ba_(_bd_, _be_){return any(fmt, _bd_, _be_);}
    return function(_bb_, _bc_){return styled(style, _ba_, _bb_, _bc_);};
   }
   var
    Fmt =
      [0,
       stdout,
       stderr,
       pf,
       pr,
       epr,
       str,
       kpf,
       kstr,
       str_like,
       with_buffer,
       failwith,
       failwith_notrace,
       invalid_arg,
       error,
       error_msg,
       flush,
       nop,
       any,
       using,
       const$0,
       fmt,
       cut,
       sp,
       sps,
       comma,
       semi,
       append,
       append,
       concat,
       iter,
       iter_bindings,
       box,
       hbox,
       vbox,
       hvbox,
       hovbox,
       parens,
       brackets,
       braces,
       quote,
       id$0,
       field$0,
       record$0,
       bool,
       int$0,
       nativeint,
       int32,
       int64,
       uint,
       unativeint,
       uint32,
       uint64,
       float$0,
       float_dfrac,
       float_dsig,
       char$0,
       string,
       buffer,
       exn,
       exn_backtrace,
       pair,
       option,
       result,
       list,
       array,
       seq,
       hashtbl,
       queue,
       stack,
       [0,
        signal,
        uchar,
        string$0,
        pair$0,
        option$0,
        result$0,
        list$0,
        array$0,
        seq$0,
        hashtbl$0,
        queue$0,
        stack$0,
        field,
        record,
        iter$0,
        iter_bindings$0],
       si_size,
       byte_size,
       bi_byte_size,
       uint64_ns_span,
       on_bytes,
       on_string,
       ascii,
       octets,
       addresses,
       hex,
       words,
       paragraphs,
       text,
       lines,
       truncated,
       text_loc,
       one_of,
       did_you_mean,
       if_utf_8,
       utf_8,
       set_utf_8,
       styled,
       style_renderer,
       set_style_renderer,
       of_to_string,
       to_to_string,
       str,
       kstr,
       str_like,
       any,
       any,
       prefix,
       suffix,
       styled_unit];
   runtime.caml_register_global(267, Fmt, "Fmt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJmbXQuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbXSwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCLE8saUM7O0ksTyw2Qix3QjtHOzZCLE8saUM7O0ksTyw2QixjO0c7O0ksTyw2Qiw0QjtHOzhCLE8sc0M7MEIsUztpQyxPLHlCOztJLE8sb0I7Rzt5QyxPLHlCOzBCLE8seUI7NEIsTyxzQzsyQixPLHNDOztJLE87Rzs7STtJO0c7O0k7STtHOztJO0k7O0ssc0M7SyxPO0k7SSxPO0c7O0k7STs7SyxzQztLLE87STtJLE87Rzs7STtJLE87Rzs7MkIsOEI7STtHOztJO0k7STtJLE87Rzs7STtJO0ksTztHOztJO0k7STtJLE87Rzs7STtJO0k7SSxPO0c7O0k7STtJO0ksTztHOztJO0k7SSxPO0c7O0k7Szs7SSw0QjtHOztJO0s7O0ksNEI7Rzs7STtLOztJLDRCO0c7O0k7STtLLE87STtJLDBCO0ksMEI7SSw0QjtHOzs4QixPLDRCOzBCLE8sNEI7MEIsTyw0Qjt5QixPLDRCOzJCLE8sNEI7MkIsTyw0QjsrQixPLDRCOzs7SSxPLHdCO0c7O0ksTyx3QjtHOzs7O0s7SyxHO00sTzs7Szs7TyxPOzs7Z0I7TSxVO087OztTO087TztROzs7Ozs7TyxJOztJO0ksTzs7Ozs7OzthOzs0QixPLDRCOztJLE8sMkI7SSxRO0ksTztHOztJLE87Rzs7STs7O0s7TSxJLGMsVyx5Qjs7SSxPO0c7OztJO0k7STtJLE87OztJO0ksWSxPOztJLE87OztJLHFDLE87O0ksTzs7O0k7SSw0QjtHOztJO0ksNEI7Rzs7STtJLDRCO0c7O0k7STtLO0c7O0k7SSw0QjtHOztJO0ksNEI7RztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0ksWTtnQixPOztJLE87Rzs7SSxPLHlCO0c7NkIsTyw0Qjs7STtJLDBCO3dCO0ksMEI7O0ksMEI7d0I7SSwwQjtJLDBCO0k7a0M7Rzs7SSxZLE87O0ksTzs7O0k7O0ssTzs7O0ksTzs7O0k7SSwwQjtJO0ksMEI7SSwwQjtJO2tDO0c7O0ksSSwyQjtJO0s7O0ksMEI7STtrQztHOztJO0k7OztvQztHOztJOztLOzs7OEI7STtLOztJLDRCO0c7O0k7STs7O29DO0c7O0ksMEI7STtHOztJLDBCO0k7Rzs7SSwwQjtJO0c7O0k7SSxPLHlDO0c7O0ksb0M7SSwwQjtJO0ksMEI7STtLOztJLDRCO0c7O0k7STttQjtLLEk7O0c7OztJO0k7O2MsTzs7Ozs7TTs7TyxzQjs7Ozs7Ozs7TTtPOzs7O00sTzs7Ozs7OztLO007OztLOztNLGdCLE87Ozs7TTs7OztPO00saUIsTztNLGdCLE87Ozs7OztNOzs7O087TSxtQixPO007O2lCO2lCOzs7Ozs7Rzs4QixpQzs7SSxjO0ksNkI7SSw0Qix3QztpQixPOzs7O0s7ZTtlOzs7OztLO2U7ZTs7Ozs7SztlO2U7Ozs7O0s7ZTtlOzs7STtjO2M7Rzs7SSxPOzthO2E7Rzs7SSxHO0s7STtLO087UyxlO0ssSSxrQjtJLHFDO0c7O0ksTztnQixlO0c7O3VCLDJDO0ksSSxpQztJO0s7TTtROztXO00sUztLO00sTztLO00sTzs7Szs7STtLO007TTtNO007UTs7Vzs7TSxPO0s7TSxPO0s7O1E7VSw0QjtLO00sTzs7Szs7STtLO0s7SztLO087O1U7O0ssTztJO0ssTztpQztlO2tDO2U7STs7TztTLDRCO0k7SyxPOztJO0c7OztJLEksOEI7SSxHO0ssTztJO0s7SztLO087O1U7STtLLE87STs7TztTLHlCO0k7SyxPOztJO0c7O0ksa0IsNkM7SSxzQixPO0k7SztNLE87OztLOztJO0s7TSxPOzs7Szs7STtLO00sTzs7O0s7O0k7SztNLE87Ozs7Szs7Ozs7Ozs7OztJO0s7TSxPOzs7O0s7Ozs7Ozs7Ozs7STtLO00sTzs7OztLOzs7SSxJLG1DO0ksRztLLE87STtLO0s7SztPOztVO0k7YywwQjtjO0c7O0k7OztJLGtDOzs7O00saUI7TTs7Ozs7Ozs7STtLO0c7O0k7OzJCO0c7RyxxQzs7STs7MkI7RztHLG9DO0c7OzZDOzRDOzJDO3lDO3dDO3VDO0ksc0M7OztJO0k7OztLO007bUM7Ozs0QixPO0ssTzs7STs7Ozs7O0k7STtJO0s7bUI7STs7O0s7SyxPOztJOzs7OztNO007TTs7Ozs7Ozs7O0k7STs7O0s7TSw0Qjs7NkIsMEM7TSxROzs7O2dDOztvQzs7OztLO0s7Ozs7SztzQixPLDZCO0ssVztJO0ksSSxrRDtJOzs7Ozs7Ozs7O0k7SSxjLFU7SSwwQjtJO0ksMEI7STtJLDBCO0ksSSxvQjtJLDBCO0k7SSwwQjtJLDBCO0ksMEI7SSxJLGU7STtLO0c7cUIsd0I7O0ksSSx5QjtJO0c7O0k7OztLOztJO0c7eUIsdUI7O0k7STtHOztJO0k7dUI7SyxHLGdCLDhCOzs7Rzs7SSxtQjtrQzs7Rzs7STs7SztzQjs7STtLOztNO00sTzs7SztLO0s7dUI7Szs7O0c7O0k7O0s7c0I7O0k7Szs7TTtNLE87O0s7SztLO3VCO0ssVTtNO3dCO00sVTtPO3lCO087Tzs7O1c7O1U7O0c7O0k7STtLOztNO00sTzs7SztLO0ssWTs7TTs7O08sTTtNOztLLEk7O0c7O0k7STtLOztNO00sTzs7SztLO0s7SyxJOztHOztJO0ssTztJLHdCOzs7O00sVztNO007Ozs7O0ksTztHOzs7Ozs7Ozs7K0IsTztJLE87OztJO0ksUyxPOztlLE87Ozs7Ozs7O1csTTs7MkIsTzs7VTs7OztLLE87OztJLE87Rzs7O0k7OztvQztJO0k7SyxPOztJLE87Ozs7Ozs7Ozs7O2tDOzs7RywwRDsyQixTLDRCO0c7STtJOztJLFc7SSxPO0c7O0ksbUI7aUQ7OztJOzs7OztNO0s7TSxPO007TTs7O1M7VTtXLHFCLE87VyxPOzt3QyxPO1U7Ozs7O1c7VyxPO2lCO1U7O1M7O007Szs7Ozs7RzswQixZLDRCO3VCLDZCO0c7SSwyQzs7SyxNO0k7RztHO3VCLG9DOzhCLCtCO3lCLDBDO0c7SSwyQzs7SyxNO0k7RztHOztJO0c7O0k7Rzs7SSxVO0ksVztJLHNCLE87STtJO0c7O0k7SyxNO0s7STtLO0ssUTtLO0s7STtJLE87Rzs7STtJLE87Rzs7STtJO0ksTztHO3VCO0cscUM7O0kscUMsTztJOzs7Uzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCOzs4QixrQztJOztLO0s7O0k7SSxPLFc7Rzt1QjtHLDJCOztJO0k7OztvQztJLE87c0Q7Rzs7STtJO0ksMEI7STtJLDRCO0c7O0ksTyx3QjtHO2tDLE8sK0I7O0k7SSxPO0c7O0k7SSxPO0c7O0ksMEI7SSw0QjtHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
