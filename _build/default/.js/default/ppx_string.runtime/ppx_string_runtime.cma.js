// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_string_runtime__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_string_runtime = [0],
    Ppx_string_runtime$0 = [0, Ppx_string_runtime];
   runtime.caml_register_global
    (0, Ppx_string_runtime$0, "Ppx_string_runtime__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_string_runtime__Ppx_string_runtime_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_string_runtime_Ppx_string_ = [0];
   runtime.caml_register_global
    (0,
     Ppx_string_runtime_Ppx_string_,
     "Ppx_string_runtime__Ppx_string_runtime_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_string_runtime
//# unitInfo: Requires: Stdlib, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$0 = "";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib = global_data.Stdlib;
   function of_string(t){return t;}
   function convert(t){return t;}
   function concat(list){
    return caml_call2(Stdlib_StringLabels[7], cst, list);
   }
   function pad(t, len){
    var n = runtime.caml_ml_string_length(t);
    if(len <= n) return t;
    var _a_ = caml_call2(Stdlib_StringLabels[1], len - n | 0, 32);
    return caml_call2(Stdlib[28], _a_, t);
   }
   var
    For_string = [0, empty, of_string, convert, concat, pad],
    Ppx_string_runtime = [0, For_string];
   runtime.caml_register_global(4, Ppx_string_runtime, "Ppx_string_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfc3RyaW5nX3J1bnRpbWUuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVtcHR5Iiwib2Zfc3RyaW5nIiwidCIsImNvbnZlcnQiLCJjb25jYXQiLCJsaXN0IiwicGFkIiwibGVuIiwibiJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL3BweF9zdHJpbmcvcnVudGltZS9wcHhfc3RyaW5nX3J1bnRpbWVfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL3BweF9zdHJpbmcvcnVudGltZS9wcHhfc3RyaW5nX3J1bnRpbWUubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7R0FLOEI7O0lBQUE7Ozs7O0U7Ozs7Ozs7Ozs7Ozs7OztFOzs7Ozs7Ozs7Rzs7Ozs7Ozs7SUNDeEJBOzs7WUFDQUMsVUFBVUMsR0FBSSxPQUFKQSxFQUFLO1lBQ2ZDLFFBQVFELEdBQUksT0FBSkEsRUFBSztZQUNiRSxPQUFPQztJQUFPLE9BQUEsd0NBQVBBO0dBQWlDO1lBRXhDQyxJQUFJSixHQUFHSztJQUNULElBQUlDLGtDQURFTjtPQUFHSyxPQUNMQyxHQUNhLE9BRlhOO0lBRWtCLFVBQUEsbUNBRmZLLE1BQ0xDO0lBQ29CLE9BQUEsNEJBRmxCTjtHQUUrQztHQVJyQztJQUFBLGlCQUNkRixPQUNBQyxXQUNBRSxTQUNBQyxRQUVBRTs7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGJ5IGR1bmUgKilcblxuKCoqIEBjYW5vbmljYWwgUHB4X3N0cmluZ19ydW50aW1lLlBweF9zdHJpbmdfcnVudGltZV9pbnRmICopXG5tb2R1bGUgUHB4X3N0cmluZ19ydW50aW1lX2ludGYgPSBQcHhfc3RyaW5nX3J1bnRpbWVfX1BweF9zdHJpbmdfcnVudGltZV9pbnRmXG5cbm1vZHVsZSBQcHhfc3RyaW5nX3J1bnRpbWVfXyA9IHN0cnVjdCBlbmRcbltAQGRlcHJlY2F0ZWQgXCJ0aGlzIG1vZHVsZSBpcyBzaGFkb3dlZFwiXVxuIiwib3BlbiBTdGRsaWJcbm9wZW4gU3RkTGFiZWxzXG5cbm1vZHVsZSB0eXBlIFMgPSBQcHhfc3RyaW5nX3J1bnRpbWVfaW50Zi5TXG5cbm1vZHVsZSBGb3Jfc3RyaW5nID0gc3RydWN0XG4gIGxldCBlbXB0eSA9IFwiXCJcbiAgbGV0IG9mX3N0cmluZyB0ID0gdFxuICBsZXQgY29udmVydCB0ID0gdFxuICBsZXQgY29uY2F0IGxpc3QgPSBTdHJpbmcuY29uY2F0IH5zZXA6XCJcIiBsaXN0XG5cbiAgbGV0IHBhZCB0IH5sZW4gPVxuICAgIGxldCBuID0gU3RyaW5nLmxlbmd0aCB0IGluXG4gICAgaWYgbiA+PSBsZW4gdGhlbiB0IGVsc2UgU3RyaW5nLm1ha2UgKGxlbiAtIG4pICcgJyBeIHRcbiAgOztcblxuICBleHRlcm5hbCBpZGVudGl0eSA6IHN0cmluZyAtPiBzdHJpbmcgPSBcIiVpZGVudGl0eVwiXG5lbmRcbiJdfQ==
