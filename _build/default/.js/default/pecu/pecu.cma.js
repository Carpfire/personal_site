// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Pecu
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Expected_Await_encode = "Expected `Await encode",
    cst_lib_pecu_ml = "lib/pecu.ml",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib = global_data.Stdlib,
    Stdlib_Format = global_data.Stdlib__Format,
    _g_ = [0, cst_lib_pecu_ml, 662, 9],
    _f_ = [0, cst_lib_pecu_ml, 531, 11],
    _e_ = [0, 748194550, 32],
    _d_ = [0, cst_lib_pecu_ml, 323, 13],
    _c_ = [0, cst_lib_pecu_ml, 26, 11],
    _b_ =
      [0,
       [11,
        "Invalid bounds (off: ",
        [4, 0, 0, 0, [11, ", len: ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "Invalid bounds (off: %d, len: %d)"],
    _a_ = [0, [11, cst_Expected_Await_encode, 0], cst_Expected_Await_encode];
   function invalid_arg(fmt){
    function _ad_(s){return caml_call1(Stdlib[1], s);}
    return caml_call2(Stdlib_Format[147], _ad_, fmt);
   }
   function invalid_encode(param){return invalid_arg(_a_);}
   function invalid_bounds(off, len){
    return caml_call2(invalid_arg(_b_), off, len);
   }
   function malformed(source, off, pos, len){
    return [0,
            659980059,
            caml_call3(Stdlib_Bytes[8], source, off + pos | 0, len)];
   }
   function unsafe_byte(source, off, pos){
    return runtime.caml_bytes_unsafe_get(source, off + pos | 0);
   }
   function unsafe_set_chr(source, off, chr){
    runtime.caml_bytes_unsafe_set(source, off, chr);
    return;
   }
   function r_chr(chr){return [0, 3355149, chr];}
   function i_rem(decoder){return (decoder[5] - decoder[4] | 0) + 1 | 0;}
   function end_of_input(decoder){
    decoder[2] = Stdlib_Bytes[3];
    decoder[3] = 0;
    decoder[4] = 0;
    decoder[5] = Stdlib[20];
    return 0;
   }
   function src(decoder, source, off, len){
    if
     (0 <= off && 0 <= len && caml_ml_bytes_length(source) >= (off + len | 0))
     return 0 === len
             ? end_of_input(decoder)
             : (decoder
                [2]
               = source,
               decoder[3] = off,
               decoder[4] = 0,
               decoder[5] = len - 1 | 0,
               0);
    return invalid_bounds(off, len);
   }
   function refill(k, decoder){
    var match = decoder[1];
    if(typeof match === "number"){decoder[15] = k; return 1006505782;}
    if(438511779 <= match[1]){
     var
      ic = match[2],
      len =
        caml_call4
         (Stdlib[84], ic, decoder[2], 0, caml_ml_bytes_length(decoder[2]));
     src(decoder, decoder[2], 0, len);
     return caml_call1(k, decoder);
    }
    end_of_input(decoder);
    return caml_call1(k, decoder);
   }
   function reset(decoder){decoder[13] = 0; return;}
   function ret(k, v, byte_count, decoder){
    decoder[15] = k;
    decoder[12] = decoder[12] + byte_count | 0;
    decoder[13] = decoder[13] + byte_count | 0;
    if(78 < decoder[13]) decoder[11] = 1;
    return caml_call2(decoder[14], decoder, v);
   }
   function malformed_line(source, off, len, decoder){
    caml_call2(Stdlib_Buffer[21], decoder[6], decoder[7]);
    caml_call4(Stdlib_Buffer[19], decoder[6], source, off, len);
    var line = caml_call1(Stdlib_Buffer[2], decoder[6]);
    caml_call1(Stdlib_Buffer[8], decoder[7]);
    caml_call1(Stdlib_Buffer[8], decoder[6]);
    return [0, 659980059, line];
   }
   function t_need(decoder, need){decoder[9] = 0; decoder[10] = need; return;}
   function t_fill(k, decoder){
    function blit(decoder, len){
     caml_blit_bytes
      (decoder[2], decoder[3] + decoder[4] | 0, decoder[8], decoder[9], len);
     decoder[4] = decoder[4] + len | 0;
     decoder[9] = decoder[9] + len | 0;
     return;
    }
    var rem = i_rem(decoder);
    if(0 > rem) return caml_call1(k, decoder);
    var need = decoder[10] - decoder[9] | 0;
    return rem < need
            ? (blit
               (decoder, rem),
              refill(function(_ac_){return t_fill(k, _ac_);}, decoder))
            : (blit(decoder, need), caml_call1(k, decoder));
   }
   function t_decode_quoted_printable(decoder){
    if(decoder[9] < decoder[10]){
     var _$_ = decoder[9];
     return ret
             (decode_quoted_printable,
              malformed_line(decoder[8], 0, decoder[9], decoder),
              _$_,
              decoder);
    }
    var
     len = decoder[9],
     source = decoder[8],
     _aa_ = decoder[9],
     a = unsafe_byte(source, 0, 1),
     b = unsafe_byte(source, 0, 2),
     off = 0;
    function of_hex(chr){
     if(58 <= chr){
      if(5 >= chr - 65 >>> 0) return (chr - 65 | 0) + 10 | 0;
     }
     else if(48 <= chr) return chr - 48 | 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    }
    a:
    {
     b:
     if(61 === unsafe_byte(source, off, 0)){
      var switcher = a - 48 | 0;
      if(22 < switcher >>> 0){
       if(-35 === switcher && 10 === b){var _ab_ = -207855799; break a;}
      }
      else if(6 < switcher - 10 >>> 0){
       if(58 <= b){if(5 < b - 65 >>> 0) break b;} else if(48 > b) break b;
       var
        ___ = of_hex(b),
        _ab_ = [0, 914392213, (of_hex(a) * 16 | 0) + ___ | 0];
       break a;
      }
     }
     var _ab_ = malformed(source, off, 0, len);
    }
    return ret(decode_quoted_printable, _ab_, _aa_, decoder);
   }
   function t_decode_line_break(decoder){
    if(decoder[9] < decoder[10]){
     var _X_ = decoder[9];
     return ret
             (decode_quoted_printable,
              malformed_line(decoder[8], 0, decoder[9], decoder),
              _X_,
              decoder);
    }
    var
     len = decoder[9],
     source = decoder[8],
     _Y_ = decoder[9],
     str = caml_call3(Stdlib_Bytes[8], source, 0, len),
     off = 0,
     _Z_ =
       runtime.caml_string_notequal(str, "\r\n")
        ? malformed(source, off, 0, len)
        : -879233260;
    return ret(decode_quoted_printable, _Z_, _Y_, decoder);
   }
   function decode_quoted_printable(decoder){
    var rem = i_rem(decoder);
    if(0 >= rem){
     if(0 <= rem) return refill(decode_quoted_printable, decoder);
     var _V_ = 0, _W_ = 3455931;
     return ret(function(decoder){return 3455931;}, _W_, _V_, decoder);
    }
    var wsp = unsafe_byte(decoder[2], decoder[3], decoder[4]);
    a:
    {
     if(32 <= wsp){
      var switcher = wsp - 33 | 0;
      if(93 >= switcher >>> 0)
       return 28 === switcher
               ? (t_need
                  (decoder, 3),
                 t_fill(t_decode_quoted_printable, decoder))
               : (caml_call2
                  (Stdlib_Buffer[21], decoder[6], decoder[7]),
                 caml_call1(Stdlib_Buffer[8], decoder[7]),
                 decoder[4] = decoder[4] + 1 | 0,
                 ret(decode_quoted_printable, r_chr(wsp), 1, decoder));
      if(0 <= switcher) break a;
     }
     else if(9 !== wsp){
      if(13 !== wsp) break a;
      t_need(decoder, 2);
      return t_fill(t_decode_line_break, decoder);
     }
     decoder[4] = decoder[4] + 1 | 0;
     return ret(decode_quoted_printable, [0, 4352180, wsp], 1, decoder);
    }
    var j = decoder[4];
    decoder[4] = decoder[4] + 1 | 0;
    return ret
            (decode_quoted_printable,
             malformed(decoder[2], decoder[3], j, 1),
             1,
             decoder);
   }
   function pp_quoted_printable(decoder, v){
    if(typeof v === "number"){
     if(-207855799 === v){
      caml_call2(Stdlib_Buffer[21], decoder[6], decoder[7]);
      var data = caml_call1(Stdlib_Buffer[2], decoder[6]);
      caml_call1(Stdlib_Buffer[8], decoder[7]);
      caml_call1(Stdlib_Buffer[8], decoder[6]);
      reset(decoder);
      return [0, 758940234, data];
     }
     if(3455931 <= v){
      caml_call2(Stdlib_Buffer[21], decoder[6], decoder[7]);
      var data$0 = caml_call1(Stdlib_Buffer[2], decoder[6]);
      caml_call1(Stdlib_Buffer[8], decoder[7]);
      caml_call1(Stdlib_Buffer[8], decoder[6]);
      return [0, 758940234, data$0];
     }
     var line = caml_call1(Stdlib_Buffer[2], decoder[6]);
     caml_call1(Stdlib_Buffer[8], decoder[7]);
     caml_call1(Stdlib_Buffer[8], decoder[6]);
     reset(decoder);
     return [0, 848053268, line];
    }
    var _U_ = v[1];
    if(659980059 <= _U_){
     if(914392213 > _U_) return v;
     var byte$0 = v[2];
     caml_call2(Stdlib_Buffer[21], decoder[6], decoder[7]);
     caml_call1(Stdlib_Buffer[8], decoder[7]);
     caml_call2(Stdlib_Buffer[12], decoder[6], byte$0);
     return caml_call1(decoder[15], decoder);
    }
    if(4352180 <= _U_){
     var wsp = v[2];
     caml_call2(Stdlib_Buffer[12], decoder[7], wsp);
     return caml_call1(decoder[15], decoder);
    }
    var chr = v[2];
    caml_call2(Stdlib_Buffer[21], decoder[6], decoder[7]);
    caml_call1(Stdlib_Buffer[8], decoder[7]);
    caml_call2(Stdlib_Buffer[12], decoder[6], chr);
    return caml_call1(decoder[15], decoder);
   }
   function decoder(src){
    if(typeof src === "number")
     var i_len = 0, i_pos = 1, i_off = 0, i = Stdlib_Bytes[3];
    else if(438511779 <= src[1])
     var i_len = 0, i_pos = 1, i_off = 0, i = caml_create_bytes(65536);
    else
     var
      s = src[2],
      i_len$0 = caml_ml_string_length(s) - 1 | 0,
      i$0 = caml_call1(Stdlib_Bytes[45], s),
      i_len = i_len$0,
      i_pos = 0,
      i_off = 0,
      i = i$0;
    var _T_ = caml_call1(Stdlib_Buffer[1], 80);
    return [0,
            src,
            i,
            i_off,
            i_pos,
            i_len,
            caml_call1(Stdlib_Buffer[1], 80),
            _T_,
            caml_create_bytes(3),
            0,
            0,
            0,
            0,
            0,
            pp_quoted_printable,
            decode_quoted_printable];
   }
   function decode(decoder){return caml_call1(decoder[15], decoder);}
   function decoder_byte_count(decoder){return decoder[12];}
   function decoder_src(decoder){return decoder[1];}
   function decoder_dangerous(decoder){return decoder[11];}
   var r_wsp = 4352180;
   function i_rem$0(decoder){return (decoder[5] - decoder[4] | 0) + 1 | 0;}
   function end_of_input$0(decoder){
    decoder[2] = Stdlib_Bytes[3];
    decoder[3] = 0;
    decoder[4] = 0;
    decoder[5] = Stdlib[20];
    return 0;
   }
   function src$0(decoder, source, off, len){
    if
     (0 <= off && 0 <= len && caml_ml_bytes_length(source) >= (off + len | 0))
     return 0 === len
             ? end_of_input$0(decoder)
             : (decoder
                [2]
               = source,
               decoder[3] = off,
               decoder[4] = 0,
               decoder[5] = len - 1 | 0,
               0);
    return invalid_bounds(off, len);
   }
   function refill$0(k, decoder){
    var match = decoder[1];
    if(typeof match === "number"){decoder[11] = k; return 1006505782;}
    if(438511779 <= match[1]){
     var
      ic = match[2],
      len =
        caml_call4
         (Stdlib[84], ic, decoder[2], 0, caml_ml_bytes_length(decoder[2]));
     src$0(decoder, decoder[2], 0, len);
     return caml_call1(k, decoder);
    }
    end_of_input$0(decoder);
    return caml_call1(k, decoder);
   }
   function ret$0(k, v, byte_count, decoder){
    decoder[11] = k;
    decoder[9] = decoder[9] + byte_count | 0;
    return caml_call2(decoder[10], decoder, v);
   }
   function t_fill$0(k, decoder){
    function blit(decoder, len){
     caml_blit_bytes
      (decoder[2], decoder[3] + decoder[4] | 0, decoder[6], decoder[7], len);
     decoder[4] = decoder[4] + len | 0;
     decoder[7] = decoder[7] + len | 0;
     return;
    }
    var rem = i_rem$0(decoder);
    if(0 > rem) return caml_call1(k, decoder);
    var need = decoder[8] - decoder[7] | 0;
    return rem < need
            ? (blit
               (decoder, rem),
              refill$0(function(_S_){return t_fill$0(k, _S_);}, decoder))
            : (blit(decoder, need), caml_call1(k, decoder));
   }
   function t_decode_inline_quoted_printab(decoder){
    if(decoder[7] < decoder[8]){
     var _P_ = decoder[7];
     return ret$0
             (decode_inline_quoted_printable,
              malformed(decoder[6], 0, 0, decoder[7]),
              _P_,
              decoder);
    }
    var
     len = decoder[7],
     source = decoder[6],
     _Q_ = decoder[7],
     a = unsafe_byte(source, 0, 1),
     b = unsafe_byte(source, 0, 2),
     off = 0;
    function of_hex(chr){
     if(65 <= chr){
      if(97 <= chr){
       if(103 > chr) return (chr - 97 | 0) + 10 | 0;
      }
      else if(71 > chr) return (chr - 65 | 0) + 10 | 0;
     }
     else if(9 >= chr - 48 >>> 0) return chr - 48 | 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    }
    a:
    {
     b:
     if(61 === unsafe_byte(source, off, 0)){
      var _M_ = a - 48 | 0;
      if(22 < _M_ >>> 0){
       if(5 < _M_ - 49 >>> 0) break b;
      }
      else if(6 >= _M_ - 10 >>> 0) break b;
      var _N_ = b - 48 | 0;
      if(22 < _N_ >>> 0){
       if(5 < _N_ - 49 >>> 0) break b;
      }
      else if(6 >= _N_ - 10 >>> 0) break b;
      var
       _O_ = of_hex(b),
       _R_ = [0, 914392213, (of_hex(a) * 16 | 0) + _O_ | 0];
      break a;
     }
     var _R_ = malformed(source, off, 0, len);
    }
    return ret$0(decode_inline_quoted_printable, _R_, _Q_, decoder);
   }
   function decode_inline_quoted_printable(decoder){
    var rem = i_rem$0(decoder);
    if(0 >= rem){
     if(0 <= rem) return refill$0(decode_inline_quoted_printable, decoder);
     var _K_ = 0, _L_ = 3455931;
     return ret$0(function(decoder){return 3455931;}, _L_, _K_, decoder);
    }
    var chr = unsafe_byte(decoder[2], decoder[3], decoder[4]);
    a:
    {
     if(62 <= chr){
      if(95 === chr){
       decoder[4] = decoder[4] + 1 | 0;
       return ret$0(decode_inline_quoted_printable, r_wsp, 1, decoder);
      }
      if(127 > chr) break a;
     }
     else if(33 <= chr){
      if(61 > chr) break a;
      decoder[7] = 0;
      decoder[8] = 3;
      return t_fill$0(t_decode_inline_quoted_printab, decoder);
     }
     var j = decoder[4];
     decoder[4] = decoder[4] + 1 | 0;
     return ret$0
             (decode_inline_quoted_printable,
              malformed(decoder[2], decoder[3], j, 1),
              1,
              decoder);
    }
    decoder[4] = decoder[4] + 1 | 0;
    return ret$0(decode_inline_quoted_printable, r_chr(chr), 1, decoder);
   }
   function pp_inline_quoted_printable(decoder, v){
    if(typeof v === "number") return 4352180 <= v ? _e_ : 3455931;
    var _J_ = v[1];
    if(659980059 === _J_) return v;
    if(914392213 <= _J_){var byte$0 = v[2]; return [0, 748194550, byte$0];}
    var chr = v[2];
    return [0, 748194550, chr];
   }
   function decoder$0(src){
    if(typeof src === "number")
     var i_len = 0, i_pos = 1, i_off = 0, i = Stdlib_Bytes[3];
    else if(438511779 <= src[1])
     var i_len = 0, i_pos = 1, i_off = 0, i = caml_create_bytes(65536);
    else
     var
      s = src[2],
      i_len$0 = caml_ml_string_length(s) - 1 | 0,
      i$0 = caml_call1(Stdlib_Bytes[45], s),
      i_len = i_len$0,
      i_pos = 0,
      i_off = 0,
      i = i$0;
    return [0,
            src,
            i,
            i_off,
            i_pos,
            i_len,
            caml_create_bytes(3),
            0,
            0,
            0,
            pp_inline_quoted_printable,
            decode_inline_quoted_printable];
   }
   function decode$0(decoder){return caml_call1(decoder[11], decoder);}
   function decoder_byte_count$0(decoder){return decoder[9];}
   function decoder_src$0(decoder){return decoder[1];}
   function o_rem(encoder){return (encoder[5] - encoder[4] | 0) + 1 | 0;}
   function dst(encoder, source, off, len){
    var _G_ = off < 0 ? 1 : 0;
    if(_G_)
     var _H_ = _G_;
    else
     var
      _I_ = len < 0 ? 1 : 0,
      _H_ = _I_ || (caml_ml_bytes_length(source) < (off + len | 0) ? 1 : 0);
    if(_H_) invalid_bounds(off, len);
    encoder[2] = source;
    encoder[3] = off;
    encoder[4] = 0;
    encoder[5] = len - 1 | 0;
    return 0;
   }
   function flush(k, encoder){
    var match = encoder[1];
    if(typeof match === "number"){
     encoder[9] =
      function(encoder, param){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_call1(k, encoder);
       return invalid_encode(0);
      };
     return 939392865;
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     caml_call4(Stdlib[68], oc, encoder[2], encoder[3], encoder[4]);
     encoder[4] = 0;
     return caml_call1(k, encoder);
    }
    var b = match[2], o = caml_call1(Stdlib_Bytes[44], encoder[2]);
    caml_call4(Stdlib_Buffer[18], b, o, encoder[3], encoder[4]);
    encoder[4] = 0;
    return caml_call1(k, encoder);
   }
   function t_flush(k, encoder){
    function blit(encoder, len){
     caml_blit_bytes(encoder[6], encoder[7], encoder[2], encoder[4], len);
     encoder[4] = encoder[4] + len | 0;
     encoder[7] = encoder[7] + len | 0;
     return;
    }
    var rem = o_rem(encoder), len = (encoder[8] - encoder[7] | 0) + 1 | 0;
    return rem < len
            ? (blit
               (encoder, rem),
              flush(function(_F_){return t_flush(k, _F_);}, encoder))
            : (blit(encoder, len), caml_call1(k, encoder));
   }
   function to_hex(code){
    if(10 > code) return caml_call1(Stdlib_Char[1], 48 + code | 0);
    if(16 <= code)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    return caml_call1(Stdlib_Char[1], (65 + code | 0) - 10 | 0);
   }
   function encode_quoted_printable(encoder, v){
    function k(encoder){encoder[9] = encode_quoted_printable; return 17724;}
    if(typeof v === "number")
     return 1006505782 <= v ? k(encoder) : flush(k, encoder);
    var chr = v[2], rem = o_rem(encoder);
    if(1 > rem)
     return flush
             (function(encoder){return encode_quoted_printable(encoder, v);},
              encoder);
    var switcher = chr - 33 | 0;
    if(93 < switcher >>> 0){
     if(-1 === switcher){
      unsafe_set_chr(encoder[2], encoder[3] + encoder[4] | 0, 95);
      encoder[4] = encoder[4] + 1 | 0;
      return k(encoder);
     }
    }
    else if(28 !== switcher){
     unsafe_set_chr(encoder[2], encoder[3] + encoder[4] | 0, chr);
     encoder[4] = encoder[4] + 1 | 0;
     return k(encoder);
    }
    var hi = to_hex(chr / 16 | 0), lo = to_hex(chr % 16 | 0);
    if(3 <= rem){
     var j = encoder[4];
     encoder[4] = encoder[4] + 3 | 0;
     var
      j$0 = encoder[3] + j | 0,
      s = encoder[2],
      k$0 = k,
      j$1 = j$0,
      s$0 = s;
    }
    else{
     encoder[7] = 0;
     encoder[8] = 3;
     var
      _D_ = function(_E_){return t_flush(k, _E_);},
      k$0 = _D_,
      j$1 = 0,
      s$0 = encoder[6];
    }
    unsafe_set_chr(s$0, j$1, 61);
    unsafe_set_chr(s$0, j$1 + 1 | 0, hi);
    unsafe_set_chr(s$0, j$1 + 2 | 0, lo);
    return k$0(encoder);
   }
   function encoder(dst){
    if(typeof dst === "number")
     var o_len = 0, o_pos = 0, o_off = 1, o = Stdlib_Bytes[3];
    else
     var
      o$0 = caml_create_bytes(65536),
      o_len = 65535,
      o_pos = 0,
      o_off = 0,
      o = o$0;
    return [0,
            dst,
            o,
            o_off,
            o_pos,
            o_len,
            caml_create_bytes(3),
            1,
            0,
            encode_quoted_printable];
   }
   function encode(encoder, v){return caml_call2(encoder[9], encoder, v);}
   function encoder_dst(encoder){return encoder[1];}
   function o_rem$0(encoder){return (encoder[5] - encoder[4] | 0) + 1 | 0;}
   function dst$0(encoder, source, off, len){
    var _A_ = off < 0 ? 1 : 0;
    if(_A_)
     var _B_ = _A_;
    else
     var
      _C_ = len < 0 ? 1 : 0,
      _B_ = _C_ || (caml_ml_bytes_length(source) < (off + len | 0) ? 1 : 0);
    if(_B_) invalid_bounds(off, len);
    encoder[2] = source;
    encoder[3] = off;
    encoder[4] = 0;
    encoder[5] = len - 1 | 0;
    return 0;
   }
   function flush$0(k, encoder){
    var match = encoder[1];
    if(typeof match === "number"){
     encoder[10] =
      function(encoder, param){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_call1(k, encoder);
       return invalid_encode(0);
      };
     return 939392865;
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     caml_call4(Stdlib[68], oc, encoder[2], encoder[3], encoder[4]);
     encoder[4] = 0;
     return caml_call1(k, encoder);
    }
    var b = match[2], o = caml_call1(Stdlib_Bytes[44], encoder[2]);
    caml_call4(Stdlib_Buffer[18], b, o, encoder[3], encoder[4]);
    encoder[4] = 0;
    return caml_call1(k, encoder);
   }
   function t_range(encoder, len){encoder[7] = 0; encoder[8] = len; return;}
   function t_flush$0(k, encoder){
    function blit(encoder, len){
     caml_blit_bytes(encoder[6], encoder[7], encoder[2], encoder[4], len);
     encoder[4] = encoder[4] + len | 0;
     encoder[7] = encoder[7] + len | 0;
     return;
    }
    var rem = o_rem$0(encoder), len = (encoder[8] - encoder[7] | 0) + 1 | 0;
    return rem < len
            ? (blit
               (encoder, rem),
              flush$0(function(_z_){return t_flush$0(k, _z_);}, encoder))
            : (blit(encoder, len), caml_call1(k, encoder));
   }
   function to_hex$0(code){
    if(10 > code) return caml_call1(Stdlib_Char[1], 48 + code | 0);
    if(16 <= code)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    return caml_call1(Stdlib_Char[1], (65 + code | 0) - 10 | 0);
   }
   function encode_quoted_printable$0(encoder, v){
    function k(col_count, encoder){
     encoder[9] = encoder[9] + col_count | 0;
     encoder[10] = encode_quoted_printable$0;
     return 17724;
    }
    if(typeof v === "number"){
     if(3455931 === v){
      var _j_ = 0;
      return flush$0(function(_y_){return k(_j_, _y_);}, encoder);
     }
     if(1006505782 <= v) return k(0, encoder);
     var rem = o_rem$0(encoder);
     if(2 <= rem){
      var j = encoder[4];
      encoder[4] = encoder[4] + 2 | 0;
      var
       _k_ = 2,
       k$0 = function(_v_){return k(_k_, _v_);},
       j$0 = encoder[3] + j | 0,
       s = encoder[2],
       k$1 = k$0,
       j$1 = j$0,
       s$0 = s;
     }
     else{
      t_range(encoder, 2);
      var
       _l_ = 2,
       _m_ = function(_x_){return k(_l_, _x_);},
       _n_ = function(_w_){return t_flush$0(_m_, _w_);},
       k$1 = _n_,
       j$1 = 0,
       s$0 = encoder[6];
     }
     unsafe_set_chr(s$0, j$1, 13);
     unsafe_set_chr(s$0, j$1 + 1 | 0, 10);
     encoder[9] = 0;
     return flush$0(k$1, encoder);
    }
    var unsafe_chr = v[2], rem$0 = o_rem$0(encoder);
    if(1 > rem$0)
     return flush$0
             (function(encoder){return encode_quoted_printable$0(encoder, v);},
              encoder);
    if(75 === encoder[9])
     return encode_soft_line_break
             (function(encoder){return encode_quoted_printable$0(encoder, v);},
              encoder);
    var switcher = unsafe_chr - 33 | 0;
    if(93 >= switcher >>> 0 && 28 !== switcher){
     unsafe_set_chr(encoder[2], encoder[3] + encoder[4] | 0, unsafe_chr);
     encoder[4] = encoder[4] + 1 | 0;
     return k(1, encoder);
    }
    if(73 <= encoder[9])
     return encode_soft_line_break
             (function(encoder){return encode_quoted_printable$0(encoder, v);},
              encoder);
    var
     hi = to_hex$0(unsafe_chr / 16 | 0),
     lo = to_hex$0(unsafe_chr % 16 | 0);
    if(3 <= rem$0){
     var j$2 = encoder[4];
     encoder[4] = encoder[4] + 3 | 0;
     var
      _o_ = 3,
      k$2 = function(_s_){return k(_o_, _s_);},
      j$3 = encoder[3] + j$2 | 0,
      s$1 = encoder[2],
      k$3 = k$2,
      j$4 = j$3,
      s$2 = s$1;
    }
    else{
     t_range(encoder, 3);
     var
      _p_ = 3,
      _q_ = function(_u_){return k(_p_, _u_);},
      _r_ = function(_t_){return t_flush$0(_q_, _t_);},
      k$3 = _r_,
      j$4 = 0,
      s$2 = encoder[6];
    }
    unsafe_set_chr(s$2, j$4, 61);
    unsafe_set_chr(s$2, j$4 + 1 | 0, hi);
    unsafe_set_chr(s$2, j$4 + 2 | 0, lo);
    return k$3(encoder);
   }
   function encode_soft_line_break(k, encoder){
    var rem = o_rem$0(encoder);
    if(3 <= rem){
     var j = encoder[4];
     encoder[4] = encoder[4] + 3 | 0;
     var
      j$0 = encoder[3] + j | 0,
      s = encoder[2],
      k$0 = k,
      j$1 = j$0,
      s$0 = s;
    }
    else{
     t_range(encoder, 3);
     var
      _h_ = function(_i_){return t_flush$0(k, _i_);},
      k$0 = _h_,
      j$1 = 0,
      s$0 = encoder[6];
    }
    unsafe_set_chr(s$0, j$1, 61);
    unsafe_set_chr(s$0, j$1 + 1 | 0, 13);
    unsafe_set_chr(s$0, j$1 + 2 | 0, 10);
    encoder[9] = 0;
    return flush$0(k$0, encoder);
   }
   function encoder$0(dst){
    if(typeof dst === "number")
     var o_len = 0, o_pos = 0, o_off = 1, o = Stdlib_Bytes[3];
    else
     var
      o$0 = caml_create_bytes(65536),
      o_len = 65535,
      o_pos = 0,
      o_off = 0,
      o = o$0;
    return [0,
            dst,
            o,
            o_off,
            o_pos,
            o_len,
            caml_create_bytes(3),
            1,
            0,
            0,
            encode_quoted_printable$0];
   }
   function encode$0(encoder, v){return caml_call2(encoder[10], encoder, v);}
   function encoder_dst$0(encoder){return encoder[1];}
   var
    Pecu =
      [0,
       src,
       decoder,
       decode,
       decoder_byte_count,
       decoder_src,
       decoder_dangerous,
       encoder$0,
       encode$0,
       encoder_dst$0,
       dst$0,
       o_rem$0,
       [0,
        src$0,
        decoder$0,
        decode$0,
        decoder_byte_count$0,
        decoder_src$0,
        encoder,
        encode,
        encoder_dst,
        dst,
        o_rem]];
   runtime.caml_register_global(14, Pecu, "Pecu");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
