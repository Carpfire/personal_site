// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Nano_mutex__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Nano_mutex = [0],
    Nano_mutex$0 = [0, Nano_mutex];
   runtime.caml_register_global(0, Nano_mutex$0, "Nano_mutex__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Nano_mutex__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Nano_mutex_Import = "Nano_mutex__Import",
    cst_nano_mutex = "nano_mutex";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Nano_mutex_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_nano_mutex);
   caml_call1(Ppx_expect_runtime[1][1], "nano_mutex/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_nano_mutex, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_nano_mutex);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Nano_mutex_Import);
   var Nano_mutex_Import = [0];
   runtime.caml_register_global(11, Nano_mutex_Import, cst_Nano_mutex_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Nano_mutex
//# unitInfo: Requires: Core, Core__Error, Core__Or_error, Core_thread, Error_checking_mutex, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Condition, Thread_safe_queue, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Nano_mutex$0 = "Nano_mutex",
    cst_mutex = "mutex",
    cst_nano_mutex$0 = "nano_mutex",
    cst_nano_mutex_src_nano_mutex_ = "nano_mutex/src/nano_mutex.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Uopt = global_data.Uopt,
    Core_Error = global_data.Core__Error,
    Core_thread = global_data.Core_thread,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_Condition = global_data.Stdlib__Condition,
    Error_checking_mutex = global_data.Error_checking_mutex,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Or_error = global_data.Core__Or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Nano_mutex$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_nano_mutex$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_nano_mutex_src_nano_mutex_);
   caml_call2(Ppx_inline_test_lib[6], cst_nano_mutex$0, "nano_mutex.ml");
   var
    ok_exn = Core_Or_error[40],
    _k_ = [0, 0],
    _n_ = [0, 0],
    cst_attempt_to_unlock_an_unloc = "attempt to unlock an unlocked mutex",
    cst_attempt_to_unlock_mutex_he =
      "attempt to unlock mutex held by another thread",
    _l_ = [0, cst_mutex],
    _m_ = [0, "current_thread_id"],
    _i_ = [0, -326120466],
    _j_ = [0, -453623846],
    cst_attempt_to_lock_mutex_by_t =
      "attempt to lock mutex by thread already holding it",
    _h_ = [0, cst_nano_mutex_src_nano_mutex_, 98, 4],
    _g_ = [0, cst_nano_mutex_src_nano_mutex_, 105, 36],
    cst_invariant_failed = "invariant failed",
    _f_ = [0, cst_nano_mutex_src_nano_mutex_, 107, 4350, 4377],
    _c_ = [0, "blocker"],
    _d_ = [0, "num_using_blocker"],
    _e_ = [0, "id_of_thread_holding_lock"],
    cst_None = "None",
    _a_ = [0, "condition"],
    _b_ = [0, cst_mutex],
    cst_nano_mutex = cst_nano_mutex$0,
    cst_Nano_mutex = cst_Nano_mutex$0;
   function sexp_of_t(param){
    var
     condition_004 = param[2],
     mutex_002 = param[1],
     arg_005 = caml_call1(Sexplib0_Sexp_conv[23], condition_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Sexplib0_Sexp_conv[23], mutex_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   var unused = caml_call1(Thread_safe_queue[3], 0);
   function save_unused(t){
    return caml_call2(Thread_safe_queue[5], unused, t);
   }
   function signal(t){return caml_call1(Stdlib_Condition[3], t[2]);}
   var equal = Core[384], sexp_of_t$0 = Core[389], none = -1;
   function is_none(t){return caml_call2(Core[90], t, none);}
   function is_some(t){return caml_call2(Core[93], t, none);}
   function sexp_of_t$1(param){
    var
     id_of_thread_holding_lock_009 = param[1],
     num_using_blocker_011 = param[2],
     blocker_013 = param[3],
     arg_014 = caml_call2(Uopt[2], sexp_of_t, blocker_013),
     bnds_008 = [0, [1, [0, _c_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(Core[389], num_using_blocker_011),
     bnds_008$0 = [0, [1, [0, _d_, [0, arg_012, 0]]], bnds_008],
     arg_010 =
       caml_call2(Core[90], id_of_thread_holding_lock_009, none)
        ? caml_call1(Sexplib0_Sexp_conv[7], cst_None)
        : caml_call1(sexp_of_t$0, id_of_thread_holding_lock_009),
     bnds_008$1 = [0, [1, [0, _e_, [0, arg_010, 0]]], bnds_008$0];
    return [1, bnds_008$1];
   }
   function invariant(t){
    try{
     if(! caml_call2(Core[88], t[2], 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
     var _C_ = caml_call2(Core[90], t[2], 0);
     if(_C_){
      if(! caml_call1(Uopt[7], t[3]))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
      var _D_ = 0;
     }
     else
      var _D_ = _C_;
     return _D_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _B_ =
        function(param){
         var
          arg1_016 = param[2],
          arg0_015 = param[1],
          res0_017 = caml_call1(Core[625], arg0_015),
          res1_018 = sexp_of_t$1(arg1_016);
         return [1, [0, res0_017, [0, res1_018, 0]]];
        };
     return caml_call5
             (Core[247], 0, _f_, cst_invariant_failed, [0, exn, t], _B_);
    }
   }
   function equal$0(t$0, t){return t$0 === t ? 1 : 0;}
   function create(param){return [0, none, 0, Uopt[5]];}
   function current_thread_id(param){
    var _A_ = caml_call1(Core_thread[3], 0);
    return caml_call1(Core_thread[4], _A_);
   }
   function current_thread_has_lock(t){
    var _z_ = current_thread_id(0);
    return caml_call2(equal, t[1], _z_);
   }
   function error_recursive_lock(t){
    function _x_(param){
     var
      arg1_020 = param[2],
      arg0_019 = param[1],
      res0_021 = caml_call1(Core[389], arg0_019),
      res1_022 = sexp_of_t$1(arg1_020);
     return [1, [0, res0_021, [0, res1_022, 0]]];
    }
    var _y_ = [0, current_thread_id(0), t];
    return [1,
            caml_call5
             (Core_Error[19], 0, 0, cst_attempt_to_lock_mutex_by_t, _y_, _x_)];
   }
   function try_lock(t){
    var current_thread_id$0 = current_thread_id(0);
    return is_none(t[1])
            ? (t[1] = current_thread_id$0, _i_)
            : caml_call2
               (equal, current_thread_id$0, t[1])
              ? error_recursive_lock(t)
              : _j_;
   }
   function try_lock_exn(t){return caml_call1(ok_exn, try_lock(t));}
   function with_blocker(t, f){
    t[2] = t[2] + 1 | 0;
    var ppx_optional_e_0 = t[3];
    if(caml_call1(Uopt[15][1][1], ppx_optional_e_0)){
     var _s_ = caml_call1(Thread_safe_queue[4], unused);
     if(caml_call2(Core[91], _s_, 0))
      var new_blocker = caml_call1(Thread_safe_queue[6], unused);
     else
      var
       _t_ = caml_call1(Stdlib_Condition[1], 0),
       new_blocker = [0, caml_call1(Error_checking_mutex[1], 0), _t_];
     var
      blocker =
        caml_call1(Uopt[8], t[3])
         ? caml_call1(Uopt[12], t[3])
         : (t[3] = caml_call1(Uopt[6], new_blocker), new_blocker);
     if(1 - (blocker === new_blocker ? 1 : 0)) save_unused(new_blocker);
     var blocker$0 = blocker;
    }
    else
     var
      blocker$1 = caml_call1(Uopt[15][1][2], ppx_optional_e_0),
      blocker$0 = blocker$1;
    function _u_(param){
     t[2] = t[2] - 1 | 0;
     var _w_ = caml_call2(Core[90], t[2], 0);
     return _w_ ? (t[3] = Uopt[5], save_unused(blocker$0)) : _w_;
    }
    function _v_(param){
     function f$0(param){return caml_call1(f, blocker$0);}
     return caml_call2(Error_checking_mutex[6], blocker$0[1], f$0);
    }
    return caml_call2(Core[259], _v_, _u_);
   }
   function lock(t){
    for(;;){
     var current_thread_id$0 = current_thread_id(0);
     if(is_none(t[1])){t[1] = current_thread_id$0; return _k_;}
     if(caml_call2(equal, current_thread_id$0, t[1]))
      return error_recursive_lock(t);
     with_blocker
      (t,
       function(blocker){
        var _r_ = is_some(t[1]);
        return _r_
                ? caml_call2(Stdlib_Condition[2], blocker[2], blocker[1])
                : _r_;
       });
    }
   }
   function lock_exn(t){return caml_call1(ok_exn, lock(t));}
   function sexp_of_message(param){
    var
     mutex_026 = param[2],
     current_thread_id_024 = param[1],
     arg_027 = sexp_of_t$1(mutex_026),
     bnds_023 = [0, [1, [0, _l_, [0, arg_027, 0]]], 0],
     arg_025 = caml_call1(Core[389], current_thread_id_024),
     bnds_023$0 = [0, [1, [0, _m_, [0, arg_025, 0]]], bnds_023];
    return [1, bnds_023$0];
   }
   function unlock(t){
    var current_thread_id$0 = current_thread_id(0);
    if(! is_some(t[1])){
     var _q_ = [0, current_thread_id(0), t];
     return [1,
             caml_call5
              (Core_Error[19],
               0,
               0,
               cst_attempt_to_unlock_an_unloc,
               _q_,
               sexp_of_message)];
    }
    if(! caml_call2(equal, t[1], current_thread_id$0)){
     var _p_ = [0, current_thread_id(0), t];
     return [1,
             caml_call5
              (Core_Error[19],
               0,
               0,
               cst_attempt_to_unlock_mutex_he,
               _p_,
               sexp_of_message)];
    }
    t[1] = none;
    if(caml_call1(Uopt[8], t[3])) with_blocker(t, signal);
    return _n_;
   }
   function unlock_exn(t){return caml_call1(ok_exn, unlock(t));}
   function critical_section(t, f){
    lock_exn(t);
    function _o_(param){return unlock_exn(t);}
    return caml_call2(Core[259], f, _o_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_nano_mutex);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Nano_mutex);
   var
    Nano_mutex =
      [0,
       sexp_of_t$1,
       invariant,
       create,
       equal$0,
       current_thread_has_lock,
       lock,
       lock_exn,
       try_lock,
       try_lock_exn,
       unlock,
       unlock_exn,
       critical_section];
   runtime.caml_register_global(40, Nano_mutex, cst_Nano_mutex$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
