// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Bonsai = [0],
    Bonsai$0 = [0, Bonsai];
   runtime.caml_register_global(0, Bonsai$0, "Bonsai__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Action
//# unitInfo: Requires: Core, Core__Nothing, Core__Option, Core__Sexp, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc = "Assoc",
    cst_Bonsai_Action$0 = "Bonsai__Action",
    cst_Lazy = "Lazy",
    cst_Switch = "Switch",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Action$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/action.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "action.ml");
   var
    _a_ = [0, 0],
    _b_ = [0, 0],
    _c_ = [0, 0],
    _d_ = [0, 0],
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _i_ = [0, cst_Switch],
    _j_ = [0, cst_Lazy],
    _k_ = [0, "Leaf"],
    _l_ = [0, "Sub"],
    _m_ = [0, "Wrap"],
    _n_ = [0, "Model_reset"],
    _o_ = [0, cst_Assoc],
    _p_ = [0, cst_Assoc],
    _B_ = [0, "Assoc_on"],
    _A_ = [0, cst_Assoc],
    _y_ = [0, "Model_reset_outer"],
    _z_ = [0, "Model_reset_inner"],
    _w_ = [0, "Wrap_inner"],
    _x_ = [0, "Wrap_outer"],
    _u_ = [0, "Sub_from"],
    _v_ = [0, "Sub_into"],
    _s_ = [0, "Leaf_static"],
    _t_ = [0, "Leaf_dynamic"],
    _r_ = [0, cst_Lazy],
    _q_ = [0, cst_Switch],
    cst_Nothing_t = "Nothing.t",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Action = cst_Bonsai_Action$0;
   function same_witness(a, b){
    if(typeof a === "number"){
     if(0 === a){
      if(typeof b === "number" && ! b) return _a_;
     }
     else if(typeof b === "number" && b) return _b_;
    }
    else
     switch(a[0]){
       case 0:
        if(typeof b !== "number" && 0 === b[0]){
         var action = b[1], action$0 = a[1];
         return caml_call2(Core_Type_equal[8][9], action$0, action) ? _c_ : 0;
        }
        break;
       case 1:
        if(typeof b !== "number" && 1 === b[0]){
         var
          into = b[2],
          from = b[1],
          into$0 = a[2],
          from$0 = a[1],
          same_from = same_witness(from$0, from),
          same_into = same_witness(into$0, into);
         if(same_from && same_into) return _d_;
         return 0;
        }
        break;
       case 2:
        if(typeof b !== "number" && 2 === b[0]){
         var
          outer = b[2],
          inner = b[1],
          outer$0 = a[2],
          inner$0 = a[1],
          same_inner = same_witness(inner$0, inner),
          same_outer = caml_call2(Core_Type_equal[8][9], outer$0, outer);
         if(same_inner && same_outer) return _e_;
         return 0;
        }
        break;
       case 3:
        if(typeof b !== "number" && 3 === b[0]){
         var inner$1 = b[1], inner$2 = a[1];
         return same_witness(inner$2, inner$1) ? _f_ : 0;
        }
        break;
       case 4:
        if(typeof b !== "number" && 4 === b[0]){
         var
          action$1 = b[2],
          key = b[1],
          action$2 = a[2],
          key$0 = a[1],
          same_key = caml_call2(Core_Type_equal[8][9], key$0, key),
          same_action = same_witness(action$2, action$1);
         if(same_key && same_action) return _g_;
         return 0;
        }
        break;
       default:
        if(typeof b !== "number" && 5 === b[0]){
         var
          action$3 = b[3],
          model_key = b[2],
          io_key = b[1],
          action$4 = a[3],
          model_key$0 = a[2],
          io_key$0 = a[1],
          same_io_key = caml_call2(Core_Type_equal[8][9], io_key$0, io_key),
          same_model_key =
            caml_call2(Core_Type_equal[8][9], model_key$0, model_key),
          same_action$0 = same_witness(action$4, action$3);
         if(same_io_key && same_model_key && same_action$0) return _h_;
         return 0;
        }
     }
    return 0;
   }
   function sexp_of_t(param){
    if(typeof param === "number") return 0 === param ? _i_ : _j_;
    switch(param[0]){
      case 0:
       var action = param[1];
       return [1,
               [0,
                _k_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], action), 0]]];
      case 1:
       var
        into = param[2],
        from = param[1],
        from$0 = sexp_of_t(from),
        into$0 = sexp_of_t(into),
        _Q_ = [0, caml_call1(Core_Sexp[93], into$0), 0];
       return [1, [0, _l_, [0, caml_call1(Core_Sexp[93], from$0), _Q_]]];
      case 2:
       var
        outer = param[2],
        inner = param[1],
        inner$0 = sexp_of_t(inner),
        _R_ = [0, caml_call2(Core_Type_equal[8][1], Core[149], outer), 0];
       return [1, [0, _m_, [0, caml_call1(Core_Sexp[93], inner$0), _R_]]];
      case 3:
       var inner$1 = param[1], inner$2 = sexp_of_t(inner$1);
       return [1, [0, _n_, [0, caml_call1(Core_Sexp[93], inner$2), 0]]];
      case 4:
       var
        action$0 = param[2],
        x_003 = param[1],
        action$1 = sexp_of_t(action$0),
        _S_ = [0, caml_call1(Core_Sexp[93], action$1), 0];
       return [1,
               [0,
                _o_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], x_003), _S_]]];
      default:
       var
        action$2 = param[3],
        model_key = param[2],
        io_key = param[1],
        action$3 = sexp_of_t(action$2),
        _T_ = [0, caml_call1(Core_Sexp[93], action$3), 0],
        _U_ =
          [0, caml_call2(Core_Type_equal[8][1], Core[149], model_key), _T_];
       return [1,
               [0,
                _p_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], io_key), _U_]]];
    }
   }
   function to_sexp(param){
    if(typeof param === "number")
     return 0 === param
             ? function
              (param){
               var
                type_id = param[3],
                action = param[2],
                branch = param[1],
                to_sexp$0 = to_sexp(type_id),
                _N_ = to_sexp$0(action),
                _O_ = [0, caml_call1(Core_Sexp[93], _N_), 0];
               return [1, [0, _q_, [0, caml_call1(Core[389], branch), _O_]]];
              }
             : function
              (param){
               var
                type_id = param[2],
                action = param[1],
                to_sexp$0 = to_sexp(type_id),
                _P_ = to_sexp$0(action);
               return [1, [0, _r_, [0, caml_call1(Core_Sexp[93], _P_), 0]]];
              };
    switch(param[0]){
      case 0:
       var
        action = param[1],
        to_sexp$0 = caml_call1(Core_Type_equal[8][6], action);
       return function(param){
        if(typeof param !== "number" && 1 === param[0]){
         var action$0 = param[1], _M_ = caml_call1(to_sexp$0, action$0);
         return [1, [0, _t_, [0, caml_call1(Core_Sexp[93], _M_), 0]]];
        }
        var action = param[1], _L_ = caml_call1(to_sexp$0, action);
        return [1, [0, _s_, [0, caml_call1(Core_Sexp[93], _L_), 0]]];};
      case 1:
       var into = param[2], from = param[1];
       return function(param){
        if(typeof param !== "number" && 3 === param[0]){
         var
          action$0 = param[1],
          to_sexp$1 = to_sexp(into),
          _K_ = to_sexp$1(action$0);
         return [1, [0, _v_, [0, caml_call1(Core_Sexp[93], _K_), 0]]];
        }
        var
         action = param[1],
         to_sexp$0 = to_sexp(from),
         _J_ = to_sexp$0(action);
        return [1, [0, _u_, [0, caml_call1(Core_Sexp[93], _J_), 0]]];};
      case 2:
       var outer = param[2], inner = param[1];
       return function(param){
        if(typeof param !== "number" && 5 === param[0]){
         var
          action$0 = param[1],
          to_sexp$1 = caml_call1(Core_Type_equal[8][6], outer),
          _I_ = caml_call1(to_sexp$1, action$0);
         return [1, [0, _x_, [0, caml_call1(Core_Sexp[93], _I_), 0]]];
        }
        var
         action = param[1],
         to_sexp$0 = to_sexp(inner),
         _H_ = to_sexp$0(action);
        return [1, [0, _w_, [0, caml_call1(Core_Sexp[93], _H_), 0]]];};
      case 3:
       var inner$0 = param[1];
       return function(param){
        if(typeof param === "number") return _y_;
        var
         action = param[1],
         to_sexp$0 = to_sexp(inner$0),
         _G_ = to_sexp$0(action);
        return [1, [0, _z_, [0, caml_call1(Core_Sexp[93], _G_), 0]]];};
      case 4:
       var action_id = param[2], key_id = param[1];
       return function(param){
        var
         action = param[2],
         key = param[1],
         sexp_of_key = caml_call1(Core_Type_equal[8][6], key_id),
         sexp_of_action = to_sexp(action_id),
         _F_ = [0, sexp_of_action(action), 0];
        return [1, [0, _A_, [0, caml_call1(sexp_of_key, key), _F_]]];};
      default:
       var
        action_id$0 = param[3],
        model_key_id = param[2],
        io_key_id = param[1];
       return function(param){
        var
         action = param[3],
         model_key = param[2],
         io_key = param[1],
         sexp_of_io_key = caml_call1(Core_Type_equal[8][6], io_key_id),
         sexp_of_model_key = caml_call1(Core_Type_equal[8][6], model_key_id),
         sexp_of_action = to_sexp(action_id$0),
         _D_ = [0, sexp_of_action(action), 0],
         _E_ = [0, caml_call1(sexp_of_model_key, model_key), _D_];
        return [1, [0, _B_, [0, caml_call1(sexp_of_io_key, io_key), _E_]]];};
    }
   }
   var
    nothing_type_id =
      caml_call2(Core_Type_equal[8][3], cst_Nothing_t, Core_Nothing[23]),
    nothing = [0, nothing_type_id];
   function leaf(type_id){return [0, type_id];}
   function sub(from, into){return [1, from, into];}
   function wrap(inner, outer){return [2, inner, outer];}
   function model_reset(inner){return [3, inner];}
   var lazy = 1, switch$0 = 0;
   function assoc(key, action){return [4, key, action];}
   function assoc_on(io_key, model_key, action){return [5, io_key, model_key, action];
   }
   function same_witness_exn(a, b){
    var _C_ = same_witness(a, b);
    return caml_call4(Core_Option[40], 0, 0, 0, _C_);
   }
   function static_leaf(action){return [0, action];}
   function dynamic_leaf(action){return [1, action];}
   function sub_from(action){return [2, action];}
   function sub_into(action){return [3, action];}
   function wrap_inner(action){return [4, action];}
   function wrap_outer(action){return [5, action];}
   function model_reset_inner(action){return [6, action];}
   var model_reset_outer = 0;
   function switch$1(branch, type_id, action){return [7, branch, action, type_id];
   }
   function lazy$0(type_id, action){return [8, action, type_id];}
   function assoc$0(key, id, compare, action){return [9, key, action, id, compare];
   }
   function assoc_on$0(io_key, io_id, io_compare, model_key, action){return [10, io_key, model_key, action, io_id, io_compare];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Action);
   var
    Bonsai_Action =
      [0,
       [0,
        nothing,
        leaf,
        sub,
        wrap,
        model_reset,
        switch$0,
        lazy,
        assoc,
        assoc_on,
        same_witness,
        same_witness_exn,
        sexp_of_t,
        to_sexp],
       static_leaf,
       dynamic_leaf,
       sub_from,
       sub_into,
       wrap_inner,
       wrap_outer,
       model_reset_inner,
       model_reset_outer,
       switch$1,
       lazy$0,
       assoc$0,
       assoc_on$0];
   runtime.caml_register_global(45, Bonsai_Action, cst_Bonsai_Action$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Annotate_incr
//# unitInfo: Requires: Base__Hash, Core, Core__Hashable, Core__List, Core__Memo, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc_input = "Assoc_input",
    cst_Assoc_inputs = "Assoc_inputs",
    cst_Assoc_key = "Assoc_key",
    cst_Assoc_lifecycles = "Assoc_lifecycles",
    cst_Assoc_results = "Assoc_results",
    cst_Bonsai_Annotate_incr$0 = "Bonsai__Annotate_incr",
    cst_Empty_lifecycle = "Empty_lifecycle",
    cst_Input = "Input",
    cst_Lifecycle = "Lifecycle",
    cst_Lifecycle_apply_action_pai = "Lifecycle_apply_action_pair",
    cst_Model = "Model",
    cst_Model_and_input = "Model_and_input",
    cst_Path = "Path",
    cst_Result = "Result",
    cst_Value = "Value",
    cst_assoc_input$0 = "assoc_input",
    cst_assoc_inputs = "assoc_inputs",
    cst_assoc_key$0 = "assoc_key",
    cst_assoc_lifecycles = "assoc_lifecycles",
    cst_assoc_results = "assoc_results",
    cst_bonsai$0 = "bonsai",
    cst_bound$1 = "bound: ",
    cst_empty_lifecycle$0 = "empty_lifecycle",
    cst_input$0 = "input",
    cst_lifecycle$0 = "lifecycle",
    cst_lifecycle_apply_action_pai$0 = "lifecycle_apply_action_pair",
    cst_model$0 = "model",
    cst_model_and_input = "model_and_input",
    cst_path$0 = "path",
    cst_result$0 = "result",
    cst_value$0 = "value",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    red50 = [0, 3603131, "#FEF2F2"],
    red100 = [0, 3603131, "#FEE2E2"],
    red200 = [0, 3603131, "#FECACA"],
    red300 = [0, 3603131, "#FCA5A5"],
    amber100 = [0, 3603131, "#FEF3C7"],
    amber200 = [0, 3603131, "#FDE68A"],
    blue100 = [0, 3603131, "#DBEAFE"],
    blue200 = [0, 3603131, "#BFDBFE"],
    blue300 = [0, 3603131, "#93C5FD"],
    emerald100 = [0, 3603131, "#D1FAE5"],
    emerald200 = [0, 3603131, "#A7F3D0"],
    pink100 = [0, 3603131, "#FCE7F3"],
    pink200 = [0, 3603131, "#FBCFE8"],
    pink300 = [0, 3603131, "#F9A8D4"],
    error_source_005 = "src/annotate_incr.ml.Kind.T.t",
    Ui_incr = global_data.Ui_incr,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Hashable = global_data.Core__Hashable,
    Core_Memo = global_data.Core__Memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Annotate_incr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/annotate_incr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "annotate_incr.ml");
   var
    enabled = [0, 0],
    _q_ = [0, cst_lifecycle_apply_action_pai$0],
    _r_ = [0, cst_path$0],
    _s_ = [0, cst_assoc_inputs],
    _t_ = [0, cst_assoc_lifecycles],
    _u_ = [0, cst_assoc_results],
    _v_ = [0, cst_assoc_input$0],
    _w_ = [0, cst_assoc_key$0],
    _x_ = [0, cst_model_and_input],
    _y_ = [0, cst_model$0],
    _z_ = [0, cst_empty_lifecycle$0],
    _A_ = [0, cst_lifecycle$0],
    _B_ = [0, cst_result$0],
    _C_ = [0, cst_value$0],
    _D_ = [0, cst_input$0],
    cst_kind = "kind",
    cst_fillcolor = "fillcolor",
    _p_ = [0, "style", "filled"],
    cst_input = cst_input$0,
    cst_value = cst_value$0,
    cst_result = cst_result$0,
    cst_lifecycle = cst_lifecycle$0,
    cst_empty_lifecycle = "empty lifecycle",
    cst_model = cst_model$0,
    cst_model_input = "model & input",
    cst_assoc_key = "assoc key",
    cst_assoc_input = "assoc input",
    cst_assoc_result_map = "assoc result map",
    cst_assoc_lifecycle_map = "assoc lifecycle map",
    cst_assoc_input_map = "assoc input map",
    cst_path = cst_path$0,
    cst_lifecycle_apply_action_pai = "lifecycle/apply-action pair",
    _a_ = [0, cst_Input],
    _b_ = [0, cst_Value],
    _c_ = [0, cst_Result],
    _d_ = [0, cst_Lifecycle],
    _e_ = [0, cst_Empty_lifecycle],
    _f_ = [0, cst_Model],
    _g_ = [0, cst_Model_and_input],
    _h_ = [0, cst_Assoc_key],
    _i_ = [0, cst_Assoc_input],
    _j_ = [0, cst_Assoc_results],
    _k_ = [0, cst_Assoc_lifecycles],
    _l_ = [0, cst_Assoc_inputs],
    _m_ = [0, cst_Path],
    _n_ = [0, cst_Lifecycle_apply_action_pai],
    cst_app = "app/",
    cst_lib = "lib/",
    cst_bound = cst_bound$1,
    cst_bound$0 = cst_bound$1,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Annotate_incr = cst_Bonsai_Annotate_incr$0;
   function enable(param){enabled[1] = 1; return 0;}
   function disable(param){enabled[1] = 0; return 0;}
   var empty_attrs = Core_String[159][5];
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var _Y_ = 0; break;
      case 1:
       var _Y_ = 1; break;
      case 2:
       var _Y_ = 2; break;
      case 3:
       var _Y_ = 3; break;
      case 4:
       var _Y_ = 4; break;
      case 5:
       var _Y_ = 5; break;
      case 6:
       var _Y_ = 6; break;
      case 7:
       var _Y_ = 7; break;
      case 8:
       var _Y_ = 8; break;
      case 9:
       var _Y_ = 9; break;
      case 10:
       var _Y_ = 10; break;
      case 11:
       var _Y_ = 11; break;
      case 12:
       var _Y_ = 12; break;
      default: var _Y_ = 13;
    }
    return caml_call2(Base_Hash[3], hsv, _Y_);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _X_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _X_);
   }
   var compare = runtime.caml_int_compare;
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var
       _N_ = sexp_006[1],
       _O_ = caml_string_compare(_N_, cst_assoc_input$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   if(0 <= _O_){
                    if(0 >= _O_) break h;
                    var _P_ = caml_string_compare(_N_, cst_lifecycle$0);
                    if(0 > _P_){
                     if(! caml_string_notequal(_N_, cst_assoc_inputs)) break g;
                     if(! caml_string_notequal(_N_, cst_assoc_key$0)) break f;
                     if(! caml_string_notequal(_N_, cst_assoc_lifecycles))
                      break e;
                     if(! caml_string_notequal(_N_, cst_assoc_results)) break d;
                     if(! caml_string_notequal(_N_, cst_empty_lifecycle$0))
                      break c;
                     if(caml_string_notequal(_N_, cst_input$0)) break a;
                     break b;
                    }
                    if(0 < _P_){
                     if
                      (!
                       caml_string_notequal(_N_, cst_lifecycle_apply_action_pai$0))
                      break n;
                     if(! caml_string_notequal(_N_, cst_model$0)) break m;
                     if(! caml_string_notequal(_N_, cst_model_and_input))
                      break l;
                     if(! caml_string_notequal(_N_, cst_path$0)) break k;
                     if(! caml_string_notequal(_N_, cst_result$0)) break j;
                     if(caml_string_notequal(_N_, cst_value$0)) break a;
                     break i;
                    }
                   }
                   else{
                    var _Q_ = caml_string_compare(_N_, cst_Lifecycle);
                    if(0 > _Q_){
                     if(! caml_string_notequal(_N_, cst_Assoc_input)) break h;
                     if(! caml_string_notequal(_N_, cst_Assoc_inputs)) break g;
                     if(! caml_string_notequal(_N_, cst_Assoc_key)) break f;
                     if(! caml_string_notequal(_N_, cst_Assoc_lifecycles))
                      break e;
                     if(! caml_string_notequal(_N_, cst_Assoc_results)) break d;
                     if(! caml_string_notequal(_N_, cst_Empty_lifecycle))
                      break c;
                     if(caml_string_notequal(_N_, cst_Input)) break a;
                     break b;
                    }
                    if(0 < _Q_){
                     if
                      (!
                       caml_string_notequal(_N_, cst_Lifecycle_apply_action_pai))
                      break n;
                     if(! caml_string_notequal(_N_, cst_Model)) break m;
                     if(! caml_string_notequal(_N_, cst_Model_and_input))
                      break l;
                     if(! caml_string_notequal(_N_, cst_Path)) break k;
                     if(! caml_string_notequal(_N_, cst_Result)) break j;
                     if(caml_string_notequal(_N_, cst_Value)) break a;
                     break i;
                    }
                   }
                   return 3;
                  }
                  return 13;
                 }
                 return 5;
                }
                return 6;
               }
               return 12;
              }
              return 2;
             }
             return 1;
            }
            return 8;
           }
           return 11;
          }
          return 7;
         }
         return 10;
        }
        return 9;
       }
       return 4;
      }
      return 0;
     }
     var _R_ = sexp_006[1];
     if(! _R_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_006);
     var _S_ = _R_[1];
     if(0 !== _S_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_006);
     var _T_ = _S_[1], _U_ = caml_string_compare(_T_, cst_assoc_input$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  if(0 <= _U_){
                   if(0 >= _U_) break h;
                   var _V_ = caml_string_compare(_T_, cst_lifecycle$0);
                   if(0 > _V_){
                    if(! caml_string_notequal(_T_, cst_assoc_inputs)) break g;
                    if(! caml_string_notequal(_T_, cst_assoc_key$0)) break f;
                    if(! caml_string_notequal(_T_, cst_assoc_lifecycles))
                     break e;
                    if(! caml_string_notequal(_T_, cst_assoc_results)) break d;
                    if(! caml_string_notequal(_T_, cst_empty_lifecycle$0))
                     break c;
                    if(caml_string_notequal(_T_, cst_input$0)) break a;
                    break b;
                   }
                   if(0 < _V_){
                    if
                     (!
                      caml_string_notequal(_T_, cst_lifecycle_apply_action_pai$0))
                     break n;
                    if(! caml_string_notequal(_T_, cst_model$0)) break m;
                    if(! caml_string_notequal(_T_, cst_model_and_input))
                     break l;
                    if(! caml_string_notequal(_T_, cst_path$0)) break k;
                    if(! caml_string_notequal(_T_, cst_result$0)) break j;
                    if(caml_string_notequal(_T_, cst_value$0)) break a;
                    break i;
                   }
                  }
                  else{
                   var _W_ = caml_string_compare(_T_, cst_Lifecycle);
                   if(0 > _W_){
                    if(! caml_string_notequal(_T_, cst_Assoc_input)) break h;
                    if(! caml_string_notequal(_T_, cst_Assoc_inputs)) break g;
                    if(! caml_string_notequal(_T_, cst_Assoc_key)) break f;
                    if(! caml_string_notequal(_T_, cst_Assoc_lifecycles))
                     break e;
                    if(! caml_string_notequal(_T_, cst_Assoc_results)) break d;
                    if(! caml_string_notequal(_T_, cst_Empty_lifecycle))
                     break c;
                    if(caml_string_notequal(_T_, cst_Input)) break a;
                    break b;
                   }
                   if(0 < _W_){
                    if
                     (!
                      caml_string_notequal(_T_, cst_Lifecycle_apply_action_pai))
                     break n;
                    if(! caml_string_notequal(_T_, cst_Model)) break m;
                    if(! caml_string_notequal(_T_, cst_Model_and_input))
                     break l;
                    if(! caml_string_notequal(_T_, cst_Path)) break k;
                    if(! caml_string_notequal(_T_, cst_Result)) break j;
                    if(caml_string_notequal(_T_, cst_Value)) break a;
                    break i;
                   }
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      default: return _n_;
    }
   }
   var
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp, compare, sexp_of_t, hash]),
    hashable = include[4];
   function _o_(kind, incr){
    var _L_ = 0;
    switch(kind){
      case 0:
       var _M_ = cst_input; break;
      case 1:
       var _M_ = cst_value; break;
      case 2:
       var _M_ = cst_result; break;
      case 3:
       var _M_ = cst_lifecycle; break;
      case 4:
       var _M_ = cst_empty_lifecycle; break;
      case 5:
       var _M_ = cst_model; break;
      case 6:
       var _M_ = cst_model_input; break;
      case 7:
       var _M_ = cst_assoc_key; break;
      case 8:
       var _M_ = cst_assoc_input; break;
      case 9:
       var _M_ = cst_assoc_result_map; break;
      case 10:
       var _M_ = cst_assoc_lifecycle_map; break;
      case 11:
       var _M_ = cst_assoc_input_map; break;
      case 12:
       var _M_ = cst_path; break;
      default: var _M_ = cst_lifecycle_apply_action_pai;
    }
    var label = [0, cst_kind, [0, _M_, _L_]];
    switch(kind){
      case 0:
       var match = amber100; break;
      case 1:
       var match = red50; break;
      case 2:
       var match = red100; break;
      case 3:
       var match = blue100; break;
      case 4:
       var match = blue300; break;
      case 5:
       var match = emerald100; break;
      case 6:
       var match = pink100; break;
      case 7:
       var match = pink200; break;
      case 8:
       var match = pink300; break;
      case 9:
       var match = red200; break;
      case 10:
       var match = blue200; break;
      case 11:
       var match = amber200; break;
      case 12:
       var match = red300; break;
      default: var match = emerald200;
    }
    var
     color = match[2],
     attrs =
       caml_call1
        (Core_String[159][15], [0, _p_, [0, [0, cst_fillcolor, color], 0]]);
    return caml_call3(Ui_incr[74][3], incr, label, attrs);
   }
   var annotate_packed = caml_call3(Core_Memo[1], [0, hashable], 0, _o_);
   function sexp_of_t$0(param){
    var
     input_008 = param[1],
     value_010 = param[2],
     result_012 = param[3],
     lifecycle_014 = param[4],
     empty_lifecycle_016 = param[5],
     model_018 = param[6],
     model_and_input_020 = param[7],
     assoc_key_022 = param[8],
     assoc_input_024 = param[9],
     assoc_results_026 = param[10],
     assoc_lifecycles_028 = param[11],
     assoc_inputs_030 = param[12],
     path_032 = param[13],
     lifecycle_apply_action_pair_03 = param[14],
     arg_035 = caml_call1(Core[389], lifecycle_apply_action_pair_03),
     bnds_007 = [0, [1, [0, _q_, [0, arg_035, 0]]], 0],
     arg_033 = caml_call1(Core[389], path_032),
     bnds_007$0 = [0, [1, [0, _r_, [0, arg_033, 0]]], bnds_007],
     arg_031 = caml_call1(Core[389], assoc_inputs_030),
     bnds_007$1 = [0, [1, [0, _s_, [0, arg_031, 0]]], bnds_007$0],
     arg_029 = caml_call1(Core[389], assoc_lifecycles_028),
     bnds_007$2 = [0, [1, [0, _t_, [0, arg_029, 0]]], bnds_007$1],
     arg_027 = caml_call1(Core[389], assoc_results_026),
     bnds_007$3 = [0, [1, [0, _u_, [0, arg_027, 0]]], bnds_007$2],
     arg_025 = caml_call1(Core[389], assoc_input_024),
     bnds_007$4 = [0, [1, [0, _v_, [0, arg_025, 0]]], bnds_007$3],
     arg_023 = caml_call1(Core[389], assoc_key_022),
     bnds_007$5 = [0, [1, [0, _w_, [0, arg_023, 0]]], bnds_007$4],
     arg_021 = caml_call1(Core[389], model_and_input_020),
     bnds_007$6 = [0, [1, [0, _x_, [0, arg_021, 0]]], bnds_007$5],
     arg_019 = caml_call1(Core[389], model_018),
     bnds_007$7 = [0, [1, [0, _y_, [0, arg_019, 0]]], bnds_007$6],
     arg_017 = caml_call1(Core[389], empty_lifecycle_016),
     bnds_007$8 = [0, [1, [0, _z_, [0, arg_017, 0]]], bnds_007$7],
     arg_015 = caml_call1(Core[389], lifecycle_014),
     bnds_007$9 = [0, [1, [0, _A_, [0, arg_015, 0]]], bnds_007$8],
     arg_013 = caml_call1(Core[389], result_012),
     bnds_007$10 = [0, [1, [0, _B_, [0, arg_013, 0]]], bnds_007$9],
     arg_011 = caml_call1(Core[389], value_010),
     bnds_007$11 = [0, [1, [0, _C_, [0, arg_011, 0]]], bnds_007$10],
     arg_009 = caml_call1(Core[389], input_008),
     bnds_007$12 = [0, [1, [0, _D_, [0, arg_009, 0]]], bnds_007$11];
    return [1, bnds_007$12];
   }
   var global = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   function current(param){
    return [0,
            global[1],
            global[2],
            global[3],
            global[4],
            global[5],
            global[6],
            global[7],
            global[8],
            global[9],
            global[10],
            global[11],
            global[12],
            global[13],
            global[14]];
   }
   function diff(before, after){
    return [0,
            after[1] - before[1] | 0,
            after[2] - before[2] | 0,
            after[3] - before[3] | 0,
            after[4] - before[4] | 0,
            after[5] - before[5] | 0,
            after[6] - before[6] | 0,
            after[7] - before[7] | 0,
            after[8] - before[8] | 0,
            after[9] - before[9] | 0,
            after[10] - before[10] | 0,
            after[11] - before[11] | 0,
            after[12] - before[12] | 0,
            after[13] - before[13] | 0,
            after[14] - before[14] | 0];
   }
   function incr(param){
    switch(param){
      case 0:
       global[1] = global[1] + 1 | 0; return;
      case 1:
       global[2] = global[2] + 1 | 0; return;
      case 2:
       global[3] = global[3] + 1 | 0; return;
      case 3:
       global[4] = global[4] + 1 | 0; return;
      case 4:
       global[5] = global[5] + 1 | 0; return;
      case 5:
       global[6] = global[6] + 1 | 0; return;
      case 6:
       global[7] = global[7] + 1 | 0; return;
      case 7:
       global[8] = global[8] + 1 | 0; return;
      case 8:
       global[9] = global[9] + 1 | 0; return;
      case 9:
       global[10] = global[10] + 1 | 0; return;
      case 10:
       global[11] = global[11] + 1 | 0; return;
      case 11:
       global[12] = global[12] + 1 | 0; return;
      case 12:
       global[13] = global[13] + 1 | 0; return;
      default: global[14] = global[14] + 1 | 0; return;
    }
   }
   function annotate_packed$0(kind, incr$0){
    incr(kind);
    var _K_ = enabled[1];
    return _K_ ? caml_call2(annotate_packed, kind, incr$0) : _K_;
   }
   function annotate(kind, incr$0){
    incr(kind);
    var _J_ = enabled[1];
    return _J_
            ? annotate_packed$0(kind, caml_call1(Ui_incr[75], incr$0))
            : _J_;
   }
   function attribute_packed(pos_opt, t){
    if(enabled[1] && pos_opt){
     var
      pos$0 = pos_opt[1],
      _F_ = caml_call1(Core_Source_code_position[4], pos$0),
      _G_ = caml_call2(Core_String[95], _F_, cst_lib),
      pos = caml_call2(Core_String[95], _G_, cst_app),
      match = caml_call2(Core_String[77], pos, 47);
     if(match)
      var
       match$0 = match[1],
       r = match$0[2],
       l = match$0[1],
       _H_ = [0, caml_call2(Core[18], cst_bound, r), 0],
       labels = [0, caml_call2(Core[18], cst_bound$0, l), _H_];
     else
      var labels = [0, pos, 0];
     var
      _I_ =
        function(label){
         var label$0 = [0, label, 0];
         return caml_call3(Ui_incr[74][3], t, label$0, empty_attrs);
        };
     return caml_call2(Core_List[19], labels, _I_);
    }
    return 0;
   }
   function attribute(pos_opt, incr){
    var _E_ = enabled[1];
    return _E_
            ? attribute_packed(pos_opt, caml_call1(Ui_incr[75], incr))
            : _E_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Annotate_incr);
   var
    Bonsai_Annotate_incr =
      [0,
       enable,
       disable,
       [0],
       [0, sexp_of_t$0, current, diff],
       annotate,
       annotate_packed$0,
       attribute,
       attribute_packed];
   runtime.caml_register_global
    (140, Bonsai_Annotate_incr, cst_Bonsai_Annotate_incr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Apply_action_context
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Apply_action_contex$0 = "Bonsai__Apply_action_context",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Apply_action_contex$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/apply_action_context.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "apply_action_context.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Apply_action_contex = cst_Bonsai_Apply_action_contex$0;
   function inject(param, action){
    var inject = param[1];
    return caml_call1(inject, action);
   }
   function schedule_event(param, event){
    var schedule_event = param[2];
    return caml_call1(schedule_event, event);
   }
   function create(inject, schedule_event){return [0, inject, schedule_event];
   }
   function reveal(_a_){return _a_;}
   var Private = [0, reveal];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Apply_action_contex);
   var
    Bonsai_Apply_action_context = [0, inject, schedule_event, create, Private];
   runtime.caml_register_global
    (11, Bonsai_Apply_action_context, cst_Bonsai_Apply_action_contex$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Module_types
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Module_types = "Bonsai__Module_types",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Module_types);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/module_types.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "module_types.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Module_types);
   var Bonsai_Module_types = [0];
   runtime.caml_register_global
    (11, Bonsai_Module_types, cst_Bonsai_Module_types);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import
//# unitInfo: Requires: Bonsai__Annotate_incr, Bonsai__Module_types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_effect, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Import$0 = "Bonsai__Import",
    cst_bonsai$0 = "bonsai",
    cst_src_import_ml = "src/import.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Match_failure = global_data.Match_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr,
    Ui_incr = global_data.Ui_incr,
    Ui_effect = global_data.Ui_effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_import_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "import.ml");
   var
    enable = Bonsai_Annotate_incr[1],
    disable = Bonsai_Annotate_incr[2],
    Kind = Bonsai_Annotate_incr[3],
    Counts = Bonsai_Annotate_incr[4],
    annotate = Bonsai_Annotate_incr[5],
    annotate_packed = Bonsai_Annotate_incr[6],
    attribute = Bonsai_Annotate_incr[7],
    attribute_packed = Bonsai_Annotate_incr[8],
    _a_ = [0, cst_src_import_ml, 7, 64],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Import = cst_Bonsai_Import$0;
   function unreachable_action(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _a_], 1);
   }
   function unusable_apply_action(param, _d_, input, model){return unreachable_action;
   }
   function reset_unit_model(param, _c_, _b_){return 0;}
   var
    unit_model = caml_call1(Ui_incr[11], 0),
    ignore_effect = caml_call1(Ui_incr[11], Ui_effect[1]);
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Import);
   var
    Bonsai_Import =
      [0,
       enable,
       disable,
       Kind,
       Counts,
       annotate,
       annotate_packed,
       attribute,
       attribute_packed,
       unreachable_action,
       unusable_apply_action,
       reset_unit_model,
       unit_model,
       ignore_effect];
   runtime.caml_register_global(16, Bonsai_Import, cst_Bonsai_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Environment
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Environment$0 = "Bonsai__Environment",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ui_incr = global_data.Ui_incr,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Environment$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/environment.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "environment.ml");
   var
    _a_ = [0, Ui_incr[5]],
    include = caml_call1(caml_call1(Univ_map[26], Univ_map[1]), _a_),
    empty = include[4],
    find = include[10],
    add_exn = include[13],
    update = include[16],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Environment = cst_Bonsai_Environment$0;
   function add_overwriting(t, key, data){
    return caml_call3(update, t, key, function(param){return data;});
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Environment);
   var Bonsai_Environment = [0, empty, add_exn, add_overwriting, find];
   runtime.caml_register_global
    (13, Bonsai_Environment, cst_Bonsai_Environment$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Keyed
//# unitInfo: Requires: Core__Comparable, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Keyed$0 = "Bonsai__Keyed",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Keyed$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/keyed.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "keyed.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Keyed = cst_Bonsai_Keyed$0;
   function compare(param, _a_){
    var
     id2 = _a_[2],
     key2 = _a_[1],
     compare1 = param[3],
     id1 = param[2],
     key1 = param[1];
    if(caml_call2(Core_Type_equal[8][9], id1, id2))
     return caml_call2(compare1, key1, key2);
    var
     _b_ = caml_call1(Core_Type_equal[8][2], id2),
     _c_ = caml_call1(Core_Type_equal[8][2], id1);
    return caml_call2(Core_Type_equal[8][11][23], _c_, _b_);
   }
   function sexp_of_t(param){
    var id = param[2], key = param[1];
    return caml_call2(Core_Type_equal[8][6], id, key);
   }
   function create(key, id, compare){return [0, key, id, compare];}
   var
    include = caml_call1(Core_Comparable[11], [0, compare, sexp_of_t]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Keyed);
   var
    Bonsai_Keyed =
      [0,
       sexp_of_t,
       create,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set];
   runtime.caml_register_global(13, Bonsai_Keyed, cst_Bonsai_Keyed$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Stabilization_tracker
//# unitInfo: Requires: Bonsai__Action, Bonsai__Keyed, Core, Core__Int, Core__Map, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Stabilization_track$0 = "Bonsai__Stabilization_tracker",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Ui_incr = global_data.Ui_incr,
    Core_Map = global_data.Core__Map,
    Core_Option = global_data.Core__Option,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Keyed = global_data.Bonsai__Keyed,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Stabilization_track$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/stabilization_tracker.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_bonsai$0, "stabilization_tracker.ml");
   var
    cst_stabilized = "stabilized",
    cst_skipped_stabilization = "skipped stabilization",
    _a_ = [0, "branches_pruned"],
    _b_ = [0, "prunes_run"],
    _c_ = [0, "stabilizations_skipped"],
    _d_ = [0, "stabilizations_caused_by_var_changes"],
    _e_ = [0, "stabilizations_before_actions"],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Stabilization_track = cst_Bonsai_Stabilization_track$0;
   function incr_don_t_stabilize(t){t[2] = t[2] + 1 | 0; return;}
   var dirty_incremental_vars = [0, 0];
   function mark_incremental_dirty(param){
    dirty_incremental_vars[1] = 1;
    return 0;
   }
   var next = Core_Int[25], initial = 0, num_generations_for_pruning = 2700;
   function with_empty_generation(inner){return [0, -1, inner];}
   function empty(param){return with_empty_generation(0);}
   function traverse(initial_state, traverser){
    return function(action$1, t$0){
     var state = initial_state, action = action$1, t = t$0;
     for(;;){
      var match = t[2];
      if(typeof match === "number"){
       if(0 === match) return caml_call3(traverser[1], state, t, action);
       if(typeof action !== "number" && 1 === action[0])
        return caml_call1(traverser[2], state);
       return caml_call1(traverser[3], state);
      }
      switch(match[0]){
        case 0:
         var
          into = match[2],
          from = match[1],
          state$0 = caml_call4(traverser[4], state, from, into, action);
         if(typeof action !== "number" && 3 === action[0]){
          var
           into_action = action[1],
           state = state$0,
           action = into_action,
           t = into;
          break;
         }
         var
          from_action = action[1],
          state = state$0,
          action = from_action,
          t = from;
         break;
        case 1:
         var
          inner = match[2],
          outer = match[1],
          state$1 = caml_call4(traverser[5], state, inner, outer, action);
         if(typeof action !== "number" && 5 === action[0])
          return caml_call1(traverser[2], state$1);
         var
          inner_action = action[1],
          state = state$1,
          action = inner_action,
          t = inner;
         break;
        case 2:
         var
          inner$0 = match[2],
          outer$0 = match[1],
          state$2 = caml_call4(traverser[6], state, inner$0, outer$0, action);
         if(typeof action === "number")
          return caml_call1(traverser[3], state$2);
         var
          inner_action$0 = action[1],
          state = state$2,
          action = inner_action$0,
          t = inner$0;
         break;
        case 3:
         var
          match$0 = match[1],
          type_id = match$0[2],
          inner$1 = match$0[1],
          action_type_id = action[2],
          action$0 = action[1];
         caml_call2(Bonsai_Action[1][11], type_id, action_type_id);
         var
          state$3 = caml_call3(traverser[7], state, inner$1, action$0),
          state = state$3,
          action = action$0,
          t = inner$1;
         break;
        case 4:
         var
          assoc = match[1],
          compare = action[4],
          id = action[3],
          inner_action$1 = action[2],
          key = action[1],
          keyed = caml_call3(Bonsai_Keyed[2], key, id, compare),
          state$4 = caml_call4(traverser[8], state, assoc, keyed, action),
          match$1 = caml_call2(Core_Map[44], assoc[1], keyed);
         if(! match$1){
          var empty$0 = empty(0);
          assoc[1] = caml_call3(Core_Map[38], assoc[1], keyed, empty$0);
          return caml_call3(traverser[1], state$4, empty$0, inner_action$1);
         }
         var
          inner$2 = match$1[1],
          state = state$4,
          action = inner_action$1,
          t = inner$2;
         break;
        case 5:
         var
          assoc_on = match[1],
          io_compare = action[5],
          io_id = action[4],
          inner_action$2 = action[3],
          io_key = action[1],
          keyed$0 = caml_call3(Bonsai_Keyed[2], io_key, io_id, io_compare),
          state$5 = caml_call4(traverser[9], state, assoc_on, keyed$0, action),
          match$2 = caml_call2(Core_Map[44], assoc_on[1], keyed$0);
         if(! match$2){
          var empty$1 = empty(0);
          assoc_on[1] =
           caml_call3(Core_Map[38], assoc_on[1], keyed$0, empty$1);
          return caml_call3(traverser[1], state$5, empty$1, inner_action$2);
         }
         var
          inner$3 = match$2[1],
          state = state$5,
          action = inner_action$2,
          t = inner$3;
         break;
        default:
         var
          switch$0 = match[1],
          action_type_id$0 = action[3],
          inner_action$3 = action[2],
          branch = action[1],
          state$6 = caml_call4(traverser[10], state, switch$0, branch, action),
          match$3 = caml_call2(Core_Map[44], switch$0[1], branch);
         if(! match$3){
          var empty$2 = empty(0);
          switch$0[1] =
           caml_call3
            (Core_Map[38],
             switch$0[1],
             branch,
             [0, empty$2, action_type_id$0]);
          return caml_call3(traverser[1], state$6, empty$2, inner_action$3);
         }
         var
          match$4 = match$3[1],
          type_id$0 = match$4[2],
          inner$4 = match$4[1];
         caml_call2(Bonsai_Action[1][11], type_id$0, action_type_id$0);
         var state = state$6, action = inner_action$3, t = inner$4;
      }
     }};
   }
   function should_stabilize_dynamic_actio(stats, found_conflict){
    if(dirty_incremental_vars[1]) stats[3] = stats[3] + 1 | 0;
    var
     _aa_ = dirty_incremental_vars[1],
     should_stabilize = _aa_ || found_conflict;
    if(should_stabilize)
     stats[1] = stats[1] + 1 | 0;
    else
     incr_don_t_stabilize(stats);
    return should_stabilize;
   }
   function current(param){
    var state = Ui_incr[4][3];
    return [0, caml_call1(Ui_incr[4][19], state)];
   }
   function empty$0(param){
    var _$_ = current(0);
    return [0, empty(0), [0, 0, 0, 0, 0, 0], initial, _$_, initial, 0];
   }
   function mark_stabilization(t){
    dirty_incremental_vars[1] = 0;
    t[3] = caml_call1(next, t[3]);
    t[4] = current(0);
    return 0;
   }
   function requires_stabilization(t, action){
    var
     b_002 = t[4],
     a_001 = current(0),
     _N_ = a_001 === b_002 ? 1 : caml_call2(Core[384], a_001[1], b_002[1]);
    if(1 - _N_) mark_incremental_dirty(0);
    var stats = t[2], current_generation = t[3], _O_ = t[1];
    function sub_requires_stabilization(state, from, param, ___){
     if(typeof ___ !== "number" && 3 === ___[0])
      return state ? state : caml_call2(Core[90], from[1], current_generation);
     return state;
    }
    function wrap_requires_stabilization(state, inner, outer, param){
     if(typeof param !== "number" && 5 === param[0]){
      if(state)
       var state$0 = state;
      else{
       var _Z_ = caml_call2(Core[90], outer[1], current_generation);
       if(! _Z_) return caml_call2(Core[90], inner[1], current_generation);
       var state$0 = _Z_;
      }
      return state$0;
     }
     return state ? state : caml_call2(Core[90], outer[1], current_generation);
    }
    function model_reset_requires_stabiliza(state, param, outer, _Y_){
     return typeof _Y_ === "number"
             ? state
             : state
               ? state
               : caml_call2(Core[90], outer[1], current_generation);
    }
    function don_t_stabilize(param){incr_don_t_stabilize(stats); return 0;}
    function _H_(state, param, _X_, _W_){return state;}
    function _I_(state, param, _V_, _U_){return state;}
    function _J_(state, param, _T_, _S_){return state;}
    function _K_(state, param, _R_){return state;}
    function _L_(param){return don_t_stabilize(0);}
    function _M_(_Q_){return should_stabilize_dynamic_actio(stats, _Q_);}
    var
     traverser =
       [0,
        function(state, empty, action$7){
         var param = action$7;
         for(;;){
          if(typeof param === "number")
           var _P_ = 0;
          else
           switch(param[0]){
             case 0:
              var _P_ = 0; break;
             case 1:
              var _P_ = 1; break;
             case 2:
              var action = param[1], param = action; continue;
             case 3:
              var action$0 = param[1], param = action$0; continue;
             case 4:
              var action$1 = param[1], param = action$1; continue;
             case 5:
              var _P_ = 1; break;
             case 6:
              var action$2 = param[1], param = action$2; continue;
             case 7:
              var action$3 = param[2], param = action$3; continue;
             case 8:
              var action$4 = param[1], param = action$4; continue;
             case 9:
              var action$5 = param[2], param = action$5; continue;
             default: var action$6 = param[3], param = action$6; continue;
           }
          return _P_
                  ? should_stabilize_dynamic_actio(stats, state)
                  : don_t_stabilize(0);
         }
        },
        _M_,
        _L_,
        sub_requires_stabilization,
        wrap_requires_stabilization,
        model_reset_requires_stabiliza,
        _K_,
        _J_,
        _I_,
        _H_],
     requires_stabilization = traverse(0, traverser)(action, _O_);
    if(t[6])
     if(requires_stabilization)
      caml_call1(Core[32], cst_stabilized);
     else
      caml_call1(Core[32], cst_skipped_stabilization);
    return requires_stabilization;
   }
   function insert(t$1, action){
    var t$2 = t$1[1], current_generation$0 = t$1[3];
    function insert_unexplored(param, empty$0, action){
     function with_current_generation(inner){
      return [0, current_generation$0, inner];
     }
     function node_of_action(param){
      if(typeof param !== "number")
       switch(param[0]){
         case 0:
          return 1;
         case 1:
          return 1;
         case 2:
          var
           from = param[1],
           from$0 = with_current_generation(node_of_action(from));
          return [0, from$0, empty(0)];
         case 3:
          var
           into = param[1],
           into$0 = with_current_generation(node_of_action(into));
          return [0, empty(0), into$0];
         case 4:
          var
           inner = param[1],
           inner$0 = with_current_generation(node_of_action(inner));
          return [1, with_empty_generation(0), inner$0];
         case 5:
          var _E_ = empty(0); return [1, with_current_generation(0), _E_];
         case 6:
          var
           inner$1 = param[1],
           inner$2 = with_current_generation(node_of_action(inner$1));
          return [2, with_empty_generation(0), inner$2];
         case 7:
          var
           type_id = param[3],
           action = param[2],
           branch = param[1],
           inner$3 = with_current_generation(node_of_action(action)),
           inner$4 = [0, inner$3, type_id];
          return [6, [0, caml_call2(Core_Int[98][6], branch, inner$4)]];
         case 8:
          var
           type_id$0 = param[2],
           action$0 = param[1],
           inner$5 = with_current_generation(node_of_action(action$0));
          return [3, [0, inner$5, type_id$0]];
         case 9:
          var
           compare = param[4],
           id = param[3],
           action$1 = param[2],
           key = param[1],
           inner$6 = with_current_generation(node_of_action(action$1)),
           _F_ = caml_call3(Bonsai_Keyed[2], key, id, compare);
          return [4, [0, caml_call2(Bonsai_Keyed[23][6], _F_, inner$6)]];
         default:
          var
           io_compare = param[5],
           io_id = param[4],
           action$2 = param[3],
           io_key = param[1],
           inner$7 = with_current_generation(node_of_action(action$2)),
           _G_ = caml_call3(Bonsai_Keyed[2], io_key, io_id, io_compare);
          return [5, [0, caml_call2(Bonsai_Keyed[23][6], _G_, inner$7)]];
       }
      var _D_ = empty(0);
      return [2, with_current_generation(0), _D_];
     }
     empty$0[2] = node_of_action(action);
     return 0;
    }
    function insert_sub(param, from, into, _C_){
     if(typeof _C_ !== "number" && 3 === _C_[0]){into[1] = current_generation$0; return 0;}
     from[1] = current_generation$0;
     return 0;
    }
    function insert_wrap(param, inner, outer, _B_){
     if(typeof _B_ !== "number" && 5 === _B_[0]){outer[1] = current_generation$0; return 0;
     }
     inner[1] = current_generation$0;
     return 0;
    }
    function insert_model_reset(param, inner, outer, _A_){
     return typeof _A_ === "number"
             ? (outer[1] = current_generation$0, 0)
             : (inner[1] = current_generation$0, 0);
    }
    function iter_data(m, key, f){
     var _z_ = caml_call2(Core_Map[44], m, key);
     return caml_call2(Core_Option[46], _z_, f);
    }
    function _k_(param, switch$0, branch, action){
     function _y_(param){
      var inner = param[1];
      inner[1] = current_generation$0;
      return 0;
     }
     return iter_data(switch$0[1], branch, _y_);
    }
    function _l_(param, assoc_on, key, action){
     function _x_(inner){inner[1] = current_generation$0; return 0;}
     return iter_data(assoc_on[1], key, _x_);
    }
    function _m_(param, assoc, key, action){
     function _w_(inner){inner[1] = current_generation$0; return 0;}
     return iter_data(assoc[1], key, _w_);
    }
    function _n_(param, inner, _v_){
     inner[1] = current_generation$0;
     return 0;
    }
    function _o_(param){return 0;}
    var
     traverser =
       [0,
        insert_unexplored,
        function(param){return 0;},
        _o_,
        insert_sub,
        insert_wrap,
        insert_model_reset,
        _n_,
        _m_,
        _l_,
        _k_];
    traverse(0, traverser)(action, t$2);
    var _p_ = caml_call2(Core[88], t$1[3], t$1[5] + 2700 | 0);
    if(_p_){
     var t = t$1[2];
     t[4] = t[4] + 1 | 0;
     var
      t$0 = t$1[1],
      current_generation = t$1[3],
      loop =
        function(t){
         var t$0 = t;
         for(;;){
          var
           filter_and_loop_via_fold =
             function(m, f){
              function _u_(key, data, map){
               var
                inner = caml_call1(f, data),
                generation = inner[1],
                should_prune =
                  caml_call2
                   (Core[89], generation, current_generation - 2700 | 0);
               if(should_prune){var t = t$1[2]; t[5] = t[5] + 1 | 0;}
               return should_prune
                       ? caml_call2(Core_Map[47], map, key)
                       : (loop(inner), map);
              }
              return caml_call3(Core_Map[61], m, m, _u_);
             },
           match = t$0[2];
          if(typeof match === "number"){if(0 === match) return; return;}
          switch(match[0]){
            case 0:
             var into = match[2], from = match[1];
             loop(from);
             var t$0 = into;
             break;
            case 1:
             var inner = match[2], t$0 = inner; break;
            case 2:
             var inner$0 = match[2], t$0 = inner$0; break;
            case 3:
             var inner$1 = match[1][1], t$0 = inner$1; break;
            case 4:
             var assoc = match[1], _r_ = function(inner){return inner;};
             assoc[1] = filter_and_loop_via_fold(assoc[1], _r_);
             return;
            case 5:
             var assoc_on = match[1], _s_ = function(inner){return inner;};
             assoc_on[1] = filter_and_loop_via_fold(assoc_on[1], _s_);
             return;
            default:
             var
              switch$0 = match[1],
              _t_ = function(param){var inner = param[1]; return inner;};
             switch$0[1] = filter_and_loop_via_fold(switch$0[1], _t_);
             return;
          }
         }
        };
     loop(t$0);
     t$1[5] = t$1[3];
     var _q_ = 0;
    }
    else
     var _q_ = _p_;
    return _q_;
   }
   function start_debugging(t){t[6] = 1; return 0;}
   function display_stats(t){
    var
     t$0 = t[2],
     _f_ = [0, [1, [0, _a_, [0, caml_call1(Core[389], t$0[5]), 0]]], 0],
     _g_ = [0, [1, [0, _b_, [0, caml_call1(Core[389], t$0[4]), 0]]], _f_],
     _h_ = [0, [1, [0, _c_, [0, caml_call1(Core[389], t$0[2]), 0]]], _g_],
     _i_ = [0, [1, [0, _d_, [0, caml_call1(Core[389], t$0[3]), 0]]], _h_],
     _j_ = [1, [0, [1, [0, _e_, [0, caml_call1(Core[389], t$0[1]), 0]]], _i_]];
    return caml_call2(Core[256], 0, _j_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Stabilization_track);
   var
    Bonsai_Stabilization_tracker =
      [0,
       empty$0,
       insert,
       requires_stabilization,
       mark_incremental_dirty,
       mark_stabilization,
       [0, [0], start_debugging, num_generations_for_pruning, display_stats]];
   runtime.caml_register_global
    (25, Bonsai_Stabilization_tracker, cst_Bonsai_Stabilization_track$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Value
//# unitInfo: Requires: Base__Applicative, Bonsai__Environment, Bonsai__Import, Core, Core__Option, Core__Source_code_position, Core__Type_equal, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Value$0 = "Bonsai__Value",
    cst_bonsai$0 = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Bonsai_Import = global_data.Bonsai__Import,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Value$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/value.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "value.ml");
   var
    cst_was_used_outside_of_the_sc =
      " was used outside of the scope that it was declared in. Make sure that you aren't storing it inside a ref.",
    cst_incr = "incr",
    cst_map7 = "map7",
    cst_map6 = "map6",
    cst_map5 = "map5",
    cst_map4 = "map4",
    cst_map3 = "map3",
    cst_both = "both",
    cst_return_exn = "return exn",
    cst_return = "return",
    cst_cutoff = "cutoff",
    cst_map = "map",
    cst_map2 = "map2",
    cst_The_Value_t_for_the_key_in =
      "The Value.t for the key introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_Value_t_for_the_data_i =
      "The Value.t for the data introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_name_for_the_model_int =
      "The name for the model introduced within a [Bonsai.wrap] computation",
    cst_The_Value_t_for_the_inject =
      "The Value.t for the injection function introduced within a [Bonsai.wrap] computation",
    cst_The_app_input_Value_t = "The app input Value.t",
    cst_A_model_resetter = "A model resetter",
    _a_ = [0, "TEST_FILENAME", 0, 0, 0],
    cst_A_Value_t_introduced_by_th =
      "A Value.t introduced by the [let%sub] expression at ",
    cst_A_Value_t_introduced_by_so =
      "A Value.t introduced by some [let%sub] expression",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Value = cst_Bonsai_Value$0;
   function value_id(name){
    return caml_call2(Core_Type_equal[8][3], name, Core[149]);
   }
   function map2(t1, t2, f){
    return [0, [6, t1, t2, f], 0, value_id(cst_map2)];
   }
   function _b_(t, f){return [0, [5, t, f], 0, value_id(cst_map)];}
   function named(name_source, id){return [0, [2, name_source], 0, id];}
   function cutoff(added_by_let_syntax, t, equal){
    var value = [4, t, equal, added_by_let_syntax];
    return [0, value, 0, value_id(cst_cutoff)];
   }
   function _c_(env, param){
    var id = param[3], value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return caml_call1(Ui_incr[11], x);
      case 1:
       var x$0 = value[1]; return x$0;
      case 2:
       var
        name_source = value[1],
        match = caml_call2(Bonsai_Environment[4], env, id);
       if(match){var incremental = match[1]; return incremental;}
       var
        _q_ =
          [0,
           caml_call1
            (Ppx_string_runtime[1][2], cst_was_used_outside_of_the_sc),
           0];
       if(typeof name_source === "number")
        switch(name_source){
          case 0:
           var _r_ = cst_The_Value_t_for_the_key_in; break;
          case 1:
           var _r_ = cst_The_Value_t_for_the_data_i; break;
          case 2:
           var _r_ = cst_The_name_for_the_model_int; break;
          case 3:
           var _r_ = cst_The_Value_t_for_the_inject; break;
          case 4:
           var _r_ = cst_The_app_input_Value_t; break;
          default: var _r_ = cst_A_model_resetter;
        }
       else{
        var here = name_source[1];
        if(here)
         var
          here$0 = here[1],
          here$1 = Core[628] ? _a_ : here$0,
          _n_ = caml_call1(Core_Source_code_position[4], here$1),
          _o_ = [0, caml_call1(Ppx_string_runtime[1][3], _n_), 0],
          _p_ =
            [0,
             caml_call1
              (Ppx_string_runtime[1][2], cst_A_Value_t_introduced_by_th),
             _o_],
          _r_ = caml_call1(Ppx_string_runtime[1][4], _p_);
        else
         var _r_ = cst_A_Value_t_introduced_by_so;
       }
       var
        _s_ = [0, caml_call1(Ppx_string_runtime[1][3], _r_), _q_],
        _t_ = caml_call1(Ppx_string_runtime[1][4], _s_),
        _u_ = caml_call1(Sexplib0_Sexp_conv[7], _t_);
       return caml_call1(Core[261], _u_);
      case 3:
       var
        t2 = value[2],
        t1 = value[1],
        _v_ = _c_(env, t2),
        _w_ = _c_(env, t1);
       return caml_call2(Ui_incr[42], _w_, _v_);
      case 4:
       var equal = value[2], t = value[1], incremental_node = _c_(env, t);
       switch(t[1][0]){
         case 1:
         case 2:
         case 4:
          var
           _y_ = function(_ab_){return _ab_;},
           incremental_node$0 = caml_call2(Ui_incr[12], incremental_node, _y_);
          break;
         default: var incremental_node$0 = incremental_node;
       }
       var _x_ = caml_call1(Incremental[58][5], equal);
       caml_call2(Incremental[59], incremental_node$0, _x_);
       return incremental_node$0;
      case 5:
       var f = value[2], t$0 = value[1], _z_ = _c_(env, t$0);
       return caml_call2(Ui_incr[12], _z_, f);
      case 6:
       var
        f$0 = value[3],
        t2$0 = value[2],
        t1$0 = value[1],
        _A_ = _c_(env, t2$0),
        _B_ = _c_(env, t1$0);
       return caml_call3(Ui_incr[14], _B_, _A_, f$0);
      case 7:
       var
        f$1 = value[4],
        t3 = value[3],
        t2$1 = value[2],
        t1$1 = value[1],
        _C_ = _c_(env, t3),
        _D_ = _c_(env, t2$1),
        _E_ = _c_(env, t1$1);
       return caml_call4(Ui_incr[15], _E_, _D_, _C_, f$1);
      case 8:
       var
        f$2 = value[5],
        t4 = value[4],
        t3$0 = value[3],
        t2$2 = value[2],
        t1$2 = value[1],
        _F_ = _c_(env, t4),
        _G_ = _c_(env, t3$0),
        _H_ = _c_(env, t2$2),
        _I_ = _c_(env, t1$2);
       return caml_call5(Ui_incr[16], _I_, _H_, _G_, _F_, f$2);
      case 9:
       var
        f$3 = value[6],
        t5 = value[5],
        t4$0 = value[4],
        t3$1 = value[3],
        t2$3 = value[2],
        t1$3 = value[1],
        _J_ = _c_(env, t5),
        _K_ = _c_(env, t4$0),
        _L_ = _c_(env, t3$1),
        _M_ = _c_(env, t2$3),
        _N_ = _c_(env, t1$3);
       return caml_call6(Ui_incr[17], _N_, _M_, _L_, _K_, _J_, f$3);
      case 10:
       var
        f$4 = value[7],
        t6 = value[6],
        t5$0 = value[5],
        t4$1 = value[4],
        t3$2 = value[3],
        t2$4 = value[2],
        t1$4 = value[1],
        _O_ = _c_(env, t6),
        _P_ = _c_(env, t5$0),
        _Q_ = _c_(env, t4$1),
        _R_ = _c_(env, t3$2),
        _S_ = _c_(env, t2$4),
        _T_ = _c_(env, t1$4);
       return caml_call7(Ui_incr[18], _T_, _S_, _R_, _Q_, _P_, _O_, f$4);
      case 11:
       var
        f$5 = value[8],
        t7 = value[7],
        t6$0 = value[6],
        t5$1 = value[5],
        t4$2 = value[4],
        t3$3 = value[3],
        t2$5 = value[2],
        t1$5 = value[1],
        _U_ = _c_(env, t7),
        _V_ = _c_(env, t6$0),
        _W_ = _c_(env, t5$1),
        _X_ = _c_(env, t4$2),
        _Y_ = _c_(env, t3$3),
        _Z_ = _c_(env, t2$5),
        ___ = _c_(env, t1$5);
       return caml_call8(Ui_incr[19], ___, _Z_, _Y_, _X_, _W_, _V_, _U_, f$5);
      default:
       var
        ex = value[1],
        _$_ = function(param){throw caml_maybe_attach_backtrace(ex, 0);},
        _aa_ = caml_call1(Ui_incr[11], 0);
       return caml_call2(Ui_incr[12], _aa_, _$_);
    }
   }
   function eval$0(env, t){
    var incr = _c_(env, t);
    caml_call2(Bonsai_Import[5], 1, incr);
    return incr;
   }
   function return$0(a){return [0, [0, a], 0, value_id(cst_return)];}
   function return_exn(exn){
    return [0, [12, exn], 0, value_id(cst_return_exn)];
   }
   function transpose_opt(opt){
    var _j_ = Core_Option[58];
    function _k_(_m_){return _b_(_m_, _j_);}
    var _l_ = return$0(0);
    return caml_call3(Core_Option[41], opt, _l_, _k_);
   }
   var
    map = [0, -198771759, _b_],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    all_unit = include[12],
    Applicative_infix = include[13];
   function both(a, b){return [0, [3, a, b], 0, value_id(cst_both)];}
   function map3(t1, t2, t3, f){
    return [0, [7, t1, t2, t3, f], 0, value_id(cst_map3)];
   }
   function map4(t1, t2, t3, t4, f){
    return [0, [8, t1, t2, t3, t4, f], 0, value_id(cst_map4)];
   }
   function map5(t1, t2, t3, t4, t5, f){
    return [0, [9, t1, t2, t3, t4, t5, f], 0, value_id(cst_map5)];
   }
   function map6(t1, t2, t3, t4, t5, t6, f){
    return [0, [10, t1, t2, t3, t4, t5, t6, f], 0, value_id(cst_map6)];
   }
   function map7(t1, t2, t3, t4, t5, t6, t7, f){
    return [0, [11, t1, t2, t3, t4, t5, t6, t7, f], 0, value_id(cst_map7)];
   }
   function all(param){
    if(! param) return caml_call1(return$1, 0);
    var _d_ = param[2], t1 = param[1];
    if(! _d_) return caml_call2(map$0, t1, function(a1){return [0, a1, 0];});
    var _e_ = _d_[2], t2 = _d_[1];
    if(! _e_)
     return caml_call3
             (map2$0, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _f_ = _e_[2], t3 = _e_[1];
    if(! _f_)
     return map3
             (t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _g_ = _f_[2], t4 = _f_[1];
    if(! _g_)
     return map4
             (t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _h_ = _g_[2], t5 = _g_[1];
    if(! _h_)
     return map5
             (t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _i_ = _h_[2], t6 = _h_[1];
    if(! _i_)
     return map6
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _i_[1];
    if(! _i_[2])
     return map7
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _i_[2],
     left =
       map7
        (t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$0,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function of_incr(x){return [0, [1, x], 0, value_id(cst_incr)];}
   var
    Open_on_rhs_intf = [0],
    symbol$2 = Applicative_infix[1],
    symbol$3 = Applicative_infix[2],
    symbol$4 = Applicative_infix[3],
    symbol_map$0 = Applicative_infix[4],
    Open_on_rhs = [0],
    Let_syntax = [0, return$1, map$0, both, Open_on_rhs],
    Let_syntax$0 =
      [0, return$1, symbol$2, symbol$3, symbol$4, symbol_map$0, Let_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Value);
   var
    Bonsai_Value =
      [0,
       [0],
       return$1,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       all,
       all_unit,
       Applicative_infix,
       Open_on_rhs_intf,
       Let_syntax$0,
       map3,
       map4,
       map5,
       map6,
       map7,
       named,
       cutoff,
       eval$0,
       of_incr,
       return_exn,
       transpose_opt];
   runtime.caml_register_global(44, Bonsai_Value, cst_Bonsai_Value$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Var
//# unitInfo: Requires: Bonsai__Stabilization_tracker, Bonsai__Value, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Var$0 = "Bonsai__Var",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Stabilization_tracker = global_data.Bonsai__Stabilization_tracker,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Var$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/var.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "var.ml");
   var
    cst_Bonsai_Var_mutated_during_ =
      "Bonsai.Var mutated during the computation of a Bonsai value",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Var = cst_Bonsai_Var$0;
   function create(x){return caml_call2(Ui_incr[53][2], 0, x);}
   function set(t, v){
    caml_call1(Bonsai_Stabilization_tracker[4], 0);
    if(caml_call1(Ui_incr[59], 0))
     caml_call1(Core[6], cst_Bonsai_Var_mutated_during_);
    return caml_call2(Ui_incr[53][3], t, v);
   }
   function update(t, f){
    var old = caml_call1(Ui_incr[53][5], t);
    return set(t, caml_call1(f, old));
   }
   function get(t){return caml_call1(Ui_incr[53][5], t);}
   function value(t){
    var _b_ = caml_call1(Ui_incr[53][4], t);
    return caml_call1(Bonsai_Value[24], _b_);
   }
   function incr_var(_a_){return _a_;}
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Var);
   var Bonsai_Var = [0, create, update, set, get, value, incr_var];
   runtime.caml_register_global(16, Bonsai_Var, cst_Bonsai_Var$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Input
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Input$0 = "Bonsai__Input",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    static$0 = [1, 0],
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Input$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/input.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "input.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Input = cst_Bonsai_Input$0;
   function dynamic(input){return [0, input];}
   function map(t, f){
    switch(t[0]){
      case 0:
       var input = t[1]; return [0, caml_call2(Ui_incr[12], input, f)];
      case 1:
       var input$0 = t[1]; return [1, caml_call1(f, input$0)];
      default:
       var g = t[2], input$1 = t[1];
       return [2,
               input$1,
               function(x){return caml_call1(f, caml_call1(g, x));}];
    }
   }
   function iter_incremental(t, f){
    switch(t[0]){
      case 0:
       var incr = t[1]; return caml_call1(f, caml_call1(Ui_incr[75], incr));
      case 1:
       return 0;
      default:
       var incr$0 = t[1];
       return caml_call1(f, caml_call1(Ui_incr[75], incr$0));
    }
   }
   function to_incremental(param){
    switch(param[0]){
      case 0:
       var input = param[1]; return input;
      case 1:
       var input$0 = param[1]; return caml_call1(Ui_incr[11], input$0);
      default:
       var f = param[2], incr = param[1];
       return caml_call2(Ui_incr[12], incr, f);
    }
   }
   function merge(a, b){
    switch(a[0]){
      case 0:
       var a$0 = a[1];
       switch(b[0]){
         case 0:
          var b$0 = b[1]; return [0, caml_call2(Ui_incr[42], a$0, b$0)];
         case 1:
          var b$1 = b[1]; return [2, a$0, function(a){return [0, a, b$1];}];
         default:
          var
           f = b[2],
           b$2 = b[1],
           _a_ =
             function(param){
              var b = param[2], a = param[1];
              return [0, a, caml_call1(f, b)];
             };
          return [2, caml_call2(Ui_incr[42], a$0, b$2), _a_];
       }
      case 1:
       var a$1 = a[1];
       switch(b[0]){
         case 0:
          var b$3 = b[1]; return [2, b$3, function(b){return [0, a$1, b];}];
         case 1:
          var b$4 = b[1]; return [1, [0, a$1, b$4]];
         default:
          var f$0 = b[2], b$5 = b[1];
          return [2, b$5, function(b){return [0, a$1, caml_call1(f$0, b)];}];
       }
      default:
       var f$1 = a[2], a$2 = a[1];
       switch(b[0]){
         case 0:
          var
           b$6 = b[1],
           _b_ =
             function(param){
              var b = param[2], a = param[1];
              return [0, caml_call1(f$1, a), b];
             };
          return [2, caml_call2(Ui_incr[42], a$2, b$6), _b_];
         case 1:
          var b$7 = b[1];
          return [2, a$2, function(a){return [0, caml_call1(f$1, a), b$7];}];
         default:
          var
           g = b[2],
           b$8 = b[1],
           _c_ =
             function(param){
              var b = param[2], a = param[1], _d_ = caml_call1(g, b);
              return [0, caml_call1(f$1, a), _d_];
             };
          return [2, caml_call2(Ui_incr[42], a$2, b$8), _c_];
       }
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Input);
   var
    Bonsai_Input =
      [0, dynamic, static$0, to_incremental, merge, map, iter_incremental];
   runtime.caml_register_global(13, Bonsai_Input, cst_Bonsai_Input$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Path
//# unitInfo: Requires: Base__Buffer, Bonsai__Keyed, Core, Core__Char, Core__Comparable, Core__Int, Core__Sexp, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Sexplib0__Sexp_conv, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Path$0 = "Bonsai__Path",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    Core = global_data.Core,
    Uopt = global_data.Uopt,
    Reversed_list = global_data.Reversed_list,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Int = global_data.Core__Int,
    Base_Buffer = global_data.Base__Buffer,
    Core_String = global_data.Core__String,
    Bonsai_Keyed = global_data.Bonsai__Keyed,
    Core_Sexp = global_data.Core__Sexp,
    Core_Char = global_data.Core__Char,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Path$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/path.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "path.ml");
   var
    _g_ = [0, "path"],
    cst_BUG_Bonsai_Path_t_should_b =
      "BUG: [Bonsai.Path.t] should be unique for all components, but duplicate paths were discovered.",
    cst_x = "x",
    cst_y = "y",
    _a_ = [0, "Subst_from"],
    _b_ = [0, "Subst_into"],
    _c_ = [0, "Assoc"],
    _d_ = [0, "Switch"],
    _f_ = [0, "bonsai_path"],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Path = cst_Bonsai_Path$0;
   function keyed(compare, id){
    function _u_(key){return caml_call3(Bonsai_Keyed[2], key, id, compare);}
    return caml_call1(Core[266], _u_);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    if(0 === param[0]){
     var
      arg0_001 = param[1],
      res0_002 = caml_call1(Bonsai_Keyed[1], arg0_001);
     return [1, [0, _c_, [0, res0_002, 0]]];
    }
    var arg0_003 = param[1], res0_004 = caml_call1(Core[389], arg0_003);
    return [1, [0, _d_, [0, res0_004, 0]]];
   }
   function compare(a_005, b_006){
    if(a_005 === b_006) return 0;
    a:
    {
     if(typeof a_005 !== "number"){
      if(0 === a_005[0]){
       var a_007 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 !== b_006[0]) return -1;
        var b_008 = b_006[1];
        return caml_call2(Bonsai_Keyed[10], a_007, b_008);
       }
       if(0 === b_006) break a;
      }
      else{
       var a_009 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 === b_006[0]) return 1;
        var b_010 = b_006[1];
        return caml_call2(Core[382], a_009, b_010);
       }
       if(0 === b_006) break a;
      }
      return 1;
     }
     if(0 === a_005){
      if(typeof b_006 === "number" && ! b_006) return 0;
      return -1;
     }
     if(typeof b_006 !== "number") return -1;
     if(b_006) return 0;
    }
    return 1;
   }
   var offset = caml_call1(Core_Char[11], 97);
   function lower_nibble_to_alpha(c){
    var _t_ = caml_call2(Core_Int[28], c, 15) + offset | 0;
    return caml_call1(Core_Char[13], _t_);
   }
   function char_to_alpha(buf, c){
    var
     c$0 = caml_call1(Core_Char[11], c),
     lower = lower_nibble_to_alpha(c$0),
     upper = lower_nibble_to_alpha(caml_call2(Core_Int[34], c$0, 4));
    caml_call2(Base_Buffer[15], buf, upper);
    return caml_call2(Base_Buffer[15], buf, lower);
   }
   function sexp_of_run(param){
    var arg1_017 = param[2], arg0_016 = param[1];
    if(caml_call2(Core[90], arg1_017, 1)) return sexp_of_t(arg0_016);
    var
     res0_018 = sexp_of_t(arg0_016),
     res1_019 = caml_call1(Core[389], arg1_017);
    return [1, [0, res0_018, [0, res1_019, 0]]];
   }
   function run_length_encoding(t){
    var match$0 = caml_call1(Uopt[13], t[4]);
    if(match$0){var items = match$0[1]; return items;}
    var l$0 = caml_call1(Reversed_list[3], t[1]), acc = 0, l = l$0;
    for(;;){
     if(acc){
      if(l){
       var
        tl = l[2],
        curr_element = l[1],
        acc_tl = acc[2],
        curr_acc = acc[1],
        x_023 = curr_acc[1],
        match = 0 === compare(x_023, curr_element) ? 1 : 0;
       if(match){
        var
         acc$0 = [0, [0, curr_acc[1], curr_acc[2] + 1 | 0], acc_tl],
         acc = acc$0,
         l = tl;
        continue;
       }
       var
        acc$1 = [0, [0, curr_element, 1], [0, curr_acc, acc_tl]],
        acc = acc$1,
        l = tl;
       continue;
      }
     }
     else if(l){
      var
       tl$0 = l[2],
       first = l[1],
       acc$2 = [0, [0, first, 1], 0],
       acc = acc$2,
       l = tl$0;
      continue;
     }
     var run_length_encoded_items = caml_call1(Reversed_list[3], acc);
     t[4] = caml_call1(Uopt[6], run_length_encoded_items);
     return run_length_encoded_items;
    }
   }
   function sexp_of_t$0(t){
    var x_020 = run_length_encoding(t);
    return caml_call2(Core[472], sexp_of_run, x_020);
   }
   function compare$0(a$2, b$2){
    if(a$2 === b$2) return 0;
    var
     b_028 = run_length_encoding(b$2),
     a_027 = run_length_encoding(a$2),
     a = a_027,
     b = b_028;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var
      bl = b[2],
      b$0 = b[1],
      al = a[2],
      a$0 = a[1],
      b_022 = b$0[1],
      a_021 = a$0[1],
      c = compare(a_021, b_022);
     if(! caml_call2(Core[90], c, 0)) return c;
     switch(caml_call1(Core_Int[11], a$0[2] - b$0[2] | 0)){
       case 0:
        var b$1 = [0, [0, b$0[1], b$0[2] - a$0[2] | 0], bl], a = al, b = b$1;
        break;
       case 1:
        var a = al, b = bl; break;
       default:
        var a$1 = [0, [0, a$0[1], a$0[2] - b$0[2] | 0], al], a = a$1, b = bl;
     }
    }
   }
   var
    _e_ = caml_call1(Uopt[6], 0),
    empty = [0, 0, caml_call1(Uopt[6], 0), _f_, _e_];
   function append(t, ele){
    var
     items_rev = [0, ele, t[1]],
     items_for_testing = Uopt[5],
     string_repr = [1, t, ele],
     run_length_encoded_items = Uopt[5];
    return [0,
            items_rev,
            items_for_testing,
            string_repr,
            run_length_encoded_items];
   }
   var
    include = caml_call1(Core_Comparable[11], [0, compare$0, sexp_of_t$0]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$1 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function to_unique_identifier_string(t){
    var match = t[3];
    if(0 === match[0]){var s = match[1]; return s;}
    var
     ele = match[2],
     parent = match[1],
     parent_s = to_unique_identifier_string(parent);
    if(typeof ele === "number")
     var _o_ = 0 === ele ? cst_x : cst_y;
    else if(0 === ele[0]){
     var
      k = ele[1],
      buf = caml_call1(Base_Buffer[2], 10),
      _k_ = caml_call1(Bonsai_Keyed[1], k),
      _l_ =
        function(buf, string){
         function _q_(_r_){return char_to_alpha(buf, _r_);}
         return caml_call2(Core_String[15], string, _q_);
        };
     caml_call4(Core_Sexp[90], buf, char_to_alpha, _l_, _k_);
     var _o_ = caml_call1(Base_Buffer[3], buf);
    }
    else{
     var
      i = ele[1],
      buf$0 = caml_call1(Base_Buffer[2], 4),
      _m_ = function(_s_){return char_to_alpha(buf$0, _s_);},
      _n_ = caml_call1(Core_Int[79], i);
     caml_call2(Core_String[15], _n_, _m_);
     var _o_ = caml_call1(Base_Buffer[3], buf$0);
    }
    var
     _p_ = caml_call2(Core[18], cst, _o_),
     string_repr = caml_call2(Core[18], parent_s, _p_);
    t[3] = [0, string_repr];
    return string_repr;
   }
   function raise_duplicate(path){
    var
     _i_ = [0, [1, [0, _g_, [0, sexp_of_t$0(path), 0]]], 0],
     _j_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Bonsai_Path_t_should_b),
         _i_]];
    return caml_call1(Core[261], _j_);
   }
   function items(t){
    var match = caml_call1(Uopt[13], t[2]);
    if(match){var items = match[1]; return items;}
    var items$0 = caml_call1(Reversed_list[3], t[1]);
    t[2] = caml_call1(Uopt[6], items$0);
    return items$0;
   }
   function slow_but_correct_compare_for_b(a, b){
    if(a === b) return 0;
    var b_032 = items(b), a_031 = items(a);
    function _h_(a_033, b_034){return compare(a_033, b_034);}
    return caml_call3(Core[466], _h_, a_031, b_032);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Path);
   var
    Bonsai_Path =
      [0,
       [0, keyed, compare],
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       empty,
       append,
       to_unique_identifier_string,
       raise_duplicate,
       [0, slow_but_correct_compare_for_b]];
   runtime.caml_register_global(34, Bonsai_Path, cst_Bonsai_Path$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Lifecycle
//# unitInfo: Requires: Bonsai__Path, Core__Map, Core__Option, Incr_map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Lifecycle$0 = "Bonsai__Lifecycle",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incr_map = global_data.Incr_map,
    Core_Map = global_data.Core__Map,
    Reversed_list = global_data.Reversed_list,
    Ui_effect = global_data.Ui_effect,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Path = global_data.Bonsai__Path;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Lifecycle$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/lifecycle.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "lifecycle.ml");
   var
    empty = Bonsai_Path[23][5],
    _a_ = [0, 0, 0],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Lifecycle = cst_Bonsai_Lifecycle$0;
   function has_after_display(t){
    function _n_(t){return caml_call1(Core_Option[62], t[3]);}
    return caml_call2(Core_Map[97], t, _n_);
   }
   function maybe_cons(hd, tl){
    if(! hd) return tl;
    var a = hd[1];
    return [0, a, tl];
   }
   function diff(old, new$0){
    function collect(param, _l_){
     var after_display = _l_[3];
     return function(_m_){return maybe_cons(after_display, _m_);};
    }
    var after_displays = caml_call3(Core_Map[61], new$0, 0, collect);
    function collect$0(param, _i_){
     var
      _j_ = _i_[2],
      _k_ = _j_[1],
      deactivations = param[2],
      activations = param[1];
     if(847852583 === _k_){
      var on_deactivate = _j_[2][2];
      return [0, activations, maybe_cons(on_deactivate, deactivations)];
     }
     if(1013247643 <= _k_) return [0, activations, deactivations];
     var on_activate = _j_[2][1];
     return [0, maybe_cons(on_activate, activations), deactivations];
    }
    function data_equal(_h_, _g_){return _h_ === _g_ ? 1 : 0;}
    var
     match = caml_call5(Core_Map[89], old, new$0, data_equal, _a_, collect$0),
     deactivations = match[2],
     activations = match[1],
     _b_ = caml_call1(Reversed_list[3], after_displays),
     _c_ = [0, [0, Ui_effect[2], _b_], 0],
     _d_ = caml_call1(Reversed_list[3], activations),
     _e_ = [0, [0, Ui_effect[2], _d_], _c_],
     _f_ = caml_call1(Reversed_list[3], deactivations);
    return [0, Ui_effect[2], [0, [0, Ui_effect[2], _f_], _e_]];
   }
   function merge(a, b){return caml_call4(Incr_map[28], 0, 0, a, b);}
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Lifecycle);
   var Bonsai_Lifecycle = [0, [0, has_after_display, empty, diff, merge]];
   runtime.caml_register_global(18, Bonsai_Lifecycle, cst_Bonsai_Lifecycle$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__May_contain
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_May_contain$0 = "Bonsai__May_contain",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_May_contain$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/may_contain.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "may_contain.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_May_contain = cst_Bonsai_May_contain$0;
   function merge(a, b){if(a && b) return 1; return 0;}
   var T = [0, merge];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_May_contain);
   var Bonsai_May_contain = [0, T, T];
   runtime.caml_register_global
    (11, Bonsai_May_contain, cst_Bonsai_May_contain$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Meta
//# unitInfo: Requires: Base__Option, Core, Core__Int, Core__Map, Core__Nothing, Core__Option, Core__Tuple, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Meta$0 = "Bonsai__Meta",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core_Option = global_data.Core__Option,
    Core_Tuple = global_data.Core__Tuple,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Meta$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/meta.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "meta.ml");
   var
    unit_type_id = caml_call2(Core_Type_equal[8][3], "unit", Core[620]),
    nothing_type_id =
      caml_call2(Core_Type_equal[8][3], "Nothing.t", Core_Nothing[23]),
    cst_input = "input",
    _e_ = [0, [2, 0, [11, "-model", 0]], "%s-model"],
    _d_ = [0, 0],
    _c_ = [0, 0],
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_module_tree_type_id = "module tree type id",
    cst_Bonsai_Meta_Model_Type_id_ = "Bonsai__Meta.Model.Type_id.Fail",
    cst_lazy_model = "lazy-model",
    cst_lazy_input = "lazy input",
    cst_enum_input = "enum input",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Meta = cst_Bonsai_Meta$0;
   function sexp_of_t(sexp_of_a, param){
    var sexp_of_a$0 = sexp_of_a, param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var type_id = param$0[1];
        return caml_call2(Core_Type_equal[8][1], sexp_of_a$0, type_id);
       case 1:
        var
         x_003 = param$0[2],
         x_002 = param$0[1],
         _T_ = [0, sexp_of_t(Core[149], x_003), 0];
        return [1, [0, sexp_of_t(Core[149], x_002), _T_]];
       case 2:
        var
         x_004 = param$0[3],
         sexp_of_a$1 = Core[149],
         sexp_of_a$0 = sexp_of_a$1,
         param$0 = x_004;
        break;
       case 3:
        var
         x_005 = param$0[4],
         sexp_of_a$2 = Core[149],
         sexp_of_a$0 = sexp_of_a$2,
         param$0 = x_005;
        break;
       default:
        var
         multi_model = param$0[1],
         sexp_of_hidden =
           function(param){
            var type_id = param[2][3];
            return sexp_of_t(Core[149], type_id);
           };
        return caml_call2(Core_Int[98][45], sexp_of_hidden, multi_model);
     }
   }
   function to_sexp(param){
    switch(param[0]){
      case 0:
       var type_id = param[1];
       return caml_call1(Core_Type_equal[8][6], type_id);
      case 1:
       var
        b_t = param[2],
        a_t = param[1],
        sexp_of_a = to_sexp(a_t),
        sexp_of_b = to_sexp(b_t);
       return function(param){
        var
         arg1_009 = param[2],
         arg0_008 = param[1],
         res0_010 = caml_call1(sexp_of_a, arg0_008),
         res1_011 = caml_call1(sexp_of_b, arg1_009);
        return [1, [0, res0_010, [0, res1_011, 0]]];};
      case 2:
       var
        by = param[3],
        k = param[1],
        sexp_of_t$0 = caml_call1(Core_Type_equal[8][6], k),
        Key = [0, sexp_of_t$0],
        sexp_of_by = to_sexp(by);
       return function(x_012){
        return caml_call3(Core_Map[132], Key, sexp_of_by, x_012);};
      case 3:
       var
        by$0 = param[4],
        k_io = param[2],
        k_model = param[1],
        sexp_of_t$1 = caml_call1(Core_Type_equal[8][6], k_model),
        Key$0 = [0, sexp_of_t$1],
        sexp_of_by$0 = to_sexp(by$0),
        sexp_of_k_io = caml_call1(Core_Type_equal[8][6], k_io);
       return function(x_017){
        function _S_(param){
         var
          arg1_014 = param[2],
          arg0_013 = param[1],
          res0_015 = caml_call1(sexp_of_k_io, arg0_013),
          res1_016 = caml_call1(sexp_of_by$0, arg1_014);
         return [1, [0, res0_015, [0, res1_016, 0]]];
        }
        return caml_call3(Core_Map[132], Key$0, _S_, x_017);};
      default:
       var
        sexp_of_hidden =
          function(param){
           var type_id = param[2][3];
           return sexp_of_t(Core[149], type_id);
          };
       return function(x_018){
        return caml_call2(Core_Int[98][45], sexp_of_hidden, x_018);};
    }
   }
   var
    Fail = [248, cst_Bonsai_Meta_Model_Type_id_, runtime.caml_fresh_oo_id(0)],
    type_equal_id_same_witness = Core_Type_equal[8][9];
   function same_witness(a, b){
    switch(a[0]){
      case 0:
       if(0 === b[0])
        return caml_call2(type_equal_id_same_witness, a[1], b[1]);
       break;
      case 1:
       if(1 === b[0]){
        var
         _x_ =
           function(param){
            function _Q_(param){return _a_;}
            var _R_ = same_witness(a[2], b[2]);
            return caml_call2(Base_Option[29][4][2], _R_, _Q_);
           },
         _y_ = same_witness(a[1], b[1]);
        return caml_call2(Base_Option[29][4][2], _y_, _x_);
       }
       break;
      case 2:
       if(2 === b[0]){
        var
         _z_ =
           function(param){
            function _M_(param){
             function _O_(param){return _b_;}
             var _P_ = same_witness(a[3], b[3]);
             return caml_call2(Base_Option[29][4][2], _P_, _O_);
            }
            var _N_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
            return caml_call2(Base_Option[29][4][2], _N_, _M_);
           },
         _A_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
        return caml_call2(Base_Option[29][4][2], _A_, _z_);
       }
       break;
      case 3:
       if(3 === b[0]){
        var
         _B_ =
           function(param){
            function _G_(param){
             function _I_(param){
              function _K_(param){return _c_;}
              var _L_ = same_witness(a[4], b[4]);
              return caml_call2(Base_Option[29][4][2], _L_, _K_);
             }
             var _J_ = caml_call2(type_equal_id_same_witness, a[3], b[3]);
             return caml_call2(Base_Option[29][4][2], _J_, _I_);
            }
            var _H_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
            return caml_call2(Base_Option[29][4][2], _H_, _G_);
           },
         _C_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
        return caml_call2(Base_Option[29][4][2], _C_, _B_);
       }
       break;
      default:
       if(4 === b[0]){
        var
         _D_ =
           function(param){
            function _E_(param$0, data){
             if(typeof data !== "number" && 737457313 === data[1]){
              var _F_ = data[2], b = _F_[2];
              return same_witness(_F_[1][2][3], b[2][3])
                      ? 0
                      : caml_call1(param, 0);
             }
             return caml_call1(param, 0);
            }
            caml_call3(Core_Map[56], a[1], b[1], _E_);
            return _d_;
           };
        return caml_call1(Core[268], _D_);
       }
    }
    return 0;
   }
   function same_witness_exn(a, b){
    var match = same_witness(a, b);
    if(! match) throw Fail;
    var proof = match[1];
    return proof;
   }
   function to_type_id(param){
    return caml_call2
            (Core_Type_equal[8][3], cst_module_tree_type_id, Core[149]);
   }
   var
    unit = [0, unit_type_id],
    nothing = [0, nothing_type_id],
    unit$0 = [0, 0, Core[615], unit, Core[620]];
   function both(model1, model2){
    var
     sexp_of = caml_call2(Core_Tuple[1][2], model1[4], model2[4]),
     type_id = [1, model1[3], model2[3]],
     default$0 = [0, model1[1], model2[1]],
     equal = caml_call2(Core_Tuple[1][10], model1[2], model2[2]);
    return [0, default$0, equal, type_id, sexp_of];
   }
   function map(M, k, cmp, model){
    var sexp_of_model = model[4];
    function sexp_of_map_model(x_028){
     return caml_call3(Core_Map[132], [0, M[1]], sexp_of_model, x_028);
    }
    var
     model_map_type_id = [2, k, cmp, model[3]],
     _w_ = caml_call1(Core_Map[78], model[2]);
    return [0,
            caml_call1(Core_Map[4], [0, M[2]]),
            _w_,
            model_map_type_id,
            sexp_of_map_model];
   }
   function map_on(M, M_io, k_model, k_io, cmp, model){
    var sexp_of_model = model[4];
    function sexp_of_map_model(x_033){
     function _v_(param){
      var
       arg1_030 = param[2],
       arg0_029 = param[1],
       res0_031 = caml_call1(M_io[1], arg0_029),
       res1_032 = caml_call1(sexp_of_model, arg1_030);
      return [1, [0, res0_031, [0, res1_032, 0]]];
     }
     return caml_call3(Core_Map[132], [0, M[1]], _v_, x_033);
    }
    var model_map_type_id = [3, k_model, k_io, cmp, model[3]];
    function io_equal(a, b){
     var _u_ = caml_call2(M_io[2][1], a, b);
     return caml_call2(Core[90], _u_, 0);
    }
    var
     _s_ = caml_call2(Core_Tuple[1][10], io_equal, model[2]),
     _t_ = caml_call1(Core_Map[78], _s_);
    return [0,
            caml_call1(Core_Map[4], [0, M[2]]),
            _t_,
            model_map_type_id,
            sexp_of_map_model];
   }
   function of_module(sexp_of_model, equal, default$0, name){
    function _o_(_r_, _q_){return _r_ === _q_ ? 1 : 0;}
    var
     equal$0 = caml_call2(Core_Option[39], equal, _o_),
     _p_ = caml_call2(Core[265], _e_, name),
     type_id = caml_call2(Core_Type_equal[8][3], _p_, sexp_of_model);
    return [0, default$0, equal$0, [0, type_id], sexp_of_model];
   }
   function sexp_of_t$0(param){
    var sexp_of = param[2][4], model = param[1];
    return caml_call1(sexp_of, model);
   }
   function equal(param, _n_){
    var
     t2 = _n_[2][3],
     m2 = _n_[1],
     match = param[2],
     t1 = match[3],
     equal = match[2],
     m1 = param[1];
    return same_witness(t1, t2) ? caml_call2(equal, m1, m2) : 0;
   }
   function create(info){function wrap(m){return [0, m, info];} return wrap;}
   function _f_(x_039){return caml_call2(Core[515], sexp_of_t$0, x_039);}
   function _g_(x_038){return caml_call2(Core[515], sexp_of_t$0, x_038);}
   var
    _h_ = [0, caml_call2(Core_Type_equal[8][3], cst_lazy_model, _g_)],
    lazy =
      [0,
       0,
       function(a_034, b_035){
        function _m_(a_036, b_037){return equal(a_036, b_037);}
        return caml_call3(Core[511], _m_, a_034, b_035);
       },
       _h_,
       _f_];
   function sexp_of_t$1(sexp_of_k){
    var _l_ = [0, sexp_of_k];
    return function(x_040){
     return caml_call3(Core_Map[132], _l_, sexp_of_t$0, x_040);};
   }
   var find_exn = Core_Map[45], set = Core_Map[38];
   function of_models(_k_){return _k_;}
   function to_models(_j_){return _j_;}
   function model_info(default$0){
    function sexp_of(x_041){return sexp_of_t$1(Core[389])(x_041);}
    var type_id = [4, default$0];
    return [0,
            default$0,
            function(a_042, b_043){
             function _i_(a_044, b_045){return equal(a_044, b_045);}
             return caml_call3(Core_Int[98][4], _i_, a_042, b_043);
            },
            type_id,
            sexp_of];
   }
   var
    Multi_model =
      [0, sexp_of_t$1, find_exn, set, to_models, of_models, model_info];
   function create$0(param){
    return [0, caml_call2(Core_Type_equal[8][3], cst_input, Core[149])];
   }
   function both$0(a, b){return [1, a, b];}
   function map$0(k, cmp, by){return [2, k, cmp, by];}
   var
    unit$1 = [0, caml_call2(Core_Type_equal[8][3], cst_lazy_input, Core[149])],
    int$0 = [0, caml_call2(Core_Type_equal[8][3], cst_enum_input, Core[149])],
    Hidden = [0, unit$1, int$0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Meta);
   var
    Bonsai_Meta =
      [0,
       [0,
        [0,
         sexp_of_t,
         same_witness,
         same_witness_exn,
         to_type_id,
         to_sexp,
         nothing,
         unit],
        [0, equal, sexp_of_t$0, create, lazy],
        unit$0,
        both,
        map,
        map_on,
        of_module],
       Multi_model,
       [0,
        sexp_of_t,
        same_witness,
        same_witness_exn,
        unit,
        both$0,
        map$0,
        create$0,
        Hidden]];
   runtime.caml_register_global(32, Bonsai_Meta, cst_Bonsai_Meta$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Snapshot
//# unitInfo: Requires: Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Snapshot$0 = "Bonsai__Snapshot",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Import = global_data.Bonsai__Import,
    Bonsai_Input = global_data.Bonsai__Input,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Snapshot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/snapshot.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "snapshot.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Snapshot = cst_Bonsai_Snapshot$0;
   function result(r){return r[3];}
   function lifecycle(r){return r[2];}
   function input(r){return r[1];}
   function create(input, lifecycle, result){
    var _c_ = caml_call1(Bonsai_Import[6], 0);
    caml_call2(Bonsai_Input[6], input, _c_);
    var _d_ = caml_call1(Bonsai_Import[5], 3);
    caml_call2(Core_Option[46], lifecycle, _d_);
    caml_call2(Bonsai_Import[5], 2, result);
    return [0, input, lifecycle, result];
   }
   function attribute_positions(here, t){
    var _a_ = caml_call1(Bonsai_Import[8], here);
    caml_call2(Bonsai_Input[6], t[1], _a_);
    var _b_ = caml_call1(Bonsai_Import[7], here);
    caml_call2(Core_Option[46], t[2], _b_);
    return caml_call2(Bonsai_Import[7], here, t[3]);
   }
   function lifecycle_or_empty(t){
    var match = t[2];
    if(match){var l = match[1]; return l;}
    var r = caml_call1(Ui_incr[10], Bonsai_Lifecycle[1][2]);
    caml_call2(Bonsai_Import[5], 4, r);
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Snapshot);
   var
    Bonsai_Snapshot =
      [0,
       input,
       result,
       lifecycle,
       lifecycle_or_empty,
       create,
       attribute_positions];
   runtime.caml_register_global(19, Bonsai_Snapshot, cst_Bonsai_Snapshot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Trampoline
//# unitInfo: Requires: Base__Monad, CamlinternalLazy, Core__List, Core__Map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Trampoline$0 = "Bonsai__Trampoline",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Map = global_data.Core__Map,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Trampoline$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/trampoline.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "trampoline.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Trampoline = cst_Bonsai_Trampoline$0;
   function lazy(t){return [0, t];}
   function return$0(a){return [1, a];}
   function bind(t, f){return [2, t, f];}
   function run(t$4){
    var t = t$4, stack = 0;
    for(;;)
     switch(t[0]){
       case 0:
        var t$0 = t[1], _e_ = runtime.caml_obj_tag(t$0);
        a:
        if(250 === _e_)
         var t$1 = t$0[1];
        else{
         if(246 !== _e_ && 244 !== _e_){var t$1 = t$0; break a;}
         var t$1 = caml_call1(CamlinternalLazy[2], t$0);
        }
        var t = t$1;
        break;
       case 1:
        var a = t[1];
        if(! stack) return a;
        var
         stack$0 = stack[2],
         k = stack[1],
         t$2 = caml_call1(k, a),
         t = t$2,
         stack = stack$0;
        break;
       default:
        var
         k$0 = t[2],
         t$3 = t[1],
         stack$1 = [0, k$0, stack],
         t = t$3,
         stack = stack$1;
     }
   }
   var
    include = caml_call1(Base_Monad[1], [0, bind, return$0, -349054340]),
    bind$0 = include[4],
    return$1 = include[5],
    all = include[9];
   function all_map(map){
    function _a_(alist){
     var _d_ = caml_call1(Core_Map[3], map);
     return caml_call1(return$1, caml_call2(Core_Map[8], _d_, alist));
    }
    function _b_(param){
     var v = param[2], k = param[1];
     return caml_call2
             (bind$0, v, function(v){return caml_call1(return$1, [0, k, v]);});
    }
    var _c_ = caml_call2(Core_Map[81], 0, map);
    return caml_call2
            (bind$0,
             caml_call1(all, caml_call2(Core_List[51], _c_, _b_)),
             _a_);
   }
   var
    Let_syntax = [0, return$1, bind$0],
    Let_syntax$0 = [0, return$1, Let_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Trampoline);
   var Bonsai_Trampoline = [0, lazy, run, return$1, all_map, Let_syntax$0];
   runtime.caml_register_global
    (15, Bonsai_Trampoline, cst_Bonsai_Trampoline$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Computation
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Computation = "Bonsai__Computation",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Computation);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/computation.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "computation.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Computation);
   var Bonsai_Computation = [0];
   runtime.caml_register_global
    (11, Bonsai_Computation, cst_Bonsai_Computation);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Node_path
//# unitInfo: Requires: Base__Buffer, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Int, Core__List, Core__String, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Bonsai_Node_path$0 = "Bonsai__Node_path",
    cst_bonsai$0 = "bonsai",
    cst_builder = "builder",
    cst_src_node_path_ml$4 = "src/node_path.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    empty = [0, 0, 0],
    cst = cst$0,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core = global_data.Core,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Base_Buffer = global_data.Base__Buffer,
    Core_Int = global_data.Core__Int,
    Core_List = global_data.Core__List;
   global_data.Bin_prot__Common;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_String = global_data.Core__String,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Node_path$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_node_path_ml$4);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "node_path.ml");
   var
    include = Core_String[180][1],
    bin_size_t = include[11],
    bin_write_t = include[12],
    bin_read_t = include[13],
    bin_read_t$0 = include[14],
    bin_shape_t = include[15],
    bin_writer_t = include[16],
    bin_reader_t = include[17],
    bin_t = include[18],
    compare = include[19],
    t_of_sexp = include[20],
    sexp_of_t = include[21],
    comparator = include[22],
    Map = include[23],
    Set = include[24],
    _a_ = [0, [0, "depth", Core[372]], 0],
    _b_ = [0, [0, "choices", caml_call1(Core[456], Core[372])], _a_],
    _c_ = caml_call1(Bin_prot_Shape[4], _b_),
    _d_ = [0, [0, caml_call1(Bin_shape[2][1], cst_builder), 0, _c_], 0],
    _e_ = caml_call1(Bin_shape[4][1], "src/node_path.ml:13:0"),
    group = caml_call2(Bin_prot_Shape[2], _e_, _d_),
    _f_ = caml_call1(Bin_shape[2][1], cst_builder);
   caml_call1(caml_call2(Bin_prot_Shape[10], group, _f_), 0);
   var
    _h_ = [0, [0, 30, 0], 1],
    _s_ = [0, 0, 1],
    _y_ = [0, [0, 1, [0, 2, [0, 2, [0, 1, [0, 0, 0]]]]], 0],
    _z_ = [0, [0, [0, " 1-2-2-1-0_0 ", [0, cst$0]], [0, 1000, 1015, 1032]]],
    _A_ = [0, 1000, 1006, 1033],
    _B_ = [0, 921, 925, 1033],
    _C_ = [0, 1000, 1033, 1033],
    _D_ = [0, 921, 925, 1033],
    cst_src_node_path_ml$2 = cst_src_node_path_ml$4,
    _t_ = [0, [0, [0, " _1 ", [0, cst$0]], [0, 1106, 1121, 1129]]],
    _u_ = [0, 1106, 1112, 1130],
    _v_ = [0, 1042, 1046, 1130],
    _w_ = [0, 1106, 1130, 1130],
    _x_ = [0, 1042, 1046, 1130],
    cst_src_node_path_ml$1 = cst_src_node_path_ml$4,
    _n_ = [0, [0, [0, " _0 ", [0, cst$0]], [0, 1181, 1196, 1204]]],
    _o_ = [0, 1181, 1187, 1205],
    _p_ = [0, 1139, 1143, 1205],
    _q_ = [0, 1181, 1205, 1205],
    _r_ = [0, 1139, 1143, 1205],
    cst_src_node_path_ml$0 = cst_src_node_path_ml$4,
    _i_ = [0, [0, [0, " 30_1 ", [0, cst$0]], [0, 1282, 1297, 1307]]],
    _j_ = [0, 1282, 1288, 1308],
    _k_ = [0, 1214, 1218, 1308],
    _l_ = [0, 1282, 1308, 1308],
    _m_ = [0, 1214, 1218, 1308],
    cst_src_node_path_ml = cst_src_node_path_ml$4,
    cst_src_node_path_ml$3 = cst_src_node_path_ml$4,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Node_path = cst_Bonsai_Node_path$0;
   function to_string(param){
    var
     depth = param[2],
     choices = param[1],
     buffer = caml_call1(Base_Buffer[2], 10);
    if(choices){
     var
      choices$0 = choices[2],
      choice = choices[1],
      _aa_ = caml_call1(Core_Int[79], choice);
     caml_call2(Base_Buffer[16], buffer, _aa_);
     var
      _ab_ =
        function(choice){
         caml_call2(Base_Buffer[15], buffer, 45);
         var _ad_ = caml_call1(Core_Int[79], choice);
         return caml_call2(Base_Buffer[16], buffer, _ad_);
        };
     caml_call2(Core_List[19], choices$0, _ab_);
    }
    caml_call2(Base_Buffer[15], buffer, 95);
    var _ac_ = caml_call1(Core_Int[79], depth);
    caml_call2(Base_Buffer[16], buffer, _ac_);
    return caml_call1(Base_Buffer[3], buffer);
   }
   function choice_point(t, n){
    return [0, caml_call2(Core[156], t[1], [0, n, 0]), 0];
   }
   function descend(t){return [0, t[1], t[2] + 1 | 0];}
   function _g_(param){
    function test(t){var s = to_string(t); return caml_call1(Core[32], s);}
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$2 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _T_ =
        function(param){
         test(_y_);
         var _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$2[2], _$_);
        },
      _U_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _A_,
          _z_),
      _V_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _U_], 0],
      _W_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _X_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$2[3],
       cst_src_node_path_ml$2,
       44,
       _D_,
       _C_,
       _B_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _X_,
       _W_,
       0,
       0,
       Inline_test_config,
       _V_,
       _T_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$1 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _O_ =
        function(param){
         test(_s_);
         var ___ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block$1[2], ___);
        },
      _P_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _u_,
          _t_),
      _Q_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _P_], 0],
      _R_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _S_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block$1[3],
       cst_src_node_path_ml$1,
       49,
       _x_,
       _w_,
       _v_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _S_,
       _R_,
       0,
       0,
       Inline_test_config,
       _Q_,
       _O_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _J_ =
        function(param){
         test(empty);
         var _Z_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
         return caml_call1(Ppx_expect_test_block$0[2], _Z_);
        },
      _K_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _o_,
          _n_),
      _L_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _K_], 0],
      _M_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
      _N_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_src_node_path_ml$0,
       54,
       _r_,
       _q_,
       _p_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _N_,
       _M_,
       0,
       0,
       Inline_test_config,
       _L_,
       _J_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _E_ =
        function(param){
         test(_h_);
         var _Y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
         return caml_call1(Ppx_expect_test_block[2], _Y_);
        },
      _F_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _j_,
          _i_),
      _G_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _F_], 0],
      _H_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
      _I_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_src_node_path_ml,
       59,
       _m_,
       _l_,
       _k_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _I_,
       _H_,
       0,
       0,
       Inline_test_config,
       _G_,
       _E_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_src_node_path_ml$3,
     37,
     0,
     513,
     _g_);
   function finalize(builder){return to_string(builder);}
   var
    bin_size_t$0 = Core_String[126],
    bin_write_t$0 = Core_String[127],
    bin_read_t$1 = Core_String[128],
    bin_read_t$2 = Core_String[129],
    bin_shape_t$0 = Core_String[130],
    bin_writer_t$0 = Core_String[131],
    bin_reader_t$0 = Core_String[132],
    bin_t$0 = Core_String[133],
    t_of_sexp$0 = Core_String[134],
    sexp_of_t$0 = Core_String[135],
    of_string = Core_String[136],
    to_string$0 = Core_String[137],
    symbol = Core_String[139],
    symbol$0 = Core_String[140],
    symbol$1 = Core_String[141],
    symbol$2 = Core_String[142],
    symbol$3 = Core_String[143],
    symbol$4 = Core_String[144],
    equal = Core_String[145],
    compare$0 = Core_String[146],
    min = Core_String[147],
    max = Core_String[148],
    ascending = Core_String[149],
    descending = Core_String[150],
    between = Core_String[151],
    clamp_exn = Core_String[152],
    clamp = Core_String[153],
    validate_lbound = Core_String[154],
    validate_ubound = Core_String[155],
    validate_bound = Core_String[156],
    Replace_polymorphic_compare = Core_String[157],
    comparator$0 = Core_String[158],
    Map$0 = Core_String[159],
    Set$0 = Core_String[160];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Node_path);
   var
    Bonsai_Node_path =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp$0,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator$0,
       Map$0,
       Set$0,
       of_string,
       to_string$0,
       empty,
       choice_point,
       descend,
       finalize,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         comparator,
         [0,
          Map[1],
          Map[2],
          Map[3],
          Map[4],
          Map[5],
          Map[6],
          Map[7],
          Map[8],
          Map[9],
          Map[10],
          Map[11],
          Map[12],
          Map[13]],
         [0,
          Set[1],
          Set[2],
          Set[3],
          Set[4],
          Set[5],
          Set[6],
          Set[7],
          Set[8],
          Set[9],
          Set[10],
          Set[11],
          Set[12]]]]];
   runtime.caml_register_global(60, Bonsai_Node_path, cst_Bonsai_Node_path$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Transform
//# unitInfo: Requires: Bonsai__Node_path, Core__Lazy, Core__Map, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Transform$0 = "Bonsai__Transform",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Transform$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/transform.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "transform.ml");
   var
    Var_from_parent = [0],
    _a_ = [0, 1],
    _b_ = [0, 2],
    _c_ = [0, 1],
    _d_ = [0, 2],
    _e_ = [0, 2],
    _f_ = [0, 1],
    _g_ = [0, 2],
    _h_ = [0, 1],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Transform = cst_Bonsai_Transform$0;
   function descend(f, var_from_parent, append_to, parent, param){
    var
     id = param[3],
     here = param[2],
     value = param[1],
     current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(n, v){
     var
      append_to = caml_call2(Bonsai_Node_path[36], current_path, n),
      child_path = caml_call1(Bonsai_Node_path[37], append_to),
      _aE_ =
        [246,
         function(_aI_){return caml_call1(Bonsai_Node_path[38], child_path);}],
      _aF_ =
        [246,
         function(_aH_){
          return caml_call1(Bonsai_Node_path[38], current_path);
         }],
      _aG_ =
        [0,
         function(parent, v){return descend(f, 0, append_to, parent, v);},
         var_from_parent,
         _aF_,
         _aE_];
     return caml_call3(f[1], _aG_, parent, v);
    }
    switch(value[0]){
      case 0:
       var value$0 = value; break;
      case 1:
       var value$0 = value; break;
      case 2:
       var value$0 = value; break;
      case 3:
       var
        b = value[2],
        a = value[1],
        _$_ = map(2, b),
        value$0 = [3, map(1, a), _$_];
       break;
      case 4:
       var
        _aa_ = value[3],
        _ab_ = value[2],
        value$0 = [4, map(1, value[1]), _ab_, _aa_];
       break;
      case 5:
       var _ac_ = value[2], value$0 = [5, map(1, value[1]), _ac_]; break;
      case 6:
       var
        _ad_ = value[3],
        _ae_ = map(2, value[2]),
        value$0 = [6, map(1, value[1]), _ae_, _ad_];
       break;
      case 7:
       var
        _af_ = value[4],
        _ag_ = map(3, value[3]),
        _ah_ = map(2, value[2]),
        value$0 = [7, map(1, value[1]), _ah_, _ag_, _af_];
       break;
      case 8:
       var
        _ai_ = value[5],
        _aj_ = map(4, value[4]),
        _ak_ = map(3, value[3]),
        _al_ = map(2, value[2]),
        value$0 = [8, map(1, value[1]), _al_, _ak_, _aj_, _ai_];
       break;
      case 9:
       var
        _am_ = value[6],
        _an_ = map(5, value[5]),
        _ao_ = map(4, value[4]),
        _ap_ = map(3, value[3]),
        _aq_ = map(2, value[2]),
        value$0 = [9, map(1, value[1]), _aq_, _ap_, _ao_, _an_, _am_];
       break;
      case 10:
       var
        _ar_ = value[7],
        _as_ = map(6, value[6]),
        _at_ = map(5, value[5]),
        _au_ = map(4, value[4]),
        _av_ = map(3, value[3]),
        _aw_ = map(2, value[2]),
        value$0 = [10, map(1, value[1]), _aw_, _av_, _au_, _at_, _as_, _ar_];
       break;
      case 11:
       var
        _ax_ = value[8],
        _ay_ = map(7, value[7]),
        _az_ = map(6, value[6]),
        _aA_ = map(5, value[5]),
        _aB_ = map(4, value[4]),
        _aC_ = map(3, value[3]),
        _aD_ = map(2, value[2]),
        value$0 =
          [11, map(1, value[1]), _aD_, _aC_, _aB_, _aA_, _az_, _ay_, _ax_];
       break;
      default: var value$0 = value;
    }
    return [0, value$0, here, id];
   }
   var
    id =
      [0,
       function(param, from_parent, value){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, value);
       }];
   function descend$0(f, for_value, append_to, parent, computation){
    var current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(opt, choice, c){
     if(opt)
      var sth = opt[1], var_from_parent = sth;
     else
      var var_from_parent = 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var
      child_path = caml_call1(Bonsai_Node_path[37], append_to),
      _W_ =
        [246,
         function(___){return caml_call1(Bonsai_Node_path[38], child_path);}],
      _X_ =
        [246,
         function(_Z_){return caml_call1(Bonsai_Node_path[38], current_path);}],
      _Y_ =
        [0,
         function(parent, c){
          return descend$0(f, for_value, append_to, parent, c);
         },
         var_from_parent,
         _X_,
         _W_];
     return caml_call3(f[1], _Y_, parent, c);
    }
    function map_value(opt, choice, v){
     if(opt)
      var sth = opt[1], var_from_parent = sth;
     else
      var var_from_parent = 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var
      parent_path =
        [246,
         function(_V_){return caml_call1(Bonsai_Node_path[38], current_path);}],
      current_path$0 = caml_call1(Bonsai_Node_path[37], append_to),
      _S_ =
        [246,
         function(_U_){
          return caml_call1(Bonsai_Node_path[38], current_path$0);
         }],
      _T_ =
        [0,
         function(parent, v){
          return descend(for_value, 0, append_to, parent, v);
         },
         var_from_parent,
         parent_path,
         _S_];
     return caml_call3(for_value[1], _T_, parent, v);
    }
    if(typeof computation === "number") return computation;
    switch(computation[0]){
      case 0:
       var value = computation[1]; return [0, map_value(0, 0, value)];
      case 1:
       var _o_ = map_value(0, 0, computation[6]);
       return [1,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _o_];
      case 2:
       return computation;
      case 3:
       var _p_ = computation[2];
       return [3, map_value(0, 0, computation[1]), _p_];
      case 4:
       var
        _q_ = computation[1],
        from =
          map
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[2])]],
            _a_,
            _q_),
        into = map(0, _b_, computation[3]);
       return [4, from, computation[2], into, computation[4]];
      case 5:
       var
        _r_ = computation[2],
        value$0 =
          map_value
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[1])]],
            _c_,
            _r_),
        inner = map(0, _d_, computation[3]);
       return [5, computation[1], value$0, inner];
      case 6:
       return computation;
      case 7:
       var
        _s_ = computation[6],
        _t_ = caml_call1(Core_Type_equal[8][2], computation[5]),
        _u_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[3]), _t_]],
            _e_,
            _s_),
        _v_ = computation[5],
        _w_ = computation[4],
        _x_ = computation[3],
        _y_ = computation[2];
       return [7, map_value(0, _f_, computation[1]), _y_, _x_, _w_, _v_, _u_];
      case 8:
       var
        _z_ = computation[10],
        _A_ = computation[9],
        _B_ = caml_call1(Core_Type_equal[8][2], computation[8]),
        _C_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[4]), _B_]],
            _g_,
            _A_),
        _D_ = computation[8],
        _E_ = computation[7],
        _F_ = computation[6],
        _G_ = computation[5],
        _H_ = computation[4],
        _I_ = computation[3],
        _J_ = computation[2];
       return [8,
               map_value(0, _h_, computation[1]),
               _J_,
               _I_,
               _H_,
               _G_,
               _F_,
               _E_,
               _D_,
               _C_,
               _z_];
      case 9:
       var _K_ = computation[3], _L_ = computation[2];
       return [9, map_value(0, 0, computation[1]), _L_, _K_];
      case 10:
       var
        here = computation[3],
        arms = computation[2],
        index = [0, 1],
        match = map_value(0, [0, index[1]], computation[1]),
        _M_ = function(c){index[1]++; return map(0, [0, index[1]], c);},
        arms$0 = caml_call2(Core_Map[57], arms, _M_);
       return [10, match, arms$0, here];
      case 11:
       var t = computation[1], _N_ = function(eta){return map(0, 0, eta);};
       return [11, caml_call2(Core_Lazy[30], t, _N_)];
      case 12:
       var
        inner$0 = computation[6],
        model_id = computation[5],
        inject_id = computation[4],
        _O_ = computation[8],
        _P_ = computation[7],
        _Q_ = caml_call1(Core_Type_equal[8][2], inject_id),
        _R_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], model_id), _Q_]],
            0,
            inner$0);
       return [12,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _R_,
               _P_,
               _O_];
      case 13:
       var inner$1 = computation[2], reset_id = computation[1];
       return [13, reset_id, map(0, 0, inner$1)];
      default: var t$0 = computation[1]; return [14, map_value(0, 0, t$0)];
    }
   }
   var
    id$0 =
      [0,
       function(param, from_parent, computation){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, computation);
       }];
   function map(computation_mapper, value_mapper, init, computation){
    var
     current_path = caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
     parent_path = Bonsai_Node_path[35],
     append_to = Bonsai_Node_path[35],
     _i_ =
       [246,
        function(_n_){return caml_call1(Bonsai_Node_path[38], current_path);}],
     _j_ =
       [246,
        function(_m_){return caml_call1(Bonsai_Node_path[38], parent_path);}],
     _k_ = 0,
     _l_ =
       [0,
        function(parent, c){
         return descend$0
                 (computation_mapper, value_mapper, append_to, parent, c);
        },
        _k_,
        _j_,
        _i_];
    return caml_call3(computation_mapper[1], _l_, init, computation);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Transform);
   var Bonsai_Transform = [0, Var_from_parent, [0, id], [0, id$0], map];
   runtime.caml_register_global(23, Bonsai_Transform, cst_Bonsai_Transform$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform_intf$0 = "Bonsai__Fix_transform_intf",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform_intf$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/fix_transform_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "fix_transform_intf.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Fix_transform_intf = cst_Bonsai_Fix_transform_intf$0;
   function combine(param, _a_){return 0;}
   var Unit = [0, combine, 0, 0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform_intf);
   var Bonsai_Fix_transform_intf = [0, Unit];
   runtime.caml_register_global
    (11, Bonsai_Fix_transform_intf, cst_Bonsai_Fix_transform_intf$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform
//# unitInfo: Requires: Bonsai__Fix_transform_intf, Bonsai__Trampoline, CamlinternalMod, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform$0 = "Bonsai__Fix_transform",
    cst_bonsai$0 = "bonsai",
    cst_src_fix_transform_ml = "src/fix_transform.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalMod = global_data.CamlinternalMod,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_fix_transform_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "fix_transform.ml");
   var
    _a_ = [0, [0, 0, 0]],
    _b_ = [0, cst_src_fix_transform_ml, 8, 62],
    _c_ = [0, [0, 0, 0]],
    _d_ = [0, cst_src_fix_transform_ml, 197, 54],
    _e_ = [0, [0, 0, 0]],
    _f_ = [0, [0, 0, 0]],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Fix_transform = cst_Bonsai_Fix_transform$0;
   function Make(Types, F){
    var
     Recurse = caml_call2(CamlinternalMod[1], _b_, _a_),
     User = caml_call2(CamlinternalMod[1], _d_, _c_),
     empty_for_lazy = Types[3][3],
     empty = Types[3][2],
     combine_up = Types[3][1];
    function default_c(down, acc, computation){
     if(typeof computation === "number")
      return caml_call1(Bonsai_Trampoline[5][1], [0, acc, empty, 0]);
     switch(computation[0]){
       case 0:
        var
         value = computation[1],
         match = caml_call3(User[2], down, acc, value),
         value$0 = match[3],
         up = match[2],
         acc$0 = match[1];
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc$0, up, [0, value$0]]);
       case 1:
        var
         input = computation[6],
         reset = computation[5],
         apply_action = computation[4],
         dynamic_action = computation[3],
         input_id = computation[2],
         model = computation[1],
         match$0 = caml_call3(User[2], down, acc, input),
         input$0 = match$0[3],
         up$0 = match$0[2],
         acc$1 = match$0[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0,
                  acc$1,
                  up$0,
                  [1,
                   model,
                   input_id,
                   dynamic_action,
                   apply_action,
                   reset,
                   input$0]]);
       case 2:
        var
         reset$0 = computation[4],
         apply_action$0 = computation[3],
         static_action = computation[2],
         model$0 = computation[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0,
                  acc,
                  empty,
                  [2, model$0, static_action, apply_action$0, reset$0]]);
       case 3:
        var
         compute = computation[2],
         input$1 = computation[1],
         match$1 = caml_call3(User[2], down, acc, input$1),
         input$2 = match$1[3],
         up$1 = match$1[2],
         acc$2 = match$1[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc$2, up$1, [3, input$2, compute]]);
       case 4:
        var
         here = computation[4],
         into = computation[3],
         via = computation[2],
         from = computation[1],
         _k_ =
           function(param){
            var from = param[3], up1 = param[2], acc = param[1];
            function _M_(param){
             var
              into = param[3],
              up2 = param[2],
              acc = param[1],
              _O_ =
                [0,
                 acc,
                 caml_call2(combine_up, up1, up2),
                 [4, from, via, into, here]];
             return caml_call1(Bonsai_Trampoline[5][1], _O_);
            }
            var _N_ = caml_call3(User[1], down, acc, into);
            return caml_call2(Bonsai_Trampoline[5][2][2], _N_, _M_);
           },
         _l_ = caml_call3(User[1], down, acc, from);
        return caml_call2(Bonsai_Trampoline[5][2][2], _l_, _k_);
       case 5:
        var
         inner = computation[3],
         value$1 = computation[2],
         id = computation[1],
         match$2 = caml_call3(User[2], down, acc, value$1),
         value$2 = match$2[3],
         up1 = match$2[2],
         acc$3 = match$2[1],
         _m_ =
           function(param){
            var
             inner = param[3],
             up2 = param[2],
             acc = param[1],
             _L_ =
               [0,
                acc,
                caml_call2(combine_up, up1, up2),
                [5, id, value$2, inner]];
            return caml_call1(Bonsai_Trampoline[5][1], _L_);
           },
         _n_ = caml_call3(User[1], down, acc$3, inner);
        return caml_call2(Bonsai_Trampoline[5][2][2], _n_, _m_);
       case 6:
        var
         for_some = computation[3],
         default$0 = computation[2],
         id$0 = computation[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc, empty, [6, id$0, default$0, for_some]]);
       case 7:
        var
         by = computation[6],
         data_id = computation[5],
         cmp_id = computation[4],
         key_id = computation[3],
         key_comparator = computation[2],
         map = computation[1],
         match$3 = caml_call3(User[2], down, acc, map),
         map$0 = match$3[3],
         up1$0 = match$3[2],
         acc$4 = match$3[1],
         _o_ =
           function(param){
            var
             by = param[3],
             up2 = param[2],
             acc = param[1],
             _K_ =
               [0,
                acc,
                caml_call2(combine_up, up1$0, up2),
                [7, map$0, key_comparator, key_id, cmp_id, data_id, by]];
            return caml_call1(Bonsai_Trampoline[5][1], _K_);
           },
         _p_ = caml_call3(User[1], down, acc$4, by);
        return caml_call2(Bonsai_Trampoline[5][2][2], _p_, _o_);
       case 8:
        var
         match$4 = caml_call3(User[2], down, acc, computation[1]),
         map$1 = match$4[3],
         up1$1 = match$4[2],
         acc$5 = match$4[1],
         _q_ =
           function(param){
            var
             by = param[3],
             up2 = param[2],
             acc = param[1],
             _I_ =
               [8,
                map$1,
                computation[2],
                computation[3],
                computation[4],
                computation[5],
                computation[6],
                computation[7],
                computation[8],
                by,
                computation[10]],
             _J_ = [0, acc, caml_call2(combine_up, up1$1, up2), _I_];
            return caml_call1(Bonsai_Trampoline[5][1], _J_);
           },
         _r_ = caml_call3(User[1], down, acc$5, computation[9]);
        return caml_call2(Bonsai_Trampoline[5][2][2], _r_, _q_);
       case 9:
        var
         may_contain_path = computation[3],
         by$0 = computation[2],
         map$2 = computation[1],
         match$5 = caml_call3(User[2], down, acc, map$2),
         map$3 = match$5[3],
         up$2 = match$5[2],
         acc$6 = match$5[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc$6, up$2, [9, map$3, by$0, may_contain_path]]);
       case 10:
        var
         here$0 = computation[3],
         arms = computation[2],
         match$6 = caml_call3(User[2], down, acc, computation[1]),
         up1$2 = match$6[2],
         acc$7 = match$6[1],
         match$7 = match$6[3],
         _s_ =
           function(acc_and_up_and_arms, param){
            var v = param[2], k = param[1];
            function _E_(param){
             var arms = param[3], up = param[2], acc = param[1];
             function _F_(param){
              var
               v = param[3],
               up$0 = param[2],
               acc = param[1],
               _H_ =
                 [0,
                  acc,
                  caml_call2(combine_up, up, up$0),
                  [0, [0, k, v], arms]];
              return caml_call1(Bonsai_Trampoline[5][1], _H_);
             }
             var _G_ = caml_call3(User[1], down, acc, v);
             return caml_call2(Bonsai_Trampoline[5][2][2], _G_, _F_);
            }
            return caml_call2
                    (Bonsai_Trampoline[5][2][2], acc_and_up_and_arms, _E_);
           },
         _t_ = caml_call1(Bonsai_Trampoline[5][1], [0, acc$7, up1$2, 0]),
         _u_ = caml_call2(Core_Map[81], 0, arms),
         acc_and_upn_and_arms = caml_call3(Core_List[20], _u_, _t_, _s_),
         _v_ =
           function(param){
            var
             arms = param[3],
             upn = param[2],
             acc = param[1],
             arms$0 = caml_call2(Core_Map[8], [0, Core_Int[97]], arms);
            return caml_call1
                    (Bonsai_Trampoline[5][1],
                     [0, acc, upn, [10, match$7, arms$0, here$0]]);
           };
        return caml_call2
                (Bonsai_Trampoline[5][2][2], acc_and_upn_and_arms, _v_);
       case 11:
        var
         t = computation[1],
         _w_ =
           function(t){
            function _B_(param){
             var t = param[3];
             return caml_call1(Bonsai_Trampoline[5][1], t);
            }
            var
             _C_ = caml_call3(User[1], down, acc, t),
             _D_ = caml_call2(Bonsai_Trampoline[5][2][2], _C_, _B_);
            return caml_call1(Bonsai_Trampoline[2], _D_);
           },
         t$0 = caml_call2(Core_Lazy[30], t, _w_);
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc, empty_for_lazy, [11, t$0]]);
       case 12:
        var
         reset$1 = computation[8],
         dynamic_apply_action = computation[7],
         inner$0 = computation[6],
         model_id = computation[5],
         inject_id = computation[4],
         action_id = computation[3],
         result_id = computation[2],
         wrapper_model = computation[1],
         _x_ =
           function(param){
            var
             inner = param[3],
             up = param[2],
             acc = param[1],
             res =
               [12,
                wrapper_model,
                result_id,
                action_id,
                inject_id,
                model_id,
                inner,
                dynamic_apply_action,
                reset$1];
            return caml_call1(Bonsai_Trampoline[5][1], [0, acc, up, res]);
           },
         _y_ = caml_call3(User[1], down, acc, inner$0);
        return caml_call2(Bonsai_Trampoline[5][2][2], _y_, _x_);
       case 13:
        var
         inner$1 = computation[2],
         reset_id = computation[1],
         _z_ =
           function(param){
            var inner = param[3], up = param[2], acc = param[1];
            return caml_call1
                    (Bonsai_Trampoline[5][1],
                     [0, acc, up, [13, reset_id, inner]]);
           },
         _A_ = caml_call3(User[1], down, acc, inner$1);
        return caml_call2(Bonsai_Trampoline[5][2][2], _A_, _z_);
       default:
        var
         value$3 = computation[1],
         match$8 = caml_call3(User[2], down, acc, value$3),
         value$4 = match$8[3],
         up$3 = match$8[2],
         acc$8 = match$8[1];
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc$8, up$3, [14, value$4]]);
     }
    }
    function reduce_up(l){
     var _j_ = caml_call2(Core_List[109], l, combine_up);
     return caml_call2(Core_Option[39], _j_, empty);
    }
    function default_v(down, acc, param){
     var id = param[3], here = param[2], value = param[1];
     switch(value[0]){
       case 0:
        var c = value[1], value$0 = [0, c], up = empty, acc$0 = acc; break;
       case 1:
        var
         incr_node = value[1],
         value$0 = [1, incr_node],
         up = empty,
         acc$0 = acc;
        break;
       case 2:
        var
         name_source = value[1],
         value$0 = [2, name_source],
         up = empty,
         acc$0 = acc;
        break;
       case 3:
        var
         b = value[2],
         a = value[1],
         match = caml_call3(User[2], down, acc, a),
         a$0 = match[3],
         up_a = match[2],
         acc$1 = match[1],
         match$0 = caml_call3(User[2], down, acc$1, b),
         b$0 = match$0[3],
         up_b = match$0[2],
         acc$2 = match$0[1],
         value$1 = [3, a$0, b$0],
         value$0 = value$1,
         up = caml_call2(combine_up, up_a, up_b),
         acc$0 = acc$2;
        break;
       case 4:
        var
         match$1 = caml_call3(User[2], down, acc, value[1]),
         value$2 = match$1[3],
         up$0 = match$1[2],
         acc$3 = match$1[1],
         value$0 = [4, value$2, value[2], value[3]],
         up = up$0,
         acc$0 = acc$3;
        break;
       case 5:
        var
         match$2 = caml_call3(User[2], down, acc, value[1]),
         value$3 = match$2[3],
         up$1 = match$2[2],
         acc$4 = match$2[1],
         value$0 = [5, value$3, value[2]],
         up = up$1,
         acc$0 = acc$4;
        break;
       case 6:
        var
         match$3 = caml_call3(User[2], down, acc, value[1]),
         t1 = match$3[3],
         up1 = match$3[2],
         acc$5 = match$3[1],
         match$4 = caml_call3(User[2], down, acc$5, value[2]),
         t2 = match$4[3],
         up2 = match$4[2],
         acc$6 = match$4[1],
         value$4 = [6, t1, t2, value[3]],
         value$0 = value$4,
         up = reduce_up([0, up1, [0, up2, 0]]),
         acc$0 = acc$6;
        break;
       case 7:
        var
         match$5 = caml_call3(User[2], down, acc, value[1]),
         t1$0 = match$5[3],
         up1$0 = match$5[2],
         acc$7 = match$5[1],
         match$6 = caml_call3(User[2], down, acc$7, value[2]),
         t2$0 = match$6[3],
         up2$0 = match$6[2],
         acc$8 = match$6[1],
         match$7 = caml_call3(User[2], down, acc$8, value[3]),
         t3 = match$7[3],
         up3 = match$7[2],
         acc$9 = match$7[1],
         value$5 = [7, t1$0, t2$0, t3, value[4]],
         value$0 = value$5,
         up = reduce_up([0, up1$0, [0, up2$0, [0, up3, 0]]]),
         acc$0 = acc$9;
        break;
       case 8:
        var
         match$8 = caml_call3(User[2], down, acc, value[1]),
         t1$1 = match$8[3],
         up1$1 = match$8[2],
         acc$10 = match$8[1],
         match$9 = caml_call3(User[2], down, acc$10, value[2]),
         t2$1 = match$9[3],
         up2$1 = match$9[2],
         acc$11 = match$9[1],
         match$10 = caml_call3(User[2], down, acc$11, value[3]),
         t3$0 = match$10[3],
         up3$0 = match$10[2],
         acc$12 = match$10[1],
         match$11 = caml_call3(User[2], down, acc$12, value[4]),
         t4 = match$11[3],
         up4 = match$11[2],
         acc$13 = match$11[1],
         value$6 = [8, t1$1, t2$1, t3$0, t4, value[5]],
         value$0 = value$6,
         up = reduce_up([0, up1$1, [0, up2$1, [0, up3$0, [0, up4, 0]]]]),
         acc$0 = acc$13;
        break;
       case 9:
        var
         match$12 = caml_call3(User[2], down, acc, value[1]),
         t1$2 = match$12[3],
         up1$2 = match$12[2],
         acc$14 = match$12[1],
         match$13 = caml_call3(User[2], down, acc$14, value[2]),
         t2$2 = match$13[3],
         up2$2 = match$13[2],
         acc$15 = match$13[1],
         match$14 = caml_call3(User[2], down, acc$15, value[3]),
         t3$1 = match$14[3],
         up3$1 = match$14[2],
         acc$16 = match$14[1],
         match$15 = caml_call3(User[2], down, acc$16, value[4]),
         t4$0 = match$15[3],
         up4$0 = match$15[2],
         acc$17 = match$15[1],
         match$16 = caml_call3(User[2], down, acc$17, value[5]),
         t5 = match$16[3],
         up5 = match$16[2],
         acc$18 = match$16[1],
         up$2 =
           reduce_up
            ([0, up1$2, [0, up2$2, [0, up3$1, [0, up4$0, [0, up5, 0]]]]]),
         value$0 = [9, t1$2, t2$2, t3$1, t4$0, t5, value[6]],
         up = up$2,
         acc$0 = acc$18;
        break;
       case 10:
        var
         match$17 = caml_call3(User[2], down, acc, value[1]),
         t1$3 = match$17[3],
         up1$3 = match$17[2],
         acc$19 = match$17[1],
         match$18 = caml_call3(User[2], down, acc$19, value[2]),
         t2$3 = match$18[3],
         up2$3 = match$18[2],
         acc$20 = match$18[1],
         match$19 = caml_call3(User[2], down, acc$20, value[3]),
         t3$2 = match$19[3],
         up3$2 = match$19[2],
         acc$21 = match$19[1],
         match$20 = caml_call3(User[2], down, acc$21, value[4]),
         t4$1 = match$20[3],
         up4$1 = match$20[2],
         acc$22 = match$20[1],
         match$21 = caml_call3(User[2], down, acc$22, value[5]),
         t5$0 = match$21[3],
         up5$0 = match$21[2],
         acc$23 = match$21[1],
         match$22 = caml_call3(User[2], down, acc$23, value[6]),
         t6 = match$22[3],
         up6 = match$22[2],
         acc$24 = match$22[1],
         up$3 =
           reduce_up
            ([0,
              up1$3,
              [0, up2$3, [0, up3$2, [0, up4$1, [0, up5$0, [0, up6, 0]]]]]]),
         value$0 = [10, t1$3, t2$3, t3$2, t4$1, t5$0, t6, value[7]],
         up = up$3,
         acc$0 = acc$24;
        break;
       case 11:
        var
         match$23 = caml_call3(User[2], down, acc, value[1]),
         t1$4 = match$23[3],
         up1$4 = match$23[2],
         acc$25 = match$23[1],
         match$24 = caml_call3(User[2], down, acc$25, value[2]),
         t2$4 = match$24[3],
         up2$4 = match$24[2],
         acc$26 = match$24[1],
         match$25 = caml_call3(User[2], down, acc$26, value[3]),
         t3$3 = match$25[3],
         up3$3 = match$25[2],
         acc$27 = match$25[1],
         match$26 = caml_call3(User[2], down, acc$27, value[4]),
         t4$2 = match$26[3],
         up4$2 = match$26[2],
         acc$28 = match$26[1],
         match$27 = caml_call3(User[2], down, acc$28, value[5]),
         t5$1 = match$27[3],
         up5$1 = match$27[2],
         acc$29 = match$27[1],
         match$28 = caml_call3(User[2], down, acc$29, value[6]),
         t6$0 = match$28[3],
         up6$0 = match$28[2],
         acc$30 = match$28[1],
         match$29 = caml_call3(User[2], down, acc$30, value[7]),
         t7 = match$29[3],
         up7 = match$29[2],
         acc$31 = match$29[1],
         up$4 =
           reduce_up
            ([0,
              up1$4,
              [0,
               up2$4,
               [0, up3$3, [0, up4$2, [0, up5$1, [0, up6$0, [0, up7, 0]]]]]]]),
         value$0 = [11, t1$4, t2$4, t3$3, t4$2, t5$1, t6$0, t7, value[8]],
         up = up$4,
         acc$0 = acc$31;
        break;
       default:
        var
         e = value[1],
         value$7 = [12, e],
         value$0 = value$7,
         up = empty,
         acc$0 = acc;
     }
     return [0, acc$0, up, [0, value$0, here, id]];
    }
    function on_value(down, acc, behavior, value){
     return 264513256 <= behavior
             ? caml_call3(User[2], down, acc, value)
             : default_v(down, acc, value);
    }
    function on_computation(down, acc, behavior, computation){
     var
      _h_ =
        [246,
         function(_i_){
          return 264513256 <= behavior
                  ? caml_call3(User[1], down, acc, computation)
                  : default_c(down, acc, computation);
         }];
     return caml_call1(Bonsai_Trampoline[1], _h_);
    }
    caml_call3
     (CamlinternalMod[2], _e_, Recurse, [0, on_computation, on_value]);
    var _g_ = caml_call1(F, Recurse);
    caml_call3(CamlinternalMod[2], _f_, User, _g_);
    function transform_c(down, acc, computation){
     return caml_call4(Recurse[1], down, acc, 264513256, computation);
    }
    function transform_v(down, acc, value){
     return caml_call4(Recurse[2], down, acc, 264513256, value);
    }
    return [0, transform_c, transform_v];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform);
   var Bonsai_Fix_transform = [0, Make];
   runtime.caml_register_global
    (24, Bonsai_Fix_transform, cst_Bonsai_Fix_transform$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_min
//# unitInfo: Requires: Bonsai__Apply_action_context, Bonsai__Meta, Bonsai__Value, Core, Core__Int, Core__List, Core__Option, Core__Sexp, Core__Source_code_position, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_min$0 = "Bonsai__Proc_min",
    cst_action = "action",
    cst_bonsai$0 = "bonsai",
    cst_data_id$1 = "data id",
    cst_model_key_id$1 = "model key id",
    cst_src_proc_min_ml = "src/proc_min.ml",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Option = global_data.Core__Option,
    Ui_incr = global_data.Ui_incr,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_List = global_data.Core__List,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_min$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_min_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc_min.ml");
   var
    cst_reset_model = "reset-model",
    _g_ = [0, cst_action],
    cst_An_action_sent_to_a_wrap_h =
      "An action sent to a [wrap] has been dropped because its input was not present. This happens when the [wrap] is inactive when it receives a message.",
    cst_model_id = "model id",
    cst_action_id = "action id",
    cst_inject_id = "inject id",
    cst_outer_model_for_wrap = "outer model for wrap",
    cst_io_key_id = "io key id",
    cst_io_cmp_id = "io cmp id",
    cst_model_key_id = cst_model_key_id$1,
    cst_model_key_id$0 = cst_model_key_id$1,
    cst_data_id$0 = cst_data_id$1,
    cst_key_id = "key id",
    cst_cmp_id = "cmp id",
    cst_data_id = cst_data_id$1,
    _f_ = [0, cst_action],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module] has been dropped because its input was not present. This happens when the [of_module] is inactive when it receives a message.",
    cst_src_proc_min_ml_173_17 = "src/proc_min.ml:173:17",
    _e_ = [0, cst_src_proc_min_ml, 118, 2635, 2679],
    _c_ = [0, "Active"],
    _d_ = [0, "Inactive"],
    _b_ = [0, cst_src_proc_min_ml, 53, 1191, 1235],
    _a_ = [0, cst_src_proc_min_ml, 15, 360, 406],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc_min = cst_Bonsai_Proc_min$0;
   function read(x){return [0, x];}
   function sub(here, from, f){
    if(typeof from !== "number" && 0 === from[0]){
     var match = from[1], named = match[1];
     if(2 === named[0]){
      var
       id = match[3],
       there = match[2],
       here$0 = caml_call2(Core_Option[59], here, there);
      return caml_call1(f, [0, named, here$0, id]);
     }
    }
    var
     _G_ = Core[149],
     _H_ = caml_call1(Core_Source_code_position[4], _a_),
     via = caml_call2(Core_Type_equal[8][3], _H_, _G_),
     into = caml_call1(f, caml_call2(Bonsai_Value[21], [0, here], via));
    return [4, from, via, into, here];
   }
   function switch$0(here, match, branches, with$0){
    function _D_(key){
     try{var _F_ = caml_call1(with$0, key), computation = _F_;}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       computation = [0, caml_call1(Bonsai_Value[25], exn)];
     }
     return [0, key, computation];
    }
    var
     _E_ = caml_call2(Core_List[40], branches, _D_),
     arms = caml_call1(Core_Int[98][15], _E_);
    return [10, match, arms, here];
   }
   function fetch(id, default$0, for_some){return [6, id, default$0, for_some];
   }
   function store(id, value, inner){return [5, id, value, inner];}
   var Dynamic_scope = [0, fetch, store];
   function lifecycle(t){return [14, t];}
   var Edge = [0, lifecycle];
   function sexp_of_t(of_input_001, param){
    if(! param) return _d_;
    var arg0_002 = param[1], res0_003 = caml_call1(of_input_001, arg0_002);
    return [1, [0, _c_, [0, res0_003, 0]]];
   }
   function state_machine1
   (sexp_of_action$0,
    reset$1,
    sexp_of_model,
    equal,
    default_model,
    apply_action$0,
    input){
    var
     sexp_of_model$0 = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    if(sexp_of_action$0)
     var sth = sexp_of_action$0[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    var name = caml_call1(Core_Source_code_position[4], _b_);
    if(reset$1)
     var
      reset = reset$1[1],
      reset$0 =
        function(inject, schedule_event){
         return caml_call1
                 (reset,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$0 = function(param, _C_, _B_){return default_model;};
    function apply_action(inject, schedule_event){
     var
      context =
        caml_call2(Bonsai_Apply_action_context[3], inject, schedule_event);
     return function(input$0, model, action){
      if(input$0) var x = input$0[1], input = [0, x]; else var input = 0;
      return caml_call4(apply_action$0, context, input, model, action);};
    }
    var
     _z_ = caml_call2(Core_Type_equal[8][3], name, sexp_of_action),
     _A_ = caml_call1(Bonsai_Meta[3][7], 0);
    return [1,
            caml_call4
             (Bonsai_Meta[1][7], sexp_of_model$0, equal, default_model, name),
            _A_,
            _z_,
            apply_action,
            reset$0,
            input];
   }
   function state_machine0
   (reset, sexp_of_model, opt, equal, default_model, apply_action, param){
    if(opt)
     var sth = opt[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    var name = caml_call1(Core_Source_code_position[4], _e_);
    function apply_action$0(inject, schedule_event){
     return caml_call1
             (apply_action,
              caml_call2
               (Bonsai_Apply_action_context[3], inject, schedule_event));
    }
    if(reset)
     var
      reset$0 = reset[1],
      reset$1 =
        function(inject, schedule_event){
         return caml_call1
                 (reset$0,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$1 = function(param, _y_, _x_){return default_model;};
    var
     _v_ = caml_call2(Core_Type_equal[8][3], name, sexp_of_action),
     _w_ = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    return [2,
            caml_call4(Bonsai_Meta[1][7], _w_, equal, default_model, name),
            _v_,
            apply_action$0,
            reset$1];
   }
   function value_cutoff(t, equal){
    return [0, caml_call3(Bonsai_Value[22], 0, t, equal)];
   }
   function compute_with_clock(t, f){return [3, t, f];}
   function of_module(M, sexp_of_model, equal, default_model, input){
    function _m_(state){
     function _r_(clock, input_and_state){
      function _s_(param){
       var pattern_syntax_005 = param[2][2];
       return pattern_syntax_005;
      }
      var inject = caml_call2(Ui_incr[78][4][6], input_and_state, _s_);
      function _t_(param){
       var pattern_syntax_006 = param[1];
       return pattern_syntax_006;
      }
      var input = caml_call2(Ui_incr[78][4][6], input_and_state, _t_);
      function _u_(param){
       var pattern_syntax_007 = param[2][1];
       return pattern_syntax_007;
      }
      var model = caml_call2(Ui_incr[78][4][6], input_and_state, _u_);
      return caml_call3(M[7], input, model, inject);
     }
     return [3, caml_call2(Bonsai_Value[4], input, state), _r_];
    }
    function _n_(context, input, model, action){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     if(input){
      var input$0 = input[1];
      return caml_call5(M[6], input$0, inject, schedule_event, model, action);
     }
     var
      _o_ = [0, [1, [0, _f_, [0, caml_call1(M[4][1], action), 0]]], 0],
      _p_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
         _o_],
      _q_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_min_ml_173_17),
          _p_]];
     caml_call2(Core[257], 0, _q_);
     return model;
    }
    return sub
            (0,
             state_machine1
              ([0, M[4][1]],
               0,
               sexp_of_model,
               [0, equal],
               default_model,
               _n_,
               input),
             _m_);
   }
   var Proc_incr = [0, value_cutoff, compute_with_clock, of_module];
   function assoc(comparator, map, f){
    var
     key_id = caml_call2(Core_Type_equal[8][3], cst_key_id, comparator[1]),
     cmp_id = caml_call2(Core_Type_equal[8][3], cst_cmp_id, Core[149]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id, Core[149]),
     key_var = caml_call2(Bonsai_Value[21], 0, key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [7, map, comparator, key_id, cmp_id, data_id, by];
   }
   function assoc_on(io_comparator, model_comparator, map, get_model_key, f){
    var
     io_key_id =
       caml_call2(Core_Type_equal[8][3], cst_io_key_id, io_comparator[1]),
     io_cmp_id = caml_call2(Core_Type_equal[8][3], cst_io_cmp_id, Core[149]),
     model_key_id =
       caml_call2
        (Core_Type_equal[8][3], cst_model_key_id, model_comparator[1]),
     model_cmp_id =
       caml_call2(Core_Type_equal[8][3], cst_model_key_id$0, Core[149]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id$0, Core[149]),
     key_var = caml_call2(Bonsai_Value[21], 0, io_key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [8,
            map,
            io_comparator,
            model_comparator,
            io_key_id,
            io_cmp_id,
            model_key_id,
            model_cmp_id,
            data_id,
            by,
            get_model_key];
   }
   function lazy(t){return [11, t];}
   function wrap
   (reset, sexp_of_model, equal, default_model, apply_action, f, param){
    var model_id = caml_call2(Core_Type_equal[8][3], cst_model_id, Core[149]);
    if(reset)
     var
      reset$0 = reset[1],
      reset$1 =
        function(inject, schedule_event){
         return caml_call1
                 (reset$0,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$1 = function(param, _l_, _k_){return default_model;};
    var
     action_id = caml_call2(Core_Type_equal[8][3], cst_action_id, Core[149]),
     result_id = caml_call1(Bonsai_Meta[3][7], 0),
     inject_id = caml_call2(Core_Type_equal[8][3], cst_inject_id, Core[149]);
    function apply_action$0(inject, schedule_event, result, model, action){
     if(result){
      var result$0 = result[1];
      return caml_call4
              (apply_action,
               caml_call2
                (Bonsai_Apply_action_context[3], inject, schedule_event),
               result$0,
               model,
               action);
     }
     var
      action$0 = caml_call1(Core[149], action),
      _i_ = [0, [1, [0, _g_, [0, caml_call1(Core_Sexp[93], action$0), 0]]], 0],
      _j_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_wrap_h),
          _i_]];
     caml_call2(Core[257], 0, _j_);
     return model;
    }
    var
     model_var = caml_call2(Bonsai_Value[21], 2, model_id),
     inject_var = caml_call2(Bonsai_Value[21], 3, inject_id),
     inner = caml_call2(f, model_var, inject_var),
     _h_ = caml_call2(Core_Option[39], sexp_of_model, Core[149]),
     wrapper_model =
       caml_call4
        (Bonsai_Meta[1][7],
         _h_,
         equal,
         default_model,
         cst_outer_model_for_wrap);
    return [12,
            wrapper_model,
            result_id,
            action_id,
            inject_id,
            model_id,
            inner,
            apply_action$0,
            reset$1];
   }
   function with_model_resetter(f){
    var
     reset_id = caml_call2(Core_Type_equal[8][3], cst_reset_model, Core[149]),
     inner = caml_call1(f, caml_call2(Bonsai_Value[21], 5, reset_id));
    return [13, reset_id, inner];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_min);
   var
    Bonsai_Proc_min =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       Dynamic_scope,
       Edge,
       [0, sexp_of_t],
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       with_model_resetter,
       0];
   runtime.caml_register_global(46, Bonsai_Proc_min, cst_Bonsai_Proc_min$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Incr0
//# unitInfo: Requires: Bonsai__Proc_min, Bonsai__Value, Core, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Incr0$0 = "Bonsai__Incr0",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Incr0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr0.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "incr0.ml");
   var
    cst_to_value = "to_value",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Incr0 = cst_Bonsai_Incr0$0;
   function compute(t, f){
    function _c_(param, input){return caml_call1(f, input);}
    return caml_call2(Bonsai_Proc_min[4][2], t, _c_);
   }
   function with_clock(f){
    function _a_(clock, param){return caml_call1(f, clock);}
    var _b_ = caml_call1(Bonsai_Value[2], 0);
    return caml_call2(Bonsai_Proc_min[4][2], _b_, _a_);
   }
   function to_value(incr){
    return [0,
            [1, incr],
            0,
            caml_call2(Core_Type_equal[8][3], cst_to_value, Core[149])];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Incr0);
   var Bonsai_Incr0 = [0, compute, with_clock, to_value];
   runtime.caml_register_global(16, Bonsai_Incr0, cst_Bonsai_Incr0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Map0_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Map0_intf = "Bonsai__Map0_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Map0_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/map0_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "map0_intf.ml");
   var Map0 = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Map0_intf);
   var Bonsai_Map0_intf = [0, Map0];
   runtime.caml_register_global(11, Bonsai_Map0_intf, cst_Bonsai_Map0_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Map0
//# unitInfo: Requires: Bonsai__Map0_intf, Incr_map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Map0$0 = "Bonsai__Map0",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incr_map = global_data.Incr_map,
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Map0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/map0.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "map0.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Map0 = cst_Bonsai_Map0$0;
   function Make(Input){
    function map(m, f){
     var _a4_ = Incr_map[5];
     function _a5_(eta){return caml_call4(_a4_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a5_);
    }
    function mapi(m, f){
     var _a2_ = Incr_map[3];
     function _a3_(eta){return caml_call4(_a2_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a3_);
    }
    var func = Input[3][1], arg = Incr_map[1];
    function _a_(eta){return caml_call2(arg, 0, eta);}
    function of_set(_a1_){return caml_call2(func, _a1_, _a_);}
    function filter_mapi(m, f){
     var _aZ_ = Incr_map[2];
     function _a0_(eta){return caml_call4(_aZ_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a0_);
    }
    function filter_map(m, f){
     var _aX_ = Incr_map[4];
     function _aY_(eta){return caml_call4(_aX_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _aY_);
    }
    function partition_mapi(m, f){
     var _aV_ = Incr_map[10];
     function _aW_(eta){return caml_call4(_aV_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _aW_);
    }
    function unordered_fold(update, m, init, add, remove){
     var _aT_ = Incr_map[12];
     function _aU_(eta){
      return caml_call10(_aT_, 0, 0, update, 0, 0, 0, eta, init, add, remove);
     }
     return caml_call2(Input[3][1], m, _aU_);
    }
    function unordered_fold_with_extra
    (update, m, e, init, add, remove, extra_changed){
     function _aP_(m_and_e){
      function _aR_(param){
       var pattern_syntax_001 = param[2];
       return pattern_syntax_001;
      }
      var e = caml_call2(Ui_incr[78][4][6], m_and_e, _aR_);
      function _aS_(param){
       var pattern_syntax_002 = param[1];
       return pattern_syntax_002;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_e, _aS_);
      return caml_call13
              (Incr_map[13],
               0,
               0,
               0,
               update,
               0,
               0,
               0,
               m,
               e,
               init,
               add,
               remove,
               extra_changed);
     }
     var _aQ_ = caml_call2(Input[1][1], m, e);
     return caml_call2(Input[3][1], _aQ_, _aP_);
    }
    function cutoff(m, equal){
     var func = Incr_map[14], _aN_ = caml_call1(Ui_incr[60][5], equal);
     function _aO_(eta){return caml_call3(func, 0, eta, _aN_);}
     return caml_call2(Input[3][1], m, _aO_);
    }
    function mapi_count(m, M, f){
     var _aK_ = Incr_map[15], _aL_ = [0, M[2]];
     function _aM_(eta){return caml_call5(_aK_, 0, 0, eta, _aL_, f);}
     return caml_call2(Input[3][1], m, _aM_);
    }
    function map_count(m, M, f){
     var _aH_ = Incr_map[16], _aI_ = [0, M[2]];
     function _aJ_(eta){return caml_call5(_aH_, 0, 0, eta, _aI_, f);}
     return caml_call2(Input[3][1], m, _aJ_);
    }
    function mapi_min(m, M, f){
     var _aE_ = Incr_map[17], _aF_ = [0, M[2]];
     function _aG_(eta){return caml_call5(_aE_, 0, 0, eta, _aF_, f);}
     return caml_call2(Input[3][1], m, _aG_);
    }
    function mapi_max(m, M, f){
     var _aB_ = Incr_map[18], _aC_ = [0, M[2]];
     function _aD_(eta){return caml_call5(_aB_, 0, 0, eta, _aC_, f);}
     return caml_call2(Input[3][1], m, _aD_);
    }
    function map_min(m, M, f){
     var _ay_ = Incr_map[19], _az_ = [0, M[2]];
     function _aA_(eta){return caml_call5(_ay_, 0, 0, eta, _az_, f);}
     return caml_call2(Input[3][1], m, _aA_);
    }
    function map_max(m, M, f){
     var _av_ = Incr_map[20], _aw_ = [0, M[2]];
     function _ax_(eta){return caml_call5(_av_, 0, 0, eta, _aw_, f);}
     return caml_call2(Input[3][1], m, _ax_);
    }
    function min_value(m, M){
     var _as_ = Incr_map[21], _at_ = [0, M[2]];
     function _au_(eta){return caml_call4(_as_, 0, 0, eta, _at_);}
     return caml_call2(Input[3][1], m, _au_);
    }
    function max_value(m, M){
     var _ap_ = Incr_map[22], _aq_ = [0, M[2]];
     function _ar_(eta){return caml_call4(_ap_, 0, 0, eta, _aq_);}
     return caml_call2(Input[3][1], m, _ar_);
    }
    function mapi_bounds(m, M, f){
     var _am_ = Incr_map[23], _an_ = [0, M[2]];
     function _ao_(eta){return caml_call5(_am_, 0, 0, eta, _an_, f);}
     return caml_call2(Input[3][1], m, _ao_);
    }
    function map_bounds(m, M, f){
     var _aj_ = Incr_map[24], _ak_ = [0, M[2]];
     function _al_(eta){return caml_call5(_aj_, 0, 0, eta, _ak_, f);}
     return caml_call2(Input[3][1], m, _al_);
    }
    function value_bounds(m, M){
     var _ag_ = Incr_map[25], _ah_ = [0, M[2]];
     function _ai_(eta){return caml_call4(_ag_, 0, 0, eta, _ah_);}
     return caml_call2(Input[3][1], m, _ai_);
    }
    function merge(a, b, f){
     function _ac_(a_and_b){
      function _ae_(param){
       var pattern_syntax_003 = param[1];
       return pattern_syntax_003;
      }
      var a = caml_call2(Ui_incr[78][4][6], a_and_b, _ae_);
      function _af_(param){
       var pattern_syntax_004 = param[2];
       return pattern_syntax_004;
      }
      var b = caml_call2(Ui_incr[78][4][6], a_and_b, _af_);
      return caml_call6(Incr_map[26], 0, 0, 0, a, b, f);
     }
     var _ad_ = caml_call2(Input[1][1], a, b);
     return caml_call2(Input[3][1], _ad_, _ac_);
    }
    function merge_both_some(a, b, f){
     function ___(a_and_b){
      function _aa_(param){
       var pattern_syntax_005 = param[1];
       return pattern_syntax_005;
      }
      var a = caml_call2(Ui_incr[78][4][6], a_and_b, _aa_);
      function _ab_(param){
       var pattern_syntax_006 = param[2];
       return pattern_syntax_006;
      }
      var b = caml_call2(Ui_incr[78][4][6], a_and_b, _ab_);
      return caml_call7(Incr_map[27], 0, 0, 0, 0, a, b, f);
     }
     var _$_ = caml_call2(Input[1][1], a, b);
     return caml_call2(Input[3][1], _$_, ___);
    }
    function unzip(m){
     function _Z_(m){
      var
       match = caml_call4(Incr_map[30], 0, 0, 0, m),
       r = match[2],
       l = match[1];
      return caml_call2(Ui_incr[42], l, r);
     }
     return caml_call2(Input[3][1], m, _Z_);
    }
    function unzip_mapi(m, f){
     function _Y_(m){
      var
       match = caml_call6(Incr_map[31], 0, 0, 0, 0, m, f),
       r = match[2],
       l = match[1];
      return caml_call2(Ui_incr[42], l, r);
     }
     return caml_call2(Input[3][1], m, _Y_);
    }
    var func$0 = Input[3][1], arg$0 = Incr_map[36];
    function _b_(eta){return caml_call2(arg$0, 0, eta);}
    function keys(_X_){return caml_call2(func$0, _X_, _b_);}
    function rank(m, k){
     function _T_(m_and_k){
      function _V_(param){
       var pattern_syntax_007 = param[2];
       return pattern_syntax_007;
      }
      var k = caml_call2(Ui_incr[78][4][6], m_and_k, _V_);
      function _W_(param){
       var pattern_syntax_008 = param[1];
       return pattern_syntax_008;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_k, _W_);
      return caml_call3(Incr_map[37], 0, m, k);
     }
     var _U_ = caml_call2(Input[1][1], m, k);
     return caml_call2(Input[3][1], _U_, _T_);
    }
    function subrange(m, bounds){
     function _P_(m_and_bounds){
      function _R_(param){
       var pattern_syntax_009 = param[2];
       return pattern_syntax_009;
      }
      var bounds = caml_call2(Ui_incr[78][4][6], m_and_bounds, _R_);
      function _S_(param){
       var pattern_syntax_010 = param[1];
       return pattern_syntax_010;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_bounds, _S_);
      return caml_call4(Incr_map[38], 0, 0, m, bounds);
     }
     var _Q_ = caml_call2(Input[1][1], m, bounds);
     return caml_call2(Input[3][1], _Q_, _P_);
    }
    function subrange_by_rank(m, bounds){
     function _L_(m_and_bounds){
      function _N_(param){
       var pattern_syntax_011 = param[2];
       return pattern_syntax_011;
      }
      var bounds = caml_call2(Ui_incr[78][4][6], m_and_bounds, _N_);
      function _O_(param){
       var pattern_syntax_012 = param[1];
       return pattern_syntax_012;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_bounds, _O_);
      return caml_call4(Incr_map[39], 0, 0, m, bounds);
     }
     var _M_ = caml_call2(Input[1][1], m, bounds);
     return caml_call2(Input[3][1], _M_, _L_);
    }
    function rekey(m, M, f){
     var _I_ = Incr_map[40], _J_ = [0, M[2]];
     function _K_(eta){return caml_call5(_I_, 0, 0, eta, _J_, f);}
     return caml_call2(Input[3][1], m, _K_);
    }
    function index_byi(m, M, index){
     var _F_ = Incr_map[41], _G_ = [0, M[2]];
     function _H_(eta){return caml_call5(_F_, 0, 0, eta, _G_, index);}
     return caml_call2(Input[3][1], m, _H_);
    }
    function index_by(m, M, index){
     var _C_ = Incr_map[42], _D_ = [0, M[2]];
     function _E_(eta){return caml_call5(_C_, 0, 0, eta, _D_, index);}
     return caml_call2(Input[3][1], m, _E_);
    }
    function unordered_fold_nested_maps(update, m, init, add, remove){
     var _A_ = Incr_map[43];
     function _B_(eta){
      return caml_call8(_A_, 0, 0, 0, update, eta, init, add, remove);
     }
     return caml_call2(Input[3][1], m, _B_);
    }
    function transpose(M, m){
     var _z_ = caml_call3(Incr_map[44], 0, 0, [0, M[2]]);
     return caml_call2(Input[3][1], m, _z_);
    }
    function collapse(m, M){
     var _w_ = Incr_map[45], _x_ = [0, M[2]];
     function _y_(eta){return caml_call4(_w_, 0, 0, eta, _x_);}
     return caml_call2(Input[3][1], m, _y_);
    }
    function collapse_by(m, merge_keys, M){
     var _t_ = Incr_map[46], _u_ = [0, M[2]];
     function _v_(eta){return caml_call5(_t_, 0, 0, eta, merge_keys, _u_);}
     return caml_call2(Input[3][1], m, _v_);
    }
    function expand(m, M_outer, M_inner){
     var _p_ = Incr_map[47], _q_ = [0, M_outer[2]], _r_ = [0, M_inner[2]];
     function _s_(eta){return caml_call5(_p_, 0, 0, eta, _q_, _r_);}
     return caml_call2(Input[3][1], m, _s_);
    }
    function counti(m, f){
     var _n_ = Incr_map[48];
     function _o_(eta){return caml_call4(_n_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _o_);
    }
    function count(m, f){
     var _l_ = Incr_map[49];
     function _m_(eta){return caml_call4(_l_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _m_);
    }
    function for_alli(m, f){
     var _j_ = Incr_map[50];
     function _k_(eta){return caml_call4(_j_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _k_);
    }
    function for_all(m, f){
     var _h_ = Incr_map[51];
     function _i_(eta){return caml_call4(_h_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _i_);
    }
    function existsi(m, f){
     var _f_ = Incr_map[52];
     function _g_(eta){return caml_call4(_f_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _g_);
    }
    function exists(m, f){
     var _d_ = Incr_map[53];
     function _e_(eta){return caml_call4(_d_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _e_);
    }
    function sum(m, algebra, f){
     function _c_(m){return caml_call5(Incr_map[54], 0, 0, m, algebra, f);}
     return caml_call2(Input[3][1], m, _c_);
    }
    return [0,
            mapi,
            map,
            of_set,
            filter_mapi,
            filter_map,
            partition_mapi,
            unordered_fold,
            unordered_fold_with_extra,
            cutoff,
            mapi_count,
            map_count,
            mapi_min,
            mapi_max,
            map_min,
            map_max,
            min_value,
            max_value,
            mapi_bounds,
            map_bounds,
            value_bounds,
            merge,
            merge_both_some,
            unzip,
            unzip_mapi,
            keys,
            rank,
            subrange,
            subrange_by_rank,
            rekey,
            index_byi,
            index_by,
            unordered_fold_nested_maps,
            transpose,
            collapse,
            collapse_by,
            expand,
            counti,
            count,
            for_alli,
            for_all,
            existsi,
            exists,
            sum];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Map0);
   var Bonsai_Map0 = [0, Make];
   runtime.caml_register_global(13, Bonsai_Map0, cst_Bonsai_Map0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc
//# unitInfo: Requires: Base__Applicative, Bonsai__Apply_action_context, Bonsai__Computation, Bonsai__Incr0, Bonsai__Map0, Bonsai__Path, Bonsai__Proc_min, Bonsai__Value, Bonsai__Var, CamlinternalLazy, Core, Core__Bool, Core__Comparator, Core__Error, Core__Int, Core__List, Core__Map, Core__Option, Core__Source_code_position, Core__Time_ns, Core__Tuple, Core__Type_equal, Core__Unique_id, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Ui_effect, Ui_incr, Ui_time_source
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_After = "After",
    cst_Before = "Before",
    cst_Bonsai_Proc$0 = "Bonsai__Proc",
    cst_Finished = "Finished",
    cst_Schedule_effect = "Schedule_effect",
    cst_Set = "Set",
    cst_Wait_for = "Wait_for",
    cst_Waiting_for = "Waiting_for",
    cst_Waiting_for_effect_to_fini = "Waiting_for_effect_to_finish",
    cst_aborted = "aborted",
    cst_after = "after",
    cst_before = "before",
    cst_bonsai$0 = "bonsai",
    cst_finished = "finished",
    cst_schedule_effect = "schedule_effect",
    cst_src_proc_ml = "src/proc.ml",
    cst_wait_for = "wait_for",
    cst_waiting_for = "waiting_for",
    cst_waiting_for_effect_to_fini = "waiting_for_effect_to_finish",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_125 = "src/proc.ml.Effect_throttling.Poll_result.t",
    error_source_200 = "src/proc.ml.Clock.Before_or_after.t",
    error_source_206 = "src/proc.ml.Clock.Every_model.t",
    error_source_229 = "src/proc.ml.Clock.Every_action.t",
    Core = global_data.Core,
    Core_Tuple = global_data.Core__Tuple,
    Core_Map = global_data.Core__Map,
    Core_List = global_data.Core__List,
    Bonsai_Value = global_data.Bonsai__Value,
    Ui_effect = global_data.Ui_effect,
    Core_Time_ns = global_data.Core__Time_ns,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ui_time_source = global_data.Ui_time_source,
    Ui_incr = global_data.Ui_incr,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Bonsai_Var = global_data.Bonsai__Var,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Error = global_data.Core__Error,
    Core_Int = global_data.Core__Int,
    Core_Unit = global_data.Core__Unit,
    Bonsai_Path = global_data.Bonsai__Path,
    Core_Bool = global_data.Core__Bool,
    Core_Comparator = global_data.Core__Comparator,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Bonsai_Incr0 = global_data.Bonsai__Incr0,
    Bonsai_Computation = global_data.Bonsai__Computation,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Core_Unique_id = global_data.Core__Unique_id,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc.ml");
   var
    read = Bonsai_Proc_min[1],
    sub = Bonsai_Proc_min[2],
    switch$0 = Bonsai_Proc_min[3],
    Proc_incr = Bonsai_Proc_min[4],
    Dynamic_scope = Bonsai_Proc_min[5],
    Edge = Bonsai_Proc_min[6],
    Computation_status = Bonsai_Proc_min[7],
    state_machine1 = Bonsai_Proc_min[8],
    state_machine0 = Bonsai_Proc_min[9],
    assoc = Bonsai_Proc_min[10],
    assoc_on = Bonsai_Proc_min[11],
    lazy = Bonsai_Proc_min[12],
    wrap = Bonsai_Proc_min[13],
    with_model_resetter = Bonsai_Proc_min[14],
    path = Bonsai_Proc_min[15],
    _dv_ = [0, [0, cst_src_proc_ml, 1274, 38189, 38195]],
    _dw_ = [0, [0, cst_src_proc_ml, 1273, 38166, 38172]],
    _dt_ = [0, [0, cst_src_proc_ml, 1267, 38037, 38043]],
    _du_ = [0, [0, cst_src_proc_ml, 1266, 38014, 38020]],
    _dm_ = [0, [0, cst_src_proc_ml, 1235, 36866, 36872]],
    _dn_ = [0, [0, cst_src_proc_ml, 1234, 36841, 36847]],
    _do_ = [0, [0, cst_src_proc_ml, 1233, 36816, 36822]],
    _dp_ = [0, [0, cst_src_proc_ml, 1232, 36791, 36797]],
    _dq_ = [0, [0, cst_src_proc_ml, 1231, 36766, 36772]],
    _dr_ = [0, [0, cst_src_proc_ml, 1230, 36741, 36747]],
    _ds_ = [0, [0, cst_src_proc_ml, 1229, 36716, 36722]],
    _dg_ = [0, [0, cst_src_proc_ml, 1224, 36599, 36605]],
    _dh_ = [0, [0, cst_src_proc_ml, 1223, 36574, 36580]],
    _di_ = [0, [0, cst_src_proc_ml, 1222, 36549, 36555]],
    _dj_ = [0, [0, cst_src_proc_ml, 1221, 36524, 36530]],
    _dk_ = [0, [0, cst_src_proc_ml, 1220, 36499, 36505]],
    _dl_ = [0, [0, cst_src_proc_ml, 1219, 36474, 36480]],
    _db_ = [0, [0, cst_src_proc_ml, 1214, 36363, 36369]],
    _dc_ = [0, [0, cst_src_proc_ml, 1213, 36338, 36344]],
    _dd_ = [0, [0, cst_src_proc_ml, 1212, 36313, 36319]],
    _de_ = [0, [0, cst_src_proc_ml, 1211, 36288, 36294]],
    _df_ = [0, [0, cst_src_proc_ml, 1210, 36263, 36269]],
    _c9_ = [0, [0, cst_src_proc_ml, 1205, 36158, 36164]],
    _c__ = [0, [0, cst_src_proc_ml, 1204, 36133, 36139]],
    _c$_ = [0, [0, cst_src_proc_ml, 1203, 36108, 36114]],
    _da_ = [0, [0, cst_src_proc_ml, 1202, 36083, 36089]],
    _c6_ = [0, [0, cst_src_proc_ml, 1197, 35984, 35990]],
    _c7_ = [0, [0, cst_src_proc_ml, 1196, 35959, 35965]],
    _c8_ = [0, [0, cst_src_proc_ml, 1195, 35934, 35940]],
    _c4_ = [0, [0, cst_src_proc_ml, 1184, 35788, 35794]],
    _c5_ = [0, [0, cst_src_proc_ml, 1183, 35765, 35771]],
    _c1_ = [0, [0, cst_src_proc_ml, 1177, 35687, 35693]],
    _c2_ = [0, [0, cst_src_proc_ml, 1176, 35664, 35670]],
    _c3_ = [0, [0, cst_src_proc_ml, 1175, 35641, 35647]],
    _cP_ = [0, [0, cst_src_proc_ml, 1157, 35290, 35294]],
    _cQ_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cR_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cS_ = [0, [0, cst_src_proc_ml, 1149, 35025, 35033]],
    _cT_ = [0, [0, cst_src_proc_ml, 1148, 35000, 35006]],
    _cU_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cV_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cW_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cX_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cY_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _cZ_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _c0_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _cI_ = [0, [0, cst_src_proc_ml, 1122, 34420, 34424]],
    _cJ_ = [0, [0, cst_src_proc_ml, 1121, 34331, 34335]],
    _cK_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cL_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cM_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cN_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cO_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cF_ = [0, "Add"],
    _cG_ = [0, "Remove"],
    _cH_ = [0, "Change"],
    _cE_ = [0, 0],
    _ci_ = [0, cst_src_proc_ml, 983, 6],
    _cf_ = [0, cst_src_proc_ml, 983, 6],
    _cd_ = [0, [0, cst_src_proc_ml, 987, 29876, 29884]],
    _ce_ = [0, [0, cst_src_proc_ml, 986, 29831, 29839]],
    _cg_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _ch_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _cl_ = [0, cst_src_proc_ml, 983, 6],
    _cj_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _ck_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _cm_ = [0, cst_src_proc_ml, 984, 29738, 29746],
    _cb_ = [0, [0, cst_src_proc_ml, 992, 30038, 30044]],
    _cc_ = [0, [0, cst_src_proc_ml, 991, 30015, 30019]],
    _cn_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _co_ = [0, [0, cst_src_proc_ml, 982, 29675, 29679]],
    _cp_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cq_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cr_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cs_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _ct_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cu_ = [0, [0, cst_src_proc_ml, 955, 28614, 28620]],
    _cv_ = [0, [0, cst_src_proc_ml, 954, 28589, 28593]],
    _cw_ = [0, [0, cst_src_proc_ml, 953, 28538, 28542]],
    _cx_ = [0, [0, cst_src_proc_ml, 947, 28333, 28339]],
    _cy_ = [0, [0, cst_src_proc_ml, 946, 28305, 28309]],
    _cz_ = [0, [0, cst_src_proc_ml, 940, 28136, 28142]],
    _cA_ = [0, [0, cst_src_proc_ml, 939, 28112, 28116]],
    _b$_ = [0, cst_Wait_for],
    _ca_ = [0, cst_Schedule_effect],
    _b9_ = [0, cst_Waiting_for],
    _b__ = [0, cst_Waiting_for_effect_to_fini],
    _b4_ = [0, cst_After],
    _b5_ = [0, cst_Before],
    _b0_ = [0, [0, cst_src_proc_ml, 866, 26101, 26109]],
    _b1_ = [0, [0, cst_src_proc_ml, 865, 26080, 26086]],
    _b2_ = [0, [0, cst_src_proc_ml, 864, 26041, 26047]],
    _b3_ = [0, [0, cst_src_proc_ml, 884, 26577, 26581]],
    _bM_ = [0, cst_src_proc_ml, 810, 2],
    cst_not_found = "not found",
    _bJ_ = [0, "key"],
    cst_Incremental_glitch = "Incremental glitch",
    cst_src_proc_ml_821_29 = "src/proc.ml:821:29",
    cst_BUG = "BUG",
    _bK_ = [0, [0, cst_src_proc_ml, 813, 24490, 24494]],
    _bL_ = [0, [0, cst_src_proc_ml, 812, 24411, 24415]],
    _bQ_ = [0, cst_src_proc_ml, 810, 2],
    _bP_ = [0, [0, cst_src_proc_ml, 823, 24816, 24820]],
    _bT_ = [0, cst_src_proc_ml, 810, 2],
    _bR_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bS_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bN_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bO_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bU_ = [0, cst_src_proc_ml, 811, 24390, 24394],
    _bV_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bW_ = [0, [0, cst_src_proc_ml, 807, 24295, 24299]],
    _bX_ = [0, [0, cst_src_proc_ml, 806, 24273, 24275]],
    _bY_ = [0, [0, cst_src_proc_ml, 803, 24196, 24200]],
    _bZ_ = [0, [0, cst_src_proc_ml, 802, 24178, 24180]],
    _bI_ = [0, [0, cst_src_proc_ml, 796, 23985, 23987]],
    _by_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bz_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bA_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bB_ = [0, [0, cst_src_proc_ml, 788, 23794, 23798]],
    _bC_ = [0, [0, cst_src_proc_ml, 787, 23773, 23775]],
    _bD_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bE_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bF_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bG_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bH_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bl_ = [0, cst_src_proc_ml, 765, 2],
    _bg_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bh_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bi_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bj_ = [0, [0, cst_src_proc_ml, 769, 23134, 23140]],
    _bk_ = [0, [0, cst_src_proc_ml, 768, 23111, 23115]],
    _bo_ = [0, cst_src_proc_ml, 765, 2],
    _bm_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _bn_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _bp_ = [0, cst_src_proc_ml, 766, 23050, 23054],
    _bq_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _br_ = [0, [0, cst_src_proc_ml, 764, 22954, 22956]],
    _bs_ = [0, [0, cst_src_proc_ml, 763, 22920, 22922]],
    _bt_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bu_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bv_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bw_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bx_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bf_ = [0, [0, cst_src_proc_ml, 755, 22619, 22621]],
    _a3_ = [0, cst_src_proc_ml, 740, 2],
    _a6_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a7_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a9_ = [0, cst_src_proc_ml, 740, 2],
    _a8_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a4_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _a5_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _a__ = [0, cst_src_proc_ml, 741, 22332, 22336],
    _a$_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _ba_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bb_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bc_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bd_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _be_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    cst_BUG_finished_effect_even_t =
      "BUG:  finished effect even though not running",
    _aR_ = [0, "here"],
    _aS_ = [0, cst_src_proc_ml, 710, 21539, 21571],
    _aT_ = [0, 1, 0],
    _aU_ = [0, cst_src_proc_ml, 707, 21372, 21404],
    _aV_ = [0, cst_src_proc_ml, 704, 21218, 21250],
    _aW_ = [0, 0, 0],
    _aX_ = [0, 1, 0],
    _aY_ = [0, 0, 0],
    _aZ_ = [0, 1, 0],
    _aH_ = [0, [0, cst_src_proc_ml, 720, 21836, 21840]],
    _aI_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aJ_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aK_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aL_ = [0, [0, cst_src_proc_ml, 716, 21723, 21729]],
    _aM_ = [0, [0, cst_src_proc_ml, 715, 21697, 21701]],
    _aN_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aO_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aP_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aQ_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _a0_ = [0, 0, 0],
    _a1_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aG_ = [0, "for"],
    _aE_ = [0, cst_Finished],
    _aF_ = [0, cst_Aborted],
    _ar_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _as_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _at_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _au_ = [0, [0, cst_src_proc_ml, 562, 15702, 15710]],
    _av_ = [0, [0, cst_src_proc_ml, 561, 15677, 15683]],
    _aw_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _ax_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _ay_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _az_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _aA_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _aB_ = [0, [0, cst_src_proc_ml, 549, 15280, 15288]],
    _aC_ = [0, [0, cst_src_proc_ml, 548, 15257, 15263]],
    _aD_ = [0, [0, cst_src_proc_ml, 547, 15216, 15222]],
    _ag_ = [0, [0, cst_src_proc_ml, 502, 13893, 13899]],
    _ah_ = [0, [0, cst_src_proc_ml, 495, 13611, 13619]],
    _ai_ = [0, [0, cst_src_proc_ml, 494, 13586, 13592]],
    _aj_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _ak_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _al_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _am_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _af_ = [0, cst_Set],
    _ad_ = [0, "last_result"],
    _ae_ = [0, "last_seqnum"],
    _an_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _ao_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _ap_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _aq_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _T_ = [0, cst_src_proc_ml, 405, 6],
    _S_ = [0, [0, cst_src_proc_ml, 412, 11234, 11242]],
    _W_ = [0, cst_src_proc_ml, 405, 6],
    _U_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _V_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _R_ = [0, [0, cst_src_proc_ml, 407, 11035, 11043]],
    _X_ = [0, cst_src_proc_ml, 406, 11019, 11027],
    _Y_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _Z_ = [0, [0, cst_src_proc_ml, 404, 10971, 10975]],
    ___ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _$_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _aa_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _ab_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _ac_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _M_ = [0, [0, cst_src_proc_ml, 375, 9954, 9960]],
    _N_ = [0, [0, cst_src_proc_ml, 374, 9938, 9942]],
    _O_ = [0, [0, cst_src_proc_ml, 369, 9783, 9789]],
    _P_ = [0, [0, cst_src_proc_ml, 368, 9762, 9766]],
    _H_ = [0, [0, cst_src_proc_ml, 356, 9472, 9474]],
    _I_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _J_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _K_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _F_ = [0, [0, cst_src_proc_ml, 342, 9145, 9147]],
    _y_ = [0, [0, cst_src_proc_ml, 327, 8821, 8823]],
    _z_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _A_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _B_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _C_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _D_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _w_ = [0, [0, cst_src_proc_ml, 320, 8537, 8539]],
    _u_ = [0, cst_Set],
    _v_ = [0, "Toggle"],
    _x_ = [0, [0, cst_src_proc_ml, 309, 8207, 8209]],
    _m_ = [0, [0, cst_src_proc_ml, 256, 7051, 7053]],
    _n_ = [0, [0, cst_src_proc_ml, 253, 6954, 6958]],
    _o_ = [0, [0, cst_src_proc_ml, 252, 6935, 6937]],
    _p_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _q_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _r_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _s_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _t_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _k_ = [0, [0, cst_src_proc_ml, 188, 4868, 4870]],
    _l_ = [0, [0, cst_src_proc_ml, 179, 4621, 4623]],
    _i_ = [0, [0, cst_src_proc_ml, 166, 4352, 4354]],
    _j_ = [0, [0, cst_src_proc_ml, 157, 4090, 4092]],
    _f_ = [0, "action"],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module1] has been dropped because its input was not present. This happens when the [of_module1] is inactive when it receives a message.",
    cst_src_proc_ml_101_14 = "src/proc.ml:101:14",
    _e_ = [0, [0, cst_src_proc_ml, 109, 2889, 2891]],
    _g_ = [0, [0, cst_src_proc_ml, 89, 2221, 2223]],
    _h_ = [0, [0, cst_src_proc_ml, 88, 2187, 2189]],
    _c_ = [0, [0, cst_src_proc_ml, 73, 1891, 1893]],
    _d_ = [0, [0, cst_src_proc_ml, 72, 1825, 1827]],
    _b_ = [0, cst_src_proc_ml, 62, 1549, 1575],
    _a_ = [0, [0, cst_src_proc_ml, 45, 1037, 1041]],
    _G_ = [0, [0, cst_src_proc_ml, 341, 9120, 9122]],
    cst_request_was_aborted = "request was aborted",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc = cst_Bonsai_Proc$0;
   function map(here, t, f){
    var _m6_ = caml_call2(Bonsai_Value[3], t, f);
    return [0, _m6_[1], here, _m6_[3]];
   }
   var both = Bonsai_Value[4], map2 = Bonsai_Value[10];
   function arr(here, t, f){return caml_call1(read, map(here, t, f));}
   function cutoff(t, equal){
    return caml_call3(Bonsai_Value[22], 1, t, equal);
   }
   var
    map7 = Bonsai_Value[20],
    map6 = Bonsai_Value[19],
    map5 = Bonsai_Value[18],
    map4 = Bonsai_Value[17],
    map3 = Bonsai_Value[16],
    Let_syntax =
      [0,
       sub,
       switch$0,
       read,
       map,
       both,
       map2,
       arr,
       cutoff,
       map3,
       map4,
       map5,
       map6,
       map7];
   function symbol_map(a, f){return caml_call3(Let_syntax[4], 0, a, f);}
   function symbol(f, a){
    function _m5_(f, a){return caml_call1(f, a);}
    return caml_call3(Bonsai_Value[10], f, a, _m5_);
   }
   function symbol$0(f, a){return caml_call3(Let_syntax[4], 0, a, f);}
   var Let_syntax$0 = [0, read, Let_syntax, symbol_map, symbol, symbol$0];
   function pure(f, i){
    return caml_call1(read, caml_call2(Bonsai_Value[3], i, f));
   }
   function const$0(x){
    return caml_call1(read, caml_call1(Bonsai_Value[2], x));
   }
   function fix(input, f){
    function recurse(i2){
     return caml_call1
             (lazy, [246, function(_m4_){return caml_call2(f, recurse, i2);}]);
    }
    return caml_call2(f, recurse, input);
   }
   function fix2(a, b, f){
    function recurse(a, b){
     return caml_call1
             (lazy,
              [246, function(_m3_){return caml_call3(f, recurse, a, b);}]);
    }
    return caml_call3(f, recurse, a, b);
   }
   function with_model_resetter$0(inside){
    return caml_call1
            (with_model_resetter,
             function(reset){
              function _m1_(r){
               var _m2_ = caml_call2(Bonsai_Value[4], r, reset);
               return caml_call1(Let_syntax$0[1], _m2_);
              }
              return caml_call3(Let_syntax$0[2][1], _a_, inside, _m1_);
             });
   }
   function enum$0(E, match, with$0){
    var
     all = E[2],
     include = caml_call1(Core_Comparator[7], [0, E[1], E[4]]),
     comparator = include[1],
     forward_index = caml_call1(Core_List[30], all);
    function _mY_(i, k){return [0, k, i];}
    var
     _mZ_ = caml_call2(Core_List[41], all, _mY_),
     reverse_index = caml_call2(Core_Map[8], [0, comparator], _mZ_),
     _m0_ = caml_call1(Core_Map[45], reverse_index),
     branches = forward_index.length - 1,
     match$0 = caml_call2(Let_syntax$0[3], match, _m0_);
    function with$1(i){
     return caml_call1
             (with$0, runtime.caml_check_bound(forward_index, i)[1 + i]);
    }
    return caml_call4(Let_syntax$0[2][2], _b_, match$0, branches, with$1);
   }
   function scope_model(M, v, computation){
    function _mT_(k){return caml_call3(Core_Map[5], [0, M[2]], k, 0);}
    var v$0 = caml_call2(Bonsai_Value[3], v, _mT_);
    function _mU_(map){
     function _mX_(map){var r = caml_call1(Core_Map[93], map)[2]; return r;}
     return caml_call3(Let_syntax$0[2][7], _c_, map, _mX_);
    }
    var
     _mV_ =
       caml_call3(assoc, M, v$0, function(param, _mW_){return computation;});
    return caml_call3(Let_syntax$0[2][1], _d_, _mV_, _mU_);
   }
   function of_module1(sexp_of_model, component, equal, default_model, input){
    function _mJ_(input){
     function _mL_(model_and_inject){
      function _mR_(param){
       var
        input = param[2],
        match = param[1],
        inject = match[2],
        model = match[1];
       return caml_call3(component[7], inject, input, model);
      }
      var _mS_ = caml_call2(Let_syntax$0[2][5], model_and_inject, input);
      return caml_call3(Let_syntax$0[2][7], _e_, _mS_, _mR_);
     }
     function _mM_(context, input, model, action){
      if(input){
       var input$0 = input[1];
       return caml_call4(component[6], context, input$0, model, action);
      }
      var
       _mO_ =
         [0, [1, [0, _f_, [0, caml_call1(component[4][1], action), 0]]], 0],
       _mP_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
          _mO_],
       _mQ_ =
         [1,
          [0, caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_101_14), _mP_]];
      caml_call2(Core[257], 0, _mQ_);
      return model;
     }
     var
      _mN_ =
        caml_call7
         (state_machine1,
          [0, component[4][1]],
          0,
          sexp_of_model,
          equal,
          default_model,
          _mM_,
          input);
     return caml_call3(Let_syntax$0[2][1], _g_, _mN_, _mL_);
    }
    var _mK_ = caml_call1(Let_syntax$0[1], input);
    return caml_call3(Let_syntax$0[2][1], _h_, _mK_, _mJ_);
   }
   function of_module2(sexp_of_model, c, equal, default_model, i1, i2){
    return of_module1
            (sexp_of_model,
             c,
             equal,
             default_model,
             caml_call2(Bonsai_Value[4], i1, i2));
   }
   function race_dynamic_model
   (sexp_of_action, sexp_of_model, equal, model, apply_action, input){
    if(657750365 <= model[1])
     var
      m = model[2],
      _mA_ =
        function(m, param){if(! param) return m; var a = param[1]; return a;},
      model_creator = caml_call2(Bonsai_Value[3], m, _mA_);
    else
     var f = model[2], model_creator = f;
    function apply_action$0(context, computation_status, model, action){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     if(! computation_status)
      return [0,
              caml_call5
               (apply_action, inject, schedule_event, 0, model, action)];
     var
      match$0 = computation_status[1],
      model_creator = match$0[2],
      input = match$0[1],
      model$0 = [0, caml_call1(model_creator, model)];
     return [0,
             caml_call5
              (apply_action,
               inject,
               schedule_event,
               [0, input],
               model$0,
               action)];
    }
    function _mB_(model_and_inject){
     function _mH_(param){
      var
       model_creator = param[2],
       match = param[1],
       inject = match[2],
       model = match[1];
      return [0, caml_call1(model_creator, model), inject];
     }
     var
      _mI_ = caml_call2(Let_syntax$0[2][5], model_and_inject, model_creator);
     return caml_call3(Let_syntax$0[2][7], _i_, _mI_, _mH_);
    }
    var
     _mC_ = caml_call2(Bonsai_Value[4], input, model_creator),
     _mD_ = 0,
     _mE_ =
       [0,
        function(a_014, b_015){
         function _mG_(a_011, b_012){return caml_call2(equal, a_011, b_012);}
         return caml_call3(Core[511], _mG_, a_014, b_015);
        }],
     _mF_ =
       caml_call7
        (state_machine1,
         sexp_of_action,
         0,
         caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
         _mE_,
         _mD_,
         apply_action$0,
         _mC_);
    return caml_call3(Let_syntax$0[2][1], _j_, _mF_, _mB_);
   }
   function of_module0(sexp_of_model, equal, component, default_model){
    function _mv_(model_and_inject){
     function _mz_(param){
      var inject = param[2], model = param[1];
      return caml_call3(component[7], inject, 0, model);
     }
     return caml_call3(Let_syntax$0[2][7], _k_, model_and_inject, _mz_);
    }
    var _mw_ = 0;
    function _mx_(context, model, action){
     return caml_call4(component[6], context, 0, model, action);
    }
    var
     _my_ =
       caml_call7
        (state_machine0,
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _mx_,
         _mw_);
    return caml_call3(Let_syntax$0[2][1], _l_, _my_, _mv_);
   }
   function actor1
   (opt, reset, sexp_of_model, equal, default_model, recv, input){
    if(opt)
     var sth = opt[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    function sexp_of_t(cb){
     return caml_call1(sexp_of_action, caml_call1(Ui_effect[22][1][2], cb));
    }
    function make_inject(inject, schedule_event, action){
     function _mu_(action){
      return caml_call1(schedule_event, caml_call1(inject, action));
     }
     return caml_call2(Ui_effect[22][2], action, _mu_);
    }
    function _ma_(f, context, model){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     function inject$0(_mt_){
      return make_inject(inject, schedule_event, _mt_);
     }
     return caml_call3(f, inject$0, schedule_event, model);
    }
    var reset$0 = caml_call2(Core_Option[34], reset, _ma_);
    function _mb_(pattern_syntax_021){
     function _me_(model){
      function _mi_(inject){
       function _mm_(inject){
        function _mr_(param){
         var inject = param[2], model = param[1];
         return [0, model, inject];
        }
        var _ms_ = caml_call2(Let_syntax$0[2][5], model, inject);
        return caml_call3(Let_syntax$0[2][7], _m_, _ms_, _mr_);
       }
       function _mn_(inject){
        var _mp_ = Ui_effect[21][2];
        return function(_mq_){return make_inject(inject, _mp_, _mq_);};
       }
       var _mo_ = caml_call3(Let_syntax$0[2][7], _n_, inject, _mn_);
       return caml_call3(Let_syntax$0[2][1], _o_, _mo_, _mm_);
      }
      function _mj_(param){
       var pattern_syntax_022 = param[2];
       return pattern_syntax_022;
      }
      var
       _mk_ = caml_call3(Let_syntax$0[2][4], _p_, pattern_syntax_021, _mj_),
       _ml_ = caml_call1(Let_syntax$0[2][3], _mk_);
      return caml_call3(Let_syntax$0[2][1], _q_, _ml_, _mi_);
     }
     function _mf_(param){
      var pattern_syntax_023 = param[1];
      return pattern_syntax_023;
     }
     var
      _mg_ = caml_call3(Let_syntax$0[2][4], _r_, pattern_syntax_021, _mf_),
      _mh_ = caml_call1(Let_syntax$0[2][3], _mg_);
     return caml_call3(Let_syntax$0[2][1], _s_, _mh_, _me_);
    }
    var
     _mc_ =
       caml_call7
        (state_machine1,
         [0, sexp_of_t],
         reset$0,
         sexp_of_model,
         equal,
         default_model,
         function(context, input, model, callback){
          var
           match = caml_call1(Bonsai_Apply_action_context[4][1], context),
           schedule_event = match[2],
           inject = match[1];
          function inject$0(_md_){
           return make_inject(inject, schedule_event, _md_);
          }
          var
           action = caml_call1(Ui_effect[22][1][2], callback),
           match$0 =
             caml_call5(recv, inject$0, schedule_event, input, model, action),
           response = match$0[2],
           new_model = match$0[1];
          caml_call1
           (schedule_event,
            caml_call2(Ui_effect[22][1][3], callback, response));
          return new_model;
         },
         input);
    return caml_call3(Let_syntax$0[2][1], _t_, _mc_, _mb_);
   }
   function actor0
   (reset, sexp_of_model, sexp_of_action, equal, default_model, recv, param){
    function recv$0(inject, schedule_event, param){
     return caml_call2(recv, inject, schedule_event);
    }
    return actor1
            (sexp_of_action,
             reset,
             sexp_of_model,
             equal,
             default_model,
             recv$0,
             caml_call1(Bonsai_Value[2], 0));
   }
   function state(reset, sexp_of_model, equal, default_model){
    var
     sexp_of_action = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    function _l__(reset, param, m){return caml_call1(reset, m);}
    var reset$0 = caml_call2(Core_Option[34], reset, _l__), _l$_ = 0;
    return caml_call7
            (state_machine0,
             reset$0,
             sexp_of_model,
             [0, sexp_of_action],
             equal,
             default_model,
             function(param, old_model, new_model){return new_model;},
             _l$_);
   }
   var Toggle = [0];
   function toggle(default_model){
    function sexp_of_t(param){
     if(! param) return _v_;
     var arg0_038 = param[1], res0_039 = caml_call1(Core[323], arg0_038);
     return [1, [0, _u_, [0, res0_039, 0]]];
    }
    function _l2_(state_and_inject){
     function _l8_(state_and_inject){
      var
       inject = state_and_inject[2],
       state = state_and_inject[1],
       _l9_ = caml_call1(inject, 0);
      return [0,
              state,
              function(state){return caml_call1(inject, [0, state]);},
              _l9_];
     }
     return caml_call3(Let_syntax$0[2][7], _w_, state_and_inject, _l8_);
    }
    var _l3_ = 0;
    function _l4_(param, state, _l7_){
     if(! _l7_) return 1 - state;
     var state$0 = _l7_[1];
     return state$0;
    }
    var
     _l5_ =
       [0,
        function(a_041, b_042){
         return caml_call2(Core_Bool[32], a_041, b_042);
        }],
     _l6_ =
       caml_call7
        (state_machine0,
         0,
         [0, Core_Bool[22]],
         [0, sexp_of_t],
         _l5_,
         default_model,
         _l4_,
         _l3_);
    return caml_call3(Let_syntax$0[2][1], _x_, _l6_, _l2_);
   }
   function toggle$0(default_model){
    function _lQ_(pattern_syntax_044){
     function _lS_(toggle){
      function _lW_(state){
       function _l0_(param){
        var toggle = param[2], state = param[1];
        return [0, state, toggle];
       }
       var _l1_ = caml_call2(Let_syntax$0[2][5], state, toggle);
       return caml_call3(Let_syntax$0[2][7], _y_, _l1_, _l0_);
      }
      function _lX_(param){
       var pattern_syntax_045 = param[1];
       return pattern_syntax_045;
      }
      var
       _lY_ = caml_call3(Let_syntax$0[2][4], _z_, pattern_syntax_044, _lX_),
       _lZ_ = caml_call1(Let_syntax$0[2][3], _lY_);
      return caml_call3(Let_syntax$0[2][1], _A_, _lZ_, _lW_);
     }
     function _lT_(param){
      var pattern_syntax_046 = param[3];
      return pattern_syntax_046;
     }
     var
      _lU_ = caml_call3(Let_syntax$0[2][4], _B_, pattern_syntax_044, _lT_),
      _lV_ = caml_call1(Let_syntax$0[2][3], _lU_);
     return caml_call3(Let_syntax$0[2][1], _C_, _lV_, _lS_);
    }
    var _lR_ = toggle(default_model);
    return caml_call3(Let_syntax$0[2][1], _D_, _lR_, _lQ_);
   }
   function state_opt(reset, default_model, sexp_of_model, equal, param){
    var _lP_ = caml_call2(Core_Option[34], equal, Core_Option[18]);
    return state
            (reset,
             caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
             _lP_,
             default_model);
   }
   function _E_(path){
    function _lO_(path){return caml_call1(Bonsai_Path[27], path);}
    return caml_call3(Let_syntax$0[2][7], _F_, path, _lO_);
   }
   var path_id = caml_call3(Let_syntax$0[2][1], _G_, path, _E_);
   function yoink(a){
    function _lB_(pattern_syntax_052){
     function _lJ_(result){
      function _lN_(result){return caml_call1(result, 0);}
      return caml_call3(Let_syntax$0[2][7], _H_, result, _lN_);
     }
     function _lK_(param){
      var pattern_syntax_053 = param[2];
      return pattern_syntax_053;
     }
     var
      _lL_ = caml_call3(Let_syntax$0[2][4], _I_, pattern_syntax_052, _lK_),
      _lM_ = caml_call1(Let_syntax$0[2][3], _lL_);
     return caml_call3(Let_syntax$0[2][1], _J_, _lM_, _lJ_);
    }
    function _lC_(param, _lI_, a, _lH_, _lG_){return [0, 0, a];}
    var
     _lD_ = 0,
     _lE_ =
       [0,
        function(a_054, b_055){
         return caml_call2(Core_Unit[20], a_054, b_055);
        }],
     _lF_ =
       actor1([0, Core_Unit[10]], 0, [0, Core_Unit[10]], _lE_, _lD_, _lC_, a);
    return caml_call3(Let_syntax$0[2][1], _K_, _lF_, _lB_);
   }
   var _L_ = Edge[1];
   function lifecycle(on_activate, on_deactivate, after_display, param){
    function transpose_join(param){
     if(! param) return caml_call1(Bonsai_Value[2], 0);
     var a = param[1];
     return a;
    }
    function _lt_(triple){
     function _ly_(t){return caml_call1(_L_, t);}
     function _lz_(param){
      var on_activate = param[1];
      if(! on_activate && ! param[2] && ! param[3]) return 0;
      var after_display = param[3], on_deactivate = param[2];
      return [0, [0, on_activate, on_deactivate, after_display]];
     }
     var _lA_ = caml_call3(Let_syntax$0[2][7], _M_, triple, _lz_);
     return caml_call3(Let_syntax$0[2][1], _N_, _lA_, _ly_);
    }
    var
     let_syntax_058 = transpose_join(on_activate),
     let_syntax_059 = transpose_join(on_deactivate),
     let_syntax_060 = transpose_join(after_display);
    function _lu_(param){
     var match = param[2], c = match[2], b = match[1], a = param[1];
     return [0, a, b, c];
    }
    var
     _lv_ = caml_call2(Let_syntax$0[2][5], let_syntax_059, let_syntax_060),
     _lw_ = caml_call2(Let_syntax$0[2][5], let_syntax_058, _lv_),
     _lx_ = caml_call3(Let_syntax$0[2][7], _O_, _lw_, _lu_);
    return caml_call3(Let_syntax$0[2][1], _P_, _lx_, _lt_);
   }
   function lifecycle$0(on_activate, on_deactivate, after_display, param){
    var _le_ = 0, _lf_ = Bonsai_Value[3], _lg_ = Core_Option[58];
    function _lh_(_ls_){return caml_call2(_lf_, _ls_, _lg_);}
    var
     _li_ = caml_call2(Core_Option[34], after_display, _lh_),
     _lj_ = Bonsai_Value[3],
     _lk_ = Core_Option[58];
    function _ll_(_lr_){return caml_call2(_lj_, _lr_, _lk_);}
    var
     _lm_ = caml_call2(Core_Option[34], on_deactivate, _ll_),
     _ln_ = Bonsai_Value[3],
     _lo_ = Core_Option[58];
    function _lp_(_lq_){return caml_call2(_ln_, _lq_, _lo_);}
    return lifecycle
            (caml_call2(Core_Option[34], on_activate, _lp_), _lm_, _li_, _le_);
   }
   function after_display(event_opt_value){
    return lifecycle(0, 0, [0, event_opt_value], 0);
   }
   function after_display$0(event_value){
    var
     event_value$0 = caml_call2(Bonsai_Value[3], event_value, Core_Option[58]);
    return lifecycle(0, 0, [0, event_value$0], 0);
   }
   function _Q_(clock){
    var _ld_ = caml_call1(Ui_time_source[11], clock);
    return caml_call1(Ui_incr[11], _ld_);
   }
   var wait_after_display = caml_call1(Bonsai_Incr0[2], _Q_);
   function on_change(sexp_of_model, equal, input, callback){
    function _kG_(pattern_syntax_063){
     function _kI_(state){
      function _kM_(set_state){
       function _kQ_(update){return after_display(update);}
       function _kR_(pattern_syntax_067){
        function _kU_(param){
         if(0 === param){
          var
           _kY_ =
             function(param){
              var
               match = param[2],
               callback = match[2],
               input = match[1],
               set_state = param[1],
               _lb_ = [0, caml_call2(callback, 0, input), 0],
               _lc_ = [0, caml_call1(set_state, [0, input]), _lb_];
              return [0, [0, Ui_effect[2], _lc_]];
             },
           _kZ_ = caml_call2(Let_syntax$0[2][5], input, callback),
           _k0_ = caml_call2(Let_syntax$0[2][5], set_state, _kZ_);
          return caml_call3(Let_syntax$0[2][7], _R_, _k0_, _kY_);
         }
         if(1 !== param)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
         function _k1_(state){
          function _k5_(param){
           var
            _k9_ = param[2],
            match = _k9_[2],
            callback = match[2],
            input = match[1],
            set_state = _k9_[1],
            state = param[1];
           if(state !== input && ! caml_call2(equal, state, input)){
            var
             _k__ =
               [246,
                function(param){
                 var
                  _k$_ = [0, caml_call2(callback, [0, state], input), 0],
                  _la_ = [0, caml_call1(set_state, [0, input]), _k$_];
                 return [0, Ui_effect[2], _la_];
                }];
            return [0, caml_call1(Ui_effect[15], _k__)];
           }
           return 0;
          }
          var
           _k6_ = caml_call2(Let_syntax$0[2][5], input, callback),
           _k7_ = caml_call2(Let_syntax$0[2][5], set_state, _k6_),
           _k8_ = caml_call2(Let_syntax$0[2][5], state, _k7_);
          return caml_call3(Let_syntax$0[2][7], _S_, _k8_, _k5_);
         }
         function _k2_(param){
          if(! param)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
          var pattern_syntax_068 = param[1];
          return pattern_syntax_068;
         }
         var
          _k3_ = caml_call3(Let_syntax$0[2][4], _U_, pattern_syntax_067, _k2_),
          _k4_ = caml_call1(Let_syntax$0[2][3], _k3_);
         return caml_call3(Let_syntax$0[2][1], _V_, _k4_, _k1_);
        }
        var _kV_ = 2;
        function _kW_(param){return param ? 1 : 0;}
        var
         _kX_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_067, _kW_);
        return caml_call4(Let_syntax$0[2][2], _X_, _kX_, _kV_, _kU_);
       }
       var
        _kS_ = caml_call1(Let_syntax$0[2][3], state),
        _kT_ = caml_call3(Let_syntax$0[2][1], _Y_, _kS_, _kR_);
       return caml_call3(Let_syntax$0[2][1], _Z_, _kT_, _kQ_);
      }
      function _kN_(param){
       var pattern_syntax_064 = param[2];
       return pattern_syntax_064;
      }
      var
       _kO_ = caml_call3(Let_syntax$0[2][4], ___, pattern_syntax_063, _kN_),
       _kP_ = caml_call1(Let_syntax$0[2][3], _kO_);
      return caml_call3(Let_syntax$0[2][1], _$_, _kP_, _kM_);
     }
     function _kJ_(param){
      var pattern_syntax_065 = param[1];
      return pattern_syntax_065;
     }
     var
      _kK_ = caml_call3(Let_syntax$0[2][4], _aa_, pattern_syntax_063, _kJ_),
      _kL_ = caml_call1(Let_syntax$0[2][3], _kK_);
     return caml_call3(Let_syntax$0[2][1], _ab_, _kL_, _kI_);
    }
    var _kH_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _ac_, _kH_, _kG_);
   }
   function on_change$0(sexp_of_model, equal, input, callback){
    function _kF_(callback, prev, value){return caml_call1(callback, value);}
    var callback$0 = caml_call2(Bonsai_Value[3], callback, _kF_);
    return on_change(sexp_of_model, equal, input, callback$0);
   }
   var empty = 0;
   function initial(a){return [0, a];}
   var Starting = [0, empty, initial];
   function manual_refresh_implementation
   (sexp_of_model, equal, initial, wrap_result, effect, param){
    function _j0_(pattern_syntax_078){
     function _j8_(next_seqnum){
      var
       sexp_of_result = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
      function _ka_(_kE_, _kD_){return _kE_ === _kD_ ? 1 : 0;}
      var equal_result = caml_call2(Core_Option[39], equal, _ka_);
      function sexp_of_t(param){
       var
        last_result_085 = param[2],
        last_seqnum_083 = param[1],
        arg_086 = caml_call1(sexp_of_result, last_result_085),
        bnds_082 = [0, [1, [0, _ad_, [0, arg_086, 0]]], 0],
        arg_084 = caml_call1(Core[389], last_seqnum_083),
        bnds_082$0 = [0, [1, [0, _ae_, [0, arg_084, 0]]], bnds_082];
       return [1, bnds_082$0];
      }
      var
       sexp_of_result$0 =
         caml_call2(Core_Option[39], sexp_of_model, Core[149]);
      function sexp_of_t$0(param){
       var
        arg1_090 = param[2],
        arg0_089 = param[1],
        res0_091 = caml_call1(Core[389], arg0_089),
        res1_092 = caml_call1(sexp_of_result$0, arg1_090);
       return [1, [0, _af_, [0, res0_091, [0, res1_092, 0]]]];
      }
      function _kb_(pattern_syntax_093){
       function _ki_(state){
        function _km_(inject_change){
         function _kq_(callback){
          function _ky_(param){
           var callback = param[2], last_result = param[1][2];
           return [0, last_result, callback];
          }
          function _kz_(param, _kC_){
           var new_for_cutoff_107 = _kC_[2], old_for_cutoff_108 = param[2];
           return old_for_cutoff_108 === new_for_cutoff_107 ? 1 : 0;
          }
          var
           _kA_ = caml_call2(Let_syntax$0[2][8], state, _kz_),
           _kB_ = caml_call2(Let_syntax$0[2][5], _kA_, callback);
          return caml_call3(Let_syntax$0[2][7], _ag_, _kB_, _ky_);
         }
         function _kr_(param){
          var
           match = param[2],
           inject_change = match[2],
           next_seqnum = match[1],
           effect = param[1];
          function _kv_(seqnum){
           function _kx_(result){
            return caml_call1
                    (inject_change,
                     [0, seqnum, caml_call1(wrap_result, result)]);
           }
           return caml_call2(Ui_effect[13][4][2], effect, _kx_);
          }
          var _kw_ = caml_call1(next_seqnum, 0);
          return caml_call2(Ui_effect[13][4][2], _kw_, _kv_);
         }
         var
          _ks_ = caml_call2(Let_syntax$0[2][5], next_seqnum, inject_change),
          _kt_ = caml_call2(Let_syntax$0[2][5], effect, _ks_),
          _ku_ = caml_call3(Let_syntax$0[2][7], _ah_, _kt_, _kr_);
         return caml_call3(Let_syntax$0[2][1], _ai_, _ku_, _kq_);
        }
        function _kn_(param){
         var pattern_syntax_094 = param[2];
         return pattern_syntax_094;
        }
        var
         _ko_ = caml_call3(Let_syntax$0[2][4], _aj_, pattern_syntax_093, _kn_),
         _kp_ = caml_call1(Let_syntax$0[2][3], _ko_);
        return caml_call3(Let_syntax$0[2][1], _ak_, _kp_, _km_);
       }
       function _kj_(param){
        var pattern_syntax_095 = param[1];
        return pattern_syntax_095;
       }
       var
        _kk_ = caml_call3(Let_syntax$0[2][4], _al_, pattern_syntax_093, _kj_),
        _kl_ = caml_call1(Let_syntax$0[2][3], _kk_);
       return caml_call3(Let_syntax$0[2][1], _am_, _kl_, _ki_);
      }
      var _kc_ = 0;
      function _kd_(param, model, _kh_){
       var res = _kh_[2], seqnum = _kh_[1];
       return caml_call2(Core[92], seqnum, model[1])
               ? model
               : [0, seqnum, res];
      }
      var
       _ke_ = [0, -1, initial],
       _kf_ =
         caml_call7
          (state_machine0,
           0,
           [0, sexp_of_t],
           [0, sexp_of_t$0],
           [0,
            function(a_096, b_097){
             if(a_096 === b_097) return 1;
             var _kg_ = caml_call2(Core[384], a_096[1], b_097[1]);
             return _kg_ ? caml_call2(equal_result, a_096[2], b_097[2]) : _kg_;
            }],
           _ke_,
           _kd_,
           _kc_);
      return caml_call3(Let_syntax$0[2][1], _an_, _kf_, _kb_);
     }
     function _j9_(param){
      var pattern_syntax_079 = param[2];
      return pattern_syntax_079;
     }
     var
      _j__ = caml_call3(Let_syntax$0[2][4], _ao_, pattern_syntax_078, _j9_),
      _j$_ = caml_call1(Let_syntax$0[2][3], _j__);
     return caml_call3(Let_syntax$0[2][1], _ap_, _j$_, _j8_);
    }
    var _j1_ = 0;
    function _j2_(param, _j7_, i, _j6_){return [0, i + 1 | 0, i];}
    var
     _j3_ = 0,
     _j4_ =
       [0,
        function(a_080, b_081){return caml_call2(Core_Int[87], a_080, b_081);}],
     _j5_ =
       actor0
        (0, [0, Core_Int[77]], [0, Core_Unit[10]], _j4_, _j3_, _j2_, _j1_);
    return caml_call3(Let_syntax$0[2][1], _aq_, _j5_, _j0_);
   }
   function manual_refresh(sexp_of_model, equal, kind, effect){
    if(kind){
     var initial = kind[1], _jW_ = 0;
     return manual_refresh_implementation
             (sexp_of_model,
              equal,
              initial,
              function(_jZ_){return _jZ_;},
              effect,
              _jW_);
    }
    var
     _jX_ = Core_Option[58],
     _jY_ = caml_call2(Core_Option[34], equal, Core_Option[18]);
    return manual_refresh_implementation
            (caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
             _jY_,
             0,
             _jX_,
             effect,
             0);
   }
   function effect_on_change
   (sexp_of_input,
    sexp_of_result,
    equal_input,
    equal_result,
    kind,
    input,
    effect){
    function _ju_(get_input){
     function _jw_(effect){
      function _jD_(pattern_syntax_116){
       function _jF_(result){
        function _jJ_(refresh){
         function _jN_(callback){
          function _jQ_(pattern_syntax_121){
           function _jS_(param){return caml_call1(Let_syntax$0[1], result);}
           function _jT_(param){return 0;}
           var
            _jU_ =
              caml_call3(Let_syntax$0[2][4], _ar_, pattern_syntax_121, _jT_),
            _jV_ = caml_call1(Let_syntax$0[2][3], _jU_);
           return caml_call3(Let_syntax$0[2][1], _as_, _jV_, _jS_);
          }
          var _jR_ = on_change$0(sexp_of_input, equal_input, input, callback);
          return caml_call3(Let_syntax$0[2][1], _at_, _jR_, _jQ_);
         }
         function _jO_(refresh, param){return refresh;}
         var _jP_ = caml_call3(Let_syntax$0[2][7], _au_, refresh, _jO_);
         return caml_call3(Let_syntax$0[2][1], _av_, _jP_, _jN_);
        }
        function _jK_(param){
         var pattern_syntax_117 = param[2];
         return pattern_syntax_117;
        }
        var
         _jL_ = caml_call3(Let_syntax$0[2][4], _aw_, pattern_syntax_116, _jK_),
         _jM_ = caml_call1(Let_syntax$0[2][3], _jL_);
        return caml_call3(Let_syntax$0[2][1], _ax_, _jM_, _jJ_);
       }
       function _jG_(param){
        var pattern_syntax_118 = param[1];
        return pattern_syntax_118;
       }
       var
        _jH_ = caml_call3(Let_syntax$0[2][4], _ay_, pattern_syntax_116, _jG_),
        _jI_ = caml_call1(Let_syntax$0[2][3], _jH_);
       return caml_call3(Let_syntax$0[2][1], _az_, _jI_, _jF_);
      }
      var _jE_ = manual_refresh(sexp_of_result, equal_result, kind, effect);
      return caml_call3(Let_syntax$0[2][1], _aA_, _jE_, _jD_);
     }
     function _jx_(param){
      var effect = param[2], get_input = param[1];
      function _jA_(input){return caml_call1(effect, input);}
      function _jB_(param){
       if(! param) return Ui_effect[14];
       var input = param[1];
       return caml_call1(Ui_effect[7], input);
      }
      var _jC_ = caml_call2(Ui_effect[13][4][2], get_input, _jB_);
      return caml_call2(Ui_effect[13][4][2], _jC_, _jA_);
     }
     var
      _jy_ = caml_call2(Let_syntax$0[2][5], get_input, effect),
      _jz_ = caml_call3(Let_syntax$0[2][7], _aB_, _jy_, _jx_);
     return caml_call3(Let_syntax$0[2][1], _aC_, _jz_, _jw_);
    }
    var _jv_ = yoink(input);
    return caml_call3(Let_syntax$0[2][1], _aD_, _jv_, _ju_);
   }
   var
    Poll =
      [0,
       Starting,
       manual_refresh_implementation,
       manual_refresh,
       effect_on_change],
    Edge$0 =
      [0,
       lifecycle,
       lifecycle$0,
       after_display,
       after_display$0,
       wait_after_display,
       on_change,
       on_change$0,
       Poll];
   function t_of_sexp(of_a_122, sexp_127){
    a:
    {
     if(0 === sexp_127[0]){
      var _jr_ = sexp_127[1];
      b:
      if(caml_string_notequal(_jr_, cst_Aborted)){
       if(caml_string_notequal(_jr_, cst_Finished)){
        if(! caml_string_notequal(_jr_, cst_aborted)) break b;
        if(caml_string_notequal(_jr_, cst_finished)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_125, sexp_127);
      }
      return 0;
     }
     var _js_ = sexp_127[1];
     if(! _js_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_125, sexp_127);
     var _jt_ = _js_[1];
     if(0 !== _jt_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_125, sexp_127);
     var tag_128 = _jt_[1];
     b:
     if(caml_string_notequal(tag_128, cst_Aborted)){
      if(caml_string_notequal(tag_128, cst_Finished)){
       if(! caml_string_notequal(tag_128, cst_aborted)) break b;
       if(caml_string_notequal(tag_128, cst_finished)) break a;
      }
      var sexp_args_129 = _js_[2];
      if(sexp_args_129 && ! sexp_args_129[2]){
       var
        arg0_130 = sexp_args_129[1],
        res0_131 = caml_call1(of_a_122, arg0_130);
       return [0, res0_131];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_125,
               tag_128,
               sexp_127);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_125, sexp_127);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_125, sexp_127);
   }
   function sexp_of_t(of_a_133, param){
    if(! param) return _aF_;
    var arg0_134 = param[1], res0_135 = caml_call1(of_a_133, arg0_134);
    return [1, [0, _aE_, [0, res0_135, 0]]];
   }
   function equal(cmp_a, a_137, b_138){
    if(a_137 === b_138) return 1;
    if(! a_137) return b_138 ? 0 : 1;
    if(! b_138) return 0;
    var b_140 = b_138[1], a_139 = a_137[1];
    return caml_call2(cmp_a, a_139, b_140);
   }
   var
    request_aborted_error =
      caml_call1(Core_Error[14], cst_request_was_aborted);
   function collapse_to_or_error(tag_s){
    function maybe_tag_error(error){
     if(! tag_s) return error;
     var _jp_ = tag_s[1], _jq_ = runtime.caml_obj_tag(_jp_);
     a:
     if(250 === _jq_)
      var tag = _jp_[1];
     else{
      if(246 !== _jq_ && 244 !== _jq_){var tag = _jp_; break a;}
      var tag = caml_call1(CamlinternalLazy[2], _jp_);
     }
     return caml_call2(Core_Error[23], error, tag);
    }
    return function(param){
     if(! param) return [1, maybe_tag_error(request_aborted_error)];
     var match = param[1];
     if(0 === match[0]){var v = match[1]; return [0, v];}
     var e = match[1];
     return [1, maybe_tag_error(e)];};
   }
   function collapse_fun_to_or_error(sexp_of_input, f, a){
    if(sexp_of_input)
     var
      sexp_of_input$0 = sexp_of_input[1],
      tag_s =
        [0,
         [246,
          function(param){
           return [1, [0, _aG_, [0, caml_call1(sexp_of_input$0, a), 0]]];
          }]];
    else
     var tag_s = 0;
    var
     _jl_ = collapse_to_or_error(tag_s),
     _jm_ = [246, function(_jo_){return caml_call1(f, a);}],
     _jn_ = caml_call1(Ui_effect[15], _jm_);
    return caml_call2(Ui_effect[8], _jn_, _jl_);
   }
   var
    Poll_result =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       request_aborted_error,
       collapse_to_or_error,
       collapse_fun_to_or_error];
   function poll(effect){
    var sexp_of_t = Core[149], sexp_of_t$0 = Core[149];
    function _iR_(pattern_syntax_141){
     function _i3_(inject){
      function _i7_(model){
       function _i$_(on_activate){
        function _jc_(pattern_syntax_150){
         function _je_(param){
          function _ji_(inject, request){
           function _jj_(callback){
            var _jk_ = caml_call1(inject, [0, callback]);
            return caml_call1(Ui_effect[21][2], _jk_);
           }
           return caml_call2(Ui_effect[22][2], request, _jj_);
          }
          return caml_call3(Let_syntax$0[2][7], _aH_, inject, _ji_);
         }
         function _jf_(param){return 0;}
         var
          _jg_ =
            caml_call3(Let_syntax$0[2][4], _aI_, pattern_syntax_150, _jf_),
          _jh_ = caml_call1(Let_syntax$0[2][3], _jg_);
         return caml_call3(Let_syntax$0[2][1], _aJ_, _jh_, _je_);
        }
        var _jd_ = caml_call4(Edge$0[2], [0, on_activate], 0, 0, 0);
        return caml_call3(Let_syntax$0[2][1], _aK_, _jd_, _jc_);
       }
       function _ja_(inject){return caml_call1(inject, 0);}
       var _jb_ = caml_call3(Let_syntax$0[2][7], _aL_, inject, _ja_);
       return caml_call3(Let_syntax$0[2][1], _aM_, _jb_, _i$_);
      }
      function _i8_(param){
       var pattern_syntax_142 = param[1];
       return pattern_syntax_142;
      }
      var
       _i9_ = caml_call3(Let_syntax$0[2][4], _aN_, pattern_syntax_141, _i8_),
       _i__ = caml_call1(Let_syntax$0[2][3], _i9_);
      return caml_call3(Let_syntax$0[2][1], _aO_, _i__, _i7_);
     }
     function _i4_(param){
      var pattern_syntax_143 = param[2];
      return pattern_syntax_143;
     }
     var
      _i5_ = caml_call3(Let_syntax$0[2][4], _aP_, pattern_syntax_141, _i4_),
      _i6_ = caml_call1(Let_syntax$0[2][3], _i5_);
     return caml_call3(Let_syntax$0[2][1], _aQ_, _i6_, _i3_);
    }
    function _iS_(context, effect, param, action){
     var
      next_up = param[2],
      running = param[1],
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     function run_effect(effect, callback){
      function _iZ_(response){
       function _i1_(param){return caml_call1(inject, 1);}
       var _i2_ = caml_call2(Ui_effect[22][1][3], callback, [0, response]);
       return caml_call2(Ui_effect[13][4][2], _i2_, _i1_);
      }
      var
       _i0_ = caml_call1(effect, caml_call1(Ui_effect[22][1][2], callback));
      return caml_call1
              (schedule_event, caml_call2(Ui_effect[13][4][2], _i0_, _iZ_));
     }
     function abort(callback){
      return caml_call1
              (schedule_event, caml_call2(Ui_effect[22][1][3], callback, 0));
     }
     function soft_assert_running(here, running){
      var _iW_ = 1 - running;
      if(! _iW_) return _iW_;
      var
       _iX_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_finished_effect_even_t),
          0],
       _iY_ =
         [1,
          [0,
           [1,
            [0, _aR_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
           _iX_]];
      return caml_call2(Core[257], 0, _iY_);
     }
     if(typeof action === "number"){
      if(! action){
       if(! effect) return [0, running, next_up];
       if(running) return [0, 1, next_up];
       if(! next_up) return _aY_;
       var effect$1 = effect[1], next_up$1 = next_up[1];
       run_effect(effect$1, next_up$1);
       return _aX_;
      }
      if(! next_up){soft_assert_running(_aV_, running); return _aW_;}
      var next_up$0 = next_up[1];
      if(effect){
       var effect$0 = effect[1];
       soft_assert_running(_aS_, running);
       run_effect(effect$0, next_up$0);
       return _aT_;
      }
      soft_assert_running(_aU_, running);
      return [0, 0, [0, next_up$0]];
     }
     var callback = action[1];
     if(running){
      if(! next_up) return [0, 1, [0, callback]];
      var next_up$2 = next_up[1];
      abort(next_up$2);
      return [0, 1, [0, callback]];
     }
     if(! next_up){
      if(! effect) return [0, 0, [0, callback]];
      var effect$3 = effect[1];
      run_effect(effect$3, callback);
      return _aZ_;
     }
     var next_up$3 = next_up[1];
     if(effect){
      var effect$2 = effect[1];
      run_effect(effect$2, next_up$3);
      return [0, 1, [0, callback]];
     }
     abort(next_up$3);
     return [0, 0, [0, callback]];
    }
    var
     _iT_ = [0, function(a_144, b_145){return a_144 === b_145 ? 1 : 0;}],
     _iU_ = [0, sexp_of_t$0],
     _iV_ =
       caml_call7
        (state_machine1,
         [0, sexp_of_t],
         [0, function(param, model){return model;}],
         _iU_,
         _iT_,
         _a0_,
         _iS_,
         effect);
    return caml_call3(Let_syntax$0[2][1], _a1_, _iV_, _iR_);
   }
   var
    Effect_throttling = [0, Poll_result, poll],
    _a2_ = Bonsai_Proc_min[4],
    value_cutoff = _a2_[1],
    compute_with_clock = _a2_[2],
    of_module = _a2_[3],
    compute = Bonsai_Incr0[1],
    with_clock = Bonsai_Incr0[2],
    to_value = Bonsai_Incr0[3],
    Incr =
      [0,
       value_cutoff,
       compute_with_clock,
       of_module,
       compute,
       with_clock,
       to_value],
    Map0 =
      caml_call1
       (Bonsai_Map0[1],
        [0, [0, Bonsai_Value[4]], Bonsai_Computation, [0, Incr[4]]]);
   function freeze(sexp_of_model, equal, value){
    function _il_(pattern_syntax_152){
     function _in_(state){
      function _ir_(set_state){
       function _iv_(pattern_syntax_155){
        function _ix_(param){
         if(0 === param){
          var
           _iB_ = function(state){return caml_call1(Let_syntax$0[1], state);},
           _iC_ =
             function(param){
              if(! param)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _a3_], 1);
              var pattern_syntax_156 = param[1];
              return pattern_syntax_156;
             },
           _iD_ =
             caml_call3(Let_syntax$0[2][4], _a4_, pattern_syntax_155, _iC_),
           _iE_ = caml_call1(Let_syntax$0[2][3], _iD_);
          return caml_call3(Let_syntax$0[2][1], _a5_, _iE_, _iB_);
         }
         if(1 !== param)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a9_], 1);
         function _iF_(pattern_syntax_157){
          function _iN_(param){return caml_call1(Let_syntax$0[1], value);}
          function _iO_(param){return 0;}
          var
           _iP_ =
             caml_call3(Let_syntax$0[2][4], _a6_, pattern_syntax_157, _iO_),
           _iQ_ = caml_call1(Let_syntax$0[2][3], _iP_);
          return caml_call3(Let_syntax$0[2][1], _a7_, _iQ_, _iN_);
         }
         var _iG_ = 0, _iH_ = 0, _iI_ = 0;
         function _iJ_(param){
          var value = param[2], set_state = param[1];
          return caml_call1(set_state, [0, value]);
         }
         var
          _iK_ = caml_call2(Let_syntax$0[2][5], set_state, value),
          _iL_ = [0, caml_call3(Let_syntax$0[2][4], 0, _iK_, _iJ_)],
          _iM_ = caml_call4(Edge$0[2], _iL_, _iI_, _iH_, _iG_);
         return caml_call3(Let_syntax$0[2][1], _a8_, _iM_, _iF_);
        }
        var _iy_ = 2;
        function _iz_(param){return param ? 0 : 1;}
        var
         _iA_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_155, _iz_);
        return caml_call4(Let_syntax$0[2][2], _a__, _iA_, _iy_, _ix_);
       }
       var _iw_ = caml_call1(Let_syntax$0[2][3], state);
       return caml_call3(Let_syntax$0[2][1], _a$_, _iw_, _iv_);
      }
      function _is_(param){
       var pattern_syntax_153 = param[2];
       return pattern_syntax_153;
      }
      var
       _it_ = caml_call3(Let_syntax$0[2][4], _ba_, pattern_syntax_152, _is_),
       _iu_ = caml_call1(Let_syntax$0[2][3], _it_);
      return caml_call3(Let_syntax$0[2][1], _bb_, _iu_, _ir_);
     }
     function _io_(param){
      var pattern_syntax_154 = param[1];
      return pattern_syntax_154;
     }
     var
      _ip_ = caml_call3(Let_syntax$0[2][4], _bc_, pattern_syntax_152, _io_),
      _iq_ = caml_call1(Let_syntax$0[2][3], _ip_);
     return caml_call3(Let_syntax$0[2][1], _bd_, _iq_, _in_);
    }
    var _im_ = state_opt(0, 0, sexp_of_model, equal, 0);
    return caml_call3(Let_syntax$0[2][1], _be_, _im_, _il_);
   }
   function thunk(f){
    function _id_(out){
     var _ii_ = [0, function(_ik_, _ij_){return _ik_ === _ij_ ? 1 : 0;}];
     return freeze([0, Core[149]], _ii_, out);
    }
    var
     _ie_ = caml_call1(Bonsai_Var[1], 0),
     _if_ = caml_call1(Bonsai_Var[5], _ie_),
     _ig_ = caml_call2(Bonsai_Value[3], _if_, f),
     _ih_ = caml_call1(Let_syntax$0[1], _ig_);
    return caml_call3(Let_syntax$0[2][1], _bf_, _ih_, _id_);
   }
   function most_recent_some(sexp_of_model, equal, input, f){
    function _hH_(pattern_syntax_162){
     function _hJ_(set_most_recent_valid_value){
      function _hN_(most_recent_valid_value){
       function _hR_(input){
        function _hT_(input){
         function _hW_(pattern_syntax_167){
          function _hY_(param){
           if(0 === param)
            return caml_call1(Let_syntax$0[1], most_recent_valid_value);
           if(1 !== param)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bo_], 1);
           function _h2_(inner){
            function _h6_(callback){
             function _h9_(pattern_syntax_171){
              function _h$_(param){return caml_call1(Let_syntax$0[1], input);}
              function _ia_(param){return 0;}
              var
               _ib_ =
                 caml_call3
                  (Let_syntax$0[2][4], _bg_, pattern_syntax_171, _ia_),
               _ic_ = caml_call1(Let_syntax$0[2][3], _ib_);
              return caml_call3(Let_syntax$0[2][1], _bh_, _ic_, _h$_);
             }
             var
              _h__ =
                caml_call4(Edge$0[7], sexp_of_model, equal, inner, callback);
             return caml_call3(Let_syntax$0[2][1], _bi_, _h__, _h9_);
            }
            function _h7_(set_most_recent_valid_value, x){
             return caml_call1(set_most_recent_valid_value, [0, x]);
            }
            var
             _h8_ =
               caml_call3
                (Let_syntax$0[2][7], _bj_, set_most_recent_valid_value, _h7_);
            return caml_call3(Let_syntax$0[2][1], _bk_, _h8_, _h6_);
           }
           function _h3_(param){
            if(! param)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bl_], 1);
            var pattern_syntax_168 = param[1];
            return pattern_syntax_168;
           }
           var
            _h4_ =
              caml_call3(Let_syntax$0[2][4], _bm_, pattern_syntax_167, _h3_),
            _h5_ = caml_call1(Let_syntax$0[2][3], _h4_);
           return caml_call3(Let_syntax$0[2][1], _bn_, _h5_, _h2_);
          }
          var _hZ_ = 2;
          function _h0_(param){return param ? 1 : 0;}
          var
           _h1_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_167, _h0_);
          return caml_call4(Let_syntax$0[2][2], _bp_, _h1_, _hZ_, _hY_);
         }
         var _hX_ = caml_call1(Let_syntax$0[2][3], input);
         return caml_call3(Let_syntax$0[2][1], _bq_, _hX_, _hW_);
        }
        var
         _hU_ = caml_call1(Core_Option[18], equal),
         _hV_ = caml_call2(Incr[1], input, _hU_);
        return caml_call3(Let_syntax$0[2][1], _br_, _hV_, _hT_);
       }
       var _hS_ = pure(f, input);
       return caml_call3(Let_syntax$0[2][1], _bs_, _hS_, _hR_);
      }
      function _hO_(param){
       var pattern_syntax_163 = param[1];
       return pattern_syntax_163;
      }
      var
       _hP_ = caml_call3(Let_syntax$0[2][4], _bt_, pattern_syntax_162, _hO_),
       _hQ_ = caml_call1(Let_syntax$0[2][3], _hP_);
      return caml_call3(Let_syntax$0[2][1], _bu_, _hQ_, _hN_);
     }
     function _hK_(param){
      var pattern_syntax_164 = param[2];
      return pattern_syntax_164;
     }
     var
      _hL_ = caml_call3(Let_syntax$0[2][4], _bv_, pattern_syntax_162, _hK_),
      _hM_ = caml_call1(Let_syntax$0[2][3], _hL_);
     return caml_call3(Let_syntax$0[2][1], _bw_, _hM_, _hJ_);
    }
    var _hI_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _bx_, _hI_, _hH_);
   }
   function most_recent_value_satisfying
   (sexp_of_model, equal, input, condition){
    return most_recent_some
            (sexp_of_model,
             equal,
             input,
             function(a){return caml_call1(condition, a) ? [0, a] : 0;});
   }
   function previous_value(sexp_of_model, equal, input){
    function _ho_(pattern_syntax_172){
     function _hq_(set_prev){
      function _hu_(prev){
       function _hy_(callback){
        function _hB_(pattern_syntax_177){
         function _hD_(param){return caml_call1(Let_syntax$0[1], prev);}
         function _hE_(param){return 0;}
         var
          _hF_ =
            caml_call3(Let_syntax$0[2][4], _by_, pattern_syntax_177, _hE_),
          _hG_ = caml_call1(Let_syntax$0[2][3], _hF_);
         return caml_call3(Let_syntax$0[2][1], _bz_, _hG_, _hD_);
        }
        var
         _hC_ = caml_call4(Edge$0[7], sexp_of_model, equal, input, callback);
        return caml_call3(Let_syntax$0[2][1], _bA_, _hC_, _hB_);
       }
       function _hz_(set_prev, input){
        return caml_call1(set_prev, [0, input]);
       }
       var _hA_ = caml_call3(Let_syntax$0[2][7], _bB_, set_prev, _hz_);
       return caml_call3(Let_syntax$0[2][1], _bC_, _hA_, _hy_);
      }
      function _hv_(param){
       var pattern_syntax_173 = param[1];
       return pattern_syntax_173;
      }
      var
       _hw_ = caml_call3(Let_syntax$0[2][4], _bD_, pattern_syntax_172, _hv_),
       _hx_ = caml_call1(Let_syntax$0[2][3], _hw_);
      return caml_call3(Let_syntax$0[2][1], _bE_, _hx_, _hu_);
     }
     function _hr_(param){
      var pattern_syntax_174 = param[2];
      return pattern_syntax_174;
     }
     var
      _hs_ = caml_call3(Let_syntax$0[2][4], _bF_, pattern_syntax_172, _hr_),
      _ht_ = caml_call1(Let_syntax$0[2][3], _hs_);
     return caml_call3(Let_syntax$0[2][1], _bG_, _ht_, _hq_);
    }
    var _hp_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _bH_, _hp_, _ho_);
   }
   function assoc_set(m, v, f){
    function _hm_(as_map){
     return caml_call3
             (assoc, m, as_map, function(k, param){return caml_call1(f, k);});
    }
    var _hn_ = caml_call1(Map0[3], v);
    return caml_call3(Let_syntax$0[2][1], _bI_, _hn_, _hm_);
   }
   function assoc_list(m, list, get_key, f){
    function _gS_(alist){
     function _gW_(input_map){
      function _gZ_(pattern_syntax_183){
       function _g1_(param){
        if(0 === param){
         var
          _g5_ =
            function(input_map){
             function _hc_(output_map){
              function _he_(param){
               var output_map = param[2], alist = param[1];
               function _hg_(param){
                var
                 k = param[1],
                 match = caml_call2(Core_Map[44], output_map, k);
                if(match){var r = match[1]; return r;}
                var
                 _hh_ =
                   [0, caml_call1(Sexplib0_Sexp_conv[7], cst_not_found), 0],
                 _hi_ = [0, [1, [0, _bJ_, [0, caml_call1(m[1], k), 0]]], _hh_],
                 _hj_ =
                   [0,
                    caml_call1(Sexplib0_Sexp_conv[7], cst_Incremental_glitch),
                    _hi_],
                 _hk_ =
                   [0,
                    caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_821_29),
                    _hj_],
                 _hl_ =
                   [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _hk_]];
                return caml_call1(Core[261], _hl_);
               }
               return [0, 17724, caml_call2(Core_List[51], alist, _hg_)];
              }
              var _hf_ = caml_call2(Let_syntax$0[2][5], alist, output_map);
              return caml_call3(Let_syntax$0[2][7], _bK_, _hf_, _he_);
             }
             var
              _hd_ =
                caml_call3
                 (assoc,
                  m,
                  input_map,
                  function(k, v){return caml_call2(f, k, v);});
             return caml_call3(Let_syntax$0[2][1], _bL_, _hd_, _hc_);
            },
          _g6_ =
            function(param){
             if(typeof param !== "number" && 17724 === param[1]){
              var pattern_syntax_184 = param[2];
              return pattern_syntax_184;
             }
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1);
            },
          _g7_ =
            caml_call3(Let_syntax$0[2][4], _bN_, pattern_syntax_183, _g6_),
          _g8_ = caml_call1(Let_syntax$0[2][3], _g7_);
         return caml_call3(Let_syntax$0[2][1], _bO_, _g8_, _g5_);
        }
        if(1 !== param)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bT_], 1);
        function _g9_(key){
         function _hb_(key){return [0, -1048878709, key];}
         return caml_call3(Let_syntax$0[2][7], _bP_, key, _hb_);
        }
        function _g__(param){
         if(typeof param !== "number" && -1048878709 === param[1]){
          var pattern_syntax_185 = param[2];
          return pattern_syntax_185;
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bQ_], 1);
        }
        var
         _g$_ = caml_call3(Let_syntax$0[2][4], _bR_, pattern_syntax_183, _g__),
         _ha_ = caml_call1(Let_syntax$0[2][3], _g$_);
        return caml_call3(Let_syntax$0[2][1], _bS_, _ha_, _g9_);
       }
       var _g2_ = 2;
       function _g3_(param){return 17724 <= param[1] ? 0 : 1;}
       var _g4_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_183, _g3_);
       return caml_call4(Let_syntax$0[2][2], _bU_, _g4_, _g2_, _g1_);
      }
      var _g0_ = caml_call1(Let_syntax$0[2][3], input_map);
      return caml_call3(Let_syntax$0[2][1], _bV_, _g0_, _gZ_);
     }
     function _gX_(alist){return caml_call2(Core_Map[6], [0, m[2]], alist);}
     var _gY_ = caml_call3(Let_syntax$0[2][7], _bW_, alist, _gX_);
     return caml_call3(Let_syntax$0[2][1], _bX_, _gY_, _gW_);
    }
    function _gT_(list){
     function _gV_(x){return [0, caml_call1(get_key, x), x];}
     return caml_call2(Core_List[51], list, _gV_);
    }
    var _gU_ = caml_call3(Let_syntax$0[2][7], _bY_, list, _gT_);
    return caml_call3(Let_syntax$0[2][1], _bZ_, _gU_, _gS_);
   }
   function fallback(param){
    if(0 === param[0]){var fallback$0 = param[2]; return fallback$0;}
    var get = param[2], base = param[1];
    return caml_call1(get, fallback(base));
   }
   function fetch(t, default$0, for_some){
    var t$0 = t, for_some$0 = for_some;
    for(;;){
     if(0 === t$0[0]){
      var id = t$0[1];
      return caml_call3(Dynamic_scope[1], id, default$0, for_some$0);
     }
     var
      get = t$0[2],
      base = t$0[1],
      for_some$2 =
        function(for_some, get){
         function for_some$0(x){
          return caml_call1(for_some, caml_call1(get, x));
         }
         return for_some$0;
        },
      for_some$1 = for_some$2(for_some$0, get),
      t$0 = base,
      for_some$0 = for_some$1;
    }
   }
   function lookup(var$0){
    function _gQ_(_gR_){return _gR_;}
    return fetch(var$0, fallback(var$0), _gQ_);
   }
   function store(var$0, value, inner){
    if(0 === var$0[0]){
     var id = var$0[1];
     return caml_call3(Dynamic_scope[2], id, value, inner);
    }
    var set = var$0[3], base = var$0[1];
    function _gK_(current){
     function _gM_(new$0){return store(base, new$0, inner);}
     function _gN_(param){
      var value = param[2], current = param[1];
      return caml_call2(set, current, value);
     }
     var
      _gO_ = caml_call2(Let_syntax$0[2][5], current, value),
      _gP_ = caml_call3(Let_syntax$0[2][7], _b0_, _gO_, _gN_);
     return caml_call3(Let_syntax$0[2][1], _b1_, _gP_, _gM_);
    }
    var _gL_ = lookup(base);
    return caml_call3(Let_syntax$0[2][1], _b2_, _gL_, _gK_);
   }
   function create(opt, name, fallback, param){
    if(opt) var sth = opt[1], sexp_of = sth; else var sexp_of = Core[149];
    return [0, caml_call2(Core_Type_equal[8][3], name, sexp_of), fallback];
   }
   function derived(opt, base, get, set){
    if(opt) var sth = opt[1], sexp_of = sth; else var sexp_of = Core[149];
    return [1, base, get, set, sexp_of];
   }
   function modify(var$0, change, f){
    function _gI_(current){
     function revert(c){return store(var$0, current, c);}
     var value = caml_call1(change, current);
     return store(var$0, value, caml_call1(f, [0, revert]));
    }
    var _gJ_ = lookup(var$0);
    return caml_call3(Let_syntax$0[2][1], _b3_, _gJ_, _gI_);
   }
   function set(t, v, inside){return store(t, v, inside);}
   function set$0(var$0, value, f){
    return modify(var$0, function(param){return value;}, f);
   }
   var
    Dynamic_scope$0 =
      [0, fallback, fetch, lookup, store, create, derived, modify, set, set$0];
   function approx_now(tick_every){
    function _gF_(clock){
     function _gG_(param){return caml_call1(Ui_time_source[5], clock);}
     var _gH_ = caml_call2(Ui_time_source[7], clock, tick_every);
     return caml_call2(Ui_incr[78][4][6], _gH_, _gG_);
    }
    return caml_call1(Incr[5], _gF_);
   }
   var now = caml_call1(Incr[5], Ui_time_source[6]);
   function t_of_sexp$0(sexp_201){
    a:
    {
     if(0 === sexp_201[0]){
      var _gB_ = sexp_201[1];
      b:
      if(caml_string_notequal(_gB_, cst_After)){
       if(caml_string_notequal(_gB_, cst_Before)){
        if(! caml_string_notequal(_gB_, cst_after)) break b;
        if(caml_string_notequal(_gB_, cst_before)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _gC_ = sexp_201[1];
     if(! _gC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_200, sexp_201);
     var _gD_ = _gC_[1];
     if(0 !== _gD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_200, sexp_201);
     var _gE_ = _gD_[1];
     b:
     if(caml_string_notequal(_gE_, cst_After)){
      if(caml_string_notequal(_gE_, cst_Before)){
       if(! caml_string_notequal(_gE_, cst_after)) break b;
       if(caml_string_notequal(_gE_, cst_before)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_200, sexp_201);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_200, sexp_201);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_200, sexp_201);
   }
   function sexp_of_t$0(param){return param ? _b4_ : _b5_;}
   function equal$0(_gA_, _gz_){return _gA_ === _gz_ ? 1 : 0;}
   var Before_or_after = [0, t_of_sexp$0, sexp_of_t$0, equal$0];
   function at(time){
    function _gw_(clock){
     var func = Ui_incr[28], _gx_ = caml_call1(Ui_time_source[8], clock);
     return function(_gy_){return caml_call2(func, _gy_, _gx_);};
    }
    return caml_call2(Incr[2], time, _gw_);
   }
   function _b6_(clock){
    var _gt_ = 0;
    function _gu_(param){return caml_call1(Ui_time_source[5], clock);}
    var _gv_ = caml_call2(Ui_effect[17], _gu_, _gt_);
    return caml_call1(Ui_incr[11], _gv_);
   }
   var get_current_time = caml_call1(Incr[5], _b6_);
   function _b7_(clock){
    var _gs_ = caml_call1(Ui_time_source[10], clock);
    return caml_call1(Ui_incr[11], _gs_);
   }
   var sleep = caml_call1(Incr[5], _b7_);
   function _b8_(clock){
    var _gr_ = caml_call1(Ui_time_source[9], clock);
    return caml_call1(Ui_incr[11], _gr_);
   }
   var
    until = caml_call1(Incr[5], _b8_),
    Trigger_id = caml_call1(Core_Unique_id[1], 0);
   function t_of_sexp$1(sexp_208){
    a:
    {
     if(0 === sexp_208[0]){
      var _gn_ = sexp_208[1];
      b:
      if(caml_string_notequal(_gn_, cst_Waiting_for)){
       if(caml_string_notequal(_gn_, cst_Waiting_for_effect_to_fini)){
        if(! caml_string_notequal(_gn_, cst_waiting_for)) break b;
        if(caml_string_notequal(_gn_, cst_waiting_for_effect_to_fini))
         break a;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_206, sexp_208);
     }
     var _go_ = sexp_208[1];
     if(! _go_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_206, sexp_208);
     var _gp_ = _go_[1];
     if(0 !== _gp_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_206, sexp_208);
     var tag_209 = _gp_[1];
     b:
     if(caml_string_notequal(tag_209, cst_Waiting_for)){
      if(caml_string_notequal(tag_209, cst_Waiting_for_effect_to_fini)){
       if(! caml_string_notequal(tag_209, cst_waiting_for)) break b;
       if(caml_string_notequal(tag_209, cst_waiting_for_effect_to_fini))
        break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_206, sexp_208);
     }
     var sexp_args_210 = _go_[2];
     if(sexp_args_210){
      var _gq_ = sexp_args_210[2];
      if(_gq_ && ! _gq_[2]){
       var
        arg1_212 = _gq_[1],
        arg0_211 = sexp_args_210[1],
        res0_213 = caml_call2(Core[516], Trigger_id[9], arg0_211),
        res1_214 = caml_call1(Core_Time_ns[25][11], arg1_212);
       return [0, res0_213, res1_214];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_206,
              tag_209,
              sexp_208);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_206, sexp_208);
   }
   function sexp_of_t$1(param){
    if(! param) return _b__;
    var
     arg1_216 = param[2],
     arg0_215 = param[1],
     res0_217 = caml_call2(Core[515], Trigger_id[10], arg0_215),
     res1_218 = caml_call1(Core_Time_ns[25][12], arg1_216);
    return [1, [0, _b9_, [0, res0_217, [0, res1_218, 0]]]];
   }
   function equal$1(a_219, b_220){
    if(a_219 === b_220) return 1;
    if(! a_219) return b_220 ? 0 : 1;
    if(! b_220) return 0;
    var
     b_224 = b_220[2],
     b_222 = b_220[1],
     a_223 = a_219[2],
     a_221 = a_219[1];
    function _gl_(a_225, b_226){
     return caml_call2(Trigger_id[19], a_225, b_226);
    }
    var _gm_ = caml_call3(Core[511], _gl_, a_221, b_222);
    return _gm_ ? caml_call2(Core_Time_ns[25][20], a_223, b_224) : _gm_;
   }
   var Every_model = [0, t_of_sexp$1, sexp_of_t$1, equal$1];
   function t_of_sexp$2(sexp_231){
    a:
    {
     if(0 === sexp_231[0]){
      var _gi_ = sexp_231[1];
      b:
      if(caml_string_notequal(_gi_, cst_Schedule_effect)){
       if(caml_string_notequal(_gi_, cst_Wait_for)){
        if(! caml_string_notequal(_gi_, cst_schedule_effect)) break b;
        if(caml_string_notequal(_gi_, cst_wait_for)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_229, sexp_231);
      }
      return 0;
     }
     var _gj_ = sexp_231[1];
     if(! _gj_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_229, sexp_231);
     var _gk_ = _gj_[1];
     if(0 !== _gk_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_229, sexp_231);
     var tag_232 = _gk_[1];
     b:
     if(caml_string_notequal(tag_232, cst_Schedule_effect)){
      if(caml_string_notequal(tag_232, cst_Wait_for)){
       if(! caml_string_notequal(tag_232, cst_schedule_effect)) break b;
       if(caml_string_notequal(tag_232, cst_wait_for)) break a;
      }
      var sexp_args_233 = _gj_[2];
      if(sexp_args_233 && ! sexp_args_233[2]){
       var
        arg0_234 = sexp_args_233[1],
        res0_235 = caml_call1(Core_Time_ns[25][11], arg0_234);
       return [0, res0_235];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_229,
               tag_232,
               sexp_231);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_229, sexp_231);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_229, sexp_231);
   }
   function sexp_of_t$2(param){
    if(! param) return _ca_;
    var
     arg0_236 = param[1],
     res0_237 = caml_call1(Core_Time_ns[25][12], arg0_236);
    return [1, [0, _b$_, [0, res0_237, 0]]];
   }
   function equal$2(a_238, b_239){
    if(a_238 === b_239) return 1;
    if(! a_238) return b_239 ? 0 : 1;
    if(! b_239) return 0;
    var b_241 = b_239[1], a_240 = a_238[1];
    return caml_call2(Core_Time_ns[25][20], a_240, b_241);
   }
   var Every_action = [0, t_of_sexp$2, sexp_of_t$2, equal$2];
   function generic_every(create_effect, opt, span, callback){
    if(opt)
     var sth = opt[1], trigger_on_activate = sth;
    else
     var trigger_on_activate = 1;
    function _fp_(base_time){
     function _ft_(initial_model){
      function _fw_(get_current_time){
       function _fx_(race_input){
        function apply_action(inject, schedule_event, input, old_model, param){
         if(param){
          var next_time = param[1];
          return [0, [0, caml_call1(Trigger_id[45], 0)], next_time];
         }
         if(input)
          var
           match = input[1],
           callback = match[3],
           get_current_time = match[2],
           base_time = match[1],
           _gf_ =
             function(next_time){return caml_call1(inject, [0, next_time]);},
           _gg_ =
             caml_call4
              (create_effect, span, base_time, get_current_time, callback),
           _gh_ = caml_call2(Ui_effect[13][4][2], _gg_, _gf_);
         else
          var _gh_ = Ui_effect[1];
         caml_call1(schedule_event, _gh_);
         return 0;
        }
        function _fC_(pattern_syntax_255){
         function _fG_(inject){
          function _fK_(every_model){
           function _fO_(before_or_after){
            function _f8_(callback){
             function _f$_(a_275, b_276){
              function _gc_(a_277, b_278){
               var
                t_280 = a_277[2],
                t_279 = a_277[1],
                t_282 = b_278[2],
                t_281 = b_278[1];
               function _gd_(a_283, b_284){
                return caml_call2(Trigger_id[19], a_283, b_284);
               }
               var _ge_ = caml_call3(Core[511], _gd_, t_279, t_281);
               return _ge_
                       ? caml_call2(Before_or_after[3], t_280, t_282)
                       : _ge_;
              }
              return caml_call3(Core[511], _gc_, a_275, b_276);
             }
             var
              _ga_ =
                [0,
                 function(x_274){
                  function _gb_(param){
                   var
                    arg1_271 = param[2],
                    arg0_270 = param[1],
                    res0_272 = caml_call2(Core[515], Trigger_id[10], arg0_270),
                    res1_273 = caml_call1(Before_or_after[2], arg1_271);
                   return [1, [0, res0_272, [0, res1_273, 0]]];
                  }
                  return caml_call2(Core[515], _gb_, x_274);
                 }];
             return caml_call4
                     (Edge$0[7], _ga_, _f$_, before_or_after, callback);
            }
            function _f9_(inject, param){
             if(param && param[1][2]) return caml_call1(inject, 0);
             return Ui_effect[1];
            }
            var _f__ = caml_call3(Let_syntax$0[2][7], _cb_, inject, _f9_);
            return caml_call3(Let_syntax$0[2][1], _cc_, _f__, _f8_);
           }
           function _fP_(pattern_syntax_261){
            function _fS_(param){
             if(0 === param) return const$0(0);
             if(1 !== param)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _cl_], 1);
             function _fW_(trigger_id){
              function _f0_(time){
               function _f4_(before_or_after){
                function _f6_(param){
                 var before_or_after = param[2], trigger_id = param[1];
                 return [0, [0, trigger_id, before_or_after]];
                }
                var
                 _f7_ =
                   caml_call2(Let_syntax$0[2][5], trigger_id, before_or_after);
                return caml_call3(Let_syntax$0[2][7], _cd_, _f7_, _f6_);
               }
               var _f5_ = at(time);
               return caml_call3(Let_syntax$0[2][1], _ce_, _f5_, _f4_);
              }
              function _f1_(param){
               if(! param)
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _cf_], 1);
               var pattern_syntax_262 = param[2];
               return pattern_syntax_262;
              }
              var
               _f2_ =
                 caml_call3
                  (Let_syntax$0[2][4], _cg_, pattern_syntax_261, _f1_),
               _f3_ = caml_call1(Let_syntax$0[2][3], _f2_);
              return caml_call3(Let_syntax$0[2][1], _ch_, _f3_, _f0_);
             }
             function _fX_(param){
              if(! param)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ci_], 1);
              var pattern_syntax_263 = param[1];
              return pattern_syntax_263;
             }
             var
              _fY_ =
                caml_call3(Let_syntax$0[2][4], _cj_, pattern_syntax_261, _fX_),
              _fZ_ = caml_call1(Let_syntax$0[2][3], _fY_);
             return caml_call3(Let_syntax$0[2][1], _ck_, _fZ_, _fW_);
            }
            var _fT_ = 2;
            function _fU_(param){return param ? 1 : 0;}
            var
             _fV_ =
               caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_261, _fU_);
            return caml_call4(Let_syntax$0[2][2], _cm_, _fV_, _fT_, _fS_);
           }
           var
            _fQ_ = caml_call1(Let_syntax$0[2][3], every_model),
            _fR_ = caml_call3(Let_syntax$0[2][1], _cn_, _fQ_, _fP_);
           return caml_call3(Let_syntax$0[2][1], _co_, _fR_, _fO_);
          }
          function _fL_(param){
           var pattern_syntax_256 = param[1];
           return pattern_syntax_256;
          }
          var
           _fM_ =
             caml_call3(Let_syntax$0[2][4], _cp_, pattern_syntax_255, _fL_),
           _fN_ = caml_call1(Let_syntax$0[2][3], _fM_);
          return caml_call3(Let_syntax$0[2][1], _cq_, _fN_, _fK_);
         }
         function _fH_(param){
          var pattern_syntax_257 = param[2];
          return pattern_syntax_257;
         }
         var
          _fI_ =
            caml_call3(Let_syntax$0[2][4], _cr_, pattern_syntax_255, _fH_),
          _fJ_ = caml_call1(Let_syntax$0[2][3], _fI_);
         return caml_call3(Let_syntax$0[2][1], _cs_, _fJ_, _fG_);
        }
        var _fD_ = [0, 657750365, initial_model];
        function _fE_(a_258, b_259){
         return caml_call2(Every_model[3], a_258, b_259);
        }
        var
         _fF_ =
           race_dynamic_model
            ([0, Every_action[2]],
             [0, Every_model[2]],
             _fE_,
             _fD_,
             apply_action,
             race_input);
        return caml_call3(Let_syntax$0[2][1], _ct_, _fF_, _fC_);
       }
       function _fy_(param){
        var
         match = param[2],
         callback = match[2],
         get_current_time = match[1],
         base_time = param[1];
        return [0, base_time, get_current_time, callback];
       }
       var
        _fz_ = caml_call2(Let_syntax$0[2][5], get_current_time, callback),
        _fA_ = caml_call2(Let_syntax$0[2][5], base_time, _fz_),
        _fB_ = caml_call3(Let_syntax$0[2][7], _cu_, _fA_, _fy_);
       return caml_call3(Let_syntax$0[2][1], _cv_, _fB_, _fx_);
      }
      return caml_call3(Let_syntax$0[2][1], _cw_, get_current_time, _fw_);
     }
     function _fu_(base_time){
      var
       start_time =
         trigger_on_activate
          ? base_time
          : caml_call2(Core_Time_ns[67], base_time, span);
      return [0, 0, start_time];
     }
     var _fv_ = caml_call3(Let_syntax$0[2][7], _cx_, base_time, _fu_);
     return caml_call3(Let_syntax$0[2][1], _cy_, _fv_, _ft_);
    }
    function _fq_(now){
     var
      _fs_ =
        [0,
         function(a_244, b_245){
          return caml_call2(Core_Time_ns[25][20], a_244, b_245);
         }];
     return freeze([0, Core_Time_ns[25][12]], _fs_, now);
    }
    var _fr_ = caml_call3(Let_syntax$0[2][1], _cz_, now, _fq_);
    return caml_call3(Let_syntax$0[2][1], _cA_, _fr_, _fp_);
   }
   function ensure_clock_advances(old_time, new_time){
    var _fo_ = caml_call1(Core_Time_ns[71], old_time);
    return caml_call2(Core_Time_ns[24], _fo_, new_time);
   }
   function _cB_(span, param, get_current_time, callback){
    function _fm_(param){
     function _fn_(now){
      return ensure_clock_advances
              (now, caml_call2(Core_Time_ns[67], now, span));
     }
     return caml_call2(Ui_effect[13][4][3], get_current_time, _fn_);
    }
    return caml_call2(Ui_effect[13][4][2], callback, _fm_);
   }
   function every_wait_period_after_previo(_fj_, _fk_, _fl_){return generic_every(_cB_, _fj_, _fk_, _fl_);
   }
   function _cC_(span, param, get_current_time, callback){
    function _fg_(start){
     function _fh_(param){
      function _fi_(now){
       return ensure_clock_advances
               (now, caml_call2(Core_Time_ns[67], start, span));
      }
      return caml_call2(Ui_effect[13][4][3], get_current_time, _fi_);
     }
     return caml_call2(Ui_effect[13][4][2], callback, _fh_);
    }
    return caml_call2(Ui_effect[13][4][2], get_current_time, _fg_);
   }
   function every_wait_period_after_previo$0(_fd_, _fe_, _ff_){return generic_every(_cC_, _fd_, _fe_, _ff_);
   }
   function _cD_(span, base_time, get_current_time, callback){
    function _e$_(param){
     function _fa_(now){
      var
       _fb_ = caml_call1(Core_Time_ns[1][108], Core_Time_ns[1][76]),
       _fc_ = caml_call2(Core_Time_ns[1][24], span, _fb_);
      return ensure_clock_advances
              (now,
               caml_call5(Core_Time_ns[81], _cE_, base_time, now, _fc_, 0));
     }
     return caml_call2(Ui_effect[13][4][3], get_current_time, _fa_);
    }
    return caml_call2(Ui_effect[13][4][2], callback, _e$_);
   }
   function every_multiple_of_period_block(_e8_, _e9_, _e__){return generic_every(_cD_, _e8_, _e9_, _e__);
   }
   function every_multiple_of_period_non_b
   (trigger_on_activate, span, callback){
    function _e7_(callback){return [0, Ui_effect[2], [0, callback, 0]];}
    return every_multiple_of_period_block
            (trigger_on_activate,
             span,
             caml_call3(Let_syntax$0[2][4], 0, callback, _e7_));
   }
   function every(when_to_start_next_effect){
    return 103362454 <= when_to_start_next_effect
            ? 584040262
              <= when_to_start_next_effect
              ? every_wait_period_after_previo$0
              : every_multiple_of_period_block
            : -174594474
              <= when_to_start_next_effect
              ? every_wait_period_after_previo
              : every_multiple_of_period_non_b;
   }
   var
    Clock =
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       get_current_time,
       sleep,
       until,
       Trigger_id,
       Every_model,
       Every_action,
       generic_every,
       ensure_clock_advances,
       every_wait_period_after_previo,
       every_wait_period_after_previo$0,
       every_multiple_of_period_block,
       every_multiple_of_period_non_b,
       every];
   function sexp_of_t$3(of_query_293, param){
    switch(param[0]){
      case 0:
       var arg0_294 = param[1], res0_295 = caml_call1(of_query_293, arg0_294);
       return [1, [0, _cF_, [0, res0_295, 0]]];
      case 1:
       var arg0_296 = param[1], res0_297 = caml_call1(of_query_293, arg0_296);
       return [1, [0, _cG_, [0, res0_297, 0]]];
      default:
       var
        arg1_299 = param[2],
        arg0_298 = param[1],
        res0_300 = caml_call1(of_query_293, arg0_298),
        res1_301 = caml_call1(of_query_293, arg1_299);
       return [1, [0, _cH_, [0, res0_300, [0, res1_301, 0]]]];
    }
   }
   var Action = [0, sexp_of_t$3];
   function create$0(Query, f){
    function sexp_of_t(x_303){
     return caml_call3(Core_Map[132], [0, Query[1]], Core[389], x_303);
    }
    function sexp_of_t$0(x_308){
     return caml_call2(Action[1], Query[1], x_308);
    }
    function apply_action(param, model, action){
     function add(model, q){
      function _e6_(param){
       if(! param) return 1;
       var c = param[1];
       return c + 1 | 0;
      }
      return caml_call3(Core_Map[43], model, q, _e6_);
     }
     function remove(model, q){
      function _e5_(param){
       if(! param) return 0;
       var c = param[1];
       return 1 === c ? 0 : [0, c - 1 | 0];
      }
      return caml_call3(Core_Map[42], model, q, _e5_);
     }
     switch(action[0]){
       case 0:
        var q = action[1]; return add(model, q);
       case 1:
        var q$0 = action[1]; return remove(model, q$0);
       default:
        var after = action[2], before = action[1];
        return add(remove(model, before), after);
     }
    }
    function _eO_(pattern_syntax_309){
     function _eT_(queries){
      function _eX_(inject){
       function _e1_(responses){
        function _e3_(param){
         var inject = param[2], responses = param[1];
         return [0, responses, inject];
        }
        var _e4_ = caml_call2(Let_syntax$0[2][5], responses, inject);
        return caml_call3(Let_syntax$0[2][7], _cI_, _e4_, _e3_);
       }
       var
        _e2_ =
          caml_call3
           (assoc,
            Query,
            queries,
            function(query, count){return caml_call1(f, query);});
       return caml_call3(Let_syntax$0[2][1], _cJ_, _e2_, _e1_);
      }
      function _eY_(param){
       var pattern_syntax_310 = param[2];
       return pattern_syntax_310;
      }
      var
       _eZ_ = caml_call3(Let_syntax$0[2][4], _cK_, pattern_syntax_309, _eY_),
       _e0_ = caml_call1(Let_syntax$0[2][3], _eZ_);
      return caml_call3(Let_syntax$0[2][1], _cL_, _e0_, _eX_);
     }
     function _eU_(param){
      var pattern_syntax_311 = param[1];
      return pattern_syntax_311;
     }
     var
      _eV_ = caml_call3(Let_syntax$0[2][4], _cM_, pattern_syntax_309, _eU_),
      _eW_ = caml_call1(Let_syntax$0[2][3], _eV_);
     return caml_call3(Let_syntax$0[2][1], _cN_, _eW_, _eT_);
    }
    var
     _eP_ = 0,
     _eQ_ = caml_call1(Core_Map[4], [0, Query[2]]),
     _eR_ =
       caml_call7
        (state_machine0,
         0,
         [0, sexp_of_t],
         [0, sexp_of_t$0],
         [0,
          function(a_312, b_313){
           function _eS_(a_306, b_307){
            return caml_call2(Core[384], a_306, b_307);
           }
           return caml_call4(Core_Map[136], [0], _eS_, a_312, b_313);
          }],
         _eQ_,
         apply_action,
         _eP_);
    return caml_call3(Let_syntax$0[2][1], _cO_, _eR_, _eO_);
   }
   function lookup$0(sexp_of_model, equal, t, query){
    function _ej_(pattern_syntax_318){
     function _el_(inject){
      function _ep_(pattern_syntax_320){
       function _ez_(param){
        function _eD_(pattern_syntax_327){
         function _eI_(param){
          function _eM_(param){
           var query = param[2], t = param[1], responses = t[1];
           return caml_call2(Core_Map[44], responses, query);
          }
          var _eN_ = caml_call2(Let_syntax$0[2][5], t, query);
          return caml_call3(Let_syntax$0[2][7], _cP_, _eN_, _eM_);
         }
         function _eJ_(param){return 0;}
         var
          _eK_ =
            caml_call3(Let_syntax$0[2][4], _cQ_, pattern_syntax_327, _eJ_),
          _eL_ = caml_call1(Let_syntax$0[2][3], _eK_);
         return caml_call3(Let_syntax$0[2][1], _cR_, _eL_, _eI_);
        }
        function _eE_(callback){
         return caml_call4(Edge$0[6], sexp_of_model, equal, query, callback);
        }
        function _eF_(inject, prev, next){
         if(! prev) return Ui_effect[1];
         var prev$0 = prev[1];
         return caml_call1(inject, [2, prev$0, next]);
        }
        var
         _eG_ = caml_call3(Let_syntax$0[2][7], _cS_, inject, _eF_),
         _eH_ = caml_call3(Let_syntax$0[2][1], _cT_, _eG_, _eE_);
        return caml_call3(Let_syntax$0[2][1], _cU_, _eH_, _eD_);
       }
       function _eA_(param){return 0;}
       var
        _eB_ = caml_call3(Let_syntax$0[2][4], _cV_, pattern_syntax_320, _eA_),
        _eC_ = caml_call1(Let_syntax$0[2][3], _eB_);
       return caml_call3(Let_syntax$0[2][1], _cW_, _eC_, _ez_);
      }
      var _eq_ = 0, _er_ = 0;
      function _es_(param){
       var query = param[2], inject = param[1];
       return caml_call1(inject, [1, query]);
      }
      var
       _et_ = caml_call2(Let_syntax$0[2][5], inject, query),
       _eu_ = [0, caml_call3(Let_syntax$0[2][4], 0, _et_, _es_)];
      function _ev_(param){
       var query = param[2], inject = param[1];
       return caml_call1(inject, [0, query]);
      }
      var
       _ew_ = caml_call2(Let_syntax$0[2][5], inject, query),
       _ex_ = [0, caml_call3(Let_syntax$0[2][4], 0, _ew_, _ev_)],
       _ey_ = caml_call4(Edge$0[2], _ex_, _eu_, _er_, _eq_);
      return caml_call3(Let_syntax$0[2][1], _cX_, _ey_, _ep_);
     }
     function _em_(param){
      var pattern_syntax_319 = param[2];
      return pattern_syntax_319;
     }
     var
      _en_ = caml_call3(Let_syntax$0[2][4], _cY_, pattern_syntax_318, _em_),
      _eo_ = caml_call1(Let_syntax$0[2][3], _en_);
     return caml_call3(Let_syntax$0[2][1], _cZ_, _eo_, _el_);
    }
    var _ek_ = caml_call1(Let_syntax$0[1], t);
    return caml_call3(Let_syntax$0[2][1], _c0_, _ek_, _ej_);
   }
   var Memo = [0, Action, create$0, lookup$0];
   function map2$0(a, b, f){
    function _ef_(let_syntax_335){
     function _eg_(b){
      function _eh_(param){
       var b = param[2], a = param[1];
       return caml_call2(f, a, b);
      }
      var _ei_ = caml_call2(Let_syntax$0[2][5], let_syntax_335, b);
      return caml_call3(Let_syntax$0[2][7], _c1_, _ei_, _eh_);
     }
     return caml_call3(Let_syntax$0[2][1], _c2_, b, _eg_);
    }
    return caml_call3(Let_syntax$0[2][1], _c3_, a, _ef_);
   }
   var
    map$0 =
      [0,
       -198771759,
       function(a, f){
        function _ed_(a){
         function _ee_(a){return caml_call1(f, a);}
         return caml_call3(Let_syntax$0[2][7], _c4_, a, _ee_);
        }
        return caml_call3(Let_syntax$0[2][1], _c5_, a, _ed_);
       }],
    include = caml_call1(Base_Applicative[13], [0, const$0, map2$0, map$0]),
    return$0 = include[1],
    map$1 = include[2],
    both$0 = include[3],
    symbol$1 = include[4],
    symbol$2 = include[5],
    symbol$3 = include[6],
    symbol_map$0 = include[7],
    apply = include[8],
    map2$1 = include[9],
    Applicative_infix = include[13];
   function map3$0(t1, t2, t3, f){
    function _ea_(t1){
     function _eb_(t2){
      function _ec_(t3){
       return caml_call1(read, caml_call4(Bonsai_Value[16], t1, t2, t3, f));
      }
      return caml_call3(Let_syntax$0[2][1], _c6_, t3, _ec_);
     }
     return caml_call3(Let_syntax$0[2][1], _c7_, t2, _eb_);
    }
    return caml_call3(Let_syntax$0[2][1], _c8_, t1, _ea_);
   }
   function map4$0(t1, t2, t3, t4, f){
    function _d8_(t1){
     function _d9_(t2){
      function _d__(t3){
       function _d$_(t4){
        return caml_call1
                (read, caml_call5(Bonsai_Value[17], t1, t2, t3, t4, f));
       }
       return caml_call3(Let_syntax$0[2][1], _c9_, t4, _d$_);
      }
      return caml_call3(Let_syntax$0[2][1], _c__, t3, _d__);
     }
     return caml_call3(Let_syntax$0[2][1], _c$_, t2, _d9_);
    }
    return caml_call3(Let_syntax$0[2][1], _da_, t1, _d8_);
   }
   function map5$0(t1, t2, t3, t4, t5, f){
    function _d3_(t1){
     function _d4_(t2){
      function _d5_(t3){
       function _d6_(t4){
        function _d7_(t5){
         return caml_call1
                 (read, caml_call6(Bonsai_Value[18], t1, t2, t3, t4, t5, f));
        }
        return caml_call3(Let_syntax$0[2][1], _db_, t5, _d7_);
       }
       return caml_call3(Let_syntax$0[2][1], _dc_, t4, _d6_);
      }
      return caml_call3(Let_syntax$0[2][1], _dd_, t3, _d5_);
     }
     return caml_call3(Let_syntax$0[2][1], _de_, t2, _d4_);
    }
    return caml_call3(Let_syntax$0[2][1], _df_, t1, _d3_);
   }
   function map6$0(t1, t2, t3, t4, t5, t6, f){
    function _dX_(t1){
     function _dY_(t2){
      function _dZ_(t3){
       function _d0_(t4){
        function _d1_(t5){
         function _d2_(t6){
          return caml_call1
                  (read,
                   caml_call7(Bonsai_Value[19], t1, t2, t3, t4, t5, t6, f));
         }
         return caml_call3(Let_syntax$0[2][1], _dg_, t6, _d2_);
        }
        return caml_call3(Let_syntax$0[2][1], _dh_, t5, _d1_);
       }
       return caml_call3(Let_syntax$0[2][1], _di_, t4, _d0_);
      }
      return caml_call3(Let_syntax$0[2][1], _dj_, t3, _dZ_);
     }
     return caml_call3(Let_syntax$0[2][1], _dk_, t2, _dY_);
    }
    return caml_call3(Let_syntax$0[2][1], _dl_, t1, _dX_);
   }
   function map7$0(t1, t2, t3, t4, t5, t6, t7, f){
    function _dQ_(t1){
     function _dR_(t2){
      function _dS_(t3){
       function _dT_(t4){
        function _dU_(t5){
         function _dV_(t6){
          function _dW_(t7){
           return caml_call1
                   (read,
                    caml_call8(Bonsai_Value[20], t1, t2, t3, t4, t5, t6, t7, f));
          }
          return caml_call3(Let_syntax$0[2][1], _dm_, t7, _dW_);
         }
         return caml_call3(Let_syntax$0[2][1], _dn_, t6, _dV_);
        }
        return caml_call3(Let_syntax$0[2][1], _do_, t5, _dU_);
       }
       return caml_call3(Let_syntax$0[2][1], _dp_, t4, _dT_);
      }
      return caml_call3(Let_syntax$0[2][1], _dq_, t3, _dS_);
     }
     return caml_call3(Let_syntax$0[2][1], _dr_, t2, _dR_);
    }
    return caml_call3(Let_syntax$0[2][1], _ds_, t1, _dQ_);
   }
   var
    Mapn = [0, map2$1, map3$0, map4$0, map5$0, map6$0, map7$0],
    map2$2 = Mapn[1],
    map3$1 = Mapn[2],
    map4$1 = Mapn[3],
    map5$1 = Mapn[4],
    map6$1 = Mapn[5],
    map7$1 = Mapn[6];
   function all(param){
    if(! param) return caml_call1(return$0, 0);
    var _dK_ = param[2], t1 = param[1];
    if(! _dK_) return caml_call2(map$1, t1, function(a1){return [0, a1, 0];});
    var _dL_ = _dK_[2], t2 = _dK_[1];
    if(! _dL_)
     return caml_call3
             (map2$2, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _dM_ = _dL_[2], t3 = _dL_[1];
    if(! _dM_)
     return caml_call4
             (map3$1,
              t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _dN_ = _dM_[2], t4 = _dM_[1];
    if(! _dN_)
     return caml_call5
             (map4$1,
              t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _dO_ = _dN_[2], t5 = _dN_[1];
    if(! _dO_)
     return caml_call6
             (map5$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _dP_ = _dO_[2], t6 = _dO_[1];
    if(! _dP_)
     return caml_call7
             (map6$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _dP_[1];
    if(! _dP_[2])
     return caml_call8
             (map7$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _dP_[2],
     left =
       caml_call8
        (map7$1,
         t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$2,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function reduce_balanced(xs, f){
    function _dH_(a, b){
     function _dI_(a){
      function _dJ_(b){return caml_call2(f, a, b);}
      return caml_call3(Let_syntax$0[2][1], _dt_, b, _dJ_);
     }
     return caml_call3(Let_syntax$0[2][1], _du_, a, _dI_);
    }
    return caml_call2(Core_List[110], xs, _dH_);
   }
   function fold_right(xs, f, init){
    var _dD_ = caml_call1(read, init);
    function _dE_(a, b){
     function _dF_(a){
      function _dG_(b){return caml_call2(f, a, b);}
      return caml_call3(Let_syntax$0[2][1], _dv_, b, _dG_);
     }
     return caml_call3(Let_syntax$0[2][1], _dw_, a, _dF_);
    }
    return caml_call3(Core_List[101], xs, _dE_, _dD_);
   }
   function all_unit(xs){
    function _dC_(param){return 0;}
    return caml_call2(map$1, all(xs), _dC_);
   }
   function all_map(map_of_computations){
    var
     _dy_ = caml_call1(Core_Map[3], map_of_computations),
     _dz_ = caml_call1(Core_Map[8], _dy_);
    function _dA_(param){
     var data = param[2], key = param[1];
     return caml_call2(map$1, data, caml_call1(Core_Tuple[1][6], key));
    }
    var _dB_ = caml_call2(Core_Map[81], 0, map_of_computations);
    return caml_call2(map$1, all(caml_call2(Core_List[51], _dB_, _dA_)), _dz_);
   }
   var
    symbol$4 = Applicative_infix[1],
    symbol$5 = Applicative_infix[2],
    symbol$6 = Applicative_infix[3],
    symbol_map$1 = Applicative_infix[4],
    map2$3 = Mapn[1],
    map3$2 = Mapn[2],
    map4$2 = Mapn[3],
    map5$2 = Mapn[4],
    map6$2 = Mapn[5],
    map7$2 = Mapn[6],
    Let_syntax$1 =
      [0,
       return$0,
       map$1,
       both$0,
       map2$3,
       map3$2,
       map4$2,
       map5$2,
       map6$2,
       map7$2],
    Let_syntax$2 =
      [0, return$0, symbol$4, symbol$5, symbol$6, symbol_map$1, Let_syntax$1],
    Computation =
      [0,
       return$0,
       map$1,
       both$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol_map$0,
       apply,
       Applicative_infix,
       Mapn,
       map2$2,
       map3$1,
       map4$1,
       map5$1,
       map6$1,
       map7$1,
       all,
       reduce_balanced,
       fold_right,
       all_unit,
       all_map,
       Let_syntax$2],
    Name_source = Bonsai_Value[1],
    return$1 = Bonsai_Value[2],
    map$2 = Bonsai_Value[3],
    both$1 = Bonsai_Value[4],
    symbol$7 = Bonsai_Value[5],
    symbol$8 = Bonsai_Value[6],
    symbol$9 = Bonsai_Value[7],
    symbol_map$2 = Bonsai_Value[8],
    apply$0 = Bonsai_Value[9],
    map2$4 = Bonsai_Value[10],
    all$0 = Bonsai_Value[11],
    all_unit$0 = Bonsai_Value[12],
    Applicative_infix$0 = Bonsai_Value[13],
    Open_on_rhs_intf = Bonsai_Value[14],
    Let_syntax$3 = Bonsai_Value[15],
    map3$3 = Bonsai_Value[16],
    map4$3 = Bonsai_Value[17],
    map5$3 = Bonsai_Value[18],
    map6$3 = Bonsai_Value[19],
    map7$3 = Bonsai_Value[20],
    named = Bonsai_Value[21],
    eval$0 = Bonsai_Value[23],
    of_incr = Bonsai_Value[24],
    return_exn = Bonsai_Value[25],
    transpose_opt = Bonsai_Value[26],
    _dx_ = Bonsai_Value[22];
   function cutoff$0(t, equal){return caml_call3(_dx_, 0, t, equal);}
   var
    Value =
      [0,
       Name_source,
       return$1,
       map$2,
       both$1,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol_map$2,
       apply$0,
       map2$4,
       all$0,
       all_unit$0,
       Applicative_infix$0,
       Open_on_rhs_intf,
       Let_syntax$3,
       map3$3,
       map4$3,
       map5$3,
       map6$3,
       map7$3,
       named,
       eval$0,
       of_incr,
       return_exn,
       transpose_opt,
       cutoff$0],
    Expert = [0, thunk, assoc_on];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc);
   var
    Bonsai_Proc =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       Computation_status,
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       path,
       Let_syntax$0,
       pure,
       const$0,
       with_model_resetter,
       fix,
       fix2,
       with_model_resetter$0,
       enum$0,
       scope_model,
       of_module1,
       of_module2,
       race_dynamic_model,
       of_module0,
       actor1,
       actor0,
       state,
       Toggle,
       toggle,
       toggle$0,
       state_opt,
       path_id,
       yoink,
       Edge$0,
       Effect_throttling,
       Incr,
       Map0,
       freeze,
       thunk,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc_set,
       assoc_list,
       Dynamic_scope$0,
       Clock,
       Memo,
       Computation,
       Value,
       Expert];
   runtime.caml_register_global(353, Bonsai_Proc, cst_Bonsai_Proc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Simplify
//# unitInfo: Requires: Bonsai__Path, Core, Core__List, Core__Option, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Simplify$0 = "Bonsai__Simplify",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Path = global_data.Bonsai__Path,
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Simplify$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/simplify.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "simplify.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Simplify = cst_Bonsai_Simplify$0;
   function sexp_of_t(of_a_001){return Core[620];}
   var
    include =
      caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t]),
    empty = include[4],
    is_empty = include[6],
    set = include[7],
    add_exn = include[13],
    remove = include[17],
    to_alist = include[21];
   function merge(a, b){
    function _ad_(acc, param){
     var id = param[1];
     return caml_call3(set, acc, id, 0);
    }
    var _ae_ = caml_call1(to_alist, b);
    return caml_call3(Core_List[20], _ae_, a, _ad_);
   }
   function sexp_of_t$0(of_a_002){return of_a_002;}
   var
    Env = caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t$0]);
   function squash(other){
    if(typeof other === "number") return 0;
    if(0 === other[0]) return other;
    var can_contain_path = other[3], gen = other[2], free = other[1];
    return caml_call1(is_empty, free)
            ? [0, caml_call1(gen, Env[4]), can_contain_path]
            : other;
   }
   function map(a, f){
    if(typeof a === "number") return 0;
    if(0 === a[0]){
     var can_contain_path = a[2], value = a[1];
     return [0, caml_call1(f, value), can_contain_path];
    }
    var can_contain_path$0 = a[3], gen = a[2], free = a[1];
    return [1,
            free,
            function(m){return caml_call1(f, caml_call1(gen, m));},
            can_contain_path$0];
   }
   function both(a, b){
    if(typeof a !== "number")
     if(0 === a[0]){
      var pa = a[2], a$0 = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){
        var pb = b[2], b$0 = b[1], pa$0 = pa || pb;
        return [0, [0, a$0, b$0], pa$0];
       }
       var pb$0 = b[3], gen = b[2], free = b[1], pa$1 = pa || pb$0;
       return [1,
               free,
               function(m){return [0, a$0, caml_call1(gen, m)];},
               pa$1];
      }
     }
     else{
      var pa$2 = a[3], gen$0 = a[2], free_a = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){
        var pb$1 = b[2], b$1 = b[1], pa$3 = pa$2 || pb$1;
        return [1,
                free_a,
                function(m){return [0, caml_call1(gen$0, m), b$1];},
                pa$3];
       }
       var
        pb$2 = b[3],
        gen_b = b[2],
        free_b = b[1],
        free$0 = merge(free_a, free_b),
        pa$4 = pa$2 || pb$2;
       return [1,
               free$0,
               function(env){
                var _ac_ = caml_call1(gen_b, env);
                return [0, caml_call1(gen$0, env), _ac_];
               },
               pa$4];
      }
     }
    return 0;
   }
   function value_to_function(value, key_id, data_id){
    var value$0 = value;
    for(;;){
     var match = value$0[1];
     switch(match[0]){
       case 0:
        var r = match[1], _k_ = 0;
        return [0, function(key, data){return r;}, _k_];
       case 1:
        return 0;
       case 2:
        var
         same_name = Core_Type_equal[8][9],
         match$0 = caml_call2(same_name, value$0[3], key_id),
         match$1 = caml_call2(same_name, value$0[3], data_id);
        if(match$0){
         var _l_ = 0;
         return [0, function(key, data){return key;}, _l_];
        }
        if(match$1){
         var _m_ = 0;
         return [0, function(key, data){return data;}, _m_];
        }
        var
         _n_ = 0,
         _o_ =
           function(env, param, _ab_){
            return caml_call2(Env[11], env, value$0[3]);
           };
        return [1, caml_call3(add_exn, empty, value$0[3], 0), _o_, _n_];
       case 3:
        var
         b = match[2],
         a = match[1],
         let_syntax_003 = value_to_function(a, key_id, data_id),
         let_syntax_004 = value_to_function(b, key_id, data_id),
         _p_ =
           function(param, key, data){
            var b = param[2], a = param[1], _aa_ = caml_call2(b, key, data);
            return [0, caml_call2(a, key, data), _aa_];
           };
        return map(both(let_syntax_003, let_syntax_004), _p_);
       case 4:
        var value$1 = match[1];
        if(! match[3]) return 0;
        var value$0 = value$1;
        break;
       case 5:
        var
         f = match[2],
         t = match[1],
         _q_ =
           function(a, key, data){
            return caml_call1(f, caml_call2(a, key, data));
           };
        return map(value_to_function(t, key_id, data_id), _q_);
       case 6:
        var
         f$0 = match[3],
         t2 = match[2],
         t1 = match[1],
         let_syntax_007 = value_to_function(t1, key_id, data_id),
         let_syntax_008 = value_to_function(t2, key_id, data_id),
         _r_ =
           function(param, key, data){
            var t2 = param[2], t1 = param[1], _$_ = caml_call2(t2, key, data);
            return caml_call2(f$0, caml_call2(t1, key, data), _$_);
           };
        return map(both(let_syntax_007, let_syntax_008), _r_);
       case 7:
        var
         f$1 = match[4],
         t3 = match[3],
         t2$0 = match[2],
         t1$0 = match[1],
         let_syntax_010 = value_to_function(t1$0, key_id, data_id),
         let_syntax_011 = value_to_function(t2$0, key_id, data_id),
         let_syntax_012 = value_to_function(t3, key_id, data_id),
         _s_ =
           function(param, key, data){
            var
             match = param[2],
             t3 = match[2],
             t2 = match[1],
             t1 = param[1],
             _Z_ = caml_call2(t3, key, data),
             ___ = caml_call2(t2, key, data);
            return caml_call3(f$1, caml_call2(t1, key, data), ___, _Z_);
           };
        return map
                (both(let_syntax_010, both(let_syntax_011, let_syntax_012)),
                 _s_);
       case 8:
        var
         f$2 = match[5],
         t4 = match[4],
         t3$0 = match[3],
         t2$1 = match[2],
         t1$1 = match[1],
         let_syntax_014 = value_to_function(t1$1, key_id, data_id),
         let_syntax_015 = value_to_function(t2$1, key_id, data_id),
         let_syntax_016 = value_to_function(t3$0, key_id, data_id),
         let_syntax_017 = value_to_function(t4, key_id, data_id),
         _t_ =
           function(param, key, data){
            var
             _V_ = param[2],
             match = _V_[2],
             t4 = match[2],
             t3 = match[1],
             t2 = _V_[1],
             t1 = param[1],
             _W_ = caml_call2(t4, key, data),
             _X_ = caml_call2(t3, key, data),
             _Y_ = caml_call2(t2, key, data);
            return caml_call4(f$2, caml_call2(t1, key, data), _Y_, _X_, _W_);
           };
        return map
                (both
                  (let_syntax_014,
                   both(let_syntax_015, both(let_syntax_016, let_syntax_017))),
                 _t_);
       case 9:
        var
         f$3 = match[6],
         t5 = match[5],
         t4$0 = match[4],
         t3$1 = match[3],
         t2$2 = match[2],
         t1$2 = match[1],
         let_syntax_019 = value_to_function(t1$2, key_id, data_id),
         let_syntax_020 = value_to_function(t2$2, key_id, data_id),
         let_syntax_021 = value_to_function(t3$1, key_id, data_id),
         let_syntax_022 = value_to_function(t4$0, key_id, data_id),
         let_syntax_023 = value_to_function(t5, key_id, data_id),
         _u_ =
           function(param, key, data){
            var
             _P_ = param[2],
             _Q_ = _P_[2],
             match = _Q_[2],
             t5 = match[2],
             t4 = match[1],
             t3 = _Q_[1],
             t2 = _P_[1],
             t1 = param[1],
             _R_ = caml_call2(t5, key, data),
             _S_ = caml_call2(t4, key, data),
             _T_ = caml_call2(t3, key, data),
             _U_ = caml_call2(t2, key, data);
            return caml_call5
                    (f$3, caml_call2(t1, key, data), _U_, _T_, _S_, _R_);
           };
        return map
                (both
                  (let_syntax_019,
                   both
                    (let_syntax_020,
                     both(let_syntax_021, both(let_syntax_022, let_syntax_023)))),
                 _u_);
       case 10:
        var
         f$4 = match[7],
         t6 = match[6],
         t5$0 = match[5],
         t4$1 = match[4],
         t3$2 = match[3],
         t2$3 = match[2],
         t1$3 = match[1],
         let_syntax_025 = value_to_function(t1$3, key_id, data_id),
         let_syntax_026 = value_to_function(t2$3, key_id, data_id),
         let_syntax_027 = value_to_function(t3$2, key_id, data_id),
         let_syntax_028 = value_to_function(t4$1, key_id, data_id),
         let_syntax_029 = value_to_function(t5$0, key_id, data_id),
         let_syntax_030 = value_to_function(t6, key_id, data_id),
         _v_ =
           function(param, key, data){
            var
             _H_ = param[2],
             _I_ = _H_[2],
             _J_ = _I_[2],
             match = _J_[2],
             t6 = match[2],
             t5 = match[1],
             t4 = _J_[1],
             t3 = _I_[1],
             t2 = _H_[1],
             t1 = param[1],
             _K_ = caml_call2(t6, key, data),
             _L_ = caml_call2(t5, key, data),
             _M_ = caml_call2(t4, key, data),
             _N_ = caml_call2(t3, key, data),
             _O_ = caml_call2(t2, key, data);
            return caml_call6
                    (f$4, caml_call2(t1, key, data), _O_, _N_, _M_, _L_, _K_);
           };
        return map
                (both
                  (let_syntax_025,
                   both
                    (let_syntax_026,
                     both
                      (let_syntax_027,
                       both(let_syntax_028, both(let_syntax_029, let_syntax_030))))),
                 _v_);
       case 11:
        var
         f$5 = match[8],
         t7 = match[7],
         t6$0 = match[6],
         t5$1 = match[5],
         t4$2 = match[4],
         t3$3 = match[3],
         t2$4 = match[2],
         t1$4 = match[1],
         let_syntax_032 = value_to_function(t1$4, key_id, data_id),
         let_syntax_033 = value_to_function(t2$4, key_id, data_id),
         let_syntax_034 = value_to_function(t3$3, key_id, data_id),
         let_syntax_035 = value_to_function(t4$2, key_id, data_id),
         let_syntax_036 = value_to_function(t5$1, key_id, data_id),
         let_syntax_037 = value_to_function(t6$0, key_id, data_id),
         let_syntax_038 = value_to_function(t7, key_id, data_id),
         _w_ =
           function(param, key, data){
            var
             _x_ = param[2],
             _y_ = _x_[2],
             _z_ = _y_[2],
             _A_ = _z_[2],
             match = _A_[2],
             t7 = match[2],
             t6 = match[1],
             t5 = _A_[1],
             t4 = _z_[1],
             t3 = _y_[1],
             t2 = _x_[1],
             t1 = param[1],
             _B_ = caml_call2(t7, key, data),
             _C_ = caml_call2(t6, key, data),
             _D_ = caml_call2(t5, key, data),
             _E_ = caml_call2(t4, key, data),
             _F_ = caml_call2(t3, key, data),
             _G_ = caml_call2(t2, key, data);
            return caml_call7
                    (f$5,
                     caml_call2(t1, key, data),
                     _G_,
                     _F_,
                     _E_,
                     _D_,
                     _C_,
                     _B_);
           };
        return map
                (both
                  (let_syntax_032,
                   both
                    (let_syntax_033,
                     both
                      (let_syntax_034,
                       both
                        (let_syntax_035,
                         both(let_syntax_036, both(let_syntax_037, let_syntax_038)))))),
                 _w_);
       default: return 0;
     }
    }
   }
   function _a_(computation, key_id, data_id){
    function recurse(computation){return _a_(computation, key_id, data_id);}
    if(typeof computation === "number"){
     var _f_ = 1;
     return [0, function(path, param, _j_){return path;}, _f_];
    }
    switch(computation[0]){
      case 0:
       var value = computation[1], _g_ = function(f, path){return f;};
       return map(value_to_function(value, key_id, data_id), _g_);
      case 4:
       var
        into = computation[3],
        via = computation[2],
        from$0 = computation[1],
        match = recurse(from$0),
        match$0 = recurse(into);
       a:
       if(typeof match !== "number"){
        if(0 === match[0]){
         var pa = match[2], from = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           pb = match$0[3],
           gen = match$0[2],
           free = match$0[1],
           free$0 = caml_call2(remove, free, via),
           both_use_path = pa ? pb : pa,
           gen$0 =
             function(env, path, key, data){
              var
               from_path =
                 both_use_path ? caml_call2(Bonsai_Path[26], path, 0) : path,
               into_path =
                 both_use_path ? caml_call2(Bonsai_Path[26], path, 1) : path,
               _h_ = caml_call3(from, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _h_);
              return caml_call4(gen, env$0, into_path, key, data);
             },
           pa$0 = pa || pb;
          return squash([1, free$0, gen$0, pa$0]);
         }
        }
        else{
         var pa$1 = match[3], gen_a = match[2], free_a = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           pb$0 = match$0[3],
           gen_b = match$0[2],
           free_b = match$0[1],
           free_b$0 = caml_call2(remove, free_b, via),
           free$1 = merge(free_a, free_b$0),
           both_use_path$0 = pa$1 ? pb$0 : pa$1,
           gen$1 =
             function(env, path, key, data){
              var
               from_path =
                 both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 0) : path,
               into_path =
                 both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 1) : path,
               _i_ = caml_call4(gen_a, env, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _i_);
              return caml_call4(gen_b, env$0, into_path, key, data);
             },
           pa$2 = pa$1 || pb$0;
          return squash([1, free$1, gen$1, pa$2]);
         }
        }
        return match$0;
       }
       return 0;
      default: return 0;
    }
   }
   function computation_to_function(t, key_compare, key_id, data_id){
    var
     _b_ = caml_call2(Bonsai_Path[1][1], key_compare, key_id),
     make_path_element = caml_call1(Core[267], _b_),
     match = squash(_a_(t, key_id, data_id));
    if(typeof match !== "number" && 0 === match[0]){
     var
      can_contain_path = match[2],
      f = match[1],
      _c_ = can_contain_path ? -742043105 : 230487820,
      _d_ =
        [0,
         function(path, key, data){
          if(can_contain_path)
           var
            _e_ = [0, caml_call1(make_path_element, key)],
            path$0 = caml_call2(Bonsai_Path[26], path, _e_);
          else
           var path$0 = path;
          return caml_call3(f, path$0, key, data);
         },
         _c_];
     return caml_call1(Core_Option[58], _d_);
    }
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Simplify);
   var Bonsai_Simplify = [0, computation_to_function];
   runtime.caml_register_global(17, Bonsai_Simplify, cst_Bonsai_Simplify$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Constant_fold
//# unitInfo: Requires: Base__Option, Bonsai__Fix_transform, Bonsai__Fix_transform_intf, Bonsai__Proc, Bonsai__Simplify, Bonsai__Trampoline, Bonsai__Value, CamlinternalLazy, Core, Core__Error, Core__Lazy, Core__Map, Core__Option, Core__Type_equal, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Constant_fold$0 = "Bonsai__Constant_fold",
    cst_bonsai$0 = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "leaf1",
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Core_Map = global_data.Core__Map,
    Bonsai_Value = global_data.Bonsai__Value,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Error = global_data.Core__Error,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Option = global_data.Base__Option,
    Bonsai_Simplify = global_data.Bonsai__Simplify,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map,
    Bonsai_Fix_transform_intf = global_data.Bonsai__Fix_transform_intf,
    Bonsai_Fix_transform = global_data.Bonsai__Fix_transform;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Constant_fold$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/constant_fold.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "constant_fold.ml");
   var
    cst_does_not_have_a_correspond =
      "does not have a corresponding computation",
    cst_switch_with_value = "switch with value",
    cst_exception = "exception",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Constant_fold = cst_Bonsai_Constant_fold$0;
   function sexp_of_t(param){return Core[149];}
   var
    Constants_in_scope =
      caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t]),
    Down = [0];
   function wrap_value(here, name, v){
    return [0, v, here, caml_call2(Core_Type_equal[8][3], name, Core[149])];
   }
   function value_exception_folder(f){
    try{var _be_ = caml_call1(f, 0); return _be_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return wrap_value(0, cst_exception, [12, exn]);
    }
   }
   function lazy_contents_if_value_is_cons(param){
    var value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return [0, [250, x]];
      case 12:
       var ex = value[1];
       return [0,
               [246,
                function(param){throw caml_maybe_attach_backtrace(ex, 0);}]];
      default: return 0;
    }
   }
   function contents_if_value_is_constant(value){
    function _ba_(_bc_){
     var _bd_ = caml_obj_tag(_bc_);
     if(250 === _bd_) return _bc_[1];
     if(246 !== _bd_ && 244 !== _bd_) return _bc_;
     return caml_call1(CamlinternalLazy[2], _bc_);
    }
    var _bb_ = lazy_contents_if_value_is_cons(value);
    return caml_call2(Core_Option[34], _bb_, _ba_);
   }
   function constant_or_value(with_id, f){
    return value_exception_folder
            (function(param){
              var match = caml_call1(f, 0);
              if(! match) return with_id;
              var constant = match[1];
              return [0, [0, constant], with_id[2], with_id[3]];
             });
   }
   function simplify_assoc_if_simpl(key_comparator, key_id, data_id, map, by){
    function _a__(param){
     var
      can_contain_path = param[2],
      by = param[1],
      may_contain_path = 230487820 <= can_contain_path ? 1 : 0;
     return [9, map, by, may_contain_path];
    }
    var
     _a$_ =
       caml_call4
        (Bonsai_Simplify[1], by, key_comparator[2][1], key_id, data_id);
    return caml_call2(Base_Option[29][4][3], _a$_, _a__);
   }
   function _a_(Recurse){
    function _c_(param, assoc_t){
     var evaluated = param[2], constants_in_scope = param[1];
     if(typeof assoc_t !== "number")
      switch(assoc_t[0]){
        case 1:
         var
          input = assoc_t[6],
          reset = assoc_t[5],
          apply_action = assoc_t[4],
          dynamic_action = assoc_t[3],
          input_id = assoc_t[2],
          model = assoc_t[1],
          input$0 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               input)
             [3];
         try{
          var match = contents_if_value_is_constant(input$0);
          if(match)
           var
            input$1 = match[1],
            apply_action$0 =
              function(inject){
               var
                _a7_ = caml_call1(apply_action, inject),
                _a8_ = [0, input$1];
               return function(_a9_){return caml_call2(_a7_, _a9_, _a8_);};
              },
            _an_ =
              caml_call1
               (Bonsai_Trampoline[5][1],
                [2, model, dynamic_action, apply_action$0, reset]);
          else
           var
            _an_ =
              caml_call1
               (Bonsai_Trampoline[5][1],
                [1,
                 model,
                 input_id,
                 dynamic_action,
                 apply_action,
                 reset,
                 input$0]);
          return _an_;
         }
         catch(exn$0){
          var
           exn = caml_wrap_exception(exn$0),
           _am_ = [0, wrap_value(0, name, [12, exn])];
          return caml_call1(Bonsai_Trampoline[3], _am_);
         }
        case 4:
         var
          here = assoc_t[4],
          into = assoc_t[3],
          via = assoc_t[2],
          from = assoc_t[1],
          _aq_ =
            function(param){
             var from = param[3];
             if(typeof from !== "number" && 0 === from[0]){
              var
               with_id = from[1],
               _a2_ = lazy_contents_if_value_is_cons(with_id);
              if(caml_call1(Core_Option[62], _a2_)){
               var
                new_constants_in_scope =
                  caml_call3
                   (Constants_in_scope[13], constants_in_scope, via, with_id),
                _a5_ =
                  function(param){
                   var c = param[3];
                   return caml_call1(Bonsai_Trampoline[5][1], c);
                  },
                _a6_ =
                  caml_call4
                   (Recurse[1],
                    [0, new_constants_in_scope, evaluated],
                    0,
                    264513256,
                    into);
               return caml_call2(Bonsai_Trampoline[5][2][2], _a6_, _a5_);
              }
             }
             function _a3_(param){
              var into = param[3];
              return caml_call1
                      (Bonsai_Trampoline[5][1], [4, from, via, into, here]);
             }
             var
              _a4_ =
                caml_call4
                 (Recurse[1],
                  [0, constants_in_scope, evaluated],
                  0,
                  264513256,
                  into);
             return caml_call2(Bonsai_Trampoline[5][2][2], _a4_, _a3_);
            },
          _ar_ =
            caml_call4
             (Recurse[1],
              [0, constants_in_scope, evaluated],
              0,
              264513256,
              from);
         return caml_call2(Bonsai_Trampoline[5][2][2], _ar_, _aq_);
        case 7:
         var
          by = assoc_t[6],
          data_id = assoc_t[5],
          key_id = assoc_t[3],
          key_comparator = assoc_t[2],
          map = assoc_t[1],
          map_v =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               map)
             [3],
          match$0 = map_v[1];
         switch(match$0[0]){
           case 0:
            var
             map$0 = match$0[1],
             _as_ =
               function(key, data){
                var
                 data_binding =
                   [4, caml_call1(Bonsai_Proc[15], data), data_id, by, 0];
                return [4,
                        caml_call1(Bonsai_Proc[15], key),
                        key_id,
                        data_binding,
                        0];
               },
             _at_ = caml_call2(Core_Map[58], map$0, _as_),
             folded = caml_call1(Bonsai_Proc[49][21], _at_),
             _au_ =
               function(param){
                var r = param[3];
                return caml_call1(Bonsai_Trampoline[5][1], r);
               },
             _av_ =
               caml_call4
                (Recurse[1],
                 [0, constants_in_scope, evaluated],
                 0,
                 264513256,
                 folded);
            return caml_call2(Bonsai_Trampoline[5][2][2], _av_, _au_);
           case 12:
            var
             exn$0 = match$0[1],
             _ay_ = caml_call1(Bonsai_Value[25], exn$0),
             _az_ = caml_call1(Bonsai_Proc[1], _ay_);
            return caml_call1(Bonsai_Trampoline[5][1], _az_);
           default:
            var
             _aw_ =
               function(param){
                var
                 by = param[3],
                 match =
                   simplify_assoc_if_simpl
                    (key_comparator, key_id, data_id, map_v, by);
                if(! match)
                 return caml_call1
                         (Bonsai_Trampoline[5][1],
                          [7,
                           map_v,
                           assoc_t[2],
                           assoc_t[3],
                           assoc_t[4],
                           assoc_t[5],
                           by]);
                var kind = match[1];
                return caml_call1(Bonsai_Trampoline[5][1], kind);
               },
             _ax_ =
               caml_call4
                (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by);
            return caml_call2(Bonsai_Trampoline[5][2][2], _ax_, _aw_);
         }
        case 8:
         var
          by$0 = assoc_t[9],
          data_id$0 = assoc_t[8],
          key_id$0 = assoc_t[4],
          key_comparator$0 = assoc_t[2],
          map$1 = assoc_t[1],
          map$2 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               map$1)
             [3],
          _aA_ =
            function(param){
             var
              by = param[3],
              match =
                simplify_assoc_if_simpl
                 (key_comparator$0, key_id$0, data_id$0, map$2, by);
             if(! match)
              return caml_call1
                      (Bonsai_Trampoline[5][1],
                       [8,
                        map$2,
                        assoc_t[2],
                        assoc_t[3],
                        assoc_t[4],
                        assoc_t[5],
                        assoc_t[6],
                        assoc_t[7],
                        assoc_t[8],
                        by,
                        assoc_t[10]]);
             var kind = match[1];
             return caml_call1(Bonsai_Trampoline[5][1], kind);
            },
          _aB_ =
            caml_call4
             (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by$0);
         return caml_call2(Bonsai_Trampoline[5][2][2], _aB_, _aA_);
        case 10:
         var
          here$0 = assoc_t[3],
          arms = assoc_t[2],
          match$1 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               assoc_t[1])
             [3],
          match$2 = match$1[1];
         switch(match$2[0]){
           case 0:
            var i = match$2[1], match$3 = caml_call2(Core_Map[44], arms, i);
            if(match$3){
             var
              c = match$3[1],
              _aC_ =
                function(param){
                 var r = param[3];
                 return caml_call1(Bonsai_Trampoline[5][1], r);
                },
              _aD_ =
                caml_call4
                 (Recurse[1],
                  [0, constants_in_scope, evaluated],
                  0,
                  264513256,
                  c);
             return caml_call2(Bonsai_Trampoline[5][2][2], _aD_, _aC_);
            }
            var
             _aE_ =
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_does_not_have_a_correspond),
                0],
             _aF_ = [0, [1, [0, caml_call1(Core[389], i), _aE_]], 0],
             _aG_ =
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7], cst_switch_with_value),
                 _aF_]],
             _aH_ = caml_call1(Core_Error[20], _aG_),
             _aI_ = caml_call1(Core_Error[28], _aH_),
             _aJ_ = caml_call1(Bonsai_Value[25], _aI_),
             _aK_ = caml_call1(Bonsai_Proc[1], _aJ_);
            return caml_call1(Bonsai_Trampoline[5][1], _aK_);
           case 12:
            var
             exn$1 = match$2[1],
             _aP_ = caml_call1(Bonsai_Value[25], exn$1),
             _aQ_ = caml_call1(Bonsai_Proc[1], _aP_);
            return caml_call1(Bonsai_Trampoline[5][1], _aQ_);
           default:
            var
             _aL_ =
               function(arms){
                return caml_call1
                        (Bonsai_Trampoline[5][1], [10, match$1, arms, here$0]);
               },
             _aM_ =
               function(c){
                function _a0_(param){
                 var r = param[3];
                 return caml_call1(Bonsai_Trampoline[5][1], r);
                }
                var
                 _a1_ =
                   caml_call4
                    (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, c);
                return caml_call2(Bonsai_Trampoline[5][2][2], _a1_, _a0_);
               },
             _aN_ = caml_call2(Core_Map[57], arms, _aM_),
             _aO_ = caml_call1(Bonsai_Trampoline[4], _aN_);
            return caml_call2(Bonsai_Trampoline[5][2][2], _aO_, _aL_);
         }
        case 11:
         var t = assoc_t[1];
         if(evaluated){
          var
           _aR_ =
             function(t){
              function _aX_(param){
               var t = param[3];
               return caml_call1(Bonsai_Trampoline[5][1], t);
              }
              var
               _aY_ =
                 caml_call4
                  (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, t),
               _aZ_ = caml_call2(Bonsai_Trampoline[5][2][2], _aY_, _aX_);
              return caml_call1(Bonsai_Trampoline[2], _aZ_);
             },
           _aS_ = [11, caml_call2(Core_Lazy[30], t, _aR_)];
          return caml_call1(Bonsai_Trampoline[5][1], _aS_);
         }
         var
          _aT_ =
            function(param){
             var c = param[3];
             return caml_call1(Bonsai_Trampoline[5][1], c);
            },
          _aU_ = caml_obj_tag(t);
         a:
         if(250 === _aU_)
          var _aV_ = t[1];
         else{
          if(246 !== _aU_ && 244 !== _aU_){var _aV_ = t; break a;}
          var _aV_ = caml_call1(CamlinternalLazy[2], t);
         }
         var
          _aW_ =
            caml_call4
             (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, _aV_);
         return caml_call2(Bonsai_Trampoline[5][2][2], _aW_, _aT_);
      }
     function _ao_(param){
      var c = param[3];
      return caml_call1(Bonsai_Trampoline[5][1], c);
     }
     var
      _ap_ =
        caml_call4
         (Recurse[1],
          [0, constants_in_scope, evaluated],
          0,
          -582119678,
          assoc_t);
     return caml_call2(Bonsai_Trampoline[5][2][2], _ap_, _ao_);
    }
    function transform_v(constants_in_scope$0, param, value$1){
     var
      evaluated = constants_in_scope$0[2],
      constants_in_scope = constants_in_scope$0[1],
      value_with_id =
        caml_call4
          (Recurse[2],
           [0, constants_in_scope, evaluated],
           0,
           -582119678,
           value$1)
         [3],
      id = value_with_id[3],
      value = value_with_id[1];
     function rebuild(value){
      return [0, value, value_with_id[2], value_with_id[3]];
     }
     switch(value[0]){
       case 2:
        var
         match = caml_call2(Constants_in_scope[10], constants_in_scope, id);
        if(match)
         var value$0 = match[1], _f_ = value$0;
        else
         var _f_ = value_with_id;
        break;
       case 3:
        var
         b = value[2],
         a = value[1],
         _f_ =
           value_exception_folder
            (function(param){
              var
               match = contents_if_value_is_constant(a),
               match$0 = contents_if_value_is_constant(b);
              if(match){
               var l = match[1];
               if(match$0)
                var r = match$0[1], _al_ = [0, [0, l, r]];
               else
                var _al_ = [5, b, function(b){return [0, l, b];}];
               var value$0 = _al_;
              }
              else if(match$0)
               var
                r$0 = match$0[1],
                value$0 = [5, a, function(a){return [0, a, r$0];}];
              else
               var value$0 = value;
              return rebuild(value$0);
             });
        break;
       case 4:
        var
         was_wrapper_cutoff_added_by_le = value[3],
         equal = value[2],
         t = value[1],
         _f_ =
           value_exception_folder
            (function(param){
              var _ai_ = contents_if_value_is_constant(t), match = t[1];
              if(_ai_)
               var v = _ai_[1], _aj_ = [0, v];
              else if(4 === match[0])
               var
                was_nested_cutoff_added_by_let = match[3],
                inner_equal = match[2],
                t$0 = match[1],
                added_by_let_syntax =
                  was_wrapper_cutoff_added_by_le
                   ? was_nested_cutoff_added_by_let
                   : was_wrapper_cutoff_added_by_le,
                _aj_ =
                  [4,
                   t$0,
                   function(a, b){
                    var _ak_ = caml_call2(inner_equal, a, b);
                    return _ak_ ? _ak_ : caml_call2(equal, a, b);
                   },
                   added_by_let_syntax];
              else
               var _aj_ = value;
              return rebuild(_aj_);
             });
        break;
       case 5:
        var
         f = value[2],
         t$0 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _ag_(t1){return caml_call1(f, t1);}
              var _ah_ = contents_if_value_is_constant(t$0);
              return caml_call2(Base_Option[29][4][3], _ah_, _ag_);
             });
        break;
       case 6:
        var
         f$0 = value[3],
         t2 = value[2],
         t1 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _ac_(t1){
               function _ae_(t2){return caml_call2(f$0, t1, t2);}
               var _af_ = contents_if_value_is_constant(t2);
               return caml_call2(Base_Option[29][4][3], _af_, _ae_);
              }
              var _ad_ = contents_if_value_is_constant(t1);
              return caml_call2(Base_Option[29][4][2], _ad_, _ac_);
             });
        break;
       case 7:
        var
         f$1 = value[4],
         t3 = value[3],
         t2$0 = value[2],
         t1$0 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _Y_(t1){
               function ___(t2){
                function _aa_(t3){return caml_call3(f$1, t1, t2, t3);}
                var _ab_ = contents_if_value_is_constant(t3);
                return caml_call2(Base_Option[29][4][3], _ab_, _aa_);
               }
               var _$_ = contents_if_value_is_constant(t2$0);
               return caml_call2(Base_Option[29][4][2], _$_, ___);
              }
              var _Z_ = contents_if_value_is_constant(t1$0);
              return caml_call2(Base_Option[29][4][2], _Z_, _Y_);
             });
        break;
       case 8:
        var
         f$2 = value[5],
         t4 = value[4],
         t3$0 = value[3],
         t2$1 = value[2],
         t1$1 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _Q_(t1){
               function _S_(t2){
                function _U_(t3){
                 function _W_(t4){return caml_call4(f$2, t1, t2, t3, t4);}
                 var _X_ = contents_if_value_is_constant(t4);
                 return caml_call2(Base_Option[29][4][3], _X_, _W_);
                }
                var _V_ = contents_if_value_is_constant(t3$0);
                return caml_call2(Base_Option[29][4][2], _V_, _U_);
               }
               var _T_ = contents_if_value_is_constant(t2$1);
               return caml_call2(Base_Option[29][4][2], _T_, _S_);
              }
              var _R_ = contents_if_value_is_constant(t1$1);
              return caml_call2(Base_Option[29][4][2], _R_, _Q_);
             });
        break;
       case 9:
        var
         f$3 = value[6],
         t5 = value[5],
         t4$0 = value[4],
         t3$1 = value[3],
         t2$2 = value[2],
         t1$2 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _G_(t1){
               function _I_(t2){
                function _K_(t3){
                 function _M_(t4){
                  function _O_(t5){
                   return caml_call5(f$3, t1, t2, t3, t4, t5);
                  }
                  var _P_ = contents_if_value_is_constant(t5);
                  return caml_call2(Base_Option[29][4][3], _P_, _O_);
                 }
                 var _N_ = contents_if_value_is_constant(t4$0);
                 return caml_call2(Base_Option[29][4][2], _N_, _M_);
                }
                var _L_ = contents_if_value_is_constant(t3$1);
                return caml_call2(Base_Option[29][4][2], _L_, _K_);
               }
               var _J_ = contents_if_value_is_constant(t2$2);
               return caml_call2(Base_Option[29][4][2], _J_, _I_);
              }
              var _H_ = contents_if_value_is_constant(t1$2);
              return caml_call2(Base_Option[29][4][2], _H_, _G_);
             });
        break;
       case 10:
        var
         f$4 = value[7],
         t6 = value[6],
         t5$0 = value[5],
         t4$1 = value[4],
         t3$2 = value[3],
         t2$3 = value[2],
         t1$3 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _u_(t1){
               function _w_(t2){
                function _y_(t3){
                 function _A_(t4){
                  function _C_(t5){
                   function _E_(t6){
                    return caml_call6(f$4, t1, t2, t3, t4, t5, t6);
                   }
                   var _F_ = contents_if_value_is_constant(t6);
                   return caml_call2(Base_Option[29][4][3], _F_, _E_);
                  }
                  var _D_ = contents_if_value_is_constant(t5$0);
                  return caml_call2(Base_Option[29][4][2], _D_, _C_);
                 }
                 var _B_ = contents_if_value_is_constant(t4$1);
                 return caml_call2(Base_Option[29][4][2], _B_, _A_);
                }
                var _z_ = contents_if_value_is_constant(t3$2);
                return caml_call2(Base_Option[29][4][2], _z_, _y_);
               }
               var _x_ = contents_if_value_is_constant(t2$3);
               return caml_call2(Base_Option[29][4][2], _x_, _w_);
              }
              var _v_ = contents_if_value_is_constant(t1$3);
              return caml_call2(Base_Option[29][4][2], _v_, _u_);
             });
        break;
       case 11:
        var
         f$5 = value[8],
         t7 = value[7],
         t6$0 = value[6],
         t5$1 = value[5],
         t4$2 = value[4],
         t3$3 = value[3],
         t2$4 = value[2],
         t1$4 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _g_(t1){
               function _i_(t2){
                function _k_(t3){
                 function _m_(t4){
                  function _o_(t5){
                   function _q_(t6){
                    function _s_(t7){
                     return caml_call7(f$5, t1, t2, t3, t4, t5, t6, t7);
                    }
                    var _t_ = contents_if_value_is_constant(t7);
                    return caml_call2(Base_Option[29][4][3], _t_, _s_);
                   }
                   var _r_ = contents_if_value_is_constant(t6$0);
                   return caml_call2(Base_Option[29][4][2], _r_, _q_);
                  }
                  var _p_ = contents_if_value_is_constant(t5$1);
                  return caml_call2(Base_Option[29][4][2], _p_, _o_);
                 }
                 var _n_ = contents_if_value_is_constant(t4$2);
                 return caml_call2(Base_Option[29][4][2], _n_, _m_);
                }
                var _l_ = contents_if_value_is_constant(t3$3);
                return caml_call2(Base_Option[29][4][2], _l_, _k_);
               }
               var _j_ = contents_if_value_is_constant(t2$4);
               return caml_call2(Base_Option[29][4][2], _j_, _i_);
              }
              var _h_ = contents_if_value_is_constant(t1$4);
              return caml_call2(Base_Option[29][4][2], _h_, _g_);
             });
        break;
       default: var _f_ = value_with_id;
     }
     return [0, 0, 0, _f_];
    }
    function transform_c(constants_in_scope, param, c){
     function _d_(r){
      return caml_call1(Bonsai_Trampoline[5][1], [0, 0, 0, r]);
     }
     var _e_ = _c_(constants_in_scope, c);
     return caml_call2(Bonsai_Trampoline[5][2][2], _e_, _d_);
    }
    return [0, transform_c, transform_v];
   }
   var
    open =
      caml_call1
       (caml_call1
         (Bonsai_Fix_transform[1],
          [0, Down, [0], Bonsai_Fix_transform_intf[1]]),
        _a_),
    transform_c = open[1];
   function constant_fold(c){
    var
     _b_ = caml_call3(transform_c, [0, Constants_in_scope[4], 0], 0, c),
     r = caml_call1(Bonsai_Trampoline[2], _b_)[3];
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Constant_fold);
   var Bonsai_Constant_fold = [0, constant_fold];
   runtime.caml_register_global
    (31, Bonsai_Constant_fold, cst_Bonsai_Constant_fold$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Flatten_values
//# unitInfo: Requires: Bonsai__Fix_transform, Bonsai__Fix_transform_intf, Bonsai__Trampoline, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Flatten_values$0 = "Bonsai__Flatten_values",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Fix_transform_intf = global_data.Bonsai__Fix_transform_intf,
    Bonsai_Fix_transform = global_data.Bonsai__Fix_transform;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Flatten_values$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/flatten_values.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "flatten_values.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Flatten_values = cst_Bonsai_Flatten_values$0;
   function value_map(param){
    var id = param[3], here = param[2], value = param[1];
    a:
    {
     switch(value[0]){
       case 3:
        var _e_ = value[2][1];
        if(3 === _e_[0]){
         var t2 = _e_[1], t1 = value[1], _f_ = _e_[2][1];
         if(3 === _f_[0]){
          var t3$0 = _f_[1], _h_ = _f_[2][1];
          if(3 === _h_[0]){
           var t4$0 = _h_[1], _j_ = _h_[2][1];
           if(3 === _j_[0]){
            var t5$0 = _j_[1], match = _j_[2][1];
            if(3 === match[0])
             var
              t7 = match[2],
              t6$0 = match[1],
              _l_ =
                [11,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6$0,
                 t7,
                 function(t1, t2, t3, t4, t5, t6, t7){
                  return [0,
                          t1,
                          [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]];
                 }];
            else
             var
              t6 = _j_[2],
              _l_ =
                [10,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6,
                 function(t1, t2, t3, t4, t5, t6){
                  return [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]];
                 }];
            var _k_ = _l_;
           }
           else
            var
             t5 = _h_[2],
             _k_ =
               [9,
                t1,
                t2,
                t3$0,
                t4$0,
                t5,
                function(t1, t2, t3, t4, t5){
                 return [0, t1, [0, t2, [0, t3, [0, t4, t5]]]];
                }];
           var _i_ = _k_;
          }
          else
           var
            t4 = _f_[2],
            _i_ =
              [8,
               t1,
               t2,
               t3$0,
               t4,
               function(t1, t2, t3, t4){return [0, t1, [0, t2, [0, t3, t4]]];}];
          var _g_ = _i_;
         }
         else
          var
           t3 = _e_[2],
           _g_ =
             [7,
              t1,
              t2,
              t3,
              function(t1, t2, t3){return [0, t1, [0, t2, t3]];}];
         var value$0 = _g_;
         break a;
        }
        break;
       case 5:
        var _m_ = value[1][1];
        if(3 === _m_[0]){
         var t1$0 = _m_[1], _n_ = _m_[2][1];
         if(3 === _n_[0]){
          var t2$1 = _n_[1], _p_ = _n_[2][1];
          if(3 === _p_[0]){
           var t3$2 = _p_[1], _r_ = _p_[2][1];
           if(3 === _r_[0]){
            var t4$2 = _r_[1], _t_ = _r_[2][1];
            if(3 === _t_[0]){
             var t5$2 = _t_[1], match$0 = _t_[2][1];
             if(3 === match$0[0])
              var
               f$4 = value[2],
               t7$0 = match$0[2],
               t6$2 = match$0[1],
               _v_ =
                 [11,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$2,
                  t7$0,
                  function(t1, t2, t3, t4, t5, t6, t7){
                   return caml_call1
                           (f$4,
                            [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]]);
                  }];
             else
              var
               f$3 = value[2],
               t6$1 = _t_[2],
               _v_ =
                 [10,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$1,
                  function(t1, t2, t3, t4, t5, t6){
                   return caml_call1
                           (f$3, [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]]);
                  }];
             var _u_ = _v_;
            }
            else
             var
              f$2 = value[2],
              t5$1 = _r_[2],
              _u_ =
                [9,
                 t1$0,
                 t2$1,
                 t3$2,
                 t4$2,
                 t5$1,
                 function(t1, t2, t3, t4, t5){
                  return caml_call1
                          (f$2, [0, t1, [0, t2, [0, t3, [0, t4, t5]]]]);
                 }];
            var _s_ = _u_;
           }
           else
            var
             f$1 = value[2],
             t4$1 = _p_[2],
             _s_ =
               [8,
                t1$0,
                t2$1,
                t3$2,
                t4$1,
                function(t1, t2, t3, t4){
                 return caml_call1(f$1, [0, t1, [0, t2, [0, t3, t4]]]);
                }];
           var _q_ = _s_;
          }
          else
           var
            f$0 = value[2],
            t3$1 = _n_[2],
            _q_ =
              [7,
               t1$0,
               t2$1,
               t3$1,
               function(t1, t2, t3){
                return caml_call1(f$0, [0, t1, [0, t2, t3]]);
               }];
          var _o_ = _q_;
         }
         else
          var
           f = value[2],
           t2$0 = _m_[2],
           _o_ =
             [6,
              t1$0,
              t2$0,
              function(t1, t2){return caml_call1(f, [0, t1, t2]);}];
         var value$0 = _o_;
         break a;
        }
        break;
     }
     var value$0 = value;
    }
    return [0, value$0, here, id];
   }
   function _a_(Recurse){
    function transform_v(param, _d_, v){
     var out = value_map(v);
     return caml_call4(Recurse[2], 0, 0, -582119678, out);
    }
    function transform_c(param, _c_, c){
     return caml_call4(Recurse[1], 0, 0, -582119678, c);
    }
    return [0, transform_c, transform_v];
   }
   var
    open =
      caml_call1
       (caml_call1
         (Bonsai_Fix_transform[1],
          [0, [0], [0], Bonsai_Fix_transform_intf[1]]),
        _a_),
    transform_c = open[1];
   function flatten_values(c){
    var
     _b_ = caml_call3(transform_c, 0, 0, c),
     r = caml_call1(Bonsai_Trampoline[2], _b_)[3];
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Flatten_values);
   var Bonsai_Flatten_values = [0, flatten_values];
   runtime.caml_register_global
    (14, Bonsai_Flatten_values, cst_Bonsai_Flatten_values$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Pre_process
//# unitInfo: Requires: Bonsai__Constant_fold, Bonsai__Flatten_values, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Pre_process$0 = "Bonsai__Pre_process",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Constant_fold = global_data.Bonsai__Constant_fold,
    Bonsai_Flatten_values = global_data.Bonsai__Flatten_values,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Pre_process$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/pre_process.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "pre_process.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Pre_process = cst_Bonsai_Pre_process$0;
   function pre_process(t){
    var _a_ = caml_call1(Bonsai_Constant_fold[1], t);
    return caml_call1(Bonsai_Flatten_values[1], _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Pre_process);
   var Bonsai_Pre_process = [0, pre_process];
   runtime.caml_register_global
    (13, Bonsai_Pre_process, cst_Bonsai_Pre_process$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Skeleton
//# unitInfo: Requires: Base__Hash, Bonsai__Meta, Bonsai__Node_path, CamlinternalLazy, CamlinternalOO, Core, Core__Fn, Core__Hashtbl, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Core__Sexp, Core__Source_code_position, Core__String, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc = "Assoc",
    cst_Assoc_on = "Assoc_on",
    cst_Assoc_simpl = "Assoc_simpl",
    cst_Bonsai_Skeleton$0 = "Bonsai__Skeleton",
    cst_Constant = "Constant",
    cst_Cutoff = "Cutoff",
    cst_Exception = "Exception",
    cst_Fetch = "Fetch",
    cst_Identity = "Identity",
    cst_Incr = "Incr",
    cst_Lazy = "Lazy",
    cst_Leaf0 = "Leaf0",
    cst_Leaf01 = "Leaf01",
    cst_Leaf1 = "Leaf1",
    cst_Leaf_incr = "Leaf_incr",
    cst_Lifecycle = "Lifecycle",
    cst_Mapn = "Mapn",
    cst_Model_cutoff = "Model_cutoff",
    cst_Named = "Named",
    cst_Path = "Path",
    cst_Return = "Return",
    cst_Store = "Store",
    cst_Sub = "Sub",
    cst_Switch = "Switch",
    cst_With_model_resetter = "With_model_resetter",
    cst_Wrap = "Wrap",
    cst_added_by_let_syntax = "added_by_let_syntax",
    cst_arms = "arms",
    cst_bonsai$0 = "bonsai",
    cst_bool = "bool",
    cst_by = "by",
    cst_cmp_id = "cmp_id",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_data_id = "data_id",
    cst_from = "from",
    cst_here = "here",
    cst_id = "id",
    cst_inject_id = "inject_id",
    cst_inner = "inner",
    cst_input = "input",
    cst_inputs = "inputs",
    cst_into = "into",
    cst_io_key_id = "io_key_id",
    cst_key_id = "key_id",
    cst_kind = "kind",
    cst_lazy = "lazy_",
    cst_list = "list",
    cst_map = "map",
    cst_match = "match_",
    cst_model_cmp_id = "model_cmp_id",
    cst_model_id = "model_id",
    cst_model_key_id = "model_key_id",
    cst_node_path = "node_path",
    cst_option = "option",
    cst_reset_id = "reset_id",
    cst_source_code_position = "source_code_position",
    cst_t = "t",
    cst_value = "value",
    cst_value_kind = "value_kind",
    cst_via = "via",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    _a_ =
      [0,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_bool],
    _b_ =
      [0,
       cst_value_kind,
       cst_value,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _c_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id,
       cst_node_path,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value,
       cst_source_code_position],
    shared =
      [0, cst_computation, cst_computation_kind, cst_value, cst_value_kind],
    CamlinternalOO = global_data.CamlinternalOO,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Lazy = global_data.Core__Lazy,
    Core_Fn = global_data.Core__Fn,
    Core = global_data.Core,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_String = global_data.Core__String,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Sexp = global_data.Core__Sexp,
    Core_Int = global_data.Core__Int,
    Base_Hash = global_data.Base__Hash,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Skeleton$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/skeleton.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "skeleton.ml");
   var
    _bB_ = [12, 0],
    _aM_ = [0, cst_Leaf0],
    _aN_ = [0, cst_Path],
    _aO_ = [0, cst_value],
    _aP_ = [0, cst_Return],
    _aQ_ = [0, cst_input],
    _aR_ = [0, cst_Leaf01],
    _aS_ = [0, cst_input],
    _aT_ = [0, cst_Leaf1],
    _aU_ = [0, cst_input],
    _aV_ = [0, cst_Leaf_incr],
    _aW_ = [0, cst_t],
    _aX_ = [0, cst_Model_cutoff],
    _aY_ = [0, cst_into],
    _aZ_ = [0, cst_via],
    _a0_ = [0, cst_from],
    _a1_ = [0, cst_Sub],
    _a2_ = [0, cst_inner],
    _a3_ = [0, cst_value],
    _a4_ = [0, cst_id],
    _a5_ = [0, cst_Store],
    _a6_ = [0, cst_id],
    _a7_ = [0, cst_Fetch],
    _a8_ = [0, cst_by],
    _a9_ = [0, cst_data_id],
    _a__ = [0, cst_cmp_id],
    _a$_ = [0, cst_key_id],
    _ba_ = [0, cst_map],
    _bb_ = [0, cst_Assoc],
    _bc_ = [0, cst_by],
    _bd_ = [0, cst_data_id],
    _be_ = [0, cst_model_cmp_id],
    _bf_ = [0, cst_model_key_id],
    _bg_ = [0, cst_io_key_id],
    _bh_ = [0, cst_map],
    _bi_ = [0, cst_Assoc_on],
    _bj_ = [0, cst_map],
    _bk_ = [0, cst_Assoc_simpl],
    _bl_ = [0, cst_arms],
    _bm_ = [0, cst_match],
    _bn_ = [0, cst_Switch],
    _bo_ = [0, cst_t],
    _bp_ = [0, cst_Lazy],
    _bq_ = [0, cst_inner],
    _br_ = [0, cst_inject_id],
    _bs_ = [0, cst_model_id],
    _bt_ = [0, cst_Wrap],
    _bu_ = [0, cst_reset_id],
    _bv_ = [0, cst_inner],
    _bw_ = [0, cst_With_model_resetter],
    _bx_ = [0, cst_value],
    _by_ = [0, cst_Lifecycle],
    _bz_ = [0, cst_t],
    _bA_ = [0, cst_Identity],
    _K_ = [0, cst_here],
    _L_ = [0, cst_kind],
    _M_ = [0, cst_node_path],
    _N_ = [0, cst_Leaf0],
    _O_ = [0, cst_Path],
    _P_ = [0, cst_value],
    _Q_ = [0, cst_Return],
    _R_ = [0, cst_input],
    _S_ = [0, cst_Leaf01],
    _T_ = [0, cst_input],
    _U_ = [0, cst_Leaf1],
    _V_ = [0, cst_input],
    _W_ = [0, cst_Leaf_incr],
    _X_ = [0, cst_t],
    _Y_ = [0, cst_Model_cutoff],
    _Z_ = [0, cst_into],
    ___ = [0, cst_via],
    _$_ = [0, cst_from],
    _aa_ = [0, cst_Sub],
    _ab_ = [0, cst_inner],
    _ac_ = [0, cst_value],
    _ad_ = [0, cst_id],
    _ae_ = [0, cst_Store],
    _af_ = [0, cst_id],
    _ag_ = [0, cst_Fetch],
    _ah_ = [0, cst_by],
    _ai_ = [0, cst_data_id],
    _aj_ = [0, cst_cmp_id],
    _ak_ = [0, cst_key_id],
    _al_ = [0, cst_map],
    _am_ = [0, cst_Assoc],
    _an_ = [0, cst_by],
    _ao_ = [0, cst_data_id],
    _ap_ = [0, cst_model_cmp_id],
    _aq_ = [0, cst_model_key_id],
    _ar_ = [0, cst_io_key_id],
    _as_ = [0, cst_map],
    _at_ = [0, cst_Assoc_on],
    _au_ = [0, cst_map],
    _av_ = [0, cst_Assoc_simpl],
    _aw_ = [0, cst_arms],
    _ax_ = [0, cst_match],
    _ay_ = [0, cst_Switch],
    _az_ = [0, cst_t],
    _aA_ = [0, cst_Lazy],
    _aB_ = [0, cst_inner],
    _aC_ = [0, cst_inject_id],
    _aD_ = [0, cst_model_id],
    _aE_ = [0, cst_Wrap],
    _aF_ = [0, cst_inner],
    _aG_ = [0, cst_reset_id],
    _aH_ = [0, cst_With_model_resetter],
    _aI_ = [0, cst_value],
    _aJ_ = [0, cst_Lifecycle],
    _aK_ = [0, cst_t],
    _aL_ = [0, cst_Identity],
    _E_ = [0, [11, "constant_", [2, 0, 0]], "constant_%s"],
    _F_ = [0, [11, "exception_", [2, 0, 0]], "exception_%s"],
    cst_incr = "incr",
    _G_ = [0, [12, 120, [2, 0, 0]], "x%s"],
    _H_ = [0, [11, "(cutoff ", [2, 0, [12, 41, 0]]], "(cutoff %s)"],
    _I_ = [0, " "],
    _J_ = [0, [11, "(mapn ", [2, 0, [12, 41, 0]]], "(mapn %s)"],
    _t_ = [0, cst_Exception],
    _u_ = [0, cst_Incr],
    _v_ = [0, cst_id],
    _w_ = [0, cst_Constant],
    _x_ = [0, "uid"],
    _y_ = [0, cst_Named],
    _z_ = [0, cst_added_by_let_syntax],
    _A_ = [0, cst_t],
    _B_ = [0, cst_Cutoff],
    _C_ = [0, cst_inputs],
    _D_ = [0, cst_Mapn],
    _g_ = [0, cst_id],
    _h_ = [0, cst_here],
    _i_ = [0, cst_kind],
    _j_ = [0, cst_node_path],
    _k_ = [0, cst_Constant],
    _l_ = [0, cst_Exception],
    _m_ = [0, cst_Incr],
    _n_ = [0, cst_Named],
    _o_ = [0, cst_added_by_let_syntax],
    _p_ = [0, cst_t],
    _q_ = [0, cst_Cutoff],
    _r_ = [0, cst_inputs],
    _s_ = [0, cst_Mapn],
    _e_ = [0, "Type"],
    _f_ = [0, "Test"],
    _d_ =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id,
       cst_lazy,
       cst_list,
       cst_node_path,
       cst_option,
       cst_source_code_position,
       cst_value,
       cst_value_kind],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Skeleton = cst_Bonsai_Skeleton$0;
   function finalize(node_path_builder){
    return [246,
            function(_ec_){
             return caml_call1(Bonsai_Node_path[38], node_path_builder);
            }];
   }
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(Core_Type_equal[8][11][23], a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call2(Core[382], a_005, b_006);
   }
   function hash_fold_t(hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
     return caml_call2(Core_Type_equal[8][11][24], hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
    return caml_call2(Core[387], hsv$1, a0$0);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _eb_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _eb_);
   }
   function sexp_of_t(param){
    if(0 === param[0]){
     var
      arg0_007 = param[1],
      res0_008 = caml_call1(Core_Type_equal[8][11][1], arg0_007);
     return [1, [0, _e_, [0, res0_008, 0]]];
    }
    var arg0_009 = param[1], res0_010 = caml_call1(Core[389], arg0_009);
    return [1, [0, _f_, [0, res0_010, 0]]];
   }
   function to_string(t){
    if(0 === t[0]){
     var uid = t[1], _ea_ = caml_call1(Core_Type_equal[8][11][1], uid);
     return caml_call1(Core_Sexp[86], _ea_);
    }
    var int$0 = t[1];
    return caml_call1(Core_Int[79], int$0);
   }
   function of_type_id(id){return [0, caml_call1(Core_Type_equal[8][2], id)];}
   function sexp_of_t$0(param){
    var
     id_018 = param[4],
     here_016 = param[3],
     kind_014 = param[2],
     node_path_012 = param[1],
     arg_019 = sexp_of_t(id_018),
     bnds_011 = [0, [1, [0, _g_, [0, arg_019, 0]]], 0],
     arg_017 =
       caml_call2(Core[515], Core_Source_code_position[38][1][13], here_016),
     bnds_011$0 = [0, [1, [0, _h_, [0, arg_017, 0]]], bnds_011],
     arg_015 = sexp_of_kind(kind_014),
     bnds_011$1 = [0, [1, [0, _i_, [0, arg_015, 0]]], bnds_011$0],
     arg_013 = caml_call2(Core_Lazy[23], Bonsai_Node_path[10], node_path_012),
     bnds_011$2 = [0, [1, [0, _j_, [0, arg_013, 0]]], bnds_011$1];
    return [1, bnds_011$2];
   }
   function sexp_of_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _k_;
       case 1:
        return _l_;
       case 2:
        return _m_;
       default: return _n_;
     }
    if(0 === param[0]){
     var
      added_by_let_syntax_023 = param[2],
      t_021 = param[1],
      arg_024 = caml_call1(Core[323], added_by_let_syntax_023),
      bnds_020 = [0, [1, [0, _o_, [0, arg_024, 0]]], 0],
      arg_022 = sexp_of_t$0(t_021),
      bnds_020$0 = [0, [1, [0, _p_, [0, arg_022, 0]]], bnds_020];
     return [1, [0, _q_, bnds_020$0]];
    }
    var
     inputs_026 = param[1],
     arg_027 = caml_call2(Core[472], sexp_of_t$0, inputs_026),
     bnds_025 = [0, [1, [0, _r_, [0, arg_027, 0]]], 0];
    return [1, [0, _s_, bnds_025]];
   }
   function sexp_of_t$1(param){
    if(typeof param === "number") return 0 === param ? _t_ : _u_;
    switch(param[0]){
      case 0:
       var
        id_029 = param[1],
        arg_030 = sexp_of_t(id_029),
        bnds_028 = [0, [1, [0, _v_, [0, arg_030, 0]]], 0];
       return [1, [0, _w_, bnds_028]];
      case 1:
       var
        uid_032 = param[1],
        arg_033 = sexp_of_t(uid_032),
        bnds_031 = [0, [1, [0, _x_, [0, arg_033, 0]]], 0];
       return [1, [0, _y_, bnds_031]];
      case 2:
       var
        added_by_let_syntax_037 = param[2],
        t_035 = param[1],
        arg_038 = caml_call1(Core[323], added_by_let_syntax_037),
        bnds_034 = [0, [1, [0, _z_, [0, arg_038, 0]]], 0],
        arg_036 = sexp_of_t$1(t_035),
        bnds_034$0 = [0, [1, [0, _A_, [0, arg_036, 0]]], bnds_034];
       return [1, [0, _B_, bnds_034$0]];
      default:
       var
        inputs_040 = param[1],
        arg_041 = caml_call2(Core[472], sexp_of_t$1, inputs_040),
        bnds_039 = [0, [1, [0, _C_, [0, arg_041, 0]]], 0];
       return [1, [0, _D_, bnds_039]];
    }
   }
   function of_complete(complete){
    var match = complete[2];
    if(typeof match === "number")
     switch(match){
       case 0:
        return [0, complete[4]];
       case 1:
        return 0;
       case 2:
        return 1;
       default: return [1, complete[4]];
     }
    if(0 === match[0]){
     var added_by_let_syntax = match[2], t = match[1];
     return [2, of_complete(t), added_by_let_syntax];
    }
    var inputs = match[1];
    return [3, caml_call2(Core_List[51], inputs, of_complete)];
   }
   function minimal_sexp_of_t(t){return sexp_of_t$1(of_complete(t));}
   function inputs(param){
    var kind = param[2];
    if(typeof kind === "number") return 0;
    if(0 === kind[0]){var t = kind[1]; return [0, t, 0];}
    var inputs = kind[1];
    return inputs;
   }
   function of_value(initial_path, value){
    var helper = function _d$_(_d9_, _d__){return _d$_.fun(_d9_, _d__);};
    function create_mapn_with_choices(current_path, values){
     function _d7_(i, param){
      var
       value = param[1],
       _d8_ = caml_call2(Bonsai_Node_path[36], current_path, i + 1 | 0);
      return caml_call2(helper, caml_call1(Bonsai_Node_path[37], _d8_), value);
     }
     return [1, caml_call2(Core_List[41], values, _d7_)];
    }
    caml_update_dummy
     (helper,
      function(current_path, param){
       var outer_id = param[3], here = param[2], value = param[1];
       switch(value[0]){
         case 0:
          var kind = 0; break;
         case 1:
          var kind = 2; break;
         case 2:
          var kind = 3; break;
         case 3:
          var
           t2 = value[2],
           t1 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1], [0, [0, t2], 0]]);
          break;
         case 4:
          var
           added_by_let_syntax = value[3],
           t = value[1],
           _d6_ = caml_call2(Bonsai_Node_path[36], current_path, 1),
           kind =
             [0,
              caml_call2(helper, caml_call1(Bonsai_Node_path[37], _d6_), t),
              added_by_let_syntax];
          break;
         case 5:
          var
           t$0 = value[1],
           kind = create_mapn_with_choices(current_path, [0, [0, t$0], 0]);
          break;
         case 6:
          var
           t2$0 = value[2],
           t1$0 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1$0], [0, [0, t2$0], 0]]);
          break;
         case 7:
          var
           t3 = value[3],
           t2$1 = value[2],
           t1$1 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1$1], [0, [0, t2$1], [0, [0, t3], 0]]]);
          break;
         case 8:
          var
           t4 = value[4],
           t3$0 = value[3],
           t2$2 = value[2],
           t1$2 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0, [0, t1$2], [0, [0, t2$2], [0, [0, t3$0], [0, [0, t4], 0]]]]);
          break;
         case 9:
          var
           t5 = value[5],
           t4$0 = value[4],
           t3$1 = value[3],
           t2$3 = value[2],
           t1$3 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$3],
                [0,
                 [0, t2$3],
                 [0, [0, t3$1], [0, [0, t4$0], [0, [0, t5], 0]]]]]);
          break;
         case 10:
          var
           t6 = value[6],
           t5$0 = value[5],
           t4$1 = value[4],
           t3$2 = value[3],
           t2$4 = value[2],
           t1$4 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$4],
                [0,
                 [0, t2$4],
                 [0,
                  [0, t3$2],
                  [0, [0, t4$1], [0, [0, t5$0], [0, [0, t6], 0]]]]]]);
          break;
         case 11:
          var
           t7 = value[7],
           t6$0 = value[6],
           t5$1 = value[5],
           t4$2 = value[4],
           t3$3 = value[3],
           t2$5 = value[2],
           t1$5 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$5],
                [0,
                 [0, t2$5],
                 [0,
                  [0, t3$3],
                  [0,
                   [0, t4$2],
                   [0, [0, t5$1], [0, [0, t6$0], [0, [0, t7], 0]]]]]]]);
          break;
         default: var kind = 1;
       }
       var _d5_ = of_type_id(outer_id);
       return [0, finalize(current_path), kind, here, _d5_];
      });
    return caml_call2(helper, initial_path, value);
   }
   function of_value$0(value){
    return of_value
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]), value);
   }
   function to_string_hum(param){
    var id = param[4], kind = param[2];
    if(typeof kind === "number")
     switch(kind){
       case 0:
        var _dZ_ = to_string(id); return caml_call2(Core[265], _E_, _dZ_);
       case 1:
        var _d0_ = to_string(id); return caml_call2(Core[265], _F_, _d0_);
       case 2:
        return cst_incr;
       default:
        var _d1_ = to_string(id); return caml_call2(Core[265], _G_, _d1_);
     }
    if(0 === kind[0]){
     var t = kind[1], _d2_ = to_string_hum(t);
     return caml_call2(Core[265], _H_, _d2_);
    }
    var
     inputs = kind[1],
     _d3_ = caml_call2(Core_List[51], inputs, to_string_hum),
     _d4_ = caml_call2(Core_String[46], _I_, _d3_);
    return caml_call2(Core[265], _J_, _d4_);
   }
   function sexp_of_t$2(param){
    var
     here_047 = param[3],
     kind_045 = param[2],
     node_path_043 = param[1],
     arg_048 =
       caml_call2(Core[515], Core_Source_code_position[38][1][13], here_047),
     bnds_042 = [0, [1, [0, _K_, [0, arg_048, 0]]], 0],
     arg_046 = sexp_of_kind$0(kind_045),
     bnds_042$0 = [0, [1, [0, _L_, [0, arg_046, 0]]], bnds_042],
     arg_044 = caml_call2(Core_Lazy[23], Bonsai_Node_path[10], node_path_043),
     bnds_042$1 = [0, [1, [0, _M_, [0, arg_044, 0]]], bnds_042$0];
    return [1, bnds_042$1];
   }
   function sexp_of_kind$0(param){
    if(typeof param === "number") return 0 === param ? _N_ : _O_;
    switch(param[0]){
      case 0:
       var
        value_050 = param[1],
        arg_051 = sexp_of_t$0(value_050),
        bnds_049 = [0, [1, [0, _P_, [0, arg_051, 0]]], 0];
       return [1, [0, _Q_, bnds_049]];
      case 1:
       var
        input_053 = param[1],
        arg_054 = sexp_of_t$0(input_053),
        bnds_052 = [0, [1, [0, _R_, [0, arg_054, 0]]], 0];
       return [1, [0, _S_, bnds_052]];
      case 2:
       var
        input_056 = param[1],
        arg_057 = sexp_of_t$0(input_056),
        bnds_055 = [0, [1, [0, _T_, [0, arg_057, 0]]], 0];
       return [1, [0, _U_, bnds_055]];
      case 3:
       var
        input_059 = param[1],
        arg_060 = sexp_of_t$0(input_059),
        bnds_058 = [0, [1, [0, _V_, [0, arg_060, 0]]], 0];
       return [1, [0, _W_, bnds_058]];
      case 4:
       var
        t_062 = param[1],
        arg_063 = sexp_of_t$2(t_062),
        bnds_061 = [0, [1, [0, _X_, [0, arg_063, 0]]], 0];
       return [1, [0, _Y_, bnds_061]];
      case 5:
       var
        into_069 = param[3],
        via_067 = param[2],
        from_065 = param[1],
        arg_070 = sexp_of_t$2(into_069),
        bnds_064 = [0, [1, [0, _Z_, [0, arg_070, 0]]], 0],
        arg_068 = sexp_of_t(via_067),
        bnds_064$0 = [0, [1, [0, ___, [0, arg_068, 0]]], bnds_064],
        arg_066 = sexp_of_t$2(from_065),
        bnds_064$1 = [0, [1, [0, _$_, [0, arg_066, 0]]], bnds_064$0];
       return [1, [0, _aa_, bnds_064$1]];
      case 6:
       var
        inner_076 = param[3],
        value_074 = param[2],
        id_072 = param[1],
        arg_077 = sexp_of_t$2(inner_076),
        bnds_071 = [0, [1, [0, _ab_, [0, arg_077, 0]]], 0],
        arg_075 = sexp_of_t$0(value_074),
        bnds_071$0 = [0, [1, [0, _ac_, [0, arg_075, 0]]], bnds_071],
        arg_073 = sexp_of_t(id_072),
        bnds_071$1 = [0, [1, [0, _ad_, [0, arg_073, 0]]], bnds_071$0];
       return [1, [0, _ae_, bnds_071$1]];
      case 7:
       var
        id_079 = param[1],
        arg_080 = sexp_of_t(id_079),
        bnds_078 = [0, [1, [0, _af_, [0, arg_080, 0]]], 0];
       return [1, [0, _ag_, bnds_078]];
      case 8:
       var
        by_090 = param[5],
        data_id_088 = param[4],
        cmp_id_086 = param[3],
        key_id_084 = param[2],
        map_082 = param[1],
        arg_091 = sexp_of_t$2(by_090),
        bnds_081 = [0, [1, [0, _ah_, [0, arg_091, 0]]], 0],
        arg_089 = sexp_of_t(data_id_088),
        bnds_081$0 = [0, [1, [0, _ai_, [0, arg_089, 0]]], bnds_081],
        arg_087 = sexp_of_t(cmp_id_086),
        bnds_081$1 = [0, [1, [0, _aj_, [0, arg_087, 0]]], bnds_081$0],
        arg_085 = sexp_of_t(key_id_084),
        bnds_081$2 = [0, [1, [0, _ak_, [0, arg_085, 0]]], bnds_081$1],
        arg_083 = sexp_of_t$0(map_082),
        bnds_081$3 = [0, [1, [0, _al_, [0, arg_083, 0]]], bnds_081$2];
       return [1, [0, _am_, bnds_081$3]];
      case 9:
       var
        by_103 = param[6],
        data_id_101 = param[5],
        model_cmp_id_099 = param[4],
        model_key_id_097 = param[3],
        io_key_id_095 = param[2],
        map_093 = param[1],
        arg_104 = sexp_of_t$2(by_103),
        bnds_092 = [0, [1, [0, _an_, [0, arg_104, 0]]], 0],
        arg_102 = sexp_of_t(data_id_101),
        bnds_092$0 = [0, [1, [0, _ao_, [0, arg_102, 0]]], bnds_092],
        arg_100 = sexp_of_t(model_cmp_id_099),
        bnds_092$1 = [0, [1, [0, _ap_, [0, arg_100, 0]]], bnds_092$0],
        arg_098 = sexp_of_t(model_key_id_097),
        bnds_092$2 = [0, [1, [0, _aq_, [0, arg_098, 0]]], bnds_092$1],
        arg_096 = sexp_of_t(io_key_id_095),
        bnds_092$3 = [0, [1, [0, _ar_, [0, arg_096, 0]]], bnds_092$2],
        arg_094 = sexp_of_t$0(map_093),
        bnds_092$4 = [0, [1, [0, _as_, [0, arg_094, 0]]], bnds_092$3];
       return [1, [0, _at_, bnds_092$4]];
      case 10:
       var
        map_106 = param[1],
        arg_107 = sexp_of_t$0(map_106),
        bnds_105 = [0, [1, [0, _au_, [0, arg_107, 0]]], 0];
       return [1, [0, _av_, bnds_105]];
      case 11:
       var
        arms_111 = param[2],
        match_109 = param[1],
        arg_112 = caml_call2(Core[472], sexp_of_t$2, arms_111),
        bnds_108 = [0, [1, [0, _aw_, [0, arg_112, 0]]], 0],
        arg_110 = sexp_of_t$0(match_109),
        bnds_108$0 = [0, [1, [0, _ax_, [0, arg_110, 0]]], bnds_108];
       return [1, [0, _ay_, bnds_108$0]];
      case 12:
       var
        t_114 = param[1],
        arg_115 = caml_call2(Core[515], sexp_of_t$2, t_114),
        bnds_113 = [0, [1, [0, _az_, [0, arg_115, 0]]], 0];
       return [1, [0, _aA_, bnds_113]];
      case 13:
       var
        inner_121 = param[3],
        inject_id_119 = param[2],
        model_id_117 = param[1],
        arg_122 = sexp_of_t$2(inner_121),
        bnds_116 = [0, [1, [0, _aB_, [0, arg_122, 0]]], 0],
        arg_120 = sexp_of_t(inject_id_119),
        bnds_116$0 = [0, [1, [0, _aC_, [0, arg_120, 0]]], bnds_116],
        arg_118 = sexp_of_t(model_id_117),
        bnds_116$1 = [0, [1, [0, _aD_, [0, arg_118, 0]]], bnds_116$0];
       return [1, [0, _aE_, bnds_116$1]];
      case 14:
       var
        inner_126 = param[2],
        reset_id_124 = param[1],
        arg_127 = sexp_of_t$2(inner_126),
        bnds_123 = [0, [1, [0, _aF_, [0, arg_127, 0]]], 0],
        arg_125 = sexp_of_t(reset_id_124),
        bnds_123$0 = [0, [1, [0, _aG_, [0, arg_125, 0]]], bnds_123];
       return [1, [0, _aH_, bnds_123$0]];
      case 15:
       var
        value_129 = param[1],
        arg_130 = sexp_of_t$0(value_129),
        bnds_128 = [0, [1, [0, _aI_, [0, arg_130, 0]]], 0];
       return [1, [0, _aJ_, bnds_128]];
      default:
       var
        t_132 = param[1],
        arg_133 = sexp_of_t$2(t_132),
        bnds_131 = [0, [1, [0, _aK_, [0, arg_133, 0]]], 0];
       return [1, [0, _aL_, bnds_131]];
    }
   }
   function of_computation(computation){
    function helper(current_path, computation){
     function choice_point(choice){
      var _dY_ = caml_call2(Bonsai_Node_path[36], current_path, choice);
      return caml_call1(Bonsai_Node_path[37], _dY_);
     }
     var node_path = finalize(current_path);
     if(typeof computation === "number") return [0, node_path, 1, 0];
     switch(computation[0]){
       case 0:
        var value = computation[1];
        return [0,
                node_path,
                [0,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), value)],
                0];
       case 1:
        var input = computation[6];
        return [0,
                node_path,
                [2,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input)],
                0];
       case 2:
        return [0, node_path, 0, 0];
       case 3:
        var input$0 = computation[1];
        return [0,
                node_path,
                [3,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input$0)],
                0];
       case 4:
        var
         here = computation[4],
         into = computation[3],
         via = computation[2],
         from = computation[1],
         _dD_ = helper(choice_point(2), into),
         _dE_ = of_type_id(via),
         kind = [5, helper(choice_point(1), from), _dE_, _dD_];
        return [0, node_path, kind, here];
       case 5:
        var
         inner = computation[3],
         value$0 = computation[2],
         id = computation[1],
         _dF_ = helper(choice_point(2), inner),
         _dG_ = of_value(choice_point(1), value$0),
         kind$0 = [6, of_type_id(id), _dG_, _dF_];
        return [0, node_path, kind$0, 0];
       case 6:
        var id$0 = computation[1], kind$1 = [7, of_type_id(id$0)];
        return [0, node_path, kind$1, 0];
       case 7:
        var
         by = computation[6],
         data_id = computation[5],
         cmp_id = computation[4],
         key_id = computation[3],
         map = computation[1],
         _dH_ = helper(choice_point(2), by),
         _dI_ = of_type_id(data_id),
         _dJ_ = of_type_id(cmp_id),
         _dK_ = of_type_id(key_id),
         kind$2 = [8, of_value(choice_point(1), map), _dK_, _dJ_, _dI_, _dH_];
        return [0, node_path, kind$2, 0];
       case 8:
        var
         by$0 = computation[9],
         data_id$0 = computation[8],
         model_cmp_id = computation[7],
         model_key_id = computation[6],
         io_key_id = computation[4],
         map$0 = computation[1],
         _dL_ = helper(choice_point(2), by$0),
         _dM_ = of_type_id(data_id$0),
         _dN_ = of_type_id(model_cmp_id),
         _dO_ = of_type_id(model_key_id),
         _dP_ = of_type_id(io_key_id),
         kind$3 =
           [9, of_value(choice_point(1), map$0), _dP_, _dO_, _dN_, _dM_, _dL_];
        return [0, node_path, kind$3, 0];
       case 9:
        var
         map$1 = computation[1],
         kind$4 =
           [10,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), map$1)];
        return [0, node_path, kind$4, 0];
       case 10:
        var
         arms = computation[2],
         index = [0, 1],
         match = computation[1],
         _dQ_ =
           function(param, computation, acc){
            index[1]++;
            return [0, helper(choice_point(index[1]), computation), acc];
           },
         _dR_ = caml_call3(Core_Map[61], arms, 0, _dQ_),
         _dS_ = caml_call1(Core_List[59], _dR_),
         kind$5 = [11, of_value(choice_point(1), match), _dS_];
        return [0, node_path, kind$5, 0];
       case 11:
        var t = computation[1];
        if(caml_call1(Core_Lazy[40], t)){
         var _dT_ = runtime.caml_obj_tag(t);
         a:
         if(250 === _dT_)
          var _dU_ = t[1];
         else{
          if(246 !== _dT_ && 244 !== _dT_){var _dU_ = t; break a;}
          var _dU_ = caml_call1(CamlinternalLazy[2], t);
         }
         var
          potentially_evaluated =
            [0, helper(caml_call1(Bonsai_Node_path[37], current_path), _dU_)];
        }
        else
         var potentially_evaluated = 0;
        return [0, node_path, [12, potentially_evaluated], 0];
       case 12:
        var
         inner$0 = computation[6],
         inject_id = computation[4],
         wrapper_model = computation[1],
         _dV_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$0),
         _dW_ = of_type_id(inject_id),
         id$1 = wrapper_model[3],
         kind$6 =
           [13,
            of_type_id(caml_call1(Bonsai_Meta[1][1][4], id$1)),
            _dW_,
            _dV_];
        return [0, node_path, kind$6, 0];
       case 13:
        var
         inner$1 = computation[2],
         reset_id = computation[1],
         _dX_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$1),
         kind$7 = [14, of_type_id(reset_id), _dX_];
        return [0, node_path, kind$7, 0];
       default:
        var
         value$1 = computation[1],
         kind$8 =
           [15,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), value$1)];
        return [0, node_path, kind$8, 0];
     }
    }
    return helper
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
             computation);
   }
   function sexp_of_t$3(param){
    if(typeof param === "number") return 0 === param ? _aM_ : _aN_;
    switch(param[0]){
      case 0:
       var
        value_135 = param[1],
        arg_136 = sexp_of_t$1(value_135),
        bnds_134 = [0, [1, [0, _aO_, [0, arg_136, 0]]], 0];
       return [1, [0, _aP_, bnds_134]];
      case 1:
       var
        input_138 = param[1],
        arg_139 = sexp_of_t$1(input_138),
        bnds_137 = [0, [1, [0, _aQ_, [0, arg_139, 0]]], 0];
       return [1, [0, _aR_, bnds_137]];
      case 2:
       var
        input_141 = param[1],
        arg_142 = sexp_of_t$1(input_141),
        bnds_140 = [0, [1, [0, _aS_, [0, arg_142, 0]]], 0];
       return [1, [0, _aT_, bnds_140]];
      case 3:
       var
        input_144 = param[1],
        arg_145 = sexp_of_t$1(input_144),
        bnds_143 = [0, [1, [0, _aU_, [0, arg_145, 0]]], 0];
       return [1, [0, _aV_, bnds_143]];
      case 4:
       var
        t_147 = param[1],
        arg_148 = sexp_of_t$3(t_147),
        bnds_146 = [0, [1, [0, _aW_, [0, arg_148, 0]]], 0];
       return [1, [0, _aX_, bnds_146]];
      case 5:
       var
        into_154 = param[3],
        via_152 = param[2],
        from_150 = param[1],
        arg_155 = sexp_of_t$3(into_154),
        bnds_149 = [0, [1, [0, _aY_, [0, arg_155, 0]]], 0],
        arg_153 = sexp_of_t(via_152),
        bnds_149$0 = [0, [1, [0, _aZ_, [0, arg_153, 0]]], bnds_149],
        arg_151 = sexp_of_t$3(from_150),
        bnds_149$1 = [0, [1, [0, _a0_, [0, arg_151, 0]]], bnds_149$0];
       return [1, [0, _a1_, bnds_149$1]];
      case 6:
       var
        inner_161 = param[3],
        value_159 = param[2],
        id_157 = param[1],
        arg_162 = sexp_of_t$3(inner_161),
        bnds_156 = [0, [1, [0, _a2_, [0, arg_162, 0]]], 0],
        arg_160 = sexp_of_t$1(value_159),
        bnds_156$0 = [0, [1, [0, _a3_, [0, arg_160, 0]]], bnds_156],
        arg_158 = sexp_of_t(id_157),
        bnds_156$1 = [0, [1, [0, _a4_, [0, arg_158, 0]]], bnds_156$0];
       return [1, [0, _a5_, bnds_156$1]];
      case 7:
       var
        id_164 = param[1],
        arg_165 = sexp_of_t(id_164),
        bnds_163 = [0, [1, [0, _a6_, [0, arg_165, 0]]], 0];
       return [1, [0, _a7_, bnds_163]];
      case 8:
       var
        by_175 = param[5],
        data_id_173 = param[4],
        cmp_id_171 = param[3],
        key_id_169 = param[2],
        map_167 = param[1],
        arg_176 = sexp_of_t$3(by_175),
        bnds_166 = [0, [1, [0, _a8_, [0, arg_176, 0]]], 0],
        arg_174 = sexp_of_t(data_id_173),
        bnds_166$0 = [0, [1, [0, _a9_, [0, arg_174, 0]]], bnds_166],
        arg_172 = sexp_of_t(cmp_id_171),
        bnds_166$1 = [0, [1, [0, _a__, [0, arg_172, 0]]], bnds_166$0],
        arg_170 = sexp_of_t(key_id_169),
        bnds_166$2 = [0, [1, [0, _a$_, [0, arg_170, 0]]], bnds_166$1],
        arg_168 = sexp_of_t$1(map_167),
        bnds_166$3 = [0, [1, [0, _ba_, [0, arg_168, 0]]], bnds_166$2];
       return [1, [0, _bb_, bnds_166$3]];
      case 9:
       var
        by_188 = param[6],
        data_id_186 = param[5],
        model_cmp_id_184 = param[4],
        model_key_id_182 = param[3],
        io_key_id_180 = param[2],
        map_178 = param[1],
        arg_189 = sexp_of_t$3(by_188),
        bnds_177 = [0, [1, [0, _bc_, [0, arg_189, 0]]], 0],
        arg_187 = sexp_of_t(data_id_186),
        bnds_177$0 = [0, [1, [0, _bd_, [0, arg_187, 0]]], bnds_177],
        arg_185 = sexp_of_t(model_cmp_id_184),
        bnds_177$1 = [0, [1, [0, _be_, [0, arg_185, 0]]], bnds_177$0],
        arg_183 = sexp_of_t(model_key_id_182),
        bnds_177$2 = [0, [1, [0, _bf_, [0, arg_183, 0]]], bnds_177$1],
        arg_181 = sexp_of_t(io_key_id_180),
        bnds_177$3 = [0, [1, [0, _bg_, [0, arg_181, 0]]], bnds_177$2],
        arg_179 = sexp_of_t$1(map_178),
        bnds_177$4 = [0, [1, [0, _bh_, [0, arg_179, 0]]], bnds_177$3];
       return [1, [0, _bi_, bnds_177$4]];
      case 10:
       var
        map_191 = param[1],
        arg_192 = sexp_of_t$1(map_191),
        bnds_190 = [0, [1, [0, _bj_, [0, arg_192, 0]]], 0];
       return [1, [0, _bk_, bnds_190]];
      case 11:
       var
        arms_196 = param[2],
        match_194 = param[1],
        arg_197 = caml_call2(Core[472], sexp_of_t$3, arms_196),
        bnds_193 = [0, [1, [0, _bl_, [0, arg_197, 0]]], 0],
        arg_195 = sexp_of_t$1(match_194),
        bnds_193$0 = [0, [1, [0, _bm_, [0, arg_195, 0]]], bnds_193];
       return [1, [0, _bn_, bnds_193$0]];
      case 12:
       var
        t_199 = param[1],
        arg_200 = caml_call2(Core[515], sexp_of_t$3, t_199),
        bnds_198 = [0, [1, [0, _bo_, [0, arg_200, 0]]], 0];
       return [1, [0, _bp_, bnds_198]];
      case 13:
       var
        inner_206 = param[3],
        inject_id_204 = param[2],
        model_id_202 = param[1],
        arg_207 = sexp_of_t$3(inner_206),
        bnds_201 = [0, [1, [0, _bq_, [0, arg_207, 0]]], 0],
        arg_205 = sexp_of_t(inject_id_204),
        bnds_201$0 = [0, [1, [0, _br_, [0, arg_205, 0]]], bnds_201],
        arg_203 = sexp_of_t(model_id_202),
        bnds_201$1 = [0, [1, [0, _bs_, [0, arg_203, 0]]], bnds_201$0];
       return [1, [0, _bt_, bnds_201$1]];
      case 14:
       var
        reset_id_211 = param[2],
        inner_209 = param[1],
        arg_212 = sexp_of_t(reset_id_211),
        bnds_208 = [0, [1, [0, _bu_, [0, arg_212, 0]]], 0],
        arg_210 = sexp_of_t$3(inner_209),
        bnds_208$0 = [0, [1, [0, _bv_, [0, arg_210, 0]]], bnds_208];
       return [1, [0, _bw_, bnds_208$0]];
      case 15:
       var
        value_214 = param[1],
        arg_215 = sexp_of_t$1(value_214),
        bnds_213 = [0, [1, [0, _bx_, [0, arg_215, 0]]], 0];
       return [1, [0, _by_, bnds_213]];
      default:
       var
        t_217 = param[1],
        arg_218 = sexp_of_t$3(t_217),
        bnds_216 = [0, [1, [0, _bz_, [0, arg_218, 0]]], 0];
       return [1, [0, _bA_, bnds_216]];
    }
   }
   function of_complete$0(complete){
    var match = complete[2];
    if(typeof match === "number") return 0 === match ? 0 : 1;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, of_complete(value)];
      case 1:
       var input = match[1]; return [1, of_complete(input)];
      case 2:
       var input$0 = match[1]; return [2, of_complete(input$0)];
      case 3:
       var input$1 = match[1]; return [3, of_complete(input$1)];
      case 4:
       var t = match[1]; return [4, of_complete$0(t)];
      case 5:
       var
        into = match[3],
        via = match[2],
        from = match[1],
        _dy_ = of_complete$0(into);
       return [5, of_complete$0(from), via, _dy_];
      case 6:
       var
        inner = match[3],
        value$0 = match[2],
        id = match[1],
        _dz_ = of_complete$0(inner);
       return [6, id, of_complete(value$0), _dz_];
      case 7:
       var id$0 = match[1]; return [7, id$0];
      case 8:
       var
        by = match[5],
        data_id = match[4],
        cmp_id = match[3],
        key_id = match[2],
        map = match[1],
        _dA_ = of_complete$0(by);
       return [8, of_complete(map), key_id, cmp_id, data_id, _dA_];
      case 9:
       var
        by$0 = match[6],
        data_id$0 = match[5],
        model_cmp_id = match[4],
        model_key_id = match[3],
        io_key_id = match[2],
        map$0 = match[1],
        _dB_ = of_complete$0(by$0);
       return [9,
               of_complete(map$0),
               io_key_id,
               model_key_id,
               model_cmp_id,
               data_id$0,
               _dB_];
      case 10:
       var map$1 = match[1]; return [10, of_complete(map$1)];
      case 11:
       var
        arms = match[2],
        match$0 = match[1],
        _dC_ = caml_call2(Core_List[51], arms, of_complete$0);
       return [11, of_complete(match$0), _dC_];
      case 12:
       var match$1 = match[1];
       if(! match$1) return _bB_;
       var t$0 = match$1[1];
       return [12, [0, of_complete$0(t$0)]];
      case 13:
       var inner$0 = match[3], inject_id = match[2], model_id = match[1];
       return [13, model_id, inject_id, of_complete$0(inner$0)];
      case 14:
       var inner$1 = match[2], reset_id = match[1];
       return [14, of_complete$0(inner$1), reset_id];
      case 15:
       var value$1 = match[1]; return [15, of_complete(value$1)];
      default: var t$1 = match[1]; return [16, of_complete$0(t$1)];
    }
   }
   function minimal_sexp_of_t$0(t){return sexp_of_t$3(of_complete$0(t));}
   function inputs$0(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, value, 0];
      case 1:
       var input = match[1]; return [0, input, 0];
      case 2:
       var input$0 = match[1]; return [0, input$0, 0];
      case 3:
       var input$1 = match[1]; return [0, input$1, 0];
      case 4:
       return 0;
      case 5:
       return 0;
      case 6:
       var value$0 = match[2]; return [0, value$0, 0];
      case 7:
       return 0;
      case 8:
       var map = match[1]; return [0, map, 0];
      case 9:
       var map$0 = match[1]; return [0, map$0, 0];
      case 10:
       var map$1 = match[1]; return [0, map$1, 0];
      case 11:
       return [0, match[1], 0];
      case 12:
       return 0;
      case 13:
       return 0;
      case 14:
       return 0;
      case 15:
       var value$1 = match[1]; return [0, value$1, 0];
      default: return 0;
    }
   }
   function children(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       return 0;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       return 0;
      case 4:
       var t$0 = match[1]; return [0, t$0, 0];
      case 5:
       var into = match[3], from = match[1]; return [0, from, [0, into, 0]];
      case 6:
       var inner = match[3]; return [0, inner, 0];
      case 7:
       return 0;
      case 8:
       var by = match[5]; return [0, by, 0];
      case 9:
       var by$0 = match[6]; return [0, by$0, 0];
      case 10:
       return 0;
      case 11:
       return 0;
      case 12:
       var match$0 = match[1];
       if(! match$0) return 0;
       var t$1 = match$0[1];
       return [0, t$1, 0];
      case 13:
       var inner$0 = match[3]; return [0, inner$0, 0];
      case 14:
       var inner$1 = match[2]; return [0, inner$1, 0];
      case 15:
       return 0;
      default: var t$2 = match[1]; return [0, t$2, 0];
    }
   }
   var map = [], _bC_ = 0, _bD_ = 0;
   caml_update_dummy
    (map,
     [0,
      0,
      function(_c__){
       var
        _c$_ = caml_call2(CamlinternalOO[8], _c__, _b_),
        _da_ = _c$_[1],
        _db_ = _c$_[2],
        _dc_ = _c$_[3],
        _dd_ = _c$_[4],
        _de_ = _c$_[5],
        _df_ = _c$_[6],
        _dg_ = _c$_[7],
        _dh_ = _c$_[8],
        _di_ = _c$_[9],
        _dj_ = _c$_[10],
        _dk_ = _c$_[11];
       function _dl_(self_1, x){
        if(typeof x === "number")
         switch(x){
           case 0:
            return 0;
           case 1:
            return 1;
           case 2:
            return 2;
           default: return 3;
         }
        if(0 === x[0]){
         var
          added_by_let_syntax = x[2],
          t = x[1],
          t$0 = caml_call2(self_1[1][1 + _db_], self_1, t),
          added_by_let_syntax$0 =
            caml_call2(self_1[1][1 + _dk_], self_1, added_by_let_syntax);
         return [0, t$0, added_by_let_syntax$0];
        }
        var
         inputs = x[1],
         _dx_ = caml_call1(self_1[1][1 + _db_], self_1),
         inputs$0 = caml_call3(self_1[1][1 + _df_], self_1, _dx_, inputs);
        return [1, inputs$0];
       }
       function _dm_(self_1, param){
        var
         id = param[4],
         here = param[3],
         kind = param[2],
         node_path = param[1],
         _dv_ = caml_call1(self_1[1][1 + _de_], self_1),
         node_path$0 =
           caml_call3(self_1[1][1 + _dg_], self_1, _dv_, node_path),
         kind$0 = caml_call2(self_1[1][1 + _da_], self_1, kind),
         _dw_ = caml_call1(self_1[1][1 + _dc_], self_1),
         here$0 = caml_call3(self_1[1][1 + _dd_], self_1, _dw_, here),
         id$0 = caml_call2(self_1[1][1 + _dh_], self_1, id);
        return [0, node_path$0, kind$0, here$0, id$0];
       }
       function _dn_(self_1, x){
        if(typeof x === "number") return 0 === x ? 0 : 1;
        switch(x[0]){
          case 0:
           var
            value = x[1],
            value$0 = caml_call2(self_1[1][1 + _db_], self_1, value);
           return [0, value$0];
          case 1:
           var
            input = x[1],
            input$0 = caml_call2(self_1[1][1 + _db_], self_1, input);
           return [1, input$0];
          case 2:
           var
            input$1 = x[1],
            input$2 = caml_call2(self_1[1][1 + _db_], self_1, input$1);
           return [2, input$2];
          case 3:
           var
            input$3 = x[1],
            input$4 = caml_call2(self_1[1][1 + _db_], self_1, input$3);
           return [3, input$4];
          case 4:
           var t = x[1], t$0 = caml_call2(self_1[1][1 + _dj_], self_1, t);
           return [4, t$0];
          case 5:
           var
            into = x[3],
            via = x[2],
            from = x[1],
            from$0 = caml_call2(self_1[1][1 + _dj_], self_1, from),
            via$0 = caml_call2(self_1[1][1 + _dh_], self_1, via),
            into$0 = caml_call2(self_1[1][1 + _dj_], self_1, into);
           return [5, from$0, via$0, into$0];
          case 6:
           var
            inner = x[3],
            value$1 = x[2],
            id = x[1],
            id$0 = caml_call2(self_1[1][1 + _dh_], self_1, id),
            value$2 = caml_call2(self_1[1][1 + _db_], self_1, value$1),
            inner$0 = caml_call2(self_1[1][1 + _dj_], self_1, inner);
           return [6, id$0, value$2, inner$0];
          case 7:
           var
            id$1 = x[1],
            id$2 = caml_call2(self_1[1][1 + _dh_], self_1, id$1);
           return [7, id$2];
          case 8:
           var
            by = x[5],
            data_id = x[4],
            cmp_id = x[3],
            key_id = x[2],
            map = x[1],
            map$0 = caml_call2(self_1[1][1 + _db_], self_1, map),
            key_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, key_id),
            cmp_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, cmp_id),
            data_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, data_id),
            by$0 = caml_call2(self_1[1][1 + _dj_], self_1, by);
           return [8, map$0, key_id$0, cmp_id$0, data_id$0, by$0];
          case 9:
           var
            by$1 = x[6],
            data_id$1 = x[5],
            model_cmp_id = x[4],
            model_key_id = x[3],
            io_key_id = x[2],
            map$1 = x[1],
            map$2 = caml_call2(self_1[1][1 + _db_], self_1, map$1),
            io_key_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, io_key_id),
            model_key_id$0 =
              caml_call2(self_1[1][1 + _dh_], self_1, model_key_id),
            model_cmp_id$0 =
              caml_call2(self_1[1][1 + _dh_], self_1, model_cmp_id),
            data_id$2 = caml_call2(self_1[1][1 + _dh_], self_1, data_id$1),
            by$2 = caml_call2(self_1[1][1 + _dj_], self_1, by$1);
           return [9,
                   map$2,
                   io_key_id$0,
                   model_key_id$0,
                   model_cmp_id$0,
                   data_id$2,
                   by$2];
          case 10:
           var
            map$3 = x[1],
            map$4 = caml_call2(self_1[1][1 + _db_], self_1, map$3);
           return [10, map$4];
          case 11:
           var
            arms = x[2],
            match = caml_call2(self_1[1][1 + _db_], self_1, x[1]),
            _dt_ = caml_call1(self_1[1][1 + _dj_], self_1),
            arms$0 = caml_call3(self_1[1][1 + _df_], self_1, _dt_, arms);
           return [11, match, arms$0];
          case 12:
           var
            t$1 = x[1],
            _du_ = caml_call1(self_1[1][1 + _dj_], self_1),
            t$2 = caml_call3(self_1[1][1 + _dd_], self_1, _du_, t$1);
           return [12, t$2];
          case 13:
           var
            inner$1 = x[3],
            inject_id = x[2],
            model_id = x[1],
            model_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, model_id),
            inject_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, inject_id),
            inner$2 = caml_call2(self_1[1][1 + _dj_], self_1, inner$1);
           return [13, model_id$0, inject_id$0, inner$2];
          case 14:
           var
            inner$3 = x[2],
            reset_id = x[1],
            reset_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, reset_id),
            inner$4 = caml_call2(self_1[1][1 + _dj_], self_1, inner$3);
           return [14, reset_id$0, inner$4];
          case 15:
           var
            value$3 = x[1],
            value$4 = caml_call2(self_1[1][1 + _db_], self_1, value$3);
           return [15, value$4];
          default:
           var t$3 = x[1], t$4 = caml_call2(self_1[1][1 + _dj_], self_1, t$3);
           return [16, t$4];
        }
       }
       var
        _do_ =
          [0,
           _dj_,
           function(self_1, param){
            var
             here = param[3],
             kind = param[2],
             node_path = param[1],
             _dr_ = caml_call1(self_1[1][1 + _de_], self_1),
             node_path$0 =
               caml_call3(self_1[1][1 + _dg_], self_1, _dr_, node_path),
             kind$0 = caml_call2(self_1[1][1 + _di_], self_1, kind),
             _ds_ = caml_call1(self_1[1][1 + _dc_], self_1),
             here$0 = caml_call3(self_1[1][1 + _dd_], self_1, _ds_, here);
            return [0, node_path$0, kind$0, here$0];
           },
           _di_,
           _dn_,
           _db_,
           _dm_,
           _da_,
           _dl_];
       caml_call2(CamlinternalOO[11], _c__, _do_);
       return function(_dq_, _dp_){
        return caml_call2(CamlinternalOO[24], _dp_, _c__);};
      },
      _bD_,
      _bC_]);
   var fold = [], _bE_ = 0, _bF_ = 0;
   caml_update_dummy
    (fold,
     [0,
      0,
      function(_cK_){
       var
        _cL_ = caml_call2(CamlinternalOO[8], _cK_, _b_),
        _cM_ = _cL_[1],
        _cN_ = _cL_[2],
        _cO_ = _cL_[3],
        _cP_ = _cL_[4],
        _cQ_ = _cL_[5],
        _cR_ = _cL_[6],
        _cS_ = _cL_[7],
        _cT_ = _cL_[8],
        _cU_ = _cL_[9],
        _cV_ = _cL_[10],
        _cW_ = _cL_[11];
       function _cX_(self_2, x, acc){
        if(typeof x === "number")
         switch(x){
           case 0:
            return acc;
           case 1:
            return acc;
           case 2:
            return acc;
           default: return acc;
         }
        if(0 === x[0]){
         var
          added_by_let_syntax = x[2],
          t = x[1],
          acc$0 = caml_call3(self_2[1][1 + _cN_], self_2, t, acc),
          acc$1 =
            caml_call3
             (self_2[1][1 + _cW_], self_2, added_by_let_syntax, acc$0);
         return acc$1;
        }
        var inputs = x[1], _c9_ = caml_call1(self_2[1][1 + _cN_], self_2);
        return caml_call4(self_2[1][1 + _cR_], self_2, _c9_, inputs, acc);
       }
       function _cY_(self_2, param, acc){
        var
         id = param[4],
         here = param[3],
         kind = param[2],
         node_path = param[1],
         _c7_ = caml_call1(self_2[1][1 + _cQ_], self_2),
         acc$0 = caml_call4(self_2[1][1 + _cS_], self_2, _c7_, node_path, acc),
         acc$1 = caml_call3(self_2[1][1 + _cM_], self_2, kind, acc$0),
         _c8_ = caml_call1(self_2[1][1 + _cO_], self_2),
         acc$2 = caml_call4(self_2[1][1 + _cP_], self_2, _c8_, here, acc$1),
         acc$3 = caml_call3(self_2[1][1 + _cT_], self_2, id, acc$2);
        return acc$3;
       }
       function _cZ_(self_2, x, acc){
        if(typeof x === "number") return 0 === x ? acc : acc;
        switch(x[0]){
          case 0:
           var value = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, value, acc);
          case 1:
           var input = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input, acc);
          case 2:
           var input$0 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input$0, acc);
          case 3:
           var input$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input$1, acc);
          case 4:
           var t = x[1];
           return caml_call3(self_2[1][1 + _cV_], self_2, t, acc);
          case 5:
           var
            into = x[3],
            via = x[2],
            from = x[1],
            acc$0 = caml_call3(self_2[1][1 + _cV_], self_2, from, acc),
            acc$1 = caml_call3(self_2[1][1 + _cT_], self_2, via, acc$0),
            acc$2 = caml_call3(self_2[1][1 + _cV_], self_2, into, acc$1);
           return acc$2;
          case 6:
           var
            inner = x[3],
            value$0 = x[2],
            id = x[1],
            acc$3 = caml_call3(self_2[1][1 + _cT_], self_2, id, acc),
            acc$4 = caml_call3(self_2[1][1 + _cN_], self_2, value$0, acc$3),
            acc$5 = caml_call3(self_2[1][1 + _cV_], self_2, inner, acc$4);
           return acc$5;
          case 7:
           var id$0 = x[1];
           return caml_call3(self_2[1][1 + _cT_], self_2, id$0, acc);
          case 8:
           var
            by = x[5],
            data_id = x[4],
            cmp_id = x[3],
            key_id = x[2],
            map = x[1],
            acc$6 = caml_call3(self_2[1][1 + _cN_], self_2, map, acc),
            acc$7 = caml_call3(self_2[1][1 + _cT_], self_2, key_id, acc$6),
            acc$8 = caml_call3(self_2[1][1 + _cT_], self_2, cmp_id, acc$7),
            acc$9 = caml_call3(self_2[1][1 + _cT_], self_2, data_id, acc$8),
            acc$10 = caml_call3(self_2[1][1 + _cV_], self_2, by, acc$9);
           return acc$10;
          case 9:
           var
            by$0 = x[6],
            data_id$0 = x[5],
            model_cmp_id = x[4],
            model_key_id = x[3],
            io_key_id = x[2],
            map$0 = x[1],
            acc$11 = caml_call3(self_2[1][1 + _cN_], self_2, map$0, acc),
            acc$12 =
              caml_call3(self_2[1][1 + _cT_], self_2, io_key_id, acc$11),
            acc$13 =
              caml_call3(self_2[1][1 + _cT_], self_2, model_key_id, acc$12),
            acc$14 =
              caml_call3(self_2[1][1 + _cT_], self_2, model_cmp_id, acc$13),
            acc$15 =
              caml_call3(self_2[1][1 + _cT_], self_2, data_id$0, acc$14),
            acc$16 = caml_call3(self_2[1][1 + _cV_], self_2, by$0, acc$15);
           return acc$16;
          case 10:
           var map$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, map$1, acc);
          case 11:
           var
            arms = x[2],
            acc$17 = caml_call3(self_2[1][1 + _cN_], self_2, x[1], acc),
            _c5_ = caml_call1(self_2[1][1 + _cV_], self_2),
            acc$18 =
              caml_call4(self_2[1][1 + _cR_], self_2, _c5_, arms, acc$17);
           return acc$18;
          case 12:
           var t$0 = x[1], _c6_ = caml_call1(self_2[1][1 + _cV_], self_2);
           return caml_call4(self_2[1][1 + _cP_], self_2, _c6_, t$0, acc);
          case 13:
           var
            inner$0 = x[3],
            inject_id = x[2],
            model_id = x[1],
            acc$19 = caml_call3(self_2[1][1 + _cT_], self_2, model_id, acc),
            acc$20 =
              caml_call3(self_2[1][1 + _cT_], self_2, inject_id, acc$19),
            acc$21 = caml_call3(self_2[1][1 + _cV_], self_2, inner$0, acc$20);
           return acc$21;
          case 14:
           var
            inner$1 = x[2],
            reset_id = x[1],
            acc$22 = caml_call3(self_2[1][1 + _cT_], self_2, reset_id, acc),
            acc$23 = caml_call3(self_2[1][1 + _cV_], self_2, inner$1, acc$22);
           return acc$23;
          case 15:
           var value$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, value$1, acc);
          default:
           var t$1 = x[1];
           return caml_call3(self_2[1][1 + _cV_], self_2, t$1, acc);
        }
       }
       var
        _c0_ =
          [0,
           _cV_,
           function(self_2, param, acc){
            var
             here = param[3],
             kind = param[2],
             node_path = param[1],
             _c3_ = caml_call1(self_2[1][1 + _cQ_], self_2),
             acc$0 =
               caml_call4(self_2[1][1 + _cS_], self_2, _c3_, node_path, acc),
             acc$1 = caml_call3(self_2[1][1 + _cU_], self_2, kind, acc$0),
             _c4_ = caml_call1(self_2[1][1 + _cO_], self_2),
             acc$2 =
               caml_call4(self_2[1][1 + _cP_], self_2, _c4_, here, acc$1);
            return acc$2;
           },
           _cU_,
           _cZ_,
           _cN_,
           _cY_,
           _cM_,
           _cX_];
       caml_call2(CamlinternalOO[11], _cK_, _c0_);
       return function(_c2_, _c1_){
        return caml_call2(CamlinternalOO[24], _c1_, _cK_);};
      },
      _bF_,
      _bE_]);
   function _bG_(_ci_){
    var
     _cj_ = caml_call2(CamlinternalOO[8], _ci_, _b_),
     _ck_ = _cj_[3],
     _cl_ = _cj_[4],
     _cm_ = _cj_[5],
     _cn_ = _cj_[6],
     _co_ = _cj_[7],
     _cp_ = _cj_[8],
     _cq_ = _cj_[11],
     _cr_ = caml_call6(CamlinternalOO[18], _ci_, 0, _a_, shared, fold, 1)[1];
    function _cs_(self_3, param){return function(_cJ_){return _cJ_;};}
    function _ct_(self_3, param){return function(_cI_){return _cI_;};}
    function _cu_(self_3, param, _cG_){return function(_cH_){return _cH_;};}
    function _cv_(self_3, f, l, acc){
     var _cF_ = caml_call1(Core_Fn[6], f);
     return caml_call3(Core_List[20], l, acc, _cF_);
    }
    function _cw_(self_3, param){return function(_cE_){return _cE_;};}
    function _cx_(self_3, f, o, acc){
     var _cD_ = caml_call1(Core_Fn[6], f);
     return caml_call3(Core_Option[43], o, acc, _cD_);
    }
    var
     _cy_ =
       [0,
        _ck_,
        function(self_3, param){return function(_cC_){return _cC_;};},
        _cl_,
        _cx_,
        _cm_,
        _cw_,
        _cn_,
        _cv_,
        _co_,
        _cu_,
        _cp_,
        _ct_,
        _cq_,
        _cs_];
    caml_call2(CamlinternalOO[11], _ci_, _cy_);
    return function(_cA_, _cz_){
     var _cB_ = caml_call2(CamlinternalOO[24], _cz_, _ci_);
     caml_call1(_cr_, _cB_);
     return caml_call3(CamlinternalOO[26], _cz_, _cB_, _ci_);};
   }
   var fold$0 = caml_call2(CamlinternalOO[19], _c_, _bG_);
   function _bH_(_bW_){
    var
     _bX_ = caml_call2(CamlinternalOO[8], _bW_, _b_),
     _bY_ = _bX_[3],
     _bZ_ = _bX_[4],
     _b0_ = _bX_[5],
     _b1_ = _bX_[6],
     _b2_ = _bX_[7],
     _b3_ = _bX_[8],
     _b4_ = _bX_[11],
     _b5_ = caml_call6(CamlinternalOO[18], _bW_, 0, _a_, shared, map, 1)[1];
    function _b6_(self_5){return function(_ch_){return _ch_;};}
    function _b7_(self_5){return function(_cg_){return _cg_;};}
    function _b8_(self_5, f, x){return caml_call2(Core_Lazy[30], x, f);}
    function _b9_(self_5, f, x){return caml_call2(Core_List[51], x, f);}
    function _b__(self_5){return function(_cf_){return _cf_;};}
    function _b$_(self_5, f, x){return caml_call2(Core_Option[34], x, f);}
    var
     _ca_ =
       [0,
        _bY_,
        function(self_5){return function(_ce_){return _ce_;};},
        _bZ_,
        _b$_,
        _b0_,
        _b__,
        _b1_,
        _b9_,
        _b2_,
        _b8_,
        _b3_,
        _b7_,
        _b4_,
        _b6_];
    caml_call2(CamlinternalOO[11], _bW_, _ca_);
    return function(_cc_, _cb_){
     var _cd_ = caml_call2(CamlinternalOO[24], _cb_, _bW_);
     caml_call1(_b5_, _cd_);
     return caml_call3(CamlinternalOO[26], _cb_, _cd_, _bW_);};
   }
   var map$0 = caml_call2(CamlinternalOO[19], _c_, _bH_), _bI_ = [0, 0];
   function sanitize_for_testing(t){
    var
     table = caml_call3(Core_Hashtbl[4], 0, 0, [0, compare, sexp_of_t, hash]);
    function replace(id){
     function _bV_(param){return [1, caml_call1(Core_Hashtbl[28], table)];}
     return caml_call3(Core_Hashtbl[54], table, id, _bV_);
    }
    if(! _bI_[1]){
     var
      _bJ_ = caml_call1(CamlinternalOO[16], _c_),
      _bK_ = caml_call2(CamlinternalOO[3], _bJ_, cst),
      _bL_ = caml_call2(CamlinternalOO[8], _bJ_, _b_)[8],
      _bM_ = caml_call6(CamlinternalOO[18], _bJ_, 0, 0, _d_, map$0, 0),
      _bN_ = _bM_[1],
      _bO_ = _bM_[5],
      _bP_ =
        function(self_7, id){
         var env = self_7[1 + _bK_], _bU_ = caml_call1(env[1], id);
         return caml_call1(caml_call1(_bO_, self_7), _bU_);
        };
     caml_call3(CamlinternalOO[10], _bJ_, _bL_, _bP_);
     var
      _bQ_ =
        function(_bR_){
         var _bS_ = _bR_[1], _bT_ = caml_call2(CamlinternalOO[24], 0, _bJ_);
         caml_call2(_bN_, _bR_[2], _bT_);
         _bT_[1 + _bK_] = _bS_;
         return caml_call3(CamlinternalOO[26], 0, _bT_, _bJ_);
        };
     caml_call1(CamlinternalOO[17], _bJ_);
     _bI_[1] = _bQ_;
    }
    var
     replace_old_uids_with_sanitize =
       caml_call1(_bI_[1], [0, [0, replace], map$0[4]]);
    return caml_call2
            (runtime.caml_get_public_method
              (replace_old_uids_with_sanitize, 381242055, 1),
             replace_old_uids_with_sanitize,
             t);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Skeleton);
   var
    Bonsai_Skeleton =
      [0,
       [0, compare, hash_fold_t, hash, sexp_of_t],
       [0,
        sexp_of_t$0,
        sexp_of_kind,
        of_value$0,
        minimal_sexp_of_t,
        inputs,
        to_string_hum],
       [0,
        sexp_of_t$2,
        sexp_of_kind$0,
        of_computation,
        sanitize_for_testing,
        minimal_sexp_of_t$0,
        inputs$0,
        children],
       [0, fold$0, map$0]];
   runtime.caml_register_global(177, Bonsai_Skeleton, cst_Bonsai_Skeleton$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__To_dot
//# unitInfo: Requires: Base__Buffer, Bonsai__Pre_process, Bonsai__Skeleton, Core, Core__Char, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Bonsai_To_dot$0 = "Bonsai__To_dot",
    cst_Mrecord$1 = "Mrecord",
    cst_bonsai$0 = "bonsai",
    cst_const$1 = "const",
    cst_leaf$0 = "leaf",
    cst_oval$1 = "oval",
    cst_src_to_dot_ml = "src/to_dot.ml",
    cst_width_1_height_1 = "width=.1, height=.1",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = ";",
    cst$5 = "_",
    color = "#FFDD94",
    cst$4 = cst$7,
    cst$3 = cst$7,
    cst = '"',
    cst$2 = cst$7,
    cst$0 = "]",
    cst$1 = '"; ',
    Core_List = global_data.Core__List,
    Base_Buffer = global_data.Base__Buffer,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Core = global_data.Core,
    Core_Char = global_data.Core__Char,
    Core_String = global_data.Core__String,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_To_dot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_to_dot_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "to_dot.ml");
   var
    of_string = Core_String[136],
    to_string = Core_String[137],
    cst_const$0 = cst_const$1,
    cst_exception = "exception",
    cst_incr = "incr",
    cst_cutoff = "cutoff",
    cst_mapn = "mapn",
    cst_leaf0 = "leaf0",
    cst_path = "path",
    cst_read = "read",
    cst_leaf_incr = "leaf_incr",
    cst_model_cutoff = "model_cutoff",
    cst_dyn_set = "dyn_set",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_forced_lazy = "forced_lazy",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_life_cycle = "life_cycle",
    cst_identity = "identity",
    _g_ = [0, [11, "digraph {\n", [2, 0, [12, 125, 0]]], "digraph {\n%s}"],
    cst_leaf = cst_leaf$0,
    cst_const = cst_const$1,
    cst_named$0 = "named",
    cst_dir_none = " [dir=none];",
    _f_ =
      [0, [2, 0, [11, " -> ", [2, 0, [2, 0, [12, 10, 0]]]]], "%s -> %s%s\n"],
    _e_ = [0, cst_src_to_dot_ml, 79, 2],
    cst_D0E6A5 = "#D0E6A5",
    cst_state_machine = "{state machine}",
    cst_Mrecord = cst_Mrecord$1,
    _b_ = [0, cst_leaf$0],
    cst_86E3CE = "#86E3CE",
    cst_Mrecord$0 = cst_Mrecord$1,
    cst_oval = cst_oval$1,
    cst_FFFFFF = "#FFFFFF",
    cst_subst = "subst",
    cst_oval$0 = cst_oval$1,
    _d_ = [0, cst_width_1_height_1],
    cst_000000 = "#000000",
    cst_circle = "circle",
    _c_ = [0, cst_width_1_height_1],
    cst_tooltip = ', tooltip = "',
    cst_fillcolor = '"; fillcolor = "',
    cst_label = '", label = "',
    cst_shape = ', shape = "',
    cst_style_filled = "[ style=filled",
    cst_named = "named_",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_To_dot = cst_Bonsai_To_dot$0,
    _a_ = Core_String[73];
   function basic_shape(opt, tooltip, shape, label, color, param){
    if(opt) var sth = opt[1], other = sth; else var other = cst$3;
    if(tooltip)
     var
      tooltip$0 = tooltip[1],
      _A_ = [0, tooltip$0, [0, caml_call1(Ppx_string_runtime[1][2], cst), 0]],
      _B_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_tooltip), _A_],
      tooltip$1 = caml_call1(Ppx_string_runtime[1][4], _B_);
    else
     var tooltip$1 = cst$2;
    var
     _C_ = [0, other, [0, caml_call1(Ppx_string_runtime[1][2], cst$0), 0]],
     _D_ = [0, color, [0, caml_call1(Ppx_string_runtime[1][2], cst$1), _C_]],
     _E_ =
       [0,
        label,
        [0, caml_call1(Ppx_string_runtime[1][2], cst_fillcolor), _D_]],
     _F_ =
       [0, shape, [0, caml_call1(Ppx_string_runtime[1][2], cst_label), _E_]],
     _G_ =
       [0,
        tooltip$1,
        [0, caml_call1(Ppx_string_runtime[1][2], cst_shape), _F_]],
     _H_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_style_filled), _G_];
    return caml_call1(Ppx_string_runtime[1][4], _H_);
   }
   function register(state, kind$1, name){
    function _u_(c){
     var _z_ = caml_call1(Core_Char[22], c);
     return _z_ ? _z_ : caml_call2(Core_Char[54], c, 95);
    }
    if(! caml_call2(Core_String[20], name, _u_))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    var
     _v_ = caml_call1(Core_Int[79], state[1]),
     _w_ = [0, caml_call1(Ppx_string_runtime[1][3], _v_), 0],
     _x_ = [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst$5), _w_]],
     s = caml_call1(Ppx_string_runtime[1][4], _x_);
    caml_call2(Base_Buffer[16], state[3], s);
    caml_call2(Base_Buffer[15], state[3], 32);
    if(typeof kind$1 === "number")
     var
      _y_ =
        0 === kind$1
         ? basic_shape(0, _b_, cst_Mrecord, cst_state_machine, cst_D0E6A5, 0)
         : basic_shape(_c_, 0, cst_circle, cst$4, cst_000000, 0);
    else
     switch(kind$1[0]){
       case 0:
        var
         kind = kind$1[1],
         _y_ = basic_shape(0, 0, cst_Mrecord$0, kind, cst_86E3CE, 0);
        break;
       case 1:
        var
         here = kind$1[2],
         kind$0 = kind$1[1],
         tooltip =
           caml_call2(Core_Option[34], here, Core_Source_code_position[4]),
         _y_ = basic_shape(0, tooltip, cst_oval, kind$0, color, 0);
        break;
       default:
        var
         here$0 = kind$1[1],
         tooltip$0 =
           caml_call2(Core_Option[34], here$0, Core_Source_code_position[4]),
         _y_ =
           basic_shape(_d_, tooltip$0, cst_oval$0, cst_subst, cst_FFFFFF, 0);
     }
    caml_call2(Base_Buffer[16], state[3], _y_);
    caml_call2(Base_Buffer[15], state[3], 10);
    state[1] = state[1] + 1 | 0;
    return caml_call1(of_string, s);
   }
   function arrow(state, from, to){
    var
     arrow_string = caml_call2(_a_, to, cst_named) ? cst_dir_none : cst$6,
     _s_ = caml_call1(to_string, to),
     _t_ = caml_call1(to_string, from);
    return caml_call5(Core[241], state[3], _f_, _t_, _s_, arrow_string);
   }
   function arrow_from_many(state, to, l){
    function _r_(from){return arrow(state, from, to);}
    caml_call2(Core_List[19], l, _r_);
    return to;
   }
   function register_named(state, shape, name){
    function _q_(param){return register(state, shape, cst_named$0);}
    return caml_call3(Core_Hashtbl[54], state[2], name, _q_);
   }
   function follow_skeleton_value(state, param){
    var id = param[4], here = param[3], value = param[2];
    function register$0(s){return register(state, [1, s, here], s);}
    var shape = [1, cst_const$0, here];
    if(typeof value === "number")
     switch(value){
       case 0:
        var _n_ = function(param){return register(state, shape, cst_const);};
        return caml_call3(Core_Hashtbl[54], state[2], id, _n_);
       case 1:
        return register$0(cst_exception);
       case 2:
        return register$0(cst_incr);
       default: return register_named(state, [2, here], id);
     }
    if(0 === value[0]){
     var
      t = value[1],
      me = register$0(cst_cutoff),
      them = follow_skeleton_value(state, t);
     arrow(state, them, me);
     return me;
    }
    var inputs = value[1];
    function _o_(value){return follow_skeleton_value(state, value);}
    var _p_ = caml_call2(Core_List[51], inputs, _o_);
    return arrow_from_many(state, register$0(cst_mapn), _p_);
   }
   function follow_dynamic_skeleton_leaf(state, input){
    var me = register(state, 0, cst_leaf), match = input[2];
    if(typeof match === "number"){if(0 === match) return me;}
    else if(1 === match[0]){
     var
      inputs = match[1],
      _m_ = function(value){return follow_skeleton_value(state, value);};
     return arrow_from_many(state, me, caml_call2(Core_List[51], inputs, _m_));
    }
    arrow(state, follow_skeleton_value(state, input), me);
    return me;
   }
   function follow_skeleton_computation(state, computation){
    var computation$0 = computation;
    for(;;){
     var
      register_computation =
        function(kind){return register(state, [0, kind], kind);},
      match = computation$0[2];
     if(typeof match === "number")
      return 0 === match
              ? register(state, 0, cst_leaf0)
              : register_computation(cst_path);
     switch(match[0]){
       case 0:
        var value = match[1], me = register_computation(cst_read);
        arrow(state, follow_skeleton_value(state, value), me);
        return me;
       case 1:
        var input = match[1];
        return follow_dynamic_skeleton_leaf(state, input);
       case 2:
        var input$0 = match[1];
        return follow_dynamic_skeleton_leaf(state, input$0);
       case 3:
        return register_computation(cst_leaf_incr);
       case 4:
        var t = match[1], me$0 = register_computation(cst_model_cutoff);
        arrow(state, follow_skeleton_computation(state, t), me$0);
        return me$0;
       case 5:
        var
         computation$1 = match[3],
         via = match[2],
         from = match[1],
         _k_ = register_named(state, [2, computation$0[3]], via);
        arrow(state, follow_skeleton_computation(state, from), _k_);
        var computation$0 = computation$1;
        break;
       case 6:
        var
         computation$2 = match[3],
         value$0 = match[2],
         id = match[1],
         me$1 = register_computation(cst_dyn_set);
        arrow(state, follow_skeleton_value(state, value$0), me$1);
        arrow(state, me$1, register_named(state, 2, id));
        var computation$0 = computation$2;
        break;
       case 7:
        var id$0 = match[1], me$2 = register_computation(cst_fetch);
        arrow(state, register_named(state, 2, id$0), me$2);
        return me$2;
       case 8:
        var
         by = match[5],
         map = match[1],
         me$3 = register_computation(cst_assoc);
        arrow(state, follow_skeleton_computation(state, by), me$3);
        arrow(state, follow_skeleton_value(state, map), me$3);
        return me$3;
       case 9:
        var
         by$0 = match[6],
         map$0 = match[1],
         me$4 = register_computation(cst_assoc_on);
        arrow(state, follow_skeleton_computation(state, by$0), me$4);
        arrow(state, follow_skeleton_value(state, map$0), me$4);
        return me$4;
       case 10:
        var map$1 = match[1], me$5 = register_computation(cst_assoc_simpl);
        arrow(state, follow_skeleton_value(state, map$1), me$5);
        return me$5;
       case 11:
        var
         arms = match[2],
         match$0 = match[1],
         me$6 = register_computation(cst_switch);
        arrow(state, follow_skeleton_value(state, match$0), me$6);
        var
         _l_ =
           function(t){
            return arrow(state, follow_skeleton_computation(state, t), me$6);
           };
        caml_call2(Core_List[19], arms, _l_);
        return me$6;
       case 12:
        var match$1 = match[1];
        if(! match$1) return register_computation(cst_lazy);
        var t$0 = match$1[1], me$7 = register_computation(cst_forced_lazy);
        arrow(state, follow_skeleton_computation(state, t$0), me$7);
        return me$7;
       case 13:
        var inner = match[3], me$8 = register_computation(cst_wrap);
        arrow(state, follow_skeleton_computation(state, inner), me$8);
        return me$8;
       case 14:
        var
         inner$0 = match[2],
         reset_id = match[1],
         me$9 = register_computation(cst_with_model_resetter);
        arrow(state, me$9, register_named(state, 1, reset_id));
        arrow(state, follow_skeleton_computation(state, inner$0), me$9);
        return me$9;
       case 15:
        var value$1 = match[1], me$10 = register_computation(cst_life_cycle);
        arrow(state, follow_skeleton_value(state, value$1), me$10);
        return me$10;
       default:
        var t$1 = match[1], me$11 = register_computation(cst_identity);
        arrow(state, follow_skeleton_computation(state, t$1), me$11);
        return me$11;
     }
    }
   }
   function to_dot(opt, t){
    if(opt) var sth = opt[1], pre_process = sth; else var pre_process = 1;
    var
     _h_ = caml_call1(Base_Buffer[2], 2014),
     _i_ = Bonsai_Skeleton[1],
     state =
       [0,
        0,
        caml_call3(Core_Hashtbl[4], 0, 0, [0, _i_[1], _i_[4], _i_[3]]),
        _h_],
     computation = pre_process ? caml_call1(Bonsai_Pre_process[1], t) : t,
     skeleton_computation = caml_call1(Bonsai_Skeleton[3][3], computation);
    follow_skeleton_computation(state, skeleton_computation);
    var _j_ = caml_call1(Base_Buffer[3], state[3]);
    return caml_call2(Core[265], _g_, _j_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_To_dot);
   var Bonsai_To_dot = [0, to_dot];
   runtime.caml_register_global(82, Bonsai_To_dot, cst_Bonsai_To_dot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Graph_info
//# unitInfo: Requires: Base__Option, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core, Core__Hashtbl, Core__Int, Core__Map, Core__Option, Core__Source_code_position, Core__Stable, Core__String, Core__Type_equal, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_122924cb491f2c00727ae98b5c = " 122924cb491f2c00727ae98b5c47f343 ",
    cst_127c33aa3895110d2fdd1b3c35 = " 127c33aa3895110d2fdd1b3c356bf5c3 ",
    cst_Bonsai_Graph_info$0 = "Bonsai__Graph_info",
    cst_bonsai$0 = "bonsai",
    cst_dag$7 = "dag",
    cst_here$5 = "here",
    cst_id$1 = "id",
    cst_info$7 = "info",
    cst_node_type$5 = "node_type",
    cst_pos_bol$1 = "pos_bol",
    cst_pos_cnum$1 = "pos_cnum",
    cst_pos_fname$1 = "pos_fname",
    cst_pos_lnum$1 = "pos_lnum",
    cst_src_graph_info_ml$5 = "src/graph_info.ml",
    cst_src_graph_info_ml_Node_inf$0 = "src/graph_info.ml.Node_info.t",
    cst_src_graph_info_ml_Stable_N$2 =
      "src/graph_info.ml.Stable.Node_info.V1.t",
    cst_src_graph_info_ml_Stable_N$1 =
      "src/graph_info.ml.Stable.Node_info.V2.t",
    cst_src_graph_info_ml_Stable_V$4 = "src/graph_info.ml.Stable.V1.t",
    cst_src_graph_info_ml_Stable_V$3 = "src/graph_info.ml.Stable.V2.t",
    cst_src_graph_info_ml_Stable_V$2 = "src/graph_info.ml.Stable.V3.t",
    cst_src_graph_info_ml_t$0 = "src/graph_info.ml.t",
    cst_t$17 = "t",
    cst_tree$7 = "tree",
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "~",
    error_source_002 = cst_src_graph_info_ml_Stable_N$2,
    error_source_014 = cst_src_graph_info_ml_Stable_N$1,
    error_source_031 = cst_src_graph_info_ml_Stable_V$4,
    error_source_051 = cst_src_graph_info_ml_Stable_V$3,
    error_source_071 = cst_src_graph_info_ml_Stable_V$2,
    error_source_081 = "src/graph_info.ml.Source_code_position.t",
    error_source_093 = cst_src_graph_info_ml_Node_inf$0,
    error_source_101 = cst_src_graph_info_ml_t$0,
    Core = global_data.Core,
    Base_Option = global_data.Base__Option,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Stable = global_data.Core__Stable,
    Core_String = global_data.Core__String,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Graph_info$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_graph_info_ml$5);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "graph_info.ml");
   var
    cst_src_graph_info_ml_217_41 = "src/graph_info.ml:217:41",
    cst_BUG = "BUG",
    _av_ = [0, cst_info$7],
    _aw_ = [0, cst_dag$7],
    _ax_ = [0, cst_tree$7],
    cst_info$6 = cst_info$7,
    cst_dag$6 = cst_dag$7,
    cst_tree$6 = cst_tree$7,
    cst_src_graph_info_ml_t = cst_src_graph_info_ml_t$0,
    cst_path = "path",
    cst_return = "return",
    cst_leaf1 = "leaf1",
    cst_leaf0 = "leaf0",
    cst_leaf_incr = "leaf_incr",
    cst_sub = "sub",
    cst_store = "store",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_lifecycle = "lifecycle",
    cst_constant = "constant",
    cst_incr = "incr",
    cst_named = "named",
    cst_both = "both",
    cst_cutoff = "cutoff",
    cst_map = "map",
    cst_map2 = "map2",
    cst_map3 = "map3",
    cst_map4 = "map4",
    cst_map5 = "map5",
    cst_map6 = "map6",
    cst_map7 = "map7",
    cst_exception = "exception",
    cst_src_graph_info_ml_Node_inf = cst_src_graph_info_ml_Node_inf$0,
    _ag_ = [0, cst_here$5],
    _ah_ = [0, cst_node_type$5],
    cst_here$3 = cst_here$5,
    cst_node_type$3 = cst_node_type$5,
    ___ = [0, cst_pos_cnum$1],
    _$_ = [0, cst_pos_bol$1],
    _aa_ = [0, cst_pos_lnum$1],
    _ab_ = [0, cst_pos_fname$1],
    cst_pos_cnum = cst_pos_cnum$1,
    cst_pos_bol = cst_pos_bol$1,
    cst_pos_lnum = cst_pos_lnum$1,
    cst_pos_fname = cst_pos_fname$1,
    _X_ = [0, cst_info$7],
    _Y_ = [0, cst_dag$7],
    _Z_ = [0, cst_tree$7],
    cst_info$4 = cst_info$7,
    cst_dag$4 = cst_dag$7,
    cst_tree$4 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V$1 = cst_src_graph_info_ml_Stable_V$2,
    _M_ = [0, cst_info$7],
    _N_ = [0, cst_dag$7],
    _O_ = [0, cst_tree$7],
    cst_info$2 = cst_info$7,
    cst_dag$2 = cst_dag$7,
    cst_tree$2 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V$0 = cst_src_graph_info_ml_Stable_V$3,
    _B_ = [0, cst_info$7],
    _C_ = [0, cst_dag$7],
    _D_ = [0, cst_tree$7],
    cst_info$0 = cst_info$7,
    cst_dag$0 = cst_dag$7,
    cst_tree$0 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V = cst_src_graph_info_ml_Stable_V$4,
    cst_src_graph_info_ml_Stable_N$0 = cst_src_graph_info_ml_Stable_N$1,
    _h_ = [0, cst_id$1],
    _i_ = [0, cst_here$5],
    _j_ = [0, cst_node_type$5],
    cst_id = cst_id$1,
    cst_here$1 = cst_here$5,
    cst_node_type$1 = cst_node_type$5,
    cst_src_graph_info_ml_Stable_N = cst_src_graph_info_ml_Stable_N$2,
    _a_ = [0, cst_here$5],
    _b_ = [0, cst_node_type$5],
    cst_here = cst_here$5,
    cst_node_type = cst_node_type$5,
    cst_here$0 = cst_here$5,
    cst_node_type$0 = cst_node_type$5,
    cst_t = cst_t$17,
    cst_src_graph_info_ml_6_6 = "src/graph_info.ml:6:6",
    cst_t$0 = cst_t$17,
    _bl_ =
      [0,
       [0,
        [0, cst_127c33aa3895110d2fdd1b3c35, [0, cst$0]],
        [0, 331, 348, 386]]],
    _bm_ = [0, 331, 339, 387],
    _br_ = [0, 265, 271, 387],
    _bs_ = [0, 331, 387, 387],
    _bt_ = [0, 265, 271, 387],
    cst_src_graph_info_ml$4 = cst_src_graph_info_ml$5,
    cst_id$0 = cst_id$1,
    cst_here$2 = cst_here$5,
    cst_node_type$2 = cst_node_type$5,
    cst_t$1 = cst_t$17,
    cst_src_graph_info_ml_19_6 = "src/graph_info.ml:19:6",
    cst_t$2 = cst_t$17,
    _bb_ =
      [0,
       [0,
        [0, " da0e8001d1f5692d5a56c26e18c81a01 ", [0, cst$0]],
        [0, 731, 748, 786]]],
    _bc_ = [0, 731, 739, 787],
    _bh_ = [0, 665, 671, 787],
    _bi_ = [0, 731, 787, 787],
    _bj_ = [0, 665, 671, 787],
    cst_src_graph_info_ml$3 = cst_src_graph_info_ml$5,
    cst_t$3 = cst_t$17,
    cst_src_graph_info_ml_36_6 = "src/graph_info.ml:36:6",
    cst_t$4 = cst_t$17,
    _a3_ =
      [0,
       [0,
        [0, cst_127c33aa3895110d2fdd1b3c35, [0, cst$0]],
        [0, 1021, 1038, 1076]]],
    _a4_ = [0, 1021, 1029, 1077],
    _a9_ = [0, 955, 961, 1077],
    _a__ = [0, 1021, 1077, 1077],
    _a$_ = [0, 955, 961, 1077],
    cst_src_graph_info_ml$2 = cst_src_graph_info_ml$5,
    cst_info = cst_info$7,
    cst_dag = cst_dag$7,
    cst_tree = cst_tree$7,
    cst_t$5 = cst_t$17,
    cst_src_graph_info_ml_49_4 = "src/graph_info.ml:49:4",
    cst_t$6 = cst_t$17,
    _aT_ =
      [0,
       [0,
        [0, cst_122924cb491f2c00727ae98b5c, [0, cst$0]],
        [0, 1478, 1493, 1531]]],
    _aU_ = [0, 1478, 1484, 1532],
    _aZ_ = [0, 1416, 1420, 1532],
    _a0_ = [0, 1478, 1532, 1532],
    _a1_ = [0, 1416, 1420, 1532],
    cst_src_graph_info_ml$1 = cst_src_graph_info_ml$5,
    cst_info$1 = cst_info$7,
    cst_dag$1 = cst_dag$7,
    cst_tree$1 = cst_tree$7,
    cst_t$7 = cst_t$17,
    cst_src_graph_info_ml_63_4 = "src/graph_info.ml:63:4",
    cst_t$8 = cst_t$17,
    _aJ_ =
      [0,
       [0,
        [0, " ca80280d86a032bbd663626d8558fe6f ", [0, cst$0]],
        [0, 1923, 1938, 1976]]],
    _aK_ = [0, 1923, 1929, 1977],
    _aP_ = [0, 1861, 1865, 1977],
    _aQ_ = [0, 1923, 1977, 1977],
    _aR_ = [0, 1861, 1865, 1977],
    cst_src_graph_info_ml$0 = cst_src_graph_info_ml$5,
    cst_info$3 = cst_info$7,
    cst_dag$3 = cst_dag$7,
    cst_tree$3 = cst_tree$7,
    cst_t$9 = cst_t$17,
    cst_src_graph_info_ml_87_4 = "src/graph_info.ml:87:4",
    cst_t$10 = cst_t$17,
    _az_ =
      [0,
       [0,
        [0, cst_122924cb491f2c00727ae98b5c, [0, cst$0]],
        [0, 2588, 2603, 2641]]],
    _aA_ = [0, 2588, 2594, 2642],
    _aF_ = [0, 2526, 2530, 2642],
    _aG_ = [0, 2588, 2642, 2642],
    _aH_ = [0, 2526, 2530, 2642],
    cst_src_graph_info_ml = cst_src_graph_info_ml$5,
    cst_pos_cnum$0 = cst_pos_cnum$1,
    cst_pos_bol$0 = cst_pos_bol$1,
    cst_pos_lnum$0 = cst_pos_lnum$1,
    cst_pos_fname$0 = cst_pos_fname$1,
    cst_t$11 = cst_t$17,
    cst_src_graph_info_ml_117_2 = "src/graph_info.ml:117:2",
    cst_t$12 = cst_t$17,
    cst_here$4 = cst_here$5,
    cst_node_type$4 = cst_node_type$5,
    cst_t$13 = cst_t$17,
    cst_src_graph_info_ml_127_2 = "src/graph_info.ml:127:2",
    cst_t$14 = cst_t$17,
    cst_info$5 = cst_info$7,
    cst_dag$5 = cst_dag$7,
    cst_tree$5 = cst_tree$7,
    cst_t$15 = cst_t$17,
    cst_src_graph_info_ml_183_0 = "src/graph_info.ml:183:0",
    cst_t$16 = cst_t$17,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Graph_info = cst_Bonsai_Graph_info$0;
   function t_of_sexp(x_003){
    function _dw_(param){
     var here = param[2][1], node_type = param[1];
     return [0, node_type, here];
    }
    var _dx_ = 0;
    function _dy_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
             : 1;
    }
    var
     _dz_ =
       [0,
        cst_here,
        1,
        caml_call1
         (Core_Option[68][1][14], Core_Source_code_position[38][1][12]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0, cst_node_type, 1, Core_String[180][1][20], _dz_],
             _dy_,
             _dx_,
             _dw_,
             x_003);
   }
   function sexp_of_t(param){
    var
     here_007 = param[2],
     node_type_005 = param[1],
     arg_008 =
       caml_call2
        (Core_Option[68][1][15],
         Core_Source_code_position[38][1][13],
         here_007),
     bnds_004 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call1(Core_String[180][1][21], node_type_005),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004];
    return [1, bnds_004$0];
   }
   var
    _c_ =
      [0,
       [0,
        cst_here$0,
        caml_call1(Core_Option[68][1][1], Core_Source_code_position[38][1][7])],
       0],
    _d_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$0, Core_String[180][1][15]], _c_]),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_6_6),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0);
   function bin_size_t(param){
    var
     v2 = param[2],
     v1 = param[1],
     _du_ = caml_call1(Core_String[180][1][11], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _du_),
     _dv_ =
       caml_call2
        (Core_Option[68][1][2], Core_Source_code_position[38][1][3], v2);
    return caml_call2(Bin_prot_Common[23], size, _dv_);
   }
   function bin_write_t(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[180][1][12], buf, pos, v1);
    return caml_call4
            (Core_Option[68][1][3],
             Core_Source_code_position[38][1][4],
             buf,
             pos$0,
             v2);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_N, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[180][1][13], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[68][1][4], Core_Source_code_position[38][1][5]),
         buf,
         pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function compare(a_009, b_010){
    if(a_009 === b_010) return 0;
    var n = caml_call2(Core_String[180][1][19], a_009[1], b_010[1]);
    if(0 !== n) return n;
    var _dr_ = b_010[2], _ds_ = a_009[2];
    function _dt_(a_011, b_012){
     return caml_call2(Core_Source_code_position[38][1][11], a_011, b_012);
    }
    return caml_call3(Core_Option[68][1][11], _dt_, _ds_, _dr_);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$4 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bk_ =
       function(param){
        var
         _do_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _dp_ = caml_call1(Bin_shape[19][4], _do_);
        caml_call1(Stdlib[46], _dp_);
        var _dq_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$4[2], _dq_);
       },
     _bn_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bm_,
         _bl_),
     _bo_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _bn_], 0],
     _bp_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _bq_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$4[3],
      cst_src_graph_info_ml$4,
      12,
      _bt_,
      _bs_,
      _br_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bq_,
      _bp_,
      0,
      0,
      Inline_test_config,
      _bo_,
      _bk_);
   }
   function t_of_sexp$0(x_015){
    function _di_(param){
     var
      _dn_ = param[2],
      id = _dn_[2][1],
      here = _dn_[1],
      node_type = param[1];
     return [0, node_type, here, id];
    }
    var _dj_ = 0;
    function _dk_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal
                (param, cst_id$1)
               ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
               : 2
             : 1;
    }
    var
     _dl_ = [0, cst_id, 1, Core_Int[120][1][15], 0],
     _dm_ =
       [0,
        cst_here$1,
        1,
        caml_call1
         (Core_Option[68][1][14], Core_Source_code_position[38][1][12]),
        _dl_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_014,
             [0, cst_node_type$1, 1, Core_String[180][1][20], _dm_],
             _dk_,
             _dj_,
             _di_,
             x_015);
   }
   function sexp_of_t$0(param){
    var
     id_021 = param[3],
     here_019 = param[2],
     node_type_017 = param[1],
     arg_022 = caml_call1(Core_Int[120][1][16], id_021),
     bnds_016 = [0, [1, [0, _h_, [0, arg_022, 0]]], 0],
     arg_020 =
       caml_call2
        (Core_Option[68][1][15],
         Core_Source_code_position[38][1][13],
         here_019),
     bnds_016$0 = [0, [1, [0, _i_, [0, arg_020, 0]]], bnds_016],
     arg_018 = caml_call1(Core_String[180][1][21], node_type_017),
     bnds_016$1 = [0, [1, [0, _j_, [0, arg_018, 0]]], bnds_016$0];
    return [1, bnds_016$1];
   }
   function compare$0(a_023, b_024){
    if(a_023 === b_024) return 0;
    var n = caml_call2(Core_String[180][1][19], a_023[1], b_024[1]);
    if(0 !== n) return n;
    var _df_ = b_024[2], _dg_ = a_023[2];
    function _dh_(a_025, b_026){
     return caml_call2(Core_Source_code_position[38][1][11], a_025, b_026);
    }
    var n$0 = caml_call3(Core_Option[68][1][11], _dh_, _dg_, _df_);
    return 0 === n$0
            ? caml_call2(Core_Int[120][1][14], a_023[3], b_024[3])
            : n$0;
   }
   var
    _k_ = [0, [0, cst_id$0, Core_Int[120][1][10]], 0],
    _l_ =
      [0,
       [0,
        cst_here$2,
        caml_call1(Core_Option[68][1][1], Core_Source_code_position[38][1][7])],
       _k_],
    _m_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$2, Core_String[180][1][15]], _l_]),
    _n_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _m_], 0],
    _o_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_19_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _o_, _n_),
    _p_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _p_), 0);
   function bin_size_t$0(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _dc_ = caml_call1(Core_String[180][1][11], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dc_),
     _dd_ =
       caml_call2
        (Core_Option[68][1][2], Core_Source_code_position[38][1][3], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _dd_),
     _de_ = caml_call1(Core_Int[120][1][6], v3);
    return caml_call2(Bin_prot_Common[23], size$0, _de_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[180][1][12], buf, pos, v1),
     pos$1 =
       caml_call4
        (Core_Option[68][1][3],
         Core_Source_code_position[38][1][4],
         buf,
         pos$0,
         v2);
    return caml_call3(Core_Int[120][1][7], buf, pos$1, v3);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_N$0,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[180][1][13], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[68][1][4], Core_Source_code_position[38][1][5]),
         buf,
         pos_ref),
     v_id = caml_call2(Core_Int[120][1][8], buf, pos_ref);
    return [0, v_node_type, v_here, v_id];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$3 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ba_ =
       function(param){
        var
         _c$_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _da_ = caml_call1(Bin_shape[19][4], _c$_);
        caml_call1(Stdlib[46], _da_);
        var _db_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$3[2], _db_);
       },
     _bd_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bc_,
         _bb_),
     _be_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _bd_], 0],
     _bf_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _bg_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$3[3],
      cst_src_graph_info_ml$3,
      26,
      _bj_,
      _bi_,
      _bh_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bg_,
      _bf_,
      0,
      0,
      Inline_test_config,
      _be_,
      _ba_);
   }
   function to_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here];
   }
   function of_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here, -1];
   }
   var
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, bin_shape_t], 0],
    _r_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_36_6),
    group$1 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _s_), 0);
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$2 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a2_ =
       function(param){
        var
         _c8_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$1),
         _c9_ = caml_call1(Bin_shape[19][4], _c8_);
        caml_call1(Stdlib[46], _c9_);
        var _c__ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block$2[2], _c__);
       },
     _a5_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _a4_,
         _a3_),
     _a6_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _a5_], 0],
     _a7_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _a8_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block$2[3],
      cst_src_graph_info_ml$2,
      38,
      _a$_,
      _a__,
      _a9_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _a8_,
      _a7_,
      0,
      0,
      Inline_test_config,
      _a6_,
      _a2_);
   }
   var
    _t_ =
      [0,
       [0, cst_info, caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t)],
       0],
    _u_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _v_ =
      [0, [0, cst_dag, caml_call1(Bonsai_Node_path[39][1][13][1], _u_)], _t_],
    _w_ =
      [0,
       [0,
        cst_tree,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _v_],
    _x_ = caml_call1(Bin_prot_Shape[4], _w_),
    _y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _x_], 0],
    _z_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_49_4),
    group$2 = caml_call2(Bin_prot_Shape[2], _z_, _y_),
    _A_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _A_), 0);
   function bin_size_t$1(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _c4_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _c4_),
     _c5_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _c6_ = caml_call2(Bonsai_Node_path[39][1][13][2], _c5_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _c6_),
     _c7_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _c7_);
   }
   function bin_write_t$1(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _c3_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _c3_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_V, pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _c2_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _c2_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$2, bin_writer_t$1, bin_reader_t$1];
   function t_of_sexp$1(x_032){
    function _cU_(param){
     var _c1_ = param[2], info = _c1_[2][1], dag = _c1_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cV_ = 0;
    function _cW_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cX_ =
       [0,
        cst_info$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _cY_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cZ_ =
       [0,
        cst_dag$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _cY_),
        _cX_],
     _c0_ =
       [0,
        cst_tree$0,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cZ_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_031,
             _c0_,
             _cW_,
             _cV_,
             _cU_,
             x_032);
   }
   function sexp_of_t$1(param){
    var
     info_038 = param[3],
     dag_036 = param[2],
     tree_034 = param[1],
     arg_039 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_038),
     bnds_033 = [0, [1, [0, _B_, [0, arg_039, 0]]], 0],
     _cT_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_037 = caml_call2(Bonsai_Node_path[39][1][13][11], _cT_, dag_036),
     bnds_033$0 = [0, [1, [0, _C_, [0, arg_037, 0]]], bnds_033],
     arg_035 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_034),
     bnds_033$1 = [0, [1, [0, _D_, [0, arg_035, 0]]], bnds_033$0];
    return [1, bnds_033$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aS_ =
       function(param){
        var
         _cQ_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$2),
         _cR_ = caml_call1(Bin_shape[19][4], _cQ_);
        caml_call1(Stdlib[46], _cR_);
        var _cS_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        return caml_call1(Ppx_expect_test_block$1[2], _cS_);
       },
     _aV_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aU_,
         _aT_),
     _aW_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _aV_], 0],
     _aX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
     _aY_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_graph_info_ml$1,
      56,
      _a1_,
      _a0_,
      _aZ_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aY_,
      _aX_,
      0,
      0,
      Inline_test_config,
      _aW_,
      _aS_);
   }
   var
    _E_ =
      [0,
       [0,
        cst_info$1,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$0)],
       0],
    _F_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _G_ =
      [0,
       [0, cst_dag$1, caml_call1(Bonsai_Node_path[39][1][13][1], _F_)],
       _E_],
    _H_ =
      [0,
       [0,
        cst_tree$1,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _G_],
    _I_ = caml_call1(Bin_prot_Shape[4], _H_),
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _I_], 0],
    _K_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_63_4),
    group$3 = caml_call2(Bin_prot_Shape[2], _K_, _J_),
    _L_ = caml_call1(Bin_shape[2][1], cst_t$8),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _L_), 0);
   function bin_size_t$2(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cM_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cM_),
     _cN_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _cO_ = caml_call2(Bonsai_Node_path[39][1][13][2], _cN_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cO_),
     _cP_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t$0, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cP_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _cL_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _cL_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t$0, buf, pos$1, v3);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$0,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _cK_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _cK_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$2),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$3, bin_writer_t$2, bin_reader_t$2];
   function t_of_sexp$2(x_052){
    function _cC_(param){
     var _cJ_ = param[2], info = _cJ_[2][1], dag = _cJ_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cD_ = 0;
    function _cE_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cF_ =
       [0,
        cst_info$2,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp$0),
        0],
     _cG_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cH_ =
       [0,
        cst_dag$2,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _cG_),
        _cF_],
     _cI_ =
       [0,
        cst_tree$2,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cH_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_051,
             _cI_,
             _cE_,
             _cD_,
             _cC_,
             x_052);
   }
   function sexp_of_t$2(param){
    var
     info_058 = param[3],
     dag_056 = param[2],
     tree_054 = param[1],
     arg_059 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t$0, info_058),
     bnds_053 = [0, [1, [0, _M_, [0, arg_059, 0]]], 0],
     _cB_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_057 = caml_call2(Bonsai_Node_path[39][1][13][11], _cB_, dag_056),
     bnds_053$0 = [0, [1, [0, _N_, [0, arg_057, 0]]], bnds_053],
     arg_055 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_054),
     bnds_053$1 = [0, [1, [0, _O_, [0, arg_055, 0]]], bnds_053$0];
    return [1, bnds_053$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aI_ =
       function(param){
        var
         _cy_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$3),
         _cz_ = caml_call1(Bin_shape[19][4], _cy_);
        caml_call1(Stdlib[46], _cz_);
        var _cA_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
        return caml_call1(Ppx_expect_test_block$0[2], _cA_);
       },
     _aL_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aK_,
         _aJ_),
     _aM_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _aL_], 0],
     _aN_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
     _aO_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_graph_info_ml$0,
      70,
      _aR_,
      _aQ_,
      _aP_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aO_,
      _aN_,
      0,
      0,
      Inline_test_config,
      _aM_,
      _aI_);
   }
   function of_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, of_v1)];
   }
   function to_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, to_v1)];
   }
   var
    _P_ =
      [0,
       [0,
        cst_info$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$1)],
       0],
    _Q_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _R_ =
      [0,
       [0, cst_dag$3, caml_call1(Bonsai_Node_path[39][1][13][1], _Q_)],
       _P_],
    _S_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _R_],
    _T_ = caml_call1(Bin_prot_Shape[4], _S_),
    _U_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _T_], 0],
    _V_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_87_4),
    group$4 = caml_call2(Bin_prot_Shape[2], _V_, _U_),
    _W_ = caml_call1(Bin_shape[2][1], cst_t$10),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _W_), 0);
   function bin_size_t$3(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cu_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cu_),
     _cv_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _cw_ = caml_call2(Bonsai_Node_path[39][1][13][2], _cv_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cw_),
     _cx_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cx_);
   }
   function bin_write_t$3(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _ct_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _ct_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3];
   function bin_read_t$7(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$1,
             pos_ref[1]);
   }
   function bin_read_t$8(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _cs_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _cs_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$4, bin_writer_t$3, bin_reader_t$3];
   function t_of_sexp$3(x_072){
    function _ck_(param){
     var _cr_ = param[2], info = _cr_[2][1], dag = _cr_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cl_ = 0;
    function _cm_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cn_ =
       [0,
        cst_info$4,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _co_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cp_ =
       [0,
        cst_dag$4,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _co_),
        _cn_],
     _cq_ =
       [0,
        cst_tree$4,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cp_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_071,
             _cq_,
             _cm_,
             _cl_,
             _ck_,
             x_072);
   }
   function sexp_of_t$3(param){
    var
     info_078 = param[3],
     dag_076 = param[2],
     tree_074 = param[1],
     arg_079 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_078),
     bnds_073 = [0, [1, [0, _X_, [0, arg_079, 0]]], 0],
     _cj_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_077 = caml_call2(Bonsai_Node_path[39][1][13][11], _cj_, dag_076),
     bnds_073$0 = [0, [1, [0, _Y_, [0, arg_077, 0]]], bnds_073],
     arg_075 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_074),
     bnds_073$1 = [0, [1, [0, _Z_, [0, arg_075, 0]]], bnds_073$0];
    return [1, bnds_073$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ay_ =
       function(param){
        var
         _cg_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$4),
         _ch_ = caml_call1(Bin_shape[19][4], _cg_);
        caml_call1(Stdlib[46], _ch_);
        var _ci_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15);
        return caml_call1(Ppx_expect_test_block[2], _ci_);
       },
     _aB_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aA_,
         _az_),
     _aC_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 15), _aB_], 0],
     _aD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 17),
     _aE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 16);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_graph_info_ml,
      94,
      _aH_,
      _aG_,
      _aF_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aE_,
      _aD_,
      0,
      0,
      Inline_test_config,
      _aC_,
      _ay_);
   }
   function of_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, to_v1)];
   }
   function to_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, of_v1)];
   }
   function t_of_sexp$4(x_082){
    function _cb_(param){
     var
      _ce_ = param[2],
      _cf_ = _ce_[2],
      pos_cnum = _cf_[2][1],
      pos_bol = _cf_[1],
      pos_lnum = _ce_[1],
      pos_fname = param[1];
     return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
    }
    var _cc_ = 0;
    function _cd_(param){
     return caml_string_notequal(param, cst_pos_bol$1)
             ? caml_string_notequal
                (param, cst_pos_cnum$1)
               ? caml_string_notequal
                  (param, cst_pos_fname$1)
                 ? caml_string_notequal(param, cst_pos_lnum$1) ? -1 : 1
                 : 0
               : 3
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_081,
             [0,
              cst_pos_fname,
              1,
              Core[559],
              [0,
               cst_pos_lnum,
               1,
               Core[390],
               [0,
                cst_pos_bol,
                1,
                Core[390],
                [0, cst_pos_cnum, 1, Core[390], 0]]]],
             _cd_,
             _cc_,
             _cb_,
             x_082);
   }
   function sexp_of_t$4(param){
    var
     pos_cnum_090 = param[4],
     pos_bol_088 = param[3],
     pos_lnum_086 = param[2],
     pos_fname_084 = param[1],
     arg_091 = caml_call1(Core[389], pos_cnum_090),
     bnds_083 = [0, [1, [0, ___, [0, arg_091, 0]]], 0],
     arg_089 = caml_call1(Core[389], pos_bol_088),
     bnds_083$0 = [0, [1, [0, _$_, [0, arg_089, 0]]], bnds_083],
     arg_087 = caml_call1(Core[389], pos_lnum_086),
     bnds_083$1 = [0, [1, [0, _aa_, [0, arg_087, 0]]], bnds_083$0],
     arg_085 = caml_call1(Core[558], pos_fname_084),
     bnds_083$2 = [0, [1, [0, _ab_, [0, arg_085, 0]]], bnds_083$1];
    return [1, bnds_083$2];
   }
   var
    _ac_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_pos_fname$0, Core[541]],
         [0,
          [0, cst_pos_lnum$0, Core[372]],
          [0,
           [0, cst_pos_bol$0, Core[372]],
           [0, [0, cst_pos_cnum$0, Core[372]], 0]]]]),
    _ad_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _ac_], 0],
    _ae_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_117_2),
    group$5 = caml_call2(Bin_prot_Shape[2], _ae_, _ad_),
    _af_ = caml_call1(Bin_shape[2][1], cst_t$12),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _af_), 0);
   function bin_size_t$4(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _b9_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b9_),
     _b__ = caml_call1(Core[373], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _b__),
     _b$_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _b$_),
     _ca_ = caml_call1(Core[373], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _ca_);
   }
   function bin_write_t$4(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1),
     pos$1 = caml_call3(Core[375], buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3);
    return caml_call3(Core[375], buf, pos$2, v4);
   }
   function bin_read_t$9(buf, pos_ref){
    var
     v_pos_fname = caml_call2(Core[547], buf, pos_ref),
     v_pos_lnum = caml_call2(Core[378], buf, pos_ref),
     v_pos_bol = caml_call2(Core[378], buf, pos_ref),
     v_pos_cnum = caml_call2(Core[378], buf, pos_ref);
    return [0, v_pos_fname, v_pos_lnum, v_pos_bol, v_pos_cnum];
   }
   function t_of_sexp$5(x_094){
    function _b5_(param){
     var here = param[2][1], node_type = param[1];
     return [0, node_type, here];
    }
    var _b6_ = 0;
    function _b7_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
             : 1;
    }
    var _b8_ = [0, cst_here$3, 1, caml_call1(Core[516], t_of_sexp$4), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_093,
             [0, cst_node_type$3, 1, Core[559], _b8_],
             _b7_,
             _b6_,
             _b5_,
             x_094);
   }
   function sexp_of_t$5(param){
    var
     here_098 = param[2],
     node_type_096 = param[1],
     arg_099 = caml_call2(Core[515], sexp_of_t$4, here_098),
     bnds_095 = [0, [1, [0, _ag_, [0, arg_099, 0]]], 0],
     arg_097 = caml_call1(Core[558], node_type_096),
     bnds_095$0 = [0, [1, [0, _ah_, [0, arg_097, 0]]], bnds_095];
    return [1, bnds_095$0];
   }
   var
    _ai_ = [0, [0, cst_here$4, caml_call1(Core[499], bin_shape_t$5)], 0],
    _aj_ =
      caml_call1
       (Bin_prot_Shape[4], [0, [0, cst_node_type$4, Core[541]], _ai_]),
    _ak_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _aj_], 0],
    _al_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_127_2),
    group$6 = caml_call2(Bin_prot_Shape[2], _al_, _ak_),
    _am_ = caml_call1(Bin_shape[2][1], cst_t$14),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _am_), 0);
   function bin_size_t$5(param){
    var
     v2 = param[2],
     v1 = param[1],
     _b3_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b3_),
     _b4_ = caml_call2(Core[500], bin_size_t$4, v2);
    return caml_call2(Bin_prot_Common[23], size, _b4_);
   }
   function bin_write_t$5(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1);
    return caml_call4(Core[502], bin_write_t$4, buf, pos$0, v2);
   }
   var bin_writer_t$4 = [0, bin_size_t$5, bin_write_t$5];
   function bin_read_t$10(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Node_inf, pos_ref[1]);
   }
   function bin_read_t$11(buf, pos_ref){
    var
     v_node_type = caml_call2(Core[547], buf, pos_ref),
     v_here = caml_call2(caml_call1(Core[505], bin_read_t$9), buf, pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t$4 = [0, bin_read_t$11, bin_read_t$10],
    bin_t$4 = [0, bin_shape_t$6, bin_writer_t$4, bin_reader_t$4];
   function of_value(param){
    var here = param[2], value = param[1];
    switch(value[0]){
      case 0:
       var node_type = cst_constant; break;
      case 1:
       var node_type = cst_incr; break;
      case 2:
       var node_type = cst_named; break;
      case 3:
       var node_type = cst_both; break;
      case 4:
       var node_type = cst_cutoff; break;
      case 5:
       var node_type = cst_map; break;
      case 6:
       var node_type = cst_map2; break;
      case 7:
       var node_type = cst_map3; break;
      case 8:
       var node_type = cst_map4; break;
      case 9:
       var node_type = cst_map5; break;
      case 10:
       var node_type = cst_map6; break;
      case 11:
       var node_type = cst_map7; break;
      default: var node_type = cst_exception;
    }
    return [0, node_type, here];
   }
   function of_computation(computation){
    a:
    {
     if(typeof computation !== "number")
      switch(computation[0]){
        case 4:
         var here$0 = computation[4], here = here$0; break a;
        case 10:
         var here$1 = computation[3], here = [0, here$1]; break a;
      }
     var here = 0;
    }
    if(typeof computation === "number")
     var node_type = cst_path;
    else
     switch(computation[0]){
       case 0:
        var node_type = cst_return; break;
       case 1:
        var node_type = cst_leaf1; break;
       case 2:
        var node_type = cst_leaf0; break;
       case 3:
        var node_type = cst_leaf_incr; break;
       case 4:
        var node_type = cst_sub; break;
       case 5:
        var node_type = cst_store; break;
       case 6:
        var node_type = cst_fetch; break;
       case 7:
        var node_type = cst_assoc; break;
       case 8:
        var node_type = cst_assoc_on; break;
       case 9:
        var node_type = cst_assoc_simpl; break;
       case 10:
        var node_type = cst_switch; break;
       case 11:
        var node_type = cst_lazy; break;
       case 12:
        var node_type = cst_wrap; break;
       case 13:
        var node_type = cst_with_model_resetter; break;
       default: var node_type = cst_lifecycle;
     }
    return [0, node_type, here];
   }
   var
    _an_ =
      [0,
       [0, cst_info$5, caml_call1(Bonsai_Node_path[31][46], bin_shape_t$6)],
       0],
    _ao_ = caml_call1(Core[456], Bonsai_Node_path[5]),
    _ap_ =
      [0, [0, cst_dag$5, caml_call1(Bonsai_Node_path[31][46], _ao_)], _an_],
    _aq_ =
      [0,
       [0,
        cst_tree$5,
        caml_call1(Bonsai_Node_path[31][46], Bonsai_Node_path[5])],
       _ap_],
    _ar_ = caml_call1(Bin_prot_Shape[4], _aq_),
    _as_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _ar_], 0],
    _at_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_183_0),
    group$7 = caml_call2(Bin_prot_Shape[2], _at_, _as_),
    _au_ = caml_call1(Bin_shape[2][1], cst_t$16),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _au_), 0);
   function bin_size_t$6(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bZ_ = caml_call2(Bonsai_Node_path[31][47], Bonsai_Node_path[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bZ_),
     _b0_ = caml_call1(Core[457], Bonsai_Node_path[1]),
     _b1_ = caml_call2(Bonsai_Node_path[31][47], _b0_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _b1_),
     _b2_ = caml_call2(Bonsai_Node_path[31][47], bin_size_t$5, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _b2_);
   }
   function bin_write_t$6(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4(Bonsai_Node_path[31][48], Bonsai_Node_path[2], buf, pos, v1),
     _bY_ = caml_call1(Core[459], Bonsai_Node_path[2]),
     pos$1 = caml_call4(Bonsai_Node_path[31][48], _bY_, buf, pos$0, v2);
    return caml_call4(Bonsai_Node_path[31][48], bin_write_t$5, buf, pos$1, v3);
   }
   var bin_writer_t$5 = [0, bin_size_t$6, bin_write_t$6];
   function bin_read_t$12(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_t, pos_ref[1]);
   }
   function bin_read_t$13(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][49], Bonsai_Node_path[3]),
         buf,
         pos_ref),
     _bX_ = caml_call1(Core[462], Bonsai_Node_path[3]),
     v_dag =
       caml_call2(caml_call1(Bonsai_Node_path[31][49], _bX_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][49], bin_read_t$11), buf, pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$5 = [0, bin_read_t$13, bin_read_t$12],
    bin_t$5 = [0, bin_shape_t$7, bin_writer_t$5, bin_reader_t$5];
   function t_of_sexp$6(x_102){
    function _bP_(param){
     var _bW_ = param[2], info = _bW_[2][1], dag = _bW_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _bQ_ = 0;
    function _bR_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _bS_ =
       [0,
        cst_info$6,
        1,
        caml_call1(Bonsai_Node_path[31][44], t_of_sexp$5),
        0],
     _bT_ = caml_call1(Core[473], Bonsai_Node_path[9]),
     _bU_ =
       [0, cst_dag$6, 1, caml_call1(Bonsai_Node_path[31][44], _bT_), _bS_],
     _bV_ =
       [0,
        cst_tree$6,
        1,
        caml_call1(Bonsai_Node_path[31][44], Bonsai_Node_path[9]),
        _bU_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_101,
             _bV_,
             _bR_,
             _bQ_,
             _bP_,
             x_102);
   }
   function sexp_of_t$6(param){
    var
     info_108 = param[3],
     dag_106 = param[2],
     tree_104 = param[1],
     arg_109 = caml_call2(Bonsai_Node_path[31][45], sexp_of_t$5, info_108),
     bnds_103 = [0, [1, [0, _av_, [0, arg_109, 0]]], 0],
     _bO_ = caml_call1(Core[472], Bonsai_Node_path[10]),
     arg_107 = caml_call2(Bonsai_Node_path[31][45], _bO_, dag_106),
     bnds_103$0 = [0, [1, [0, _aw_, [0, arg_107, 0]]], bnds_103],
     arg_105 =
       caml_call2(Bonsai_Node_path[31][45], Bonsai_Node_path[10], tree_104),
     bnds_103$1 = [0, [1, [0, _ax_, [0, arg_105, 0]]], bnds_103$0];
    return [1, bnds_103$1];
   }
   var
    empty =
      [0,
       Bonsai_Node_path[31][5],
       Bonsai_Node_path[31][5],
       Bonsai_Node_path[31][5]];
   function value_map(param, state, value){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_value(value);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[37], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[37], environment, fst, current_path);
      caml_call3(Core_Hashtbl[37], environment, snd, current_path);
     }
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(2 === value[1][0]){
     var
      _bL_ = caml_call1(Core_Type_equal[8][2], value[3]),
      match = caml_call2(Core_Hashtbl[56], environment, _bL_);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     else{
      var
       _bM_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_graph_info_ml_217_41),
          0],
       _bN_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _bM_]];
      caml_call2(Core[256], 0, _bN_);
     }
    }
    return caml_call2(recurse, state, value);
   }
   function computation_map(param, state, computation){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_computation(computation);
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[37], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[37], environment, fst, current_path);
      caml_call3(Core_Hashtbl[37], environment, snd, current_path);
     }
    var recursed = caml_call2(recurse, state, computation);
    if(typeof recursed !== "number" && 6 === recursed[0]){
     var
      v_id = recursed[1],
      uid = caml_call1(Core_Type_equal[8][2], v_id),
      match = caml_call2(Core_Hashtbl[56], environment, uid);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     return computation;
    }
    return recursed;
   }
   function iter_graph_updates(t, on_update){
    var graph_info = [0, empty];
    function add_dag_relationship(from, to){
     var _bH_ = caml_obj_tag(to);
     a:
     if(250 === _bH_)
      var to$0 = to[1];
     else{
      if(246 !== _bH_ && 244 !== _bH_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _bI_ = caml_obj_tag(from);
     a:
     if(250 === _bI_)
      var from$0 = from[1];
     else{
      if(246 !== _bI_ && 244 !== _bI_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _bJ_ = gm[3],
      _bK_ = caml_call3(Core_Map[39], gm[2], from$0, to$0);
     graph_info[1] = [0, gm[1], _bK_, _bJ_];
     return caml_call1(on_update, graph_info[1]);
    }
    function add_tree_relationship(from, to, from_info){
     var _bD_ = caml_obj_tag(to);
     a:
     if(250 === _bD_)
      var to$0 = to[1];
     else{
      if(246 !== _bD_ && 244 !== _bD_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _bE_ = caml_obj_tag(from);
     a:
     if(250 === _bE_)
      var from$0 = from[1];
     else{
      if(246 !== _bE_ && 244 !== _bE_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _bF_ = caml_call3(Core_Map[37], gm[3], from$0, from_info),
      _bG_ = gm[2];
     graph_info[1] =
      [0, caml_call3(Core_Map[37], gm[1], from$0, to$0), _bG_, _bF_];
     return caml_call1(on_update, graph_info[1]);
    }
    var environment = caml_call3(Core_Type_equal[8][11][27][5], 0, 0, 0);
    return caml_call4
            (Bonsai_Transform[4],
             [0, computation_map],
             [0, value_map],
             [0, environment, add_tree_relationship, add_dag_relationship],
             t);
   }
   function pull_source_locations_from_nea(t){
    var info = [0, t[3]];
    function find_and_update_nearest_here(key){
     function _bu_(param){
      var here = param[2], node_type = param[1];
      if(here)
       var here$0 = here[1], here$1 = [0, here$0];
      else
       var
        _bw_ =
          function(parent){
           function _by_(here){
            var _bA_ = here[4], _bB_ = here[3], _bC_ = here[2];
            return [0, caml_call2(Core[18], cst, here[1]), _bC_, _bB_, _bA_];
           }
           var _bz_ = find_and_update_nearest_here(parent);
           return caml_call2(Base_Option[29][4][3], _bz_, _by_);
          },
        _bx_ = caml_call2(Core_Map[44], t[1], key),
        here$1 = caml_call2(Base_Option[29][4][2], _bx_, _bw_);
      info[1] = caml_call3(Core_Map[38], info[1], key, [0, node_type, here$1]);
      return here$1;
     }
     var _bv_ = caml_call2(Core_Map[44], info[1], key);
     return caml_call2(Base_Option[29][4][2], _bv_, _bu_);
    }
    function update_nearest_here(key){
     find_and_update_nearest_here(key);
     return 0;
    }
    caml_call2(Core_Map[49], info[1], update_nearest_here);
    return info[1];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Graph_info);
   var
    Bonsai_Graph_info =
      [0,
       [0,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$11,
        bin_read_t$10,
        bin_shape_t$6,
        bin_writer_t$4,
        bin_reader_t$4,
        bin_t$4,
        of_computation,
        of_value],
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$13,
       bin_read_t$12,
       bin_shape_t$7,
       bin_writer_t$5,
       bin_reader_t$5,
       bin_t$5,
       t_of_sexp$6,
       sexp_of_t$6,
       empty,
       iter_graph_updates,
       pull_source_locations_from_nea,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          compare],
         [0,
          t_of_sexp$0,
          sexp_of_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          to_v1,
          of_v1],
         [0, of_v1, to_v1]],
        [0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$2,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         t_of_sexp$2,
         sexp_of_t$2,
         to_v1$0,
         of_v1$0],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$8,
         bin_read_t$7,
         bin_shape_t$4,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         t_of_sexp$3,
         sexp_of_t$3,
         to_v2,
         of_v2]]];
   runtime.caml_register_global
    (238, Bonsai_Graph_info, cst_Bonsai_Graph_info$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Instrumentation
//# unitInfo: Requires: Bonsai__Graph_info, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "##",
    cst_Bonsai_Instrumentation$0 = "Bonsai__Instrumentation",
    cst_bonsai$0 = "bonsai",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = " ",
    cst$0 = cst$2,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_String = global_data.Core__String,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Instrumentation$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/instrumentation.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "instrumentation.ml");
   var
    cst_compute = "-compute",
    cst_apply_action = "-apply_action",
    cst_by = "-by",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Instrumentation = cst_Bonsai_Instrumentation$0;
   function to_string(param){
    var
     node_type = param[2],
     id = param[1],
     _n_ = caml_call1(Bonsai_Node_path[34], id),
     _o_ = [0, caml_call1(Ppx_string_runtime[1][3], _n_), 0],
     _p_ = [0, node_type, [0, caml_call1(Ppx_string_runtime[1][2], cst), _o_]],
     _q_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$0), _p_];
    return caml_call1(Ppx_string_runtime[1][4], _q_);
   }
   function extract_node_path_from_entry_l(label){
    if(! caml_call2(Core_String[73], label, cst$1)) return 0;
    var match = caml_call2(Core_String[78], label, 32);
    if(match){
     var _m_ = match[2];
     if(_m_ && ! _m_[2]){
      var node_path = _m_[1];
      return [0, caml_call1(Bonsai_Node_path[33], node_path)];
     }
    }
    return 0;
   }
   function instrument_computation(t, start_timer, stop_timer){
    function computation_map(context, param, computation){
     var node_info = caml_call1(Bonsai_Graph_info[1][11], computation);
     function entry_label(node_type){
      var _k_ = context[4], _l_ = caml_obj_tag(_k_);
      a:
      if(250 === _l_)
       var current_path = _k_[1];
      else{
       if(246 !== _l_ && 244 !== _l_){var current_path = _k_; break a;}
       var current_path = caml_call1(CamlinternalLazy[2], _k_);
      }
      return to_string([0, current_path, node_type]);
     }
     var
      _c_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_compute), 0],
      compute_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _c_])),
      _d_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_apply_action), 0],
      apply_action_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _d_])),
      _e_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_by), 0],
      by_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _e_])),
      recursed = caml_call2(context[1], 0, computation);
     if(typeof recursed !== "number")
      switch(recursed[0]){
        case 1:
         var
          apply_action = recursed[4],
          _f_ = recursed[6],
          _g_ = recursed[5],
          _h_ =
            function(inject, schedule_event, input, model$0, action){
             caml_call1(start_timer, apply_action_label);
             var
              model =
                caml_call5
                 (apply_action,
                  inject,
                  schedule_event,
                  input,
                  model$0,
                  action);
             caml_call1(stop_timer, apply_action_label);
             return model;
            };
         return [1, recursed[1], recursed[2], recursed[3], _h_, _g_, _f_];
        case 2:
         var
          apply_action$0 = recursed[3],
          _i_ = recursed[4],
          _j_ =
            function(inject, schedule_event, model$0, action){
             caml_call1(start_timer, apply_action_label);
             var
              model =
                caml_call4
                 (apply_action$0, inject, schedule_event, model$0, action);
             caml_call1(stop_timer, apply_action_label);
             return model;
            };
         return [2, recursed[1], recursed[2], _j_, _i_];
        case 3:
         var
          compute =
            function(clock, input){
             caml_call1(start_timer, compute_label);
             var computed = caml_call2(recursed[2], clock, input);
             caml_call1(stop_timer, compute_label);
             return computed;
            };
         return [3, recursed[1], compute];
        case 6:
         return recursed;
        case 9:
         var
          by =
            function(path, key, value){
             caml_call1(start_timer, by_label);
             var by = caml_call3(recursed[2], path, key, value);
             caml_call1(stop_timer, by_label);
             return by;
            };
         return [9, recursed[1], by, recursed[3]];
      }
     return recursed;
    }
    function value_map(context, param, wrapped_value){
     var
      id = wrapped_value[3],
      here = wrapped_value[2],
      value = wrapped_value[1],
      _a_ = context[4],
      _b_ = caml_obj_tag(_a_);
     a:
     if(250 === _b_)
      var current_path = _a_[1];
     else{
      if(246 !== _b_ && 244 !== _b_){var current_path = _a_; break a;}
      var current_path = caml_call1(CamlinternalLazy[2], _a_);
     }
     var
      node_info = caml_call1(Bonsai_Graph_info[1][12], wrapped_value),
      entry_label = to_string([0, current_path, node_info[1]]);
     switch(value[0]){
       case 5:
        var
         f =
           function(a){
            caml_call1(start_timer, entry_label);
            var x = caml_call1(value[2], a);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [5, value[1], f];
        break;
       case 6:
        var
         f$0 =
           function(a, b){
            caml_call1(start_timer, entry_label);
            var x = caml_call2(value[3], a, b);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [6, value[1], value[2], f$0];
        break;
       case 7:
        var
         f$1 =
           function(a, b, c){
            caml_call1(start_timer, entry_label);
            var x = caml_call3(value[4], a, b, c);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [7, value[1], value[2], value[3], f$1];
        break;
       case 8:
        var
         f$2 =
           function(a, b, c, d){
            caml_call1(start_timer, entry_label);
            var x = caml_call4(value[5], a, b, c, d);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [8, value[1], value[2], value[3], value[4], f$2];
        break;
       case 9:
        var
         f$3 =
           function(a, b, c, d, e){
            caml_call1(start_timer, entry_label);
            var x = caml_call5(value[6], a, b, c, d, e);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [9, value[1], value[2], value[3], value[4], value[5], f$3];
        break;
       case 10:
        var
         f$4 =
           function(a, b, c, d, e, f){
            caml_call1(start_timer, entry_label);
            var x = caml_call6(value[7], a, b, c, d, e, f);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [10,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            f$4];
        break;
       case 11:
        var
         f$5 =
           function(a, b, c, d, e, f, g){
            caml_call1(start_timer, entry_label);
            var x = caml_call7(value[8], a, b, c, d, e, f, g);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [11,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            value[7],
            f$5];
        break;
       default: var value$0 = value;
     }
     return caml_call2(context[1], 0, [0, value$0, here, id]);
    }
    return caml_call4
            (Bonsai_Transform[4], [0, computation_map], [0, value_map], 0, t);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Instrumentation);
   var
    Bonsai_Instrumentation =
      [0, instrument_computation, extract_node_path_from_entry_l];
   runtime.caml_register_global
    (23, Bonsai_Instrumentation, cst_Bonsai_Instrumentation$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Cont
//# unitInfo: Requires: Base__Applicative, Base__Exn, Base__Field, Bonsai__Annotate_incr, Bonsai__Apply_action_context, Bonsai__Instrumentation, Bonsai__Map0, Bonsai__Path, Bonsai__Proc, Bonsai__Proc_min, Bonsai__To_dot, Bonsai__Value, Bonsai__Var, CamlinternalLazy, Core, Core__Int, Core__Map, Core__Option, Core__Source_code_position, Core__Tuple, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_After = "After",
    cst_Before = "Before",
    cst_Bonsai_Cont$0 = "Bonsai__Cont",
    cst_after = "after",
    cst_before = "before",
    cst_bonsai$0 = "bonsai",
    cst_src_cont_ml = "src/cont.ml",
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_003 = "src/cont.ml.Clock.Before_or_after.t",
    Base_Field = global_data.Base__Field,
    Ui_effect = global_data.Ui_effect,
    Core = global_data.Core,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Bonsai_Instrumentation = global_data.Bonsai__Instrumentation,
    Bonsai_To_dot = global_data.Bonsai__To_dot,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Core_Option = global_data.Core__Option,
    Core_Tuple = global_data.Core__Tuple,
    Base_Exn = global_data.Base__Exn,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Bonsai_Var = global_data.Bonsai__Var,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Cont$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_cont_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "cont.ml");
   var
    _f_ = [0, "here"],
    cst_match_sub_called_outside_o =
      "match%sub called outside of the context of a graph",
    _e_ = [0, cst_src_cont_ml, 704, 21221, 21302],
    _c_ = [0, cst_After],
    _d_ = [0, cst_Before],
    _a_ =
      [0,
       [11,
        "BUG: nested calls (",
        [4,
         0,
         0,
         0,
         [11, ") to top_level_handle. Please report to bonsai-devs.\n", 0]]],
       "BUG: nested calls (%d) to top_level_handle. Please report to bonsai-devs.\n"],
    cst_outside_of_a_Bonsai_toplev = "outside of a Bonsai toplevel",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Cont = cst_Bonsai_Cont$0,
    perform_on_exception = [0, function(_aD_){return;}];
   function set_perform_on_exception(perform){
    perform_on_exception[1] = perform;
    return 0;
   }
   function perform(here, graph, computation_to_perform){
    if
     (typeof computation_to_perform !== "number"
      && 0 === computation_to_perform[0]){
     var match = computation_to_perform[1], value = match[1];
     switch(value[0]){
       case 0:
       case 2:
       case 12:
        var id = match[3]; return [0, value, here, id];
     }
    }
    var
     via = caml_call2(Core_Type_equal[8][3], cst, Core[149]),
     old_f = graph[1];
    function new_f(eventual_result){
     if(typeof eventual_result !== "number" && 0 === eventual_result[0]){
      var _aC_ = eventual_result[1];
      if(2 === _aC_[1][0]){
       var id = _aC_[3];
       if(caml_call2(Core_Type_equal[8][8], via, id)){
        caml_call2(Core_Type_equal[8][10], via, id);
        return caml_call1(old_f, computation_to_perform);
       }
      }
     }
     return caml_call1
             (old_f, [4, computation_to_perform, via, eventual_result, here]);
    }
    graph[1] = new_f;
    return caml_call2(Bonsai_Value[21], [0, here], via);
   }
   function isolated(graph, f){
    var backup_f = graph[1];
    graph[1] = function(_aB_){return _aB_;};
    try{
     var
      r = caml_call1(f, 0),
      _aA_ = caml_call1(Bonsai_Proc[1], r),
      r$0 = caml_call1(graph[1], _aA_);
     graph[1] = backup_f;
     return r$0;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call1(perform_on_exception[1], exn);
     graph[1] = backup_f;
     var _az_ = caml_call1(Bonsai_Value[25], exn);
     return caml_call1(Bonsai_Proc[1], _az_);
    }
   }
   var
    the_one_and_only =
      [0,
       function(param){
        return caml_call1(Core[6], cst_outside_of_a_Bonsai_toplev);
       }],
    num_nested_top_level_handles = [0, 0];
   function handle(f, graph){
    return isolated(graph, function(param){return caml_call1(f, graph);});
   }
   function handle_with_global_graph(inside_a_lazy, f){
    a:
    {
     var match = caml_call2(Core[91], num_nested_top_level_handles[1], 0);
     if(851120823 > inside_a_lazy && match){
      caml_call2(Core[243], _a_, num_nested_top_level_handles[1]);
      break a;
     }
    }
    num_nested_top_level_handles[1]++;
    function _aw_(param){num_nested_top_level_handles[1] += -1; return 0;}
    function _ax_(param){
     var backup_f = the_one_and_only[1];
     the_one_and_only[1] = function(_ay_){return _ay_;};
     var
      v = caml_call1(f, the_one_and_only),
      computation_context = the_one_and_only[1];
     the_one_and_only[1] = backup_f;
     return caml_call1(computation_context, caml_call1(Bonsai_Proc_min[1], v));
    }
    return caml_call2(Base_Exn[13], _ax_, _aw_);
   }
   function top_level_handle(f){
    return handle_with_global_graph(496818763, f);
   }
   function with_global_graph(f, no_graph){
    return caml_call2(Core[91], num_nested_top_level_handles[1], 0)
            ? caml_call1(f, the_one_and_only)
            : caml_call1(no_graph, 0);
   }
   var return$0 = Bonsai_Value[2];
   function arr1(graph, a, f){
    var _av_ = caml_call2(Bonsai_Proc[50][3], a, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _av_));
   }
   function arr2(graph, a, b, f){
    var _au_ = caml_call3(Bonsai_Proc[50][10], a, b, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _au_));
   }
   function _b_(a, f){
    function _at_(param){return caml_call2(Bonsai_Value[3], a, f);}
    return with_global_graph(function(graph){return arr1(graph, a, f);}, _at_);
   }
   function map2(a, b, f){
    function _as_(param){return caml_call3(Bonsai_Value[10], a, b, f);}
    return with_global_graph
            (function(graph){return arr2(graph, a, b, f);}, _as_);
   }
   var
    map = [0, -198771759, _b_],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function map3(a, b, c, f){
    function _aq_(param){return caml_call4(Bonsai_Value[16], a, b, c, f);}
    return with_global_graph
            (function(graph){
              var _ar_ = caml_call4(Bonsai_Proc[50][16], a, b, c, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _ar_));
             },
             _aq_);
   }
   function map4(a, b, c, d, f){
    function _ao_(param){return caml_call5(Bonsai_Value[17], a, b, c, d, f);}
    return with_global_graph
            (function(graph){
              var _ap_ = caml_call5(Bonsai_Proc[50][17], a, b, c, d, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _ap_));
             },
             _ao_);
   }
   function map5(a, b, c, d, e, f){
    function _am_(param){
     return caml_call6(Bonsai_Value[18], a, b, c, d, e, f);
    }
    return with_global_graph
            (function(graph){
              var _an_ = caml_call6(Bonsai_Proc[50][18], a, b, c, d, e, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _an_));
             },
             _am_);
   }
   function map6(a, b, c, d, e, g, f){
    function _ak_(param){
     return caml_call7(Bonsai_Value[19], a, b, c, d, e, g, f);
    }
    return with_global_graph
            (function(graph){
              var _al_ = caml_call7(Bonsai_Proc[50][19], a, b, c, d, e, g, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _al_));
             },
             _ak_);
   }
   function map7(a, b, c, d, e, g, h, f){
    function _ai_(param){
     return caml_call8(Bonsai_Value[20], a, b, c, d, e, g, h, f);
    }
    return with_global_graph
            (function(graph){
              var
               _aj_ = caml_call8(Bonsai_Proc[50][20], a, b, c, d, e, g, h, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _aj_));
             },
             _ai_);
   }
   function both(a, b){return caml_call3(map2$0, a, b, Core_Tuple[1][6]);}
   function cutoff(v, equal){
    return caml_call3(Bonsai_Value[22], 0, v, equal);
   }
   function all_map(v, graph){
    function _ag_(f){return handle(f, graph);}
    var _ah_ = caml_call2(Core_Map[57], v, _ag_);
    return perform(0, graph, caml_call1(Bonsai_Proc[49][21], _ah_));
   }
   function transpose_opt(opt){
    var _ac_ = Core_Option[58];
    function _ad_(_af_){return caml_call2(map$0, _af_, _ac_);}
    var _ae_ = caml_call1(return$1, 0);
    return caml_call3(Core_Option[41], opt, _ae_, _ad_);
   }
   function path_id(graph){return perform(0, graph, Bonsai_Proc[33]);}
   function split(graph, tuple){
    var
     a = arr1(graph, tuple, function(_ab_){return _ab_[1];}),
     b = arr1(graph, tuple, function(_aa_){return _aa_[2];});
    return [0, a, b];
   }
   function state_for_proc2(reset, sexp_of_model, equal, default_model, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[28], reset, sexp_of_model, equal, default_model));
   }
   function state(reset, sexp_of_model, equal, default_model, graph){
    return split
            (graph,
             state_for_proc2
              (reset, sexp_of_model, equal, default_model, graph));
   }
   function state_opt_for_proc2
   (reset, default_model, sexp_of_model, equal, param, graph){
    return perform
            (0,
             graph,
             caml_call5
              (Bonsai_Proc[32], reset, default_model, sexp_of_model, equal, 0));
   }
   function state_opt(reset, sexp_of_model, equal, default_model, graph){
    return split
            (graph,
             state_opt_for_proc2
              (reset, default_model, sexp_of_model, equal, 0, graph));
   }
   function toggle_for_proc2(default_model, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[31], default_model));
   }
   function toggle(default_model, graph){
    return split(graph, toggle_for_proc2(default_model, graph));
   }
   function toggle$0(default_model, graph){
    var
     all = perform(0, graph, caml_call1(Bonsai_Proc[30], default_model)),
     state =
       arr1(graph, all, function(param){var state = param[1]; return state;}),
     set_state =
       arr1
        (graph,
         all,
         function(param){var set_state = param[2]; return set_state;}),
     toggle =
       arr1
        (graph, all, function(param){var toggle = param[3]; return toggle;});
    return [0, state, set_state, toggle];
   }
   function path(graph){return perform(0, graph, Bonsai_Proc[12]);}
   function state_machine0_for_proc2
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    param,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[7],
               reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               apply_action,
               0));
   }
   function state_machine0
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    graph){
    return split
            (graph,
             state_machine0_for_proc2
              (reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               apply_action,
               0,
               graph));
   }
   function state_machine1_for_proc2
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    apply_action,
    input,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[6],
               sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               input));
   }
   function state_machine1
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    input,
    graph){
    return split
            (graph,
             state_machine1_for_proc2
              (sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               input,
               graph));
   }
   function actor0_for_proc2
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    recv,
    param,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[27],
               reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               recv,
               0));
   }
   function actor0
   (reset, sexp_of_model, sexp_of_action, equal, default_model, recv, graph){
    return split
            (graph,
             actor0_for_proc2
              (reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               recv,
               0,
               graph));
   }
   function actor1_for_proc2
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    recv,
    input,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[26],
               sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               recv,
               input));
   }
   function actor1
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    recv,
    input,
    graph){
    return split
            (graph,
             actor1_for_proc2
              (sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               recv,
               input,
               graph));
   }
   function delay(f, graph){
    var
     ___ =
       [246, function(_$_){return handle_with_global_graph(851120823, f);}];
    return perform(0, graph, caml_call1(Bonsai_Proc[10], ___));
   }
   function thunk(f, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[40], f));
   }
   function assoc_on(io_cmp, model_cmp, map, get_model_key, f, graph){
    function _Z_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform
            (0,
             graph,
             caml_call5
              (Bonsai_Proc[9], io_cmp, model_cmp, map, get_model_key, _Z_));
   }
   function freeze(sexp_of_model, equal, v, graph){
    return perform
            (0, graph, caml_call3(Bonsai_Proc[39], sexp_of_model, equal, v));
   }
   function fix(v, f, graph){
    function recurse(i2, graph){
     return delay
             (function(graph){return caml_call3(f, recurse, i2, graph);},
              graph);
    }
    return caml_call3(f, recurse, v, graph);
   }
   function fix2(a, b, f, graph){
    function recurse(a, b, graph){
     return delay
             (function(graph){return caml_call4(f, recurse, a, b, graph);},
              graph);
    }
    return caml_call4(f, recurse, a, b, graph);
   }
   function scope_model(comparator, on, for$0, graph){
    var
     _Y_ = handle(function(graph){return caml_call1(for$0, graph);}, graph);
    return perform(0, graph, caml_call3(Bonsai_Proc[21], comparator, on, _Y_));
   }
   function most_recent_some(sexp_of_model, equal, value, f, graph){
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[41], sexp_of_model, equal, value, f));
   }
   function most_recent_value_satisfying
   (sexp_of_model, equal, value, condition, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[42], sexp_of_model, equal, value, condition));
   }
   function previous_value(sexp_of_model, equal, value, graph){
    return perform
            (0,
             graph,
             caml_call3(Bonsai_Proc[43], sexp_of_model, equal, value));
   }
   function wrap_for_proc2
   (reset, sexp_of_model, equal, default_model, apply_action, f, param, graph){
    var _W_ = 0;
    function _X_(model, inject){
     return handle
             (function(graph){return caml_call3(f, model, inject, graph);},
              graph);
    }
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc_min[13],
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               _X_,
               _W_));
   }
   function wrap
   (reset, sexp_of_model, equal, default_model, apply_action, f, graph){
    return wrap_for_proc2
            (reset,
             sexp_of_model,
             equal,
             default_model,
             apply_action,
             f,
             0,
             graph);
   }
   function enum$0(m, match, with$0, graph){
    function with$1(k){
     return handle
             (function(graph){return caml_call2(with$0, k, graph);}, graph);
    }
    return perform(0, graph, caml_call3(Bonsai_Proc[20], m, match, with$1));
   }
   function with_model_resetter_for_proc2(f, graph){
    var _V_ = handle(function(graph){return caml_call1(f, graph);}, graph);
    return perform(0, graph, caml_call1(Bonsai_Proc[19], _V_));
   }
   function with_model_resetter(f, graph){
    return split(graph, with_model_resetter_for_proc2(f, graph));
   }
   function with_model_resetter$0(f, graph){
    function _U_(reset){
     return handle
             (function(graph){return caml_call2(f, reset, graph);}, graph);
    }
    return perform(0, graph, caml_call1(Bonsai_Proc_min[14], _U_));
   }
   function peek(value, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[34], value));
   }
   function approx_now(tick_every, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[47][1], tick_every));
   }
   function now(graph){return perform(0, graph, Bonsai_Proc[47][2]);}
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _Q_ = sexp_004[1];
      b:
      if(caml_string_notequal(_Q_, cst_After)){
       if(caml_string_notequal(_Q_, cst_Before)){
        if(! caml_string_notequal(_Q_, cst_after)) break b;
        if(caml_string_notequal(_Q_, cst_before)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _R_ = sexp_004[1];
     if(! _R_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _S_ = _R_[1];
     if(0 !== _S_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _T_ = _S_[1];
     b:
     if(caml_string_notequal(_T_, cst_After)){
      if(caml_string_notequal(_T_, cst_Before)){
       if(! caml_string_notequal(_T_, cst_after)) break b;
       if(caml_string_notequal(_T_, cst_before)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){return param ? _c_ : _d_;}
   function equal(_P_, _O_){return _P_ === _O_ ? 1 : 0;}
   var Before_or_after = [0, t_of_sexp, sexp_of_t, equal];
   function at(time, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[47][4], time));
   }
   function every
   (when_to_start_next_effect, trigger_on_activate, span, callback, graph){
    perform
     (0,
      graph,
      caml_call4
       (Bonsai_Proc[47][17],
        when_to_start_next_effect,
        trigger_on_activate,
        span,
        callback));
    return 0;
   }
   function get_current_time(graph){
    return perform(0, graph, Bonsai_Proc[47][5]);
   }
   function sleep(graph){return perform(0, graph, Bonsai_Proc[47][6]);}
   function until(graph){return perform(0, graph, Bonsai_Proc[47][7]);}
   var
    Clock =
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       every,
       get_current_time,
       sleep,
       until];
   function on_change_for_proc2(sexp_of_model, equal, value, callback, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][7], sexp_of_model, equal, value, callback));
   }
   function on_change(sexp_of_model, equal, value, callback, graph){
    on_change_for_proc2(sexp_of_model, equal, value, callback, graph);
    return 0;
   }
   function on_change_for_proc2$0
   (sexp_of_model, equal, value, callback, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][6], sexp_of_model, equal, value, callback));
   }
   function on_change$0(sexp_of_model, equal, value, callback, graph){
    on_change_for_proc2$0(sexp_of_model, equal, value, callback, graph);
    return 0;
   }
   function lifecycle_for_proc2
   (on_activate, on_deactivate, after_display, param, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][2],
               on_activate,
               on_deactivate,
               after_display,
               0));
   }
   function lifecycle(on_activate, on_deactivate, after_display, graph){
    lifecycle_for_proc2(on_activate, on_deactivate, after_display, 0, graph);
    return 0;
   }
   function lifecycle_for_proc2$0
   (on_activate, on_deactivate, after_display, param, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][1],
               on_activate,
               on_deactivate,
               after_display,
               0));
   }
   function lifecycle$0(on_activate, on_deactivate, after_display, graph){
    lifecycle_for_proc2$0(on_activate, on_deactivate, after_display, 0, graph);
    return 0;
   }
   function after_display_for_proc2(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[35][4], callback));
   }
   function after_display(callback, graph){
    after_display_for_proc2(callback, graph);
    return 0;
   }
   function after_display_for_proc2$0(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[35][3], callback));
   }
   function after_display$0(callback, graph){
    after_display_for_proc2$0(callback, graph);
    return 0;
   }
   function wait_after_display(graph){
    return perform(0, graph, Bonsai_Proc[35][5]);
   }
   function effect_on_change
   (sexp_of_input,
    sexp_of_result,
    equal_input,
    equal_result,
    starting,
    value,
    effect,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[35][8][4],
               sexp_of_input,
               sexp_of_result,
               equal_input,
               equal_result,
               starting,
               value,
               effect));
   }
   function manual_refresh_for_proc2
   (sexp_of_model, equal, starting, effect, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][8][3], sexp_of_model, equal, starting, effect));
   }
   function manual_refresh(sexp_of_model, equal, starting, effect, graph){
    return split
            (graph,
             manual_refresh_for_proc2
              (sexp_of_model, equal, starting, effect, graph));
   }
   function create(cmp, f, graph){
    function _N_(v){
     return handle(function(graph){return caml_call2(f, v, graph);}, graph);
    }
    return perform(0, graph, caml_call2(Bonsai_Proc[48][2], cmp, _N_));
   }
   function lookup(sexp_of_model, equal, t, input, graph){
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[48][3], sexp_of_model, equal, t, input));
   }
   var Memo = [0, create, lookup];
   function poll(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[36][2], callback));
   }
   var create$0 = Bonsai_Proc[46][5], derived = Bonsai_Proc[46][6];
   function set(var$0, value, inside, graph){
    var
     inside$0 =
       handle(function(graph){return caml_call1(inside, graph);}, graph);
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][8], var$0, value, inside$0));
   }
   function f_with_resetter(f, graph, resetter){
    var
     resetter$0 =
       [0,
        function(c, graph){
         var
          _M_ = handle(function(graph){return caml_call1(c, graph);}, graph);
         return perform(0, graph, caml_call1(resetter[1], _M_));
        }];
    return handle
            (function(graph){return caml_call2(f, resetter$0, graph);}, graph);
   }
   function set$0(var$0, value, f, graph){
    function f$0(_L_){return f_with_resetter(f, graph, _L_);}
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][9], var$0, value, f$0));
   }
   function lookup$0(var$0, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[46][3], var$0));
   }
   function modify(var$0, change, f, graph){
    function f$0(_K_){return f_with_resetter(f, graph, _K_);}
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][7], var$0, change, f$0));
   }
   function value_cutoff(t, equal, graph){
    return perform(0, graph, caml_call2(Bonsai_Proc[37][1], t, equal));
   }
   function compute(t, f, graph){
    return perform(0, graph, caml_call2(Bonsai_Proc[37][4], t, f));
   }
   function to_value(incr){return caml_call1(Bonsai_Proc[37][6], incr);}
   function with_clock(f, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[37][5], f));
   }
   var Incr = [0, value_cutoff, compute, to_value, with_clock];
   function assoc(comparator, map, f, graph){
    function _J_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform(0, graph, caml_call3(Bonsai_Proc[8], comparator, map, _J_));
   }
   function assoc_set(comparator, set, f, graph){
    function _I_(k){
     return handle(function(graph){return caml_call2(f, k, graph);}, graph);
    }
    return perform
            (0, graph, caml_call3(Bonsai_Proc[44], comparator, set, _I_));
   }
   function assoc_list(comparator, list, get_key, f, graph){
    function _H_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[45], comparator, list, get_key, _H_));
   }
   function on_change$1(v, f, graph){
    var
     f$0 = arr1(graph, v, function(v){caml_call1(f, v); return Ui_effect[1];});
    return after_display(f$0, graph);
   }
   function on_change_print_s(v, sexp_of){
    function _E_(a){
     var _G_ = caml_call1(sexp_of, a);
     return caml_call2(Core[256], 0, _G_);
    }
    return function(_F_){return on_change$1(v, _E_, _F_);};
   }
   function to_dot(pre_process, c){
    var _D_ = top_level_handle(c);
    return caml_call2(Bonsai_To_dot[1], pre_process, _D_);
   }
   var
    enable_incremental_annotations = Bonsai_Annotate_incr[1],
    disable_incremental_annotation = Bonsai_Annotate_incr[2];
   function instrument_computation(c, start_timer, stop_timer, graph){
    var _C_ = handle(c, graph);
    return perform
            (0,
             graph,
             caml_call3
              (Bonsai_Instrumentation[1], _C_, start_timer, stop_timer));
   }
   function switch_for_proc2(match, branches, with$0, graph){
    var arms = [0, 0], _A_ = branches - 1 | 0, _z_ = 0;
    if(_A_ >= 0){
     var i = _z_;
     for(;;){
      var
       computation =
         isolated
          (graph,
           function(i){
             return function(param){return caml_call2(with$0, i, graph);};
            }
            (i));
      arms[1] = [0, [0, i, computation], arms[1]];
      var _B_ = i + 1 | 0;
      if(_A_ === i) break;
      var i = _B_;
     }
    }
    var arms$0 = arms[1];
    return perform
            (0,
             graph,
             [10,
              match,
              caml_call2(Core_Map[8], [0, Core_Int[97]], arms$0),
              _e_]);
   }
   function symbol_map$0(t, f){return caml_call2(map$0, t, f);}
   function return$2(_y_){return _y_;}
   function map$1(param, a, f){return caml_call2(map$0, a, f);}
   function arr(param, a, f){return map$1(0, a, f);}
   function cutoff$0(v, equal){
    return caml_call3(Bonsai_Value[22], 1, v, equal);
   }
   function switch$0(here, match, branches, with$0){
    function _v_(param){
     var
      _w_ =
        [0,
         [1, [0, _f_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
         0],
      _x_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_match_sub_called_outside_o),
          _w_]];
     return caml_call1(Core[261], _x_);
    }
    return with_global_graph
            (function(graph){
              function with$1(i, graph){return caml_call1(with$0, i);}
              return switch_for_proc2(match, branches, with$1, graph);
             },
             _v_);
   }
   function sub(param, a, f){return caml_call1(f, a);}
   function arr1_with_location(here, graph, a, f){
    var _u_ = caml_call3(Bonsai_Proc[13][2][4], here, a, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _u_));
   }
   function value_cutoff$0(v, equal){
    return caml_call3(Bonsai_Value[22], 0, v, equal);
   }
   function conceal_value(v){return v;}
   function toggle$1(default_model, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[30], default_model));
   }
   function with_model_resetter$1(f, graph){
    return with_model_resetter_for_proc2(f, graph);
   }
   function with_model_resetter$2(f, graph){return with_model_resetter$0(f, graph);
   }
   function lazy(f, graph){
    return delay
            (function(graph){
              var _s_ = runtime.caml_obj_tag(f);
              a:
              if(250 === _s_)
               var _t_ = f[1];
              else{
               if(246 !== _s_ && 244 !== _s_){var _t_ = f; break a;}
               var _t_ = caml_call1(CamlinternalLazy[2], f);
              }
              return caml_call1(_t_, graph);
             },
             graph);
   }
   function switch$1(match, branches, with$0, graph){
    return switch_for_proc2(match, branches, with$0, graph);
   }
   function debug_on_change(v, f, graph){
    var
     f$0 = arr1(graph, v, function(v){caml_call1(f, v); return Ui_effect[1];});
    return after_display_for_proc2(f$0, graph);
   }
   function debug_on_change_print_s(v, sexp_of){
    function _p_(a){
     var _r_ = caml_call1(sexp_of, a);
     return caml_call2(Core[256], 0, _r_);
    }
    return function(_q_){return debug_on_change(v, _p_, _q_);};
   }
   function narrow(state_and_inject, get, set, graph){
    var
     match = split(graph, state_and_inject),
     inject = match[2],
     state = match[1],
     peek_state = peek(state, graph);
    function _m_(param, a){
     var inject = param[2], peek_state = param[1];
     function _o_(param){
      if(! param) return Ui_effect[1];
      var state = param[1];
      return caml_call1(inject, caml_call2(set, state, a));
     }
     return caml_call2(Ui_effect[13][4][2], peek_state, _o_);
    }
    var
     inject$0 = map$1(0, both(peek_state, inject), _m_),
     state$0 =
       map$1(0, state, function(state){return caml_call1(get, state);});
    function _n_(param){
     var inject = param[2], state = param[1];
     return [0, state, inject];
    }
    return map$1(0, both(state$0, inject$0), _n_);
   }
   function narrow_via_field(state_and_inject, field){
    var
     _j_ = caml_call1(Base_Field[4], field),
     _k_ = caml_call1(Base_Field[3], field);
    return function(_l_){return narrow(state_and_inject, _k_, _j_, _l_);};
   }
   function reveal_value(_i_){return _i_;}
   function conceal_value$0(_h_){return _h_;}
   var
    Conv =
      [0,
       handle,
       top_level_handle,
       perform,
       reveal_value,
       conceal_value$0,
       isolated],
    Value = [0, both],
    Computation = [0],
    compute$0 = Incr[2],
    Incr$0 = [0, compute$0],
    Map = caml_call1(Bonsai_Map0[1], [0, Value, Computation, Incr$0]);
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Cont);
   var
    _g_ = Bonsai_Proc[36][1],
    Bonsai_Cont =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       all,
       all_unit,
       Applicative_infix,
       map3,
       map4,
       map5,
       map6,
       map7,
       return$1,
       map$0,
       map2$0,
       both,
       cutoff,
       all_map,
       transpose_opt,
       state,
       state_opt,
       [0, Bonsai_Apply_action_context[1], Bonsai_Apply_action_context[2]],
       Bonsai_Proc[5],
       [0],
       toggle,
       toggle$0,
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       freeze,
       fix,
       fix2,
       scope_model,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       wrap,
       enum$0,
       with_model_resetter,
       with_model_resetter$0,
       peek,
       Clock,
       [0,
        on_change,
        on_change$0,
        lifecycle,
        lifecycle$0,
        after_display,
        after_display$0,
        wait_after_display,
        [0, Bonsai_Proc[35][8][1], effect_on_change, manual_refresh]],
       Memo,
       [0, [0, _g_[1], _g_[2], _g_[3], _g_[5], _g_[6]], poll],
       [0, create$0, derived, set, set$0, lookup$0, modify],
       Incr,
       assoc,
       assoc_set,
       assoc_list,
       [0,
        on_change$1,
        on_change_print_s,
        instrument_computation,
        to_dot,
        enable_incremental_annotations,
        disable_incremental_annotation],
       [0,
        Bonsai_Path[2],
        Bonsai_Path[3],
        Bonsai_Path[4],
        Bonsai_Path[5],
        Bonsai_Path[6],
        Bonsai_Path[7],
        Bonsai_Path[8],
        Bonsai_Path[9],
        Bonsai_Path[10],
        Bonsai_Path[11],
        Bonsai_Path[12],
        Bonsai_Path[13],
        Bonsai_Path[14],
        Bonsai_Path[15],
        Bonsai_Path[16],
        Bonsai_Path[17],
        Bonsai_Path[18],
        Bonsai_Path[19],
        Bonsai_Path[20],
        Bonsai_Path[21],
        Bonsai_Path[22],
        Bonsai_Path[23],
        Bonsai_Path[24],
        Bonsai_Path[27]],
       path_id,
       path,
       arr1,
       arr2,
       Conv,
       [0,
        symbol_map$0,
        return$1,
        [0,
         map$1,
         map2$0,
         both,
         arr,
         return$2,
         cutoff$0,
         switch$0,
         sub,
         map3,
         map4,
         map5,
         map6,
         map7]],
       Map,
       [0,
        thunk,
        assoc_on,
        delay,
        [0,
         Bonsai_Var[1],
         Bonsai_Var[5],
         Bonsai_Var[2],
         Bonsai_Var[3],
         Bonsai_Var[4],
         Bonsai_Var[6]],
        [0, set_perform_on_exception]],
       [0,
        arr1_with_location,
        value_cutoff$0,
        conceal_value,
        state_for_proc2,
        state_opt_for_proc2,
        toggle_for_proc2,
        Bonsai_Proc[29],
        toggle$1,
        state_machine0_for_proc2,
        state_machine1_for_proc2,
        actor0_for_proc2,
        actor1_for_proc2,
        wrap_for_proc2,
        switch$1,
        with_model_resetter$1,
        with_model_resetter$2,
        on_change_for_proc2,
        on_change_for_proc2$0,
        lifecycle_for_proc2,
        lifecycle_for_proc2$0,
        after_display_for_proc2,
        after_display_for_proc2$0,
        manual_refresh_for_proc2,
        debug_on_change,
        debug_on_change_print_s,
        lazy,
        narrow,
        narrow_via_field]];
   runtime.caml_register_global(52, Bonsai_Cont, cst_Bonsai_Cont$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_layer2
//# unitInfo: Requires: Base__Applicative, Bonsai__Apply_action_context, Bonsai__Cont, Bonsai__Proc, Bonsai__Value, Bonsai__Var, Core, Core__Comparator, Core__List, Core__Map, Core__Option, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_layer2$0 = "Bonsai__Proc_layer2",
    cst_bonsai$0 = "bonsai",
    cst_src_proc_layer2_ml = "src/proc_layer2.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Comparator = global_data.Core__Comparator,
    Core_List = global_data.Core__List,
    Core_Map = global_data.Core__Map,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Bonsai_Var = global_data.Bonsai__Var,
    Core_Tuple = global_data.Core__Tuple,
    Core_Option = global_data.Core__Option,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Value = global_data.Bonsai__Value,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_layer2$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_layer2_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc_layer2.ml");
   var
    _H_ = [0, "action"],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module1] has been dropped because its input was not present. This happens when the [of_module1] is inactive when it receives a message.",
    _C_ = [0, [0, cst_src_proc_layer2_ml, 243, 6772, 6778]],
    _D_ = [0, [0, cst_src_proc_layer2_ml, 242, 6749, 6755]],
    _A_ = [0, [0, cst_src_proc_layer2_ml, 230, 6462, 6468]],
    _B_ = [0, [0, cst_src_proc_layer2_ml, 229, 6439, 6445]],
    _s_ = [0, [0, cst_src_proc_layer2_ml, 196, 5218, 5224]],
    _t_ = [0, [0, cst_src_proc_layer2_ml, 195, 5193, 5199]],
    _u_ = [0, [0, cst_src_proc_layer2_ml, 194, 5168, 5174]],
    _v_ = [0, [0, cst_src_proc_layer2_ml, 193, 5143, 5149]],
    _w_ = [0, [0, cst_src_proc_layer2_ml, 192, 5118, 5124]],
    _x_ = [0, [0, cst_src_proc_layer2_ml, 191, 5093, 5099]],
    _y_ = [0, [0, cst_src_proc_layer2_ml, 190, 5068, 5074]],
    _m_ = [0, [0, cst_src_proc_layer2_ml, 185, 4929, 4935]],
    _n_ = [0, [0, cst_src_proc_layer2_ml, 184, 4904, 4910]],
    _o_ = [0, [0, cst_src_proc_layer2_ml, 183, 4879, 4885]],
    _p_ = [0, [0, cst_src_proc_layer2_ml, 182, 4854, 4860]],
    _q_ = [0, [0, cst_src_proc_layer2_ml, 181, 4829, 4835]],
    _r_ = [0, [0, cst_src_proc_layer2_ml, 180, 4804, 4810]],
    _h_ = [0, [0, cst_src_proc_layer2_ml, 175, 4671, 4677]],
    _i_ = [0, [0, cst_src_proc_layer2_ml, 174, 4646, 4652]],
    _j_ = [0, [0, cst_src_proc_layer2_ml, 173, 4621, 4627]],
    _k_ = [0, [0, cst_src_proc_layer2_ml, 172, 4596, 4602]],
    _l_ = [0, [0, cst_src_proc_layer2_ml, 171, 4571, 4577]],
    _d_ = [0, [0, cst_src_proc_layer2_ml, 166, 4444, 4450]],
    _e_ = [0, [0, cst_src_proc_layer2_ml, 165, 4419, 4425]],
    _f_ = [0, [0, cst_src_proc_layer2_ml, 164, 4394, 4400]],
    _g_ = [0, [0, cst_src_proc_layer2_ml, 163, 4369, 4375]],
    _a_ = [0, [0, cst_src_proc_layer2_ml, 158, 4248, 4254]],
    _b_ = [0, [0, cst_src_proc_layer2_ml, 157, 4223, 4229]],
    _c_ = [0, [0, cst_src_proc_layer2_ml, 156, 4198, 4204]],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc_layer2 = cst_Bonsai_Proc_layer2$0;
   function return$0(a){
    var _b9_ = caml_call1(Bonsai_Value[2], a);
    return caml_call1(Bonsai_Cont[59][5], _b9_);
   }
   function map(here, v, f){
    var
     _b7_ = caml_call1(Bonsai_Cont[59][4], v),
     _b8_ = caml_call3(Bonsai_Proc[13][2][4], here, _b7_, f);
    return caml_call1(Bonsai_Cont[59][5], _b8_);
   }
   function transpose_opt(opt){
    var _b4_ = Core_Option[58];
    function _b5_(eta){return map(0, eta, _b4_);}
    var _b6_ = return$0(0);
    return caml_call3(Core_Option[41], opt, _b6_, _b5_);
   }
   function cutoff(a, equal){
    var
     _b2_ = caml_call1(Bonsai_Cont[59][4], a),
     _b3_ = caml_call3(Bonsai_Value[22], 0, _b2_, equal);
    return caml_call1(Bonsai_Cont[59][5], _b3_);
   }
   var
    map2 = Bonsai_Cont[16],
    map3 = Bonsai_Cont[9],
    map4 = Bonsai_Cont[10],
    map5 = Bonsai_Cont[11],
    map6 = Bonsai_Cont[12],
    map7 = Bonsai_Cont[13],
    map$0 = [0, -198771759, function(a, f){return map(0, a, f);}],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map$0]),
    return$1 = include[1],
    map$1 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3$0 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function both(a, b){
    var
     _bZ_ = caml_call1(Bonsai_Cont[59][4], b),
     _b0_ = caml_call1(Bonsai_Cont[59][4], a),
     _b1_ = caml_call2(Bonsai_Value[4], _b0_, _bZ_);
    return caml_call1(Bonsai_Cont[59][5], _b1_);
   }
   function symbol_map$0(a, f){
    var
     _bX_ = caml_call1(Bonsai_Cont[59][4], a),
     _bY_ = caml_call2(Bonsai_Value[3], _bX_, f);
    return caml_call1(Bonsai_Cont[59][5], _bY_);
   }
   function symbol$2(f, a){
    function _bT_(a, f){return caml_call1(f, a);}
    var
     _bU_ = caml_call1(Bonsai_Cont[59][4], f),
     _bV_ = caml_call1(Bonsai_Cont[59][4], a),
     _bW_ = caml_call3(Bonsai_Value[10], _bV_, _bU_, _bT_);
    return caml_call1(Bonsai_Cont[59][5], _bW_);
   }
   function symbol$3(f, a){
    function _bQ_(a){return caml_call1(f, a);}
    var
     _bR_ = caml_call1(Bonsai_Cont[59][4], a),
     _bS_ = caml_call2(Bonsai_Value[3], _bR_, _bQ_);
    return caml_call1(Bonsai_Cont[59][5], _bS_);
   }
   function map$2(here, v, f){
    var
     _bO_ = caml_call1(Bonsai_Cont[59][4], v),
     _bP_ = caml_call3(Bonsai_Proc[13][2][4], here, _bO_, f);
    return caml_call1(Bonsai_Cont[59][5], _bP_);
   }
   function cutoff$0(a, equal){
    var
     _bM_ = caml_call1(Bonsai_Cont[59][4], a),
     _bN_ = caml_call2(Bonsai_Proc[13][2][8], _bM_, equal);
    return caml_call1(Bonsai_Cont[59][5], _bN_);
   }
   function both$0(a, b){
    var
     _bJ_ = caml_call1(Bonsai_Cont[59][4], b),
     _bK_ = caml_call1(Bonsai_Cont[59][4], a),
     _bL_ = caml_call2(Bonsai_Value[4], _bK_, _bJ_);
    return caml_call1(Bonsai_Cont[59][5], _bL_);
   }
   function comp_return(v, graph){
    var
     _bH_ = caml_call1(Bonsai_Cont[59][4], v),
     _bI_ = caml_call1(Bonsai_Proc[1], _bH_);
    return caml_call3(Bonsai_Cont[59][3], 0, graph, _bI_);
   }
   function subcomputation(here, a, graph){
    function _bF_(graph){return caml_call1(a, graph);}
    var _bG_ = caml_call2(Bonsai_Cont[59][1], _bF_, graph);
    return caml_call3(Bonsai_Cont[59][3], here, graph, _bG_);
   }
   function sub(here, a, f, graph){
    return caml_call2(f, subcomputation(here, a, graph), graph);
   }
   function arr(here, v, f, graph){
    return caml_call4(Bonsai_Cont[63][1], here, graph, v, f);
   }
   function switch$0(param, match, branches, with$0, graph){
    return caml_call4(Bonsai_Cont[63][14], match, branches, with$0, graph);
   }
   function return$2(a, graph){return caml_call1(return$1, a);}
   function map2$1(a, b, f, graph){
    var a$0 = caml_call1(a, graph), b$0 = caml_call1(b, graph);
    return caml_call4(Bonsai_Cont[58], graph, a$0, b$0, f);
   }
   var
    map$3 =
      [0,
       -198771759,
       function(a, f, graph){
        var _bE_ = caml_call1(a, graph);
        return caml_call3(Bonsai_Cont[57], graph, _bE_, f);
       }],
    include$0 = caml_call1(Base_Applicative[13], [0, return$2, map2$1, map$3]),
    computation_return = include$0[1],
    map$4 = include$0[2],
    both$1 = include$0[3],
    symbol$4 = include$0[4],
    symbol$5 = include$0[5],
    symbol$6 = include$0[6],
    symbol_map$1 = include$0[7],
    apply$0 = include$0[8],
    map2$2 = include$0[9],
    Applicative_infix$0 = include$0[13];
   function map3$1(t1, t2, t3, f){
    function _bw_(t1){
     function _by_(t2){
      function _bA_(t3){
       var _bC_ = caml_call4(map3, t1, t2, t3, f);
       return function(_bD_){return comp_return(_bC_, _bD_);};
      }
      return function(_bB_){return sub(_a_, t3, _bA_, _bB_);};
     }
     return function(_bz_){return sub(_b_, t2, _by_, _bz_);};
    }
    return function(_bx_){return sub(_c_, t1, _bw_, _bx_);};
   }
   function map4$0(t1, t2, t3, t4, f){
    function _bm_(t1){
     function _bo_(t2){
      function _bq_(t3){
       function _bs_(t4){
        var _bu_ = caml_call5(map4, t1, t2, t3, t4, f);
        return function(_bv_){return comp_return(_bu_, _bv_);};
       }
       return function(_bt_){return sub(_d_, t4, _bs_, _bt_);};
      }
      return function(_br_){return sub(_e_, t3, _bq_, _br_);};
     }
     return function(_bp_){return sub(_f_, t2, _bo_, _bp_);};
    }
    return function(_bn_){return sub(_g_, t1, _bm_, _bn_);};
   }
   function map5$0(t1, t2, t3, t4, t5, f){
    function _ba_(t1){
     function _bc_(t2){
      function _be_(t3){
       function _bg_(t4){
        function _bi_(t5){
         var _bk_ = caml_call6(map5, t1, t2, t3, t4, t5, f);
         return function(_bl_){return comp_return(_bk_, _bl_);};
        }
        return function(_bj_){return sub(_h_, t5, _bi_, _bj_);};
       }
       return function(_bh_){return sub(_i_, t4, _bg_, _bh_);};
      }
      return function(_bf_){return sub(_j_, t3, _be_, _bf_);};
     }
     return function(_bd_){return sub(_k_, t2, _bc_, _bd_);};
    }
    return function(_bb_){return sub(_l_, t1, _ba_, _bb_);};
   }
   function map6$0(t1, t2, t3, t4, t5, t6, f){
    function _aY_(t1){
     function _a0_(t2){
      function _a2_(t3){
       function _a4_(t4){
        function _a6_(t5){
         function _a8_(t6){
          var _a__ = caml_call7(map6, t1, t2, t3, t4, t5, t6, f);
          return function(_a$_){return comp_return(_a__, _a$_);};
         }
         return function(_a9_){return sub(_m_, t6, _a8_, _a9_);};
        }
        return function(_a7_){return sub(_n_, t5, _a6_, _a7_);};
       }
       return function(_a5_){return sub(_o_, t4, _a4_, _a5_);};
      }
      return function(_a3_){return sub(_p_, t3, _a2_, _a3_);};
     }
     return function(_a1_){return sub(_q_, t2, _a0_, _a1_);};
    }
    return function(_aZ_){return sub(_r_, t1, _aY_, _aZ_);};
   }
   function map7$0(t1, t2, t3, t4, t5, t6, t7, f){
    function _aI_(t1){
     function _aK_(t2){
      function _aM_(t3){
       function _aO_(t4){
        function _aQ_(t5){
         function _aS_(t6){
          function _aU_(t7){
           var _aW_ = caml_call8(map7, t1, t2, t3, t4, t5, t6, t7, f);
           return function(_aX_){return comp_return(_aW_, _aX_);};
          }
          return function(_aV_){return sub(_s_, t7, _aU_, _aV_);};
         }
         return function(_aT_){return sub(_t_, t6, _aS_, _aT_);};
        }
        return function(_aR_){return sub(_u_, t5, _aQ_, _aR_);};
       }
       return function(_aP_){return sub(_v_, t4, _aO_, _aP_);};
      }
      return function(_aN_){return sub(_w_, t3, _aM_, _aN_);};
     }
     return function(_aL_){return sub(_x_, t2, _aK_, _aL_);};
    }
    return function(_aJ_){return sub(_y_, t1, _aI_, _aJ_);};
   }
   function _z_(param){
    if(! param) return caml_call1(computation_return, 0);
    var _aC_ = param[2], t1 = param[1];
    if(! _aC_) return caml_call2(map$4, t1, function(a1){return [0, a1, 0];});
    var _aD_ = _aC_[2], t2 = _aC_[1];
    if(! _aD_)
     return caml_call3
             (map2$2, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _aE_ = _aD_[2], t3 = _aD_[1];
    if(! _aE_)
     return map3$1
             (t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _aF_ = _aE_[2], t4 = _aE_[1];
    if(! _aF_)
     return map4$0
             (t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _aG_ = _aF_[2], t5 = _aF_[1];
    if(! _aG_)
     return map5$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _aH_ = _aG_[2], t6 = _aG_[1];
    if(! _aH_)
     return map6$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _aH_[1];
    if(! _aH_[2])
     return map7$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _aH_[2],
     left =
       map7$0
        (t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = _z_(rest);
    return caml_call3
            (map2$2,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function all$0(xs){
    var _az_ = _z_(xs), _aA_ = 0;
    return function(_aB_){return subcomputation(_aA_, _az_, _aB_);};
   }
   function reduce_balanced(xs, f){
    if(! xs) return 0;
    function _aq_(a, b){
     function _av_(a){
      function _ax_(b){return caml_call2(f, a, b);}
      return function(_ay_){return sub(_A_, b, _ax_, _ay_);};
     }
     return function(_aw_){return sub(_B_, a, _av_, _aw_);};
    }
    var
     _ar_ = caml_call2(Core_List[110], xs, _aq_),
     _as_ = caml_call4(Core_Option[40], 0, 0, 0, _ar_),
     _at_ = 0;
    return [0, function(_au_){return subcomputation(_at_, _as_, _au_);}];
   }
   function fold_right(xs, f, init){
    function _ag_(_ap_){return comp_return(init, _ap_);}
    function _ah_(a, b){
     function _al_(a){
      function _an_(b){return caml_call2(f, a, b);}
      return function(_ao_){return sub(_C_, b, _an_, _ao_);};
     }
     return function(_am_){return sub(_D_, a, _al_, _am_);};
    }
    var _ai_ = caml_call3(Core_List[101], xs, _ah_, _ag_), _aj_ = 0;
    return function(_ak_){return subcomputation(_aj_, _ai_, _ak_);};
   }
   function all_unit$0(xs){
    function _ac_(param){return 0;}
    var _ad_ = caml_call2(map$4, all$0(xs), _ac_), _ae_ = 0;
    return function(_af_){return subcomputation(_ae_, _ad_, _af_);};
   }
   function all_map(map_of_computations){
    var
     _X_ = caml_call1(Core_Map[3], map_of_computations),
     _Y_ = caml_call1(Core_Map[8], _X_);
    function _Z_(param){
     var data = param[2], key = param[1];
     return caml_call2(map$4, data, caml_call1(Core_Tuple[1][6], key));
    }
    var
     ___ = caml_call2(Core_Map[81], 0, map_of_computations),
     _$_ = caml_call2(map$4, all$0(caml_call2(Core_List[51], ___, _Z_)), _Y_),
     _aa_ = 0;
    return function(_ab_){return subcomputation(_aa_, _$_, _ab_);};
   }
   var
    symbol$7 = Applicative_infix$0[1],
    symbol$8 = Applicative_infix$0[2],
    symbol$9 = Applicative_infix$0[3],
    symbol_map$2 = Applicative_infix$0[4],
    create = Bonsai_Var[1],
    update = Bonsai_Var[2],
    set = Bonsai_Var[3],
    get = Bonsai_Var[4],
    incr_var = Bonsai_Var[6];
   function value(var$0){
    var _W_ = caml_call1(Bonsai_Var[5], var$0);
    return caml_call1(Bonsai_Cont[63][3], _W_);
   }
   var
    For_open = [0],
    For_proc2 = Bonsai_Cont[63],
    Expert = Bonsai_Cont[62],
    path = Bonsai_Cont[56],
    path_id = Bonsai_Cont[55],
    Debug = Bonsai_Cont[53],
    assoc_list = Bonsai_Cont[52],
    assoc_set = Bonsai_Cont[51],
    assoc = Bonsai_Cont[50],
    Incr = Bonsai_Cont[49],
    Dynamic_scope = Bonsai_Cont[48],
    Effect_throttling = Bonsai_Cont[47],
    Memo = Bonsai_Cont[46],
    Edge = Bonsai_Cont[45],
    Clock = Bonsai_Cont[44],
    peek = Bonsai_Cont[43],
    previous_value = Bonsai_Cont[38],
    most_recent_value_satisfying = Bonsai_Cont[37],
    most_recent_some = Bonsai_Cont[36],
    scope_model = Bonsai_Cont[35],
    fix2 = Bonsai_Cont[34],
    fix = Bonsai_Cont[33],
    freeze = Bonsai_Cont[32],
    Computation_status = Bonsai_Cont[24],
    both$2 = Bonsai_Cont[17],
    map$5 = Bonsai_Cont[15],
    include$1 = Bonsai_Cont[63],
    state = include$1[4],
    state_opt = include$1[5],
    toggle = include$1[6],
    Toggle = include$1[7],
    toggle$0 = include$1[8],
    state_machine0 = include$1[9],
    state_machine1 = include$1[10],
    actor0 = include$1[11],
    actor1 = include$1[12],
    wrap = include$1[13],
    with_model_resetter = include$1[15],
    with_model_resetter$0 = include$1[16],
    debug_on_change = include$1[24],
    debug_on_change_print_s = include$1[25],
    lazy = include$1[26],
    narrow = include$1[27],
    narrow_via_field = include$1[28];
   function read(v, graph){return v;}
   function const$0(a, graph){return caml_call1(Bonsai_Cont[60][2], a);}
   function pure(f, i, graph){return caml_call2(map$5, i, f);}
   function scope_model$0(cmp, on, for$0){
    return caml_call3(scope_model, cmp, on, for$0);
   }
   var
    approx_now = Clock[1],
    now = Clock[2],
    Before_or_after = Clock[3],
    at = Clock[4],
    get_current_time = Clock[6],
    sleep = Clock[7],
    until = Clock[8],
    _E_ = Clock[5];
   function every
   (when_to_start_next_effect,
    trigger_on_activate,
    time_span,
    callback,
    graph){
    caml_call5
     (_E_,
      when_to_start_next_effect,
      trigger_on_activate,
      time_span,
      callback,
      graph);
    return caml_call1(Bonsai_Cont[60][2], 0);
   }
   var
    value_cutoff = Incr[1],
    compute = Incr[2],
    to_value = Incr[3],
    _F_ = Incr[4];
   function with_clock(f){return caml_call1(_F_, f);}
   var
    Incr$0 = [0, value_cutoff, compute, to_value, with_clock],
    wait_after_display = Edge[7],
    Poll = Edge[8],
    on_change = For_proc2[17],
    on_change$0 = For_proc2[18],
    lifecycle = For_proc2[19],
    lifecycle$0 = For_proc2[20],
    after_display = For_proc2[21],
    after_display$0 = For_proc2[22],
    Starting = Poll[1],
    effect_on_change = Poll[2],
    manual_refresh = For_proc2[23],
    Poll$0 = [0, Starting, effect_on_change, manual_refresh],
    instrument_computation = Debug[3],
    to_dot = Debug[4],
    enable_incremental_annotations = Debug[5],
    disable_incremental_annotation = Debug[6],
    assoc_on = Expert[2],
    _G_ = Expert[1];
   function thunk(f, graph){return caml_call2(_G_, f, graph);}
   function of_module1
   (sexp_of_model, component, equal, default_model, input, graph){
    function _Q_(ctx, input, model, action){
     if(input){
      var input$0 = input[1];
      return caml_call4(component[6], ctx, input$0, model, action);
     }
     var
      _U_ = [0, [1, [0, _H_, [0, caml_call1(component[4][1], action), 0]]], 0],
      _V_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
          _U_]];
     caml_call2(Core[257], 0, _V_);
     return model;
    }
    var
     match =
       caml_call8
        (Bonsai_Cont[29],
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _Q_,
         input,
         graph),
     inject = match[2],
     model = match[1];
    function _R_(param){
     var
      match = param[2],
      input = match[2],
      inject = match[1],
      model = param[1];
     return caml_call3(component[7], inject, input, model);
    }
    var
     _S_ = caml_call2(Bonsai_Cont[60][3][3], inject, input),
     _T_ = caml_call2(Bonsai_Cont[60][3][3], model, _S_);
    return caml_call3(Bonsai_Cont[60][3][1], 0, _T_, _R_);
   }
   function of_module0(sexp_of_model, equal, component, default_model, graph){
    function _N_(ctx){return caml_call2(component[6], ctx, 0);}
    var
     match =
       caml_call7
        (Bonsai_Cont[28],
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _N_,
         graph),
     inject = match[2],
     model = match[1];
    function _O_(param){
     var inject = param[2], model = param[1];
     return caml_call3(component[7], inject, 0, model);
    }
    var _P_ = caml_call2(Bonsai_Cont[60][3][3], model, inject);
    return caml_call3(Bonsai_Cont[60][3][1], 0, _P_, _O_);
   }
   function of_module2(sexp_of_model, c, equal, default_model, i1, i2){
    var _L_ = caml_call2(both$2, i1, i2);
    return function(_M_){
     return of_module1(sexp_of_model, c, equal, default_model, _L_, _M_);};
   }
   function enum$0(E, match, with$0, graph){
    var
     all = E[2],
     include = caml_call1(Core_Comparator[7], [0, E[1], E[4]]),
     comparator = include[1],
     forward_index = caml_call1(Core_List[30], all);
    function _I_(i, k){return [0, k, i];}
    var
     _J_ = caml_call2(Core_List[41], all, _I_),
     reverse_index = caml_call2(Core_Map[8], [0, comparator], _J_),
     _K_ = caml_call1(Core_Map[45], reverse_index),
     branches = forward_index.length - 1,
     match$0 = caml_call2(Bonsai_Cont[60][1], match, _K_);
    function with$1(i){
     return caml_call1
             (with$0, runtime.caml_check_bound(forward_index, i)[1 + i]);
    }
    return caml_call4(For_proc2[14], match$0, branches, with$1, graph);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_layer2);
   var
    Bonsai_Proc_layer2 =
      [0,
       [0],
       [0],
       [0,
        return$1,
        map$1,
        both,
        symbol,
        symbol$0,
        symbol$1,
        symbol_map,
        apply,
        map2$0,
        all,
        all_unit,
        Applicative_infix,
        map3$0,
        map4,
        map5,
        map6,
        map7,
        cutoff,
        transpose_opt],
       [0,
        computation_return,
        map$4,
        both$1,
        symbol$4,
        symbol$5,
        symbol$6,
        symbol_map$1,
        apply$0,
        map2$2,
        all$0,
        all_unit$0,
        Applicative_infix$0,
        all_map,
        reduce_balanced,
        fold_right,
        [0,
         computation_return,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol_map$2,
         [0,
          computation_return,
          map$4,
          both$1,
          map3$1,
          map4$0,
          map5$0,
          map6$0,
          map7$0]],
        map3$1,
        map4$0,
        map5$0,
        map6$0,
        map7$0],
       For_open,
       [0, create, update, set, get, value, incr_var],
       read,
       const$0,
       path_id,
       pure,
       Computation_status,
       state,
       state_opt,
       toggle,
       Toggle,
       toggle$0,
       [0, Bonsai_Apply_action_context[1], Bonsai_Apply_action_context[2]],
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       narrow,
       narrow_via_field,
       of_module0,
       of_module1,
       of_module2,
       freeze,
       lazy,
       fix,
       fix2,
       scope_model$0,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc,
       assoc_set,
       assoc_list,
       enum$0,
       wrap,
       with_model_resetter,
       with_model_resetter$0,
       peek,
       sub,
       [0,
        approx_now,
        now,
        Before_or_after,
        at,
        every,
        get_current_time,
        sleep,
        until],
       [0,
        on_change,
        on_change$0,
        lifecycle,
        lifecycle$0,
        after_display,
        after_display$0,
        wait_after_display,
        Poll$0],
       Memo,
       Effect_throttling,
       Dynamic_scope,
       Incr$0,
       [0,
        comp_return,
        symbol_map$0,
        symbol$2,
        symbol$3,
        [0,
         sub,
         cutoff$0,
         switch$0,
         map$2,
         map2,
         comp_return,
         both$0,
         arr,
         map3,
         map4,
         map5,
         map6,
         map7]],
       [0, thunk, assoc_on],
       [0,
        debug_on_change,
        debug_on_change_print_s,
        instrument_computation,
        to_dot,
        enable_incremental_annotations,
        disable_incremental_annotation],
       path,
       Bonsai_Cont[61]];
   runtime.caml_register_global
    (55, Bonsai_Proc_layer2, cst_Bonsai_Proc_layer2$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_intf = "Bonsai__Proc_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/proc_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "proc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_intf);
   var Bonsai_Proc_intf = [0];
   runtime.caml_register_global(11, Bonsai_Proc_intf, cst_Bonsai_Proc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Linter
//# unitInfo: Requires: Bonsai__Skeleton, CamlinternalOO, Core__List, Core__Option, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Linter$0 = "Bonsai__Linter",
    cst_bonsai$0 = "bonsai",
    cst_bool = "bool",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_id = "id",
    cst_lazy = "lazy_",
    cst_list = "list",
    cst_node_path = "node_path",
    cst_option = "option",
    cst_source_code_position = "source_code_position",
    cst_value = "value",
    cst_value_kind = "value_kind";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    _a_ =
      [0,
       cst_value_kind,
       cst_value,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _b_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id,
       cst_node_path,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value,
       cst_source_code_position],
    shared =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id,
       cst_lazy,
       cst_list,
       cst_node_path,
       cst_option,
       cst_source_code_position,
       cst_value,
       cst_value_kind],
    Core_List = global_data.Core__List,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Source_code_position = global_data.Core__Source_code_position,
    CamlinternalOO = global_data.CamlinternalOO,
    Core_Option = global_data.Core__Option,
    Core_String = global_data.Core__String,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Linter$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/linter.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "linter.ml");
   var
    _q_ = [0, "_none_", 0, 0, 0],
    cst_state_machine1_can_be_opti =
      "state_machine1 can be optimized to a state_machine0",
    cst_unfolded_constant = "unfolded constant",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Linter = cst_Bonsai_Linter$0;
   function to_string(param){
    var
     here = param[2],
     message = param[1],
     _u_ = [0, caml_call1(Ppx_string_runtime[1][2], cst), [0, message, 0]],
     _v_ = caml_call1(Core_Source_code_position[4], here),
     _w_ = [0, caml_call1(Ppx_string_runtime[1][3], _v_), _u_];
    return caml_call1(Ppx_string_runtime[1][4], _w_);
   }
   function relative_to(base, t){
    if(! caml_call2(Core_String[145], base[1], t[2][1])) return t;
    var _t_ = t[2];
    return [0, t[1], [0, _t_[1], t[2][2] - base[2] | 0, _t_[3], _t_[4]]];
   }
   function value_is_constant(param){
    var param$0 = param;
    for(;;){
     var kind = param$0[2];
     if(typeof kind === "number") return 1 < kind ? 0 : 1;
     if(0 !== kind[0]){
      var inputs = kind[1];
      return caml_call2(Core_List[24], inputs, value_is_constant);
     }
     var t = kind[1], param$0 = t;
    }
   }
   var
    _c_ = caml_call1(CamlinternalOO[16], _b_),
    _d_ = caml_call2(CamlinternalOO[8], _c_, _a_)[2],
    _e_ =
      caml_call6
       (CamlinternalOO[18], _c_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    _f_ = _e_[1],
    _g_ = _e_[11];
   function _h_(self_1, value, param){
    var
     here = param[2],
     warnings = param[1],
     here$0 = caml_call2(Core_Option[39], value[3], here),
     match = value[2];
    if(typeof match === "number")
     var is_unfolded_constant = 0;
    else if(0 === match[0])
     var t = match[1], is_unfolded_constant = value_is_constant(t);
    else
     var
      inputs = match[1],
      is_unfolded_constant =
        caml_call2(Core_List[24], inputs, value_is_constant);
    return is_unfolded_constant
            ? [0, [0, [0, cst_unfolded_constant, here$0], warnings], here$0]
            : caml_call2
              (caml_call1(_g_, self_1), value, [0, warnings, here$0]);
   }
   caml_call3(CamlinternalOO[10], _c_, _d_, _h_);
   caml_call1(CamlinternalOO[17], _c_);
   var _i_ = caml_call2(CamlinternalOO[24], 0, _c_);
   caml_call1(_f_, _i_);
   var
    unfolded_constants_linter = caml_call3(CamlinternalOO[26], 0, _i_, _c_),
    _j_ = caml_call1(CamlinternalOO[16], _b_),
    _k_ = caml_call2(CamlinternalOO[8], _j_, _a_)[10],
    _l_ =
      caml_call6
       (CamlinternalOO[18], _j_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    _m_ = _l_[1],
    _n_ = _l_[3];
   function _o_(self_2, computation, param){
    var
     here = param[2],
     warnings = param[1],
     here$0 = caml_call2(Core_Option[39], computation[3], here),
     match = computation[2];
    a:
    {
     if(typeof match !== "number" && 2 === match[0]){
      var
       input = match[1],
       _s_ =
         value_is_constant(input)
          ? [0, [0, cst_state_machine1_can_be_opti, here$0], warnings]
          : warnings,
       warnings$0 = _s_;
      break a;
     }
     var warnings$0 = warnings;
    }
    return caml_call2
            (caml_call1(_n_, self_2), computation, [0, warnings$0, here$0]);
   }
   caml_call3(CamlinternalOO[10], _j_, _k_, _o_);
   caml_call1(CamlinternalOO[17], _j_);
   var _p_ = caml_call2(CamlinternalOO[24], 0, _j_);
   caml_call1(_m_, _p_);
   var
    state_machine1_to_state_machin =
      caml_call3(CamlinternalOO[26], 0, _p_, _j_);
   function list_warnings(computation){
    var
     computation$0 = caml_call1(Bonsai_Skeleton[3][3], computation),
     default_location = caml_call1(Core_Source_code_position[5], _q_),
     linters =
       [0, unfolded_constants_linter, [0, state_machine1_to_state_machin, 0]];
    function _r_(warnings, linter){
     var
      warnings$0 =
        caml_call3
          (runtime.caml_get_public_method(linter, 381242055, 2),
           linter,
           computation$0,
           [0, warnings, default_location])
         [1];
     return warnings$0;
    }
    return caml_call3(Core_List[20], linters, 0, _r_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Linter);
   var Bonsai_Linter = [0, [0, to_string, relative_to], list_warnings];
   runtime.caml_register_global(25, Bonsai_Linter, cst_Bonsai_Linter$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api_intf = "Bonsai__Legacy_api_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/legacy_api_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "legacy_api_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api_intf);
   var Bonsai_Legacy_api_intf = [0];
   runtime.caml_register_global
    (11, Bonsai_Legacy_api_intf, cst_Bonsai_Legacy_api_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api
//# unitInfo: Requires: Bonsai__Cont, Bonsai__Proc_layer2, Bonsai__Value, Core, Core__Sexp, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api$0 = "Bonsai__Legacy_api",
    cst_action = "action",
    cst_bonsai$0 = "bonsai",
    cst_src_legacy_api_ml = "src/legacy_api.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Proc_layer2 = global_data.Bonsai__Proc_layer2,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_legacy_api_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "legacy_api.ml");
   var
    _s_ = [0, cst_action],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module] has been dropped because its input was not present. This happens when the [of_module] is inactive when it receives a message.",
    cst_src_legacy_api_ml_181_16 = "src/legacy_api.ml:181:16",
    _t_ = [0, [0, cst_src_legacy_api_ml, 163, 3850, 3854]],
    _q_ = [0, [0, cst_src_legacy_api_ml, 140, 3380, 3384]],
    _r_ = [0, [0, cst_src_legacy_api_ml, 138, 3312, 3316]],
    _o_ = [0, [0, cst_src_legacy_api_ml, 133, 3176, 3180]],
    _p_ = [0, [0, cst_src_legacy_api_ml, 131, 3105, 3109]],
    _m_ = [0, [0, cst_src_legacy_api_ml, 126, 2995, 2999]],
    _n_ = [0, [0, cst_src_legacy_api_ml, 125, 2968, 2972]],
    _l_ = [0, [0, cst_src_legacy_api_ml, 120, 2879, 2883]],
    _k_ = [0, [0, cst_src_legacy_api_ml, 115, 2787, 2791]],
    _i_ = [0, [0, cst_src_legacy_api_ml, 110, 2688, 2692]],
    _j_ = [0, [0, cst_src_legacy_api_ml, 109, 2659, 2663]],
    _h_ = [0, [0, cst_src_legacy_api_ml, 103, 2530, 2534]],
    _g_ = [0, [0, cst_src_legacy_api_ml, 97, 2404, 2408]],
    _d_ = [0, cst_src_legacy_api_ml, 70, 2],
    _e_ = [0, cst_src_legacy_api_ml, 70, 1697, 1699],
    _f_ = [0, [0, cst_src_legacy_api_ml, 70, 1697, 1699]],
    _b_ = [0, [0, cst_src_legacy_api_ml, 57, 1374, 1376]],
    _c_ = [0, [0, cst_src_legacy_api_ml, 56, 1353, 1355]],
    _a_ = [0, cst_action],
    cst_An_action_sent_to_a_state_ =
      "An action sent to a [state_machine1] has been dropped because its input was not present. This happens when the [state_machine1] is inactive when it receives a message.",
    cst_src_legacy_api_ml_45_12 = "src/legacy_api.ml:45:12",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Legacy_api = cst_Bonsai_Legacy_api$0;
   function const$0(x, param){return caml_call1(Bonsai_Proc_layer2[8], x);}
   var input = Bonsai_Proc_layer2[7];
   function pure(f, i){
    var _a9_ = caml_call2(Bonsai_Proc_layer2[3][2], i, f);
    return caml_call1(Bonsai_Proc_layer2[7], _a9_);
   }
   function compose(a, b, i){
    var _a8_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], 0, _a8_, b);
   }
   function map(a, f, i){
    function _a5_(x){
     var _a7_ = caml_call2(Bonsai_Proc_layer2[3][2], x, f);
     return caml_call1(Bonsai_Proc_layer2[7], _a7_);
    }
    var _a6_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], 0, _a6_, _a5_);
   }
   function map_input(a, f, i){
    return caml_call1(a, caml_call2(Bonsai_Proc_layer2[3][2], i, f));
   }
   var of_module = Bonsai_Proc_layer2[25];
   function state_machine
   (sexp_of_action,
    sexp_of_model,
    equal,
    here,
    default_model,
    apply_action,
    input){
    function _a1_(context, input, model, action){
     if(input){
      var input$0 = input[1];
      return caml_call4(apply_action, context, input$0, model, action);
     }
     var
      action$0 = caml_call1(sexp_of_action, action),
      _a2_ =
        [0, [1, [0, _a_, [0, caml_call1(Core_Sexp[93], action$0), 0]]], 0],
      _a3_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_state_),
         _a2_],
      _a4_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_legacy_api_ml_45_12),
          _a3_]];
     caml_call2(Core[257], 0, _a4_);
     return model;
    }
    return caml_call7
            (Bonsai_Proc_layer2[19],
             [0, sexp_of_action],
             0,
             sexp_of_model,
             [0, equal],
             default_model,
             _a1_,
             input);
   }
   function both(a, b, i){
    function _aW_(a){
     function _aY_(b){
      var _a0_ = caml_call2(Bonsai_Proc_layer2[3][3], a, b);
      return caml_call1(Bonsai_Proc_layer2[50][1], _a0_);
     }
     var _aZ_ = caml_call1(b, i);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _b_, _aZ_, _aY_);
    }
    var _aX_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _c_, _aX_, _aW_);
   }
   function enum$0(m, which, handle, input){
    var match = caml_call2(Bonsai_Proc_layer2[3][2], input, which);
    function with$0(key){return caml_call2(handle, key, input);}
    return caml_call3(Bonsai_Proc_layer2[38], m, match, with$0);
   }
   function if$0(choose, then, else$0, input){
    var cond = caml_call2(Bonsai_Proc_layer2[3][2], input, choose);
    function _aQ_(pattern_syntax_003){
     function _aS_(param){
      if(0 === param) return caml_call1(then, input);
      if(1 === param) return caml_call1(else$0, input);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     }
     var _aT_ = 2;
     function _aU_(param){return param ? 0 : 1;}
     var
      _aV_ =
        caml_call3(Bonsai_Proc_layer2[50][5][4], 0, pattern_syntax_003, _aU_);
     return caml_call4(Bonsai_Proc_layer2[50][5][3], _e_, _aV_, _aT_, _aS_);
    }
    var _aR_ = caml_call1(Bonsai_Proc_layer2[50][5][6], cond);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _f_, _aR_, _aQ_);
   }
   function assoc_input(comparator, f, input){
    function _aP_(param){return f;}
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input, _aP_);
   }
   function associ_input(comparator, f, input){
    function _aO_(key, data){
     return caml_call1(f, caml_call2(Bonsai_Proc_layer2[3][3], key, data));
    }
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input, _aO_);
   }
   function associ_input_with_extra(comparator, f, input){
    function _aJ_(param){
     var pattern_syntax_004 = param[2];
     return pattern_syntax_004;
    }
    var extra = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, input, _aJ_);
    function _aK_(param){
     var pattern_syntax_005 = param[1];
     return pattern_syntax_005;
    }
    var input$0 = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, input, _aK_);
    function _aL_(key, data){
     var
      _aM_ = caml_call2(Bonsai_Proc_layer2[50][4], Core_Tuple[2][5], key),
      _aN_ = caml_call2(Bonsai_Proc_layer2[50][3], _aM_, data);
     return caml_call1(f, caml_call2(Bonsai_Proc_layer2[50][3], _aN_, extra));
    }
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input$0, _aL_);
   }
   var Map = [0, assoc_input, associ_input, associ_input_with_extra];
   function arr(f){return function(_aI_){return pure(f, _aI_);};}
   function symbol(a, f){return function(_aH_){return map(a, f, _aH_);};}
   function symbol$0(a, f){
    return function(_aG_){return map_input(a, f, _aG_);};
   }
   function first(f, i){
    function _aB_(param){
     var pattern_syntax_006 = param[1];
     return pattern_syntax_006;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aB_);
    function _aC_(param){
     var pattern_syntax_007 = param[2];
     return pattern_syntax_007;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aC_);
    function _aD_(out){
     var _aF_ = caml_call2(Bonsai_Proc_layer2[3][3], out, snd);
     return caml_call1(Bonsai_Proc_layer2[50][1], _aF_);
    }
    var _aE_ = caml_call1(f, fst);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _g_, _aE_, _aD_);
   }
   function second(f, i){
    function _aw_(param){
     var pattern_syntax_009 = param[1];
     return pattern_syntax_009;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aw_);
    function _ax_(param){
     var pattern_syntax_010 = param[2];
     return pattern_syntax_010;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _ax_);
    function _ay_(out){
     var _aA_ = caml_call2(Bonsai_Proc_layer2[3][3], fst, out);
     return caml_call1(Bonsai_Proc_layer2[50][1], _aA_);
    }
    var _az_ = caml_call1(f, snd);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _h_, _az_, _ay_);
   }
   function symbol$1(f1, f2, i){
    function _ap_(param){
     var pattern_syntax_012 = param[1];
     return pattern_syntax_012;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _ap_);
    function _aq_(param){
     var pattern_syntax_013 = param[2];
     return pattern_syntax_013;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aq_);
    function _ar_(out1){
     function _at_(out2){
      var _av_ = caml_call2(Bonsai_Proc_layer2[3][3], out1, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _av_);
     }
     var _au_ = caml_call1(f2, snd);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _i_, _au_, _at_);
    }
    var _as_ = caml_call1(f1, fst);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _j_, _as_, _ar_);
   }
   function extend_first(f, i){
    function _am_(out){
     var _ao_ = caml_call2(Bonsai_Proc_layer2[3][3], out, i);
     return caml_call1(Bonsai_Proc_layer2[50][1], _ao_);
    }
    var _an_ = caml_call1(f, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _k_, _an_, _am_);
   }
   function extend_second(f, i){
    function _aj_(out){
     var _al_ = caml_call2(Bonsai_Proc_layer2[3][3], i, out);
     return caml_call1(Bonsai_Proc_layer2[50][1], _al_);
    }
    var _ak_ = caml_call1(f, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _l_, _ak_, _aj_);
   }
   function fanout(f1, f2, i){
    function _ae_(out1){
     function _ag_(out2){
      var _ai_ = caml_call2(Bonsai_Proc_layer2[3][3], out1, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _ai_);
     }
     var _ah_ = caml_call1(f2, i);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _m_, _ah_, _ag_);
    }
    var _af_ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _n_, _af_, _ae_);
   }
   function partial_compose_first(f1, f2, i){
    function _Z_(out1){
     function _$_(param){
      var pattern_syntax_021 = param[2];
      return pattern_syntax_021;
     }
     var out1$0 = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, out1, _$_);
     function _aa_(param){
      var pattern_syntax_022 = param[1];
      return pattern_syntax_022;
     }
     var shared = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, out1, _aa_);
     function _ab_(out2){
      var _ad_ = caml_call2(Bonsai_Proc_layer2[3][3], out1$0, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _ad_);
     }
     var
      _ac_ = caml_call1(f2, caml_call2(Bonsai_Proc_layer2[3][3], i, shared));
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _o_, _ac_, _ab_);
    }
    var ___ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _p_, ___, _Z_);
   }
   function pipe(f1, into, via, finalize, i){
    function _R_(r1){
     var
      _T_ = caml_call2(Bonsai_Proc_layer2[50][4], via, i),
      intermediate = caml_call2(Bonsai_Proc_layer2[50][3], _T_, r1);
     function _U_(r2){
      var
       _W_ = caml_call2(Bonsai_Proc_layer2[50][4], finalize, i),
       _X_ = caml_call2(Bonsai_Proc_layer2[50][3], _W_, r1),
       _Y_ = caml_call2(Bonsai_Proc_layer2[50][3], _X_, r2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _Y_);
     }
     var _V_ = caml_call1(into, intermediate);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _q_, _V_, _U_);
    }
    var _S_ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _r_, _S_, _R_);
   }
   function of_incr(i, param){
    var
     _P_ = caml_call1(Bonsai_Value[24], i),
     _Q_ = caml_call1(Bonsai_Cont[59][5], _P_);
    return caml_call1(Bonsai_Proc_layer2[7], _Q_);
   }
   function of_module$0(sexp_of_model, component, equal, default_model, input){
    function _C_(state){
     function _K_(input_and_state){
      function _M_(param){
       var pattern_syntax_027 = param[2][2];
       return pattern_syntax_027;
      }
      var inject = caml_call2(Ui_incr[78][4][6], input_and_state, _M_);
      function _N_(param){
       var pattern_syntax_028 = param[1];
       return pattern_syntax_028;
      }
      var input = caml_call2(Ui_incr[78][4][6], input_and_state, _N_);
      function _O_(param){
       var pattern_syntax_029 = param[2][1];
       return pattern_syntax_029;
      }
      var model = caml_call2(Ui_incr[78][4][6], input_and_state, _O_);
      return caml_call3(component[7], input, model, inject);
     }
     var _L_ = caml_call2(Bonsai_Cont[17], input, state);
     return caml_call2(Bonsai_Proc_layer2[49][2], _L_, _K_);
    }
    function _D_(ctx, input, model, action){
     if(input){
      var
       input$0 = input[1],
       _F_ = caml_call1(Bonsai_Proc_layer2[17][2], ctx),
       _G_ = caml_call1(Bonsai_Proc_layer2[17][1], ctx);
      return caml_call5(component[6], input$0, _G_, _F_, model, action);
     }
     var
      _H_ = [0, [1, [0, _s_, [0, caml_call1(component[4][1], action), 0]]], 0],
      _I_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
         _H_],
      _J_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_legacy_api_ml_181_16),
          _I_]];
     caml_call2(Core[257], 0, _J_);
     return model;
    }
    var
     _E_ =
       caml_call7
        (Bonsai_Proc_layer2[19],
         [0, component[4][1]],
         0,
         sexp_of_model,
         [0, equal],
         default_model,
         _D_,
         input);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _t_, _E_, _C_);
   }
   function pure$0(f){
    var _A_ = Bonsai_Proc_layer2[49][2];
    return function(_B_){return caml_call2(_A_, _B_, f);};
   }
   function map$0(a, f){
    var _y_ = pure$0(f);
    return function(_z_){return compose(a, _y_, _z_);};
   }
   function value_cutoff(cutoff){
    return map$0
            (input,
             function(input){
              function _w_(_x_){return _x_;}
              var input$0 = caml_call2(Ui_incr[12], input, _w_);
              caml_call2(Ui_incr[61], input$0, cutoff);
              return input$0;
             });
   }
   function symbol_map(a, f){return function(_v_){return map(a, f, _v_);};}
   function symbol$2(f, a){
    return function(_u_){return map_input(a, f, _u_);};
   }
   var
    Infix = [0, compose, symbol_map, symbol$2],
    symbol$3 = Infix[1],
    symbol_map$0 = Infix[2],
    symbol$4 = Infix[3];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api);
   var
    Bonsai_Legacy_api =
      [0,
       const$0,
       input,
       pure,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$0,
       if$0,
       Map,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       symbol$1,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       fanout,
       partial_compose_first,
       pipe,
       [0, of_incr, of_module$0, map$0, pure$0, value_cutoff],
       Infix,
       [0,
        const$0,
        symbol$3,
        symbol_map$0,
        symbol$4,
        [0, const$0, map, both, Infix]]];
   runtime.caml_register_global
    (44, Bonsai_Legacy_api, cst_Bonsai_Legacy_api$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import_stable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_Import_stable = [0];
   runtime.caml_register_global
    (0, Bonsai_Import_stable, "Bonsai__Import_stable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Eval_sub
//# unitInfo: Requires: Balanced_reducer, Base__Option, Bonsai__Action, Bonsai__Environment, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Bonsai__May_contain, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Trampoline, Core__List, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Eval_sub$0 = "Bonsai__Eval_sub",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Reversed_list = global_data.Reversed_list,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Balanced_reducer = global_data.Balanced_reducer,
    Core_List = global_data.Core__List,
    Base_Option = global_data.Base__Option,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Core_Option = global_data.Core__Option,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Import = global_data.Bonsai__Import,
    Bonsai_May_contain = global_data.Bonsai__May_contain,
    Bonsai_Input = global_data.Bonsai__Input,
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Eval_sub$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/eval_sub.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "eval_sub.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Eval_sub = cst_Bonsai_Eval_sub$0;
   function with_threaded_environment(param){
    var
     match = param[1],
     may_contain_lifecycle = match[8],
     may_contain_path = match[7],
     reset = match[6],
     run = match[5],
     apply_action = match[4],
     action = match[3],
     input = match[2],
     model = match[1];
    function run$0(environment, path, clock, model, inject){
     function _at_(param){
      var snapshot = param[1];
      return caml_call1(Bonsai_Trampoline[3], [0, snapshot, 0]);
     }
     var _au_ = caml_call5(run, environment, path, clock, model, inject);
     return caml_call2(Bonsai_Trampoline[5][2][2], _au_, _at_);
    }
    return [0,
            [0,
             model,
             input,
             action,
             apply_action,
             run$0,
             reset,
             may_contain_path,
             may_contain_lifecycle]];
   }
   function symbol(f, inject, b){return caml_call1(inject, caml_call1(f, b));}
   function wrap_sub_from(inject){
    var _ar_ = Bonsai_Action[4];
    return function(_as_){return symbol(_ar_, inject, _as_);};
   }
   function wrap_sub_into(inject){
    var _ap_ = Bonsai_Action[5];
    return function(_aq_){return symbol(_ap_, inject, _aq_);};
   }
   function both_use_path(a, b){if(! a && ! b) return 1; return 0;}
   function pick(thread_env, environment, maybe_env){
    if(! thread_env) return environment;
    if(! maybe_env) return environment;
    var env = maybe_env[1];
    return env;
   }
   function capture(thread_env, environment, maybe_env){
    if(! thread_env) return 0;
    if(! maybe_env) return [0, environment];
    var env = maybe_env[1];
    return [0, env];
   }
   function gather(here, info_from, info_into, via, thread_environment){
    function is_unit(x){
     return caml_call2(Bonsai_Meta[1][1][2], Bonsai_Meta[1][3][3], x);
    }
    var
     from_model = is_unit(info_from[1][3]),
     from_action =
       caml_call2(Bonsai_Action[1][10], info_from[3], Bonsai_Action[1][1]);
    function _t_(a){
     function _ao_(b){return [0, [0, a, b]];}
     return caml_call2(Base_Option[29][4][2], from_action, _ao_);
    }
    var
     can_run_from_stateless =
       caml_call2(Base_Option[29][4][2], from_model, _t_);
    if(can_run_from_stateless){
     var
      both_use_path$1 = both_use_path(info_from[7], info_into[7]),
      run$0 =
        function(environment, path, clock, model, inject){
         function _af_(param){
          var maybe_env = param[2], from = param[1];
          caml_call2(Bonsai_Snapshot[6], here, from);
          var
           from_result = caml_call1(Bonsai_Snapshot[2], from),
           environment$0 = pick(thread_environment, environment, maybe_env),
           environment$1 =
             caml_call3
              (Bonsai_Environment[2], environment$0, via, from_result);
          function _ah_(param){
           var
            maybe_env = param[2],
            into = param[1],
            result = caml_call1(Bonsai_Snapshot[2], into),
            _aj_ = Bonsai_Lifecycle[1][4],
            _ak_ = caml_call1(Bonsai_Snapshot[3], into),
            _al_ = caml_call1(Bonsai_Snapshot[3], from),
            lifecycle = caml_call3(Core_Option[54], _al_, _ak_, _aj_),
            input = caml_call1(Bonsai_Snapshot[1], into),
            _am_ = capture(thread_environment, environment$1, maybe_env),
            _an_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], input, lifecycle, result),
               _am_];
           return caml_call1(Bonsai_Trampoline[3], _an_);
          }
          var
           path$0 =
             both_use_path$1 ? caml_call2(Bonsai_Path[26], path, 1) : path,
           _ai_ =
             caml_call5
              (info_into[5], environment$1, path$0, clock, model, inject);
          return caml_call2(Bonsai_Trampoline[5][2][2], _ai_, _ah_);
         }
         var
          path$0 =
            both_use_path$1 ? caml_call2(Bonsai_Path[26], path, 0) : path,
          _ag_ =
            caml_call5
             (info_from[5],
              environment,
              path$0,
              clock,
              Bonsai_Import[12],
              Bonsai_Import[9]);
         return caml_call2(Bonsai_Trampoline[5][2][2], _ag_, _af_);
        },
      _p_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
      _q_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
     return [0,
             [0,
              info_into[1],
              info_into[2],
              info_into[3],
              info_into[4],
              run$0,
              info_into[6],
              _q_,
              _p_]];
    }
    var
     into_model = is_unit(info_into[1][3]),
     into_action =
       caml_call2(Bonsai_Action[1][10], info_into[3], Bonsai_Action[1][1]);
    function _u_(a){
     function _ae_(b){return [0, [0, a, b]];}
     return caml_call2(Base_Option[29][4][2], into_action, _ae_);
    }
    var
     can_run_into_stateless =
       caml_call2(Base_Option[29][4][2], into_model, _u_);
    if(can_run_into_stateless){
     var
      both_use_path$2 = both_use_path(info_from[7], info_into[7]),
      run$1 =
        function(environment, path, clock, model, inject){
         function _X_(param){
          var maybe_env = param[2], from = param[1];
          caml_call2(Bonsai_Snapshot[6], here, from);
          var
           from_result = caml_call1(Bonsai_Snapshot[2], from),
           environment$0 = pick(thread_environment, environment, maybe_env),
           environment$1 =
             caml_call3
              (Bonsai_Environment[2], environment$0, via, from_result);
          function _Z_(param){
           var
            maybe_env = param[2],
            into = param[1],
            result = caml_call1(Bonsai_Snapshot[2], into),
            _$_ = Bonsai_Lifecycle[1][4],
            _aa_ = caml_call1(Bonsai_Snapshot[3], into),
            _ab_ = caml_call1(Bonsai_Snapshot[3], from),
            lifecycle = caml_call3(Core_Option[54], _ab_, _aa_, _$_),
            input = caml_call1(Bonsai_Snapshot[1], from),
            _ac_ = capture(thread_environment, environment$1, maybe_env),
            _ad_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], input, lifecycle, result),
               _ac_];
           return caml_call1(Bonsai_Trampoline[3], _ad_);
          }
          var
           path$0 =
             both_use_path$2 ? caml_call2(Bonsai_Path[26], path, 1) : path,
           ___ =
             caml_call5
              (info_into[5],
               environment$1,
               path$0,
               clock,
               Bonsai_Import[12],
               Bonsai_Import[9]);
          return caml_call2(Bonsai_Trampoline[5][2][2], ___, _Z_);
         }
         var
          path$0 =
            both_use_path$2 ? caml_call2(Bonsai_Path[26], path, 0) : path,
          _Y_ =
            caml_call5
             (info_from[5], environment, path$0, clock, model, inject);
         return caml_call2(Bonsai_Trampoline[5][2][2], _Y_, _X_);
        },
      _r_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
      _s_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
     return [0,
             [0,
              info_from[1],
              info_from[2],
              info_from[3],
              info_from[4],
              run$1,
              info_from[6],
              _s_,
              _r_]];
    }
    function reset(inject, schedule_event, param){
     var
      model_into = param[2],
      model_from = param[1],
      _V_ = wrap_sub_from(inject),
      model_from$0 = caml_call3(info_from[6], _V_, schedule_event, model_from),
      _W_ = wrap_sub_into(inject),
      model_into$0 = caml_call3(info_into[6], _W_, schedule_event, model_into);
     return [0, model_from$0, model_into$0];
    }
    function apply_action(inject, schedule_event, input, param, _M_){
     var model_into = param[2], model_from = param[1];
     if(typeof _M_ !== "number" && 3 === _M_[0]){
      var
       action$0 = _M_[1],
       _Q_ = function(_U_){return _U_[2];},
       _R_ = caml_call2(Core_Option[34], input, _Q_),
       _S_ = wrap_sub_into(inject),
       model_into$0 =
         caml_call5
          (info_into[4], _S_, schedule_event, _R_, model_into, action$0);
      return [0, model_from, model_into$0];
     }
     var action = _M_[1];
     function _N_(_T_){return _T_[1];}
     var
      _O_ = caml_call2(Core_Option[34], input, _N_),
      _P_ = wrap_sub_from(inject),
      model_from$0 =
        caml_call5(info_from[4], _P_, schedule_event, _O_, model_from, action);
     return [0, model_from$0, model_into];
    }
    var both_use_path$0 = both_use_path(info_from[7], info_into[7]);
    function run(environment, path, clock, model, inject){
     caml_call2(Bonsai_Import[5], 5, model);
     function _v_(param){
      var maybe_env = param[2], from = param[1];
      caml_call2(Bonsai_Snapshot[6], here, from);
      var
       from_result = caml_call1(Bonsai_Snapshot[2], from),
       environment$0 = pick(thread_environment, environment, maybe_env),
       environment$1 =
         caml_call3(Bonsai_Environment[2], environment$0, via, from_result);
      function _A_(param){
       var
        maybe_env = param[2],
        into = param[1],
        result = caml_call1(Bonsai_Snapshot[2], into),
        _F_ = Bonsai_Lifecycle[1][4],
        _G_ = caml_call1(Bonsai_Snapshot[3], into),
        _H_ = caml_call1(Bonsai_Snapshot[3], from),
        lifecycle = caml_call3(Core_Option[54], _H_, _G_, _F_),
        _I_ = caml_call1(Bonsai_Snapshot[1], into),
        _J_ = caml_call1(Bonsai_Snapshot[1], from),
        input = caml_call2(Bonsai_Input[4], _J_, _I_),
        _K_ = capture(thread_environment, environment$1, maybe_env),
        _L_ =
          [0, caml_call3(Bonsai_Snapshot[5], input, lifecycle, result), _K_];
       return caml_call1(Bonsai_Trampoline[3], _L_);
      }
      function _B_(_E_){return _E_[2];}
      var
       model$0 = caml_call2(Ui_incr[12], model, _B_),
       path$0 = both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 1) : path,
       _C_ = wrap_sub_into(inject),
       _D_ =
         caml_call5(info_into[5], environment$1, path$0, clock, model$0, _C_);
      return caml_call2(Bonsai_Trampoline[5][2][2], _D_, _A_);
     }
     function _w_(_z_){return _z_[1];}
     var
      model$0 = caml_call2(Ui_incr[12], model, _w_),
      path$0 = both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 0) : path,
      _x_ = wrap_sub_from(inject),
      _y_ = caml_call5(info_from[5], environment, path$0, clock, model$0, _x_);
     return caml_call2(Bonsai_Trampoline[5][2][2], _y_, _v_);
    }
    var
     model = caml_call2(Bonsai_Meta[1][4], info_from[1], info_into[1]),
     input = caml_call2(Bonsai_Meta[3][5], info_from[2], info_into[2]),
     _n_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
     _o_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
    return [0,
            [0,
             model,
             input,
             caml_call2(Bonsai_Action[1][3], info_from[3], info_into[3]),
             apply_action,
             run,
             reset,
             _o_,
             _n_]];
   }
   function build_chain(computation, acc, length_of_acc, recurse){
    if(typeof computation !== "number" && 4 === computation[0]){
     var
      here = computation[4],
      into = computation[3],
      via = computation[2],
      from = computation[1],
      _k_ =
        function(from){
         var bound = with_threaded_environment(from);
         return build_chain
                 (into,
                  [0, [0, bound, via, here], acc],
                  length_of_acc + 1 | 0,
                  recurse);
        },
      _l_ = caml_call1(recurse[1], from);
     return caml_call2(Bonsai_Trampoline[5][2][2], _l_, _k_);
    }
    function _i_(final$0){
     var _m_ = [0, caml_call1(Reversed_list[3], acc), length_of_acc, final$0];
     return caml_call1(Bonsai_Trampoline[3], _m_);
    }
    var _j_ = caml_call1(recurse[1], computation);
    return caml_call2(Bonsai_Trampoline[5][2][2], _j_, _i_);
   }
   function reduce(param, _h_){
    var
     here_right = _h_[3],
     via_right = _h_[2],
     bound_right = _h_[1][1],
     here_left = param[3],
     via_left = param[2],
     bound_left = param[1][1],
     bound = gather(here_left, bound_left, bound_right, via_left, 1);
    return [0, bound, via_right, here_right];
   }
   function gather$0(here, info_from, info_into, via){
    return gather(here, info_from, info_into, via, 0);
   }
   function chain(computation, recurse){
    function _a_(t){
     var init = t[1];
     if(init){
      var
       final$0 = t[3],
       length_of_init = t[2],
       reducer = caml_call4(Balanced_reducer[3], 0, 0, length_of_init, reduce),
       _c_ =
         function(i, link){
          return caml_call3(Balanced_reducer[4], reducer, i, link);
         };
      caml_call2(Core_List[34], init, _c_);
      var
       _d_ = caml_call1(Balanced_reducer[6], reducer),
       here = _d_[3],
       via = _d_[2],
       info_from = _d_[1][1],
       info_into = with_threaded_environment(final$0)[1],
       match = gather(here, info_from, info_into, via, 1)[1],
       may_contain_lifecycle = match[8],
       may_contain_path = match[7],
       reset = match[6],
       run = match[5],
       apply_action = match[4],
       action = match[3],
       input = match[2],
       model = match[1],
       run$0 =
         function(environment, path, clock, model, inject){
          function _f_(param){
           var snapshot = param[1];
           return caml_call1(Bonsai_Trampoline[3], [0, snapshot, 0]);
          }
          var _g_ = caml_call5(run, environment, path, clock, model, inject);
          return caml_call2(Bonsai_Trampoline[5][2][2], _g_, _f_);
         },
       _e_ =
         [0,
          [0,
           model,
           input,
           action,
           apply_action,
           run$0,
           reset,
           may_contain_path,
           may_contain_lifecycle]];
     }
     else
      var final$1 = t[3], _e_ = final$1;
     return caml_call1(Bonsai_Trampoline[3], _e_);
    }
    var _b_ = build_chain(computation, 0, 0, recurse);
    return caml_call2(Bonsai_Trampoline[5][2][2], _b_, _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Eval_sub);
   var Bonsai_Eval_sub = [0, gather$0, chain];
   runtime.caml_register_global(27, Bonsai_Eval_sub, cst_Bonsai_Eval_sub$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Eval
//# unitInfo: Requires: Base__Option, Bonsai__Action, Bonsai__Environment, Bonsai__Eval_sub, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Bonsai__May_contain, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Trampoline, Bonsai__Value, Core, Core__Lazy, Core__Map, Core__Option, Core__Sexp, Core__Tuple, Core__Type_equal, Incr_map, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Eval$0 = "Bonsai__Eval",
    cst_bonsai$0 = "bonsai",
    cst_src_eval_ml = "src/eval.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Path = global_data.Bonsai__Path,
    Assert_failure = global_data.Assert_failure,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Input = global_data.Bonsai__Input,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Import = global_data.Bonsai__Import,
    Base_Option = global_data.Base__Option,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental = global_data.Incremental,
    Core_Tuple = global_data.Core__Tuple,
    Bonsai_May_contain = global_data.Bonsai__May_contain,
    Incr_map = global_data.Incr_map,
    Bonsai_Eval_sub = global_data.Bonsai__Eval_sub,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Eval$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_eval_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "eval.ml");
   var
    _d_ = [0, cst_src_eval_ml, 1029, 8],
    _e_ = [0, cst_src_eval_ml, 1029, 8],
    _b_ = [0, "action"],
    _c_ = [0, "index"],
    cst_an_action_inside_of_Bonsai =
      "an action inside of Bonsai.switch has been dropped because the computation is no longer active",
    cst_BUG_state_machine0_s_apply =
      "BUG: state_machine0's apply_action was called with a dynamic action",
    cst_BUG_state_machine1_s_apply =
      "BUG: state_machine1's apply_action was called with a dynamic action",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Eval = cst_Bonsai_Eval$0;
   function symbol(f, inject, b){return caml_call1(inject, caml_call1(f, b));}
   caml_call2(Ui_incr[4][7], Ui_incr[4][3], 1024);
   function unzip3_mapi(map, may_contain_lifecycle, comparator, f){
    if(may_contain_lifecycle){
     var
      _cy_ =
        function(key, data){
         var match = caml_call2(f, key, data), b = match[2], a = match[1];
         return [0, a, b];
        },
      match = caml_call5(Incr_map[32], 0, 0, 0, map, _cy_),
      second = match[2],
      first = match[1],
      _cz_ = caml_call1(Core_Map[4], comparator);
     return [0, first, second, caml_call1(Ui_incr[11], _cz_)];
    }
    function _cA_(key, data){
     var
      match = caml_call2(f, key, data),
      c = match[3],
      b = match[2],
      a = match[1],
      bc = caml_call2(Ui_incr[42], b, c);
     caml_call2(Bonsai_Import[5], 13, bc);
     return [0, a, bc];
    }
    var
     match$0 = caml_call5(Incr_map[32], 0, 0, 0, map, _cA_),
     second_and_third = match$0[2],
     first$0 = match$0[1],
     match$1 = caml_call4(Incr_map[30], 0, 0, 0, second_and_third),
     third = match$1[2],
     second$0 = match$1[1];
    return [0, first$0, second$0, third];
   }
   var do_nothing_lifecycle = caml_call1(Ui_incr[11], Bonsai_Lifecycle[1][2]);
   function _a_(t){
    if(typeof t === "number"){
     var
      run =
        function(param, path, _cw_, _cv_, _cu_){
         var result = caml_call1(Ui_incr[11], path);
         caml_call2(Bonsai_Import[5], 12, result);
         var
          _cx_ =
            [0, caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result), 0];
         return caml_call1(Bonsai_Trampoline[3], _cx_);
        };
     return caml_call1
             (Bonsai_Trampoline[3],
              [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[3][4],
                Bonsai_Action[1][1],
                Bonsai_Import[10],
                run,
                Bonsai_Import[11],
                0,
                1]]);
    }
    switch(t[0]){
      case 0:
       var
        value = t[1],
        run$0 =
          function(environment, param, _cs_, _cr_, _cq_){
           var
            result = caml_call2(Bonsai_Value[23], environment, value),
            _ct_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _ct_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$0,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 1:
       var
        input = t[6],
        reset = t[5],
        apply_action = t[4],
        dynamic_action = t[3],
        input_id = t[2],
        model = t[1],
        wrap_leaf =
          function(inject){
           var _co_ = Bonsai_Action[3];
           return function(_cp_){return symbol(_co_, inject, _cp_);};
          },
        run$1 =
          function(environment, param, _ck_, model, inject){
           caml_call2(Bonsai_Import[5], 5, model);
           var
            input$0 = caml_call2(Bonsai_Value[23], environment, input),
            inject_dynamic = wrap_leaf(inject);
           function _cl_(model){return [0, model, inject_dynamic];}
           var
            result = caml_call2(Ui_incr[78][4][6], model, _cl_),
            _cm_ = caml_call1(Bonsai_Input[1], input$0),
            _cn_ = [0, caml_call3(Bonsai_Snapshot[5], _cm_, 0, result), 0];
           return caml_call1(Bonsai_Trampoline[3], _cn_);
          },
        apply_action$0 =
          function(inject, schedule_event, input, model, param){
           if(typeof param !== "number" && 1 === param[0]){
            var action = param[1];
            return caml_call5
                    (apply_action,
                     wrap_leaf(inject),
                     schedule_event,
                     input,
                     model,
                     action);
           }
           var
            _cj_ =
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_BUG_state_machine1_s_apply);
           caml_call2(Core[257], 0, _cj_);
           return model;
          },
        reset$0 =
          function(inject, schedule_event, model){
           return caml_call3(reset, wrap_leaf(inject), schedule_event, model);
          },
        _g_ =
          [0,
           [0,
            model,
            input_id,
            caml_call1(Bonsai_Action[1][2], dynamic_action),
            apply_action$0,
            run$1,
            reset$0,
            1,
            1]];
       return caml_call1(Bonsai_Trampoline[3], _g_);
      case 2:
       var
        reset$1 = t[4],
        apply_action$1 = t[3],
        static_action = t[2],
        model$0 = t[1],
        wrap_leaf$0 =
          function(inject){
           var _ch_ = Bonsai_Action[2];
           return function(_ci_){return symbol(_ch_, inject, _ci_);};
          },
        run$2 =
          function(param, _ce_, _cd_, model, inject){
           caml_call2(Bonsai_Import[5], 5, model);
           var inject_static = wrap_leaf$0(inject);
           function _cf_(model){return [0, model, inject_static];}
           var
            result = caml_call2(Ui_incr[78][4][6], model, _cf_),
            _cg_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _cg_);
          },
        apply_action$2 =
          function(inject, schedule_event, input, model, param){
           if(typeof param !== "number" && 1 === param[0]){
            var
             _cc_ =
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_BUG_state_machine0_s_apply);
            caml_call2(Core[257], 0, _cc_);
            return model;
           }
           var action = param[1];
           return caml_call4
                   (apply_action$1,
                    wrap_leaf$0(inject),
                    schedule_event,
                    model,
                    action);
          },
        reset$2 =
          function(inject, schedule_event, model){
           return caml_call3
                   (reset$1, wrap_leaf$0(inject), schedule_event, model);
          },
        _h_ = caml_call1(Bonsai_Action[1][2], static_action);
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  model$0,
                  Bonsai_Meta[3][4],
                  _h_,
                  apply_action$2,
                  run$2,
                  reset$2,
                  1,
                  1]]);
      case 3:
       var
        compute = t[2],
        input$0 = t[1],
        run$3 =
          function(environment, param, clock, _ca_, _b$_){
           var
            input = caml_call2(Bonsai_Value[23], environment, input$0),
            result = caml_call2(compute, clock, input),
            _cb_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _cb_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$3,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 4:
       var from = t[1], _i_ = t[3];
       a:
       if(typeof _i_ !== "number" && 4 === _i_[0]){
        var _l_ = _i_[3];
        if(typeof _l_ !== "number" && 4 === _l_[0])
         return caml_call2(Bonsai_Eval_sub[2], t, [0, _a_]);
        break a;
       }
       var
        here = t[4],
        into = t[3],
        via = t[2],
        _j_ =
          function(param){
           var info_from = param[1];
           function _b8_(param){
            var
             info_into = param[1],
             _b__ =
               caml_call4(Bonsai_Eval_sub[1], here, info_from, info_into, via);
            return caml_call1(Bonsai_Trampoline[3], _b__);
           }
           var _b9_ = _a_(into);
           return caml_call2(Bonsai_Trampoline[5][2][2], _b9_, _b8_);
          },
        _k_ = _a_(from);
       return caml_call2(Bonsai_Trampoline[5][2][2], _k_, _j_);
      case 5:
       var
        inner = t[3],
        value$0 = t[2],
        id = t[1],
        _m_ =
          function(param){
           var gathered = param[1];
           function run(environment, path, clock, model, inject){
            var
             value = caml_call2(Bonsai_Value[23], environment, value$0),
             environment$0 =
               caml_call3(Bonsai_Environment[3], environment, id, value);
            return caml_call5
                    (gathered[5], environment$0, path, clock, model, inject);
           }
           return caml_call1
                   (Bonsai_Trampoline[3],
                    [0,
                     [0,
                      gathered[1],
                      gathered[2],
                      gathered[3],
                      gathered[4],
                      run,
                      gathered[6],
                      gathered[7],
                      gathered[8]]]);
          },
        _n_ = _a_(inner);
       return caml_call2(Bonsai_Trampoline[5][2][2], _n_, _m_);
      case 6:
       var
        for_some = t[3],
        default$0 = t[2],
        id$0 = t[1],
        run$4 =
          function(environment, param, _b5_, _b4_, _b3_){
           var match = caml_call2(Bonsai_Environment[4], environment, id$0);
           if(match)
            var
             x = match[1],
             _b6_ = function(a){return caml_call1(for_some, a);},
             result = caml_call2(Ui_incr[12], x, _b6_);
           else
            var result = caml_call1(Ui_incr[11], default$0);
           var
            _b7_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _b7_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$4,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 7:
       var
        by = t[6],
        data_id = t[5],
        cmp_id = t[4],
        key_id = t[3],
        key_comparator = t[2],
        map = t[1],
        wrap_assoc =
          function(key, inject){
           var
            _b1_ =
              caml_call3(Bonsai_Action[12], key, key_id, key_comparator[2][1]);
           return function(_b2_){return symbol(_b1_, inject, _b2_);};
          },
        _o_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            action = match[3],
            input_info = match[2],
            model_info = match[1];
           function run$0(environment, path, clock, model, inject){
            var map_input = caml_call2(Bonsai_Value[23], environment, map);
            function _bI_(param, _bZ_){
             var _b0_ = _bZ_[1];
             if(737457313 === _b0_){
              var input_and_models = _bZ_[2];
              return [0, input_and_models];
             }
             if(847852583 > _b0_) return 0;
             var input = _bZ_[2];
             return [0, [0, input, model_info[1]]];
            }
            var
             input_and_models_map =
               caml_call6(Incr_map[26], 0, 0, 0, map_input, model, _bI_),
             _bJ_ =
               caml_call2(Bonsai_Path[1][1], key_comparator[2][1], key_id),
             create_keyed = caml_call1(Core[267], _bJ_);
            function _bK_(key, input_and_model){
             caml_call2(Bonsai_Import[5], 6, input_and_model);
             if(may_contain_path)
              var path$0 = path;
             else
              var
               _bY_ = [0, caml_call1(create_keyed, key)],
               path$0 = caml_call2(Bonsai_Path[26], path, _bY_);
             function _bR_(param){
              var pattern_syntax_007 = param[2];
              return pattern_syntax_007;
             }
             var model = caml_call2(Ui_incr[78][4][6], input_and_model, _bR_);
             function _bS_(param){
              var pattern_syntax_008 = param[1];
              return pattern_syntax_008;
             }
             var
              value = caml_call2(Ui_incr[78][4][6], input_and_model, _bS_),
              key_incr = caml_call1(Ui_incr[10], key);
             caml_call2(Bonsai_Import[5], 7, key_incr);
             caml_call2(Bonsai_Import[5], 8, value);
             var
              _bT_ =
                caml_call3
                 (Bonsai_Environment[2], environment, key_id, key_incr),
              environment$0 =
                caml_call3(Bonsai_Environment[2], _bT_, data_id, value),
              _bU_ =
                caml_call5
                 (run,
                  environment$0,
                  path$0,
                  clock,
                  model,
                  wrap_assoc(key, inject)),
              snapshot = caml_call1(Bonsai_Trampoline[2], _bU_)[1],
              _bV_ = caml_call1(Bonsai_Snapshot[4], snapshot),
              _bW_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _bX_ = caml_call1(Bonsai_Input[3], _bW_);
             return [0, caml_call1(Bonsai_Snapshot[2], snapshot), _bX_, _bV_];
            }
            var
             match =
               unzip3_mapi
                (input_and_models_map,
                 may_contain_lifecycle,
                 [0, key_comparator[2]],
                 _bK_),
             lifecycle_map = match[3],
             input_map = match[2],
             results_map = match[1];
            caml_call2(Bonsai_Import[5], 9, results_map);
            caml_call2(Bonsai_Import[5], 10, lifecycle_map);
            caml_call2(Bonsai_Import[5], 11, input_map);
            if(may_contain_lifecycle)
             var lifecycle = 0;
            else{
             var
              _bN_ =
                function(param, key, _bQ_, acc){
                 return caml_call2(Core_Map[47], acc, key);
                },
              _bO_ =
                function(param, key, data, acc){
                 function _bP_(param){
                  return param ? caml_call1(Bonsai_Path[28], key) : data;
                 }
                 return caml_call3(Core_Map[43], acc, key, _bP_);
                },
              unfolded =
                caml_call8
                 (Incr_map[43],
                  0,
                  0,
                  0,
                  0,
                  lifecycle_map,
                  Bonsai_Path[23][5],
                  _bO_,
                  _bN_);
             caml_call2(Bonsai_Import[5], 10, unfolded);
             var lifecycle = [0, unfolded];
            }
            var
             _bL_ = caml_call1(Bonsai_Input[1], input_map),
             _bM_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], _bL_, lifecycle, results_map),
                0];
            return caml_call1(Bonsai_Trampoline[3], _bM_);
           }
           function apply_action$0
           (inject, schedule_event, input, model, param){
            var action = param[2], key = param[1];
            function _bF_(input){return caml_call2(Core_Map[44], input, key);}
            var
             input$0 = caml_call2(Core_Option[32], input, _bF_),
             _bG_ = model_info[1],
             _bH_ = caml_call2(Core_Map[44], model, key),
             specific_model = caml_call2(Core_Option[39], _bH_, _bG_),
             data =
               caml_call5
                (apply_action,
                 wrap_assoc(key, inject),
                 schedule_event,
                 input$0,
                 specific_model,
                 action);
            return caml_call2(model_info[2], data, model_info[1])
                    ? caml_call2(Core_Map[47], model, key)
                    : caml_call3(Core_Map[38], model, key, data);
           }
           function reset$0(inject, schedule_event, model){
            function _bE_(key, data){
             var
              new_model =
                caml_call3
                 (reset, wrap_assoc(key, inject), schedule_event, data);
             return caml_call2(model_info[2], new_model, model_info[1])
                     ? 0
                     : [0, new_model];
            }
            return caml_call2(Core_Map[69], model, _bE_);
           }
           var
            _bB_ = caml_call2(Bonsai_Action[1][8], key_id, action),
            _bC_ = caml_call3(Bonsai_Meta[3][6], key_id, cmp_id, input_info),
            _bD_ =
              [0,
               [0,
                caml_call4
                 (Bonsai_Meta[1][5],
                  key_comparator,
                  key_id,
                  cmp_id,
                  model_info),
                _bC_,
                _bB_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _bD_);
          },
        _p_ = _a_(by);
       return caml_call2(Bonsai_Trampoline[5][2][2], _p_, _o_);
      case 8:
       var
        get_model_key = t[10],
        by$0 = t[9],
        data_id$0 = t[8],
        model_cmp_id = t[7],
        model_key_id = t[6],
        io_cmp_id = t[5],
        io_key_id = t[4],
        model_comparator = t[3],
        io_comparator = t[2],
        map$0 = t[1],
        wrap_assoc_on =
          function(io_key, model_key, inject){
           var
            _bz_ =
              caml_call4
               (Bonsai_Action[13],
                io_key,
                io_key_id,
                io_comparator[2][1],
                model_key);
           return function(_bA_){return symbol(_bz_, inject, _bA_);};
          },
        model_key_comparator = model_comparator[2],
        _q_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            action = match[3],
            input_info = match[2],
            model_info = match[1];
           function run$0(environment, path, clock, model, inject){
            var
             map_input = caml_call2(Bonsai_Value[23], environment, map$0),
             model_lookup =
               caml_call4(Incr_map[56][1], 0, 0, model, model_key_comparator),
             _be_ =
               caml_call2(Bonsai_Path[1][1], io_comparator[2][1], io_key_id),
             create_keyed = caml_call1(Core[267], _be_);
            function _bf_(io_key, value){
             if(may_contain_path)
              var path$0 = path;
             else
              var
               _bt_ = [0, caml_call1(create_keyed, io_key)],
               path$0 = caml_call2(Bonsai_Path[26], path, _bt_);
             var key_incr = caml_call1(Ui_incr[10], io_key);
             caml_call2(Bonsai_Import[5], 7, key_incr);
             caml_call2(Bonsai_Import[5], 8, value);
             var
              _bm_ =
                caml_call3
                 (Bonsai_Environment[2], environment, io_key_id, key_incr),
              environment$0 =
                caml_call3(Bonsai_Environment[2], _bm_, data_id$0, value);
             function _bn_(value){
              return caml_call2(get_model_key, io_key, value);
             }
             var
              model_key = caml_call2(Ui_incr[78][4][6], value, _bn_),
              _bo_ = caml_call1(Ui_incr[60][4], model_key_comparator[1]);
             caml_call2(Ui_incr[61], model_key, _bo_);
             function _bp_(model_key){
              function _bu_(param){
               if(! param) return model_info[1];
               var model = param[1][2];
               return model;
              }
              var
               _bv_ = caml_call2(Incr_map[56][2], model_lookup, model_key),
               model = caml_call2(Ui_incr[78][4][6], _bv_, _bu_);
              caml_call2(Bonsai_Import[5], 5, model);
              var
               _bw_ =
                 caml_call5
                  (run,
                   environment$0,
                   path$0,
                   clock,
                   model,
                   wrap_assoc_on(io_key, model_key, inject)),
               snapshot = caml_call1(Bonsai_Trampoline[2], _bw_)[1],
               let_syntax_016 = caml_call1(Bonsai_Snapshot[2], snapshot),
               _bx_ = caml_call1(Bonsai_Snapshot[1], snapshot),
               let_syntax_017 = caml_call1(Bonsai_Input[3], _bx_),
               let_syntax_018 = caml_call1(Bonsai_Snapshot[4], snapshot);
              function _by_(result, input, lifecycle){return [0, result, input, lifecycle];
              }
              return caml_call4
                      (Ui_incr[78][4][8],
                       let_syntax_016,
                       let_syntax_017,
                       let_syntax_018,
                       _by_);
             }
             var
              pattern_syntax_010 =
                caml_call2(Ui_incr[78][4][1], model_key, _bp_);
             function _bq_(param){
              var pattern_syntax_011 = param[2];
              return pattern_syntax_011;
             }
             var
              input_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _bq_);
             function _br_(param){
              var pattern_syntax_012 = param[3];
              return pattern_syntax_012;
             }
             var
              lifecycle_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _br_);
             function _bs_(param){
              var pattern_syntax_013 = param[1];
              return pattern_syntax_013;
             }
             var
              results_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _bs_);
             return [0, results_map, input_map, lifecycle_map];
            }
            var
             match =
               unzip3_mapi
                (map_input,
                 may_contain_lifecycle,
                 [0, io_comparator[2]],
                 _bf_),
             lifecycle_map = match[3],
             input_map = match[2],
             results_map = match[1];
            caml_call2(Bonsai_Import[5], 9, results_map);
            caml_call2(Bonsai_Import[5], 10, lifecycle_map);
            if(may_contain_lifecycle)
             var lifecycle = 0;
            else{
             var
              _bi_ =
                function(param, key, _bl_, acc){
                 return caml_call2(Core_Map[47], acc, key);
                },
              _bj_ =
                function(param, key, data, acc){
                 function _bk_(param){
                  return param ? caml_call1(Bonsai_Path[28], key) : data;
                 }
                 return caml_call3(Core_Map[43], acc, key, _bk_);
                },
              unfolded =
                caml_call8
                 (Incr_map[43],
                  0,
                  0,
                  0,
                  0,
                  lifecycle_map,
                  Bonsai_Path[23][5],
                  _bj_,
                  _bi_);
             caml_call2(Bonsai_Import[5], 10, unfolded);
             var lifecycle = [0, unfolded];
            }
            var
             _bg_ = caml_call1(Bonsai_Input[1], input_map),
             _bh_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], _bg_, lifecycle, results_map),
                0];
            return caml_call1(Bonsai_Trampoline[3], _bh_);
           }
           function apply_action$0
           (inject, schedule_event, input, model, param){
            var action = param[3], model_key = param[2], io_key = param[1];
            function _bd_(input){
             return caml_call2(Core_Map[44], input, io_key);
            }
            var
             input$0 = caml_call2(Core_Option[32], input, _bd_),
             match = caml_call2(Core_Map[44], model, model_key);
            if(match)
             var model$0 = match[1][2], specific_model = model$0;
            else
             var specific_model = model_info[1];
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_assoc_on(io_key, model_key, inject),
                 schedule_event,
                 input$0,
                 specific_model,
                 action);
            return caml_call2(model_info[2], new_model, model_info[1])
                    ? caml_call2(Core_Map[47], model, model_key)
                    : caml_call3
                      (Core_Map[38], model, model_key, [0, io_key, new_model]);
           }
           function reset$0(inject, schedule_event, model){
            function _bc_(model_key, param){
             var
              model = param[2],
              io_key = param[1],
              new_model =
                caml_call3
                 (reset,
                  wrap_assoc_on(io_key, model_key, inject),
                  schedule_event,
                  model);
             return caml_call2(model_info[2], new_model, model_info[1])
                     ? 0
                     : [0, [0, io_key, new_model]];
            }
            return caml_call2(Core_Map[69], model, _bc_);
           }
           var
            _a$_ =
              caml_call3(Bonsai_Action[1][9], io_key_id, model_key_id, action),
            _ba_ =
              caml_call3(Bonsai_Meta[3][6], io_key_id, io_cmp_id, input_info),
            _bb_ =
              [0,
               [0,
                caml_call6
                 (Bonsai_Meta[1][6],
                  model_comparator,
                  io_comparator,
                  model_key_id,
                  io_key_id,
                  model_cmp_id,
                  model_info),
                _ba_,
                _a$_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _bb_);
          },
        _r_ = _a_(by$0);
       return caml_call2(Bonsai_Trampoline[5][2][2], _r_, _q_);
      case 9:
       var
        may_contain_path = t[3],
        by$1 = t[2],
        map$1 = t[1],
        run$5 =
          function(environment, path, param, _a8_, _a7_){
           var map_input = caml_call2(Bonsai_Value[23], environment, map$1);
           function _a9_(key, data){return caml_call3(by$1, path, key, data);}
           var
            result = caml_call4(Incr_map[3], 0, 0, map_input, _a9_),
            _a__ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _a__);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$5,
                  Bonsai_Import[11],
                  may_contain_path,
                  1]]);
      case 10:
       var
        arms = t[2],
        match = t[1],
        wrap_switch =
          function(branch, type_id, inject){
           var _a5_ = caml_call2(Bonsai_Action[10], branch, type_id);
           return function(_a6_){return symbol(_a5_, inject, _a6_);};
          },
        _s_ =
          function(gathered){
           function _aH_(param, _a4_, acc){
            var gathered = _a4_[1];
            return caml_call2(Bonsai_May_contain[1][1], acc, gathered[8]);
           }
           var
            may_contain_lifecycle =
              caml_call3(Core_Map[61], gathered, 1, _aH_);
           function _aI_(param){return param[1][7] ? 0 : 1;}
           var
            num_contain_path = caml_call2(Core_Map[99], gathered, _aI_),
            may_contain_path =
              caml_call2(Core[91], num_contain_path, 0) ? 0 : 1,
            needs_disambiguation = caml_call2(Core[91], num_contain_path, 1);
           function run(environment, path, clock, model, inject){
            caml_call2(Bonsai_Import[5], 5, model);
            var index = caml_call2(Bonsai_Value[23], environment, match);
            function _aR_(index){
             var
              path$0 =
                needs_disambiguation
                 ? caml_call2(Bonsai_Path[26], path, [1, index])
                 : path,
              match = caml_call2(Core_Map[45], gathered, index)[1],
              run = match[5],
              action_info = match[3],
              input_info = match[2],
              model_info = match[1];
             function _aX_(map){
              var
               match = caml_call2(Bonsai_Meta[2][2], map, index),
               info = match[2],
               model = match[1],
               equal =
                 caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
              return caml_call2(Core_Type_equal[5], equal, model);
             }
             var
              chosen_model = caml_call2(Incremental[10], model, _aX_),
              _aY_ =
                caml_call5
                 (run,
                  environment,
                  path$0,
                  clock,
                  chosen_model,
                  wrap_switch(index, action_info, inject)),
              snapshot = caml_call1(Bonsai_Trampoline[2], _aY_)[1];
             function _aZ_(input){return [0, input, input_info, index];}
             var
              _a0_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _a1_ = caml_call1(Bonsai_Input[3], _a0_),
              input = caml_call2(Ui_incr[78][4][6], _a1_, _aZ_),
              _a2_ = caml_call1(Bonsai_Snapshot[4], snapshot),
              _a3_ =
                [0, caml_call1(Bonsai_Snapshot[2], snapshot), input, _a2_];
             return caml_call1(Ui_incr[11], _a3_);
            }
            var
             result_input_and_lifecycle =
               caml_call2(Ui_incr[78][4][1], index, _aR_);
            function _aS_(_aW_){return _aW_[1];}
            var
             result =
               caml_call2(Ui_incr[28], result_input_and_lifecycle, _aS_);
            function _aT_(_aV_){return _aV_[2];}
            var
             input = caml_call2(Ui_incr[28], result_input_and_lifecycle, _aT_),
             lifecycle =
               caml_call2
                (Ui_incr[28], result_input_and_lifecycle, Core_Tuple[2][10]),
             input$0 = caml_call1(Bonsai_Input[1], input),
             lifecycle$0 = may_contain_lifecycle ? 0 : [0, lifecycle],
             _aU_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], input$0, lifecycle$0, result),
                0];
            return caml_call1(Bonsai_Trampoline[3], _aU_);
           }
           function apply_action(inject, schedule_event, input, model, param){
            var
             action_type_id = param[3],
             action = param[2],
             index = param[1],
             match = caml_call2(Core_Map[45], gathered, index)[1],
             apply_action = match[4],
             am = match[3],
             im = match[2],
             tm = match[1],
             match$0 = caml_call2(Bonsai_Meta[2][2], model, index),
             chosen_model_info = match$0[2],
             chosen_model = match$0[1],
             match$1 = caml_call2(Bonsai_Action[1][10], action_type_id, am),
             match$2 =
               caml_call2(Bonsai_Meta[1][1][2], chosen_model_info[3], tm[3]);
            if(match$1 && match$2){
             if(input){
              var
               match$3 = input[1],
               index$0 = match$3[3],
               chosen_input_info = match$3[2],
               chosen_input = match$3[1],
               match$4 = caml_call2(Core[90], index, index$0);
              a:
              {
               var
                match$5 = caml_call2(Bonsai_Meta[3][2], chosen_input_info, im);
               if(match$4 && match$5){
                var
                 _aN_ =
                   caml_call5
                    (apply_action,
                     wrap_switch(index, am, inject),
                     schedule_event,
                     [0, chosen_input],
                     chosen_model,
                     action);
                break a;
               }
               var
                _aN_ =
                  caml_call5
                   (apply_action,
                    wrap_switch(index, am, inject),
                    schedule_event,
                    0,
                    chosen_model,
                    action);
              }
              var new_model = _aN_;
             }
             else
              var
               new_model =
                 caml_call5
                  (apply_action,
                   wrap_switch(index, am, inject),
                   schedule_event,
                   0,
                   chosen_model,
                   action);
             var
              new_model$0 = caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
             return caml_call3(Bonsai_Meta[2][3], model, index, new_model$0);
            }
            var
             action$0 =
               caml_call2(Bonsai_Action[1][13], action_type_id, action),
             _aO_ =
               [0,
                [1, [0, _b_, [0, caml_call1(Core_Sexp[93], action$0), 0]]],
                0],
             _aP_ =
               [0, [1, [0, _c_, [0, caml_call1(Core[389], index), 0]]], _aO_],
             _aQ_ =
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_an_action_inside_of_Bonsai),
                 _aP_]];
            caml_call2(Core[257], 0, _aQ_);
            return model;
           }
           function reset(inject, schedule_event, model){
            function f(index, model){
             var
              chosen_model_info = model[2],
              chosen_model = model[1],
              match = caml_call2(Core_Map[45], gathered, index)[1],
              reset = match[6],
              am = match[3],
              tm = match[1];
             caml_call2(Bonsai_Meta[1][1][3], tm[3], chosen_model_info[3]);
             var
              new_model =
                caml_call3
                 (reset,
                  wrap_switch(index, am, inject),
                  schedule_event,
                  chosen_model);
             return caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
            }
            var
             _aL_ = caml_call1(Bonsai_Meta[2][4], model),
             _aM_ = caml_call2(Core_Map[58], _aL_, f);
            return caml_call1(Bonsai_Meta[2][5], _aM_);
           }
           function _aJ_(param){
            var model = param[1][1];
            return caml_call2(Bonsai_Meta[1][2][3], model, model[1]);
           }
           var
            models = caml_call2(Core_Map[57], gathered, _aJ_),
            _aK_ = caml_call1(Bonsai_Meta[2][5], models),
            model = caml_call1(Bonsai_Meta[2][6], _aK_);
           return caml_call1
                   (Bonsai_Trampoline[3],
                    [0,
                     [0,
                      model,
                      Bonsai_Meta[3][8][2],
                      Bonsai_Action[1][6],
                      apply_action,
                      run,
                      reset,
                      may_contain_path,
                      may_contain_lifecycle]]);
          },
        _t_ = caml_call2(Core_Map[57], arms, _a_),
        _u_ = caml_call1(Bonsai_Trampoline[4], _t_);
       return caml_call2(Bonsai_Trampoline[5][2][2], _u_, _s_);
      case 11:
       var
        lazy_computation = t[1],
        wrap_lazy =
          function(type_id, inject){
           var _aF_ = caml_call1(Bonsai_Action[11], type_id);
           return function(_aG_){return symbol(_aF_, inject, _aG_);};
          },
        model$1 = Bonsai_Meta[1][2][4],
        _v_ =
          function(c){
           var _aE_ = _a_(c);
           return caml_call1(Bonsai_Trampoline[2], _aE_);
          },
        gathered = caml_call2(Core_Lazy[30], lazy_computation, _v_),
        run$6 =
          function(environment, path, clock, model, inject){
           var
            match = caml_call1(Core[248], gathered)[1],
            run = match[5],
            action_info = match[3],
            input_info = match[2],
            model_info = match[1];
           caml_call2(Bonsai_Import[5], 5, model);
           function _av_(model){
            var
             _aD_ =
               caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
             match = caml_call2(Core_Option[39], model, _aD_),
             info = match[2],
             model$0 = match[1],
             witness =
               caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
            return caml_call2(Core_Type_equal[5], witness, model$0);
           }
           var input_model = caml_call2(Ui_incr[78][4][6], model, _av_);
           function _aw_(param){
            var snapshot = param[1];
            function _ay_(input){return [0, input, input_info, 0];}
            var
             _az_ = caml_call1(Bonsai_Snapshot[1], snapshot),
             input = caml_call2(Bonsai_Input[5], _az_, _ay_),
             _aA_ = caml_call1(Bonsai_Snapshot[2], snapshot),
             _aB_ = caml_call1(Bonsai_Snapshot[3], snapshot),
             _aC_ = [0, caml_call3(Bonsai_Snapshot[5], input, _aB_, _aA_), 0];
            return caml_call1(Bonsai_Trampoline[3], _aC_);
           }
           var
            _ax_ =
              caml_call5
               (run,
                environment,
                path,
                clock,
                input_model,
                wrap_lazy(action_info, inject));
           return caml_call2(Bonsai_Trampoline[5][2][2], _ax_, _aw_);
          },
        apply_action$3 =
          function(inject, schedule_event, input, model, param){
           var
            action_type_id = param[2],
            action = param[1],
            match = caml_call1(Core[248], gathered)[1],
            apply_action = match[4],
            action_info = match[3],
            input_info = match[2],
            model_info = match[1],
            _au_ = caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
            match$0 = caml_call2(Core_Option[39], model, _au_),
            chosen_model_info = match$0[2],
            chosen_model = match$0[1];
           caml_call2(Bonsai_Action[1][11], action_type_id, action_info);
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           if(input){
            var
             match$1 = input[1],
             input_type_id = match$1[2],
             input$0 = match$1[1];
            caml_call2(Bonsai_Meta[3][3], input_type_id, input_info);
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_lazy(action_info, inject),
                 schedule_event,
                 [0, input$0],
                 chosen_model,
                 action);
           }
           else
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_lazy(action_info, inject),
                 schedule_event,
                 0,
                 chosen_model,
                 action);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          },
        reset$3 =
          function(inject, schedule_event, model){
           if(! model) return 0;
           var
            model$0 = model[1],
            match = caml_call1(Core[248], gathered)[1],
            reset = match[6],
            action_info = match[3],
            model_info = match[1],
            chosen_model_info = model$0[2],
            chosen_model = model$0[1];
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           var
            new_model =
              caml_call3
               (reset,
                wrap_lazy(action_info, inject),
                schedule_event,
                chosen_model);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  model$1,
                  Bonsai_Meta[3][8][1],
                  Bonsai_Action[1][7],
                  apply_action$3,
                  run$6,
                  reset$3,
                  0,
                  0]]);
      case 12:
       var
        reset_me = t[8],
        dynamic_apply_action = t[7],
        inner$0 = t[6],
        model_id = t[5],
        inject_id = t[4],
        action_id = t[3],
        result_id = t[2],
        wrapper_model = t[1],
        _w_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            inner_action = match[3],
            inner_input = match[2],
            inner_model = match[1];
           function wrap_inner(inject){
            var _as_ = Bonsai_Action[6];
            return function(_at_){return symbol(_as_, inject, _at_);};
           }
           function wrap_outer(inject){
            var _aq_ = Bonsai_Action[7];
            return function(_ar_){return symbol(_aq_, inject, _ar_);};
           }
           function run$0(environment, path, clock, model, inject){
            caml_call2(Bonsai_Import[5], 5, model);
            function _ae_(param){
             var pattern_syntax_028 = param[2];
             return pattern_syntax_028;
            }
            var inner_model = caml_call2(Ui_incr[78][4][6], model, _ae_);
            function _af_(param){
             var pattern_syntax_029 = param[1];
             return pattern_syntax_029;
            }
            var outer_model = caml_call2(Ui_incr[78][4][6], model, _af_);
            caml_call2(Bonsai_Import[5], 5, outer_model);
            function _ag_(param){
             var
              inner_snapshot = param[1],
              inner_result = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
              _al_ = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
              _am_ = caml_call1(Bonsai_Input[1], _al_),
              _an_ = caml_call1(Bonsai_Snapshot[1], inner_snapshot),
              input = caml_call2(Bonsai_Input[4], _an_, _am_),
              _ao_ = caml_call1(Bonsai_Snapshot[3], inner_snapshot),
              _ap_ =
                [0,
                 caml_call3(Bonsai_Snapshot[5], input, _ao_, inner_result),
                 0];
             return caml_call1(Bonsai_Trampoline[3], _ap_);
            }
            var
             _ah_ = wrap_outer(inject),
             _ai_ = caml_call1(Ui_incr[11], _ah_),
             _aj_ =
               caml_call3
                (Bonsai_Environment[2], environment, model_id, outer_model),
             environment$0 =
               caml_call3(Bonsai_Environment[2], _aj_, inject_id, _ai_),
             _ak_ =
               caml_call5
                (run,
                 environment$0,
                 path,
                 clock,
                 inner_model,
                 wrap_inner(inject));
            return caml_call2(Bonsai_Trampoline[5][2][2], _ak_, _ag_);
           }
           var
            model = caml_call2(Bonsai_Meta[1][4], wrapper_model, inner_model);
           function apply_action$0
           (inject, schedule_event, input, param, action){
            var inner_model = param[2], outer_model = param[1];
            if(typeof action !== "number" && 5 === action[0]){
             var
              action_outer = action[1],
              _aa_ = function(_ad_){return _ad_[2];},
              _ab_ = caml_call2(Core_Option[34], input, _aa_),
              new_outer_model =
                caml_call5
                 (dynamic_apply_action,
                  wrap_outer(inject),
                  schedule_event,
                  _ab_,
                  outer_model,
                  action_outer);
             return [0, new_outer_model, inner_model];
            }
            var action_inner = action[1];
            function ___(_ac_){return _ac_[1];}
            var
             _$_ = caml_call2(Core_Option[34], input, ___),
             new_inner_model =
               caml_call5
                (apply_action,
                 wrap_inner(inject),
                 schedule_event,
                 _$_,
                 inner_model,
                 action_inner);
            return [0, outer_model, new_inner_model];
           }
           function reset$0(inject, schedule_event, param){
            var
             inner_model = param[2],
             outer_model = param[1],
             outer_model$0 =
               caml_call3
                (reset_me, wrap_outer(inject), schedule_event, outer_model),
             inner_model$0 =
               caml_call3
                (reset, wrap_inner(inject), schedule_event, inner_model);
            return [0, outer_model$0, inner_model$0];
           }
           var
            _Y_ = caml_call2(Bonsai_Action[1][4], inner_action, action_id),
            _Z_ =
              [0,
               [0,
                model,
                caml_call2(Bonsai_Meta[3][5], inner_input, result_id),
                _Y_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _Z_);
          },
        _x_ = _a_(inner$0);
       return caml_call2(Bonsai_Trampoline[5][2][2], _x_, _w_);
      case 13:
       var
        inner$1 = t[2],
        reset_id = t[1],
        _y_ =
          function(param){
           var
            gathered_inner = param[1],
            may_contain_lifecycle = gathered_inner[8],
            may_contain_path = gathered_inner[7],
            reset = gathered_inner[6],
            run = gathered_inner[5],
            apply_action = gathered_inner[4],
            action = gathered_inner[3],
            input = gathered_inner[2],
            model = gathered_inner[1],
            same_model = Bonsai_Meta[1][1][2],
            same_action = Bonsai_Action[1][10];
           function _J_(a){
            function _W_(b){return [0, [0, a, b]];}
            var _X_ = caml_call2(same_action, action, Bonsai_Action[1][1]);
            return caml_call2(Base_Option[29][4][2], _X_, _W_);
           }
           var
            _K_ = caml_call2(same_model, model[3], Bonsai_Meta[1][3][3]),
            inner_stateless = caml_call2(Base_Option[29][4][2], _K_, _J_);
           if(inner_stateless){
            var
             run$0 =
               function(env, path, clock, param, _V_){
                var
                 environment =
                   caml_call3
                    (Bonsai_Environment[2], env, reset_id, Bonsai_Import[13]);
                return caml_call5
                        (run,
                         environment,
                         path,
                         clock,
                         Bonsai_Import[12],
                         Bonsai_Import[9]);
               };
            return caml_call1
                    (Bonsai_Trampoline[3],
                     [0,
                      [0,
                       gathered_inner[1],
                       gathered_inner[2],
                       gathered_inner[3],
                       gathered_inner[4],
                       run$0,
                       gathered_inner[6],
                       gathered_inner[7],
                       gathered_inner[8]]]);
           }
           function wrap_inner(inject){
            var _T_ = Bonsai_Action[8];
            return function(_U_){return symbol(_T_, inject, _U_);};
           }
           function run$1(environment, path, clock, model, inject){
            var
             _M_ = caml_call1(inject, Bonsai_Action[9]),
             _N_ = caml_call1(Ui_incr[11], _M_),
             environment$0 =
               caml_call3(Bonsai_Environment[2], environment, reset_id, _N_);
            function _O_(param){
             var
              snapshot = param[1],
              result = caml_call1(Bonsai_Snapshot[2], snapshot),
              _Q_ = caml_call1(Bonsai_Snapshot[3], snapshot),
              _R_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _S_ = [0, caml_call3(Bonsai_Snapshot[5], _R_, _Q_, result), 0];
             return caml_call1(Bonsai_Trampoline[3], _S_);
            }
            var
             _P_ =
               caml_call5
                (run, environment$0, path, clock, model, wrap_inner(inject));
            return caml_call2(Bonsai_Trampoline[5][2][2], _P_, _O_);
           }
           function apply_action$0(inject, schedule_event, i, m, param){
            if(typeof param === "number")
             return caml_call3(reset, wrap_inner(inject), schedule_event, m);
            var inner = param[1];
            return caml_call5
                    (apply_action,
                     wrap_inner(inject),
                     schedule_event,
                     i,
                     m,
                     inner);
           }
           function reset$0(inject, schedule_event, m){
            return caml_call3(reset, wrap_inner(inject), schedule_event, m);
           }
           var
            _L_ =
              [0,
               [0,
                model,
                input,
                caml_call1(Bonsai_Action[1][5], action),
                apply_action$0,
                run$1,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _L_);
          },
        _z_ = _a_(inner$1);
       return caml_call2(Bonsai_Trampoline[5][2][2], _z_, _y_);
      default:
       var
        lifecycle = t[1],
        run$7 =
          function(environment, path, param, _B_, _A_){
           var
            pattern_syntax_035 =
              caml_call2(Bonsai_Value[23], environment, lifecycle);
           function _C_(param){
            if(0 === param){
             var
              _H_ =
                function(param){
                 if(! param)
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _d_], 1);
                 var pattern_syntax_036 = param[1];
                 return pattern_syntax_036;
                },
              lifecycle =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_035, _H_),
              _I_ =
                function(lifecycle){
                 return caml_call2(Bonsai_Path[23][6], path, lifecycle);
                };
             return caml_call2(Ui_incr[78][4][6], lifecycle, _I_);
            }
            if(1 === param) return do_nothing_lifecycle;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
           }
           function _D_(param){return param ? 0 : 1;}
           var
            _E_ = caml_call2(Ui_incr[78][4][6], pattern_syntax_035, _D_),
            lifecycle$0 = caml_call2(Ui_incr[78][4][1], _E_, _C_),
            _F_ = caml_call1(Ui_incr[11], 0),
            _G_ =
              [0,
               caml_call3
                (Bonsai_Snapshot[5], Bonsai_Input[2], [0, lifecycle$0], _F_),
               0];
           return caml_call1(Bonsai_Trampoline[3], _G_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$7,
                  Bonsai_Import[11],
                  0,
                  0]]);
    }
   }
   function gather(c){
    var _f_ = _a_(c);
    return caml_call1(Bonsai_Trampoline[2], _f_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Eval);
   var Bonsai_Eval = [0, gather];
   runtime.caml_register_global(43, Bonsai_Eval, cst_Bonsai_Eval$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai
//# unitInfo: Requires: Bonsai__Cont, Bonsai__Eval, Bonsai__Legacy_api, Bonsai__Pre_process, Bonsai__Proc_layer2, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai = "Bonsai",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc_layer2 = global_data.Bonsai__Proc_layer2,
    Bonsai_Eval = global_data.Bonsai__Eval,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Bonsai_Legacy_api = global_data.Bonsai__Legacy_api;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/bonsai.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "bonsai.ml");
   var
    Private = [0],
    Stable = [0, Private],
    path = Bonsai_Proc_layer2[53],
    gather = Bonsai_Eval[1],
    pre_process = Bonsai_Pre_process[1],
    reveal_value = Bonsai_Cont[59][4],
    conceal_value = Bonsai_Cont[59][5],
    top_level_handle = Bonsai_Cont[59][2],
    handle = Bonsai_Cont[59][1],
    perform = Bonsai_Cont[59][3],
    set_perform_on_exception = Bonsai_Cont[62][5][1],
    Value = Bonsai_Proc_layer2[3],
    Computation = Bonsai_Proc_layer2[4],
    Var = Bonsai_Proc_layer2[6],
    read = Bonsai_Proc_layer2[7],
    const$0 = Bonsai_Proc_layer2[8],
    path_id = Bonsai_Proc_layer2[9],
    pure = Bonsai_Proc_layer2[10],
    Computation_status = Bonsai_Proc_layer2[11],
    state = Bonsai_Proc_layer2[12],
    state_opt = Bonsai_Proc_layer2[13],
    toggle = Bonsai_Proc_layer2[14],
    Toggle = Bonsai_Proc_layer2[15],
    toggle$0 = Bonsai_Proc_layer2[16],
    Apply_action_context = Bonsai_Proc_layer2[17],
    state_machine0 = Bonsai_Proc_layer2[18],
    state_machine1 = Bonsai_Proc_layer2[19],
    actor0 = Bonsai_Proc_layer2[20],
    actor1 = Bonsai_Proc_layer2[21],
    narrow = Bonsai_Proc_layer2[22],
    narrow_via_field = Bonsai_Proc_layer2[23],
    of_module0 = Bonsai_Proc_layer2[24],
    of_module1 = Bonsai_Proc_layer2[25],
    of_module2 = Bonsai_Proc_layer2[26],
    freeze = Bonsai_Proc_layer2[27],
    lazy = Bonsai_Proc_layer2[28],
    fix = Bonsai_Proc_layer2[29],
    fix2 = Bonsai_Proc_layer2[30],
    scope_model = Bonsai_Proc_layer2[31],
    most_recent_some = Bonsai_Proc_layer2[32],
    most_recent_value_satisfying = Bonsai_Proc_layer2[33],
    previous_value = Bonsai_Proc_layer2[34],
    assoc = Bonsai_Proc_layer2[35],
    assoc_set = Bonsai_Proc_layer2[36],
    assoc_list = Bonsai_Proc_layer2[37],
    enum$0 = Bonsai_Proc_layer2[38],
    wrap = Bonsai_Proc_layer2[39],
    with_model_resetter = Bonsai_Proc_layer2[40],
    with_model_resetter$0 = Bonsai_Proc_layer2[41],
    yoink = Bonsai_Proc_layer2[42],
    sub = Bonsai_Proc_layer2[43],
    Clock = Bonsai_Proc_layer2[44],
    Edge = Bonsai_Proc_layer2[45],
    Memo = Bonsai_Proc_layer2[46],
    Effect_throttling = Bonsai_Proc_layer2[47],
    Dynamic_scope = Bonsai_Proc_layer2[48],
    Incr = Bonsai_Proc_layer2[49],
    Let_syntax = Bonsai_Proc_layer2[50],
    Expert = Bonsai_Proc_layer2[51],
    Debug = Bonsai_Proc_layer2[52],
    path$0 = Bonsai_Proc_layer2[53],
    Map = Bonsai_Proc_layer2[54],
    For_open = [0],
    const$1 = Bonsai_Legacy_api[1],
    input = Bonsai_Legacy_api[2],
    pure$0 = Bonsai_Legacy_api[3],
    compose = Bonsai_Legacy_api[4],
    map = Bonsai_Legacy_api[5],
    map_input = Bonsai_Legacy_api[6],
    of_module = Bonsai_Legacy_api[7],
    both = Bonsai_Legacy_api[8],
    state_machine = Bonsai_Legacy_api[9],
    enum$1 = Bonsai_Legacy_api[10],
    if$0 = Bonsai_Legacy_api[11],
    Map$0 = Bonsai_Legacy_api[12],
    arr = Bonsai_Legacy_api[13],
    symbol = Bonsai_Legacy_api[14],
    symbol$0 = Bonsai_Legacy_api[15],
    first = Bonsai_Legacy_api[16],
    second = Bonsai_Legacy_api[17],
    split = Bonsai_Legacy_api[18],
    extend_first = Bonsai_Legacy_api[19],
    extend_second = Bonsai_Legacy_api[20],
    fanout = Bonsai_Legacy_api[21],
    symbol$1 = Bonsai_Legacy_api[22],
    symbol$2 = Bonsai_Legacy_api[23],
    partial_compose_first = Bonsai_Legacy_api[24],
    pipe = Bonsai_Legacy_api[25],
    With_incr = Bonsai_Legacy_api[26],
    Infix = Bonsai_Legacy_api[27],
    Let_syntax$0 = Bonsai_Legacy_api[28],
    Arrow_deprecated =
      [0,
       const$1,
       input,
       pure$0,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$1,
       if$0,
       Map$0,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       split,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       symbol$2,
       partial_compose_first,
       pipe,
       With_incr,
       Infix,
       Let_syntax$0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai);
   var
    Bonsai =
      [0,
       [0,
        Bonsai_Cont[1],
        Bonsai_Cont[2],
        Bonsai_Cont[3],
        Bonsai_Cont[4],
        Bonsai_Cont[5],
        Bonsai_Cont[6],
        Bonsai_Cont[7],
        Bonsai_Cont[8],
        Bonsai_Cont[9],
        Bonsai_Cont[10],
        Bonsai_Cont[11],
        Bonsai_Cont[12],
        Bonsai_Cont[13],
        Bonsai_Cont[14],
        Bonsai_Cont[15],
        Bonsai_Cont[16],
        Bonsai_Cont[17],
        Bonsai_Cont[18],
        Bonsai_Cont[19],
        Bonsai_Cont[20],
        Bonsai_Cont[21],
        Bonsai_Cont[22],
        Bonsai_Cont[23],
        Bonsai_Cont[24],
        Bonsai_Cont[25],
        Bonsai_Cont[26],
        Bonsai_Cont[27],
        Bonsai_Cont[28],
        Bonsai_Cont[29],
        Bonsai_Cont[30],
        Bonsai_Cont[31],
        Bonsai_Cont[32],
        Bonsai_Cont[33],
        Bonsai_Cont[34],
        Bonsai_Cont[35],
        Bonsai_Cont[36],
        Bonsai_Cont[37],
        Bonsai_Cont[38],
        Bonsai_Cont[39],
        Bonsai_Cont[40],
        Bonsai_Cont[41],
        Bonsai_Cont[42],
        Bonsai_Cont[43],
        Bonsai_Cont[44],
        Bonsai_Cont[45],
        Bonsai_Cont[46],
        Bonsai_Cont[47],
        Bonsai_Cont[48],
        Bonsai_Cont[49],
        Bonsai_Cont[50],
        Bonsai_Cont[51],
        Bonsai_Cont[52],
        Bonsai_Cont[53],
        Bonsai_Cont[54],
        Bonsai_Cont[55],
        Bonsai_Cont[56],
        Bonsai_Cont[57],
        Bonsai_Cont[58],
        Bonsai_Cont[60],
        Bonsai_Cont[61],
        Bonsai_Cont[62]],
       Value,
       Computation,
       For_open,
       Var,
       read,
       const$0,
       path_id,
       pure,
       Computation_status,
       state,
       state_opt,
       toggle,
       Toggle,
       toggle$0,
       Apply_action_context,
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       narrow,
       narrow_via_field,
       of_module0,
       of_module1,
       of_module2,
       freeze,
       lazy,
       fix,
       fix2,
       scope_model,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc,
       assoc_set,
       assoc_list,
       enum$0,
       wrap,
       with_model_resetter,
       with_model_resetter$0,
       yoink,
       sub,
       Clock,
       Edge,
       Memo,
       Effect_throttling,
       Dynamic_scope,
       Incr,
       Let_syntax,
       Expert,
       Debug,
       path$0,
       Map,
       [0,
        reveal_value,
        conceal_value,
        top_level_handle,
        handle,
        perform,
        path,
        gather,
        pre_process,
        set_perform_on_exception],
       Arrow_deprecated,
       Stable];
   runtime.caml_register_global(16, Bonsai, cst_Bonsai);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJib25zYWkuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInNhbWVfd2l0bmVzcyIsImEiLCJiIiwiYWN0aW9uIiwiYWN0aW9uJDAiLCJpbnRvIiwiZnJvbSIsImludG8kMCIsImZyb20kMCIsInNhbWVfZnJvbSIsInNhbWVfaW50byIsIm91dGVyIiwiaW5uZXIiLCJvdXRlciQwIiwiaW5uZXIkMCIsInNhbWVfaW5uZXIiLCJzYW1lX291dGVyIiwiaW5uZXIkMSIsImlubmVyJDIiLCJhY3Rpb24kMSIsImtleSIsImFjdGlvbiQyIiwia2V5JDAiLCJzYW1lX2tleSIsInNhbWVfYWN0aW9uIiwiYWN0aW9uJDMiLCJtb2RlbF9rZXkiLCJpb19rZXkiLCJhY3Rpb24kNCIsIm1vZGVsX2tleSQwIiwiaW9fa2V5JDAiLCJzYW1lX2lvX2tleSIsInNhbWVfbW9kZWxfa2V5Iiwic2FtZV9hY3Rpb24kMCIsInNleHBfb2ZfdCIsInhfMDAzIiwidG9fc2V4cCIsInR5cGVfaWQiLCJicmFuY2giLCJ0b19zZXhwJDAiLCJ0b19zZXhwJDEiLCJhY3Rpb25faWQiLCJrZXlfaWQiLCJzZXhwX29mX2tleSIsInNleHBfb2ZfYWN0aW9uIiwiYWN0aW9uX2lkJDAiLCJtb2RlbF9rZXlfaWQiLCJpb19rZXlfaWQiLCJzZXhwX29mX2lvX2tleSIsInNleHBfb2ZfbW9kZWxfa2V5Iiwibm90aGluZ190eXBlX2lkIiwibm90aGluZyIsImxlYWYiLCJzdWIiLCJ3cmFwIiwibW9kZWxfcmVzZXQiLCJsYXp5Iiwic3dpdGNoJDAiLCJhc3NvYyIsImFzc29jX29uIiwic2FtZV93aXRuZXNzX2V4biIsInN0YXRpY19sZWFmIiwiZHluYW1pY19sZWFmIiwic3ViX2Zyb20iLCJzdWJfaW50byIsIndyYXBfaW5uZXIiLCJ3cmFwX291dGVyIiwibW9kZWxfcmVzZXRfaW5uZXIiLCJtb2RlbF9yZXNldF9vdXRlciIsInN3aXRjaCQxIiwibGF6eSQwIiwiYXNzb2MkMCIsImlkIiwiY29tcGFyZSIsImFzc29jX29uJDAiLCJpb19pZCIsImlvX2NvbXBhcmUiLCJyZWQ1MCIsInJlZDEwMCIsInJlZDIwMCIsInJlZDMwMCIsImFtYmVyMTAwIiwiYW1iZXIyMDAiLCJibHVlMTAwIiwiYmx1ZTIwMCIsImJsdWUzMDAiLCJlbWVyYWxkMTAwIiwiZW1lcmFsZDIwMCIsInBpbmsxMDAiLCJwaW5rMjAwIiwicGluazMwMCIsImVycm9yX3NvdXJjZV8wMDUiLCJlbmFibGVkIiwiZW5hYmxlIiwiZGlzYWJsZSIsImVtcHR5X2F0dHJzIiwiaGFzaF9mb2xkX3QiLCJoc3YiLCJhcmciLCJoYXNoIiwidF9vZl9zZXhwIiwic2V4cF8wMDYiLCJraW5kIiwiaW5jciIsImxhYmVsIiwiY29sb3IiLCJhdHRycyIsImFubm90YXRlX3BhY2tlZCIsInNleHBfb2ZfdCQwIiwiaW5wdXRfMDA4IiwidmFsdWVfMDEwIiwicmVzdWx0XzAxMiIsImxpZmVjeWNsZV8wMTQiLCJlbXB0eV9saWZlY3ljbGVfMDE2IiwibW9kZWxfMDE4IiwibW9kZWxfYW5kX2lucHV0XzAyMCIsImFzc29jX2tleV8wMjIiLCJhc3NvY19pbnB1dF8wMjQiLCJhc3NvY19yZXN1bHRzXzAyNiIsImFzc29jX2xpZmVjeWNsZXNfMDI4IiwiYXNzb2NfaW5wdXRzXzAzMCIsInBhdGhfMDMyIiwibGlmZWN5Y2xlX2FwcGx5X2FjdGlvbl9wYWlyXzAzIiwiYXJnXzAzNSIsImJuZHNfMDA3IiwiYXJnXzAzMyIsImJuZHNfMDA3JDAiLCJhcmdfMDMxIiwiYm5kc18wMDckMSIsImFyZ18wMjkiLCJibmRzXzAwNyQyIiwiYXJnXzAyNyIsImJuZHNfMDA3JDMiLCJhcmdfMDI1IiwiYm5kc18wMDckNCIsImFyZ18wMjMiLCJibmRzXzAwNyQ1IiwiYXJnXzAyMSIsImJuZHNfMDA3JDYiLCJhcmdfMDE5IiwiYm5kc18wMDckNyIsImFyZ18wMTciLCJibmRzXzAwNyQ4IiwiYXJnXzAxNSIsImJuZHNfMDA3JDkiLCJhcmdfMDEzIiwiYm5kc18wMDckMTAiLCJhcmdfMDExIiwiYm5kc18wMDckMTEiLCJhcmdfMDA5IiwiYm5kc18wMDckMTIiLCJnbG9iYWwiLCJjdXJyZW50IiwiZGlmZiIsImJlZm9yZSIsImFmdGVyIiwiYW5ub3RhdGVfcGFja2VkJDAiLCJpbmNyJDAiLCJhbm5vdGF0ZSIsImF0dHJpYnV0ZV9wYWNrZWQiLCJwb3Nfb3B0IiwidCIsInBvcyQwIiwicG9zIiwiciIsImwiLCJsYWJlbHMiLCJsYWJlbCQwIiwiYXR0cmlidXRlIiwiaW5qZWN0Iiwic2NoZWR1bGVfZXZlbnQiLCJldmVudCIsImNyZWF0ZSIsInJldmVhbCIsInVucmVhY2hhYmxlX2FjdGlvbiIsInVudXNhYmxlX2FwcGx5X2FjdGlvbiIsImlucHV0IiwibW9kZWwiLCJyZXNldF91bml0X21vZGVsIiwidW5pdF9tb2RlbCIsImlnbm9yZV9lZmZlY3QiLCJhZGRfb3ZlcndyaXRpbmciLCJkYXRhIiwiaWQyIiwia2V5MiIsImNvbXBhcmUxIiwiaWQxIiwia2V5MSIsImluY3JfZG9uX3Rfc3RhYmlsaXplIiwiZGlydHlfaW5jcmVtZW50YWxfdmFycyIsIm1hcmtfaW5jcmVtZW50YWxfZGlydHkiLCJuZXh0IiwiaW5pdGlhbCIsIm51bV9nZW5lcmF0aW9uc19mb3JfcHJ1bmluZyIsIndpdGhfZW1wdHlfZ2VuZXJhdGlvbiIsImVtcHR5IiwidHJhdmVyc2UiLCJpbml0aWFsX3N0YXRlIiwidHJhdmVyc2VyIiwidCQwIiwic3RhdGUiLCJzdGF0ZSQwIiwiaW50b19hY3Rpb24iLCJmcm9tX2FjdGlvbiIsInN0YXRlJDEiLCJpbm5lcl9hY3Rpb24iLCJzdGF0ZSQyIiwiaW5uZXJfYWN0aW9uJDAiLCJhY3Rpb25fdHlwZV9pZCIsInN0YXRlJDMiLCJpbm5lcl9hY3Rpb24kMSIsImtleWVkIiwic3RhdGUkNCIsImVtcHR5JDAiLCJpbm5lcl9hY3Rpb24kMiIsImtleWVkJDAiLCJzdGF0ZSQ1IiwiZW1wdHkkMSIsImlubmVyJDMiLCJhY3Rpb25fdHlwZV9pZCQwIiwiaW5uZXJfYWN0aW9uJDMiLCJzdGF0ZSQ2IiwiZW1wdHkkMiIsInR5cGVfaWQkMCIsImlubmVyJDQiLCJzaG91bGRfc3RhYmlsaXplX2R5bmFtaWNfYWN0aW8iLCJzdGF0cyIsImZvdW5kX2NvbmZsaWN0Iiwic2hvdWxkX3N0YWJpbGl6ZSIsIm1hcmtfc3RhYmlsaXphdGlvbiIsInJlcXVpcmVzX3N0YWJpbGl6YXRpb24iLCJiXzAwMiIsImFfMDAxIiwiY3VycmVudF9nZW5lcmF0aW9uIiwic3ViX3JlcXVpcmVzX3N0YWJpbGl6YXRpb24iLCJ3cmFwX3JlcXVpcmVzX3N0YWJpbGl6YXRpb24iLCJtb2RlbF9yZXNldF9yZXF1aXJlc19zdGFiaWxpemEiLCJkb25fdF9zdGFiaWxpemUiLCJhY3Rpb24kNyIsImFjdGlvbiQ1IiwiYWN0aW9uJDYiLCJpbnNlcnQiLCJ0JDEiLCJ0JDIiLCJjdXJyZW50X2dlbmVyYXRpb24kMCIsImluc2VydF91bmV4cGxvcmVkIiwid2l0aF9jdXJyZW50X2dlbmVyYXRpb24iLCJub2RlX29mX2FjdGlvbiIsImlubmVyJDUiLCJpbm5lciQ2IiwiaW5uZXIkNyIsImluc2VydF9zdWIiLCJpbnNlcnRfd3JhcCIsImluc2VydF9tb2RlbF9yZXNldCIsIml0ZXJfZGF0YSIsIm0iLCJmIiwibG9vcCIsImZpbHRlcl9hbmRfbG9vcF92aWFfZm9sZCIsIm1hcCIsImdlbmVyYXRpb24iLCJzaG91bGRfcHJ1bmUiLCJzdGFydF9kZWJ1Z2dpbmciLCJkaXNwbGF5X3N0YXRzIiwidmFsdWVfaWQiLCJuYW1lIiwibWFwMiIsInQxIiwidDIiLCJuYW1lZCIsIm5hbWVfc291cmNlIiwiY3V0b2ZmIiwiYWRkZWRfYnlfbGV0X3N5bnRheCIsImVxdWFsIiwidmFsdWUiLCJlbnYiLCJ4IiwieCQwIiwiaW5jcmVtZW50YWwiLCJoZXJlIiwiaGVyZSQwIiwiaGVyZSQxIiwiaW5jcmVtZW50YWxfbm9kZSIsImluY3JlbWVudGFsX25vZGUkMCIsImYkMCIsInQyJDAiLCJ0MSQwIiwiZiQxIiwidDMiLCJ0MiQxIiwidDEkMSIsImYkMiIsInQ0IiwidDMkMCIsInQyJDIiLCJ0MSQyIiwiZiQzIiwidDUiLCJ0NCQwIiwidDMkMSIsInQyJDMiLCJ0MSQzIiwiZiQ0IiwidDYiLCJ0NSQwIiwidDQkMSIsInQzJDIiLCJ0MiQ0IiwidDEkNCIsImYkNSIsInQ3IiwidDYkMCIsInQ1JDEiLCJ0NCQyIiwidDMkMyIsInQyJDUiLCJ0MSQ1IiwiZXgiLCJldmFsJDAiLCJyZXR1cm4kMCIsInJldHVybl9leG4iLCJleG4iLCJ0cmFuc3Bvc2Vfb3B0Iiwib3B0IiwiYm90aCIsIm1hcDMiLCJtYXA0IiwibWFwNSIsIm1hcDYiLCJtYXA3IiwiYWxsIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJyZXN0IiwibGVmdCIsInJpZ2h0Iiwib2ZfaW5jciIsInNldCIsInYiLCJ1cGRhdGUiLCJvbGQiLCJnZXQiLCJpbmNyX3ZhciIsInN0YXRpYyQwIiwiZHluYW1pYyIsImlucHV0JDAiLCJnIiwiaW5wdXQkMSIsIml0ZXJfaW5jcmVtZW50YWwiLCJ0b19pbmNyZW1lbnRhbCIsIm1lcmdlIiwiYSQwIiwiYiQwIiwiYiQxIiwiYiQyIiwiYSQxIiwiYiQzIiwiYiQ0IiwiYiQ1IiwiYSQyIiwiYiQ2IiwiYiQ3IiwiYiQ4IiwiYXJnMF8wMDEiLCJyZXMwXzAwMiIsImFyZzBfMDAzIiwicmVzMF8wMDQiLCJhXzAwNSIsImJfMDA2IiwiYV8wMDciLCJiXzAwOCIsImFfMDA5IiwiYl8wMTAiLCJvZmZzZXQiLCJsb3dlcl9uaWJibGVfdG9fYWxwaGEiLCJjIiwiY2hhcl90b19hbHBoYSIsImJ1ZiIsImMkMCIsImxvd2VyIiwidXBwZXIiLCJzZXhwX29mX3J1biIsImFyZzFfMDE3IiwiYXJnMF8wMTYiLCJyZXMwXzAxOCIsInJlczFfMDE5IiwicnVuX2xlbmd0aF9lbmNvZGluZyIsIml0ZW1zIiwibCQwIiwiYWNjIiwidGwiLCJjdXJyX2VsZW1lbnQiLCJhY2NfdGwiLCJjdXJyX2FjYyIsInhfMDIzIiwiYWNjJDAiLCJhY2MkMSIsInRsJDAiLCJmaXJzdCIsImFjYyQyIiwicnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zIiwieF8wMjAiLCJjb21wYXJlJDAiLCJiXzAyOCIsImFfMDI3IiwiYmwiLCJhbCIsImJfMDIyIiwiYV8wMjEiLCJhcHBlbmQiLCJlbGUiLCJpdGVtc19yZXYiLCJpdGVtc19mb3JfdGVzdGluZyIsInN0cmluZ19yZXByIiwidG9fdW5pcXVlX2lkZW50aWZpZXJfc3RyaW5nIiwicyIsInBhcmVudCIsInBhcmVudF9zIiwiayIsInN0cmluZyIsImkiLCJidWYkMCIsInJhaXNlX2R1cGxpY2F0ZSIsInBhdGgiLCJpdGVtcyQwIiwic2xvd19idXRfY29ycmVjdF9jb21wYXJlX2Zvcl9iIiwiYl8wMzIiLCJhXzAzMSIsImFfMDMzIiwiYl8wMzQiLCJoYXNfYWZ0ZXJfZGlzcGxheSIsIm1heWJlX2NvbnMiLCJoZCIsIm5ldyQwIiwiY29sbGVjdCIsImFmdGVyX2Rpc3BsYXkiLCJhZnRlcl9kaXNwbGF5cyIsImNvbGxlY3QkMCIsImRlYWN0aXZhdGlvbnMiLCJhY3RpdmF0aW9ucyIsIm9uX2RlYWN0aXZhdGUiLCJvbl9hY3RpdmF0ZSIsImRhdGFfZXF1YWwiLCJ1bml0X3R5cGVfaWQiLCJzZXhwX29mX2EkMCIsInhfMDAyIiwieF8wMDQiLCJ4XzAwNSIsIm11bHRpX21vZGVsIiwic2V4cF9vZl9oaWRkZW4iLCJiX3QiLCJhX3QiLCJzZXhwX29mX2EiLCJzZXhwX29mX2IiLCJhcmcxXzAwOSIsImFyZzBfMDA4IiwicmVzMF8wMTAiLCJyZXMxXzAxMSIsImJ5Iiwic2V4cF9vZl9ieSIsInhfMDEyIiwiYnkkMCIsImtfaW8iLCJrX21vZGVsIiwic2V4cF9vZl90JDEiLCJzZXhwX29mX2J5JDAiLCJzZXhwX29mX2tfaW8iLCJ4XzAxNyIsImFyZzFfMDE0IiwiYXJnMF8wMTMiLCJyZXMwXzAxNSIsInJlczFfMDE2IiwieF8wMTgiLCJ0eXBlX2VxdWFsX2lkX3NhbWVfd2l0bmVzcyIsInBhcmFtIiwicHJvb2YiLCJ0b190eXBlX2lkIiwidW5pdCIsInVuaXQkMCIsIm1vZGVsMSIsIm1vZGVsMiIsInNleHBfb2YiLCJkZWZhdWx0JDAiLCJNIiwiY21wIiwic2V4cF9vZl9tb2RlbCIsInNleHBfb2ZfbWFwX21vZGVsIiwieF8wMjgiLCJtb2RlbF9tYXBfdHlwZV9pZCIsIm1hcF9vbiIsIk1faW8iLCJ4XzAzMyIsImFyZzFfMDMwIiwiYXJnMF8wMjkiLCJyZXMwXzAzMSIsInJlczFfMDMyIiwiaW9fZXF1YWwiLCJvZl9tb2R1bGUiLCJlcXVhbCQwIiwibTIiLCJtMSIsImluZm8iLCJ4XzAzOSIsInhfMDM4IiwiYV8wMzQiLCJiXzAzNSIsImFfMDM2IiwiYl8wMzciLCJzZXhwX29mX2siLCJ4XzA0MCIsImZpbmRfZXhuIiwib2ZfbW9kZWxzIiwidG9fbW9kZWxzIiwibW9kZWxfaW5mbyIsInhfMDQxIiwiYV8wNDIiLCJiXzA0MyIsImFfMDQ0IiwiYl8wNDUiLCJjcmVhdGUkMCIsImJvdGgkMCIsIm1hcCQwIiwidW5pdCQxIiwiaW50JDAiLCJyZXN1bHQiLCJsaWZlY3ljbGUiLCJhdHRyaWJ1dGVfcG9zaXRpb25zIiwibGlmZWN5Y2xlX29yX2VtcHR5IiwiYmluZCIsInJ1biIsInQkNCIsInN0YWNrIiwic3RhY2skMCIsImskMCIsInQkMyIsInN0YWNrJDEiLCJhbGxfbWFwIiwiYWxpc3QiLCJncm91cCIsInRvX3N0cmluZyIsImRlcHRoIiwiY2hvaWNlcyIsImJ1ZmZlciIsImNob2ljZXMkMCIsImNob2ljZSIsImNob2ljZV9wb2ludCIsIm4iLCJkZXNjZW5kIiwidGVzdCIsImZpbmFsaXplIiwiYnVpbGRlciIsImJpbl9zaXplX3QkMCIsImJpbl93cml0ZV90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fc2hhcGVfdCQwIiwiYmluX3dyaXRlcl90JDAiLCJiaW5fcmVhZGVyX3QkMCIsImJpbl90JDAiLCJ0X29mX3NleHAkMCIsIm9mX3N0cmluZyIsInRvX3N0cmluZyQwIiwic3ltYm9sIiwic3ltYm9sJDAiLCJzeW1ib2wkMSIsInN5bWJvbCQyIiwic3ltYm9sJDMiLCJzeW1ib2wkNCIsIm1pbiIsIm1heCIsImFzY2VuZGluZyIsImRlc2NlbmRpbmciLCJiZXR3ZWVuIiwiY2xhbXBfZXhuIiwiY2xhbXAiLCJ2YWxpZGF0ZV9sYm91bmQiLCJ2YWxpZGF0ZV91Ym91bmQiLCJ2YWxpZGF0ZV9ib3VuZCIsImNvbXBhcmF0b3IkMCIsInZhcl9mcm9tX3BhcmVudCIsImFwcGVuZF90byIsImN1cnJlbnRfcGF0aCIsImNoaWxkX3BhdGgiLCJ2YWx1ZSQwIiwiZnJvbV9wYXJlbnQiLCJyZWN1cnNlIiwiZGVzY2VuZCQwIiwiZm9yX3ZhbHVlIiwiY29tcHV0YXRpb24iLCJzdGgiLCJjaG9pY2UkMCIsIm1hcF92YWx1ZSIsInBhcmVudF9wYXRoIiwiY3VycmVudF9wYXRoJDAiLCJhcm1zIiwiaW5kZXgiLCJtYXRjaCIsImFybXMkMCIsIm1vZGVsX2lkIiwiaW5qZWN0X2lkIiwicmVzZXRfaWQiLCJpZCQwIiwiY29tcHV0YXRpb25fbWFwcGVyIiwidmFsdWVfbWFwcGVyIiwiaW5pdCIsImNvbWJpbmUiLCJlbXB0eV9mb3JfbGF6eSIsImNvbWJpbmVfdXAiLCJkZWZhdWx0X2MiLCJkb3duIiwidXAiLCJyZXNldCIsImFwcGx5X2FjdGlvbiIsImR5bmFtaWNfYWN0aW9uIiwiaW5wdXRfaWQiLCJ1cCQwIiwicmVzZXQkMCIsImFwcGx5X2FjdGlvbiQwIiwic3RhdGljX2FjdGlvbiIsIm1vZGVsJDAiLCJjb21wdXRlIiwiaW5wdXQkMiIsInVwJDEiLCJ2aWEiLCJ1cDEiLCJ1cDIiLCJ2YWx1ZSQxIiwidmFsdWUkMiIsImFjYyQzIiwiZm9yX3NvbWUiLCJkYXRhX2lkIiwiY21wX2lkIiwia2V5X2NvbXBhcmF0b3IiLCJ1cDEkMCIsImFjYyQ0IiwibWFwJDEiLCJ1cDEkMSIsImFjYyQ1IiwibWF5X2NvbnRhaW5fcGF0aCIsIm1hcCQyIiwibWFwJDMiLCJ1cCQyIiwiYWNjJDYiLCJ1cDEkMiIsImFjYyQ3IiwibWF0Y2gkNyIsImFjY19hbmRfdXBfYW5kX2FybXMiLCJhY2NfYW5kX3Vwbl9hbmRfYXJtcyIsInVwbiIsInJlc2V0JDEiLCJkeW5hbWljX2FwcGx5X2FjdGlvbiIsInJlc3VsdF9pZCIsIndyYXBwZXJfbW9kZWwiLCJyZXMiLCJ2YWx1ZSQzIiwidmFsdWUkNCIsInVwJDMiLCJhY2MkOCIsInJlZHVjZV91cCIsImRlZmF1bHRfdiIsImluY3Jfbm9kZSIsInVwX2EiLCJ1cF9iIiwidXAyJDAiLCJ1cDMiLCJhY2MkOSIsImFjYyQxMCIsInVwMiQxIiwiYWNjJDExIiwidXAzJDAiLCJhY2MkMTIiLCJ1cDQiLCJhY2MkMTMiLCJhY2MkMTQiLCJ1cDIkMiIsImFjYyQxNSIsInVwMyQxIiwiYWNjJDE2IiwidXA0JDAiLCJhY2MkMTciLCJ1cDUiLCJhY2MkMTgiLCJ1cDEkMyIsImFjYyQxOSIsInVwMiQzIiwiYWNjJDIwIiwidXAzJDIiLCJhY2MkMjEiLCJ1cDQkMSIsImFjYyQyMiIsInVwNSQwIiwiYWNjJDIzIiwidXA2IiwiYWNjJDI0IiwidXAxJDQiLCJhY2MkMjUiLCJ1cDIkNCIsImFjYyQyNiIsInVwMyQzIiwiYWNjJDI3IiwidXA0JDIiLCJhY2MkMjgiLCJ1cDUkMSIsImFjYyQyOSIsInVwNiQwIiwiYWNjJDMwIiwidXA3IiwiYWNjJDMxIiwidXAkNCIsImUiLCJ2YWx1ZSQ3Iiwib25fdmFsdWUiLCJiZWhhdmlvciIsIm9uX2NvbXB1dGF0aW9uIiwidHJhbnNmb3JtX2MiLCJ0cmFuc2Zvcm1fdiIsInJlYWQiLCJ0aGVyZSIsImJyYW5jaGVzIiwid2l0aCQwIiwiZXhuJDAiLCJmZXRjaCIsInN0b3JlIiwib2ZfaW5wdXRfMDAxIiwiYXJnMF8wMDIiLCJyZXMwXzAwMyIsInN0YXRlX21hY2hpbmUxIiwic2V4cF9vZl9hY3Rpb24kMCIsImRlZmF1bHRfbW9kZWwiLCJzZXhwX29mX21vZGVsJDAiLCJjb250ZXh0Iiwic3RhdGVfbWFjaGluZTAiLCJ2YWx1ZV9jdXRvZmYiLCJjb21wdXRlX3dpdGhfY2xvY2siLCJjbG9jayIsImlucHV0X2FuZF9zdGF0ZSIsInBhdHRlcm5fc3ludGF4XzAwNSIsInBhdHRlcm5fc3ludGF4XzAwNiIsInBhdHRlcm5fc3ludGF4XzAwNyIsImNvbXBhcmF0b3IiLCJrZXlfdmFyIiwiZGF0YV92YXIiLCJpb19jb21wYXJhdG9yIiwibW9kZWxfY29tcGFyYXRvciIsImdldF9tb2RlbF9rZXkiLCJpb19jbXBfaWQiLCJtb2RlbF9jbXBfaWQiLCJyZXN1bHQkMCIsIm1vZGVsX3ZhciIsImluamVjdF92YXIiLCJ3aXRoX21vZGVsX3Jlc2V0dGVyIiwid2l0aF9jbG9jayIsInRvX3ZhbHVlIiwibWFwaSIsIm9mX3NldCIsImZpbHRlcl9tYXBpIiwiZmlsdGVyX21hcCIsInBhcnRpdGlvbl9tYXBpIiwidW5vcmRlcmVkX2ZvbGQiLCJhZGQiLCJyZW1vdmUiLCJ1bm9yZGVyZWRfZm9sZF93aXRoX2V4dHJhIiwiZXh0cmFfY2hhbmdlZCIsIm1fYW5kX2UiLCJwYXR0ZXJuX3N5bnRheF8wMDEiLCJwYXR0ZXJuX3N5bnRheF8wMDIiLCJtYXBpX2NvdW50IiwibWFwX2NvdW50IiwibWFwaV9taW4iLCJtYXBpX21heCIsIm1hcF9taW4iLCJtYXBfbWF4IiwibWluX3ZhbHVlIiwibWF4X3ZhbHVlIiwibWFwaV9ib3VuZHMiLCJtYXBfYm91bmRzIiwidmFsdWVfYm91bmRzIiwiYV9hbmRfYiIsInBhdHRlcm5fc3ludGF4XzAwMyIsInBhdHRlcm5fc3ludGF4XzAwNCIsIm1lcmdlX2JvdGhfc29tZSIsInVuemlwIiwidW56aXBfbWFwaSIsImtleXMiLCJyYW5rIiwibV9hbmRfayIsInBhdHRlcm5fc3ludGF4XzAwOCIsInN1YnJhbmdlIiwiYm91bmRzIiwibV9hbmRfYm91bmRzIiwicGF0dGVybl9zeW50YXhfMDA5IiwicGF0dGVybl9zeW50YXhfMDEwIiwic3VicmFuZ2VfYnlfcmFuayIsInBhdHRlcm5fc3ludGF4XzAxMSIsInBhdHRlcm5fc3ludGF4XzAxMiIsInJla2V5IiwiaW5kZXhfYnlpIiwiaW5kZXhfYnkiLCJ1bm9yZGVyZWRfZm9sZF9uZXN0ZWRfbWFwcyIsInRyYW5zcG9zZSIsImNvbGxhcHNlIiwiY29sbGFwc2VfYnkiLCJtZXJnZV9rZXlzIiwiZXhwYW5kIiwiTV9vdXRlciIsIk1faW5uZXIiLCJjb3VudGkiLCJjb3VudCIsImZvcl9hbGxpIiwiZm9yX2FsbCIsImV4aXN0c2kiLCJleGlzdHMiLCJzdW0iLCJhbGdlYnJhIiwiZXJyb3Jfc291cmNlXzEyNSIsImVycm9yX3NvdXJjZV8yMDAiLCJlcnJvcl9zb3VyY2VfMjA2IiwiZXJyb3Jfc291cmNlXzIyOSIsImFyciIsInN5bWJvbF9tYXAiLCJwdXJlIiwiY29uc3QkMCIsImZpeCIsImkyIiwiZml4MiIsIndpdGhfbW9kZWxfcmVzZXR0ZXIkMCIsImluc2lkZSIsImVudW0kMCIsIkUiLCJmb3J3YXJkX2luZGV4IiwicmV2ZXJzZV9pbmRleCIsIm1hdGNoJDAiLCJ3aXRoJDEiLCJzY29wZV9tb2RlbCIsInYkMCIsIm9mX21vZHVsZTEiLCJjb21wb25lbnQiLCJtb2RlbF9hbmRfaW5qZWN0Iiwib2ZfbW9kdWxlMiIsImkxIiwicmFjZV9keW5hbWljX21vZGVsIiwibW9kZWxfY3JlYXRvciIsImNvbXB1dGF0aW9uX3N0YXR1cyIsImFfMDE0IiwiYl8wMTUiLCJhXzAxMSIsImJfMDEyIiwib2ZfbW9kdWxlMCIsImFjdG9yMSIsInJlY3YiLCJjYiIsIm1ha2VfaW5qZWN0IiwiaW5qZWN0JDAiLCJwYXR0ZXJuX3N5bnRheF8wMjEiLCJwYXR0ZXJuX3N5bnRheF8wMjIiLCJwYXR0ZXJuX3N5bnRheF8wMjMiLCJjYWxsYmFjayIsInJlc3BvbnNlIiwibmV3X21vZGVsIiwiYWN0b3IwIiwicmVjdiQwIiwib2xkX21vZGVsIiwidG9nZ2xlIiwiYXJnMF8wMzgiLCJyZXMwXzAzOSIsInN0YXRlX2FuZF9pbmplY3QiLCJhXzA0MSIsImJfMDQyIiwidG9nZ2xlJDAiLCJwYXR0ZXJuX3N5bnRheF8wNDQiLCJwYXR0ZXJuX3N5bnRheF8wNDUiLCJwYXR0ZXJuX3N5bnRheF8wNDYiLCJzdGF0ZV9vcHQiLCJwYXRoX2lkIiwieW9pbmsiLCJwYXR0ZXJuX3N5bnRheF8wNTIiLCJwYXR0ZXJuX3N5bnRheF8wNTMiLCJhXzA1NCIsImJfMDU1IiwidHJhbnNwb3NlX2pvaW4iLCJ0cmlwbGUiLCJsZXRfc3ludGF4XzA1OCIsImxldF9zeW50YXhfMDU5IiwibGV0X3N5bnRheF8wNjAiLCJsaWZlY3ljbGUkMCIsImV2ZW50X29wdF92YWx1ZSIsImFmdGVyX2Rpc3BsYXkkMCIsImV2ZW50X3ZhbHVlIiwiZXZlbnRfdmFsdWUkMCIsIndhaXRfYWZ0ZXJfZGlzcGxheSIsIm9uX2NoYW5nZSIsInBhdHRlcm5fc3ludGF4XzA2MyIsInNldF9zdGF0ZSIsInBhdHRlcm5fc3ludGF4XzA2NyIsInBhdHRlcm5fc3ludGF4XzA2OCIsInBhdHRlcm5fc3ludGF4XzA2NCIsInBhdHRlcm5fc3ludGF4XzA2NSIsIm9uX2NoYW5nZSQwIiwicHJldiIsImNhbGxiYWNrJDAiLCJtYW51YWxfcmVmcmVzaF9pbXBsZW1lbnRhdGlvbiIsIndyYXBfcmVzdWx0IiwiZWZmZWN0IiwicGF0dGVybl9zeW50YXhfMDc4IiwibmV4dF9zZXFudW0iLCJzZXhwX29mX3Jlc3VsdCIsImVxdWFsX3Jlc3VsdCIsImxhc3RfcmVzdWx0XzA4NSIsImxhc3Rfc2VxbnVtXzA4MyIsImFyZ18wODYiLCJibmRzXzA4MiIsImFyZ18wODQiLCJibmRzXzA4MiQwIiwic2V4cF9vZl9yZXN1bHQkMCIsImFyZzFfMDkwIiwiYXJnMF8wODkiLCJyZXMwXzA5MSIsInJlczFfMDkyIiwicGF0dGVybl9zeW50YXhfMDkzIiwiaW5qZWN0X2NoYW5nZSIsImxhc3RfcmVzdWx0IiwibmV3X2Zvcl9jdXRvZmZfMTA3Iiwib2xkX2Zvcl9jdXRvZmZfMTA4Iiwic2VxbnVtIiwicGF0dGVybl9zeW50YXhfMDk0IiwicGF0dGVybl9zeW50YXhfMDk1IiwiYV8wOTYiLCJiXzA5NyIsInBhdHRlcm5fc3ludGF4XzA3OSIsImFfMDgwIiwiYl8wODEiLCJtYW51YWxfcmVmcmVzaCIsImVmZmVjdF9vbl9jaGFuZ2UiLCJzZXhwX29mX2lucHV0IiwiZXF1YWxfaW5wdXQiLCJnZXRfaW5wdXQiLCJwYXR0ZXJuX3N5bnRheF8xMTYiLCJyZWZyZXNoIiwicGF0dGVybl9zeW50YXhfMTIxIiwicGF0dGVybl9zeW50YXhfMTE3IiwicGF0dGVybl9zeW50YXhfMTE4Iiwib2ZfYV8xMjIiLCJzZXhwXzEyNyIsInRhZ18xMjgiLCJzZXhwX2FyZ3NfMTI5IiwiYXJnMF8xMzAiLCJyZXMwXzEzMSIsIm9mX2FfMTMzIiwiYXJnMF8xMzQiLCJyZXMwXzEzNSIsImNtcF9hIiwiYV8xMzciLCJiXzEzOCIsImJfMTQwIiwiYV8xMzkiLCJyZXF1ZXN0X2Fib3J0ZWRfZXJyb3IiLCJjb2xsYXBzZV90b19vcl9lcnJvciIsInRhZ19zIiwibWF5YmVfdGFnX2Vycm9yIiwiZXJyb3IiLCJ0YWciLCJjb2xsYXBzZV9mdW5fdG9fb3JfZXJyb3IiLCJzZXhwX29mX2lucHV0JDAiLCJwb2xsIiwicGF0dGVybl9zeW50YXhfMTQxIiwicGF0dGVybl9zeW50YXhfMTUwIiwicmVxdWVzdCIsInBhdHRlcm5fc3ludGF4XzE0MiIsInBhdHRlcm5fc3ludGF4XzE0MyIsIm5leHRfdXAiLCJydW5uaW5nIiwicnVuX2VmZmVjdCIsImFib3J0Iiwic29mdF9hc3NlcnRfcnVubmluZyIsImVmZmVjdCQxIiwibmV4dF91cCQxIiwibmV4dF91cCQwIiwiZWZmZWN0JDAiLCJuZXh0X3VwJDIiLCJlZmZlY3QkMyIsIm5leHRfdXAkMyIsImVmZmVjdCQyIiwiYV8xNDQiLCJiXzE0NSIsImZyZWV6ZSIsInBhdHRlcm5fc3ludGF4XzE1MiIsInBhdHRlcm5fc3ludGF4XzE1NSIsInBhdHRlcm5fc3ludGF4XzE1NiIsInBhdHRlcm5fc3ludGF4XzE1NyIsInBhdHRlcm5fc3ludGF4XzE1MyIsInBhdHRlcm5fc3ludGF4XzE1NCIsInRodW5rIiwib3V0IiwibW9zdF9yZWNlbnRfc29tZSIsInBhdHRlcm5fc3ludGF4XzE2MiIsInNldF9tb3N0X3JlY2VudF92YWxpZF92YWx1ZSIsIm1vc3RfcmVjZW50X3ZhbGlkX3ZhbHVlIiwicGF0dGVybl9zeW50YXhfMTY3IiwicGF0dGVybl9zeW50YXhfMTcxIiwicGF0dGVybl9zeW50YXhfMTY4IiwicGF0dGVybl9zeW50YXhfMTYzIiwicGF0dGVybl9zeW50YXhfMTY0IiwibW9zdF9yZWNlbnRfdmFsdWVfc2F0aXNmeWluZyIsImNvbmRpdGlvbiIsInByZXZpb3VzX3ZhbHVlIiwicGF0dGVybl9zeW50YXhfMTcyIiwic2V0X3ByZXYiLCJwYXR0ZXJuX3N5bnRheF8xNzciLCJwYXR0ZXJuX3N5bnRheF8xNzMiLCJwYXR0ZXJuX3N5bnRheF8xNzQiLCJhc3NvY19zZXQiLCJhc19tYXAiLCJhc3NvY19saXN0IiwibGlzdCIsImdldF9rZXkiLCJpbnB1dF9tYXAiLCJwYXR0ZXJuX3N5bnRheF8xODMiLCJvdXRwdXRfbWFwIiwicGF0dGVybl9zeW50YXhfMTg0IiwicGF0dGVybl9zeW50YXhfMTg1IiwiZmFsbGJhY2siLCJmYWxsYmFjayQwIiwiYmFzZSIsImZvcl9zb21lJDAiLCJmb3Jfc29tZSQyIiwiZm9yX3NvbWUkMSIsImxvb2t1cCIsInZhciQwIiwiZGVyaXZlZCIsIm1vZGlmeSIsImNoYW5nZSIsInJldmVydCIsInNldCQwIiwiYXBwcm94X25vdyIsInRpY2tfZXZlcnkiLCJub3ciLCJzZXhwXzIwMSIsImF0IiwidGltZSIsImdldF9jdXJyZW50X3RpbWUiLCJzbGVlcCIsInVudGlsIiwidF9vZl9zZXhwJDEiLCJzZXhwXzIwOCIsInRhZ18yMDkiLCJzZXhwX2FyZ3NfMjEwIiwiYXJnMV8yMTIiLCJhcmcwXzIxMSIsInJlczBfMjEzIiwicmVzMV8yMTQiLCJhcmcxXzIxNiIsImFyZzBfMjE1IiwicmVzMF8yMTciLCJyZXMxXzIxOCIsImVxdWFsJDEiLCJhXzIxOSIsImJfMjIwIiwiYl8yMjQiLCJiXzIyMiIsImFfMjIzIiwiYV8yMjEiLCJhXzIyNSIsImJfMjI2IiwidF9vZl9zZXhwJDIiLCJzZXhwXzIzMSIsInRhZ18yMzIiLCJzZXhwX2FyZ3NfMjMzIiwiYXJnMF8yMzQiLCJyZXMwXzIzNSIsInNleHBfb2ZfdCQyIiwiYXJnMF8yMzYiLCJyZXMwXzIzNyIsImVxdWFsJDIiLCJhXzIzOCIsImJfMjM5IiwiYl8yNDEiLCJhXzI0MCIsImdlbmVyaWNfZXZlcnkiLCJjcmVhdGVfZWZmZWN0Iiwic3BhbiIsInRyaWdnZXJfb25fYWN0aXZhdGUiLCJiYXNlX3RpbWUiLCJpbml0aWFsX21vZGVsIiwicmFjZV9pbnB1dCIsIm5leHRfdGltZSIsInBhdHRlcm5fc3ludGF4XzI1NSIsImV2ZXJ5X21vZGVsIiwiYmVmb3JlX29yX2FmdGVyIiwiYV8yNzUiLCJiXzI3NiIsImFfMjc3IiwiYl8yNzgiLCJ0XzI4MCIsInRfMjc5IiwidF8yODIiLCJ0XzI4MSIsImFfMjgzIiwiYl8yODQiLCJ4XzI3NCIsImFyZzFfMjcxIiwiYXJnMF8yNzAiLCJyZXMwXzI3MiIsInJlczFfMjczIiwicGF0dGVybl9zeW50YXhfMjYxIiwidHJpZ2dlcl9pZCIsInBhdHRlcm5fc3ludGF4XzI2MiIsInBhdHRlcm5fc3ludGF4XzI2MyIsInBhdHRlcm5fc3ludGF4XzI1NiIsInBhdHRlcm5fc3ludGF4XzI1NyIsImFfMjU4IiwiYl8yNTkiLCJzdGFydF90aW1lIiwiYV8yNDQiLCJiXzI0NSIsImVuc3VyZV9jbG9ja19hZHZhbmNlcyIsIm9sZF90aW1lIiwibmV3X3RpbWUiLCJldmVyeV93YWl0X3BlcmlvZF9hZnRlcl9wcmV2aW8iLCJzdGFydCIsImV2ZXJ5X3dhaXRfcGVyaW9kX2FmdGVyX3ByZXZpbyQwIiwiZXZlcnlfbXVsdGlwbGVfb2ZfcGVyaW9kX2Jsb2NrIiwiZXZlcnlfbXVsdGlwbGVfb2ZfcGVyaW9kX25vbl9iIiwiZXZlcnkiLCJ3aGVuX3RvX3N0YXJ0X25leHRfZWZmZWN0Iiwic2V4cF9vZl90JDMiLCJvZl9xdWVyeV8yOTMiLCJhcmcwXzI5NCIsInJlczBfMjk1IiwiYXJnMF8yOTYiLCJyZXMwXzI5NyIsImFyZzFfMjk5IiwiYXJnMF8yOTgiLCJyZXMwXzMwMCIsInJlczFfMzAxIiwiUXVlcnkiLCJ4XzMwMyIsInhfMzA4IiwicSIsInEkMCIsInBhdHRlcm5fc3ludGF4XzMwOSIsInF1ZXJpZXMiLCJyZXNwb25zZXMiLCJxdWVyeSIsInBhdHRlcm5fc3ludGF4XzMxMCIsInBhdHRlcm5fc3ludGF4XzMxMSIsImFfMzEyIiwiYl8zMTMiLCJhXzMwNiIsImJfMzA3IiwibG9va3VwJDAiLCJwYXR0ZXJuX3N5bnRheF8zMTgiLCJwYXR0ZXJuX3N5bnRheF8zMjAiLCJwYXR0ZXJuX3N5bnRheF8zMjciLCJwcmV2JDAiLCJwYXR0ZXJuX3N5bnRheF8zMTkiLCJtYXAyJDAiLCJsZXRfc3ludGF4XzMzNSIsIm1hcDIkMSIsIm1hcDMkMCIsIm1hcDQkMCIsIm1hcDUkMCIsIm1hcDYkMCIsIm1hcDckMCIsIm1hcDIkMiIsIm1hcDMkMSIsIm1hcDQkMSIsIm1hcDUkMSIsIm1hcDYkMSIsIm1hcDckMSIsInJlZHVjZV9iYWxhbmNlZCIsInhzIiwiZm9sZF9yaWdodCIsImFsbF91bml0IiwibWFwX29mX2NvbXB1dGF0aW9ucyIsIm1hcDIkMyIsIm1hcDMkMiIsIm1hcDQkMiIsIm1hcDUkMiIsIm1hcDYkMiIsIm1hcDckMiIsImN1dG9mZiQwIiwib2ZfYV8wMDEiLCJvZl9hXzAwMiIsInNxdWFzaCIsIm90aGVyIiwiY2FuX2NvbnRhaW5fcGF0aCIsImdlbiIsImZyZWUiLCJjYW5fY29udGFpbl9wYXRoJDAiLCJwYSIsInBiIiwicGEkMCIsInBiJDAiLCJwYSQxIiwicGEkMiIsImdlbiQwIiwiZnJlZV9hIiwicGIkMSIsInBhJDMiLCJwYiQyIiwiZ2VuX2IiLCJmcmVlX2IiLCJmcmVlJDAiLCJwYSQ0IiwidmFsdWVfdG9fZnVuY3Rpb24iLCJzYW1lX25hbWUiLCJsZXRfc3ludGF4XzAwMyIsImxldF9zeW50YXhfMDA0IiwibGV0X3N5bnRheF8wMDciLCJsZXRfc3ludGF4XzAwOCIsImxldF9zeW50YXhfMDEwIiwibGV0X3N5bnRheF8wMTEiLCJsZXRfc3ludGF4XzAxMiIsImxldF9zeW50YXhfMDE0IiwibGV0X3N5bnRheF8wMTUiLCJsZXRfc3ludGF4XzAxNiIsImxldF9zeW50YXhfMDE3IiwibGV0X3N5bnRheF8wMTkiLCJsZXRfc3ludGF4XzAyMCIsImxldF9zeW50YXhfMDIxIiwibGV0X3N5bnRheF8wMjIiLCJsZXRfc3ludGF4XzAyMyIsImxldF9zeW50YXhfMDI1IiwibGV0X3N5bnRheF8wMjYiLCJsZXRfc3ludGF4XzAyNyIsImxldF9zeW50YXhfMDI4IiwibGV0X3N5bnRheF8wMjkiLCJsZXRfc3ludGF4XzAzMCIsImxldF9zeW50YXhfMDMyIiwibGV0X3N5bnRheF8wMzMiLCJsZXRfc3ludGF4XzAzNCIsImxldF9zeW50YXhfMDM1IiwibGV0X3N5bnRheF8wMzYiLCJsZXRfc3ludGF4XzAzNyIsImxldF9zeW50YXhfMDM4IiwiYm90aF91c2VfcGF0aCIsImZyb21fcGF0aCIsImludG9fcGF0aCIsImVudiQwIiwiZ2VuX2EiLCJmcmVlX2IkMCIsImZyZWUkMSIsImJvdGhfdXNlX3BhdGgkMCIsImdlbiQxIiwiY29tcHV0YXRpb25fdG9fZnVuY3Rpb24iLCJrZXlfY29tcGFyZSIsIm1ha2VfcGF0aF9lbGVtZW50IiwicGF0aCQwIiwid3JhcF92YWx1ZSIsInZhbHVlX2V4Y2VwdGlvbl9mb2xkZXIiLCJsYXp5X2NvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnMiLCJjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCIsImNvbnN0YW50X29yX3ZhbHVlIiwid2l0aF9pZCIsImNvbnN0YW50Iiwic2ltcGxpZnlfYXNzb2NfaWZfc2ltcGwiLCJhc3NvY190IiwiZXZhbHVhdGVkIiwiY29uc3RhbnRzX2luX3Njb3BlIiwibmV3X2NvbnN0YW50c19pbl9zY29wZSIsIm1hcF92IiwiZGF0YV9iaW5kaW5nIiwiZm9sZGVkIiwiZGF0YV9pZCQwIiwia2V5X2lkJDAiLCJrZXlfY29tcGFyYXRvciQwIiwibWF0Y2gkMSIsImV4biQxIiwiY29uc3RhbnRzX2luX3Njb3BlJDAiLCJ2YWx1ZV93aXRoX2lkIiwicmVidWlsZCIsInIkMCIsIndhc193cmFwcGVyX2N1dG9mZl9hZGRlZF9ieV9sZSIsIndhc19uZXN0ZWRfY3V0b2ZmX2FkZGVkX2J5X2xldCIsImlubmVyX2VxdWFsIiwiY29uc3RhbnRfZm9sZCIsInZhbHVlX21hcCIsInQ1JDIiLCJ0NyQwIiwidDYkMiIsInQ2JDEiLCJmbGF0dGVuX3ZhbHVlcyIsInByZV9wcm9jZXNzIiwibm9kZV9wYXRoX2J1aWxkZXIiLCJhXzAwMyIsImJfMDA0IiwiYTAiLCJoc3YkMCIsImEwJDAiLCJoc3YkMSIsImFyZzBfMDA3IiwicmVzMF8wMDgiLCJhcmcwXzAwOSIsInVpZCIsIm9mX3R5cGVfaWQiLCJpZF8wMTgiLCJoZXJlXzAxNiIsImtpbmRfMDE0Iiwibm9kZV9wYXRoXzAxMiIsImJuZHNfMDExIiwiYm5kc18wMTEkMCIsInNleHBfb2Zfa2luZCIsImJuZHNfMDExJDEiLCJibmRzXzAxMSQyIiwiYWRkZWRfYnlfbGV0X3N5bnRheF8wMjMiLCJ0XzAyMSIsImFyZ18wMjQiLCJibmRzXzAyMCIsImFyZ18wMjIiLCJibmRzXzAyMCQwIiwiaW5wdXRzXzAyNiIsImJuZHNfMDI1IiwiaWRfMDI5IiwiYXJnXzAzMCIsImJuZHNfMDI4IiwidWlkXzAzMiIsImJuZHNfMDMxIiwiYWRkZWRfYnlfbGV0X3N5bnRheF8wMzciLCJ0XzAzNSIsImFyZ18wMzgiLCJibmRzXzAzNCIsImFyZ18wMzYiLCJibmRzXzAzNCQwIiwiaW5wdXRzXzA0MCIsImFyZ18wNDEiLCJibmRzXzAzOSIsIm9mX2NvbXBsZXRlIiwiY29tcGxldGUiLCJpbnB1dHMiLCJtaW5pbWFsX3NleHBfb2ZfdCIsIm9mX3ZhbHVlIiwiaW5pdGlhbF9wYXRoIiwiaGVscGVyIiwiY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIiwidmFsdWVzIiwib3V0ZXJfaWQiLCJvZl92YWx1ZSQwIiwidG9fc3RyaW5nX2h1bSIsImhlcmVfMDQ3Iiwia2luZF8wNDUiLCJub2RlX3BhdGhfMDQzIiwiYXJnXzA0OCIsImJuZHNfMDQyIiwiYXJnXzA0NiIsInNleHBfb2Zfa2luZCQwIiwiYm5kc18wNDIkMCIsImFyZ18wNDQiLCJibmRzXzA0MiQxIiwidmFsdWVfMDUwIiwiYXJnXzA1MSIsImJuZHNfMDQ5IiwiaW5wdXRfMDUzIiwiYXJnXzA1NCIsImJuZHNfMDUyIiwiaW5wdXRfMDU2IiwiYXJnXzA1NyIsImJuZHNfMDU1IiwiaW5wdXRfMDU5IiwiYXJnXzA2MCIsImJuZHNfMDU4IiwidF8wNjIiLCJhcmdfMDYzIiwiYm5kc18wNjEiLCJpbnRvXzA2OSIsInZpYV8wNjciLCJmcm9tXzA2NSIsImFyZ18wNzAiLCJibmRzXzA2NCIsImFyZ18wNjgiLCJibmRzXzA2NCQwIiwiYXJnXzA2NiIsImJuZHNfMDY0JDEiLCJpbm5lcl8wNzYiLCJ2YWx1ZV8wNzQiLCJpZF8wNzIiLCJhcmdfMDc3IiwiYm5kc18wNzEiLCJhcmdfMDc1IiwiYm5kc18wNzEkMCIsImFyZ18wNzMiLCJibmRzXzA3MSQxIiwiaWRfMDc5IiwiYXJnXzA4MCIsImJuZHNfMDc4IiwiYnlfMDkwIiwiZGF0YV9pZF8wODgiLCJjbXBfaWRfMDg2Iiwia2V5X2lkXzA4NCIsIm1hcF8wODIiLCJhcmdfMDkxIiwiYm5kc18wODEiLCJhcmdfMDg5IiwiYm5kc18wODEkMCIsImFyZ18wODciLCJibmRzXzA4MSQxIiwiYXJnXzA4NSIsImJuZHNfMDgxJDIiLCJhcmdfMDgzIiwiYm5kc18wODEkMyIsImJ5XzEwMyIsImRhdGFfaWRfMTAxIiwibW9kZWxfY21wX2lkXzA5OSIsIm1vZGVsX2tleV9pZF8wOTciLCJpb19rZXlfaWRfMDk1IiwibWFwXzA5MyIsImFyZ18xMDQiLCJibmRzXzA5MiIsImFyZ18xMDIiLCJibmRzXzA5MiQwIiwiYXJnXzEwMCIsImJuZHNfMDkyJDEiLCJhcmdfMDk4IiwiYm5kc18wOTIkMiIsImFyZ18wOTYiLCJibmRzXzA5MiQzIiwiYXJnXzA5NCIsImJuZHNfMDkyJDQiLCJtYXBfMTA2IiwiYXJnXzEwNyIsImJuZHNfMTA1IiwiYXJtc18xMTEiLCJtYXRjaF8xMDkiLCJhcmdfMTEyIiwiYm5kc18xMDgiLCJhcmdfMTEwIiwiYm5kc18xMDgkMCIsInRfMTE0IiwiYXJnXzExNSIsImJuZHNfMTEzIiwiaW5uZXJfMTIxIiwiaW5qZWN0X2lkXzExOSIsIm1vZGVsX2lkXzExNyIsImFyZ18xMjIiLCJibmRzXzExNiIsImFyZ18xMjAiLCJibmRzXzExNiQwIiwiYXJnXzExOCIsImJuZHNfMTE2JDEiLCJpbm5lcl8xMjYiLCJyZXNldF9pZF8xMjQiLCJhcmdfMTI3IiwiYm5kc18xMjMiLCJhcmdfMTI1IiwiYm5kc18xMjMkMCIsInZhbHVlXzEyOSIsImFyZ18xMzAiLCJibmRzXzEyOCIsInRfMTMyIiwiYXJnXzEzMyIsImJuZHNfMTMxIiwib2ZfY29tcHV0YXRpb24iLCJub2RlX3BhdGgiLCJraW5kJDAiLCJraW5kJDEiLCJraW5kJDIiLCJraW5kJDMiLCJraW5kJDQiLCJraW5kJDUiLCJwb3RlbnRpYWxseV9ldmFsdWF0ZWQiLCJpZCQxIiwia2luZCQ2Iiwia2luZCQ3Iiwia2luZCQ4IiwidmFsdWVfMTM1IiwiYXJnXzEzNiIsImJuZHNfMTM0IiwiaW5wdXRfMTM4IiwiYXJnXzEzOSIsImJuZHNfMTM3IiwiaW5wdXRfMTQxIiwiYXJnXzE0MiIsImJuZHNfMTQwIiwiaW5wdXRfMTQ0IiwiYXJnXzE0NSIsImJuZHNfMTQzIiwidF8xNDciLCJhcmdfMTQ4IiwiYm5kc18xNDYiLCJpbnRvXzE1NCIsInZpYV8xNTIiLCJmcm9tXzE1MCIsImFyZ18xNTUiLCJibmRzXzE0OSIsImFyZ18xNTMiLCJibmRzXzE0OSQwIiwiYXJnXzE1MSIsImJuZHNfMTQ5JDEiLCJpbm5lcl8xNjEiLCJ2YWx1ZV8xNTkiLCJpZF8xNTciLCJhcmdfMTYyIiwiYm5kc18xNTYiLCJhcmdfMTYwIiwiYm5kc18xNTYkMCIsImFyZ18xNTgiLCJibmRzXzE1NiQxIiwiaWRfMTY0IiwiYXJnXzE2NSIsImJuZHNfMTYzIiwiYnlfMTc1IiwiZGF0YV9pZF8xNzMiLCJjbXBfaWRfMTcxIiwia2V5X2lkXzE2OSIsIm1hcF8xNjciLCJhcmdfMTc2IiwiYm5kc18xNjYiLCJhcmdfMTc0IiwiYm5kc18xNjYkMCIsImFyZ18xNzIiLCJibmRzXzE2NiQxIiwiYXJnXzE3MCIsImJuZHNfMTY2JDIiLCJhcmdfMTY4IiwiYm5kc18xNjYkMyIsImJ5XzE4OCIsImRhdGFfaWRfMTg2IiwibW9kZWxfY21wX2lkXzE4NCIsIm1vZGVsX2tleV9pZF8xODIiLCJpb19rZXlfaWRfMTgwIiwibWFwXzE3OCIsImFyZ18xODkiLCJibmRzXzE3NyIsImFyZ18xODciLCJibmRzXzE3NyQwIiwiYXJnXzE4NSIsImJuZHNfMTc3JDEiLCJhcmdfMTgzIiwiYm5kc18xNzckMiIsImFyZ18xODEiLCJibmRzXzE3NyQzIiwiYXJnXzE3OSIsImJuZHNfMTc3JDQiLCJtYXBfMTkxIiwiYXJnXzE5MiIsImJuZHNfMTkwIiwiYXJtc18xOTYiLCJtYXRjaF8xOTQiLCJhcmdfMTk3IiwiYm5kc18xOTMiLCJhcmdfMTk1IiwiYm5kc18xOTMkMCIsInRfMTk5IiwiYXJnXzIwMCIsImJuZHNfMTk4IiwiaW5uZXJfMjA2IiwiaW5qZWN0X2lkXzIwNCIsIm1vZGVsX2lkXzIwMiIsImFyZ18yMDciLCJibmRzXzIwMSIsImFyZ18yMDUiLCJibmRzXzIwMSQwIiwiYXJnXzIwMyIsImJuZHNfMjAxJDEiLCJyZXNldF9pZF8yMTEiLCJpbm5lcl8yMDkiLCJhcmdfMjEyIiwiYm5kc18yMDgiLCJhcmdfMjEwIiwiYm5kc18yMDgkMCIsInZhbHVlXzIxNCIsImFyZ18yMTUiLCJibmRzXzIxMyIsInRfMjE3IiwiYXJnXzIxOCIsImJuZHNfMjE2Iiwib2ZfY29tcGxldGUkMCIsIm1pbmltYWxfc2V4cF9vZl90JDAiLCJpbnB1dHMkMCIsImNoaWxkcmVuIiwic2VsZl8xIiwiYWRkZWRfYnlfbGV0X3N5bnRheCQwIiwibm9kZV9wYXRoJDAiLCJpbnB1dCQzIiwiaW5wdXQkNCIsInZpYSQwIiwiaWQkMiIsImNtcF9pZCQwIiwiYnkkMSIsImRhdGFfaWQkMSIsImlvX2tleV9pZCQwIiwibW9kZWxfa2V5X2lkJDAiLCJtb2RlbF9jbXBfaWQkMCIsImRhdGFfaWQkMiIsImJ5JDIiLCJtYXAkNCIsIm1vZGVsX2lkJDAiLCJpbmplY3RfaWQkMCIsInJlc2V0X2lkJDAiLCJzZWxmXzIiLCJzZWxmXzMiLCJvIiwic2VsZl81Iiwic2FuaXRpemVfZm9yX3Rlc3RpbmciLCJ0YWJsZSIsInJlcGxhY2UiLCJzZWxmXzciLCJyZXBsYWNlX29sZF91aWRzX3dpdGhfc2FuaXRpemUiLCJiYXNpY19zaGFwZSIsInRvb2x0aXAiLCJzaGFwZSIsInRvb2x0aXAkMCIsInRvb2x0aXAkMSIsInJlZ2lzdGVyIiwiYXJyb3ciLCJ0byIsImFycm93X3N0cmluZyIsImFycm93X2Zyb21fbWFueSIsInJlZ2lzdGVyX25hbWVkIiwiZm9sbG93X3NrZWxldG9uX3ZhbHVlIiwicmVnaXN0ZXIkMCIsIm1lIiwidGhlbSIsImZvbGxvd19keW5hbWljX3NrZWxldG9uX2xlYWYiLCJmb2xsb3dfc2tlbGV0b25fY29tcHV0YXRpb24iLCJjb21wdXRhdGlvbiQwIiwicmVnaXN0ZXJfY29tcHV0YXRpb24iLCJtZSQwIiwiY29tcHV0YXRpb24kMSIsImNvbXB1dGF0aW9uJDIiLCJtZSQxIiwibWUkMiIsIm1lJDMiLCJtZSQ0IiwibWUkNSIsIm1lJDYiLCJtZSQ3IiwibWUkOCIsIm1lJDkiLCJtZSQxMCIsIm1lJDExIiwidG9fZG90Iiwic2tlbGV0b25fY29tcHV0YXRpb24iLCJlcnJvcl9zb3VyY2VfMDAyIiwiZXJyb3Jfc291cmNlXzAxNCIsImVycm9yX3NvdXJjZV8wMzEiLCJlcnJvcl9zb3VyY2VfMDUxIiwiZXJyb3Jfc291cmNlXzA3MSIsImVycm9yX3NvdXJjZV8wODEiLCJlcnJvcl9zb3VyY2VfMDkzIiwiZXJyb3Jfc291cmNlXzEwMSIsIm5vZGVfdHlwZSIsImhlcmVfMDA3Iiwibm9kZV90eXBlXzAwNSIsImFyZ18wMDgiLCJibmRzXzAwNCIsImFyZ18wMDYiLCJibmRzXzAwNCQwIiwiYmluX3NoYXBlX3QiLCJiaW5fc2l6ZV90IiwidjIiLCJ2MSIsInNpemUiLCJiaW5fd3JpdGVfdCIsImJpbl93cml0ZXJfdCIsImJpbl9yZWFkX3QiLCJwb3NfcmVmIiwidmludCIsImJpbl9yZWFkX3QkMCIsInZfbm9kZV90eXBlIiwidl9oZXJlIiwiYmluX3JlYWRlcl90IiwiYmluX3QiLCJ4XzAxNSIsImlkXzAyMSIsImhlcmVfMDE5Iiwibm9kZV90eXBlXzAxNyIsImJuZHNfMDE2IiwiYXJnXzAyMCIsImJuZHNfMDE2JDAiLCJhcmdfMDE4IiwiYm5kc18wMTYkMSIsImFfMDIzIiwiYl8wMjQiLCJhXzAyNSIsImJfMDI2IiwibiQwIiwiZ3JvdXAkMCIsInYzIiwic2l6ZSQwIiwicG9zJDEiLCJ2X2lkIiwidG9fdjEiLCJvZl92MSIsImdyb3VwJDEiLCJiaW5fc2hhcGVfdCQxIiwiZ3JvdXAkMiIsImJpbl9zaGFwZV90JDIiLCJiaW5fc2l6ZV90JDEiLCJiaW5fd3JpdGVfdCQxIiwiYmluX3dyaXRlcl90JDEiLCJiaW5fcmVhZF90JDMiLCJiaW5fcmVhZF90JDQiLCJ2X3RyZWUiLCJ2X2RhZyIsInZfaW5mbyIsImJpbl9yZWFkZXJfdCQxIiwiYmluX3QkMSIsInhfMDMyIiwiZGFnIiwidHJlZSIsImluZm9fMDM4IiwiZGFnXzAzNiIsInRyZWVfMDM0IiwiYXJnXzAzOSIsImJuZHNfMDMzIiwiYXJnXzAzNyIsImJuZHNfMDMzJDAiLCJibmRzXzAzMyQxIiwiZ3JvdXAkMyIsImJpbl9zaGFwZV90JDMiLCJiaW5fc2l6ZV90JDIiLCJiaW5fd3JpdGVfdCQyIiwiYmluX3dyaXRlcl90JDIiLCJiaW5fcmVhZF90JDUiLCJiaW5fcmVhZF90JDYiLCJiaW5fcmVhZGVyX3QkMiIsImJpbl90JDIiLCJ4XzA1MiIsImluZm9fMDU4IiwiZGFnXzA1NiIsInRyZWVfMDU0IiwiYXJnXzA1OSIsImJuZHNfMDUzIiwiYm5kc18wNTMkMCIsImFyZ18wNTUiLCJibmRzXzA1MyQxIiwib2ZfdjEkMCIsInRvX3YxJDAiLCJncm91cCQ0IiwiYmluX3NoYXBlX3QkNCIsImJpbl9zaXplX3QkMyIsImJpbl93cml0ZV90JDMiLCJiaW5fd3JpdGVyX3QkMyIsImJpbl9yZWFkX3QkNyIsImJpbl9yZWFkX3QkOCIsImJpbl9yZWFkZXJfdCQzIiwiYmluX3QkMyIsInRfb2Zfc2V4cCQzIiwieF8wNzIiLCJpbmZvXzA3OCIsImRhZ18wNzYiLCJ0cmVlXzA3NCIsImFyZ18wNzkiLCJibmRzXzA3MyIsImJuZHNfMDczJDAiLCJibmRzXzA3MyQxIiwib2ZfdjIiLCJ0b192MiIsInRfb2Zfc2V4cCQ0IiwieF8wODIiLCJwb3NfY251bSIsInBvc19ib2wiLCJwb3NfbG51bSIsInBvc19mbmFtZSIsInNleHBfb2ZfdCQ0IiwicG9zX2NudW1fMDkwIiwicG9zX2JvbF8wODgiLCJwb3NfbG51bV8wODYiLCJwb3NfZm5hbWVfMDg0IiwiYm5kc18wODMiLCJibmRzXzA4MyQwIiwiYm5kc18wODMkMSIsImJuZHNfMDgzJDIiLCJncm91cCQ1IiwiYmluX3NoYXBlX3QkNSIsImJpbl9zaXplX3QkNCIsInY0Iiwic2l6ZSQxIiwiYmluX3dyaXRlX3QkNCIsInBvcyQyIiwiYmluX3JlYWRfdCQ5Iiwidl9wb3NfZm5hbWUiLCJ2X3Bvc19sbnVtIiwidl9wb3NfYm9sIiwidl9wb3NfY251bSIsInRfb2Zfc2V4cCQ1IiwieF8wOTQiLCJzZXhwX29mX3QkNSIsImhlcmVfMDk4Iiwibm9kZV90eXBlXzA5NiIsImFyZ18wOTkiLCJibmRzXzA5NSIsImFyZ18wOTciLCJibmRzXzA5NSQwIiwiZ3JvdXAkNiIsImJpbl9zaGFwZV90JDYiLCJiaW5fc2l6ZV90JDUiLCJiaW5fd3JpdGVfdCQ1IiwiYmluX3dyaXRlcl90JDQiLCJiaW5fcmVhZF90JDEwIiwiYmluX3JlYWRfdCQxMSIsImJpbl9yZWFkZXJfdCQ0IiwiYmluX3QkNCIsImdyb3VwJDciLCJiaW5fc2hhcGVfdCQ3IiwiYmluX3NpemVfdCQ2IiwiYmluX3dyaXRlX3QkNiIsImJpbl93cml0ZXJfdCQ1IiwiYmluX3JlYWRfdCQxMiIsImJpbl9yZWFkX3QkMTMiLCJiaW5fcmVhZGVyX3QkNSIsImJpbl90JDUiLCJ0X29mX3NleHAkNiIsInhfMTAyIiwic2V4cF9vZl90JDYiLCJpbmZvXzEwOCIsImRhZ18xMDYiLCJ0cmVlXzEwNCIsImFyZ18xMDkiLCJibmRzXzEwMyIsImJuZHNfMTAzJDAiLCJhcmdfMTA1IiwiYm5kc18xMDMkMSIsImFkZF9kYWdfcmVsYXRpb25zaGlwIiwiYWRkX3RyZWVfcmVsYXRpb25zaGlwIiwiZW52aXJvbm1lbnQiLCJub2RlX2luZm8iLCJ2YXJfZnJvbV9wYXJlbnQkMCIsInNuZCIsImZzdCIsIm5hbWVkX2lkIiwiY29tcHV0YXRpb25fbWFwIiwicmVjdXJzZWQiLCJpdGVyX2dyYXBoX3VwZGF0ZXMiLCJvbl91cGRhdGUiLCJncmFwaF9pbmZvIiwidG8kMCIsImdtIiwiZnJvbV9pbmZvIiwicHVsbF9zb3VyY2VfbG9jYXRpb25zX2Zyb21fbmVhIiwiZmluZF9hbmRfdXBkYXRlX25lYXJlc3RfaGVyZSIsInVwZGF0ZV9uZWFyZXN0X2hlcmUiLCJleHRyYWN0X25vZGVfcGF0aF9mcm9tX2VudHJ5X2wiLCJpbnN0cnVtZW50X2NvbXB1dGF0aW9uIiwic3RhcnRfdGltZXIiLCJzdG9wX3RpbWVyIiwiZW50cnlfbGFiZWwiLCJjb21wdXRlX2xhYmVsIiwiYXBwbHlfYWN0aW9uX2xhYmVsIiwiYnlfbGFiZWwiLCJjb21wdXRlZCIsIndyYXBwZWRfdmFsdWUiLCJkIiwiZXJyb3Jfc291cmNlXzAwMyIsInBlcmZvcm1fb25fZXhjZXB0aW9uIiwic2V0X3BlcmZvcm1fb25fZXhjZXB0aW9uIiwicGVyZm9ybSIsImdyYXBoIiwiY29tcHV0YXRpb25fdG9fcGVyZm9ybSIsIm9sZF9mIiwibmV3X2YiLCJldmVudHVhbF9yZXN1bHQiLCJpc29sYXRlZCIsImJhY2t1cF9mIiwidGhlX29uZV9hbmRfb25seSIsIm51bV9uZXN0ZWRfdG9wX2xldmVsX2hhbmRsZXMiLCJoYW5kbGUiLCJoYW5kbGVfd2l0aF9nbG9iYWxfZ3JhcGgiLCJpbnNpZGVfYV9sYXp5IiwiY29tcHV0YXRpb25fY29udGV4dCIsInRvcF9sZXZlbF9oYW5kbGUiLCJ3aXRoX2dsb2JhbF9ncmFwaCIsIm5vX2dyYXBoIiwiYXJyMSIsImFycjIiLCJoIiwic3BsaXQiLCJ0dXBsZSIsInN0YXRlX2Zvcl9wcm9jMiIsInN0YXRlX29wdF9mb3JfcHJvYzIiLCJ0b2dnbGVfZm9yX3Byb2MyIiwic3RhdGVfbWFjaGluZTBfZm9yX3Byb2MyIiwic3RhdGVfbWFjaGluZTFfZm9yX3Byb2MyIiwiYWN0b3IwX2Zvcl9wcm9jMiIsImFjdG9yMV9mb3JfcHJvYzIiLCJkZWxheSIsImlvX2NtcCIsIm1vZGVsX2NtcCIsIm9uIiwiZm9yJDAiLCJ3cmFwX2Zvcl9wcm9jMiIsIndpdGhfbW9kZWxfcmVzZXR0ZXJfZm9yX3Byb2MyIiwicGVlayIsInNleHBfMDA0Iiwib25fY2hhbmdlX2Zvcl9wcm9jMiIsIm9uX2NoYW5nZV9mb3JfcHJvYzIkMCIsImxpZmVjeWNsZV9mb3JfcHJvYzIiLCJsaWZlY3ljbGVfZm9yX3Byb2MyJDAiLCJhZnRlcl9kaXNwbGF5X2Zvcl9wcm9jMiIsImFmdGVyX2Rpc3BsYXlfZm9yX3Byb2MyJDAiLCJzdGFydGluZyIsIm1hbnVhbF9yZWZyZXNoX2Zvcl9wcm9jMiIsImluc2lkZSQwIiwiZl93aXRoX3Jlc2V0dGVyIiwicmVzZXR0ZXIiLCJyZXNldHRlciQwIiwib25fY2hhbmdlJDEiLCJvbl9jaGFuZ2VfcHJpbnRfcyIsImVuYWJsZV9pbmNyZW1lbnRhbF9hbm5vdGF0aW9ucyIsImRpc2FibGVfaW5jcmVtZW50YWxfYW5ub3RhdGlvbiIsInN3aXRjaF9mb3JfcHJvYzIiLCJzeW1ib2xfbWFwJDAiLCJyZXR1cm4kMiIsImFycjFfd2l0aF9sb2NhdGlvbiIsInZhbHVlX2N1dG9mZiQwIiwiY29uY2VhbF92YWx1ZSIsInRvZ2dsZSQxIiwid2l0aF9tb2RlbF9yZXNldHRlciQxIiwid2l0aF9tb2RlbF9yZXNldHRlciQyIiwiZGVidWdfb25fY2hhbmdlIiwiZGVidWdfb25fY2hhbmdlX3ByaW50X3MiLCJuYXJyb3ciLCJwZWVrX3N0YXRlIiwibmFycm93X3ZpYV9maWVsZCIsImZpZWxkIiwicmV2ZWFsX3ZhbHVlIiwiY29uY2VhbF92YWx1ZSQwIiwiY29tcHV0ZSQwIiwiY29tcF9yZXR1cm4iLCJzdWJjb21wdXRhdGlvbiIsImNvbXB1dGF0aW9uX3JldHVybiIsImFsbCQwIiwiYWxsX3VuaXQkMCIsImJvdGgkMiIsIm1hcCQ1Iiwic2NvcGVfbW9kZWwkMCIsInRpbWVfc3BhbiIsImN0eCIsIm1lc3NhZ2UiLCJyZWxhdGl2ZV90byIsInZhbHVlX2lzX2NvbnN0YW50Iiwid2FybmluZ3MiLCJpc191bmZvbGRlZF9jb25zdGFudCIsInVuZm9sZGVkX2NvbnN0YW50c19saW50ZXIiLCJ3YXJuaW5ncyQwIiwic3RhdGVfbWFjaGluZTFfdG9fc3RhdGVfbWFjaGluIiwibGlzdF93YXJuaW5ncyIsImRlZmF1bHRfbG9jYXRpb24iLCJsaW50ZXJzIiwibGludGVyIiwiY29tcG9zZSIsIm1hcF9pbnB1dCIsInN0YXRlX21hY2hpbmUiLCJ3aGljaCIsImlmJDAiLCJjaG9vc2UiLCJ0aGVuIiwiZWxzZSQwIiwiY29uZCIsImFzc29jX2lucHV0IiwiYXNzb2NpX2lucHV0IiwiYXNzb2NpX2lucHV0X3dpdGhfZXh0cmEiLCJleHRyYSIsInNlY29uZCIsImYxIiwiZjIiLCJwYXR0ZXJuX3N5bnRheF8wMTMiLCJvdXQxIiwib3V0MiIsImV4dGVuZF9maXJzdCIsImV4dGVuZF9zZWNvbmQiLCJmYW5vdXQiLCJwYXJ0aWFsX2NvbXBvc2VfZmlyc3QiLCJvdXQxJDAiLCJzaGFyZWQiLCJwaXBlIiwicjEiLCJpbnRlcm1lZGlhdGUiLCJyMiIsIm9mX21vZHVsZSQwIiwicGF0dGVybl9zeW50YXhfMDI3IiwicGF0dGVybl9zeW50YXhfMDI4IiwicGF0dGVybl9zeW50YXhfMDI5IiwicHVyZSQwIiwid2l0aF90aHJlYWRlZF9lbnZpcm9ubWVudCIsIm1heV9jb250YWluX2xpZmVjeWNsZSIsInJ1biQwIiwic25hcHNob3QiLCJ3cmFwX3N1Yl9mcm9tIiwid3JhcF9zdWJfaW50byIsInBpY2siLCJ0aHJlYWRfZW52IiwibWF5YmVfZW52IiwiY2FwdHVyZSIsImdhdGhlciIsImluZm9fZnJvbSIsImluZm9faW50byIsInRocmVhZF9lbnZpcm9ubWVudCIsImlzX3VuaXQiLCJmcm9tX21vZGVsIiwiY2FuX3J1bl9mcm9tX3N0YXRlbGVzcyIsImJvdGhfdXNlX3BhdGgkMSIsImZyb21fcmVzdWx0IiwiZW52aXJvbm1lbnQkMCIsImVudmlyb25tZW50JDEiLCJpbnRvX21vZGVsIiwiY2FuX3J1bl9pbnRvX3N0YXRlbGVzcyIsImJvdGhfdXNlX3BhdGgkMiIsInJ1biQxIiwibW9kZWxfaW50byIsIm1vZGVsX2Zyb20iLCJtb2RlbF9mcm9tJDAiLCJtb2RlbF9pbnRvJDAiLCJidWlsZF9jaGFpbiIsImxlbmd0aF9vZl9hY2MiLCJib3VuZCIsImZpbmFsJDAiLCJyZWR1Y2UiLCJoZXJlX3JpZ2h0IiwidmlhX3JpZ2h0IiwiYm91bmRfcmlnaHQiLCJoZXJlX2xlZnQiLCJ2aWFfbGVmdCIsImJvdW5kX2xlZnQiLCJnYXRoZXIkMCIsImNoYWluIiwibGVuZ3RoX29mX2luaXQiLCJyZWR1Y2VyIiwibGluayIsImZpbmFsJDEiLCJ1bnppcDNfbWFwaSIsImJjIiwic2Vjb25kX2FuZF90aGlyZCIsImZpcnN0JDAiLCJ0aGlyZCIsInNlY29uZCQwIiwiZG9fbm90aGluZ19saWZlY3ljbGUiLCJ3cmFwX2xlYWYiLCJpbmplY3RfZHluYW1pYyIsImFwcGx5X2FjdGlvbiQxIiwid3JhcF9sZWFmJDAiLCJydW4kMiIsImluamVjdF9zdGF0aWMiLCJhcHBseV9hY3Rpb24kMiIsInJlc2V0JDIiLCJydW4kMyIsImdhdGhlcmVkIiwicnVuJDQiLCJ3cmFwX2Fzc29jIiwiaW5wdXRfaW5mbyIsImlucHV0X2FuZF9tb2RlbHMiLCJpbnB1dF9hbmRfbW9kZWxzX21hcCIsImNyZWF0ZV9rZXllZCIsImlucHV0X2FuZF9tb2RlbCIsImtleV9pbmNyIiwibGlmZWN5Y2xlX21hcCIsInJlc3VsdHNfbWFwIiwidW5mb2xkZWQiLCJzcGVjaWZpY19tb2RlbCIsIndyYXBfYXNzb2Nfb24iLCJtb2RlbF9rZXlfY29tcGFyYXRvciIsIm1vZGVsX2xvb2t1cCIsImxldF9zeW50YXhfMDE4IiwicnVuJDUiLCJ3cmFwX3N3aXRjaCIsIm51bV9jb250YWluX3BhdGgiLCJuZWVkc19kaXNhbWJpZ3VhdGlvbiIsImFjdGlvbl9pbmZvIiwiY2hvc2VuX21vZGVsIiwicmVzdWx0X2lucHV0X2FuZF9saWZlY3ljbGUiLCJhbSIsImltIiwidG0iLCJjaG9zZW5fbW9kZWxfaW5mbyIsImluZGV4JDAiLCJjaG9zZW5faW5wdXRfaW5mbyIsImNob3Nlbl9pbnB1dCIsIm5ld19tb2RlbCQwIiwibW9kZWxzIiwibGF6eV9jb21wdXRhdGlvbiIsIndyYXBfbGF6eSIsIm1vZGVsJDEiLCJydW4kNiIsIndpdG5lc3MiLCJpbnB1dF9tb2RlbCIsImFwcGx5X2FjdGlvbiQzIiwiaW5wdXRfdHlwZV9pZCIsInJlc2V0JDMiLCJyZXNldF9tZSIsImlubmVyX2lucHV0IiwiaW5uZXJfbW9kZWwiLCJvdXRlcl9tb2RlbCIsImlubmVyX3NuYXBzaG90IiwiaW5uZXJfcmVzdWx0IiwiYWN0aW9uX291dGVyIiwibmV3X291dGVyX21vZGVsIiwiYWN0aW9uX2lubmVyIiwibmV3X2lubmVyX21vZGVsIiwib3V0ZXJfbW9kZWwkMCIsImlubmVyX21vZGVsJDAiLCJnYXRoZXJlZF9pbm5lciIsInNhbWVfbW9kZWwiLCJpbm5lcl9zdGF0ZWxlc3MiLCJydW4kNyIsInBhdHRlcm5fc3ludGF4XzAzNSIsInBhdHRlcm5fc3ludGF4XzAzNiJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9ib25zYWlfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9hY3Rpb24ubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvYW5ub3RhdGVfaW5jci5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9hcHBseV9hY3Rpb25fY29udGV4dC5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9pbXBvcnQubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvZW52aXJvbm1lbnQubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkva2V5ZWQubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvc3RhYmlsaXphdGlvbl90cmFja2VyLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3ZhbHVlLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3Zhci5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9pbnB1dC5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9wYXRoLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL2xpZmVjeWNsZS5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9tYXlfY29udGFpbi5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9tZXRhLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3NuYXBzaG90Lm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3RyYW1wb2xpbmUubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvbm9kZV9wYXRoLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3RyYW5zZm9ybS5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9maXhfdHJhbnNmb3JtX2ludGYubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvZml4X3RyYW5zZm9ybS5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9wcm9jX21pbi5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9pbmNyMC5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9tYXAwX2ludGYubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvbWFwMC5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9wcm9jLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL3NpbXBsaWZ5Lm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL2NvbnN0YW50X2ZvbGQubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvZmxhdHRlbl92YWx1ZXMubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvcHJlX3Byb2Nlc3MubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvc2tlbGV0b24ubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvdG9fZG90Lm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL2dyYXBoX2luZm8ubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvaW5zdHJ1bWVudGF0aW9uLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL2NvbnQubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvcHJvY19sYXllcjIubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvbGludGVyLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYm9uc2FpL2xlZ2FjeV9hcGkubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvZXZhbF9zdWIubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9ib25zYWkvZXZhbC5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2JvbnNhaS9ib25zYWkubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7R0FzSWtCOztJQUFBOzs7O0U7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7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O0lBQ0FWO0lBQ0E3QztJQUNBSjtJQUNBVjtJQUNBRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUtZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQVFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQWxCcEJzRTtRQUNBVjtRQUNBN0M7UUFDQUo7UUFDQVY7UUFQQS80QztRQUNBeWhEO1FBQ0E5ckI7UUFNQW1qQjs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5BY3Rpb24gKilcbm1vZHVsZSBBY3Rpb24gPSBCb25zYWlfX0FjdGlvblxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuQW5ub3RhdGVfaW5jciAqKVxubW9kdWxlIEFubm90YXRlX2luY3IgPSBCb25zYWlfX0Fubm90YXRlX2luY3JcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkFwcGx5X2FjdGlvbl9jb250ZXh0ICopXG5tb2R1bGUgQXBwbHlfYWN0aW9uX2NvbnRleHQgPSBCb25zYWlfX0FwcGx5X2FjdGlvbl9jb250ZXh0XG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5Db21wdXRhdGlvbiAqKVxubW9kdWxlIENvbXB1dGF0aW9uID0gQm9uc2FpX19Db21wdXRhdGlvblxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuQ29uc3RhbnRfZm9sZCAqKVxubW9kdWxlIENvbnN0YW50X2ZvbGQgPSBCb25zYWlfX0NvbnN0YW50X2ZvbGRcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkNvbnQgKilcbm1vZHVsZSBDb250ID0gQm9uc2FpX19Db250XG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5FbnZpcm9ubWVudCAqKVxubW9kdWxlIEVudmlyb25tZW50ID0gQm9uc2FpX19FbnZpcm9ubWVudFxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuRXZhbCAqKVxubW9kdWxlIEV2YWwgPSBCb25zYWlfX0V2YWxcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkV2YWxfc3ViICopXG5tb2R1bGUgRXZhbF9zdWIgPSBCb25zYWlfX0V2YWxfc3ViXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5GaXhfdHJhbnNmb3JtICopXG5tb2R1bGUgRml4X3RyYW5zZm9ybSA9IEJvbnNhaV9fRml4X3RyYW5zZm9ybVxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuRml4X3RyYW5zZm9ybV9pbnRmICopXG5tb2R1bGUgRml4X3RyYW5zZm9ybV9pbnRmID0gQm9uc2FpX19GaXhfdHJhbnNmb3JtX2ludGZcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkZsYXR0ZW5fdmFsdWVzICopXG5tb2R1bGUgRmxhdHRlbl92YWx1ZXMgPSBCb25zYWlfX0ZsYXR0ZW5fdmFsdWVzXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5HcmFwaF9pbmZvICopXG5tb2R1bGUgR3JhcGhfaW5mbyA9IEJvbnNhaV9fR3JhcGhfaW5mb1xuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuSW1wb3J0ICopXG5tb2R1bGUgSW1wb3J0ID0gQm9uc2FpX19JbXBvcnRcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkltcG9ydF9zdGFibGUgKilcbm1vZHVsZSBJbXBvcnRfc3RhYmxlID0gQm9uc2FpX19JbXBvcnRfc3RhYmxlXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5JbmNyMCAqKVxubW9kdWxlIEluY3IwID0gQm9uc2FpX19JbmNyMFxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuSW5wdXQgKilcbm1vZHVsZSBJbnB1dCA9IEJvbnNhaV9fSW5wdXRcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkluc3RydW1lbnRhdGlvbiAqKVxubW9kdWxlIEluc3RydW1lbnRhdGlvbiA9IEJvbnNhaV9fSW5zdHJ1bWVudGF0aW9uXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5LZXllZCAqKVxubW9kdWxlIEtleWVkID0gQm9uc2FpX19LZXllZFxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuTGVnYWN5X2FwaSAqKVxubW9kdWxlIExlZ2FjeV9hcGkgPSBCb25zYWlfX0xlZ2FjeV9hcGlcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLkxlZ2FjeV9hcGlfaW50ZiAqKVxubW9kdWxlIExlZ2FjeV9hcGlfaW50ZiA9IEJvbnNhaV9fTGVnYWN5X2FwaV9pbnRmXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5MaWZlY3ljbGUgKilcbm1vZHVsZSBMaWZlY3ljbGUgPSBCb25zYWlfX0xpZmVjeWNsZVxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuTGludGVyICopXG5tb2R1bGUgTGludGVyID0gQm9uc2FpX19MaW50ZXJcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLk1hcDAgKilcbm1vZHVsZSBNYXAwID0gQm9uc2FpX19NYXAwXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5NYXAwX2ludGYgKilcbm1vZHVsZSBNYXAwX2ludGYgPSBCb25zYWlfX01hcDBfaW50ZlxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuTWF5X2NvbnRhaW4gKilcbm1vZHVsZSBNYXlfY29udGFpbiA9IEJvbnNhaV9fTWF5X2NvbnRhaW5cblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLk1ldGEgKilcbm1vZHVsZSBNZXRhID0gQm9uc2FpX19NZXRhXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5Nb2R1bGVfdHlwZXMgKilcbm1vZHVsZSBNb2R1bGVfdHlwZXMgPSBCb25zYWlfX01vZHVsZV90eXBlc1xuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuTm9kZV9wYXRoICopXG5tb2R1bGUgTm9kZV9wYXRoID0gQm9uc2FpX19Ob2RlX3BhdGhcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLlBhdGggKilcbm1vZHVsZSBQYXRoID0gQm9uc2FpX19QYXRoXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5QcmVfcHJvY2VzcyAqKVxubW9kdWxlIFByZV9wcm9jZXNzID0gQm9uc2FpX19QcmVfcHJvY2Vzc1xuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuUHJvYyAqKVxubW9kdWxlIFByb2MgPSBCb25zYWlfX1Byb2NcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLlByb2NfaW50ZiAqKVxubW9kdWxlIFByb2NfaW50ZiA9IEJvbnNhaV9fUHJvY19pbnRmXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5Qcm9jX2xheWVyMiAqKVxubW9kdWxlIFByb2NfbGF5ZXIyID0gQm9uc2FpX19Qcm9jX2xheWVyMlxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuUHJvY19taW4gKilcbm1vZHVsZSBQcm9jX21pbiA9IEJvbnNhaV9fUHJvY19taW5cblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLlNpbXBsaWZ5ICopXG5tb2R1bGUgU2ltcGxpZnkgPSBCb25zYWlfX1NpbXBsaWZ5XG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5Ta2VsZXRvbiAqKVxubW9kdWxlIFNrZWxldG9uID0gQm9uc2FpX19Ta2VsZXRvblxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuU25hcHNob3QgKilcbm1vZHVsZSBTbmFwc2hvdCA9IEJvbnNhaV9fU25hcHNob3RcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLlN0YWJpbGl6YXRpb25fdHJhY2tlciAqKVxubW9kdWxlIFN0YWJpbGl6YXRpb25fdHJhY2tlciA9IEJvbnNhaV9fU3RhYmlsaXphdGlvbl90cmFja2VyXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5Ub19kb3QgKilcbm1vZHVsZSBUb19kb3QgPSBCb25zYWlfX1RvX2RvdFxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuVHJhbXBvbGluZSAqKVxubW9kdWxlIFRyYW1wb2xpbmUgPSBCb25zYWlfX1RyYW1wb2xpbmVcblxuKCoqIEBjYW5vbmljYWwgQm9uc2FpLlRyYW5zZm9ybSAqKVxubW9kdWxlIFRyYW5zZm9ybSA9IEJvbnNhaV9fVHJhbnNmb3JtXG5cbigqKiBAY2Fub25pY2FsIEJvbnNhaS5WYWx1ZSAqKVxubW9kdWxlIFZhbHVlID0gQm9uc2FpX19WYWx1ZVxuXG4oKiogQGNhbm9uaWNhbCBCb25zYWkuVmFyICopXG5tb2R1bGUgVmFyID0gQm9uc2FpX19WYXJcblxubW9kdWxlIEJvbnNhaV9fID0gc3RydWN0IGVuZFxuW0BAZGVwcmVjYXRlZCBcInRoaXMgbW9kdWxlIGlzIHNoYWRvd2VkXCJdXG4iLCJvcGVuIENvcmVcblxudHlwZSAnYSBsZWFmID0gcHJpdmF0ZSBMZWFmXG50eXBlICgnZnJvbSwgJ2ludG8pIHN1YiA9IHByaXZhdGUgU3ViXG50eXBlICdhIG1vZGVsX3Jlc2V0dGVyID0gcHJpdmF0ZSBNb2RlbF9yZXNldHRlclxudHlwZSAoJ2lubmVyLCAnb3V0ZXIpIHdyYXAgPSBwcml2YXRlIFdyYXBcbnR5cGUgJ2lubmVyIHdyYXBfc3RhdGljID0gcHJpdmF0ZSBXcmFwX3N0YXRpY1xudHlwZSAoJ2lubmVyLCAnb3V0ZXIpIHdyYXBfZHluYW1pYyA9IHByaXZhdGUgV3JhcF9keW5hbWljXG50eXBlIHN3aXRjaCA9IHByaXZhdGUgU3dpdGNoXG50eXBlIGxhenlfID0gcHJpdmF0ZSBMYXp5XG50eXBlICgna2V5LCAnaW5uZXIpIGFzc29jID0gcHJpdmF0ZSBBc3NvY1xudHlwZSAoJ2lvX2tleSwgJ21vZGVsX2tleSwgJ2lubmVyKSBhc3NvY19vbiA9IHByaXZhdGUgQXNzb2Nfb25cblxudHlwZSAnYSBpZCA9XG4gIHwgTGVhZl9pZCA6IHsgYWN0aW9uIDogJ2FjdGlvbiBUeXBlX2VxdWFsLklkLnQgfSAtPiAnYWN0aW9uIGxlYWYgaWRcbiAgfCBTdWJfaWQgOlxuICAgICAgeyBmcm9tIDogJ2Zyb20gaWRcbiAgICAgIDsgaW50byA6ICdpbnRvIGlkXG4gICAgICB9XG4gICAgICAtPiAoJ2Zyb20sICdpbnRvKSBzdWIgaWRcbiAgfCBXcmFwX2lkIDpcbiAgICAgIHsgaW5uZXIgOiAnaW5uZXIgaWRcbiAgICAgIDsgb3V0ZXIgOiAnb3V0ZXIgVHlwZV9lcXVhbC5JZC50XG4gICAgICB9XG4gICAgICAtPiAoJ2lubmVyLCAnb3V0ZXIpIHdyYXAgaWRcbiAgfCBNb2RlbF9yZXNldF9pZCA6IHsgaW5uZXIgOiAnaW5uZXIgaWQgfSAtPiAnaW5uZXIgbW9kZWxfcmVzZXR0ZXIgaWRcbiAgfCBTd2l0Y2hfaWQgOiBzd2l0Y2ggaWRcbiAgfCBMYXp5X2lkIDogbGF6eV8gaWRcbiAgfCBBc3NvY19pZCA6XG4gICAgICB7IGtleSA6ICdrZXkgVHlwZV9lcXVhbC5JZC50XG4gICAgICA7IGFjdGlvbiA6ICdhIGlkXG4gICAgICB9XG4gICAgICAtPiAoJ2tleSwgJ2EpIGFzc29jIGlkXG4gIHwgQXNzb2Nfb25faWQgOlxuICAgICAgeyBpb19rZXkgOiAnaW9fa2V5IFR5cGVfZXF1YWwuSWQudFxuICAgICAgOyBtb2RlbF9rZXkgOiAnbW9kZWxfa2V5IFR5cGVfZXF1YWwuSWQudFxuICAgICAgOyBhY3Rpb24gOiAnYSBpZFxuICAgICAgfVxuICAgICAgLT4gKCdpb19rZXksICdtb2RlbF9rZXksICdhKSBhc3NvY19vbiBpZFxuXG4oKiBBIFsoJ2R5bmFtaWMsICdzdGF0aWMsICdhKSB0XSByZXByZXNlbnRzIGEgQm9uc2FpIGFjdGlvbi4gWydkeW5hbWljXSBkZXNjcmliZXNcbiAgIHRoZSB0eXBlIG9mIHRoZSBkeW5hbWljIGFjdGlvbnMgdGhhdCBjb3VsZCBiZSBkZWxpdmVyZWQgdG8gdGhpcyBjb21wdXRhdGlvbi4gWydzdGF0aWNdXG4gICBkZXNjcmliZXMgdGhlIHR5cGUgb2YgdGhlIHN0YXRpYyBhY3Rpb25zIHRoYXQgY291bGQgYmUgZGVsaXZlcmVkIHRvIHRoaXMgY29tcHV0YXRpb24uXG4gICBbJ2FdIGRlc2NyaWJlcyB0aGUgb3ZlcmFsbCBzdHJ1Y3R1cmUgb2YgdGhlIGFjdGlvbnMuICopXG5hbmQgJ2EgdCA9XG4gIHwgTGVhZl9zdGF0aWMgOiAnc3RhdGljIC0+ICdzdGF0aWMgbGVhZiB0XG4gIHwgTGVhZl9keW5hbWljIDogJ2R5bmFtaWMgLT4gJ2R5bmFtaWMgbGVhZiB0XG4gIHwgU3ViX2Zyb20gOiAnYSB0IC0+ICgnYSwgXykgc3ViIHRcbiAgfCBTdWJfaW50byA6ICdhIHQgLT4gKF8sICdhKSBzdWIgdFxuICB8IFdyYXBfaW5uZXIgOiAnYSB0IC0+ICgnYSwgXykgd3JhcCB0XG4gIHwgV3JhcF9vdXRlciA6ICdvdXRlciAtPiAoXywgJ291dGVyKSB3cmFwIHRcbiAgfCBNb2RlbF9yZXNldF9pbm5lciA6ICdhIHQgLT4gJ2EgbW9kZWxfcmVzZXR0ZXIgdFxuICB8IE1vZGVsX3Jlc2V0X291dGVyIDogXyBtb2RlbF9yZXNldHRlciB0XG4gIHwgU3dpdGNoIDpcbiAgICAgIHsgYnJhbmNoIDogaW50XG4gICAgICA7IGFjdGlvbiA6ICdhIHRcbiAgICAgIDsgdHlwZV9pZCA6ICdhIGlkXG4gICAgICB9XG4gICAgICAtPiBzd2l0Y2ggdFxuICB8IExhenkgOlxuICAgICAgeyBhY3Rpb24gOiAnYSB0XG4gICAgICA7IHR5cGVfaWQgOiAnYSBpZFxuICAgICAgfVxuICAgICAgLT4gbGF6eV8gdFxuICB8IEFzc29jIDpcbiAgICAgIHsga2V5IDogJ2tleVxuICAgICAgOyBhY3Rpb24gOiAnYSB0XG4gICAgICA7IGlkIDogJ2tleSBUeXBlX2VxdWFsLklkLnRcbiAgICAgIDsgY29tcGFyZSA6ICdrZXkgLT4gJ2tleSAtPiBpbnRcbiAgICAgIH1cbiAgICAgIC0+ICgna2V5LCAnYSkgYXNzb2MgdFxuICB8IEFzc29jX29uIDpcbiAgICAgIHsgaW9fa2V5IDogJ2lvX2tleVxuICAgICAgOyBtb2RlbF9rZXkgOiAnbW9kZWxfa2V5XG4gICAgICA7IGFjdGlvbiA6ICdhIHRcbiAgICAgIDsgaW9faWQgOiAnaW9fa2V5IFR5cGVfZXF1YWwuSWQudFxuICAgICAgOyBpb19jb21wYXJlIDogJ2lvX2tleSAtPiAnaW9fa2V5IC0+IGludFxuICAgICAgfVxuICAgICAgLT4gKCdpb19rZXksICdtb2RlbF9rZXksICdhKSBhc3NvY19vbiB0XG5cbmxldCByZWMgc2FtZV93aXRuZXNzIDogdHlwZSBhIGIuIGEgaWQgLT4gYiBpZCAtPiAoYSwgYikgVHlwZV9lcXVhbC50IG9wdGlvbiA9XG4gIGZ1biBhIGIgLT5cbiAgbWF0Y2ggYSwgYiB3aXRoXG4gIHwgTGVhZl9pZCB7IGFjdGlvbiB9LCBMZWFmX2lkIHsgYWN0aW9uID0gYWN0aW9uJyB9IC0+XG4gICAgKG1hdGNoIFR5cGVfZXF1YWwuSWQuc2FtZV93aXRuZXNzIGFjdGlvbiBhY3Rpb24nIHdpdGhcbiAgICAgfCBTb21lIFQgLT4gU29tZSBUXG4gICAgIHwgTm9uZSAtPiBOb25lKVxuICB8IFN1Yl9pZCB7IGZyb207IGludG8gfSwgU3ViX2lkIHsgZnJvbSA9IGZyb20nOyBpbnRvID0gaW50bycgfSAtPlxuICAgIGxldCBzYW1lX2Zyb20gPSBzYW1lX3dpdG5lc3MgZnJvbSBmcm9tJyBpblxuICAgIGxldCBzYW1lX2ludG8gPSBzYW1lX3dpdG5lc3MgaW50byBpbnRvJyBpblxuICAgIChtYXRjaCBzYW1lX2Zyb20sIHNhbWVfaW50byB3aXRoXG4gICAgIHwgU29tZSBULCBTb21lIFQgLT4gU29tZSBUXG4gICAgIHwgXyAtPiBOb25lKVxuICB8IFdyYXBfaWQgeyBpbm5lcjsgb3V0ZXIgfSwgV3JhcF9pZCB7IGlubmVyID0gaW5uZXInOyBvdXRlciA9IG91dGVyJyB9IC0+XG4gICAgbGV0IHNhbWVfaW5uZXIgPSBzYW1lX3dpdG5lc3MgaW5uZXIgaW5uZXInIGluXG4gICAgbGV0IHNhbWVfb3V0ZXIgPSBUeXBlX2VxdWFsLklkLnNhbWVfd2l0bmVzcyBvdXRlciBvdXRlcicgaW5cbiAgICAobWF0Y2ggc2FtZV9pbm5lciwgc2FtZV9vdXRlciB3aXRoXG4gICAgIHwgU29tZSBULCBTb21lIFQgLT4gU29tZSBUXG4gICAgIHwgXyAtPiBOb25lKVxuICB8IE1vZGVsX3Jlc2V0X2lkIHsgaW5uZXIgfSwgTW9kZWxfcmVzZXRfaWQgeyBpbm5lciA9IGlubmVyJyB9IC0+XG4gICAgKG1hdGNoIHNhbWVfd2l0bmVzcyBpbm5lciBpbm5lcicgd2l0aFxuICAgICB8IFNvbWUgVCAtPiBTb21lIFRcbiAgICAgfCBOb25lIC0+IE5vbmUpXG4gIHwgU3dpdGNoX2lkLCBTd2l0Y2hfaWQgLT4gU29tZSBUXG4gIHwgTGF6eV9pZCwgTGF6eV9pZCAtPiBTb21lIFRcbiAgfCBBc3NvY19pZCB7IGtleTsgYWN0aW9uIH0sIEFzc29jX2lkIHsga2V5ID0ga2V5JzsgYWN0aW9uID0gYWN0aW9uJyB9IC0+XG4gICAgbGV0IHNhbWVfa2V5ID0gVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3Mga2V5IGtleScgaW5cbiAgICBsZXQgc2FtZV9hY3Rpb24gPSBzYW1lX3dpdG5lc3MgYWN0aW9uIGFjdGlvbicgaW5cbiAgICAobWF0Y2ggc2FtZV9rZXksIHNhbWVfYWN0aW9uIHdpdGhcbiAgICAgfCBTb21lIFQsIFNvbWUgVCAtPiBTb21lIFRcbiAgICAgfCBfIC0+IE5vbmUpXG4gIHwgKCBBc3NvY19vbl9pZCB7IGlvX2tleTsgbW9kZWxfa2V5OyBhY3Rpb24gfVxuICAgICwgQXNzb2Nfb25faWQgeyBpb19rZXkgPSBpb19rZXknOyBtb2RlbF9rZXkgPSBtb2RlbF9rZXknOyBhY3Rpb24gPSBhY3Rpb24nIH0gKSAtPlxuICAgIGxldCBzYW1lX2lvX2tleSA9IFR5cGVfZXF1YWwuSWQuc2FtZV93aXRuZXNzIGlvX2tleSBpb19rZXknIGluXG4gICAgbGV0IHNhbWVfbW9kZWxfa2V5ID0gVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3MgbW9kZWxfa2V5IG1vZGVsX2tleScgaW5cbiAgICBsZXQgc2FtZV9hY3Rpb24gPSBzYW1lX3dpdG5lc3MgYWN0aW9uIGFjdGlvbicgaW5cbiAgICAobWF0Y2ggc2FtZV9pb19rZXksIHNhbWVfbW9kZWxfa2V5LCBzYW1lX2FjdGlvbiB3aXRoXG4gICAgIHwgU29tZSBULCBTb21lIFQsIFNvbWUgVCAtPiBTb21lIFRcbiAgICAgfCBfIC0+IE5vbmUpXG4gIHwgTGVhZl9pZCBfLCBTdWJfaWQgX1xuICB8IExlYWZfaWQgXywgV3JhcF9pZCBfXG4gIHwgTGVhZl9pZCBfLCBNb2RlbF9yZXNldF9pZCBfXG4gIHwgTGVhZl9pZCBfLCBTd2l0Y2hfaWRcbiAgfCBMZWFmX2lkIF8sIExhenlfaWRcbiAgfCBMZWFmX2lkIF8sIEFzc29jX2lkIF9cbiAgfCBMZWFmX2lkIF8sIEFzc29jX29uX2lkIF9cbiAgfCBTdWJfaWQgXywgTGVhZl9pZCBfXG4gIHwgU3ViX2lkIF8sIFdyYXBfaWQgX1xuICB8IFN1Yl9pZCBfLCBNb2RlbF9yZXNldF9pZCBfXG4gIHwgU3ViX2lkIF8sIFN3aXRjaF9pZFxuICB8IFN1Yl9pZCBfLCBMYXp5X2lkXG4gIHwgU3ViX2lkIF8sIEFzc29jX2lkIF9cbiAgfCBTdWJfaWQgXywgQXNzb2Nfb25faWQgX1xuICB8IFdyYXBfaWQgXywgTGVhZl9pZCBfXG4gIHwgV3JhcF9pZCBfLCBTdWJfaWQgX1xuICB8IFdyYXBfaWQgXywgTW9kZWxfcmVzZXRfaWQgX1xuICB8IFdyYXBfaWQgXywgU3dpdGNoX2lkXG4gIHwgV3JhcF9pZCBfLCBMYXp5X2lkXG4gIHwgV3JhcF9pZCBfLCBBc3NvY19pZCBfXG4gIHwgV3JhcF9pZCBfLCBBc3NvY19vbl9pZCBfXG4gIHwgTW9kZWxfcmVzZXRfaWQgXywgTGVhZl9pZCBfXG4gIHwgTW9kZWxfcmVzZXRfaWQgXywgU3ViX2lkIF9cbiAgfCBNb2RlbF9yZXNldF9pZCBfLCBXcmFwX2lkIF9cbiAgfCBNb2RlbF9yZXNldF9pZCBfLCBTd2l0Y2hfaWRcbiAgfCBNb2RlbF9yZXNldF9pZCBfLCBMYXp5X2lkXG4gIHwgTW9kZWxfcmVzZXRfaWQgXywgQXNzb2NfaWQgX1xuICB8IE1vZGVsX3Jlc2V0X2lkIF8sIEFzc29jX29uX2lkIF9cbiAgfCBTd2l0Y2hfaWQsIExlYWZfaWQgX1xuICB8IFN3aXRjaF9pZCwgU3ViX2lkIF9cbiAgfCBTd2l0Y2hfaWQsIFdyYXBfaWQgX1xuICB8IFN3aXRjaF9pZCwgTW9kZWxfcmVzZXRfaWQgX1xuICB8IFN3aXRjaF9pZCwgTGF6eV9pZFxuICB8IFN3aXRjaF9pZCwgQXNzb2NfaWQgX1xuICB8IFN3aXRjaF9pZCwgQXNzb2Nfb25faWQgX1xuICB8IExhenlfaWQsIExlYWZfaWQgX1xuICB8IExhenlfaWQsIFN1Yl9pZCBfXG4gIHwgTGF6eV9pZCwgV3JhcF9pZCBfXG4gIHwgTGF6eV9pZCwgTW9kZWxfcmVzZXRfaWQgX1xuICB8IExhenlfaWQsIFN3aXRjaF9pZFxuICB8IExhenlfaWQsIEFzc29jX2lkIF9cbiAgfCBMYXp5X2lkLCBBc3NvY19vbl9pZCBfXG4gIHwgQXNzb2NfaWQgXywgTGVhZl9pZCBfXG4gIHwgQXNzb2NfaWQgXywgU3ViX2lkIF9cbiAgfCBBc3NvY19pZCBfLCBXcmFwX2lkIF9cbiAgfCBBc3NvY19pZCBfLCBNb2RlbF9yZXNldF9pZCBfXG4gIHwgQXNzb2NfaWQgXywgU3dpdGNoX2lkXG4gIHwgQXNzb2NfaWQgXywgTGF6eV9pZFxuICB8IEFzc29jX2lkIF8sIEFzc29jX29uX2lkIF9cbiAgfCBBc3NvY19vbl9pZCBfLCBMZWFmX2lkIF9cbiAgfCBBc3NvY19vbl9pZCBfLCBTdWJfaWQgX1xuICB8IEFzc29jX29uX2lkIF8sIFdyYXBfaWQgX1xuICB8IEFzc29jX29uX2lkIF8sIE1vZGVsX3Jlc2V0X2lkIF9cbiAgfCBBc3NvY19vbl9pZCBfLCBTd2l0Y2hfaWRcbiAgfCBBc3NvY19vbl9pZCBfLCBMYXp5X2lkXG4gIHwgQXNzb2Nfb25faWQgXywgQXNzb2NfaWQgXyAtPiBOb25lXG47O1xuXG5sZXQgcmVjIHNleHBfb2ZfdCA6IHR5cGUgYS4gYSBpZCAtPiBTZXhwLnQgPSBmdW5jdGlvblxuICB8IExlYWZfaWQgeyBhY3Rpb24gfSAtPiBbJXNleHAgTGVhZiwgKGFjdGlvbiA6IG9wYXF1ZSBUeXBlX2VxdWFsLklkLnQpXVxuICB8IFN1Yl9pZCB7IGZyb207IGludG8gfSAtPlxuICAgIGxldCBmcm9tID0gc2V4cF9vZl90IGZyb20gaW5cbiAgICBsZXQgaW50byA9IHNleHBfb2ZfdCBpbnRvIGluXG4gICAgWyVzZXhwIFN1YiwgKGZyb20gOiBTZXhwLnQpLCAoaW50byA6IFNleHAudCldXG4gIHwgV3JhcF9pZCB7IGlubmVyOyBvdXRlciB9IC0+XG4gICAgbGV0IGlubmVyID0gc2V4cF9vZl90IGlubmVyIGluXG4gICAgWyVzZXhwIFdyYXAsIChpbm5lciA6IFNleHAudCksIChvdXRlciA6IG9wYXF1ZSBUeXBlX2VxdWFsLklkLnQpXVxuICB8IE1vZGVsX3Jlc2V0X2lkIHsgaW5uZXIgfSAtPlxuICAgIGxldCBpbm5lciA9IHNleHBfb2ZfdCBpbm5lciBpblxuICAgIFslc2V4cCBNb2RlbF9yZXNldCAoaW5uZXIgOiBTZXhwLnQpXVxuICB8IFN3aXRjaF9pZCAtPiBbJXNleHAgU3dpdGNoXVxuICB8IExhenlfaWQgLT4gWyVzZXhwIExhenldXG4gIHwgQXNzb2NfaWQgeyBrZXk7IGFjdGlvbiB9IC0+XG4gICAgbGV0IGFjdGlvbiA9IHNleHBfb2ZfdCBhY3Rpb24gaW5cbiAgICBbJXNleHAgQXNzb2MsIChrZXkgOiBvcGFxdWUgVHlwZV9lcXVhbC5JZC50KSwgKGFjdGlvbiA6IFNleHAudCldXG4gIHwgQXNzb2Nfb25faWQgeyBpb19rZXk7IG1vZGVsX2tleTsgYWN0aW9uIH0gLT5cbiAgICBsZXQgYWN0aW9uID0gc2V4cF9vZl90IGFjdGlvbiBpblxuICAgIFslc2V4cFxuICAgICAgQXNzb2NcbiAgICAgICwgKGlvX2tleSA6IG9wYXF1ZSBUeXBlX2VxdWFsLklkLnQpXG4gICAgICAsIChtb2RlbF9rZXkgOiBvcGFxdWUgVHlwZV9lcXVhbC5JZC50KVxuICAgICAgLCAoYWN0aW9uIDogU2V4cC50KV1cbjs7XG5cbmxldCByZWMgdG9fc2V4cCA6IHR5cGUgYS4gYSBpZCAtPiBhIHQgLT4gU2V4cC50ID0gZnVuY3Rpb25cbiAgfCBMZWFmX2lkIHsgYWN0aW9uIH0gLT5cbiAgICBsZXQgdG9fc2V4cCA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBhY3Rpb24gaW5cbiAgICAoZnVuY3Rpb25cbiAgICAgfCBMZWFmX2R5bmFtaWMgYWN0aW9uIC0+IFslc2V4cCBMZWFmX2R5bmFtaWMsICh0b19zZXhwIGFjdGlvbiA6IFNleHAudCldXG4gICAgIHwgTGVhZl9zdGF0aWMgYWN0aW9uIC0+IFslc2V4cCBMZWFmX3N0YXRpYywgKHRvX3NleHAgYWN0aW9uIDogU2V4cC50KV0pXG4gIHwgU3ViX2lkIHsgZnJvbTsgaW50byB9IC0+XG4gICAgKGZ1bmN0aW9uXG4gICAgIHwgU3ViX2Zyb20gYWN0aW9uIC0+XG4gICAgICAgbGV0IHRvX3NleHAgPSB0b19zZXhwIGZyb20gaW5cbiAgICAgICBbJXNleHAgU3ViX2Zyb20sICh0b19zZXhwIGFjdGlvbiA6IFNleHAudCldXG4gICAgIHwgU3ViX2ludG8gYWN0aW9uIC0+XG4gICAgICAgbGV0IHRvX3NleHAgPSB0b19zZXhwIGludG8gaW5cbiAgICAgICBbJXNleHAgU3ViX2ludG8sICh0b19zZXhwIGFjdGlvbiA6IFNleHAudCldKVxuICB8IFdyYXBfaWQgeyBpbm5lcjsgb3V0ZXIgfSAtPlxuICAgIChmdW5jdGlvblxuICAgICB8IFdyYXBfaW5uZXIgYWN0aW9uIC0+XG4gICAgICAgbGV0IHRvX3NleHAgPSB0b19zZXhwIGlubmVyIGluXG4gICAgICAgWyVzZXhwIFdyYXBfaW5uZXIsICh0b19zZXhwIGFjdGlvbiA6IFNleHAudCldXG4gICAgIHwgV3JhcF9vdXRlciBhY3Rpb24gLT5cbiAgICAgICBsZXQgdG9fc2V4cCA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBvdXRlciBpblxuICAgICAgIFslc2V4cCBXcmFwX291dGVyLCAodG9fc2V4cCBhY3Rpb24gOiBTZXhwLnQpXSlcbiAgfCBNb2RlbF9yZXNldF9pZCB7IGlubmVyIH0gLT5cbiAgICAoZnVuY3Rpb25cbiAgICAgfCBNb2RlbF9yZXNldF9vdXRlciAtPiBbJXNleHAgTW9kZWxfcmVzZXRfb3V0ZXJdXG4gICAgIHwgTW9kZWxfcmVzZXRfaW5uZXIgYWN0aW9uIC0+XG4gICAgICAgbGV0IHRvX3NleHAgPSB0b19zZXhwIGlubmVyIGluXG4gICAgICAgWyVzZXhwIE1vZGVsX3Jlc2V0X2lubmVyLCAodG9fc2V4cCBhY3Rpb24gOiBTZXhwLnQpXSlcbiAgfCBTd2l0Y2hfaWQgLT5cbiAgICBmdW4gKFN3aXRjaCB7IGJyYW5jaDsgYWN0aW9uOyB0eXBlX2lkIH0pIC0+XG4gICAgICBsZXQgdG9fc2V4cCA9IHRvX3NleHAgdHlwZV9pZCBpblxuICAgICAgWyVzZXhwIFN3aXRjaCwgKGJyYW5jaCA6IGludCksICh0b19zZXhwIGFjdGlvbiA6IFNleHAudCldXG4gIHwgTGF6eV9pZCAtPlxuICAgIGZ1biAoTGF6eSB7IGFjdGlvbjsgdHlwZV9pZCB9KSAtPlxuICAgICAgbGV0IHRvX3NleHAgPSB0b19zZXhwIHR5cGVfaWQgaW5cbiAgICAgIFslc2V4cCBMYXp5LCAodG9fc2V4cCBhY3Rpb24gOiBTZXhwLnQpXVxuICB8IEFzc29jX2lkIHsga2V5ID0ga2V5X2lkOyBhY3Rpb24gPSBhY3Rpb25faWQgfSAtPlxuICAgIGZ1biAoQXNzb2MgeyBrZXk7IGFjdGlvbjsgaWQgPSBfOyBjb21wYXJlID0gXyB9KSAtPlxuICAgICAgbGV0IHNleHBfb2Zfa2V5ID0gVHlwZV9lcXVhbC5JZC50b19zZXhwIGtleV9pZCBpblxuICAgICAgbGV0IHNleHBfb2ZfYWN0aW9uID0gdG9fc2V4cCBhY3Rpb25faWQgaW5cbiAgICAgIFslc2V4cCBBc3NvYywgKGtleSA6IGtleSksIChhY3Rpb24gOiBhY3Rpb24pXVxuICB8IEFzc29jX29uX2lkIHsgaW9fa2V5ID0gaW9fa2V5X2lkOyBtb2RlbF9rZXkgPSBtb2RlbF9rZXlfaWQ7IGFjdGlvbiA9IGFjdGlvbl9pZCB9IC0+XG4gICAgZnVuIChBc3NvY19vbiB7IGlvX2tleTsgbW9kZWxfa2V5OyBhY3Rpb247IGlvX2lkID0gXzsgaW9fY29tcGFyZSA9IF8gfSkgLT5cbiAgICAgIGxldCBzZXhwX29mX2lvX2tleSA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBpb19rZXlfaWQgaW5cbiAgICAgIGxldCBzZXhwX29mX21vZGVsX2tleSA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBtb2RlbF9rZXlfaWQgaW5cbiAgICAgIGxldCBzZXhwX29mX2FjdGlvbiA9IHRvX3NleHAgYWN0aW9uX2lkIGluXG4gICAgICBbJXNleHAgQXNzb2Nfb24sIChpb19rZXkgOiBpb19rZXkpLCAobW9kZWxfa2V5IDogbW9kZWxfa2V5KSwgKGFjdGlvbiA6IGFjdGlvbildXG47O1xuXG5tb2R1bGUgVHlwZV9pZCA9IHN0cnVjdFxuICBsZXQgbm90aGluZ190eXBlX2lkID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJOb3RoaW5nLnRcIiBbJXNleHBfb2Y6IE5vdGhpbmcudF1cbiAgbGV0IG5vdGhpbmcgPSBMZWFmX2lkIHsgYWN0aW9uID0gbm90aGluZ190eXBlX2lkIH1cbiAgbGV0IGxlYWYgdHlwZV9pZCA9IExlYWZfaWQgeyBhY3Rpb24gPSB0eXBlX2lkIH1cbiAgbGV0IHN1YiB+ZnJvbSB+aW50byA9IFN1Yl9pZCB7IGZyb207IGludG8gfVxuICBsZXQgd3JhcCB+aW5uZXIgfm91dGVyID0gV3JhcF9pZCB7IGlubmVyOyBvdXRlciB9XG4gIGxldCBtb2RlbF9yZXNldCBpbm5lciA9IE1vZGVsX3Jlc2V0X2lkIHsgaW5uZXIgfVxuICBsZXQgbGF6eV8gPSBMYXp5X2lkXG4gIGxldCBzd2l0Y2ggPSBTd2l0Y2hfaWRcbiAgbGV0IGFzc29jIH5rZXkgfmFjdGlvbiA9IEFzc29jX2lkIHsga2V5OyBhY3Rpb24gfVxuICBsZXQgYXNzb2Nfb24gfmlvX2tleSB+bW9kZWxfa2V5IH5hY3Rpb24gPSBBc3NvY19vbl9pZCB7IGlvX2tleTsgbW9kZWxfa2V5OyBhY3Rpb24gfVxuICBsZXQgc2FtZV93aXRuZXNzID0gc2FtZV93aXRuZXNzXG4gIGxldCBzYW1lX3dpdG5lc3NfZXhuIGEgYiA9IE9wdGlvbi52YWx1ZV9leG4gKHNhbWVfd2l0bmVzcyBhIGIpXG4gIGxldCB0b19zZXhwID0gdG9fc2V4cFxuICBsZXQgc2V4cF9vZl90ID0gc2V4cF9vZl90XG5lbmRcblxubGV0IHN0YXRpY19sZWFmIGFjdGlvbiA9IExlYWZfc3RhdGljIGFjdGlvblxubGV0IGR5bmFtaWNfbGVhZiBhY3Rpb24gPSBMZWFmX2R5bmFtaWMgYWN0aW9uXG5sZXQgc3ViX2Zyb20gYWN0aW9uID0gU3ViX2Zyb20gYWN0aW9uXG5sZXQgc3ViX2ludG8gYWN0aW9uID0gU3ViX2ludG8gYWN0aW9uXG5sZXQgd3JhcF9pbm5lciBhY3Rpb24gPSBXcmFwX2lubmVyIGFjdGlvblxubGV0IHdyYXBfb3V0ZXIgYWN0aW9uID0gV3JhcF9vdXRlciBhY3Rpb25cbmxldCBtb2RlbF9yZXNldF9pbm5lciBhY3Rpb24gPSBNb2RlbF9yZXNldF9pbm5lciBhY3Rpb25cbmxldCBtb2RlbF9yZXNldF9vdXRlciA9IE1vZGVsX3Jlc2V0X291dGVyXG5sZXQgc3dpdGNoIH5icmFuY2ggfnR5cGVfaWQgYWN0aW9uID0gU3dpdGNoIHsgYnJhbmNoOyBhY3Rpb247IHR5cGVfaWQgfVxubGV0IGxhenlfIH50eXBlX2lkIGFjdGlvbiA9IExhenkgeyBhY3Rpb247IHR5cGVfaWQgfVxubGV0IGFzc29jIH5rZXkgfmlkIH5jb21wYXJlIGFjdGlvbiA9IEFzc29jIHsga2V5OyBhY3Rpb247IGlkOyBjb21wYXJlIH1cblxubGV0IGFzc29jX29uIH5pb19rZXkgfmlvX2lkIH5pb19jb21wYXJlIH5tb2RlbF9rZXkgYWN0aW9uID1cbiAgQXNzb2Nfb24geyBpb19rZXk7IG1vZGVsX2tleTsgYWN0aW9uOyBpb19pZDsgaW9fY29tcGFyZSB9XG47O1xuIiwib3BlbiEgQ29yZVxubW9kdWxlIEluY3IgPSBVaV9pbmNyXG5cbm1vZHVsZSBDb2xvciA9IHN0cnVjdFxuICAoKiBGcm9tICBbYm9uc2FpLnRhaWx3aW5kX2NvbG9yc10uICopXG4gIGxldCByZWQ1MCA9IGBIZXggXCIjRkVGMkYyXCJcbiAgbGV0IHJlZDEwMCA9IGBIZXggXCIjRkVFMkUyXCJcbiAgbGV0IHJlZDIwMCA9IGBIZXggXCIjRkVDQUNBXCJcbiAgbGV0IHJlZDMwMCA9IGBIZXggXCIjRkNBNUE1XCJcbiAgbGV0IGFtYmVyMTAwID0gYEhleCBcIiNGRUYzQzdcIlxuICBsZXQgYW1iZXIyMDAgPSBgSGV4IFwiI0ZERTY4QVwiXG4gIGxldCBibHVlMTAwID0gYEhleCBcIiNEQkVBRkVcIlxuICBsZXQgYmx1ZTIwMCA9IGBIZXggXCIjQkZEQkZFXCJcbiAgbGV0IGJsdWUzMDAgPSBgSGV4IFwiIzkzQzVGRFwiXG4gIGxldCBlbWVyYWxkMTAwID0gYEhleCBcIiNEMUZBRTVcIlxuICBsZXQgZW1lcmFsZDIwMCA9IGBIZXggXCIjQTdGM0QwXCJcbiAgbGV0IHBpbmsxMDAgPSBgSGV4IFwiI0ZDRTdGM1wiXG4gIGxldCBwaW5rMjAwID0gYEhleCBcIiNGQkNGRThcIlxuICBsZXQgcGluazMwMCA9IGBIZXggXCIjRjlBOEQ0XCJcbmVuZFxuXG5sZXQgZW5hYmxlZCA9IHJlZiBmYWxzZVxubGV0IGVuYWJsZSAoKSA9IGVuYWJsZWQgOj0gdHJ1ZVxubGV0IGRpc2FibGUgKCkgPSBlbmFibGVkIDo9IGZhbHNlXG5sZXQgZW1wdHlfYXR0cnMgPSBTdHJpbmcuTWFwLmVtcHR5XG5cbmxldCBhdHRyaWJ1dGVfcGFja2VkIHBvcyB0ID1cbiAgbGV0IHBvcyA9XG4gICAgcG9zXG4gICAgfD4gU291cmNlX2NvZGVfcG9zaXRpb24udG9fc3RyaW5nXG4gICAgfD4gU3RyaW5nLmNob3BfcHJlZml4X2lmX2V4aXN0cyB+cHJlZml4OlwibGliL1wiXG4gICAgfD4gU3RyaW5nLmNob3BfcHJlZml4X2lmX2V4aXN0cyB+cHJlZml4OlwiYXBwL1wiXG4gIGluXG4gIGxldCBsYWJlbHMgPVxuICAgIG1hdGNoIFN0cmluZy5yc3BsaXQyIH5vbjonLycgcG9zIHdpdGhcbiAgICB8IFNvbWUgKGwsIHIpIC0+IFsgXCJib3VuZDogXCIgXiBsOyBcImJvdW5kOiBcIiBeIHIgXVxuICAgIHwgTm9uZSAtPiBbIHBvcyBdXG4gIGluXG4gIExpc3QuaXRlciBsYWJlbHMgfmY6KGZ1biBsYWJlbCAtPlxuICAgIGxldCBsYWJlbCA9IFsgbGFiZWwgXSBpblxuICAgIEluY3IuUGFja2VkLmFwcGVuZF91c2VyX2luZm9fZ3JhcGh2aXogdCB+bGFiZWwgfmF0dHJzOmVtcHR5X2F0dHJzKVxuOztcblxubW9kdWxlIEtpbmQgPSBzdHJ1Y3RcbiAgbW9kdWxlIFQgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPVxuICAgICAgfCBJbnB1dFxuICAgICAgfCBWYWx1ZVxuICAgICAgfCBSZXN1bHRcbiAgICAgIHwgTGlmZWN5Y2xlXG4gICAgICB8IEVtcHR5X2xpZmVjeWNsZVxuICAgICAgfCBNb2RlbFxuICAgICAgfCBNb2RlbF9hbmRfaW5wdXRcbiAgICAgIHwgQXNzb2Nfa2V5XG4gICAgICB8IEFzc29jX2lucHV0XG4gICAgICB8IEFzc29jX3Jlc3VsdHNcbiAgICAgIHwgQXNzb2NfbGlmZWN5Y2xlc1xuICAgICAgfCBBc3NvY19pbnB1dHNcbiAgICAgIHwgUGF0aFxuICAgICAgfCBMaWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXJcbiAgICBbQEBkZXJpdmluZyBoYXNoLCBjb21wYXJlLCBzZXhwXVxuICBlbmRcblxuICBpbmNsdWRlIFRcbiAgaW5jbHVkZSBIYXNoYWJsZS5NYWtlIChUKVxuXG4gIGxldCBuYW1lID0gZnVuY3Rpb25cbiAgICB8IElucHV0IC0+IFwiaW5wdXRcIlxuICAgIHwgVmFsdWUgLT4gXCJ2YWx1ZVwiXG4gICAgfCBSZXN1bHQgLT4gXCJyZXN1bHRcIlxuICAgIHwgTGlmZWN5Y2xlIC0+IFwibGlmZWN5Y2xlXCJcbiAgICB8IEVtcHR5X2xpZmVjeWNsZSAtPiBcImVtcHR5IGxpZmVjeWNsZVwiXG4gICAgfCBNb2RlbCAtPiBcIm1vZGVsXCJcbiAgICB8IE1vZGVsX2FuZF9pbnB1dCAtPiBcIm1vZGVsICYgaW5wdXRcIlxuICAgIHwgQXNzb2Nfa2V5IC0+IFwiYXNzb2Mga2V5XCJcbiAgICB8IEFzc29jX2lucHV0IC0+IFwiYXNzb2MgaW5wdXRcIlxuICAgIHwgQXNzb2NfcmVzdWx0cyAtPiBcImFzc29jIHJlc3VsdCBtYXBcIlxuICAgIHwgQXNzb2NfbGlmZWN5Y2xlcyAtPiBcImFzc29jIGxpZmVjeWNsZSBtYXBcIlxuICAgIHwgQXNzb2NfaW5wdXRzIC0+IFwiYXNzb2MgaW5wdXQgbWFwXCJcbiAgICB8IFBhdGggLT4gXCJwYXRoXCJcbiAgICB8IExpZmVjeWNsZV9hcHBseV9hY3Rpb25fcGFpciAtPiBcImxpZmVjeWNsZS9hcHBseS1hY3Rpb24gcGFpclwiXG4gIDs7XG5cbiAgbGV0IGNvbG9yID0gZnVuY3Rpb25cbiAgICAoKiByZXN1bHRzXG4gICAgICAgcmVkICopXG4gICAgfCBWYWx1ZSAtPiBDb2xvci5yZWQ1MFxuICAgIHwgUmVzdWx0IC0+IENvbG9yLnJlZDEwMFxuICAgIHwgQXNzb2NfcmVzdWx0cyAtPiBDb2xvci5yZWQyMDBcbiAgICB8IFBhdGggLT4gQ29sb3IucmVkMzAwXG4gICAgKCogaW5wdXRcbiAgICAgICBhbWJlciAqKVxuICAgIHwgSW5wdXQgLT4gQ29sb3IuYW1iZXIxMDBcbiAgICB8IEFzc29jX2lucHV0cyAtPiBDb2xvci5hbWJlcjIwMFxuICAgICgqIGxpZmVjeWNsZXNcbiAgICAgICBibHVlICopXG4gICAgfCBMaWZlY3ljbGUgLT4gQ29sb3IuYmx1ZTEwMFxuICAgIHwgQXNzb2NfbGlmZWN5Y2xlcyAtPiBDb2xvci5ibHVlMjAwXG4gICAgfCBFbXB0eV9saWZlY3ljbGUgLT4gQ29sb3IuYmx1ZTMwMFxuICAgICgqIG1vZGVsc1xuICAgICAgIGdyZWVuICopXG4gICAgfCBNb2RlbCAtPiBDb2xvci5lbWVyYWxkMTAwXG4gICAgfCBMaWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXIgLT4gQ29sb3IuZW1lcmFsZDIwMFxuICAgICgqIGFzc29jLXJlbGF0ZWRcbiAgICAgICBwaW5rICopXG4gICAgfCBNb2RlbF9hbmRfaW5wdXQgLT4gQ29sb3IucGluazEwMFxuICAgIHwgQXNzb2Nfa2V5IC0+IENvbG9yLnBpbmsyMDBcbiAgICB8IEFzc29jX2lucHV0IC0+IENvbG9yLnBpbmszMDBcbiAgOztcbmVuZFxuXG5sZXQgYW5ub3RhdGVfcGFja2VkID1cbiAgTWVtby5nZW5lcmFsIH5oYXNoYWJsZTpLaW5kLmhhc2hhYmxlIChmdW4ga2luZCBpbmNyIC0+XG4gICAgbGV0IGxhYmVsID0gWyBcImtpbmRcIjsgS2luZC5uYW1lIGtpbmQgXSBpblxuICAgIGxldCAoYEhleCBjb2xvcikgPSBLaW5kLmNvbG9yIGtpbmQgaW5cbiAgICBsZXQgYXR0cnMgPSBTdHJpbmcuTWFwLm9mX2FsaXN0X2V4biBbIFwic3R5bGVcIiwgXCJmaWxsZWRcIjsgXCJmaWxsY29sb3JcIiwgY29sb3IgXSBpblxuICAgIEluY3IuUGFja2VkLmFwcGVuZF91c2VyX2luZm9fZ3JhcGh2aXogaW5jciB+bGFiZWwgfmF0dHJzKVxuOztcblxubW9kdWxlIENvdW50cyA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHsgbXV0YWJsZSBpbnB1dCA6IGludFxuICAgIDsgbXV0YWJsZSB2YWx1ZSA6IGludFxuICAgIDsgbXV0YWJsZSByZXN1bHQgOiBpbnRcbiAgICA7IG11dGFibGUgbGlmZWN5Y2xlIDogaW50XG4gICAgOyBtdXRhYmxlIGVtcHR5X2xpZmVjeWNsZSA6IGludFxuICAgIDsgbXV0YWJsZSBtb2RlbCA6IGludFxuICAgIDsgbXV0YWJsZSBtb2RlbF9hbmRfaW5wdXQgOiBpbnRcbiAgICA7IG11dGFibGUgYXNzb2Nfa2V5IDogaW50XG4gICAgOyBtdXRhYmxlIGFzc29jX2lucHV0IDogaW50XG4gICAgOyBtdXRhYmxlIGFzc29jX3Jlc3VsdHMgOiBpbnRcbiAgICA7IG11dGFibGUgYXNzb2NfbGlmZWN5Y2xlcyA6IGludFxuICAgIDsgbXV0YWJsZSBhc3NvY19pbnB1dHMgOiBpbnRcbiAgICA7IG11dGFibGUgcGF0aCA6IGludFxuICAgIDsgbXV0YWJsZSBsaWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXIgOiBpbnRcbiAgICB9XG4gIFtAQGRlcml2aW5nIHNleHBfb2ZdXG5cbiAgbGV0IGdsb2JhbCA9XG4gICAgeyBpbnB1dCA9IDBcbiAgICA7IHZhbHVlID0gMFxuICAgIDsgcmVzdWx0ID0gMFxuICAgIDsgbGlmZWN5Y2xlID0gMFxuICAgIDsgZW1wdHlfbGlmZWN5Y2xlID0gMFxuICAgIDsgbW9kZWwgPSAwXG4gICAgOyBtb2RlbF9hbmRfaW5wdXQgPSAwXG4gICAgOyBhc3NvY19rZXkgPSAwXG4gICAgOyBhc3NvY19pbnB1dCA9IDBcbiAgICA7IGFzc29jX3Jlc3VsdHMgPSAwXG4gICAgOyBhc3NvY19saWZlY3ljbGVzID0gMFxuICAgIDsgYXNzb2NfaW5wdXRzID0gMFxuICAgIDsgcGF0aCA9IDBcbiAgICA7IGxpZmVjeWNsZV9hcHBseV9hY3Rpb25fcGFpciA9IDBcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGN1cnJlbnQgKCkgPVxuICAgIHsgaW5wdXQgPSBnbG9iYWwuaW5wdXRcbiAgICA7IHZhbHVlID0gZ2xvYmFsLnZhbHVlXG4gICAgOyByZXN1bHQgPSBnbG9iYWwucmVzdWx0XG4gICAgOyBsaWZlY3ljbGUgPSBnbG9iYWwubGlmZWN5Y2xlXG4gICAgOyBlbXB0eV9saWZlY3ljbGUgPSBnbG9iYWwuZW1wdHlfbGlmZWN5Y2xlXG4gICAgOyBtb2RlbCA9IGdsb2JhbC5tb2RlbFxuICAgIDsgbW9kZWxfYW5kX2lucHV0ID0gZ2xvYmFsLm1vZGVsX2FuZF9pbnB1dFxuICAgIDsgYXNzb2Nfa2V5ID0gZ2xvYmFsLmFzc29jX2tleVxuICAgIDsgYXNzb2NfaW5wdXQgPSBnbG9iYWwuYXNzb2NfaW5wdXRcbiAgICA7IGFzc29jX3Jlc3VsdHMgPSBnbG9iYWwuYXNzb2NfcmVzdWx0c1xuICAgIDsgYXNzb2NfbGlmZWN5Y2xlcyA9IGdsb2JhbC5hc3NvY19saWZlY3ljbGVzXG4gICAgOyBhc3NvY19pbnB1dHMgPSBnbG9iYWwuYXNzb2NfaW5wdXRzXG4gICAgOyBwYXRoID0gZ2xvYmFsLnBhdGhcbiAgICA7IGxpZmVjeWNsZV9hcHBseV9hY3Rpb25fcGFpciA9IGdsb2JhbC5saWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXJcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGRpZmYgfmJlZm9yZSB+YWZ0ZXIgPVxuICAgIHsgaW5wdXQgPSBhZnRlci5pbnB1dCAtIGJlZm9yZS5pbnB1dFxuICAgIDsgdmFsdWUgPSBhZnRlci52YWx1ZSAtIGJlZm9yZS52YWx1ZVxuICAgIDsgcmVzdWx0ID0gYWZ0ZXIucmVzdWx0IC0gYmVmb3JlLnJlc3VsdFxuICAgIDsgbGlmZWN5Y2xlID0gYWZ0ZXIubGlmZWN5Y2xlIC0gYmVmb3JlLmxpZmVjeWNsZVxuICAgIDsgZW1wdHlfbGlmZWN5Y2xlID0gYWZ0ZXIuZW1wdHlfbGlmZWN5Y2xlIC0gYmVmb3JlLmVtcHR5X2xpZmVjeWNsZVxuICAgIDsgbW9kZWwgPSBhZnRlci5tb2RlbCAtIGJlZm9yZS5tb2RlbFxuICAgIDsgbW9kZWxfYW5kX2lucHV0ID0gYWZ0ZXIubW9kZWxfYW5kX2lucHV0IC0gYmVmb3JlLm1vZGVsX2FuZF9pbnB1dFxuICAgIDsgYXNzb2Nfa2V5ID0gYWZ0ZXIuYXNzb2Nfa2V5IC0gYmVmb3JlLmFzc29jX2tleVxuICAgIDsgYXNzb2NfaW5wdXQgPSBhZnRlci5hc3NvY19pbnB1dCAtIGJlZm9yZS5hc3NvY19pbnB1dFxuICAgIDsgYXNzb2NfcmVzdWx0cyA9IGFmdGVyLmFzc29jX3Jlc3VsdHMgLSBiZWZvcmUuYXNzb2NfcmVzdWx0c1xuICAgIDsgYXNzb2NfbGlmZWN5Y2xlcyA9IGFmdGVyLmFzc29jX2xpZmVjeWNsZXMgLSBiZWZvcmUuYXNzb2NfbGlmZWN5Y2xlc1xuICAgIDsgYXNzb2NfaW5wdXRzID0gYWZ0ZXIuYXNzb2NfaW5wdXRzIC0gYmVmb3JlLmFzc29jX2lucHV0c1xuICAgIDsgcGF0aCA9IGFmdGVyLnBhdGggLSBiZWZvcmUucGF0aFxuICAgIDsgbGlmZWN5Y2xlX2FwcGx5X2FjdGlvbl9wYWlyID1cbiAgICAgICAgYWZ0ZXIubGlmZWN5Y2xlX2FwcGx5X2FjdGlvbl9wYWlyIC0gYmVmb3JlLmxpZmVjeWNsZV9hcHBseV9hY3Rpb25fcGFpclxuICAgIH1cbiAgOztcblxuICBsZXQgaW5jciA6IEtpbmQudCAtPiB1bml0ID0gZnVuY3Rpb25cbiAgICB8IElucHV0IC0+IGdsb2JhbC5pbnB1dCA8LSBnbG9iYWwuaW5wdXQgKyAxXG4gICAgfCBWYWx1ZSAtPiBnbG9iYWwudmFsdWUgPC0gZ2xvYmFsLnZhbHVlICsgMVxuICAgIHwgUmVzdWx0IC0+IGdsb2JhbC5yZXN1bHQgPC0gZ2xvYmFsLnJlc3VsdCArIDFcbiAgICB8IExpZmVjeWNsZSAtPiBnbG9iYWwubGlmZWN5Y2xlIDwtIGdsb2JhbC5saWZlY3ljbGUgKyAxXG4gICAgfCBFbXB0eV9saWZlY3ljbGUgLT4gZ2xvYmFsLmVtcHR5X2xpZmVjeWNsZSA8LSBnbG9iYWwuZW1wdHlfbGlmZWN5Y2xlICsgMVxuICAgIHwgTW9kZWwgLT4gZ2xvYmFsLm1vZGVsIDwtIGdsb2JhbC5tb2RlbCArIDFcbiAgICB8IE1vZGVsX2FuZF9pbnB1dCAtPiBnbG9iYWwubW9kZWxfYW5kX2lucHV0IDwtIGdsb2JhbC5tb2RlbF9hbmRfaW5wdXQgKyAxXG4gICAgfCBBc3NvY19rZXkgLT4gZ2xvYmFsLmFzc29jX2tleSA8LSBnbG9iYWwuYXNzb2Nfa2V5ICsgMVxuICAgIHwgQXNzb2NfaW5wdXQgLT4gZ2xvYmFsLmFzc29jX2lucHV0IDwtIGdsb2JhbC5hc3NvY19pbnB1dCArIDFcbiAgICB8IEFzc29jX3Jlc3VsdHMgLT4gZ2xvYmFsLmFzc29jX3Jlc3VsdHMgPC0gZ2xvYmFsLmFzc29jX3Jlc3VsdHMgKyAxXG4gICAgfCBBc3NvY19saWZlY3ljbGVzIC0+IGdsb2JhbC5hc3NvY19saWZlY3ljbGVzIDwtIGdsb2JhbC5hc3NvY19saWZlY3ljbGVzICsgMVxuICAgIHwgQXNzb2NfaW5wdXRzIC0+IGdsb2JhbC5hc3NvY19pbnB1dHMgPC0gZ2xvYmFsLmFzc29jX2lucHV0cyArIDFcbiAgICB8IFBhdGggLT4gZ2xvYmFsLnBhdGggPC0gZ2xvYmFsLnBhdGggKyAxXG4gICAgfCBMaWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXIgLT5cbiAgICAgIGdsb2JhbC5saWZlY3ljbGVfYXBwbHlfYWN0aW9uX3BhaXIgPC0gZ2xvYmFsLmxpZmVjeWNsZV9hcHBseV9hY3Rpb25fcGFpciArIDFcbiAgOztcbmVuZFxuXG4oKiBUaGUgXCJpcyBlbmFibGVkXCIgY2hlY2sgYXJlIHBlcmZvcm1lZCBoZXJlIGluIG9yZGVyIHRvIGF2b2lkXG4gICBnb2luZyB0aHJvdWdoIHRoZSBtZW1vaXphdGlvbiBvciBhbGxvY2F0aW9uIG9mIGEgUGFja2VkLnQgZXZlblxuICAgd2hlbiBkaXNhYmxlZC4gKilcbmxldCBhbm5vdGF0ZV9wYWNrZWQga2luZCBpbmNyID1cbiAgQ291bnRzLmluY3Iga2luZDtcbiAgaWYgIWVuYWJsZWQgdGhlbiBhbm5vdGF0ZV9wYWNrZWQga2luZCBpbmNyXG47O1xuXG5sZXQgYW5ub3RhdGUga2luZCBpbmNyID1cbiAgQ291bnRzLmluY3Iga2luZDtcbiAgaWYgIWVuYWJsZWQgdGhlbiBhbm5vdGF0ZV9wYWNrZWQga2luZCAoSW5jci5wYWNrIGluY3IpXG47O1xuXG5sZXQgYXR0cmlidXRlX3BhY2tlZCBwb3Nfb3B0IHQgPVxuICBtYXRjaCAhZW5hYmxlZCwgcG9zX29wdCB3aXRoXG4gIHwgdHJ1ZSwgU29tZSBwb3MgLT4gYXR0cmlidXRlX3BhY2tlZCBwb3MgdFxuICB8IF8gLT4gKClcbjs7XG5cbmxldCBhdHRyaWJ1dGUgcG9zX29wdCBpbmNyID0gaWYgIWVuYWJsZWQgdGhlbiBhdHRyaWJ1dGVfcGFja2VkIHBvc19vcHQgKEluY3IucGFjayBpbmNyKVxuIiwib3BlbiEgQ29yZVxuXG50eXBlICdhY3Rpb24gdCA9XG4gIHsgaW5qZWN0IDogJ2FjdGlvbiAtPiB1bml0IFVpX2VmZmVjdC50XG4gIDsgc2NoZWR1bGVfZXZlbnQgOiB1bml0IFVpX2VmZmVjdC50IC0+IHVuaXRcbiAgfVxuXG5sZXQgaW5qZWN0IHsgaW5qZWN0OyBzY2hlZHVsZV9ldmVudCA9IF8gfSBhY3Rpb24gPSBpbmplY3QgYWN0aW9uXG5sZXQgc2NoZWR1bGVfZXZlbnQgeyBpbmplY3QgPSBfOyBzY2hlZHVsZV9ldmVudCB9IGV2ZW50ID0gc2NoZWR1bGVfZXZlbnQgZXZlbnRcbmxldCBjcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgPSB7IGluamVjdDsgc2NoZWR1bGVfZXZlbnQgfVxuXG5tb2R1bGUgUHJpdmF0ZSA9IHN0cnVjdFxuICB0eXBlIG5vbnJlYyAnYWN0aW9uIHQgPSAnYWN0aW9uIHQgPVxuICAgIHsgaW5qZWN0IDogJ2FjdGlvbiAtPiB1bml0IFVpX2VmZmVjdC50XG4gICAgOyBzY2hlZHVsZV9ldmVudCA6IHVuaXQgVWlfZWZmZWN0LnQgLT4gdW5pdFxuICAgIH1cblxuICBsZXQgcmV2ZWFsID0gRm4uaWRcbmVuZFxuIiwib3BlbiEgQ29yZVxuaW5jbHVkZSBNb2R1bGVfdHlwZXNcbmluY2x1ZGUgQW5ub3RhdGVfaW5jclxubW9kdWxlIEVmZmVjdCA9IFVpX2VmZmVjdFxubW9kdWxlIFRpbWVfc291cmNlID0gVWlfdGltZV9zb3VyY2VcblxubGV0IHVucmVhY2hhYmxlX2FjdGlvbiA6IE5vdGhpbmcudCBBY3Rpb24ubGVhZiBBY3Rpb24udCAtPiAnYSA9IGZ1bmN0aW9uXG4gIHwgTGVhZl9keW5hbWljIF8gLT4gLlxuICB8IExlYWZfc3RhdGljIF8gLT4gLlxuOztcblxubGV0IHVudXNhYmxlX2FwcGx5X2FjdGlvbiB+aW5qZWN0Ol8gfnNjaGVkdWxlX2V2ZW50Ol8gX2lucHV0IF9tb2RlbCA9IHVucmVhY2hhYmxlX2FjdGlvblxubGV0IHJlc2V0X3VuaXRfbW9kZWwgfmluamVjdDpfIH5zY2hlZHVsZV9ldmVudDpfICgpID0gKClcblxuKCogaW5jcmVtZW50YWwgbm9kZXMgYXJlIHByZXR0eSBiaWc7IGFsbG9jYXRlIHRoZXNlIGp1c3Qgb25jZSAqKVxubGV0IHVuaXRfbW9kZWwgPSBJbmNyLnJldHVybiAoKVxubGV0IGlnbm9yZV9lZmZlY3QgPSBJbmNyLnJldHVybiBFZmZlY3QuSWdub3JlXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcbmluY2x1ZGUgVW5pdl9tYXAuTWFrZSAoVW5pdl9tYXAuVHlwZV9pZF9rZXkpIChJbmNyKVxuXG5sZXQgYWRkX292ZXJ3cml0aW5nIHQgfmtleSB+ZGF0YSA9IHVwZGF0ZSB0IGtleSB+ZjooZnVuIF8gLT4gZGF0YSlcbiIsIm9wZW4hIENvcmVcblxubW9kdWxlIFQgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IFQgOlxuICAgICAgICB7IGtleSA6ICdrXG4gICAgICAgIDsgaWQgOiAnayBUeXBlX2VxdWFsLklkLnRcbiAgICAgICAgOyBjb21wYXJlIDogJ2sgLT4gJ2sgLT4gaW50XG4gICAgICAgIH1cbiAgICAgICAgLT4gdFxuXG4gIGxldCBjb21wYXJlXG4gICAgKFQgeyBrZXkgPSBrZXkxOyBpZCA9IGlkMTsgY29tcGFyZSA9IGNvbXBhcmUxIH0pXG4gICAgKFQgeyBrZXkgPSBrZXkyOyBpZCA9IGlkMjsgY29tcGFyZSA9IF8gfSlcbiAgICA9XG4gICAgbWF0Y2ggVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3MgaWQxIGlkMiB3aXRoXG4gICAgfCBTb21lIFQgLT4gY29tcGFyZTEga2V5MSBrZXkyXG4gICAgfCBOb25lIC0+XG4gICAgICAoKiBVc2UgdGhlIFVpZCBjb21wYXJpc29uIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGNvbXBhcmF0b3IgaXMgc3RhYmxlLlxuICAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIG5ldmVyIHJldHVybiAwIGJlY2F1c2Ugd2UndmUgYWxyZWFkeSBlc3RhYmxpc2hlZFxuICAgICAgICAgdGhhdCB0aGVzZSB0eXBlLWlkcyBhcmUgbm90IGVxdWFsKilcbiAgICAgIFR5cGVfZXF1YWwuSWQuVWlkLmNvbXBhcmUgKFR5cGVfZXF1YWwuSWQudWlkIGlkMSkgKFR5cGVfZXF1YWwuSWQudWlkIGlkMilcbiAgOztcblxuICBsZXQgc2V4cF9vZl90IChUIHsga2V5OyBpZDsgY29tcGFyZSA9IF8gfSkgPSBUeXBlX2VxdWFsLklkLnRvX3NleHAgaWQga2V5XG4gIGxldCBjcmVhdGUgfmtleSB+aWQgfmNvbXBhcmUgPSBUIHsga2V5OyBpZDsgY29tcGFyZSB9XG5lbmRcblxuaW5jbHVkZSBUXG5pbmNsdWRlIENvbXBhcmFibGUuTWFrZV9wbGFpbiAoVClcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG4oKiBBIGNvbGxlY3Rpb24gb2Ygc3RhdHMgYWJvdXQgdGhlIHN0YWJpbGl6YXRpb24gdHJhY2tlci4gVGhlc2UgYXJlIGV4cG9zZWQgaW4gdGhlXG4gICBbRm9yX3Rlc3RpbmddIG1vZHVsZSwgYW5kIGFyZSB1c2VkIGZvciB0ZXN0aW5nIHRoZSBpbnRlcm5hbHMgb25seS4gKilcbm1vZHVsZSBTdGF0cyA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHsgbXV0YWJsZSBudW1fc3RhYmlsaXplIDogaW50XG4gICAgOyBtdXRhYmxlIG51bV9kb24ndF9zdGFiaWxpemUgOiBpbnRcbiAgICA7IG11dGFibGUgbnVtX3N0YWJpbGl6ZV9jYXVzZWRfYnlfdmFycyA6IGludFxuICAgIDsgbXV0YWJsZSBudW1fcHJ1bmVzX3J1biA6IGludFxuICAgIDsgbXV0YWJsZSBudW1fYnJhbmNoZXNfcHJ1bmVkIDogaW50XG4gICAgfVxuICBbQEBkZXJpdmluZyBmaWVsZHMgfmdldHRlcnNdXG5cbiAgbGV0IGNyZWF0ZSAoKSA9XG4gICAgeyBudW1fc3RhYmlsaXplID0gMFxuICAgIDsgbnVtX2Rvbid0X3N0YWJpbGl6ZSA9IDBcbiAgICA7IG51bV9zdGFiaWxpemVfY2F1c2VkX2J5X3ZhcnMgPSAwXG4gICAgOyBudW1fcHJ1bmVzX3J1biA9IDBcbiAgICA7IG51bV9icmFuY2hlc19wcnVuZWQgPSAwXG4gICAgfVxuICA7O1xuXG4gIGxldCBpbmNyX3N0YWJpbGl6ZSB0ID0gdC5udW1fc3RhYmlsaXplIDwtIHQubnVtX3N0YWJpbGl6ZSArIDFcbiAgbGV0IGluY3JfZG9uJ3Rfc3RhYmlsaXplIHQgPSB0Lm51bV9kb24ndF9zdGFiaWxpemUgPC0gdC5udW1fZG9uJ3Rfc3RhYmlsaXplICsgMVxuXG4gIGxldCBpbmNyX3N0YWJpbGl6ZV9jYXVzZWRfYnlfdmFycyB0ID1cbiAgICB0Lm51bV9zdGFiaWxpemVfY2F1c2VkX2J5X3ZhcnMgPC0gdC5udW1fc3RhYmlsaXplX2NhdXNlZF9ieV92YXJzICsgMVxuICA7O1xuXG4gIGxldCBpbmNyX3BydW5lc19ydW4gdCA9IHQubnVtX3BydW5lc19ydW4gPC0gdC5udW1fcHJ1bmVzX3J1biArIDFcbiAgbGV0IGluY3JfYnJhbmNoZXNfcHJ1bmVkIHQgPSB0Lm51bV9icmFuY2hlc19wcnVuZWQgPC0gdC5udW1fYnJhbmNoZXNfcHJ1bmVkICsgMVxuXG4gIGxldCBkaXNwbGF5IHQgPVxuICAgIHByaW50X3NcbiAgICAgIFslc2V4cFxuICAgICAgICB7IHN0YWJpbGl6YXRpb25zX2JlZm9yZV9hY3Rpb25zIDogaW50ID0gdC5udW1fc3RhYmlsaXplXG4gICAgICAgIDsgc3RhYmlsaXphdGlvbnNfY2F1c2VkX2J5X3Zhcl9jaGFuZ2VzIDogaW50ID0gdC5udW1fc3RhYmlsaXplX2NhdXNlZF9ieV92YXJzXG4gICAgICAgIDsgc3RhYmlsaXphdGlvbnNfc2tpcHBlZCA6IGludCA9IHQubnVtX2Rvbid0X3N0YWJpbGl6ZVxuICAgICAgICA7IHBydW5lc19ydW4gOiBpbnQgPSB0Lm51bV9wcnVuZXNfcnVuXG4gICAgICAgIDsgYnJhbmNoZXNfcHJ1bmVkIDogaW50ID0gdC5udW1fYnJhbmNoZXNfcHJ1bmVkXG4gICAgICAgIH1dXG4gIDs7XG5lbmRcblxuKCogW2RpcnR5X2luY3JlbWVudGFsX3ZhcnNdIHRyYWNrcyB3aGV0aGVyIGFueSBbSW5jci5WYXIudF1zIGhhdmUgYmVlbiBzZXQgc2luY2UgdGhlIGxhc3RcbiAgIHN0YWJpbGl6YXRpb24uIFRoaXMgaXMgZ2xvYmFsIGJlY2F1c2UgdGhlcmUgaXMgb25seSBvbmUgSW5jcmVtZW50YWwgdW5pdmVyc2UgZm9yIGFsbFxuICAgQm9uc2FpIGFwcHMuIElmIHdlIGV2ZXIgZGVjaWRlIHRvIHBhcmFtZXRlcml6ZSBCb25zYWkgYXBwcyBvdmVyIGFuIEluY3JlbWVudGFsXG4gICB1bml2ZXJzZSwgdGhpcyBzdGF0ZSBzaG91bGQgZ2V0IHB1bGxlZCBpbnRvIHRoZSB0cmFja2VycyB0aGVtc2VsdmVzLiAqKVxubGV0IGRpcnR5X2luY3JlbWVudGFsX3ZhcnMgPSByZWYgZmFsc2VcbmxldCBtYXJrX2luY3JlbWVudGFsX2RpcnR5ICgpID0gZGlydHlfaW5jcmVtZW50YWxfdmFycyA6PSB0cnVlXG5sZXQgbWFya19pbmNyZW1lbnRhbF9jbGVhbiAoKSA9IGRpcnR5X2luY3JlbWVudGFsX3ZhcnMgOj0gZmFsc2VcblxubW9kdWxlIEdlbmVyYXRpb24gPSBzdHJ1Y3RcbiAgaW5jbHVkZSBJbnRcblxuICBsZXQgaW5pdGlhbCA9IDBcbiAgbGV0IG5leHQgPSBJbnQuc3VjY1xuZW5kXG5cbm1vZHVsZSBBY3Rpb25fdHJpZSA9IHN0cnVjdFxuICBsZXQgbWF4X3NlY29uZHNfYmV0d2Vlbl9wcnVuZXMgPSAxNVxuXG4gICgqIElmIGFuIGFzc29jIG9yIHN3aXRjaCBoYXNuJ3QgcmVjZWl2ZWQgYW4gYWN0aW9uIGluIHRoZSBsYXN0XG4gICAgIFtudW1fZ2VuZXJhdGlvbnNfdG9fc3RhbGVdIGdlbmVyYXRpb25zLCB0aGVuIHdlJ2xsIGFzc3VtZSB0aGUgYnJhbmNoIGlzIG5vIGxvbmdlclxuICAgICBhY3RpdmUgYW5kIHJlbW92ZSBpdCBmcm9tIG91ciBtYXAuIE5vdGUgdGhhdCBnZW5lcmF0aW9ucyBpbmNyZWFzZSB3aGVuZXZlciB3ZSBuZWVkIHRvXG4gICAgIHN0YWJpbGl6ZSBmb3IgYW4gYWN0aW9uLiBUaGlzIG51bWJlciBpcyBtb3N0bHkgYXJiaXRyYXJ5IGFuZCBzaG91bGQgYmUgdHdlYWtlZCBhc1xuICAgICBuZWNlc3NhcnkuXG5cbiAgICAgVGhlIG51bWJlciBiZWxvdyBpczpcbiAgICAgKG1pbiBzdGFiaWxpemF0aW9uIC8gZnJhbWUpICogKGZyYW1lcyAvIHNlYykgKiBzZWMgYmV0d2VlbiBwcnVuZXNcbiAgKilcbiAgbGV0IG51bV9nZW5lcmF0aW9uc190b19zdGFsZSA9IDMgKiA2MCAqIG1heF9zZWNvbmRzX2JldHdlZW5fcHJ1bmVzXG5cbiAgdHlwZSAnaW5uZXIgd2l0aF9nZW5lcmF0aW9uID1cbiAgICB7IG11dGFibGUgZ2VuZXJhdGlvbiA6IEdlbmVyYXRpb24udFxuICAgIDsgbXV0YWJsZSBpbm5lciA6ICdpbm5lclxuICAgIH1cblxuICBsZXQgd2l0aF9lbXB0eV9nZW5lcmF0aW9uIGlubmVyID0geyBnZW5lcmF0aW9uID0gLTE7IGlubmVyIH1cblxuICB0eXBlICdpbm5lciBub2RlID1cbiAgICB8IFVuZXhwbG9yZWQgOiBfIG5vZGVcbiAgICB8IFRlcm1pbmFsIDogJ2lubmVyIEFjdGlvbi5sZWFmIG5vZGVcbiAgICB8IFN1YiA6XG4gICAgICAgIHsgZnJvbSA6ICdmcm9tIG5vZGUgd2l0aF9nZW5lcmF0aW9uXG4gICAgICAgIDsgaW50byA6ICdpbnRvIG5vZGUgd2l0aF9nZW5lcmF0aW9uXG4gICAgICAgIH1cbiAgICAgICAgLT4gKCdmcm9tLCAnaW50bykgQWN0aW9uLnN1YiBub2RlXG4gICAgfCBXcmFwIDpcbiAgICAgICAgeyBvdXRlciA6IHVuaXQgd2l0aF9nZW5lcmF0aW9uXG4gICAgICAgIDsgaW5uZXIgOiAnaW5uZXIgbm9kZSB3aXRoX2dlbmVyYXRpb25cbiAgICAgICAgfVxuICAgICAgICAtPiAoJ2lubmVyLCAnb3V0ZXIpIEFjdGlvbi53cmFwIG5vZGVcbiAgICB8IE1vZGVsX3Jlc2V0IDpcbiAgICAgICAgeyBvdXRlciA6IHVuaXQgd2l0aF9nZW5lcmF0aW9uXG4gICAgICAgIDsgaW5uZXIgOiAnaW5uZXIgbm9kZSB3aXRoX2dlbmVyYXRpb25cbiAgICAgICAgfVxuICAgICAgICAtPiAnaW5uZXIgQWN0aW9uLm1vZGVsX3Jlc2V0dGVyIG5vZGVcbiAgICB8IExhenkgOiBwYWNrZWQgLT4gQWN0aW9uLmxhenlfIG5vZGVcbiAgICB8IEFzc29jIDogJ2lubmVyIGFzc29jIC0+IChfLCAnaW5uZXIpIEFjdGlvbi5hc3NvYyBub2RlXG4gICAgfCBBc3NvY19vbiA6ICdpbm5lciBhc3NvY19vbiAtPiAoXywgXywgJ2lubmVyKSBBY3Rpb24uYXNzb2Nfb24gbm9kZVxuICAgIHwgU3dpdGNoIDogc3dpdGNoIC0+IEFjdGlvbi5zd2l0Y2ggbm9kZVxuXG4gIGFuZCAnaW5uZXIgYXNzb2MgPSB7IG11dGFibGUgYnlfa2V5IDogJ2lubmVyIG5vZGUgd2l0aF9nZW5lcmF0aW9uIEtleWVkLk1hcC50IH1cbiAgYW5kICdpbm5lciBhc3NvY19vbiA9IHsgbXV0YWJsZSBieV9pb19rZXkgOiAnaW5uZXIgbm9kZSB3aXRoX2dlbmVyYXRpb24gS2V5ZWQuTWFwLnQgfVxuICBhbmQgc3dpdGNoID0geyBtdXRhYmxlIGJ5X2JyYW5jaCA6IHBhY2tlZCBJbnQuTWFwLnQgfVxuXG4gIGFuZCBwYWNrZWQgPVxuICAgIHwgVCA6XG4gICAgICAgIHsgaW5uZXIgOiAnaW5uZXIgbm9kZSB3aXRoX2dlbmVyYXRpb25cbiAgICAgICAgOyB0eXBlX2lkIDogJ2lubmVyIEFjdGlvbi5pZFxuICAgICAgICB9XG4gICAgICAgIC0+IHBhY2tlZFxuXG4gIHR5cGUgJ2lubmVyIHQgPSAnaW5uZXIgbm9kZSB3aXRoX2dlbmVyYXRpb25cblxuICBsZXQgZW1wdHkgKCkgPSB3aXRoX2VtcHR5X2dlbmVyYXRpb24gVW5leHBsb3JlZFxuXG4gIGxldCBub2RlX29mX2FjdGlvbiBjdXJyZW50X2dlbmVyYXRpb24gYWN0aW9uID1cbiAgICBsZXQgd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gaW5uZXIgPSB7IGdlbmVyYXRpb24gPSBjdXJyZW50X2dlbmVyYXRpb247IGlubmVyIH0gaW5cbiAgICBsZXQgcmVjIG5vZGVfb2ZfYWN0aW9uIDogdHlwZSBzdHJpcHBlZC4gc3RyaXBwZWQgQWN0aW9uLnQgLT4gc3RyaXBwZWQgbm9kZSA9IGZ1bmN0aW9uXG4gICAgICB8IExlYWZfc3RhdGljIF8gLT4gVGVybWluYWxcbiAgICAgIHwgTGVhZl9keW5hbWljIF8gLT4gVGVybWluYWxcbiAgICAgIHwgU3ViX2Zyb20gZnJvbSAtPlxuICAgICAgICBsZXQgZnJvbSA9IHdpdGhfY3VycmVudF9nZW5lcmF0aW9uIChub2RlX29mX2FjdGlvbiBmcm9tKSBpblxuICAgICAgICBTdWIgeyBmcm9tOyBpbnRvID0gZW1wdHkgKCkgfVxuICAgICAgfCBTdWJfaW50byBpbnRvIC0+XG4gICAgICAgIGxldCBpbnRvID0gd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gKG5vZGVfb2ZfYWN0aW9uIGludG8pIGluXG4gICAgICAgIFN1YiB7IGZyb20gPSBlbXB0eSAoKTsgaW50byB9XG4gICAgICB8IFdyYXBfaW5uZXIgaW5uZXIgLT5cbiAgICAgICAgbGV0IGlubmVyID0gd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gKG5vZGVfb2ZfYWN0aW9uIGlubmVyKSBpblxuICAgICAgICBXcmFwIHsgb3V0ZXIgPSB3aXRoX2VtcHR5X2dlbmVyYXRpb24gKCk7IGlubmVyIH1cbiAgICAgIHwgV3JhcF9vdXRlciBfIC0+IFdyYXAgeyBvdXRlciA9IHdpdGhfY3VycmVudF9nZW5lcmF0aW9uICgpOyBpbm5lciA9IGVtcHR5ICgpIH1cbiAgICAgIHwgTW9kZWxfcmVzZXRfaW5uZXIgaW5uZXIgLT5cbiAgICAgICAgbGV0IGlubmVyID0gd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gKG5vZGVfb2ZfYWN0aW9uIGlubmVyKSBpblxuICAgICAgICBNb2RlbF9yZXNldCB7IG91dGVyID0gd2l0aF9lbXB0eV9nZW5lcmF0aW9uICgpOyBpbm5lciB9XG4gICAgICB8IE1vZGVsX3Jlc2V0X291dGVyIC0+XG4gICAgICAgIE1vZGVsX3Jlc2V0IHsgb3V0ZXIgPSB3aXRoX2N1cnJlbnRfZ2VuZXJhdGlvbiAoKTsgaW5uZXIgPSBlbXB0eSAoKSB9XG4gICAgICB8IFN3aXRjaCB7IGJyYW5jaDsgdHlwZV9pZDsgYWN0aW9uIH0gLT5cbiAgICAgICAgbGV0IGlubmVyID0gd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gKG5vZGVfb2ZfYWN0aW9uIGFjdGlvbikgaW5cbiAgICAgICAgbGV0IGlubmVyID0gVCB7IGlubmVyOyB0eXBlX2lkIH0gaW5cbiAgICAgICAgU3dpdGNoIHsgYnlfYnJhbmNoID0gSW50Lk1hcC5zaW5nbGV0b24gYnJhbmNoIGlubmVyIH1cbiAgICAgIHwgTGF6eSB7IHR5cGVfaWQ7IGFjdGlvbiB9IC0+XG4gICAgICAgIGxldCBpbm5lciA9IHdpdGhfY3VycmVudF9nZW5lcmF0aW9uIChub2RlX29mX2FjdGlvbiBhY3Rpb24pIGluXG4gICAgICAgIExhenkgKFQgeyBpbm5lcjsgdHlwZV9pZCB9KVxuICAgICAgfCBBc3NvYyB7IGtleTsgaWQ7IGNvbXBhcmU7IGFjdGlvbiB9IC0+XG4gICAgICAgIGxldCBpbm5lciA9IHdpdGhfY3VycmVudF9nZW5lcmF0aW9uIChub2RlX29mX2FjdGlvbiBhY3Rpb24pIGluXG4gICAgICAgIEFzc29jIHsgYnlfa2V5ID0gS2V5ZWQuTWFwLnNpbmdsZXRvbiAoS2V5ZWQuY3JlYXRlIH5rZXkgfmlkIH5jb21wYXJlKSBpbm5lciB9XG4gICAgICB8IEFzc29jX29uIHsgaW9fa2V5OyBtb2RlbF9rZXkgPSBfOyBpb19pZDsgaW9fY29tcGFyZTsgYWN0aW9uIH0gLT5cbiAgICAgICAgbGV0IGlubmVyID0gd2l0aF9jdXJyZW50X2dlbmVyYXRpb24gKG5vZGVfb2ZfYWN0aW9uIGFjdGlvbikgaW5cbiAgICAgICAgQXNzb2Nfb25cbiAgICAgICAgICB7IGJ5X2lvX2tleSA9XG4gICAgICAgICAgICAgIEtleWVkLk1hcC5zaW5nbGV0b25cbiAgICAgICAgICAgICAgICAoS2V5ZWQuY3JlYXRlIH5rZXk6aW9fa2V5IH5pZDppb19pZCB+Y29tcGFyZTppb19jb21wYXJlKVxuICAgICAgICAgICAgICAgIGlubmVyXG4gICAgICAgICAgfVxuICAgIGluXG4gICAgbm9kZV9vZl9hY3Rpb24gYWN0aW9uXG4gIDs7XG5cbiAgdHlwZSAnc3RhdGUgdHJhdmVyc2VyID1cbiAgICB7IHVuZXhwbG9yZWQgOlxuICAgICAgICAnZHluYW1pYyAnc3RhdGljICdzdHJpcHBlZC4gJ3N0YXRlIC0+ICdzdHJpcHBlZCB0IC0+ICdzdHJpcHBlZCBBY3Rpb24udCAtPiAnc3RhdGVcbiAgICA7IGR5bmFtaWNfbGVhZiA6ICdzdGF0ZSAtPiAnc3RhdGVcbiAgICA7IHN0YXRpY19sZWFmIDogJ3N0YXRlIC0+ICdzdGF0ZVxuICAgIDsgc3ViIDpcbiAgICAgICAgJ2R5bmFtaWMgJ3N0YXRpYyAnZnJvbSAnaW50by5cbiAgICAgICAgJ3N0YXRlXG4gICAgICAgIC0+IGZyb206J2Zyb20gdFxuICAgICAgICAtPiBpbnRvOidpbnRvIHRcbiAgICAgICAgLT4gKCdmcm9tLCAnaW50bykgQWN0aW9uLnN1YiBBY3Rpb24udFxuICAgICAgICAtPiAnc3RhdGVcbiAgICA7IHdyYXAgOlxuICAgICAgICAnZHluYW1pYyAnc3RhdGljICdpbm5lciAnb3V0ZXIuXG4gICAgICAgICdzdGF0ZVxuICAgICAgICAtPiBpbm5lcjonaW5uZXIgdFxuICAgICAgICAtPiBvdXRlcjp1bml0IHdpdGhfZ2VuZXJhdGlvblxuICAgICAgICAtPiAoJ2lubmVyLCAnb3V0ZXIpIEFjdGlvbi53cmFwIEFjdGlvbi50XG4gICAgICAgIC0+ICdzdGF0ZVxuICAgIDsgbW9kZWxfcmVzZXQgOlxuICAgICAgICAnZHluYW1pYyAnc3RhdGljICdpbm5lci5cbiAgICAgICAgJ3N0YXRlXG4gICAgICAgIC0+IGlubmVyOidpbm5lciB0XG4gICAgICAgIC0+IG91dGVyOnVuaXQgd2l0aF9nZW5lcmF0aW9uXG4gICAgICAgIC0+ICdpbm5lciBBY3Rpb24ubW9kZWxfcmVzZXR0ZXIgQWN0aW9uLnRcbiAgICAgICAgLT4gJ3N0YXRlXG4gICAgOyBsYXp5XyA6XG4gICAgICAgICdkeW5hbWljICdzdGF0aWMgJ3N0cmlwcGVkLiAnc3RhdGUgLT4gJ3N0cmlwcGVkIHQgLT4gJ3N0cmlwcGVkIEFjdGlvbi50IC0+ICdzdGF0ZVxuICAgIDsgYXNzb2MgOlxuICAgICAgICAnZHluYW1pYyAnc3RhdGljICdpbm5lciAna2V5LlxuICAgICAgICAnc3RhdGVcbiAgICAgICAgLT4gYXNzb2M6J2lubmVyIGFzc29jXG4gICAgICAgIC0+IGtleTpLZXllZC50XG4gICAgICAgIC0+ICgna2V5LCAnaW5uZXIpIEFjdGlvbi5hc3NvYyBBY3Rpb24udFxuICAgICAgICAtPiAnc3RhdGVcbiAgICA7IGFzc29jX29uIDpcbiAgICAgICAgJ2R5bmFtaWMgJ3N0YXRpYyAnaW5uZXIgJ2lvX2tleSAnbW9kZWxfa2V5LlxuICAgICAgICAnc3RhdGVcbiAgICAgICAgLT4gYXNzb2Nfb246J2lubmVyIGFzc29jX29uXG4gICAgICAgIC0+IGtleTpLZXllZC50XG4gICAgICAgIC0+ICgnaW9fa2V5LCAnbW9kZWxfa2V5LCAnaW5uZXIpIEFjdGlvbi5hc3NvY19vbiBBY3Rpb24udFxuICAgICAgICAtPiAnc3RhdGVcbiAgICA7IHN3aXRjaCA6XG4gICAgICAgICdkeW5hbWljICdzdGF0aWMuXG4gICAgICAgICdzdGF0ZSAtPiBzd2l0Y2g6c3dpdGNoIC0+IGJyYW5jaDppbnQgLT4gQWN0aW9uLnN3aXRjaCBBY3Rpb24udCAtPiAnc3RhdGVcbiAgICB9XG5cbiAgbGV0IHRyYXZlcnNlICh0eXBlIHN0YXRlKSB+KGluaXRpYWxfc3RhdGUgOiBzdGF0ZSkgKHRyYXZlcnNlciA6IHN0YXRlIHRyYXZlcnNlcikgPVxuICAgIGxldCByZWMgbG9vcCA6IHR5cGUgc3RyaXBwZWQuIHN0YXRlIC0+IHN0cmlwcGVkIEFjdGlvbi50IC0+IHN0cmlwcGVkIHQgLT4gc3RhdGUgPVxuICAgICAgZnVuIHN0YXRlIGFjdGlvbiB0IC0+XG4gICAgICBtYXRjaCB0LmlubmVyIHdpdGhcbiAgICAgIHwgVW5leHBsb3JlZCAtPiB0cmF2ZXJzZXIudW5leHBsb3JlZCBzdGF0ZSB0IGFjdGlvblxuICAgICAgfCBUZXJtaW5hbCAtPlxuICAgICAgICAobWF0Y2ggYWN0aW9uIHdpdGhcbiAgICAgICAgIHwgTGVhZl9keW5hbWljIF8gLT4gdHJhdmVyc2VyLmR5bmFtaWNfbGVhZiBzdGF0ZVxuICAgICAgICAgfCBMZWFmX3N0YXRpYyBfIC0+IHRyYXZlcnNlci5zdGF0aWNfbGVhZiBzdGF0ZSlcbiAgICAgIHwgU3ViIHsgZnJvbTsgaW50byB9IC0+XG4gICAgICAgIGxldCBzdGF0ZSA9IHRyYXZlcnNlci5zdWIgc3RhdGUgfmZyb20gfmludG8gYWN0aW9uIGluXG4gICAgICAgIChtYXRjaCBhY3Rpb24gd2l0aFxuICAgICAgICAgfCBTdWJfZnJvbSBmcm9tX2FjdGlvbiAtPiBsb29wIHN0YXRlIGZyb21fYWN0aW9uIGZyb21cbiAgICAgICAgIHwgU3ViX2ludG8gaW50b19hY3Rpb24gLT4gbG9vcCBzdGF0ZSBpbnRvX2FjdGlvbiBpbnRvKVxuICAgICAgfCBXcmFwIHsgaW5uZXI7IG91dGVyIH0gLT5cbiAgICAgICAgbGV0IHN0YXRlID0gdHJhdmVyc2VyLndyYXAgc3RhdGUgfmlubmVyIH5vdXRlciBhY3Rpb24gaW5cbiAgICAgICAgKG1hdGNoIGFjdGlvbiB3aXRoXG4gICAgICAgICB8IFdyYXBfaW5uZXIgaW5uZXJfYWN0aW9uIC0+IGxvb3Agc3RhdGUgaW5uZXJfYWN0aW9uIGlubmVyXG4gICAgICAgICB8IFdyYXBfb3V0ZXIgXyAtPiB0cmF2ZXJzZXIuZHluYW1pY19sZWFmIHN0YXRlKVxuICAgICAgfCBNb2RlbF9yZXNldCB7IGlubmVyOyBvdXRlciB9IC0+XG4gICAgICAgIGxldCBzdGF0ZSA9IHRyYXZlcnNlci5tb2RlbF9yZXNldCBzdGF0ZSB+aW5uZXIgfm91dGVyIGFjdGlvbiBpblxuICAgICAgICAobWF0Y2ggYWN0aW9uIHdpdGhcbiAgICAgICAgIHwgTW9kZWxfcmVzZXRfaW5uZXIgaW5uZXJfYWN0aW9uIC0+IGxvb3Agc3RhdGUgaW5uZXJfYWN0aW9uIGlubmVyXG4gICAgICAgICB8IE1vZGVsX3Jlc2V0X291dGVyIC0+IHRyYXZlcnNlci5zdGF0aWNfbGVhZiBzdGF0ZSlcbiAgICAgIHwgTGF6eSAoVCB7IHR5cGVfaWQ7IGlubmVyIH0pIC0+XG4gICAgICAgIGxldCAoTGF6eSB7IHR5cGVfaWQgPSBhY3Rpb25fdHlwZV9pZDsgYWN0aW9uIH0pID0gYWN0aW9uIGluXG4gICAgICAgIGxldCBUID0gQWN0aW9uLlR5cGVfaWQuc2FtZV93aXRuZXNzX2V4biB0eXBlX2lkIGFjdGlvbl90eXBlX2lkIGluXG4gICAgICAgIGxldCBzdGF0ZSA9IHRyYXZlcnNlci5sYXp5XyBzdGF0ZSBpbm5lciBhY3Rpb24gaW5cbiAgICAgICAgbG9vcCBzdGF0ZSBhY3Rpb24gaW5uZXJcbiAgICAgIHwgQXNzb2MgYXNzb2MgLT5cbiAgICAgICAgbGV0IChBc3NvYyB7IGtleTsgaWQ7IGNvbXBhcmU7IGFjdGlvbiA9IGlubmVyX2FjdGlvbiB9KSA9IGFjdGlvbiBpblxuICAgICAgICBsZXQga2V5ZWQgPSBLZXllZC5jcmVhdGUgfmtleSB+aWQgfmNvbXBhcmUgaW5cbiAgICAgICAgbGV0IHN0YXRlID0gdHJhdmVyc2VyLmFzc29jIHN0YXRlIH5hc3NvYyB+a2V5OmtleWVkIGFjdGlvbiBpblxuICAgICAgICAobWF0Y2ggTWFwLmZpbmQgYXNzb2MuYnlfa2V5IGtleWVkIHdpdGhcbiAgICAgICAgIHwgTm9uZSAtPlxuICAgICAgICAgICBsZXQgZW1wdHkgPSBlbXB0eSAoKSBpblxuICAgICAgICAgICBhc3NvYy5ieV9rZXkgPC0gTWFwLnNldCBhc3NvYy5ieV9rZXkgfmtleTprZXllZCB+ZGF0YTplbXB0eTtcbiAgICAgICAgICAgdHJhdmVyc2VyLnVuZXhwbG9yZWQgc3RhdGUgZW1wdHkgaW5uZXJfYWN0aW9uXG4gICAgICAgICB8IFNvbWUgaW5uZXIgLT4gbG9vcCBzdGF0ZSBpbm5lcl9hY3Rpb24gaW5uZXIpXG4gICAgICB8IEFzc29jX29uIGFzc29jX29uIC0+XG4gICAgICAgIGxldCAoQXNzb2Nfb24geyBpb19rZXk7IG1vZGVsX2tleSA9IF87IGlvX2NvbXBhcmU7IGlvX2lkOyBhY3Rpb24gPSBpbm5lcl9hY3Rpb24gfSlcbiAgICAgICAgICA9XG4gICAgICAgICAgYWN0aW9uXG4gICAgICAgIGluXG4gICAgICAgIGxldCBrZXllZCA9IEtleWVkLmNyZWF0ZSB+a2V5OmlvX2tleSB+aWQ6aW9faWQgfmNvbXBhcmU6aW9fY29tcGFyZSBpblxuICAgICAgICBsZXQgc3RhdGUgPSB0cmF2ZXJzZXIuYXNzb2Nfb24gc3RhdGUgfmFzc29jX29uIH5rZXk6a2V5ZWQgYWN0aW9uIGluXG4gICAgICAgIChtYXRjaCBNYXAuZmluZCBhc3NvY19vbi5ieV9pb19rZXkga2V5ZWQgd2l0aFxuICAgICAgICAgfCBOb25lIC0+XG4gICAgICAgICAgIGxldCBlbXB0eSA9IGVtcHR5ICgpIGluXG4gICAgICAgICAgIGFzc29jX29uLmJ5X2lvX2tleSA8LSBNYXAuc2V0IGFzc29jX29uLmJ5X2lvX2tleSB+a2V5OmtleWVkIH5kYXRhOmVtcHR5O1xuICAgICAgICAgICB0cmF2ZXJzZXIudW5leHBsb3JlZCBzdGF0ZSBlbXB0eSBpbm5lcl9hY3Rpb25cbiAgICAgICAgIHwgU29tZSBpbm5lciAtPiBsb29wIHN0YXRlIGlubmVyX2FjdGlvbiBpbm5lcilcbiAgICAgIHwgU3dpdGNoIHN3aXRjaCAtPlxuICAgICAgICBsZXQgKFN3aXRjaCB7IGJyYW5jaDsgdHlwZV9pZCA9IGFjdGlvbl90eXBlX2lkOyBhY3Rpb24gPSBpbm5lcl9hY3Rpb24gfSkgPVxuICAgICAgICAgIGFjdGlvblxuICAgICAgICBpblxuICAgICAgICBsZXQgc3RhdGUgPSB0cmF2ZXJzZXIuc3dpdGNoIHN0YXRlIH5zd2l0Y2ggfmJyYW5jaCBhY3Rpb24gaW5cbiAgICAgICAgKG1hdGNoIE1hcC5maW5kIHN3aXRjaC5ieV9icmFuY2ggYnJhbmNoIHdpdGhcbiAgICAgICAgIHwgTm9uZSAtPlxuICAgICAgICAgICBsZXQgZW1wdHkgPSBlbXB0eSAoKSBpblxuICAgICAgICAgICBzd2l0Y2guYnlfYnJhbmNoXG4gICAgICAgICAgICAgPC0gTWFwLnNldFxuICAgICAgICAgICAgICAgICAgc3dpdGNoLmJ5X2JyYW5jaFxuICAgICAgICAgICAgICAgICAgfmtleTpicmFuY2hcbiAgICAgICAgICAgICAgICAgIH5kYXRhOihUIHsgaW5uZXIgPSBlbXB0eTsgdHlwZV9pZCA9IGFjdGlvbl90eXBlX2lkIH0pO1xuICAgICAgICAgICB0cmF2ZXJzZXIudW5leHBsb3JlZCBzdGF0ZSBlbXB0eSBpbm5lcl9hY3Rpb25cbiAgICAgICAgIHwgU29tZSAoVCB7IGlubmVyOyB0eXBlX2lkIH0pIC0+XG4gICAgICAgICAgIGxldCBUID0gQWN0aW9uLlR5cGVfaWQuc2FtZV93aXRuZXNzX2V4biB0eXBlX2lkIGFjdGlvbl90eXBlX2lkIGluXG4gICAgICAgICAgIGxvb3Agc3RhdGUgaW5uZXJfYWN0aW9uIGlubmVyKVxuICAgIGluXG4gICAgbG9vcCBpbml0aWFsX3N0YXRlXG4gIDs7XG5cbiAgbGV0IHJlYyBpc19keW5hbWljX2FjdGlvbiA6IHR5cGUgYS4gYSBBY3Rpb24udCAtPiBib29sID0gZnVuY3Rpb25cbiAgICB8IExlYWZfZHluYW1pYyBfIC0+IHRydWVcbiAgICB8IFdyYXBfb3V0ZXIgXyAtPiB0cnVlXG4gICAgfCBNb2RlbF9yZXNldF9vdXRlciAtPiBmYWxzZVxuICAgIHwgTGVhZl9zdGF0aWMgXyAtPiBmYWxzZVxuICAgIHwgU3ViX2Zyb20gYWN0aW9uIC0+IGlzX2R5bmFtaWNfYWN0aW9uIGFjdGlvblxuICAgIHwgU3ViX2ludG8gYWN0aW9uIC0+IGlzX2R5bmFtaWNfYWN0aW9uIGFjdGlvblxuICAgIHwgV3JhcF9pbm5lciBhY3Rpb24gLT4gaXNfZHluYW1pY19hY3Rpb24gYWN0aW9uXG4gICAgfCBNb2RlbF9yZXNldF9pbm5lciBhY3Rpb24gLT4gaXNfZHluYW1pY19hY3Rpb24gYWN0aW9uXG4gICAgfCBTd2l0Y2ggeyBhY3Rpb247IHR5cGVfaWQgPSBfOyBicmFuY2ggPSBfIH0gLT4gaXNfZHluYW1pY19hY3Rpb24gYWN0aW9uXG4gICAgfCBMYXp5IHsgYWN0aW9uOyB0eXBlX2lkID0gXyB9IC0+IGlzX2R5bmFtaWNfYWN0aW9uIGFjdGlvblxuICAgIHwgQXNzb2MgeyBhY3Rpb247IGtleSA9IF87IGlkID0gXzsgY29tcGFyZSA9IF8gfSAtPiBpc19keW5hbWljX2FjdGlvbiBhY3Rpb25cbiAgICB8IEFzc29jX29uIHsgYWN0aW9uOyBpb19rZXkgPSBfOyBpb19pZCA9IF87IGlvX2NvbXBhcmUgPSBfOyBtb2RlbF9rZXkgPSBfIH0gLT5cbiAgICAgIGlzX2R5bmFtaWNfYWN0aW9uIGFjdGlvblxuICA7O1xuXG4gIGxldCBzaG91bGRfc3RhYmlsaXplX2R5bmFtaWNfYWN0aW9uIHN0YXRzIGZvdW5kX2NvbmZsaWN0ID1cbiAgICAoKiBVcGRhdGUgaW50ZXJuYWwgYm9va2tlZXBpbmcgZm9yIHRlc3RpbmcuICopXG4gICAgaWYgIWRpcnR5X2luY3JlbWVudGFsX3ZhcnMgdGhlbiBTdGF0cy5pbmNyX3N0YWJpbGl6ZV9jYXVzZWRfYnlfdmFycyBzdGF0cztcbiAgICBsZXQgc2hvdWxkX3N0YWJpbGl6ZSA9ICFkaXJ0eV9pbmNyZW1lbnRhbF92YXJzIHx8IGZvdW5kX2NvbmZsaWN0IGluXG4gICAgaWYgc2hvdWxkX3N0YWJpbGl6ZVxuICAgIHRoZW4gU3RhdHMuaW5jcl9zdGFiaWxpemUgc3RhdHNcbiAgICBlbHNlIFN0YXRzLmluY3JfZG9uJ3Rfc3RhYmlsaXplIHN0YXRzO1xuICAgIHNob3VsZF9zdGFiaWxpemVcbiAgOztcblxuICAoKiBbcmVxdWlyZXNfc3RhYmlsaXphdGlvbl0gZGV0ZXJtaW5lcyB3aGV0aGVyIHdlIG5lZWQgdG8gc3RhYmlsaXplIHRoZSBpbmNyZW1lbnRhbFxuICAgICBncmFwaCBiZWZvcmUgYXBwbHlpbmcgYSBib25zYWkgYWN0aW9uLiBUaGUgY3VycmVudCBjb25kaXRpb25zIGZvciBzdGFiaWxpemF0aW9uIGFyZTpcbiAgICAge3ZcbiAgICAgICAqIEEgZHluYW1pYyBhY3Rpb24gZGVzdGluZWQgZm9yIHRoZSBpbnRvIGJyYW5jaCBvZiBhIHN1YiByZXF1aXJlcyBzdGFiaWxpemF0aW9uIGlmXG4gICAgICAgICB0aGUgZnJvbSBicmFuY2ggaGFzIGFscmVhZHkgcmVjZWl2ZWQgYW4gYWN0aW9uIHRoaXMgZ2VuZXJhdGlvblxuICAgICAgICogQSBkeW5hbWljIGFjdGlvbiBkZXN0aW5lZCBmb3IgYSB3cmFwIHJlcXVpcmVzIGEgc3RhYmlsaXphdGlvbiBpZjpcbiAgICAgICAgICAgMS4gVGhlIGFjdGlvbiBpcyBkZXN0aW5lZCBmb3IgdGhlIGlubmVyIGNvbXB1dGF0aW9uIGFuZCBhbiBvdXRlciBhY3Rpb24gaGFzXG4gICAgICAgICAgIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRoaXMgZ2VuZXJhdGlvblxuICAgICAgICAgICAyLiBUaGUgYWN0aW9uIGlzIGRlc3RpbmVkIGZvciB0aGUgb3V0ZXIgYXBwbHlfYWN0aW9uIGFuZCBlaXRoZXIgYW4gaW5uZXIgb3JcbiAgICAgICAgICAgb3V0ZXIgYWN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0aGlzIGdlbmVyYXRpb25cbiAgICAgICAqIEEgZHluYW1pYyBhY3Rpb24gZGVzdGluZWQgaW5zaWRlIGEgbW9kZWwgcmVzZXR0ZXIgcmVxdWlyZXMgYSBzdGFiaWxpemF0aW9uIGlmXG4gICAgICAgICB0aGF0IGNvbXBvbmVudCBoYXMgYmVlbiByZXNldCB0aGlzIGdlbmVyYXRpb25cbiAgICAgICAqIEEgZHluYW1pYyBhY3Rpb24gZGVzdGluZWQgYW55d2hlcmUgYWZ0ZXIgYW4gW0luY3IuVmFyLnRdIGhhcyBiZWVuIHNldFxuICAgICB2fVxuICAqKVxuICBsZXQgcmVxdWlyZXNfc3RhYmlsaXphdGlvbiBjdXJyZW50X2dlbmVyYXRpb24gc3RhdHMgPVxuICAgIGxldCBzdWJfcmVxdWlyZXNfc3RhYmlsaXphdGlvbiBzdGF0ZSB+ZnJvbSB+aW50bzpfIDogXyBBY3Rpb24uc3ViIEFjdGlvbi50IC0+IGJvb2xcbiAgICAgID0gZnVuY3Rpb25cbiAgICAgIHwgU3ViX2Zyb20gXyAtPiBzdGF0ZVxuICAgICAgfCBTdWJfaW50byBfIC0+IHN0YXRlIHx8IGZyb20uZ2VuZXJhdGlvbiA9IGN1cnJlbnRfZ2VuZXJhdGlvblxuICAgIGluXG4gICAgbGV0IHdyYXBfcmVxdWlyZXNfc3RhYmlsaXphdGlvbiBzdGF0ZSB+aW5uZXIgfm91dGVyIDogXyBBY3Rpb24ud3JhcCBBY3Rpb24udCAtPiBib29sXG4gICAgICA9IGZ1bmN0aW9uXG4gICAgICB8IFdyYXBfb3V0ZXIgXyAtPlxuICAgICAgICBzdGF0ZVxuICAgICAgICB8fCBvdXRlci5nZW5lcmF0aW9uID0gY3VycmVudF9nZW5lcmF0aW9uXG4gICAgICAgIHx8IGlubmVyLmdlbmVyYXRpb24gPSBjdXJyZW50X2dlbmVyYXRpb25cbiAgICAgICgqIFRoZSBbV3JhcF9pbm5lcl0gY2FzZSBpbnRlbnRpb25hbGx5IGRvZXMgbm90IGNoZWNrIHRoYXQgdGhlIFtpbm5lcl1cbiAgICAgICAgICAgY29tcHV0YXRpb24ncyBnZW5lcmF0aW9uLiBTZWUgYWJvdmUuICopXG4gICAgICB8IFdyYXBfaW5uZXIgXyAtPiBzdGF0ZSB8fCBvdXRlci5nZW5lcmF0aW9uID0gY3VycmVudF9nZW5lcmF0aW9uXG4gICAgaW5cbiAgICBsZXQgbW9kZWxfcmVzZXRfcmVxdWlyZXNfc3RhYmlsaXphdGlvbiBzdGF0ZSB+aW5uZXI6XyB+b3V0ZXJcbiAgICAgIDogXyBBY3Rpb24ubW9kZWxfcmVzZXR0ZXIgQWN0aW9uLnQgLT4gYm9vbFxuICAgICAgPSBmdW5jdGlvblxuICAgICAgfCBNb2RlbF9yZXNldF9pbm5lciBfIC0+IHN0YXRlIHx8IG91dGVyLmdlbmVyYXRpb24gPSBjdXJyZW50X2dlbmVyYXRpb25cbiAgICAgIHwgTW9kZWxfcmVzZXRfb3V0ZXIgLT4gc3RhdGVcbiAgICBpblxuICAgIGxldCBkb24ndF9zdGFiaWxpemUgKCkgPVxuICAgICAgU3RhdHMuaW5jcl9kb24ndF9zdGFiaWxpemUgc3RhdHM7XG4gICAgICBmYWxzZVxuICAgIGluXG4gICAgbGV0IHRyYXZlcnNlciA9XG4gICAgICB7IHVuZXhwbG9yZWQgPVxuICAgICAgICAgIChmdW4gc3RhdGUgX2VtcHR5IGFjdGlvbiAtPlxuICAgICAgICAgICAgaWYgaXNfZHluYW1pY19hY3Rpb24gYWN0aW9uXG4gICAgICAgICAgICB0aGVuIHNob3VsZF9zdGFiaWxpemVfZHluYW1pY19hY3Rpb24gc3RhdHMgc3RhdGVcbiAgICAgICAgICAgIGVsc2UgZG9uJ3Rfc3RhYmlsaXplICgpKVxuICAgICAgOyBkeW5hbWljX2xlYWYgPSBzaG91bGRfc3RhYmlsaXplX2R5bmFtaWNfYWN0aW9uIHN0YXRzXG4gICAgICA7IHN0YXRpY19sZWFmID0gKGZ1biBfIC0+IGRvbid0X3N0YWJpbGl6ZSAoKSlcbiAgICAgIDsgc3ViID0gc3ViX3JlcXVpcmVzX3N0YWJpbGl6YXRpb25cbiAgICAgIDsgd3JhcCA9IHdyYXBfcmVxdWlyZXNfc3RhYmlsaXphdGlvblxuICAgICAgOyBtb2RlbF9yZXNldCA9IG1vZGVsX3Jlc2V0X3JlcXVpcmVzX3N0YWJpbGl6YXRpb25cbiAgICAgIDsgYXNzb2MgPSAoZnVuIHN0YXRlIH5hc3NvYzpfIH5rZXk6XyBfIC0+IHN0YXRlKVxuICAgICAgOyBhc3NvY19vbiA9IChmdW4gc3RhdGUgfmFzc29jX29uOl8gfmtleTpfIF8gLT4gc3RhdGUpXG4gICAgICA7IHN3aXRjaCA9IChmdW4gc3RhdGUgfnN3aXRjaDpfIH5icmFuY2g6XyBfIC0+IHN0YXRlKVxuICAgICAgOyBsYXp5XyA9IChmdW4gc3RhdGUgXyBfIC0+IHN0YXRlKVxuICAgICAgfVxuICAgIGluXG4gICAgdHJhdmVyc2UgfmluaXRpYWxfc3RhdGU6ZmFsc2UgdHJhdmVyc2VyXG4gIDs7XG5cbiAgbGV0IGluc2VydCBjdXJyZW50X2dlbmVyYXRpb24gYWN0aW9uIHQgPVxuICAgIGxldCBpbnNlcnRfdW5leHBsb3JlZFxuICAgICAgKHR5cGUgc3RyaXBwZWQpXG4gICAgICAoKVxuICAgICAgKGVtcHR5IDogc3RyaXBwZWQgdClcbiAgICAgIChhY3Rpb24gOiBzdHJpcHBlZCBBY3Rpb24udClcbiAgICAgID1cbiAgICAgIGVtcHR5LmlubmVyIDwtIG5vZGVfb2ZfYWN0aW9uIGN1cnJlbnRfZ2VuZXJhdGlvbiBhY3Rpb25cbiAgICBpblxuICAgIGxldCBpbnNlcnRfc3ViICgpIH5mcm9tIH5pbnRvIDogXyBBY3Rpb24uc3ViIEFjdGlvbi50IC0+IHVuaXQgPSBmdW5jdGlvblxuICAgICAgfCBTdWJfZnJvbSBfIC0+IGZyb20uZ2VuZXJhdGlvbiA8LSBjdXJyZW50X2dlbmVyYXRpb25cbiAgICAgIHwgU3ViX2ludG8gXyAtPiBpbnRvLmdlbmVyYXRpb24gPC0gY3VycmVudF9nZW5lcmF0aW9uXG4gICAgaW5cbiAgICBsZXQgaW5zZXJ0X3dyYXAgKCkgfmlubmVyIH5vdXRlciA6IF8gQWN0aW9uLndyYXAgQWN0aW9uLnQgLT4gdW5pdCA9IGZ1bmN0aW9uXG4gICAgICB8IFdyYXBfaW5uZXIgXyAtPiBpbm5lci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvblxuICAgICAgfCBXcmFwX291dGVyIF8gLT4gb3V0ZXIuZ2VuZXJhdGlvbiA8LSBjdXJyZW50X2dlbmVyYXRpb25cbiAgICBpblxuICAgIGxldCBpbnNlcnRfbW9kZWxfcmVzZXQgKCkgfmlubmVyIH5vdXRlciA6IF8gQWN0aW9uLm1vZGVsX3Jlc2V0dGVyIEFjdGlvbi50IC0+IHVuaXRcbiAgICAgID0gZnVuY3Rpb25cbiAgICAgIHwgTW9kZWxfcmVzZXRfaW5uZXIgXyAtPiBpbm5lci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvblxuICAgICAgfCBNb2RlbF9yZXNldF9vdXRlciAtPiBvdXRlci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvblxuICAgIGluXG4gICAgbGV0IGl0ZXJfZGF0YSBtIH5rZXkgfmYgPSBPcHRpb24uaXRlciAoTWFwLmZpbmQgbSBrZXkpIH5mIGluXG4gICAgbGV0IHRyYXZlcnNlciA9XG4gICAgICB7IHVuZXhwbG9yZWQgPSBpbnNlcnRfdW5leHBsb3JlZFxuICAgICAgOyBkeW5hbWljX2xlYWYgPSAoZnVuIF8gLT4gKCkpXG4gICAgICA7IHN0YXRpY19sZWFmID0gKGZ1biBfIC0+ICgpKVxuICAgICAgOyBzdWIgPSBpbnNlcnRfc3ViXG4gICAgICA7IHdyYXAgPSBpbnNlcnRfd3JhcFxuICAgICAgOyBtb2RlbF9yZXNldCA9IGluc2VydF9tb2RlbF9yZXNldFxuICAgICAgOyBsYXp5XyA9IChmdW4gKCkgaW5uZXIgXyAtPiBpbm5lci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvbilcbiAgICAgIDsgYXNzb2MgPVxuICAgICAgICAgIChmdW4gKCkgfmFzc29jIH5rZXkgX2FjdGlvbiAtPlxuICAgICAgICAgICAgaXRlcl9kYXRhIGFzc29jLmJ5X2tleSB+a2V5IH5mOihmdW4gaW5uZXIgLT5cbiAgICAgICAgICAgICAgaW5uZXIuZ2VuZXJhdGlvbiA8LSBjdXJyZW50X2dlbmVyYXRpb24pKVxuICAgICAgOyBhc3NvY19vbiA9XG4gICAgICAgICAgKGZ1biAoKSB+YXNzb2Nfb24gfmtleSBfYWN0aW9uIC0+XG4gICAgICAgICAgICBpdGVyX2RhdGEgYXNzb2Nfb24uYnlfaW9fa2V5IH5rZXkgfmY6KGZ1biBpbm5lciAtPlxuICAgICAgICAgICAgICBpbm5lci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvbikpXG4gICAgICA7IHN3aXRjaCA9XG4gICAgICAgICAgKGZ1biAoKSB+c3dpdGNoIH5icmFuY2ggX2FjdGlvbiAtPlxuICAgICAgICAgICAgaXRlcl9kYXRhIHN3aXRjaC5ieV9icmFuY2ggfmtleTpicmFuY2ggfmY6KGZ1biAoVCB7IGlubmVyOyB0eXBlX2lkID0gXyB9KSAtPlxuICAgICAgICAgICAgICBpbm5lci5nZW5lcmF0aW9uIDwtIGN1cnJlbnRfZ2VuZXJhdGlvbikpXG4gICAgICB9XG4gICAgaW5cbiAgICB0cmF2ZXJzZSB+aW5pdGlhbF9zdGF0ZTooKSB0cmF2ZXJzZXIgYWN0aW9uIHRcbiAgOztcblxuICB0eXBlIHBhY2tlZF9maWx0ZXIgPSBUIDogJ2EgdCAtPiBwYWNrZWRfZmlsdGVyIFtAQHVuYm94ZWRdXG5cbiAgbGV0IHBydW5lX3N0YWxlX2JyYW5jaGVzIGN1cnJlbnRfZ2VuZXJhdGlvbiB0IH5vbl9wcnVuZSA9XG4gICAgbGV0IHJlYyBsb29wIDogdHlwZSBhLiBhIHQgLT4gdW5pdCA9XG4gICAgICBmdW4gdCAtPlxuICAgICAgbGV0IHNob3VsZF9wcnVuZSA6IHR5cGUgYS4gYSB0IC0+IGJvb2wgPVxuICAgICAgICBmdW4geyBnZW5lcmF0aW9uOyBfIH0gLT5cbiAgICAgICAgbGV0IHNob3VsZF9wcnVuZSA9IGdlbmVyYXRpb24gPD0gY3VycmVudF9nZW5lcmF0aW9uIC0gbnVtX2dlbmVyYXRpb25zX3RvX3N0YWxlIGluXG4gICAgICAgIGlmIHNob3VsZF9wcnVuZSB0aGVuIG9uX3BydW5lICgpO1xuICAgICAgICBzaG91bGRfcHJ1bmVcbiAgICAgIGluXG4gICAgICBsZXQgZmlsdGVyX2FuZF9sb29wX3ZpYV9mb2xkIG0gfmYgPVxuICAgICAgICBNYXAuZm9sZCBtIH5pbml0Om0gfmY6KGZ1biB+a2V5IH5kYXRhIG1hcCAtPlxuICAgICAgICAgIGxldCAoVCBpbm5lcikgPSBmIGRhdGEgaW5cbiAgICAgICAgICBtYXRjaCBzaG91bGRfcHJ1bmUgaW5uZXIgd2l0aFxuICAgICAgICAgIHwgZmFsc2UgLT5cbiAgICAgICAgICAgIGxvb3AgaW5uZXI7XG4gICAgICAgICAgICBtYXBcbiAgICAgICAgICB8IHRydWUgLT4gTWFwLnJlbW92ZSBtYXAga2V5KVxuICAgICAgaW5cbiAgICAgIG1hdGNoIHQuaW5uZXIgd2l0aFxuICAgICAgfCBVbmV4cGxvcmVkIC0+ICgpXG4gICAgICB8IFRlcm1pbmFsIC0+ICgpXG4gICAgICB8IFN1YiB7IGZyb207IGludG8gfSAtPlxuICAgICAgICBsb29wIGZyb207XG4gICAgICAgIGxvb3AgaW50b1xuICAgICAgfCBXcmFwIHsgaW5uZXI7IG91dGVyID0gXyB9IC0+IGxvb3AgaW5uZXJcbiAgICAgIHwgTW9kZWxfcmVzZXQgeyBpbm5lcjsgb3V0ZXIgPSBfIH0gLT4gbG9vcCBpbm5lclxuICAgICAgfCBMYXp5IChUIHsgdHlwZV9pZCA9IF87IGlubmVyIH0pIC0+IGxvb3AgaW5uZXJcbiAgICAgIHwgQXNzb2Nfb24gYXNzb2Nfb24gLT5cbiAgICAgICAgYXNzb2Nfb24uYnlfaW9fa2V5XG4gICAgICAgICAgPC0gZmlsdGVyX2FuZF9sb29wX3ZpYV9mb2xkIGFzc29jX29uLmJ5X2lvX2tleSB+ZjooZnVuIGlubmVyIC0+IFQgaW5uZXIpXG4gICAgICB8IEFzc29jIGFzc29jIC0+XG4gICAgICAgIGFzc29jLmJ5X2tleSA8LSBmaWx0ZXJfYW5kX2xvb3BfdmlhX2ZvbGQgYXNzb2MuYnlfa2V5IH5mOihmdW4gaW5uZXIgLT4gVCBpbm5lcilcbiAgICAgIHwgU3dpdGNoIHN3aXRjaCAtPlxuICAgICAgICBzd2l0Y2guYnlfYnJhbmNoXG4gICAgICAgICAgPC0gZmlsdGVyX2FuZF9sb29wX3ZpYV9mb2xkXG4gICAgICAgICAgICAgICBzd2l0Y2guYnlfYnJhbmNoXG4gICAgICAgICAgICAgICB+ZjooZnVuIChUIHsgaW5uZXI7IHR5cGVfaWQgPSBfIH0pIC0+IFQgaW5uZXIpXG4gICAgaW5cbiAgICBsb29wIHRcbiAgOztcbmVuZFxuXG5tb2R1bGUgSW5jcmVtZW50YWxfc3RhdHMgPSBzdHJ1Y3RcbiAgKCogW251bV92YXJfc2V0c10gaXMgYSBmaWVsZCBpbiBbSW5jcmVtZW50YWwuU3RhdGUudF0gdGhhdCBpbmZvcm1zIHVzIGEgc2lkZS1lZmZlY3QgdG9va1xuICAgICBwbGFjZSByZXF1aXJpbmcgYSBzdGFiaWxpemF0aW9uLiBUZWNobmljYWxseSwgd2UgY291bGQgYWxzbyByZXF1aXJlIGEgc3RhYmlsaXphdGlvblxuICAgICBmcm9tIHRoZSB1c2Ugb2YgW0luY3IuRXhwZXJ0Lk5vZGUuY3JlYXRlXSBhbmQgW0luY3IubWFya19zdGFsZV0sIGhvd2V2ZXIsIHByb3BlclxuICAgICB1c2FnZSBzaG91bGRuJ3QgdHJpZ2dlciBhIHN0YWJpbGl6YXRpb24gb24gaXRzIG93bi4gKilcbiAgdHlwZSB0ID0geyBsYXN0X251bV92YXJfc2V0cyA6IGludCB9IFtAQGRlcml2aW5nIGVxdWFsXVxuXG4gIGxldCBjdXJyZW50ICgpID1cbiAgICBsZXQgc3RhdGUgPSBJbmNyLlN0YXRlLnQgaW5cbiAgICB7IGxhc3RfbnVtX3Zhcl9zZXRzID0gSW5jci5TdGF0ZS5udW1fdmFyX3NldHMgc3RhdGUgfVxuICA7O1xuZW5kXG5cbnR5cGUgJ2EgdCA9XG4gIHsgdHJpZSA6ICdhIEFjdGlvbl90cmllLnRcbiAgOyBzdGF0cyA6IFN0YXRzLnRcbiAgOyBtdXRhYmxlIGN1cnJlbnRfZ2VuZXJhdGlvbiA6IEdlbmVyYXRpb24udFxuICA7IG11dGFibGUgbGFzdF9pbmNyZW1lbnRhbF9zdGF0cyA6IEluY3JlbWVudGFsX3N0YXRzLnRcbiAgOyBtdXRhYmxlIGxhc3RfZ2VuZXJhdGlvbl9wcnVuZWQgOiBHZW5lcmF0aW9uLnRcbiAgOyBtdXRhYmxlIGFtX2RlYnVnZ2luZ190ZXN0IDogYm9vbFxuICB9XG5cbmxldCBlbXB0eSAoKSA9XG4gIHsgdHJpZSA9IEFjdGlvbl90cmllLmVtcHR5ICgpXG4gIDsgc3RhdHMgPSBTdGF0cy5jcmVhdGUgKClcbiAgOyBjdXJyZW50X2dlbmVyYXRpb24gPSBHZW5lcmF0aW9uLmluaXRpYWxcbiAgOyBsYXN0X2luY3JlbWVudGFsX3N0YXRzID0gSW5jcmVtZW50YWxfc3RhdHMuY3VycmVudCAoKVxuICA7IGxhc3RfZ2VuZXJhdGlvbl9wcnVuZWQgPSBHZW5lcmF0aW9uLmluaXRpYWxcbiAgOyBhbV9kZWJ1Z2dpbmdfdGVzdCA9IGZhbHNlXG4gIH1cbjs7XG5cbmxldCBtYXJrX3N0YWJpbGl6YXRpb24gdCA9XG4gIG1hcmtfaW5jcmVtZW50YWxfY2xlYW4gKCk7XG4gIHQuY3VycmVudF9nZW5lcmF0aW9uIDwtIEdlbmVyYXRpb24ubmV4dCB0LmN1cnJlbnRfZ2VuZXJhdGlvbjtcbiAgdC5sYXN0X2luY3JlbWVudGFsX3N0YXRzIDwtIEluY3JlbWVudGFsX3N0YXRzLmN1cnJlbnQgKClcbjs7XG5cbigqIFtwcnVuZV90cmllXSBlbnN1cmVzIHRoYXQgd2UgZG9uJ3QgbGVhayBpbmFjdGl2ZSBwYXJ0cyBvZiB0aGUgQm9uc2FpIGdyYXBoLiBXZSBkaXNjYXJkXG4gICBhbnkgc3dpdGNoIGFuZCBhc3NvYyBicmFuY2hlcyB0aGF0IGhhdmVuJ3QgcmVjZWlldmVkIGFuIGFjdGlvbiBpbiBhIGxvbmcgdGltZSwgc2luY2Ugd2VcbiAgIGFzc3VtZSB0aGVtIHRvIGJlIGluYWN0aXZlLiAqKVxubGV0IHBydW5lX3RyaWUgdCA9XG4gIGlmIHQuY3VycmVudF9nZW5lcmF0aW9uXG4gICAgID49IHQubGFzdF9nZW5lcmF0aW9uX3BydW5lZCArIEFjdGlvbl90cmllLm51bV9nZW5lcmF0aW9uc190b19zdGFsZVxuICB0aGVuIChcbiAgICBTdGF0cy5pbmNyX3BydW5lc19ydW4gdC5zdGF0cztcbiAgICBBY3Rpb25fdHJpZS5wcnVuZV9zdGFsZV9icmFuY2hlcyB0LmN1cnJlbnRfZ2VuZXJhdGlvbiB0LnRyaWUgfm9uX3BydW5lOihmdW4gKCkgLT5cbiAgICAgIFN0YXRzLmluY3JfYnJhbmNoZXNfcHJ1bmVkIHQuc3RhdHMpO1xuICAgIHQubGFzdF9nZW5lcmF0aW9uX3BydW5lZCA8LSB0LmN1cnJlbnRfZ2VuZXJhdGlvbilcbjs7XG5cbmxldCBjaGVja19pbmNyZW1lbnRhbF9zdGF0c19hbmRfbWFya19kaXJ0eSB0ID1cbiAgaWYgbm90IChJbmNyZW1lbnRhbF9zdGF0cy5lcXVhbCAoSW5jcmVtZW50YWxfc3RhdHMuY3VycmVudCAoKSkgdC5sYXN0X2luY3JlbWVudGFsX3N0YXRzKVxuICB0aGVuIG1hcmtfaW5jcmVtZW50YWxfZGlydHkgKClcbjs7XG5cbmxldCByZXF1aXJlc19zdGFiaWxpemF0aW9uIHQgYWN0aW9uID1cbiAgY2hlY2tfaW5jcmVtZW50YWxfc3RhdHNfYW5kX21hcmtfZGlydHkgdDtcbiAgbGV0IHJlcXVpcmVzX3N0YWJpbGl6YXRpb24gPVxuICAgIEFjdGlvbl90cmllLnJlcXVpcmVzX3N0YWJpbGl6YXRpb24gdC5jdXJyZW50X2dlbmVyYXRpb24gdC5zdGF0cyBhY3Rpb24gdC50cmllXG4gIGluXG4gIGlmIHQuYW1fZGVidWdnaW5nX3Rlc3RcbiAgdGhlblxuICAgIGlmIHJlcXVpcmVzX3N0YWJpbGl6YXRpb25cbiAgICB0aGVuIHByaW50X2VuZGxpbmUgXCJzdGFiaWxpemVkXCJcbiAgICBlbHNlIHByaW50X2VuZGxpbmUgXCJza2lwcGVkIHN0YWJpbGl6YXRpb25cIjtcbiAgcmVxdWlyZXNfc3RhYmlsaXphdGlvblxuOztcblxubGV0IGluc2VydCB0IGFjdGlvbiA9XG4gIEFjdGlvbl90cmllLmluc2VydCB0LmN1cnJlbnRfZ2VuZXJhdGlvbiBhY3Rpb24gdC50cmllO1xuICBwcnVuZV90cmllIHRcbjs7XG5cbm1vZHVsZSBGb3JfdGVzdGluZyA9IHN0cnVjdFxuICBtb2R1bGUgU3RhdHMgPSBTdGF0c1xuXG4gIGxldCBzdGFydF9kZWJ1Z2dpbmcgdCA9IHQuYW1fZGVidWdnaW5nX3Rlc3QgPC0gdHJ1ZVxuICBsZXQgbnVtX2dlbmVyYXRpb25zX2Zvcl9wcnVuaW5nID0gQWN0aW9uX3RyaWUubnVtX2dlbmVyYXRpb25zX3RvX3N0YWxlXG4gIGxldCBkaXNwbGF5X3N0YXRzIHQgPSBTdGF0cy5kaXNwbGF5IHQuc3RhdHNcbmVuZFxuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbm1vZHVsZSBOYW1lX3NvdXJjZSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgU3ViIG9mIFNvdXJjZV9jb2RlX3Bvc2l0aW9uLnQgb3B0aW9uXG4gICAgfCBBc3NvY19saWtlX2tleVxuICAgIHwgQXNzb2NfbGlrZV9kYXRhXG4gICAgfCBXcmFwX21vZGVsXG4gICAgfCBXcmFwX2luamVjdFxuICAgIHwgQXBwX2lucHV0XG4gICAgfCBNb2RlbF9yZXNldHRlclxuXG4gIGxldCB0b19zdHJpbmcgPSBmdW5jdGlvblxuICAgIHwgU3ViIGhlcmUgLT5cbiAgICAgIChtYXRjaCBoZXJlIHdpdGhcbiAgICAgICB8IFNvbWUgaGVyZSAtPlxuICAgICAgICAgbGV0IGhlcmUgPVxuICAgICAgICAgICBpZiBDb3JlLmFtX3J1bm5pbmdfdGVzdFxuICAgICAgICAgICB0aGVuXG4gICAgICAgICAgICAgeyBTb3VyY2VfY29kZV9wb3NpdGlvbi5wb3NfZm5hbWUgPSBcIlRFU1RfRklMRU5BTUVcIlxuICAgICAgICAgICAgIDsgcG9zX2xudW0gPSAwXG4gICAgICAgICAgICAgOyBwb3NfYm9sID0gMFxuICAgICAgICAgICAgIDsgcG9zX2NudW0gPSAwXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICBlbHNlIGhlcmVcbiAgICAgICAgIGluXG4gICAgICAgICBbJXN0cmluZ1xuICAgICAgICAgICBcIkEgVmFsdWUudCBpbnRyb2R1Y2VkIGJ5IHRoZSBbbGV0JXN1Yl0gZXhwcmVzc2lvbiBhdCBcXFxuICAgICAgICAgICAgJXtoZXJlI1NvdXJjZV9jb2RlX3Bvc2l0aW9ufVwiXVxuICAgICAgIHwgTm9uZSAtPiBcIkEgVmFsdWUudCBpbnRyb2R1Y2VkIGJ5IHNvbWUgW2xldCVzdWJdIGV4cHJlc3Npb25cIilcbiAgICB8IEFzc29jX2xpa2Vfa2V5IC0+XG4gICAgICBcIlRoZSBWYWx1ZS50IGZvciB0aGUga2V5IGludHJvZHVjZWQgd2l0aGluIGEgW0JvbnNhaS5hc3NvY10gb3IgW0JvbnNhaS5hc3NvY19vbl0gXFxcbiAgICAgICBjb21wdXRhdGlvblwiXG4gICAgfCBBc3NvY19saWtlX2RhdGEgLT5cbiAgICAgIFwiVGhlIFZhbHVlLnQgZm9yIHRoZSBkYXRhIGludHJvZHVjZWQgd2l0aGluIGEgW0JvbnNhaS5hc3NvY10gb3IgW0JvbnNhaS5hc3NvY19vbl0gXFxcbiAgICAgICBjb21wdXRhdGlvblwiXG4gICAgfCBXcmFwX21vZGVsIC0+IFwiVGhlIG5hbWUgZm9yIHRoZSBtb2RlbCBpbnRyb2R1Y2VkIHdpdGhpbiBhIFtCb25zYWkud3JhcF0gY29tcHV0YXRpb25cIlxuICAgIHwgV3JhcF9pbmplY3QgLT5cbiAgICAgIFwiVGhlIFZhbHVlLnQgZm9yIHRoZSBpbmplY3Rpb24gZnVuY3Rpb24gaW50cm9kdWNlZCB3aXRoaW4gYSBbQm9uc2FpLndyYXBdIFxcXG4gICAgICAgY29tcHV0YXRpb25cIlxuICAgIHwgQXBwX2lucHV0IC0+IFwiVGhlIGFwcCBpbnB1dCBWYWx1ZS50XCJcbiAgICB8IE1vZGVsX3Jlc2V0dGVyIC0+IFwiQSBtb2RlbCByZXNldHRlclwiXG4gIDs7XG5lbmRcblxudHlwZSBfIHdpdGhvdXRfcG9zaXRpb24gPVxuICB8IENvbnN0YW50IDogJ2EgLT4gJ2Egd2l0aG91dF9wb3NpdGlvblxuICB8IEluY3IgOiAnYSBJbmNyLnQgLT4gJ2Egd2l0aG91dF9wb3NpdGlvblxuICB8IE5hbWVkIDogTmFtZV9zb3VyY2UudCAtPiAnYSB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgQm90aCA6ICdhIHQgKiAnYiB0IC0+ICgnYSAqICdiKSB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgQ3V0b2ZmIDpcbiAgICAgIHsgdCA6ICdhIHRcbiAgICAgIDsgZXF1YWwgOiAnYSAtPiAnYSAtPiBib29sXG4gICAgICA7IGFkZGVkX2J5X2xldF9zeW50YXggOiBib29sXG4gICAgICB9XG4gICAgICAtPiAnYSB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgTWFwIDpcbiAgICAgIHsgdCA6ICdhIHRcbiAgICAgIDsgZiA6ICdhIC0+ICdiXG4gICAgICB9XG4gICAgICAtPiAnYiB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgTWFwMiA6XG4gICAgICB7IHQxIDogJ3QxIHRcbiAgICAgIDsgdDIgOiAndDIgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAnclxuICAgICAgfVxuICAgICAgLT4gJ3Igd2l0aG91dF9wb3NpdGlvblxuICB8IE1hcDMgOlxuICAgICAgeyB0MSA6ICd0MSB0XG4gICAgICA7IHQyIDogJ3QyIHRcbiAgICAgIDsgdDMgOiAndDMgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAndDMgLT4gJ3JcbiAgICAgIH1cbiAgICAgIC0+ICdyIHdpdGhvdXRfcG9zaXRpb25cbiAgfCBNYXA0IDpcbiAgICAgIHsgdDEgOiAndDEgdFxuICAgICAgOyB0MiA6ICd0MiB0XG4gICAgICA7IHQzIDogJ3QzIHRcbiAgICAgIDsgdDQgOiAndDQgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAndDMgLT4gJ3Q0IC0+ICdyXG4gICAgICB9XG4gICAgICAtPiAnciB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgTWFwNSA6XG4gICAgICB7IHQxIDogJ3QxIHRcbiAgICAgIDsgdDIgOiAndDIgdFxuICAgICAgOyB0MyA6ICd0MyB0XG4gICAgICA7IHQ0IDogJ3Q0IHRcbiAgICAgIDsgdDUgOiAndDUgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAndDMgLT4gJ3Q0IC0+ICd0NSAtPiAnclxuICAgICAgfVxuICAgICAgLT4gJ3Igd2l0aG91dF9wb3NpdGlvblxuICB8IE1hcDYgOlxuICAgICAgeyB0MSA6ICd0MSB0XG4gICAgICA7IHQyIDogJ3QyIHRcbiAgICAgIDsgdDMgOiAndDMgdFxuICAgICAgOyB0NCA6ICd0NCB0XG4gICAgICA7IHQ1IDogJ3Q1IHRcbiAgICAgIDsgdDYgOiAndDYgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAndDMgLT4gJ3Q0IC0+ICd0NSAtPiAndDYgLT4gJ3JcbiAgICAgIH1cbiAgICAgIC0+ICdyIHdpdGhvdXRfcG9zaXRpb25cbiAgfCBNYXA3IDpcbiAgICAgIHsgdDEgOiAndDEgdFxuICAgICAgOyB0MiA6ICd0MiB0XG4gICAgICA7IHQzIDogJ3QzIHRcbiAgICAgIDsgdDQgOiAndDQgdFxuICAgICAgOyB0NSA6ICd0NSB0XG4gICAgICA7IHQ2IDogJ3Q2IHRcbiAgICAgIDsgdDcgOiAndDcgdFxuICAgICAgOyBmIDogJ3QxIC0+ICd0MiAtPiAndDMgLT4gJ3Q0IC0+ICd0NSAtPiAndDYgLT4gJ3Q3IC0+ICdyXG4gICAgICB9XG4gICAgICAtPiAnciB3aXRob3V0X3Bvc2l0aW9uXG4gIHwgRXhjZXB0aW9uIDogZXhuIC0+ICdyIHdpdGhvdXRfcG9zaXRpb25cblxuYW5kICdhIHQgPVxuICB7IHZhbHVlIDogJ2Egd2l0aG91dF9wb3NpdGlvblxuICA7IGhlcmUgOiBTb3VyY2VfY29kZV9wb3NpdGlvbi50IG9wdGlvblxuICA7IGlkIDogJ2EgVHlwZV9lcXVhbC5JZC50XG4gIH1cblxubGV0IHZhbHVlX2lkIG5hbWUgPSBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZSBzZXhwX29mX29wYXF1ZVxubGV0IG1hcDIgdDEgdDIgfmYgPSB7IHZhbHVlID0gTWFwMiB7IHQxOyB0MjsgZiB9OyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcIm1hcDJcIiB9XG5sZXQgbWFwIHQgfmYgPSB7IHZhbHVlID0gTWFwIHsgdDsgZiB9OyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcIm1hcFwiIH1cbmxldCBuYW1lZCBuYW1lX3NvdXJjZSBpZCA9IHsgdmFsdWUgPSBOYW1lZCBuYW1lX3NvdXJjZTsgaGVyZSA9IE5vbmU7IGlkIH1cblxubGV0IGN1dG9mZiB+YWRkZWRfYnlfbGV0X3N5bnRheCB0IH5lcXVhbCA9XG4gIGxldCB2YWx1ZSA9IEN1dG9mZiB7IHQ7IGVxdWFsOyBhZGRlZF9ieV9sZXRfc3ludGF4IH0gaW5cbiAgeyB2YWx1ZTsgaGVyZSA9IE5vbmU7IGlkID0gdmFsdWVfaWQgXCJjdXRvZmZcIiB9XG47O1xuXG5sZXQgcmVjIGV2YWwgOiB0eXBlIGEuIEVudmlyb25tZW50LnQgLT4gYSB0IC0+IGEgSW5jci50ID1cbiAgZnVuIGVudiB7IHZhbHVlOyBpZDsgaGVyZSA9IF8gfSAtPlxuICBtYXRjaCB2YWx1ZSB3aXRoXG4gIHwgSW5jciB4IC0+IHhcbiAgfCBDdXRvZmYgeyB0OyBlcXVhbDsgYWRkZWRfYnlfbGV0X3N5bnRheCA9IF8gfSAtPlxuICAgIGxldCBpbmNyZW1lbnRhbF9ub2RlID1cbiAgICAgIGxldCBpbmNyZW1lbnRhbF9ub2RlID0gZXZhbCBlbnYgdCBpblxuICAgICAgKCogSW4gZ2VuZXJhbCwgd2UgaGF2ZSB0byBjcmVhdGUgYSBmcmVzaCBpbmNyZW1lbnRhbCBub2RlIGhlcmUgKGUuZy4gYnkgdXNpbmdcbiAgICAgICAgIFtVaV9pbmNyLm1hcCB+ZjpGbi5pZF0gYW5kIHNldCBjdXRvZmYgb24gdGhlIG5ldyBub2RlLiBPdGhlcndpc2UgaXQgaXMgcG9zc2libGVcbiAgICAgICAgIHRoYXQgd2Ugd2lsbCBzZXQgYSBjdXRvZmYgb24gYW4gaW5jcmVtZW50YWwgbm9kZSB3aGljaCBpcyB1c2VkIGluIG1vcmUgdGhhblxuICAgICAgICAgb25lIHBsYWNlIGFuZCB0aGUgY3V0b2ZmIG1heSBub3QgYmUgY29ycmVjdCB0aGVuLlxuXG4gICAgICAgICBFLmcuIHRoZSByZXN1bHQgb2YgZXZhbGluZyBhIFtOYW1lZF0gdmFsdWUgZ2V0cyBzdG9yZWQgaW4gYSBtYXAsIHNvIGNhbGxpbmdcbiAgICAgICAgIFtzZXRfY3V0b2ZmXSBkaXJlY3RseSBtdXRhdGVzL2FmZmVjdHMgYWxsIHVzYWdlcyBvZiBpdC4gU2ltaWxhcmx5IGZvciBbSW5jcl0uXG5cbiAgICAgICAgIE5vZGVzIGNyZWF0ZWQgYnkgZXZhbHVhdGluZyBlLmcuIFtNYXBdIHdlcmUganVzdCBjcmVhdGVkIGJ5IHRoZSBbZXZhbF0gZnVuY3Rpb25cbiAgICAgICAgIGNhbGwgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2V0IHRoZSBjdXRvZmYgZGlyZWN0bHkgb24gdGhlbSwgc2F2aW5nIHNvbWUgbWVtb3J5XG4gICAgICAgICBhbmQgcGVyZm9ybWFuY2UgYnkgbm90IGNyZWF0aW5nIGFuIGV4dHJhIG5vZGUuICopXG4gICAgICBtYXRjaCB0LnZhbHVlIHdpdGhcbiAgICAgIHwgTmFtZWQgXyB8IEluY3IgXyB8IEN1dG9mZiBfIC0+IFVpX2luY3IubWFwIH5mOkZuLmlkIGluY3JlbWVudGFsX25vZGVcbiAgICAgIHwgQ29uc3RhbnQgX1xuICAgICAgfCBFeGNlcHRpb24gX1xuICAgICAgfCBCb3RoIF9cbiAgICAgIHwgTWFwIF9cbiAgICAgIHwgTWFwMiBfXG4gICAgICB8IE1hcDMgX1xuICAgICAgfCBNYXA0IF9cbiAgICAgIHwgTWFwNSBfXG4gICAgICB8IE1hcDYgX1xuICAgICAgfCBNYXA3IF8gLT4gaW5jcmVtZW50YWxfbm9kZVxuICAgIGluXG4gICAgSW5jcmVtZW50YWwuc2V0X2N1dG9mZiBpbmNyZW1lbnRhbF9ub2RlIChJbmNyZW1lbnRhbC5DdXRvZmYub2ZfZXF1YWwgZXF1YWwpO1xuICAgIGluY3JlbWVudGFsX25vZGVcbiAgfCBDb25zdGFudCB4IC0+IEluY3IucmV0dXJuIHhcbiAgfCBFeGNlcHRpb24gZXggLT4gSW5jci5tYXAgKEluY3IucmV0dXJuICgpKSB+ZjooZnVuICgpIC0+IHJhaXNlIGV4KVxuICB8IE5hbWVkIG5hbWVfc291cmNlIC0+XG4gICAgKG1hdGNoIEVudmlyb25tZW50LmZpbmQgZW52IGlkIHdpdGhcbiAgICAgfCBTb21lIGluY3JlbWVudGFsIC0+IGluY3JlbWVudGFsXG4gICAgIHwgTm9uZSAtPlxuICAgICAgIHJhaXNlX3NcbiAgICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgICBbJXN0cmluZ1xuICAgICAgICAgICAgIFwiJXtuYW1lX3NvdXJjZSNOYW1lX3NvdXJjZX0gd2FzIHVzZWQgb3V0c2lkZSBvZiB0aGUgc2NvcGUgdGhhdCBpdCB3YXMgXFxcbiAgICAgICAgICAgICAgZGVjbGFyZWQgaW4uIE1ha2Ugc3VyZSB0aGF0IHlvdSBhcmVuJ3Qgc3RvcmluZyBpdCBpbnNpZGUgYSByZWYuXCJdXSlcbiAgfCBCb3RoICh0MSwgdDIpIC0+IEluY3IuYm90aCAoZXZhbCBlbnYgdDEpIChldmFsIGVudiB0MilcbiAgfCBNYXAgeyB0OyBmIH0gLT4gSW5jci5tYXAgKGV2YWwgZW52IHQpIH5mXG4gIHwgTWFwMiB7IHQxOyB0MjsgZiB9IC0+IEluY3IubWFwMiAoZXZhbCBlbnYgdDEpIChldmFsIGVudiB0MikgfmZcbiAgfCBNYXAzIHsgdDE7IHQyOyB0MzsgZiB9IC0+IEluY3IubWFwMyAoZXZhbCBlbnYgdDEpIChldmFsIGVudiB0MikgKGV2YWwgZW52IHQzKSB+ZlxuICB8IE1hcDQgeyB0MTsgdDI7IHQzOyB0NDsgZiB9IC0+XG4gICAgSW5jci5tYXA0IChldmFsIGVudiB0MSkgKGV2YWwgZW52IHQyKSAoZXZhbCBlbnYgdDMpIChldmFsIGVudiB0NCkgfmZcbiAgfCBNYXA1IHsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyBmIH0gLT5cbiAgICBJbmNyLm1hcDUgKGV2YWwgZW52IHQxKSAoZXZhbCBlbnYgdDIpIChldmFsIGVudiB0MykgKGV2YWwgZW52IHQ0KSAoZXZhbCBlbnYgdDUpIH5mXG4gIHwgTWFwNiB7IHQxOyB0MjsgdDM7IHQ0OyB0NTsgZjsgdDYgfSAtPlxuICAgIEluY3IubWFwNlxuICAgICAgfmZcbiAgICAgIChldmFsIGVudiB0MSlcbiAgICAgIChldmFsIGVudiB0MilcbiAgICAgIChldmFsIGVudiB0MylcbiAgICAgIChldmFsIGVudiB0NClcbiAgICAgIChldmFsIGVudiB0NSlcbiAgICAgIChldmFsIGVudiB0NilcbiAgfCBNYXA3IHsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyBmOyB0NjsgdDcgfSAtPlxuICAgIEluY3IubWFwN1xuICAgICAgfmZcbiAgICAgIChldmFsIGVudiB0MSlcbiAgICAgIChldmFsIGVudiB0MilcbiAgICAgIChldmFsIGVudiB0MylcbiAgICAgIChldmFsIGVudiB0NClcbiAgICAgIChldmFsIGVudiB0NSlcbiAgICAgIChldmFsIGVudiB0NilcbiAgICAgIChldmFsIGVudiB0Nylcbjs7XG5cbmxldCBldmFsIGVudiB0ID1cbiAgbGV0IGluY3IgPSBldmFsIGVudiB0IGluXG4gIGFubm90YXRlIFZhbHVlIGluY3I7XG4gIGluY3Jcbjs7XG5cbmxldCByZXR1cm4gYSA9IHsgdmFsdWUgPSBDb25zdGFudCBhOyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcInJldHVyblwiIH1cbmxldCByZXR1cm5fZXhuIGV4biA9IHsgdmFsdWUgPSBFeGNlcHRpb24gZXhuOyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcInJldHVybiBleG5cIiB9XG5cbmxldCB0cmFuc3Bvc2Vfb3B0IG9wdCA9XG4gIE9wdGlvbi52YWx1ZV9tYXAgb3B0IH5kZWZhdWx0OihyZXR1cm4gTm9uZSkgfmY6KG1hcCB+ZjpPcHRpb24uc29tZSlcbjs7XG5cbmluY2x1ZGUgQXBwbGljYXRpdmUuTWFrZV91c2luZ19tYXAyIChzdHJ1Y3RcbiAgdHlwZSBub25yZWMgJ2EgdCA9ICdhIHRcblxuICBsZXQgcmV0dXJuID0gcmV0dXJuXG4gIGxldCBtYXAyID0gbWFwMlxuICBsZXQgbWFwID0gYEN1c3RvbSBtYXBcbmVuZClcblxubGV0IGJvdGggYSBiID0geyB2YWx1ZSA9IEJvdGggKGEsIGIpOyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcImJvdGhcIiB9XG5cbmxldCBtYXAzIHQxIHQyIHQzIH5mID1cbiAgeyB2YWx1ZSA9IE1hcDMgeyB0MTsgdDI7IHQzOyBmIH07IGhlcmUgPSBOb25lOyBpZCA9IHZhbHVlX2lkIFwibWFwM1wiIH1cbjs7XG5cbmxldCBtYXA0IHQxIHQyIHQzIHQ0IH5mID1cbiAgeyB2YWx1ZSA9IE1hcDQgeyB0MTsgdDI7IHQzOyB0NDsgZiB9OyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcIm1hcDRcIiB9XG47O1xuXG5sZXQgbWFwNSB0MSB0MiB0MyB0NCB0NSB+ZiA9XG4gIHsgdmFsdWUgPSBNYXA1IHsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyBmIH07IGhlcmUgPSBOb25lOyBpZCA9IHZhbHVlX2lkIFwibWFwNVwiIH1cbjs7XG5cbmxldCBtYXA2IHQxIHQyIHQzIHQ0IHQ1IHQ2IH5mID1cbiAgeyB2YWx1ZSA9IE1hcDYgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyBmIH07IGhlcmUgPSBOb25lOyBpZCA9IHZhbHVlX2lkIFwibWFwNlwiIH1cbjs7XG5cbmxldCBtYXA3IHQxIHQyIHQzIHQ0IHQ1IHQ2IHQ3IH5mID1cbiAgeyB2YWx1ZSA9IE1hcDcgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyB0NzsgZiB9OyBoZXJlID0gTm9uZTsgaWQgPSB2YWx1ZV9pZCBcIm1hcDdcIiB9XG47O1xuXG5sZXQgcmVjIGFsbCA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gcmV0dXJuIFtdXG4gIHwgWyB0MSBdIC0+IG1hcCB0MSB+ZjooZnVuIGExIC0+IFsgYTEgXSlcbiAgfCBbIHQxOyB0MiBdIC0+IG1hcDIgdDEgdDIgfmY6KGZ1biBhMSBhMiAtPiBbIGExOyBhMiBdKVxuICB8IFsgdDE7IHQyOyB0MyBdIC0+IG1hcDMgdDEgdDIgdDMgfmY6KGZ1biBhMSBhMiBhMyAtPiBbIGExOyBhMjsgYTMgXSlcbiAgfCBbIHQxOyB0MjsgdDM7IHQ0IF0gLT4gbWFwNCB0MSB0MiB0MyB0NCB+ZjooZnVuIGExIGEyIGEzIGE0IC0+IFsgYTE7IGEyOyBhMzsgYTQgXSlcbiAgfCBbIHQxOyB0MjsgdDM7IHQ0OyB0NSBdIC0+XG4gICAgbWFwNSB0MSB0MiB0MyB0NCB0NSB+ZjooZnVuIGExIGEyIGEzIGE0IGE1IC0+IFsgYTE7IGEyOyBhMzsgYTQ7IGE1IF0pXG4gIHwgWyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2IF0gLT5cbiAgICBtYXA2IHQxIHQyIHQzIHQ0IHQ1IHQ2IH5mOihmdW4gYTEgYTIgYTMgYTQgYTUgYTYgLT4gWyBhMTsgYTI7IGEzOyBhNDsgYTU7IGE2IF0pXG4gIHwgWyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyB0NyBdIC0+XG4gICAgbWFwNyB0MSB0MiB0MyB0NCB0NSB0NiB0NyB+ZjooZnVuIGExIGEyIGEzIGE0IGE1IGE2IGE3IC0+XG4gICAgICBbIGExOyBhMjsgYTM7IGE0OyBhNTsgYTY7IGE3IF0pXG4gIHwgdDEgOjogdDIgOjogdDMgOjogdDQgOjogdDUgOjogdDYgOjogdDcgOjogcmVzdCAtPlxuICAgIGxldCBsZWZ0ID1cbiAgICAgIG1hcDcgdDEgdDIgdDMgdDQgdDUgdDYgdDcgfmY6KGZ1biBhMSBhMiBhMyBhNCBhNSBhNiBhNyAtPlxuICAgICAgICBbIGExOyBhMjsgYTM7IGE0OyBhNTsgYTY7IGE3IF0pXG4gICAgaW5cbiAgICBsZXQgcmlnaHQgPSBhbGwgcmVzdCBpblxuICAgIG1hcDIgbGVmdCByaWdodCB+ZjooZnVuIGxlZnQgcmlnaHQgLT4gbGVmdCBAIHJpZ2h0KVxuOztcblxubGV0IG9mX2luY3IgeCA9IHsgdmFsdWUgPSBJbmNyIHg7IGhlcmUgPSBOb25lOyBpZCA9IHZhbHVlX2lkIFwiaW5jclwiIH1cblxubW9kdWxlIE9wZW5fb25fcmhzX2ludGYgPSBzdHJ1Y3RcbiAgbW9kdWxlIHR5cGUgUyA9IHNpZyBlbmRcbmVuZFxuXG5tb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICBsZXQgcmV0dXJuID0gcmV0dXJuXG5cbiAgaW5jbHVkZSBBcHBsaWNhdGl2ZV9pbmZpeFxuXG4gIG1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0IHJldHVybiA9IHJldHVyblxuICAgIGxldCBtYXAgPSBtYXBcbiAgICBsZXQgYm90aCA9IGJvdGhcblxuICAgIG1vZHVsZSBPcGVuX29uX3JocyA9IHN0cnVjdCBlbmRcbiAgZW5kXG5lbmRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG50eXBlICdhIHQgPSAnYSBJbmNyLlZhci50XG5cbmxldCBjcmVhdGUgeCA9IEluY3IuVmFyLmNyZWF0ZSB4XG5cbmxldCBzZXQgdCB2ID1cbiAgU3RhYmlsaXphdGlvbl90cmFja2VyLm1hcmtfaW5jcmVtZW50YWxfZGlydHkgKCk7XG4gIGlmIEluY3IuYW1fc3RhYmlsaXppbmcgKClcbiAgdGhlbiBmYWlsd2l0aCBcIkJvbnNhaS5WYXIgbXV0YXRlZCBkdXJpbmcgdGhlIGNvbXB1dGF0aW9uIG9mIGEgQm9uc2FpIHZhbHVlXCI7XG4gIEluY3IuVmFyLnNldCB0IHZcbjs7XG5cbmxldCB1cGRhdGUgdCB+ZiA9XG4gIGxldCBvbGQgPSBJbmNyLlZhci52YWx1ZSB0IGluXG4gIHNldCB0IChmIG9sZClcbjs7XG5cbmxldCBnZXQgdCA9IEluY3IuVmFyLnZhbHVlIHRcbmxldCB2YWx1ZSB0ID0gdCB8PiBJbmNyLlZhci53YXRjaCB8PiBWYWx1ZS5vZl9pbmNyXG5sZXQgaW5jcl92YXIgPSBGbi5pZFxuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbigqIFRoaXMgdHlwZSByZXByZXNlbnRzIGEgY29tYmluYXRpb24gb2Ygc3RhdGljIGFuZCBkeW5hbWljIGRhdGEuIFdoZW4gb25seSBvbmVcbiAgIGlzIHByZXNlbnQsIHRoZSByZXByZXNlbnRhdGlvbiBpcyBzdHJhaWdodGZvcndhcmQsIGJ1dCB3aGVuIGJvdGggYXJlXG4gICBwcmVzZW50LCB3ZSB1c2UgdGhlIFtKb2luXSBjb25zdHJ1Y3Rvci4gW0pvaW5dIGNvbnRhaW5zIHRoZSBkeW5hbWljIHBvcnRpb25cbiAgIGFzIGEgc2luZ2xlIGluY3JlbWVudGFsIG5vZGUgKHdoaWNoIHByb2JhYmx5IGNvbnRhaW5zIGEgdHVwbGUtdHJlZSBidWlsdCB1cFxuICAgd2l0aCBzZXZlcmFsIFtib3RoXSBub2RlcyksIGFuZCB0aGUgc3RhdGljIHBvcnRpb24gaXMgY29udGFpbmVkIGltcGxpY2l0bHlcbiAgIHdpdGhpbiB0aGUgZnVuY3Rpb24sIGNhbGwgaXQgW2ZdLiBbZl0gcmVhcnJhbmdlcyB0aGUgWydhXSBieSBpbnNlcnRpbmcgYWxsXG4gICB0aGUgcGllY2VzIG9mIHN0YXRpYyBkYXRhIGludG8gdGhlaXIgYXBwcm9wcmlhdGVzIHBsYWNlcyBpbiB0aGUgdHVwbGUgdHJlZS4gKilcbnR5cGUgJ2lucHV0IHQgPVxuICB8IER5bmFtaWMgOiAnaW5wdXQgSW5jci50IC0+ICdpbnB1dCB0XG4gIHwgU3RhdGljIDogJ2lucHV0IC0+ICdpbnB1dCB0XG4gIHwgSm9pbiA6ICdhIEluY3IudCAqICgnYSAtPiAnYikgLT4gJ2IgdFxuXG5sZXQgZHluYW1pYyBpbnB1dCA9IER5bmFtaWMgaW5wdXRcbmxldCBzdGF0aWMgPSBTdGF0aWMgKClcblxubGV0IG1hcCB0IH5mID1cbiAgbWF0Y2ggdCB3aXRoXG4gIHwgRHluYW1pYyBpbnB1dCAtPiBEeW5hbWljIChJbmNyLm1hcCBpbnB1dCB+ZilcbiAgfCBTdGF0aWMgaW5wdXQgLT4gU3RhdGljIChmIGlucHV0KVxuICB8IEpvaW4gKGlucHV0LCBnKSAtPiBKb2luIChpbnB1dCwgZnVuIHggLT4gZiAoZyB4KSlcbjs7XG5cbmxldCBpdGVyX2luY3JlbWVudGFsIHQgfmYgPVxuICBtYXRjaCB0IHdpdGhcbiAgfCBEeW5hbWljIGluY3IgLT4gZiAoSW5jci5wYWNrIGluY3IpXG4gIHwgU3RhdGljIF8gLT4gKClcbiAgfCBKb2luIChpbmNyLCBfKSAtPiBmIChJbmNyLnBhY2sgaW5jcilcbjs7XG5cbmxldCB0b19pbmNyZW1lbnRhbCA9IGZ1bmN0aW9uXG4gIHwgRHluYW1pYyBpbnB1dCAtPiBpbnB1dFxuICB8IFN0YXRpYyBpbnB1dCAtPiBJbmNyLnJldHVybiBpbnB1dFxuICB8IEpvaW4gKGluY3IsIGYpIC0+IEluY3IubWFwIGluY3IgfmZcbjs7XG5cbmxldCBtZXJnZSBhIGIgPVxuICBtYXRjaCBhLCBiIHdpdGhcbiAgfCBEeW5hbWljIGEsIER5bmFtaWMgYiAtPiBEeW5hbWljIChJbmNyLmJvdGggYSBiKVxuICB8IER5bmFtaWMgYSwgU3RhdGljIGIgLT4gSm9pbiAoYSwgZnVuIGEgLT4gYSwgYilcbiAgfCBTdGF0aWMgYSwgRHluYW1pYyBiIC0+IEpvaW4gKGIsIGZ1biBiIC0+IGEsIGIpXG4gIHwgU3RhdGljIGEsIFN0YXRpYyBiIC0+IFN0YXRpYyAoYSwgYilcbiAgfCBEeW5hbWljIGEsIEpvaW4gKGIsIGYpIC0+IEpvaW4gKEluY3IuYm90aCBhIGIsIGZ1biAoYSwgYikgLT4gYSwgZiBiKVxuICB8IFN0YXRpYyBhLCBKb2luIChiLCBmKSAtPiBKb2luIChiLCBmdW4gYiAtPiBhLCBmIGIpXG4gIHwgSm9pbiAoYSwgZiksIFN0YXRpYyBiIC0+IEpvaW4gKGEsIGZ1biBhIC0+IGYgYSwgYilcbiAgfCBKb2luIChhLCBmKSwgRHluYW1pYyBiIC0+IEpvaW4gKEluY3IuYm90aCBhIGIsIGZ1biAoYSwgYikgLT4gZiBhLCBiKVxuICB8IEpvaW4gKGEsIGYpLCBKb2luIChiLCBnKSAtPiBKb2luIChJbmNyLmJvdGggYSBiLCBmdW4gKGEsIGIpIC0+IGYgYSwgZyBiKVxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgRWxlbSA9IHN0cnVjdFxuICBsZXQga2V5ZWQgfmNvbXBhcmUgaWQgPSBzdGFnZSAoZnVuIGtleSAtPiBLZXllZC5jcmVhdGUgfmtleSB+aWQgfmNvbXBhcmUpXG5cbiAgdHlwZSB0ID1cbiAgICB8IFN1YnN0X2Zyb21cbiAgICB8IFN1YnN0X2ludG9cbiAgICB8IEFzc29jIG9mIEtleWVkLnRcbiAgICB8IFN3aXRjaCBvZiBpbnRcbiAgW0BAZGVyaXZpbmcgc2V4cF9vZiwgY29tcGFyZV1cblxuICBsZXQgdG9fc3RyaW5nID1cbiAgICBsZXQgb2Zmc2V0ID0gQ2hhci50b19pbnQgJ2EnIGluXG4gICAgbGV0IGxvd2VyX25pYmJsZV90b19hbHBoYSBjID0gSW50LmJpdF9hbmQgYyAwYjExMTEgKyBvZmZzZXQgfD4gQ2hhci5vZl9pbnRfZXhuIGluXG4gICAgbGV0IGNoYXJfdG9fYWxwaGEgYnVmIGMgPVxuICAgICAgbGV0IGMgPSBDaGFyLnRvX2ludCBjIGluXG4gICAgICBsZXQgbG93ZXIgPSBsb3dlcl9uaWJibGVfdG9fYWxwaGEgYyBpblxuICAgICAgbGV0IHVwcGVyID0gbG93ZXJfbmliYmxlX3RvX2FscGhhIChJbnQuc2hpZnRfcmlnaHQgYyA0KSBpblxuICAgICAgQnVmZmVyLmFkZF9jaGFyIGJ1ZiB1cHBlcjtcbiAgICAgIEJ1ZmZlci5hZGRfY2hhciBidWYgbG93ZXJcbiAgICBpblxuICAgIGxldCBrZXllZF90b19zdHJpbmcgayA9XG4gICAgICBsZXQgYnVmID0gQnVmZmVyLmNyZWF0ZSAxMCBpblxuICAgICAgU2V4cC50b19idWZmZXJfZ2VuXG4gICAgICAgIChLZXllZC5zZXhwX29mX3QgaylcbiAgICAgICAgfmJ1ZlxuICAgICAgICB+YWRkX2NoYXI6Y2hhcl90b19hbHBoYVxuICAgICAgICB+YWRkX3N0cmluZzooZnVuIGJ1ZiBzdHJpbmcgLT4gU3RyaW5nLml0ZXIgc3RyaW5nIH5mOihjaGFyX3RvX2FscGhhIGJ1ZikpO1xuICAgICAgQnVmZmVyLmNvbnRlbnRzIGJ1ZlxuICAgIGluXG4gICAgbGV0IGludF90b19zdHJpbmcgaSA9XG4gICAgICBsZXQgYnVmID0gQnVmZmVyLmNyZWF0ZSA0IGluXG4gICAgICBTdHJpbmcuaXRlciAoSW50LnRvX3N0cmluZyBpKSB+ZjooY2hhcl90b19hbHBoYSBidWYpO1xuICAgICAgQnVmZmVyLmNvbnRlbnRzIGJ1ZlxuICAgIGluXG4gICAgZnVuY3Rpb25cbiAgICB8IFN1YnN0X2Zyb20gLT4gXCJ4XCJcbiAgICB8IFN1YnN0X2ludG8gLT4gXCJ5XCJcbiAgICB8IEFzc29jIGsgLT4ga2V5ZWRfdG9fc3RyaW5nIGtcbiAgICB8IFN3aXRjaCBpIC0+IGludF90b19zdHJpbmcgaVxuICA7O1xuZW5kXG5cbm1vZHVsZSBSdW5fbGVuZ3RoX2VuY29kaW5nID0gc3RydWN0XG4gIHR5cGUgcnVuID1cbiAgICB7IGVsZW1lbnQgOiBFbGVtLnRcbiAgICA7IGNvdW50IDogaW50XG4gICAgfVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIGxldCBzZXhwX29mX3J1biB7IGVsZW1lbnQ7IGNvdW50IH0gPVxuICAgIGlmIGNvdW50ID0gMVxuICAgIHRoZW4gWyVzZXhwX29mOiBFbGVtLnRdIGVsZW1lbnRcbiAgICBlbHNlIFslc2V4cCAoKGVsZW1lbnQsIGNvdW50KSA6IEVsZW0udCAqIGludCldXG4gIDs7XG5cbiAgdHlwZSB0ID0gcnVuIGxpc3QgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICAoKiBXZSBjYW4ndCBqdXN0IHVzZSB0aGUgW0BAZGVyaXZpbmcgY29tcGFyZV0gb24gW3RdIGJlY2F1c2Ugb2YgdGhlIGN1c3RvbSBsb2dpYyB3aGVuXG4gICAgIHRoZSB0d28gcnVucyBhdCB0aGUgZnJvbnQgb2YgdGhlIGVuY29kaW5nIGFyZSB0aGUgc2FtZS4gKilcbiAgbGV0IHJlYyBjb21wYXJlIGEgYiA9XG4gICAgbWF0Y2ggYSwgYiB3aXRoXG4gICAgfCBbXSwgW10gLT4gMFxuICAgIHwgW10sIF8gLT4gLTFcbiAgICB8IF8sIFtdIC0+IDFcbiAgICB8IGEgOjogYWwsIGIgOjogYmwgLT5cbiAgICAgIGxldCBjID0gWyVjb21wYXJlOiBFbGVtLnRdIGEuZWxlbWVudCBiLmVsZW1lbnQgaW5cbiAgICAgIGlmIGMgPSAwXG4gICAgICB0aGVuIChcbiAgICAgICAgKCogSWYgdGhlIFJMRSBpcyBkb25lIGNvcnJlY3RseSwgdGhlc2UgcmVjdXJzaXZlIGNhbGxzIHdpbGwgbm90IHJlY3Vyc2UgYWdhaW5cbiAgICAgICAgICAgKG90aGVyd2lzZSwgd2UgbXVzdCBoYXZlIHR3byBvZiB0aGUgc2FtZSBbRWxlbS50XXMgYmFjay10by1iYWNrKS4gKilcbiAgICAgICAgbWF0Y2ggSW50LnNpZ24gKGEuY291bnQgLSBiLmNvdW50KSB3aXRoXG4gICAgICAgIHwgWmVybyAtPiBjb21wYXJlIGFsIGJsXG4gICAgICAgIHwgUG9zIC0+IGNvbXBhcmUgKHsgYSB3aXRoIGNvdW50ID0gYS5jb3VudCAtIGIuY291bnQgfSA6OiBhbCkgYmxcbiAgICAgICAgfCBOZWcgLT4gY29tcGFyZSBhbCAoeyBiIHdpdGggY291bnQgPSBiLmNvdW50IC0gYS5jb3VudCB9IDo6IGJsKSlcbiAgICAgIGVsc2UgY1xuICA7O1xuXG4gIGxldCBvZl9lbGVtX2xpc3QgKGwgOiBFbGVtLnQgbGlzdCkgPVxuICAgIGxldCByZWMgaGVscGVyIH4oYWNjIDogcnVuIFJldmVyc2VkX2xpc3QudCkgKGwgOiBFbGVtLnQgbGlzdCkgOiBydW4gUmV2ZXJzZWRfbGlzdC50ID1cbiAgICAgIG1hdGNoIGFjYywgbCB3aXRoXG4gICAgICB8IFtdLCBmaXJzdCA6OiB0bCAtPiBoZWxwZXIgfmFjYzpSZXZlcnNlZF9saXN0LlsgeyBlbGVtZW50ID0gZmlyc3Q7IGNvdW50ID0gMSB9IF0gdGxcbiAgICAgIHwgYWNjLCBbXSAtPiBhY2NcbiAgICAgIHwgY3Vycl9hY2MgOjogYWNjX3RsLCBjdXJyX2VsZW1lbnQgOjogdGwgLT5cbiAgICAgICAgKG1hdGNoIFslY29tcGFyZS5lcXVhbDogRWxlbS50XSBjdXJyX2FjYy5lbGVtZW50IGN1cnJfZWxlbWVudCB3aXRoXG4gICAgICAgICB8IHRydWUgLT5cbiAgICAgICAgICAgbGV0IGFjYyA9XG4gICAgICAgICAgICAgUmV2ZXJzZWRfbGlzdC4oeyBjdXJyX2FjYyB3aXRoIGNvdW50ID0gc3VjYyBjdXJyX2FjYy5jb3VudCB9IDo6IGFjY190bClcbiAgICAgICAgICAgaW5cbiAgICAgICAgICAgaGVscGVyIH5hY2MgdGxcbiAgICAgICAgIHwgZmFsc2UgLT5cbiAgICAgICAgICAgbGV0IGFjYyA9XG4gICAgICAgICAgICAgUmV2ZXJzZWRfbGlzdC4oeyBlbGVtZW50ID0gY3Vycl9lbGVtZW50OyBjb3VudCA9IDEgfSA6OiBjdXJyX2FjYyA6OiBhY2NfdGwpXG4gICAgICAgICAgIGluXG4gICAgICAgICAgIGhlbHBlciB+YWNjIHRsKVxuICAgIGluXG4gICAgaGVscGVyIH5hY2M6UmV2ZXJzZWRfbGlzdC5bXSBsIHw+IFJldmVyc2VkX2xpc3QucmV2XG4gIDs7XG5lbmRcblxubW9kdWxlIEEgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB0ID1cbiAgICB8IFN0cmluZ2lmaWVkIG9mIHN0cmluZ1xuICAgIHwgUGFydHMgb2ZcbiAgICAgICAgeyBwYXJlbnQgOiAnYVxuICAgICAgICA7IGVsZSA6IEVsZW0udFxuICAgICAgICB9XG5lbmRcblxudHlwZSB0ID1cbiAgeyBpdGVtc19yZXYgOiBFbGVtLnQgUmV2ZXJzZWRfbGlzdC50XG4gIDsgbXV0YWJsZSBpdGVtc19mb3JfdGVzdGluZyA6IEVsZW0udCBsaXN0IFVvcHQudFxuICA7IG11dGFibGUgc3RyaW5nX3JlcHIgOiB0IEEudFxuICA7IG11dGFibGUgcnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zIDogUnVuX2xlbmd0aF9lbmNvZGluZy50IFVvcHQudFxuICB9XG5cbmxldCBydW5fbGVuZ3RoX2VuY29kaW5nIHQgPVxuICBtYXRjaCBVb3B0LnRvX29wdGlvbiB0LnJ1bl9sZW5ndGhfZW5jb2RlZF9pdGVtcyB3aXRoXG4gIHwgU29tZSBpdGVtcyAtPiBpdGVtc1xuICB8IE5vbmUgLT5cbiAgICBsZXQgcnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zID1cbiAgICAgIFJ1bl9sZW5ndGhfZW5jb2Rpbmcub2ZfZWxlbV9saXN0IChSZXZlcnNlZF9saXN0LnJldiB0Lml0ZW1zX3JldilcbiAgICBpblxuICAgIHQucnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zIDwtIFVvcHQuc29tZSBydW5fbGVuZ3RoX2VuY29kZWRfaXRlbXM7XG4gICAgcnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zXG47O1xuXG5sZXQgc2V4cF9vZl90IHQgPSBbJXNleHBfb2Y6IFJ1bl9sZW5ndGhfZW5jb2RpbmcudF0gKHJ1bl9sZW5ndGhfZW5jb2RpbmcgdClcblxubGV0IGNvbXBhcmUgYSBiID1cbiAgaWYgcGh5c19lcXVhbCBhIGJcbiAgdGhlbiAwXG4gIGVsc2UgWyVjb21wYXJlOiBSdW5fbGVuZ3RoX2VuY29kaW5nLnRdIChydW5fbGVuZ3RoX2VuY29kaW5nIGEpIChydW5fbGVuZ3RoX2VuY29kaW5nIGIpXG47O1xuXG5sZXQgZW1wdHkgPVxuICB7IGl0ZW1zX2Zvcl90ZXN0aW5nID0gVW9wdC5zb21lIFtdXG4gIDsgaXRlbXNfcmV2ID0gW11cbiAgOyBzdHJpbmdfcmVwciA9IFN0cmluZ2lmaWVkIFwiYm9uc2FpX3BhdGhcIlxuICA7IHJ1bl9sZW5ndGhfZW5jb2RlZF9pdGVtcyA9IFVvcHQuc29tZSBbXVxuICB9XG47O1xuXG5sZXQgYXBwZW5kIHQgZWxlID1cbiAgbGV0IGl0ZW1zX3JldiA9IFJldmVyc2VkX2xpc3QuKGVsZSA6OiB0Lml0ZW1zX3JldikgaW5cbiAgbGV0IGl0ZW1zX2Zvcl90ZXN0aW5nID0gVW9wdC5ub25lIGluXG4gIGxldCBzdHJpbmdfcmVwciA9IEEuUGFydHMgeyBwYXJlbnQgPSB0OyBlbGUgfSBpblxuICBsZXQgcnVuX2xlbmd0aF9lbmNvZGVkX2l0ZW1zID0gVW9wdC5ub25lIGluXG4gIHsgaXRlbXNfcmV2OyBpdGVtc19mb3JfdGVzdGluZzsgc3RyaW5nX3JlcHI7IHJ1bl9sZW5ndGhfZW5jb2RlZF9pdGVtcyB9XG47O1xuXG5pbmNsdWRlIENvbXBhcmFibGUuTWFrZV9wbGFpbiAoc3RydWN0XG4gIHR5cGUgbm9ucmVjIHQgPSB0IFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBfb2ZdXG5lbmQpXG5cbmxldCByZWMgdG9fdW5pcXVlX2lkZW50aWZpZXJfc3RyaW5nIHQgPVxuICBtYXRjaCB0LnN0cmluZ19yZXByIHdpdGhcbiAgfCBTdHJpbmdpZmllZCBzIC0+IHNcbiAgfCBQYXJ0cyB7IGVsZTsgcGFyZW50IH0gLT5cbiAgICBsZXQgcGFyZW50X3MgPSB0b191bmlxdWVfaWRlbnRpZmllcl9zdHJpbmcgcGFyZW50IGluXG4gICAgbGV0IHN0cmluZ19yZXByID0gcGFyZW50X3MgXiBcIl9cIiBeIEVsZW0udG9fc3RyaW5nIGVsZSBpblxuICAgIHQuc3RyaW5nX3JlcHIgPC0gU3RyaW5naWZpZWQgc3RyaW5nX3JlcHI7XG4gICAgc3RyaW5nX3JlcHJcbjs7XG5cbmxldCByYWlzZV9kdXBsaWNhdGUgcGF0aCA9XG4gIHJhaXNlX3NcbiAgICBbJW1lc3NhZ2VcbiAgICAgIFwiQlVHOiBbQm9uc2FpLlBhdGgudF0gc2hvdWxkIGJlIHVuaXF1ZSBmb3IgYWxsIGNvbXBvbmVudHMsIGJ1dCBkdXBsaWNhdGUgcGF0aHMgXFxcbiAgICAgICB3ZXJlIGRpc2NvdmVyZWQuXCJcbiAgICAgICAgKHBhdGggOiB0KV1cbjs7XG5cbm1vZHVsZSBGb3JfdGVzdGluZyA9IHN0cnVjdFxuICBsZXQgaXRlbXMgdCA9XG4gICAgbWF0Y2ggVW9wdC50b19vcHRpb24gdC5pdGVtc19mb3JfdGVzdGluZyB3aXRoXG4gICAgfCBTb21lIGl0ZW1zIC0+IGl0ZW1zXG4gICAgfCBOb25lIC0+XG4gICAgICBsZXQgaXRlbXMgPSBSZXZlcnNlZF9saXN0LnJldiB0Lml0ZW1zX3JldiBpblxuICAgICAgdC5pdGVtc19mb3JfdGVzdGluZyA8LSBVb3B0LnNvbWUgaXRlbXM7XG4gICAgICBpdGVtc1xuICA7O1xuXG4gIGxldCBzbG93X2J1dF9jb3JyZWN0X2NvbXBhcmVfZm9yX2Jpc2ltdWxhdGlvbiBhIGIgPVxuICAgIGlmIHBoeXNfZXF1YWwgYSBiIHRoZW4gMCBlbHNlIFslY29tcGFyZTogRWxlbS50IGxpc3RdIChpdGVtcyBhKSAoaXRlbXMgYilcbiAgOztcbmVuZFxuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbnR5cGUgdCA9XG4gIHsgb25fYWN0aXZhdGUgOiB1bml0IFVpX2VmZmVjdC50IG9wdGlvblxuICA7IG9uX2RlYWN0aXZhdGUgOiB1bml0IFVpX2VmZmVjdC50IG9wdGlvblxuICA7IGFmdGVyX2Rpc3BsYXkgOiB1bml0IFVpX2VmZmVjdC50IG9wdGlvblxuICB9XG5cbm1vZHVsZSBDb2xsZWN0aW9uID0gc3RydWN0XG4gIHR5cGUgbm9ucmVjIHQgPSB0IFBhdGguTWFwLnRcblxuICBsZXQgZW1wdHkgPSBQYXRoLk1hcC5lbXB0eVxuICBsZXQgaGFzX2FmdGVyX2Rpc3BsYXkgdCA9IE1hcC5leGlzdHMgdCB+ZjooZnVuIHQgLT4gT3B0aW9uLmlzX3NvbWUgdC5hZnRlcl9kaXNwbGF5KVxuXG4gIGxldCBtYXliZV9jb25zIGhkIHRsID1cbiAgICBsZXQgb3BlbiBSZXZlcnNlZF9saXN0IGluXG4gICAgbWF0Y2ggaGQgd2l0aFxuICAgIHwgU29tZSBhIC0+IGEgOjogdGxcbiAgICB8IE5vbmUgLT4gdGxcbiAgOztcblxuICBsZXQgZGlmZiBvbGQgbmV3XyA9XG4gICAgKCogY29sbGVjdCB0aGUgYWN0aXZhdGlvbnMgYW5kIGRlYWN0aXZhdGlvbnMgc2VwYXJhdGVseSBzbyB0aGF0IHdlIGNhbiBydW4gdGhlbVxuICAgICAgIGluIGEgZGlmZmVyZW50IG9yZGVyICopXG4gICAgbGV0IGFmdGVyX2Rpc3BsYXlzID1cbiAgICAgIGxldCBjb2xsZWN0IH5rZXk6XyB+ZGF0YTp7IGFmdGVyX2Rpc3BsYXk7IF8gfSA9IG1heWJlX2NvbnMgYWZ0ZXJfZGlzcGxheSBpblxuICAgICAgTWFwLmZvbGQgbmV3XyB+aW5pdDpSZXZlcnNlZF9saXN0LltdIH5mOmNvbGxlY3RcbiAgICBpblxuICAgIGxldCBhY3RpdmF0aW9ucywgZGVhY3RpdmF0aW9ucyA9XG4gICAgICBsZXQgY29sbGVjdCAoYWN0aXZhdGlvbnMsIGRlYWN0aXZhdGlvbnMpID0gZnVuY3Rpb25cbiAgICAgICAgfCBfLCBgTGVmdCB7IG9uX2RlYWN0aXZhdGU7IF8gfSAtPlxuICAgICAgICAgIGFjdGl2YXRpb25zLCBtYXliZV9jb25zIG9uX2RlYWN0aXZhdGUgZGVhY3RpdmF0aW9uc1xuICAgICAgICB8IF8sIGBSaWdodCB7IG9uX2FjdGl2YXRlOyBfIH0gLT5cbiAgICAgICAgICBtYXliZV9jb25zIG9uX2FjdGl2YXRlIGFjdGl2YXRpb25zLCBkZWFjdGl2YXRpb25zXG4gICAgICAgIHwgXywgYFVuZXF1YWwgXyAtPiBhY3RpdmF0aW9ucywgZGVhY3RpdmF0aW9uc1xuICAgICAgaW5cbiAgICAgIGxldCBkYXRhX2VxdWFsID0gcGh5c19lcXVhbCBpblxuICAgICAgTWFwLmZvbGRfc3ltbWV0cmljX2RpZmZcbiAgICAgICAgb2xkXG4gICAgICAgIG5ld19cbiAgICAgICAgfmRhdGFfZXF1YWxcbiAgICAgICAgfmluaXQ6KFJldmVyc2VkX2xpc3QuW10sIFJldmVyc2VkX2xpc3QuW10pXG4gICAgICAgIH5mOmNvbGxlY3RcbiAgICBpblxuICAgIFVpX2VmZmVjdC5NYW55XG4gICAgICBbIGRlYWN0aXZhdGlvbnMgfD4gUmV2ZXJzZWRfbGlzdC5yZXYgfD4gVWlfZWZmZWN0Lk1hbnlcbiAgICAgIDsgYWN0aXZhdGlvbnMgfD4gUmV2ZXJzZWRfbGlzdC5yZXYgfD4gVWlfZWZmZWN0Lk1hbnlcbiAgICAgIDsgYWZ0ZXJfZGlzcGxheXMgfD4gUmV2ZXJzZWRfbGlzdC5yZXYgfD4gVWlfZWZmZWN0Lk1hbnlcbiAgICAgIF1cbiAgOztcblxuICBsZXQgbWVyZ2UgYSBiID0gSW5jcl9tYXAubWVyZ2VfZGlzam9pbnQgYSBiXG5lbmRcbiIsIm9wZW4hIENvcmVcblxubW9kdWxlIFQgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IFllc19vcl9tYXliZVxuICAgIHwgTm9cblxuICBsZXQgbWVyZ2UgYSBiID1cbiAgICBtYXRjaCBhLCBiIHdpdGhcbiAgICB8IFllc19vcl9tYXliZSwgXyB8IF8sIFllc19vcl9tYXliZSAtPiBZZXNfb3JfbWF5YmVcbiAgICB8IE5vLCBObyAtPiBOb1xuICA7O1xuZW5kXG5cbm1vZHVsZSBMaWZlY3ljbGUgPSBUXG5tb2R1bGUgUGF0aCA9IFRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5sZXQgdW5pdF90eXBlX2lkID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJ1bml0XCIgWyVzZXhwX29mOiB1bml0XVxubGV0IG5vdGhpbmdfdHlwZV9pZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwiTm90aGluZy50XCIgWyVzZXhwX29mOiBOb3RoaW5nLnRdXG5cbm1vZHVsZSB0eXBlIFR5cGVfaWQgPSBzaWdcbiAgdHlwZSAnYSB0IFtAQGRlcml2aW5nIHNleHBfb2ZdXG5cbiAgdmFsIHNhbWVfd2l0bmVzcyA6ICdhIHQgLT4gJ2IgdCAtPiAoJ2EsICdiKSBUeXBlX2VxdWFsLnQgb3B0aW9uXG4gIHZhbCBzYW1lX3dpdG5lc3NfZXhuIDogJ2EgdCAtPiAnYiB0IC0+ICgnYSwgJ2IpIFR5cGVfZXF1YWwudFxuICB2YWwgdG9fdHlwZV9pZCA6ICdhIHQgLT4gJ2EgVHlwZV9lcXVhbC5JZC50XG4gIHZhbCB0b19zZXhwIDogJ2EgdCAtPiAnYSAtPiBTZXhwLnRcbiAgdmFsIG5vdGhpbmcgOiBOb3RoaW5nLnQgdFxuICB2YWwgdW5pdCA6IHVuaXQgdFxuZW5kXG5cbm1vZHVsZSBNb2RlbCA9IHN0cnVjdFxuICB0eXBlICdhIGlkID1cbiAgICB8IExlYWYgOiB7IHR5cGVfaWQgOiAnYSBUeXBlX2VxdWFsLklkLnQgfSAtPiAnYSBpZFxuICAgIHwgVHVwbGUgOlxuICAgICAgICB7IGEgOiAnYSBpZFxuICAgICAgICA7IGIgOiAnYiBpZFxuICAgICAgICB9XG4gICAgICAgIC0+ICgnYSAqICdiKSBpZFxuICAgIHwgTWFwIDpcbiAgICAgICAgeyBrIDogJ2sgVHlwZV9lcXVhbC5JZC50XG4gICAgICAgIDsgY21wIDogJ2NtcCBUeXBlX2VxdWFsLklkLnRcbiAgICAgICAgOyBieSA6ICdyZXN1bHQgaWRcbiAgICAgICAgfVxuICAgICAgICAtPiAoJ2ssICdyZXN1bHQsICdjbXApIE1hcC50IGlkXG4gICAgfCBNYXBfb24gOlxuICAgICAgICB7IGtfbW9kZWwgOiAna19tb2RlbCBUeXBlX2VxdWFsLklkLnRcbiAgICAgICAgOyBrX2lvIDogJ2tfaW8gVHlwZV9lcXVhbC5JZC50XG4gICAgICAgIDsgY21wIDogJ2NtcF9tb2RlbCBUeXBlX2VxdWFsLklkLnRcbiAgICAgICAgOyBieSA6ICdyZXN1bHQgaWRcbiAgICAgICAgfVxuICAgICAgICAtPiAoJ2tfbW9kZWwsICdrX2lvICogJ3Jlc3VsdCwgJ2NtcF9tb2RlbCkgTWFwLnQgaWRcbiAgICB8IE11bHRpX21vZGVsIDogeyBtdWx0aV9tb2RlbCA6IGhpZGRlbiBJbnQuTWFwLnQgfSAtPiBoaWRkZW4gSW50Lk1hcC50IGlkXG5cbiAgYW5kICdhIHQgPVxuICAgIHsgZGVmYXVsdCA6ICdhXG4gICAgOyBlcXVhbCA6ICdhIC0+ICdhIC0+IGJvb2xcbiAgICA7IHR5cGVfaWQgOiAnYSBpZFxuICAgIDsgc2V4cF9vZiA6ICdhIC0+IFNleHAudFxuICAgIH1cblxuICBhbmQgaGlkZGVuID1cbiAgICB8IFQgOlxuICAgICAgICB7IG1vZGVsIDogJ21cbiAgICAgICAgOyBpbmZvIDogJ20gdFxuICAgICAgICB9XG4gICAgICAgIC0+IGhpZGRlblxuXG4gIG1vZHVsZSBUeXBlX2lkID0gc3RydWN0XG4gICAgdHlwZSAnYSB0ID0gJ2EgaWRcblxuICAgIGxldCByZWMgc2V4cF9vZl90IDogdHlwZSBhLiAoYSAtPiBTZXhwLnQpIC0+IGEgdCAtPiBTZXhwLnQgPVxuICAgICAgZnVuIHNleHBfb2ZfYSAtPiBmdW5jdGlvblxuICAgICAgfCBMZWFmIHsgdHlwZV9pZCB9IC0+IFslc2V4cCAodHlwZV9pZCA6IGEgVHlwZV9lcXVhbC5JZC50KV1cbiAgICAgIHwgVHVwbGUgeyBhOyBiIH0gLT4gWyVzZXhwIChhIDogb3BhcXVlIHQpLCAoYiA6IG9wYXF1ZSB0KV1cbiAgICAgIHwgTWFwIHsgYnk7IF8gfSAtPiBbJXNleHAgKGJ5IDogb3BhcXVlIHQpXVxuICAgICAgfCBNYXBfb24geyBieTsgXyB9IC0+IFslc2V4cCAoYnkgOiBvcGFxdWUgdCldXG4gICAgICB8IE11bHRpX21vZGVsIHsgbXVsdGlfbW9kZWwgfSAtPlxuICAgICAgICBsZXQgc2V4cF9vZl9oaWRkZW4gKFQgeyBpbmZvID0geyB0eXBlX2lkOyBfIH07IF8gfSkgPVxuICAgICAgICAgIFslc2V4cCAodHlwZV9pZCA6IG9wYXF1ZSB0KV1cbiAgICAgICAgaW5cbiAgICAgICAgWyVzZXhwIChtdWx0aV9tb2RlbCA6IGhpZGRlbiBJbnQuTWFwLnQpXVxuICAgIDs7XG5cbiAgICBsZXQgcmVjIHRvX3NleHAgOiB0eXBlIGEuIGEgdCAtPiBhIC0+IFNleHAudCA9IGZ1bmN0aW9uXG4gICAgICB8IExlYWYgeyB0eXBlX2lkIH0gLT4gVHlwZV9lcXVhbC5JZC50b19zZXhwIHR5cGVfaWRcbiAgICAgIHwgVHVwbGUgeyBhID0gYV90OyBiID0gYl90IH0gLT5cbiAgICAgICAgbGV0IHNleHBfb2ZfYSA9IHRvX3NleHAgYV90IGluXG4gICAgICAgIGxldCBzZXhwX29mX2IgPSB0b19zZXhwIGJfdCBpblxuICAgICAgICBbJXNleHBfb2Y6IGEgKiBiXVxuICAgICAgfCBNYXAgeyBrOyBieTsgXyB9IC0+XG4gICAgICAgIGxldCByZXN1bHQgOiB0eXBlIGsgYnkuIGsgVHlwZV9lcXVhbC5JZC50IC0+IGJ5IGlkIC0+IChrLCBieSwgXykgTWFwLnQgLT4gU2V4cC50ID1cbiAgICAgICAgICBmdW4gayBieSAtPlxuICAgICAgICAgIGxldCBtb2R1bGUgS2V5ID0gc3RydWN0XG4gICAgICAgICAgICB0eXBlIHQgPSBrXG5cbiAgICAgICAgICAgIGxldCBzZXhwX29mX3QgOiB0IC0+IFNleHAudCA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBrXG4gICAgICAgICAgZW5kXG4gICAgICAgICAgaW5cbiAgICAgICAgICBsZXQgc2V4cF9vZl9ieSA9IHRvX3NleHAgYnkgaW5cbiAgICAgICAgICBbJXNleHBfb2Y6IGJ5IE1hcC5NKEtleSkudF1cbiAgICAgICAgaW5cbiAgICAgICAgcmVzdWx0IGsgYnlcbiAgICAgIHwgTWFwX29uIHsga19tb2RlbDsga19pbzsgYnk7IF8gfSAtPlxuICAgICAgICBsZXQgcmVzdWx0ICh0eXBlIGtfbW9kZWwpIChrX21vZGVsIDoga19tb2RlbCBUeXBlX2VxdWFsLklkLnQpIGtfaW8gYnkgPVxuICAgICAgICAgIGxldCBtb2R1bGUgS2V5ID0gc3RydWN0XG4gICAgICAgICAgICB0eXBlIHQgPSBrX21vZGVsXG5cbiAgICAgICAgICAgIGxldCBzZXhwX29mX3QgOiB0IC0+IFNleHAudCA9IFR5cGVfZXF1YWwuSWQudG9fc2V4cCBrX21vZGVsXG4gICAgICAgICAgZW5kXG4gICAgICAgICAgaW5cbiAgICAgICAgICBsZXQgc2V4cF9vZl9ieSA9IHRvX3NleHAgYnkgaW5cbiAgICAgICAgICBsZXQgc2V4cF9vZl9rX2lvID0gVHlwZV9lcXVhbC5JZC50b19zZXhwIGtfaW8gaW5cbiAgICAgICAgICBbJXNleHBfb2Y6IChrX2lvICogYnkpIE1hcC5NKEtleSkudF1cbiAgICAgICAgaW5cbiAgICAgICAgcmVzdWx0IGtfbW9kZWwga19pbyBieVxuICAgICAgfCBNdWx0aV9tb2RlbCBfIC0+XG4gICAgICAgIGxldCBzZXhwX29mX2hpZGRlbiAoVCB7IGluZm8gPSB7IHR5cGVfaWQ7IF8gfTsgXyB9KSA9XG4gICAgICAgICAgc2V4cF9vZl90IHNleHBfb2Zfb3BhcXVlIHR5cGVfaWRcbiAgICAgICAgaW5cbiAgICAgICAgWyVzZXhwX29mOiBoaWRkZW4gSW50Lk1hcC50XVxuICAgIDs7XG5cbiAgICBleGNlcHRpb24gRmFpbFxuXG4gICAgbGV0IHR5cGVfZXF1YWxfaWRfc2FtZV93aXRuZXNzID0gVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3NcblxuICAgIGxldCByZWMgc2FtZV93aXRuZXNzIDogdHlwZSBhIGIuIGEgdCAtPiBiIHQgLT4gKGEsIGIpIFR5cGVfZXF1YWwudCBvcHRpb24gPVxuICAgICAgZnVuIGEgYiAtPlxuICAgICAgbWF0Y2ggYSwgYiB3aXRoXG4gICAgICB8IExlYWYgYSwgTGVhZiBiIC0+IHR5cGVfZXF1YWxfaWRfc2FtZV93aXRuZXNzIGEudHlwZV9pZCBiLnR5cGVfaWRcbiAgICAgIHwgVHVwbGUgYSwgVHVwbGUgYiAtPlxuICAgICAgICBsZXQlYmluZC5PcHRpb24gVCA9IHNhbWVfd2l0bmVzcyBhLmEgYi5hIGluXG4gICAgICAgIGxldCViaW5kLk9wdGlvbiBUID0gc2FtZV93aXRuZXNzIGEuYiBiLmIgaW5cbiAgICAgICAgU29tZSAoVHlwZV9lcXVhbC5UIDogKGEsIGIpIFR5cGVfZXF1YWwudClcbiAgICAgIHwgTWFwIGEsIE1hcCBiIC0+XG4gICAgICAgIGxldCViaW5kLk9wdGlvbiBUID0gdHlwZV9lcXVhbF9pZF9zYW1lX3dpdG5lc3MgYS5rIGIuayBpblxuICAgICAgICBsZXQlYmluZC5PcHRpb24gVCA9IHR5cGVfZXF1YWxfaWRfc2FtZV93aXRuZXNzIGEuY21wIGIuY21wIGluXG4gICAgICAgIGxldCViaW5kLk9wdGlvbiBUID0gc2FtZV93aXRuZXNzIGEuYnkgYi5ieSBpblxuICAgICAgICBTb21lIChUeXBlX2VxdWFsLlQgOiAoYSwgYikgVHlwZV9lcXVhbC50KVxuICAgICAgfCBNYXBfb24gYSwgTWFwX29uIGIgLT5cbiAgICAgICAgbGV0JWJpbmQuT3B0aW9uIFQgPSB0eXBlX2VxdWFsX2lkX3NhbWVfd2l0bmVzcyBhLmtfaW8gYi5rX2lvIGluXG4gICAgICAgIGxldCViaW5kLk9wdGlvbiBUID0gdHlwZV9lcXVhbF9pZF9zYW1lX3dpdG5lc3MgYS5rX21vZGVsIGIua19tb2RlbCBpblxuICAgICAgICBsZXQlYmluZC5PcHRpb24gVCA9IHR5cGVfZXF1YWxfaWRfc2FtZV93aXRuZXNzIGEuY21wIGIuY21wIGluXG4gICAgICAgIGxldCViaW5kLk9wdGlvbiBUID0gc2FtZV93aXRuZXNzIGEuYnkgYi5ieSBpblxuICAgICAgICBTb21lIChUeXBlX2VxdWFsLlQgOiAoYSwgYikgVHlwZV9lcXVhbC50KVxuICAgICAgfCBNdWx0aV9tb2RlbCBhLCBNdWx0aV9tb2RlbCBiIC0+XG4gICAgICAgIHdpdGhfcmV0dXJuIChmdW4geyByZXR1cm4gfSAtPlxuICAgICAgICAgIE1hcC5pdGVyMiBhLm11bHRpX21vZGVsIGIubXVsdGlfbW9kZWwgfmY6KGZ1biB+a2V5Ol8gfmRhdGEgLT5cbiAgICAgICAgICAgIG1hdGNoIGRhdGEgd2l0aFxuICAgICAgICAgICAgfCBgQm90aCAoVCBhLCBUIGIpIC0+XG4gICAgICAgICAgICAgIChtYXRjaCBzYW1lX3dpdG5lc3MgYS5pbmZvLnR5cGVfaWQgYi5pbmZvLnR5cGVfaWQgd2l0aFxuICAgICAgICAgICAgICAgfCBOb25lIC0+IHJldHVybiBOb25lXG4gICAgICAgICAgICAgICB8IFNvbWUgVCAtPiAoKSlcbiAgICAgICAgICAgIHwgXyAtPiByZXR1cm4gTm9uZSk7XG4gICAgICAgICAgU29tZSBUeXBlX2VxdWFsLlQpXG4gICAgICB8IExlYWYgXywgVHVwbGUgX1xuICAgICAgfCBMZWFmIF8sIE1hcCBfXG4gICAgICB8IExlYWYgXywgTWFwX29uIF9cbiAgICAgIHwgTGVhZiBfLCBNdWx0aV9tb2RlbCBfXG4gICAgICB8IFR1cGxlIF8sIExlYWYgX1xuICAgICAgfCBUdXBsZSBfLCBNYXAgX1xuICAgICAgfCBUdXBsZSBfLCBNYXBfb24gX1xuICAgICAgfCBUdXBsZSBfLCBNdWx0aV9tb2RlbCBfXG4gICAgICB8IE1hcCBfLCBMZWFmIF9cbiAgICAgIHwgTWFwIF8sIFR1cGxlIF9cbiAgICAgIHwgTWFwIF8sIE1hcF9vbiBfXG4gICAgICB8IE1hcCBfLCBNdWx0aV9tb2RlbCBfXG4gICAgICB8IE1hcF9vbiBfLCBMZWFmIF9cbiAgICAgIHwgTWFwX29uIF8sIFR1cGxlIF9cbiAgICAgIHwgTWFwX29uIF8sIE1hcCBfXG4gICAgICB8IE1hcF9vbiBfLCBNdWx0aV9tb2RlbCBfXG4gICAgICB8IE11bHRpX21vZGVsIF8sIExlYWYgX1xuICAgICAgfCBNdWx0aV9tb2RlbCBfLCBUdXBsZSBfXG4gICAgICB8IE11bHRpX21vZGVsIF8sIE1hcCBfXG4gICAgICB8IE11bHRpX21vZGVsIF8sIE1hcF9vbiBfIC0+IE5vbmVcbiAgICA7O1xuXG4gICAgbGV0IHNhbWVfd2l0bmVzc19leG4gYSBiID1cbiAgICAgIG1hdGNoIHNhbWVfd2l0bmVzcyBhIGIgd2l0aFxuICAgICAgfCBOb25lIC0+IHJhaXNlX25vdHJhY2UgRmFpbFxuICAgICAgfCBTb21lIHByb29mIC0+IHByb29mXG4gICAgOztcblxuICAgIGxldCB0b190eXBlX2lkIF8gPSBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcIm1vZHVsZSB0cmVlIHR5cGUgaWRcIiBbJXNleHBfb2Y6IG9wYXF1ZV1cbiAgICBsZXQgdW5pdCA9IExlYWYgeyB0eXBlX2lkID0gdW5pdF90eXBlX2lkIH1cbiAgICBsZXQgbm90aGluZyA9IExlYWYgeyB0eXBlX2lkID0gbm90aGluZ190eXBlX2lkIH1cbiAgZW5kXG5cbiAgbGV0IHVuaXQgPVxuICAgIHsgdHlwZV9pZCA9IFR5cGVfaWQudW5pdDsgZGVmYXVsdCA9ICgpOyBlcXVhbCA9IGVxdWFsX3VuaXQ7IHNleHBfb2YgPSBzZXhwX29mX3VuaXQgfVxuICA7O1xuXG4gIGxldCBib3RoIG1vZGVsMSBtb2RlbDIgPVxuICAgIGxldCBzZXhwX29mID0gVHVwbGUyLnNleHBfb2ZfdCBtb2RlbDEuc2V4cF9vZiBtb2RlbDIuc2V4cF9vZiBpblxuICAgIGxldCB0eXBlX2lkID0gVHVwbGUgeyBhID0gbW9kZWwxLnR5cGVfaWQ7IGIgPSBtb2RlbDIudHlwZV9pZCB9IGluXG4gICAgbGV0IGRlZmF1bHQgPSBtb2RlbDEuZGVmYXVsdCwgbW9kZWwyLmRlZmF1bHQgaW5cbiAgICBsZXQgZXF1YWwgPSBUdXBsZTIuZXF1YWwgfmVxMTptb2RlbDEuZXF1YWwgfmVxMjptb2RlbDIuZXF1YWwgaW5cbiAgICB7IHR5cGVfaWQ7IGRlZmF1bHQ7IGVxdWFsOyBzZXhwX29mIH1cbiAgOztcblxuICBsZXQgbWFwXG4gICAgKHR5cGUgayBjbXApXG4gICAgKG1vZHVsZSBNIDogQ29tcGFyYXRvciB3aXRoIHR5cGUgdCA9IGsgYW5kIHR5cGUgY29tcGFyYXRvcl93aXRuZXNzID0gY21wKVxuICAgIGtcbiAgICBjbXBcbiAgICBtb2RlbFxuICAgID1cbiAgICBsZXQgc2V4cF9vZl9tb2RlbCA9IG1vZGVsLnNleHBfb2YgaW5cbiAgICBsZXQgc2V4cF9vZl9tYXBfbW9kZWwgPSBbJXNleHBfb2Y6IG1vZGVsIE1hcC5NKE0pLnRdIGluXG4gICAgbGV0IG1vZGVsX21hcF90eXBlX2lkID0gTWFwIHsgazsgY21wOyBieSA9IG1vZGVsLnR5cGVfaWQgfSBpblxuICAgIHsgdHlwZV9pZCA9IG1vZGVsX21hcF90eXBlX2lkXG4gICAgOyBkZWZhdWx0ID0gTWFwLmVtcHR5IChtb2R1bGUgTSlcbiAgICA7IGVxdWFsID0gTWFwLmVxdWFsIG1vZGVsLmVxdWFsXG4gICAgOyBzZXhwX29mID0gc2V4cF9vZl9tYXBfbW9kZWxcbiAgICB9XG4gIDs7XG5cbiAgbGV0IG1hcF9vblxuICAgICh0eXBlIGsgY21wIGtfaW8gY21wX2lvKVxuICAgIChtb2R1bGUgTSA6IENvbXBhcmF0b3Igd2l0aCB0eXBlIHQgPSBrIGFuZCB0eXBlIGNvbXBhcmF0b3Jfd2l0bmVzcyA9IGNtcClcbiAgICAobW9kdWxlIE1faW8gOiBDb21wYXJhdG9yIHdpdGggdHlwZSB0ID0ga19pbyBhbmQgdHlwZSBjb21wYXJhdG9yX3dpdG5lc3MgPSBjbXBfaW8pXG4gICAga19tb2RlbFxuICAgIGtfaW9cbiAgICBjbXBcbiAgICBtb2RlbFxuICAgID1cbiAgICBsZXQgc2V4cF9vZl9tb2RlbCA9IG1vZGVsLnNleHBfb2YgaW5cbiAgICBsZXQgc2V4cF9vZl9tYXBfbW9kZWwgPSBbJXNleHBfb2Y6IChNX2lvLnQgKiBtb2RlbCkgTWFwLk0oTSkudF0gaW5cbiAgICBsZXQgbW9kZWxfbWFwX3R5cGVfaWQgPSBNYXBfb24geyBrX21vZGVsOyBrX2lvOyBjbXA7IGJ5ID0gbW9kZWwudHlwZV9pZCB9IGluXG4gICAgbGV0IGlvX2VxdWFsIGEgYiA9IE1faW8uY29tcGFyYXRvci5jb21wYXJlIGEgYiA9IDAgaW5cbiAgICB7IHR5cGVfaWQgPSBtb2RlbF9tYXBfdHlwZV9pZFxuICAgIDsgZGVmYXVsdCA9IE1hcC5lbXB0eSAobW9kdWxlIE0pXG4gICAgOyBlcXVhbCA9IE1hcC5lcXVhbCAoVHVwbGUyLmVxdWFsIH5lcTE6aW9fZXF1YWwgfmVxMjptb2RlbC5lcXVhbClcbiAgICA7IHNleHBfb2YgPSBzZXhwX29mX21hcF9tb2RlbFxuICAgIH1cbiAgOztcblxuICBsZXQgb2ZfbW9kdWxlIH5zZXhwX29mX21vZGVsIH5lcXVhbCB+ZGVmYXVsdCB+bmFtZSA9XG4gICAgbGV0IGVxdWFsID0gT3B0aW9uLnZhbHVlIH5kZWZhdWx0OnBoeXNfZXF1YWwgZXF1YWwgaW5cbiAgICBsZXQgdHlwZV9pZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOihzcHJpbnRmIFwiJXMtbW9kZWxcIiBuYW1lKSBzZXhwX29mX21vZGVsIGluXG4gICAgeyB0eXBlX2lkID0gTGVhZiB7IHR5cGVfaWQgfTsgZGVmYXVsdDsgZXF1YWw7IHNleHBfb2YgPSBzZXhwX29mX21vZGVsIH1cbiAgOztcblxuICBtb2R1bGUgSGlkZGVuID0gc3RydWN0XG4gICAgdHlwZSAnYSBtb2RlbCA9ICdhIHRcblxuICAgIHR5cGUgdCA9IGhpZGRlbiA9XG4gICAgICB8IFQgOlxuICAgICAgICAgIHsgbW9kZWwgOiAnbVxuICAgICAgICAgIDsgaW5mbyA6ICdtIG1vZGVsXG4gICAgICAgICAgfVxuICAgICAgICAgIC0+IHRcblxuICAgIGxldCBzZXhwX29mX3QgKFQgeyBtb2RlbDsgaW5mbyA9IHsgc2V4cF9vZjsgXyB9OyBfIH0pID0gc2V4cF9vZiBtb2RlbFxuXG4gICAgbGV0IGVxdWFsXG4gICAgICAoVCB7IG1vZGVsID0gbTE7IGluZm8gPSB7IHR5cGVfaWQgPSB0MTsgZXF1YWw7IF8gfTsgXyB9KVxuICAgICAgKFQgeyBtb2RlbCA9IG0yOyBpbmZvID0geyB0eXBlX2lkID0gdDI7IF8gfTsgXyB9KVxuICAgICAgPVxuICAgICAgbWF0Y2ggVHlwZV9pZC5zYW1lX3dpdG5lc3MgdDEgdDIgd2l0aFxuICAgICAgfCBTb21lIFQgLT4gZXF1YWwgbTEgbTJcbiAgICAgIHwgTm9uZSAtPiBmYWxzZVxuICAgIDs7XG5cbiAgICBsZXQgY3JlYXRlIChpbmZvIDogXyBtb2RlbCkgPVxuICAgICAgbGV0IHdyYXAgbSA9IFQgeyBtb2RlbCA9IG07IGluZm8gfSBpblxuICAgICAgd3JhcFxuICAgIDs7XG5cbiAgICBsZXQgbGF6eV8gPVxuICAgICAgeyBkZWZhdWx0ID0gTm9uZVxuICAgICAgOyBlcXVhbCA9IFslZXF1YWw6IHQgb3B0aW9uXVxuICAgICAgOyB0eXBlX2lkID1cbiAgICAgICAgICBMZWFmIHsgdHlwZV9pZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwibGF6eS1tb2RlbFwiIFslc2V4cF9vZjogdCBvcHRpb25dIH1cbiAgICAgIDsgc2V4cF9vZiA9IFslc2V4cF9vZjogdCBvcHRpb25dXG4gICAgICB9XG4gICAgOztcbiAgZW5kXG5lbmRcblxubW9kdWxlIE11bHRpX21vZGVsID0gc3RydWN0XG4gIHR5cGUgdCA9IE1vZGVsLkhpZGRlbi50IEludC5NYXAudFxuXG4gIGxldCBzZXhwX29mX3QgKHR5cGUgaykgKHNleHBfb2ZfayA6IGsgLT4gU2V4cC50KSA9XG4gICAgbGV0IG1vZHVsZSBLID0gc3RydWN0XG4gICAgICB0eXBlIHQgPSBrIFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG4gICAgaW5cbiAgICBbJXNleHBfb2Y6IE1vZGVsLkhpZGRlbi50IE1hcC5NKEspLnRdXG4gIDs7XG5cbiAgbGV0IGZpbmRfZXhuID0gTWFwLmZpbmRfZXhuXG4gIGxldCBzZXQgPSBNYXAuc2V0XG4gIGxldCB0b19tb2RlbHMsIG9mX21vZGVscyA9IEZuLmlkLCBGbi5pZFxuXG4gIGxldCBtb2RlbF9pbmZvIGRlZmF1bHQgPVxuICAgIGxldCBzZXhwX29mID0gWyVzZXhwX29mOiBpbnQgdF0gaW5cbiAgICBsZXQgdHlwZV9pZCA9IE1vZGVsLk11bHRpX21vZGVsIHsgbXVsdGlfbW9kZWwgPSBkZWZhdWx0IH0gaW5cbiAgICAoeyBkZWZhdWx0OyB0eXBlX2lkOyBlcXVhbCA9IFslZXF1YWw6IE1vZGVsLkhpZGRlbi50IEludC5NYXAudF07IHNleHBfb2YgfVxuICAgICAgOiB0IE1vZGVsLnQpXG4gIDs7XG5lbmRcblxubW9kdWxlIElucHV0ID0gc3RydWN0XG4gIG1vZHVsZSBUeXBlX2lkID0gTW9kZWwuVHlwZV9pZFxuXG4gIHR5cGUgJ2EgdCA9ICdhIFR5cGVfaWQudCBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIGxldCBzYW1lX3dpdG5lc3MgPSBUeXBlX2lkLnNhbWVfd2l0bmVzc1xuICBsZXQgc2FtZV93aXRuZXNzX2V4biA9IFR5cGVfaWQuc2FtZV93aXRuZXNzX2V4blxuICBsZXQgdW5pdCA9IFR5cGVfaWQudW5pdFxuXG4gIGxldCBjcmVhdGUgKCkgPVxuICAgIE1vZGVsLkxlYWYgeyB0eXBlX2lkID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJpbnB1dFwiIHNleHBfb2Zfb3BhcXVlIH1cbiAgOztcblxuICBsZXQgYm90aCBhIGIgPSBNb2RlbC5UdXBsZSB7IGE7IGIgfVxuICBsZXQgbWFwIGsgY21wIGJ5ID0gTW9kZWwuTWFwIHsgazsgY21wOyBieSB9XG5cbiAgbW9kdWxlIEhpZGRlbiA9IHN0cnVjdFxuICAgIHR5cGUgJ2EgaW5wdXQgPSAnYSB0XG5cbiAgICB0eXBlICdrZXkgdCA9XG4gICAgICB8IFQgOlxuICAgICAgICAgIHsgaW5wdXQgOiAnaW5wdXRcbiAgICAgICAgICA7IHR5cGVfaWQgOiAnaW5wdXQgaW5wdXRcbiAgICAgICAgICA7IGtleSA6ICdrZXlcbiAgICAgICAgICB9XG4gICAgICAgICAgLT4gJ2tleSB0XG5cbiAgICBsZXQgdW5pdCA6IHVuaXQgdCBpbnB1dCA9XG4gICAgICBMZWFmIHsgdHlwZV9pZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwibGF6eSBpbnB1dFwiIHNleHBfb2Zfb3BhcXVlIH1cbiAgICA7O1xuXG4gICAgbGV0IGludCA6IGludCB0IGlucHV0ID1cbiAgICAgIExlYWYgeyB0eXBlX2lkID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJlbnVtIGlucHV0XCIgc2V4cF9vZl9vcGFxdWUgfVxuICAgIDs7XG4gIGVuZFxuZW5kXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxudHlwZSAoJ21vZGVsLCAnaW5wdXQsICdyZXN1bHQpIHQgPVxuICB7IGlucHV0IDogJ2lucHV0IElucHV0LnRcbiAgOyBsaWZlY3ljbGUgOiBMaWZlY3ljbGUuQ29sbGVjdGlvbi50IEluY3IudCBvcHRpb25cbiAgOyByZXN1bHQgOiAncmVzdWx0IEluY3IudFxuICB9XG5bQEBkZXJpdmluZyBmaWVsZHMgfmdldHRlcnMgfml0ZXJhdG9yczpjcmVhdGVdXG5cbmxldCBjcmVhdGUgfmlucHV0IH5saWZlY3ljbGUgfnJlc3VsdCA9XG4gIElucHV0Lml0ZXJfaW5jcmVtZW50YWwgaW5wdXQgfmY6KGFubm90YXRlX3BhY2tlZCBJbnB1dCk7XG4gIE9wdGlvbi5pdGVyIGxpZmVjeWNsZSB+ZjooYW5ub3RhdGUgTGlmZWN5Y2xlKTtcbiAgYW5ub3RhdGUgUmVzdWx0IHJlc3VsdDtcbiAgRmllbGRzLmNyZWF0ZSB+aW5wdXQgfmxpZmVjeWNsZSB+cmVzdWx0XG47O1xuXG5sZXQgYXR0cmlidXRlX3Bvc2l0aW9ucyBoZXJlIHQgPVxuICBJbnB1dC5pdGVyX2luY3JlbWVudGFsIHQuaW5wdXQgfmY6KGF0dHJpYnV0ZV9wYWNrZWQgaGVyZSk7XG4gIE9wdGlvbi5pdGVyIHQubGlmZWN5Y2xlIH5mOihhdHRyaWJ1dGUgaGVyZSk7XG4gIGF0dHJpYnV0ZSBoZXJlIHQucmVzdWx0XG47O1xuXG5sZXQgbGlmZWN5Y2xlX29yX2VtcHR5IHQgPVxuICBtYXRjaCBsaWZlY3ljbGUgdCB3aXRoXG4gIHwgTm9uZSAtPlxuICAgIGxldCByID0gSW5jci5jb25zdCBMaWZlY3ljbGUuQ29sbGVjdGlvbi5lbXB0eSBpblxuICAgIGFubm90YXRlIEVtcHR5X2xpZmVjeWNsZSByO1xuICAgIHJcbiAgfCBTb21lIGwgLT4gbFxuOztcbiIsIm9wZW4hIENvcmVcblxudHlwZSAnYSB0ID1cbiAgfCBMYXp5IDogJ2EgdCBMYXp5LnQgLT4gJ2EgdFxuICB8IFJldHVybiA6ICdhIC0+ICdhIHRcbiAgfCBCaW5kIDogJ2EgdCAqICgnYSAtPiAnYiB0KSAtPiAnYiB0XG5cbmxldCBsYXp5XyB0ID0gTGF6eSB0XG5sZXQgcmV0dXJuIGEgPSBSZXR1cm4gYVxubGV0IGJpbmQgdCB+ZiA9IEJpbmQgKHQsIGYpXG5cbnR5cGUgKF8sIF8pIHN0YWNrID1cbiAgfCBbXSA6ICgnYSwgJ2EpIHN0YWNrXG4gIHwgKCA6OiApIDogKCdhIC0+ICdiIHQpICogKCdiLCAnYykgc3RhY2sgLT4gKCdhLCAnYykgc3RhY2tcblxubGV0IHJlYyBydW5fYXV4IDogdHlwZSBhIGIuIGEgdCAtPiAoYSwgYikgc3RhY2sgLT4gYiA9XG4gIGZ1biB0IHN0YWNrIC0+XG4gIG1hdGNoIHQgd2l0aFxuICB8IExhenkgdCAtPiBydW5fYXV4IChMYXp5LmZvcmNlIHQpIHN0YWNrXG4gIHwgQmluZCAodCwgaykgLT4gcnVuX2F1eCB0IChrIDo6IHN0YWNrKVxuICB8IFJldHVybiBhIC0+XG4gICAgKG1hdGNoIHN0YWNrIHdpdGhcbiAgICAgfCBbXSAtPiBhXG4gICAgIHwgayA6OiBzdGFjayAtPiBydW5fYXV4IChrIGEpIHN0YWNrKVxuOztcblxubGV0IHJ1biB0ID0gcnVuX2F1eCB0IFtdXG5cbmluY2x1ZGUgTW9uYWQuTWFrZSAoc3RydWN0XG4gIHR5cGUgbm9ucmVjICdhIHQgPSAnYSB0XG5cbiAgbGV0IGJpbmQgPSBiaW5kXG4gIGxldCByZXR1cm4gPSByZXR1cm5cbiAgbGV0IG1hcCA9IGBEZWZpbmVfdXNpbmdfYmluZFxuZW5kKVxuXG5sZXQgYWxsX21hcCAodHlwZSBrIHYpIChtYXAgOiAoaywgdiB0LCAnY21wKSBNYXAudCkgPVxuICBtYXBcbiAgfD4gTWFwLnRvX2FsaXN0XG4gIHw+IExpc3QubWFwIH5mOihmdW4gKGssIHYpIC0+IGJpbmQgdiB+ZjooZnVuIHYgLT4gcmV0dXJuIChrLCB2KSkpXG4gIHw+IGFsbFxuICB8PiBiaW5kIH5mOihmdW4gYWxpc3QgLT4gcmV0dXJuIChNYXAub2ZfYWxpc3RfZXhuIChNYXAuY29tcGFyYXRvcl9zIG1hcCkgYWxpc3QpKVxuOztcblxubW9kdWxlIExldF9zeW50YXggPSBzdHJ1Y3RcbiAgbGV0IHJldHVybiA9IHJldHVyblxuXG4gIG1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0IHJldHVybiA9IHJldHVyblxuICAgIGxldCBiaW5kID0gYmluZFxuICBlbmRcbmVuZFxuIiwib3BlbiBDb3JlLkNvcmVfc3RhYmxlXG5cbm1vZHVsZSBTdGFibGUgPSBzdHJ1Y3RcbiAgbW9kdWxlIFYxID0gc3RydWN0XG4gICAgaW5jbHVkZSBTdHJpbmcuVjFcbiAgZW5kXG5lbmRcblxub3BlbiBTdGFibGVcbm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG50eXBlIGJ1aWxkZXIgPVxuICB7IGNob2ljZXMgOiBpbnQgbGlzdFxuICA7IGRlcHRoIDogaW50XG4gIH1cbltAQGRlcml2aW5nIGNvbXBhcmUsIGJpbl9pb11cblxubGV0IHRvX3N0cmluZyB7IGNob2ljZXM7IGRlcHRoIH0gPVxuICBsZXQgYnVmZmVyID0gQnVmZmVyLmNyZWF0ZSAxMCBpblxuICAobWF0Y2ggY2hvaWNlcyB3aXRoXG4gICB8IFtdIC0+ICgpXG4gICB8IGNob2ljZSA6OiBjaG9pY2VzIC0+XG4gICAgIEJ1ZmZlci5hZGRfc3RyaW5nIGJ1ZmZlciAoSW50LnRvX3N0cmluZyBjaG9pY2UpO1xuICAgICBMaXN0Lml0ZXIgY2hvaWNlcyB+ZjooZnVuIGNob2ljZSAtPlxuICAgICAgIEJ1ZmZlci5hZGRfY2hhciBidWZmZXIgJy0nO1xuICAgICAgIEJ1ZmZlci5hZGRfc3RyaW5nIGJ1ZmZlciAoSW50LnRvX3N0cmluZyBjaG9pY2UpKSk7XG4gIEJ1ZmZlci5hZGRfY2hhciBidWZmZXIgJ18nO1xuICBCdWZmZXIuYWRkX3N0cmluZyBidWZmZXIgKEludC50b19zdHJpbmcgZGVwdGgpO1xuICBCdWZmZXIuY29udGVudHMgYnVmZmVyXG47O1xuXG5sZXQgZW1wdHkgPSB7IGNob2ljZXMgPSBbXTsgZGVwdGggPSAwIH1cbmxldCBjaG9pY2VfcG9pbnQgdCBuID0geyBjaG9pY2VzID0gdC5jaG9pY2VzIEAgWyBuIF07IGRlcHRoID0gMCB9XG5sZXQgZGVzY2VuZCB0ID0geyB0IHdpdGggZGVwdGggPSB0LmRlcHRoICsgMSB9XG5cbmxldCV0ZXN0X21vZHVsZSBfID1cbiAgKG1vZHVsZSBzdHJ1Y3RcbiAgICBsZXQgdGVzdCB0ID1cbiAgICAgIGxldCBzID0gdG9fc3RyaW5nIHQgaW5cbiAgICAgIHByaW50X2VuZGxpbmUgc1xuICAgIDs7XG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICB0ZXN0IHsgY2hvaWNlcyA9IFsgMTsgMjsgMjsgMTsgMCBdOyBkZXB0aCA9IDAgfTtcbiAgICAgIFslZXhwZWN0IHt8IDEtMi0yLTEtMF8wIHx9XVxuICAgIDs7XG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICB0ZXN0IHsgY2hvaWNlcyA9IFtdOyBkZXB0aCA9IDEgfTtcbiAgICAgIFslZXhwZWN0IHt8IF8xIHx9XVxuICAgIDs7XG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICB0ZXN0IGVtcHR5O1xuICAgICAgWyVleHBlY3Qge3wgXzAgfH1dXG4gICAgOztcblxuICAgIGxldCVleHBlY3RfdGVzdCBfID1cbiAgICAgIHRlc3QgeyBjaG9pY2VzID0gWyAzMCBdOyBkZXB0aCA9IDEgfTtcbiAgICAgIFslZXhwZWN0IHt8IDMwXzEgfH1dXG4gICAgOztcbiAgZW5kKVxuOztcblxubGV0IGZpbmFsaXplIGJ1aWxkZXIgPSB0b19zdHJpbmcgYnVpbGRlclxuXG5tb2R1bGUgVCA6IHNpZ1xuICB0eXBlIHQgPSBWMS50XG4gIHR5cGUgY29tcGFyYXRvcl93aXRuZXNzID0gVjEuY29tcGFyYXRvcl93aXRuZXNzXG5cbiAgaW5jbHVkZSBTZXhwYWJsZS5TIHdpdGggdHlwZSB0IDo9IHRcbiAgaW5jbHVkZSBCaW5hYmxlLlMgd2l0aCB0eXBlIHQgOj0gdFxuXG4gIGluY2x1ZGVcbiAgICBDb21wYXJhYmxlLlNfYmluYWJsZVxuICAgICAgd2l0aCB0eXBlIHQgOj0gdFxuICAgICAgIGFuZCB0eXBlIGNvbXBhcmF0b3Jfd2l0bmVzcyA6PSBjb21wYXJhdG9yX3dpdG5lc3NcblxuICBpbmNsdWRlIFN0cmluZ2FibGUuUyB3aXRoIHR5cGUgdCA6PSB0XG5lbmQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBTdHJpbmdcbmVuZFxuXG5pbmNsdWRlIFRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgVmFyX2Zyb21fcGFyZW50ID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgfCBOb25lXG4gICAgfCBPbmUgb2YgVHlwZV9lcXVhbC5JZC5VaWQudFxuICAgIHwgVHdvIG9mIFR5cGVfZXF1YWwuSWQuVWlkLnQgKiBUeXBlX2VxdWFsLklkLlVpZC50XG5lbmRcblxubW9kdWxlIEZvcl92YWx1ZSA9IHN0cnVjdFxuICB0eXBlICdmcm9tX3BhcmVudCBjb250ZXh0ID1cbiAgICB7IHJlY3Vyc2UgOiAnYS4gJ2Zyb21fcGFyZW50IC0+ICdhIFZhbHVlLnQgLT4gJ2EgVmFsdWUudFxuICAgIDsgdmFyX2Zyb21fcGFyZW50IDogVmFyX2Zyb21fcGFyZW50LnRcbiAgICA7IHBhcmVudF9wYXRoIDogTm9kZV9wYXRoLnQgTGF6eS50XG4gICAgOyBjdXJyZW50X3BhdGggOiBOb2RlX3BhdGgudCBMYXp5LnRcbiAgICB9XG5cbiAgdHlwZSAnZnJvbV9wYXJlbnQgdXNlcl9tYXBwZXIgPVxuICAgIHsgZiA6ICdhLiAnZnJvbV9wYXJlbnQgY29udGV4dCAtPiAnZnJvbV9wYXJlbnQgLT4gJ2EgVmFsdWUudCAtPiAnYSBWYWx1ZS50IH1cblxuICBsZXQgcmVjIGRlc2NlbmRcbiAgICA6IHR5cGUgYS5cbiAgICAgIGY6J2Zyb21fcGFyZW50IHVzZXJfbWFwcGVyXG4gICAgICAtPiB2YXJfZnJvbV9wYXJlbnQ6VmFyX2Zyb21fcGFyZW50LnRcbiAgICAgIC0+IGFwcGVuZF90bzpOb2RlX3BhdGguYnVpbGRlclxuICAgICAgLT4gJ2Zyb21fcGFyZW50XG4gICAgICAtPiBhIFZhbHVlLnRcbiAgICAgIC0+IGEgVmFsdWUudFxuICAgID1cbiAgICBmdW4gfmYgfnZhcl9mcm9tX3BhcmVudCB+YXBwZW5kX3RvIHBhcmVudCB7IHZhbHVlOyBoZXJlOyBpZCB9IC0+XG4gICAgbGV0IGN1cnJlbnRfcGF0aCA9IE5vZGVfcGF0aC5kZXNjZW5kIGFwcGVuZF90byBpblxuICAgIGxldCBtYXAgbiB2ID1cbiAgICAgIGxldCBhcHBlbmRfdG8gPSBOb2RlX3BhdGguY2hvaWNlX3BvaW50IGN1cnJlbnRfcGF0aCBuIGluXG4gICAgICBsZXQgY2hpbGRfcGF0aCA9IE5vZGVfcGF0aC5kZXNjZW5kIGFwcGVuZF90byBpblxuICAgICAgZi5mXG4gICAgICAgIHsgcmVjdXJzZSA9IChmdW4gcGFyZW50IHYgLT4gZGVzY2VuZCB+ZiB+dmFyX2Zyb21fcGFyZW50Ok5vbmUgfmFwcGVuZF90byBwYXJlbnQgdilcbiAgICAgICAgOyB2YXJfZnJvbV9wYXJlbnRcbiAgICAgICAgOyBwYXJlbnRfcGF0aCA9IGxhenkgKE5vZGVfcGF0aC5maW5hbGl6ZSBjdXJyZW50X3BhdGgpXG4gICAgICAgIDsgY3VycmVudF9wYXRoID0gbGF6eSAoTm9kZV9wYXRoLmZpbmFsaXplIGNoaWxkX3BhdGgpXG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50XG4gICAgICAgIHZcbiAgICBpblxuICAgIGxldCB2YWx1ZSA9XG4gICAgICBtYXRjaCB2YWx1ZSB3aXRoXG4gICAgICB8IENvbnN0YW50IF8gLT4gdmFsdWVcbiAgICAgIHwgRXhjZXB0aW9uIF8gLT4gdmFsdWVcbiAgICAgIHwgSW5jciBfIC0+IHZhbHVlXG4gICAgICB8IE5hbWVkIF8gLT4gdmFsdWVcbiAgICAgIHwgQm90aCAoYSwgYikgLT4gQm90aCAobWFwIDEgYSwgbWFwIDIgYilcbiAgICAgIHwgQ3V0b2ZmIHQgLT4gQ3V0b2ZmIHsgdCB3aXRoIHQgPSBtYXAgMSB0LnQgfVxuICAgICAgfCBNYXAgdCAtPiBNYXAgeyBmID0gdC5mOyB0ID0gbWFwIDEgdC50IH1cbiAgICAgIHwgTWFwMiB0IC0+IE1hcDIgeyBmID0gdC5mOyB0MSA9IG1hcCAxIHQudDE7IHQyID0gbWFwIDIgdC50MiB9XG4gICAgICB8IE1hcDMgdCAtPiBNYXAzIHsgZiA9IHQuZjsgdDEgPSBtYXAgMSB0LnQxOyB0MiA9IG1hcCAyIHQudDI7IHQzID0gbWFwIDMgdC50MyB9XG4gICAgICB8IE1hcDQgdCAtPlxuICAgICAgICBNYXA0XG4gICAgICAgICAgeyBmID0gdC5mOyB0MSA9IG1hcCAxIHQudDE7IHQyID0gbWFwIDIgdC50MjsgdDMgPSBtYXAgMyB0LnQzOyB0NCA9IG1hcCA0IHQudDQgfVxuICAgICAgfCBNYXA1IHQgLT5cbiAgICAgICAgTWFwNVxuICAgICAgICAgIHsgZiA9IHQuZlxuICAgICAgICAgIDsgdDEgPSBtYXAgMSB0LnQxXG4gICAgICAgICAgOyB0MiA9IG1hcCAyIHQudDJcbiAgICAgICAgICA7IHQzID0gbWFwIDMgdC50M1xuICAgICAgICAgIDsgdDQgPSBtYXAgNCB0LnQ0XG4gICAgICAgICAgOyB0NSA9IG1hcCA1IHQudDVcbiAgICAgICAgICB9XG4gICAgICB8IE1hcDYgdCAtPlxuICAgICAgICBNYXA2XG4gICAgICAgICAgeyBmID0gdC5mXG4gICAgICAgICAgOyB0MSA9IG1hcCAxIHQudDFcbiAgICAgICAgICA7IHQyID0gbWFwIDIgdC50MlxuICAgICAgICAgIDsgdDMgPSBtYXAgMyB0LnQzXG4gICAgICAgICAgOyB0NCA9IG1hcCA0IHQudDRcbiAgICAgICAgICA7IHQ1ID0gbWFwIDUgdC50NVxuICAgICAgICAgIDsgdDYgPSBtYXAgNiB0LnQ2XG4gICAgICAgICAgfVxuICAgICAgfCBNYXA3IHQgLT5cbiAgICAgICAgTWFwN1xuICAgICAgICAgIHsgZiA9IHQuZlxuICAgICAgICAgIDsgdDEgPSBtYXAgMSB0LnQxXG4gICAgICAgICAgOyB0MiA9IG1hcCAyIHQudDJcbiAgICAgICAgICA7IHQzID0gbWFwIDMgdC50M1xuICAgICAgICAgIDsgdDQgPSBtYXAgNCB0LnQ0XG4gICAgICAgICAgOyB0NSA9IG1hcCA1IHQudDVcbiAgICAgICAgICA7IHQ2ID0gbWFwIDYgdC50NlxuICAgICAgICAgIDsgdDcgPSBtYXAgNyB0LnQ3XG4gICAgICAgICAgfVxuICAgIGluXG4gICAgeyB2YWx1ZTsgaGVyZTsgaWQgfVxuICA7O1xuXG4gIGxldCBtYXAgfmYgfnZhcl9mcm9tX3BhcmVudCB+cGFyZW50X3BhdGggfmFwcGVuZF90byBwYXJlbnQgdiA9XG4gICAgbGV0IGN1cnJlbnRfcGF0aCA9IE5vZGVfcGF0aC5kZXNjZW5kIGFwcGVuZF90byBpblxuICAgIGYuZlxuICAgICAgeyByZWN1cnNlID0gKGZ1biBwYXJlbnQgdiAtPiBkZXNjZW5kIH5mIH52YXJfZnJvbV9wYXJlbnQ6Tm9uZSB+YXBwZW5kX3RvIHBhcmVudCB2KVxuICAgICAgOyB2YXJfZnJvbV9wYXJlbnRcbiAgICAgIDsgcGFyZW50X3BhdGhcbiAgICAgIDsgY3VycmVudF9wYXRoID0gbGF6eSAoTm9kZV9wYXRoLmZpbmFsaXplIGN1cnJlbnRfcGF0aClcbiAgICAgIH1cbiAgICAgIHBhcmVudFxuICAgICAgdlxuICA7O1xuXG4gIGxldCBpZCA9IHsgZiA9IChmdW4geyByZWN1cnNlOyBfIH0gZnJvbV9wYXJlbnQgdmFsdWUgLT4gcmVjdXJzZSBmcm9tX3BhcmVudCB2YWx1ZSkgfVxuZW5kXG5cbm1vZHVsZSBGb3JfY29tcHV0YXRpb24gPSBzdHJ1Y3RcbiAgdHlwZSAnZnJvbV9wYXJlbnQgY29udGV4dCA9XG4gICAgeyByZWN1cnNlIDogJ3Jlc3VsdC4gJ2Zyb21fcGFyZW50IC0+ICdyZXN1bHQgQ29tcHV0YXRpb24udCAtPiAncmVzdWx0IENvbXB1dGF0aW9uLnRcbiAgICA7IHZhcl9mcm9tX3BhcmVudCA6IFZhcl9mcm9tX3BhcmVudC50XG4gICAgOyBwYXJlbnRfcGF0aCA6IE5vZGVfcGF0aC50IExhenkudFxuICAgIDsgY3VycmVudF9wYXRoIDogTm9kZV9wYXRoLnQgTGF6eS50XG4gICAgfVxuXG4gIHR5cGUgJ2Zyb21fcGFyZW50IHVzZXJfbWFwcGVyID1cbiAgICB7IGYgOlxuICAgICAgICAncmVzdWx0LlxuICAgICAgICAnZnJvbV9wYXJlbnQgY29udGV4dFxuICAgICAgICAtPiAnZnJvbV9wYXJlbnRcbiAgICAgICAgLT4gJ3Jlc3VsdCBDb21wdXRhdGlvbi50XG4gICAgICAgIC0+ICdyZXN1bHQgQ29tcHV0YXRpb24udFxuICAgIH1cblxuICBsZXQgcmVjIGRlc2NlbmRcbiAgICA6IHR5cGUgcmVzdWx0LlxuICAgICAgZjonZnJvbV9wYXJlbnQgdXNlcl9tYXBwZXJcbiAgICAgIC0+IGZvcl92YWx1ZTonYSBGb3JfdmFsdWUudXNlcl9tYXBwZXJcbiAgICAgIC0+IGFwcGVuZF90bzpOb2RlX3BhdGguYnVpbGRlclxuICAgICAgLT4gJ2Zyb21fcGFyZW50XG4gICAgICAtPiByZXN1bHQgQ29tcHV0YXRpb24udFxuICAgICAgLT4gcmVzdWx0IENvbXB1dGF0aW9uLnRcbiAgICA9XG4gICAgZnVuIH5mIH5mb3JfdmFsdWUgfmFwcGVuZF90byBwYXJlbnQgKGNvbXB1dGF0aW9uIDogXyBDb21wdXRhdGlvbi50KSAtPlxuICAgIGxldCBjdXJyZW50X3BhdGggPSBOb2RlX3BhdGguZGVzY2VuZCBhcHBlbmRfdG8gaW5cbiAgICBsZXQgbWFwID8odmFyX2Zyb21fcGFyZW50ID0gVmFyX2Zyb21fcGFyZW50Lk5vbmUpID9jaG9pY2UgYyA9XG4gICAgICBsZXQgYXBwZW5kX3RvID1cbiAgICAgICAgbWF0Y2ggY2hvaWNlIHdpdGhcbiAgICAgICAgfCBTb21lIGNob2ljZSAtPiBOb2RlX3BhdGguY2hvaWNlX3BvaW50IGN1cnJlbnRfcGF0aCBjaG9pY2VcbiAgICAgICAgfCBOb25lIC0+IGN1cnJlbnRfcGF0aFxuICAgICAgaW5cbiAgICAgIGxldCBjaGlsZF9wYXRoID0gTm9kZV9wYXRoLmRlc2NlbmQgYXBwZW5kX3RvIGluXG4gICAgICBmLmZcbiAgICAgICAgeyByZWN1cnNlID0gKGZ1biBwYXJlbnQgYyAtPiBkZXNjZW5kIH5mIH5mb3JfdmFsdWUgfmFwcGVuZF90byBwYXJlbnQgYylcbiAgICAgICAgOyB2YXJfZnJvbV9wYXJlbnRcbiAgICAgICAgOyBwYXJlbnRfcGF0aCA9IGxhenkgKE5vZGVfcGF0aC5maW5hbGl6ZSBjdXJyZW50X3BhdGgpXG4gICAgICAgIDsgY3VycmVudF9wYXRoID0gbGF6eSAoTm9kZV9wYXRoLmZpbmFsaXplIGNoaWxkX3BhdGgpXG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50XG4gICAgICAgIGNcbiAgICBpblxuICAgIGxldCBtYXBfdmFsdWUgPyh2YXJfZnJvbV9wYXJlbnQgPSBWYXJfZnJvbV9wYXJlbnQuTm9uZSkgP2Nob2ljZSB2ID1cbiAgICAgIGxldCBhcHBlbmRfdG8gPVxuICAgICAgICBtYXRjaCBjaG9pY2Ugd2l0aFxuICAgICAgICB8IFNvbWUgY2hvaWNlIC0+IE5vZGVfcGF0aC5jaG9pY2VfcG9pbnQgY3VycmVudF9wYXRoIGNob2ljZVxuICAgICAgICB8IE5vbmUgLT4gY3VycmVudF9wYXRoXG4gICAgICBpblxuICAgICAgRm9yX3ZhbHVlLm1hcFxuICAgICAgICB+Zjpmb3JfdmFsdWVcbiAgICAgICAgfnZhcl9mcm9tX3BhcmVudFxuICAgICAgICB+cGFyZW50X3BhdGg6KGxhenkgKE5vZGVfcGF0aC5maW5hbGl6ZSBjdXJyZW50X3BhdGgpKVxuICAgICAgICB+YXBwZW5kX3RvXG4gICAgICAgIHBhcmVudFxuICAgICAgICB2XG4gICAgaW5cbiAgICBtYXRjaCBjb21wdXRhdGlvbiB3aXRoXG4gICAgfCBSZXR1cm4gdmFsdWUgLT4gUmV0dXJuIChtYXBfdmFsdWUgdmFsdWUpXG4gICAgfCBMZWFmMSB0IC0+IExlYWYxIHsgdCB3aXRoIGlucHV0ID0gbWFwX3ZhbHVlIHQuaW5wdXQgfVxuICAgIHwgTGVhZjAgXyAtPiBjb21wdXRhdGlvblxuICAgIHwgTGVhZl9pbmNyIHQgLT4gTGVhZl9pbmNyIHsgdCB3aXRoIGlucHV0ID0gbWFwX3ZhbHVlIHQuaW5wdXQgfVxuICAgIHwgU3ViIHQgLT5cbiAgICAgIGxldCBmcm9tID0gbWFwIH52YXJfZnJvbV9wYXJlbnQ6KE9uZSAoVHlwZV9lcXVhbC5JZC51aWQgdC52aWEpKSB+Y2hvaWNlOjEgdC5mcm9tIGluXG4gICAgICBsZXQgaW50byA9IG1hcCB+Y2hvaWNlOjIgdC5pbnRvIGluXG4gICAgICBTdWIgeyB0IHdpdGggZnJvbTsgaW50byB9XG4gICAgfCBTdG9yZSB0IC0+XG4gICAgICBsZXQgdmFsdWUgPVxuICAgICAgICBtYXBfdmFsdWUgfnZhcl9mcm9tX3BhcmVudDooT25lIChUeXBlX2VxdWFsLklkLnVpZCB0LmlkKSkgfmNob2ljZToxIHQudmFsdWVcbiAgICAgIGluXG4gICAgICBsZXQgaW5uZXIgPSBtYXAgfmNob2ljZToyIHQuaW5uZXIgaW5cbiAgICAgIFN0b3JlIHsgdCB3aXRoIHZhbHVlOyBpbm5lciB9XG4gICAgfCBGZXRjaCBfIC0+IGNvbXB1dGF0aW9uXG4gICAgfCBBc3NvYyB0IC0+XG4gICAgICBBc3NvY1xuICAgICAgICB7IHQgd2l0aFxuICAgICAgICAgIG1hcCA9IG1hcF92YWx1ZSB+Y2hvaWNlOjEgdC5tYXBcbiAgICAgICAgOyBieSA9XG4gICAgICAgICAgICBtYXBcbiAgICAgICAgICAgICAgfnZhcl9mcm9tX3BhcmVudDpcbiAgICAgICAgICAgICAgICAoVHdvIChUeXBlX2VxdWFsLklkLnVpZCB0LmtleV9pZCwgVHlwZV9lcXVhbC5JZC51aWQgdC5kYXRhX2lkKSlcbiAgICAgICAgICAgICAgfmNob2ljZToyXG4gICAgICAgICAgICAgIHQuYnlcbiAgICAgICAgfVxuICAgIHwgQXNzb2Nfb24gdCAtPlxuICAgICAgQXNzb2Nfb25cbiAgICAgICAgeyB0IHdpdGhcbiAgICAgICAgICBtYXAgPSBtYXBfdmFsdWUgfmNob2ljZToxIHQubWFwXG4gICAgICAgIDsgYnkgPVxuICAgICAgICAgICAgbWFwXG4gICAgICAgICAgICAgIH52YXJfZnJvbV9wYXJlbnQ6XG4gICAgICAgICAgICAgICAgKFR3byAoVHlwZV9lcXVhbC5JZC51aWQgdC5pb19rZXlfaWQsIFR5cGVfZXF1YWwuSWQudWlkIHQuZGF0YV9pZCkpXG4gICAgICAgICAgICAgIH5jaG9pY2U6MlxuICAgICAgICAgICAgICB0LmJ5XG4gICAgICAgIH1cbiAgICB8IEFzc29jX3NpbXBsIHQgLT4gQXNzb2Nfc2ltcGwgeyB0IHdpdGggbWFwID0gbWFwX3ZhbHVlIHQubWFwIH1cbiAgICB8IFN3aXRjaCB7IG1hdGNoXzsgYXJtczsgaGVyZSB9IC0+XG4gICAgICBsZXQgaW5kZXggPSByZWYgMSBpblxuICAgICAgbGV0IG1hdGNoXyA9IG1hcF92YWx1ZSB+Y2hvaWNlOiFpbmRleCBtYXRjaF8gaW5cbiAgICAgIGxldCBhcm1zID1cbiAgICAgICAgTWFwLm1hcCBhcm1zIH5mOihmdW4gYyAtPlxuICAgICAgICAgIGluY3IgaW5kZXg7XG4gICAgICAgICAgbWFwIH5jaG9pY2U6IWluZGV4IGMpXG4gICAgICBpblxuICAgICAgU3dpdGNoIHsgbWF0Y2hfOyBhcm1zOyBoZXJlIH1cbiAgICB8IExhenkgdCAtPiBMYXp5IChMYXp5Lm1hcCB0IH5mOm1hcClcbiAgICB8IFdyYXAgKHsgbW9kZWxfaWQ7IGluamVjdF9pZDsgaW5uZXI7IF8gfSBhcyB0KSAtPlxuICAgICAgV3JhcFxuICAgICAgICB7IHQgd2l0aFxuICAgICAgICAgIGlubmVyID1cbiAgICAgICAgICAgIG1hcFxuICAgICAgICAgICAgICB+dmFyX2Zyb21fcGFyZW50OlxuICAgICAgICAgICAgICAgIChUd28gKFR5cGVfZXF1YWwuSWQudWlkIG1vZGVsX2lkLCBUeXBlX2VxdWFsLklkLnVpZCBpbmplY3RfaWQpKVxuICAgICAgICAgICAgICBpbm5lclxuICAgICAgICB9XG4gICAgfCBXaXRoX21vZGVsX3Jlc2V0dGVyIHsgaW5uZXI7IHJlc2V0X2lkIH0gLT5cbiAgICAgIFdpdGhfbW9kZWxfcmVzZXR0ZXIgeyBpbm5lciA9IG1hcCBpbm5lcjsgcmVzZXRfaWQgfVxuICAgIHwgUGF0aCAtPiBjb21wdXRhdGlvblxuICAgIHwgTGlmZWN5Y2xlIHQgLT4gTGlmZWN5Y2xlIChtYXBfdmFsdWUgdClcbiAgOztcblxuICBsZXQgaWQgPVxuICAgIHsgZiA9IChmdW4geyByZWN1cnNlOyBfIH0gZnJvbV9wYXJlbnQgY29tcHV0YXRpb24gLT4gcmVjdXJzZSBmcm9tX3BhcmVudCBjb21wdXRhdGlvbilcbiAgICB9XG4gIDs7XG5lbmRcblxubGV0IG1hcCB+Y29tcHV0YXRpb25fbWFwcGVyIH52YWx1ZV9tYXBwZXIgfmluaXQgY29tcHV0YXRpb24gPVxuICBsZXQgY3VycmVudF9wYXRoID0gTm9kZV9wYXRoLmRlc2NlbmQgTm9kZV9wYXRoLmVtcHR5IGluXG4gIGxldCBwYXJlbnRfcGF0aCA9IE5vZGVfcGF0aC5lbXB0eSBpblxuICBsZXQgYXBwZW5kX3RvID0gTm9kZV9wYXRoLmVtcHR5IGluXG4gIGxldCBvcGVuIEZvcl9jb21wdXRhdGlvbiBpblxuICAoY29tcHV0YXRpb25fbWFwcGVyIDogXyB1c2VyX21hcHBlcikuZlxuICAgIHsgcmVjdXJzZSA9XG4gICAgICAgIChmdW4gcGFyZW50IGMgLT5cbiAgICAgICAgICBkZXNjZW5kIH5mOmNvbXB1dGF0aW9uX21hcHBlciB+Zm9yX3ZhbHVlOnZhbHVlX21hcHBlciB+YXBwZW5kX3RvIHBhcmVudCBjKVxuICAgIDsgdmFyX2Zyb21fcGFyZW50ID0gTm9uZVxuICAgIDsgcGFyZW50X3BhdGggPSBsYXp5IChOb2RlX3BhdGguZmluYWxpemUgcGFyZW50X3BhdGgpXG4gICAgOyBjdXJyZW50X3BhdGggPSBsYXp5IChOb2RlX3BhdGguZmluYWxpemUgY3VycmVudF9wYXRoKVxuICAgIH1cbiAgICBpbml0XG4gICAgY29tcHV0YXRpb25cbjs7XG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxubW9kdWxlIHR5cGUgVXAgPSBzaWdcbiAgKCoqIFZhbHVlcyBvZiB0eXBlIFtVcC50XSBhcmUgcGFzc2VkIGZyb20gY2hpbGQgdG8gcGFyZW50IGR1cmluZyBhIHRyYW5zZm9ybWF0aW9uLlxuICAgICAgRm9yIHRyYW5zZm9ybWF0aW9ucyB0aGF0IHVzZSB0aGUgZmFsbGJhY2sgXCJza2lwcGluZy1vdmVyXCIgcmVjdXJzaW9uLCB0aGUgZGVmYXVsdFxuICAgICAgdHJhbnNmb3JtZXIgbmVlZHMgdG8ga25vdyBob3cgdG8gYWxsb2NhdGUgZW1wdHkgW1VwLnRdIHZhbHVlcywgYW5kIGNvbWJpbmUgW1VwLnRdXG4gICAgICBmb3IgY29tcHV0YXRpb25zIHRoYXQgaGF2ZSBtb3JlIHRoYW4gb25lIGNoaWxkLiAqKVxuXG4gIHR5cGUgdFxuXG4gIHZhbCBjb21iaW5lIDogdCAtPiB0IC0+IHRcbiAgdmFsIGVtcHR5IDogdFxuXG4gICgqKiBbQ29tcHV0YXRpb24ubGF6eV0gaXMgYW4gb2JzdGFjbGUgdG8gb3B0aW1pemF0aW9uIGluIG1hbnkgY2FzZXMuICBUbyBmb3JjZVxuICAgICAgb3B0aW1pemF0aW9uIGF1dGhvcnMgdG8gdGhpbmsgYWJvdXQgW2xhenldLCB3ZSBoYXZlIGEgc3BlY2lhbCBlbXB0eSB2YWx1ZS5cblxuICAgICAgT3B0aW1pemF0aW9ucyBnZXQgYXBwbGllZCB0byBbQ29tcHV0YXRpb24ubGF6eV0gd2hlbiBpdCBpcyBmb3JjZWQsIHJhdGhlclxuICAgICAgdGhhbiBpbW1lZGlhdGVseS4gVGh1cywgd2UgdXNlIGEgY29uc3RhbnQsIFtlbXB0eV9mb3JfbGF6eV0sIGFzIHRoZSB2YWx1ZVxuICAgICAgdGhhdCBpcyBwYXNzZWQgYmFjayB0byB0aGUgcGFyZW50IGNvbXB1dGF0aW9uLiAqKVxuICB2YWwgZW1wdHlfZm9yX2xhenkgOiB0XG5lbmRcblxubW9kdWxlIHR5cGUgVHlwZXMgPSBzaWdcbiAgKCoqIFZhbHVlcyBvZiB0eXBlIFtEb3duLnRdIGFyZSBwYXNzZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQgZHVyaW5nIGEgdHJhbnNmb3JtYXRpb24uICopXG4gIG1vZHVsZSBEb3duIDogVFxuXG4gICgqKiBWYWx1ZXMgb2YgdHlwZSBbQWNjLnRdIGFyZSB0aHJlYWRlZCB0aHJvdWdoIHRoZSBjb21wdXRhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGluIGFcbiAgICAgIGRlcHRoLWZpcnN0IG1hbm5lci4gKilcbiAgbW9kdWxlIEFjYyA6IFRcblxuICBtb2R1bGUgVXAgOiBVcFxuZW5kXG5cbm1vZHVsZSBVbml0IDogVXAgd2l0aCB0eXBlIHQgPSB1bml0ID0gc3RydWN0XG4gIHR5cGUgdCA9IHVuaXRcblxuICBsZXQgY29tYmluZSAoKSAoKSA9ICgpXG4gIGxldCBlbXB0eSA9ICgpXG4gIGxldCBlbXB0eV9mb3JfbGF6eSA9ICgpXG5lbmRcblxubW9kdWxlIHR5cGUgUmVjdXJzZSA9IHNpZ1xuICAoKiogQSBtb2R1bGUgd2l0aCBzaWduYXR1cmUgW1JlY3Vyc2VdIGlzIHBhc3NlZCB0byB0aGUgdHJhbnNmb3JtYXRpb24gaW1wbGVtZW50YXRpb24uICBVc2VcbiAgICAgIG9mIHZhbHVlcyBpbiB0aGlzIG1vZHVsZSBpcyBuZWNlc3NhcnkgZm9yIHRoZSB0cmFuc2Zvcm1hdGlvbiB0byByZWN1cnNlLiAgVGhlIG1haW5cbiAgICAgIHZhbHVlIHRoYXQgdGhpcyBBUEkgcHJvdmlkZXMgaXMgdGhhdCBpdCBhbGxvd3MgdHJhbnNmb3JtYXRpb24gYXV0aG9ycyB0byBza2lwXG4gICAgICBjb21wdXRhdGlvbiBjb25zdHJ1Y3RvcnMgdGhhdCB0aGV5IGNhbid0IGRvIGFueXRoaW5nIGZvciwgd2hpbGUgc3RpbGwgYXBwbHlpbmcgdGhlaXJcbiAgICAgIHRyYW5zZm9ybWF0aW9uIHRvIGNoaWxkcmVuIG9mIHRoYXQgbm9kZS4gKilcblxuICBtb2R1bGUgVHlwZXMgOiBUeXBlc1xuXG4gICgqKiBbb25fY29tcHV0YXRpb25dIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGEgdXNlciBvZiB0aGUgdHJhbnNmb3JtIEFQSSBtdXN0IGNhbGwgdG9cbiAgICAgIHJlY3Vyc2l2ZWx5IHRyYW5zZm9ybSBhIGNvbXB1dGF0aW9uLiAgVGhlIG1haW4gZmVhdHVyZSBvZiBpdCBpcyB0aGUgYWJpbGl0eSBmb3IgdGhlXG4gICAgICBjYWxsZXIgdG8gc2tpcCBhcHBseWluZyB0aGVpciB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgcHJvdmlkZWQgbm9kZSwgd2hpbGUgc3RpbGxcbiAgICAgIGFwcGx5aW5nIGl0IHRvIHRoZSBjaGlsZHJlbiBvZiB0aGF0IG5vZGUuIFRoaXMgYmVoYXZpb3IgaXMgcHJvZHVjZWQgYnkgcHJvdmlkaW5nXG4gICAgICBbYFNraXBwaW5nX292ZXJdIHRvIHRoZSBmdW5jdGlvbiwgd2hpbGUgW2BEaXJlY3RseV9vbl0gd2lsbCBydW4gdGhlIHVzZXJzXG4gICAgICB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgbm9kZS4gKilcbiAgdmFsIG9uX2NvbXB1dGF0aW9uXG4gICAgOiAgVHlwZXMuRG93bi50XG4gICAgLT4gVHlwZXMuQWNjLnRcbiAgICAtPiBbIGBEaXJlY3RseV9vbiB8IGBTa2lwcGluZ19vdmVyIF1cbiAgICAtPiAnYSBDb21wdXRhdGlvbi50XG4gICAgLT4gKFR5cGVzLkFjYy50ICogVHlwZXMuVXAudCAqICdhIENvbXB1dGF0aW9uLnQpIFRyYW1wb2xpbmUudFxuXG4gICgqKiBMaWtlIFtvbl9jb21wdXRhdGlvbl0sIGJ1dCBmb3IgdmFsdWVzIGluc3RlYWQuICopXG4gIHZhbCBvbl92YWx1ZVxuICAgIDogIFR5cGVzLkRvd24udFxuICAgIC0+IFR5cGVzLkFjYy50XG4gICAgLT4gWyBgRGlyZWN0bHlfb24gfCBgU2tpcHBpbmdfb3ZlciBdXG4gICAgLT4gJ2EgVmFsdWUudFxuICAgIC0+IFR5cGVzLkFjYy50ICogVHlwZXMuVXAudCAqICdhIFZhbHVlLnRcbmVuZFxuXG5tb2R1bGUgdHlwZSBUcmFuc2Zvcm0gPSBzaWdcbiAgbW9kdWxlIFR5cGVzIDogVHlwZXNcblxuICB2YWwgdHJhbnNmb3JtX2NcbiAgICA6ICBUeXBlcy5Eb3duLnRcbiAgICAtPiBUeXBlcy5BY2MudFxuICAgIC0+ICdhIENvbXB1dGF0aW9uLnRcbiAgICAtPiAoVHlwZXMuQWNjLnQgKiBUeXBlcy5VcC50ICogJ2EgQ29tcHV0YXRpb24udCkgVHJhbXBvbGluZS50XG5cbiAgdmFsIHRyYW5zZm9ybV92XG4gICAgOiAgVHlwZXMuRG93bi50XG4gICAgLT4gVHlwZXMuQWNjLnRcbiAgICAtPiAnYSBWYWx1ZS50XG4gICAgLT4gVHlwZXMuQWNjLnQgKiBUeXBlcy5VcC50ICogJ2EgVmFsdWUudFxuZW5kXG5cbm1vZHVsZSB0eXBlIFMgPSBzaWdcbiAgbW9kdWxlIFVuaXQgPSBVbml0XG5cbiAgbW9kdWxlIHR5cGUgUmVjdXJzZSA9IFJlY3Vyc2VcblxuICBtb2R1bGUgTWFrZVxuICAgIChUeXBlcyA6IFR5cGVzKSAoXyA6IGZ1bmN0b3IgKF8gOiBSZWN1cnNlIHdpdGggbW9kdWxlIFR5cGVzIDo9IFR5cGVzKSAtPlxuICAgICAgVHJhbnNmb3JtIHdpdGggbW9kdWxlIFR5cGVzIDo9IFR5cGVzKSA6IFRyYW5zZm9ybSB3aXRoIG1vZHVsZSBUeXBlcyA6PSBUeXBlc1xuZW5kXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcbmluY2x1ZGUgRml4X3RyYW5zZm9ybV9pbnRmXG5cbm1vZHVsZSBNYWtlXG4gIChUeXBlcyA6IFR5cGVzKSAoRiA6IGZ1bmN0b3IgKF8gOiBSZWN1cnNlIHdpdGggbW9kdWxlIFR5cGVzIDo9IFR5cGVzKSAtPlxuICAgIFRyYW5zZm9ybSB3aXRoIG1vZHVsZSBUeXBlcyA6PSBUeXBlcykgOiBUcmFuc2Zvcm0gd2l0aCBtb2R1bGUgVHlwZXMgOj0gVHlwZXMgPSBzdHJ1Y3RcbiAgbW9kdWxlIHJlYyBSZWN1cnNlIDogKFJlY3Vyc2Ugd2l0aCBtb2R1bGUgVHlwZXMgOj0gVHlwZXMpID0gc3RydWN0XG4gICAgbGV0IGNvbWJpbmVfdXAsIGVtcHR5LCBlbXB0eV9mb3JfbGF6eSA9IFR5cGVzLlVwLihjb21iaW5lLCBlbXB0eSwgZW1wdHlfZm9yX2xhenkpXG5cbiAgICBvcGVuIFRyYW1wb2xpbmUuTGV0X3N5bnRheFxuXG4gICAgbGV0IGRlZmF1bHRfYyAodHlwZSBhKSBkb3duIGFjYyAoY29tcHV0YXRpb24gOiBhIENvbXB1dGF0aW9uLnQpXG4gICAgICA6IChfICogXyAqIGEgQ29tcHV0YXRpb24udCkgVHJhbXBvbGluZS50XG4gICAgICA9XG4gICAgICBtYXRjaCBjb21wdXRhdGlvbiB3aXRoXG4gICAgICB8IFJldHVybiB2YWx1ZSAtPlxuICAgICAgICBsZXQgYWNjLCB1cCwgdmFsdWUgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHZhbHVlIGluXG4gICAgICAgIHJldHVybiAoYWNjLCB1cCwgQ29tcHV0YXRpb24uUmV0dXJuIHZhbHVlKVxuICAgICAgfCBMZWFmMSB7IG1vZGVsOyBpbnB1dF9pZDsgZHluYW1pY19hY3Rpb247IGFwcGx5X2FjdGlvbjsgaW5wdXQ7IHJlc2V0IH0gLT5cbiAgICAgICAgbGV0IGFjYywgdXAsIGlucHV0ID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyBpbnB1dCBpblxuICAgICAgICByZXR1cm5cbiAgICAgICAgICAoIGFjY1xuICAgICAgICAgICwgdXBcbiAgICAgICAgICAsIENvbXB1dGF0aW9uLkxlYWYxXG4gICAgICAgICAgICAgIHsgbW9kZWw7IGlucHV0X2lkOyBkeW5hbWljX2FjdGlvbjsgYXBwbHlfYWN0aW9uOyBpbnB1dDsgcmVzZXQgfSApXG4gICAgICB8IExlYWYwIHsgbW9kZWw7IHN0YXRpY19hY3Rpb247IGFwcGx5X2FjdGlvbjsgcmVzZXQgfSAtPlxuICAgICAgICByZXR1cm5cbiAgICAgICAgICAoYWNjLCBlbXB0eSwgQ29tcHV0YXRpb24uTGVhZjAgeyBtb2RlbDsgc3RhdGljX2FjdGlvbjsgYXBwbHlfYWN0aW9uOyByZXNldCB9KVxuICAgICAgfCBMZWFmX2luY3IgeyBpbnB1dDsgY29tcHV0ZSB9IC0+XG4gICAgICAgIGxldCBhY2MsIHVwLCBpbnB1dCA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgaW5wdXQgaW5cbiAgICAgICAgcmV0dXJuIChhY2MsIHVwLCBDb21wdXRhdGlvbi5MZWFmX2luY3IgeyBpbnB1dDsgY29tcHV0ZSB9KVxuICAgICAgfCBTdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfSAtPlxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwMSwgZnJvbSA9IFVzZXIudHJhbnNmb3JtX2MgZG93biBhY2MgZnJvbSBpblxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwMiwgaW50byA9IFVzZXIudHJhbnNmb3JtX2MgZG93biBhY2MgaW50byBpblxuICAgICAgICByZXR1cm4gKGFjYywgY29tYmluZV91cCB1cDEgdXAyLCBDb21wdXRhdGlvbi5TdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfSlcbiAgICAgIHwgU3RvcmUgeyBpZDsgdmFsdWU7IGlubmVyIH0gLT5cbiAgICAgICAgbGV0IGFjYywgdXAxLCB2YWx1ZSA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdmFsdWUgaW5cbiAgICAgICAgbGV0JWJpbmQgYWNjLCB1cDIsIGlubmVyID0gVXNlci50cmFuc2Zvcm1fYyBkb3duIGFjYyBpbm5lciBpblxuICAgICAgICByZXR1cm4gKGFjYywgY29tYmluZV91cCB1cDEgdXAyLCBDb21wdXRhdGlvbi5TdG9yZSB7IGlkOyB2YWx1ZTsgaW5uZXIgfSlcbiAgICAgIHwgRmV0Y2ggeyBpZDsgZGVmYXVsdDsgZm9yX3NvbWUgfSAtPlxuICAgICAgICByZXR1cm4gKGFjYywgZW1wdHksIENvbXB1dGF0aW9uLkZldGNoIHsgaWQ7IGRlZmF1bHQ7IGZvcl9zb21lIH0pXG4gICAgICB8IEFzc29jIHsgbWFwOyBrZXlfY29tcGFyYXRvcjsga2V5X2lkOyBjbXBfaWQ7IGRhdGFfaWQ7IGJ5IH0gLT5cbiAgICAgICAgbGV0IGFjYywgdXAxLCBtYXAgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIG1hcCBpblxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwMiwgYnkgPSBVc2VyLnRyYW5zZm9ybV9jIGRvd24gYWNjIGJ5IGluXG4gICAgICAgIHJldHVyblxuICAgICAgICAgICggYWNjXG4gICAgICAgICAgLCBjb21iaW5lX3VwIHVwMSB1cDJcbiAgICAgICAgICAsIENvbXB1dGF0aW9uLkFzc29jIHsgbWFwOyBrZXlfY29tcGFyYXRvcjsga2V5X2lkOyBjbXBfaWQ7IGRhdGFfaWQ7IGJ5IH0gKVxuICAgICAgfCBBc3NvY19vbiB0IC0+XG4gICAgICAgIGxldCBhY2MsIHVwMSwgbWFwID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0Lm1hcCBpblxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwMiwgYnkgPSBVc2VyLnRyYW5zZm9ybV9jIGRvd24gYWNjIHQuYnkgaW5cbiAgICAgICAgcmV0dXJuIChhY2MsIGNvbWJpbmVfdXAgdXAxIHVwMiwgQ29tcHV0YXRpb24uQXNzb2Nfb24geyB0IHdpdGggbWFwOyBieSB9KVxuICAgICAgfCBBc3NvY19zaW1wbCB7IG1hcDsgYnk7IG1heV9jb250YWluX3BhdGggfSAtPlxuICAgICAgICBsZXQgYWNjLCB1cCwgbWFwID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyBtYXAgaW5cbiAgICAgICAgcmV0dXJuIChhY2MsIHVwLCBDb21wdXRhdGlvbi5Bc3NvY19zaW1wbCB7IG1hcDsgYnk7IG1heV9jb250YWluX3BhdGggfSlcbiAgICAgIHwgU3dpdGNoIHsgbWF0Y2hfOyBhcm1zOyBoZXJlIH0gLT5cbiAgICAgICAgbGV0IGFjYywgdXAxLCBtYXRjaF8gPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIG1hdGNoXyBpblxuICAgICAgICBsZXQgYWNjX2FuZF91cG5fYW5kX2FybXMgPVxuICAgICAgICAgIGFybXNcbiAgICAgICAgICB8PiBNYXAudG9fYWxpc3RcbiAgICAgICAgICB8PiBMaXN0LmZvbGRcbiAgICAgICAgICAgICAgIH5pbml0OihyZXR1cm4gKGFjYywgdXAxLCBbXSkpXG4gICAgICAgICAgICAgICB+ZjooZnVuIGFjY19hbmRfdXBfYW5kX2FybXMgKGssIHYpIC0+XG4gICAgICAgICAgICAgICAgIGxldCViaW5kIGFjYywgdXAsIGFybXMgPSBhY2NfYW5kX3VwX2FuZF9hcm1zIGluXG4gICAgICAgICAgICAgICAgIGxldCViaW5kIGFjYywgdXAnLCB2ID0gVXNlci50cmFuc2Zvcm1fYyBkb3duIGFjYyB2IGluXG4gICAgICAgICAgICAgICAgIHJldHVybiAoYWNjLCBjb21iaW5lX3VwIHVwIHVwJywgKGssIHYpIDo6IGFybXMpKVxuICAgICAgICBpblxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwbiwgYXJtcyA9IGFjY19hbmRfdXBuX2FuZF9hcm1zIGluXG4gICAgICAgIGxldCBhcm1zID0gTWFwLm9mX2FsaXN0X2V4biAobW9kdWxlIEludCkgYXJtcyBpblxuICAgICAgICByZXR1cm4gKGFjYywgdXBuLCBDb21wdXRhdGlvbi5Td2l0Y2ggeyBtYXRjaF87IGFybXM7IGhlcmUgfSlcbiAgICAgIHwgTGF6eSB0IC0+XG4gICAgICAgIGxldCB0ID1cbiAgICAgICAgICBMYXp5Lm1hcCB0IH5mOihmdW4gdCAtPlxuICAgICAgICAgICAgVHJhbXBvbGluZS5ydW5cbiAgICAgICAgICAgICAgKGxldCViaW5kIF9hY2MsIF91cCwgdCA9IFVzZXIudHJhbnNmb3JtX2MgZG93biBhY2MgdCBpblxuICAgICAgICAgICAgICAgcmV0dXJuIHQpKVxuICAgICAgICBpblxuICAgICAgICByZXR1cm4gKGFjYywgZW1wdHlfZm9yX2xhenksIENvbXB1dGF0aW9uLkxhenkgdClcbiAgICAgIHwgV3JhcFxuICAgICAgICAgIHsgd3JhcHBlcl9tb2RlbFxuICAgICAgICAgIDsgYWN0aW9uX2lkXG4gICAgICAgICAgOyByZXN1bHRfaWRcbiAgICAgICAgICA7IGluamVjdF9pZFxuICAgICAgICAgIDsgbW9kZWxfaWRcbiAgICAgICAgICA7IGlubmVyXG4gICAgICAgICAgOyBkeW5hbWljX2FwcGx5X2FjdGlvblxuICAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgICB9IC0+XG4gICAgICAgIGxldCViaW5kIGFjYywgdXAsIGlubmVyID0gVXNlci50cmFuc2Zvcm1fYyBkb3duIGFjYyBpbm5lciBpblxuICAgICAgICBsZXQgcmVzID1cbiAgICAgICAgICBDb21wdXRhdGlvbi5XcmFwXG4gICAgICAgICAgICB7IHdyYXBwZXJfbW9kZWxcbiAgICAgICAgICAgIDsgYWN0aW9uX2lkXG4gICAgICAgICAgICA7IHJlc3VsdF9pZFxuICAgICAgICAgICAgOyBpbmplY3RfaWRcbiAgICAgICAgICAgIDsgbW9kZWxfaWRcbiAgICAgICAgICAgIDsgaW5uZXJcbiAgICAgICAgICAgIDsgZHluYW1pY19hcHBseV9hY3Rpb25cbiAgICAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgaW5cbiAgICAgICAgcmV0dXJuIChhY2MsIHVwLCByZXMpXG4gICAgICB8IFdpdGhfbW9kZWxfcmVzZXR0ZXIgeyBpbm5lcjsgcmVzZXRfaWQgfSAtPlxuICAgICAgICBsZXQlYmluZCBhY2MsIHVwLCBpbm5lciA9IFVzZXIudHJhbnNmb3JtX2MgZG93biBhY2MgaW5uZXIgaW5cbiAgICAgICAgcmV0dXJuIChhY2MsIHVwLCBDb21wdXRhdGlvbi5XaXRoX21vZGVsX3Jlc2V0dGVyIHsgaW5uZXI7IHJlc2V0X2lkIH0pXG4gICAgICB8IFBhdGggLT4gcmV0dXJuIChhY2MsIGVtcHR5LCBDb21wdXRhdGlvbi5QYXRoKVxuICAgICAgfCBMaWZlY3ljbGUgdmFsdWUgLT5cbiAgICAgICAgbGV0IGFjYywgdXAsIHZhbHVlID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB2YWx1ZSBpblxuICAgICAgICByZXR1cm4gKGFjYywgdXAsIENvbXB1dGF0aW9uLkxpZmVjeWNsZSB2YWx1ZSlcbiAgICA7O1xuXG4gICAgbGV0IHJlZHVjZV91cCBsID0gTGlzdC5yZWR1Y2UgbCB+Zjpjb21iaW5lX3VwIHw+IE9wdGlvbi52YWx1ZSB+ZGVmYXVsdDplbXB0eVxuXG4gICAgbGV0IGRlZmF1bHRfdiAodHlwZSBhKSBkb3duIGFjYyAoeyB2YWx1ZTsgaWQ7IGhlcmUgfSA6IGEgVmFsdWUudCkgOiBfICogXyAqIGEgVmFsdWUudCA9XG4gICAgICBsZXQgYWNjLCB1cCwgdmFsdWUgPVxuICAgICAgICBtYXRjaCB2YWx1ZSB3aXRoXG4gICAgICAgIHwgQ29uc3RhbnQgKGMgOiBhKSAtPiBhY2MsIGVtcHR5LCBWYWx1ZS5Db25zdGFudCBjXG4gICAgICAgIHwgRXhjZXB0aW9uIChlIDogZXhuKSAtPiBhY2MsIGVtcHR5LCBFeGNlcHRpb24gZVxuICAgICAgICB8IEluY3IgaW5jcl9ub2RlIC0+IGFjYywgZW1wdHksIEluY3IgaW5jcl9ub2RlXG4gICAgICAgIHwgTmFtZWQgKG5hbWVfc291cmNlIDogVmFsdWUuTmFtZV9zb3VyY2UudCkgLT4gYWNjLCBlbXB0eSwgTmFtZWQgbmFtZV9zb3VyY2VcbiAgICAgICAgfCBCb3RoIChhLCBiKSAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwX2EsIGEgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIGEgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cF9iLCBiID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyBiIGluXG4gICAgICAgICAgYWNjLCBjb21iaW5lX3VwIHVwX2EgdXBfYiwgQm90aCAoYSwgYilcbiAgICAgICAgfCBDdXRvZmYgdCAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwLCB2YWx1ZSA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50IGluXG4gICAgICAgICAgKCBhY2NcbiAgICAgICAgICAsIHVwXG4gICAgICAgICAgLCBDdXRvZmZcbiAgICAgICAgICAgICAgeyBlcXVhbCA9IHQuZXF1YWw7IHQgPSB2YWx1ZTsgYWRkZWRfYnlfbGV0X3N5bnRheCA9IHQuYWRkZWRfYnlfbGV0X3N5bnRheCB9XG4gICAgICAgICAgKVxuICAgICAgICB8IE1hcCB0IC0+XG4gICAgICAgICAgbGV0IGFjYywgdXAsIHZhbHVlID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQgaW5cbiAgICAgICAgICBhY2MsIHVwLCBNYXAgeyBmID0gdC5mOyB0ID0gdmFsdWUgfVxuICAgICAgICB8IE1hcDIgdCAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwMSwgdDEgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDEgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDIsIHQyID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQyIGluXG4gICAgICAgICAgYWNjLCByZWR1Y2VfdXAgWyB1cDE7IHVwMiBdLCBNYXAyIHsgZiA9IHQuZjsgdDE7IHQyIH1cbiAgICAgICAgfCBNYXAzIHQgLT5cbiAgICAgICAgICBsZXQgYWNjLCB1cDEsIHQxID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQxIGluXG4gICAgICAgICAgbGV0IGFjYywgdXAyLCB0MiA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50MiBpblxuICAgICAgICAgIGxldCBhY2MsIHVwMywgdDMgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDMgaW5cbiAgICAgICAgICBhY2MsIHJlZHVjZV91cCBbIHVwMTsgdXAyOyB1cDMgXSwgTWFwMyB7IGYgPSB0LmY7IHQxOyB0MjsgdDMgfVxuICAgICAgICB8IE1hcDQgdCAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwMSwgdDEgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDEgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDIsIHQyID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQyIGluXG4gICAgICAgICAgbGV0IGFjYywgdXAzLCB0MyA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50MyBpblxuICAgICAgICAgIGxldCBhY2MsIHVwNCwgdDQgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDQgaW5cbiAgICAgICAgICBhY2MsIHJlZHVjZV91cCBbIHVwMTsgdXAyOyB1cDM7IHVwNCBdLCBNYXA0IHsgZiA9IHQuZjsgdDE7IHQyOyB0MzsgdDQgfVxuICAgICAgICB8IE1hcDUgdCAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwMSwgdDEgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDEgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDIsIHQyID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQyIGluXG4gICAgICAgICAgbGV0IGFjYywgdXAzLCB0MyA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50MyBpblxuICAgICAgICAgIGxldCBhY2MsIHVwNCwgdDQgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDQgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDUsIHQ1ID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQ1IGluXG4gICAgICAgICAgbGV0IHVwID0gcmVkdWNlX3VwIFsgdXAxOyB1cDI7IHVwMzsgdXA0OyB1cDUgXSBpblxuICAgICAgICAgIGFjYywgdXAsIE1hcDUgeyBmID0gdC5mOyB0MTsgdDI7IHQzOyB0NDsgdDUgfVxuICAgICAgICB8IE1hcDYgdCAtPlxuICAgICAgICAgIGxldCBhY2MsIHVwMSwgdDEgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDEgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDIsIHQyID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQyIGluXG4gICAgICAgICAgbGV0IGFjYywgdXAzLCB0MyA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50MyBpblxuICAgICAgICAgIGxldCBhY2MsIHVwNCwgdDQgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDQgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDUsIHQ1ID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQ1IGluXG4gICAgICAgICAgbGV0IGFjYywgdXA2LCB0NiA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50NiBpblxuICAgICAgICAgIGxldCB1cCA9IHJlZHVjZV91cCBbIHVwMTsgdXAyOyB1cDM7IHVwNDsgdXA1OyB1cDYgXSBpblxuICAgICAgICAgIGFjYywgdXAsIE1hcDYgeyBmID0gdC5mOyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2IH1cbiAgICAgICAgfCBNYXA3IHQgLT5cbiAgICAgICAgICBsZXQgYWNjLCB1cDEsIHQxID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQxIGluXG4gICAgICAgICAgbGV0IGFjYywgdXAyLCB0MiA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50MiBpblxuICAgICAgICAgIGxldCBhY2MsIHVwMywgdDMgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDMgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDQsIHQ0ID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQ0IGluXG4gICAgICAgICAgbGV0IGFjYywgdXA1LCB0NSA9IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdC50NSBpblxuICAgICAgICAgIGxldCBhY2MsIHVwNiwgdDYgPSBVc2VyLnRyYW5zZm9ybV92IGRvd24gYWNjIHQudDYgaW5cbiAgICAgICAgICBsZXQgYWNjLCB1cDcsIHQ3ID0gVXNlci50cmFuc2Zvcm1fdiBkb3duIGFjYyB0LnQ3IGluXG4gICAgICAgICAgbGV0IHVwID0gcmVkdWNlX3VwIFsgdXAxOyB1cDI7IHVwMzsgdXA0OyB1cDU7IHVwNjsgdXA3IF0gaW5cbiAgICAgICAgICBhY2MsIHVwLCBNYXA3IHsgZiA9IHQuZjsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyB0NjsgdDcgfVxuICAgICAgaW5cbiAgICAgIGFjYywgdXAsIHsgdmFsdWU7IGhlcmU7IGlkIH1cbiAgICA7O1xuXG4gICAgbGV0IG9uX3ZhbHVlIGRvd24gYWNjIGJlaGF2aW9yIHZhbHVlID1cbiAgICAgIG1hdGNoIGJlaGF2aW9yIHdpdGhcbiAgICAgIHwgYERpcmVjdGx5X29uIC0+IFVzZXIudHJhbnNmb3JtX3YgZG93biBhY2MgdmFsdWVcbiAgICAgIHwgYFNraXBwaW5nX292ZXIgLT4gZGVmYXVsdF92IGRvd24gYWNjIHZhbHVlXG4gICAgOztcblxuICAgIGxldCBvbl9jb21wdXRhdGlvbiBkb3duIGFjYyBiZWhhdmlvciBjb21wdXRhdGlvbiA9XG4gICAgICBUcmFtcG9saW5lLmxhenlfXG4gICAgICAgIChsYXp5XG4gICAgICAgICAgKG1hdGNoIGJlaGF2aW9yIHdpdGhcbiAgICAgICAgICAgfCBgRGlyZWN0bHlfb24gLT4gVXNlci50cmFuc2Zvcm1fYyBkb3duIGFjYyBjb21wdXRhdGlvblxuICAgICAgICAgICB8IGBTa2lwcGluZ19vdmVyIC0+IGRlZmF1bHRfYyBkb3duIGFjYyBjb21wdXRhdGlvbikpXG4gICAgOztcbiAgZW5kXG5cbiAgYW5kIFVzZXIgOiAoVHJhbnNmb3JtIHdpdGggbW9kdWxlIFR5cGVzIDo9IFR5cGVzKSA9IEYgKFJlY3Vyc2UpXG5cbiAgbGV0IHRyYW5zZm9ybV9jIGRvd24gYWNjIGNvbXB1dGF0aW9uID1cbiAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uIGRvd24gYWNjIGBEaXJlY3RseV9vbiBjb21wdXRhdGlvblxuICA7O1xuXG4gIGxldCB0cmFuc2Zvcm1fdiBkb3duIGFjYyB2YWx1ZSA9IFJlY3Vyc2Uub25fdmFsdWUgZG93biBhY2MgYERpcmVjdGx5X29uIHZhbHVlXG5lbmRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxub3BlbiBDb21wdXRhdGlvblxuXG5sZXQgcmVhZCB4ID0gUmV0dXJuIHhcblxubGV0IHN1YiAodHlwZSB2aWEpID9oZXJlIChmcm9tIDogdmlhIENvbXB1dGF0aW9uLnQpIH5mID1cbiAgbWF0Y2ggZnJvbSB3aXRoXG4gIHwgUmV0dXJuIHsgaGVyZSA9IHRoZXJlOyB2YWx1ZSA9IE5hbWVkIF8gYXMgbmFtZWQ7IGlkIH0gLT5cbiAgICBsZXQgaGVyZSA9IE9wdGlvbi5maXJzdF9zb21lIGhlcmUgdGhlcmUgaW5cbiAgICBmIHsgVmFsdWUuaGVyZTsgdmFsdWUgPSBuYW1lZDsgaWQgfVxuICB8IF8gLT5cbiAgICBsZXQgdmlhIDogdmlhIFR5cGVfZXF1YWwuSWQudCA9XG4gICAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZVxuICAgICAgICB+bmFtZTooU291cmNlX2NvZGVfcG9zaXRpb24udG9fc3RyaW5nIFslaGVyZV0pXG4gICAgICAgIFslc2V4cF9vZjogb3BhcXVlXVxuICAgIGluXG4gICAgbGV0IGludG8gPSBmIChWYWx1ZS5uYW1lZCAoU3ViIGhlcmUpIHZpYSkgaW5cbiAgICBTdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfVxuOztcblxubGV0IHN3aXRjaCB+aGVyZSB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gPVxuICBsZXQgYXJtcyA9XG4gICAgTGlzdC5pbml0IGJyYW5jaGVzIH5mOihmdW4ga2V5IC0+XG4gICAgICBsZXQgY29tcHV0YXRpb24gPVxuICAgICAgICB0cnkgd2l0aF8ga2V5IHdpdGhcbiAgICAgICAgfCBleG4gLT4gcmVhZCAoVmFsdWUucmV0dXJuX2V4biBleG4pXG4gICAgICBpblxuICAgICAga2V5LCBjb21wdXRhdGlvbilcbiAgICB8PiBJbnQuTWFwLm9mX2FsaXN0X2V4blxuICBpblxuICBTd2l0Y2ggeyBtYXRjaF87IGFybXM7IGhlcmUgfVxuOztcblxubW9kdWxlIER5bmFtaWNfc2NvcGUgPSBzdHJ1Y3RcbiAgbGV0IGZldGNoIH5pZCB+ZGVmYXVsdCB+Zm9yX3NvbWUgPSBGZXRjaCB7IGlkOyBkZWZhdWx0OyBmb3Jfc29tZSB9XG4gIGxldCBzdG9yZSB+aWQgfnZhbHVlIH5pbm5lciA9IFN0b3JlIHsgaWQ7IHZhbHVlOyBpbm5lciB9XG5lbmRcblxubW9kdWxlIEVkZ2UgPSBzdHJ1Y3RcbiAgbGV0IGxpZmVjeWNsZSB0ID0gTGlmZWN5Y2xlIHRcbmVuZFxuXG5sZXQgc3RhdGVfbWFjaGluZTFfc2FmZVxuICA/KHNleHBfb2ZfYWN0aW9uID0gc2V4cF9vZl9vcGFxdWUpXG4gIH5zZXhwX29mX21vZGVsXG4gID9yZXNldFxuICB+ZXF1YWxcbiAgfmRlZmF1bHRfbW9kZWxcbiAgfmFwcGx5X2FjdGlvblxuICBpbnB1dFxuICA9XG4gIGxldCBuYW1lID0gU291cmNlX2NvZGVfcG9zaXRpb24udG9fc3RyaW5nIFslaGVyZV0gaW5cbiAgbGV0IHJlc2V0ID1cbiAgICBtYXRjaCByZXNldCB3aXRoXG4gICAgfCBOb25lIC0+IGZ1biB+aW5qZWN0Ol8gfnNjaGVkdWxlX2V2ZW50Ol8gXyAtPiBkZWZhdWx0X21vZGVsXG4gICAgfCBTb21lIHJlc2V0IC0+XG4gICAgICBmdW4gfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgLT5cbiAgICAgICAgcmVzZXQgKEFwcGx5X2FjdGlvbl9jb250ZXh0LmNyZWF0ZSB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudClcbiAgaW5cbiAgbGV0IGFwcGx5X2FjdGlvbiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCA9XG4gICAgYXBwbHlfYWN0aW9uIChBcHBseV9hY3Rpb25fY29udGV4dC5jcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQpXG4gIGluXG4gIExlYWYxXG4gICAgeyBtb2RlbCA9IE1ldGEuTW9kZWwub2ZfbW9kdWxlIH5zZXhwX29mX21vZGVsIH5lcXVhbCB+bmFtZSB+ZGVmYXVsdDpkZWZhdWx0X21vZGVsXG4gICAgOyBpbnB1dF9pZCA9IE1ldGEuSW5wdXQuY3JlYXRlICgpXG4gICAgOyBkeW5hbWljX2FjdGlvbiA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lIHNleHBfb2ZfYWN0aW9uXG4gICAgOyBhcHBseV9hY3Rpb25cbiAgICA7IHJlc2V0XG4gICAgOyBpbnB1dFxuICAgIH1cbjs7XG5cbm1vZHVsZSBDb21wdXRhdGlvbl9zdGF0dXMgPSBzdHJ1Y3RcbiAgdHlwZSAnaW5wdXQgdCA9XG4gICAgfCBBY3RpdmUgb2YgJ2lucHV0XG4gICAgfCBJbmFjdGl2ZVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIGxldCBvZl9vcHRpb24gPSBmdW5jdGlvblxuICAgIHwgU29tZSB4IC0+IEFjdGl2ZSB4XG4gICAgfCBOb25lIC0+IEluYWN0aXZlXG4gIDs7XG5lbmRcblxubGV0IHN0YXRlX21hY2hpbmUxXG4gID9zZXhwX29mX2FjdGlvblxuICA/cmVzZXRcbiAgP3NleHBfb2ZfbW9kZWxcbiAgP2VxdWFsXG4gIH5kZWZhdWx0X21vZGVsXG4gIH5hcHBseV9hY3Rpb25cbiAgaW5wdXRcbiAgPVxuICBsZXQgYXBwbHlfYWN0aW9uIGNvbnRleHQgaW5wdXQgbW9kZWwgYWN0aW9uID1cbiAgICBsZXQgaW5wdXQgPSBDb21wdXRhdGlvbl9zdGF0dXMub2Zfb3B0aW9uIGlucHV0IGluXG4gICAgYXBwbHlfYWN0aW9uIGNvbnRleHQgaW5wdXQgbW9kZWwgYWN0aW9uXG4gIGluXG4gIHN0YXRlX21hY2hpbmUxX3NhZmVcbiAgICA/c2V4cF9vZl9hY3Rpb25cbiAgICB+c2V4cF9vZl9tb2RlbDooT3B0aW9uLnZhbHVlIHNleHBfb2ZfbW9kZWwgfmRlZmF1bHQ6c2V4cF9vZl9vcGFxdWUpXG4gICAgP3Jlc2V0XG4gICAgfmVxdWFsXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+YXBwbHlfYWN0aW9uXG4gICAgaW5wdXRcbjs7XG5cbmxldCBzdGF0ZV9tYWNoaW5lMFxuICA/cmVzZXRcbiAgP3NleHBfb2ZfbW9kZWxcbiAgPyhzZXhwX29mX2FjdGlvbiA9IHNleHBfb2Zfb3BhcXVlKVxuICA/ZXF1YWxcbiAgfmRlZmF1bHRfbW9kZWxcbiAgfmFwcGx5X2FjdGlvblxuICAoKVxuICA9XG4gIGxldCBuYW1lID0gU291cmNlX2NvZGVfcG9zaXRpb24udG9fc3RyaW5nIFslaGVyZV0gaW5cbiAgbGV0IGFwcGx5X2FjdGlvbiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCA9XG4gICAgYXBwbHlfYWN0aW9uIChBcHBseV9hY3Rpb25fY29udGV4dC5jcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQpXG4gIGluXG4gIGxldCByZXNldCA9XG4gICAgbWF0Y2ggcmVzZXQgd2l0aFxuICAgIHwgTm9uZSAtPiBmdW4gfmluamVjdDpfIH5zY2hlZHVsZV9ldmVudDpfIF8gLT4gZGVmYXVsdF9tb2RlbFxuICAgIHwgU29tZSByZXNldCAtPlxuICAgICAgZnVuIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IC0+XG4gICAgICAgIHJlc2V0IChBcHBseV9hY3Rpb25fY29udGV4dC5jcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQpXG4gIGluXG4gIExlYWYwXG4gICAgeyBtb2RlbCA9XG4gICAgICAgIE1ldGEuTW9kZWwub2ZfbW9kdWxlXG4gICAgICAgICAgfnNleHBfb2ZfbW9kZWw6KE9wdGlvbi52YWx1ZSB+ZGVmYXVsdDpzZXhwX29mX29wYXF1ZSBzZXhwX29mX21vZGVsKVxuICAgICAgICAgIH5lcXVhbFxuICAgICAgICAgIH5uYW1lXG4gICAgICAgICAgfmRlZmF1bHQ6ZGVmYXVsdF9tb2RlbFxuICAgIDsgc3RhdGljX2FjdGlvbiA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lIHNleHBfb2ZfYWN0aW9uXG4gICAgOyBhcHBseV9hY3Rpb25cbiAgICA7IHJlc2V0XG4gICAgfVxuOztcblxubW9kdWxlIFByb2NfaW5jciA9IHN0cnVjdFxuICBsZXQgdmFsdWVfY3V0b2ZmIHQgfmVxdWFsID0gcmVhZCAoVmFsdWUuY3V0b2ZmIH5hZGRlZF9ieV9sZXRfc3ludGF4OmZhbHNlIH5lcXVhbCB0KVxuICBsZXQgY29tcHV0ZV93aXRoX2Nsb2NrIHQgfmYgPSBDb21wdXRhdGlvbi5MZWFmX2luY3IgeyBpbnB1dCA9IHQ7IGNvbXB1dGUgPSBmIH1cblxuICBsZXQgb2ZfbW9kdWxlXG4gICAgKHR5cGUgaW5wdXQgbW9kZWwgcmVzdWx0KVxuICAgIChtb2R1bGUgTSA6IENvbXBvbmVudF9zX2luY3JcbiAgICAgIHdpdGggdHlwZSBJbnB1dC50ID0gaW5wdXRcbiAgICAgICBhbmQgdHlwZSBNb2RlbC50ID0gbW9kZWxcbiAgICAgICBhbmQgdHlwZSBSZXN1bHQudCA9IHJlc3VsdClcbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgIH5lcXVhbFxuICAgIH4oZGVmYXVsdF9tb2RlbCA6IG1vZGVsKVxuICAgIChpbnB1dCA6IGlucHV0IFZhbHVlLnQpXG4gICAgOiByZXN1bHQgQ29tcHV0YXRpb24udFxuICAgID1cbiAgICBzdWJcbiAgICAgIChzdGF0ZV9tYWNoaW5lMVxuICAgICAgICAgfnNleHBfb2ZfYWN0aW9uOk0uQWN0aW9uLnNleHBfb2ZfdFxuICAgICAgICAgP3NleHBfb2ZfbW9kZWxcbiAgICAgICAgIH5lcXVhbFxuICAgICAgICAgfmRlZmF1bHRfbW9kZWxcbiAgICAgICAgIH5hcHBseV9hY3Rpb246KGZ1biBjb250ZXh0IGlucHV0IG1vZGVsIGFjdGlvbiAtPlxuICAgICAgICAgICBsZXQldHlkaSB7IGluamVjdDsgc2NoZWR1bGVfZXZlbnQgfSA9XG4gICAgICAgICAgICAgQXBwbHlfYWN0aW9uX2NvbnRleHQuUHJpdmF0ZS5yZXZlYWwgY29udGV4dFxuICAgICAgICAgICBpblxuICAgICAgICAgICBtYXRjaCBpbnB1dCB3aXRoXG4gICAgICAgICAgIHwgQWN0aXZlIGlucHV0IC0+IE0uYXBwbHlfYWN0aW9uIGlucHV0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsIGFjdGlvblxuICAgICAgICAgICB8IEluYWN0aXZlIC0+XG4gICAgICAgICAgICAgZXByaW50X3NcbiAgICAgICAgICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgICAgICAgICBbJWhlcmVdXG4gICAgICAgICAgICAgICAgICAgXCJBbiBhY3Rpb24gc2VudCB0byBhbiBbb2ZfbW9kdWxlXSBoYXMgYmVlbiBkcm9wcGVkIGJlY2F1c2UgaXRzIGlucHV0IFxcXG4gICAgICAgICAgICAgICAgICAgIHdhcyBub3QgcHJlc2VudC4gVGhpcyBoYXBwZW5zIHdoZW4gdGhlIFtvZl9tb2R1bGVdIGlzIGluYWN0aXZlIHdoZW4gXFxcbiAgICAgICAgICAgICAgICAgICAgaXQgcmVjZWl2ZXMgYSBtZXNzYWdlLlwiXG4gICAgICAgICAgICAgICAgICAgKGFjdGlvbiA6IE0uQWN0aW9uLnQpXTtcbiAgICAgICAgICAgICBtb2RlbClcbiAgICAgICAgIGlucHV0KVxuICAgICAgfmY6KGZ1biBzdGF0ZSAtPlxuICAgICAgICBjb21wdXRlX3dpdGhfY2xvY2sgKFZhbHVlLmJvdGggaW5wdXQgc3RhdGUpIH5mOihmdW4gX2Nsb2NrIGlucHV0X2FuZF9zdGF0ZSAtPlxuICAgICAgICAgIGxldCVwYXR0ZXJuX2JpbmQuVWlfaW5jciBpbnB1dCwgKG1vZGVsLCBpbmplY3QpID0gaW5wdXRfYW5kX3N0YXRlIGluXG4gICAgICAgICAgTS5jb21wdXRlIGlucHV0IG1vZGVsIH5pbmplY3QpKVxuICA7O1xuZW5kXG5cbmxldCBhc3NvY1xuICAodHlwZSBrIHYgY21wKVxuICAoY29tcGFyYXRvciA6IChrLCBjbXApIGNvbXBhcmF0b3IpXG4gIChtYXAgOiAoaywgdiwgY21wKSBNYXAudCBWYWx1ZS50KVxuICB+ZlxuICA9XG4gIGxldCBtb2R1bGUgQyA9ICh2YWwgY29tcGFyYXRvcikgaW5cbiAgbGV0IGtleV9pZCA6IGsgVHlwZV9lcXVhbC5JZC50ID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJrZXkgaWRcIiBDLnNleHBfb2ZfdCBpblxuICBsZXQgY21wX2lkIDogY21wIFR5cGVfZXF1YWwuSWQudCA9XG4gICAgVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJjbXAgaWRcIiBbJXNleHBfb2Y6IG9wYXF1ZV1cbiAgaW5cbiAgbGV0IGRhdGFfaWQgOiB2IFR5cGVfZXF1YWwuSWQudCA9XG4gICAgVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJkYXRhIGlkXCIgWyVzZXhwX29mOiBvcGFxdWVdXG4gIGluXG4gIGxldCBrZXlfdmFyID0gVmFsdWUubmFtZWQgQXNzb2NfbGlrZV9rZXkga2V5X2lkIGluXG4gIGxldCBkYXRhX3ZhciA9IFZhbHVlLm5hbWVkIEFzc29jX2xpa2VfZGF0YSBkYXRhX2lkIGluXG4gIGxldCBieSA9IGYga2V5X3ZhciBkYXRhX3ZhciBpblxuICBBc3NvYyB7IG1hcDsga2V5X2NvbXBhcmF0b3IgPSBjb21wYXJhdG9yOyBrZXlfaWQ7IGNtcF9pZDsgZGF0YV9pZDsgYnkgfVxuOztcblxubGV0IGFzc29jX29uXG4gICh0eXBlIG1vZGVsX2sgaW9fayBtb2RlbF9jbXAgaW9fY21wIHYpXG4gIChpb19jb21wYXJhdG9yIDogKGlvX2ssIGlvX2NtcCkgY29tcGFyYXRvcilcbiAgKG1vZGVsX2NvbXBhcmF0b3IgOiAobW9kZWxfaywgbW9kZWxfY21wKSBjb21wYXJhdG9yKVxuICAobWFwIDogKGlvX2ssIHYsIGlvX2NtcCkgTWFwLnQgVmFsdWUudClcbiAgfmdldF9tb2RlbF9rZXlcbiAgfmZcbiAgPVxuICBsZXQgbW9kdWxlIElvX2NvbXBhcmF0b3IgPSAodmFsIGlvX2NvbXBhcmF0b3IpIGluXG4gIGxldCBtb2R1bGUgTW9kZWxfY29tcGFyYXRvciA9ICh2YWwgbW9kZWxfY29tcGFyYXRvcikgaW5cbiAgbGV0IGlvX2tleV9pZCA6IGlvX2sgVHlwZV9lcXVhbC5JZC50ID1cbiAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcImlvIGtleSBpZFwiIElvX2NvbXBhcmF0b3Iuc2V4cF9vZl90XG4gIGluXG4gIGxldCBpb19jbXBfaWQgOiBpb19jbXAgVHlwZV9lcXVhbC5JZC50ID1cbiAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcImlvIGNtcCBpZFwiIFslc2V4cF9vZjogb3BhcXVlXVxuICBpblxuICBsZXQgbW9kZWxfa2V5X2lkIDogbW9kZWxfayBUeXBlX2VxdWFsLklkLnQgPVxuICAgIFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwibW9kZWwga2V5IGlkXCIgTW9kZWxfY29tcGFyYXRvci5zZXhwX29mX3RcbiAgaW5cbiAgbGV0IG1vZGVsX2NtcF9pZCA6IG1vZGVsX2NtcCBUeXBlX2VxdWFsLklkLnQgPVxuICAgIFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwibW9kZWwga2V5IGlkXCIgWyVzZXhwX29mOiBvcGFxdWVdXG4gIGluXG4gIGxldCBkYXRhX2lkIDogdiBUeXBlX2VxdWFsLklkLnQgPVxuICAgIFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwiZGF0YSBpZFwiIFslc2V4cF9vZjogb3BhcXVlXVxuICBpblxuICBsZXQga2V5X3ZhciA9IFZhbHVlLm5hbWVkIEFzc29jX2xpa2Vfa2V5IGlvX2tleV9pZCBpblxuICBsZXQgZGF0YV92YXIgPSBWYWx1ZS5uYW1lZCBBc3NvY19saWtlX2RhdGEgZGF0YV9pZCBpblxuICBsZXQgYnkgPSBmIGtleV92YXIgZGF0YV92YXIgaW5cbiAgQXNzb2Nfb25cbiAgICB7IG1hcFxuICAgIDsgaW9fY29tcGFyYXRvclxuICAgIDsgbW9kZWxfY29tcGFyYXRvclxuICAgIDsgaW9fa2V5X2lkXG4gICAgOyBpb19jbXBfaWRcbiAgICA7IGRhdGFfaWRcbiAgICA7IG1vZGVsX2tleV9pZFxuICAgIDsgbW9kZWxfY21wX2lkXG4gICAgOyBieVxuICAgIDsgZ2V0X21vZGVsX2tleVxuICAgIH1cbjs7XG5cbmxldCBsYXp5XyB0ID0gTGF6eSB0XG5cbmxldCB3cmFwXG4gICh0eXBlIG1vZGVsIGFjdGlvbilcbiAgP3Jlc2V0XG4gID9zZXhwX29mX21vZGVsXG4gID9lcXVhbFxuICB+ZGVmYXVsdF9tb2RlbFxuICB+YXBwbHlfYWN0aW9uXG4gIH5mXG4gICgpXG4gID1cbiAgbGV0IG1vZGVsX2lkIDogbW9kZWwgVHlwZV9lcXVhbC5JZC50ID1cbiAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcIm1vZGVsIGlkXCIgWyVzZXhwX29mOiBvcGFxdWVdXG4gIGluXG4gIGxldCByZXNldCA9XG4gICAgbWF0Y2ggcmVzZXQgd2l0aFxuICAgIHwgTm9uZSAtPiBmdW4gfmluamVjdDpfIH5zY2hlZHVsZV9ldmVudDpfIF8gLT4gZGVmYXVsdF9tb2RlbFxuICAgIHwgU29tZSByZXNldCAtPlxuICAgICAgZnVuIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IC0+XG4gICAgICAgIHJlc2V0IChBcHBseV9hY3Rpb25fY29udGV4dC5jcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQpXG4gIGluXG4gIGxldCBhY3Rpb25faWQgOiBhY3Rpb24gVHlwZV9lcXVhbC5JZC50ID1cbiAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcImFjdGlvbiBpZFwiIFslc2V4cF9vZjogb3BhcXVlXVxuICBpblxuICBsZXQgcmVzdWx0X2lkID0gTWV0YS5JbnB1dC5jcmVhdGUgKCkgaW5cbiAgbGV0IGluamVjdF9pZCA6IChhY3Rpb24gLT4gdW5pdCBFZmZlY3QudCkgVHlwZV9lcXVhbC5JZC50ID1cbiAgICBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcImluamVjdCBpZFwiIFslc2V4cF9vZjogb3BhcXVlXVxuICBpblxuICBsZXQgYXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IHJlc3VsdCBtb2RlbCBhY3Rpb24gPVxuICAgIG1hdGNoIHJlc3VsdCB3aXRoXG4gICAgfCBTb21lIHJlc3VsdCAtPlxuICAgICAgYXBwbHlfYWN0aW9uXG4gICAgICAgIChBcHBseV9hY3Rpb25fY29udGV4dC5jcmVhdGUgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQpXG4gICAgICAgIHJlc3VsdFxuICAgICAgICBtb2RlbFxuICAgICAgICBhY3Rpb25cbiAgICB8IE5vbmUgLT5cbiAgICAgIGxldCBhY3Rpb24gPSBzZXhwX29mX29wYXF1ZSBhY3Rpb24gaW5cbiAgICAgIGVwcmludF9zXG4gICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgIFwiQW4gYWN0aW9uIHNlbnQgdG8gYSBbd3JhcF0gaGFzIGJlZW4gZHJvcHBlZCBiZWNhdXNlIGl0cyBpbnB1dCB3YXMgbm90IFxcXG4gICAgICAgICAgIHByZXNlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBbd3JhcF0gaXMgaW5hY3RpdmUgd2hlbiBpdCByZWNlaXZlcyBhIG1lc3NhZ2UuXCJcbiAgICAgICAgICAgIChhY3Rpb24gOiBTZXhwLnQpXTtcbiAgICAgIG1vZGVsXG4gIGluXG4gIGxldCBtb2RlbF92YXIgPSBWYWx1ZS5uYW1lZCBXcmFwX21vZGVsIG1vZGVsX2lkIGluXG4gIGxldCBpbmplY3RfdmFyID0gVmFsdWUubmFtZWQgV3JhcF9pbmplY3QgaW5qZWN0X2lkIGluXG4gIGxldCBpbm5lciA9IGYgbW9kZWxfdmFyIGluamVjdF92YXIgaW5cbiAgbGV0IHdyYXBwZXJfbW9kZWwgPVxuICAgIE1ldGEuTW9kZWwub2ZfbW9kdWxlXG4gICAgICB+c2V4cF9vZl9tb2RlbDooT3B0aW9uLnZhbHVlIHNleHBfb2ZfbW9kZWwgfmRlZmF1bHQ6c2V4cF9vZl9vcGFxdWUpXG4gICAgICB+ZXF1YWxcbiAgICAgIH5kZWZhdWx0OmRlZmF1bHRfbW9kZWxcbiAgICAgIH5uYW1lOlwib3V0ZXIgbW9kZWwgZm9yIHdyYXBcIlxuICBpblxuICBXcmFwXG4gICAgeyB3cmFwcGVyX21vZGVsXG4gICAgOyBhY3Rpb25faWRcbiAgICA7IHJlc3VsdF9pZFxuICAgIDsgaW5qZWN0X2lkXG4gICAgOyBtb2RlbF9pZFxuICAgIDsgaW5uZXJcbiAgICA7IGR5bmFtaWNfYXBwbHlfYWN0aW9uID0gYXBwbHlfYWN0aW9uXG4gICAgOyByZXNldFxuICAgIH1cbjs7XG5cbmxldCB3aXRoX21vZGVsX3Jlc2V0dGVyIGYgPVxuICBsZXQgcmVzZXRfaWQgPSBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcInJlc2V0LW1vZGVsXCIgWyVzZXhwX29mOiBvcGFxdWVdIGluXG4gIGxldCBpbm5lciA9IGYgfnJlc2V0OihWYWx1ZS5uYW1lZCBNb2RlbF9yZXNldHRlciByZXNldF9pZCkgaW5cbiAgV2l0aF9tb2RlbF9yZXNldHRlciB7IHJlc2V0X2lkOyBpbm5lciB9XG47O1xuXG5sZXQgcGF0aCA9IFBhdGhcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxubW9kdWxlIFByb2NfaW5jciA9IFByb2NfbWluLlByb2NfaW5jclxuXG5sZXQgY29tcHV0ZSB0IH5mID0gUHJvY19pbmNyLmNvbXB1dGVfd2l0aF9jbG9jayB0IH5mOihmdW4gXyBpbnB1dCAtPiBmIGlucHV0KVxuXG5sZXQgd2l0aF9jbG9jayBmID1cbiAgUHJvY19pbmNyLmNvbXB1dGVfd2l0aF9jbG9jayAoVmFsdWUucmV0dXJuICgpKSB+ZjooZnVuIGNsb2NrIF8gLT4gZiBjbG9jaylcbjs7XG5cbmxldCB0b192YWx1ZSBpbmNyID1cbiAgeyBWYWx1ZS52YWx1ZSA9IFZhbHVlLkluY3IgaW5jclxuICA7IGhlcmUgPSBOb25lXG4gIDsgaWQgPSBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZTpcInRvX3ZhbHVlXCIgc2V4cF9vZl9vcGFxdWVcbiAgfVxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgdHlwZSBJbnB1dCA9IHNpZ1xuICBtb2R1bGUgVmFsdWUgOiBzaWdcbiAgICB0eXBlICdhIHRcblxuICAgIHZhbCBib3RoIDogJ2EgdCAtPiAnYiB0IC0+ICgnYSAqICdiKSB0XG4gIGVuZFxuXG4gIG1vZHVsZSBDb21wdXRhdGlvbiA6IHNpZ1xuICAgIHR5cGUgJ2EgdFxuICBlbmRcblxuICBtb2R1bGUgSW5jciA6IHNpZ1xuICAgIHZhbCBjb21wdXRlIDogJ2EgVmFsdWUudCAtPiBmOignYSBJbmNyLnQgLT4gJ2IgSW5jci50KSAtPiAnYiBDb21wdXRhdGlvbi50XG4gIGVuZFxuZW5kXG5cbm1vZHVsZSB0eXBlIE91dHB1dCA9IHNpZ1xuICBtb2R1bGUgVmFsdWUgOiBzaWdcbiAgICB0eXBlICdhIHRcbiAgZW5kXG5cbiAgbW9kdWxlIENvbXB1dGF0aW9uIDogc2lnXG4gICAgdHlwZSAnYSB0XG4gIGVuZFxuXG4gIHZhbCBtYXBpXG4gICAgOiAgKCdrLCAndjEsICdjbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondjEgLT4gJ3YyKVxuICAgIC0+ICgnaywgJ3YyLCAnY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIG1hcFxuICAgIDogICgnaywgJ3YxLCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gZjooJ3YxIC0+ICd2MilcbiAgICAtPiAoJ2ssICd2MiwgJ2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBvZl9zZXQgOiAoJ2ssICdjbXApIFNldC50IFZhbHVlLnQgLT4gKCdrLCB1bml0LCAnY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGZpbHRlcl9tYXBpXG4gICAgOiAgKCdrLCAndjEsICdjbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondjEgLT4gJ3YyIG9wdGlvbilcbiAgICAtPiAoJ2ssICd2MiwgJ2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBmaWx0ZXJfbWFwXG4gICAgOiAgKCdrLCAndjEsICdjbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBmOigndjEgLT4gJ3YyIG9wdGlvbilcbiAgICAtPiAoJ2ssICd2MiwgJ2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBwYXJ0aXRpb25fbWFwaVxuICAgIDogICgnaywgJ3YxLCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gZjooa2V5OidrIC0+IGRhdGE6J3YxIC0+ICgndjIsICd2MykgRWl0aGVyLnQpXG4gICAgLT4gKCgnaywgJ3YyLCAnY21wKSBNYXAudCAqICgnaywgJ3YzLCAnY21wKSBNYXAudCkgQ29tcHV0YXRpb24udFxuXG4gIHZhbCB1bm9yZGVyZWRfZm9sZFxuICAgIDogID91cGRhdGU6KGtleTonayAtPiBvbGRfZGF0YTondiAtPiBuZXdfZGF0YTondiAtPiAnYWNjIC0+ICdhY2MpXG4gICAgLT4gKCdrLCAndiwgJ2NtcCkgTWFwLnQgVmFsdWUudFxuICAgIC0+IGluaXQ6J2FjY1xuICAgIC0+IGFkZDooa2V5OidrIC0+IGRhdGE6J3YgLT4gJ2FjYyAtPiAnYWNjKVxuICAgIC0+IHJlbW92ZTooa2V5OidrIC0+IGRhdGE6J3YgLT4gJ2FjYyAtPiAnYWNjKVxuICAgIC0+ICdhY2MgQ29tcHV0YXRpb24udFxuXG4gIHZhbCB1bm9yZGVyZWRfZm9sZF93aXRoX2V4dHJhXG4gICAgOiAgP3VwZGF0ZTooa2V5OidrIC0+IG9sZF9kYXRhOid2IC0+IG5ld19kYXRhOid2IC0+ICdhY2MgLT4gJ2V4dHJhIC0+ICdhY2MpXG4gICAgLT4gKCdrLCAndiwgJ2UpIE1hcC50IFZhbHVlLnRcbiAgICAtPiAnZXh0cmEgVmFsdWUudFxuICAgIC0+IGluaXQ6J2FjY1xuICAgIC0+IGFkZDooa2V5OidrIC0+IGRhdGE6J3YgLT4gJ2FjYyAtPiAnZXh0cmEgLT4gJ2FjYylcbiAgICAtPiByZW1vdmU6KGtleTonayAtPiBkYXRhOid2IC0+ICdhY2MgLT4gJ2V4dHJhIC0+ICdhY2MpXG4gICAgLT4gZXh0cmFfY2hhbmdlZDpcbiAgICAgICAgIChvbGRfZXh0cmE6J2V4dHJhXG4gICAgICAgICAgLT4gbmV3X2V4dHJhOidleHRyYVxuICAgICAgICAgIC0+IGlucHV0OignaywgJ3YsICdlKSBNYXAudFxuICAgICAgICAgIC0+ICdhY2NcbiAgICAgICAgICAtPiAnYWNjKVxuICAgIC0+ICdhY2MgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBjdXRvZmZcbiAgICA6ICAoJ2ssICd2LCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gZXF1YWw6KCd2IC0+ICd2IC0+IGJvb2wpXG4gICAgLT4gKCdrLCAndiwgJ2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtYXBpX2NvdW50XG4gICAgOiAgKCdrMSwgJ3YsICdjbXAxKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gY29tcGFyYXRvcjooJ2syLCAnY21wMikgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOihrZXk6J2sxIC0+IGRhdGE6J3YgLT4gJ2syKVxuICAgIC0+ICgnazIsIGludCwgJ2NtcDIpIE1hcC50IENvbXB1dGF0aW9uLnRcblxuICB2YWwgbWFwX2NvdW50XG4gICAgOiAgKCdrMSwgJ3YsICdjbXAxKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gY29tcGFyYXRvcjooJ2syLCAnY21wMikgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOigndiAtPiAnazIpXG4gICAgLT4gKCdrMiwgaW50LCAnY21wMikgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtYXBpX21pblxuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignciwgXykgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondiAtPiAncilcbiAgICAtPiAnciBvcHRpb24gQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtYXBpX21heFxuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignciwgXykgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondiAtPiAncilcbiAgICAtPiAnciBvcHRpb24gQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtYXBfbWluXG4gICAgOiAgKCdrLCAndiwgXykgTWFwLnQgVmFsdWUudFxuICAgIC0+IGNvbXBhcmF0b3I6KCdyLCBfKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+IGY6KCd2IC0+ICdyKVxuICAgIC0+ICdyIG9wdGlvbiBDb21wdXRhdGlvbi50XG5cbiAgdmFsIG1hcF9tYXhcbiAgICA6ICAoJ2ssICd2LCBfKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gY29tcGFyYXRvcjooJ3IsIF8pIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yXG4gICAgLT4gZjooJ3YgLT4gJ3IpXG4gICAgLT4gJ3Igb3B0aW9uIENvbXB1dGF0aW9uLnRcblxuICB2YWwgbWluX3ZhbHVlXG4gICAgOiAgKCdrLCAndiwgXykgTWFwLnQgVmFsdWUudFxuICAgIC0+IGNvbXBhcmF0b3I6KCd2LCBfKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+ICd2IG9wdGlvbiBDb21wdXRhdGlvbi50XG5cbiAgdmFsIG1heF92YWx1ZVxuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOigndiwgXykgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiAndiBvcHRpb24gQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtYXBpX2JvdW5kc1xuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignciwgXykgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondiAtPiAncilcbiAgICAtPiAoJ3IgKiAncikgb3B0aW9uIENvbXB1dGF0aW9uLnRcblxuICB2YWwgbWFwX2JvdW5kc1xuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignciwgXykgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOigndiAtPiAncilcbiAgICAtPiAoJ3IgKiAncikgb3B0aW9uIENvbXB1dGF0aW9uLnRcblxuICB2YWwgdmFsdWVfYm91bmRzXG4gICAgOiAgKCdrLCAndiwgXykgTWFwLnQgVmFsdWUudFxuICAgIC0+IGNvbXBhcmF0b3I6KCd2LCBfKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+ICgndiAqICd2KSBvcHRpb24gQ29tcHV0YXRpb24udFxuXG4gIHZhbCBtZXJnZVxuICAgIDogICgnaywgJ3YxLCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gKCdrLCAndjIsICdjbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBmOihrZXk6J2sgLT4gKCd2MSwgJ3YyKSBNYXAuTWVyZ2VfZWxlbWVudC50IC0+ICd2MyBvcHRpb24pXG4gICAgLT4gKCdrLCAndjMsICdjbXApIE1hcC50IENvbXB1dGF0aW9uLnRcblxuICB2YWwgbWVyZ2VfYm90aF9zb21lXG4gICAgOiAgKCdrLCAndjEsICdjbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiAoJ2ssICd2MiwgJ2NtcCkgTWFwLnQgVmFsdWUudFxuICAgIC0+IGY6KGtleTonayAtPiAndjEgLT4gJ3YyIC0+ICd2MylcbiAgICAtPiAoJ2ssICd2MywgJ2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCB1bnppcFxuICAgIDogICgnaywgJ2EgKiAnYiwgJ2NtcCkgTWFwLnQgVmFsdWUudFxuICAgIC0+ICgoJ2ssICdhLCAnY21wKSBNYXAudCAqICgnaywgJ2IsICdjbXApIE1hcC50KSBDb21wdXRhdGlvbi50XG5cbiAgdmFsIHVuemlwX21hcGlcbiAgICA6ICAoJ2ssICd2LCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gZjooa2V5OidrIC0+IGRhdGE6J3YgLT4gJ3YxICogJ3YyKVxuICAgIC0+ICgoJ2ssICd2MSwgJ2NtcCkgTWFwLnQgKiAoJ2ssICd2MiwgJ2NtcCkgTWFwLnQpIENvbXB1dGF0aW9uLnRcblxuICB2YWwga2V5cyA6ICgnaywgJ3YsICdjKSBNYXAudCBWYWx1ZS50IC0+ICgnaywgJ2MpIFNldC50IENvbXB1dGF0aW9uLnRcbiAgdmFsIHJhbmsgOiAoJ2ssICd2LCAnY21wKSBNYXAudCBWYWx1ZS50IC0+ICdrIFZhbHVlLnQgLT4gaW50IG9wdGlvbiBDb21wdXRhdGlvbi50XG5cbiAgdmFsIHN1YnJhbmdlXG4gICAgOiAgKCdrLCAndiwgJ2NtcCkgTWFwLnQgVmFsdWUudFxuICAgIC0+ICgnayBNYXliZV9ib3VuZC5Bc19sb3dlcl9ib3VuZC50ICogJ2sgTWF5YmVfYm91bmQuQXNfdXBwZXJfYm91bmQudCkgb3B0aW9uIFZhbHVlLnRcbiAgICAtPiAoJ2ssICd2LCAnY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIHN1YnJhbmdlX2J5X3JhbmtcbiAgICA6ICAoJ2ssICd2LCAnY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gKGludCBNYXliZV9ib3VuZC5Bc19sb3dlcl9ib3VuZC50ICogaW50IE1heWJlX2JvdW5kLkFzX3VwcGVyX2JvdW5kLnQpIFZhbHVlLnRcbiAgICAtPiAoJ2ssICd2LCAnY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIHJla2V5XG4gICAgOiAgKCdrMSwgJ3YsICdjbXAxKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gY29tcGFyYXRvcjooJ2syLCAnY21wMikgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBmOihrZXk6J2sxIC0+IGRhdGE6J3YgLT4gJ2syKVxuICAgIC0+ICgnazIsICd2LCAnY21wMikgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBpbmRleF9ieWlcbiAgICA6ICAoJ2lubmVyX2tleSwgJ3YsICdpbm5lcl9jbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignb3V0ZXJfa2V5LCAnb3V0ZXJfY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+IGluZGV4OihrZXk6J2lubmVyX2tleSAtPiBkYXRhOid2IC0+ICdvdXRlcl9rZXkgb3B0aW9uKVxuICAgIC0+ICgnb3V0ZXJfa2V5LCAoJ2lubmVyX2tleSwgJ3YsICdpbm5lcl9jbXApIE1hcC50LCAnb3V0ZXJfY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGluZGV4X2J5XG4gICAgOiAgKCdpbm5lcl9rZXksICd2LCAnaW5uZXJfY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gY29tcGFyYXRvcjooJ291dGVyX2tleSwgJ291dGVyX2NtcCkgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBpbmRleDooJ3YgLT4gJ291dGVyX2tleSBvcHRpb24pXG4gICAgLT4gKCdvdXRlcl9rZXksICgnaW5uZXJfa2V5LCAndiwgJ2lubmVyX2NtcCkgTWFwLnQsICdvdXRlcl9jbXApIE1hcC50IENvbXB1dGF0aW9uLnRcblxuICB2YWwgdW5vcmRlcmVkX2ZvbGRfbmVzdGVkX21hcHNcbiAgICA6ICA/dXBkYXRlOlxuICAgICAgICAgKG91dGVyX2tleTonb3V0ZXJfa2V5XG4gICAgICAgICAgLT4gaW5uZXJfa2V5Oidpbm5lcl9rZXlcbiAgICAgICAgICAtPiBvbGRfZGF0YTondlxuICAgICAgICAgIC0+IG5ld19kYXRhOid2XG4gICAgICAgICAgLT4gJ2FjY1xuICAgICAgICAgIC0+ICdhY2MpXG4gICAgLT4gKCdvdXRlcl9rZXksICgnaW5uZXJfa2V5LCAndiwgJ2lubmVyX2NtcCkgTWFwLnQsICdvdXRlcl9jbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBpbml0OidhY2NcbiAgICAtPiBhZGQ6KG91dGVyX2tleTonb3V0ZXJfa2V5IC0+IGlubmVyX2tleTonaW5uZXJfa2V5IC0+IGRhdGE6J3YgLT4gJ2FjYyAtPiAnYWNjKVxuICAgIC0+IHJlbW92ZToob3V0ZXJfa2V5OidvdXRlcl9rZXkgLT4gaW5uZXJfa2V5Oidpbm5lcl9rZXkgLT4gZGF0YTondiAtPiAnYWNjIC0+ICdhY2MpXG4gICAgLT4gJ2FjYyBDb21wdXRhdGlvbi50XG5cbiAgdmFsIHRyYW5zcG9zZVxuICAgIDogICgnazIsICdrMl9jbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yXG4gICAgLT4gKCdrMSwgKCdrMiwgJ3YsICdrMl9jbXApIE1hcC50LCAnazFfY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gKCdrMiwgKCdrMSwgJ3YsICdrMV9jbXApIE1hcC50LCAnazJfY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGNvbGxhcHNlXG4gICAgOiAgKCdvdXRlcl9rZXksICgnaW5uZXJfa2V5LCAndiwgJ2lubmVyX2NtcCkgTWFwLnQsICdvdXRlcl9jbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBjb21wYXJhdG9yOignaW5uZXJfa2V5LCAnaW5uZXJfY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+ICggJ291dGVyX2tleSAqICdpbm5lcl9rZXlcbiAgICAgICAsICd2XG4gICAgICAgLCAoJ291dGVyX2NtcCwgJ2lubmVyX2NtcCkgVHVwbGUyLmNvbXBhcmF0b3Jfd2l0bmVzcyApXG4gICAgICAgTWFwLnRcbiAgICAgICBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGNvbGxhcHNlX2J5XG4gICAgOiAgKCdvdXRlcl9rZXksICgnaW5uZXJfa2V5LCAndiwgJ2lubmVyX2NtcCkgTWFwLnQsICdvdXRlcl9jbXApIE1hcC50IFZhbHVlLnRcbiAgICAtPiBtZXJnZV9rZXlzOignb3V0ZXJfa2V5IC0+ICdpbm5lcl9rZXkgLT4gJ2NvbWJpbmVkX2tleSlcbiAgICAtPiBjb21wYXJhdG9yOignY29tYmluZWRfa2V5LCAnY29tYmluZWRfY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+ICgnY29tYmluZWRfa2V5LCAndiwgJ2NvbWJpbmVkX2NtcCkgTWFwLnQgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBleHBhbmRcbiAgICA6ICAoJ291dGVyX2tleSAqICdpbm5lcl9rZXksICd2LCAndHVwbGVfY21wKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gb3V0ZXJfY29tcGFyYXRvcjooJ291dGVyX2tleSwgJ291dGVyX2NtcCkgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3JcbiAgICAtPiBpbm5lcl9jb21wYXJhdG9yOignaW5uZXJfa2V5LCAnaW5uZXJfY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvclxuICAgIC0+ICgnb3V0ZXJfa2V5LCAoJ2lubmVyX2tleSwgJ3YsICdpbm5lcl9jbXApIE1hcC50LCAnb3V0ZXJfY21wKSBNYXAudCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGNvdW50aVxuICAgIDogICgnaywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiBmOihrZXk6J2sgLT4gZGF0YTondiAtPiBib29sKVxuICAgIC0+IGludCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGNvdW50IDogKF8sICd2LCBfKSBNYXAudCBWYWx1ZS50IC0+IGY6KCd2IC0+IGJvb2wpIC0+IGludCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGZvcl9hbGxpXG4gICAgOiAgKCdrLCAndiwgXykgTWFwLnQgVmFsdWUudFxuICAgIC0+IGY6KGtleTonayAtPiBkYXRhOid2IC0+IGJvb2wpXG4gICAgLT4gYm9vbCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGZvcl9hbGwgOiAoXywgJ3YsIF8pIE1hcC50IFZhbHVlLnQgLT4gZjooJ3YgLT4gYm9vbCkgLT4gYm9vbCBDb21wdXRhdGlvbi50XG5cbiAgdmFsIGV4aXN0c2lcbiAgICA6ICAoJ2ssICd2LCBfKSBNYXAudCBWYWx1ZS50XG4gICAgLT4gZjooa2V5OidrIC0+IGRhdGE6J3YgLT4gYm9vbClcbiAgICAtPiBib29sIENvbXB1dGF0aW9uLnRcblxuICB2YWwgZXhpc3RzIDogKF8sICd2LCBfKSBNYXAudCBWYWx1ZS50IC0+IGY6KCd2IC0+IGJvb2wpIC0+IGJvb2wgQ29tcHV0YXRpb24udFxuXG4gIHZhbCBzdW1cbiAgICA6ICAoXywgJ3YsIF8pIE1hcC50IFZhbHVlLnRcbiAgICAtPiAobW9kdWxlIEFic3RyYWN0X2FsZ2VicmEuQ29tbXV0YXRpdmVfZ3JvdXAuV2l0aG91dF9zZXhwIHdpdGggdHlwZSB0ID0gJ3UpXG4gICAgLT4gZjooJ3YgLT4gJ3UpXG4gICAgLT4gJ3UgQ29tcHV0YXRpb24udFxuZW5kXG5cbm1vZHVsZSBNYXAwID0gc3RydWN0XG4gIG1vZHVsZSB0eXBlIFMgPSBzaWdcbiAgICBtb2R1bGUgTWFrZSAoSW5wdXQgOiBJbnB1dCkgOiBzaWdcbiAgICAgIGluY2x1ZGVcbiAgICAgICAgT3V0cHV0XG4gICAgICAgICAgd2l0aCBtb2R1bGUgVmFsdWUgOj0gSW5wdXQuVmFsdWVcbiAgICAgICAgICAgYW5kIG1vZHVsZSBDb21wdXRhdGlvbiA6PSBJbnB1dC5Db21wdXRhdGlvblxuICAgIGVuZFxuICBlbmRcbmVuZFxuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5pbmNsdWRlIE1hcDBfaW50ZlxuXG5tb2R1bGUgTWFrZSAoSW5wdXQgOiBJbnB1dCkgOiBzaWdcbiAgaW5jbHVkZVxuICAgIE91dHB1dCB3aXRoIG1vZHVsZSBWYWx1ZSA6PSBJbnB1dC5WYWx1ZSBhbmQgbW9kdWxlIENvbXB1dGF0aW9uIDo9IElucHV0LkNvbXB1dGF0aW9uXG5lbmQgPSBzdHJ1Y3RcbiAgb3BlbiBJbnB1dFxuXG4gIGxldCBtYXAgbSB+ZiA9IEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5tYXAgfmYpXG4gIGxldCBtYXBpIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAubWFwaSB+ZilcbiAgbGV0IG9mX3NldCA9IEluY3IuY29tcHV0ZSB+ZjpJbmNyX21hcC5vZl9zZXRcbiAgbGV0IGZpbHRlcl9tYXBpIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuZmlsdGVyX21hcGkgfmYpXG4gIGxldCBmaWx0ZXJfbWFwIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuZmlsdGVyX21hcCB+ZilcbiAgbGV0IHBhcnRpdGlvbl9tYXBpIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAucGFydGl0aW9uX21hcGkgfmYpXG5cbiAgbGV0IHVub3JkZXJlZF9mb2xkID91cGRhdGUgbSB+aW5pdCB+YWRkIH5yZW1vdmUgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC51bm9yZGVyZWRfZm9sZCA/dXBkYXRlIH5pbml0IH5hZGQgfnJlbW92ZSlcbiAgOztcblxuICBsZXQgdW5vcmRlcmVkX2ZvbGRfd2l0aF9leHRyYSA/dXBkYXRlIG0gZSB+aW5pdCB+YWRkIH5yZW1vdmUgfmV4dHJhX2NoYW5nZWQgPVxuICAgIEluY3IuY29tcHV0ZSAoVmFsdWUuYm90aCBtIGUpIH5mOihmdW4gbV9hbmRfZSAtPlxuICAgICAgbGV0JXBhdHRlcm5fYmluZC5VaV9pbmNyIG0sIGUgPSBtX2FuZF9lIGluXG4gICAgICBJbmNyX21hcC51bm9yZGVyZWRfZm9sZF93aXRoX2V4dHJhID91cGRhdGUgbSBlIH5pbml0IH5hZGQgfnJlbW92ZSB+ZXh0cmFfY2hhbmdlZClcbiAgOztcblxuICBsZXQgY3V0b2ZmIG0gfmVxdWFsID1cbiAgICBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuY3V0b2ZmIH5jdXRvZmY6KFVpX2luY3IuQ3V0b2ZmLm9mX2VxdWFsIGVxdWFsKSlcbiAgOztcblxuICBsZXQgbWFwaV9jb3VudFxuICAgICh0eXBlIGsgY21wKVxuICAgIG1cbiAgICB+Y29tcGFyYXRvcjooKG1vZHVsZSBNKSA6IChrLCBjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKVxuICAgIH5mXG4gICAgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5tYXBpX2NvdW50IH5jb21wYXJhdG9yOihtb2R1bGUgTSkgfmYpXG4gIDs7XG5cbiAgbGV0IG1hcF9jb3VudFxuICAgICh0eXBlIGsgY21wKVxuICAgIG1cbiAgICB+Y29tcGFyYXRvcjooKG1vZHVsZSBNKSA6IChrLCBjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKVxuICAgIH5mXG4gICAgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5tYXBfY291bnQgfmNvbXBhcmF0b3I6KG1vZHVsZSBNKSB+ZilcbiAgOztcblxuICBsZXQgbWFwaV9taW5cbiAgICAodHlwZSBrIGNtcClcbiAgICBtXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICB+ZlxuICAgID1cbiAgICBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAubWFwaV9taW4gfmNvbXBhcmF0b3I6KG1vZHVsZSBNKSB+ZilcbiAgOztcblxuICBsZXQgbWFwaV9tYXhcbiAgICAodHlwZSBrIGNtcClcbiAgICBtXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICB+ZlxuICAgID1cbiAgICBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAubWFwaV9tYXggfmNvbXBhcmF0b3I6KG1vZHVsZSBNKSB+ZilcbiAgOztcblxuICBsZXQgbWFwX21pblxuICAgICh0eXBlIGsgY21wKVxuICAgIG1cbiAgICB+Y29tcGFyYXRvcjooKG1vZHVsZSBNKSA6IChrLCBjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKVxuICAgIH5mXG4gICAgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5tYXBfbWluIH5jb21wYXJhdG9yOihtb2R1bGUgTSkgfmYpXG4gIDs7XG5cbiAgbGV0IG1hcF9tYXhcbiAgICAodHlwZSBrIGNtcClcbiAgICBtXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICB+ZlxuICAgID1cbiAgICBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAubWFwX21heCB+Y29tcGFyYXRvcjoobW9kdWxlIE0pIH5mKVxuICA7O1xuXG4gIGxldCBtaW5fdmFsdWUgKHR5cGUgayBjbXApIG0gfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLm1pbl92YWx1ZSB+Y29tcGFyYXRvcjoobW9kdWxlIE0pKVxuICA7O1xuXG4gIGxldCBtYXhfdmFsdWUgKHR5cGUgayBjbXApIG0gfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLm1heF92YWx1ZSB+Y29tcGFyYXRvcjoobW9kdWxlIE0pKVxuICA7O1xuXG4gIGxldCBtYXBpX2JvdW5kc1xuICAgICh0eXBlIGsgY21wKVxuICAgIG1cbiAgICB+Y29tcGFyYXRvcjooKG1vZHVsZSBNKSA6IChrLCBjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKVxuICAgIH5mXG4gICAgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5tYXBpX2JvdW5kcyB+Y29tcGFyYXRvcjoobW9kdWxlIE0pIH5mKVxuICA7O1xuXG4gIGxldCBtYXBfYm91bmRzXG4gICAgKHR5cGUgayBjbXApXG4gICAgbVxuICAgIH5jb21wYXJhdG9yOigobW9kdWxlIE0pIDogKGssIGNtcCkgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3IpXG4gICAgfmZcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLm1hcF9ib3VuZHMgfmNvbXBhcmF0b3I6KG1vZHVsZSBNKSB+ZilcbiAgOztcblxuICBsZXQgdmFsdWVfYm91bmRzXG4gICAgKHR5cGUgayBjbXApXG4gICAgbVxuICAgIH5jb21wYXJhdG9yOigobW9kdWxlIE0pIDogKGssIGNtcCkgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3IpXG4gICAgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC52YWx1ZV9ib3VuZHMgfmNvbXBhcmF0b3I6KG1vZHVsZSBNKSlcbiAgOztcblxuICBsZXQgbWVyZ2UgYSBiIH5mID1cbiAgICBJbmNyLmNvbXB1dGUgKFZhbHVlLmJvdGggYSBiKSB+ZjooZnVuIGFfYW5kX2IgLT5cbiAgICAgIGxldCVwYXR0ZXJuX2JpbmQuVWlfaW5jciBhLCBiID0gYV9hbmRfYiBpblxuICAgICAgSW5jcl9tYXAubWVyZ2UgYSBiIH5mKVxuICA7O1xuXG4gIGxldCBtZXJnZV9ib3RoX3NvbWUgYSBiIH5mID1cbiAgICBJbmNyLmNvbXB1dGUgKFZhbHVlLmJvdGggYSBiKSB+ZjooZnVuIGFfYW5kX2IgLT5cbiAgICAgIGxldCVwYXR0ZXJuX2JpbmQuVWlfaW5jciBhLCBiID0gYV9hbmRfYiBpblxuICAgICAgSW5jcl9tYXAubWVyZ2VfYm90aF9zb21lIGEgYiB+ZilcbiAgOztcblxuICBsZXQgdW56aXAgbSA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KGZ1biBtIC0+XG4gICAgICBsZXQgbCwgciA9IEluY3JfbWFwLnVuemlwIG0gaW5cbiAgICAgIFVpX2luY3IuYm90aCBsIHIpXG4gIDs7XG5cbiAgbGV0IHVuemlwX21hcGkgbSB+ZiA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KGZ1biBtIC0+XG4gICAgICBsZXQgbCwgciA9IEluY3JfbWFwLnVuemlwX21hcGkgbSB+ZiBpblxuICAgICAgVWlfaW5jci5ib3RoIGwgcilcbiAgOztcblxuICBsZXQga2V5cyA9IEluY3IuY29tcHV0ZSB+ZjpJbmNyX21hcC5rZXlzXG5cbiAgbGV0IHJhbmsgbSBrID1cbiAgICBJbmNyLmNvbXB1dGUgKFZhbHVlLmJvdGggbSBrKSB+ZjooZnVuIG1fYW5kX2sgLT5cbiAgICAgIGxldCVwYXR0ZXJuX2JpbmQuVWlfaW5jciBtLCBrID0gbV9hbmRfayBpblxuICAgICAgSW5jcl9tYXAucmFuayBtIGspXG4gIDs7XG5cbiAgbGV0IHN1YnJhbmdlIG0gYm91bmRzID1cbiAgICBJbmNyLmNvbXB1dGUgKFZhbHVlLmJvdGggbSBib3VuZHMpIH5mOihmdW4gbV9hbmRfYm91bmRzIC0+XG4gICAgICBsZXQlcGF0dGVybl9iaW5kLlVpX2luY3IgbSwgYm91bmRzID0gbV9hbmRfYm91bmRzIGluXG4gICAgICBJbmNyX21hcC5zdWJyYW5nZSBtIGJvdW5kcylcbiAgOztcblxuICBsZXQgc3VicmFuZ2VfYnlfcmFuayBtIGJvdW5kcyA9XG4gICAgSW5jci5jb21wdXRlIChWYWx1ZS5ib3RoIG0gYm91bmRzKSB+ZjooZnVuIG1fYW5kX2JvdW5kcyAtPlxuICAgICAgbGV0JXBhdHRlcm5fYmluZC5VaV9pbmNyIG0sIGJvdW5kcyA9IG1fYW5kX2JvdW5kcyBpblxuICAgICAgSW5jcl9tYXAuc3VicmFuZ2VfYnlfcmFuayBtIGJvdW5kcylcbiAgOztcblxuICBsZXQgcmVrZXkgKHR5cGUgayBjbXApIG0gfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcikgfmYgPVxuICAgIEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5yZWtleSB+Y29tcGFyYXRvcjoobW9kdWxlIE0pIH5mKVxuICA7O1xuXG4gIGxldCBpbmRleF9ieWlcbiAgICAodHlwZSBrIGNtcClcbiAgICBtXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICB+aW5kZXhcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLmluZGV4X2J5aSB+Y29tcGFyYXRvcjoobW9kdWxlIE0pIH5pbmRleClcbiAgOztcblxuICBsZXQgaW5kZXhfYnlcbiAgICAodHlwZSBrIGNtcClcbiAgICBtXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICB+aW5kZXhcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLmluZGV4X2J5IH5jb21wYXJhdG9yOihtb2R1bGUgTSkgfmluZGV4KVxuICA7O1xuXG4gIGxldCB1bm9yZGVyZWRfZm9sZF9uZXN0ZWRfbWFwcyA/dXBkYXRlIG0gfmluaXQgfmFkZCB+cmVtb3ZlID1cbiAgICBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAudW5vcmRlcmVkX2ZvbGRfbmVzdGVkX21hcHMgP3VwZGF0ZSB+aW5pdCB+YWRkIH5yZW1vdmUpXG4gIDs7XG5cbiAgbGV0IHRyYW5zcG9zZSAodHlwZSBrIGNtcCkgKChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcikgbSA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLnRyYW5zcG9zZSAobW9kdWxlIE0pKVxuICA7O1xuXG4gIGxldCBjb2xsYXBzZSAodHlwZSBrIGNtcCkgbSB+Y29tcGFyYXRvcjooKG1vZHVsZSBNKSA6IChrLCBjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKSA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLmNvbGxhcHNlIH5jb21wYXJhdG9yOihtb2R1bGUgTSkpXG4gIDs7XG5cbiAgbGV0IGNvbGxhcHNlX2J5XG4gICAgKHR5cGUgayBjbXApXG4gICAgbVxuICAgIH5tZXJnZV9rZXlzXG4gICAgfmNvbXBhcmF0b3I6KChtb2R1bGUgTSkgOiAoaywgY21wKSBNb2R1bGVfdHlwZXMuY29tcGFyYXRvcilcbiAgICA9XG4gICAgSW5jci5jb21wdXRlIG0gfmY6KEluY3JfbWFwLmNvbGxhcHNlX2J5IH5jb21wYXJhdG9yOihtb2R1bGUgTSkgfm1lcmdlX2tleXMpXG4gIDs7XG5cbiAgbGV0IGV4cGFuZFxuICAgICh0eXBlIGsgazIgY21wIGNtcDIpXG4gICAgbVxuICAgIH5vdXRlcl9jb21wYXJhdG9yOigobW9kdWxlIE1fb3V0ZXIpIDogKGssIGNtcCkgTW9kdWxlX3R5cGVzLmNvbXBhcmF0b3IpXG4gICAgfmlubmVyX2NvbXBhcmF0b3I6KChtb2R1bGUgTV9pbm5lcikgOiAoazIsIGNtcDIpIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yKVxuICAgID1cbiAgICBJbmNyLmNvbXB1dGVcbiAgICAgIG1cbiAgICAgIH5mOlxuICAgICAgICAoSW5jcl9tYXAuZXhwYW5kXG4gICAgICAgICAgIH5pbm5lcl9jb21wYXJhdG9yOihtb2R1bGUgTV9pbm5lcilcbiAgICAgICAgICAgfm91dGVyX2NvbXBhcmF0b3I6KG1vZHVsZSBNX291dGVyKSlcbiAgOztcblxuICBsZXQgY291bnRpIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuY291bnRpIH5mKVxuICBsZXQgY291bnQgbSB+ZiA9IEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5jb3VudCB+ZilcbiAgbGV0IGZvcl9hbGxpIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuZm9yX2FsbGkgfmYpXG4gIGxldCBmb3JfYWxsIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuZm9yX2FsbCB+ZilcbiAgbGV0IGV4aXN0c2kgbSB+ZiA9IEluY3IuY29tcHV0ZSBtIH5mOihJbmNyX21hcC5leGlzdHNpIH5mKVxuICBsZXQgZXhpc3RzIG0gfmYgPSBJbmNyLmNvbXB1dGUgbSB+ZjooSW5jcl9tYXAuZXhpc3RzIH5mKVxuICBsZXQgc3VtIG0gYWxnZWJyYSB+ZiA9IEluY3IuY29tcHV0ZSBtIH5mOihmdW4gbSAtPiBJbmNyX21hcC5zdW0gbSBhbGdlYnJhIH5mKVxuZW5kXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcbmluY2x1ZGUgUHJvY19taW5cbm1vZHVsZSBWYXIgPSBWYXJcblxubW9kdWxlIExldF9zeW50YXggPSBzdHJ1Y3RcbiAgbGV0IHJldHVybiA9IHJlYWRcblxuICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgIGxldCBzdWIgPSBzdWJcbiAgICBsZXQgc3dpdGNoID0gc3dpdGNoXG4gICAgbGV0IHJldHVybiA9IHJldHVyblxuICAgIGxldCBtYXAgP2hlcmUgdCB+ZiA9IHsgKFZhbHVlLm1hcCB0IH5mKSB3aXRoIGhlcmUgfVxuICAgIGxldCBib3RoID0gVmFsdWUuYm90aFxuICAgIGxldCBtYXAyID0gVmFsdWUubWFwMlxuICAgIGxldCBhcnIgP2hlcmUgdCB+ZiA9IHJlYWQgKG1hcCA/aGVyZSB0IH5mKVxuICAgIGxldCBjdXRvZmYgdCB+ZXF1YWwgPSBWYWx1ZS5jdXRvZmYgfmFkZGVkX2J5X2xldF9zeW50YXg6dHJ1ZSB0IH5lcXVhbFxuXG4gICAgaW5jbHVkZSAoVmFsdWUgOiBNYXBuIHdpdGggdHlwZSAnYSB0IDo9ICdhIFZhbHVlLnQpXG4gIGVuZFxuXG4gIGxldCAoID4+fCApIGEgZiA9IExldF9zeW50YXgubWFwIGEgfmZcbiAgbGV0ICggPCo+ICkgZiBhID0gVmFsdWUubWFwMiBmIGEgfmY6KGZ1biBmIGEgLT4gZiBhKVxuICBsZXQgKCA8JD4gKSBmIGEgPSBMZXRfc3ludGF4Lm1hcCBhIH5mXG5lbmRcblxub3BlbiBMZXRfc3ludGF4XG5cbmxldCBwdXJlIGYgaSA9IHJlYWQgKFZhbHVlLm1hcCBpIH5mKVxubGV0IGNvbnN0IHggPSByZWFkIChWYWx1ZS5yZXR1cm4geClcbmxldCB3aXRoX21vZGVsX3Jlc2V0dGVyJyA9IHdpdGhfbW9kZWxfcmVzZXR0ZXJcblxubGV0IGZpeCBpbnB1dCB+ZiA9XG4gIGxldCByZWMgcmVjdXJzZSBpMiA9IGxhenlfIChsYXp5IChmIH5yZWN1cnNlIGkyKSkgaW5cbiAgZiB+cmVjdXJzZSBpbnB1dFxuOztcblxubGV0IGZpeDIgYSBiIH5mID1cbiAgbGV0IHJlYyByZWN1cnNlIGEgYiA9IGxhenlfIChsYXp5IChmIH5yZWN1cnNlIGEgYikpIGluXG4gIGYgfnJlY3Vyc2UgYSBiXG47O1xuXG5sZXQgd2l0aF9tb2RlbF9yZXNldHRlciBpbnNpZGUgPVxuICB3aXRoX21vZGVsX3Jlc2V0dGVyJyAoZnVuIH5yZXNldCAtPlxuICAgIGxldCVzdWIgciA9IGluc2lkZSBpblxuICAgIHJldHVybiAoVmFsdWUuYm90aCByIHJlc2V0KSlcbjs7XG5cbmxldCBlbnVtICh0eXBlIGspIChtb2R1bGUgRSA6IEVudW0gd2l0aCB0eXBlIHQgPSBrKSB+bWF0Y2hfIH53aXRoXyA9XG4gIGxldCBtb2R1bGUgRSA9IHN0cnVjdFxuICAgIGluY2x1ZGUgRVxuICAgIGluY2x1ZGUgQ29tcGFyYXRvci5NYWtlIChFKVxuICBlbmRcbiAgaW5cbiAgbGV0IGZvcndhcmRfaW5kZXggPSBMaXN0LnRvX2FycmF5IEUuYWxsIGluXG4gIGxldCByZXZlcnNlX2luZGV4ID1cbiAgICBNYXAub2ZfYWxpc3RfZXhuIChtb2R1bGUgRSkgKExpc3QubWFwaSBFLmFsbCB+ZjooZnVuIGkgayAtPiBrLCBpKSlcbiAgaW5cbiAgbGV0IG1hdGNoXyA9IG1hdGNoXyA+PnwgTWFwLmZpbmRfZXhuIHJldmVyc2VfaW5kZXggaW5cbiAgbGV0IGJyYW5jaGVzID0gQXJyYXkubGVuZ3RoIGZvcndhcmRfaW5kZXggaW5cbiAgbGV0IHdpdGhfIGkgPSB3aXRoXyAoQXJyYXkuZ2V0IGZvcndhcmRfaW5kZXggaSkgaW5cbiAgTGV0X3N5bnRheC5zd2l0Y2ggfmhlcmU6WyVoZXJlXSB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gW0Bub250YWlsXVxuOztcblxubGV0IHNjb3BlX21vZGVsXG4gICh0eXBlIGEgY21wKVxuICAobW9kdWxlIE0gOiBDb21wYXJhdG9yIHdpdGggdHlwZSB0ID0gYSBhbmQgdHlwZSBjb21wYXJhdG9yX3dpdG5lc3MgPSBjbXApXG4gIH5vbjp2XG4gIGNvbXB1dGF0aW9uXG4gID1cbiAgbGV0IHYgPSBWYWx1ZS5tYXAgdiB+ZjooZnVuIGsgLT4gTWFwLnNpbmdsZXRvbiAobW9kdWxlIE0pIGsgKCkpIGluXG4gIGxldCVzdWIgbWFwID0gYXNzb2MgKG1vZHVsZSBNKSB2IH5mOihmdW4gXyBfIC0+IGNvbXB1dGF0aW9uKSBpblxuICBsZXQlYXJyIG1hcCA9IG1hcCBpblxuICAoKiBUaGlzIF9leG4gaXMgb2sgYmVjYXVzZSB3ZSBrbm93IHRoYXQgdGhlIG1hcCBpcyBhIHNpbmdsZXRvbiAqKVxuICBsZXQgX2ssIHIgPSBNYXAubWF4X2VsdF9leG4gbWFwIGluXG4gIHJcbjs7XG5cbmxldCBvZl9tb2R1bGUxXG4gICh0eXBlIGkgbSBhIHIpXG4gID9zZXhwX29mX21vZGVsXG4gIChjb21wb25lbnQgOiAoaSwgbSwgYSwgcikgY29tcG9uZW50X3MpXG4gID9lcXVhbFxuICB+ZGVmYXVsdF9tb2RlbFxuICBpbnB1dFxuICA9XG4gIGxldCAobW9kdWxlIE0pID0gY29tcG9uZW50IGluXG4gIGxldCVzdWIgaW5wdXQgPSByZXR1cm4gaW5wdXQgaW5cbiAgbGV0JXN1YiBtb2RlbF9hbmRfaW5qZWN0ID1cbiAgICBzdGF0ZV9tYWNoaW5lMVxuICAgICAgfnNleHBfb2ZfYWN0aW9uOk0uQWN0aW9uLnNleHBfb2ZfdFxuICAgICAgP3NleHBfb2ZfbW9kZWxcbiAgICAgID9lcXVhbFxuICAgICAgfmRlZmF1bHRfbW9kZWxcbiAgICAgIH5hcHBseV9hY3Rpb246KGZ1biBjb250ZXh0IGlucHV0IG1vZGVsIGFjdGlvbiAtPlxuICAgICAgICBtYXRjaCBpbnB1dCB3aXRoXG4gICAgICAgIHwgQWN0aXZlIGlucHV0IC0+IE0uYXBwbHlfYWN0aW9uIGNvbnRleHQgaW5wdXQgbW9kZWwgYWN0aW9uXG4gICAgICAgIHwgSW5hY3RpdmUgLT5cbiAgICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgICAgIFslaGVyZV1cbiAgICAgICAgICAgICAgICBcIkFuIGFjdGlvbiBzZW50IHRvIGFuIFtvZl9tb2R1bGUxXSBoYXMgYmVlbiBkcm9wcGVkIGJlY2F1c2UgaXRzIGlucHV0IFxcXG4gICAgICAgICAgICAgICAgIHdhcyBub3QgcHJlc2VudC4gVGhpcyBoYXBwZW5zIHdoZW4gdGhlIFtvZl9tb2R1bGUxXSBpcyBpbmFjdGl2ZSB3aGVuIGl0IFxcXG4gICAgICAgICAgICAgICAgIHJlY2VpdmVzIGEgbWVzc2FnZS5cIlxuICAgICAgICAgICAgICAgIChhY3Rpb24gOiBNLkFjdGlvbi50KV07XG4gICAgICAgICAgbW9kZWwpXG4gICAgICBpbnB1dFxuICBpblxuICBsZXQlYXJyIG1vZGVsLCBpbmplY3QgPSBtb2RlbF9hbmRfaW5qZWN0XG4gIGFuZCBpbnB1dCA9IGlucHV0IGluXG4gIE0uY29tcHV0ZSB+aW5qZWN0IGlucHV0IG1vZGVsXG47O1xuXG5sZXQgb2ZfbW9kdWxlMiA/c2V4cF9vZl9tb2RlbCBjID9lcXVhbCB+ZGVmYXVsdF9tb2RlbCBpMSBpMiA9XG4gIG9mX21vZHVsZTEgP3NleHBfb2ZfbW9kZWwgYyA/ZXF1YWwgfmRlZmF1bHRfbW9kZWwgKFZhbHVlLmJvdGggaTEgaTIpXG47O1xuXG5sZXQgcmFjZV9keW5hbWljX21vZGVsXG4gICh0eXBlIG0pXG4gID9zZXhwX29mX2FjdGlvblxuICA/c2V4cF9vZl9tb2RlbFxuICB+ZXF1YWxcbiAgfm1vZGVsXG4gIH5hcHBseV9hY3Rpb25cbiAgaW5wdXRcbiAgPVxuICBsZXQgbW9kZWxfY3JlYXRvciA9XG4gICAgbWF0Y2ggbW9kZWwgd2l0aFxuICAgIHwgYEdpdmVuIG0gLT5cbiAgICAgIFZhbHVlLm1hcCBtIH5mOihmdW4gbSAtPiBmdW5jdGlvblxuICAgICAgICB8IE5vbmUgLT4gbVxuICAgICAgICB8IFNvbWUgYSAtPiBhKVxuICAgIHwgYENvbXB1dGVkIGYgLT4gZlxuICBpblxuICBsZXQgbW9kdWxlIE1fYWN0dWFsID0gc3RydWN0XG4gICAgdHlwZSBtb2RlbCA9IG1cblxuICAgIGxldCBlcXVhbF9tb2RlbCA9IGVxdWFsXG5cbiAgICB0eXBlIHQgPSBtb2RlbCBvcHRpb24gW0BAZGVyaXZpbmcgZXF1YWxdXG4gIGVuZFxuICBpblxuICBsZXQgYXBwbHlfYWN0aW9uIGNvbnRleHQgY29tcHV0YXRpb25fc3RhdHVzIG1vZGVsIGFjdGlvbiA9XG4gICAgbGV0JXR5ZGkgeyBpbmplY3Q7IHNjaGVkdWxlX2V2ZW50IH0gPSBBcHBseV9hY3Rpb25fY29udGV4dC5Qcml2YXRlLnJldmVhbCBjb250ZXh0IGluXG4gICAgbWF0Y2ggY29tcHV0YXRpb25fc3RhdHVzIHdpdGhcbiAgICB8IENvbXB1dGF0aW9uX3N0YXR1cy5BY3RpdmUgKGlucHV0LCBtb2RlbF9jcmVhdG9yKSAtPlxuICAgICAgbGV0IG1vZGVsID0gU29tZSAobW9kZWxfY3JlYXRvciBtb2RlbCkgaW5cbiAgICAgIFNvbWVcbiAgICAgICAgKGFwcGx5X2FjdGlvblxuICAgICAgICAgICB+aW5qZWN0XG4gICAgICAgICAgIH5zY2hlZHVsZV9ldmVudFxuICAgICAgICAgICAoQ29tcHV0YXRpb25fc3RhdHVzLkFjdGl2ZSBpbnB1dClcbiAgICAgICAgICAgbW9kZWxcbiAgICAgICAgICAgYWN0aW9uKVxuICAgIHwgSW5hY3RpdmUgLT4gU29tZSAoYXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IEluYWN0aXZlIG1vZGVsIGFjdGlvbilcbiAgaW5cbiAgbGV0JXN1YiBtb2RlbF9hbmRfaW5qZWN0ID1cbiAgICBzdGF0ZV9tYWNoaW5lMVxuICAgICAgP3NleHBfb2ZfYWN0aW9uXG4gICAgICA/c2V4cF9vZl9tb2RlbDooT3B0aW9uLm1hcCBzZXhwX29mX21vZGVsIH5mOk9wdGlvbi5zZXhwX29mX3QpXG4gICAgICB+ZXF1YWw6WyVlcXVhbDogTV9hY3R1YWwudF1cbiAgICAgIH5kZWZhdWx0X21vZGVsOk5vbmVcbiAgICAgIH5hcHBseV9hY3Rpb25cbiAgICAgIChWYWx1ZS5ib3RoIGlucHV0IG1vZGVsX2NyZWF0b3IpXG4gIGluXG4gIGxldCVhcnIgbW9kZWwsIGluamVjdCA9IG1vZGVsX2FuZF9pbmplY3RcbiAgYW5kIG1vZGVsX2NyZWF0b3IgPSBtb2RlbF9jcmVhdG9yIGluXG4gIG1vZGVsX2NyZWF0b3IgbW9kZWwsIGluamVjdFxuOztcblxubGV0IG9mX21vZHVsZTBcbiAgKHR5cGUgbSBhIHIpXG4gID9zZXhwX29mX21vZGVsXG4gID9lcXVhbFxuICAoY29tcG9uZW50IDogKHVuaXQsIG0sIGEsIHIpIGNvbXBvbmVudF9zKVxuICB+ZGVmYXVsdF9tb2RlbFxuICA9XG4gIGxldCAobW9kdWxlIE0pID0gY29tcG9uZW50IGluXG4gIGxldCVzdWIgbW9kZWxfYW5kX2luamVjdCA9XG4gICAgc3RhdGVfbWFjaGluZTBcbiAgICAgICgpXG4gICAgICB+c2V4cF9vZl9hY3Rpb246TS5BY3Rpb24uc2V4cF9vZl90XG4gICAgICA/c2V4cF9vZl9tb2RlbFxuICAgICAgP2VxdWFsXG4gICAgICB+ZGVmYXVsdF9tb2RlbFxuICAgICAgfmFwcGx5X2FjdGlvbjooZnVuIGNvbnRleHQgbW9kZWwgYWN0aW9uIC0+IE0uYXBwbHlfYWN0aW9uIGNvbnRleHQgKCkgbW9kZWwgYWN0aW9uKVxuICBpblxuICBsZXQlYXJyIG1vZGVsLCBpbmplY3QgPSBtb2RlbF9hbmRfaW5qZWN0IGluXG4gIE0uY29tcHV0ZSB+aW5qZWN0ICgpIG1vZGVsXG47O1xuXG5sZXQgYWN0b3IxXG4gIDogdHlwZSBpbnB1dCBtb2RlbCBhY3Rpb24gcmV0dXJuLlxuICAgID9zZXhwX29mX2FjdGlvbjooYWN0aW9uIC0+IFNleHAudClcbiAgICAtPiA/cmVzZXQ6XG4gICAgICAgICAoaW5qZWN0OihhY3Rpb24gLT4gcmV0dXJuIEVmZmVjdC50KVxuICAgICAgICAgIC0+IHNjaGVkdWxlX2V2ZW50Oih1bml0IEVmZmVjdC50IC0+IHVuaXQpXG4gICAgICAgICAgLT4gbW9kZWxcbiAgICAgICAgICAtPiBtb2RlbClcbiAgICAtPiA/c2V4cF9vZl9tb2RlbDoobW9kZWwgLT4gU2V4cC50KVxuICAgIC0+ID9lcXVhbDoobW9kZWwgLT4gbW9kZWwgLT4gYm9vbClcbiAgICAtPiBkZWZhdWx0X21vZGVsOm1vZGVsXG4gICAgLT4gcmVjdjpcbiAgICAgICAgIChpbmplY3Q6KGFjdGlvbiAtPiByZXR1cm4gRWZmZWN0LnQpXG4gICAgICAgICAgLT4gc2NoZWR1bGVfZXZlbnQ6KHVuaXQgRWZmZWN0LnQgLT4gdW5pdClcbiAgICAgICAgICAtPiBpbnB1dCBDb21wdXRhdGlvbl9zdGF0dXMudFxuICAgICAgICAgIC0+IG1vZGVsXG4gICAgICAgICAgLT4gYWN0aW9uXG4gICAgICAgICAgLT4gbW9kZWwgKiByZXR1cm4pXG4gICAgLT4gaW5wdXQgVmFsdWUudFxuICAgIC0+IChtb2RlbCAqIChhY3Rpb24gLT4gcmV0dXJuIEVmZmVjdC50KSkgQ29tcHV0YXRpb24udFxuICA9XG4gIGZ1biA/KHNleHBfb2ZfYWN0aW9uID0gc2V4cF9vZl9vcGFxdWUpXG4gICAgICA/cmVzZXRcbiAgICAgID9zZXhwX29mX21vZGVsXG4gICAgICA/ZXF1YWxcbiAgICAgIH5kZWZhdWx0X21vZGVsXG4gICAgICB+cmVjdlxuICAgICAgaW5wdXQgLT5cbiAgbGV0IG1vZHVsZSBBY3Rpb25fd2l0aF9jYWxsYmFjayA9IHN0cnVjdFxuICAgIGxldCBzZXhwX29mX3QgY2IgPSBzZXhwX29mX2FjdGlvbiAoRWZmZWN0LlByaXZhdGUuQ2FsbGJhY2sucmVxdWVzdCBjYilcbiAgZW5kXG4gIGluXG4gIGxldCBtYWtlX2luamVjdCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBhY3Rpb24gPVxuICAgIEVmZmVjdC5Qcml2YXRlLm1ha2UgfnJlcXVlc3Q6YWN0aW9uIH5ldmFsdWF0b3I6KGZ1biBhY3Rpb24gLT5cbiAgICAgIHNjaGVkdWxlX2V2ZW50IChpbmplY3QgYWN0aW9uKSlcbiAgaW5cbiAgbGV0IHJlc2V0ID1cbiAgICBPcHRpb24ubWFwIHJlc2V0IH5mOihmdW4gZiBjb250ZXh0IG1vZGVsIC0+XG4gICAgICBsZXQldHlkaSB7IGluamVjdDsgc2NoZWR1bGVfZXZlbnQgfSA9IEFwcGx5X2FjdGlvbl9jb250ZXh0LlByaXZhdGUucmV2ZWFsIGNvbnRleHQgaW5cbiAgICAgIGxldCBpbmplY3QgPSBtYWtlX2luamVjdCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBpblxuICAgICAgZiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBtb2RlbClcbiAgaW5cbiAgbGV0JXN1YiBtb2RlbCwgaW5qZWN0ID1cbiAgICBzdGF0ZV9tYWNoaW5lMVxuICAgICAgfnNleHBfb2ZfYWN0aW9uOlslc2V4cF9vZjogQWN0aW9uX3dpdGhfY2FsbGJhY2sudF1cbiAgICAgID9zZXhwX29mX21vZGVsXG4gICAgICA/cmVzZXRcbiAgICAgID9lcXVhbFxuICAgICAgfmRlZmF1bHRfbW9kZWxcbiAgICAgIH5hcHBseV9hY3Rpb246KGZ1biBjb250ZXh0IGlucHV0IG1vZGVsIGNhbGxiYWNrIC0+XG4gICAgICAgIGxldCV0eWRpIHsgaW5qZWN0OyBzY2hlZHVsZV9ldmVudCB9ID1cbiAgICAgICAgICBBcHBseV9hY3Rpb25fY29udGV4dC5Qcml2YXRlLnJldmVhbCBjb250ZXh0XG4gICAgICAgIGluXG4gICAgICAgIGxldCBpbmplY3QgPSBtYWtlX2luamVjdCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBpblxuICAgICAgICBsZXQgYWN0aW9uID0gRWZmZWN0LlByaXZhdGUuQ2FsbGJhY2sucmVxdWVzdCBjYWxsYmFjayBpblxuICAgICAgICBsZXQgbmV3X21vZGVsLCByZXNwb25zZSA9IHJlY3YgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgaW5wdXQgbW9kZWwgYWN0aW9uIGluXG4gICAgICAgIHNjaGVkdWxlX2V2ZW50IChFZmZlY3QuUHJpdmF0ZS5DYWxsYmFjay5yZXNwb25kX3RvIGNhbGxiYWNrIHJlc3BvbnNlKTtcbiAgICAgICAgbmV3X21vZGVsKVxuICAgICAgaW5wdXRcbiAgaW5cbiAgbGV0JXN1YiBpbmplY3QgPVxuICAgIGxldCVhcnIgaW5qZWN0ID0gaW5qZWN0IGluXG4gICAgbWFrZV9pbmplY3QgfmluamVjdCB+c2NoZWR1bGVfZXZlbnQ6RWZmZWN0LkV4cGVydC5oYW5kbGVcbiAgaW5cbiAgbGV0JWFyciBtb2RlbCA9IG1vZGVsXG4gIGFuZCBpbmplY3QgPSBpbmplY3QgaW5cbiAgbW9kZWwsIGluamVjdFxuOztcblxubGV0IGFjdG9yMCA/cmVzZXQgP3NleHBfb2ZfbW9kZWwgP3NleHBfb2ZfYWN0aW9uID9lcXVhbCB+ZGVmYXVsdF9tb2RlbCB+cmVjdiAoKSA9XG4gIGxldCByZWN2IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IChfIDogdW5pdCBDb21wdXRhdGlvbl9zdGF0dXMudCkgPVxuICAgIHJlY3YgfmluamVjdCB+c2NoZWR1bGVfZXZlbnRcbiAgaW5cbiAgYWN0b3IxXG4gICAgP3NleHBfb2ZfYWN0aW9uXG4gICAgP3NleHBfb2ZfbW9kZWxcbiAgICA/ZXF1YWxcbiAgICA/cmVzZXRcbiAgICB+ZGVmYXVsdF9tb2RlbFxuICAgIH5yZWN2XG4gICAgKFZhbHVlLnJldHVybiAoKSlcbjs7XG5cbmxldCBzdGF0ZSA/cmVzZXQgP3NleHBfb2ZfbW9kZWwgP2VxdWFsIGRlZmF1bHRfbW9kZWwgPVxuICBsZXQgc2V4cF9vZl9hY3Rpb24gPVxuICAgICgqIE5PVEU6IFRoZSBtb2RlbCBhbmQgdGhlIGFjdGlvbiBmb3IgW3N0YXRlXSBhcmUgdGhlIHNhbWUuICopXG4gICAgT3B0aW9uLnZhbHVlIH5kZWZhdWx0OnNleHBfb2Zfb3BhcXVlIHNleHBfb2ZfbW9kZWxcbiAgaW5cbiAgbGV0IHJlc2V0ID1cbiAgICBPcHRpb24ubWFwIHJlc2V0IH5mOihmdW4gcmVzZXQgKF8gOiBfIEFwcGx5X2FjdGlvbl9jb250ZXh0LnQpIG0gLT4gcmVzZXQgbSlcbiAgaW5cbiAgc3RhdGVfbWFjaGluZTBcbiAgICA/cmVzZXRcbiAgICB+c2V4cF9vZl9hY3Rpb25cbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgID9lcXVhbFxuICAgIH5hcHBseV9hY3Rpb246KGZ1biAoXyA6IF8gQXBwbHlfYWN0aW9uX2NvbnRleHQudCkgX29sZF9tb2RlbCBuZXdfbW9kZWwgLT4gbmV3X21vZGVsKVxuICAgIH5kZWZhdWx0X21vZGVsXG4gICAgKClcbjs7XG5cbm1vZHVsZSBUb2dnbGUgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB7IHN0YXRlIDogYm9vbFxuICAgIDsgc2V0X3N0YXRlIDogYm9vbCAtPiB1bml0IEVmZmVjdC50XG4gICAgOyB0b2dnbGUgOiB1bml0IEVmZmVjdC50XG4gICAgfVxuZW5kXG5cbmxldCB0b2dnbGUnIH5kZWZhdWx0X21vZGVsID1cbiAgbGV0IG1vZHVsZSBBY3Rpb24gPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPVxuICAgICAgfCBUb2dnbGVcbiAgICAgIHwgU2V0IG9mIGJvb2xcbiAgICBbQEBkZXJpdmluZyBzZXhwXVxuICBlbmRcbiAgaW5cbiAgbGV0JXN1YiBzdGF0ZV9hbmRfaW5qZWN0ID1cbiAgICBzdGF0ZV9tYWNoaW5lMFxuICAgICAgfnNleHBfb2ZfbW9kZWw6WyVzZXhwX29mOiBCb29sLnRdXG4gICAgICB+c2V4cF9vZl9hY3Rpb246WyVzZXhwX29mOiBBY3Rpb24udF1cbiAgICAgIH5lcXVhbDpbJWVxdWFsOiBCb29sLnRdXG4gICAgICB+ZGVmYXVsdF9tb2RlbFxuICAgICAgfmFwcGx5X2FjdGlvbjooZnVuIChfIDogXyBBcHBseV9hY3Rpb25fY29udGV4dC50KSBzdGF0ZSAtPiBmdW5jdGlvblxuICAgICAgICB8IFRvZ2dsZSAtPiBub3Qgc3RhdGVcbiAgICAgICAgfCBTZXQgc3RhdGUgLT4gc3RhdGUpXG4gICAgICAoKVxuICBpblxuICBsZXQlYXJyIHN0YXRlX2FuZF9pbmplY3QgPSBzdGF0ZV9hbmRfaW5qZWN0IGluXG4gIGxldCBzdGF0ZSwgaW5qZWN0ID0gc3RhdGVfYW5kX2luamVjdCBpblxuICB7IFRvZ2dsZS5zdGF0ZTsgc2V0X3N0YXRlID0gKGZ1biBzdGF0ZSAtPiBpbmplY3QgKFNldCBzdGF0ZSkpOyB0b2dnbGUgPSBpbmplY3QgVG9nZ2xlIH1cbjs7XG5cbmxldCB0b2dnbGUgfmRlZmF1bHRfbW9kZWwgPVxuICBsZXQlc3ViIHsgc3RhdGU7IHRvZ2dsZTsgc2V0X3N0YXRlID0gXyB9ID0gdG9nZ2xlJyB+ZGVmYXVsdF9tb2RlbCBpblxuICBsZXQlYXJyIHN0YXRlID0gc3RhdGVcbiAgYW5kIHRvZ2dsZSA9IHRvZ2dsZSBpblxuICBzdGF0ZSwgdG9nZ2xlXG47O1xuXG5sZXQgc3RhdGVfb3B0ID9yZXNldCA/ZGVmYXVsdF9tb2RlbCA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgKCkgPVxuICBzdGF0ZVxuICAgID9yZXNldFxuICAgIGRlZmF1bHRfbW9kZWxcbiAgICA/ZXF1YWw6KE9wdGlvbi5tYXAgfmY6T3B0aW9uLmVxdWFsIGVxdWFsKVxuICAgID9zZXhwX29mX21vZGVsOihPcHRpb24ubWFwIH5mOk9wdGlvbi5zZXhwX29mX3Qgc2V4cF9vZl9tb2RlbClcbjs7XG5cbmxldCBwYXRoX2lkID1cbiAgbGV0JXN1YiBwYXRoID0gcGF0aCBpblxuICBsZXQlYXJyIHBhdGggPSBwYXRoIGluXG4gIFBhdGgudG9fdW5pcXVlX2lkZW50aWZpZXJfc3RyaW5nIHBhdGhcbjs7XG5cbmxldCB5b2luayBhID1cbiAgbGV0JXN1YiBfLCByZXN1bHQgPVxuICAgIGFjdG9yMVxuICAgICAgfnNleHBfb2ZfbW9kZWw6WyVzZXhwX29mOiBVbml0LnRdXG4gICAgICB+c2V4cF9vZl9hY3Rpb246WyVzZXhwX29mOiBVbml0LnRdXG4gICAgICB+ZXF1YWw6WyVlcXVhbDogVW5pdC50XVxuICAgICAgfnJlY3Y6KGZ1biB+aW5qZWN0Ol8gfnNjaGVkdWxlX2V2ZW50Ol8gYSAoKSAoKSAtPiAoKSwgYSlcbiAgICAgIH5kZWZhdWx0X21vZGVsOigpXG4gICAgICBhXG4gIGluXG4gIGxldCVhcnIgcmVzdWx0ID0gcmVzdWx0IGluXG4gIHJlc3VsdCAoKVxuOztcblxubW9kdWxlIEVkZ2UgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBFZGdlXG5cbiAgbGV0IGxpZmVjeWNsZScgP29uX2FjdGl2YXRlID9vbl9kZWFjdGl2YXRlID9hZnRlcl9kaXNwbGF5ICgpID1cbiAgICBsZXQgdHJhbnNwb3NlX2pvaW4gOiAnYSBvcHRpb24gVmFsdWUudCBvcHRpb24gLT4gJ2Egb3B0aW9uIFZhbHVlLnQgPSBmdW5jdGlvblxuICAgICAgfCBTb21lIGEgLT4gYVxuICAgICAgfCBOb25lIC0+IFZhbHVlLnJldHVybiBOb25lXG4gICAgaW5cbiAgICBsZXQlc3ViIHRyaXBsZSA9XG4gICAgICBsZXQlYXJyIGEgPSB0cmFuc3Bvc2Vfam9pbiBvbl9hY3RpdmF0ZVxuICAgICAgYW5kIGIgPSB0cmFuc3Bvc2Vfam9pbiBvbl9kZWFjdGl2YXRlXG4gICAgICBhbmQgYyA9IHRyYW5zcG9zZV9qb2luIGFmdGVyX2Rpc3BsYXkgaW5cbiAgICAgIGEsIGIsIGNcbiAgICBpblxuICAgIGxldCVzdWIgdCA9XG4gICAgICBtYXRjaCVhcnIgdHJpcGxlIHdpdGhcbiAgICAgIHwgTm9uZSwgTm9uZSwgTm9uZSAtPiBOb25lXG4gICAgICB8IG9uX2FjdGl2YXRlLCBvbl9kZWFjdGl2YXRlLCBhZnRlcl9kaXNwbGF5IC0+XG4gICAgICAgIFNvbWUgeyBMaWZlY3ljbGUub25fYWN0aXZhdGU7IG9uX2RlYWN0aXZhdGU7IGFmdGVyX2Rpc3BsYXkgfVxuICAgIGluXG4gICAgbGlmZWN5Y2xlIHRcbiAgOztcblxuICBsZXQgbGlmZWN5Y2xlID9vbl9hY3RpdmF0ZSA/b25fZGVhY3RpdmF0ZSA/YWZ0ZXJfZGlzcGxheSAoKSA9XG4gICAgbGlmZWN5Y2xlJ1xuICAgICAgP29uX2FjdGl2YXRlOihPcHRpb24ubWFwIG9uX2FjdGl2YXRlIH5mOihWYWx1ZS5tYXAgfmY6T3B0aW9uLnNvbWUpKVxuICAgICAgP29uX2RlYWN0aXZhdGU6KE9wdGlvbi5tYXAgb25fZGVhY3RpdmF0ZSB+ZjooVmFsdWUubWFwIH5mOk9wdGlvbi5zb21lKSlcbiAgICAgID9hZnRlcl9kaXNwbGF5OihPcHRpb24ubWFwIGFmdGVyX2Rpc3BsYXkgfmY6KFZhbHVlLm1hcCB+ZjpPcHRpb24uc29tZSkpXG4gICAgICAoKVxuICA7O1xuXG4gIGxldCBhZnRlcl9kaXNwbGF5JyBldmVudF9vcHRfdmFsdWUgPSBsaWZlY3ljbGUnIH5hZnRlcl9kaXNwbGF5OmV2ZW50X29wdF92YWx1ZSAoKVxuXG4gIGxldCBhZnRlcl9kaXNwbGF5IGV2ZW50X3ZhbHVlID1cbiAgICBsZXQgZXZlbnRfdmFsdWUgPSBWYWx1ZS5tYXAgZXZlbnRfdmFsdWUgfmY6T3B0aW9uLnNvbWUgaW5cbiAgICBsaWZlY3ljbGUnIH5hZnRlcl9kaXNwbGF5OmV2ZW50X3ZhbHVlICgpXG4gIDs7XG5cbiAgbGV0IHdhaXRfYWZ0ZXJfZGlzcGxheSA9XG4gICAgSW5jcjAud2l0aF9jbG9jayAoZnVuIGNsb2NrIC0+IFVpX2luY3IucmV0dXJuIChUaW1lX3NvdXJjZS53YWl0X2FmdGVyX2Rpc3BsYXkgY2xvY2spKVxuICA7O1xuXG4gIGxldCBvbl9jaGFuZ2UnID9zZXhwX29mX21vZGVsIH5lcXVhbCBpbnB1dCB+Y2FsbGJhY2sgPVxuICAgIGxldCVzdWIgc3RhdGUsIHNldF9zdGF0ZSA9IHN0YXRlX29wdCA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgKCkgaW5cbiAgICBsZXQlc3ViIHVwZGF0ZSA9XG4gICAgICBtYXRjaCVzdWIgc3RhdGUgd2l0aFxuICAgICAgfCBOb25lIC0+XG4gICAgICAgIGxldCVhcnIgc2V0X3N0YXRlID0gc2V0X3N0YXRlXG4gICAgICAgIGFuZCBpbnB1dCA9IGlucHV0XG4gICAgICAgIGFuZCBjYWxsYmFjayA9IGNhbGxiYWNrIGluXG4gICAgICAgIFNvbWUgKFVpX2VmZmVjdC5NYW55IFsgc2V0X3N0YXRlIChTb21lIGlucHV0KTsgY2FsbGJhY2sgTm9uZSBpbnB1dCBdKVxuICAgICAgfCBTb21lIHN0YXRlIC0+XG4gICAgICAgIGxldCVhcnIgc3RhdGUgPSBzdGF0ZVxuICAgICAgICBhbmQgc2V0X3N0YXRlID0gc2V0X3N0YXRlXG4gICAgICAgIGFuZCBpbnB1dCA9IGlucHV0XG4gICAgICAgIGFuZCBjYWxsYmFjayA9IGNhbGxiYWNrIGluXG4gICAgICAgIGlmIHBoeXNfZXF1YWwgc3RhdGUgaW5wdXQgfHwgZXF1YWwgc3RhdGUgaW5wdXRcbiAgICAgICAgdGhlbiBOb25lXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBsYXp5IChVaV9lZmZlY3QuTWFueSBbIHNldF9zdGF0ZSAoU29tZSBpbnB1dCk7IGNhbGxiYWNrIChTb21lIHN0YXRlKSBpbnB1dCBdKVxuICAgICAgICAgIHw+IFVpX2VmZmVjdC5sYXp5X1xuICAgICAgICAgIHw+IFNvbWVcbiAgICBpblxuICAgIGFmdGVyX2Rpc3BsYXknIHVwZGF0ZVxuICA7O1xuXG4gIGxldCBvbl9jaGFuZ2UgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIGlucHV0IH5jYWxsYmFjayA9XG4gICAgbGV0IGNhbGxiYWNrID0gVmFsdWUubWFwIGNhbGxiYWNrIH5mOihmdW4gY2FsbGJhY2sgX3ByZXYgdmFsdWUgLT4gY2FsbGJhY2sgdmFsdWUpIGluXG4gICAgb25fY2hhbmdlJyA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgaW5wdXQgfmNhbGxiYWNrXG4gIDs7XG5cbiAgbW9kdWxlIFBvbGwgPSBzdHJ1Y3RcbiAgICBtb2R1bGUgU3RhcnRpbmcgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgKCdhLCAncikgdCA9XG4gICAgICAgIHwgRW1wdHkgOiAoJ2EsICdhIG9wdGlvbikgdFxuICAgICAgICB8IEluaXRpYWwgOiAnYSAtPiAoJ2EsICdhKSB0XG5cbiAgICAgIGxldCBlbXB0eSA9IEVtcHR5XG4gICAgICBsZXQgaW5pdGlhbCBhID0gSW5pdGlhbCBhXG4gICAgZW5kXG5cbiAgICBsZXQgbWFudWFsX3JlZnJlc2hfaW1wbGVtZW50YXRpb25cbiAgICAgICh0eXBlIHIpXG4gICAgICA/c2V4cF9vZl9tb2RlbFxuICAgICAgP2VxdWFsXG4gICAgICB+aW5pdGlhbFxuICAgICAgfndyYXBfcmVzdWx0XG4gICAgICB+ZWZmZWN0XG4gICAgICAoKVxuICAgICAgPVxuICAgICAgbGV0JXN1YiBfLCBuZXh0X3NlcW51bSA9XG4gICAgICAgIGFjdG9yMFxuICAgICAgICAgIH5zZXhwX29mX21vZGVsOlslc2V4cF9vZjogSW50LnRdXG4gICAgICAgICAgfnNleHBfb2ZfYWN0aW9uOlslc2V4cF9vZjogVW5pdC50XVxuICAgICAgICAgIH5lcXVhbDpbJWVxdWFsOiBJbnQudF1cbiAgICAgICAgICB+ZGVmYXVsdF9tb2RlbDowXG4gICAgICAgICAgfnJlY3Y6KGZ1biB+aW5qZWN0Ol8gfnNjaGVkdWxlX2V2ZW50Ol8gaSAoKSAtPiBpICsgMSwgaSlcbiAgICAgICAgICAoKVxuICAgICAgaW5cbiAgICAgIGxldCBtb2R1bGUgU3RhdGUgPSBzdHJ1Y3RcbiAgICAgICAgdHlwZSByZXN1bHQgPSByXG5cbiAgICAgICAgbGV0IHNleHBfb2ZfcmVzdWx0ID0gT3B0aW9uLnZhbHVlIH5kZWZhdWx0OnNleHBfb2Zfb3BhcXVlIHNleHBfb2ZfbW9kZWxcbiAgICAgICAgbGV0IGVxdWFsX3Jlc3VsdCA9IE9wdGlvbi52YWx1ZSBlcXVhbCB+ZGVmYXVsdDpwaHlzX2VxdWFsXG5cbiAgICAgICAgdHlwZSB0ID1cbiAgICAgICAgICB7IGxhc3Rfc2VxbnVtIDogaW50XG4gICAgICAgICAgOyBsYXN0X3Jlc3VsdCA6IHJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgW0BAZGVyaXZpbmcgc2V4cF9vZiwgZXF1YWxdXG4gICAgICBlbmRcbiAgICAgIGluXG4gICAgICBsZXQgbW9kdWxlIEFjdGlvbiA9IHN0cnVjdFxuICAgICAgICB0eXBlIHJlc3VsdCA9IHJcblxuICAgICAgICBsZXQgc2V4cF9vZl9yZXN1bHQgPSBPcHRpb24udmFsdWUgfmRlZmF1bHQ6c2V4cF9vZl9vcGFxdWUgc2V4cF9vZl9tb2RlbFxuXG4gICAgICAgIHR5cGUgdCA9IFNldCBvZiBpbnQgKiByZXN1bHQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgICAgIGVuZFxuICAgICAgaW5cbiAgICAgIGxldCVzdWIgc3RhdGUsIGluamVjdF9jaGFuZ2UgPVxuICAgICAgICBzdGF0ZV9tYWNoaW5lMFxuICAgICAgICAgIH5zZXhwX29mX21vZGVsOlslc2V4cF9vZjogU3RhdGUudF1cbiAgICAgICAgICB+c2V4cF9vZl9hY3Rpb246WyVzZXhwX29mOiBBY3Rpb24udF1cbiAgICAgICAgICB+ZXF1YWw6WyVlcXVhbDogU3RhdGUudF1cbiAgICAgICAgICB+YXBwbHlfYWN0aW9uOlxuICAgICAgICAgICAgKGZ1blxuICAgICAgICAgICAgICAoXyA6IF8gQXBwbHlfYWN0aW9uX2NvbnRleHQudCkgbW9kZWwgKEFjdGlvbi5TZXQgKHNlcW51bSwgcmVzKSkgLT5cbiAgICAgICAgICAgIGlmIHNlcW51bSA8IG1vZGVsLlN0YXRlLmxhc3Rfc2VxbnVtXG4gICAgICAgICAgICB0aGVuIG1vZGVsXG4gICAgICAgICAgICBlbHNlIHsgU3RhdGUubGFzdF9zZXFudW0gPSBzZXFudW07IGxhc3RfcmVzdWx0ID0gcmVzIH0pXG4gICAgICAgICAgfmRlZmF1bHRfbW9kZWw6eyBTdGF0ZS5sYXN0X3NlcW51bSA9IC0xOyBsYXN0X3Jlc3VsdCA9IGluaXRpYWwgfVxuICAgICAgICAgICgpXG4gICAgICBpblxuICAgICAgbGV0JXN1YiBjYWxsYmFjayA9XG4gICAgICAgIGxldCVhcnIgZWZmZWN0ID0gZWZmZWN0XG4gICAgICAgIGFuZCBuZXh0X3NlcW51bSA9IG5leHRfc2VxbnVtXG4gICAgICAgIGFuZCBpbmplY3RfY2hhbmdlID0gaW5qZWN0X2NoYW5nZSBpblxuICAgICAgICBsZXQlYmluZC5FZmZlY3Qgc2VxbnVtID0gbmV4dF9zZXFudW0gKCkgaW5cbiAgICAgICAgbGV0JWJpbmQuRWZmZWN0IHJlc3VsdCA9IGVmZmVjdCBpblxuICAgICAgICBpbmplY3RfY2hhbmdlIChBY3Rpb24uU2V0IChzZXFudW0sIHdyYXBfcmVzdWx0IHJlc3VsdCkpXG4gICAgICBpblxuICAgICAgbGV0JWFyciB7IFN0YXRlLmxhc3RfcmVzdWx0OyBfIH0gPSBzdGF0ZVxuICAgICAgYW5kIGNhbGxiYWNrID0gY2FsbGJhY2sgaW5cbiAgICAgIGxhc3RfcmVzdWx0LCBjYWxsYmFja1xuICAgIDs7XG5cbiAgICBsZXQgbWFudWFsX3JlZnJlc2hcbiAgICAgIDogdHlwZSBvIHIuXG4gICAgICAgID9zZXhwX29mX21vZGVsOihvIC0+IFNleHAudClcbiAgICAgICAgLT4gP2VxdWFsOihvIC0+IG8gLT4gYm9vbClcbiAgICAgICAgLT4gKG8sIHIpIFN0YXJ0aW5nLnRcbiAgICAgICAgLT4gZWZmZWN0Om8gRWZmZWN0LnQgVmFsdWUudFxuICAgICAgICAtPiAociAqIHVuaXQgRWZmZWN0LnQpIENvbXB1dGF0aW9uLnRcbiAgICAgID1cbiAgICAgIGZ1biA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwga2luZCB+ZWZmZWN0IC0+XG4gICAgICBtYXRjaCBraW5kIHdpdGhcbiAgICAgIHwgU3RhcnRpbmcuRW1wdHkgLT5cbiAgICAgICAgbWFudWFsX3JlZnJlc2hfaW1wbGVtZW50YXRpb25cbiAgICAgICAgICA/c2V4cF9vZl9tb2RlbDooT3B0aW9uLm1hcCB+ZjpPcHRpb24uc2V4cF9vZl90IHNleHBfb2ZfbW9kZWwpXG4gICAgICAgICAgP2VxdWFsOihPcHRpb24ubWFwIH5mOk9wdGlvbi5lcXVhbCBlcXVhbClcbiAgICAgICAgICB+ZWZmZWN0XG4gICAgICAgICAgfmluaXRpYWw6Tm9uZVxuICAgICAgICAgIH53cmFwX3Jlc3VsdDpPcHRpb24uc29tZVxuICAgICAgICAgICgpXG4gICAgICB8IFN0YXJ0aW5nLkluaXRpYWwgaW5pdGlhbCAtPlxuICAgICAgICBtYW51YWxfcmVmcmVzaF9pbXBsZW1lbnRhdGlvblxuICAgICAgICAgID9zZXhwX29mX21vZGVsXG4gICAgICAgICAgP2VxdWFsXG4gICAgICAgICAgfmVmZmVjdFxuICAgICAgICAgIH5pbml0aWFsXG4gICAgICAgICAgfndyYXBfcmVzdWx0OkZuLmlkXG4gICAgICAgICAgKClcbiAgICA7O1xuXG4gICAgbGV0IGVmZmVjdF9vbl9jaGFuZ2VcbiAgICAgIDogdHlwZSBhIG8gci5cbiAgICAgICAgP3NleHBfb2ZfaW5wdXQ6KGEgLT4gU2V4cC50KVxuICAgICAgICAtPiA/c2V4cF9vZl9yZXN1bHQ6KG8gLT4gU2V4cC50KVxuICAgICAgICAtPiBlcXVhbF9pbnB1dDooYSAtPiBhIC0+IGJvb2wpXG4gICAgICAgIC0+ID9lcXVhbF9yZXN1bHQ6KG8gLT4gbyAtPiBib29sKVxuICAgICAgICAtPiAobywgcikgU3RhcnRpbmcudFxuICAgICAgICAtPiBhIFZhbHVlLnRcbiAgICAgICAgLT4gZWZmZWN0OihhIC0+IG8gRWZmZWN0LnQpIFZhbHVlLnRcbiAgICAgICAgLT4gciBDb21wdXRhdGlvbi50XG4gICAgICA9XG4gICAgICBmdW4gP3NleHBfb2ZfaW5wdXQgP3NleHBfb2ZfcmVzdWx0IH5lcXVhbF9pbnB1dCA/ZXF1YWxfcmVzdWx0IGtpbmQgaW5wdXQgfmVmZmVjdCAtPlxuICAgICAgbGV0JXN1YiBnZXRfaW5wdXQgPSB5b2luayBpbnB1dCBpblxuICAgICAgbGV0JXN1YiBlZmZlY3QgPVxuICAgICAgICBsZXQlYXJyIGdldF9pbnB1dCA9IGdldF9pbnB1dFxuICAgICAgICBhbmQgZWZmZWN0ID0gZWZmZWN0IGluXG4gICAgICAgIGxldCViaW5kLkVmZmVjdCBpbnB1dCA9XG4gICAgICAgICAgbWF0Y2glYmluZC5FZmZlY3QgZ2V0X2lucHV0IHdpdGhcbiAgICAgICAgICB8IEFjdGl2ZSBpbnB1dCAtPiBFZmZlY3QucmV0dXJuIGlucHV0XG4gICAgICAgICAgfCBJbmFjdGl2ZSAtPiBFZmZlY3QubmV2ZXJcbiAgICAgICAgaW5cbiAgICAgICAgZWZmZWN0IGlucHV0XG4gICAgICBpblxuICAgICAgbGV0JXN1YiByZXN1bHQsIHJlZnJlc2ggPVxuICAgICAgICBtYW51YWxfcmVmcmVzaCA/c2V4cF9vZl9tb2RlbDpzZXhwX29mX3Jlc3VsdCA/ZXF1YWw6ZXF1YWxfcmVzdWx0IGtpbmQgfmVmZmVjdFxuICAgICAgaW5cbiAgICAgIGxldCVzdWIgY2FsbGJhY2sgPVxuICAgICAgICBsZXQlYXJyIHJlZnJlc2ggPSByZWZyZXNoIGluXG4gICAgICAgIGZ1biAoXyA6IGEpIC0+IHJlZnJlc2hcbiAgICAgIGluXG4gICAgICBsZXQlc3ViICgpID1cbiAgICAgICAgb25fY2hhbmdlID9zZXhwX29mX21vZGVsOnNleHBfb2ZfaW5wdXQgfmVxdWFsOmVxdWFsX2lucHV0IGlucHV0IH5jYWxsYmFja1xuICAgICAgaW5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICA7O1xuICBlbmRcbmVuZFxuXG5tb2R1bGUgRWZmZWN0X3Rocm90dGxpbmcgPSBzdHJ1Y3RcbiAgbW9kdWxlIFBvbGxfcmVzdWx0ID0gc3RydWN0XG4gICAgdHlwZSAnYSB0ID1cbiAgICAgIHwgQWJvcnRlZFxuICAgICAgfCBGaW5pc2hlZCBvZiAnYVxuICAgIFtAQGRlcml2aW5nIHNleHAsIGVxdWFsXVxuXG4gICAgbGV0IHJlcXVlc3RfYWJvcnRlZF9lcnJvciA9IEVycm9yLm9mX3N0cmluZyBcInJlcXVlc3Qgd2FzIGFib3J0ZWRcIlxuXG4gICAgbGV0IGNvbGxhcHNlX3RvX29yX2Vycm9yID90YWdfcyA9XG4gICAgICBsZXQgbWF5YmVfdGFnX2Vycm9yIGVycm9yID1cbiAgICAgICAgbWF0Y2ggdGFnX3Mgd2l0aFxuICAgICAgICB8IE5vbmUgLT4gZXJyb3JcbiAgICAgICAgfCBTb21lIChsYXp5IHRhZykgLT4gRXJyb3IudGFnX3MgZXJyb3IgfnRhZ1xuICAgICAgaW5cbiAgICAgIGZ1bmN0aW9uXG4gICAgICB8IEFib3J0ZWQgLT4gRXJyb3IgKG1heWJlX3RhZ19lcnJvciByZXF1ZXN0X2Fib3J0ZWRfZXJyb3IpXG4gICAgICB8IEZpbmlzaGVkIChFcnJvciBlKSAtPiBFcnJvciAobWF5YmVfdGFnX2Vycm9yIGUpXG4gICAgICB8IEZpbmlzaGVkIChPayB2KSAtPiBPayB2XG4gICAgOztcblxuICAgIGxldCBjb2xsYXBzZV9mdW5fdG9fb3JfZXJyb3IgP3NleHBfb2ZfaW5wdXQgZiBhID1cbiAgICAgIGxldCB0YWdfcyA9XG4gICAgICAgIG1hdGNoIHNleHBfb2ZfaW5wdXQgd2l0aFxuICAgICAgICB8IE5vbmUgLT4gTm9uZVxuICAgICAgICB8IFNvbWUgc2V4cF9vZl9pbnB1dCAtPlxuICAgICAgICAgIFNvbWUgKGxhenkgKFNleHAuTGlzdCBbIFNleHAuQXRvbSBcImZvclwiOyBzZXhwX29mX2lucHV0IGEgXSkpXG4gICAgICBpblxuICAgICAgRWZmZWN0Lm1hcCAoRWZmZWN0LmxhenlfIChsYXp5IChmIGEpKSkgfmY6KGNvbGxhcHNlX3RvX29yX2Vycm9yID90YWdfcylcbiAgICA7O1xuICBlbmRcblxuICBsZXQgcG9sbFxuICAgIDogdHlwZSBhIGIuIChhIC0+IGIgRWZmZWN0LnQpIFZhbHVlLnQgLT4gKGEgLT4gYiBQb2xsX3Jlc3VsdC50IEVmZmVjdC50KSBDb21wdXRhdGlvbi50XG4gICAgPVxuICAgIGZ1biBlZmZlY3QgLT5cbiAgICBsZXQgbW9kdWxlIEFjdGlvbiA9IHN0cnVjdFxuICAgICAgdHlwZSB0ID1cbiAgICAgICAgfCBSdW4gb2YgKGEsIGIgUG9sbF9yZXN1bHQudCkgRWZmZWN0LlByaXZhdGUuQ2FsbGJhY2sudFxuICAgICAgICB8IEFjdGl2YXRlXG4gICAgICAgIHwgRmluaXNoZWRcblxuICAgICAgbGV0IHNleHBfb2ZfdCA9IHNleHBfb2Zfb3BhcXVlXG4gICAgZW5kXG4gICAgaW5cbiAgICBsZXQgbW9kdWxlIE1vZGVsID0gc3RydWN0XG4gICAgICB0eXBlIHQgPVxuICAgICAgICB7IHJ1bm5pbmcgOiBib29sXG4gICAgICAgIDsgbmV4dF91cCA6IChhLCBiIFBvbGxfcmVzdWx0LnQpIEVmZmVjdC5Qcml2YXRlLkNhbGxiYWNrLnQgb3B0aW9uXG4gICAgICAgIH1cblxuICAgICAgbGV0IHNleHBfb2ZfdCA9IHNleHBfb2Zfb3BhcXVlXG4gICAgICBsZXQgZXF1YWwgPSBwaHlzX2VxdWFsXG4gICAgZW5kXG4gICAgaW5cbiAgICBsZXQlc3ViIF9tb2RlbCwgaW5qZWN0ID1cbiAgICAgIHN0YXRlX21hY2hpbmUxXG4gICAgICAgIH5zZXhwX29mX2FjdGlvbjpbJXNleHBfb2Y6IEFjdGlvbi50XVxuICAgICAgICB+c2V4cF9vZl9tb2RlbDpbJXNleHBfb2Y6IE1vZGVsLnRdXG4gICAgICAgIH5lcXVhbDpbJWVxdWFsOiBNb2RlbC50XVxuICAgICAgICAgICgqIFRoaXMgY29tcHV0YXRpb24gZG9lcyBub3RoaW5nIG9uIHJlc2V0IGJlY2F1c2UgdXNlcnMgc2hvdWxkIGJlXG4gICAgICAgICAgIG9ibGl2aW91cyB0byB0aGUgZmFjdCB0aGF0IGl0IGhhcyBhIG1vZGVsLiBJIGRvbid0IHRoaW5rIHRoZXJlIGlzIGFcbiAgICAgICAgICAgXCJjb3JyZWN0XCIgZGVjaXNpb24gaW4gdGhpcyBjYXNlIC0gdGhpcyBiZWhhdmlvciBqdXN0IHNlZW1zIG1vcmVcbiAgICAgICAgICAgcmVhc29uYWJsZSB0byBtZS4gKilcbiAgICAgICAgfnJlc2V0OihmdW4gKF8gOiBfIEFwcGx5X2FjdGlvbl9jb250ZXh0LnQpIG1vZGVsIC0+IG1vZGVsKVxuICAgICAgICB+ZGVmYXVsdF9tb2RlbDp7IHJ1bm5pbmcgPSBmYWxzZTsgbmV4dF91cCA9IE5vbmUgfVxuICAgICAgICB+YXBwbHlfYWN0aW9uOihmdW4gY29udGV4dCBlZmZlY3QgeyBydW5uaW5nOyBuZXh0X3VwIH0gYWN0aW9uIC0+XG4gICAgICAgICAgbGV0JXR5ZGkgeyBpbmplY3Q7IHNjaGVkdWxlX2V2ZW50IH0gPVxuICAgICAgICAgICAgQXBwbHlfYWN0aW9uX2NvbnRleHQuUHJpdmF0ZS5yZXZlYWwgY29udGV4dFxuICAgICAgICAgIGluXG4gICAgICAgICAgbGV0IHJ1bl9lZmZlY3QgZWZmZWN0IGNhbGxiYWNrID1cbiAgICAgICAgICAgIHNjaGVkdWxlX2V2ZW50XG4gICAgICAgICAgICAgIChsZXQlYmluZC5FZmZlY3QgcmVzcG9uc2UgPVxuICAgICAgICAgICAgICAgICBlZmZlY3QgKEVmZmVjdC5Qcml2YXRlLkNhbGxiYWNrLnJlcXVlc3QgY2FsbGJhY2spXG4gICAgICAgICAgICAgICBpblxuICAgICAgICAgICAgICAgbGV0JWJpbmQuRWZmZWN0ICgpID1cbiAgICAgICAgICAgICAgICAgRWZmZWN0LlByaXZhdGUuQ2FsbGJhY2sucmVzcG9uZF90b1xuICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgKFBvbGxfcmVzdWx0LkZpbmlzaGVkIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgaW5cbiAgICAgICAgICAgICAgIGluamVjdCBBY3Rpb24uRmluaXNoZWQpXG4gICAgICAgICAgaW5cbiAgICAgICAgICBsZXQgYWJvcnQgY2FsbGJhY2sgPVxuICAgICAgICAgICAgc2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgICAgKEVmZmVjdC5Qcml2YXRlLkNhbGxiYWNrLnJlc3BvbmRfdG8gY2FsbGJhY2sgUG9sbF9yZXN1bHQuQWJvcnRlZClcbiAgICAgICAgICBpblxuICAgICAgICAgIGxldCBzb2Z0X2Fzc2VydF9ydW5uaW5nIGhlcmUgcnVubmluZyA9XG4gICAgICAgICAgICBpZiBub3QgcnVubmluZ1xuICAgICAgICAgICAgdGhlblxuICAgICAgICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgKGhlcmUgOiBTb3VyY2VfY29kZV9wb3NpdGlvbi50KVxuICAgICAgICAgICAgICAgICAgICBcIkJVRzogIGZpbmlzaGVkIGVmZmVjdCBldmVuIHRob3VnaCBub3QgcnVubmluZ1wiXVxuICAgICAgICAgIGluXG4gICAgICAgICAgKCogVGhlcmUgYXJlIGEgbG90IG9mIGNhc2VzLCBhbmQgcGVyaGFwcyB0aGlzIG1hdGNoIGV4cHJlc3Npb24gY291bGRcbiAgICAgICAgICAgICBiZSBmYWN0b3JlZCB0byBiZSBzaG9ydGVyLCBidXQgdGhlIGFkdmFudGFnZSB0byB0aGlzIGlzIHRoYXQgZXZlcnlcbiAgICAgICAgICAgICBjYXNlIGlzIGV4dHJlbWVseSBzaG9ydCwgYW5kIGl0J3MgZWFzeSB0byBmaW5kIHdoaWNoIGNvZGUgcGF0aCBhXG4gICAgICAgICAgICAgc2V0IG9mIHZhcmlhYmxlIGNvbmZpZ3VyYXRpb25zIHdpbGwgdGFrZS4gKilcbiAgICAgICAgICBtYXRjaCBhY3Rpb24sIHJ1bm5pbmcsIG5leHRfdXAsIGVmZmVjdCB3aXRoXG4gICAgICAgICAgfCBSdW4gY2FsbGJhY2ssIGZhbHNlLCBOb25lLCBJbmFjdGl2ZSAtPlxuICAgICAgICAgICAgeyBydW5uaW5nID0gZmFsc2U7IG5leHRfdXAgPSBTb21lIGNhbGxiYWNrIH1cbiAgICAgICAgICB8IFJ1biBjYWxsYmFjaywgZmFsc2UsIE5vbmUsIEFjdGl2ZSBlZmZlY3QgLT5cbiAgICAgICAgICAgIHJ1bl9lZmZlY3QgZWZmZWN0IGNhbGxiYWNrO1xuICAgICAgICAgICAgeyBydW5uaW5nID0gdHJ1ZTsgbmV4dF91cCA9IE5vbmUgfVxuICAgICAgICAgIHwgUnVuIGNhbGxiYWNrLCBmYWxzZSwgU29tZSBuZXh0X3VwLCBJbmFjdGl2ZSAtPlxuICAgICAgICAgICAgYWJvcnQgbmV4dF91cDtcbiAgICAgICAgICAgIHsgcnVubmluZyA9IGZhbHNlOyBuZXh0X3VwID0gU29tZSBjYWxsYmFjayB9XG4gICAgICAgICAgfCBSdW4gY2FsbGJhY2ssIGZhbHNlLCBTb21lIG5leHRfdXAsIEFjdGl2ZSBlZmZlY3QgLT5cbiAgICAgICAgICAgICgqIFRoaXMgY2FzZSBpcyB1bnRlc3RlZCBiZWNhdXNlIEkgY291bGRuJ3QgZmlndXJlIG91dCBob3cgdG8gcmVhY2hcbiAgICAgICAgICAgICAgIHRoaXMgY29kZSBwYXRoIGluIHRlc3RzLiBJdCBzZWVtcyBpbXBvc3NpYmxlLiAqKVxuICAgICAgICAgICAgcnVuX2VmZmVjdCBlZmZlY3QgbmV4dF91cDtcbiAgICAgICAgICAgIHsgcnVubmluZyA9IHRydWU7IG5leHRfdXAgPSBTb21lIGNhbGxiYWNrIH1cbiAgICAgICAgICB8IFJ1biBjYWxsYmFjaywgdHJ1ZSwgTm9uZSwgKEluYWN0aXZlIHwgQWN0aXZlIF8pIC0+XG4gICAgICAgICAgICB7IHJ1bm5pbmcgPSB0cnVlOyBuZXh0X3VwID0gU29tZSBjYWxsYmFjayB9XG4gICAgICAgICAgfCBSdW4gY2FsbGJhY2ssIHRydWUsIFNvbWUgbmV4dF91cCwgKEluYWN0aXZlIHwgQWN0aXZlIF8pIC0+XG4gICAgICAgICAgICBhYm9ydCBuZXh0X3VwO1xuICAgICAgICAgICAgeyBydW5uaW5nID0gdHJ1ZTsgbmV4dF91cCA9IFNvbWUgY2FsbGJhY2sgfVxuICAgICAgICAgIHwgQWN0aXZhdGUsIHJ1bm5pbmcsIG5leHRfdXAsIEluYWN0aXZlIC0+XG4gICAgICAgICAgICAoKiBUaGlzIGNhc2UgbG9va3MgaW1wb3NzaWJsZSBiZWNhdXNlIFtBY3RpdmF0ZV0gZXZlbnRzIGhhcHBlblxuICAgICAgICAgICAgICAgYWZ0ZXIgYSBjb21wdXRhdGlvbiBpcyBhY3RpdmF0ZWQsIHNvIGl0IHNob3VsZCBoYXZlIGFjY2VzcyB0b1xuICAgICAgICAgICAgICAgdGhlIGlucHV0LiBIb3dldmVyLCBpdCBjYW4gaGFwcGVuIGlmIGEgY29tcHV0YXRpb24gaXMgYWN0aXZhdGVkXG4gICAgICAgICAgICAgICBhbmQgZGUtYWN0aXZhdGVkIHRoZSBuZXh0IGZyYW1lLiBUaGUgQWN0aXZhdGUgZWZmZWN0IGRvZXNuJ3QgcnVuXG4gICAgICAgICAgICAgICB1bnRpbCB0aGUgZnJhbWUgaW4gd2hpY2ggaXQgd2FzIGRlYWN0aXZhdGVkLCB3aGljaCBtZWFucyBpdFxuICAgICAgICAgICAgICAgZG9lc24ndCBoYXZlIGFjY2VzcyB0byB0aGUgaW5wdXQuICopXG4gICAgICAgICAgICB7IHJ1bm5pbmc7IG5leHRfdXAgfVxuICAgICAgICAgIHwgQWN0aXZhdGUsIGZhbHNlLCBOb25lLCBBY3RpdmUgXyAtPiB7IHJ1bm5pbmcgPSBmYWxzZTsgbmV4dF91cCA9IE5vbmUgfVxuICAgICAgICAgIHwgQWN0aXZhdGUsIGZhbHNlLCBTb21lIG5leHRfdXAsIEFjdGl2ZSBlZmZlY3QgLT5cbiAgICAgICAgICAgIHJ1bl9lZmZlY3QgZWZmZWN0IG5leHRfdXA7XG4gICAgICAgICAgICB7IHJ1bm5pbmcgPSB0cnVlOyBuZXh0X3VwID0gTm9uZSB9XG4gICAgICAgICAgfCBBY3RpdmF0ZSwgdHJ1ZSwgbmV4dF91cCwgQWN0aXZlIF8gLT4geyBydW5uaW5nID0gdHJ1ZTsgbmV4dF91cCB9XG4gICAgICAgICAgfCBGaW5pc2hlZCwgcnVubmluZywgTm9uZSwgKEluYWN0aXZlIHwgQWN0aXZlIF8pIC0+XG4gICAgICAgICAgICBzb2Z0X2Fzc2VydF9ydW5uaW5nIFslaGVyZV0gcnVubmluZztcbiAgICAgICAgICAgIHsgcnVubmluZyA9IGZhbHNlOyBuZXh0X3VwID0gTm9uZSB9XG4gICAgICAgICAgfCBGaW5pc2hlZCwgcnVubmluZywgU29tZSBuZXh0X3VwLCBJbmFjdGl2ZSAtPlxuICAgICAgICAgICAgc29mdF9hc3NlcnRfcnVubmluZyBbJWhlcmVdIHJ1bm5pbmc7XG4gICAgICAgICAgICB7IHJ1bm5pbmcgPSBmYWxzZTsgbmV4dF91cCA9IFNvbWUgbmV4dF91cCB9XG4gICAgICAgICAgfCBGaW5pc2hlZCwgcnVubmluZywgU29tZSBuZXh0X3VwLCBBY3RpdmUgZWZmZWN0IC0+XG4gICAgICAgICAgICBzb2Z0X2Fzc2VydF9ydW5uaW5nIFslaGVyZV0gcnVubmluZztcbiAgICAgICAgICAgIHJ1bl9lZmZlY3QgZWZmZWN0IG5leHRfdXA7XG4gICAgICAgICAgICB7IHJ1bm5pbmcgPSB0cnVlOyBuZXh0X3VwID0gTm9uZSB9KVxuICAgICAgICBlZmZlY3RcbiAgICBpblxuICAgIGxldCVzdWIgb25fYWN0aXZhdGUgPVxuICAgICAgbGV0JWFyciBpbmplY3QgPSBpbmplY3QgaW5cbiAgICAgIGluamVjdCBBY3RpdmF0ZVxuICAgIGluXG4gICAgbGV0JXN1YiAoKSA9IEVkZ2UubGlmZWN5Y2xlIH5vbl9hY3RpdmF0ZSAoKSBpblxuICAgIGxldCVhcnIgaW5qZWN0ID0gaW5qZWN0IGluXG4gICAgZnVuIHJlcXVlc3QgLT5cbiAgICAgIEVmZmVjdC5Qcml2YXRlLm1ha2UgfnJlcXVlc3QgfmV2YWx1YXRvcjooZnVuIGNhbGxiYWNrIC0+XG4gICAgICAgIEVmZmVjdC5FeHBlcnQuaGFuZGxlIChpbmplY3QgKFJ1biBjYWxsYmFjaykpKVxuICA7O1xuZW5kXG5cbm1vZHVsZSBJbmNyID0gc3RydWN0XG4gIGluY2x1ZGUgUHJvY19taW4uUHJvY19pbmNyXG4gIGluY2x1ZGUgSW5jcjBcbmVuZFxuXG5tb2R1bGUgTWFwMCA9IE1hcDAuTWFrZSAoc3RydWN0XG4gIG1vZHVsZSBWYWx1ZSA9IFZhbHVlXG4gIG1vZHVsZSBDb21wdXRhdGlvbiA9IENvbXB1dGF0aW9uXG4gIG1vZHVsZSBJbmNyID0gSW5jclxuZW5kKVxuXG5sZXQgZnJlZXplID9zZXhwX29mX21vZGVsID9lcXVhbCB2YWx1ZSA9XG4gIGxldCVzdWIgc3RhdGUsIHNldF9zdGF0ZSA9IHN0YXRlX29wdCA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgKCkgaW5cbiAgbWF0Y2glc3ViIHN0YXRlIHdpdGhcbiAgfCBTb21lIHN0YXRlIC0+IHJldHVybiBzdGF0ZVxuICB8IE5vbmUgLT5cbiAgICBsZXQlc3ViICgpID1cbiAgICAgIEVkZ2UubGlmZWN5Y2xlXG4gICAgICAgIH5vbl9hY3RpdmF0ZTpcbiAgICAgICAgICAobGV0JW1hcCBzZXRfc3RhdGUgPSBzZXRfc3RhdGVcbiAgICAgICAgICAgYW5kIHZhbHVlID0gdmFsdWUgaW5cbiAgICAgICAgICAgc2V0X3N0YXRlIChTb21lIHZhbHVlKSlcbiAgICAgICAgKClcbiAgICBpblxuICAgIHJldHVybiB2YWx1ZVxuOztcblxubGV0IHRodW5rICh0eXBlIGEpIChmIDogdW5pdCAtPiBhKSA9XG4gIGxldCVzdWIgb3V0ID0gcmV0dXJuIFZhbHVlLihtYXAgKFZhci52YWx1ZSAoVmFyLmNyZWF0ZSAoKSkpIH5mKSBpblxuICBmcmVlemUgfnNleHBfb2ZfbW9kZWw6WyVzZXhwX29mOiBvcGFxdWVdIH5lcXVhbDpwaHlzX2VxdWFsIG91dFxuOztcblxubGV0IG1vc3RfcmVjZW50X3NvbWUgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIGlucHV0IH5mID1cbiAgbGV0JXN1YiBtb3N0X3JlY2VudF92YWxpZF92YWx1ZSwgc2V0X21vc3RfcmVjZW50X3ZhbGlkX3ZhbHVlID1cbiAgICBzdGF0ZV9vcHQgP3NleHBfb2ZfbW9kZWwgfmVxdWFsICgpXG4gIGluXG4gIGxldCVzdWIgaW5wdXQgPSBwdXJlIGYgaW5wdXQgaW5cbiAgbGV0JXN1YiBpbnB1dCA9IEluY3IudmFsdWVfY3V0b2ZmIH5lcXVhbDooT3B0aW9uLmVxdWFsIGVxdWFsKSBpbnB1dCBpblxuICBtYXRjaCVzdWIgaW5wdXQgd2l0aFxuICB8IE5vbmUgLT4gcmV0dXJuIG1vc3RfcmVjZW50X3ZhbGlkX3ZhbHVlXG4gIHwgU29tZSBpbm5lciAtPlxuICAgIGxldCVzdWIgY2FsbGJhY2sgPVxuICAgICAgbGV0JWFyciBzZXRfbW9zdF9yZWNlbnRfdmFsaWRfdmFsdWUgPSBzZXRfbW9zdF9yZWNlbnRfdmFsaWRfdmFsdWUgaW5cbiAgICAgIGZ1biB4IC0+IHNldF9tb3N0X3JlY2VudF92YWxpZF92YWx1ZSAoU29tZSB4KVxuICAgIGluXG4gICAgbGV0JXN1YiAoKSA9IEVkZ2Uub25fY2hhbmdlID9zZXhwX29mX21vZGVsIH5lcXVhbCBpbm5lciB+Y2FsbGJhY2sgaW5cbiAgICByZXR1cm4gaW5wdXRcbjs7XG5cbmxldCBtb3N0X3JlY2VudF92YWx1ZV9zYXRpc2Z5aW5nID9zZXhwX29mX21vZGVsIH5lcXVhbCBpbnB1dCB+Y29uZGl0aW9uID1cbiAgbW9zdF9yZWNlbnRfc29tZSA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgaW5wdXQgfmY6KGZ1biBhIC0+XG4gICAgaWYgY29uZGl0aW9uIGEgdGhlbiBTb21lIGEgZWxzZSBOb25lKVxuOztcblxubGV0IHByZXZpb3VzX3ZhbHVlXG4gIDogID9zZXhwX29mX21vZGVsOignYSAtPiBTZXhwLnQpIC0+IGVxdWFsOignYSAtPiAnYSAtPiBib29sKSAtPiAnYSBWYWx1ZS50XG4gIC0+ICdhIG9wdGlvbiBDb21wdXRhdGlvbi50XG4gID1cbiAgZnVuID9zZXhwX29mX21vZGVsIH5lcXVhbCBpbnB1dCAtPlxuICBsZXQlc3ViIHByZXYsIHNldF9wcmV2ID0gc3RhdGVfb3B0ID9zZXhwX29mX21vZGVsIH5lcXVhbCAoKSBpblxuICBsZXQlc3ViIGNhbGxiYWNrID1cbiAgICBsZXQlYXJyIHNldF9wcmV2ID0gc2V0X3ByZXYgaW5cbiAgICBmdW4gaW5wdXQgLT4gc2V0X3ByZXYgKFNvbWUgaW5wdXQpXG4gIGluXG4gIGxldCVzdWIgKCkgPSBFZGdlLm9uX2NoYW5nZSA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgaW5wdXQgfmNhbGxiYWNrIGluXG4gIHJldHVybiBwcmV2XG47O1xuXG5sZXQgYXNzb2Nfc2V0IG0gdiB+ZiA9XG4gIGxldCVzdWIgYXNfbWFwID0gTWFwMC5vZl9zZXQgdiBpblxuICBhc3NvYyBtIGFzX21hcCB+ZjooZnVuIGsgXyAtPiBmIGspIFtAbm9udGFpbF1cbjs7XG5cbmxldCBhc3NvY19saXN0ICh0eXBlIGtleSBjbXApIChtIDogKGtleSwgY21wKSBjb21wYXJhdG9yKSBsaXN0IH5nZXRfa2V5IH5mID1cbiAgbGV0IG1vZHVsZSBNID0gKHZhbCBtKSBpblxuICBsZXQlc3ViIGFsaXN0ID1cbiAgICBsZXQlYXJyIGxpc3QgPSBsaXN0IGluXG4gICAgTGlzdC5tYXAgbGlzdCB+ZjooZnVuIHggLT4gZ2V0X2tleSB4LCB4KVxuICBpblxuICBsZXQlc3ViIGlucHV0X21hcCA9XG4gICAgbGV0JWFyciBhbGlzdCA9IGFsaXN0IGluXG4gICAgTWFwLm9mX2FsaXN0IChtb2R1bGUgTSkgYWxpc3RcbiAgaW5cbiAgbWF0Y2glc3ViIGlucHV0X21hcCB3aXRoXG4gIHwgYE9rIGlucHV0X21hcCAtPlxuICAgIGxldCVzdWIgb3V0cHV0X21hcCA9IGFzc29jIG0gaW5wdXRfbWFwIH5mOihmdW4gayB2IC0+IGYgayB2KSBbQG5vbnRhaWxdIGluXG4gICAgbGV0JWFyciBhbGlzdCA9IGFsaXN0XG4gICAgYW5kIG91dHB1dF9tYXAgPSBvdXRwdXRfbWFwIGluXG4gICAgYE9rXG4gICAgICAoTGlzdC5tYXAgYWxpc3QgfmY6KGZ1biAoaywgXykgLT5cbiAgICAgICAgIG1hdGNoIE1hcC5maW5kIG91dHB1dF9tYXAgayB3aXRoXG4gICAgICAgICB8IFNvbWUgciAtPiByXG4gICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICAgcmFpc2Vfc1xuICAgICAgICAgICAgIFslbWVzc2FnZSBcIkJVR1wiIFslaGVyZV0gXCJJbmNyZW1lbnRhbCBnbGl0Y2hcIiB+a2V5OihrIDogTS50KSBcIm5vdCBmb3VuZFwiXSkpXG4gIHwgYER1cGxpY2F0ZV9rZXkga2V5IC0+XG4gICAgbGV0JWFyciBrZXkgPSBrZXkgaW5cbiAgICBgRHVwbGljYXRlX2tleSBrZXlcbjs7XG5cbm1vZHVsZSBEeW5hbWljX3Njb3BlID0gc3RydWN0XG4gIGluY2x1ZGUgRHluYW1pY19zY29wZVxuXG4gIHR5cGUgXyB0ID1cbiAgICB8IEluZGVwZW5kZW50IDpcbiAgICAgICAgeyBpZCA6ICdhIFR5cGVfZXF1YWwuSWQudFxuICAgICAgICA7IGZhbGxiYWNrIDogJ2FcbiAgICAgICAgfVxuICAgICAgICAtPiAnYSB0XG4gICAgfCBEZXJpdmVkIDpcbiAgICAgICAgeyBiYXNlIDogJ2EgdFxuICAgICAgICA7IGdldCA6ICdhIC0+ICdiXG4gICAgICAgIDsgc2V0IDogJ2EgLT4gJ2IgLT4gJ2FcbiAgICAgICAgOyBzZXhwX29mIDogJ2IgLT4gU2V4cC50XG4gICAgICAgIH1cbiAgICAgICAgLT4gJ2IgdFxuXG4gIGxldCByZWMgZmFsbGJhY2sgOiB0eXBlIGEuIGEgdCAtPiBhID0gZnVuY3Rpb25cbiAgICB8IEluZGVwZW5kZW50IHsgZmFsbGJhY2s7IF8gfSAtPiBmYWxsYmFja1xuICAgIHwgRGVyaXZlZCB7IGJhc2U7IGdldDsgc2V0ID0gXzsgc2V4cF9vZiA9IF8gfSAtPiBnZXQgKGZhbGxiYWNrIGJhc2UpXG4gIDs7XG5cbiAgbGV0IHJlYyBmZXRjaCA6IHR5cGUgYSBiLiBhIHQgLT4gZGVmYXVsdDpiIC0+IGZvcl9zb21lOihhIC0+IGIpIC0+IGIgQ29tcHV0YXRpb24udCA9XG4gICAgZnVuIHQgfmRlZmF1bHQgfmZvcl9zb21lIC0+XG4gICAgbWF0Y2ggdCB3aXRoXG4gICAgfCBJbmRlcGVuZGVudCB7IGlkOyBfIH0gLT4gRHluYW1pY19zY29wZS5mZXRjaCB+aWQgfmRlZmF1bHQgfmZvcl9zb21lXG4gICAgfCBEZXJpdmVkIHsgYmFzZTsgZ2V0OyBzZXQgPSBfOyBzZXhwX29mID0gXyB9IC0+XG4gICAgICBmZXRjaCBiYXNlIH5kZWZhdWx0IH5mb3Jfc29tZTooZnVuIHggLT4gZm9yX3NvbWUgKGdldCB4KSlcbiAgOztcblxuICBsZXQgbG9va3VwICh0eXBlIGEpICh2YXIgOiBhIHQpID0gZmV0Y2ggdmFyIH5kZWZhdWx0OihmYWxsYmFjayB2YXIpIH5mb3Jfc29tZTpGbi5pZFxuXG4gIGxldCByZWMgc3RvcmUgOiB0eXBlIGEuIGEgdCAtPiBhIFZhbHVlLnQgLT4gJ3IgQ29tcHV0YXRpb24udCAtPiAnciBDb21wdXRhdGlvbi50ID1cbiAgICBmdW4gdmFyIHZhbHVlIGlubmVyIC0+XG4gICAgbWF0Y2ggdmFyIHdpdGhcbiAgICB8IEluZGVwZW5kZW50IHsgaWQ7IF8gfSAtPiBEeW5hbWljX3Njb3BlLnN0b3JlIH5pZCB+dmFsdWUgfmlubmVyXG4gICAgfCBEZXJpdmVkIHsgYmFzZTsgZ2V0ID0gXzsgc2V0OyBzZXhwX29mID0gXyB9IC0+XG4gICAgICBsZXQlc3ViIGN1cnJlbnQgPSBsb29rdXAgYmFzZSBpblxuICAgICAgbGV0JXN1YiBuZXdfID1cbiAgICAgICAgbGV0JWFyciBjdXJyZW50ID0gY3VycmVudFxuICAgICAgICBhbmQgdmFsdWUgPSB2YWx1ZSBpblxuICAgICAgICBzZXQgY3VycmVudCB2YWx1ZVxuICAgICAgaW5cbiAgICAgIHN0b3JlIGJhc2UgbmV3XyBpbm5lclxuICA7O1xuXG4gIGxldCBjcmVhdGUgPyhzZXhwX29mID0gc2V4cF9vZl9vcGFxdWUpIH5uYW1lIH5mYWxsYmFjayAoKSA9XG4gICAgSW5kZXBlbmRlbnQgeyBpZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lIHNleHBfb2Y7IGZhbGxiYWNrIH1cbiAgOztcblxuICBsZXQgZGVyaXZlZCA/KHNleHBfb2YgPSBzZXhwX29mX29wYXF1ZSkgYmFzZSB+Z2V0IH5zZXQgPVxuICAgIERlcml2ZWQgeyBiYXNlOyBnZXQ7IHNldDsgc2V4cF9vZiB9XG4gIDs7XG5cbiAgdHlwZSByZXZlcnQgPSB7IHJldmVydCA6ICdhLiAnYSBDb21wdXRhdGlvbi50IC0+ICdhIENvbXB1dGF0aW9uLnQgfVxuXG4gIGxldCBtb2RpZnkgdmFyIH5jaGFuZ2UgfmYgPVxuICAgIGxldCVzdWIgY3VycmVudCA9IGxvb2t1cCB2YXIgaW5cbiAgICBsZXQgcmV2ZXJ0IGMgPSBzdG9yZSB2YXIgY3VycmVudCBjIGluXG4gICAgbGV0IHZhbHVlID0gY2hhbmdlIGN1cnJlbnQgaW5cbiAgICBzdG9yZSB2YXIgdmFsdWUgKGYgeyByZXZlcnQgfSlcbiAgOztcblxuICBsZXQgc2V0IHQgdiB+aW5zaWRlID0gc3RvcmUgdCB2IGluc2lkZVxuICBsZXQgc2V0JyB2YXIgdmFsdWUgfmYgPSBtb2RpZnkgdmFyIH5jaGFuZ2U6KGZ1biBfIC0+IHZhbHVlKSB+ZlxuZW5kXG5cbm1vZHVsZSBDbG9jayA9IHN0cnVjdFxuICBsZXQgYXBwcm94X25vdyB+dGlja19ldmVyeSA9XG4gICAgSW5jci53aXRoX2Nsb2NrIChmdW4gY2xvY2sgLT5cbiAgICAgIGxldCVtYXAuVWlfaW5jciAoKSA9IFRpbWVfc291cmNlLmF0X2ludGVydmFscyBjbG9jayB0aWNrX2V2ZXJ5IGluXG4gICAgICBUaW1lX3NvdXJjZS5ub3cgY2xvY2spXG4gIDs7XG5cbiAgbGV0IG5vdyA9IEluY3Iud2l0aF9jbG9jayBUaW1lX3NvdXJjZS53YXRjaF9ub3dcblxuICBtb2R1bGUgQmVmb3JlX29yX2FmdGVyID0gc3RydWN0XG4gICAgdHlwZSB0ID0gVWlfaW5jci5CZWZvcmVfb3JfYWZ0ZXIudCA9XG4gICAgICB8IEJlZm9yZVxuICAgICAgfCBBZnRlclxuICAgIFtAQGRlcml2aW5nIHNleHAsIGVxdWFsXVxuICBlbmRcblxuICBsZXQgYXQgdGltZSA9XG4gICAgSW5jci5jb21wdXRlX3dpdGhfY2xvY2sgdGltZSB+ZjooZnVuIGNsb2NrIC0+IFVpX2luY3IuYmluZCB+ZjooVGltZV9zb3VyY2UuYXQgY2xvY2spKVxuICA7O1xuXG4gIGxldCBnZXRfY3VycmVudF90aW1lID1cbiAgICBJbmNyLndpdGhfY2xvY2sgKGZ1biBjbG9jayAtPlxuICAgICAgVWlfaW5jci5yZXR1cm4gKEVmZmVjdC5vZl9zeW5jX2Z1biAoZnVuICgpIC0+IFRpbWVfc291cmNlLm5vdyBjbG9jaykgKCkpKVxuICA7O1xuXG4gIGxldCBzbGVlcCA9IEluY3Iud2l0aF9jbG9jayAoZnVuIGNsb2NrIC0+IFVpX2luY3IucmV0dXJuIChUaW1lX3NvdXJjZS5zbGVlcCBjbG9jaykpXG4gIGxldCB1bnRpbCA9IEluY3Iud2l0aF9jbG9jayAoZnVuIGNsb2NrIC0+IFVpX2luY3IucmV0dXJuIChUaW1lX3NvdXJjZS51bnRpbCBjbG9jaykpXG5cbiAgbW9kdWxlIFRyaWdnZXJfaWQgPSBVbmlxdWVfaWQuSW50ICgpXG5cbiAgbW9kdWxlIEV2ZXJ5X21vZGVsID0gc3RydWN0XG4gICAgdHlwZSB0ID1cbiAgICAgIHwgV2FpdGluZ19mb3JfZWZmZWN0X3RvX2ZpbmlzaFxuICAgICAgfCBXYWl0aW5nX2ZvciBvZiBUcmlnZ2VyX2lkLnQgb3B0aW9uICogVGltZV9ucy5BbHRlcm5hdGVfc2V4cC50XG4gICAgW0BAZGVyaXZpbmcgc2V4cCwgZXF1YWxdXG4gIGVuZFxuXG4gIG1vZHVsZSBFdmVyeV9hY3Rpb24gPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPVxuICAgICAgfCBTY2hlZHVsZV9lZmZlY3RcbiAgICAgIHwgV2FpdF9mb3Igb2YgVGltZV9ucy5BbHRlcm5hdGVfc2V4cC50XG4gICAgW0BAZGVyaXZpbmcgc2V4cCwgZXF1YWxdXG4gIGVuZFxuXG4gIGxldCBnZW5lcmljX2V2ZXJ5IH5jcmVhdGVfZWZmZWN0ID8odHJpZ2dlcl9vbl9hY3RpdmF0ZSA9IHRydWUpIHNwYW4gY2FsbGJhY2sgPVxuICAgIGxldCVzdWIgYmFzZV90aW1lID1cbiAgICAgIGxldCVzdWIgbm93ID0gbm93IGluXG4gICAgICBmcmVlemVcbiAgICAgICAgfmVxdWFsOlslZXF1YWw6IFRpbWVfbnMuQWx0ZXJuYXRlX3NleHAudF1cbiAgICAgICAgbm93XG4gICAgICAgIH5zZXhwX29mX21vZGVsOlslc2V4cF9vZjogVGltZV9ucy5BbHRlcm5hdGVfc2V4cC50XVxuICAgIGluXG4gICAgbGV0JXN1YiBpbml0aWFsX21vZGVsID1cbiAgICAgIGxldCVhcnIgYmFzZV90aW1lID0gYmFzZV90aW1lIGluXG4gICAgICBsZXQgc3RhcnRfdGltZSA9XG4gICAgICAgIGlmIHRyaWdnZXJfb25fYWN0aXZhdGUgdGhlbiBiYXNlX3RpbWUgZWxzZSBUaW1lX25zLmFkZCBiYXNlX3RpbWUgc3BhblxuICAgICAgaW5cbiAgICAgIEV2ZXJ5X21vZGVsLldhaXRpbmdfZm9yIChOb25lLCBzdGFydF90aW1lKVxuICAgIGluXG4gICAgbGV0JXN1YiBnZXRfY3VycmVudF90aW1lID0gZ2V0X2N1cnJlbnRfdGltZSBpblxuICAgIGxldCVzdWIgcmFjZV9pbnB1dCA9XG4gICAgICBsZXQlYXJyIGJhc2VfdGltZSA9IGJhc2VfdGltZVxuICAgICAgYW5kIGdldF9jdXJyZW50X3RpbWUgPSBnZXRfY3VycmVudF90aW1lXG4gICAgICBhbmQgY2FsbGJhY2sgPSBjYWxsYmFjayBpblxuICAgICAgYmFzZV90aW1lLCBnZXRfY3VycmVudF90aW1lLCBjYWxsYmFja1xuICAgIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvbiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBpbnB1dCBfb2xkX21vZGVsID0gZnVuY3Rpb25cbiAgICAgIHwgRXZlcnlfYWN0aW9uLlNjaGVkdWxlX2VmZmVjdCAtPlxuICAgICAgICBzY2hlZHVsZV9ldmVudFxuICAgICAgICAgIChtYXRjaCBpbnB1dCB3aXRoXG4gICAgICAgICAgIHwgQ29tcHV0YXRpb25fc3RhdHVzLkluYWN0aXZlIC0+IEVmZmVjdC5JZ25vcmVcbiAgICAgICAgICAgfCBBY3RpdmUgKGJhc2VfdGltZSwgZ2V0X2N1cnJlbnRfdGltZSwgY2FsbGJhY2spIC0+XG4gICAgICAgICAgICAgbGV0JWJpbmQuRWZmZWN0IG5leHRfdGltZSA9XG4gICAgICAgICAgICAgICBjcmVhdGVfZWZmZWN0IH5zcGFuIH5iYXNlX3RpbWUgfmdldF9jdXJyZW50X3RpbWUgfmNhbGxiYWNrXG4gICAgICAgICAgICAgaW5cbiAgICAgICAgICAgICBpbmplY3QgKEV2ZXJ5X2FjdGlvbi5XYWl0X2ZvciBuZXh0X3RpbWUpKTtcbiAgICAgICAgRXZlcnlfbW9kZWwuV2FpdGluZ19mb3JfZWZmZWN0X3RvX2ZpbmlzaFxuICAgICAgfCBXYWl0X2ZvciBuZXh0X3RpbWUgLT4gV2FpdGluZ19mb3IgKFNvbWUgKFRyaWdnZXJfaWQuY3JlYXRlICgpKSwgbmV4dF90aW1lKVxuICAgIGluXG4gICAgbGV0JXN1YiBldmVyeV9tb2RlbCwgaW5qZWN0ID1cbiAgICAgIHJhY2VfZHluYW1pY19tb2RlbFxuICAgICAgICB+c2V4cF9vZl9tb2RlbDpbJXNleHBfb2Y6IEV2ZXJ5X21vZGVsLnRdXG4gICAgICAgIH5zZXhwX29mX2FjdGlvbjpbJXNleHBfb2Y6IEV2ZXJ5X2FjdGlvbi50XVxuICAgICAgICB+ZXF1YWw6WyVlcXVhbDogRXZlcnlfbW9kZWwudF1cbiAgICAgICAgfm1vZGVsOihgR2l2ZW4gaW5pdGlhbF9tb2RlbClcbiAgICAgICAgfmFwcGx5X2FjdGlvblxuICAgICAgICByYWNlX2lucHV0XG4gICAgaW5cbiAgICBsZXQlc3ViIGJlZm9yZV9vcl9hZnRlciA9XG4gICAgICBtYXRjaCVzdWIgZXZlcnlfbW9kZWwgd2l0aFxuICAgICAgfCBXYWl0aW5nX2Zvcl9lZmZlY3RfdG9fZmluaXNoIC0+IGNvbnN0IE5vbmVcbiAgICAgIHwgV2FpdGluZ19mb3IgKHRyaWdnZXJfaWQsIHRpbWUpIC0+XG4gICAgICAgIGxldCVzdWIgYmVmb3JlX29yX2FmdGVyID0gYXQgdGltZSBpblxuICAgICAgICBsZXQlYXJyIHRyaWdnZXJfaWQgPSB0cmlnZ2VyX2lkXG4gICAgICAgIGFuZCBiZWZvcmVfb3JfYWZ0ZXIgPSBiZWZvcmVfb3JfYWZ0ZXIgaW5cbiAgICAgICAgU29tZSAodHJpZ2dlcl9pZCwgYmVmb3JlX29yX2FmdGVyKVxuICAgIGluXG4gICAgbGV0JXN1YiBjYWxsYmFjayA9XG4gICAgICBsZXQlYXJyIGluamVjdCA9IGluamVjdCBpblxuICAgICAgZnVuY3Rpb25cbiAgICAgIHwgTm9uZSB8IFNvbWUgKF8sIEJlZm9yZV9vcl9hZnRlci5CZWZvcmUpIC0+IEVmZmVjdC5JZ25vcmVcbiAgICAgIHwgU29tZSAoXywgQWZ0ZXIpIC0+IGluamVjdCBTY2hlZHVsZV9lZmZlY3RcbiAgICBpblxuICAgIEVkZ2Uub25fY2hhbmdlXG4gICAgICB+c2V4cF9vZl9tb2RlbDpbJXNleHBfb2Y6IChUcmlnZ2VyX2lkLnQgb3B0aW9uICogQmVmb3JlX29yX2FmdGVyLnQpIG9wdGlvbl1cbiAgICAgIH5lcXVhbDpbJWVxdWFsOiAoVHJpZ2dlcl9pZC50IG9wdGlvbiAqIEJlZm9yZV9vcl9hZnRlci50KSBvcHRpb25dXG4gICAgICBiZWZvcmVfb3JfYWZ0ZXJcbiAgICAgIH5jYWxsYmFja1xuICA7O1xuXG4gIGxldCBlbnN1cmVfY2xvY2tfYWR2YW5jZXMgb2xkX3RpbWUgbmV3X3RpbWUgPVxuICAgIFRpbWVfbnMubWF4IChUaW1lX25zLm5leHQgb2xkX3RpbWUpIG5ld190aW1lXG4gIDs7XG5cbiAgbGV0IGV2ZXJ5X3dhaXRfcGVyaW9kX2FmdGVyX3ByZXZpb3VzX2VmZmVjdF9maW5pc2hlc19ibG9ja2luZyA9XG4gICAgZ2VuZXJpY19ldmVyeSB+Y3JlYXRlX2VmZmVjdDooZnVuIH5zcGFuIH5iYXNlX3RpbWU6XyB+Z2V0X2N1cnJlbnRfdGltZSB+Y2FsbGJhY2sgLT5cbiAgICAgIGxldCViaW5kLkVmZmVjdCAoKSA9IGNhbGxiYWNrIGluXG4gICAgICBsZXQlbWFwLkVmZmVjdCBub3cgPSBnZXRfY3VycmVudF90aW1lIGluXG4gICAgICBlbnN1cmVfY2xvY2tfYWR2YW5jZXMgbm93IChUaW1lX25zLmFkZCBub3cgc3BhbikpXG4gIDs7XG5cbiAgbGV0IGV2ZXJ5X3dhaXRfcGVyaW9kX2FmdGVyX3ByZXZpb3VzX2VmZmVjdF9zdGFydHNfYmxvY2tpbmcgPVxuICAgIGdlbmVyaWNfZXZlcnkgfmNyZWF0ZV9lZmZlY3Q6KGZ1biB+c3BhbiB+YmFzZV90aW1lOl8gfmdldF9jdXJyZW50X3RpbWUgfmNhbGxiYWNrIC0+XG4gICAgICBsZXQlYmluZC5FZmZlY3Qgc3RhcnQgPSBnZXRfY3VycmVudF90aW1lIGluXG4gICAgICBsZXQlYmluZC5FZmZlY3QgKCkgPSBjYWxsYmFjayBpblxuICAgICAgbGV0JW1hcC5FZmZlY3Qgbm93ID0gZ2V0X2N1cnJlbnRfdGltZSBpblxuICAgICAgZW5zdXJlX2Nsb2NrX2FkdmFuY2VzIG5vdyAoVGltZV9ucy5hZGQgc3RhcnQgc3BhbikpXG4gIDs7XG5cbiAgbGV0IGV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ibG9ja2luZyA9XG4gICAgZ2VuZXJpY19ldmVyeSB+Y3JlYXRlX2VmZmVjdDooZnVuIH5zcGFuIH5iYXNlX3RpbWUgfmdldF9jdXJyZW50X3RpbWUgfmNhbGxiYWNrIC0+XG4gICAgICBsZXQlYmluZC5FZmZlY3QgKCkgPSBjYWxsYmFjayBpblxuICAgICAgbGV0JW1hcC5FZmZlY3Qgbm93ID0gZ2V0X2N1cnJlbnRfdGltZSBpblxuICAgICAgZW5zdXJlX2Nsb2NrX2FkdmFuY2VzXG4gICAgICAgIG5vd1xuICAgICAgICAoVGltZV9ucy5uZXh0X211bHRpcGxlXG4gICAgICAgICAgIH5jYW5fZXF1YWxfYWZ0ZXI6ZmFsc2VcbiAgICAgICAgICAgfmJhc2U6YmFzZV90aW1lXG4gICAgICAgICAgIH5hZnRlcjpub3dcbiAgICAgICAgICAgfmludGVydmFsOihUaW1lX25zLlNwYW4ubWF4IHNwYW4gKFRpbWVfbnMuU3Bhbi5uZXh0IFRpbWVfbnMuU3Bhbi56ZXJvKSlcbiAgICAgICAgICAgKCkpKVxuICA7O1xuXG4gIGxldCBldmVyeV9tdWx0aXBsZV9vZl9wZXJpb2Rfbm9uX2Jsb2NraW5nID90cmlnZ2VyX29uX2FjdGl2YXRlIHNwYW4gY2FsbGJhY2sgPVxuICAgIGV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ibG9ja2luZ1xuICAgICAgP3RyaWdnZXJfb25fYWN0aXZhdGVcbiAgICAgIHNwYW5cbiAgICAgIChsZXQlbWFwIGNhbGxiYWNrID0gY2FsbGJhY2sgaW5cbiAgICAgICBFZmZlY3QuTWFueSBbIGNhbGxiYWNrIF0pXG4gIDs7XG5cbiAgbGV0IGV2ZXJ5XG4gICAgOiAgd2hlbl90b19zdGFydF9uZXh0X2VmZmVjdDpcbiAgICAgICAgIFs8IGBXYWl0X3BlcmlvZF9hZnRlcl9wcmV2aW91c19lZmZlY3Rfc3RhcnRzX2Jsb2NraW5nXG4gICAgICAgICB8IGBXYWl0X3BlcmlvZF9hZnRlcl9wcmV2aW91c19lZmZlY3RfZmluaXNoZXNfYmxvY2tpbmdcbiAgICAgICAgIHwgYEV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ub25fYmxvY2tpbmdcbiAgICAgICAgIHwgYEV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ibG9ja2luZ1xuICAgICAgICAgXVxuICAgIC0+ID90cmlnZ2VyX29uX2FjdGl2YXRlOmJvb2wgLT4gVGltZV9ucy5TcGFuLnQgLT4gdW5pdCBFZmZlY3QudCBWYWx1ZS50XG4gICAgLT4gdW5pdCBDb21wdXRhdGlvbi50XG4gICAgPVxuICAgIGZ1biB+d2hlbl90b19zdGFydF9uZXh0X2VmZmVjdCAtPlxuICAgIG1hdGNoIHdoZW5fdG9fc3RhcnRfbmV4dF9lZmZlY3Qgd2l0aFxuICAgIHwgYFdhaXRfcGVyaW9kX2FmdGVyX3ByZXZpb3VzX2VmZmVjdF9zdGFydHNfYmxvY2tpbmcgLT5cbiAgICAgIGV2ZXJ5X3dhaXRfcGVyaW9kX2FmdGVyX3ByZXZpb3VzX2VmZmVjdF9zdGFydHNfYmxvY2tpbmdcbiAgICB8IGBXYWl0X3BlcmlvZF9hZnRlcl9wcmV2aW91c19lZmZlY3RfZmluaXNoZXNfYmxvY2tpbmcgLT5cbiAgICAgIGV2ZXJ5X3dhaXRfcGVyaW9kX2FmdGVyX3ByZXZpb3VzX2VmZmVjdF9maW5pc2hlc19ibG9ja2luZ1xuICAgIHwgYEV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ibG9ja2luZyAtPiBldmVyeV9tdWx0aXBsZV9vZl9wZXJpb2RfYmxvY2tpbmdcbiAgICB8IGBFdmVyeV9tdWx0aXBsZV9vZl9wZXJpb2Rfbm9uX2Jsb2NraW5nIC0+IGV2ZXJ5X211bHRpcGxlX29mX3BlcmlvZF9ub25fYmxvY2tpbmdcbiAgOztcbmVuZFxuXG5tb2R1bGUgTWVtbyA9IHN0cnVjdFxuICBtb2R1bGUgQWN0aW9uID0gc3RydWN0XG4gICAgdHlwZSAncXVlcnkgdCA9XG4gICAgICB8IEFkZCBvZiAncXVlcnlcbiAgICAgIHwgUmVtb3ZlIG9mICdxdWVyeVxuICAgICAgfCBDaGFuZ2Ugb2YgJ3F1ZXJ5ICogJ3F1ZXJ5XG4gICAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgZW5kXG5cbiAgdHlwZSAoJ3F1ZXJ5LCAncmVzcG9uc2UpIHQgPVxuICAgIHwgVCA6XG4gICAgICAgIHsgcmVzcG9uc2VzIDogKCdxdWVyeSwgJ3Jlc3BvbnNlLCAnY21wKSBNYXAudFxuICAgICAgICA7IGluamVjdCA6ICdxdWVyeSBBY3Rpb24udCAtPiB1bml0IEVmZmVjdC50XG4gICAgICAgIH1cbiAgICAgICAgLT4gKCdxdWVyeSwgJ3Jlc3BvbnNlKSB0XG5cbiAgbGV0IGNyZWF0ZVxuICAgICh0eXBlIHF1ZXJ5IGNtcCByZXNwb25zZSlcbiAgICAobW9kdWxlIFF1ZXJ5IDogQ29tcGFyYXRvciB3aXRoIHR5cGUgdCA9IHF1ZXJ5IGFuZCB0eXBlIGNvbXBhcmF0b3Jfd2l0bmVzcyA9IGNtcClcbiAgICB+KGYgOiBxdWVyeSBWYWx1ZS50IC0+IHJlc3BvbnNlIENvbXB1dGF0aW9uLnQpXG4gICAgPVxuICAgIGxldCBtb2R1bGUgTW9kZWwgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgdCA9IGludCBNYXAuTShRdWVyeSkudCBbQEBkZXJpdmluZyBzZXhwX29mLCBlcXVhbF1cbiAgICBlbmRcbiAgICBpblxuICAgIGxldCBtb2R1bGUgQWN0aW9uID0gc3RydWN0XG4gICAgICB0eXBlIHQgPSBRdWVyeS50IEFjdGlvbi50IFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG4gICAgaW5cbiAgICBsZXQgYXBwbHlfYWN0aW9uIChfIDogXyBBcHBseV9hY3Rpb25fY29udGV4dC50KSBtb2RlbCAoYWN0aW9uIDogQWN0aW9uLnQpID1cbiAgICAgIGxldCBhZGQgbW9kZWwgcSA9XG4gICAgICAgIE1hcC51cGRhdGUgbW9kZWwgcSB+ZjooZnVuY3Rpb25cbiAgICAgICAgICB8IE5vbmUgLT4gMVxuICAgICAgICAgIHwgU29tZSBjIC0+IGMgKyAxKVxuICAgICAgaW5cbiAgICAgIGxldCByZW1vdmUgbW9kZWwgcSA9XG4gICAgICAgIE1hcC5jaGFuZ2UgbW9kZWwgcSB+ZjooZnVuY3Rpb25cbiAgICAgICAgICB8IE5vbmUgLT4gTm9uZVxuICAgICAgICAgIHwgU29tZSAxIC0+IE5vbmVcbiAgICAgICAgICB8IFNvbWUgYyAtPiBTb21lIChjIC0gMSkpXG4gICAgICBpblxuICAgICAgbWF0Y2ggYWN0aW9uIHdpdGhcbiAgICAgIHwgQWRkIHEgLT4gYWRkIG1vZGVsIHFcbiAgICAgIHwgUmVtb3ZlIHEgLT4gcmVtb3ZlIG1vZGVsIHFcbiAgICAgIHwgQ2hhbmdlIChiZWZvcmUsIGFmdGVyKSAtPiBhZGQgKHJlbW92ZSBtb2RlbCBiZWZvcmUpIGFmdGVyXG4gICAgaW5cbiAgICBsZXQlc3ViIHF1ZXJpZXMsIGluamVjdCA9XG4gICAgICBzdGF0ZV9tYWNoaW5lMFxuICAgICAgICB+c2V4cF9vZl9tb2RlbDpbJXNleHBfb2Y6IE1vZGVsLnRdXG4gICAgICAgIH5zZXhwX29mX2FjdGlvbjpbJXNleHBfb2Y6IEFjdGlvbi50XVxuICAgICAgICB+ZXF1YWw6WyVlcXVhbDogTW9kZWwudF1cbiAgICAgICAgfmFwcGx5X2FjdGlvblxuICAgICAgICB+ZGVmYXVsdF9tb2RlbDooTWFwLmVtcHR5IChtb2R1bGUgUXVlcnkpKVxuICAgICAgICAoKVxuICAgIGluXG4gICAgbGV0JXN1YiByZXNwb25zZXMgPSBhc3NvYyAobW9kdWxlIFF1ZXJ5KSBxdWVyaWVzIH5mOihmdW4gcXVlcnkgX2NvdW50IC0+IGYgcXVlcnkpIGluXG4gICAgbGV0JWFyciByZXNwb25zZXMgPSByZXNwb25zZXNcbiAgICBhbmQgaW5qZWN0ID0gaW5qZWN0IGluXG4gICAgVCB7IHJlc3BvbnNlczsgaW5qZWN0IH1cbiAgOztcblxuICBsZXQgbG9va3VwXG4gICAgKHR5cGUgcXVlcnkgcmVzcG9uc2UpXG4gICAgP3NleHBfb2ZfbW9kZWxcbiAgICB+ZXF1YWxcbiAgICAodCA6IChxdWVyeSwgcmVzcG9uc2UpIHQgVmFsdWUudClcbiAgICBxdWVyeVxuICAgID1cbiAgICBsZXQlc3ViIChUIHsgaW5qZWN0OyBfIH0pID0gcmV0dXJuIHQgaW5cbiAgICBsZXQlc3ViICgpID1cbiAgICAgIEVkZ2UubGlmZWN5Y2xlXG4gICAgICAgICgpXG4gICAgICAgIH5vbl9hY3RpdmF0ZTpcbiAgICAgICAgICAobGV0JW1hcCBpbmplY3QgPSBpbmplY3RcbiAgICAgICAgICAgYW5kIHF1ZXJ5ID0gcXVlcnkgaW5cbiAgICAgICAgICAgaW5qZWN0IChBZGQgcXVlcnkpKVxuICAgICAgICB+b25fZGVhY3RpdmF0ZTpcbiAgICAgICAgICAobGV0JW1hcCBpbmplY3QgPSBpbmplY3RcbiAgICAgICAgICAgYW5kIHF1ZXJ5ID0gcXVlcnkgaW5cbiAgICAgICAgICAgaW5qZWN0IChSZW1vdmUgcXVlcnkpKVxuICAgIGluXG4gICAgbGV0JXN1YiAoKSA9XG4gICAgICBsZXQlc3ViIGNhbGxiYWNrID1cbiAgICAgICAgbGV0JWFyciBpbmplY3QgPSBpbmplY3QgaW5cbiAgICAgICAgZnVuIHByZXYgbmV4dCAtPlxuICAgICAgICAgIG1hdGNoIHByZXYsIG5leHQgd2l0aFxuICAgICAgICAgIHwgTm9uZSwgXyAtPiBFZmZlY3QuSWdub3JlXG4gICAgICAgICAgfCBTb21lIHByZXYsIG5leHQgLT4gaW5qZWN0IChDaGFuZ2UgKHByZXYsIG5leHQpKVxuICAgICAgaW5cbiAgICAgIEVkZ2Uub25fY2hhbmdlJyA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgcXVlcnkgfmNhbGxiYWNrXG4gICAgaW5cbiAgICBsZXQlYXJyIHQgPSB0XG4gICAgYW5kIHF1ZXJ5ID0gcXVlcnkgaW5cbiAgICBsZXQgKFQgeyByZXNwb25zZXM7IF8gfSkgPSB0IGluXG4gICAgTWFwLmZpbmQgcmVzcG9uc2VzIHF1ZXJ5XG4gIDs7XG5lbmRcblxubW9kdWxlIEFwcGx5X2FjdGlvbl9jb250ZXh0ID0gQXBwbHlfYWN0aW9uX2NvbnRleHRcblxubW9kdWxlIENvbXB1dGF0aW9uID0gc3RydWN0XG4gIHR5cGUgJ2EgdCA9ICdhIENvbXB1dGF0aW9uLnRcblxuICBpbmNsdWRlIEFwcGxpY2F0aXZlLk1ha2VfdXNpbmdfbWFwMiAoc3RydWN0XG4gICAgdHlwZSBub25yZWMgJ2EgdCA9ICdhIHRcblxuICAgIGxldCByZXR1cm4gPSBjb25zdFxuXG4gICAgbGV0IG1hcDIgYSBiIH5mID1cbiAgICAgIGxldCVzdWIgYSA9IGEgaW5cbiAgICAgIGxldCVzdWIgYiA9IGIgaW5cbiAgICAgIGxldCVhcnIgYSA9IGFcbiAgICAgIGFuZCBiID0gYiBpblxuICAgICAgZiBhIGJcbiAgICA7O1xuXG4gICAgbGV0IG1hcCBhIH5mID1cbiAgICAgIGxldCVzdWIgYSA9IGEgaW5cbiAgICAgIGxldCVhcnIgYSA9IGEgaW5cbiAgICAgIGYgYVxuICAgIDs7XG5cbiAgICBsZXQgbWFwID0gYEN1c3RvbSBtYXBcbiAgZW5kKVxuXG4gIG1vZHVsZSBNYXBuID0gc3RydWN0XG4gICAgbGV0IG1hcDIgPSBtYXAyXG5cbiAgICBsZXQgbWFwMyB0MSB0MiB0MyB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICByZWFkIChWYWx1ZS5tYXAzIHQxIHQyIHQzIH5mKVxuICAgIDs7XG5cbiAgICBsZXQgbWFwNCB0MSB0MiB0MyB0NCB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICBsZXQlc3ViIHQ0ID0gdDQgaW5cbiAgICAgIHJlYWQgKFZhbHVlLm1hcDQgdDEgdDIgdDMgdDQgfmYpXG4gICAgOztcblxuICAgIGxldCBtYXA1IHQxIHQyIHQzIHQ0IHQ1IH5mID1cbiAgICAgIGxldCVzdWIgdDEgPSB0MSBpblxuICAgICAgbGV0JXN1YiB0MiA9IHQyIGluXG4gICAgICBsZXQlc3ViIHQzID0gdDMgaW5cbiAgICAgIGxldCVzdWIgdDQgPSB0NCBpblxuICAgICAgbGV0JXN1YiB0NSA9IHQ1IGluXG4gICAgICByZWFkIChWYWx1ZS5tYXA1IHQxIHQyIHQzIHQ0IHQ1IH5mKVxuICAgIDs7XG5cbiAgICBsZXQgbWFwNiB0MSB0MiB0MyB0NCB0NSB0NiB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICBsZXQlc3ViIHQ0ID0gdDQgaW5cbiAgICAgIGxldCVzdWIgdDUgPSB0NSBpblxuICAgICAgbGV0JXN1YiB0NiA9IHQ2IGluXG4gICAgICByZWFkIChWYWx1ZS5tYXA2IHQxIHQyIHQzIHQ0IHQ1IHQ2IH5mKVxuICAgIDs7XG5cbiAgICBsZXQgbWFwNyB0MSB0MiB0MyB0NCB0NSB0NiB0NyB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICBsZXQlc3ViIHQ0ID0gdDQgaW5cbiAgICAgIGxldCVzdWIgdDUgPSB0NSBpblxuICAgICAgbGV0JXN1YiB0NiA9IHQ2IGluXG4gICAgICBsZXQlc3ViIHQ3ID0gdDcgaW5cbiAgICAgIHJlYWQgKFZhbHVlLm1hcDcgdDEgdDIgdDMgdDQgdDUgdDYgdDcgfmYpXG4gICAgOztcbiAgZW5kXG5cbiAgaW5jbHVkZSBNYXBuXG5cbiAgbGV0IHJlYyBhbGwgPSBmdW5jdGlvblxuICAgIHwgW10gLT4gcmV0dXJuIFtdXG4gICAgfCBbIHQxIF0gLT4gbWFwIHQxIH5mOihmdW4gYTEgLT4gWyBhMSBdKVxuICAgIHwgWyB0MTsgdDIgXSAtPiBtYXAyIHQxIHQyIH5mOihmdW4gYTEgYTIgLT4gWyBhMTsgYTIgXSlcbiAgICB8IFsgdDE7IHQyOyB0MyBdIC0+IG1hcDMgdDEgdDIgdDMgfmY6KGZ1biBhMSBhMiBhMyAtPiBbIGExOyBhMjsgYTMgXSlcbiAgICB8IFsgdDE7IHQyOyB0MzsgdDQgXSAtPiBtYXA0IHQxIHQyIHQzIHQ0IH5mOihmdW4gYTEgYTIgYTMgYTQgLT4gWyBhMTsgYTI7IGEzOyBhNCBdKVxuICAgIHwgWyB0MTsgdDI7IHQzOyB0NDsgdDUgXSAtPlxuICAgICAgbWFwNSB0MSB0MiB0MyB0NCB0NSB+ZjooZnVuIGExIGEyIGEzIGE0IGE1IC0+IFsgYTE7IGEyOyBhMzsgYTQ7IGE1IF0pXG4gICAgfCBbIHQxOyB0MjsgdDM7IHQ0OyB0NTsgdDYgXSAtPlxuICAgICAgbWFwNiB0MSB0MiB0MyB0NCB0NSB0NiB+ZjooZnVuIGExIGEyIGEzIGE0IGE1IGE2IC0+IFsgYTE7IGEyOyBhMzsgYTQ7IGE1OyBhNiBdKVxuICAgIHwgWyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyB0NyBdIC0+XG4gICAgICBtYXA3IHQxIHQyIHQzIHQ0IHQ1IHQ2IHQ3IH5mOihmdW4gYTEgYTIgYTMgYTQgYTUgYTYgYTcgLT5cbiAgICAgICAgWyBhMTsgYTI7IGEzOyBhNDsgYTU7IGE2OyBhNyBdKVxuICAgIHwgdDEgOjogdDIgOjogdDMgOjogdDQgOjogdDUgOjogdDYgOjogdDcgOjogcmVzdCAtPlxuICAgICAgbGV0IGxlZnQgPVxuICAgICAgICBtYXA3IHQxIHQyIHQzIHQ0IHQ1IHQ2IHQ3IH5mOihmdW4gYTEgYTIgYTMgYTQgYTUgYTYgYTcgLT5cbiAgICAgICAgICBbIGExOyBhMjsgYTM7IGE0OyBhNTsgYTY7IGE3IF0pXG4gICAgICBpblxuICAgICAgbGV0IHJpZ2h0ID0gYWxsIHJlc3QgaW5cbiAgICAgIG1hcDIgbGVmdCByaWdodCB+ZjooZnVuIGxlZnQgcmlnaHQgLT4gbGVmdCBAIHJpZ2h0KVxuICA7O1xuXG4gIGxldCByZWR1Y2VfYmFsYW5jZWQgeHMgfmYgPVxuICAgIExpc3QucmVkdWNlX2JhbGFuY2VkIHhzIH5mOihmdW4gYSBiIC0+XG4gICAgICBsZXQlc3ViIGEgPSBhIGluXG4gICAgICBsZXQlc3ViIGIgPSBiIGluXG4gICAgICBmIGEgYilcbiAgOztcblxuICBsZXQgZm9sZF9yaWdodCB4cyB+ZiB+aW5pdCA9XG4gICAgTGlzdC5mb2xkX3JpZ2h0IHhzIH5pbml0OihyZWFkIGluaXQpIH5mOihmdW4gYSBiIC0+XG4gICAgICBsZXQlc3ViIGEgPSBhIGluXG4gICAgICBsZXQlc3ViIGIgPSBiIGluXG4gICAgICBmIGEgYilcbiAgOztcblxuICBsZXQgYWxsX3VuaXQgeHMgPSBhbGwgeHMgfD4gbWFwIH5mOihmdW4gKF8gOiB1bml0IGxpc3QpIC0+ICgpKVxuXG4gIGxldCBhbGxfbWFwIG1hcF9vZl9jb21wdXRhdGlvbnMgPVxuICAgIG1hcF9vZl9jb21wdXRhdGlvbnNcbiAgICB8PiBNYXAudG9fYWxpc3RcbiAgICB8PiBMaXN0Lm1hcCB+ZjooZnVuIChrZXksIGRhdGEpIC0+IG1hcCBkYXRhIH5mOihUdXBsZTIuY3JlYXRlIGtleSkpXG4gICAgfD4gYWxsXG4gICAgfD4gbWFwIH5mOihNYXAub2ZfYWxpc3RfZXhuIChNYXAuY29tcGFyYXRvcl9zIG1hcF9vZl9jb21wdXRhdGlvbnMpKVxuICA7O1xuXG4gIG1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0IHJldHVybiA9IHJldHVyblxuXG4gICAgaW5jbHVkZSBBcHBsaWNhdGl2ZV9pbmZpeFxuXG4gICAgbW9kdWxlIExldF9zeW50YXggPSBzdHJ1Y3RcbiAgICAgIGxldCByZXR1cm4gPSByZXR1cm5cbiAgICAgIGxldCBtYXAgPSBtYXBcbiAgICAgIGxldCBib3RoID0gYm90aFxuXG4gICAgICBpbmNsdWRlIE1hcG5cbiAgICBlbmRcbiAgZW5kXG5lbmRcblxubW9kdWxlIFZhbHVlID0gc3RydWN0XG4gIGluY2x1ZGUgVmFsdWVcblxuICBsZXQgY3V0b2ZmIHQgfmVxdWFsID0gY3V0b2ZmIH5hZGRlZF9ieV9sZXRfc3ludGF4OmZhbHNlIHQgfmVxdWFsXG5lbmRcblxubW9kdWxlIEV4cGVydCA9IHN0cnVjdFxuICBsZXQgdGh1bmsgPSB0aHVua1xuICBsZXQgYXNzb2Nfb24gPSBhc3NvY19vblxuZW5kXG5cbm1vZHVsZSBNYXAgPSBNYXAwXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxuKCogVGhpcyB1bml2LW1hcCBpcyBiYXNpY2FsbHkgYSBzZXQgb2YgYWxsIHRoZSB0eXBlLWlkcyB0aGF0IGFyZSBmcmVlIGluc2lkZVxuICAgdGhlIHByb2R1Y2VkIGNsb3N1cmUuICopXG5tb2R1bGUgRnJlZV92YXJpYWJsZXMgPSBzdHJ1Y3RcbiAgaW5jbHVkZVxuICAgIFVuaXZfbWFwLk1ha2VcbiAgICAgIChVbml2X21hcC5UeXBlX2lkX2tleSlcbiAgICAgIChzdHJ1Y3RcbiAgICAgICAgdHlwZSAnYSB0ID0gdW5pdCBbQEBkZXJpdmluZyBzZXhwX29mXVxuICAgICAgZW5kKVxuXG4gIGxldCBtZXJnZSBhIGIgPVxuICAgIExpc3QuZm9sZCAodG9fYWxpc3QgYikgfmluaXQ6YSB+ZjooZnVuIGFjYyAoVCAoaWQsICgpKSkgLT4gc2V0IGFjYyB+a2V5OmlkIH5kYXRhOigpKVxuICA7O1xuZW5kXG5cbigqIFdoZW4gZXhlY3V0aW5nIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb24sIHRoaXMgRW52IGlzIHVzZWQgdG8gcGFzcyBkb3duIGFueVxuICAgdmFyaWFibGVzIHRoYXQgd2VyZSBib3VuZCBpbiBhIGxldCVzdWIuICopXG5tb2R1bGUgRW52ID1cbiAgVW5pdl9tYXAuTWFrZVxuICAgIChVbml2X21hcC5UeXBlX2lkX2tleSlcbiAgICAoc3RydWN0XG4gICAgICB0eXBlICdhIHQgPSAnYSBbQEBkZXJpdmluZyBzZXhwX29mXVxuICAgIGVuZClcblxuKCogVGhpcyBpcyBhIHRyaS1zdGF0ZSBvcHRpb24sIHdoZXJlIHRoZSB0aGlyZCBzdGF0ZSBpcyBhIGZ1bmN0aW9uIHRoYXQgcGVybWl0c1xuICAgdGhlIGdlbmVyYXRpb24gb2YgdGhlIGNvbnRhaW5lZCB2YWx1ZSwgcHJvdmlkZWQgdGhhdCBhbGwgb2YgdGhlIGZyZWVcbiAgIHZhcmlhYmxlcyB0aGF0IHdlcmUgZm91bmQsIGFyZSBib3VuZCBpbnNpZGUgdGhlIGVudmlyb25tZW50LiAqKVxubW9kdWxlIE9wdGlvbl9vcl9taXNzID0gc3RydWN0XG4gIHR5cGUgJ2EgdCA9XG4gICAgfCBOb25lXG4gICAgfCBTb21lIG9mXG4gICAgICAgIHsgdmFsdWUgOiAnYVxuICAgICAgICA7IGNhbl9jb250YWluX3BhdGggOiBib29sXG4gICAgICAgIH1cbiAgICB8IE1pc3Mgb2ZcbiAgICAgICAgeyBmcmVlIDogRnJlZV92YXJpYWJsZXMudFxuICAgICAgICA7IGdlbiA6IEVudi50IC0+ICdhXG4gICAgICAgIDsgY2FuX2NvbnRhaW5fcGF0aCA6IGJvb2xcbiAgICAgICAgfVxuXG4gICgqIGNvbXByZXNzZXMgYSBbTWlzc10gd2hlbiB0aGUgc2V0IG9mIGZyZWUgdmFyaWFibGVzIGlzIGVtcHR5LiAqKVxuICBsZXQgc3F1YXNoID0gZnVuY3Rpb25cbiAgICB8IE5vbmUgLT4gTm9uZVxuICAgIHwgU29tZSBhIC0+IFNvbWUgYVxuICAgIHwgTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCB9IHdoZW4gRnJlZV92YXJpYWJsZXMuaXNfZW1wdHkgZnJlZSAtPlxuICAgICAgU29tZSB7IHZhbHVlID0gZ2VuIEVudi5lbXB0eTsgY2FuX2NvbnRhaW5fcGF0aCB9XG4gICAgfCBvdGhlciAtPiBvdGhlclxuICA7O1xuXG4gIGxldCBtYXAgYSB+ZiA9XG4gICAgbWF0Y2ggYSB3aXRoXG4gICAgfCBOb25lIC0+IE5vbmVcbiAgICB8IFNvbWUgeyBjYW5fY29udGFpbl9wYXRoOyB2YWx1ZSB9IC0+IFNvbWUgeyBjYW5fY29udGFpbl9wYXRoOyB2YWx1ZSA9IGYgdmFsdWUgfVxuICAgIHwgTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCB9IC0+XG4gICAgICBNaXNzIHsgZnJlZTsgZ2VuID0gKGZ1biBtIC0+IGYgKGdlbiBtKSk7IGNhbl9jb250YWluX3BhdGggfVxuICA7O1xuXG4gIGxldCBib3RoIGEgYiA9XG4gICAgbWF0Y2ggYSwgYiB3aXRoXG4gICAgfCBOb25lLCBfIHwgXywgTm9uZSAtPiBOb25lXG4gICAgfCBTb21lIHsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhOyB2YWx1ZSA9IGEgfSwgU29tZSB7IGNhbl9jb250YWluX3BhdGggPSBwYjsgdmFsdWUgPSBiIH1cbiAgICAgIC0+IFNvbWUgeyB2YWx1ZSA9IGEsIGI7IGNhbl9jb250YWluX3BhdGggPSBwYSB8fCBwYiB9XG4gICAgfCBTb21lIHsgdmFsdWUgPSBhOyBjYW5fY29udGFpbl9wYXRoID0gcGEgfSwgTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCA9IHBiIH1cbiAgICAgIC0+IE1pc3MgeyBmcmVlOyBnZW4gPSAoZnVuIG0gLT4gYSwgZ2VuIG0pOyBjYW5fY29udGFpbl9wYXRoID0gcGEgfHwgcGIgfVxuICAgIHwgTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIH0sIFNvbWUgeyB2YWx1ZSA9IGI7IGNhbl9jb250YWluX3BhdGggPSBwYiB9XG4gICAgICAtPiBNaXNzIHsgZnJlZTsgZ2VuID0gKGZ1biBtIC0+IGdlbiBtLCBiKTsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIHx8IHBiIH1cbiAgICB8ICggTWlzcyB7IGZyZWUgPSBmcmVlX2E7IGdlbiA9IGdlbl9hOyBjYW5fY29udGFpbl9wYXRoID0gcGEgfVxuICAgICAgLCBNaXNzIHsgZnJlZSA9IGZyZWVfYjsgZ2VuID0gZ2VuX2I7IGNhbl9jb250YWluX3BhdGggPSBwYiB9ICkgLT5cbiAgICAgIGxldCBmcmVlID0gRnJlZV92YXJpYWJsZXMubWVyZ2UgZnJlZV9hIGZyZWVfYiBpblxuICAgICAgTWlzcyB7IGZyZWU7IGdlbiA9IChmdW4gZW52IC0+IGdlbl9hIGVudiwgZ2VuX2IgZW52KTsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIHx8IHBiIH1cbiAgOztcblxuICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgIGxldCBtYXAgPSBtYXBcbiAgICBsZXQgYm90aCA9IGJvdGhcbiAgZW5kXG5lbmRcblxuKCogdmFsdWVfdG9fZnVuY3Rpb24gdGFrZXMgYSBWYWx1ZS50IGFuZCBhdHRlbXB0cyB0byB0cmFuc2xhdGUgaXQgaW50byBhIGZ1bmN0aW9uXG4gICB3aGljaCBoYXMgYWNjZXNzIHRvIGEgXCJrZXlcIiBhbmQgXCJkYXRhXCIgKG5hbWVkIHNvIGJlY2F1c2UgdGhpcyBmdW5jdGlvblxuICAgaXMgb25seSB1c2VkIHRvIHNpbXBsaWZ5IGFuIFthc3NvY10sIHdoaWNoIHByb3ZpZGVzIGJvdGggb2YgdGhvc2UgdmFsdWVzLiAgKilcbmxldCByZWMgdmFsdWVfdG9fZnVuY3Rpb25cbiAgOiB0eXBlIGtleSBkYXRhIHJlc3VsdC5cbiAgICByZXN1bHQgVmFsdWUudFxuICAgIC0+IGtleSBUeXBlX2VxdWFsLklkLnRcbiAgICAtPiBkYXRhIFR5cGVfZXF1YWwuSWQudFxuICAgIC0+IChrZXkgLT4gZGF0YSAtPiByZXN1bHQpIE9wdGlvbl9vcl9taXNzLnRcbiAgPVxuICBmdW4gdmFsdWUga2V5X2lkIGRhdGFfaWQgLT5cbiAgbGV0IG9wZW4gT3B0aW9uX29yX21pc3MgaW5cbiAgbWF0Y2ggdmFsdWUudmFsdWUgd2l0aFxuICB8IENvbnN0YW50IHIgLT4gU29tZSB7IHZhbHVlID0gKGZ1biBfa2V5IF9kYXRhIC0+IHIpOyBjYW5fY29udGFpbl9wYXRoID0gZmFsc2UgfVxuICB8IEV4Y2VwdGlvbiBfIC0+IE5vbmVcbiAgfCBJbmNyIF8gLT4gTm9uZVxuICB8IE5hbWVkIF8gLT5cbiAgICBsZXQgc2FtZV9uYW1lID0gVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3MgaW5cbiAgICAobWF0Y2ggc2FtZV9uYW1lIHZhbHVlLmlkIGtleV9pZCwgc2FtZV9uYW1lIHZhbHVlLmlkIGRhdGFfaWQgd2l0aFxuICAgICB8IFNvbWUgVCwgXyAtPiBTb21lIHsgdmFsdWUgPSAoZnVuIGtleSBfZGF0YSAtPiBrZXkpOyBjYW5fY29udGFpbl9wYXRoID0gZmFsc2UgfVxuICAgICB8IF8sIFNvbWUgVCAtPiBTb21lIHsgdmFsdWUgPSAoZnVuIF9rZXkgZGF0YSAtPiBkYXRhKTsgY2FuX2NvbnRhaW5fcGF0aCA9IGZhbHNlIH1cbiAgICAgfCBOb25lLCBOb25lIC0+XG4gICAgICAgTWlzc1xuICAgICAgICAgeyBmcmVlID0gRnJlZV92YXJpYWJsZXMuKGFkZF9leG4gZW1wdHkgfmtleTp2YWx1ZS5pZCB+ZGF0YTooKSlcbiAgICAgICAgIDsgZ2VuID0gKGZ1biBlbnYgXyBfIC0+IEVudi5maW5kX2V4biBlbnYgdmFsdWUuaWQpXG4gICAgICAgICA7IGNhbl9jb250YWluX3BhdGggPSBmYWxzZVxuICAgICAgICAgfSlcbiAgfCBDdXRvZmYgeyB0OyBhZGRlZF9ieV9sZXRfc3ludGF4ID0gdHJ1ZTsgZXF1YWwgPSBfIH0gLT5cbiAgICB2YWx1ZV90b19mdW5jdGlvbiB0IGtleV9pZCBkYXRhX2lkXG4gIHwgQ3V0b2ZmIHsgdCA9IF87IGVxdWFsID0gXzsgYWRkZWRfYnlfbGV0X3N5bnRheCA9IGZhbHNlIH0gLT4gTm9uZVxuICB8IEJvdGggKGEsIGIpIC0+XG4gICAgbGV0JW1hcCBhID0gdmFsdWVfdG9fZnVuY3Rpb24gYSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCBiID0gdmFsdWVfdG9fZnVuY3Rpb24gYiBrZXlfaWQgZGF0YV9pZCBpblxuICAgIGZ1biBrZXkgZGF0YSAtPiBhIGtleSBkYXRhLCBiIGtleSBkYXRhXG4gIHwgTWFwIHsgdDsgZiB9IC0+XG4gICAgbGV0JW1hcCBhID0gdmFsdWVfdG9fZnVuY3Rpb24gdCBrZXlfaWQgZGF0YV9pZCBpblxuICAgIGZ1biBrZXkgZGF0YSAtPiBmIChhIGtleSBkYXRhKVxuICB8IE1hcDIgeyB0MTsgdDI7IGYgfSAtPlxuICAgIGxldCVtYXAgdDEgPSB2YWx1ZV90b19mdW5jdGlvbiB0MSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0MiA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQyIGtleV9pZCBkYXRhX2lkIGluXG4gICAgZnVuIGtleSBkYXRhIC0+IGYgKHQxIGtleSBkYXRhKSAodDIga2V5IGRhdGEpXG4gIHwgTWFwMyB7IHQxOyB0MjsgdDM7IGYgfSAtPlxuICAgIGxldCVtYXAgdDEgPSB2YWx1ZV90b19mdW5jdGlvbiB0MSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0MiA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQyIGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQzID0gdmFsdWVfdG9fZnVuY3Rpb24gdDMga2V5X2lkIGRhdGFfaWQgaW5cbiAgICBmdW4ga2V5IGRhdGEgLT4gZiAodDEga2V5IGRhdGEpICh0MiBrZXkgZGF0YSkgKHQzIGtleSBkYXRhKVxuICB8IE1hcDQgeyB0MTsgdDI7IHQzOyB0NDsgZiB9IC0+XG4gICAgbGV0JW1hcCB0MSA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQxIGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQyID0gdmFsdWVfdG9fZnVuY3Rpb24gdDIga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDMgPSB2YWx1ZV90b19mdW5jdGlvbiB0MyBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0NCA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQ0IGtleV9pZCBkYXRhX2lkIGluXG4gICAgZnVuIGtleSBkYXRhIC0+IGYgKHQxIGtleSBkYXRhKSAodDIga2V5IGRhdGEpICh0MyBrZXkgZGF0YSkgKHQ0IGtleSBkYXRhKVxuICB8IE1hcDUgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IGYgfSAtPlxuICAgIGxldCVtYXAgdDEgPSB2YWx1ZV90b19mdW5jdGlvbiB0MSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0MiA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQyIGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQzID0gdmFsdWVfdG9fZnVuY3Rpb24gdDMga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDQgPSB2YWx1ZV90b19mdW5jdGlvbiB0NCBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0NSA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQ1IGtleV9pZCBkYXRhX2lkIGluXG4gICAgZnVuIGtleSBkYXRhIC0+XG4gICAgICBmICh0MSBrZXkgZGF0YSkgKHQyIGtleSBkYXRhKSAodDMga2V5IGRhdGEpICh0NCBrZXkgZGF0YSkgKHQ1IGtleSBkYXRhKVxuICB8IE1hcDYgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyBmIH0gLT5cbiAgICBsZXQlbWFwIHQxID0gdmFsdWVfdG9fZnVuY3Rpb24gdDEga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDIgPSB2YWx1ZV90b19mdW5jdGlvbiB0MiBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0MyA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQzIGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQ0ID0gdmFsdWVfdG9fZnVuY3Rpb24gdDQga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDUgPSB2YWx1ZV90b19mdW5jdGlvbiB0NSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0NiA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQ2IGtleV9pZCBkYXRhX2lkIGluXG4gICAgZnVuIGtleSBkYXRhIC0+XG4gICAgICBmXG4gICAgICAgICh0MSBrZXkgZGF0YSlcbiAgICAgICAgKHQyIGtleSBkYXRhKVxuICAgICAgICAodDMga2V5IGRhdGEpXG4gICAgICAgICh0NCBrZXkgZGF0YSlcbiAgICAgICAgKHQ1IGtleSBkYXRhKVxuICAgICAgICAodDYga2V5IGRhdGEpXG4gIHwgTWFwNyB7IHQxOyB0MjsgdDM7IHQ0OyB0NTsgdDY7IHQ3OyBmIH0gLT5cbiAgICBsZXQlbWFwIHQxID0gdmFsdWVfdG9fZnVuY3Rpb24gdDEga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDIgPSB2YWx1ZV90b19mdW5jdGlvbiB0MiBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0MyA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQzIGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQ0ID0gdmFsdWVfdG9fZnVuY3Rpb24gdDQga2V5X2lkIGRhdGFfaWRcbiAgICBhbmQgdDUgPSB2YWx1ZV90b19mdW5jdGlvbiB0NSBrZXlfaWQgZGF0YV9pZFxuICAgIGFuZCB0NiA9IHZhbHVlX3RvX2Z1bmN0aW9uIHQ2IGtleV9pZCBkYXRhX2lkXG4gICAgYW5kIHQ3ID0gdmFsdWVfdG9fZnVuY3Rpb24gdDcga2V5X2lkIGRhdGFfaWQgaW5cbiAgICBmdW4ga2V5IGRhdGEgLT5cbiAgICAgIGZcbiAgICAgICAgKHQxIGtleSBkYXRhKVxuICAgICAgICAodDIga2V5IGRhdGEpXG4gICAgICAgICh0MyBrZXkgZGF0YSlcbiAgICAgICAgKHQ0IGtleSBkYXRhKVxuICAgICAgICAodDUga2V5IGRhdGEpXG4gICAgICAgICh0NiBrZXkgZGF0YSlcbiAgICAgICAgKHQ3IGtleSBkYXRhKVxuOztcblxubGV0IHJlYyBjb21wdXRhdGlvbl90b19mdW5jdGlvblxuICA6IHR5cGUga2V5IGRhdGEgcmVzdWx0LlxuICAgIHJlc3VsdCBDb21wdXRhdGlvbi50XG4gICAgLT4ga2V5X2lkOmtleSBUeXBlX2VxdWFsLklkLnRcbiAgICAtPiBkYXRhX2lkOmRhdGEgVHlwZV9lcXVhbC5JZC50XG4gICAgLT4gKFBhdGgudCAtPiBrZXkgLT4gZGF0YSAtPiByZXN1bHQpIE9wdGlvbl9vcl9taXNzLnRcbiAgPVxuICBmdW4gY29tcHV0YXRpb24gfmtleV9pZCB+ZGF0YV9pZCAtPlxuICBsZXQgcmVjdXJzZSBjb21wdXRhdGlvbiA9IGNvbXB1dGF0aW9uX3RvX2Z1bmN0aW9uIH5rZXlfaWQgfmRhdGFfaWQgY29tcHV0YXRpb24gaW5cbiAgbGV0IGhhbmRsZV9zdWJzdCAodHlwZSByMSByMikgfihmcm9tIDogcjEgQ29tcHV0YXRpb24udCkgfnZpYSB+KGludG8gOiByMiBDb21wdXRhdGlvbi50KVxuICAgIDogKFBhdGgudCAtPiBrZXkgLT4gZGF0YSAtPiByMikgT3B0aW9uX29yX21pc3MudFxuICAgID1cbiAgICBtYXRjaCByZWN1cnNlIGZyb20sIHJlY3Vyc2UgaW50byB3aXRoXG4gICAgKCogSWYgYW55IHN1YmNvbXB1dGF0aW9uIGlzIG5vdCBzaW1wbGlmaWFibGUsIHRoZW4gYmFpbCAqKVxuICAgIHwgTm9uZSwgXyB8IF8sIE5vbmUgLT4gTm9uZVxuICAgICgqIEEgcmhzIHRoYXQgaXNuJ3QgbWlzc2luZyBhbnkgdmFyaWFibGVzIGNhbiBiZSB1c2VkIGJ5IGlnbm9yaW5nIHRoZSBjb21wdXRlZCB2YWx1ZXNcbiAgICAgICBvbiB0aGUgbGhzLiAqKVxuICAgIHwgKFNvbWUgXyB8IE1pc3MgXyksIFNvbWUgciAtPiBTb21lIHJcbiAgICB8ICggU29tZSB7IHZhbHVlID0gZnJvbTsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIH1cbiAgICAgICwgTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCA9IHBiIH0gKSAtPlxuICAgICAgbGV0IGZyZWUgPSBGcmVlX3ZhcmlhYmxlcy5yZW1vdmUgZnJlZSB2aWEgaW5cbiAgICAgIGxldCBib3RoX3VzZV9wYXRoID0gcGEgJiYgcGIgaW5cbiAgICAgIGxldCBnZW4gZW52IHBhdGgga2V5IGRhdGEgPVxuICAgICAgICBsZXQgZnJvbV9wYXRoID1cbiAgICAgICAgICBpZiBib3RoX3VzZV9wYXRoIHRoZW4gUGF0aC4oYXBwZW5kIHBhdGggRWxlbS5TdWJzdF9mcm9tKSBlbHNlIHBhdGhcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IGludG9fcGF0aCA9XG4gICAgICAgICAgaWYgYm90aF91c2VfcGF0aCB0aGVuIFBhdGguKGFwcGVuZCBwYXRoIEVsZW0uU3Vic3RfaW50bykgZWxzZSBwYXRoXG4gICAgICAgIGluXG4gICAgICAgIGxldCBlbnYgPSBFbnYuYWRkX2V4biBlbnYgfmtleTp2aWEgfmRhdGE6KGZyb20gZnJvbV9wYXRoIGtleSBkYXRhKSBpblxuICAgICAgICBnZW4gZW52IGludG9fcGF0aCBrZXkgZGF0YVxuICAgICAgaW5cbiAgICAgIE9wdGlvbl9vcl9taXNzLnNxdWFzaCAoTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIHx8IHBiIH0pXG4gICAgfCAoIE1pc3MgeyBmcmVlID0gZnJlZV9hOyBnZW4gPSBnZW5fYTsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIH1cbiAgICAgICwgTWlzcyB7IGZyZWUgPSBmcmVlX2I7IGdlbiA9IGdlbl9iOyBjYW5fY29udGFpbl9wYXRoID0gcGIgfSApIC0+XG4gICAgICBsZXQgZnJlZV9iID0gRnJlZV92YXJpYWJsZXMucmVtb3ZlIGZyZWVfYiB2aWEgaW5cbiAgICAgIGxldCBmcmVlID0gRnJlZV92YXJpYWJsZXMubWVyZ2UgZnJlZV9hIGZyZWVfYiBpblxuICAgICAgbGV0IGJvdGhfdXNlX3BhdGggPSBwYSAmJiBwYiBpblxuICAgICAgbGV0IGdlbiBlbnYgcGF0aCBrZXkgZGF0YSA9XG4gICAgICAgIGxldCBmcm9tX3BhdGggPVxuICAgICAgICAgIGlmIGJvdGhfdXNlX3BhdGggdGhlbiBQYXRoLihhcHBlbmQgcGF0aCBFbGVtLlN1YnN0X2Zyb20pIGVsc2UgcGF0aFxuICAgICAgICBpblxuICAgICAgICBsZXQgaW50b19wYXRoID1cbiAgICAgICAgICBpZiBib3RoX3VzZV9wYXRoIHRoZW4gUGF0aC4oYXBwZW5kIHBhdGggRWxlbS5TdWJzdF9pbnRvKSBlbHNlIHBhdGhcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IGVudiA9IEVudi5hZGRfZXhuIGVudiB+a2V5OnZpYSB+ZGF0YTooZ2VuX2EgZW52IGZyb21fcGF0aCBrZXkgZGF0YSkgaW5cbiAgICAgICAgZ2VuX2IgZW52IGludG9fcGF0aCBrZXkgZGF0YVxuICAgICAgaW5cbiAgICAgIE9wdGlvbl9vcl9taXNzLnNxdWFzaCAoTWlzcyB7IGZyZWU7IGdlbjsgY2FuX2NvbnRhaW5fcGF0aCA9IHBhIHx8IHBiIH0pXG4gIGluXG4gIG1hdGNoIGNvbXB1dGF0aW9uIHdpdGhcbiAgfCBSZXR1cm4gdmFsdWUgLT5cbiAgICBPcHRpb25fb3JfbWlzcy5tYXAgKHZhbHVlX3RvX2Z1bmN0aW9uIHZhbHVlIGtleV9pZCBkYXRhX2lkKSB+ZjooZnVuIGYgX3BhdGggLT4gZilcbiAgfCBTdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgPSBfIH0gLT4gaGFuZGxlX3N1YnN0IH5mcm9tIH52aWEgfmludG9cbiAgfCBQYXRoIC0+IFNvbWUgeyB2YWx1ZSA9IChmdW4gcGF0aCBfIF8gLT4gcGF0aCk7IGNhbl9jb250YWluX3BhdGggPSB0cnVlIH1cbiAgfCBfIC0+IE5vbmVcbjs7XG5cbmxldCBjb21wdXRhdGlvbl90b19mdW5jdGlvbiB0IH5rZXlfY29tcGFyZSB+a2V5X2lkIH5kYXRhX2lkID1cbiAgbGV0IG1ha2VfcGF0aF9lbGVtZW50ID0gUGF0aC5FbGVtLmtleWVkIH5jb21wYXJlOmtleV9jb21wYXJlIGtleV9pZCB8PiB1bnN0YWdlIGluXG4gIG1hdGNoIGNvbXB1dGF0aW9uX3RvX2Z1bmN0aW9uIHQgfmtleV9pZCB+ZGF0YV9pZCB8PiBPcHRpb25fb3JfbWlzcy5zcXVhc2ggd2l0aFxuICB8IFNvbWUgeyB2YWx1ZSA9IGY7IGNhbl9jb250YWluX3BhdGggfSAtPlxuICAgIE9wdGlvbi5zb21lXG4gICAgICAoIChmdW4gcGF0aCBrZXkgZGF0YSAtPlxuICAgICAgICAgIGxldCBwYXRoID1cbiAgICAgICAgICAgIGlmIGNhbl9jb250YWluX3BhdGhcbiAgICAgICAgICAgIHRoZW4gUGF0aC5hcHBlbmQgcGF0aCAoQXNzb2MgKG1ha2VfcGF0aF9lbGVtZW50IGtleSkpXG4gICAgICAgICAgICBlbHNlIHBhdGhcbiAgICAgICAgICBpblxuICAgICAgICAgIGYgcGF0aCBrZXkgZGF0YSlcbiAgICAgICwgaWYgY2FuX2NvbnRhaW5fcGF0aCB0aGVuIGBDYW5fY29udGFpbl9wYXRoIGVsc2UgYENhbm5vdF9jb250YWluX3BhdGggKVxuICB8IE5vbmUgfCBNaXNzIF8gLT4gTm9uZVxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgQ29uc3RhbnRzX2luX3Njb3BlID1cbiAgVW5pdl9tYXAuTWFrZVxuICAgIChVbml2X21hcC5UeXBlX2lkX2tleSlcbiAgICAoc3RydWN0XG4gICAgICBpbmNsdWRlIFZhbHVlXG5cbiAgICAgIGxldCBzZXhwX29mX3QgXyA9IHNleHBfb2Zfb3BhcXVlXG4gICAgZW5kKVxuXG5tb2R1bGUgRXZhbHVhdGVkID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgfCBVbmNvbmRpdGlvbmFsbHlcbiAgICB8IE1heWJlXG5lbmRcblxubW9kdWxlIFR5cGVzID0gc3RydWN0XG4gIG1vZHVsZSBEb3duID0gc3RydWN0XG4gICAgdHlwZSB0ID1cbiAgICAgIHsgY29uc3RhbnRzX2luX3Njb3BlIDogQ29uc3RhbnRzX2luX3Njb3BlLnRcbiAgICAgIDsgZXZhbHVhdGVkIDogRXZhbHVhdGVkLnRcbiAgICAgIH1cbiAgZW5kXG5cbiAgbW9kdWxlIEFjYyA9IFVuaXRcbiAgbW9kdWxlIFVwID0gRml4X3RyYW5zZm9ybS5Vbml0XG5lbmRcblxub3BlbiBUeXBlcy5Eb3duXG5cbmluY2x1ZGUgc3RydWN0XG4gIGxldCB2YWx1ZV9pZCBuYW1lID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWUgc2V4cF9vZl9vcGFxdWVcbiAgbGV0IHdyYXBfdmFsdWUgfmhlcmUgbmFtZSB2ID0geyBWYWx1ZS52YWx1ZSA9IHY7IGhlcmU7IGlkID0gdmFsdWVfaWQgbmFtZSB9XG5cbiAgbGV0IHZhbHVlX2V4Y2VwdGlvbl9mb2xkZXIgfmYgPVxuICAgIHRyeSBmICgpIHdpdGhcbiAgICB8IGV4biAtPiB3cmFwX3ZhbHVlIH5oZXJlOk5vbmUgXCJleGNlcHRpb25cIiAoVmFsdWUuRXhjZXB0aW9uIGV4bilcbiAgOztcblxuICBsZXQgY29tcHV0YXRpb25fZXhjZXB0aW9uX2ZvbGRlciBuYW1lIH5mID1cbiAgICB0cnkgZiAoKSB3aXRoXG4gICAgfCBleG4gLT5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuIChDb21wdXRhdGlvbi5SZXR1cm4gKHdyYXBfdmFsdWUgfmhlcmU6Tm9uZSBuYW1lIChFeGNlcHRpb24gZXhuKSkpXG4gIDs7XG5cbiAgbGV0IGxhenlfY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgOiB0eXBlIGEuIGEgVmFsdWUudCAtPiBhIExhenkudCBvcHRpb24gPVxuICAgIGZ1biB7IHZhbHVlOyBoZXJlID0gXzsgaWQgPSBfIH0gLT5cbiAgICBtYXRjaCB2YWx1ZSB3aXRoXG4gICAgfCBJbmNyIF9cbiAgICB8IE5hbWVkIF9cbiAgICB8IEJvdGggX1xuICAgIHwgQ3V0b2ZmIF9cbiAgICB8IE1hcCBfXG4gICAgfCBNYXAyIF9cbiAgICB8IE1hcDMgX1xuICAgIHwgTWFwNCBfXG4gICAgfCBNYXA1IF9cbiAgICB8IE1hcDYgX1xuICAgIHwgTWFwNyBfIC0+IE5vbmVcbiAgICB8IENvbnN0YW50IHggLT4gU29tZSAobGF6eSB4KVxuICAgIHwgRXhjZXB0aW9uIGV4IC0+IFNvbWUgKGxhenkgKHJhaXNlIGV4KSlcbiAgOztcblxuICBsZXQgY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdmFsdWUgPVxuICAgIE9wdGlvbi5tYXAgKGxhenlfY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdmFsdWUpIH5mOkxhenkuZm9yY2VcbiAgOztcblxuICBsZXQgdmFsdWVfaXNfY29uc3RhbnQgdmFsdWUgPSBPcHRpb24uaXNfc29tZSAobGF6eV9jb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB2YWx1ZSlcblxuICBsZXQgY29uc3RhbnRfb3JfdmFsdWUgKHdpdGhfaWQgOiBfIFZhbHVlLnQpIH5mID1cbiAgICB2YWx1ZV9leGNlcHRpb25fZm9sZGVyIH5mOihmdW4gKCkgLT5cbiAgICAgIG1hdGNoIGYgKCkgd2l0aFxuICAgICAgfCBTb21lIGNvbnN0YW50IC0+IHsgd2l0aF9pZCB3aXRoIHZhbHVlID0gQ29uc3RhbnQgY29uc3RhbnQgfVxuICAgICAgfCBOb25lIC0+IHdpdGhfaWQpXG4gIDs7XG5cbiAgbGV0IHNpbXBsaWZ5X2Fzc29jX2lmX3NpbXBsXG4gICAgKHR5cGUgayB2IGNtcClcbiAgICB+KGtleV9jb21wYXJhdG9yIDogKGssIGNtcCkgY29tcGFyYXRvcilcbiAgICB+KGtleV9pZCA6IGsgVHlwZV9lcXVhbC5JZC50KVxuICAgIH4oZGF0YV9pZCA6IHYgVHlwZV9lcXVhbC5JZC50KVxuICAgIChtYXAgOiAoaywgdiwgY21wKSBNYXAudCBWYWx1ZS50KVxuICAgIGJ5XG4gICAgPVxuICAgIGxldCBtb2R1bGUgQyA9ICh2YWwga2V5X2NvbXBhcmF0b3IpIGluXG4gICAgbGV0JW1hcC5PcHRpb24gYnksIGNhbl9jb250YWluX3BhdGggPVxuICAgICAgU2ltcGxpZnkuY29tcHV0YXRpb25fdG9fZnVuY3Rpb25cbiAgICAgICAgYnlcbiAgICAgICAgfmtleV9jb21wYXJlOkMuY29tcGFyYXRvci5jb21wYXJlXG4gICAgICAgIH5rZXlfaWRcbiAgICAgICAgfmRhdGFfaWRcbiAgICBpblxuICAgIGxldCBtYXlfY29udGFpbl9wYXRoID1cbiAgICAgIG1hdGNoIGNhbl9jb250YWluX3BhdGggd2l0aFxuICAgICAgfCBgQ2FuX2NvbnRhaW5fcGF0aCAtPiBNYXlfY29udGFpbi5QYXRoLlllc19vcl9tYXliZVxuICAgICAgfCBgQ2Fubm90X2NvbnRhaW5fcGF0aCAtPiBOb1xuICAgIGluXG4gICAgQ29tcHV0YXRpb24uQXNzb2Nfc2ltcGwgeyBtYXA7IGJ5OyBtYXlfY29udGFpbl9wYXRoIH1cbiAgOztcbmVuZFxuXG5tb2R1bGUgQ29uc3RhbnRfZm9sZCAoUmVjdXJzZSA6IEZpeF90cmFuc2Zvcm0uUmVjdXJzZSB3aXRoIG1vZHVsZSBUeXBlcyA6PSBUeXBlcykgPSBzdHJ1Y3RcbiAgbGV0IHRyYW5zZm9ybV92ICh0eXBlIGEpIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAodmFsdWUgOiBhIFZhbHVlLnQpXG4gICAgOiBhIFZhbHVlLnRcbiAgICA9XG4gICAgbGV0ICgpLCAoKSwgKHsgVmFsdWUudmFsdWU7IGhlcmUgPSBfOyBpZCB9IGFzIHZhbHVlX3dpdGhfaWQpID1cbiAgICAgIFJlY3Vyc2Uub25fdmFsdWUgeyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCB9ICgpIGBTa2lwcGluZ19vdmVyIHZhbHVlXG4gICAgaW5cbiAgICBsZXQgcmVidWlsZCB2YWx1ZSA9IHsgdmFsdWVfd2l0aF9pZCB3aXRoIHZhbHVlIH0gaW5cbiAgICBsZXQgb3BlbiBPcHRpb24uTGV0X3N5bnRheCBpblxuICAgIG1hdGNoIHZhbHVlIHdpdGhcbiAgICB8IEV4Y2VwdGlvbiBfIHwgQ29uc3RhbnQgXyB8IEluY3IgXyAtPiB2YWx1ZV93aXRoX2lkXG4gICAgfCBOYW1lZCBfIC0+XG4gICAgICAobWF0Y2ggQ29uc3RhbnRzX2luX3Njb3BlLmZpbmQgY29uc3RhbnRzX2luX3Njb3BlIGlkIHdpdGhcbiAgICAgICB8IFNvbWUgdmFsdWUgLT4gdmFsdWVcbiAgICAgICB8IE5vbmUgLT4gdmFsdWVfd2l0aF9pZClcbiAgICB8IEJvdGggKGEsIGIpIGFzIG9yaWdpbmFsIC0+XG4gICAgICB2YWx1ZV9leGNlcHRpb25fZm9sZGVyIH5mOihmdW4gKCkgLT5cbiAgICAgICAgbGV0IHZhbHVlID1cbiAgICAgICAgICBtYXRjaCBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCBhLCBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCBiIHdpdGhcbiAgICAgICAgICB8IFNvbWUgbCwgU29tZSByIC0+IFZhbHVlLkNvbnN0YW50IChsLCByKVxuICAgICAgICAgIHwgU29tZSBsLCBOb25lIC0+IE1hcCB7IHQgPSBiOyBmID0gKGZ1biBiIC0+IGwsIGIpIH1cbiAgICAgICAgICB8IE5vbmUsIFNvbWUgciAtPiBNYXAgeyB0ID0gYTsgZiA9IChmdW4gYSAtPiBhLCByKSB9XG4gICAgICAgICAgfCBOb25lLCBOb25lIC0+IG9yaWdpbmFsXG4gICAgICAgIGluXG4gICAgICAgIHJlYnVpbGQgdmFsdWUpXG4gICAgfCBDdXRvZmYgeyB0OyBlcXVhbDsgYWRkZWRfYnlfbGV0X3N5bnRheCA9IHdhc193cmFwcGVyX2N1dG9mZl9hZGRlZF9ieV9sZXRfc3ludGF4IH0gYXNcbiAgICAgIG9yaWdpbmFsIC0+XG4gICAgICB2YWx1ZV9leGNlcHRpb25fZm9sZGVyIH5mOihmdW4gKCkgLT5cbiAgICAgICAgcmVidWlsZFxuICAgICAgICAgIChtYXRjaCBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0LCB0LnZhbHVlIHdpdGhcbiAgICAgICAgICAgfCBTb21lIHYsIF8gLT4gQ29uc3RhbnQgdlxuICAgICAgICAgICB8ICggTm9uZVxuICAgICAgICAgICAgICwgQ3V0b2ZmXG4gICAgICAgICAgICAgICAgIHsgdFxuICAgICAgICAgICAgICAgICA7IGVxdWFsID0gaW5uZXJfZXF1YWxcbiAgICAgICAgICAgICAgICAgOyBhZGRlZF9ieV9sZXRfc3ludGF4ID0gd2FzX25lc3RlZF9jdXRvZmZfYWRkZWRfYnlfbGV0X3N5bnRheFxuICAgICAgICAgICAgICAgICB9ICkgLT5cbiAgICAgICAgICAgICBsZXQgYWRkZWRfYnlfbGV0X3N5bnRheCA9XG4gICAgICAgICAgICAgICB3YXNfd3JhcHBlcl9jdXRvZmZfYWRkZWRfYnlfbGV0X3N5bnRheFxuICAgICAgICAgICAgICAgJiYgd2FzX25lc3RlZF9jdXRvZmZfYWRkZWRfYnlfbGV0X3N5bnRheFxuICAgICAgICAgICAgIGluXG4gICAgICAgICAgICAgQ3V0b2ZmXG4gICAgICAgICAgICAgICB7IHRcbiAgICAgICAgICAgICAgIDsgZXF1YWwgPSAoZnVuIGEgYiAtPiBpbm5lcl9lcXVhbCBhIGIgfHwgZXF1YWwgYSBiKVxuICAgICAgICAgICAgICAgOyBhZGRlZF9ieV9sZXRfc3ludGF4XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIHwgTm9uZSwgXyAtPiBvcmlnaW5hbCkpXG4gICAgfCBNYXAgeyB0OyBmIH0gLT5cbiAgICAgIGNvbnN0YW50X29yX3ZhbHVlIHZhbHVlX3dpdGhfaWQgfmY6KGZ1biAoKSAtPlxuICAgICAgICBsZXQlbWFwIHQxID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdCBpblxuICAgICAgICBmIHQxKVxuICAgIHwgTWFwMiB7IHQxOyB0MjsgZiB9IC0+XG4gICAgICBjb25zdGFudF9vcl92YWx1ZSB2YWx1ZV93aXRoX2lkIH5mOihmdW4gKCkgLT5cbiAgICAgICAgbGV0JWJpbmQgdDEgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0MSBpblxuICAgICAgICBsZXQlbWFwIHQyID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDIgaW5cbiAgICAgICAgZiB0MSB0MilcbiAgICB8IE1hcDMgeyB0MTsgdDI7IHQzOyBmIH0gLT5cbiAgICAgIGNvbnN0YW50X29yX3ZhbHVlIHZhbHVlX3dpdGhfaWQgfmY6KGZ1biAoKSAtPlxuICAgICAgICBsZXQlYmluZCB0MSA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQxIGluXG4gICAgICAgIGxldCViaW5kIHQyID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDIgaW5cbiAgICAgICAgbGV0JW1hcCB0MyA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQzIGluXG4gICAgICAgIGYgdDEgdDIgdDMpXG4gICAgfCBNYXA0IHsgdDE7IHQyOyB0MzsgdDQ7IGYgfSAtPlxuICAgICAgY29uc3RhbnRfb3JfdmFsdWUgdmFsdWVfd2l0aF9pZCB+ZjooZnVuICgpIC0+XG4gICAgICAgIGxldCViaW5kIHQxID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDEgaW5cbiAgICAgICAgbGV0JWJpbmQgdDIgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0MiBpblxuICAgICAgICBsZXQlYmluZCB0MyA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQzIGluXG4gICAgICAgIGxldCVtYXAgdDQgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0NCBpblxuICAgICAgICBmIHQxIHQyIHQzIHQ0KVxuICAgIHwgTWFwNSB7IHQxOyB0MjsgdDM7IHQ0OyB0NTsgZiB9IC0+XG4gICAgICBjb25zdGFudF9vcl92YWx1ZSB2YWx1ZV93aXRoX2lkIH5mOihmdW4gKCkgLT5cbiAgICAgICAgbGV0JWJpbmQgdDEgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0MSBpblxuICAgICAgICBsZXQlYmluZCB0MiA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQyIGluXG4gICAgICAgIGxldCViaW5kIHQzID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDMgaW5cbiAgICAgICAgbGV0JWJpbmQgdDQgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0NCBpblxuICAgICAgICBsZXQlbWFwIHQ1ID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDUgaW5cbiAgICAgICAgZiB0MSB0MiB0MyB0NCB0NSlcbiAgICB8IE1hcDYgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyBmIH0gLT5cbiAgICAgIGNvbnN0YW50X29yX3ZhbHVlIHZhbHVlX3dpdGhfaWQgfmY6KGZ1biAoKSAtPlxuICAgICAgICBsZXQlYmluZCB0MSA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQxIGluXG4gICAgICAgIGxldCViaW5kIHQyID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDIgaW5cbiAgICAgICAgbGV0JWJpbmQgdDMgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0MyBpblxuICAgICAgICBsZXQlYmluZCB0NCA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQ0IGluXG4gICAgICAgIGxldCViaW5kIHQ1ID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDUgaW5cbiAgICAgICAgbGV0JW1hcCB0NiA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQ2IGluXG4gICAgICAgIGYgdDEgdDIgdDMgdDQgdDUgdDYpXG4gICAgfCBNYXA3IHsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyB0NjsgdDc7IGYgfSAtPlxuICAgICAgY29uc3RhbnRfb3JfdmFsdWUgdmFsdWVfd2l0aF9pZCB+ZjooZnVuICgpIC0+XG4gICAgICAgIGxldCViaW5kIHQxID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDEgaW5cbiAgICAgICAgbGV0JWJpbmQgdDIgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0MiBpblxuICAgICAgICBsZXQlYmluZCB0MyA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQzIGluXG4gICAgICAgIGxldCViaW5kIHQ0ID0gY29udGVudHNfaWZfdmFsdWVfaXNfY29uc3RhbnQgdDQgaW5cbiAgICAgICAgbGV0JWJpbmQgdDUgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0NSBpblxuICAgICAgICBsZXQlYmluZCB0NiA9IGNvbnRlbnRzX2lmX3ZhbHVlX2lzX2NvbnN0YW50IHQ2IGluXG4gICAgICAgIGxldCVtYXAgdDcgPSBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCB0NyBpblxuICAgICAgICBmIHQxIHQyIHQzIHQ0IHQ1IHQ2IHQ3KVxuICA7O1xuXG4gIG9wZW4gVHJhbXBvbGluZS5MZXRfc3ludGF4XG5cbiAgbGV0IHRyYW5zZm9ybV9jICh0eXBlIGEpIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAodCA6IGEgQ29tcHV0YXRpb24udClcbiAgICA6IGEgQ29tcHV0YXRpb24udCBUcmFtcG9saW5lLnRcbiAgICA9XG4gICAgbWF0Y2ggdCB3aXRoXG4gICAgfCBBc3NvYyAoeyBtYXA7IGtleV9pZDsgZGF0YV9pZDsgYnk7IGtleV9jb21wYXJhdG9yOyBfIH0gYXMgYXNzb2NfdCkgLT5cbiAgICAgIGxldCAoKSwgKCksIG1hcF92ID1cbiAgICAgICAgUmVjdXJzZS5vbl92YWx1ZSB7IGNvbnN0YW50c19pbl9zY29wZTsgZXZhbHVhdGVkIH0gKCkgYERpcmVjdGx5X29uIG1hcFxuICAgICAgaW5cbiAgICAgIChtYXRjaCBtYXBfdi52YWx1ZSB3aXRoXG4gICAgICAgfCBFeGNlcHRpb24gZXhuIC0+IHJldHVybiAoUHJvYy5yZWFkIChWYWx1ZS5yZXR1cm5fZXhuIGV4bikpXG4gICAgICAgfCBDb25zdGFudCBtYXAgLT5cbiAgICAgICAgIGxldCBmb2xkZWQgPVxuICAgICAgICAgICBNYXAubWFwaSBtYXAgfmY6KGZ1biB+a2V5IH5kYXRhIC0+XG4gICAgICAgICAgICAgKCogSW4gdGhpcyBjYXNlLCB0aGUgbWFwIGlzIGNvbnN0YW50LCBzbyB3ZSBoYXZlIGFjY2VzcyB0byB0aGUga2V5L2RhdGEgcGFpclxuICAgICAgICAgICAgICAgIGRpcmVjdGx5LiBXZSB1c2UgdGhlIFtTdWJdcyBiZWxvdyB3aXRoIHRoZSBjb3JyZWN0IFtrZXlfaWRdL1tkYXRhX2lkXSBzb1xuICAgICAgICAgICAgICAgIHRoYXQgW2J5XSB3aWxsIHJlZmVyIHRvIHRoZXNlIGNvbnN0YW50cyBhbmQgdGhlbiB3ZSBjYW4gcmVjdXJzaXZlbHkgcmVseSBvblxuICAgICAgICAgICAgICAgIHRoZSBjb25zdGFudC1mb2xkaW5nIG9wdGltaXphdGlvbnMgdG8gY2xlYW4gdXAgdGhlc2UgW1N1Yl1zIGZvciB1cy4gKilcbiAgICAgICAgICAgICBsZXQgZGF0YV9iaW5kaW5nID1cbiAgICAgICAgICAgICAgIENvbXB1dGF0aW9uLlN1YlxuICAgICAgICAgICAgICAgICB7IGhlcmUgPSBOb25lOyBmcm9tID0gUHJvYy5jb25zdCBkYXRhOyB2aWEgPSBkYXRhX2lkOyBpbnRvID0gYnkgfVxuICAgICAgICAgICAgIGluXG4gICAgICAgICAgICAgQ29tcHV0YXRpb24uU3ViXG4gICAgICAgICAgICAgICB7IGhlcmUgPSBOb25lOyBmcm9tID0gUHJvYy5jb25zdCBrZXk7IHZpYSA9IGtleV9pZDsgaW50byA9IGRhdGFfYmluZGluZyB9KVxuICAgICAgICAgICB8PiBQcm9jLkNvbXB1dGF0aW9uLmFsbF9tYXBcbiAgICAgICAgIGluXG4gICAgICAgICBsZXQlYmluZCAoKSwgKCksIHIgPVxuICAgICAgICAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAoKSBgRGlyZWN0bHlfb24gZm9sZGVkXG4gICAgICAgICBpblxuICAgICAgICAgcmV0dXJuIHJcbiAgICAgICB8IF8gLT5cbiAgICAgICAgIGxldCViaW5kICgpLCAoKSwgYnkgPVxuICAgICAgICAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uXG4gICAgICAgICAgICAgeyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCA9IE1heWJlIH1cbiAgICAgICAgICAgICAoKVxuICAgICAgICAgICAgIGBEaXJlY3RseV9vblxuICAgICAgICAgICAgIGJ5XG4gICAgICAgICBpblxuICAgICAgICAgKG1hdGNoIHNpbXBsaWZ5X2Fzc29jX2lmX3NpbXBsIH5rZXlfY29tcGFyYXRvciB+a2V5X2lkIH5kYXRhX2lkIG1hcF92IGJ5IHdpdGhcbiAgICAgICAgICB8IFNvbWUga2luZCAtPiByZXR1cm4ga2luZFxuICAgICAgICAgIHwgTm9uZSAtPiByZXR1cm4gKENvbXB1dGF0aW9uLkFzc29jIHsgYXNzb2NfdCB3aXRoIG1hcCA9IG1hcF92OyBieSB9KSkpXG4gICAgfCBBc3NvY19vblxuICAgICAgICAoeyBtYXA7IGlvX2NvbXBhcmF0b3IgPSBrZXlfY29tcGFyYXRvcjsgaW9fa2V5X2lkID0ga2V5X2lkOyBkYXRhX2lkOyBieTsgXyB9IGFzXG4gICAgICAgIGFzc29jX29uX3QpIC0+XG4gICAgICBsZXQgKCksICgpLCBtYXAgPVxuICAgICAgICBSZWN1cnNlLm9uX3ZhbHVlIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAoKSBgRGlyZWN0bHlfb24gbWFwXG4gICAgICBpblxuICAgICAgbGV0JWJpbmQgKCksICgpLCBieSA9XG4gICAgICAgIFJlY3Vyc2Uub25fY29tcHV0YXRpb25cbiAgICAgICAgICB7IGNvbnN0YW50c19pbl9zY29wZTsgZXZhbHVhdGVkID0gTWF5YmUgfVxuICAgICAgICAgICgpXG4gICAgICAgICAgYERpcmVjdGx5X29uXG4gICAgICAgICAgYnlcbiAgICAgIGluXG4gICAgICAobWF0Y2ggc2ltcGxpZnlfYXNzb2NfaWZfc2ltcGwgfmtleV9jb21wYXJhdG9yIH5rZXlfaWQgfmRhdGFfaWQgbWFwIGJ5IHdpdGhcbiAgICAgICB8IFNvbWUga2luZCAtPiByZXR1cm4ga2luZFxuICAgICAgIHwgTm9uZSAtPiByZXR1cm4gKENvbXB1dGF0aW9uLkFzc29jX29uIHsgYXNzb2Nfb25fdCB3aXRoIG1hcDsgYnkgfSkpXG4gICAgfCBTd2l0Y2ggeyBtYXRjaF87IGFybXM7IGhlcmUgfSAtPlxuICAgICAgbGV0ICgpLCAoKSwgbWF0Y2hfID1cbiAgICAgICAgUmVjdXJzZS5vbl92YWx1ZSB7IGNvbnN0YW50c19pbl9zY29wZTsgZXZhbHVhdGVkIH0gKCkgYERpcmVjdGx5X29uIG1hdGNoX1xuICAgICAgaW5cbiAgICAgIChtYXRjaCBtYXRjaF8udmFsdWUgd2l0aFxuICAgICAgIHwgRXhjZXB0aW9uIGV4biAtPiByZXR1cm4gKFByb2MucmVhZCAoVmFsdWUucmV0dXJuX2V4biBleG4pKVxuICAgICAgIHwgQ29uc3RhbnQgaSAtPlxuICAgICAgICAgKG1hdGNoIE1hcC5maW5kIGFybXMgaSB3aXRoXG4gICAgICAgICAgfCBTb21lIGMgLT5cbiAgICAgICAgICAgIGxldCViaW5kICgpLCAoKSwgciA9XG4gICAgICAgICAgICAgIFJlY3Vyc2Uub25fY29tcHV0YXRpb24geyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCB9ICgpIGBEaXJlY3RseV9vbiBjXG4gICAgICAgICAgICBpblxuICAgICAgICAgICAgcmV0dXJuIHJcbiAgICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICAgIFslc2V4cFxuICAgICAgICAgICAgICBcInN3aXRjaCB3aXRoIHZhbHVlXCIsICgoaSA6IGludCksIFwiZG9lcyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgY29tcHV0YXRpb25cIildXG4gICAgICAgICAgICB8PiBFcnJvci5jcmVhdGVfc1xuICAgICAgICAgICAgfD4gRXJyb3IudG9fZXhuXG4gICAgICAgICAgICB8PiBWYWx1ZS5yZXR1cm5fZXhuXG4gICAgICAgICAgICB8PiBQcm9jLnJlYWRcbiAgICAgICAgICAgIHw+IHJldHVybilcbiAgICAgICB8IF8gLT5cbiAgICAgICAgIGxldCViaW5kIGFybXMgPVxuICAgICAgICAgICBNYXAubWFwIGFybXMgfmY6KGZ1biBjIC0+XG4gICAgICAgICAgICAgbGV0JWJpbmQgKCksICgpLCByID1cbiAgICAgICAgICAgICAgIFJlY3Vyc2Uub25fY29tcHV0YXRpb25cbiAgICAgICAgICAgICAgICAgeyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCA9IE1heWJlIH1cbiAgICAgICAgICAgICAgICAgKClcbiAgICAgICAgICAgICAgICAgYERpcmVjdGx5X29uXG4gICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICBpblxuICAgICAgICAgICAgIHJldHVybiByKVxuICAgICAgICAgICB8PiBUcmFtcG9saW5lLmFsbF9tYXBcbiAgICAgICAgIGluXG4gICAgICAgICByZXR1cm4gKENvbXB1dGF0aW9uLlN3aXRjaCB7IG1hdGNoXzsgYXJtczsgaGVyZSB9KSlcbiAgICB8IFN1YiB7IGZyb207IHZpYTsgaW50bzsgaGVyZSB9IC0+XG4gICAgICBsZXQlYmluZCAoKSwgKCksIGZyb20gPVxuICAgICAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAoKSBgRGlyZWN0bHlfb24gZnJvbVxuICAgICAgaW5cbiAgICAgIChtYXRjaCBmcm9tIHdpdGhcbiAgICAgICB8IFJldHVybiB3aXRoX2lkIHdoZW4gdmFsdWVfaXNfY29uc3RhbnQgd2l0aF9pZCAtPlxuICAgICAgICAgbGV0IG5ld19jb25zdGFudHNfaW5fc2NvcGUgPVxuICAgICAgICAgICBDb25zdGFudHNfaW5fc2NvcGUuYWRkX2V4biB+a2V5OnZpYSB+ZGF0YTp3aXRoX2lkIGNvbnN0YW50c19pbl9zY29wZVxuICAgICAgICAgaW5cbiAgICAgICAgIGxldCViaW5kICgpLCAoKSwgYyA9XG4gICAgICAgICAgIFJlY3Vyc2Uub25fY29tcHV0YXRpb25cbiAgICAgICAgICAgICB7IGNvbnN0YW50c19pbl9zY29wZSA9IG5ld19jb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCB9XG4gICAgICAgICAgICAgKClcbiAgICAgICAgICAgICBgRGlyZWN0bHlfb25cbiAgICAgICAgICAgICBpbnRvXG4gICAgICAgICBpblxuICAgICAgICAgcmV0dXJuIGNcbiAgICAgICB8IF8gLT5cbiAgICAgICAgIGxldCViaW5kICgpLCAoKSwgaW50byA9XG4gICAgICAgICAgIFJlY3Vyc2Uub25fY29tcHV0YXRpb24geyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCB9ICgpIGBEaXJlY3RseV9vbiBpbnRvXG4gICAgICAgICBpblxuICAgICAgICAgcmV0dXJuIChDb21wdXRhdGlvbi5TdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfSkpXG4gICAgfCBMZWFmMSB7IGlucHV0OyBpbnB1dF9pZDsgbW9kZWw7IGR5bmFtaWNfYWN0aW9uOyBhcHBseV9hY3Rpb247IHJlc2V0IH0gLT5cbiAgICAgIGxldCAoKSwgKCksIGlucHV0ID1cbiAgICAgICAgUmVjdXJzZS5vbl92YWx1ZSB7IGNvbnN0YW50c19pbl9zY29wZTsgZXZhbHVhdGVkIH0gKCkgYERpcmVjdGx5X29uIGlucHV0XG4gICAgICBpblxuICAgICAgY29tcHV0YXRpb25fZXhjZXB0aW9uX2ZvbGRlciBcImxlYWYxXCIgfmY6KGZ1biAoKSAtPlxuICAgICAgICBtYXRjaCBjb250ZW50c19pZl92YWx1ZV9pc19jb25zdGFudCBpbnB1dCB3aXRoXG4gICAgICAgIHwgTm9uZSAtPlxuICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgKENvbXB1dGF0aW9uLkxlYWYxXG4gICAgICAgICAgICAgICB7IGlucHV0OyBpbnB1dF9pZDsgbW9kZWw7IGR5bmFtaWNfYWN0aW9uOyBhcHBseV9hY3Rpb247IHJlc2V0IH0pXG4gICAgICAgIHwgU29tZSBpbnB1dCAtPlxuICAgICAgICAgIGxldCBhcHBseV9hY3Rpb24gfmluamVjdCA9IGFwcGx5X2FjdGlvbiB+aW5qZWN0IChTb21lIGlucHV0KSBpblxuICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgKENvbXB1dGF0aW9uLkxlYWYwXG4gICAgICAgICAgICAgICB7IG1vZGVsOyBzdGF0aWNfYWN0aW9uID0gZHluYW1pY19hY3Rpb247IGFwcGx5X2FjdGlvbjsgcmVzZXQgfSkpXG4gICAgfCBMYXp5IHQgLT5cbiAgICAgIChtYXRjaCBldmFsdWF0ZWQgd2l0aFxuICAgICAgIHwgVW5jb25kaXRpb25hbGx5IC0+XG4gICAgICAgICBsZXQlYmluZCAoKSwgKCksIGMgPVxuICAgICAgICAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uXG4gICAgICAgICAgICAgeyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCA9IFVuY29uZGl0aW9uYWxseSB9XG4gICAgICAgICAgICAgKClcbiAgICAgICAgICAgICBgRGlyZWN0bHlfb25cbiAgICAgICAgICAgICAoTGF6eS5mb3JjZSB0KVxuICAgICAgICAgaW5cbiAgICAgICAgIHJldHVybiBjXG4gICAgICAgfCBNYXliZSAtPlxuICAgICAgICAgTGF6eS5tYXAgdCB+ZjooZnVuIHQgLT5cbiAgICAgICAgICAgKCogQmVjYXVzZSB0aGlzIHJlY3Vyc2lvbiBpcyBpbnNpZGUgb2YgYSBMYXp5Lm1hcCwgaXQnbGwgb25seSBwcm9jZWVkXG4gICAgICAgICAgICAgIGJlIHJ1biBpZiB0aGUgbGF6eSBpcyBmb3JjZWQsIGF0IHdoaWNoIHBvaW50IHdlIF9hcmVfIHVuY29uZGl0aW9uYWxseVxuICAgICAgICAgICAgICBydW5uaW5nIGl0LiAqKVxuICAgICAgICAgICAoKiBOT1RFOiBDb25zdGFudCBmb2xkaW5nIG9uIGxhenlzIGlzIGRlZmVycmVkIHVudGlsIGxhenlzIGFyZSBmb3JjZWQuIE9uZVxuICAgICAgICAgICAgICBpbXBvcnRhbnQgY29uc2lkZXJhdGlvbiBpcyB0aGF0IG11bHRpcGxlIGRlZmVycmVkIG9wdGltaXphdGlvbnMgc2hvdWxkIG9jY3VyXG4gICAgICAgICAgICAgIGFzIGlmIHRoZSBsYXp5J3Mgd2VyZSBub3QgdGhlcmUgdG8gYmVnaW4gd2l0aC4gT25lIHBvc3NpYmxlIGJ1ZyBoZXJlIGlzIHRoYXRcbiAgICAgICAgICAgICAgbmVzdGVkIG9wdGltaXphdGlvbnMgY291bGQgYmUgcmV2ZXJzZWQgZS5nLiAoY29uc3RhbnRfZm9sZCAobGF6eSAoY29tcCkpKSA9PT5cbiAgICAgICAgICAgICAgKGxhenkgKGNvbnN0YW50X2ZvbGQgKGNvbXApKSksIGJ1dCBiZWNhdXNlIHdlIHVzZSBMYXp5Lm1hcCB0aGUgc2FtZSBvcmRlciBpc1xuICAgICAgICAgICAgICBwcmVzZXJ2ZWQuIFRoZXJlIGlzIG5vdCBhIHVzZSBjYXNlIGZvciB0aGlzIHJpZ2h0IG5vdywgYnV0IGlmIHdlIHdhbnQgbW9yZVxuICAgICAgICAgICAgICBpbnRlcmVzdGluZyBpbnRlcmFjY3Rpb25zIGJldHdlZW4gZGVmZXJyZWQgb3B0aW1pemF0aW9ucywgd2UgY291bGQgbWludCBhXG4gICAgICAgICAgICAgIHR5cGUgZm9yIGRlZmVycmVkIG9wdGltaXphdGlvbnMgd2hpY2ggd2UgY2FuIGludHJvc3BlY3QuXG4gICAgICAgICAgICopXG4gICAgICAgICAgIFRyYW1wb2xpbmUucnVuXG4gICAgICAgICAgICAgKGxldCViaW5kICgpLCAoKSwgdCA9XG4gICAgICAgICAgICAgICAgUmVjdXJzZS5vbl9jb21wdXRhdGlvblxuICAgICAgICAgICAgICAgICAgeyBjb25zdGFudHNfaW5fc2NvcGU7IGV2YWx1YXRlZCA9IFVuY29uZGl0aW9uYWxseSB9XG4gICAgICAgICAgICAgICAgICAoKVxuICAgICAgICAgICAgICAgICAgYERpcmVjdGx5X29uXG4gICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgIGluXG4gICAgICAgICAgICAgIHJldHVybiB0KSlcbiAgICAgICAgIHw+IENvbXB1dGF0aW9uLkxhenlcbiAgICAgICAgIHw+IHJldHVybilcbiAgICB8IFJldHVybiBfXG4gICAgfCBMZWFmMCBfXG4gICAgfCBMZWFmX2luY3IgX1xuICAgIHwgU3RvcmUgX1xuICAgIHwgRmV0Y2ggX1xuICAgIHwgV3JhcCBfXG4gICAgfCBXaXRoX21vZGVsX3Jlc2V0dGVyIF9cbiAgICB8IFBhdGhcbiAgICB8IEFzc29jX3NpbXBsIF9cbiAgICB8IExpZmVjeWNsZSBfIC0+XG4gICAgICBsZXQlYmluZCAoKSwgKCksIGMgPVxuICAgICAgICBSZWN1cnNlLm9uX2NvbXB1dGF0aW9uIHsgY29uc3RhbnRzX2luX3Njb3BlOyBldmFsdWF0ZWQgfSAoKSBgU2tpcHBpbmdfb3ZlciB0XG4gICAgICBpblxuICAgICAgcmV0dXJuIGNcbiAgOztcblxuICBsZXQgdHJhbnNmb3JtX3YgY29uc3RhbnRzX2luX3Njb3BlICgpIHYgPSAoKSwgKCksIHRyYW5zZm9ybV92IGNvbnN0YW50c19pbl9zY29wZSB2XG5cbiAgbGV0IHRyYW5zZm9ybV9jIGNvbnN0YW50c19pbl9zY29wZSAoKSBjID1cbiAgICBsZXQlYmluZCByID0gdHJhbnNmb3JtX2MgY29uc3RhbnRzX2luX3Njb3BlIGMgaW5cbiAgICByZXR1cm4gKCgpLCAoKSwgcilcbiAgOztcbmVuZFxuXG5vcGVuIEZpeF90cmFuc2Zvcm0uTWFrZSAoVHlwZXMpIChDb25zdGFudF9mb2xkKVxuXG5sZXQgY29uc3RhbnRfZm9sZCBjID1cbiAgbGV0ICgpLCAoKSwgciA9XG4gICAgVHJhbXBvbGluZS5ydW5cbiAgICAgICh0cmFuc2Zvcm1fY1xuICAgICAgICAgeyBjb25zdGFudHNfaW5fc2NvcGUgPSBDb25zdGFudHNfaW5fc2NvcGUuZW1wdHk7IGV2YWx1YXRlZCA9IFVuY29uZGl0aW9uYWxseSB9XG4gICAgICAgICAoKVxuICAgICAgICAgYylcbiAgaW5cbiAgclxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5sZXQgdmFsdWVfbWFwICh0eXBlIGEpICh7IHZhbHVlOyBoZXJlOyBpZCB9IDogYSBWYWx1ZS50KSA9XG4gIGxldCB2YWx1ZSA9XG4gICAgbWF0Y2ggdmFsdWUgd2l0aFxuICAgIHwgTWFwXG4gICAgICAgIHsgZlxuICAgICAgICA7IHQgPVxuICAgICAgICAgICAgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgQm90aFxuICAgICAgICAgICAgICAgICAgKCB0MVxuICAgICAgICAgICAgICAgICAgLCB7IHZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEJvdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAsIHsgdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQm90aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB7IHZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJvdGggKHQ1LCB7IHZhbHVlID0gQm90aCAodDYsIHQ3KTsgXyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IF9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IF9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgX1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICA7IF9cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICA7IF9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAtPlxuICAgICAgVmFsdWUuTWFwN1xuICAgICAgICB7IGYgPSAoZnVuIHQxIHQyIHQzIHQ0IHQ1IHQ2IHQ3IC0+IGYgKHQxLCAodDIsICh0MywgKHQ0LCAodDUsICh0NiwgdDcpKSkpKSkpXG4gICAgICAgIDsgdDFcbiAgICAgICAgOyB0MlxuICAgICAgICA7IHQzXG4gICAgICAgIDsgdDRcbiAgICAgICAgOyB0NVxuICAgICAgICA7IHQ2XG4gICAgICAgIDsgdDdcbiAgICAgICAgfVxuICAgIHwgTWFwXG4gICAgICAgIHsgZlxuICAgICAgICA7IHQgPVxuICAgICAgICAgICAgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgQm90aFxuICAgICAgICAgICAgICAgICAgKCB0MVxuICAgICAgICAgICAgICAgICAgLCB7IHZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEJvdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAsIHsgdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgeyB2YWx1ZSA9IEJvdGggKHQ0LCB7IHZhbHVlID0gQm90aCAodDUsIHQ2KTsgXyB9KTsgXyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgX1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICA7IF9cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICA7IF9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAtPlxuICAgICAgTWFwNlxuICAgICAgICB7IGYgPSAoZnVuIHQxIHQyIHQzIHQ0IHQ1IHQ2IC0+IGYgKHQxLCAodDIsICh0MywgKHQ0LCAodDUsIHQ2KSkpKSkpXG4gICAgICAgIDsgdDFcbiAgICAgICAgOyB0MlxuICAgICAgICA7IHQzXG4gICAgICAgIDsgdDRcbiAgICAgICAgOyB0NVxuICAgICAgICA7IHQ2XG4gICAgICAgIH1cbiAgICB8IE1hcFxuICAgICAgICB7IGZcbiAgICAgICAgOyB0ID1cbiAgICAgICAgICAgIHsgdmFsdWUgPVxuICAgICAgICAgICAgICAgIEJvdGhcbiAgICAgICAgICAgICAgICAgICggdDFcbiAgICAgICAgICAgICAgICAgICwgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBCb3RoICh0MiwgeyB2YWx1ZSA9IEJvdGggKHQzLCB7IHZhbHVlID0gQm90aCAodDQsIHQ1KTsgXyB9KTsgXyB9KVxuICAgICAgICAgICAgICAgICAgICA7IF9cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICA7IF9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAtPlxuICAgICAgTWFwNVxuICAgICAgICB7IGYgPSAoZnVuIHQxIHQyIHQzIHQ0IHQ1IC0+IGYgKHQxLCAodDIsICh0MywgKHQ0LCB0NSkpKSkpOyB0MTsgdDI7IHQzOyB0NDsgdDUgfVxuICAgIHwgTWFwXG4gICAgICAgIHsgZlxuICAgICAgICA7IHQgPVxuICAgICAgICAgICAgeyB2YWx1ZSA9IEJvdGggKHQxLCB7IHZhbHVlID0gQm90aCAodDIsIHsgdmFsdWUgPSBCb3RoICh0MywgdDQpOyBfIH0pOyBfIH0pXG4gICAgICAgICAgICA7IF9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAtPiBNYXA0IHsgZiA9IChmdW4gdDEgdDIgdDMgdDQgLT4gZiAodDEsICh0MiwgKHQzLCB0NCkpKSk7IHQxOyB0MjsgdDM7IHQ0IH1cbiAgICB8IE1hcCB7IGY7IHQgPSB7IHZhbHVlID0gQm90aCAodDEsIHsgdmFsdWUgPSBCb3RoICh0MiwgdDMpOyBfIH0pOyBfIH0gfSAtPlxuICAgICAgTWFwMyB7IGYgPSAoZnVuIHQxIHQyIHQzIC0+IGYgKHQxLCAodDIsIHQzKSkpOyB0MTsgdDI7IHQzIH1cbiAgICB8IE1hcCB7IGY7IHQgPSB7IHZhbHVlID0gQm90aCAodDEsIHQyKTsgXyB9IH0gLT5cbiAgICAgIE1hcDIgeyBmID0gKGZ1biB0MSB0MiAtPiBmICh0MSwgdDIpKTsgdDE7IHQyIH1cbiAgICB8IEJvdGhcbiAgICAgICAgKCB0MVxuICAgICAgICAsIHsgdmFsdWUgPVxuICAgICAgICAgICAgICBCb3RoXG4gICAgICAgICAgICAgICAgKCB0MlxuICAgICAgICAgICAgICAgICwgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgQm90aFxuICAgICAgICAgICAgICAgICAgICAgICAgKCB0M1xuICAgICAgICAgICAgICAgICAgICAgICAgLCB7IHZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJvdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB0NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHsgdmFsdWUgPSBCb3RoICh0NSwgeyB2YWx1ZSA9IEJvdGggKHQ2LCB0Nyk7IF8gfSk7IF8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgX1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAgIDsgX1xuICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgOyBfXG4gICAgICAgICAgfSApIC0+XG4gICAgICBNYXA3XG4gICAgICAgIHsgZiA9IChmdW4gdDEgdDIgdDMgdDQgdDUgdDYgdDcgLT4gdDEsICh0MiwgKHQzLCAodDQsICh0NSwgKHQ2LCB0NykpKSkpKVxuICAgICAgICA7IHQxXG4gICAgICAgIDsgdDJcbiAgICAgICAgOyB0M1xuICAgICAgICA7IHQ0XG4gICAgICAgIDsgdDVcbiAgICAgICAgOyB0NlxuICAgICAgICA7IHQ3XG4gICAgICAgIH1cbiAgICB8IEJvdGhcbiAgICAgICAgKCB0MVxuICAgICAgICAsIHsgdmFsdWUgPVxuICAgICAgICAgICAgICBCb3RoXG4gICAgICAgICAgICAgICAgKCB0MlxuICAgICAgICAgICAgICAgICwgeyB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgQm90aCAodDMsIHsgdmFsdWUgPSBCb3RoICh0NCwgeyB2YWx1ZSA9IEJvdGggKHQ1LCB0Nik7IF8gfSk7IF8gfSlcbiAgICAgICAgICAgICAgICAgIDsgX1xuICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgOyBfXG4gICAgICAgICAgfSApIC0+XG4gICAgICBNYXA2XG4gICAgICAgIHsgZiA9IChmdW4gdDEgdDIgdDMgdDQgdDUgdDYgLT4gdDEsICh0MiwgKHQzLCAodDQsICh0NSwgdDYpKSkpKVxuICAgICAgICA7IHQxXG4gICAgICAgIDsgdDJcbiAgICAgICAgOyB0M1xuICAgICAgICA7IHQ0XG4gICAgICAgIDsgdDVcbiAgICAgICAgOyB0NlxuICAgICAgICB9XG4gICAgfCBCb3RoXG4gICAgICAgICggdDFcbiAgICAgICAgLCB7IHZhbHVlID0gQm90aCAodDIsIHsgdmFsdWUgPSBCb3RoICh0MywgeyB2YWx1ZSA9IEJvdGggKHQ0LCB0NSk7IF8gfSk7IF8gfSk7IF8gfVxuICAgICAgICApIC0+XG4gICAgICBNYXA1IHsgZiA9IChmdW4gdDEgdDIgdDMgdDQgdDUgLT4gdDEsICh0MiwgKHQzLCAodDQsIHQ1KSkpKTsgdDE7IHQyOyB0MzsgdDQ7IHQ1IH1cbiAgICB8IEJvdGggKHQxLCB7IHZhbHVlID0gQm90aCAodDIsIHsgdmFsdWUgPSBCb3RoICh0MywgdDQpOyBfIH0pOyBfIH0pIC0+XG4gICAgICBNYXA0IHsgZiA9IChmdW4gdDEgdDIgdDMgdDQgLT4gdDEsICh0MiwgKHQzLCB0NCkpKTsgdDE7IHQyOyB0MzsgdDQgfVxuICAgIHwgQm90aCAodDEsIHsgdmFsdWUgPSBCb3RoICh0MiwgdDMpOyBfIH0pIC0+XG4gICAgICBNYXAzIHsgZiA9IChmdW4gdDEgdDIgdDMgLT4gdDEsICh0MiwgdDMpKTsgdDE7IHQyOyB0MyB9XG4gICAgfCB2IC0+IHZcbiAgaW5cbiAgeyBWYWx1ZS52YWx1ZTsgaGVyZTsgaWQgfVxuOztcblxubW9kdWxlIFR5cGVzID0gc3RydWN0XG4gIG1vZHVsZSBEb3duID0gVW5pdFxuICBtb2R1bGUgQWNjID0gVW5pdFxuICBtb2R1bGUgVXAgPSBGaXhfdHJhbnNmb3JtLlVuaXRcbmVuZFxuXG5tb2R1bGUgRmxhdHRlbl92YWx1ZXMgKFJlY3Vyc2UgOiBGaXhfdHJhbnNmb3JtLlJlY3Vyc2Ugd2l0aCBtb2R1bGUgVHlwZXMgOj0gVHlwZXMpID1cbnN0cnVjdFxuICBsZXQgdHJhbnNmb3JtX3YgKCkgKCkgdiA9XG4gICAgbGV0IG91dCA9IHZhbHVlX21hcCB2IGluXG4gICAgUmVjdXJzZS5vbl92YWx1ZSAoKSAoKSBgU2tpcHBpbmdfb3ZlciBvdXRcbiAgOztcblxuICBsZXQgdHJhbnNmb3JtX2MgKCkgKCkgYyA9IFJlY3Vyc2Uub25fY29tcHV0YXRpb24gKCkgKCkgYFNraXBwaW5nX292ZXIgY1xuZW5kXG5cbm9wZW4gRml4X3RyYW5zZm9ybS5NYWtlIChUeXBlcykgKEZsYXR0ZW5fdmFsdWVzKVxuXG5sZXQgZmxhdHRlbl92YWx1ZXMgYyA9XG4gIGxldCAoKSwgKCksIHIgPSBUcmFtcG9saW5lLnJ1biAodHJhbnNmb3JtX2MgKCkgKCkgYykgaW5cbiAgclxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5sZXQgcHJlX3Byb2Nlc3MgdCA9IHQgfD4gQ29uc3RhbnRfZm9sZC5jb25zdGFudF9mb2xkIHw+IEZsYXR0ZW5fdmFsdWVzLmZsYXR0ZW5fdmFsdWVzXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxubGV0IGZpbmFsaXplIG5vZGVfcGF0aF9idWlsZGVyID0gbGF6eSAobm9kZV9wYXRoX2J1aWxkZXIgfD4gTm9kZV9wYXRoLmZpbmFsaXplKVxuXG5tb2R1bGUgQm9uc2FpX3ZhbHVlID0gVmFsdWVcblxubW9kdWxlIElkIDogc2lnXG4gIHR5cGUgdCBbQEBkZXJpdmluZyBjb21wYXJlLCBoYXNoLCBzZXhwX29mXVxuXG4gIHZhbCB0b19zdHJpbmcgOiB0IC0+IHN0cmluZ1xuICB2YWwgb2ZfdHlwZV9pZCA6IF8gVHlwZV9lcXVhbC5JZC50IC0+IHRcbiAgdmFsIG9mX21vZGVsX3R5cGVfaWQgOiBfIE1ldGEuTW9kZWwuVHlwZV9pZC50IC0+IHRcbiAgdmFsIG9mX2ludF9mb3JfdGVzdGluZyA6IGludCAtPiB0XG5lbmQgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IFR5cGUgb2YgVHlwZV9lcXVhbC5JZC5VaWQudFxuICAgIHwgVGVzdCBvZiBpbnRcbiAgW0BAZGVyaXZpbmcgY29tcGFyZSwgaGFzaCwgc2V4cF9vZl1cblxuICBsZXQgdG9fc3RyaW5nIHQgPVxuICAgIG1hdGNoIHQgd2l0aFxuICAgIHwgVHlwZSB1aWQgLT4gVHlwZV9lcXVhbC5JZC5VaWQuc2V4cF9vZl90IHVpZCB8PiBTZXhwLnRvX3N0cmluZ1xuICAgIHwgVGVzdCBpbnQgLT4gSW50LnRvX3N0cmluZyBpbnRcbiAgOztcblxuICBsZXQgb2ZfdHlwZV9pZCBpZCA9IFR5cGUgKFR5cGVfZXF1YWwuSWQudWlkIGlkKVxuICBsZXQgb2ZfbW9kZWxfdHlwZV9pZCBpZCA9IGlkIHw+IE1ldGEuTW9kZWwuVHlwZV9pZC50b190eXBlX2lkIHw+IG9mX3R5cGVfaWRcbiAgbGV0IG9mX2ludF9mb3JfdGVzdGluZyBpbnQgPSBUZXN0IGludFxuZW5kXG5cbm1vZHVsZSBWYWx1ZSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHsgbm9kZV9wYXRoIDogTm9kZV9wYXRoLnQgTGF6eS50XG4gICAgOyBraW5kIDoga2luZFxuICAgIDsgaGVyZSA6IFNvdXJjZV9jb2RlX3Bvc2l0aW9uLlN0YWJsZS5WMS50IG9wdGlvblxuICAgIDsgaWQgOiBJZC50XG4gICAgfVxuXG4gIGFuZCBraW5kID1cbiAgICB8IENvbnN0YW50XG4gICAgfCBFeGNlcHRpb25cbiAgICB8IEluY3JcbiAgICB8IE5hbWVkXG4gICAgfCBDdXRvZmYgb2ZcbiAgICAgICAgeyB0IDogdFxuICAgICAgICA7IGFkZGVkX2J5X2xldF9zeW50YXggOiBib29sXG4gICAgICAgIH1cbiAgICB8IE1hcG4gb2YgeyBpbnB1dHMgOiB0IGxpc3QgfVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIG1vZHVsZSBNaW5pbWFsID0gc3RydWN0XG4gICAgdHlwZSBub25yZWMgY29tcGxldGUgPSB0XG5cbiAgICB0eXBlIHQgPVxuICAgICAgfCBDb25zdGFudCBvZiB7IGlkIDogSWQudCB9XG4gICAgICB8IEV4Y2VwdGlvblxuICAgICAgfCBJbmNyXG4gICAgICB8IE5hbWVkIG9mIHsgdWlkIDogSWQudCB9XG4gICAgICB8IEN1dG9mZiBvZlxuICAgICAgICAgIHsgdCA6IHRcbiAgICAgICAgICA7IGFkZGVkX2J5X2xldF9zeW50YXggOiBib29sXG4gICAgICAgICAgfVxuICAgICAgfCBNYXBuIG9mIHsgaW5wdXRzIDogdCBsaXN0IH1cbiAgICBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gICAgbGV0IHJlYyBvZl9jb21wbGV0ZSAoY29tcGxldGUgOiBjb21wbGV0ZSkgPVxuICAgICAgbWF0Y2ggY29tcGxldGUua2luZCB3aXRoXG4gICAgICB8IENvbnN0YW50IC0+IENvbnN0YW50IHsgaWQgPSBjb21wbGV0ZS5pZCB9XG4gICAgICB8IEV4Y2VwdGlvbiAtPiBFeGNlcHRpb25cbiAgICAgIHwgSW5jciAtPiBJbmNyXG4gICAgICB8IE5hbWVkIC0+IE5hbWVkIHsgdWlkID0gY29tcGxldGUuaWQgfVxuICAgICAgfCBDdXRvZmYgeyB0OyBhZGRlZF9ieV9sZXRfc3ludGF4IH0gLT5cbiAgICAgICAgQ3V0b2ZmIHsgdCA9IG9mX2NvbXBsZXRlIHQ7IGFkZGVkX2J5X2xldF9zeW50YXggfVxuICAgICAgfCBNYXBuIHsgaW5wdXRzIH0gLT4gTWFwbiB7IGlucHV0cyA9IExpc3QubWFwIGlucHV0cyB+ZjpvZl9jb21wbGV0ZSB9XG4gICAgOztcbiAgZW5kXG5cbiAgbGV0IG1pbmltYWxfc2V4cF9vZl90IHQgPSBNaW5pbWFsLihvZl9jb21wbGV0ZSB0IHw+IHNleHBfb2ZfdClcblxuICBsZXQgaW5wdXRzIHsga2luZDsgbm9kZV9wYXRoID0gXzsgaGVyZSA9IF87IGlkID0gXyB9ID1cbiAgICBtYXRjaCBraW5kIHdpdGhcbiAgICB8IENvbnN0YW50IHwgSW5jciB8IE5hbWVkIHwgRXhjZXB0aW9uIC0+IFtdXG4gICAgfCBDdXRvZmYgeyB0OyBhZGRlZF9ieV9sZXRfc3ludGF4ID0gXyB9IC0+IFsgdCBdXG4gICAgfCBNYXBuIHsgaW5wdXRzIH0gLT4gaW5wdXRzXG4gIDs7XG5cbiAgbGV0IG9mX3ZhbHVlJyA6IGluaXRpYWxfcGF0aDpOb2RlX3BhdGguYnVpbGRlciAtPiAnYSBWYWx1ZS50IC0+IHQgPVxuICAgIGZ1biB+aW5pdGlhbF9wYXRoIHZhbHVlIC0+XG4gICAgbGV0IHJlYyBoZWxwZXIgOiB0eXBlIGEuIGN1cnJlbnRfcGF0aDpOb2RlX3BhdGguYnVpbGRlciAtPiBhIFZhbHVlLnQgLT4gdCA9XG4gICAgICBsZXQgbW9kdWxlIFBhY2tlZF92YWx1ZSA9IHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBUIDogJ2EgVmFsdWUudCAtPiB0XG4gICAgICBlbmRcbiAgICAgIGluXG4gICAgICBsZXQgY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIH5jdXJyZW50X3BhdGggKHZhbHVlcyA6IFBhY2tlZF92YWx1ZS50IGxpc3QpID1cbiAgICAgICAgTWFwblxuICAgICAgICAgIHsgaW5wdXRzID1cbiAgICAgICAgICAgICAgTGlzdC5tYXBpIHZhbHVlcyB+ZjooZnVuIGkgKFQgdmFsdWUpIC0+XG4gICAgICAgICAgICAgICAgaGVscGVyXG4gICAgICAgICAgICAgICAgICB+Y3VycmVudF9wYXRoOlxuICAgICAgICAgICAgICAgICAgICAoTm9kZV9wYXRoLmNob2ljZV9wb2ludCBjdXJyZW50X3BhdGggKGkgKyAxKSB8PiBOb2RlX3BhdGguZGVzY2VuZClcbiAgICAgICAgICAgICAgICAgIHZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgIGluXG4gICAgICBmdW4gfmN1cnJlbnRfcGF0aCB7IHZhbHVlOyBoZXJlOyBpZCA9IG91dGVyX2lkIH0gLT5cbiAgICAgICAgbGV0IGtpbmQgPVxuICAgICAgICAgIG1hdGNoIHZhbHVlIHdpdGhcbiAgICAgICAgICB8IENvbnN0YW50IF8gLT4gQ29uc3RhbnRcbiAgICAgICAgICB8IEV4Y2VwdGlvbiBfIC0+IEV4Y2VwdGlvblxuICAgICAgICAgIHwgSW5jciBfIC0+IEluY3JcbiAgICAgICAgICB8IE5hbWVkIF8gLT4gTmFtZWRcbiAgICAgICAgICB8IEN1dG9mZiB7IHQ7IGVxdWFsID0gXzsgYWRkZWRfYnlfbGV0X3N5bnRheCB9IC0+XG4gICAgICAgICAgICBDdXRvZmZcbiAgICAgICAgICAgICAgeyB0ID1cbiAgICAgICAgICAgICAgICAgIGhlbHBlclxuICAgICAgICAgICAgICAgICAgICB+Y3VycmVudF9wYXRoOlxuICAgICAgICAgICAgICAgICAgICAgIChOb2RlX3BhdGguY2hvaWNlX3BvaW50IGN1cnJlbnRfcGF0aCAxIHw+IE5vZGVfcGF0aC5kZXNjZW5kKVxuICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgIDsgYWRkZWRfYnlfbGV0X3N5bnRheFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfCBNYXAgeyB0OyBmID0gXyB9IC0+IGNyZWF0ZV9tYXBuX3dpdGhfY2hvaWNlcyB+Y3VycmVudF9wYXRoIFsgVCB0IF1cbiAgICAgICAgICB8IEJvdGggKHQxLCB0MikgLT4gY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIH5jdXJyZW50X3BhdGggWyBUIHQxOyBUIHQyIF1cbiAgICAgICAgICB8IE1hcDIgeyB0MTsgdDI7IGYgPSBfIH0gLT5cbiAgICAgICAgICAgIGNyZWF0ZV9tYXBuX3dpdGhfY2hvaWNlcyB+Y3VycmVudF9wYXRoIFsgVCB0MTsgVCB0MiBdXG4gICAgICAgICAgfCBNYXAzIHsgdDE7IHQyOyB0MzsgZiA9IF8gfSAtPlxuICAgICAgICAgICAgY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIH5jdXJyZW50X3BhdGggWyBUIHQxOyBUIHQyOyBUIHQzIF1cbiAgICAgICAgICB8IE1hcDQgeyB0MTsgdDI7IHQzOyB0NDsgZiA9IF8gfSAtPlxuICAgICAgICAgICAgY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIH5jdXJyZW50X3BhdGggWyBUIHQxOyBUIHQyOyBUIHQzOyBUIHQ0IF1cbiAgICAgICAgICB8IE1hcDUgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IGYgPSBfIH0gLT5cbiAgICAgICAgICAgIGNyZWF0ZV9tYXBuX3dpdGhfY2hvaWNlcyB+Y3VycmVudF9wYXRoIFsgVCB0MTsgVCB0MjsgVCB0MzsgVCB0NDsgVCB0NSBdXG4gICAgICAgICAgfCBNYXA2IHsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyB0NjsgZiA9IF8gfSAtPlxuICAgICAgICAgICAgY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzIH5jdXJyZW50X3BhdGggWyBUIHQxOyBUIHQyOyBUIHQzOyBUIHQ0OyBUIHQ1OyBUIHQ2IF1cbiAgICAgICAgICB8IE1hcDcgeyB0MTsgdDI7IHQzOyB0NDsgdDU7IHQ2OyB0NzsgZiA9IF8gfSAtPlxuICAgICAgICAgICAgY3JlYXRlX21hcG5fd2l0aF9jaG9pY2VzXG4gICAgICAgICAgICAgIH5jdXJyZW50X3BhdGhcbiAgICAgICAgICAgICAgWyBUIHQxOyBUIHQyOyBUIHQzOyBUIHQ0OyBUIHQ1OyBUIHQ2OyBUIHQ3IF1cbiAgICAgICAgaW5cbiAgICAgICAgeyBub2RlX3BhdGggPSBmaW5hbGl6ZSBjdXJyZW50X3BhdGg7IGhlcmU7IGtpbmQ7IGlkID0gSWQub2ZfdHlwZV9pZCBvdXRlcl9pZCB9XG4gICAgaW5cbiAgICBoZWxwZXIgfmN1cnJlbnRfcGF0aDppbml0aWFsX3BhdGggdmFsdWVcbiAgOztcblxuICBsZXQgb2ZfdmFsdWUgdmFsdWUgPSBvZl92YWx1ZScgfmluaXRpYWxfcGF0aDooTm9kZV9wYXRoLmRlc2NlbmQgTm9kZV9wYXRoLmVtcHR5KSB2YWx1ZVxuXG4gIGxldCByZWMgdG9fc3RyaW5nX2h1bSB7IG5vZGVfcGF0aCA9IF87IGtpbmQ7IGhlcmUgPSBfOyBpZCB9ID1cbiAgICBtYXRjaCBraW5kIHdpdGhcbiAgICB8IEV4Y2VwdGlvbiAtPiBzcHJpbnRmIFwiZXhjZXB0aW9uXyVzXCIgKElkLnRvX3N0cmluZyBpZClcbiAgICB8IENvbnN0YW50IC0+IHNwcmludGYgXCJjb25zdGFudF8lc1wiIChJZC50b19zdHJpbmcgaWQpXG4gICAgfCBJbmNyIC0+IFwiaW5jclwiXG4gICAgfCBOYW1lZCAtPiBzcHJpbnRmIFwieCVzXCIgKElkLnRvX3N0cmluZyBpZClcbiAgICB8IEN1dG9mZiB7IHQ7IGFkZGVkX2J5X2xldF9zeW50YXggPSBfIH0gLT4gc3ByaW50ZiBcIihjdXRvZmYgJXMpXCIgKHRvX3N0cmluZ19odW0gdClcbiAgICB8IE1hcG4geyBpbnB1dHMgfSAtPlxuICAgICAgc3ByaW50ZiBcIihtYXBuICVzKVwiIChTdHJpbmcuY29uY2F0IH5zZXA6XCIgXCIgKExpc3QubWFwIGlucHV0cyB+Zjp0b19zdHJpbmdfaHVtKSlcbiAgOztcbmVuZFxuXG5tb2R1bGUgQ29tcHV0YXRpb24wID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgeyBub2RlX3BhdGggOiBOb2RlX3BhdGgudCBMYXp5LnRcbiAgICA7IGtpbmQgOiBraW5kXG4gICAgOyBoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24uU3RhYmxlLlYxLnQgb3B0aW9uXG4gICAgfVxuXG4gIGFuZCBraW5kID1cbiAgICB8IFJldHVybiBvZiB7IHZhbHVlIDogVmFsdWUudCB9XG4gICAgfCBMZWFmMDEgb2YgeyBpbnB1dCA6IFZhbHVlLnQgfVxuICAgIHwgTGVhZjEgb2YgeyBpbnB1dCA6IFZhbHVlLnQgfVxuICAgIHwgTGVhZjBcbiAgICB8IExlYWZfaW5jciBvZiB7IGlucHV0IDogVmFsdWUudCB9XG4gICAgfCBNb2RlbF9jdXRvZmYgb2YgeyB0IDogdCB9XG4gICAgfCBTdWIgb2ZcbiAgICAgICAgeyBmcm9tIDogdFxuICAgICAgICA7IHZpYSA6IElkLnRcbiAgICAgICAgOyBpbnRvIDogdFxuICAgICAgICB9XG4gICAgfCBTdG9yZSBvZlxuICAgICAgICB7IGlkIDogSWQudFxuICAgICAgICA7IHZhbHVlIDogVmFsdWUudFxuICAgICAgICA7IGlubmVyIDogdFxuICAgICAgICB9XG4gICAgfCBGZXRjaCBvZiB7IGlkIDogSWQudCB9XG4gICAgfCBBc3NvYyBvZlxuICAgICAgICB7IG1hcCA6IFZhbHVlLnRcbiAgICAgICAgOyBrZXlfaWQgOiBJZC50XG4gICAgICAgIDsgY21wX2lkIDogSWQudFxuICAgICAgICA7IGRhdGFfaWQgOiBJZC50XG4gICAgICAgIDsgYnkgOiB0XG4gICAgICAgIH1cbiAgICB8IEFzc29jX29uIG9mXG4gICAgICAgIHsgbWFwIDogVmFsdWUudFxuICAgICAgICA7IGlvX2tleV9pZCA6IElkLnRcbiAgICAgICAgOyBtb2RlbF9rZXlfaWQgOiBJZC50XG4gICAgICAgIDsgbW9kZWxfY21wX2lkIDogSWQudFxuICAgICAgICA7IGRhdGFfaWQgOiBJZC50XG4gICAgICAgIDsgYnkgOiB0XG4gICAgICAgIH1cbiAgICB8IEFzc29jX3NpbXBsIG9mIHsgbWFwIDogVmFsdWUudCB9XG4gICAgfCBTd2l0Y2ggb2ZcbiAgICAgICAgeyBtYXRjaF8gOiBWYWx1ZS50XG4gICAgICAgIDsgYXJtcyA6IHQgbGlzdFxuICAgICAgICB9XG4gICAgfCBMYXp5IG9mIHsgdCA6IHQgb3B0aW9uIH1cbiAgICB8IFdyYXAgb2ZcbiAgICAgICAgeyBtb2RlbF9pZCA6IElkLnRcbiAgICAgICAgOyBpbmplY3RfaWQgOiBJZC50XG4gICAgICAgIDsgaW5uZXIgOiB0XG4gICAgICAgIH1cbiAgICB8IFdpdGhfbW9kZWxfcmVzZXR0ZXIgb2ZcbiAgICAgICAgeyByZXNldF9pZCA6IElkLnRcbiAgICAgICAgOyBpbm5lciA6IHRcbiAgICAgICAgfVxuICAgIHwgUGF0aFxuICAgIHwgTGlmZWN5Y2xlIG9mIHsgdmFsdWUgOiBWYWx1ZS50IH1cbiAgICB8IElkZW50aXR5IG9mIHsgdCA6IHQgfVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIGxldCBvZl9jb21wdXRhdGlvbiA6ICdyZXN1bHQgQ29tcHV0YXRpb24udCAtPiB0ID1cbiAgICBmdW4gY29tcHV0YXRpb24gLT5cbiAgICBsZXQgcmVjIGhlbHBlclxuICAgICAgOiB0eXBlIHJlc3VsdC4gY3VycmVudF9wYXRoOk5vZGVfcGF0aC5idWlsZGVyIC0+IHJlc3VsdCBDb21wdXRhdGlvbi50IC0+IHRcbiAgICAgID1cbiAgICAgIGZ1biB+Y3VycmVudF9wYXRoIGNvbXB1dGF0aW9uIC0+XG4gICAgICBsZXQgY2hvaWNlX3BvaW50IGNob2ljZSA9XG4gICAgICAgIE5vZGVfcGF0aC5jaG9pY2VfcG9pbnQgY3VycmVudF9wYXRoIGNob2ljZSB8PiBOb2RlX3BhdGguZGVzY2VuZFxuICAgICAgaW5cbiAgICAgIGxldCBub2RlX3BhdGggPSBmaW5hbGl6ZSBjdXJyZW50X3BhdGggaW5cbiAgICAgIG1hdGNoIGNvbXB1dGF0aW9uIHdpdGhcbiAgICAgIHwgUmV0dXJuIHZhbHVlIC0+XG4gICAgICAgIHsgbm9kZV9wYXRoXG4gICAgICAgIDsgaGVyZSA9IE5vbmVcbiAgICAgICAgOyBraW5kID1cbiAgICAgICAgICAgIFJldHVyblxuICAgICAgICAgICAgICB7IHZhbHVlID1cbiAgICAgICAgICAgICAgICAgIFZhbHVlLm9mX3ZhbHVlJyB+aW5pdGlhbF9wYXRoOihOb2RlX3BhdGguZGVzY2VuZCBjdXJyZW50X3BhdGgpIHZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfCBMZWFmMSB7IGlucHV0OyBfIH0gLT5cbiAgICAgICAgeyBub2RlX3BhdGhcbiAgICAgICAgOyBoZXJlID0gTm9uZVxuICAgICAgICA7IGtpbmQgPVxuICAgICAgICAgICAgTGVhZjFcbiAgICAgICAgICAgICAgeyBpbnB1dCA9XG4gICAgICAgICAgICAgICAgICBWYWx1ZS5vZl92YWx1ZScgfmluaXRpYWxfcGF0aDooTm9kZV9wYXRoLmRlc2NlbmQgY3VycmVudF9wYXRoKSBpbnB1dFxuICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIHwgTGVhZjAgXyAtPiB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgPSBMZWFmMCB9XG4gICAgICB8IExlYWZfaW5jciB7IGlucHV0OyBfIH0gLT5cbiAgICAgICAgeyBub2RlX3BhdGhcbiAgICAgICAgOyBoZXJlID0gTm9uZVxuICAgICAgICA7IGtpbmQgPVxuICAgICAgICAgICAgTGVhZl9pbmNyXG4gICAgICAgICAgICAgIHsgaW5wdXQgPVxuICAgICAgICAgICAgICAgICAgVmFsdWUub2ZfdmFsdWUnIH5pbml0aWFsX3BhdGg6KE5vZGVfcGF0aC5kZXNjZW5kIGN1cnJlbnRfcGF0aCkgaW5wdXRcbiAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB8IFN1YiB7IGZyb207IHZpYTsgaW50bzsgaGVyZSB9IC0+XG4gICAgICAgIGxldCBraW5kID1cbiAgICAgICAgICBTdWJcbiAgICAgICAgICAgIHsgZnJvbSA9IGhlbHBlciB+Y3VycmVudF9wYXRoOihjaG9pY2VfcG9pbnQgMSkgZnJvbVxuICAgICAgICAgICAgOyB2aWEgPSBJZC5vZl90eXBlX2lkIHZpYVxuICAgICAgICAgICAgOyBpbnRvID0gaGVscGVyIH5jdXJyZW50X3BhdGg6KGNob2ljZV9wb2ludCAyKSBpbnRvXG4gICAgICAgICAgICB9XG4gICAgICAgIGluXG4gICAgICAgIHsgbm9kZV9wYXRoOyBoZXJlOyBraW5kIH1cbiAgICAgIHwgU3RvcmUgeyBpZDsgdmFsdWU7IGlubmVyIH0gLT5cbiAgICAgICAgbGV0IGtpbmQgPVxuICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgICB7IGlkID0gSWQub2ZfdHlwZV9pZCBpZFxuICAgICAgICAgICAgOyB2YWx1ZSA9IFZhbHVlLm9mX3ZhbHVlJyB+aW5pdGlhbF9wYXRoOihjaG9pY2VfcG9pbnQgMSkgdmFsdWVcbiAgICAgICAgICAgIDsgaW5uZXIgPSBoZWxwZXIgfmN1cnJlbnRfcGF0aDooY2hvaWNlX3BvaW50IDIpIGlubmVyXG4gICAgICAgICAgICB9XG4gICAgICAgIGluXG4gICAgICAgIHsgbm9kZV9wYXRoOyBoZXJlID0gTm9uZTsga2luZCB9XG4gICAgICB8IEZldGNoIHsgaWQ7IF8gfSAtPlxuICAgICAgICBsZXQga2luZCA9IEZldGNoIHsgaWQgPSBJZC5vZl90eXBlX2lkIGlkIH0gaW5cbiAgICAgICAgeyBub2RlX3BhdGg7IGhlcmUgPSBOb25lOyBraW5kIH1cbiAgICAgIHwgQXNzb2MgeyBtYXA7IGtleV9pZDsgY21wX2lkOyBkYXRhX2lkOyBieTsgXyB9IC0+XG4gICAgICAgIGxldCBraW5kID1cbiAgICAgICAgICBBc3NvY1xuICAgICAgICAgICAgeyBtYXAgPSBWYWx1ZS5vZl92YWx1ZScgfmluaXRpYWxfcGF0aDooY2hvaWNlX3BvaW50IDEpIG1hcFxuICAgICAgICAgICAgOyBrZXlfaWQgPSBJZC5vZl90eXBlX2lkIGtleV9pZFxuICAgICAgICAgICAgOyBjbXBfaWQgPSBJZC5vZl90eXBlX2lkIGNtcF9pZFxuICAgICAgICAgICAgOyBkYXRhX2lkID0gSWQub2ZfdHlwZV9pZCBkYXRhX2lkXG4gICAgICAgICAgICA7IGJ5ID0gaGVscGVyIH5jdXJyZW50X3BhdGg6KGNob2ljZV9wb2ludCAyKSBieVxuICAgICAgICAgICAgfVxuICAgICAgICBpblxuICAgICAgICB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgfVxuICAgICAgfCBBc3NvY19zaW1wbCB7IG1hcDsgXyB9IC0+XG4gICAgICAgIGxldCBraW5kID1cbiAgICAgICAgICBBc3NvY19zaW1wbFxuICAgICAgICAgICAgeyBtYXAgPSBWYWx1ZS5vZl92YWx1ZScgfmluaXRpYWxfcGF0aDooTm9kZV9wYXRoLmRlc2NlbmQgY3VycmVudF9wYXRoKSBtYXAgfVxuICAgICAgICBpblxuICAgICAgICB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgfVxuICAgICAgfCBBc3NvY19vbiB7IG1hcDsgaW9fa2V5X2lkOyBtb2RlbF9rZXlfaWQ7IG1vZGVsX2NtcF9pZDsgZGF0YV9pZDsgYnk7IF8gfSAtPlxuICAgICAgICBsZXQga2luZCA9XG4gICAgICAgICAgQXNzb2Nfb25cbiAgICAgICAgICAgIHsgbWFwID0gVmFsdWUub2ZfdmFsdWUnIH5pbml0aWFsX3BhdGg6KGNob2ljZV9wb2ludCAxKSBtYXBcbiAgICAgICAgICAgIDsgaW9fa2V5X2lkID0gSWQub2ZfdHlwZV9pZCBpb19rZXlfaWRcbiAgICAgICAgICAgIDsgbW9kZWxfa2V5X2lkID0gSWQub2ZfdHlwZV9pZCBtb2RlbF9rZXlfaWRcbiAgICAgICAgICAgIDsgbW9kZWxfY21wX2lkID0gSWQub2ZfdHlwZV9pZCBtb2RlbF9jbXBfaWRcbiAgICAgICAgICAgIDsgZGF0YV9pZCA9IElkLm9mX3R5cGVfaWQgZGF0YV9pZFxuICAgICAgICAgICAgOyBieSA9IGhlbHBlciB+Y3VycmVudF9wYXRoOihjaG9pY2VfcG9pbnQgMikgYnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgaW5cbiAgICAgICAgeyBub2RlX3BhdGg7IGhlcmUgPSBOb25lOyBraW5kIH1cbiAgICAgIHwgU3dpdGNoIHsgbWF0Y2hfOyBhcm1zOyBfIH0gLT5cbiAgICAgICAgKCogVGhpcyBmb3JtIG9mIG5vZGVfcGF0aCBnZW5lcmF0aW9uIGlzIG5lY2Vzc2FyeSB0byBhY2hpdmUgdGhlIHNhbWUgdHJhdmVyc2FsIGFzIHRoZSBvbmVcbiAgICAgICAgICAgaW4gW3RyYW5zZm9ybS5tbGldIHNvIHRoYXQgYm90aCBub2RlIHBhdGhzIGFyZSBpbiBzeW5jLiAqKVxuICAgICAgICBsZXQgaW5kZXggPSByZWYgMSBpblxuICAgICAgICBsZXQga2luZCA9XG4gICAgICAgICAgU3dpdGNoXG4gICAgICAgICAgICB7IG1hdGNoXyA9IFZhbHVlLm9mX3ZhbHVlJyB+aW5pdGlhbF9wYXRoOihjaG9pY2VfcG9pbnQgMSkgbWF0Y2hfXG4gICAgICAgICAgICA7IGFybXMgPVxuICAgICAgICAgICAgICAgIE1hcC5mb2xkIGFybXMgfmluaXQ6W10gfmY6KGZ1biB+a2V5Ol8gfmRhdGE6Y29tcHV0YXRpb24gYWNjIC0+XG4gICAgICAgICAgICAgICAgICBpbmNyIGluZGV4O1xuICAgICAgICAgICAgICAgICAgaGVscGVyIH5jdXJyZW50X3BhdGg6KGNob2ljZV9wb2ludCAhaW5kZXgpIGNvbXB1dGF0aW9uIDo6IGFjYylcbiAgICAgICAgICAgICAgICB8PiBMaXN0LnJldlxuICAgICAgICAgICAgfVxuICAgICAgICBpblxuICAgICAgICB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgfVxuICAgICAgfCBMYXp5IHQgLT5cbiAgICAgICAgbGV0IHBvdGVudGlhbGx5X2V2YWx1YXRlZCA9XG4gICAgICAgICAgKCogSWYgbGF6eSBoYXMgYWxyZWFkeSBiZWVuIGZvcmNlZCwgdGhlbiB0aGUgZm9yY2VkIHZhbHVlIGlzIHN0b3JlZC4gKilcbiAgICAgICAgICBtYXRjaCBMYXp5LmlzX3ZhbCB0IHdpdGhcbiAgICAgICAgICB8IGZhbHNlIC0+IE5vbmVcbiAgICAgICAgICB8IHRydWUgLT5cbiAgICAgICAgICAgIExhenkuZm9yY2UgdCB8PiBoZWxwZXIgfmN1cnJlbnRfcGF0aDooTm9kZV9wYXRoLmRlc2NlbmQgY3VycmVudF9wYXRoKSB8PiBTb21lXG4gICAgICAgIGluXG4gICAgICAgIHsgbm9kZV9wYXRoOyBoZXJlID0gTm9uZTsga2luZCA9IExhenkgeyB0ID0gcG90ZW50aWFsbHlfZXZhbHVhdGVkIH0gfVxuICAgICAgfCBXaXRoX21vZGVsX3Jlc2V0dGVyIHsgcmVzZXRfaWQ7IGlubmVyIH0gLT5cbiAgICAgICAgbGV0IGtpbmQgPVxuICAgICAgICAgIFdpdGhfbW9kZWxfcmVzZXR0ZXJcbiAgICAgICAgICAgIHsgcmVzZXRfaWQgPSBJZC5vZl90eXBlX2lkIHJlc2V0X2lkXG4gICAgICAgICAgICA7IGlubmVyID0gaGVscGVyIH5jdXJyZW50X3BhdGg6KE5vZGVfcGF0aC5kZXNjZW5kIGN1cnJlbnRfcGF0aCkgaW5uZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgaW5cbiAgICAgICAgeyBub2RlX3BhdGg7IGhlcmUgPSBOb25lOyBraW5kIH1cbiAgICAgIHwgV3JhcCB7IGlubmVyOyB3cmFwcGVyX21vZGVsOyBpbmplY3RfaWQ7IF8gfSAtPlxuICAgICAgICBsZXQga2luZCA9XG4gICAgICAgICAgV3JhcFxuICAgICAgICAgICAgeyBtb2RlbF9pZCA9IElkLm9mX21vZGVsX3R5cGVfaWQgd3JhcHBlcl9tb2RlbC50eXBlX2lkXG4gICAgICAgICAgICA7IGluamVjdF9pZCA9IElkLm9mX3R5cGVfaWQgaW5qZWN0X2lkXG4gICAgICAgICAgICA7IGlubmVyID0gaGVscGVyIH5jdXJyZW50X3BhdGg6KE5vZGVfcGF0aC5kZXNjZW5kIGN1cnJlbnRfcGF0aCkgaW5uZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgaW5cbiAgICAgICAgeyBub2RlX3BhdGg7IGhlcmUgPSBOb25lOyBraW5kIH1cbiAgICAgIHwgUGF0aCAtPiB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgPSBQYXRoIH1cbiAgICAgIHwgTGlmZWN5Y2xlIHZhbHVlIC0+XG4gICAgICAgIGxldCBraW5kID1cbiAgICAgICAgICBMaWZlY3ljbGVcbiAgICAgICAgICAgIHsgdmFsdWUgPSBWYWx1ZS5vZl92YWx1ZScgfmluaXRpYWxfcGF0aDooTm9kZV9wYXRoLmRlc2NlbmQgY3VycmVudF9wYXRoKSB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBpblxuICAgICAgICB7IG5vZGVfcGF0aDsgaGVyZSA9IE5vbmU7IGtpbmQgfVxuICAgIGluXG4gICAgaGVscGVyIH5jdXJyZW50X3BhdGg6KE5vZGVfcGF0aC5kZXNjZW5kIE5vZGVfcGF0aC5lbXB0eSkgY29tcHV0YXRpb25cbiAgOztcblxuICBtb2R1bGUgTWluaW1hbCA9IHN0cnVjdFxuICAgIHR5cGUgY29tcGxldGUgPSB0XG5cbiAgICB0eXBlIHQgPVxuICAgICAgfCBSZXR1cm4gb2YgeyB2YWx1ZSA6IFZhbHVlLk1pbmltYWwudCB9XG4gICAgICB8IExlYWYwMSBvZiB7IGlucHV0IDogVmFsdWUuTWluaW1hbC50IH1cbiAgICAgIHwgTGVhZjEgb2YgeyBpbnB1dCA6IFZhbHVlLk1pbmltYWwudCB9XG4gICAgICB8IExlYWYwXG4gICAgICB8IExlYWZfaW5jciBvZiB7IGlucHV0IDogVmFsdWUuTWluaW1hbC50IH1cbiAgICAgIHwgTW9kZWxfY3V0b2ZmIG9mIHsgdCA6IHQgfVxuICAgICAgfCBTdWIgb2ZcbiAgICAgICAgICB7IGZyb20gOiB0XG4gICAgICAgICAgOyB2aWEgOiBJZC50XG4gICAgICAgICAgOyBpbnRvIDogdFxuICAgICAgICAgIH1cbiAgICAgIHwgU3RvcmUgb2ZcbiAgICAgICAgICB7IGlkIDogSWQudFxuICAgICAgICAgIDsgdmFsdWUgOiBWYWx1ZS5NaW5pbWFsLnRcbiAgICAgICAgICA7IGlubmVyIDogdFxuICAgICAgICAgIH1cbiAgICAgIHwgRmV0Y2ggb2YgeyBpZCA6IElkLnQgfVxuICAgICAgfCBBc3NvYyBvZlxuICAgICAgICAgIHsgbWFwIDogVmFsdWUuTWluaW1hbC50XG4gICAgICAgICAgOyBrZXlfaWQgOiBJZC50XG4gICAgICAgICAgOyBjbXBfaWQgOiBJZC50XG4gICAgICAgICAgOyBkYXRhX2lkIDogSWQudFxuICAgICAgICAgIDsgYnkgOiB0XG4gICAgICAgICAgfVxuICAgICAgfCBBc3NvY19vbiBvZlxuICAgICAgICAgIHsgbWFwIDogVmFsdWUuTWluaW1hbC50XG4gICAgICAgICAgOyBpb19rZXlfaWQgOiBJZC50XG4gICAgICAgICAgOyBtb2RlbF9rZXlfaWQgOiBJZC50XG4gICAgICAgICAgOyBtb2RlbF9jbXBfaWQgOiBJZC50XG4gICAgICAgICAgOyBkYXRhX2lkIDogSWQudFxuICAgICAgICAgIDsgYnkgOiB0XG4gICAgICAgICAgfVxuICAgICAgfCBBc3NvY19zaW1wbCBvZiB7IG1hcCA6IFZhbHVlLk1pbmltYWwudCB9XG4gICAgICB8IFN3aXRjaCBvZlxuICAgICAgICAgIHsgbWF0Y2hfIDogVmFsdWUuTWluaW1hbC50XG4gICAgICAgICAgOyBhcm1zIDogdCBsaXN0XG4gICAgICAgICAgfVxuICAgICAgfCBMYXp5IG9mIHsgdCA6IHQgb3B0aW9uIH1cbiAgICAgIHwgV3JhcCBvZlxuICAgICAgICAgIHsgbW9kZWxfaWQgOiBJZC50XG4gICAgICAgICAgOyBpbmplY3RfaWQgOiBJZC50XG4gICAgICAgICAgOyBpbm5lciA6IHRcbiAgICAgICAgICB9XG4gICAgICB8IFdpdGhfbW9kZWxfcmVzZXR0ZXIgb2ZcbiAgICAgICAgICB7IGlubmVyIDogdFxuICAgICAgICAgIDsgcmVzZXRfaWQgOiBJZC50XG4gICAgICAgICAgfVxuICAgICAgfCBQYXRoXG4gICAgICB8IExpZmVjeWNsZSBvZiB7IHZhbHVlIDogVmFsdWUuTWluaW1hbC50IH1cbiAgICAgIHwgSWRlbnRpdHkgb2YgeyB0IDogdCB9XG4gICAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICAgIGxldCByZWMgb2ZfY29tcGxldGUgKGNvbXBsZXRlIDogY29tcGxldGUpID1cbiAgICAgIG1hdGNoIGNvbXBsZXRlLmtpbmQgd2l0aFxuICAgICAgfCBSZXR1cm4geyB2YWx1ZSB9IC0+IFJldHVybiB7IHZhbHVlID0gVmFsdWUuTWluaW1hbC5vZl9jb21wbGV0ZSB2YWx1ZSB9XG4gICAgICB8IExlYWYwMSB7IGlucHV0IH0gLT4gTGVhZjAxIHsgaW5wdXQgPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIGlucHV0IH1cbiAgICAgIHwgTGVhZjEgeyBpbnB1dCB9IC0+IExlYWYxIHsgaW5wdXQgPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIGlucHV0IH1cbiAgICAgIHwgTGVhZjAgLT4gTGVhZjBcbiAgICAgIHwgTGVhZl9pbmNyIHsgaW5wdXQgfSAtPiBMZWFmX2luY3IgeyBpbnB1dCA9IFZhbHVlLk1pbmltYWwub2ZfY29tcGxldGUgaW5wdXQgfVxuICAgICAgfCBNb2RlbF9jdXRvZmYgeyB0IH0gLT4gTW9kZWxfY3V0b2ZmIHsgdCA9IG9mX2NvbXBsZXRlIHQgfVxuICAgICAgfCBTdWIgeyBmcm9tOyB2aWE7IGludG8gfSAtPlxuICAgICAgICBTdWIgeyBmcm9tID0gb2ZfY29tcGxldGUgZnJvbTsgdmlhOyBpbnRvID0gb2ZfY29tcGxldGUgaW50byB9XG4gICAgICB8IFN0b3JlIHsgaWQ7IHZhbHVlOyBpbm5lciB9IC0+XG4gICAgICAgIFN0b3JlIHsgaWQ7IHZhbHVlID0gVmFsdWUuTWluaW1hbC5vZl9jb21wbGV0ZSB2YWx1ZTsgaW5uZXIgPSBvZl9jb21wbGV0ZSBpbm5lciB9XG4gICAgICB8IEZldGNoIHsgaWQgfSAtPiBGZXRjaCB7IGlkIH1cbiAgICAgIHwgQXNzb2MgeyBtYXA7IGtleV9pZDsgY21wX2lkOyBkYXRhX2lkOyBieSB9IC0+XG4gICAgICAgIEFzc29jXG4gICAgICAgICAgeyBtYXAgPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIG1hcFxuICAgICAgICAgIDsga2V5X2lkXG4gICAgICAgICAgOyBjbXBfaWRcbiAgICAgICAgICA7IGRhdGFfaWRcbiAgICAgICAgICA7IGJ5ID0gb2ZfY29tcGxldGUgYnlcbiAgICAgICAgICB9XG4gICAgICB8IEFzc29jX3NpbXBsIHsgbWFwIH0gLT4gQXNzb2Nfc2ltcGwgeyBtYXAgPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIG1hcCB9XG4gICAgICB8IEFzc29jX29uIHsgbWFwOyBpb19rZXlfaWQ7IG1vZGVsX2tleV9pZDsgbW9kZWxfY21wX2lkOyBkYXRhX2lkOyBieSB9IC0+XG4gICAgICAgIEFzc29jX29uXG4gICAgICAgICAgeyBtYXAgPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIG1hcFxuICAgICAgICAgIDsgaW9fa2V5X2lkXG4gICAgICAgICAgOyBtb2RlbF9rZXlfaWRcbiAgICAgICAgICA7IG1vZGVsX2NtcF9pZFxuICAgICAgICAgIDsgZGF0YV9pZFxuICAgICAgICAgIDsgYnkgPSBvZl9jb21wbGV0ZSBieVxuICAgICAgICAgIH1cbiAgICAgIHwgU3dpdGNoIHsgbWF0Y2hfOyBhcm1zIH0gLT5cbiAgICAgICAgU3dpdGNoXG4gICAgICAgICAgeyBtYXRjaF8gPSBWYWx1ZS5NaW5pbWFsLm9mX2NvbXBsZXRlIG1hdGNoX1xuICAgICAgICAgIDsgYXJtcyA9IExpc3QubWFwIGFybXMgfmY6b2ZfY29tcGxldGVcbiAgICAgICAgICB9XG4gICAgICB8IExhenkgeyB0ID0gTm9uZSB9IC0+IExhenkgeyB0ID0gTm9uZSB9XG4gICAgICB8IExhenkgeyB0ID0gU29tZSB0IH0gLT4gTGF6eSB7IHQgPSBTb21lIChvZl9jb21wbGV0ZSB0KSB9XG4gICAgICB8IFdyYXAgeyBtb2RlbF9pZDsgaW5qZWN0X2lkOyBpbm5lciB9IC0+XG4gICAgICAgIFdyYXAgeyBtb2RlbF9pZDsgaW5qZWN0X2lkOyBpbm5lciA9IG9mX2NvbXBsZXRlIGlubmVyIH1cbiAgICAgIHwgV2l0aF9tb2RlbF9yZXNldHRlciB7IGlubmVyOyByZXNldF9pZCB9IC0+XG4gICAgICAgIFdpdGhfbW9kZWxfcmVzZXR0ZXIgeyBpbm5lciA9IG9mX2NvbXBsZXRlIGlubmVyOyByZXNldF9pZCB9XG4gICAgICB8IFBhdGggLT4gUGF0aFxuICAgICAgfCBMaWZlY3ljbGUgeyB2YWx1ZSB9IC0+IExpZmVjeWNsZSB7IHZhbHVlID0gVmFsdWUuTWluaW1hbC5vZl9jb21wbGV0ZSB2YWx1ZSB9XG4gICAgICB8IElkZW50aXR5IHsgdCB9IC0+IElkZW50aXR5IHsgdCA9IG9mX2NvbXBsZXRlIHQgfVxuICAgIDs7XG4gIGVuZFxuXG4gIGxldCBtaW5pbWFsX3NleHBfb2ZfdCB0ID0gTWluaW1hbC4ob2ZfY29tcGxldGUgdCB8PiBzZXhwX29mX3QpXG5cbiAgbGV0IGlucHV0cyAodCA6IHQpID1cbiAgICBtYXRjaCB0LmtpbmQgd2l0aFxuICAgIHwgUmV0dXJuIHsgdmFsdWUgfSAtPiBbIHZhbHVlIF1cbiAgICB8IExlYWYwMSB7IGlucHV0IH0gLT4gWyBpbnB1dCBdXG4gICAgfCBMZWFmMSB7IGlucHV0IH0gLT4gWyBpbnB1dCBdXG4gICAgfCBMZWFmMCAtPiBbXVxuICAgIHwgTGVhZl9pbmNyIHsgaW5wdXQgfSAtPiBbIGlucHV0IF1cbiAgICB8IE1vZGVsX2N1dG9mZiBfIC0+IFtdXG4gICAgfCBTdWIgeyBmcm9tID0gXzsgdmlhID0gXzsgaW50byA9IF8gfSAtPiBbXVxuICAgIHwgU3RvcmUgeyB2YWx1ZTsgaWQgPSBfOyBpbm5lciA9IF8gfSAtPiBbIHZhbHVlIF1cbiAgICB8IEZldGNoIHsgaWQgPSBfIH0gLT4gW11cbiAgICB8IEFzc29jIHsgbWFwOyBrZXlfaWQgPSBfOyBjbXBfaWQgPSBfOyBkYXRhX2lkID0gXzsgYnkgPSBfIH0gLT4gWyBtYXAgXVxuICAgIHwgQXNzb2Nfc2ltcGwgeyBtYXAgfSAtPiBbIG1hcCBdXG4gICAgfCBBc3NvY19vblxuICAgICAgICB7IG1hcDsgaW9fa2V5X2lkID0gXzsgbW9kZWxfa2V5X2lkID0gXzsgbW9kZWxfY21wX2lkID0gXzsgZGF0YV9pZCA9IF87IGJ5ID0gXyB9IC0+XG4gICAgICBbIG1hcCBdXG4gICAgfCBTd2l0Y2ggeyBtYXRjaF87IGFybXMgPSBfIH0gLT4gWyBtYXRjaF8gXVxuICAgIHwgTGF6eSBfIC0+IFtdXG4gICAgfCBXcmFwIHsgbW9kZWxfaWQgPSBfOyBpbmplY3RfaWQgPSBfOyBpbm5lciA9IF8gfSAtPiBbXVxuICAgIHwgV2l0aF9tb2RlbF9yZXNldHRlciBfIC0+IFtdXG4gICAgfCBQYXRoIC0+IFtdXG4gICAgfCBMaWZlY3ljbGUgeyB2YWx1ZSB9IC0+IFsgdmFsdWUgXVxuICAgIHwgSWRlbnRpdHkgXyAtPiBbXVxuICA7O1xuXG4gIGxldCBjaGlsZHJlbiAodCA6IHQpID1cbiAgICBtYXRjaCB0LmtpbmQgd2l0aFxuICAgIHwgUmV0dXJuIF8gLT4gW11cbiAgICB8IExlYWYwMSB7IGlucHV0ID0gXyB9IC0+IFtdXG4gICAgfCBMZWFmMSB7IGlucHV0ID0gXyB9IC0+IFtdXG4gICAgfCBMZWFmMCAtPiBbXVxuICAgIHwgTGVhZl9pbmNyIHsgaW5wdXQgPSBfIH0gLT4gW11cbiAgICB8IE1vZGVsX2N1dG9mZiB7IHQgfSAtPiBbIHQgXVxuICAgIHwgU3ViIHsgZnJvbTsgdmlhID0gXzsgaW50byB9IC0+IFsgZnJvbTsgaW50byBdXG4gICAgfCBTdG9yZSB7IGlkID0gXzsgdmFsdWUgPSBfOyBpbm5lciA6IHQgfSAtPiBbIGlubmVyIF1cbiAgICB8IEZldGNoIHsgaWQgPSBfIH0gLT4gW11cbiAgICB8IEFzc29jIHsgbWFwID0gXzsga2V5X2lkID0gXzsgY21wX2lkID0gXzsgZGF0YV9pZCA9IF87IGJ5IH0gLT4gWyBieSBdXG4gICAgfCBBc3NvY19zaW1wbCB7IG1hcCA9IF8gfSAtPiBbXVxuICAgIHwgQXNzb2Nfb25cbiAgICAgICAgeyBtYXAgPSBfOyBpb19rZXlfaWQgPSBfOyBtb2RlbF9rZXlfaWQgPSBfOyBtb2RlbF9jbXBfaWQgPSBfOyBkYXRhX2lkID0gXzsgYnkgfSAtPlxuICAgICAgWyBieSBdXG4gICAgfCBTd2l0Y2ggeyBtYXRjaF8gPSBfOyBhcm1zID0gXyB9IC0+IFtdXG4gICAgfCBMYXp5IHsgdCA9IE5vbmUgfSAtPiBbXVxuICAgIHwgTGF6eSB7IHQgPSBTb21lIHQgfSAtPiBbIHQgXVxuICAgIHwgV3JhcCB7IG1vZGVsX2lkID0gXzsgaW5qZWN0X2lkID0gXzsgaW5uZXIgfSAtPiBbIGlubmVyIF1cbiAgICB8IFdpdGhfbW9kZWxfcmVzZXR0ZXIgeyBpbm5lcjsgcmVzZXRfaWQgPSBfIH0gLT4gWyBpbm5lciBdXG4gICAgfCBQYXRoIC0+IFtdXG4gICAgfCBMaWZlY3ljbGUgXyAtPiBbXVxuICAgIHwgSWRlbnRpdHkgeyB0IH0gLT4gWyB0IF1cbiAgOztcbmVuZFxuXG5pbmNsdWRlIHN0cnVjdFxuICBbQEBAd2FybmluZ1xuICAgIFwiLTMwXCJcbiAgICAoKiBkaXNhYmxpbmcgW2R1cGxpY2F0ZS1kZWZpbml0aW9uc10gd2FybmluZyB3aGljaCBpcyBwcm9tcHRlZCBoZXJlIGR1ZSB0b1xuICAgICAgIHR5cGUgc2hhcmluZyBuYW1lcyBmb3IgdGhlaXIgZmllbGRzIHdoaWNoIGlzIGEgcmVxdWlzaXRlIGZvciB0eXBlIGVxdWFsaXR5XG4gICAgICAgd2l0aCB0aGUgb3JpZ2luYWwgdHlwZSBkZWZpbmVkIHdpdGhpbiBtb2R1bGVzLiAqKV1cblxuICB0eXBlIG5vZGVfcGF0aCA9IE5vZGVfcGF0aC50XG4gIHR5cGUgc291cmNlX2NvZGVfcG9zaXRpb24gPSBTb3VyY2VfY29kZV9wb3NpdGlvbi5TdGFibGUuVjEudFxuICB0eXBlIGlkID0gSWQudFxuICB0eXBlICdhIGxhenlfID0gJ2EgTGF6eS50XG5cbiAgdHlwZSBjb21wdXRhdGlvbiA9IENvbXB1dGF0aW9uMC50ID1cbiAgICB7IG5vZGVfcGF0aCA6IG5vZGVfcGF0aCBsYXp5X1xuICAgIDsga2luZCA6IGNvbXB1dGF0aW9uX2tpbmRcbiAgICA7IGhlcmUgOiBzb3VyY2VfY29kZV9wb3NpdGlvbiBvcHRpb25cbiAgICB9XG5cbiAgYW5kIGNvbXB1dGF0aW9uX2tpbmQgPSBDb21wdXRhdGlvbjAua2luZCA9XG4gICAgfCBSZXR1cm4gb2YgeyB2YWx1ZSA6IHZhbHVlIH1cbiAgICB8IExlYWYwMSBvZiB7IGlucHV0IDogdmFsdWUgfVxuICAgIHwgTGVhZjEgb2YgeyBpbnB1dCA6IHZhbHVlIH1cbiAgICB8IExlYWYwXG4gICAgfCBMZWFmX2luY3Igb2YgeyBpbnB1dCA6IHZhbHVlIH1cbiAgICB8IE1vZGVsX2N1dG9mZiBvZiB7IHQgOiBjb21wdXRhdGlvbiB9XG4gICAgfCBTdWIgb2ZcbiAgICAgICAgeyBmcm9tIDogY29tcHV0YXRpb25cbiAgICAgICAgOyB2aWEgOiBpZFxuICAgICAgICA7IGludG8gOiBjb21wdXRhdGlvblxuICAgICAgICB9XG4gICAgfCBTdG9yZSBvZlxuICAgICAgICB7IGlkIDogaWRcbiAgICAgICAgOyB2YWx1ZSA6IHZhbHVlXG4gICAgICAgIDsgaW5uZXIgOiBjb21wdXRhdGlvblxuICAgICAgICB9XG4gICAgfCBGZXRjaCBvZiB7IGlkIDogaWQgfVxuICAgIHwgQXNzb2Mgb2ZcbiAgICAgICAgeyBtYXAgOiB2YWx1ZVxuICAgICAgICA7IGtleV9pZCA6IGlkXG4gICAgICAgIDsgY21wX2lkIDogaWRcbiAgICAgICAgOyBkYXRhX2lkIDogaWRcbiAgICAgICAgOyBieSA6IGNvbXB1dGF0aW9uXG4gICAgICAgIH1cbiAgICB8IEFzc29jX29uIG9mXG4gICAgICAgIHsgbWFwIDogdmFsdWVcbiAgICAgICAgOyBpb19rZXlfaWQgOiBpZFxuICAgICAgICA7IG1vZGVsX2tleV9pZCA6IGlkXG4gICAgICAgIDsgbW9kZWxfY21wX2lkIDogaWRcbiAgICAgICAgOyBkYXRhX2lkIDogaWRcbiAgICAgICAgOyBieSA6IGNvbXB1dGF0aW9uXG4gICAgICAgIH1cbiAgICB8IEFzc29jX3NpbXBsIG9mIHsgbWFwIDogdmFsdWUgfVxuICAgIHwgU3dpdGNoIG9mXG4gICAgICAgIHsgbWF0Y2hfIDogdmFsdWVcbiAgICAgICAgOyBhcm1zIDogY29tcHV0YXRpb24gbGlzdFxuICAgICAgICB9XG4gICAgfCBMYXp5IG9mIHsgdCA6IGNvbXB1dGF0aW9uIG9wdGlvbiB9XG4gICAgfCBXcmFwIG9mXG4gICAgICAgIHsgbW9kZWxfaWQgOiBpZFxuICAgICAgICA7IGluamVjdF9pZCA6IGlkXG4gICAgICAgIDsgaW5uZXIgOiBjb21wdXRhdGlvblxuICAgICAgICB9XG4gICAgfCBXaXRoX21vZGVsX3Jlc2V0dGVyIG9mXG4gICAgICAgIHsgcmVzZXRfaWQgOiBpZFxuICAgICAgICA7IGlubmVyIDogY29tcHV0YXRpb25cbiAgICAgICAgfVxuICAgIHwgUGF0aFxuICAgIHwgTGlmZWN5Y2xlIG9mIHsgdmFsdWUgOiB2YWx1ZSB9XG4gICAgfCBJZGVudGl0eSBvZiB7IHQgOiBjb21wdXRhdGlvbiB9XG5cbiAgYW5kIHZhbHVlID0gVmFsdWUudCA9XG4gICAgeyBub2RlX3BhdGggOiBub2RlX3BhdGggbGF6eV9cbiAgICA7IGtpbmQgOiB2YWx1ZV9raW5kXG4gICAgOyBoZXJlIDogc291cmNlX2NvZGVfcG9zaXRpb24gb3B0aW9uXG4gICAgOyBpZCA6IGlkXG4gICAgfVxuXG4gIGFuZCB2YWx1ZV9raW5kID0gVmFsdWUua2luZCA9XG4gICAgfCBDb25zdGFudFxuICAgIHwgRXhjZXB0aW9uXG4gICAgfCBJbmNyXG4gICAgfCBOYW1lZFxuICAgIHwgQ3V0b2ZmIG9mXG4gICAgICAgIHsgdCA6IHZhbHVlXG4gICAgICAgIDsgYWRkZWRfYnlfbGV0X3N5bnRheCA6IGJvb2xcbiAgICAgICAgfVxuICAgIHwgTWFwbiBvZiB7IGlucHV0cyA6IHZhbHVlIGxpc3QgfVxuICBbQEBkZXJpdmluZyB0cmF2ZXJzZV9tYXAsIHRyYXZlcnNlX2ZvbGRdXG5lbmRcblxubW9kdWxlIFRyYXZlcnNlID0gc3RydWN0XG4gIGNsYXNzIFsnYWNjXSBmb2xkJyA9XG4gICAgb2JqZWN0XG4gICAgICBpbmhlcml0IFsnYWNjXSBmb2xkXG4gICAgICBtZXRob2Qgc291cmNlX2NvZGVfcG9zaXRpb24gXyA9IEZuLmlkXG4gICAgICBtZXRob2Qgb3B0aW9uIGYgbyBhY2MgPSBPcHRpb24uZm9sZCB+aW5pdDphY2MgfmY6KEZuLmZsaXAgZikgb1xuICAgICAgbWV0aG9kIG5vZGVfcGF0aCBfID0gRm4uaWRcbiAgICAgIG1ldGhvZCBsaXN0IGYgbCBhY2MgPSBMaXN0LmZvbGQgfmluaXQ6YWNjIH5mOihGbi5mbGlwIGYpIGxcblxuICAgICAgbWV0aG9kIGxhenlfIF8gXyA9XG4gICAgICAgICgqIE5PVEU6IFdlIGRvIG5vdCBmb3JjZSB0aGUgbGF6eTsgdGh1cyB0aGUgZm9sZCBkb2VzIG5vdCBlbnRlciB0aGUgbGF6eSBieVxuICAgICAgICAgICBkZWZhdWx0LiopXG4gICAgICAgIEZuLmlkXG5cbiAgICAgIG1ldGhvZCBpZCBfID0gRm4uaWRcbiAgICAgIG1ldGhvZCBib29sIF8gPSBGbi5pZFxuICAgIGVuZFxuXG4gIGNsYXNzIFsnYWNjXSBmb2xkID0gWydhY2NdIGZvbGQnXG5cbiAgY2xhc3MgbWFwJyA9XG4gICAgb2JqZWN0XG4gICAgICBpbmhlcml0IG1hcFxuICAgICAgbWV0aG9kIHNvdXJjZV9jb2RlX3Bvc2l0aW9uID0gRm4uaWRcbiAgICAgIG1ldGhvZCBvcHRpb24gZiB4ID0gT3B0aW9uLm1hcCB+ZiB4XG4gICAgICBtZXRob2Qgbm9kZV9wYXRoID0gRm4uaWRcbiAgICAgIG1ldGhvZCBsaXN0IGYgeCA9IExpc3QubWFwIH5mIHhcbiAgICAgIG1ldGhvZCBsYXp5XyBmIHggPSBMYXp5Lm1hcCB+ZiB4XG4gICAgICBtZXRob2QgaWQgPSBGbi5pZFxuICAgICAgbWV0aG9kIGJvb2wgPSBGbi5pZFxuICAgIGVuZFxuXG4gIGNsYXNzIG1hcCA9IG1hcCdcbmVuZFxuXG5tb2R1bGUgQ29tcHV0YXRpb24gPSBzdHJ1Y3RcbiAgaW5jbHVkZSBDb21wdXRhdGlvbjBcblxuICBsZXQgc2FuaXRpemVfZm9yX3Rlc3RpbmcgKHQgOiB0KSA9XG4gICAgbGV0IHRhYmxlID0gSGFzaHRibC5jcmVhdGUgKG1vZHVsZSBJZCkgaW5cbiAgICBsZXQgcmVwbGFjZSBpZCA9XG4gICAgICBIYXNodGJsLmZpbmRfb3JfYWRkIHRhYmxlIGlkIH5kZWZhdWx0OihmdW4gKCkgLT5cbiAgICAgICAgSWQub2ZfaW50X2Zvcl90ZXN0aW5nIChIYXNodGJsLmxlbmd0aCB0YWJsZSkpXG4gICAgaW5cbiAgICBsZXQgcmVwbGFjZV9vbGRfdWlkc193aXRoX3Nhbml0aXplZF9vbmVzID1cbiAgICAgIG9iamVjdFxuICAgICAgICBpbmhlcml0IFRyYXZlcnNlLm1hcCBhcyBzdXBlclxuICAgICAgICBtZXRob2QhIGlkIGlkID0gc3VwZXIjaWQgKHJlcGxhY2UgaWQpXG4gICAgICBlbmRcbiAgICBpblxuICAgIHJlcGxhY2Vfb2xkX3VpZHNfd2l0aF9zYW5pdGl6ZWRfb25lcyNjb21wdXRhdGlvbiB0XG4gIDs7XG5lbmRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgSWQgOiBzaWdcbiAgdHlwZSB0XG5cbiAgdmFsIHRvX3N0cmluZyA6IHQgLT4gc3RyaW5nXG4gIHZhbCBvZl9zdHJpbmcgOiBzdHJpbmcgLT4gdFxuICB2YWwgaXNfbmFtZWQgOiB0IC0+IGJvb2xcbmVuZCA9IHN0cnVjdFxuICBpbmNsdWRlIFN0cmluZ1xuXG4gIGxldCBpc19uYW1lZCA9IFN0cmluZy5pc19wcmVmaXggfnByZWZpeDpcIm5hbWVkX1wiXG5lbmRcblxubW9kdWxlIFN0YXRlID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgeyBtdXRhYmxlIGlkIDogaW50XG4gICAgOyB0eXBlX2lkX3RvX25hbWUgOiAoU2tlbGV0b24uSWQudCwgSWQudCkgSGFzaHRibC50XG4gICAgOyBidWZmZXIgOiBCdWZmZXIudFxuICAgIH1cbmVuZFxuXG5tb2R1bGUgS2luZCA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgQ29tcHV0YXRpb24gb2Ygc3RyaW5nXG4gICAgfCBMZWFmXG4gICAgfCBWYWx1ZSBvZlxuICAgICAgICB7IGtpbmQgOiBzdHJpbmdcbiAgICAgICAgOyBoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb25cbiAgICAgICAgfVxuICAgIHwgU3Vic3Qgb2YgU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb25cbiAgICB8IFJlc2V0X2lkXG4gICAgfCBEeW5cblxuICBsZXQgYmFzaWNfc2hhcGUgPyhvdGhlciA9IFwiXCIpID90b29sdGlwIH5zaGFwZSB+bGFiZWwgfmNvbG9yICgpID1cbiAgICBsZXQgdG9vbHRpcCA9XG4gICAgICBtYXRjaCB0b29sdGlwIHdpdGhcbiAgICAgIHwgU29tZSB0b29sdGlwIC0+IFslc3RyaW5nIFwiLCB0b29sdGlwID0gXFxcIiV7dG9vbHRpcH1cXFwiXCJdXG4gICAgICB8IE5vbmUgLT4gXCJcIlxuICAgIGluXG4gICAgWyVzdHJpbmdcbiAgICAgIHt8WyBzdHlsZT1maWxsZWQle3Rvb2x0aXB9LCBzaGFwZSA9IFwiJXtzaGFwZX1cIiwgbGFiZWwgPSBcIiV7bGFiZWx9XCI7IGZpbGxjb2xvciA9IFwiJXtjb2xvcn1cIjsgJXtvdGhlcn1dfH1dXG4gIDs7XG5cbiAgbGV0IHRvX3N0eWxlID0gZnVuY3Rpb25cbiAgICB8IENvbXB1dGF0aW9uIGtpbmQgLT4gYmFzaWNfc2hhcGUgfnNoYXBlOlwiTXJlY29yZFwiIH5sYWJlbDpraW5kIH5jb2xvcjpcIiM4NkUzQ0VcIiAoKVxuICAgIHwgTGVhZiAtPlxuICAgICAgYmFzaWNfc2hhcGVcbiAgICAgICAgfnNoYXBlOlwiTXJlY29yZFwiXG4gICAgICAgIH50b29sdGlwOlwibGVhZlwiXG4gICAgICAgIH5sYWJlbDpcIntzdGF0ZSBtYWNoaW5lfVwiXG4gICAgICAgIH5jb2xvcjpcIiNEMEU2QTVcIlxuICAgICAgICAoKVxuICAgIHwgVmFsdWUgeyBraW5kOyBoZXJlIH0gLT5cbiAgICAgIGxldCBjb2xvciA9IFwiI0ZGREQ5NFwiIGluXG4gICAgICBsZXQgdG9vbHRpcCA9IE9wdGlvbi5tYXAgaGVyZSB+ZjpTb3VyY2VfY29kZV9wb3NpdGlvbi50b19zdHJpbmcgaW5cbiAgICAgIGJhc2ljX3NoYXBlID90b29sdGlwIH5zaGFwZTpcIm92YWxcIiB+bGFiZWw6a2luZCB+Y29sb3IgKClcbiAgICB8IFN1YnN0IGhlcmUgLT5cbiAgICAgIGxldCB0b29sdGlwID0gT3B0aW9uLm1hcCBoZXJlIH5mOlNvdXJjZV9jb2RlX3Bvc2l0aW9uLnRvX3N0cmluZyBpblxuICAgICAgYmFzaWNfc2hhcGVcbiAgICAgICAgP3Rvb2x0aXBcbiAgICAgICAgfnNoYXBlOlwib3ZhbFwiXG4gICAgICAgIH5sYWJlbDpcInN1YnN0XCJcbiAgICAgICAgfmNvbG9yOlwiI0ZGRkZGRlwiXG4gICAgICAgIH5vdGhlcjpcIndpZHRoPS4xLCBoZWlnaHQ9LjFcIlxuICAgICAgICAoKVxuICAgIHwgUmVzZXRfaWQgfCBEeW4gLT5cbiAgICAgIGJhc2ljX3NoYXBlXG4gICAgICAgIH5zaGFwZTpcImNpcmNsZVwiXG4gICAgICAgIH5sYWJlbDpcIlwiXG4gICAgICAgIH5jb2xvcjpcIiMwMDAwMDBcIlxuICAgICAgICB+b3RoZXI6XCJ3aWR0aD0uMSwgaGVpZ2h0PS4xXCJcbiAgICAgICAgKClcbiAgOztcbmVuZFxuXG5sZXQgcmVnaXN0ZXIgc3RhdGUga2luZCBuYW1lID1cbiAgYXNzZXJ0IChTdHJpbmcuZm9yX2FsbCBuYW1lIH5mOihmdW4gYyAtPiBDaGFyLmlzX2FscGhhbnVtIGMgfHwgQ2hhci5lcXVhbCBjICdfJykpO1xuICBsZXQgcyA9IFslc3RyaW5nIFwiJXtuYW1lfV8le3N0YXRlLlN0YXRlLmlkI0ludH1cIl0gaW5cbiAgQnVmZmVyLmFkZF9zdHJpbmcgc3RhdGUuU3RhdGUuYnVmZmVyIHM7XG4gIEJ1ZmZlci5hZGRfY2hhciBzdGF0ZS5TdGF0ZS5idWZmZXIgJyAnO1xuICBCdWZmZXIuYWRkX3N0cmluZyBzdGF0ZS5TdGF0ZS5idWZmZXIgKEtpbmQudG9fc3R5bGUga2luZCk7XG4gIEJ1ZmZlci5hZGRfY2hhciBzdGF0ZS5TdGF0ZS5idWZmZXIgJ1xcbic7XG4gIHN0YXRlLmlkIDwtIHN0YXRlLmlkICsgMTtcbiAgSWQub2Zfc3RyaW5nIHNcbjs7XG5cbigqIENvbm5lY3RzIFtmcm9tXSB0byBbdG9fXSB3aXRoIGFuIGFycm93LiAgSWYgW3RvX10gaXMgYSBcIm5hbWVkXCIgdmFsdWUgKGkuZS5cbiAgIGl0IGlzIGEgVmFsdWUudCBwcm9kdWNlZCBieSBbc3ViXSksIHRoZSBhcnJvdy1oZWFkIG9uIHRoZSBhcnJvdyBpcyByZW1vdmVkLiAqKVxubGV0IGFycm93IHN0YXRlIH5mcm9tIH50b18gPVxuICBsZXQgYXJyb3dfc3RyaW5nID0gaWYgSWQuaXNfbmFtZWQgdG9fIHRoZW4gXCIgW2Rpcj1ub25lXTtcIiBlbHNlIFwiO1wiIGluXG4gIGJwcmludGZcbiAgICBzdGF0ZS5TdGF0ZS5idWZmZXJcbiAgICBcIiVzIC0+ICVzJXNcXG5cIlxuICAgIChJZC50b19zdHJpbmcgZnJvbSlcbiAgICAoSWQudG9fc3RyaW5nIHRvXylcbiAgICBhcnJvd19zdHJpbmdcbjs7XG5cbigqIFthcnJvd19mcm9tX21hbnkgc3RhdGUgfnRvIFthO2I7YztkXV0gIGlzIHRoZSBzYW1lIGFzXG4gICB7W1xuICAgICBhcnJvdyB+ZnJvbTphIH50b187XG4gICAgIGFycm93IH5mcm9tOmIgfnRvXztcbiAgICAgYXJyb3cgfmZyb206YyB+dG9fO1xuICAgICB0b19cbiAgIF19ICopXG5sZXQgYXJyb3dfZnJvbV9tYW55IHN0YXRlIH50b18gbCA9XG4gIExpc3QuaXRlciBsIH5mOihmdW4gZnJvbSAtPiBhcnJvdyBzdGF0ZSB+ZnJvbSB+dG9fKTtcbiAgdG9fXG47O1xuXG5sZXQgcmVnaXN0ZXJfbmFtZWQgc3RhdGUgc2hhcGUgbmFtZSA9XG4gIEhhc2h0YmwuZmluZF9vcl9hZGQgc3RhdGUuU3RhdGUudHlwZV9pZF90b19uYW1lIG5hbWUgfmRlZmF1bHQ6KGZ1biAoKSAtPlxuICAgIHJlZ2lzdGVyIHN0YXRlIHNoYXBlIFwibmFtZWRcIilcbjs7XG5cbmxldCByZWdpc3Rlcl9jb25zdCBzdGF0ZSBzaGFwZSBpZCA9XG4gIEhhc2h0YmwuZmluZF9vcl9hZGQgc3RhdGUuU3RhdGUudHlwZV9pZF90b19uYW1lIGlkIH5kZWZhdWx0OihmdW4gKCkgLT5cbiAgICByZWdpc3RlciBzdGF0ZSBzaGFwZSBcImNvbnN0XCIpXG47O1xuXG5sZXQgcmVjIGZvbGxvd19za2VsZXRvbl92YWx1ZVxuICBzdGF0ZVxuICB7IFNrZWxldG9uLlZhbHVlLmtpbmQgPSB2YWx1ZTsgaGVyZTsgbm9kZV9wYXRoID0gXzsgaWQgfVxuICA9XG4gIGxldCByZWdpc3RlciBzID0gcmVnaXN0ZXIgc3RhdGUgKEtpbmQuVmFsdWUgeyBraW5kID0gczsgaGVyZSB9KSBzIGluXG4gIGxldCByZWdpc3Rlcl9jb25zdCA9IHJlZ2lzdGVyX2NvbnN0IHN0YXRlIChLaW5kLlZhbHVlIHsga2luZCA9IFwiY29uc3RcIjsgaGVyZSB9KSBpblxuICBtYXRjaCB2YWx1ZSB3aXRoXG4gIHwgU2tlbGV0b24uVmFsdWUuQ29uc3RhbnQgLT4gcmVnaXN0ZXJfY29uc3QgaWRcbiAgfCBFeGNlcHRpb24gLT4gcmVnaXN0ZXIgXCJleGNlcHRpb25cIlxuICB8IEluY3IgLT4gcmVnaXN0ZXIgXCJpbmNyXCJcbiAgfCBOYW1lZCAtPiByZWdpc3Rlcl9uYW1lZCBzdGF0ZSAoS2luZC5TdWJzdCBoZXJlKSBpZFxuICB8IEN1dG9mZiB7IHQ7IGFkZGVkX2J5X2xldF9zeW50YXggPSBfIH0gLT5cbiAgICBsZXQgbWUgPSByZWdpc3RlciBcImN1dG9mZlwiIGluXG4gICAgbGV0IHRoZW0gPSBmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgdCBpblxuICAgIGFycm93IHN0YXRlIH5mcm9tOnRoZW0gfnRvXzptZTtcbiAgICBtZVxuICB8IE1hcG4geyBpbnB1dHMgfSAtPlxuICAgIGFycm93X2Zyb21fbWFueVxuICAgICAgc3RhdGVcbiAgICAgIChMaXN0Lm1hcCBpbnB1dHMgfmY6KGZ1biB2YWx1ZSAtPiBmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgdmFsdWUpKVxuICAgICAgfnRvXzoocmVnaXN0ZXIgXCJtYXBuXCIpXG47O1xuXG5sZXQgZm9sbG93X2R5bmFtaWNfc2tlbGV0b25fbGVhZiBzdGF0ZSAoaW5wdXQgOiBTa2VsZXRvbi5WYWx1ZS50KSA9XG4gIGxldCBtZSA9IHJlZ2lzdGVyIHN0YXRlIEtpbmQuTGVhZiBcImxlYWZcIiBpblxuICBtYXRjaCBpbnB1dC5raW5kIHdpdGhcbiAgfCBTa2VsZXRvbi5WYWx1ZS5Db25zdGFudCAtPiBtZVxuICB8IE1hcG4geyBpbnB1dHMgfSAtPlxuICAgIGFycm93X2Zyb21fbWFueVxuICAgICAgc3RhdGVcbiAgICAgIChMaXN0Lm1hcCBpbnB1dHMgfmY6KGZ1biB2YWx1ZSAtPiBmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgdmFsdWUpKVxuICAgICAgfnRvXzptZVxuICB8IF8gLT5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX3ZhbHVlIHN0YXRlIGlucHV0KSB+dG9fOm1lO1xuICAgIG1lXG47O1xuXG5sZXQgcmVjIGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSAoY29tcHV0YXRpb24gOiBTa2VsZXRvbi5Db21wdXRhdGlvbi50KSA9XG4gIGxldCByZWdpc3Rlcl9jb21wdXRhdGlvbiBraW5kID0gcmVnaXN0ZXIgc3RhdGUgKEtpbmQuQ29tcHV0YXRpb24ga2luZCkga2luZCBpblxuICBtYXRjaCBjb21wdXRhdGlvbi5raW5kIHdpdGhcbiAgfCBTa2VsZXRvbi5Db21wdXRhdGlvbi5SZXR1cm4geyB2YWx1ZSB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJyZWFkXCIgaW5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX3ZhbHVlIHN0YXRlIHZhbHVlKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgRmV0Y2ggeyBpZDsgXyB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJmZXRjaFwiIGluXG4gICAgYXJyb3cgc3RhdGUgfmZyb206KHJlZ2lzdGVyX25hbWVkIHN0YXRlIEtpbmQuRHluIGlkKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgTGVhZjAgLT4gcmVnaXN0ZXIgc3RhdGUgS2luZC5MZWFmIFwibGVhZjBcIlxuICB8IExlYWYwMSB7IGlucHV0OyBfIH0gLT4gZm9sbG93X2R5bmFtaWNfc2tlbGV0b25fbGVhZiBzdGF0ZSBpbnB1dFxuICB8IExlYWYxIHsgaW5wdXQ7IF8gfSAtPiBmb2xsb3dfZHluYW1pY19za2VsZXRvbl9sZWFmIHN0YXRlIGlucHV0XG4gIHwgTGVhZl9pbmNyIF8gLT4gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJsZWFmX2luY3JcIlxuICB8IFBhdGggLT4gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJwYXRoXCJcbiAgfCBMaWZlY3ljbGUgeyB2YWx1ZSB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJsaWZlX2N5Y2xlXCIgaW5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX3ZhbHVlIHN0YXRlIHZhbHVlKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgTW9kZWxfY3V0b2ZmIHsgdCB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJtb2RlbF9jdXRvZmZcIiBpblxuICAgIGFycm93IHN0YXRlIH5mcm9tOihmb2xsb3dfc2tlbGV0b25fY29tcHV0YXRpb24gc3RhdGUgdCkgfnRvXzptZTtcbiAgICBtZVxuICB8IFN1YiB7IGZyb207IHZpYTsgaW50byB9IC0+XG4gICAgYXJyb3dcbiAgICAgIHN0YXRlXG4gICAgICB+ZnJvbTooZm9sbG93X3NrZWxldG9uX2NvbXB1dGF0aW9uIHN0YXRlIGZyb20pXG4gICAgICB+dG9fOihyZWdpc3Rlcl9uYW1lZCBzdGF0ZSAoS2luZC5TdWJzdCBjb21wdXRhdGlvbi5oZXJlKSB2aWEpO1xuICAgIGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSBpbnRvXG4gIHwgQXNzb2MgeyBtYXA7IGJ5OyBfIH0gLT5cbiAgICBsZXQgbWUgPSByZWdpc3Rlcl9jb21wdXRhdGlvbiBcImFzc29jXCIgaW5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX2NvbXB1dGF0aW9uIHN0YXRlIGJ5KSB+dG9fOm1lO1xuICAgIGFycm93IHN0YXRlIH5mcm9tOihmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgbWFwKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgQXNzb2Nfb24geyBtYXA7IGJ5OyBfIH0gLT5cbiAgICBsZXQgbWUgPSByZWdpc3Rlcl9jb21wdXRhdGlvbiBcImFzc29jX29uXCIgaW5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX2NvbXB1dGF0aW9uIHN0YXRlIGJ5KSB+dG9fOm1lO1xuICAgIGFycm93IHN0YXRlIH5mcm9tOihmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgbWFwKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgQXNzb2Nfc2ltcGwgeyBtYXA7IF8gfSAtPlxuICAgIGxldCBtZSA9IHJlZ2lzdGVyX2NvbXB1dGF0aW9uIFwiYXNzb2Nfc2ltcGxcIiBpblxuICAgIGFycm93IHN0YXRlIH5mcm9tOihmb2xsb3dfc2tlbGV0b25fdmFsdWUgc3RhdGUgbWFwKSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgU3dpdGNoIHsgbWF0Y2hfOyBhcm1zOyBfIH0gLT5cbiAgICBsZXQgbWUgPSByZWdpc3Rlcl9jb21wdXRhdGlvbiBcInN3aXRjaFwiIGluXG4gICAgYXJyb3cgc3RhdGUgfmZyb206KGZvbGxvd19za2VsZXRvbl92YWx1ZSBzdGF0ZSBtYXRjaF8pIH50b186bWU7XG4gICAgTGlzdC5pdGVyIGFybXMgfmY6KGZ1biB0IC0+XG4gICAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX2NvbXB1dGF0aW9uIHN0YXRlIHQpIH50b186bWUpO1xuICAgIG1lXG4gIHwgTGF6eSB7IHQgPSBOb25lIH0gLT4gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJsYXp5XCJcbiAgfCBMYXp5IHsgdCA9IFNvbWUgdCB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJmb3JjZWRfbGF6eVwiIGluXG4gICAgYXJyb3cgc3RhdGUgfmZyb206KGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSB0KSB+dG9fOm1lO1xuICAgIG1lXG4gIHwgV3JhcCB7IGlubmVyOyBtb2RlbF9pZCA9IF87IGluamVjdF9pZCA9IF8gfSAtPlxuICAgIGxldCBtZSA9IHJlZ2lzdGVyX2NvbXB1dGF0aW9uIFwid3JhcFwiIGluXG4gICAgYXJyb3cgc3RhdGUgfmZyb206KGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSBpbm5lcikgfnRvXzptZTtcbiAgICBtZVxuICB8IFdpdGhfbW9kZWxfcmVzZXR0ZXIgeyByZXNldF9pZDsgaW5uZXIgfSAtPlxuICAgIGxldCBtZSA9IHJlZ2lzdGVyX2NvbXB1dGF0aW9uIFwid2l0aF9tb2RlbF9yZXNldHRlclwiIGluXG4gICAgYXJyb3cgc3RhdGUgfmZyb206bWUgfnRvXzoocmVnaXN0ZXJfbmFtZWQgc3RhdGUgS2luZC5SZXNldF9pZCByZXNldF9pZCk7XG4gICAgYXJyb3cgc3RhdGUgfmZyb206KGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSBpbm5lcikgfnRvXzptZTtcbiAgICBtZVxuICB8IFN0b3JlIHsgaWQ7IHZhbHVlOyBpbm5lciB9IC0+XG4gICAgbGV0IG1lID0gcmVnaXN0ZXJfY29tcHV0YXRpb24gXCJkeW5fc2V0XCIgaW5cbiAgICBhcnJvdyBzdGF0ZSB+ZnJvbTooZm9sbG93X3NrZWxldG9uX3ZhbHVlIHN0YXRlIHZhbHVlKSB+dG9fOm1lO1xuICAgIGFycm93IHN0YXRlIH5mcm9tOm1lIH50b186KHJlZ2lzdGVyX25hbWVkIHN0YXRlIEtpbmQuRHluIGlkKTtcbiAgICBmb2xsb3dfc2tlbGV0b25fY29tcHV0YXRpb24gc3RhdGUgaW5uZXJcbiAgfCBJZGVudGl0eSB7IHQgfSAtPlxuICAgIGxldCBtZSA9IHJlZ2lzdGVyX2NvbXB1dGF0aW9uIFwiaWRlbnRpdHlcIiBpblxuICAgIGFycm93IHN0YXRlIH5mcm9tOihmb2xsb3dfc2tlbGV0b25fY29tcHV0YXRpb24gc3RhdGUgdCkgfnRvXzptZTtcbiAgICBtZVxuOztcblxubGV0IHRvX2RvdCA/KHByZV9wcm9jZXNzID0gdHJ1ZSkgdCA9XG4gIGxldCBzdGF0ZSA9XG4gICAgeyBTdGF0ZS5pZCA9IDBcbiAgICA7IGJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGUgMjAxNFxuICAgIDsgdHlwZV9pZF90b19uYW1lID0gSGFzaHRibC5jcmVhdGUgKG1vZHVsZSBTa2VsZXRvbi5JZClcbiAgICB9XG4gIGluXG4gIGxldCBjb21wdXRhdGlvbiA9IGlmIHByZV9wcm9jZXNzIHRoZW4gUHJlX3Byb2Nlc3MucHJlX3Byb2Nlc3MgdCBlbHNlIHQgaW5cbiAgbGV0IHNrZWxldG9uX2NvbXB1dGF0aW9uID0gU2tlbGV0b24uQ29tcHV0YXRpb24ub2ZfY29tcHV0YXRpb24gY29tcHV0YXRpb24gaW5cbiAgbGV0IF9yb290IDogSWQudCA9IGZvbGxvd19za2VsZXRvbl9jb21wdXRhdGlvbiBzdGF0ZSBza2VsZXRvbl9jb21wdXRhdGlvbiBpblxuICBzcHJpbnRmIFwiZGlncmFwaCB7XFxuJXN9XCIgKEJ1ZmZlci5jb250ZW50cyBzdGF0ZS5idWZmZXIpXG47O1xuIiwib3BlbiBDb3JlLkNvcmVfc3RhYmxlXG5cbm1vZHVsZSBTdGFibGUgPSBzdHJ1Y3RcbiAgbW9kdWxlIE5vZGVfaW5mbyA9IHN0cnVjdFxuICAgIG1vZHVsZSBWMSA9IHN0cnVjdFxuICAgICAgdHlwZSB0ID1cbiAgICAgICAgeyBub2RlX3R5cGUgOiBTdHJpbmcuVjEudFxuICAgICAgICA7IGhlcmUgOiBDb3JlLlNvdXJjZV9jb2RlX3Bvc2l0aW9uLlN0YWJsZS5WMS50IE9wdGlvbi5WMS50XG4gICAgICAgIH1cbiAgICAgIFtAQGRlcml2aW5nIHNleHAsIGJpbl9pbywgY29tcGFyZV1cblxuICAgICAgbGV0JWV4cGVjdF90ZXN0IF8gPVxuICAgICAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgICAgIFslZXhwZWN0IHt8IDEyN2MzM2FhMzg5NTExMGQyZmRkMWIzYzM1NmJmNWMzIHx9XVxuICAgICAgOztcbiAgICBlbmRcblxuICAgIG1vZHVsZSBWMiA9IHN0cnVjdFxuICAgICAgdHlwZSB0ID1cbiAgICAgICAgeyBub2RlX3R5cGUgOiBTdHJpbmcuVjEudFxuICAgICAgICA7IGhlcmUgOiBDb3JlLlNvdXJjZV9jb2RlX3Bvc2l0aW9uLlN0YWJsZS5WMS50IE9wdGlvbi5WMS50XG4gICAgICAgIDsgaWQgOiBJbnQuVjEudFxuICAgICAgICB9XG4gICAgICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBiaW5faW8sIHN0YWJsZV9yZWNvcmQgfnZlcnNpb246VjEudCB+cmVtb3ZlOlsgaWQgXV1cblxuICAgICAgbGV0JWV4cGVjdF90ZXN0IF8gPVxuICAgICAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgICAgIFslZXhwZWN0IHt8IGRhMGU4MDAxZDFmNTY5MmQ1YTU2YzI2ZTE4YzgxYTAxIHx9XVxuICAgICAgOztcblxuICAgICAgbGV0IHRvX3YxIHQgPSB0b19WMV90IHRcbiAgICAgIGxldCBvZl92MSB0ID0gb2ZfVjFfdCB0IH5pZDooLTEpXG4gICAgZW5kXG5cbiAgICBtb2R1bGUgVjMgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgdCA9IFYxLnQgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgYmluX2lvXVxuXG4gICAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICAgIHByaW50X2VuZGxpbmUgWyViaW5fZGlnZXN0OiB0XTtcbiAgICAgICAgWyVleHBlY3Qge3wgMTI3YzMzYWEzODk1MTEwZDJmZGQxYjNjMzU2YmY1YzMgfH1dXG4gICAgICA7O1xuXG4gICAgICBsZXQgdG9fdjIgPSBWMi5vZl92MVxuICAgICAgbGV0IG9mX3YyID0gVjIudG9fdjFcbiAgICBlbmRcbiAgZW5kXG5cbiAgbW9kdWxlIFYxID0gc3RydWN0XG4gICAgdHlwZSB0ID1cbiAgICAgIHsgdHJlZSA6IE5vZGVfcGF0aC5TdGFibGUuVjEudCBOb2RlX3BhdGguU3RhYmxlLlYxLk1hcC50XG4gICAgICA7IGRhZyA6IE5vZGVfcGF0aC5TdGFibGUuVjEudCBsaXN0IE5vZGVfcGF0aC5TdGFibGUuVjEuTWFwLnRcbiAgICAgIDsgaW5mbyA6IE5vZGVfaW5mby5WMS50IE5vZGVfcGF0aC5TdGFibGUuVjEuTWFwLnRcbiAgICAgIH1cbiAgICBbQEBkZXJpdmluZyBiaW5faW8sIHNleHBdXG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgICBbJWV4cGVjdCB7fCAxMjI5MjRjYjQ5MWYyYzAwNzI3YWU5OGI1YzQ3ZjM0MyB8fV1cbiAgICA7O1xuICBlbmRcblxuICBtb2R1bGUgVjIgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPVxuICAgICAgeyB0cmVlIDogTm9kZV9wYXRoLlN0YWJsZS5WMS50IE5vZGVfcGF0aC5TdGFibGUuVjEuTWFwLnRcbiAgICAgIDsgZGFnIDogTm9kZV9wYXRoLlN0YWJsZS5WMS50IGxpc3QgTm9kZV9wYXRoLlN0YWJsZS5WMS5NYXAudFxuICAgICAgOyBpbmZvIDogTm9kZV9pbmZvLlYyLnQgTm9kZV9wYXRoLlN0YWJsZS5WMS5NYXAudFxuICAgICAgfVxuICAgIFtAQGRlcml2aW5nIGJpbl9pbywgY29tcGFyZSwgc2V4cCwgc3RhYmxlX3JlY29yZCB+dmVyc2lvbjpWMS50IH5tb2RpZnk6WyBpbmZvIF1dXG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXyA9XG4gICAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgICBbJWV4cGVjdCB7fCBjYTgwMjgwZDg2YTAzMmJiZDY2MzYyNmQ4NTU4ZmU2ZiB8fV1cbiAgICA7O1xuXG4gICAgbGV0IG9mX3YxIHQgPVxuICAgICAgbGV0IG9wZW4gQ29yZSBpblxuICAgICAgb2ZfVjFfdCB0IH5tb2RpZnlfaW5mbzooTWFwLm1hcCB+ZjpOb2RlX2luZm8uVjIub2ZfdjEpXG4gICAgOztcblxuICAgIGxldCB0b192MSB0ID1cbiAgICAgIGxldCBvcGVuIENvcmUgaW5cbiAgICAgIHRvX1YxX3QgdCB+bW9kaWZ5X2luZm86KE1hcC5tYXAgfmY6Tm9kZV9pbmZvLlYyLnRvX3YxKVxuICAgIDs7XG4gIGVuZFxuXG4gIG1vZHVsZSBWMyA9IHN0cnVjdFxuICAgIHR5cGUgdCA9XG4gICAgICB7IHRyZWUgOiBOb2RlX3BhdGguU3RhYmxlLlYxLnQgTm9kZV9wYXRoLlN0YWJsZS5WMS5NYXAudFxuICAgICAgOyBkYWcgOiBOb2RlX3BhdGguU3RhYmxlLlYxLnQgbGlzdCBOb2RlX3BhdGguU3RhYmxlLlYxLk1hcC50XG4gICAgICA7IGluZm8gOiBOb2RlX2luZm8uVjMudCBOb2RlX3BhdGguU3RhYmxlLlYxLk1hcC50XG4gICAgICB9XG4gICAgW0BAZGVyaXZpbmcgYmluX2lvLCBjb21wYXJlLCBzZXhwLCBzdGFibGVfcmVjb3JkIH52ZXJzaW9uOlYyLnQgfm1vZGlmeTpbIGluZm8gXV1cblxuICAgIGxldCVleHBlY3RfdGVzdCBfID1cbiAgICAgIHByaW50X2VuZGxpbmUgWyViaW5fZGlnZXN0OiB0XTtcbiAgICAgIFslZXhwZWN0IHt8IDEyMjkyNGNiNDkxZjJjMDA3MjdhZTk4YjVjNDdmMzQzIHx9XVxuICAgIDs7XG5cbiAgICBsZXQgb2ZfdjIgdCA9XG4gICAgICBsZXQgb3BlbiBDb3JlIGluXG4gICAgICBvZl9WMl90IHQgfm1vZGlmeV9pbmZvOihNYXAubWFwIH5mOk5vZGVfaW5mby5WMy5vZl92MilcbiAgICA7O1xuXG4gICAgbGV0IHRvX3YyIHQgPVxuICAgICAgbGV0IG9wZW4gQ29yZSBpblxuICAgICAgdG9fVjJfdCB0IH5tb2RpZnlfaW5mbzooTWFwLm1hcCB+ZjpOb2RlX2luZm8uVjMudG9fdjIpXG4gICAgOztcbiAgZW5kXG5lbmRcblxub3BlbiBTdGFibGVcbm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgU291cmNlX2NvZGVfcG9zaXRpb24gPSBzdHJ1Y3RcbiAgKCogV2UgY29weSBbU291cmNlX2NvZGVfcG9zaXRpb25dIHNvIHdlIGNhbiBkZXJpdmUgW3NleHBdIGFuZCBbYmluX2lvXSBvbiBpdC4gKilcbiAgdHlwZSB0ID0gU291cmNlX2NvZGVfcG9zaXRpb24udCA9XG4gICAgeyBwb3NfZm5hbWUgOiBzdHJpbmdcbiAgICA7IHBvc19sbnVtIDogaW50XG4gICAgOyBwb3NfYm9sIDogaW50XG4gICAgOyBwb3NfY251bSA6IGludFxuICAgIH1cbiAgW0BAZGVyaXZpbmcgc2V4cCwgYmluX2lvXVxuZW5kXG5cbm1vZHVsZSBOb2RlX2luZm8gPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gTm9kZV9pbmZvLlYxLnQgPVxuICAgIHsgbm9kZV90eXBlIDogc3RyaW5nXG4gICAgOyBoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb25cbiAgICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGJpbl9pb11cblxuICBsZXQgb2ZfdmFsdWUgKHR5cGUgYSkgKHsgdmFsdWU7IGhlcmU7IGlkID0gXyB9IDogYSBWYWx1ZS50KSA9XG4gICAgbGV0IG5vZGVfdHlwZSA9XG4gICAgICBtYXRjaCB2YWx1ZSB3aXRoXG4gICAgICB8IENvbnN0YW50IF8gLT4gXCJjb25zdGFudFwiXG4gICAgICB8IEV4Y2VwdGlvbiBfIC0+IFwiZXhjZXB0aW9uXCJcbiAgICAgIHwgSW5jciBfIC0+IFwiaW5jclwiXG4gICAgICB8IE5hbWVkIF8gLT4gXCJuYW1lZFwiXG4gICAgICB8IEJvdGggKF8sIF8pIC0+IFwiYm90aFwiXG4gICAgICB8IEN1dG9mZiBfIC0+IFwiY3V0b2ZmXCJcbiAgICAgIHwgTWFwIF8gLT4gXCJtYXBcIlxuICAgICAgfCBNYXAyIF8gLT4gXCJtYXAyXCJcbiAgICAgIHwgTWFwMyBfIC0+IFwibWFwM1wiXG4gICAgICB8IE1hcDQgXyAtPiBcIm1hcDRcIlxuICAgICAgfCBNYXA1IF8gLT4gXCJtYXA1XCJcbiAgICAgIHwgTWFwNiBfIC0+IFwibWFwNlwiXG4gICAgICB8IE1hcDcgXyAtPiBcIm1hcDdcIlxuICAgIGluXG4gICAgeyBub2RlX3R5cGU7IGhlcmUgfVxuICA7O1xuXG4gIGxldCBvZl9jb21wdXRhdGlvbiAodHlwZSByZXN1bHQpIChjb21wdXRhdGlvbiA6IHJlc3VsdCBDb21wdXRhdGlvbi50KSA9XG4gICAgbGV0IGhlcmUgPVxuICAgICAgbWF0Y2ggY29tcHV0YXRpb24gd2l0aFxuICAgICAgfCBTdWIgeyBoZXJlOyBfIH0gLT4gaGVyZVxuICAgICAgfCBTd2l0Y2ggeyBoZXJlOyBfIH0gLT4gU29tZSBoZXJlXG4gICAgICB8IF8gLT4gTm9uZVxuICAgIGluXG4gICAgbGV0IG5vZGVfdHlwZSA9XG4gICAgICBtYXRjaCBjb21wdXRhdGlvbiB3aXRoXG4gICAgICB8IFJldHVybiBfIC0+IFwicmV0dXJuXCJcbiAgICAgIHwgTGVhZjEgXyAtPiBcImxlYWYxXCJcbiAgICAgIHwgTGVhZjAgXyAtPiBcImxlYWYwXCJcbiAgICAgIHwgTGVhZl9pbmNyIF8gLT4gXCJsZWFmX2luY3JcIlxuICAgICAgfCBTdWIgXyAtPiBcInN1YlwiXG4gICAgICB8IFN0b3JlIF8gLT4gXCJzdG9yZVwiXG4gICAgICB8IEZldGNoIF8gLT4gXCJmZXRjaFwiXG4gICAgICB8IEFzc29jIF8gLT4gXCJhc3NvY1wiXG4gICAgICB8IEFzc29jX29uIF8gLT4gXCJhc3NvY19vblwiXG4gICAgICB8IEFzc29jX3NpbXBsIF8gLT4gXCJhc3NvY19zaW1wbFwiXG4gICAgICB8IFN3aXRjaCBfIC0+IFwic3dpdGNoXCJcbiAgICAgIHwgTGF6eSBfIC0+IFwibGF6eVwiXG4gICAgICB8IFdyYXAgXyAtPiBcIndyYXBcIlxuICAgICAgfCBXaXRoX21vZGVsX3Jlc2V0dGVyIF8gLT4gXCJ3aXRoX21vZGVsX3Jlc2V0dGVyXCJcbiAgICAgIHwgUGF0aCAtPiBcInBhdGhcIlxuICAgICAgfCBMaWZlY3ljbGUgXyAtPiBcImxpZmVjeWNsZVwiXG4gICAgaW5cbiAgICB7IG5vZGVfdHlwZTsgaGVyZSB9XG4gIDs7XG5lbmRcblxudHlwZSB0ID0gVjMudCA9XG4gIHsgdHJlZSA6IE5vZGVfcGF0aC50IE5vZGVfcGF0aC5NYXAudFxuICA7IGRhZyA6IE5vZGVfcGF0aC50IGxpc3QgTm9kZV9wYXRoLk1hcC50XG4gIDsgaW5mbyA6IE5vZGVfaW5mby50IE5vZGVfcGF0aC5NYXAudFxuICB9XG5bQEBkZXJpdmluZyBiaW5faW8sIHNleHBdXG5cbmxldCBlbXB0eSA9XG4gIHsgdHJlZSA9IE5vZGVfcGF0aC5NYXAuZW1wdHk7IGRhZyA9IE5vZGVfcGF0aC5NYXAuZW1wdHk7IGluZm8gPSBOb2RlX3BhdGguTWFwLmVtcHR5IH1cbjs7XG5cbmxldCB2YWx1ZV9tYXBcbiAgKHR5cGUgYSlcbiAgKHsgcmVjdXJzZTsgdmFyX2Zyb21fcGFyZW50OyBwYXJlbnRfcGF0aDsgY3VycmVudF9wYXRoOyBfIH0gOlxuICAgIF8gVHJhbnNmb3JtLkZvcl92YWx1ZS5jb250ZXh0KVxuICBzdGF0ZVxuICAodmFsdWUgOiBhIFZhbHVlLnQpXG4gID1cbiAgbGV0IGVudmlyb25tZW50LCBhZGRfdHJlZV9yZWxhdGlvbnNoaXAsIGFkZF9kYWdfcmVsYXRpb25zaGlwID0gc3RhdGUgaW5cbiAgbGV0IG5vZGVfaW5mbyA9IE5vZGVfaW5mby5vZl92YWx1ZSB2YWx1ZSBpblxuICAobWF0Y2ggdmFyX2Zyb21fcGFyZW50IHdpdGhcbiAgIHwgVHJhbnNmb3JtLlZhcl9mcm9tX3BhcmVudC5PbmUgdmFyX2Zyb21fcGFyZW50IC0+XG4gICAgIEhhc2h0Ymwuc2V0IGVudmlyb25tZW50IH5rZXk6dmFyX2Zyb21fcGFyZW50IH5kYXRhOmN1cnJlbnRfcGF0aFxuICAgfCBUd28gKGZzdCwgc25kKSAtPlxuICAgICBIYXNodGJsLnNldCBlbnZpcm9ubWVudCB+a2V5OmZzdCB+ZGF0YTpjdXJyZW50X3BhdGg7XG4gICAgIEhhc2h0Ymwuc2V0IGVudmlyb25tZW50IH5rZXk6c25kIH5kYXRhOmN1cnJlbnRfcGF0aFxuICAgfCBOb25lIC0+ICgpKTtcbiAgYWRkX3RyZWVfcmVsYXRpb25zaGlwIH5mcm9tOmN1cnJlbnRfcGF0aCB+dG9fOnBhcmVudF9wYXRoIH5mcm9tX2luZm86bm9kZV9pbmZvO1xuICBhZGRfZGFnX3JlbGF0aW9uc2hpcCB+ZnJvbTpjdXJyZW50X3BhdGggfnRvXzpwYXJlbnRfcGF0aDtcbiAgbGV0ICgpID1cbiAgICBtYXRjaCB2YWx1ZS52YWx1ZSB3aXRoXG4gICAgfCBOYW1lZCBfIC0+XG4gICAgICAobWF0Y2ggSGFzaHRibC5maW5kIGVudmlyb25tZW50IChUeXBlX2VxdWFsLklkLnVpZCB2YWx1ZS5pZCkgd2l0aFxuICAgICAgIHwgU29tZSBuYW1lZF9pZCAtPiBhZGRfZGFnX3JlbGF0aW9uc2hpcCB+ZnJvbTpuYW1lZF9pZCB+dG9fOmN1cnJlbnRfcGF0aFxuICAgICAgIHwgTm9uZSAtPiBwcmludF9zIFslbWVzc2FnZSBcIkJVR1wiIFslaGVyZV1dKVxuICAgIHwgXyAtPiAoKVxuICBpblxuICByZWN1cnNlIHN0YXRlIHZhbHVlXG47O1xuXG5sZXQgY29tcHV0YXRpb25fbWFwXG4gICh0eXBlIHJlc3VsdClcbiAgKHsgcmVjdXJzZTsgdmFyX2Zyb21fcGFyZW50OyBwYXJlbnRfcGF0aDsgY3VycmVudF9wYXRoIH0gOlxuICAgIF8gVHJhbnNmb3JtLkZvcl9jb21wdXRhdGlvbi5jb250ZXh0KVxuICBzdGF0ZVxuICAoY29tcHV0YXRpb24gOiByZXN1bHQgQ29tcHV0YXRpb24udClcbiAgOiByZXN1bHQgQ29tcHV0YXRpb24udFxuICA9XG4gIGxldCBlbnZpcm9ubWVudCwgYWRkX3RyZWVfcmVsYXRpb25zaGlwLCBhZGRfZGFnX3JlbGF0aW9uc2hpcCA9IHN0YXRlIGluXG4gIGxldCBub2RlX2luZm8gPSBOb2RlX2luZm8ub2ZfY29tcHV0YXRpb24gY29tcHV0YXRpb24gaW5cbiAgYWRkX3RyZWVfcmVsYXRpb25zaGlwIH5mcm9tOmN1cnJlbnRfcGF0aCB+dG9fOnBhcmVudF9wYXRoIH5mcm9tX2luZm86bm9kZV9pbmZvO1xuICBhZGRfZGFnX3JlbGF0aW9uc2hpcCB+ZnJvbTpjdXJyZW50X3BhdGggfnRvXzpwYXJlbnRfcGF0aDtcbiAgKG1hdGNoIHZhcl9mcm9tX3BhcmVudCB3aXRoXG4gICB8IFRyYW5zZm9ybS5WYXJfZnJvbV9wYXJlbnQuT25lIHZhcl9mcm9tX3BhcmVudCAtPlxuICAgICBIYXNodGJsLnNldCBlbnZpcm9ubWVudCB+a2V5OnZhcl9mcm9tX3BhcmVudCB+ZGF0YTpjdXJyZW50X3BhdGhcbiAgIHwgVHdvIChmc3QsIHNuZCkgLT5cbiAgICAgSGFzaHRibC5zZXQgZW52aXJvbm1lbnQgfmtleTpmc3QgfmRhdGE6Y3VycmVudF9wYXRoO1xuICAgICBIYXNodGJsLnNldCBlbnZpcm9ubWVudCB+a2V5OnNuZCB+ZGF0YTpjdXJyZW50X3BhdGhcbiAgIHwgTm9uZSAtPiAoKSk7XG4gIGxldCByZWN1cnNlZCA9IHJlY3Vyc2Ugc3RhdGUgY29tcHV0YXRpb24gaW5cbiAgbWF0Y2ggcmVjdXJzZWQgd2l0aFxuICB8IEZldGNoIHsgaWQgPSB2X2lkOyBfIH0gLT5cbiAgICBsZXQgdWlkID0gVHlwZV9lcXVhbC5JZC51aWQgdl9pZCBpblxuICAgIChtYXRjaCBIYXNodGJsLmZpbmQgZW52aXJvbm1lbnQgdWlkIHdpdGhcbiAgICAgfCBOb25lIC0+ICgpXG4gICAgIHwgU29tZSBuYW1lZF9pZCAtPiBhZGRfZGFnX3JlbGF0aW9uc2hpcCB+ZnJvbTpuYW1lZF9pZCB+dG9fOmN1cnJlbnRfcGF0aCk7XG4gICAgY29tcHV0YXRpb25cbiAgfCBfIC0+IHJlY3Vyc2VkXG47O1xuXG5sZXQgaXRlcl9ncmFwaF91cGRhdGVzICh0IDogXyBDb21wdXRhdGlvbi50KSB+b25fdXBkYXRlID1cbiAgbGV0IGdyYXBoX2luZm8gPSByZWYgZW1wdHkgaW5cbiAgbGV0IGFkZF9kYWdfcmVsYXRpb25zaGlwIH5mcm9tIH50b18gPVxuICAgIGxldCAobGF6eSBmcm9tKSwgKGxhenkgdG9fKSA9IGZyb20sIHRvXyBpblxuICAgIGxldCBnbSA9ICFncmFwaF9pbmZvIGluXG4gICAgZ3JhcGhfaW5mbyA6PSB7IGdtIHdpdGggZGFnID0gTWFwLmFkZF9tdWx0aSBnbS5kYWcgfmtleTpmcm9tIH5kYXRhOnRvXyB9O1xuICAgIG9uX3VwZGF0ZSAhZ3JhcGhfaW5mb1xuICBpblxuICBsZXQgYWRkX3RyZWVfcmVsYXRpb25zaGlwIH5mcm9tIH50b18gfmZyb21faW5mbyA9XG4gICAgbGV0IChsYXp5IGZyb20pLCAobGF6eSB0b18pID0gZnJvbSwgdG9fIGluXG4gICAgbGV0IGdtID0gIWdyYXBoX2luZm8gaW5cbiAgICBncmFwaF9pbmZvXG4gICAgICA6PSB7IGdtIHdpdGhcbiAgICAgICAgICAgaW5mbyA9IE1hcC5hZGRfZXhuIGdtLmluZm8gfmtleTpmcm9tIH5kYXRhOmZyb21faW5mb1xuICAgICAgICAgOyB0cmVlID0gTWFwLmFkZF9leG4gZ20udHJlZSB+a2V5OmZyb20gfmRhdGE6dG9fXG4gICAgICAgICB9O1xuICAgIG9uX3VwZGF0ZSAhZ3JhcGhfaW5mb1xuICBpblxuICBsZXQgZW52aXJvbm1lbnQgPSBUeXBlX2VxdWFsLklkLlVpZC5UYWJsZS5jcmVhdGUgKCkgaW5cbiAgVHJhbnNmb3JtLm1hcFxuICAgIH5pbml0OihlbnZpcm9ubWVudCwgYWRkX3RyZWVfcmVsYXRpb25zaGlwLCBhZGRfZGFnX3JlbGF0aW9uc2hpcClcbiAgICB+Y29tcHV0YXRpb25fbWFwcGVyOnsgZiA9IGNvbXB1dGF0aW9uX21hcCB9XG4gICAgfnZhbHVlX21hcHBlcjp7IGYgPSB2YWx1ZV9tYXAgfVxuICAgIHRcbjs7XG5cbigqIEEgbG90IG9mIG5vZGVzIGluIHRoZSBib25zYWkgZ3JhcGggZG9uJ3QgYWN0dWFsbHkgaGF2ZSBzb3VyY2UtY29kZSBsb2NhdGlvbnNcbiAgIGF0dGFjaGVkLiBUaGlzIGZ1bmN0aW9ucyB3YWxrcyB1cCB0aGUgZ3JhcGggZnJvbSBlYWNoIG5vZGUgYW5kIGF0dGFjaGVzIHRoZVxuICAgbG9jYXRpb24gZnJvbSB0aGUgbmVhcmVzdCBwYXJlbnQuICopXG5sZXQgcHVsbF9zb3VyY2VfbG9jYXRpb25zX2Zyb21fbmVhcmVzdF9wYXJlbnQgdCA9XG4gIGxldCBpbmZvID0gcmVmIHQuaW5mbyBpblxuICBsZXQgcmVjIGZpbmRfYW5kX3VwZGF0ZV9uZWFyZXN0X2hlcmUga2V5IDogU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb24gPVxuICAgIGxldCViaW5kLk9wdGlvbiB7IE5vZGVfaW5mby5ub2RlX3R5cGU7IGhlcmUgfSA9IE1hcC5maW5kICFpbmZvIGtleSBpblxuICAgIGxldCBoZXJlID1cbiAgICAgIG1hdGNoIGhlcmUgd2l0aFxuICAgICAgfCBTb21lIGhlcmUgLT4gU29tZSBoZXJlXG4gICAgICB8IE5vbmUgLT5cbiAgICAgICAgbGV0JWJpbmQuT3B0aW9uIHBhcmVudCA9IE1hcC5maW5kIHQudHJlZSBrZXkgaW5cbiAgICAgICAgbGV0JW1hcC5PcHRpb24gaGVyZSA9IGZpbmRfYW5kX3VwZGF0ZV9uZWFyZXN0X2hlcmUgcGFyZW50IGluXG4gICAgICAgIHsgaGVyZSB3aXRoIHBvc19mbmFtZSA9IFwiflwiIF4gaGVyZS5wb3NfZm5hbWUgfVxuICAgIGluXG4gICAgaW5mbyA6PSBNYXAuc2V0ICFpbmZvIH5rZXkgfmRhdGE6eyBub2RlX3R5cGU7IGhlcmUgfTtcbiAgICBoZXJlXG4gIGluXG4gIGxldCB1cGRhdGVfbmVhcmVzdF9oZXJlIGtleSA9XG4gICAgbGV0IChfIDogU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb24pID0gZmluZF9hbmRfdXBkYXRlX25lYXJlc3RfaGVyZSBrZXkgaW5cbiAgICAoKVxuICBpblxuICBNYXAuaXRlcl9rZXlzICFpbmZvIH5mOnVwZGF0ZV9uZWFyZXN0X2hlcmU7XG4gICFpbmZvXG47O1xuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbm1vZHVsZSBFbnRyeV9sYWJlbCA9IHN0cnVjdFxuICAoKiBUaGUgbGFiZWwgdGhhdCBnZXRzIGF0dGFjaGVkIHRvIHBlcmZvcm1hbmNlIG1lYXN1cmVtZW50cy4gSXQgc2hvd3MgdXAgaW5cbiAgICAgdGhlIGZsYW1lZ3JhcGggcHJvZHVjZWQgYnkgdGhlIGNocm9tZSBwcm9maWxlciwgYW5kIGFsc28gaW4gdGhlIG1lc3NhZ2VzXG4gICAgIHRoYXQgd2UgcmVjZWl2ZSBmcm9tIHRoZSBbUGVyZm9ybWFuY2VPYnNlcnZlcl0uIFNpbmNlIHRoaXMgbGFiZWwgbWF5IGJlXG4gICAgIHZpZXdlZCBieSBodW1hbnMsIHdlIGluY2x1ZGUgdGhlIFtub2RlX3R5cGVdIGZpZWxkIGFuZCBoYW5kLWNyYWZ0IHRoZSBzZXhwXG4gICAgIHJlcHJlc2VudGF0aW9uLiAqKVxuICB0eXBlIHQgPVxuICAgIHsgaWQgOiBOb2RlX3BhdGgudFxuICAgIDsgbm9kZV90eXBlIDogc3RyaW5nXG4gICAgfVxuXG4gIGxldCB0b19zdHJpbmcgeyBpZDsgbm9kZV90eXBlIH0gPSBbJXN0cmluZyBcIiMjJXtub2RlX3R5cGV9ICV7aWQjTm9kZV9wYXRofVwiXVxuZW5kXG5cbmxldCBleHRyYWN0X25vZGVfcGF0aF9mcm9tX2VudHJ5X2xhYmVsIGxhYmVsID1cbiAgaWYgU3RyaW5nLmlzX3ByZWZpeCB+cHJlZml4OlwiIyNcIiBsYWJlbFxuICB0aGVuIChcbiAgICBtYXRjaCBTdHJpbmcuc3BsaXQgbGFiZWwgfm9uOicgJyB3aXRoXG4gICAgfCBbIF87IG5vZGVfcGF0aCBdIC0+IFNvbWUgKE5vZGVfcGF0aC5vZl9zdHJpbmcgbm9kZV9wYXRoKVxuICAgIHwgXyAtPiBOb25lKVxuICBlbHNlIE5vbmVcbjs7XG5cbmxldCBpbnN0cnVtZW50X2NvbXB1dGF0aW9uICh0IDogXyBDb21wdXRhdGlvbi50KSB+c3RhcnRfdGltZXIgfnN0b3BfdGltZXIgPVxuICBsZXQgY29tcHV0YXRpb25fbWFwXG4gICAgKHR5cGUgcmVzdWx0KVxuICAgIChjb250ZXh0IDogdW5pdCBUcmFuc2Zvcm0uRm9yX2NvbXB1dGF0aW9uLmNvbnRleHQpXG4gICAgKClcbiAgICAoY29tcHV0YXRpb24gOiByZXN1bHQgQ29tcHV0YXRpb24udClcbiAgICA6IHJlc3VsdCBDb21wdXRhdGlvbi50XG4gICAgPVxuICAgIGxldCBub2RlX2luZm8gPSBHcmFwaF9pbmZvLk5vZGVfaW5mby5vZl9jb21wdXRhdGlvbiBjb21wdXRhdGlvbiBpblxuICAgIGxldCBlbnRyeV9sYWJlbCBub2RlX3R5cGUgPVxuICAgICAgbGV0IChsYXp5IGN1cnJlbnRfcGF0aCkgPSBjb250ZXh0LmN1cnJlbnRfcGF0aCBpblxuICAgICAgeyBFbnRyeV9sYWJlbC5pZCA9IGN1cnJlbnRfcGF0aDsgbm9kZV90eXBlIH0gfD4gRW50cnlfbGFiZWwudG9fc3RyaW5nXG4gICAgaW5cbiAgICBsZXQgY29tcHV0ZV9sYWJlbCA9IGVudHJ5X2xhYmVsIFslc3RyaW5nIFwiJXtub2RlX2luZm8ubm9kZV90eXBlfS1jb21wdXRlXCJdIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvbl9sYWJlbCA9XG4gICAgICBlbnRyeV9sYWJlbCBbJXN0cmluZyBcIiV7bm9kZV9pbmZvLm5vZGVfdHlwZX0tYXBwbHlfYWN0aW9uXCJdXG4gICAgaW5cbiAgICBsZXQgYnlfbGFiZWwgPSBlbnRyeV9sYWJlbCBbJXN0cmluZyBcIiV7bm9kZV9pbmZvLm5vZGVfdHlwZX0tYnlcIl0gaW5cbiAgICBsZXQgdGltZV9hcHBseV9hY3Rpb24gfmFwcGx5X2FjdGlvbiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBpbnB1dCBtb2RlbCBhY3Rpb24gPVxuICAgICAgc3RhcnRfdGltZXIgYXBwbHlfYWN0aW9uX2xhYmVsO1xuICAgICAgbGV0IG1vZGVsID0gYXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IGlucHV0IG1vZGVsIGFjdGlvbiBpblxuICAgICAgc3RvcF90aW1lciBhcHBseV9hY3Rpb25fbGFiZWw7XG4gICAgICBtb2RlbFxuICAgIGluXG4gICAgbGV0IHRpbWVfc3RhdGljX2FwcGx5X2FjdGlvbiB+YXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsIGFjdGlvbiA9XG4gICAgICBzdGFydF90aW1lciBhcHBseV9hY3Rpb25fbGFiZWw7XG4gICAgICBsZXQgbW9kZWwgPSBhcHBseV9hY3Rpb24gfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgbW9kZWwgYWN0aW9uIGluXG4gICAgICBzdG9wX3RpbWVyIGFwcGx5X2FjdGlvbl9sYWJlbDtcbiAgICAgIG1vZGVsXG4gICAgaW5cbiAgICBsZXQgcmVjdXJzZWQgPSBjb250ZXh0LnJlY3Vyc2UgKCkgY29tcHV0YXRpb24gaW5cbiAgICBtYXRjaCByZWN1cnNlZCB3aXRoXG4gICAgfCBGZXRjaCB2X2lkIC0+IENvbXB1dGF0aW9uLkZldGNoIHZfaWRcbiAgICB8IExlYWYxIHQgLT5cbiAgICAgIExlYWYxIHsgdCB3aXRoIGFwcGx5X2FjdGlvbiA9IHRpbWVfYXBwbHlfYWN0aW9uIH5hcHBseV9hY3Rpb246dC5hcHBseV9hY3Rpb24gfVxuICAgIHwgTGVhZjAgdCAtPlxuICAgICAgTGVhZjBcbiAgICAgICAgeyB0IHdpdGggYXBwbHlfYWN0aW9uID0gdGltZV9zdGF0aWNfYXBwbHlfYWN0aW9uIH5hcHBseV9hY3Rpb246dC5hcHBseV9hY3Rpb24gfVxuICAgIHwgTGVhZl9pbmNyIHQgLT5cbiAgICAgIGxldCBjb21wdXRlIGNsb2NrIGlucHV0ID1cbiAgICAgICAgc3RhcnRfdGltZXIgY29tcHV0ZV9sYWJlbDtcbiAgICAgICAgbGV0IGNvbXB1dGVkID0gdC5jb21wdXRlIGNsb2NrIGlucHV0IGluXG4gICAgICAgIHN0b3BfdGltZXIgY29tcHV0ZV9sYWJlbDtcbiAgICAgICAgY29tcHV0ZWRcbiAgICAgIGluXG4gICAgICBMZWFmX2luY3IgeyB0IHdpdGggY29tcHV0ZSB9XG4gICAgfCBBc3NvY19zaW1wbCB0IC0+XG4gICAgICBsZXQgYnkgcGF0aCBrZXkgdmFsdWUgPVxuICAgICAgICBzdGFydF90aW1lciBieV9sYWJlbDtcbiAgICAgICAgbGV0IGJ5ID0gdC5ieSBwYXRoIGtleSB2YWx1ZSBpblxuICAgICAgICBzdG9wX3RpbWVyIGJ5X2xhYmVsO1xuICAgICAgICBieVxuICAgICAgaW5cbiAgICAgIEFzc29jX3NpbXBsIHsgdCB3aXRoIGJ5IH1cbiAgICB8IGNvbXB1dGF0aW9uIC0+IGNvbXB1dGF0aW9uXG4gIGluXG4gIGxldCB2YWx1ZV9tYXBcbiAgICAodHlwZSBhKVxuICAgIChjb250ZXh0IDogdW5pdCBUcmFuc2Zvcm0uRm9yX3ZhbHVlLmNvbnRleHQpXG4gICAgKClcbiAgICAoeyBoZXJlOyB2YWx1ZTsgaWQgfSBhcyB3cmFwcGVkX3ZhbHVlIDogYSBWYWx1ZS50KVxuICAgID1cbiAgICBsZXQgKGxhenkgY3VycmVudF9wYXRoKSA9IGNvbnRleHQuY3VycmVudF9wYXRoIGluXG4gICAgbGV0IG5vZGVfaW5mbyA9IEdyYXBoX2luZm8uTm9kZV9pbmZvLm9mX3ZhbHVlIHdyYXBwZWRfdmFsdWUgaW5cbiAgICBsZXQgZW50cnlfbGFiZWwgPVxuICAgICAgeyBFbnRyeV9sYWJlbC5pZCA9IGN1cnJlbnRfcGF0aDsgbm9kZV90eXBlID0gbm9kZV9pbmZvLm5vZGVfdHlwZSB9XG4gICAgICB8PiBFbnRyeV9sYWJlbC50b19zdHJpbmdcbiAgICBpblxuICAgIGxldCB2YWx1ZSA9XG4gICAgICBtYXRjaCB2YWx1ZSB3aXRoXG4gICAgICB8IENvbnN0YW50IF8gfCBFeGNlcHRpb24gXyB8IEluY3IgXyB8IE5hbWVkIF8gfCBCb3RoIChfLCBfKSB8IEN1dG9mZiBfIC0+IHZhbHVlXG4gICAgICB8IE1hcCB0IC0+XG4gICAgICAgIGxldCBmIGEgPVxuICAgICAgICAgIHN0YXJ0X3RpbWVyIGVudHJ5X2xhYmVsO1xuICAgICAgICAgIGxldCB4ID0gdC5mIGEgaW5cbiAgICAgICAgICBzdG9wX3RpbWVyIGVudHJ5X2xhYmVsO1xuICAgICAgICAgIHhcbiAgICAgICAgaW5cbiAgICAgICAgTWFwIHsgdCB3aXRoIGYgfVxuICAgICAgfCBNYXAyIHQgLT5cbiAgICAgICAgbGV0IGYgYSBiID1cbiAgICAgICAgICBzdGFydF90aW1lciBlbnRyeV9sYWJlbDtcbiAgICAgICAgICBsZXQgeCA9IHQuZiBhIGIgaW5cbiAgICAgICAgICBzdG9wX3RpbWVyIGVudHJ5X2xhYmVsO1xuICAgICAgICAgIHhcbiAgICAgICAgaW5cbiAgICAgICAgTWFwMiB7IHQgd2l0aCBmIH1cbiAgICAgIHwgTWFwMyB0IC0+XG4gICAgICAgIGxldCBmIGEgYiBjID1cbiAgICAgICAgICBzdGFydF90aW1lciBlbnRyeV9sYWJlbDtcbiAgICAgICAgICBsZXQgeCA9IHQuZiBhIGIgYyBpblxuICAgICAgICAgIHN0b3BfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgeFxuICAgICAgICBpblxuICAgICAgICBNYXAzIHsgdCB3aXRoIGYgfVxuICAgICAgfCBNYXA0IHQgLT5cbiAgICAgICAgbGV0IGYgYSBiIGMgZCA9XG4gICAgICAgICAgc3RhcnRfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgbGV0IHggPSB0LmYgYSBiIGMgZCBpblxuICAgICAgICAgIHN0b3BfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgeFxuICAgICAgICBpblxuICAgICAgICBNYXA0IHsgdCB3aXRoIGYgfVxuICAgICAgfCBNYXA1IHQgLT5cbiAgICAgICAgbGV0IGYgYSBiIGMgZCBlID1cbiAgICAgICAgICBzdGFydF90aW1lciBlbnRyeV9sYWJlbDtcbiAgICAgICAgICBsZXQgeCA9IHQuZiBhIGIgYyBkIGUgaW5cbiAgICAgICAgICBzdG9wX3RpbWVyIGVudHJ5X2xhYmVsO1xuICAgICAgICAgIHhcbiAgICAgICAgaW5cbiAgICAgICAgTWFwNSB7IHQgd2l0aCBmIH1cbiAgICAgIHwgTWFwNiB0IC0+XG4gICAgICAgIGxldCBmIGEgYiBjIGQgZSBmID1cbiAgICAgICAgICBzdGFydF90aW1lciBlbnRyeV9sYWJlbDtcbiAgICAgICAgICBsZXQgeCA9IHQuZiBhIGIgYyBkIGUgZiBpblxuICAgICAgICAgIHN0b3BfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgeFxuICAgICAgICBpblxuICAgICAgICBNYXA2IHsgdCB3aXRoIGYgfVxuICAgICAgfCBNYXA3IHQgLT5cbiAgICAgICAgbGV0IGYgYSBiIGMgZCBlIGYgZyA9XG4gICAgICAgICAgc3RhcnRfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgbGV0IHggPSB0LmYgYSBiIGMgZCBlIGYgZyBpblxuICAgICAgICAgIHN0b3BfdGltZXIgZW50cnlfbGFiZWw7XG4gICAgICAgICAgeFxuICAgICAgICBpblxuICAgICAgICBNYXA3IHsgdCB3aXRoIGYgfVxuICAgIGluXG4gICAgY29udGV4dC5yZWN1cnNlICgpIHsgaGVyZTsgdmFsdWU7IGlkIH1cbiAgaW5cbiAgVHJhbnNmb3JtLm1hcFxuICAgIH5pbml0OigpXG4gICAgfmNvbXB1dGF0aW9uX21hcHBlcjp7IGYgPSBjb21wdXRhdGlvbl9tYXAgfVxuICAgIH52YWx1ZV9tYXBwZXI6eyBmID0gdmFsdWVfbWFwIH1cbiAgICB0XG47O1xuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5tb2R1bGUgRWZmZWN0ID0gVWlfZWZmZWN0XG5tb2R1bGUgVGltZV9zb3VyY2UgPSBUaW1lX3NvdXJjZVxubW9kdWxlIEFwcGx5X2FjdGlvbl9jb250ZXh0ID0gQXBwbHlfYWN0aW9uX2NvbnRleHRcblxubW9kdWxlIHR5cGUgRW51bSA9IE1vZHVsZV90eXBlcy5FbnVtXG5tb2R1bGUgdHlwZSBDb21wYXJhdG9yID0gTW9kdWxlX3R5cGVzLkNvbXBhcmF0b3JcblxudHlwZSAoJ2ssICdjbXApIGNvbXBhcmF0b3IgPSAoJ2ssICdjbXApIE1vZHVsZV90eXBlcy5jb21wYXJhdG9yXG5cbm1vZHVsZSBGb3JfYm9uc2FpX2ludGVybmFsID0gc3RydWN0XG4gIGxldCBwZXJmb3JtX29uX2V4Y2VwdGlvbiA9IHJlZiBpZ25vcmVcbiAgbGV0IHNldF9wZXJmb3JtX29uX2V4Y2VwdGlvbiBwZXJmb3JtID0gcGVyZm9ybV9vbl9leGNlcHRpb24gOj0gcGVyZm9ybVxuZW5kXG5cbm1vZHVsZSBDb250X3ByaW1pdGl2ZXMgOiBzaWdcbiAgdHlwZSBncmFwaFxuXG4gICgqIE1haW4gcHJpbWl0aXZlczsgc2VlIGFib3ZlIGZvciBleHBsYW5hdGlvbi4gKilcbiAgdmFsIHBlcmZvcm0gOiA/aGVyZTpTb3VyY2VfY29kZV9wb3NpdGlvbi50IC0+IGdyYXBoIC0+ICdhIENvbXB1dGF0aW9uLnQgLT4gJ2EgVmFsdWUudFxuICB2YWwgaGFuZGxlIDogZjooZ3JhcGggLT4gJ2EgVmFsdWUudCkgLT4gZ3JhcGggLT4gJ2EgQ29tcHV0YXRpb24udFxuXG4gICgqIFNwZWNpYWwtdXNlIHByaW1pdGl2ZXMgZm9yIGdldHRpbmcgdGhlIGdsb2JhbCBncmFwaCwgYW5kIGNyZWF0aW5nIGl0IGluIHRoZSB0b3AgbGV2ZWwuICopXG4gIHZhbCBpc29sYXRlZCA6IGdyYXBoIC0+IGY6KHVuaXQgLT4gJ2EgVmFsdWUudCkgLT4gJ2EgQ29tcHV0YXRpb24udFxuICB2YWwgdG9wX2xldmVsX2hhbmRsZSA6IChncmFwaCAtPiAnYSBWYWx1ZS50KSAtPiAnYSBDb21wdXRhdGlvbi50XG4gIHZhbCBoYW5kbGVfZm9yX2xhenkgOiAoZ3JhcGggLT4gJ2EgVmFsdWUudCkgLT4gJ2EgQ29tcHV0YXRpb24udFxuICB2YWwgd2l0aF9nbG9iYWxfZ3JhcGggOiBmOihncmFwaCAtPiAnYSkgLT4gbm9fZ3JhcGg6KHVuaXQgLT4gJ2EpIC0+ICdhXG5lbmQgPSBzdHJ1Y3RcbiAgdHlwZSBncmFwaCA9IHsgbXV0YWJsZSBmIDogJ2EuICdhIENvbXB1dGF0aW9uLnQgLT4gJ2EgQ29tcHV0YXRpb24udCB9XG5cbiAgbGV0IHBlcmZvcm1cbiAgICA6IHR5cGUgYS4gP2hlcmU6U291cmNlX2NvZGVfcG9zaXRpb24udCAtPiBncmFwaCAtPiBhIENvbXB1dGF0aW9uLnQgLT4gYSBWYWx1ZS50XG4gICAgPVxuICAgIGZ1biA/aGVyZSBncmFwaCAtPiBmdW5jdGlvblxuICAgIHwgUmV0dXJuIHsgdmFsdWUgPSAoTmFtZWQgXyB8IENvbnN0YW50IF8gfCBFeGNlcHRpb24gXykgYXMgdmFsdWU7IGlkOyBfIH0gLT5cbiAgICAgICgqIEludHJvZHVjZSB0aGUgb3B0aW1pemF0aW9uIFtsZXQlc3ViIGEgPSByZXR1cm4gZm9vIGluIHVzZSBhXSA9PiBbdXNlIGZvb11cbiAgICAgICAgICAgVGhpcyBvbmx5IG1ha2VzIHNlbnNlIGlmIHRoZSBWYWx1ZS50IGJlaW5nIHJldHVybmVkIGlzIGVpdGhlciBhIGNvbnN0YW50IG9yIGFuXG4gICAgICAgICAgIGFscmVhZHktYm91bmQgbmFtZWQgdmFsdWUsIG90aGVyd2lzZSB5b3UgcmlzayBsb3NpbmcgdmFsdWUgc2hhcmluZy4gKilcbiAgICAgIHsgVmFsdWUudmFsdWU7IGlkOyBoZXJlIH1cbiAgICB8IGNvbXB1dGF0aW9uX3RvX3BlcmZvcm0gLT5cbiAgICAgICgqIE1pbnQgYSBmcmVzaCB0eXBlLWlkIHRvIGhvbGQgdGhlIHJlc3VsdCBvZiBwZXJmb3JtaW5nIHRoaXMgZ3JhcGggbW9kaWZpY2F0aW9uICAqKVxuICAgICAgbGV0IHZpYSA6IGEgVHlwZV9lcXVhbC5JZC50ID0gVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJcIiBbJXNleHBfb2Y6IG9wYXF1ZV0gaW5cbiAgICAgICgqIEtlZXAgaG9sZCBvZiB0aGUgcHJldmlvdXMgZ3JhcGgtbW9kaWZpY2F0aW9uIGZ1bmN0aW9uICopXG4gICAgICBsZXQgb2xkX2YgOiB0eXBlIGIuIGIgQ29tcHV0YXRpb24udCAtPiBiIENvbXB1dGF0aW9uLnQgPSBncmFwaC5mIGluXG4gICAgICBsZXQgbmV3X2YgOiB0eXBlIHguIHggQ29tcHV0YXRpb24udCAtPiB4IENvbXB1dGF0aW9uLnQgPSBmdW5jdGlvblxuICAgICAgICB8IFJldHVybiB7IHZhbHVlID0gTmFtZWQgXzsgaWQ7IF8gfSB3aGVuIFR5cGVfZXF1YWwuSWQuc2FtZSB2aWEgaWQgLT5cbiAgICAgICAgICAoKiBpbnRyb2R1Y2UgdGhlIG9wdGltaXphdGlvbiB7WyBsZXQlc3ViIGEgPSBmb28gYmFyIGluIHJldHVybiBhIF19ID0+IHtbIGZvbyBiYXIgXX0gKilcbiAgICAgICAgICBsZXQgVCA9IFR5cGVfZXF1YWwuSWQuc2FtZV93aXRuZXNzX2V4biB2aWEgaWQgaW5cbiAgICAgICAgICBvbGRfZiBjb21wdXRhdGlvbl90b19wZXJmb3JtXG4gICAgICAgIHwgZXZlbnR1YWxfcmVzdWx0IC0+XG4gICAgICAgICAgKCogb2xkX2YgdGFrZXMgdGhlIGV2ZW50dWFsIGlubmVybW9zdCByZXN1bHQsIGFuZCB3cmFwcyBpdCBpbiAwKyBsYXllcnMgb2Ygc3Vicy5cbiAgICAgICAgICAgICAgIFdlIHJlcGxhY2UgaXQgd2l0aCBhIG5ldyBmdW5jdGlvbiB0aGF0IGFkZHMgYW5vdGhlciBsYXllciB0byB0aGUgaW5zaWRlLiAqKVxuICAgICAgICAgIG9sZF9mIChTdWIgeyBmcm9tID0gY29tcHV0YXRpb25fdG9fcGVyZm9ybTsgdmlhOyBpbnRvID0gZXZlbnR1YWxfcmVzdWx0OyBoZXJlIH0pXG4gICAgICBpblxuICAgICAgKCogd3JpdGUgdGhlIG5ldyBob2xlIGludG8gdGhlIGdyYXBoLCBhbmQgcmV0dXJuIGEgbmV3IHZhbHVlIHJlZmVyZW5jaW5nIHRoZVxuICAgICAgICAgICB0eXBlLWlkIHRoYXQgd2lsbCBiZSBwb3B1bGF0ZWQgd2hlbiBbbmV3X2ZdIGlzIGludm9rZWQuICopXG4gICAgICBncmFwaC5mIDwtIG5ld19mO1xuICAgICAgVmFsdWUubmFtZWQgKFN1YiBoZXJlKSB2aWFcbiAgOztcblxuICAoKiBbaXNvbGF0ZWRdIHJ1bnMgW2ZdIG9uIGEgZnJlc2ggZ3JhcGggY29udGV4dC4gQXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLCB3ZSBhY3R1YWxseVxuICAgICBtdXRhdGUgdGhlIHNhbWUgWydncmFwaCddLCBzbyB0aGF0IFt0aGVfb25lX2FuZF9vbmx5XSBpcyBrZXB0IHVwIHRvIGRhdGUuXG4gICAgIFtpc29sYXRlZF0gYWxzbyBoYXMgYW4gZXhjZXB0aW9uIGhhbmRsZXIgdGhhdCByZXR1cm5zIGFueSBleGNlcHRpb25zIGluc2lkZSBhIFZhbHVlLnQuXG4gICAgIFRoaXMgcmVzdHJpY3RzIHRoZSByZXR1cm4gdHlwZSBvZiBbaXNvbGF0ZWRdIHRvIFsnYSBDb21wdXRhdGlvbi50XS4gKilcbiAgbGV0IGlzb2xhdGVkIGdyYXBoIH5mID1cbiAgICBsZXQgYmFja3VwX2YgPSBncmFwaC5mIGluXG4gICAgZ3JhcGguZiA8LSBGbi5pZDtcbiAgICB0cnlcbiAgICAgIGxldCByID0gZiAoKSBpblxuICAgICAgbGV0IHIgPSBncmFwaC5mIChQcm9jLnJlYWQgcikgaW5cbiAgICAgIGdyYXBoLmYgPC0gYmFja3VwX2Y7XG4gICAgICByXG4gICAgd2l0aFxuICAgIHwgZXhuIC0+XG4gICAgICAhRm9yX2JvbnNhaV9pbnRlcm5hbC5wZXJmb3JtX29uX2V4Y2VwdGlvbiBleG47XG4gICAgICBncmFwaC5mIDwtIGJhY2t1cF9mO1xuICAgICAgUHJvYy5yZWFkIChWYWx1ZS5yZXR1cm5fZXhuIGV4bilcbiAgOztcblxuICAoKiBBIGdsb2JhbCB2YWx1ZSB3aGljaCBzdG9yZXMgdGhlIGN1cnJlbnQgZ3JhcGguICBUaGlzIGlzIHNvIHRoYXQgZnVuY3Rpb25zIGxpa2VcbiAgICAgW0NvbnQubWFwXSBjYW4gbG9vayB1cCB0aGUgY3VycmVudCBncmFwaCB3aXRob3V0IGJlaW5nIHBhc3NlZCBpdCBleHBsaWNpdGx5LiAqKVxuICBsZXQgdGhlX29uZV9hbmRfb25seSA9IHsgZiA9IChmdW4gXyAtPiBmYWlsd2l0aCBcIm91dHNpZGUgb2YgYSBCb25zYWkgdG9wbGV2ZWxcIikgfVxuXG4gICgqIElmIFtWYWx1ZS5tYXBdIGlzIGNhbGxlZCB3aXRoaW4gYSBbdG9wX2xldmVsX2hhbmRsZV0sIHdlIGNhbiB1c2UgdGhlIGdsb2JhbCBncmFwaCB0b1xuICAgICBkZWR1cGxpY2F0ZSB3b3JrLiBUaGlzIGNvdW50ZXIga2VlcHMgdHJhY2sgb2YgdGhlIG51bWJlciBvZiBuZXN0ZWQgW3RvcF9sZXZlbF9oYW5kbGVdXG4gICAgIGNhbGxzIHdlJ3JlIGN1cnJlbnRseSB3aXRoaW4uIEluIHRoZW9yeSwgdGhpcyBjb3VsZCBiZSBhIGJvb2wsIHNpbmNlXG4gICAgIFt0b3BfbGV2ZWxfaGFuZGxlXSBjYWxscyBzaG91bGRuJ3QgYmUgbmVzdGVkLCBidXQgdGhpcyBpcyBhIGJpdCBtb3JlIGRlZmVuc2l2ZS4gKilcbiAgbGV0IG51bV9uZXN0ZWRfdG9wX2xldmVsX2hhbmRsZXMgPSByZWYgMFxuXG4gICgqIEEgc21hbGwgd3JhcHBlciBhcm91bmQgaXNvbGF0ZWQuICBBbGwgaXQgZG9lcyBpcyBlbnN1cmUgdGhhdCB5b3UncmUgdXNpbmdcbiAgICAgdGhlIHNhbWUgZ3JhcGggdGhhdCB5b3UgcGFzc2VkIGluLiAqKVxuICBsZXQgaGFuZGxlIH5mIGdyYXBoID0gaXNvbGF0ZWQgZ3JhcGggfmY6KGZ1biAoKSAtPiBmIGdyYXBoKSBbQG5vbnRhaWxdXG5cbiAgbGV0IGhhbmRsZV93aXRoX2dsb2JhbF9ncmFwaCBpbnNpZGVfYV9sYXp5IGYgPVxuICAgICgqIG5lc3RpbmcgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBpcyBfZmluZV8sIGJ1dCBpdCBzaG91bGQgbmV2ZXIgaGFwcGVuLFxuICAgICAgIHVubGVzcyB5b3UncmUgaW5zaWRlIG9mIGEgbGF6eV8sIHdoZXJlIGl0J3MgYmVncnVkZ2luZ2x5IGV4cGVjdGVkICopXG4gICAgKG1hdGNoIGluc2lkZV9hX2xhenksICFudW1fbmVzdGVkX3RvcF9sZXZlbF9oYW5kbGVzID4gMCB3aXRoXG4gICAgIHwgYE5vdF9pbnNpZGVfbGF6eSwgdHJ1ZSAtPlxuICAgICAgIGVwcmludGZcbiAgICAgICAgIFwiQlVHOiBuZXN0ZWQgY2FsbHMgKCVkKSB0byB0b3BfbGV2ZWxfaGFuZGxlLiBQbGVhc2UgcmVwb3J0IHRvIGJvbnNhaS1kZXZzLlxcblwiXG4gICAgICAgICAhbnVtX25lc3RlZF90b3BfbGV2ZWxfaGFuZGxlc1xuICAgICB8IGBJbnNpZGVfbGF6eSwgKHRydWUgfCBmYWxzZSkgfCBgTm90X2luc2lkZV9sYXp5LCBmYWxzZSAtPiAoKSk7XG4gICAgaW5jciBudW1fbmVzdGVkX3RvcF9sZXZlbF9oYW5kbGVzO1xuICAgIEV4bi5wcm90ZWN0XG4gICAgICB+ZjooZnVuICgpIC0+XG4gICAgICAgIGxldCBnID0gdGhlX29uZV9hbmRfb25seSBpblxuICAgICAgICBsZXQgYmFja3VwX2YgPSBnLmYgaW5cbiAgICAgICAgZy5mIDwtIEZuLmlkO1xuICAgICAgICBsZXQgdiA9IGYgZyBpblxuICAgICAgICBsZXQgY29tcHV0YXRpb25fY29udGV4dCA9IGcuZiBpblxuICAgICAgICBnLmYgPC0gYmFja3VwX2Y7XG4gICAgICAgICgqIFlvdSBncml0IHlvdXIgdGVldGgsIHBsYW50IHlvdXIgZmVldCBhZ2FpbnN0IHRoZSBmbG9vciwgYW5kIGRyZWRnZSBhXG4gICAgICAgICAgIENvbXB1dGF0aW9uLnQgZnJvbSB0aGUgdm9pZC4gKilcbiAgICAgICAgY29tcHV0YXRpb25fY29udGV4dCAoUHJvY19taW4ucmVhZCB2KSBbQG5vbnRhaWxdKVxuICAgICAgfmZpbmFsbHk6KGZ1biAoKSAtPiBkZWNyIG51bV9uZXN0ZWRfdG9wX2xldmVsX2hhbmRsZXMpIFtAbm9udGFpbF1cbiAgOztcblxuICBsZXQgaGFuZGxlX2Zvcl9sYXp5IGYgPSBoYW5kbGVfd2l0aF9nbG9iYWxfZ3JhcGggYEluc2lkZV9sYXp5IGZcblxuICAoKiBNZWFudCB0byBiZSBjYWxsZWQgYXQgYm9uc2FpIGVudHJ5cG9pbnRzIG9ubHksIFt0b3BfbGV2ZWxfaGFuZGxlXSB1c2VzIHRoZVxuICAgICBzaW5nbGV0b24gZ3JhcGggYW5kIHNldHMgW25lc3RlZF90b3BfbGV2ZWxfaGFuZGxlc10gYWNvcmRpbmdseS4gKilcbiAgbGV0IHRvcF9sZXZlbF9oYW5kbGUgZiA9IGhhbmRsZV93aXRoX2dsb2JhbF9ncmFwaCBgTm90X2luc2lkZV9sYXp5IGZcblxuICAoKiBwcm92aWRlcyBhIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgZ3JhcGggb3IgcHJvdmlkZSBhIGZhbGxiYWNrIGlmIHdlIGFyZW4ndCBpbnNpZGUgYVxuICAgICBjYWxsIHRvIHRvcF9sZXZlbF9oYW5kbGUuICopXG4gIGxldCB3aXRoX2dsb2JhbF9ncmFwaCB+ZiB+bm9fZ3JhcGggPVxuICAgIGlmICFudW1fbmVzdGVkX3RvcF9sZXZlbF9oYW5kbGVzID4gMCB0aGVuIGYgdGhlX29uZV9hbmRfb25seSBlbHNlIG5vX2dyYXBoICgpXG4gIDs7XG5lbmRcblxudHlwZSAnYSB0ID0gJ2EgVmFsdWUudFxudHlwZSBncmFwaCA9IENvbnRfcHJpbWl0aXZlcy5ncmFwaFxuXG5vcGVuIENvbnRfcHJpbWl0aXZlc1xuXG5sZXQgcmV0dXJuID0gVmFsdWUucmV0dXJuXG5sZXQgYXJyMSBncmFwaCBhIH5mID0gcGVyZm9ybSBncmFwaCAoUHJvYy5yZWFkIChQcm9jLlZhbHVlLm1hcCBhIH5mKSlcbmxldCBhcnIyIGdyYXBoIGEgYiB+ZiA9IHBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXAyIGEgYiB+ZikpXG5sZXQgYXJyMyBncmFwaCBhIGIgYyB+ZiA9IHBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXAzIGEgYiBjIH5mKSlcbmxldCBhcnI0IGdyYXBoIGEgYiBjIGQgfmYgPSBwZXJmb3JtIGdyYXBoIChQcm9jLnJlYWQgKFByb2MuVmFsdWUubWFwNCBhIGIgYyBkIH5mKSlcbmxldCBhcnI1IGdyYXBoIGEgYiBjIGQgZSB+ZiA9IHBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXA1IGEgYiBjIGQgZSB+ZikpXG5sZXQgYXJyNiBncmFwaCBhIGIgYyBkIGUgZyB+ZiA9IHBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXA2IGEgYiBjIGQgZSBnIH5mKSlcblxubGV0IGFycjcgZ3JhcGggYSBiIGMgZCBlIGcgaCB+ZiA9XG4gIHBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXA3IGEgYiBjIGQgZSBnIGggfmYpKVxuOztcblxuKCogSWYgd2UgYXJlbid0IGluc2lkZSBvZiBhIFt0b3BfbGV2ZWxfaGFuZGxlXSwgdGhlbiBmYWxsIGJhY2sgdG8gdXNpbmcgW1ZhbHVlLm1hcF0gKilcbmxldCBtYXAgYSB+ZiA9XG4gIHdpdGhfZ2xvYmFsX2dyYXBoIH5mOihmdW4gZ3JhcGggLT4gYXJyMSBncmFwaCBhIH5mKSB+bm9fZ3JhcGg6KGZ1biAoKSAtPiBWYWx1ZS5tYXAgYSB+Zilcbjs7XG5cbmxldCBtYXAyIGEgYiB+ZiA9XG4gIHdpdGhfZ2xvYmFsX2dyYXBoXG4gICAgfmY6KGZ1biBncmFwaCAtPiBhcnIyIGdyYXBoIGEgYiB+ZilcbiAgICB+bm9fZ3JhcGg6KGZ1biAoKSAtPiBWYWx1ZS5tYXAyIGEgYiB+Zilcbjs7XG5cbmluY2x1ZGUgQXBwbGljYXRpdmUuTWFrZV91c2luZ19tYXAyIChzdHJ1Y3RcbiAgdHlwZSBub25yZWMgJ2EgdCA9ICdhIHRcblxuICBsZXQgcmV0dXJuID0gcmV0dXJuXG4gIGxldCBtYXAyID0gbWFwMlxuICBsZXQgbWFwID0gYEN1c3RvbSBtYXBcbmVuZClcblxubGV0IG1hcDMgYSBiIGMgfmYgPVxuICB3aXRoX2dsb2JhbF9ncmFwaFxuICAgIH5mOihmdW4gZ3JhcGggLT4gYXJyMyBncmFwaCBhIGIgYyB+ZilcbiAgICB+bm9fZ3JhcGg6KGZ1biAoKSAtPiBWYWx1ZS5tYXAzIGEgYiBjIH5mKVxuOztcblxubGV0IG1hcDQgYSBiIGMgZCB+ZiA9XG4gIHdpdGhfZ2xvYmFsX2dyYXBoXG4gICAgfmY6KGZ1biBncmFwaCAtPiBhcnI0IGdyYXBoIGEgYiBjIGQgfmYpXG4gICAgfm5vX2dyYXBoOihmdW4gKCkgLT4gVmFsdWUubWFwNCBhIGIgYyBkIH5mKVxuOztcblxubGV0IG1hcDUgYSBiIGMgZCBlIH5mID1cbiAgd2l0aF9nbG9iYWxfZ3JhcGhcbiAgICB+ZjooZnVuIGdyYXBoIC0+IGFycjUgZ3JhcGggYSBiIGMgZCBlIH5mKVxuICAgIH5ub19ncmFwaDooZnVuICgpIC0+IFZhbHVlLm1hcDUgYSBiIGMgZCBlIH5mKVxuOztcblxubGV0IG1hcDYgYSBiIGMgZCBlIGcgfmYgPVxuICB3aXRoX2dsb2JhbF9ncmFwaFxuICAgIH5mOihmdW4gZ3JhcGggLT4gYXJyNiBncmFwaCBhIGIgYyBkIGUgZyB+ZilcbiAgICB+bm9fZ3JhcGg6KGZ1biAoKSAtPiBWYWx1ZS5tYXA2IGEgYiBjIGQgZSBnIH5mKVxuOztcblxubGV0IG1hcDcgYSBiIGMgZCBlIGcgaCB+ZiA9XG4gIHdpdGhfZ2xvYmFsX2dyYXBoXG4gICAgfmY6KGZ1biBncmFwaCAtPiBhcnI3IGdyYXBoIGEgYiBjIGQgZSBnIGggfmYpXG4gICAgfm5vX2dyYXBoOihmdW4gKCkgLT4gVmFsdWUubWFwNyBhIGIgYyBkIGUgZyBoIH5mKVxuOztcblxubGV0IGJvdGggYSBiID0gbWFwMiBhIGIgfmY6VHVwbGUyLmNyZWF0ZVxubGV0IGN1dG9mZiB2IH5lcXVhbCA9IFZhbHVlLmN1dG9mZiB2IH5lcXVhbCB+YWRkZWRfYnlfbGV0X3N5bnRheDpmYWxzZVxuXG5sZXQgYWxsX21hcCB2IGdyYXBoID1cbiAgcGVyZm9ybSBncmFwaCAoUHJvYy5Db21wdXRhdGlvbi5hbGxfbWFwIChDb3JlLk1hcC5tYXAgdiB+ZjooZnVuIGYgLT4gaGFuZGxlIH5mIGdyYXBoKSkpXG47O1xuXG5sZXQgdHJhbnNwb3NlX29wdCBvcHQgPVxuICBPcHRpb24udmFsdWVfbWFwIG9wdCB+ZGVmYXVsdDoocmV0dXJuIE5vbmUpIH5mOihtYXAgfmY6T3B0aW9uLnNvbWUpXG47O1xuXG5sZXQgcGF0aF9pZCBncmFwaCA9IHBlcmZvcm0gZ3JhcGggUHJvYy5wYXRoX2lkXG5cbmxldCBzcGxpdCBncmFwaCB0dXBsZSA9XG4gIGxldCBhID0gYXJyMSBncmFwaCB0dXBsZSB+ZjpUdXBsZTIuZ2V0MSBpblxuICBsZXQgYiA9IGFycjEgZ3JhcGggdHVwbGUgfmY6VHVwbGUyLmdldDIgaW5cbiAgYSwgYlxuOztcblxubGV0IHN0YXRlX19mb3JfcHJvYzIgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCBkZWZhdWx0X21vZGVsIGdyYXBoID1cbiAgcGVyZm9ybSBncmFwaCAoUHJvYy5zdGF0ZSA/cmVzZXQgP3NleHBfb2ZfbW9kZWwgP2VxdWFsIGRlZmF1bHRfbW9kZWwpXG47O1xuXG5sZXQgc3RhdGUgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCBkZWZhdWx0X21vZGVsIGdyYXBoID1cbiAgc3RhdGVfX2Zvcl9wcm9jMiA/cmVzZXQgP3NleHBfb2ZfbW9kZWwgP2VxdWFsIGRlZmF1bHRfbW9kZWwgZ3JhcGggfD4gc3BsaXQgZ3JhcGhcbjs7XG5cbmxldCBzdGF0ZV9vcHRfX2Zvcl9wcm9jMiA/cmVzZXQgP2RlZmF1bHRfbW9kZWwgP3NleHBfb2ZfbW9kZWwgP2VxdWFsICgpIGdyYXBoID1cbiAgcGVyZm9ybSBncmFwaCAoUHJvYy5zdGF0ZV9vcHQgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCA/ZGVmYXVsdF9tb2RlbCAoKSlcbjs7XG5cbmxldCBzdGF0ZV9vcHQgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCA/ZGVmYXVsdF9tb2RlbCBncmFwaCA9XG4gIHN0YXRlX29wdF9fZm9yX3Byb2MyID9yZXNldCA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgP2RlZmF1bHRfbW9kZWwgKCkgZ3JhcGggfD4gc3BsaXQgZ3JhcGhcbjs7XG5cbmxldCB0b2dnbGVfX2Zvcl9wcm9jMiB+ZGVmYXVsdF9tb2RlbCBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MudG9nZ2xlIH5kZWZhdWx0X21vZGVsKVxubGV0IHRvZ2dsZSB+ZGVmYXVsdF9tb2RlbCBncmFwaCA9IHRvZ2dsZV9fZm9yX3Byb2MyIH5kZWZhdWx0X21vZGVsIGdyYXBoIHw+IHNwbGl0IGdyYXBoXG5cbm1vZHVsZSBUb2dnbGUgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB2ID0gJ2EgdFxuXG4gIHR5cGUgdCA9XG4gICAgeyBzdGF0ZSA6IGJvb2wgdlxuICAgIDsgc2V0X3N0YXRlIDogKGJvb2wgLT4gdW5pdCBFZmZlY3QudCkgdlxuICAgIDsgdG9nZ2xlIDogdW5pdCBFZmZlY3QudCB2XG4gICAgfVxuICBbQEBkZXJpdmluZyBmaWVsZHMgfmdldHRlcnNdXG5lbmRcblxubGV0IHRvZ2dsZScgfmRlZmF1bHRfbW9kZWwgZ3JhcGggPVxuICBsZXQgYWxsID0gcGVyZm9ybSBncmFwaCAoUHJvYy50b2dnbGUnIH5kZWZhdWx0X21vZGVsKSBpblxuICBsZXQgc3RhdGUgPSBhcnIxIGdyYXBoIGFsbCB+ZjooZnVuIHsgUHJvYy5Ub2dnbGUuc3RhdGU7IF8gfSAtPiBzdGF0ZSkgaW5cbiAgbGV0IHNldF9zdGF0ZSA9IGFycjEgZ3JhcGggYWxsIH5mOihmdW4geyBQcm9jLlRvZ2dsZS5zZXRfc3RhdGU7IF8gfSAtPiBzZXRfc3RhdGUpIGluXG4gIGxldCB0b2dnbGUgPSBhcnIxIGdyYXBoIGFsbCB+ZjooZnVuIHsgUHJvYy5Ub2dnbGUudG9nZ2xlOyBfIH0gLT4gdG9nZ2xlKSBpblxuICB7IFRvZ2dsZS5zdGF0ZTsgc2V0X3N0YXRlOyB0b2dnbGUgfVxuOztcblxubW9kdWxlIFBhdGggPSBQYXRoXG5cbmxldCBwYXRoIGdyYXBoID0gcGVyZm9ybSBncmFwaCBQcm9jLnBhdGhcblxubGV0IHN0YXRlX21hY2hpbmUwX19mb3JfcHJvYzJcbiAgP3Jlc2V0XG4gID9zZXhwX29mX21vZGVsXG4gID9zZXhwX29mX2FjdGlvblxuICA/ZXF1YWxcbiAgfmRlZmF1bHRfbW9kZWxcbiAgfmFwcGx5X2FjdGlvblxuICAoKVxuICBncmFwaFxuICA9XG4gIFByb2Muc3RhdGVfbWFjaGluZTBcbiAgICA/cmVzZXRcbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgID9zZXhwX29mX2FjdGlvblxuICAgID9lcXVhbFxuICAgICgpXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+YXBwbHlfYWN0aW9uXG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBzdGF0ZV9tYWNoaW5lMFxuICA/cmVzZXRcbiAgP3NleHBfb2ZfbW9kZWxcbiAgP3NleHBfb2ZfYWN0aW9uXG4gID9lcXVhbFxuICB+ZGVmYXVsdF9tb2RlbFxuICB+YXBwbHlfYWN0aW9uXG4gIGdyYXBoXG4gID1cbiAgc3RhdGVfbWFjaGluZTBfX2Zvcl9wcm9jMlxuICAgID9yZXNldFxuICAgID9zZXhwX29mX21vZGVsXG4gICAgP3NleHBfb2ZfYWN0aW9uXG4gICAgP2VxdWFsXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+YXBwbHlfYWN0aW9uXG4gICAgKClcbiAgICBncmFwaFxuICB8PiBzcGxpdCBncmFwaFxuOztcblxubW9kdWxlIENvbXB1dGF0aW9uX3N0YXR1cyA9IFByb2MuQ29tcHV0YXRpb25fc3RhdHVzXG5cbmxldCBzdGF0ZV9tYWNoaW5lMV9fZm9yX3Byb2MyXG4gID9zZXhwX29mX2FjdGlvblxuICA/cmVzZXRcbiAgP3NleHBfb2ZfbW9kZWxcbiAgP2VxdWFsXG4gIH5kZWZhdWx0X21vZGVsXG4gIH5hcHBseV9hY3Rpb25cbiAgaW5wdXRcbiAgZ3JhcGhcbiAgPVxuICBQcm9jLnN0YXRlX21hY2hpbmUxXG4gICAgP3Jlc2V0XG4gICAgP3NleHBfb2ZfbW9kZWxcbiAgICA/c2V4cF9vZl9hY3Rpb25cbiAgICA/ZXF1YWxcbiAgICB+ZGVmYXVsdF9tb2RlbFxuICAgIH5hcHBseV9hY3Rpb25cbiAgICBpbnB1dFxuICB8PiBwZXJmb3JtIGdyYXBoXG47O1xuXG5sZXQgc3RhdGVfbWFjaGluZTFcbiAgP3Jlc2V0XG4gID9zZXhwX29mX21vZGVsXG4gID9zZXhwX29mX2FjdGlvblxuICA/ZXF1YWxcbiAgfmRlZmF1bHRfbW9kZWxcbiAgfmFwcGx5X2FjdGlvblxuICBpbnB1dFxuICBncmFwaFxuICA9XG4gIHN0YXRlX21hY2hpbmUxX19mb3JfcHJvYzJcbiAgICA/cmVzZXRcbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgID9zZXhwX29mX2FjdGlvblxuICAgID9lcXVhbFxuICAgIH5kZWZhdWx0X21vZGVsXG4gICAgfmFwcGx5X2FjdGlvblxuICAgIGlucHV0XG4gICAgZ3JhcGhcbiAgfD4gc3BsaXQgZ3JhcGhcbjs7XG5cbmxldCBhY3RvcjBfX2Zvcl9wcm9jMlxuICA/cmVzZXRcbiAgP3NleHBfb2ZfbW9kZWxcbiAgP3NleHBfb2ZfYWN0aW9uXG4gID9lcXVhbFxuICB+ZGVmYXVsdF9tb2RlbFxuICB+cmVjdlxuICAoKVxuICBncmFwaFxuICA9XG4gIFByb2MuYWN0b3IwID9yZXNldCA/c2V4cF9vZl9tb2RlbCA/c2V4cF9vZl9hY3Rpb24gP2VxdWFsIH5kZWZhdWx0X21vZGVsIH5yZWN2ICgpXG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBhY3RvcjAgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9zZXhwX29mX2FjdGlvbiA/ZXF1YWwgfmRlZmF1bHRfbW9kZWwgfnJlY3YgZ3JhcGggPVxuICBhY3RvcjBfX2Zvcl9wcm9jMlxuICAgID9yZXNldFxuICAgID9zZXhwX29mX21vZGVsXG4gICAgP3NleHBfb2ZfYWN0aW9uXG4gICAgP2VxdWFsXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+cmVjdlxuICAgICgpXG4gICAgZ3JhcGhcbiAgfD4gc3BsaXQgZ3JhcGhcbjs7XG5cbmxldCBhY3RvcjFfX2Zvcl9wcm9jMlxuICA/c2V4cF9vZl9hY3Rpb25cbiAgP3Jlc2V0XG4gID9zZXhwX29mX21vZGVsXG4gID9lcXVhbFxuICB+ZGVmYXVsdF9tb2RlbFxuICB+cmVjdlxuICBpbnB1dFxuICBncmFwaFxuICA9XG4gIFByb2MuYWN0b3IxID9yZXNldCA/c2V4cF9vZl9tb2RlbCA/c2V4cF9vZl9hY3Rpb24gP2VxdWFsIH5kZWZhdWx0X21vZGVsIH5yZWN2IGlucHV0XG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBhY3RvcjEgP3NleHBfb2ZfYWN0aW9uID9yZXNldCA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgfmRlZmF1bHRfbW9kZWwgfnJlY3YgaW5wdXQgZ3JhcGggPVxuICBhY3RvcjFfX2Zvcl9wcm9jMlxuICAgID9zZXhwX29mX2FjdGlvblxuICAgID9yZXNldFxuICAgID9zZXhwX29mX21vZGVsXG4gICAgP2VxdWFsXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+cmVjdlxuICAgIGlucHV0XG4gICAgZ3JhcGhcbiAgfD4gc3BsaXQgZ3JhcGhcbjs7XG5cbmxldCBkZWxheSB+ZiBncmFwaCA9IFByb2MubGF6eV8gKGxhenkgKGhhbmRsZV9mb3JfbGF6eSBmKSkgfD4gcGVyZm9ybSBncmFwaFxuXG5tb2R1bGUgRXhwZXJ0ID0gc3RydWN0XG4gIGxldCB0aHVuayB+ZiBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MudGh1bmsgZilcblxuICBsZXQgYXNzb2Nfb24gaW9fY21wIG1vZGVsX2NtcCBtYXAgfmdldF9tb2RlbF9rZXkgfmYgZ3JhcGggPVxuICAgIFByb2MuYXNzb2Nfb24gaW9fY21wIG1vZGVsX2NtcCBtYXAgfmdldF9tb2RlbF9rZXkgfmY6KGZ1biBrIHYgLT5cbiAgICAgIGhhbmRsZSBncmFwaCB+ZjooZnVuIGdyYXBoIC0+IGYgayB2IGdyYXBoKSBbQG5vbnRhaWxdKVxuICAgIHw+IHBlcmZvcm0gZ3JhcGhcbiAgOztcblxuICBsZXQgZGVsYXkgPSBkZWxheVxuXG4gIG1vZHVsZSBWYXIgPSBWYXJcbiAgbW9kdWxlIEZvcl9ib25zYWlfaW50ZXJuYWwgPSBGb3JfYm9uc2FpX2ludGVybmFsXG5lbmRcblxubGV0IGZyZWV6ZSA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgdiBncmFwaCA9XG4gIHBlcmZvcm0gZ3JhcGggKFByb2MuZnJlZXplID9zZXhwX29mX21vZGVsID9lcXVhbCB2KVxuOztcblxubGV0IGZpeCB2IH5mIGdyYXBoID1cbiAgbGV0IHJlYyByZWN1cnNlIGkyIGdyYXBoID0gZGVsYXkgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBmIH5yZWN1cnNlIGkyIGdyYXBoKSBpblxuICBmIH5yZWN1cnNlIHYgZ3JhcGhcbjs7XG5cbmxldCBmaXgyIGEgYiB+ZiBncmFwaCA9XG4gIGxldCByZWMgcmVjdXJzZSBhIGIgZ3JhcGggPSBkZWxheSBncmFwaCB+ZjooZnVuIGdyYXBoIC0+IGYgfnJlY3Vyc2UgYSBiIGdyYXBoKSBpblxuICBmIH5yZWN1cnNlIGEgYiBncmFwaFxuOztcblxubGV0IHNjb3BlX21vZGVsIGNvbXBhcmF0b3Igfm9uIH5mb3JfIGdyYXBoID1cbiAgUHJvYy5zY29wZV9tb2RlbCBjb21wYXJhdG9yIH5vbiAoaGFuZGxlIGdyYXBoIH5mOihmdW4gZ3JhcGggLT4gZm9yXyBncmFwaCkpXG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBtb3N0X3JlY2VudF9zb21lID9zZXhwX29mX21vZGVsIH5lcXVhbCB2YWx1ZSB+ZiBncmFwaCA9XG4gIFByb2MubW9zdF9yZWNlbnRfc29tZSA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgdmFsdWUgfmYgfD4gcGVyZm9ybSBncmFwaFxuOztcblxubGV0IG1vc3RfcmVjZW50X3ZhbHVlX3NhdGlzZnlpbmcgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIH5jb25kaXRpb24gZ3JhcGggPVxuICBQcm9jLm1vc3RfcmVjZW50X3ZhbHVlX3NhdGlzZnlpbmcgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIH5jb25kaXRpb25cbiAgfD4gcGVyZm9ybSBncmFwaFxuOztcblxubGV0IHByZXZpb3VzX3ZhbHVlID9zZXhwX29mX21vZGVsIH5lcXVhbCB2YWx1ZSBncmFwaCA9XG4gIFByb2MucHJldmlvdXNfdmFsdWUgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCB3cmFwX19mb3JfcHJvYzIgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCB+ZGVmYXVsdF9tb2RlbCB+YXBwbHlfYWN0aW9uIH5mICgpIGdyYXBoID1cbiAgUHJvY19taW4ud3JhcFxuICAgID9yZXNldFxuICAgID9zZXhwX29mX21vZGVsXG4gICAgP2VxdWFsXG4gICAgfmRlZmF1bHRfbW9kZWxcbiAgICB+YXBwbHlfYWN0aW9uXG4gICAgKClcbiAgICB+ZjooZnVuIG1vZGVsIGluamVjdCAtPlxuICAgIGhhbmRsZSBncmFwaCB+ZjooZnVuIGdyYXBoIC0+IGYgbW9kZWwgaW5qZWN0IGdyYXBoKSBbQG5vbnRhaWxdKVxuICB8PiBwZXJmb3JtIGdyYXBoXG47O1xuXG5sZXQgd3JhcCA/cmVzZXQgP3NleHBfb2ZfbW9kZWwgP2VxdWFsIH5kZWZhdWx0X21vZGVsIH5hcHBseV9hY3Rpb24gfmYgZ3JhcGggPVxuICB3cmFwX19mb3JfcHJvYzIgP3Jlc2V0ID9zZXhwX29mX21vZGVsID9lcXVhbCB+ZGVmYXVsdF9tb2RlbCB+YXBwbHlfYWN0aW9uIH5mICgpIGdyYXBoXG47O1xuXG5sZXQgZW51bSBtIH5tYXRjaF8gfndpdGhfIGdyYXBoID1cbiAgbGV0IHdpdGhfIDogJ2sgLT4gJ2QgQ29tcHV0YXRpb24udCA9XG4gICAgZnVuIGsgLT4gaGFuZGxlIH5mOihmdW4gZ3JhcGggLT4gd2l0aF8gayBncmFwaCkgZ3JhcGggW0Bub250YWlsXVxuICBpblxuICBwZXJmb3JtIGdyYXBoIChQcm9jLmVudW0gbSB+bWF0Y2hfIH53aXRoXylcbjs7XG5cbmxldCB3aXRoX21vZGVsX3Jlc2V0dGVyX19mb3JfcHJvYzIgfmYgZ3JhcGggPVxuICBwZXJmb3JtIGdyYXBoIChQcm9jLndpdGhfbW9kZWxfcmVzZXR0ZXIgKGhhbmRsZSBncmFwaCB+ZjooZnVuIGdyYXBoIC0+IGYgZ3JhcGgpKSlcbjs7XG5cbmxldCB3aXRoX21vZGVsX3Jlc2V0dGVyIH5mIGdyYXBoID0gd2l0aF9tb2RlbF9yZXNldHRlcl9fZm9yX3Byb2MyIH5mIGdyYXBoIHw+IHNwbGl0IGdyYXBoXG5cbmxldCB3aXRoX21vZGVsX3Jlc2V0dGVyJyB+ZiBncmFwaCA9XG4gIFByb2NfbWluLndpdGhfbW9kZWxfcmVzZXR0ZXIgKGZ1biB+cmVzZXQgLT5cbiAgICBoYW5kbGUgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBmIH5yZXNldCBncmFwaCkgW0Bub250YWlsXSlcbiAgfD4gcGVyZm9ybSBncmFwaFxuOztcblxubGV0IHBlZWsgdmFsdWUgZ3JhcGggPSBwZXJmb3JtIGdyYXBoIChQcm9jLnlvaW5rIHZhbHVlKVxubGV0IGlnbm9yZV90IChfIDogdW5pdCB0KSA9ICgpXG5cbm1vZHVsZSBDbG9jayA9IHN0cnVjdFxuICBsZXQgYXBwcm94X25vdyB+dGlja19ldmVyeSBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MuQ2xvY2suYXBwcm94X25vdyB+dGlja19ldmVyeSlcbiAgbGV0IG5vdyBncmFwaCA9IHBlcmZvcm0gZ3JhcGggUHJvYy5DbG9jay5ub3dcblxuICBtb2R1bGUgQmVmb3JlX29yX2FmdGVyID0gc3RydWN0XG4gICAgdHlwZSB0ID0gVWlfaW5jci5CZWZvcmVfb3JfYWZ0ZXIudCA9XG4gICAgICB8IEJlZm9yZVxuICAgICAgfCBBZnRlclxuICAgIFtAQGRlcml2aW5nIHNleHAsIGVxdWFsXVxuICBlbmRcblxuICBsZXQgYXQgdGltZSBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MuQ2xvY2suYXQgdGltZSlcblxuICBsZXQgZXZlcnkgfndoZW5fdG9fc3RhcnRfbmV4dF9lZmZlY3QgP3RyaWdnZXJfb25fYWN0aXZhdGUgc3BhbiBjYWxsYmFjayBncmFwaCA9XG4gICAgUHJvYy5DbG9jay5ldmVyeSB+d2hlbl90b19zdGFydF9uZXh0X2VmZmVjdCA/dHJpZ2dlcl9vbl9hY3RpdmF0ZSBzcGFuIGNhbGxiYWNrXG4gICAgfD4gcGVyZm9ybSBncmFwaFxuICAgIHw+IGlnbm9yZV90XG4gIDs7XG5cbiAgbGV0IGdldF9jdXJyZW50X3RpbWUgZ3JhcGggPSBwZXJmb3JtIGdyYXBoIFByb2MuQ2xvY2suZ2V0X2N1cnJlbnRfdGltZVxuICBsZXQgc2xlZXAgZ3JhcGggPSBwZXJmb3JtIGdyYXBoIFByb2MuQ2xvY2suc2xlZXBcbiAgbGV0IHVudGlsIGdyYXBoID0gcGVyZm9ybSBncmFwaCBQcm9jLkNsb2NrLnVudGlsXG5lbmRcblxubW9kdWxlIEVkZ2UgPSBzdHJ1Y3RcbiAgbGV0IG9uX2NoYW5nZV9fZm9yX3Byb2MyID9zZXhwX29mX21vZGVsIH5lcXVhbCB2YWx1ZSB+Y2FsbGJhY2sgZ3JhcGggPVxuICAgIHBlcmZvcm0gZ3JhcGggKFByb2MuRWRnZS5vbl9jaGFuZ2UgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIH5jYWxsYmFjaylcbiAgOztcblxuICBsZXQgb25fY2hhbmdlID9zZXhwX29mX21vZGVsIH5lcXVhbCB2YWx1ZSB+Y2FsbGJhY2sgZ3JhcGggPVxuICAgIGlnbm9yZV90IChvbl9jaGFuZ2VfX2Zvcl9wcm9jMiA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgdmFsdWUgfmNhbGxiYWNrIGdyYXBoKVxuICA7O1xuXG4gIGxldCBvbl9jaGFuZ2UnX19mb3JfcHJvYzIgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIH5jYWxsYmFjayBncmFwaCA9XG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5FZGdlLm9uX2NoYW5nZScgP3NleHBfb2ZfbW9kZWwgfmVxdWFsIHZhbHVlIH5jYWxsYmFjaylcbiAgOztcblxuICBsZXQgb25fY2hhbmdlJyA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgdmFsdWUgfmNhbGxiYWNrIGdyYXBoID1cbiAgICBpZ25vcmVfdCAob25fY2hhbmdlJ19fZm9yX3Byb2MyID9zZXhwX29mX21vZGVsIH5lcXVhbCB2YWx1ZSB+Y2FsbGJhY2sgZ3JhcGgpXG4gIDs7XG5cbiAgbGV0IGxpZmVjeWNsZV9fZm9yX3Byb2MyID9vbl9hY3RpdmF0ZSA/b25fZGVhY3RpdmF0ZSA/YWZ0ZXJfZGlzcGxheSAoKSBncmFwaCA9XG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5FZGdlLmxpZmVjeWNsZSA/b25fYWN0aXZhdGUgP29uX2RlYWN0aXZhdGUgP2FmdGVyX2Rpc3BsYXkgKCkpXG4gIDs7XG5cbiAgbGV0IGxpZmVjeWNsZSA/b25fYWN0aXZhdGUgP29uX2RlYWN0aXZhdGUgP2FmdGVyX2Rpc3BsYXkgZ3JhcGggPVxuICAgIGlnbm9yZV90IChsaWZlY3ljbGVfX2Zvcl9wcm9jMiA/b25fYWN0aXZhdGUgP29uX2RlYWN0aXZhdGUgP2FmdGVyX2Rpc3BsYXkgKCkgZ3JhcGgpXG4gIDs7XG5cbiAgbGV0IGxpZmVjeWNsZSdfX2Zvcl9wcm9jMiA/b25fYWN0aXZhdGUgP29uX2RlYWN0aXZhdGUgP2FmdGVyX2Rpc3BsYXkgKCkgZ3JhcGggPVxuICAgIHBlcmZvcm0gZ3JhcGggKFByb2MuRWRnZS5saWZlY3ljbGUnID9vbl9hY3RpdmF0ZSA/b25fZGVhY3RpdmF0ZSA/YWZ0ZXJfZGlzcGxheSAoKSlcbiAgOztcblxuICBsZXQgbGlmZWN5Y2xlJyA/b25fYWN0aXZhdGUgP29uX2RlYWN0aXZhdGUgP2FmdGVyX2Rpc3BsYXkgZ3JhcGggPVxuICAgIGlnbm9yZV90IChsaWZlY3ljbGUnX19mb3JfcHJvYzIgP29uX2FjdGl2YXRlID9vbl9kZWFjdGl2YXRlID9hZnRlcl9kaXNwbGF5ICgpIGdyYXBoKVxuICA7O1xuXG4gIGxldCBhZnRlcl9kaXNwbGF5X19mb3JfcHJvYzIgY2FsbGJhY2sgZ3JhcGggPVxuICAgIHBlcmZvcm0gZ3JhcGggKFByb2MuRWRnZS5hZnRlcl9kaXNwbGF5IGNhbGxiYWNrKVxuICA7O1xuXG4gIGxldCBhZnRlcl9kaXNwbGF5IGNhbGxiYWNrIGdyYXBoID0gaWdub3JlX3QgKGFmdGVyX2Rpc3BsYXlfX2Zvcl9wcm9jMiBjYWxsYmFjayBncmFwaClcblxuICBsZXQgYWZ0ZXJfZGlzcGxheSdfX2Zvcl9wcm9jMiBjYWxsYmFjayBncmFwaCA9XG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5FZGdlLmFmdGVyX2Rpc3BsYXknIGNhbGxiYWNrKVxuICA7O1xuXG4gIGxldCBhZnRlcl9kaXNwbGF5JyBjYWxsYmFjayBncmFwaCA9IGlnbm9yZV90IChhZnRlcl9kaXNwbGF5J19fZm9yX3Byb2MyIGNhbGxiYWNrIGdyYXBoKVxuICBsZXQgd2FpdF9hZnRlcl9kaXNwbGF5IGdyYXBoID0gcGVyZm9ybSBncmFwaCBQcm9jLkVkZ2Uud2FpdF9hZnRlcl9kaXNwbGF5XG5cbiAgbW9kdWxlIFBvbGwgPSBzdHJ1Y3RcbiAgICBtb2R1bGUgU3RhcnRpbmcgPSBQcm9jLkVkZ2UuUG9sbC5TdGFydGluZ1xuXG4gICAgbGV0IGVmZmVjdF9vbl9jaGFuZ2VcbiAgICAgID9zZXhwX29mX2lucHV0XG4gICAgICA/c2V4cF9vZl9yZXN1bHRcbiAgICAgIH5lcXVhbF9pbnB1dFxuICAgICAgP2VxdWFsX3Jlc3VsdFxuICAgICAgc3RhcnRpbmdcbiAgICAgIHZhbHVlXG4gICAgICB+ZWZmZWN0XG4gICAgICBncmFwaFxuICAgICAgPVxuICAgICAgUHJvYy5FZGdlLlBvbGwuZWZmZWN0X29uX2NoYW5nZVxuICAgICAgICA/c2V4cF9vZl9pbnB1dFxuICAgICAgICA/c2V4cF9vZl9yZXN1bHRcbiAgICAgICAgfmVxdWFsX2lucHV0XG4gICAgICAgID9lcXVhbF9yZXN1bHRcbiAgICAgICAgc3RhcnRpbmdcbiAgICAgICAgdmFsdWVcbiAgICAgICAgfmVmZmVjdFxuICAgICAgfD4gcGVyZm9ybSBncmFwaFxuICAgIDs7XG5cbiAgICBsZXQgbWFudWFsX3JlZnJlc2hfX2Zvcl9wcm9jMiA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgc3RhcnRpbmcgfmVmZmVjdCBncmFwaCA9XG4gICAgICBwZXJmb3JtIGdyYXBoIChQcm9jLkVkZ2UuUG9sbC5tYW51YWxfcmVmcmVzaCA/c2V4cF9vZl9tb2RlbCA/ZXF1YWwgc3RhcnRpbmcgfmVmZmVjdClcbiAgICA7O1xuXG4gICAgbGV0IG1hbnVhbF9yZWZyZXNoID9zZXhwX29mX21vZGVsID9lcXVhbCBzdGFydGluZyB+ZWZmZWN0IGdyYXBoID1cbiAgICAgIG1hbnVhbF9yZWZyZXNoX19mb3JfcHJvYzIgP3NleHBfb2ZfbW9kZWwgP2VxdWFsIHN0YXJ0aW5nIH5lZmZlY3QgZ3JhcGhcbiAgICAgIHw+IHNwbGl0IGdyYXBoXG4gICAgOztcbiAgZW5kXG5lbmRcblxubW9kdWxlIE1lbW8gPSBzdHJ1Y3RcbiAgdHlwZSAoJ2lucHV0LCAncmVzdWx0KSB0ID0gKCdpbnB1dCwgJ3Jlc3VsdCkgUHJvYy5NZW1vLnRcblxuICBsZXQgY3JlYXRlIGNtcCB+ZiBncmFwaCA9XG4gICAgUHJvYy5NZW1vLmNyZWF0ZSBjbXAgfmY6KGZ1biB2IC0+IGhhbmRsZSBncmFwaCB+ZjooZnVuIGdyYXBoIC0+IGYgdiBncmFwaCkgW0Bub250YWlsXSlcbiAgICB8PiBwZXJmb3JtIGdyYXBoXG4gIDs7XG5cbiAgbGV0IGxvb2t1cCA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgdCBpbnB1dCBncmFwaCA9XG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5NZW1vLmxvb2t1cCA/c2V4cF9vZl9tb2RlbCB+ZXF1YWwgdCBpbnB1dClcbiAgOztcbmVuZFxuXG5tb2R1bGUgRWZmZWN0X3Rocm90dGxpbmcgPSBzdHJ1Y3RcbiAgbW9kdWxlIFBvbGxfcmVzdWx0ID0gUHJvYy5FZmZlY3RfdGhyb3R0bGluZy5Qb2xsX3Jlc3VsdFxuXG4gIGxldCBwb2xsIGNhbGxiYWNrIGdyYXBoID0gcGVyZm9ybSBncmFwaCAoUHJvYy5FZmZlY3RfdGhyb3R0bGluZy5wb2xsIGNhbGxiYWNrKVxuZW5kXG5cbm1vZHVsZSBEeW5hbWljX3Njb3BlID0gc3RydWN0XG4gIHR5cGUgJ2EgYm9uc2FpX3QgPSAnYSB0XG4gIHR5cGUgJ2EgdCA9ICdhIFByb2MuRHluYW1pY19zY29wZS50XG4gIHR5cGUgcmV2ZXJ0ID0geyByZXZlcnQgOiAnYS4gKGdyYXBoIC0+ICdhIGJvbnNhaV90KSAtPiBncmFwaCAtPiAnYSBib25zYWlfdCB9XG5cbiAgbGV0IGNyZWF0ZSA9IFByb2MuRHluYW1pY19zY29wZS5jcmVhdGVcbiAgbGV0IGRlcml2ZWQgPSBQcm9jLkR5bmFtaWNfc2NvcGUuZGVyaXZlZFxuXG4gIGxldCBzZXQgdmFyIHZhbHVlIH5pbnNpZGUgZ3JhcGggPVxuICAgIGxldCBpbnNpZGUgPSBoYW5kbGUgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBpbnNpZGUgZ3JhcGgpIGluXG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5EeW5hbWljX3Njb3BlLnNldCB2YXIgdmFsdWUgfmluc2lkZSlcbiAgOztcblxuICBsZXQgZl93aXRoX3Jlc2V0dGVyIH5mIGdyYXBoIChyZXNldHRlciA6IFByb2MuRHluYW1pY19zY29wZS5yZXZlcnQpID1cbiAgICBsZXQgcmVzZXR0ZXIgOiByZXZlcnQgPVxuICAgICAgeyByZXZlcnQgPVxuICAgICAgICAgIChmdW4gYyBncmFwaCAtPlxuICAgICAgICAgICAgcGVyZm9ybSBncmFwaCAocmVzZXR0ZXIucmV2ZXJ0IChoYW5kbGUgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBjIGdyYXBoKSkpKVxuICAgICAgfVxuICAgIGluXG4gICAgaGFuZGxlIGdyYXBoIH5mOihmdW4gZ3JhcGggLT4gZiByZXNldHRlciBncmFwaClcbiAgOztcblxuICBsZXQgc2V0JyB2YXIgdmFsdWUgfmYgZ3JhcGggPVxuICAgIGxldCBmID0gZl93aXRoX3Jlc2V0dGVyIH5mIGdyYXBoIGluXG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5EeW5hbWljX3Njb3BlLnNldCcgdmFyIHZhbHVlIH5mKVxuICA7O1xuXG4gIGxldCBsb29rdXAgdmFyIGdyYXBoID0gcGVyZm9ybSBncmFwaCAoUHJvYy5EeW5hbWljX3Njb3BlLmxvb2t1cCB2YXIpXG5cbiAgbGV0IG1vZGlmeSB2YXIgfmNoYW5nZSB+ZiBncmFwaCA9XG4gICAgbGV0IGYgPSBmX3dpdGhfcmVzZXR0ZXIgfmYgZ3JhcGggaW5cbiAgICBwZXJmb3JtIGdyYXBoIChQcm9jLkR5bmFtaWNfc2NvcGUubW9kaWZ5IHZhciB+Y2hhbmdlIH5mKVxuICA7O1xuZW5kXG5cbm1vZHVsZSBJbmNyID0gc3RydWN0XG4gIGxldCB2YWx1ZV9jdXRvZmYgdCB+ZXF1YWwgZ3JhcGggPSBwZXJmb3JtIGdyYXBoIChQcm9jLkluY3IudmFsdWVfY3V0b2ZmIHQgfmVxdWFsKVxuICBsZXQgY29tcHV0ZSB0IH5mIGdyYXBoID0gcGVyZm9ybSBncmFwaCAoUHJvYy5JbmNyLmNvbXB1dGUgdCB+ZilcbiAgbGV0IHRvX3ZhbHVlIGluY3IgPSBQcm9jLkluY3IudG9fdmFsdWUgaW5jclxuICBsZXQgd2l0aF9jbG9jayB+ZiBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MuSW5jci53aXRoX2Nsb2NrIGYpXG5lbmRcblxubGV0IGFzc29jIGNvbXBhcmF0b3IgbWFwIH5mIGdyYXBoID1cbiAgKFByb2MuYXNzb2MgY29tcGFyYXRvciBtYXAgfmY6KGZ1biBrIHYgLT5cbiAgICAgaGFuZGxlIGdyYXBoIH5mOihmdW4gZ3JhcGggLT4gZiBrIHYgZ3JhcGgpIFtAbm9udGFpbF0pIFtAbm9udGFpbF0pXG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBhc3NvY19zZXQgY29tcGFyYXRvciBzZXQgfmYgZ3JhcGggPVxuICBQcm9jLmFzc29jX3NldCBjb21wYXJhdG9yIHNldCB+ZjooZnVuIGsgLT5cbiAgICBoYW5kbGUgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBmIGsgZ3JhcGgpIFtAbm9udGFpbF0pXG4gIHw+IHBlcmZvcm0gZ3JhcGhcbjs7XG5cbmxldCBhc3NvY19saXN0IGNvbXBhcmF0b3IgbGlzdCB+Z2V0X2tleSB+ZiBncmFwaCA9XG4gIFByb2MuYXNzb2NfbGlzdCBjb21wYXJhdG9yIGxpc3QgfmdldF9rZXkgfmY6KGZ1biBrIHYgLT5cbiAgICBoYW5kbGUgZ3JhcGggfmY6KGZ1biBncmFwaCAtPiBmIGsgdiBncmFwaCkgW0Bub250YWlsXSlcbiAgfD4gcGVyZm9ybSBncmFwaFxuOztcblxubW9kdWxlIERlYnVnID0gc3RydWN0XG4gIGxldCBvbl9jaGFuZ2UgdiB+ZiBncmFwaCA9XG4gICAgKCogVXNlIFthZnRlcl9kaXNwbGF5XSBiZWNhdXNlIHRoZSBpbmNyZW1lbnRhbCBub2RlIGlzIGFsd2F5cyBjb25zaWRlcmVkIHRvIGJlIGluIHVzZS4qKVxuICAgIGxldCBmID1cbiAgICAgIGFycjEgZ3JhcGggdiB+ZjooZnVuIHYgLT5cbiAgICAgICAgZiB2O1xuICAgICAgICBFZmZlY3QuSWdub3JlKVxuICAgIGluXG4gICAgRWRnZS5hZnRlcl9kaXNwbGF5IGYgZ3JhcGhcbiAgOztcblxuICBsZXQgb25fY2hhbmdlX3ByaW50X3MgdiBzZXhwX29mID0gb25fY2hhbmdlIHYgfmY6KGZ1biBhIC0+IHByaW50X3MgKHNleHBfb2YgYSkpXG4gIGxldCB0b19kb3QgP3ByZV9wcm9jZXNzIGMgPSBUb19kb3QudG9fZG90ID9wcmVfcHJvY2VzcyAodG9wX2xldmVsX2hhbmRsZSBjKVxuICBsZXQgZW5hYmxlX2luY3JlbWVudGFsX2Fubm90YXRpb25zID0gQW5ub3RhdGVfaW5jci5lbmFibGVcbiAgbGV0IGRpc2FibGVfaW5jcmVtZW50YWxfYW5ub3RhdGlvbnMgPSBBbm5vdGF0ZV9pbmNyLmRpc2FibGVcblxuICBsZXQgaW5zdHJ1bWVudF9jb21wdXRhdGlvbiBjIH5zdGFydF90aW1lciB+c3RvcF90aW1lciBncmFwaCA9XG4gICAgSW5zdHJ1bWVudGF0aW9uLmluc3RydW1lbnRfY29tcHV0YXRpb24gKGhhbmRsZSBncmFwaCB+ZjpjKSB+c3RhcnRfdGltZXIgfnN0b3BfdGltZXJcbiAgICB8PiBwZXJmb3JtIGdyYXBoXG4gIDs7XG5lbmRcblxubGV0IHN3aXRjaF9fZm9yX3Byb2MyIH5tYXRjaF8gfmJyYW5jaGVzIH53aXRoXyBncmFwaCA9XG4gIGxldCBhcm1zID1cbiAgICBsZXQgYXJtcyA9IHJlZiBbXSBpblxuICAgIGZvciBpID0gMCB0byBicmFuY2hlcyAtIDEgZG9cbiAgICAgIGxldCBjb21wdXRhdGlvbiA9IGlzb2xhdGVkIGdyYXBoIH5mOihmdW4gKCkgLT4gd2l0aF8gaSBncmFwaCkgaW5cbiAgICAgIGFybXMgOj0gKGksIGNvbXB1dGF0aW9uKSA6OiAhYXJtc1xuICAgIGRvbmU7XG4gICAgIWFybXNcbiAgaW5cbiAgQ29tcHV0YXRpb24uU3dpdGNoIHsgbWF0Y2hfOyBhcm1zID0gTWFwLm9mX2FsaXN0X2V4biAobW9kdWxlIEludCkgYXJtczsgaGVyZSA9IFslaGVyZV0gfVxuICB8PiBwZXJmb3JtIGdyYXBoXG47O1xuXG5tb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICBsZXQgcmV0dXJuID0gcmV0dXJuXG4gIGxldCAoID4+fCApIHQgZiA9IG1hcCB0IH5mXG5cbiAgbW9kdWxlIExldF9zeW50YXggPSBzdHJ1Y3RcbiAgICBsZXQgcmV0dXJuID0gRm4uaWRcbiAgICBsZXQgbWFwID9oZXJlOl8gYSB+ZiA9IG1hcCBhIH5mXG4gICAgbGV0IGFyciA/aGVyZTpfIGEgfmYgPSBtYXAgYSB+ZlxuICAgIGxldCBtYXAyID0gbWFwMlxuICAgIGxldCBtYXAzID0gbWFwM1xuICAgIGxldCBtYXA0ID0gbWFwNFxuICAgIGxldCBtYXA1ID0gbWFwNVxuICAgIGxldCBtYXA2ID0gbWFwNlxuICAgIGxldCBtYXA3ID0gbWFwN1xuICAgIGxldCBib3RoID0gYm90aFxuICAgIGxldCBjdXRvZmYgdiB+ZXF1YWwgPSBWYWx1ZS5jdXRvZmYgdiB+ZXF1YWwgfmFkZGVkX2J5X2xldF9zeW50YXg6dHJ1ZVxuXG4gICAgbGV0IHN3aXRjaCB+aGVyZTpfIH5tYXRjaF8gfmJyYW5jaGVzIH53aXRoXyBncmFwaCA9XG4gICAgICBsZXQgd2l0aF8gaSBfZ3JhcGggPSB3aXRoXyBpIGluXG4gICAgICBzd2l0Y2hfX2Zvcl9wcm9jMiB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gZ3JhcGggW0Bub250YWlsXVxuICAgIDs7XG5cbiAgICBsZXQgc3dpdGNoIH5oZXJlIH5tYXRjaF8gfmJyYW5jaGVzIH53aXRoXyA9XG4gICAgICB3aXRoX2dsb2JhbF9ncmFwaFxuICAgICAgICB+ZjooZnVuIGdyYXBoIC0+IHN3aXRjaCB+aGVyZSB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gZ3JhcGgpXG4gICAgICAgIH5ub19ncmFwaDooZnVuICgpIC0+XG4gICAgICAgICAgcmFpc2Vfc1xuICAgICAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgICAgIFwibWF0Y2glc3ViIGNhbGxlZCBvdXRzaWRlIG9mIHRoZSBjb250ZXh0IG9mIGEgZ3JhcGhcIlxuICAgICAgICAgICAgICAgIChoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24udCldKSBbQG5vbnRhaWxdXG4gICAgOztcblxuICAgIGxldCBzdWIgP2hlcmU6XyBhIH5mID0gZiBhXG4gIGVuZFxuZW5kXG5cbigqIFRoZXNlIGZ1bmN0aW9ucyBhcmUgaGVyZSB0byBwcm92aWRlIHRoZSBiYXNpcyBmb3IgdGhlIFtwcm9jX2xheWVyMi5tbF0gd2hpY2hcbiAgIHdhbnRzIHZlcnNpb25zIG9mIHRoZXNlIGZ1bmN0aW9ucyB0aGF0IGRvbid0IGhhdmUgY2FsbHMgdG8gW3NwbGl0XSBpbiB0aGVtICopXG5tb2R1bGUgRm9yX3Byb2MyID0gc3RydWN0XG4gIGxldCBhcnIxX3dpdGhfbG9jYXRpb24gP2hlcmUgZ3JhcGggYSB+ZiA9XG4gICAgcGVyZm9ybSBncmFwaCAoUHJvYy5yZWFkIChQcm9jLkxldF9zeW50YXguTGV0X3N5bnRheC5tYXAgP2hlcmUgYSB+ZikpXG4gIDs7XG5cbiAgbGV0IHZhbHVlX2N1dG9mZiB2IH5lcXVhbCA9IFZhbHVlLmN1dG9mZiB2IH5lcXVhbCB+YWRkZWRfYnlfbGV0X3N5bnRheDpmYWxzZVxuICBsZXQgY29uY2VhbF92YWx1ZSB2ID0gdlxuICBsZXQgc3RhdGUgPSBzdGF0ZV9fZm9yX3Byb2MyXG4gIGxldCBzdGF0ZV9vcHQgPSBzdGF0ZV9vcHRfX2Zvcl9wcm9jMlxuICBsZXQgdG9nZ2xlID0gdG9nZ2xlX19mb3JfcHJvYzJcblxuICBtb2R1bGUgVG9nZ2xlID0gUHJvYy5Ub2dnbGVcblxuICBsZXQgdG9nZ2xlJyB+ZGVmYXVsdF9tb2RlbCBncmFwaCA9IHBlcmZvcm0gZ3JhcGggKFByb2MudG9nZ2xlJyB+ZGVmYXVsdF9tb2RlbClcbiAgbGV0IHN0YXRlX21hY2hpbmUwID0gc3RhdGVfbWFjaGluZTBfX2Zvcl9wcm9jMlxuICBsZXQgc3RhdGVfbWFjaGluZTEgPSBzdGF0ZV9tYWNoaW5lMV9fZm9yX3Byb2MyXG4gIGxldCBhY3RvcjAgPSBhY3RvcjBfX2Zvcl9wcm9jMlxuICBsZXQgYWN0b3IxID0gYWN0b3IxX19mb3JfcHJvYzJcbiAgbGV0IHdyYXAgPSB3cmFwX19mb3JfcHJvYzJcbiAgbGV0IHdpdGhfbW9kZWxfcmVzZXR0ZXIgZiBncmFwaCA9IHdpdGhfbW9kZWxfcmVzZXR0ZXJfX2Zvcl9wcm9jMiB+ZiBncmFwaFxuICBsZXQgd2l0aF9tb2RlbF9yZXNldHRlcicgZiBncmFwaCA9IHdpdGhfbW9kZWxfcmVzZXR0ZXInIH5mIGdyYXBoXG4gIGxldCBsYXp5XyBmIGdyYXBoID0gZGVsYXkgfmY6KGZ1biBncmFwaCAtPiBMYXp5LmZvcmNlIGYgZ3JhcGgpIGdyYXBoXG5cbiAgbGV0IHN3aXRjaCB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gZ3JhcGggPVxuICAgIHN3aXRjaF9fZm9yX3Byb2MyIH5tYXRjaF8gfmJyYW5jaGVzIH53aXRoXyBncmFwaFxuICA7O1xuXG4gIGxldCBvbl9jaGFuZ2UgPSBFZGdlLm9uX2NoYW5nZV9fZm9yX3Byb2MyXG4gIGxldCBvbl9jaGFuZ2UnID0gRWRnZS5vbl9jaGFuZ2UnX19mb3JfcHJvYzJcbiAgbGV0IGxpZmVjeWNsZSA9IEVkZ2UubGlmZWN5Y2xlX19mb3JfcHJvYzJcbiAgbGV0IGxpZmVjeWNsZScgPSBFZGdlLmxpZmVjeWNsZSdfX2Zvcl9wcm9jMlxuICBsZXQgYWZ0ZXJfZGlzcGxheSA9IEVkZ2UuYWZ0ZXJfZGlzcGxheV9fZm9yX3Byb2MyXG4gIGxldCBhZnRlcl9kaXNwbGF5JyA9IEVkZ2UuYWZ0ZXJfZGlzcGxheSdfX2Zvcl9wcm9jMlxuICBsZXQgbWFudWFsX3JlZnJlc2ggPSBFZGdlLlBvbGwubWFudWFsX3JlZnJlc2hfX2Zvcl9wcm9jMlxuXG4gIGxldCBkZWJ1Z19vbl9jaGFuZ2UgdiB+ZiBncmFwaCA9XG4gICAgbGV0IGYgPVxuICAgICAgYXJyMSBncmFwaCB2IH5mOihmdW4gdiAtPlxuICAgICAgICBmIHY7XG4gICAgICAgIEVmZmVjdC5JZ25vcmUpXG4gICAgaW5cbiAgICBFZGdlLmFmdGVyX2Rpc3BsYXlfX2Zvcl9wcm9jMiBmIGdyYXBoXG4gIDs7XG5cbiAgbGV0IGRlYnVnX29uX2NoYW5nZV9wcmludF9zIHYgc2V4cF9vZiA9XG4gICAgZGVidWdfb25fY2hhbmdlIHYgfmY6KGZ1biBhIC0+IHByaW50X3MgKHNleHBfb2YgYSkpXG4gIDs7XG5cbiAgbGV0IG5hcnJvdyBzdGF0ZV9hbmRfaW5qZWN0IH5nZXQgfnNldCBncmFwaCA9XG4gICAgbGV0IG9wZW4gTGV0X3N5bnRheCBpblxuICAgIGxldCBzdGF0ZSwgaW5qZWN0ID0gc3RhdGVfYW5kX2luamVjdCB8PiBzcGxpdCBncmFwaCBpblxuICAgIGxldCBpbmplY3QgPVxuICAgICAgbGV0IHBlZWtfc3RhdGUgPSBwZWVrIHN0YXRlIGdyYXBoIGluXG4gICAgICBsZXQlbWFwIHBlZWtfc3RhdGUgPSBwZWVrX3N0YXRlXG4gICAgICBhbmQgaW5qZWN0ID0gaW5qZWN0IGluXG4gICAgICBmdW4gYSAtPlxuICAgICAgICBtYXRjaCViaW5kLkVmZmVjdCBwZWVrX3N0YXRlIHdpdGhcbiAgICAgICAgfCBJbmFjdGl2ZSAtPiBFZmZlY3QuSWdub3JlXG4gICAgICAgIHwgQWN0aXZlIHN0YXRlIC0+IGluamVjdCAoc2V0IHN0YXRlIGEpXG4gICAgaW5cbiAgICBsZXQgc3RhdGUgPVxuICAgICAgbGV0JW1hcCBzdGF0ZSA9IHN0YXRlIGluXG4gICAgICBnZXQgc3RhdGVcbiAgICBpblxuICAgIGxldCVtYXAgc3RhdGUgPSBzdGF0ZVxuICAgIGFuZCBpbmplY3QgPSBpbmplY3QgaW5cbiAgICBzdGF0ZSwgaW5qZWN0XG4gIDs7XG5cbiAgbGV0IG5hcnJvd192aWFfZmllbGQgc3RhdGVfYW5kX2luamVjdCBmaWVsZCA9XG4gICAgbmFycm93IHN0YXRlX2FuZF9pbmplY3QgfmdldDooRmllbGQuZ2V0IGZpZWxkKSB+c2V0OihGaWVsZC5mc2V0IGZpZWxkKVxuICA7O1xuZW5kXG5cbm1vZHVsZSBDb252ID0gc3RydWN0XG4gIGxldCBoYW5kbGUgPSBoYW5kbGVcbiAgbGV0IHRvcF9sZXZlbF9oYW5kbGUgPSB0b3BfbGV2ZWxfaGFuZGxlXG4gIGxldCBwZXJmb3JtID0gcGVyZm9ybVxuICBsZXQgcmV2ZWFsX3ZhbHVlID0gRm4uaWRcbiAgbGV0IGNvbmNlYWxfdmFsdWUgPSBGbi5pZFxuICBsZXQgaXNvbGF0ZWQgPSBpc29sYXRlZFxuZW5kXG5cbm1vZHVsZSBNYXAgPSBNYXAwLk1ha2UgKHN0cnVjdFxuICBtb2R1bGUgVmFsdWUgPSBzdHJ1Y3RcbiAgICB0eXBlIG5vbnJlYyAnYSB0ID0gJ2EgdFxuXG4gICAgbGV0IGJvdGggPSBib3RoXG4gIGVuZFxuXG4gIG1vZHVsZSBDb21wdXRhdGlvbiA9IHN0cnVjdFxuICAgIHR5cGUgbm9ucmVjICdhIHQgPSBncmFwaCAtPiAnYSB0XG4gIGVuZFxuXG4gIG1vZHVsZSBJbmNyID0gc3RydWN0XG4gICAgbGV0IGNvbXB1dGUgPSBJbmNyLmNvbXB1dGVcbiAgZW5kXG5lbmQpXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxuKCogPiBXaGF0IGlzIFtwcm9jX2xheWVyMl0gYW5kIHdoeSBpcyBpdCBuZWVkZWQ/XG4gICBUaGUgdG93ZXIgb2YgYm9uc2FpIGltcGxlbWVudGF0aW9ucyBhcmUgYXMgZm9sbG93c1xuICAgMS4gcHJvY19taW4gICAgOiB0aGUgYmFyZSBtaW5pbXVtIGJvbnNhaSBjb21iaW5hdG9yc1xuICAgMi4gcHJvYyAgICAgICAgOiBpbmNsdWRlcyBib25zYWkgY29tYmluYXRvcnMgdGhhdCBjYW4gYmUgYnVpbHQgb24gdG9wIG9mIHByb2NfbWluXG4gICAzLiBjb250ICAgICAgICA6IGltcGxlbWVudHMgdGhlIGxvY2FsLWdyYXBoIEFQSSBvbiB0b3Agb2YgcHJvY1xuICAgNC4gcHJvY19sYXllcjIgOiByZS1pbXBsZW1lbnRzIHRoZSBwcm9jIEFQSSBvbiB0b3Agb2YgY29udFxuXG4gICBUaGUgcmVhc29uIHRoYXQgdGhlIDR0aCBsYXllciBpcyBuZWNlc3NhcnkgaXMgc28gdGhhdCBpdHMgYENvbXB1dGF0aW9uLnRgIGNhbiBiZSBkZWZpbmVkXG4gICB0byBiZSBleGFjdGx5IGBsb2NhbF8gQ29udC5ncmFwaCAtPiAnYSBDb250LnRgIGFuZCBpdHMgYFZhbHVlLnRgIGNhbiBiZSBkZWZpbmVkIHRvIGJlXG4gICBleGFjdGx5IGAnYSBDb250LnRgLiAqKVxuXG4oKiBUaGVzZSBhcmVuJ3QgcHVsbGVkIGZyb20gYENvbnRgIGJlY2F1c2UgdGhleSBhcmUgbm8gbG9uZ2VyIHJlY29tbWVuZGVkLFxuICAgYW5kIHRoZXJlZm9yZSBub3QgaW5jbHVkZWQgaW4gdGhlIG5ldyBBUEkuICopXG5tb2R1bGUgdHlwZSBNb2RlbCA9IE1vZHVsZV90eXBlcy5Nb2RlbFxubW9kdWxlIHR5cGUgQWN0aW9uID0gTW9kdWxlX3R5cGVzLkFjdGlvblxuXG5tb2R1bGUgQXBwbHlfYWN0aW9uX2NvbnRleHQgPSBQcm9jLkFwcGx5X2FjdGlvbl9jb250ZXh0XG5cbm1vZHVsZSBWYWx1ZSA9IHN0cnVjdFxuICB0eXBlICdhIHQgPSAnYSBDb250LnRcblxuICBsZXQgcmV0dXJuIGEgPSBWYWx1ZS5yZXR1cm4gYSB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuXG4gICgqIHdlIGRlcGVuZCBvbiBQcm9jJ3MgW21hcF0gZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4ga2VlcCBwYXNzaW5nXG4gICAgIHRoZSBbaGVyZV0gcGFyYW1ldGVyIGZvciB0aGUgbGV0JWFyciBhbmQgbGV0JXN1YiBwcHhlcy4gKilcbiAgbGV0IG1hcCA/aGVyZSB2IH5mID1cbiAgICBQcm9jLkxldF9zeW50YXguTGV0X3N5bnRheC5tYXAgP2hlcmUgKENvbnQuQ29udi5yZXZlYWxfdmFsdWUgdikgfmZcbiAgICB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICA7O1xuXG4gIGxldCB0cmFuc3Bvc2Vfb3B0IG9wdCA9XG4gICAgT3B0aW9uLnZhbHVlX21hcCBvcHQgfmRlZmF1bHQ6KHJldHVybiBOb25lKSB+ZjoobWFwIH5mOk9wdGlvbi5zb21lKVxuICA7O1xuXG4gIGxldCBjdXRvZmYgYSB+ZXF1YWwgPVxuICAgIENvbnQuQ29udi5yZXZlYWxfdmFsdWUgYVxuICAgIHw+IFZhbHVlLmN1dG9mZiB+YWRkZWRfYnlfbGV0X3N5bnRheDpmYWxzZSB+ZXF1YWxcbiAgICB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICA7O1xuXG4gIG1vZHVsZSBNYXBuID0gc3RydWN0XG4gICAgbGV0IG1hcDIgPSBDb250Lm1hcDJcbiAgICBsZXQgbWFwMyA9IENvbnQubWFwM1xuICAgIGxldCBtYXA0ID0gQ29udC5tYXA0XG4gICAgbGV0IG1hcDUgPSBDb250Lm1hcDVcbiAgICBsZXQgbWFwNiA9IENvbnQubWFwNlxuICAgIGxldCBtYXA3ID0gQ29udC5tYXA3XG4gIGVuZFxuXG4gIGluY2x1ZGUgTWFwblxuXG4gIGluY2x1ZGUgQXBwbGljYXRpdmUuTWFrZV91c2luZ19tYXAyIChzdHJ1Y3RcbiAgICB0eXBlIG5vbnJlYyAnYSB0ID0gJ2EgdFxuXG4gICAgbGV0IHJldHVybiA9IHJldHVyblxuICAgIGxldCBtYXAyID0gbWFwMlxuICAgIGxldCBtYXAgYSB+ZiA9IG1hcCBhIH5mXG4gICAgbGV0IG1hcCA9IGBDdXN0b20gbWFwXG4gIGVuZClcblxuICBsZXQgYm90aCBhIGIgPVxuICAgIFZhbHVlLmJvdGggKENvbnQuQ29udi5yZXZlYWxfdmFsdWUgYSkgKENvbnQuQ29udi5yZXZlYWxfdmFsdWUgYilcbiAgICB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICA7O1xuXG4gIG1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0ICggPj58ICkgYSBmID0gVmFsdWUubWFwIChDb250LkNvbnYucmV2ZWFsX3ZhbHVlIGEpIH5mIHw+IENvbnQuQ29udi5jb25jZWFsX3ZhbHVlXG5cbiAgICBsZXQgKCA8Kj4gKSBmIGEgPVxuICAgICAgVmFsdWUubWFwMiAoQ29udC5Db252LnJldmVhbF92YWx1ZSBhKSAoQ29udC5Db252LnJldmVhbF92YWx1ZSBmKSB+ZjooZnVuIGEgZiAtPiBmIGEpXG4gICAgICB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICAgIDs7XG5cbiAgICBsZXQgKCA8JD4gKSBmIGEgPVxuICAgICAgQ29udC5Db252LnJldmVhbF92YWx1ZSBhIHw+IFZhbHVlLm1hcCB+ZjooZnVuIGEgLT4gZiBhKSB8PiBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICAgIDs7XG5cbiAgICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgICAgbGV0IG1hcCA/aGVyZSB2IH5mID1cbiAgICAgICAgUHJvYy5MZXRfc3ludGF4LkxldF9zeW50YXgubWFwID9oZXJlIChDb250LkNvbnYucmV2ZWFsX3ZhbHVlIHYpIH5mXG4gICAgICAgIHw+IENvbnQuQ29udi5jb25jZWFsX3ZhbHVlXG4gICAgICA7O1xuXG4gICAgICBsZXQgY3V0b2ZmIGEgfmVxdWFsID1cbiAgICAgICAgQ29udC5Db252LnJldmVhbF92YWx1ZSBhXG4gICAgICAgIHw+IFByb2MuTGV0X3N5bnRheC5MZXRfc3ludGF4LmN1dG9mZiB+ZXF1YWxcbiAgICAgICAgfD4gQ29udC5Db252LmNvbmNlYWxfdmFsdWVcbiAgICAgIDs7XG5cbiAgICAgIGxldCBib3RoIGEgYiA9XG4gICAgICAgIFZhbHVlLmJvdGggKENvbnQuQ29udi5yZXZlYWxfdmFsdWUgYSkgKENvbnQuQ29udi5yZXZlYWxfdmFsdWUgYilcbiAgICAgICAgfD4gQ29udC5Db252LmNvbmNlYWxfdmFsdWVcbiAgICAgIDs7XG5cbiAgICAgIGluY2x1ZGUgTWFwblxuICAgIGVuZFxuICBlbmRcbmVuZFxuXG5tb2R1bGUgVGhpc19sZXRfc3ludGF4ID0gc3RydWN0XG4gIGxldCBjb21wX3JldHVybiB2IGdyYXBoID0gQ29udC5Db252LnBlcmZvcm0gZ3JhcGggKFByb2MucmVhZCAoQ29udC5Db252LnJldmVhbF92YWx1ZSB2KSlcblxuICBpbmNsdWRlIFZhbHVlLkxldF9zeW50YXhcblxuICBsZXQgcmV0dXJuID0gY29tcF9yZXR1cm5cblxuICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgIGluY2x1ZGUgVmFsdWUuTGV0X3N5bnRheC5MZXRfc3ludGF4XG5cbiAgICBsZXQgc3ViY29tcHV0YXRpb24gP2hlcmUgYSBncmFwaCA9XG4gICAgICBDb250LkNvbnYuaGFuZGxlIGdyYXBoIH5mOihmdW4gZ3JhcGggLT4gYSBncmFwaCkgfD4gQ29udC5Db252LnBlcmZvcm0gP2hlcmUgZ3JhcGhcbiAgICA7O1xuXG4gICAgbGV0IHN1YiA/aGVyZSBhIH5mIGdyYXBoID0gZiAoc3ViY29tcHV0YXRpb24gP2hlcmUgYSBncmFwaCkgZ3JhcGhcbiAgICBsZXQgcmV0dXJuID0gY29tcF9yZXR1cm5cbiAgICBsZXQgYXJyID9oZXJlIHYgfmYgZ3JhcGggPSBDb250LkZvcl9wcm9jMi5hcnIxX3dpdGhfbG9jYXRpb24gP2hlcmUgZ3JhcGggdiB+ZlxuXG4gICAgbGV0IHN3aXRjaCB+aGVyZTpfIH5tYXRjaF8gfmJyYW5jaGVzIH53aXRoXyBncmFwaCA9XG4gICAgICBDb250LkZvcl9wcm9jMi5zd2l0Y2ggfm1hdGNoXyB+YnJhbmNoZXMgfndpdGhfIGdyYXBoXG4gICAgOztcbiAgZW5kXG5lbmRcblxubW9kdWxlIENvbXB1dGF0aW9uID0gc3RydWN0XG4gIHR5cGUgJ2EgdCA9IENvbnQuZ3JhcGggLT4gJ2EgQ29udC50XG5cbiAgaW5jbHVkZSBBcHBsaWNhdGl2ZS5NYWtlX3VzaW5nX21hcDIgKHN0cnVjdFxuICAgIHR5cGUgbm9ucmVjICdhIHQgPSAnYSB0XG5cbiAgICBsZXQgcmV0dXJuIChhIDogJ2EpIDogJ2EgdCA9IGZ1biBfZ3JhcGggLT4gVmFsdWUucmV0dXJuIGFcblxuICAgIGxldCBtYXAyIGEgYiB+ZiBncmFwaCA9XG4gICAgICBsZXQgYSA9IGEgZ3JhcGhcbiAgICAgIGFuZCBiID0gYiBncmFwaCBpblxuICAgICAgQ29udC5hcnIyIGdyYXBoIGEgYiB+ZlxuICAgIDs7XG5cbiAgICBsZXQgbWFwIGEgfmYgZ3JhcGggPSBDb250LmFycjEgZ3JhcGggKGEgZ3JhcGgpIH5mXG4gICAgbGV0IG1hcCA9IGBDdXN0b20gbWFwXG4gIGVuZClcblxuICBsZXQgcmVhZCA9IFRoaXNfbGV0X3N5bnRheC5yZXR1cm5cbiAgbGV0IGNvbXB1dGF0aW9uX3JldHVybiA9IHJldHVyblxuXG4gIG9wZW4gVGhpc19sZXRfc3ludGF4XG5cbiAgbGV0IHJldHVybiA9IGNvbXB1dGF0aW9uX3JldHVyblxuXG4gIG1vZHVsZSBNYXBuID0gc3RydWN0XG4gICAgbGV0IG1hcDIgPSBtYXAyXG5cbiAgICBsZXQgbWFwMyB0MSB0MiB0MyB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICByZWFkIChWYWx1ZS5MZXRfc3ludGF4LkxldF9zeW50YXgubWFwMyB0MSB0MiB0MyB+ZilcbiAgICA7O1xuXG4gICAgbGV0IG1hcDQgdDEgdDIgdDMgdDQgfmYgPVxuICAgICAgbGV0JXN1YiB0MSA9IHQxIGluXG4gICAgICBsZXQlc3ViIHQyID0gdDIgaW5cbiAgICAgIGxldCVzdWIgdDMgPSB0MyBpblxuICAgICAgbGV0JXN1YiB0NCA9IHQ0IGluXG4gICAgICByZWFkIChWYWx1ZS5MZXRfc3ludGF4LkxldF9zeW50YXgubWFwNCB0MSB0MiB0MyB0NCB+ZilcbiAgICA7O1xuXG4gICAgbGV0IG1hcDUgdDEgdDIgdDMgdDQgdDUgfmYgPVxuICAgICAgbGV0JXN1YiB0MSA9IHQxIGluXG4gICAgICBsZXQlc3ViIHQyID0gdDIgaW5cbiAgICAgIGxldCVzdWIgdDMgPSB0MyBpblxuICAgICAgbGV0JXN1YiB0NCA9IHQ0IGluXG4gICAgICBsZXQlc3ViIHQ1ID0gdDUgaW5cbiAgICAgIHJlYWQgKFZhbHVlLkxldF9zeW50YXguTGV0X3N5bnRheC5tYXA1IHQxIHQyIHQzIHQ0IHQ1IH5mKVxuICAgIDs7XG5cbiAgICBsZXQgbWFwNiB0MSB0MiB0MyB0NCB0NSB0NiB+ZiA9XG4gICAgICBsZXQlc3ViIHQxID0gdDEgaW5cbiAgICAgIGxldCVzdWIgdDIgPSB0MiBpblxuICAgICAgbGV0JXN1YiB0MyA9IHQzIGluXG4gICAgICBsZXQlc3ViIHQ0ID0gdDQgaW5cbiAgICAgIGxldCVzdWIgdDUgPSB0NSBpblxuICAgICAgbGV0JXN1YiB0NiA9IHQ2IGluXG4gICAgICByZWFkIChWYWx1ZS5MZXRfc3ludGF4LkxldF9zeW50YXgubWFwNiB0MSB0MiB0MyB0NCB0NSB0NiB+ZilcbiAgICA7O1xuXG4gICAgbGV0IG1hcDcgdDEgdDIgdDMgdDQgdDUgdDYgdDcgfmYgPVxuICAgICAgbGV0JXN1YiB0MSA9IHQxIGluXG4gICAgICBsZXQlc3ViIHQyID0gdDIgaW5cbiAgICAgIGxldCVzdWIgdDMgPSB0MyBpblxuICAgICAgbGV0JXN1YiB0NCA9IHQ0IGluXG4gICAgICBsZXQlc3ViIHQ1ID0gdDUgaW5cbiAgICAgIGxldCVzdWIgdDYgPSB0NiBpblxuICAgICAgbGV0JXN1YiB0NyA9IHQ3IGluXG4gICAgICByZWFkIChWYWx1ZS5MZXRfc3ludGF4LkxldF9zeW50YXgubWFwNyB0MSB0MiB0MyB0NCB0NSB0NiB0NyB+ZilcbiAgICA7O1xuICBlbmRcblxuICBpbmNsdWRlIE1hcG5cblxuICBsZXQgcmVjIGFsbCA9IGZ1bmN0aW9uXG4gICAgfCBbXSAtPiByZXR1cm4gW11cbiAgICB8IFsgdDEgXSAtPiBtYXAgdDEgfmY6KGZ1biBhMSAtPiBbIGExIF0pXG4gICAgfCBbIHQxOyB0MiBdIC0+IG1hcDIgdDEgdDIgfmY6KGZ1biBhMSBhMiAtPiBbIGExOyBhMiBdKVxuICAgIHwgWyB0MTsgdDI7IHQzIF0gLT4gbWFwMyB0MSB0MiB0MyB+ZjooZnVuIGExIGEyIGEzIC0+IFsgYTE7IGEyOyBhMyBdKVxuICAgIHwgWyB0MTsgdDI7IHQzOyB0NCBdIC0+IG1hcDQgdDEgdDIgdDMgdDQgfmY6KGZ1biBhMSBhMiBhMyBhNCAtPiBbIGExOyBhMjsgYTM7IGE0IF0pXG4gICAgfCBbIHQxOyB0MjsgdDM7IHQ0OyB0NSBdIC0+XG4gICAgICBtYXA1IHQxIHQyIHQzIHQ0IHQ1IH5mOihmdW4gYTEgYTIgYTMgYTQgYTUgLT4gWyBhMTsgYTI7IGEzOyBhNDsgYTUgXSlcbiAgICB8IFsgdDE7IHQyOyB0MzsgdDQ7IHQ1OyB0NiBdIC0+XG4gICAgICBtYXA2IHQxIHQyIHQzIHQ0IHQ1IHQ2IH5mOihmdW4gYTEgYTIgYTMgYTQgYTUgYTYgLT4gWyBhMTsgYTI7IGEzOyBhNDsgYTU7IGE2IF0pXG4gICAgfCBbIHQxOyB0MjsgdDM7IHQ0OyB0NTsgdDY7IHQ3IF0gLT5cbiAgICAgIG1hcDcgdDEgdDIgdDMgdDQgdDUgdDYgdDcgfmY6KGZ1biBhMSBhMiBhMyBhNCBhNSBhNiBhNyAtPlxuICAgICAgICBbIGExOyBhMjsgYTM7IGE0OyBhNTsgYTY7IGE3IF0pXG4gICAgfCB0MSA6OiB0MiA6OiB0MyA6OiB0NCA6OiB0NSA6OiB0NiA6OiB0NyA6OiByZXN0IC0+XG4gICAgICBsZXQgbGVmdCA9XG4gICAgICAgIG1hcDcgdDEgdDIgdDMgdDQgdDUgdDYgdDcgfmY6KGZ1biBhMSBhMiBhMyBhNCBhNSBhNiBhNyAtPlxuICAgICAgICAgIFsgYTE7IGEyOyBhMzsgYTQ7IGE1OyBhNjsgYTcgXSlcbiAgICAgIGluXG4gICAgICBsZXQgcmlnaHQgPSBhbGwgcmVzdCBpblxuICAgICAgbWFwMiBsZWZ0IHJpZ2h0IH5mOihmdW4gbGVmdCByaWdodCAtPiBsZWZ0IEAgcmlnaHQpXG4gIDs7XG5cbiAgbGV0IGFsbCB4cyA9IExldF9zeW50YXguc3ViY29tcHV0YXRpb24gKGFsbCB4cylcblxuICBsZXQgcmVkdWNlX2JhbGFuY2VkIHhzIH5mID1cbiAgICBMaXN0LnJlZHVjZV9iYWxhbmNlZCB4cyB+ZjooZnVuIGEgYiAtPlxuICAgICAgbGV0JXN1YiBhID0gYSBpblxuICAgICAgbGV0JXN1YiBiID0gYiBpblxuICAgICAgZiBhIGIpXG4gIDs7XG5cbiAgbGV0IHJlZHVjZV9iYWxhbmNlZCB4cyB+ZiA9XG4gICAgbWF0Y2ggeHMgd2l0aFxuICAgIHwgW10gLT4gTm9uZVxuICAgIHwgXyAtPiBTb21lIChMZXRfc3ludGF4LnN1YmNvbXB1dGF0aW9uIChPcHRpb24udmFsdWVfZXhuIChyZWR1Y2VfYmFsYW5jZWQgeHMgfmYpKSlcbiAgOztcblxuICBsZXQgZm9sZF9yaWdodCB4cyB+ZiB+aW5pdCA9XG4gICAgTGlzdC5mb2xkX3JpZ2h0IHhzIH5pbml0OihyZWFkIGluaXQpIH5mOihmdW4gYSBiIC0+XG4gICAgICBsZXQlc3ViIGEgPSBhIGluXG4gICAgICBsZXQlc3ViIGIgPSBiIGluXG4gICAgICBmIGEgYilcbiAgOztcblxuICBsZXQgZm9sZF9yaWdodCB4cyB+ZiB+aW5pdCA9IExldF9zeW50YXguc3ViY29tcHV0YXRpb24gKGZvbGRfcmlnaHQgeHMgfmYgfmluaXQpXG4gIGxldCBhbGxfdW5pdCB4cyA9IGFsbCB4cyB8PiBtYXAgfmY6KGZ1biAoXyA6IHVuaXQgbGlzdCkgLT4gKCkpXG4gIGxldCBhbGxfdW5pdCB4cyA9IExldF9zeW50YXguc3ViY29tcHV0YXRpb24gKGFsbF91bml0IHhzKVxuXG4gIGxldCBhbGxfbWFwIG1hcF9vZl9jb21wdXRhdGlvbnMgPVxuICAgIG1hcF9vZl9jb21wdXRhdGlvbnNcbiAgICB8PiBNYXAudG9fYWxpc3RcbiAgICB8PiBMaXN0Lm1hcCB+ZjooZnVuIChrZXksIGRhdGEpIC0+IG1hcCBkYXRhIH5mOihUdXBsZTIuY3JlYXRlIGtleSkpXG4gICAgfD4gYWxsXG4gICAgfD4gbWFwIH5mOihNYXAub2ZfYWxpc3RfZXhuIChNYXAuY29tcGFyYXRvcl9zIG1hcF9vZl9jb21wdXRhdGlvbnMpKVxuICA7O1xuXG4gIGxldCBhbGxfbWFwIG1hcF9vZl9jb21wdXRhdGlvbnMgPVxuICAgIExldF9zeW50YXguc3ViY29tcHV0YXRpb24gKGFsbF9tYXAgbWFwX29mX2NvbXB1dGF0aW9ucylcbiAgOztcblxuICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgIGxldCByZXR1cm4gPSByZXR1cm5cblxuICAgIGluY2x1ZGUgQXBwbGljYXRpdmVfaW5maXhcblxuICAgIG1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gICAgICBsZXQgcmV0dXJuID0gcmV0dXJuXG4gICAgICBsZXQgbWFwID0gbWFwXG4gICAgICBsZXQgYm90aCA9IGJvdGhcblxuICAgICAgaW5jbHVkZSBNYXBuXG4gICAgZW5kXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBWYXIgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBQcm9jLlZhclxuXG4gIGxldCB2YWx1ZSB2YXIgPSBDb250LkZvcl9wcm9jMi5jb25jZWFsX3ZhbHVlIChQcm9jLlZhci52YWx1ZSB2YXIpXG5lbmRcblxubW9kdWxlIEVmZmVjdCA9IEVmZmVjdFxubW9kdWxlIFByaXZhdGVfdmFsdWUgPSBWYWx1ZVxubW9kdWxlIFByaXZhdGVfY29tcHV0YXRpb24gPSBDb21wdXRhdGlvblxuXG5tb2R1bGUgRm9yX29wZW4gPSBzdHJ1Y3RcbiAgbW9kdWxlIENvbXB1dGF0aW9uID0gQ29tcHV0YXRpb25cbiAgbW9kdWxlIEVmZmVjdCA9IEVmZmVjdFxuICBtb2R1bGUgVmFsdWUgPSBWYWx1ZVxuZW5kXG5cbmluY2x1ZGUgKFxuICBDb250IDpcbiAgICBtb2R1bGUgdHlwZSBvZiBDb250XG4gICAgICB3aXRoIG1vZHVsZSBMZXRfc3ludGF4IDo9IENvbnQuTGV0X3N5bnRheFxuICAgICAgd2l0aCBtb2R1bGUgQXBwbHlfYWN0aW9uX2NvbnRleHQgOj0gQXBwbHlfYWN0aW9uX2NvbnRleHRcbiAgICAgIHdpdGggbW9kdWxlIEVmZmVjdCA6PSBFZmZlY3QpXG5cbmluY2x1ZGUgQ29udC5Gb3JfcHJvYzJcbm9wZW4gQ29udC5MZXRfc3ludGF4XG5cbm9wZW4gc3RydWN0XG4gIG1vZHVsZSBNYXAgPSBDb3JlLk1hcFxuZW5kXG5cbmxldCByZWFkIHYgX2dyYXBoID0gdlxubGV0IGNvbnN0IGEgX2dyYXBoID0gcmV0dXJuIGFcbmxldCBwdXJlIGYgaSBfZ3JhcGggPSBtYXAgaSB+ZlxubGV0IHNjb3BlX21vZGVsIGNtcCB+b24gZm9yXyA9IHNjb3BlX21vZGVsIGNtcCB+b24gfmZvcl9cbmxldCB5b2luayA9IHBlZWtcblxubW9kdWxlIENsb2NrID0gc3RydWN0XG4gIGluY2x1ZGUgQ2xvY2tcblxuICBsZXQgZXZlcnkgfndoZW5fdG9fc3RhcnRfbmV4dF9lZmZlY3QgP3RyaWdnZXJfb25fYWN0aXZhdGUgdGltZV9zcGFuIGNhbGxiYWNrIGdyYXBoID1cbiAgICBldmVyeSB+d2hlbl90b19zdGFydF9uZXh0X2VmZmVjdCA/dHJpZ2dlcl9vbl9hY3RpdmF0ZSB0aW1lX3NwYW4gY2FsbGJhY2sgZ3JhcGg7XG4gICAgcmV0dXJuICgpXG4gIDs7XG5lbmRcblxubW9kdWxlIEluY3IgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBJbmNyXG5cbiAgbGV0IHdpdGhfY2xvY2sgZiA9IHdpdGhfY2xvY2sgfmZcbmVuZFxuXG5tb2R1bGUgRWRnZSA9IHN0cnVjdFxuICBpbmNsdWRlIEVkZ2VcblxuICBsZXQgb25fY2hhbmdlID0gRm9yX3Byb2MyLm9uX2NoYW5nZVxuICBsZXQgb25fY2hhbmdlJyA9IEZvcl9wcm9jMi5vbl9jaGFuZ2UnXG4gIGxldCBsaWZlY3ljbGUgPSBGb3JfcHJvYzIubGlmZWN5Y2xlXG4gIGxldCBsaWZlY3ljbGUnID0gRm9yX3Byb2MyLmxpZmVjeWNsZSdcbiAgbGV0IGFmdGVyX2Rpc3BsYXkgPSBGb3JfcHJvYzIuYWZ0ZXJfZGlzcGxheVxuICBsZXQgYWZ0ZXJfZGlzcGxheScgPSBGb3JfcHJvYzIuYWZ0ZXJfZGlzcGxheSdcblxuICBtb2R1bGUgUG9sbCA9IHN0cnVjdFxuICAgIGluY2x1ZGUgUG9sbFxuXG4gICAgbGV0IG1hbnVhbF9yZWZyZXNoID0gRm9yX3Byb2MyLm1hbnVhbF9yZWZyZXNoXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBEZWJ1ZyA9IHN0cnVjdFxuICBpbmNsdWRlIERlYnVnXG5cbiAgbGV0IG9uX2NoYW5nZSA9IGRlYnVnX29uX2NoYW5nZVxuICBsZXQgb25fY2hhbmdlX3ByaW50X3MgPSBkZWJ1Z19vbl9jaGFuZ2VfcHJpbnRfc1xuZW5kXG5cbm1vZHVsZSBFeHBlcnQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBFeHBlcnRcblxuICBsZXQgdGh1bmsgZiBncmFwaCA9IHRodW5rIH5mIGdyYXBoXG5lbmRcblxubGV0IG9mX21vZHVsZTFcbiAgKHR5cGUgaSBtIGEgcilcbiAgP3NleHBfb2ZfbW9kZWxcbiAgKGNvbXBvbmVudCA6IChpLCBtLCBhLCByKSBjb21wb25lbnRfcylcbiAgP2VxdWFsXG4gIH5kZWZhdWx0X21vZGVsXG4gIGlucHV0XG4gIGdyYXBoXG4gID1cbiAgbGV0IChtb2R1bGUgTSkgPSBjb21wb25lbnQgaW5cbiAgbGV0IG1vZGVsLCBpbmplY3QgPVxuICAgIENvbnQuc3RhdGVfbWFjaGluZTFcbiAgICAgIH5zZXhwX29mX2FjdGlvbjpNLkFjdGlvbi5zZXhwX29mX3RcbiAgICAgID9zZXhwX29mX21vZGVsXG4gICAgICA/ZXF1YWxcbiAgICAgIH5kZWZhdWx0X21vZGVsXG4gICAgICB+YXBwbHlfYWN0aW9uOihmdW4gY3R4IGlucHV0IG1vZGVsIGFjdGlvbiAtPlxuICAgICAgICBtYXRjaCBpbnB1dCB3aXRoXG4gICAgICAgIHwgQWN0aXZlIGlucHV0IC0+IE0uYXBwbHlfYWN0aW9uIGN0eCBpbnB1dCBtb2RlbCBhY3Rpb25cbiAgICAgICAgfCBJbmFjdGl2ZSAtPlxuICAgICAgICAgIGVwcmludF9zXG4gICAgICAgICAgICBbJW1lc3NhZ2VcbiAgICAgICAgICAgICAgXCJBbiBhY3Rpb24gc2VudCB0byBhbiBbb2ZfbW9kdWxlMV0gaGFzIGJlZW4gZHJvcHBlZCBiZWNhdXNlIGl0cyBpbnB1dCB3YXMgXFxcbiAgICAgICAgICAgICAgIG5vdCBwcmVzZW50LiBUaGlzIGhhcHBlbnMgd2hlbiB0aGUgW29mX21vZHVsZTFdIGlzIGluYWN0aXZlIHdoZW4gaXQgXFxcbiAgICAgICAgICAgICAgIHJlY2VpdmVzIGEgbWVzc2FnZS5cIlxuICAgICAgICAgICAgICAgIChhY3Rpb24gOiBNLkFjdGlvbi50KV07XG4gICAgICAgICAgbW9kZWwpXG4gICAgICBpbnB1dFxuICAgICAgZ3JhcGhcbiAgaW5cbiAgbGV0JW1hcCBtb2RlbCA9IG1vZGVsXG4gIGFuZCBpbmplY3QgPSBpbmplY3RcbiAgYW5kIGlucHV0ID0gaW5wdXQgaW5cbiAgTS5jb21wdXRlIH5pbmplY3QgaW5wdXQgbW9kZWxcbjs7XG5cbmxldCBvZl9tb2R1bGUwXG4gICh0eXBlIG0gYSByKVxuICA/c2V4cF9vZl9tb2RlbFxuICA/ZXF1YWxcbiAgKGNvbXBvbmVudCA6ICh1bml0LCBtLCBhLCByKSBjb21wb25lbnRfcylcbiAgfmRlZmF1bHRfbW9kZWxcbiAgZ3JhcGhcbiAgPVxuICBsZXQgKG1vZHVsZSBNKSA9IGNvbXBvbmVudCBpblxuICBsZXQgbW9kZWwsIGluamVjdCA9XG4gICAgQ29udC5zdGF0ZV9tYWNoaW5lMFxuICAgICAgfnNleHBfb2ZfYWN0aW9uOk0uQWN0aW9uLnNleHBfb2ZfdFxuICAgICAgP3NleHBfb2ZfbW9kZWxcbiAgICAgID9lcXVhbFxuICAgICAgfmRlZmF1bHRfbW9kZWxcbiAgICAgIH5hcHBseV9hY3Rpb246KGZ1biBjdHggLT4gTS5hcHBseV9hY3Rpb24gY3R4ICgpKVxuICAgICAgZ3JhcGhcbiAgaW5cbiAgbGV0JW1hcCBtb2RlbCA9IG1vZGVsXG4gIGFuZCBpbmplY3QgPSBpbmplY3QgaW5cbiAgTS5jb21wdXRlIH5pbmplY3QgKCkgbW9kZWxcbjs7XG5cbmxldCBvZl9tb2R1bGUyID9zZXhwX29mX21vZGVsIGMgP2VxdWFsIH5kZWZhdWx0X21vZGVsIGkxIGkyID1cbiAgb2ZfbW9kdWxlMSA/c2V4cF9vZl9tb2RlbCBjID9lcXVhbCB+ZGVmYXVsdF9tb2RlbCAoYm90aCBpMSBpMilcbjs7XG5cbmxldCBlbnVtICh0eXBlIGspIChtb2R1bGUgRSA6IEVudW0gd2l0aCB0eXBlIHQgPSBrKSB+bWF0Y2hfIH53aXRoXyBncmFwaCA9XG4gIGxldCBtb2R1bGUgRSA9IHN0cnVjdFxuICAgIGluY2x1ZGUgRVxuICAgIGluY2x1ZGUgQ29tcGFyYXRvci5NYWtlIChFKVxuICBlbmRcbiAgaW5cbiAgbGV0IGZvcndhcmRfaW5kZXggPSBMaXN0LnRvX2FycmF5IEUuYWxsIGluXG4gIGxldCByZXZlcnNlX2luZGV4ID1cbiAgICBNYXAub2ZfYWxpc3RfZXhuIChtb2R1bGUgRSkgKExpc3QubWFwaSBFLmFsbCB+ZjooZnVuIGkgayAtPiBrLCBpKSlcbiAgaW5cbiAgbGV0IG1hdGNoXyA9IG1hdGNoXyA+PnwgTWFwLmZpbmRfZXhuIHJldmVyc2VfaW5kZXggaW5cbiAgbGV0IGJyYW5jaGVzID0gQXJyYXkubGVuZ3RoIGZvcndhcmRfaW5kZXggaW5cbiAgbGV0IHdpdGhfIGkgPSB3aXRoXyAoQXJyYXkuZ2V0IGZvcndhcmRfaW5kZXggaSkgaW5cbiAgRm9yX3Byb2MyLnN3aXRjaCB+bWF0Y2hfIH5icmFuY2hlcyB+d2l0aF8gZ3JhcGhcbjs7XG5cbmxldCBzdWIgPSBUaGlzX2xldF9zeW50YXguTGV0X3N5bnRheC5zdWJcblxubW9kdWxlIE1hcCA9IENvbnQuTWFwXG5tb2R1bGUgTGV0X3N5bnRheCA9IFRoaXNfbGV0X3N5bnRheFxuIiwib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbm1vZHVsZSBXYXJuaW5nID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgeyBtZXNzYWdlIDogc3RyaW5nXG4gICAgOyBoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24udFxuICAgIH1cblxuICBsZXQgdG9fc3RyaW5nIHsgaGVyZTsgbWVzc2FnZSB9ID0gWyVzdHJpbmcgXCIle2hlcmUjU291cmNlX2NvZGVfcG9zaXRpb259OiAle21lc3NhZ2V9XCJdXG4gIGxldCB1bmZvbGRlZF9jb25zdGFudCBoZXJlID0geyBoZXJlOyBtZXNzYWdlID0gXCJ1bmZvbGRlZCBjb25zdGFudFwiIH1cblxuICBsZXQgc3RhdGVfbWFjaGluZTFfY2FuX2JlX3N0YXRlX21hY2hpbmUwIGhlcmUgPVxuICAgIHsgaGVyZTsgbWVzc2FnZSA9IFwic3RhdGVfbWFjaGluZTEgY2FuIGJlIG9wdGltaXplZCB0byBhIHN0YXRlX21hY2hpbmUwXCIgfVxuICA7O1xuXG4gIGxldCByZWxhdGl2ZV90byAoYmFzZSA6IFNvdXJjZV9jb2RlX3Bvc2l0aW9uLnQpIHQgPVxuICAgIGlmIFN0cmluZy5lcXVhbCBiYXNlLnBvc19mbmFtZSB0LmhlcmUucG9zX2ZuYW1lXG4gICAgdGhlbiB7IHQgd2l0aCBoZXJlID0geyB0LmhlcmUgd2l0aCBwb3NfbG51bSA9IHQuaGVyZS5wb3NfbG51bSAtIGJhc2UucG9zX2xudW0gfSB9XG4gICAgZWxzZSB0XG4gIDs7XG5lbmRcblxubGV0IHJlYyB2YWx1ZV9pc19jb25zdGFudCA6IFNrZWxldG9uLlZhbHVlLnQgLT4gYm9vbCA9XG4gIGZ1biB7IGtpbmQ7IF8gfSAtPlxuICBtYXRjaCBraW5kIHdpdGhcbiAgfCBDb25zdGFudCB8IEV4Y2VwdGlvbiAtPiB0cnVlXG4gIHwgSW5jciB8IE5hbWVkIC0+IGZhbHNlXG4gIHwgQ3V0b2ZmIHsgdDsgYWRkZWRfYnlfbGV0X3N5bnRheCA9IF8gfSAtPiB2YWx1ZV9pc19jb25zdGFudCB0XG4gIHwgTWFwbiB7IGlucHV0cyB9IC0+IExpc3QuZm9yX2FsbCBpbnB1dHMgfmY6dmFsdWVfaXNfY29uc3RhbnRcbjs7XG5cbmxldCB1bmZvbGRlZF9jb25zdGFudHNfbGludGVyID1cbiAgb2JqZWN0XG4gICAgaW5oZXJpdCBbV2FybmluZy50IGxpc3QgKiBTb3VyY2VfY29kZV9wb3NpdGlvbi50XSBTa2VsZXRvbi5UcmF2ZXJzZS5mb2xkIGFzIHN1cGVyXG5cbiAgICBtZXRob2QhIHZhbHVlICh2YWx1ZSA6IFNrZWxldG9uLlZhbHVlLnQpICh3YXJuaW5ncywgaGVyZSkgPVxuICAgICAgbGV0IGhlcmUgPSBPcHRpb24udmFsdWUgdmFsdWUuaGVyZSB+ZGVmYXVsdDpoZXJlIGluXG4gICAgICBsZXQgaXNfdW5mb2xkZWRfY29uc3RhbnQgPVxuICAgICAgICBtYXRjaCB2YWx1ZS5raW5kIHdpdGhcbiAgICAgICAgfCBDb25zdGFudCB8IEV4Y2VwdGlvbiB8IEluY3IgfCBOYW1lZCAtPiBmYWxzZVxuICAgICAgICB8IEN1dG9mZiB7IHQ7IGFkZGVkX2J5X2xldF9zeW50YXggPSBfIH0gLT4gdmFsdWVfaXNfY29uc3RhbnQgdFxuICAgICAgICB8IE1hcG4geyBpbnB1dHMgfSAtPiBMaXN0LmZvcl9hbGwgaW5wdXRzIH5mOnZhbHVlX2lzX2NvbnN0YW50XG4gICAgICBpblxuICAgICAgaWYgaXNfdW5mb2xkZWRfY29uc3RhbnRcbiAgICAgIHRoZW4gV2FybmluZy51bmZvbGRlZF9jb25zdGFudCBoZXJlIDo6IHdhcm5pbmdzLCBoZXJlXG4gICAgICBlbHNlIHN1cGVyI3ZhbHVlIHZhbHVlICh3YXJuaW5ncywgaGVyZSlcbiAgZW5kXG47O1xuXG5sZXQgc3RhdGVfbWFjaGluZTFfdG9fc3RhdGVfbWFjaGluZTBfbGludGVyID1cbiAgb2JqZWN0XG4gICAgaW5oZXJpdCBbV2FybmluZy50IGxpc3QgKiBTb3VyY2VfY29kZV9wb3NpdGlvbi50XSBTa2VsZXRvbi5UcmF2ZXJzZS5mb2xkIGFzIHN1cGVyXG5cbiAgICBtZXRob2QhIGNvbXB1dGF0aW9uIGNvbXB1dGF0aW9uICh3YXJuaW5ncywgaGVyZSkgPVxuICAgICAgbGV0IGhlcmUgPSBPcHRpb24udmFsdWUgY29tcHV0YXRpb24uaGVyZSB+ZGVmYXVsdDpoZXJlIGluXG4gICAgICBsZXQgd2FybmluZ3MgPVxuICAgICAgICBtYXRjaCBjb21wdXRhdGlvbi5raW5kIHdpdGhcbiAgICAgICAgfCBMZWFmMSB7IGlucHV0OyBfIH0gLT5cbiAgICAgICAgICBpZiB2YWx1ZV9pc19jb25zdGFudCBpbnB1dFxuICAgICAgICAgIHRoZW4gV2FybmluZy5zdGF0ZV9tYWNoaW5lMV9jYW5fYmVfc3RhdGVfbWFjaGluZTAgaGVyZSA6OiB3YXJuaW5nc1xuICAgICAgICAgIGVsc2Ugd2FybmluZ3NcbiAgICAgICAgfCBSZXR1cm4gX1xuICAgICAgICB8IExlYWYwMSBfXG4gICAgICAgIHwgTGVhZjBcbiAgICAgICAgfCBMZWFmX2luY3IgX1xuICAgICAgICB8IE1vZGVsX2N1dG9mZiBfXG4gICAgICAgIHwgU3ViIF9cbiAgICAgICAgfCBTdG9yZSBfXG4gICAgICAgIHwgRmV0Y2ggX1xuICAgICAgICB8IEFzc29jIF9cbiAgICAgICAgfCBBc3NvY19vbiBfXG4gICAgICAgIHwgQXNzb2Nfc2ltcGwgX1xuICAgICAgICB8IFN3aXRjaCBfXG4gICAgICAgIHwgTGF6eSBfXG4gICAgICAgIHwgV3JhcCBfXG4gICAgICAgIHwgV2l0aF9tb2RlbF9yZXNldHRlciBfXG4gICAgICAgIHwgUGF0aFxuICAgICAgICB8IExpZmVjeWNsZSBfXG4gICAgICAgIHwgSWRlbnRpdHkgXyAtPiB3YXJuaW5nc1xuICAgICAgaW5cbiAgICAgIHN1cGVyI2NvbXB1dGF0aW9uIGNvbXB1dGF0aW9uICh3YXJuaW5ncywgaGVyZSlcbiAgZW5kXG47O1xuXG5sZXQgbGlzdF93YXJuaW5ncyBjb21wdXRhdGlvbiA9XG4gIGxldCBjb21wdXRhdGlvbiA9IFNrZWxldG9uLkNvbXB1dGF0aW9uLm9mX2NvbXB1dGF0aW9uIGNvbXB1dGF0aW9uIGluXG4gIGxldCBkZWZhdWx0X2xvY2F0aW9uID0gU291cmNlX2NvZGVfcG9zaXRpb24ub2ZfcG9zIChcIl9ub25lX1wiLCAwLCAwLCAwKSBpblxuICBsZXQgbGludGVycyA9IFsgdW5mb2xkZWRfY29uc3RhbnRzX2xpbnRlcjsgc3RhdGVfbWFjaGluZTFfdG9fc3RhdGVfbWFjaGluZTBfbGludGVyIF0gaW5cbiAgTGlzdC5mb2xkIGxpbnRlcnMgfmluaXQ6W10gfmY6KGZ1biB3YXJuaW5ncyBsaW50ZXIgLT5cbiAgICBsZXQgd2FybmluZ3MsIF8gPSBsaW50ZXIjY29tcHV0YXRpb24gY29tcHV0YXRpb24gKHdhcm5pbmdzLCBkZWZhdWx0X2xvY2F0aW9uKSBpblxuICAgIHdhcm5pbmdzKVxuOztcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxubW9kdWxlIFByb2MgPSBQcm9jX2xheWVyMlxuXG5tb2R1bGUgdHlwZSBTID0gTW9kdWxlX3R5cGVzLkNvbXBvbmVudF9zXG5cbnR5cGUgKCdpLCAncikgdCA9ICdpIFByb2MuVmFsdWUudCAtPiAnciBQcm9jLkNvbXB1dGF0aW9uLnRcblxubW9kdWxlIHR5cGUgTW9kZWwgPSBNb2RlbFxubW9kdWxlIHR5cGUgQWN0aW9uID0gQWN0aW9uXG5cbmxldCBjb25zdCB4IF8gPSBQcm9jLmNvbnN0IHhcbmxldCBpbnB1dCA9IFByb2MucmVhZFxubGV0IHB1cmUgfmYgaSA9IFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXAgaSB+ZilcbmxldCBjb21wb3NlIGEgYiBpID0gUHJvYy5MZXRfc3ludGF4LkxldF9zeW50YXguc3ViIChhIGkpIH5mOmJcblxubGV0IG1hcCBhIH5mIGkgPVxuICBQcm9jLkxldF9zeW50YXguTGV0X3N5bnRheC5zdWIgKGEgaSkgfmY6KGZ1biB4IC0+IFByb2MucmVhZCAoUHJvYy5WYWx1ZS5tYXAgfmYgeCkpXG47O1xuXG5sZXQgbWFwX2lucHV0IGEgfmYgaSA9IGEgKFByb2MuVmFsdWUubWFwIGkgfmYpXG5sZXQgb2ZfbW9kdWxlID0gUHJvYy5vZl9tb2R1bGUxXG5cbmxldCBzdGF0ZV9tYWNoaW5lXG4gIH5zZXhwX29mX2FjdGlvblxuICA/c2V4cF9vZl9tb2RlbFxuICB+ZXF1YWxcbiAgX2hlcmVcbiAgfmRlZmF1bHRfbW9kZWxcbiAgfmFwcGx5X2FjdGlvblxuICBpbnB1dFxuICA9XG4gIFByb2Muc3RhdGVfbWFjaGluZTFcbiAgICB+c2V4cF9vZl9hY3Rpb25cbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgIH5lcXVhbFxuICAgIH5kZWZhdWx0X21vZGVsXG4gICAgfmFwcGx5X2FjdGlvbjooZnVuIGNvbnRleHQgaW5wdXQgbW9kZWwgYWN0aW9uIC0+XG4gICAgICBtYXRjaCBpbnB1dCB3aXRoXG4gICAgICB8IEFjdGl2ZSBpbnB1dCAtPiBhcHBseV9hY3Rpb24gY29udGV4dCBpbnB1dCBtb2RlbCBhY3Rpb25cbiAgICAgIHwgSW5hY3RpdmUgLT5cbiAgICAgICAgbGV0IGFjdGlvbiA9IHNleHBfb2ZfYWN0aW9uIGFjdGlvbiBpblxuICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgICAgWyVoZXJlXVxuICAgICAgICAgICAgICBcIkFuIGFjdGlvbiBzZW50IHRvIGEgW3N0YXRlX21hY2hpbmUxXSBoYXMgYmVlbiBkcm9wcGVkIGJlY2F1c2UgaXRzIGlucHV0IFxcXG4gICAgICAgICAgICAgICB3YXMgbm90IHByZXNlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBbc3RhdGVfbWFjaGluZTFdIGlzIGluYWN0aXZlIHdoZW4gXFxcbiAgICAgICAgICAgICAgIGl0IHJlY2VpdmVzIGEgbWVzc2FnZS5cIlxuICAgICAgICAgICAgICAoYWN0aW9uIDogU2V4cC50KV07XG4gICAgICAgIG1vZGVsKVxuICAgIGlucHV0XG47O1xuXG5sZXQgYm90aCBhIGIgaSA9XG4gIGxldCBvcGVuIFByb2MuTGV0X3N5bnRheCBpblxuICBsZXQlc3ViIGEgPSBhIGkgaW5cbiAgbGV0JXN1YiBiID0gYiBpIGluXG4gIHJldHVybiAoUHJvYy5WYWx1ZS5ib3RoIGEgYilcbjs7XG5cbmxldCBlbnVtIG0gfndoaWNoIH5oYW5kbGUgaW5wdXQgPVxuICBsZXQgbWF0Y2hfID0gUHJvYy5WYWx1ZS5tYXAgaW5wdXQgfmY6d2hpY2ggaW5cbiAgbGV0IHdpdGhfIGtleSA9IGhhbmRsZSBrZXkgaW5wdXQgaW5cbiAgUHJvYy5lbnVtIG0gfm1hdGNoXyB+d2l0aF9cbjs7XG5cbmxldCBpZl8gY2hvb3NlIH50aGVuXyB+ZWxzZV8gaW5wdXQgPVxuICBsZXQgb3BlbiBQcm9jLkxldF9zeW50YXggaW5cbiAgbGV0IGNvbmQgPSBQcm9jLlZhbHVlLm1hcCBpbnB1dCB+ZjpjaG9vc2UgaW5cbiAgaWYlc3ViIGNvbmQgdGhlbiB0aGVuXyBpbnB1dCBlbHNlIGVsc2VfIGlucHV0XG47O1xuXG5tb2R1bGUgTWFwID0gc3RydWN0XG4gIGxldCBhc3NvY19pbnB1dCBjb21wYXJhdG9yIGYgaW5wdXQgPSBQcm9jLmFzc29jIGNvbXBhcmF0b3IgaW5wdXQgfmY6KGZ1biBfIC0+IGYpXG5cbiAgbGV0IGFzc29jaV9pbnB1dCBjb21wYXJhdG9yIGYgaW5wdXQgPVxuICAgIFByb2MuYXNzb2MgY29tcGFyYXRvciBpbnB1dCB+ZjooZnVuIGtleSBkYXRhIC0+IGYgKFByb2MuVmFsdWUuYm90aCBrZXkgZGF0YSkpXG4gIDs7XG5cbiAgbGV0IGFzc29jaV9pbnB1dF93aXRoX2V4dHJhIGNvbXBhcmF0b3IgZiBpbnB1dCA9XG4gICAgbGV0IG9wZW4gUHJvYy5MZXRfc3ludGF4IGluXG4gICAgbGV0JXBhdHRlcm5fYmluZCBpbnB1dCwgZXh0cmEgPSBpbnB1dCBpblxuICAgIFByb2MuYXNzb2MgY29tcGFyYXRvciBpbnB1dCB+ZjooZnVuIGtleSBkYXRhIC0+XG4gICAgICBmIChUdXBsZTMuY3JlYXRlIDwkPiBrZXkgPCo+IGRhdGEgPCo+IGV4dHJhKSlcbiAgOztcbmVuZFxuXG5pbmNsdWRlIHN0cnVjdFxuICBvcGVuIFByb2MuTGV0X3N5bnRheFxuXG4gIGxldCBhcnIgZiA9IHB1cmUgfmZcbiAgbGV0ICggPj5eICkgYSBmID0gbWFwIGEgfmZcbiAgbGV0ICggXj4+ICkgYSBmID0gbWFwX2lucHV0IGEgfmZcblxuICBsZXQgZmlyc3QgZiBpID1cbiAgICBsZXQlcGF0dGVybl9iaW5kIGZzdCwgc25kID0gaSBpblxuICAgIGxldCVzdWIgb3V0ID0gZiBmc3QgaW5cbiAgICByZXR1cm4gKFByb2MuVmFsdWUuYm90aCBvdXQgc25kKVxuICA7O1xuXG4gIGxldCBzZWNvbmQgZiBpID1cbiAgICBsZXQlcGF0dGVybl9iaW5kIGZzdCwgc25kID0gaSBpblxuICAgIGxldCVzdWIgb3V0ID0gZiBzbmQgaW5cbiAgICByZXR1cm4gKFByb2MuVmFsdWUuYm90aCBmc3Qgb3V0KVxuICA7O1xuXG4gIGxldCBzcGxpdCBmMSBmMiBpID1cbiAgICBsZXQlcGF0dGVybl9iaW5kIGZzdCwgc25kID0gaSBpblxuICAgIGxldCVzdWIgb3V0MSA9IGYxIGZzdCBpblxuICAgIGxldCVzdWIgb3V0MiA9IGYyIHNuZCBpblxuICAgIHJldHVybiAoUHJvYy5WYWx1ZS5ib3RoIG91dDEgb3V0MilcbiAgOztcblxuICBsZXQgZXh0ZW5kX2ZpcnN0IGYgaSA9XG4gICAgbGV0JXN1YiBvdXQgPSBmIGkgaW5cbiAgICByZXR1cm4gKFByb2MuVmFsdWUuYm90aCBvdXQgaSlcbiAgOztcblxuICBsZXQgZXh0ZW5kX3NlY29uZCBmIGkgPVxuICAgIGxldCVzdWIgb3V0ID0gZiBpIGluXG4gICAgcmV0dXJuIChQcm9jLlZhbHVlLmJvdGggaSBvdXQpXG4gIDs7XG5cbiAgbGV0IGZhbm91dCBmMSBmMiBpID1cbiAgICBsZXQlc3ViIG91dDEgPSBmMSBpIGluXG4gICAgbGV0JXN1YiBvdXQyID0gZjIgaSBpblxuICAgIHJldHVybiAoUHJvYy5WYWx1ZS5ib3RoIG91dDEgb3V0MilcbiAgOztcblxuICBsZXQgcGFydGlhbF9jb21wb3NlX2ZpcnN0IGYxIGYyIGkgPVxuICAgIGxldCVzdWIgb3V0MSA9IGYxIGkgaW5cbiAgICBsZXQlcGF0dGVybl9iaW5kIHNoYXJlZCwgb3V0MSA9IG91dDEgaW5cbiAgICBsZXQlc3ViIG91dDIgPSBmMiAoUHJvYy5WYWx1ZS5ib3RoIGkgc2hhcmVkKSBpblxuICAgIHJldHVybiAoUHJvYy5WYWx1ZS5ib3RoIG91dDEgb3V0MilcbiAgOztcblxuICBsZXQgcGlwZSBmMSB+aW50byB+dmlhIH5maW5hbGl6ZSBpID1cbiAgICBsZXQlc3ViIHIxID0gZjEgaSBpblxuICAgIGxldCBpbnRlcm1lZGlhdGUgPSB2aWEgPCQ+IGkgPCo+IHIxIGluXG4gICAgbGV0JXN1YiByMiA9IGludG8gaW50ZXJtZWRpYXRlIGluXG4gICAgcmV0dXJuIChmaW5hbGl6ZSA8JD4gaSA8Kj4gcjEgPCo+IHIyKVxuICA7O1xuXG4gIGxldCAoICoqKiApID0gc3BsaXRcbiAgbGV0ICggJiYmICkgPSBmYW5vdXRcbmVuZFxuXG5tb2R1bGUgV2l0aF9pbmNyID0gc3RydWN0XG4gIGxldCBvZl9pbmNyIGkgXyA9IFByb2MucmVhZCAoQ29udC5Db252LmNvbmNlYWxfdmFsdWUgKFZhbHVlLm9mX2luY3IgaSkpXG5cbiAgb3BlbiBQcm9jLkxldF9zeW50YXhcblxuICBsZXQgb2ZfbW9kdWxlXG4gICAgKHR5cGUgaSBtIGEgcilcbiAgICA/c2V4cF9vZl9tb2RlbFxuICAgIChjb21wb25lbnQgOiAoaSwgbSwgYSwgcikgY29tcG9uZW50X3NfaW5jcilcbiAgICB+ZXF1YWxcbiAgICB+ZGVmYXVsdF9tb2RlbFxuICAgIGlucHV0XG4gICAgOiByIFByb2MuQ29tcHV0YXRpb24udFxuICAgID1cbiAgICBsZXQgKG1vZHVsZSBNKSA9IGNvbXBvbmVudCBpblxuICAgIGxldCVzdWIgc3RhdGUgPVxuICAgICAgUHJvYy5zdGF0ZV9tYWNoaW5lMVxuICAgICAgICB+c2V4cF9vZl9hY3Rpb246TS5BY3Rpb24uc2V4cF9vZl90XG4gICAgICAgID9zZXhwX29mX21vZGVsXG4gICAgICAgIH5lcXVhbFxuICAgICAgICB+ZGVmYXVsdF9tb2RlbFxuICAgICAgICB+YXBwbHlfYWN0aW9uOihmdW4gY3R4IGlucHV0IG1vZGVsIGFjdGlvbiAtPlxuICAgICAgICAgIG1hdGNoIGlucHV0IHdpdGhcbiAgICAgICAgICB8IEFjdGl2ZSBpbnB1dCAtPlxuICAgICAgICAgICAgTS5hcHBseV9hY3Rpb25cbiAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgfmluamVjdDooUHJvYy5BcHBseV9hY3Rpb25fY29udGV4dC5pbmplY3QgY3R4KVxuICAgICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnQ6KFByb2MuQXBwbHlfYWN0aW9uX2NvbnRleHQuc2NoZWR1bGVfZXZlbnQgY3R4KVxuICAgICAgICAgICAgICBtb2RlbFxuICAgICAgICAgICAgICBhY3Rpb25cbiAgICAgICAgICB8IEluYWN0aXZlIC0+XG4gICAgICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgICAgICBbJW1lc3NhZ2VcbiAgICAgICAgICAgICAgICBbJWhlcmVdXG4gICAgICAgICAgICAgICAgICBcIkFuIGFjdGlvbiBzZW50IHRvIGFuIFtvZl9tb2R1bGVdIGhhcyBiZWVuIGRyb3BwZWQgYmVjYXVzZSBpdHMgaW5wdXQgXFxcbiAgICAgICAgICAgICAgICAgICB3YXMgbm90IHByZXNlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBbb2ZfbW9kdWxlXSBpcyBpbmFjdGl2ZSB3aGVuIFxcXG4gICAgICAgICAgICAgICAgICAgaXQgcmVjZWl2ZXMgYSBtZXNzYWdlLlwiXG4gICAgICAgICAgICAgICAgICAoYWN0aW9uIDogTS5BY3Rpb24udCldO1xuICAgICAgICAgICAgbW9kZWwpXG4gICAgICAgIGlucHV0XG4gICAgaW5cbiAgICBQcm9jLkluY3IuY29tcHV0ZSAoQ29udC5ib3RoIGlucHV0IHN0YXRlKSB+ZjooZnVuIGlucHV0X2FuZF9zdGF0ZSAtPlxuICAgICAgbGV0JXBhdHRlcm5fYmluZC5VaV9pbmNyIGlucHV0LCAobW9kZWwsIGluamVjdCkgPSBpbnB1dF9hbmRfc3RhdGUgaW5cbiAgICAgIE0uY29tcHV0ZSBpbnB1dCBtb2RlbCB+aW5qZWN0KVxuICA7O1xuXG4gIGxldCBwdXJlIH5mID0gUHJvYy5JbmNyLmNvbXB1dGUgfmZcbiAgbGV0IG1hcCBhIH5mID0gY29tcG9zZSBhIChwdXJlIH5mKVxuXG4gIGxldCB2YWx1ZV9jdXRvZmYgfmN1dG9mZiA9XG4gICAgbWFwIGlucHV0IH5mOihmdW4gaW5wdXQgLT5cbiAgICAgIGxldCBpbnB1dCA9IEluY3IubWFwIGlucHV0IH5mOkZuLmlkIGluXG4gICAgICBJbmNyLnNldF9jdXRvZmYgaW5wdXQgY3V0b2ZmO1xuICAgICAgaW5wdXQpXG4gIDs7XG5lbmRcblxubW9kdWxlIEluZml4ID0gc3RydWN0XG4gIGxldCAoID4+PiApID0gY29tcG9zZVxuICBsZXQgKCA+PnwgKSBhIGYgPSBtYXAgYSB+ZlxuICBsZXQgKCBAPj4gKSBmIGEgPSBtYXBfaW5wdXQgYSB+ZlxuZW5kXG5cbm1vZHVsZSBMZXRfc3ludGF4ID0gc3RydWN0XG4gIGxldCByZXR1cm4gPSBjb25zdFxuICBsZXQgbWFwID0gbWFwXG4gIGxldCBib3RoID0gYm90aFxuXG4gIGluY2x1ZGUgSW5maXhcblxuICBtb2R1bGUgTGV0X3N5bnRheCA9IHN0cnVjdFxuICAgIGxldCByZXR1cm4gPSBjb25zdFxuICAgIGxldCBib3RoID0gYm90aFxuICAgIGxldCBtYXAgPSBtYXBcblxuICAgIG1vZHVsZSBPcGVuX29uX3JocyA9IEluZml4XG4gIGVuZFxuZW5kXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxubW9kdWxlIENvbXB1dGF0aW9uX2luZm8gPSBzdHJ1Y3RcbiAgKCogQnVpbGRzIGEgW0NvbXB1dGF0aW9uLnBhY2tlZF9pbmZvXSB3aXRoIGFuIGVudmlyb25tbnQtdGhyZWFkaW5nIHJ1biBmdW5jdGlvbiBmcm9tIGFcbiAgICAgZ2VuZXJpYyB1bml0LXJldHVybmluZyBbQ29tcHV0YXRpb24ucGFja2VkX2luZm9dLiAqKVxuICBsZXQgd2l0aF90aHJlYWRlZF9lbnZpcm9ubWVudFxuICAgIDogICgnciwgdW5pdCkgQ29tcHV0YXRpb24ucGFja2VkX2luZm9cbiAgICAtPiAoJ3IsIEVudmlyb25tZW50LnQgb3B0aW9uKSBDb21wdXRhdGlvbi5wYWNrZWRfaW5mb1xuICAgID1cbiAgICBmdW4gKFRcbiAgICAgICAgICB7IG1vZGVsXG4gICAgICAgICAgOyBpbnB1dFxuICAgICAgICAgIDsgYWN0aW9uXG4gICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgICA7IHJlc2V0XG4gICAgICAgICAgOyBydW5cbiAgICAgICAgICA7IG1heV9jb250YWluX3BhdGhcbiAgICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZVxuICAgICAgICAgIH0pIC0+XG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0ID1cbiAgICAgIGxldCViaW5kLlRyYW1wb2xpbmUgc25hcHNob3QsICgpID0gcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgaW5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuIChzbmFwc2hvdCwgKE5vbmUgOiBFbnZpcm9ubWVudC50IG9wdGlvbikpXG4gICAgaW5cbiAgICBDb21wdXRhdGlvbi5UXG4gICAgICB7IG1vZGVsXG4gICAgICA7IGlucHV0XG4gICAgICA7IGFjdGlvblxuICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgIDsgcmVzZXRcbiAgICAgIDsgcnVuXG4gICAgICA7IG1heV9jb250YWluX3BhdGhcbiAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICB9XG4gIDs7XG5cbiAgKCogUHJvZHVjZXMgYSBcIlt1bml0XS1leHRyYVwiIFtDb21wdXRhdGlvbi5wYWNrZWRfaW5mb10gZnJvbSBhbiBbZXZhbF9zdWJdLWN1c3RvbSBwYWNrZWRcbiAgICAgaW5mbyB0aGF0IHRocmVhZHMgYW4gZW52aXJvbm1lbnQgdGhyb3VnaCB0aGUgcnVuIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG9cbiAgICAgY29udmVydCBiYWNrIHRvIGEgdHlwZSB0aGF0IHRoZSBnZW5lcmFsLXB1cnBvc2UgW2dhdGhlcl0gaW1wbGVtZW50YXRpb24gY2FuIGhhbmRsZS4gKilcbiAgbGV0IGRyb3BfdGhyZWFkZWRfZW52aXJvbm1lbnRcbiAgICA6ICAoJ3IsIEVudmlyb25tZW50LnQgb3B0aW9uKSBDb21wdXRhdGlvbi5wYWNrZWRfaW5mb1xuICAgIC0+ICgnciwgdW5pdCkgQ29tcHV0YXRpb24ucGFja2VkX2luZm9cbiAgICA9XG4gICAgZnVuIChDb21wdXRhdGlvbi5UXG4gICAgICAgICAgeyBtb2RlbFxuICAgICAgICAgIDsgaW5wdXRcbiAgICAgICAgICA7IGFjdGlvblxuICAgICAgICAgIDsgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgOyByZXNldFxuICAgICAgICAgIDsgcnVuXG4gICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoXG4gICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgICB9KSAtPlxuICAgIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdCA9XG4gICAgICBsZXQlYmluZC5UcmFtcG9saW5lIHNuYXBzaG90LCAoXyA6IEVudmlyb25tZW50LnQgb3B0aW9uKSA9XG4gICAgICAgIHJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0XG4gICAgICBpblxuICAgICAgVHJhbXBvbGluZS5yZXR1cm4gKHNuYXBzaG90LCAoKSlcbiAgICBpblxuICAgIENvbXB1dGF0aW9uLlRcbiAgICAgIHsgbW9kZWxcbiAgICAgIDsgaW5wdXRcbiAgICAgIDsgYWN0aW9uXG4gICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgOyByZXNldFxuICAgICAgOyBydW5cbiAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgIH1cbiAgOztcbmVuZFxuXG5sZXQgKCA+Pj4gKSBmIGluamVjdCBiID0gaW5qZWN0IChmIGIpXG5sZXQgd3JhcF9zdWJfZnJvbSBpbmplY3QgPSBBY3Rpb24uc3ViX2Zyb20gPj4+IGluamVjdFxubGV0IHdyYXBfc3ViX2ludG8gaW5qZWN0ID0gQWN0aW9uLnN1Yl9pbnRvID4+PiBpbmplY3RcblxubGV0IGJvdGhfdXNlX3BhdGggKGEgOiBNYXlfY29udGFpbi5QYXRoLnQpIChiIDogTWF5X2NvbnRhaW4uUGF0aC50KSA9XG4gIG1hdGNoIGEsIGIgd2l0aFxuICB8IFllc19vcl9tYXliZSwgWWVzX29yX21heWJlIC0+IHRydWVcbiAgfCBfIC0+IGZhbHNlXG47O1xuXG5tb2R1bGUgVGhyZWFkX2VudiA9IHN0cnVjdFxuICAoKiB2YWx1ZXMgb2YgdGhpcyB0eXBlIGFyZSB1c2VkIHRvIGNvbnRyb2wgaWYgdGhlIGVudmlyb25tZW50IG9mIGEgc3ViIGlzIHRocmVhZGVkIFxuICAgICBpbnRvIHRoZSBuZXh0IHN1YiBpbiBhIGNoYWluLCBvciBpZiB0aGVyZSdzIG5vIHRocmVhZGluZyAod2hpY2ggaXMgdGhlIHN0YW5kYXJkIFxuICAgICBzY29waW5nIHJ1bGUpICopXG4gIHR5cGUgJ2EgdCA9XG4gICAgfCBOb25lIDogdW5pdCB0XG4gICAgfCBUaHJlYWRfZW52IDogRW52aXJvbm1lbnQudCBvcHRpb24gdFxuXG4gICgqIGdpdmVuIGEgc3RhbmRhcmQgZW52aXJvbm1lbnQgYW5kIHdoYXQgbWlnaHQgYmUgYSB0aHJlYWRlZCBlbnZpcm9ubWVudCwgcGljayBhbiBcbiAgICAgZW52aXJvbm1lbnQgdG8gZXZhbHVhdGUgdGhlIFtpbnRvXSBicmFuY2ggb2YgYSBzdWIuICopXG4gIGxldCBwaWNrICh0eXBlIGEpICh0aHJlYWRfZW52IDogYSB0KSB+ZW52aXJvbm1lbnQgfihtYXliZV9lbnYgOiBhKSA6IEVudmlyb25tZW50LnQgPVxuICAgIG1hdGNoIHRocmVhZF9lbnYgd2l0aFxuICAgIHwgTm9uZSAtPiBlbnZpcm9ubWVudFxuICAgIHwgVGhyZWFkX2VudiAtPlxuICAgICAgKG1hdGNoIG1heWJlX2VudiB3aXRoXG4gICAgICAgfCBOb25lIC0+IGVudmlyb25tZW50XG4gICAgICAgfCBTb21lIGVudiAtPiBlbnYpXG4gIDs7XG5cbiAgKCogZ2l2ZW4gYSBzdGFuZGFyZCBlbnZpcm9ubWVudCBhbmQgd2hhdCBtaWdodCBiZSBhIHRocmVhZGVkIGVudmlyb25tZW50LCBjYXB0dXJlXG4gICAgIGFuIGVudmlyb25tZW50IChpZiBhbnkpIHRvIHRocmVhZCBpbnRvIHN1YnNlcXVlbnQgc3VicyBpbiB0aGUgY2hhaW4uICopXG4gIGxldCBjYXB0dXJlICh0eXBlIGEpICh0aHJlYWRfZW52IDogYSB0KSB+ZW52aXJvbm1lbnQgfihtYXliZV9lbnYgOiBhKSA6IGEgPVxuICAgIG1hdGNoIHRocmVhZF9lbnYsIG1heWJlX2VudiB3aXRoXG4gICAgfCBOb25lLCAoKSAtPiAoKVxuICAgIHwgVGhyZWFkX2VudiwgTm9uZSAtPiBTb21lIGVudmlyb25tZW50XG4gICAgfCBUaHJlYWRfZW52LCBTb21lIGVudiAtPiBTb21lIGVudlxuICA7O1xuZW5kXG5cbmxldCBiYXNlbGluZVxuICAodHlwZSB0aHJlYWRfZW52KVxuICB+aGVyZVxuICB+KGluZm9fZnJvbSA6IChfLCBfLCBfLCBfLCB0aHJlYWRfZW52KSBDb21wdXRhdGlvbi5pbmZvKVxuICB+KGluZm9faW50byA6IChfLCBfLCBfLCBfLCB0aHJlYWRfZW52KSBDb21wdXRhdGlvbi5pbmZvKVxuICB+dmlhXG4gIH4odGhyZWFkX2Vudmlyb25tZW50IDogdGhyZWFkX2VudiBUaHJlYWRfZW52LnQpXG4gIDogKF8sIHRocmVhZF9lbnYpIENvbXB1dGF0aW9uLnBhY2tlZF9pbmZvXG4gID1cbiAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IChtb2RlbF9mcm9tLCBtb2RlbF9pbnRvKSA9XG4gICAgbGV0IG1vZGVsX2Zyb20gPVxuICAgICAgaW5mb19mcm9tLnJlc2V0IH5pbmplY3Q6KHdyYXBfc3ViX2Zyb20gaW5qZWN0KSB+c2NoZWR1bGVfZXZlbnQgbW9kZWxfZnJvbVxuICAgIGluXG4gICAgbGV0IG1vZGVsX2ludG8gPVxuICAgICAgaW5mb19pbnRvLnJlc2V0IH5pbmplY3Q6KHdyYXBfc3ViX2ludG8gaW5qZWN0KSB+c2NoZWR1bGVfZXZlbnQgbW9kZWxfaW50b1xuICAgIGluXG4gICAgbW9kZWxfZnJvbSwgbW9kZWxfaW50b1xuICBpblxuICBsZXQgYXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IGlucHV0IChtb2RlbF9mcm9tLCBtb2RlbF9pbnRvKSA9IGZ1bmN0aW9uXG4gICAgfCBBY3Rpb24uU3ViX2Zyb20gYWN0aW9uIC0+XG4gICAgICBsZXQgbW9kZWxfZnJvbSA9XG4gICAgICAgIGluZm9fZnJvbS5hcHBseV9hY3Rpb25cbiAgICAgICAgICB+aW5qZWN0Oih3cmFwX3N1Yl9mcm9tIGluamVjdClcbiAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAoT3B0aW9uLm1hcCBpbnB1dCB+Zjpmc3QpXG4gICAgICAgICAgbW9kZWxfZnJvbVxuICAgICAgICAgIGFjdGlvblxuICAgICAgaW5cbiAgICAgIG1vZGVsX2Zyb20sIG1vZGVsX2ludG9cbiAgICB8IFN1Yl9pbnRvIGFjdGlvbiAtPlxuICAgICAgbGV0IG1vZGVsX2ludG8gPVxuICAgICAgICBpbmZvX2ludG8uYXBwbHlfYWN0aW9uXG4gICAgICAgICAgfmluamVjdDood3JhcF9zdWJfaW50byBpbmplY3QpXG4gICAgICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICAgICAgKE9wdGlvbi5tYXAgaW5wdXQgfmY6c25kKVxuICAgICAgICAgIG1vZGVsX2ludG9cbiAgICAgICAgICBhY3Rpb25cbiAgICAgIGluXG4gICAgICBtb2RlbF9mcm9tLCBtb2RlbF9pbnRvXG4gIGluXG4gIGxldCBib3RoX3VzZV9wYXRoID1cbiAgICBib3RoX3VzZV9wYXRoIGluZm9fZnJvbS5tYXlfY29udGFpbl9wYXRoIGluZm9faW50by5tYXlfY29udGFpbl9wYXRoXG4gIGluXG4gIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdCA9XG4gICAgYW5ub3RhdGUgTW9kZWwgbW9kZWw7XG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSBmcm9tLCBtYXliZV9lbnYgPVxuICAgICAgbGV0IG1vZGVsID0gSW5jci5tYXAgbW9kZWwgfmY6VHVwbGUyLmdldDEgaW5cbiAgICAgIGxldCBwYXRoID0gaWYgYm90aF91c2VfcGF0aCB0aGVuIFBhdGguYXBwZW5kIHBhdGggUGF0aC5FbGVtLlN1YnN0X2Zyb20gZWxzZSBwYXRoIGluXG4gICAgICBpbmZvX2Zyb20ucnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3Q6KHdyYXBfc3ViX2Zyb20gaW5qZWN0KVxuICAgIGluXG4gICAgU25hcHNob3QuYXR0cmlidXRlX3Bvc2l0aW9ucyBoZXJlIGZyb207XG4gICAgbGV0IGZyb21fcmVzdWx0ID0gU25hcHNob3QucmVzdWx0IGZyb20gaW5cbiAgICBsZXQgZW52aXJvbm1lbnQgPSBUaHJlYWRfZW52LnBpY2sgdGhyZWFkX2Vudmlyb25tZW50IH5lbnZpcm9ubWVudCB+bWF5YmVfZW52IGluXG4gICAgbGV0IGVudmlyb25tZW50ID0gRW52aXJvbm1lbnQuYWRkX2V4biBlbnZpcm9ubWVudCB+a2V5OnZpYSB+ZGF0YTpmcm9tX3Jlc3VsdCBpblxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgaW50bywgbWF5YmVfZW52ID1cbiAgICAgIGxldCBtb2RlbCA9IEluY3IubWFwIG1vZGVsIH5mOlR1cGxlMi5nZXQyIGluXG4gICAgICBsZXQgcGF0aCA9IGlmIGJvdGhfdXNlX3BhdGggdGhlbiBQYXRoLmFwcGVuZCBwYXRoIFBhdGguRWxlbS5TdWJzdF9pbnRvIGVsc2UgcGF0aCBpblxuICAgICAgaW5mb19pbnRvLnJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0Oih3cmFwX3N1Yl9pbnRvIGluamVjdClcbiAgICBpblxuICAgIGxldCByZXN1bHQgPSBTbmFwc2hvdC5yZXN1bHQgaW50byBpblxuICAgIGxldCBsaWZlY3ljbGUgPVxuICAgICAgT3B0aW9uLm1lcmdlXG4gICAgICAgIChTbmFwc2hvdC5saWZlY3ljbGUgZnJvbSlcbiAgICAgICAgKFNuYXBzaG90LmxpZmVjeWNsZSBpbnRvKVxuICAgICAgICB+ZjpMaWZlY3ljbGUuQ29sbGVjdGlvbi5tZXJnZVxuICAgIGluXG4gICAgbGV0IGlucHV0ID0gSW5wdXQubWVyZ2UgKFNuYXBzaG90LmlucHV0IGZyb20pIChTbmFwc2hvdC5pbnB1dCBpbnRvKSBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoIFNuYXBzaG90LmNyZWF0ZSB+cmVzdWx0IH5pbnB1dCB+bGlmZWN5Y2xlXG4gICAgICAsIFRocmVhZF9lbnYuY2FwdHVyZSB0aHJlYWRfZW52aXJvbm1lbnQgfmVudmlyb25tZW50IH5tYXliZV9lbnYgKVxuICBpblxuICBsZXQgbW9kZWwgPSBNZXRhLk1vZGVsLmJvdGggaW5mb19mcm9tLm1vZGVsIGluZm9faW50by5tb2RlbCBpblxuICBsZXQgaW5wdXQgPSBNZXRhLklucHV0LmJvdGggaW5mb19mcm9tLmlucHV0IGluZm9faW50by5pbnB1dCBpblxuICBUXG4gICAgeyBtb2RlbFxuICAgIDsgaW5wdXRcbiAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLnN1YiB+ZnJvbTppbmZvX2Zyb20uYWN0aW9uIH5pbnRvOmluZm9faW50by5hY3Rpb25cbiAgICA7IGFwcGx5X2FjdGlvblxuICAgIDsgcnVuXG4gICAgOyByZXNldFxuICAgIDsgbWF5X2NvbnRhaW5fcGF0aCA9XG4gICAgICAgIE1heV9jb250YWluLlBhdGgubWVyZ2UgaW5mb19mcm9tLm1heV9jb250YWluX3BhdGggaW5mb19pbnRvLm1heV9jb250YWluX3BhdGhcbiAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZSA9XG4gICAgICAgIE1heV9jb250YWluLkxpZmVjeWNsZS5tZXJnZVxuICAgICAgICAgIGluZm9fZnJvbS5tYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgICBpbmZvX2ludG8ubWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgfVxuOztcblxubGV0IGZyb21fc3RhdGVsZXNzXG4gICh0eXBlIHRocmVhZF9lbnYpXG4gIH5oZXJlXG4gIH4oaW5mb19mcm9tIDogKF8sIF8sIF8sIF8sIHRocmVhZF9lbnYpIENvbXB1dGF0aW9uLmluZm8pXG4gIH4oaW5mb19pbnRvIDogKF8sIF8sIF8sIF8sIHRocmVhZF9lbnYpIENvbXB1dGF0aW9uLmluZm8pXG4gIH52aWFcbiAgfih0aHJlYWRfZW52aXJvbm1lbnQgOiB0aHJlYWRfZW52IFRocmVhZF9lbnYudClcbiAgOiAoXywgdGhyZWFkX2VudikgQ29tcHV0YXRpb24ucGFja2VkX2luZm9cbiAgPVxuICBsZXQgYm90aF91c2VfcGF0aCA9XG4gICAgYm90aF91c2VfcGF0aCBpbmZvX2Zyb20ubWF5X2NvbnRhaW5fcGF0aCBpbmZvX2ludG8ubWF5X2NvbnRhaW5fcGF0aFxuICBpblxuICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgPVxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgZnJvbSwgbWF5YmVfZW52ID1cbiAgICAgIGxldCBwYXRoID0gaWYgYm90aF91c2VfcGF0aCB0aGVuIFBhdGguYXBwZW5kIHBhdGggUGF0aC5FbGVtLlN1YnN0X2Zyb20gZWxzZSBwYXRoIGluXG4gICAgICBpbmZvX2Zyb20ucnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsOnVuaXRfbW9kZWwgfmluamVjdDp1bnJlYWNoYWJsZV9hY3Rpb25cbiAgICBpblxuICAgIFNuYXBzaG90LmF0dHJpYnV0ZV9wb3NpdGlvbnMgaGVyZSBmcm9tO1xuICAgIGxldCBmcm9tX3Jlc3VsdCA9IFNuYXBzaG90LnJlc3VsdCBmcm9tIGluXG4gICAgbGV0IGVudmlyb25tZW50ID0gVGhyZWFkX2Vudi5waWNrIHRocmVhZF9lbnZpcm9ubWVudCB+ZW52aXJvbm1lbnQgfm1heWJlX2VudiBpblxuICAgIGxldCBlbnZpcm9ubWVudCA9IEVudmlyb25tZW50LmFkZF9leG4gZW52aXJvbm1lbnQgfmtleTp2aWEgfmRhdGE6ZnJvbV9yZXN1bHQgaW5cbiAgICBsZXQlYmluZC5UcmFtcG9saW5lIGludG8sIG1heWJlX2VudiA9XG4gICAgICBsZXQgcGF0aCA9IGlmIGJvdGhfdXNlX3BhdGggdGhlbiBQYXRoLmFwcGVuZCBwYXRoIFBhdGguRWxlbS5TdWJzdF9pbnRvIGVsc2UgcGF0aCBpblxuICAgICAgaW5mb19pbnRvLnJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0XG4gICAgaW5cbiAgICBsZXQgcmVzdWx0ID0gU25hcHNob3QucmVzdWx0IGludG8gaW5cbiAgICBsZXQgbGlmZWN5Y2xlID1cbiAgICAgIE9wdGlvbi5tZXJnZVxuICAgICAgICAoU25hcHNob3QubGlmZWN5Y2xlIGZyb20pXG4gICAgICAgIChTbmFwc2hvdC5saWZlY3ljbGUgaW50bylcbiAgICAgICAgfmY6TGlmZWN5Y2xlLkNvbGxlY3Rpb24ubWVyZ2VcbiAgICBpblxuICAgIGxldCBpbnB1dCA9IFNuYXBzaG90LmlucHV0IGludG8gaW5cbiAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgKCBTbmFwc2hvdC5jcmVhdGUgfnJlc3VsdCB+aW5wdXQgfmxpZmVjeWNsZVxuICAgICAgLCBUaHJlYWRfZW52LmNhcHR1cmUgdGhyZWFkX2Vudmlyb25tZW50IH5lbnZpcm9ubWVudCB+bWF5YmVfZW52IClcbiAgaW5cbiAgVFxuICAgIHsgcnVuXG4gICAgOyBpbnB1dCA9IGluZm9faW50by5pbnB1dFxuICAgIDsgbW9kZWwgPSBpbmZvX2ludG8ubW9kZWxcbiAgICA7IGFjdGlvbiA9IGluZm9faW50by5hY3Rpb25cbiAgICA7IGFwcGx5X2FjdGlvbiA9IGluZm9faW50by5hcHBseV9hY3Rpb25cbiAgICA7IHJlc2V0ID0gaW5mb19pbnRvLnJlc2V0XG4gICAgOyBtYXlfY29udGFpbl9wYXRoID1cbiAgICAgICAgTWF5X2NvbnRhaW4uUGF0aC5tZXJnZSBpbmZvX2Zyb20ubWF5X2NvbnRhaW5fcGF0aCBpbmZvX2ludG8ubWF5X2NvbnRhaW5fcGF0aFxuICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID1cbiAgICAgICAgTWF5X2NvbnRhaW4uTGlmZWN5Y2xlLm1lcmdlXG4gICAgICAgICAgaW5mb19mcm9tLm1heV9jb250YWluX2xpZmVjeWNsZVxuICAgICAgICAgIGluZm9faW50by5tYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICB9XG47O1xuXG5sZXQgaW50b19zdGF0ZWxlc3NcbiAgKHR5cGUgdGhyZWFkX2VudilcbiAgfmhlcmVcbiAgfihpbmZvX2Zyb20gOiAoXywgXywgXywgXywgdGhyZWFkX2VudikgQ29tcHV0YXRpb24uaW5mbylcbiAgfihpbmZvX2ludG8gOiAoXywgXywgXywgXywgdGhyZWFkX2VudikgQ29tcHV0YXRpb24uaW5mbylcbiAgfnZpYVxuICB+KHRocmVhZF9lbnZpcm9ubWVudCA6IHRocmVhZF9lbnYgVGhyZWFkX2Vudi50KVxuICA6IChfLCB0aHJlYWRfZW52KSBDb21wdXRhdGlvbi5wYWNrZWRfaW5mb1xuICA9XG4gIGxldCBib3RoX3VzZV9wYXRoID1cbiAgICBib3RoX3VzZV9wYXRoIGluZm9fZnJvbS5tYXlfY29udGFpbl9wYXRoIGluZm9faW50by5tYXlfY29udGFpbl9wYXRoXG4gIGluXG4gIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdCA9XG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSBmcm9tLCBtYXliZV9lbnYgPVxuICAgICAgbGV0IHBhdGggPSBpZiBib3RoX3VzZV9wYXRoIHRoZW4gUGF0aC5hcHBlbmQgcGF0aCBQYXRoLkVsZW0uU3Vic3RfZnJvbSBlbHNlIHBhdGggaW5cbiAgICAgIGluZm9fZnJvbS5ydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdFxuICAgIGluXG4gICAgU25hcHNob3QuYXR0cmlidXRlX3Bvc2l0aW9ucyBoZXJlIGZyb207XG4gICAgbGV0IGZyb21fcmVzdWx0ID0gU25hcHNob3QucmVzdWx0IGZyb20gaW5cbiAgICBsZXQgZW52aXJvbm1lbnQgPSBUaHJlYWRfZW52LnBpY2sgdGhyZWFkX2Vudmlyb25tZW50IH5lbnZpcm9ubWVudCB+bWF5YmVfZW52IGluXG4gICAgbGV0IGVudmlyb25tZW50ID0gRW52aXJvbm1lbnQuYWRkX2V4biBlbnZpcm9ubWVudCB+a2V5OnZpYSB+ZGF0YTpmcm9tX3Jlc3VsdCBpblxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgaW50bywgbWF5YmVfZW52ID1cbiAgICAgIGxldCBwYXRoID0gaWYgYm90aF91c2VfcGF0aCB0aGVuIFBhdGguYXBwZW5kIHBhdGggUGF0aC5FbGVtLlN1YnN0X2ludG8gZWxzZSBwYXRoIGluXG4gICAgICBpbmZvX2ludG8ucnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsOnVuaXRfbW9kZWwgfmluamVjdDp1bnJlYWNoYWJsZV9hY3Rpb25cbiAgICBpblxuICAgIGxldCByZXN1bHQgPSBTbmFwc2hvdC5yZXN1bHQgaW50byBpblxuICAgIGxldCBsaWZlY3ljbGUgPVxuICAgICAgT3B0aW9uLm1lcmdlXG4gICAgICAgIChTbmFwc2hvdC5saWZlY3ljbGUgZnJvbSlcbiAgICAgICAgKFNuYXBzaG90LmxpZmVjeWNsZSBpbnRvKVxuICAgICAgICB+ZjpMaWZlY3ljbGUuQ29sbGVjdGlvbi5tZXJnZVxuICAgIGluXG4gICAgbGV0IGlucHV0ID0gU25hcHNob3QuaW5wdXQgZnJvbSBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoIFNuYXBzaG90LmNyZWF0ZSB+cmVzdWx0IH5pbnB1dCB+bGlmZWN5Y2xlXG4gICAgICAsIFRocmVhZF9lbnYuY2FwdHVyZSB0aHJlYWRfZW52aXJvbm1lbnQgfmVudmlyb25tZW50IH5tYXliZV9lbnYgKVxuICBpblxuICBUXG4gICAgeyBydW5cbiAgICA7IGlucHV0ID0gaW5mb19mcm9tLmlucHV0XG4gICAgOyBtb2RlbCA9IGluZm9fZnJvbS5tb2RlbFxuICAgIDsgYWN0aW9uID0gaW5mb19mcm9tLmFjdGlvblxuICAgIDsgYXBwbHlfYWN0aW9uID0gaW5mb19mcm9tLmFwcGx5X2FjdGlvblxuICAgIDsgcmVzZXQgPSBpbmZvX2Zyb20ucmVzZXRcbiAgICA7IG1heV9jb250YWluX3BhdGggPVxuICAgICAgICBNYXlfY29udGFpbi5QYXRoLm1lcmdlIGluZm9fZnJvbS5tYXlfY29udGFpbl9wYXRoIGluZm9faW50by5tYXlfY29udGFpbl9wYXRoXG4gICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPVxuICAgICAgICBNYXlfY29udGFpbi5MaWZlY3ljbGUubWVyZ2VcbiAgICAgICAgICBpbmZvX2Zyb20ubWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICAgaW5mb19pbnRvLm1heV9jb250YWluX2xpZmVjeWNsZVxuICAgIH1cbjs7XG5cbmxldCBnYXRoZXJcbiAgKHR5cGUgdGhyZWFkX2VudiBhIGIgYyBkIGUgZiBnIGgpXG4gIH5oZXJlXG4gIH4oaW5mb19mcm9tIDogKGEsIGIsIGMsIGQsIHRocmVhZF9lbnYpIENvbXB1dGF0aW9uLmluZm8pXG4gIH4oaW5mb19pbnRvIDogKGUsIGYsIGcsIGgsIHRocmVhZF9lbnYpIENvbXB1dGF0aW9uLmluZm8pXG4gIH52aWFcbiAgfih0aHJlYWRfZW52aXJvbm1lbnQgOiB0aHJlYWRfZW52IFRocmVhZF9lbnYudClcbiAgOiAoXywgdGhyZWFkX2VudikgQ29tcHV0YXRpb24ucGFja2VkX2luZm9cbiAgPVxuICBsZXQgaXNfdW5pdCB4ID0gTWV0YS5Nb2RlbC5UeXBlX2lkLnNhbWVfd2l0bmVzcyBNZXRhLk1vZGVsLnVuaXQudHlwZV9pZCB4IGluXG4gIGxldCBmcm9tX21vZGVsID0gaXNfdW5pdCBpbmZvX2Zyb20ubW9kZWwudHlwZV9pZCBpblxuICBsZXQgZnJvbV9hY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5zYW1lX3dpdG5lc3MgaW5mb19mcm9tLmFjdGlvbiBBY3Rpb24uVHlwZV9pZC5ub3RoaW5nIGluXG4gIGxldCBvcGVuIE9wdGlvbi5MZXRfc3ludGF4IGluXG4gIGxldCBjYW5fcnVuX2Zyb21fc3RhdGVsZXNzID1cbiAgICBsZXQlYmluZCBhID0gZnJvbV9tb2RlbCBpblxuICAgIGxldCViaW5kIGIgPSBmcm9tX2FjdGlvbiBpblxuICAgIFNvbWUgKGEsIGIpXG4gIGluXG4gIG1hdGNoIGNhbl9ydW5fZnJvbV9zdGF0ZWxlc3Mgd2l0aFxuICB8IFNvbWUgKFQsIFQpIC0+IGZyb21fc3RhdGVsZXNzIH5oZXJlIH5pbmZvX2Zyb20gfmluZm9faW50byB+dmlhIH50aHJlYWRfZW52aXJvbm1lbnRcbiAgfCBOb25lIC0+XG4gICAgbGV0IGludG9fbW9kZWwgPSBpc191bml0IGluZm9faW50by5tb2RlbC50eXBlX2lkIGluXG4gICAgbGV0IGludG9fYWN0aW9uID1cbiAgICAgIEFjdGlvbi5UeXBlX2lkLnNhbWVfd2l0bmVzcyBpbmZvX2ludG8uYWN0aW9uIEFjdGlvbi5UeXBlX2lkLm5vdGhpbmdcbiAgICBpblxuICAgIGxldCBjYW5fcnVuX2ludG9fc3RhdGVsZXNzID1cbiAgICAgIGxldCViaW5kIGEgPSBpbnRvX21vZGVsIGluXG4gICAgICBsZXQlYmluZCBiID0gaW50b19hY3Rpb24gaW5cbiAgICAgIFNvbWUgKGEsIGIpXG4gICAgaW5cbiAgICAobWF0Y2ggY2FuX3J1bl9pbnRvX3N0YXRlbGVzcyB3aXRoXG4gICAgIHwgU29tZSAoVCwgVCkgLT4gaW50b19zdGF0ZWxlc3MgfmhlcmUgfmluZm9fZnJvbSB+aW5mb19pbnRvIH52aWEgfnRocmVhZF9lbnZpcm9ubWVudFxuICAgICB8IE5vbmUgLT4gYmFzZWxpbmUgfmhlcmUgfmluZm9fZnJvbSB+aW5mb19pbnRvIH52aWEgfnRocmVhZF9lbnZpcm9ubWVudClcbjs7XG5cbm1vZHVsZSBDaGFpbiA9IHN0cnVjdFxuICBtb2R1bGUgTGluayA9IHN0cnVjdFxuICAgIHR5cGUgdCA9XG4gICAgICB8IFQgOlxuICAgICAgICAgIHsgYm91bmQgOiAoJ2EsIEVudmlyb25tZW50LnQgb3B0aW9uKSBDb21wdXRhdGlvbi5wYWNrZWRfaW5mb1xuICAgICAgICAgIDsgdmlhIDogJ2EgVHlwZV9lcXVhbC5JZC50XG4gICAgICAgICAgOyBoZXJlIDogU291cmNlX2NvZGVfcG9zaXRpb24udCBvcHRpb25cbiAgICAgICAgICB9XG4gICAgICAgICAgLT4gdFxuICBlbmRcblxuICB0eXBlICdhIHQgPVxuICAgIHsgaW5pdCA6IExpbmsudCBsaXN0XG4gICAgOyBsZW5ndGhfb2ZfaW5pdCA6IGludFxuICAgIDsgZmluYWwgOiAoJ2EsIHVuaXQpIENvbXB1dGF0aW9uLnBhY2tlZF9pbmZvXG4gICAgfVxuXG4gIHR5cGUgcmVjdXJzZSA9XG4gICAgeyBmIDogJ2EuICdhIENvbXB1dGF0aW9uLnQgLT4gKCdhLCB1bml0KSBDb21wdXRhdGlvbi5wYWNrZWRfaW5mbyBUcmFtcG9saW5lLnQgfVxuXG4gIGxldCByZWMgYnVpbGRfY2hhaW4gY29tcHV0YXRpb24gfmFjYyB+bGVuZ3RoX29mX2FjYyB+cmVjdXJzZSA9XG4gICAgbWF0Y2ggKGNvbXB1dGF0aW9uIDogXyBDb21wdXRhdGlvbi50KSB3aXRoXG4gICAgfCBTdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfSAtPlxuICAgICAgbGV0JWJpbmQuVHJhbXBvbGluZSBmcm9tID0gcmVjdXJzZS5mIGZyb20gaW5cbiAgICAgIGxldCBib3VuZCA9IENvbXB1dGF0aW9uX2luZm8ud2l0aF90aHJlYWRlZF9lbnZpcm9ubWVudCBmcm9tIGluXG4gICAgICBidWlsZF9jaGFpblxuICAgICAgICBpbnRvXG4gICAgICAgIH5hY2M6UmV2ZXJzZWRfbGlzdC4oTGluay5UIHsgYm91bmQ7IHZpYTsgaGVyZSB9IDo6IGFjYylcbiAgICAgICAgfmxlbmd0aF9vZl9hY2M6KGxlbmd0aF9vZl9hY2MgKyAxKVxuICAgICAgICB+cmVjdXJzZVxuICAgIHwgZmluYWwgLT5cbiAgICAgIGxldCViaW5kLlRyYW1wb2xpbmUgZmluYWwgPSByZWN1cnNlLmYgZmluYWwgaW5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAgIHsgZmluYWw7IGluaXQgPSBSZXZlcnNlZF9saXN0LnJldiBhY2M7IGxlbmd0aF9vZl9pbml0ID0gbGVuZ3RoX29mX2FjYyB9XG4gIDs7XG5cbiAgbGV0IHJlZHVjZVxuICAgIChMaW5rLlQgeyBib3VuZCA9IFQgYm91bmRfbGVmdDsgdmlhID0gdmlhX2xlZnQ7IGhlcmUgPSBoZXJlX2xlZnQgfSlcbiAgICAoTGluay5UIHsgYm91bmQgPSBUIGJvdW5kX3JpZ2h0OyB2aWEgPSB2aWFfcmlnaHQ7IGhlcmUgPSBoZXJlX3JpZ2h0IH0pXG4gICAgPVxuICAgIGxldCBib3VuZCA9XG4gICAgICBnYXRoZXJcbiAgICAgICAgfmhlcmU6aGVyZV9sZWZ0XG4gICAgICAgIH5pbmZvX2Zyb206Ym91bmRfbGVmdFxuICAgICAgICB+aW5mb19pbnRvOmJvdW5kX3JpZ2h0XG4gICAgICAgIH52aWE6dmlhX2xlZnRcbiAgICAgICAgfnRocmVhZF9lbnZpcm9ubWVudDpUaHJlYWRfZW52XG4gICAgaW5cbiAgICBMaW5rLlQgeyBib3VuZDsgdmlhID0gdmlhX3JpZ2h0OyBoZXJlID0gaGVyZV9yaWdodCB9XG4gIDs7XG5cbiAgbGV0IGdhdGhlciA9IGZ1bmN0aW9uXG4gICAgfCB7IGluaXQgPSBbXTsgZmluYWw7IF8gfSAtPiBmaW5hbFxuICAgIHwgeyBpbml0OyBmaW5hbDsgbGVuZ3RoX29mX2luaXQgfSAtPlxuICAgICAgbGV0IHJlZHVjZXIgPSBCYWxhbmNlZF9yZWR1Y2VyLmNyZWF0ZV9leG4gfmxlbjpsZW5ndGhfb2ZfaW5pdCB+cmVkdWNlICgpIGluXG4gICAgICBMaXN0Lml0ZXJpIGluaXQgfmY6KGZ1biBpIGxpbmsgLT4gQmFsYW5jZWRfcmVkdWNlci5zZXRfZXhuIHJlZHVjZXIgaSBsaW5rKTtcbiAgICAgIGxldCAoVCB7IGJvdW5kID0gVCBpbmZvX2Zyb207IHZpYTsgaGVyZSB9KSA9IEJhbGFuY2VkX3JlZHVjZXIuY29tcHV0ZV9leG4gcmVkdWNlciBpblxuICAgICAgbGV0IChUIGluZm9faW50bykgPSBDb21wdXRhdGlvbl9pbmZvLndpdGhfdGhyZWFkZWRfZW52aXJvbm1lbnQgZmluYWwgaW5cbiAgICAgIGdhdGhlciB+aGVyZSB+aW5mb19mcm9tIH5pbmZvX2ludG8gfnZpYSB+dGhyZWFkX2Vudmlyb25tZW50OlRocmVhZF9lbnZcbiAgICAgIHw+IENvbXB1dGF0aW9uX2luZm8uZHJvcF90aHJlYWRlZF9lbnZpcm9ubWVudFxuICA7O1xuXG4gIGxldCBnYXRoZXIgY29tcHV0YXRpb24gfnJlY3Vyc2UgPVxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgdCA9IGJ1aWxkX2NoYWluIGNvbXB1dGF0aW9uIH5yZWN1cnNlIH5sZW5ndGhfb2ZfYWNjOjAgfmFjYzpbXSBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuIChnYXRoZXIgdClcbiAgOztcbmVuZFxuXG5sZXQgZ2F0aGVyIH5oZXJlIH5pbmZvX2Zyb20gfmluZm9faW50byB+dmlhID1cbiAgZ2F0aGVyIH5oZXJlIH5pbmZvX2Zyb20gfmluZm9faW50byB+dmlhIH50aHJlYWRfZW52aXJvbm1lbnQ6Tm9uZVxuOztcblxudHlwZSBnZW5lcmljX2dhdGhlciA9IENoYWluLnJlY3Vyc2UgPVxuICB7IGYgOiAnYS4gJ2EgQ29tcHV0YXRpb24udCAtPiAoJ2EsIHVuaXQpIENvbXB1dGF0aW9uLnBhY2tlZF9pbmZvIFRyYW1wb2xpbmUudCB9XG5cbmxldCBjaGFpbiBjIH5nYXRoZXIgPSBDaGFpbi5nYXRoZXIgYyB+cmVjdXJzZTpnYXRoZXJcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxub3BlbiBJbmNyLkxldF9zeW50YXhcblxubGV0ICggPj4+ICkgZiBpbmplY3QgYiA9IGluamVjdCAoZiBiKVxubGV0ICgpID0gSW5jci5TdGF0ZS4oc2V0X21heF9oZWlnaHRfYWxsb3dlZCB0IDEwMjQpXG5cbmxldCB1bnppcDNfbWFwaScgbWFwIH5tYXlfY29udGFpbl9saWZlY3ljbGUgfmNvbXBhcmF0b3IgfmYgPVxuICBtYXRjaCAobWF5X2NvbnRhaW5fbGlmZWN5Y2xlIDogTWF5X2NvbnRhaW4uTGlmZWN5Y2xlLnQpIHdpdGhcbiAgfCBObyAtPlxuICAgICgqIGlmIHdlIGtub3cgdGhhdCBbZl0gYWx3YXlzIHJldHVybnMgYSB0cmlwbGUgd2hvc2UgbGFzdCBlbGVtZW50ICh0aGUgbGlmZWN5Y2xlXG4gICAgICAgaW5jcmVtZW50YWwpIGlzIGFsd2F5cyB0aGUgZW1wdHkgbGlmZWN5Y2xlIGNvbGxlY3Rpb24sIHRoZW4gd2UgY2FuIGRyb3AgaXQgXG4gICAgICAgaGVyZSwgYW5kIGF2b2lkIG5lc3RpbmcgdW56aXBzICopXG4gICAgbGV0IGZpcnN0LCBzZWNvbmQgPVxuICAgICAgSW5jcl9tYXAudW56aXBfbWFwaScgbWFwIH5mOihmdW4gfmtleSB+ZGF0YSAtPlxuICAgICAgICBsZXQgYSwgYiwgXyA9IGYgfmtleSB+ZGF0YSBpblxuICAgICAgICBhLCBiKVxuICAgIGluXG4gICAgZmlyc3QsIHNlY29uZCwgSW5jci5yZXR1cm4gKE1hcC5lbXB0eSBjb21wYXJhdG9yKVxuICB8IFllc19vcl9tYXliZSAtPlxuICAgIGxldCBmaXJzdCwgc2Vjb25kX2FuZF90aGlyZCA9XG4gICAgICBJbmNyX21hcC51bnppcF9tYXBpJyBtYXAgfmY6KGZ1biB+a2V5IH5kYXRhIC0+XG4gICAgICAgIGxldCBhLCBiLCBjID0gZiB+a2V5IH5kYXRhIGluXG4gICAgICAgIGxldCBiYyA9IEluY3IuYm90aCBiIGMgaW5cbiAgICAgICAgYW5ub3RhdGUgTGlmZWN5Y2xlX2FwcGx5X2FjdGlvbl9wYWlyIGJjO1xuICAgICAgICBhLCBiYylcbiAgICBpblxuICAgIGxldCBzZWNvbmQsIHRoaXJkID0gSW5jcl9tYXAudW56aXAgc2Vjb25kX2FuZF90aGlyZCBpblxuICAgIGZpcnN0LCBzZWNvbmQsIHRoaXJkXG47O1xuXG5sZXQgZG9fbm90aGluZ19saWZlY3ljbGUgPSBJbmNyLnJldHVybiBMaWZlY3ljbGUuQ29sbGVjdGlvbi5lbXB0eVxuXG5sZXQgcmVjIGdhdGhlclxuICA6IHR5cGUgcmVzdWx0LlxuICAgIHJlc3VsdCBDb21wdXRhdGlvbi50IC0+IChyZXN1bHQsIHVuaXQpIENvbXB1dGF0aW9uLnBhY2tlZF9pbmZvIFRyYW1wb2xpbmUudFxuICA9XG4gIGxldCBvcGVuIENvbXB1dGF0aW9uIGluXG4gIGZ1bmN0aW9uXG4gIHwgUmV0dXJuIHZhbHVlIC0+XG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQgfnBhdGg6XyB+Y2xvY2s6XyB+bW9kZWw6XyB+aW5qZWN0Ol8gPVxuICAgICAgbGV0IHJlc3VsdCA9IFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgdmFsdWUgaW5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuIChTbmFwc2hvdC5jcmVhdGUgfnJlc3VsdCB+aW5wdXQ6SW5wdXQuc3RhdGljIH5saWZlY3ljbGU6Tm9uZSwgKCkpXG4gICAgaW5cbiAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgKFRcbiAgICAgICAgIHsgbW9kZWwgPSBNZXRhLk1vZGVsLnVuaXRcbiAgICAgICAgIDsgaW5wdXQgPSBNZXRhLklucHV0LnVuaXRcbiAgICAgICAgIDsgYWN0aW9uID0gQWN0aW9uLlR5cGVfaWQubm90aGluZ1xuICAgICAgICAgOyBhcHBseV9hY3Rpb24gPSB1bnVzYWJsZV9hcHBseV9hY3Rpb25cbiAgICAgICAgIDsgcmVzZXQgPSByZXNldF91bml0X21vZGVsXG4gICAgICAgICA7IHJ1blxuICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoID0gTm9cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gTm9cbiAgICAgICAgIH0pXG4gIHwgTGVhZjEgeyBtb2RlbDsgaW5wdXRfaWQ7IGR5bmFtaWNfYWN0aW9uOyBhcHBseV9hY3Rpb247IGlucHV0OyByZXNldCB9IC0+XG4gICAgbGV0IHdyYXBfbGVhZiBpbmplY3QgPSBBY3Rpb24uZHluYW1pY19sZWFmID4+PiBpbmplY3QgaW5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aDpfIH5jbG9jazpfIH5tb2RlbCB+aW5qZWN0ID1cbiAgICAgIGFubm90YXRlIE1vZGVsIG1vZGVsO1xuICAgICAgbGV0IGlucHV0ID0gVmFsdWUuZXZhbCBlbnZpcm9ubWVudCBpbnB1dCBpblxuICAgICAgKCogSXQncyBpbXBvcnRhbnQgdG8gY3JlYXRlIFtpbmplY3RfZHluYW1pY10gb3V0c2lkZSBvZiB0aGUgW2xldCVtYXBuXSBzbyB0aGF0IGl0XG4gICAgICAgICByZW1haW5zIFtwaHlzX2VxdWFsXSB3aGVuIHRoZSBbbW9kZWxdIGNoYW5nZXMuICopXG4gICAgICBsZXQgaW5qZWN0X2R5bmFtaWMgPSB3cmFwX2xlYWYgaW5qZWN0IGluXG4gICAgICBsZXQgcmVzdWx0ID1cbiAgICAgICAgbGV0JW1hcG4gbW9kZWwgPSBtb2RlbCBpblxuICAgICAgICBtb2RlbCwgaW5qZWN0X2R5bmFtaWNcbiAgICAgIGluXG4gICAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgICAoU25hcHNob3QuY3JlYXRlIH5yZXN1bHQgfmlucHV0OihJbnB1dC5keW5hbWljIGlucHV0KSB+bGlmZWN5Y2xlOk5vbmUsICgpKVxuICAgIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvbiB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBpbnB1dCBtb2RlbCA9IGZ1bmN0aW9uXG4gICAgICB8IEFjdGlvbi5MZWFmX3N0YXRpYyBfIC0+XG4gICAgICAgIGVwcmludF9zXG4gICAgICAgICAgWyVtZXNzYWdlIFwiQlVHOiBzdGF0ZV9tYWNoaW5lMSdzIGFwcGx5X2FjdGlvbiB3YXMgY2FsbGVkIHdpdGggYSBkeW5hbWljIGFjdGlvblwiXTtcbiAgICAgICAgbW9kZWxcbiAgICAgIHwgTGVhZl9keW5hbWljIGFjdGlvbiAtPlxuICAgICAgICBhcHBseV9hY3Rpb24gfmluamVjdDood3JhcF9sZWFmIGluamVjdCkgfnNjaGVkdWxlX2V2ZW50IGlucHV0IG1vZGVsIGFjdGlvblxuICAgIGluXG4gICAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsID1cbiAgICAgIHJlc2V0IH5pbmplY3Q6KHdyYXBfbGVhZiBpbmplY3QpIH5zY2hlZHVsZV9ldmVudCBtb2RlbFxuICAgIGluXG4gICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgIChUXG4gICAgICAgICB7IG1vZGVsXG4gICAgICAgICA7IGlucHV0ID0gaW5wdXRfaWRcbiAgICAgICAgIDsgYWN0aW9uID0gQWN0aW9uLlR5cGVfaWQubGVhZiBkeW5hbWljX2FjdGlvblxuICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBOb1xuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPSBOb1xuICAgICAgICAgfSlcbiAgfCBMZWFmMCB7IG1vZGVsOyBzdGF0aWNfYWN0aW9uOyBhcHBseV9hY3Rpb247IHJlc2V0IH0gLT5cbiAgICBsZXQgd3JhcF9sZWFmIGluamVjdCA9IEFjdGlvbi5zdGF0aWNfbGVhZiA+Pj4gaW5qZWN0IGluXG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQ6XyB+cGF0aDpfIH5jbG9jazpfIH5tb2RlbCB+aW5qZWN0ID1cbiAgICAgIGFubm90YXRlIE1vZGVsIG1vZGVsO1xuICAgICAgKCogSXQncyBpbXBvcnRhbnQgdG8gY3JlYXRlIFtpbmplY3Rfc3RhdGljXSBvdXRzaWRlIG9mIHRoZSBbbGV0JW1hcG5dIHNvIHRoYXQgaXRcbiAgICAgICAgIHJlbWFpbnMgW3BoeXNfZXF1YWxdIHdoZW4gdGhlIFttb2RlbF0gY2hhbmdlcy4gKilcbiAgICAgIGxldCBpbmplY3Rfc3RhdGljID0gd3JhcF9sZWFmIGluamVjdCBpblxuICAgICAgbGV0IHJlc3VsdCA9XG4gICAgICAgIGxldCVtYXAgbW9kZWwgPSBtb2RlbCBpblxuICAgICAgICBtb2RlbCwgaW5qZWN0X3N0YXRpY1xuICAgICAgaW5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuIChTbmFwc2hvdC5jcmVhdGUgfnJlc3VsdCB+aW5wdXQ6SW5wdXQuc3RhdGljIH5saWZlY3ljbGU6Tm9uZSwgKCkpXG4gICAgaW5cbiAgICBsZXQgYXBwbHlfYWN0aW9uIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IF9pbnB1dCBtb2RlbCA9IGZ1bmN0aW9uXG4gICAgICB8IEFjdGlvbi5MZWFmX2R5bmFtaWMgXyAtPlxuICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgIFslbWVzc2FnZSBcIkJVRzogc3RhdGVfbWFjaGluZTAncyBhcHBseV9hY3Rpb24gd2FzIGNhbGxlZCB3aXRoIGEgZHluYW1pYyBhY3Rpb25cIl07XG4gICAgICAgIG1vZGVsXG4gICAgICB8IExlYWZfc3RhdGljIGFjdGlvbiAtPlxuICAgICAgICBhcHBseV9hY3Rpb24gfmluamVjdDood3JhcF9sZWFmIGluamVjdCkgfnNjaGVkdWxlX2V2ZW50IG1vZGVsIGFjdGlvblxuICAgIGluXG4gICAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsID1cbiAgICAgIHJlc2V0IH5pbmplY3Q6KHdyYXBfbGVhZiBpbmplY3QpIH5zY2hlZHVsZV9ldmVudCBtb2RlbFxuICAgIGluXG4gICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgIChUXG4gICAgICAgICB7IG1vZGVsXG4gICAgICAgICA7IGlucHV0ID0gTWV0YS5JbnB1dC51bml0XG4gICAgICAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLmxlYWYgc3RhdGljX2FjdGlvblxuICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBOb1xuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPSBOb1xuICAgICAgICAgfSlcbiAgfCBMZWFmX2luY3IgeyBpbnB1dDsgY29tcHV0ZSB9IC0+XG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQgfnBhdGg6XyB+Y2xvY2sgfm1vZGVsOl8gfmluamVjdDpfID1cbiAgICAgIGxldCBpbnB1dCA9IFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgaW5wdXQgaW5cbiAgICAgIGxldCByZXN1bHQgPSBjb21wdXRlIGNsb2NrIGlucHV0IGluXG4gICAgICBUcmFtcG9saW5lLnJldHVybiAoU25hcHNob3QuY3JlYXRlIH5yZXN1bHQgfmlucHV0OklucHV0LnN0YXRpYyB+bGlmZWN5Y2xlOk5vbmUsICgpKVxuICAgIGluXG4gICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgIChUXG4gICAgICAgICB7IG1vZGVsID0gTWV0YS5Nb2RlbC51bml0XG4gICAgICAgICA7IGlucHV0ID0gTWV0YS5JbnB1dC51bml0XG4gICAgICAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLm5vdGhpbmdcbiAgICAgICAgIDsgYXBwbHlfYWN0aW9uID0gdW51c2FibGVfYXBwbHlfYWN0aW9uXG4gICAgICAgICA7IHJlc2V0ID0gcmVzZXRfdW5pdF9tb2RlbFxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aCA9IE5vXG4gICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZSA9IE5vXG4gICAgICAgICB9KVxuICB8IFN1YiB7IGludG8gPSBTdWIgeyBpbnRvID0gU3ViIF87IF8gfTsgXyB9IGFzIHQgLT5cbiAgICBFdmFsX3N1Yi5jaGFpbiB0IH5nYXRoZXI6eyBmID0gZ2F0aGVyIH1cbiAgfCBTdWIgeyBmcm9tOyB2aWE7IGludG87IGhlcmUgfSAtPlxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgKFQgaW5mb19mcm9tKSA9IGdhdGhlciBmcm9tIGluXG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSAoVCBpbmZvX2ludG8pID0gZ2F0aGVyIGludG8gaW5cbiAgICBUcmFtcG9saW5lLnJldHVybiAoRXZhbF9zdWIuZ2F0aGVyIH5oZXJlIH5pbmZvX2Zyb20gfmluZm9faW50byB+dmlhKVxuICB8IFN0b3JlIHsgaWQ7IHZhbHVlOyBpbm5lciB9IC0+XG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSAoVCBnYXRoZXJlZCkgPSBnYXRoZXIgaW5uZXIgaW5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgPVxuICAgICAgbGV0IHZhbHVlID0gVmFsdWUuZXZhbCBlbnZpcm9ubWVudCB2YWx1ZSBpblxuICAgICAgbGV0IGVudmlyb25tZW50ID0gRW52aXJvbm1lbnQuYWRkX292ZXJ3cml0aW5nIGVudmlyb25tZW50IH5rZXk6aWQgfmRhdGE6dmFsdWUgaW5cbiAgICAgIGdhdGhlcmVkLnJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0XG4gICAgaW5cbiAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgKFRcbiAgICAgICAgIHsgcnVuXG4gICAgICAgICA7IGlucHV0ID0gZ2F0aGVyZWQuaW5wdXRcbiAgICAgICAgIDsgbW9kZWwgPSBnYXRoZXJlZC5tb2RlbFxuICAgICAgICAgOyBhY3Rpb24gPSBnYXRoZXJlZC5hY3Rpb25cbiAgICAgICAgIDsgYXBwbHlfYWN0aW9uID0gZ2F0aGVyZWQuYXBwbHlfYWN0aW9uXG4gICAgICAgICA7IHJlc2V0ID0gZ2F0aGVyZWQucmVzZXRcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aCA9IGdhdGhlcmVkLm1heV9jb250YWluX3BhdGhcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gZ2F0aGVyZWQubWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICB9KVxuICB8IEZldGNoIHsgaWQ7IGRlZmF1bHQ7IGZvcl9zb21lIH0gLT5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aDpfIH5jbG9jazpfIH5tb2RlbDpfIH5pbmplY3Q6XyA9XG4gICAgICBsZXQgcmVzdWx0ID1cbiAgICAgICAgbWF0Y2ggRW52aXJvbm1lbnQuZmluZCBlbnZpcm9ubWVudCBpZCB3aXRoXG4gICAgICAgIHwgTm9uZSAtPiBJbmNyLnJldHVybiBkZWZhdWx0XG4gICAgICAgIHwgU29tZSB4IC0+IEluY3IubWFwIHggfmY6KGZ1biBhIC0+IGZvcl9zb21lIGEpXG4gICAgICBpblxuICAgICAgVHJhbXBvbGluZS5yZXR1cm4gKFNuYXBzaG90LmNyZWF0ZSB+cmVzdWx0IH5saWZlY3ljbGU6Tm9uZSB+aW5wdXQ6SW5wdXQuc3RhdGljLCAoKSlcbiAgICBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoVFxuICAgICAgICAgeyBtb2RlbCA9IE1ldGEuTW9kZWwudW5pdFxuICAgICAgICAgOyBpbnB1dCA9IE1ldGEuSW5wdXQudW5pdFxuICAgICAgICAgOyBhY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5ub3RoaW5nXG4gICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IHVudXNhYmxlX2FwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldCA9IHJlc2V0X3VuaXRfbW9kZWxcbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBOb1xuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPSBOb1xuICAgICAgICAgfSlcbiAgfCBBc3NvYyB7IG1hcDsga2V5X2NvbXBhcmF0b3I7IGtleV9pZDsgY21wX2lkOyBkYXRhX2lkOyBieSB9IC0+XG4gICAgbGV0IG1vZHVsZSBDbXAgPSAodmFsIGtleV9jb21wYXJhdG9yKSBpblxuICAgIGxldCB3cmFwX2Fzc29jIH5rZXkgaW5qZWN0ID1cbiAgICAgIEFjdGlvbi5hc3NvYyB+aWQ6a2V5X2lkIH5jb21wYXJlOkNtcC5jb21wYXJhdG9yLmNvbXBhcmUgfmtleSA+Pj4gaW5qZWN0XG4gICAgaW5cbiAgICBsZXQlYmluZC5UcmFtcG9saW5lIChUXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsgbW9kZWwgPSBtb2RlbF9pbmZvXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgaW5wdXQgPSBpbnB1dF9pbmZvXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgcnVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICA9XG4gICAgICBnYXRoZXIgYnlcbiAgICBpblxuICAgIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdCA9XG4gICAgICBsZXQgbWFwX2lucHV0ID0gVmFsdWUuZXZhbCBlbnZpcm9ubWVudCBtYXAgaW5cbiAgICAgIGxldCBpbnB1dF9hbmRfbW9kZWxzX21hcCA9XG4gICAgICAgIEluY3JfbWFwLm1lcmdlIG1hcF9pbnB1dCBtb2RlbCB+ZjooZnVuIH5rZXk6XyAtPiBmdW5jdGlvblxuICAgICAgICAgIHwgYExlZnQgaW5wdXQgLT4gU29tZSAoaW5wdXQsIG1vZGVsX2luZm8uZGVmYXVsdClcbiAgICAgICAgICB8IGBSaWdodCBfIC0+IE5vbmVcbiAgICAgICAgICB8IGBCb3RoIGlucHV0X2FuZF9tb2RlbHMgLT4gU29tZSBpbnB1dF9hbmRfbW9kZWxzKVxuICAgICAgaW5cbiAgICAgIGxldCBjcmVhdGVfa2V5ZWQgPVxuICAgICAgICB1bnN0YWdlIChQYXRoLkVsZW0ua2V5ZWQgfmNvbXBhcmU6Q21wLmNvbXBhcmF0b3IuY29tcGFyZSBrZXlfaWQpXG4gICAgICBpblxuICAgICAgbGV0IHJlc3VsdHNfbWFwLCBpbnB1dF9tYXAsIGxpZmVjeWNsZV9tYXAgPVxuICAgICAgICB1bnppcDNfbWFwaSdcbiAgICAgICAgICBpbnB1dF9hbmRfbW9kZWxzX21hcFxuICAgICAgICAgIH5jb21wYXJhdG9yOihtb2R1bGUgQ21wKVxuICAgICAgICAgIH5tYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgICB+ZjooZnVuIH5rZXkgfmRhdGE6aW5wdXRfYW5kX21vZGVsIC0+XG4gICAgICAgICAgICBhbm5vdGF0ZSBNb2RlbF9hbmRfaW5wdXQgaW5wdXRfYW5kX21vZGVsO1xuICAgICAgICAgICAgbGV0IHBhdGggPVxuICAgICAgICAgICAgICBtYXRjaCBtYXlfY29udGFpbl9wYXRoIHdpdGhcbiAgICAgICAgICAgICAgfCBZZXNfb3JfbWF5YmUgLT4gUGF0aC5hcHBlbmQgcGF0aCBQYXRoLkVsZW0uKEFzc29jIChjcmVhdGVfa2V5ZWQga2V5KSlcbiAgICAgICAgICAgICAgfCBObyAtPiBwYXRoXG4gICAgICAgICAgICBpblxuICAgICAgICAgICAgbGV0JXBhdHRlcm5fYmluZCB2YWx1ZSwgbW9kZWwgPSBpbnB1dF9hbmRfbW9kZWwgaW5cbiAgICAgICAgICAgIGxldCBrZXlfaW5jciA9IEluY3IuY29uc3Qga2V5IGluXG4gICAgICAgICAgICBhbm5vdGF0ZSBBc3NvY19rZXkga2V5X2luY3I7XG4gICAgICAgICAgICBhbm5vdGF0ZSBBc3NvY19pbnB1dCB2YWx1ZTtcbiAgICAgICAgICAgIGxldCBlbnZpcm9ubWVudCA9XG4gICAgICAgICAgICAgICgqIEl0IGlzIHNhZmUgdG8gcmV1c2UgdGhlIHNhbWUgW2tleV9pZF0gYW5kIFtkYXRhX2lkXSBmb3IgZWFjaCBwYWlyIGluIHRoZSBtYXAsXG4gICAgICAgICAgICAgICAgIHNpbmNlIHRoZXkgYWxsIHN0YXJ0IHdpdGggYSBmcmVzaCBcImNvcHlcIiBvZiB0aGUgb3V0ZXIgZW52aXJvbm1lbnQuICopXG4gICAgICAgICAgICAgIGVudmlyb25tZW50XG4gICAgICAgICAgICAgIHw+IEVudmlyb25tZW50LmFkZF9leG4gfmtleTprZXlfaWQgfmRhdGE6a2V5X2luY3JcbiAgICAgICAgICAgICAgfD4gRW52aXJvbm1lbnQuYWRkX2V4biB+a2V5OmRhdGFfaWQgfmRhdGE6dmFsdWVcbiAgICAgICAgICAgIGluXG4gICAgICAgICAgICBsZXQgc25hcHNob3QsICgpID1cbiAgICAgICAgICAgICAgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfmluamVjdDood3JhcF9hc3NvYyB+a2V5IGluamVjdCkgfm1vZGVsXG4gICAgICAgICAgICAgIHw+IFRyYW1wb2xpbmUucnVuXG4gICAgICAgICAgICBpblxuICAgICAgICAgICAgKCBTbmFwc2hvdC5yZXN1bHQgc25hcHNob3RcbiAgICAgICAgICAgICwgSW5wdXQudG9faW5jcmVtZW50YWwgKFNuYXBzaG90LmlucHV0IHNuYXBzaG90KVxuICAgICAgICAgICAgLCBTbmFwc2hvdC5saWZlY3ljbGVfb3JfZW1wdHkgc25hcHNob3QgKSlcbiAgICAgIGluXG4gICAgICBhbm5vdGF0ZSBBc3NvY19yZXN1bHRzIHJlc3VsdHNfbWFwO1xuICAgICAgYW5ub3RhdGUgQXNzb2NfbGlmZWN5Y2xlcyBsaWZlY3ljbGVfbWFwO1xuICAgICAgYW5ub3RhdGUgQXNzb2NfaW5wdXRzIGlucHV0X21hcDtcbiAgICAgIGxldCBsaWZlY3ljbGUgPVxuICAgICAgICAoKiBpZiB3ZSBjYW4gcHJvdmUgdGhhdCB0aGUgYm9keSBvZiB0aGUgYXNzb2MgZG9lc24ndCBjb250YWluIGFcbiAgICAgICAgICAgbGlmZWN5Y2xlIG5vZGUsIHRoZW4gcmV0dXJuIE5vbmUsIGRyb3BwaW5nIHRoZSBjb25zdGFudCBpbmNyZW1lbnRhbFxuICAgICAgICAgICBub2RlIG9uIHRoZSBmbG9vci4gKilcbiAgICAgICAgbWF0Y2ggbWF5X2NvbnRhaW5fbGlmZWN5Y2xlIHdpdGhcbiAgICAgICAgfCBObyAtPiBOb25lXG4gICAgICAgIHwgWWVzX29yX21heWJlIC0+XG4gICAgICAgICAgbGV0IHVuZm9sZGVkID1cbiAgICAgICAgICAgIEluY3JfbWFwLnVub3JkZXJlZF9mb2xkX25lc3RlZF9tYXBzXG4gICAgICAgICAgICAgIGxpZmVjeWNsZV9tYXBcbiAgICAgICAgICAgICAgfmluaXQ6UGF0aC5NYXAuZW1wdHlcbiAgICAgICAgICAgICAgfmFkZDooZnVuIH5vdXRlcl9rZXk6XyB+aW5uZXJfa2V5OmtleSB+ZGF0YSBhY2MgLT5cbiAgICAgICAgICAgICAgICBNYXAudXBkYXRlIGFjYyBrZXkgfmY6KGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICB8IFNvbWUgXyAtPiBQYXRoLnJhaXNlX2R1cGxpY2F0ZSBrZXlcbiAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiBkYXRhKSlcbiAgICAgICAgICAgICAgfnJlbW92ZTooZnVuIH5vdXRlcl9rZXk6XyB+aW5uZXJfa2V5OmtleSB+ZGF0YTpfIGFjYyAtPiBNYXAucmVtb3ZlIGFjYyBrZXkpXG4gICAgICAgICAgaW5cbiAgICAgICAgICBhbm5vdGF0ZSBBc3NvY19saWZlY3ljbGVzIHVuZm9sZGVkO1xuICAgICAgICAgIFNvbWUgdW5mb2xkZWRcbiAgICAgIGluXG4gICAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgICAoIFNuYXBzaG90LmNyZWF0ZSB+cmVzdWx0OnJlc3VsdHNfbWFwIH5pbnB1dDooSW5wdXQuZHluYW1pYyBpbnB1dF9tYXApIH5saWZlY3ljbGVcbiAgICAgICAgLCAoKSApXG4gICAgaW5cbiAgICBsZXQgYXBwbHlfYWN0aW9uXG4gICAgICB+aW5qZWN0XG4gICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgIGlucHV0XG4gICAgICBtb2RlbFxuICAgICAgKEFjdGlvbi5Bc3NvYyB7IGtleTsgYWN0aW9uOyBpZCA9IF87IGNvbXBhcmUgPSBfIH0pXG4gICAgICA9XG4gICAgICBsZXQgaW5wdXQgPSBPcHRpb24uYmluZCBpbnB1dCB+ZjooZnVuIGlucHV0IC0+IE1hcC5maW5kIGlucHV0IGtleSkgaW5cbiAgICAgIGxldCBzcGVjaWZpY19tb2RlbCA9XG4gICAgICAgIE1hcC5maW5kIG1vZGVsIGtleSB8PiBPcHRpb24udmFsdWUgfmRlZmF1bHQ6bW9kZWxfaW5mby5kZWZhdWx0XG4gICAgICBpblxuICAgICAgbGV0IGRhdGEgPVxuICAgICAgICBhcHBseV9hY3Rpb25cbiAgICAgICAgICB+aW5qZWN0Oih3cmFwX2Fzc29jIH5rZXkgaW5qZWN0KVxuICAgICAgICAgIH5zY2hlZHVsZV9ldmVudFxuICAgICAgICAgIGlucHV0XG4gICAgICAgICAgc3BlY2lmaWNfbW9kZWxcbiAgICAgICAgICBhY3Rpb25cbiAgICAgIGluXG4gICAgICBpZiBtb2RlbF9pbmZvLmVxdWFsIGRhdGEgbW9kZWxfaW5mby5kZWZhdWx0XG4gICAgICB0aGVuIE1hcC5yZW1vdmUgbW9kZWwga2V5XG4gICAgICBlbHNlIE1hcC5zZXQgbW9kZWwgfmtleSB+ZGF0YVxuICAgIGluXG4gICAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsID1cbiAgICAgIE1hcC5maWx0ZXJfbWFwaSBtb2RlbCB+ZjooZnVuIH5rZXkgfmRhdGEgLT5cbiAgICAgICAgbGV0IG5ld19tb2RlbCA9IHJlc2V0IH5pbmplY3Q6KHdyYXBfYXNzb2MgfmtleSBpbmplY3QpIH5zY2hlZHVsZV9ldmVudCBkYXRhIGluXG4gICAgICAgIGlmIG1vZGVsX2luZm8uZXF1YWwgbmV3X21vZGVsIG1vZGVsX2luZm8uZGVmYXVsdCB0aGVuIE5vbmUgZWxzZSBTb21lIG5ld19tb2RlbClcbiAgICBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoVFxuICAgICAgICAgeyBtb2RlbCA9IE1ldGEuTW9kZWwubWFwIGtleV9jb21wYXJhdG9yIGtleV9pZCBjbXBfaWQgbW9kZWxfaW5mb1xuICAgICAgICAgOyBpbnB1dCA9IE1ldGEuSW5wdXQubWFwIGtleV9pZCBjbXBfaWQgaW5wdXRfaW5mb1xuICAgICAgICAgOyBhY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5hc3NvYyB+a2V5OmtleV9pZCB+YWN0aW9uXG4gICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldFxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgIH0pXG4gIHwgQXNzb2Nfb25cbiAgICAgIHsgbWFwXG4gICAgICA7IGlvX2NvbXBhcmF0b3JcbiAgICAgIDsgbW9kZWxfY29tcGFyYXRvclxuICAgICAgOyBpb19rZXlfaWRcbiAgICAgIDsgaW9fY21wX2lkXG4gICAgICA7IG1vZGVsX2tleV9pZFxuICAgICAgOyBtb2RlbF9jbXBfaWRcbiAgICAgIDsgZGF0YV9pZFxuICAgICAgOyBieVxuICAgICAgOyBnZXRfbW9kZWxfa2V5XG4gICAgICB9IC0+XG4gICAgbGV0IG1vZHVsZSBNb2RlbF9jb21wYXJhdG9yID0gKHZhbCBtb2RlbF9jb21wYXJhdG9yKSBpblxuICAgIGxldCBtb2R1bGUgSW9fY29tcGFyYXRvciA9ICh2YWwgaW9fY29tcGFyYXRvcikgaW5cbiAgICBsZXQgd3JhcF9hc3NvY19vbiB+aW9fa2V5IH5tb2RlbF9rZXkgaW5qZWN0ID1cbiAgICAgIEFjdGlvbi5hc3NvY19vblxuICAgICAgICB+aW9fa2V5XG4gICAgICAgIH5tb2RlbF9rZXlcbiAgICAgICAgfmlvX2lkOmlvX2tleV9pZFxuICAgICAgICB+aW9fY29tcGFyZTpJb19jb21wYXJhdG9yLmNvbXBhcmF0b3IuY29tcGFyZVxuICAgICAgPj4+IGluamVjdFxuICAgIGluXG4gICAgbGV0IG1vZGVsX2tleV9jb21wYXJhdG9yID0gTW9kZWxfY29tcGFyYXRvci5jb21wYXJhdG9yIGluXG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSAoVFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7IG1vZGVsID0gbW9kZWxfaW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICA7IGlucHV0ID0gaW5wdXRfaW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICA7IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA7IHJ1blxuICAgICAgICAgICAgICAgICAgICAgICAgICA7IHJlc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgPVxuICAgICAgZ2F0aGVyIGJ5XG4gICAgaW5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgPVxuICAgICAgbGV0IG1hcF9pbnB1dCA9IFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgbWFwIGluXG4gICAgICBsZXQgbW9kZWxfbG9va3VwID0gSW5jcl9tYXAuTG9va3VwLmNyZWF0ZSBtb2RlbCB+Y29tcGFyYXRvcjptb2RlbF9rZXlfY29tcGFyYXRvciBpblxuICAgICAgbGV0IGNyZWF0ZV9rZXllZCA9XG4gICAgICAgIHVuc3RhZ2UgKFBhdGguRWxlbS5rZXllZCB+Y29tcGFyZTpJb19jb21wYXJhdG9yLmNvbXBhcmF0b3IuY29tcGFyZSBpb19rZXlfaWQpXG4gICAgICBpblxuICAgICAgbGV0IHJlc3VsdHNfbWFwLCBpbnB1dF9tYXAsIGxpZmVjeWNsZV9tYXAgPVxuICAgICAgICB1bnppcDNfbWFwaSdcbiAgICAgICAgICBtYXBfaW5wdXRcbiAgICAgICAgICB+bWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICAgfmNvbXBhcmF0b3I6KG1vZHVsZSBJb19jb21wYXJhdG9yKVxuICAgICAgICAgIH5mOihmdW4gfmtleTppb19rZXkgfmRhdGE6dmFsdWUgLT5cbiAgICAgICAgICAgIGxldCVwYXR0ZXJuX2JpbmQgcmVzdWx0c19tYXAsIGlucHV0X21hcCwgbGlmZWN5Y2xlX21hcCA9XG4gICAgICAgICAgICAgIGxldCBwYXRoID1cbiAgICAgICAgICAgICAgICBtYXRjaCBtYXlfY29udGFpbl9wYXRoIHdpdGhcbiAgICAgICAgICAgICAgICB8IFllc19vcl9tYXliZSAtPiBQYXRoLmFwcGVuZCBwYXRoIFBhdGguRWxlbS4oQXNzb2MgKGNyZWF0ZV9rZXllZCBpb19rZXkpKVxuICAgICAgICAgICAgICAgIHwgTm8gLT4gcGF0aFxuICAgICAgICAgICAgICBpblxuICAgICAgICAgICAgICBsZXQga2V5X2luY3IgPSBJbmNyLmNvbnN0IGlvX2tleSBpblxuICAgICAgICAgICAgICBhbm5vdGF0ZSBBc3NvY19rZXkga2V5X2luY3I7XG4gICAgICAgICAgICAgIGFubm90YXRlIEFzc29jX2lucHV0IHZhbHVlO1xuICAgICAgICAgICAgICBsZXQgZW52aXJvbm1lbnQgPVxuICAgICAgICAgICAgICAgICgqIEl0IGlzIHNhZmUgdG8gcmV1c2UgdGhlIHNhbWUgW2tleV9pZF0gYW5kIFtkYXRhX2lkXSBmb3IgZWFjaCBwYWlyIGluIHRoZSBtYXAsXG4gICAgICAgICAgICAgICAgICAgc2luY2UgdGhleSBhbGwgc3RhcnQgd2l0aCBhIGZyZXNoIFwiY29weVwiIG9mIHRoZSBvdXRlciBlbnZpcm9ubWVudC4gKilcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudFxuICAgICAgICAgICAgICAgIHw+IEVudmlyb25tZW50LmFkZF9leG4gfmtleTppb19rZXlfaWQgfmRhdGE6a2V5X2luY3JcbiAgICAgICAgICAgICAgICB8PiBFbnZpcm9ubWVudC5hZGRfZXhuIH5rZXk6ZGF0YV9pZCB+ZGF0YTp2YWx1ZVxuICAgICAgICAgICAgICBpblxuICAgICAgICAgICAgICBsZXQgbW9kZWxfa2V5ID1cbiAgICAgICAgICAgICAgICBsZXQlbWFwIHZhbHVlID0gdmFsdWUgaW5cbiAgICAgICAgICAgICAgICBnZXRfbW9kZWxfa2V5IGlvX2tleSB2YWx1ZVxuICAgICAgICAgICAgICBpblxuICAgICAgICAgICAgICBJbmNyLnNldF9jdXRvZmZcbiAgICAgICAgICAgICAgICBtb2RlbF9rZXlcbiAgICAgICAgICAgICAgICAoSW5jci5DdXRvZmYub2ZfY29tcGFyZSBtb2RlbF9rZXlfY29tcGFyYXRvci5jb21wYXJlKTtcbiAgICAgICAgICAgICAgbGV0JWJpbmQgbW9kZWxfa2V5ID0gbW9kZWxfa2V5IGluXG4gICAgICAgICAgICAgIGxldCBtb2RlbCA9XG4gICAgICAgICAgICAgICAgbWF0Y2glbWFwIEluY3JfbWFwLkxvb2t1cC5maW5kIG1vZGVsX2xvb2t1cCBtb2RlbF9rZXkgd2l0aFxuICAgICAgICAgICAgICAgIHwgTm9uZSAtPiBtb2RlbF9pbmZvLmRlZmF1bHRcbiAgICAgICAgICAgICAgICB8IFNvbWUgKF9wcmV2X2lvX2tleSwgbW9kZWwpIC0+IG1vZGVsXG4gICAgICAgICAgICAgIGluXG4gICAgICAgICAgICAgIGFubm90YXRlIE1vZGVsIG1vZGVsO1xuICAgICAgICAgICAgICBsZXQgc25hcHNob3QsICgpID1cbiAgICAgICAgICAgICAgICBydW5cbiAgICAgICAgICAgICAgICAgIH5lbnZpcm9ubWVudFxuICAgICAgICAgICAgICAgICAgfnBhdGhcbiAgICAgICAgICAgICAgICAgIH5jbG9ja1xuICAgICAgICAgICAgICAgICAgfmluamVjdDood3JhcF9hc3NvY19vbiB+aW9fa2V5IH5tb2RlbF9rZXkgaW5qZWN0KVxuICAgICAgICAgICAgICAgICAgfm1vZGVsXG4gICAgICAgICAgICAgICAgfD4gVHJhbXBvbGluZS5ydW5cbiAgICAgICAgICAgICAgaW5cbiAgICAgICAgICAgICAgbGV0JW1hcG4gcmVzdWx0ID0gU25hcHNob3QucmVzdWx0IHNuYXBzaG90XG4gICAgICAgICAgICAgIGFuZCBpbnB1dCA9IElucHV0LnRvX2luY3JlbWVudGFsIChTbmFwc2hvdC5pbnB1dCBzbmFwc2hvdClcbiAgICAgICAgICAgICAgYW5kIGxpZmVjeWNsZSA9IFNuYXBzaG90LmxpZmVjeWNsZV9vcl9lbXB0eSBzbmFwc2hvdCBpblxuICAgICAgICAgICAgICByZXN1bHQsIGlucHV0LCBsaWZlY3ljbGVcbiAgICAgICAgICAgIGluXG4gICAgICAgICAgICByZXN1bHRzX21hcCwgaW5wdXRfbWFwLCBsaWZlY3ljbGVfbWFwKVxuICAgICAgaW5cbiAgICAgIGFubm90YXRlIEFzc29jX3Jlc3VsdHMgcmVzdWx0c19tYXA7XG4gICAgICBhbm5vdGF0ZSBBc3NvY19saWZlY3ljbGVzIGxpZmVjeWNsZV9tYXA7XG4gICAgICBsZXQgbGlmZWN5Y2xlID1cbiAgICAgICAgKCogaWYgd2UgY2FuIHByb3ZlIHRoYXQgdGhlIGJvZHkgb2YgdGhlIGFzc29jX29uIGRvZXNuJ3QgY29udGFpbiBhXG4gICAgICAgICAgIGxpZmVjeWNsZSBub2RlLCB0aGVuIHJldHVybiBOb25lLCBkcm9wcGluZyB0aGUgY29uc3RhbnQgaW5jcmVtZW50YWxcbiAgICAgICAgICAgbm9kZSBvbiB0aGUgZmxvb3IuICopXG4gICAgICAgIG1hdGNoIG1heV9jb250YWluX2xpZmVjeWNsZSB3aXRoXG4gICAgICAgIHwgTm8gLT4gTm9uZVxuICAgICAgICB8IFllc19vcl9tYXliZSAtPlxuICAgICAgICAgIGxldCB1bmZvbGRlZCA9XG4gICAgICAgICAgICBJbmNyX21hcC51bm9yZGVyZWRfZm9sZF9uZXN0ZWRfbWFwc1xuICAgICAgICAgICAgICBsaWZlY3ljbGVfbWFwXG4gICAgICAgICAgICAgIH5pbml0OlBhdGguTWFwLmVtcHR5XG4gICAgICAgICAgICAgIH5hZGQ6KGZ1biB+b3V0ZXJfa2V5Ol8gfmlubmVyX2tleTprZXkgfmRhdGEgYWNjIC0+XG4gICAgICAgICAgICAgICAgTWFwLnVwZGF0ZSBhY2Mga2V5IH5mOihmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgfCBTb21lIF8gLT4gUGF0aC5yYWlzZV9kdXBsaWNhdGUga2V5XG4gICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gZGF0YSkpXG4gICAgICAgICAgICAgIH5yZW1vdmU6KGZ1biB+b3V0ZXJfa2V5Ol8gfmlubmVyX2tleTprZXkgfmRhdGE6XyBhY2MgLT4gTWFwLnJlbW92ZSBhY2Mga2V5KVxuICAgICAgICAgIGluXG4gICAgICAgICAgYW5ub3RhdGUgQXNzb2NfbGlmZWN5Y2xlcyB1bmZvbGRlZDtcbiAgICAgICAgICBTb21lIHVuZm9sZGVkXG4gICAgICBpblxuICAgICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgICAgKCBTbmFwc2hvdC5jcmVhdGUgfnJlc3VsdDpyZXN1bHRzX21hcCB+aW5wdXQ6KElucHV0LmR5bmFtaWMgaW5wdXRfbWFwKSB+bGlmZWN5Y2xlXG4gICAgICAgICwgKCkgKVxuICAgIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvblxuICAgICAgfmluamVjdFxuICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICBpbnB1dFxuICAgICAgbW9kZWxcbiAgICAgIChBY3Rpb24uQXNzb2Nfb24geyBpb19rZXk7IG1vZGVsX2tleTsgYWN0aW9uOyBpb19pZCA9IF87IGlvX2NvbXBhcmUgPSBfIH0pXG4gICAgICA9XG4gICAgICBsZXQgaW5wdXQgPSBPcHRpb24uYmluZCBpbnB1dCB+ZjooZnVuIGlucHV0IC0+IE1hcC5maW5kIGlucHV0IGlvX2tleSkgaW5cbiAgICAgIGxldCBzcGVjaWZpY19tb2RlbCA9XG4gICAgICAgIG1hdGNoIE1hcC5maW5kIG1vZGVsIG1vZGVsX2tleSB3aXRoXG4gICAgICAgIHwgTm9uZSAtPiBtb2RlbF9pbmZvLmRlZmF1bHRcbiAgICAgICAgfCBTb21lIChfcHJldl9pb19rZXksIG1vZGVsKSAtPiBtb2RlbFxuICAgICAgaW5cbiAgICAgIGxldCBuZXdfbW9kZWwgPVxuICAgICAgICBhcHBseV9hY3Rpb25cbiAgICAgICAgICB+aW5qZWN0Oih3cmFwX2Fzc29jX29uIH5pb19rZXkgfm1vZGVsX2tleSBpbmplY3QpXG4gICAgICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICAgICAgaW5wdXRcbiAgICAgICAgICBzcGVjaWZpY19tb2RlbFxuICAgICAgICAgIGFjdGlvblxuICAgICAgaW5cbiAgICAgIGlmIG1vZGVsX2luZm8uZXF1YWwgbmV3X21vZGVsIG1vZGVsX2luZm8uZGVmYXVsdFxuICAgICAgdGhlbiBNYXAucmVtb3ZlIG1vZGVsIG1vZGVsX2tleVxuICAgICAgZWxzZSBNYXAuc2V0IG1vZGVsIH5rZXk6bW9kZWxfa2V5IH5kYXRhOihpb19rZXksIG5ld19tb2RlbClcbiAgICBpblxuICAgIGxldCByZXNldCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBtb2RlbCA9XG4gICAgICBNYXAuZmlsdGVyX21hcGkgbW9kZWwgfmY6KGZ1biB+a2V5Om1vZGVsX2tleSB+ZGF0YTooaW9fa2V5LCBtb2RlbCkgLT5cbiAgICAgICAgbGV0IG5ld19tb2RlbCA9XG4gICAgICAgICAgcmVzZXQgfmluamVjdDood3JhcF9hc3NvY19vbiB+aW9fa2V5IH5tb2RlbF9rZXkgaW5qZWN0KSB+c2NoZWR1bGVfZXZlbnQgbW9kZWxcbiAgICAgICAgaW5cbiAgICAgICAgaWYgbW9kZWxfaW5mby5lcXVhbCBuZXdfbW9kZWwgbW9kZWxfaW5mby5kZWZhdWx0XG4gICAgICAgIHRoZW4gTm9uZVxuICAgICAgICBlbHNlIFNvbWUgKGlvX2tleSwgbmV3X21vZGVsKSlcbiAgICBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoVFxuICAgICAgICAgeyBtb2RlbCA9XG4gICAgICAgICAgICAgTWV0YS5Nb2RlbC5tYXBfb25cbiAgICAgICAgICAgICAgIG1vZGVsX2NvbXBhcmF0b3JcbiAgICAgICAgICAgICAgIGlvX2NvbXBhcmF0b3JcbiAgICAgICAgICAgICAgIG1vZGVsX2tleV9pZFxuICAgICAgICAgICAgICAgaW9fa2V5X2lkXG4gICAgICAgICAgICAgICBtb2RlbF9jbXBfaWRcbiAgICAgICAgICAgICAgIG1vZGVsX2luZm9cbiAgICAgICAgIDsgaW5wdXQgPSBNZXRhLklucHV0Lm1hcCBpb19rZXlfaWQgaW9fY21wX2lkIGlucHV0X2luZm9cbiAgICAgICAgIDsgYWN0aW9uID1cbiAgICAgICAgICAgICBBY3Rpb24uVHlwZV9pZC5hc3NvY19vbiB+aW9fa2V5OmlvX2tleV9pZCB+bW9kZWxfa2V5Om1vZGVsX2tleV9pZCB+YWN0aW9uXG4gICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldFxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgIH0pXG4gIHwgQXNzb2Nfc2ltcGwgeyBtYXA7IGJ5OyBtYXlfY29udGFpbl9wYXRoIH0gLT5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2s6XyB+bW9kZWw6XyB+aW5qZWN0Ol8gPVxuICAgICAgbGV0IG1hcF9pbnB1dCA9IFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgbWFwIGluXG4gICAgICBsZXQgcmVzdWx0ID0gSW5jcl9tYXAubWFwaSBtYXBfaW5wdXQgfmY6KGZ1biB+a2V5IH5kYXRhIC0+IGJ5IHBhdGgga2V5IGRhdGEpIGluXG4gICAgICBUcmFtcG9saW5lLnJldHVybiAoU25hcHNob3QuY3JlYXRlIH5yZXN1bHQgfmlucHV0OklucHV0LnN0YXRpYyB+bGlmZWN5Y2xlOk5vbmUsICgpKVxuICAgIGluXG4gICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgIChUXG4gICAgICAgICB7IG1vZGVsID0gTWV0YS5Nb2RlbC51bml0XG4gICAgICAgICA7IGlucHV0ID0gTWV0YS5JbnB1dC51bml0XG4gICAgICAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLm5vdGhpbmdcbiAgICAgICAgIDsgYXBwbHlfYWN0aW9uID0gdW51c2FibGVfYXBwbHlfYWN0aW9uXG4gICAgICAgICA7IHJlc2V0ID0gcmVzZXRfdW5pdF9tb2RlbFxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPSBOb1xuICAgICAgICAgfSlcbiAgfCBTd2l0Y2ggeyBtYXRjaF87IGFybXM7IGhlcmUgPSBfIH0gLT5cbiAgICBsZXQgd3JhcF9zd2l0Y2ggfmJyYW5jaCB+dHlwZV9pZCBpbmplY3QgPSBBY3Rpb24uc3dpdGNoIH5icmFuY2ggfnR5cGVfaWQgPj4+IGluamVjdCBpblxuICAgIGxldCViaW5kLlRyYW1wb2xpbmUgZ2F0aGVyZWQgPSBUcmFtcG9saW5lLmFsbF9tYXAgKE1hcC5tYXAgYXJtcyB+ZjpnYXRoZXIpIGluXG4gICAgbGV0IG1heV9jb250YWluX2xpZmVjeWNsZSA9XG4gICAgICBNYXAuZm9sZFxuICAgICAgICBnYXRoZXJlZFxuICAgICAgICB+aW5pdDpNYXlfY29udGFpbi5MaWZlY3ljbGUuTm9cbiAgICAgICAgfmY6KGZ1biB+a2V5Ol8gfmRhdGE6KFQgZ2F0aGVyZWQpIGFjYyAtPlxuICAgICAgICBNYXlfY29udGFpbi5MaWZlY3ljbGUubWVyZ2UgYWNjIGdhdGhlcmVkLm1heV9jb250YWluX2xpZmVjeWNsZSlcbiAgICBpblxuICAgIGxldCBtYXlfY29udGFpbl9wYXRoLCBuZWVkc19kaXNhbWJpZ3VhdGlvbiA9XG4gICAgICBsZXQgbnVtX2NvbnRhaW5fcGF0aCA9XG4gICAgICAgIE1hcC5jb3VudCBnYXRoZXJlZCB+ZjooZnVuY3Rpb25cbiAgICAgICAgICB8IFQgeyBtYXlfY29udGFpbl9wYXRoID0gWWVzX29yX21heWJlOyBfIH0gLT4gdHJ1ZVxuICAgICAgICAgIHwgVCB7IG1heV9jb250YWluX3BhdGggPSBObzsgXyB9IC0+IGZhbHNlKVxuICAgICAgaW5cbiAgICAgIGxldCBtYXlfY29udGFpbl9wYXRoID1cbiAgICAgICAgaWYgbnVtX2NvbnRhaW5fcGF0aCA+IDAgdGhlbiBNYXlfY29udGFpbi5QYXRoLlllc19vcl9tYXliZSBlbHNlIE5vXG4gICAgICBpblxuICAgICAgbWF5X2NvbnRhaW5fcGF0aCwgbnVtX2NvbnRhaW5fcGF0aCA+IDFcbiAgICBpblxuICAgIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jayB+bW9kZWwgfmluamVjdCA9XG4gICAgICBhbm5vdGF0ZSBNb2RlbCBtb2RlbDtcbiAgICAgIGxldCBpbmRleCA9IFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgbWF0Y2hfIGluXG4gICAgICBsZXQgcmVzdWx0X2lucHV0X2FuZF9saWZlY3ljbGUgPVxuICAgICAgICBsZXQlYmluZCBpbmRleCA9IGluZGV4IGluXG4gICAgICAgICgqICEhIVRoaXMgaXMgYSBsb2FkLWJlYXJpbmcgYmluZCEhIVxuXG4gICAgICAgICAgIElmIHRoaXMgYmluZCBpc24ndCBoZXJlLCB0aGUgc2NvcGUgdGhhdCBpcyBjcmVhdGVkIGZvciB0aGUgYmluZFxuICAgICAgICAgICBkb2Vzbid0IGV4aXN0LCBhbmQgb2xkIGluY3JlbWVudGFsIG5vZGVzIG1pZ2h0IHN0aWxsIGJlIGFjdGl2ZSwgYW5kXG4gICAgICAgICAgIHdpdGggdGhpbmdzIGxpa2UgW21hdGNoJXN1Yl0gb3IgW0JvbnNhaS5tYXRjaF9laXRoZXJdIGNhbiB3aXRuZXNzIG9sZFxuICAgICAgICAgICBub2Rlcywgd2hpY2ggY2FuIGNhdXNlIFthc3NlcnQgZmFsc2VdIHRvIHRyaWdnZXIuICopXG4gICAgICAgIGxldCBwYXRoID1cbiAgICAgICAgICBpZiBuZWVkc19kaXNhbWJpZ3VhdGlvbiB0aGVuIFBhdGguYXBwZW5kIHBhdGggKFBhdGguRWxlbS5Td2l0Y2ggaW5kZXgpIGVsc2UgcGF0aFxuICAgICAgICBpblxuICAgICAgICBsZXQgKFRcbiAgICAgICAgICAgICAgeyBtb2RlbCA9IG1vZGVsX2luZm9cbiAgICAgICAgICAgICAgOyBpbnB1dCA9IGlucHV0X2luZm9cbiAgICAgICAgICAgICAgOyBhY3Rpb24gPSBhY3Rpb25faW5mb1xuICAgICAgICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IF9cbiAgICAgICAgICAgICAgOyByZXNldCA9IF9cbiAgICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoID0gX1xuICAgICAgICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZSA9IF9cbiAgICAgICAgICAgICAgOyBydW5cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICA9XG4gICAgICAgICAgTWFwLmZpbmRfZXhuIGdhdGhlcmVkIGluZGV4XG4gICAgICAgIGluXG4gICAgICAgIGxldCBjaG9zZW5fbW9kZWwgPVxuICAgICAgICAgIEluY3JlbWVudGFsLm1hcCBtb2RlbCB+ZjooZnVuIG1hcCAtPlxuICAgICAgICAgICAgbGV0IChNZXRhLk1vZGVsLkhpZGRlbi5UIHsgbW9kZWw7IGluZm8gfSkgPVxuICAgICAgICAgICAgICBNZXRhLk11bHRpX21vZGVsLmZpbmRfZXhuIG1hcCBpbmRleFxuICAgICAgICAgICAgaW5cbiAgICAgICAgICAgIGxldCBlcXVhbCA9XG4gICAgICAgICAgICAgIE1ldGEuTW9kZWwuVHlwZV9pZC5zYW1lX3dpdG5lc3NfZXhuIGluZm8udHlwZV9pZCBtb2RlbF9pbmZvLnR5cGVfaWRcbiAgICAgICAgICAgIGluXG4gICAgICAgICAgICBUeXBlX2VxdWFsLmNvbnYgZXF1YWwgbW9kZWwpXG4gICAgICAgIGluXG4gICAgICAgIGxldCBzbmFwc2hvdCwgKCkgPVxuICAgICAgICAgIHJ1blxuICAgICAgICAgICAgfmVudmlyb25tZW50XG4gICAgICAgICAgICB+bW9kZWw6Y2hvc2VuX21vZGVsXG4gICAgICAgICAgICB+cGF0aFxuICAgICAgICAgICAgfmNsb2NrXG4gICAgICAgICAgICB+aW5qZWN0Oih3cmFwX3N3aXRjaCB+dHlwZV9pZDphY3Rpb25faW5mbyB+YnJhbmNoOmluZGV4IGluamVjdClcbiAgICAgICAgICB8PiBUcmFtcG9saW5lLnJ1blxuICAgICAgICBpblxuICAgICAgICBsZXQgaW5wdXQgPVxuICAgICAgICAgIGxldCVtYXBuIGlucHV0ID0gSW5wdXQudG9faW5jcmVtZW50YWwgKFNuYXBzaG90LmlucHV0IHNuYXBzaG90KSBpblxuICAgICAgICAgIE1ldGEuSW5wdXQuSGlkZGVuLlQgeyBpbnB1dDsgdHlwZV9pZCA9IGlucHV0X2luZm87IGtleSA9IGluZGV4IH1cbiAgICAgICAgaW5cbiAgICAgICAgSW5jci5yZXR1cm4gKFNuYXBzaG90LnJlc3VsdCBzbmFwc2hvdCwgaW5wdXQsIFNuYXBzaG90LmxpZmVjeWNsZV9vcl9lbXB0eSBzbmFwc2hvdClcbiAgICAgIGluXG4gICAgICBsZXQgcmVzdWx0ID0gSW5jci5iaW5kIHJlc3VsdF9pbnB1dF9hbmRfbGlmZWN5Y2xlIH5mOlR1cGxlMy5nZXQxXG4gICAgICBhbmQgaW5wdXQgPSBJbmNyLmJpbmQgcmVzdWx0X2lucHV0X2FuZF9saWZlY3ljbGUgfmY6VHVwbGUzLmdldDJcbiAgICAgIGFuZCBsaWZlY3ljbGUgPSBJbmNyLmJpbmQgcmVzdWx0X2lucHV0X2FuZF9saWZlY3ljbGUgfmY6VHVwbGUzLmdldDMgaW5cbiAgICAgIGxldCBpbnB1dCA9IElucHV0LmR5bmFtaWMgaW5wdXQgaW5cbiAgICAgIGxldCBsaWZlY3ljbGUgPVxuICAgICAgICAoKiBpZiB3ZSBjYW4gcHJvdmUgdGhhdCBub25lIG9mIHRoZSBzd2l0Y2ggY2FzZXMgaGF2ZSBsaWZlY3ljbGUgZnVuY3Rpb25zLCBcbiAgICAgICAgICAgdGhlbiByZXR1cm4gTm9uZSwgZHJvcHBpbmcgdGhlIGluY3JlbWVudGFsIG5vZGUgb24gdGhlIGZsb29yLiAqKVxuICAgICAgICBtYXRjaCBtYXlfY29udGFpbl9saWZlY3ljbGUgd2l0aFxuICAgICAgICB8IE5vIC0+IE5vbmVcbiAgICAgICAgfCBZZXNfb3JfbWF5YmUgLT4gU29tZSBsaWZlY3ljbGVcbiAgICAgIGluXG4gICAgICBUcmFtcG9saW5lLnJldHVybiAoU25hcHNob3QuY3JlYXRlIH5yZXN1bHQgfmlucHV0IH5saWZlY3ljbGUsICgpKVxuICAgIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvblxuICAgICAgfmluamVjdFxuICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICBpbnB1dFxuICAgICAgbW9kZWxcbiAgICAgIChBY3Rpb24uU3dpdGNoIHsgYWN0aW9uOyB0eXBlX2lkID0gYWN0aW9uX3R5cGVfaWQ7IGJyYW5jaCA9IGluZGV4IH0pXG4gICAgICA9XG4gICAgICBsZXQgKFRcbiAgICAgICAgICAgIHsgbW9kZWwgPSB0bVxuICAgICAgICAgICAgOyBpbnB1dCA9IGltXG4gICAgICAgICAgICA7IGFjdGlvbiA9IGFtXG4gICAgICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgICAgOyBydW4gPSBfXG4gICAgICAgICAgICA7IHJlc2V0ID0gX1xuICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoID0gX1xuICAgICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGUgPSBfXG4gICAgICAgICAgICB9KVxuICAgICAgICA9XG4gICAgICAgIE1hcC5maW5kX2V4biBnYXRoZXJlZCBpbmRleFxuICAgICAgaW5cbiAgICAgIGxldCAoVCB7IG1vZGVsID0gY2hvc2VuX21vZGVsOyBpbmZvID0gY2hvc2VuX21vZGVsX2luZm87IF8gfSkgPVxuICAgICAgICBNZXRhLk11bHRpX21vZGVsLmZpbmRfZXhuIG1vZGVsIGluZGV4XG4gICAgICBpblxuICAgICAgbWF0Y2hcbiAgICAgICAgKCBBY3Rpb24uVHlwZV9pZC5zYW1lX3dpdG5lc3MgYWN0aW9uX3R5cGVfaWQgYW1cbiAgICAgICAgLCBNZXRhLk1vZGVsLlR5cGVfaWQuc2FtZV93aXRuZXNzIGNob3Nlbl9tb2RlbF9pbmZvLnR5cGVfaWQgdG0udHlwZV9pZCApXG4gICAgICB3aXRoXG4gICAgICB8IFNvbWUgVCwgU29tZSBUIC0+XG4gICAgICAgIGxldCBuZXdfbW9kZWwgPVxuICAgICAgICAgIG1hdGNoIGlucHV0IHdpdGhcbiAgICAgICAgICB8IFNvbWVcbiAgICAgICAgICAgICAgKE1ldGEuSW5wdXQuSGlkZGVuLlRcbiAgICAgICAgICAgICAgICB7IGlucHV0ID0gY2hvc2VuX2lucHV0OyB0eXBlX2lkID0gY2hvc2VuX2lucHV0X2luZm87IGtleSA9IGluZGV4JyB9KSAtPlxuICAgICAgICAgICAgKG1hdGNoIGluZGV4ID0gaW5kZXgnLCBNZXRhLklucHV0LnNhbWVfd2l0bmVzcyBjaG9zZW5faW5wdXRfaW5mbyBpbSB3aXRoXG4gICAgICAgICAgICAgfCB0cnVlLCBTb21lIFQgLT5cbiAgICAgICAgICAgICAgIGFwcGx5X2FjdGlvblxuICAgICAgICAgICAgICAgICB+aW5qZWN0Oih3cmFwX3N3aXRjaCB+dHlwZV9pZDphbSB+YnJhbmNoOmluZGV4IGluamVjdClcbiAgICAgICAgICAgICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICAgICAgICAgICAgIChTb21lIGNob3Nlbl9pbnB1dClcbiAgICAgICAgICAgICAgICAgY2hvc2VuX21vZGVsXG4gICAgICAgICAgICAgICAgIGFjdGlvblxuICAgICAgICAgICAgIHwgXyAtPlxuICAgICAgICAgICAgICAgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgICAgICAgIH5pbmplY3Q6KHdyYXBfc3dpdGNoIH50eXBlX2lkOmFtIH5icmFuY2g6aW5kZXggaW5qZWN0KVxuICAgICAgICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgICAgICAgTm9uZVxuICAgICAgICAgICAgICAgICBjaG9zZW5fbW9kZWxcbiAgICAgICAgICAgICAgICAgYWN0aW9uKVxuICAgICAgICAgIHwgTm9uZSAtPlxuICAgICAgICAgICAgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgICAgIH5pbmplY3Q6KHdyYXBfc3dpdGNoIH50eXBlX2lkOmFtIH5icmFuY2g6aW5kZXggaW5qZWN0KVxuICAgICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgICAgTm9uZVxuICAgICAgICAgICAgICBjaG9zZW5fbW9kZWxcbiAgICAgICAgICAgICAgYWN0aW9uXG4gICAgICAgIGluXG4gICAgICAgIGxldCBuZXdfbW9kZWwgPSBNZXRhLk1vZGVsLkhpZGRlbi5jcmVhdGUgdG0gbmV3X21vZGVsIGluXG4gICAgICAgIE1ldGEuTXVsdGlfbW9kZWwuc2V0IG1vZGVsIH5rZXk6aW5kZXggfmRhdGE6bmV3X21vZGVsXG4gICAgICB8IE5vbmUsIE5vbmUgfCBTb21lIFQsIE5vbmUgfCBOb25lLCBTb21lIFQgLT5cbiAgICAgICAgbGV0IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLnRvX3NleHAgYWN0aW9uX3R5cGVfaWQgYWN0aW9uIGluXG4gICAgICAgIGVwcmludF9zXG4gICAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgICBcImFuIGFjdGlvbiBpbnNpZGUgb2YgQm9uc2FpLnN3aXRjaCBoYXMgYmVlbiBkcm9wcGVkIGJlY2F1c2UgdGhlIGNvbXB1dGF0aW9uIFxcXG4gICAgICAgICAgICAgaXMgbm8gbG9uZ2VyIGFjdGl2ZVwiXG4gICAgICAgICAgICAgIChpbmRleCA6IGludClcbiAgICAgICAgICAgICAgKGFjdGlvbiA6IFNleHAudCldO1xuICAgICAgICBtb2RlbFxuICAgIGluXG4gICAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsID1cbiAgICAgIGxldCBmIH5rZXk6aW5kZXggfmRhdGE6KG1vZGVsIDogTWV0YS5Nb2RlbC5IaWRkZW4udCkgPVxuICAgICAgICBsZXQgKFQgeyBtb2RlbCA9IGNob3Nlbl9tb2RlbDsgaW5mbyA9IGNob3Nlbl9tb2RlbF9pbmZvOyBfIH0pID0gbW9kZWwgaW5cbiAgICAgICAgbGV0IChUXG4gICAgICAgICAgICAgIHsgbW9kZWwgPSB0bVxuICAgICAgICAgICAgICA7IGlucHV0ID0gX1xuICAgICAgICAgICAgICA7IGFjdGlvbiA9IGFtXG4gICAgICAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgICAgICAgOyBhcHBseV9hY3Rpb24gPSBfXG4gICAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gX1xuICAgICAgICAgICAgICA7IHJ1biA9IF9cbiAgICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoID0gX1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgID1cbiAgICAgICAgICBNYXAuZmluZF9leG4gZ2F0aGVyZWQgaW5kZXhcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IFQgPVxuICAgICAgICAgIE1ldGEuTW9kZWwuVHlwZV9pZC5zYW1lX3dpdG5lc3NfZXhuIHRtLnR5cGVfaWQgY2hvc2VuX21vZGVsX2luZm8udHlwZV9pZFxuICAgICAgICBpblxuICAgICAgICBsZXQgbmV3X21vZGVsID1cbiAgICAgICAgICByZXNldFxuICAgICAgICAgICAgfmluamVjdDood3JhcF9zd2l0Y2ggfnR5cGVfaWQ6YW0gfmJyYW5jaDppbmRleCBpbmplY3QpXG4gICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgIGNob3Nlbl9tb2RlbFxuICAgICAgICBpblxuICAgICAgICBNZXRhLk1vZGVsLkhpZGRlbi5jcmVhdGUgdG0gbmV3X21vZGVsXG4gICAgICBpblxuICAgICAgTWV0YS5NdWx0aV9tb2RlbC5vZl9tb2RlbHMgKE1hcC5tYXBpIChNZXRhLk11bHRpX21vZGVsLnRvX21vZGVscyBtb2RlbCkgfmYpXG4gICAgaW5cbiAgICBsZXQgbW9kZWwgPVxuICAgICAgbGV0IG1vZGVscyA9XG4gICAgICAgIE1hcC5tYXAgZ2F0aGVyZWQgfmY6KGZ1biAoVCB7IG1vZGVsOyBfIH0pIC0+XG4gICAgICAgICAgTWV0YS5Nb2RlbC5IaWRkZW4uY3JlYXRlIG1vZGVsIG1vZGVsLmRlZmF1bHQpXG4gICAgICBpblxuICAgICAgTWV0YS5NdWx0aV9tb2RlbC5tb2RlbF9pbmZvIChNZXRhLk11bHRpX21vZGVsLm9mX21vZGVscyBtb2RlbHMpXG4gICAgaW5cbiAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgKFRcbiAgICAgICAgIHsgbW9kZWxcbiAgICAgICAgIDsgaW5wdXQgPSBNZXRhLklucHV0LkhpZGRlbi5pbnRcbiAgICAgICAgIDsgYWN0aW9uID0gQWN0aW9uLlR5cGVfaWQuc3dpdGNoXG4gICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldFxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgIH0pXG4gIHwgTGF6eSBsYXp5X2NvbXB1dGF0aW9uIC0+XG4gICAgbGV0IHdyYXBfbGF6eSB+dHlwZV9pZCBpbmplY3QgPSBBY3Rpb24ubGF6eV8gfnR5cGVfaWQgPj4+IGluamVjdCBpblxuICAgIGxldCBtb2RlbCA9IE1ldGEuTW9kZWwuSGlkZGVuLmxhenlfIGluXG4gICAgbGV0IGdhdGhlcmVkID0gbGF6eV9jb21wdXRhdGlvbiB8PiBMYXp5Lm1hcCB+ZjooZnVuIGMgLT4gVHJhbXBvbGluZS5ydW4gKGdhdGhlciBjKSkgaW5cbiAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgPVxuICAgICAgbGV0IChUXG4gICAgICAgICAgICB7IG1vZGVsID0gbW9kZWxfaW5mb1xuICAgICAgICAgICAgOyBpbnB1dCA9IGlucHV0X2luZm9cbiAgICAgICAgICAgIDsgYWN0aW9uID0gYWN0aW9uX2luZm9cbiAgICAgICAgICAgIDsgcnVuXG4gICAgICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IF9cbiAgICAgICAgICAgIDsgcmVzZXQgPSBfXG4gICAgICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBfXG4gICAgICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZSA9IF9cbiAgICAgICAgICAgIH0pXG4gICAgICAgID1cbiAgICAgICAgZm9yY2UgZ2F0aGVyZWRcbiAgICAgIGluXG4gICAgICBhbm5vdGF0ZSBNb2RlbCBtb2RlbDtcbiAgICAgIGxldCBpbnB1dF9tb2RlbCA9XG4gICAgICAgIGxldCVtYXAgbW9kZWwgPSBtb2RlbCBpblxuICAgICAgICBsZXQgKE1ldGEuTW9kZWwuSGlkZGVuLlQgeyBtb2RlbDsgaW5mbzsgXyB9KSA9XG4gICAgICAgICAgT3B0aW9uLnZhbHVlXG4gICAgICAgICAgICBtb2RlbFxuICAgICAgICAgICAgfmRlZmF1bHQ6KE1ldGEuTW9kZWwuSGlkZGVuLmNyZWF0ZSBtb2RlbF9pbmZvIG1vZGVsX2luZm8uZGVmYXVsdClcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IHdpdG5lc3MgPVxuICAgICAgICAgIE1ldGEuTW9kZWwuVHlwZV9pZC5zYW1lX3dpdG5lc3NfZXhuIGluZm8udHlwZV9pZCBtb2RlbF9pbmZvLnR5cGVfaWRcbiAgICAgICAgaW5cbiAgICAgICAgVHlwZV9lcXVhbC5jb252IHdpdG5lc3MgbW9kZWxcbiAgICAgIGluXG4gICAgICBsZXQlYmluZC5UcmFtcG9saW5lIHNuYXBzaG90LCAoKSA9XG4gICAgICAgIHJ1blxuICAgICAgICAgIH5lbnZpcm9ubWVudFxuICAgICAgICAgIH5wYXRoXG4gICAgICAgICAgfmNsb2NrXG4gICAgICAgICAgfm1vZGVsOmlucHV0X21vZGVsXG4gICAgICAgICAgfmluamVjdDood3JhcF9sYXp5IH50eXBlX2lkOmFjdGlvbl9pbmZvIGluamVjdClcbiAgICAgIGluXG4gICAgICBsZXQgaW5wdXQgPVxuICAgICAgICBJbnB1dC5tYXAgKFNuYXBzaG90LmlucHV0IHNuYXBzaG90KSB+ZjooZnVuIGlucHV0IC0+XG4gICAgICAgICAgTWV0YS5JbnB1dC5IaWRkZW4uVCB7IGlucHV0OyB0eXBlX2lkID0gaW5wdXRfaW5mbzsga2V5ID0gKCkgfSlcbiAgICAgIGluXG4gICAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgICAoIFNuYXBzaG90LmNyZWF0ZVxuICAgICAgICAgICAgfmlucHV0XG4gICAgICAgICAgICB+cmVzdWx0OihTbmFwc2hvdC5yZXN1bHQgc25hcHNob3QpXG4gICAgICAgICAgICB+bGlmZWN5Y2xlOihTbmFwc2hvdC5saWZlY3ljbGUgc25hcHNob3QpXG4gICAgICAgICwgKCkgKVxuICAgIGluXG4gICAgbGV0IGFwcGx5X2FjdGlvblxuICAgICAgfmluamVjdFxuICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICBpbnB1dFxuICAgICAgbW9kZWxcbiAgICAgIChBY3Rpb24uTGF6eSB7IGFjdGlvbjsgdHlwZV9pZCA9IGFjdGlvbl90eXBlX2lkIH0pXG4gICAgICA9XG4gICAgICAoKiBmb3JjaW5nIHRoZSBsYXp5IGlzIGZpbmUgYmVjYXVzZSBhY3Rpb25zIGFyZSBmaW5pdGUgaW4gbGVuZ3RoICopXG4gICAgICBsZXQgKFRcbiAgICAgICAgICAgIHsgbW9kZWwgPSBtb2RlbF9pbmZvXG4gICAgICAgICAgICA7IGlucHV0ID0gaW5wdXRfaW5mb1xuICAgICAgICAgICAgOyBhY3Rpb24gPSBhY3Rpb25faW5mb1xuICAgICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgICAgIDsgcnVuID0gX1xuICAgICAgICAgICAgOyByZXNldCA9IF9cbiAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aCA9IF9cbiAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gX1xuICAgICAgICAgICAgfSlcbiAgICAgICAgPVxuICAgICAgICBmb3JjZSBnYXRoZXJlZFxuICAgICAgaW5cbiAgICAgIGxldCAoTWV0YS5Nb2RlbC5IaWRkZW4uVCB7IG1vZGVsID0gY2hvc2VuX21vZGVsOyBpbmZvID0gY2hvc2VuX21vZGVsX2luZm87IF8gfSkgPVxuICAgICAgICBPcHRpb24udmFsdWVcbiAgICAgICAgICBtb2RlbFxuICAgICAgICAgIH5kZWZhdWx0OihNZXRhLk1vZGVsLkhpZGRlbi5jcmVhdGUgbW9kZWxfaW5mbyBtb2RlbF9pbmZvLmRlZmF1bHQpXG4gICAgICBpblxuICAgICAgbGV0IFQgPSBBY3Rpb24uVHlwZV9pZC5zYW1lX3dpdG5lc3NfZXhuIGFjdGlvbl90eXBlX2lkIGFjdGlvbl9pbmZvIGluXG4gICAgICBsZXQgVCA9XG4gICAgICAgIE1ldGEuTW9kZWwuVHlwZV9pZC5zYW1lX3dpdG5lc3NfZXhuIGNob3Nlbl9tb2RlbF9pbmZvLnR5cGVfaWQgbW9kZWxfaW5mby50eXBlX2lkXG4gICAgICBpblxuICAgICAgbGV0IG5ld19tb2RlbCA9XG4gICAgICAgIG1hdGNoIGlucHV0IHdpdGhcbiAgICAgICAgfCBTb21lIChNZXRhLklucHV0LkhpZGRlbi5UIHsgaW5wdXQ7IHR5cGVfaWQgPSBpbnB1dF90eXBlX2lkOyBrZXkgPSAoKSB9KSAtPlxuICAgICAgICAgIGxldCBUID0gTWV0YS5JbnB1dC5zYW1lX3dpdG5lc3NfZXhuIGlucHV0X3R5cGVfaWQgaW5wdXRfaW5mbyBpblxuICAgICAgICAgIGFwcGx5X2FjdGlvblxuICAgICAgICAgICAgfmluamVjdDood3JhcF9sYXp5IH50eXBlX2lkOmFjdGlvbl9pbmZvIGluamVjdClcbiAgICAgICAgICAgIH5zY2hlZHVsZV9ldmVudFxuICAgICAgICAgICAgKFNvbWUgaW5wdXQpXG4gICAgICAgICAgICBjaG9zZW5fbW9kZWxcbiAgICAgICAgICAgIGFjdGlvblxuICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICBhcHBseV9hY3Rpb25cbiAgICAgICAgICAgIH5pbmplY3Q6KHdyYXBfbGF6eSB+dHlwZV9pZDphY3Rpb25faW5mbyBpbmplY3QpXG4gICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgIE5vbmVcbiAgICAgICAgICAgIGNob3Nlbl9tb2RlbFxuICAgICAgICAgICAgYWN0aW9uXG4gICAgICBpblxuICAgICAgU29tZSAoTWV0YS5Nb2RlbC5IaWRkZW4uY3JlYXRlIG1vZGVsX2luZm8gbmV3X21vZGVsKVxuICAgIGluXG4gICAgbGV0IHJlc2V0JyB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBtb2RlbCA9XG4gICAgICBsZXQgKFRcbiAgICAgICAgICAgIHsgbW9kZWwgPSBtb2RlbF9pbmZvXG4gICAgICAgICAgICA7IGFjdGlvbiA9IGFjdGlvbl9pbmZvXG4gICAgICAgICAgICA7IHJlc2V0XG4gICAgICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IF9cbiAgICAgICAgICAgIDsgcnVuID0gX1xuICAgICAgICAgICAgOyBpbnB1dCA9IF9cbiAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aCA9IF9cbiAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gX1xuICAgICAgICAgICAgfSlcbiAgICAgICAgPVxuICAgICAgICBmb3JjZSBnYXRoZXJlZFxuICAgICAgaW5cbiAgICAgIGxldCAoTWV0YS5Nb2RlbC5IaWRkZW4uVCB7IG1vZGVsID0gY2hvc2VuX21vZGVsOyBpbmZvID0gY2hvc2VuX21vZGVsX2luZm87IF8gfSkgPVxuICAgICAgICBtb2RlbFxuICAgICAgaW5cbiAgICAgIGxldCBUID1cbiAgICAgICAgTWV0YS5Nb2RlbC5UeXBlX2lkLnNhbWVfd2l0bmVzc19leG4gY2hvc2VuX21vZGVsX2luZm8udHlwZV9pZCBtb2RlbF9pbmZvLnR5cGVfaWRcbiAgICAgIGluXG4gICAgICBsZXQgbmV3X21vZGVsID1cbiAgICAgICAgcmVzZXQgfmluamVjdDood3JhcF9sYXp5IH50eXBlX2lkOmFjdGlvbl9pbmZvIGluamVjdCkgfnNjaGVkdWxlX2V2ZW50IGNob3Nlbl9tb2RlbFxuICAgICAgaW5cbiAgICAgIE1ldGEuTW9kZWwuSGlkZGVuLmNyZWF0ZSBtb2RlbF9pbmZvIG5ld19tb2RlbFxuICAgIGluXG4gICAgbGV0IHJlc2V0IH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsID1cbiAgICAgICgqIElmIHRoZSBtb2RlbCBpcyBOb25lLCB0aGVuIHlvdSBjYW4ndCBkZXNjZW5kIGludG8gdGhlIHJlc2V0IGJlY2F1c2UgaXQgd2lsbFxuICAgICAgICAgZm9yY2UgdGhlIGxhenksIGJ1dCB0aGF0IGRvZXNuJ3QgbWF0dGVyIGJlY2F1c2UgdGhlcmUncyBub3RoaW5nIHRvIHJlc2V0IGFueXdheS4gKilcbiAgICAgIG1hdGNoIG1vZGVsIHdpdGhcbiAgICAgIHwgTm9uZSAtPiBOb25lXG4gICAgICB8IFNvbWUgbW9kZWwgLT4gU29tZSAocmVzZXQnIH5pbmplY3QgfnNjaGVkdWxlX2V2ZW50IG1vZGVsKVxuICAgIGluXG4gICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgIChUXG4gICAgICAgICB7IG1vZGVsXG4gICAgICAgICA7IGlucHV0ID0gTWV0YS5JbnB1dC5IaWRkZW4udW5pdFxuICAgICAgICAgOyBhY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5sYXp5X1xuICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IHJlc2V0XG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBZZXNfb3JfbWF5YmVcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gWWVzX29yX21heWJlXG4gICAgICAgICB9KVxuICB8IFdyYXBcbiAgICAgIHsgd3JhcHBlcl9tb2RlbFxuICAgICAgOyBhY3Rpb25faWRcbiAgICAgIDsgcmVzdWx0X2lkXG4gICAgICA7IGluamVjdF9pZFxuICAgICAgOyBtb2RlbF9pZFxuICAgICAgOyBpbm5lclxuICAgICAgOyBkeW5hbWljX2FwcGx5X2FjdGlvblxuICAgICAgOyByZXNldCA9IHJlc2V0X21lXG4gICAgICB9IC0+XG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSAoVFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7IG1vZGVsID0gaW5uZXJfbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOyBpbnB1dCA9IGlubmVyX2lucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgYWN0aW9uID0gaW5uZXJfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgcnVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICA9XG4gICAgICBnYXRoZXIgaW5uZXJcbiAgICBpblxuICAgIGxldCB3cmFwX2lubmVyIGluamVjdCA9IEFjdGlvbi53cmFwX2lubmVyID4+PiBpbmplY3QgaW5cbiAgICBsZXQgd3JhcF9vdXRlciBpbmplY3QgPSBBY3Rpb24ud3JhcF9vdXRlciA+Pj4gaW5qZWN0IGluXG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQgfnBhdGggfmNsb2NrIH5tb2RlbCB+aW5qZWN0ID1cbiAgICAgIGFubm90YXRlIE1vZGVsIG1vZGVsO1xuICAgICAgbGV0JXBhdHRlcm5fYmluZCBvdXRlcl9tb2RlbCwgaW5uZXJfbW9kZWwgPSBtb2RlbCBpblxuICAgICAgYW5ub3RhdGUgTW9kZWwgb3V0ZXJfbW9kZWw7XG4gICAgICBsZXQlYmluZC5UcmFtcG9saW5lIGlubmVyX3NuYXBzaG90LCAoKSA9XG4gICAgICAgIGxldCBlbnZpcm9ubWVudCA9XG4gICAgICAgICAgZW52aXJvbm1lbnRcbiAgICAgICAgICB8PiBFbnZpcm9ubWVudC5hZGRfZXhuIH5rZXk6bW9kZWxfaWQgfmRhdGE6b3V0ZXJfbW9kZWxcbiAgICAgICAgICB8PiBFbnZpcm9ubWVudC5hZGRfZXhuIH5rZXk6aW5qZWN0X2lkIH5kYXRhOihJbmNyLnJldHVybiAod3JhcF9vdXRlciBpbmplY3QpKVxuICAgICAgICBpblxuICAgICAgICBydW4gfmVudmlyb25tZW50IH5wYXRoIH5tb2RlbDppbm5lcl9tb2RlbCB+Y2xvY2sgfmluamVjdDood3JhcF9pbm5lciBpbmplY3QpXG4gICAgICBpblxuICAgICAgbGV0IGlubmVyX3Jlc3VsdCA9IFNuYXBzaG90LnJlc3VsdCBpbm5lcl9zbmFwc2hvdCBpblxuICAgICAgbGV0IGlucHV0ID1cbiAgICAgICAgSW5wdXQubWVyZ2VcbiAgICAgICAgICAoU25hcHNob3QuaW5wdXQgaW5uZXJfc25hcHNob3QpXG4gICAgICAgICAgKElucHV0LmR5bmFtaWMgKFNuYXBzaG90LnJlc3VsdCBpbm5lcl9zbmFwc2hvdCkpXG4gICAgICBpblxuICAgICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgICAgKCBTbmFwc2hvdC5jcmVhdGVcbiAgICAgICAgICAgIH5yZXN1bHQ6aW5uZXJfcmVzdWx0XG4gICAgICAgICAgICB+aW5wdXRcbiAgICAgICAgICAgIH5saWZlY3ljbGU6KFNuYXBzaG90LmxpZmVjeWNsZSBpbm5lcl9zbmFwc2hvdClcbiAgICAgICAgLCAoKSApXG4gICAgaW5cbiAgICBsZXQgbW9kZWwgPSBNZXRhLk1vZGVsLmJvdGggd3JhcHBlcl9tb2RlbCBpbm5lcl9tb2RlbCBpblxuICAgIGxldCBhcHBseV9hY3Rpb24gfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgaW5wdXQgKG91dGVyX21vZGVsLCBpbm5lcl9tb2RlbCkgYWN0aW9uID1cbiAgICAgIG1hdGNoIGFjdGlvbiB3aXRoXG4gICAgICB8IEFjdGlvbi5XcmFwX291dGVyIGFjdGlvbl9vdXRlciAtPlxuICAgICAgICBsZXQgbmV3X291dGVyX21vZGVsID1cbiAgICAgICAgICBkeW5hbWljX2FwcGx5X2FjdGlvblxuICAgICAgICAgICAgfmluamVjdDood3JhcF9vdXRlciBpbmplY3QpXG4gICAgICAgICAgICB+c2NoZWR1bGVfZXZlbnRcbiAgICAgICAgICAgIChPcHRpb24ubWFwIGlucHV0IH5mOnNuZClcbiAgICAgICAgICAgIG91dGVyX21vZGVsXG4gICAgICAgICAgICBhY3Rpb25fb3V0ZXJcbiAgICAgICAgaW5cbiAgICAgICAgbmV3X291dGVyX21vZGVsLCBpbm5lcl9tb2RlbFxuICAgICAgfCBXcmFwX2lubmVyIGFjdGlvbl9pbm5lciAtPlxuICAgICAgICBsZXQgbmV3X2lubmVyX21vZGVsID1cbiAgICAgICAgICBhcHBseV9hY3Rpb25cbiAgICAgICAgICAgIH5pbmplY3Q6KHdyYXBfaW5uZXIgaW5qZWN0KVxuICAgICAgICAgICAgfnNjaGVkdWxlX2V2ZW50XG4gICAgICAgICAgICAoT3B0aW9uLm1hcCBpbnB1dCB+Zjpmc3QpXG4gICAgICAgICAgICBpbm5lcl9tb2RlbFxuICAgICAgICAgICAgYWN0aW9uX2lubmVyXG4gICAgICAgIGluXG4gICAgICAgIG91dGVyX21vZGVsLCBuZXdfaW5uZXJfbW9kZWxcbiAgICBpblxuICAgIGxldCByZXNldCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCAob3V0ZXJfbW9kZWwsIGlubmVyX21vZGVsKSA9XG4gICAgICBsZXQgb3V0ZXJfbW9kZWwgPVxuICAgICAgICByZXNldF9tZSB+aW5qZWN0Oih3cmFwX291dGVyIGluamVjdCkgfnNjaGVkdWxlX2V2ZW50IG91dGVyX21vZGVsXG4gICAgICBpblxuICAgICAgbGV0IGlubmVyX21vZGVsID0gcmVzZXQgfmluamVjdDood3JhcF9pbm5lciBpbmplY3QpIH5zY2hlZHVsZV9ldmVudCBpbm5lcl9tb2RlbCBpblxuICAgICAgb3V0ZXJfbW9kZWwsIGlubmVyX21vZGVsXG4gICAgaW5cbiAgICBUcmFtcG9saW5lLnJldHVyblxuICAgICAgKFRcbiAgICAgICAgIHsgbW9kZWxcbiAgICAgICAgIDsgaW5wdXQgPSBNZXRhLklucHV0LmJvdGggaW5uZXJfaW5wdXQgcmVzdWx0X2lkXG4gICAgICAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLndyYXAgfmlubmVyOmlubmVyX2FjdGlvbiB+b3V0ZXI6YWN0aW9uX2lkXG4gICAgICAgICA7IGFwcGx5X2FjdGlvblxuICAgICAgICAgOyBydW5cbiAgICAgICAgIDsgcmVzZXRcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fcGF0aFxuICAgICAgICAgOyBtYXlfY29udGFpbl9saWZlY3ljbGVcbiAgICAgICAgIH0pXG4gIHwgV2l0aF9tb2RlbF9yZXNldHRlciB7IGlubmVyOyByZXNldF9pZCB9IC0+XG4gICAgbGV0JWJpbmQuVHJhbXBvbGluZSAoVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeyBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgYXBwbHlfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA7IHJ1blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOyByZXNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBtYXlfY29udGFpbl9wYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA7IG1heV9jb250YWluX2xpZmVjeWNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBnYXRoZXJlZF9pbm5lcikpXG4gICAgICA9XG4gICAgICBnYXRoZXIgaW5uZXJcbiAgICBpblxuICAgIGxldCBpbm5lcl9zdGF0ZWxlc3MgPVxuICAgICAgbGV0IHNhbWVfbW9kZWwgPSBNZXRhLk1vZGVsLlR5cGVfaWQuc2FtZV93aXRuZXNzIGluXG4gICAgICBsZXQgc2FtZV9hY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5zYW1lX3dpdG5lc3MgaW5cbiAgICAgIGxldCBvcGVuIE9wdGlvbi5MZXRfc3ludGF4IGluXG4gICAgICBsZXQlYmluZCBhID0gc2FtZV9tb2RlbCBtb2RlbC50eXBlX2lkIE1ldGEuTW9kZWwudW5pdC50eXBlX2lkIGluXG4gICAgICBsZXQlYmluZCBiID0gc2FtZV9hY3Rpb24gYWN0aW9uIEFjdGlvbi5UeXBlX2lkLm5vdGhpbmcgaW5cbiAgICAgIFNvbWUgKGEsIGIpXG4gICAgaW5cbiAgICAobWF0Y2ggaW5uZXJfc3RhdGVsZXNzIHdpdGhcbiAgICAgfCBTb21lIChULCBUKSAtPlxuICAgICAgIGxldCBydW4gfmVudmlyb25tZW50OmVudiB+cGF0aCB+Y2xvY2sgfm1vZGVsOl8gfmluamVjdDpfID1cbiAgICAgICAgIGxldCBlbnZpcm9ubWVudCA9IEVudmlyb25tZW50LmFkZF9leG4gfmtleTpyZXNldF9pZCB+ZGF0YTppZ25vcmVfZWZmZWN0IGVudiBpblxuICAgICAgICAgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsOnVuaXRfbW9kZWwgfmluamVjdDp1bnJlYWNoYWJsZV9hY3Rpb25cbiAgICAgICBpblxuICAgICAgIFRyYW1wb2xpbmUucmV0dXJuIChUIHsgZ2F0aGVyZWRfaW5uZXIgd2l0aCBydW4gfSlcbiAgICAgfCBOb25lIC0+XG4gICAgICAgbGV0IHdyYXBfaW5uZXIgaW5qZWN0ID0gQWN0aW9uLm1vZGVsX3Jlc2V0X2lubmVyID4+PiBpbmplY3QgaW5cbiAgICAgICBsZXQgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+Y2xvY2sgfm1vZGVsIH5pbmplY3QgPVxuICAgICAgICAgbGV0IGVudmlyb25tZW50ID1cbiAgICAgICAgICAgZW52aXJvbm1lbnRcbiAgICAgICAgICAgfD4gRW52aXJvbm1lbnQuYWRkX2V4blxuICAgICAgICAgICAgICAgIH5rZXk6cmVzZXRfaWRcbiAgICAgICAgICAgICAgICB+ZGF0YTooSW5jci5yZXR1cm4gKGluamVjdCBBY3Rpb24ubW9kZWxfcmVzZXRfb3V0ZXIpKVxuICAgICAgICAgaW5cbiAgICAgICAgIGxldCViaW5kLlRyYW1wb2xpbmUgc25hcHNob3QsICgpID1cbiAgICAgICAgICAgcnVuIH5lbnZpcm9ubWVudCB+cGF0aCB+bW9kZWwgfmNsb2NrIH5pbmplY3Q6KHdyYXBfaW5uZXIgaW5qZWN0KVxuICAgICAgICAgaW5cbiAgICAgICAgIGxldCByZXN1bHQgPSBTbmFwc2hvdC5yZXN1bHQgc25hcHNob3QgaW5cbiAgICAgICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAgICAgICggU25hcHNob3QuY3JlYXRlXG4gICAgICAgICAgICAgICB+cmVzdWx0XG4gICAgICAgICAgICAgICB+aW5wdXQ6KFNuYXBzaG90LmlucHV0IHNuYXBzaG90KVxuICAgICAgICAgICAgICAgfmxpZmVjeWNsZTooU25hcHNob3QubGlmZWN5Y2xlIHNuYXBzaG90KVxuICAgICAgICAgICAsICgpIClcbiAgICAgICBpblxuICAgICAgIGxldCBhcHBseV9hY3Rpb24gfmluamVjdCB+c2NoZWR1bGVfZXZlbnQgaSBtID0gZnVuY3Rpb25cbiAgICAgICAgIHwgQWN0aW9uLk1vZGVsX3Jlc2V0X291dGVyIC0+IHJlc2V0IH5pbmplY3Q6KHdyYXBfaW5uZXIgaW5qZWN0KSB+c2NoZWR1bGVfZXZlbnQgbVxuICAgICAgICAgfCBNb2RlbF9yZXNldF9pbm5lciBpbm5lciAtPlxuICAgICAgICAgICBhcHBseV9hY3Rpb24gfmluamVjdDood3JhcF9pbm5lciBpbmplY3QpIH5zY2hlZHVsZV9ldmVudCBpIG0gaW5uZXJcbiAgICAgICBpblxuICAgICAgIGxldCByZXNldCB+aW5qZWN0IH5zY2hlZHVsZV9ldmVudCBtID1cbiAgICAgICAgIHJlc2V0IH5pbmplY3Q6KHdyYXBfaW5uZXIgaW5qZWN0KSB+c2NoZWR1bGVfZXZlbnQgbVxuICAgICAgIGluXG4gICAgICAgVHJhbXBvbGluZS5yZXR1cm5cbiAgICAgICAgIChUXG4gICAgICAgICAgICB7IG1vZGVsXG4gICAgICAgICAgICA7IGlucHV0XG4gICAgICAgICAgICA7IGFjdGlvbiA9IEFjdGlvbi5UeXBlX2lkLm1vZGVsX3Jlc2V0IGFjdGlvblxuICAgICAgICAgICAgOyBhcHBseV9hY3Rpb25cbiAgICAgICAgICAgIDsgcnVuXG4gICAgICAgICAgICA7IHJlc2V0XG4gICAgICAgICAgICA7IG1heV9jb250YWluX3BhdGhcbiAgICAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlXG4gICAgICAgICAgICB9KSlcbiAgfCBQYXRoIC0+XG4gICAgbGV0IHJ1biB+ZW52aXJvbm1lbnQ6XyB+cGF0aCB+Y2xvY2s6XyB+bW9kZWw6XyB+aW5qZWN0Ol8gPVxuICAgICAgbGV0IHJlc3VsdCA9IEluY3IucmV0dXJuIHBhdGggaW5cbiAgICAgIGFubm90YXRlIFBhdGggcmVzdWx0O1xuICAgICAgVHJhbXBvbGluZS5yZXR1cm4gKFNuYXBzaG90LmNyZWF0ZSB+cmVzdWx0IH5pbnB1dDpJbnB1dC5zdGF0aWMgfmxpZmVjeWNsZTpOb25lLCAoKSlcbiAgICBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoVFxuICAgICAgICAgeyBtb2RlbCA9IE1ldGEuTW9kZWwudW5pdFxuICAgICAgICAgOyBpbnB1dCA9IE1ldGEuSW5wdXQudW5pdFxuICAgICAgICAgOyBhY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5ub3RoaW5nXG4gICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IHVudXNhYmxlX2FwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldCA9IHJlc2V0X3VuaXRfbW9kZWxcbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBZZXNfb3JfbWF5YmVcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gTm9cbiAgICAgICAgIH0pXG4gIHwgTGlmZWN5Y2xlIGxpZmVjeWNsZSAtPlxuICAgIGxldCBydW4gfmVudmlyb25tZW50IH5wYXRoIH5jbG9jazpfIH5tb2RlbDpfIH5pbmplY3Q6XyA9XG4gICAgICBsZXQgbGlmZWN5Y2xlID1cbiAgICAgICAgbWF0Y2glcGF0dGVybl9iaW5kIFZhbHVlLmV2YWwgZW52aXJvbm1lbnQgbGlmZWN5Y2xlIHdpdGhcbiAgICAgICAgfCBTb21lIGxpZmVjeWNsZSAtPlxuICAgICAgICAgIGxldCVtYXAgbGlmZWN5Y2xlID0gbGlmZWN5Y2xlIGluXG4gICAgICAgICAgUGF0aC5NYXAuc2luZ2xldG9uIHBhdGggbGlmZWN5Y2xlXG4gICAgICAgIHwgTm9uZSAtPiBkb19ub3RoaW5nX2xpZmVjeWNsZVxuICAgICAgaW5cbiAgICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAgICggU25hcHNob3QuY3JlYXRlXG4gICAgICAgICAgICB+cmVzdWx0OihJbmNyLnJldHVybiAoKSlcbiAgICAgICAgICAgIH5pbnB1dDpJbnB1dC5zdGF0aWNcbiAgICAgICAgICAgIH5saWZlY3ljbGU6KFNvbWUgbGlmZWN5Y2xlKVxuICAgICAgICAsICgpIClcbiAgICBpblxuICAgIFRyYW1wb2xpbmUucmV0dXJuXG4gICAgICAoVFxuICAgICAgICAgeyBtb2RlbCA9IE1ldGEuTW9kZWwudW5pdFxuICAgICAgICAgOyBpbnB1dCA9IE1ldGEuSW5wdXQudW5pdFxuICAgICAgICAgOyBhY3Rpb24gPSBBY3Rpb24uVHlwZV9pZC5ub3RoaW5nXG4gICAgICAgICA7IGFwcGx5X2FjdGlvbiA9IHVudXNhYmxlX2FwcGx5X2FjdGlvblxuICAgICAgICAgOyByZXNldCA9IHJlc2V0X3VuaXRfbW9kZWxcbiAgICAgICAgIDsgcnVuXG4gICAgICAgICA7IG1heV9jb250YWluX3BhdGggPSBZZXNfb3JfbWF5YmVcbiAgICAgICAgIDsgbWF5X2NvbnRhaW5fbGlmZWN5Y2xlID0gWWVzX29yX21heWJlXG4gICAgICAgICB9KVxuOztcblxubGV0IGdhdGhlciBjID0gVHJhbXBvbGluZS5ydW4gKGdhdGhlciBjKVxuIiwibW9kdWxlIFN0YWJsZSA9IHN0cnVjdFxuICBtb2R1bGUgUHJpdmF0ZSA9IHN0cnVjdFxuICAgIG1vZHVsZSBOb2RlX3BhdGggPSBOb2RlX3BhdGguU3RhYmxlXG4gICAgbW9kdWxlIEdyYXBoX2luZm8gPSBHcmFwaF9pbmZvLlN0YWJsZVxuICBlbmRcbmVuZFxuXG5vcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcblxubW9kdWxlIFByaXZhdGUgPSBzdHJ1Y3RcbiAgbW9kdWxlIENvbXB1dGF0aW9uID0gQ29tcHV0YXRpb25cbiAgbW9kdWxlIEVudmlyb25tZW50ID0gRW52aXJvbm1lbnRcbiAgbW9kdWxlIElucHV0ID0gSW5wdXRcbiAgbW9kdWxlIE1ldGEgPSBNZXRhXG4gIG1vZHVsZSBTbmFwc2hvdCA9IFNuYXBzaG90XG4gIG1vZHVsZSBMaWZlY3ljbGUgPSBMaWZlY3ljbGVcbiAgbW9kdWxlIFZhbHVlID0gVmFsdWVcbiAgbW9kdWxlIFBhdGggPSBQYXRoXG4gIG1vZHVsZSBBY3Rpb24gPSBBY3Rpb25cbiAgbW9kdWxlIFN0YWJpbGl6YXRpb25fdHJhY2tlciA9IFN0YWJpbGl6YXRpb25fdHJhY2tlclxuICBtb2R1bGUgTm9kZV9wYXRoID0gTm9kZV9wYXRoXG4gIG1vZHVsZSBHcmFwaF9pbmZvID0gR3JhcGhfaW5mb1xuICBtb2R1bGUgSW5zdHJ1bWVudGF0aW9uID0gSW5zdHJ1bWVudGF0aW9uXG4gIG1vZHVsZSBGbGF0dGVuX3ZhbHVlcyA9IEZsYXR0ZW5fdmFsdWVzXG4gIG1vZHVsZSBDb25zdGFudF9mb2xkID0gQ29uc3RhbnRfZm9sZFxuICBtb2R1bGUgU2tlbGV0b24gPSBTa2VsZXRvblxuICBtb2R1bGUgVHJhbnNmb3JtID0gVHJhbnNmb3JtXG4gIG1vZHVsZSBMaW50ZXIgPSBMaW50ZXJcbiAgbW9kdWxlIFRyYW1wb2xpbmUgPSBUcmFtcG9saW5lXG4gIG1vZHVsZSBBbm5vdGF0ZV9pbmNyID0gQW5ub3RhdGVfaW5jclxuXG4gIGxldCBwYXRoID0gUHJvY19sYXllcjIucGF0aFxuICBsZXQgZ2F0aGVyID0gRXZhbC5nYXRoZXJcbiAgbGV0IHByZV9wcm9jZXNzID0gUHJlX3Byb2Nlc3MucHJlX3Byb2Nlc3NcbiAgbGV0IHJldmVhbF92YWx1ZSA9IENvbnQuQ29udi5yZXZlYWxfdmFsdWVcbiAgbGV0IGNvbmNlYWxfdmFsdWUgPSBDb250LkNvbnYuY29uY2VhbF92YWx1ZVxuICBsZXQgdG9wX2xldmVsX2hhbmRsZSA9IENvbnQuQ29udi50b3BfbGV2ZWxfaGFuZGxlXG4gIGxldCBoYW5kbGUgPSBDb250LkNvbnYuaGFuZGxlXG4gIGxldCBwZXJmb3JtID0gQ29udC5Db252LnBlcmZvcm1cbiAgbGV0IHNldF9wZXJmb3JtX29uX2V4Y2VwdGlvbiA9IENvbnQuRXhwZXJ0LkZvcl9ib25zYWlfaW50ZXJuYWwuc2V0X3BlcmZvcm1fb25fZXhjZXB0aW9uXG5lbmRcblxuaW5jbHVkZSBQcm9jX2xheWVyMlxuXG5tb2R1bGUgRm9yX29wZW4gPSBzdHJ1Y3RcbiAgbW9kdWxlIENvbXB1dGF0aW9uID0gQ29tcHV0YXRpb25cbiAgbW9kdWxlIEVmZmVjdCA9IEVmZmVjdFxuICBtb2R1bGUgVmFsdWUgPSBWYWx1ZVxuZW5kXG5cbm1vZHVsZSBDb250ID0gQ29udFxuXG5tb2R1bGUgQXJyb3dfZGVwcmVjYXRlZCA9IHN0cnVjdFxuICBpbmNsdWRlIExlZ2FjeV9hcGlcbmVuZFxuIl19
