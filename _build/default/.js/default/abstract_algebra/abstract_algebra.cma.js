// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Abstract_algebra
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Abstract_algebra = "Abstract_algebra",
    cst_abstract_algebra = "abstract_algebra";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Abstract_algebra);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_abstract_algebra);
   caml_call1(Ppx_expect_runtime[1][1], "src/abstract_algebra.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_abstract_algebra, "abstract_algebra.ml");
   var Commutative_group = [0], Vector_space = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_abstract_algebra);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Abstract_algebra);
   var Abstract_algebra = [0, Commutative_group, Vector_space];
   runtime.caml_register_global(11, Abstract_algebra, cst_Abstract_algebra);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJhYnN0cmFjdF9hbGdlYnJhLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYWJzdHJhY3RfYWxnZWJyYS9hYnN0cmFjdF9hbGdlYnJhLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FFMkIsSUFBQSx5QkF5Qkw7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIEJhc2VcblxubW9kdWxlIENvbW11dGF0aXZlX2dyb3VwID0gc3RydWN0XG4gICgqKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGludGVyZmFjZSBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG5cbiAgICAgICsgYXNzb2NpYXRpdml0eTogWyhhICsgYikgKyBjID0gYSArIChiICsgYyldXG4gICAgICArIGlkZW50aXR5OiBbemVybyArIGEgPSBhICsgemVybyA9IGFdXG4gICAgICArIGludmVyc2VzOiBnaXZlbiBhbnkgW2FdIHRoZXJlIGV4aXN0cyBhICh1bmlxdWUpIGVsdCBbYl0gc3VjaCB0aGF0IFthICsgYiA9IGIgKyBhID1cbiAgICAgIHplcm9dXG4gICAgICArIGNvbW11dGF0aXZpdHk6IFthICsgYiA9IGIgKyBhXVxuICAqKVxuXG4gIG1vZHVsZSB0eXBlIFdpdGhvdXRfc2V4cCA9IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgdmFsIHplcm8gOiB0XG4gICAgdmFsICggKyApIDogdCAtPiB0IC0+IHRcbiAgICB2YWwgKCAtICkgOiB0IC0+IHQgLT4gdFxuICBlbmRcblxuICBtb2R1bGUgdHlwZSBTID0gc2lnXG4gICAgdHlwZSB0IFtAQGRlcml2aW5nIHNleHBdXG5cbiAgICBpbmNsdWRlIFdpdGhvdXRfc2V4cCB3aXRoIHR5cGUgdCA6PSB0XG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBWZWN0b3Jfc3BhY2UgPSBzdHJ1Y3RcbiAgbW9kdWxlIHR5cGUgUyA9IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgaW5jbHVkZSBDb21tdXRhdGl2ZV9ncm91cC5TIHdpdGggdHlwZSB0IDo9IHRcblxuICAgIHZhbCBzY2FsZSA6IHQgLT4gZmxvYXQgLT4gdFxuICBlbmRcbmVuZFxuIl19
