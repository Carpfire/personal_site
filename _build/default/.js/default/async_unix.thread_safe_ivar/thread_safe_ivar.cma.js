// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Thread_safe_ivar__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Thread_safe_ivar = [0],
    Thread_safe_ivar$0 = [0, Thread_safe_ivar];
   runtime.caml_register_global(0, Thread_safe_ivar$0, "Thread_safe_ivar__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_safe_ivar__Import
//# unitInfo: Requires: Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_safe_ivar_Import = "Thread_safe_ivar__Import",
    cst_thread_safe_ivar = "thread_safe_ivar";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_safe_ivar_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_safe_ivar);
   caml_call1(Ppx_expect_runtime[1][1], "thread_safe_ivar/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_thread_safe_ivar, "import.ml");
   var
    include = Core_Int[96],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare = include[8],
    min = include[9],
    max = include[10];
   caml_call1(Ppx_inline_test_lib[7], cst_thread_safe_ivar);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_safe_ivar_Import);
   var
    Thread_safe_ivar_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max];
   runtime.caml_register_global
    (12, Thread_safe_ivar_Import, cst_Thread_safe_ivar_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_safe_ivar
//# unitInfo: Requires: Core, Error_checking_mutex, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Condition
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_safe_ivar$0 = "Thread_safe_ivar",
    cst_thread_safe_ivar$0 = "thread_safe_ivar";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Condition = global_data.Stdlib__Condition,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Error_checking_mutex = global_data.Error_checking_mutex,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_safe_ivar$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_safe_ivar$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "thread_safe_ivar/src/thread_safe_ivar.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_thread_safe_ivar$0, "thread_safe_ivar.ml");
   var
    cst_Thread_safe_ivar_fill_of_f = "Thread_safe_ivar.fill of full ivar",
    _a_ = [0, "full"],
    _b_ = [0, "mutex"],
    _c_ = [0, "num_waiting"],
    _d_ = [0, "value"],
    cst_thread_safe_ivar = cst_thread_safe_ivar$0,
    cst_Thread_safe_ivar = cst_Thread_safe_ivar$0;
   function sexp_of_t(of_a_001, param){
    var
     value_003 = param[1],
     num_waiting_005 = param[2],
     full_009 = param[4],
     mutex_007 = param[3],
     arg_010 = caml_call1(Sexplib0_Sexp_conv[23], full_009),
     bnds_002 = [0, [1, [0, _a_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(Sexplib0_Sexp_conv[23], mutex_007),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_008, 0]]], bnds_002],
     arg_006 = caml_call1(Core[389], num_waiting_005),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call2(Core[515], of_a_001, value_003),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function create(param){
    var _f_ = caml_call1(Stdlib_Condition[1], 0);
    return [0, 0, 0, caml_call1(Error_checking_mutex[1], 0), _f_];
   }
   function critical_section(t, f){
    return caml_call2(Error_checking_mutex[6], t[3], f);
   }
   function fill(t, v){
    return critical_section
            (t,
             function(param){
              if(caml_call1(Core[253], t[1])){
               var
                _e_ =
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_Thread_safe_ivar_fill_of_f);
               caml_call1(Core[261], _e_);
              }
              t[1] = [0, v];
              return caml_call1(Stdlib_Condition[4], t[4]);
             });
   }
   function read(t){
    var match = t[1];
    if(! match)
     return critical_section
             (t,
              function(param){
               for(;;){
                var match = t[1];
                if(match){var v = match[1]; return v;}
                t[2] = t[2] + 1 | 0;
                caml_call2(Stdlib_Condition[2], t[4], t[3]);
                t[2] = t[2] - 1 | 0;
                var match$0 = t[1];
                if(match$0){var v$0 = match$0[1]; return v$0;}
               }
              });
    var v = match[1];
    return v;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_thread_safe_ivar);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_safe_ivar);
   var Thread_safe_ivar = [0, sexp_of_t, create, fill, read];
   runtime.caml_register_global(20, Thread_safe_ivar, cst_Thread_safe_ivar$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ0aHJlYWRfc2FmZV9pdmFyLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJvZl9hXzAwMSIsInZhbHVlXzAwMyIsIm51bV93YWl0aW5nXzAwNSIsImZ1bGxfMDA5IiwibXV0ZXhfMDA3IiwiYXJnXzAxMCIsImJuZHNfMDAyIiwiYXJnXzAwOCIsImJuZHNfMDAyJDAiLCJhcmdfMDA2IiwiYm5kc18wMDIkMSIsImFyZ18wMDQiLCJibmRzXzAwMiQyIiwiY3JlYXRlIiwiY3JpdGljYWxfc2VjdGlvbiIsInQiLCJmIiwiZmlsbCIsInYiLCJyZWFkIiwidiQwIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYXN5bmNfdW5peC90aHJlYWRfc2FmZV9pdmFyL3RocmVhZF9zYWZlX2l2YXJfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jX3VuaXgvdGhyZWFkX3NhZmVfaXZhci90aHJlYWRfc2FmZV9pdmFyLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0dBSzRCOztJQUFBOzs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0NENUIsU0FBQUEsVUFBS0M7SUFBTDtLQUNZQztLQUNBQztLQU9SQztLQU5BQztLQU1BQyxVQUFBLG1DQUFBRjtLQVRKRyxnQ0FTSUQ7S0FOQUUsVUFBQSxtQ0FBQUg7S0FISkksa0NBR0lELGVBSEpEO0tBRVlHLFVBQUEsc0JBQUFQO0tBRlpRLGtDQUVZRCxlQUZaRDtLQUNZRyxVQUFBLHNCQURQWCxVQUNPQztLQURaVyxrQ0FDWUQsZUFEWkQ7SUFBQSxXQUFBRTtHQVdvQjtZQUVoQkM7SUFDK0QsVUFBQTtJQUFqRSxpQkFBeUM7R0FBNkM7WUFHcEZDLGlCQUFpQkMsR0FBR0M7SUFBSSxPQUFBLG9DQUFQRCxNQUFHQztHQUFxQztZQUV6REMsS0FBS0YsR0FBRUc7SUFDVCxPQUhFSjthQUVLQzs7Y0FFTCxHQUFHLHNCQUZFQTs7Ozs7ZUFFbUI7O2NBRm5CQSxXQUFFRztxREFBRkg7YUFJcUI7R0FBQztZQUczQkksS0FBS0o7SUFDUCxZQURPQTs7S0FJaUIsT0FidEJEO2NBU0tDOztlQUtIOzRCQUxHQTs4QkFPTUcsY0FBSyxPQUFMQTtnQkFQTkgsT0FBQUE7Z0JBVUMsZ0NBVkRBLE1BQUFBO2dCQUFBQSxPQUFBQTs4QkFBQUE7Z0NBYVNLLGtCQUFLLE9BQUxBOztjQUdNO1FBZGZGO0lBQUssT0FBTEE7R0FjMkI7Ozs7OzhCQTFDcENuQixXQWFJYyxRQU1BSSxNQU9BRTs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgYnkgZHVuZSAqKVxuXG4oKiogQGNhbm9uaWNhbCBUaHJlYWRfc2FmZV9pdmFyLkltcG9ydCAqKVxubW9kdWxlIEltcG9ydCA9IFRocmVhZF9zYWZlX2l2YXJfX0ltcG9ydFxuXG5tb2R1bGUgVGhyZWFkX3NhZmVfaXZhcl9fID0gc3RydWN0IGVuZFxuW0BAZGVwcmVjYXRlZCBcInRoaXMgbW9kdWxlIGlzIHNoYWRvd2VkXCJdXG4iLCJvcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcbm1vZHVsZSBNdXRleCA9IEVycm9yX2NoZWNraW5nX211dGV4XG5cbnR5cGUgJ2EgdCA9XG4gIHsgbXV0YWJsZSB2YWx1ZSA6ICdhIG9wdGlvblxuICA7IG11dGFibGUgbnVtX3dhaXRpbmcgOiBpbnRcbiAgOyBtdXRleCA6XG4gICAgICAoTXV0ZXgudFxuICAgICAgW0BzZXhwLm9wYXF1ZV1cbiAgICAgICgqIFRocmVhZHMgdGhhdCBkbyBbcmVhZCB0XSB3aGVuIFtpc19ub25lIHQudmFsdWVdIGJsb2NrIHVzaW5nIFtDb25kaXRpb24ud2FpdCB0LmZ1bGxdLlxuICAgICAgICAgIFdoZW4gW2ZpbGxdIHNldHMgW3QudmFsdWVdLCBpdCB1c2VzIFtDb25kaXRpb24uYnJvYWRjYXN0XSB0byB3YWtlIHVwIGFsbCB0aGUgYmxvY2tlZFxuICAgICAgICAgIHRocmVhZHMuICopKVxuICA7IGZ1bGwgOiAoQ29uZGl0aW9uLnRbQHNleHAub3BhcXVlXSlcbiAgfVxuW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxubGV0IGNyZWF0ZSAoKSA9XG4gIHsgdmFsdWUgPSBOb25lOyBudW1fd2FpdGluZyA9IDA7IG11dGV4ID0gTXV0ZXguY3JlYXRlICgpOyBmdWxsID0gQ29uZGl0aW9uLmNyZWF0ZSAoKSB9XG47O1xuXG5sZXQgY3JpdGljYWxfc2VjdGlvbiB0IH5mID0gTXV0ZXguY3JpdGljYWxfc2VjdGlvbiB0Lm11dGV4IH5mXG5cbmxldCBmaWxsIHQgdiA9XG4gIGNyaXRpY2FsX3NlY3Rpb24gdCB+ZjooZnVuICgpIC0+XG4gICAgaWYgaXNfc29tZSB0LnZhbHVlIHRoZW4gcmFpc2VfcyBbJW1lc3NhZ2UgXCJUaHJlYWRfc2FmZV9pdmFyLmZpbGwgb2YgZnVsbCBpdmFyXCJdO1xuICAgIHQudmFsdWUgPC0gU29tZSB2O1xuICAgIENvbmRpdGlvbi5icm9hZGNhc3QgdC5mdWxsKVxuOztcblxubGV0IHJlYWQgdCA9XG4gIG1hdGNoIHQudmFsdWUgd2l0aFxuICB8IFNvbWUgdiAtPiB2XG4gIHwgTm9uZSAtPlxuICAgIGNyaXRpY2FsX3NlY3Rpb24gdCB+ZjooZnVuICgpIC0+XG4gICAgICBsZXQgcmVjIGxvb3AgKCkgPVxuICAgICAgICBtYXRjaCB0LnZhbHVlIHdpdGhcbiAgICAgICAgfCBTb21lIHYgLT4gdlxuICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICB0Lm51bV93YWl0aW5nIDwtIHQubnVtX3dhaXRpbmcgKyAxO1xuICAgICAgICAgIENvbmRpdGlvbi53YWl0IHQuZnVsbCB0Lm11dGV4O1xuICAgICAgICAgIHQubnVtX3dhaXRpbmcgPC0gdC5udW1fd2FpdGluZyAtIDE7XG4gICAgICAgICAgKG1hdGNoIHQudmFsdWUgd2l0aFxuICAgICAgICAgICB8IFNvbWUgdiAtPiB2XG4gICAgICAgICAgIHwgTm9uZSAtPiBsb29wICgpKVxuICAgICAgaW5cbiAgICAgIGxvb3AgKCkgW0Bub250YWlsXSkgW0Bub250YWlsXVxuOztcbiJdfQ==
