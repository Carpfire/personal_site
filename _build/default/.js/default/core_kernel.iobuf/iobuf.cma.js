// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Iobuf__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Iobuf = [0], Iobuf$0 = [0, Iobuf];
   runtime.caml_register_global(0, Iobuf$0, "Iobuf__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Iobuf__Iobuf_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Iobuf_Iobuf_intf$0 = "Iobuf__Iobuf_intf",
    cst_iobuf$0 = "iobuf",
    cst_iobuf_src_iobuf_intf_ml = "iobuf/src/iobuf_intf.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Iobuf_Iobuf_intf$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_iobuf$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_iobuf_src_iobuf_intf_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_iobuf$0, "iobuf_intf.ml");
   var
    _a_ = [0, cst_iobuf_src_iobuf_intf_ml, 9, 0],
    cst_iobuf = cst_iobuf$0,
    cst_Iobuf_Iobuf_intf = cst_Iobuf_Iobuf_intf$0;
   function sexp_of_no_seek(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function sexp_of_seek(v_001){return sexp_of_no_seek(v_001);}
   caml_call1(Ppx_inline_test_lib[7], cst_iobuf);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Iobuf_Iobuf_intf);
   var Iobuf_Iobuf_intf = [0, sexp_of_no_seek, sexp_of_seek];
   runtime.caml_register_global(13, Iobuf_Iobuf_intf, cst_Iobuf_Iobuf_intf$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Iobuf
//# unitInfo: Requires: Base__Field, Base_for_tests__Test_blit, Core, Core__Bigstring, Core__Bool, Core__Bytes, Core__Char, Core__Core_sys, Core__Date, Core__Error, Core__Hexdump, Core__Int, Core__List, Core__Month, Core__Option, Core__Ordered_collection_common, Core__Sequence, Core__String, Core__Tuple, Int_repr, Iobuf__Iobuf_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Iobuf$0 = "Iobuf",
    cst_Iobuf_of_bigstring_got_inv$1 = "Iobuf.of_bigstring got invalid pos",
    cst$0 = "_",
    cst_buf_pos = "buf_pos",
    cst_hi = "hi",
    cst_hi_max = "hi_max",
    cst_iobuf$0 = "iobuf",
    cst_iobuf_src_iobuf_ml = "iobuf/src/iobuf.ml",
    cst_len = "len",
    cst_limits = "limits",
    cst_lo = "lo",
    cst_lo_min = "lo_min",
    cst_max_len = "max_len",
    cst_pos = "pos",
    cst_size_len = "size_len",
    cst_str_len = "str_len",
    cst_window = "window",
    cst_write_stop_pos = "write_stop_pos",
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "  ",
    name = cst_window,
    name$0 = cst_limits,
    name$1 = cst_window,
    name$2 = cst_limits,
    name$3 = "buffer",
    Core_Bigstring = global_data.Core__Bigstring,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Core_Sequence = global_data.Core__Sequence,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Int_repr = global_data.Int_repr,
    Core_Bytes = global_data.Core__Bytes,
    Core_Char = global_data.Core__Char,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Ordered_collection_common =
      global_data.Core__Ordered_collection_common,
    Core_Option = global_data.Core__Option,
    Core_Date = global_data.Core__Date,
    Core_Month = global_data.Core__Month,
    Core_Bool = global_data.Core__Bool,
    Base_for_tests_Test_blit = global_data.Base_for_tests__Test_blit,
    Assert_failure = global_data.Assert_failure,
    Core_Tuple = global_data.Core__Tuple,
    Core_Error = global_data.Core__Error;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Core_sys = global_data.Core__Core_sys,
    Iobuf_Iobuf_intf = global_data.Iobuf__Iobuf_intf,
    Core_Hexdump = global_data.Core__Hexdump;
   caml_call1(Ppx_module_timer_runtime[4], cst_Iobuf$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_iobuf$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_iobuf_src_iobuf_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_iobuf$0, "iobuf.ml");
   var
    arch_sixtyfour = caml_call2(Core[90], Core_Core_sys[9], 64),
    _az_ = [0, "\n"],
    _al_ = [0, cst_max_len],
    _am_ = [0, cst_len],
    cst_Expert_reinitialize_of_big$0 =
      "Expert.reinitialize_of_bigstring got invalid len",
    _aj_ = [0, cst_str_len],
    _ak_ = [0, cst_pos],
    cst_Expert_reinitialize_of_big =
      "Expert.reinitialize_of_bigstring got invalid pos",
    _ae_ = [0, "Bigstring.length buf"],
    _af_ = [0, cst_hi_max],
    _ag_ = [0, cst_hi],
    _ah_ = [0, cst_lo],
    _ai_ = [0, cst_lo_min],
    cst_Expert_reinitialize_got_in = "Expert.reinitialize got invalid bounds",
    _ac_ = [0, cst$0],
    _ab_ = [0, cst$0],
    cst_Iobuf_fill_bin_prot_local_ =
      "Iobuf.fill_bin_prot_local not enough space",
    _ad_ = [0, 0],
    _$_ = [0, cst$0],
    ___ = [0, cst$0],
    cst_Iobuf_fill_bin_prot_not_en = "Iobuf.fill_bin_prot not enough space",
    _aa_ = [0, 0],
    _Z_ = [0, cst$0],
    _Y_ = [0, cst$0],
    _X_ = [0, cst$0],
    _W_ = [0, cst$0],
    cst_Iobuf_consume_bin_prot_not =
      "Iobuf.consume_bin_prot not enough data to read length",
    cst_Iobuf_consume_bin_prot_not$0 =
      "Iobuf.consume_bin_prot not enough data to read value",
    _J_ = [0, cst_size_len],
    _K_ = [0, cst_buf_pos],
    _L_ = [0, cst_write_stop_pos],
    cst_Iobuf_write_bin_prot_local =
      "Iobuf.write_bin_prot_local got unexpected number of bytes written (Bin_prot bug: writer disagrees with sizer)",
    _G_ = [0, cst_size_len],
    _H_ = [0, cst_buf_pos],
    _I_ = [0, cst_write_stop_pos],
    cst_Iobuf_write_bin_prot_got_u =
      "Iobuf.write_bin_prot got unexpected number of bytes written (Bin_prot bug: Type_class.write disagrees with .size)",
    _C_ = [0, 0],
    _B_ = [0, 0],
    _A_ = [0, 0],
    cst_Iobuf_bounded_compact_got_ =
      "Iobuf.bounded_compact got stale snapshot",
    cst_Iobuf_create_got_negative_ = "Iobuf.create got negative len",
    _u_ = [0, cst_str_len],
    cst_Iobuf_of_bigstring_got_inv = cst_Iobuf_of_bigstring_got_inv$1,
    _v_ = [0, cst_max_len],
    cst_Iobuf_of_bigstring_got_inv$0 = cst_Iobuf_of_bigstring_got_inv$1,
    _r_ = [0, cst_len],
    _s_ = [0, cst_pos],
    _t_ = [0, cst_str_len],
    cst_bad_range_relative_to_bigs = "bad range relative to bigstring",
    _p_ = [0, cst_pos],
    _q_ = [0, cst_len],
    cst_Iobuf_got_invalid_range = "Iobuf got invalid range",
    _o_ = [0, cst_iobuf_src_iobuf_ml, 155, 8],
    _n_ = [0, cst_iobuf_src_iobuf_ml, 156, 8],
    _m_ = [0, cst_iobuf_src_iobuf_ml, 161, 8],
    _l_ = [0, cst_iobuf_src_iobuf_ml, 162, 8],
    _k_ = [0, cst_iobuf_src_iobuf_ml, 164, 8],
    _j_ = [0, cst_iobuf_src_iobuf_ml, 165, 8],
    _i_ = [0, cst_iobuf_src_iobuf_ml, 158, 8],
    _h_ = [0, cst_iobuf_src_iobuf_ml, 159, 8],
    cst_Iobuf_invariant_failed = "Iobuf.invariant failed",
    cst_Iobuf_bounded_flip_hi_got_ =
      "Iobuf.bounded_flip_hi got stale snapshot",
    cst_Iobuf_bounded_flip_lo_got_ =
      "Iobuf.bounded_flip_lo got stale snapshot",
    cst_Iobuf_Hi_bound_restore_got =
      "Iobuf.Hi_bound.restore got stale snapshot",
    cst_Iobuf_Lo_bound_restore_got =
      "Iobuf.Lo_bound.restore got stale snapshot",
    _g_ = [0, cst$0],
    _f_ = [0, cst$0],
    _a_ = [0, cst_hi_max],
    _b_ = [0, cst_hi],
    _c_ = [0, cst_lo],
    _d_ = [0, cst_lo_min],
    _e_ = [0, "buf"],
    _aB_ = [0, cst_iobuf_src_iobuf_ml, 1012, 11],
    cst_iobuf = cst_iobuf$0,
    cst_Iobuf = cst_Iobuf$0;
   function globalize_t_repr(x_001){
    var
     buf_006 = x_001[1],
     lo_min_005 = x_001[2],
     lo_004 = x_001[3],
     hi_003 = x_001[4],
     hi_max_002 = x_001[5];
    return [0, buf_006, lo_min_005, lo_004, hi_003, hi_max_002];
   }
   function sexp_of_t(param){
    var
     buf_008 = param[1],
     lo_min_010 = param[2],
     lo_012 = param[3],
     hi_014 = param[4],
     hi_max_016 = param[5],
     arg_017 = caml_call1(Core[389], hi_max_016),
     bnds_007 = [0, [1, [0, _a_, [0, arg_017, 0]]], 0],
     arg_015 = caml_call1(Core[389], hi_014),
     bnds_007$0 = [0, [1, [0, _b_, [0, arg_015, 0]]], bnds_007],
     arg_013 = caml_call1(Core[389], lo_012),
     bnds_007$1 = [0, [1, [0, _c_, [0, arg_013, 0]]], bnds_007$0],
     arg_011 = caml_call1(Core[389], lo_min_010),
     bnds_007$2 = [0, [1, [0, _d_, [0, arg_011, 0]]], bnds_007$1],
     arg_009 = caml_call1(Sexplib0_Sexp_conv[23], buf_008),
     bnds_007$3 = [0, [1, [0, _e_, [0, arg_009, 0]]], bnds_007$2];
    return [1, bnds_007$3];
   }
   function sexp_of_t$0(of_read_write_019, of_seek_020){return sexp_of_t;}
   function sexp_of_t_with_shallow_sexp(of_a_023, of_b_024){return sexp_of_t;}
   var
    sexp_of_seek = Iobuf_Iobuf_intf[2],
    sexp_of_no_seek = Iobuf_Iobuf_intf[1];
   function globalize(param, _g1_, t){return globalize_t_repr(t);}
   function read_only(t){return t;}
   function read_only_local(t){return t;}
   function no_seek(t){return t;}
   function no_seek_local(t){return t;}
   function fail(t, message, a, sexp_of_a){
    function _gV_(_g0_){return _g0_;}
    var
     _gW_ = caml_call2(Core_Tuple[1][2], sexp_of_a, _gV_),
     x_026 = globalize_t_repr(t);
    function _gX_(param){return _f_;}
    var
     _gY_ = [0, a, sexp_of_t$0(function(param){return _g_;}, _gX_)(x_026)],
     _gZ_ = caml_call5(Core_Error[19], 0, 0, message, _gY_, _gW_);
    return caml_call1(Core_Error[30], _gZ_);
   }
   var compare = Core[382], sexp_of_t$1 = Core[389];
   function window(t){return t[3];}
   function restore(t, iobuf){
    var
     _gT_ = caml_call2(Core[92], t, iobuf[2]),
     _gU_ = _gT_ || caml_call2(Core[91], t, iobuf[4]);
    if(_gU_) fail(iobuf, cst_Iobuf_Lo_bound_restore_got, t, Core[389]);
    iobuf[3] = t;
    return 0;
   }
   function limit(t){return t[2];}
   var compare$0 = Core[382], sexp_of_t$2 = Core[389];
   function window$0(t){return t[4];}
   function restore$0(t, iobuf){
    var
     _gR_ = caml_call2(Core[91], t, iobuf[5]),
     _gS_ = _gR_ || caml_call2(Core[92], t, iobuf[3]);
    if(_gS_) fail(iobuf, cst_Iobuf_Hi_bound_restore_got, t, Core[389]);
    iobuf[4] = t;
    return 0;
   }
   function limit$0(t){return t[5];}
   function length(t){return t[4] - t[3] | 0;}
   function length_lo(t){return t[3] - t[2] | 0;}
   function length_hi(t){return t[5] - t[4] | 0;}
   function is_empty(t){
    var _gQ_ = length(t);
    return caml_call2(Core[90], _gQ_, 0);
   }
   function rewind(t){t[3] = t[2]; return 0;}
   function reset(t){t[3] = t[2]; t[4] = t[5]; return 0;}
   function flip_lo(t){t[4] = t[3]; t[3] = t[2]; return 0;}
   function bounded_flip_lo(t, lo_min){
    if
     (!
      caml_call2(Core[92], lo_min, t[2])
      && ! caml_call2(Core[91], lo_min, t[3])){t[4] = t[3]; t[3] = lo_min; return 0;
    }
    return fail(t, cst_Iobuf_bounded_flip_lo_got_, lo_min, sexp_of_t$1);
   }
   function flip_hi(t){t[3] = t[4]; t[4] = t[5]; return 0;}
   function bounded_flip_hi(t, hi_max){
    if
     (!
      caml_call2(Core[91], hi_max, t[5])
      && ! caml_call2(Core[92], hi_max, t[4])){t[3] = t[4]; t[4] = hi_max; return 0;
    }
    return fail(t, cst_Iobuf_bounded_flip_hi_got_, hi_max, sexp_of_t$2);
   }
   function capacity(t){return t[5] - t[2] | 0;}
   function invariant(param, _gM_, record){
    try{
     var lo_min = record[2];
     if(! caml_call2(Core[88], lo_min, 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
     var _gP_ = capacity(record);
     if(! caml_call2(Core[90], lo_min, record[5] - _gP_ | 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
     var lo = record[3];
     if(! caml_call2(Core[88], lo, record[2]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
     if(! caml_call2(Core[89], lo, record[4]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     var hi = record[4];
     if(! caml_call2(Core[88], hi, record[3]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
     if(! caml_call2(Core[89], hi, record[5]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
     var hi_max = record[5];
     if(! caml_call2(Core[88], hi_max, record[3]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     var _gN_ = capacity(record);
     if(! caml_call2(Core[90], hi_max, record[2] + _gN_ | 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
     var _gO_ = 0;
     return _gO_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return fail(record, cst_Iobuf_invariant_failed, e, Core[625]);
    }
   }
   function bad_range(pos, len, t){
    return fail
            (t,
             cst_Iobuf_got_invalid_range,
             [0, [0, 5594516, pos], [0, 5393365, len]],
             function(param){
              var
               arg1_035 = param[2],
               arg0_034 = param[1],
               v_032 = arg0_034[2],
               res0_036 = [1, [0, _p_, [0, caml_call1(Core[389], v_032), 0]]],
               v_033 = arg1_035[2],
               res1_037 = [1, [0, _q_, [0, caml_call1(Core[389], v_033), 0]]];
              return [1, [0, res0_036, [0, res1_037, 0]]];
             });
   }
   function check_range(t, pos, len){
    var _gI_ = caml_call2(Core[92], pos, 0);
    if(_gI_)
     var _gJ_ = _gI_;
    else{
     var _gK_ = caml_call2(Core[92], len, 0);
     if(_gK_)
      var _gJ_ = _gK_;
     else
      var _gL_ = length(t) - pos | 0, _gJ_ = caml_call2(Core[91], len, _gL_);
    }
    return _gJ_ ? bad_range(pos, len, t) : _gJ_;
   }
   function unsafe_bigstring_view(pos, len, buf){
    var hi = pos + len | 0;
    return [0, buf, pos, pos, hi, hi];
   }
   function unsafe_bigstring_view$0(pos, len, bstr){
    var
     str_len = caml_call1(Core_Bigstring[21], bstr),
     _gD_ = caml_call2(Core[92], pos, 0);
    if(_gD_)
     var _gE_ = _gD_;
    else{
     var _gF_ = caml_call2(Core[91], pos, str_len);
     if(_gF_)
      var _gE_ = _gF_;
     else
      var
       max_len = str_len - pos | 0,
       _gG_ = caml_call2(Core[92], len, 0),
       _gH_ = _gG_ || caml_call2(Core[91], len, max_len),
       _gE_ = _gH_;
    }
    if(_gE_){
     var
      _gz_ = [0, [1, [0, _r_, [0, caml_call1(Core[389], len), 0]]], 0],
      _gA_ = [0, [1, [0, _s_, [0, caml_call1(Core[389], pos), 0]]], _gz_],
      _gB_ = [0, [1, [0, _t_, [0, caml_call1(Core[389], str_len), 0]]], _gA_],
      _gC_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_bad_range_relative_to_bigs),
          _gB_]];
     caml_call1(Core[261], _gC_);
    }
    return unsafe_bigstring_view(pos, len, bstr);
   }
   function of_bigstring_local(pos, len, buf){
    var str_len = caml_call1(Core_Bigstring[21], buf);
    if(pos){
     var
      pos$0 = pos[1],
      _gp_ = caml_call2(Core[92], pos$0, 0),
      _gq_ = _gp_ || caml_call2(Core[91], pos$0, str_len);
     if(_gq_){
      var
       _gr_ = [0, [1, [0, _u_, [0, caml_call1(Core[389], str_len), 0]]], 0],
       _gs_ = [0, caml_call1(Core[389], pos$0), _gr_],
       _gt_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Iobuf_of_bigstring_got_inv),
           _gs_]];
      caml_call1(Core[261], _gt_);
     }
     var pos$1 = pos$0;
    }
    else
     var pos$1 = 0;
    if(len){
     var
      len$0 = len[1],
      max_len = str_len - pos$1 | 0,
      _gu_ = caml_call2(Core[92], len$0, 0),
      _gv_ = _gu_ || caml_call2(Core[91], len$0, max_len);
     if(_gv_){
      var
       _gw_ = [0, [1, [0, _v_, [0, caml_call1(Core[389], max_len), 0]]], 0],
       _gx_ = [0, caml_call1(Core[389], len$0), _gw_],
       _gy_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Iobuf_of_bigstring_got_inv$0),
           _gx_]];
      caml_call1(Core[261], _gy_);
     }
     var len$1 = len$0;
    }
    else
     var len$1 = str_len - pos$1 | 0;
    return unsafe_bigstring_view(pos$1, len$1, buf);
   }
   function of_bigstring(pos, len, buf){
    return globalize_t_repr(of_bigstring_local(pos, len, buf));
   }
   function sub_shared_local(opt, len, t){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    check_range(t, pos, len$1);
    var lo = t[3] + pos | 0, hi = lo + len$1 | 0;
    return [0, t[1], lo, lo, hi, hi];
   }
   function sub_shared(pos, len, t){
    return globalize_t_repr(sub_shared_local(pos, len, t));
   }
   function copy(t){
    var _go_ = length(t);
    return of_bigstring
            (0, 0, caml_call3(Core_Bigstring[25], t[1], t[3], _go_));
   }
   function clone(param){
    var
     buf = param[1],
     lo_min = param[2],
     lo = param[3],
     hi = param[4],
     hi_max = param[5];
    return [0, caml_call1(Core_Bigstring[27], buf), lo_min, lo, hi, hi_max];
   }
   function set_bounds_and_buffer_sub(pos, len, src, dst){
    check_range(src, pos, len);
    var lo = src[3] + pos | 0, hi = lo + len | 0;
    dst[2] = lo;
    dst[3] = lo;
    dst[4] = hi;
    dst[5] = hi;
    var
     _gm_ = 1 - (dst[1] === src[1] ? 1 : 0),
     _gn_ = _gm_ ? (dst[1] = src[1], 0) : _gm_;
    return _gn_;
   }
   function set_bounds_and_buffer(src, dst){
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    var
     _gk_ = 1 - (dst[1] === src[1] ? 1 : 0),
     _gl_ = _gk_ ? (dst[1] = src[1], 0) : _gk_;
    return _gl_;
   }
   function narrow_lo(t){t[2] = t[3]; return 0;}
   function narrow_hi(t){t[5] = t[4]; return 0;}
   function narrow(t){narrow_lo(t); return narrow_hi(t);}
   function unsafe_resize(t, len){
    if(caml_call2(Core[92], len, 0)) bad_range(0, len, t);
    var hi = t[3] + len | 0;
    if(caml_call2(Core[91], hi, t[5])) bad_range(0, len, t);
    t[4] = hi;
    return 0;
   }
   function protect_window_bounds_and_buff(t, f){
    var lo = t[3], hi = t[4], lo_min = t[2], hi_max = t[5], buf = t[1];
    try{
     t[2] = lo;
     t[5] = hi;
     var result = caml_call1(f, t);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_bounds_and_buff$0(t, f){
    var lo = t[3], hi = t[4], lo_min = t[2], hi_max = t[5], buf = t[1];
    try{
     t[2] = lo;
     t[5] = hi;
     var result = caml_call1(f, t);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_bounds_and_buff$1(t, x, f){
    var lo = t[3], hi = t[4], lo_min = t[2], hi_max = t[5], buf = t[1];
    try{
     t[2] = lo;
     t[5] = hi;
     var result = caml_call2(f, t, x);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_bounds_and_buff$2(t, x, y, f){
    var lo = t[3], hi = t[4], lo_min = t[2], hi_max = t[5], buf = t[1];
    try{
     t[2] = lo;
     t[5] = hi;
     var result = caml_call3(f, t, x, y);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_bounds_and_buff$3(t, x, y, z, f){
    var lo = t[3], hi = t[4], lo_min = t[2], hi_max = t[5], buf = t[1];
    try{
     t[2] = lo;
     t[5] = hi;
     var result = caml_call4(f, t, x, y, z);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     t[2] = lo_min;
     t[5] = hi_max;
     if(1 - (buf === t[1] ? 1 : 0)) t[1] = buf;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function create(len){
    if(caml_call2(Core[92], len, 0)){
     var
      _gi_ = [0, caml_call1(Core[389], len), 0],
      _gj_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Iobuf_create_got_negative_),
          _gi_]];
     caml_call1(Core[261], _gj_);
    }
    return of_bigstring(0, 0, caml_call1(Core_Bigstring[121], len));
   }
   var empty = create(0);
   function of_string(s){
    return of_bigstring(0, 0, caml_call3(Core_Bigstring[14], 0, 0, s));
   }
   function of_bytes(s){
    return of_bigstring(0, 0, caml_call3(Core_Bigstring[15], 0, 0, s));
   }
   function to_stringlike(convert){
    function _gh_(len, t){
     if(len){
      var len$0 = len[1];
      check_range(t, 0, len$0);
      var len$1 = len$0;
     }
     else
      var len$1 = length(t);
     return caml_call3(convert, [0, t[3]], [0, len$1], t[1]);
    }
    return caml_call1(Core[266], _gh_);
   }
   var
    _w_ = to_stringlike(Core_Bigstring[16]),
    to_string = caml_call1(Core[267], _w_),
    _x_ = to_stringlike(Core_Bigstring[17]),
    to_bytes = caml_call1(Core[267], _x_);
   function unsafe_buf_pos(t, pos, len){
    check_range(t, pos, len);
    return t[3] + pos | 0;
   }
   function unsafe_advance(t, len){
    check_range(t, 0, len);
    t[3] = t[3] + len | 0;
    return 0;
   }
   var equal = Core_Char[54];
   function of_bool(param){return param ? 48 : 49;}
   function get_char(t, pos){
    var _gg_ = unsafe_buf_pos(t, pos, 1);
    return caml_ba_get_1(t[1], _gg_);
   }
   function set_char(t, pos, c){
    var _gf_ = unsafe_buf_pos(t, pos, 1);
    return caml_ba_set_1(t[1], _gf_, c);
   }
   function get(t, pos){return get_char(t, pos);}
   function set(t, pos, c){return set_char(t, pos, c);}
   var
    sexp_of_t$3 = Core_Bytes[15],
    get$0 = Core_Bytes[52],
    _y_ = Core_Bytes[44];
   function unsafe_blit(src, src_pos, dst, dst_pos, len){
    var
     blit = Core_Bigstring[30][1],
     _ge_ = unsafe_buf_pos(src, src_pos, len);
    return caml_call5(blit, src[1], _ge_, dst, dst_pos, len);
   }
   function create$0(len){return caml_call1(_y_, len);}
   function sub(src, pos, len){
    var _gd_ = unsafe_buf_pos(src, pos, len);
    return caml_call3(Core_Bigstring[28][4], src[1], _gd_, len);
   }
   function subo(opt, len, src){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(src) - pos | 0;
    var _gb_ = src[1], _gc_ = [0, unsafe_buf_pos(src, pos, len$1)];
    return caml_call3(Core_Bigstring[28][5], _gc_, [0, len$1], _gb_);
   }
   var
    String_dst = [0, sub, subo],
    sexp_of_t$4 = Core_Bigstring[6],
    length$0 = Core_Bigstring[21],
    _z_ = Core_Bigstring[121];
   function unsafe_blit$0(src, src_pos, dst, dst_pos, len){
    var blit = Core_Bigstring[22], _ga_ = unsafe_buf_pos(src, src_pos, len);
    return caml_call5(blit, src[1], _ga_, dst, dst_pos, len);
   }
   function create$1(len){return caml_call1(_z_, len);}
   function compact(t){
    var len = t[4] - t[3] | 0;
    caml_call5(Core_Bigstring[22], t[1], t[3], t[1], t[2], len);
    t[3] = t[2] + len | 0;
    t[4] = t[5];
    return 0;
   }
   function bounded_compact(t, lo_min, hi_max){
    var len = t[4] - t[3] | 0;
    if
     (!
      caml_call2(Core[91], hi_max, t[5])
      &&
       !
       caml_call2(Core[92], hi_max, lo_min + len | 0)
       && ! caml_call2(Core[92], lo_min, t[2])){
     caml_call5(Core_Bigstring[22], t[1], t[3], t[1], lo_min, len);
     t[3] = lo_min + len | 0;
     t[4] = hi_max;
     return 0;
    }
    return fail
            (t,
             cst_Iobuf_bounded_compact_got_,
             [0, lo_min, hi_max],
             function(param){
              var
               arg1_041 = param[2],
               arg0_040 = param[1],
               res0_042 = caml_call1(sexp_of_t$1, arg0_040),
               res1_043 = caml_call1(sexp_of_t$2, arg1_041);
              return [1, [0, res0_042, [0, res1_043, 0]]];
             });
   }
   function read_bin_prot(reader, t, pos){
    var
     buf_pos = unsafe_buf_pos(t, pos, 0),
     pos_ref = [0, buf_pos],
     a = caml_call2(reader[1], t[1], pos_ref),
     len = pos_ref[1] - buf_pos | 0;
    check_range(t, pos, len);
    return [0, a, len];
   }
   function To(Dst){
    var
     _f8_ = [0, Dst[2], Dst[3], Dst[4], Dst[5], Dst[6]],
     include =
       caml_call1
        (caml_call1
          (caml_call1(Base_for_tests_Test_blit[6], [0, equal, of_bool]),
           [0, create, length, get, set]),
         _f8_),
     blit = include[1],
     _f9_ = include[2],
     _f__ = include[4],
     _f$_ = include[5];
    function unsafe_blit(src, dst, dst_pos, len){
     caml_call5(blit, src, 0, dst, dst_pos, len);
     return unsafe_advance(src, len);
    }
    function blit$0(src, dst, dst_pos, len){
     caml_call5(blit, src, 0, dst, dst_pos, len);
     return unsafe_advance(src, len);
    }
    function blito(src, opt, dst, dst_pos, param){
     if(opt) var sth = opt[1], src_len = sth; else var src_len = length(src);
     caml_call6(_f9_, src, _A_, [0, src_len], dst, dst_pos, 0);
     return unsafe_advance(src, src_len);
    }
    function sub(src, len){
     var dst = caml_call3(_f__, src, 0, len);
     unsafe_advance(src, len);
     return dst;
    }
    function subo(len, src){
     if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(src);
     var dst = caml_call3(_f$_, _B_, [0, len$1], src);
     unsafe_advance(src, len$1);
     return dst;
    }
    return [0, unsafe_blit, blit$0, blito, sub, subo];
   }
   var
    To_bytes =
      To
       ([0,
         sexp_of_t$3,
         create$0,
         caml_ml_bytes_length,
         get$0,
         caml_bytes_set,
         unsafe_blit]),
    To_bigstring =
      To
       ([0,
         sexp_of_t$4,
         create$1,
         length$0,
         caml_ba_get_1,
         caml_ba_set_1,
         unsafe_blit$0]);
   function sub$0(src, len){
    var dst = caml_call3(String_dst[1], src, 0, len);
    unsafe_advance(src, len);
    return dst;
   }
   function subo$0(len, src){
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(src);
    var dst = caml_call3(String_dst[2], _C_, [0, len$1], src);
    unsafe_advance(src, len$1);
    return dst;
   }
   function uadv(t, n, x){unsafe_advance(t, n); return x;}
   function uadv_local(t, n, x){unsafe_advance(t, n); return x;}
   function pos(t, len){return unsafe_buf_pos(t, 0, len);}
   function tail_padded_fixed_string(padding, len, t){
    var _f7_ = pos(t, len);
    return uadv
            (t,
             len,
             caml_call5(Core_Bigstring[127], padding, t[1], _f7_, len, 0));
   }
   function head_padded_fixed_string(padding, len, t){
    var _f6_ = pos(t, len);
    return uadv
            (t,
             len,
             caml_call5(Core_Bigstring[130], padding, t[1], _f6_, len, 0));
   }
   function bytes(str_pos, len, t){
    var dst = caml_call1(Core_Bytes[44], len + str_pos | 0);
    To_bytes[2].call(null, t, dst, str_pos, len);
    return dst;
   }
   function string(str_pos, len, t){
    return caml_string_of_bytes(bytes(str_pos, len, t));
   }
   function bigstring(str_pos, len, t){
    var dst = caml_call1(Core_Bigstring[121], len + str_pos | 0);
    To_bigstring[2].call(null, t, dst, str_pos, len);
    return dst;
   }
   function byteso(opt, len, t){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(t);
    return bytes(str_pos, len$1, t);
   }
   function stringo(opt, len, t){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(t);
    return string(str_pos, len$1, t);
   }
   function bigstringo(opt, len, t){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(t);
    return bigstring(str_pos, len$1, t);
   }
   function bin_prot(reader, t){
    var match = read_bin_prot(reader, t, 0), len = match[2], a = match[1];
    return uadv(t, len, a);
   }
   function tail_padded_fixed_string$0(padding, len, t){
    var _f5_ = pos(t, len);
    return uadv_local
            (t,
             len,
             caml_call5(Core_Bigstring[128], padding, t[1], _f5_, len, 0));
   }
   function head_padded_fixed_string$0(padding, len, t){
    var _f4_ = pos(t, len);
    return uadv_local
            (t,
             len,
             caml_call5(Core_Bigstring[131], padding, t[1], _f4_, len, 0));
   }
   function bytes$0(str_pos, len, t){
    var dst = caml_call1(Core_Bytes[45], len + str_pos | 0);
    To_bytes[2].call(null, t, dst, str_pos, len);
    return dst;
   }
   function string$0(str_pos, len, t){
    return caml_string_of_bytes(bytes$0(str_pos, len, t));
   }
   function byteso$0(opt, len, t){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(t);
    return bytes$0(str_pos, len$1, t);
   }
   function stringo$0(opt, len, t){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(t);
    return string$0(str_pos, len$1, t);
   }
   var len = 8;
   function int64_t_be(t){
    var _f3_ = pos(t, len);
    return uadv_local(t, len, caml_call2(Core_Bigstring[117][4], t[1], _f3_));
   }
   function int64_t_le(t){
    var _f2_ = pos(t, len);
    return uadv_local(t, len, caml_call2(Core_Bigstring[117][3], t[1], _f2_));
   }
   var _D_ = 1;
   function char$0(t){
    var _f1_ = pos(t, _D_);
    return uadv(t, _D_, caml_ba_get_1(t[1], _f1_));
   }
   function uint8(t){
    var _f0_ = pos(t, _D_);
    return uadv(t, _D_, caml_call2(Core_Bigstring[45], t[1], _f0_));
   }
   function int8(t){
    var _fZ_ = pos(t, _D_);
    return uadv(t, _D_, caml_call2(Core_Bigstring[43], t[1], _fZ_));
   }
   var _E_ = 2;
   function int16_be(t){
    var _fY_ = pos(t, _E_);
    return uadv(t, _E_, caml_call2(Core_Bigstring[52], t[1], _fY_));
   }
   function int16_le(t){
    var _fX_ = pos(t, _E_);
    return uadv(t, _E_, caml_call2(Core_Bigstring[51], t[1], _fX_));
   }
   function uint16_be(t){
    var _fW_ = pos(t, _E_);
    return uadv(t, _E_, caml_call2(Core_Bigstring[60], t[1], _fW_));
   }
   function uint16_le(t){
    var _fV_ = pos(t, _E_);
    return uadv(t, _E_, caml_call2(Core_Bigstring[59], t[1], _fV_));
   }
   var _F_ = 4;
   function int32_be(t){
    var _fU_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[68], t[1], _fU_));
   }
   function int32_t_be(t){
    var _fT_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[104], t[1], _fT_));
   }
   function int32_le(t){
    var _fS_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[67], t[1], _fS_));
   }
   function int32_t_le(t){
    var _fR_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[103], t[1], _fR_));
   }
   function uint32_be(t){
    var _fQ_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[76], t[1], _fQ_));
   }
   function uint32_le(t){
    var _fP_ = pos(t, _F_);
    return uadv(t, _F_, caml_call2(Core_Bigstring[75], t[1], _fP_));
   }
   var len$0 = 8;
   function int64_be_exn(t){
    var _fO_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[86], t[1], _fO_));
   }
   function int64_le_exn(t){
    var _fN_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[85], t[1], _fN_));
   }
   function uint64_be_exn(t){
    var _fM_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[95], t[1], _fM_));
   }
   function uint64_le_exn(t){
    var _fL_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[96], t[1], _fL_));
   }
   function int64_t_be$0(t){
    var _fK_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[112], t[1], _fK_));
   }
   function int64_t_le$0(t){
    var _fJ_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[111], t[1], _fJ_));
   }
   function int64_be_trunc(t){
    var _fI_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[88], t[1], _fI_));
   }
   function int64_le_trunc(t){
    var _fH_ = pos(t, len$0);
    return uadv(t, len$0, caml_call2(Core_Bigstring[87], t[1], _fH_));
   }
   function uint8$0(t){
    var _fG_ = uint8(t);
    return caml_call1(Int_repr[2][28], _fG_);
   }
   function uint16_be$0(t){
    var _fF_ = uint16_be(t);
    return caml_call1(Int_repr[4][28], _fF_);
   }
   function uint16_le$0(t){
    var _fE_ = uint16_le(t);
    return caml_call1(Int_repr[4][28], _fE_);
   }
   function uint32_be$0(t){
    var _fD_ = int32_t_be(t);
    return caml_call1(Int_repr[6][27], _fD_);
   }
   function uint32_le$0(t){
    var _fC_ = int32_t_le(t);
    return caml_call1(Int_repr[6][27], _fC_);
   }
   function uint64_be(t){
    var _fB_ = int64_t_be$0(t);
    return caml_call1(Int_repr[10][28], _fB_);
   }
   function uint64_le(t){
    var _fA_ = int64_t_le$0(t);
    return caml_call1(Int_repr[10][28], _fA_);
   }
   function int8$0(t){
    var _fz_ = int8(t);
    return caml_call1(Int_repr[1][28], _fz_);
   }
   function int16_be$0(t){
    var _fy_ = int16_be(t);
    return caml_call1(Int_repr[3][28], _fy_);
   }
   function int16_le$0(t){
    var _fx_ = int16_le(t);
    return caml_call1(Int_repr[3][28], _fx_);
   }
   function int32_be$0(t){
    var _fw_ = int32_t_be(t);
    return caml_call1(Int_repr[5][27], _fw_);
   }
   function int32_le$0(t){
    var _fv_ = int32_t_le(t);
    return caml_call1(Int_repr[5][27], _fv_);
   }
   function int64_be(t){return int64_t_be$0(t);}
   function int64_le(t){return int64_t_le$0(t);}
   function write_bin_prot(writer, t, pos, a){
    var
     len = caml_call1(writer[1], a),
     buf_pos = unsafe_buf_pos(t, pos, len),
     stop_pos = caml_call3(writer[2], t[1], buf_pos, a);
    return caml_call2(Core[90], stop_pos - buf_pos | 0, len)
            ? len
            : fail
              (t,
               cst_Iobuf_write_bin_prot_got_u,
               [0,
                [0, -300472809, len],
                [0, 754481992, buf_pos],
                [0, 915354167, stop_pos]],
               function(param){
                var
                 arg2_049 = param[3],
                 arg1_048 = param[2],
                 arg0_047 = param[1],
                 v_044 = arg0_047[2],
                 res0_050 =
                   [1, [0, _G_, [0, caml_call1(Core[389], v_044), 0]]],
                 v_045 = arg1_048[2],
                 res1_051 =
                   [1, [0, _H_, [0, caml_call1(Core[389], v_045), 0]]],
                 v_046 = arg2_049[2],
                 res2_052 =
                   [1, [0, _I_, [0, caml_call1(Core[389], v_046), 0]]];
                return [1, [0, res0_050, [0, res1_051, [0, res2_052, 0]]]];
               });
   }
   function num_digits_neg(x){
    return caml_call2(Core[91], x, -10)
            ? 1
            : caml_call2
               (Core[91], x, -100)
              ? 2
              : caml_call2
                 (Core[91], x, -1000)
                ? 3
                : caml_call2
                   (Core[91], x, -10000)
                  ? 4
                  : caml_call2
                     (Core[91], x, -100000)
                    ? 5
                    : caml_call2
                       (Core[91], x, -1000000)
                      ? 6
                      : caml_call2
                         (Core[91], x, -10000000)
                        ? 7
                        : caml_call2
                           (Core[91], x, -100000000)
                          ? 8
                          : caml_call2
                             (Core[91], x, -1000000000)
                            ? 9
                            : arch_sixtyfour
                              ? caml_call2
                                 (Core[91], x, -1410065408)
                                ? 10
                                : caml_call2
                                   (Core[91], x, -1215752192)
                                  ? 11
                                  : caml_call2
                                     (Core[91], x, 727379968)
                                    ? 12
                                    : caml_call2
                                       (Core[91], x, -1316134912)
                                      ? 13
                                      : caml_call2
                                         (Core[91], x, -276447232)
                                        ? 14
                                        : caml_call2
                                           (Core[91], x, 1530494976)
                                          ? 15
                                          : caml_call2
                                             (Core[91], x, caml_mul(-1000000000, 10000000))
                                            ? 16
                                            : caml_call2
                                               (Core[91], x, caml_mul(-1000000000, 100000000))
                                              ? 17
                                              : caml_call2
                                                 (Core[91], x, caml_mul(-1000000000, 1000000000))
                                                ? 18
                                                : 19
                              : 10;
   }
   function num_digits(x){
    return caml_call2(Core[92], x, 0)
            ? num_digits_neg(x)
            : num_digits_neg(- x | 0);
   }
   function min_len(x){
    var _ft_ = num_digits(x), _fu_ = caml_call2(Core[92], x, 0);
    return caml_call1(Core_Bool[11], _fu_) + _ft_ | 0;
   }
   var _M_ = caml_ml_string_length(caml_call1(Core_Int[79], Core_Int[46]));
   if(! caml_call2(Core[89], _M_, 20))
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
   function unsafe_poke_negative_decimal_w(buf, pos, len, int$0){
    var int$1 = [0, int$0], _fr_ = (pos + len | 0) - 1 | 0;
    if(_fr_ >= pos){
     var pos$0 = _fr_;
     for(;;){
      var x = int$1[1];
      int$1[1] = int$1[1] / 10 | 0;
      caml_ba_set_1
       (buf,
        pos$0,
        caml_call1
         (Core_Char[14], 48 + ((- x | 0) + (int$1[1] * 10 | 0) | 0) | 0));
      var _fs_ = pos$0 - 1 | 0;
      if(pos === pos$0) break;
      var pos$0 = _fs_;
     }
    }
    return 0;
   }
   function unsafe_poke_negative_decimal(buf, pos, len, int$0){
    caml_ba_set_1(buf, pos, 45);
    return unsafe_poke_negative_decimal_w
            (buf, pos + 1 | 0, len - 1 | 0, int$0);
   }
   function gen_poke_padded_decimal_trunc(buf_pos, t, pos, len, int$0){
    var pos$0 = caml_call3(buf_pos, t, pos, len);
    return caml_call2(Core[92], int$0, 0)
            ? unsafe_poke_negative_decimal(t[1], pos$0, len, int$0)
            : unsafe_poke_negative_decimal_w(t[1], pos$0, len, - int$0 | 0);
   }
   function poke_padded_decimal_trunc(t, pos, len, int$0){
    return gen_poke_padded_decimal_trunc(unsafe_buf_pos, t, pos, len, int$0);
   }
   function unsafe_poke_padded_decimal_tru(t, pos, len, int$0){
    return gen_poke_padded_decimal_trunc(unsafe_buf_pos, t, pos, len, int$0);
   }
   function gen_poke_padded_decimal
   (poke_padded_decimal_trunc, t, pos, len, int$0){
    var _fq_ = min_len(int$0), len$0 = caml_call2(Core[97], len, _fq_);
    caml_call4(poke_padded_decimal_trunc, t, pos, len$0, int$0);
    return len$0;
   }
   function poke_padded_decimal(t, pos, len, int$0){
    return gen_poke_padded_decimal
            (poke_padded_decimal_trunc, t, pos, len, int$0);
   }
   function unsafe_poke_padded_decimal(t, pos, len, int$0){
    return gen_poke_padded_decimal
            (unsafe_poke_padded_decimal_tru, t, pos, len, int$0);
   }
   function gen_poke_decimal(poke_padded_decimal_trunc, t, pos, int$0){
    var len = min_len(int$0);
    caml_call4(poke_padded_decimal_trunc, t, pos, len, int$0);
    return len;
   }
   function poke_decimal(t, pos, int$0){
    return gen_poke_decimal(poke_padded_decimal_trunc, t, pos, int$0);
   }
   function unsafe_poke_decimal(t, pos, int$0){
    return gen_poke_decimal(unsafe_poke_padded_decimal_tru, t, pos, int$0);
   }
   var len_iso8601_extended = 10;
   function gen_poke_iso8601_extended(buf_pos, t, pos, date){
    var
     pos$0 = caml_call3(buf_pos, t, pos, len_iso8601_extended),
     _fm_ = - caml_call1(Core_Date[54], date) | 0;
    unsafe_poke_negative_decimal_w(t[1], pos$0, 4, _fm_);
    var
     pos$1 = pos$0 + 4 | 0,
     _fn_ = caml_call1(Core_Date[53], date),
     _fo_ = - caml_call1(Core_Month[85], _fn_) | 0;
    unsafe_poke_negative_decimal(t[1], pos$1, 3, _fo_);
    var pos$2 = pos$1 + 3 | 0, _fp_ = - caml_call1(Core_Date[52], date) | 0;
    return unsafe_poke_negative_decimal(t[1], pos$2, 3, _fp_);
   }
   function date_string_iso8601_extended(t, pos, date){
    return gen_poke_iso8601_extended(unsafe_buf_pos, t, pos, date);
   }
   function unsafe_poke_iso8601_extended(t, pos, date){
    return gen_poke_iso8601_extended(unsafe_buf_pos, t, pos, date);
   }
   function pos$0(t, len){return unsafe_buf_pos(t, 0, len);}
   function tail_padded_fixed_string$1(padding, len, t, src){
    var _fl_ = pos$0(t, len);
    caml_call5(Core_Bigstring[129], padding, t[1], _fl_, len, src);
    return unsafe_advance(t, len);
   }
   function head_padded_fixed_string$1(padding, len, t, src){
    var _fk_ = pos$0(t, len);
    caml_call5(Core_Bigstring[132], padding, t[1], _fk_, len, src);
    return unsafe_advance(t, len);
   }
   function bytes$1(str_pos, len, t, src){
    var _fj_ = pos$0(t, len);
    caml_call5(Core_Bigstring[31][1], src, str_pos, t[1], _fj_, len);
    return unsafe_advance(t, len);
   }
   function string$1(str_pos, len, t, src){
    var _fi_ = pos$0(t, len);
    caml_call5(Core_Bigstring[29][1], src, str_pos, t[1], _fi_, len);
    return unsafe_advance(t, len);
   }
   function bigstring$0(str_pos, len, t, src){
    var _fh_ = pos$0(t, len);
    caml_call5(Core_Bigstring[22], src, str_pos, t[1], _fh_, len);
    return unsafe_advance(t, len);
   }
   function byteso$1(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_bytes_length(src) - str_pos | 0;
    return bytes$1(str_pos, len$1, t, src);
   }
   function stringo$1(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(src) - str_pos | 0;
    return string$1(str_pos, len$1, t, src);
   }
   function bigstringo$0(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Core_Bigstring[21], src) - str_pos | 0;
    return bigstring$0(str_pos, len$1, t, src);
   }
   function bin_prot$0(writer, t, a){
    return unsafe_advance(t, write_bin_prot(writer, t, 0, a));
   }
   var _N_ = 1;
   function char$1(t, c){
    var _fg_ = pos$0(t, _N_);
    caml_ba_set_1(t[1], _fg_, c);
    return unsafe_advance(t, _N_);
   }
   function uint8_trunc(t, i){
    var _ff_ = pos$0(t, _N_);
    caml_call3(Core_Bigstring[46], t[1], _ff_, i);
    return unsafe_advance(t, _N_);
   }
   function int8_trunc(t, i){
    var _fe_ = pos$0(t, _N_);
    caml_call3(Core_Bigstring[44], t[1], _fe_, i);
    return unsafe_advance(t, _N_);
   }
   var _O_ = 2;
   function int16_be_trunc(t, i){
    var _fd_ = pos$0(t, _O_);
    caml_call3(Core_Bigstring[54], t[1], _fd_, i);
    return unsafe_advance(t, _O_);
   }
   function int16_le_trunc(t, i){
    var _fc_ = pos$0(t, _O_);
    caml_call3(Core_Bigstring[53], t[1], _fc_, i);
    return unsafe_advance(t, _O_);
   }
   function uint16_be_trunc(t, i){
    var _fb_ = pos$0(t, _O_);
    caml_call3(Core_Bigstring[62], t[1], _fb_, i);
    return unsafe_advance(t, _O_);
   }
   function uint16_le_trunc(t, i){
    var _fa_ = pos$0(t, _O_);
    caml_call3(Core_Bigstring[61], t[1], _fa_, i);
    return unsafe_advance(t, _O_);
   }
   var _P_ = 4;
   function int32_be_trunc(t, i){
    var _e$_ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[70], t[1], _e$_, i);
    return unsafe_advance(t, _P_);
   }
   function int32_t_be$0(t, i){
    var _e__ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[106], t[1], _e__, i);
    return unsafe_advance(t, _P_);
   }
   function int32_le_trunc(t, i){
    var _e9_ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[69], t[1], _e9_, i);
    return unsafe_advance(t, _P_);
   }
   function int32_t_le$0(t, i){
    var _e8_ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[105], t[1], _e8_, i);
    return unsafe_advance(t, _P_);
   }
   function uint32_be_trunc(t, i){
    var _e7_ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[78], t[1], _e7_, i);
    return unsafe_advance(t, _P_);
   }
   function uint32_le_trunc(t, i){
    var _e6_ = pos$0(t, _P_);
    caml_call3(Core_Bigstring[77], t[1], _e6_, i);
    return unsafe_advance(t, _P_);
   }
   var len$1 = 8;
   function int64_be$0(t, i){
    var _e5_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[90], t[1], _e5_, i);
    return unsafe_advance(t, len$1);
   }
   function int64_le$0(t, i){
    var _e4_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[89], t[1], _e4_, i);
    return unsafe_advance(t, len$1);
   }
   function uint64_be_trunc(t, i){
    var _e3_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[98], t[1], _e3_, i);
    return unsafe_advance(t, len$1);
   }
   function uint64_le_trunc(t, i){
    var _e2_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[97], t[1], _e2_, i);
    return unsafe_advance(t, len$1);
   }
   function int64_t_be$1(t, i){
    var _e1_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[114], t[1], _e1_, i);
    return unsafe_advance(t, len$1);
   }
   function int64_t_le$1(t, i){
    var _e0_ = pos$0(t, len$1);
    caml_call3(Core_Bigstring[113], t[1], _e0_, i);
    return unsafe_advance(t, len$1);
   }
   function decimal(t, i){return unsafe_advance(t, poke_decimal(t, 0, i));}
   function padded_decimal(len, t, i){
    return unsafe_advance(t, poke_padded_decimal(t, 0, len, i));
   }
   function date_string_iso8601_extended$0(t, date){
    date_string_iso8601_extended(t, 0, date);
    return unsafe_advance(t, len_iso8601_extended);
   }
   function uint8$1(t, i){
    return uint8_trunc(t, caml_call1(Int_repr[2][30], i));
   }
   function uint16_be$1(t, i){
    return uint16_be_trunc(t, caml_call1(Int_repr[4][30], i));
   }
   function uint16_le$1(t, i){
    return uint16_le_trunc(t, caml_call1(Int_repr[4][30], i));
   }
   function uint32_be$1(t, i){
    return int32_t_be$0(t, caml_call1(Int_repr[6][29], i));
   }
   function uint32_le$1(t, i){
    return int32_t_le$0(t, caml_call1(Int_repr[6][29], i));
   }
   function uint64_be$0(t, i){
    return int64_t_be$1(t, caml_call1(Int_repr[10][30], i));
   }
   function uint64_le$0(t, i){
    return int64_t_le$1(t, caml_call1(Int_repr[10][30], i));
   }
   function int8$1(t, i){
    return int8_trunc(t, caml_call1(Int_repr[1][30], i));
   }
   function int16_be$1(t, i){
    return int16_be_trunc(t, caml_call1(Int_repr[3][30], i));
   }
   function int16_le$1(t, i){
    return int16_le_trunc(t, caml_call1(Int_repr[3][30], i));
   }
   function int32_be$1(t, i){
    return int32_t_be$0(t, caml_call1(Int_repr[5][28], i));
   }
   function int32_le$1(t, i){
    return int32_t_le$0(t, caml_call1(Int_repr[5][28], i));
   }
   function int64_be$1(t, i){return int64_t_be$1(t, i);}
   function int64_le$1(t, i){return int64_t_le$1(t, i);}
   var
    To_bytes$0 =
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6], [0, equal, of_bool]),
          [0, create, length, get, set]),
        [0,
         create$0,
         caml_ml_bytes_length,
         get$0,
         caml_bytes_set,
         unsafe_blit]),
    To_bigstring$0 =
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6], [0, equal, of_bool]),
          [0, create, length, get, set]),
        [0, create$1, length$0, caml_ba_get_1, caml_ba_set_1, unsafe_blit$0]);
   function tail_padded_fixed_string$2(padding, len, t, pos){
    var _eZ_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[127], padding, t[1], _eZ_, len, 0);
   }
   function head_padded_fixed_string$2(padding, len, t, pos){
    var _eY_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[130], padding, t[1], _eY_, len, 0);
   }
   function bytes$2(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bytes[44], len + str_pos | 0),
     _eX_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[30][1], t[1], _eX_, dst, str_pos, len);
    return dst;
   }
   function string$2(str_pos, len, t, pos){
    return caml_string_of_bytes(bytes$2(str_pos, len, t, pos));
   }
   function bigstring$1(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bigstring[121], len + str_pos | 0),
     _eW_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[22], t[1], _eW_, dst, str_pos, len);
    return dst;
   }
   function byteso$2(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bytes$2(str_pos, len$1, t, pos);
   }
   function stringo$2(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return string$2(str_pos, len$1, t, pos);
   }
   function bigstringo$1(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bigstring$1(str_pos, len$1, t, pos);
   }
   function bin_prot$1(reader, t, pos){
    return read_bin_prot(reader, t, pos)[1];
   }
   function index(t, opt, _eT_, c){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(_eT_)
     var sth$0 = _eT_[1], len = sth$0;
    else
     var len = length(t) - pos | 0;
    var pos$0 = unsafe_buf_pos(t, pos, len);
    function _eU_(x){return x - t[3] | 0;}
    var _eV_ = caml_call4(Core_Bigstring[37], [0, pos$0], [0, len], c, t[1]);
    return caml_call2(Core_Option[34], _eV_, _eU_);
   }
   function tail_padded_fixed_string$3(padding, len, t, pos){
    var _eS_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[128], padding, t[1], _eS_, len, 0);
   }
   function head_padded_fixed_string$3(padding, len, t, pos){
    var _eR_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[131], padding, t[1], _eR_, len, 0);
   }
   function bytes$3(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bytes[45], len + str_pos | 0),
     _eQ_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[30][1], t[1], _eQ_, dst, str_pos, len);
    return dst;
   }
   function string$3(str_pos, len, t, pos){
    return caml_string_of_bytes(bytes$3(str_pos, len, t, pos));
   }
   function byteso$3(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bytes$3(str_pos, len$1, t, pos);
   }
   function stringo$3(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return string$3(str_pos, len$1, t, pos);
   }
   var len$2 = 8;
   function int64_t_be$2(t, pos){
    var _eP_ = unsafe_buf_pos(t, pos, len$2);
    return caml_call2(Core_Bigstring[117][4], t[1], _eP_);
   }
   function int64_t_le$2(t, pos){
    var _eO_ = unsafe_buf_pos(t, pos, len$2);
    return caml_call2(Core_Bigstring[117][3], t[1], _eO_);
   }
   function char$2(t, pos){return get_char(t, pos);}
   var _Q_ = 1;
   function uint8$2(t, pos){
    var _eN_ = unsafe_buf_pos(t, pos, _Q_);
    return caml_call2(Core_Bigstring[45], t[1], _eN_);
   }
   function int8$2(t, pos){
    var _eM_ = unsafe_buf_pos(t, pos, _Q_);
    return caml_call2(Core_Bigstring[43], t[1], _eM_);
   }
   var _R_ = 2;
   function int16_be$2(t, pos){
    var _eL_ = unsafe_buf_pos(t, pos, _R_);
    return caml_call2(Core_Bigstring[52], t[1], _eL_);
   }
   function int16_le$2(t, pos){
    var _eK_ = unsafe_buf_pos(t, pos, _R_);
    return caml_call2(Core_Bigstring[51], t[1], _eK_);
   }
   function uint16_be$2(t, pos){
    var _eJ_ = unsafe_buf_pos(t, pos, _R_);
    return caml_call2(Core_Bigstring[60], t[1], _eJ_);
   }
   function uint16_le$2(t, pos){
    var _eI_ = unsafe_buf_pos(t, pos, _R_);
    return caml_call2(Core_Bigstring[59], t[1], _eI_);
   }
   var _S_ = 4;
   function int32_be$2(t, pos){
    var _eH_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[68], t[1], _eH_);
   }
   function int32_t_be$1(t, pos){
    var _eG_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[104], t[1], _eG_);
   }
   function int32_le$2(t, pos){
    var _eF_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[67], t[1], _eF_);
   }
   function int32_t_le$1(t, pos){
    var _eE_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[103], t[1], _eE_);
   }
   function uint32_be$2(t, pos){
    var _eD_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[76], t[1], _eD_);
   }
   function uint32_le$2(t, pos){
    var _eC_ = unsafe_buf_pos(t, pos, _S_);
    return caml_call2(Core_Bigstring[75], t[1], _eC_);
   }
   var len$3 = 8;
   function int64_be_exn$0(t, pos){
    var _eB_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[86], t[1], _eB_);
   }
   function int64_le_exn$0(t, pos){
    var _eA_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[85], t[1], _eA_);
   }
   function uint64_be_exn$0(t, pos){
    var _ez_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[95], t[1], _ez_);
   }
   function uint64_le_exn$0(t, pos){
    var _ey_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[96], t[1], _ey_);
   }
   function int64_t_be$3(t, pos){
    var _ex_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[112], t[1], _ex_);
   }
   function int64_t_le$3(t, pos){
    var _ew_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[111], t[1], _ew_);
   }
   function int64_be_trunc$0(t, pos){
    var _ev_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[88], t[1], _ev_);
   }
   function int64_le_trunc$0(t, pos){
    var _eu_ = unsafe_buf_pos(t, pos, len$3);
    return caml_call2(Core_Bigstring[87], t[1], _eu_);
   }
   function uint8$3(t, pos){
    var _et_ = uint8$2(t, pos);
    return caml_call1(Int_repr[2][28], _et_);
   }
   function uint16_be$3(t, pos){
    var _es_ = uint16_be$2(t, pos);
    return caml_call1(Int_repr[4][28], _es_);
   }
   function uint16_le$3(t, pos){
    var _er_ = uint16_le$2(t, pos);
    return caml_call1(Int_repr[4][28], _er_);
   }
   function uint32_be$3(t, pos){
    var _eq_ = int32_t_be$1(t, pos);
    return caml_call1(Int_repr[6][27], _eq_);
   }
   function uint32_le$3(t, pos){
    var _ep_ = int32_t_le$1(t, pos);
    return caml_call1(Int_repr[6][27], _ep_);
   }
   function uint64_be$1(t, pos){
    var _eo_ = int64_t_be$3(t, pos);
    return caml_call1(Int_repr[10][28], _eo_);
   }
   function uint64_le$1(t, pos){
    var _en_ = int64_t_le$3(t, pos);
    return caml_call1(Int_repr[10][28], _en_);
   }
   function int8$3(t, pos){
    var _em_ = int8$2(t, pos);
    return caml_call1(Int_repr[1][28], _em_);
   }
   function int16_be$3(t, pos){
    var _el_ = int16_be$2(t, pos);
    return caml_call1(Int_repr[3][28], _el_);
   }
   function int16_le$3(t, pos){
    var _ek_ = int16_le$2(t, pos);
    return caml_call1(Int_repr[3][28], _ek_);
   }
   function int32_be$3(t, pos){
    var _ej_ = int32_t_be$1(t, pos);
    return caml_call1(Int_repr[5][27], _ej_);
   }
   function int32_le$3(t, pos){
    var _ei_ = int32_t_le$1(t, pos);
    return caml_call1(Int_repr[5][27], _ei_);
   }
   function int64_be$2(t, pos){return int64_t_be$3(t, pos);}
   function int64_le$2(t, pos){return int64_t_le$3(t, pos);}
   function tail_padded_fixed_string$4(padding, len, t, pos, src){
    var _eh_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[129], padding, t[1], _eh_, len, src);
   }
   function head_padded_fixed_string$4(padding, len, t, pos, src){
    var _eg_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[132], padding, t[1], _eg_, len, src);
   }
   function bytes$4(str_pos, len, t, pos, src){
    var _ef_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[31][1], src, str_pos, t[1], _ef_, len);
   }
   function string$4(str_pos, len, t, pos, src){
    var _ee_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[29][1], src, str_pos, t[1], _ee_, len);
   }
   function bigstring$2(str_pos, len, t, pos, src){
    var _ed_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[22], src, str_pos, t[1], _ed_, len);
   }
   function byteso$4(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_bytes_length(src) - str_pos | 0;
    return bytes$4(str_pos, len$1, t, pos, src);
   }
   function stringo$4(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(src) - str_pos | 0;
    return string$4(str_pos, len$1, t, pos, src);
   }
   function bigstringo$2(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Core_Bigstring[21], src) - str_pos | 0;
    return bigstring$2(str_pos, len$1, t, pos, src);
   }
   function bin_prot$2(writer, t, pos, a){
    write_bin_prot(writer, t, pos, a);
    return 0;
   }
   var _T_ = 1;
   function char$3(t, pos, c){return set_char(t, pos, c);}
   function uint8_trunc$0(t, pos, i){
    var _ec_ = unsafe_buf_pos(t, pos, _T_);
    return caml_call3(Core_Bigstring[46], t[1], _ec_, i);
   }
   function int8_trunc$0(t, pos, i){
    var _eb_ = unsafe_buf_pos(t, pos, _T_);
    return caml_call3(Core_Bigstring[44], t[1], _eb_, i);
   }
   var _U_ = 2;
   function int16_be_trunc$0(t, pos, i){
    var _ea_ = unsafe_buf_pos(t, pos, _U_);
    return caml_call3(Core_Bigstring[54], t[1], _ea_, i);
   }
   function int16_le_trunc$0(t, pos, i){
    var _d$_ = unsafe_buf_pos(t, pos, _U_);
    return caml_call3(Core_Bigstring[53], t[1], _d$_, i);
   }
   function uint16_be_trunc$0(t, pos, i){
    var _d__ = unsafe_buf_pos(t, pos, _U_);
    return caml_call3(Core_Bigstring[62], t[1], _d__, i);
   }
   function uint16_le_trunc$0(t, pos, i){
    var _d9_ = unsafe_buf_pos(t, pos, _U_);
    return caml_call3(Core_Bigstring[61], t[1], _d9_, i);
   }
   var _V_ = 4;
   function int32_be_trunc$0(t, pos, i){
    var _d8_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[70], t[1], _d8_, i);
   }
   function int32_t_be$2(t, pos, i){
    var _d7_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[106], t[1], _d7_, i);
   }
   function int32_le_trunc$0(t, pos, i){
    var _d6_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[69], t[1], _d6_, i);
   }
   function int32_t_le$2(t, pos, i){
    var _d5_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[105], t[1], _d5_, i);
   }
   function uint32_be_trunc$0(t, pos, i){
    var _d4_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[78], t[1], _d4_, i);
   }
   function uint32_le_trunc$0(t, pos, i){
    var _d3_ = unsafe_buf_pos(t, pos, _V_);
    return caml_call3(Core_Bigstring[77], t[1], _d3_, i);
   }
   var len$4 = 8;
   function int64_be$3(t, pos, i){
    var _d2_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[90], t[1], _d2_, i);
   }
   function int64_le$3(t, pos, i){
    var _d1_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[89], t[1], _d1_, i);
   }
   function uint64_be_trunc$0(t, pos, i){
    var _d0_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[98], t[1], _d0_, i);
   }
   function uint64_le_trunc$0(t, pos, i){
    var _dZ_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[97], t[1], _dZ_, i);
   }
   function int64_t_be$4(t, pos, i){
    var _dY_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[114], t[1], _dY_, i);
   }
   function int64_t_le$4(t, pos, i){
    var _dX_ = unsafe_buf_pos(t, pos, len$4);
    return caml_call3(Core_Bigstring[113], t[1], _dX_, i);
   }
   function uint8$4(t, pos, i){
    return uint8_trunc$0(t, pos, caml_call1(Int_repr[2][30], i));
   }
   function uint16_be$4(t, pos, i){
    return uint16_be_trunc$0(t, pos, caml_call1(Int_repr[4][30], i));
   }
   function uint16_le$4(t, pos, i){
    return uint16_le_trunc$0(t, pos, caml_call1(Int_repr[4][30], i));
   }
   function uint32_be$4(t, pos, i){
    return int32_t_be$2(t, pos, caml_call1(Int_repr[6][29], i));
   }
   function uint32_le$4(t, pos, i){
    return int32_t_le$2(t, pos, caml_call1(Int_repr[6][29], i));
   }
   function uint64_be$2(t, pos, i){
    return int64_t_be$4(t, pos, caml_call1(Int_repr[10][30], i));
   }
   function uint64_le$2(t, pos, i){
    return int64_t_le$4(t, pos, caml_call1(Int_repr[10][30], i));
   }
   function int8$4(t, pos, i){
    return int8_trunc$0(t, pos, caml_call1(Int_repr[1][30], i));
   }
   function int16_be$4(t, pos, i){
    return int16_be_trunc$0(t, pos, caml_call1(Int_repr[3][30], i));
   }
   function int16_le$4(t, pos, i){
    return int16_le_trunc$0(t, pos, caml_call1(Int_repr[3][30], i));
   }
   function int32_be$4(t, pos, i){
    return int32_t_be$2(t, pos, caml_call1(Int_repr[5][28], i));
   }
   function int32_le$4(t, pos, i){
    return int32_t_le$2(t, pos, caml_call1(Int_repr[5][28], i));
   }
   function int64_be$4(t, pos, i){return int64_t_be$4(t, pos, i);}
   function int64_le$4(t, pos, i){return int64_t_le$4(t, pos, i);}
   function unsafe_blit$1(src, src_pos, dst, dst_pos, len){
    var
     _dU_ = unsafe_buf_pos(dst, dst_pos, len),
     _dV_ = dst[1],
     _dW_ = unsafe_buf_pos(src, src_pos, len);
    return caml_call5(Core_Bigstring[24], src[1], _dW_, _dV_, _dU_, len);
   }
   var
    include =
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5], [0, equal, of_bool]),
        [0, create, length, get, set, unsafe_blit$1]),
    blit = include[1],
    blito = include[2],
    sub$1 = include[4],
    subo$1 = include[5];
   function blit_maximal(src, opt, dst, _dR_, param){
    if(opt) var sth = opt[1], src_pos = sth; else var src_pos = 0;
    if(_dR_) var sth$0 = _dR_[1], dst_pos = sth$0; else var dst_pos = 0;
    var
     _dS_ = length(dst) - dst_pos | 0,
     _dT_ = length(src) - src_pos | 0,
     len = caml_call2(Core[96], _dT_, _dS_);
    caml_call5(blit, src, src_pos, dst, dst_pos, len);
    return len;
   }
   function unsafe_blit$2(src, dst, dst_pos, len){
    unsafe_blit$1(src, 0, dst, dst_pos, len);
    return unsafe_advance(src, len);
   }
   function blit$0(src, dst, dst_pos, len){
    caml_call5(blit, src, 0, dst, dst_pos, len);
    return unsafe_advance(src, len);
   }
   function blito$0(src, opt, dst, _dQ_, param){
    if(opt) var sth = opt[1], src_len = sth; else var src_len = length(src);
    if(_dQ_) var sth$0 = _dQ_[1], dst_pos = sth$0; else var dst_pos = 0;
    return blit$0(src, dst, dst_pos, src_len);
   }
   function sub$2(src, len){
    var dst = caml_call3(sub$1, src, 0, len);
    unsafe_advance(src, len);
    return dst;
   }
   function subo$2(len, src){
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = length(src);
    return sub$2(src, len$1);
   }
   function blit_maximal$0(src, dst, opt, param){
    if(opt) var sth = opt[1], dst_pos = sth; else var dst_pos = 0;
    var
     _dO_ = length(dst) - dst_pos | 0,
     _dP_ = length(src),
     len = caml_call2(Core[96], _dP_, _dO_);
    blit$0(src, dst, dst_pos, len);
    return len;
   }
   function unsafe_blit$3(src, src_pos, dst, len){
    unsafe_blit$1(src, src_pos, dst, 0, len);
    return unsafe_advance(dst, len);
   }
   function blit$1(src, src_pos, dst, len){
    caml_call5(blit, src, src_pos, dst, 0, len);
    return unsafe_advance(dst, len);
   }
   function blito$1(src, opt, _dN_, dst, param){
    if(opt) var sth = opt[1], src_pos = sth; else var src_pos = 0;
    if(_dN_)
     var sth$0 = _dN_[1], src_len = sth$0;
    else
     var src_len = length(src) - src_pos | 0;
    return blit$1(src, src_pos, dst, src_len);
   }
   function blit_maximal$1(src, opt, dst, param){
    if(opt) var sth = opt[1], src_pos = sth; else var src_pos = 0;
    var
     _dL_ = length(dst),
     _dM_ = length(src) - src_pos | 0,
     len = caml_call2(Core[96], _dM_, _dL_);
    blit$1(src, src_pos, dst, len);
    return len;
   }
   function unsafe_blit$4(src, dst, len){
    return src === dst
            ? unsafe_advance(src, len)
            : (unsafe_blit$1
               (src, 0, dst, 0, len),
              unsafe_advance(src, len),
              unsafe_advance(dst, len));
   }
   function blit$2(src, dst, len){
    return src === dst
            ? unsafe_advance(src, len)
            : (caml_call5
               (blit, src, 0, dst, 0, len),
              unsafe_advance(src, len),
              unsafe_advance(dst, len));
   }
   function blito$2(src, opt, dst, param){
    if(opt) var sth = opt[1], src_len = sth; else var src_len = length(src);
    return blit$2(src, dst, src_len);
   }
   function blit_maximal$2(src, dst){
    var
     _dJ_ = length(dst),
     _dK_ = length(src),
     len = caml_call2(Core[96], _dK_, _dJ_);
    unsafe_blit$4(src, dst, len);
    return len;
   }
   function transfer(src, dst){
    reset(dst);
    blito$1(src, 0, 0, dst, 0);
    return flip_lo(dst);
   }
   var bin_prot_length_prefix_bytes = 4;
   function consume_bin_prot(t, bin_prot_reader){
    var _dA_ = length(t);
    if(caml_call2(Core[92], _dA_, bin_prot_length_prefix_bytes))
     var
      _dB_ =
        function(x_063){
         function _dH_(param){return _W_;}
         return sexp_of_t$0(function(param){return _X_;}, _dH_)(x_063);
        },
      _dC_ = globalize_t_repr(t),
      result =
        caml_call5
         (Core[244], 0, 0, cst_Iobuf_consume_bin_prot_not, _dC_, _dB_);
    else{
     var mark = t[3], v_len = int32_be(t), _dD_ = length(t);
     if(caml_call2(Core[91], v_len, _dD_)){
      t[3] = mark;
      var
       _dE_ =
         function(param){
          var
           arg1_066 = param[2],
           arg0_065 = param[1],
           res0_067 = caml_call1(Core[389], arg0_065);
          function _dI_(param){return _Y_;}
          var
           res1_068 =
             sexp_of_t$0(function(param){return _Z_;}, _dI_)(arg1_066);
          return [1, [0, res0_067, [0, res1_068, 0]]];
         },
       _dF_ = [0, v_len, globalize_t_repr(t)],
       _dG_ =
         caml_call5
          (Core[244], 0, 0, cst_Iobuf_consume_bin_prot_not$0, _dF_, _dE_);
     }
     else
      var _dG_ = [0, bin_prot(bin_prot_reader, t)];
     var result = _dG_;
    }
    return result;
   }
   function fill_bin_prot(t, writer, v){
    var
     v_len = caml_call1(writer[1], v),
     need = v_len + 4 | 0,
     _dw_ = length(t);
    if(caml_call2(Core[91], need, _dw_))
     var
      _dx_ =
        function(param){
         var
          arg1_071 = param[2],
          arg0_070 = param[1],
          res0_072 = caml_call1(Core[389], arg0_070);
         function _dz_(param){return ___;}
         var
          res1_073 = sexp_of_t$0(function(param){return _$_;}, _dz_)(arg1_071);
         return [1, [0, res0_072, [0, res1_073, 0]]];
        },
      _dy_ = [0, need, globalize_t_repr(t)],
      result =
        caml_call5
         (Core[244], 0, 0, cst_Iobuf_fill_bin_prot_not_en, _dy_, _dx_);
    else{
     int32_be_trunc(t, v_len);
     bin_prot$0(writer, t, v);
     var result = _aa_;
    }
    return result;
   }
   function fill_bin_prot_local(t, sizer, writer, v){
    var v_len = caml_call1(sizer, v), need = v_len + 4 | 0, _ds_ = length(t);
    if(caml_call2(Core[91], need, _ds_))
     var
      _dt_ =
        function(param){
         var
          arg1_076 = param[2],
          arg0_075 = param[1],
          res0_077 = caml_call1(Core[389], arg0_075);
         function _dv_(param){return _ab_;}
         var
          res1_078 =
            sexp_of_t$0(function(param){return _ac_;}, _dv_)(arg1_076);
         return [1, [0, res0_077, [0, res1_078, 0]]];
        },
      _du_ = [0, need, globalize_t_repr(t)],
      result =
        caml_call5
         (Core[244], 0, 0, cst_Iobuf_fill_bin_prot_local_, _du_, _dt_);
    else{
     int32_be_trunc(t, v_len);
     var
      len = caml_call1(sizer, v),
      buf_pos = unsafe_buf_pos(t, 0, len),
      stop_pos = caml_call3(writer, t[1], buf_pos, v),
      _dr_ =
        caml_call2(Core[90], stop_pos - buf_pos | 0, len)
         ? len
         : fail
           (t,
            cst_Iobuf_write_bin_prot_local,
            [0,
             [0, -300472809, len],
             [0, 754481992, buf_pos],
             [0, 915354167, stop_pos]],
            function(param){
             var
              arg2_058 = param[3],
              arg1_057 = param[2],
              arg0_056 = param[1],
              v_053 = arg0_056[2],
              res0_059 = [1, [0, _J_, [0, caml_call1(Core[389], v_053), 0]]],
              v_054 = arg1_057[2],
              res1_060 = [1, [0, _K_, [0, caml_call1(Core[389], v_054), 0]]],
              v_055 = arg2_058[2],
              res2_061 = [1, [0, _L_, [0, caml_call1(Core[389], v_055), 0]]];
             return [1, [0, res0_059, [0, res1_060, [0, res2_061, 0]]]];
            });
     unsafe_advance(t, _dr_);
     var result = _ad_;
    }
    return result;
   }
   function buf(t){return t[1];}
   function hi_max(t){return t[5];}
   function hi(t){return t[4];}
   function lo(t){return t[3];}
   function lo_min(t){return t[2];}
   function set_buf(t, buf){t[1] = buf; return 0;}
   function set_hi_max(t, hi_max){t[5] = hi_max; return 0;}
   function set_hi(t, hi){t[4] = hi; return 0;}
   function set_lo(t, lo){t[3] = lo; return 0;}
   function set_lo_min(t, lo_min){t[2] = lo_min; return 0;}
   function to_bigstring_shared(pos, len, t){
    var
     _dq_ = length(t),
     match = caml_call4(Core_Ordered_collection_common[1], pos, len, 0, _dq_),
     len$0 = match[2],
     pos$0 = match[1];
    return caml_call3
            (Core_Bigstring[122], [0, t[3] + pos$0 | 0], [0, len$0], t[1]);
   }
   function unsafe_reinitialize(t, lo_min, lo, hi, hi_max, buf){
    var _dd_ = caml_call2(Core[89], 0, lo_min);
    if(_dd_){
     var _de_ = caml_call2(Core[89], lo_min, lo);
     if(_de_){
      var _df_ = caml_call2(Core[89], lo, hi);
      if(_df_){
       var _dg_ = caml_call2(Core[89], hi, hi_max);
       if(_dg_)
        var
         _dh_ = caml_call1(Core_Bigstring[21], buf),
         _di_ = caml_call2(Core[89], hi_max, _dh_);
       else
        var _di_ = _dg_;
      }
      else
       var _di_ = _df_;
     }
     else
      var _di_ = _de_;
    }
    else
     var _di_ = _dd_;
    if(1 - _di_){
     var
      _dj_ = caml_call1(Core_Bigstring[21], buf),
      _dk_ = [0, [1, [0, _ae_, [0, caml_call1(Core[389], _dj_), 0]]], 0],
      _dl_ = [0, [1, [0, _af_, [0, caml_call1(Core[389], hi_max), 0]]], _dk_],
      _dm_ = [0, [1, [0, _ag_, [0, caml_call1(Core[389], hi), 0]]], _dl_],
      _dn_ = [0, [1, [0, _ah_, [0, caml_call1(Core[389], lo), 0]]], _dm_],
      _do_ = [0, [1, [0, _ai_, [0, caml_call1(Core[389], lo_min), 0]]], _dn_],
      _dp_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Expert_reinitialize_got_in),
          _do_]];
     caml_call1(Core[261], _dp_);
    }
    if(1 - (t[1] === buf ? 1 : 0)) t[1] = buf;
    t[2] = lo_min;
    t[3] = lo;
    t[4] = hi;
    t[5] = hi_max;
    return 0;
   }
   function reinitialize_of_bigstring(t, pos, len, buf){
    var
     str_len = caml_call1(Core_Bigstring[21], buf),
     _c5_ = caml_call2(Core[92], pos, 0),
     _c6_ = _c5_ || caml_call2(Core[91], pos, str_len);
    if(_c6_){
     var
      _c7_ = [0, [1, [0, _aj_, [0, caml_call1(Core[389], str_len), 0]]], 0],
      _c8_ = [0, [1, [0, _ak_, [0, caml_call1(Core[389], pos), 0]]], _c7_],
      _c9_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Expert_reinitialize_of_big),
          _c8_]];
     caml_call1(Core[261], _c9_);
    }
    var
     max_len = str_len - pos | 0,
     _c__ = caml_call2(Core[92], len, 0),
     _c$_ = _c__ || caml_call2(Core[91], len, max_len);
    if(_c$_){
     var
      _da_ = [0, [1, [0, _al_, [0, caml_call1(Core[389], max_len), 0]]], 0],
      _db_ = [0, [1, [0, _am_, [0, caml_call1(Core[389], len), 0]]], _da_],
      _dc_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Expert_reinitialize_of_big$0),
          _db_]];
     caml_call1(Core[261], _dc_);
    }
    var hi = pos + len | 0;
    return unsafe_reinitialize(t, pos, pos, hi, hi, buf);
   }
   function protect_window(t, f){
    var lo = t[3], hi = t[4];
    try{var result = caml_call1(f, t); t[3] = lo; t[4] = hi; return result;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_global_deprecat(t, f){
    var lo = t[3], hi = t[4];
    try{var result = caml_call1(f, t); t[3] = lo; t[4] = hi; return result;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_1(t, x, f){
    var lo = t[3], hi = t[4];
    try{var result = caml_call2(f, t, x); t[3] = lo; t[4] = hi; return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_2(t, x, y, f){
    var lo = t[3], hi = t[4];
    try{
     var result = caml_call3(f, t, x, y);
     t[3] = lo;
     t[4] = hi;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_1_global_deprec(t, x, f){
    var lo = t[3], hi = t[4];
    try{var result = caml_call2(f, t, x); t[3] = lo; t[4] = hi; return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_2_global_deprec(t, x, y, f){
    var lo = t[3], hi = t[4];
    try{
     var result = caml_call3(f, t, x, y);
     t[3] = lo;
     t[4] = hi;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function protect_window_local(t, f){
    var lo = t[3], hi = t[4];
    try{var result = caml_call1(f, t); t[3] = lo; t[4] = hi; return result;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[3] = lo;
     t[4] = hi;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    unsafe_blit$5 = To_bytes[1],
    blito$3 = To_bytes[3],
    sub$3 = To_bytes[4],
    subo$3 = To_bytes[5],
    unsafe_blit$6 = To_bigstring[1],
    blito$4 = To_bigstring[3],
    sub$4 = To_bigstring[4],
    subo$4 = To_bigstring[5];
   function uadv$0(t, n, x){unsafe_advance(t, n); return x;}
   function uadv_local$0(t, n, x){unsafe_advance(t, n); return x;}
   function upos(t, len){return unsafe_buf_pos(t, 0, len);}
   function tail_padded_fixed_string$5(padding, len, t){
    var _c4_ = upos(t, len);
    return uadv$0
            (t,
             len,
             caml_call5(Core_Bigstring[127], padding, t[1], _c4_, len, 0));
   }
   function head_padded_fixed_string$5(padding, len, t){
    var _c3_ = upos(t, len);
    return uadv$0
            (t,
             len,
             caml_call5(Core_Bigstring[130], padding, t[1], _c3_, len, 0));
   }
   function tail_padded_fixed_string$6(padding, len, t){
    var _c2_ = upos(t, len);
    return uadv_local$0
            (t,
             len,
             caml_call5(Core_Bigstring[128], padding, t[1], _c2_, len, 0));
   }
   function head_padded_fixed_string$6(padding, len, t){
    var _c1_ = upos(t, len);
    return uadv_local$0
            (t,
             len,
             caml_call5(Core_Bigstring[131], padding, t[1], _c1_, len, 0));
   }
   var len$5 = 8;
   function int64_t_be$5(t){
    var _c0_ = upos(t, len$5);
    return uadv_local$0
            (t, len$5, caml_call2(Core_Bigstring[117][4], t[1], _c0_));
   }
   function int64_t_le$5(t){
    var _cZ_ = upos(t, len$5);
    return uadv_local$0
            (t, len$5, caml_call2(Core_Bigstring[117][3], t[1], _cZ_));
   }
   var _an_ = 1;
   function char$4(t){
    var _cY_ = upos(t, _an_);
    return uadv$0(t, _an_, caml_ba_get_1(t[1], _cY_));
   }
   function uint8$5(t){
    var _cX_ = upos(t, _an_);
    return uadv$0(t, _an_, caml_call2(Core_Bigstring[45], t[1], _cX_));
   }
   function int8$5(t){
    var _cW_ = upos(t, _an_);
    return uadv$0(t, _an_, caml_call2(Core_Bigstring[43], t[1], _cW_));
   }
   var _ao_ = 2;
   function int16_be$5(t){
    var _cV_ = upos(t, _ao_);
    return uadv$0(t, _ao_, caml_call2(Core_Bigstring[52], t[1], _cV_));
   }
   function int16_le$5(t){
    var _cU_ = upos(t, _ao_);
    return uadv$0(t, _ao_, caml_call2(Core_Bigstring[51], t[1], _cU_));
   }
   function uint16_be$5(t){
    var _cT_ = upos(t, _ao_);
    return uadv$0(t, _ao_, caml_call2(Core_Bigstring[60], t[1], _cT_));
   }
   function uint16_le$5(t){
    var _cS_ = upos(t, _ao_);
    return uadv$0(t, _ao_, caml_call2(Core_Bigstring[59], t[1], _cS_));
   }
   var _ap_ = 4;
   function int32_be$5(t){
    var _cR_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[68], t[1], _cR_));
   }
   function int32_t_be$3(t){
    var _cQ_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[104], t[1], _cQ_));
   }
   function int32_le$5(t){
    var _cP_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[67], t[1], _cP_));
   }
   function int32_t_le$3(t){
    var _cO_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[103], t[1], _cO_));
   }
   function uint32_be$5(t){
    var _cN_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[76], t[1], _cN_));
   }
   function uint32_le$5(t){
    var _cM_ = upos(t, _ap_);
    return uadv$0(t, _ap_, caml_call2(Core_Bigstring[75], t[1], _cM_));
   }
   var len$6 = 8;
   function int64_be_exn$1(t){
    var _cL_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[86], t[1], _cL_));
   }
   function int64_le_exn$1(t){
    var _cK_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[85], t[1], _cK_));
   }
   function uint64_be_exn$1(t){
    var _cJ_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[95], t[1], _cJ_));
   }
   function uint64_le_exn$1(t){
    var _cI_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[96], t[1], _cI_));
   }
   function int64_t_be$6(t){
    var _cH_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[112], t[1], _cH_));
   }
   function int64_t_le$6(t){
    var _cG_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[111], t[1], _cG_));
   }
   function int64_be_trunc$1(t){
    var _cF_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[88], t[1], _cF_));
   }
   function int64_le_trunc$1(t){
    var _cE_ = upos(t, len$6);
    return uadv$0(t, len$6, caml_call2(Core_Bigstring[87], t[1], _cE_));
   }
   function uint8$6(t){
    var _cD_ = uint8$5(t);
    return caml_call1(Int_repr[2][28], _cD_);
   }
   function uint16_be$6(t){
    var _cC_ = uint16_be$5(t);
    return caml_call1(Int_repr[4][28], _cC_);
   }
   function uint16_le$6(t){
    var _cB_ = uint16_le$5(t);
    return caml_call1(Int_repr[4][28], _cB_);
   }
   function uint32_be$6(t){
    var _cA_ = int32_t_be$3(t);
    return caml_call1(Int_repr[6][27], _cA_);
   }
   function uint32_le$6(t){
    var _cz_ = int32_t_le$3(t);
    return caml_call1(Int_repr[6][27], _cz_);
   }
   function uint64_be$3(t){
    var _cy_ = int64_t_be$6(t);
    return caml_call1(Int_repr[10][28], _cy_);
   }
   function uint64_le$3(t){
    var _cx_ = int64_t_le$6(t);
    return caml_call1(Int_repr[10][28], _cx_);
   }
   function int8$6(t){
    var _cw_ = int8$5(t);
    return caml_call1(Int_repr[1][28], _cw_);
   }
   function int16_be$6(t){
    var _cv_ = int16_be$5(t);
    return caml_call1(Int_repr[3][28], _cv_);
   }
   function int16_le$6(t){
    var _cu_ = int16_le$5(t);
    return caml_call1(Int_repr[3][28], _cu_);
   }
   function int32_be$6(t){
    var _ct_ = int32_t_be$3(t);
    return caml_call1(Int_repr[5][27], _ct_);
   }
   function int32_le$6(t){
    var _cs_ = int32_t_le$3(t);
    return caml_call1(Int_repr[5][27], _cs_);
   }
   function int64_be$5(t){return int64_t_be$6(t);}
   function int64_le$5(t){return int64_t_le$6(t);}
   function upos$0(t, len){return unsafe_buf_pos(t, 0, len);}
   function uadv$1(t, n){return unsafe_advance(t, n);}
   function tail_padded_fixed_string$7(padding, len, t, src){
    var _cr_ = upos$0(t, len);
    caml_call5(Core_Bigstring[129], padding, t[1], _cr_, len, src);
    return uadv$1(t, len);
   }
   function head_padded_fixed_string$7(padding, len, t, src){
    var _cq_ = upos$0(t, len);
    caml_call5(Core_Bigstring[132], padding, t[1], _cq_, len, src);
    return uadv$1(t, len);
   }
   function bytes$5(str_pos, len, t, src){
    var _cp_ = upos$0(t, len);
    caml_call5(Core_Bigstring[31][1], src, str_pos, t[1], _cp_, len);
    return uadv$1(t, len);
   }
   function string$5(str_pos, len, t, src){
    var _co_ = upos$0(t, len);
    caml_call5(Core_Bigstring[29][1], src, str_pos, t[1], _co_, len);
    return uadv$1(t, len);
   }
   function bigstring$3(str_pos, len, t, src){
    var _cn_ = upos$0(t, len);
    caml_call5(Core_Bigstring[22], src, str_pos, t[1], _cn_, len);
    return uadv$1(t, len);
   }
   function byteso$5(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_bytes_length(src) - str_pos | 0;
    return bytes$5(str_pos, len$1, t, src);
   }
   function stringo$5(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(src) - str_pos | 0;
    return string$5(str_pos, len$1, t, src);
   }
   function bigstringo$3(opt, len, t, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Core_Bigstring[21], src) - str_pos | 0;
    return bigstring$3(str_pos, len$1, t, src);
   }
   var _aq_ = 1;
   function char$5(t, c){
    var _cm_ = upos$0(t, _aq_);
    caml_ba_set_1(t[1], _cm_, c);
    return uadv$1(t, _aq_);
   }
   var _ar_ = 2;
   function int16_be_trunc$1(t, i){
    var _cl_ = upos$0(t, _ar_);
    caml_call3(Core_Bigstring[54], t[1], _cl_, i);
    return uadv$1(t, _ar_);
   }
   function int16_le_trunc$1(t, i){
    var _ck_ = upos$0(t, _ar_);
    caml_call3(Core_Bigstring[53], t[1], _ck_, i);
    return uadv$1(t, _ar_);
   }
   function uint16_be_trunc$1(t, i){
    var _cj_ = upos$0(t, _ar_);
    caml_call3(Core_Bigstring[62], t[1], _cj_, i);
    return uadv$1(t, _ar_);
   }
   function uint16_le_trunc$1(t, i){
    var _ci_ = upos$0(t, _ar_);
    caml_call3(Core_Bigstring[61], t[1], _ci_, i);
    return uadv$1(t, _ar_);
   }
   var _as_ = 4;
   function int32_be_trunc$1(t, i){
    var _ch_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[70], t[1], _ch_, i);
    return uadv$1(t, _as_);
   }
   function int32_t_be$4(t, i){
    var _cg_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[106], t[1], _cg_, i);
    return uadv$1(t, _as_);
   }
   function int32_le_trunc$1(t, i){
    var _cf_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[69], t[1], _cf_, i);
    return uadv$1(t, _as_);
   }
   function int32_t_le$4(t, i){
    var _ce_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[105], t[1], _ce_, i);
    return uadv$1(t, _as_);
   }
   function uint32_be_trunc$1(t, i){
    var _cd_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[78], t[1], _cd_, i);
    return uadv$1(t, _as_);
   }
   function uint32_le_trunc$1(t, i){
    var _cc_ = upos$0(t, _as_);
    caml_call3(Core_Bigstring[77], t[1], _cc_, i);
    return uadv$1(t, _as_);
   }
   var len$7 = 8;
   function int64_be$6(t, i){
    var _cb_ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[90], t[1], _cb_, i);
    return uadv$1(t, len$7);
   }
   function int64_le$6(t, i){
    var _ca_ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[89], t[1], _ca_, i);
    return uadv$1(t, len$7);
   }
   function uint64_be_trunc$1(t, i){
    var _b$_ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[98], t[1], _b$_, i);
    return uadv$1(t, len$7);
   }
   function uint64_le_trunc$1(t, i){
    var _b__ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[97], t[1], _b__, i);
    return uadv$1(t, len$7);
   }
   function int64_t_be$7(t, i){
    var _b9_ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[114], t[1], _b9_, i);
    return uadv$1(t, len$7);
   }
   function int64_t_le$7(t, i){
    var _b8_ = upos$0(t, len$7);
    caml_call3(Core_Bigstring[113], t[1], _b8_, i);
    return uadv$1(t, len$7);
   }
   function uint8_trunc$1(t, i){
    return char$5(t, caml_call1(Core_Char[14], i));
   }
   function int8_trunc$1(t, i){
    return char$5(t, caml_call1(Core_Char[14], i));
   }
   function decimal$0(t, i){return uadv$1(t, unsafe_poke_decimal(t, 0, i));}
   function padded_decimal$0(len, t, i){
    return uadv$1(t, unsafe_poke_padded_decimal(t, 0, len, i));
   }
   function date_string_iso8601_extended$1(t, date){
    unsafe_poke_iso8601_extended(t, 0, date);
    return uadv$1(t, len_iso8601_extended);
   }
   function uint8$7(t, i){
    var _b7_ = caml_call1(Int_repr[2][30], i);
    return char$5(t, caml_call1(Core_Char[14], _b7_));
   }
   function uint16_be$7(t, i){
    return uint16_be_trunc$1(t, caml_call1(Int_repr[4][30], i));
   }
   function uint16_le$7(t, i){
    return uint16_le_trunc$1(t, caml_call1(Int_repr[4][30], i));
   }
   function uint32_be$7(t, i){
    return int32_t_be$4(t, caml_call1(Int_repr[6][29], i));
   }
   function uint32_le$7(t, i){
    return int32_t_le$4(t, caml_call1(Int_repr[6][29], i));
   }
   function uint64_be$4(t, i){
    return int64_t_be$7(t, caml_call1(Int_repr[10][30], i));
   }
   function uint64_le$4(t, i){
    return int64_t_le$7(t, caml_call1(Int_repr[10][30], i));
   }
   function int8$7(t, i){
    var _b6_ = caml_call1(Int_repr[1][30], i);
    return char$5(t, caml_call1(Core_Char[14], _b6_));
   }
   function int16_be$7(t, i){
    return int16_be_trunc$1(t, caml_call1(Int_repr[3][30], i));
   }
   function int16_le$7(t, i){
    return int16_le_trunc$1(t, caml_call1(Int_repr[3][30], i));
   }
   function int32_be$7(t, i){
    return int32_t_be$4(t, caml_call1(Int_repr[5][28], i));
   }
   function int32_le$7(t, i){
    return int32_t_le$4(t, caml_call1(Int_repr[5][28], i));
   }
   function int64_be$7(t, i){return int64_t_be$7(t, i);}
   function int64_le$7(t, i){return int64_t_le$7(t, i);}
   var
    blito$5 = To_bytes$0[2],
    unsafe_blit$7 = To_bytes$0[3],
    sub$5 = To_bytes$0[4],
    subo$5 = To_bytes$0[5],
    blito$6 = To_bigstring$0[2],
    unsafe_blit$8 = To_bigstring$0[3],
    sub$6 = To_bigstring$0[4],
    subo$6 = To_bigstring$0[5];
   function tail_padded_fixed_string$8(padding, len, t, pos){
    var _b5_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[127], padding, t[1], _b5_, len, 0);
   }
   function head_padded_fixed_string$8(padding, len, t, pos){
    var _b4_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[130], padding, t[1], _b4_, len, 0);
   }
   function bytes$6(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bytes[44], len + str_pos | 0),
     _b3_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[30][3], t[1], _b3_, dst, str_pos, len);
    return dst;
   }
   function string$6(str_pos, len, t, pos){
    return caml_string_of_bytes(bytes$6(str_pos, len, t, pos));
   }
   function bigstring$4(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bigstring[121], len + str_pos | 0),
     _b2_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[24], t[1], _b2_, dst, str_pos, len);
    return dst;
   }
   function byteso$6(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bytes$6(str_pos, len$1, t, pos);
   }
   function stringo$6(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return string$6(str_pos, len$1, t, pos);
   }
   function bigstringo$4(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bigstring$4(str_pos, len$1, t, pos);
   }
   function index_or_neg(t, pos, len, c){
    var
     pos$0 = unsafe_buf_pos(t, pos, len),
     idx = runtime.bigstring_find(t[1], c, pos$0, len);
    return caml_call2(Core[92], idx, 0) ? -1 : idx - t[3] | 0;
   }
   function tail_padded_fixed_string$9(padding, len, t, pos){
    var _b1_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[128], padding, t[1], _b1_, len, 0);
   }
   function head_padded_fixed_string$9(padding, len, t, pos){
    var _b0_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[131], padding, t[1], _b0_, len, 0);
   }
   function bytes$7(str_pos, len, t, pos){
    var
     dst = caml_call1(Core_Bytes[45], len + str_pos | 0),
     _bZ_ = unsafe_buf_pos(t, pos, len);
    caml_call5(Core_Bigstring[30][3], t[1], _bZ_, dst, str_pos, len);
    return dst;
   }
   function string$7(str_pos, len, t, pos){
    return caml_string_of_bytes(bytes$7(str_pos, len, t, pos));
   }
   function byteso$7(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return bytes$7(str_pos, len$1, t, pos);
   }
   function stringo$7(opt, len, t, pos){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = length(t) - pos | 0;
    return string$7(str_pos, len$1, t, pos);
   }
   var len$8 = 8;
   function int64_t_be$8(t, pos){
    var _bY_ = unsafe_buf_pos(t, pos, len$8);
    return caml_call2(Core_Bigstring[117][4], t[1], _bY_);
   }
   function int64_t_le$8(t, pos){
    var _bX_ = unsafe_buf_pos(t, pos, len$8);
    return caml_call2(Core_Bigstring[117][3], t[1], _bX_);
   }
   var _at_ = 1;
   function char$6(t, pos){
    var _bW_ = unsafe_buf_pos(t, pos, _at_);
    return caml_ba_get_1(t[1], _bW_);
   }
   function uint8$8(t, pos){
    var _bV_ = unsafe_buf_pos(t, pos, _at_);
    return caml_call2(Core_Bigstring[45], t[1], _bV_);
   }
   function int8$8(t, pos){
    var _bU_ = unsafe_buf_pos(t, pos, _at_);
    return caml_call2(Core_Bigstring[43], t[1], _bU_);
   }
   var _au_ = 2;
   function int16_be$8(t, pos){
    var _bT_ = unsafe_buf_pos(t, pos, _au_);
    return caml_call2(Core_Bigstring[52], t[1], _bT_);
   }
   function int16_le$8(t, pos){
    var _bS_ = unsafe_buf_pos(t, pos, _au_);
    return caml_call2(Core_Bigstring[51], t[1], _bS_);
   }
   function uint16_be$8(t, pos){
    var _bR_ = unsafe_buf_pos(t, pos, _au_);
    return caml_call2(Core_Bigstring[60], t[1], _bR_);
   }
   function uint16_le$8(t, pos){
    var _bQ_ = unsafe_buf_pos(t, pos, _au_);
    return caml_call2(Core_Bigstring[59], t[1], _bQ_);
   }
   var _av_ = 4;
   function int32_be$8(t, pos){
    var _bP_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[68], t[1], _bP_);
   }
   function int32_t_be$5(t, pos){
    var _bO_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[104], t[1], _bO_);
   }
   function int32_le$8(t, pos){
    var _bN_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[67], t[1], _bN_);
   }
   function int32_t_le$5(t, pos){
    var _bM_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[103], t[1], _bM_);
   }
   function uint32_be$8(t, pos){
    var _bL_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[76], t[1], _bL_);
   }
   function uint32_le$8(t, pos){
    var _bK_ = unsafe_buf_pos(t, pos, _av_);
    return caml_call2(Core_Bigstring[75], t[1], _bK_);
   }
   var len$9 = 8;
   function int64_be_exn$2(t, pos){
    var _bJ_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[86], t[1], _bJ_);
   }
   function int64_le_exn$2(t, pos){
    var _bI_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[85], t[1], _bI_);
   }
   function uint64_be_exn$2(t, pos){
    var _bH_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[95], t[1], _bH_);
   }
   function uint64_le_exn$2(t, pos){
    var _bG_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[96], t[1], _bG_);
   }
   function int64_t_be$9(t, pos){
    var _bF_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[112], t[1], _bF_);
   }
   function int64_t_le$9(t, pos){
    var _bE_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[111], t[1], _bE_);
   }
   function int64_be_trunc$2(t, pos){
    var _bD_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[88], t[1], _bD_);
   }
   function int64_le_trunc$2(t, pos){
    var _bC_ = unsafe_buf_pos(t, pos, len$9);
    return caml_call2(Core_Bigstring[87], t[1], _bC_);
   }
   function uint8$9(t, pos){
    var _bB_ = uint8$8(t, pos);
    return caml_call1(Int_repr[2][28], _bB_);
   }
   function uint16_be$9(t, pos){
    var _bA_ = uint16_be$8(t, pos);
    return caml_call1(Int_repr[4][28], _bA_);
   }
   function uint16_le$9(t, pos){
    var _bz_ = uint16_le$8(t, pos);
    return caml_call1(Int_repr[4][28], _bz_);
   }
   function uint32_be$9(t, pos){
    var _by_ = int32_t_be$5(t, pos);
    return caml_call1(Int_repr[6][27], _by_);
   }
   function uint32_le$9(t, pos){
    var _bx_ = int32_t_le$5(t, pos);
    return caml_call1(Int_repr[6][27], _bx_);
   }
   function uint64_be$5(t, pos){
    var _bw_ = int64_t_be$9(t, pos);
    return caml_call1(Int_repr[10][28], _bw_);
   }
   function uint64_le$5(t, pos){
    var _bv_ = int64_t_le$9(t, pos);
    return caml_call1(Int_repr[10][28], _bv_);
   }
   function int8$9(t, pos){
    var _bu_ = int8$8(t, pos);
    return caml_call1(Int_repr[1][28], _bu_);
   }
   function int16_be$9(t, pos){
    var _bt_ = int16_be$8(t, pos);
    return caml_call1(Int_repr[3][28], _bt_);
   }
   function int16_le$9(t, pos){
    var _bs_ = int16_le$8(t, pos);
    return caml_call1(Int_repr[3][28], _bs_);
   }
   function int32_be$9(t, pos){
    var _br_ = int32_t_be$5(t, pos);
    return caml_call1(Int_repr[5][27], _br_);
   }
   function int32_le$9(t, pos){
    var _bq_ = int32_t_le$5(t, pos);
    return caml_call1(Int_repr[5][27], _bq_);
   }
   function int64_be$8(t, pos){return int64_t_be$9(t, pos);}
   function int64_le$8(t, pos){return int64_t_le$9(t, pos);}
   function tail_padded_fixed_string$10(padding, len, t, pos, src){
    var _bp_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[129], padding, t[1], _bp_, len, src);
   }
   function head_padded_fixed_string$10(padding, len, t, pos, src){
    var _bo_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(Core_Bigstring[132], padding, t[1], _bo_, len, src);
   }
   function bytes$8(str_pos, len, t, pos, src){
    var blit = Core_Bigstring[31][1], _bn_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(blit, src, str_pos, t[1], _bn_, len);
   }
   function string$8(str_pos, len, t, pos, src){
    var blit = Core_Bigstring[29][1], _bm_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(blit, src, str_pos, t[1], _bm_, len);
   }
   function bigstring$5(str_pos, len, t, pos, src){
    var blit = Core_Bigstring[22], _bl_ = unsafe_buf_pos(t, pos, len);
    return caml_call5(blit, src, str_pos, t[1], _bl_, len);
   }
   function byteso$8(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_bytes_length(src) - str_pos | 0;
    return bytes$8(str_pos, len$1, t, pos, src);
   }
   function stringo$8(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(src) - str_pos | 0;
    return string$8(str_pos, len$1, t, pos, src);
   }
   function bigstringo$5(opt, len, t, pos, src){
    if(opt) var sth = opt[1], str_pos = sth; else var str_pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Core_Bigstring[21], src) - str_pos | 0;
    return bigstring$5(str_pos, len$1, t, pos, src);
   }
   function bin_prot_with_known_size(writer, t, pos, size, a){
    var _bk_ = unsafe_buf_pos(t, pos, size);
    caml_call3(writer[2], t[1], _bk_, a);
    return 0;
   }
   var _aw_ = 1;
   function char$7(t, pos, c){
    var _bj_ = unsafe_buf_pos(t, pos, _aw_);
    return caml_ba_set_1(t[1], _bj_, c);
   }
   function uint8_trunc$2(t, pos, i){
    var _bi_ = unsafe_buf_pos(t, pos, _aw_);
    return caml_call3(Core_Bigstring[46], t[1], _bi_, i);
   }
   function int8_trunc$2(t, pos, i){
    var _bh_ = unsafe_buf_pos(t, pos, _aw_);
    return caml_call3(Core_Bigstring[44], t[1], _bh_, i);
   }
   var _ax_ = 2;
   function int16_be_trunc$2(t, pos, i){
    var _bg_ = unsafe_buf_pos(t, pos, _ax_);
    return caml_call3(Core_Bigstring[54], t[1], _bg_, i);
   }
   function int16_le_trunc$2(t, pos, i){
    var _bf_ = unsafe_buf_pos(t, pos, _ax_);
    return caml_call3(Core_Bigstring[53], t[1], _bf_, i);
   }
   function uint16_be_trunc$2(t, pos, i){
    var _be_ = unsafe_buf_pos(t, pos, _ax_);
    return caml_call3(Core_Bigstring[62], t[1], _be_, i);
   }
   function uint16_le_trunc$2(t, pos, i){
    var _bd_ = unsafe_buf_pos(t, pos, _ax_);
    return caml_call3(Core_Bigstring[61], t[1], _bd_, i);
   }
   var _ay_ = 4;
   function int32_be_trunc$2(t, pos, i){
    var _bc_ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[70], t[1], _bc_, i);
   }
   function int32_t_be$6(t, pos, i){
    var _bb_ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[106], t[1], _bb_, i);
   }
   function int32_le_trunc$2(t, pos, i){
    var _ba_ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[69], t[1], _ba_, i);
   }
   function int32_t_le$6(t, pos, i){
    var _a$_ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[105], t[1], _a$_, i);
   }
   function uint32_be_trunc$2(t, pos, i){
    var _a__ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[78], t[1], _a__, i);
   }
   function uint32_le_trunc$2(t, pos, i){
    var _a9_ = unsafe_buf_pos(t, pos, _ay_);
    return caml_call3(Core_Bigstring[77], t[1], _a9_, i);
   }
   var len$10 = 8;
   function int64_be$9(t, pos, i){
    var _a8_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[90], t[1], _a8_, i);
   }
   function int64_le$9(t, pos, i){
    var _a7_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[89], t[1], _a7_, i);
   }
   function uint64_be_trunc$2(t, pos, i){
    var _a6_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[98], t[1], _a6_, i);
   }
   function uint64_le_trunc$2(t, pos, i){
    var _a5_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[97], t[1], _a5_, i);
   }
   function int64_t_be$10(t, pos, i){
    var _a4_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[114], t[1], _a4_, i);
   }
   function int64_t_le$10(t, pos, i){
    var _a3_ = unsafe_buf_pos(t, pos, len$10);
    return caml_call3(Core_Bigstring[113], t[1], _a3_, i);
   }
   function uint8$10(t, pos, i){
    return uint8_trunc$2(t, pos, caml_call1(Int_repr[2][30], i));
   }
   function uint16_be$10(t, pos, i){
    return int16_be_trunc$2(t, pos, caml_call1(Int_repr[4][30], i));
   }
   function uint16_le$10(t, pos, i){
    return int16_le_trunc$2(t, pos, caml_call1(Int_repr[4][30], i));
   }
   function uint32_be$10(t, pos, i){
    return int32_t_be$6(t, pos, caml_call1(Int_repr[6][29], i));
   }
   function uint32_le$10(t, pos, i){
    return int32_t_le$6(t, pos, caml_call1(Int_repr[6][29], i));
   }
   function uint64_be$6(t, pos, i){
    return int64_t_be$10(t, pos, caml_call1(Int_repr[10][30], i));
   }
   function uint64_le$6(t, pos, i){
    return int64_t_le$10(t, pos, caml_call1(Int_repr[10][30], i));
   }
   function int8$10(t, pos, i){
    return int8_trunc$2(t, pos, caml_call1(Int_repr[1][30], i));
   }
   function int16_be$10(t, pos, i){
    return int16_be_trunc$2(t, pos, caml_call1(Int_repr[3][30], i));
   }
   function int16_le$10(t, pos, i){
    return int16_le_trunc$2(t, pos, caml_call1(Int_repr[3][30], i));
   }
   function int32_be$10(t, pos, i){
    return int32_t_be$6(t, pos, caml_call1(Int_repr[5][28], i));
   }
   function int32_le$10(t, pos, i){
    return int32_t_le$6(t, pos, caml_call1(Int_repr[5][28], i));
   }
   function int64_be$10(t, pos, i){return int64_t_be$10(t, pos, i);}
   function int64_le$10(t, pos, i){return int64_t_le$10(t, pos, i);}
   function length$1(t){return length(t);}
   function get$1(t, pos){return char$2(t, pos);}
   var Window_indexable = [0, length$1, get$1];
   function length$2(t){return t[5] - t[2] | 0;}
   function get$2(t, pos){return caml_ba_get_1(t[1], t[2] + pos | 0);}
   var Limits_indexable = [0, length$2, get$2];
   function length$3(t){return caml_call1(Core_Bigstring[21], t[1]);}
   function get$3(t, pos){return caml_ba_get_1(t[1], pos);}
   var
    Buffer_indexable = [0, length$3, get$3],
    Window = caml_call1(Core_Hexdump[4], Window_indexable),
    Limits = caml_call1(Core_Hexdump[4], Limits_indexable),
    Buffer = caml_call1(Core_Hexdump[4], Buffer_indexable);
   function Make_compound_hexdump(Compound){
    function relative_sequence(max_lines, t, Relative){
     var lo = caml_call1(Relative[2], t), hi = caml_call1(Relative[3], t);
     return caml_call4
             (Compound[1][3], max_lines, [0, lo], [0, hi - lo | 0], t);
    }
    function to_sequence(max_lines, t){
     function _aV_(Relative){
      var _aY_ = 0;
      function _aZ_(line){return caml_call2(Core[18], cst, line);}
      var
       _a0_ = relative_sequence(max_lines, t, Relative),
       _a1_ = [0, caml_call2(Core_Sequence[44], _a0_, _aZ_), _aY_],
       _a2_ = caml_call1(Core_String[51], Relative[1]);
      return [0, caml_call1(Core_Sequence[106], _a2_), _a1_];
     }
     var
      _aW_ = caml_call2(Core_List[14], Compound[2], _aV_),
      _aX_ = caml_call1(Core_Sequence[111], _aW_);
     return caml_call1(Core_Sequence[72], _aX_);
    }
    function to_string_hum(max_lines, t){
     var
      t$0 = globalize(0, 0, t),
      _aT_ = to_sequence(max_lines, t$0),
      _aU_ = caml_call1(Core_Sequence[30], _aT_);
     return caml_call2(Core_String[46], _az_, _aU_);
    }
    function sexp_of_t(param, _aO_, t){
     function _aP_(Relative){
      var
       _aR_ = relative_sequence(0, t, Relative),
       _aS_ = caml_call1(Core_Sequence[30], _aR_);
      return [0, Relative[1], _aS_];
     }
     var x_083 = caml_call2(Core_List[51], Compound[2], _aP_);
     function _aQ_(param){
      var
       arg1_080 = param[2],
       arg0_079 = param[1],
       res0_081 = caml_call1(Core[558], arg0_079),
       res1_082 = caml_call2(Core[472], Core[558], arg1_080);
      return [1, [0, res0_081, [0, res1_082, 0]]];
     }
     return caml_call2(Core[472], _aQ_, x_083);
    }
    var
     Hexdump = [0, relative_sequence, to_sequence, to_string_hum, sexp_of_t];
    return [0, Hexdump];
   }
   function lo$0(t){return t[3] - t[2] | 0;}
   function hi$0(t){return t[4] - t[2] | 0;}
   var Window_within_limits = [0, name, lo$0, hi$0];
   function lo$1(param){return 0;}
   function hi$1(t){return t[5] - t[2] | 0;}
   var Limits_within_limits = [0, name$0, lo$1, hi$1];
   function lo$2(t){return t[3];}
   function hi$2(t){return t[4];}
   var Window_within_buffer = [0, name$1, lo$2, hi$2];
   function lo$3(t){return t[2];}
   function hi$3(t){return t[5];}
   var Limits_within_buffer = [0, name$2, lo$3, hi$3];
   function lo$4(param){return 0;}
   function hi$4(t){return caml_call1(Core_Bigstring[21], t[1]);}
   var
    Buffer_within_buffer = [0, name$3, lo$4, hi$4],
    Hexdump = Limits[1],
    parts = [0, Window_within_limits, [0, Limits_within_limits, 0]],
    Window_and_limits = Make_compound_hexdump([0, Hexdump, parts]),
    Hexdump$0 = Buffer[1],
    parts$0 =
      [0,
       Window_within_buffer,
       [0, Limits_within_buffer, [0, Buffer_within_buffer, 0]]],
    Window_and_limits_and_buffer =
      Make_compound_hexdump([0, Hexdump$0, parts$0]),
    Hexdump$1 = Window_and_limits[1],
    to_string_hum = Hexdump$1[3];
   function memcmp(a, b){
    var
     len = length(a),
     _aN_ = length(b),
     c = caml_call2(Core_Int[88], len, _aN_);
    return caml_call2(Core[93], c, 0)
            ? c
            : caml_call5(Core_Bigstring[34], a[1], a[3], b[1], b[3], len);
   }
   function memset(t, pos, len, c){
    var _aM_ = unsafe_buf_pos(t, pos, len);
    return caml_call4(Core_Bigstring[32], t[1], _aM_, len, c);
   }
   function zero(t){return memset(t, 0, length(t), 0);}
   function concat(bufs){
    var
     total_length = [0, 0],
     n = bufs.length - 1,
     _aG_ = n - 1 | 0,
     _aF_ = 0;
    if(_aG_ >= 0){
     var i$0 = _aF_;
     for(;;){
      var _aK_ = length(bufs[1 + i$0]);
      total_length[1] = total_length[1] + _aK_ | 0;
      var _aL_ = i$0 + 1 | 0;
      if(_aG_ === i$0) break;
      var i$0 = _aL_;
     }
    }
    var t = create(total_length[1]), pos = [0, 0], _aI_ = n - 1 | 0, _aH_ = 0;
    if(_aI_ >= 0){
     var i = _aH_;
     for(;;){
      var src = bufs[1 + i], len = length(src);
      caml_call5(blit, src, 0, t, pos[1], len);
      pos[1] = pos[1] + len | 0;
      var _aJ_ = i + 1 | 0;
      if(_aI_ === i) break;
      var i = _aJ_;
     }
    }
    return t;
   }
   function contains(t, substring){
    var
     _aC_ = caml_call1(Core_Bigstring[21], substring),
     _aD_ = length(t),
     _aE_ =
       runtime.bigstring_memmem_bytecode(t[1], substring, t[3], _aD_, 0, _aC_);
    return caml_call2(Core[88], _aE_, 0);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_iobuf);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Iobuf);
   var
    _aA_ = Window_and_limits_and_buffer[1],
    Iobuf =
      [0,
       sexp_of_seek,
       sexp_of_no_seek,
       globalize,
       sexp_of_t_with_shallow_sexp,
       invariant,
       Window,
       Limits,
       [0, Hexdump$1[4], Hexdump$1[3], Hexdump$1[2]],
       [0, [0, _aA_[4], _aA_[3], _aA_[2]]],
       create,
       empty,
       of_bigstring,
       of_bigstring_local,
       unsafe_bigstring_view$0,
       unsafe_bigstring_view$0,
       of_string,
       sub_shared,
       sub_shared_local,
       copy,
       clone,
       transfer,
       set_bounds_and_buffer,
       set_bounds_and_buffer_sub,
       read_only,
       read_only_local,
       no_seek,
       no_seek_local,
       capacity,
       length,
       length_lo,
       length_hi,
       is_empty,
       narrow,
       narrow_lo,
       narrow_hi,
       memcmp,
       [0, compare, sexp_of_t$1, window, limit, restore],
       [0, compare$0, sexp_of_t$2, window$0, limit$0, restore$0],
       unsafe_advance,
       unsafe_advance,
       unsafe_resize,
       unsafe_resize,
       rewind,
       reset,
       flip_lo,
       bounded_flip_lo,
       compact,
       bounded_compact,
       flip_hi,
       bounded_flip_hi,
       protect_window_bounds_and_buff,
       protect_window_bounds_and_buff$0,
       protect_window_bounds_and_buff$1,
       protect_window_bounds_and_buff$2,
       protect_window_bounds_and_buff$3,
       to_string,
       to_string_hum,
       to_bytes,
       of_bytes,
       [0, num_digits],
       [0, len_iso8601_extended],
       [0,
        [0, To_bytes[3], To_bytes[2], To_bytes[1], To_bytes[5], To_bytes[4]],
        [0,
         To_bigstring[3],
         To_bigstring[2],
         To_bigstring[1],
         To_bigstring[5],
         To_bigstring[4]],
        [0, subo$0, sub$0],
        char$0,
        bin_prot,
        int8,
        int16_be,
        int16_le,
        int32_be,
        int32_le,
        int64_be_exn,
        int64_le_exn,
        int64_be_trunc,
        int64_le_trunc,
        uint8,
        uint16_be,
        uint16_le,
        uint32_be,
        uint32_le,
        uint64_be_exn,
        uint64_le_exn,
        int64_t_be$0,
        int64_t_le$0,
        head_padded_fixed_string,
        tail_padded_fixed_string,
        string,
        bytes,
        bigstring,
        stringo,
        byteso,
        bigstringo,
        [0,
         int64_t_be,
         int64_t_le,
         head_padded_fixed_string$0,
         tail_padded_fixed_string$0,
         string$0,
         bytes$0,
         stringo$0,
         byteso$0],
        [0,
         int8$0,
         int16_be$0,
         int16_le$0,
         int32_be$0,
         int32_le$0,
         int64_be,
         int64_le,
         uint8$0,
         uint16_be$0,
         uint16_le$0,
         uint32_be$0,
         uint32_le$0,
         uint64_be,
         uint64_le]],
       [0,
        char$1,
        bin_prot$0,
        int8_trunc,
        int16_be_trunc,
        int16_le_trunc,
        int32_be_trunc,
        int32_le_trunc,
        int64_be$0,
        int64_le$0,
        uint8_trunc,
        uint16_be_trunc,
        uint16_le_trunc,
        uint32_be_trunc,
        uint32_le_trunc,
        uint64_be_trunc,
        uint64_le_trunc,
        int64_t_be$1,
        int64_t_le$1,
        head_padded_fixed_string$1,
        tail_padded_fixed_string$1,
        string$1,
        bytes$1,
        bigstring$0,
        stringo$1,
        byteso$1,
        bigstringo$0,
        [0,
         int8$1,
         int16_be$1,
         int16_le$1,
         int32_be$1,
         int32_le$1,
         int64_be$1,
         int64_le$1,
         uint8$1,
         uint16_be$1,
         uint16_le$1,
         uint32_be$1,
         uint32_le$1,
         uint64_be$0,
         uint64_le$0],
        decimal,
        padded_decimal,
        date_string_iso8601_extended$0],
       [0,
        To_bytes$0,
        To_bigstring$0,
        String_dst,
        char$2,
        bin_prot$1,
        int8$2,
        int16_be$2,
        int16_le$2,
        int32_be$2,
        int32_le$2,
        int64_be_exn$0,
        int64_le_exn$0,
        int64_be_trunc$0,
        int64_le_trunc$0,
        uint8$2,
        uint16_be$2,
        uint16_le$2,
        uint32_be$2,
        uint32_le$2,
        uint64_be_exn$0,
        uint64_le_exn$0,
        int64_t_be$3,
        int64_t_le$3,
        head_padded_fixed_string$2,
        tail_padded_fixed_string$2,
        string$2,
        bytes$2,
        bigstring$1,
        stringo$2,
        byteso$2,
        bigstringo$1,
        [0,
         int64_t_be$2,
         int64_t_le$2,
         head_padded_fixed_string$3,
         tail_padded_fixed_string$3,
         string$3,
         bytes$3,
         stringo$3,
         byteso$3],
        [0,
         int8$3,
         int16_be$3,
         int16_le$3,
         int32_be$3,
         int32_le$3,
         int64_be$2,
         int64_le$2,
         uint8$3,
         uint16_be$3,
         uint16_le$3,
         uint32_be$3,
         uint32_le$3,
         uint64_be$1,
         uint64_le$1],
        index],
       [0,
        poke_decimal,
        poke_padded_decimal,
        write_bin_prot,
        char$3,
        bin_prot$2,
        int8_trunc$0,
        int16_be_trunc$0,
        int16_le_trunc$0,
        int32_be_trunc$0,
        int32_le_trunc$0,
        int64_be$3,
        int64_le$3,
        uint8_trunc$0,
        uint16_be_trunc$0,
        uint16_le_trunc$0,
        uint32_be_trunc$0,
        uint32_le_trunc$0,
        uint64_be_trunc$0,
        uint64_le_trunc$0,
        int64_t_be$4,
        int64_t_le$4,
        head_padded_fixed_string$4,
        tail_padded_fixed_string$4,
        string$4,
        bytes$4,
        bigstring$2,
        stringo$4,
        byteso$4,
        bigstringo$2,
        [0,
         int8$4,
         int16_be$4,
         int16_le$4,
         int32_be$4,
         int32_le$4,
         int64_be$4,
         int64_le$4,
         uint8$4,
         uint16_be$4,
         uint16_le$4,
         uint32_be$4,
         uint32_le$4,
         uint64_be$2,
         uint64_le$2],
        date_string_iso8601_extended],
       [0,
        [0,
         [0, blito$3, unsafe_blit$5, unsafe_blit$5, subo$3, sub$3],
         [0, blito$4, unsafe_blit$6, unsafe_blit$6, subo$4, sub$4],
         [0, subo$0, sub$0],
         char$4,
         bin_prot,
         int8$5,
         int16_be$5,
         int16_le$5,
         int32_be$5,
         int32_le$5,
         int64_be_exn$1,
         int64_le_exn$1,
         int64_be_trunc$1,
         int64_le_trunc$1,
         uint8$5,
         uint16_be$5,
         uint16_le$5,
         uint32_be$5,
         uint32_le$5,
         uint64_be_exn$1,
         uint64_le_exn$1,
         int64_t_be$6,
         int64_t_le$6,
         head_padded_fixed_string$5,
         tail_padded_fixed_string$5,
         string,
         bytes,
         bigstring,
         stringo,
         byteso,
         bigstringo,
         [0,
          int64_t_be$5,
          int64_t_le$5,
          head_padded_fixed_string$6,
          tail_padded_fixed_string$6,
          string$0,
          bytes$0,
          stringo$0,
          byteso$0],
         [0,
          int8$6,
          int16_be$6,
          int16_le$6,
          int32_be$6,
          int32_le$6,
          int64_be$5,
          int64_le$5,
          uint8$6,
          uint16_be$6,
          uint16_le$6,
          uint32_be$6,
          uint32_le$6,
          uint64_be$3,
          uint64_le$3]],
        [0,
         char$5,
         bin_prot$0,
         int8_trunc$1,
         int16_be_trunc$1,
         int16_le_trunc$1,
         int32_be_trunc$1,
         int32_le_trunc$1,
         int64_be$6,
         int64_le$6,
         uint8_trunc$1,
         uint16_be_trunc$1,
         uint16_le_trunc$1,
         uint32_be_trunc$1,
         uint32_le_trunc$1,
         uint64_be_trunc$1,
         uint64_le_trunc$1,
         int64_t_be$7,
         int64_t_le$7,
         head_padded_fixed_string$7,
         tail_padded_fixed_string$7,
         string$5,
         bytes$5,
         bigstring$3,
         stringo$5,
         byteso$5,
         bigstringo$3,
         [0,
          int8$7,
          int16_be$7,
          int16_le$7,
          int32_be$7,
          int32_le$7,
          int64_be$7,
          int64_le$7,
          uint8$7,
          uint16_be$7,
          uint16_le$7,
          uint32_be$7,
          uint32_le$7,
          uint64_be$4,
          uint64_le$4],
         decimal$0,
         padded_decimal$0,
         date_string_iso8601_extended$1],
        [0,
         [0, unsafe_blit$7, blito$5, unsafe_blit$7, sub$5, subo$5],
         [0, unsafe_blit$8, blito$6, unsafe_blit$8, sub$6, subo$6],
         String_dst,
         char$6,
         bin_prot$1,
         int8$8,
         int16_be$8,
         int16_le$8,
         int32_be$8,
         int32_le$8,
         int64_be_exn$2,
         int64_le_exn$2,
         int64_be_trunc$2,
         int64_le_trunc$2,
         uint8$8,
         uint16_be$8,
         uint16_le$8,
         uint32_be$8,
         uint32_le$8,
         uint64_be_exn$2,
         uint64_le_exn$2,
         int64_t_be$9,
         int64_t_le$9,
         head_padded_fixed_string$8,
         tail_padded_fixed_string$8,
         string$6,
         bytes$6,
         bigstring$4,
         stringo$6,
         byteso$6,
         bigstringo$4,
         [0,
          int64_t_be$8,
          int64_t_le$8,
          head_padded_fixed_string$9,
          tail_padded_fixed_string$9,
          string$7,
          bytes$7,
          stringo$7,
          byteso$7],
         [0,
          int8$9,
          int16_be$9,
          int16_le$9,
          int32_be$9,
          int32_le$9,
          int64_be$8,
          int64_le$8,
          uint8$9,
          uint16_be$9,
          uint16_le$9,
          uint32_be$9,
          uint32_le$9,
          uint64_be$5,
          uint64_le$5],
         index_or_neg],
        [0,
         unsafe_poke_decimal,
         unsafe_poke_padded_decimal,
         write_bin_prot,
         char$7,
         bin_prot$2,
         int8_trunc$2,
         int16_be_trunc$2,
         int16_le_trunc$2,
         int32_be_trunc$2,
         int32_le_trunc$2,
         int64_be$9,
         int64_le$9,
         uint8_trunc$2,
         uint16_be_trunc$2,
         uint16_le_trunc$2,
         uint32_be_trunc$2,
         uint32_le_trunc$2,
         uint64_be_trunc$2,
         uint64_le_trunc$2,
         int64_t_be$10,
         int64_t_le$10,
         head_padded_fixed_string$10,
         tail_padded_fixed_string$10,
         string$8,
         bytes$8,
         bigstring$5,
         stringo$8,
         byteso$8,
         bigstringo$5,
         [0,
          int8$10,
          int16_be$10,
          int16_le$10,
          int32_be$10,
          int32_le$10,
          int64_be$10,
          int64_le$10,
          uint8$10,
          uint16_be$10,
          uint16_le$10,
          uint32_be$10,
          uint32_le$10,
          uint64_be$6,
          uint64_le$6],
         unsafe_poke_iso8601_extended,
         bin_prot_with_known_size]],
       bin_prot_length_prefix_bytes,
       fill_bin_prot,
       fill_bin_prot_local,
       consume_bin_prot,
       [0, blit, blito, unsafe_blit$1, sub$1, subo$1, blit_maximal],
       [0, blit$0, blito$0, unsafe_blit$2, sub$2, subo$2, blit_maximal$0],
       [0, blit$1, blito$1, unsafe_blit$3, blit_maximal$1],
       [0, blit$2, blito$2, unsafe_blit$4, blit_maximal$2],
       memset,
       zero,
       concat,
       [0,
        buf,
        hi_max,
        hi,
        lo,
        lo_min,
        set_buf,
        set_hi_max,
        set_hi,
        set_lo,
        set_lo_min,
        to_bigstring_shared,
        reinitialize_of_bigstring,
        unsafe_reinitialize,
        set_bounds_and_buffer,
        set_bounds_and_buffer_sub,
        protect_window,
        protect_window_global_deprecat,
        protect_window_1,
        protect_window_1_global_deprec,
        protect_window_2,
        protect_window_2_global_deprec,
        protect_window_local,
        unsafe_buf_pos,
        unsafe_buf_pos],
       contains];
   runtime.caml_register_global(117, Iobuf, cst_Iobuf$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
