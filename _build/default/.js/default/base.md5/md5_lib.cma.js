// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Md5_lib
//# unitInfo: Requires: Stdlib__Digest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Digest = global_data.Stdlib__Digest,
    Assert_failure = global_data.Assert_failure,
    empty = caml_call1(Stdlib_Digest[3], cst),
    _a_ = [0, "md5/src/md5_lib.ml", 12, 2];
   function make(s){return runtime.caml_string_equal(s, empty) ? empty : s;}
   var compare = runtime.caml_compare, length = 16;
   function to_binary(s){return s;}
   function to_binary_local(s){return s;}
   function of_binary_exn(s){
    if(runtime.caml_ml_string_length(s) === 16) return make(s);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var to_hex = Stdlib_Digest[10];
   function of_hex_exn(s){return make(caml_call1(Stdlib_Digest[11], s));}
   function string(s){return make(caml_call1(Stdlib_Digest[3], s));}
   function bytes(s){return make(caml_call1(Stdlib_Digest[4], s));}
   function subbytes(bytes, pos, len){
    return make(caml_call3(Stdlib_Digest[6], bytes, pos, len));
   }
   var
    Md5_lib =
      [0,
       compare,
       length,
       to_binary,
       to_binary_local,
       of_binary_exn,
       make,
       to_hex,
       of_hex_exn,
       string,
       bytes,
       subbytes];
   runtime.caml_register_global(4, Md5_lib, "Md5_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtZDVfbGliLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJlbXB0eSIsIm1ha2UiLCJzIiwiY29tcGFyZSIsImxlbmd0aCIsInRvX2JpbmFyeSIsInRvX2JpbmFyeV9sb2NhbCIsIm9mX2JpbmFyeV9leG4iLCJ0b19oZXgiLCJvZl9oZXhfZXhuIiwic3RyaW5nIiwiYnl0ZXMiLCJzdWJieXRlcyIsInBvcyIsImxlbiJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2Jhc2UvbWQ1L21kNV9saWIubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0dBR1k7Ozs7O0lBQVJBLFFBQVE7O1lBQ1JDLEtBQUtDLEdBQUksT0FBRywwQkFBUEEsR0FETEYsU0FBQUEsUUFDS0UsRUFBa0M7R0FDN0IsSUFBVkMsZ0NBQ0FDO1lBQ0FDLFVBQVVILEdBQUksT0FBSkEsRUFBSztZQUNmSSxnQkFBZ0JKLEdBQUksT0FBSkEsRUFBSztZQUVyQkssY0FBY0w7SUFDaEIsaUNBRGdCQSxXQUVoQixPQVJFRCxLQU1jQztJQUNoQixNQUFBO0dBQ007T0FJSk07WUFDQUMsV0FBV1AsR0FBSSxPQWJmRCxLQWFvQiw4QkFBVEMsSUFBNEI7WUFDdkNRLE9BQU9SLEdBQUksT0FkWEQsS0FjZ0IsNkJBQVRDLElBQTBCO1lBQ2pDUyxNQUFNVCxHQUFJLE9BZlZELEtBZWUsNkJBQVRDLElBQXlCO1lBQy9CVSxTQUFTRCxPQUFPRSxLQUFLQztJQUFNLE9BaEIzQmIsS0FnQmdDLDZCQUF2QlUsT0FBT0UsS0FBS0M7R0FBMEM7Ozs7T0FmL0RYO09BQ0FDO09BQ0FDO09BQ0FDO09BRUFDO09BTkFOO09BWUFPO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDOzs7RSIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgdCA9IHN0cmluZ1xuXG4oKiBTaGFyZSB0aGUgZGlnZXN0IG9mIHRoZSBlbXB0eSBzdHJpbmcgKilcbmxldCBlbXB0eSA9IERpZ2VzdC5zdHJpbmcgXCJcIlxubGV0IG1ha2UgcyA9IGlmIHMgPSBlbXB0eSB0aGVuIGVtcHR5IGVsc2Ugc1xubGV0IGNvbXBhcmUgPSBjb21wYXJlXG5sZXQgbGVuZ3RoID0gMTZcbmxldCB0b19iaW5hcnkgcyA9IHNcbmxldCB0b19iaW5hcnlfbG9jYWwgcyA9IHNcblxubGV0IG9mX2JpbmFyeV9leG4gcyA9XG4gIGFzc2VydCAoU3RyaW5nLmxlbmd0aCBzID0gbGVuZ3RoKTtcbiAgbWFrZSBzXG47O1xuXG5sZXQgdW5zYWZlX29mX2JpbmFyeSA9IG1ha2VcbmxldCB0b19oZXggPSBEaWdlc3QudG9faGV4XG5sZXQgb2ZfaGV4X2V4biBzID0gbWFrZSAoRGlnZXN0LmZyb21faGV4IHMpXG5sZXQgc3RyaW5nIHMgPSBtYWtlIChEaWdlc3Quc3RyaW5nIHMpXG5sZXQgYnl0ZXMgcyA9IG1ha2UgKERpZ2VzdC5ieXRlcyBzKVxubGV0IHN1YmJ5dGVzIGJ5dGVzIH5wb3MgfmxlbiA9IG1ha2UgKERpZ2VzdC5zdWJieXRlcyBieXRlcyBwb3MgbGVuKVxuIl19
