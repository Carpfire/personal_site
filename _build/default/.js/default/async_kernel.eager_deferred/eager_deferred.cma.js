// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Eager_deferred__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Eager_deferred = [0],
    Eager_deferred$0 = [0, Eager_deferred];
   runtime.caml_register_global(0, Eager_deferred$0, "Eager_deferred__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Eager_deferred_Import = [0];
   runtime.caml_register_global
    (0, Eager_deferred_Import, "Eager_deferred__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred0
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Base__Monad, Core__List, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer$0 = "Eager_deferred__Eager_deferred0",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_List = global_data.Core__List,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred0.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred$0, "eager_deferred0.ml");
   var
    sexp_of_t = Async_kernel_Deferred[1],
    return$0 = Async_kernel_Deferred[12],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred_Eager_defer = cst_Eager_deferred_Eager_defer$0;
   function bind(t, f){
    return caml_call1(Async_kernel_Deferred[7], t)
            ? caml_call1(f, caml_call1(Async_kernel_Deferred[6], t))
            : caml_call2(Async_kernel_Deferred[11], t, f);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return caml_call1(Async_kernel_Deferred[7], t)
                ? caml_call1
                  (return$0,
                   caml_call1(f, caml_call1(Async_kernel_Deferred[6], t)))
                : caml_call2(Async_kernel_Deferred[13], t, f);
       }],
    T = [0, sexp_of_t, return$0, bind, map],
    sexp_of_t$0 = T[1],
    include = caml_call1(Base_Monad[1], [0, T[3], T[2], T[4]]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    all = include[9],
    Let_syntax = include[11],
    create = Async_kernel_Deferred[3],
    don_t_wait_for = Async_kernel_Deferred[25],
    invariant = Async_kernel_Deferred[2],
    is_determined = Async_kernel_Deferred[7],
    never = Async_kernel_Deferred[19],
    peek = Async_kernel_Deferred[5],
    unit = Async_kernel_Deferred[18],
    value_exn = Async_kernel_Deferred[6];
   function upon(t, f){
    return caml_call1(is_determined, t)
            ? caml_call1(f, caml_call1(value_exn, t))
            : caml_call2(Async_kernel_Deferred[4], t, f);
   }
   function both(t1, t2){
    return caml_call1
            (create,
             function(result){
              return upon
                      (t1,
                       function(a1){
                        return upon
                                (t2,
                                 function(a2){
                                  return caml_call2
                                          (Async_kernel_Ivar[14], result, [0, a1, a2]);
                                 });
                       });
             });
   }
   function ok(t){
    return caml_call1(is_determined, t)
            ? caml_call1(return$1, [0, caml_call1(value_exn, t)])
            : caml_call1(Async_kernel_Deferred[33], t);
   }
   function ignore_m(t){
    return caml_call1(is_determined, t)
            ? unit
            : caml_call1(Async_kernel_Deferred[15], t);
   }
   function any(ts){
    var match = caml_call2(Core_List[27], ts, is_determined);
    if(! match) return caml_call1(Async_kernel_Deferred[23], ts);
    var x = match[1];
    return caml_call1(return$1, caml_call1(value_exn, x));
   }
   function any_unit(ts){
    return caml_call2(Core_List[23], ts, is_determined)
            ? unit
            : caml_call1(Async_kernel_Deferred[24], ts);
   }
   var
    symbol_bind$0 = Monad_infix[1],
    symbol_map$0 = Monad_infix[2],
    Infix = [0, symbol_bind$0, symbol_map$0, upon];
   function repeat_until_finished(state, f){
    return caml_call1
            (create,
             function(finished){
              function loop(state){
               function _a_(param){
                if(990972795 <= param[1]){
                 var state = param[2];
                 return loop(state);
                }
                var result = param[2];
                return caml_call2(Async_kernel_Ivar[14], finished, result);
               }
               var _b_ = caml_call1(f, state);
               return caml_call2(Infix[3], _b_, _a_);
              }
              return loop(state);
             });
   }
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred0 =
      [0,
       T,
       sexp_of_t$0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       all,
       Let_syntax,
       create,
       don_t_wait_for,
       invariant,
       is_determined,
       never,
       peek,
       unit,
       value_exn,
       upon,
       both,
       ok,
       ignore_m,
       any,
       any_unit,
       Infix,
       repeat_until_finished,
       248527477];
   runtime.caml_register_global
    (15, Eager_deferred_Eager_deferred0, cst_Eager_deferred_Eager_defer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_result
//# unitInfo: Requires: Base__Monad, Core__Printf, Core__Result, Eager_deferred__Eager_deferred0, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer$0 = "Eager_deferred__Eager_deferred_result",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Result = global_data.Core__Result,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Core_Printf = global_data.Core__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred_result.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred$0, "eager_deferred_result.ml");
   var
    T = [0],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred_Eager_defer = cst_Eager_deferred_Eager_defer$0;
   function combine(t1, t2, ok, err){
    function _d_(param){
     var t2 = param[2], t1 = param[1];
     return caml_call4(Core_Result[48], t1, t2, ok, err);
    }
    var _e_ = caml_call2(Eager_deferred_Eager_deferred0[11][4][4], t1, t2);
    return caml_call2(Eager_deferred_Eager_deferred0[11][4][3], _e_, _d_);
   }
   function return$0(a){
    return caml_call1(Eager_deferred_Eager_deferred0[7], [0, a]);
   }
   function bind(t, f){
    function _c_(error){
     if(0 !== error[0])
      return caml_call1(Eager_deferred_Eager_deferred0[7], error);
     var a = error[1];
     return caml_call1(f, a);
    }
    return caml_call2(Eager_deferred_Eager_deferred0[6], t, _c_);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        function _b_(r){return caml_call2(Core_Result[46], r, f);}
        return caml_call2(Eager_deferred_Eager_deferred0[8], t, _b_);
       }],
    include = caml_call1(Base_Monad[2], [0, bind, map, return$0]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Let_syntax = include[3],
    Monad_infix = include[4],
    bind$0 = include[5],
    return$1 = include[6],
    map$0 = include[7],
    join = include[8],
    ignore_m = include[9],
    all = include[10],
    all_unit = include[11];
   function fail(x){
    return caml_call1(Eager_deferred_Eager_deferred0[7], [1, x]);
   }
   function failf(format){return caml_call2(Core_Printf[4], fail, format);}
   function map_error(t, f){
    function _a_(r){return caml_call2(Core_Result[47], r, f);}
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred_ =
      [0,
       T,
       combine,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       fail,
       failf,
       map_error];
   runtime.caml_register_global
    (15, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_queue
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_queue, Async_kernel__Ivar, Core, Core__Option, Core__Queue, Eager_deferred__Eager_deferred0, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer$0 = "Eager_deferred__Eager_deferred_queue",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Core = global_data.Core,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Deferred_queue = global_data.Async_kernel__Deferred_queue,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred_queue.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred$0, "eager_deferred_queue.ml");
   var
    _m_ = [0, 0],
    _l_ = [0, 1],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred_Eager_defer = cst_Eager_deferred_Eager_defer$0;
   function with_how(how, seq, general, q, f){
    a:
    {
     if(typeof how === "number"){
      if(-676829465 > how) break a;
     }
     else if(1 === how[2]) break a;
     return caml_call3(general, how, q, f);
    }
    return caml_call2(seq, q, f);
   }
   function _a_(n, f){
    var result = caml_call2(Core_Queue[66], [0, n], 0);
    function _Z_(result_ivar){
     var iref = [0, 0];
     function loop(param){
      var i = iref[1];
      if(caml_call2(Core[90], i, n))
       return caml_call2(Async_kernel_Ivar[14], result_ivar, result);
      iref[1] = i + 1 | 0;
      var ___ = caml_call1(f, i);
      return caml_call2(Eager_deferred_Eager_deferred0[26][3], ___, step);
     }
     function step(x){caml_call2(Core_Queue[43], result, x); return loop(0);}
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _Z_);
   }
   function init(how, n, f){
    return with_how(how, _a_, Async_kernel_Deferred_queue[13], n, f);
   }
   function foldi(q, init, f){
    var
     iter = caml_call1(Core_Queue[79][1], q),
     len = caml_call1(Core_Queue[16], q),
     iref = [0, 0];
    function _X_(result_ivar){
     function loop(acc){
      var i = iref[1];
      caml_call2(Core_Queue[79][2], iter, q);
      if(caml_call2(Core[90], i, len))
       return caml_call2(Async_kernel_Ivar[14], result_ivar, acc);
      var x = caml_call2(Core_Queue[75], q, i);
      iref[1] = i + 1 | 0;
      var _Y_ = caml_call3(f, i, acc, x);
      return caml_call2(Eager_deferred_Eager_deferred0[26][3], _Y_, loop);
     }
     return loop(init);
    }
    return caml_call1(Async_kernel_Deferred[3], _X_);
   }
   function fold(q, init, f){
    return foldi
            (q, init, function(param, acc, x){return caml_call2(f, acc, x);});
   }
   function _b_(q, f){
    return foldi(q, 0, function(param, _W_, a){return caml_call1(f, a);});
   }
   function iter(how, q, f){
    return with_how(how, _b_, Async_kernel_Deferred_queue[14], q, f);
   }
   function _c_(q, f){
    return foldi(q, 0, function(i, param, a){return caml_call2(f, i, a);});
   }
   function iteri(how, q, f){
    return with_how(how, _c_, Async_kernel_Deferred_queue[15], q, f);
   }
   function _d_(q, f){
    var
     _R_ = [0, caml_call1(Core_Queue[16], q)],
     res = caml_call2(Core_Queue[66], _R_, 0);
    function enqueue(fx){return caml_call2(Core_Queue[43], res, fx);}
    function _S_(param){return res;}
    var
     _T_ =
       foldi
        (q,
         0,
         function(param, _U_, x){
          var _V_ = caml_call1(f, x);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[26][2], _V_, enqueue);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[26][2], _T_, _S_);
   }
   function map(how, q, f){
    return with_how(how, _d_, Async_kernel_Deferred_queue[16], q, f);
   }
   function _e_(q, f){
    var
     _N_ = [0, caml_call1(Core_Queue[16], q)],
     res = caml_call2(Core_Queue[66], _N_, 0);
    function enqueue(fx){return caml_call2(Core_Queue[43], res, fx);}
    function _O_(param){return res;}
    var
     _P_ =
       foldi
        (q,
         0,
         function(i, param, x){
          var _Q_ = caml_call2(f, i, x);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[26][2], _Q_, enqueue);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[26][2], _P_, _O_);
   }
   function mapi(how, q, f){
    return with_how(how, _e_, Async_kernel_Deferred_queue[17], q, f);
   }
   function _f_(q, f){
    var res = caml_call2(Core_Queue[66], 0, 0);
    function enqueue_all(fx){
     function _M_(y){return caml_call2(Core_Queue[43], res, y);}
     return caml_call2(Core_Queue[18], fx, _M_);
    }
    function _I_(param){return res;}
    var
     _J_ =
       foldi
        (q,
         0,
         function(param, _K_, x){
          var _L_ = caml_call1(f, x);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[26][2], _L_, enqueue_all);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[26][2], _J_, _I_);
   }
   function concat_map(how, q, f){
    return with_how(how, _f_, Async_kernel_Deferred_queue[22], q, f);
   }
   function _g_(q, f){
    var res = caml_call2(Core_Queue[66], 0, 0);
    function enqueue_all(fx){
     function _H_(y){return caml_call2(Core_Queue[43], res, y);}
     return caml_call2(Core_Queue[18], fx, _H_);
    }
    function _E_(param){return res;}
    var
     _F_ =
       foldi
        (q,
         0,
         function(i, param, x){
          var _G_ = caml_call2(f, i, x);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[26][2], _G_, enqueue_all);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[26][2], _F_, _E_);
   }
   function concat_mapi(how, q, f){
    return with_how(how, _g_, Async_kernel_Deferred_queue[23], q, f);
   }
   function filter_mapi_generic(q, f, of_result){
    var
     iter = caml_call1(Core_Queue[79][1], q),
     len = caml_call1(Core_Queue[16], q),
     result = caml_call2(Core_Queue[66], 0, 0),
     iref = [0, 0];
    function _D_(result_ivar){
     function loop(param){
      var i = iref[1];
      caml_call2(Core_Queue[79][2], iter, q);
      if(caml_call2(Core[90], i, len))
       return caml_call2(Async_kernel_Ivar[14], result_ivar, result);
      var x = caml_call2(Core_Queue[75], q, i), fx = caml_call2(f, i, x);
      return caml_call2(Eager_deferred_Eager_deferred0[26][3], fx, step);
     }
     function step(r){
      var i = iref[1];
      iref[1] = i + 1 | 0;
      caml_call2(Core_Queue[79][2], iter, q);
      var match = caml_call2(of_result, caml_call2(Core_Queue[75], q, i), r);
      if(! match) return loop(0);
      var x = match[1];
      caml_call2(Core_Queue[43], result, x);
      return loop(0);
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _D_);
   }
   function _h_(q, f){
    function _C_(x, keep){return keep ? [0, x] : 0;}
    return filter_mapi_generic
            (q, function(param, x){return caml_call1(f, x);}, _C_);
   }
   function filter(how, q, f){
    return with_how(how, _h_, Async_kernel_Deferred_queue[18], q, f);
   }
   function _i_(q, f){
    return filter_mapi_generic
            (q, f, function(x, keep){return keep ? [0, x] : 0;});
   }
   function filteri(how, q, f){
    return with_how(how, _i_, Async_kernel_Deferred_queue[19], q, f);
   }
   function _j_(q, f){
    function _B_(param, x){if(! x) return 0; var x$0 = x[1]; return [0, x$0];}
    return filter_mapi_generic
            (q, function(param, x){return caml_call1(f, x);}, _B_);
   }
   function filter_map(how, q, f){
    return with_how(how, _j_, Async_kernel_Deferred_queue[20], q, f);
   }
   function _k_(q, f){
    return filter_mapi_generic
            (q,
             f,
             function(param, x){
              if(! x) return 0;
              var x$0 = x[1];
              return [0, x$0];
             });
   }
   function filter_mapi(how, q, f){
    return with_how(how, _k_, Async_kernel_Deferred_queue[21], q, f);
   }
   function iter_result(q, f, consider, finish){
    var
     iter = caml_call1(Core_Queue[79][1], q),
     len = caml_call1(Core_Queue[16], q),
     iref = [0, 0];
    function _y_(result_ivar){
     function loop(param){
      var i = iref[1];
      caml_call2(Core_Queue[79][2], iter, q);
      if(caml_call2(Core[90], i, len)){
       var _z_ = caml_call1(finish, 0);
       return caml_call2(Async_kernel_Ivar[14], result_ivar, _z_);
      }
      var x = caml_call2(Core_Queue[75], q, i), _A_ = caml_call2(f, i, x);
      return caml_call2(Eager_deferred_Eager_deferred0[26][3], _A_, step);
     }
     function step(fx){
      var match = caml_call2(consider, iref[1], fx);
      if(match){
       var x = match[1];
       return caml_call2(Async_kernel_Ivar[14], result_ivar, x);
      }
      iref[1]++;
      return loop(0);
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _y_);
   }
   function findi(q, f){
    function _x_(param){return 0;}
    return iter_result
            (q,
             f,
             function(i, keep){
              return keep
                      ? [0, [0, [0, i, caml_call2(Core_Queue[75], q, i)]]]
                      : 0;
             },
             _x_);
   }
   function find(q, f){
    function _u_(res){
     function _w_(param){var x = param[2]; return x;}
     return caml_call2(Core_Option[34], res, _w_);
    }
    var _v_ = findi(q, function(param, x){return caml_call1(f, x);});
    return caml_call2(Eager_deferred_Eager_deferred0[26][2], _v_, _u_);
   }
   function find_mapi(q, f){
    function _t_(param){return 0;}
    return iter_result(q, f, function(param, r){return r ? [0, r] : 0;}, _t_);
   }
   function find_map(q, f){
    return find_mapi(q, function(param, x){return caml_call1(f, x);});
   }
   function existsi(q, f){
    function _s_(param){return 0;}
    return iter_result(q, f, function(param, r){return r ? _l_ : 0;}, _s_);
   }
   function exists(q, f){
    return existsi(q, function(param, x){return caml_call1(f, x);});
   }
   function for_alli(q, f){
    function _r_(param){return 1;}
    return iter_result(q, f, function(param, r){return r ? 0 : _m_;}, _r_);
   }
   function for_all(q, f){
    return for_alli(q, function(param, x){return caml_call1(f, x);});
   }
   function all(q){return map(-686623969, q, function(_q_){return _q_;});}
   function all_unit(q){
    if(caml_call1(Core_Queue[17], q))
     return caml_call1(Eager_deferred_Eager_deferred0[7], 0);
    function _n_(result_ivar){
     var to_go = [0, caml_call1(Core_Queue[16], q)];
     function decr(param){
      to_go[1] += -1;
      var _p_ = caml_call2(Core[90], to_go[1], 0);
      return _p_ ? caml_call2(Async_kernel_Ivar[14], result_ivar, 0) : _p_;
     }
     function _o_(x){
      return caml_call2(Eager_deferred_Eager_deferred0[20], x, decr);
     }
     return caml_call2(Core_Queue[18], q, _o_);
    }
    return caml_call1(Eager_deferred_Eager_deferred0[12], _n_);
   }
   var
    Queue =
      [0,
       with_how,
       init,
       foldi,
       fold,
       iter,
       iteri,
       map,
       mapi,
       concat_map,
       concat_mapi,
       filter_mapi_generic,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       iter_result,
       findi,
       find,
       find_mapi,
       find_map,
       existsi,
       exists,
       for_alli,
       for_all,
       all,
       all_unit];
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0, Queue];
   runtime.caml_register_global
    (20, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_or_error
//# unitInfo: Requires: Async_kernel__Monitor, Async_kernel__Throttle, Base__Applicative, Core, Core__Error, Core__List, Core__Or_error, Core__Result, Eager_deferred__Eager_deferred0, Eager_deferred__Eager_deferred_result, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer$0 =
      "Eager_deferred__Eager_deferred_or_error",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Core_Error = global_data.Core__Error,
    Core_Result = global_data.Core__Result,
    Eager_deferred_Eager_deferred_ =
      global_data.Eager_deferred__Eager_deferred_result,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "eager_deferred/src/eager_deferred_or_error.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_eager_deferred$0,
     "eager_deferred_or_error.ml");
   var
    ignore_m = Eager_deferred_Eager_deferred_[11],
    join = Eager_deferred_Eager_deferred_[10],
    return$0 = Eager_deferred_Eager_deferred_[8],
    bind = Eager_deferred_Eager_deferred_[7],
    Monad_infix = Eager_deferred_Eager_deferred_[6],
    symbol_bind = Eager_deferred_Eager_deferred_[3],
    _c_ = [0, 0],
    _b_ = [0, 0],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred_Eager_defer = cst_Eager_deferred_Eager_defer$0,
    _a_ = Eager_deferred_Eager_deferred_[9];
   function apply(f, x){
    function _ab_(e1, e2){
     return caml_call1(Core_Error[26], [0, e1, [0, e2, 0]]);
    }
    function _ac_(f, x){return caml_call1(f, x);}
    return caml_call4(Eager_deferred_Eager_deferred_[2], f, x, _ac_, _ab_);
   }
   var
    map = [0, -198771759, _a_],
    include = caml_call1(Base_Applicative[7], [0, return$0, apply, map]),
    return$1 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol_map = include[7],
    all = include[11],
    all_unit = include[12],
    symbol_bind$0 = Monad_infix[1],
    symbol_map$0 = Monad_infix[2],
    Open_on_rhs = [0];
   function fail(error){
    var _aa_ = caml_call1(Core_Result[35], error);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _aa_);
   }
   function ok_exn(t){
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, Core_Or_error[40]);
   }
   function of_exn(backtrace, exn){
    var _$_ = caml_call2(Core_Or_error[41], backtrace, exn);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _$_);
   }
   function of_exn_result(backtrace, t){
    var ___ = caml_call1(Core_Or_error[42], backtrace);
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, ___);
   }
   function error(msg, v, sexp_of){
    var _Z_ = caml_call5(Core_Or_error[44], 0, 0, msg, v, sexp_of);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _Z_);
   }
   function error_s(sexp){
    var _Y_ = caml_call1(Core_Or_error[45], sexp);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _Y_);
   }
   function error_string(msg){
    var _X_ = caml_call1(Core_Or_error[46], msg);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _X_);
   }
   function errorf(format){
    return caml_call2(Core[254], error_string, format);
   }
   function tag(t, tag){
    var _U_ = Core_Or_error[48];
    function _V_(_W_){return caml_call2(_U_, _W_, tag);}
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _V_);
   }
   function tag_s(t, tag){
    var _R_ = Core_Or_error[49];
    function _S_(_T_){return caml_call2(_R_, _T_, tag);}
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _S_);
   }
   function tag_s_lazy(t, tag){
    var _O_ = Core_Or_error[50];
    function _P_(_Q_){return caml_call2(_O_, _Q_, tag);}
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _P_);
   }
   function tag_arg(t, message, a, sexp_of_a){
    function _N_(t){
     return caml_call4(Core_Or_error[51], t, message, a, sexp_of_a);
    }
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _N_);
   }
   function unimplemented(msg){
    var _M_ = caml_call1(Core_Or_error[52], msg);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _M_);
   }
   function combine_errors(l){
    var
     _K_ = Core_Or_error[56],
     _L_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _L_, _K_);
   }
   function combine_errors_unit(l){
    var
     _I_ = Core_Or_error[57],
     _J_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _J_, _I_);
   }
   function filter_ok_at_least_one(l){
    var
     _G_ = Core_Or_error[58],
     _H_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _H_, _G_);
   }
   function find_map_ok(l, f){
    function _C_(param){
     var errors = param[2], l = param[1];
     if(l){
      var
       tl = l[2],
       hd = l[1],
       _D_ =
         function(param){
          if(0 === param[0]){
           var result = param[1];
           return [0, -289386606, [0, result]];
          }
          var current_error = param[1];
          return [0, 990972795, [0, tl, [0, current_error, errors]]];
         },
       _E_ = caml_call1(f, hd);
      return caml_call2(Eager_deferred_Eager_deferred0[8], _E_, _D_);
     }
     var
      _F_ = caml_call1(Core_List[59], errors),
      errors$0 = caml_call1(Core_Error[26], _F_);
     return caml_call1
             (Eager_deferred_Eager_deferred0[7],
              [0, -289386606, [1, errors$0]]);
    }
    return caml_call2(Eager_deferred_Eager_deferred0[27], [0, l, 0], _C_);
   }
   var ok_unit = caml_call1(return$1, 0);
   function try_with(extract_exn, run$0, rest, here, name, f){
    function _z_(ok){
     if(0 === ok[0]) return ok;
     var exn = ok[1];
     return [1, caml_call2(Core_Error[27], 0, exn)];
    }
    var _A_ = 0;
    if(run$0) var sth = run$0[1], run = sth; else var run = 3903734;
    var
     _B_ =
       caml_call2
        (caml_call5
          (Async_kernel_Monitor[16], here, _A_, name, extract_exn, [0, run]),
         rest,
         f);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _B_, _z_);
   }
   function try_with_join(extract_exn, run, rest, here, name, f){
    var
     _x_ = Core_Or_error[31],
     _y_ = try_with(extract_exn, run, rest, here, name, f);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _y_, _x_);
   }
   function foldi(list, acc, f){
    function loop(i, acc, param){
     if(! param) return caml_call1(return$1, acc);
     var tl = param[2], hd = param[1];
     function _w_(acc){return loop(i + 1 | 0, acc, tl);}
     return caml_call2(bind, caml_call3(f, i, acc, hd), _w_);
    }
    return loop(0, acc, list);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function iteri(how, t, f){
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _u_ = caml_call2(Async_kernel_Throttle[15], how, f),
     _v_ = caml_call1(Core[267], _u_);
    return caml_call1(all_unit, caml_call2(Core_List[41], t, _v_));
   }
   function mapi(how, t, f){
    if(typeof how === "number" && -676829465 > how){
     var _q_ = Core_List[59];
     return caml_call2
             (symbol_map$0,
              foldi
               (t,
                0,
                function(i, bs, a){
                 function _t_(b){return [0, b, bs];}
                 return caml_call2(map$0, caml_call2(f, i, a), _t_);
                }),
              _q_);
    }
    var
     _r_ = caml_call2(Async_kernel_Throttle[15], how, f),
     _s_ = caml_call1(Core[267], _r_);
    return caml_call1(all, caml_call2(Core_List[41], t, _s_));
   }
   function filter_mapi(how, t, f){
    var _p_ = Core_List[132];
    return caml_call2(symbol_map$0, mapi(how, t, f), _p_);
   }
   function concat_mapi(how, t, f){
    var _o_ = Core_List[11];
    return caml_call2(symbol_map$0, mapi(how, t, f), _o_);
   }
   function filteri(how, t, f){
    return filter_mapi
            (how,
             t,
             function(i, x){
              function _n_(b){return b ? [0, x] : 0;}
              return caml_call2(map$0, caml_call2(f, i, x), _n_);
             });
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(return$1, 0);
     var tl = t[2], hd = t[1];
     function _m_(some){
      return some ? caml_call1(return$1, some) : find_mapi(tl, f, i + 1 | 0);
     }
     return caml_call2(bind, caml_call2(f, i, hd), _m_);
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _l_(b){return b ? [0, [0, i, elt]] : 0;}
              return caml_call2(map$0, caml_call2(f, i, elt), _l_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _k_(b){return b ? [0, elt] : 0;}
              return caml_call2(map$0, caml_call1(f, elt), _k_);
             });
   }
   function existsi(t, f){
    function _i_(param){return param ? 1 : 0;}
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                function _j_(b){return b ? _b_ : 0;}
                return caml_call2(map$0, caml_call2(f, i, elt), _j_);
               }),
             _i_);
   }
   function for_alli(t, f){
    function _g_(param){return param ? 0 : 1;}
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                function _h_(b){return b ? 0 : _c_;}
                return caml_call2(map$0, caml_call2(f, i, elt), _h_);
               }),
             _g_);
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map$1(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _e_(_f_){return _f_;}
    return map$1(how, caml_call2(Core_List[40], n, _e_), f);
   }
   function repeat_until_finished(state, f){
    function _d_(param){
     if(990972795 <= param[1]){
      var state = param[2];
      return repeat_until_finished(state, f);
     }
     var state$0 = param[2];
     return caml_call1(return$1, state$0);
    }
    return caml_call2(bind, caml_call1(f, state), _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred_$0 =
      [0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       [0,
        return$1,
        symbol_bind$0,
        symbol_map$0,
        [0, return$1, bind, map$0, both, Open_on_rhs]],
       fail,
       ok_unit,
       ok_exn,
       of_exn,
       of_exn_result,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       find_map_ok,
       try_with,
       try_with_join,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       [0,
        foldi,
        fold,
        find,
        findi,
        find_map,
        find_mapi,
        exists,
        existsi,
        for_all,
        for_alli,
        all,
        all_unit,
        init,
        iter,
        iteri,
        map$1,
        mapi,
        filter,
        filteri,
        filter_map,
        filter_mapi,
        concat_map,
        concat_mapi],
       repeat_until_finished];
   runtime.caml_register_global
    (23, Eager_deferred_Eager_deferred_$0, cst_Eager_deferred_Eager_defer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_memo
//# unitInfo: Requires: Async_kernel__Deferred_memo, Eager_deferred__Eager_deferred0, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_memo",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Async_kernel_Deferred_memo = global_data.Async_kernel__Deferred_memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred_memo.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred, "eager_deferred_memo.ml");
   var
    include =
      caml_call1
       (Async_kernel_Deferred_memo[1],
        [0,
         Eager_deferred_Eager_deferred0[3],
         Eager_deferred_Eager_deferred0[4]]),
    general = include[1],
    recursive = include[2],
    unit = include[3];
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0, general, recursive, unit];
   runtime.caml_register_global
    (13, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_list
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Throttle, Core, Core__List, Eager_deferred__Eager_deferred0, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer$0 = "Eager_deferred__Eager_deferred_list",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred_list.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred$0, "eager_deferred_list.ml");
   var
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred_Eager_defer = cst_Eager_deferred_Eager_defer$0;
   function foldi(t, init, f){
    function _I_(result){
     function loop(t, i, b){
      if(! t) return caml_call2(Async_kernel_Ivar[14], result, b);
      var xs = t[2], x = t[1];
      function _J_(b){return loop(xs, i + 1 | 0, b);}
      var _K_ = caml_call3(f, i, b, x);
      return caml_call2(Eager_deferred_Eager_deferred0[26][3], _K_, _J_);
     }
     return loop(t, 0, init);
    }
    return caml_call1(Eager_deferred_Eager_deferred0[12], _I_);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function seqmapi(l, f){
    function _F_(result){
     function loop(i, l, f, acc){
      var i$0 = i, l$0 = l, acc$0 = acc;
      for(;;){
       if(! l$0){
        var _H_ = caml_call1(Core_List[59], acc$0);
        return caml_call2(Async_kernel_Ivar[14], result, _H_);
       }
       var l$1 = l$0[2], h = l$0[1], b = caml_call2(f, i$0, h);
       if(! caml_call1(Eager_deferred_Eager_deferred0[15], b)){
        var
         _G_ = function(b){return loop(i$0 + 1 | 0, l$1, f, [0, b, acc$0]);};
        return caml_call2(Async_kernel_Deferred[4], b, _G_);
       }
       var
        acc$1 = [0, caml_call1(Eager_deferred_Eager_deferred0[19], b), acc$0],
        i$1 = i$0 + 1 | 0,
        i$0 = i$1,
        l$0 = l$1,
        acc$0 = acc$1;
      }
     }
     return loop(0, l, f, 0);
    }
    return caml_call1(Eager_deferred_Eager_deferred0[12], _F_);
   }
   function all(ds){return seqmapi(ds, function(param, x){return x;});}
   function all_unit(ds){
    var _E_ = fold(ds, 0, function(param, d){return d;});
    return caml_call1(Eager_deferred_Eager_deferred0[23], _E_);
   }
   function iteri(how, t, f){
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _C_ = caml_call2(Async_kernel_Throttle[15], how, f),
     _D_ = caml_call1(Core[267], _C_);
    return all_unit(caml_call2(Core_List[41], t, _D_));
   }
   function mapi(how, t, f){
    if(typeof how === "number" && -676829465 > how) return seqmapi(t, f);
    var
     _A_ = caml_call2(Async_kernel_Throttle[15], how, f),
     _B_ = caml_call1(Core[267], _A_);
    return all(caml_call2(Core_List[41], t, _B_));
   }
   function filteri(how, t, f){
    function _w_(bools){
     function _y_(ac, x, b){return b ? [0, x, ac] : ac;}
     var _z_ = caml_call4(Core_List[67], t, bools, 0, _y_);
     return caml_call1(Core_List[59], _z_);
    }
    var _x_ = mapi(how, t, f);
    return caml_call2(Eager_deferred_Eager_deferred0[11][4][3], _x_, _w_);
   }
   function filter_mapi(how, t, f){
    var _u_ = Core_List[132], _v_ = mapi(how, t, f);
    return caml_call2(Eager_deferred_Eager_deferred0[11][3], _v_, _u_);
   }
   function concat_mapi(how, t, f){
    var _s_ = Core_List[11], _t_ = mapi(how, t, f);
    return caml_call2(Eager_deferred_Eager_deferred0[11][3], _t_, _s_);
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(Eager_deferred_Eager_deferred0[11][1], 0);
     var tl = t[2], hd = t[1];
     function _q_(some){
      return some
              ? caml_call1(Eager_deferred_Eager_deferred0[11][1], some)
              : find_mapi(tl, f, i + 1 | 0);
     }
     var _r_ = caml_call2(f, i, hd);
     return caml_call2(Eager_deferred_Eager_deferred0[11][4][2], _r_, _q_);
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _o_(b){return b ? [0, [0, i, elt]] : 0;}
              var _p_ = caml_call2(f, i, elt);
              return caml_call2
                      (Eager_deferred_Eager_deferred0[11][4][3], _p_, _o_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _m_(param){return param ? [0, elt] : 0;}
              var _n_ = caml_call1(f, elt);
              return caml_call2
                      (Eager_deferred_Eager_deferred0[11][4][3], _n_, _m_);
             });
   }
   function existsi(t, f){
    function _i_(param){return param ? 1 : 0;}
    var
     _j_ =
       find_mapi
        (t,
         function(i, elt){
          function _k_(b){return b ? _a_ : 0;}
          var _l_ = caml_call2(f, i, elt);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[11][4][3], _l_, _k_);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[11][4][3], _j_, _i_);
   }
   function for_alli(t, f){
    function _e_(param){return param ? 0 : 1;}
    var
     _f_ =
       find_mapi
        (t,
         function(i, elt){
          function _g_(b){return b ? 0 : _b_;}
          var _h_ = caml_call2(f, i, elt);
          return caml_call2
                  (Eager_deferred_Eager_deferred0[11][4][3], _h_, _g_);
         });
    return caml_call2(Eager_deferred_Eager_deferred0[11][4][3], _f_, _e_);
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _c_(_d_){return _d_;}
    return map(how, caml_call2(Core_List[40], n, _c_), f);
   }
   var
    List =
      [0,
       foldi,
       fold,
       seqmapi,
       all,
       all_unit,
       iteri,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       find_mapi,
       findi,
       find,
       existsi,
       for_alli,
       iter,
       map,
       filter,
       filter_map,
       concat_map,
       find_map,
       exists,
       for_all,
       init];
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0, List];
   runtime.caml_register_global
    (19, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_intf",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred, "eager_deferred_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0];
   runtime.caml_register_global
    (11, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred1
//# unitInfo: Requires: Eager_deferred__Eager_deferred0, Eager_deferred__Eager_deferred_list, Eager_deferred__Eager_deferred_memo, Eager_deferred__Eager_deferred_or_error, Eager_deferred__Eager_deferred_queue, Eager_deferred__Eager_deferred_result, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred1",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Eager_deferred_Eager_deferred_ =
      global_data.Eager_deferred__Eager_deferred_list,
    Eager_deferred_Eager_deferred_$0 =
      global_data.Eager_deferred__Eager_deferred_result,
    Eager_deferred_Eager_deferred_$1 =
      global_data.Eager_deferred__Eager_deferred_memo,
    Eager_deferred_Eager_deferred_$2 =
      global_data.Eager_deferred__Eager_deferred_or_error,
    Eager_deferred_Eager_deferred_$3 =
      global_data.Eager_deferred__Eager_deferred_queue;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred1.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred, "eager_deferred1.ml");
   var
    symbol_bind = Eager_deferred_Eager_deferred0[3],
    symbol_map = Eager_deferred_Eager_deferred0[4],
    Monad_infix = Eager_deferred_Eager_deferred0[5],
    bind = Eager_deferred_Eager_deferred0[6],
    return$0 = Eager_deferred_Eager_deferred0[7],
    map = Eager_deferred_Eager_deferred0[8],
    join = Eager_deferred_Eager_deferred0[9],
    all = Eager_deferred_Eager_deferred0[10],
    Let_syntax = Eager_deferred_Eager_deferred0[11],
    create = Eager_deferred_Eager_deferred0[12],
    don_t_wait_for = Eager_deferred_Eager_deferred0[13],
    invariant = Eager_deferred_Eager_deferred0[14],
    is_determined = Eager_deferred_Eager_deferred0[15],
    never = Eager_deferred_Eager_deferred0[16],
    peek = Eager_deferred_Eager_deferred0[17],
    unit = Eager_deferred_Eager_deferred0[18],
    value_exn = Eager_deferred_Eager_deferred0[19],
    upon = Eager_deferred_Eager_deferred0[20],
    both = Eager_deferred_Eager_deferred0[21],
    ok = Eager_deferred_Eager_deferred0[22],
    ignore_m = Eager_deferred_Eager_deferred0[23],
    any = Eager_deferred_Eager_deferred0[24],
    any_unit = Eager_deferred_Eager_deferred0[25],
    Infix = Eager_deferred_Eager_deferred0[26],
    repeat_until_finished = Eager_deferred_Eager_deferred0[27],
    all_unit = Eager_deferred_Eager_deferred_[1][5];
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    _a_ = Eager_deferred_Eager_deferred_$3[1],
    _b_ = Eager_deferred_Eager_deferred_[1],
    Eager_deferred_Eager_deferred1 =
      [0,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Infix,
       any,
       any_unit,
       both,
       create,
       don_t_wait_for,
       is_determined,
       never,
       ok,
       peek,
       unit,
       upon,
       value_exn,
       repeat_until_finished,
       [0,
        _b_[1],
        _b_[2],
        _b_[13],
        _b_[12],
        _b_[21],
        _b_[11],
        _b_[22],
        _b_[14],
        _b_[23],
        _b_[15],
        _b_[4],
        _b_[5],
        _b_[24],
        _b_[16],
        _b_[6],
        _b_[17],
        _b_[7],
        _b_[18],
        _b_[8],
        _b_[19],
        _b_[9],
        _b_[20],
        _b_[10]],
       [0,
        _a_[3],
        _a_[4],
        _a_[18],
        _a_[17],
        _a_[20],
        _a_[19],
        _a_[22],
        _a_[21],
        _a_[24],
        _a_[23],
        _a_[25],
        _a_[26],
        _a_[2],
        _a_[5],
        _a_[6],
        _a_[7],
        _a_[8],
        _a_[12],
        _a_[13],
        _a_[14],
        _a_[15],
        _a_[9],
        _a_[10]],
       Eager_deferred_Eager_deferred_$2,
       Eager_deferred_Eager_deferred_$1,
       [0,
        Eager_deferred_Eager_deferred_$0[3],
        Eager_deferred_Eager_deferred_$0[4],
        Eager_deferred_Eager_deferred_$0[5],
        Eager_deferred_Eager_deferred_$0[6],
        Eager_deferred_Eager_deferred_$0[7],
        Eager_deferred_Eager_deferred_$0[8],
        Eager_deferred_Eager_deferred_$0[9],
        Eager_deferred_Eager_deferred_$0[10],
        Eager_deferred_Eager_deferred_$0[11],
        Eager_deferred_Eager_deferred_$0[12],
        Eager_deferred_Eager_deferred_$0[13],
        Eager_deferred_Eager_deferred_$0[14],
        Eager_deferred_Eager_deferred_$0[15],
        Eager_deferred_Eager_deferred_$0[16],
        Eager_deferred_Eager_deferred_$0[2]]];
   runtime.caml_register_global
    (17, Eager_deferred_Eager_deferred1, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred
//# unitInfo: Requires: Async_kernel__Deferred, Eager_deferred__Eager_deferred1, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred$0 = "Eager_deferred",
    cst_eager_deferred$0 = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred1 =
      global_data.Eager_deferred__Eager_deferred1,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "eager_deferred/src/eager_deferred.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_eager_deferred$0, "eager_deferred.ml");
   var
    invariant = Eager_deferred_Eager_deferred1[1],
    symbol_bind = Eager_deferred_Eager_deferred1[2],
    symbol_map = Eager_deferred_Eager_deferred1[3],
    Monad_infix = Eager_deferred_Eager_deferred1[4],
    bind = Eager_deferred_Eager_deferred1[5],
    return$0 = Eager_deferred_Eager_deferred1[6],
    map = Eager_deferred_Eager_deferred1[7],
    join = Eager_deferred_Eager_deferred1[8],
    ignore_m = Eager_deferred_Eager_deferred1[9],
    all = Eager_deferred_Eager_deferred1[10],
    all_unit = Eager_deferred_Eager_deferred1[11],
    Let_syntax = Eager_deferred_Eager_deferred1[12],
    Infix = Eager_deferred_Eager_deferred1[13],
    any = Eager_deferred_Eager_deferred1[14],
    any_unit = Eager_deferred_Eager_deferred1[15],
    both = Eager_deferred_Eager_deferred1[16],
    create = Eager_deferred_Eager_deferred1[17],
    don_t_wait_for = Eager_deferred_Eager_deferred1[18],
    is_determined = Eager_deferred_Eager_deferred1[19],
    never = Eager_deferred_Eager_deferred1[20],
    ok = Eager_deferred_Eager_deferred1[21],
    peek = Eager_deferred_Eager_deferred1[22],
    unit = Eager_deferred_Eager_deferred1[23],
    upon = Eager_deferred_Eager_deferred1[24],
    value_exn = Eager_deferred_Eager_deferred1[25],
    repeat_until_finished = Eager_deferred_Eager_deferred1[26],
    List = Eager_deferred_Eager_deferred1[27],
    Queue = Eager_deferred_Eager_deferred1[28],
    Or_error = Eager_deferred_Eager_deferred1[29],
    Memo = Eager_deferred_Eager_deferred1[30],
    Result = Eager_deferred_Eager_deferred1[31],
    sexp_of_t = Async_kernel_Deferred[1],
    invariant$0 = Eager_deferred_Eager_deferred1[1],
    symbol_bind$0 = Eager_deferred_Eager_deferred1[2],
    symbol_map$0 = Eager_deferred_Eager_deferred1[3],
    Monad_infix$0 = Eager_deferred_Eager_deferred1[4],
    bind$0 = Eager_deferred_Eager_deferred1[5],
    return$1 = Eager_deferred_Eager_deferred1[6],
    map$0 = Eager_deferred_Eager_deferred1[7],
    join$0 = Eager_deferred_Eager_deferred1[8],
    ignore_m$0 = Eager_deferred_Eager_deferred1[9],
    all$0 = Eager_deferred_Eager_deferred1[10],
    all_unit$0 = Eager_deferred_Eager_deferred1[11],
    Let_syntax$0 = Eager_deferred_Eager_deferred1[12],
    Infix$0 = Eager_deferred_Eager_deferred1[13],
    any$0 = Eager_deferred_Eager_deferred1[14],
    any_unit$0 = Eager_deferred_Eager_deferred1[15],
    both$0 = Eager_deferred_Eager_deferred1[16],
    create$0 = Eager_deferred_Eager_deferred1[17],
    don_t_wait_for$0 = Eager_deferred_Eager_deferred1[18],
    is_determined$0 = Eager_deferred_Eager_deferred1[19],
    never$0 = Eager_deferred_Eager_deferred1[20],
    ok$0 = Eager_deferred_Eager_deferred1[21],
    peek$0 = Eager_deferred_Eager_deferred1[22],
    unit$0 = Eager_deferred_Eager_deferred1[23],
    upon$0 = Eager_deferred_Eager_deferred1[24],
    value_exn$0 = Eager_deferred_Eager_deferred1[25],
    repeat_until_finished$0 = Eager_deferred_Eager_deferred1[26],
    List$0 = Eager_deferred_Eager_deferred1[27],
    Queue$0 = Eager_deferred_Eager_deferred1[28],
    Or_error$0 = Eager_deferred_Eager_deferred1[29],
    Memo$0 = Eager_deferred_Eager_deferred1[30],
    Result$0 = Eager_deferred_Eager_deferred1[31],
    Deferred =
      [0,
       sexp_of_t,
       invariant$0,
       symbol_bind$0,
       symbol_map$0,
       Monad_infix$0,
       bind$0,
       return$1,
       map$0,
       join$0,
       ignore_m$0,
       all$0,
       all_unit$0,
       Let_syntax$0,
       Infix$0,
       any$0,
       any_unit$0,
       both$0,
       create$0,
       don_t_wait_for$0,
       is_determined$0,
       never$0,
       ok$0,
       peek$0,
       unit$0,
       upon$0,
       value_exn$0,
       repeat_until_finished$0,
       List$0,
       Queue$0,
       Or_error$0,
       Memo$0,
       Result$0],
    include = Eager_deferred_Eager_deferred1[12],
    return$2 = include[1],
    symbol_bind$1 = include[2],
    symbol_map$1 = include[3],
    Let_syntax$1 = include[4],
    upon$1 = Eager_deferred_Eager_deferred1[24],
    symbol = Eager_deferred_Eager_deferred1[13][3],
    cst_eager_deferred = cst_eager_deferred$0,
    cst_Eager_deferred = cst_Eager_deferred$0;
   function symbol$0(x, f){
    return caml_call2
            (symbol_bind$1,
             x,
             function(error){
              if(0 !== error[0]) return caml_call1(return$2, error);
              var v = error[1];
              return caml_call1(f, v);
             });
   }
   function symbol$1(x, f){
    return caml_call2
            (symbol_map$1,
             x,
             function(error){
              if(0 !== error[0]) return error;
              var v = error[1];
              return [0, caml_call1(f, v)];
             });
   }
   var
    Use =
      [0,
       Deferred,
       return$2,
       symbol_bind$1,
       symbol_map$1,
       Let_syntax$1,
       upon$1,
       symbol,
       symbol$0,
       symbol$1];
   caml_call1(Ppx_inline_test_lib[7], cst_eager_deferred);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred);
   var
    Eager_deferred =
      [0,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Infix,
       any,
       any_unit,
       both,
       create,
       don_t_wait_for,
       is_determined,
       never,
       ok,
       peek,
       unit,
       upon,
       value_exn,
       repeat_until_finished,
       List,
       Queue,
       Or_error,
       Memo,
       Result,
       Use];
   runtime.caml_register_global(13, Eager_deferred, cst_Eager_deferred$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
