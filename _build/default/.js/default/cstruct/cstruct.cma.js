// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Cstruct
//# unitInfo: Requires: Stdlib, Stdlib__Bigarray, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__List, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "  ",
    cst_dst_off = " dst-off=",
    cst_dst = " dst=",
    cst_len = " len=",
    cst_off = " off=",
    cst_src_off = " src-off=",
    cst_a = "@\n%a@.",
    cst = "@;",
    cst_BE$5 = "BE",
    cst_Cstruct_blit_src = "Cstruct.blit src=",
    cst_Cstruct_blit_from_bytes_sr = "Cstruct.blit_from_bytes src=",
    cst_Cstruct_blit_from_string_s = "Cstruct.blit_from_string src=",
    cst_Cstruct_blit_to_bytes_src = "Cstruct.blit_to_bytes src=",
    cst_HE$5 = "HE",
    cst_LE$5 = "LE",
    cst_d = "[%d]",
    cst_cut_empty_separator$1 = "cut: empty separator",
    cst_cuts_empty_separator$1 = "cuts: empty separator",
    cst_index_out_of_bounds$3 = "index out of bounds",
    cst_of_hex_odd_numbers_of_char = "of_hex: odd numbers of characters",
    cst_span_negative_max$1 = "span: negative max",
    cst_span_negative_min$1 = "span: negative min",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    _P_ = [0, 1],
    _O_ = [0, 1],
    cst_cuts_empty_separator$0 = cst_cuts_empty_separator$1,
    cst_cuts_empty_separator = cst_cuts_empty_separator$1,
    cst_cut_empty_separator$0 = cst_cut_empty_separator$1,
    cst_cut_empty_separator = cst_cut_empty_separator$1,
    _M_ = [0, 0],
    _N_ = [0, 0],
    cst_span_negative_min$0 = cst_span_negative_min$1,
    cst_span_negative_max$0 = cst_span_negative_max$1,
    _L_ = [0, 0],
    _J_ = [0, 0],
    _K_ = [0, 0],
    cst_span_negative_min = cst_span_negative_min$1,
    cst_span_negative_max = cst_span_negative_max$1,
    _I_ = [0, 0],
    _H_ = [0, 0],
    _G_ = [0, 0],
    _F_ = [0, 0],
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_Cstruct_concat = "Cstruct.concat",
    _E_ = [0, [17, 3, [15, [17, 4, 0]]], cst_a],
    _B_ = [0, [17, [0, cst, 1, 0], 0], cst],
    _A_ = [0, [12, 32, 0], " "],
    _z_ = [0, [11, cst$0, 0], cst$0],
    _C_ = [0, [15, [4, 6, 0, [0, 2], [15, 0]]], "%a%.2x%a"],
    _x_ =
      [0,
       [11,
        "of_hex: invalid character at pos ",
        [4, 0, 0, 0, [11, ": ", [1, 0]]]],
       "of_hex: invalid character at pos %d: %C"],
    _y_ =
      [0,
       [11, cst_of_hex_odd_numbers_of_char, 0],
       cst_of_hex_odd_numbers_of_char],
    cst_to_string = "to_string",
    cst_Cstruct_copyv = "Cstruct.copyv",
    cst_Cstruct_lenv = "Cstruct.lenv",
    cst_HE$4 = cst_HE$5,
    cst_HE$3 = cst_HE$5,
    cst_HE$2 = cst_HE$5,
    cst_HE$1 = cst_HE$5,
    cst_HE$0 = cst_HE$5,
    cst_HE = cst_HE$5,
    cst_LE$4 = cst_LE$5,
    cst_LE$3 = cst_LE$5,
    cst_LE$2 = cst_LE$5,
    cst_LE$1 = cst_LE$5,
    cst_LE$0 = cst_LE$5,
    cst_LE = cst_LE$5,
    cst_BE$4 = cst_BE$5,
    cst_BE$3 = cst_BE$5,
    cst_BE$2 = cst_BE$5,
    cst_BE$1 = cst_BE$5,
    cst_BE$0 = cst_BE$5,
    cst_BE = cst_BE$5,
    cst_get_uint64 = ".get_uint64",
    cst_get_uint32 = ".get_uint32",
    cst_get_uint16 = ".get_uint16",
    cst_set_uint64 = ".set_uint64",
    cst_set_uint32 = ".set_uint32",
    cst_set_uint16 = ".set_uint16",
    cst_get_char = "get_char",
    cst_get_uint8 = "get_uint8",
    cst_set_char = "set_char",
    cst_set_uint8 = "set_uint8",
    _u_ =
      [0,
       [11,
        "ERROR: t.off+t.len=",
        [4, 0, 0, 0, [12, 32, [15, [12, 10, [10, 0]]]]]],
       "ERROR: t.off+t.len=%d %a\n%!"],
    _v_ = [0, "lib/cstruct.ml", 127, 4],
    _w_ = [0, [15, 0], "%a"],
    cst_check_alignment_must_be_po =
      "check_alignment must be positive integer",
    _t_ =
      [0,
       [11,
        "Cstruct.iter ",
        [15, [11, " i=", [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]],
       "Cstruct.iter %a i=%d len=%d"],
    _s_ =
      [0,
       [11,
        "Cstruct.split ",
        [15, [11, " start=", [4, 0, 0, 0, [11, cst_off, [4, 0, 0, 0, 0]]]]]],
       "Cstruct.split %a start=%d off=%d"],
    _r_ =
      [0,
       [11,
        "invalid bounds in Cstruct.",
        [2,
         0,
         [12,
          32,
          [15, [11, cst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "invalid bounds in Cstruct.%s %a off=%d len=%d"],
    _q_ =
      [0,
       [11,
        cst_Cstruct_blit_to_bytes_src,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_dst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_to_bytes src=%a dst=%a dst-off=%d len=%d"],
    _p_ =
      [0,
       [11,
        cst_Cstruct_blit_to_bytes_src,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_src_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_to_bytes src=%a dst=%a src-off=%d len=%d"],
    _o_ =
      [0,
       [11,
        cst_Cstruct_blit_from_bytes_sr,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_dst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_from_bytes src=%a dst=%a dst-off=%d len=%d"],
    _n_ =
      [0,
       [11,
        cst_Cstruct_blit_from_bytes_sr,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_src_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_from_bytes src=%a dst=%a src-off=%d len=%d"],
    _m_ =
      [0,
       [11,
        cst_Cstruct_blit_from_string_s,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_dst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_from_string src=%a dst=%a dst-off=%d len=%d"],
    _l_ =
      [0,
       [11,
        cst_Cstruct_blit_from_string_s,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_src_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit_from_string src=%a dst=%a src-off=%d len=%d"],
    _k_ =
      [0,
       [11,
        cst_Cstruct_blit_src,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_dst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit src=%a dst=%a dst-off=%d len=%d"],
    _j_ =
      [0,
       [11,
        cst_Cstruct_blit_src,
        [15,
         [11,
          cst_dst,
          [15,
           [11, cst_src_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.blit src=%a dst=%a src-off=%d len=%d"],
    _i_ =
      [0,
       [11,
        "Cstruct.to_hex_string ",
        [15, [11, cst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]],
       "Cstruct.to_hex_string %a off=%d len=%d"],
    _h_ =
      [0,
       [11,
        "Cstruct.",
        [2,
         0,
         [12,
          32,
          [15, [11, cst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]]]],
       "Cstruct.%s %a off=%d len=%d"],
    _g_ =
      [0,
       [11, "Cstruct.shiftv short by ", [4, 0, 0, 0, 0]],
       "Cstruct.shiftv short by %d"],
    _f_ =
      [0,
       [11, "Cstruct.shift ", [15, [12, 32, [4, 0, 0, 0, 0]]]],
       "Cstruct.shift %a %d"],
    _e_ =
      [0,
       [11,
        "Cstruct.sub: ",
        [15, [11, cst_off, [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]]]],
       "Cstruct.sub: %a off=%d len=%d"],
    _d_ =
      [0,
       [11,
        "Cstruct.of_bigarray off=",
        [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, 0]]]],
       "Cstruct.of_bigarray off=%d len=%d"],
    _c_ = [0, [12, 91, [4, 0, 0, 0, [12, 93, 0]]], cst_d],
    _b_ = [0, [12, 91, [4, 0, 0, 0, [12, 93, 0]]], cst_d],
    _a_ =
      [0,
       [12,
        91,
        [4,
         0,
         0,
         0,
         [12, 44, [4, 0, 0, 0, [11, "](", [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "[%d,%d](%d)"],
    cst_copy = "copy",
    _D_ = [0, [17, 3, [15, [17, 4, 0]]], cst_a];
   function pp_t(ppf, t){
    var _bk_ = caml_ba_dim_1(t[1]);
    return caml_call5(Stdlib_Format[137], ppf, _a_, t[2], t[3], _bk_);
   }
   function string_t(ppf, str){
    return caml_call3
            (Stdlib_Format[137], ppf, _b_, caml_ml_string_length(str));
   }
   function bytes_t(ppf, str){
    return caml_call3(Stdlib_Format[137], ppf, _c_, caml_ml_bytes_length(str));
   }
   function err(fmt){
    var
     b = caml_call1(Stdlib_Buffer[1], 20),
     ppf = caml_call1(Stdlib_Format[114], b);
    function k(ppf){
     caml_call2(Stdlib_Format[38], ppf, 0);
     var _bj_ = caml_call1(Stdlib_Buffer[2], b);
     return caml_call1(Stdlib[1], _bj_);
    }
    return caml_call3(Stdlib_Format[144], k, ppf, fmt);
   }
   function err_invalid_bounds(f){return caml_call2(err(_r_), f, pp_t);}
   function of_bigarray(opt, len, buffer){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var dim = caml_ba_dim_1(buffer);
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = dim - off | 0;
    if
     (0 <= off
      && 0 <= len$1 && 0 <= (off + len$1 | 0) && dim >= (off + len$1 | 0))
     return [0, buffer, off, len$1];
    return caml_call1(caml_call1(err(_d_), off), len$1);
   }
   function to_bigarray(buffer){
    return runtime.caml_ba_sub(buffer[1], buffer[2], buffer[3]);
   }
   function create_unsafe(len){
    var
     buffer =
       caml_call3
        (Stdlib_Bigarray[19][1],
         Stdlib_Bigarray[13],
         Stdlib_Bigarray[15],
         len);
    return [0, buffer, 0, len];
   }
   function check_bounds(t, len){
    var
     _bh_ = 0 <= len ? 1 : 0,
     _bi_ = _bh_ ? len <= caml_ba_dim_1(t[1]) ? 1 : 0 : _bh_;
    return _bi_;
   }
   var empty = create_unsafe(0);
   function check_alignment(t, alignment){
    return 0 < alignment
            ? runtime.caml_check_alignment_bigstring(t[1], t[2], alignment)
            : caml_call1(Stdlib[1], cst_check_alignment_must_be_po);
   }
   function byte$0(i){return caml_call1(Stdlib_Char[1], i);}
   function byte_to_int(b){return b;}
   function debug(t){
    var max_len = caml_ba_dim_1(t[1]);
    if(max_len >= (t[2] + t[3] | 0) && 0 <= t[3] && 0 <= t[2])
     return caml_call3(Stdlib_Format[141], _w_, pp_t, t);
    caml_call4(Stdlib_Format[138], _u_, t[2] + t[3] | 0, pp_t, t);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
   }
   function sub(t, off, len){
    var
     new_start = t[2] + off | 0,
     new_end = new_start + len | 0,
     old_end = t[2] + t[3] | 0;
    if(t[2] <= new_start && new_end <= old_end && new_start <= new_end)
     return [0, t[1], new_start, len];
    return caml_call2(caml_call2(err(_e_), pp_t, t), off, len);
   }
   function shift(t, amount){
    var off = t[2] + amount | 0, len = t[3] - amount | 0;
    if(0 <= amount && t[3] >= amount && check_bounds(t, off + len | 0))
     return [0, t[1], off, len];
    return caml_call1(caml_call2(err(_f_), pp_t, t), amount);
   }
   function shiftv(ts$0, n){
    var ts$1 = ts$0, n$0 = n;
    for(;;){
     if(0 === n$0){
      var x = ts$1;
      for(;;){
       if(x){var ts = x[2], t = x[1]; if(0 === t[3]){var x = ts; continue;}}
       return x;
      }
     }
     if(! ts$1) return caml_call1(err(_g_), n$0);
     var t$0 = ts$1[1], ts$2 = ts$1[2];
     if(t$0[3] > n$0){var ts$3 = ts$1[2]; return [0, shift(t$0, n$0), ts$3];}
     var n$1 = n$0 - t$0[3] | 0, ts$1 = ts$2, n$0 = n$1;
    }
   }
   function copy_to_string(caller, src, srcoff, len){
    if(0 <= len && 0 <= srcoff && (src[3] - srcoff | 0) >= len){
     var b = caml_create_bytes(len);
     runtime.caml_blit_bigstring_to_string
      (src[1], src[2] + srcoff | 0, b, 0, len);
     return caml_call1(Stdlib_Bytes[44], b);
    }
    return caml_call2(caml_call3(err(_h_), caller, pp_t, src), srcoff, len);
   }
   function copy(_be_, _bf_, _bg_){
    return copy_to_string(cst_copy, _be_, _bf_, _bg_);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if(0 <= len && 0 <= srcoff && (src[3] - srcoff | 0) >= len){
     if(0 <= dstoff && (dst[3] - dstoff | 0) >= len)
      return runtime.caml_blit_bigstring_to_bigstring
              (src[1], src[2] + srcoff | 0, dst[1], dst[2] + dstoff | 0, len);
     return caml_call2
             (caml_call4(err(_k_), pp_t, src, pp_t, dst), dstoff, len);
    }
    return caml_call2(caml_call4(err(_j_), pp_t, src, pp_t, dst), srcoff, len);
   }
   function sub_copy(cstr, off, len){
    var cstr2 = create_unsafe(len);
    blit(cstr, off, cstr2, 0, len);
    return cstr2;
   }
   function blit_from_string(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       && 0 <= dstoff && (caml_ml_string_length(src) - srcoff | 0) >= len)
     return (dst[3] - dstoff | 0) < len
             ? caml_call2
               (caml_call4(err(_m_), string_t, src, pp_t, dst), dstoff, len)
             : runtime.caml_blit_string_to_bigstring
               (src, srcoff, dst[1], dst[2] + dstoff | 0, len);
    return caml_call2
            (caml_call4(err(_l_), string_t, src, pp_t, dst), srcoff, len);
   }
   function blit_from_bytes(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       && 0 <= dstoff && (caml_ml_bytes_length(src) - srcoff | 0) >= len)
     return (dst[3] - dstoff | 0) < len
             ? caml_call2
               (caml_call4(err(_o_), bytes_t, src, pp_t, dst), dstoff, len)
             : runtime.caml_blit_string_to_bigstring
               (src, srcoff, dst[1], dst[2] + dstoff | 0, len);
    return caml_call2
            (caml_call4(err(_n_), bytes_t, src, pp_t, dst), srcoff, len);
   }
   function blit_to_bytes(src, srcoff, dst, dstoff, len){
    if(0 <= len && 0 <= srcoff && 0 <= dstoff && (src[3] - srcoff | 0) >= len)
     return (caml_ml_bytes_length(dst) - dstoff | 0) < len
             ? caml_call2
               (caml_call4(err(_q_), pp_t, src, bytes_t, dst), dstoff, len)
             : runtime.caml_blit_bigstring_to_string
               (src[1], src[2] + srcoff | 0, dst, dstoff, len);
    return caml_call2
            (caml_call4(err(_p_), pp_t, src, bytes_t, dst), srcoff, len);
   }
   function compare(t1, t2){
    var l1 = t1[3], l2 = t2[3], r = runtime.caml_int_compare(l1, l2);
    if(0 !== r) return r;
    var r$0 = runtime.caml_compare_bigstring(t1[1], t1[2], t2[1], t2[2], l1);
    return 0 === r$0 ? 0 : 0 <= r$0 ? 1 : -1;
   }
   function equal(t1, t2){return 0 === compare(t1, t2) ? 1 : 0;}
   function memset(t, x){
    return runtime.caml_fill_bigstring(t[1], t[2], t[3], x);
   }
   function create(len){var t = create_unsafe(len); memset(t, 0); return t;}
   function set_uint8(t, i, c){
    if(t[3] > i && 0 <= i) return caml_ba_set_1(t[1], t[2] + i | 0, c);
    return caml_call3(err_invalid_bounds(cst_set_uint8), t, i, 1);
   }
   function set_char(t, i, c){
    if(t[3] > i && 0 <= i) return caml_ba_set_1(t[1], t[2] + i | 0, c);
    return caml_call3(err_invalid_bounds(cst_set_char), t, i, 1);
   }
   function get_uint8(t, i){
    if(t[3] > i && 0 <= i) return caml_ba_get_1(t[1], t[2] + i | 0);
    return caml_call3(err_invalid_bounds(cst_get_uint8), t, i, 1);
   }
   function get_char(t, i){
    if(t[3] > i && 0 <= i) return caml_ba_get_1(t[1], t[2] + i | 0);
    return caml_call3(err_invalid_bounds(cst_get_char), t, i, 1);
   }
   function set_uint16(swap, p, t, i, c){
    if((t[3] - 2 | 0) >= i && 0 <= i){
     var _bd_ = swap ? caml_bswap16(c) : c;
     return runtime.caml_ba_uint8_set16(t[1], t[2] + i | 0, _bd_);
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_set_uint16)),
             t,
             i,
             2);
   }
   function set_uint32(swap, p, t, i, c){
    if((t[3] - 4 | 0) >= i && 0 <= i){
     var _bc_ = swap ? caml_int32_bswap(c) : c;
     return runtime.caml_ba_uint8_set32(t[1], t[2] + i | 0, _bc_);
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_set_uint32)),
             t,
             i,
             4);
   }
   function set_uint64(swap, p, t, i, c){
    if((t[3] - 8 | 0) >= i && 0 <= i){
     var _bb_ = swap ? caml_int64_bswap(c) : c;
     return runtime.caml_ba_uint8_set64(t[1], t[2] + i | 0, _bb_);
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_set_uint64)),
             t,
             i,
             8);
   }
   function get_uint16(swap, p, t, i){
    if((t[3] - 2 | 0) >= i && 0 <= i){
     var r = runtime.caml_ba_uint8_get16(t[1], t[2] + i | 0);
     return swap ? caml_bswap16(r) : r;
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_get_uint16)),
             t,
             i,
             2);
   }
   function get_uint32(swap, p, t, i){
    if((t[3] - 4 | 0) >= i && 0 <= i){
     var r = runtime.caml_ba_uint8_get32(t[1], t[2] + i | 0);
     return swap ? caml_int32_bswap(r) : r;
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_get_uint32)),
             t,
             i,
             4);
   }
   function get_uint64(swap, p, t, i){
    if((t[3] - 8 | 0) >= i && 0 <= i){
     var r = runtime.caml_ba_uint8_get64(t[1], t[2] + i | 0);
     return swap ? caml_int64_bswap(r) : r;
    }
    return caml_call3
            (err_invalid_bounds(caml_call2(Stdlib[28], p, cst_get_uint64)),
             t,
             i,
             8);
   }
   function set_uint16$0(t, i, c){
    return set_uint16(1 - Stdlib_Sys[11], cst_BE, t, i, c);
   }
   function set_uint32$0(t, i, c){
    return set_uint32(1 - Stdlib_Sys[11], cst_BE$0, t, i, c);
   }
   function set_uint64$0(t, i, c){
    return set_uint64(1 - Stdlib_Sys[11], cst_BE$1, t, i, c);
   }
   function get_uint16$0(t, i){
    return get_uint16(1 - Stdlib_Sys[11], cst_BE$2, t, i);
   }
   function get_uint32$0(t, i){
    return get_uint32(1 - Stdlib_Sys[11], cst_BE$3, t, i);
   }
   function get_uint64$0(t, i){
    return get_uint64(1 - Stdlib_Sys[11], cst_BE$4, t, i);
   }
   function set_uint16$1(t, i, c){
    return set_uint16(Stdlib_Sys[11], cst_LE, t, i, c);
   }
   function set_uint32$1(t, i, c){
    return set_uint32(Stdlib_Sys[11], cst_LE$0, t, i, c);
   }
   function set_uint64$1(t, i, c){
    return set_uint64(Stdlib_Sys[11], cst_LE$1, t, i, c);
   }
   function get_uint16$1(t, i){
    return get_uint16(Stdlib_Sys[11], cst_LE$2, t, i);
   }
   function get_uint32$1(t, i){
    return get_uint32(Stdlib_Sys[11], cst_LE$3, t, i);
   }
   function get_uint64$1(t, i){
    return get_uint64(Stdlib_Sys[11], cst_LE$4, t, i);
   }
   function set_uint16$2(t, i, c){return set_uint16(0, cst_HE, t, i, c);}
   function set_uint32$2(t, i, c){return set_uint32(0, cst_HE$0, t, i, c);}
   function set_uint64$2(t, i, c){return set_uint64(0, cst_HE$1, t, i, c);}
   function get_uint16$2(t, i){return get_uint16(0, cst_HE$2, t, i);}
   function get_uint32$2(t, i){return get_uint32(0, cst_HE$3, t, i);}
   function get_uint64$2(t, i){return get_uint64(0, cst_HE$4, t, i);}
   function length(param){var len = param[3]; return len;}
   function sum_lengths(caller, l){
    var acc = 0, param = l;
    for(;;){
     if(! param) return acc;
     var t = param[2], h = param[1], sum = h[3] + acc | 0;
     if(sum < acc) return caml_call1(Stdlib[1], caller);
     var acc = sum, param = t;
    }
   }
   function lenv(l){return sum_lengths(cst_Cstruct_lenv, l);}
   function copyv(ts){
    var
     sz = sum_lengths(cst_Cstruct_copyv, ts),
     dst = caml_create_bytes(sz),
     _a$_ = 0;
    function _ba_(off, src){
     var x = src[3];
     runtime.caml_blit_bigstring_to_string(src[1], src[2], dst, off, x);
     return off + x | 0;
    }
    caml_call3(Stdlib_List[26], _ba_, _a$_, ts);
    return caml_call1(Stdlib_Bytes[44], dst);
   }
   function fillv(src, dst){
    var dst$0 = dst, n = 0, param = src;
    for(;;){
     if(! param) return [0, n, 0];
     var tl = param[2], hd = param[1], avail = dst$0[3], first = hd[3];
     if(first > avail){
      blit(hd, 0, dst$0, 0, avail);
      var rest_hd = shift(hd, avail);
      return [0, n + avail | 0, [0, rest_hd, tl]];
     }
     blit(hd, 0, dst$0, 0, first);
     var
      n$0 = n + first | 0,
      dst$1 = shift(dst$0, first),
      dst$0 = dst$1,
      n = n$0,
      param = tl;
    }
   }
   function to_string(opt, sz, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(sz) var l = sz[1], len = l; else var len = t[3] - off | 0;
    return copy_to_string(cst_to_string, t, off, len);
   }
   function to_hex_string(opt, sz, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    function nibble_to_char(i){
     return 10 <= i
             ? caml_call1(Stdlib_Char[1], (i - 10 | 0) + 97 | 0)
             : caml_call1(Stdlib_Char[1], i + 48 | 0);
    }
    if(sz) var l = sz[1], len = l; else var len = t[3] - off | 0;
    if(0 <= len && 0 <= off && (t[3] - off | 0) >= len){
     var out = caml_create_bytes(2 * len | 0), _a9_ = len - 1 | 0, _a8_ = 0;
     if(_a9_ >= 0){
      var i = _a8_;
      for(;;){
       var c = caml_ba_get_1(t[1], (i + t[2] | 0) + off | 0);
       caml_bytes_set(out, 2 * i | 0, nibble_to_char(c >>> 4 | 0));
       caml_bytes_set(out, (2 * i | 0) + 1 | 0, nibble_to_char(c & 15));
       var _a__ = i + 1 | 0;
       if(_a9_ === i) break;
       var i = _a__;
      }
     }
     return caml_call1(Stdlib_Bytes[44], out);
    }
    return caml_call2(caml_call2(err(_i_), pp_t, t), off, len);
   }
   function to_bytes(off, len, t){
    var _a7_ = to_string(off, len, t);
    return caml_call1(Stdlib_Bytes[45], _a7_);
   }
   function of_data_abstract(blitfun, lenfun, allocator, opt, len, buf){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], buflen = len$0;
    else
     var buflen = caml_call1(lenfun, buf) - off | 0;
    if(allocator){
     var fn = allocator[1], c = caml_call1(fn, buflen);
     caml_call5(blitfun, buf, off, c, 0, buflen);
     return [0, c[1], c[2], buflen];
    }
    var c$0 = create_unsafe(buflen);
    caml_call5(blitfun, buf, off, c$0, 0, buflen);
    return c$0;
   }
   function of_string(allocator, off, len, buf){
    return of_data_abstract
            (blit_from_string,
             caml_ml_string_length,
             allocator,
             off,
             len,
             buf);
   }
   function of_bytes(allocator, off, len, buf){
    return of_data_abstract
            (blit_from_bytes, caml_ml_bytes_length, allocator, off, len, buf);
   }
   function of_hex(opt, len, str){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var l = len[1], l$0 = l;
    else
     var l$0 = caml_ml_string_length(str) - off | 0;
    var
     str$0 = caml_call3(Stdlib_String[16], str, off, l$0),
     z = [0, create_unsafe(caml_ml_string_length(str$0) >>> 1 | 0), 0, 0, 0],
     st = [0, z];
    function _a2_(char$0){
     var
      param = st[1],
      acc = param[4],
      p = param[3],
      i = param[2],
      cs = param[1],
      p$0 = p + 1 | 0,
      _a5_ = char$0 - 9 | 0;
     a:
     {
      b:
      {
       if(4 < _a5_ >>> 0){
        if(23 === _a5_) break b;
       }
       else if(1 < _a5_ - 2 >>> 0) break b;
       var _a6_ = 0;
       break a;
      }
      var _a6_ = 1;
     }
     if(_a6_)
      var _a4_ = [0, cs, i, p$0, acc];
     else{
      a:
      {
       if(65 <= char$0){
        if(97 <= char$0){
         if(103 > char$0){var match = char$0 - 87 | 0; break a;}
        }
        else if(71 > char$0){var match = char$0 - 55 | 0; break a;}
       }
       else if(9 >= char$0 - 48 >>> 0){var match = char$0 - 48 | 0; break a;}
       var match = caml_call4(Stdlib_Format[147], Stdlib[1], _x_, p, char$0);
      }
      if(acc){
       var y = acc[1];
       set_uint8(cs, i, match | y);
       var _a4_ = [0, cs, i + 1 | 0, p$0, 0];
      }
      else
       var _a4_ = [0, cs, i, p$0, [0, match << 4]];
     }
     st[1] = _a4_;
     return 0;
    }
    caml_call2(Stdlib_String[30], _a2_, str$0);
    var _a3_ = st[1], cs = _a3_[1];
    if(_a3_[4]) return caml_call2(Stdlib_Format[147], Stdlib[1], _y_);
    var i = _a3_[2];
    return sub(cs, 0, i);
   }
   function hexdump_pp(fmt, t){
    function before(fmt, param){
     return 0 === param
             ? 0
             : 8
               === param
               ? caml_call2(Stdlib_Format[137], fmt, _z_)
               : caml_call2(Stdlib_Format[137], fmt, _A_);
    }
    function after(fmt, param){
     return 15 === param ? caml_call2(Stdlib_Format[137], fmt, _B_) : 0;
    }
    caml_call2(Stdlib_Format[7], fmt, 0);
    var _a0_ = t[3] - 1 | 0, _aZ_ = 0;
    if(_a0_ >= 0){
     var i = _aZ_;
     for(;;){
      var column = i % 16 | 0, c = caml_ba_get_1(t[1], t[2] + i | 0);
      caml_call7
       (Stdlib_Format[137], fmt, _C_, before, column, c, after, column);
      var _a1_ = i + 1 | 0;
      if(_a0_ === i) break;
      var i = _a1_;
     }
    }
    return caml_call2(Stdlib_Format[3], fmt, 0);
   }
   var hexdump = caml_call2(Stdlib_Format[138], _D_, hexdump_pp);
   function hexdump_to_buffer(buf, t){
    var f = caml_call1(Stdlib_Format[114], buf);
    return caml_call4(Stdlib_Format[137], f, _E_, hexdump_pp, t);
   }
   function split(opt, t, off){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    try{
     var
      header = sub(t, start, off),
      body = sub(t, start + off | 0, (t[3] - off | 0) - start | 0),
      _aX_ = [0, header, body];
     return _aX_;
    }
    catch(_aY_){
     var _aW_ = caml_wrap_exception(_aY_);
     if(_aW_[1] === Stdlib[6])
      return caml_call2(caml_call2(err(_s_), pp_t, t), start, off);
     throw caml_maybe_attach_backtrace(_aW_, 0);
    }
   }
   function iter(lenfn, pfn, t){
    var body = [0, [0, t]], i = [0, 0];
    return function(param){
     var match = body[1];
     if(! match) return 0;
     var buf = match[1];
     if(0 === buf[3]){body[1] = 0; return 0;}
     var match$0 = caml_call1(lenfn, buf);
     if(! match$0){body[1] = 0; return 0;}
     var plen = match$0[1];
     i[1]++;
     try{var _aU_ = split(0, buf, plen), match$1 = _aU_;}
     catch(_aV_){
      var _aS_ = caml_wrap_exception(_aV_);
      if(_aS_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_aS_, 0);
      var
       _aT_ = i[1],
       match$1 = caml_call2(caml_call2(err(_t_), pp_t, buf), _aT_, plen);
     }
     var rest = match$1[2], p = match$1[1];
     body[1] = [0, rest];
     return [0, caml_call1(pfn, p)];};
   }
   function fold(f, next, acc){
    var acc$0 = acc;
    for(;;){
     var match = caml_call1(next, 0);
     if(! match) return acc$0;
     var v = match[1], acc$1 = caml_call2(f, acc$0, v), acc$0 = acc$1;
    }
   }
   function append(cs1, cs2){
    var l1 = cs1[3], l2 = cs2[3], cs = create_unsafe(l1 + l2 | 0);
    blit(cs1, 0, cs, 0, l1);
    blit(cs2, 0, cs, l1, l2);
    return cs;
   }
   function concat(css){
    if(! css) return create_unsafe(0);
    if(css[2]){
     var
      result = create_unsafe(sum_lengths(cst_Cstruct_concat, css)),
      aux =
        function(off, cs){
         var n = cs[3];
         blit(cs, 0, result, off, n);
         return off + n | 0;
        };
     caml_call3(Stdlib_List[26], aux, 0, css);
     return result;
    }
    var cs = css[1];
    return cs;
   }
   function rev(t){
    var n = t[3], out = create_unsafe(n), _aQ_ = n - 1 | 0, _aP_ = 0;
    if(_aQ_ >= 0){
     var i_src = _aP_;
     for(;;){
      var byte$0 = get_uint8(t, i_src), i_dst = (n - 1 | 0) - i_src | 0;
      set_uint8(out, i_dst, byte$0);
      var _aR_ = i_src + 1 | 0;
      if(_aQ_ === i_src) break;
      var i_src = _aR_;
     }
    }
    return out;
   }
   function get(param, zidx){
    var
     len = param[3],
     off = param[2],
     buffer = param[1],
     _aN_ = zidx < 0 ? 1 : 0,
     _aO_ = _aN_ || (len <= zidx ? 1 : 0);
    if(_aO_) caml_call1(Stdlib[1], cst_index_out_of_bounds);
    return caml_ba_get_1(buffer, off + zidx | 0);
   }
   function get_byte(param, zidx){
    var
     len = param[3],
     off = param[2],
     buffer = param[1],
     _aL_ = zidx < 0 ? 1 : 0,
     _aM_ = _aL_ || (len <= zidx ? 1 : 0);
    if(_aM_) caml_call1(Stdlib[1], cst_index_out_of_bounds$0);
    return caml_ba_get_1(buffer, off + zidx | 0);
   }
   function string(opt, len, str){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var str_len = caml_ml_string_length(str);
    if(len) var len$0 = len[1], len$1 = len$0; else var len$1 = str_len;
    var _aI_ = off < 0 ? 1 : 0;
    if(_aI_)
     var _aJ_ = _aI_;
    else
     var
      _aK_ = len$1 < 0 ? 1 : 0,
      _aJ_ = _aK_ || (str_len < (off + len$1 | 0) ? 1 : 0);
    if(_aJ_) caml_call1(Stdlib[1], cst_index_out_of_bounds$1);
    var
     buffer =
       caml_call3
        (Stdlib_Bigarray[19][1],
         Stdlib_Bigarray[13],
         Stdlib_Bigarray[15],
         str_len);
    runtime.caml_blit_string_to_bigstring(str, 0, buffer, 0, str_len);
    return of_bigarray([0, off], [0, len$1], buffer);
   }
   function buffer(opt, len, buffer){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var buffer_len = caml_ba_dim_1(buffer);
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = buffer_len - off | 0;
    var _aF_ = off < 0 ? 1 : 0;
    if(_aF_)
     var _aG_ = _aF_;
    else
     var
      _aH_ = len$1 < 0 ? 1 : 0,
      _aG_ = _aH_ || (buffer_len < (off + len$1 | 0) ? 1 : 0);
    if(_aG_) caml_call1(Stdlib[1], cst_index_out_of_bounds$2);
    return of_bigarray([0, off], [0, len$1], buffer);
   }
   function start_pos(param){var off = param[2]; return off;}
   function stop_pos(param){
    var len = param[3], off = param[2];
    return off + len | 0;
   }
   function head(opt, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var len = cs[3];
    if(0 === len) return 0;
    var _aE_ = rev ? len - 1 | 0 : 0;
    return [0, get_char(cs, _aE_)];
   }
   function tail(opt, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var len = cs[3], off = cs[2], buffer = cs[1];
    return 0 === len
            ? cs
            : rev
              ? of_bigarray([0, off], [0, len - 2 | 0], buffer)
              : of_bigarray([0, off + 1 | 0], [0, len - 1 | 0], buffer);
   }
   function is_empty(param){var len = param[3]; return 0 === len ? 1 : 0;}
   function is_prefix(affix, cs){
    var len = cs[3], alen = affix[3];
    if(len < alen) return 0;
    var max_zidx = alen - 1 | 0, i = 0;
    for(;;){
     if(max_zidx < i) return 1;
     var _aD_ = get_char(cs, i);
     if(get_char(affix, i) !== _aD_) return 0;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function is_infix(affix, cs){
    var len = cs[3], alen = affix[3];
    if(len < alen) return 0;
    var max_zidx_a = alen - 1 | 0, max_zidx_s = len - alen | 0, i = 0, k = 0;
    for(;;){
     if(max_zidx_s < i) return 0;
     if(max_zidx_a < k) return 1;
     if(0 < k){
      var _aB_ = get_char(cs, i + k | 0);
      if(get_char(affix, k) === _aB_)
       var k$0 = k + 1 | 0, k = k$0;
      else
       var i$0 = i + 1 | 0, i = i$0, k = 0;
     }
     else{
      var _aC_ = get_char(cs, i);
      if(get_char(affix, 0) === _aC_)
       var k = 1;
      else
       var i$1 = i + 1 | 0, i = i$1, k = 0;
     }
    }
   }
   function is_suffix(affix, cs){
    var len = cs[3], alen = affix[3];
    if(len < alen) return 0;
    var
     max_zidx = alen - 1 | 0,
     max_zidx_a = alen - 1 | 0,
     max_zidx_s = len - 1 | 0,
     i = 0;
    for(;;){
     if(max_zidx < i) return 1;
     var _aA_ = get_char(cs, max_zidx_s - i | 0);
     if(get_char(affix, max_zidx_a - i | 0) !== _aA_) return 0;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function for_all(sat, cs){
    var acc = 1, i = 0;
    for(;;){
     if(i >= cs[3]) return acc;
     var
      i$0 = i + 1 | 0,
      _az_ = caml_call1(sat, get_char(cs, i)),
      acc$0 = _az_ ? acc : _az_,
      acc = acc$0,
      i = i$0;
    }
   }
   function exists(sat, cs){
    var acc = 0, i = 0;
    for(;;){
     if(i >= cs[3]) return acc;
     var
      i$0 = i + 1 | 0,
      _ay_ = caml_call1(sat, get_char(cs, i)),
      acc$0 = _ay_ || acc,
      acc = acc$0,
      i = i$0;
    }
   }
   function start(param){
    var off = param[2], buffer = param[1];
    return of_bigarray([0, off], _F_, buffer);
   }
   function stop(param){
    var len = param[3], off = param[2], buffer = param[1];
    return of_bigarray([0, off + len | 0], _G_, buffer);
   }
   function is_white(param){
    a:
    {
     if(14 <= param){if(32 === param) break a;} else if(9 <= param) break a;
     return 0;
    }
    return 1;
   }
   function trim(opt, cs){
    if(opt) var sth = opt[1], drop = sth; else var drop = is_white;
    var max_zpos = cs[3], off = cs[2], buffer = cs[1];
    if(0 === max_zpos) return cs;
    var max_zidx = max_zpos - 1 | 0;
    a:
    {
     b:
     {
      var i = 0;
      for(;;){
       if(max_zidx < i) break b;
       if(! caml_call1(drop, get_char(cs, i))) break;
       var i$0 = i + 1 | 0, i = i$0;
      }
      var left = i;
      break a;
     }
     var left = max_zpos;
    }
    if(left === max_zpos)
     return of_bigarray
             ([0, ((off * 2 | 0) + max_zpos | 0) / 2 | 0], _H_, buffer);
    var i$1 = max_zidx;
    for(;;){
     if(0 <= i$1){
      if(caml_call1(drop, get_char(cs, i$1))){
       var i$2 = i$1 - 1 | 0, i$1 = i$2;
       continue;
      }
      var right = i$1 + 1 | 0;
     }
     else
      var right = 0;
     if(0 === left && right === max_zpos) return cs;
     return of_bigarray([0, off + left | 0], [0, right - left | 0], buffer);
    }
   }
   function span(opt, _ax_, _aw_, _av_, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(_ax_) var sth$0 = _ax_[1], min = sth$0; else var min = 0;
    if(_aw_) var sth$1 = _aw_[1], max = sth$1; else var max = Stdlib[19];
    if(_av_)
     var sth$2 = _av_[1], sat = sth$2;
    else
     var sat = function(param){return 1;};
    if(rev){
     var len$0 = cs[3], off$0 = cs[2], v$0 = cs[1];
     if(min < 0) caml_call1(Stdlib[1], cst_span_negative_min$0);
     if(max < 0) caml_call1(Stdlib[1], cst_span_negative_max$0);
     if(max >= min && 0 !== max){
      var
       max_zidx$1 = len$0 - 1 | 0,
       k$0 = len$0 - max | 0,
       min_zidx = 0 <= k$0 ? k$0 : 0,
       need_zidx = (len$0 - min | 0) - 1 | 0,
       i$1 = max_zidx$1;
      for(;;){
       if(min_zidx > i$1) break;
       if(! caml_call1(sat, get_char(cs, i$1))) break;
       var i$2 = i$1 - 1 | 0, i$1 = i$2;
      }
      if(need_zidx >= i$1 && i$1 !== max_zidx$1){
       if(0 > i$1) return [0, buffer([0, off$0], _N_, v$0), cs];
       var
        _au_ =
          buffer
           ([0, (off$0 + i$1 | 0) + 1 | 0],
            [0, len$0 - (i$1 + 1 | 0) | 0],
            v$0);
       return [0, buffer([0, off$0], [0, i$1 + 1 | 0], v$0), _au_];
      }
      return [0, cs, buffer([0, off$0 + len$0 | 0], _M_, v$0)];
     }
     return [0, cs, buffer([0, off$0 + len$0 | 0], _L_, v$0)];
    }
    var len = cs[3], off = cs[2], v = cs[1];
    if(min < 0) caml_call1(Stdlib[1], cst_span_negative_min);
    if(max < 0) caml_call1(Stdlib[1], cst_span_negative_max);
    if(max >= min && 0 !== max){
     var max_zidx = len - 1 | 0, k = max - 1 | 0;
     a:
     {
      if(max_zidx >= k && 0 <= k){var max_zidx$0 = k; break a;}
      var max_zidx$0 = max_zidx;
     }
     var i = 0;
     for(;;){
      if(i > max_zidx$0) break;
      if(! caml_call1(sat, get_char(cs, i))) break;
      var i$0 = i + 1 | 0, i = i$0;
     }
     if(i >= min && 0 !== i){
      if(i === len) return [0, cs, buffer([0, off + len | 0], _K_, v)];
      var _at_ = buffer([0, off + i | 0], [0, len - i | 0], v);
      return [0, buffer([0, off], [0, i], v), _at_];
     }
     return [0, buffer([0, off], _J_, v), cs];
    }
    return [0, buffer([0, off], _I_, v), cs];
   }
   function take(opt, min, max, sat, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var
     _ap_ = span([0, rev], min, max, sat, cs),
     _aq_ =
       rev ? function(_ar_){return _ar_[2];} : function(_as_){return _as_[1];};
    return _aq_(_ap_);
   }
   function drop(opt, min, max, sat, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var
     _al_ = span([0, rev], min, max, sat, cs),
     _am_ =
       rev ? function(_an_){return _an_[1];} : function(_ao_){return _ao_[2];};
    return _am_(_al_);
   }
   function cut(opt, sep, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(rev){
     var len$0 = cs[3], off$0 = cs[2], v$0 = cs[1], sep_len$0 = sep[3];
     if(0 === sep_len$0) caml_call1(Stdlib[1], cst_cut_empty_separator$0);
     var
      max_sep_zidx$0 = sep_len$0 - 1 | 0,
      max_s_zidx$0 = len$0 - 1 | 0,
      i$5 = max_s_zidx$0 - max_sep_zidx$0 | 0,
      i$3 = i$5;
     for(;;){
      if(0 > i$3) return 0;
      var _ak_ = get_char(sep, 0);
      if(get_char(cs, i$3) === _ak_){
       var k$1 = 1;
       for(;;){
        if(max_sep_zidx$0 < k$1){
         var
          _ai_ =
            buffer
             ([0, (off$0 + i$3 | 0) + sep_len$0 | 0],
              [0, (len$0 - i$3 | 0) - sep_len$0 | 0],
              v$0);
         return [0, [0, buffer([0, off$0], [0, i$3], v$0), _ai_]];
        }
        var _aj_ = get_char(sep, k$1);
        if(get_char(cs, i$3 + k$1 | 0) !== _aj_) break;
        var k$2 = k$1 + 1 | 0, k$1 = k$2;
       }
       var i$2 = i$3 - 1 | 0, i$3 = i$2;
      }
      else
       var i$4 = i$3 - 1 | 0, i$3 = i$4;
     }
    }
    else{
     var len = cs[3], off = cs[2], v = cs[1], sep_len = sep[3];
     if(0 === sep_len) caml_call1(Stdlib[1], cst_cut_empty_separator);
     var
      max_sep_zidx = sep_len - 1 | 0,
      max_s_zidx = len - sep_len | 0,
      i$0 = 0;
     for(;;){
      if(max_s_zidx < i$0) return 0;
      var _ah_ = get_char(sep, 0);
      if(get_char(cs, i$0) === _ah_){
       var k = 1;
       for(;;){
        if(max_sep_zidx < k){
         var
          _af_ =
            buffer
             ([0, (off + i$0 | 0) + sep_len | 0],
              [0, (len - i$0 | 0) - sep_len | 0],
              v);
         return [0, [0, buffer([0, off], [0, i$0], v), _af_]];
        }
        var _ag_ = get_char(sep, k);
        if(get_char(cs, i$0 + k | 0) !== _ag_) break;
        var k$0 = k + 1 | 0, k = k$0;
       }
       var i = i$0 + 1 | 0, i$0 = i;
      }
      else
       var i$1 = i$0 + 1 | 0, i$0 = i$1;
     }
    }
   }
   function add_sub(no_empty, buf, off, len, acc){
    return 0 === len
            ? no_empty ? acc : [0, buffer([0, off], [0, len], buf), acc]
            : [0, buffer([0, off], [0, len], buf), acc];
   }
   function cuts(opt, _ae_, sep, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(_ae_) var sth$0 = _ae_[1], empty = sth$0; else var empty = 1;
    if(rev){
     var
      no_empty = 1 - empty,
      zanchor$0 = cs[3],
      buffer$0 = cs[1],
      sep_len$0 = sep[3];
     if(0 === sep_len$0) caml_call1(Stdlib[1], cst_cuts_empty_separator$0);
     var
      max_sep_zidx$0 = sep_len$0 - 1 | 0,
      max_s_zidx$0 = zanchor$0 - 1 | 0,
      i$5 = max_s_zidx$0 - max_sep_zidx$0 | 0,
      zanchor$2 = zanchor$0,
      zanchor$1 = i$5,
      acc$2 = 0;
     for(;;){
      if(0 > zanchor$1){
       if(zanchor$2 !== zanchor$0)
        return add_sub(no_empty, buffer$0, 0, zanchor$2, acc$2);
       if(no_empty && 0 === zanchor$0) return 0;
       return [0, cs, 0];
      }
      var _ad_ = get_char(sep, 0);
      if(get_char(cs, zanchor$1) === _ad_){
       a:
       {
        var k$1 = 1;
        for(;;){
         if(max_sep_zidx$0 < k$1) break a;
         var _ac_ = get_char(cs, k$1);
         if(get_char(cs, zanchor$1 + k$1 | 0) !== _ac_) break;
         var k$2 = k$1 + 1 | 0, k$1 = k$2;
        }
        var i$3 = zanchor$1 - 1 | 0, zanchor$1 = i$3;
        continue;
       }
       var
        off$0 = zanchor$1 + sep_len$0 | 0,
        acc$1 =
          add_sub(no_empty, buffer$0, off$0, zanchor$2 - off$0 | 0, acc$2),
        i$2 = zanchor$1 - sep_len$0 | 0,
        zanchor$2 = zanchor$1,
        zanchor$1 = i$2,
        acc$2 = acc$1;
      }
      else
       var i$4 = zanchor$1 - 1 | 0, zanchor$1 = i$4;
     }
    }
    else{
     var
      no_empty$0 = 1 - empty,
      len = cs[3],
      off = cs[2],
      buffer = cs[1],
      sep_len = sep[3];
     if(0 === sep_len) caml_call1(Stdlib[1], cst_cuts_empty_separator);
     var
      max_sep_zidx = sep_len - 1 | 0,
      max_s_zidx = len - sep_len | 0,
      zanchor = 0,
      i$0 = 0,
      acc$0 = 0;
     for(;;){
      if(max_s_zidx < i$0){
       if(0 !== zanchor){
        var
         _aa_ =
           add_sub
            (no_empty$0, buffer, off + zanchor | 0, len - zanchor | 0, acc$0);
        return caml_call1(Stdlib_List[10], _aa_);
       }
       if(no_empty$0 && 0 === len) return 0;
       return [0, cs, 0];
      }
      var _ab_ = get_char(sep, 0);
      if(get_char(cs, i$0) === _ab_){
       a:
       {
        var k = 1;
        for(;;){
         if(max_sep_zidx < k) break a;
         var _$_ = get_char(sep, k);
         if(get_char(cs, i$0 + k | 0) !== _$_) break;
         var k$0 = k + 1 | 0, k = k$0;
        }
        var i = i$0 + 1 | 0, i$0 = i;
        continue;
       }
       var
        new_start = i$0 + sep_len | 0,
        acc =
          add_sub
           (no_empty$0, buffer, off + zanchor | 0, i$0 - zanchor | 0, acc$0),
        zanchor = new_start,
        i$0 = new_start,
        acc$0 = acc;
      }
      else
       var i$1 = i$0 + 1 | 0, i$0 = i$1;
     }
    }
   }
   function fields(opt, ___, cs){
    if(opt) var sth = opt[1], empty = sth; else var empty = 0;
    if(___) var sth$0 = ___[1], is_sep = sth$0; else var is_sep = is_white;
    var
     end_pos = cs[3],
     off = cs[2],
     buffer = cs[1],
     no_empty = 1 - empty,
     i$1 = end_pos - 1 | 0,
     end_pos$1 = i$1,
     end_pos$0 = end_pos,
     acc = 0;
    for(;;){
     if(0 > end_pos$1){
      if(end_pos$0 !== end_pos)
       return add_sub
               (no_empty,
                buffer,
                off,
                end_pos$0 - (end_pos$1 + 1 | 0) | 0,
                acc);
      if(no_empty && 0 === end_pos) return 0;
      return [0, cs, 0];
     }
     if(caml_call1(is_sep, get_char(cs, end_pos$1)))
      var
       acc$0 =
         add_sub
          (no_empty,
           buffer,
           (off + end_pos$1 | 0) + 1 | 0,
           end_pos$0 - (end_pos$1 + 1 | 0) | 0,
           acc),
       i = end_pos$1 - 1 | 0,
       end_pos$0 = end_pos$1,
       end_pos$1 = i,
       acc = acc$0;
     else
      var i$0 = end_pos$1 - 1 | 0, end_pos$1 = i$0;
    }
   }
   function find(opt, sat, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(rev){
     var len$0 = cs[3], v$0 = cs[1], i$3 = len$0 - 1 | 0, i$1 = i$3;
     for(;;){
      if(0 > i$1) return 0;
      if(caml_call1(sat, get_char(cs, i$1)))
       return [0, buffer([0, i$1], _P_, v$0)];
      var i$2 = i$1 - 1 | 0, i$1 = i$2;
     }
    }
    else{
     var len = cs[3], v = cs[1], max_idx = len - 1 | 0, i = 0;
     for(;;){
      if(max_idx < i) return 0;
      if(caml_call1(sat, get_char(cs, i))) return [0, buffer([0, i], _O_, v)];
      var i$0 = i + 1 | 0, i = i$0;
     }
    }
   }
   function find_sub(opt, sub, cs){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(rev){
     var len$0 = cs[3], v$0 = cs[1], sub_len$0 = sub[3];
     if(len$0 < sub_len$0) return 0;
     var
      max_zidx_sub$0 = sub_len$0 - 1 | 0,
      i$5 = len$0 - sub_len$0 | 0,
      i$2 = i$5,
      k$1 = 0;
     for(;;){
      if(0 > i$2) return 0;
      if(max_zidx_sub$0 < k$1)
       return [0, buffer([0, i$2], [0, sub_len$0], v$0)];
      if(0 < k$1){
       var _Y_ = get_char(cs, i$2 + k$1 | 0);
       if(get_char(sub, k$1) === _Y_)
        var k$2 = k$1 + 1 | 0, k$1 = k$2;
       else
        var i$3 = i$2 - 1 | 0, i$2 = i$3, k$1 = 0;
      }
      else{
       var _Z_ = get_char(cs, i$2);
       if(get_char(sub, 0) === _Z_)
        var k$1 = 1;
       else
        var i$4 = i$2 - 1 | 0, i$2 = i$4, k$1 = 0;
      }
     }
    }
    else{
     var len = cs[3], off = cs[2], v = cs[1], sub_len = sub[3];
     if(len < sub_len) return 0;
     var
      max_zidx_sub = sub_len - 1 | 0,
      max_zidx_s = len - sub_len | 0,
      i = 0,
      k = 0;
     for(;;){
      if(max_zidx_s < i) return 0;
      if(max_zidx_sub < k)
       return [0, buffer([0, off + i | 0], [0, sub_len], v)];
      if(0 < k){
       var _W_ = get_char(cs, i + k | 0);
       if(get_char(sub, k) === _W_)
        var k$0 = k + 1 | 0, k = k$0;
       else
        var i$0 = i + 1 | 0, i = i$0, k = 0;
      }
      else{
       var _X_ = get_char(cs, i);
       if(get_char(sub, 0) === _X_)
        var k = 1;
       else
        var i$1 = i + 1 | 0, i = i$1, k = 0;
      }
     }
    }
   }
   function filter(sat, cs){
    var len = cs[3];
    if(0 === len) return empty;
    var b = create(len), max_zidx = len - 1 | 0, k = 0, i = 0;
    for(;;){
     if(max_zidx < i) return k === len ? b : sub(b, 0, k);
     var chr = get_char(cs, i);
     if(caml_call1(sat, chr)){
      set_char(b, k, chr);
      var i$0 = i + 1 | 0, k$0 = k + 1 | 0, k = k$0, i = i$0;
     }
     else
      var i$1 = i + 1 | 0, i = i$1;
    }
   }
   function filter_map(f, cs){
    var len = cs[3];
    if(0 === len) return empty;
    var b = create(len), max_zidx = len - 1 | 0, k = 0, i = 0;
    for(;;){
     if(max_zidx < i) return k === len ? b : sub(b, 0, k);
     var match = caml_call1(f, get_char(cs, i));
     if(match){
      var chr = match[1];
      set_char(b, i, chr);
      var i$0 = i + 1 | 0, k$0 = k + 1 | 0, k = k$0, i = i$0;
     }
     else
      var i$1 = i + 1 | 0, i = i$1;
    }
   }
   function map(f, cs){
    var len = cs[3];
    if(0 === len) return empty;
    var b = create(len), _U_ = len - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      set_char(b, i, caml_call1(f, get_char(cs, i)));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      var i = _V_;
     }
    }
    return b;
   }
   function mapi(f, cs){
    var len = cs[3];
    if(0 === len) return empty;
    var b = create(len), _R_ = len - 1 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      set_char(b, i, caml_call2(f, i, get_char(cs, i)));
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      var i = _S_;
     }
    }
    return b;
   }
   var
    Cstruct =
      [0,
       byte$0,
       empty,
       of_bigarray,
       to_bigarray,
       create,
       create_unsafe,
       of_string,
       of_bytes,
       of_hex,
       equal,
       compare,
       byte_to_int,
       check_bounds,
       check_alignment,
       get_char,
       get_uint8,
       set_char,
       set_uint8,
       sub,
       sub_copy,
       shift,
       copy,
       blit,
       blit_from_string,
       blit_from_bytes,
       blit_to_bytes,
       memset,
       split,
       to_string,
       to_hex_string,
       to_bytes,
       [0,
        get_uint16$0,
        get_uint32$0,
        get_uint64$0,
        set_uint16$0,
        set_uint32$0,
        set_uint64$0],
       [0,
        get_uint16$1,
        get_uint32$1,
        get_uint64$1,
        set_uint16$1,
        set_uint32$1,
        set_uint64$1],
       [0,
        get_uint16$2,
        get_uint32$2,
        get_uint64$2,
        set_uint16$2,
        set_uint32$2,
        set_uint64$2],
       hexdump,
       hexdump_to_buffer,
       hexdump_pp,
       debug,
       lenv,
       copyv,
       fillv,
       shiftv,
       iter,
       fold,
       append,
       concat,
       rev,
       get,
       get_byte,
       string,
       buffer,
       start_pos,
       stop_pos,
       length,
       head,
       tail,
       is_empty,
       is_prefix,
       is_suffix,
       is_infix,
       for_all,
       exists,
       start,
       stop,
       trim,
       span,
       take,
       drop,
       cut,
       cuts,
       fields,
       find,
       find_sub,
       filter,
       filter_map,
       map,
       mapi,
       sum_lengths];
   runtime.caml_register_global(98, Cstruct, "Cstruct");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cstruct_cap
//# unitInfo: Requires: Cstruct, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Cstruct = global_data.Cstruct,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    of_bigarray = Cstruct[3],
    create = Cstruct[5],
    create_unsafe = Cstruct[6],
    of_hex = Cstruct[9],
    equal = Cstruct[10],
    compare = Cstruct[11],
    check_alignment = Cstruct[14],
    get_char = Cstruct[15],
    get_uint8 = Cstruct[16],
    set_char = Cstruct[17],
    set_uint8 = Cstruct[18],
    shift = Cstruct[21],
    copy = Cstruct[22],
    memset = Cstruct[27],
    split = Cstruct[28],
    to_string = Cstruct[29],
    to_hex_string = Cstruct[30],
    to_bytes = Cstruct[31],
    BE = Cstruct[32],
    LE = Cstruct[33],
    lenv = Cstruct[39],
    copyv = Cstruct[40],
    fillv = Cstruct[41],
    shiftv = Cstruct[42],
    iter = Cstruct[43],
    fold = Cstruct[44],
    append = Cstruct[45],
    rev = Cstruct[47],
    head = Cstruct[55],
    tail = Cstruct[56],
    is_empty = Cstruct[57],
    is_prefix = Cstruct[58],
    is_suffix = Cstruct[59],
    is_infix = Cstruct[60],
    for_all = Cstruct[61],
    exists = Cstruct[62],
    start = Cstruct[63],
    stop = Cstruct[64],
    trim = Cstruct[65],
    span = Cstruct[66],
    take = Cstruct[67],
    drop = Cstruct[68],
    cut = Cstruct[69],
    cuts = Cstruct[70],
    fields = Cstruct[71],
    find = Cstruct[72],
    find_sub = Cstruct[73],
    filter = Cstruct[74],
    filter_map = Cstruct[75],
    map = Cstruct[76],
    mapi = Cstruct[77],
    of_string = caml_call1(Cstruct[7], 0),
    of_bytes = caml_call1(Cstruct[8], 0),
    cst_Cstruct_Cap_concat = "Cstruct.Cap.concat",
    _a_ = [0, "lib/cstruct_cap.ml", 72, 2];
   function pp(ppf, t){return caml_call2(Cstruct[37], ppf, t);}
   var length = Cstruct[54];
   function blit(src, src_off, dst, dst_off, len){
    return caml_call5(Cstruct[23], src, src_off, dst, dst_off, len);
   }
   function blit_from_string(src, src_off, dst, dst_off, len){
    return caml_call5(Cstruct[24], src, src_off, dst, dst_off, len);
   }
   function blit_from_bytes(src, src_off, dst, dst_off, len){
    return caml_call5(Cstruct[25], src, src_off, dst, dst_off, len);
   }
   function blit_to_bytes(src, src_off, dst, dst_off, len){
    return caml_call5(Cstruct[26], src, src_off, dst, dst_off, len);
   }
   function sub(t, off, len){return caml_call3(Cstruct[19], t, off, len);}
   function sub_copy(t, off, len){
    return caml_call3(Cstruct[20], t, off, len);
   }
   var unsafe_to_bigarray = Cstruct[4];
   function concat(vss){
    var
     res =
       caml_call1
        (create_unsafe, caml_call2(Cstruct[78], cst_Cstruct_Cap_concat, vss));
    function go(off, v){
     var len = caml_call1(Cstruct[54], v);
     caml_call5(Cstruct[23], v, 0, res, off, len);
     return off + len | 0;
    }
    var len = caml_call3(Stdlib_List[26], go, 0, vss);
    if(len === caml_call1(Cstruct[54], res)) return res;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function _b_(_d_){return _d_;}
   var
    Cstruct_cap =
      [0,
       function(_c_){return _c_;},
       _b_,
       equal,
       compare,
       pp,
       length,
       check_alignment,
       lenv,
       create,
       create_unsafe,
       sub,
       sub_copy,
       shift,
       shiftv,
       split,
       copy,
       append,
       concat,
       fillv,
       rev,
       memset,
       blit,
       blit_from_string,
       blit_from_bytes,
       of_string,
       to_string,
       to_hex_string,
       of_hex,
       copyv,
       of_bytes,
       to_bytes,
       blit_to_bytes,
       of_bigarray,
       unsafe_to_bigarray,
       iter,
       fold,
       get_char,
       set_char,
       get_uint8,
       set_uint8,
       BE,
       LE,
       head,
       tail,
       is_empty,
       is_prefix,
       is_suffix,
       is_infix,
       for_all,
       exists,
       start,
       stop,
       trim,
       span,
       take,
       drop,
       cut,
       cuts,
       fields,
       find,
       find_sub,
       filter,
       filter_map,
       map,
       mapi];
   runtime.caml_register_global(5, Cstruct_cap, "Cstruct_cap");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
