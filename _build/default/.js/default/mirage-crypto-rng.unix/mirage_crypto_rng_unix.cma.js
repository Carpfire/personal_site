// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Mirage_crypto_rng_unix
//# unitInfo: Requires: Logs, Mirage_crypto_rng, Stdlib__Atomic, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Mirage_crypto_rng_default_ =
      "Mirage_crypto_rng.default_generator has already been set, check that this call is intentional",
    cst_Mirage_crypto_rng_unix_ini =
      "Mirage_crypto_rng_unix.initialize has already been called, ignoring this call.",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Mirage_crypto_rng = global_data.Mirage_crypto_rng,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Logs = global_data.Logs,
    src =
      caml_call2
       (Logs[7][1], [0, "Mirage crypto RNG Unix"], "mirage-crypto-rng.unix"),
    Log = caml_call1(Logs[18], src),
    _b_ =
      [0,
       [11, cst_Mirage_crypto_rng_default_, 0],
       cst_Mirage_crypto_rng_default_],
    _a_ =
      [0,
       [11, cst_Mirage_crypto_rng_unix_ini, 0],
       cst_Mirage_crypto_rng_unix_ini],
    cst_getrandom = "getrandom";
   function getrandom(size){
    var buf = runtime.caml_create_bytes(size);
    runtime.mc_getrandom(buf, size);
    return caml_call1(Stdlib_Bytes[44], buf);
   }
   function getrandom_init(i){
    var data = getrandom(128);
    return caml_call2(Mirage_crypto_rng[3][12], i, data);
   }
   var running = caml_call1(Stdlib_Atomic[1], 0);
   function initialize(g, rng){
    if(caml_call1(Stdlib_Atomic[2], running)){
     var _c_ = function(m){return caml_call3(m, 0, 0, _a_);};
     return caml_call1(Log[6], _c_);
    }
    try{
     caml_call1(Mirage_crypto_rng[7], 0);
     var _h_ = function(m){return caml_call3(m, 0, 0, _b_);};
     caml_call1(Log[4], _h_);
    }
    catch(_i_){
     var _d_ = caml_wrap_exception(_i_);
     if(_d_ !== Mirage_crypto_rng[2])
      throw caml_maybe_attach_backtrace(_d_, 0);
    }
    caml_call2(Stdlib_Atomic[3], running, 1);
    var
     init =
       [0,
        Mirage_crypto_rng[3][6],
        [0,
         Mirage_crypto_rng[3][4],
         [0, Mirage_crypto_rng[3][6], [0, getrandom_init, 0]]]];
    function _e_(i, f){return caml_call1(f, i);}
    var
     _f_ = caml_call2(Stdlib_List[21], _e_, init),
     seed = caml_call1(caml_call1(Stdlib_String[7], cst), _f_);
    caml_call1(Mirage_crypto_rng[3][3], cst_getrandom);
    var _g_ = caml_call5(Mirage_crypto_rng[6], g, [0, seed], 0, 0, rng);
    return caml_call1(Mirage_crypto_rng[8], _g_);
   }
   var Mirage_crypto_rng_unix = [0, initialize, getrandom];
   runtime.caml_register_global
    (12, Mirage_crypto_rng_unix, "Mirage_crypto_rng_unix");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtaXJhZ2VfY3J5cHRvX3JuZ191bml4LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzcmMiLCJnZXRyYW5kb20iLCJzaXplIiwiYnVmIiwiZ2V0cmFuZG9tX2luaXQiLCJpIiwiZGF0YSIsInJ1bm5pbmciLCJpbml0aWFsaXplIiwiZyIsInJuZyIsIm0iLCJpbml0IiwiZiIsInNlZWQiXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9taXJhZ2UtY3J5cHRvLXJuZy91bml4L21pcmFnZV9jcnlwdG9fcm5nX3VuaXgubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7R0FFVTs7Ozs7Ozs7O0lBQU5BO01BQU07O0lBQ1EsTUFBQSxxQkFEZEE7Ozs7Ozs7Ozs7WUFLQUMsVUFBVUM7SUFDRixJQUFOQyxNQUFNLDBCQURFRDtJQUVaLHFCQURJQyxLQURRRDtJQUVaLE9BQUEsNkJBRElDO0dBRXNCO1lBRXhCQyxlQUFlQztJQUNOLElBQVBDLE9BTkZMO0lBT0YsT0FBQSxxQ0FGaUJJLEdBQ2JDO0dBQ2lCO0dBRVQsSUFBVkMsVUFBVTtZQUVWQyxXQUFxQkMsR0FBR0M7SUFDMUIsR0FBRyw2QkFIREg7S0FJQSxtQkFDT0ksR0FBSyxPQUFBLFdBQUxBLGNBQzRCO0tBRGpDLE9BQUE7O0lBRUM7S0FFUTtLQUFBLG1CQUNNQSxHQUFLLE9BQUEsV0FBTEEsY0FDc0Q7S0FEcEU7Ozs7Ozs7SUFJSCw2QkFkQUo7SUFpQlk7S0FETks7Ozs7OzBDQXBCTlI7aUJBdUJpQkMsR0FBRVEsR0FBSyxPQUFBLFdBQUxBLEdBQUZSLEdBQVU7SUFBekI7S0FBQSxNQUFBLGlDQUhJTztLQURGRSxPQUlGLFdBQW1DO0lBRTdCO0lBQ2MsVUFBQSxpQ0FwQkRMLE9BYWpCSyxhQWJvQko7SUFvQkYsT0FBQTtHQUNyQjtvQ0FyQkRGLFlBWEFQOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIE1pcmFnZV9jcnlwdG9fcm5nXG5cbmxldCBzcmMgPSBMb2dzLlNyYy5jcmVhdGUgXCJtaXJhZ2UtY3J5cHRvLXJuZy51bml4XCIgfmRvYzpcIk1pcmFnZSBjcnlwdG8gUk5HIFVuaXhcIlxubW9kdWxlIExvZyA9ICh2YWwgTG9ncy5zcmNfbG9nIHNyYyA6IExvZ3MuTE9HKVxuXG5leHRlcm5hbCBnZXRyYW5kb21fYnVmIDogYnl0ZXMgLT4gaW50IC0+IHVuaXQgPSBcIm1jX2dldHJhbmRvbVwiIFtAQG5vYWxsb2NdXG5cbmxldCBnZXRyYW5kb20gc2l6ZSA9XG4gIGxldCBidWYgPSBCeXRlcy5jcmVhdGUgc2l6ZSBpblxuICBnZXRyYW5kb21fYnVmIGJ1ZiBzaXplO1xuICBCeXRlcy51bnNhZmVfdG9fc3RyaW5nIGJ1ZlxuXG5sZXQgZ2V0cmFuZG9tX2luaXQgaSA9XG4gIGxldCBkYXRhID0gZ2V0cmFuZG9tIDEyOCBpblxuICBFbnRyb3B5LmhlYWRlciBpIGRhdGFcblxubGV0IHJ1bm5pbmcgPSBBdG9taWMubWFrZSBmYWxzZVxuXG5sZXQgaW5pdGlhbGl6ZSAodHlwZSBhKSA/ZyAocm5nIDogYSBnZW5lcmF0b3IpID1cbiAgaWYgQXRvbWljLmdldCBydW5uaW5nIHRoZW5cbiAgICBMb2cuZGVidWdcbiAgICAgIChmdW4gbSAtPiBtIFwiTWlyYWdlX2NyeXB0b19ybmdfdW5peC5pbml0aWFsaXplIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkLCBcXFxuICAgICAgICAgICAgICAgICAgIGlnbm9yaW5nIHRoaXMgY2FsbC5cIilcbiAgZWxzZSBiZWdpblxuICAgICh0cnlcbiAgICAgICBsZXQgXyA9IGRlZmF1bHRfZ2VuZXJhdG9yICgpIGluXG4gICAgICAgTG9nLndhcm4gKGZ1biBtIC0+IG0gXCJNaXJhZ2VfY3J5cHRvX3JuZy5kZWZhdWx0X2dlbmVyYXRvciBoYXMgYWxyZWFkeSBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIHNldCwgY2hlY2sgdGhhdCB0aGlzIGNhbGwgaXMgaW50ZW50aW9uYWxcIik7XG4gICAgIHdpdGhcbiAgICAgICBOb19kZWZhdWx0X2dlbmVyYXRvciAtPiAoKSk7XG4gICAgQXRvbWljLnNldCBydW5uaW5nIHRydWUgO1xuICAgIGxldCBzZWVkID1cbiAgICAgIGxldCBpbml0ID1cbiAgICAgICAgRW50cm9weS5bIGJvb3RzdHJhcCA7IHdoaXJsd2luZF9ib290c3RyYXAgOyBib290c3RyYXAgOyBnZXRyYW5kb21faW5pdCBdXG4gICAgICBpblxuICAgICAgTGlzdC5tYXBpIChmdW4gaSBmIC0+IGYgaSkgaW5pdCB8PiBTdHJpbmcuY29uY2F0IFwiXCJcbiAgICBpblxuICAgIGxldCBfID0gRW50cm9weS5yZWdpc3Rlcl9zb3VyY2UgXCJnZXRyYW5kb21cIiBpblxuICAgIHNldF9kZWZhdWx0X2dlbmVyYXRvciAoY3JlYXRlID9nIH5zZWVkIHJuZylcbiAgZW5kXG4iXX0=
