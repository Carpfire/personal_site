// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Duration
//# unitInfo: Requires: Stdlib, Stdlib__Format, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_negative$7 = "negative",
    cst_out_of_range$7 = "out of range",
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_mod = runtime.caml_int64_mod,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_float = runtime.caml_int64_to_float,
    caml_lessthan = runtime.caml_lessthan;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    hour = runtime.caml_int64_create_lo_mi_hi(12099584, 214576, 0),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    _C_ = [0, [4, 0, 0, 0, [12, 97, [4, 0, 0, 0, [12, 100, 0]]]], "%da%dd"],
    _D_ =
      [0,
       [4, 0, 0, 0, [12, 100, [4, 0, [0, 2, 2], 0, [12, 104, 0]]]],
       "%dd%02dh"],
    _E_ =
      [0,
       [4, 0, 0, 0, [12, 104, [4, 0, [0, 2, 2], 0, [12, 109, 0]]]],
       "%dh%02dm"],
    _F_ =
      [0,
       [4, 0, 0, 0, [12, 109, [4, 0, [0, 2, 2], 0, [12, 115, 0]]]],
       "%dm%02ds"],
    _G_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _H_ =
      [0,
       [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 3], 0, [12, 115, 0]]]],
       "%Ld.%03Lds"],
    _I_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _J_ =
      [0,
       [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 3], 0, [11, "ms", 0]]]],
       "%Ld.%03Ldms"],
    _K_ =
      [0,
       [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 3], 0, [11, "\xce\xbcs", 0]]]],
       "%Ld.%03Ld\xce\xbcs"],
    _B_ = runtime.caml_int64_create_lo_mi_hi(4675584, 3576, 0),
    _A_ = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    _z_ = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    _y_ = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    _x_ = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    _w_ = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    _v_ = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    cst_value_too_big_for_this_pla = "value too big for this platform",
    _t_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _u_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _r_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _s_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    cst_negative$6 = cst_negative$7,
    cst_out_of_range$6 = cst_out_of_range$7,
    _q_ = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    cst_negative$5 = cst_negative$7,
    _p_ = runtime.caml_int64_create_lo_mi_hi(584, 0, 0),
    cst_out_of_range$5 = cst_out_of_range$7,
    cst_negative$4 = cst_negative$7,
    _n_ = runtime.caml_int64_create_lo_mi_hi(213503, 0, 0),
    cst_out_of_range$4 = cst_out_of_range$7,
    cst_negative$3 = cst_negative$7,
    _l_ = runtime.caml_int64_create_lo_mi_hi(5124095, 0, 0),
    cst_out_of_range$3 = cst_out_of_range$7,
    cst_negative$2 = cst_negative$7,
    _j_ = runtime.caml_int64_create_lo_mi_hi(5455846, 18, 0),
    cst_out_of_range$2 = cst_out_of_range$7,
    _k_ = runtime.caml_int64_create_lo_mi_hi(4675584, 3576, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_negative$1 = cst_negative$7,
    _h_ = runtime.caml_int64_create_lo_mi_hi(8583689, 1099, 0),
    cst_out_of_range$1 = cst_out_of_range$7,
    _i_ = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_negative$0 = cst_negative$7,
    _e_ = runtime.caml_int64_create_lo_mi_hi(10532333, 1099511, 0),
    cst_out_of_range$0 = cst_out_of_range$7,
    _f_ = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_negative = cst_negative$7,
    _b_ = runtime.caml_int64_create_lo_mi_hi(13019117, 8992587, 65),
    cst_out_of_range = cst_out_of_range$7,
    _c_ = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    _m_ = runtime.caml_int64_create_lo_mi_hi(24, 0, 0),
    _o_ = runtime.caml_int64_create_lo_mi_hi(8766, 0, 0);
   function of_us_64(m){
    if(caml_lessthan(m, _a_)) caml_call1(Stdlib[1], cst_negative);
    if(1 === caml_call2(Stdlib_Int64[15], m, _b_))
     caml_call1(Stdlib[1], cst_out_of_range);
    return caml_int64_mul(_c_, m);
   }
   function of_us(m){return of_us_64(caml_int64_of_int32(m));}
   function of_ms_64(m){
    if(caml_lessthan(m, _d_)) caml_call1(Stdlib[1], cst_negative$0);
    if(1 === caml_call2(Stdlib_Int64[15], m, _e_))
     caml_call1(Stdlib[1], cst_out_of_range$0);
    return caml_int64_mul(_f_, m);
   }
   function of_ms(m){return of_ms_64(caml_int64_of_int32(m));}
   function of_sec_64(s){
    if(caml_lessthan(s, _g_)) caml_call1(Stdlib[1], cst_negative$1);
    if(1 === caml_call2(Stdlib_Int64[15], s, _h_))
     caml_call1(Stdlib[1], cst_out_of_range$1);
    return caml_int64_mul(_i_, s);
   }
   function of_sec(m){return of_sec_64(caml_int64_of_int32(m));}
   function of_min(m){
    if(m < 0) caml_call1(Stdlib[1], cst_negative$2);
    var m$0 = caml_int64_of_int32(m);
    if(1 === caml_call2(Stdlib_Int64[15], m$0, _j_))
     caml_call1(Stdlib[1], cst_out_of_range$2);
    return caml_int64_mul(_k_, m$0);
   }
   function of_hour(h){
    if(h < 0) caml_call1(Stdlib[1], cst_negative$3);
    var h$0 = caml_int64_of_int32(h);
    if(1 === caml_call2(Stdlib_Int64[15], h$0, _l_))
     caml_call1(Stdlib[1], cst_out_of_range$3);
    return caml_int64_mul(hour, h$0);
   }
   var day = caml_int64_mul(_m_, hour);
   function of_day(d){
    if(d < 0) caml_call1(Stdlib[1], cst_negative$4);
    var d$0 = caml_int64_of_int32(d);
    if(1 === caml_call2(Stdlib_Int64[15], d$0, _n_))
     caml_call1(Stdlib[1], cst_out_of_range$4);
    return caml_int64_mul(day, d$0);
   }
   var year = caml_int64_mul(_o_, hour);
   function of_year(y){
    if(y < 0) caml_call1(Stdlib[1], cst_negative$5);
    var y$0 = caml_int64_of_int32(y);
    if(1 === caml_call2(Stdlib_Int64[15], y$0, _p_))
     caml_call1(Stdlib[1], cst_out_of_range$5);
    return caml_int64_mul(year, y$0);
   }
   function of_f(f){
    if(f < 0.) caml_call1(Stdlib[1], cst_negative$6);
    if(18446744073.70955 < f) caml_call1(Stdlib[1], cst_out_of_range$6);
    var
     s = caml_int64_of_float(f),
     rem = f - caml_int64_to_float(s),
     ns = caml_int64_of_float(rem * 1000000000.);
    return caml_int64_add(caml_int64_mul(_q_, s), ns);
   }
   function to_f(t){
    var
     pl =
       runtime.caml_greaterequal(t, _r_)
        ? 0.
        : Math.abs(2. * caml_int64_to_float(_s_)),
     ns = caml_int64_to_float(t);
    return (ns + pl) / 1000000000.;
   }
   function to_int64(t, d){
    function f(c){return runtime.caml_int64_div(c, d);}
    if(! caml_lessthan(t, _t_)) return f(t);
    var _L_ = caml_int64_add(f(Stdlib_Int64[9]), _u_);
    return caml_int64_add(f(caml_int64_add(t, Stdlib_Int64[10])), _L_);
   }
   function to_int(t, d){
    var r = to_int64(t, d);
    if(caml_greaterthan(r, caml_int64_of_int32(Stdlib[19])))
     caml_call1(Stdlib[1], cst_value_too_big_for_this_pla);
    return runtime.caml_int64_to_int32(r);
   }
   function to_us_64(t){return to_int64(t, _v_);}
   function to_us(t){return to_int(t, _w_);}
   function to_ms_64(t){return to_int64(t, _x_);}
   function to_ms(t){return to_int(t, _y_);}
   function to_sec_64(t){return to_int64(t, _z_);}
   function to_sec(t){return to_int(t, _A_);}
   function to_min(t){return to_int(t, _B_);}
   function to_hour(t){return to_int(t, hour);}
   function to_day(t){return to_int(t, day);}
   function to_year(t){return to_int(t, year);}
   function pp(ppf, t){
    var min = to_min(t);
    if(0 >= min){
     var
      sec = to_sec_64(t),
      left = caml_int64_sub(t, of_sec_64(sec)),
      ms = to_ms_64(left),
      left$0 = caml_int64_sub(left, of_ms_64(ms)),
      us = to_us_64(left$0),
      ns = caml_int64_sub(left$0, of_us_64(us));
     return caml_greaterthan(sec, _G_)
             ? caml_call4(Stdlib_Format[137], ppf, _H_, sec, ms)
             : caml_greaterthan
                (ms, _I_)
               ? caml_call4(Stdlib_Format[137], ppf, _J_, ms, us)
               : caml_call4(Stdlib_Format[137], ppf, _K_, us, ns);
    }
    var
     y = to_year(t),
     left$1 = caml_int64_mod(t, year),
     d = to_day(left$1),
     left$2 = caml_int64_mod(left$1, day);
    if(0 < y) return caml_call4(Stdlib_Format[137], ppf, _C_, y, d);
    var h = to_hour(left$2), left$3 = caml_int64_mod(left$2, hour);
    if(0 < d) return caml_call4(Stdlib_Format[137], ppf, _D_, d, h);
    var
     min$0 = to_min(left$3),
     left$4 = caml_int64_sub(t, of_min(min$0)),
     sec$0 = to_sec(left$4);
    return 0 < h
            ? caml_call4(Stdlib_Format[137], ppf, _E_, h, min$0)
            : caml_call4(Stdlib_Format[137], ppf, _F_, min$0, sec$0);
   }
   var
    Duration =
      [0,
       pp,
       of_us,
       of_us_64,
       of_ms,
       of_ms_64,
       of_sec,
       of_sec_64,
       of_min,
       of_hour,
       of_day,
       of_year,
       of_f,
       to_us,
       to_us_64,
       to_ms,
       to_ms_64,
       to_sec,
       to_sec_64,
       to_min,
       to_hour,
       to_day,
       to_year,
       to_f];
   runtime.caml_register_global(64, Duration, "Duration");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
