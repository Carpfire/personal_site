// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_log_types__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_log_types = [0],
    Ppx_log_types$0 = [0, Ppx_log_types];
   runtime.caml_register_global(0, Ppx_log_types$0, "Ppx_log_types__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Import
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib, Stdio
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio;
   caml_call1(Ppx_expect_runtime[1][1], "types/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types, "import.ml");
   var
    stdin = Stdio[1],
    stdout = Stdio[2],
    stderr = Stdio[3],
    printf = Stdio[4],
    print_s = Stdio[5],
    eprint_s = Stdio[6],
    eprintf = Stdio[7],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Import =
      [0,
       stdin,
       stdout,
       stderr,
       printf,
       print_s,
       eprint_s,
       eprintf,
       print_string,
       print_endline,
       prerr_endline];
   runtime.caml_register_global
    (7, Ppx_log_types_Import, "Ppx_log_types__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Jsonaf
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/jsonaf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "jsonaf.ml");
   var
    _b_ = [0, "True"],
    _c_ = [0, "False"],
    _a_ = [0, "Null"],
    _d_ = [0, "Array"],
    _e_ = [0, "Number"],
    _f_ = [0, "Object"],
    _g_ = [0, "String"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    if(typeof param === "number")
     return 870828711 === param ? _a_ : 937218926 <= param ? _b_ : _c_;
    var _h_ = param[1];
    if(-703661335 <= _h_){
     if(951901561 <= _h_){
      var v_008 = param[2];
      return [1, [0, _d_, [0, caml_call2(Base[165], sexp_of_t, v_008), 0]]];
     }
     var v_002 = param[2];
     return [1, [0, _e_, [0, caml_call1(Base[202], v_002), 0]]];
    }
    if(-908856609 <= _h_){
     var
      v_003 = param[2],
      _i_ = 0,
      _j_ =
        function(param){
         var
          arg1_005 = param[2],
          arg0_004 = param[1],
          res0_006 = caml_call1(Base[202], arg0_004),
          res1_007 = sexp_of_t(arg1_005);
         return [1, [0, res0_006, [0, res1_007, 0]]];
        };
     return [1, [0, _f_, [0, caml_call2(Base[165], _j_, v_003), _i_]]];
    }
    var v_001 = param[2];
    return [1, [0, _g_, [0, caml_call1(Base[202], v_001), 0]]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Jsonaf = [0, sexp_of_t];
   runtime.caml_register_global
    (14, Ppx_log_types_Jsonaf, "Ppx_log_types__Jsonaf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Tag_data
//# unitInfo: Requires: Base, Base__Bool, Base__Char, Base__Float, Base__Int, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Jsonaf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Int = global_data.Base__Int,
    Base_Char = global_data.Base__Char,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base = global_data.Base,
    Ppx_log_types_Jsonaf = global_data.Ppx_log_types__Jsonaf,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/tag_data.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "tag_data.ml");
   var
    _a_ = [0, "Int"],
    _b_ = [0, "Char"],
    _c_ = [0, "Float"],
    _d_ = [0, "String"],
    _e_ = [0, "Bool"],
    _f_ = [0, "Sexp"],
    _g_ = [0, "Json"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_001 = param[1], res0_002 = caml_call1(Base[136], arg0_001);
       return [1, [0, _a_, [0, res0_002, 0]]];
      case 1:
       var arg0_003 = param[1], res0_004 = caml_call1(Base[115], arg0_003);
       return [1, [0, _b_, [0, res0_004, 0]]];
      case 2:
       var arg0_005 = param[1], res0_006 = caml_call1(Base[126], arg0_005);
       return [1, [0, _c_, [0, res0_006, 0]]];
      case 3:
       var arg0_007 = param[1], res0_008 = caml_call1(Base[202], arg0_007);
       return [1, [0, _d_, [0, res0_008, 0]]];
      case 4:
       var arg0_009 = param[1], res0_010 = caml_call1(Base[105], arg0_009);
       return [1, [0, _e_, [0, res0_010, 0]]];
      case 5:
       var arg0_011 = param[1], res0_012 = caml_call1(Base[85][5], arg0_011);
       return [1, [0, _f_, [0, res0_012, 0]]];
      default:
       var
        arg0_013 = param[1],
        res0_014 = caml_call1(Ppx_log_types_Jsonaf[1], arg0_013);
       return [1, [0, _g_, [0, res0_014, 0]]];
    }
   }
   var With_type_label = [0, sexp_of_t];
   function sexp_of_t$0(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Base[136], x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base[115], x$0);
      case 2:
       var x$1 = param[1]; return caml_call1(Base[126], x$1);
      case 3:
       var x$2 = param[1]; return caml_call1(Base[202], x$2);
      case 4:
       var x$3 = param[1]; return caml_call1(Base[105], x$3);
      case 5:
       var x$4 = param[1]; return x$4;
      default:
       var x$5 = param[1]; return caml_call1(Ppx_log_types_Jsonaf[1], x$5);
    }
   }
   function to_string(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Base_Int[12], x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base_Char[9], x$0);
      case 2:
       var x$1 = param[1]; return caml_call1(Base_Float[101], x$1);
      case 3:
       var x$2 = param[1]; return x$2;
      case 4:
       var x$3 = param[1]; return caml_call1(Base_Bool[9], x$3);
      case 5:
       var x$4 = param[1]; return caml_call1(Base[85][16], x$4);
      default:
       var x$5 = param[1], _h_ = caml_call1(Ppx_log_types_Jsonaf[1], x$5);
       return caml_call1(Base[85][16], _h_);
    }
   }
   var Without_type_label = [0, sexp_of_t$0, to_string];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Tag_data = [0, Without_type_label, With_type_label];
   runtime.caml_register_global
    (34, Ppx_log_types_Tag_data, "Ppx_log_types__Tag_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Level
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/level.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "level.ml");
   var
    _b_ = [0, "Info"],
    _c_ = [0, "Debug"],
    _a_ = [0, "Error"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    return 106380200 === param ? _a_ : 815031438 <= param ? _b_ : _c_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Level = [0, sexp_of_t];
   runtime.caml_register_global
    (9, Ppx_log_types_Level, "Ppx_log_types__Level");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Log_tag
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Tag_data
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_log_types_Tag_data = global_data.Ppx_log_types__Tag_data,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/log_tag.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "log_tag.ml");
   var
    _a_ = [0, "data"],
    _b_ = [0, "name"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function of_pair(param){
    var data = param[2], name = param[1];
    return [0, name, data];
   }
   function string_pair(param){
    var data = param[2], name = param[1];
    return [0, name, [3, data]];
   }
   function sexp_of_t(param){
    var
     data_004 = param[2],
     name_002 = param[1],
     arg_005 = caml_call1(Ppx_log_types_Tag_data[2][1], data_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Base[202], name_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   var Verbose = [0, sexp_of_t];
   function sexp_of_t$0(param){
    var name = param[1];
    if(runtime.caml_string_notequal(name, "")){
     var
      data = param[2],
      _c_ = [0, caml_call1(Ppx_log_types_Tag_data[1][1], data), 0];
     return [1, [0, caml_call1(Base[202], name), _c_]];
    }
    var data$0 = param[2];
    return caml_call1(Ppx_log_types_Tag_data[1][1], data$0);
   }
   var For_message_sexp = [0, sexp_of_t$0];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Log_tag =
      [0, of_pair, string_pair, Verbose, For_message_sexp];
   runtime.caml_register_global
    (11, Ppx_log_types_Log_tag, "Ppx_log_types__Log_tag");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_sexp
//# unitInfo: Requires: Base, Base__List, Base__Option, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Log_tag
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    bnd_013 = [1, [0, [0, "legacy_render_with_additional_parentheses"], 0]],
    Ppx_log_types_Log_tag = global_data.Ppx_log_types__Log_tag,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/message_sexp.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_sexp.ml");
   var
    _d_ = [0, "tags"],
    _e_ = [0, "label"],
    _c_ = [1, 0],
    _a_ = [0, "String"],
    _b_ = [0, "String_literal"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function tags(r){return r[2];}
   function label(r){return r[1];}
   function create(opt, label, tags){
    if(opt)
     var sth = opt[1], legacy_render_with_additional_ = sth;
    else
     var legacy_render_with_additional_ = 0;
    return [0, label, tags, legacy_render_with_additional_];
   }
   function render(param){
    var
     legacy_render_with_additional_ = param[3],
     tags = param[2],
     label = param[1];
    function _f_(param){var str = param[1]; return [0, str];}
    var
     label$0 = caml_call2(Base_Option[24], label, _f_),
     multiple_tags =
       caml_call2(Base_List[53], tags, Ppx_log_types_Log_tag[4][1]);
    if(label$0){
     var message = label$0[1];
     return multiple_tags
             ? legacy_render_with_additional_
               ? [1, [0, message, [0, [1, multiple_tags], 0]]]
               : [1, [0, message, multiple_tags]]
             : message;
    }
    if(! multiple_tags) return _c_;
    if(multiple_tags[2]) return [1, multiple_tags];
    var tag = multiple_tags[1];
    return legacy_render_with_additional_ ? [1, [0, tag, 0]] : tag;
   }
   function sexp_of_t(param){
    var
     legacy_render_with_additional_ = param[3],
     tags_010 = param[2],
     label_006 = param[1],
     bnds_005 = 0,
     bnds_005$0 =
       legacy_render_with_additional_ ? [0, bnd_013, bnds_005] : bnds_005,
     arg_011 = caml_call2(Base[165], Ppx_log_types_Log_tag[3][1], tags_010),
     bnds_005$1 = [0, [1, [0, _d_, [0, arg_011, 0]]], bnds_005$0];
    if(label_006){
     var v_007 = label_006[1];
     if(0 === v_007[0])
      var
       arg0_001 = v_007[1],
       res0_002 = caml_call1(Base[202], arg0_001),
       arg_009 = [1, [0, _a_, [0, res0_002, 0]]];
     else
      var
       arg0_003 = v_007[1],
       res0_004 = caml_call1(Base[202], arg0_003),
       arg_009 = [1, [0, _b_, [0, res0_004, 0]]];
     var
      bnd_008 = [1, [0, _e_, [0, arg_009, 0]]],
      bnds_005$2 = [0, bnd_008, bnds_005$1];
    }
    else
     var bnds_005$2 = bnds_005$1;
    return [1, bnds_005$2];
   }
   var Unstable = [0, sexp_of_t];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Message_sexp =
      [0, [0], create, label, tags, render, Unstable];
   runtime.caml_register_global
    (19, Ppx_log_types_Message_sexp, "Ppx_log_types__Message_sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_data
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Message_sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_log_types_Message_sexp = global_data.Ppx_log_types__Message_sexp,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/message_data.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_data.ml");
   var
    _b_ = [0, "Sexp"],
    _c_ = [0, "String"],
    _a_ = [0, "Structured"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    var _d_ = param[1];
    if(348871921 === _d_){
     var v_003 = param[2];
     return [1,
             [0,
              _a_,
              [0, caml_call1(Ppx_log_types_Message_sexp[6][1], v_003), 0]]];
    }
    if(925483562 <= _d_){
     var v_001 = param[2];
     return [1, [0, _b_, [0, caml_call1(Base[85][5], v_001), 0]]];
    }
    var v_002 = param[2];
    return [1, [0, _c_, [0, caml_call1(Base[202], v_002), 0]]];
   }
   var Unstable = [0, sexp_of_t];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Message_data = [0, Unstable];
   runtime.caml_register_global
    (11, Ppx_log_types_Message_data, "Ppx_log_types__Message_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_source
//# unitInfo: Requires: Base, Base__String, Expect_test_config, Inline_test_config, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_log_types__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lib_name$0 = "Lib_name",
    cst_Ppx_log_types_Message_sour$0 = "Ppx_log_types__Message_source",
    cst_ppx_log_types$0 = "ppx_log_types",
    cst_types_message_source_ml$0 = "types/message_source.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "__",
    Ppx_log_types_Import = global_data.Ppx_log_types__Import,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_expect_runtime[1][1], cst_types_message_source_ml$0);
   caml_call2
    (Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_source.ml");
   var
    cst_Ppx_log_types_Message_sour = cst_Ppx_log_types_Message_sour$0,
    cst_Lib_name = cst_Lib_name$0,
    cst_Lib_name2_module_name = "Lib_name2__module_name",
    cst_Lib_name3_module_name_more = "Lib_name3__module_name__more_stuff",
    _d_ = [0, "Manually_constructed"],
    _e_ = [0, "Code"],
    _a_ = [0, "library_name"],
    _b_ = [0, "pos_lnum"],
    _c_ = [0, "pos_fname"],
    _g_ = [0, [0, [0, "Ppx_log_types", 0], [0, 585, 598, 613]]],
    _h_ = [0, 585, 589, 614],
    _k_ = [0, [0, [0, cst_Lib_name$0, 0], [0, 668, 681, 691]]],
    _l_ = [0, 668, 672, 692],
    _o_ = [0, [0, [0, "Lib_name2", 0], [0, 760, 773, 784]]],
    _p_ = [0, 760, 764, 785],
    _s_ = [0, [0, [0, "Lib_name3", 0], [0, 865, 878, 889]]],
    _t_ = [0, 865, 869, 890],
    _w_ = [0, "libname_from_module_name example"],
    _z_ = [0, 471, 473, 890],
    _A_ = [0, 865, 890, 890],
    _B_ = [0, 471, 473, 890],
    cst_types_message_source_ml = cst_types_message_source_ml$0,
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    if(0 === param[0]){
     var arg0_008 = param[1], res0_009 = caml_call1(Base[202], arg0_008);
     return [1, [0, _d_, [0, res0_009, 0]]];
    }
    var
     arg0_010 = param[1],
     library_name_006 = arg0_010[3],
     pos_lnum_004 = arg0_010[2],
     pos_fname_002 = arg0_010[1],
     arg_007 = caml_call1(Base[202], library_name_006),
     bnds_001 = [0, [1, [0, _a_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Base[136], pos_lnum_004),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001],
     arg_003 = caml_call1(Base[202], pos_fname_002),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$0],
     res0_011 = [1, bnds_001$1];
    return [1, [0, _e_, [0, res0_011, 0]]];
   }
   function libname(module_name){
    var match = caml_call3(Base_String[87], 0, module_name, cst);
    if(! match) return module_name;
    var idx = match[1];
    return caml_call3(Base_String[3], module_name, 0, idx);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _f_ =
       function(param){
        var _C_ = libname(cst_Ppx_log_types_Message_sour);
        caml_call1(Ppx_log_types_Import[8], _C_);
        var _D_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _D_);
        var _E_ = libname(cst_Lib_name);
        caml_call1(Ppx_log_types_Import[8], _E_);
        var _F_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _F_);
        var _G_ = libname(cst_Lib_name2_module_name);
        caml_call1(Ppx_log_types_Import[8], _G_);
        var _H_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        caml_call1(Ppx_expect_test_block[2], _H_);
        var _I_ = libname(cst_Lib_name3_module_name_more);
        caml_call1(Ppx_log_types_Import[8], _I_);
        var _J_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _J_);
       },
     _i_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _h_,
         _g_),
     _j_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _i_], 0],
     _m_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _l_,
         _k_),
     _n_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _m_], _j_],
     _q_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _p_,
         _o_),
     _r_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _q_], _n_],
     _u_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _t_,
         _s_),
     _v_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _u_], _r_],
     _x_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_types_message_source_ml,
      25,
      _B_,
      _A_,
      _z_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _y_,
      _x_,
      _w_,
      0,
      Inline_test_config,
      _v_,
      _f_);
   }
   function code(pos_fname, pos_lnum, module_name){
    return [1, [0, pos_fname, pos_lnum, libname(module_name)]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Message_source = [0, [0], sexp_of_t, [0, code]];
   runtime.caml_register_global
    (37, Ppx_log_types_Message_source, cst_Ppx_log_types_Message_sour$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/ppx_log_types.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types, "ppx_log_types.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types = [0];
   runtime.caml_register_global(7, Ppx_log_types, "Ppx_log_types");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
