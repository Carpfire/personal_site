// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Typed_variants_lib__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Typed_variants_lib = [0],
    Typed_variants_lib$0 = [0, Typed_variants_lib];
   runtime.caml_register_global
    (0, Typed_variants_lib$0, "Typed_variants_lib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_variants_lib__Typed_variants_lib_intf
//# unitInfo: Requires: Base__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List;
   function S_of_S1(M, T){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     create = M[8],
     Type_ids = caml_call1(M[5], T);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _x_ = m_of_packed(b), _y_ = m_of_packed(a);
     return caml_call2(M[6][1], _y_, _x_);
    }
    function equal(a, b){
     var _v_ = m_of_packed(b), _w_ = m_of_packed(a);
     return caml_call2(M[6][2], _w_, _v_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _u_ = m_of_packed(t);
     return caml_call1(M[6][3], _u_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    function which(t){return packed_of_m(caml_call1(M[9], t));}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            create,
            which];
   }
   function S_of_S2(M, T1, T2){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     create = M[8],
     Type_ids = caml_call1(caml_call1(M[5], T1), T2);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _s_ = m_of_packed(b), _t_ = m_of_packed(a);
     return caml_call2(M[6][1], _t_, _s_);
    }
    function equal(a, b){
     var _q_ = m_of_packed(b), _r_ = m_of_packed(a);
     return caml_call2(M[6][2], _r_, _q_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _p_ = m_of_packed(t);
     return caml_call1(M[6][3], _p_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    function which(t){return packed_of_m(caml_call1(M[9], t));}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            create,
            which];
   }
   function S_of_S3(M, T1, T2, T3){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     create = M[8],
     Type_ids = caml_call1(caml_call1(caml_call1(M[5], T1), T2), T3);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _n_ = m_of_packed(b), _o_ = m_of_packed(a);
     return caml_call2(M[6][1], _o_, _n_);
    }
    function equal(a, b){
     var _l_ = m_of_packed(b), _m_ = m_of_packed(a);
     return caml_call2(M[6][2], _m_, _l_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _k_ = m_of_packed(t);
     return caml_call1(M[6][3], _k_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    function which(t){return packed_of_m(caml_call1(M[9], t));}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            create,
            which];
   }
   function S_of_S4(M, T1, T2, T3, T4){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     create = M[8],
     Type_ids =
       caml_call1(caml_call1(caml_call1(caml_call1(M[5], T1), T2), T3), T4);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _i_ = m_of_packed(b), _j_ = m_of_packed(a);
     return caml_call2(M[6][1], _j_, _i_);
    }
    function equal(a, b){
     var _g_ = m_of_packed(b), _h_ = m_of_packed(a);
     return caml_call2(M[6][2], _h_, _g_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _f_ = m_of_packed(t);
     return caml_call1(M[6][3], _f_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    function which(t){return packed_of_m(caml_call1(M[9], t));}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            create,
            which];
   }
   function S_of_S5(M, T1, T2, T3, T4, T5){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     create = M[8],
     Type_ids =
       caml_call1
        (caml_call1(caml_call1(caml_call1(caml_call1(M[5], T1), T2), T3), T4),
         T5);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _d_ = m_of_packed(b), _e_ = m_of_packed(a);
     return caml_call2(M[6][1], _e_, _d_);
    }
    function equal(a, b){
     var _b_ = m_of_packed(b), _c_ = m_of_packed(a);
     return caml_call2(M[6][2], _c_, _b_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _a_ = m_of_packed(t);
     return caml_call1(M[6][3], _a_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    function which(t){return packed_of_m(caml_call1(M[9], t));}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            create,
            which];
   }
   var
    Typed_variants_lib_Typed_varia =
      [0, S_of_S1, S_of_S2, S_of_S3, S_of_S4, S_of_S5];
   runtime.caml_register_global
    (1,
     Typed_variants_lib_Typed_varia,
     "Typed_variants_lib__Typed_variants_lib_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_variants_lib
//# unitInfo: Requires: Base, Base__Int, Base__List, Typed_fields_lib, Typed_variants_lib__Typed_variants_lib_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_typed_variants_lib_typed_v =
      "typed_variants_lib/typed_variants_lib.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Typed_fields_lib = global_data.Typed_fields_lib,
    Match_failure = global_data.Match_failure,
    Base = global_data.Base,
    Base_Int = global_data.Base__Int,
    Base_List = global_data.Base__List,
    Typed_variants_lib_Typed_varia =
      global_data.Typed_variants_lib__Typed_variants_lib_intf,
    S_of_S1 = Typed_variants_lib_Typed_varia[1],
    S_of_S2 = Typed_variants_lib_Typed_varia[2],
    S_of_S3 = Typed_variants_lib_Typed_varia[3],
    S_of_S4 = Typed_variants_lib_Typed_varia[4],
    S_of_S5 = Typed_variants_lib_Typed_varia[5],
    _j_ = [0, 0],
    _i_ = [0, 0],
    _h_ = [0, 0],
    _g_ = [0, 0],
    _f_ = [0, 0],
    _e_ = [0, 0],
    _d_ = [0, cst_typed_variants_lib_typed_v, 47, 39],
    _c_ = [0, "Nothing has no constructors, so cannot convert to variant."],
    _b_ = [0, cst_typed_variants_lib_typed_v, 34, 6],
    _a_ = [0, cst_typed_variants_lib_typed_v, 8, 25];
   function unreachable_code(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _a_], 1);
   }
   var Type_ids = [0, unreachable_code], names = 0, all = 0;
   function compare(param, _q_){
    var
     x2 = _q_[1],
     x1 = param[1],
     _r_ = unreachable_code(x2),
     _s_ = unreachable_code(x1);
    return caml_call3(Base_List[1], Base_Int[14], _s_, _r_);
   }
   function equal(t1, t2){return 0 === compare(t1, t2) ? 1 : 0;}
   function sexp_of_t(packed){
    throw caml_maybe_attach_backtrace([0, Match_failure, _b_], 1);
   }
   function t_of_sexp(sexp){
    return caml_call1(Base[246], [1, [0, _c_, [0, sexp, 0]]]);
   }
   function which(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _d_], 1);
   }
   var
    _k_ =
      [0,
       names,
       unreachable_code,
       unreachable_code,
       unreachable_code,
       Type_ids,
       [0, t_of_sexp, sexp_of_t, all, compare, equal, unreachable_code],
       unreachable_code,
       unreachable_code,
       which];
   function _l_(T5){
    var
     include = caml_call1(Typed_fields_lib[11], T5),
     names = include[1],
     name = include[2],
     path = include[3],
     ord = include[4],
     Type_ids = include[5],
     Packed = include[6];
    function get(param, t){return [0, t];}
    function create(param, t){return t;}
    function which(param){return _j_;}
    return [0, names, name, path, ord, Type_ids, Packed, get, create, which];
   }
   function _m_(T4){
    var
     include = caml_call1(Typed_fields_lib[10], T4),
     names = include[1],
     name = include[2],
     path = include[3],
     ord = include[4],
     Type_ids = include[5],
     Packed = include[6];
    function get(param, t){return [0, t];}
    function create(param, t){return t;}
    function which(param){return _i_;}
    return [0, names, name, path, ord, Type_ids, Packed, get, create, which];
   }
   function _n_(T3){
    var
     include = caml_call1(Typed_fields_lib[9], T3),
     names = include[1],
     name = include[2],
     path = include[3],
     ord = include[4],
     Type_ids = include[5],
     Packed = include[6];
    function get(param, t){return [0, t];}
    function create(param, t){return t;}
    function which(param){return _h_;}
    return [0, names, name, path, ord, Type_ids, Packed, get, create, which];
   }
   function _o_(T2){
    var
     include = caml_call1(Typed_fields_lib[8], T2),
     names = include[1],
     name = include[2],
     path = include[3],
     ord = include[4],
     Type_ids = include[5],
     Packed = include[6];
    function get(param, t){return [0, t];}
    function create(param, t){return t;}
    function which(param){return _g_;}
    return [0, names, name, path, ord, Type_ids, Packed, get, create, which];
   }
   function _p_(T1){
    var
     include = caml_call1(Typed_fields_lib[7], T1),
     names = include[1],
     name = include[2],
     path = include[3],
     ord = include[4],
     Type_ids = include[5],
     Packed = include[6];
    function get(param, t){return [0, t];}
    function create(param, t){return t;}
    function which(param){return _f_;}
    return [0, names, name, path, ord, Type_ids, Packed, get, create, which];
   }
   var
    Typed_variants_lib =
      [0,
       S_of_S1,
       S_of_S2,
       S_of_S3,
       S_of_S4,
       S_of_S5,
       function(T){
        var
         include = caml_call1(Typed_fields_lib[6], T),
         names = include[1],
         name = include[2],
         path = include[3],
         ord = include[4],
         Type_ids = include[5],
         Packed = include[6];
        function get(param, t){return [0, t];}
        function create(param, t){return t;}
        function which(param){return _e_;}
        return [0,
                names,
                name,
                path,
                ord,
                Type_ids,
                Packed,
                get,
                create,
                which];
       },
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_];
   runtime.caml_register_global(16, Typed_variants_lib, "Typed_variants_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
