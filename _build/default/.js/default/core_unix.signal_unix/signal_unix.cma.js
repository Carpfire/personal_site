// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Signal_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Signal_unix = [0],
    Signal_unix$0 = [0, Signal_unix];
   runtime.caml_register_global(0, Signal_unix$0, "Signal_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Signal_unix__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Signal_unix_Import = "Signal_unix__Import",
    cst_signal_unix = "signal_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Signal_unix_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_signal_unix);
   caml_call1(Ppx_expect_runtime[1][1], "signal_unix/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_signal_unix, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_signal_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Signal_unix_Import);
   var Signal_unix_Import = [0];
   runtime.caml_register_global
    (11, Signal_unix_Import, cst_Signal_unix_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Signal_unix
//# unitInfo: Requires: Caml_unix, Core, Core__Int, Core__List, Core__Pid, Core__Signal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, UnixLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Signal_unix$0 = "Signal_unix",
    cst_signal_unix$0 = "signal_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Signal = global_data.Core__Signal,
    Core_List = global_data.Core__List,
    Caml_unix = global_data.Caml_unix,
    Core = global_data.Core,
    UnixLabels = global_data.UnixLabels,
    Core_Int = global_data.Core__Int,
    Core_Pid = global_data.Core__Pid,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Signal_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_signal_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "signal_unix/src/signal_unix.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_signal_unix$0, "signal_unix.ml");
   var
    _d_ =
      [0,
       [11, "Signal_unix.send_exn ", [2, 0, [11, " pid:", [2, 0, 0]]]],
       "Signal_unix.send_exn %s pid:%s"],
    _a_ = [0, "My_group"],
    _b_ = [0, "Group"],
    _c_ = [0, "Pid"],
    cst_signal_unix = cst_signal_unix$0,
    cst_Signal_unix = cst_Signal_unix$0;
   function of_system_int(t){
    return runtime.ml_nonportable_to_caml_signal_number(t);
   }
   function to_system_int(t){
    return runtime.ml_caml_to_nonportable_signal_number(t);
   }
   function sexp_of_pid_spec(param){
    if(typeof param === "number") return _a_;
    if(757211935 <= param[1]){
     var v_002 = param[2];
     return [1, [0, _b_, [0, caml_call1(Core_Pid[13], v_002), 0]]];
    }
    var v_001 = param[2];
    return [1, [0, _c_, [0, caml_call1(Core_Pid[13], v_001), 0]]];
   }
   function pid_spec_to_int(param){
    if(typeof param === "number") return 0;
    if(757211935 <= param[1]){
     var pid = param[2];
     return - caml_call1(Core_Pid[46], pid) | 0;
    }
    var pid$0 = param[2];
    return caml_call1(Core_Pid[46], pid$0);
   }
   function send(t, pid_spec){
    try{
     var
      _r_ = caml_call1(Core_Signal[41], t),
      _s_ = pid_spec_to_int(pid_spec);
     caml_call2(UnixLabels[95], _s_, _r_);
     var _t_ = 17724;
     return _t_;
    }
    catch(_u_){
     var _p_ = caml_wrap_exception(_u_);
     if(_p_[1] === Caml_unix[1]){
      var _q_ = _p_[2];
      if(typeof _q_ === "number" && 35 === _q_) return -658003819;
     }
     throw caml_maybe_attach_backtrace(_p_, 0);
    }
   }
   function send_i(t, pid_spec){send(t, pid_spec); return 0;}
   function send_exn(t, pid_spec){
    if(17724 <= send(t, pid_spec)) return 0;
    var
     _m_ = pid_spec_to_int(pid_spec),
     _n_ = caml_call1(Core_Int[79], _m_),
     _o_ = caml_call1(Core_Signal[42], t);
    return caml_call4(Core[246], _d_, _o_, _n_, 0);
   }
   function sigprocmask(mode, sigs){
    var
     mode$0 = -18967500 === mode ? 2 : 4150146 <= mode ? 0 : 1,
     _j_ = Core_Signal[40],
     _k_ = caml_call2(Core_List[51], sigs, Core_Signal[41]),
     _l_ = caml_call2(Caml_unix[96], mode$0, _k_);
    return caml_call2(Core_List[51], _l_, _j_);
   }
   function sigpending(param){
    var _h_ = Core_Signal[40], _i_ = caml_call1(Caml_unix[97], 0);
    return caml_call2(Core_List[51], _i_, _h_);
   }
   function sigsuspend(ts){
    var _g_ = caml_call2(Core_List[51], ts, Core_Signal[41]);
    return caml_call1(Caml_unix[98], _g_);
   }
   function can_send_to(pid){
    try{send_exn(Core_Signal[77], [0, 4001835, pid]); var _e_ = 1; return _e_;
    }
    catch(_f_){return 0;}
   }
   caml_call1(Ppx_inline_test_lib[7], cst_signal_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Signal_unix);
   var
    Signal_unix =
      [0,
       of_system_int,
       to_system_int,
       sexp_of_pid_spec,
       send,
       send_i,
       send_exn,
       can_send_to,
       sigprocmask,
       sigpending,
       sigsuspend];
   runtime.caml_register_global(22, Signal_unix, cst_Signal_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzaWduYWxfdW5peC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsib2Zfc3lzdGVtX2ludCIsInQiLCJ0b19zeXN0ZW1faW50Iiwic2V4cF9vZl9waWRfc3BlYyIsInZfMDAyIiwidl8wMDEiLCJwaWRfc3BlY190b19pbnQiLCJwaWQiLCJwaWQkMCIsInNlbmQiLCJwaWRfc3BlYyIsInNlbmRfaSIsInNlbmRfZXhuIiwic2lncHJvY21hc2siLCJtb2RlIiwic2lncyIsIm1vZGUkMCIsInNpZ3BlbmRpbmciLCJzaWdzdXNwZW5kIiwidHMiLCJjYW5fc2VuZF90byJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2NvcmVfdW5peC9zaWduYWxfdW5peC9zaWduYWxfdW5peF9fLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvY29yZV91bml4L3NpZ25hbF91bml4L3NpZ25hbF91bml4Lm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0dBS3VCOztJQUFBOzs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lDU25CQSxjQUFjQztJQUFJLE9BQUEsNkNBQUpBO0dBQTBDO1lBQ3hEQyxjQUFjRDtJQUFJLE9BQUEsNkNBQUpBO0dBQTBDO0dBRTVELFNBQUFFO0lBQUE7O1NBQ0VDO3NEQUFBQTs7UUFBQUM7cURBQUFBO0dBSWtCO1lBRWhCQztJQUFrQiw4QkFFTDs7U0FDTkM7S0FBUyxTQUFBLHlCQUFUQTs7UUFGRkM7SUFBTyxPQUFBLHlCQUFQQTtHQUUyQjtZQUtoQ0MsS0FBS1IsR0FBRVM7SUFDVDtLQUMwRDtNQUFBLE1BQUEsNEJBRm5EVDtNQUVnQixNQVZyQkssZ0JBUU9JO0tBRVA7S0FBQTtLQUFBOzs7Ozs7Z0RBR3NDOzs7O0dBQWdCO1lBR3REQyxPQUFPVixHQUFFUyxVQVJURCxLQVFPUixHQUFFUyxXQUVpQixTQUFFO1lBRzVCRSxTQUFTWCxHQUFFUztJQUNiLFlBZEVELEtBYVNSLEdBQUVTLFdBRUo7SUFqQjhCO0tBQUEsTUFOckNKLGdCQXFCV0k7S0FmMEIsTUFBQTtLQXFCbkMsTUFBQSw0QkFOT1Q7SUFJVCxPQUFBO0dBSUk7WUFTSlksWUFBWUMsTUFBS0M7SUFDbkI7S0FBSUMsdUJBRFVGLHNCQUFBQTs7S0FPUSxNQUFBLDBCQVBIQztLQU9uQixNQUFBLDBCQU5JQztJQU1KLE9BQUE7R0FBa0Y7WUFHaEZDO0lBQWdCLElBQUEsdUJBQUEsTUFBQTtJQUFBLE9BQUE7R0FBNkM7WUFDN0RDLFdBQVdDO0lBQXFCLFVBQUEsMEJBQXJCQTtJQUFxQixPQUFBO0dBQStCO1lBRS9EQyxZQUFZYjtJQUNkLElBL0JFSyx1Q0E4QllMLE9BRVosYUFBQTs7ZUFHSztHQUFLOzs7Ozs7OztPQWxFVlA7T0FDQUU7T0FFSkM7T0FlSU07T0FRQUU7T0FLQUM7T0E4QkFRO09BYkFQO09BVUFJO09BQ0FDOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIFNpZ25hbF91bml4LkltcG9ydCAqKVxubW9kdWxlIEltcG9ydCA9IFNpZ25hbF91bml4X19JbXBvcnRcblxubW9kdWxlIFNpZ25hbF91bml4X18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxub3BlbiBDb3JlLlNpZ25hbFxuXG5leHRlcm5hbCBtbF9jYW1sX3RvX25vbnBvcnRhYmxlX3NpZ25hbF9udW1iZXJcbiAgOiAgdFxuICAtPiBpbnRcbiAgPSBcIm1sX2NhbWxfdG9fbm9ucG9ydGFibGVfc2lnbmFsX251bWJlclwiXG5cbmV4dGVybmFsIG1sX25vbnBvcnRhYmxlX3RvX2NhbWxfc2lnbmFsX251bWJlclxuICA6ICBpbnRcbiAgLT4gdFxuICA9IFwibWxfbm9ucG9ydGFibGVfdG9fY2FtbF9zaWduYWxfbnVtYmVyXCJcblxubGV0IG9mX3N5c3RlbV9pbnQgdCA9IG1sX25vbnBvcnRhYmxlX3RvX2NhbWxfc2lnbmFsX251bWJlciB0XG5sZXQgdG9fc3lzdGVtX2ludCB0ID0gbWxfY2FtbF90b19ub25wb3J0YWJsZV9zaWduYWxfbnVtYmVyIHRcblxudHlwZSBwaWRfc3BlYyA9XG4gIFsgYFBpZCBvZiBQaWQudFxuICB8IGBNeV9ncm91cFxuICB8IGBHcm91cCBvZiBQaWQudFxuICBdXG5bQEBkZXJpdmluZyBzZXhwX29mXVxuXG5sZXQgcGlkX3NwZWNfdG9faW50ID0gZnVuY3Rpb25cbiAgfCBgUGlkIHBpZCAtPiBQaWQudG9faW50IHBpZFxuICB8IGBNeV9ncm91cCAtPiAwXG4gIHwgYEdyb3VwIHBpZCAtPiB+LShQaWQudG9faW50IHBpZClcbjs7XG5cbmxldCBwaWRfc3BlY190b19zdHJpbmcgcCA9IEludC50b19zdHJpbmcgKHBpZF9zcGVjX3RvX2ludCBwKVxuXG5sZXQgc2VuZCB0IHBpZF9zcGVjID1cbiAgdHJ5XG4gICAgVW5peExhYmVscy5raWxsIH5waWQ6KHBpZF9zcGVjX3RvX2ludCBwaWRfc3BlYykgfnNpZ25hbDoodG9fY2FtbF9pbnQgdCk7XG4gICAgYE9rXG4gIHdpdGhcbiAgfCBVbml4LlVuaXhfZXJyb3IgKFVuaXguRVNSQ0gsIF8sIF8pIC0+IGBOb19zdWNoX3Byb2Nlc3Ncbjs7XG5cbmxldCBzZW5kX2kgdCBwaWRfc3BlYyA9XG4gIG1hdGNoIHNlbmQgdCBwaWRfc3BlYyB3aXRoXG4gIHwgYE9rIHwgYE5vX3N1Y2hfcHJvY2VzcyAtPiAoKVxuOztcblxubGV0IHNlbmRfZXhuIHQgcGlkX3NwZWMgPVxuICBtYXRjaCBzZW5kIHQgcGlkX3NwZWMgd2l0aFxuICB8IGBPayAtPiAoKVxuICB8IGBOb19zdWNoX3Byb2Nlc3MgLT5cbiAgICBmYWlsd2l0aGZcbiAgICAgIFwiU2lnbmFsX3VuaXguc2VuZF9leG4gJXMgcGlkOiVzXCJcbiAgICAgICh0b19zdHJpbmcgdClcbiAgICAgIChwaWRfc3BlY190b19zdHJpbmcgcGlkX3NwZWMpXG4gICAgICAoKVxuOztcblxudHlwZSBzaWdwcm9jbWFza19jb21tYW5kID1cbiAgWyBgU2V0XG4gIHwgYEJsb2NrXG4gIHwgYFVuYmxvY2tcbiAgXVxuXG5sZXQgc2lncHJvY21hc2sgbW9kZSBzaWdzID1cbiAgbGV0IG1vZGUgPVxuICAgIG1hdGNoIG1vZGUgd2l0aFxuICAgIHwgYEJsb2NrIC0+IFVuaXguU0lHX0JMT0NLXG4gICAgfCBgVW5ibG9jayAtPiBVbml4LlNJR19VTkJMT0NLXG4gICAgfCBgU2V0IC0+IFVuaXguU0lHX1NFVE1BU0tcbiAgaW5cbiAgVW5peC5zaWdwcm9jbWFzayBtb2RlIChzaWdzIHw+IExpc3QubWFwIH5mOnRvX2NhbWxfaW50KSB8PiBMaXN0Lm1hcCB+ZjpvZl9jYW1sX2ludFxuOztcblxubGV0IHNpZ3BlbmRpbmcgKCkgPSBVbml4LnNpZ3BlbmRpbmcgKCkgfD4gTGlzdC5tYXAgfmY6b2ZfY2FtbF9pbnRcbmxldCBzaWdzdXNwZW5kIHRzID0gVW5peC5zaWdzdXNwZW5kICh0cyB8PiBMaXN0Lm1hcCB+Zjp0b19jYW1sX2ludClcblxubGV0IGNhbl9zZW5kX3RvIHBpZCA9XG4gIHRyeVxuICAgIHNlbmRfZXhuIHplcm8gKGBQaWQgcGlkKTtcbiAgICB0cnVlXG4gIHdpdGhcbiAgfCBfIC0+IGZhbHNlXG47O1xuIl19
