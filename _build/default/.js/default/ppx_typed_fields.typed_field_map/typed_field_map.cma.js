// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Typed_field_map__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Typed_field_map = [0],
    Typed_field_map$0 = [0, Typed_field_map];
   runtime.caml_register_global(0, Typed_field_map$0, "Typed_field_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_field_map__The_map_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Typed_field_map_The_map_in = "Typed_field_map__The_map_intf",
    cst_typed_field_map = "typed_field_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Typed_field_map_The_map_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][1], "typed_field_map/the_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_typed_field_map, "the_map_intf.ml");
   var For_records = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Typed_field_map_The_map_in);
   var Typed_field_map_The_map_intf = [0, For_records];
   runtime.caml_register_global
    (11, Typed_field_map_The_map_intf, cst_Typed_field_map_The_map_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_field_map__The_map
//# unitInfo: Requires: Core, Core__List, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Typed_field_map__The_map_intf, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Typed_field_map_The_map$0 = "Typed_field_map__The_map",
    cst_typed_field_map$0 = "typed_field_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Univ_map = global_data.Univ_map,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Typed_field_map_The_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_typed_field_map$0);
   caml_call1(Ppx_expect_runtime[1][1], "typed_field_map/the_map.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_typed_field_map$0, "the_map.ml");
   var
    cst_typed_field_map = cst_typed_field_map$0,
    cst_Typed_field_map_The_map = cst_Typed_field_map_The_map$0;
   function Make_plain(Key, Data){
    var
     names = Key[1],
     name = Key[2],
     path = Key[3],
     ord = Key[4],
     Type_ids = Key[5],
     Packed = Key[6],
     type_id = Type_ids[1];
    function sexp_of_t(param, t){return caml_call1(Packed[2], [0, t]);}
    var
     Key_mod =
       [0, names, name, path, ord, Type_ids, Packed, type_id, sexp_of_t];
    function sexp_of_t$0(param){return Core[149];}
    var
     include =
       caml_call1
        (caml_call1(Univ_map[26], [0, Key_mod[8], Key_mod[7]]),
         [0, sexp_of_t$0]),
     sexp_of_t$1 = include[1],
     invariant = include[3],
     empty = include[4],
     singleton = include[5],
     is_empty = include[6],
     set = include[7],
     mem = include[8],
     mem_by_id = include[9],
     find_exn = include[11],
     add = include[12],
     add_exn = include[13],
     change_exn = include[15],
     update = include[16],
     remove = include[17],
     remove_by_id = include[18],
     Packed$0 = include[19],
     key_id_set = include[20],
     to_alist = include[21],
     of_alist_exn = include[22],
     find_packed_by_id = include[23],
     find_packed_by_id_exn = include[24],
     type_equal = include[25];
    function create(creator){
     function _I_(acc, param){
      var t = param[1];
      return caml_call3(add_exn, acc, t, caml_call1(creator[1], t));
     }
     return caml_call3(Core_List[20], Key_mod[6][3], empty, _I_);
    }
    return [0,
            Key_mod,
            sexp_of_t$1,
            invariant,
            empty,
            singleton,
            is_empty,
            set,
            mem,
            mem_by_id,
            find_exn,
            add,
            add_exn,
            change_exn,
            update,
            remove,
            remove_by_id,
            Packed$0,
            key_id_set,
            to_alist,
            of_alist_exn,
            find_packed_by_id,
            find_packed_by_id_exn,
            type_equal,
            find_exn,
            change_exn,
            create];
   }
   function Make(Key, Data){
    var Base = Make_plain(Key, Data);
    function create(sexper, creator){
     return [0, Base[26].call(null, creator), sexper];
    }
    function set(t, key, data){
     var _H_ = t[2];
     return [0, caml_call3(Base[7], t[1], key, data), _H_];
    }
    function change(t, key, f){
     var _G_ = t[2];
     return [0, caml_call3(Base[25], t[1], key, f), _G_];
    }
    function find(t, key){return caml_call2(Base[24], t[1], key);}
    var Id = [0], Id_map = Make_plain(Key, Id);
    function transpose(A, t, create){
     function _A_(all){
      var map = caml_call1(Id_map[20], all);
      return caml_call1
              (create,
               [0, function(k){return caml_call2(Id_map[24], map, k);}]);
     }
     function _B_(param){
      var a = param[2], key = param[1];
      function _F_(a){return [0, key, a];}
      return caml_call2(A[1], a, _F_);
     }
     var
      _C_ = caml_call1(Base[19], t[1]),
      _D_ = caml_call2(Core_List[51], _C_, _B_),
      _E_ = caml_call1(A[2], _D_);
     return caml_call2(A[1], _E_, _A_);
    }
    function To_other_map(A, M){
     var Inner = Make_plain(Key, [0]);
     function run(t){
      function _s_(alist){
       var
        m = caml_call1(Inner[20], alist),
        _z_ = [0, function(k){return caml_call2(Inner[24], m, k);}];
       return caml_call2(M[4], 0, _z_);
      }
      function _t_(param){
       var a = param[2], key = param[1];
       function _x_(a){return [0, key, a];}
       var _y_ = caml_call1(A[3], a);
       return caml_call2(A[1], _y_, _x_);
      }
      var
       _u_ = caml_call1(Base[19], t[1]),
       _v_ = caml_call2(Core_List[51], _u_, _t_),
       _w_ = caml_call1(A[2], _v_);
      return caml_call2(A[1], _w_, _s_);
     }
     return [0, , run];
    }
    var As_applicative = [0, Id, Id_map, transpose, To_other_map];
    function sexp_of_t(t){
     var match = t[2];
     if(! match) return caml_call1(Base[2], t[1]);
     var sexpers = match[1];
     function _p_(param){
      var
       v = param[2],
       k = param[1],
       _r_ = caml_call1(sexpers[1], k),
       sexp_of_a = caml_call2(sexpers[2], _r_, v);
      return [1, [0, caml_call1(Key[6][2], [0, k]), [0, sexp_of_a, 0]]];
     }
     var _q_ = caml_call1(Base[19], t[1]);
     return [1, caml_call2(Core_List[51], _q_, _p_)];
    }
    return [0,
            Key,
            Data,
            ,
            create,
            set,
            change,
            find,
            As_applicative,
            sexp_of_t];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Typed_field_map_The_map);
   function _a_(Key, _j_){
    var
     create_derived_on = Key[9],
     include = Make([0, Key[1], Key[2], Key[3], Key[4], Key[5], Key[6]], _j_),
     Data = include[2],
     create = include[4],
     set = include[5],
     change = include[6],
     find = include[7],
     As_applicative = include[8],
     sexp_of_t = include[9];
    function transpose_applicative(param, A){
     var f = param[1], t = create(0, [0, f]);
     function _o_(param){
      var f = param[1];
      return caml_call1(create_derived_on, [0, f]);
     }
     return As_applicative[3].call(null, A, t, _o_);
    }
    var _k_ = As_applicative[4];
    function _l_(_n_, _m_){return [0, _k_(_n_, _m_)[2]];}
    return [0,
            Key,
            sexp_of_t,
            Data,
            create,
            set,
            find,
            change,
            [0, As_applicative[3], _l_],
            transpose_applicative];
   }
   var
    Typed_field_map_The_map =
      [0,
       function(_c_, _b_){
        var _d_ = Make(_c_, _b_), _e_ = _d_[8], _f_ = _e_[4];
        function _g_(_i_, _h_){return [0, _f_(_i_, _h_)[2]];}
        return [0,
                _d_[9],
                _d_[1],
                _d_[2],
                _d_[4],
                _d_[5],
                _d_[7],
                _d_[6],
                [0, _e_[3], _g_]];
       },
       _a_];
   runtime.caml_register_global
    (14, Typed_field_map_The_map, cst_Typed_field_map_The_map$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_field_map__Nested
//# unitInfo: Requires: CamlinternalMod, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Typed_field_map__The_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Typed_field_map_Nested$0 = "Typed_field_map__Nested",
    cst_typed_field_map$0 = "typed_field_map",
    cst_typed_field_map_nested_ml = "typed_field_map/nested.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Typed_field_map_The_map = global_data.Typed_field_map__The_map,
    CamlinternalMod = global_data.CamlinternalMod,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Typed_field_map_Nested$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_typed_field_map$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_typed_field_map_nested_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_typed_field_map$0, "nested.ml");
   var
    _a_ = [0, [0]],
    _b_ = [0, cst_typed_field_map_nested_ml, 9, 4],
    _c_ = [0, [0]],
    _d_ = [0, cst_typed_field_map_nested_ml, 21, 4],
    _e_ = [0, [0]],
    _f_ = [0, [0]],
    cst_typed_field_map = cst_typed_field_map$0,
    cst_Typed_field_map_Nested = cst_Typed_field_map_Nested$0;
   function Make(Leaf_data){
    var
     Tree = caml_call2(CamlinternalMod[1], _b_, _a_),
     Branch = caml_call2(CamlinternalMod[1], _d_, _c_);
    caml_call3(CamlinternalMod[2], _e_, Tree, Tree);
    caml_call3(CamlinternalMod[2], _f_, Branch, Branch);
    function leaf(kind){return [0, kind];}
    function branch(N){
     var
      _g_ = N[1],
      Map =
        caml_call1
         (caml_call1
           (Typed_field_map_The_map[1],
            [0, _g_[1], _g_[2], _g_[3], _g_[4], _g_[5], _g_[6]]),
          Tree),
      map = caml_call2(Map[4], 0, [0, N[2]]);
     return [1,
             [0,
              N[1],
              [0, Map[1], Map[3], Map[4], Map[5], Map[6], Map[7], Map[8]],
              map]];
    }
    return [0, Tree, Branch, leaf, branch];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Typed_field_map_Nested);
   var Typed_field_map_Nested = [0, Make];
   runtime.caml_register_global
    (19, Typed_field_map_Nested, cst_Typed_field_map_Nested$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_field_map__Sexp_serializers
//# unitInfo: Requires: Core, Core__List, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Typed_field_map__The_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Typed_field_map_Sexp_seria = "Typed_field_map__Sexp_serializers",
    cst_typed_field_map = "typed_field_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_List = global_data.Core__List,
    Core_Sexp = global_data.Core__Sexp,
    Typed_field_map_The_map = global_data.Typed_field_map__The_map,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Typed_field_map_Sexp_seria);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][1], "typed_field_map/sexp_serializers.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_typed_field_map, "sexp_serializers.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Typed_field_map_Sexp_seria);
   var
    _b_ = [0, "missing_field"],
    cst_Cannot_deserialize_typed_f$1 =
      "Cannot deserialize typed_field_map. Reason: missing field:",
    _a_ = [0, "duplicate_field"],
    cst_Cannot_deserialize_typed_f$0 =
      "Cannot deserialize typed_field_map. Reason: duplicate field:",
    cst_Cannot_deserialize_typed_f =
      "Cannot deserialize typed_field_map. Reason: Unrecognized sexp:",
    Typed_field_map_Sexp_serialize =
      [0,
       function(Map){
        var
         Typed_field = Map[2],
         default_defaulter = [0, function(param){return 0;}];
        function sexp_of_t(to_sexper, t){
         function sexp_of_field(param){
          var
           key = param[1],
           key_sexp = caml_call1(Typed_field[6][2], [0, key]),
           _m_ = caml_call2(Map[6], t, key),
           data_sexp = caml_call2(to_sexper[1], key, _m_);
          return [1, [0, key_sexp, [0, data_sexp, 0]]];
         }
         return [1,
                 caml_call2(Core_List[51], Typed_field[6][3], sexp_of_field)];
        }
        var
         T = [0],
         include =
           caml_call1(caml_call1(Typed_field_map_The_map[1], Map[2]), T),
         create = include[4],
         set = include[5],
         find = include[6],
         empty = caml_call2(create, 0, [0, function(param){return 0;}]);
        function raise_invalid_sexp(sexp){
         var
          _k_ = [0, caml_call1(Core_Sexp[93], sexp), 0],
          _l_ =
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_Cannot_deserialize_typed_f),
              _k_]];
         return caml_call1(Core[261], _l_);
        }
        function t_of_sexp(opt, of_sexper, sexp){
         if(opt)
          var sth = opt[1], default$0 = sth;
         else
          var default$0 = default_defaulter;
         if(0 === sexp[0]) return raise_invalid_sexp(sexp);
         var l = sexp[1];
         function _c_(acc, param){
          if(1 === param[0]){
           var _g_ = param[1];
           if(_g_){
            var _h_ = _g_[2];
            if(_h_ && ! _h_[2]){
             var
              data_sexp = _h_[1],
              key_sexp = _g_[1],
              key = caml_call1(Typed_field[6][1], key_sexp)[1],
              data = caml_call2(of_sexper[1], key, data_sexp);
             if(! caml_call2(find, acc, key))
              return caml_call3(set, acc, key, [0, data]);
             var
              duplicate_field = caml_call1(Typed_field[2], key),
              _i_ =
                [0,
                 [1, [0, _a_, [0, caml_call1(Core[558], duplicate_field), 0]]],
                 0],
              _j_ =
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_Cannot_deserialize_typed_f$0),
                  _i_]];
             return caml_call1(Core[261], _j_);
            }
           }
          }
          return raise_invalid_sexp(sexp);
         }
         var
          map_with_parsed_results = caml_call3(Core_List[20], l, empty, _c_),
          _d_ =
            [0,
             function(f){
              var match = caml_call2(find, map_with_parsed_results, f);
              if(match){var data = match[1]; return data;}
              var match$0 = caml_call1(default$0[1], f);
              if(match$0){var data$0 = match$0[1]; return data$0;}
              var
               missing_field = caml_call1(Typed_field[2], f),
               _e_ =
                 [0,
                  [1, [0, _b_, [0, caml_call1(Core[558], missing_field), 0]]],
                  0],
               _f_ =
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_Cannot_deserialize_typed_f$1),
                   _e_]];
              return caml_call1(Core[261], _f_);
             }];
         return caml_call2(Map[4], 0, _d_);
        }
        return [0, sexp_of_t, t_of_sexp];
       }];
   runtime.caml_register_global
    (21, Typed_field_map_Sexp_serialize, cst_Typed_field_map_Sexp_seria);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_field_map
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Typed_field_map__The_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Typed_field_map = "Typed_field_map",
    cst_typed_field_map = "typed_field_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Typed_field_map_The_map = global_data.Typed_field_map__The_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Typed_field_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][1], "typed_field_map/typed_field_map.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_typed_field_map, "typed_field_map.ml");
   var
    Make = Typed_field_map_The_map[1],
    Make_for_records = Typed_field_map_The_map[2];
   caml_call1(Ppx_inline_test_lib[7], cst_typed_field_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Typed_field_map);
   var Typed_field_map = [0, Make, Make_for_records];
   runtime.caml_register_global(12, Typed_field_map, cst_Typed_field_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
