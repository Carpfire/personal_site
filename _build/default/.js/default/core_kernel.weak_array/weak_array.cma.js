// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Weak_array
//# unitInfo: Requires: Base, Base__Array, Base__Option, Heap_block, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Weak
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Weak_array$0 = "Weak_array",
    cst_weak_array$0 = "weak_array";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Weak = global_data.Stdlib__Weak,
    Heap_block = global_data.Heap_block,
    Base = global_data.Base,
    Base_Array = global_data.Base__Array,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Weak_array$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_weak_array$0);
   caml_call1(Ppx_expect_runtime[1][1], "weak_array/src/weak_array.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_weak_array$0, "weak_array.ml");
   var cst_weak_array = cst_weak_array$0, cst_Weak_array = cst_Weak_array$0;
   function create(len){return caml_call1(Stdlib_Weak[1], len);}
   function length(t){return caml_call1(Stdlib_Weak[2], t);}
   var set = Stdlib_Weak[3];
   function set_exn(t, i, x){
    return caml_call3
            (set, t, i, caml_call2(Base_Option[24], x, Heap_block[3]));
   }
   var get = Stdlib_Weak[4];
   function is_some(t, i){return caml_call2(Stdlib_Weak[6], t, i);}
   function is_none(t, i){return 1 - is_some(t, i);}
   function sexp_of_t(sexp_of_a, t){
    function _g_(i){return caml_call2(get, t, i);}
    var
     _h_ = length(t),
     x_001 = caml_call2(Base_Array[41], _h_, _g_),
     _i_ = caml_call1(Heap_block[1], sexp_of_a),
     _j_ = caml_call1(Base[184], _i_);
    return caml_call2(Base[95], _j_, x_001);
   }
   function iter(t, f){
    var _e_ = length(t) - 1 | 0, _d_ = 0;
    if(_e_ >= 0){
     var i = _d_;
     for(;;){
      var match = caml_call2(get, t, i);
      if(match){
       var v = match[1];
       caml_call1(f, caml_call1(Heap_block[4], v));
      }
      var _f_ = i + 1 | 0;
      if(_e_ === i) break;
      var i = _f_;
     }
    }
    return 0;
   }
   function iteri(t, f){
    var _b_ = length(t) - 1 | 0, _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var match = caml_call2(get, t, i);
      if(match){
       var v = match[1];
       caml_call2(f, i, caml_call1(Heap_block[4], v));
      }
      var _c_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _c_;
     }
    }
    return 0;
   }
   function blit(src, src_pos, dst, dst_pos, len){
    return caml_call5(Stdlib_Weak[8], src, src_pos, dst, dst_pos, len);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_weak_array);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Weak_array);
   var
    Weak_array =
      [0,
       sexp_of_t,
       create,
       length,
       set,
       set_exn,
       get,
       is_some,
       is_none,
       iter,
       iteri,
       blit];
   runtime.caml_register_global(16, Weak_array, cst_Weak_array$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ3ZWFrX2FycmF5LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJjcmVhdGUiLCJsZW4iLCJsZW5ndGgiLCJ0Iiwic2V0Iiwic2V0X2V4biIsImkiLCJ4IiwiZ2V0IiwiaXNfc29tZSIsImlzX25vbmUiLCJzZXhwX29mX3QiLCJzZXhwX29mX2EiLCJ4XzAwMSIsIml0ZXIiLCJmIiwidiIsIml0ZXJpIiwiYmxpdCIsInNyYyIsInNyY19wb3MiLCJkc3QiLCJkc3RfcG9zIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvY29yZV9rZXJuZWwvd2Vha19hcnJheS93ZWFrX2FycmF5Lm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUtJQSxPQUFRQyxLQUFNLE9BQUEsMkJBQU5BLEtBQXFCO1lBQzdCQyxPQUFPQyxHQUFJLE9BQUEsMkJBQUpBLEdBQWlCO09BQ3hCQztZQUNBQyxRQUFRRixHQUFFRyxHQUFFQztJQUFJLE9BQVE7YUFEeEJILEtBQ1FELEdBQUVHLEdBQWMsNEJBQVpDO0dBQW1EO09BQy9EQztZQUNBQyxRQUFRTixHQUFFRyxHQUFJLE9BQUEsMkJBQU5ILEdBQUVHLEdBQWtCO1lBQzVCSSxRQUFRUCxHQUFFRyxHQUFJLFdBRGRHLFFBQ1FOLEdBQUVHLEdBQXFCO1lBRS9CSyxVQUFVQyxXQUFVVDtpQkFEdUJHLEdBQUssT0FBQSxXQUhoREUsS0FJb0JMLEdBRHVCRyxHQUFZO0lBQS9CO0tBQUEsTUFOeEJKLE9BT29CQztLQUFlVSxRQURHO3FDQUM1QkQ7O3FDQUF5QkM7R0FBeUM7WUFFNUVDLEtBQUtYLEdBQUdZO0lBQ1YsSUFBYSxNQVZYYixPQVNLQyxZQUNQOztTQUFBRzs7TUFDUSxZQUFBLFdBUk5FLEtBTUtMLEdBQ1BHOztXQUdTVTtPQUFLLFdBSkpELEdBSU0sMEJBQVBDOztNQUhULFVBQUFWO2lCQUFBQTtVQUFBQTs7OztHQUlJO1lBR0ZXLE1BQU1kLEdBQUdZO0lBQ1gsSUFBYSxNQWxCWGIsT0FpQk1DLFlBQ1I7O1NBQUFHOztNQUNRLFlBQUEsV0FoQk5FLEtBY01MLEdBQ1JHOztXQUdTVTtPQUFLLFdBSkhELEdBQ1hULEdBR2tCLDBCQUFUVTs7TUFIVCxVQUFBVjtpQkFBQUE7VUFBQUE7Ozs7R0FJSTtZQUdGWSxLQUFNQyxLQUFLQyxTQUFTQyxLQUFLQyxTQUFTckI7SUFBTSxPQUFBLDJCQUFsQ2tCLEtBQUtDLFNBQVNDLEtBQUtDLFNBQVNyQjtHQUEyQzs7Ozs7Ozs7T0FsQjdFVTtPQVJBWDtPQUNBRTtPQUNBRTtPQUNBQztPQUNBRztPQUNBQztPQUNBQztPQUlBSTtPQVFBRztPQVFBQzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBCYXNlXG5tb2R1bGUgV2VhayA9IFN0ZGxpYi5XZWFrXG5cbnR5cGUgJ2EgdCA9ICdhIEhlYXBfYmxvY2sudCBXZWFrLnRcblxubGV0IGNyZWF0ZSB+bGVuID0gV2Vhay5jcmVhdGUgbGVuXG5sZXQgbGVuZ3RoIHQgPSBXZWFrLmxlbmd0aCB0XG5sZXQgc2V0ID0gV2Vhay5zZXRcbmxldCBzZXRfZXhuIHQgaSB4ID0gc2V0IHQgaSAoT3B0aW9uLm1hcCB4IH5mOkhlYXBfYmxvY2suY3JlYXRlX2V4bilcbmxldCBnZXQgPSBXZWFrLmdldFxubGV0IGlzX3NvbWUgdCBpID0gV2Vhay5jaGVjayB0IGlcbmxldCBpc19ub25lIHQgaSA9IG5vdCAoaXNfc29tZSB0IGkpXG5sZXQgdG9fYXJyYXkgdCA9IEFycmF5LmluaXQgKGxlbmd0aCB0KSB+ZjooZnVuIGkgLT4gZ2V0IHQgaSlcbmxldCBzZXhwX29mX3Qgc2V4cF9vZl9hIHQgPSBbJXNleHBfb2Y6IGEgSGVhcF9ibG9jay50IG9wdGlvbiBhcnJheV0gKHRvX2FycmF5IHQpXG5cbmxldCBpdGVyIHQgfmYgPVxuICBmb3IgaSA9IDAgdG8gbGVuZ3RoIHQgLSAxIGRvXG4gICAgbWF0Y2ggZ2V0IHQgaSB3aXRoXG4gICAgfCBOb25lIC0+ICgpXG4gICAgfCBTb21lIHYgLT4gZiAoSGVhcF9ibG9jay52YWx1ZSB2KVxuICBkb25lXG47O1xuXG5sZXQgaXRlcmkgdCB+ZiA9XG4gIGZvciBpID0gMCB0byBsZW5ndGggdCAtIDEgZG9cbiAgICBtYXRjaCBnZXQgdCBpIHdpdGhcbiAgICB8IE5vbmUgLT4gKClcbiAgICB8IFNvbWUgdiAtPiBmIGkgKEhlYXBfYmxvY2sudmFsdWUgdilcbiAgZG9uZVxuOztcblxubGV0IGJsaXQgfnNyYyB+c3JjX3BvcyB+ZHN0IH5kc3RfcG9zIH5sZW4gPSBXZWFrLmJsaXQgc3JjIHNyY19wb3MgZHN0IGRzdF9wb3MgbGVuXG4iXX0=
