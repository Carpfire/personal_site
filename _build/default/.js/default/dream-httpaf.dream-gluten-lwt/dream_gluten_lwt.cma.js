// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_gluten_lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_gluten_lwt = [0];
   runtime.caml_register_global(0, Dream_gluten_lwt, "Dream_gluten_lwt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten_lwt__Gluten_lwt_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Dream_gluten_lwt_Gluten_lwt_in = [0];
   runtime.caml_register_global
    (0, Dream_gluten_lwt_Gluten_lwt_in, "Dream_gluten_lwt__Gluten_lwt_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten_lwt__Gluten_lwt
//# unitInfo: Requires: Dream_gluten__Gluten, Dream_gluten_lwt__Gluten_lwt_intf, Lwt, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_gluten_Gluten = global_data.Dream_gluten__Gluten,
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib;
   function start(Io, Runtime, t, read_buffer_size, socket){
    var
     read_buffer = caml_call1(Dream_gluten_Gluten[5][1], read_buffer_size),
     match = caml_call1(Lwt[1], 0),
     notify_read_loop_exited = match[2],
     read_loop_exited = match[1];
    function read_loop(param){
     function read_loop_step(param){
      var match = caml_call1(Runtime[1], t);
      if(73271853 === match){
       caml_call2(Runtime[4], t, read_loop);
       return Lwt[36];
      }
      if(914388854 <= match){
       var
        _n_ =
          function(exn){
           if(exn !== Stdlib[12]) return caml_call1(Lwt[5], exn);
           var _u_ = caml_call1(Runtime[3], t);
           caml_call2(Dream_gluten_Gluten[5][2], read_buffer, _u_);
           return read_loop_step(0);
          },
        _o_ =
          function(param){
           function _r_(param){
            var _t_ = caml_call1(Runtime[2], t);
            caml_call2(Dream_gluten_Gluten[5][2], read_buffer, _t_);
            return read_loop_step(0);
           }
           var match = caml_call1(Lwt[1], 0), u = match[2], p = match[1];
           function _p_(n){return caml_call2(Lwt[2], u, n);}
           function _q_(buf, off, len, k){
            var _s_ = caml_call4(Io[1], socket, buf, off, len);
            return caml_call2(Lwt[29], _s_, k);
           }
           caml_call3(Dream_gluten_Gluten[5][3], read_buffer, _q_, _p_);
           return caml_call2(Lwt[33][1], p, _r_);
          };
       return caml_call2(Lwt[7], _o_, _n_);
      }
      caml_call2(Lwt[2], notify_read_loop_exited, 0);
      caml_call1(Io[3], socket);
      return Lwt[36];
     }
     function _l_(param){
      function _m_(exn){caml_call2(Runtime[8], t, exn); return Lwt[36];}
      return caml_call2(Lwt[7], read_loop_step, _m_);
     }
     return caml_call1(Lwt[11], _l_);
    }
    var
     writev = caml_call1(Io[2], socket),
     match$0 = caml_call1(Lwt[1], 0),
     notify_write_loop_exited = match$0[2],
     write_loop_exited = match$0[1];
    function write_loop(param){
     function write_loop_step(param){
      var match = caml_call1(Runtime[5], t);
      if(typeof match === "number"){
       caml_call2(Runtime[7], t, write_loop);
       return Lwt[36];
      }
      if(-477700929 <= match[1]){
       var
        io_vectors = match[2],
        _j_ =
          function(result){
           caml_call2(Runtime[6], t, result);
           return write_loop_step(0);
          },
        _k_ = caml_call1(writev, io_vectors);
       return caml_call2(Lwt[33][1], _k_, _j_);
      }
      caml_call2(Lwt[2], notify_write_loop_exited, 0);
      return Lwt[36];
     }
     function _h_(param){
      function _i_(exn){caml_call2(Runtime[8], t, exn); return Lwt[36];}
      return caml_call2(Lwt[7], write_loop_step, _i_);
     }
     return caml_call1(Lwt[11], _h_);
    }
    read_loop(0);
    write_loop(0);
    function _f_(param){return caml_call1(Io[4], socket);}
    var
     _g_ =
       caml_call1(Lwt[14], [0, read_loop_exited, [0, write_loop_exited, 0]]);
    return caml_call2(Lwt[33][1], _g_, _f_);
   }
   function Client(Io){
    function create(read_buffer_size, protocol, t, socket){
     var connection = caml_call2(Dream_gluten_Gluten[4][11], protocol, t);
     function _d_(param){
      var _e_ = Dream_gluten_Gluten[4];
      return start
              (Io,
               [0,
                _e_[1],
                _e_[2],
                _e_[3],
                _e_[4],
                _e_[5],
                _e_[6],
                _e_[7],
                _e_[8],
                _e_[9],
                _e_[10]],
               connection,
               read_buffer_size,
               socket);
     }
     caml_call1(Lwt[11], _d_);
     return caml_call1(Lwt[4], [0, connection, socket]);
    }
    function upgrade(t, protocol){
     return caml_call2(Dream_gluten_Gluten[4][12], t[1], protocol);
    }
    function shutdown(t){
     caml_call1(Dream_gluten_Gluten[4][10], t[1]);
     return caml_call1(Io[4], t[2]);
    }
    function is_closed(t){return caml_call1(Dream_gluten_Gluten[4][9], t[1]);}
    function socket(t){return t[2];}
    return [0, create, upgrade, shutdown, is_closed, socket];
   }
   var
    Dream_gluten_lwt_Gluten_lwt =
      [0,
       function(Io){
        function create_connection_handler
        (read_buffer_size, protocol, connection, client_addr, socket){
         var
          connection$0 =
            caml_call2(Dream_gluten_Gluten[3][11], protocol, connection),
          _c_ = Dream_gluten_Gluten[3];
         return start
                 (Io,
                  [0,
                   _c_[1],
                   _c_[2],
                   _c_[3],
                   _c_[4],
                   _c_[5],
                   _c_[6],
                   _c_[7],
                   _c_[8],
                   _c_[9],
                   _c_[10]],
                  connection$0,
                  read_buffer_size,
                  socket);
        }
        function create_upgradable_connection_h
        (read_buffer_size,
         protocol,
         create_protocol,
         request_handler,
         client_addr,
         socket){
         var
          _a_ = caml_call1(request_handler, client_addr),
          connection =
            caml_call3
             (Dream_gluten_Gluten[3][13], protocol, create_protocol, _a_),
          _b_ = Dream_gluten_Gluten[3];
         return start
                 (Io,
                  [0,
                   _b_[1],
                   _b_[2],
                   _b_[3],
                   _b_[4],
                   _b_[5],
                   _b_[6],
                   _b_[7],
                   _b_[8],
                   _b_[9],
                   _b_[10]],
                  connection,
                  read_buffer_size,
                  socket);
        }
        return [0, create_upgradable_connection_h, create_connection_handler];
       },
       Client];
   runtime.caml_register_global
    (3, Dream_gluten_lwt_Gluten_lwt, "Dream_gluten_lwt__Gluten_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
