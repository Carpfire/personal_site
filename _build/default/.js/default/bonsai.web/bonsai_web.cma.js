// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai_web__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Bonsai_web = [0],
    Bonsai_web$0 = [0, Bonsai_web];
   runtime.caml_register_global(0, Bonsai_web$0, "Bonsai_web__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Util
//# unitInfo: Requires: Bonsai, Core, Core__Array, Core__Core_sys, Core__List, Core__Option, Core__String, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Util$0 = "Bonsai_web__Util",
    cst_bonsai_web$0 = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Core_List = global_data.Core__List,
    Bonsai = global_data.Bonsai,
    Core_Array = global_data.Core__Array,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Core_sys = global_data.Core__Core_sys;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Util$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/util.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "util.ml");
   var
    is_in_browser = caml_call1(Js_of_ocaml_Js[6][5], Js_of_ocaml_Dom_html[2]),
    match = caml_call1(Core_Core_sys[19], "BENCHMARKS_RUNNER");
   a:
   {
    var
     cst_no_stack_trace_found = "<no stack trace found>",
     _b_ =
       [0,
        [11,
         "Stack overflow inside of a bonsai computation is not supported! In a future release your app might crash.\n",
         [2, 0, 0]],
        "Stack overflow inside of a bonsai computation is not supported! In a future release your app might crash.\n%s"],
     _c_ =
       [0,
        [2,
         0,
         [11,
          "\n<truncated stack to preserve determinism between fast-build and fast-exe>",
          0]],
        "%s\n<truncated stack to preserve determinism between fast-build and fast-exe>"],
     cst_FIELDSET = "FIELDSET",
     cst_cannot_run_tests_in_a_brow = "cannot run tests in a browser",
     cst_bonsai_web = cst_bonsai_web$0,
     cst_Bonsai_web_Util = cst_Bonsai_web_Util$0;
    if(match && ! runtime.caml_string_notequal(match[1], "TRUE")){var is_benchmark = 1; break a;}
    var is_benchmark = 0;
   }
   var _a_ = Core[628];
   if(is_in_browser)
    if(is_benchmark)
     var am_running_how = 25748998;
    else if(_a_)
     var
      _d_ = caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_run_tests_in_a_brow),
      am_running_how = caml_call1(Core[261], _d_);
    else
     var am_running_how = 95560584;
   else
    var
     am_running_how = is_benchmark ? -531563232 : _a_ ? 853947087 : 870528546;
   function am_within_disabled_fieldset(event){
    if(25748998 <= am_running_how && 853947087 > am_running_how){
     var
      _l_ =
        function(element){
         var
          tag_name = caml_call1(Js_of_ocaml_Js[6][10], element.tagName),
          disabled = caml_call1(Js_of_ocaml_Js[6][10], element.disabled),
          match = caml_call2(Core_Option[23], tag_name, disabled);
         if(! match) return 0;
         var
          match$0 = match[1],
          disabled$0 = match$0[2],
          tag_name$0 = match$0[1],
          _n_ =
            caml_call2
             (Core_String[145],
              runtime.caml_string_of_jsstring(tag_name$0),
              cst_FIELDSET),
          _o_ = _n_ ? disabled$0 | 0 : _n_;
         return _o_;
        },
      _m_ = runtime.caml_js_to_array(event.composedPath());
     return caml_call2(Core_Array[39], _m_, _l_);
    }
    return 0;
   }
   function set_stack_overflow_exception_c(param){
    a:
    {
     if(95560584 !== am_running_how && 870528546 > am_running_how){
      var
       get_test_truncated_trace =
         function(stack_trace){
          var
           _j_ = caml_call1(Core_String[80], stack_trace),
           _k_ = caml_call1(Core_List[82], _j_),
           first_line = caml_call2(Core_Option[39], _k_, cst);
          return caml_call2(Core[265], _c_, first_line);
         };
      break a;
     }
     var get_test_truncated_trace = function(_i_){return _i_;};
    }
    function _e_(exn){
     if(exn !== Stdlib[10]) return 0;
     var
      _f_ = Js_of_ocaml_Js[37][4],
      _g_ = caml_call1(Js_of_ocaml_Js[37][7], exn),
      _h_ = caml_call2(Core_Option[32], _g_, _f_),
      stack_trace =
        caml_call3
         (Core_Option[41],
          _h_,
          cst_no_stack_trace_found,
          get_test_truncated_trace);
     return caml_call2(Core[243], _b_, stack_trace);
    }
    return caml_call1(Bonsai[54][9], _e_);
   }
   var For_bonsai_internal = [0, set_stack_overflow_exception_c];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Util);
   var
    Bonsai_web_Util =
      [0, am_running_how, am_within_disabled_fieldset, For_bonsai_internal];
   runtime.caml_register_global(33, Bonsai_web_Util, cst_Bonsai_web_Util$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Import$0 = "Bonsai_web__Import",
    cst_bonsai_web$0 = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "import.ml");
   var
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Import = cst_Bonsai_web_Import$0;
   function sequence(e){return [0, Virtual_dom_Effect[2], e];}
   var no_op = Virtual_dom_Effect[1], Event = [0, sequence, no_op];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Import);
   var Bonsai_web_Import = [0, Event];
   runtime.caml_register_global
    (12, Bonsai_web_Import, cst_Bonsai_web_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__To_incr_dom_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_To_incr_dom_int = "Bonsai_web__To_incr_dom_intf",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_To_incr_dom_int);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][1], "web/to_incr_dom_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web, "to_incr_dom_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_To_incr_dom_int);
   var Bonsai_web_To_incr_dom_intf = [0];
   runtime.caml_register_global
    (11, Bonsai_web_To_incr_dom_intf, cst_Bonsai_web_To_incr_dom_int);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__To_incr_dom
//# unitInfo: Requires: Bonsai, Bonsai__Action, Bonsai__Environment, Bonsai__Input, Bonsai__Lifecycle, Bonsai__Path, Bonsai__Snapshot, Bonsai__Trampoline, Bonsai__Value, Bonsai_web__To_incr_dom_intf, Core, Core__Type_equal, Incr_dom__Component, Incr_dom__Start_app, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr, Ui_time_source, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_To_incr_dom$0 = "Bonsai_web__To_incr_dom",
    cst_bonsai_web$0 = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Bonsai = global_data.Bonsai,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Incr_dom_Start_app = global_data.Incr_dom__Start_app,
    Ui_time_source = global_data.Ui_time_source,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Input = global_data.Bonsai__Input,
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_To_incr_dom$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/to_incr_dom.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "to_incr_dom.ml");
   var
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_To_incr_dom = cst_Bonsai_web_To_incr_dom$0;
   function create(param){return [0, Bonsai_Lifecycle[1][2]];}
   var State = [0, create];
   function convert_with_extra(opt, component){
    if(opt) var sth = opt[1], optimize = sth; else var optimize = 0;
    var
     fresh = caml_call2(Core_Type_equal[8][3], cst, Core[149]),
     _b_ = caml_call2(Bonsai_Value[21], 4, fresh),
     var$0 = caml_call1(Bonsai[54][2], _b_),
     maybe_optimize = optimize ? Bonsai[54][8] : function(_m_){return _m_;},
     _c_ = caml_call1(component, var$0),
     _d_ = caml_call1(maybe_optimize, caml_call1(Bonsai[54][3], _c_)),
     match = caml_call1(Bonsai[54][7], _d_)[1],
     run = match[5],
     apply_action = match[4],
     action_type_id = match[3],
     model = match[1],
     sexp_of_model = model[4],
     equal_model = model[2],
     default_model = model[1],
     Input = [0],
     Model = [0, equal_model, sexp_of_model, default_model],
     sexp_of_t = caml_call1(Bonsai_Action[1][13], action_type_id),
     Action = [0, sexp_of_t],
     Extra = [0];
    function create(input, param, model, inject){
     var
      environment =
        caml_call3(Bonsai_Environment[2], Bonsai_Environment[1], fresh, input),
      _e_ =
        caml_call5
         (run,
          environment,
          Bonsai_Path[25],
          Incr_dom_Start_app[2][2],
          model,
          inject),
      snapshot = caml_call1(Bonsai_Trampoline[2], _e_)[1],
      let_syntax_001 = caml_call1(Bonsai_Snapshot[2], snapshot),
      _f_ = caml_call1(Bonsai_Snapshot[1], snapshot),
      let_syntax_002 = caml_call1(Bonsai_Input[3], _f_),
      let_syntax_003 = caml_call1(Bonsai_Snapshot[4], snapshot);
     function _g_(param){
      var
       _k_ = param[2],
       _l_ = _k_[2],
       model = _l_[2],
       lifecycle = _l_[1],
       input = _k_[1],
       match = param[1],
       extra = match[2],
       view = match[1],
       schedule_event = Virtual_dom_Effect[23][2];
      function apply_action$0(action, state, param){
       return caml_call5
               (apply_action,
                inject,
                schedule_event,
                [0, input],
                model,
                action);
      }
      function on_display(state, param){
       var diff = caml_call2(Bonsai_Lifecycle[1][3], state[1], lifecycle);
       state[1] = lifecycle;
       caml_call1(Virtual_dom_Effect[23][2], diff);
       return caml_call1(Ui_time_source[12][2], Incr_dom_Start_app[2][2]);
      }
      return caml_call6
              (Incr_dom_Component[7],
               [0, apply_action$0],
               0,
               [0, on_display],
               extra,
               model,
               view);
     }
     var
      _h_ = caml_call2(Ui_incr[78][4][21], let_syntax_003, model),
      _i_ = caml_call2(Ui_incr[78][4][21], let_syntax_002, _h_),
      _j_ = caml_call2(Ui_incr[78][4][21], let_syntax_001, _i_);
     return caml_call2(Ui_incr[78][4][6], _j_, _g_);
    }
    return [0, Input, Model, Extra, Action, State, create];
   }
   function convert(optimize, component){
    function _a_(r){return [0, r, 0];}
    return convert_with_extra
            (optimize, caml_call2(Bonsai[55][5], component, _a_));
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_To_incr_dom);
   var Bonsai_web_To_incr_dom = [0, convert, convert_with_extra];
   runtime.caml_register_global
    (28, Bonsai_web_To_incr_dom, cst_Bonsai_web_To_incr_dom$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Effect
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Bonsai, Bonsai_web__Util, Core, Core__Option, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Effect, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Effect$0 = "Bonsai_web__Effect",
    cst_bonsai_web$0 = "bonsai_web",
    cst_web_effect_ml = "web/effect.ml",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "]",
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_web_Util = global_data.Bonsai_web__Util,
    Core = global_data.Core,
    Bonsai = global_data.Bonsai,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Core_Option = global_data.Core__Option,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Effect$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_web_effect_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "effect.ml");
   var
    Ignore = Virtual_dom_Effect[1],
    Many = Virtual_dom_Effect[2],
    symbol_bind = Virtual_dom_Effect[3],
    symbol_map = Virtual_dom_Effect[4],
    bind = Virtual_dom_Effect[5],
    return$0 = Virtual_dom_Effect[6],
    map = Virtual_dom_Effect[7],
    join = Virtual_dom_Effect[8],
    ignore_m = Virtual_dom_Effect[9],
    all = Virtual_dom_Effect[10],
    all_unit = Virtual_dom_Effect[11],
    never = Virtual_dom_Effect[12],
    lazy = Virtual_dom_Effect[13],
    print_s = Virtual_dom_Effect[14],
    of_sync_fun = Virtual_dom_Effect[15],
    of_thunk = Virtual_dom_Effect[16],
    Viewport_changed = Virtual_dom_Effect[17],
    Stop_propagation = Virtual_dom_Effect[18],
    Stop_immediate_propagation = Virtual_dom_Effect[19],
    Prevent_default = Virtual_dom_Effect[20],
    sequence_as_sibling = Virtual_dom_Effect[21],
    Define_visibility = Virtual_dom_Effect[22],
    Expert = Virtual_dom_Effect[23],
    Action = [0],
    cst_Reloading_page_skipped_in_ = "Reloading page skipped in test",
    _e_ = [0, [0, cst_web_effect_ml, 71, 2154, 2158]],
    _f_ = [0, [0, cst_web_effect_ml, 71, 2154, 2158]],
    _g_ = [0, [0, cst_web_effect_ml, 71, 2154, 2158]],
    _h_ = [0, [0, cst_web_effect_ml, 70, 2080, 2084]],
    _i_ = [0, [0, cst_web_effect_ml, 70, 2080, 2084]],
    _j_ = [0, [0, cst_web_effect_ml, 70, 2080, 2084]],
    _k_ = [0, [0, cst_web_effect_ml, 70, 2080, 2084]],
    _l_ = [0, [0, cst_web_effect_ml, 70, 2080, 2084]],
    cst_focus_effect_for = "focus effect for",
    cst_blur_effect_for = "blur effect for",
    cst_data_focus_handle$0 = "data-focus-handle",
    _c_ = [0, [0, cst_web_effect_ml, 63, 1835, 1843]],
    _d_ = [0, [0, cst_web_effect_ml, 62, 1794, 1802]],
    cst_data_focus_handle = "[data-focus-handle=",
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Effect = cst_Bonsai_web_Effect$0;
   function handle(param, on_response){
    var f = param[2], a = param[1];
    function _Q_(result){return caml_call1(on_response, result);}
    var
     _R_ = caml_call1(f, a),
     _S_ = caml_call2(Async_kernel_Deferred[16][4][3], _R_, _Q_);
    return caml_call1(Async_kernel[6], _S_);
   }
   var
    Deferred_fun_arg = [0, Action, handle],
    Deferred_fun = caml_call1(Ui_effect[20], Deferred_fun_arg);
   function of_deferred_fun(f, a){
    return caml_call1(Deferred_fun[1], [0, a, f]);
   }
   function of_deferred_thunk(f){return of_deferred_fun(f, 0);}
   function control_focus(on_element, path){
    var
     _N_ = [0, path, [0, caml_call1(Ppx_string_runtime[1][2], cst), 0]],
     _O_ =
       [0, caml_call1(Ppx_string_runtime[1][2], cst_data_focus_handle), _N_],
     _P_ = caml_jsstring_of_string(caml_call1(Ppx_string_runtime[1][4], _O_)),
     element = Js_of_ocaml_Dom_html[2].querySelector(_P_),
     match = caml_call1(Js_of_ocaml_Js[5][10], element);
    if(! match) return 0;
    var element$0 = match[1];
    return caml_call1(on_element, element$0);
   }
   function _a_(element){return element.focus();}
   var
    focus_effect =
      caml_call1(of_sync_fun, function(_M_){return control_focus(_a_, _M_);});
   function _b_(element){return element.blur();}
   var
    blur_effect =
      caml_call1(of_sync_fun, function(_L_){return control_focus(_b_, _L_);});
   function on_effect(name_for_testing, param){
    var _D_ = Bonsai_web_Util[1];
    if(25748998 <= _D_ && 853947087 > _D_){
     var
      _F_ =
        function(path){
         function _J_(path){
          var
           attr =
             caml_call2(Virtual_dom_Vdom[1][1], cst_data_focus_handle$0, path),
           _K_ = caml_call1(blur_effect, path);
          return [0, attr, caml_call1(focus_effect, path), _K_];
         }
         return caml_call3(Bonsai[49][5][8], _c_, path, _J_);
        };
     return caml_call3(Bonsai[49][5][1], _d_, Bonsai[8], _F_);
    }
    function _E_(name_for_testing){
     var
      _G_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name_for_testing), 0],
      _H_ =
        caml_call1
         (print_s,
          [1,
           [0, caml_call1(Sexplib0_Sexp_conv[7], cst_blur_effect_for), _G_]]),
      _I_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name_for_testing), 0];
     return [0,
             caml_call1
              (print_s,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7], cst_focus_effect_for),
                 _I_]]),
             _H_];
    }
    var
     match =
       caml_call3(Core_Option[41], name_for_testing, [0, Ignore, Ignore], _E_),
     print_effect_blur = match[2],
     print_effect_focus = match[1];
    return caml_call1
            (Bonsai[7],
             [0,
              Virtual_dom_Vdom[1][11],
              print_effect_focus,
              print_effect_blur]);
   }
   function on_activate(name_for_testing, param){
    function _n_(pattern_syntax_004){
     function _p_(focus){
      function _t_(attr){
       function _x_(pattern_syntax_007){
        function _z_(param){return caml_call1(Bonsai[49][1], attr);}
        function _A_(param){return 0;}
        var
         _B_ = caml_call3(Bonsai[49][5][4], _e_, pattern_syntax_007, _A_),
         _C_ = caml_call1(Bonsai[49][5][6], _B_);
        return caml_call3(Bonsai[49][5][1], _f_, _C_, _z_);
       }
       var _y_ = caml_call4(Bonsai[44][3], [0, focus], 0, 0, 0);
       return caml_call3(Bonsai[49][5][1], _g_, _y_, _x_);
      }
      function _u_(param){
       var pattern_syntax_005 = param[1];
       return pattern_syntax_005;
      }
      var
       _v_ = caml_call3(Bonsai[49][5][4], _h_, pattern_syntax_004, _u_),
       _w_ = caml_call1(Bonsai[49][5][6], _v_);
      return caml_call3(Bonsai[49][5][1], _i_, _w_, _t_);
     }
     function _q_(param){
      var pattern_syntax_006 = param[2];
      return pattern_syntax_006;
     }
     var
      _r_ = caml_call3(Bonsai[49][5][4], _j_, pattern_syntax_004, _q_),
      _s_ = caml_call1(Bonsai[49][5][6], _r_);
     return caml_call3(Bonsai[49][5][1], _k_, _s_, _p_);
    }
    var _o_ = on_effect(name_for_testing, 0);
    return caml_call3(Bonsai[49][5][1], _l_, _o_, _n_);
   }
   var
    Focus = [0, on_effect, on_activate],
    reload_page =
      caml_call1
       (of_thunk,
        function(param){
         if(95560584 === Bonsai_web_Util[1]){
          var t4 = Js_of_ocaml_Dom_html[8];
          return t4.location.reload();
         }
         var
          _m_ =
            caml_call1(Sexplib0_Sexp_conv[7], cst_Reloading_page_skipped_in_);
         return caml_call2(Core[256], 0, _m_);
        }),
    alert =
      caml_call1
       (of_sync_fun,
        function(s){
         return Js_of_ocaml_Dom_html[8].alert(caml_jsstring_of_string(s));
        });
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Effect);
   var
    Bonsai_web_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       of_thunk,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       Expert,
       of_deferred_fun,
       of_deferred_thunk,
       Focus,
       reload_page,
       alert];
   runtime.caml_register_global
    (46, Bonsai_web_Effect, cst_Bonsai_web_Effect$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__For_introspection
//# unitInfo: Requires: Bonsai_introspection_protocol, Bonsai_web__Effect, Core, Core__List, Core__Or_error, Core__Queue, Core__Sexp, Core__Time_ns, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_For_introspecti$0 = "Bonsai_web__For_introspection",
    cst_bonsai_web$0 = "bonsai_web",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core_Or_error = global_data.Core__Or_error,
    Core_Time_ns = global_data.Core__Time_ns,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect,
    Ui_effect = global_data.Ui_effect,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core = global_data.Core,
    Core_Queue = global_data.Core__Queue,
    Bonsai_introspection_protocol = global_data.Bonsai_introspection_protocol,
    Core_List = global_data.Core__List,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_For_introspecti$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/for_introspection.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_bonsai_web$0, "for_introspection.ml");
   var
    get_id =
      caml_call1(Bonsai_web_Effect[16], Bonsai_introspection_protocol[1][45]),
    queue = caml_call2(Core_Queue[66], 0, 0),
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_For_introspecti = cst_Bonsai_web_For_introspecti$0;
   function pop_events(param){
    var events = caml_call1(Core_Queue[28], queue);
    caml_call1(Core_Queue[51], queue);
    return events;
   }
   function pop_events$0(param){
    var
     _j_ = Bonsai_introspection_protocol[5][2][7],
     _k_ = pop_events(0),
     x_001 = caml_call2(Core_List[51], _k_, _j_),
     _l_ =
       caml_call2(Core[472], Bonsai_introspection_protocol[5][2][2], x_001);
    return runtime.caml_jsstring_of_string(caml_call1(Core_Sexp[85], _l_));
   }
   var global = Js_of_ocaml_Js[52][1];
   function is_recording(param){
    var
     match = caml_call1(Js_of_ocaml_Js[6][10], global.rpcEffectIsRecording);
    if(! match) return 0;
    var x = match[1];
    return x | 0;
   }
   var should_record_effect = caml_call1(Bonsai_web_Effect[16], is_recording);
   function maybe_record_event(event){
    if(! is_recording(0)) return;
    var event$0 = caml_call1(Core[248], event);
    return caml_call2(Core_Queue[43], queue, event$0);
   }
   function start_recording(param){
    var t1 = caml_call1(Js_of_ocaml_Js[6][2], ! ! 1);
    return global.rpcEffectIsRecording = t1;
   }
   function stop_recording(param){
    var t3 = caml_call1(Js_of_ocaml_Js[6][2], ! ! 0);
    return global.rpcEffectIsRecording = t3;
   }
   function run_top_level_side_effects(param){
    var t5 = ! ! 1;
    global.rpcEffectIntrospectionSupported = t5;
    if(! is_recording(0)){
     var t7 = caml_call1(Js_of_ocaml_Js[6][2], ! ! 0);
     global.rpcEffectIsRecording = t7;
    }
    var t9 = caml_js_wrap_callback(start_recording);
    global.rpcEffectStartRecording = t9;
    var t11 = caml_js_wrap_callback(stop_recording);
    global.rpcEffectStopRecording = t11;
    var t13 = caml_js_wrap_callback(pop_events$0);
    return global.rpcEffectPopEvents = t13;
   }
   function send_and_track_rpc
   (rpc_kind,
    get_current_time,
    sexp_of_query,
    sexp_of_response,
    path,
    actually_send_rpc,
    query,
    response_to_event){
    function _d_(id){
     function _e_(start_time){
      var
       start_event =
         [246,
          function(_i_){
           if(sexp_of_query)
            var
             sexp_of_query$0 = sexp_of_query[1],
             query$0 = [0, caml_call1(sexp_of_query$0, query)];
           else
            var query$0 = 0;
           return [0, id, rpc_kind, start_time, query$0, path];
          }];
      maybe_record_event(start_event);
      function _f_(response){
       function _h_(end_time){
        var duration = caml_call2(Core_Time_ns[73], end_time, start_time);
        maybe_record_event
         (caml_call4
           (response_to_event, response, id, duration, sexp_of_response));
        return caml_call1(Bonsai_web_Effect[6], response);
       }
       return caml_call2(Ui_effect[13][4][2], get_current_time, _h_);
      }
      var _g_ = caml_call1(actually_send_rpc, query);
      return caml_call2(Ui_effect[13][4][2], _g_, _f_);
     }
     return caml_call2(Ui_effect[13][4][2], get_current_time, _e_);
    }
    return caml_call2(Ui_effect[13][4][2], get_id, _d_);
   }
   function send_and_track_rpc_from_poller
   (rpc_kind,
    get_current_time,
    sexp_of_query,
    sexp_of_response,
    path,
    actually_send_rpc,
    query){
    return send_and_track_rpc
            (rpc_kind,
             get_current_time,
             sexp_of_query,
             sexp_of_response,
             path,
             actually_send_rpc,
             query,
             function(response, id, duration, sexp_of_response){
              if(! response)
               return [246, function(_c_){return [2, id, duration];}];
              var response$0 = response[1];
              return [246,
                      function(param){
                       function _b_(response){
                        if(! sexp_of_response) return 0;
                        var sexp_of_response$0 = sexp_of_response[1];
                        return [0, caml_call1(sexp_of_response$0, response)];
                       }
                       var
                        response = caml_call2(Core_Or_error[53], response$0, _b_);
                       return [1, id, duration, response];
                      }];
             });
   }
   function send_and_track_rpc_from_dispat
   (rpc_kind,
    get_current_time,
    sexp_of_query,
    sexp_of_response,
    path,
    actually_send_rpc,
    query){
    return send_and_track_rpc
            (rpc_kind,
             get_current_time,
             sexp_of_query,
             sexp_of_response,
             path,
             actually_send_rpc,
             query,
             function(response, id, duration, sexp_of_response){
              return [246,
                      function(param){
                       function _a_(response){
                        if(! sexp_of_response) return 0;
                        var sexp_of_response$0 = sexp_of_response[1];
                        return [0, caml_call1(sexp_of_response$0, response)];
                       }
                       var
                        response$0 = caml_call2(Core_Or_error[53], response, _a_);
                       return [1, id, duration, response$0];
                      }];
             });
   }
   function get_introspection_supported(param){
    return global.rpcEffectIntrospectionSupported | 0;
   }
   var
    For_testing =
      [0,
       get_introspection_supported,
       is_recording,
       pop_events$0,
       pop_events,
       start_recording,
       stop_recording];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_For_introspecti);
   var
    Bonsai_web_For_introspection =
      [0,
       should_record_effect,
       run_top_level_side_effects,
       send_and_track_rpc_from_poller,
       send_and_track_rpc_from_dispat,
       For_testing];
   runtime.caml_register_global
    (30, Bonsai_web_For_introspection, cst_Bonsai_web_For_introspecti$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Forward_performance_entries
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Base__Random, Bonsai__Graph_info, Bonsai__Instrumentation, Bonsai_protocol, Core, Core__Array, Core__Core_bin_prot, Core__Error, Core__Int, Core__Option, Core__Or_error, Core__Time_ns, Javascript_profiling, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__File, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml__PerformanceObserver, Js_of_ocaml__Worker, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Reversed_list, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "/",
    cst$5 = ":",
    cst_Bonsai_web_Forward_perform$0 =
      "Bonsai_web__Forward_performance_entries",
    cst_before$1 = "before",
    cst_bonsai_bug_session_uuid = "bonsai-bug-session-uuid",
    cst_bonsai_web$0 = "bonsai_web",
    cst_https$1 = "https://",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$4,
    cst$3 = cst$5,
    cst$0 = cst$4,
    cst$1 = cst$5,
    cst = "')",
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Core_Or_error = global_data.Core__Or_error,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Javascript_profiling = global_data.Javascript_profiling,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel = global_data.Async_kernel,
    Js_of_ocaml_PerformanceObserve =
      global_data.Js_of_ocaml__PerformanceObserver,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Uuid = global_data.Uuid,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Int = global_data.Core__Int,
    Bonsai_Instrumentation = global_data.Bonsai__Instrumentation,
    Base_Random = global_data.Base__Random,
    Core_Array = global_data.Core__Array,
    Reversed_list = global_data.Reversed_list,
    Bonsai_protocol = global_data.Bonsai_protocol,
    Core_Core_bin_prot = global_data.Core__Core_bin_prot,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_Worker = global_data.Js_of_ocaml__Worker,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Forward_perform$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/forward_performance_entries.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_bonsai_web$0,
     "forward_performance_entries.ml");
   var
    cst_before$0 = cst_before$1,
    cst_before = cst_before$1,
    cst_after = "after",
    _b_ = [0, "measure", 0],
    cst_Re_using_existing_session_ =
      "Re-using existing session uuid. If you no longer have the debugger window open, you can use the following link:",
    cst_Found_existing_session_uui =
      "Found existing session uuid, but could not parse it; generating a new one.",
    cst_No_prior_session_uuid_foun =
      "No prior session uuid found; generating a new one.",
    cst_No_session_storage_generat =
      "No session storage; generating new session uuid",
    cst_https$0 = cst_https$1,
    cst_https = cst_https$1,
    cst_importScripts = "importScripts('",
    _a_ = [0, "application/javascript"],
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Forward_perform = cst_Bonsai_web_Forward_perform$0;
   function send_message(t, message){t[2] = [0, message, t[2]]; return 0;}
   function uuid_to_url(host, port, uuid){
    var
     _A_ = caml_call1(Uuid[11], uuid),
     _B_ = [0, caml_call1(Ppx_string_runtime[1][3], _A_), 0],
     _C_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$0), _B_],
     _D_ = caml_call1(Core_Int[79], port),
     _E_ = [0, caml_call1(Ppx_string_runtime[1][3], _D_), _C_],
     _F_ = [0, host, [0, caml_call1(Ppx_string_runtime[1][2], cst$1), _E_]],
     _G_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_https), _F_];
    return caml_call1(Ppx_string_runtime[1][4], _G_);
   }
   function generate_uuid(param){
    var random_state = Base_Random[19][1];
    return caml_call1(Uuid[46], random_state);
   }
   function instrument(host, port, worker_name, component){
    var
     t16 = Js_of_ocaml_Dom_html[8],
     match = caml_call1(Js_of_ocaml_Js[6][10], t16.sessionStorage);
    if(match){
     var
      storage = match[1],
      _h_ = storage.getItem(cst_bonsai_bug_session_uuid),
      match$0 = caml_call1(Js_of_ocaml_Js[5][10], _h_);
     if(match$0){
      var
       uuid_string = match$0[1],
       _i_ =
         function(param){
          return caml_call1(Uuid[10], caml_string_of_jsstring(uuid_string));
         },
       match$1 = caml_call1(Core_Option[56], _i_);
      if(match$1){
       var uuid = match$1[1];
       caml_call1(Core[32], cst_Re_using_existing_session_);
       var _j_ = uuid_to_url(host, port, uuid);
       caml_call1(Core[32], _j_);
       var reused_uuid = 1, uuid$0 = uuid;
      }
      else{
       caml_call1(Core[32], cst_Found_existing_session_uui);
       var uuid$1 = generate_uuid(0);
       storage.setItem
        (cst_bonsai_bug_session_uuid,
         caml_jsstring_of_string(caml_call1(Uuid[11], uuid$1)));
       var reused_uuid = 0, uuid$0 = uuid$1;
      }
     }
     else{
      caml_call1(Core[32], cst_No_prior_session_uuid_foun);
      var uuid$2 = generate_uuid(0);
      storage.setItem
       (cst_bonsai_bug_session_uuid,
        caml_jsstring_of_string(caml_call1(Uuid[11], uuid$2)));
      var reused_uuid = 0, uuid$0 = uuid$2;
     }
    }
    else{
     caml_call1(Core[32], cst_No_session_storage_generat);
     var uuid$3 = generate_uuid(0), reused_uuid = 0, uuid$0 = uuid$3;
    }
    if(1 - reused_uuid){
     var
      url = uuid_to_url(host, port, uuid$0),
      _k_ = caml_call1(Js_of_ocaml_Js[5][2], "noopener");
     Js_of_ocaml_Dom_html[8].open
      (caml_jsstring_of_string(url), "bonsai-bug", _k_);
    }
    var
     graph_info_dirty = [0, 0],
     graph_info = [0, Bonsai_Graph_info[12]],
     stop_ivar = caml_call1(Async_kernel_Ivar[12], 0),
     got_first_message = [0, 0],
     _l_ =
       [0, caml_call1(Ppx_string_runtime[1][2], cst$2), [0, worker_name, 0]],
     _m_ = caml_call1(Core_Int[79], port),
     _n_ = [0, caml_call1(Ppx_string_runtime[1][3], _m_), _l_],
     _o_ = [0, host, [0, caml_call1(Ppx_string_runtime[1][2], cst$3), _n_]],
     _p_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_https$0), _o_],
     url$0 = caml_call1(Ppx_string_runtime[1][4], _p_),
     _c_ = [0, url$0, [0, caml_call1(Ppx_string_runtime[1][2], cst), 0]],
     _d_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_importScripts), _c_],
     _e_ = caml_call1(Ppx_string_runtime[1][4], _d_),
     blob = caml_call3(Js_of_ocaml_File[1], _a_, 0, _e_),
     t0 = Js_of_ocaml_Dom_html[8],
     blob_url = t0.URL.createObjectURL(blob),
     worker =
       caml_call1(Js_of_ocaml_Worker[1], caml_string_of_jsstring(blob_url)),
     result = [0, 0, 0, worker];
    function _f_(message){
     result[1] = 1;
     message.data;
     if(1 - got_first_message[1]) got_first_message[1] = 1;
     send_message(result, [0, uuid$0]);
     graph_info_dirty[1] = 1;
     var stop = caml_call1(Async_kernel_Ivar[19], stop_ivar);
     function _v_(param){
      if(graph_info_dirty[1]){
       graph_info_dirty[1] = 0;
       send_message(result, [1, [0, graph_info[1]]]);
      }
      if(result[1]){
       var
        message = [3, caml_call1(Reversed_list[3], result[2])],
        js_string =
          runtime.caml_jsbytes_of_string
           (caml_call2
             (Core_Core_bin_prot[1][1], Bonsai_protocol[5][8], message));
       result[3].postMessage(js_string);
       result[2] = 0;
      }
      caml_call1(Javascript_profiling[2], 0);
      return caml_call1(Javascript_profiling[3], 0);
     }
     var _w_ = caml_call1(Core_Time_ns[1][82], 0.2);
     caml_call5(Async_kernel[7], 0, [0, stop], 0, _w_, _v_);
     function f(performance_observer_entry_lis, observer){
      observer.takeRecords();
      function _y_(entry){
       var
        label = caml_string_of_jsstring(entry.name),
        match = caml_call1(Bonsai_Instrumentation[2], label);
       if(match)
        var node_id = match[1], label$0 = [0, 370492634, node_id];
       else
        var label$0 = [0, -912009552, label];
       var
        entry_type = runtime.caml_string_of_jsbytes(entry.entryType),
        start_time = entry.startTime,
        duration = entry.duration,
        entry$0 = [0, label$0, entry_type, start_time, duration];
       return send_message(result, [1, [1, entry$0]]);
      }
      var
       _z_ =
         runtime.caml_js_to_array(performance_observer_entry_lis.getEntries());
      return caml_call2(Core_Array[35], _z_, _y_);
     }
     var
      performance_observer =
        caml_call2(Js_of_ocaml_PerformanceObserve[3], _b_, f);
     function _x_(param){
      performance_observer.disconnect();
      caml_call1(Javascript_profiling[2], 0);
      caml_call1(Javascript_profiling[3], 0);
      result[2] = 0;
      return result[3].terminate();
     }
     caml_call2(Async_kernel_Deferred[4], stop, _x_);
     return Js_of_ocaml_Js[8];
    }
    var t4 = caml_call1(Js_of_ocaml_Dom[10], _f_);
    worker.onmessage = t4;
    function _q_(gi){graph_info[1] = gi; graph_info_dirty[1] = 1; return 0;}
    var component$0 = caml_call2(Bonsai_Graph_info[13], component, _q_);
    function _r_(s){
     var
      before = caml_call2(Core[18], s, cst_before),
      after = caml_call2(Core[18], s, cst_after);
     caml_call1(Javascript_profiling[4][1], after);
     return caml_call3(Javascript_profiling[4][2], s, before, after);
    }
    function _s_(s){
     var _u_ = caml_call2(Core[18], s, cst_before$0);
     return caml_call1(Javascript_profiling[4][1], _u_);
    }
    var
     instrumented_computation =
       caml_call3(Bonsai_Instrumentation[1], component$0, _s_, _r_);
    function shutdown(param){
     return caml_call2(Async_kernel_Ivar[16], stop_ivar, 0);
    }
    function shutdown$0(param){
     var match = caml_call2(Core_Or_error[37], 0, shutdown);
     if(0 === match[0]) return 0;
     var e = match[1], _t_ = caml_call1(Core_Error[9], e);
     return caml_call2(Core[257], 0, _t_);
    }
    function _g_(error_message){
     Js_of_ocaml_Firebug[1].warn(error_message);
     shutdown$0(0);
     return Js_of_ocaml_Js[8];
    }
    var t6 = caml_call1(Js_of_ocaml_Dom[10], _g_), t7 = result[3];
    t7.onerror = t6;
    return [0, instrumented_computation, shutdown$0];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Forward_perform);
   var Bonsai_web_Forward_performance = [0, instrument];
   runtime.caml_register_global
    (78, Bonsai_web_Forward_performance, cst_Bonsai_web_Forward_perform$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Rpc_effect
//# unitInfo: Requires: Async_durable, Async_js__Rpc, Async_kernel, Async_kernel__Bvar, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Persistent_connection, Async_rpc_kernel__Pipe_transport, Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Babel__Caller, Bonsai, Bonsai_web__Effect, Bonsai_web__For_introspection, Bus, CamlinternalLazy, Core, Core__Error, Core__Map, Core__Memo, Core__Option, Core__Or_error, Core__Result, Core__String, Core__Time_ns, Core__Unique_id, Core__Unit, Eager_deferred, Polling_state_rpc, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Streamable__Plain_rpc, Ui_effect, Ui_incr, Ui_time_source, Uri, Versioned_polling_state_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Rpc_effect$0 = "Bonsai_web__Rpc_effect",
    cst_Connected = "Connected",
    cst_Connecting = "Connecting",
    cst_Disconnected = "Disconnected",
    cst_Failed_to_connect = "Failed_to_connect",
    cst_RPC_not_handled_because_no$1 =
      "RPC not handled because no connector has been provided.",
    cst_bonsai_web$0 = "bonsai_web",
    cst_connected = "connected",
    cst_connecting = "connecting",
    cst_connecting_since = "connecting_since",
    cst_disconnected = "disconnected",
    cst_failed_to_connect = "failed_to_connect",
    cst_inflight_query_key = "inflight_query_key",
    cst_last_error = "last_error",
    cst_last_ok_response = "last_ok_response",
    cst_query = "query",
    cst_self_ws_server$1 = "self-ws-server",
    cst_state = "state",
    cst_web_rpc_effect_ml = "web/rpc_effect.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_163 = "web/rpc_effect.ml.Status.State.t",
    Ui_time_source = global_data.Ui_time_source,
    Core_Option = global_data.Core__Option,
    Bonsai = global_data.Bonsai,
    Ui_incr = global_data.Ui_incr,
    Core_Time_ns = global_data.Core__Time_ns,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Sexplib0__Sexp_conv_record;
   var
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Error = global_data.Core__Error,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Babel_Caller = global_data.Babel__Caller,
    Polling_state_rpc = global_data.Polling_state_rpc,
    Ui_effect = global_data.Ui_effect,
    Versioned_polling_state_rpc = global_data.Versioned_polling_state_rpc,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect,
    Eager_deferred = global_data.Eager_deferred,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Bonsai_web_For_introspection = global_data.Bonsai_web__For_introspection,
    Core_Map = global_data.Core__Map,
    Assert_failure = global_data.Assert_failure,
    Core_Or_error = global_data.Core__Or_error,
    Uri = global_data.Uri,
    Async_js_Rpc = global_data.Async_js__Rpc,
    Core_String = global_data.Core__String,
    Async_rpc_kernel_Persistent_co =
      global_data.Async_rpc_kernel__Persistent_connection,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Unit = global_data.Core__Unit,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_durable = global_data.Async_durable,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Pipe_transpor =
      global_data.Async_rpc_kernel__Pipe_transport,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Bus = global_data.Bus,
    Async_kernel_Bvar = global_data.Async_kernel__Bvar,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Memo = global_data.Core__Memo,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Rpc_effect$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_web_rpc_effect_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "rpc_effect.ml");
   caml_call1(Bonsai_web_For_introspection[2], 0);
   var
    Custom = [0],
    Where_to_connect = [0, Custom],
    _bi_ = [0, 0],
    _ba_ = [0, [0, cst_web_rpc_effect_ml, 1260, 38397, 38405]],
    _bb_ = [0, [0, cst_web_rpc_effect_ml, 1259, 38369, 38375]],
    _a9_ = [0, [0, cst_web_rpc_effect_ml, 1266, 38550, 38554]],
    _a__ = [0, [0, cst_web_rpc_effect_ml, 1257, 38289, 38293]],
    _a$_ = [0, [0, cst_web_rpc_effect_ml, 1257, 38289, 38293]],
    _bc_ = [0, [0, cst_web_rpc_effect_ml, 1258, 38306, 38312]],
    _bd_ = [0, [0, cst_web_rpc_effect_ml, 1257, 38289, 38293]],
    _be_ = [0, [0, cst_web_rpc_effect_ml, 1203, 36024, 36028]],
    _bf_ = [0, [0, cst_web_rpc_effect_ml, 1203, 36024, 36028]],
    _bg_ = [0, [0, cst_web_rpc_effect_ml, 1203, 36024, 36028]],
    _bh_ = [0, [0, cst_web_rpc_effect_ml, 1203, 36024, 36028]],
    _bj_ = [0, 0, 0, 0],
    _bk_ = [0, [0, cst_web_rpc_effect_ml, 1203, 36024, 36028]],
    _bl_ = [0, [0, cst_web_rpc_effect_ml, 1202, 35967, 35971]],
    _a7_ = [0, cst_connecting_since],
    _a8_ = [0, cst_state],
    _a5_ = [0, "Set"],
    _a6_ = [0, "Activate"],
    _a2_ = [0, cst_connecting_since],
    _a3_ = [0, "clock"],
    _a4_ = [0, cst_state],
    _a0_ = [0, "State"],
    _a1_ = [0, "Initial"],
    _aW_ = [0, cst_Connecting],
    _aX_ = [0, cst_Connected],
    _aY_ = [0, cst_Disconnected],
    _aZ_ = [0, cst_Failed_to_connect],
    _aV_ = [0, [0, cst_web_rpc_effect_ml, 1095, 33093, 33097]],
    _aU_ = [0, [0, cst_web_rpc_effect_ml, 1072, 32541, 32545]],
    _aT_ = [0, [0, cst_web_rpc_effect_ml, 1049, 31990, 31994]],
    _aS_ = [0, [0, cst_web_rpc_effect_ml, 1017, 31273, 31277]],
    _aQ_ = [0, [0, cst_web_rpc_effect_ml, 985, 30597, 30603]],
    _aR_ = [0, [0, cst_web_rpc_effect_ml, 984, 30572, 30576]],
    cst_web_rpc_effect_ml_941_34 = "web/rpc_effect.ml:941:34",
    _aP_ = [0, [0, cst_web_rpc_effect_ml, 939, 29320, 29326]],
    _aJ_ = [0, 0],
    _aK_ = [0, 0],
    _aF_ = [0, [0, cst_web_rpc_effect_ml, 932, 29052, 29056]],
    _aG_ = [0, [0, cst_web_rpc_effect_ml, 926, 28681, 28685]],
    _aH_ = [0, [0, cst_web_rpc_effect_ml, 926, 28681, 28685]],
    _aI_ = [0, [0, cst_web_rpc_effect_ml, 926, 28681, 28685]],
    _aL_ = [0, [0, cst_web_rpc_effect_ml, 913, 28243, 28249]],
    _aM_ = [0, [0, cst_web_rpc_effect_ml, 898, 27531, 27535]],
    _aN_ = [0, [0, cst_web_rpc_effect_ml, 897, 27472, 27476]],
    _aO_ = [0, [0, cst_web_rpc_effect_ml, 896, 27403, 27407]],
    _aE_ = [0, [0, cst_web_rpc_effect_ml, 878, 26918, 26922]],
    _aD_ = [0, [0, cst_web_rpc_effect_ml, 866, 26484, 26488]],
    _aC_ = [0, [0, cst_web_rpc_effect_ml, 854, 26047, 26051]],
    _az_ = [0, [0, cst_web_rpc_effect_ml, 835, 25471, 25475]],
    _aA_ = [0, [0, cst_web_rpc_effect_ml, 834, 25434, 25438]],
    _aB_ = [0, [0, cst_web_rpc_effect_ml, 833, 25370, 25374]],
    _ax_ = [0, [0, cst_web_rpc_effect_ml, 812, 24769, 24773]],
    _ay_ = [0, [0, cst_web_rpc_effect_ml, 811, 24693, 24697]],
    _av_ = [0, [0, cst_web_rpc_effect_ml, 778, 23919, 23923]],
    _aw_ = [0, [0, cst_web_rpc_effect_ml, 777, 23849, 23853]],
    _at_ = [0, [0, cst_web_rpc_effect_ml, 714, 22399, 22403]],
    _au_ = [0, [0, cst_web_rpc_effect_ml, 713, 22318, 22322]],
    _ar_ = [0, [0, cst_web_rpc_effect_ml, 684, 21649, 21653]],
    _as_ = [0, [0, cst_web_rpc_effect_ml, 683, 21573, 21577]],
    _ap_ = [0, [0, cst_web_rpc_effect_ml, 650, 20813, 20817]],
    _aq_ = [0, [0, cst_web_rpc_effect_ml, 649, 20743, 20747]],
    _an_ = [0, [0, cst_web_rpc_effect_ml, 612, 19625, 19629]],
    _ao_ = [0, [0, cst_web_rpc_effect_ml, 611, 19556, 19560]],
    _af_ = [0, [0, cst_web_rpc_effect_ml, 601, 19276, 19280]],
    _ag_ = [0, [0, cst_web_rpc_effect_ml, 601, 19276, 19280]],
    _ah_ = [0, [0, cst_web_rpc_effect_ml, 601, 19276, 19280]],
    _ai_ = [0, [0, cst_web_rpc_effect_ml, 600, 19216, 19220]],
    _aj_ = [0, [0, cst_web_rpc_effect_ml, 600, 19216, 19220]],
    _ak_ = [0, [0, cst_web_rpc_effect_ml, 600, 19216, 19220]],
    _al_ = [0, [0, cst_web_rpc_effect_ml, 600, 19216, 19220]],
    _am_ = [0, [0, cst_web_rpc_effect_ml, 600, 19216, 19220]],
    _Y_ = [0, [0, cst_web_rpc_effect_ml, 483, 15379, 15383]],
    _Z_ = [0, [0, cst_web_rpc_effect_ml, 482, 15315, 15319]],
    _L_ = [0, cst_web_rpc_effect_ml, 554, 7],
    _M_ = [0, cst_web_rpc_effect_ml, 555, 17855, 17864],
    _N_ = [0, [0, cst_web_rpc_effect_ml, 554, 17821, 17828]],
    _E_ = [0, [0, cst_web_rpc_effect_ml, 559, 17990, 17992]],
    _F_ = [0, [0, cst_web_rpc_effect_ml, 558, 17918, 17920]],
    _G_ = [0, [0, cst_web_rpc_effect_ml, 558, 17918, 17920]],
    _H_ = [0, [0, cst_web_rpc_effect_ml, 558, 17918, 17920]],
    _I_ = [0, [0, cst_web_rpc_effect_ml, 539, 17344, 17346]],
    _J_ = [0, [0, cst_web_rpc_effect_ml, 539, 17344, 17346]],
    _K_ = [0, 0],
    _O_ = [0, [0, cst_web_rpc_effect_ml, 551, 17677, 17685]],
    _P_ = [0, [0, cst_web_rpc_effect_ml, 550, 17649, 17655]],
    _Q_ = [0, [0, cst_web_rpc_effect_ml, 539, 17344, 17346]],
    _R_ = [0, [0, cst_web_rpc_effect_ml, 535, 17269, 17273]],
    _S_ = [0, [0, cst_web_rpc_effect_ml, 534, 17241, 17243]],
    _T_ = [0, [0, cst_web_rpc_effect_ml, 527, 17100, 17102]],
    _U_ = [0, [0, cst_web_rpc_effect_ml, 527, 17100, 17102]],
    _V_ = [0, [0, cst_web_rpc_effect_ml, 527, 17100, 17102]],
    _W_ = [0, [0, cst_web_rpc_effect_ml, 521, 16959, 16963]],
    _X_ = [0, [0, cst_web_rpc_effect_ml, 520, 16938, 16940]],
    ___ = [0, [0, cst_web_rpc_effect_ml, 481, 15278, 15282]],
    _$_ = [0, [0, cst_web_rpc_effect_ml, 480, 15259, 15261]],
    _aa_ = [0, [0, cst_web_rpc_effect_ml, 440, 13608, 13610]],
    _ab_ = [0, [0, cst_web_rpc_effect_ml, 440, 13608, 13610]],
    _ac_ = [0, [0, cst_web_rpc_effect_ml, 440, 13608, 13610]],
    _ad_ = [0, [0, cst_web_rpc_effect_ml, 440, 13608, 13610]],
    _x_ = [0, cst_inflight_query_key],
    _y_ = [0, "response"],
    _z_ = [0, cst_query],
    _A_ = [0, "Finish"],
    _B_ = [0, cst_inflight_query_key],
    _C_ = [0, cst_query],
    _D_ = [0, "Start"],
    _u_ = [0, "inflight_queries"],
    _v_ = [0, cst_last_error],
    _w_ = [0, cst_last_ok_response],
    _ae_ = [0, [0, cst_web_rpc_effect_ml, 440, 13608, 13610]],
    _s_ = [0, [0, cst_web_rpc_effect_ml, 360, 11677, 11681]],
    _t_ = [0, [0, cst_web_rpc_effect_ml, 359, 11604, 11608]],
    _o_ = [0, "refresh"],
    _p_ = [0, "inflight_query"],
    _q_ = [0, cst_last_error],
    _r_ = [0, cst_last_ok_response],
    cst_self_ws_server$0 = cst_self_ws_server$1,
    cst_self_ws_server = cst_self_ws_server$1,
    cst_BUG_no_bonsai_rpc_handler_ = "BUG: no bonsai-rpc handler installed",
    cst_RPC_not_handled_because_no$0 = cst_RPC_not_handled_because_no$1,
    cst_RPC_not_handled_because_no = cst_RPC_not_handled_because_no$1,
    _d_ = [0, cst_web_rpc_effect_ml, 213, 6646, 6704],
    _c_ = [0, cst_web_rpc_effect_ml, 203, 6246, 6291],
    cst_BUG_Skipped_computing_Rvar =
      "BUG: Skipped computing Rvar result because it has already been computed.",
    _b_ = [0, cst_web_rpc_effect_ml, 146, 4664, 4711],
    _a_ = [0, cst_web_rpc_effect_ml, 69, 1912, 1920],
    cst_Bonsai_web_Rpc_effect_conn = "Bonsai_web.Rpc_effect.connector_var",
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Rpc_effect = cst_Bonsai_web_Rpc_effect$0;
   function create_common(f){
    var invalidated = caml_call5(Bus[7], 0, _a_, 0, 0, Core_Error[30]);
    return [0, 0, f, caml_call1(Async_kernel_Bvar[3], 0), invalidated];
   }
   function create(f){return [0, create_common(f)];}
   function return_result(t, result){
    if(2 === t[0])
     var _gf_ = result;
    else{
     var t$0 = t[1];
     if(0 === result[0]){
      var value = result[1];
      t$0[1] = [0, value];
      caml_call2(Async_kernel_Bvar[5], t$0[3], [0, value]);
      var _ge_ = [0, value];
     }
     else{
      var e = result[1];
      t$0[1] = 0;
      caml_call2(Async_kernel_Bvar[5], t$0[3], [1, e]);
      var _ge_ = [1, e];
     }
     var _gf_ = _ge_;
    }
    return caml_call1(Async_kernel_Deferred[12], _gf_);
   }
   function contents(self){
    if(2 === self[0]){
     var v = self[1];
     return caml_call1(Async_kernel_Deferred_or_error[13], v);
    }
    var t = self[1], match = t[1];
    if(typeof match !== "number"){
     var value = match[1];
     return caml_call1(Async_kernel_Deferred_or_error[13], value);
    }
    if(match) return caml_call1(Async_kernel_Bvar[4], t[3]);
    t[1] = 1;
    function _gb_(param){
     if(0 !== param[0]){var e = param[1]; return return_result(self, [1, e]);}
     var value = param[1], match = t[1];
     if(typeof match === "number")
      return match ? return_result(self, [0, value]) : contents(self);
     var
      value$0 = match[1],
      _gd_ = caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Skipped_computing_Rvar);
     caml_call2(Core[257], 0, _gd_);
     return return_result(self, [0, value$0]);
    }
    var _gc_ = caml_call6(Async_kernel_Monitor[18], 0, 0, 0, 0, 0, t[2]);
    return caml_call2(Async_kernel[23][2], _gc_, _gb_);
   }
   function invalidate(param){
    if(2 === param[0]) return 0;
    var t = param[1];
    t[1] = 0;
    return caml_call2(Bus[12], t[4], 0);
   }
   function persistent_connection(Conn, connection){
    var
     menu =
       create
        (function(param){
          function _f$_(connection){
           return caml_call1
                   (Async_rpc_kernel_Versioned_rpc[1][17], connection);
          }
          var _ga_ = caml_call1(Conn[4], connection);
          return caml_call2(Async_kernel[23][2], _ga_, _f$_);
         });
    function _f9_(param){
     if(typeof param === "number" && param) return invalidate(menu);
     return 0;
    }
    var _f__ = caml_call1(Conn[5], connection);
    caml_call4(Bus[20], 0, _f__, _c_, _f9_);
    return [1, Conn, connection, menu];
   }
   function async_durable(connection){
    var
     menu =
       create
        (function(param){
          return caml_call2
                  (Async_durable[3],
                   connection,
                   Async_rpc_kernel_Versioned_rpc[1][17]);
         });
    function _f6_(is_intact){
     var _f8_ = 1 - is_intact;
     return _f8_ ? invalidate(menu) : _f8_;
    }
    var _f7_ = caml_call1(Async_durable[4], connection);
    caml_call4(Bus[20], 0, _f7_, _d_, _f6_);
    return [0, connection, menu];
   }
   function for_test(implementations, connection_state){
    var
     to_server = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     to_client = caml_call3(Async_kernel_Pipe[7], 0, 0, 0);
    function one_connection
    (implementations, connection_state, pipe_to, pipe_from){
     var
      transport =
        caml_call3
         (Async_rpc_kernel_Pipe_transpor[2],
          Async_rpc_kernel_Pipe_transpor[1][1],
          pipe_to[1],
          pipe_from[2]);
     function _f3_(conn){
      var _f5_ = caml_call1(Core_Result[40], conn);
      return caml_call1(Async_kernel[20], _f5_);
     }
     var
      _f4_ =
        caml_call10
         (Async_rpc_kernel_Rpc[5][4],
          implementations,
          0,
          connection_state,
          0,
          0,
          0,
          0,
          0,
          0,
          transport);
     return caml_call2(Async_kernel[23][2], _f4_, _f3_);
    }
    function _fZ_(server_conn){
     return caml_call1(Async_rpc_kernel_Rpc[5][11], server_conn);
    }
    var
     _f0_ =
       one_connection
        ([0, implementations], connection_state, to_server, to_client),
     _f1_ = caml_call2(Async_kernel[23][2], _f0_, _fZ_);
    caml_call1(Async_kernel[6], _f1_);
    var
     connection =
       one_connection(0, function(conn){return 0;}, to_client, to_server);
    return [2,
            connection,
            create
             (function(param){
               function _f2_(connection){
                return caml_call1
                        (Async_rpc_kernel_Versioned_rpc[1][17], connection);
               }
               return caml_call2(Async_kernel[23][2], connection, _f2_);
              })];
   }
   var test_fallback = 0;
   function with_connection(f, where_to_connect, callback){
    try{var val = caml_call1(f, where_to_connect);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return caml_call2(Async_kernel_Deferred_or_error[22], 0, e);
    }
    if(typeof val === "number")
     return caml_call1
             (Async_kernel_Deferred_or_error[26],
              cst_RPC_not_handled_because_no);
    switch(val[0]){
      case 0:
       var connection = val[1];
       return caml_call2(Async_durable[3], connection, callback);
      case 1:
       var
        connection$0 = val[2],
        Conn = val[1],
        _fW_ = function(connection){return caml_call1(callback, connection);},
        _fX_ = caml_call1(Conn[4], connection$0);
       return caml_call2(Async_kernel[23][2], _fX_, _fW_);
      default:
       var
        connection$1 = val[1],
        _fY_ = function(connection){return caml_call1(callback, connection);};
       return caml_call2(Async_kernel[23][2], connection$1, _fY_);
    }
   }
   function with_connection_with_menu(f, where_to_connect, callback){
    try{var val = caml_call1(f, where_to_connect);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return caml_call2(Async_kernel_Deferred_or_error[22], 0, e);
    }
    if(typeof val === "number")
     return caml_call1
             (Async_kernel_Deferred_or_error[26],
              cst_RPC_not_handled_because_no$0);
    switch(val[0]){
      case 0:
       var
        menu = val[2],
        connection = val[1],
        _fM_ =
          function(connection){
           function _fU_(menu){
            return caml_call1
                    (callback,
                     caml_call2
                      (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
           }
           var _fV_ = contents(menu);
           return caml_call2
                   (Async_kernel_Deferred_or_error[19][4][2], _fV_, _fU_);
          };
       return caml_call2(Async_durable[3], connection, _fM_);
      case 1:
       var
        menu$0 = val[3],
        connection$0 = val[2],
        Conn = val[1],
        _fN_ =
          function(connection){
           function _fS_(menu){
            return caml_call1
                    (callback,
                     caml_call2
                      (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
           }
           var _fT_ = contents(menu$0);
           return caml_call2
                   (Async_kernel_Deferred_or_error[19][4][2], _fT_, _fS_);
          },
        _fO_ = caml_call1(Conn[4], connection$0);
       return caml_call2(Async_kernel[23][2], _fO_, _fN_);
      default:
       var
        menu$1 = val[2],
        connection$1 = val[1],
        _fP_ =
          function(connection){
           function _fQ_(menu){
            return caml_call1
                    (callback,
                     caml_call2
                      (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
           }
           var _fR_ = contents(menu$1);
           return caml_call2
                   (Async_kernel_Deferred_or_error[19][4][2], _fR_, _fQ_);
          };
       return caml_call2(Async_kernel[23][2], connection$1, _fP_);
    }
   }
   var _e_ = 0;
   function _f_(param){
    return caml_call1(Core[6], cst_BUG_no_bonsai_rpc_handler_);
   }
   var
    connector_var =
      caml_call4(Bonsai[47][1], 0, cst_Bonsai_web_Rpc_effect_conn, _f_, _e_);
   function with_connector(connector, computation){
    var _fL_ = caml_call1(Bonsai[2][1], connector);
    return caml_call3(Bonsai[47][3], connector_var, _fL_, computation);
   }
   var
    _g_ =
      [246,
       function(param){
        var
         _fH_ = Async_kernel_Deferred_or_error[13],
         _fI_ = [0, Core_Unit[20], Core_Unit[10]];
        function _fJ_(param){
         return caml_call5(Async_js_Rpc[1][22], 0, 0, 0, 0, 0);
        }
        var
         _fK_ =
           caml_call8
            (Async_rpc_kernel_Persistent_co[1][3],
             cst_self_ws_server,
             0,
             0,
             0,
             0,
             _fJ_,
             _fI_,
             _fH_);
        return persistent_connection(Async_rpc_kernel_Persistent_co[1], _fK_);
       }];
   function self_connector(param){
    var _fG_ = caml_obj_tag(_g_);
    if(250 === _fG_) return _g_[1];
    if(246 !== _fG_ && 244 !== _fG_) return _g_;
    return caml_call1(CamlinternalLazy[2], _g_);
   }
   function _h_(url){
    function _fB_(param){
     return caml_call1(Async_kernel_Deferred_or_error[13], url);
    }
    var _fC_ = [0, Core_String[145], Core_String[135]];
    function _fD_(url){
     var _fF_ = [0, caml_call1(Uri[7], url)];
     return caml_call5(Async_js_Rpc[1][22], _fF_, 0, 0, 0, 0);
    }
    var
     _fE_ =
       caml_call8
        (Async_rpc_kernel_Persistent_co[1][3],
         cst_self_ws_server$0,
         0,
         0,
         0,
         0,
         _fD_,
         _fC_,
         _fB_);
    return persistent_connection(Async_rpc_kernel_Persistent_co[1], _fE_);
   }
   var
    _i_ = Core_String[160],
    _j_ = _i_[2],
    _k_ = _i_[1],
    _l_ = Core_String[159],
    _m_ = _l_[2],
    _n_ = _l_[1],
    url_connector =
      caml_call2
       (Core_Memo[4],
        [0,
         Core_String[139],
         Core_String[140],
         Core_String[141],
         Core_String[142],
         Core_String[143],
         Core_String[144],
         Core_String[145],
         Core_String[146],
         Core_String[147],
         Core_String[148],
         Core_String[149],
         Core_String[150],
         Core_String[151],
         Core_String[152],
         Core_String[153],
         Core_String[158],
         Core_String[154],
         Core_String[155],
         Core_String[156],
         Core_String[157],
         [0,
          [0, _n_[10], _n_[11]],
          _l_[3],
          _l_[4],
          _l_[45],
          _l_[5],
          _l_[6],
          _l_[7],
          _l_[8],
          _l_[9],
          _l_[10],
          _l_[11],
          _l_[12],
          _l_[13],
          _l_[14],
          _l_[15],
          _l_[16],
          _l_[17],
          _l_[18],
          _l_[19],
          _l_[20],
          _l_[21],
          _l_[22],
          _l_[23],
          _l_[24],
          _l_[25],
          _l_[26],
          _l_[27],
          _l_[28],
          _l_[29],
          _l_[30],
          _l_[31],
          _l_[32],
          _l_[33],
          _l_[34],
          _l_[35],
          _l_[36],
          _l_[37],
          [0, _m_[10], _m_[11], _m_[12], _m_[13]],
          _l_[38],
          _l_[39],
          _l_[40],
          _l_[41],
          _l_[42],
          _l_[43]],
         [0,
          [0, _k_[2], _k_[11]],
          _i_[3],
          _i_[4],
          _i_[28],
          [0, _j_[10], _j_[11], _j_[12], _j_[13]],
          _i_[5],
          _i_[6],
          _i_[7],
          _i_[8],
          _i_[9],
          _i_[10],
          _i_[11],
          _i_[12],
          _i_[13],
          _i_[14],
          _i_[15],
          _i_[16],
          _i_[17],
          _i_[18],
          _i_[19],
          _i_[20],
          _i_[21],
          _i_[22],
          _i_[23],
          _i_[24],
          _i_[25],
          _i_[26]]],
        _h_);
   function is_test_fallback(connector){
    return typeof connector === "number" ? 1 : 0;
   }
   function sexp_of_t(of_query_012, of_response_013, param){
    var
     refresh_029 = param[4],
     inflight_query_027 = param[3],
     last_error_021 = param[2],
     last_ok_response_015 = param[1],
     arg_030 = caml_call1(Sexplib0_Sexp_conv[23], refresh_029),
     bnds_014 = [0, [1, [0, _o_, [0, arg_030, 0]]], 0],
     arg_028 = caml_call2(Core[515], of_query_012, inflight_query_027),
     bnds_014$0 = [0, [1, [0, _p_, [0, arg_028, 0]]], bnds_014];
    function _fz_(param){
     var
      arg1_024 = param[2],
      arg0_023 = param[1],
      res0_025 = caml_call1(of_query_012, arg0_023),
      res1_026 = caml_call1(Core_Error[9], arg1_024);
     return [1, [0, res0_025, [0, res1_026, 0]]];
    }
    var
     arg_022 = caml_call2(Core[515], _fz_, last_error_021),
     bnds_014$1 = [0, [1, [0, _q_, [0, arg_022, 0]]], bnds_014$0];
    function _fA_(param){
     var
      arg1_018 = param[2],
      arg0_017 = param[1],
      res0_019 = caml_call1(of_query_012, arg0_017),
      res1_020 = caml_call1(of_response_013, arg1_018);
     return [1, [0, res0_019, [0, res1_020, 0]]];
    }
    var
     arg_016 = caml_call2(Core[515], _fA_, last_ok_response_015),
     bnds_014$2 = [0, [1, [0, _r_, [0, arg_016, 0]]], bnds_014$1];
    return [1, bnds_014$2];
   }
   var Poll_result = [0, sexp_of_t], create$0 = Bonsai[45][1];
   function lookup(sexp_of_model, equal, memo, query){
    function _fw_(res){
     function _fy_(param){
      if(! param) return [0, 0, 0, 0, Bonsai_web_Effect[1]];
      var x = param[1];
      return x;
     }
     return caml_call3(Bonsai[49][5][8], _s_, res, _fy_);
    }
    var _fx_ = caml_call4(Bonsai[45][2], sexp_of_model, equal, memo, query);
    return caml_call3(Bonsai[49][5][1], _t_, _fx_, _fw_);
   }
   var Inflight_query_key = caml_call1(Core_Unique_id[1], 0);
   function generic_poll_or_error
   (rpc_kind,
    sexp_of_query$0,
    sexp_of_response$0,
    equal_query,
    equal_response$0,
    opt,
    _dK_,
    dispatcher,
    every,
    poll_behavior,
    query){
    if(opt)
     var sth$0 = opt[1], clear_when_deactivated = sth$0;
    else
     var clear_when_deactivated = 1;
    if(_dK_)
     var sth$1 = _dK_[1], on_response_received = sth$1;
    else
     var
      _dN_ = function(param, _fv_){return Bonsai_web_Effect[1];},
      on_response_received = caml_call1(Bonsai[2][1], _dN_);
    if(equal_response$0)
     var sth = equal_response$0[1], equal_response = sth;
    else
     var equal_response = function(_fu_, _ft_){return _fu_ === _ft_ ? 1 : 0;};
    var
     sexp_of_query = caml_call2(Core_Option[39], sexp_of_query$0, Core[149]),
     sexp_of_response =
       caml_call2(Core_Option[39], sexp_of_response$0, Core[149]);
    function sexp_of_t(param){
     var
      inflight_queries_045 = param[3],
      last_error_039 = param[2],
      last_ok_response_033 = param[1],
      arg_046 =
        caml_call2
         (Inflight_query_key[33][45], sexp_of_query, inflight_queries_045),
      bnds_032 = [0, [1, [0, _u_, [0, arg_046, 0]]], 0];
     function _fr_(param){
      var
       arg1_042 = param[2],
       arg0_041 = param[1],
       res0_043 = caml_call1(sexp_of_query, arg0_041),
       res1_044 = caml_call1(Core_Error[9], arg1_042);
      return [1, [0, res0_043, [0, res1_044, 0]]];
     }
     var
      arg_040 = caml_call2(Core[515], _fr_, last_error_039),
      bnds_032$0 = [0, [1, [0, _v_, [0, arg_040, 0]]], bnds_032];
     function _fs_(param){
      var
       arg1_036 = param[2],
       arg0_035 = param[1],
       res0_037 = caml_call1(sexp_of_query, arg0_035),
       res1_038 = caml_call1(sexp_of_response, arg1_036);
      return [1, [0, res0_037, [0, res1_038, 0]]];
     }
     var
      arg_034 = caml_call2(Core[515], _fs_, last_ok_response_033),
      bnds_032$1 = [0, [1, [0, _w_, [0, arg_034, 0]]], bnds_032$0];
     return [1, bnds_032$1];
    }
    function sexp_of_t$0(param){
     if(0 === param[0]){
      var
       inflight_query_key_068 = param[3],
       response_066 = param[2],
       query_064 = param[1],
       arg_069 = caml_call1(Inflight_query_key[10], inflight_query_key_068),
       bnds_063 = [0, [1, [0, _x_, [0, arg_069, 0]]], 0],
       _fq_ = caml_call1(Core_Or_error[17], sexp_of_response),
       arg_067 = caml_call2(Bonsai[46][1][2], _fq_, response_066),
       bnds_063$0 = [0, [1, [0, _y_, [0, arg_067, 0]]], bnds_063],
       arg_065 = caml_call1(sexp_of_query, query_064),
       bnds_063$1 = [0, [1, [0, _z_, [0, arg_065, 0]]], bnds_063$0];
      return [1, [0, _A_, bnds_063$1]];
     }
     var
      inflight_query_key_073 = param[2],
      query_071 = param[1],
      arg_074 = caml_call1(Inflight_query_key[10], inflight_query_key_073),
      bnds_070 = [0, [1, [0, _B_, [0, arg_074, 0]]], 0],
      arg_072 = caml_call1(sexp_of_query, query_071),
      bnds_070$0 = [0, [1, [0, _C_, [0, arg_072, 0]]], bnds_070];
     return [1, [0, _D_, bnds_070$0]];
    }
    var default_model = [0, 0, 0, Inflight_query_key[33][5]];
    function _dE_(pattern_syntax_075){
     function _ef_(response){
      function _ej_(inject_response){
       function _en_(effect){
        function _eJ_(callback){
         function _eM_(pattern_syntax_096){
          function _eO_(param){
           function _eS_(send_rpc_effect){
            function _eW_(pattern_syntax_101){
             function _fb_(param){
              function _ff_(pattern_syntax_109){
               function _fh_(param){
                function _fl_(param){
                 var
                  send_rpc_effect = param[2],
                  match = param[1],
                  inflight_queries = match[3],
                  last_error = match[2],
                  last_ok_response = match[1];
                 function _fn_(_fp_){return _fp_[2];}
                 var
                  _fo_ = caml_call1(Core_Map[92], inflight_queries),
                  inflight_query = caml_call2(Core_Option[34], _fo_, _fn_);
                 return [0,
                         last_ok_response,
                         last_error,
                         inflight_query,
                         send_rpc_effect];
                }
                var
                 _fm_ =
                   caml_call2(Bonsai[49][5][7], response, send_rpc_effect);
                return caml_call3(Bonsai[49][5][8], _E_, _fm_, _fl_);
               }
               function _fi_(param){return 0;}
               var
                _fj_ =
                  caml_call3(Bonsai[49][5][4], _F_, pattern_syntax_109, _fi_),
                _fk_ = caml_call1(Bonsai[49][5][6], _fj_);
               return caml_call3(Bonsai[49][5][1], _G_, _fk_, _fh_);
              }
              var
               _fg_ = caml_call4(Bonsai[44][3], [0, send_rpc_effect], 0, 0, 0);
              return caml_call3(Bonsai[49][5][1], _H_, _fg_, _ff_);
             }
             function _fc_(param){return 0;}
             var
              _fd_ =
                caml_call3(Bonsai[49][5][4], _I_, pattern_syntax_101, _fc_),
              _fe_ = caml_call1(Bonsai[49][5][6], _fd_);
             return caml_call3(Bonsai[49][5][1], _J_, _fe_, _fb_);
            }
            var
             clock =
               caml_call4
                (Bonsai[43][5], 584040262, _K_, every, send_rpc_effect);
            if(poll_behavior)
             var
              _eX_ =
                function(should_poll){
                 function _e7_(pattern_syntax_108){
                  function _e9_(param){
                   if(0 === param) return clock;
                   if(1 === param) return caml_call1(Bonsai[7], 0);
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _L_], 1);
                  }
                  var _e__ = 2;
                  function _e$_(param){return param ? 0 : 1;}
                  var
                   _fa_ =
                     caml_call3(Bonsai[49][5][4], 0, pattern_syntax_108, _e$_);
                  return caml_call4(Bonsai[49][5][3], _M_, _fa_, _e__, _e9_);
                 }
                 var _e8_ = caml_call1(Bonsai[49][5][6], should_poll);
                 return caml_call3(Bonsai[49][5][1], _N_, _e8_, _e7_);
                },
              _eY_ =
                function(param){
                 var
                  last_error = param[2],
                  last_ok_response = param[1],
                  _e6_ = caml_call1(Core_Option[61], last_ok_response);
                 return _e6_ ? _e6_ : caml_call1(Core_Option[62], last_error);
                },
              _eZ_ =
                function(param, _e3_){
                 var
                  new_for_cutoff_103 = _e3_[2],
                  new_for_cutoff_105 = _e3_[1],
                  old_for_cutoff_104 = param[2],
                  old_for_cutoff_106 = param[1],
                  _e4_ = old_for_cutoff_106 === new_for_cutoff_105 ? 1 : 0,
                  _e5_ =
                    _e4_
                     ? old_for_cutoff_104 === new_for_cutoff_103 ? 1 : 0
                     : _e4_;
                 return _e5_;
                },
              _e0_ = caml_call2(Bonsai[49][5][2], response, _eZ_),
              _e1_ = caml_call3(Bonsai[49][5][8], _O_, _e0_, _eY_),
              _e2_ = caml_call3(Bonsai[49][5][1], _P_, _e1_, _eX_);
            else
             var _e2_ = clock;
            return caml_call3(Bonsai[49][5][1], _Q_, _e2_, _eW_);
           }
           function _eT_(param){
            var query = param[2], effect = param[1];
            return caml_call1(effect, query);
           }
           var
            _eU_ = caml_call2(Bonsai[49][5][7], effect, query),
            _eV_ = caml_call3(Bonsai[49][5][8], _R_, _eU_, _eT_);
           return caml_call3(Bonsai[49][5][1], _S_, _eV_, _eS_);
          }
          function _eP_(param){return 0;}
          var
           _eQ_ = caml_call3(Bonsai[49][5][4], _T_, pattern_syntax_096, _eP_),
           _eR_ = caml_call1(Bonsai[49][5][6], _eQ_);
          return caml_call3(Bonsai[49][5][1], _U_, _eR_, _eO_);
         }
         var
          _eN_ =
            caml_call4
             (Bonsai[44][2], [0, sexp_of_query], equal_query, query, callback);
         return caml_call3(Bonsai[49][5][1], _V_, _eN_, _eM_);
        }
        function _eK_(effect, prev, query){
         return prev ? caml_call1(effect, query) : Bonsai_web_Effect[1];
        }
        var _eL_ = caml_call3(Bonsai[49][5][8], _W_, effect, _eK_);
        return caml_call3(Bonsai[49][5][1], _X_, _eL_, _eJ_);
       }
       function _eo_(let_syntax_087){
        function _eq_(get_current_time){
         function _er_(param){
          var
           _ew_ = param[2],
           _ex_ = _ew_[2],
           match = _ex_[2],
           path = match[2],
           get_current_time = match[1],
           on_response_received = _ex_[1],
           inject_response = _ew_[1],
           dispatcher = param[1];
          function actually_send_rpc(query){
           function _eB_(inflight_query_key){
            function _eD_(param){
             function _eF_(response){
              function _eH_(param){
               return caml_call1(Bonsai_web_Effect[6], response);
              }
              var
               _eI_ =
                 caml_call1
                  (inject_response, [0, query, response, inflight_query_key]);
              return caml_call2(Ui_effect[13][4][2], _eI_, _eH_);
             }
             var _eG_ = caml_call1(dispatcher, query);
             return caml_call2(Ui_effect[13][4][2], _eG_, _eF_);
            }
            var
             _eE_ =
               caml_call1(inject_response, [1, query, inflight_query_key]);
            return caml_call2(Ui_effect[13][4][2], _eE_, _eD_);
           }
           var
            _eC_ =
              caml_call2(Bonsai_web_Effect[15], Inflight_query_key[45], 0);
           return caml_call2(Ui_effect[13][4][2], _eC_, _eB_);
          }
          return function(query){
           function _ey_(response){
            if(! response) return Bonsai_web_Effect[1];
            var response$0 = response[1];
            return caml_call2(on_response_received, query, response$0);
           }
           function _ez_(param){
            return param
                    ? caml_call7
                      (Bonsai_web_For_introspection[3],
                       rpc_kind,
                       get_current_time,
                       sexp_of_query$0,
                       sexp_of_response$0,
                       path,
                       actually_send_rpc,
                       query)
                    : actually_send_rpc(query);
           }
           var
            _eA_ =
              caml_call2
               (Ui_effect[13][4][2], Bonsai_web_For_introspection[1], _ez_);
           return caml_call2(Ui_effect[13][4][2], _eA_, _ey_);};
         }
         var
          _es_ =
            caml_call2(Bonsai[49][5][7], get_current_time, let_syntax_087),
          _et_ = caml_call2(Bonsai[49][5][7], on_response_received, _es_),
          _eu_ = caml_call2(Bonsai[49][5][7], inject_response, _et_),
          _ev_ = caml_call2(Bonsai[49][5][7], dispatcher, _eu_);
         return caml_call3(Bonsai[49][5][8], _Y_, _ev_, _er_);
        }
        return caml_call3(Bonsai[49][5][1], _Z_, Bonsai[43][6], _eq_);
       }
       var _ep_ = caml_call3(Bonsai[49][5][1], ___, Bonsai[8], _eo_);
       return caml_call3(Bonsai[49][5][1], _$_, _ep_, _en_);
      }
      function _ek_(param){
       var pattern_syntax_076 = param[2];
       return pattern_syntax_076;
      }
      var
       _el_ = caml_call3(Bonsai[49][5][4], _aa_, pattern_syntax_075, _ek_),
       _em_ = caml_call1(Bonsai[49][5][6], _el_);
      return caml_call3(Bonsai[49][5][1], _ab_, _em_, _ej_);
     }
     function _eg_(param){
      var pattern_syntax_077 = param[1];
      return pattern_syntax_077;
     }
     var
      _eh_ = caml_call3(Bonsai[49][5][4], _ac_, pattern_syntax_075, _eg_),
      _ei_ = caml_call1(Bonsai[49][5][6], _eh_);
     return caml_call3(Bonsai[49][5][1], _ad_, _ei_, _ef_);
    }
    var
     _dF_ = caml_call1(Bonsai[5][1], 0),
     _dG_ = caml_call1(Bonsai[5][5], _dF_);
    function _dH_(param, computation_status, model, action){
     var should_ignore = computation_status ? 0 : clear_when_deactivated;
     if(should_ignore) return default_model;
     if(0 !== action[0]){
      var
       inflight_query_key$0 = action[2],
       query$0 = action[1],
       _ee_ =
         caml_call3(Core_Map[37], model[3], inflight_query_key$0, query$0);
      return [0, model[1], model[2], _ee_];
     }
     var
      inflight_query_key = action[3],
      response = action[2],
      query = action[1];
     if(response){
      var match = response[1];
      if(0 === match[0])
       var
        response$0 = match[1],
        last_error = 0,
        last_ok_response = [0, [0, query, response$0]];
      else
       var
        error = match[1],
        last_error = [0, [0, query, error]],
        last_ok_response = model[1];
     }
     else
      var
       last_error$0 = model[2],
       last_ok_response$0 = model[1],
       last_error = last_error$0,
       last_ok_response = last_ok_response$0;
     return [0,
             last_ok_response,
             last_error,
             caml_call2(Core_Map[47], model[3], inflight_query_key)];
    }
    var
     _dI_ =
       [0,
        function(a_078, b_079){
         if(a_078 === b_079) return 1;
         var _d2_ = b_079[1], _d3_ = a_078[1];
         function _d4_(a_049, b_050){
          var
           t_052 = a_049[2],
           t_051 = a_049[1],
           t_054 = b_050[2],
           t_053 = b_050[1],
           _ed_ = caml_call2(equal_query, t_051, t_053);
          return _ed_ ? caml_call2(equal_response, t_052, t_054) : _ed_;
         }
         var _d5_ = caml_call3(Core[511], _d4_, _d3_, _d2_);
         if(_d5_){
          var
           _d6_ = b_079[2],
           _d7_ = a_078[2],
           _d8_ =
             function(a_055, b_056){
              var
               t_058 = a_055[2],
               t_057 = a_055[1],
               t_060 = b_056[2],
               t_059 = b_056[1],
               _ec_ = caml_call2(equal_query, t_057, t_059);
              return _ec_ ? caml_call2(Core_Error[3], t_058, t_060) : _ec_;
             },
           _d9_ = caml_call3(Core[511], _d8_, _d7_, _d6_);
          if(_d9_){
           var
            _d__ = b_079[3],
            _d$_ = a_078[3],
            _ea_ =
              function(a_061, b_062){
               return caml_call2(equal_query, a_061, b_062);
              };
           return caml_call3(Inflight_query_key[33][4], _ea_, _d$_, _d__);
          }
          var _eb_ = _d9_;
         }
         else
          var _eb_ = _d5_;
         return _eb_;
        }],
     _dJ_ =
       caml_call7
        (Bonsai[18],
         [0, sexp_of_t$0],
         0,
         [0, sexp_of_t],
         _dI_,
         default_model,
         _dH_,
         _dG_),
     c = caml_call3(Bonsai[49][5][1], _ae_, _dJ_, _dE_);
    if(! clear_when_deactivated) return c;
    function _dL_(pattern_syntax_113){
     function _dO_(result){
      function _dS_(reset){
       function _dW_(pattern_syntax_116){
        function _dY_(param){return caml_call1(Bonsai[49][1], result);}
        function _dZ_(param){return 0;}
        var
         _d0_ = caml_call3(Bonsai[49][5][4], _af_, pattern_syntax_116, _dZ_),
         _d1_ = caml_call1(Bonsai[49][5][6], _d0_);
        return caml_call3(Bonsai[49][5][1], _ag_, _d1_, _dY_);
       }
       var _dX_ = caml_call4(Bonsai[44][3], 0, [0, reset], 0, 0);
       return caml_call3(Bonsai[49][5][1], _ah_, _dX_, _dW_);
      }
      function _dT_(param){
       var pattern_syntax_114 = param[2];
       return pattern_syntax_114;
      }
      var
       _dU_ = caml_call3(Bonsai[49][5][4], _ai_, pattern_syntax_113, _dT_),
       _dV_ = caml_call1(Bonsai[49][5][6], _dU_);
      return caml_call3(Bonsai[49][5][1], _aj_, _dV_, _dS_);
     }
     function _dP_(param){
      var pattern_syntax_115 = param[1];
      return pattern_syntax_115;
     }
     var
      _dQ_ = caml_call3(Bonsai[49][5][4], _ak_, pattern_syntax_113, _dP_),
      _dR_ = caml_call1(Bonsai[49][5][6], _dQ_);
     return caml_call3(Bonsai[49][5][1], _al_, _dR_, _dO_);
    }
    var _dM_ = caml_call1(Bonsai[39], c);
    return caml_call3(Bonsai[49][5][1], _am_, _dM_, _dL_);
   }
   function generic_dispatcher(dispatcher){
    function _dA_(connector){
     function _dC_(connector){
      var _dD_ = caml_call1(dispatcher, connector);
      return caml_call1(Bonsai_web_Effect[24], _dD_);
     }
     return caml_call3(Bonsai[49][5][8], _an_, connector, _dC_);
    }
    var _dB_ = caml_call1(Bonsai[47][5], connector_var);
    return caml_call3(Bonsai[49][5][1], _ao_, _dB_, _dA_);
   }
   function dispatcher_internal(rpc, where_to_connect){
    return generic_dispatcher
            (function(connector, query){
              return with_connection
                      (connector,
                       where_to_connect,
                       function(connection){
                        return caml_call3
                                (Async_rpc_kernel_Rpc[6][16], rpc, connection, query);
                       });
             });
   }
   function babel_dispatcher_internal(rpc, where_to_connect){
    return generic_dispatcher
            (function(connector, query){
              return with_connection_with_menu
                      (connector,
                       where_to_connect,
                       function(connection){
                        return caml_call3
                                (Babel_Caller[6][1], rpc, connection, query);
                       });
             });
   }
   function streamable_dispatcher_internal(rpc, where_to_connect){
    return generic_dispatcher
            (function(connector, query){
              return with_connection
                      (connector,
                       where_to_connect,
                       function(connection){
                        return caml_call3
                                (Streamable_Plain_rpc[2], rpc, connection, query);
                       });
             });
   }
   function poll
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every,
    query){
    function _dv_(dispatcher){
     function _dx_(dispatcher){
      var _dz_ = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc);
      return generic_poll_or_error
              ([0,
                caml_call1(Async_rpc_kernel_Rpc[6][2], rpc),
                _dz_,
                [1, every]],
               sexp_of_query,
               sexp_of_response,
               equal_query,
               equal_response,
               clear_when_deactivated,
               on_response_received,
               dispatcher,
               every,
               0,
               query);
     }
     var _dy_ = caml_call1(Bonsai[46][2], dispatcher);
     return caml_call3(Bonsai[49][5][1], _ap_, _dy_, _dx_);
    }
    var _dw_ = dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aq_, _dw_, _dv_);
   }
   function babel_poll
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every,
    query){
    function _dr_(dispatcher){
     function _dt_(dispatcher){
      return generic_poll_or_error
              ([1, caml_call1(Babel_Caller[2], rpc), [1, every]],
               sexp_of_query,
               sexp_of_response,
               equal_query,
               equal_response,
               clear_when_deactivated,
               on_response_received,
               dispatcher,
               every,
               0,
               query);
     }
     var _du_ = caml_call1(Bonsai[46][2], dispatcher);
     return caml_call3(Bonsai[49][5][1], _ar_, _du_, _dt_);
    }
    var _ds_ = babel_dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _as_, _ds_, _dr_);
   }
   function streamable_poll
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every,
    query){
    function _dn_(dispatcher){
     function _dp_(dispatcher){
      var
       match = caml_call1(Streamable_Plain_rpc[1], rpc),
       version = match[2],
       name = match[1];
      return generic_poll_or_error
              ([2, name, version, [1, every]],
               sexp_of_query,
               sexp_of_response,
               equal_query,
               equal_response,
               clear_when_deactivated,
               on_response_received,
               dispatcher,
               every,
               0,
               query);
     }
     var _dq_ = caml_call1(Bonsai[46][2], dispatcher);
     return caml_call3(Bonsai[49][5][1], _at_, _dq_, _dp_);
    }
    var _do_ = streamable_dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _au_, _do_, _dn_);
   }
   function shared_poller
   (Q,
    sexp_of_response,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every){
    var sexp_of_t = Q[1];
    function equal(a, b){
     var _dm_ = caml_call2(Q[2][1], a, b);
     return caml_call2(Core[90], _dm_, 0);
    }
    return caml_call2
            (create$0,
             Q,
             function(query){
              return poll
                      ([0, sexp_of_t],
                       sexp_of_response,
                       equal,
                       equal_response,
                       clear_when_deactivated,
                       on_response_received,
                       rpc,
                       where_to_connect,
                       every,
                       query);
             });
   }
   function poll_until_ok
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    retry_interval,
    query){
    function _dh_(dispatcher){
     function _dj_(dispatcher){
      var _dl_ = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc);
      return generic_poll_or_error
              ([0,
                caml_call1(Async_rpc_kernel_Rpc[6][2], rpc),
                _dl_,
                [0, retry_interval]],
               sexp_of_query,
               sexp_of_response,
               equal_query,
               equal_response,
               clear_when_deactivated,
               on_response_received,
               dispatcher,
               retry_interval,
               1,
               query);
     }
     var _dk_ = caml_call1(Bonsai[46][2], dispatcher);
     return caml_call3(Bonsai[49][5][1], _av_, _dk_, _dj_);
    }
    var _di_ = dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aw_, _di_, _dh_);
   }
   function babel_poll_until_ok
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    retry_interval,
    query){
    function _dd_(dispatcher){
     function _df_(dispatcher){
      return generic_poll_or_error
              ([1, caml_call1(Babel_Caller[2], rpc), [0, retry_interval]],
               sexp_of_query,
               sexp_of_response,
               equal_query,
               equal_response,
               clear_when_deactivated,
               on_response_received,
               dispatcher,
               retry_interval,
               1,
               query);
     }
     var _dg_ = caml_call1(Bonsai[46][2], dispatcher);
     return caml_call3(Bonsai[49][5][1], _ax_, _dg_, _df_);
    }
    var _de_ = babel_dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _ay_, _de_, _dd_);
   }
   function maybe_track
   (sexp_of_query, sexp_of_response, rpc_kind, let_syntax_131){
    function _c9_(let_syntax_132){
     function _c__(path){
      function _c$_(param, query){
       var
        match = param[2],
        path = match[2],
        get_current_time = match[1],
        dispatcher = param[1];
       function _dc_(param){
        return param
                ? caml_call7
                  (Bonsai_web_For_introspection[4],
                   rpc_kind,
                   get_current_time,
                   sexp_of_query,
                   sexp_of_response,
                   path,
                   dispatcher,
                   query)
                : caml_call1(dispatcher, query);
       }
       return caml_call2
               (Ui_effect[13][4][2], Bonsai_web_For_introspection[1], _dc_);
      }
      var
       _da_ = caml_call2(Bonsai[49][5][7], let_syntax_132, path),
       _db_ = caml_call2(Bonsai[49][5][7], let_syntax_131, _da_);
      return caml_call3(Bonsai[49][5][8], _az_, _db_, _c$_);
     }
     return caml_call3(Bonsai[49][5][1], _aA_, Bonsai[8], _c__);
    }
    return caml_call3(Bonsai[49][5][1], _aB_, Bonsai[43][6], _c9_);
   }
   function dispatcher(sexp_of_query, sexp_of_response, rpc, where_to_connect){
    function _c6_(dispatcher){
     var _c8_ = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc);
     return maybe_track
             (sexp_of_query,
              sexp_of_response,
              [0, caml_call1(Async_rpc_kernel_Rpc[6][2], rpc), _c8_, 0],
              dispatcher);
    }
    var _c7_ = dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aC_, _c7_, _c6_);
   }
   function streamable_dispatcher
   (sexp_of_query, sexp_of_response, rpc, where_to_connect){
    function _c4_(dispatcher){
     var
      match = caml_call1(Streamable_Plain_rpc[1], rpc),
      version = match[2],
      name = match[1];
     return maybe_track
             (sexp_of_query,
              sexp_of_response,
              [2, name, version, 0],
              dispatcher);
    }
    var _c5_ = streamable_dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aD_, _c5_, _c4_);
   }
   function babel_dispatcher
   (sexp_of_query, sexp_of_response, rpc, where_to_connect){
    function _c2_(dispatcher){
     return maybe_track
             (sexp_of_query,
              sexp_of_response,
              [1, caml_call1(Babel_Caller[2], rpc), 0],
              dispatcher);
    }
    var _c3_ = babel_dispatcher_internal(rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aE_, _c3_, _c2_);
   }
   function dispatcher$0
   (opt, create_client_rvar, destroy_after_forget, where_to_connect){
    if(opt)
     var sth = opt[1], on_forget_client_error = sth;
    else
     var
      on_forget_client_error = function(param){return Bonsai_web_Effect[1];};
    function _cA_(connector){
     function _cC_(client_rvar){
      function _cE_(forget_client_on_server){
       function _cR_(pattern_syntax_146){
        function _cT_(param){
         function _cX_(param){
          var client_rvar = param[2], connector = param[1];
          function _cZ_(query){
           return with_connection
                   (connector,
                    where_to_connect,
                    function(connection){
                     function _c0_(client){
                      return caml_call3
                              (Polling_state_rpc[9][2], client, connection, query);
                     }
                     var _c1_ = contents(client_rvar);
                     return caml_call2(Eager_deferred[29][11][4][2], _c1_, _c0_);
                    });
          }
          return caml_call1(Bonsai_web_Effect[24], _cZ_);
         }
         var _cY_ = caml_call2(Bonsai[49][5][7], connector, client_rvar);
         return caml_call3(Bonsai[49][5][8], _aF_, _cY_, _cX_);
        }
        function _cU_(param){return 0;}
        var
         _cV_ = caml_call3(Bonsai[49][5][4], _aG_, pattern_syntax_146, _cU_),
         _cW_ = caml_call1(Bonsai[49][5][6], _cV_);
        return caml_call3(Bonsai[49][5][1], _aH_, _cW_, _cT_);
       }
       var
        _cS_ =
          caml_call4(Bonsai[44][3], 0, [0, forget_client_on_server], 0, 0);
       return caml_call3(Bonsai[49][5][1], _aI_, _cS_, _cR_);
      }
      function perform_dispatch(param){
       var client_rvar = param[2], connector = param[1];
       return with_connection
               (connector,
                where_to_connect,
                function(connection){
                 function _cN_(client){
                  function _cP_(param){
                   if(0 === param[0]) return _aJ_;
                   var error = param[1];
                   return caml_call1(Async_rpc_kernel_Rpc[5][13], connection)
                           ? _aK_
                           : [1, error];
                  }
                  var
                   _cQ_ =
                     caml_call2(Polling_state_rpc[9][4], client, connection);
                  return caml_call2
                          (Async_kernel_Deferred[16][4][3], _cQ_, _cP_);
                 }
                 var _cO_ = contents(client_rvar);
                 return caml_call2(Eager_deferred[29][11][4][2], _cO_, _cN_);
                });
      }
      function _cF_(param){
       var client_rvar = param[2], connector = param[1];
       function _cI_(param){
        if(! destroy_after_forget) return Bonsai_web_Effect[1];
        function _cM_(param){
         switch(client_rvar[0]){
           case 0:
            return invalidate(client_rvar);
           case 1:
            var on_destroy = client_rvar[2];
            invalidate(client_rvar);
            return caml_call1(on_destroy, 0);
           default: return 0;
         }
        }
        return caml_call1(Bonsai_web_Effect[16], _cM_);
       }
       function _cJ_(param){
        if(0 === param[0]) return Bonsai_web_Effect[1];
        var error = param[1];
        return caml_call1(on_forget_client_error, error);
       }
       var
        _cK_ =
          caml_call2
           (Bonsai_web_Effect[24],
            perform_dispatch,
            [0, connector, client_rvar]),
        _cL_ = caml_call2(Ui_effect[13][4][2], _cK_, _cJ_);
       return caml_call2(Ui_effect[13][4][2], _cL_, _cI_);
      }
      var
       _cG_ = caml_call2(Bonsai[49][5][7], connector, client_rvar),
       _cH_ = caml_call3(Bonsai[49][5][8], _aL_, _cG_, _cF_);
      return caml_call3(Bonsai[49][5][1], _aM_, _cH_, _cE_);
     }
     var _cD_ = caml_call1(create_client_rvar, connector);
     return caml_call3(Bonsai[49][5][1], _aN_, _cD_, _cC_);
    }
    var _cB_ = caml_call1(Bonsai[47][5], connector_var);
    return caml_call3(Bonsai[49][5][1], _aO_, _cB_, _cA_);
   }
   function babel_dispatcher_internal$0
   (on_forget_client_error, caller, where_to_connect){
    function create_client_rvar(connector){
     function _cp_(connector){
      var param = caml_call1(connector, where_to_connect);
      if(typeof param === "number")
       var match = 0;
      else
       switch(param[0]){
         case 0:
          var menu = param[2], match = [0, menu]; break;
         case 1:
          var menu$0 = param[3], match = [0, menu$0]; break;
         default: var menu$1 = param[2], match = [0, menu$1];
       }
      if(! match){
       var
        _cr_ = caml_call1(Sexplib0_Sexp_conv[7], cst_web_rpc_effect_ml_941_34);
       return caml_call1(Core[261], _cr_);
      }
      var menu_rvar = match[1];
      function f$0(param){
       return with_connection_with_menu
               (connector,
                where_to_connect,
                function(connection_with_menu){
                 var
                  _cz_ =
                    caml_call3
                     (Versioned_polling_state_rpc[3][2],
                      caller,
                      0,
                      connection_with_menu);
                 return caml_call1(Async_kernel_Deferred[12], _cz_);
                });
      }
      if(2 === menu_rvar[0]){
       var v = menu_rvar[1];
       return create(function(param){return f$0(v);});
      }
      var inner_invalidated = menu_rvar[1][4];
      function f(param){
       var _cy_ = contents(menu_rvar);
       return caml_call2(Async_kernel_Deferred_or_error[12], _cy_, f$0);
      }
      var me = [], subscriber = [];
      caml_update_dummy
       (me,
        [246,
         function(_cw_){
          var _cx_ = caml_obj_tag(subscriber);
          a:
          if(250 === _cx_)
           var subscriber$0 = subscriber[1];
          else{
           if(246 !== _cx_ && 244 !== _cx_){
            var subscriber$0 = subscriber;
            break a;
           }
           var subscriber$0 = caml_call1(CamlinternalLazy[2], subscriber);
          }
          function on_destroy(param){
           return caml_call2(Bus[23], inner_invalidated, subscriber$0);
          }
          return [1, create_common(f), on_destroy];
         }]);
      caml_update_dummy
       (subscriber,
        [246,
         function(_cs_){
          function _ct_(param){
           var _cu_ = caml_obj_tag(me);
           a:
           if(250 === _cu_)
            var _cv_ = me[1];
           else{
            if(246 !== _cu_ && 244 !== _cu_){var _cv_ = me; break a;}
            var _cv_ = caml_call1(CamlinternalLazy[2], me);
           }
           return invalidate(_cv_);
          }
          return caml_call6(Bus[19], 0, 0, 0, inner_invalidated, _b_, _ct_);
         }]);
      var _cq_ = caml_obj_tag(me);
      if(250 === _cq_) return me[1];
      if(246 !== _cq_ && 244 !== _cq_) return me;
      return caml_call1(CamlinternalLazy[2], me);
     }
     return caml_call3(Bonsai[49][5][8], _aP_, connector, _cp_);
    }
    return dispatcher$0
            (on_forget_client_error, create_client_rvar, 1, where_to_connect);
   }
   function dispatcher_internal$0
   (on_forget_client_error, rpc, where_to_connect){
    function create_client_rvar(param){
     function _co_(param){
      return [2, caml_call2(Polling_state_rpc[9][1], 0, rpc)];
     }
     return caml_call1(Bonsai[50][1], _co_);
    }
    return dispatcher$0
            (on_forget_client_error, create_client_rvar, 0, where_to_connect);
   }
   function generic_poll
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    rpc_kind,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    every,
    query,
    dispatcher){
    function _cj_(dispatcher){
     return generic_poll_or_error
             (rpc_kind,
              sexp_of_query,
              sexp_of_response,
              equal_query,
              equal_response,
              clear_when_deactivated,
              on_response_received,
              dispatcher,
              every,
              0,
              query);
    }
    function _ck_(dispatcher, query){
     function _cm_(result){return [0, result];}
     var _cn_ = caml_call1(dispatcher, query);
     return caml_call2(Ui_effect[13][4][3], _cn_, _cm_);
    }
    var _cl_ = caml_call3(Bonsai[49][5][8], _aQ_, dispatcher, _ck_);
    return caml_call3(Bonsai[49][5][1], _aR_, _cl_, _cj_);
   }
   function poll$0
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every,
    query){
    function _cg_(dispatcher){
     var _ci_ = caml_call1(Polling_state_rpc[2], rpc);
     return generic_poll
             (sexp_of_query,
              sexp_of_response,
              equal_query,
              [3, caml_call1(Polling_state_rpc[1], rpc), _ci_, [0, every]],
              equal_response,
              clear_when_deactivated,
              on_response_received,
              every,
              query,
              dispatcher);
    }
    var _ch_ = dispatcher_internal$0(0, rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aS_, _ch_, _cg_);
   }
   function babel_poll$0
   (sexp_of_query,
    sexp_of_response,
    equal_query,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every,
    query){
    function _ce_(dispatcher){
     return generic_poll
             (sexp_of_query,
              sexp_of_response,
              equal_query,
              [1, caml_call1(Babel_Caller[2], rpc), [1, every]],
              equal_response,
              clear_when_deactivated,
              on_response_received,
              every,
              query,
              dispatcher);
    }
    var _cf_ = babel_dispatcher_internal$0(0, rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aT_, _cf_, _ce_);
   }
   function dispatcher$1
   (sexp_of_query,
    sexp_of_response,
    on_forget_client_error,
    rpc,
    where_to_connect){
    function _cb_(dispatcher){
     var _cd_ = caml_call1(Polling_state_rpc[2], rpc);
     return maybe_track
             (sexp_of_query,
              sexp_of_response,
              [3, caml_call1(Polling_state_rpc[1], rpc), _cd_, 0],
              dispatcher);
    }
    var
     _cc_ =
       dispatcher_internal$0(on_forget_client_error, rpc, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aU_, _cc_, _cb_);
   }
   function babel_dispatcher$0
   (sexp_of_query,
    sexp_of_response,
    on_forget_client_error,
    caller,
    where_to_connect){
    function _b$_(dispatcher){
     return maybe_track
             (sexp_of_query,
              sexp_of_response,
              [4, caml_call1(Babel_Caller[2], caller), 0],
              dispatcher);
    }
    var
     _ca_ =
       babel_dispatcher_internal$0
        (on_forget_client_error, caller, where_to_connect);
    return caml_call3(Bonsai[49][5][1], _aV_, _ca_, _b$_);
   }
   function shared_poller$0
   (Q,
    sexp_of_response,
    equal_response,
    clear_when_deactivated,
    on_response_received,
    rpc,
    where_to_connect,
    every){
    var sexp_of_t = Q[1];
    return caml_call2
            (create$0,
             Q,
             function(query){
              return poll$0
                      ([0, sexp_of_t],
                       sexp_of_response,
                       function(a_159, b_160){
                        var _b__ = caml_call2(Q[2][1], a_159, b_160);
                        return caml_call2(Core[90], _b__, 0);
                       },
                       equal_response,
                       clear_when_deactivated,
                       on_response_received,
                       rpc,
                       where_to_connect,
                       every,
                       query);
             });
   }
   function t_of_sexp(sexp_165){
    a:
    {
     if(0 === sexp_165[0]){
      var _b7_ = sexp_165[1];
      b:
      if(caml_string_notequal(_b7_, cst_Connected)){
       c:
       if(caml_string_notequal(_b7_, cst_Connecting)){
        d:
        if(caml_string_notequal(_b7_, cst_Disconnected)){
         if(caml_string_notequal(_b7_, cst_Failed_to_connect)){
          if(! caml_string_notequal(_b7_, cst_connected)) break b;
          if(! caml_string_notequal(_b7_, cst_connecting)) break c;
          if(! caml_string_notequal(_b7_, cst_disconnected)) break d;
          if(caml_string_notequal(_b7_, cst_failed_to_connect)) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_163, sexp_165);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_163, sexp_165);
       }
       return 0;
      }
      return 1;
     }
     var _b8_ = sexp_165[1];
     if(! _b8_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_163, sexp_165);
     var _b9_ = _b8_[1];
     if(0 !== _b9_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_163, sexp_165);
     var tag_166 = _b9_[1];
     b:
     if(caml_string_notequal(tag_166, cst_Connected)){
      c:
      if(caml_string_notequal(tag_166, cst_Connecting)){
       d:
       if(caml_string_notequal(tag_166, cst_Disconnected)){
        if(caml_string_notequal(tag_166, cst_Failed_to_connect)){
         if(! caml_string_notequal(tag_166, cst_connected)) break b;
         if(! caml_string_notequal(tag_166, cst_connecting)) break c;
         if(! caml_string_notequal(tag_166, cst_disconnected)) break d;
         if(caml_string_notequal(tag_166, cst_failed_to_connect)) break a;
        }
        var sexp_args_172 = _b8_[2];
        if(sexp_args_172 && ! sexp_args_172[2]){
         var
          arg0_173 = sexp_args_172[1],
          res0_174 = caml_call1(Core_Error[8], arg0_173);
         return [1, res0_174];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_163,
                 tag_166,
                 sexp_165);
       }
       var sexp_args_167 = _b8_[2];
       if(sexp_args_167 && ! sexp_args_167[2]){
        var
         arg0_168 = sexp_args_167[1],
         res0_169 = caml_call1(Core_Error[8], arg0_168);
        return [0, res0_169];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_163,
                tag_166,
                sexp_165);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_163, sexp_165);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_163, sexp_165);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_163, sexp_165);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return 0 === param ? _aW_ : _aX_;
    if(0 === param[0]){
     var arg0_175 = param[1], res0_176 = caml_call1(Core_Error[9], arg0_175);
     return [1, [0, _aY_, [0, res0_176, 0]]];
    }
    var arg0_177 = param[1], res0_178 = caml_call1(Core_Error[9], arg0_177);
    return [1, [0, _aZ_, [0, res0_178, 0]]];
   }
   function equal(a_179, b_180){
    if(a_179 === b_180) return 1;
    a:
    {
     if(typeof a_179 !== "number"){
      if(0 === a_179[0]){
       var a_181 = a_179[1];
       if(typeof b_180 !== "number"){
        if(0 !== b_180[0]) return 0;
        var b_182 = b_180[1];
        return caml_call2(Core_Error[3], a_181, b_182);
       }
       if(0 === b_180) break a;
      }
      else{
       var a_183 = a_179[1];
       if(typeof b_180 !== "number"){
        if(0 === b_180[0]) return 0;
        var b_184 = b_180[1];
        return caml_call2(Core_Error[3], a_183, b_184);
       }
       if(0 === b_180) break a;
      }
      return 0;
     }
     if(0 === a_179){
      if(typeof b_180 === "number" && ! b_180) return 1;
      return 0;
     }
     if(typeof b_180 !== "number") return 0;
     if(b_180) return 1;
    }
    return 0;
   }
   function sexp_of_t$1(param){
    var
     connecting_since_208 = param[3],
     clock_206 = param[2],
     state_204 = param[1],
     arg_209 =
       caml_call2(Core[515], Core_Time_ns[25][12], connecting_since_208),
     bnds_203 = [0, [1, [0, _a2_, [0, arg_209, 0]]], 0],
     arg_207 = caml_call1(Sexplib0_Sexp_conv[23], clock_206),
     bnds_203$0 = [0, [1, [0, _a3_, [0, arg_207, 0]]], bnds_203];
    if(state_204)
     var
      arg0_194 = state_204[1],
      res0_195 = sexp_of_t$0(arg0_194),
      arg_205 = [1, [0, _a0_, [0, res0_195, 0]]];
    else
     var arg_205 = _a1_;
    var bnds_203$1 = [0, [1, [0, _a4_, [0, arg_205, 0]]], bnds_203$0];
    return [1, bnds_203$1];
   }
   function sexp_of_t$2(param){
    if(0 === param[0]){
     var arg0_214 = param[1], res0_215 = sexp_of_t$0(arg0_214);
     return [1, [0, _a5_, [0, res0_215, 0]]];
    }
    var
     arg0_216 = param[1],
     res0_217 = caml_call1(Sexplib0_Sexp_conv[23], arg0_216);
    return [1, [0, _a6_, [0, res0_217, 0]]];
   }
   function sexp_of_t$3(param){
    var
     connecting_since_221 = param[2],
     state_219 = param[1],
     arg_222 =
       caml_call2(Core[515], Core_Time_ns[25][12], connecting_since_221),
     bnds_218 = [0, [1, [0, _a7_, [0, arg_222, 0]]], 0],
     arg_220 = sexp_of_t$0(state_219),
     bnds_218$0 = [0, [1, [0, _a8_, [0, arg_220, 0]]], bnds_218];
    return [1, bnds_218$0];
   }
   function state(where_to_connect){
    function _bn_(dispatcher){
     function _bs_(pattern_syntax_224){
      function _bH_(model){
       function _bL_(inject){
        function _bP_(pattern_syntax_229){
         function _bX_(param){
          function _b1_(param){
           var connecting_since = param[3], state = param[1];
           if(state)
            var status = state[1], state$0 = status;
           else
            var state$0 = 0;
           a:
           {
            if(typeof state$0 === "number" && state$0){var connecting_since$0 = 0; break a;}
            var connecting_since$0 = connecting_since;
           }
           return [0, state$0, connecting_since$0];
          }
          function _b2_(param, _b4_){
           var
            new_for_cutoff_235 = _b4_[3],
            new_for_cutoff_237 = _b4_[1],
            old_for_cutoff_236 = param[3],
            old_for_cutoff_238 = param[1],
            _b5_ = old_for_cutoff_238 === new_for_cutoff_237 ? 1 : 0,
            _b6_ =
              _b5_ ? old_for_cutoff_236 === new_for_cutoff_235 ? 1 : 0 : _b5_;
           return _b6_;
          }
          var _b3_ = caml_call2(Bonsai[49][5][2], model, _b2_);
          return caml_call3(Bonsai[49][5][8], _a9_, _b3_, _b1_);
         }
         function _bY_(param){return 0;}
         var
          _bZ_ = caml_call3(Bonsai[49][5][4], _a__, pattern_syntax_229, _bY_),
          _b0_ = caml_call1(Bonsai[49][5][6], _bZ_);
         return caml_call3(Bonsai[49][5][1], _a$_, _b0_, _bX_);
        }
        function _bQ_(clock){
         function _bT_(on_activate){
          return caml_call4(Bonsai[44][3], [0, on_activate], 0, 0, 0);
         }
         function _bU_(param){
          var clock = param[2], inject = param[1];
          return caml_call1(inject, [1, clock]);
         }
         var
          _bV_ = caml_call2(Bonsai[49][5][7], inject, clock),
          _bW_ = caml_call3(Bonsai[49][5][8], _ba_, _bV_, _bU_);
         return caml_call3(Bonsai[49][5][1], _bb_, _bW_, _bT_);
        }
        var
         _bR_ = caml_call1(Bonsai[48][4], Ui_incr[11]),
         _bS_ = caml_call3(Bonsai[49][5][1], _bc_, _bR_, _bQ_);
        return caml_call3(Bonsai[49][5][1], _bd_, _bS_, _bP_);
       }
       function _bM_(param){
        var pattern_syntax_225 = param[2];
        return pattern_syntax_225;
       }
       var
        _bN_ = caml_call3(Bonsai[49][5][4], _be_, pattern_syntax_224, _bM_),
        _bO_ = caml_call1(Bonsai[49][5][6], _bN_);
       return caml_call3(Bonsai[49][5][1], _bf_, _bO_, _bL_);
      }
      function _bI_(param){
       var pattern_syntax_226 = param[1];
       return pattern_syntax_226;
      }
      var
       _bJ_ = caml_call3(Bonsai[49][5][4], _bg_, pattern_syntax_224, _bI_),
       _bK_ = caml_call1(Bonsai[49][5][6], _bJ_);
      return caml_call3(Bonsai[49][5][1], _bh_, _bK_, _bH_);
     }
     function _bt_(context, dispatcher, model, action){
      function writeback(a){
       var _bG_ = caml_call2(Bonsai[16][1], context, [0, a]);
       return caml_call2(Bonsai[16][2], context, _bG_);
      }
      var state = model[1];
      if(0 === action[0]){
       var new_state = action[1];
       if(dispatcher){
        var dispatch = dispatcher[1];
        if(typeof new_state !== "number"){
         var _bE_ = caml_call1(dispatch, writeback);
         caml_call2(Bonsai[16][2], context, _bE_);
        }
        var _bA_ = [0, new_state];
       }
       else
        var _bA_ = [0, new_state];
       var new_state$0 = _bA_;
      }
      else if(dispatcher){
       var dispatch$0 = dispatcher[1];
       a:
       {
        if(state && typeof state[1] === "number"){var state$0 = state; break a;}
        var _bF_ = caml_call1(dispatch$0, writeback);
        caml_call2(Bonsai[16][2], context, _bF_);
        var state$0 = _bi_;
       }
       var new_state$0 = state$0;
      }
      else
       var new_state$0 = state;
      if(0 === action[0])
       var clock = model[2];
      else
       var clock$0 = action[1], clock = [0, clock$0];
      function now(param){
       return caml_call2(Core_Option[34], clock, Ui_time_source[5]);
      }
      if(state){
       var _bB_ = state[1];
       a:
       {
        if(typeof _bB_ === "number" && _bB_){
         if(new_state$0){
          var _bC_ = new_state$0[1];
          if(typeof _bC_ === "number" && _bC_){var _bD_ = model[3]; break a;}
         }
         var _bD_ = now(0);
         break a;
        }
        var _bD_ = model[3];
       }
       var connecting_since = _bD_;
      }
      else
       var connecting_since = now(0);
      return [0, new_state$0, clock, connecting_since];
     }
     var
      _bu_ =
        [0,
         function(a_227, b_228){
          if(a_227 === b_228) return 1;
          var b_197 = b_228[1], a_196 = a_227[1];
          if(a_196 === b_197)
           var _bw_ = 1;
          else if(a_196)
           if(b_197)
            var
             b_199 = b_197[1],
             a_198 = a_196[1],
             _bw_ = equal(a_198, b_199);
           else
            var _bw_ = 0;
          else
           var _bw_ = b_197 ? 0 : 1;
          if(! _bw_) return _bw_;
          var _bx_ = b_228[3], _by_ = a_227[3];
          function _bz_(a_212, b_213){
           return caml_call2(Core_Time_ns[25][20], a_212, b_213);
          }
          return caml_call3(Core[511], _bz_, _by_, _bx_);
         }],
      _bv_ =
        caml_call7
         (Bonsai[18],
          [0, sexp_of_t$2],
          0,
          [0, sexp_of_t$1],
          _bu_,
          _bj_,
          _bt_,
          dispatcher);
     return caml_call3(Bonsai[49][5][1], _bk_, _bv_, _bs_);
    }
    var
     _bm_ =
       generic_dispatcher
        (function(connector, writeback){
          function _bo_(param){
           if(0 === param[0]) return 0;
           var error = param[1];
           return caml_call1(writeback, [1, error]);
          }
          var
           _bp_ =
             with_connection
              (connector,
               where_to_connect,
               function(connection){
                caml_call1(writeback, 1);
                function _bq_(reason){
                 return caml_call1
                         (writeback, [0, caml_call1(Core_Error[33], reason)]);
                }
                var
                 _br_ =
                   caml_call2
                    (Async_rpc_kernel_Rpc[5][12], connection, 890972481);
                caml_call2(Async_kernel[12], _br_, _bq_);
                return caml_call1(Async_kernel_Deferred_or_error[13], 0);
               });
          return caml_call2(Async_kernel_Deferred[16][4][3], _bp_, _bo_);
         });
    return caml_call3(Bonsai[49][5][1], _bl_, _bm_, _bn_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Rpc_effect);
   var
    Bonsai_web_Rpc_effect =
      [0,
       Where_to_connect,
       Poll_result,
       [0, lookup, create$0],
       [0,
        dispatcher,
        babel_dispatcher,
        streamable_dispatcher,
        poll,
        babel_poll,
        streamable_poll,
        shared_poller,
        poll_until_ok,
        babel_poll_until_ok],
       [0,
        dispatcher$1,
        babel_dispatcher$0,
        poll$0,
        babel_poll$0,
        shared_poller$0],
       [0, [0, equal, t_of_sexp, sexp_of_t$0], sexp_of_t$3, state],
       [0, persistent_connection, async_durable, for_test, test_fallback],
       [0,
        with_connector,
        self_connector,
        url_connector,
        is_test_fallback,
        [0, [0, create, invalidate, contents]]]];
   runtime.caml_register_global
    (213, Bonsai_web_Rpc_effect, cst_Bonsai_web_Rpc_effect$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Start
//# unitInfo: Requires: Async_kernel, Async_kernel__Ivar, Async_kernel__Pipe, Base__Option, Bonsai, Bonsai__Action, Bonsai__Environment, Bonsai__Input, Bonsai__Lifecycle, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Stabilization_tracker, Bonsai__Trampoline, Bonsai__Value, Bonsai_web__Forward_performance_entries, Bonsai_web__Rpc_effect, Bonsai_web__Util, Bus, Core, Core__Error, Core__Fn, Core__Nothing, Core__Option, Core__Queue, Core__Time_ns, Core__Type_equal, Incr_dom__Start_app, Js_of_ocaml__Js, Moption, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Ui_incr, Ui_time_source, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Start$0 = "Bonsai_web__Start",
    cst_bonsai_web$0 = "bonsai_web",
    cst_web_start_ml = "web/start.ml",
    caml_js_wrap_callback_unsafe = runtime.caml_js_wrap_callback_unsafe,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Bonsai_web_Rpc_effect = global_data.Bonsai_web__Rpc_effect,
    Core_Fn = global_data.Core__Fn,
    Bonsai = global_data.Bonsai,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Nothing = global_data.Core__Nothing,
    Bonsai_web_Util = global_data.Bonsai_web__Util,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Option = global_data.Core__Option,
    Ui_incr = global_data.Ui_incr,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Ui_time_source = global_data.Ui_time_source,
    Bus = global_data.Bus,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Input = global_data.Bonsai__Input,
    Async_kernel = global_data.Async_kernel,
    Bonsai_Stabilization_tracker = global_data.Bonsai__Stabilization_tracker,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Ui_effect = global_data.Ui_effect,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Incr_dom_Start_app = global_data.Incr_dom__Start_app,
    Base_Option = global_data.Base__Option,
    Bonsai_web_Forward_performance =
      global_data.Bonsai_web__Forward_performance_entries,
    Moption = global_data.Moption,
    Core_Queue = global_data.Core__Queue,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Core_Error = global_data.Core__Error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Start$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_web_start_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "start.ml");
   var
    cst_app = "app",
    cst_The_Bonsai_app_used_a_cust =
      "The Bonsai app used a custom connector, but none was provided when the app was started. To fix this, use the [~custom_connector] argument when calling [Bonsai_web.Start.start]",
    cst_Not_starting_debugger_Be_a =
      'Not starting debugger. Be aware that running the debugger will send performance data to the debugger server, which may be unacceptable if the data you work with is sensitive. Consider running a local server and calling this function again with the local host and port. If you wish to proceed, run this function again, passing "true" as the first parameter',
    cst_Not_starting_debugger_An_e =
      "Not starting debugger. An error occurred while attempting to instrument the computation; the resulting computation does not typecheck. Reusing previously gathered run information to execute",
    cst_Already_debugging = "Already debugging.",
    cst_Starting_the_debugger = "Starting the debugger.",
    cst_debugger_host_and_port_not = "debugger host and port not be specified",
    _a_ = [0, cst_web_start_ml, 39, 968, 978],
    _b_ = [0, cst_web_start_ml, 45, 1206, 1231],
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Start = cst_Bonsai_web_Start$0;
   function stop(t){return caml_call2(Async_kernel_Ivar[16], t[2], 0);}
   function started(t){return caml_call1(Async_kernel_Ivar[19], t[3]);}
   function schedule(t, a){
    var match = t[1];
    if(0 === match[0]){
     var queue = match[1];
     return caml_call2(Core_Queue[43], queue, a);
    }
    var f = match[1], _ag_ = caml_call1(f, a);
    return caml_call1(Virtual_dom_Effect[23][2], _ag_);
   }
   function input(t){return caml_call1(Ui_incr[53][5], t[4]);}
   function set_input(t, input){
    return caml_call2(Ui_incr[53][3], t[4], input);
   }
   function update_input(t, f){return set_input(t, caml_call1(f, input(t)));}
   function outgoing(param){
    var outgoing_pipe = param[5];
    return outgoing_pipe;
   }
   function extra(t){return caml_call1(Bus[6], t[6]);}
   function last_extra(t){return caml_call1(Moption[16], t[7]);}
   function inject_outgoing(r){return r[2];}
   function input$0(r){return r[1];}
   function create(input, inject_outgoing){return [0, input, inject_outgoing];
   }
   function create$0(view, extra, inject_incoming){return [0, view, extra, inject_incoming];
   }
   function start_generic
   (optimize,
    simulate_body_focus_on_root_el,
    get_app_result,
    initial_input,
    bind_to_element_with_id,
    component){
    caml_call1(Bonsai_web_Util[3][1], 0);
    var
     fresh = caml_call2(Core_Type_equal[8][3], cst, Core[149]),
     _o_ = caml_call2(Bonsai_Value[21], 4, fresh),
     var$0 = caml_call1(Bonsai[54][2], _o_),
     _p_ = caml_call1(component, var$0),
     _q_ = caml_call1(Bonsai[54][3], _p_),
     _r_ = optimize ? Bonsai[54][8] : function(_af_){return _af_;},
     computation_for_instrumentatio = caml_call1(_r_, _q_),
     info = caml_call1(Bonsai[54][7], computation_for_instrumentatio)[1];
    return function(get_app_input){
     var
      apply_action = info[4],
      action = info[3],
      model = info[1],
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      pipe_write = match[2],
      outgoing_pipe = match[1],
      Action = [0],
      handle$0 = caml_call1(Async_kernel_Pipe[35], pipe_write),
      Out_event = caml_call1(Ui_effect[19], [0, Action, handle$0]),
      input_var = caml_call2(Ui_incr[53][2], 0, initial_input);
     function _s_(error){
      var _ae_ = caml_call1(Core_Error[9], error);
      return caml_call2(Core[257], 0, _ae_);
     }
     var
      extra = caml_call5(Bus[7], 0, _a_, 0, 1, _s_),
      last_extra = caml_call1(Moption[13], 0);
     function _t_(extra){return caml_call2(Moption[21], last_extra, extra);}
     caml_call4(Bus[20], 0, extra, _b_, _t_);
     var
      _u_ = caml_call1(Async_kernel_Ivar[12], 0),
      _v_ = caml_call1(Async_kernel_Ivar[12], 0),
      handle =
        [0,
         [0, caml_call2(Core_Queue[66], 0, 0)],
         _v_,
         _u_,
         input_var,
         outgoing_pipe,
         extra,
         last_extra];
     function _w_(input){
      return caml_call2(get_app_input, input, Out_event[1]);
     }
     var
      _x_ = caml_call1(Ui_incr[53][4], input_var),
      input = caml_call2(Ui_incr[78][4][6], _x_, _w_),
      prev_lifecycle = [0, Bonsai_Lifecycle[1][2]],
      is_debugging_var = caml_call2(Ui_incr[53][2], 0, 0),
      debugger_shutdown = [0, 0],
      _y_ = caml_call1(Core_Time_ns[66], 0),
      bonsai_clock = caml_call1(Ui_time_source[1], _y_),
      tracker = caml_call1(Bonsai_Stabilization_tracker[1], 0);
     function cutoff(_ad_, _ac_){return _ad_ === _ac_ ? 1 : 0;}
     var
      Model = [0, cutoff],
      State = [0],
      sexp_of_t = caml_call1(Bonsai_Action[1][13], action),
      Action$0 = [0, sexp_of_t];
     function action_requires_stabilization(action){
      return caml_call2(Bonsai_Stabilization_tracker[3], tracker, action);
     }
     function on_action_application(action){
      return caml_call2(Bonsai_Stabilization_tracker[2], tracker, action);
     }
     function on_stabilize(param){
      return caml_call1(Bonsai_Stabilization_tracker[5], tracker);
     }
     function on_startup(param, _ab_){return caml_call1(Async_kernel[20], 0);}
     function advance_clock_to(to){
      caml_call2(Ui_time_source[4], bonsai_clock, to);
      return caml_call1(Ui_time_source[12][1], bonsai_clock);
     }
     function _z_(model, param, inject, run){
      var
       environment =
         caml_call3
          (Bonsai_Environment[2], Bonsai_Environment[1], fresh, input),
       _P_ =
         caml_call5
          (run, environment, Bonsai_Path[25], bonsai_clock, model, inject),
       snapshot = caml_call1(Bonsai_Trampoline[2], _P_)[1];
      function _Q_(param){
       var
        inject_incoming = param[3],
        extra = param[2],
        view = param[1],
        prev = handle[1];
       handle[1] = [1, inject_incoming];
       if(0 === prev[0]){
        var
         queue = prev[1],
         _$_ = function(_aa_){return schedule(handle, _aa_);};
        caml_call2(Core_Queue[18], queue, _$_);
       }
       caml_call2(Bus[12], handle[6], extra);
       return view;
      }
      var
       _R_ = caml_call1(Bonsai_Snapshot[2], snapshot),
       _S_ = caml_call2(Ui_incr[78][2], _R_, get_app_result),
       let_syntax_006 = caml_call2(Ui_incr[78][4][6], _S_, _Q_);
      function _T_(input, param, schedule_event, model, action){
       return caml_call5
               (apply_action,
                inject,
                schedule_event,
                [0, input],
                model,
                action);
      }
      var
       _U_ = caml_call1(Bonsai_Snapshot[1], snapshot),
       _V_ = caml_call1(Bonsai_Input[3], _U_),
       let_syntax_007 = caml_call2(Ui_incr[78][4][6], _V_, _T_);
      function _W_(lifecycle, param, schedule_event){
       caml_call2(Async_kernel_Ivar[16], handle[3], 0);
       caml_call1
        (schedule_event,
         caml_call2(Bonsai_Lifecycle[1][3], prev_lifecycle[1], lifecycle));
       caml_call1(Ui_time_source[12][2], bonsai_clock);
       prev_lifecycle[1] = lifecycle;
       return 0;
      }
      var
       _X_ = caml_call1(Bonsai_Snapshot[4], snapshot),
       let_syntax_008 = caml_call2(Ui_incr[78][4][6], _X_, _W_);
      function _Y_(param){
       var
        match = param[2],
        on_display = match[2],
        apply_action = match[1],
        view = param[1];
       function update_visibility(model, param){return model;}
       return [0, view, apply_action, update_visibility, on_display];
      }
      var
       _Z_ = caml_call2(Ui_incr[78][4][21], let_syntax_007, let_syntax_008),
       ___ = caml_call2(Ui_incr[78][4][21], let_syntax_006, _Z_);
      return caml_call2(Ui_incr[78][4][6], ___, _Y_);
     }
     function create(model, old_model, inject){
      function _J_(param){
       if(! param) return _z_(model, old_model, inject, info[5]);
       var worker_name$0 = param[3], port$0 = param[2], host$0 = param[1];
       function _L_(param){
        var
         match = param[2],
         worker_name = match[2],
         port = match[1],
         host = param[1];
        return [0, host, port, worker_name];
       }
       var
        _M_ = caml_call2(Base_Option[29][4][4], port$0, worker_name$0),
        _N_ = caml_call2(Base_Option[29][4][4], host$0, _M_),
        match = caml_call2(Base_Option[29][4][3], _N_, _L_);
       if(match)
        var
         match$0 = match[1],
         worker_name = match$0[3],
         port = match$0[2],
         host = match$0[1],
         match$1 =
           caml_call4
            (Bonsai_web_Forward_performance[1],
             host,
             port,
             worker_name,
             computation_for_instrumentatio);
       else{
        caml_call1(Core[32], cst_debugger_host_and_port_not);
        var
         match$1 =
           [0, computation_for_instrumentatio, function(param){return 0;}];
       }
       var shutdown = match$1[2], instrumented_computation = match$1[1];
       debugger_shutdown[1] = [0, shutdown];
       var
        info$0 = caml_call1(Bonsai[54][7], instrumented_computation)[1],
        match$2 = caml_call2(Bonsai_Meta[3][2], info[2], info$0[2]),
        _O_ = caml_call2(Bonsai_Action[1][10], info[3], info$0[3]);
       if
        (caml_call2(Bonsai_Meta[1][1][2], info[1][3], info$0[1][3])
         && _O_ && match$2)
        return _z_(model, old_model, inject, info$0[5]);
       caml_call1(Core[32], cst_Not_starting_debugger_An_e);
       return _z_(model, old_model, inject, info[5]);
      }
      var _K_ = caml_call1(Ui_incr[53][4], is_debugging_var);
      return caml_call2(Ui_incr[78][4][1], _K_, _J_);
     }
     var
      _A_ = model[1],
      _B_ = [0, caml_call1(Async_kernel_Ivar[19], handle[2])];
     caml_call7
      (Incr_dom_Start_app[2][1],
       0,
       _B_,
       0,
       [0, simulate_body_focus_on_root_el],
       bind_to_element_with_id,
       _A_,
       [0,
        Model,
        Action$0,
        State,
        action_requires_stabilization,
        on_action_application,
        on_stabilize,
        on_startup,
        advance_clock_to,
        create]);
     function start_bonsai_debugger(dry_run, host, port, worker_name){
      function print_message(param){
       return caml_call1(Core[32], cst_Not_starting_debugger_Be_a);
      }
      function _D_(dry_run){
       if(! (dry_run | 0)) return print_message(0);
       if(caml_call1(Ui_incr[53][5], is_debugging_var))
        caml_call1(Core[32], cst_Already_debugging);
       else{
        caml_call1(Core[32], cst_Starting_the_debugger);
        var
         _E_ = caml_call1(Js_of_ocaml_Js[6][10], worker_name),
         _F_ = caml_call2(Core_Option[34], _E_, caml_string_of_jsstring),
         _G_ = caml_call1(Js_of_ocaml_Js[6][10], port),
         _H_ = caml_call1(Js_of_ocaml_Js[6][10], host),
         _I_ =
           [0,
            caml_call2(Core_Option[34], _H_, caml_string_of_jsstring),
            _G_,
            _F_];
        caml_call2(Ui_incr[53][3], is_debugging_var, _I_);
       }
       return caml_call1(Ui_incr[58], 0);
      }
      return caml_call3(Js_of_ocaml_Js[6][7], dry_run, print_message, _D_);
     }
     function stop_bonsai_debugger(param){
      function _C_(f){return caml_call1(f, 0);}
      caml_call2(Core_Option[46], debugger_shutdown[1], _C_);
      debugger_shutdown[1] = 0;
      caml_call2(Ui_incr[53][3], is_debugging_var, 0);
      return caml_call1(Ui_incr[58], 0);
     }
     var
      t0 = caml_js_wrap_callback_unsafe(start_bonsai_debugger),
      t1 = Js_of_ocaml_Js[52][1];
     t1.startBonsaiDebugger = t0;
     var
      t2 = caml_js_wrap_callback_unsafe(stop_bonsai_debugger),
      t3 = Js_of_ocaml_Js[52][1];
     t3.stopBonsaiDebugger = t2;
     return handle;};
   }
   function start_standalone
   (opt, _m_, initial_input, bind_to_element_with_id, component){
    if(opt) var sth = opt[1], optimize = sth; else var optimize = 1;
    if(_m_)
     var sth$0 = _m_[1], simulate_body_focus_on_root_el = sth$0;
    else
     var simulate_body_focus_on_root_el = 1;
    function _n_(input, param){return input;}
    return start_generic
             (optimize,
              simulate_body_focus_on_root_el,
              function(view){return [0, view, 0, Core_Nothing[4]];},
              initial_input,
              bind_to_element_with_id,
              component)
            (_n_);
   }
   function start(opt, _k_, initial_input, bind_to_element_with_id, component){
    if(opt) var sth = opt[1], optimize = sth; else var optimize = 1;
    if(_k_)
     var sth$0 = _k_[1], simulate_body_focus_on_root_el = sth$0;
    else
     var simulate_body_focus_on_root_el = 1;
    return start_generic
             (optimize,
              simulate_body_focus_on_root_el,
              function(_l_){return _l_;},
              initial_input,
              bind_to_element_with_id,
              component)
            (create);
   }
   function extra$0(param){return 0;}
   var No_extra = [0, extra$0];
   function incoming(param){return Core_Nothing[4];}
   var No_incoming = [0, incoming];
   function view(_j_){return _j_;}
   var
    extra$1 = No_extra[1],
    incoming$0 = No_incoming[1],
    just_the_view = [0, view, extra$1, incoming$0],
    Result_spec = [0, No_extra, No_incoming, just_the_view];
   function default_custom_connector(connector){
    var
     _i_ = caml_call1(Sexplib0_Sexp_conv[7], cst_The_Bonsai_app_used_a_cust);
    return caml_call1(Core[261], _i_);
   }
   function start_and_get_handle
   (result_spec,
    opt,
    _c_,
    simulate_body_focus_on_root_el,
    bind_to_element_with_id,
    computation){
    if(opt) var sth = opt[1], optimize = sth; else var optimize = 1;
    if(_c_)
     var sth$0 = _c_[1], custom_connector = sth$0;
    else
     var custom_connector = default_custom_connector;
    function _d_(param){
     if(typeof param === "number")
      return caml_call1(Bonsai_web_Rpc_effect[8][2], 0);
     if(0 === param[0]){
      var url = param[1];
      return caml_call1(Bonsai_web_Rpc_effect[8][3], url);
     }
     var custom = param[1];
     return caml_call1(custom_connector, custom);
    }
    var
     computation$0 = caml_call2(Bonsai_web_Rpc_effect[8][1], _d_, computation);
    function _e_(r){
     var
      _g_ = caml_call1(result_spec[3], r),
      _h_ = caml_call1(result_spec[2], r);
     return [0, caml_call1(result_spec[1], r), _h_, _g_];
    }
    var
     _f_ = caml_call1(Core_Fn[1], computation$0),
     bonsai = caml_call2(Bonsai[55][5], _f_, _e_);
    return start
            ([0, optimize],
             simulate_body_focus_on_root_el,
             0,
             bind_to_element_with_id,
             bonsai);
   }
   function start$0
   (custom_connector, opt, simulate_body_focus_on_root_el, component){
    if(opt)
     var sth = opt[1], bind_to_element_with_id = sth;
    else
     var bind_to_element_with_id = cst_app;
    start_and_get_handle
     (Result_spec[3],
      0,
      custom_connector,
      simulate_body_focus_on_root_el,
      bind_to_element_with_id,
      component);
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Start);
   var
    Bonsai_web_Start =
      [0,
       [0,
        [0,
         stop,
         started,
         schedule,
         outgoing,
         input,
         set_input,
         update_input,
         extra,
         last_extra],
        [0, input$0, inject_outgoing],
        [0, create$0],
        start_standalone,
        start],
       [0,
        [0, stop, started, schedule, extra, last_extra],
        Result_spec,
        start$0,
        start_and_get_handle]];
   runtime.caml_register_global(63, Bonsai_web_Start, cst_Bonsai_web_Start$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Persistent_var
//# unitInfo: Requires: Base__Option, Bonsai, Bonsai_web__Effect, Core, Core__Error, Core__Option, Core__Or_error, Core__Sexp, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Persistent_var$0 = "Bonsai_web__Persistent_var",
    cst_bonsai_web$0 = "bonsai_web",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai = global_data.Bonsai,
    Core_Sexp = global_data.Core__Sexp,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Or_error = global_data.Core__Or_error,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Persistent_var$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Ppx_expect_runtime[1][1], "web/persistent_var.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web$0, "persistent_var.ml");
   var
    _a_ = [0, "e"],
    _b_ = [0, "unique_id"],
    cst_WARNING_Could_not_deserial =
      "WARNING: Could not deserialize persistent-var",
    cst_bonsai_web = cst_bonsai_web$0,
    cst_Bonsai_web_Persistent_var = cst_Bonsai_web_Persistent_var$0;
   function create(M, kind, unique_id, default$0){
    function _d_(storage){
     function set(key, value){
      return storage.setItem
              (caml_jsstring_of_string(key), caml_jsstring_of_string(value));
     }
     function get(key){
      var
       _m_ = storage.getItem(caml_jsstring_of_string(key)),
       _n_ = caml_call1(Js_of_ocaml_Js[5][10], _m_);
      return caml_call2(Core_Option[34], _n_, runtime.caml_string_of_jsstring);
     }
     function delete$0(key){
      return storage.removeItem(caml_jsstring_of_string(key));
     }
     return [0, get, set, delete$0];
    }
    if(-442878713 <= kind)
     var
      t0 = Js_of_ocaml_Dom_html[8],
      _e_ = caml_call1(Js_of_ocaml_Js[6][10], t0.localStorage);
    else
     var
      t1 = Js_of_ocaml_Dom_html[8],
      _e_ = caml_call1(Js_of_ocaml_Js[6][10], t1.sessionStorage);
    var match = caml_call2(Base_Option[29][4][3], _e_, _d_);
    if(match)
     var
      match$0 = match[1],
      delete$0 = match$0[3],
      setter = match$0[2],
      getter = match$0[1],
      deleter = delete$0,
      setter$0 = setter,
      getter$0 = getter;
    else
     var
      deleter$0 = function(key){return 0;},
      setter$2 = function(key, value){return 0;},
      getter$1 = function(key){return 0;},
      deleter = deleter$0,
      setter$0 = setter$2,
      getter$0 = getter$1;
    var match$1 = caml_call1(getter$0, unique_id);
    if(match$1){
     var
      sexp = match$1[1],
      _f_ =
        function(param){
         var _l_ = caml_call1(Core_Sexp[76], sexp);
         return caml_call1(M[1], _l_);
        },
      match$2 = caml_call2(Core_Or_error[37], 0, _f_);
     if(0 === match$2[0])
      var a = match$2[1], a$0 = a;
     else{
      var
       e = match$2[1],
       _h_ = [0, [1, [0, _a_, [0, caml_call1(Core_Error[9], e), 0]]], 0],
       _i_ = [0, [1, [0, _b_, [0, caml_call1(Core[558], unique_id), 0]]], _h_],
       _j_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_Could_not_deserial),
           _i_]];
      caml_call2(Core[257], 0, _j_);
      var a$0 = default$0;
     }
     var value = a$0;
    }
    else
     var value = default$0;
    var var$0 = caml_call1(Bonsai[5][1], value);
    function setter$1(t){
     var _k_ = caml_call1(M[2], t);
     return caml_call2(setter$0, unique_id, caml_call1(Core_Sexp[85], _k_));
    }
    function clear(param){return caml_call1(deleter, unique_id);}
    function _g_(a){setter$1(a); return caml_call2(Bonsai[5][3], var$0, a);}
    var effect = caml_call1(Bonsai_web_Effect[15], _g_);
    return [0, var$0, setter$1, clear, effect];
   }
   function set(param, a){
    var setter = param[2], var$0 = param[1];
    caml_call1(setter, a);
    return caml_call2(Bonsai[5][3], var$0, a);
   }
   function value(param){
    var var$0 = param[1];
    return caml_call1(Bonsai[5][5], var$0);
   }
   function update(param, f){
    var setter = param[2], var$0 = param[1];
    function _c_(old){
     var new$0 = caml_call1(f, old);
     caml_call1(setter, new$0);
     return new$0;
    }
    return caml_call2(Bonsai[5][2], var$0, _c_);
   }
   function get(param){
    var var$0 = param[1];
    return caml_call1(Bonsai[5][4], var$0);
   }
   function clear_persistence(param){
    var clear = param[3];
    return caml_call1(clear, 0);
   }
   function effect(param){var effect = param[4]; return effect;}
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Persistent_var);
   var
    Bonsai_web_Persistent_var =
      [0, create, update, set, get, value, clear_persistence, effect];
   runtime.caml_register_global
    (30, Bonsai_web_Persistent_var, cst_Bonsai_web_Persistent_var$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Import_stable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_web_Import_stable = [0];
   runtime.caml_register_global
    (0, Bonsai_web_Import_stable, "Bonsai_web__Import_stable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web
//# unitInfo: Requires: Bonsai, Bonsai_web__Effect, Bonsai_web__Util, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web = "Bonsai_web",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_web_Util = global_data.Bonsai_web__Util,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][1], "web/bonsai_web.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_web, "bonsai_web.ml");
   var
    Arrow_deprecated = [0],
    am_running_how = Bonsai_web_Util[1],
    am_within_disabled_fieldset = Bonsai_web_Util[2],
    For_bonsai_internal = Bonsai_web_Util[3],
    include = Virtual_dom_Vdom[2],
    Html_syntax = include[1],
    Html_syntax$0 = Virtual_dom_Vdom[2][1],
    am_running_how$0 = Bonsai_web_Util[1],
    am_within_disabled_fieldset$0 = Bonsai_web_Util[2],
    For_bonsai_internal$0 = Bonsai_web_Util[3];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_web);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web);
   var
    Bonsai_web =
      [0,
       Arrow_deprecated,
       am_running_how,
       am_within_disabled_fieldset,
       For_bonsai_internal,
       Bonsai_web_Effect,
       Html_syntax,
       [0,
        Bonsai_web_Effect,
        Html_syntax$0,
        am_running_how$0,
        am_within_disabled_fieldset$0,
        For_bonsai_internal$0]];
   runtime.caml_register_global(14, Bonsai_web, cst_Bonsai_web);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
