// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Graphql_parser__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Graphql_parser = [0];
   runtime.caml_register_global(0, Graphql_parser, "Graphql_parser__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_parser__Ast
//# unitInfo: Requires: Fmt, Re
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$4 = " : ", cst$3 = "... ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "\\\\",
    cst$2 = '\\"',
    cst = ",",
    cst$0 = ":",
    Fmt = global_data.Fmt,
    Re = global_data.Re,
    comma = caml_call2(Fmt[20], Fmt[57], cst),
    colon = caml_call2(Fmt[20], Fmt[57], cst$0),
    cst_null = "null",
    _a_ = [0, [12, 36, [2, 0, 0]], "$%s"],
    _d_ = [0, [2, 0, [11, ": ", [2, 0, [15, [15, [15, 0]]]]]], "%s: %s%a%a%a"],
    _e_ = [0, [2, 0, [15, [15, [15, 0]]]], "%s%a%a%a"],
    _f_ = [0, [11, cst$3, [2, 0, [12, 32, [15, 0]]]], "... %s %a"],
    _g_ =
      [0,
       [11, "... on ", [2, 0, [12, 32, [15, [12, 32, [15, 0]]]]]],
       "... on %s %a %a"],
    _h_ = [0, [11, cst$3, [15, [12, 32, [15, 0]]]], "... %a %a"],
    _i_ = [0, 2],
    _j_ = [0, [15, [12, 33, 0]], "%a!"],
    _p_ =
      [0,
       [11,
        "fragment ",
        [2, 0, [11, " on ", [2, 0, [12, 32, [15, [12, 32, [15, 0]]]]]]]],
       "fragment %s on %s %a %a"],
    _o_ =
      [0,
       [15, [12, 32, [2, 0, [15, [15, [12, 32, [15, 0]]]]]]],
       "%a %s%a%a %a"],
    cst_query = "query",
    cst_mutation = "mutation",
    cst_subscription = "subscription",
    _k_ =
      [0,
       [12, 36, [2, 0, [11, cst$4, [15, [11, " = ", [15, 0]]]]]],
       "$%s : %a = %a"],
    _l_ = [0, [12, 36, [2, 0, [11, cst$4, [15, 0]]]], "$%s : %a"],
    _c_ = [0, [11, "...", [2, 0, [15, 0]]], "...%s%a"],
    _b_ = [0, [12, 64, [2, 0, [15, 0]]], "@%s%a"],
    cst_b = "\\b",
    cst_f = "\\f",
    cst_n = "\\n",
    cst_r = "\\r",
    cst_t = "\\t";
   function quote_string(s){
    var
     _F_ = caml_call1(Re[26], 92),
     _G_ = caml_call1(Re[2], _F_),
     _H_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _G_, cst$1), s),
     _I_ = caml_call1(Re[26], 34),
     _J_ = caml_call1(Re[2], _I_),
     _K_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _J_, cst$2), _H_),
     _L_ = caml_call1(Re[26], 8),
     _M_ = caml_call1(Re[2], _L_),
     _N_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _M_, cst_b), _K_),
     _O_ = caml_call1(Re[26], 12),
     _P_ = caml_call1(Re[2], _O_),
     _Q_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _P_, cst_f), _N_),
     _R_ = caml_call1(Re[26], 10),
     _S_ = caml_call1(Re[2], _R_),
     _T_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _S_, cst_n), _Q_),
     _U_ = caml_call1(Re[26], 13),
     _V_ = caml_call1(Re[2], _U_),
     _W_ = caml_call1(caml_call5(Re[91], 0, 0, 0, _V_, cst_r), _T_),
     _X_ = caml_call1(Re[26], 9),
     _Y_ = caml_call1(Re[2], _X_);
    return caml_call1(caml_call5(Re[91], 0, 0, 0, _Y_, cst_t), _W_);
   }
   function pp_value(fmt, param){
    if(typeof param === "number") return caml_call2(Fmt[57], fmt, cst_null);
    var _A_ = param[1];
    if(737456202 <= _A_){
     if(848054398 <= _A_){
      if(963043957 <= _A_){
       var
        props = param[2],
        _B_ = caml_call3(Fmt[61], [0, colon], Fmt[57], pp_value),
        _C_ = caml_call2(Fmt[64], [0, Fmt[25]], _B_);
       return caml_call2(caml_call1(Fmt[39], _C_), fmt, props);
      }
      var l = param[2], _D_ = caml_call2(Fmt[64], [0, Fmt[25]], pp_value);
      return caml_call2(caml_call1(Fmt[38], _D_), fmt, l);
     }
     if(770676513 <= _A_){
      var e = param[2];
      return caml_call2(Fmt[57], fmt, e);
     }
     var b = param[2];
     return caml_call2(Fmt[44], fmt, b);
    }
    if(3654863 <= _A_){
     if(365180284 <= _A_){
      var f = param[2];
      return caml_call2(Fmt[53], fmt, f);
     }
     var n = param[2];
     return caml_call2(Fmt[45], fmt, n);
    }
    if(-976970511 <= _A_){
     var s = param[2], _E_ = quote_string(s);
     return caml_call2(caml_call2(Fmt[40], 0, Fmt[57]), fmt, _E_);
    }
    var s$0 = param[2];
    return caml_call3(Fmt[21], _a_, fmt, s$0);
   }
   function omit_empty_list(t, fmt, xs){
    return xs ? caml_call2(t, fmt, xs) : 0;
   }
   function arguments$0(fmt, args){
    var
     _y_ = caml_call3(Fmt[61], [0, colon], Fmt[57], pp_value),
     _z_ = caml_call2(Fmt[64], [0, Fmt[25]], _y_);
    return omit_empty_list(caml_call1(Fmt[37], _z_), fmt, args);
   }
   function pp_directive(fmt, directive){
    return caml_call5
            (Fmt[21], _b_, fmt, directive[1], arguments$0, directive[2]);
   }
   var directives = caml_call2(Fmt[64], 0, pp_directive);
   function pp_fragment_spread(fmt, fragment_spread){
    return caml_call5
            (Fmt[21],
             _c_,
             fmt,
             fragment_spread[1],
             directives,
             fragment_spread[2]);
   }
   function pp_selection(fmt, param){
    switch(param[0]){
      case 0:
       var f = param[1], match = f[1];
       if(! match)
        return caml_call9
                (Fmt[21],
                 _e_,
                 fmt,
                 f[2],
                 arguments$0,
                 f[3],
                 directives,
                 f[4],
                 selection_set,
                 f[5]);
       var alias = match[1];
       return caml_call10
               (Fmt[21],
                _d_,
                fmt,
                alias,
                f[2],
                arguments$0,
                f[3],
                directives,
                f[4],
                selection_set,
                f[5]);
      case 1:
       var f$0 = param[1];
       return caml_call5(Fmt[21], _f_, fmt, f$0[1], directives, f$0[2]);
      default:
       var f$1 = param[1], match$0 = f$1[1];
       if(! match$0)
        return caml_call6
                (Fmt[21], _h_, fmt, directives, f$1[2], selection_set, f$1[3]);
       var condition = match$0[1];
       return caml_call7
               (Fmt[21],
                _g_,
                fmt,
                condition,
                directives,
                f$1[2],
                selection_set,
                f$1[3]);
    }
   }
   function selection_set(fmt){
    var
     _t_ = caml_call2(Fmt[64], 0, pp_selection),
     _u_ = caml_call2(Fmt[28], Fmt[22], _t_),
     _v_ = caml_call2(Fmt[35], _i_, _u_),
     _w_ = caml_call1(Fmt[39], _v_);
    return function(_x_){return omit_empty_list(_w_, fmt, _x_);};
   }
   function pp_typ(fmt, param){
    switch(param[0]){
      case 0:
       var t = param[1]; return caml_call2(Fmt[57], fmt, t);
      case 1:
       var t$0 = param[1]; return caml_call3(Fmt[38], pp_typ, fmt, t$0);
      default:
       var t$1 = param[1]; return caml_call4(Fmt[21], _j_, fmt, pp_typ, t$1);
    }
   }
   function pp_variable_definition(fmt, var_def){
    var match = var_def[3];
    if(! match)
     return caml_call5(Fmt[21], _l_, fmt, var_def[1], pp_typ, var_def[2]);
    var value = match[1];
    return caml_call7
            (Fmt[21],
             _k_,
             fmt,
             var_def[1],
             pp_typ,
             var_def[2],
             pp_value,
             value);
   }
   var
    _m_ = caml_call2(Fmt[64], [0, Fmt[25]], pp_variable_definition),
    _n_ = caml_call1(Fmt[37], _m_);
   function variables(_r_, _s_){return omit_empty_list(_n_, _r_, _s_);}
   function pp_optype(fmt, param){
    switch(param){
      case 0:
       return caml_call2(Fmt[57], fmt, cst_query);
      case 1:
       return caml_call2(Fmt[57], fmt, cst_mutation);
      default: return caml_call2(Fmt[57], fmt, cst_subscription);
    }
   }
   function pp_operation(fmt, op){
    var match = op[2];
    if(match){
     var name = match[1];
     return caml_call11
             (Fmt[21],
              _o_,
              fmt,
              pp_optype,
              op[1],
              name,
              variables,
              op[3],
              directives,
              op[4],
              selection_set,
              op[5]);
    }
    var _q_ = op[5];
    return selection_set(fmt)(_q_);
   }
   function pp_fragment(fmt, f){
    return caml_call8
            (Fmt[21],
             _p_,
             fmt,
             f[1],
             f[2],
             directives,
             f[3],
             selection_set,
             f[4]);
   }
   function pp_definition(fmt, param){
    if(0 === param[0]){var op = param[1]; return pp_operation(fmt, op);}
    var f = param[1];
    return pp_fragment(fmt, f);
   }
   var
    pp_document = caml_call2(Fmt[64], 0, pp_definition),
    Pp =
      [0,
       comma,
       colon,
       quote_string,
       pp_value,
       omit_empty_list,
       arguments$0,
       pp_directive,
       directives,
       pp_fragment_spread,
       pp_selection,
       selection_set,
       pp_typ,
       pp_variable_definition,
       variables,
       pp_optype,
       pp_operation,
       pp_fragment,
       pp_definition,
       pp_document],
    pp_document$0 = Pp[19],
    Graphql_parser_Ast = [0, Pp, pp_document$0];
   runtime.caml_register_global(29, Graphql_parser_Ast, "Graphql_parser__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_parser__Parser
//# unitInfo: Requires: Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    v$4 = "on",
    v$3 = "fragment",
    v$2 = "subscription",
    v$1 = "mutation",
    v$0 = "query",
    v = "null",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Error =
      [248,
       "Graphql_parser__Parser.MenhirBasics.Error",
       runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11,
        "Internal failure -- please contact the parser generator's developers.\n",
        [10, 0]],
       "Internal failure -- please contact the parser generator's developers.\n%!"],
    _b_ = [0, "graphql_parser/src/parser.ml", 1209, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_fail(param){
    caml_call1(Stdlib_Printf[3], _a_);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function menhir_run_001$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 2;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_optype,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_optype
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_optype
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var _bt_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bt_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bt_);
       case 4:
        var _bu_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bu_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bu_);
       case 5:
        var _bv_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bv_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bv_);
       case 6:
        var _bw_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bw_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_008
                (counter$4, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bw_);
       case 7:
        var _bx_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bx_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_010
                (counter$6, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bx_);
       case 11:
        var _by_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _by_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_011
                (counter$7, menhir_stack$0, menhir_lexbuf, menhir_lexer, _by_);
       case 8:
       case 10:
       case 18:
        var menhir_s$0 = 31, v$0 = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_option_name,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0,
                   tok]);
        var counter$3 = counter + 1 | 0;
        return menhir_goto_option_name
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0,
                 tok);
     }
    else
     switch(tok[0]){
       case 1:
        var v_0 = tok[1], _bz_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _bz_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_009
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _bz_);
       case 4:
        var v_1 = tok[1], _bA_ = 31;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _bA_]);
        var counter$8 = counter + 1 | 0;
        return menhir_run_014
                (counter$8,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _bA_);
     }
    return eRR(0);
   }
   function menhir_run_005
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_keyword_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               v$2,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_keyword_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v$2,
             menhir_s,
             tok);
   }
   function menhir_goto_keyword_name
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    switch(menhir_s){
      case 1:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$8 = counter + 1 | 0;
       return menhir_run_016
               (counter$8,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$9 = counter + 1 | 0;
       return menhir_run_016
               (counter$9,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$10 = counter + 1 | 0;
       return menhir_run_016
               (counter$10,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$11 = counter + 1 | 0;
       return menhir_run_016
               (counter$11,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$12 = counter + 1 | 0;
       return menhir_run_016
               (counter$12,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$0 = counter + 1 | 0;
       return menhir_run_040
               (counter$0,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 9:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$1 = counter + 1 | 0;
       return menhir_run_040
               (counter$1,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$13 = counter + 1 | 0;
       return menhir_run_016
               (counter$13,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 11:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$2 = counter + 1 | 0;
       return menhir_run_040
               (counter$2,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 12:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$14 = counter + 1 | 0;
       return menhir_run_016
               (counter$14,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 13:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$15 = counter + 1 | 0;
       return menhir_run_016
               (counter$15,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 14:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$3 = counter + 1 | 0;
       return menhir_run_040
               (counter$3,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 15:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$16 = counter + 1 | 0;
       return menhir_run_016
               (counter$16,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 19:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$17 = counter + 1 | 0;
       return menhir_run_016
               (counter$17,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 21:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$18 = counter + 1 | 0;
       return menhir_run_016
               (counter$18,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 27:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$19 = counter + 1 | 0;
       return menhir_run_016
               (counter$19,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 31:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$20 = counter + 1 | 0;
       return menhir_run_016
               (counter$20,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 33:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$21 = counter + 1 | 0;
       return menhir_run_016
               (counter$21,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 34:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$22 = counter + 1 | 0;
       return menhir_run_016
               (counter$22,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 35:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$23 = counter + 1 | 0;
       return menhir_run_016
               (counter$23,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 36:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$4 = counter + 1 | 0;
       return menhir_run_040
               (counter$4,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 37:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$5 = counter + 1 | 0;
       return menhir_run_040
               (counter$5,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 38:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$24 = counter + 1 | 0;
       return menhir_run_016
               (counter$24,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 39:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$6 = counter + 1 | 0;
       return menhir_run_040
               (counter$6,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 40:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_016,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$25 = counter + 1 | 0;
       return menhir_run_016
               (counter$25,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 41:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_040,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$7 = counter + 1 | 0;
       return menhir_run_040
               (counter$7,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      default: return menhir_fail(0);
    }
   }
   function menhir_run_040
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_enum_value,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_enum_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_goto_enum_value
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    if(8 <= menhir_s)
     switch(menhir_s - 8 | 0){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_041,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_041
                (counter$4,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_041,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_041
                (counter$5,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_041,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_041
                (counter$6,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_041,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_041
                (counter$7,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 28:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_107,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_107
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 29:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_107,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_107
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 31:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_107,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_107
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
       case 33:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_107,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_107
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s,
                 tok);
     }
    return menhir_fail(0);
   }
   function menhir_run_107
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    var v = [0, 770676513, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_value_parser_const
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(36 <= menhir_s)
     switch(menhir_s - 36 | 0){
       case 0:
        var v = [0, _1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_option_default_val,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, tok]);
        var counter$1 = counter + 1 | 0;
        return menhir_goto_option_default_val
                (counter$1, menhir_stack, menhir_lexbuf, menhir_lexer, v, tok);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_114,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   _1,
                   menhir_s,
                   tok]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_114
                (counter$10,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 _1,
                 menhir_s,
                 tok);
       case 3:
        var menhir_stack$0 = [0, menhir_stack, menhir_s, _1];
        if(typeof tok === "number")
         switch(tok){
           case 0:
            var _bl_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_005,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bl_]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_005
                    (counter$0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bl_);
           case 3:
            var menhir_stack$1 = menhir_stack$0, xs$0 = 0;
            for(;;){
             var
              _3 = menhir_stack$1[3],
              menhir_stack$2 = menhir_stack$1[1],
              _1$0 = menhir_stack$2[3],
              menhir_s$0 = menhir_stack$2[2],
              menhir_stack$3 = menhir_stack$2[1],
              x = [0, _1$0, _3],
              xs = [0, x, xs$0],
              switcher = menhir_s$0 - 38 | 0;
             if(2 >= switcher >>> 0)
              switch(switcher){
                case 0:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_110,
                           [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, xs]);
                 var counter$9 = counter + 1 | 0;
                 return menhir_run_110
                         (counter$9, menhir_stack$3, menhir_lexbuf, menhir_lexer, xs);
                case 1: break;
                default:
                 var menhir_stack$1 = menhir_stack$3, xs$0 = xs; continue;
              }
             return menhir_fail(0);
            }
           case 4:
            var _bm_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_006,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bm_]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_006
                    (counter$2,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bm_);
           case 5:
            var _bn_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_007,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bn_]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_007
                    (counter$3,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bn_);
           case 6:
            var _bo_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_008,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bo_]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_008
                    (counter$4,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bo_);
           case 7:
            var _bp_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_010,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bp_]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_010
                    (counter$6,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bp_);
           case 11:
            var _bq_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_011,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bq_]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_011
                    (counter$7,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bq_);
         }
        else
         switch(tok[0]){
           case 1:
            var v_0 = tok[1], _br_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_009,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _br_]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_009
                    (counter$5,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_0,
                     _br_);
           case 4:
            var v_1 = tok[1], _bs_ = 40;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_014,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _bs_]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_014
                    (counter$8,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_1,
                     _bs_);
         }
        return eRR(0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_114,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   _1,
                   menhir_s,
                   tok]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_114
                (counter$11,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 _1,
                 menhir_s,
                 tok);
     }
    return menhir_fail(0);
   }
   function menhir_goto_option_default_val
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _5, tok){
    var
     _4 = menhir_stack[3],
     menhir_stack$0 = menhir_stack[1],
     _2 = menhir_stack$0[3],
     menhir_stack$1 = menhir_stack$0[1],
     menhir_s = menhir_stack$1[2],
     menhir_stack$2 = menhir_stack$1[1],
     v = [0, _2, _4, _5],
     menhir_stack$3 = [0, menhir_stack$2, menhir_s, v];
    if(typeof tok === "number")
     if(1 === tok){
      var menhir_stack$4 = menhir_stack$3, xs = 0;
      for(;;){
       var
        x = menhir_stack$4[3],
        menhir_s$0 = menhir_stack$4[2],
        menhir_stack$5 = menhir_stack$4[1],
        xs$0 = [0, x, xs];
       if(32 === menhir_s$0){
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_121,
                  [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, xs$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_121
                (counter$1, menhir_stack$5, menhir_lexbuf, menhir_lexer, xs$0);
       }
       if(42 !== menhir_s$0) return menhir_fail(0);
       var menhir_stack$4 = menhir_stack$5, xs = xs$0;
      }
     }
     else if(15 === tok){
      var _bk_ = 42;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_087,
                [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, _bk_]);
      var counter$0 = counter + 1 | 0;
      return menhir_run_087
              (counter$0, menhir_stack$3, menhir_lexbuf, menhir_lexer, _bk_);
     }
    return eRR(0);
   }
   function menhir_run_087
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 33;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_run_006
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_keyword_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               v$0,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_keyword_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v$0,
             menhir_s,
             tok);
   }
   function menhir_run_007
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               v$4,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v$4,
             menhir_s,
             tok);
   }
   function menhir_goto_name
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2, menhir_s, tok){
    switch(menhir_s){
      case 1:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_063,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$28 = counter + 1 | 0;
       return menhir_run_063
               (counter$28,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 3:
       var menhir_s$4 = menhir_stack[2], menhir_stack$6 = menhir_stack[1];
       if(2 === menhir_s$4){
        var v$5 = [0, _2];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_option_type_condit,
                  [0,
                   menhir_stack$6,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$5,
                   menhir_s$4,
                   tok]);
        var counter$18 = counter + 1 | 0;
        return menhir_goto_option_type_condit
                (counter$18,
                 menhir_stack$6,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$5,
                 menhir_s$4,
                 tok);
       }
       if(28 !== menhir_s$4) return menhir_fail(0);
       var menhir_stack$7 = [0, menhir_stack$6, menhir_s$4, _2];
       if(typeof tok === "number"){
        if(10 === tok){
         var v_0$1 = 0, _bi_ = 29;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_081,
                   [0,
                    menhir_stack$7,
                    menhir_lexbuf,
                    menhir_lexer,
                    v_0$1,
                    _bi_,
                    tok]);
         var counter$27 = counter + 1 | 0;
         return menhir_run_081
                 (counter$27,
                  menhir_stack$7,
                  menhir_lexbuf,
                  menhir_lexer,
                  v_0$1,
                  _bi_,
                  tok);
        }
        if(18 <= tok){
         var _bj_ = 29;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_020,
                   [0, menhir_stack$7, menhir_lexbuf, menhir_lexer, _bj_]);
         var counter$7 = counter + 1 | 0;
         return menhir_run_020
                 (counter$7,
                  menhir_stack$7,
                  menhir_lexbuf,
                  menhir_lexer,
                  _bj_);
        }
       }
       return eRR(0);
      case 5:
       var menhir_stack$5 = [0, menhir_stack, menhir_s, _2];
       a:
       {
        if(typeof tok === "number")
         switch(tok){
           case 8:
            var _bh_ = 6;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_022,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, _bh_]);
            var counter$24 = counter + 1 | 0;
            return menhir_run_022
                    (counter$24,
                     menhir_stack$5,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bh_);
           case 1:
           case 2:
           case 9:
           case 12:
           case 13:
           case 15:
           case 16:
           case 17:
            break a;
         }
        else
         switch(tok[0]){case 1:case 4: break;default: break a;}
        var v_0$0 = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_053,
                  [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, v_0$0, tok]);
        var counter$26 = counter + 1 | 0;
        return menhir_run_053
                (counter$26,
                 menhir_stack$5,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0$0,
                 tok);
       }
       return eRR(0);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_023,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$33 = counter + 1 | 0;
       return menhir_run_023
               (counter$33,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_030,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$31 = counter + 1 | 0;
       return menhir_run_030
               (counter$31,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 12:
       var
        menhir_s$3 = menhir_stack[2],
        menhir_stack$4 = menhir_stack[1],
        v = [0, -1027682724, _2];
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_goto_value,
                 [0,
                  menhir_stack$4,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$3,
                  tok]);
       var counter$30 = counter + 1 | 0;
       return menhir_goto_value
               (counter$30,
                menhir_stack$4,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s$3,
                tok);
      case 13:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_030,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$32 = counter + 1 | 0;
       return menhir_run_030
               (counter$32,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 15:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_023,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$34 = counter + 1 | 0;
       return menhir_run_023
               (counter$34,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 19:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_063,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$29 = counter + 1 | 0;
       return menhir_run_063
               (counter$29,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 21:
       var menhir_stack$3 = [0, menhir_stack, menhir_s, _2];
       a:
       {
        if(typeof tok === "number")
         switch(tok){
           case 8:
            var _bg_ = 22;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_022,
                      [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, _bg_]);
            var counter$23 = counter + 1 | 0;
            return menhir_run_022
                    (counter$23,
                     menhir_stack$3,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bg_);
           case 1:
           case 2:
           case 9:
           case 12:
           case 13:
           case 15:
           case 16:
           case 17:
            break a;
         }
        else
         switch(tok[0]){case 1:case 4: break;default: break a;}
        var v_0 = 0, _bf_ = 22;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_066,
                  [0,
                   menhir_stack$3,
                   menhir_lexbuf,
                   menhir_lexer,
                   v_0,
                   _bf_,
                   tok]);
        var counter$25 = counter + 1 | 0;
        return menhir_run_066
                (counter$25,
                 menhir_stack$3,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _bf_,
                 tok);
       }
       return eRR(0);
      case 31:
       var v$0 = [0, _2];
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_goto_option_name,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s,
                  tok]);
       var counter$6 = counter + 1 | 0;
       return menhir_goto_option_name
               (counter$6,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v$0,
                menhir_s,
                tok);
      case 33:
       var menhir_stack$0 = [0, menhir_stack, menhir_s, _2];
       if(typeof tok === "number" && 16 === tok){
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s$0 = 34;
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 0:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_005,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_005
                    (counter$0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 4:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_006,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_006
                    (counter$2,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 5:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_007,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_007
                    (counter$4,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 6:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_008,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_008
                    (counter$8,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 7:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_010,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$12 = counter + 1 | 0;
            return menhir_run_010
                    (counter$12,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
           case 9:
            var menhir_stack$1 = menhir_stack$0, menhir_s$1 = menhir_s$0;
            for(;;){
             var
              menhir_stack$2 = [0, menhir_stack$1, menhir_s$1],
              tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
              menhir_s$2 = 35;
             if(typeof tok$1 === "number")
              switch(tok$1){
                case 0:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_005,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$1 = counter + 1 | 0;
                 return menhir_run_005
                         (counter$1,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
                case 4:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_006,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$3 = counter + 1 | 0;
                 return menhir_run_006
                         (counter$3,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
                case 5:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_007,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$5 = counter + 1 | 0;
                 return menhir_run_007
                         (counter$5,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
                case 6:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_008,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$9 = counter + 1 | 0;
                 return menhir_run_008
                         (counter$9,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
                case 7:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_010,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$13 = counter + 1 | 0;
                 return menhir_run_010
                         (counter$13,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
                case 9:
                 var menhir_stack$1 = menhir_stack$2, menhir_s$1 = menhir_s$2;
                 continue;
                case 11:
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_011,
                           [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, menhir_s$2]);
                 var counter$15 = counter + 1 | 0;
                 return menhir_run_011
                         (counter$15,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          menhir_s$2);
              }
             else
              switch(tok$1[0]){
                case 1:
                 var v$3 = tok$1[1];
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_009,
                           [0,
                            menhir_stack$2,
                            menhir_lexbuf,
                            menhir_lexer,
                            v$3,
                            menhir_s$2]);
                 var counter$11 = counter + 1 | 0;
                 return menhir_run_009
                         (counter$11,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          v$3,
                          menhir_s$2);
                case 4:
                 var v$4 = tok$1[1];
                 if(counter >= 50)
                  return caml_trampoline_return
                          (menhir_run_014,
                           [0,
                            menhir_stack$2,
                            menhir_lexbuf,
                            menhir_lexer,
                            v$4,
                            menhir_s$2]);
                 var counter$17 = counter + 1 | 0;
                 return menhir_run_014
                         (counter$17,
                          menhir_stack$2,
                          menhir_lexbuf,
                          menhir_lexer,
                          v$4,
                          menhir_s$2);
              }
             return eRR(0);
            }
           case 11:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_011,
                      [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
            var counter$14 = counter + 1 | 0;
            return menhir_run_011
                    (counter$14,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     menhir_s$0);
         }
        else
         switch(tok$0[0]){
           case 1:
            var v$1 = tok$0[1];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_009,
                      [0,
                       menhir_stack$0,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$1,
                       menhir_s$0]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_009
                    (counter$10,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$1,
                     menhir_s$0);
           case 4:
            var v$2 = tok$0[1];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_014,
                      [0,
                       menhir_stack$0,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$2,
                       menhir_s$0]);
            var counter$16 = counter + 1 | 0;
            return menhir_run_014
                    (counter$16,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$2,
                     menhir_s$0);
         }
        return eRR(0);
       }
       return eRR(0);
      case 34:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_094,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$21 = counter + 1 | 0;
       return menhir_run_094
               (counter$21,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 35:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_094,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$22 = counter + 1 | 0;
       return menhir_run_094
               (counter$22,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 38:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_101,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$19 = counter + 1 | 0;
       return menhir_run_101
               (counter$19,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      case 40:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_101,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok]);
       var counter$20 = counter + 1 | 0;
       return menhir_run_101
               (counter$20,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                _2,
                menhir_s,
                tok);
      default: return menhir_fail(0);
    }
   }
   function menhir_goto_option_name
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 8 <= tok)
     switch(tok - 8 | 0){
       case 0:
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 === "number"){
         if(1 === tok$0){
          var v_0 = 0;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_121,
                    [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0]);
          var counter$1 = counter + 1 | 0;
          return menhir_run_121
                  (counter$1,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v_0);
         }
         if(15 === tok$0){
          var _be_ = 32;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_087,
                    [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _be_]);
          var counter$0 = counter + 1 | 0;
          return menhir_run_087
                  (counter$0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   _be_);
         }
        }
        return eRR(0);
       case 2:
       case 10:
        var v$0 = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_loption_variable_d,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$0, tok]);
        var counter$2 = counter + 1 | 0;
        return menhir_goto_loption_variable_d
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 tok);
     }
    return eRR(0);
   }
   function menhir_run_121
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_loption_variable_d,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, _2, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_loption_variable_d
            (counter$0, menhir_stack, menhir_lexbuf, menhir_lexer, _2, tok);
   }
   function menhir_goto_loption_variable_d
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, tok){
    var menhir_stack$0 = [0, menhir_stack, v];
    if(typeof tok === "number"){
     if(10 === tok){
      var v_0 = 0, _bc_ = 43;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_125,
                [0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _bc_,
                 tok]);
      var counter$1 = counter + 1 | 0;
      return menhir_run_125
              (counter$1,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v_0,
               _bc_,
               tok);
     }
     if(18 <= tok){
      var _bd_ = 43;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_020,
                [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bd_]);
      var counter$0 = counter + 1 | 0;
      return menhir_run_020
              (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _bd_);
     }
    }
    return eRR(0);
   }
   function menhir_run_020
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 5;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_run_008
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_fragment_name,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_fragment_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_fragment_name
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    switch(menhir_s){
      case 1:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$3 = counter + 1 | 0;
       return menhir_run_017
               (counter$3,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 2:
       var menhir_stack$1 = [0, menhir_stack, menhir_s, v];
       a:
       {
        if(typeof tok === "number")
         switch(tok){
           case 18:
            var _bb_ = 18;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_020,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _bb_]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_020
                    (counter$0,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _bb_);
           case 0:
           case 3:
           case 4:
           case 5:
           case 6:
           case 7:
           case 11:
           case 14: break;
           default: break a;
         }
        else
         switch(tok[0]){case 1:case 4: break;default: break a;}
        var v_0 = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_060,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v_0, tok]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_060
                (counter$2,
                 menhir_stack$1,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 tok);
       }
       return eRR(0);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$4 = counter + 1 | 0;
       return menhir_run_017
               (counter$4,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$5 = counter + 1 | 0;
       return menhir_run_017
               (counter$5,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$6 = counter + 1 | 0;
       return menhir_run_017
               (counter$6,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$7 = counter + 1 | 0;
       return menhir_run_017
               (counter$7,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 12:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$8 = counter + 1 | 0;
       return menhir_run_017
               (counter$8,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 13:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$9 = counter + 1 | 0;
       return menhir_run_017
               (counter$9,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 15:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$10 = counter + 1 | 0;
       return menhir_run_017
               (counter$10,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 19:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$11 = counter + 1 | 0;
       return menhir_run_017
               (counter$11,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 21:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$12 = counter + 1 | 0;
       return menhir_run_017
               (counter$12,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 27:
       var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
       if(typeof tok === "number" && 5 === tok){
        var _ba_ = 28;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_013,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ba_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_013
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ba_);
       }
       return eRR(0);
      case 31:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$13 = counter + 1 | 0;
       return menhir_run_017
               (counter$13,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 33:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$14 = counter + 1 | 0;
       return menhir_run_017
               (counter$14,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 34:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$15 = counter + 1 | 0;
       return menhir_run_017
               (counter$15,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 35:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$16 = counter + 1 | 0;
       return menhir_run_017
               (counter$16,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 38:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$17 = counter + 1 | 0;
       return menhir_run_017
               (counter$17,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      case 40:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_017,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$18 = counter + 1 | 0;
       return menhir_run_017
               (counter$18,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      default: return menhir_fail(0);
    }
   }
   function menhir_run_013
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 3;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_run_009
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_fragment_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_fragment_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_010
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_keyword_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               v$1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_keyword_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v$1,
             menhir_s,
             tok);
   }
   function menhir_run_011
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_keyword_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               v$3,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_keyword_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v$3,
             menhir_s,
             tok);
   }
   function menhir_run_014
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     v = caml_call1(Stdlib[30], _1);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_fragment_name,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_fragment_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_060
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _3, tok){
    var
     _2 = menhir_stack[3],
     menhir_stack$0 = menhir_stack[1],
     menhir_s = menhir_stack$0[2],
     menhir_stack$1 = menhir_stack$0[1],
     _1 = [1, [0, _2, _3]];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_selection,
              [0,
               menhir_stack$1,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_selection
            (counter$0,
             menhir_stack$1,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_goto_selection
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$1, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var menhir_stack$0 = [0, menhir_stack, menhir_s, v$1], _a3_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a3_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a3_);
       case 3:
        var
         v = [0, v$1, 0],
         menhir_stack$9 = menhir_stack,
         _5 = v,
         menhir_s$0 = menhir_s;
        for(;;){
         if(1 === menhir_s$0) break;
         if(19 !== menhir_s$0) return menhir_fail(0);
         var
          x = menhir_stack$9[3],
          menhir_s$5 = menhir_stack$9[2],
          menhir_stack$22 = menhir_stack$9[1],
          v$2 = [0, x, _5],
          menhir_stack$9 = menhir_stack$22,
          _5 = v$2,
          menhir_s$0 = menhir_s$5;
        }
        var
         tok$0 = caml_call1(menhir_lexer, menhir_lexbuf),
         menhir_s$1 = menhir_stack$9[2],
         menhir_stack$10 = menhir_stack$9[1];
        if(! menhir_s$1){
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_083,
                   [0,
                    menhir_stack$10,
                    menhir_lexbuf,
                    menhir_lexer,
                    _5,
                    menhir_s$1,
                    tok$0]);
         var counter$13 = counter + 1 | 0;
         return menhir_run_083
                 (counter$13,
                  menhir_stack$10,
                  menhir_lexbuf,
                  menhir_lexer,
                  _5,
                  menhir_s$1,
                  tok$0);
        }
        if(16 <= menhir_s$1)
         switch(menhir_s$1 - 16 | 0){
           case 0:
            var
             _3$1 = menhir_stack$10[3],
             menhir_stack$19 = menhir_stack$10[1],
             _2$1 = menhir_stack$19[3],
             menhir_stack$20 = menhir_stack$19[1],
             menhir_s$4 = menhir_stack$20[2],
             menhir_stack$21 = menhir_stack$20[1],
             _1$0 = [2, [0, _2$1, _3$1, _5]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_selection,
                      [0,
                       menhir_stack$21,
                       menhir_lexbuf,
                       menhir_lexer,
                       _1$0,
                       menhir_s$4,
                       tok$0]);
            var counter$8 = counter + 1 | 0;
            return menhir_goto_selection
                    (counter$8,
                     menhir_stack$21,
                     menhir_lexbuf,
                     menhir_lexer,
                     _1$0,
                     menhir_s$4,
                     tok$0);
           case 8:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_068,
                      [0,
                       menhir_stack$10,
                       menhir_lexbuf,
                       menhir_lexer,
                       _5,
                       menhir_s$1,
                       tok$0]);
            var counter$14 = counter + 1 | 0;
            return menhir_run_068
                    (counter$14,
                     menhir_stack$10,
                     menhir_lexbuf,
                     menhir_lexer,
                     _5,
                     menhir_s$1,
                     tok$0);
           case 10:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_068,
                      [0,
                       menhir_stack$10,
                       menhir_lexbuf,
                       menhir_lexer,
                       _5,
                       menhir_s$1,
                       tok$0]);
            var counter$15 = counter + 1 | 0;
            return menhir_run_068
                    (counter$15,
                     menhir_stack$10,
                     menhir_lexbuf,
                     menhir_lexer,
                     _5,
                     menhir_s$1,
                     tok$0);
           case 14:
            var
             _4$0 = menhir_stack$10[3],
             menhir_stack$15 = menhir_stack$10[1],
             _3$0 = menhir_stack$15[3],
             menhir_stack$16 = menhir_stack$15[1],
             _2$0 = menhir_stack$16[3],
             menhir_stack$17 = menhir_stack$16[1],
             menhir_s$3 = menhir_stack$17[2],
             menhir_stack$18 = menhir_stack$17[1],
             _1 = [1, [0, _2$0, _3$0, _4$0, _5]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_definition,
                      [0,
                       menhir_stack$18,
                       menhir_lexbuf,
                       menhir_lexer,
                       _1,
                       menhir_s$3,
                       tok$0]);
            var counter$11 = counter + 1 | 0;
            return menhir_goto_definition
                    (counter$11,
                     menhir_stack$18,
                     menhir_lexbuf,
                     menhir_lexer,
                     _1,
                     menhir_s$3,
                     tok$0);
           case 28:
            var
             _4 = menhir_stack$10[3],
             menhir_stack$11 = menhir_stack$10[1],
             _3 = menhir_stack$11[2],
             menhir_stack$12 = menhir_stack$11[1],
             _2 = menhir_stack$12[3],
             menhir_stack$13 = menhir_stack$12[1],
             _1$1 = menhir_stack$13[3],
             menhir_s$2 = menhir_stack$13[2],
             menhir_stack$14 = menhir_stack$13[1],
             v$0 = [0, [0, _1$1, _2, _3, _4, _5]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_operation,
                      [0,
                       menhir_stack$14,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$0,
                       menhir_s$2,
                       tok$0]);
            var counter$10 = counter + 1 | 0;
            return menhir_goto_operation
                    (counter$10,
                     menhir_stack$14,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$0,
                     menhir_s$2,
                     tok$0);
           case 29:
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_083,
                      [0,
                       menhir_stack$10,
                       menhir_lexbuf,
                       menhir_lexer,
                       _5,
                       menhir_s$1,
                       tok$0]);
            var counter$12 = counter + 1 | 0;
            return menhir_run_083
                    (counter$12,
                     menhir_stack$10,
                     menhir_lexbuf,
                     menhir_lexer,
                     _5,
                     menhir_s$1,
                     tok$0);
         }
        return menhir_fail(0);
       case 4:
        var menhir_stack$1 = [0, menhir_stack, menhir_s, v$1], _a4_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _a4_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$1, menhir_lexbuf, menhir_lexer, _a4_);
       case 5:
        var menhir_stack$2 = [0, menhir_stack, menhir_s, v$1], _a5_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, _a5_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2, menhir_stack$2, menhir_lexbuf, menhir_lexer, _a5_);
       case 6:
        var menhir_stack$3 = [0, menhir_stack, menhir_s, v$1], _a6_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, _a6_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3, menhir_stack$3, menhir_lexbuf, menhir_lexer, _a6_);
       case 7:
        var menhir_stack$4 = [0, menhir_stack, menhir_s, v$1], _a7_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _a7_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5, menhir_stack$4, menhir_lexbuf, menhir_lexer, _a7_);
       case 11:
        var menhir_stack$5 = [0, menhir_stack, menhir_s, v$1], _a8_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, _a8_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6, menhir_stack$5, menhir_lexbuf, menhir_lexer, _a8_);
       case 14:
        var menhir_stack$6 = [0, menhir_stack, menhir_s, v$1], _a9_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_012,
                  [0, menhir_stack$6, menhir_lexbuf, menhir_lexer, _a9_]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_012
                (counter$9, menhir_stack$6, menhir_lexbuf, menhir_lexer, _a9_);
     }
    else
     switch(tok[0]){
       case 1:
        var
         v_0 = tok[1],
         menhir_stack$7 = [0, menhir_stack, menhir_s, v$1],
         _a__ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0, menhir_stack$7, menhir_lexbuf, menhir_lexer, v_0, _a__]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$7,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _a__);
       case 4:
        var
         v_1 = tok[1],
         menhir_stack$8 = [0, menhir_stack, menhir_s, v$1],
         _a$_ = 19;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0, menhir_stack$8, menhir_lexbuf, menhir_lexer, v_1, _a$_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$8,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _a$_);
     }
    return eRR(0);
   }
   function menhir_run_012
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 2;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_013,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_013
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_008
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 10:
       case 18:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_option_type_condit,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0,
                   tok]);
        var counter$8 = counter + 1 | 0;
        return menhir_goto_option_type_condit
                (counter$8,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0,
                 tok);
     }
    else
     switch(tok[0]){
       case 1:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
       case 4:
        var v$1 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$1,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_goto_option_type_condit
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number"){
     if(10 === tok){
      var v_0 = 0, _a1_ = 4;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_055,
                [0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _a1_,
                 tok]);
      var counter$1 = counter + 1 | 0;
      return menhir_run_055
              (counter$1,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v_0,
               _a1_,
               tok);
     }
     if(18 <= tok){
      var _a2_ = 4;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_020,
                [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a2_]);
      var counter$0 = counter + 1 | 0;
      return menhir_run_020
              (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a2_);
     }
    }
    return eRR(0);
   }
   function menhir_run_055
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 10 === tok){
     var _a0_ = 16;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_004$0,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a0_]);
     var counter$0 = counter + 1 | 0;
     return menhir_run_004$0
             (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _a0_);
    }
    return eRR(0);
   }
   function menhir_run_004$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 1;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 14:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_012,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$8 = counter + 1 | 0;
        return menhir_run_012
                (counter$8,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_goto_operation
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_definition,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_definition
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_goto_definition
   (counter,
    menhir_stack$1,
    menhir_lexbuf,
    menhir_lexer,
    v$1,
    menhir_s$1,
    tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var menhir_stack$2 = [0, menhir_stack$1, menhir_s$1, v$1], _aV_ = 45;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_001$0,
                  [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, _aV_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_001$0
                (counter$0, menhir_stack$2, menhir_lexbuf, menhir_lexer, _aV_);
       case 4:
        var menhir_stack$3 = [0, menhir_stack$1, menhir_s$1, v$1], _aW_ = 45;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_002$0,
                  [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, _aW_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_002$0
                (counter$2, menhir_stack$3, menhir_lexbuf, menhir_lexer, _aW_);
       case 7:
        var menhir_stack$4 = [0, menhir_stack$1, menhir_s$1, v$1], _aX_ = 45;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_003$0,
                  [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _aX_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_003$0
                (counter$3, menhir_stack$4, menhir_lexbuf, menhir_lexer, _aX_);
       case 10:
        var menhir_stack$5 = [0, menhir_stack$1, menhir_s$1, v$1], _aY_ = 45;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_004$0,
                  [0, menhir_stack$5, menhir_lexbuf, menhir_lexer, _aY_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_004$0
                (counter$1, menhir_stack$5, menhir_lexbuf, menhir_lexer, _aY_);
       case 11:
        var menhir_stack$6 = [0, menhir_stack$1, menhir_s$1, v$1], _aZ_ = 45;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_078$0,
                  [0, menhir_stack$6, menhir_lexbuf, menhir_lexer, _aZ_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_078$0
                (counter$4, menhir_stack$6, menhir_lexbuf, menhir_lexer, _aZ_);
       case 13:
        var
         v = [0, v$1, 0],
         menhir_stack = menhir_stack$1,
         xs = v,
         menhir_s = menhir_s$1;
        for(;;){
         if(! menhir_s) return xs;
         if(45 > menhir_s) return menhir_fail(0);
         var
          x = menhir_stack[3],
          menhir_s$0 = menhir_stack[2],
          menhir_stack$0 = menhir_stack[1],
          v$0 = [0, x, xs],
          menhir_stack = menhir_stack$0,
          xs = v$0,
          menhir_s = menhir_s$0;
        }
        break;
     }
    return eRR(0);
   }
   function menhir_run_002$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 0;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_optype,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_optype
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_003$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 1;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_optype,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_optype
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_078$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 27;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_008
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_010
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_011
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_009
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_014
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_run_083
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    var v = [0, [0, 0, 0, 0, 0, _1]];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_operation,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_operation
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_068
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, x, menhir_s, tok){
    var switcher = menhir_s - 24 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_069,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, x, tok]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_069
                (counter$1, menhir_stack, menhir_lexbuf, menhir_lexer, x, tok);
       case 1: break;
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_072,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, x, tok]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_072
                (counter$0, menhir_stack, menhir_lexbuf, menhir_lexer, x, tok);
     }
    return menhir_fail(0);
   }
   function menhir_run_072
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _4, tok){
    var
     _3 = menhir_stack[3],
     menhir_stack$0 = menhir_stack[1],
     _2 = menhir_stack$0[3],
     menhir_stack$1 = menhir_stack$0[1],
     _1 = menhir_stack$1[3],
     menhir_s = menhir_stack$1[2],
     menhir_stack$2 = menhir_stack$1[1],
     v = [0, [0, 0, _1, _2, _3, _4]];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_field,
              [0,
               menhir_stack$2,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_field
            (counter$0,
             menhir_stack$2,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_field
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_selection,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_selection
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_069
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _6, tok){
    var
     _5 = menhir_stack[3],
     menhir_stack$0 = menhir_stack[1],
     _4 = menhir_stack$0[3],
     menhir_stack$1 = menhir_stack$0[1],
     _3 = menhir_stack$1[3],
     menhir_stack$2 = menhir_stack$1[1],
     menhir_stack$3 = menhir_stack$2[1],
     _1 = menhir_stack$3[3],
     menhir_s = menhir_stack$3[2],
     menhir_stack$4 = menhir_stack$3[1],
     v = [0, [0, [0, _1], _3, _4, _5, _6]];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_field,
              [0,
               menhir_stack$4,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_field
            (counter$0,
             menhir_stack$4,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_017
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_125
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 10 === tok){
     var _aU_ = 44;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_004$0,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aU_]);
     var counter$0 = counter + 1 | 0;
     return menhir_run_004$0
             (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aU_);
    }
    return eRR(0);
   }
   function menhir_run_101
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 16 === tok){
     var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s$0 = 39;
     if(typeof tok$0 === "number")
      switch(tok$0){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_005,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_005
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_006,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_006
                 (counter$1,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_098,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$5 = counter + 1 | 0;
         return menhir_run_098
                 (counter$5,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_010,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_010
                 (counter$2,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 9:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_099,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$7 = counter + 1 | 0;
         return menhir_run_099
                 (counter$7,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 10:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_100,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_100
                 (counter$8,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 11:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_011,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$3 = counter + 1 | 0;
         return menhir_run_011
                 (counter$3,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        default: return eRR(0);
      }
     switch(tok$0[0]){
       case 0:
        var v$0 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_097,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_097
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
       case 1:
        var v$1 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_027,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$1,
                   menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_027
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 menhir_s$0);
       case 2:
        var v$2 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_103,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$2,
                   menhir_s$0]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_103
                (counter$9,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$2,
                 menhir_s$0);
       case 3:
        var v$3 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_104,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$3,
                   menhir_s$0]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_104
                (counter$10,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$3,
                 menhir_s$0);
       default:
        var v$4 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_105,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$4,
                   menhir_s$0]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_105
                (counter$11,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$4,
                 menhir_s$0);
     }
    }
    return eRR(0);
   }
   function menhir_run_097
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     v = [0, -976970511, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_098
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 870828711;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_027
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_enum_value,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_enum_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_099
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf);
     if(typeof tok !== "number")
      switch(tok[0]){
        case 0:
         var v$0 = tok[1], _aP_ = 37;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_097,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$0, _aP_]);
         var counter$4 = counter + 1 | 0;
         return menhir_run_097
                 (counter$4,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  _aP_);
        case 1:
         var v$1 = tok[1], _aQ_ = 37;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_027,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$1, _aQ_]);
         var counter$6 = counter + 1 | 0;
         return menhir_run_027
                 (counter$6,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$1,
                  _aQ_);
        case 2:
         var v$2 = tok[1], _aR_ = 37;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_103,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$2, _aR_]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_103
                 (counter$8,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  _aR_);
        case 3:
         var v$3 = tok[1], _aS_ = 37;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_104,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$3, _aS_]);
         var counter$9 = counter + 1 | 0;
         return menhir_run_104
                 (counter$9,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  _aS_);
        default:
         var v$4 = tok[1], _aT_ = 37;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_105,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$4, _aT_]);
         var counter$10 = counter + 1 | 0;
         return menhir_run_105
                 (counter$10,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$4,
                  _aT_);
      }
     switch(tok){
       case 0:
        var _aJ_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aJ_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aJ_);
       case 2:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_112,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_112
                (counter$11, menhir_stack$1, menhir_lexbuf, menhir_lexer, v);
       case 4:
        var _aK_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aK_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aK_);
       case 6:
        var _aL_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_098,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aL_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_098
                (counter$5, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aL_);
       case 7:
        var _aM_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aM_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_010
                (counter$2, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aM_);
       case 9:
        var menhir_stack$0 = menhir_stack$1, menhir_s$0 = 37; break;
       case 10:
        var _aN_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_100,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aN_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_100
                (counter$7, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aN_);
       case 11:
        var _aO_ = 37;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aO_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_011
                (counter$3, menhir_stack$1, menhir_lexbuf, menhir_lexer, _aO_);
       default: return eRR(0);
     }
    }
   }
   function menhir_run_100
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var _aB_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aB_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aB_);
       case 3:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_110,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v]);
        var counter$8 = counter + 1 | 0;
        return menhir_run_110
                (counter$8, menhir_stack$0, menhir_lexbuf, menhir_lexer, v);
       case 4:
        var _aC_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aC_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aC_);
       case 5:
        var _aD_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aD_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aD_);
       case 6:
        var _aE_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aE_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aE_);
       case 7:
        var _aF_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aF_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aF_);
       case 11:
        var _aG_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aG_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aG_);
     }
    else
     switch(tok[0]){
       case 1:
        var v$0 = tok[1], _aH_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$0, _aH_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 _aH_);
       case 4:
        var v$1 = tok[1], _aI_ = 38;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$1, _aI_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 _aI_);
     }
    return eRR(0);
   }
   function menhir_run_110
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [0, 963043957, _2];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_103
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 3654863, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_104
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 365180284, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_105
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 737456202, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_112
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [0, 848054398, _2];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_const,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_const
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_094
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    var v = [0, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_typ
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var
     menhir_stack$0 = menhir_stack,
     _2 = v,
     menhir_s$0 = menhir_s,
     tok$0 = tok;
    for(;;){
     if(34 === menhir_s$0){
      var menhir_stack$1 = [0, menhir_stack$0, menhir_s$0, _2];
      if(typeof tok$0 === "number")
       switch(tok$0){
         case 12:
          var
           tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
           menhir_s$1 = 36;
          if(typeof tok$1 === "number")
           switch(tok$1){
             case 0:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_005,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$0 = counter + 1 | 0;
              return menhir_run_005
                      (counter$0,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 4:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_006,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$2 = counter + 1 | 0;
              return menhir_run_006
                      (counter$2,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 6:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_098,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$6 = counter + 1 | 0;
              return menhir_run_098
                      (counter$6,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 7:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_010,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$3 = counter + 1 | 0;
              return menhir_run_010
                      (counter$3,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 9:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_099,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$8 = counter + 1 | 0;
              return menhir_run_099
                      (counter$8,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 10:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_100,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$9 = counter + 1 | 0;
              return menhir_run_100
                      (counter$9,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             case 11:
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_011,
                        [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
              var counter$4 = counter + 1 | 0;
              return menhir_run_011
                      (counter$4,
                       menhir_stack$1,
                       menhir_lexbuf,
                       menhir_lexer,
                       menhir_s$1);
             default: return eRR(0);
           }
          switch(tok$1[0]){
            case 0:
             var v$1 = tok$1[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_097,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$1,
                        menhir_s$1]);
             var counter$5 = counter + 1 | 0;
             return menhir_run_097
                     (counter$5,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$1,
                      menhir_s$1);
            case 1:
             var v$2 = tok$1[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_027,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$2,
                        menhir_s$1]);
             var counter$7 = counter + 1 | 0;
             return menhir_run_027
                     (counter$7,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$2,
                      menhir_s$1);
            case 2:
             var v$3 = tok$1[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_103,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$3,
                        menhir_s$1]);
             var counter$10 = counter + 1 | 0;
             return menhir_run_103
                     (counter$10,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$3,
                      menhir_s$1);
            case 3:
             var v$4 = tok$1[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_104,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$4,
                        menhir_s$1]);
             var counter$11 = counter + 1 | 0;
             return menhir_run_104
                     (counter$11,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$4,
                      menhir_s$1);
            default:
             var v$5 = tok$1[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_105,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$5,
                        menhir_s$1]);
             var counter$12 = counter + 1 | 0;
             return menhir_run_105
                     (counter$12,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$5,
                      menhir_s$1);
          }
         case 17:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_093,
                    [0, menhir_stack$1, menhir_lexbuf, menhir_lexer]);
          var counter$13 = counter + 1 | 0;
          return menhir_run_093
                  (counter$13, menhir_stack$1, menhir_lexbuf, menhir_lexer);
         case 1:
         case 15:
          var v$0 = 0;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_option_default_val,
                    [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$0, tok$0]);
          var counter$1 = counter + 1 | 0;
          return menhir_goto_option_default_val
                  (counter$1,
                   menhir_stack$1,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   tok$0);
       }
      return eRR(0);
     }
     if(35 !== menhir_s$0) return menhir_fail(0);
     if(typeof tok$0 === "number"){
      if(2 === tok$0){
       var
        tok$2 = caml_call1(menhir_lexer, menhir_lexbuf),
        menhir_s$2 = menhir_stack$0[2],
        menhir_stack$2 = menhir_stack$0[1],
        v$6 = [1, _2],
        menhir_stack$0 = menhir_stack$2,
        _2 = v$6,
        menhir_s$0 = menhir_s$2,
        tok$0 = tok$2;
       continue;
      }
      if(17 === tok$0){
       var menhir_stack$3 = [0, menhir_stack$0, menhir_s$0, _2];
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_093,
                 [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
       var counter$14 = counter + 1 | 0;
       return menhir_run_093
               (counter$14, menhir_stack$3, menhir_lexbuf, menhir_lexer);
      }
     }
     return eRR(0);
    }
   }
   function menhir_run_093(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     _1 = menhir_stack[3],
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [2, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_typ,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_typ
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_022
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var _at_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _at_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _at_);
       case 1:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_049,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v]);
        var counter$8 = counter + 1 | 0;
        return menhir_run_049
                (counter$8, menhir_stack$0, menhir_lexbuf, menhir_lexer, v);
       case 4:
        var _au_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _au_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _au_);
       case 5:
        var _av_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _av_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _av_);
       case 6:
        var _aw_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aw_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aw_);
       case 7:
        var _ax_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ax_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ax_);
       case 11:
        var _ay_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ay_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ay_);
     }
    else
     switch(tok[0]){
       case 1:
        var v$0 = tok[1], _az_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$0, _az_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 _az_);
       case 4:
        var v$1 = tok[1], _aA_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$1, _aA_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 _aA_);
     }
    return eRR(0);
   }
   function menhir_run_049
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1];
    if(20 <= menhir_s){
     if(23 > menhir_s)
      switch(menhir_s - 20 | 0){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_070,
                   [0,
                    menhir_stack$0,
                    menhir_lexbuf,
                    menhir_lexer,
                    _2,
                    menhir_s,
                    tok]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_070
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok);
        case 1: break;
        default:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_066,
                   [0,
                    menhir_stack$0,
                    menhir_lexbuf,
                    menhir_lexer,
                    _2,
                    menhir_s,
                    tok]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_066
                 (counter$1,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _2,
                  menhir_s,
                  tok);
      }
    }
    else if(6 === menhir_s){
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_053,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _2, tok]);
     var counter$2 = counter + 1 | 0;
     return menhir_run_053
             (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _2, tok);
    }
    return menhir_fail(0);
   }
   function menhir_run_070
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 18:
         var _as_ = 25;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_020,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _as_]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_020
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _as_);
        case 1:
        case 2:
        case 8:
        case 9:
        case 12:
        case 13:
        case 15:
        case 16:
        case 17:
         break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var v_0 = 0, _ar_ = 25;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_071,
               [0,
                menhir_stack$0,
                menhir_lexbuf,
                menhir_lexer,
                v_0,
                _ar_,
                tok]);
     var counter$1 = counter + 1 | 0;
     return menhir_run_071
             (counter$1,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_0,
              _ar_,
              tok);
    }
    return eRR(0);
   }
   function menhir_run_071
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 10:
         var _aq_ = 26;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_004$0,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _aq_]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_004$0
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _aq_);
        case 0:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 11:
        case 14: break;
        default: break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var v_0 = 0;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_072,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, tok]);
     var counter$1 = counter + 1 | 0;
     return menhir_run_072
             (counter$1,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_0,
              tok);
    }
    return menhir_fail(0);
   }
   function menhir_run_066
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 18:
         var _ap_ = 23;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_020,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ap_]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_020
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _ap_);
        case 1:
        case 2:
        case 8:
        case 9:
        case 12:
        case 13:
        case 15:
        case 16:
        case 17:
         break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var v_0 = 0, _ao_ = 23;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_067,
               [0,
                menhir_stack$0,
                menhir_lexbuf,
                menhir_lexer,
                v_0,
                _ao_,
                tok]);
     var counter$1 = counter + 1 | 0;
     return menhir_run_067
             (counter$1,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_0,
              _ao_,
              tok);
    }
    return eRR(0);
   }
   function menhir_run_067
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 10:
         var _an_ = 24;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_004$0,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _an_]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_004$0
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _an_);
        case 0:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 11:
        case 14: break;
        default: break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var v_0 = 0;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_069,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, tok]);
     var counter$1 = counter + 1 | 0;
     return menhir_run_069
             (counter$1,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_0,
              tok);
    }
    return menhir_fail(0);
   }
   function menhir_run_053
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _3, tok){
    var
     _2 = menhir_stack[3],
     menhir_stack$0 = menhir_stack[1],
     menhir_s = menhir_stack$0[2],
     menhir_stack$1 = menhir_stack$0[1],
     v = [0, _2, _3],
     menhir_stack$2 = [0, menhir_stack$1, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 18:
         var _am_ = 17;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_020,
                   [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, _am_]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_020
                 (counter$0,
                  menhir_stack$2,
                  menhir_lexbuf,
                  menhir_lexer,
                  _am_);
        case 1:
        case 2:
        case 8:
        case 9:
        case 12:
        case 13:
        case 15:
        case 16:
        case 17:
         break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var menhir_stack$3 = menhir_stack$2, xs = 0;
     for(;;){
      var
       x = menhir_stack$3[3],
       menhir_s$0 = menhir_stack$3[2],
       menhir_stack$4 = menhir_stack$3[1],
       xs$0 = [0, x, xs];
      if(4 === menhir_s$0){
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_055,
                 [0,
                  menhir_stack$4,
                  menhir_lexbuf,
                  menhir_lexer,
                  xs$0,
                  menhir_s$0,
                  tok]);
       var counter$2 = counter + 1 | 0;
       return menhir_run_055
               (counter$2,
                menhir_stack$4,
                menhir_lexbuf,
                menhir_lexer,
                xs$0,
                menhir_s$0,
                tok);
      }
      if(17 <= menhir_s$0)
       switch(menhir_s$0 - 17 | 0){
         case 0:
          var menhir_stack$3 = menhir_stack$4, xs = xs$0; continue;
         case 1:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_060,
                    [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, xs$0, tok]);
          var counter$1 = counter + 1 | 0;
          return menhir_run_060
                  (counter$1,
                   menhir_stack$4,
                   menhir_lexbuf,
                   menhir_lexer,
                   xs$0,
                   tok);
         case 6:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_067,
                    [0,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs$0,
                     menhir_s$0,
                     tok]);
          var counter$5 = counter + 1 | 0;
          return menhir_run_067
                  (counter$5,
                   menhir_stack$4,
                   menhir_lexbuf,
                   menhir_lexer,
                   xs$0,
                   menhir_s$0,
                   tok);
         case 8:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_071,
                    [0,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs$0,
                     menhir_s$0,
                     tok]);
          var counter$4 = counter + 1 | 0;
          return menhir_run_071
                  (counter$4,
                   menhir_stack$4,
                   menhir_lexbuf,
                   menhir_lexer,
                   xs$0,
                   menhir_s$0,
                   tok);
         case 12:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_081,
                    [0,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs$0,
                     menhir_s$0,
                     tok]);
          var counter$6 = counter + 1 | 0;
          return menhir_run_081
                  (counter$6,
                   menhir_stack$4,
                   menhir_lexbuf,
                   menhir_lexer,
                   xs$0,
                   menhir_s$0,
                   tok);
         case 26:
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_125,
                    [0,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     xs$0,
                     menhir_s$0,
                     tok]);
          var counter$3 = counter + 1 | 0;
          return menhir_run_125
                  (counter$3,
                   menhir_stack$4,
                   menhir_lexbuf,
                   menhir_lexer,
                   xs$0,
                   menhir_s$0,
                   tok);
       }
      return menhir_fail(0);
     }
    }
    return eRR(0);
   }
   function menhir_run_081
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 10 === tok){
     var _al_ = 30;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_004$0,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _al_]);
     var counter$0 = counter + 1 | 0;
     return menhir_run_004$0
             (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _al_);
    }
    return eRR(0);
   }
   function menhir_run_063
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    a:
    {
     if(typeof tok === "number")
      switch(tok){
        case 8:
         var _ak_ = 20;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_022,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _ak_]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_022
                 (counter$8,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  _ak_);
        case 16:
         var
          menhir_stack$1 = [0, menhir_stack$0, 20],
          tok$0 = caml_call1(menhir_lexer, menhir_lexbuf),
          menhir_s$0 = 21;
         if(typeof tok$0 === "number")
          switch(tok$0){
            case 0:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_005,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$0 = counter + 1 | 0;
             return menhir_run_005
                     (counter$0,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 4:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_006,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$1 = counter + 1 | 0;
             return menhir_run_006
                     (counter$1,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 5:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_007,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$2 = counter + 1 | 0;
             return menhir_run_007
                     (counter$2,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 6:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_008,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$3 = counter + 1 | 0;
             return menhir_run_008
                     (counter$3,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 7:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_010,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$5 = counter + 1 | 0;
             return menhir_run_010
                     (counter$5,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
            case 11:
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_011,
                       [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$0]);
             var counter$6 = counter + 1 | 0;
             return menhir_run_011
                     (counter$6,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      menhir_s$0);
          }
         else
          switch(tok$0[0]){
            case 1:
             var v$0 = tok$0[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_009,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$0,
                        menhir_s$0]);
             var counter$4 = counter + 1 | 0;
             return menhir_run_009
                     (counter$4,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$0,
                      menhir_s$0);
            case 4:
             var v$1 = tok$0[1];
             if(counter >= 50)
              return caml_trampoline_return
                      (menhir_run_014,
                       [0,
                        menhir_stack$1,
                        menhir_lexbuf,
                        menhir_lexer,
                        v$1,
                        menhir_s$0]);
             var counter$7 = counter + 1 | 0;
             return menhir_run_014
                     (counter$7,
                      menhir_stack$1,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$1,
                      menhir_s$0);
          }
         return eRR(0);
        case 1:
        case 2:
        case 9:
        case 12:
        case 13:
        case 15:
        case 17:
         break a;
      }
     else
      switch(tok[0]){case 1:case 4: break;default: break a;}
     var v_2 = 0, _aj_ = 20;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_070,
               [0,
                menhir_stack$0,
                menhir_lexbuf,
                menhir_lexer,
                v_2,
                _aj_,
                tok]);
     var counter$9 = counter + 1 | 0;
     return menhir_run_070
             (counter$9,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_2,
              _aj_,
              tok);
    }
    return eRR(0);
   }
   function menhir_goto_value
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _3, menhir_s, tok){
    if(15 > menhir_s)
     switch(menhir_s){
       case 8:
        var
         _1 = menhir_stack[3],
         menhir_s$0 = menhir_stack[2],
         menhir_stack$0 = menhir_stack[1],
         v = [0, _1, _3],
         menhir_stack$1 = [0, menhir_stack$0, menhir_s$0, v];
        if(typeof tok === "number")
         switch(tok){
           case 0:
            var _V_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_005,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _V_]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_005
                    (counter$0,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _V_);
           case 1:
            var menhir_stack$2 = menhir_stack$1, xs$0 = 0;
            for(;;){
             var
              x$0 = menhir_stack$2[3],
              menhir_s$1 = menhir_stack$2[2],
              menhir_stack$3 = menhir_stack$2[1],
              xs$1 = [0, x$0, xs$0];
             if(7 === menhir_s$1){
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_049,
                        [0, menhir_stack$3, menhir_lexbuf, menhir_lexer, xs$1]);
              var counter$16 = counter + 1 | 0;
              return menhir_run_049
                      (counter$16,
                       menhir_stack$3,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs$1);
             }
             if(15 !== menhir_s$1) return menhir_fail(0);
             var menhir_stack$2 = menhir_stack$3, xs$0 = xs$1;
            }
            break;
           case 4:
            var _W_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_006,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _W_]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_006
                    (counter$2,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _W_);
           case 5:
            var _X_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_007,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _X_]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_007
                    (counter$4,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _X_);
           case 6:
            var _Y_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_008,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _Y_]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_008
                    (counter$6,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _Y_);
           case 7:
            var _Z_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_010,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _Z_]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_010
                    (counter$10,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     _Z_);
           case 11:
            var ___ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_011,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, ___]);
            var counter$12 = counter + 1 | 0;
            return menhir_run_011
                    (counter$12,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     ___);
         }
        else
         switch(tok[0]){
           case 1:
            var v_0 = tok[1], _$_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_009,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v_0, _$_]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_009
                    (counter$8,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_0,
                     _$_);
           case 4:
            var v_1 = tok[1], _aa_ = 15;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_014,
                      [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v_1, _aa_]);
            var counter$14 = counter + 1 | 0;
            return menhir_run_014
                    (counter$14,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_1,
                     _aa_);
         }
        return eRR(0);
       case 9:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_044,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   _3,
                   menhir_s,
                   tok]);
        var counter$17 = counter + 1 | 0;
        return menhir_run_044
                (counter$17,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 _3,
                 menhir_s,
                 tok);
       case 11:
        var menhir_stack$4 = [0, menhir_stack, menhir_s, _3];
        if(typeof tok === "number")
         switch(tok){
           case 0:
            var _ab_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_005,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _ab_]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_005
                    (counter$1,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _ab_);
           case 3:
            var menhir_stack$5 = menhir_stack$4, xs$2 = 0;
            for(;;){
             var
              _3$0 = menhir_stack$5[3],
              menhir_stack$6 = menhir_stack$5[1],
              _1$0 = menhir_stack$6[3],
              menhir_s$2 = menhir_stack$6[2],
              menhir_stack$7 = menhir_stack$6[1],
              x = [0, _1$0, _3$0],
              xs = [0, x, xs$2];
             if(10 === menhir_s$2){
              if(counter >= 50)
               return caml_trampoline_return
                       (menhir_run_042,
                        [0, menhir_stack$7, menhir_lexbuf, menhir_lexer, xs]);
              var counter$19 = counter + 1 | 0;
              return menhir_run_042
                      (counter$19,
                       menhir_stack$7,
                       menhir_lexbuf,
                       menhir_lexer,
                       xs);
             }
             if(13 !== menhir_s$2) return menhir_fail(0);
             var menhir_stack$5 = menhir_stack$7, xs$2 = xs;
            }
            break;
           case 4:
            var _ac_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_006,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _ac_]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_006
                    (counter$3,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _ac_);
           case 5:
            var _ad_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_007,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _ad_]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_007
                    (counter$5,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _ad_);
           case 6:
            var _ae_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_008,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _ae_]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_008
                    (counter$7,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _ae_);
           case 7:
            var _af_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_010,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _af_]);
            var counter$11 = counter + 1 | 0;
            return menhir_run_010
                    (counter$11,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _af_);
           case 11:
            var _ag_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_011,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer, _ag_]);
            var counter$13 = counter + 1 | 0;
            return menhir_run_011
                    (counter$13,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     _ag_);
         }
        else
         switch(tok[0]){
           case 1:
            var v_0$0 = tok[1], _ah_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_009,
                      [0,
                       menhir_stack$4,
                       menhir_lexbuf,
                       menhir_lexer,
                       v_0$0,
                       _ah_]);
            var counter$9 = counter + 1 | 0;
            return menhir_run_009
                    (counter$9,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_0$0,
                     _ah_);
           case 4:
            var v_1$0 = tok[1], _ai_ = 13;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_014,
                      [0,
                       menhir_stack$4,
                       menhir_lexbuf,
                       menhir_lexer,
                       v_1$0,
                       _ai_]);
            var counter$15 = counter + 1 | 0;
            return menhir_run_014
                    (counter$15,
                     menhir_stack$4,
                     menhir_lexbuf,
                     menhir_lexer,
                     v_1$0,
                     _ai_);
         }
        return eRR(0);
       case 14:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_044,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   _3,
                   menhir_s,
                   tok]);
        var counter$18 = counter + 1 | 0;
        return menhir_run_044
                (counter$18,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 _3,
                 menhir_s,
                 tok);
     }
    return menhir_fail(0);
   }
   function menhir_run_044
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok !== "number")
     switch(tok[0]){
       case 0:
        var v_0 = tok[1], _Q_ = 14;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_025,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _Q_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_025
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _Q_);
       case 1:
        var v_1 = tok[1], _R_ = 14;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_027,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _R_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_027
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _R_);
       case 2:
        var v_2 = tok[1], _S_ = 14;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_032,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_2, _S_]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_032
                (counter$9,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_2,
                 _S_);
       case 3:
        var v_3 = tok[1], _T_ = 14;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_033,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_3, _T_]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_033
                (counter$10,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_3,
                 _T_);
       default:
        var v_4 = tok[1], _U_ = 14;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_036,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_4, _U_]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_036
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_4,
                 _U_);
     }
    switch(tok){
      case 0:
       var _I_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_005,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _I_]);
       var counter$0 = counter + 1 | 0;
       return menhir_run_005
               (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _I_);
      case 2:
       var menhir_stack$1 = menhir_stack$0, xs = 0;
       for(;;){
        var
         x = menhir_stack$1[3],
         menhir_s$0 = menhir_stack$1[2],
         menhir_stack$2 = menhir_stack$1[1],
         xs$0 = [0, x, xs];
        if(9 === menhir_s$0){
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_046,
                   [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, xs$0]);
         var counter$13 = counter + 1 | 0;
         return menhir_run_046
                 (counter$13,
                  menhir_stack$2,
                  menhir_lexbuf,
                  menhir_lexer,
                  xs$0);
        }
        if(14 !== menhir_s$0) return menhir_fail(0);
        var menhir_stack$1 = menhir_stack$2, xs = xs$0;
       }
       break;
      case 4:
       var _J_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_006,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _J_]);
       var counter$1 = counter + 1 | 0;
       return menhir_run_006
               (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _J_);
      case 6:
       var _K_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_026,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _K_]);
       var counter$6 = counter + 1 | 0;
       return menhir_run_026
               (counter$6, menhir_stack$0, menhir_lexbuf, menhir_lexer, _K_);
      case 7:
       var _L_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_010,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _L_]);
       var counter$2 = counter + 1 | 0;
       return menhir_run_010
               (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _L_);
      case 9:
       var _M_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_028,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _M_]);
       var counter$7 = counter + 1 | 0;
       return menhir_run_028
               (counter$7, menhir_stack$0, menhir_lexbuf, menhir_lexer, _M_);
      case 10:
       var _N_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_029,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _N_]);
       var counter$8 = counter + 1 | 0;
       return menhir_run_029
               (counter$8, menhir_stack$0, menhir_lexbuf, menhir_lexer, _N_);
      case 11:
       var _O_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_011,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _O_]);
       var counter$3 = counter + 1 | 0;
       return menhir_run_011
               (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _O_);
      case 15:
       var _P_ = 14;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_034,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _P_]);
       var counter$11 = counter + 1 | 0;
       return menhir_run_034
               (counter$11, menhir_stack$0, menhir_lexbuf, menhir_lexer, _P_);
      default: return eRR(0);
    }
   }
   function menhir_run_025
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     v = [0, -976970511, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_value_parser_value
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_026
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = 870828711;
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_028
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf);
     if(typeof tok !== "number")
      switch(tok[0]){
        case 0:
         var v$0 = tok[1], _D_ = 9;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_025,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$0, _D_]);
         var counter$5 = counter + 1 | 0;
         return menhir_run_025
                 (counter$5,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  _D_);
        case 1:
         var v$1 = tok[1], _E_ = 9;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_027,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$1, _E_]);
         var counter$4 = counter + 1 | 0;
         return menhir_run_027
                 (counter$4,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$1,
                  _E_);
        case 2:
         var v$2 = tok[1], _F_ = 9;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_032,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$2, _F_]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_032
                 (counter$8,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  _F_);
        case 3:
         var v$3 = tok[1], _G_ = 9;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_033,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$3, _G_]);
         var counter$9 = counter + 1 | 0;
         return menhir_run_033
                 (counter$9,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  _G_);
        default:
         var v$4 = tok[1], _H_ = 9;
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_036,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$4, _H_]);
         var counter$11 = counter + 1 | 0;
         return menhir_run_036
                 (counter$11,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$4,
                  _H_);
      }
     switch(tok){
       case 0:
        var _w_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _w_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _w_);
       case 2:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_046,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_046
                (counter$12, menhir_stack$1, menhir_lexbuf, menhir_lexer, v);
       case 4:
        var _x_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _x_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$1, menhir_lexbuf, menhir_lexer, _x_);
       case 6:
        var _y_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_026,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _y_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_026
                (counter$6, menhir_stack$1, menhir_lexbuf, menhir_lexer, _y_);
       case 7:
        var _z_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _z_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_010
                (counter$2, menhir_stack$1, menhir_lexbuf, menhir_lexer, _z_);
       case 9:
        var menhir_stack$0 = menhir_stack$1, menhir_s$0 = 9; break;
       case 10:
        var _A_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_029,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _A_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_029
                (counter$7, menhir_stack$1, menhir_lexbuf, menhir_lexer, _A_);
       case 11:
        var _B_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _B_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_011
                (counter$3, menhir_stack$1, menhir_lexbuf, menhir_lexer, _B_);
       case 15:
        var _C_ = 9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_034,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, _C_]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_034
                (counter$10, menhir_stack$1, menhir_lexbuf, menhir_lexer, _C_);
       default: return eRR(0);
     }
    }
   }
   function menhir_run_029
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var _o_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _o_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _o_);
       case 3:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_042,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v]);
        var counter$8 = counter + 1 | 0;
        return menhir_run_042
                (counter$8, menhir_stack$0, menhir_lexbuf, menhir_lexer, v);
       case 4:
        var _p_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _p_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _p_);
       case 5:
        var _q_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _q_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _q_);
       case 6:
        var _r_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _r_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _r_);
       case 7:
        var _s_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _s_]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5, menhir_stack$0, menhir_lexbuf, menhir_lexer, _s_);
       case 11:
        var _t_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _t_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6, menhir_stack$0, menhir_lexbuf, menhir_lexer, _t_);
     }
    else
     switch(tok[0]){
       case 1:
        var v$0 = tok[1], _u_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$0, _u_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 _u_);
       case 4:
        var v$1 = tok[1], _v_ = 10;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v$1, _v_]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 _v_);
     }
    return eRR(0);
   }
   function menhir_run_042
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [0, 963043957, _2];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_032
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 3654863, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_033
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 365180284, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_034
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var
     menhir_stack$0 = [0, menhir_stack, menhir_s],
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s$0 = 12;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_005,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_005
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_006,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_006
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 5:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_007,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_007
                (counter$2,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_008,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_008
                (counter$3,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_010,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_010
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
       case 11:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_011,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_011
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s$0);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_009,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_009
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s$0);
       case 4:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_014,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$7 = counter + 1 | 0;
        return menhir_run_014
                (counter$7,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
     }
    return eRR(0);
   }
   function menhir_run_036
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 737456202, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_046
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _2){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [0, 848054398, _2];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_030
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 16 === tok){
     var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s$0 = 11;
     if(typeof tok$0 === "number")
      switch(tok$0){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_005,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_005
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_006,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_006
                 (counter$1,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_026,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$6 = counter + 1 | 0;
         return menhir_run_026
                 (counter$6,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_010,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_010
                 (counter$2,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 9:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_028,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$7 = counter + 1 | 0;
         return menhir_run_028
                 (counter$7,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 10:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_029,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_029
                 (counter$8,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 11:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_011,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$3 = counter + 1 | 0;
         return menhir_run_011
                 (counter$3,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 15:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_034,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$11 = counter + 1 | 0;
         return menhir_run_034
                 (counter$11,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        default: return eRR(0);
      }
     switch(tok$0[0]){
       case 0:
        var v$0 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_025,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_025
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
       case 1:
        var v$1 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_027,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$1,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_027
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 menhir_s$0);
       case 2:
        var v$2 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_032,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$2,
                   menhir_s$0]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_032
                (counter$9,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$2,
                 menhir_s$0);
       case 3:
        var v$3 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_033,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$3,
                   menhir_s$0]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_033
                (counter$10,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$3,
                 menhir_s$0);
       default:
        var v$4 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_036,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$4,
                   menhir_s$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_036
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$4,
                 menhir_s$0);
     }
    }
    return eRR(0);
   }
   function menhir_run_023
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number" && 16 === tok){
     var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s$0 = 8;
     if(typeof tok$0 === "number")
      switch(tok$0){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_005,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_005
                 (counter$0,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_006,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_006
                 (counter$1,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_026,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$6 = counter + 1 | 0;
         return menhir_run_026
                 (counter$6,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_010,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_010
                 (counter$2,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 9:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_028,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$7 = counter + 1 | 0;
         return menhir_run_028
                 (counter$7,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 10:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_029,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$8 = counter + 1 | 0;
         return menhir_run_029
                 (counter$8,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 11:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_011,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$3 = counter + 1 | 0;
         return menhir_run_011
                 (counter$3,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        case 15:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_034,
                   [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, menhir_s$0]);
         var counter$11 = counter + 1 | 0;
         return menhir_run_034
                 (counter$11,
                  menhir_stack$0,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$0);
        default: return eRR(0);
      }
     switch(tok$0[0]){
       case 0:
        var v$0 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_025,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s$0]);
        var counter$5 = counter + 1 | 0;
        return menhir_run_025
                (counter$5,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s$0);
       case 1:
        var v$1 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_027,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$1,
                   menhir_s$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_027
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$1,
                 menhir_s$0);
       case 2:
        var v$2 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_032,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$2,
                   menhir_s$0]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_032
                (counter$9,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$2,
                 menhir_s$0);
       case 3:
        var v$3 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_033,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$3,
                   menhir_s$0]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_033
                (counter$10,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$3,
                 menhir_s$0);
       default:
        var v$4 = tok$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_036,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$4,
                   menhir_s$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_036
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$4,
                 menhir_s$0);
     }
    }
    return eRR(0);
   }
   function menhir_run_114
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok !== "number")
     switch(tok[0]){
       case 0:
        var v_0 = tok[1], _j_ = 41;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_097,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _j_]);
        var counter$4 = counter + 1 | 0;
        return menhir_run_097
                (counter$4,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _j_);
       case 1:
        var v_1 = tok[1], _k_ = 41;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_027,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _k_]);
        var counter$6 = counter + 1 | 0;
        return menhir_run_027
                (counter$6,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _k_);
       case 2:
        var v_2 = tok[1], _l_ = 41;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_103,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_2, _l_]);
        var counter$9 = counter + 1 | 0;
        return menhir_run_103
                (counter$9,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_2,
                 _l_);
       case 3:
        var v_3 = tok[1], _m_ = 41;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_104,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_3, _m_]);
        var counter$10 = counter + 1 | 0;
        return menhir_run_104
                (counter$10,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_3,
                 _m_);
       default:
        var v_4 = tok[1], _n_ = 41;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_105,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_4, _n_]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_105
                (counter$11,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_4,
                 _n_);
     }
    switch(tok){
      case 0:
       var _c_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_005,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_]);
       var counter$0 = counter + 1 | 0;
       return menhir_run_005
               (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_);
      case 2:
       var menhir_stack$1 = menhir_stack$0, xs = 0;
       for(;;){
        var
         x = menhir_stack$1[3],
         menhir_s$0 = menhir_stack$1[2],
         menhir_stack$2 = menhir_stack$1[1],
         xs$0 = [0, x, xs];
        if(37 === menhir_s$0){
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_112,
                   [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, xs$0]);
         var counter$12 = counter + 1 | 0;
         return menhir_run_112
                 (counter$12,
                  menhir_stack$2,
                  menhir_lexbuf,
                  menhir_lexer,
                  xs$0);
        }
        if(41 !== menhir_s$0) return menhir_fail(0);
        var menhir_stack$1 = menhir_stack$2, xs = xs$0;
       }
       break;
      case 4:
       var _d_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_006,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_]);
       var counter$1 = counter + 1 | 0;
       return menhir_run_006
               (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_);
      case 6:
       var _e_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_098,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _e_]);
       var counter$5 = counter + 1 | 0;
       return menhir_run_098
               (counter$5, menhir_stack$0, menhir_lexbuf, menhir_lexer, _e_);
      case 7:
       var _f_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_010,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _f_]);
       var counter$2 = counter + 1 | 0;
       return menhir_run_010
               (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _f_);
      case 9:
       var _g_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_099,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _g_]);
       var counter$7 = counter + 1 | 0;
       return menhir_run_099
               (counter$7, menhir_stack$0, menhir_lexbuf, menhir_lexer, _g_);
      case 10:
       var _h_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_100,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _h_]);
       var counter$8 = counter + 1 | 0;
       return menhir_run_100
               (counter$8, menhir_stack$0, menhir_lexbuf, menhir_lexer, _h_);
      case 11:
       var _i_ = 41;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_011,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _i_]);
       var counter$3 = counter + 1 | 0;
       return menhir_run_011
               (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _i_);
      default: return eRR(0);
    }
   }
   function menhir_run_041
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    var v = [0, 770676513, _1];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_value_parser_value,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_value_parser_value
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_016
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, _1, menhir_s, tok){
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_fragment_name,
              [0,
               menhir_stack,
               menhir_lexbuf,
               menhir_lexer,
               _1,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_fragment_name
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             _1,
             menhir_s,
             tok);
   }
   function menhir_run_001
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_001$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_004
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_004$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_002
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_002$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_003
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_003$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_078
   (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_078$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function doc(menhir_lexer, menhir_lexbuf){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_stack = 0,
     menhir_s = 0;
    if(typeof tok === "number")
     switch(tok){
       case 0:
        return menhir_run_001
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 4:
        return menhir_run_002
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 7:
        return menhir_run_003
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 10:
        return menhir_run_004
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 11:
        return menhir_run_078
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
     }
    return eRR(0);
   }
   var Graphql_parser_Parser = [0, Error, doc];
   runtime.caml_register_global
    (36, Graphql_parser_Parser, "Graphql_parser__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_parser__Block_string
//# unitInfo: Requires: Re, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re = global_data.Re,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    cst_Graphql_parser_Block_strin = "Graphql_parser__Block_string.NotBlank";
   function get_block_string_indentation(s){
    var
     is_first_line = [0, 1],
     is_empty_line = [0, 1],
     indent = [0, 0],
     common_indent = [0, 0],
     i = [0, 0];
    for(;;){
     if(i[1] >= caml_ml_string_length(s)){
      var match$0 = common_indent[1];
      if(! match$0) return 0;
      var num = match$0[1];
      return num;
     }
     var c = caml_string_get(s, i[1]);
     a:
     {
      b:
      {
       if(14 <= c){
        if(32 === c) break b;
       }
       else if(9 <= c)
        switch(c - 9 | 0){
          case 0:
           break b;
          case 1:
          case 4:
           var _u_ = 13 === c ? 1 : 0;
           if(_u_)
            try{
             var
              _w_ = 10 === caml_string_get(s, i[1] + 1 | 0) ? 1 : 0,
              _v_ = _w_;
            }
            catch(_x_){var _v_ = 0;}
           else
            var _v_ = _u_;
           if(_v_) i[1]++;
           is_first_line[1] = 0;
           is_empty_line[1] = 1;
           indent[1] = 0;
           break a;
        }
       var _q_ = is_empty_line[1];
       if(_q_){
        var _r_ = 1 - is_first_line[1];
        if(_r_){
         var match = common_indent[1];
         if(match)
          var
           common_indent$0 = match[1],
           _s_ = indent[1] < common_indent$0 ? 1 : 0;
         else
          var _s_ = 1;
         var _t_ = _s_;
        }
        else
         var _t_ = _r_;
       }
       else
        var _t_ = _q_;
       if(! _t_) break a;
       common_indent[1] = [0, indent[1]];
       break a;
      }
      indent[1]++;
     }
     i[1]++;
    }
   }
   var
    NotBlank =
      [248, cst_Graphql_parser_Block_strin, runtime.caml_fresh_oo_id(0)];
   function is_blank(s){
    try{
     var
      _n_ =
        function(param){
         if(9 !== param && 32 !== param)
          throw caml_maybe_attach_backtrace(NotBlank, 1);
         return 0;
        };
     caml_call2(Stdlib_String[30], _n_, s);
     var _o_ = 1;
     return _o_;
    }
    catch(_p_){
     var _m_ = caml_wrap_exception(_p_);
     if(_m_ === NotBlank) return 0;
     throw caml_maybe_attach_backtrace(_m_, 0);
    }
   }
   function dedent_block_string_value(s){
    var
     _a_ = [0, caml_call1(Re[26], 13), 0],
     _b_ = [0, caml_call1(Re[26], 10), _a_],
     _c_ = [0, caml_call1(Re[27], _b_), 0],
     _d_ = [0, caml_call1(Re[26], 10), 0],
     _e_ = [0, caml_call1(Re[26], 13), _d_],
     _f_ = [0, caml_call1(Re[28], _e_), _c_],
     _g_ = caml_call1(Re[27], _f_),
     _h_ = caml_call1(Re[2], _g_),
     _i_ = caml_call4(Re[17], 0, 0, _h_, s),
     lines = caml_call1(Stdlib_Array[10], _i_),
     start_line = [0, 0];
    for(;;){
     if(start_line[1] >= lines.length - 1) break;
     var _j_ = start_line[1];
     if(! is_blank(caml_check_bound(lines, _j_)[1 + _j_])) break;
     start_line[1]++;
    }
    var end_line = [0, lines.length - 1];
    for(;;){
     if(start_line[1] >= end_line[1]) break;
     var _k_ = end_line[1] - 1 | 0;
     if(! is_blank(caml_check_bound(lines, _k_)[1 + _k_])) break;
     end_line[1] += -1;
    }
    var
     common_indent = get_block_string_indentation(s),
     i = [0, start_line[1]],
     b = caml_call1(Stdlib_Buffer[1], 32);
    for(;;){
     if(i[1] >= end_line[1]) return caml_call1(Stdlib_Buffer[2], b);
     var _l_ = i[1], line = caml_check_bound(lines, _l_)[1 + _l_];
     a:
     {
      var match = 0 === common_indent ? 1 : 0;
      if(0 !== i[1] && ! match){
       var
        start =
          caml_call2(Stdlib[16], caml_ml_string_length(line), common_indent),
        line$0 =
          caml_call3
           (Stdlib_String[16],
            line,
            start,
            caml_ml_string_length(line) - start | 0);
       break a;
      }
      var line$0 = line;
     }
     caml_call2(Stdlib_Buffer[16], b, line$0);
     i[1]++;
     if(i[1] !== end_line[1]) caml_call2(Stdlib_Buffer[12], b, 10);
    }
   }
   var
    Graphql_parser_Block_string =
      [0,
       get_block_string_indentation,
       NotBlank,
       is_blank,
       dedent_block_string_value];
   runtime.caml_register_global
    (6, Graphql_parser_Block_string, "Graphql_parser__Block_string");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_parser__Lexer
//# unitInfo: Requires: Graphql_parser__Block_string, Stdlib, Stdlib__Buffer, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xe2\xff\xe3\xff\xe4\xff\xe5\xff\xe6\xff\xe7\xff\xe8\xff\xe9\xff\xea\xff\x01\0\xec\xff\xed\xff\xee\xff\xef\xffN\0\xa0\0\xeb\x006\x01\x81\x01\xcc\x01\x17\x02b\x02\x03\0\xaf\x02\xb0\x02\xb9\x02\xfd\xff\x01\0\xbf\0\xea\x02\xcb\x02\xe7\x02\xf1\x02\x07\x03\x11\x03\x1b\x03'\x031\x03\x04\0\xf9\xff;\x03\x86\x03\xd1\x03\x1c\x04g\x04\xb2\x04\xfd\x04H\x05\x93\x05\xde\x05)\x06t\x06\xbf\x06\n\x07U\x07\xa0\x07\xeb\x076\b\x81\b\xcc\b\x17\tb\t\xad\t\xf8\tC\n\x8e\n\xd9\n$\x0bo\x0b\xba\x0b\x05\fP\f\x9b\f\xe6\f1\r|\r\xc7\r\x12\x0e]\x0e\xa8\x0e\r\0\xeb\xff\x19\x0f\x1a\x0f\x06\x0f\xff\xff\xf7\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xbb\0\xfe\xff\x05\0\b\0\xff\xff",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x05\0\x03\0\x03\0\x1c\0\xff\xff\x02\0\x01\0\0\0\xff\xff\xff\xff\x04\0\xff\xff\x04\0\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x07\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\b\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\t\0\x0f\0\x0f\0\n\0\x0b\0\x0f\0\x0f\0\x0f\0\f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\r\0\x0f\0\x0f\0\x0e\0\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff",
       "\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0T\0T\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\0\0\xff\xff\xff\xff\0\0",
       '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0\x1b\0\x1b\0\0\0\x1c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0\x0e\0\x17\0\x1d\0\r\0\'\0(\0b\0\f\0\x0b\0c\0\0\0\x1e\0\x1a\0\n\0Q\0\x19\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\t\0R\0\0\0\b\0\0\0\0\0\x07\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x06\0\0\0\x05\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x16\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x15\0\x14\0\x13\0\x0f\0\x12\0\x0f\0\x11\0\x10\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x04\0\0\0\x03\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0a\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\x01\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0N\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0C\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0?\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0>\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0;\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x004\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0*\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0)\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0 \0 \0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x19\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x1e\0\x1f\0\x1f\0&\0\0\0&\0\0\0\0\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\0\0\0\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\0\x1f\0\x1e\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0$\0\0\0"\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0"\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0.\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0+\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0,\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0-\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0/\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x000\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\x001\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x002\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x003\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x005\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\x006\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x007\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x008\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\x009\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0:\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0<\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0=\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0@\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0A\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0B\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0D\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0E\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0F\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0G\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0H\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0I\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0J\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0K\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0L\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0M\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0O\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0P\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\\\0\0\0\0\0\0\0\0\0\0\0V\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0]\0\0\0\0\0\0\0\0\0\0\0[\0\0\0\0\0\0\0Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Y\0U\0\xff\xffxff\xff\xff\xff',
       '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x1c\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\x17\0\'\0a\0\0\0\0\0b\0\xff\xff\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Q\0\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x1d\0\xff\xff\xff\xff\x1d\0\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff_\0\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\0\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0_\0\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\x16\0\xff\xff\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x18\0\x19\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1e\0\x18\0\x19\0\x1f\0\xff\xff\x1f\0\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\x19\0\x1e\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0\xff\xff"\0\xff\xff!\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff!\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff)\0\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xff\xff\xff\xff\xff\xff\xff*\0\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff+\0\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff-\0\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff/\0\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff1\0\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff2\0\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff3\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff4\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff6\0\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff7\0\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff8\0\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff9\0\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff:\0\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff;\0\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff<\0\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff@\0\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xffB\0\xff\xffB\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xffC\0\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xffD\0\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xffE\0\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xffF\0\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xffH\0\xff\xffH\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffJ\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0\xff\xff\xff\xff\xff\xff\xff\xffJ\0\xff\xffJ\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\xff\xff\xff\xff\xff\xff\xff\xffK\0\xff\xffK\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\xff\xff\xff\xff\xff\xff\xff\xffL\0\xff\xffL\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0\xff\xff\xff\xff\xff\xff\xff\xffM\0\xff\xffM\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xffN\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\xff\xff\xff\xff\xff\xff\xff\xffO\0\xff\xffO\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffP\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0\xff\xff\xff\xff\xff\xff\xff\xffP\0\xff\xffP\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0S\0T\0\xff\xffS\0T\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0S\0T\0\xff\xffU\0\xff\xffU\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0T\0',
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Graphql_parser_Block_string = global_data.Graphql_parser__Block_string,
    Error = [248, "Graphql_parser__Lexer.Error", runtime.caml_fresh_oo_id(0)],
    _a_ = [4, 0],
    _b_ = [4, 1],
    cst_Unexpected_char = "Unexpected char: ";
   function token$0(counter, lexbuf){
    var _i_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_token_rec$0, [0, lexbuf, _i_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_token_rec$0(counter$0, lexbuf, _i_);
   }
   function ocaml_lex_token_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(29 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return token$0(counter$0, lexbuf);
        case 1:
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$1 = counter + 1 | 0;
         return token$0(counter$1, lexbuf);
        case 2:
         caml_call1(Stdlib_Lexing[14], lexbuf);
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$2 = counter + 1 | 0;
         return token$0(counter$2, lexbuf);
        case 3:
         return [2,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 4:
         return [3,
                 runtime.caml_float_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 5:
         return read_string(caml_call1(Stdlib_Buffer[1], 17), lexbuf);
        case 6:
         return read_block_string(caml_call1(Stdlib_Buffer[1], 17), lexbuf);
        case 7:
         return _a_;
        case 8:
         return 11;
        case 9:
         return 7;
        case 10:
         return 6;
        case 11:
         return 5;
        case 12:
         return 4;
        case 13:
         return 0;
        case 14:
         return _b_;
        case 15:
         return [1, caml_call1(Stdlib_Lexing[8], lexbuf)];
        case 16:
         return 17;
        case 17:
         return 15;
        case 18:
         return 8;
        case 19:
         return 1;
        case 20:
         return 14;
        case 21:
         return 16;
        case 22:
         return 12;
        case 23:
         return 18;
        case 24:
         return 9;
        case 25:
         return 2;
        case 26:
         return 10;
        case 27:
         return 3;
        case 28:
         var _h_ = caml_call1(Stdlib_Lexing[8], lexbuf);
         throw caml_maybe_attach_backtrace
                ([0, Error, caml_call2(Stdlib[28], cst_Unexpected_char, _h_)],
                 1);
        default: return 13;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function token(lexbuf){return caml_trampoline(token$0(0, lexbuf));}
   function ocaml_lex_token_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_token_rec$0(0, lexbuf, ocaml_lex_state));
   }
   function read_string$0(counter, buf, lexbuf){
    var _g_ = 83;
    if(counter >= 50)
     return caml_trampoline_return
             (ocaml_lex_read_string_rec$0, [0, buf, lexbuf, _g_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_string_rec$0(counter$0, buf, lexbuf, _g_);
   }
   function ocaml_lex_read_string_rec$0(counter, buf, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(9 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         return [0, caml_call1(Stdlib_Buffer[2], buf)];
        case 1:
         caml_call2(Stdlib_Buffer[12], buf, 34);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return read_string$0(counter$0, buf, lexbuf);
        case 2:
         caml_call2(Stdlib_Buffer[12], buf, 92);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$1 = counter + 1 | 0;
         return read_string$0(counter$1, buf, lexbuf);
        case 3:
         caml_call2(Stdlib_Buffer[12], buf, 47);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$2 = counter + 1 | 0;
         return read_string$0(counter$2, buf, lexbuf);
        case 4:
         caml_call2(Stdlib_Buffer[12], buf, 8);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$3 = counter + 1 | 0;
         return read_string$0(counter$3, buf, lexbuf);
        case 5:
         caml_call2(Stdlib_Buffer[12], buf, 12);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$4 = counter + 1 | 0;
         return read_string$0(counter$4, buf, lexbuf);
        case 6:
         caml_call2(Stdlib_Buffer[12], buf, 10);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$5 = counter + 1 | 0;
         return read_string$0(counter$5, buf, lexbuf);
        case 7:
         caml_call2(Stdlib_Buffer[12], buf, 13);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$6 = counter + 1 | 0;
         return read_string$0(counter$6, buf, lexbuf);
        case 8:
         caml_call2(Stdlib_Buffer[12], buf, 9);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$7 = counter + 1 | 0;
         return read_string$0(counter$7, buf, lexbuf);
        default:
         var _f_ = caml_call1(Stdlib_Lexing[8], lexbuf);
         caml_call2(Stdlib_Buffer[16], buf, _f_);
         if(counter >= 50)
          return caml_trampoline_return(read_string$0, [0, buf, lexbuf]);
         var counter$8 = counter + 1 | 0;
         return read_string$0(counter$8, buf, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read_string(buf, lexbuf){
    return caml_trampoline(read_string$0(0, buf, lexbuf));
   }
   function ocaml_lex_read_string_rec(buf, lexbuf, ocaml_lex_state){
    return caml_trampoline
            (ocaml_lex_read_string_rec$0(0, buf, lexbuf, ocaml_lex_state));
   }
   function read_block_string$0(counter, buf, lexbuf){
    var _e_ = 95;
    if(counter >= 50)
     return caml_trampoline_return
             (ocaml_lex_read_block_string_re$0, [0, buf, lexbuf, _e_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_block_string_re$0(counter$0, buf, lexbuf, _e_);
   }
   function ocaml_lex_read_block_string_re$0
   (counter, buf, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(0 === ocaml_lex_state$1){
      var _c_ = caml_call1(Stdlib_Buffer[2], buf);
      return [0, caml_call1(Graphql_parser_Block_string[4], _c_)];
     }
     if(1 === ocaml_lex_state$1){
      var _d_ = caml_call1(Stdlib_Lexing[8], lexbuf);
      caml_call2(Stdlib_Buffer[16], buf, _d_);
      if(counter >= 50)
       return caml_trampoline_return(read_block_string$0, [0, buf, lexbuf]);
      var counter$0 = counter + 1 | 0;
      return read_block_string$0(counter$0, buf, lexbuf);
     }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read_block_string(buf, lexbuf){
    return caml_trampoline(read_block_string$0(0, buf, lexbuf));
   }
   function ocaml_lex_read_block_string_re(buf, lexbuf, ocaml_lex_state){
    return caml_trampoline
            (ocaml_lex_read_block_string_re$0(0, buf, lexbuf, ocaml_lex_state));
   }
   var
    Graphql_parser_Lexer =
      [0,
       Error,
       ocaml_lex_tables,
       token,
       ocaml_lex_token_rec,
       read_string,
       ocaml_lex_read_string_rec,
       read_block_string,
       ocaml_lex_read_block_string_re];
   runtime.caml_register_global
    (9, Graphql_parser_Lexer, "Graphql_parser__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_parser
//# unitInfo: Requires: Graphql_parser__Ast, Graphql_parser__Lexer, Graphql_parser__Parser, Stdlib__Format, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Graphql_parser_Lexer = global_data.Graphql_parser__Lexer,
    Graphql_parser_Parser = global_data.Graphql_parser__Parser,
    Stdlib_Format = global_data.Stdlib__Format,
    Graphql_parser_Ast = global_data.Graphql_parser__Ast,
    pp_document = Graphql_parser_Ast[2],
    _b_ = [0, [2, 0, [11, ": Syntax error", 0]], "%s: Syntax error"],
    _c_ = [0, [2, 0, [11, ": ", [2, 0, 0]]], "%s: %s"],
    _a_ =
      [0,
       [11, "Line ", [4, 0, 0, 0, [11, " col ", [4, 0, 0, 0, 0]]]],
       "Line %d col %d"];
   function string_of_pos(pos){
    return caml_call3
            (Stdlib_Format[140], _a_, pos[2], (pos[4] - pos[3] | 0) + 1 | 0);
   }
   function parse(s){
    var lexbuf = caml_call2(Stdlib_Lexing[3], 0, s);
    try{
     var
      _f_ =
        [0,
         caml_call2(Graphql_parser_Parser[2], Graphql_parser_Lexer[3], lexbuf)];
     return _f_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Graphql_parser_Parser[1]){
      var pos = lexbuf[11], _d_ = string_of_pos(pos);
      return [1, caml_call2(Stdlib_Format[140], _b_, _d_)];
     }
     if(exn[1] !== Graphql_parser_Lexer[1])
      throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2], pos$0 = lexbuf[12], _e_ = string_of_pos(pos$0);
     return [1, caml_call3(Stdlib_Format[140], _c_, _e_, msg)];
    }
   }
   var Graphql_parser = [0, parse, pp_document];
   runtime.caml_register_global(8, Graphql_parser, "Graphql_parser");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
