// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Unix
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Bytes, Stdlib__Callback, Stdlib__Fun, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__Sys
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$7 = ", ",
    cst_c$1 = "-c",
    cst_bin_sh = "/bin/sh",
    cst_0_0_0_0$0 = "0.0.0.0",
    cst_127_0_0_1$0 = "127.0.0.1",
    cst_Unix_Unix_error = "Unix.Unix_error",
    cst_tcp$2 = "tcp",
    cst_udp$2 = "udp",
    caml_channel_descriptor = runtime.caml_channel_descriptor,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_unix_inet_addr_of_string = runtime.caml_unix_inet_addr_of_string,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$6,
    cst$1 = ': "',
    cst$2 = '"',
    cst$3 = ": ",
    shell = cst_bin_sh,
    cst = cst$6,
    cst$0 = cst$6,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Int = global_data.Stdlib__Int;
   global_data.Stdlib__Array;
   var
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Unix_error = [248, cst_Unix_Unix_error, runtime.caml_fresh_oo_id(0)];
   caml_call2
    (Stdlib_Callback[2], cst_Unix_Unix_error, [0, Unix_error, 0, cst$0, cst]);
   var
    _n_ = [0, 1],
    _o_ = [0, 1],
    _m_ = [0, 1],
    cst_close_process_full = "close_process_full",
    cst_close_process = "close_process",
    cst_close_process_out = "close_process_out",
    cst_close_process_in = "close_process_in",
    cst_process_full_pid = "process_full_pid",
    cst_process_pid = "process_pid",
    cst_process_out_pid = "process_out_pid",
    cst_process_in_pid = "process_in_pid",
    cst_c$0 = cst_c$1,
    _j_ = [0, 1],
    _k_ = [0, 1],
    _l_ = [0, 1],
    _h_ = [0, 1],
    _i_ = [0, 1],
    _g_ = [0, 1],
    _f_ = [0, 1],
    cst_c = cst_c$1,
    _e_ = [0, 1],
    cst_udp$1 = cst_udp$2,
    cst_tcp$1 = cst_tcp$2,
    cst_tcp = cst_tcp$2,
    cst_udp = cst_udp$2,
    cst_udp$0 = cst_udp$2,
    cst_tcp$0 = cst_tcp$2,
    cst_0_0_0_0 = cst_0_0_0_0$0,
    cst_127_0_0_1 = cst_127_0_0_1$0,
    cst_Unix_sendto = "Unix.sendto",
    cst_Unix_send = "Unix.send",
    cst_Unix_recvfrom = "Unix.recvfrom",
    cst_Unix_recv = "Unix.recv",
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Unix_single_write = "Unix.single_write",
    cst_Unix_write = "Unix.write",
    cst_Unix_read = "Unix.read",
    cst_failed = '" failed',
    cst_on = ' on "',
    cst_E2BIG = "E2BIG",
    cst_EACCES = "EACCES",
    cst_EAGAIN = "EAGAIN",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_EDEADLK = "EDEADLK",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISDIR = "EISDIR",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENFILE = "ENFILE",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EPERM = "EPERM",
    cst_EPIPE = "EPIPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_EXDEV = "EXDEV",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EALREADY = "EALREADY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENETRESET = "ENETRESET",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNRESET = "ECONNRESET",
    cst_ENOBUFS = "ENOBUFS",
    cst_EISCONN = "EISCONN",
    cst_ENOTCONN = "ENOTCONN",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_ELOOP = "ELOOP",
    cst_EOVERFLOW = "EOVERFLOW",
    _c_ = [0, [11, "EUNKNOWNERR ", [4, 0, 0, 0, 0]], "EUNKNOWNERR %d"],
    _b_ =
      [0,
       [11,
        "Unix.Unix_error(Unix.",
        [2, 0, [11, cst$7, [3, 0, [11, cst$7, [3, 0, [12, 41, 0]]]]]]],
       "Unix.Unix_error(Unix.%s, %S, %S)"];
   function _a_(param){
    if(param[1] !== Unix_error) return 0;
    var s = param[4], s$0 = param[3], e = param[2];
    if(typeof e === "number"){
     var _eT_ = e;
     if(34 <= _eT_)
      switch(_eT_){
        case 34:
         var msg = cst_ESPIPE; break;
        case 35:
         var msg = cst_ESRCH; break;
        case 36:
         var msg = cst_EXDEV; break;
        case 37:
         var msg = cst_EWOULDBLOCK; break;
        case 38:
         var msg = cst_EINPROGRESS; break;
        case 39:
         var msg = cst_EALREADY; break;
        case 40:
         var msg = cst_ENOTSOCK; break;
        case 41:
         var msg = cst_EDESTADDRREQ; break;
        case 42:
         var msg = cst_EMSGSIZE; break;
        case 43:
         var msg = cst_EPROTOTYPE; break;
        case 44:
         var msg = cst_ENOPROTOOPT; break;
        case 45:
         var msg = cst_EPROTONOSUPPORT; break;
        case 46:
         var msg = cst_ESOCKTNOSUPPORT; break;
        case 47:
         var msg = cst_EOPNOTSUPP; break;
        case 48:
         var msg = cst_EPFNOSUPPORT; break;
        case 49:
         var msg = cst_EAFNOSUPPORT; break;
        case 50:
         var msg = cst_EADDRINUSE; break;
        case 51:
         var msg = cst_EADDRNOTAVAIL; break;
        case 52:
         var msg = cst_ENETDOWN; break;
        case 53:
         var msg = cst_ENETUNREACH; break;
        case 54:
         var msg = cst_ENETRESET; break;
        case 55:
         var msg = cst_ECONNABORTED; break;
        case 56:
         var msg = cst_ECONNRESET; break;
        case 57:
         var msg = cst_ENOBUFS; break;
        case 58:
         var msg = cst_EISCONN; break;
        case 59:
         var msg = cst_ENOTCONN; break;
        case 60:
         var msg = cst_ESHUTDOWN; break;
        case 61:
         var msg = cst_ETOOMANYREFS; break;
        case 62:
         var msg = cst_ETIMEDOUT; break;
        case 63:
         var msg = cst_ECONNREFUSED; break;
        case 64:
         var msg = cst_EHOSTDOWN; break;
        case 65:
         var msg = cst_EHOSTUNREACH; break;
        case 66:
         var msg = cst_ELOOP; break;
        default: var msg = cst_EOVERFLOW;
      }
     else
      switch(_eT_){
        case 0:
         var msg = cst_E2BIG; break;
        case 1:
         var msg = cst_EACCES; break;
        case 2:
         var msg = cst_EAGAIN; break;
        case 3:
         var msg = cst_EBADF; break;
        case 4:
         var msg = cst_EBUSY; break;
        case 5:
         var msg = cst_ECHILD; break;
        case 6:
         var msg = cst_EDEADLK; break;
        case 7:
         var msg = cst_EDOM; break;
        case 8:
         var msg = cst_EEXIST; break;
        case 9:
         var msg = cst_EFAULT; break;
        case 10:
         var msg = cst_EFBIG; break;
        case 11:
         var msg = cst_EINTR; break;
        case 12:
         var msg = cst_EINVAL; break;
        case 13:
         var msg = cst_EIO; break;
        case 14:
         var msg = cst_EISDIR; break;
        case 15:
         var msg = cst_EMFILE; break;
        case 16:
         var msg = cst_EMLINK; break;
        case 17:
         var msg = cst_ENAMETOOLONG; break;
        case 18:
         var msg = cst_ENFILE; break;
        case 19:
         var msg = cst_ENODEV; break;
        case 20:
         var msg = cst_ENOENT; break;
        case 21:
         var msg = cst_ENOEXEC; break;
        case 22:
         var msg = cst_ENOLCK; break;
        case 23:
         var msg = cst_ENOMEM; break;
        case 24:
         var msg = cst_ENOSPC; break;
        case 25:
         var msg = cst_ENOSYS; break;
        case 26:
         var msg = cst_ENOTDIR; break;
        case 27:
         var msg = cst_ENOTEMPTY; break;
        case 28:
         var msg = cst_ENOTTY; break;
        case 29:
         var msg = cst_ENXIO; break;
        case 30:
         var msg = cst_EPERM; break;
        case 31:
         var msg = cst_EPIPE; break;
        case 32:
         var msg = cst_ERANGE; break;
        default: var msg = cst_EROFS;
      }
    }
    else
     var x = e[1], msg = caml_call2(Stdlib_Printf[4], _c_, x);
    return [0, caml_call4(Stdlib_Printf[4], _b_, msg, s$0, s)];
   }
   caml_call1(Stdlib_Printexc[9], _a_);
   function handle_unix_error(f, arg){
    try{var _eS_ = caml_call1(f, arg); return _eS_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Unix_error) throw caml_maybe_attach_backtrace(exn, 0);
     var
      arg$0 = exn[4],
      fun_name = exn[3],
      err = exn[2],
      _eQ_ = runtime.caml_check_bound(runtime.caml_sys_argv(0), 0)[1];
     caml_call1(Stdlib[49], _eQ_);
     caml_call1(Stdlib[49], cst$1);
     caml_call1(Stdlib[49], fun_name);
     caml_call1(Stdlib[49], cst_failed);
     if(0 < caml_ml_string_length(arg$0)){
      caml_call1(Stdlib[49], cst_on);
      caml_call1(Stdlib[49], arg$0);
      caml_call1(Stdlib[49], cst$2);
     }
     caml_call1(Stdlib[49], cst$3);
     var _eR_ = runtime.caml_unix_error_message(err);
     caml_call1(Stdlib[53], _eR_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   var stdin = 0, stdout = 1, stderr = 2;
   function read(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_read(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_read);
   }
   function write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_write);
   }
   function single_write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_single_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_single_write);
   }
   function write_substring(fd, buf, ofs, len){
    return write(fd, caml_call1(Stdlib_Bytes[45], buf), ofs, len);
   }
   function single_write_substring(fd, buf, ofs, len){
    return single_write(fd, caml_call1(Stdlib_Bytes[45], buf), ofs, len);
   }
   function map_file(fd, opt, kind, layout, shared, dims){
    if(opt) var sth = opt[1], pos = sth; else var pos = _d_;
    return runtime.caml_unix_map_file_bytecode
            (fd, kind, layout, shared, dims, pos);
   }
   function pause(param){
    var sigs = runtime.caml_unix_sigprocmask(1, 0);
    return runtime.caml_unix_sigsuspend(sigs);
   }
   function sleep(duration){return runtime.caml_unix_sleep(duration);}
   function is_inet6_addr(s){return 16 === caml_ml_string_length(s) ? 1 : 0;}
   var
    inet_addr_any = caml_unix_inet_addr_of_string(cst_0_0_0_0$0),
    inet_addr_loopback = caml_unix_inet_addr_of_string(cst_127_0_0_1$0),
    inet6_addr_any = caml_unix_inet_addr_of_string("::"),
    inet6_addr_loopback = caml_unix_inet_addr_of_string("::1");
   function domain_of_sockaddr(param){
    if(0 === param[0]) return 0;
    var a = param[1];
    return is_inet6_addr(a) ? 2 : 1;
   }
   function recv(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_recv(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recv);
   }
   function recvfrom(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_recvfrom(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recvfrom);
   }
   function send(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_send(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_send);
   }
   function sendto(fd, buf, ofs, len, flags, addr){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.caml_unix_sendto(fd, buf, ofs, len, flags, addr);
    return caml_call1(Stdlib[1], cst_Unix_sendto);
   }
   function send_substring(fd, buf, ofs, len, flags){
    return send(fd, caml_call1(Stdlib_Bytes[45], buf), ofs, len, flags);
   }
   function sendto_substring(fd, buf, ofs, len, flags, addr){
    return sendto
            (fd, caml_call1(Stdlib_Bytes[45], buf), ofs, len, flags, addr);
   }
   function getsockopt(fd, opt){
    return runtime.caml_unix_getsockopt(0, fd, opt);
   }
   function setsockopt(fd, opt, v){
    return runtime.caml_unix_setsockopt(0, fd, opt, v);
   }
   function getsockopt_int(fd, opt){
    return runtime.caml_unix_getsockopt(1, fd, opt);
   }
   function setsockopt_int(fd, opt, v){
    return runtime.caml_unix_setsockopt(1, fd, opt, v);
   }
   function getsockopt_optint(fd, opt){
    return runtime.caml_unix_getsockopt(2, fd, opt);
   }
   function setsockopt_optint(fd, opt, v){
    return runtime.caml_unix_setsockopt(2, fd, opt, v);
   }
   function getsockopt_float(fd, opt){
    return runtime.caml_unix_getsockopt(3, fd, opt);
   }
   function setsockopt_float(fd, opt, v){
    return runtime.caml_unix_setsockopt(3, fd, opt, v);
   }
   function getsockopt_error(fd){
    return runtime.caml_unix_getsockopt(4, fd, 0);
   }
   function getaddrinfo(node, service, opts){
    try{
     var
      _eG_ = runtime.caml_unix_getaddrinfo(node, service, opts),
      _eH_ = caml_call1(Stdlib_List[10], _eG_);
     return _eH_;
    }
    catch(_eI_){
     var _eF_ = caml_wrap_exception(_eI_);
     if(_eF_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_eF_, 0);
     var
      opt_socktype = [0, 0],
      opt_protocol = [0, 0],
      _ey_ =
        function(param){
         if(typeof param === "number"){if(2 === param) return 0;}
         else
          switch(param[0]){
            case 1:
             var s = param[1]; opt_socktype[1] = [0, s]; return 0;
            case 2:
             var p = param[1]; opt_protocol[1] = p; return 0;
          }
         return 0;
        };
     caml_call2(Stdlib_List[18], _ey_, opts);
     var
      get_port =
        function(ty, kind){
         if(caml_string_equal(service, cst$6)) return [0, [0, ty, 0], 0];
         try{
          var _eN_ = [0, [0, ty, runtime.caml_int_of_string(service)], 0];
          return _eN_;
         }
         catch(_eO_){
          var _eK_ = caml_wrap_exception(_eO_);
          if(_eK_[1] !== Stdlib[7])
           throw caml_maybe_attach_backtrace(_eK_, 0);
          try{
           var
            _eM_ =
              [0,
               [0, ty, runtime.caml_unix_getservbyname(service, kind)[3]],
               0];
           return _eM_;
          }
          catch(_eP_){
           var _eL_ = caml_wrap_exception(_eP_);
           if(_eL_ === Stdlib[8]) return 0;
           throw caml_maybe_attach_backtrace(_eL_, 0);
          }
         }
        },
      _ez_ = opt_socktype[1];
     if(_ez_)
      var
       ty = _ez_[1],
       _eA_ =
         1 === ty
          ? get_port(1, cst_udp)
          : ty
            ? caml_string_equal(service, cst$6) ? [0, [0, ty, 0], 0] : 0
            : get_port(0, cst_tcp),
       ports = _eA_;
     else
      var
       _eD_ = get_port(1, cst_udp$0),
       _eE_ = get_port(0, cst_tcp$0),
       ports = caml_call2(Stdlib[37], _eE_, _eD_);
     var
      addresses =
        caml_string_equal(node, cst$6)
         ? caml_call2
            (Stdlib_List[37], 2, opts)
           ? [0, [0, inet_addr_any, cst_0_0_0_0], 0]
           : [0, [0, inet_addr_loopback, cst_127_0_0_1], 0]
         : [0, [0, caml_unix_inet_addr_of_string(node), node], 0],
      _eB_ =
        function(param){
         var port = param[2], ty = param[1];
         function _eJ_(param){
          var name = param[2], addr = param[1];
          return [0, 1, ty, opt_protocol[1], [1, addr, port], name];
         }
         return caml_call2(Stdlib_List[20], _eJ_, addresses);
        },
      _eC_ = caml_call2(Stdlib_List[20], _eB_, ports);
     return caml_call1(Stdlib_List[15], _eC_);
    }
   }
   function getnameinfo(addr, opts){
    try{var _eu_ = runtime.caml_unix_getnameinfo(addr, opts); return _eu_;}
    catch(_ev_){
     var _et_ = caml_wrap_exception(_ev_);
     if(_et_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_et_, 0);
     if(0 === addr[0]){var f = addr[1]; return [0, cst$4, f];}
     var p = addr[2], a = addr[1];
     try{
      if(caml_call2(Stdlib_List[37], 1, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var _es_ = runtime.caml_unix_gethostbyaddr(a)[1], hostname = _es_;
     }
     catch(_ex_){
      var _ep_ = caml_wrap_exception(_ex_);
      if(_ep_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ep_, 0);
      if(caml_call2(Stdlib_List[37], 2, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var hostname = runtime.caml_unix_string_of_inet_addr(a);
     }
     try{
      if(caml_call2(Stdlib_List[37], 3, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       kind = caml_call2(Stdlib_List[37], 4, opts) ? cst_udp$1 : cst_tcp$1,
       _er_ = runtime.caml_unix_getservbyport(p, kind)[1],
       service = _er_;
     }
     catch(_ew_){
      var _eq_ = caml_wrap_exception(_ew_);
      if(_eq_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_eq_, 0);
      var service = caml_call1(Stdlib_Int[12], p);
     }
     return [0, hostname, service];
    }
   }
   function waitpid_non_intr(pid){
    for(;;)
     try{var _en_ = runtime.caml_unix_waitpid(0, pid); return _en_;}
     catch(_eo_){
      var _el_ = caml_wrap_exception(_eo_);
      if(_el_[1] === Unix_error){
       var _em_ = _el_[2];
       if(typeof _em_ === "number" && 11 === _em_) continue;
      }
      throw caml_maybe_attach_backtrace(_el_, 0);
     }
   }
   function create_process_gen
   (cmd, args, optenv, new_stdin, new_stdout, new_stderr){
    var toclose = [0, 0];
    function close_after(param){
     var _eg_ = toclose[1];
     function _eh_(fd){
      try{var _ej_ = runtime.caml_unix_close(fd); return _ej_;}
      catch(_ek_){
       var _ei_ = caml_wrap_exception(_ek_);
       if(_ei_[1] === Unix_error) return 0;
       throw caml_maybe_attach_backtrace(_ei_, 0);
      }
     }
     return caml_call2(Stdlib_List[18], _eh_, _eg_);
    }
    function file_descr_not_standard(fd){
     var fd$0 = fd;
     for(;;){
      if(3 <= fd$0) return fd$0;
      var fd$1 = runtime.caml_unix_dup(_e_, fd$0);
      toclose[1] = [0, fd$1, toclose[1]];
      var fd$0 = fd$1;
     }
    }
    var
     _ec_ = 2 === new_stderr ? 2 : file_descr_not_standard(new_stderr),
     _ed_ = 1 === new_stdout ? 1 : file_descr_not_standard(new_stdout),
     _ee_ = 0 === new_stdin ? 0 : file_descr_not_standard(new_stdin),
     redirections = [0, _ee_, _ed_, _ec_];
    function _ef_(param){
     return runtime.caml_unix_spawn(cmd, args, optenv, 1, redirections);
    }
    return caml_call2(Stdlib_Fun[4], close_after, _ef_);
   }
   function create_process(cmd, args, new_stdin, new_stdout, new_stderr){
    return create_process_gen(cmd, args, 0, new_stdin, new_stdout, new_stderr);
   }
   function create_process_env
   (cmd, args, env, new_stdin, new_stdout, new_stderr){
    return create_process_gen
            (cmd, args, [0, env], new_stdin, new_stdout, new_stderr);
   }
   function system(cmd){
    var
     pid =
       runtime.caml_unix_spawn
        (cst_bin_sh, [0, shell, cst_c, cmd], 0, 0, [0, 0, 1, 2]);
    return waitpid_non_intr(pid)[2];
   }
   var popen_processes = caml_call2(Stdlib_Hashtbl[1], 0, 7);
   function open_proc(prog, args, envopt, proc, input, output, error){
    var pid = create_process_gen(prog, args, envopt, input, output, error);
    return caml_call3(Stdlib_Hashtbl[5], popen_processes, proc, pid);
   }
   function open_process_args_in(prog, args){
    var
     match = runtime.caml_unix_pipe(_f_, 0),
     in_write = match[2],
     in_read = match[1],
     inchan = runtime.caml_unix_inchannel_of_filedescr(in_read);
    try{open_proc(prog, args, 0, [1, inchan], stdin, in_write, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], inchan);
     runtime.caml_unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.caml_unix_close(in_write);
    return inchan;
   }
   function open_process_args_out(prog, args){
    var
     match = runtime.caml_unix_pipe(_g_, 0),
     out_write = match[2],
     out_read = match[1],
     outchan = runtime.caml_unix_outchannel_of_filedescr(out_write);
    try{open_proc(prog, args, 0, [2, outchan], out_read, stdout, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[76], outchan);
     runtime.caml_unix_close(out_read);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.caml_unix_close(out_read);
    return outchan;
   }
   function open_process_args(prog, args){
    var
     match = runtime.caml_unix_pipe(_h_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.caml_unix_pipe(_i_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.caml_unix_close(in_read);
     runtime.caml_unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var
     out_write = match$0[2],
     out_read = match$0[1],
     inchan = runtime.caml_unix_inchannel_of_filedescr(in_read),
     outchan = runtime.caml_unix_outchannel_of_filedescr(out_write);
    try{
     open_proc
      (prog, args, 0, [0, inchan, outchan], out_read, in_write, stderr);
    }
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.caml_unix_close(out_read);
     runtime.caml_unix_close(out_write);
     runtime.caml_unix_close(in_read);
     runtime.caml_unix_close(in_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    runtime.caml_unix_close(out_read);
    runtime.caml_unix_close(in_write);
    return [0, inchan, outchan];
   }
   function open_process_args_full(prog, args, env){
    var
     match = runtime.caml_unix_pipe(_j_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.caml_unix_pipe(_k_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.caml_unix_close(in_read);
     runtime.caml_unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var out_write = match$0[2], out_read = match$0[1];
    try{var match$1 = runtime.caml_unix_pipe(_l_, 0);}
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.caml_unix_close(in_read);
     runtime.caml_unix_close(in_write);
     runtime.caml_unix_close(out_read);
     runtime.caml_unix_close(out_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    var
     err_write = match$1[2],
     err_read = match$1[1],
     inchan = runtime.caml_unix_inchannel_of_filedescr(in_read),
     outchan = runtime.caml_unix_outchannel_of_filedescr(out_write),
     errchan = runtime.caml_unix_inchannel_of_filedescr(err_read);
    try{
     open_proc
      (prog,
       args,
       [0, env],
       [3, inchan, outchan, errchan],
       out_read,
       in_write,
       err_write);
    }
    catch(e){
     var e$1 = caml_wrap_exception(e);
     runtime.caml_unix_close(out_read);
     runtime.caml_unix_close(out_write);
     runtime.caml_unix_close(in_read);
     runtime.caml_unix_close(in_write);
     runtime.caml_unix_close(err_read);
     runtime.caml_unix_close(err_write);
     throw caml_maybe_attach_backtrace(e$1, 0);
    }
    runtime.caml_unix_close(out_read);
    runtime.caml_unix_close(in_write);
    runtime.caml_unix_close(err_write);
    return [0, inchan, outchan, errchan];
   }
   function open_process_shell(fn, cmd){
    return caml_call2(fn, shell, [0, shell, cst_c$0, cmd]);
   }
   function open_process_in(cmd){
    return open_process_shell(open_process_args_in, cmd);
   }
   function open_process_out(cmd){
    return open_process_shell(open_process_args_out, cmd);
   }
   function open_process(cmd){
    return open_process_shell(open_process_args, cmd);
   }
   function open_process_full(cmd){
    return open_process_shell(open_process_args_full, cmd);
   }
   function find_proc_id(fun_name, proc){
    try{
     var _ea_ = caml_call2(Stdlib_Hashtbl[6], popen_processes, proc);
     return _ea_;
    }
    catch(_eb_){
     var _d$_ = caml_wrap_exception(_eb_);
     if(_d$_ === Stdlib[8])
      throw caml_maybe_attach_backtrace
             ([0, Unix_error, 3, fun_name, cst$5], 1);
     throw caml_maybe_attach_backtrace(_d$_, 0);
    }
   }
   function remove_proc_id(proc){
    return caml_call2(Stdlib_Hashtbl[10], popen_processes, proc);
   }
   function process_in_pid(inchan){
    return find_proc_id(cst_process_in_pid, [1, inchan]);
   }
   function process_out_pid(outchan){
    return find_proc_id(cst_process_out_pid, [2, outchan]);
   }
   function process_pid(param){
    var outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_pid, [0, inchan, outchan]);
   }
   function process_full_pid(param){
    var errchan = param[3], outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_full_pid, [3, inchan, outchan, errchan]);
   }
   function close_process_in(inchan){
    var proc = [1, inchan], pid = find_proc_id(cst_close_process_in, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    return waitpid_non_intr(pid)[2];
   }
   function close_process_out(outchan){
    var proc = [2, outchan], pid = find_proc_id(cst_close_process_out, proc);
    remove_proc_id(proc);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_d__){
     var _d9_ = caml_wrap_exception(_d__);
     if(_d9_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_d9_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process(param){
    var
     outchan = param[2],
     inchan = param[1],
     proc = [0, inchan, outchan],
     pid = find_proc_id(cst_close_process, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_d8_){
     var _d7_ = caml_wrap_exception(_d8_);
     if(_d7_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_d7_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process_full(param){
    var
     errchan = param[3],
     outchan = param[2],
     inchan = param[1],
     proc = [3, inchan, outchan, errchan],
     pid = find_proc_id(cst_close_process_full, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_d6_){
     var _d5_ = caml_wrap_exception(_d6_);
     if(_d5_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_d5_, 0);
    }
    caml_call1(Stdlib[93], errchan);
    return waitpid_non_intr(pid)[2];
   }
   function open_connection(sockaddr){
    var
     sock = runtime.caml_unix_socket(_m_, domain_of_sockaddr(sockaddr), 0, 0);
    try{
     runtime.caml_unix_connect(sock, sockaddr);
     var
      _d3_ = runtime.caml_unix_outchannel_of_filedescr(sock),
      _d4_ = [0, runtime.caml_unix_inchannel_of_filedescr(sock), _d3_];
     return _d4_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     runtime.caml_unix_close(sock);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function shutdown_connection(inchan){
    return runtime.caml_unix_shutdown(caml_channel_descriptor(inchan), 1);
   }
   function establish_server(server_fun, sockaddr){
    var
     sock = runtime.caml_unix_socket(_o_, domain_of_sockaddr(sockaddr), 0, 0);
    runtime.caml_unix_setsockopt(0, sock, 2, 1);
    runtime.caml_unix_bind(sock, sockaddr);
    runtime.caml_unix_listen(sock, 5);
    for(;;){
     for(;;)
      try{var match = runtime.caml_unix_accept(_n_, sock); break;}
      catch(_d2_){
       var _d0_ = caml_wrap_exception(_d2_);
       if(_d0_[1] === Unix_error){
        var _d1_ = _d0_[2];
        if(typeof _d1_ === "number" && 11 === _d1_) continue;
       }
       throw caml_maybe_attach_backtrace(_d0_, 0);
      }
     var s = match[1], id = runtime.caml_unix_fork(0);
     if(0 === id){
      if(0 !== runtime.caml_unix_fork(0)) runtime.caml_unix_exit(0);
      runtime.caml_unix_close(sock);
      var
       inchan = runtime.caml_unix_inchannel_of_filedescr(s),
       outchan = runtime.caml_unix_outchannel_of_filedescr(s);
      caml_call2(server_fun, inchan, outchan);
      caml_call1(Stdlib[99], 0);
     }
     else{runtime.caml_unix_close(s); waitpid_non_intr(id);}
    }
   }
   function _p_(_dZ_){return runtime.caml_unix_setsid(_dZ_);}
   function _q_(_dY_, _dX_){return runtime.caml_unix_tcflow(_dY_, _dX_);}
   function _r_(_dW_, _dV_){return runtime.caml_unix_tcflush(_dW_, _dV_);}
   function _s_(_dU_){return runtime.caml_unix_tcdrain(_dU_);}
   function _t_(_dT_, _dS_){return runtime.caml_unix_tcsendbreak(_dT_, _dS_);}
   function _u_(_dR_, _dQ_, _dP_){
    return runtime.caml_unix_tcsetattr(_dR_, _dQ_, _dP_);
   }
   function _v_(_dO_){return runtime.caml_unix_tcgetattr(_dO_);}
   function _w_(_dN_, _dM_){
    return runtime.caml_unix_getservbyport(_dN_, _dM_);
   }
   function _x_(_dL_, _dK_){
    return runtime.caml_unix_getservbyname(_dL_, _dK_);
   }
   function _y_(_dJ_){return runtime.caml_unix_getprotobynumber(_dJ_);}
   function _z_(_dI_){return runtime.caml_unix_getprotobyname(_dI_);}
   function _A_(_dH_){return runtime.caml_unix_gethostbyaddr(_dH_);}
   function _B_(_dG_){return runtime.caml_unix_gethostbyname(_dG_);}
   function _C_(_dF_){return runtime.caml_unix_gethostname(_dF_);}
   function _D_(_dE_){return runtime.caml_unix_getpeername(_dE_);}
   function _E_(_dD_){return runtime.caml_unix_getsockname(_dD_);}
   function _F_(_dC_, _dB_){return runtime.caml_unix_shutdown(_dC_, _dB_);}
   function _G_(_dA_, _dz_){return runtime.caml_unix_listen(_dA_, _dz_);}
   function _H_(_dy_, _dx_){return runtime.caml_unix_connect(_dy_, _dx_);}
   function _I_(_dw_, _dv_){return runtime.caml_unix_bind(_dw_, _dv_);}
   function _J_(_du_, _dt_){return runtime.caml_unix_accept(_du_, _dt_);}
   function _K_(_ds_, _dr_, _dq_, _dp_){
    return runtime.caml_unix_socketpair(_ds_, _dr_, _dq_, _dp_);
   }
   function _L_(_do_, _dn_, _dm_, _dl_){
    return runtime.caml_unix_socket(_do_, _dn_, _dm_, _dl_);
   }
   function _M_(_dk_){return runtime.caml_unix_string_of_inet_addr(_dk_);}
   function _N_(_dj_){return caml_unix_inet_addr_of_string(_dj_);}
   function _O_(_di_){return runtime.caml_unix_getgrgid(_di_);}
   var _P_ = runtime.caml_unix_getpwuid;
   function _Q_(_dh_){return runtime.caml_unix_getgrnam(_dh_);}
   function _R_(_dg_){return runtime.caml_unix_getpwnam(_dg_);}
   function _S_(_df_){return runtime.caml_unix_getlogin(_df_);}
   function _T_(_de_, _dd_){return runtime.caml_unix_initgroups(_de_, _dd_);}
   function _U_(_dc_){return runtime.caml_unix_setgroups(_dc_);}
   function _V_(_db_){return runtime.caml_unix_getgroups(_db_);}
   function _W_(_da_){return runtime.caml_unix_setgid(_da_);}
   function _X_(_c$_){return runtime.caml_unix_getegid(_c$_);}
   function _Y_(_c__){return runtime.caml_unix_getgid(_c__);}
   function _Z_(_c9_){return runtime.caml_unix_setuid(_c9_);}
   function ___(_c8_){return runtime.caml_unix_geteuid(_c8_);}
   var _$_ = runtime.caml_unix_getuid;
   function _aa_(_c7_, _c6_){return runtime.caml_unix_setitimer(_c7_, _c6_);}
   function _ab_(_c5_){return runtime.caml_unix_getitimer(_c5_);}
   function _ac_(_c4_, _c3_, _c2_){
    return runtime.caml_unix_utimes(_c4_, _c3_, _c2_);
   }
   function _ad_(_c1_){return runtime.caml_unix_times(_c1_);}
   function _ae_(_c0_){return runtime.caml_unix_sleep(_c0_);}
   function _af_(_cZ_){return runtime.caml_unix_alarm(_cZ_);}
   var
    _ag_ = runtime.caml_unix_mktime,
    _ah_ = runtime.caml_unix_localtime,
    _ai_ = runtime.caml_unix_gmtime;
   function _aj_(_cY_){return runtime.caml_unix_gettimeofday(_cY_);}
   function _ak_(_cX_){return runtime.caml_unix_time(_cX_);}
   function _al_(_cW_){return runtime.caml_unix_sigsuspend(_cW_);}
   function _am_(_cV_){return runtime.caml_unix_sigpending(_cV_);}
   function _an_(_cU_, _cT_){
    return runtime.caml_unix_sigprocmask(_cU_, _cT_);
   }
   function _ao_(_cS_, _cR_){return runtime.caml_unix_kill(_cS_, _cR_);}
   function _ap_(_cQ_, _cP_, _cO_){
    return runtime.caml_unix_lockf(_cQ_, _cP_, _cO_);
   }
   function _aq_(_cN_, _cM_, _cL_, _cK_){
    return runtime.caml_unix_select(_cN_, _cM_, _cL_, _cK_);
   }
   var
    _ar_ = runtime.caml_unix_readlink,
    _as_ = runtime.caml_unix_has_symlink,
    _at_ = runtime.caml_unix_symlink;
   function _au_(_cJ_, _cI_){return runtime.caml_unix_mkfifo(_cJ_, _cI_);}
   function _av_(_cH_, _cG_){return runtime.caml_unix_pipe(_cH_, _cG_);}
   var
    _aw_ = runtime.caml_unix_closedir,
    _ax_ = runtime.caml_unix_rewinddir,
    _ay_ = runtime.caml_unix_readdir,
    _az_ = runtime.caml_unix_opendir;
   function _aA_(_cF_){return runtime.caml_unix_chroot(_cF_);}
   function _aB_(_cE_){return runtime.caml_unix_getcwd(_cE_);}
   function _aC_(_cD_){return runtime.caml_unix_chdir(_cD_);}
   var _aD_ = runtime.caml_unix_rmdir, _aE_ = runtime.caml_unix_mkdir;
   function _aF_(_cC_){return runtime.caml_unix_clear_close_on_exec(_cC_);}
   function _aG_(_cB_){return runtime.caml_unix_set_close_on_exec(_cB_);}
   function _aH_(_cA_){return runtime.caml_unix_clear_nonblock(_cA_);}
   function _aI_(_cz_){return runtime.caml_unix_set_nonblock(_cz_);}
   function _aJ_(_cy_, _cx_, _cw_){
    return runtime.caml_unix_dup2(_cy_, _cx_, _cw_);
   }
   function _aK_(_cv_, _cu_){return runtime.caml_unix_dup(_cv_, _cu_);}
   function _aL_(_ct_, _cs_){return runtime.caml_unix_access(_ct_, _cs_);}
   function _aM_(_cr_){return runtime.caml_unix_umask(_cr_);}
   function _aN_(_cq_, _cp_, _co_){
    return runtime.caml_unix_fchown(_cq_, _cp_, _co_);
   }
   function _aO_(_cn_, _cm_, _cl_){
    return runtime.caml_unix_chown(_cn_, _cm_, _cl_);
   }
   function _aP_(_ck_, _cj_){return runtime.caml_unix_fchmod(_ck_, _cj_);}
   function _aQ_(_ci_, _ch_){return runtime.caml_unix_chmod(_ci_, _ch_);}
   function _aR_(_cg_){return runtime.caml_unix_realpath(_cg_);}
   function _aS_(_cf_, _ce_, _cd_){
    return runtime.caml_unix_link(_cf_, _ce_, _cd_);
   }
   function _aT_(_cc_, _cb_){return runtime.caml_unix_rename(_cc_, _cb_);}
   var _aU_ = runtime.caml_unix_unlink;
   function _aV_(_ca_){return runtime.caml_unix_fstat_64(_ca_);}
   var _aW_ = runtime.caml_unix_lstat_64, _aX_ = runtime.caml_unix_stat_64;
   function _aY_(_b$_, _b__){
    return runtime.caml_unix_ftruncate_64(_b$_, _b__);
   }
   function _aZ_(_b9_, _b8_){
    return runtime.caml_unix_truncate_64(_b9_, _b8_);
   }
   var
    _a0_ =
      [0,
       function(_b7_, _b6_, _b5_){
        return runtime.caml_unix_lseek_64(_b7_, _b6_, _b5_);
       },
       _aZ_,
       _aY_,
       _aX_,
       _aW_,
       _aV_],
    _a1_ = runtime.caml_unix_isatty;
   function _a2_(_b4_){return runtime.caml_unix_fstat(_b4_);}
   var _a3_ = runtime.caml_unix_lstat, _a4_ = runtime.caml_unix_stat;
   function _a5_(_b3_, _b2_){return runtime.caml_unix_ftruncate(_b3_, _b2_);}
   function _a6_(_b1_, _b0_){return runtime.caml_unix_truncate(_b1_, _b0_);}
   function _a7_(_bZ_, _bY_, _bX_){
    return runtime.caml_unix_lseek(_bZ_, _bY_, _bX_);
   }
   var _a8_ = caml_channel_descriptor, _a9_ = caml_channel_descriptor;
   function _a__(_bW_){
    return runtime.caml_unix_outchannel_of_filedescr(_bW_);
   }
   function _a$_(_bV_){return runtime.caml_unix_inchannel_of_filedescr(_bV_);}
   function _ba_(_bU_){return runtime.caml_unix_fsync(_bU_);}
   function _bb_(_bT_){return runtime.caml_unix_close(_bT_);}
   function _bc_(_bS_, _bR_, _bQ_){
    return runtime.caml_unix_open(_bS_, _bR_, _bQ_);
   }
   function _bd_(_bP_){return runtime.caml_unix_nice(_bP_);}
   function _be_(_bO_){return runtime.caml_unix_getppid(_bO_);}
   function _bf_(_bN_){return runtime.caml_unix_getpid(_bN_);}
   function _bg_(_bM_){return runtime.caml_unix_exit(_bM_);}
   function _bh_(_bL_, _bK_){return runtime.caml_unix_waitpid(_bL_, _bK_);}
   function _bi_(_bJ_){return runtime.caml_unix_wait(_bJ_);}
   function _bj_(_bI_){return runtime.caml_unix_fork(_bI_);}
   function _bk_(_bH_, _bG_, _bF_){
    return runtime.caml_unix_execvpe(_bH_, _bG_, _bF_);
   }
   function _bl_(_bE_, _bD_){return runtime.caml_unix_execvp(_bE_, _bD_);}
   function _bm_(_bC_, _bB_, _bA_){
    return runtime.caml_unix_execve(_bC_, _bB_, _bA_);
   }
   function _bn_(_bz_, _by_){return runtime.caml_unix_execv(_bz_, _by_);}
   function _bo_(_bx_, _bw_){return runtime.caml_unix_putenv(_bx_, _bw_);}
   var _bp_ = runtime.caml_sys_unsafe_getenv, _bq_ = runtime.caml_sys_getenv;
   function _br_(_bv_){return runtime.caml_unix_environment_unsafe(_bv_);}
   function _bs_(_bu_){return runtime.caml_unix_environment(_bu_);}
   var
    Unix =
      [0,
       Unix_error,
       function(_bt_){return runtime.caml_unix_error_message(_bt_);},
       handle_unix_error,
       _bs_,
       _br_,
       _bq_,
       _bp_,
       _bo_,
       _bn_,
       _bm_,
       _bl_,
       _bk_,
       _bj_,
       _bi_,
       _bh_,
       system,
       _bg_,
       _bf_,
       _be_,
       _bd_,
       stdin,
       stdout,
       stderr,
       _bc_,
       _bb_,
       _ba_,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       _a$_,
       _a__,
       _a9_,
       _a8_,
       _a7_,
       _a6_,
       _a5_,
       _a4_,
       _a3_,
       _a2_,
       _a1_,
       _a0_,
       map_file,
       _aU_,
       _aT_,
       _aS_,
       _aR_,
       _aQ_,
       _aP_,
       _aO_,
       _aN_,
       _aM_,
       _aL_,
       _aK_,
       _aJ_,
       _aI_,
       _aH_,
       _aG_,
       _aF_,
       _aE_,
       _aD_,
       _aC_,
       _aB_,
       _aA_,
       _az_,
       _ay_,
       _ax_,
       _aw_,
       _av_,
       _au_,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args,
       open_process_args_in,
       open_process_args_out,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       _at_,
       _as_,
       _ar_,
       _aq_,
       _ap_,
       _ao_,
       _an_,
       _am_,
       _al_,
       pause,
       _ak_,
       _aj_,
       _ai_,
       _ah_,
       _ag_,
       _af_,
       sleep,
       _ae_,
       _ad_,
       _ac_,
       _ab_,
       _aa_,
       _$_,
       ___,
       _Z_,
       _Y_,
       _X_,
       _W_,
       _V_,
       _U_,
       _T_,
       _S_,
       _R_,
       _Q_,
       _P_,
       _O_,
       _N_,
       _M_,
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       _L_,
       domain_of_sockaddr,
       _K_,
       _J_,
       _I_,
       _H_,
       _G_,
       _F_,
       _E_,
       _D_,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       getaddrinfo,
       getnameinfo,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_];
   runtime.caml_register_global(136, Unix, "Unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: UnixLabels
//# unitInfo: Requires: Unix
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Unix = global_data.Unix,
    Unix_error = Unix[1],
    error_message = Unix[2],
    handle_unix_error = Unix[3],
    environment = Unix[4],
    unsafe_environment = Unix[5],
    getenv = Unix[6],
    unsafe_getenv = Unix[7],
    putenv = Unix[8],
    execv = Unix[9],
    execve = Unix[10],
    execvp = Unix[11],
    execvpe = Unix[12],
    fork = Unix[13],
    wait = Unix[14],
    waitpid = Unix[15],
    system = Unix[16],
    exit = Unix[17],
    getpid = Unix[18],
    getppid = Unix[19],
    nice = Unix[20],
    stdin = Unix[21],
    stdout = Unix[22],
    stderr = Unix[23],
    openfile = Unix[24],
    close = Unix[25],
    fsync = Unix[26],
    read = Unix[27],
    write = Unix[28],
    single_write = Unix[29],
    write_substring = Unix[30],
    single_write_substring = Unix[31],
    in_channel_of_descr = Unix[32],
    out_channel_of_descr = Unix[33],
    descr_of_in_channel = Unix[34],
    descr_of_out_channel = Unix[35],
    lseek = Unix[36],
    truncate = Unix[37],
    ftruncate = Unix[38],
    stat = Unix[39],
    lstat = Unix[40],
    fstat = Unix[41],
    isatty = Unix[42],
    LargeFile = Unix[43],
    map_file = Unix[44],
    unlink = Unix[45],
    rename = Unix[46],
    link = Unix[47],
    realpath = Unix[48],
    chmod = Unix[49],
    fchmod = Unix[50],
    chown = Unix[51],
    fchown = Unix[52],
    umask = Unix[53],
    access = Unix[54],
    dup = Unix[55],
    dup2 = Unix[56],
    set_nonblock = Unix[57],
    clear_nonblock = Unix[58],
    set_close_on_exec = Unix[59],
    clear_close_on_exec = Unix[60],
    mkdir = Unix[61],
    rmdir = Unix[62],
    chdir = Unix[63],
    getcwd = Unix[64],
    chroot = Unix[65],
    opendir = Unix[66],
    readdir = Unix[67],
    rewinddir = Unix[68],
    closedir = Unix[69],
    pipe = Unix[70],
    mkfifo = Unix[71],
    create_process = Unix[72],
    create_process_env = Unix[73],
    open_process_in = Unix[74],
    open_process_out = Unix[75],
    open_process = Unix[76],
    open_process_full = Unix[77],
    open_process_args = Unix[78],
    open_process_args_in = Unix[79],
    open_process_args_out = Unix[80],
    open_process_args_full = Unix[81],
    process_in_pid = Unix[82],
    process_out_pid = Unix[83],
    process_pid = Unix[84],
    process_full_pid = Unix[85],
    close_process_in = Unix[86],
    close_process_out = Unix[87],
    close_process = Unix[88],
    close_process_full = Unix[89],
    symlink = Unix[90],
    has_symlink = Unix[91],
    readlink = Unix[92],
    select = Unix[93],
    lockf = Unix[94],
    kill = Unix[95],
    sigprocmask = Unix[96],
    sigpending = Unix[97],
    sigsuspend = Unix[98],
    pause = Unix[99],
    time = Unix[100],
    gettimeofday = Unix[101],
    gmtime = Unix[102],
    localtime = Unix[103],
    mktime = Unix[104],
    alarm = Unix[105],
    sleep = Unix[106],
    sleepf = Unix[107],
    times = Unix[108],
    utimes = Unix[109],
    getitimer = Unix[110],
    setitimer = Unix[111],
    getuid = Unix[112],
    geteuid = Unix[113],
    setuid = Unix[114],
    getgid = Unix[115],
    getegid = Unix[116],
    setgid = Unix[117],
    getgroups = Unix[118],
    setgroups = Unix[119],
    initgroups = Unix[120],
    getlogin = Unix[121],
    getpwnam = Unix[122],
    getgrnam = Unix[123],
    getpwuid = Unix[124],
    getgrgid = Unix[125],
    inet_addr_of_string = Unix[126],
    string_of_inet_addr = Unix[127],
    inet_addr_any = Unix[128],
    inet_addr_loopback = Unix[129],
    inet6_addr_any = Unix[130],
    inet6_addr_loopback = Unix[131],
    is_inet6_addr = Unix[132],
    socket = Unix[133],
    domain_of_sockaddr = Unix[134],
    socketpair = Unix[135],
    accept = Unix[136],
    bind = Unix[137],
    connect = Unix[138],
    listen = Unix[139],
    shutdown = Unix[140],
    getsockname = Unix[141],
    getpeername = Unix[142],
    recv = Unix[143],
    recvfrom = Unix[144],
    send = Unix[145],
    send_substring = Unix[146],
    sendto = Unix[147],
    sendto_substring = Unix[148],
    getsockopt = Unix[149],
    setsockopt = Unix[150],
    getsockopt_int = Unix[151],
    setsockopt_int = Unix[152],
    getsockopt_optint = Unix[153],
    setsockopt_optint = Unix[154],
    getsockopt_float = Unix[155],
    setsockopt_float = Unix[156],
    getsockopt_error = Unix[157],
    open_connection = Unix[158],
    shutdown_connection = Unix[159],
    establish_server = Unix[160],
    gethostname = Unix[161],
    gethostbyname = Unix[162],
    gethostbyaddr = Unix[163],
    getprotobyname = Unix[164],
    getprotobynumber = Unix[165],
    getservbyname = Unix[166],
    getservbyport = Unix[167],
    getaddrinfo = Unix[168],
    getnameinfo = Unix[169],
    tcgetattr = Unix[170],
    tcsetattr = Unix[171],
    tcsendbreak = Unix[172],
    tcdrain = Unix[173],
    tcflush = Unix[174],
    tcflow = Unix[175],
    setsid = Unix[176],
    UnixLabels =
      [0,
       Unix_error,
       error_message,
       handle_unix_error,
       environment,
       unsafe_environment,
       getenv,
       unsafe_getenv,
       putenv,
       execv,
       execve,
       execvp,
       execvpe,
       fork,
       wait,
       waitpid,
       system,
       exit,
       getpid,
       getppid,
       nice,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       fsync,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       lseek,
       truncate,
       ftruncate,
       stat,
       lstat,
       fstat,
       isatty,
       LargeFile,
       map_file,
       unlink,
       rename,
       link,
       realpath,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args,
       open_process_args_in,
       open_process_args_out,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       has_symlink,
       readlink,
       select,
       lockf,
       kill,
       sigprocmask,
       sigpending,
       sigsuspend,
       pause,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       alarm,
       sleep,
       sleepf,
       times,
       utimes,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       getgroups,
       setgroups,
       initgroups,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       inet_addr_of_string,
       string_of_inet_addr,
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       socket,
       domain_of_sockaddr,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       setsid];
   runtime.caml_register_global(1, UnixLabels, "UnixLabels");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1bml4LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztJO0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SSw0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUI7SSxXO0c7Rzs7SSxJLFcsb0I7Ozs7Szs7OztNO0s7SztLO0s7O007TTtNOztLO0ssVztLO0ssTzs7Rzs7O0k7SyxPO0ksTztHOztJO0ssTztJLE87Rzs7STtLLE87SSxPO0c7O0ksaUI7Rzs7SSx3QjtHOztJO0ksTzs7Rzs7SSxXO0ksTztHOzRCLE8sa0M7NkIsK0M7RztJLGdCO0kscUI7SSxpQjtJLHNCOztJLG1COztJO0c7O0k7SyxPO0ksTztHOztJO0ssTztJLE87Rzs7STtLLE87SSxPO0c7O0k7SyxPO0ksTztHOztJLGdCO0c7O0k7aUI7Rzs7SSxPO0c7O0ksTztHOztJLE87Rzs7SSxPO0c7O0ksTztHOztJLE87Rzs7SSxPO0c7O0ksTztHOztJLE87Rzs7STtLO00sTztNLE87Szs7Ozs7SztNO007OztTOzs7Ozs7OztTO1E7SztLOzs7UyxHLG1DO1M7VSx1QjtVOzs7Ozs7VTtXOzs7dUI7O1c7Ozs7a0M7Ozs7UTtNOzs7Ozs7OztjOzs7O007TztPO2U7SztNO1E7Vzs7OzttQjs7O1M7O1U7VTtTO1MsTztRO00sTztLLE87O0c7O0ksSSxXLDJDOzs7O3dDOztLO00sRztPLE07TSxJLE87Ozs7O00sRztPLE07cUI7O0s7TSxHO08sTTtNO08sTztPLE87Ozs7OztvQjs7Szs7Rzs7STtLLEksVyxtQzs7Ozs7Ozs7O0c7OztJOztLOztNLEksVyw2Qjs7O2tDOzs7SztLLE87STtJO0s7SztvQjtNLFc7Ozs7STtJOzs7O0s7O0ssTztJO0ksTztHOztJO0c7OztJOztHOztJOztPOztJO0c7RyxzQjs7STtJLE87Rzs7STtLLFE7OztLLFM7SSxJOzs7SztLO0ssTTs7STtJO0c7O0k7SyxROzs7SyxVO0ksSTs7O0s7SztLLE07O0k7STtHOztJO0ssUTs7O0ksSSxjOzs7SztLO0ssTTs7STs7O0ssUztLLFU7STtLOzs7OztLO0s7SztLO0ssTTs7STtJO0k7Rzs7STtLLFE7OztJLEksYzs7O0s7SztLLE07OztJLEksYzs7O0s7SztLO0s7SyxNOztJOzs7SyxTO0ssVTtLLFU7STtLOzs7Ozs7Ozs7OztLO0s7SztLO0s7SztLLE07O0k7STtJO0k7OztJLE87Rzs7STtHOztJO0c7O0k7Rzs7STtHOztJO0ssVztLOzs7OztNLE07Ozs7Rzs7SSxPO0c7O0k7Rzs7STtHOzs7STs7OztJOzs7SSxJLG9CO0k7STtJO0c7O0ksSSxxQjtJO0ksSTs7Ozs7STtHOztJOzs7SztLO0k7STtJLEk7Ozs7O0k7OztJOzs7O0s7SztJO0k7SSxJOzs7OztJO0k7OztJO1k7STtLO0s7TSxPO00sVztLOzs7O0s7SyxNOztHOztJLE8sMkI7Rzs7STtZO0k7STtJOztLO00sSSxZOzs7Ozs7Ozs7SyxrQixLOztlLDJCO007TTtPLFM7TyxVO007TTs7VSw0Qjs7RztzQjs0Qjs0QjtzQjs0Qjs7STs7c0I7O0k7OztJOztzQjtzQjtzQjtzQjtzQjtzQjtzQjs0Qjs0Qjs0Qjs0Qjs0Qjs7STs7O0k7O3NCO3NCO3NCOztzQjtzQjtzQjs0QjtzQjtzQjtzQjtzQjtzQjtzQjtzQjs7NkI7dUI7O0k7O3VCO3VCO3VCOzs7Ozt1Qjt1Qjt1Qjt1Qjs7STs7NkI7O0k7OztJOzs7Ozs7NkI7NkI7Ozs7Ozt1Qjt1Qjt1Qjs7dUI7dUI7dUI7dUI7O0k7OzZCOzZCO3VCOztJOzs7STs7NkI7NkI7dUI7O0k7OzZCOzt1Qjs7O0k7OztJOzs7Ozs7UTs7Ozs7Ozs7dUI7OzZCOzZCOztJOzs7O0k7O3VCO3VCO3VCOztJOzt1Qjt1Qjt1Qjt1Qjs2Qjt1Qjt1Qjs7STs7NkI7O0k7OzZCOzZCOzt1Qjt1Qjs7Ozs7c0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
