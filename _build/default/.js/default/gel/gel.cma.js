// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Gel
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_prot__Utils, Bin_shape, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Gel$0 = "Gel",
    cst_a$1 = "a",
    cst_gel$0 = "gel",
    cst_gel_ml = "gel.ml",
    cst_t$1 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Utils = global_data.Bin_prot__Utils;
   caml_call1(Ppx_module_timer_runtime[4], cst_Gel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_gel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_gel_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_gel$0, cst_gel_ml);
   var
    _g_ = [5, "gel.ml.Binable.t"],
    cst_t$0 = cst_t$1,
    cst_a = cst_a$1,
    cst_gel_ml_53_16 = "gel.ml:53:16",
    cst_a$0 = cst_a$1,
    cst_t = cst_t$1,
    cst_gel_ml_53_4 = "gel.ml:53:4",
    cst_gel = cst_gel$0,
    cst_Gel = cst_Gel$0;
   function create(g){return g;}
   function g(param){return param;}
   function map(param, f){return caml_call1(f, param);}
   function compare(compare_g, param, b){
    return caml_call2(compare_g, param, b);
   }
   function hash_fold_t(hash_fold_g, hash_state, param){return caml_call2(hash_fold_g, hash_state, param);
   }
   function sexp_of_t(sexp_of_g, param){return caml_call1(sexp_of_g, param);}
   function t_of_sexp(g_of_sexp, sexp){return caml_call1(g_of_sexp, sexp);}
   function globalize(param, g){return g;}
   function equal(equal_g, param, b){return caml_call2(equal_g, param, b);}
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ = caml_call1(Bin_shape[4][1], cst_gel_ml_53_16),
    _c_ = caml_call2(Bin_prot_Shape[11], _b_, _a_),
    _d_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _d_, _c_], 0],
    _f_ = caml_call1(Bin_shape[4][1], cst_gel_ml_53_4),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_);
   function bin_shape_t(a){
    var _u_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _u_), [0, a, 0]);
   }
   function bin_size_t(size_of_a){return size_of_a;}
   function bin_write_t(write_a){return write_a;}
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
   }
   function bin_read_t$0(of_a){return of_a;}
   function of_binable(g){return g;}
   function to_binable(param){return param;}
   var
    include =
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t$0, bin_read_t],
         to_binable,
         of_binable]),
    bin_shape_t$0 = include[1],
    bin_size_t$0 = include[2],
    bin_write_t$0 = include[3],
    bin_read_t$1 = include[4],
    bin_read_t$2 = include[5],
    bin_writer_t = include[6],
    bin_reader_t = include[7],
    bin_t = include[8];
   caml_call1(Ppx_inline_test_lib[7], cst_gel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Gel);
   function _h_(_t_){return _t_;}
   function _i_(_s_){return _s_;}
   function _j_(_r_){return _r_;}
   function _k_(_q_){return _q_;}
   function _l_(_p_){return _p_;}
   function _m_(_o_){return _o_;}
   var
    Gel =
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       equal,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       create,
       g,
       map,
       globalize,
       function(_n_){return _n_;},
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       _h_];
   runtime.caml_register_global(22, Gel, cst_Gel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJnZWwuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImNyZWF0ZSIsImciLCJwYXJhbSIsIm1hcCIsImYiLCJjb21wYXJlIiwiY29tcGFyZV9nIiwiYiIsImhhc2hfZm9sZF90IiwiaGFzaF9mb2xkX2ciLCJoYXNoX3N0YXRlIiwic2V4cF9vZl90Iiwic2V4cF9vZl9nIiwidF9vZl9zZXhwIiwiZ19vZl9zZXhwIiwic2V4cCIsImdsb2JhbGl6ZSIsImVxdWFsIiwiZXF1YWxfZyIsImdyb3VwIiwiYmluX3NoYXBlX3QiLCJhIiwiYmluX3NpemVfdCIsInNpemVfb2ZfYSIsImJpbl93cml0ZV90Iiwid3JpdGVfYSIsImJpbl9yZWFkX3QiLCJvZl9hIiwiYnVmIiwicG9zX3JlZiIsInZpbnQiLCJiaW5fcmVhZF90JDAiLCJvZl9iaW5hYmxlIiwidG9fYmluYWJsZSJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2dlbC9nZWwubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFPYUEsT0FBT0MsR0FBSSxPQUFKQSxFQUFTO1lBQ2hCQSxFQUFJQyxPQUFNLE9BQU5BO1lBQ0pDLElBQU1ELE9BQUtFLEdBQUksT0FBQSxXQUFKQSxHQUFMRjtZQUNORyxRQUFRQyxXQUFnQkosT0FBVUs7SUFBTSxPQUFBLFdBQWhDRCxXQUFnQkosT0FBVUs7O1lBQ2xDQyxZQUFZQyxhQUFZQyxZQUFhUixPQUFNLE9BQUEsV0FBL0JPLGFBQVlDLFlBQWFSOztZQUNyQ1MsVUFBVUMsV0FBWVYsT0FBTSxPQUFBLFdBQWxCVSxXQUFZVjtZQUN0QlcsVUFBVUMsV0FBVUMsTUFBTyxPQUFBLFdBQWpCRCxXQUFVQyxNQUE2QjtZQUNqREMsaUJBQWNmLEdBQU0sT0FBTkE7WUFDZGdCLE1BQU1DLFNBQWNoQixPQUFVSyxHQUFNLE9BQUEsV0FBOUJXLFNBQWNoQixPQUFVSztHQXFDL0I7Ozs7SUFBQSxVQUFBO0lBQVIsY0FBUTtJQUFSLE1BQUE7SUFBQVksUUFBQTtHQUFRLFNBQUFDLFlBQUFDO0lBQVIsVUFBQTtJQUFBLE9BQUEsV0FBQSwrQkFBQUYsaUJBQVFFO0dBQTBCO1lBQWxDQyxXQUFLQyxXLE9BQUFBO1lBQUxDLFlBQUtDLFMsT0FBQUE7WUFBTEMsV0FBS0MsTUFBT0MsS0FBQUMsU0FBQUM7SSw0Q0FBQUQ7O1lBQVpFLGFBQUtKLE0sT0FBQUE7WUFLTUssV0FBVy9CLEdBQUksT0FBSkEsRUFBUztZQUNwQmdDLFdBQWEvQixPQUFNLE9BQU5BOzs7Ozs7YUFOaEJrQixhQUFSRSxZQUFBRSxhQUFBTyxjQUFBTDtTQU1XTztTQURBRDs7Ozs7Ozs7Ozs7OztxQjtxQjtxQjtxQjtxQjtxQjs7Ozs7Ozs7Ozs7O09BL0NGM0I7T0FLQVk7T0FKQVQ7T0FFQUs7T0FEQUY7T0FMQVg7T0FDQUM7T0FDQUU7T0FLQWE7cUI7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQmFzZVxuXG50eXBlICdhIHQgPSB7IGcgOiAnYSB9IFtAQHVuYm94ZWRdXG5cbigqIFdlIHdhbnQgdG8gZW5zdXJlIHRoZSBkZXJpdmVkIG9wZXJhdGlvbnMgYXJlIGV4YWN0bHkgdGhlIHNhbWUgYXMgZm9yIHRoZSBpbm5lciB0eXBlLCBzb1xuICAgd2UgZGVmaW5lIHRoZW0gZGlyZWN0bHkuICopXG5cbmxldFtAaW5saW5lXSBjcmVhdGUgZyA9IHsgZyB9XG5sZXRbQGlubGluZV0gZyB7IGcgfSA9IGdcbmxldFtAaW5saW5lXSBtYXAgeyBnIH0gfmYgPSB7IGcgPSBmIGcgfVxubGV0W0BpbmxpbmVdIGNvbXBhcmUgY29tcGFyZV9nIHsgZyA9IGEgfSB7IGcgPSBiIH0gPSBjb21wYXJlX2cgYSBiXG5sZXRbQGlubGluZV0gaGFzaF9mb2xkX3QgaGFzaF9mb2xkX2cgaGFzaF9zdGF0ZSB7IGcgfSA9IGhhc2hfZm9sZF9nIGhhc2hfc3RhdGUgZ1xubGV0W0BpbmxpbmVdIHNleHBfb2ZfdCBzZXhwX29mX2cgeyBnIH0gPSBzZXhwX29mX2cgZ1xubGV0W0BpbmxpbmVdIHRfb2Zfc2V4cCBnX29mX3NleHAgc2V4cCA9IHsgZyA9IGdfb2Zfc2V4cCBzZXhwIH1cbmxldFtAaW5saW5lXSBnbG9iYWxpemUgXyB7IGcgfSA9IHsgZyB9XG5sZXRbQGlubGluZV0gZXF1YWwgZXF1YWxfZyB7IGcgPSBhIH0geyBnID0gYiB9ID0gZXF1YWxfZyBhIGJcblxuKCogUHJvb2YgdGhhdCBbZHJvcF9zb21lXSBjYW4gYmUgc2FmZWx5IGltcGxlbWVudGVkIGluIG5vcm1hbCBvY2FtbC4gQnV0IHRoaXNcbiAgIGltcGxlbWVudGF0aW9uIGFsbG9jYXRlcyBhIHNlY29uZCBvcHRpb24gbG9jYWxseS4gKilcbmxldCBfZHJvcF9zb21lX3Byb29mIDogJ2EgdCBvcHRpb24gLT4gJ2Egb3B0aW9uID1cbiAgZnVuIHggLT5cbiAgbWF0Y2ggeCB3aXRoXG4gIHwgTm9uZSAtPiBOb25lXG4gIHwgU29tZSB7IGcgfSAtPiBTb21lIGdcbjs7XG5cbigqIFRoaXMgdmVyc2lvbiBvZiBbZHJvcF9zb21lXSBkb2VzIG5vdC4gKilcbmV4dGVybmFsIGRyb3Bfc29tZSA6ICdhIHQgb3B0aW9uIC0+ICdhIG9wdGlvbiA9IFwiJWlkZW50aXR5XCJcblxuKCogQSBzaW1pbGFyIGFyZ3VtZW50IGFwcGxpZXMgdG8gW2Ryb3Bfb2tdIGFuZCBbZHJvcF9lcnJvcl0uICopXG5leHRlcm5hbCBkcm9wX29rIDogKCdhIHQsICdiKSBSZXN1bHQudCAtPiAoJ2EsICdiKSBSZXN1bHQudCA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGRyb3BfZXJyb3IgOiAoJ2EsICdiIHQpIFJlc3VsdC50IC0+ICgnYSwgJ2IpIFJlc3VsdC50ID0gXCIlaWRlbnRpdHlcIlxuXG4oKiBQcm9vZiB0aGF0IFtpbmplY3Rfc29tZV0gY2FuIGJlIHNhZmVseSBpbXBsZW1lbnRlZCBpbiBub3JtYWwgb2NhbWwuIEJ1dCB0aGlzXG4gICBpbXBsZW1lbnRhdGlvbiBhbGxvY2F0ZXMgYSBzZWNvbmQgb3B0aW9uIGxvY2FsbHkuICopXG5sZXQgX2luamVjdF9zb21lIDogJ2Egb3B0aW9uIC0+ICdhIHQgb3B0aW9uID1cbiAgZnVuIHggLT5cbiAgbWF0Y2ggeCB3aXRoXG4gIHwgTm9uZSAtPiBOb25lXG4gIHwgU29tZSB5IC0+IFNvbWUgeyBnID0geSB9XG47O1xuXG5leHRlcm5hbCBpbmplY3Rfc29tZSA6ICdhIG9wdGlvbiAtPiAnYSB0IG9wdGlvbiA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGluamVjdF9vayA6ICgnYSwgJ2IpIFJlc3VsdC50IC0+ICgnYSB0LCAnYikgUmVzdWx0LnQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBpbmplY3RfZXJyb3IgOiAoJ2EsICdiKSBSZXN1bHQudCAtPiAoJ2EsICdiIHQpIFJlc3VsdC50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgaW5qZWN0X3Jlc3VsdCA6ICgnYSwgJ2IpIFJlc3VsdC50IC0+ICgnYSB0LCAnYiB0KSBSZXN1bHQudCA9IFwiJWlkZW50aXR5XCJcblxuKCogV2Ugc3BlY2lmaWNhbGx5IHVzZSB0aGUgXCJsZWdhY3lcIiBbTWFrZV9iaW5hYmxlMV93aXRob3V0X3V1aWRdIGZ1bmN0aW9uLCBiZWNhdXNlIGl0XG4gICBfZG9lc24ndF8gY2hhbmdlIHRoZSBiaW5faW8gc2hhcGUsIHdoaWNoIGlzIHdoYXQgd2Ugd2FudCBoZXJlLiAqKVxuaW5jbHVkZVxuICBCaW5fcHJvdC5VdGlscy5NYWtlX2JpbmFibGUxX3dpdGhvdXRfdXVpZCBbQGFsZXJ0IFwiLWxlZ2FjeVwiXSBbQGlubGluZWQgaGludF0gKHN0cnVjdFxuICBtb2R1bGUgQmluYWJsZSA9IHN0cnVjdFxuICAgIHR5cGUgJ2EgdCA9ICdhIFtAQGRlcml2aW5nIGJpbl9pb11cbiAgZW5kXG5cbiAgdHlwZSBub25yZWMgJ2EgdCA9ICdhIHRcblxuICBsZXRbQGlubGluZV0gb2ZfYmluYWJsZSBnID0geyBnIH1cbiAgbGV0W0BpbmxpbmVdIHRvX2JpbmFibGUgeyBnIH0gPSBnXG5lbmQpXG4iXX0=
