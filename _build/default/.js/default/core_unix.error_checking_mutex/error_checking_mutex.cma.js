// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Error_checking_mutex__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Error_checking_mutex = [0],
    Error_checking_mutex$0 = [0, Error_checking_mutex];
   runtime.caml_register_global
    (0, Error_checking_mutex$0, "Error_checking_mutex__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Error_checking_mutex__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Error_checking_mutex_Impor = "Error_checking_mutex__Import",
    cst_error_checking_mutex = "error_checking_mutex";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Error_checking_mutex_Impor);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_error_checking_mutex);
   caml_call1(Ppx_expect_runtime[1][1], "error_checking_mutex/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_error_checking_mutex, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_error_checking_mutex);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Error_checking_mutex_Impor);
   var Error_checking_mutex_Import = [0];
   runtime.caml_register_global
    (11, Error_checking_mutex_Import, cst_Error_checking_mutex_Impor);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Error_checking_mutex
//# unitInfo: Requires: Base__Exn, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Condition, Stdlib__Mutex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Error_checking_mutex$0 = "Error_checking_mutex",
    cst_error_checking_mutex$0 = "error_checking_mutex";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Condition = global_data.Stdlib__Condition,
    Base_Exn = global_data.Base__Exn,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Mutex = global_data.Stdlib__Mutex;
   caml_call1(Ppx_module_timer_runtime[4], cst_Error_checking_mutex$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_error_checking_mutex$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "error_checking_mutex/src/error_checking_mutex.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_error_checking_mutex$0,
     "error_checking_mutex.ml");
   var
    lock = Stdlib_Mutex[2],
    unlock = Stdlib_Mutex[4],
    cst_error_checking_mutex = cst_error_checking_mutex$0,
    cst_Error_checking_mutex = cst_Error_checking_mutex$0,
    _a_ = Stdlib_Mutex[3];
   function create(_c_){return runtime.unix_create_error_checking_mutex(_c_);}
   function equal(t$0, t){return t$0 === t ? 1 : 0;}
   function critical_section(l, f){
    caml_call1(lock, l);
    function _b_(param){return caml_call1(unlock, l);}
    return caml_call2(Base_Exn[13], f, _b_);
   }
   function synchronize(f){
    var mtx = runtime.unix_create_error_checking_mutex(0);
    function f$0(x){
     return critical_section(mtx, function(param){return caml_call1(f, x);});
    }
    return f$0;
   }
   function update_signal(mtx, cnd, f){
    return critical_section
            (mtx,
             function(param){
              var res = caml_call1(f, 0);
              caml_call1(Stdlib_Condition[3], cnd);
              return res;
             });
   }
   function update_broadcast(mtx, cnd, f){
    return critical_section
            (mtx,
             function(param){
              var res = caml_call1(f, 0);
              caml_call1(Stdlib_Condition[4], cnd);
              return res;
             });
   }
   function try_lock(m){return caml_call1(_a_, m) ? -326120466 : -888951082;}
   caml_call1(Ppx_inline_test_lib[7], cst_error_checking_mutex);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Error_checking_mutex);
   var
    Error_checking_mutex =
      [0,
       create,
       equal,
       lock,
       try_lock,
       unlock,
       critical_section,
       synchronize,
       update_signal,
       update_broadcast];
   runtime.caml_register_global
    (14, Error_checking_mutex, cst_Error_checking_mutex$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJlcnJvcl9jaGVja2luZ19tdXRleC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiY3JlYXRlIiwiZXF1YWwiLCJ0JDAiLCJ0IiwiY3JpdGljYWxfc2VjdGlvbiIsImwiLCJmIiwic3luY2hyb25pemUiLCJtdHgiLCJmJDAiLCJ4IiwidXBkYXRlX3NpZ25hbCIsImNuZCIsInJlcyIsInVwZGF0ZV9icm9hZGNhc3QiLCJ0cnlfbG9jayIsIm0iXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9jb3JlX3VuaXgvZXJyb3JfY2hlY2tpbmdfbXV0ZXgvZXJyb3JfY2hlY2tpbmdfbXV0ZXhfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2NvcmVfdW5peC9lcnJvcl9jaGVja2luZ19tdXRleC9lcnJvcl9jaGVja2luZ19tdXRleC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztHQUtnQzs7SUFBQTs7Ozs7RTs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQ1E1QkEsWTtZQUVBQyxNQUFPQyxLQUFPQyxHQUFLLE9BQVpELFFBQU9DLFVBQW9CO1lBRWxDQyxpQkFBaUJDLEdBQUdDO0lBQ3RCLGlCQURtQkQ7d0JBRWdCLE9BRG5DLG1CQURtQkEsR0FFd0I7SUFBbkIsT0FBQSx5QkFGRkM7R0FFaUM7WUFHckRDLFlBQVlEO0lBQ0osSUFBTkUsTUFBTTthQUNOQyxJQUFHQztLQUFJLE9BUFROLGlCQU1FSSxxQkFDMEMsT0FBbkMsV0FGR0YsR0FFUEksR0FBMEM7SUFBQztJQUNsRCxPQURJRDtHQUNGO1lBR0FFLGNBQWNILEtBQUlJLEtBQUtOO0lBQ3pCLE9BWkVGO2FBV2NJOztjQUVKLElBQU5LLE1BQU0sV0FGYVA7Y0FHdkIsZ0NBSGtCTTtjQUdsQixPQURJQzthQUVEO0dBQUM7WUFHSkMsaUJBQWlCTixLQUFJSSxLQUFLTjtJQUM1QixPQW5CRUY7YUFrQmlCSTs7Y0FFUCxJQUFOSyxNQUFNLFdBRmdCUDtjQUcxQixnQ0FIcUJNO2NBR3JCLE9BRElDO2FBRUQ7R0FBQztZQUdKRSxTQUFTQyxHQUFJLE9BQUcsZ0JBQVBBLDZCQUFrRTs7Ozs7Ozs7T0E3QjNFaEI7T0FFQUM7O09BMkJBYzs7T0F6QkFYO09BS0FHO09BTUFJO09BT0FHOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgYnkgZHVuZSAqKVxuXG4oKiogQGNhbm9uaWNhbCBFcnJvcl9jaGVja2luZ19tdXRleC5JbXBvcnQgKilcbm1vZHVsZSBJbXBvcnQgPSBFcnJvcl9jaGVja2luZ19tdXRleF9fSW1wb3J0XG5cbm1vZHVsZSBFcnJvcl9jaGVja2luZ19tdXRleF9fID0gc3RydWN0IGVuZFxuW0BAZGVwcmVjYXRlZCBcInRoaXMgbW9kdWxlIGlzIHNoYWRvd2VkXCJdXG4iLCIoKiBFcnJvci1jaGVja2luZyBtdXRleGVzLiAqKVxuXG5vcGVuISBDb3JlXG5vcGVuISBJbXBvcnRcbmluY2x1ZGUgTXV0ZXhcblxuKCoqIFtjcmVhdGVdIGxpa2UgeyFNdXRleC5jcmVhdGV9LCBidXQgY3JlYXRlcyBhbiBlcnJvci1jaGVja2luZyBtdXRleC5cbiAgICBMb2NraW5nIGEgbXV0ZXggdHdpY2UgZnJvbSB0aGUgc2FtZSB0aHJlYWQsIHVubG9ja2luZyBhbiB1bmxvY2tlZCBtdXRleCxcbiAgICBvciB1bmxvY2tpbmcgYSBtdXRleCBub3QgaGVsZCBieSB0aGUgdGhyZWFkIHdpbGwgcmVzdWx0IGluIGEgW1N5c19lcnJvcl1cbiAgICBleGNlcHRpb24uICopXG5cbmV4dGVybmFsIGNyZWF0ZSA6IHVuaXQgLT4gTXV0ZXgudCA9IFwidW5peF9jcmVhdGVfZXJyb3JfY2hlY2tpbmdfbXV0ZXhcIlxuXG5sZXQgY3JlYXRlID0gY3JlYXRlXG5sZXQgcGh5c19lcXVhbCA9IFN0ZGxpYi4oID09IClcbmxldCBlcXVhbCAodCA6IHQpIHQnID0gcGh5c19lcXVhbCB0IHQnXG5cbmxldCBjcml0aWNhbF9zZWN0aW9uIGwgfmYgPVxuICBsb2NrIGw7XG4gIEV4bi5wcm90ZWN0IH5mIH5maW5hbGx5OihmdW4gKCkgLT4gdW5sb2NrIGwpIFtAbm9udGFpbF1cbjs7XG5cbmxldCBzeW5jaHJvbml6ZSBmID1cbiAgbGV0IG10eCA9IGNyZWF0ZSAoKSBpblxuICBsZXQgZicgeCA9IGNyaXRpY2FsX3NlY3Rpb24gbXR4IH5mOihmdW4gKCkgLT4gZiB4KSBpblxuICBmJ1xuOztcblxubGV0IHVwZGF0ZV9zaWduYWwgbXR4IGNuZCB+ZiA9XG4gIGNyaXRpY2FsX3NlY3Rpb24gbXR4IH5mOihmdW4gKCkgLT5cbiAgICBsZXQgcmVzID0gZiAoKSBpblxuICAgIENvbmRpdGlvbi5zaWduYWwgY25kO1xuICAgIHJlcylcbjs7XG5cbmxldCB1cGRhdGVfYnJvYWRjYXN0IG10eCBjbmQgfmYgPVxuICBjcml0aWNhbF9zZWN0aW9uIG10eCB+ZjooZnVuICgpIC0+XG4gICAgbGV0IHJlcyA9IGYgKCkgaW5cbiAgICBDb25kaXRpb24uYnJvYWRjYXN0IGNuZDtcbiAgICByZXMpXG47O1xuXG5sZXQgdHJ5X2xvY2sgbSA9IGlmIHRyeV9sb2NrIG0gdGhlbiBgQWNxdWlyZWQgZWxzZSBgQWxyZWFkeV9oZWxkX2J5X21lX29yX290aGVyXG4iXX0=
