// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Re__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Re = [0];
   runtime.caml_register_global(0, Re, "Re__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Bit_vector
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Char = global_data.Stdlib__Char,
    cst_Bit_vector_get = "Bit_vector.get",
    cst_Bit_vector_set = "Bit_vector.set";
   function length(t){return t[1];}
   function set(v, n, b){
    var _f_ = n < 0 ? 1 : 0, _g_ = _f_ || (v[1] <= n ? 1 : 0);
    if(_g_) caml_call1(Stdlib[1], cst_Bit_vector_set);
    var
     i = n >>> 3 | 0,
     c = caml_bytes_unsafe_get(v[2], i),
     mask = 1 << (n & 7),
     x = b ? c | mask : c & caml_call1(Stdlib[21], mask),
     s = v[2];
    runtime.caml_bytes_unsafe_set(s, i, caml_call1(Stdlib_Char[1], x));
    return 0;
   }
   function get(v, n){
    var _d_ = n < 0 ? 1 : 0, _e_ = _d_ || (v[1] <= n ? 1 : 0);
    if(_e_) caml_call1(Stdlib[1], cst_Bit_vector_get);
    var i = n >>> 3 | 0;
    return 0 < (caml_bytes_unsafe_get(v[2], i) & 1 << (n & 7)) ? 1 : 0;
   }
   function reset_zero(t){
    var _b_ = runtime.caml_ml_bytes_length(t[2]) - 1 | 0, _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      runtime.caml_bytes_set(t[2], i, 0);
      var _c_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _c_;
     }
    }
    return 0;
   }
   function create_zero(len){
    var
     r = len & 7,
     q = len >>> 3 | 0,
     len$0 = 0 === r ? q : q + 1 | 0,
     bits = caml_call2(Stdlib_Bytes[1], len$0, 0);
    return [0, len, bits];
   }
   var Re_Bit_vector = [0, length, set, create_zero, get, reset_zero];
   runtime.caml_register_global(5, Re_Bit_vector, "Re__Bit_vector");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Category
//# unitInfo: Requires: Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format;
   function equal(x, y){return x === y ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function to_int(x){return x;}
   var pp = Stdlib_Format[19];
   function intersect(x, y){return 0 !== (x & y) ? 1 : 0;}
   function symbol(x, y){return x | y;}
   var
    dummy = -1,
    inexistant = 1,
    letter = 2,
    not_letter = 4,
    newline = 8,
    lastnewline = 16,
    search_boundary = 32;
   function from_char(param){
    a:
    {
     if(170 <= param)
      if(187 <= param){
       var _a_ = param - 192 | 0;
       if(54 < _a_ >>> 0){if(56 <= _a_) break a;} else if(23 !== _a_) break a;
      }
      else{
       var _b_ = param - 171 | 0;
       if(14 < _b_ >>> 0 || 10 === _b_) break a;
      }
     else if(65 <= param){
      var _c_ = param - 91 | 0;
      if(5 < _c_ >>> 0){if(32 > _c_) break a;} else if(4 === _c_) break a;
     }
     else
      if(48 <= param){
       if(58 > param) break a;
      }
      else if(10 === param) return 12;
     return not_letter;
    }
    return letter;
   }
   var
    Re_Category =
      [0,
       symbol,
       from_char,
       dummy,
       inexistant,
       letter,
       not_letter,
       newline,
       lastnewline,
       search_boundary,
       to_int,
       equal,
       compare,
       intersect,
       pp];
   runtime.caml_register_global(1, Re_Category, "Re__Category");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Fmt
//# unitInfo: Requires: Stdlib__Buffer, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_3 = "<3>", cst = "@ ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    pp_print_string = Stdlib_Format[13],
    pp_print_int = Stdlib_Format[19],
    pp_print_space = Stdlib_Format[27],
    pp_print_list = Stdlib_Format[130],
    fprintf = Stdlib_Format[137],
    _d_ = [0, [12, 59, [17, [0, cst, 1, 0], 0]], ";@ "],
    _e_ =
      [0,
       [18,
        [1, [0, [11, cst_3, 0], cst_3]],
        [12,
         91,
         [17,
          [0, cst, 1, 0],
          [15, [17, [0, cst, 1, 0], [12, 93, [17, 0, 0]]]]]]],
       "@[<3>[@ %a@ ]@]"],
    _c_ = [0, [12, 34, [2, 0, [12, 34, 0]]], '"%s"'],
    _b_ = [0, [17, [0, cst, 1, 0], [4, 0, 0, 0, 0]], "@ %d"],
    _a_ =
      [0,
       [18,
        [1, [0, [11, cst_3, 0], cst_3]],
        [12, 40, [2, 0, [17, [0, cst, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]],
       "@[<3>(%s@ %a)@]"];
   function sexp(fmt, s, pp, x){
    return caml_call5(fprintf, fmt, _a_, s, pp, x);
   }
   function pair(pp1, pp2, fmt, param){
    var v2 = param[2], v1 = param[1];
    caml_call2(pp1, fmt, v1);
    caml_call2(pp_print_space, fmt, 0);
    return caml_call2(pp2, fmt, v2);
   }
   function triple(pp1, pp2, pp3, fmt, param){
    var v3 = param[3], v2 = param[2], v1 = param[1];
    caml_call2(pp1, fmt, v1);
    caml_call2(pp_print_space, fmt, 0);
    caml_call2(pp2, fmt, v2);
    caml_call2(pp_print_space, fmt, 0);
    return caml_call2(pp3, fmt, v3);
   }
   function optint(fmt, param){
    if(! param) return 0;
    var i = param[1];
    return caml_call3(fprintf, fmt, _b_, i);
   }
   function pp_elem(fmt, s){
    return caml_call3(Stdlib_Format[137], fmt, _c_, s);
   }
   function pp_str_list(fmt){
    var
     _f_ =
       caml_call2
        (pp_print_list,
         [0, function(fmt, param){return caml_call2(fprintf, fmt, _d_);}],
         pp_elem);
    return caml_call3(Stdlib_Format[137], fmt, _e_, _f_);
   }
   function to_to_string(pp, x){
    var
     b = caml_call1(Stdlib_Buffer[1], 16),
     fmt = caml_call1(Stdlib_Format[114], b);
    caml_call2(pp, fmt, x);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    Re_Fmt =
      [0,
       pp_str_list,
       sexp,
       pp_print_string,
       optint,
       pp_print_int,
       pair,
       triple,
       pp_print_list,
       to_to_string];
   runtime.caml_register_global(7, Re_Fmt, "Re__Fmt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Import
//# unitInfo: Requires: Stdlib__Int
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Int = global_data.Stdlib__Int,
    equal = runtime.caml_equal,
    Poly = [0, equal],
    symbol = Stdlib_Int[8],
    Re_Import = [0, Poly, symbol];
   runtime.caml_register_global(1, Re_Import, "Re__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Cset
//# unitInfo: Requires: Re__Fmt, Stdlib, Stdlib__Char, Stdlib__Format, Stdlib__Int, Stdlib__ListLabels, Stdlib__Map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_compare = runtime.caml_compare,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cany = [0, [0, 0, 255], 0],
    cst = "\t ",
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Char = global_data.Stdlib__Char,
    Re_Fmt = global_data.Re__Fmt,
    Stdlib_Map = global_data.Stdlib__Map,
    _d_ = [0, "lib/cset.ml", 163, 9],
    cst_Re_cset_pick = "Re_cset.pick",
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]], "%d-%d"],
    _i_ = [0, 170, [0, 181, [0, 186, [0, 223, [0, 255, 0]]]]];
   function to_int(x){return x;}
   function of_int(x){return x;}
   function to_char(t){return caml_call1(Stdlib_Char[1], t);}
   function of_char(c){return c;}
   function _a_(param, _P_){
    var
     y = _P_[2],
     x = _P_[1],
     y$0 = param[2],
     x$0 = param[1],
     _Q_ = caml_call2(Stdlib_Int[8], x$0, x);
    return _Q_ ? caml_call2(Stdlib_Int[8], y$0, y) : _Q_;
   }
   var equal = caml_call1(Stdlib_ListLabels[16], _a_);
   function union(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return l$2;
     if(! l$2) return l$1;
     var
      r = l$1[2],
      _O_ = l$1[1],
      c2 = _O_[2],
      c1 = _O_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if((c2$0 + 1 | 0) < c1) return [0, [0, c1$0, c2$0], union(r$0, l$1)];
     if((c2 + 1 | 0) < c1$0) return [0, [0, c1, c2], union(l$2, r)];
     if(c2$0 < c2)
      var
       l$3 = [0, [0, caml_call2(Stdlib[16], c1$0, c1), c2], r],
       l$2 = r$0,
       l$1 = l$3;
     else
      var
       l$4 = [0, [0, caml_call2(Stdlib[16], c1$0, c1), c2$0], r$0],
       l$2 = l$4,
       l$1 = r;
    }
   }
   function inter(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return 0;
     if(! l$2) return 0;
     var
      r = l$1[2],
      _L_ = l$1[1],
      c2 = _L_[2],
      c1 = _L_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if(caml_lessthan(c2$0, c1))
      var l$2 = r$0;
     else{
      if(! caml_lessthan(c2, c1$0)){
       if(caml_lessthan(c2$0, c2)){
        var _M_ = inter(r$0, l$1);
        return [0, [0, caml_call2(Stdlib[17], c1$0, c1), c2$0], _M_];
       }
       var _N_ = inter(l$2, r);
       return [0, [0, caml_call2(Stdlib[17], c1$0, c1), c2], _N_];
      }
      var l$1 = r;
     }
    }
   }
   function diff(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return l$2;
     if(! l$2) return 0;
     var
      r = l$1[2],
      _K_ = l$1[1],
      c2 = _K_[2],
      c1 = _K_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if(c2$0 < c1) return [0, [0, c1$0, c2$0], diff(r$0, l$1)];
     if(c2 < c1$0)
      var l$1 = r;
     else{
      var r$1 = c2 < c2$0 ? [0, [0, c2 + 1 | 0, c2$0], r$0] : r$0;
      if(c1$0 < c1) return [0, [0, c1$0, c1 - 1 | 0], diff(r$1, r)];
      var l$2 = r$1, l$1 = r;
     }
    }
   }
   function single(c){return [0, [0, c, c], 0];}
   function add(c, l){return union(single(c), l);}
   function seq(c$0, c){
    return runtime.caml_lessequal(c$0, c)
            ? [0, [0, c$0, c], 0]
            : [0, [0, c, c$0], 0];
   }
   function offset(o, l){
    if(! l) return 0;
    var r = l[2], match = l[1], c2 = match[2], c1 = match[1];
    return [0, [0, c1 + o | 0, c2 + o | 0], offset(o, r)];
   }
   var
    union_all = caml_call2(Stdlib_ListLabels[26], union, 0),
    intersect_all = caml_call2(Stdlib_ListLabels[26], inter, cany),
    empty = 0;
   function mem(c, s){
    var s$0 = s;
    for(;;){
     if(! s$0) return 0;
     var rem = s$0[2], match = s$0[1], c2 = match[2], c1 = match[1];
     if(c <= c2) return c1 <= c ? 1 : 0;
     var s$0 = rem;
    }
   }
   function hash_rec(param){
    if(! param) return 0;
    var r = param[2], match = param[1], j = match[2], i = match[1];
    return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0;
   }
   function hash(l){return hash_rec(l) & 1073741823;}
   function print_one(ch, param){
    var c2 = param[2], c1 = param[1];
    return caml_call2(Stdlib_Int[8], c1, c2)
            ? caml_call3(Stdlib_Format[137], ch, _b_, c1)
            : caml_call4(Stdlib_Format[137], ch, _c_, c1, c2);
   }
   var pp = caml_call2(Re_Fmt[8], 0, print_one);
   function iter(t, f){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var xs = t$0[2], match = t$0[1], y = match[2], x = match[1];
     caml_call2(f, x, y);
     var t$0 = xs;
    }
   }
   function one_char(param){
    if(param && ! param[2]){
     var match = param[1], j = match[2], i = match[1];
     if(caml_call2(Stdlib_Int[8], i, j)) return [0, i];
    }
    return 0;
   }
   function compare(param, _J_){
    var
     v = _J_[2],
     j = _J_[1],
     u = param[2],
     i = param[1],
     c = caml_compare(i, j);
    return 0 === c ? caml_compare(u, v) : c;
   }
   var CSetMap = caml_call1(Stdlib_Map[1], [0, compare]);
   function fold_right(t, init, f){
    return caml_call3(Stdlib_ListLabels[27], f, t, init);
   }
   function csingle(c){return single(c);}
   function is_empty(param){return param ? 0 : 1;}
   function prepend(s, x, l){
    var s$0 = s;
    for(;;){
     if(! s$0) return l;
     if(! l) return 0;
     var _E_ = l[1], _F_ = _E_[1];
     if(_F_ && ! _F_[2]){
      var
       x$0 = _E_[2],
       _G_ = _F_[1],
       d = _G_[2],
       d$0 = _G_[1],
       r = s$0[2],
       match = s$0[1],
       c = match[2],
       c$0 = match[1];
      if(c < d$0){var s$0 = r; continue;}
      var r$0 = l[2];
      if(c$0 > d$0)
       return d < c$0
               ? [0, [0, [0, [0, d$0, d], 0], x$0], prepend(s$0, x, r$0)]
               : [0,
                 [0, [0, [0, d$0, c$0 - 1 | 0], 0], x$0],
                 prepend(s$0, x, [0, [0, [0, [0, c$0, d], 0], x$0], r$0])];
      if(c < d){
       var _H_ = prepend(r, x, [0, [0, [0, [0, c + 1 | 0, d], 0], x$0], r$0]);
       return [0,
               [0, [0, [0, d$0, c], 0], caml_call2(Stdlib[37], x, x$0)],
               _H_];
      }
      var _I_ = prepend(s$0, x, r$0);
      return [0,
              [0, [0, [0, d$0, d], 0], caml_call2(Stdlib[37], x, x$0)],
              _I_];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    }
   }
   function pick(param){
    if(! param) return caml_call1(Stdlib[1], cst_Re_cset_pick);
    var x = param[1][1];
    return x;
   }
   function cseq(c$0, c){return seq(c$0, c);}
   var
    _e_ = [0, cseq(216, 222), 0],
    _f_ = [0, cseq(192, 214), _e_],
    upper = caml_call1(union_all, [0, cseq(65, 90), _f_]),
    clower = offset(32, upper),
    cdigit = cseq(48, 57),
    ascii = cseq(0, 127);
   function cadd(c, s){return add(c, s);}
   var
    space = add(32, cseq(9, 13)),
    _g_ = [0, cseq(65, 70), 0],
    xdigit = caml_call1(union_all, [0, cdigit, [0, cseq(97, 102), _g_]]),
    _h_ = union(clower, upper),
    calpha = caml_call3(Stdlib_ListLabels[27], cadd, _i_, _h_),
    calnum = union(calpha, cdigit);
   function case_insens(s){
    var _D_ = [0, offset(-32, inter(s, clower)), 0];
    return caml_call1
            (union_all, [0, s, [0, offset(32, inter(s, upper)), _D_]]);
   }
   var
    cword = cadd(95, calnum),
    notnl = diff(cany, csingle(10)),
    nl = csingle(10);
   function set(str){
    var
     s = [0, empty],
     _A_ = runtime.caml_ml_string_length(str) - 1 | 0,
     _z_ = 0;
    if(_A_ >= 0){
     var i = _z_;
     for(;;){
      var _B_ = s[1];
      s[1] = union(csingle(runtime.caml_string_get(str, i)), _B_);
      var _C_ = i + 1 | 0;
      if(_A_ === i) break;
      var i = _C_;
     }
    }
    return s[1];
   }
   var
    blank = set(cst),
    _j_ = [0, cseq(248, 255), 0],
    _k_ = [0, cseq(223, 246), _j_],
    _l_ = [0, csingle(181), _k_],
    lower = caml_call1(union_all, [0, cseq(97, 122), _l_]),
    _m_ = [0, csingle(186), 0],
    alpha =
      caml_call1(union_all, [0, lower, [0, upper, [0, csingle(170), _m_]]]),
    alnum = caml_call1(union_all, [0, alpha, [0, cdigit, 0]]),
    wordc = caml_call1(union_all, [0, alnum, [0, csingle(95), 0]]),
    _n_ = [0, cseq(127, 159), 0],
    cntrl = caml_call1(union_all, [0, cseq(0, 31), _n_]),
    _o_ = [0, cseq(160, 255), 0],
    graph = caml_call1(union_all, [0, cseq(33, 126), _o_]),
    _p_ = [0, cseq(160, 255), 0],
    print = caml_call1(union_all, [0, cseq(32, 126), _p_]),
    _q_ = [0, csingle(247), 0],
    _r_ = [0, csingle(215), _q_],
    _s_ = [0, cseq(187, 191), _r_],
    _t_ = [0, cseq(182, 185), _s_],
    _u_ = [0, cseq(171, 180), _t_],
    _v_ = [0, cseq(160, 169), _u_],
    _w_ = [0, cseq(123, 126), _v_],
    _x_ = [0, cseq(91, 96), _w_],
    _y_ = [0, cseq(58, 64), _x_],
    punct = caml_call1(union_all, [0, cseq(33, 47), _y_]),
    Re_Cset =
      [0,
       to_int,
       of_int,
       to_char,
       of_char,
       equal,
       iter,
       union,
       union_all,
       intersect_all,
       inter,
       diff,
       offset,
       empty,
       single,
       seq,
       add,
       mem,
       case_insens,
       cdigit,
       calpha,
       cword,
       notnl,
       ascii,
       nl,
       cseq,
       set,
       blank,
       space,
       xdigit,
       lower,
       upper,
       alpha,
       alnum,
       wordc,
       cntrl,
       graph,
       print,
       punct,
       hash,
       pp,
       one_char,
       fold_right,
       hash_rec,
       CSetMap,
       cany,
       csingle,
       is_empty,
       prepend,
       pick];
   runtime.caml_register_global(15, Re_Cset, "Re__Cset");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Mark_infos
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function make(marks){
    var _f_ = -1;
    function _g_(ma, param){
     var i = param[1];
     return caml_call2(Stdlib[17], ma, i);
    }
    var
     len = 1 + caml_call3(Stdlib_List[26], _g_, _f_, marks) | 0,
     t = runtime.caml_make_vect(len, -1);
    function _h_(param){
     var v = param[2], i = param[1];
     caml_check_bound(t, i)[1 + i] = v;
     return 0;
    }
    caml_call2(Stdlib_List[18], _h_, marks);
    return t;
   }
   function test(t, i){
    if(t.length - 1 <= (2 * i | 0)) return 0;
    var _e_ = 2 * i | 0;
    return -1 !== caml_check_bound(t, _e_)[1 + _e_] ? 1 : 0;
   }
   function offset(t, i){
    var start_i = 2 * i | 0, stop_i = start_i + 1 | 0;
    if(t.length - 1 <= stop_i) return 0;
    var start = caml_check_bound(t, start_i)[1 + start_i];
    if(-1 === start) return 0;
    var stop = caml_check_bound(t, stop_i)[1 + stop_i];
    return [0, [0, start, stop]];
   }
   function iteri(t, f){
    var _b_ = ((t.length - 1) / 2 | 0) - 1 | 0, _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var idx = 2 * i | 0, start = caml_check_bound(t, idx)[1 + idx];
      if(-1 !== start){
       var _c_ = idx + 1 | 0, stop = caml_check_bound(t, _c_)[1 + _c_];
       caml_call3(f, i, start, stop);
      }
      var _d_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _d_;
     }
    }
    return 0;
   }
   var Re_Mark_infos = [0, make, offset, test, iteri];
   runtime.caml_register_global(2, Re_Mark_infos, "Re__Mark_infos");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Pmark
//# unitInfo: Requires: Stdlib__Format, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Set = global_data.Stdlib__Set;
   function equal(x, y){return x === y ? 1 : 0;}
   var compare = runtime.caml_int_compare, r = [0, 0];
   function gen(param){r[1]++; return r[1];}
   var
    pp = Stdlib_Format[19],
    Set = caml_call1(Stdlib_Set[1], [0, compare]),
    Re_Pmark = [0, equal, compare, gen, pp, Set];
   runtime.caml_register_global(2, Re_Pmark, "Re__Pmark");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Automata
//# unitInfo: Requires: Re__Bit_vector, Re__Category, Re__Cset, Re__Fmt, Re__Import, Re__Mark_infos, Re__Pmark, Stdlib__Format, Stdlib__Hashtbl, Stdlib__Int, Stdlib__ListLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    eps_expr = [0, 0, 0],
    Re_Fmt = global_data.Re__Fmt,
    Re_Cset = global_data.Re__Cset,
    Re_Category = global_data.Re__Category,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Re_Bit_vector = global_data.Re__Bit_vector,
    Re_Import = global_data.Re__Import,
    Re_Mark_infos = global_data.Re__Mark_infos,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Re_Pmark = global_data.Re__Pmark,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Int = global_data.Stdlib__Int,
    cst_eps = "eps",
    cst_cst = "cst",
    cst_alt = "alt",
    cst_seq = "seq",
    cst_rep = "rep",
    cst_mark = "mark",
    cst_erase = "erase",
    cst_before = "before",
    cst_after = "after",
    cst_pmark = "pmark",
    _c_ = [0, "lib/automata.ml", 317, 14],
    _a_ = [1, 0],
    cst_Non_greedy = "Non_greedy",
    cst_Greedy = "Greedy",
    cst_first = "first",
    cst_short = "short",
    cst_long = "long";
   function create(param){return [0, 0];}
   var equal = Re_Import[1][1];
   function pp(ch, k){
    var
     _aI_ =
       -730718166 === k ? cst_long : 332064784 <= k ? cst_first : cst_short;
    return caml_call2(Stdlib_Format[13], ch, _aI_);
   }
   function pp$0(fmt, param){
    return 620821490 <= param
            ? caml_call2(Stdlib_Format[13], fmt, cst_Non_greedy)
            : caml_call2(Stdlib_Format[13], fmt, cst_Greedy);
   }
   var Rep_kind = [0, pp$0], start = 0;
   function prev(x){return x - 1 | 0;}
   function next(x){return x + 1 | 0;}
   function next2(x){return x + 2 | 0;}
   function group_count(x){return x / 2 | 0;}
   var Mark = [0, start, prev, next, next2, group_count];
   function hash_combine(h, accu){return (accu * 65599 | 0) + h | 0;}
   function equal$0(param, t){
    var pmarks = param[2], marks = param[1], _aD_ = t[1];
    function _aE_(param, _aG_){
     var
      y = _aG_[2],
      x = _aG_[1],
      y$0 = param[2],
      x$0 = param[1],
      _aH_ = caml_call2(Stdlib_Int[8], x$0, x);
     return _aH_ ? caml_call2(Stdlib_Int[8], y$0, y) : _aH_;
    }
    var _aF_ = caml_call3(Stdlib_ListLabels[16], _aE_, marks, _aD_);
    return _aF_ ? caml_call2(Re_Pmark[5][32], pmarks, t[2]) : _aF_;
   }
   var empty = [0, 0, Re_Pmark[5][1]];
   function merge_marks_offset(old, param){
    if(! param) return old;
    var
     rem = param[2],
     match = param[1],
     v = match[2],
     i = match[1],
     nw = merge_marks_offset(caml_call2(Stdlib_ListLabels[56], i, old), rem);
    return caml_call2(Re_Import[2], v, -2) ? nw : [0, [0, i, v], nw];
   }
   function merge(old, nw){
    var _aC_ = caml_call2(Re_Pmark[5][5], old[2], nw[2]);
    return [0, merge_marks_offset(old[1], nw[1]), _aC_];
   }
   function hash(m, accu$1){
    var
     accu$2 = hash_combine(caml_call1(Stdlib_Hashtbl[28], m[2]), accu$1),
     l$0 = m[1],
     l = l$0,
     accu = accu$2;
    for(;;){
     if(! l) return accu;
     var
      r = l[2],
      match = l[1],
      i = match[2],
      a = match[1],
      accu$0 = hash_combine(a, hash_combine(i, accu)),
      l = r,
      accu = accu$0;
    }
   }
   function marks_set_idx(idx, marks){
    if(marks){
     var _aB_ = marks[1];
     if(-1 === _aB_[2]){
      var rem = marks[2], a = _aB_[1];
      return [0, [0, a, idx], marks_set_idx(idx, rem)];
     }
    }
    return marks;
   }
   function marks_set_idx$0(marks, idx){
    var _aA_ = marks[2];
    return [0, marks_set_idx(idx, marks[1]), _aA_];
   }
   function filter(t, b, e){
    var _av_ = t[2], _aw_ = t[1];
    function _ax_(param){
     var i = param[1], _ay_ = i < b ? 1 : 0, _az_ = _ay_ || (e < i ? 1 : 0);
     return _az_;
    }
    return [0, caml_call2(Stdlib_ListLabels[44], _ax_, _aw_), _av_];
   }
   function set_mark(t, i){
    var _au_ = t[2];
    return [0,
            [0, [0, i, -1], caml_call2(Stdlib_ListLabels[56], i, t[1])],
            _au_];
   }
   function pp$1(ch, e){
    var match = e[2];
    if(typeof match === "number") return caml_call2(Re_Fmt[3], ch, cst_eps);
    switch(match[0]){
      case 0:
       var l = match[1];
       return caml_call4(Re_Fmt[2], ch, cst_cst, Re_Cset[40], l);
      case 1:
       var l$0 = match[1], _aq_ = caml_call2(Re_Fmt[8], 0, pp$1);
       return caml_call4(Re_Fmt[2], ch, cst_alt, _aq_, l$0);
      case 2:
       var
        e$0 = match[3],
        e$1 = match[2],
        k = match[1],
        _ar_ = caml_call3(Re_Fmt[7], pp, pp$1, pp$1);
       return caml_call4(Re_Fmt[2], ch, cst_seq, _ar_, [0, k, e$1, e$0]);
      case 3:
       var
        e$2 = match[3],
        k$0 = match[2],
        _as_ = caml_call2(Re_Fmt[6], pp, pp$1);
       return caml_call4(Re_Fmt[2], ch, cst_rep, _as_, [0, k$0, e$2]);
      case 4:
       var i = match[1];
       return caml_call4(Re_Fmt[2], ch, cst_mark, Re_Fmt[5], i);
      case 5:
       var
        e$3 = match[2],
        b = match[1],
        _at_ = caml_call2(Re_Fmt[6], Re_Fmt[5], Re_Fmt[5]);
       return caml_call4(Re_Fmt[2], ch, cst_erase, _at_, [0, b, e$3]);
      case 6:
       var c = match[1];
       return caml_call4(Re_Fmt[2], ch, cst_before, Re_Category[14], c);
      case 7:
       var c$0 = match[1];
       return caml_call4(Re_Fmt[2], ch, cst_after, Re_Category[14], c$0);
      default:
       var i$0 = match[1];
       return caml_call4(Re_Fmt[2], ch, cst_pmark, Re_Fmt[5], i$0);
    }
   }
   function mk_expr(ids, def){ids[1]++; return [0, ids[1], def];}
   function empty$0(ids){return mk_expr(ids, _a_);}
   function cst(ids, s){
    return caml_call1(Re_Cset[47], s) ? empty$0(ids) : mk_expr(ids, [0, s]);
   }
   function alt(ids, l){
    if(! l) return empty$0(ids);
    if(l[2]) return mk_expr(ids, [1, l]);
    var c = l[1];
    return c;
   }
   function seq(ids, kind, x, y){
    var _ao_ = x[2], _ap_ = y[2];
    if(typeof _ao_ !== "number" && 1 === _ao_[0] && ! _ao_[1]) return x;
    if(typeof _ap_ !== "number" && 1 === _ap_[0] && ! _ap_[1]) return y;
    if(typeof _ao_ === "number") return y;
    if(typeof _ap_ === "number" && caml_call2(equal, kind, 332064784))
     return x;
    return mk_expr(ids, [2, kind, x, y]);
   }
   function is_eps(expr){return typeof expr[2] === "number" ? 1 : 0;}
   function eps(ids){return mk_expr(ids, 0);}
   function rep(ids, kind, sem, x){return mk_expr(ids, [3, kind, sem, x]);}
   function mark(ids, m){return mk_expr(ids, [4, m]);}
   function pmark(ids, i){return mk_expr(ids, [8, i]);}
   function erase(ids, m$0, m){return mk_expr(ids, [5, m$0, m]);}
   function before(ids, c){return mk_expr(ids, [6, c]);}
   function after(ids, c){return mk_expr(ids, [7, c]);}
   function rename(ids, x){
    var match = x[2];
    if(typeof match !== "number")
     switch(match[0]){
       case 1:
        var l = match[1], _al_ = function(_an_){return rename(ids, _an_);};
        return mk_expr(ids, [1, caml_call2(Stdlib_ListLabels[20], _al_, l)]);
       case 2:
        var z = match[3], y = match[2], k = match[1], _am_ = rename(ids, z);
        return mk_expr(ids, [2, k, rename(ids, y), _am_]);
       case 3:
        var y$0 = match[3], k$0 = match[2], g = match[1];
        return mk_expr(ids, [3, g, k$0, rename(ids, y$0)]);
     }
    return mk_expr(ids, x[2]);
   }
   function is_tmatch(param){return 2 === param[0] ? 1 : 0;}
   function equal$1(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      var _ad_ = l1$0[1];
      switch(_ad_[0]){
        case 0:
         if(l2$0){
          var match = l2$0[1], r1 = l1$0[2], e1 = _ad_[2], l1$1 = _ad_[1];
          if(0 === match[0]){
           var
            r2 = l2$0[2],
            e2 = match[2],
            l2$1 = match[1],
            _ae_ = caml_call2(Re_Import[2], e1[1], e2[1]);
           if(_ae_){
            var _af_ = equal$1(l1$1, l2$1);
            if(_af_){var l1$0 = r1, l2$0 = r2; continue;}
            var _ag_ = _af_;
           }
           else
            var _ag_ = _ae_;
           return _ag_;
          }
         }
         break;
        case 1:
         if(l2$0){
          var
           match$0 = l2$0[1],
           r1$0 = l1$0[2],
           e1$0 = _ad_[2],
           marks1 = _ad_[1];
          if(1 === match$0[0]){
           var
            r2$0 = l2$0[2],
            e2$0 = match$0[2],
            marks2 = match$0[1],
            _ah_ = caml_call2(Re_Import[2], e1$0[1], e2$0[1]);
           if(_ah_){
            var _ai_ = equal$0(marks1, marks2);
            if(_ai_){var l1$0 = r1$0, l2$0 = r2$0; continue;}
            var _aj_ = _ai_;
           }
           else
            var _aj_ = _ah_;
           return _aj_;
          }
         }
         break;
        default:
         if(l2$0){
          var match$1 = l2$0[1], r1$1 = l1$0[2], marks1$0 = _ad_[1];
          if(2 === match$1[0]){
           var
            r2$1 = l2$0[2],
            marks2$0 = match$1[1],
            _ak_ = equal$0(marks1$0, marks2$0);
           if(! _ak_) return _ak_;
           var l1$0 = r1$1, l2$0 = r2$1;
           continue;
          }
         }
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function hash$0(l, accu){
    var l$0 = l, accu$0 = accu;
    for(;;){
     if(! l$0) return accu$0;
     var match = l$0[1];
     switch(match[0]){
       case 0:
        var
         r = l$0[2],
         e = match[2],
         l$1 = match[1],
         _ab_ = hash$0(l$1, accu$0),
         accu$1 = hash_combine(388635598, hash_combine(e[1], _ab_)),
         l$0 = r,
         accu$0 = accu$1;
        break;
       case 1:
        var
         r$0 = l$0[2],
         e$0 = match[2],
         marks = match[1],
         _ac_ = hash(marks, accu$0),
         accu$2 = hash_combine(726404471, hash_combine(e$0[1], _ac_)),
         l$0 = r$0,
         accu$0 = accu$2;
        break;
       default:
        var
         r$1 = l$0[2],
         marks$0 = match[1],
         accu$3 = hash_combine(471882453, hash(marks$0, accu$0)),
         l$0 = r$1,
         accu$0 = accu$3;
     }
    }
   }
   function tseq(kind, x, y, rem){
    if(! x) return rem;
    var _aa_ = x[1];
    if(1 === _aa_[0] && typeof _aa_[2][2] === "number" && ! x[2]){var marks = _aa_[1]; return [0, [1, marks, y], rem];}
    return [0, [0, x, y, kind], rem];
   }
   function first_match(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var match = param$0[1];
     if(2 === match[0]){var marks = match[1]; return [0, marks];}
     var r = param$0[2], param$0 = r;
    }
   }
   function _b_(param){return 2 === param[0] ? 0 : 1;}
   var remove_matches = caml_call1(Stdlib_ListLabels[44], _b_);
   function split_at_match(l$1){
    var l = 0, param = l$1;
    for(;;){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var x = param[1];
     if(2 === x[0]){
      var r$0 = param[2], _$_ = caml_call1(remove_matches, r$0);
      return [0, caml_call1(Stdlib_ListLabels[10], l), _$_];
     }
     var r = param[2], l$0 = [0, x, l], l = l$0, param = r;
    }
   }
   var exists_tmatch = caml_call1(Stdlib_ListLabels[34], is_tmatch);
   function set_idx(idx, param){
    if(! param) return 0;
    var match = param[1];
    switch(match[0]){
      case 0:
       var
        r = param[2],
        kind = match[3],
        x = match[2],
        l = match[1],
        _Y_ = set_idx(idx, r);
       return [0, [0, set_idx(idx, l), x, kind], _Y_];
      case 1:
       var
        r$0 = param[2],
        x$0 = match[2],
        marks = match[1],
        _Z_ = set_idx(idx, r$0);
       return [0, [1, marks_set_idx$0(marks, idx), x$0], _Z_];
      default:
       var r$1 = param[2], marks$0 = match[1], ___ = set_idx(idx, r$1);
       return [0, [2, marks_set_idx$0(marks$0, idx)], ___];
    }
   }
   function idx(t){return t[1];}
   var dummy = [0, -1, Re_Category[3], 0, 0, -1];
   function mk(idx, cat, desc){
    return [0,
            idx,
            cat,
            desc,
            0,
            hash$0
             (desc,
              hash_combine
               (idx, hash_combine(caml_call1(Re_Category[10], cat), 0)))
            & 1073741823];
   }
   function create$0(cat, e){return mk(0, cat, [0, [1, empty, e], 0]);}
   function equal$2(x, y){
    var _U_ = caml_call2(Re_Import[2], x[5], y[5]);
    if(_U_){
     var _V_ = caml_call2(Re_Import[2], x[1], y[1]);
     if(_V_){
      var _W_ = caml_call2(Re_Category[11], x[2], y[2]);
      if(_W_) return equal$1(x[3], y[3]);
      var _X_ = _W_;
     }
     else
      var _X_ = _V_;
    }
    else
     var _X_ = _U_;
    return _X_;
   }
   function status(s){
    var match = s[4];
    if(match){var st = match[1]; return st;}
    var _S_ = s[3];
    if(_S_){
     var match$0 = _S_[1];
     if(2 === match$0[0])
      var
       m = match$0[1],
       _T_ = m[2],
       st$0 = [0, caml_call1(Re_Mark_infos[1], m[1]), _T_];
     else
      var st$0 = 1;
    }
    else
     var st$0 = 0;
    s[4] = [0, st$0];
    return st$0;
   }
   function hash$1(t){return t[5];}
   var Table = caml_call1(Stdlib_Hashtbl[26], [0, equal$2, hash$1]);
   function create$1(param){return [0, caml_call1(Re_Bit_vector[3], 1)];}
   function index_count(w){return caml_call1(Re_Bit_vector[1], w[1]);}
   function mark_used_indices(tbl){
    function _O_(param){
     if(0 === param[0]){
      var l = param[1];
      return caml_call1(mark_used_indices(tbl), l);
     }
     var marks = param[1], _P_ = marks[1];
     function _Q_(param){
      var i = param[2], _R_ = 0 <= i ? 1 : 0;
      return _R_ ? caml_call3(Re_Bit_vector[2], tbl, i, 1) : _R_;
     }
     return caml_call2(Stdlib_ListLabels[18], _Q_, _P_);
    }
    return caml_call1(Stdlib_ListLabels[18], _O_);
   }
   function free_index(tbl_ref, l){
    var tbl = tbl_ref[1];
    caml_call1(Re_Bit_vector[5], tbl);
    caml_call1(mark_used_indices(tbl), l);
    var len = caml_call1(Re_Bit_vector[1], tbl), idx = 0;
    for(;;){
     if
      (!
       caml_call2(Re_Import[2], idx, len)
       && caml_call2(Re_Bit_vector[4], tbl, idx)){
      var idx$0 = idx + 1 | 0, idx = idx$0;
      continue;
     }
     if(caml_call2(Re_Import[2], idx, len))
      tbl_ref[1] = caml_call1(Re_Bit_vector[3], 2 * len | 0);
     return idx;
    }
   }
   function remove_duplicates(prev, l, y){
    var l$0 = l;
    for(;;){
     if(! l$0) return [0, 0, prev];
     var x = l$0[1];
     switch(x[0]){
       case 0:
        var
         r = l$0[2],
         kind = x[3],
         x$0 = x[2],
         l$1 = x[1],
         match = remove_duplicates(prev, l$1, x$0),
         prev$0 = match[2],
         l$2 = match[1],
         match$0 = remove_duplicates(prev$0, r, y),
         prev$1 = match$0[2],
         r$0 = match$0[1];
        return [0, tseq(kind, l$2, x$0, r$0), prev$1];
       case 1:
        if(typeof x[2][2] === "number"){
         var r$1 = l$0[2];
         if(! caml_call2(Stdlib_ListLabels[38], y[1], prev)){
          var
           match$1 = remove_duplicates([0, y[1], prev], r$1, y),
           prev$2 = match$1[2],
           r$2 = match$1[1];
          return [0, [0, x, r$2], prev$2];
         }
         var l$0 = r$1;
        }
        else{
         var r$3 = l$0[2], x$1 = x[2];
         if(! caml_call2(Stdlib_ListLabels[38], x$1[1], prev)){
          var
           match$2 = remove_duplicates([0, x$1[1], prev], r$3, y),
           prev$3 = match$2[2],
           r$4 = match$2[1];
          return [0, [0, x, r$4], prev$3];
         }
         var l$0 = r$3;
        }
        break;
       default: return [0, [0, x, 0], prev];
     }
    }
   }
   function delta_1$0(counter, ctx, x, rem){
    var marks$0 = ctx[4], c = ctx[1], match = x[2];
    if(typeof match === "number") return [0, [2, marks$0], rem];
    switch(match[0]){
      case 0:
       var s = match[1];
       return caml_call2(Re_Cset[17], c, s)
               ? [0, [1, marks$0, eps_expr], rem]
               : rem;
      case 1:
       var l = match[1];
       if(counter >= 50)
        return caml_trampoline_return(delta_alt$0, [0, ctx, l, rem]);
       var counter$0 = counter + 1 | 0;
       return delta_alt$0(counter$0, ctx, l, rem);
      case 2:
       var
        z = match[3],
        y = match[2],
        kind = match[1],
        y$0 = delta_1(ctx, y, 0);
       if(counter >= 50)
        return caml_trampoline_return
                (delta_seq$0, [0, ctx, kind, y$0, z, rem]);
       var counter$1 = counter + 1 | 0;
       return delta_seq$0(counter$1, ctx, kind, y$0, z, rem);
      case 3:
       var
        y$1 = match[3],
        kind$0 = match[2],
        rep_kind = match[1],
        y$2 = delta_1(ctx, y$1, 0),
        match$0 = first_match(y$2);
       if(match$0)
        var
         marks$1 = match$0[1],
         marks$2 = marks$1,
         y$3 = caml_call1(remove_matches, y$2);
       else
        var marks$2 = marks$0, y$3 = y$2;
       return 620821490 <= rep_kind
               ? [0, [2, marks$0], tseq(kind$0, y$3, x, rem)]
               : tseq(kind$0, y$3, x, [0, [2, marks$2], rem]);
      case 4:
       var i = match[1], marks$3 = set_mark(marks$0, i);
       return [0, [2, marks$3], rem];
      case 5:
       var e = match[2], b = match[1];
       return [0, [2, filter(marks$0, b, e)], rem];
      case 6:
       var cat = match[1];
       return caml_call2(Re_Category[13], ctx[3], cat)
               ? [0, [2, marks$0], rem]
               : rem;
      case 7:
       var cat$0 = match[1];
       return caml_call2(Re_Category[13], ctx[2], cat$0)
               ? [0, [2, marks$0], rem]
               : rem;
      default:
       var
        i$0 = match[1],
        _N_ = caml_call2(Re_Pmark[5][2], i$0, marks$0[2]),
        marks = [0, marks$0[1], _N_];
       return [0, [2, marks], rem];
    }
   }
   function delta_alt$0(counter, ctx, l, rem){
    if(! l) return rem;
    var r = l[2], y = l[1], _M_ = delta_alt(ctx, r, rem);
    if(counter >= 50)
     return caml_trampoline_return(delta_1$0, [0, ctx, y, _M_]);
    var counter$0 = counter + 1 | 0;
    return delta_1$0(counter$0, ctx, y, _M_);
   }
   function delta_seq$0(counter, ctx, kind, y, z, rem){
    var match = first_match(y);
    if(! match) return tseq(kind, y, z, rem);
    var marks = match[1], ctx$0 = [0, ctx[1], ctx[2], ctx[3], marks];
    if(-730718166 === kind){
     var _K_ = delta_1(ctx$0, z, rem);
     return tseq(kind, caml_call1(remove_matches, y), z, _K_);
    }
    if(332064784 <= kind){
     var match$0 = split_at_match(y), y$0 = match$0[2], y$1 = match$0[1];
     return tseq(kind, y$1, z, delta_1(ctx$0, z, tseq(kind, y$0, z, rem)));
    }
    var _L_ = tseq(kind, caml_call1(remove_matches, y), z, rem);
    if(counter >= 50)
     return caml_trampoline_return(delta_1$0, [0, ctx$0, z, _L_]);
    var counter$0 = counter + 1 | 0;
    return delta_1$0(counter$0, ctx$0, z, _L_);
   }
   function delta_1(ctx, x, rem){
    return caml_trampoline(delta_1$0(0, ctx, x, rem));
   }
   function delta_alt(ctx, l, rem){
    return caml_trampoline(delta_alt$0(0, ctx, l, rem));
   }
   function delta_seq(ctx, kind, y, z, rem){
    return caml_trampoline(delta_seq$0(0, ctx, kind, y, z, rem));
   }
   function delta_4(ctx, l, rem){
    if(! l) return rem;
    var r = l[2], y$1 = l[1], rem$0 = delta_4(ctx, r, rem);
    switch(y$1[0]){
      case 0:
       var kind = y$1[3], z = y$1[2], y = y$1[1], y$0 = delta_4(ctx, y, 0);
       return delta_seq(ctx, kind, y$0, z, rem$0);
      case 1:
       var e = y$1[2], marks = y$1[1];
       return delta_1([0, ctx[1], ctx[2], ctx[3], marks], e, rem$0);
      default: return [0, y$1, rem$0];
    }
   }
   function delta(tbl_ref, next_cat, char$0, st){
    var
     prev_cat = st[2],
     ctx = [0, char$0, prev_cat, next_cat, empty],
     expr = remove_duplicates(0, delta_4(ctx, st[3], 0), eps_expr)[1],
     idx = free_index(tbl_ref, expr),
     expr$0 = set_idx(idx, expr);
    return mk(idx, next_cat, expr$0);
   }
   function red_tr(l){
    var l$0 = l;
    for(;;){
     if(l$0){
      var match = l$0[2];
      if(match){
       var
        rem = match[2],
        tr2 = match[1],
        st2 = tr2[2],
        s2 = tr2[1],
        tr1 = l$0[1],
        st1 = tr1[2],
        s1 = tr1[1];
       if(! equal$2(st1, st2)) return [0, tr1, red_tr([0, tr2, rem])];
       var
        l$1 = [0, [0, caml_call2(Re_Cset[7], s1, s2), st1], rem],
        l$0 = l$1;
       continue;
      }
     }
     return l$0;
    }
   }
   function prepend_deriv(init){
    function _H_(param, l){
     var x = param[2], s = param[1];
     return caml_call3(Re_Cset[48], s, x, l);
    }
    var _I_ = caml_call1(Stdlib_ListLabels[27], _H_);
    return function(_J_){return caml_call2(_I_, _J_, init);};
   }
   function restrict(s, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      rem = param$0[2],
      match = param$0[1],
      x = match[2],
      s$0 = match[1],
      s$1 = caml_call2(Re_Cset[10], s, s$0);
     if(! caml_call1(Re_Cset[47], s$1))
      return [0, [0, s$1, x], restrict(s, rem)];
     var param$0 = rem;
    }
   }
   function prepend_marks_expr_lst(m, l){
    function _G_(param){
     switch(param[0]){
       case 0:
        var s = param[3], e = param[2], l = param[1];
        return [0, prepend_marks_expr_lst(m, l), e, s];
       case 1:
        var e$0 = param[2], m$0 = param[1]; return [1, merge(m, m$0), e$0];
       default: var m$1 = param[1]; return [2, merge(m, m$1)];
     }
    }
    return caml_call2(Stdlib_ListLabels[20], _G_, l);
   }
   function deriv_1$0(counter, all_chars, categories, marks, cat, x, rem$2){
    var match = x[2];
    if(typeof match === "number")
     return caml_call3(Re_Cset[48], all_chars, [0, [2, marks], 0], rem$2);
    switch(match[0]){
      case 0:
       var s = match[1];
       return caml_call3(Re_Cset[48], s, [0, [1, marks, eps_expr], 0], rem$2);
      case 1:
       var l = match[1];
       if(counter >= 50)
        return caml_trampoline_return
                (deriv_2$0, [0, all_chars, categories, marks, cat, l, rem$2]);
       var counter$0 = counter + 1 | 0;
       return deriv_2$0
               (counter$0, all_chars, categories, marks, cat, l, rem$2);
      case 2:
       var
        z = match[3],
        y = match[2],
        kind = match[1],
        y$0 =
          deriv_1
           (all_chars, categories, marks, cat, y, [0, [0, all_chars, 0], 0]);
       return deriv_seq(all_chars, categories, cat, kind, y$0, z, rem$2);
      case 3:
       var
        y$1 = match[3],
        kind$0 = match[2],
        rep_kind = match[1],
        y$2 =
          deriv_1
           (all_chars, categories, marks, cat, y$1, [0, [0, all_chars, 0], 0]),
        _B_ =
          function(param, rem){
           var z = param[2], s = param[1], match = first_match(z);
           if(match)
            var
             marks$0 = match[1],
             marks$1 = marks$0,
             z$0 = caml_call1(remove_matches, z);
           else
            var marks$1 = marks, z$0 = z;
           var
            _F_ =
              620821490 <= rep_kind
               ? [0, [2, marks], tseq(kind$0, z$0, x, 0)]
               : tseq(kind$0, z$0, x, [0, [2, marks$1], 0]);
           return caml_call3(Re_Cset[48], s, _F_, rem);
          };
       return caml_call3(Stdlib_ListLabels[27], _B_, y$2, rem$2);
      case 4:
       var i = match[1], _C_ = [0, [2, set_mark(marks, i)], 0];
       return caml_call3(Re_Cset[48], all_chars, _C_, rem$2);
      case 5:
       var
        e$1 = match[2],
        b = match[1],
        _A_ = marks[2],
        rem$1 = filter(marks, b, e$1)[1],
        e = e$1,
        rem = rem$1,
        _D_ = 0;
       for(;;){
        if(e < b)
         return caml_call3
                 (Re_Cset[48], all_chars, [0, [2, [0, rem, _A_]], _D_], rem$2);
        var
         rem$0 = [0, [0, e, -2], rem],
         e$0 = e - 1 | 0,
         e = e$0,
         rem = rem$0;
       }
       break;
      case 6:
       var
        cat$0 = match[1],
        _E_ = caml_call2(Stdlib_ListLabels[51], cat$0, categories);
       return caml_call3(Re_Cset[48], _E_, [0, [2, marks], 0], rem$2);
      case 7:
       var cat$1 = match[1];
       return caml_call2(Re_Category[13], cat, cat$1)
               ? caml_call3(Re_Cset[48], all_chars, [0, [2, marks], 0], rem$2)
               : rem$2;
      default:
       return caml_call3(Re_Cset[48], all_chars, [0, [2, marks], 0], rem$2);
    }
   }
   function deriv_2$0(counter, all_chars, categories, marks, cat, l, rem){
    if(! l) return rem;
    var
     r = l[2],
     y = l[1],
     _z_ = deriv_2(all_chars, categories, marks, cat, r, rem);
    if(counter >= 50)
     return caml_trampoline_return
             (deriv_1$0, [0, all_chars, categories, marks, cat, y, _z_]);
    var counter$0 = counter + 1 | 0;
    return deriv_1$0(counter$0, all_chars, categories, marks, cat, y, _z_);
   }
   function deriv_1(all_chars, categories, marks, cat, x, rem){
    return caml_trampoline
            (deriv_1$0(0, all_chars, categories, marks, cat, x, rem));
   }
   function deriv_2(all_chars, categories, marks, cat, l, rem){
    return caml_trampoline
            (deriv_2$0(0, all_chars, categories, marks, cat, l, rem));
   }
   function deriv_seq(all_chars, categories, cat, kind, y, z, rem){
    function _l_(param){
     var xl = param[2];
     return caml_call1(exists_tmatch, xl);
    }
    if(caml_call2(Stdlib_ListLabels[34], _l_, y)){
     var
      z$0 =
        deriv_1
         (all_chars, categories, empty, cat, z, [0, [0, all_chars, 0], 0]),
      _m_ =
        function(param, rem){
         var y = param[2], s = param[1], match = first_match(y);
         if(! match){
          var _y_ = tseq(kind, y, z, 0);
          return caml_call3(Re_Cset[48], s, _y_, rem);
         }
         var marks = match[1];
         function _p_(param){
          var x = param[2], s = param[1];
          return [0, s, prepend_marks_expr_lst(marks, x)];
         }
         var
          z$1 =
            restrict
             (s, caml_call1(caml_call1(Stdlib_ListLabels[20], _p_), z$0));
         if(-730718166 === kind){
          var
           _q_ = prepend_deriv(z$1)(rem),
           _r_ = tseq(kind, caml_call1(remove_matches, y), z, 0);
          return caml_call3(Re_Cset[48], s, _r_, _q_);
         }
         if(332064784 <= kind){
          var
           match$0 = split_at_match(y),
           y$0 = match$0[2],
           y$1 = match$0[1],
           _s_ = tseq(kind, y$0, z, 0),
           _t_ = caml_call3(Re_Cset[48], s, _s_, rem),
           _u_ = prepend_deriv(z$1)(_t_),
           _v_ = tseq(kind, y$1, z, 0);
          return caml_call3(Re_Cset[48], s, _v_, _u_);
         }
         var
          _w_ = tseq(kind, caml_call1(remove_matches, y), z, 0),
          _x_ = caml_call3(Re_Cset[48], s, _w_, rem);
         return prepend_deriv(z$1)(_x_);
        };
     return caml_call3(Stdlib_ListLabels[27], _m_, y, rem);
    }
    function _n_(param, rem){
     var xl = param[2], s = param[1], _o_ = tseq(kind, xl, z, 0);
     return caml_call3(Re_Cset[48], s, _o_, rem);
    }
    return caml_call3(Stdlib_ListLabels[27], _n_, y, rem);
   }
   function deriv_4(all_chars, categories, cat, l, rem){
    if(! l) return rem;
    var
     r = l[2],
     y$1 = l[1],
     rem$0 = deriv_4(all_chars, categories, cat, r, rem);
    switch(y$1[0]){
      case 0:
       var
        kind = y$1[3],
        z = y$1[2],
        y = y$1[1],
        y$0 =
          deriv_4(all_chars, categories, cat, y, [0, [0, all_chars, 0], 0]);
       return deriv_seq(all_chars, categories, cat, kind, y$0, z, rem$0);
      case 1:
       var e = y$1[2], marks = y$1[1];
       return deriv_1(all_chars, categories, marks, cat, e, rem$0);
      default: return caml_call3(Re_Cset[48], all_chars, [0, y$1, 0], rem$0);
    }
   }
   function deriv(tbl_ref, all_chars, categories, st){
    var
     der =
       deriv_4(all_chars, categories, st[2], st[3], [0, [0, all_chars, 0], 0]),
     _g_ = 0;
    function _h_(param, rem){
     var
      expr = param[2],
      s = param[1],
      expr$0 = remove_duplicates(0, expr, eps_expr)[1],
      idx = free_index(tbl_ref, expr$0),
      expr$1 = set_idx(idx, expr$0);
     function _k_(param, rem){
      var
       s$0 = param[2],
       cat = param[1],
       s$1 = caml_call2(Re_Cset[10], s, s$0);
      return caml_call1(Re_Cset[47], s$1)
              ? rem
              : [0, [0, s$1, mk(idx, cat, expr$1)], rem];
     }
     return caml_call3(Stdlib_ListLabels[27], _k_, categories, rem);
    }
    var l = caml_call3(Stdlib_ListLabels[27], _h_, der, _g_);
    function _d_(param, _j_){
     var
      st2 = _j_[2],
      st1 = param[2],
      c = runtime.caml_int_compare(st1[5], st2[5]);
     if(0 !== c) return c;
     var c$0 = caml_call2(Re_Category[12], st1[2], st2[2]);
     return 0 === c$0 ? caml_compare(st1[3], st2[3]) : c$0;
    }
    var _e_ = red_tr(caml_call2(Stdlib_ListLabels[59], _d_, l));
    function _f_(param, _i_){
     var s2 = _i_[1], s1 = param[1];
     return caml_compare(s1, s2);
    }
    return caml_call2(Stdlib_ListLabels[59], _f_, _e_);
   }
   var
    Re_Automata =
      [0,
       Mark,
       [0, pp],
       Rep_kind,
       is_eps,
       pp$1,
       [0, create],
       cst,
       empty$0,
       alt,
       seq,
       eps,
       rep,
       mark,
       pmark,
       erase,
       before,
       after,
       rename,
       [0, dummy, create$0, idx, status, Table],
       [0, create$1, index_count],
       delta,
       deriv];
   runtime.caml_register_global(40, Re_Automata, "Re__Automata");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Color_map
//# unitInfo: Requires: Re__Cset, Stdlib__Bytes, Stdlib__Char
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Cset = global_data.Re__Cset,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function repr(t, color){
    return caml_string_get(t, caml_call1(Re_Cset[1], color));
   }
   var length = runtime.caml_ml_string_length, Repr = [0, repr, length];
   function get_char(t, c){
    return caml_string_get(t, caml_call1(Re_Cset[1], c));
   }
   function get(t, c){
    var _g_ = caml_string_get(t, c);
    return caml_call1(Re_Cset[2], _g_);
   }
   function translate_colors(cm, cset){
    function _e_(param, l){
     var
      j = param[2],
      i = param[1],
      start = get_char(cm, i),
      stop = get_char(cm, j),
      _f_ = caml_call2(Re_Cset[25], start, stop);
     return caml_call2(Re_Cset[7], _f_, l);
    }
    return caml_call3(Re_Cset[42], cset, Re_Cset[13], _e_);
   }
   var Table = [0, get_char, get, translate_colors];
   function make(param){return caml_call2(Stdlib_Bytes[1], 257, 0);}
   function flatten(cm){
    var
     c = caml_create_bytes(256),
     color_repr = caml_create_bytes(256),
     v = [0, 0];
    caml_bytes_set(c, 0, 0);
    caml_bytes_set(color_repr, 0, 0);
    var i = 1;
    for(;;){
     if(0 !== runtime.caml_bytes_get(cm, i)) v[1]++;
     caml_bytes_set(c, i, caml_call1(Stdlib_Char[1], v[1]));
     var _c_ = caml_call1(Stdlib_Char[1], i);
     caml_bytes_set(color_repr, v[1], _c_);
     var _d_ = i + 1 | 0;
     if(255 === i){
      var _b_ = caml_call3(Stdlib_Bytes[8], color_repr, 0, v[1] + 1 | 0);
      return [0, caml_call1(Stdlib_Bytes[44], c), _b_];
     }
     var i = _d_;
    }
   }
   function split(t, set){
    function _a_(i, j){
     caml_bytes_set(t, caml_call1(Re_Cset[1], i), 1);
     return caml_bytes_set(t, caml_call1(Re_Cset[1], j) + 1 | 0, 1);
    }
    return caml_call2(Re_Cset[6], set, _a_);
   }
   var Re_Color_map = [0, Repr, Table, make, flatten, split];
   runtime.caml_register_global(3, Re_Color_map, "Re__Color_map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Ast
//# unitInfo: Requires: Re__Automata, Re__Color_map, Re__Cset, Re__Fmt, Re__Import, Re__Pmark, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Int, Stdlib__ListLabels, Stdlib__Option, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Re_repn$1 = "Re.repn",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    s = "Sequence",
    cst = cst$1,
    cst$0 = cst$1,
    empty_alternative = [0, 0],
    Re_Fmt = global_data.Re__Fmt,
    Stdlib_Format = global_data.Stdlib__Format,
    Re_Pmark = global_data.Re__Pmark,
    Re_Automata = global_data.Re__Automata,
    Re_Cset = global_data.Re__Cset,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Option = global_data.Stdlib__Option,
    Re_Import = global_data.Re__Import,
    Stdlib = global_data.Stdlib,
    Re_Color_map = global_data.Re__Color_map,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    _a_ = [0, [15, [17, [0, "@ ", 1, 0], [4, 0, 0, 0, [15, 0]]]], "%a@ %d%a"],
    cst_Beg_of_line = "Beg_of_line",
    cst_End_of_line = "End_of_line",
    cst_Beg_of_word = "Beg_of_word",
    cst_End_of_word = "End_of_word",
    cst_Not_bound = "Not_bound",
    cst_Beg_of_str = "Beg_of_str",
    cst_End_of_str = "End_of_str",
    cst_Last_end_of_line = "Last_end_of_line",
    cst_Start = "Start",
    cst_Stop = "Stop",
    cst_Repeat = "Repeat",
    cst_Named_group = "Named_group",
    cst_Group = "Group",
    cst_No_group = "No_group",
    cst_Nest = "Nest",
    cst_Pmark = "Pmark",
    cst_Sem = "Sem",
    cst_Sem_greedy = "Sem_greedy",
    cst_Set = "Set",
    cst_Intersection = "Intersection",
    cst_Complement = "Complement",
    cst_Difference = "Difference",
    _i_ = [0, "lib/ast.ml", 298, 32],
    cst_Re_diff = "Re.diff",
    cst_Re_compl = "Re.compl",
    cst_Re_inter = "Re.inter",
    _b_ = [0, 1],
    cst_Re_repn = cst_Re_repn$1,
    cst_Re_repn$0 = cst_Re_repn$1,
    cst_Alternative = "Alternative",
    cst_No_case = "No_case",
    cst_Case = "Case";
   function pp_ast(f, fmt, ast){
    function var$0(s, re){return caml_call4(Re_Fmt[2], fmt, s, f, re);}
    switch(ast[0]){
      case 0:
       var alt = ast[1], _ap_ = caml_call2(Re_Fmt[8], 0, f);
       return caml_call4(Re_Fmt[2], fmt, cst_Alternative, _ap_, alt);
      case 1:
       var c = ast[1]; return var$0(cst_No_case, c);
      default: var c$0 = ast[1]; return var$0(cst_Case, c$0);
    }
   }
   function pp_gen(pp_cset, fmt, t){
    function pp(_an_, _ao_){return pp_gen(pp_cset, _an_, _ao_);}
    function var$0(s, re){return caml_call4(Re_Fmt[2], fmt, s, pp, re);}
    if(typeof t === "number")
     switch(t){
       case 0:
        return caml_call2(Re_Fmt[3], fmt, cst_Beg_of_line);
       case 1:
        return caml_call2(Re_Fmt[3], fmt, cst_End_of_line);
       case 2:
        return caml_call2(Re_Fmt[3], fmt, cst_Beg_of_word);
       case 3:
        return caml_call2(Re_Fmt[3], fmt, cst_End_of_word);
       case 4:
        return caml_call2(Re_Fmt[3], fmt, cst_Not_bound);
       case 5:
        return caml_call2(Re_Fmt[3], fmt, cst_Beg_of_str);
       case 6:
        return caml_call2(Re_Fmt[3], fmt, cst_End_of_str);
       case 7:
        return caml_call2(Re_Fmt[3], fmt, cst_Last_end_of_line);
       case 8:
        return caml_call2(Re_Fmt[3], fmt, cst_Start);
       default: return caml_call2(Re_Fmt[3], fmt, cst_Stop);
     }
    switch(t[0]){
      case 0:
       var cset = t[1]; return caml_call2(pp_cset, fmt, cset);
      case 1:
       var a = t[1]; return pp_ast(pp, fmt, a);
      case 2:
       var rel = t[1], _ai_ = caml_call2(Re_Fmt[8], 0, pp);
       return caml_call4(Re_Fmt[2], fmt, s, _ai_, rel);
      case 3:
       var
        stop = t[3],
        start = t[2],
        re = t[1],
        pp$0 =
          function(fmt, param){
           return caml_call7
                   (Stdlib_Format[137],
                    fmt,
                    _a_,
                    pp,
                    re,
                    start,
                    Re_Fmt[4],
                    stop);
          };
       return caml_call4(Re_Fmt[2], fmt, cst_Repeat, pp$0, 0);
      case 4:
       var match = t[1];
       if(match){
        var
         c = t[2],
         n = match[1],
         _aj_ = caml_call2(Re_Fmt[6], Re_Fmt[3], pp);
        return caml_call4(Re_Fmt[2], fmt, cst_Named_group, _aj_, [0, n, c]);
       }
       var c$0 = t[2];
       return var$0(cst_Group, c$0);
      case 5:
       var c$1 = t[1]; return var$0(cst_No_group, c$1);
      case 6:
       var c$2 = t[1]; return var$0(cst_Nest, c$2);
      case 7:
       var r = t[2], m = t[1], _ak_ = caml_call2(Re_Fmt[6], Re_Pmark[4], pp);
       return caml_call4(Re_Fmt[2], fmt, cst_Pmark, _ak_, [0, m, r]);
      case 8:
       var
        a$0 = t[2],
        sem = t[1],
        _al_ = caml_call2(Re_Fmt[6], Re_Automata[2][1], pp);
       return caml_call4(Re_Fmt[2], fmt, cst_Sem, _al_, [0, sem, a$0]);
      default:
       var
        re$0 = t[2],
        k = t[1],
        _am_ = caml_call2(Re_Fmt[6], Re_Automata[3][1], pp);
       return caml_call4(Re_Fmt[2], fmt, cst_Sem_greedy, _am_, [0, k, re$0]);
    }
   }
   function pp_cset(fmt, cset){
    function seq(s, rel){
     var _ah_ = caml_call2(Re_Fmt[8], 0, pp_cset);
     return caml_call4(Re_Fmt[2], fmt, s, _ah_, rel);
    }
    switch(cset[0]){
      case 0:
       var s = cset[1];
       return caml_call4(Re_Fmt[2], fmt, cst_Set, Re_Cset[40], s);
      case 1:
       var c = cset[1]; return seq(cst_Intersection, c);
      case 2:
       var c$0 = cset[1]; return seq(cst_Complement, c$0);
      case 3:
       var
        b = cset[2],
        a = cset[1],
        _ag_ = caml_call2(Re_Fmt[6], pp_cset, pp_cset);
       return caml_call4(Re_Fmt[2], fmt, cst_Difference, _ag_, [0, a, b]);
      default: var s$0 = cset[1]; return pp_ast(pp_cset, fmt, s$0);
    }
   }
   function equal(cset, x1, x2){
    var x1$0 = x1, x2$0 = x2;
    for(;;){
     a:
     {
      if(typeof x1$0 === "number"){
       switch(x1$0){
         case 0:
          if(typeof x2$0 !== "number" || x2$0) break a; break;
         case 1:
          if(typeof x2$0 !== "number" || 1 !== x2$0) break a; break;
         case 2:
          if(typeof x2$0 !== "number" || 2 !== x2$0) break a; break;
         case 3:
          if(typeof x2$0 !== "number" || 3 !== x2$0) break a; break;
         case 4:
          if(typeof x2$0 !== "number" || 4 !== x2$0) break a; break;
         case 5:
          if(typeof x2$0 !== "number" || 5 !== x2$0) break a; break;
         case 6:
          if(typeof x2$0 !== "number" || 6 !== x2$0) break a; break;
         case 7:
          if(typeof x2$0 !== "number" || 7 !== x2$0) break a; break;
         case 8:
          if(typeof x2$0 !== "number" || 8 !== x2$0) break a; break;
         default: if(typeof x2$0 !== "number" || 9 > x2$0) break a;
       }
       return 1;
      }
      switch(x1$0[0]){
        case 0:
         if(typeof x2$0 !== "number" && 0 === x2$0[0]){
          var s2 = x2$0[1], s1 = x1$0[1];
          return caml_call2(cset, s1, s2);
         }
         break;
        case 1:
         if(typeof x2$0 !== "number" && 1 === x2$0[0]){
          var
           y = x2$0[1],
           x = x1$0[1],
           eq = function(_ae_, _af_){return equal(cset, _ae_, _af_);},
           b = y[1],
           a = x[1];
          return caml_call3(Stdlib_ListLabels[16], eq, a, b);
         }
         break;
        case 2:
         if(typeof x2$0 !== "number" && 2 === x2$0[0]){
          var
           l2 = x2$0[1],
           l1 = x1$0[1],
           _X_ = function(_ac_, _ad_){return equal(cset, _ac_, _ad_);};
          return caml_call3(Stdlib_ListLabels[16], _X_, l1, l2);
         }
         break;
        case 3:
         if(typeof x2$0 !== "number" && 3 === x2$0[0]){
          var
           j2 = x2$0[3],
           i2 = x2$0[2],
           x2$1 = x2$0[1],
           j1 = x1$0[3],
           i1 = x1$0[2],
           x1$1 = x1$0[1],
           _Y_ = caml_call2(Stdlib_Int[8], i1, i2);
          if(_Y_){
           var _Z_ = caml_call3(Stdlib_Option[12], Stdlib_Int[8], j1, j2);
           if(_Z_){var x1$0 = x1$1, x2$0 = x2$1; continue;}
           var ___ = _Z_;
          }
          else
           var ___ = _Y_;
          return ___;
         }
         break;
        case 4:
         if(typeof x2$0 !== "number" && 4 === x2$0[0]) return 0; break;
        case 6:
         if(typeof x2$0 !== "number" && 6 === x2$0[0]){
          var x2$2 = x2$0[1], x1$2 = x1$0[1], x1$0 = x1$2, x2$0 = x2$2;
          continue;
         }
         break;
        case 7:
         if(typeof x2$0 !== "number" && 7 === x2$0[0]){
          var
           r2 = x2$0[2],
           m2 = x2$0[1],
           r1 = x1$0[2],
           m1 = x1$0[1],
           _$_ = caml_call2(Re_Pmark[1], m1, m2);
          if(! _$_) return _$_;
          var x1$0 = r1, x2$0 = r2;
          continue;
         }
         break;
        case 8:
         if(typeof x2$0 !== "number" && 8 === x2$0[0]){
          var
           x2$3 = x2$0[2],
           sem = x2$0[1],
           x1$3 = x1$0[2],
           sem$0 = x1$0[1],
           _aa_ = caml_call2(Re_Import[1][1], sem$0, sem);
          if(! _aa_) return _aa_;
          var x1$0 = x1$3, x2$0 = x2$3;
          continue;
         }
         break;
        case 9:
         if(typeof x2$0 !== "number" && 9 === x2$0[0]){
          var
           x2$4 = x2$0[2],
           rep = x2$0[1],
           x1$4 = x1$0[2],
           rep$0 = x1$0[1],
           _ab_ = caml_call2(Re_Import[1][1], rep$0, rep);
          if(! _ab_) return _ab_;
          var x1$0 = x1$4, x2$0 = x2$4;
          continue;
         }
         break;
      }
     }
     return 0;
    }
   }
   function pp(_V_, _W_){return pp_gen(pp_cset, _V_, _W_);}
   function cset(cset){return [0, [0, cset]];}
   function handle_case_cset(ign_case, param){
    var ign_case$0 = ign_case, param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var s = param$0[1];
        return ign_case$0 ? caml_call1(Re_Cset[18], s) : s;
       case 1:
        var
         l = param$0[1],
         _I_ = function(_U_){return handle_case_cset(ign_case$0, _U_);},
         _J_ = caml_call2(Stdlib_ListLabels[20], _I_, l);
        return caml_call1(Re_Cset[9], _J_);
       case 2:
        var
         l$0 = param$0[1],
         _K_ = function(_T_){return handle_case_cset(ign_case$0, _T_);},
         _L_ = caml_call2(Stdlib_ListLabels[20], _K_, l$0),
         _M_ = caml_call1(Re_Cset[8], _L_);
        return caml_call1(caml_call1(Re_Cset[11], Re_Cset[45]), _M_);
       case 3:
        var
         r = param$0[2],
         r$0 = param$0[1],
         _N_ = handle_case_cset(ign_case$0, r),
         _O_ = caml_call2(Re_Cset[11], Re_Cset[45], _N_),
         _P_ = handle_case_cset(ign_case$0, r$0);
        return caml_call2(Re_Cset[10], _P_, _O_);
       default:
        var match = param$0[1];
        switch(match[0]){
          case 0:
           var
            l$1 = match[1],
            _Q_ = function(_S_){return handle_case_cset(ign_case$0, _S_);},
            _R_ = caml_call2(Stdlib_ListLabels[20], _Q_, l$1);
           return caml_call1(Re_Cset[8], _R_);
          case 1:
           var a = match[1], ign_case$0 = 1, param$0 = a; break;
          default: var a$0 = match[1], ign_case$0 = 0, param$0 = a$0;
        }
     }
   }
   function handle_case(ign_case, r){
    var ign_case$0 = ign_case, r$0 = r;
    for(;;){
     if(typeof r$0 === "number") return r$0;
     switch(r$0[0]){
       case 0:
        var s = r$0[1]; return [0, handle_case_cset(ign_case$0, s)];
       case 1:
        var match = r$0[1];
        switch(match[0]){
          case 0:
           var
            l = match[1],
            _E_ = function(_H_){return handle_case(ign_case$0, _H_);},
            l$0 = caml_call2(Stdlib_ListLabels[20], _E_, l);
           return [1, [0, l$0]];
          case 1:
           var r$1 = match[1], ign_case$0 = 1, r$0 = r$1; break;
          default: var r$2 = match[1], ign_case$0 = 0, r$0 = r$2;
        }
        break;
       case 2:
        var
         l$1 = r$0[1],
         _F_ = function(_G_){return handle_case(ign_case$0, _G_);};
        return [2, caml_call2(Stdlib_ListLabels[20], _F_, l$1)];
       case 3:
        var j = r$0[3], i = r$0[2], r$3 = r$0[1];
        return [3, handle_case(ign_case$0, r$3), i, j];
       case 4:
        var r$4 = r$0[2], n = r$0[1];
        return [4, n, handle_case(ign_case$0, r$4)];
       case 5:
        var r$5 = r$0[1]; return [5, handle_case(ign_case$0, r$5)];
       case 6:
        var r$6 = r$0[1]; return [6, handle_case(ign_case$0, r$6)];
       case 7:
        var r$7 = r$0[2], i$0 = r$0[1];
        return [7, i$0, handle_case(ign_case$0, r$7)];
       case 8:
        var r$8 = r$0[2], k = r$0[1];
        return [8, k, handle_case(ign_case$0, r$8)];
       default:
        var r$9 = r$0[2], k$0 = r$0[1];
        return [9, k$0, handle_case(ign_case$0, r$9)];
     }
    }
   }
   function seq(l){if(l && ! l[2]){var r = l[1]; return r;} return [2, l];}
   function str(s){
    var l = [0, 0], _A_ = caml_ml_string_length(s) - 1 | 0;
    if(_A_ >= 0){
     var i = _A_;
     for(;;){
      var _B_ = l[1], _C_ = runtime.caml_string_get(s, i);
      l[1] = [0, [0, [0, caml_call1(Re_Cset[46], _C_)]], _B_];
      var _D_ = i - 1 | 0;
      if(0 === i) break;
      var i = _D_;
     }
    }
    return seq(l[1]);
   }
   function as_set_elems(elems){
    try{
     var
      _y_ =
        function(param){
         if(typeof param !== "number" && 0 === param[0]){var e = param[1]; return e;}
         throw Stdlib[3];
        },
      e = caml_call2(Stdlib_ListLabels[20], _y_, elems);
    }
    catch(_z_){
     var _x_ = caml_wrap_exception(_z_);
     if(_x_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_x_, 0);
    }
    return [0, e];
   }
   var empty = [1, empty_alternative];
   function alt(elems){
    if(! elems) return empty;
    if(! elems[2]){var x = elems[1]; return x;}
    var match = as_set_elems(elems);
    if(! match) return [1, [0, elems]];
    var elems$0 = match[1];
    return [0, [4, [0, elems$0]]];
   }
   var epsilon = seq(0);
   function repn(r, i, j){
    if(i < 0) caml_call1(Stdlib[1], cst_Re_repn);
    if(j){
     var j$0 = j[1];
     if(j$0 < i) return caml_call1(Stdlib[1], cst_Re_repn$0);
     if(0 === j$0){
      if(0 === i) return epsilon;
     }
     else if(1 === j$0 && 1 === i) return r;
    }
    return [3, r, i, j];
   }
   function rep(r){return repn(r, 0, 0);}
   function rep1(r){return repn(r, 1, 0);}
   function opt(r){return repn(r, 0, _b_);}
   var bol = 0, eol = 1, bow = 2, eow = 3;
   function word(r){return seq([0, bow, [0, r, [0, eow, 0]]]);}
   var not_boundary = 4, bos = 5, eos = 6;
   function whole_string(r){return seq([0, bos, [0, r, [0, eos, 0]]]);}
   var leol = 7, start = 8, stop = 9;
   function make_set(f, t){
    if(typeof t !== "number" && 0 === t[0]){
     var x = t[1];
     return [0, [4, caml_call1(f[1], x)]];
    }
    return [1, caml_call1(f[1], t)];
   }
   function preserve_set(f, t){
    if(typeof t !== "number" && 0 === t[0]) return t;
    return caml_call1(f, t);
   }
   function _c_(t){return [8, -730718166, t];}
   function longest(_w_){return preserve_set(_c_, _w_);}
   function _d_(t){return [8, -1034406550, t];}
   function shortest(_v_){return preserve_set(_d_, _v_);}
   function _e_(t){return [8, 332064784, t];}
   function first(_u_){return preserve_set(_e_, _u_);}
   function _f_(t){return [9, -904640576, t];}
   function greedy(_t_){return preserve_set(_f_, _t_);}
   function _g_(t){return [9, 620821490, t];}
   function non_greedy(_s_){return preserve_set(_g_, _s_);}
   function group(name, r){return [4, name, r];}
   function _h_(t){return [5, t];}
   function no_group(_r_){return preserve_set(_h_, _r_);}
   function nest(r){return [6, r];}
   function set(str){return cset(caml_call1(Re_Cset[26], str));}
   function mark(r){
    var i = caml_call1(Re_Pmark[3], 0);
    return [0, i, [7, i, r]];
   }
   function as_set_or_error(name, elems){
    var match = as_set_elems(elems);
    if(! match) return caml_call1(Stdlib[1], name);
    var s = match[1];
    return s;
   }
   function inter(elems){
    return [0, [1, as_set_or_error(cst_Re_inter, elems)]];
   }
   function compl(elems){
    return [0, [2, as_set_or_error(cst_Re_compl, elems)]];
   }
   function diff(r$0, r){
    if
     (typeof r$0 !== "number"
      && 0 === r$0[0] && typeof r !== "number" && 0 === r[0]){
     var r$1 = r[1], r$2 = r$0[1];
     return [0, [3, r$2, r$1]];
    }
    return caml_call1(Stdlib[1], cst_Re_diff);
   }
   var f = [0, function(r){return [2, r];}];
   function case$0(t){return make_set(f, t);}
   var f$0 = [0, function(r){return [1, r];}];
   function no_case(t){return make_set(f$0, t);}
   function witness(t){
    function witness(t){
     var t$0 = t;
     for(;;){
      if(typeof t$0 === "number") return cst;
      switch(t$0[0]){
        case 0:
         var
          c = t$0[1],
          _m_ = caml_call1(Re_Cset[49], c),
          _n_ = caml_call1(Re_Cset[3], _m_);
         return caml_call2(Stdlib_String[1], 1, _n_);
        case 1:
         var match = t$0[1][1];
         if(! match)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
         var x = match[1], t$0 = x;
         continue;
        case 2:
         var
          xs = t$0[1],
          _o_ = caml_call2(Stdlib_ListLabels[20], witness, xs);
         return caml_call2(Stdlib_String[7], cst$0, _o_);
        case 3:
         var
          from = t$0[2],
          r = t$0[1],
          w = witness(r),
          b =
            caml_call1
             (Stdlib_Buffer[1],
              runtime.caml_mul(caml_ml_string_length(w), from)),
          _p_ = 1;
         if(from >= 1){
          var i = _p_;
          for(;;){
           caml_call2(Stdlib_Buffer[16], b, w);
           var _q_ = i + 1 | 0;
           if(from === i) break;
           var i = _q_;
          }
         }
         return caml_call1(Stdlib_Buffer[2], b);
        case 5:
         var r$1 = t$0[1], t$0 = r$1; continue;
        case 6:
         var r$0 = t$0[1]; break;
        default: var r$0 = t$0[2];
      }
      var t$0 = r$0;
     }
    }
    return witness(handle_case(0, t));
   }
   function merge_sequences(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var x = param$0[1];
     if(typeof x !== "number")
      switch(x[0]){
        case 1:
         var match = x[1];
         if(0 === match[0]){
          var
           r$0 = param$0[2],
           l = match[1],
           param$0 = caml_call2(Stdlib[37], l, r$0);
          continue;
         }
         break;
        case 2:
         var match$0 = x[1];
         if(match$0){
          var
           r$1 = param$0[2],
           y = match$0[2],
           x$0 = match$0[1],
           r$2 = merge_sequences(r$1);
          a:
          if(r$2){
           var _k_ = r$2[1];
           if(typeof _k_ !== "number" && 2 === _k_[0]){
            var match$1 = _k_[1];
            if(! match$1) break a;
            var r$3 = r$2[2], y$0 = match$1[2], x$1 = match$1[1];
            if(! equal(Re_Cset[5], x$0, x$1)) break a;
            var _l_ = [0, seq(y$0), 0];
            return [0, [2, [0, x$0, [0, [1, [0, [0, seq(y), _l_]]], 0]]], r$3];
           }
          }
          return [0, [2, [0, x$0, y]], r$2];
         }
         break;
      }
     var r = param$0[2];
     return [0, x, merge_sequences(r)];
    }
   }
   function colorize(color_map, regexp){
    var lnl = [0, 0];
    function colorize(regexp){
     var regexp$0 = regexp;
     for(;;){
      if(typeof regexp$0 === "number")
       switch(regexp$0){
         case 7:
          lnl[1] = 1; return 0;
         case 0:
         case 1:
          return caml_call2(Re_Color_map[5], color_map, Re_Cset[24]);
         case 2:
         case 3:
         case 4:
          return caml_call2(Re_Color_map[5], color_map, Re_Cset[21]);
         default: return 0;
       }
      switch(regexp$0[0]){
        case 0:
         var s = regexp$0[1];
         return caml_call2(Re_Color_map[5], color_map, s);
        case 1:
         var l = regexp$0[1][1];
         return caml_call2(Stdlib_ListLabels[18], colorize, l);
        case 2:
         var l$0 = regexp$0[1];
         return caml_call2(Stdlib_ListLabels[18], colorize, l$0);
        case 3:
         var regexp$1 = regexp$0[1], regexp$0 = regexp$1; continue;
        case 4:
        case 7:
         var regexp$2 = regexp$0[2]; break;
        case 5:
        case 6:
         var regexp$2 = regexp$0[1]; break;
        default: var regexp$3 = regexp$0[2], regexp$0 = regexp$3; continue;
      }
      var regexp$0 = regexp$2;
     }
    }
    colorize(regexp);
    return lnl[1];
   }
   function anchored(param){
    var param$0 = param;
    for(;;){
     a:
     {
      if(typeof param$0 !== "number"){
       switch(param$0[0]){
         case 1:
          var a = param$0[1];
          if(0 === a[0]){
           var als = a[1];
           return caml_call2(Stdlib_ListLabels[33], anchored, als);
          }
          var r = a[1], param$0 = r;
          continue;
         case 2:
          var l = param$0[1];
          return caml_call2(Stdlib_ListLabels[34], anchored, l);
         case 3:
          var i = param$0[2], r$0 = param$0[1], _j_ = 0 < i ? 1 : 0;
          if(! _j_) return _j_;
          var param$0 = r$0;
          continue;
         case 0:
          break a;
         case 5:
         case 6:
          var r$1 = param$0[1]; break;
         default: var r$1 = param$0[2];
       }
       var param$0 = r$1;
       continue;
      }
      switch(param$0){case 5:case 8: return 1;
      }
     }
     return 0;
    }
   }
   function t_of_cset(x){return [0, x];}
   var
    Re_Ast =
      [0,
       pp,
       merge_sequences,
       handle_case,
       anchored,
       colorize,
       [0,
        empty,
        epsilon,
        str,
        no_case,
        case$0,
        diff,
        compl,
        repn,
        inter,
        set,
        mark,
        nest,
        no_group,
        whole_string,
        leol,
        longest,
        greedy,
        non_greedy,
        stop,
        not_boundary,
        group,
        word,
        first,
        bos,
        bow,
        eow,
        eos,
        bol,
        start,
        eol,
        opt,
        rep,
        rep1,
        alt,
        shortest,
        seq,
        pp,
        witness],
       cset,
       t_of_cset];
   runtime.caml_register_global(51, Re_Ast, "Re__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__View
//# unitInfo: Requires: Re__Ast, Stdlib__ListLabels
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Ast = global_data.Re__Ast,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels;
   function view_ast(f, t){
    switch(t[0]){
      case 0:
       var a = t[1]; return [2, caml_call2(Stdlib_ListLabels[20], f, a)];
      case 1:
       var a$0 = t[1]; return [10, caml_call1(f, a$0)];
      default: var a$1 = t[1]; return [9, caml_call1(f, a$1)];
    }
   }
   function view(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 2;
       case 3:
        return 3;
       case 4:
        return 4;
       case 5:
        return 5;
       case 6:
        return 6;
       case 7:
        return 7;
       case 8:
        return 8;
       default: return 9;
     }
    switch(param[0]){
      case 0:
       var cset = param[1];
       switch(cset[0]){
         case 0:
          var set = cset[1]; return [0, set];
         case 1:
          var sets = cset[1];
          return [11, caml_call2(Stdlib_ListLabels[20], Re_Ast[8], sets)];
         case 2:
          var sets$0 = cset[1];
          return [12, caml_call2(Stdlib_ListLabels[20], Re_Ast[8], sets$0)];
         case 3:
          var y = cset[2], x = cset[1], _a_ = caml_call1(Re_Ast[8], y);
          return [13, caml_call1(Re_Ast[8], x), _a_];
         default: var ast = cset[1]; return view_ast(Re_Ast[8], ast);
       }
      case 1:
       var s = param[1]; return view_ast(function(x){return x;}, s);
      case 2:
       var s$0 = param[1]; return [1, s$0];
      case 3:
       var y$0 = param[3], x$0 = param[2], t = param[1];
       return [3, t, x$0, y$0];
      case 4:
       var t$0 = param[2], name = param[1]; return [6, name, t$0];
      case 5:
       var a = param[1]; return [7, a];
      case 6:
       var t$1 = param[1]; return [8, t$1];
      case 7:
       var t$2 = param[2], pmark = param[1]; return [14, pmark, t$2];
      case 8:
       var a$0 = param[2], sem = param[1]; return [4, sem, a$0];
      default: var a$1 = param[2], sem$0 = param[1]; return [5, sem$0, a$1];
    }
   }
   var Re_View = [0, view];
   runtime.caml_register_global(2, Re_View, "Re__View");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Group
//# unitInfo: Requires: Re__Fmt, Re__Mark_infos, Stdlib, Stdlib__Array, Stdlib__Format, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    dummy_offset = [0, -1, -1],
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Array = global_data.Stdlib__Array,
    Re_Fmt = global_data.Re__Fmt,
    Stdlib_String = global_data.Stdlib__String,
    Re_Mark_infos = global_data.Re__Mark_infos,
    Stdlib = global_data.Stdlib,
    _a_ =
      [0,
       [18,
        [1, [0, 0, cst]],
        [12,
         40,
         [2,
          0,
          [11,
           " (",
           [4, 0, 0, 0, [12, 32, [4, 0, 0, 0, [11, "))", [17, 0, 0]]]]]]]]],
       "@[(%s (%d %d))@]"],
    cst_Group = "Group";
   function offset(t, i){
    var match = caml_call2(Re_Mark_infos[2], t[2], i);
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var
     match$0 = match[1],
     stop = match$0[2],
     start = match$0[1],
     _i_ = caml_check_bound(t[4], stop)[1 + stop];
    return [0, caml_check_bound(t[4], start)[1 + start], _i_];
   }
   function get(t, i){
    var match = offset(t, i), p2 = match[2], p1 = match[1];
    return caml_call3(Stdlib_String[16], t[1], p1, p2 - p1 | 0);
   }
   function start(subs, i){return offset(subs, i)[1];}
   function stop(subs, i){return offset(subs, i)[2];}
   function test(t, i){return caml_call2(Re_Mark_infos[3], t[2], i);}
   function get_opt(t, i){return test(t, i) ? [0, get(t, i)] : 0;}
   function all_offset(t){
    var res = caml_make_vect(t[5], dummy_offset);
    function _h_(i, start, stop){
     var
      p1 = caml_check_bound(t[4], start)[1 + start],
      p2 = caml_check_bound(t[4], stop)[1 + stop];
     caml_check_bound(res, i)[1 + i] = [0, p1, p2];
     return 0;
    }
    caml_call2(Re_Mark_infos[4], t[2], _h_);
    return res;
   }
   function all(t){
    var res = caml_make_vect(t[5], cst);
    function _f_(i, start, stop){
     var
      p1 = caml_check_bound(t[4], start)[1 + start],
      p2 = caml_check_bound(t[4], stop)[1 + stop],
      _g_ = caml_call3(Stdlib_String[16], t[1], p1, p2 - p1 | 0);
     caml_check_bound(res, i)[1 + i] = _g_;
     return 0;
    }
    caml_call2(Re_Mark_infos[4], t[2], _f_);
    return res;
   }
   function pp(fmt, t){
    var offsets = all_offset(t), strs = all(t);
    function _b_(i){
     var _e_ = caml_check_bound(offsets, i)[1 + i];
     return [0, caml_check_bound(strs, i)[1 + i], _e_];
    }
    var
     _c_ = caml_call2(Stdlib_Array[1], strs.length - 1, _b_),
     matches = caml_call1(Stdlib_Array[9], _c_);
    function pp_match(fmt, param){
     var match = param[2], stop = match[2], start = match[1], str = param[1];
     return caml_call5(Stdlib_Format[137], fmt, _a_, str, start, stop);
    }
    var _d_ = caml_call2(Re_Fmt[8], 0, pp_match);
    return caml_call4(Re_Fmt[2], fmt, cst_Group, _d_, matches);
   }
   function nb_groups(t){return t[5];}
   var
    Re_Group =
      [0,
       get,
       get_opt,
       offset,
       start,
       stop,
       all,
       all_offset,
       test,
       nb_groups,
       pp];
   runtime.caml_register_global(10, Re_Group, "Re__Group");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Compile
//# unitInfo: Requires: Re__Ast, Re__Automata, Re__Category, Re__Color_map, Re__Cset, Re__Import, Stdlib, Stdlib__Array, Stdlib__Char, Stdlib__Int, Stdlib__ListLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Int = global_data.Stdlib__Int,
    Re_Import = global_data.Re__Import,
    Re_Cset = global_data.Re__Cset,
    Re_Color_map = global_data.Re__Color_map,
    Stdlib_Char = global_data.Stdlib__Char,
    Re_Automata = global_data.Re__Automata,
    Re_Category = global_data.Re__Category,
    Re_Ast = global_data.Re__Ast,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    _a_ = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   function iter(n, f, v){
    var n$0 = n, v$0 = v;
    for(;;){
     if(caml_call2(Stdlib_Int[8], n$0, 0)) return v$0;
     var v$1 = caml_call1(f, v$0), n$1 = n$0 - 1 | 0, n$0 = n$1, v$0 = v$1;
    }
   }
   var unknown = -2, break$0 = -3;
   function follow_transition(param, color){
    return param[1 + (1 + caml_call1(Re_Cset[1], color) | 0)];
   }
   function set_transition(param, color, st){
    var _ax_ = 1 + caml_call1(Re_Cset[1], color) | 0;
    caml_check_bound(param, _ax_)[1 + _ax_] = st;
    return;
   }
   var unknown_state = [0, [0, unknown, 0, 0, Re_Automata[19][1]]];
   function pp_re(ch, re){return caml_call2(Re_Automata[5], ch, re[1]);}
   function group_count(re){return re[10];}
   function group_names(re){return re[9];}
   function category(re, color){
    var _ar_ = caml_call1(Re_Cset[1], color);
    if(caml_call2(Re_Import[2], _ar_, -1)) return Re_Category[4];
    var _as_ = re[6], _at_ = caml_call1(Re_Cset[1], color);
    if(caml_call2(Re_Import[2], _at_, _as_)){
     var
      _au_ = Re_Category[6],
      _av_ = caml_call2(Re_Category[1], Re_Category[8], Re_Category[7]);
     return caml_call2(Re_Category[1], _av_, _au_);
    }
    var _aw_ = caml_call2(Re_Color_map[1][1], re[4], color);
    return caml_call1(Re_Category[2], _aw_);
   }
   function find_state(re, desc){
    try{
     var _ap_ = caml_call2(Re_Automata[19][5][7], re[8], desc);
     return _ap_;
    }
    catch(_aq_){
     var _ao_ = caml_wrap_exception(_aq_);
     if(_ao_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ao_, 0);
     var ncol$0 = re[5], match = caml_call1(Re_Automata[19][4], desc);
     a:
     {
      if(typeof match === "number" && match){var break_state = 0; break a;}
      var break_state = 1;
     }
     var
      real_idx = caml_call1(Re_Automata[19][3], desc),
      _an_ = 0,
      break$1 = break_state ? break$0 : real_idx,
      state = [0, break$1, real_idx, _an_, desc],
      ncol = break_state ? 0 : ncol$0,
      st = caml_make_vect(ncol + 1 | 0, unknown_state);
     caml_check_bound(st, 0)[1] = state;
     caml_call3(Re_Automata[19][5][5], re[8], desc, st);
     return st;
    }
   }
   function delta(info, cat, color, st){
    var
     desc = caml_call4(Re_Automata[21], info[1][7], cat, color, st[4]),
     len = info[2].length - 1,
     _ak_ = caml_call1(Re_Automata[19][3], desc),
     _al_ = caml_call2(Re_Import[2], _ak_, len),
     _am_ = _al_ ? 0 < len ? 1 : 0 : _al_;
    if(_am_){
     var pos = info[2];
     info[2] = caml_make_vect(2 * len | 0, 0);
     caml_call5(Stdlib_Array[8], pos, 0, info[2], 0, len);
    }
    return desc;
   }
   function validate(info, s, pos, st){
    var
     _aj_ = caml_string_get(s, pos),
     color = caml_call2(Re_Color_map[2][2], info[1][3], _aj_),
     cat = category(info[1], color),
     desc = delta(info, cat, color, st[1]),
     st$0 = find_state(info[1], desc);
    return set_transition(st, color, st$0);
   }
   function next(colors, st, s, pos){
    return follow_transition
            (st,
             caml_call2
              (Re_Color_map[2][2],
               colors,
               runtime.caml_string_unsafe_get(s, pos)));
   }
   function get_color(re, s, pos){
    if(0 > pos) return caml_call1(Re_Cset[2], -1);
    var slen = caml_ml_string_length(s);
    if(slen <= pos) return caml_call1(Re_Cset[2], -1);
    if(caml_call2(Re_Import[2], pos, slen - 1 | 0) && -1 !== re[6]){
     var _ai_ = caml_string_get(s, pos);
     if(caml_call2(Stdlib_Char[6], _ai_, 10))
      return caml_call1(Re_Cset[2], re[6]);
    }
    var _ah_ = caml_string_get(s, pos);
    return caml_call2(Re_Color_map[2][2], re[3], _ah_);
   }
   function scan_str(info$0, s, initial_state, groups){
    var pos$3 = info$0[3], last = info$0[4];
    if
     (caml_call2(Re_Import[2], last, caml_ml_string_length(s))
      && -1 !== info$0[1][6] && pos$3 < last){
     var _ag_ = caml_string_get(s, last - 1 | 0);
     if(caml_call2(Stdlib_Char[6], _ag_, 10)){
      var
       info$1 = [0, info$0[1], info$0[2], info$0[3], last - 1 | 0],
       st$3 = scan_str(info$1, s, initial_state, groups);
      if(caml_call2(Re_Import[2], st$3[1][1], break$0)) return st$3;
      var pos$4 = last - 1 | 0;
      for(;;){
       var
        st$1 = follow_transition(st$3, caml_call1(Re_Cset[2], info$1[1][6])),
        info = st$1[1];
       if(0 <= info[1]){
        if(groups){
         var _ae_ = info[1];
         caml_check_bound(info$1[2], _ae_)[1 + _ae_] = pos$4;
        }
        return st$1;
       }
       if(caml_call2(Re_Import[2], info[1], break$0)){
        if(groups){
         var _af_ = info[2];
         caml_check_bound(info$1[2], _af_)[1 + _af_] = pos$4;
        }
        return st$1;
       }
       var
        color = caml_call1(Re_Cset[2], info$1[1][6]),
        cat = category(info$1[1], color),
        real_c = caml_call2(Re_Color_map[2][2], info$1[1][3], 10),
        desc = delta(info$1, cat, real_c, st$3[1]),
        st$2 = find_state(info$1[1], desc);
       set_transition(st$3, color, st$2);
      }
     }
    }
    if(groups){
     var
      positions$1 = info$0[2],
      colors = info$0[1][3],
      positions = positions$1,
      pos = pos$3,
      st0 = initial_state,
      st = initial_state;
     for(;;){
      if(pos >= last) return st;
      var
       st0$0 = next(colors, st, s, pos),
       state_info = st0$0[1],
       idx = state_info[1];
      if(0 <= idx){
       positions[1 + idx] = pos;
       var pos$0 = pos + 1 | 0, pos = pos$0, st0 = st0$0, st = st0$0;
      }
      else{
       if(caml_call2(Re_Import[2], idx, break$0)){
        positions[1 + state_info[2]] = pos;
        return st0$0;
       }
       validate(info$0, s, pos, st0);
       var positions$0 = info$0[2], positions = positions$0, st = st0;
      }
     }
    }
    else{
     var
      colors$0 = info$0[1][3],
      pos$1 = pos$3,
      st0$1 = initial_state,
      st$0 = initial_state;
     for(;;){
      if(pos$1 >= last) return st$0;
      var
       st0$2 = next(colors$0, st$0, s, pos$1),
       state_info$0 = st0$2[1],
       idx$0 = state_info$0[1];
      if(0 <= idx$0)
       var pos$2 = pos$1 + 1 | 0, pos$1 = pos$2, st0$1 = st0$2, st$0 = st0$2;
      else{
       if(caml_call2(Re_Import[2], idx$0, break$0)) return st0$2;
       validate(info$0, s, pos$1, st0$1);
       var st$0 = st0$1;
      }
     }
    }
   }
   function final_boundary_check(last, slen, re, s, info, st$0, groups){
    var
     _ac_ =
       caml_call2(Re_Import[2], last, slen)
        ? Re_Category[4]
        : category(re, get_color(re, s, last)),
     final_cat = caml_call2(Re_Category[1], Re_Category[9], _ac_),
     st$1 = st$0[1];
    try{
     var
      _ab_ = caml_call2(Stdlib_ListLabels[51], final_cat, st$1[3]),
      match = _ab_;
    }
    catch(_ad_){
     var _$_ = caml_wrap_exception(_ad_);
     if(_$_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_$_, 0);
     var
      st = delta(info, final_cat, caml_call1(Re_Cset[2], -1), st$1),
      _aa_ = caml_call1(Re_Automata[19][4], st),
      res = [0, caml_call1(Re_Automata[19][3], st), _aa_];
     st$1[3] = [0, [0, final_cat, res], st$1[3]];
     var match = res;
    }
    var res$0 = match[2], idx = match[1];
    a:
    if(groups && typeof res$0 !== "number"){
     caml_check_bound(info[2], idx)[1 + idx] = last;
     break a;
    }
    return res$0;
   }
   function match_str(groups, partial, re, s, pos, len){
    var
     slen = caml_ml_string_length(s),
     last = caml_call2(Re_Import[2], len, -1) ? slen : pos + len | 0;
    if(groups)
     var
      n = caml_call1(Re_Automata[20][2], re[7]) + 1 | 0,
      _V_ = 10 < n ? caml_make_vect(n, 0) : _a_.slice(),
      _W_ = _V_;
    else
     var _W_ = [0];
    var
     info = [0, re, _W_, pos, last],
     _X_ =
       caml_call2(Re_Import[2], pos, 0)
        ? Re_Category[4]
        : category(re, get_color(re, s, pos - 1 | 0)),
     initial_cat = caml_call2(Re_Category[1], Re_Category[9], _X_);
    try{
     var
      _U_ = caml_call2(Stdlib_ListLabels[51], initial_cat, re[2]),
      initial_state = _U_;
    }
    catch(___){
     var _T_ = caml_wrap_exception(___);
     if(_T_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_T_, 0);
     var
      st = find_state(re, caml_call2(Re_Automata[19][2], initial_cat, re[1]));
     re[2] = [0, [0, initial_cat, st], re[2]];
     var initial_state = st;
    }
    var st$0 = scan_str(info, s, initial_state, groups), state_info = st$0[1];
    a:
    {
     b:
     if(! caml_call2(Re_Import[2], state_info[1], break$0)){
      if(partial && ! groups) break b;
      if(partial && groups){
       var status = caml_call1(Re_Automata[19][4], state_info[4]);
       c:
       {
        if(typeof status === "number" && status){
         var
          status$0 =
            final_boundary_check(last, slen, re, s, info, st$0, groups),
          _Y_ = typeof status$0 === "number" ? 1 : status$0,
          _Z_ = _Y_;
         break c;
        }
        var _Z_ = status;
       }
       var match = _Z_;
       break a;
      }
      var match = final_boundary_check(last, slen, re, s, info, st$0, groups);
      break a;
     }
     var match = caml_call1(Re_Automata[19][4], state_info[4]);
    }
    if(typeof match !== "number"){
     var pmarks = match[2], marks = match[1];
     return [0, [0, s, marks, pmarks, info[2], re[10]]];
    }
    if(! match) return 0;
    var no_match_starts_before = groups ? caml_check_bound(info[2], 0)[1] : 0;
    return [1, no_match_starts_before];
   }
   function enforce_kind(ids, kind$0, kind, cr){
    if(typeof kind$0 === "number" && 332064784 === kind$0){
     if(typeof kind === "number" && 332064784 === kind) return cr;
     var _S_ = caml_call1(Re_Automata[11], ids);
     return caml_call4(Re_Automata[10], ids, kind, cr, _S_);
    }
    return cr;
   }
   function translate(ctx, ast){
    var ctx$0 = ctx, ast$0 = ast;
    for(;;){
     var
      colors = ctx$0[8],
      cache = ctx$0[7],
      names = ctx$0[6],
      pos = ctx$0[5],
      greedy = ctx$0[4],
      ign_group = ctx$0[3],
      kind = ctx$0[2],
      ids = ctx$0[1];
     if(typeof ast$0 === "number")
      switch(ast$0){
        case 0:
         var _l_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[7]);
         return [0, caml_call2(Re_Automata[17], ids, _l_), kind];
        case 1:
         var _m_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[7]);
         return [0, caml_call2(Re_Automata[16], ids, _m_), kind];
        case 2:
         var
          _n_ = caml_call2(Re_Automata[16], ids, Re_Category[5]),
          _o_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _p_ = caml_call2(Re_Automata[17], ids, _o_);
         return [0,
                 caml_call4(Re_Automata[10], ids, 332064784, _p_, _n_),
                 kind];
        case 3:
         var
          _q_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _r_ = caml_call2(Re_Automata[16], ids, _q_),
          _s_ = caml_call2(Re_Automata[17], ids, Re_Category[5]);
         return [0,
                 caml_call4(Re_Automata[10], ids, 332064784, _s_, _r_),
                 kind];
        case 4:
         var
          cat = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _t_ = caml_call2(Re_Automata[16], ids, cat),
          _u_ = caml_call2(Re_Automata[17], ids, cat),
          _v_ = [0, caml_call4(Re_Automata[10], ids, 332064784, _u_, _t_), 0],
          _w_ = caml_call2(Re_Automata[16], ids, Re_Category[5]),
          _x_ = caml_call2(Re_Automata[17], ids, Re_Category[5]),
          _y_ =
            [0, caml_call4(Re_Automata[10], ids, 332064784, _x_, _w_), _v_];
         return [0, caml_call2(Re_Automata[9], ids, _y_), kind];
        case 5:
         return [0, caml_call2(Re_Automata[17], ids, Re_Category[4]), kind];
        case 6:
         return [0, caml_call2(Re_Automata[16], ids, Re_Category[4]), kind];
        case 7:
         var _z_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[8]);
         return [0, caml_call2(Re_Automata[16], ids, _z_), kind];
        case 8:
         return [0, caml_call2(Re_Automata[17], ids, Re_Category[9]), kind];
        default:
         return [0, caml_call2(Re_Automata[16], ids, Re_Category[9]), kind];
      }
     switch(ast$0[0]){
       case 0:
        var s = ast$0[1], match = caml_call1(Re_Cset[41], s);
        if(match)
         var
          i = match[1],
          _i_ = caml_call2(Re_Color_map[2][1], colors, i),
          _A_ = caml_call1(Re_Cset[46], _i_);
        else{
         var v = [0, caml_call1(Re_Cset[43], s), s];
         try{var _k_ = caml_call2(Re_Cset[44][17], v, cache[1]), _A_ = _k_;}
         catch(_R_){
          var _j_ = caml_wrap_exception(_R_);
          if(_j_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_j_, 0);
          var l = caml_call2(Re_Color_map[2][3], colors, s);
          cache[1] = caml_call3(Re_Cset[44][2], v, l, cache[1]);
          var _A_ = l;
         }
        }
        return [0, caml_call2(Re_Automata[7], ids, _A_), kind];
       case 1:
        var l$0 = ast$0[1][1], merged_sequences = caml_call1(Re_Ast[2], l$0);
        if(merged_sequences && ! merged_sequences[2]){
         var
          r = merged_sequences[1],
          match$0 = translate(ctx$0, r),
          kind$0 = match$0[2],
          cr = match$0[1];
         return [0, enforce_kind(ids, kind, kind$0, cr), kind];
        }
        var
         _B_ =
           function(r){
            var match = translate(ctx$0, r), kind$0 = match[2], cr = match[1];
            return enforce_kind(ids, kind, kind$0, cr);
           },
         _C_ = caml_call2(Stdlib_ListLabels[20], _B_, merged_sequences);
        return [0, caml_call2(Re_Automata[9], ids, _C_), kind];
       case 2:
        var l$1 = ast$0[1]; return [0, trans_seq(ctx$0, l$1), kind];
       case 3:
        var
         j = ast$0[3],
         i$0 = ast$0[2],
         r$0 = ast$0[1],
         match$1 = translate(ctx$0, r$0),
         kind$1 = match$1[2],
         cr$0 = match$1[1];
        if(j)
         var
          j$0 = j[1],
          f =
            620821490 <= greedy
             ? function
              (rem){
               var
                _L_ = caml_call2(Re_Automata[18], ids, cr$0),
                _M_ =
                  [0, caml_call4(Re_Automata[10], ids, kind$1, _L_, rem), 0],
                _N_ = [0, caml_call1(Re_Automata[11], ids), _M_];
               return caml_call2(Re_Automata[9], ids, _N_);
              }
             : function
              (rem){
               var
                _O_ = [0, caml_call1(Re_Automata[11], ids), 0],
                _P_ = caml_call2(Re_Automata[18], ids, cr$0),
                _Q_ =
                  [0, caml_call4(Re_Automata[10], ids, kind$1, _P_, rem), _O_];
               return caml_call2(Re_Automata[9], ids, _Q_);
              },
          rem = iter(j$0 - i$0 | 0, f, caml_call1(Re_Automata[11], ids));
        else
         var rem = caml_call4(Re_Automata[12], ids, greedy, kind$1, cr$0);
        return [0,
                iter
                 (i$0,
                  function(rem){
                   var _K_ = caml_call2(Re_Automata[18], ids, cr$0);
                   return caml_call4(Re_Automata[10], ids, kind$1, _K_, rem);
                  },
                  rem),
                kind];
       case 4:
        var ast$1 = ast$0[2], n = ast$0[1];
        if(! ign_group){
         var p = pos[1];
         if(n){
          var name = n[1], _D_ = names[1];
          names[1] = [0, [0, name, caml_call1(Re_Automata[1][5], p)], _D_];
         }
         pos[1] = caml_call1(Re_Automata[1][4], pos[1]);
         var
          match$2 = translate(ctx$0, ast$1),
          kind$2 = match$2[2],
          cr$1 = match$2[1],
          _E_ = caml_call1(Re_Automata[1][3], p),
          _F_ = caml_call2(Re_Automata[13], ids, _E_),
          _G_ = caml_call4(Re_Automata[10], ids, 332064784, cr$1, _F_),
          _H_ = caml_call2(Re_Automata[13], ids, p);
         return [0,
                 caml_call4(Re_Automata[10], ids, 332064784, _H_, _G_),
                 kind$2];
        }
        var ast$0 = ast$1;
        break;
       case 5:
        var
         ast$2 = ast$0[1],
         ctx$1 =
           [0,
            ctx$0[1],
            ctx$0[2],
            1,
            ctx$0[4],
            ctx$0[5],
            ctx$0[6],
            ctx$0[7],
            ctx$0[8]],
         ctx$0 = ctx$1,
         ast$0 = ast$2;
        break;
       case 6:
        var
         r$1 = ast$0[1],
         b = pos[1],
         match$3 = translate(ctx$0, r$1),
         kind$3 = match$3[2],
         cr$2 = match$3[1],
         e = caml_call1(Re_Automata[1][2], pos[1]);
        if(e < b) return [0, cr$2, kind$3];
        var _I_ = caml_call3(Re_Automata[15], ids, b, e);
        return [0,
                caml_call4(Re_Automata[10], ids, 332064784, _I_, cr$2),
                kind$3];
       case 7:
        var
         r$2 = ast$0[2],
         i$1 = ast$0[1],
         match$4 = translate(ctx$0, r$2),
         kind$4 = match$4[2],
         cr$3 = match$4[1],
         _J_ = caml_call2(Re_Automata[14], ids, i$1);
        return [0,
                caml_call4(Re_Automata[10], ids, 332064784, _J_, cr$3),
                kind$4];
       case 8:
        var
         r$3 = ast$0[2],
         kind$5 = ast$0[1],
         match$5 =
           translate
            ([0,
              ctx$0[1],
              kind$5,
              ctx$0[3],
              ctx$0[4],
              ctx$0[5],
              ctx$0[6],
              ctx$0[7],
              ctx$0[8]],
             r$3),
         kind$6 = match$5[2],
         cr$4 = match$5[1];
        return [0, enforce_kind(ids, kind$5, kind$6, cr$4), kind$5];
       default:
        var
         ast$3 = ast$0[2],
         greedy$0 = ast$0[1],
         ctx$2 =
           [0,
            ctx$0[1],
            ctx$0[2],
            ctx$0[3],
            greedy$0,
            ctx$0[5],
            ctx$0[6],
            ctx$0[7],
            ctx$0[8]],
         ctx$0 = ctx$2,
         ast$0 = ast$3;
     }
    }
   }
   function trans_seq(ctx, param){
    var kind = ctx[2], ids = ctx[1];
    if(! param) return caml_call1(Re_Automata[11], ids);
    var r = param[1];
    if(param[2]){
     var
      rem = param[2],
      match = translate(ctx, r),
      kind$0 = match[2],
      cr = match[1],
      cr$0 = trans_seq(ctx, rem);
     return caml_call1(Re_Automata[4], cr$0)
             ? cr
             : caml_call1
                (Re_Automata[4], cr)
               ? cr$0
               : caml_call4(Re_Automata[10], ids, kind$0, cr, cr$0);
    }
    var match$0 = translate(ctx, r), kind$1 = match$0[2], cr$1 = match$0[1];
    return enforce_kind(ids, kind, kind$1, cr$1);
   }
   function compile(r$0){
    if(caml_call1(Re_Ast[4], r$0))
     var regexp$0 = caml_call2(Re_Ast[6][21], 0, r$0);
    else
     var
      _e_ = [0, caml_call2(Re_Ast[6][21], 0, r$0), 0],
      _f_ = caml_call1(Re_Ast[7], Re_Cset[45]),
      _g_ = caml_call1(Re_Ast[6][32], _f_),
      _h_ = [0, caml_call1(Re_Ast[6][35], _g_), _e_],
      regexp$0 = caml_call1(Re_Ast[6][36], _h_);
    var
     regexp = caml_call2(Re_Ast[3], 0, regexp$0),
     color_map = caml_call1(Re_Color_map[3], 0),
     need_lnl = caml_call2(Re_Ast[5], color_map, regexp),
     match = caml_call1(Re_Color_map[4], color_map),
     color_repr = match[2],
     colors = match[1],
     ncolor = caml_call1(Re_Color_map[1][2], color_repr),
     lnl = need_lnl ? ncolor : -1,
     ncolor$0 = need_lnl ? ncolor + 1 | 0 : ncolor,
     _c_ = [0, Re_Cset[44][1]],
     _d_ = [0, Re_Automata[1][1]],
     ctx =
       [0,
        caml_call1(Re_Automata[6][1], 0),
        332064784,
        0,
        -904640576,
        _d_,
        [0, 0],
        _c_,
        colors],
     match$0 = translate(ctx, regexp),
     kind = match$0[2],
     r = match$0[1],
     initial = enforce_kind(ctx[1], 332064784, kind, r),
     group_count = caml_call1(Re_Automata[1][5], ctx[5][1]),
     group_names = caml_call1(Stdlib_ListLabels[10], ctx[6][1]),
     _b_ = caml_call1(Re_Automata[19][5][1], 97);
    return [0,
            initial,
            0,
            colors,
            color_repr,
            ncolor$0,
            lnl,
            caml_call1(Re_Automata[20][1], 0),
            _b_,
            group_names,
            group_count];
   }
   var
    Re_Compile =
      [0, match_str, compile, group_count, group_names, pp_re, pp_re];
   runtime.caml_register_global(12, Re_Compile, "Re__Compile");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Search
//# unitInfo: Requires: Re__Compile, Re__Group, Stdlib, Stdlib__Seq, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Re_all$1 = "Re.all",
    cst_Re_split$1 = "Re.split",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Assert_failure = global_data.Assert_failure,
    Re_Compile = global_data.Re__Compile,
    Stdlib_String = global_data.Stdlib__String,
    Re_Group = global_data.Re__Group,
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    _a_ = [0, "lib/search.ml", 55, 6],
    cst_Re_split = cst_Re_split$1,
    cst_Re_split$0 = cst_Re_split$1,
    cst_Re_all = cst_Re_all$1,
    cst_Re_all$0 = cst_Re_all$1;
   function all(opt, len, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_all);
    if(len){
     var
      l = len[1],
      _s_ = l < 0 ? 1 : 0,
      _t_ = _s_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_t_) caml_call1(Stdlib[1], cst_Re_all$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    function aux(pos, on_match, param){
     var pos$0 = pos, on_match$0 = on_match;
     for(;;){
      if(limit < pos$0) return 0;
      var
       match =
         caml_call6(Re_Compile[1], 1, 0, re, s, pos$0, limit - pos$0 | 0);
      if(typeof match !== "number" && 0 === match[0]){
       var
        substr = match[1],
        match$0 = caml_call2(Re_Group[3], substr, 0),
        p2 = match$0[2],
        p1 = match$0[1];
       if(on_match$0 && p1 === pos$0 && p1 === p2){
        var pos$1 = pos$0 + 1 | 0, pos$0 = pos$1, on_match$0 = 0;
        continue;
       }
       var pos$2 = p1 === p2 ? p2 + 1 | 0 : p2, _w_ = p1 !== p2 ? 1 : 0;
       return [0, substr, function(_x_){return aux(pos$2, _w_, _x_);}];
      }
      return 0;
     }
    }
    var _u_ = 0;
    return function(_v_){return aux(pos, _u_, _v_);};
   }
   function matches(pos, len, re, s){
    var _q_ = all(pos, len, re, s);
    function _r_(sub){return caml_call2(Re_Group[1], sub, 0);}
    return caml_call1(caml_call1(Stdlib_Seq[29], _r_), _q_);
   }
   function split_full(opt, len, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_split);
    if(len){
     var
      l = len[1],
      _h_ = l < 0 ? 1 : 0,
      _i_ = _h_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_i_) caml_call1(Stdlib[1], cst_Re_split$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    function aux(state, i, pos$0, param){
     var old_i = i, pos$1 = pos$0;
     for(;;){
      if(typeof state !== "number"){
       var x = state[2], _l_ = 814535476;
       return [0, x, function(_p_){return aux(_l_, old_i, pos$1, _p_);}];
      }
      if(limit < pos$1){
       if(old_i === limit) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
      }
      var
       match =
         caml_call6(Re_Compile[1], 1, 0, re, s, pos$1, limit - pos$1 | 0);
      if(typeof match === "number"){
       if(old_i >= limit) return 0;
       var text = caml_call3(Stdlib_String[16], s, old_i, limit - old_i | 0);
       return [0,
               [0, 936573133, text],
               function(_o_){return aux(state, limit, pos$1, _o_);}];
      }
      if(0 !== match[0]) return 0;
      var
       substr = match[1],
       match$0 = caml_call2(Re_Group[3], substr, 0),
       p2 = match$0[2],
       p1 = match$0[1],
       pos$2 = p1 === p2 ? p2 + 1 | 0 : p2;
      if(old_i === p1 && p1 === p2 && pos < p1){var old_i = p2, pos$1 = pos$2; continue;
      }
      if(pos >= p1)
       return [0,
               [0, -363573681, substr],
               function(_n_){return aux(state, p2, pos$2, _n_);}];
      var
       text$0 = caml_call3(Stdlib_String[16], s, old_i, p1 - old_i | 0),
       state$0 = [0, 73271853, [0, -363573681, substr]];
      return [0,
              [0, 936573133, text$0],
              function(_m_){return aux(state$0, p2, pos$2, _m_);}];
     }
    }
    var _j_ = 814535476;
    return function(_k_){return aux(_j_, pos, pos, _k_);};
   }
   function split(pos, len, re, s){
    var seq = split_full(pos, len, re, s);
    function filter(seq, param){
     var seq$0 = seq;
     for(;;){
      var match = caml_call1(seq$0, 0);
      if(! match) return 0;
      var match$0 = match[1];
      if(936573133 <= match$0[1]){
       var tl = match[2], s = match$0[2];
       return [0, s, function(_g_){return filter(tl, _g_);}];
      }
      var seq$1 = match[2], seq$0 = seq$1;
     }
    }
    return function(_f_){return filter(seq, _f_);};
   }
   function split_delim(pos, len, re, s){
    var seq = split_full(pos, len, re, s);
    function filter(delim, seq, param){
     var delim$0 = delim, seq$0 = seq;
     for(;;){
      var match = caml_call1(seq$0, 0);
      if(! match) return delim$0 ? [0, cst$0, function(param){return 0;}] : 0;
      var match$0 = match[1];
      if(936573133 <= match$0[1]){
       var tl = match[2], s = match$0[2], _d_ = 0;
       return [0, s, function(_e_){return filter(_d_, tl, _e_);}];
      }
      var seq$1 = match[2];
      if(delim$0)
       return [0, cst, function(param){return filter(1, seq$1, 0);}];
      var delim$0 = 1, seq$0 = seq$1;
     }
    }
    var _b_ = 1;
    return function(_c_){return filter(_b_, seq, _c_);};
   }
   var Re_Search = [0, all, matches, split_full, split, split_delim];
   runtime.caml_register_global(13, Re_Search, "Re__Search");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Core
//# unitInfo: Requires: Re__Ast, Re__Compile, Re__Cset, Re__Group, Re__Pmark, Re__Search, Stdlib, Stdlib__ListLabels, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Search = global_data.Re__Search,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Re_Pmark = global_data.Re__Pmark,
    Stdlib = global_data.Stdlib,
    Re_Compile = global_data.Re__Compile,
    Re_Cset = global_data.Re__Cset,
    Re_Ast = global_data.Re__Ast,
    Re_Group = global_data.Re__Group,
    cset = Re_Ast[7];
   function char$0(c){return caml_call1(cset, caml_call1(Re_Cset[46], c));}
   function rg(c$0, c){
    return caml_call1(cset, caml_call2(Re_Cset[25], c$0, c));
   }
   var
    any = caml_call1(cset, Re_Cset[45]),
    notnl = caml_call1(cset, Re_Cset[22]),
    lower = caml_call1(cset, Re_Cset[30]),
    upper = caml_call1(cset, Re_Cset[31]),
    alpha = caml_call1(cset, Re_Cset[32]),
    digit = caml_call1(cset, Re_Cset[19]),
    alnum = caml_call1(cset, Re_Cset[33]),
    wordc = caml_call1(cset, Re_Cset[34]),
    ascii = caml_call1(cset, Re_Cset[23]),
    blank = caml_call1(cset, Re_Cset[27]),
    cntrl = caml_call1(cset, Re_Cset[35]),
    graph = caml_call1(cset, Re_Cset[36]),
    print = caml_call1(cset, Re_Cset[37]),
    punct = caml_call1(cset, Re_Cset[38]),
    space = caml_call1(cset, Re_Cset[28]),
    xdigit = caml_call1(cset, Re_Cset[29]),
    include = Re_Ast[6],
    empty = include[1],
    epsilon = include[2],
    str = include[3],
    no_case = include[4],
    case$0 = include[5],
    diff = include[6],
    compl = include[7],
    repn = include[8],
    inter = include[9],
    set = include[10],
    mark = include[11],
    nest = include[12],
    no_group = include[13],
    whole_string = include[14],
    leol = include[15],
    longest = include[16],
    greedy = include[17],
    non_greedy = include[18],
    stop = include[19],
    not_boundary = include[20],
    group = include[21],
    word = include[22],
    first = include[23],
    bos = include[24],
    bow = include[25],
    eow = include[26],
    eos = include[27],
    bol = include[28],
    start = include[29],
    eol = include[30],
    opt = include[31],
    rep = include[32],
    rep1 = include[33],
    alt = include[34],
    shortest = include[35],
    seq = include[36],
    pp = include[37],
    witness = include[38];
   function exec_internal(opt, _d_, partial, groups, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(_d_) var sth$0 = _d_[1], len = sth$0; else var len = -1;
    return caml_call6(Re_Compile[1], groups, partial, re, s, pos, len);
   }
   function exec(pos, len, re, s){
    var match = exec_internal(pos, len, 0, 1, re, s);
    if(typeof match !== "number" && 0 === match[0]){var substr = match[1]; return substr;}
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function exec_opt(pos, len, re, s){
    var match = exec_internal(pos, len, 0, 1, re, s);
    if(typeof match !== "number" && 0 === match[0]){var substr = match[1]; return [0, substr];}
    return 0;
   }
   function execp(pos, len, re, s){
    var match = exec_internal(pos, len, 0, 0, re, s);
    if(typeof match !== "number" && 0 === match[0]) return 1;
    return 0;
   }
   function exec_partial(pos, len, re, s){
    var match = exec_internal(pos, len, 1, 0, re, s);
    return typeof match === "number"
            ? -1062743954
            : 0 === match[0] ? 782112175 : 939392865;
   }
   function exec_partial_detailed(pos, len, re, s){
    var match = exec_internal(pos, len, 1, 1, re, s);
    if(typeof match === "number") return -1062743954;
    if(0 === match[0]){var group = match[1]; return [0, 782112175, group];}
    var no_match_starts_before = match[1];
    return [0, 939392865, no_match_starts_before];
   }
   function marked(g, p){return caml_call2(Re_Pmark[5][31], p, g[3]);}
   function mark_set(g){return g[3];}
   var equal = Re_Pmark[1], compare = Re_Pmark[2];
   function gen_of_seq(s){
    var r = [0, s];
    return function(param){
     var match = caml_call1(r[1], 0);
     if(! match) return 0;
     var tl = match[2], x = match[1];
     r[1] = tl;
     return [0, x];};
   }
   function split_gen(pos, len, re, s){
    return gen_of_seq(caml_call4(Re_Search[4], pos, len, re, s));
   }
   function split_full_gen(pos, len, re, s){
    return gen_of_seq(caml_call4(Re_Search[3], pos, len, re, s));
   }
   function all_gen(pos, len, re, s){
    return gen_of_seq(caml_call4(Re_Search[1], pos, len, re, s));
   }
   function matches_gen(pos, len, re, s){
    return gen_of_seq(caml_call4(Re_Search[2], pos, len, re, s));
   }
   var
    split_full_seq = Re_Search[3],
    split_seq = Re_Search[4],
    matches_seq = Re_Search[2],
    all_seq = Re_Search[1],
    get = Re_Group[1],
    get_ofs = Re_Group[3],
    get_all = Re_Group[6],
    get_all_ofs = Re_Group[7],
    test = Re_Group[8];
   function list_of_seq(s){
    var _a_ = 0;
    function _b_(l, x){return [0, x, l];}
    var _c_ = caml_call3(Stdlib_Seq[5], _b_, _a_, s);
    return caml_call1(Stdlib_ListLabels[10], _c_);
   }
   function all(pos, len, re, s){
    return list_of_seq(caml_call4(Re_Search[1], pos, len, re, s));
   }
   function matches(pos, len, re, s){
    return list_of_seq(caml_call4(Re_Search[2], pos, len, re, s));
   }
   function split_full(pos, len, re, s){
    return list_of_seq(caml_call4(Re_Search[3], pos, len, re, s));
   }
   function split(pos, len, re, s){
    return list_of_seq(caml_call4(Re_Search[4], pos, len, re, s));
   }
   function split_delim(pos, len, re, s){
    return list_of_seq(caml_call4(Re_Search[5], pos, len, re, s));
   }
   var
    compile = Re_Compile[2],
    pp_re = Re_Compile[6],
    print_re = Re_Compile[5],
    group_names = Re_Compile[4],
    group_count = Re_Compile[3],
    Re_Core =
      [0,
       Re_Group,
       compile,
       group_count,
       group_names,
       exec,
       exec_opt,
       execp,
       exec_partial,
       exec_partial_detailed,
       [0, marked, Re_Pmark[5], mark_set, equal, compare],
       all,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split,
       split_delim,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       [0,
        Re_Search[1],
        Re_Search[2],
        Re_Search[4],
        Re_Search[5],
        Re_Search[3]],
       str,
       char$0,
       alt,
       seq,
       empty,
       epsilon,
       rep,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start,
       stop,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark,
       set,
       rg,
       inter,
       diff,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp,
       pp_re,
       print_re,
       witness,
       get,
       get_ofs,
       get_all,
       get_all_ofs,
       test,
       marked,
       mark_set];
   runtime.caml_register_global(9, Re_Core, "Re__Core");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Parse_buffer
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Parse_error =
      [248, "Re__Parse_buffer.Parse_error", runtime.caml_fresh_oo_id(0)];
   function create(str){return [0, str, 0];}
   function unget(t){t[2] = t[2] - 1 | 0; return 0;}
   function junk(t){t[2] = t[2] + 1 | 0; return 0;}
   function eos(t){return t[2] === caml_ml_string_length(t[1]) ? 1 : 0;}
   function test(t, c){
    var
     _l_ = 1 - eos(t),
     _m_ = _l_ ? caml_string_get(t[1], t[2]) === c ? 1 : 0 : _l_;
    return _m_;
   }
   function test2(t, c$0, c){
    var _i_ = (t[2] + 1 | 0) < caml_ml_string_length(t[1]) ? 1 : 0;
    if(_i_)
     var
      _j_ = caml_string_get(t[1], t[2]) === c$0 ? 1 : 0,
      _k_ = _j_ ? caml_string_get(t[1], t[2] + 1 | 0) === c ? 1 : 0 : _j_;
    else
     var _k_ = _i_;
    return _k_;
   }
   function accept(t, c){
    var r = test(t, c);
    if(r) t[2] = t[2] + 1 | 0;
    return r;
   }
   function accept2(t, c$0, c){
    var r = test2(t, c$0, c);
    if(r) t[2] = t[2] + 2 | 0;
    return r;
   }
   function get(t){
    var r = caml_string_get(t[1], t[2]);
    t[2] = t[2] + 1 | 0;
    return r;
   }
   function accept_s(t, s){
    var len = caml_ml_string_length(s);
    try{
     var _c_ = len - 1 | 0, _b_ = 0;
     if(_c_ >= 0){
      var j = _b_;
      for(;;){
       try{
        var _e_ = caml_string_get(t[1], t[2] + j | 0);
        if(caml_string_get(s, j) !== _e_) throw Stdlib[3];
       }
       catch(_h_){throw Stdlib[3];}
       var _f_ = j + 1 | 0;
       if(_c_ === j) break;
       var j = _f_;
      }
     }
     t[2] = t[2] + len | 0;
     var _d_ = 1;
     return _d_;
    }
    catch(_g_){
     var _a_ = caml_wrap_exception(_g_);
     if(_a_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   function integer(t){
    if(eos(t)) return 0;
    var d$0 = get(t);
    if(9 < d$0 - 48 >>> 0){unget(t); return 0;}
    var i$1 = d$0 - 48 | 0, i = i$1;
    for(;;){
     if(eos(t)) return [0, i];
     var d = get(t);
     if(9 < d - 48 >>> 0){unget(t); return [0, i];}
     var i$0 = (10 * i | 0) + (d - 48 | 0) | 0;
     if(i$0 < i) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var i = i$0;
    }
   }
   var
    Re_Parse_buffer =
      [0,
       Parse_error,
       create,
       junk,
       unget,
       eos,
       test,
       test2,
       get,
       accept,
       accept2,
       accept_s,
       integer];
   runtime.caml_register_global(2, Re_Parse_buffer, "Re__Parse_buffer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Emacs
//# unitInfo: Requires: Re__Core, Re__Parse_buffer, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Re_Parse_buffer = global_data.Re__Parse_buffer,
    Parse_error = [248, "Re__Emacs.Parse_error", caml_fresh_oo_id(0)],
    Not_supported = [248, "Re__Emacs.Not_supported", caml_fresh_oo_id(0)];
   function re(opt, s){
    if(opt) var sth = opt[1], case$0 = sth; else var case$0 = 1;
    var
     buf = caml_call1(Re_Parse_buffer[2], s),
     accept = caml_call1(Re_Parse_buffer[9], buf),
     accept2 = caml_call1(Re_Parse_buffer[10], buf);
    function eos(param){return caml_call1(Re_Parse_buffer[5], buf);}
    var test2 = caml_call1(Re_Parse_buffer[7], buf);
    function get(param){return caml_call1(Re_Parse_buffer[8], buf);}
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! caml_call2(accept2, 92, 124)) return left$0;
      var
       _h_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[27], _h_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if
       (!
        eos(0)
        && ! caml_call2(test2, 92, 124) && ! caml_call2(test2, 92, 41)){
       a:
       if(caml_call1(accept, 46))
        var r = Re_Core[62];
       else if(caml_call1(accept, 94))
        var r = Re_Core[35];
       else if(caml_call1(accept, 36))
        var r = Re_Core[36];
       else if(caml_call1(accept, 91))
        if(caml_call1(accept, 94))
         var _d_ = bracket(0), r = caml_call1(Re_Core[60], _d_);
        else
         var _e_ = bracket(0), r = caml_call1(Re_Core[27], _e_);
       else{
        if(! caml_call1(accept, 92)){
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c$0 = get(0);
         b:
         {
          if(44 <= c$0){if(63 === c$0) break b;} else if(42 <= c$0) break b;
          var r = caml_call1(Re_Core[26], c$0);
          break a;
         }
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
        if(caml_call1(accept, 40)){
         var r$0 = regexp(0);
         if(1 - caml_call2(accept2, 92, 41))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         var r = caml_call2(Re_Core[52], 0, r$0);
        }
        else if(caml_call1(accept, 96))
         var r = Re_Core[39];
        else if(caml_call1(accept, 39))
         var r = Re_Core[40];
        else if(caml_call1(accept, 61))
         var r = Re_Core[42];
        else if(caml_call1(accept, 98))
         var
          r = caml_call1(Re_Core[27], [0, Re_Core[37], [0, Re_Core[38], 0]]);
        else if(caml_call1(accept, 66))
         var r = Re_Core[45];
        else if(caml_call1(accept, 60))
         var r = Re_Core[37];
        else if(caml_call1(accept, 62))
         var r = Re_Core[38];
        else if(caml_call1(accept, 119))
         var
          _f_ = [0, caml_call1(Re_Core[26], 95), 0],
          r = caml_call1(Re_Core[27], [0, Re_Core[63], _f_]);
        else if(caml_call1(accept, 87))
         var
          _g_ = [0, caml_call1(Re_Core[26], 95), 0],
          r = caml_call1(Re_Core[60], [0, Re_Core[63], _g_]);
        else{
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c = get(0);
         b:
         {
          if(63 <= c){
           if(91 <= c){if(95 > c) break b;} else if(64 > c) break b;
          }
          else
           if(48 <= c){
            if(58 > c) throw caml_maybe_attach_backtrace(Not_supported, 1);
           }
           else if(36 <= c)
            switch(c - 36 | 0){case 0:case 6:case 7:case 10: break b;}
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var r = caml_call1(Re_Core[26], c);
        }
       }
       var
        _c_ =
          caml_call1(accept, 42)
           ? caml_call1(Re_Core[31], r)
           : caml_call1
              (accept, 43)
             ? caml_call1(Re_Core[32], r)
             : caml_call1(accept, 63) ? caml_call1(Re_Core[34], r) : r,
        left$0 = [0, _c_, left],
        left = left$0;
       continue;
      }
      var _b_ = caml_call1(Stdlib_List[10], left);
      return caml_call1(Re_Core[28], _b_);
     }
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && caml_call1(accept, 93)) return s$0;
      var c = char$0(0);
      if(caml_call1(accept, 45)){
       if(caml_call1(accept, 93)){
        var _a_ = [0, caml_call1(Re_Core[26], 45), s$0];
        return [0, caml_call1(Re_Core[26], c), _a_];
       }
       var
        c$0 = char$0(0),
        s$1 = [0, caml_call2(Re_Core[57], c, c$0), s$0],
        s$0 = s$1;
      }
      else
       var s$2 = [0, caml_call1(Re_Core[26], c), s$0], s$0 = s$2;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     return get(0);
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    return case$0 ? res : caml_call1(Re_Core[78], res);
   }
   var compile = Re_Core[2];
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], case$0 = sth; else var case$0 = 1;
    return caml_call1(compile, re([0, case$0], s));
   }
   var Re_Emacs = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(5, Re_Emacs, "Re__Emacs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Str
//# unitInfo: Requires: CamlinternalLazy, Re__Core, Re__Emacs, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Re_Core = global_data.Re__Core,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Re_Emacs = global_data.Re__Emacs,
    cst_Str_replace_illegal_backsl = "Str.replace: illegal backslash sequence",
    cst_Str_group_end = "Str.group_end",
    cst_Str_group_beginning = "Str.group_beginning";
   function compile_regexp(s, c){
    var
     re = caml_call2(Re_Emacs[3], [0, 1 - c], s),
     _ah_ = [246, function(_aj_){return caml_call1(Re_Core[2], re);}];
    return [0,
            re,
            [246,
             function(param){
              var
               _ai_ = caml_call1(Re_Core[28], [0, Re_Core[42], [0, re, 0]]);
              return caml_call1(Re_Core[2], _ai_);
             }],
            _ah_];
   }
   var state = [0, 0];
   function string_match(re, s, p){
    try{
     var _ac_ = re[2], _ad_ = caml_obj_tag(_ac_);
     a:
     if(250 === _ad_)
      var _ae_ = _ac_[1];
     else{
      if(246 !== _ad_ && 244 !== _ad_){var _ae_ = _ac_; break a;}
      var _ae_ = caml_call1(CamlinternalLazy[2], _ac_);
     }
     state[1] = [0, caml_call4(Re_Core[5], [0, p], 0, _ae_, s)];
     var _af_ = 1;
     return _af_;
    }
    catch(_ag_){
     var _ab_ = caml_wrap_exception(_ag_);
     if(_ab_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ab_, 0);
     state[1] = 0;
     return 0;
    }
   }
   function string_partial_match(re, s, p){
    var ___ = re[2], _$_ = caml_obj_tag(___);
    a:
    if(250 === _$_)
     var _aa_ = ___[1];
    else{
     if(246 !== _$_ && 244 !== _$_){var _aa_ = ___; break a;}
     var _aa_ = caml_call1(CamlinternalLazy[2], ___);
    }
    var match = caml_call4(Re_Core[8], [0, p], 0, _aa_, s);
    return 782112175 === match
            ? string_match(re, s, p)
            : 939392865 <= match ? 1 : 0;
   }
   function search_forward(re, s, p){
    try{
     var _V_ = re[3], _W_ = caml_obj_tag(_V_);
     a:
     if(250 === _W_)
      var _X_ = _V_[1];
     else{
      if(246 !== _W_ && 244 !== _W_){var _X_ = _V_; break a;}
      var _X_ = caml_call1(CamlinternalLazy[2], _V_);
     }
     var res = caml_call4(Re_Core[5], [0, p], 0, _X_, s);
     state[1] = [0, res];
     var _Y_ = caml_call2(Re_Core[1][3], res, 0)[1];
     return _Y_;
    }
    catch(_Z_){
     var _U_ = caml_wrap_exception(_Z_);
     if(_U_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_U_, 0);
     state[1] = 0;
     throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function search_backward(re, s, p){
    var p$0 = p;
    for(;;)
     try{
      var _Q_ = re[2], _R_ = caml_obj_tag(_Q_);
      a:
      if(250 === _R_)
       var _S_ = _Q_[1];
      else{
       if(246 !== _R_ && 244 !== _R_){var _S_ = _Q_; break a;}
       var _S_ = caml_call1(CamlinternalLazy[2], _Q_);
      }
      var res = caml_call4(Re_Core[5], [0, p$0], 0, _S_, s);
      state[1] = [0, res];
      return p$0;
     }
     catch(_T_){
      var _P_ = caml_wrap_exception(_T_);
      if(_P_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_P_, 0);
      state[1] = 0;
      if(0 === p$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var p$1 = p$0 - 1 | 0, p$0 = p$1;
     }
   }
   function valid_group(n){
    var _M_ = 0 <= n ? 1 : 0;
    if(_M_){
     var _N_ = n < 10 ? 1 : 0;
     if(_N_){
      var match = state[1];
      if(match){
       var m = match[1];
       return n < caml_call1(Re_Core[1][9], m) ? 1 : 0;
      }
      var _O_ = 0;
     }
     else
      var _O_ = _N_;
    }
    else
     var _O_ = _M_;
    return _O_;
   }
   function offset_group(i){
    var match = state[1];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var m = match[1];
    return caml_call2(Re_Core[1][3], m, i);
   }
   function replacement_text(repl, orig){
    var len = caml_ml_string_length(repl), p = 0, q = 0;
    for(;;){
     if(p >= len) break;
     if(92 === caml_string_get(repl, p)){
      var p$0 = p + 1 | 0;
      if(p$0 === len) caml_call1(Stdlib[2], cst_Str_replace_illegal_backsl);
      var c = caml_string_get(repl, p$0);
      a:
      {
       if(58 <= c){
        if(92 === c){var q$0 = q + 1 | 0; break a;}
       }
       else if(48 <= c){
        var i = c - 48 | 0;
        try{
         var
          match = offset_group(i),
          e = match[2],
          b = match[1],
          _H_ = e - b | 0,
          _I_ = _H_;
        }
        catch(_L_){
         var _G_ = caml_wrap_exception(_L_);
         if(_G_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_G_, 0);
         var _I_ = 0;
        }
        var q$0 = q + _I_ | 0;
        break a;
       }
       var q$0 = q + 2 | 0;
      }
      var p$1 = p$0 + 1 | 0, p = p$1, q = q$0;
     }
     else
      var q$1 = q + 1 | 0, p$2 = p + 1 | 0, p = p$2, q = q$1;
    }
    var
     res = runtime.caml_create_bytes(q),
     len$0 = caml_ml_string_length(repl),
     p$3 = 0,
     q$2 = 0;
    for(;;){
     if(p$3 >= len$0) return caml_call1(Stdlib_Bytes[44], res);
     var c$0 = caml_string_get(repl, p$3);
     if(92 === c$0){
      var c$1 = caml_string_get(repl, p$3 + 1 | 0);
      if(58 <= c$1){
       if(92 === c$1){
        caml_bytes_set(res, q$2, 92);
        var q$3 = q$2 + 1 | 0, p$4 = p$3 + 2 | 0, p$3 = p$4, q$2 = q$3;
        continue;
       }
      }
      else if(48 <= c$1){
       try{
        var
         match$0 = offset_group(c$1 - 48 | 0),
         e$0 = match$0[2],
         b$0 = match$0[1],
         d$0 = e$0 - b$0 | 0;
        if(0 < d$0) caml_call5(Stdlib_String[6], orig, b$0, res, q$2, d$0);
        var d = d$0;
       }
       catch(_K_){
        var _J_ = caml_wrap_exception(_K_);
        if(_J_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_J_, 0);
        var d = 0;
       }
       var q$5 = q$2 + d | 0, p$6 = p$3 + 2 | 0, p$3 = p$6, q$2 = q$5;
       continue;
      }
      caml_bytes_set(res, q$2, 92);
      caml_bytes_set(res, q$2 + 1 | 0, c$1);
      var q$4 = q$2 + 2 | 0, p$5 = p$3 + 2 | 0, p$3 = p$5, q$2 = q$4;
     }
     else{
      caml_bytes_set(res, q$2, c$0);
      var q$6 = q$2 + 1 | 0, p$7 = p$3 + 1 | 0, p$3 = p$7, q$2 = q$6;
     }
    }
   }
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_call1(Stdlib_Buffer[1], 2 * len | 0),
     _C_ = len - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var c = caml_string_get(s, i), _D_ = c - 63 | 0;
      a:
      {
       b:
       {
        if(31 < _D_ >>> 0){
         var _E_ = _D_ + 27 | 0;
         if(10 < _E_ >>> 0) break b;
         switch(_E_){case 0:case 6:case 7:case 10: break;default: break b;
         }
        }
        else if(26 >= _D_ - 1 >>> 0) break b;
        caml_call2(Stdlib_Buffer[12], buf, 92);
        caml_call2(Stdlib_Buffer[12], buf, c);
        break a;
       }
       caml_call2(Stdlib_Buffer[12], buf, c);
      }
      var _F_ = i + 1 | 0;
      if(_C_ === i) break;
      var i = _F_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function string_before(s, n){
    return caml_call3(Stdlib_String[16], s, 0, n);
   }
   function string_after(s, n){
    return caml_call3
            (Stdlib_String[16], s, n, caml_ml_string_length(s) - n | 0);
   }
   function first_chars(s, n){return caml_call3(Stdlib_String[16], s, 0, n);}
   function last_chars(s, n){
    return caml_call3
            (Stdlib_String[16], s, caml_ml_string_length(s) - n | 0, n);
   }
   function regexp(e){return compile_regexp(e, 0);}
   function regexp_case_fold(e){return compile_regexp(e, 1);}
   function regexp_string(s){return compile_regexp(quote(s), 0);}
   function regexp_string_case_fold(s){return compile_regexp(quote(s), 1);}
   function group_beginning(n){
    if(1 - valid_group(n)) caml_call1(Stdlib[1], cst_Str_group_beginning);
    var pos = offset_group(n)[1];
    if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return pos;
   }
   function group_end(n){
    if(1 - valid_group(n)) caml_call1(Stdlib[1], cst_Str_group_end);
    var pos = offset_group(n)[2];
    if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return pos;
   }
   function matched_group(n, txt){
    var match = offset_group(n), e = match[2], b = match[1];
    return caml_call3(Stdlib_String[16], txt, b, e - b | 0);
   }
   function replace_matched(repl, matched){
    return replacement_text(repl, matched);
   }
   function match_beginning(param){return group_beginning(0);}
   function match_end(param){return group_end(0);}
   function matched_string(txt){return matched_group(0, txt);}
   function substitute_first(expr, repl_fun, text){
    try{
     var
      pos = search_forward(expr, text, 0),
      _w_ = [0, string_after(text, match_end(0)), 0],
      _x_ = [0, caml_call1(repl_fun, text), _w_],
      _y_ = [0, string_before(text, pos), _x_],
      _z_ = caml_call2(Stdlib_String[7], cst, _y_);
     return _z_;
    }
    catch(_A_){
     var _v_ = caml_wrap_exception(_A_);
     if(_v_ === Stdlib[8]) return text;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
   }
   function global_substitute(expr, repl_fun, text){
    var accu = 0, start = 0, last_was_empty = 0;
    for(;;){
     var startpos = last_was_empty ? start + 1 | 0 : start;
     a:
     {
      if(caml_ml_string_length(text) >= startpos){
       try{var pos = search_forward(expr, text, startpos);}
       catch(_u_){
        var _r_ = caml_wrap_exception(_u_);
        if(_r_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_r_, 0);
        var _s_ = [0, string_after(text, start), accu];
        break a;
       }
       var
        end_pos = match_end(0),
        repl_text = caml_call1(repl_fun, text),
        last_was_empty$0 = end_pos === pos ? 1 : 0,
        accu$0 =
          [0,
           repl_text,
           [0,
            caml_call3(Stdlib_String[16], text, start, pos - start | 0),
            accu]],
        accu = accu$0,
        start = end_pos,
        last_was_empty = last_was_empty$0;
       continue;
      }
      var _s_ = [0, string_after(text, start), accu];
     }
     var _t_ = caml_call1(Stdlib_List[10], _s_);
     return caml_call2(Stdlib_String[7], cst$0, _t_);
    }
   }
   function global_replace(expr, repl, text){
    return global_substitute
            (expr, function(_q_){return replacement_text(repl, _q_);}, text);
   }
   function replace_first(expr, repl, text){
    return substitute_first
            (expr, function(_p_){return replacement_text(repl, _p_);}, text);
   }
   function search_forward_progress(re, s, p){
    var pos = search_forward(re, s, p);
    if(p < match_end(0)) return pos;
    if(p < caml_ml_string_length(s)) return search_forward(re, s, p + 1 | 0);
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function bounded_split(expr, text, num){
    var start = string_match(expr, text, 0) ? match_end(0) : 0;
    function split(accu, start, n){
     if(caml_ml_string_length(text) <= start) return accu;
     if(1 === n) return [0, string_after(text, start), accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       _m_ = match_end(0),
       _n_ =
         split
          ([0,
            caml_call3(Stdlib_String[16], text, start, pos - start | 0),
            accu],
           _m_,
           n - 1 | 0);
      return _n_;
     }
     catch(_o_){
      var _l_ = caml_wrap_exception(_o_);
      if(_l_ === Stdlib[8]) return [0, string_after(text, start), accu];
      throw caml_maybe_attach_backtrace(_l_, 0);
     }
    }
    var _k_ = split(0, start, num);
    return caml_call1(Stdlib_List[10], _k_);
   }
   function split(expr, text){return bounded_split(expr, text, 0);}
   function bounded_split_delim(expr, text, num){
    function split(accu, start, n){
     if(caml_ml_string_length(text) < start) return accu;
     if(1 === n) return [0, string_after(text, start), accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       _h_ = match_end(0),
       _i_ =
         split
          ([0,
            caml_call3(Stdlib_String[16], text, start, pos - start | 0),
            accu],
           _h_,
           n - 1 | 0);
      return _i_;
     }
     catch(_j_){
      var _g_ = caml_wrap_exception(_j_);
      if(_g_ === Stdlib[8]) return [0, string_after(text, start), accu];
      throw caml_maybe_attach_backtrace(_g_, 0);
     }
    }
    if(runtime.caml_string_equal(text, cst$1)) return 0;
    var _f_ = split(0, 0, num);
    return caml_call1(Stdlib_List[10], _f_);
   }
   function split_delim(expr, text){
    return bounded_split_delim(expr, text, 0);
   }
   function bounded_full_split(expr, text, num){
    function split(accu, start, n){
     if(caml_ml_string_length(text) <= start) return accu;
     if(1 === n) return [0, [0, string_after(text, start)], accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       s = matched_string(text);
      if(start < pos)
       var
        _c_ = match_end(0),
        _d_ =
          split
           ([0,
             [1, s],
             [0,
              [0, caml_call3(Stdlib_String[16], text, start, pos - start | 0)],
              accu]],
            _c_,
            n - 1 | 0);
      else
       var _d_ = split([0, [1, s], accu], match_end(0), n - 1 | 0);
      return _d_;
     }
     catch(_e_){
      var _b_ = caml_wrap_exception(_e_);
      if(_b_ === Stdlib[8]) return [0, [0, string_after(text, start)], accu];
      throw caml_maybe_attach_backtrace(_b_, 0);
     }
    }
    var _a_ = split(0, 0, num);
    return caml_call1(Stdlib_List[10], _a_);
   }
   function full_split(expr, text){return bounded_full_split(expr, text, 0);}
   var
    Re_Str =
      [0,
       regexp,
       regexp_case_fold,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_backward,
       string_partial_match,
       matched_string,
       match_beginning,
       match_end,
       matched_group,
       group_beginning,
       group_end,
       global_replace,
       replace_first,
       global_substitute,
       substitute_first,
       replace_matched,
       split,
       bounded_split,
       split_delim,
       bounded_split_delim,
       full_split,
       bounded_full_split,
       string_before,
       string_after,
       first_chars,
       last_chars];
   runtime.caml_register_global(14, Re_Str, "Re__Str");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Replace
//# unitInfo: Requires: Re__Compile, Re__Group, Stdlib, Stdlib__Buffer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Re_replace$1 = "Re.replace",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Compile = global_data.Re__Compile,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Re_Group = global_data.Re__Group,
    Stdlib = global_data.Stdlib,
    cst_Re_replace = cst_Re_replace$1,
    cst_Re_replace$0 = cst_Re_replace$1;
   function replace(opt, len, _a_, re, f, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(_a_) var sth$0 = _a_[1], all = sth$0; else var all = 1;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_replace);
    if(len){
     var
      l = len[1],
      _b_ = l < 0 ? 1 : 0,
      _c_ = _b_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_c_) caml_call1(Stdlib[1], cst_Re_replace$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    var
     buf = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s)),
     pos$0 = pos,
     on_match = 0;
    for(;;){
     if(pos$0 <= limit){
      var
       match =
         caml_call6(Re_Compile[1], 1, 0, re, s, pos$0, limit - pos$0 | 0);
      if(typeof match === "number")
       caml_call4(Stdlib_Buffer[18], buf, s, pos$0, limit - pos$0 | 0);
      else if(0 === match[0]){
       var
        substr = match[1],
        match$0 = caml_call2(Re_Group[3], substr, 0),
        p2 = match$0[2],
        p1 = match$0[1];
       if(pos$0 === p1 && p1 === p2 && on_match){
        if(p2 < limit){
         var _d_ = caml_string_get(s, p2);
         caml_call2(Stdlib_Buffer[12], buf, _d_);
        }
        var pos$1 = p2 + 1 | 0, pos$0 = pos$1, on_match = 0;
        continue;
       }
       caml_call4(Stdlib_Buffer[18], buf, s, pos$0, p1 - pos$0 | 0);
       var replacing = caml_call1(f, substr);
       caml_call2(Stdlib_Buffer[16], buf, replacing);
       if(all){
        var on_match$0 = p1 !== p2 ? 1 : 0;
        if(p1 === p2){
         if(p2 < limit){
          var _e_ = caml_string_get(s, p2);
          caml_call2(Stdlib_Buffer[12], buf, _e_);
         }
         var pos$2 = p2 + 1 | 0;
        }
        else
         var pos$2 = p2;
        var pos$0 = pos$2, on_match = on_match$0;
        continue;
       }
       caml_call4(Stdlib_Buffer[18], buf, s, p2, limit - p2 | 0);
      }
     }
     return caml_call1(Stdlib_Buffer[2], buf);
    }
   }
   function replace_string(pos, len, all, re, by, s){
    return replace(pos, len, all, re, function(param){return by;}, s);
   }
   var Re_Replace = [0, replace, replace_string];
   runtime.caml_register_global(6, Re_Replace, "Re__Replace");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Glob
//# unitInfo: Requires: Re__Core, Re__Parse_buffer, Stdlib, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    beg = [0, cst$0, 0],
    cst = "/**",
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Re_Parse_buffer = global_data.Re__Parse_buffer,
    Parse_error = [248, "Re__Glob.Parse_error", runtime.caml_fresh_oo_id(0)],
    _h_ = [0, 1],
    _g_ = [0, 1],
    _e_ = [0, 47, [0, 92, 0]],
    _f_ = [0, 47, 0],
    _c_ = [0, cst$0, 0],
    _d_ = [0, cst$0, 0],
    _b_ = [0, 47],
    _a_ = [0, 45];
   function mul(l$0, l){
    function _ae_(s){
     function _ag_(s$0){return caml_call2(Stdlib[28], s, s$0);}
     return caml_call2(Stdlib_List[20], _ag_, l);
    }
    var _af_ = caml_call2(Stdlib_List[20], _ae_, l$0);
    return caml_call1(Stdlib_List[15], _af_);
   }
   function explicit_period(t){
    var _aa_ = t[7];
    if(_aa_){
     var _ab_ = t[3];
     if(_ab_)
      var _ac_ = _ab_;
     else
      var _ad_ = t[4], _ac_ = _ad_ ? t[5] : _ad_;
    }
    else
     var _ac_ = _aa_;
    return _ac_;
   }
   function slashes(t){return t[6] ? _e_ : _f_;}
   function append(opt, t, piece){
    if(opt)
     var sth = opt[1], am_at_start_of_component = sth;
    else
     var am_at_start_of_component = 0;
    return [0,
            [0, piece, t[1]],
            t[2],
            0,
            am_at_start_of_component,
            t[5],
            t[6],
            t[7]];
   }
   function next(t){
    var match = t[2];
    if(! match) return 0;
    var remaining = match[2], piece = match[1];
    return [0, [0, piece, [0, t[1], remaining, t[3], t[4], t[5], t[6], t[7]]]];
   }
   function one(explicit_slash, slashes, explicit_period){
    var
     _X_ = 0,
     _Y_ = explicit_period ? [0, caml_call1(Re_Core[26], 46), 0] : 0,
     _Z_ = [0, _Y_, _X_],
     ___ =
       explicit_slash ? caml_call2(Stdlib_List[20], Re_Core[26], slashes) : 0,
     _$_ = caml_call1(Stdlib_List[14], [0, ___, _Z_]);
    return caml_call1(Re_Core[60], _$_);
   }
   function enclosed(enclosed){
    if(0 === enclosed[0]){
     var c = enclosed[1];
     return caml_call1(Re_Core[26], c);
    }
    var high = enclosed[2], low = enclosed[1];
    return caml_call2(Re_Core[57], low, high);
   }
   function enclosed_set(explicit_slash, slashes, explicit_period, kind, set){
    var
     set$0 = caml_call2(Stdlib_List[20], enclosed, set),
     enclosure =
       596216810 <= kind
        ? caml_call1(Re_Core[27], set$0)
        : caml_call1(Re_Core[60], set$0),
     _W_ =
       [0, enclosure, [0, one(explicit_slash, slashes, explicit_period), 0]];
    return caml_call1(Re_Core[58], _W_);
   }
   function exactly(state, c){
    var
     slashes$0 = slashes(state),
     am_at_start_of_component = caml_call2(Stdlib_List[37], c, slashes$0),
     chars = am_at_start_of_component ? slashes$0 : [0, c, 0],
     _V_ = caml_call2(Stdlib_List[20], Re_Core[26], chars);
    return append
            ([0, am_at_start_of_component],
             state,
             caml_call1(Re_Core[27], _V_));
   }
   function many_many(state){
    var
     _J_ = state[7],
     explicit_period$0 = _J_ ? state[5] : _J_,
     first_explicit_period = explicit_period(state),
     slashes$0 = slashes(state);
    function match_component(explicit_period){
     var
      _S_ = one(1, slashes$0, 0),
      _T_ = [0, caml_call1(Re_Core[31], _S_), 0],
      _U_ = [0, one(1, slashes$0, explicit_period), _T_];
     return caml_call1(Re_Core[28], _U_);
    }
    var
     _K_ = match_component(explicit_period$0),
     _L_ = [0, caml_call1(Re_Core[34], _K_), 0],
     _M_ = caml_call2(Stdlib_List[20], Re_Core[26], slashes$0),
     _N_ = [0, caml_call1(Re_Core[27], _M_), _L_],
     _O_ = caml_call1(Re_Core[28], _N_),
     _P_ = [0, caml_call1(Re_Core[31], _O_), 0],
     _Q_ = match_component(first_explicit_period),
     _R_ = [0, caml_call1(Re_Core[34], _Q_), _P_];
    return append(0, state, caml_call1(Re_Core[28], _R_));
   }
   function glob(opt, _o_, _n_, _m_, _l_, _k_, str){
    if(opt) var sth = opt[1], anchored = sth; else var anchored = 0;
    if(_o_) var sth$0 = _o_[1], pathname = sth$0; else var pathname = 1;
    if(_n_)
     var sth$1 = _n_[1], match_backslashes = sth$1;
    else
     var match_backslashes = 0;
    if(_m_) var sth$2 = _m_[1], period = sth$2; else var period = 1;
    if(_l_)
     var sth$3 = _l_[1], expand_braces = sth$3;
    else
     var expand_braces = 0;
    if(_k_)
     var sth$4 = _k_[1], double_asterisk = sth$4;
    else
     var double_asterisk = 1;
    function to_re(s){
     var buf = caml_call1(Re_Parse_buffer[2], s);
     function eos(param){return caml_call1(Re_Parse_buffer[5], buf);}
     function read(c){return caml_call2(Re_Parse_buffer[9], buf, c);}
     function char$0(param){
      read(92);
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      return caml_call1(Re_Parse_buffer[8], buf);
     }
     function enclosed(param){
      var s = 0;
      for(;;){
       if(0 !== s && read(93)) return s;
       var c = char$0(0);
       if(read(45)){
        if(read(93)) return [0, [0, c], [0, _a_, s]];
        var c$0 = char$0(0), s$0 = [0, [1, c, c$0], s], s = s$0;
       }
       else
        var s$1 = [0, [0, c], s], s = s$1;
      }
     }
     var pieces = 0;
     for(;;){
      if(eos(0)) break;
      a:
      {
       if(double_asterisk && caml_call2(Re_Parse_buffer[11], buf, cst)){
        var _s_ = eos(0) ? [0, _b_, pieces] : pieces, pieces$0 = [0, 2, _s_];
        break a;
       }
       if(read(42)){
        b:
        {if(double_asterisk && read(42)){var _t_ = 2; break b;} var _t_ = 1;}
        var pieces$0 = [0, _t_, pieces];
       }
       else if(read(63))
        var pieces$0 = [0, 0, pieces];
       else if(read(91)){
        if(! read(94) && ! read(33)){
         var pieces$0 = [0, [1, enclosed(0)], pieces];
         break a;
        }
        var pieces$0 = [0, [2, enclosed(0)], pieces];
       }
       else
        var pieces$0 = [0, [0, char$0(0)], pieces];
      }
      var pieces = pieces$0;
     }
     var
      remaining = caml_call1(Stdlib_List[10], pieces),
      state = [0, 0, remaining, 1, 1, pathname, match_backslashes, period],
      state$8 = state;
     for(;;){
      var match$1 = next(state$8);
      if(! match$1){
       var
        _u_ = caml_call1(Stdlib_List[10], state$8[1]),
        re = caml_call1(Re_Core[28], _u_);
       return anchored ? caml_call1(Re_Core[46], re) : re;
      }
      var
       match$2 = match$1[1],
       state$9 = match$2[2],
       piece = match$2[1],
       explicit_slash$0 = state$9[5],
       explicit_period$1 = explicit_period(state$9),
       slashes$1 = slashes(state$9);
      if(typeof piece === "number")
       switch(piece){
         case 0:
          var
           state$10 =
             append
              (0,
               state$9,
               one(explicit_slash$0, slashes$1, explicit_period$1));
          break;
         case 1:
          var
           explicit_slash = state$9[5],
           explicit_period$0 = explicit_period(state$9),
           slashes$0 = slashes(state$9);
          if(explicit_period$0)
           if(explicit_slash){
            var
             _v_ = one(1, slashes$0, 0),
             _w_ = [0, caml_call1(Re_Core[31], _v_), 0],
             _x_ = [0, one(1, slashes$0, 1), _w_],
             not_empty = caml_call1(Re_Core[28], _x_),
             maybe_empty = caml_call1(Re_Core[34], not_empty),
             enclosed_set$1 =
               function(slashes, not_empty){
                function enclosed_set$0(state, kind, set){
                 var
                  _G_ =
                    [0,
                     not_empty,
                     [0, enclosed_set(1, slashes, 0, kind, set), 0]],
                  _H_ = [0, caml_call1(Re_Core[28], _G_), 0],
                  _I_ = [0, enclosed_set(1, slashes, 1, kind, set), _H_];
                 return append(0, state, caml_call1(Re_Core[27], _I_));
                }
                return enclosed_set$0;
               },
             enclosed_set$0 = enclosed_set$1(slashes$0, not_empty);
            a:
            {
             b:
             {
              c:
              {
               d:
               {
                var state$0 = state$9;
                for(;;){
                 var match = next(state$0);
                 if(! match) break;
                 var _y_ = match[1], match$0 = _y_[1];
                 if(typeof match$0 !== "number") break d;
                 switch(match$0){
                   case 0:
                    break b;
                   case 1:
                    var state$2 = _y_[2], state$0 = state$2; break;
                   default: break c;
                 }
                }
                var _z_ = append(0, state$0, maybe_empty);
                break a;
               }
               switch(match$0[0]){
                 case 0:
                  var
                   state$4 = _y_[2],
                   c = match$0[1],
                   not_empty$0 = 46 === c ? not_empty : maybe_empty,
                   state$5 = append(0, state$4, not_empty$0),
                   _z_ = exactly(state$5, c);
                  break a;
                 case 1:
                  var
                   state$6 = _y_[2],
                   enclosed$0 = match$0[1],
                   _z_ = enclosed_set$0(state$6, 596216810, enclosed$0);
                  break a;
                 default:
                  var
                   state$7 = _y_[2],
                   enclosed$1 = match$0[1],
                   _z_ = enclosed_set$0(state$7, -188280562, enclosed$1);
                  break a;
               }
              }
              var state$3 = _y_[2], _z_ = many_many(state$3);
              break a;
             }
             var state$1 = _y_[2], _z_ = append(0, state$1, not_empty);
            }
            var _F_ = _z_;
           }
           else
            var
             _A_ = one(0, slashes$0, 0),
             _B_ = [0, caml_call1(Re_Core[31], _A_), 0],
             _C_ = [0, one(0, slashes$0, explicit_period$0), _B_],
             _D_ = caml_call1(Re_Core[28], _C_),
             _F_ = append(0, state$9, caml_call1(Re_Core[34], _D_));
          else
           var
            _E_ = one(explicit_slash, slashes$0, explicit_period$0),
            _F_ = append(0, state$9, caml_call1(Re_Core[31], _E_));
          var state$10 = _F_;
          break;
         default: var state$10 = many_many(state$9);
       }
      else
       switch(piece[0]){
         case 0:
          var c$0 = piece[1], state$10 = exactly(state$9, c$0); break;
         case 1:
          var
           enclosed$2 = piece[1],
           state$10 =
             append
              (0,
               state$9,
               enclosed_set
                (explicit_slash$0,
                 slashes$1,
                 explicit_period$1,
                 596216810,
                 enclosed$2));
          break;
         default:
          var
           enclosed$3 = piece[1],
           state$10 =
             append
              (0,
               state$9,
               enclosed_set
                (explicit_slash$0,
                 slashes$1,
                 explicit_period$1,
                 -188280562,
                 enclosed$3));
       }
      var state$8 = state$10;
     }
    }
    if(! expand_braces) return to_re(str);
    var l = runtime.caml_ml_string_length(str);
    function expl(inner, s, i, acc, beg$0){
     var s$0 = s, i$0 = i, acc$0 = acc, beg$1 = beg$0;
     for(;;){
      if(l <= i$0){
       if(inner) throw caml_maybe_attach_backtrace(Parse_error, 1);
       return [0,
               mul
                (beg$1,
                 [0,
                  caml_call3(Stdlib_String[16], str, s$0, i$0 - s$0 | 0),
                  0]),
               i$0];
      }
      var match = runtime.caml_string_get(str, i$0);
      if(44 === match){
       if(inner){
        var
         _q_ =
           mul
            (beg$1,
             [0, caml_call3(Stdlib_String[16], str, s$0, i$0 - s$0 | 0), 0]),
         acc$1 = caml_call2(Stdlib[37], _q_, acc$0),
         i$1 = i$0 + 1 | 0,
         s$1 = i$0 + 1 | 0,
         s$0 = s$1,
         i$0 = i$1,
         acc$0 = acc$1,
         beg$1 = beg;
        continue;
       }
      }
      else
       if(123 <= match){
        if(126 > match)
         switch(match - 123 | 0){
           case 0:
            var
             match$0 = expl(1, i$0 + 1 | 0, i$0 + 1 | 0, 0, _c_),
             i$3 = match$0[2],
             t = match$0[1],
             beg$2 =
               mul
                (beg$1,
                 mul
                  ([0,
                    caml_call3(Stdlib_String[16], str, s$0, i$0 - s$0 | 0),
                    0],
                   t)),
             s$0 = i$3,
             i$0 = i$3,
             beg$1 = beg$2;
            continue;
           case 1: break;
           default:
            if(inner){
             var
              _r_ =
                mul
                 (beg$1,
                  [0,
                   caml_call3(Stdlib_String[16], str, s$0, i$0 - s$0 | 0),
                   0]);
             return [0, caml_call2(Stdlib[37], _r_, acc$0), i$0 + 1 | 0];
            }
         }
       }
       else if(92 === match){var i$4 = i$0 + 2 | 0, i$0 = i$4; continue;}
      var i$2 = i$0 + 1 | 0, i$0 = i$2;
     }
    }
    var
     _i_ = expl(0, 0, 0, 0, _d_)[1],
     _j_ = caml_call1(Stdlib_List[10], _i_),
     _p_ = caml_call2(Stdlib_List[20], to_re, _j_);
    return caml_call1(Re_Core[27], _p_);
   }
   function glob$0(anchored, period, s){
    return glob(anchored, 0, 0, [0, period], 0, 0, s);
   }
   function globx(anchored, s){return glob(anchored, 0, 0, 0, _g_, 0, s);}
   function globx$0(anchored, period, s){
    return glob(anchored, 0, 0, [0, period], _h_, 0, s);
   }
   var Re_Glob = [0, Parse_error, glob, glob$0, globx, globx$0];
   runtime.caml_register_global(16, Re_Glob, "Re__Glob");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Posix_class
//# unitInfo: Requires: Re__Core, Re__Parse_buffer, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_alnum = "alnum",
    cst_alpha = "alpha",
    cst_ascii = "ascii",
    cst_blank = "blank",
    cst_cntrl = "cntrl",
    cst_digit = "digit",
    cst_graph = "graph",
    cst_lower = "lower",
    cst_print = "print",
    cst_punct = "punct",
    cst_space = "space",
    cst_upper = "upper",
    cst_word = "word",
    cst_xdigit = "xdigit",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ":]",
    names =
      caml_list_of_js_array
       ([cst_alpha,
         cst_alnum,
         cst_ascii,
         cst_blank,
         cst_cntrl,
         cst_digit,
         cst_lower,
         cst_print,
         cst_space,
         cst_upper,
         cst_word,
         cst_punct,
         cst_graph,
         cst_xdigit]),
    Re_Parse_buffer = global_data.Re__Parse_buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Re_Core = global_data.Re__Core,
    cst_Invalid_pcre_class = "Invalid pcre class: ";
   function of_name(class$0){
    var switch$0 = runtime.caml_string_compare(class$0, cst_lower);
    if(0 <= switch$0){
     if(0 >= switch$0) return Re_Core[71];
     if(! caml_string_notequal(class$0, cst_print)) return Re_Core[72];
     if(! caml_string_notequal(class$0, cst_punct)) return Re_Core[73];
     if(! caml_string_notequal(class$0, cst_space)) return Re_Core[74];
     if(! caml_string_notequal(class$0, cst_upper)) return Re_Core[75];
     if(! caml_string_notequal(class$0, cst_word)) return Re_Core[64];
     if(! caml_string_notequal(class$0, cst_xdigit)) return Re_Core[76];
    }
    else{
     if(! caml_string_notequal(class$0, cst_alnum)) return Re_Core[63];
     if(! caml_string_notequal(class$0, cst_alpha)) return Re_Core[65];
     if(! caml_string_notequal(class$0, cst_ascii)) return Re_Core[66];
     if(! caml_string_notequal(class$0, cst_blank)) return Re_Core[67];
     if(! caml_string_notequal(class$0, cst_cntrl)) return Re_Core[68];
     if(! caml_string_notequal(class$0, cst_digit)) return Re_Core[69];
     if(! caml_string_notequal(class$0, cst_graph)) return Re_Core[70];
    }
    var _d_ = caml_call2(Stdlib[28], cst_Invalid_pcre_class, class$0);
    return caml_call1(Stdlib[1], _d_);
   }
   function parse(buf){
    var
     accept = caml_call1(Re_Parse_buffer[9], buf),
     accept_s = caml_call1(Re_Parse_buffer[11], buf);
    if(! caml_call1(accept, 58)) return 0;
    var compl = caml_call1(accept, 94);
    try{var cls = caml_call2(Stdlib_List[39], accept_s, names);}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_ === Stdlib[8])
      throw caml_maybe_attach_backtrace(Re_Parse_buffer[1], 1);
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
    if(1 - caml_call1(accept_s, cst))
     throw caml_maybe_attach_backtrace(Re_Parse_buffer[1], 1);
    var
     posix_class = of_name(cls),
     _b_ = compl ? caml_call1(Re_Core[60], [0, posix_class, 0]) : posix_class;
    return [0, _b_];
   }
   var Re_Posix_class = [0, names, of_name, parse];
   runtime.caml_register_global(21, Re_Posix_class, "Re__Posix_class");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Perl
//# unitInfo: Requires: Re__Core, Re__Parse_buffer, Re__Posix_class, Stdlib, Stdlib__Buffer, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Re_Core = global_data.Re__Core,
    Re_Parse_buffer = global_data.Re__Parse_buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Re_Posix_class = global_data.Re__Posix_class,
    Parse_error = Re_Parse_buffer[1],
    Not_supported =
      [248, "Re__Perl.Not_supported", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, 748194550, 8],
    _b_ = [0, 748194550, 10],
    _c_ = [0, 748194550, 13],
    _d_ = [0, 748194550, 9];
   function re(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    var
     ungreedy = caml_call2(Stdlib_List[38], -243745063, opts),
     dotall = caml_call2(Stdlib_List[38], -424303016, opts),
     dollar_endonly = caml_call2(Stdlib_List[38], -712595228, opts),
     multiline = caml_call2(Stdlib_List[38], 1071952589, opts),
     buf = caml_call1(Re_Parse_buffer[2], s),
     accept = caml_call1(Re_Parse_buffer[9], buf);
    function eos(param){return caml_call1(Re_Parse_buffer[5], buf);}
    function test(c){return caml_call2(Re_Parse_buffer[6], buf, c);}
    function get(param){return caml_call1(Re_Parse_buffer[8], buf);}
    function greedy_mod(r){
     var gr = caml_call1(accept, 63), gr$0 = ungreedy ? 1 - gr : gr;
     return gr$0 ? caml_call1(Re_Core[51], r) : caml_call1(Re_Core[50], r);
    }
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! caml_call1(accept, 124)) return left$0;
      var
       _r_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[27], _r_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if(! eos(0) && ! test(124) && ! test(41)){
       var r = atom(0);
       if(caml_call1(accept, 42))
        var _q_ = greedy_mod(caml_call1(Re_Core[31], r));
       else if(caml_call1(accept, 43))
        var _q_ = greedy_mod(caml_call1(Re_Core[32], r));
       else if(caml_call1(accept, 63))
        var _q_ = greedy_mod(caml_call1(Re_Core[34], r));
       else if(caml_call1(accept, 123)){
        var match = caml_call1(Re_Parse_buffer[12], buf);
        if(match){
         var
          i = match[1],
          j =
            caml_call1(accept, 44)
             ? caml_call1(Re_Parse_buffer[12], buf)
             : [0, i];
         if(1 - caml_call1(accept, 125))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         if(j){
          var j$0 = j[1];
          if(j$0 < i) throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var _q_ = greedy_mod(caml_call3(Re_Core[33], r, i, j));
        }
        else{caml_call1(Re_Parse_buffer[4], buf); var _q_ = r;}
       }
       else
        var _q_ = r;
       var left$0 = [0, _q_, left], left = left$0;
       continue;
      }
      var _p_ = caml_call1(Stdlib_List[10], left);
      return caml_call1(Re_Core[28], _p_);
     }
    }
    function atom(param){
     if(caml_call1(accept, 46)) return dotall ? Re_Core[61] : Re_Core[62];
     if(! caml_call1(accept, 40)){
      if(caml_call1(accept, 94)) return multiline ? Re_Core[35] : Re_Core[39];
      if(caml_call1(accept, 36))
       return multiline
               ? Re_Core[36]
               : dollar_endonly ? Re_Core[41] : Re_Core[40];
      if(caml_call1(accept, 91)){
       if(caml_call1(accept, 94)){
        var _i_ = bracket(0);
        return caml_call1(Re_Core[60], _i_);
       }
       var _j_ = bracket(0);
       return caml_call1(Re_Core[27], _j_);
      }
      if(caml_call1(accept, 92)){
       if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
       var c = get(0), switcher = c - 48 | 0;
       if(74 >= switcher >>> 0)
        switch(switcher){
          case 17:
           return Re_Core[39];
          case 18:
           return Re_Core[45];
          case 20:
           return caml_call1(Re_Core[60], [0, Re_Core[69], 0]);
          case 23:
           return Re_Core[42];
          case 35:
           return caml_call1(Re_Core[60], [0, Re_Core[74], 0]);
          case 39:
           var _k_ = [0, caml_call1(Re_Core[26], 95), 0];
           return caml_call1(Re_Core[60], [0, Re_Core[63], _k_]);
          case 42:
           return Re_Core[41];
          case 50:
           return caml_call1
                   (Re_Core[27], [0, Re_Core[37], [0, Re_Core[38], 0]]);
          case 52:
           return Re_Core[69];
          case 53:
           return caml_call1(Re_Core[26], 27);
          case 54:
           return caml_call1(Re_Core[26], 12);
          case 62:
           return caml_call1(Re_Core[26], 10);
          case 66:
           return caml_call1(Re_Core[26], 13);
          case 67:
           return Re_Core[74];
          case 68:
           return caml_call1(Re_Core[26], 9);
          case 71:
           var _l_ = [0, caml_call1(Re_Core[26], 95), 0];
           return caml_call1(Re_Core[27], [0, Re_Core[63], _l_]);
          case 72:
           var
            c1 = hexdigit(0),
            c2 = hexdigit(0),
            code = (c1 * 16 | 0) + c2 | 0,
            _m_ = caml_call1(Stdlib[29], code);
           return caml_call1(Re_Core[26], _m_);
          case 74:
           return Re_Core[40];
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
           throw caml_maybe_attach_backtrace(Not_supported, 1);
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48: break;
          default: throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
       return caml_call1(Re_Core[26], c);
      }
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$0 = get(0);
      a:
      {
       if(64 <= c$0){
        if(92 === c$0 || 123 === c$0) break a;
       }
       else
        if(44 <= c$0){if(63 <= c$0) break a;} else if(42 <= c$0) break a;
       return caml_call1(Re_Core[26], c$0);
      }
      throw caml_maybe_attach_backtrace(Parse_error, 1);
     }
     if(! caml_call1(accept, 63)){
      var r$1 = regexp(0);
      if(1 - caml_call1(accept, 41))
       throw caml_maybe_attach_backtrace(Parse_error, 1);
      return caml_call2(Re_Core[52], 0, r$1);
     }
     if(caml_call1(accept, 58)){
      var r = regexp(0);
      if(1 - caml_call1(accept, 41))
       throw caml_maybe_attach_backtrace(Parse_error, 1);
      return r;
     }
     if(! caml_call1(accept, 35)){
      if(! caml_call1(accept, 60))
       throw caml_maybe_attach_backtrace(Parse_error, 1);
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$1 = get(0), _n_ = c$1 - 91 | 0;
      a:
      {
       if(5 < _n_ >>> 0){
        if(57 < _n_ + 26 >>> 0) break a;
       }
       else if(4 !== _n_) break a;
       var b = caml_call1(Stdlib_Buffer[1], 32);
       caml_call2(Stdlib_Buffer[12], b, c$1);
       for(;;){
        if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
        var c$2 = get(0);
        b:
        {
         if(65 <= c$2){
          var _o_ = c$2 - 91 | 0;
          if(5 < _o_ >>> 0){
           if(32 <= _o_) break b;
          }
          else if(4 !== _o_) break b;
         }
         else{
          if(58 <= c$2){
           if(62 !== c$2) break b;
           var name = caml_call1(Stdlib_Buffer[2], b), r$0 = regexp(0);
           if(1 - caml_call1(accept, 41))
            throw caml_maybe_attach_backtrace(Parse_error, 1);
           return caml_call2(Re_Core[52], [0, name], r$0);
          }
          if(48 > c$2) break b;
         }
         caml_call2(Stdlib_Buffer[12], b, c$2);
         continue;
        }
        throw caml_maybe_attach_backtrace(Parse_error, 1);
       }
      }
      throw caml_maybe_attach_backtrace(Parse_error, 1);
     }
     for(;;){
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      if(caml_call1(accept, 41)) return Re_Core[30];
      caml_call1(Re_Parse_buffer[3], buf);
     }
    }
    function hexdigit(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var d = get(0);
     if(65 <= d){
      if(97 <= d){
       if(103 > d) return (d - 97 | 0) + 10 | 0;
      }
      else if(71 > d) return (d - 65 | 0) + 10 | 0;
     }
     else if(9 >= d - 48 >>> 0) return d - 48 | 0;
     throw caml_maybe_attach_backtrace(Parse_error, 1);
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && caml_call1(accept, 93)) return s$0;
      var match = char$0(0);
      if(748194550 <= match[1]){
       var c = match[2];
       if(caml_call1(accept, 45)){
        if(caml_call1(accept, 93)){
         var _g_ = [0, caml_call1(Re_Core[26], 45), s$0];
         return [0, caml_call1(Re_Core[26], c), _g_];
        }
        var match$0 = char$0(0);
        if(748194550 <= match$0[1])
         var
          c$0 = match$0[2],
          s$1 = [0, caml_call2(Re_Core[57], c, c$0), s$0];
        else
         var
          st = match$0[2],
          _h_ = [0, caml_call1(Re_Core[26], 45), [0, st, s$0]],
          s$1 = [0, caml_call1(Re_Core[26], c), _h_];
        var s$0 = s$1;
       }
       else
        var s$2 = [0, caml_call1(Re_Core[26], c), s$0], s$0 = s$2;
      }
      else
       var st$0 = match[2], s$3 = [0, st$0, s$0], s$0 = s$3;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c = get(0);
     if(91 === c){
      if(caml_call1(accept, 61))
       throw caml_maybe_attach_backtrace(Not_supported, 1);
      var match = caml_call1(Re_Posix_class[3], buf);
      if(match){var set = match[1]; return [0, 4150146, set];}
      if(! caml_call1(accept, 46)) return [0, 748194550, c];
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$0 = get(0);
      if(1 - caml_call1(accept, 46))
       throw caml_maybe_attach_backtrace(Not_supported, 1);
      if(1 - caml_call1(accept, 93))
       throw caml_maybe_attach_backtrace(Parse_error, 1);
      return [0, 748194550, c$0];
     }
     if(92 !== c) return [0, 748194550, c];
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c$1 = get(0);
     if(58 <= c$1){
      if(123 > c$1)
       switch(c$1 - 58 | 0){
         case 10:
          return [0, 4150146, caml_call1(Re_Core[60], [0, Re_Core[69], 0])];
         case 25:
          return [0, 4150146, caml_call1(Re_Core[60], [0, Re_Core[74], 0])];
         case 29:
          var _e_ = [0, caml_call1(Re_Core[26], 95), 0];
          return [0, 4150146, caml_call1(Re_Core[60], [0, Re_Core[63], _e_])];
         case 40:
          return _a_;
         case 42:
          return [0, 4150146, Re_Core[69]];
         case 52:
          return _b_;
         case 56:
          return _c_;
         case 57:
          return [0, 4150146, Re_Core[74]];
         case 58:
          return _d_;
         case 61:
          var _f_ = [0, caml_call1(Re_Core[26], 95), 0];
          return [0, 4150146, caml_call1(Re_Core[27], [0, Re_Core[63], _f_])];
         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 33:
         case 34:
         case 35:
         case 36:
         case 37:
         case 38: break;
         default: throw caml_maybe_attach_backtrace(Parse_error, 1);
       }
     }
     else if(48 <= c$1) throw caml_maybe_attach_backtrace(Not_supported, 1);
     return [0, 748194550, c$1];
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    var
     r =
       caml_call2(Stdlib_List[38], 616470068, opts)
        ? caml_call1(Re_Core[28], [0, Re_Core[42], [0, res, 0]])
        : res,
     r$0 =
       caml_call2(Stdlib_List[38], 604571177, opts)
        ? caml_call1(Re_Core[78], r)
        : r;
    return r$0;
   }
   var compile = Re_Core[2];
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    return caml_call1(compile, re([0, opts], s));
   }
   var Re_Perl = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(11, Re_Perl, "Re__Perl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Pcre
//# unitInfo: Requires: Re__Core, Re__Perl, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Re_Perl = global_data.Re__Perl,
    Parse_error = Re_Perl[1],
    Not_supported = Re_Perl[2],
    _a_ = [0, -1, -1];
   function re(opt, pat){
    if(opt) var sth = opt[1], flags = sth; else var flags = 0;
    function _x_(param){
     return 601676297 <= param
             ? 613575188 <= param ? 616470068 : 604571177
             : 426394317 <= param ? 1071952589 : -424303016;
    }
    var opts = caml_call2(Stdlib_List[20], _x_, flags);
    return caml_call2(Re_Perl[3], [0, opts], pat);
   }
   function regexp(flags, pat){
    var _w_ = re(flags, pat);
    return caml_call1(Re_Core[2], _w_);
   }
   function extract(rex, s){
    var _v_ = caml_call4(Re_Core[5], 0, 0, rex, s);
    return caml_call1(Re_Core[1][6], _v_);
   }
   function exec(rex, pos, s){return caml_call4(Re_Core[5], pos, 0, rex, s);}
   function get_substring(s, i){return caml_call2(Re_Core[1][1], s, i);}
   function names(rex){
    var _r_ = caml_call1(Re_Core[4], rex);
    function _s_(_u_){return _u_[1];}
    var _t_ = caml_call1(caml_call1(Stdlib_List[20], _s_), _r_);
    return caml_call1(Stdlib_Array[10], _t_);
   }
   function get_named_substring(rex, name, s){
    var param = caml_call1(Re_Core[4], rex);
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var match = param[1], rem = param[2], i = match[2], n = match[1];
     if(runtime.caml_string_equal(n, name))
      try{var _p_ = get_substring(s, i); return _p_;}
      catch(_q_){
       var _o_ = caml_wrap_exception(_q_);
       if(_o_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_o_, 0);
       var param = rem;
      }
     else
      var rem$0 = param[2], param = rem$0;
    }
   }
   function get_substring_ofs(s, i){return caml_call2(Re_Core[1][3], s, i);}
   function pmatch(rex, s){return caml_call4(Re_Core[7], 0, 0, rex, s);}
   function substitute(rex, subst, str){
    var b = caml_call1(Stdlib_Buffer[1], 1024), pos = 0, on_match = 0;
    for(;;){
     a:
     if(caml_call4(Re_Core[7], [0, pos], 0, rex, str)){
      var
       ss = caml_call4(Re_Core[5], [0, pos], 0, rex, str),
       match = caml_call2(Re_Core[1][3], ss, 0),
       fin = match[2],
       start = match[1];
      if(on_match && start === pos && start === fin){
       if(pos >= caml_ml_string_length(str)) break a;
       var _l_ = caml_string_get(str, pos);
       caml_call2(Stdlib_Buffer[12], b, _l_);
       var pos$0 = pos + 1 | 0, pos = pos$0, on_match = 0;
       continue;
      }
      var pat = caml_call2(Re_Core[1][1], ss, 0);
      caml_call4(Stdlib_Buffer[18], b, str, pos, start - pos | 0);
      var _m_ = caml_call1(subst, pat);
      caml_call2(Stdlib_Buffer[16], b, _m_);
      if(start !== fin){var pos = fin, on_match = 1; continue;}
      if(fin < caml_ml_string_length(str)){
       var _n_ = caml_string_get(str, fin);
       caml_call2(Stdlib_Buffer[12], b, _n_);
       var pos$1 = fin + 1 | 0, pos = pos$1, on_match = 0;
       continue;
      }
     }
     else
      caml_call4
       (Stdlib_Buffer[18], b, str, pos, caml_ml_string_length(str) - pos | 0);
     return caml_call1(Stdlib_Buffer[2], b);
    }
   }
   function split(rex, str){
    function finish(str, last, accu){
     var
      accu$0 =
        [0,
         caml_call3
          (Stdlib_String[16],
           str,
           last,
           caml_ml_string_length(str) - last | 0),
         accu];
     return caml_call1(Stdlib_List[10], accu$0);
    }
    var accu = 0, last = 0, pos = 0, on_match = 0;
    for(;;){
     if(! caml_call4(Re_Core[7], [0, pos], 0, rex, str))
      return finish(str, last, accu);
     var
      ss = caml_call4(Re_Core[5], [0, pos], 0, rex, str),
      match = caml_call2(Re_Core[1][3], ss, 0),
      last$0 = match[2],
      start = match[1];
     if(on_match && start === pos && start === last$0){
      if(pos === caml_ml_string_length(str)) return finish(str, last, accu);
      var pos$0 = pos + 1 | 0, pos = pos$0, on_match = 0;
      continue;
     }
     var
      accu$0 =
        [0, caml_call3(Stdlib_String[16], str, last, start - last | 0), accu];
     if(start === last$0){
      if(last$0 === caml_ml_string_length(str))
       return finish(str, last$0, accu$0);
      var
       pos$1 = last$0 + 1 | 0,
       accu = accu$0,
       last = last$0,
       pos = pos$1,
       on_match = 0;
     }
     else
      var accu = accu$0, last = last$0, pos = last$0, on_match = 1;
    }
   }
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_create_bytes(len << 1),
     pos = [0, 0],
     _i_ = len - 1 | 0,
     _h_ = 0;
    if(_i_ >= 0){
     var i = _h_;
     for(;;){
      var c = runtime.caml_string_unsafe_get(s, i);
      a:
      {
       b:
       {
        if(91 <= c){
         var _j_ = c - 93 | 0;
         if(29 < _j_ >>> 0){
          if(32 <= _j_) break b;
         }
         else if(1 !== _j_) break b;
        }
        else
         if(47 <= c){
          if(63 !== c) break b;
         }
         else{
          if(36 > c) break b;
          switch(c - 36 | 0){case 1:case 2:case 3:case 8:case 9: break b;
          }
         }
        caml_bytes_unsafe_set(buf, pos[1], 92);
        pos[1]++;
        caml_bytes_unsafe_set(buf, pos[1], c);
        pos[1]++;
        break a;
       }
       caml_bytes_unsafe_set(buf, pos[1], c);
       pos[1]++;
      }
      var _k_ = i + 1 | 0;
      if(_i_ === i) break;
      var i = _k_;
     }
    }
    var len$0 = pos[1], r = caml_create_bytes(len$0);
    runtime.caml_blit_bytes(buf, 0, r, 0, len$0);
    return caml_call1(Stdlib_Bytes[44], r);
   }
   function full_split(opt, rex, s){
    if(opt) var sth = opt[1], max = sth; else var max = 0;
    if(0 === caml_ml_string_length(s)) return 0;
    if(1 === max) return [0, [0, s], 0];
    var results = caml_call4(Re_Core[21], 0, 0, rex, s);
    function _b_(param){
     if(936573133 <= param[1]){var s = param[2]; return [0, [0, s], 0];}
     var
      d = param[2],
      matches = caml_call1(Re_Core[1][7], d),
      delim = caml_call2(Re_Core[1][1], d, 0),
      l = [0, 0],
      _d_ = matches.length - 1 - 1 | 0,
      _c_ = 1;
     if(_d_ >= 1){
      var i = _c_;
      for(;;){
       var
        _e_ = l[1],
        _f_ =
          runtime.caml_equal(runtime.caml_check_bound(matches, i)[1 + i], _a_)
           ? 0
           : [2, i, caml_call2(Re_Core[1][1], d, i)];
       l[1] = [0, _f_, _e_];
       var _g_ = i + 1 | 0;
       if(_d_ === i) break;
       var i = _g_;
      }
     }
     return [0, [1, delim], caml_call1(Stdlib_List[10], l[1])];
    }
    var matches = caml_call2(Stdlib_List[20], _b_, results);
    return caml_call1(Stdlib_List[14], matches);
   }
   var
    Re_Pcre =
      [0,
       Parse_error,
       Not_supported,
       re,
       regexp,
       extract,
       exec,
       get_substring,
       names,
       get_named_substring,
       get_substring_ofs,
       pmatch,
       substitute,
       full_split,
       split,
       quote];
   runtime.caml_register_global(9, Re_Pcre, "Re__Pcre");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Posix
//# unitInfo: Requires: Re__Core, Re__Parse_buffer, Re__Posix_class, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Re_Parse_buffer = global_data.Re__Parse_buffer,
    Re_Posix_class = global_data.Re__Posix_class,
    Parse_error = Re_Parse_buffer[1],
    Not_supported =
      [248, "Re__Posix.Not_supported", runtime.caml_fresh_oo_id(0)];
   function re(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    var
     newline = caml_call2(Stdlib_List[38], -638074828, opts),
     buf = caml_call1(Re_Parse_buffer[2], s),
     accept = caml_call1(Re_Parse_buffer[9], buf);
    function eos(param){return caml_call1(Re_Parse_buffer[5], buf);}
    function test(c){return caml_call2(Re_Parse_buffer[6], buf, c);}
    function get(param){return caml_call1(Re_Parse_buffer[8], buf);}
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! caml_call1(accept, 124)) return left$0;
      var
       _n_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[27], _n_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if(! eos(0) && ! test(124) && ! test(41)){
       a:
       if(caml_call1(accept, 46))
        var r = newline ? Re_Core[62] : Re_Core[61];
       else if(caml_call1(accept, 40)){
        var r$0 = regexp(0);
        if(1 - caml_call1(accept, 41))
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        var r = caml_call2(Re_Core[52], 0, r$0);
       }
       else if(caml_call1(accept, 94))
        var r = newline ? Re_Core[35] : Re_Core[39];
       else if(caml_call1(accept, 36))
        var r = newline ? Re_Core[36] : Re_Core[40];
       else{
        if(! caml_call1(accept, 91)){
         if(! caml_call1(accept, 92)){
          if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
          var c$0 = get(0);
          b:
          {
           if(64 <= c$0){
            if(92 === c$0 || 123 === c$0) break b;
           }
           else
            if(44 <= c$0){if(63 <= c$0) break b;} else if(42 <= c$0) break b;
           var r = caml_call1(Re_Core[26], c$0);
           break a;
          }
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c = get(0);
         b:
         {
          if(91 <= c){
           var _m_ = c - 93 | 0;
           if(29 < _m_ >>> 0){
            if(32 <= _m_) break b;
           }
           else if(1 !== _m_) break b;
          }
          else
           if(47 <= c){
            if(63 !== c) break b;
           }
           else{
            if(36 > c) break b;
            switch(c - 36 | 0){case 1:case 2:case 3:case 8:case 9: break b;
            }
           }
          var r = caml_call1(Re_Core[26], c);
          break a;
         }
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
        if(caml_call1(accept, 94))
         var
          _i_ = caml_call1(Re_Core[26], 10),
          _j_ = bracket(0),
          _k_ = caml_call1(Re_Core[60], _j_),
          r = caml_call2(Re_Core[59], _k_, _i_);
        else
         var _l_ = bracket(0), r = caml_call1(Re_Core[27], _l_);
       }
       if(caml_call1(accept, 42))
        var
         _f_ = caml_call1(Re_Core[54], r),
         _e_ = caml_call1(Re_Core[31], _f_);
       else if(caml_call1(accept, 43))
        var
         _g_ = caml_call1(Re_Core[54], r),
         _e_ = caml_call1(Re_Core[32], _g_);
       else if(caml_call1(accept, 63))
        var _e_ = caml_call1(Re_Core[34], r);
       else if(caml_call1(accept, 123)){
        var match = caml_call1(Re_Parse_buffer[12], buf);
        if(match){
         var
          i = match[1],
          j =
            caml_call1(accept, 44)
             ? caml_call1(Re_Parse_buffer[12], buf)
             : [0, i];
         if(1 - caml_call1(accept, 125))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         if(j){
          var j$0 = j[1];
          if(j$0 < i) throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var
          _h_ = caml_call1(Re_Core[54], r),
          _e_ = caml_call3(Re_Core[33], _h_, i, j);
        }
        else{caml_call1(Re_Parse_buffer[4], buf); var _e_ = r;}
       }
       else
        var _e_ = r;
       var left$0 = [0, _e_, left], left = left$0;
       continue;
      }
      var _d_ = caml_call1(Stdlib_List[10], left);
      return caml_call1(Re_Core[28], _d_);
     }
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && caml_call1(accept, 93)) return s$0;
      var match = char$0(0);
      if(748194550 <= match[1]){
       var c = match[2];
       if(caml_call1(accept, 45)){
        if(caml_call1(accept, 93)){
         var _b_ = [0, caml_call1(Re_Core[26], 45), s$0];
         return [0, caml_call1(Re_Core[26], c), _b_];
        }
        var match$0 = char$0(0);
        if(748194550 <= match$0[1])
         var
          c$0 = match$0[2],
          s$1 = [0, caml_call2(Re_Core[57], c, c$0), s$0];
        else
         var
          st = match$0[2],
          _c_ = [0, caml_call1(Re_Core[26], 45), [0, st, s$0]],
          s$1 = [0, caml_call1(Re_Core[26], c), _c_];
        var s$0 = s$1;
       }
       else
        var s$2 = [0, caml_call1(Re_Core[26], c), s$0], s$0 = s$2;
      }
      else
       var st$0 = match[2], s$3 = [0, st$0, s$0], s$0 = s$3;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c = get(0);
     if(91 !== c) return [0, 748194550, c];
     var match = caml_call1(Re_Posix_class[3], buf);
     if(match){var set = match[1]; return [0, 4150146, set];}
     if(! caml_call1(accept, 46)) return [0, 748194550, c];
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c$0 = get(0);
     if(1 - caml_call1(accept, 46))
      throw caml_maybe_attach_backtrace(Not_supported, 1);
     if(1 - caml_call1(accept, 93))
      throw caml_maybe_attach_backtrace(Parse_error, 1);
     return [0, 748194550, c$0];
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    var
     r =
       caml_call2(Stdlib_List[38], 886285209, opts)
        ? caml_call1(Re_Core[78], res)
        : res,
     r$0 =
       caml_call2(Stdlib_List[38], 853495711, opts)
        ? caml_call1(Re_Core[53], r)
        : r;
    return r$0;
   }
   function compile(re){
    var _a_ = caml_call1(Re_Core[47], re);
    return caml_call1(Re_Core[2], _a_);
   }
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    return compile(re([0, opts], s));
   }
   var Re_Posix = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(5, Re_Posix, "Re__Posix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re
//# unitInfo: Requires: Re__Core, Re__Replace
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Re_Replace = global_data.Re__Replace,
    Group = Re_Core[1],
    compile = Re_Core[2],
    group_count = Re_Core[3],
    group_names = Re_Core[4],
    exec = Re_Core[5],
    exec_opt = Re_Core[6],
    execp = Re_Core[7],
    exec_partial = Re_Core[8],
    exec_partial_detailed = Re_Core[9],
    Mark = Re_Core[10],
    all = Re_Core[11],
    all_gen = Re_Core[12],
    all_seq = Re_Core[13],
    matches = Re_Core[14],
    matches_gen = Re_Core[15],
    matches_seq = Re_Core[16],
    split = Re_Core[17],
    split_delim = Re_Core[18],
    split_gen = Re_Core[19],
    split_seq = Re_Core[20],
    split_full = Re_Core[21],
    split_full_gen = Re_Core[22],
    split_full_seq = Re_Core[23],
    Seq = Re_Core[24],
    str = Re_Core[25],
    char$0 = Re_Core[26],
    alt = Re_Core[27],
    seq = Re_Core[28],
    empty = Re_Core[29],
    epsilon = Re_Core[30],
    rep = Re_Core[31],
    rep1 = Re_Core[32],
    repn = Re_Core[33],
    opt = Re_Core[34],
    bol = Re_Core[35],
    eol = Re_Core[36],
    bow = Re_Core[37],
    eow = Re_Core[38],
    bos = Re_Core[39],
    eos = Re_Core[40],
    leol = Re_Core[41],
    start = Re_Core[42],
    stop = Re_Core[43],
    word = Re_Core[44],
    not_boundary = Re_Core[45],
    whole_string = Re_Core[46],
    longest = Re_Core[47],
    shortest = Re_Core[48],
    first = Re_Core[49],
    greedy = Re_Core[50],
    non_greedy = Re_Core[51],
    group = Re_Core[52],
    no_group = Re_Core[53],
    nest = Re_Core[54],
    mark = Re_Core[55],
    set = Re_Core[56],
    rg = Re_Core[57],
    inter = Re_Core[58],
    diff = Re_Core[59],
    compl = Re_Core[60],
    any = Re_Core[61],
    notnl = Re_Core[62],
    alnum = Re_Core[63],
    wordc = Re_Core[64],
    alpha = Re_Core[65],
    ascii = Re_Core[66],
    blank = Re_Core[67],
    cntrl = Re_Core[68],
    digit = Re_Core[69],
    graph = Re_Core[70],
    lower = Re_Core[71],
    print = Re_Core[72],
    punct = Re_Core[73],
    space = Re_Core[74],
    upper = Re_Core[75],
    xdigit = Re_Core[76],
    case$0 = Re_Core[77],
    no_case = Re_Core[78],
    pp = Re_Core[79],
    pp_re = Re_Core[80],
    print_re = Re_Core[81],
    witness = Re_Core[82],
    get = Re_Core[83],
    get_ofs = Re_Core[84],
    get_all = Re_Core[85],
    get_all_ofs = Re_Core[86],
    test = Re_Core[87],
    marked = Re_Core[88],
    mark_set = Re_Core[89],
    replace = Re_Replace[1],
    replace_string = Re_Replace[2],
    Re =
      [0,
       Group,
       compile,
       group_count,
       group_names,
       exec,
       exec_opt,
       execp,
       exec_partial,
       exec_partial_detailed,
       Mark,
       all,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split,
       split_delim,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       Seq,
       str,
       char$0,
       alt,
       seq,
       empty,
       epsilon,
       rep,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start,
       stop,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark,
       set,
       rg,
       inter,
       diff,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp,
       pp_re,
       print_re,
       witness,
       get,
       get_ofs,
       get_all,
       get_all_ofs,
       test,
       marked,
       mark_set,
       replace,
       replace_string];
   runtime.caml_register_global(2, Re, "Re");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
