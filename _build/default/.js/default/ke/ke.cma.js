// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ke__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ke = [0];
   runtime.caml_register_global(0, Ke, "Ke__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ke__Sigs
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Weighted = [0],
    Ke_Sigs = [0, Weighted];
   runtime.caml_register_global(0, Ke_Sigs, "Ke__Sigs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ke__Rke
//# unitInfo: Requires: Fmt, Stdlib, Stdlib__Bigarray
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_RBA_from = "RBA.from",
    cst_Rke_Weighted_create = "Rke.Weighted.create",
    cst_Rke_create = "Rke.create",
    cst_rke = "rke",
    cst_rke_weighted = "rke:weighted",
    caml_ba_blit = runtime.caml_ba_blit,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_sub = runtime.caml_ba_sub,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Fmt = global_data.Fmt,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib = global_data.Stdlib,
    Empty = [248, "Ke__Rke.Empty", caml_fresh_oo_id(0)],
    _e_ = [0, [11, cst_rke_weighted, 0], cst_rke_weighted],
    _d_ = [0, [11, cst_RBA_from, 0], cst_RBA_from],
    _c_ = [0, [11, cst_Rke_Weighted_create, 0], cst_Rke_Weighted_create],
    _b_ = [0, [11, cst_rke, 0], cst_rke],
    _a_ = [0, [11, cst_Rke_create, 0], cst_Rke_create],
    cst_Ke_Rke_Weighted_Empty = "Ke__Rke.Weighted.Empty",
    cst_Ke_Rke_Weighted_Full = "Ke__Rke.Weighted.Full";
   function mask(t, v){return v & (t[3] - 1 | 0);}
   function empty(t){return t[1] === t[2] ? 1 : 0;}
   function size(t){return t[2] - t[1] | 0;}
   function available(t){return t[3] - (t[2] - t[1] | 0) | 0;}
   function full(t){var _al_ = t[3]; return size(t) === _al_ ? 1 : 0;}
   function length(q){return size(q);}
   function to_power_of_two(v){
    var res = [0, v - 1 | 0];
    res[1] = res[1] | res[1] >>> 1 | 0;
    res[1] = res[1] | res[1] >>> 2 | 0;
    res[1] = res[1] | res[1] >>> 4 | 0;
    res[1] = res[1] | res[1] >>> 8 | 0;
    res[1] = res[1] | res[1] >>> 16 | 0;
    return res[1] + 1 | 0;
   }
   function is_empty(t){return empty(t);}
   function create(capacity, kind){
    a:
    {
     if(capacity){
      var n = capacity[1];
      if(0 !== n){
       var
        _ak_ = 0 <= n ? to_power_of_two(n) : caml_call1(Fmt[13], _a_),
        capacity$0 = _ak_;
       break a;
      }
     }
     var capacity$0 = 1;
    }
    return [0,
            0,
            0,
            capacity$0,
            kind,
            caml_call3
             (Stdlib_Bigarray[19][1], kind, Stdlib_Bigarray[15], capacity$0)];
   }
   function capacity(param){var c = param[3]; return c;}
   function copy(t){
    var
     v = caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], t[3]);
    caml_ba_blit(t[5], v);
    return [0, t[1], t[2], t[3], t[4], v];
   }
   function grow(t, want){
    var
     max = Stdlib[17],
     c = to_power_of_two(caml_call2(max, 1, caml_call2(max, want, size(t))));
    if(c !== caml_ba_dim_1(t[5])){
     var
      dst = caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], c),
      sze = size(t),
      msk = mask(t, t[1]),
      pre = t[3] - msk | 0,
      rst = sze - pre | 0;
     if(0 < rst){
      var _ah_ = caml_ba_sub(dst, 0, pre);
      caml_ba_blit(caml_ba_sub(t[5], msk, pre), _ah_);
      var _ai_ = caml_ba_sub(dst, pre, rst);
      caml_ba_blit(caml_ba_sub(t[5], 0, rst), _ai_);
     }
     else{
      var _aj_ = caml_ba_sub(dst, 0, sze);
      caml_ba_blit(caml_ba_sub(t[5], msk, sze), _aj_);
     }
     t[5] = dst;
     t[2] = sze;
     t[3] = c;
     t[1] = 0;
    }
    return;
   }
   function push(t, v){
    if(full(t)) grow(t, 2 * size(t) | 0);
    var _ag_ = mask(t, t[2]);
    caml_ba_set_1(t[5], _ag_, v);
    t[2] = t[2] + 1 | 0;
    return 0;
   }
   function cons(t, v){
    if(full(t)) grow(t, 2 * size(t) | 0);
    var i = t[1] - 1 | 0, _af_ = mask(t, i);
    caml_ba_set_1(t[5], _af_, v);
    t[1] = i;
    return 0;
   }
   function pop_exn(t){
    if(empty(t)) throw caml_maybe_attach_backtrace(Empty, 1);
    var _ae_ = mask(t, t[1]), r = caml_ba_get_1(t[5], _ae_);
    t[1] = t[1] + 1 | 0;
    return r;
   }
   function pop(t){
    try{var _ac_ = [0, pop_exn(t)]; return _ac_;}
    catch(_ad_){
     var _ab_ = caml_wrap_exception(_ad_);
     if(_ab_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_ab_, 0);
    }
   }
   function peek_exn(t){
    if(empty(t)) throw caml_maybe_attach_backtrace(Empty, 1);
    var _aa_ = mask(t, t[1]);
    return caml_ba_get_1(t[5], _aa_);
   }
   function peek(t){
    try{var ___ = [0, peek_exn(t)]; return ___;}
    catch(_$_){
     var _Z_ = caml_wrap_exception(_$_);
     if(_Z_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_Z_, 0);
    }
   }
   function blit(src, src_off, dst, dst_off, len){
    var
     a = caml_ba_sub(src, src_off, len),
     b = caml_ba_sub(dst, dst_off, len);
    caml_ba_blit(a, b);
    return;
   }
   function compress(t){
    var
     len = length(t),
     msk = mask(t, t[1]),
     pre = t[3] - msk | 0,
     rst = len - pre | 0;
    if(0 < rst)
     if(pre <= available(t)){
      blit(t[5], 0, t[5], pre, rst);
      blit(t[5], msk, t[5], 0, pre);
     }
     else{
      var
       tmp =
         caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], pre);
      blit(t[5], msk, tmp, 0, pre);
      blit(t[5], 0, t[5], pre, rst);
      blit(tmp, 0, t[5], 0, pre);
     }
    else
     blit(t[5], msk, t[5], 0, len);
    t[1] = 0;
    t[2] = len;
    return 0;
   }
   function push$0(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v) - off | 0;
    if(available(t) < len$1) grow(t, len$1 + size(t) | 0);
    var msk = mask(t, t[2]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    if(0 < rst){
     caml_call5(blit, v, off, t[5], msk, pre);
     caml_call5(blit, v, off + pre | 0, t[5], 0, rst);
    }
    else
     caml_call5(blit, v, off, t[5], msk, len$1);
    t[2] = t[2] + len$1 | 0;
    return 0;
   }
   function keep_exn(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v) - off | 0;
    if(size(t) < len$1) throw caml_maybe_attach_backtrace(Empty, 1);
    var msk = mask(t, t[1]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    return 0 < rst
            ? (caml_call5
               (blit, t[5], msk, v, off, pre),
              caml_call5(blit, t[5], 0, v, off + pre | 0, rst))
            : caml_call5(blit, t[5], msk, v, off, len$1);
   }
   function keep(t, blit, length, off, len, v){
    try{var _X_ = [0, keep_exn(t, blit, length, off, len, v)]; return _X_;}
    catch(_Y_){
     var _W_ = caml_wrap_exception(_Y_);
     if(_W_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
   }
   function peek$0(t){
    var len = size(t);
    if(0 === len) return 0;
    var msk = mask(t, t[1]), pre = t[3] - msk | 0, rst = len - pre | 0;
    if(0 >= rst) return [0, caml_ba_sub(t[5], msk, len), 0];
    var _V_ = [0, caml_ba_sub(t[5], 0, rst), 0];
    return [0, caml_ba_sub(t[5], msk, pre), _V_];
   }
   function unsafe_shift(t, len){t[1] = t[1] + len | 0; return 0;}
   function shift_exn(t, len){
    if(size(t) < len) throw caml_maybe_attach_backtrace(Empty, 1);
    return unsafe_shift(t, len);
   }
   function shift(t, len){
    try{var _T_ = [0, shift_exn(t, len)]; return _T_;}
    catch(_U_){
     var _S_ = caml_wrap_exception(_U_);
     if(_S_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_S_, 0);
    }
   }
   var
    N = [0, push$0, keep_exn, keep, peek$0, unsafe_shift, shift_exn, shift];
   function iter(f, t){
    var idx = [0, t[1]], max = t[2];
    for(;;){
     if(idx[1] === max) return 0;
     var _R_ = mask(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _R_));
     idx[1]++;
    }
   }
   function rev_iter(f, t){
    if(t[1] === t[2]) return 0;
    var idx = [0, t[2] - 1 | 0], min = t[1];
    for(;;){
     var _Q_ = mask(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _Q_));
     if(idx[1] === min) return 0;
     idx[1] += -1;
    }
   }
   function fold(f, a, t){
    var a$0 = [0, a];
    iter(function(x){a$0[1] = caml_call2(f, a$0[1], x); return 0;}, t);
    return a$0[1];
   }
   function pp(sep, pp_elt){return caml_call3(Fmt[30], sep, iter, pp_elt);}
   function dump(pp_elt){
    var _P_ = caml_call1(Fmt[18], _b_);
    return caml_call3(Fmt[70][15], iter, _P_, pp_elt);
   }
   function clear(q){q[1] = 0; q[2] = 0; return 0;}
   var
    Empty$0 = [248, cst_Ke_Rke_Weighted_Empty, caml_fresh_oo_id(0)],
    Full = [248, cst_Ke_Rke_Weighted_Full, caml_fresh_oo_id(0)];
   function mask$0(t, v){return v & (t[3] - 1 | 0);}
   function empty$0(t){return t[1] === t[2] ? 1 : 0;}
   function size$0(t){return t[2] - t[1] | 0;}
   function full$0(t){var _O_ = t[3]; return size$0(t) === _O_ ? 1 : 0;}
   function available$0(t){return t[3] - (t[2] - t[1] | 0) | 0;}
   function is_empty$0(t){return empty$0(t);}
   function length$0(q){return size$0(q);}
   function create$0(capacity, kind){
    a:
    {
     if(capacity){
      var n = capacity[1];
      if(0 !== n){
       var
        _N_ = 0 <= n ? to_power_of_two(n) : caml_call1(Fmt[13], _c_),
        capacity$0 = _N_;
       break a;
      }
     }
     var capacity$0 = 1;
    }
    return [0,
            [0,
             0,
             0,
             capacity$0,
             kind,
             caml_call3
              (Stdlib_Bigarray[19][1], kind, Stdlib_Bigarray[15], capacity$0)],
            capacity$0];
   }
   function copy$0(t){
    var
     v = caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], t[3]);
    caml_ba_blit(t[5], v);
    return [0, t[1], t[2], t[3], t[4], v];
   }
   function from(v){
    var
     v$0 = caml_ba_dim_1(v),
     _L_ = 0 !== v$0 ? 1 : 0,
     _M_ =
       _L_
        ? (v$0 & (caml_call1(Stdlib[21], v$0) + 1 | 0)) === v$0 ? 1 : 0
        : _L_;
    if(1 - _M_) caml_call1(Fmt[13], _d_);
    var c = caml_ba_dim_1(v), k = runtime.caml_ba_kind(v);
    return [0, 0, 0, c, k, v];
   }
   function push_exn(t, v){
    if(full$0(t)) throw caml_maybe_attach_backtrace(Full, 1);
    var _K_ = mask$0(t, t[2]);
    caml_ba_set_1(t[5], _K_, v);
    t[2] = t[2] + 1 | 0;
    return 0;
   }
   function push$1(t, v){
    try{var _I_ = [0, push_exn(t, v)]; return _I_;}
    catch(_J_){
     var _H_ = caml_wrap_exception(_J_);
     if(_H_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_H_, 0);
    }
   }
   function cons_exn(t, v){
    if(full$0(t)) throw caml_maybe_attach_backtrace(Full, 1);
    var i = t[1] - 1 | 0, _G_ = mask$0(t, i);
    caml_ba_set_1(t[5], _G_, v);
    t[1] = i;
    return 0;
   }
   function cons$0(t, v){
    try{var _E_ = [0, cons_exn(t, v)]; return _E_;}
    catch(_F_){
     var _D_ = caml_wrap_exception(_F_);
     if(_D_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_D_, 0);
    }
   }
   function pop_exn$0(t){
    if(empty$0(t)) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var _C_ = mask$0(t, t[1]), r = caml_ba_get_1(t[5], _C_);
    t[1] = t[1] + 1 | 0;
    return r;
   }
   function pop$0(t){
    try{var _A_ = [0, pop_exn$0(t)]; return _A_;}
    catch(_B_){
     var _z_ = caml_wrap_exception(_B_);
     if(_z_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_z_, 0);
    }
   }
   function peek_exn$0(t){
    if(empty$0(t)) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var _y_ = mask$0(t, t[1]);
    return caml_ba_get_1(t[5], _y_);
   }
   function peek$1(t){
    try{var _w_ = [0, peek_exn$0(t)]; return _w_;}
    catch(_x_){
     var _v_ = caml_wrap_exception(_x_);
     if(_v_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
   }
   function compress$0(t){
    var
     len = length$0(t),
     msk = mask$0(t, t[1]),
     pre = t[3] - msk | 0,
     rst = len - pre | 0;
    if(0 < rst)
     if(pre <= available$0(t)){
      blit(t[5], 0, t[5], pre, rst);
      blit(t[5], msk, t[5], 0, pre);
     }
     else{
      var
       tmp =
         caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], pre);
      blit(t[5], msk, tmp, 0, pre);
      blit(t[5], 0, t[5], pre, rst);
      blit(tmp, 0, t[5], 0, pre);
     }
    else
     blit(t[5], msk, t[5], 0, len);
    t[1] = 0;
    t[2] = len;
    return 0;
   }
   function push_exn$0(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v) - off | 0;
    if(available$0(t) < len$1) throw caml_maybe_attach_backtrace(Full, 1);
    var msk = mask$0(t, t[2]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    if(0 < rst){
     caml_call5(blit, v, off, t[5], msk, pre);
     caml_call5(blit, v, off + pre | 0, t[5], 0, rst);
     var
      _s_ = [0, caml_ba_sub(t[5], 0, rst), 0],
      _t_ = mask$0(t, t[2]),
      ret = [0, caml_ba_sub(t[5], _t_, pre), _s_];
    }
    else{
     caml_call5(blit, v, off, t[5], msk, len$1);
     var _u_ = mask$0(t, t[2]), ret = [0, caml_ba_sub(t[5], _u_, len$1), 0];
    }
    t[2] = t[2] + len$1 | 0;
    return ret;
   }
   function push$2(t, blit, length, off, len, v){
    try{var _q_ = [0, push_exn$0(t, blit, length, off, len, v)]; return _q_;}
    catch(_r_){
     var _p_ = caml_wrap_exception(_r_);
     if(_p_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_p_, 0);
    }
   }
   function keep_exn$0(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v) - off | 0;
    if(size$0(t) < len$1) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var msk = mask$0(t, t[1]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    return 0 < rst
            ? (caml_call5
               (blit, t[5], msk, v, off, pre),
              caml_call5(blit, t[5], 0, v, off + pre | 0, rst))
            : caml_call5(blit, t[5], msk, v, off, len$1);
   }
   function keep$0(t, blit, length, off, len, v){
    try{var _n_ = [0, keep_exn$0(t, blit, length, off, len, v)]; return _n_;}
    catch(_o_){
     var _m_ = caml_wrap_exception(_o_);
     if(_m_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_m_, 0);
    }
   }
   function peek$2(t){
    var len = size$0(t);
    if(0 === len) return 0;
    var msk = mask$0(t, t[1]), pre = t[3] - msk | 0, rst = len - pre | 0;
    if(0 >= rst) return [0, caml_ba_sub(t[5], msk, len), 0];
    var _l_ = [0, caml_ba_sub(t[5], 0, rst), 0];
    return [0, caml_ba_sub(t[5], msk, pre), _l_];
   }
   function unsafe_shift$0(t, len){t[1] = t[1] + len | 0; return 0;}
   function shift_exn$0(t, len){
    if(size$0(t) < len) throw caml_maybe_attach_backtrace(Empty$0, 1);
    return unsafe_shift$0(t, len);
   }
   function shift$0(t, len){
    try{var _j_ = [0, shift_exn$0(t, len)]; return _j_;}
    catch(_k_){
     var _i_ = caml_wrap_exception(_k_);
     if(_i_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_i_, 0);
    }
   }
   var
    N$0 =
      [0,
       push_exn$0,
       push$2,
       keep_exn$0,
       keep$0,
       peek$2,
       unsafe_shift$0,
       shift_exn$0,
       shift$0];
   function iter$0(f, t){
    var idx = [0, t[1]], max = t[2];
    for(;;){
     if(idx[1] === max) return 0;
     var _h_ = mask$0(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _h_));
     idx[1]++;
    }
   }
   function rev_iter$0(f, t){
    if(t[1] === t[2]) return 0;
    var idx = [0, t[2] - 1 | 0], min = t[1];
    for(;;){
     var _g_ = mask$0(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _g_));
     if(idx[1] === min) return 0;
     idx[1] += -1;
    }
   }
   function fold$0(f, a, t){
    var a$0 = [0, a];
    iter$0(function(x){a$0[1] = caml_call2(f, a$0[1], x); return 0;}, t);
    return a$0[1];
   }
   function pp$0(sep, pp_elt){
    return caml_call3(Fmt[30], sep, iter$0, pp_elt);
   }
   function dump$0(pp_elt){
    var _f_ = caml_call1(Fmt[18], _e_);
    return caml_call3(Fmt[70][15], iter$0, _f_, pp_elt);
   }
   function clear$0(q){q[1] = 0; q[2] = 0; return 0;}
   function unsafe_bigarray(param){var v = param[5]; return v;}
   var
    Ke_Rke =
      [0,
       Empty,
       is_empty,
       create,
       capacity,
       length,
       push,
       pop,
       pop_exn,
       peek,
       peek_exn,
       cons,
       copy,
       clear,
       compress,
       N,
       iter,
       rev_iter,
       fold,
       pp,
       dump,
       [0,
        Full,
        Empty$0,
        is_empty$0,
        create$0,
        length$0,
        available$0,
        push_exn,
        push$1,
        pop$0,
        pop_exn$0,
        peek$1,
        peek_exn$0,
        cons_exn,
        cons$0,
        copy$0,
        clear$0,
        compress$0,
        N$0,
        iter$0,
        rev_iter$0,
        fold$0,
        pp$0,
        dump$0,
        unsafe_bigarray,
        from]];
   runtime.caml_register_global(11, Ke_Rke, "Ke__Rke");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ke__Fke
//# unitInfo: Requires: CamlinternalLazy, Fmt, Stdlib, Stdlib__Bigarray, Stdlib__Lazy
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_RBA_from = "RBA.from",
    cst_Rke_Weighted_create = "Rke.Weighted.create",
    cst_fke = "fke",
    cst_fke_weighted = "fke:weighted",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_sub = runtime.caml_ba_sub,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    empty = [0, 0],
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Fmt = global_data.Fmt,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib = global_data.Stdlib,
    Empty = [248, "Ke__Fke.Empty", caml_fresh_oo_id(0)],
    _d_ = [0, [11, cst_fke_weighted, 0], cst_fke_weighted],
    _c_ = [0, [11, cst_RBA_from, 0], cst_RBA_from],
    _b_ = [0, [11, cst_Rke_Weighted_create, 0], cst_Rke_Weighted_create],
    _a_ = [0, [11, cst_fke, 0], cst_fke],
    cst_Ke_Fke_Weighted_Empty = "Ke__Fke.Weighted.Empty",
    cst_Ke_Fke_Weighted_Full = "Ke__Fke.Weighted.Full";
   function one(x){return [0, [0, x]];}
   function two(x, y){return [0, [1, x, y]];}
   function three(x, y, z){return [0, [2, x, y, z]];}
   function is_empty(param){
    if(0 === param[0] && typeof param[1] === "number") return 1;
    return 0;
   }
   function push(q, x){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number") return one(x);
     switch(match[0]){
       case 0:
        var y = match[1]; return two(y, x);
       case 1:
        var z = match[2], y$0 = match[1]; return three(y$0, z, x);
       default:
        var c = match[3], b = match[2], a = match[1];
        return [1, 4, [1, a, b], caml_call1(Stdlib_Lazy[4], empty), [1, c, x]];
     }
    }
    var m = q[3], f = q[2], s = q[1], match$0 = q[4];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 0: break;
       case 1:
        var z$0 = match$0[2], y$2 = match$0[1];
        return [1, s + 1 | 0, f, m, [2, y$2, z$0, x]];
       default:
        var _ak_ = caml_obj_tag(m);
        a:
        if(250 === _ak_)
         var q$0 = m[1];
        else{
         if(246 !== _ak_ && 244 !== _ak_){var q$0 = m; break a;}
         var q$0 = caml_call1(CamlinternalLazy[2], m);
        }
        var
         match$1 = q[4],
         z$1 = match$1[3],
         z$2 = match$1[2],
         y$3 = match$1[1],
         _al_ = [1, z$1, x];
        return [1,
                s + 1 | 0,
                f,
                [246, function(_am_){return push(q$0, [0, y$3, z$2]);}],
                _al_];
     }
    var y$1 = match$0[1];
    return [1, s + 1 | 0, f, m, [1, y$1, x]];
   }
   function pop_exn(q){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number")
      throw caml_maybe_attach_backtrace(Empty, 1);
     switch(match[0]){
       case 0:
        var x = match[1]; return [0, x, empty];
       case 1:
        var y = match[2], x$0 = match[1]; return [0, x$0, one(y)];
       default:
        var z = match[3], y$0 = match[2], x$1 = match[1];
        return [0, x$1, two(y$0, z)];
     }
    }
    var match$0 = q[2], s = q[1];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 0: break;
       case 1:
        var r$0 = q[4], m = q[3], y$2 = match$0[2], x$3 = match$0[1];
        return [0, x$3, [1, s - 1 | 0, [0, y$2], m, r$0]];
       default:
        var
         r$1 = q[4],
         m$0 = q[3],
         z$1 = match$0[3],
         y$3 = match$0[2],
         x$4 = match$0[1];
        return [0, x$4, [1, s - 1 | 0, [1, y$3, z$1], m$0, r$1]];
     }
    var _ah_ = q[3], x$2 = match$0[1], _ai_ = caml_obj_tag(_ah_);
    a:
    if(250 === _ai_)
     var q$0 = _ah_[1];
    else{
     if(246 !== _ai_ && 244 !== _ai_){var q$0 = _ah_; break a;}
     var q$0 = caml_call1(CamlinternalLazy[2], _ah_);
    }
    var r = q[4];
    if(is_empty(q$0)) return [0, x$2, [0, r]];
    var
     _aj_ = pop_exn(q$0),
     q$1 = _aj_[2],
     match$1 = _aj_[1],
     z$0 = match$1[2],
     y$1 = match$1[1];
    return [0,
            x$2,
            [1, s - 1 | 0, [1, y$1, z$0], caml_call1(Stdlib_Lazy[4], q$1), r]];
   }
   function tail_exn(q){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number")
      throw caml_maybe_attach_backtrace(Empty, 1);
     switch(match[0]){
       case 0:
        var x = match[1]; return [0, empty, x];
       case 1:
        var y = match[2], x$0 = match[1]; return [0, one(x$0), y];
       default:
        var z = match[3], y$0 = match[2], x$1 = match[1];
        return [0, two(x$1, y$0), z];
     }
    }
    var m = q[3], f = q[2], s = q[1], _af_ = caml_obj_tag(m);
    a:
    if(250 === _af_)
     var q$0 = m[1];
    else{
     if(246 !== _af_ && 244 !== _af_){var q$0 = m; break a;}
     var q$0 = caml_call1(CamlinternalLazy[2], m);
    }
    var match$0 = q[4];
    if(typeof match$0 !== "number" && 0 !== match$0[0]){
     var match$2 = q[4];
     if(typeof match$2 !== "number" && 2 === match$2[0]){
      var z$1 = match$2[3], y$3 = match$2[2], x$4 = match$2[1];
      return [0, [1, s - 1 | 0, f, m, [1, x$4, y$3]], z$1];
     }
     var y$2 = match$2[2], x$3 = match$2[1];
     return [0, [1, s - 1 | 0, f, m, [0, x$3]], y$2];
    }
    var x$2 = match$0[1];
    if(is_empty(q$0)) return [0, [0, f], x$2];
    var
     _ag_ = tail_exn(q$0),
     match$1 = _ag_[2],
     z$0 = match$1[2],
     y$1 = match$1[1],
     q$1 = _ag_[1];
    return [0,
            [1, s - 1 | 0, f, caml_call1(Stdlib_Lazy[4], q$1), [1, y$1, z$0]],
            x$2];
   }
   function peek_exn(q){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number")
      throw caml_maybe_attach_backtrace(Empty, 1);
     switch(match[0]){
       case 0:
        var x = match[1]; return x;
       case 1:
        var x$0 = match[1]; return x$0;
       default: var x$1 = match[1]; return x$1;
     }
    }
    var match$0 = q[2];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 0: break;
       case 1:
        var x$3 = match$0[1]; return x$3;
       default: var x$4 = match$0[1]; return x$4;
     }
    var x$2 = match$0[1];
    return x$2;
   }
   function pop(q){
    try{var _ad_ = [0, pop_exn(q)]; return _ad_;}
    catch(_ae_){
     var _ac_ = caml_wrap_exception(_ae_);
     if(_ac_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_ac_, 0);
    }
   }
   function tail(q){
    try{var _aa_ = [0, tail_exn(q)]; return _aa_;}
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   function peek(q){
    try{var _Z_ = [0, peek_exn(q)]; return _Z_;}
    catch(___){
     var _Y_ = caml_wrap_exception(___);
     if(_Y_ === Empty) return 0;
     throw caml_maybe_attach_backtrace(_Y_, 0);
    }
   }
   function cons(q, x){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number") return one(x);
     switch(match[0]){
       case 0:
        var y = match[1]; return two(x, y);
       case 1:
        var z = match[2], y$0 = match[1]; return three(x, y$0, z);
       default:
        var z$0 = match[3], z$1 = match[2], y$1 = match[1];
        return [1,
                4,
                [1, x, y$1],
                caml_call1(Stdlib_Lazy[4], empty),
                [1, z$1, z$0]];
     }
    }
    var match$0 = q[2], s = q[1];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 0: break;
       case 1:
        var r$0 = q[4], m$0 = q[3], z$2 = match$0[2], y$3 = match$0[1];
        return [1, s + 1 | 0, [2, x, y$3, z$2], m$0, r$0];
       default:
        var
         _V_ = q[3],
         z$3 = match$0[3],
         z$4 = match$0[2],
         y$4 = match$0[1],
         _W_ = caml_obj_tag(_V_);
        a:
        if(250 === _W_)
         var q$0 = _V_[1];
        else{
         if(246 !== _W_ && 244 !== _W_){var q$0 = _V_; break a;}
         var q$0 = caml_call1(CamlinternalLazy[2], _V_);
        }
        var r$1 = q[4];
        return [1,
                s + 1 | 0,
                [2, x, y$4, z$4],
                [246, function(_X_){return cons(q$0, [0, z$4, z$3]);}],
                r$1];
     }
    var r = q[4], m = q[3], y$2 = match$0[1];
    return [1, s + 1 | 0, [1, x, y$2], m, r];
   }
   function iter(f, q){
    function go(f, param){
     var param$0 = param;
     for(;;){
      if(0 === param$0[0]){
       var match = param$0[1];
       if(typeof match === "number") return 0;
       switch(match[0]){
         case 0:
          var x = match[1]; return caml_call1(f, x);
         case 1:
          var y = match[2], x$0 = match[1];
          caml_call1(f, x$0);
          return caml_call1(f, y);
         default:
          var z = match[3], y$0 = match[2], x$1 = match[1];
          caml_call1(f, x$1);
          caml_call1(f, y$0);
          return caml_call1(f, z);
       }
      }
      var _T_ = param$0[3], hd = param$0[2], _U_ = caml_obj_tag(_T_);
      a:
      if(250 === _U_)
       var q = _T_[1];
      else{
       if(246 !== _U_ && 244 !== _U_){var q = _T_; break a;}
       var q = caml_call1(CamlinternalLazy[2], _T_);
      }
      var tl = param$0[4];
      go(f, [0, hd]);
      go
       (function(param){
         var y = param[2], x = param[1];
         caml_call1(f, x);
         return caml_call1(f, y);
        },
        q);
      var param$0 = [0, tl];
     }
    }
    return go(f, q);
   }
   function rev_iter(f, q){
    function go(f, param){
     var param$0 = param;
     for(;;){
      if(0 === param$0[0]){
       var match = param$0[1];
       if(typeof match === "number") return 0;
       switch(match[0]){
         case 0:
          var x = match[1]; return caml_call1(f, x);
         case 1:
          var x$0 = match[2], y = match[1];
          caml_call1(f, x$0);
          return caml_call1(f, y);
         default:
          var x$1 = match[3], y$0 = match[2], z = match[1];
          caml_call1(f, x$1);
          caml_call1(f, y$0);
          return caml_call1(f, z);
       }
      }
      var _R_ = param$0[3], hd = param$0[2], _S_ = caml_obj_tag(_R_);
      a:
      if(250 === _S_)
       var q = _R_[1];
      else{
       if(246 !== _S_ && 244 !== _S_){var q = _R_; break a;}
       var q = caml_call1(CamlinternalLazy[2], _R_);
      }
      var tl = param$0[4];
      go(f, [0, tl]);
      go
       (function(param){
         var x = param[2], y = param[1];
         caml_call1(f, x);
         return caml_call1(f, y);
        },
        q);
      var param$0 = [0, hd];
     }
    }
    return go(f, q);
   }
   function fold(f, a, q){
    function go(f, a, param){
     var a$0 = a, param$0 = param;
     for(;;){
      if(0 === param$0[0]){
       var match = param$0[1];
       if(typeof match === "number") return a$0;
       switch(match[0]){
         case 0:
          var x = match[1]; return caml_call2(f, a$0, x);
         case 1:
          var y = match[2], x$0 = match[1];
          return caml_call2(f, caml_call2(f, a$0, x$0), y);
         default:
          var z = match[3], y$0 = match[2], x$1 = match[1];
          return caml_call2(f, caml_call2(f, caml_call2(f, a$0, x$1), y$0), z);
       }
      }
      var _P_ = param$0[3], hd = param$0[2], _Q_ = caml_obj_tag(_P_);
      a:
      if(250 === _Q_)
       var q = _P_[1];
      else{
       if(246 !== _Q_ && 244 !== _Q_){var q = _P_; break a;}
       var q = caml_call1(CamlinternalLazy[2], _P_);
      }
      var
       tl = param$0[4],
       a$1 = go(f, a$0, [0, hd]),
       a$2 =
         go
          (function(a, param){
            var y = param[2], x = param[1];
            return caml_call2(f, caml_call2(f, a, x), y);
           },
           a$1,
           q),
       a$0 = a$2,
       param$0 = [0, tl];
     }
    }
    return go(f, a, q);
   }
   function length(param){
    if(0 !== param[0]){var s = param[1]; return s;}
    var _O_ = param[1];
    if(typeof _O_ === "number") return 0;
    switch(_O_[0]){case 0: return 1;case 1: return 2;default: return 3;
    }
   }
   function pp(sep, pp_elt){return caml_call3(Fmt[30], sep, iter, pp_elt);}
   function dump(pp_elt){
    var _N_ = caml_call1(Fmt[18], _a_);
    return caml_call3(Fmt[70][15], iter, _N_, pp_elt);
   }
   var
    Empty$0 = [248, cst_Ke_Fke_Weighted_Empty, caml_fresh_oo_id(0)],
    Full = [248, cst_Ke_Fke_Weighted_Full, caml_fresh_oo_id(0)];
   function mask(t, v){return v & (t[3] - 1 | 0);}
   function empty$0(t){return t[1] === t[2] ? 1 : 0;}
   function size(t){return t[2] - t[1] | 0;}
   function full(t){var _M_ = t[3]; return size(t) === _M_ ? 1 : 0;}
   function available(t){return t[3] - (t[2] - t[1] | 0) | 0;}
   function is_empty$0(t){return empty$0(t);}
   function length$0(q){return size(q);}
   function create(capacity, kind){
    a:
    {
     if(capacity){
      var v = capacity[1];
      if(0 !== v){
       if(0 <= v){
        var res = [0, v - 1 | 0];
        res[1] = res[1] | res[1] >>> 1 | 0;
        res[1] = res[1] | res[1] >>> 2 | 0;
        res[1] = res[1] | res[1] >>> 4 | 0;
        res[1] = res[1] | res[1] >>> 8 | 0;
        res[1] = res[1] | res[1] >>> 16 | 0;
        var _L_ = res[1] + 1 | 0;
       }
       else
        var _L_ = caml_call1(Fmt[13], _b_);
       var capacity$0 = _L_;
       break a;
      }
     }
     var capacity$0 = 1;
    }
    return [0,
            [0,
             0,
             0,
             capacity$0,
             kind,
             caml_call3
              (Stdlib_Bigarray[19][1], kind, Stdlib_Bigarray[15], capacity$0)],
            capacity$0];
   }
   function copy(t){
    var
     v = caml_call3(Stdlib_Bigarray[19][1], t[4], Stdlib_Bigarray[15], t[3]);
    runtime.caml_ba_blit(t[5], v);
    return [0, t[1], t[2], t[3], t[4], v];
   }
   function from(v){
    var
     v$0 = caml_ba_dim_1(v),
     _J_ = 0 !== v$0 ? 1 : 0,
     _K_ =
       _J_
        ? (v$0 & (caml_call1(Stdlib[21], v$0) + 1 | 0)) === v$0 ? 1 : 0
        : _J_;
    if(1 - _K_) caml_call1(Fmt[13], _c_);
    var c = caml_ba_dim_1(v), k = runtime.caml_ba_kind(v);
    return [0, 0, 0, c, k, v];
   }
   function push_exn(t, v){
    if(full(t)) throw caml_maybe_attach_backtrace(Full, 1);
    var _I_ = mask(t, t[2]);
    caml_ba_set_1(t[5], _I_, v);
    return [0, t[1], t[2] + 1 | 0, t[3], t[4], t[5]];
   }
   function push$0(t, v){
    try{var _G_ = [0, push_exn(t, v)]; return _G_;}
    catch(_H_){
     var _F_ = caml_wrap_exception(_H_);
     if(_F_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_F_, 0);
    }
   }
   function cons_exn(t, v){
    if(full(t)) throw caml_maybe_attach_backtrace(Full, 1);
    var i = t[1] - 1 | 0, _E_ = mask(t, i);
    caml_ba_set_1(t[5], _E_, v);
    return [0, i, t[2], t[3], t[4], t[5]];
   }
   function cons$0(t, v){
    try{var _C_ = [0, cons_exn(t, v)]; return _C_;}
    catch(_D_){
     var _B_ = caml_wrap_exception(_D_);
     if(_B_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_B_, 0);
    }
   }
   function pop_exn$0(t){
    if(empty$0(t)) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var _A_ = mask(t, t[1]), r = caml_ba_get_1(t[5], _A_);
    return [0, r, [0, t[1] + 1 | 0, t[2], t[3], t[4], t[5]]];
   }
   function pop$0(t){
    try{var _y_ = [0, pop_exn$0(t)]; return _y_;}
    catch(_z_){
     var _x_ = caml_wrap_exception(_z_);
     if(_x_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_x_, 0);
    }
   }
   function peek_exn$0(t){
    if(empty$0(t)) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var _w_ = mask(t, t[1]);
    return caml_ba_get_1(t[5], _w_);
   }
   function peek$0(t){
    try{var _u_ = [0, peek_exn$0(t)]; return _u_;}
    catch(_v_){
     var _t_ = caml_wrap_exception(_v_);
     if(_t_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_t_, 0);
    }
   }
   function push_exn$0(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v) - off | 0;
    if(available(t) < len$1) throw caml_maybe_attach_backtrace(Full, 1);
    var msk = mask(t, t[2]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    if(0 < rst){
     caml_call5(blit, v, off, t[5], msk, pre);
     caml_call5(blit, v, off + pre | 0, t[5], 0, rst);
     var
      _q_ = [0, caml_ba_sub(t[5], 0, rst), 0],
      _r_ = mask(t, t[2]),
      ret = [0, caml_ba_sub(t[5], _r_, pre), _q_];
    }
    else{
     caml_call5(blit, v, off, t[5], msk, len$1);
     var _s_ = mask(t, t[2]), ret = [0, caml_ba_sub(t[5], _s_, len$1), 0];
    }
    return [0, ret, [0, t[1], t[2] + len$1 | 0, t[3], t[4], t[5]]];
   }
   function push$1(t, blit, length, off, len, v){
    try{var _o_ = [0, push_exn$0(t, blit, length, off, len, v)]; return _o_;}
    catch(_p_){
     var _n_ = caml_wrap_exception(_p_);
     if(_n_ === Full) return 0;
     throw caml_maybe_attach_backtrace(_n_, 0);
    }
   }
   function keep_exn(t, blit, length, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, v);
    if(size(t) < len$1) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var msk = mask(t, t[1]), pre = t[3] - msk | 0, rst = len$1 - pre | 0;
    return 0 < rst
            ? (caml_call5
               (blit, t[5], msk, v, off, pre),
              caml_call5(blit, t[5], 0, v, off + pre | 0, rst))
            : caml_call5(blit, t[5], msk, v, off, len$1);
   }
   function keep(t, blit, length, off, len, v){
    try{var _l_ = [0, keep_exn(t, blit, length, off, len, v)]; return _l_;}
    catch(_m_){
     var _k_ = caml_wrap_exception(_m_);
     if(_k_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_k_, 0);
    }
   }
   function unsafe_shift(t, len){
    return [0, t[1] + len | 0, t[2], t[3], t[4], t[5]];
   }
   function shift_exn(t, len){
    if(size(t) < len) throw caml_maybe_attach_backtrace(Empty$0, 1);
    return unsafe_shift(t, len);
   }
   function shift(t, len){
    try{var _i_ = [0, shift_exn(t, len)]; return _i_;}
    catch(_j_){
     var _h_ = caml_wrap_exception(_j_);
     if(_h_ === Empty$0) return 0;
     throw caml_maybe_attach_backtrace(_h_, 0);
    }
   }
   var
    N =
      [0, push_exn$0, push$1, keep_exn, keep, unsafe_shift, shift_exn, shift];
   function iter$0(f, t){
    var idx = [0, t[1]], max = t[2];
    for(;;){
     if(idx[1] === max) return 0;
     var _g_ = mask(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _g_));
     idx[1]++;
    }
   }
   function rev_iter$0(f, t){
    if(t[1] === t[2]) return 0;
    var idx = [0, t[2] - 1 | 0], min = t[1];
    for(;;){
     var _f_ = mask(t, idx[1]);
     caml_call1(f, caml_ba_get_1(t[5], _f_));
     if(idx[1] === min) return 0;
     idx[1] += -1;
    }
   }
   function fold$0(f, a, t){
    var a$0 = [0, a];
    iter$0(function(x){a$0[1] = caml_call2(f, a$0[1], x); return 0;}, t);
    return a$0[1];
   }
   function clear(t){return [0, 0, 0, t[3], t[4], t[5]];}
   function unsafe_bigarray(param){var v = param[5]; return v;}
   function pp$0(sep, pp_elt){
    return caml_call3(Fmt[30], sep, iter$0, pp_elt);
   }
   function dump$0(pp_elt){
    var _e_ = caml_call1(Fmt[18], _d_);
    return caml_call3(Fmt[70][15], iter$0, _e_, pp_elt);
   }
   var
    Ke_Fke =
      [0,
       Empty,
       empty,
       is_empty,
       length,
       push,
       cons,
       peek,
       peek_exn,
       pop,
       pop_exn,
       tail,
       tail_exn,
       iter,
       rev_iter,
       fold,
       pp,
       dump,
       [0,
        Empty$0,
        Full,
        is_empty$0,
        create,
        length$0,
        available,
        push_exn,
        push$0,
        pop$0,
        pop_exn$0,
        peek$0,
        peek_exn$0,
        cons$0,
        cons_exn,
        copy,
        clear,
        N,
        iter$0,
        rev_iter$0,
        fold$0,
        pp$0,
        dump$0,
        unsafe_bigarray,
        from]];
   runtime.caml_register_global(13, Ke_Fke, "Ke__Fke");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ke
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ke = [0];
   runtime.caml_register_global(0, Ke, "Ke");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
