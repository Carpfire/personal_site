// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream__sql
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_sql = [0];
   runtime.caml_register_global(0, Dream_sql, "Dream__sql");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__sql__Sql
//# unitInfo: Requires: Caqti_driver_info, Caqti_error, Caqti_lwt, Caqti_lwt_unix, Caqti_pool_config, Caqti_request, Caqti_type, Dream__server__Log, Dream_pure__Message, Lwt, Stdlib, Stdlib__Printf, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s",
    cst_Dream_sql_pool_sqlite_is_n =
      "Dream.sql_pool: 'sqlite' is not a valid scheme; did you mean 'sqlite3'?",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    message = "Dream.sql: no pool; did you apply Dream.sql_pool?",
    Caqti_lwt = global_data.Caqti_lwt,
    Lwt = global_data.Lwt,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib = global_data.Stdlib,
    Caqti_lwt_unix = global_data.Caqti_lwt_unix,
    Uri = global_data.Uri,
    Caqti_pool_config = global_data.Caqti_pool_config,
    Caqti_error = global_data.Caqti_error,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Caqti_driver_info = global_data.Caqti_driver_info,
    Dream_server_Log = global_data.Dream__server__Log,
    Caqti_type = global_data.Caqti_type,
    Caqti_request = global_data.Caqti_request,
    log = caml_call2(Dream_server_Log[19], 0, "dream.sql"),
    pool_field = caml_call3(Dream_pure_Message[39], 0, 0, 0),
    foreign_keys_on =
      caml_call2
       (caml_call2(Caqti_request[7][1], Caqti_type[30], Caqti_type[30]),
        0,
        "PRAGMA foreign_keys = ON"),
    _h_ = [0, [2, 0, 0], cst_s],
    _g_ = [0, 1],
    _f_ = [0, [2, 0, 0], cst_s],
    cst_Dream_set_session_field_co =
      "Dream.set_session_field; could cause deadlock",
    cst_Re_entrant_call_to_Dream_s =
      "Re-entrant call to Dream.sql, perhaps through ",
    _e_ = [0, [2, 0, 0], cst_s],
    _c_ =
      [0,
       [11, cst_Dream_sql_pool_sqlite_is_n, 0],
       cst_Dream_sql_pool_sqlite_is_n],
    _b_ = [0, "sqlite"],
    _d_ =
      [0,
       [11,
        "Dream.sql_pool: cannot create pool for '",
        [2, 0, [11, "': ", [2, 0, 0]]]],
       "Dream.sql_pool: cannot create pool for '%s': %s"],
    _a_ = [0, 0];
   function post_connect(Db){
    var match = caml_call1(Caqti_driver_info[4], Db[1]);
    if(typeof match === "number" && 127507692 === match)
     return caml_call2(Db[13], foreign_keys_on, 0);
    return caml_call1(Lwt[4], _a_);
   }
   function sql_pool(size, uri){
    var pool_cell = [0, 0];
    return function(inner_handler, request){
     var match = pool_cell[1];
     if(match){
      var pool = match[1];
      caml_call3(Dream_pure_Message[41], request, pool_field, pool);
      return caml_call1(inner_handler, request);
     }
     var parsed_uri = caml_call1(Uri[7], uri);
     if(runtime.caml_equal(caml_call1(Uri[29], parsed_uri), _b_)){
      var _r_ = function(log){return caml_call2(log, [0, request], _c_);};
      caml_call1(log[2], _r_);
     }
     var
      pool_config = caml_call5(Caqti_pool_config[1], size, 0, 0, 0, 0),
      pool$0 =
        caml_call7
         (Caqti_lwt_unix[4],
          [0, pool_config],
          [0, post_connect],
          0,
          0,
          0,
          0,
          parsed_uri);
     if(0 === pool$0[0]){
      var pool$1 = pool$0[1];
      pool_cell[1] = [0, pool$1];
      caml_call3(Dream_pure_Message[41], request, pool_field, pool$1);
      return caml_call1(inner_handler, request);
     }
     var
      error = pool$0[1],
      _s_ = caml_call1(Caqti_error[20], error),
      message = caml_call3(Stdlib_Printf[4], _d_, uri, _s_);
     function _t_(log){return caml_call3(log, [0, request], _e_, message);}
     caml_call1(log[1], _t_);
     return caml_call1(Stdlib[2], message);};
   }
   var acquired_sql_connection = caml_call1(Lwt[49], 0);
   function sql(request, callback){
    var match = caml_call2(Dream_pure_Message[40], request, pool_field);
    if(! match){
     var
      _m_ = function(log){return caml_call3(log, [0, request], _h_, message);};
     caml_call1(log[1], _m_);
     return caml_call1(Stdlib[2], message);
    }
    var
     pool = match[1],
     match$0 = caml_call1(Lwt[50], acquired_sql_connection);
    a:
    if(match$0 && match$0[1]){
     var
      message$0 =
        caml_call2
         (Stdlib[28],
          cst_Re_entrant_call_to_Dream_s,
          cst_Dream_set_session_field_co),
      _i_ =
        function(log){return caml_call3(log, [0, request], _f_, message$0);};
     caml_call1(log[2], _i_);
     break a;
    }
    function _j_(db){
     function _n_(param){
      function _o_(exn){throw caml_maybe_attach_backtrace(exn, 1);}
      function _p_(result){return caml_call1(Lwt[4], [0, result]);}
      function _q_(param){return caml_call1(callback, db);}
      return caml_call3(Lwt[9], _q_, _p_, _o_);
     }
     return caml_call1(caml_call2(Lwt[51], acquired_sql_connection, _g_), _n_);
    }
    var
     ppx_lwt_0 = caml_call1(caml_call2(Caqti_lwt_unix[1][2], 0, _j_), pool);
    function _k_(result){return caml_call1(Caqti_lwt[4], result);}
    function _l_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _l_, ppx_lwt_0, _k_);
   }
   var
    Dream_sql_Sql =
      [0,
       log,
       pool_field,
       foreign_keys_on,
       post_connect,
       sql_pool,
       acquired_sql_connection,
       sql];
   runtime.caml_register_global(26, Dream_sql_Sql, "Dream__sql__Sql");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__sql__Session
//# unitInfo: Requires: Caqti_error, Caqti_lwt, Caqti_request, Caqti_type, Dream__server__Cookie, Dream__server__Session, Dream__sql__Sql, Lwt, Stdlib, Stdlib__List, Stdlib__Option, Unix, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bad_payload$1 = "Bad payload",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Caqti_error = global_data.Caqti_error,
    Dream_server_Session = global_data.Dream__server__Session,
    Unix = global_data.Unix,
    Dream_server_Cookie = global_data.Dream__server__Cookie,
    Dream_sql_Sql = global_data.Dream__sql__Sql,
    Stdlib_List = global_data.Stdlib__List,
    Caqti_lwt = global_data.Caqti_lwt,
    Stdlib = global_data.Stdlib,
    Yojson_Basic = global_data.Yojson__Basic,
    Stdlib_Option = global_data.Stdlib__Option,
    Caqti_type = global_data.Caqti_type,
    Caqti_request = global_data.Caqti_request,
    symbol = Stdlib_Option[5],
    _i_ = [0, 0],
    _h_ = [0, 0],
    cst_Bad_payload$0 = cst_Bad_payload$1,
    cst_Bad_payload = cst_Bad_payload$1,
    cst_INSERT_INTO_dream_session_ =
      "\n      INSERT INTO dream_session (id, label, expires_at, payload)\n      VALUES ($1, $2, $3, $4)\n    ",
    cst_SELECT_label_expires_at_pa =
      "SELECT label, expires_at, payload FROM dream_session WHERE id = $1",
    cst_UPDATE_dream_session_SET_e =
      "UPDATE dream_session SET expires_at = $1 WHERE id = $2",
    cst_UPDATE_dream_session_SET_p =
      "UPDATE dream_session SET payload = $1 WHERE id = $2",
    cst_DELETE_FROM_dream_session_ = "DELETE FROM dream_session WHERE id = $1";
   function serialize_payload(payload){
    function _ae_(param){
     var value = param[2], name = param[1];
     return [0, name, [0, -976970511, value]];
    }
    var assoc = caml_call1(caml_call1(Stdlib_List[20], _ae_), payload);
    return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, 963043957, assoc]);
   }
   var
    _a_ = Caqti_type[30],
    _b_ =
      caml_call4
       (Caqti_type[33],
        Caqti_type[18],
        Caqti_type[18],
        Caqti_type[17],
        Caqti_type[18]),
    query =
      caml_call2
       (caml_call2(Caqti_request[7][1], _b_, _a_),
        0,
        cst_INSERT_INTO_dream_session_);
   function insert(Db, session){
    var
     payload = serialize_payload(session[4]),
     ppx_lwt_0 =
       caml_call2
        (Db[13], query, [0, session[1], session[2], session[3], payload]);
    function _ac_(result){return caml_call1(Caqti_lwt[4], result);}
    function _ad_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _ad_, ppx_lwt_0, _ac_);
   }
   var
    _c_ =
      caml_call3
       (Caqti_type[32], Caqti_type[18], Caqti_type[17], Caqti_type[18]),
    query$0 =
      caml_call2
       (caml_call2(Caqti_request[7][3], Caqti_type[18], _c_),
        0,
        cst_SELECT_label_expires_at_pa);
   function find_opt(Db, id){
    var ppx_lwt_0 = caml_call2(Db[16], query$0, id);
    function _Y_(result){
     function ___(exn){throw caml_maybe_attach_backtrace(exn, 0);}
     function _$_(param){
      if(! param) return Lwt[37];
      var
       match = param[1],
       payload = match[3],
       expires_at = match[2],
       label = match[1],
       param$0 = caml_call4(Yojson_Basic[33], 0, 0, 0, payload);
      a:
      {
       if(typeof param$0 !== "number" && 963043957 === param$0[1]){
        var
         payload$0 = param$0[2],
         _ab_ =
           function(param){
            var match = param[2];
            if(typeof match !== "number" && -976970511 === match[1]){
             var value = match[2], name = param[1];
             return [0, name, value];
            }
            return caml_call1(Stdlib[2], cst_Bad_payload$0);
           },
         payload$1 = caml_call1(caml_call1(Stdlib_List[20], _ab_), payload$0);
        break a;
       }
       var payload$1 = caml_call1(Stdlib[2], cst_Bad_payload);
      }
      return caml_call1(Lwt[41], [0, id, label, expires_at, payload$1]);
     }
     function _aa_(param){return caml_call1(Caqti_lwt[4], result);}
     return caml_call3(Lwt[9], _aa_, _$_, ___);
    }
    function _Z_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _Z_, ppx_lwt_0, _Y_);
   }
   var
    _d_ = Caqti_type[30],
    _e_ = caml_call2(Caqti_type[31], Caqti_type[17], Caqti_type[18]),
    query$1 =
      caml_call2
       (caml_call2(Caqti_request[7][1], _e_, _d_),
        0,
        cst_UPDATE_dream_session_SET_e);
   function refresh(Db, session){
    var ppx_lwt_0 = caml_call2(Db[13], query$1, [0, session[3], session[1]]);
    function _W_(result){return caml_call1(Caqti_lwt[4], result);}
    function _X_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _X_, ppx_lwt_0, _W_);
   }
   var
    _f_ = Caqti_type[30],
    _g_ = caml_call2(Caqti_type[31], Caqti_type[18], Caqti_type[18]),
    query$2 =
      caml_call2
       (caml_call2(Caqti_request[7][1], _g_, _f_),
        0,
        cst_UPDATE_dream_session_SET_p);
   function update(Db, session){
    var
     payload = serialize_payload(session[4]),
     ppx_lwt_0 = caml_call2(Db[13], query$2, [0, payload, session[1]]);
    function _U_(result){return caml_call1(Caqti_lwt[4], result);}
    function _V_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _V_, ppx_lwt_0, _U_);
   }
   var
    query$3 =
      caml_call2
       (caml_call2(Caqti_request[7][1], Caqti_type[18], Caqti_type[30]),
        0,
        cst_DELETE_FROM_dream_session_);
   function remove(Db, id){
    var ppx_lwt_0 = caml_call2(Db[13], query$3, id);
    function _S_(result){return caml_call1(Caqti_lwt[4], result);}
    function _T_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _T_, ppx_lwt_0, _S_);
   }
   function create(db, expires_at, attempt){
    var
     _O_ = caml_call1(Dream_server_Session[6], 0),
     session = [0, caml_call1(Dream_server_Session[5], 0), _O_, expires_at, 0];
    function _P_(exn){
     if(exn[1] === Caqti_error[23] && 3 >= attempt)
      return create(db, expires_at, attempt + 1 | 0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _Q_(param){return caml_call1(Lwt[4], session);}
    function _R_(param){return insert(db, session);}
    return caml_call3(Lwt[9], _R_, _Q_, _P_);
   }
   function put(request, session, name, value){
    var
     _M_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _M_),
     dictionary$0 = [0, [0, name, value], dictionary];
    session[4] = dictionary$0;
    function _N_(db){return update(db, session);}
    return caml_call2(Dream_sql_Sql[7], request, _N_);
   }
   function drop(request, session, name){
    var
     _K_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _K_);
    session[4] = dictionary;
    function _L_(db){return update(db, session);}
    return caml_call2(Dream_sql_Sql[7], request, _L_);
   }
   function invalidate(request, lifetime, operations, session){
    function _F_(db){
     var ppx_lwt_0 = remove(db, session[1][1]);
     function _G_(param){
      var ppx_lwt_0 = create(db, caml_call1(Unix[101], 0) + lifetime, 1);
      function _I_(new_session){
       session[1] = new_session;
       operations[4] = 1;
       return Lwt[36];
      }
      function _J_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _J_, ppx_lwt_0, _I_);
     }
     function _H_(exn){
      try{throw caml_maybe_attach_backtrace(exn, 0);}
      catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
     }
     return caml_call3(Lwt[81], _H_, ppx_lwt_0, _G_);
    }
    return caml_call2(Dream_sql_Sql[7], request, _F_);
   }
   function operations(request, lifetime, session, dirty){
    var operations = [];
    function _D_(param){
     return invalidate(request, lifetime, operations, session);
    }
    function _E_(name){return drop(request, session[1], name);}
    runtime.caml_update_dummy
     (operations,
      [0,
       function(name, value){return put(request, session[1], name, value);},
       _E_,
       _D_,
       dirty]);
    return operations;
   }
   function load(lifetime, request){
    function _m_(db){
     var
      now = caml_call1(Unix[101], 0),
      match =
        caml_call7
         (Dream_server_Cookie[3],
          0,
          _h_,
          0,
          0,
          0,
          request,
          Dream_server_Session[3]);
     if(match){
      var id = match[1], match$0 = caml_call1(Dream_server_Session[8], id);
      if(match$0)
       var
        id$0 = match$0[1],
        _n_ = function(exn){throw caml_maybe_attach_backtrace(exn, 0);},
        _o_ =
          function(param){
           if(! param) return Lwt[37];
           var session = param[1];
           if(now < session[3]) return caml_call1(Lwt[4], [0, session]);
           var ppx_lwt_0 = remove(db, id$0);
           function _B_(param){return Lwt[37];}
           function _C_(exn){
            try{throw caml_maybe_attach_backtrace(exn, 0);}
            catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
           }
           return caml_call3(Lwt[81], _C_, ppx_lwt_0, _B_);
          },
        _p_ = function(param){return find_opt(db, id$0);},
        _q_ = caml_call3(Lwt[9], _p_, _o_, _n_);
      else
       var _q_ = Lwt[37];
      var ppx_lwt_0 = _q_;
     }
     else
      var ppx_lwt_0 = Lwt[37];
     function _r_(valid_session){
      if(valid_session){
       var session = valid_session[1];
       if(lifetime / 2. < session[3] - now)
        var _t_ = caml_call1(Lwt[4], [0, 0, session]);
       else{
        session[3] = now + lifetime;
        var
         ppx_lwt_0$0 = refresh(db, session),
         _w_ = function(param){return caml_call1(Lwt[4], [0, 1, session]);},
         _x_ =
           function(exn){
            try{throw caml_maybe_attach_backtrace(exn, 0);}
            catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
           },
         _t_ = caml_call3(Lwt[81], _x_, ppx_lwt_0$0, _w_);
       }
       var ppx_lwt_0 = _t_;
      }
      else
       var
        ppx_lwt_0$1 = create(db, now + lifetime, 1),
        _y_ = function(session){return caml_call1(Lwt[4], [0, 1, session]);},
        _z_ =
          function(exn){
           try{throw caml_maybe_attach_backtrace(exn, 0);}
           catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
          },
        ppx_lwt_0 = caml_call3(Lwt[81], _z_, ppx_lwt_0$1, _y_);
      function _u_(param){
       var
        session = param[2],
        dirty = param[1],
        session$0 = [0, session],
        _A_ = [0, operations(request, lifetime, session$0, dirty), session$0];
       return caml_call1(Lwt[4], _A_);
      }
      function _v_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _v_, ppx_lwt_0, _u_);
     }
     function _s_(exn){
      try{throw caml_maybe_attach_backtrace(exn, 0);}
      catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
     }
     return caml_call3(Lwt[81], _s_, ppx_lwt_0, _r_);
    }
    return caml_call2(Dream_sql_Sql[7], request, _m_);
   }
   function send(param, request, response){
    var session = param[2], operations = param[1];
    if(operations[4]){
     var
      id = caml_call1(Dream_server_Session[7], session[1][1]),
      _l_ = caml_call1(Unix[101], 0),
      max_age = session[1][3] - _l_;
     caml_call13
      (Dream_server_Cookie[4],
       0,
       _i_,
       0,
       [0, max_age],
       0,
       0,
       0,
       0,
       0,
       response,
       request,
       Dream_server_Session[3],
       id);
    }
    return caml_call1(Lwt[4], response);
   }
   function back_end(lifetime){
    return [0, function(_k_){return load(lifetime, _k_);}, send];
   }
   function sql_sessions(opt){
    if(opt)
     var sth = opt[1], lifetime = sth;
    else
     var lifetime = Dream_server_Session[15];
    var _j_ = back_end(lifetime);
    return caml_call1(Dream_server_Session[13], _j_);
   }
   var
    Dream_sql_Session =
      [0,
       symbol,
       serialize_payload,
       insert,
       find_opt,
       refresh,
       update,
       remove,
       create,
       put,
       drop,
       invalidate,
       operations,
       load,
       send,
       back_end,
       sql_sessions];
   runtime.caml_register_global(23, Dream_sql_Session, "Dream__sql__Session");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
