// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lwt_features
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Lwt_features =
      [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1];
   runtime.caml_register_global(0, Lwt_features, "Lwt_features");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_config
//# unitInfo: Requires: Lwt_features
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Lwt_features = global_data.Lwt_features,
    android = Lwt_features[1],
    libev_default = Lwt_features[2],
    HAVE_LIBEV = Lwt_features[3],
    HAVE_PTHREAD = Lwt_features[4],
    HAVE_EVENTFD = Lwt_features[5],
    HAVE_FD_PASSING = Lwt_features[6],
    HAVE_GETCPU = Lwt_features[7],
    HAVE_AFFINITY = Lwt_features[8],
    HAVE_GET_CREDENTIALS_LINUX = Lwt_features[9],
    HAVE_GET_CREDENTIALS_NETBSD = Lwt_features[10],
    HAVE_GET_CREDENTIALS_OPENBSD = Lwt_features[11],
    HAVE_GET_CREDENTIALS_FREEBSD = Lwt_features[12],
    HAVE_GETPEEREID = Lwt_features[13],
    HAVE_FDATASYNC = Lwt_features[14],
    HAVE_NETDB_REENTRANT = Lwt_features[15],
    HAVE_REENTRANT_HOSTENT = Lwt_features[16],
    HAVE_ST_MTIM_TV_NSEC = Lwt_features[17],
    HAVE_ST_MTIMESPEC_TV_NSEC = Lwt_features[18],
    HAVE_ST_MTIMENSEC = Lwt_features[19],
    HAVE_BSD_MINCORE = Lwt_features[20],
    HAVE_ACCEPT4 = Lwt_features[21],
    HAVE_GET_CREDENTIALS =
      HAVE_GET_CREDENTIALS_LINUX
      ||
       HAVE_GET_CREDENTIALS_NETBSD
       ||
        HAVE_GET_CREDENTIALS_OPENBSD
        || HAVE_GET_CREDENTIALS_FREEBSD || HAVE_GETPEEREID,
    Lwt_config =
      [0,
       android,
       libev_default,
       HAVE_LIBEV,
       HAVE_PTHREAD,
       HAVE_EVENTFD,
       HAVE_FD_PASSING,
       HAVE_GETCPU,
       HAVE_AFFINITY,
       HAVE_GET_CREDENTIALS_LINUX,
       HAVE_GET_CREDENTIALS_NETBSD,
       HAVE_GET_CREDENTIALS_OPENBSD,
       HAVE_GET_CREDENTIALS_FREEBSD,
       HAVE_GETPEEREID,
       HAVE_FDATASYNC,
       HAVE_NETDB_REENTRANT,
       HAVE_REENTRANT_HOSTENT,
       HAVE_ST_MTIM_TV_NSEC,
       HAVE_ST_MTIMESPEC_TV_NSEC,
       HAVE_ST_MTIMENSEC,
       HAVE_BSD_MINCORE,
       HAVE_ACCEPT4,
       HAVE_GET_CREDENTIALS];
   runtime.caml_register_global(1, Lwt_config, "Lwt_config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_engine
//# unitInfo: Requires: CamlinternalLazy, CamlinternalOO, Lwt_config, Lwt_pqueue, Lwt_sequence, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Map, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_backend = "backend",
    cst_cleanup = "cleanup",
    cst_destroy = "destroy",
    cst_fake_io = "fake_io",
    cst_fork = "fork",
    cst_forwards_signal = "forwards_signal",
    cst_iter = "iter",
    cst_loop = "loop",
    cst_new_sleeps = "new_sleeps",
    cst_on_readable = "on_readable",
    cst_on_timer = "on_timer",
    cst_on_writable = "on_writable",
    cst_readable_count = "readable_count",
    cst_readables = "readables",
    cst_register_readable = "register_readable",
    cst_register_timer = "register_timer",
    cst_register_writable = "register_writable",
    cst_select = "select",
    cst_sleep_queue = "sleep_queue",
    cst_timer_count = "timer_count",
    cst_timers = "timers",
    cst_transfer = "transfer",
    cst_wait_readable = "wait_readable",
    cst_wait_writable = "wait_writable",
    cst_writable_count = "writable_count",
    cst_writables = "writables",
    caml_equal = runtime.caml_equal,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _a_ =
      [0,
       cst_writable_count,
       cst_transfer,
       cst_timer_count,
       cst_select,
       cst_register_writable,
       cst_register_timer,
       cst_register_readable,
       cst_readable_count,
       cst_on_writable,
       cst_on_timer,
       cst_on_readable,
       cst_iter,
       cst_forwards_signal,
       cst_fork,
       cst_fake_io,
       cst_destroy,
       cst_cleanup],
    _g_ = [0, cst_iter],
    _h_ = [0, cst_writables, cst_timers, cst_readables],
    _j_ =
      [0,
       cst_destroy,
       cst_fake_io,
       cst_fork,
       cst_forwards_signal,
       cst_on_readable,
       cst_on_timer,
       cst_on_writable,
       cst_readable_count,
       cst_timer_count,
       cst_transfer,
       cst_writable_count],
    _k_ =
      [0,
       cst_cleanup,
       cst_destroy,
       cst_fake_io,
       cst_fork,
       cst_forwards_signal,
       cst_on_readable,
       cst_on_timer,
       cst_on_writable,
       cst_readable_count,
       cst_register_readable,
       cst_register_timer,
       cst_register_writable,
       cst_timer_count,
       cst_transfer,
       cst_writable_count],
    _m_ =
      [0,
       cst_register_writable,
       cst_register_timer,
       cst_register_readable,
       cst_iter,
       cst_cleanup],
    _n_ =
      [0,
       cst_writables,
       cst_wait_writable,
       cst_wait_readable,
       cst_timers,
       cst_sleep_queue,
       cst_readables,
       cst_new_sleeps],
    _o_ =
      [0,
       cst_writable_count,
       cst_transfer,
       cst_timer_count,
       cst_register_writable,
       cst_register_timer,
       cst_register_readable,
       cst_readable_count,
       cst_on_writable,
       cst_on_timer,
       cst_on_readable,
       cst_iter,
       cst_forwards_signal,
       cst_fork,
       cst_fake_io,
       cst_destroy,
       cst_cleanup],
    shared = [0, cst_select],
    Unix = global_data.Unix,
    Stdlib = global_data.Stdlib,
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_List = global_data.Stdlib__List,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_Format = global_data.Stdlib__Format,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Lwt_pqueue = global_data.Lwt_pqueue,
    Stdlib_Map = global_data.Stdlib__Map,
    Lwt_config = global_data.Lwt_config,
    cst_EV_DEFAULT = "EV_DEFAULT",
    cst_EV_SELECT = "EV_SELECT",
    cst_EV_POLL = "EV_POLL",
    cst_EV_EPOLL = "EV_EPOLL",
    cst_EV_KQUEUE = "EV_KQUEUE",
    cst_EV_DEVPOLL = "EV_DEVPOLL",
    cst_EV_PORT = "EV_PORT",
    _b_ =
      [0,
       cst_cleanup,
       cst_destroy,
       cst_fake_io,
       cst_fork,
       cst_forwards_signal,
       cst_iter,
       cst_on_readable,
       cst_on_timer,
       cst_on_writable,
       cst_readable_count,
       cst_register_readable,
       cst_register_timer,
       cst_register_writable,
       cst_timer_count,
       cst_transfer,
       cst_writable_count],
    _c_ = [0, cst_readables, cst_writables, cst_timers],
    _d_ =
      [0,
       cst_fork,
       cst_on_readable,
       cst_iter,
       cst_loop,
       cst_writable_count,
       cst_transfer,
       cst_readable_count,
       cst_on_writable,
       cst_timer_count,
       cst_backend,
       cst_forwards_signal,
       cst_destroy,
       cst_on_timer,
       cst_fake_io],
    _e_ = [0, cst_loop],
    _f_ =
      [0,
       cst_sleep_queue,
       cst_new_sleeps,
       cst_wait_readable,
       cst_wait_writable],
    _i_ =
      [0,
       cst_fork,
       cst_on_readable,
       cst_iter,
       cst_writable_count,
       cst_transfer,
       cst_readable_count,
       cst_on_writable,
       cst_timer_count,
       cst_forwards_signal,
       cst_destroy,
       cst_on_timer,
       cst_fake_io],
    _l_ =
      [0,
       cst_writable_count,
       cst_transfer,
       cst_timer_count,
       cst_register_writable,
       cst_register_timer,
       cst_register_readable,
       cst_readable_count,
       "poll",
       cst_on_writable,
       cst_on_timer,
       cst_on_readable,
       cst_iter,
       cst_forwards_signal,
       cst_fork,
       cst_fake_io,
       cst_destroy,
       cst_cleanup],
    _p_ =
      [0,
       cst_writable_count,
       cst_transfer,
       cst_timer_count,
       cst_register_writable,
       cst_register_timer,
       cst_register_readable,
       cst_readable_count,
       cst_on_writable,
       cst_on_timer,
       cst_on_readable,
       cst_loop,
       cst_iter,
       cst_forwards_signal,
       cst_fork,
       cst_fake_io,
       cst_destroy,
       cst_cleanup,
       cst_backend];
   function stop_event(ev){
    var ev$0 = ev[1];
    caml_call1(Lwt_sequence[3], ev$0[2]);
    var _cZ_ = ev$0[1], _c0_ = runtime.caml_obj_tag(_cZ_);
    if(250 === _c0_) return _cZ_[1];
    if(246 !== _c0_ && 244 !== _c0_) return _cZ_;
    return caml_call1(CamlinternalLazy[2], _cZ_);
   }
   var
    _q_ = caml_call1(Lwt_sequence[4], 0),
    fake_event = [0, 0, caml_call2(Lwt_sequence[8], 0, _q_)],
    fake_event$0 = [0, fake_event],
    abstract$0 = [],
    _r_ = 0,
    _s_ = 0;
   caml_update_dummy
    (abstract$0,
     [0,
      0,
      function(_cb_){
       var
        _cc_ = caml_call3(CamlinternalOO[4], _cb_, _o_, _c_),
        _cs_ = _cc_[17],
        _ct_ = _cc_[18],
        _cu_ = _cc_[19],
        _cd_ = _cc_[1],
        _ce_ = _cc_[2],
        _cf_ = _cc_[3],
        _cg_ = _cc_[4],
        _ch_ = _cc_[5],
        _ci_ = _cc_[6],
        _cj_ = _cc_[7],
        _ck_ = _cc_[8],
        _cl_ = _cc_[9],
        _cm_ = _cc_[10],
        _cn_ = _cc_[12],
        _co_ = _cc_[13],
        _cp_ = _cc_[14],
        _cq_ = _cc_[15],
        _cr_ = _cc_[16];
       function _cv_(self_1, signum){return 0;}
       function _cw_(self_1){return 0;}
       function _cx_(self_1){
        return caml_call1(Lwt_sequence[7], self_1[1 + _cu_]);
       }
       function _cy_(self_1){
        return caml_call1(Lwt_sequence[7], self_1[1 + _ct_]);
       }
       function _cz_(self_1){
        return caml_call1(Lwt_sequence[7], self_1[1 + _cs_]);
       }
       function _cA_(self_1, delay, repeat, f){
        var ev = [0, fake_event];
        function g(param){return caml_call1(f, ev);}
        var stop = caml_call4(self_1[1][1 + _ch_], self_1, delay, repeat, g);
        ev[1] =
         [0,
          stop,
          caml_call2
           (Lwt_sequence[9], [0, delay, repeat, f, g, ev], self_1[1 + _cu_])];
        return ev;
       }
       function _cB_(self_1, fd, f){
        var ev = [0, fake_event];
        function g(param){return caml_call1(f, ev);}
        var stop = caml_call3(self_1[1][1 + _cg_], self_1, fd, g);
        ev[1] =
         [0,
          stop,
          caml_call2(Lwt_sequence[9], [0, fd, f, g, ev], self_1[1 + _ct_])];
        return ev;
       }
       function _cC_(self_1, fd, f){
        var ev = [0, fake_event];
        function g(param){return caml_call1(f, ev);}
        var stop = caml_call3(self_1[1][1 + _ci_], self_1, fd, g);
        ev[1] =
         [0,
          stop,
          caml_call2(Lwt_sequence[9], [0, fd, f, g, ev], self_1[1 + _cs_])];
        return ev;
       }
       function _cD_(self_1, fd){
        var _cT_ = self_1[1 + _cs_];
        function _cU_(param){
         var g = param[3], fd$0 = param[1], _cY_ = caml_equal(fd, fd$0);
         return _cY_ ? caml_call1(g, 0) : _cY_;
        }
        caml_call2(Lwt_sequence[17], _cU_, _cT_);
        var _cV_ = self_1[1 + _ct_];
        function _cW_(param){
         var g = param[3], fd$0 = param[1], _cX_ = caml_equal(fd, fd$0);
         return _cX_ ? caml_call1(g, 0) : _cX_;
        }
        return caml_call2(Lwt_sequence[17], _cW_, _cV_);
       }
       function _cE_(self_1, engine){
        var _cN_ = self_1[1 + _cs_];
        function _cO_(param){
         var ev = param[4], f = param[2], fd = param[1];
         stop_event(ev);
         ev[1] =
          caml_call3
            (caml_get_public_method(engine, -980609456, 1), engine, fd, f)
           [1];
         return 0;
        }
        caml_call2(Lwt_sequence[17], _cO_, _cN_);
        var _cP_ = self_1[1 + _ct_];
        function _cQ_(param){
         var ev = param[4], f = param[2], fd = param[1];
         stop_event(ev);
         ev[1] =
          caml_call3
            (caml_get_public_method(engine, -379288640, 2), engine, fd, f)
           [1];
         return 0;
        }
        caml_call2(Lwt_sequence[17], _cQ_, _cP_);
        var _cR_ = self_1[1 + _cu_];
        function _cS_(param){
         var ev = param[5], f = param[3], repeat = param[2], delay = param[1];
         stop_event(ev);
         ev[1] =
          caml_call4
            (caml_get_public_method(engine, 926255461, 3),
             engine,
             delay,
             repeat,
             f)
           [1];
         return 0;
        }
        return caml_call2(Lwt_sequence[17], _cS_, _cR_);
       }
       var
        _cF_ =
          [0,
           _cq_,
           function(self_1){
            var _cH_ = self_1[1 + _cs_];
            function _cI_(param){var ev = param[4]; return stop_event(ev);}
            caml_call2(Lwt_sequence[17], _cI_, _cH_);
            var _cJ_ = self_1[1 + _ct_];
            function _cK_(param){var ev = param[4]; return stop_event(ev);}
            caml_call2(Lwt_sequence[17], _cK_, _cJ_);
            var _cL_ = self_1[1 + _cu_];
            function _cM_(param){var ev = param[5]; return stop_event(ev);}
            caml_call2(Lwt_sequence[17], _cM_, _cL_);
            return caml_call1(self_1[1][1 + _cr_], self_1);
           },
           _ce_,
           _cE_,
           _cp_,
           _cD_,
           _cm_,
           _cC_,
           _ck_,
           _cB_,
           _cl_,
           _cA_,
           _cj_,
           _cz_,
           _cd_,
           _cy_,
           _cf_,
           _cx_,
           _co_,
           _cw_,
           _cn_,
           _cv_];
       caml_call2(CamlinternalOO[11], _cb_, _cF_);
       return function(env, _cG_){
        var self = caml_call2(CamlinternalOO[24], _cG_, _cb_);
        self[1 + _cs_] = caml_call1(Lwt_sequence[4], 0);
        self[1 + _ct_] = caml_call1(Lwt_sequence[4], 0);
        self[1 + _cu_] = caml_call1(Lwt_sequence[4], 0);
        return self;};
      },
      _s_,
      _r_]);
   var
    equal = caml_equal,
    default$0 = 0,
    select = 1,
    poll = 2,
    epoll = 3,
    kqueue = 4,
    devpoll = 5,
    port = 6;
   function pp(fmt, t){
    switch(t){
      case 0:
       var _ca_ = cst_EV_DEFAULT; break;
      case 1:
       var _ca_ = cst_EV_SELECT; break;
      case 2:
       var _ca_ = cst_EV_POLL; break;
      case 3:
       var _ca_ = cst_EV_EPOLL; break;
      case 4:
       var _ca_ = cst_EV_KQUEUE; break;
      case 5:
       var _ca_ = cst_EV_DEVPOLL; break;
      default: var _ca_ = cst_EV_PORT;
    }
    return caml_call2(Stdlib_Format[13], fmt, _ca_);
   }
   function _t_(_bS_){
    var
     _bT_ = caml_call3(CamlinternalOO[4], _bS_, _p_, _e_),
     _b1_ = _bT_[19],
     _bU_ = _bT_[4],
     _bV_ = _bT_[5],
     _bW_ = _bT_[6],
     _bX_ = _bT_[11],
     _bY_ = _bT_[12],
     _bZ_ = _bT_[17],
     _b0_ = _bT_[18],
     _b2_ =
       caml_call6(CamlinternalOO[18], _bS_, _h_, _m_, _j_, abstract$0, 1)[1];
    function _b3_(self_2, delay, repeat, f){
     var
      ev = runtime.lwt_libev_timer_init(self_2[1 + _b1_], delay, repeat, f);
     return [246,
             function(param){
              return runtime.lwt_libev_timer_stop(self_2[1 + _b1_], ev);
             }];
    }
    function _b4_(self_2, fd, f){
     var ev = runtime.lwt_libev_writable_init(self_2[1 + _b1_], fd, f);
     return [246,
             function(param){
              return runtime.lwt_libev_io_stop(self_2[1 + _b1_], ev);
             }];
    }
    function _b5_(self_2, fd, f){
     var ev = runtime.lwt_libev_readable_init(self_2[1 + _b1_], fd, f);
     return [246,
             function(param){
              return runtime.lwt_libev_io_stop(self_2[1 + _b1_], ev);
             }];
    }
    function _b6_(self_2, block){
     try{
      var _b$_ = runtime.lwt_libev_loop(self_2[1 + _b1_], block);
      return _b$_;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      runtime.lwt_libev_unloop(self_2[1 + _b1_]);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function _b7_(self_2){return runtime.lwt_libev_stop(self_2[1 + _b1_]);}
    function _b8_(self_2){return runtime.lwt_libev_backend(self_2[1 + _b1_]);}
    var
     _b9_ =
       [0,
        _bX_,
        function(self_2){return self_2[1 + _b1_];},
        _b0_,
        _b8_,
        _bZ_,
        _b7_,
        _bY_,
        _b6_,
        _bW_,
        _b5_,
        _bU_,
        _b4_,
        _bV_,
        _b3_];
    caml_call2(CamlinternalOO[11], _bS_, _b9_);
    return function(_b__, self, opt){
     if(opt) var sth = opt[1], sth$0 = sth; else var sth$0 = default$0;
     return function(param){
      var self$0 = caml_call2(CamlinternalOO[24], self, _bS_);
      caml_call1(_b2_, self$0);
      self$0[1 + _b1_] = runtime.lwt_libev_init(sth$0);
      return caml_call3(CamlinternalOO[26], self, self$0, _bS_);};};
   }
   var
    libev = caml_call2(CamlinternalOO[19], _d_, _t_),
    libev_deprecated = [];
   function _u_(_bR_, _bQ_){return caml_call3(_bR_, _bQ_, 0, 0);}
   var _v_ = libev[4], _w_ = libev[3];
   function _x_(_bL_){
    var _bM_ = caml_call1(libev[2], _bL_);
    return function(_bN_){
     var _bO_ = caml_call1(_bM_, _bN_);
     return function(_bP_){return _u_(_bO_, _bP_);};};
   }
   var _y_ = libev[1];
   caml_update_dummy
    (libev_deprecated,
     [0, function(_bK_){return _u_(_y_, _bK_);}, _x_, _w_, _v_]);
   function compare(param){
    var t1 = param[1];
    return function(param){
     var t2 = param[1];
     return runtime.caml_float_compare(t1, t2);};
   }
   var
    Sleep_queue = caml_call1(Lwt_pqueue[1], [0, compare]),
    compare$0 = runtime.caml_compare,
    Fd_map = caml_call1(Stdlib_Map[1], [0, compare$0]);
   function restart_actions(sleep_queue, now){
    var sleep_queue$0 = sleep_queue;
    for(;;){
     var match = caml_call1(Sleep_queue[6], sleep_queue$0);
     if(match){
      var _bJ_ = match[1], time = _bJ_[1];
      if(_bJ_[2]){
       var
        sleep_queue$1 = caml_call1(Sleep_queue[7], sleep_queue$0),
        sleep_queue$0 = sleep_queue$1;
       continue;
      }
      var action = _bJ_[3];
      if(time <= now){
       var sleep_queue$2 = caml_call1(Sleep_queue[7], sleep_queue$0);
       caml_call1(action, 0);
       var sleep_queue$0 = sleep_queue$2;
       continue;
      }
     }
     return sleep_queue$0;
    }
   }
   function get_next_timeout(sleep_queue){
    var sleep_queue$0 = sleep_queue;
    for(;;){
     var match = caml_call1(Sleep_queue[6], sleep_queue$0);
     if(! match) return -1.;
     var _bH_ = match[1], time = _bH_[1];
     if(! _bH_[2]){
      var _bI_ = time - caml_call1(Unix[101], 0);
      return caml_call2(Stdlib[17], 0., _bI_);
     }
     var
      sleep_queue$1 = caml_call1(Sleep_queue[7], sleep_queue$0),
      sleep_queue$0 = sleep_queue$1;
    }
   }
   function bad_fd(fd){
    try{caml_call1(Unix[41], fd); var _bF_ = 0; return _bF_;}
    catch(_bG_){
     var _bE_ = caml_wrap_exception(_bG_);
     if(_bE_[1] === Unix[1]) return 1;
     throw caml_maybe_attach_backtrace(_bE_, 0);
    }
   }
   function invoke_actions(fd, map){
    try{var actions = caml_call2(Fd_map[17], fd, map);}
    catch(_bD_){
     var _bB_ = caml_wrap_exception(_bD_);
     if(_bB_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_bB_, 0);
    }
    function _bC_(f){return caml_call1(f, 0);}
    return caml_call2(Lwt_sequence[17], _bC_, actions);
   }
   var select_or_poll_based = [], _z_ = 0, _A_ = 0;
   caml_update_dummy
    (select_or_poll_based,
     [0,
      0,
      function(_a7_){
       var
        _a8_ = caml_call3(CamlinternalOO[4], _a7_, _o_, _f_),
        _bc_ = _a8_[18],
        _bd_ = _a8_[19],
        _be_ = _a8_[20],
        _a9_ = _a8_[4],
        _a__ = _a8_[5],
        _a$_ = _a8_[6],
        _ba_ = _a8_[16],
        _bb_ = _a8_[17],
        _bf_ =
          caml_call6(CamlinternalOO[18], _a7_, _h_, _m_, _j_, abstract$0, 1)
           [1];
       function _bg_(self_4, fd, f){
        try{
         var
          _bx_ = caml_call2(Fd_map[17], fd, self_4[1 + _be_]),
          actions$0 = _bx_;
        }
        catch(_bA_){
         var _bw_ = caml_wrap_exception(_bA_);
         if(_bw_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_bw_, 0);
         var actions = caml_call1(Lwt_sequence[4], 0);
         self_4[1 + _be_] =
          caml_call3(Fd_map[2], fd, actions, self_4[1 + _be_]);
         var actions$0 = actions;
        }
        var node = caml_call2(Lwt_sequence[8], f, actions$0);
        return [246,
                function(param){
                 caml_call1(Lwt_sequence[3], node);
                 var
                  _by_ = caml_call1(Lwt_sequence[6], actions$0),
                  _bz_ =
                    _by_
                     ? (self_4
                        [1 + _be_]
                       = caml_call2(Fd_map[6], fd, self_4[1 + _be_]),
                       0)
                     : _by_;
                 return _bz_;
                }];
       }
       function _bh_(self_4, fd, f){
        try{
         var
          _bs_ = caml_call2(Fd_map[17], fd, self_4[1 + _bd_]),
          actions$0 = _bs_;
        }
        catch(_bv_){
         var _br_ = caml_wrap_exception(_bv_);
         if(_br_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_br_, 0);
         var actions = caml_call1(Lwt_sequence[4], 0);
         self_4[1 + _bd_] =
          caml_call3(Fd_map[2], fd, actions, self_4[1 + _bd_]);
         var actions$0 = actions;
        }
        var node = caml_call2(Lwt_sequence[8], f, actions$0);
        return [246,
                function(param){
                 caml_call1(Lwt_sequence[3], node);
                 var
                  _bt_ = caml_call1(Lwt_sequence[6], actions$0),
                  _bu_ =
                    _bt_
                     ? (self_4
                        [1 + _bd_]
                       = caml_call2(Fd_map[6], fd, self_4[1 + _bd_]),
                       0)
                     : _bt_;
                 return _bu_;
                }];
       }
       function _bi_(self_4, delay, repeat, f){
        if(repeat){
         var sleeper = [], g = function _bq_(_bp_){return _bq_.fun(_bp_);};
         caml_update_dummy
          (sleeper, [0, caml_call1(Unix[101], 0) + delay, 0, g]);
         caml_update_dummy
          (g,
           function(param){
            sleeper[1] = caml_call1(Unix[101], 0) + delay;
            self_4[1 + _bc_] = [0, sleeper, self_4[1 + _bc_]];
            return caml_call1(f, 0);
           });
         self_4[1 + _bc_] = [0, sleeper, self_4[1 + _bc_]];
         return [246, function(_bo_){sleeper[2] = 1; return 0;}];
        }
        var sleeper$0 = [0, caml_call1(Unix[101], 0) + delay, 0, f];
        self_4[1 + _bc_] = [0, sleeper$0, self_4[1 + _bc_]];
        return [246, function(_bn_){sleeper$0[2] = 1; return 0;}];
       }
       var
        _bj_ =
          [0,
           _ba_,
           function(self_4){return 0;},
           _a__,
           _bi_,
           _a$_,
           _bh_,
           _a9_,
           _bg_];
       caml_call2(CamlinternalOO[11], _a7_, _bj_);
       return function(_bl_, _bk_){
        var _bm_ = caml_call2(CamlinternalOO[24], _bk_, _a7_);
        caml_call1(_bf_, _bm_);
        _bm_[1 + _bb_] = Sleep_queue[1];
        _bm_[1 + _bc_] = 0;
        _bm_[1 + _bd_] = Fd_map[1];
        _bm_[1 + _be_] = Fd_map[1];
        return caml_call3(CamlinternalOO[26], _bk_, _bm_, _a7_);};
      },
      _A_,
      _z_]);
   var select_based = [], _B_ = 0, _C_ = 0;
   caml_update_dummy
    (select_based,
     [0,
      0,
      function(_aB_){
       var
        _aC_ = caml_call2(CamlinternalOO[8], _aB_, _a_),
        _aD_ = _aC_[4],
        _aE_ = _aC_[12],
        _aF_ =
          caml_call6
           (CamlinternalOO[18], _aB_, _n_, _g_, _k_, select_or_poll_based, 1),
        _aH_ = _aF_[8],
        _aI_ = _aF_[6],
        _aJ_ = _aF_[4],
        _aK_ = _aF_[3],
        _aG_ = _aF_[1];
       function _aL_(self_5, block){
        var _aP_ = self_5[1 + _aH_], _aQ_ = self_5[1 + _aI_];
        function _aR_(q, e){return caml_call2(Sleep_queue[3], e, q);}
        self_5[1 + _aI_] = caml_call3(Stdlib_List[26], _aR_, _aQ_, _aP_);
        self_5[1 + _aH_] = 0;
        var _aS_ = 0, _aT_ = self_5[1 + _aJ_];
        function _aU_(fd, param, l){return [0, fd, l];}
        var
         fds_r = caml_call3(Fd_map[24], _aU_, _aT_, _aS_),
         _aV_ = 0,
         _aW_ = self_5[1 + _aK_];
        function _aX_(fd, param, l){return [0, fd, l];}
        var
         fds_w = caml_call3(Fd_map[24], _aX_, _aW_, _aV_),
         timeout = block ? get_next_timeout(self_5[1 + _aI_]) : 0.;
        a:
        try{
         var
          _a3_ =
            caml_call4(self_5[1][1 + _aD_], self_5, fds_r, fds_w, timeout),
          _a4_ = _a3_[2],
          _a5_ = _a3_[1],
          fds_w$1 = _a4_,
          fds_r$0 = _a5_;
        }
        catch(_a6_){
         var _aY_ = caml_wrap_exception(_a6_);
         if(_aY_[1] === Unix[1]){
          var _aZ_ = _aY_[2];
          if(typeof _aZ_ === "number"){
           if(3 === _aZ_){
            var
             fds_w$0 = caml_call2(Stdlib_List[44], bad_fd, fds_w),
             fds_w$1 = fds_w$0,
             fds_r$0 = caml_call2(Stdlib_List[44], bad_fd, fds_r);
            break a;
           }
           if(11 === _aZ_){var fds_w$1 = 0, fds_r$0 = 0; break a;}
          }
         }
         throw caml_maybe_attach_backtrace(_aY_, 0);
        }
        var _a0_ = caml_call1(Unix[101], 0);
        self_5[1 + _aI_] = restart_actions(self_5[1 + _aI_], _a0_);
        function _a1_(fd){return invoke_actions(fd, self_5[1 + _aJ_]);}
        caml_call2(Stdlib_List[18], _a1_, fds_r$0);
        function _a2_(fd){return invoke_actions(fd, self_5[1 + _aK_]);}
        return caml_call2(Stdlib_List[18], _a2_, fds_w$1);
       }
       caml_call3(CamlinternalOO[10], _aB_, _aE_, _aL_);
       return function(_aN_, _aM_){
        var _aO_ = caml_call2(CamlinternalOO[24], _aM_, _aB_);
        caml_call1(_aG_, _aO_);
        return caml_call3(CamlinternalOO[26], _aM_, _aO_, _aB_);};
      },
      _C_,
      _B_]);
   var poll_based = [], _D_ = 0, _E_ = 0;
   caml_update_dummy
    (poll_based,
     [0,
      0,
      function(___){
       var
        _$_ = caml_call2(CamlinternalOO[8], ___, _l_),
        _aa_ = _$_[8],
        _ab_ = _$_[12],
        _ac_ =
          caml_call6
           (CamlinternalOO[18], ___, _n_, _g_, _k_, select_or_poll_based, 1),
        _ae_ = _ac_[8],
        _af_ = _ac_[6],
        _ag_ = _ac_[4],
        _ah_ = _ac_[3],
        _ad_ = _ac_[1];
       function _ai_(self_6, block){
        var _am_ = self_6[1 + _ae_], _an_ = self_6[1 + _af_];
        function _ao_(q, e){return caml_call2(Sleep_queue[3], e, q);}
        self_6[1 + _af_] = caml_call3(Stdlib_List[26], _ao_, _an_, _am_);
        self_6[1 + _ae_] = 0;
        var fds = 0, _ap_ = self_6[1 + _ag_];
        function _aq_(fd, param, l){return [0, [0, fd, 1, 0], l];}
        var
         fds$0 = caml_call3(Fd_map[24], _aq_, _ap_, fds),
         _ar_ = self_6[1 + _ah_];
        function _as_(fd, param, l){return [0, [0, fd, 0, 1], l];}
        var
         fds$1 = caml_call3(Fd_map[24], _as_, _ar_, fds$0),
         timeout = block ? get_next_timeout(self_6[1 + _af_]) : 0.;
        a:
        try{
         var
          _az_ = caml_call3(self_6[1][1 + _aa_], self_6, fds$1, timeout),
          fds$2 = _az_;
        }
        catch(_aA_){
         var _at_ = caml_wrap_exception(_aA_);
         b:
         if(_at_[1] === Unix[1]){
          var _au_ = _at_[2];
          if(typeof _au_ === "number"){
           if(3 === _au_)
            var
             _av_ = function(param){var fd = param[1]; return bad_fd(fd);},
             _aw_ = caml_call2(Stdlib_List[44], _av_, fds$1);
           else{if(11 !== _au_) break b; var _aw_ = 0;}
           var fds$2 = _aw_;
           break a;
          }
         }
         throw caml_maybe_attach_backtrace(_at_, 0);
        }
        var _ax_ = caml_call1(Unix[101], 0);
        self_6[1 + _af_] = restart_actions(self_6[1 + _af_], _ax_);
        function _ay_(param){
         var writable = param[3], readable = param[2], fd = param[1];
         if(readable) invoke_actions(fd, self_6[1 + _ag_]);
         return writable ? invoke_actions(fd, self_6[1 + _ah_]) : writable;
        }
        return caml_call2(Stdlib_List[18], _ay_, fds$2);
       }
       caml_call3(CamlinternalOO[10], ___, _ab_, _ai_);
       return function(_ak_, _aj_){
        var _al_ = caml_call2(CamlinternalOO[24], _aj_, ___);
        caml_call1(_ad_, _al_);
        return caml_call3(CamlinternalOO[26], _aj_, _al_, ___);};
      },
      _E_,
      _D_]);
   function _F_(_T_){
    var
     _U_ = caml_call2(CamlinternalOO[8], _T_, _a_)[4],
     _V_ =
       caml_call6(CamlinternalOO[18], _T_, _n_, shared, _b_, select_based, 1)
        [1];
    function _W_(self_7, fds_r, fds_w, timeout){
     var
      match = caml_call4(Unix[93], fds_r, fds_w, 0, timeout),
      fds_w$0 = match[2],
      fds_r$0 = match[1];
     return [0, fds_r$0, fds_w$0];
    }
    caml_call3(CamlinternalOO[10], _T_, _U_, _W_);
    return function(_Y_, _X_){
     var _Z_ = caml_call2(CamlinternalOO[24], _X_, _T_);
     caml_call1(_V_, _Z_);
     return caml_call3(CamlinternalOO[26], _X_, _Z_, _T_);};
   }
   var select$0 = caml_call2(CamlinternalOO[19], _i_, _F_);
   a:
   {
    if(Lwt_config[3] && Lwt_config[2]){
     var current = [0, caml_call3(libev[1], 0, 0, 0)];
     break a;
    }
    var current = [0, caml_call1(select$0[1], 0)];
   }
   function get(param){return current[1];}
   function set(opt, _Q_, engine){
    if(opt) var sth = opt[1], transfer = sth; else var transfer = 1;
    if(_Q_) var sth$0 = _Q_[1], destroy = sth$0; else var destroy = 1;
    if(transfer){
     var _R_ = current[1];
     caml_call2(caml_get_public_method(_R_, -630345941, 4), _R_, engine);
    }
    if(destroy){
     var _S_ = current[1];
     caml_call1(caml_get_public_method(_S_, 612773114, 5), _S_);
    }
    current[1] = engine;
    return 0;
   }
   function iter(block){
    var _P_ = current[1];
    return caml_call2(caml_get_public_method(_P_, -977287912, 6), _P_, block);
   }
   function on_readable(fd, f){
    var _O_ = current[1];
    return caml_call3(caml_get_public_method(_O_, -980609456, 7), _O_, fd, f);
   }
   function on_writable(fd, f){
    var _N_ = current[1];
    return caml_call3(caml_get_public_method(_N_, -379288640, 8), _N_, fd, f);
   }
   function on_timer(delay, repeat, f){
    var _M_ = current[1];
    return caml_call4
            (caml_get_public_method(_M_, 926255461, 9), _M_, delay, repeat, f);
   }
   function fake_io(fd){
    var _L_ = current[1];
    return caml_call2(caml_get_public_method(_L_, 957768080, 10), _L_, fd);
   }
   function readable_count(param){
    var _K_ = current[1];
    return caml_call1(caml_get_public_method(_K_, -491308032, 11), _K_);
   }
   function writable_count(param){
    var _J_ = current[1];
    return caml_call1(caml_get_public_method(_J_, -691905168, 12), _J_);
   }
   function timer_count(param){
    var _I_ = current[1];
    return caml_call1(caml_get_public_method(_I_, -270668395, 13), _I_);
   }
   function fork(param){
    var _H_ = current[1];
    return caml_call1(caml_get_public_method(_H_, -1010802366, 14), _H_);
   }
   function forwards_signal(n){
    var _G_ = current[1];
    return caml_call2(caml_get_public_method(_G_, 360723129, 15), _G_, n);
   }
   var
    Versioned = [0, libev_deprecated, libev],
    Lwt_engine =
      [0,
       stop_event,
       fake_event$0,
       iter,
       on_readable,
       on_writable,
       on_timer,
       readable_count,
       writable_count,
       timer_count,
       fake_io,
       fork,
       forwards_signal,
       abstract$0,
       [0, default$0, select, poll, epoll, kqueue, devpoll, port, equal, pp],
       libev,
       select$0,
       select_based,
       poll_based,
       get,
       set,
       Versioned];
   runtime.caml_register_global(38, Lwt_engine, "Lwt_engine");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_main
//# unitInfo: Requires: Lwt, Lwt_engine, Lwt_sequence, Stdlib, Stdlib__Mutex, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Nested_calls_to_Lwt_main_r$0 =
      "Nested calls to Lwt_main.run are not allowed",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Lwt_engine = global_data.Lwt_engine,
    enter_iter_hooks = caml_call1(Lwt_sequence[4], 0),
    leave_iter_hooks = caml_call1(Lwt_sequence[4], 0),
    yield$0 = Lwt[57],
    _a_ = [0, cst_Nested_calls_to_Lwt_main_r$0],
    cst_Lwt_main_run_already_calle = "Lwt_main.run already called from:",
    cst_Nested_calls_to_Lwt_main_r = cst_Nested_calls_to_Lwt_main_r$0,
    _b_ = [0, [2, 0, [12, 10, [2, 0, [12, 10, [2, 0, 0]]]]], "%s\n%s\n%s"];
   function abandon_yielded_and_paused(param){return caml_call1(Lwt[61], 0);}
   var
    run_already_called = [0, 17505],
    run_already_called_mutex = caml_call1(Stdlib_Mutex[1], 0);
   function finished(param){
    caml_call1(Stdlib_Mutex[2], run_already_called_mutex);
    run_already_called[1] = 17505;
    return caml_call1(Stdlib_Mutex[4], run_already_called_mutex);
   }
   function run(p){
    caml_call1(Stdlib_Mutex[2], run_already_called_mutex);
    var match$0 = run_already_called[1];
    if(typeof match$0 === "number")
     var
      error_message_if_call_is_neste =
        17505 <= match$0 ? (run_already_called[1] = -147962306, 0) : _a_;
    else
     var
      backtrace_string = match$0[2],
      error_message_if_call_is_neste =
        [0,
         caml_call4
          (Stdlib_Printf[4],
           _b_,
           cst_Nested_calls_to_Lwt_main_r,
           cst_Lwt_main_run_already_calle,
           backtrace_string)];
    caml_call1(Stdlib_Mutex[4], run_already_called_mutex);
    if(error_message_if_call_is_neste){
     var message = error_message_if_call_is_neste[1];
     caml_call1(Stdlib[2], message);
    }
    try{
     for(;;){
      var match = caml_call1(Lwt[79], p);
      if(match){var result = match[1]; break;}
      var _i_ = function(f){return caml_call1(f, 0);};
      caml_call2(Lwt_sequence[17], _i_, enter_iter_hooks);
      var should_block_waiting_for_io = 0 === caml_call1(Lwt[59], 0) ? 1 : 0;
      caml_call1(Lwt_engine[3], should_block_waiting_for_io);
      caml_call1(Lwt[58], 0);
      var _j_ = function(f){return caml_call1(f, 0);};
      caml_call2(Lwt_sequence[17], _j_, leave_iter_hooks);
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! caml_call1(Lwt[78][4], exn))
      throw caml_maybe_attach_backtrace(exn, 0);
     finished(0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    finished(0);
    return result;
   }
   var exit_hooks = caml_call1(Lwt_sequence[4], 0);
   function call_hooks(param){
    var match = caml_call1(Lwt_sequence[13], exit_hooks);
    if(! match) return Lwt[36];
    var f = match[1];
    function _e_(param){return call_hooks(0);}
    function _f_(param){return Lwt[36];}
    function _g_(param){return caml_call1(f, 0);}
    var _h_ = caml_call2(Lwt[7], _g_, _f_);
    return caml_call2(Lwt[33][1], _h_, _e_);
   }
   function _c_(param){
    var _d_ = 1 - caml_call1(Lwt_sequence[6], exit_hooks);
    return _d_
            ? (caml_call1(Lwt[85], 0), finished(0), run(call_hooks(0)))
            : _d_;
   }
   caml_call1(Stdlib[100], _c_);
   function at_exit(f){caml_call2(Lwt_sequence[8], f, exit_hooks); return 0;}
   function Wrap_hooks(Sequence){
    function add_first(hook_fn){
     var hook_node = caml_call2(Lwt_sequence[8], hook_fn, Sequence[1]);
     return hook_node;
    }
    function add_last(hook_fn){
     var hook_node = caml_call2(Lwt_sequence[9], hook_fn, Sequence[1]);
     return hook_node;
    }
    function remove(hook_node){return caml_call1(Lwt_sequence[3], hook_node);}
    function remove_all(param){
     return caml_call2(Lwt_sequence[19], Lwt_sequence[3], Sequence[1]);
    }
    return [0, add_first, add_last, remove, remove_all];
   }
   var
    Enter_iter_hooks = Wrap_hooks([0, enter_iter_hooks]),
    Leave_iter_hooks = Wrap_hooks([0, leave_iter_hooks]),
    Exit_hooks = Wrap_hooks([0, exit_hooks]),
    Lwt_main =
      [0,
       run,
       yield$0,
       abandon_yielded_and_paused,
       Enter_iter_hooks,
       Leave_iter_hooks,
       Exit_hooks,
       enter_iter_hooks,
       leave_iter_hooks,
       exit_hooks,
       at_exit];
   runtime.caml_register_global(10, Lwt_main, "Lwt_main");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_unix
//# unitInfo: Requires: CamlinternalLazy, Lwt, Lwt_config, Lwt_engine, Lwt_main, Lwt_mutex, Lwt_sequence, Lwt_stream, Stdlib, Stdlib__Array, Stdlib__Bytes, Stdlib__Filename, Stdlib__Gc, Stdlib__Hashtbl, Stdlib__List, Stdlib__Map, Stdlib__Printexc, Stdlib__Printf, Stdlib__Sys, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = ", ",
    cst_bin_sh$1 = "/bin/sh",
    cst_Lwt_unix_readdir_n$1 = "Lwt_unix.readdir_n",
    cst_Lwt_unix_readv$1 = "Lwt_unix.readv",
    cst_Lwt_unix_writev$1 = "Lwt_unix.writev",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$6,
    cst$3 = cst$6,
    cst$2 = cst$6,
    cst$1 = cst$6,
    cst$0 = cst$6,
    cst = cst$6,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Unix = global_data.Unix,
    Stdlib = global_data.Stdlib,
    Lwt = global_data.Lwt,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt_config = global_data.Lwt_config,
    Stdlib_List = global_data.Stdlib__List,
    Lwt_engine = global_data.Lwt_engine,
    Lwt_main = global_data.Lwt_main,
    Stdlib_Array = global_data.Stdlib__Array,
    Lwt_mutex = global_data.Lwt_mutex,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    default_async_method_var = [0, 1],
    _f_ = [0, 0, 0, 0],
    _g_ = [0, 0, 0, 0],
    _n_ = [2, 0],
    _o_ = [2, 1],
    cst_E2BIG = "E2BIG",
    cst_EACCES = "EACCES",
    cst_EAGAIN = "EAGAIN",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_EDEADLK = "EDEADLK",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISDIR = "EISDIR",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENFILE = "ENFILE",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EPERM = "EPERM",
    cst_EPIPE = "EPIPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_EXDEV = "EXDEV",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EALREADY = "EALREADY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENETRESET = "ENETRESET",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNRESET = "ECONNRESET",
    cst_ENOBUFS = "ENOBUFS",
    cst_EISCONN = "EISCONN",
    cst_ENOTCONN = "ENOTCONN",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_ELOOP = "ELOOP",
    cst_EOVERFLOW = "EOVERFLOW",
    _C_ = [0, [11, "EUNKNOWNERR ", [4, 0, 0, 0, 0]], "EUNKNOWNERR %d"],
    _B_ =
      [0,
       [11,
        "Unix.Unix_error(Unix.",
        [2, 0, [11, cst$5, [3, 0, [11, cst$5, [3, 0, [12, 41, 0]]]]]]],
       "Unix.Unix_error(Unix.%s, %S, %S)"],
    cst_cmd_exe_c = "cmd.exe /c ",
    cst_c = "-c",
    cst_bin_sh = cst_bin_sh$1,
    cst_bin_sh$0 = cst_bin_sh$1,
    _y_ = [254, 0., 0.],
    cst_connect = "connect",
    _u_ = [0, 0],
    _v_ = [0, 0],
    _w_ = [0, 0],
    _s_ = [0, 0],
    _t_ = [0, 0],
    _r_ = [0, 0],
    cst_Lwt_unix_send_msgto = "Lwt_unix.send_msgto",
    cst_Lwt_unix_send_msg = "Lwt_unix.send_msg",
    cst_Lwt_unix_recv_msg = "Lwt_unix.recv_msg",
    cst_Lwt_unix_sendto = "Lwt_unix.sendto",
    cst_Lwt_unix_recvfrom = "Lwt_unix.recvfrom",
    cst_Lwt_unix_send = "Lwt_unix.send",
    cst_Lwt_unix_recv = "Lwt_unix.recv",
    cst_Lwt_unix_closedir = "Lwt_unix.closedir",
    cst_Lwt_unix_rewinddir = "Lwt_unix.rewinddir",
    cst_Lwt_unix_readdir_n$0 = cst_Lwt_unix_readdir_n$1,
    cst_Lwt_unix_readdir_n = cst_Lwt_unix_readdir_n$1,
    cst_Lwt_unix_readdir = "Lwt_unix.readdir",
    cst_Lwt_unix_writev = cst_Lwt_unix_writev$1,
    cst_Lwt_unix_writev$0 = cst_Lwt_unix_writev$1,
    cst_Lwt_unix_readv = cst_Lwt_unix_readv$1,
    cst_Lwt_unix_readv$0 = cst_Lwt_unix_readv$1,
    cst_Lwt_unix_pwrite = "Lwt_unix.pwrite",
    cst_Lwt_unix_write = "Lwt_unix.write",
    cst_Lwt_unix_pread = "Lwt_unix.pread",
    cst_Lwt_unix_read = "Lwt_unix.read",
    cst_check_descriptor = "check_descriptor",
    _e_ = [0, 1],
    _d_ = [0, 2],
    _c_ = [0, 1],
    _b_ = [0, 0],
    _L_ =
      [0,
       [2,
        0,
        [11,
         ": invalid lwt async method: '",
         [2, 0, [11, "', must be 'none', 'detach' or 'switch'\n", [10, 0]]]]],
       "%s: invalid lwt async method: '%s', must be 'none', 'detach' or 'switch'\n%!"],
    cst_Lwt_unix_Timeout = "Lwt_unix.Timeout",
    _h_ = [0, 0],
    _i_ = [0, 1],
    _j_ = [0, 0],
    _k_ = [0, 1],
    _l_ = [0, 0],
    _m_ = [0, 1],
    cst_Lwt_unix_Retry = "Lwt_unix.Retry",
    cst_Lwt_unix_Retry_write = "Lwt_unix.Retry_write",
    cst_Lwt_unix_Retry_read = "Lwt_unix.Retry_read";
   try{
    var str = runtime.caml_sys_getenv("LWT_ASYNC_METHOD");
    if(caml_string_notequal(str, "detach"))
     if(caml_string_notequal(str, "none"))
      if(caml_string_notequal(str, "switch")){
       var _K_ = caml_call1(Stdlib_Filename[13], Stdlib_Sys[1]);
       caml_call3(Stdlib_Printf[3], _L_, _K_, str);
      }
      else
       default_async_method_var[1] = 2;
     else
      default_async_method_var[1] = 0;
    else
     default_async_method_var[1] = 1;
   }
   catch(_fT_){
    var _a_ = caml_wrap_exception(_fT_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
   }
   function default_async_method(param){return default_async_method_var[1];}
   function set_default_async_method(am){
    default_async_method_var[1] = am;
    return 0;
   }
   var async_method_key = caml_call1(Lwt[49], 0);
   function async_method(param){
    var match = caml_call1(Lwt[50], async_method_key);
    if(! match) return default_async_method_var[1];
    var am = match[1];
    return am;
   }
   function with_async_none(f){
    return caml_call3(Lwt[51], async_method_key, _b_, f);
   }
   function with_async_detach(f){
    return caml_call3(Lwt[51], async_method_key, _c_, f);
   }
   function with_async_switch(f){
    return caml_call3(Lwt[51], async_method_key, _d_, f);
   }
   function equal(x, y){return x === y ? 1 : 0;}
   function hash(x){return x;}
   var
    Notifiers = caml_call1(Stdlib_Hashtbl[26], [0, equal, hash]),
    notifiers = caml_call1(Notifiers[1], 1024),
    current_notification_id = [0, 2147482647];
   function make_notification(opt, f){
    if(opt) var sth = opt[1], once = sth; else var once = 0;
    var id$1 = current_notification_id[1] + 1 | 0, id = id$1;
    for(;;){
     if(! caml_call2(Notifiers[11], notifiers, id)){
      current_notification_id[1] = id;
      caml_call3(Notifiers[5], notifiers, id, [0, f, once]);
      return id;
     }
     var id$0 = id + 1 | 0, id = id$0;
    }
   }
   function stop_notification(id){
    return caml_call2(Notifiers[6], notifiers, id);
   }
   function set_notification(id, f){
    var notifier = caml_call2(Notifiers[7], notifiers, id);
    return caml_call3(Notifiers[10], notifiers, id, [0, f, notifier[2]]);
   }
   function call_notification(id){
    try{var notifier = caml_call2(Notifiers[7], notifiers, id);}
    catch(_fS_){
     var _fR_ = caml_wrap_exception(_fS_);
     if(_fR_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_fR_, 0);
    }
    if(notifier[2]) stop_notification(id);
    return caml_call1(notifier[1], 0);
   }
   function sleep(delay){
    var match = caml_call1(Lwt[22], 0), wakener = match[2], waiter = match[1];
    function _fP_(ev){
     caml_call1(Lwt_engine[1], ev);
     return caml_call2(Lwt[52], wakener, 0);
    }
    var ev = caml_call3(Lwt_engine[6], delay, 0, _fP_);
    function _fQ_(param){return caml_call1(Lwt_engine[1], ev);}
    caml_call2(Lwt[24], waiter, _fQ_);
    return waiter;
   }
   var yield$0 = Lwt[57];
   function auto_yield(timeout){
    var limit = [0, caml_call1(Unix[101], 0) + timeout];
    return function(param){
     var current = caml_call1(Unix[101], 0);
     return limit[1] <= current
             ? (limit[1] = current + timeout, caml_call1(yield$0, 0))
             : Lwt[36];};
   }
   function auto_pause(timeout){
    var limit = [0, caml_call1(Unix[101], 0) + timeout];
    return function(param){
     var current = caml_call1(Unix[101], 0);
     return limit[1] <= current
             ? (limit[1] = current + timeout, caml_call1(Lwt[57], 0))
             : Lwt[36];};
   }
   var Timeout = [248, cst_Lwt_unix_Timeout, caml_fresh_oo_id(0)];
   function timeout(d){
    function _fN_(param){throw caml_maybe_attach_backtrace(Timeout, 1);}
    var _fO_ = sleep(d);
    return caml_call2(Lwt[33][1], _fO_, _fN_);
   }
   function with_timeout(d, f){
    var
     _fL_ = [0, caml_call2(Lwt[80], f, 0), 0],
     _fM_ = [0, timeout(d), _fL_];
    return caml_call1(Lwt[16], _fM_);
   }
   var jobs = caml_call1(Lwt_sequence[4], 0);
   function abort_jobs(exn){
    for(;;){
     var match = caml_call1(Lwt_sequence[13], jobs);
     if(! match) return 0;
     var f = match[1][2];
     caml_call1(f, exn);
    }
   }
   function cancel_jobs(param){return abort_jobs(Lwt[21]);}
   function wait_for_jobs(param){
    var _fI_ = 0;
    function _fJ_(param, l){var w = param[1]; return [0, w, l];}
    var _fK_ = caml_call3(Lwt_sequence[21], _fJ_, jobs, _fI_);
    return caml_call1(Lwt[14], _fK_);
   }
   function run_job_aux(async_method, job, result){
    if(runtime.lwt_unix_start_job(job, async_method)){
     var _fA_ = caml_call1(result, job);
     return caml_call1(Lwt[46], _fA_);
    }
    var match = caml_call1(Lwt[1], 0), wakener = match[2], waiter = match[1];
    function _fB_(exn){
     var _fH_ = 0 === caml_call1(Lwt[48], waiter) ? 1 : 0;
     return _fH_ ? caml_call2(Lwt[53], wakener, exn) : _fH_;
    }
    function _fC_(param){return Lwt[36];}
    var
     _fD_ = [0, caml_call2(Lwt[33][1], waiter, _fC_), _fB_],
     node = caml_call2(Lwt_sequence[8], _fD_, jobs),
     id =
       make_notification
        (_e_,
         function(param){
          caml_call1(Lwt_sequence[3], node);
          var
           result$0 = caml_call1(result, job),
           _fG_ = 0 === caml_call1(Lwt[48], waiter) ? 1 : 0;
          return _fG_ ? caml_call2(Lwt[54], wakener, result$0) : _fG_;
         });
    function _fE_(param){
     if(runtime.lwt_unix_check_job(job, id)) call_notification(id);
     return Lwt[36];
    }
    var _fF_ = caml_call1(Lwt[57], 0);
    caml_call2(Lwt[33][1], _fF_, _fE_);
    return waiter;
   }
   function choose_async_method(param){
    if(param){var async_method = param[1]; return async_method;}
    var match = caml_call1(Lwt[50], async_method_key);
    if(! match) return default_async_method_var[1];
    var am = match[1];
    return am;
   }
   function execute_job(async_method, job, result, free){
    var async_method$0 = choose_async_method(async_method);
    return run_job_aux
            (async_method$0,
             job,
             function(job){
              try{var _fz_ = [0, caml_call1(result, job)], x = _fz_;}
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               if(! caml_call1(Lwt[78][4], exn))
                throw caml_maybe_attach_backtrace(exn, 0);
               var x = [1, exn];
              }
              caml_call1(free, job);
              return x;
             });
   }
   function self_result(job){
    try{var _fy_ = [0, runtime.lwt_unix_self_result(job)]; return _fy_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(caml_call1(Lwt[78][4], exn)) return [1, exn];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var in_retention_test = [0, 0];
   function retained(o){
    var retained = [0, 1];
    function _fv_(param){
     var
      _fw_ = in_retention_test[1],
      _fx_ = _fw_ ? (retained[1] = 0, 0) : _fw_;
     return _fx_;
    }
    caml_call2(Stdlib_Gc[3], _fv_, o);
    in_retention_test[1] = 1;
    return retained;
   }
   function run_job(async_method, job){
    if(in_retention_test[1]){
     runtime.caml_gc_full_major(0);
     in_retention_test[1] = 0;
    }
    var async_method$0 = choose_async_method(async_method);
    if(0 !== async_method$0)
     return run_job_aux(async_method$0, job, self_result);
    try{
     var
      _ft_ = runtime.lwt_unix_run_job_sync(job),
      _fu_ = caml_call1(Lwt[4], _ft_);
     return _fu_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(caml_call1(Lwt[78][4], exn)) return caml_call1(Lwt[5], exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function guess_blocking(fd){
    return run_job(0, runtime.lwt_unix_guess_blocking_job(fd));
   }
   function is_blocking(blocking, opt, fd){
    if(opt) var sth = opt[1], set_flags = sth; else var set_flags = 1;
    if(! Stdlib_Sys[7]){
     if(! blocking)
      return set_flags
              ? [246,
                function(param){
                 function _fq_(param){
                  return param
                          ? (caml_call1(Unix[58], fd), Lwt[39])
                          : (caml_call1(Unix[57], fd), Lwt[40]);
                 }
                 var _fr_ = guess_blocking(fd);
                 return caml_call2(Lwt[33][1], _fr_, _fq_);
                }]
              : [246, function(_fs_){return guess_blocking(fd);}];
     var state$1 = blocking[1];
     return set_flags
             ? state$1
               ? [246,
                 function(param){caml_call1(Unix[58], fd); return Lwt[39];}]
               : [246,
                 function(param){caml_call1(Unix[57], fd); return Lwt[40];}]
             : [246, function(_fp_){return caml_call1(Lwt[4], state$1);}];
    }
    if(runtime.lwt_unix_is_socket(fd)){
     if(! blocking)
      return set_flags
              ? [246,
                function(param){caml_call1(Unix[57], fd); return Lwt[40];}]
              : [250, Lwt[40]];
     var state = blocking[1];
     return set_flags
             ? state
               ? [246,
                 function(param){caml_call1(Unix[58], fd); return Lwt[39];}]
               : [246,
                 function(param){caml_call1(Unix[57], fd); return Lwt[40];}]
             : [246, function(_fo_){return caml_call1(Lwt[4], state);}];
    }
    if(! blocking) return [250, Lwt[39]];
    var state$0 = blocking[1];
    return [246, function(_fn_){return caml_call1(Lwt[4], state$0);}];
   }
   function of_unix_file_descr(blocking, opt, fd){
    if(opt) var sth = opt[1], set_flags = sth; else var set_flags = 1;
    var
     _fl_ = caml_call1(Lwt_sequence[4], 0),
     _fm_ = caml_call1(Lwt_sequence[4], 0);
    return [0,
            fd,
            0,
            set_flags,
            is_blocking(blocking, [0, set_flags], fd),
            0,
            0,
            _fm_,
            _fl_];
   }
   function check_descriptor(ch){
    var match = ch[2];
    if(typeof match !== "number"){
     var e = match[1];
     throw caml_maybe_attach_backtrace(e, 1);
    }
    if(match)
     throw caml_maybe_attach_backtrace
            ([0, Unix[1], 3, cst_check_descriptor, cst], 1);
    return 0;
   }
   function state(ch){return ch[2];}
   function blocking(ch){
    check_descriptor(ch);
    var _fj_ = ch[4], _fk_ = caml_obj_tag(_fj_);
    if(250 === _fk_) return _fj_[1];
    if(246 !== _fk_ && 244 !== _fk_) return _fj_;
    return caml_call1(CamlinternalLazy[2], _fj_);
   }
   function set_blocking(opt, ch, blocking){
    if(opt) var sth = opt[1], set_flags = sth; else var set_flags = 1;
    check_descriptor(ch);
    ch[3] = set_flags;
    ch[4] = is_blocking([0, blocking], [0, set_flags], ch[1]);
    return 0;
   }
   function unix_readable(fd){
    for(;;)
     try{
      var
       _fh_ =
         Stdlib_Sys[7]
          ? caml_notequal(caml_call4(Unix[93], [0, fd, 0], 0, 0, 0.), _f_)
          : runtime.lwt_unix_readable(fd);
      return _fh_;
     }
     catch(_fi_){
      var _ff_ = caml_wrap_exception(_fi_);
      if(_ff_[1] === Unix[1]){
       var _fg_ = _ff_[2];
       if(typeof _fg_ === "number" && 11 === _fg_) continue;
      }
      throw caml_maybe_attach_backtrace(_ff_, 0);
     }
   }
   function unix_writable(fd){
    for(;;)
     try{
      var
       _fd_ =
         Stdlib_Sys[7]
          ? caml_notequal(caml_call4(Unix[93], 0, [0, fd, 0], 0, 0.), _g_)
          : runtime.lwt_unix_writable(fd);
      return _fd_;
     }
     catch(_fe_){
      var _fb_ = caml_wrap_exception(_fe_);
      if(_fb_[1] === Unix[1]){
       var _fc_ = _fb_[2];
       if(typeof _fc_ === "number" && 11 === _fc_) continue;
      }
      throw caml_maybe_attach_backtrace(_fb_, 0);
     }
   }
   function readable(ch){check_descriptor(ch); return unix_readable(ch[1]);}
   function writable(ch){check_descriptor(ch); return unix_writable(ch[1]);}
   function set_state(ch, st){ch[2] = st; return;}
   function clear_events(ch){
    var _e9_ = ch[7];
    function _e__(node){
     caml_call1(Lwt_sequence[3], node);
     return caml_call2(Lwt_sequence[1], node, 0);
    }
    caml_call2(Lwt_sequence[19], _e__, _e9_);
    var _e$_ = ch[8];
    function _fa_(node){
     caml_call1(Lwt_sequence[3], node);
     return caml_call2(Lwt_sequence[1], node, 0);
    }
    caml_call2(Lwt_sequence[19], _fa_, _e$_);
    var match = ch[5];
    if(match){var ev = match[1]; ch[5] = 0; caml_call1(Lwt_engine[1], ev);}
    var match$0 = ch[6];
    if(! match$0) return 0;
    var ev$0 = match$0[1];
    ch[6] = 0;
    return caml_call1(Lwt_engine[1], ev$0);
   }
   function abort(ch, e){
    var _e8_ = 1 !== ch[2] ? 1 : 0;
    return _e8_ ? (set_state(ch, [0, e]), clear_events(ch)) : _e8_;
   }
   function unix_file_descr(ch){return ch[1];}
   var
    stdin = of_unix_file_descr(_i_, _h_, Unix[21]),
    stdout = of_unix_file_descr(_k_, _j_, Unix[22]),
    stderr = of_unix_file_descr(_m_, _l_, Unix[23]),
    Retry = [248, cst_Lwt_unix_Retry, caml_fresh_oo_id(0)],
    Retry_write = [248, cst_Lwt_unix_Retry_write, caml_fresh_oo_id(0)],
    Retry_read = [248, cst_Lwt_unix_Retry_read, caml_fresh_oo_id(0)];
   function stop_events(ch){
    function _e4_(param){
     if(caml_call1(Lwt_sequence[6], ch[7])){
      var match = ch[5];
      if(match){var ev = match[1]; ch[5] = 0; caml_call1(Lwt_engine[1], ev);}
     }
     var _e6_ = caml_call1(Lwt_sequence[6], ch[8]);
     if(_e6_){
      var match$0 = ch[6];
      if(match$0){
       var ev$0 = match$0[1];
       ch[6] = 0;
       return caml_call1(Lwt_engine[1], ev$0);
      }
      var _e7_ = 0;
     }
     else
      var _e7_ = _e6_;
     return _e7_;
    }
    var _e5_ = caml_call1(Lwt[57], 0);
    return caml_call2(Lwt[29], _e5_, _e4_);
   }
   function register_readable(ch){
    var _eZ_ = 0 === ch[5] ? 1 : 0;
    if(_eZ_){
     var
      _e0_ =
        function(param){
         var _e2_ = ch[7];
         function _e3_(f){return caml_call1(f, 0);}
         return caml_call2(Lwt_sequence[17], _e3_, _e2_);
        };
     ch[5] = [0, caml_call2(Lwt_engine[4], ch[1], _e0_)];
     var _e1_ = 0;
    }
    else
     var _e1_ = _eZ_;
    return _e1_;
   }
   function register_writable(ch){
    var _eU_ = 0 === ch[6] ? 1 : 0;
    if(_eU_){
     var
      _eV_ =
        function(param){
         var _eX_ = ch[8];
         function _eY_(f){return caml_call1(f, 0);}
         return caml_call2(Lwt_sequence[17], _eY_, _eX_);
        };
     ch[6] = [0, caml_call2(Lwt_engine[5], ch[1], _eV_)];
     var _eW_ = 0;
    }
    else
     var _eW_ = _eU_;
    return _eW_;
   }
   function retry_syscall(node, event, ch, wakener, action){
    try{
     check_descriptor(ch);
     var _eT_ = [0, caml_call1(action, 0)], res = _eT_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     a:
     {
      b:
      if(e !== Retry){
       c:
       {
        if(e[1] !== Unix[1]){
         if(e === Stdlib[14]) break b;
         if(e === Retry_read)
          var _eS_ = _n_;
         else{if(e !== Retry_write) break c; var _eS_ = _o_;}
         var _eK_ = _eS_;
         break a;
        }
        var _eQ_ = e[2];
        if(typeof _eQ_ === "number"){
         var _eR_ = _eQ_ - 2 | 0;
         if(9 < _eR_ >>> 0){
          if(35 !== _eR_) break c;
         }
         else if(7 >= _eR_ - 1 >>> 0) break c;
         break b;
        }
       }
       if(! caml_call1(Lwt[78][4], e))
        throw caml_maybe_attach_backtrace(e, 0);
       var _eK_ = [1, e];
       break a;
      }
      var _eK_ = [2, event];
     }
     var res = _eK_;
    }
    switch(res[0]){
      case 0:
       var v = res[1];
       caml_call1(Lwt_sequence[3], node[1]);
       stop_events(ch);
       return caml_call2(Lwt[52], wakener, v);
      case 1:
       var e$0 = res[1];
       caml_call1(Lwt_sequence[3], node[1]);
       stop_events(ch);
       return caml_call2(Lwt[53], wakener, e$0);
      default:
       var event$0 = res[1], _eL_ = event !== event$0 ? 1 : 0;
       if(! _eL_) return _eL_;
       caml_call1(Lwt_sequence[3], node[1]);
       stop_events(ch);
       if(event$0){
        var
         _eM_ = ch[8],
         _eN_ =
           function(param){
            return retry_syscall(node, 1, ch, wakener, action);
           };
        node[1] = caml_call2(Lwt_sequence[9], _eN_, _eM_);
        return register_writable(ch);
       }
       var
        _eO_ = ch[7],
        _eP_ =
          function(param){return retry_syscall(node, 0, ch, wakener, action);};
       node[1] = caml_call2(Lwt_sequence[9], _eP_, _eO_);
       return register_readable(ch);
    }
   }
   var _p_ = caml_call1(Lwt_sequence[4], 0);
   function _q_(_eJ_){return 0;}
   var dummy = caml_call2(Lwt_sequence[9], _q_, _p_);
   function register_action(event, ch, action){
    var match = caml_call1(Lwt[22], 0), wakener = match[2], waiter = match[1];
    if(event){
     var
      node = [0, dummy],
      _eD_ = ch[8],
      _eE_ =
        function(param){return retry_syscall(node, 1, ch, wakener, action);};
     node[1] = caml_call2(Lwt_sequence[9], _eE_, _eD_);
     var
      _eF_ =
        function(param){
         caml_call1(Lwt_sequence[3], node[1]);
         return stop_events(ch);
        };
     caml_call2(Lwt[24], waiter, _eF_);
     register_writable(ch);
     return waiter;
    }
    var node$0 = [0, dummy], _eG_ = ch[7];
    function _eH_(param){
     return retry_syscall(node$0, 0, ch, wakener, action);
    }
    node$0[1] = caml_call2(Lwt_sequence[9], _eH_, _eG_);
    function _eI_(param){
     caml_call1(Lwt_sequence[3], node$0[1]);
     return stop_events(ch);
    }
    caml_call2(Lwt[24], waiter, _eI_);
    register_readable(ch);
    return waiter;
   }
   function wrap_syscall(event, ch, action){
    check_descriptor(ch);
    function _ev_(blocking){
     try{
      a:
      {
       b:
       if(blocking){
        if(0 === event && unix_readable(ch[1])) break b;
        if(1 === event && unix_writable(ch[1])) break b;
        var _eC_ = register_action(event, ch, action);
        break a;
       }
       var _eB_ = caml_call1(action, 0), _eC_ = caml_call1(Lwt[4], _eB_);
      }
      return _eC_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      a:
      if(e !== Retry){
       b:
       if(e[1] === Unix[1]){
        var _ez_ = e[2];
        if(typeof _ez_ === "number"){
         var _eA_ = _ez_ - 2 | 0;
         if(9 < _eA_ >>> 0){
          if(35 !== _eA_) break b;
         }
         else if(7 >= _eA_ - 1 >>> 0) break b;
         break a;
        }
       }
       else{
        if(e === Stdlib[14]) break a;
        if(e === Retry_read) return register_action(0, ch, action);
        if(e === Retry_write) return register_action(1, ch, action);
       }
       if(caml_call1(Lwt[78][4], e)) throw caml_maybe_attach_backtrace(e, 0);
       throw caml_maybe_attach_backtrace(e, 0);
      }
      return register_action(event, ch, action);
     }
    }
    var _ew_ = ch[4], _ex_ = caml_obj_tag(_ew_);
    a:
    if(250 === _ex_)
     var _ey_ = _ew_[1];
    else{
     if(246 !== _ex_ && 244 !== _ex_){var _ey_ = _ew_; break a;}
     var _ey_ = caml_call1(CamlinternalLazy[2], _ew_);
    }
    return caml_call2(Lwt[33][1], _ey_, _ev_);
   }
   function openfile(name, flags, perms){
    if(Stdlib_Sys[7]){
     var
      _er_ =
        of_unix_file_descr(0, 0, caml_call3(Unix[24], name, flags, perms));
     return caml_call1(Lwt[4], _er_);
    }
    function _es_(param){
     var
      blocking = param[2],
      fd = param[1],
      _eu_ = of_unix_file_descr([0, blocking], 0, fd);
     return caml_call1(Lwt[4], _eu_);
    }
    var _et_ = run_job(0, runtime.lwt_unix_open_job(name, flags, perms));
    return caml_call2(Lwt[33][1], _et_, _es_);
   }
   function close(ch){
    if(1 === ch[2]) check_descriptor(ch);
    set_state(ch, 1);
    clear_events(ch);
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_close_job(ch[1]));
    var _eq_ = caml_call1(Unix[25], ch[1]);
    return caml_call1(Lwt[4], _eq_);
   }
   function wait_read(ch){
    function _em_(_ep_){throw caml_maybe_attach_backtrace(_ep_, 0);}
    function _en_(param){
     return readable(ch)
             ? Lwt[36]
             : register_action(0, ch, function(_eo_){return 0;});
    }
    return caml_call2(Lwt[7], _en_, _em_);
   }
   function read(ch, buf, pos, len){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      _eg_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (0,
                   ch,
                   function(param){
                    return runtime.lwt_unix_read(ch[1], buf, pos, len);
                   });
         function _ek_(param){
          return run_job(0, runtime.lwt_unix_read_job(ch[1], buf, pos, len));
         }
         var _el_ = wait_read(ch);
         return caml_call2(Lwt[33][1], _el_, _ek_);
        },
      _eh_ = ch[4],
      _ei_ = caml_obj_tag(_eh_);
     a:
     if(250 === _ei_)
      var _ej_ = _eh_[1];
     else{
      if(246 !== _ei_ && 244 !== _ei_){var _ej_ = _eh_; break a;}
      var _ej_ = caml_call1(CamlinternalLazy[2], _eh_);
     }
     return caml_call2(Lwt[33][1], _ej_, _eg_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_read);
   }
   function pread(ch, buf, file_offset, pos, len){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      _ea_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (0,
                   ch,
                   function(param){
                    return runtime.lwt_unix_pread
                            (ch[1], buf, file_offset, pos, len);
                   });
         function _ee_(param){
          return run_job
                  (0,
                   runtime.lwt_unix_pread_job
                    (ch[1], buf, file_offset, pos, len));
         }
         var _ef_ = wait_read(ch);
         return caml_call2(Lwt[33][1], _ef_, _ee_);
        },
      _eb_ = ch[4],
      _ec_ = caml_obj_tag(_eb_);
     a:
     if(250 === _ec_)
      var _ed_ = _eb_[1];
     else{
      if(246 !== _ec_ && 244 !== _ec_){var _ed_ = _eb_; break a;}
      var _ed_ = caml_call1(CamlinternalLazy[2], _eb_);
     }
     return caml_call2(Lwt[33][1], _ed_, _ea_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_pread);
   }
   function read_bigarray(function_name, fd, buf, pos, len){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _d8_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (0,
                   fd,
                   function(param){
                    return runtime.lwt_unix_bytes_read(fd[1], buf, pos, len);
                   });
         function _d__(param){
          return run_job
                  (0, runtime.lwt_unix_bytes_read_job(fd[1], buf, pos, len));
         }
         var _d$_ = wait_read(fd);
         return caml_call2(Lwt[33][1], _d$_, _d__);
        },
      _d9_ = blocking(fd);
     return caml_call2(Lwt[33][1], _d9_, _d8_);
    }
    return caml_call1(Stdlib[1], function_name);
   }
   function wait_write(ch){
    function _d4_(_d7_){throw caml_maybe_attach_backtrace(_d7_, 0);}
    function _d5_(param){
     return writable(ch)
             ? Lwt[36]
             : register_action(1, ch, function(_d6_){return 0;});
    }
    return caml_call2(Lwt[7], _d5_, _d4_);
   }
   function write(ch, buf, pos, len){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      _dY_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (1,
                   ch,
                   function(param){
                    return runtime.lwt_unix_write(ch[1], buf, pos, len);
                   });
         function _d2_(param){
          return run_job(0, runtime.lwt_unix_write_job(ch[1], buf, pos, len));
         }
         var _d3_ = wait_write(ch);
         return caml_call2(Lwt[33][1], _d3_, _d2_);
        },
      _dZ_ = ch[4],
      _d0_ = caml_obj_tag(_dZ_);
     a:
     if(250 === _d0_)
      var _d1_ = _dZ_[1];
     else{
      if(246 !== _d0_ && 244 !== _d0_){var _d1_ = _dZ_; break a;}
      var _d1_ = caml_call1(CamlinternalLazy[2], _dZ_);
     }
     return caml_call2(Lwt[33][1], _d1_, _dY_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_write);
   }
   function pwrite(ch, buf, file_offset, pos, len){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      _dS_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (1,
                   ch,
                   function(param){
                    return runtime.lwt_unix_pwrite
                            (ch[1], buf, file_offset, pos, len);
                   });
         function _dW_(param){
          return run_job
                  (0,
                   runtime.lwt_unix_pwrite_job
                    (ch[1], buf, file_offset, pos, len));
         }
         var _dX_ = wait_write(ch);
         return caml_call2(Lwt[33][1], _dX_, _dW_);
        },
      _dT_ = ch[4],
      _dU_ = caml_obj_tag(_dT_);
     a:
     if(250 === _dU_)
      var _dV_ = _dT_[1];
     else{
      if(246 !== _dU_ && 244 !== _dU_){var _dV_ = _dT_; break a;}
      var _dV_ = caml_call1(CamlinternalLazy[2], _dT_);
     }
     return caml_call2(Lwt[33][1], _dV_, _dS_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_pwrite);
   }
   function write_string(ch, buf, pos, len){
    var buf$0 = caml_call1(Stdlib_Bytes[45], buf);
    return write(ch, buf$0, pos, len);
   }
   function pwrite_string(ch, buf, file_offset, pos, len){
    var buf$0 = caml_call1(Stdlib_Bytes[45], buf);
    return pwrite(ch, buf$0, file_offset, pos, len);
   }
   function write_bigarray(function_name, fd, buf, pos, len){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _dO_ =
        function(param){
         if(! param)
          return wrap_syscall
                  (1,
                   fd,
                   function(param){
                    return runtime.lwt_unix_bytes_write(fd[1], buf, pos, len);
                   });
         function _dQ_(param){
          return run_job
                  (0, runtime.lwt_unix_bytes_write_job(fd[1], buf, pos, len));
         }
         var _dR_ = wait_write(fd);
         return caml_call2(Lwt[33][1], _dR_, _dQ_);
        },
      _dP_ = blocking(fd);
     return caml_call2(Lwt[33][1], _dP_, _dO_);
    }
    return caml_call1(Stdlib[1], function_name);
   }
   function create(param){return [0, 0, 0, 0];}
   function byte_count(param){
    var prefix = param[1], reversed_suffix = param[2], _dL_ = 0;
    function _dM_(acc, param){var length = param[3]; return acc + length | 0;}
    var
     count_buff = caml_call2(Stdlib_List[26], _dM_, _dL_),
     _dN_ = caml_call1(count_buff, reversed_suffix);
    return caml_call1(count_buff, prefix) + _dN_ | 0;
   }
   function append(io_vectors, io_vector){
    io_vectors[2] = [0, io_vector, io_vectors[2]];
    io_vectors[3] = io_vectors[3] + 1 | 0;
    return 0;
   }
   function append_bytes(io_vectors, buffer, offset, length){
    return append(io_vectors, [0, [0, buffer], offset, length]);
   }
   function append_bigarray(io_vectors, buffer, offset, length){
    return append(io_vectors, [0, [1, buffer], offset, length]);
   }
   function flatten(io_vectors){
    if(! io_vectors[2]) return;
    var _dK_ = caml_call1(Stdlib_List[10], io_vectors[2]);
    io_vectors[1] = caml_call2(Stdlib[37], io_vectors[1], _dK_);
    io_vectors[2] = 0;
    return;
   }
   function drop(io_vectors, count){
    flatten(io_vectors);
    var prefix$1 = io_vectors[1], count$0 = count, prefix = prefix$1;
    for(;;){
     if(0 < count$0)
      if(prefix){
       var first = prefix[1], length = first[3], prefix$0 = prefix[2];
       if(length <= count$0){
        io_vectors[3] = io_vectors[3] - 1 | 0;
        var
         count$1 = count$0 - length | 0,
         count$0 = count$1,
         prefix = prefix$0;
        continue;
       }
       first[2] = first[2] + count$0 | 0;
       first[3] = first[3] - count$0 | 0;
       var _dJ_ = prefix;
      }
      else
       var _dJ_ = 0;
     else
      var _dJ_ = prefix;
     io_vectors[1] = _dJ_;
     return 0;
    }
   }
   function is_empty(io_vectors){
    flatten(io_vectors);
    var param = io_vectors[1];
    for(;;){
     if(! param) return 1;
     if(0 !== param[1][3]) return 0;
     var rest = param[2], param = rest;
    }
   }
   var system_limit = Stdlib_Sys[7] ? 0 : runtime.lwt_unix_iov_max(0);
   function check_io_vectors(function_name, io_vectors){
    flatten(io_vectors);
    var _dE_ = io_vectors[1];
    function _dF_(io_vector){
     var match = io_vector[1];
     if(0 === match[0])
      var s = match[1], buffer_length = caml_ml_bytes_length(s);
     else
      var a = match[1], buffer_length = caml_ba_dim_1(a);
     var _dG_ = io_vector[3] < 0 ? 1 : 0;
     if(_dG_)
      var _dH_ = _dG_;
     else
      var
       _dI_ = io_vector[2] < 0 ? 1 : 0,
       _dH_ =
         _dI_ || (buffer_length < (io_vector[2] + io_vector[3] | 0) ? 1 : 0);
     return _dH_ ? caml_call1(Stdlib[1], function_name) : _dH_;
    }
    caml_call2(Stdlib_List[18], _dF_, _dE_);
    if(system_limit){
     var limit = system_limit[1];
     if(limit < io_vectors[3]) return limit;
    }
    return io_vectors[3];
   }
   function readv(fd, io_vectors){
    var count = check_io_vectors(cst_Lwt_unix_readv, io_vectors);
    if(Stdlib_Sys[7]){
     var match = io_vectors[1];
     if(! match) return caml_call1(Lwt[4], 0);
     var first = match[1], match$0 = first[1];
     if(0 === match$0[0]){
      var buffer = match$0[1];
      return read(fd, buffer, first[2], first[3]);
     }
     var buffer$0 = match$0[1];
     return read_bigarray
             (cst_Lwt_unix_readv$0, fd, buffer$0, first[2], first[3]);
    }
    function _dy_(param){
     if(! param)
      return wrap_syscall
              (0,
               fd,
               function(param){
                return runtime.lwt_unix_readv(fd[1], io_vectors[1], count);
               });
     function _dC_(param){
      return run_job(0, runtime.lwt_unix_readv_job(fd[1], io_vectors, count));
     }
     var _dD_ = wait_read(fd);
     return caml_call2(Lwt[33][1], _dD_, _dC_);
    }
    var _dz_ = fd[4], _dA_ = caml_obj_tag(_dz_);
    a:
    if(250 === _dA_)
     var _dB_ = _dz_[1];
    else{
     if(246 !== _dA_ && 244 !== _dA_){var _dB_ = _dz_; break a;}
     var _dB_ = caml_call1(CamlinternalLazy[2], _dz_);
    }
    return caml_call2(Lwt[33][1], _dB_, _dy_);
   }
   function writev(fd, io_vectors){
    var count = check_io_vectors(cst_Lwt_unix_writev, io_vectors);
    if(Stdlib_Sys[7]){
     var match = io_vectors[1];
     if(! match) return caml_call1(Lwt[4], 0);
     var first = match[1], match$0 = first[1];
     if(0 === match$0[0]){
      var buffer = match$0[1];
      return write(fd, buffer, first[2], first[3]);
     }
     var buffer$0 = match$0[1];
     return write_bigarray
             (cst_Lwt_unix_writev$0, fd, buffer$0, first[2], first[3]);
    }
    function _ds_(param){
     if(! param)
      return wrap_syscall
              (1,
               fd,
               function(param){
                return runtime.lwt_unix_writev(fd[1], io_vectors[1], count);
               });
     function _dw_(param){
      return run_job(0, runtime.lwt_unix_writev_job(fd[1], io_vectors, count));
     }
     var _dx_ = wait_write(fd);
     return caml_call2(Lwt[33][1], _dx_, _dw_);
    }
    var _dt_ = fd[4], _du_ = caml_obj_tag(_dt_);
    a:
    if(250 === _du_)
     var _dv_ = _dt_[1];
    else{
     if(246 !== _du_ && 244 !== _du_){var _dv_ = _dt_; break a;}
     var _dv_ = caml_call1(CamlinternalLazy[2], _dt_);
    }
    return caml_call2(Lwt[33][1], _dv_, _ds_);
   }
   function lseek(ch, offset, whence){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_lseek_job(ch[1], offset, whence));
    var _dr_ = caml_call3(Unix[36], ch[1], offset, whence);
    return caml_call1(Lwt[4], _dr_);
   }
   function truncate(name, offset){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_truncate_job(name, offset));
    var _dq_ = caml_call2(Unix[37], name, offset);
    return caml_call1(Lwt[4], _dq_);
   }
   function ftruncate(ch, offset){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_ftruncate_job(ch[1], offset));
    var _dp_ = caml_call2(Unix[38], ch[1], offset);
    return caml_call1(Lwt[4], _dp_);
   }
   function fdatasync(ch){
    check_descriptor(ch);
    return run_job(0, runtime.lwt_unix_fdatasync_job(ch[1]));
   }
   function fsync(ch){
    check_descriptor(ch);
    return run_job(0, runtime.lwt_unix_fsync_job(ch[1]));
   }
   function stat(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_stat_job(name));
    var _do_ = caml_call1(Unix[39], name);
    return caml_call1(Lwt[4], _do_);
   }
   function lstat(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_lstat_job(name));
    var _dn_ = caml_call1(Unix[40], name);
    return caml_call1(Lwt[4], _dn_);
   }
   function fstat(ch){
    check_descriptor(ch);
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_fstat_job(ch[1]));
    var _dm_ = caml_call1(Unix[41], ch[1]);
    return caml_call1(Lwt[4], _dm_);
   }
   function file_exists(name){
    function _dj_(e){
     if(e[1] === Unix[1]) return Lwt[40];
     throw caml_maybe_attach_backtrace(e, 0);
    }
    function _dk_(param){return Lwt[39];}
    function _dl_(param){return stat(name);}
    return caml_call3(Lwt[9], _dl_, _dk_, _dj_);
   }
   function utimes(path, atime, mtime){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_utimes_job(path, atime, mtime));
    var _di_ = caml_call3(Unix[109], path, atime, mtime);
    return caml_call1(Lwt[4], _di_);
   }
   function isatty(ch){
    check_descriptor(ch);
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_isatty_job(ch[1]));
    var _dh_ = caml_call1(Unix[42], ch[1]);
    return caml_call1(Lwt[4], _dh_);
   }
   function lseek$0(ch, offset, whence){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_lseek_64_job(ch[1], offset, whence));
    var _dg_ = caml_call3(Unix[43][1], ch[1], offset, whence);
    return caml_call1(Lwt[4], _dg_);
   }
   function truncate$0(name, offset){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_truncate_64_job(name, offset));
    var _df_ = caml_call2(Unix[43][2], name, offset);
    return caml_call1(Lwt[4], _df_);
   }
   function ftruncate$0(ch, offset){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_ftruncate_64_job(ch[1], offset));
    var _de_ = caml_call2(Unix[43][3], ch[1], offset);
    return caml_call1(Lwt[4], _de_);
   }
   function stat$0(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_stat_64_job(name));
    var _dd_ = caml_call1(Unix[43][4], name);
    return caml_call1(Lwt[4], _dd_);
   }
   function lstat$0(name){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_lstat_64_job(name));
    var _dc_ = caml_call1(Unix[43][5], name);
    return caml_call1(Lwt[4], _dc_);
   }
   function fstat$0(ch){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_fstat_64_job(ch[1]));
    var _db_ = caml_call1(Unix[43][6], ch[1]);
    return caml_call1(Lwt[4], _db_);
   }
   function file_exists$0(name){
    function _c__(e){
     if(e[1] === Unix[1]) return Lwt[40];
     throw caml_maybe_attach_backtrace(e, 0);
    }
    function _c$_(param){return Lwt[39];}
    function _da_(param){return stat$0(name);}
    return caml_call3(Lwt[9], _da_, _c$_, _c__);
   }
   var
    LargeFile =
      [0,
       lseek$0,
       truncate$0,
       ftruncate$0,
       stat$0,
       lstat$0,
       fstat$0,
       file_exists$0];
   function unlink(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_unlink_job(name));
    var _c9_ = caml_call1(Unix[45], name);
    return caml_call1(Lwt[4], _c9_);
   }
   function rename(name1, name2){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_rename_job(name1, name2));
    var _c8_ = caml_call2(Unix[46], name1, name2);
    return caml_call1(Lwt[4], _c8_);
   }
   function link(oldpath, newpath){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_link_job(oldpath, newpath));
    var _c7_ = caml_call3(Unix[47], 0, oldpath, newpath);
    return caml_call1(Lwt[4], _c7_);
   }
   function chmod(name, mode){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_chmod_job(name, mode));
    var _c6_ = caml_call2(Unix[49], name, mode);
    return caml_call1(Lwt[4], _c6_);
   }
   function fchmod(ch, mode){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_fchmod_job(ch[1], mode));
    var _c5_ = caml_call2(Unix[50], ch[1], mode);
    return caml_call1(Lwt[4], _c5_);
   }
   function chown(name, uid, gid){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_chown_job(name, uid, gid));
    var _c4_ = caml_call3(Unix[51], name, uid, gid);
    return caml_call1(Lwt[4], _c4_);
   }
   function fchown(ch, uid, gid){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_fchown_job(ch[1], uid, gid));
    var _c3_ = caml_call3(Unix[52], ch[1], uid, gid);
    return caml_call1(Lwt[4], _c3_);
   }
   function access(name, mode){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_access_job(name, mode));
    var _c2_ = caml_call2(Unix[54], name, mode);
    return caml_call1(Lwt[4], _c2_);
   }
   function dup(cloexec, ch){
    check_descriptor(ch);
    var
     fd = caml_call2(Unix[55], cloexec, ch[1]),
     _cQ_ = caml_call1(Lwt_sequence[4], 0),
     _cR_ = caml_call1(Lwt_sequence[4], 0),
     _cS_ = 0,
     _cT_ = 0,
     _cU_ =
       ch[3]
        ? [246,
          function(_cV_){
           function _cW_(blocking){
            var
             _c0_ = is_blocking([0, blocking], 0, fd),
             _c1_ = caml_obj_tag(_c0_);
            if(250 === _c1_) return _c0_[1];
            if(246 !== _c1_ && 244 !== _c1_) return _c0_;
            return caml_call1(CamlinternalLazy[2], _c0_);
           }
           var _cX_ = ch[4], _cY_ = caml_obj_tag(_cX_);
           a:
           if(250 === _cY_)
            var _cZ_ = _cX_[1];
           else{
            if(246 !== _cY_ && 244 !== _cY_){var _cZ_ = _cX_; break a;}
            var _cZ_ = caml_call1(CamlinternalLazy[2], _cX_);
           }
           return caml_call2(Lwt[33][1], _cZ_, _cW_);
          }]
        : ch[4];
    return [0, fd, 0, ch[3], _cU_, _cT_, _cS_, _cR_, _cQ_];
   }
   function dup2(cloexec, ch1, ch2){
    check_descriptor(ch1);
    caml_call3(Unix[56], cloexec, ch1[1], ch2[1]);
    ch2[3] = ch1[3];
    var
     _cI_ =
       ch2[3]
        ? [246,
          function(_cJ_){
           function _cK_(blocking){
            var
             _cO_ = is_blocking([0, blocking], 0, ch2[1]),
             _cP_ = caml_obj_tag(_cO_);
            if(250 === _cP_) return _cO_[1];
            if(246 !== _cP_ && 244 !== _cP_) return _cO_;
            return caml_call1(CamlinternalLazy[2], _cO_);
           }
           var _cL_ = ch1[4], _cM_ = caml_obj_tag(_cL_);
           a:
           if(250 === _cM_)
            var _cN_ = _cL_[1];
           else{
            if(246 !== _cM_ && 244 !== _cM_){var _cN_ = _cL_; break a;}
            var _cN_ = caml_call1(CamlinternalLazy[2], _cL_);
           }
           return caml_call2(Lwt[33][1], _cN_, _cK_);
          }]
        : ch1[4];
    ch2[4] = _cI_;
    return 0;
   }
   function set_close_on_exec(ch){
    check_descriptor(ch);
    return caml_call1(Unix[59], ch[1]);
   }
   function clear_close_on_exec(ch){
    check_descriptor(ch);
    return caml_call1(Unix[60], ch[1]);
   }
   function mkdir(name, perms){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_mkdir_job(name, perms));
    var _cH_ = caml_call2(Unix[61], name, perms);
    return caml_call1(Lwt[4], _cH_);
   }
   function rmdir(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_rmdir_job(name));
    var _cG_ = caml_call1(Unix[62], name);
    return caml_call1(Lwt[4], _cG_);
   }
   function chdir(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_chdir_job(name));
    var _cF_ = caml_call1(Unix[63], name);
    return caml_call1(Lwt[4], _cF_);
   }
   function getcwd(param){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_getcwd_job(0));
    var _cE_ = caml_call1(Unix[64], 0);
    return caml_call1(Lwt[4], _cE_);
   }
   function chroot(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_chroot_job(name));
    var _cD_ = caml_call1(Unix[65], name);
    return caml_call1(Lwt[4], _cD_);
   }
   function opendir(name){
    if(! Stdlib_Sys[7]) return run_job(0, runtime.lwt_unix_opendir_job(name));
    var _cC_ = caml_call1(Unix[66], name);
    return caml_call1(Lwt[4], _cC_);
   }
   function readdir(handle){
    if(! Stdlib_Sys[7])
     return runtime.lwt_unix_valid_dir(handle)
             ? run_job(0, runtime.lwt_unix_readdir_job(handle))
             : caml_call1
               (Lwt[5], [0, Unix[1], 3, cst_Lwt_unix_readdir, cst$0]);
    var _cB_ = caml_call1(Unix[67], handle);
    return caml_call1(Lwt[4], _cB_);
   }
   function readdir_n(handle, count){
    if(0 > count)
     return caml_call1(Lwt[5], [0, Stdlib[6], cst_Lwt_unix_readdir_n$0]);
    if(! Stdlib_Sys[7])
     return runtime.lwt_unix_valid_dir(handle)
             ? run_job(0, runtime.lwt_unix_readdir_n_job(handle, count))
             : caml_call1
               (Lwt[5], [0, Unix[1], 3, cst_Lwt_unix_readdir_n, cst$1]);
    var array = runtime.caml_make_vect(count, cst$6), i = 0;
    for(;;){
     if(i === count) return caml_call1(Lwt[4], array);
     try{
      var _cz_ = caml_call1(Unix[67], handle);
      runtime.caml_check_bound(array, i)[1 + i] = _cz_;
     }
     catch(_cA_){
      var _cx_ = caml_wrap_exception(_cA_);
      if(_cx_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_cx_, 0);
      var _cy_ = caml_call3(Stdlib_Array[5], array, 0, i);
      return caml_call1(Lwt[4], _cy_);
     }
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function rewinddir(handle){
    if(! Stdlib_Sys[7])
     return runtime.lwt_unix_valid_dir(handle)
             ? run_job(0, runtime.lwt_unix_rewinddir_job(handle))
             : caml_call1
               (Lwt[5], [0, Unix[1], 3, cst_Lwt_unix_rewinddir, cst$2]);
    var _cw_ = caml_call1(Unix[68], handle);
    return caml_call1(Lwt[4], _cw_);
   }
   function closedir(handle){
    if(Stdlib_Sys[7]){
     var _ct_ = caml_call1(Unix[69], handle);
     return caml_call1(Lwt[4], _ct_);
    }
    if(! runtime.lwt_unix_valid_dir(handle))
     return caml_call1(Lwt[5], [0, Unix[1], 3, cst_Lwt_unix_closedir, cst$3]);
    function _cu_(param){
     runtime.lwt_unix_invalidate_dir(handle);
     return Lwt[36];
    }
    var _cv_ = run_job(0, runtime.lwt_unix_closedir_job(handle));
    return caml_call2(Lwt[33][1], _cv_, _cu_);
   }
   function cleanup_dir_handle(state){
    var match = state[1];
    if(typeof match === "number") return 0;
    var handle = match[1];
    closedir(handle);
    return 0;
   }
   function files_of_directory(path){
    var state = [0, 0], chunk_size = 1024;
    function _b7_(param){
     var match = state[1];
     if(typeof match !== "number"){
      var
       handle = match[1],
       _b$_ =
         function(entries){
          if(entries.length - 1 < 1024){
           state[1] = 1;
           var
            _cp_ =
              function(param){
               var _cs_ = [0, caml_call1(Lwt_stream[13], entries)];
               return caml_call1(Lwt[4], _cs_);
              },
            _cq_ = closedir(handle);
           return caml_call2(Lwt[33][1], _cq_, _cp_);
          }
          var _cr_ = [0, caml_call1(Lwt_stream[13], entries)];
          return caml_call1(Lwt[4], _cr_);
         },
       _ca_ =
         function(exn){
          function _cn_(param){throw caml_maybe_attach_backtrace(exn, 0);}
          var _co_ = closedir(handle);
          return caml_call2(Lwt[33][1], _co_, _cn_);
         },
       _cb_ = function(param){return readdir_n(handle, chunk_size);},
       _cc_ = caml_call2(Lwt[7], _cb_, _ca_);
      return caml_call2(Lwt[33][1], _cc_, _b$_);
     }
     if(match) return Lwt[37];
     function _b9_(handle){
      function _cd_(entries){
       if(entries.length - 1 < 1024){
        state[1] = 1;
        var
         _cj_ =
           function(param){
            var _cm_ = [0, caml_call1(Lwt_stream[13], entries)];
            return caml_call1(Lwt[4], _cm_);
           },
         _ck_ = closedir(handle);
        return caml_call2(Lwt[33][1], _ck_, _cj_);
       }
       state[1] = [0, handle];
       caml_call2(Stdlib_Gc[3], cleanup_dir_handle, state);
       var _cl_ = [0, caml_call1(Lwt_stream[13], entries)];
       return caml_call1(Lwt[4], _cl_);
      }
      function _ce_(exn){
       function _ch_(param){throw caml_maybe_attach_backtrace(exn, 0);}
       var _ci_ = closedir(handle);
       return caml_call2(Lwt[33][1], _ci_, _ch_);
      }
      function _cf_(param){return readdir_n(handle, chunk_size);}
      var _cg_ = caml_call2(Lwt[7], _cf_, _ce_);
      return caml_call2(Lwt[33][1], _cg_, _cd_);
     }
     var _b__ = opendir(path);
     return caml_call2(Lwt[33][1], _b__, _b9_);
    }
    var _b8_ = caml_call1(Lwt_stream[1], _b7_);
    return caml_call1(Lwt_stream[59], _b8_);
   }
   function pipe(cloexec, param){
    var
     match = caml_call2(Unix[70], cloexec, 0),
     in_fd = match[2],
     out_fd = match[1],
     _b6_ = of_unix_file_descr([0, Stdlib_Sys[7]], 0, in_fd);
    return [0, of_unix_file_descr([0, Stdlib_Sys[7]], 0, out_fd), _b6_];
   }
   function pipe_in(cloexec, param){
    var
     match = caml_call2(Unix[70], cloexec, 0),
     in_fd = match[2],
     out_fd = match[1];
    return [0, of_unix_file_descr([0, Stdlib_Sys[7]], 0, out_fd), in_fd];
   }
   function pipe_out(cloexec, param){
    var
     match = caml_call2(Unix[70], cloexec, 0),
     in_fd = match[2],
     out_fd = match[1];
    return [0, out_fd, of_unix_file_descr([0, Stdlib_Sys[7]], 0, in_fd)];
   }
   function mkfifo(name, perms){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_mkfifo_job(name, perms));
    var _b5_ = caml_call2(Unix[71], name, perms);
    return caml_call1(Lwt[4], _b5_);
   }
   function symlink(to_dir, name1, name2){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_symlink_job(name1, name2));
    var _b4_ = caml_call3(Unix[90], to_dir, name1, name2);
    return caml_call1(Lwt[4], _b4_);
   }
   function readlink(name){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_readlink_job(name));
    var _b3_ = caml_call1(Unix[92], name);
    return caml_call1(Lwt[4], _b3_);
   }
   function lockf(ch, cmd, size){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_lockf_job(ch[1], cmd, size));
    var _b2_ = caml_call3(Unix[94], ch[1], cmd, size);
    return caml_call1(Lwt[4], _b2_);
   }
   function getlogin(param){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return run_job(0, runtime.lwt_unix_getlogin_job(0));
    var _b1_ = caml_call1(Unix[121], 0);
    return caml_call1(Lwt[4], _b1_);
   }
   function getpwnam(name){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return run_job(0, runtime.lwt_unix_getpwnam_job(name));
    var _b0_ = caml_call1(Unix[122], name);
    return caml_call1(Lwt[4], _b0_);
   }
   function getgrnam(name){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return run_job(0, runtime.lwt_unix_getgrnam_job(name));
    var _bZ_ = caml_call1(Unix[123], name);
    return caml_call1(Lwt[4], _bZ_);
   }
   function getpwuid(uid){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return run_job(0, runtime.lwt_unix_getpwuid_job(uid));
    var _bY_ = caml_call1(Unix[124], uid);
    return caml_call1(Lwt[4], _bY_);
   }
   function getgrgid(gid){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return run_job(0, runtime.lwt_unix_getgrgid_job(gid));
    var _bX_ = caml_call1(Unix[125], gid);
    return caml_call1(Lwt[4], _bX_);
   }
   function recv(ch, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      do_recv =
        Stdlib_Sys[7]
         ? Unix[143]
         : function
          (_bW_, _bV_, _bU_, _bT_, _bS_){
           return runtime.lwt_unix_recv(_bW_, _bV_, _bU_, _bT_, _bS_);
          };
     return wrap_syscall
             (0,
              ch,
              function(param){
               return caml_call5(do_recv, ch[1], buf, pos, len, flags);
              });
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_recv);
   }
   function send(ch, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      do_send =
        Stdlib_Sys[7]
         ? Unix[145]
         : function
          (_bR_, _bQ_, _bP_, _bO_, _bN_){
           return runtime.lwt_unix_send(_bR_, _bQ_, _bP_, _bO_, _bN_);
          };
     return wrap_syscall
             (1,
              ch,
              function(param){
               return caml_call5(do_send, ch[1], buf, pos, len, flags);
              });
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_send);
   }
   function recvfrom(ch, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      do_recvfrom =
        Stdlib_Sys[7]
         ? Unix[144]
         : function
          (_bM_, _bL_, _bK_, _bJ_, _bI_){
           return runtime.lwt_unix_recvfrom(_bM_, _bL_, _bK_, _bJ_, _bI_);
          };
     return wrap_syscall
             (0,
              ch,
              function(param){
               return caml_call5(do_recvfrom, ch[1], buf, pos, len, flags);
              });
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_recvfrom);
   }
   function sendto(ch, buf, pos, len, flags, addr){
    if(0 <= pos && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= pos){
     var
      do_sendto =
        Stdlib_Sys[7]
         ? Unix[147]
         : function
          (_bH_, _bG_, _bF_, _bE_, _bD_, _bC_){
           return runtime.lwt_unix_sendto_byte
                   (_bH_, _bG_, _bF_, _bE_, _bD_, _bC_);
          };
     return wrap_syscall
             (1,
              ch,
              function(param){
               return caml_call6(do_sendto, ch[1], buf, pos, len, flags, addr);
              });
    }
    return caml_call1(Stdlib[1], cst_Lwt_unix_sendto);
   }
   function recv_msg(socket, io_vectors){
    var count = check_io_vectors(cst_Lwt_unix_recv_msg, io_vectors);
    return wrap_syscall
            (0,
             socket,
             function(param){
              return runtime.lwt_unix_recv_msg
                      (socket[1], count, io_vectors[1]);
             });
   }
   function send_msg(socket, io_vectors, fds){
    var
     vector_count = check_io_vectors(cst_Lwt_unix_send_msg, io_vectors),
     fd_count = caml_call1(Stdlib_List[1], fds);
    return wrap_syscall
            (1,
             socket,
             function(param){
              return runtime.lwt_unix_send_msg_byte
                      (socket[1], vector_count, io_vectors[1], fd_count, fds, 0);
             });
   }
   function send_msgto(socket, io_vectors, fds, dest){
    var
     vector_count = check_io_vectors(cst_Lwt_unix_send_msgto, io_vectors),
     fd_count = caml_call1(Stdlib_List[1], fds);
    return wrap_syscall
            (1,
             socket,
             function(param){
              return runtime.lwt_unix_send_msg_byte
                      (socket[1],
                       vector_count,
                       io_vectors[1],
                       fd_count,
                       fds,
                       [0, dest]);
             });
   }
   function socket(cloexec, dom, typ, proto){
    var s = caml_call4(Unix[133], cloexec, dom, typ, proto);
    return of_unix_file_descr(_r_, 0, s);
   }
   function shutdown(ch, shutdown_command){
    check_descriptor(ch);
    return caml_call2(Unix[140], ch[1], shutdown_command);
   }
   function socketpair(cloexec, dom, typ, proto){
    a:
    {
     if(Stdlib_Sys[7] && 0 !== dom){
      var match = runtime.lwt_unix_socketpair_stub(cloexec, dom, typ, proto);
      break a;
     }
     var match = caml_call4(Unix[135], cloexec, dom, typ, proto);
    }
    var s2 = match[2], s1 = match[1], _bB_ = of_unix_file_descr(_s_, 0, s2);
    return [0, of_unix_file_descr(_t_, 0, s1), _bB_];
   }
   function accept_and_set_nonblock(cloexec, ch_fd){
    if(Lwt_config[21]){
     var
      match = runtime.lwt_unix_accept4(cloexec, 1, ch_fd),
      addr = match[2],
      fd = match[1];
     return [0, of_unix_file_descr(_v_, _u_, fd), addr];
    }
    var
     match$0 = caml_call2(Unix[136], cloexec, ch_fd),
     addr$0 = match$0[2],
     fd$0 = match$0[1];
    return [0, of_unix_file_descr(_w_, 0, fd$0), addr$0];
   }
   function accept(cloexec, ch){
    return wrap_syscall
            (0,
             ch,
             function(param){return accept_and_set_nonblock(cloexec, ch[1]);});
   }
   function accept_n(cloexec, ch, n){
    var l = [0, 0];
    function _bo_(blocking){
     function _bs_(exn){
      var _bA_ = [0, caml_call1(Stdlib_List[10], l[1]), [0, exn]];
      return caml_call1(Lwt[4], _bA_);
     }
     function _bt_(param){
      return wrap_syscall
              (0,
               ch,
               function(param){
                a:
                try{
                 var _bw_ = 1;
                 if(n >= 1){
                  var i = _bw_;
                  for(;;){
                   var _bx_ = blocking ? 1 - unix_readable(ch[1]) : blocking;
                   if(_bx_) throw caml_maybe_attach_backtrace(Retry, 1);
                   var _by_ = l[1];
                   l[1] = [0, accept_and_set_nonblock(cloexec, ch[1]), _by_];
                   var _bz_ = i + 1 | 0;
                   if(n === i) break;
                   var i = _bz_;
                  }
                 }
                }
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0);
                 b:
                 {
                  if(exn[1] === Unix[1]){
                   var _bu_ = exn[2];
                   if(typeof _bu_ !== "number") break b;
                   var _bv_ = _bu_ - 2 | 0;
                   if(9 < _bv_ >>> 0){
                    if(35 !== _bv_) break b;
                   }
                   else if(7 >= _bv_ - 1 >>> 0) break b;
                  }
                  else if(exn !== Retry) break b;
                  if(0 !== l[1]) break a;
                 }
                 throw caml_maybe_attach_backtrace(exn, 0);
                }
                return [0, caml_call1(Stdlib_List[10], l[1]), 0];
               });
     }
     return caml_call2(Lwt[7], _bt_, _bs_);
    }
    var _bp_ = ch[4], _bq_ = caml_obj_tag(_bp_);
    a:
    if(250 === _bq_)
     var _br_ = _bp_[1];
    else{
     if(246 !== _bq_ && 244 !== _bq_){var _br_ = _bp_; break a;}
     var _br_ = caml_call1(CamlinternalLazy[2], _bp_);
    }
    return caml_call2(Lwt[33][1], _br_, _bo_);
   }
   function connect(ch, addr){
    if(Stdlib_Sys[7]){
     var in_progress = [0, 0];
     return wrap_syscall
             (1,
              ch,
              function(param){
               if(! in_progress[1])
                try{
                 var _bl_ = caml_call2(Unix[138], ch[1], addr);
                 return _bl_;
                }
                catch(_bn_){
                 var _bj_ = caml_wrap_exception(_bn_);
                 if(_bj_[1] === Unix[1]){
                  var _bk_ = _bj_[2];
                  if(typeof _bk_ === "number" && 37 === _bk_){
                   in_progress[1] = 1;
                   throw caml_maybe_attach_backtrace(Retry, 1);
                  }
                 }
                 throw caml_maybe_attach_backtrace(_bj_, 0);
                }
               if(! writable(ch)) throw caml_maybe_attach_backtrace(Retry, 1);
               try{var _bi_ = caml_call2(Unix[138], ch[1], addr); return _bi_;
               }
               catch(_bm_){
                var _bg_ = caml_wrap_exception(_bm_);
                if(_bg_[1] === Unix[1]){
                 var _bh_ = _bg_[2];
                 if(typeof _bh_ === "number" && 58 === _bh_) return 0;
                }
                throw caml_maybe_attach_backtrace(_bg_, 0);
               }
              });
    }
    var in_progress$0 = [0, 0];
    return wrap_syscall
            (1,
             ch,
             function(param){
              if(! in_progress$0[1])
               try{var _be_ = caml_call2(Unix[138], ch[1], addr); return _be_;
               }
               catch(_bf_){
                var _bc_ = caml_wrap_exception(_bf_);
                if(_bc_[1] === Unix[1]){
                 var _bd_ = _bc_[2];
                 if(typeof _bd_ === "number" && 38 === _bd_){
                  in_progress$0[1] = 1;
                  throw caml_maybe_attach_backtrace(Retry, 1);
                 }
                }
                throw caml_maybe_attach_backtrace(_bc_, 0);
               }
              var match = caml_call1(Unix[157], ch[1]);
              if(! match) return 0;
              var err = match[1];
              throw caml_maybe_attach_backtrace
                     ([0, Unix[1], err, cst_connect, cst$4], 1);
             });
   }
   function bind(fd, addr){
    check_descriptor(fd);
    if(! Stdlib_Sys[7] && 0 === addr[0])
     return run_job(0, runtime.lwt_unix_bind_job(fd[1], addr));
    var _bb_ = caml_call2(Unix[137], fd[1], addr);
    return caml_call1(Lwt[4], _bb_);
   }
   function listen(ch, cnt){
    check_descriptor(ch);
    return caml_call2(Unix[139], ch[1], cnt);
   }
   function getpeername(ch){
    check_descriptor(ch);
    return caml_call1(Unix[142], ch[1]);
   }
   function getsockname(ch){
    check_descriptor(ch);
    return caml_call1(Unix[141], ch[1]);
   }
   function get_credentials(ch){
    check_descriptor(ch);
    return runtime.lwt_unix_get_credentials(ch[1]);
   }
   function getsockopt(ch, opt){
    check_descriptor(ch);
    return caml_call2(Unix[149], ch[1], opt);
   }
   function setsockopt(ch, opt, x){
    check_descriptor(ch);
    return caml_call3(Unix[150], ch[1], opt, x);
   }
   function getsockopt_int(ch, opt){
    check_descriptor(ch);
    return caml_call2(Unix[151], ch[1], opt);
   }
   function setsockopt_int(ch, opt, x){
    check_descriptor(ch);
    return caml_call3(Unix[152], ch[1], opt, x);
   }
   function getsockopt_optint(ch, opt){
    check_descriptor(ch);
    return caml_call2(Unix[153], ch[1], opt);
   }
   function setsockopt_optint(ch, opt, x){
    check_descriptor(ch);
    return caml_call3(Unix[154], ch[1], opt, x);
   }
   function getsockopt_float(ch, opt){
    check_descriptor(ch);
    return caml_call2(Unix[155], ch[1], opt);
   }
   function setsockopt_float(ch, opt, x){
    check_descriptor(ch);
    return caml_call3(Unix[156], ch[1], opt, x);
   }
   function getsockopt_error(ch){
    check_descriptor(ch);
    return caml_call1(Unix[157], ch[1]);
   }
   function mcast_set_loop(ch, flag){
    check_descriptor(ch);
    return runtime.lwt_unix_mcast_set_loop(ch[1], flag);
   }
   function mcast_set_ttl(ch, ttl){
    check_descriptor(ch);
    return runtime.lwt_unix_mcast_set_ttl(ch[1], ttl);
   }
   function mcast_add_membership(ch, opt, addr){
    if(opt) var sth = opt[1], ifname = sth; else var ifname = Unix[128];
    check_descriptor(ch);
    return runtime.lwt_unix_mcast_modify_membership(ch[1], 0, ifname, addr);
   }
   function mcast_drop_membership(ch, opt, addr){
    if(opt) var sth = opt[1], ifname = sth; else var ifname = Unix[128];
    check_descriptor(ch);
    return runtime.lwt_unix_mcast_modify_membership(ch[1], 1, ifname, addr);
   }
   function gethostname(param){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_gethostname_job(0));
    var _ba_ = caml_call1(Unix[161], 0);
    return caml_call1(Lwt[4], _ba_);
   }
   var hostent_mutex = caml_call1(Lwt_mutex[1], 0);
   function gethostbyname(name){
    if(Stdlib_Sys[7]){
     var _a__ = caml_call1(Unix[162], name);
     return caml_call1(Lwt[4], _a__);
    }
    if(Lwt_config[16])
     return run_job(0, runtime.lwt_unix_gethostbyname_job(name));
    function _a$_(param){
     return run_job(0, runtime.lwt_unix_gethostbyname_job(name));
    }
    return caml_call2(Lwt_mutex[6], hostent_mutex, _a$_);
   }
   function gethostbyaddr(addr){
    if(Stdlib_Sys[7]){
     var _a8_ = caml_call1(Unix[163], addr);
     return caml_call1(Lwt[4], _a8_);
    }
    if(Lwt_config[16])
     return run_job(0, runtime.lwt_unix_gethostbyaddr_job(addr));
    function _a9_(param){
     return run_job(0, runtime.lwt_unix_gethostbyaddr_job(addr));
    }
    return caml_call2(Lwt_mutex[6], hostent_mutex, _a9_);
   }
   a:
   {
    if(! Stdlib_Sys[7] && ! Lwt_config[15]){
     var protoent_mutex = caml_call1(Lwt_mutex[1], 0);
     break a;
    }
    var protoent_mutex = hostent_mutex;
   }
   function getprotobyname(name){
    if(Stdlib_Sys[7]){
     var _a6_ = caml_call1(Unix[164], name);
     return caml_call1(Lwt[4], _a6_);
    }
    if(Lwt_config[15])
     return run_job(0, runtime.lwt_unix_getprotobyname_job(name));
    function _a7_(param){
     return run_job(0, runtime.lwt_unix_getprotobyname_job(name));
    }
    return caml_call2(Lwt_mutex[6], protoent_mutex, _a7_);
   }
   function getprotobynumber(number){
    if(Stdlib_Sys[7]){
     var _a4_ = caml_call1(Unix[165], number);
     return caml_call1(Lwt[4], _a4_);
    }
    if(Lwt_config[15])
     return run_job(0, runtime.lwt_unix_getprotobynumber_job(number));
    function _a5_(param){
     return run_job(0, runtime.lwt_unix_getprotobynumber_job(number));
    }
    return caml_call2(Lwt_mutex[6], protoent_mutex, _a5_);
   }
   a:
   if(! Stdlib_Sys[7] && ! Lwt_config[15]){caml_call1(Lwt_mutex[1], 0); break a;}
   function getservbyname(name, x){
    if(Stdlib_Sys[7]){
     var _a2_ = caml_call2(Unix[166], name, x);
     return caml_call1(Lwt[4], _a2_);
    }
    if(Lwt_config[15])
     return run_job(0, runtime.lwt_unix_getservbyname_job(name, x));
    function _a3_(param){
     return run_job(0, runtime.lwt_unix_getservbyname_job(name, x));
    }
    return caml_call2(Lwt_mutex[6], protoent_mutex, _a3_);
   }
   function getservbyport(port, x){
    if(Stdlib_Sys[7]){
     var _a0_ = caml_call2(Unix[167], port, x);
     return caml_call1(Lwt[4], _a0_);
    }
    if(Lwt_config[15])
     return run_job(0, runtime.lwt_unix_getservbyport_job(port, x));
    function _a1_(param){
     return run_job(0, runtime.lwt_unix_getservbyport_job(port, x));
    }
    return caml_call2(Lwt_mutex[6], protoent_mutex, _a1_);
   }
   function getaddrinfo(host, service, opts){
    if(Stdlib_Sys[7]){
     var _aW_ = caml_call3(Unix[168], host, service, opts);
     return caml_call1(Lwt[4], _aW_);
    }
    function _aX_(l){
     var _aZ_ = caml_call1(Stdlib_List[10], l);
     return caml_call1(Lwt[4], _aZ_);
    }
    var
     _aY_ = run_job(0, runtime.lwt_unix_getaddrinfo_job(host, service, opts));
    return caml_call2(Lwt[33][1], _aY_, _aX_);
   }
   function getnameinfo(addr, opts){
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_getnameinfo_job(addr, opts));
    var _aV_ = caml_call2(Unix[169], addr, opts);
    return caml_call1(Lwt[4], _aV_);
   }
   function tcgetattr(ch){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcgetattr_job(ch[1]));
    var _aU_ = caml_call1(Unix[170], ch[1]);
    return caml_call1(Lwt[4], _aU_);
   }
   function tcsetattr(ch, when, attrs){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcsetattr_job(ch[1], when, attrs));
    var _aT_ = caml_call3(Unix[171], ch[1], when, attrs);
    return caml_call1(Lwt[4], _aT_);
   }
   function tcsendbreak(ch, delay){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcsendbreak_job(ch[1], delay));
    var _aS_ = caml_call2(Unix[172], ch[1], delay);
    return caml_call1(Lwt[4], _aS_);
   }
   function tcdrain(ch){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcdrain_job(ch[1]));
    var _aR_ = caml_call1(Unix[173], ch[1]);
    return caml_call1(Lwt[4], _aR_);
   }
   function tcflush(ch, q){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcflush_job(ch[1], q));
    var _aQ_ = caml_call2(Unix[174], ch[1], q);
    return caml_call1(Lwt[4], _aQ_);
   }
   function tcflow(ch, act){
    check_descriptor(ch);
    if(! Stdlib_Sys[7])
     return run_job(0, runtime.lwt_unix_tcflow_job(ch[1], act));
    var _aP_ = caml_call2(Unix[175], ch[1], act);
    return caml_call1(Lwt[4], _aP_);
   }
   function handle_notifications(param){
    var _aO_ = runtime.lwt_unix_recv_notifications(0);
    return caml_call2(Stdlib_Array[11], call_notification, _aO_);
   }
   var
    _x_ = runtime.lwt_unix_init_notification(0),
    event_notifications =
      [0, caml_call2(Lwt_engine[4], _x_, handle_notifications)];
   runtime.lwt_unix_init_signals(0);
   function set_signal(signum, notification){
    return runtime.lwt_unix_set_signal
            (signum, notification, caml_call1(Lwt_engine[12], signum));
   }
   function compare(a, b){return a - b | 0;}
   var
    Signal_map = caml_call1(Stdlib_Map[1], [0, compare]),
    signals = [0, Signal_map[1]];
   function signal_count(param){
    var _aL_ = 0, _aM_ = signals[1];
    function _aN_(signum, param, len){
     var actions = param[2];
     return len + caml_call1(Lwt_sequence[7], actions) | 0;
    }
    return caml_call3(Signal_map[24], _aN_, _aM_, _aL_);
   }
   function on_signal_full(signum, handler){
    var id = [0, 0];
    try{
     var
      _aI_ = caml_call2(Signal_map[17], signum, signals[1])[2],
      actions$0 = _aI_;
    }
    catch(_aJ_){
     var _aH_ = caml_wrap_exception(_aJ_);
     if(_aH_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_aH_, 0);
     var
      actions = caml_call1(Lwt_sequence[4], 0),
      notification =
        make_notification
         (0,
          function(param){
           function _aK_(f){return caml_call2(f, id, signum);}
           return caml_call2(Lwt_sequence[17], _aK_, actions);
          });
     try{set_signal(signum, notification);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(! caml_call1(Lwt[78][4], exn))
       throw caml_maybe_attach_backtrace(exn, 0);
      stop_notification(notification);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     signals[1] =
      caml_call3
       (Signal_map[2], signum, [0, notification, actions], signals[1]);
     var actions$0 = actions;
    }
    var node = caml_call2(Lwt_sequence[9], handler, actions$0);
    id[1] = [0, [0, signum, node]];
    return id;
   }
   function on_signal(signum, f){
    return on_signal_full
            (signum, function(id, num){return caml_call1(f, num);});
   }
   function disable_signal_handler(id){
    var match = id[1];
    if(! match) return 0;
    var sh = match[1];
    id[1] = 0;
    caml_call1(Lwt_sequence[3], sh[2]);
    var
     match$0 = caml_call2(Signal_map[17], sh[1], signals[1]),
     actions = match$0[2],
     notification = match$0[1],
     _aG_ = caml_call1(Lwt_sequence[6], actions);
    if(! _aG_) return _aG_;
    var signum = sh[1];
    runtime.lwt_unix_remove_signal(signum, caml_call1(Lwt_engine[12], signum));
    signals[1] = caml_call2(Signal_map[6], sh[1], signals[1]);
    return stop_notification(notification);
   }
   function reinstall_signal_handler(signum){
    try{var val = caml_call2(Signal_map[17], signum, signals[1]);}
    catch(_aF_){
     var _aE_ = caml_wrap_exception(_aF_);
     if(_aE_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_aE_, 0);
    }
    var notification = val[1];
    return set_signal(signum, notification);
   }
   function fork(param){
    var pid = caml_call1(Unix[13], 0);
    if(0 !== pid) return pid;
    caml_call1(Lwt_engine[11], 0);
    runtime.lwt_unix_reset_after_fork(0);
    caml_call1(Lwt_engine[1], event_notifications[1]);
    var _ay_ = runtime.lwt_unix_init_notification(0);
    event_notifications[1] =
     caml_call2(Lwt_engine[4], _ay_, handle_notifications);
    var _az_ = 0;
    function _aA_(param, l){var f = param[2]; return [0, f, l];}
    var l = caml_call3(Lwt_sequence[21], _aA_, jobs, _az_);
    caml_call2(Lwt_sequence[19], Lwt_sequence[3], jobs);
    function _aB_(param){
     function _aD_(f){return caml_call1(f, Lwt[21]);}
     return caml_call2(Stdlib_List[18], _aD_, l);
    }
    var _aC_ = caml_call1(Lwt_main[2], 0);
    caml_call2(Lwt[31], _aC_, _aB_);
    return 0;
   }
   var has_wait4 = 1 - Stdlib_Sys[7];
   function do_wait4(flags, pid){
    if(! Stdlib_Sys[7] && ! Lwt_config[1])
     return runtime.lwt_unix_wait4(flags, pid);
    var
     match = caml_call2(Unix[15], flags, pid),
     status = match[2],
     pid$0 = match[1];
    return [0, pid$0, status, _y_];
   }
   var wait_children = caml_call1(Lwt_sequence[4], 0);
   function wait_count(param){
    return caml_call1(Lwt_sequence[7], wait_children);
   }
   var sigchld_handler_installed = [0, 0];
   function install_sigchld_handler(param){
    var
     _ar_ = 1 - Stdlib_Sys[7],
     _as_ = _ar_ ? 1 - sigchld_handler_installed[1] : _ar_;
    if(_as_){
     sigchld_handler_installed[1] = 1;
     var
      _at_ =
        function(param){
         function _av_(node){
          var
           match = caml_call1(Lwt_sequence[1], node),
           pid = match[3],
           flags = match[2],
           wakener = match[1];
          try{
           var
            v = do_wait4(flags, pid),
            pid$0 = v[1],
            _aw_ = 0 !== pid$0 ? 1 : 0,
            _ax_ =
              _aw_
               ? (caml_call1
                  (Lwt_sequence[3], node),
                 caml_call2(Lwt[52], wakener, v))
               : _aw_;
           return _ax_;
          }
          catch(e$0){
           var e = caml_wrap_exception(e$0);
           if(! caml_call1(Lwt[78][4], e))
            throw caml_maybe_attach_backtrace(e, 0);
           caml_call1(Lwt_sequence[3], node);
           return caml_call2(Lwt[53], wakener, e);
          }
         }
         return caml_call2(Lwt_sequence[19], _av_, wait_children);
        };
     on_signal(Stdlib_Sys[29], _at_);
     var _au_ = 0;
    }
    else
     var _au_ = _as_;
    return _au_;
   }
   function _z_(param){
    function _ap_(param){return install_sigchld_handler(0);}
    var _aq_ = caml_call1(Lwt[57], 0);
    return caml_call2(Lwt[33][2], _aq_, _ap_);
   }
   caml_call1(Lwt[11], _z_);
   function waitpid(flags, pid){
    function _al_(_ao_){throw caml_maybe_attach_backtrace(_ao_, 0);}
    function _am_(param){
     var _an_ = caml_call2(Unix[15], flags, pid);
     return caml_call1(Lwt[4], _an_);
    }
    return caml_call2(Lwt[7], _am_, _al_);
   }
   var
    waitpid$0 =
      Stdlib_Sys[7]
       ? waitpid
       : function
        (flags, pid){
         install_sigchld_handler(0);
         if(caml_call2(Stdlib_List[37], 0, flags)) return waitpid(flags, pid);
         var flags$0 = [0, 0, flags];
         function _ah_(res){
          var pid$0 = res[1];
          if(0 !== pid$0) return caml_call1(Lwt[4], res);
          var
           match = caml_call1(Lwt[22], 0),
           w = match[2],
           res$0 = match[1],
           node =
             caml_call2(Lwt_sequence[8], [0, w, flags$0, pid], wait_children);
          function _aj_(param){return caml_call1(Lwt_sequence[3], node);}
          caml_call2(Lwt[24], res$0, _aj_);
          function _ak_(param){
           var status = param[2], pid = param[1];
           return caml_call1(Lwt[4], [0, pid, status]);
          }
          return caml_call2(Lwt[33][1], res$0, _ak_);
         }
         var _ai_ = waitpid(flags$0, pid);
         return caml_call2(Lwt[33][1], _ai_, _ah_);
        };
   function wait4(flags, pid){
    install_sigchld_handler(0);
    if(! Stdlib_Sys[7] && ! Lwt_config[1]){
     if(caml_call2(Stdlib_List[37], 0, flags)){
      var _af_ = do_wait4(flags, pid);
      return caml_call1(Lwt[4], _af_);
     }
     var
      flags$0 = [0, 0, flags],
      res = do_wait4(flags$0, pid),
      pid$0 = res[1];
     if(0 !== pid$0) return caml_call1(Lwt[4], res);
     var
      match = caml_call1(Lwt[22], 0),
      w = match[2],
      res$0 = match[1],
      node = caml_call2(Lwt_sequence[8], [0, w, flags$0, pid], wait_children),
      _ag_ = function(param){return caml_call1(Lwt_sequence[3], node);};
     caml_call2(Lwt[24], res$0, _ag_);
     return res$0;
    }
    var _ae_ = do_wait4(flags, pid);
    return caml_call1(Lwt[4], _ae_);
   }
   function wait(param){return waitpid$0(0, -1);}
   function system(cmd){
    if(Stdlib_Sys[7]){
     var
      _Z_ = function(code){return caml_call1(Lwt[4], [0, code]);},
      ___ =
        run_job
         (0,
          runtime.lwt_unix_system_job
           (caml_call2(Stdlib[28], cst_cmd_exe_c, cmd)));
     return caml_call2(Lwt[33][1], ___, _Z_);
    }
    var id = fork(0);
    if(0 === id)
     try{
      var
       _$_ = caml_call2(Unix[9], cst_bin_sh$0, [0, cst_bin_sh, cst_c, cmd]);
      return _$_;
     }
     catch(_ad_){return runtime.caml_unix_exit(127);}
    function _aa_(_ac_){return _ac_[2];}
    var _ab_ = waitpid$0(0, id);
    return caml_call2(Lwt[33][2], _ab_, _aa_);
   }
   var run = Lwt_main[1];
   function handle_unix_error(f, x){
    function _V_(exn){
     var _X_ = 0;
     function _Y_(param){throw caml_maybe_attach_backtrace(exn, 1);}
     return caml_call2(Unix[3], _Y_, _X_);
    }
    function _W_(param){return caml_call1(f, x);}
    return caml_call2(Lwt[7], _W_, _V_);
   }
   function get_affinity(opt, param){
    if(opt) var sth = opt[1], pid = sth; else var pid = 0;
    return runtime.lwt_unix_get_affinity(pid);
   }
   function set_affinity(opt, l){
    if(opt) var sth = opt[1], pid = sth; else var pid = 0;
    return runtime.lwt_unix_set_affinity(pid, l);
   }
   function _A_(param){
    if(param[1] !== Unix[1]) return 0;
    var arg = param[4], func = param[3], error = param[2];
    if(typeof error === "number"){
     var _U_ = error;
     if(34 <= _U_)
      switch(_U_){
        case 34:
         var error$0 = cst_ESPIPE; break;
        case 35:
         var error$0 = cst_ESRCH; break;
        case 36:
         var error$0 = cst_EXDEV; break;
        case 37:
         var error$0 = cst_EWOULDBLOCK; break;
        case 38:
         var error$0 = cst_EINPROGRESS; break;
        case 39:
         var error$0 = cst_EALREADY; break;
        case 40:
         var error$0 = cst_ENOTSOCK; break;
        case 41:
         var error$0 = cst_EDESTADDRREQ; break;
        case 42:
         var error$0 = cst_EMSGSIZE; break;
        case 43:
         var error$0 = cst_EPROTOTYPE; break;
        case 44:
         var error$0 = cst_ENOPROTOOPT; break;
        case 45:
         var error$0 = cst_EPROTONOSUPPORT; break;
        case 46:
         var error$0 = cst_ESOCKTNOSUPPORT; break;
        case 47:
         var error$0 = cst_EOPNOTSUPP; break;
        case 48:
         var error$0 = cst_EPFNOSUPPORT; break;
        case 49:
         var error$0 = cst_EAFNOSUPPORT; break;
        case 50:
         var error$0 = cst_EADDRINUSE; break;
        case 51:
         var error$0 = cst_EADDRNOTAVAIL; break;
        case 52:
         var error$0 = cst_ENETDOWN; break;
        case 53:
         var error$0 = cst_ENETUNREACH; break;
        case 54:
         var error$0 = cst_ENETRESET; break;
        case 55:
         var error$0 = cst_ECONNABORTED; break;
        case 56:
         var error$0 = cst_ECONNRESET; break;
        case 57:
         var error$0 = cst_ENOBUFS; break;
        case 58:
         var error$0 = cst_EISCONN; break;
        case 59:
         var error$0 = cst_ENOTCONN; break;
        case 60:
         var error$0 = cst_ESHUTDOWN; break;
        case 61:
         var error$0 = cst_ETOOMANYREFS; break;
        case 62:
         var error$0 = cst_ETIMEDOUT; break;
        case 63:
         var error$0 = cst_ECONNREFUSED; break;
        case 64:
         var error$0 = cst_EHOSTDOWN; break;
        case 65:
         var error$0 = cst_EHOSTUNREACH; break;
        case 66:
         var error$0 = cst_ELOOP; break;
        default: var error$0 = cst_EOVERFLOW;
      }
     else
      switch(_U_){
        case 0:
         var error$0 = cst_E2BIG; break;
        case 1:
         var error$0 = cst_EACCES; break;
        case 2:
         var error$0 = cst_EAGAIN; break;
        case 3:
         var error$0 = cst_EBADF; break;
        case 4:
         var error$0 = cst_EBUSY; break;
        case 5:
         var error$0 = cst_ECHILD; break;
        case 6:
         var error$0 = cst_EDEADLK; break;
        case 7:
         var error$0 = cst_EDOM; break;
        case 8:
         var error$0 = cst_EEXIST; break;
        case 9:
         var error$0 = cst_EFAULT; break;
        case 10:
         var error$0 = cst_EFBIG; break;
        case 11:
         var error$0 = cst_EINTR; break;
        case 12:
         var error$0 = cst_EINVAL; break;
        case 13:
         var error$0 = cst_EIO; break;
        case 14:
         var error$0 = cst_EISDIR; break;
        case 15:
         var error$0 = cst_EMFILE; break;
        case 16:
         var error$0 = cst_EMLINK; break;
        case 17:
         var error$0 = cst_ENAMETOOLONG; break;
        case 18:
         var error$0 = cst_ENFILE; break;
        case 19:
         var error$0 = cst_ENODEV; break;
        case 20:
         var error$0 = cst_ENOENT; break;
        case 21:
         var error$0 = cst_ENOEXEC; break;
        case 22:
         var error$0 = cst_ENOLCK; break;
        case 23:
         var error$0 = cst_ENOMEM; break;
        case 24:
         var error$0 = cst_ENOSPC; break;
        case 25:
         var error$0 = cst_ENOSYS; break;
        case 26:
         var error$0 = cst_ENOTDIR; break;
        case 27:
         var error$0 = cst_ENOTEMPTY; break;
        case 28:
         var error$0 = cst_ENOTTY; break;
        case 29:
         var error$0 = cst_ENXIO; break;
        case 30:
         var error$0 = cst_EPERM; break;
        case 31:
         var error$0 = cst_EPIPE; break;
        case 32:
         var error$0 = cst_ERANGE; break;
        default: var error$0 = cst_EROFS;
      }
    }
    else
     var n = error[1], error$0 = caml_call2(Stdlib_Printf[4], _C_, n);
    return [0, caml_call4(Stdlib_Printf[4], _B_, error$0, func, arg)];
   }
   caml_call1(Stdlib_Printexc[9], _A_);
   function bind_1(ch, addr){
    check_descriptor(ch);
    return caml_call2(Unix[137], ch[1], addr);
   }
   var Versioned = [0, bind_1, bind, recv_msg, send_msg];
   function _D_(_T_){return runtime.lwt_unix_somaxconn(_T_);}
   function _E_(_S_){return runtime.lwt_unix_get_cpu(_S_);}
   function _F_(_R_){return runtime.lwt_unix_thread_waiting_count(_R_);}
   function _G_(_Q_){return runtime.lwt_unix_thread_count(_Q_);}
   function _H_(_P_){return runtime.lwt_unix_set_pool_size(_P_);}
   function _I_(_O_){return runtime.lwt_unix_pool_size(_O_);}
   function _J_(_N_){return runtime.lwt_unix_send_notification_stub(_N_);}
   var
    Lwt_unix =
      [0,
       handle_unix_error,
       sleep,
       yield$0,
       auto_yield,
       auto_pause,
       Timeout,
       timeout,
       with_timeout,
       state,
       unix_file_descr,
       of_unix_file_descr,
       blocking,
       set_blocking,
       abort,
       fork,
       wait,
       waitpid$0,
       wait4,
       wait_count,
       system,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       read,
       pread,
       write,
       pwrite,
       write_string,
       pwrite_string,
       [0,
        create,
        append_bytes,
        append_bigarray,
        drop,
        is_empty,
        byte_count,
        system_limit],
       readv,
       writev,
       readable,
       writable,
       wait_read,
       wait_write,
       lseek,
       truncate,
       ftruncate,
       fsync,
       fdatasync,
       stat,
       lstat,
       fstat,
       file_exists,
       utimes,
       isatty,
       LargeFile,
       unlink,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       access,
       dup,
       dup2,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       readdir_n,
       rewinddir,
       closedir,
       files_of_directory,
       pipe,
       pipe_in,
       pipe_out,
       mkfifo,
       symlink,
       readlink,
       lockf,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       on_signal,
       on_signal_full,
       disable_signal_handler,
       signal_count,
       reinstall_signal_handler,
       function(_M_){return runtime.lwt_unix_handle_signal(_M_);},
       socket,
       socketpair,
       bind,
       listen,
       accept,
       accept_n,
       connect,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       sendto,
       recv_msg,
       send_msg,
       send_msgto,
       get_credentials,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       mcast_set_loop,
       mcast_set_ttl,
       mcast_add_membership,
       mcast_drop_membership,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       default_async_method,
       set_default_async_method,
       async_method,
       async_method_key,
       with_async_none,
       with_async_detach,
       with_async_switch,
       Retry,
       Retry_read,
       Retry_write,
       wrap_syscall,
       check_descriptor,
       register_action,
       run_job,
       abort_jobs,
       cancel_jobs,
       wait_for_jobs,
       execute_job,
       make_notification,
       _J_,
       stop_notification,
       call_notification,
       set_notification,
       _I_,
       _H_,
       _G_,
       _F_,
       _E_,
       get_affinity,
       set_affinity,
       Versioned,
       run,
       has_wait4,
       _D_,
       retained,
       read_bigarray,
       write_bigarray];
   runtime.caml_register_global(156, Lwt_unix, "Lwt_unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_timeout
//# unitInfo: Requires: Lwt, Lwt_unix, Stdlib, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mod = runtime.caml_mod,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_unix = global_data.Lwt_unix,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_Lwt_timeout_change = "Lwt_timeout.change",
    cst_Lwt_timeout_create = "Lwt_timeout.create";
   function make(delay, action){
    var x = [];
    runtime.caml_update_dummy(x, [0, delay, action, x, x]);
    return x;
   }
   function lst_remove(x){
    var p = x[3], n = x[4];
    p[4] = n;
    n[3] = p;
    x[4] = x;
    x[3] = x;
    return;
   }
   function lst_in_list(x){return x[4] !== x ? 1 : 0;}
   var count = [0, 0], buckets = [0, [0]], curr = [0, 0], stopped = [0, 1];
   function size(l){
    var len = buckets[1].length - 1;
    if(len <= l){
     var
      _k_ = function(param){return make(-1, function(param){return 0;});},
      b = caml_call2(Stdlib_Array[1], l + 1 | 0, _k_);
     caml_call5(Stdlib_Array[8], buckets[1], curr[1], b, 0, len - curr[1] | 0);
     caml_call5(Stdlib_Array[8], buckets[1], 0, b, len - curr[1] | 0, curr[1]);
     buckets[1] = b;
     curr[1] = 0;
    }
    return;
   }
   var handle_exn = [0, function(exn){return caml_call1(Lwt[12][1], exn);}];
   function set_exn_handler(f){handle_exn[1] = f; return 0;}
   function loop(param){
    stopped[1] = 0;
    function _h_(param){
     var _j_ = curr[1], set = caml_check_bound(buckets[1], _j_)[1 + _j_];
     for(;;){
      if(set[4] === set){
       curr[1] = caml_mod(curr[1] + 1 | 0, buckets[1].length - 1);
       return 0 < count[1] ? loop(0) : (stopped[1] = 1, Lwt[36]);
      }
      var x = set[4];
      lst_remove(x);
      count[1] += -1;
      try{caml_call1(x[2], 0);}
      catch(e$0){
       var e = caml_wrap_exception(e$0);
       if(! caml_call1(Lwt[78][4], e))
        throw caml_maybe_attach_backtrace(e, 0);
       caml_call1(handle_exn[1], e);
      }
     }
    }
    var _i_ = caml_call1(Lwt_unix[2], 1.);
    return caml_call2(Lwt[6], _i_, _h_);
   }
   function start(x){
    var
     in_list = lst_in_list(x),
     slot = caml_mod(curr[1] + x[1] | 0, buckets[1].length - 1);
    lst_remove(x);
    var p = caml_check_bound(buckets[1], slot)[1 + slot], n = p[4];
    p[4] = x;
    x[3] = p;
    x[4] = n;
    n[3] = x;
    var _d_ = 1 - in_list;
    if(_d_){
     count[1]++;
     var
      _e_ = 1 === count[1] ? 1 : 0,
      _f_ = _e_ ? stopped[1] : _e_,
      _g_ = _f_ ? (loop(0), 0) : _f_;
    }
    else
     var _g_ = _d_;
    return _g_;
   }
   function create(delay, action){
    if(delay < 1) caml_call1(Stdlib[1], cst_Lwt_timeout_create);
    var x = make(delay, action);
    size(delay);
    return x;
   }
   function stop(x){
    var
     _b_ = lst_in_list(x),
     _c_ = _b_ ? (lst_remove(x), count[1] += -1, 0) : _b_;
    return _c_;
   }
   function change(x, delay){
    if(delay < 1) caml_call1(Stdlib[1], cst_Lwt_timeout_change);
    x[1] = delay;
    size(delay);
    var _a_ = lst_in_list(x);
    return _a_ ? start(x) : _a_;
   }
   var Lwt_timeout = [0, create, start, stop, change, set_exn_handler];
   runtime.caml_register_global(7, Lwt_timeout, "Lwt_timeout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_throttle
//# unitInfo: Requires: Lwt, Lwt_unix, Stdlib, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printexc, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Lwt_unix = global_data.Lwt_unix,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    _a_ = [0, 0, 0],
    cst_internal_error = "internal error",
    cst_Lwt_throttle_S_create = "Lwt_throttle.S.create";
   function Make(H){
    var MH = caml_call1(Stdlib_Hashtbl[26], H);
    function create(rate, max, n){
     if(1 <= rate && 1 <= max && 0 <= n)
      return [0, rate, max, 0, caml_call1(MH[1], n), 0];
     return caml_call1(Stdlib[1], cst_Lwt_throttle_S_create);
    }
    function launch_cleaning(t){
     function _f_(param){
      function _h_(exn){
       caml_call1(Stdlib[53], cst_internal_error);
       caml_call1(Stdlib_Printexc[5], Stdlib[40]);
       return Lwt[36];
      }
      function _i_(param){
       var _j_ = t[4];
       function _k_(key, elt, param){
        var to_run = param[2], old_waiting = param[1];
        function update(to_run, i){
         if(0 === i)
          return [0, 0, caml_call1(Stdlib_Queue[14], elt[2]), to_run];
         try{
          var
           to_run$0 = [0, caml_call1(Stdlib_Queue[5], elt[2]), to_run],
           _n_ = update(to_run$0, i - 1 | 0);
          return _n_;
         }
         catch(_o_){
          var _m_ = caml_wrap_exception(_o_);
          if(_m_ === Stdlib_Queue[1]) return [0, i, 0, to_run];
          throw caml_maybe_attach_backtrace(_m_, 0);
         }
        }
        var
         match = update(to_run, t[1]),
         to_run$0 = match[3],
         waiting = match[2],
         not_consumed = match[1],
         consumed = t[1] - not_consumed | 0;
        if(0 === consumed)
         caml_call2(MH[6], t[4], key);
        else
         elt[1] = consumed;
        return [0, old_waiting + waiting | 0, to_run$0];
       }
       var
        match = caml_call3(MH[14], _k_, _j_, _a_),
        to_run = match[2],
        waiting = match[1];
       t[3] = waiting;
       a:
       {
        if(0 === waiting && 0 === to_run){t[5] = 0; break a;}
        launch_cleaning(t);
       }
       function _l_(u){return caml_call2(Lwt[52], u, 1);}
       caml_call2(Stdlib_List[18], _l_, to_run);
       return Lwt[36];
      }
      return caml_call2(Lwt[7], _i_, _h_);
     }
     var
      _g_ = caml_call1(Lwt_unix[2], 1.),
      t$0 = caml_call2(Lwt[33][1], _g_, _f_);
     t[5] = [0, t$0];
     return;
    }
    function wait(t, key){
     try{
      var elt$0 = caml_call2(MH[7], t[4], key);
      if(t[1] <= elt$0[1])
       var
        match = caml_call1(Lwt[22], 0),
        u = match[2],
        w = match[1],
        _c_ =
          t[3] < t[2]
           ? (caml_call2
              (Stdlib_Queue[3], u, elt$0[2]),
             t[3] = t[3] + 1 | 0,
             w)
           : Lwt[40],
        _d_ = _c_;
      else{elt$0[1] = elt$0[1] + 1 | 0; var _d_ = Lwt[39];}
      var res = _d_;
     }
     catch(_e_){
      var _b_ = caml_wrap_exception(_e_);
      if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
      var elt = [0, 1, caml_call1(Stdlib_Queue[2], 0)];
      caml_call3(MH[5], t[4], key, elt);
      var res = Lwt[39];
     }
     if(! t[5]) launch_cleaning(t);
     return res;
    }
    return [0, create, wait];
   }
   var Lwt_throttle = [0, Make];
   runtime.caml_register_global(11, Lwt_throttle, "Lwt_throttle");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_sys
//# unitInfo: Requires: Lwt_config, Stdlib__Callback, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Lwt_config = global_data.Lwt_config,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Not_available =
      [248, "Lwt_sys.Not_available", runtime.caml_fresh_oo_id(0)];
   caml_call2
    (Stdlib_Callback[2], "lwt:not-available", [0, Not_available, cst]);
   var windows = Stdlib_Sys[7];
   function have(param){
    if(640300904 <= param){
     if(650135999 === param) return Lwt_config[7];
     if(991650160 <= param)
      return 1013434963 <= param ? Lwt_config[22] : Lwt_config[6];
     if(757744619 <= param) return Lwt_config[14];
    }
    else{
     if(-185023754 <= param)
      return -113015823 <= param ? Lwt_config[8] : Lwt_config[3];
     if(-940245007 === param){
      var _a_ = Stdlib_Sys[7], _b_ = _a_ || Stdlib_Sys[8];
      return 1 - _b_;
     }
    }
    return 1 - Stdlib_Sys[7];
   }
   var
    byte_order = runtime.lwt_unix_system_byte_order(0),
    Lwt_sys = [0, Not_available, have, byte_order, windows];
   runtime.caml_register_global(6, Lwt_sys, "Lwt_sys");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_bytes
//# unitInfo: Requires: Lwt, Lwt_unix, Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__List, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Lwt = global_data.Lwt,
    Lwt_unix = global_data.Lwt_unix,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Unix = global_data.Unix,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    cst_Lwt_bytes_wait_mincore = "Lwt_bytes.wait_mincore",
    cst_Lwt_bytes_mincore = "Lwt_bytes.mincore",
    cst_Lwt_bytes_madvise = "Lwt_bytes.madvise",
    cst_Lwt_bytes_sendto = "Lwt_bytes.sendto",
    cst_Lwt_bytes_recvfrom = "Lwt_bytes.recvfrom",
    cst_Lwt_bytes_send = "Lwt_bytes.send",
    cst_Lwt_bytes_recv = "Lwt_bytes.recv",
    cst_Lwt_bytes_extract = "Lwt_bytes.extract",
    cst_Lwt_bytes_blit = "Lwt_bytes.blit",
    cst_Lwt_bytes_blit_to_bytes = "Lwt_bytes.blit_to_bytes",
    cst_Lwt_bytes_blit_from_bytes = "Lwt_bytes.blit_from_bytes",
    cst_Lwt_bytes_blit_from_string = "Lwt_bytes.blit_from_string",
    cst_Lwt_bytes_fill = "Lwt_bytes.fill",
    cst_Lwt_bytes_read = "Lwt_bytes.read",
    cst_Lwt_bytes_write = "Lwt_bytes.write";
   function create(size){
    return caml_call3
            (Stdlib_Bigarray[19][1],
             Stdlib_Bigarray[13],
             Stdlib_Bigarray[15],
             size);
   }
   var length = caml_ba_dim_1;
   function fill(bytes, ofs, len, ch){
    if(0 <= ofs && 0 <= len && (caml_ba_dim_1(bytes) - len | 0) >= ofs)
     return runtime.lwt_unix_fill_bytes(bytes, ofs, len, ch);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_fill);
   }
   function blit_from_string(src_buf, src_ofs, dst_buf, dst_ofs, len){
    if
     (0 <= len
      &&
       0 <= src_ofs
       &&
        (runtime.caml_ml_string_length(src_buf) - len | 0) >= src_ofs
        && 0 <= dst_ofs && (caml_ba_dim_1(dst_buf) - len | 0) >= dst_ofs)
     return runtime.lwt_unix_blit_from_string
             (src_buf, src_ofs, dst_buf, dst_ofs, len);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_blit_from_string);
   }
   function blit_from_bytes(src_buf, src_ofs, dst_buf, dst_ofs, len){
    if
     (0 <= len
      &&
       0 <= src_ofs
       &&
        (caml_ml_bytes_length(src_buf) - len | 0) >= src_ofs
        && 0 <= dst_ofs && (caml_ba_dim_1(dst_buf) - len | 0) >= dst_ofs)
     return runtime.lwt_unix_blit_from_bytes
             (src_buf, src_ofs, dst_buf, dst_ofs, len);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_blit_from_bytes);
   }
   function blit_to_bytes(src_buf, src_ofs, dst_buf, dst_ofs, len){
    if
     (0 <= len
      &&
       0 <= src_ofs
       &&
        (caml_ba_dim_1(src_buf) - len | 0) >= src_ofs
        &&
         0 <= dst_ofs && (caml_ml_bytes_length(dst_buf) - len | 0) >= dst_ofs)
     return runtime.lwt_unix_blit_to_bytes
             (src_buf, src_ofs, dst_buf, dst_ofs, len);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_blit_to_bytes);
   }
   function blit(src_buf, src_ofs, dst_buf, dst_ofs, len){
    if
     (0 <= len
      &&
       0 <= src_ofs
       &&
        (caml_ba_dim_1(src_buf) - len | 0) >= src_ofs
        && 0 <= dst_ofs && (caml_ba_dim_1(dst_buf) - len | 0) >= dst_ofs)
     return runtime.lwt_unix_blit(src_buf, src_ofs, dst_buf, dst_ofs, len);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_blit);
   }
   function of_bytes(buf){
    var len = caml_ml_bytes_length(buf), bytes = create(len);
    runtime.lwt_unix_blit_from_bytes(buf, 0, bytes, 0, len);
    return bytes;
   }
   function of_string(str){
    return of_bytes(caml_call1(Stdlib_Bytes[45], str));
   }
   function to_bytes(bytes){
    var len = caml_ba_dim_1(bytes), str = runtime.caml_create_bytes(len);
    runtime.lwt_unix_blit_to_bytes(bytes, 0, str, 0, len);
    return str;
   }
   function to_string(bytes){
    var _G_ = to_bytes(bytes);
    return caml_call1(Stdlib_Bytes[44], _G_);
   }
   var proxy = runtime.caml_ba_sub;
   function extract(buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= ofs){
     var buf$0 = create(len);
     blit(buf, ofs, buf$0, 0, len);
     return buf$0;
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_extract);
   }
   function copy(buf){
    var len = caml_ba_dim_1(buf), buf$0 = create(len);
    blit(buf, 0, buf$0, 0, len);
    return buf$0;
   }
   var
    read = caml_call1(Lwt_unix[173], cst_Lwt_bytes_read),
    write = caml_call1(Lwt_unix[174], cst_Lwt_bytes_write);
   function recv(fd, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _F_ =
        function(param){
         return runtime.lwt_unix_bytes_recv
                 (caml_call1(Lwt_unix[10], fd), buf, pos, len, flags);
        };
     return caml_call3(Lwt_unix[148], 0, fd, _F_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_recv);
   }
   function send(fd, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _E_ =
        function(param){
         return runtime.lwt_unix_bytes_send
                 (caml_call1(Lwt_unix[10], fd), buf, pos, len, flags);
        };
     return caml_call3(Lwt_unix[148], 1, fd, _E_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_send);
   }
   function io_vector(buffer, offset, length){return [0, buffer, offset, length];
   }
   function convert_io_vectors(old_io_vectors){
    var io_vectors = caml_call1(Lwt_unix[32][1], 0);
    function _D_(param){
     var iov_length = param[3], iov_offset = param[2], iov_buffer = param[1];
     return caml_call4
             (Lwt_unix[32][3], io_vectors, iov_buffer, iov_offset, iov_length);
    }
    caml_call1(caml_call1(Stdlib_List[18], _D_), old_io_vectors);
    return io_vectors;
   }
   function recv_msg(socket, io_vectors){
    var _C_ = convert_io_vectors(io_vectors);
    return caml_call2(Lwt_unix[106], socket, _C_);
   }
   function send_msg(socket, io_vectors, fds){
    var _B_ = convert_io_vectors(io_vectors);
    return caml_call3(Lwt_unix[107], socket, _B_, fds);
   }
   function recvfrom(fd, buf, pos, len, flags){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _A_ =
        function(param){
         return runtime.lwt_unix_bytes_recvfrom
                 (caml_call1(Lwt_unix[10], fd), buf, pos, len, flags);
        };
     return caml_call3(Lwt_unix[148], 0, fd, _A_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_recvfrom);
   }
   function sendto(fd, buf, pos, len, flags, addr){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos){
     var
      _z_ =
        function(param){
         return runtime.lwt_unix_bytes_sendto_byte
                 (caml_call1(Lwt_unix[10], fd), buf, pos, len, flags, addr);
        };
     return caml_call3(Lwt_unix[148], 1, fd, _z_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_sendto);
   }
   function map_file(fd, pos, shared, opt, param){
    if(opt) var sth = opt[1], size = sth; else var size = -1;
    var
     _y_ =
       caml_call6
        (Unix[44],
         fd,
         pos,
         Stdlib_Bigarray[13],
         Stdlib_Bigarray[15],
         shared,
         [0, size]);
    return caml_call1(Stdlib_Bigarray[23], _y_);
   }
   function madvise(buf, pos, len, advice){
    if(0 <= pos && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= pos)
     return runtime.lwt_unix_madvise(buf, pos, len, advice);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_madvise);
   }
   var page_size = runtime.lwt_unix_get_page_size(0);
   function mincore(buffer, offset, states){
    if
     (0 === caml_mod(offset, page_size)
      &&
       0 <= offset
       &&
        (caml_ba_dim_1(buffer) - offset | 0)
        >= (caml_mul(states.length - 1 - 1 | 0, page_size) + 1 | 0))
     return runtime.lwt_unix_mincore
             (buffer, offset, caml_mul(states.length - 1, page_size), states);
    return caml_call1(Stdlib[1], cst_Lwt_bytes_mincore);
   }
   function wait_mincore(buffer, offset){
    if(0 <= offset && caml_ba_dim_1(buffer) > offset){
     var state = [0, 0];
     mincore(buffer, offset - caml_mod(offset, page_size) | 0, state);
     if(runtime.caml_check_bound(state, 0)[1]) return Lwt[36];
     var _x_ = runtime.lwt_unix_wait_mincore_job(buffer, offset);
     return caml_call2(Lwt_unix[151], 0, _x_);
    }
    return caml_call1(Stdlib[1], cst_Lwt_bytes_wait_mincore);
   }
   function _a_(_w_, _v_, _u_, _t_, _s_){
    return runtime.lwt_unix_blit_to_bytes(_w_, _v_, _u_, _t_, _s_);
   }
   function _b_(_r_, _q_, _p_, _o_, _n_){
    return runtime.lwt_unix_blit_from_string(_r_, _q_, _p_, _o_, _n_);
   }
   function _c_(_m_, _l_, _k_, _j_, _i_){
    return runtime.lwt_unix_blit_from_bytes(_m_, _l_, _k_, _j_, _i_);
   }
   var
    Lwt_bytes =
      [0,
       create,
       length,
       caml_ba_get_1,
       caml_ba_set_1,
       caml_ba_get_1,
       caml_ba_set_1,
       of_bytes,
       of_string,
       to_bytes,
       to_string,
       blit,
       blit_from_string,
       blit_from_bytes,
       blit_to_bytes,
       function(_h_, _g_, _f_, _e_, _d_){
        return runtime.lwt_unix_blit(_h_, _g_, _f_, _e_, _d_);
       },
       _c_,
       _b_,
       _a_,
       proxy,
       extract,
       copy,
       fill,
       read,
       write,
       recv,
       send,
       recvfrom,
       sendto,
       io_vector,
       recv_msg,
       send_msg,
       map_file,
       madvise,
       page_size,
       mincore,
       wait_mincore];
   runtime.caml_register_global(22, Lwt_bytes, "Lwt_bytes");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_io
//# unitInfo: Requires: CamlinternalLazy, EndianBigstring, Lwt, Lwt_bytes, Lwt_list, Lwt_main, Lwt_sequence, Lwt_stream, Lwt_sys, Lwt_unix, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Filename, Stdlib__Gc, Stdlib__Int32, Stdlib__Int64, Stdlib__List, Stdlib__Marshal, Stdlib__Printf, Stdlib__Random, Stdlib__String, Stdlib__Sys, Stdlib__Weak, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Lwt_io = "Lwt_io.",
    cst_set_position$1 = "set_position",
    cst_src_unix_lwt_io_ml = "src/unix/lwt_io.ml",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    fun_name = "Lwt_io.make",
    Lwt = global_data.Lwt,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Lwt_unix = global_data.Lwt_unix,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Lwt_bytes = global_data.Lwt_bytes,
    Unix = global_data.Unix,
    Stdlib = global_data.Stdlib,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Marshal = global_data.Stdlib__Marshal,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Lwt_sequence = global_data.Lwt_sequence,
    Lwt_list = global_data.Lwt_list,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Weak = global_data.Stdlib__Weak,
    Lwt_main = global_data.Lwt_main,
    EndianBigstring = global_data.EndianBigstring,
    Lwt_sys = global_data.Lwt_sys,
    Channel_closed =
      [248, "Lwt_io.Channel_closed", runtime.caml_fresh_oo_id(0)],
    cst_set_default_buffer_size = "set_default_buffer_size",
    _u_ = [0, 1],
    cst_file_length = "file_length",
    cst_lwt_io_temp_dir = "lwt_io_temp_dir_",
    _t_ = [0, 1, [0, 5, [0, 7, [0, 13, 0]]]],
    cst_lwt_io_temp_file = "lwt_io_temp_file_",
    _s_ = [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
    _q_ = [0, 1, [0, 5, [0, 6, [0, 3, 0]]]],
    _r_ = [0, 0, [0, 3, 0]],
    cst_length = "length",
    _n_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_set_position = cst_set_position$1,
    cst_set_position$0 = cst_set_position$1,
    _m_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Lwt_io_set_position_out_of = "Lwt_io.set_position: out of bounds",
    _l_ =
      [0,
       [11, cst_Lwt_io, [2, 0, [11, ": seek failed", 0]]],
       "Lwt_io.%s: seek failed"],
    cst_Lwt_io_direct_access_inval =
      "Lwt_io.direct_access: invalid result of [f]",
    cst_Lwt_io_direct_access_da_pe = "Lwt_io.direct_access.da_perform",
    cst_Lwt_io_direct_access = "Lwt_io.direct_access",
    cst_Lwt_io_perform_this_functi =
      "Lwt_io.perform: this function can not be called outside ",
    cst_Lwt_io_block = "Lwt_io.block",
    cst_Lwt_io_write_from_exactly_ = "Lwt_io.write_from_exactly_bigstring",
    cst_Lwt_io_write_from_exactly = "Lwt_io.write_from_exactly",
    cst_Lwt_io_write_from = "Lwt_io.write_from",
    cst_Lwt_io_write_from_bigstrin = "Lwt_io.write_from_bigstring",
    cst_Lwt_io_read_into_exactly = "Lwt_io.read_into_exactly",
    cst_Lwt_io_read_into_exactly_b = "Lwt_io.read_into_exactly_bigstring",
    cst_Lwt_io_read_into = "Lwt_io.read_into",
    cst_Lwt_io_read_into_bigstring = "Lwt_io.read_into_bigstring",
    cst_unread_data = "unread data",
    cst_Lwt_io_resize_buffer_canno =
      "Lwt_io.resize_buffer: cannot decrease buffer size, too much ",
    cst_Lwt_io_resize_buffer_buffe =
      "Lwt_io.resize_buffer: buffer size too small",
    cst_created_with_Lwt_io_of_str = "created with Lwt_io.of_string",
    cst_Lwt_io_resize_buffer_canno$0 =
      "Lwt_io.resize_buffer: cannot resize the buffer of a channel ",
    _k_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _j_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Lwt_io_seek_seek_not_suppo =
      "Lwt_io.seek: seek not supported on this channel",
    cst_Lwt_io_close_cannot_close_ =
      "Lwt_io.close: cannot close a channel obtained via Lwt_io.atomic",
    _i_ = [0, cst_src_unix_lwt_io_ml, 435, 8],
    _h_ = [0, cst_src_unix_lwt_io_ml, 387, 8],
    _g_ = [0, cst_src_unix_lwt_io_ml, 355, 4],
    _f_ = [0, cst_src_unix_lwt_io_ml, 308, 4],
    cst_write = "write",
    cst_read = "read",
    _d_ =
      [0,
       [11,
        "Lwt_io.perform_io: invalid result of the [",
        [2, 0, [11, "] function", 0]]],
       "Lwt_io.perform_io: invalid result of the [%s] function"],
    _e_ = [0, cst_src_unix_lwt_io_ml, 205, 4],
    cst_cannot_flush_a_channel_cre =
      "cannot flush a channel created with Lwt_io.of_string",
    _c_ =
      [0,
       [11, "temporary atomic channel ", [2, 0, [11, " no more valid", 0]]],
       "temporary atomic channel %s no more valid"],
    cst_output = "output",
    cst_input = "input",
    _a_ =
      [0,
       [11, cst_Lwt_io, [2, 0, [11, ": too small buffer size", 0]]],
       "Lwt_io.%s: too small buffer size"],
    _b_ =
      [0,
       [11, cst_Lwt_io, [2, 0, [11, ": too big buffer size", 0]]],
       "Lwt_io.%s: too big buffer size"],
    min_buffer_size = 16;
   function check_buffer_size(fun_name, buffer_size){
    if(buffer_size < 16)
     return caml_call3(Stdlib_Printf[10], Stdlib[1], _a_, fun_name);
    if(Stdlib_Sys[12] < buffer_size)
     return caml_call3(Stdlib_Printf[10], Stdlib[1], _b_, fun_name);
    return;
   }
   var default_buffer_size = [0, 4096], input = 0, output = 1;
   function mode(wrapper){return wrapper[2][10];}
   var index = [0, 0];
   function hash(param){index[1] = index[1] + 1 | 0; return index[1];}
   function equal(_eJ_, _eI_){return _eJ_ === _eI_ ? 1 : 0;}
   var
    Outputs = caml_call1(Stdlib_Weak[9], [0, equal, hash]),
    outputs = caml_call1(Outputs[1], 32);
   function position(wrapper){
    var ch = wrapper[2];
    return ch[10]
            ? caml_int64_add(ch[11], caml_int64_of_int32(ch[3]))
            : caml_int64_sub(ch[11], caml_int64_of_int32(ch[4] - ch[3] | 0));
   }
   function name(ch){return ch[10] ? cst_output : cst_input;}
   function closed_channel(ch){return [0, Channel_closed, name(ch)];}
   function invalid_channel(ch){
    var _eG_ = name(ch), _eH_ = caml_call2(Stdlib_Printf[4], _c_, _eG_);
    return [0, Stdlib[7], _eH_];
   }
   function is_busy(ch){
    var _eF_ = ch[1];
    if(typeof _eF_ === "number" && 2 <= _eF_){
     if(4 <= _eF_)
      throw caml_maybe_attach_backtrace(invalid_channel(ch[2]), 1);
     return 0;
    }
    return 1;
   }
   function flush_partial(ch){
    var _ev_ = ch[8][1];
    if(typeof _ev_ === "number")
     switch(_ev_){
       case 3:
        var _eA_ = closed_channel(ch); return caml_call1(Lwt[5], _eA_);
       case 4:
        var _eB_ = invalid_channel(ch); return caml_call1(Lwt[5], _eB_);
       case 0: break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     }
    var match = ch[12];
    if(! match)
     return ch[10]
             ? caml_call1
               (Lwt[5], [0, Stdlib[7], cst_cannot_flush_a_channel_cre])
             : caml_call1(Lwt[4], 0);
    var perform = match[1];
    if(ch[10])
     var len = ch[3], ptr = 0;
    else{
     var size = ch[4] - ch[3] | 0;
     if(0 < size) caml_call5(Lwt_bytes[15], ch[1], ch[3], ch[1], 0, size);
     ch[3] = 0;
     ch[4] = size;
     var len$0 = ch[2] - size | 0, len = len$0, ptr = size;
    }
    if(Stdlib_Sys[7])
     var
      _ew_ =
        function(exn){
         if(exn[1] === Unix[1]){
          var _eE_ = exn[2];
          if(typeof _eE_ === "number" && 31 === _eE_)
           return caml_call1(Lwt[4], 0);
         }
         throw caml_maybe_attach_backtrace(exn, 0);
        },
      _ex_ = function(param){return caml_call3(perform, ch[1], ptr, len);},
      perform$0 = caml_call2(Lwt[7], _ex_, _ew_);
    else
     var perform$0 = caml_call3(perform, ch[1], ptr, len);
    function _ey_(n){
     if(0 <= n && len >= n){
      ch[11] = caml_int64_add(ch[11], caml_int64_of_int32(n));
      if(ch[10]){
       var len$0 = len - n | 0;
       caml_call5(Lwt_bytes[15], ch[1], n, ch[1], 0, len$0);
       ch[3] = len$0;
      }
      else
       ch[4] = ch[4] + n | 0;
      return caml_call1(Lwt[4], n);
     }
     var
      _eC_ = ch[10] ? cst_write : cst_read,
      _eD_ = caml_call2(Stdlib_Printf[4], _d_, _eC_);
     return caml_call1(Lwt[5], [0, Stdlib[7], _eD_]);
    }
    var _ez_ = caml_call1(Lwt[16], [0, ch[5], [0, perform$0, 0]]);
    return caml_call2(Lwt[33][1], _ez_, _ey_);
   }
   function flush_total(oc){
    if(0 >= oc[3]) return Lwt[36];
    function _et_(param){return flush_total(oc);}
    var _eu_ = flush_partial(oc);
    return caml_call2(Lwt[33][1], _eu_, _et_);
   }
   function safe_flush_total(oc){
    function _er_(param){return Lwt[36];}
    function _es_(param){return flush_total(oc);}
    return caml_call2(Lwt[7], _es_, _er_);
   }
   function auto_flush(oc){
    function _el_(param){
     var wrapper$1 = oc[8], wrapper = wrapper$1;
     for(;;){
      var match = wrapper[1];
      if(typeof match === "number"){
       var _en_ = wrapper[1];
       if(typeof _en_ !== "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
       if(2 !== _en_) return 3 <= _en_ ? Lwt[36] : (oc[7] = 0, Lwt[36]);
       oc[7] = 0;
       wrapper[1] = 0;
       var
        _eo_ =
          function(param){
           if(0 === wrapper[1]) wrapper[1] = 2;
           if(1 - caml_call1(Lwt_sequence[6], wrapper[3])){
            var _eq_ = caml_call1(Lwt_sequence[11], wrapper[3]);
            caml_call2(Lwt[2], _eq_, 0);
           }
           return Lwt[36];
          },
        _ep_ = safe_flush_total(oc);
       return caml_call2(Lwt[33][1], _ep_, _eo_);
      }
      var wrapper$0 = match[1], wrapper = wrapper$0;
     }
    }
    var _em_ = caml_call1(Lwt[57], 0);
    return caml_call2(Lwt[33][1], _em_, _el_);
   }
   function unlock(wrapper){
    var _ed_ = wrapper[1];
    if(typeof _ed_ === "number" && _ed_){
     if(3 > _ed_)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var _ee_ = 1 - caml_call1(Lwt_sequence[6], wrapper[3]);
     if(! _ee_) return _ee_;
     var _ef_ = caml_call1(Lwt_sequence[11], wrapper[3]);
     return caml_call2(Lwt[2], _ef_, 0);
    }
    if(caml_call1(Lwt_sequence[6], wrapper[3]))
     wrapper[1] = 2;
    else{
     wrapper[1] = 1;
     var _ek_ = caml_call1(Lwt_sequence[11], wrapper[3]);
     caml_call2(Lwt[2], _ek_, 0);
    }
    var ch = wrapper[2], _eg_ = 2 === wrapper[1] ? 1 : 0;
    if(_eg_){
     var _eh_ = ch[10] ? 1 : 0;
     if(_eh_)
      var
       _ei_ = 1 - ch[7],
       _ej_ = _ei_ ? caml_call1(Lwt_sequence[6], wrapper[3]) : _ei_;
     else
      var _ej_ = _eh_;
    }
    else
     var _ej_ = _eg_;
    if(_ej_){ch[7] = 1; auto_flush(ch);}
    return;
   }
   function primitive(f, wrapper){
    var _d3_ = wrapper[1];
    if(typeof _d3_ === "number")
     switch(_d3_){
       case 2:
        wrapper[1] = 0;
        var
         _d6_ = function(param){unlock(wrapper); return Lwt[36];},
         _d7_ = function(param){return caml_call1(f, wrapper[2]);};
        return caml_call2(Lwt[8], _d7_, _d6_);
       case 3:
        var _d8_ = closed_channel(wrapper[2]);
        return caml_call1(Lwt[5], _d8_);
       case 4:
        var _d9_ = invalid_channel(wrapper[2]);
        return caml_call1(Lwt[5], _d9_);
     }
    function _d4_(param){
     var _d__ = wrapper[1];
     if(typeof _d__ === "number")
      switch(_d__){
        case 3:
         unlock(wrapper);
         var _eb_ = closed_channel(wrapper[2]);
         return caml_call1(Lwt[5], _eb_);
        case 4:
         var _ec_ = invalid_channel(wrapper[2]);
         return caml_call1(Lwt[5], _ec_);
        case 0: break;
        default:
         wrapper[1] = 0;
         var
          _d$_ = function(param){unlock(wrapper); return Lwt[36];},
          _ea_ = function(param){return caml_call1(f, wrapper[2]);};
         return caml_call2(Lwt[8], _ea_, _d$_);
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    }
    var _d5_ = caml_call1(Lwt[55], wrapper[3]);
    return caml_call2(Lwt[33][1], _d5_, _d4_);
   }
   function atomic(f, wrapper){
    var _dP_ = wrapper[1];
    if(typeof _dP_ === "number")
     switch(_dP_){
       case 2:
        var
         _dS_ = caml_call1(Lwt_sequence[4], 0),
         tmp_wrapper = [0, 2, wrapper[2], _dS_];
        wrapper[1] = [0, tmp_wrapper];
        var
         _dT_ =
           function(param){
            tmp_wrapper[1] = 4;
            unlock(wrapper);
            return Lwt[36];
           },
         _dU_ = function(param){return caml_call1(f, tmp_wrapper);};
        return caml_call2(Lwt[8], _dU_, _dT_);
       case 3:
        var _dV_ = closed_channel(wrapper[2]);
        return caml_call1(Lwt[5], _dV_);
       case 4:
        var _dW_ = invalid_channel(wrapper[2]);
        return caml_call1(Lwt[5], _dW_);
     }
    function _dQ_(param){
     var _dX_ = wrapper[1];
     if(typeof _dX_ === "number")
      switch(_dX_){
        case 3:
         unlock(wrapper);
         var _d1_ = closed_channel(wrapper[2]);
         return caml_call1(Lwt[5], _d1_);
        case 4:
         var _d2_ = invalid_channel(wrapper[2]);
         return caml_call1(Lwt[5], _d2_);
        case 0: break;
        default:
         var
          _dY_ = caml_call1(Lwt_sequence[4], 0),
          tmp_wrapper = [0, 2, wrapper[2], _dY_];
         wrapper[1] = [0, tmp_wrapper];
         var
          _dZ_ =
            function(param){
             tmp_wrapper[1] = 4;
             unlock(wrapper);
             return Lwt[36];
            },
          _d0_ = function(param){return caml_call1(f, tmp_wrapper);};
         return caml_call2(Lwt[8], _d0_, _dZ_);
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    }
    var _dR_ = caml_call1(Lwt[55], wrapper[3]);
    return caml_call2(Lwt[33][1], _dR_, _dQ_);
   }
   function abort(wrapper){
    var wrapper$0 = wrapper;
    for(;;){
     var match = wrapper$0[1];
     if(typeof match === "number"){
      if(3 === match){
       var _dJ_ = wrapper$0[2][9], _dK_ = caml_obj_tag(_dJ_);
       if(250 === _dK_) return _dJ_[1];
       if(246 !== _dK_ && 244 !== _dK_) return _dJ_;
       return caml_call1(CamlinternalLazy[2], _dJ_);
      }
      if(4 <= match){
       var _dL_ = invalid_channel(wrapper$0[2]);
       return caml_call1(Lwt[5], _dL_);
      }
      wrapper$0[1] = 3;
      var _dM_ = closed_channel(wrapper$0[2]);
      caml_call2(Lwt[53], wrapper$0[2][6], _dM_);
      var _dN_ = wrapper$0[2][9], _dO_ = caml_obj_tag(_dN_);
      if(250 === _dO_) return _dN_[1];
      if(246 !== _dO_ && 244 !== _dO_) return _dN_;
      return caml_call1(CamlinternalLazy[2], _dN_);
     }
     var tmp_wrapper = match[1], wrapper$0 = tmp_wrapper;
    }
   }
   function close(wrapper){
    var channel = wrapper[2];
    if(channel[8] !== wrapper)
     return caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_io_close_cannot_close_]);
    if(! channel[10]) return abort(wrapper);
    function _dF_(param){return abort(wrapper);}
    function _dG_(param){
     return primitive
             (function(channel){
               function _dH_(param){return abort(wrapper);}
               var _dI_ = safe_flush_total(channel);
               return caml_call2(Lwt[33][1], _dI_, _dH_);
              },
              wrapper);
    }
    return caml_call2(Lwt[7], _dG_, _dF_);
   }
   function is_closed(wrapper){
    var _dE_ = wrapper[1];
    if(typeof _dE_ === "number" && 3 === _dE_) return 1;
    return 0;
   }
   function flush_all(param){
    var _dz_ = 0;
    function _dA_(x, l){return [0, x, l];}
    var wrappers = caml_call3(Outputs[11], _dA_, outputs, _dz_);
    function _dB_(wrapper){
     function _dC_(param){return Lwt[36];}
     function _dD_(param){return primitive(safe_flush_total, wrapper);}
     return caml_call2(Lwt[7], _dD_, _dC_);
    }
    return caml_call2(Lwt_list[2], _dB_, wrappers);
   }
   caml_call1(Lwt_main[10], flush_all);
   function no_seek(pos, cmd){
    return caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_io_seek_seek_not_suppo]);
   }
   function make(buffer, opt, _dr_, mode, perform_io){
    if(opt) var sth = opt[1], close = sth; else var close = Lwt[4];
    if(_dr_) var sth$0 = _dr_[1], seek = sth$0; else var seek = no_seek;
    if(buffer){
     var buffer$0 = buffer[1];
     check_buffer_size(fun_name, caml_call1(Lwt_bytes[2], buffer$0));
     var size = caml_call1(Lwt_bytes[2], buffer$0), buffer$1 = buffer$0;
    }
    else
     var
      size$1 = default_buffer_size[1],
      buffer$2 = caml_call1(Lwt_bytes[1], size$1),
      size = size$1,
      buffer$1 = buffer$2;
    var
     match = caml_call1(Lwt[1], 0),
     abort_wakener = match[2],
     abort_waiter = match[1],
     ch = [],
     wrapper = [],
     _ds_ =
       [0,
        perform_io,
        function(pos, cmd){
         try{var _dy_ = caml_call2(seek, pos, cmd); return _dy_;}
         catch(e$0){
          var e = caml_wrap_exception(e$0);
          if(caml_call1(Lwt[78][4], e))
           throw caml_maybe_attach_backtrace(e, 0);
          throw caml_maybe_attach_backtrace(e, 0);
         }
        }],
     _dt_ =
       [246,
        function(_dv_){
         function _dw_(_dx_){throw caml_maybe_attach_backtrace(_dx_, 0);}
         return caml_call2(Lwt[7], close, _dw_);
        }],
     _du_ = 0,
     size$0 = mode ? size : 0;
    caml_update_dummy
     (ch,
      [0,
       buffer$1,
       size,
       0,
       size$0,
       abort_waiter,
       abort_wakener,
       _du_,
       wrapper,
       _dt_,
       mode,
       _j_,
       _ds_]);
    caml_update_dummy(wrapper, [0, 2, ch, caml_call1(Lwt_sequence[4], 0)]);
    if(mode) caml_call2(Outputs[4], outputs, wrapper);
    return wrapper;
   }
   function of_bytes(mode, bytes){
    var
     length = caml_call1(Lwt_bytes[2], bytes),
     match = caml_call1(Lwt[1], 0),
     abort_wakener = match[2],
     abort_waiter = match[1],
     ch = [],
     wrapper = [],
     _dp_ = 0,
     _dq_ = mode ? _k_ : caml_int64_of_int32(length);
    caml_update_dummy
     (ch,
      [0,
       bytes,
       length,
       0,
       length,
       abort_waiter,
       abort_wakener,
       1,
       wrapper,
       [250, Lwt[36]],
       mode,
       _dq_,
       _dp_]);
    caml_update_dummy(wrapper, [0, 2, ch, caml_call1(Lwt_sequence[4], 0)]);
    return wrapper;
   }
   function of_fd(buffer, close, mode, fd){
    var
     perform_io =
       mode ? caml_call1(Lwt_bytes[24], fd) : caml_call1(Lwt_bytes[23], fd),
     _do_ =
       [0,
        function(pos, cmd){return caml_call3(Lwt_unix[50][1], fd, pos, cmd);}];
    if(close)
     var f = close[1], f$0 = f;
    else
     var f$0 = function(param){return caml_call1(Lwt_unix[25], fd);};
    return make(buffer, [0, f$0], _do_, mode, perform_io);
   }
   function of_unix_fd(buffer, close, mode, fd){
    return of_fd(buffer, close, mode, caml_call3(Lwt_unix[11], 0, 0, fd));
   }
   function buffered(ch){
    return ch[2][10] ? ch[2][3] : ch[2][4] - ch[2][3] | 0;
   }
   function buffer_size(ch){return ch[2][2];}
   function resize_buffer(wrapper, len){
    if(len < 16) caml_call1(Stdlib[1], cst_Lwt_io_resize_buffer_buffe);
    if(wrapper[2][12]){
     var
      f =
        function(ch){
         if(ch[10]){
          var
           loop =
             function(param){
              if(len >= ch[3]) return Lwt[36];
              function _dm_(param){return loop(0);}
              var _dn_ = flush_partial(ch);
              return caml_call2(Lwt[33][1], _dn_, _dm_);
             },
           _dj_ =
             function(param){
              var buffer = caml_call1(Lwt_bytes[1], len);
              caml_call5(Lwt_bytes[15], ch[1], 0, buffer, 0, ch[3]);
              ch[1] = buffer;
              ch[2] = len;
              ch[4] = len;
              return Lwt[36];
             },
           _dk_ = loop(0);
          return caml_call2(Lwt[33][1], _dk_, _dj_);
         }
         var unread_count = ch[4] - ch[3] | 0;
         if(len < unread_count){
          var
           _dl_ =
             caml_call2
              (Stdlib[28], cst_Lwt_io_resize_buffer_canno, cst_unread_data);
          return caml_call1(Lwt[5], [0, Stdlib[7], _dl_]);
         }
         var buffer = caml_call1(Lwt_bytes[1], len);
         caml_call5(Lwt_bytes[15], ch[1], ch[3], buffer, 0, unread_count);
         ch[1] = buffer;
         ch[2] = len;
         ch[3] = 0;
         ch[4] = unread_count;
         return Lwt[36];
        };
     return primitive(f, wrapper);
    }
    var
     _di_ =
       caml_call2
        (Stdlib[28],
         cst_Lwt_io_resize_buffer_canno$0,
         cst_created_with_Lwt_io_of_str);
    return caml_call1(Lwt[5], [0, Stdlib[7], _di_]);
   }
   function read_char(ic){
    var ptr = ic[3];
    if(ptr === ic[4]){
     var
      _df_ =
        function(param){
         if(0 === param) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
         return read_char(ic);
        },
      _dg_ = flush_partial(ic);
     return caml_call2(Lwt[33][1], _dg_, _df_);
    }
    ic[3] = ptr + 1 | 0;
    var _dh_ = caml_call2(Lwt_bytes[5], ic[1], ptr);
    return caml_call1(Lwt[4], _dh_);
   }
   function read_char_opt(ic){
    function _db_(exn){
     if(exn === Stdlib[12]) return Lwt[37];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _dc_(param){
     function _dd_(ch){return [0, ch];}
     var _de_ = read_char(ic);
     return caml_call2(Lwt[33][2], _de_, _dd_);
    }
    return caml_call2(Lwt[7], _dc_, _db_);
   }
   function read_line(ic){
    var buf = caml_call1(Stdlib_Buffer[1], 128);
    function loop(cr_read){
     function _c8_(exn){
      if(exn !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn, 0);
      if(cr_read) caml_call2(Stdlib_Buffer[12], buf, 13);
      var _da_ = caml_call1(Stdlib_Buffer[2], buf);
      return caml_call1(Lwt[4], _da_);
     }
     function _c9_(ch){
      if(10 === ch){
       var _c$_ = caml_call1(Stdlib_Buffer[2], buf);
       return caml_call1(Lwt[4], _c$_);
      }
      if(13 === ch){
       if(cr_read) caml_call2(Stdlib_Buffer[12], buf, 13);
       return loop(1);
      }
      if(cr_read) caml_call2(Stdlib_Buffer[12], buf, 13);
      caml_call2(Stdlib_Buffer[12], buf, ch);
      return loop(0);
     }
     function _c__(param){return read_char(ic);}
     return caml_call3(Lwt[9], _c__, _c9_, _c8_);
    }
    function _c6_(ch){
     return 10 === ch
             ? caml_call1(Lwt[4], cst)
             : 13
               === ch
               ? loop(1)
               : (caml_call2(Stdlib_Buffer[12], buf, ch), loop(0));
    }
    var _c7_ = read_char(ic);
    return caml_call2(Lwt[33][1], _c7_, _c6_);
   }
   function read_line_opt(ic){
    function _c2_(exn){
     if(exn === Stdlib[12]) return Lwt[37];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _c3_(param){
     function _c4_(ch){return [0, ch];}
     var _c5_ = read_line(ic);
     return caml_call2(Lwt[33][2], _c5_, _c4_);
    }
    return caml_call2(Lwt[7], _c3_, _c2_);
   }
   function unsafe_read_into(ic, blit, buf, ofs, len){
    var avail = ic[4] - ic[3] | 0;
    if(0 < avail){
     var len$0 = caml_call2(Stdlib[16], len, avail);
     caml_call5(blit, ic[1], ic[3], buf, ofs, len$0);
     ic[3] = ic[3] + len$0 | 0;
     return caml_call1(Lwt[4], len$0);
    }
    function _c0_(n){
     var len$0 = caml_call2(Stdlib[16], len, n);
     caml_call5(blit, ic[1], 0, buf, ofs, len$0);
     ic[3] = len$0;
     ic[4] = n;
     return caml_call1(Lwt[4], len$0);
    }
    var _c1_ = flush_partial(ic);
    return caml_call2(Lwt[33][1], _c1_, _c0_);
   }
   function unsafe_read_into_bigstring(ic, buf, ofs, len){
    return unsafe_read_into(ic, Lwt_bytes[15], buf, ofs, len);
   }
   function unsafe_read_into$0(ic, buf, ofs, len){
    return unsafe_read_into(ic, Lwt_bytes[18], buf, ofs, len);
   }
   function unsafe_read_into_exactly(read_into, ic, buf, ofs, len){
    function loop(ic, buf, ofs, len){
     function _cY_(n){
      if(0 === n) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      var len$0 = len - n | 0;
      return 0 === len$0 ? Lwt[36] : loop(ic, buf, ofs + n | 0, len$0);
     }
     var _cZ_ = caml_call4(read_into, ic, buf, ofs, len);
     return caml_call2(Lwt[33][1], _cZ_, _cY_);
    }
    return loop(ic, buf, ofs, len);
   }
   function unsafe_read_into_exactly$0(ic, buf, ofs, len){
    return unsafe_read_into_exactly(unsafe_read_into$0, ic, buf, ofs, len);
   }
   function read_all(ic, total_len, acc){
    var len = ic[4] - ic[3] | 0, buf = caml_create_bytes(len);
    caml_call5(Lwt_bytes[18], ic[1], ic[3], buf, 0, len);
    var str = caml_call1(Stdlib_Bytes[44], buf);
    ic[3] = ic[4];
    function _cV_(param){
     if(0 !== param) return read_all(ic, len + total_len | 0, [0, str, acc]);
     var
      l = [0, str, acc],
      len$0 = len + total_len | 0,
      buf = caml_create_bytes(len$0);
     function _cX_(ofs, str){
      var len = runtime.caml_ml_string_length(str), ofs$0 = ofs - len | 0;
      runtime.caml_blit_string(str, 0, buf, ofs$0, len);
      return ofs$0;
     }
     caml_call3(Stdlib_List[26], _cX_, len$0, l);
     return caml_call1(Lwt[4], buf);
    }
    var _cW_ = flush_partial(ic);
    return caml_call2(Lwt[33][1], _cW_, _cV_);
   }
   function read_value(ic){
    var header = caml_create_bytes(Stdlib_Marshal[6]);
    function _cQ_(param){
     var
      bsize = caml_call2(Stdlib_Marshal[7], header, 0),
      buffer = caml_create_bytes(Stdlib_Marshal[6] + bsize | 0);
     runtime.caml_blit_bytes(header, 0, buffer, 0, Stdlib_Marshal[6]);
     function _cS_(param){
      var _cU_ = caml_call2(Stdlib_Marshal[4], buffer, 0);
      return caml_call1(Lwt[4], _cU_);
     }
     var
      _cT_ = unsafe_read_into_exactly$0(ic, buffer, Stdlib_Marshal[6], bsize);
     return caml_call2(Lwt[33][1], _cT_, _cS_);
    }
    var _cR_ = unsafe_read_into_exactly$0(ic, header, 0, Stdlib_Marshal[6]);
    return caml_call2(Lwt[33][1], _cR_, _cQ_);
   }
   function write_char(oc, ch){
    var ptr = oc[3];
    if(ptr < oc[2]){
     oc[3] = ptr + 1 | 0;
     caml_call3(Lwt_bytes[6], oc[1], ptr, ch);
     return Lwt[36];
    }
    function _cO_(param){return write_char(oc, ch);}
    var _cP_ = flush_partial(oc);
    return caml_call2(Lwt[33][1], _cP_, _cO_);
   }
   function unsafe_write_from(blit, oc, str, ofs, len){
    var avail = oc[2] - oc[3] | 0;
    if(len <= avail){
     caml_call5(blit, str, ofs, oc[1], oc[3], len);
     oc[3] = oc[3] + len | 0;
     return caml_call1(Lwt[4], 0);
    }
    caml_call5(blit, str, ofs, oc[1], oc[3], avail);
    oc[3] = oc[2];
    function _cM_(param){
     var len$0 = len - avail | 0;
     return 0 === oc[3]
             ? 0
               === len$0
               ? caml_call1(Lwt[4], 0)
               : unsafe_write_from(blit, oc, str, ofs + avail | 0, len$0)
             : caml_call1(Lwt[4], len$0);
    }
    var _cN_ = flush_partial(oc);
    return caml_call2(Lwt[33][1], _cN_, _cM_);
   }
   function unsafe_write_from_bigstring(oc, bytes, ofs, len){
    return unsafe_write_from(Lwt_bytes[11], oc, bytes, ofs, len);
   }
   function unsafe_write_from$0(oc, str, ofs, len){
    return unsafe_write_from(Lwt_bytes[16], oc, str, ofs, len);
   }
   function write_from(oc, buf, ofs, len){
    if(0 <= ofs && 0 <= len && caml_ml_bytes_length(buf) >= (ofs + len | 0)){
     if(0 === len) return caml_call1(Lwt[4], 0);
     var
      _cK_ =
        function(remaining){return caml_call1(Lwt[4], len - remaining | 0);},
      _cL_ = unsafe_write_from$0(oc, buf, ofs, len);
     return caml_call2(Lwt[33][1], _cL_, _cK_);
    }
    return caml_call1(Lwt[5], [0, Stdlib[6], cst_Lwt_io_write_from]);
   }
   function unsafe_write_from_exactly(write_from, oc, buf, ofs, len){
    function loop(oc, buf, ofs, len){
     function _cI_(n){
      return 0 === n ? Lwt[36] : loop(oc, buf, (ofs + len | 0) - n | 0, n);
     }
     var _cJ_ = caml_call4(write_from, oc, buf, ofs, len);
     return caml_call2(Lwt[33][1], _cJ_, _cI_);
    }
    return loop(oc, buf, ofs, len);
   }
   function unsafe_write_from_exactly$0(oc, buf, ofs, len){
    return unsafe_write_from_exactly(unsafe_write_from$0, oc, buf, ofs, len);
   }
   function write_from_exactly(oc, buf, ofs, len){
    if(0 <= ofs && 0 <= len && caml_ml_bytes_length(buf) >= (ofs + len | 0))
     return 0 === len
             ? Lwt[36]
             : unsafe_write_from_exactly$0(oc, buf, ofs, len);
    return caml_call1(Lwt[5], [0, Stdlib[6], cst_Lwt_io_write_from_exactly]);
   }
   function write(oc, str){
    var buf = caml_call1(Stdlib_Bytes[45], str);
    return unsafe_write_from_exactly$0(oc, buf, 0, caml_ml_bytes_length(buf));
   }
   function read_block_unsafe(ic, size, f){
    if((ic[4] - ic[3] | 0) < size){
     var
      _cG_ =
        function(param){
         if(0 === param) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
         return read_block_unsafe(ic, size, f);
        },
      _cH_ = flush_partial(ic);
     return caml_call2(Lwt[33][1], _cH_, _cG_);
    }
    var ptr = ic[3];
    ic[3] = ptr + size | 0;
    return caml_call2(f, ic[1], ptr);
   }
   function write_block_unsafe(oc, size, f){
    if((oc[4] - oc[3] | 0) < size){
     var
      _cE_ = function(param){return write_block_unsafe(oc, size, f);},
      _cF_ = flush_partial(oc);
     return caml_call2(Lwt[33][1], _cF_, _cE_);
    }
    var ptr = oc[3];
    oc[3] = ptr + size | 0;
    return caml_call2(f, oc[1], ptr);
   }
   function do_seek(fun_name, seek, pos){
    function _cB_(offset){
     if(! runtime.caml_notequal(offset, pos)) return Lwt[36];
     var _cD_ = caml_call2(Stdlib_Printf[4], _l_, fun_name);
     return caml_call1(Lwt[5], [0, Stdlib[7], _cD_]);
    }
    var _cC_ = caml_call2(seek, pos, 0);
    return caml_call2(Lwt[33][1], _cC_, _cB_);
   }
   function length(ch){
    var match = ch[12];
    if(! match) return caml_call1(Lwt[4], caml_int64_of_int32(ch[2]));
    var seek = match[2];
    function _cx_(len){
     function _cz_(param){return caml_call1(Lwt[4], len);}
     var _cA_ = do_seek(cst_length, seek, ch[11]);
     return caml_call2(Lwt[33][1], _cA_, _cz_);
    }
    var _cy_ = caml_call2(seek, _n_, 2);
    return caml_call2(Lwt[33][1], _cy_, _cx_);
   }
   function read_char$0(wrapper){
    var channel = wrapper[2], ptr = channel[3];
    if(2 === wrapper[1] && ptr < channel[4]){
     channel[3] = ptr + 1 | 0;
     var _cw_ = caml_call2(Lwt_bytes[5], channel[1], ptr);
     return caml_call1(Lwt[4], _cw_);
    }
    return primitive(read_char, wrapper);
   }
   function read_char_opt$0(wrapper){
    var channel = wrapper[2], ptr = channel[3];
    if(2 === wrapper[1] && ptr < channel[4]){
     channel[3] = ptr + 1 | 0;
     var _cv_ = [0, caml_call2(Lwt_bytes[5], channel[1], ptr)];
     return caml_call1(Lwt[4], _cv_);
    }
    return primitive(read_char_opt, wrapper);
   }
   function read_line$0(ic){return primitive(read_line, ic);}
   function read_line_opt$0(ic){return primitive(read_line_opt, ic);}
   function read(count, ic){
    return primitive
            (function(ic){
              if(count){
               var
                len = count[1],
                buf = caml_create_bytes(len),
                _co_ =
                  function(real_len){
                   if(real_len < len){
                    var
                     _cs_ = caml_call3(Stdlib_Bytes[7], buf, 0, real_len),
                     _ct_ = caml_call1(Stdlib_Bytes[44], _cs_);
                    return caml_call1(Lwt[4], _ct_);
                   }
                   var _cu_ = caml_call1(Stdlib_Bytes[44], buf);
                   return caml_call1(Lwt[4], _cu_);
                  },
                _cp_ = unsafe_read_into$0(ic, buf, 0, len);
               return caml_call2(Lwt[33][1], _cp_, _co_);
              }
              var _cq_ = Stdlib_Bytes[44], _cr_ = read_all(ic, 0, 0);
              return caml_call2(Lwt[33][2], _cr_, _cq_);
             },
             ic);
   }
   function read_into(ic, str, ofs, len){
    return primitive
            (function(ic){
              if
               (0 <= ofs
                && 0 <= len && caml_ml_bytes_length(str) >= (ofs + len | 0))
               return 0 === len
                       ? caml_call1(Lwt[4], 0)
                       : unsafe_read_into$0(ic, str, ofs, len);
              return caml_call1(Lwt[5], [0, Stdlib[6], cst_Lwt_io_read_into]);
             },
             ic);
   }
   function read_into_exactly(ic, str, ofs, len){
    return primitive
            (function(ic){
              if
               (0 <= ofs
                && 0 <= len && caml_ml_bytes_length(str) >= (ofs + len | 0))
               return 0 === len
                       ? Lwt[36]
                       : unsafe_read_into_exactly$0(ic, str, ofs, len);
              return caml_call1
                      (Lwt[5], [0, Stdlib[6], cst_Lwt_io_read_into_exactly]);
             },
             ic);
   }
   function read_into_bigstring(ic, bytes, ofs, len){
    return primitive
            (function(ic){
              if
               (0 <= ofs
                &&
                 0 <= len
                 && caml_call1(Lwt_bytes[2], bytes) >= (ofs + len | 0))
               return 0 === len
                       ? caml_call1(Lwt[4], 0)
                       : unsafe_read_into_bigstring(ic, bytes, ofs, len);
              return caml_call1
                      (Lwt[5], [0, Stdlib[6], cst_Lwt_io_read_into_bigstring]);
             },
             ic);
   }
   function read_into_exactly_bigstring(ic, bytes, ofs, len){
    return primitive
            (function(ic){
              if
               (0 <= ofs
                &&
                 0 <= len
                 && caml_call1(Lwt_bytes[2], bytes) >= (ofs + len | 0))
               return 0 === len
                       ? Lwt[36]
                       : unsafe_read_into_exactly
                         (unsafe_read_into_bigstring, ic, bytes, ofs, len);
              return caml_call1
                      (Lwt[5], [0, Stdlib[6], cst_Lwt_io_read_into_exactly_b]);
             },
             ic);
   }
   function read_value$0(ic){return primitive(read_value, ic);}
   function flush(oc){return primitive(flush_total, oc);}
   function write_char$0(wrapper, x){
    var channel = wrapper[2], ptr = channel[3];
    if(2 === wrapper[1] && ptr < channel[4]){
     channel[3] = ptr + 1 | 0;
     caml_call3(Lwt_bytes[6], channel[1], ptr, x);
     return channel[7]
             ? Lwt[36]
             : (channel[7] = 1, auto_flush(channel), Lwt[36]);
    }
    return primitive(function(oc){return write_char(oc, x);}, wrapper);
   }
   function write$0(oc, str){
    return primitive(function(oc){return write(oc, str);}, oc);
   }
   function write_line(oc, str){
    return primitive
            (function(oc){
              var buf = caml_call1(Stdlib_Bytes[45], str);
              function _cm_(param){return write_char(oc, 10);}
              var
               _cn_ =
                 unsafe_write_from_exactly$0
                  (oc, buf, 0, caml_ml_bytes_length(buf));
              return caml_call2(Lwt[33][1], _cn_, _cm_);
             },
             oc);
   }
   function write_from$0(oc, str, ofs, len){
    return primitive(function(oc){return write_from(oc, str, ofs, len);}, oc);
   }
   function write_from_bigstring(oc, bytes, ofs, len){
    return primitive
            (function(oc){
              if
               (0 <= ofs
                &&
                 0 <= len
                 && caml_call1(Lwt_bytes[2], bytes) >= (ofs + len | 0)){
               if(0 === len) return caml_call1(Lwt[4], 0);
               var
                _ck_ =
                  function(remaining){
                   return caml_call1(Lwt[4], len - remaining | 0);
                  },
                _cl_ = unsafe_write_from_bigstring(oc, bytes, ofs, len);
               return caml_call2(Lwt[33][1], _cl_, _ck_);
              }
              return caml_call1
                      (Lwt[5], [0, Stdlib[6], cst_Lwt_io_write_from_bigstrin]);
             },
             oc);
   }
   function write_from_string(oc, str, ofs, len){
    return primitive
            (function(oc){
              var buf = caml_call1(Stdlib_Bytes[45], str);
              return write_from(oc, buf, ofs, len);
             },
             oc);
   }
   function write_from_exactly$0(oc, str, ofs, len){
    return primitive
            (function(oc){return write_from_exactly(oc, str, ofs, len);}, oc);
   }
   function write_from_exactly_bigstring(oc, bytes, ofs, len){
    return primitive
            (function(oc){
              if
               (0 <= ofs
                &&
                 0 <= len
                 && caml_call1(Lwt_bytes[2], bytes) >= (ofs + len | 0))
               return 0 === len
                       ? Lwt[36]
                       : unsafe_write_from_exactly
                         (unsafe_write_from_bigstring, oc, bytes, ofs, len);
              return caml_call1
                      (Lwt[5], [0, Stdlib[6], cst_Lwt_io_write_from_exactly_]);
             },
             oc);
   }
   function write_from_string_exactly(oc, str, ofs, len){
    return primitive
            (function(oc){
              var buf = caml_call1(Stdlib_Bytes[45], str);
              return write_from_exactly(oc, buf, ofs, len);
             },
             oc);
   }
   function write_value(oc, flags, x){
    return primitive
            (function(oc){
              if(flags)
               var sth = flags[1], flags$0 = sth;
              else
               var flags$0 = 0;
              return write
                      (oc, runtime.caml_output_value_to_string(x, flags$0));
             },
             oc);
   }
   function block(ch, size, f){
    return primitive
            (function(ch){
              if(0 <= size && 16 >= size){
               if(size > (ch[4] - ch[3] | 0))
                return ch[10]
                        ? write_block_unsafe(ch, size, f)
                        : read_block_unsafe(ch, size, f);
               var ptr = ch[3];
               ch[3] = ptr + size | 0;
               return caml_call2(f, ch[1], ptr);
              }
              return caml_call1(Lwt[5], [0, Stdlib[6], cst_Lwt_io_block]);
             },
             ch);
   }
   function direct_access(ch, f){
    return primitive
            (function(ch){
              var token = [0, 1], da = [];
              function _ce_(param){
               if(! token[1]){
                var
                 _cj_ =
                   caml_call2
                    (Stdlib[28],
                     cst_Lwt_io_perform_this_functi,
                     cst_Lwt_io_direct_access);
                return caml_call1(Lwt[5], [0, Stdlib[7], _cj_]);
               }
               if(da[3] === ch[4] && da[2] >= ch[3] && ch[4] >= da[2]){
                ch[3] = da[2];
                var
                 _ch_ =
                   function(count){
                    da[2] = ch[3];
                    da[3] = ch[4];
                    return caml_call1(Lwt[4], count);
                   },
                 _ci_ = flush_partial(ch);
                return caml_call2(Lwt[33][1], _ci_, _ch_);
               }
               return caml_call1
                       (Lwt[5], [0, Stdlib[6], cst_Lwt_io_direct_access_da_pe]);
              }
              caml_update_dummy(da, [0, ch[1], ch[3], ch[4], _ce_]);
              function _cf_(x){
               token[1] = 0;
               if(da[3] === ch[4] && da[2] >= ch[3] && ch[4] >= da[2]){ch[3] = da[2]; return caml_call1(Lwt[4], x);}
               return caml_call1
                       (Lwt[5], [0, Stdlib[7], cst_Lwt_io_direct_access_inval]);
              }
              var _cg_ = caml_call1(f, da);
              return caml_call2(Lwt[33][1], _cg_, _cf_);
             },
             ch);
   }
   function set_position(ch, pos){
    return primitive
            (function(ch){
              var _b8_ = ch[12], _b9_ = ch[10];
              if(_b8_){
               var seek = _b8_[2];
               if(_b9_){
                var
                 _b__ =
                   function(param){
                    function _cc_(param){ch[11] = pos; return Lwt[36];}
                    var _cd_ = do_seek(cst_set_position, seek, pos);
                    return caml_call2(Lwt[33][1], _cd_, _cc_);
                   },
                 _b$_ = flush_total(ch);
                return caml_call2(Lwt[33][1], _b$_, _b__);
               }
               var
                current =
                  caml_int64_sub
                   (ch[11], caml_int64_of_int32(ch[4] - ch[3] | 0));
               if
                (runtime.caml_greaterequal(pos, current)
                 && runtime.caml_lessequal(pos, ch[11])){
                ch[3] =
                 ch[4] - caml_int64_to_int32(caml_int64_sub(ch[11], pos)) | 0;
                return Lwt[36];
               }
               var
                _ca_ =
                  function(param){
                   ch[11] = pos;
                   ch[3] = 0;
                   ch[4] = 0;
                   return Lwt[36];
                  },
                _cb_ = do_seek(cst_set_position$0, seek, pos);
               return caml_call2(Lwt[33][1], _cb_, _ca_);
              }
              if
               (!
                runtime.caml_lessthan(pos, _m_)
                && ! runtime.caml_greaterthan(pos, caml_int64_of_int32(ch[2]))){ch[3] = caml_int64_to_int32(pos); return Lwt[36];}
              return caml_call1
                      (Lwt[5], [0, Stdlib[7], cst_Lwt_io_set_position_out_of]);
             },
             ch);
   }
   function length$0(ch){return primitive(length, ch);}
   function MakeNumberIO(Endian){
    function read_int(ic){
     return read_block_unsafe
             (ic,
              4,
              function(buffer, ptr){
               var _b7_ = caml_call2(Endian[6], buffer, ptr);
               return caml_call1(Lwt[4], _b7_);
              });
    }
    function read_int16(ic){
     return read_block_unsafe
             (ic,
              2,
              function(buffer, ptr){
               var _b6_ = caml_call2(Endian[5], buffer, ptr);
               return caml_call1(Lwt[4], _b6_);
              });
    }
    function read_int32(ic){
     return read_block_unsafe
             (ic,
              4,
              function(buffer, ptr){
               var _b5_ = caml_call2(Endian[6], buffer, ptr);
               return caml_call1(Lwt[4], _b5_);
              });
    }
    function read_int64(ic){
     return read_block_unsafe
             (ic,
              8,
              function(buffer, ptr){
               var _b4_ = caml_call2(Endian[7], buffer, ptr);
               return caml_call1(Lwt[4], _b4_);
              });
    }
    function read_float32(ic){
     function _b2_(x){
      return caml_call1(Lwt[4], runtime.caml_int32_float_of_bits(x));
     }
     var _b3_ = read_int32(ic);
     return caml_call2(Lwt[33][1], _b3_, _b2_);
    }
    function read_float64(ic){
     function _b0_(x){
      return caml_call1(Lwt[4], runtime.caml_int64_float_of_bits(x));
     }
     var _b1_ = read_int64(ic);
     return caml_call2(Lwt[33][1], _b1_, _b0_);
    }
    function write_int(oc, v){
     return write_block_unsafe
             (oc,
              4,
              function(buffer, ptr){
               caml_call3(Endian[13], buffer, ptr, v);
               return Lwt[36];
              });
    }
    function write_int16(oc, v){
     return write_block_unsafe
             (oc,
              2,
              function(buffer, ptr){
               caml_call3(Endian[12], buffer, ptr, v);
               return Lwt[36];
              });
    }
    function write_int32(oc, v){
     return write_block_unsafe
             (oc,
              4,
              function(buffer, ptr){
               caml_call3(Endian[13], buffer, ptr, v);
               return Lwt[36];
              });
    }
    function write_int64(oc, v){
     return write_block_unsafe
             (oc,
              8,
              function(buffer, ptr){
               caml_call3(Endian[14], buffer, ptr, v);
               return Lwt[36];
              });
    }
    function write_float32(oc, v){
     return write_int32(oc, runtime.caml_int32_bits_of_float(v));
    }
    function write_float64(oc, v){
     return write_int64(oc, runtime.caml_int64_bits_of_float(v));
    }
    var
     Primitives =
       [0,
        read_int,
        read_int16,
        read_int32,
        read_int64,
        read_float32,
        read_float64,
        write_int,
        write_int16,
        write_int32,
        write_int64,
        write_float32,
        write_float64];
    function read_int$0(ic){return primitive(Primitives[1], ic);}
    function read_int16$0(ic){return primitive(Primitives[2], ic);}
    function read_int32$0(ic){return primitive(Primitives[3], ic);}
    function read_int64$0(ic){return primitive(Primitives[4], ic);}
    function read_float32$0(ic){return primitive(Primitives[5], ic);}
    function read_float64$0(ic){return primitive(Primitives[6], ic);}
    function write_int$0(oc, x){
     return primitive
             (function(oc){return Primitives[7].call(null, oc, x);}, oc);
    }
    function write_int16$0(oc, x){
     return primitive
             (function(oc){return Primitives[8].call(null, oc, x);}, oc);
    }
    function write_int32$0(oc, x){
     return primitive
             (function(oc){return Primitives[9].call(null, oc, x);}, oc);
    }
    function write_int64$0(oc, x){
     return primitive
             (function(oc){return Primitives[10].call(null, oc, x);}, oc);
    }
    function write_float32$0(oc, x){
     return primitive
             (function(oc){return Primitives[11].call(null, oc, x);}, oc);
    }
    function write_float64$0(oc, x){
     return primitive
             (function(oc){return Primitives[12].call(null, oc, x);}, oc);
    }
    return [0,
            ,
            read_int$0,
            read_int16$0,
            read_int32$0,
            read_int64$0,
            read_float32$0,
            read_float64$0,
            write_int$0,
            write_int16$0,
            write_int32$0,
            write_int64$0,
            write_float32$0,
            write_float64$0];
   }
   var
    LE = MakeNumberIO(EndianBigstring[4]),
    BE = MakeNumberIO(EndianBigstring[2]),
    system_byte_order = Lwt_sys[3],
    include =
      system_byte_order
       ? [0,
         BE[2],
         BE[3],
         BE[4],
         BE[5],
         BE[6],
         BE[7],
         BE[8],
         BE[9],
         BE[10],
         BE[11],
         BE[12],
         BE[13]]
       : [0,
         LE[2],
         LE[3],
         LE[4],
         LE[5],
         LE[6],
         LE[7],
         LE[8],
         LE[9],
         LE[10],
         LE[11],
         LE[12],
         LE[13]],
    read_int = include[1],
    read_int16 = include[2],
    read_int32 = include[3],
    read_int64 = include[4],
    read_float32 = include[5],
    read_float64 = include[6],
    write_int = include[7],
    write_int16 = include[8],
    write_int32 = include[9],
    write_int64 = include[10],
    write_float32 = include[11],
    write_float64 = include[12];
   function read_chars(ic){
    function _bZ_(param){return read_char_opt$0(ic);}
    return caml_call1(Lwt_stream[1], _bZ_);
   }
   function write_chars(oc, chars){
    function _bY_(char$0){return write_char$0(oc, char$0);}
    return caml_call2(Lwt_stream[51], _bY_, chars);
   }
   function read_lines(ic){
    function _bX_(param){return read_line_opt$0(ic);}
    return caml_call1(Lwt_stream[1], _bX_);
   }
   function write_lines(oc, lines){
    function _bW_(line){return write_line(oc, line);}
    return caml_call2(Lwt_stream[51], _bW_, lines);
   }
   function _o_(str, ofs, len){
    caml_call4(Lwt_bytes[22], str, ofs, len, 0);
    return caml_call1(Lwt[4], len);
   }
   var
    zero =
      make([0, caml_call1(Lwt_bytes[1], min_buffer_size)], 0, 0, input, _o_);
   function _p_(str, ofs, len){return caml_call1(Lwt[4], len);}
   var
    null$0 =
      make([0, caml_call1(Lwt_bytes[1], min_buffer_size)], 0, 0, output, _p_),
    stdin = of_fd(0, 0, input, Lwt_unix[21]),
    stdout = of_fd(0, 0, output, Lwt_unix[22]),
    stderr = of_fd(0, 0, output, Lwt_unix[23]);
   function fprint(oc, txt){return write$0(oc, txt);}
   function fprintl(oc, txt){return write_line(oc, txt);}
   function fprintf(oc, fmt){
    function _bV_(txt){return write$0(oc, txt);}
    return caml_call2(Stdlib_Printf[10], _bV_, fmt);
   }
   function fprintlf(oc, fmt){
    function _bU_(txt){return write_line(oc, txt);}
    return caml_call2(Stdlib_Printf[10], _bU_, fmt);
   }
   function print(txt){return write$0(stdout, txt);}
   function printl(txt){return write_line(stdout, txt);}
   function printf(fmt){return caml_call2(Stdlib_Printf[10], print, fmt);}
   function printlf(fmt){return caml_call2(Stdlib_Printf[10], printl, fmt);}
   function eprint(txt){return write$0(stderr, txt);}
   function eprintl(txt){return write_line(stderr, txt);}
   function eprintf(fmt){return caml_call2(Stdlib_Printf[10], eprint, fmt);}
   function eprintlf(fmt){return caml_call2(Stdlib_Printf[10], eprintl, fmt);}
   function pipe(cloexec, in_buffer, out_buffer, param){
    var
     match = caml_call2(Lwt_unix[74], cloexec, 0),
     fd_w = match[2],
     fd_r = match[1],
     _bT_ = of_fd(out_buffer, 0, output, fd_w);
    return [0, of_fd(in_buffer, 0, input, fd_r), _bT_];
   }
   function open_file(buffer, flags, perm, mode, filename){
    if(flags)
     var l = flags[1], flags$0 = l;
    else
     var flags$0 = mode ? _q_ : _r_;
    if(perm) var p = perm[1], perm$0 = p; else var perm$0 = mode ? 438 : 0;
    function _bQ_(fd){
     var _bS_ = of_fd(buffer, 0, mode, fd);
     return caml_call1(Lwt[4], _bS_);
    }
    var _bR_ = caml_call3(Lwt_unix[24], filename, flags$0, perm$0);
    return caml_call2(Lwt[33][1], _bR_, _bQ_);
   }
   function with_file(buffer, flags, perm, mode, filename, f){
    function _bM_(ic){
     function _bO_(param){return close(ic);}
     function _bP_(param){return caml_call1(f, ic);}
     return caml_call2(Lwt[8], _bP_, _bO_);
    }
    var _bN_ = open_file(buffer, flags, perm, mode, filename);
    return caml_call2(Lwt[33][1], _bN_, _bM_);
   }
   var
    prng = [246, function(_bL_){return caml_call1(Stdlib_Random[15][2], 0);}];
   function temp_file_name(temp_dir, prefix, suffix){
    var _bI_ = caml_obj_tag(prng);
    a:
    {
     var _bH_ = 16777216;
     if(250 === _bI_)
      var _bJ_ = prng[1];
     else{
      if(246 !== _bI_ && 244 !== _bI_){var _bJ_ = prng; break a;}
      var _bJ_ = caml_call1(CamlinternalLazy[2], prng);
     }
    }
    var
     rnd = caml_call2(Stdlib_Random[15][5], _bJ_, _bH_),
     _bK_ = caml_call4(Stdlib_Printf[4], _s_, prefix, rnd, suffix);
    return caml_call2(Stdlib_Filename[4], temp_dir, _bK_);
   }
   function open_temp_file(buffer, flags, perm, temp_dir, prefix, opt, param){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = cst$0;
    if(flags)
     var flags$0 = flags[1], flags$1 = flags$0;
    else
     var flags$1 = _t_;
    if(temp_dir)
     var dirname = temp_dir[1], dir = dirname;
    else
     var dir = caml_call1(Stdlib_Filename[19], 0);
    if(prefix)
     var prefix$0 = prefix[1], prefix$1 = prefix$0;
    else
     var prefix$1 = cst_lwt_io_temp_file;
    function attempt(n){
     var fname = temp_file_name(dir, prefix$1, suffix);
     function _bD_(exn){
      if(exn[1] === Unix[1] && 1000 > n) return attempt(n + 1 | 0);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     function _bE_(param){
      function _bF_(chan){return caml_call1(Lwt[4], [0, fname, chan]);}
      var _bG_ = open_file(buffer, [0, flags$1], perm, 1, fname);
      return caml_call2(Lwt[33][1], _bG_, _bF_);
     }
     return caml_call2(Lwt[7], _bE_, _bD_);
    }
    return attempt(0);
   }
   function with_temp_file(buffer, flags, perm, temp_dir, prefix, suffix, f){
    function _bx_(param){
     var chan = param[2], fname = param[1];
     function _bz_(param){
      function _bB_(param){return caml_call1(Lwt_unix[51], fname);}
      var _bC_ = close(chan);
      return caml_call2(Lwt[33][1], _bC_, _bB_);
     }
     function _bA_(param){return caml_call1(f, [0, fname, chan]);}
     return caml_call2(Lwt[8], _bA_, _bz_);
    }
    var
     _by_ = open_temp_file(buffer, flags, perm, temp_dir, prefix, suffix, 0);
    return caml_call2(Lwt[33][1], _by_, _bx_);
   }
   function create_temp_dir(opt, _br_, _bq_, _bp_, param){
    if(opt) var sth = opt[1], perm = sth; else var perm = 493;
    if(_br_)
     var sth$0 = _br_[1], parent = sth$0;
    else
     var parent = caml_call1(Stdlib_Filename[19], 0);
    if(_bq_)
     var sth$1 = _bq_[1], prefix = sth$1;
    else
     var prefix = cst_lwt_io_temp_dir;
    if(_bp_) var sth$2 = _bp_[1], suffix = sth$2; else var suffix = cst$1;
    function attempt(n){
     var name = temp_file_name(parent, prefix, suffix);
     function _bs_(exn){
      if(exn[1] === Unix[1]){
       var _bw_ = exn[2];
       if(typeof _bw_ === "number" && 8 === _bw_ && 1000 > n)
        return attempt(n + 1 | 0);
      }
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     function _bt_(param){
      function _bu_(param){return caml_call1(Lwt[4], name);}
      var _bv_ = caml_call2(Lwt_unix[63], name, perm);
      return caml_call2(Lwt[33][1], _bv_, _bu_);
     }
     return caml_call2(Lwt[7], _bt_, _bs_);
    }
    return attempt(0);
   }
   function win32_unlink(fn){
    function _bc_(exn){
     if(exn[1] === Unix[1]){
      var _be_ = exn[2];
      if(typeof _be_ === "number" && 1 === _be_){
       var
        _bf_ = function(param){throw caml_maybe_attach_backtrace(exn, 0);},
        _bg_ =
          function(param){
           function _bh_(param){
            var st_perm = param[4];
            function _bj_(param){
             function _bl_(param){
              function _bn_(param){throw caml_maybe_attach_backtrace(exn, 0);}
              var _bo_ = caml_call2(Lwt_unix[54], fn, st_perm);
              return caml_call2(Lwt[33][1], _bo_, _bn_);
             }
             function _bm_(param){return caml_call1(Lwt_unix[51], fn);}
             return caml_call2(Lwt[7], _bm_, _bl_);
            }
            var _bk_ = caml_call2(Lwt_unix[54], fn, 438);
            return caml_call2(Lwt[33][1], _bk_, _bj_);
           }
           var _bi_ = caml_call1(Lwt_unix[45], fn);
           return caml_call2(Lwt[33][1], _bi_, _bh_);
          };
       return caml_call2(Lwt[7], _bg_, _bf_);
      }
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _bd_(param){return caml_call1(Lwt_unix[51], fn);}
    return caml_call2(Lwt[7], _bd_, _bc_);
   }
   var unlink = Stdlib_Sys[7] ? win32_unlink : Lwt_unix[51];
   function delete_recursively(directory){
    function _a6_(param){return caml_call1(Lwt_unix[64], directory);}
    var _a7_ = caml_call1(Lwt_unix[73], directory);
    function _a8_(entry){
     if
      (!
       caml_string_equal(entry, Stdlib_Filename[1])
       && ! caml_string_equal(entry, Stdlib_Filename[2])){
      var
       path = caml_call2(Stdlib_Filename[4], directory, entry),
       _a__ =
         function(param){
          var st_kind = param[3];
          if(1 === st_kind) return delete_recursively(path);
          a:
          if(4 === st_kind){
           if(! Stdlib_Sys[7] && ! Stdlib_Sys[8]) break a;
           var
            _ba_ =
              function(param){
               var st_kind = param[3];
               return 1 === st_kind
                       ? caml_call1(Lwt_unix[64], path)
                       : caml_call1(unlink, path);
              },
            _bb_ = caml_call1(Lwt_unix[44], path);
           return caml_call2(Lwt[33][1], _bb_, _ba_);
          }
          return caml_call1(unlink, path);
         },
       _a$_ = caml_call1(Lwt_unix[45], path);
      return caml_call2(Lwt[33][1], _a$_, _a__);
     }
     return Lwt[36];
    }
    var _a9_ = caml_call1(caml_call1(Lwt_stream[51], _a8_), _a7_);
    return caml_call2(Lwt[33][1], _a9_, _a6_);
   }
   function with_temp_dir(perm, parent, prefix, suffix, f){
    function _a2_(name){
     function _a4_(param){return delete_recursively(name);}
     function _a5_(param){return caml_call1(f, name);}
     return caml_call2(Lwt[8], _a5_, _a4_);
    }
    var _a3_ = create_temp_dir(perm, parent, prefix, suffix, 0);
    return caml_call2(Lwt[33][1], _a3_, _a2_);
   }
   function file_length(filename){
    function _a0_(stat){
     return 1 === stat[3]
             ? caml_call1(Lwt[5], [0, Unix[1], 14, cst_file_length, filename])
             : with_file(0, 0, 0, input, filename, length$0);
    }
    var _a1_ = caml_call1(Lwt_unix[44], filename);
    return caml_call2(Lwt[33][1], _a1_, _a0_);
   }
   function close_socket(fd){
    function _aV_(param){return caml_call1(Lwt_unix[25], fd);}
    function _aW_(param){
     function _aX_(exn){
      if(exn[1] === Unix[1]){
       var _aZ_ = exn[2];
       if(typeof _aZ_ === "number" && 59 === _aZ_) return Lwt[36];
      }
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     function _aY_(param){caml_call2(Lwt_unix[99], fd, 2); return Lwt[36];}
     return caml_call2(Lwt[7], _aY_, _aX_);
    }
    return caml_call2(Lwt[8], _aW_, _aV_);
   }
   function open_connection(fd, in_buffer, out_buffer, sockaddr){
    if(fd)
     var fd$0 = fd[1], fd$1 = fd$0;
    else
     var
      _aF_ = caml_call1(Unix[134], sockaddr),
      fd$1 = caml_call4(Lwt_unix[92], 0, _aF_, 0, 0);
    var close = [246, function(_aU_){return close_socket(fd$1);}];
    function _aD_(exn){
     function _aS_(param){throw caml_maybe_attach_backtrace(exn, 0);}
     var _aT_ = caml_call1(Lwt_unix[25], fd$1);
     return caml_call2(Lwt[33][1], _aT_, _aS_);
    }
    function _aE_(param){
     function _aG_(param){
      try{caml_call1(Lwt_unix[61], fd$1);}
      catch(_aR_){
       var _aI_ = caml_wrap_exception(_aR_);
       if(_aI_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_aI_, 0);
      }
      var
       _aJ_ = caml_call1(Lwt_bytes[24], fd$1),
       _aK_ = 0,
       _aL_ =
         make
          (out_buffer,
           [0,
            function(param){
             var _aQ_ = caml_obj_tag(close);
             if(250 === _aQ_) return close[1];
             if(246 !== _aQ_ && 244 !== _aQ_) return close;
             return caml_call1(CamlinternalLazy[2], close);
            }],
           _aK_,
           output,
           _aJ_),
       _aM_ = caml_call1(Lwt_bytes[23], fd$1),
       _aN_ = 0,
       _aO_ =
         [0,
          make
           (in_buffer,
            [0,
             function(param){
              var _aP_ = caml_obj_tag(close);
              if(250 === _aP_) return close[1];
              if(246 !== _aP_ && 244 !== _aP_) return close;
              return caml_call1(CamlinternalLazy[2], close);
             }],
            _aN_,
            input,
            _aM_),
          _aL_];
      return caml_call1(Lwt[4], _aO_);
     }
     var _aH_ = caml_call2(Lwt_unix[98], fd$1, sockaddr);
     return caml_call2(Lwt[33][1], _aH_, _aG_);
    }
    return caml_call2(Lwt[7], _aE_, _aD_);
   }
   function with_close_connection(f, param){
    var oc = param[2], ic = param[1];
    function close_if_not_closed(channel){
     return is_closed(channel) ? Lwt[36] : close(channel);
    }
    function _az_(param){
     var _aB_ = close_if_not_closed(oc), _aC_ = close_if_not_closed(ic);
     return caml_call2(Lwt[33][3], _aC_, _aB_);
    }
    function _aA_(param){return caml_call1(f, [0, ic, oc]);}
    return caml_call2(Lwt[8], _aA_, _az_);
   }
   function with_connection(fd, in_buffer, out_buffer, sockaddr, f){
    function _ax_(channels){return with_close_connection(f, channels);}
    var _ay_ = open_connection(fd, in_buffer, out_buffer, sockaddr);
    return caml_call2(Lwt[33][1], _ay_, _ax_);
   }
   function shutdown_server(server){
    var _av_ = server[1], _aw_ = caml_obj_tag(_av_);
    if(250 === _aw_) return _av_[1];
    if(246 !== _aw_ && 244 !== _aw_) return _av_;
    return caml_call1(CamlinternalLazy[2], _av_);
   }
   function shutdown_server_deprecated(server){
    function _au_(param){return shutdown_server(server);}
    return caml_call1(Lwt[11], _au_);
   }
   function establish_server_generic
   (bind_function,
    preexisting_socket_for_listeni,
    opt,
    listening_address,
    connection_handler_callback){
    if(opt)
     var sth = opt[1], backlog = sth;
    else
     var backlog = caml_call1(Lwt_unix[171], 0);
    if(preexisting_socket_for_listeni)
     var
      socket = preexisting_socket_for_listeni[1],
      listening_socket = socket;
    else
     var
      _ai_ = caml_call1(Unix[134], listening_address),
      listening_socket = caml_call4(Lwt_unix[92], 0, _ai_, 0, 0);
    caml_call3(Lwt_unix[111], listening_socket, 2, 1);
    var
     match = caml_call1(Lwt[1], 0),
     notify_should_stop = match[2],
     should_stop = match[1],
     match$0 = caml_call1(Lwt[1], 0),
     notify_listening_socket_closed = match$0[2],
     wait_until_listening_socket_cl = match$0[1];
    function accept_loop(param){
     function _aj_(e){
      if(e[1] === Unix[1]){
       var _at_ = e[2];
       if(typeof _at_ === "number" && 55 === _at_)
        return caml_call1(Lwt[4], -243866628);
      }
      throw caml_maybe_attach_backtrace(e, 0);
     }
     function _ak_(param){
      function _ar_(x){return [0, 566851975, x];}
      var _as_ = caml_call2(Lwt_unix[96], 0, listening_socket);
      return caml_call2(Lwt[33][2], _as_, _ar_);
     }
     var try_to_accept = caml_call2(Lwt[7], _ak_, _aj_);
     function _al_(param){
      if(typeof param === "number"){
       if(121856686 > param) return accept_loop(0);
       var
        _an_ =
          function(param){
           a:
           if(0 === listening_address[0]){
            var path = listening_address[1];
            if
             (runtime.caml_string_notequal(path, cst$2)
              && 0 !== runtime.caml_string_get(path, 0)){caml_call1(Unix[45], path); break a;}
           }
           caml_call2(Lwt[2], notify_listening_socket_closed, 0);
           return Lwt[36];
          },
        _ao_ = caml_call1(Lwt_unix[25], listening_socket);
       return caml_call2(Lwt[33][1], _ao_, _an_);
      }
      var
       match = param[2],
       client_address = match[2],
       client_socket = match[1];
      try{caml_call1(Lwt_unix[61], client_socket);}
      catch(_aq_){
       var _ap_ = caml_wrap_exception(_aq_);
       if(_ap_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_ap_, 0);
      }
      caml_call2(connection_handler_callback, client_address, client_socket);
      return accept_loop(0);
     }
     var _am_ = caml_call1(Lwt[16], [0, try_to_accept, [0, should_stop, 0]]);
     return caml_call2(Lwt[33][1], _am_, _al_);
    }
    var
     server =
       [0,
        [246,
         function(param){
          caml_call2(Lwt[2], notify_should_stop, 121856686);
          return wait_until_listening_socket_cl;
         }]];
    function _ag_(param){
     caml_call2(Lwt_unix[95], listening_socket, backlog);
     caml_call1(Lwt[11], accept_loop);
     return Lwt[36];
    }
    var
     _ah_ = caml_call2(bind_function, listening_socket, listening_address),
     server_has_started = caml_call2(Lwt[33][1], _ah_, _ag_);
    return [0, server, server_has_started];
   }
   function establish_server_with_client_s
   (server_fd, backlog, opt, sockaddr, f){
    if(opt) var sth = opt[1], no_close = sth; else var no_close = 0;
    function handler(client_address, client_socket){
     function _$_(param){
      function _aa_(param){
       if(no_close) return Lwt[36];
       if(1 === caml_call1(Lwt_unix[9], client_socket)) return Lwt[36];
       function _ae_(exn){caml_call1(Lwt[12][1], exn); return Lwt[36];}
       function _af_(param){return close_socket(client_socket);}
       return caml_call2(Lwt[7], _af_, _ae_);
      }
      function _ab_(exn){caml_call1(Lwt[12][1], exn); return Lwt[36];}
      function _ac_(param){
       return caml_call2(f, client_address, client_socket);
      }
      var _ad_ = caml_call2(Lwt[7], _ac_, _ab_);
      return caml_call2(Lwt[33][1], _ad_, _aa_);
     }
     return caml_call1(Lwt[11], _$_);
    }
    var
     match =
       establish_server_generic
        (Lwt_unix[94], server_fd, backlog, sockaddr, handler),
     server_started = match[2],
     server = match[1];
    function ___(param){return caml_call1(Lwt[4], server);}
    return caml_call2(Lwt[33][1], server_started, ___);
   }
   function establish_server_with_client_a
   (bind_function, fd, opt, backlog, _L_, sockaddr, handler){
    if(opt)
     var sth = opt[1], buffer_size = sth;
    else
     var buffer_size = default_buffer_size[1];
    if(_L_) var sth$0 = _L_[1], no_close = sth$0; else var no_close = 0;
    function best_effort_close(channel){
     if(is_closed(channel)) return Lwt[36];
     function _Y_(exn){caml_call1(Lwt[12][1], exn); return Lwt[36];}
     function _Z_(param){return close(channel);}
     return caml_call2(Lwt[7], _Z_, _Y_);
    }
    function handler$0(client_address, client_socket){
     function _M_(param){
      var
       close = [246, function(_X_){return close_socket(client_socket);}],
       _N_ =
         [0,
          function(param){
           var _W_ = caml_obj_tag(close);
           if(250 === _W_) return close[1];
           if(246 !== _W_ && 244 !== _W_) return close;
           return caml_call1(CamlinternalLazy[2], close);
          }],
       input_channel =
         of_fd
          ([0, caml_call1(Lwt_bytes[1], buffer_size)],
           _N_,
           input,
           client_socket),
       _O_ =
         [0,
          function(param){
           var _V_ = caml_obj_tag(close);
           if(250 === _V_) return close[1];
           if(246 !== _V_ && 244 !== _V_) return close;
           return caml_call1(CamlinternalLazy[2], close);
          }],
       output_channel =
         of_fd
          ([0, caml_call1(Lwt_bytes[1], buffer_size)],
           _O_,
           output,
           client_socket);
      function _P_(param){
       if(no_close) return Lwt[36];
       function _T_(param){return best_effort_close(output_channel);}
       var _U_ = best_effort_close(input_channel);
       return caml_call2(Lwt[33][1], _U_, _T_);
      }
      function _Q_(exn){caml_call1(Lwt[12][1], exn); return Lwt[36];}
      function _R_(param){
       return caml_call2
               (handler, client_address, [0, input_channel, output_channel]);
      }
      var _S_ = caml_call2(Lwt[7], _R_, _Q_);
      return caml_call2(Lwt[33][1], _S_, _P_);
     }
     return caml_call1(Lwt[11], _M_);
    }
    return establish_server_generic
            (bind_function, fd, backlog, sockaddr, handler$0);
   }
   function establish_server_with_client_a$0
   (fd, buffer_size, backlog, no_close, sockaddr, handler){
    var
     match =
       establish_server_with_client_a
        (Lwt_unix[94], fd, buffer_size, backlog, no_close, sockaddr, handler),
     server_started = match[2],
     server = match[1];
    function _K_(param){return caml_call1(Lwt[4], server);}
    return caml_call2(Lwt[33][1], server_started, _K_);
   }
   function establish_server(fd, buffer_size, backlog, no_close, sockaddr, f){
    function f$0(addr, c){return caml_call1(f, c);}
    return establish_server_with_client_a$0
            (fd, buffer_size, backlog, no_close, sockaddr, f$0);
   }
   function establish_server_deprecated(fd, buffer_size, backlog, sockaddr, f){
    function blocking_bind(fd, addr){
     var _J_ = caml_call2(Lwt_unix[168][1], fd, addr);
     return caml_call1(Lwt[4], _J_);
    }
    function f$0(addr, c){caml_call1(f, c); return Lwt[36];}
    var
     match =
       establish_server_with_client_a
        (blocking_bind, fd, buffer_size, backlog, _u_, sockaddr, f$0),
     server_started = match[2],
     server = match[1];
    caml_call1(Lwt[77], server_started);
    return server;
   }
   function ignore_close(ch){close(ch); return 0;}
   function make_stream(f, lazy_ic){
    var
     lazy_ic$0 =
       [246,
        function(_F_){
         function _G_(ic){
          caml_call2(Stdlib_Gc[3], ignore_close, ic);
          return caml_call1(Lwt[4], ic);
         }
         var _H_ = caml_obj_tag(lazy_ic);
         a:
         if(250 === _H_)
          var _I_ = lazy_ic[1];
         else{
          if(246 !== _H_ && 244 !== _H_){var _I_ = lazy_ic; break a;}
          var _I_ = caml_call1(CamlinternalLazy[2], lazy_ic);
         }
         return caml_call2(Lwt[33][1], _I_, _G_);
        }];
    function _x_(param){
     function _y_(ic){
      function _B_(x){
       if(0 !== x) return caml_call1(Lwt[4], x);
       function _D_(param){return caml_call1(Lwt[4], x);}
       var _E_ = close(ic);
       return caml_call2(Lwt[33][1], _E_, _D_);
      }
      var _C_ = caml_call1(f, ic);
      return caml_call2(Lwt[33][1], _C_, _B_);
     }
     var _z_ = caml_obj_tag(lazy_ic$0);
     a:
     if(250 === _z_)
      var _A_ = lazy_ic$0[1];
     else{
      if(246 !== _z_ && 244 !== _z_){var _A_ = lazy_ic$0; break a;}
      var _A_ = caml_call1(CamlinternalLazy[2], lazy_ic$0);
     }
     return caml_call2(Lwt[33][1], _A_, _y_);
    }
    return caml_call1(Lwt_stream[1], _x_);
   }
   function lines_of_file(filename){
    return make_stream
            (read_line_opt$0,
             [246, function(_w_){return open_file(0, 0, 0, input, filename);}]);
   }
   function lines_to_file(filename, lines){
    return with_file
            (0,
             0,
             0,
             output,
             filename,
             function(oc){return write_lines(oc, lines);});
   }
   function chars_of_file(filename){
    return make_stream
            (read_char_opt$0,
             [246, function(_v_){return open_file(0, 0, 0, input, filename);}]);
   }
   function chars_to_file(filename, chars){
    return with_file
            (0,
             0,
             0,
             output,
             filename,
             function(oc){return write_chars(oc, chars);});
   }
   function hexdump_stream(oc, stream){
    return write_lines(oc, caml_call1(Lwt_stream[63], stream));
   }
   function hexdump(oc, buf){
    return hexdump_stream(oc, caml_call1(Lwt_stream[14], buf));
   }
   function set_default_buffer_size(size){
    check_buffer_size(cst_set_default_buffer_size, size);
    default_buffer_size[1] = size;
    return 0;
   }
   function default_buffer_size$0(param){return default_buffer_size[1];}
   var
    Versioned =
      [0,
       establish_server_deprecated,
       establish_server,
       shutdown_server_deprecated,
       shutdown_server],
    Lwt_io =
      [0,
       Channel_closed,
       input,
       output,
       mode,
       stdin,
       stdout,
       stderr,
       zero,
       null$0,
       pipe,
       make,
       of_bytes,
       of_fd,
       of_unix_fd,
       close,
       abort,
       atomic,
       file_length,
       buffered,
       flush,
       flush_all,
       buffer_size,
       resize_buffer,
       is_busy,
       is_closed,
       position,
       set_position,
       length$0,
       read_char$0,
       read_char_opt$0,
       read_chars,
       read_line$0,
       read_line_opt$0,
       read_lines,
       read,
       read_into,
       read_into_exactly,
       read_into_bigstring,
       read_into_exactly_bigstring,
       read_value$0,
       write_char$0,
       write_chars,
       write$0,
       write_line,
       write_lines,
       write_from$0,
       write_from_bigstring,
       write_from_string,
       write_from_exactly$0,
       write_from_exactly_bigstring,
       write_from_string_exactly,
       write_value,
       fprint,
       fprintl,
       fprintf,
       fprintlf,
       print,
       printl,
       printf,
       printlf,
       eprint,
       eprintl,
       eprintf,
       eprintlf,
       hexdump_stream,
       hexdump,
       open_file,
       with_file,
       open_temp_file,
       with_temp_file,
       create_temp_dir,
       with_temp_dir,
       delete_recursively,
       open_connection,
       with_connection,
       with_close_connection,
       establish_server_with_client_s,
       establish_server_with_client_a$0,
       shutdown_server,
       lines_of_file,
       lines_to_file,
       chars_of_file,
       chars_to_file,
       [0,
        LE[2],
        LE[3],
        LE[4],
        LE[5],
        LE[6],
        LE[7],
        LE[8],
        LE[9],
        LE[10],
        LE[11],
        LE[12],
        LE[13]],
       [0,
        BE[2],
        BE[3],
        BE[4],
        BE[5],
        BE[6],
        BE[7],
        BE[8],
        BE[9],
        BE[10],
        BE[11],
        BE[12],
        BE[13]],
       read_int,
       read_int16,
       read_int32,
       read_int64,
       read_float32,
       read_float64,
       write_int,
       write_int16,
       write_int32,
       write_int64,
       write_float32,
       write_float64,
       system_byte_order,
       block,
       direct_access,
       default_buffer_size$0,
       set_default_buffer_size,
       establish_server,
       Versioned];
   runtime.caml_register_global(81, Lwt_io, "Lwt_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_process
//# unitInfo: Requires: CamlinternalOO, Lwt, Lwt_io, Lwt_stream, Lwt_unix, Stdlib, Stdlib__Array, Stdlib__Bytes, Stdlib__Filename, Stdlib__Gc, Stdlib__List, Stdlib__String, Stdlib__Sys, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$14 = "",
    cst_close = "close",
    cst_kill = "kill",
    cst_pid = "pid",
    cst_rusage = "rusage",
    cst_state = "state",
    cst_status = "status",
    cst_stderr = "stderr",
    cst_stdin = "stdin",
    cst_stdout = "stdout",
    cst_terminate = "terminate",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$10 = cst$14,
    cst$11 = cst$14,
    cst$12 = cst$14,
    cst$8 = cst$14,
    cst$9 = cst$14,
    cst$7 = cst$14,
    cst$6 = cst$14,
    cst$2 = cst$14,
    cst$3 = cst$14,
    cst$4 = cst$14,
    cst$5 = cst$14,
    cst$1 = " ",
    cst$13 = cst$14,
    cst = "\0",
    cst$0 = cst$14,
    _g_ =
      [0,
       cst_terminate,
       cst_status,
       cst_state,
       cst_rusage,
       cst_pid,
       cst_kill,
       cst_close],
    _i_ = [0, "closed"],
    _k_ =
      [0,
       cst_close,
       cst_kill,
       cst_pid,
       cst_rusage,
       cst_state,
       cst_status,
       cst_terminate],
    shared =
      [0,
       cst_terminate,
       cst_stdout,
       cst_status,
       cst_state,
       cst_rusage,
       cst_pid,
       cst_kill,
       cst_close],
    Lwt_io = global_data.Lwt_io,
    Lwt = global_data.Lwt,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Unix = global_data.Unix,
    Stdlib = global_data.Stdlib,
    Lwt_unix = global_data.Lwt_unix,
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Filename = global_data.Stdlib__Filename,
    _E_ = [0, 1],
    _F_ = [0, 1],
    _G_ = [0, 1],
    _B_ = [0, 1],
    _C_ = [0, 1],
    _z_ = [0, 1],
    _x_ = [0, 1],
    _o_ = [0, 2, [0, 14, 0]],
    cst_dev_null = "/dev/null",
    _p_ = [0, 0],
    _q_ = [0, 0],
    _r_ = [0, 0],
    _n_ = [254, 0., 0.],
    _m_ = [0, "src/unix/lwt_process.cppo.ml", 97, 56],
    _l_ = [0, 2, [0, 14, 0]],
    cst_nul = "nul",
    cst_c$0 = "-c",
    cst_bin_sh = "/bin/sh",
    cst_c = "/c",
    cst_cmd_exe = "cmd.exe",
    _a_ =
      [0,
       cst_kill,
       cst_close,
       cst_terminate,
       cst_pid,
       cst_state,
       cst_status,
       cst_rusage],
    _b_ =
      [0,
       cst_terminate,
       cst_stdin,
       cst_status,
       cst_state,
       cst_rusage,
       cst_pid,
       cst_kill,
       cst_close],
    _c_ =
      [0,
       cst_kill,
       cst_close,
       cst_terminate,
       cst_pid,
       cst_state,
       cst_stdin,
       cst_status,
       cst_stdout,
       cst_rusage],
    _d_ =
      [0,
       cst_kill,
       cst_close,
       cst_terminate,
       cst_pid,
       cst_state,
       cst_stdin,
       cst_status,
       cst_rusage],
    _e_ =
      [0,
       cst_terminate,
       cst_stdout,
       cst_stdin,
       cst_status,
       cst_state,
       cst_rusage,
       cst_pid,
       cst_kill,
       cst_close],
    _f_ =
      [0,
       cst_terminate,
       cst_stdout,
       cst_stdin,
       cst_stderr,
       cst_status,
       cst_state,
       cst_rusage,
       cst_pid,
       cst_kill,
       cst_close],
    _h_ =
      [0,
       cst_kill,
       cst_close,
       cst_terminate,
       cst_pid,
       cst_state,
       cst_status,
       cst_stdout,
       cst_rusage],
    _j_ =
      [0,
       cst_kill,
       cst_close,
       cst_terminate,
       cst_pid,
       cst_state,
       cst_stdin,
       cst_status,
       cst_stderr,
       cst_stdout,
       cst_rusage],
    shell =
      Stdlib_Sys[7]
       ? function
        (cmd){
         return [0,
                 cst$0,
                 [0, cst_cmd_exe, cst_c, caml_call2(Stdlib[28], cst, cmd)]];
        }
       : function(cmd){return [0, cst$13, [0, cst_bin_sh, cst_c$0, cmd]];};
   function win32_get_fd(fd, redirection){
    if(typeof redirection === "number")
     return -611285096 === redirection
             ? 0
             : 836762789
               <= redirection
               ? [0, fd]
               : [0, caml_call3(Unix[24], cst_nul, _l_, 438)];
    if(177537266 <= redirection[1]){
     var fd$0 = redirection[2];
     return [0, fd$0];
    }
    var fd$1 = redirection[2];
    return [0, fd$1];
   }
   function win32_quote(arg){
    if
     (0 < caml_ml_string_length(arg) && 0 === runtime.caml_string_get(arg, 0))
     return caml_call3
             (Stdlib_String[16], arg, 1, caml_ml_string_length(arg) - 1 | 0);
    return caml_call1(Stdlib_Filename[21], arg);
   }
   function win32_spawn(cwd, opt, _ch_, _cg_, param, env){
    var args = param[2], prog = param[1];
    if(opt) var sth = opt[1], stdin = sth; else var stdin = 836762789;
    if(_ch_) var sth$0 = _ch_[1], stdout = sth$0; else var stdout = 836762789;
    if(_cg_) var sth$1 = _cg_[1], stderr = sth$1; else var stderr = 836762789;
    var
     _ci_ = caml_call1(Stdlib_Array[9], args),
     _cj_ = caml_call2(Stdlib_List[20], win32_quote, _ci_),
     cmdline = caml_call2(Stdlib_String[7], cst$1, _cj_);
    if(env){
     var
      env$0 = env[1],
      _ck_ = 1,
      _cl_ =
        function(len, str){
         return (caml_ml_string_length(str) + len | 0) + 1 | 0;
        },
      len = caml_call3(Stdlib_Array[17], _cl_, _ck_, env$0),
      res = runtime.caml_create_bytes(len),
      _cm_ = 0,
      _cn_ =
        function(ofs, str){
         var len = caml_ml_string_length(str);
         caml_call5(Stdlib_String[6], str, 0, res, ofs, len);
         caml_bytes_set(res, ofs + len | 0, 0);
         return (ofs + len | 0) + 1 | 0;
        },
      ofs = caml_call3(Stdlib_Array[17], _cn_, _cm_, env$0);
     caml_bytes_set(res, ofs, 0);
     var env$1 = [0, caml_call1(Stdlib_Bytes[44], res)];
    }
    else
     var env$1 = 0;
    var
     stdin_fd = win32_get_fd(Unix[21], stdin),
     stdout_fd = win32_get_fd(Unix[22], stdout),
     stderr_fd = win32_get_fd(Unix[23], stderr),
     _co_ = [0, stdin_fd, stdout_fd, stderr_fd],
     _cp_ = caml_string_equal(prog, cst$14) ? 0 : [0, prog],
     proc =
       runtime.lwt_process_create_process(_cp_, cmdline, env$1, cwd, _co_);
    function close(fd$0, fd){
     a:
     {
      if(typeof fd$0 === "number"){
       if(-1013286767 === fd$0) break a;
      }
      else if(177537266 === fd$0[1]) break a;
      return;
     }
     if(! fd) throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
     var fd$1 = fd[1];
     return caml_call1(Unix[25], fd$1);
    }
    close(stdin, stdin_fd);
    close(stdout, stdout_fd);
    close(stderr, stderr_fd);
    return proc;
   }
   function win32_waitproc(proc){
    function _cd_(code){
     return caml_call1(Lwt[4], [0, proc[1], [0, code], _n_]);
    }
    var
     _ce_ = runtime.lwt_process_wait_job(proc[2]),
     _cf_ = caml_call2(Lwt_unix[151], 0, _ce_);
    return caml_call2(Lwt[33][1], _cf_, _cd_);
   }
   function win32_terminate(proc){
    return runtime.lwt_process_terminate_process(proc[2], 1);
   }
   function unix_redirect(fd, redirection){
    if(typeof redirection === "number"){
     if(-611285096 === redirection) return caml_call1(Unix[25], fd);
     if(836762789 <= redirection) return;
     var dev_null = caml_call3(Unix[24], cst_dev_null, _o_, 438);
     caml_call3(Unix[56], _p_, dev_null, fd);
     return caml_call1(Unix[25], dev_null);
    }
    if(177537266 <= redirection[1]){
     var fd$0 = redirection[2];
     caml_call3(Unix[56], _q_, fd$0, fd);
     return caml_call1(Unix[25], fd$0);
    }
    var fd$1 = redirection[2];
    return caml_call3(Unix[56], _r_, fd$1, fd);
   }
   function unix_spawn(cwd, opt, _ca_, _b$_, param, env){
    var args = param[2], prog = param[1];
    if(opt) var sth = opt[1], stdin = sth; else var stdin = 836762789;
    if(_ca_) var sth$0 = _ca_[1], stdout = sth$0; else var stdout = 836762789;
    if(_b$_) var sth$1 = _b$_[1], stderr = sth$1; else var stderr = 836762789;
    a:
    {
     if(caml_string_equal(prog, cst$14) && 0 < args.length - 1){
      var prog$0 = runtime.caml_check_bound(args, 0)[1];
      break a;
     }
     var prog$0 = prog;
    }
    var id = caml_call1(Lwt_unix[15], 0);
    if(0 !== id){
     var
      close =
        function(param){
         if(typeof param !== "number" && 177537266 === param[1]){var fd = param[2]; return caml_call1(Unix[25], fd);}
         return;
        };
     close(stdin);
     close(stdout);
     close(stderr);
     return [0, id, Unix[21]];
    }
    unix_redirect(Unix[21], stdin);
    unix_redirect(Unix[22], stdout);
    unix_redirect(Unix[23], stderr);
    try{
     if(cwd){var dir = cwd[1]; runtime.caml_sys_chdir(dir);}
     if(env)
      var env$0 = env[1], _cb_ = caml_call3(Unix[12], prog$0, args, env$0);
     else
      var _cb_ = caml_call2(Unix[11], prog$0, args);
     return _cb_;
    }
    catch(_cc_){return runtime.caml_unix_exit(127);}
   }
   function unix_waitproc(proc){return caml_call2(Lwt_unix[18], 0, proc[1]);}
   function unix_terminate(proc){
    return caml_call2(Unix[95], proc[1], Stdlib_Sys[22]);
   }
   var
    win32_spawn$0 = Stdlib_Sys[7] ? win32_spawn : unix_spawn,
    win32_waitproc$0 = Stdlib_Sys[7] ? win32_waitproc : unix_waitproc,
    terminate = Stdlib_Sys[7] ? win32_terminate : unix_terminate;
   function status(param){var status = param[2]; return status;}
   function rusage(param){var rusage = param[3]; return rusage;}
   var common = [];
   function _s_(chan){caml_call1(Lwt_io[15], chan); return 0;}
   var _t_ = 0, _u_ = 0;
   runtime.caml_update_dummy
    (common,
     [0,
      0,
      function(_bs_){
       var
        _bt_ = caml_call2(CamlinternalOO[3], _bs_, cst$2),
        _bu_ = caml_call2(CamlinternalOO[3], _bs_, cst$3),
        _bv_ = caml_call2(CamlinternalOO[3], _bs_, cst$4),
        _bw_ = caml_call2(CamlinternalOO[3], _bs_, cst$5),
        _bx_ = caml_call3(CamlinternalOO[4], _bs_, _g_, _i_),
        _by_ = _bx_[1],
        _bz_ = _bx_[2],
        _bE_ = _bx_[7],
        _bF_ = _bx_[8],
        _bA_ = _bx_[3],
        _bB_ = _bx_[4],
        _bC_ = _bx_[5],
        _bD_ = _bx_[6];
       function _bG_(self_1){
        var _b__ = caml_call1(Lwt[25], self_1[1 + _bw_]);
        return caml_call2(Lwt[33][2], _b__, rusage);
       }
       function _bH_(self_1){
        var _b9_ = caml_call1(Lwt[25], self_1[1 + _bw_]);
        return caml_call2(Lwt[33][2], _b9_, status);
       }
       function _bI_(self_1){
        if(self_1[1 + _bF_]) return caml_call1(self_1[1][1 + _bz_], self_1);
        self_1[1 + _bF_] = 1;
        function _b5_(param){return caml_call1(self_1[1][1 + _bz_], self_1);}
        var
         _b6_ = caml_call2(Stdlib_List[20], Lwt_io[15], self_1[1 + _bv_]),
         _b7_ = caml_call1(Lwt[14], _b6_),
         _b8_ = caml_call1(Lwt[25], _b7_);
        return caml_call2(Lwt[33][1], _b8_, _b5_);
       }
       function _bJ_(self_1){
        var _b4_ = 0 === caml_call1(Lwt[48], self_1[1 + _bw_]) ? 1 : 0;
        return _b4_ ? terminate(self_1[1 + _bu_]) : _b4_;
       }
       function _bK_(self_1, signum){
        var _b3_ = 0 === caml_call1(Lwt[48], self_1[1 + _bw_]) ? 1 : 0;
        return _b3_ ? caml_call2(Unix[95], self_1[1 + _bu_][1], signum) : _b3_;
       }
       function _bL_(self_1){
        var match = caml_call1(Lwt[79], self_1[1 + _bw_]);
        if(! match) return 0;
        var status = match[1][2];
        return [0, status];
       }
       var
        _bM_ =
          [0,
           _bC_,
           function(self_1){return self_1[1 + _bu_][1];},
           _bA_,
           _bL_,
           _bD_,
           _bK_,
           _by_,
           _bJ_,
           _bE_,
           _bI_,
           _bz_,
           _bH_,
           _bB_,
           _bG_];
       caml_call2(CamlinternalOO[11], _bs_, _bM_);
       function _bN_(self_1){
        var _bQ_ = self_1[1 + _bv_], _bR_ = caml_call1(Stdlib_Gc[3], _s_);
        caml_call2(Stdlib_List[18], _bR_, _bQ_);
        var match = self_1[1 + _bt_];
        if(! match) return 0;
        var dt = match[1];
        function _bS_(param){return Lwt[36];}
        function _bT_(param){
         if(param) return Lwt[36];
         caml_call1(self_1[1][1 + _by_], self_1);
         function _b1_(param){return Lwt[36];}
         var _b2_ = caml_call1(self_1[1][1 + _bE_], self_1);
         return caml_call2(Lwt[33][1], _b2_, _b1_);
        }
        function _bU_(param){
         var _bV_ = 0;
         function _bW_(param){return Lwt[39];}
         var _bX_ = [0, caml_call2(Lwt[33][1], self_1[1 + _bw_], _bW_), _bV_];
         function _bY_(param){return Lwt[40];}
         var
          _bZ_ = caml_call1(Lwt_unix[2], dt),
          _b0_ = [0, caml_call2(Lwt[33][1], _bZ_, _bY_), _bX_];
         return caml_call1(Lwt[17], _b0_);
        }
        caml_call3(Lwt[9], _bU_, _bT_, _bS_);
        return 0;
       }
       caml_call2(CamlinternalOO[14], _bs_, _bN_);
       return function(env, self, timeout, proc, channels){
        var
         _bO_ = win32_waitproc$0(proc),
         _bP_ = caml_call2(CamlinternalOO[24], self, _bs_);
        _bP_[1 + _bw_] = _bO_;
        _bP_[1 + _bv_] = channels;
        _bP_[1 + _bu_] = proc;
        _bP_[1 + _bt_] = timeout;
        _bP_[1 + _bF_] = 0;
        return caml_call3(CamlinternalOO[26], self, _bP_, _bs_);};
      },
      _u_,
      _t_]);
   function _v_(_bn_){
    caml_call2(CamlinternalOO[8], _bn_, _g_);
    var
     _bo_ = caml_call6(CamlinternalOO[18], _bn_, _i_, 0, _k_, common, 1)[1];
    return function(env, self, timeout, _bp_, cwd, stdin, stdout, stderr, cmd){
     var
      _bq_ = win32_spawn$0(cwd, stdin, stdout, stderr, cmd, _bp_),
      _br_ = caml_call2(CamlinternalOO[24], self, _bn_);
     caml_call4(_bo_, _br_, timeout, _bq_, 0);
     return caml_call3(CamlinternalOO[26], self, _br_, _bn_);};
   }
   var process_none = caml_call2(CamlinternalOO[19], _a_, _v_);
   function _w_(_bf_){
    var
     _bg_ = caml_call2(CamlinternalOO[3], _bf_, cst$6),
     _bh_ = caml_call2(CamlinternalOO[8], _bf_, shared)[2],
     _bi_ = caml_call6(CamlinternalOO[18], _bf_, _i_, 0, _k_, common, 1)[1];
    function _bj_(self_3){return self_3[1 + _bg_];}
    caml_call3(CamlinternalOO[10], _bf_, _bh_, _bj_);
    return function(env, self, timeout, _bk_, cwd, stdin, stderr, cmd){
     var
      match = caml_call2(Lwt_unix[75], _x_, 0),
      stdout_w = match[2],
      stdout_r = match[1],
      proc =
        win32_spawn$0
         (cwd, stdin, [0, [0, 177537266, stdout_w]], stderr, cmd, _bk_),
      _bl_ = caml_call4(Lwt_io[13], 0, 0, Lwt_io[2], stdout_r),
      _bm_ = caml_call2(CamlinternalOO[24], self, _bf_);
     _bm_[1 + _bg_] = _bl_;
     caml_call4(_bi_, _bm_, timeout, proc, [0, _bl_, 0]);
     return caml_call3(CamlinternalOO[26], self, _bm_, _bf_);};
   }
   var process_in = caml_call2(CamlinternalOO[19], _h_, _w_);
   function _y_(_a9_){
    var
     _a__ = caml_call2(CamlinternalOO[3], _a9_, cst$7),
     _a$_ = caml_call2(CamlinternalOO[8], _a9_, _b_)[2],
     _ba_ = caml_call6(CamlinternalOO[18], _a9_, _i_, 0, _k_, common, 1)[1];
    function _bb_(self_4){return self_4[1 + _a__];}
    caml_call3(CamlinternalOO[10], _a9_, _a$_, _bb_);
    return function(env, self, timeout, _bc_, cwd, stdout, stderr, cmd){
     var
      match = caml_call2(Lwt_unix[76], _z_, 0),
      stdin_w = match[2],
      stdin_r = match[1],
      proc =
        win32_spawn$0
         (cwd, [0, [0, 177537266, stdin_r]], stdout, stderr, cmd, _bc_),
      _bd_ = caml_call4(Lwt_io[13], 0, 0, Lwt_io[3], stdin_w),
      _be_ = caml_call2(CamlinternalOO[24], self, _a9_);
     _be_[1 + _a__] = _bd_;
     caml_call4(_ba_, _be_, timeout, proc, [0, _bd_, 0]);
     return caml_call3(CamlinternalOO[26], self, _be_, _a9_);};
   }
   var process_out = caml_call2(CamlinternalOO[19], _d_, _y_);
   function _A_(_aX_){
    var
     _aY_ = caml_call2(CamlinternalOO[3], _aX_, cst$8),
     _aZ_ = caml_call2(CamlinternalOO[3], _aX_, cst$9),
     _a0_ = caml_call2(CamlinternalOO[8], _aX_, _e_),
     _a1_ = _a0_[2],
     _a2_ = _a0_[3],
     _a3_ = caml_call6(CamlinternalOO[18], _aX_, _i_, 0, _k_, common, 1)[1];
    function _a4_(self_5){return self_5[1 + _aZ_];}
    var
     _a5_ = [0, _a2_, function(self_5){return self_5[1 + _aY_];}, _a1_, _a4_];
    caml_call2(CamlinternalOO[11], _aX_, _a5_);
    return function(env, self, timeout, _a6_, cwd, stderr, cmd){
     var
      match = caml_call2(Lwt_unix[76], _B_, 0),
      stdin_w = match[2],
      stdin_r = match[1],
      match$0 = caml_call2(Lwt_unix[75], _C_, 0),
      stdout_w = match$0[2],
      stdout_r = match$0[1],
      proc =
        win32_spawn$0
         (cwd,
          [0, [0, 177537266, stdin_r]],
          [0, [0, 177537266, stdout_w]],
          stderr,
          cmd,
          _a6_),
      stdin = caml_call4(Lwt_io[13], 0, 0, Lwt_io[3], stdin_w),
      _a7_ = caml_call4(Lwt_io[13], 0, 0, Lwt_io[2], stdout_r),
      _a8_ = caml_call2(CamlinternalOO[24], self, _aX_);
     _a8_[1 + _aY_] = stdin;
     _a8_[1 + _aZ_] = _a7_;
     caml_call4(_a3_, _a8_, timeout, proc, [0, stdin, [0, _a7_, 0]]);
     return caml_call3(CamlinternalOO[26], self, _a8_, _aX_);};
   }
   var process = caml_call2(CamlinternalOO[19], _c_, _A_);
   function _D_(_aI_){
    var
     _aJ_ = caml_call2(CamlinternalOO[3], _aI_, cst$10),
     _aK_ = caml_call2(CamlinternalOO[3], _aI_, cst$11),
     _aL_ = caml_call2(CamlinternalOO[3], _aI_, cst$12),
     _aM_ = caml_call2(CamlinternalOO[8], _aI_, _f_),
     _aN_ = _aM_[2],
     _aO_ = _aM_[3],
     _aP_ = _aM_[4],
     _aQ_ = caml_call6(CamlinternalOO[18], _aI_, _i_, 0, _k_, common, 1)[1];
    function _aR_(self_6){return self_6[1 + _aL_];}
    function _aS_(self_6){return self_6[1 + _aK_];}
    var
     _aT_ =
       [0,
        _aO_,
        function(self_6){return self_6[1 + _aJ_];},
        _aN_,
        _aS_,
        _aP_,
        _aR_];
    caml_call2(CamlinternalOO[11], _aI_, _aT_);
    return function(env, self, timeout, _aU_, cwd, cmd){
     var
      match = caml_call2(Lwt_unix[76], _E_, 0),
      stdin_w = match[2],
      stdin_r = match[1],
      match$0 = caml_call2(Lwt_unix[75], _F_, 0),
      stdout_w = match$0[2],
      stdout_r = match$0[1],
      match$1 = caml_call2(Lwt_unix[75], _G_, 0),
      stderr_w = match$1[2],
      stderr_r = match$1[1],
      proc =
        win32_spawn$0
         (cwd,
          [0, [0, 177537266, stdin_r]],
          [0, [0, 177537266, stdout_w]],
          [0, [0, 177537266, stderr_w]],
          cmd,
          _aU_),
      stdin = caml_call4(Lwt_io[13], 0, 0, Lwt_io[3], stdin_w),
      stdout = caml_call4(Lwt_io[13], 0, 0, Lwt_io[2], stdout_r),
      _aV_ = caml_call4(Lwt_io[13], 0, 0, Lwt_io[2], stderr_r),
      _aW_ = caml_call2(CamlinternalOO[24], self, _aI_);
     _aW_[1 + _aJ_] = stdin;
     _aW_[1 + _aK_] = stdout;
     _aW_[1 + _aL_] = _aV_;
     caml_call4
      (_aQ_, _aW_, timeout, proc, [0, stdin, [0, stdout, [0, _aV_, 0]]]);
     return caml_call3(CamlinternalOO[26], self, _aW_, _aI_);};
   }
   var process_full = caml_call2(CamlinternalOO[19], _j_, _D_);
   function open_process_none(timeout, env, cwd, stdin, stdout, stderr, cmd){
    return caml_call8
            (process_none[1],
             0,
             timeout,
             env,
             cwd,
             stdin,
             stdout,
             stderr,
             cmd);
   }
   function open_process_in(timeout, env, cwd, stdin, stderr, cmd){
    return caml_call7(process_in[1], 0, timeout, env, cwd, stdin, stderr, cmd);
   }
   function open_process_out(timeout, env, cwd, stdout, stderr, cmd){
    return caml_call7
            (process_out[1], 0, timeout, env, cwd, stdout, stderr, cmd);
   }
   function open_process(timeout, env, cwd, stderr, cmd){
    return caml_call6(process[1], 0, timeout, env, cwd, stderr, cmd);
   }
   function open_process_full(timeout, env, cwd, cmd){
    return caml_call5(process_full[1], 0, timeout, env, cwd, cmd);
   }
   function make_with(backend, timeout, env, cwd, cmd, f){
    var process = caml_call4(backend, timeout, env, cwd, cmd);
    function _aE_(param){
     function _aG_(param){return Lwt[36];}
     var
      _aH_ =
        caml_call1(caml_get_public_method(process, -933029960, 16), process);
     return caml_call2(Lwt[33][1], _aH_, _aG_);
    }
    function _aF_(param){return caml_call1(f, process);}
    return caml_call2(Lwt[8], _aF_, _aE_);
   }
   function with_process_none
   (timeout, env, cwd, stdin, stdout, stderr, cmd, f){
    return make_with
            (function(_aC_, _aB_, _aA_){
              return function(_aD_){
               return open_process_none
                       (_aC_, _aB_, _aA_, stdin, stdout, stderr, _aD_);};
             },
             timeout,
             env,
             cwd,
             cmd,
             f);
   }
   function with_process_in(timeout, env, cwd, stdin, stderr, cmd, f){
    return make_with
            (function(_ay_, _ax_, _aw_){
              return function(_az_){
               return open_process_in(_ay_, _ax_, _aw_, stdin, stderr, _az_);};
             },
             timeout,
             env,
             cwd,
             cmd,
             f);
   }
   function with_process_out(timeout, env, cwd, stdout, stderr, cmd, f){
    return make_with
            (function(_au_, _at_, _as_){
              return function(_av_){
               return open_process_out(_au_, _at_, _as_, stdout, stderr, _av_);};
             },
             timeout,
             env,
             cwd,
             cmd,
             f);
   }
   function with_process(timeout, env, cwd, stderr, cmd, f){
    return make_with
            (function(_aq_, _ap_, _ao_){
              return function(_ar_){
               return open_process(_aq_, _ap_, _ao_, stderr, _ar_);};
             },
             timeout,
             env,
             cwd,
             cmd,
             f);
   }
   function with_process_full(timeout, env, cwd, cmd, f){
    return make_with(open_process_full, timeout, env, cwd, cmd, f);
   }
   function exec(timeout, env, cwd, stdin, stdout, stderr, cmd){
    var
     _an_ = open_process_none(timeout, env, cwd, stdin, stdout, stderr, cmd);
    return caml_call1(caml_get_public_method(_an_, -933029960, 17), _an_);
   }
   function ignore_close(ch){caml_call1(Lwt_io[15], ch); return 0;}
   function read_opt(read, ic){
    function _ai_(exn){
     a:
     {
      if(exn[1] === Unix[1]){
       var _am_ = exn[2];
       if(typeof _am_ !== "number" || 31 !== _am_) break a;
      }
      else if(exn !== Stdlib[12]) break a;
      return Lwt[37];
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _aj_(param){
     function _ak_(x){return [0, x];}
     var _al_ = caml_call1(read, ic);
     return caml_call2(Lwt[33][2], _al_, _ak_);
    }
    return caml_call2(Lwt[7], _aj_, _ai_);
   }
   function recv_chars(pr){
    var ic = caml_call1(caml_get_public_method(pr, 133414859, 18), pr);
    caml_call2(Stdlib_Gc[3], ignore_close, ic);
    function _ad_(param){
     function _ae_(x){
      if(0 !== x) return caml_call1(Lwt[4], x);
      function _ag_(param){return caml_call1(Lwt[4], x);}
      var _ah_ = caml_call1(Lwt_io[15], ic);
      return caml_call2(Lwt[33][1], _ah_, _ag_);
     }
     var _af_ = read_opt(Lwt_io[29], ic);
     return caml_call2(Lwt[33][1], _af_, _ae_);
    }
    return caml_call1(Lwt_stream[1], _ad_);
   }
   function recv_lines(pr){
    var ic = caml_call1(caml_get_public_method(pr, 133414859, 19), pr);
    caml_call2(Stdlib_Gc[3], ignore_close, ic);
    function ___(param){
     function _$_(x){
      if(0 !== x) return caml_call1(Lwt[4], x);
      function _ab_(param){return caml_call1(Lwt[4], x);}
      var _ac_ = caml_call1(Lwt_io[15], ic);
      return caml_call2(Lwt[33][1], _ac_, _ab_);
     }
     var _aa_ = read_opt(Lwt_io[32], ic);
     return caml_call2(Lwt[33][1], _aa_, _$_);
    }
    return caml_call1(Lwt_stream[1], ___);
   }
   function recv(pr){
    var ic = caml_call1(caml_get_public_method(pr, 133414859, 20), pr);
    function _Y_(param){return caml_call1(Lwt_io[15], ic);}
    function _Z_(param){return caml_call2(Lwt_io[35], 0, ic);}
    return caml_call2(Lwt[8], _Z_, _Y_);
   }
   function recv_line(pr){
    var ic = caml_call1(caml_get_public_method(pr, 133414859, 21), pr);
    function _W_(param){return caml_call1(Lwt_io[15], ic);}
    function _X_(param){return caml_call1(Lwt_io[32], ic);}
    return caml_call2(Lwt[8], _X_, _W_);
   }
   function send(f, pr, data){
    var oc = caml_call1(caml_get_public_method(pr, 68006728, 22), pr);
    function _U_(param){return caml_call1(Lwt_io[15], oc);}
    function _V_(param){return caml_call2(f, oc, data);}
    return caml_call2(Lwt[8], _V_, _U_);
   }
   function pread(timeout, env, cwd, stdin, stderr, cmd){
    return recv(open_process_in(timeout, env, cwd, stdin, stderr, cmd));
   }
   function pread_chars(timeout, env, cwd, stdin, stderr, cmd){
    return recv_chars(open_process_in(timeout, env, cwd, stdin, stderr, cmd));
   }
   function pread_line(timeout, env, cwd, stdin, stderr, cmd){
    return recv_line(open_process_in(timeout, env, cwd, stdin, stderr, cmd));
   }
   function pread_lines(timeout, env, cwd, stdin, stderr, cmd){
    return recv_lines(open_process_in(timeout, env, cwd, stdin, stderr, cmd));
   }
   function pwrite(timeout, env, cwd, stdout, stderr, cmd, text){
    var _T_ = open_process_out(timeout, env, cwd, stdout, stderr, cmd);
    return send(Lwt_io[43], _T_, text);
   }
   function pwrite_chars(timeout, env, cwd, stdout, stderr, cmd, chars){
    var _S_ = open_process_out(timeout, env, cwd, stdout, stderr, cmd);
    return send(Lwt_io[42], _S_, chars);
   }
   function pwrite_line(timeout, env, cwd, stdout, stderr, cmd, line){
    var _R_ = open_process_out(timeout, env, cwd, stdout, stderr, cmd);
    return send(Lwt_io[44], _R_, line);
   }
   function pwrite_lines(timeout, env, cwd, stdout, stderr, cmd, lines){
    var _Q_ = open_process_out(timeout, env, cwd, stdout, stderr, cmd);
    return send(Lwt_io[45], _Q_, lines);
   }
   function monitor(sender, st){
    function _N_(param){return 0;}
    var sender$0 = caml_call2(Lwt[33][2], sender, _N_), state = [0, 0];
    function _O_(param){
     var match = state[1];
     if(typeof match !== "number"){var t = match[1]; state[1] = 1; return t;}
     if(match) return caml_call1(Lwt_stream[21], st);
     var getter = caml_call2(Lwt[80], Lwt_stream[21], st);
     function result(param){
      var match = caml_call1(Lwt[48], sender$0);
      return typeof match === "number"
              ? getter
              : 0
                === match[0]
                ? (state[1] = 1, getter)
                : (state[1] = [0, getter], sender$0);
     }
     function _P_(param){
      return caml_call1(Lwt[17], [0, sender$0, [0, getter, 0]]);
     }
     return caml_call3(Lwt[9], _P_, result, result);
    }
    return caml_call1(Lwt_stream[1], _O_);
   }
   function pmap(timeout, env, cwd, stderr, cmd, text){
    var
     pr = open_process(timeout, env, cwd, stderr, cmd),
     sender = send(Lwt_io[43], pr, text),
     getter = recv(pr);
    function _K_(exn){
     if(exn !== Lwt[21]) throw caml_maybe_attach_backtrace(exn, 0);
     caml_call1(Lwt[23], getter);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _L_(param){
     function _M_(param){return getter;}
     return caml_call2(Lwt[33][1], sender, _M_);
    }
    return caml_call2(Lwt[7], _L_, _K_);
   }
   function pmap_chars(timeout, env, cwd, stderr, cmd, chars){
    var
     pr = open_process(timeout, env, cwd, stderr, cmd),
     sender = send(Lwt_io[42], pr, chars);
    return monitor(sender, recv_chars(pr));
   }
   function pmap_line(timeout, env, cwd, stderr, cmd, line){
    var
     pr = open_process(timeout, env, cwd, stderr, cmd),
     sender = send(Lwt_io[44], pr, line),
     getter = recv_line(pr);
    function _H_(exn){
     if(exn !== Lwt[21]) throw caml_maybe_attach_backtrace(exn, 0);
     caml_call1(Lwt[23], getter);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function _I_(param){
     function _J_(param){return getter;}
     return caml_call2(Lwt[33][1], sender, _J_);
    }
    return caml_call2(Lwt[7], _I_, _H_);
   }
   function pmap_lines(timeout, env, cwd, stderr, cmd, lines){
    var
     pr = open_process(timeout, env, cwd, stderr, cmd),
     sender = send(Lwt_io[45], pr, lines);
    return monitor(sender, recv_lines(pr));
   }
   var
    Lwt_process =
      [0,
       shell,
       exec,
       pread,
       pread_chars,
       pread_line,
       pread_lines,
       pwrite,
       pwrite_chars,
       pwrite_line,
       pwrite_lines,
       pmap,
       pmap_chars,
       pmap_line,
       pmap_lines,
       process_none,
       open_process_none,
       with_process_none,
       process_in,
       open_process_in,
       with_process_in,
       process_out,
       open_process_out,
       with_process_out,
       process,
       open_process,
       with_process,
       process_full,
       open_process_full,
       with_process_full];
   runtime.caml_register_global(64, Lwt_process, "Lwt_process");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_preemptive
//# unitInfo: Requires: Lwt, Lwt_sequence, Lwt_unix, Stdlib, Stdlib__Condition, Stdlib__Mutex, Stdlib__Queue, Thread
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt_unix = global_data.Lwt_unix,
    Lwt = global_data.Lwt,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Thread = global_data.Thread,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib = global_data.Stdlib,
    Stdlib_Condition = global_data.Stdlib__Condition,
    min_threads = [0, 0],
    max_threads = [0, 0],
    max_thread_queued = [0, 1000],
    _b_ = [0, 1],
    _a_ = [0, 0, 4],
    cst_Lwt_preemptive_set_bounds = "Lwt_preemptive.set_bounds",
    cst_Lwt_preemptive_set_max_num =
      "Lwt_preemptive.set_max_number_of_threads_queued",
    cst_Lwt_preemptive_detach = "Lwt_preemptive.detach";
   function get_max_number_of_threads_queu(param){return max_thread_queued[1];
   }
   function set_max_number_of_threads_queu(n){
    if(n < 0) caml_call1(Stdlib[1], cst_Lwt_preemptive_set_max_num);
    max_thread_queued[1] = n;
    return 0;
   }
   var threads_count = [0, 0];
   function make(param){
    var _B_ = caml_call1(Stdlib_Condition[1], 0);
    return [0, caml_call1(Stdlib_Mutex[1], 0), _B_, 0];
   }
   function get(t){
    caml_call1(Stdlib_Mutex[2], t[1]);
    for(;;){
     var match = t[3];
     if(match){
      var v = match[1];
      t[3] = 0;
      caml_call1(Stdlib_Mutex[4], t[1]);
      return v;
     }
     caml_call2(Stdlib_Condition[2], t[2], t[1]);
    }
   }
   function set(t, v){
    caml_call1(Stdlib_Mutex[2], t[1]);
    t[3] = [0, v];
    caml_call1(Stdlib_Mutex[4], t[1]);
    return caml_call1(Stdlib_Condition[3], t[2]);
   }
   var
    workers = caml_call1(Stdlib_Queue[2], 0),
    waiters = caml_call1(Lwt_sequence[4], 0);
   function worker_loop(worker){
    for(;;){
     var match = get(worker[1]), task = match[2], id = match[1];
     caml_call1(task, 0);
     if(max_threads[1] < threads_count[1]) worker[3] = 0;
     caml_call1(Lwt_unix[157], id);
     var _A_ = worker[3];
     if(! _A_) return _A_;
    }
   }
   function make_worker(param){
    threads_count[1]++;
    var _z_ = caml_call1(Thread[2], 0), worker = [0, make(0), _z_, 1];
    worker[2] = caml_call2(Thread[1], worker_loop, worker);
    return worker;
   }
   function add_worker(worker){
    var match = caml_call1(Lwt_sequence[13], waiters);
    if(! match) return caml_call2(Stdlib_Queue[3], worker, workers);
    var w = match[1];
    return caml_call2(Lwt[52], w, worker);
   }
   function get_bounds(param){return [0, min_threads[1], max_threads[1]];}
   function set_bounds(param){
    var
     max = param[2],
     min = param[1],
     _v_ = min < 0 ? 1 : 0,
     _w_ = _v_ || (max < min ? 1 : 0);
    if(_w_) caml_call1(Stdlib[1], cst_Lwt_preemptive_set_bounds);
    var diff = min - threads_count[1] | 0;
    min_threads[1] = min;
    max_threads[1] = max;
    var _x_ = 1;
    if(diff >= 1){
     var i = _x_;
     for(;;){
      add_worker(make_worker(0));
      var _y_ = i + 1 | 0;
      if(diff === i) break;
      var i = _y_;
     }
    }
    return 0;
   }
   var initialized = [0, 0];
   function init(min, max, errlog){
    initialized[1] = 1;
    return set_bounds([0, min, max]);
   }
   function simple_init(param){
    var _u_ = 1 - initialized[1];
    return _u_ ? (initialized[1] = 1, set_bounds(_a_)) : _u_;
   }
   function nbthreads(param){return threads_count[1];}
   function nbthreadsqueued(param){
    var _s_ = 0;
    function _t_(param, x){return x + 1 | 0;}
    return caml_call3(Lwt_sequence[21], _t_, waiters, _s_);
   }
   function nbthreadsbusy(param){
    var _r_ = caml_call1(Stdlib_Queue[14], workers);
    return threads_count[1] - _r_ | 0;
   }
   var init_result = [1, [0, Stdlib[7], cst_Lwt_preemptive_detach]];
   function detach(f, args){
    simple_init(0);
    var result = [0, init_result];
    function task(param){
     try{result[1] = [0, caml_call1(f, args)]; var _q_ = 0; return _q_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(! caml_call1(Lwt[78][4], exn))
       throw caml_maybe_attach_backtrace(exn, 0);
      result[1] = [1, exn];
      return 0;
     }
    }
    function _l_(worker){
     var match = caml_call1(Lwt[1], 0), wakener = match[2], waiter = match[1];
     function _n_(param){return caml_call2(Lwt[54], wakener, result[1]);}
     var id = caml_call2(Lwt_unix[156], _b_, _n_);
     function _o_(param){
      if(worker[3])
       add_worker(worker);
      else{threads_count[1] += -1; caml_call1(Thread[7], worker[2]);}
      return Lwt[36];
     }
     function _p_(param){set(worker[1], [0, id, task]); return waiter;}
     return caml_call2(Lwt[8], _p_, _o_);
    }
    if(caml_call1(Stdlib_Queue[13], workers))
     if(threads_count[1] < max_threads[1])
      var _j_ = make_worker(0), _m_ = caml_call1(Lwt[4], _j_);
     else
      var _m_ = caml_call1(Lwt[55], waiters);
    else
     var
      _k_ = caml_call1(Stdlib_Queue[5], workers),
      _m_ = caml_call1(Lwt[4], _k_);
    return caml_call2(Lwt[33][1], _m_, _l_);
   }
   var
    jobs = caml_call1(Stdlib_Queue[2], 0),
    jobs_mutex = caml_call1(Stdlib_Mutex[1], 0);
   function _c_(param){
    caml_call1(Stdlib_Mutex[2], jobs_mutex);
    var thunk = caml_call1(Stdlib_Queue[5], jobs);
    caml_call1(Stdlib_Mutex[4], jobs_mutex);
    caml_call1(thunk, 0);
    return 0;
   }
   var job_notification = caml_call2(Lwt_unix[156], 0, _c_);
   function _d_(f){
    caml_call1(Stdlib_Mutex[2], jobs_mutex);
    caml_call2(Stdlib_Queue[3], f, jobs);
    caml_call1(Stdlib_Mutex[4], jobs_mutex);
    return caml_call1(Lwt_unix[157], job_notification);
   }
   function run_in_main(f){
    var cell = make(0);
    function job(param){
     function _f_(result){set(cell, result); return Lwt[36];}
     function _g_(exn){return caml_call1(Lwt[4], [1, exn]);}
     function _h_(ret){return caml_call1(Lwt[4], [0, ret]);}
     var _i_ = caml_call3(Lwt[9], f, _h_, _g_);
     return caml_call2(Lwt[33][1], _i_, _f_);
    }
    _d_(job);
    var match = get(cell);
    if(0 === match[0]){var ret = match[1]; return ret;}
    var exn = match[1];
    throw caml_maybe_attach_backtrace(exn, 1);
   }
   function run_in_main_dont_wait(f, handler){
    function f$0(param){
     function _e_(exc){caml_call1(handler, exc); return Lwt[36];}
     return caml_call2(Lwt[7], f, _e_);
    }
    return _d_(f$0);
   }
   var
    Lwt_preemptive =
      [0,
       detach,
       run_in_main,
       run_in_main_dont_wait,
       init,
       simple_init,
       get_bounds,
       set_bounds,
       set_max_number_of_threads_queu,
       get_max_number_of_threads_queu,
       nbthreads,
       nbthreadsbusy,
       nbthreadsqueued];
   runtime.caml_register_global(13, Lwt_preemptive, "Lwt_preemptive");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_gc
//# unitInfo: Requires: Lwt, Lwt_main, Lwt_sequence, Lwt_unix, Stdlib__Gc, Stdlib__Weak
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Weak = global_data.Stdlib__Weak,
    Lwt_main = global_data.Lwt_main,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Lwt = global_data.Lwt,
    Lwt_unix = global_data.Lwt_unix,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/unix/lwt_gc.ml", 38, 11],
    _b_ = [0, 1];
   function finaliser(f){
    var opt = [0, 0];
    function _h_(param){
     var match = opt[1];
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var x = match[1];
     opt[1] = 0;
     var t = caml_call1(f, x), _i_ = 0 === caml_call1(Lwt[48], t) ? 1 : 0;
     if(_i_){
      var
       _j_ = Lwt_main[9],
       _k_ = function(param){return t;},
       hook = caml_call2(Lwt_sequence[8], _k_, _j_),
       _l_ =
         function(param){caml_call1(Lwt_sequence[3], hook); return Lwt[36];},
       _m_ = function(param){return t;};
      caml_call2(Lwt[8], _m_, _l_);
      var _n_ = 0;
     }
     else
      var _n_ = _i_;
     return _n_;
    }
    var id = caml_call2(Lwt_unix[156], _b_, _h_);
    return function(x){
     opt[1] = [0, x];
     return caml_call1(Lwt_unix[157], id);};
   }
   function finalise(f, x){
    var _g_ = finaliser(f);
    return caml_call2(Stdlib_Gc[3], _g_, x);
   }
   function finalise_or_exit(f, x){
    var weak = caml_call1(Stdlib_Weak[1], 1);
    caml_call3(Stdlib_Weak[3], weak, 0, [0, x]);
    var called = [0, 0], _d_ = Lwt_main[9];
    function _e_(_f_){
     var match = caml_call2(Stdlib_Weak[4], weak, 0);
     if(! match) return Lwt[36];
     var x = match[1];
     caml_call3(Stdlib_Weak[3], weak, 0, 0);
     return called[1] ? Lwt[36] : (called[1] = 1, caml_call1(f, x));
    }
    var
     hook = caml_call2(Lwt_sequence[8], _e_, _d_),
     _c_ =
       finaliser
        (function(x){
          caml_call1(Lwt_sequence[3], hook);
          return called[1] ? Lwt[36] : (called[1] = 1, caml_call1(f, x));
         });
    return caml_call2(Stdlib_Gc[3], _c_, x);
   }
   var Lwt_gc = [0, finalise, finalise_or_exit];
   runtime.caml_register_global(9, Lwt_gc, "Lwt_gc");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_fmt
//# unitInfo: Requires: Lwt, Lwt_io, Lwt_stream, Stdlib__Format, Stdlib__Gc, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Queue = global_data.Stdlib__Queue,
    Lwt = global_data.Lwt,
    Stdlib_Format = global_data.Stdlib__Format,
    Lwt_io = global_data.Lwt_io,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Gc = global_data.Stdlib__Gc,
    _a_ = [0, 0];
   function write_pending(ppft){return caml_call1(ppft[1], 0);}
   function flush(ppft){
    caml_call2(Stdlib_Format[38], ppft[2], 0);
    return caml_call1(ppft[1], 0);
   }
   function make_formatter(commit, fmt, param){return [0, commit, fmt];}
   function get_formatter(x){return x[2];}
   function make_stream(param){
    var
     match = caml_call1(Lwt_stream[4], 0),
     push = match[2],
     stream = match[1];
    function out_string(s, i, j){return caml_call1(push, [0, [0, s, i, j]]);}
    function flush(param){return caml_call1(push, _a_);}
    var fmt = caml_call2(Stdlib_Format[120], out_string, flush);
    function _j_(param){return caml_call1(push, 0);}
    caml_call2(Stdlib_Gc[3], _j_, fmt);
    function commit(param){return Lwt[36];}
    return [0, stream, [0, commit, fmt]];
   }
   function write_order(oc, param){
    if(! param) return caml_call1(Lwt_io[20], oc);
    var j = param[3], i = param[2], s = param[1];
    return caml_call4(Lwt_io[51], oc, s, i, j);
   }
   function write_orders(oc, queue){
    if(caml_call1(Stdlib_Queue[13], queue)) return Lwt[36];
    var o = caml_call1(Stdlib_Queue[7], queue);
    function _h_(param){return write_orders(oc, queue);}
    var _i_ = write_order(oc, o);
    return caml_call2(Lwt[33][1], _i_, _h_);
   }
   function of_channel(oc){
    var q = caml_call1(Stdlib_Queue[2], 0);
    function out_string(s, i, j){
     return caml_call2(Stdlib_Queue[4], [0, s, i, j], q);
    }
    function flush(param){return caml_call2(Stdlib_Queue[4], 0, q);}
    var fmt = caml_call2(Stdlib_Format[120], out_string, flush);
    function commit(param){return write_orders(oc, q);}
    return [0, commit, fmt];
   }
   function kfprintf(k, ppft, fmt){
    var _e_ = ppft[2];
    function _f_(ppf){
     var _g_ = caml_call1(ppft[1], 0);
     return caml_call1(caml_call1(k, ppft), _g_);
    }
    return caml_call3(Stdlib_Format[144], _f_, _e_, fmt);
   }
   function ikfprintf(k, ppft, fmt){
    var _b_ = ppft[2];
    function _c_(ppf){
     var _d_ = Lwt[36];
     return caml_call1(caml_call1(k, ppft), _d_);
    }
    return caml_call3(Stdlib_Format[146], _c_, _b_, fmt);
   }
   function fprintf(ppft, fmt){
    return kfprintf(function(param, t){return t;}, ppft, fmt);
   }
   function ifprintf(ppft, fmt){
    return ikfprintf(function(param, t){return t;}, ppft, fmt);
   }
   var stdout = of_channel(Lwt_io[6]), stderr = of_channel(Lwt_io[7]);
   function printf(fmt){return fprintf(stdout, fmt);}
   function eprintf(fmt){return fprintf(stderr, fmt);}
   var
    Lwt_fmt =
      [0,
       printf,
       eprintf,
       make_stream,
       of_channel,
       stdout,
       stderr,
       make_formatter,
       get_formatter,
       fprintf,
       kfprintf,
       ifprintf,
       ikfprintf,
       flush,
       write_order,
       write_pending];
   runtime.caml_register_global(7, Lwt_fmt, "Lwt_fmt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
