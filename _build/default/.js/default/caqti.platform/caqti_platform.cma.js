// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Caqti_platform
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_platform = [0];
   runtime.caml_register_global(0, Caqti_platform, "Caqti_platform");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Switch
//# unitInfo: Requires: Lwt_dllist, Stdlib, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt_dllist = global_data.Lwt_dllist,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib = global_data.Stdlib,
    cst_Tried_to_release_eternal_s = "Tried to release eternal switch.",
    cst_Caqti_platform_Switch_Make = "Caqti_platform.Switch.Make(Fiber).Off";
   function Make(Fiber){
    var
     Off = [248, cst_Caqti_platform_Switch_Make, runtime.caml_fresh_oo_id(0)],
     eternal = 0;
    function create(param){return [0, [0, caml_call1(Lwt_dllist[4], 0)]];}
    function release(param){
     if(! param) return caml_call1(Stdlib[2], cst_Tried_to_release_eternal_s);
     var match = param[1];
     if(! match) return caml_call1(Fiber[1], 0);
     var tasks = match[1];
     function loop(param$0){
      if(caml_call1(Lwt_dllist[5], tasks)){
       param[1] = 0;
       return caml_call1(Fiber[1], 0);
      }
      var _c_ = caml_call2(Lwt_dllist[10], tasks, 0);
      return caml_call2(Fiber[2][1], _c_, loop);
     }
     return loop(0);
    }
    function run(f){
     var sw = create(0);
     function _a_(param){return release(sw);}
     function _b_(param){return caml_call1(f, sw);}
     return caml_call2(Fiber[3], _b_, _a_);
    }
    function check(param){
     if(param && ! param[1]) throw caml_maybe_attach_backtrace(Off, 1);
     return 0;
    }
    function on_release_cancellable(sw, f){
     if(! sw) return 0;
     var match = sw[1];
     if(! match) throw caml_maybe_attach_backtrace(Off, 1);
     var tasks = match[1];
     return [0, caml_call2(Lwt_dllist[7], f, tasks)];
    }
    function remove_hook(hook){
     return caml_call2(Stdlib_Option[9], Lwt_dllist[3], hook);
    }
    return [0,
            Off,
            eternal,
            create,
            release,
            run,
            check,
            on_release_cancellable,
            remove_hook];
   }
   var Caqti_platform_Switch = [0, Make];
   runtime.caml_register_global
    (5, Caqti_platform_Switch, "Caqti_platform__Switch");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__System_sig
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Caqti_platform_System_sig = [0];
   runtime.caml_register_global
    (0, Caqti_platform_System_sig, "Caqti_platform__System_sig");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Stream
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, 0];
   function Make(Fiber){
    function symbol(res_future, f){
     function _r_(r){
      if(0 !== r[0]) return caml_call1(Fiber[2], r);
      var a = r[1];
      return caml_call1(f, a);
     }
     return caml_call2(Fiber[1][1], res_future, _r_);
    }
    function fold(f, t, state){
     function _p_(param){
      if(typeof param === "number") return caml_call1(Fiber[2], [0, state]);
      if(0 === param[0]){
       var err = param[1];
       return caml_call1(Fiber[2], [1, err]);
      }
      var t = param[2], a = param[1];
      return fold(f, t, caml_call2(f, a, state));
     }
     var _q_ = caml_call1(t, 0);
     return caml_call2(Fiber[1][1], _q_, _p_);
    }
    function fold_s(f, t, state){
     function _l_(param){
      if(typeof param === "number") return caml_call1(Fiber[2], [0, state]);
      if(0 === param[0]){
       var err = param[1];
       return caml_call1(Fiber[2], [1, [0, 48080384, err]]);
      }
      var t = param[2], a = param[1];
      function _n_(_o_){return fold_s(f, t, _o_);}
      return symbol(caml_call2(f, a, state), _n_);
     }
     var _m_ = caml_call1(t, 0);
     return caml_call2(Fiber[1][1], _m_, _l_);
    }
    function iter_s(f, t){
     function _i_(param){
      if(typeof param === "number") return caml_call1(Fiber[2], _a_);
      if(0 === param[0]){
       var err = param[1];
       return caml_call1(Fiber[2], [1, [0, 48080384, err]]);
      }
      var t = param[2], a = param[1];
      function _k_(param){return iter_s(f, t);}
      return symbol(caml_call1(f, a), _k_);
     }
     var _j_ = caml_call1(t, 0);
     return caml_call2(Fiber[1][1], _j_, _i_);
    }
    function to_rev_list(t){return fold(Stdlib_List[5], t, 0);}
    function to_list(t){
     var f = Stdlib_List[10], res_future = to_rev_list(t);
     function _g_(r){
      if(0 !== r[0]) return caml_call1(Fiber[2], r);
      var a = r[1], _h_ = [0, caml_call1(f, a)];
      return caml_call1(Fiber[2], _h_);
     }
     return caml_call2(Fiber[1][1], res_future, _g_);
    }
    function of_list(l, param){
     if(! l) return caml_call1(Fiber[2], 0);
     var
      tl = l[2],
      hd = l[1],
      _e_ = [1, hd, function(_f_){return of_list(tl, _f_);}];
     return caml_call1(Fiber[2], _e_);
    }
    function map_result(f, xs, param){
     function _b_(r){
      if(typeof r !== "number" && 1 === r[0]){
       var xs = r[2], x = r[1], match = caml_call1(f, x);
       if(0 === match[0]){
        var y = match[1];
        return [1, y, function(_d_){return map_result(f, xs, _d_);}];
       }
       var e = match[1];
       return [0, e];
      }
      return r;
     }
     var _c_ = caml_call1(xs, 0);
     return caml_call2(Fiber[1][2], _c_, _b_);
    }
    return [0,
            fold,
            fold_s,
            iter_s,
            to_rev_list,
            to_list,
            of_list,
            map_result];
   }
   var Caqti_platform_Stream = [0, Make];
   runtime.caml_register_global
    (2, Caqti_platform_Stream, "Caqti_platform__Stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__List_ext
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var _a_ = [0, 0];
   function fold(f, param){
    if(! param) return function(_c_){return _c_;};
    var xs = param[2], x = param[1];
    return function(acc){
     var _b_ = caml_call1(caml_call1(f, x), acc);
     return fold(f, xs)(_b_);};
   }
   function iteri_r(f, xs){
    var i = 0, param = xs;
    for(;;){
     if(! param) return _a_;
     var xs$0 = param[2], x = param[1], r = caml_call2(f, i, x);
     if(0 !== r[0]) return r;
     var i$0 = i + 1 | 0, i = i$0, param = xs$0;
    }
   }
   var Caqti_platform_List_ext = [0, fold, iteri_r];
   runtime.caml_register_global
    (1, Caqti_platform_List_ext, "Caqti_platform__List_ext");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Request_utils
//# unitInfo: Requires: Caqti_error, Caqti_platform__List_ext, Caqti_query, Caqti_type, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_caqti_lib_platform_request = "caqti/lib-platform/request_utils.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Caqti_type = global_data.Caqti_type,
    Caqti_error = global_data.Caqti_error,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Caqti_query = global_data.Caqti_query,
    Caqti_platform_List_ext = global_data.Caqti_platform__List_ext,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    _e_ = [0, cst_caqti_lib_platform_request, 74, 24],
    _c_ = [0, cst_caqti_lib_platform_request, 61, 24],
    _d_ = [0, 0, 0],
    _b_ = [0, cst_caqti_lib_platform_request, 44, 24],
    _a_ = [0, cst_caqti_lib_platform_request, 32, 24];
   function no_env(param){throw caml_maybe_attach_backtrace(Stdlib[8], 1);}
   function linear_param_length(opt, templ){
    if(opt) var sth = opt[1], env = sth; else var env = no_env;
    var templ$0 = caml_call3(Caqti_query[18], 0, env, templ);
    function loop(param){
     switch(param[0]){
       case 0:
        return function(_L_){return _L_;};
       case 1:
        return function(_K_){return _K_ + 1 | 0;};
       case 2:
        return function(_J_){return _J_ + 1 | 0;};
       case 3:
        return function(_I_){return _I_ + 1 | 0;};
       case 4:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
       default:
        var frags = param[1];
        return caml_call2(Caqti_platform_List_ext[1], loop, frags);
     }
    }
    return caml_call1(loop(templ$0), 0);
   }
   function linear_param_order(opt, templ$0){
    if(opt) var sth = opt[1], env = sth; else var env = no_env;
    var
     templ$1 = caml_call3(Caqti_query[18], 0, env, templ$0),
     templ = caml_call3(Caqti_query[18], 0, no_env, templ$1);
    function loop(param){
     switch(param[0]){
       case 0:
        return function(_H_){return _H_;};
       case 1:
        return function(_G_){return _G_;};
       case 2:
        return function(_F_){return _F_;};
       case 3:
        var n = param[1]; return caml_call1(Stdlib[17], n + 1 | 0);
       case 4:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       default:
        var frags = param[1];
        return caml_call2(Caqti_platform_List_ext[1], loop, frags);
     }
    }
    var a = runtime.caml_make_vect(caml_call1(loop(templ), 0), 0);
    function loop$0(param){
     switch(param[0]){
       case 0:
        return function(_E_){return _E_;};
       case 1:
        var v = param[2], t = param[1];
        return function(param){
         var params = param[2], j = param[1];
         return [0, j + 1 | 0, [0, [0, j, t, v], params]];};
       case 2:
        var s = param[1];
        return function(param){
         var params = param[2], j = param[1];
         return [0, j + 1 | 0, [0, [0, j, 6, s], params]];};
       case 3:
        var i = param[1];
        return function(param){
         var params = param[2], j = param[1];
         a[1 + i] = [0, j, runtime.caml_check_bound(a, i)[1 + i]];
         return [0, j + 1 | 0, params];};
       case 4:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       default:
        var frags = param[1];
        return caml_call2(Caqti_platform_List_ext[1], loop$0, frags);
     }
    }
    var
     params = caml_call1(loop$0(templ$1), _d_)[2],
     _D_ = caml_call1(Stdlib_List[10], params);
    return [0, caml_call1(Stdlib_Array[9], a), _D_];
   }
   function linear_query_string(opt, templ){
    if(opt) var sth = opt[1], env = sth; else var env = no_env;
    var
     templ$0 = caml_call3(Caqti_query[18], 0, env, templ),
     buf = caml_call1(Stdlib_Buffer[1], 64);
    function loop(param){
     switch(param[0]){
       case 0:
        var s = param[1]; return caml_call2(Stdlib_Buffer[16], buf, s);
       case 4:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
       case 5:
        var frags = param[1]; return caml_call2(Stdlib_List[18], loop, frags);
       default: return caml_call2(Stdlib_Buffer[12], buf, 63);
     }
    }
    loop(templ$0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function raise_encode_missing(uri, field_type, param){
    var _C_ = caml_call3(Caqti_error[10], uri, field_type, 0);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _C_], 1);
   }
   function raise_encode_rejected(uri, typ, msg){
    var _B_ = caml_call3(Caqti_error[11], uri, typ, msg);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _B_], 1);
   }
   function raise_encode_failed(uri, typ, msg){
    var _A_ = caml_call3(Caqti_error[12], uri, typ, msg);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _A_], 1);
   }
   function raise_decode_missing(uri, field_type, param){
    var _z_ = caml_call3(Caqti_error[14], uri, field_type, 0);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _z_], 1);
   }
   function raise_decode_rejected(uri, typ, msg){
    var _y_ = caml_call3(Caqti_error[15], uri, typ, msg);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _y_], 1);
   }
   function raise_response_failed(uri, query, msg){
    var _x_ = caml_call3(Caqti_error[16], uri, query, msg);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _x_], 1);
   }
   function raise_response_rejected(uri, query, msg){
    var _w_ = caml_call3(Caqti_error[17], uri, query, msg);
    throw caml_maybe_attach_backtrace([0, Caqti_error[23], _w_], 1);
   }
   function encode_null_param(uri, f){
    return function(param){
     switch(param[0]){
       case 0:
        var ft = param[1]; return caml_call2(f[2], uri, ft);
       case 1:
        var t = param[1]; return encode_null_param(uri, f)(t);
       case 2:
        var
         ts = param[3],
         loop =
           function(param){
            if(! param) return function(_v_){return _v_;};
            var
             ts = param[3],
             t = param[1],
             g = loop(ts),
             f$0 = encode_null_param(uri, f)(t);
            return function(x){return g(caml_call1(f$0, x));};
           };
        return loop(ts);
       default: var t$0 = param[2]; return encode_null_param(uri, f)(t$0);
     }};
   }
   function encode_param(uri, f){
    return function(typ){
     switch(typ[0]){
       case 0:
        var ft = typ[1]; return caml_call2(f[1], uri, ft);
       case 1:
        var t = typ[1];
        return function(param){
         if(! param) return encode_null_param(uri, f)(t);
         var x = param[1];
         return caml_call1(encode_param(uri, f)(t), x);};
       case 2:
        var
         ts = typ[3],
         loop =
           function(param){
            if(! param) return function(param, acc){return acc;};
            var
             ts = param[3],
             p = param[2],
             t = param[1],
             encode_t = encode_param(uri, f)(t),
             encode_ts = loop(ts);
            return function(x, acc){
             var _s_ = caml_call2(encode_t, caml_call1(p, x), acc);
             return caml_call1
                     (function(_t_){var _u_ = _t_; return encode_ts(x, _u_);},
                      _s_);};
           };
        try{var _r_ = loop(ts); return _r_;}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Caqti_type[1])
          throw caml_maybe_attach_backtrace(exn, 0);
         var msg$0 = exn[2], msg = [0, Caqti_error[4], msg$0];
         return raise_encode_rejected(uri, typ, msg);
        }
       default: var t$0 = typ[2]; return encode_param(uri, f)(t$0);
     }};
   }
   function reject_decode(uri, typ, msg){
    var msg$0 = [0, Caqti_error[4], msg];
    return raise_decode_rejected(uri, typ, msg$0);
   }
   function decode_row(uri, f){
    return function(typ){
     switch(typ[0]){
       case 0:
        var ft = typ[1]; return caml_call2(f[1], uri, ft);
       case 1:
        var t = typ[1], decode_t = decode_row(uri, f)(t);
        return function(acc){
         var
          _q_ = caml_call1(Caqti_type[5], t),
          match = caml_call2(f[2], _q_, acc);
         if(match){var acc$0 = match[1]; return [0, 0, acc$0];}
         var
          match$0 = caml_call1(decode_t, acc),
          acc$1 = match$0[2],
          x = match$0[1];
         return [0, [0, x], acc$1];};
       case 2:
        var _f_ = typ[3], intro = typ[2];
        if(! _f_) return function(acc){return [0, intro, acc];};
        var _g_ = _f_[3];
        if(_g_){
         var _h_ = _g_[3], t2 = _g_[1], t1 = _f_[1];
         if(! _h_){
          var
           decode_t1$1 = decode_row(uri, f)(t1),
           decode_t2$1 = decode_row(uri, f)(t2);
          return function(acc){
           var
            match = caml_call1(decode_t1$1, acc),
            acc$0 = match[2],
            x1 = match[1],
            match$0 = caml_call1(decode_t2$1, acc$0),
            acc$1 = match$0[2],
            x2 = match$0[1];
           try{var _p_ = [0, caml_call2(intro, x1, x2), acc$1]; return _p_;}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] !== Caqti_type[1])
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return reject_decode(uri, typ, msg);
           }};
         }
         var _i_ = _h_[3], t3 = _h_[1];
         if(! _i_){
          var
           decode_t1$0 = decode_row(uri, f)(t1),
           decode_t2$0 = decode_row(uri, f)(t2),
           decode_t3$0 = decode_row(uri, f)(t3);
          return function(acc){
           var
            match = caml_call1(decode_t1$0, acc),
            acc$0 = match[2],
            x1 = match[1],
            match$0 = caml_call1(decode_t2$0, acc$0),
            acc$1 = match$0[2],
            x2 = match$0[1],
            match$1 = caml_call1(decode_t3$0, acc$1),
            acc$2 = match$1[2],
            x3 = match$1[1];
           try{
            var _o_ = [0, caml_call3(intro, x1, x2, x3), acc$2];
            return _o_;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] !== Caqti_type[1])
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return reject_decode(uri, typ, msg);
           }};
         }
         if(! _i_[3]){
          var
           t4 = _i_[1],
           decode_t1 = decode_row(uri, f)(t1),
           decode_t2 = decode_row(uri, f)(t2),
           decode_t3 = decode_row(uri, f)(t3),
           decode_t4 = decode_row(uri, f)(t4);
          return function(acc){
           var
            match = caml_call1(decode_t1, acc),
            acc$0 = match[2],
            x1 = match[1],
            match$0 = caml_call1(decode_t2, acc$0),
            acc$1 = match$0[2],
            x2 = match$0[1],
            match$1 = caml_call1(decode_t3, acc$1),
            acc$2 = match$1[2],
            x3 = match$1[1],
            match$2 = caml_call1(decode_t4, acc$2),
            acc$3 = match$2[2],
            x4 = match$2[1];
           try{
            var _n_ = [0, caml_call4(intro, x1, x2, x3, x4), acc$3];
            return _n_;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] !== Caqti_type[1])
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return reject_decode(uri, typ, msg);
           }};
         }
        }
        var
         ts = typ[3],
         intro$0 = typ[2],
         loop =
           function(param){
            if(! param) return function(intro, acc){return [0, intro, acc];};
            var
             ts = param[3],
             t = param[1],
             decode_t = decode_row(uri, f)(t),
             decode_ts = loop(ts);
            return function(intro, acc){
             var
              match = caml_call1(decode_t, acc),
              acc$0 = match[2],
              x = match[1];
             return decode_ts(caml_call1(intro, x), acc$0);};
           };
        try{
         var
          _k_ = loop(ts),
          _j_ = function(_l_){var _m_ = _l_; return _k_(intro$0, _m_);};
         return _j_;
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Caqti_type[1])
          throw caml_maybe_attach_backtrace(exn, 0);
         var msg = exn[2];
         return reject_decode(uri, typ, msg);
        }
       default: var t0 = typ[2]; return decode_row(uri, f)(t0);
     }};
   }
   var
    Caqti_platform_Request_utils =
      [0,
       linear_param_length,
       linear_param_order,
       linear_query_string,
       raise_encode_missing,
       raise_encode_rejected,
       raise_encode_failed,
       raise_decode_missing,
       raise_decode_rejected,
       raise_response_failed,
       raise_response_rejected,
       encode_param,
       decode_row];
   runtime.caml_register_global
    (14, Caqti_platform_Request_utils, "Caqti_platform__Request_utils");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Heap
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Caqti_heap_pop_e_Empty_hea = "Caqti_heap.pop_e: Empty heap.";
   function Make(Elt){
    var empty = 0;
    function is_empty(h){return 0 === h ? 1 : 0;}
    function card(param){if(! param) return 0; var n = param[1]; return n;}
    function push(e, param){
     if(! param) return [0, 1, e, 0, 0];
     var hR = param[4], hL = param[3], e$0 = param[2], n = param[1];
     if(0 <= caml_call2(Elt[1], e, e$0))
      var e_max = e, e_min = e$0;
     else
      var e_max = e$0, e_min = e;
     var _a_ = card(hR);
     return card(hL) < _a_
             ? [0, n + 1 | 0, e_min, push(e_max, hL), hR]
             : [0, n + 1 | 0, e_min, hL, push(e_max, hR)];
    }
    function merge(hL, hR){
     if(hL){
      if(hR){
       var
        hD = hR[4],
        hC = hR[3],
        eR = hR[2],
        nR = hR[1],
        hB = hL[4],
        hA = hL[3],
        eL = hL[2],
        nL = hL[1];
       return 0 <= caml_call2(Elt[1], eL, eR)
               ? [0, nL + nR | 0, eR, hL, merge(hC, hD)]
               : [0, nL + nR | 0, eL, merge(hA, hB), hR];
      }
      var h = hL;
     }
     else
      var h = hR;
     return h;
    }
    function pop_e(param){
     if(! param) return caml_call1(Stdlib[1], cst_Caqti_heap_pop_e_Empty_hea);
     var hR = param[4], hL = param[3], e = param[2];
     return [0, e, merge(hL, hR)];
    }
    return [0, empty, is_empty, card, push, merge, pop_e];
   }
   var Caqti_platform_Heap = [0, Make];
   runtime.caml_register_global
    (2, Caqti_platform_Heap, "Caqti_platform__Heap");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Pool
//# unitInfo: Requires: Caqti_platform__Heap, Caqti_pool_config, Logs, Mtime, Mtime_clock, Stdlib, Stdlib__Float, Stdlib__Option, Stdlib__Queue, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Cannot_schedule_pool_expir =
      "Cannot schedule pool expiration check due to Mtime overflow.",
    cst_Dropped_pooled_connection_ =
      "Dropped pooled connection due to invalidation.",
    cst_Will_not_repool_connection =
      "Will not repool connection due to invalidation.",
    cst_caqti_lib_platform_pool_ml = "caqti/lib-platform/pool.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Queue = global_data.Stdlib__Queue,
    Mtime = global_data.Mtime,
    Stdlib_Option = global_data.Stdlib__Option,
    Logs = global_data.Logs,
    Mtime_clock = global_data.Mtime_clock,
    Caqti_pool_config = global_data.Caqti_pool_config,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Float = global_data.Stdlib__Float,
    Caqti_platform_Heap = global_data.Caqti_platform__Heap,
    Stdlib = global_data.Stdlib,
    _f_ =
      [0,
       [11, cst_Dropped_pooled_connection_, 0],
       cst_Dropped_pooled_connection_],
    _g_ =
      [0,
       [11, cst_Cannot_schedule_pool_expir, 0],
       cst_Cannot_schedule_pool_expir],
    _h_ =
      [0,
       [11, cst_Will_not_repool_connection, 0],
       cst_Will_not_repool_connection],
    _b_ = [0, 100],
    _e_ = [0, cst_caqti_lib_platform_pool_ml, 124, 4],
    _d_ = [0, cst_caqti_lib_platform_pool_ml, 125, 4],
    _c_ = [0, cst_caqti_lib_platform_pool_ml, 126, 4],
    cst_Caqti_platform_Pool = "Caqti_platform.Pool";
   try{
    var
     _j_ =
       runtime.caml_int_of_string
        (runtime.caml_sys_getenv("CAQTI_POOL_MAX_SIZE")),
     default_max_size = _j_;
   }
   catch(_ag_){
    var _a_ = caml_wrap_exception(_ag_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var default_max_size = 8;
   }
   var default_log_src = caml_call2(Logs[7][1], 0, cst_Caqti_platform_Pool);
   function Make(System, Alarm){
    function symbol(m, f){
     function _af_(param){
      if(0 === param[0]){var x = param[1]; return caml_call1(f, x);}
      var e = param[1];
      return caml_call1(System[1][2], [1, e]);
     }
     return caml_call2(System[1][1][1], m, _af_);
    }
    function wake(param){
     var semaphore = param[2];
     return caml_call1(System[4][2], semaphore);
    }
    function compare(param, _ae_){
     var pB = _ae_[1], pA = param[1];
     return caml_call2(Stdlib_Float[21], pB, pA);
    }
    var
     Task = [0, wake, compare],
     Taskq = caml_call1(Caqti_platform_Heap[1], [0, Task[2]]);
    function create(opt, _Z_, _Y_, _X_, sw, stdenv, create, free){
     if(opt)
      var sth = opt[1], config = sth;
     else
      var config = Caqti_pool_config[2];
     if(_Z_)
      var sth$0 = _Z_[1], check = sth$0;
     else
      var check = function(param, f){return caml_call1(f, 1);};
     if(_Y_)
      var sth$1 = _Y_[1], validate = sth$1;
     else
      var validate = function(param){return caml_call1(System[1][2], 1);};
     if(_X_)
      var sth$2 = _X_[1], log_src = sth$2;
     else
      var log_src = default_log_src;
     var
      ___ =
        caml_call1
         (caml_call1(Caqti_pool_config[5], Caqti_pool_config[8]), config),
      max_size = caml_call2(Stdlib_Option[3], ___, default_max_size),
      _$_ =
        caml_call1
         (caml_call1(Caqti_pool_config[5], Caqti_pool_config[9]), config),
      max_idle_size = caml_call2(Stdlib_Option[3], _$_, max_size),
      _aa_ =
        caml_call1
         (caml_call1(Caqti_pool_config[5], Caqti_pool_config[10]), config),
      max_idle_age = caml_call2(Stdlib_Option[3], _aa_, 0),
      _ab_ =
        caml_call1
         (caml_call1(Caqti_pool_config[5], Caqti_pool_config[11]), config),
      max_use_count = caml_call2(Stdlib_Option[3], _ab_, _b_);
     if(0 >= max_size)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     if(max_idle_size > max_size)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     function _ac_(n){return 0 < n ? 1 : 0;}
     if(! caml_call3(Stdlib_Option[8], 1, _ac_, max_use_count))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var _ad_ = Taskq[1];
     return [0,
             stdenv,
             sw,
             create,
             free,
             check,
             validate,
             log_src,
             max_idle_size,
             max_idle_age,
             max_size,
             max_use_count,
             0,
             caml_call1(Stdlib_Queue[2], 0),
             _ad_,
             0];
    }
    function size(param){var cur_size = param[12]; return cur_size;}
    function wait(priority, pool){
     var semaphore = caml_call1(System[4][1], 0);
     pool[14] = caml_call2(Taskq[4], [0, priority, semaphore], pool[14]);
     return caml_call1(System[4][3], semaphore);
    }
    function schedule(pool){
     var _W_ = 1 - caml_call1(Taskq[2], pool[14]);
     if(! _W_) return _W_;
     var
      match = caml_call1(Taskq[6], pool[14]),
      taskq = match[2],
      task = match[1];
     pool[14] = taskq;
     return Task[1].call(null, task);
    }
    function realloc(pool){
     function on_error(param){
      pool[12] = pool[12] - 1 | 0;
      return schedule(pool);
     }
     function _S_(param){on_error(0); return caml_call1(System[1][2], 0);}
     function _T_(param){
      function _U_(param){
       if(0 === param[0]){
        var resource = param[1];
        return [0, [0, resource, 0, caml_call1(Mtime_clock[2], 0)]];
       }
       var err = param[1];
       on_error(0);
       return [1, err];
      }
      var _V_ = caml_call1(pool[3], 0);
      return caml_call2(System[1][1][2], _V_, _U_);
     }
     return caml_call2(System[1][5], _T_, _S_);
    }
    function acquire(priority, pool){
     if(! caml_call1(Stdlib_Queue[13], pool[13])){
      var
       entry = caml_call1(Stdlib_Queue[5], pool[13]),
       _N_ =
         function(ok){
          if(ok) return caml_call1(System[1][2], [0, entry]);
          function _P_(param){return realloc(pool);}
          function _Q_(f){return caml_call3(f, 0, 0, _f_);}
          var _R_ = caml_call2(System[5][2], [0, pool[7]], _Q_);
          return caml_call2(System[1][1][1], _R_, _P_);
         },
       _O_ = caml_call1(pool[6], entry[1]);
      return caml_call2(System[1][1][1], _O_, _N_);
     }
     if(pool[12] < pool[10]){
      pool[12] = pool[12] + 1 | 0;
      return realloc(pool);
     }
     function _L_(param){return acquire(priority, pool);}
     var _M_ = wait(priority, pool);
     return caml_call2(System[1][1][1], _M_, _L_);
    }
    function can_reuse(pool, entry){
     var _I_ = pool[12] <= pool[8] ? 1 : 0;
     if(! _I_) return _I_;
     var _J_ = pool[11];
     function _K_(n){return entry[2] < n ? 1 : 0;}
     return caml_call3(Stdlib_Option[8], 1, _K_, _J_);
    }
    function dispose_expiring(pool){
     var _D_ = pool[9], match = pool[15];
     if(! _D_){
      if(! match) return 0;
      var alarm = match[1];
      caml_call1(Alarm[2], alarm);
      pool[15] = 0;
      return 0;
     }
     var max_idle_age = _D_[1];
     if(match) return 0;
     var now = caml_call1(Mtime_clock[2], 0);
     for(;;){
      var match$0 = caml_call1(Stdlib_Queue[9], pool[13]);
      if(! match$0) return 0;
      var
       entry = match$0[1],
       match$1 = caml_call2(Mtime[11], entry[3], max_idle_age);
      if(! match$1){
       var _H_ = function(f){return caml_call3(f, 0, 0, _g_);};
       return caml_call2(Logs[12], [0, pool[7]], _H_);
      }
      var expiry = match$1[1];
      if(0 > caml_call2(Mtime[7], now, expiry)){
       var
        _F_ = function(param){pool[15] = 0; return dispose_expiring(pool);},
        _G_ = caml_call4(Alarm[1], pool[2], pool[1], expiry, _F_);
       pool[15] = caml_call1(Stdlib_Option[2], _G_);
       return 0;
      }
      var entry$0 = caml_call1(Stdlib_Queue[5], pool[13]);
      pool[12] = pool[12] - 1 | 0;
      var
       _E_ =
         function(entry){
           return function(param){return caml_call1(pool[4], entry[1]);};
          }
          (entry$0);
      caml_call2(System[3], pool[2], _E_);
     }
    }
    function release(pool, entry){
     if(can_reuse(pool, entry)){
      var
       _z_ =
         function(ok){
          if(ok){
           entry[3] = caml_call1(Mtime_clock[2], 0);
           caml_call2(Stdlib_Queue[3], entry, pool[13]);
           dispose_expiring(pool);
          }
          else{
           var _C_ = function(f){return caml_call3(f, 0, 0, _h_);};
           caml_call2(Logs[12], [0, pool[7]], _C_);
           pool[12] = pool[12] - 1 | 0;
          }
          return schedule(pool);
         };
      caml_call2(pool[5], entry[1], _z_);
      return caml_call1(System[1][2], 0);
     }
     pool[12] = pool[12] - 1 | 0;
     function _A_(param){return schedule(pool);}
     var _B_ = caml_call1(pool[4], entry[1]);
     return caml_call2(System[1][1][2], _B_, _A_);
    }
    function use(opt, f, pool){
     if(opt) var sth = opt[1], priority = sth; else var priority = 0.;
     function _w_(entry){
      function _x_(param){
       entry[2] = entry[2] + 1 | 0;
       return release(pool, entry);
      }
      function _y_(param){return caml_call1(f, entry[1]);}
      return caml_call2(System[1][4], _y_, _x_);
     }
     return symbol(acquire(priority, pool), _w_);
    }
    function drain(pool){
     if(0 === pool[12]){
      var
       _s_ = pool[15],
       _t_ =
         function(alarm){caml_call1(Alarm[2], alarm); pool[15] = 0; return 0;};
      caml_call1(caml_call1(Stdlib_Option[9], _t_), _s_);
      return caml_call1(System[1][2], 0);
     }
     function _u_(param){return drain(pool);}
     var match = caml_call1(Stdlib_Queue[6], pool[13]);
     if(match){
      var entry = match[1];
      pool[12] = pool[12] - 1 | 0;
      var _v_ = caml_call1(pool[4], entry[1]);
     }
     else
      var _v_ = wait(0., pool);
     return caml_call2(System[1][1][1], _v_, _u_);
    }
    return [0, , , , create, size, , , , , , , , use, drain];
   }
   function schedule(param, _r_, _q_, _p_){return 0;}
   function unschedule(param){return 0;}
   var No_alarm = [0, schedule, unschedule];
   function _i_(_n_){
    var _o_ = Make(_n_, No_alarm);
    return [0, _o_[5], _o_[13], _o_[14], _o_[4]];
   }
   var
    Caqti_platform_Pool =
      [0,
       function(_l_, _k_){
        var _m_ = Make(_l_, _k_);
        return [0, _m_[5], _m_[13], _m_[14], _m_[4]];
       },
       _i_];
   runtime.caml_register_global
    (21, Caqti_platform_Pool, "Caqti_platform__Pool");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Logging
//# unitInfo: Requires: Logs
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Logs = global_data.Logs,
    default_log_src = caml_call2(Logs[7][1], 0, "caqti"),
    request_log_src = caml_call2(Logs[7][1], 0, "caqti.request"),
    Caqti_platform_Logging = [0, default_log_src, request_log_src];
   runtime.caml_register_global
    (3, Caqti_platform_Logging, "Caqti_platform__Logging");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Driver_loader
//# unitInfo: Requires: Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    drivers = caml_call2(Stdlib_Hashtbl[1], 0, 5);
   function register(scheme, p){
    return caml_call3(Stdlib_Hashtbl[5], drivers, scheme, p);
   }
   function Make(System){
    var provides_unix = 0;
    function find_and_apply(scheme){
     var match = caml_call2(Stdlib_Hashtbl[7], drivers, scheme);
     if(! match) return 0;
     var F = match[1];
     return [0, caml_call1(F, System)];
    }
    return [0, provides_unix, find_and_apply];
   }
   var Caqti_platform_Driver_loader = [0, register, Make];
   runtime.caml_register_global
    (1, Caqti_platform_Driver_loader, "Caqti_platform__Driver_loader");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Conv
//# unitInfo: Requires: Ptime, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Caqti_platform_datetuple_o$1 = "Caqti_platform.datetuple_of_iso8601",
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ptime = global_data.Ptime,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_String = global_data.Stdlib__String,
    _c_ =
      [0,
       [11, "Cannot parse date ", [3, 0, [12, 46, 0]]],
       "Cannot parse date %S."],
    _d_ =
      [0,
       [11, "Date ", [2, 0, [11, " is out of range.", 0]]],
       "Date %s is out of range."],
    cst_00 = ":00",
    cst_Z = "Z",
    _b_ = [0, [11, " in value ", [3, 0, [12, 46, 0]]], " in value %S."],
    _a_ =
      [0,
       [4,
        0,
        [0, 2, 4],
        0,
        [12, 45, [4, 0, [0, 2, 2], 0, [12, 45, [4, 0, [0, 2, 2], 0, 0]]]]],
       "%04d-%02d-%02d"],
    cst_Caqti_platform_datetuple_o = cst_Caqti_platform_datetuple_o$1,
    cst_Caqti_platform_datetuple_o$0 = cst_Caqti_platform_datetuple_o$1;
   function datetuple_of_iso8601(s){
    if
     (10 === caml_ml_string_length(s)
      && 45 === caml_string_get(s, 4) && 45 === caml_string_get(s, 7))
     try{
      var
       _j_ = caml_int_of_string(caml_call3(Stdlib_String[16], s, 8, 2)),
       _k_ = caml_int_of_string(caml_call3(Stdlib_String[16], s, 5, 2)),
       _l_ =
         [0,
          caml_int_of_string(caml_call3(Stdlib_String[16], s, 0, 4)),
          _k_,
          _j_];
      return _l_;
     }
     catch(_m_){
      var _i_ = caml_wrap_exception(_m_);
      if(_i_[1] === Stdlib[7])
       return caml_call1(Stdlib[2], cst_Caqti_platform_datetuple_o);
      throw caml_maybe_attach_backtrace(_i_, 0);
     }
    return caml_call1(Stdlib[2], cst_Caqti_platform_datetuple_o$0);
   }
   function iso8601_of_datetuple(param){
    var d = param[3], m = param[2], y = param[1];
    return caml_call4(Stdlib_Printf[4], _a_, y, m, d);
   }
   function ptime_of_rfc3339_utc(s){
    var n = caml_ml_string_length(s);
    a:
    if(13 <= n && ! (90 === caml_string_get(s, n - 1 | 0))){
     if
      (43 !== caml_string_get(s, n - 3 | 0)
       && 45 !== caml_string_get(s, n - 3 | 0)){
      if
       (43 !== caml_string_get(s, n - 6 | 0)
        && 45 !== caml_string_get(s, n - 6 | 0)){
       var input = caml_call2(Stdlib[28], s, cst_Z);
       break a;
      }
      var input = s;
      break a;
     }
     var input = caml_call2(Stdlib[28], s, cst_00);
    }
    else
     var input = s;
    var _h_ = caml_call4(Ptime[31], 0, 0, 0, input);
    if(0 === _h_[0]){var t = _h_[1][1]; return [0, t];}
    var
     err = _h_[1][2][2],
     buf = caml_call1(Stdlib_Buffer[1], 64),
     ppf = caml_call1(Stdlib_Format[114], buf);
    caml_call2(Ptime[28], ppf, err);
    caml_call3(Stdlib_Format[137], ppf, _b_, input);
    caml_call2(Stdlib_Format[38], ppf, 0);
    return [1, caml_call1(Stdlib_Buffer[2], buf)];
   }
   function pdate_of_iso8601(s){
    try{
     var _f_ = datetuple_of_iso8601(s), val = caml_call2(Ptime[22], 0, _f_);
    }
    catch(_g_){
     var _e_ = caml_wrap_exception(_g_);
     if(_e_[1] === Stdlib[7])
      return [1, caml_call2(Stdlib_Printf[4], _c_, s)];
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
    if(! val) return [1, caml_call2(Stdlib_Printf[4], _d_, s)];
    var pdate = val[1];
    return [0, pdate];
   }
   function iso8601_of_pdate(x){
    return iso8601_of_datetuple(caml_call2(Ptime[23], 0, x));
   }
   var
    Caqti_platform_Conv =
      [0,
       datetuple_of_iso8601,
       iso8601_of_datetuple,
       ptime_of_rfc3339_utc,
       pdate_of_iso8601,
       iso8601_of_pdate];
   runtime.caml_register_global
    (14, Caqti_platform_Conv, "Caqti_platform__Conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Connector
//# unitInfo: Requires: Caqti_connect_config, Caqti_driver_info, Caqti_error, Caqti_pool_config, Stdlib, Stdlib__Gc, Stdlib__Hashtbl, Stdlib__Printf, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_A_suitable_driver_for_the_ = "A suitable driver for the URI-scheme ",
    cst_Your_entry_point_provides_ =
      "Your entry point provides both the networking and unix components.",
    cst_Your_entry_point_provides_$0 =
      "Your entry point provides the networking but not the unix component, which is required by drivers based on C bindings.",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    msg = "Missing URI scheme.",
    Stdlib = global_data.Stdlib,
    Caqti_connect_config = global_data.Caqti_connect_config,
    Caqti_pool_config = global_data.Caqti_pool_config,
    Caqti_driver_info = global_data.Caqti_driver_info,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Uri = global_data.Uri,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Caqti_error = global_data.Caqti_error,
    Stdlib_Printf = global_data.Stdlib__Printf,
    dynload_library = [0, 0],
    cst_Caqti_connect_Make_connect = "Caqti_connect.Make.connect_pool",
    _b_ =
      [0,
       [11, cst_Your_entry_point_provides_, 0],
       cst_Your_entry_point_provides_],
    _e_ =
      [0,
       [11, cst_Your_entry_point_provides_$0, 0],
       cst_Your_entry_point_provides_$0],
    _c_ =
      [0,
       [11,
        cst_A_suitable_driver_for_the_,
        [2, 0, [11, " was not found. ", 0]]],
       "A suitable driver for the URI-scheme %s was not found. "],
    _d_ =
      [0,
       [11,
        cst_A_suitable_driver_for_the_,
        [2,
         0,
         [11, " was not found after linking in ", [2, 0, [11, ". ", 0]]]]],
       "A suitable driver for the URI-scheme %s was not found after linking in %s. "],
    cst_caqti_driver = "caqti-driver-",
    cst_caqti_driver_postgresql = "caqti-driver-postgresql",
    _a_ =
      [0,
       [11,
        "Neither ",
        [2,
         0,
         [11, " nor a dynamic loader is linked into the application.", 0]]],
       "Neither %s nor a dynamic loader is linked into the application."];
   function define_loader(load){dynload_library[1] = [0, load]; return 0;}
   function load_library(lib){
    var match = dynload_library[1];
    if(! match) return [1, caml_call2(Stdlib_Printf[4], _a_, lib)];
    var load = match[1];
    return caml_call1(load, lib);
   }
   function set_tweaks_version(param){
    if(! param) return function(_y_){return _y_;};
    var x = param[1];
    return caml_call1
            (caml_call1(Caqti_connect_config[3], Caqti_connect_config[5]), x);
   }
   var
    Caqti_platform_Connector =
      [0,
       define_loader,
       load_library,
       function(System, Pool, Loader){
        function symbol(m, f){
         function _x_(r){
          if(0 !== r[0]) return caml_call1(System[1][2], r);
          var x = r[1];
          return caml_call1(f, x);
         }
         return caml_call2(System[1][1][1], m, _x_);
        }
        function symbol$0(m, f){
         function _w_(r){
          if(0 !== r[0]) return r;
          var x = r[1];
          return [0, caml_call1(f, x)];
         }
         return caml_call2(System[1][1][2], m, _w_);
        }
        var
         drivers = caml_call2(Stdlib_Hashtbl[1], 0, 11),
         message_cont = Loader[1] ? _b_ : _e_,
         _f_ = caml_call2(Stdlib[98], _c_, message_cont),
         message_static = caml_call1(Stdlib_Printf[4], _f_),
         _g_ = caml_call2(Stdlib[98], _d_, message_cont),
         message_dynamic = caml_call1(Stdlib_Printf[4], _g_);
        function load_driver(uri){
         var match$3 = caml_call1(Uri[29], uri);
         if(! match$3)
          return [1,
                  caml_call2(Caqti_error[6], uri, [0, Caqti_error[4], msg])];
         var scheme = match$3[1];
         try{
          var _u_ = [0, caml_call2(Stdlib_Hashtbl[6], drivers, scheme)];
          return _u_;
         }
         catch(_v_){
          var _t_ = caml_wrap_exception(_v_);
          if(_t_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_t_, 0);
          var match = caml_call1(Loader[2], scheme);
          if(match)
           var driver = match[1], r = [0, driver];
          else{
           var match$0 = dynload_library[1];
           if(match$0){
            var load = match$0[1];
            a:
            {
             if
              (caml_string_notequal(scheme, "postgres")
               && caml_string_notequal(scheme, "postgresql")){
              var
               driver_lib = caml_call2(Stdlib[28], cst_caqti_driver, scheme);
              break a;
             }
             var driver_lib = cst_caqti_driver_postgresql;
            }
            var match$1 = caml_call1(load, driver_lib);
            if(0 === match$1[0]){
             var match$2 = caml_call1(Loader[2], scheme);
             if(match$2)
              var driver$0 = match$2[1], r = [0, driver$0];
             else
              var
               msg$0 = caml_call2(message_dynamic, scheme, driver_lib),
               r =
                 [1,
                  caml_call2(Caqti_error[7], uri, [0, Caqti_error[4], msg$0])];
            }
            else
             var
              msg$1 = match$1[1],
              r =
                [1,
                 caml_call2(Caqti_error[7], uri, [0, Caqti_error[4], msg$1])];
           }
           else
            var
             msg$2 = caml_call1(message_static, scheme),
             r =
               [1,
                caml_call2(Caqti_error[7], uri, [0, Caqti_error[4], msg$2])];
          }
          if(0 !== r[0]) return r;
          var driver$1 = r[1];
          caml_call3(Stdlib_Hashtbl[5], drivers, scheme, driver$1);
          return [0, driver$1];
         }
        }
        function connect(env, opt, tweaks_version, sw, stdenv, uri){
         if(opt)
          var sth = opt[1], config = sth;
         else
          var config = Caqti_connect_config[1];
         var
          config$0 = caml_call1(set_tweaks_version(tweaks_version), config);
         caml_call1(System[2][2], sw);
         var match = load_driver(uri);
         if(0 === match[0]){
          var
           driver = match[1],
           _s_ =
             function(conn){
              var
               driver_info = conn[1],
               driver_connection = conn[2],
               Response = conn[3],
               call = conn[4],
               set_statement_timeout = conn[5],
               start = conn[6],
               commit = conn[7],
               rollback = conn[8],
               deallocate = conn[9],
               disconnect = conn[10],
               validate = conn[11],
               check = conn[12],
               exec = conn[13],
               exec_with_affected_count = conn[14],
               find = conn[15],
               find_opt = conn[16],
               fold = conn[17],
               fold_s = conn[18],
               iter_s = conn[19],
               collect_list = conn[20],
               rev_collect_list = conn[21],
               with_transaction = conn[22],
               populate = conn[23],
               hook = caml_call2(System[2][3], sw, disconnect);
              function disconnect$0(param){
               caml_call1(System[2][4], hook);
               return caml_call1(disconnect, 0);
              }
              return [0,
                      driver_info,
                      driver_connection,
                      Response,
                      call,
                      set_statement_timeout,
                      start,
                      commit,
                      rollback,
                      deallocate,
                      disconnect$0,
                      validate,
                      check,
                      exec,
                      exec_with_affected_count,
                      find,
                      find_opt,
                      fold,
                      fold_s,
                      iter_s,
                      collect_list,
                      rev_collect_list,
                      with_transaction,
                      populate];
             };
          return symbol$0
                  (caml_call5(driver[2], sw, stdenv, env, config$0, uri), _s_);
         }
         var err = match[1];
         return caml_call1(System[1][2], [1, err]);
        }
        function with_connection(env, config, tweaks_version, stdenv, uri, f){
         function _r_(sw){
          return symbol
                  (connect(env, config, tweaks_version, sw, stdenv, uri), f);
         }
         return caml_call1(System[2][1], _r_);
        }
        function connect_pool
        (pool_config, post_connect, env, opt, tweaks_version, sw, stdenv, uri){
         if(opt)
          var sth = opt[1], config = sth;
         else
          var config = Caqti_connect_config[1];
         if(pool_config)
          var pool_config$0 = pool_config[1], pool_config$1 = pool_config$0;
         else
          var pool_config$1 = caml_call1(Caqti_pool_config[3], 0);
         var
          config$0 = caml_call1(set_tweaks_version(tweaks_version), config);
         caml_call1(System[2][2], sw);
         function check_arg(cond){
          var _q_ = 1 - cond;
          return _q_
                  ? caml_call1(Stdlib[1], cst_Caqti_connect_Make_connect)
                  : _q_;
         }
         var
          match =
            caml_call1
             (caml_call1(Caqti_pool_config[5], Caqti_pool_config[8]),
              pool_config$1),
          match$0 =
            caml_call1
             (caml_call1(Caqti_pool_config[5], Caqti_pool_config[9]),
              pool_config$1);
         if(match){
          var max_size = match[1];
          if(match$0){
           var max_idle_size = match$0[1];
           check_arg(0 <= max_size ? 1 : 0);
           var
            _h_ = 0 <= max_idle_size ? 1 : 0,
            _i_ = _h_ ? max_idle_size <= max_size ? 1 : 0 : _h_;
           check_arg(_i_);
          }
          else
           check_arg(0 <= max_size ? 1 : 0);
         }
         else if(match$0) check_arg(0);
         var match$1 = load_driver(uri);
         if(0 !== match$1[0]){var err = match$1[1]; return [1, err];}
         var driver = match$1[1];
         if(post_connect)
          var
           post_connect$0 = post_connect[1],
           connect =
             function(param){
              function _o_(conn){
               function _p_(param){return conn;}
               return symbol$0(caml_call1(post_connect$0, conn), _p_);
              }
              return symbol
                      (caml_call5(driver[2], sw, stdenv, env, config$0, uri), _o_);
             };
         else
          var
           connect =
             function(param){
              return caml_call5(driver[2], sw, stdenv, env, config$0, uri);
             };
         function disconnect(Db){return caml_call1(Db[10], 0);}
         function validate(Db){return caml_call1(Db[11], 0);}
         function check(Db){return Db[12];}
         var
          di = driver[1],
          match$2 = caml_call1(Caqti_driver_info[7], di),
          match$3 = caml_call1(Caqti_driver_info[6], di),
          match$4 =
            caml_call1
             (caml_call1(Caqti_pool_config[5], Caqti_pool_config[9]),
              pool_config$1);
         a:
         if(match$2)
          var
           pool_config$2 =
             match$3
              ? pool_config$1
              : caml_call1
                (caml_call1
                  (caml_call1(Caqti_pool_config[6], Caqti_pool_config[9]), 0),
                 pool_config$1);
         else if(match$3){
          if(match$4 && 0 === match$4[1]){
           var
            _l_ =
              caml_call1
               (caml_call1
                 (caml_call1(Caqti_pool_config[6], Caqti_pool_config[8]), 1),
                pool_config$1),
            pool_config$2 =
              caml_call1
               (caml_call1
                 (caml_call1(Caqti_pool_config[6], Caqti_pool_config[9]), 0),
                _l_);
           break a;
          }
          var
           _m_ =
             caml_call1
              (caml_call1
                (caml_call1(Caqti_pool_config[6], Caqti_pool_config[8]), 1),
               pool_config$1),
           pool_config$2 =
             caml_call1
              (caml_call1
                (caml_call1(Caqti_pool_config[6], Caqti_pool_config[9]), 1),
               _m_);
         }
         else
          var
           _n_ =
             caml_call1
              (caml_call1
                (caml_call1(Caqti_pool_config[6], Caqti_pool_config[8]), 1),
               pool_config$1),
           pool_config$2 =
             caml_call1
              (caml_call1
                (caml_call1(Caqti_pool_config[6], Caqti_pool_config[9]), 0),
               _n_);
         var
          pool =
            caml_call8
             (Pool[4],
              [0, pool_config$2],
              [0, check],
              [0, validate],
              0,
              sw,
              stdenv,
              connect,
              disconnect);
         function _j_(param){return caml_call1(Pool[3], pool);}
         var hook = caml_call2(System[2][3], sw, _j_);
         function _k_(param){return caml_call1(System[2][4], hook);}
         caml_call2(Stdlib_Gc[3], _k_, pool);
         return [0, pool];
        }
        return [0, connect, with_connection, connect_pool];
       }];
   runtime.caml_register_global
    (20, Caqti_platform_Connector, "Caqti_platform__Connector");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_platform__Connection_utils
//# unitInfo: Requires: Caqti_mult, Caqti_query, Caqti_request, Caqti_type, Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__Result, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$1 = ", ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Caqti_query = global_data.Caqti_query,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Caqti_mult = global_data.Caqti_mult,
    Caqti_type = global_data.Caqti_type,
    Caqti_request = global_data.Caqti_request,
    Stdlib_Result = global_data.Stdlib__Result,
    Stdlib = global_data.Stdlib,
    _a_ = [0, [0, ")"], 0],
    _b_ =
      [0,
       [11, "INSERT INTO ", [2, 0, [11, " (", [2, 0, [11, ") VALUES (", 0]]]]],
       "INSERT INTO %s (%s) VALUES ("],
    cst_detected = " detected.",
    cst_Invalid_concurrent_usage_o = "Invalid concurrent usage of ";
   function Make_helpers(System){
    function assert_single_use(what, in_use, f){
     if(in_use[1]){
      var
       _H_ = caml_call2(Stdlib[28], what, cst_detected),
       _I_ = caml_call2(Stdlib[28], cst_Invalid_concurrent_usage_o, _H_);
      caml_call1(Stdlib[2], _I_);
     }
     in_use[1] = 1;
     function _J_(param){in_use[1] = 0; return caml_call1(System[1][2], 0);}
     function _K_(param){
      function _L_(res){in_use[1] = 0; return res;}
      var _M_ = caml_call1(f, 0);
      return caml_call2(System[1][1][2], _M_, _L_);
     }
     return caml_call2(System[1][5], _K_, _J_);
    }
    return [0, assert_single_use];
   }
   function _c_(System, C){
    function symbol(m, f){
     function _G_(r){
      if(0 !== r[0]) return caml_call1(System[1][2], r);
      var x = r[1];
      return caml_call1(f, x);
     }
     return caml_call2(System[1][1][1], m, _G_);
    }
    function populate(table, columns, row_type, data){
     var columns_tuple = caml_call2(Stdlib_String[7], cst, columns);
     function _v_(i, param){return [3, i];}
     var
      _w_ = caml_call2(Stdlib_List[21], _v_, columns),
      _x_ = [0, caml_call2(Caqti_query[1], cst$0, _w_), _a_],
      q =
        [5,
         [0,
          [0, caml_call3(Stdlib_Printf[4], _b_, table, columns_tuple)],
          _x_]];
     function _y_(param){return q;}
     var
      request =
        caml_call5
         (Caqti_request[1], 0, row_type, Caqti_type[30], Caqti_mult[1], _y_);
     function _z_(param){
      function _A_(res){
       function _D_(param){
        if(0 === res[0]) return caml_call1(C[5], 0);
        var err = res[1];
        if(typeof err !== "number" && 48080384 === err[1]){
         var
          err$0 = err[2],
          _F_ =
            function(param){
             return caml_call1(System[1][2], [1, [0, 48080384, err$0]]);
            };
         return symbol(caml_call1(C[6], 0), _F_);
        }
        return caml_call1(System[1][2], [1, err]);
       }
       var _E_ = caml_call1(C[7], request);
       return caml_call2(System[1][1][1], _E_, _D_);
      }
      var
       _B_ = caml_call2(C[2], C[1][3], request),
       _C_ = caml_call2(System[6][3], _B_, data);
      return caml_call2(System[1][1][1], _C_, _A_);
     }
     return symbol(caml_call1(C[4], 0), _z_);
    }
    return [0, populate];
   }
   var
    Caqti_platform_Connection_util =
      [0,
       Make_helpers,
       function(System, C){
        var Response = C[1];
        function exec(q, p){return caml_call3(C[2], Response[3], q, p);}
        function find(q, p){return caml_call3(C[2], Response[4], q, p);}
        function find_opt(q, p){return caml_call3(C[2], Response[5], q, p);}
        function fold(q, f, p, acc){
         function _u_(resp){return caml_call3(Response[6], f, resp, acc);}
         return caml_call3(C[2], _u_, q, p);
        }
        function fold_s(q, f, p, acc){
         function _t_(resp){return caml_call3(Response[7], f, resp, acc);}
         return caml_call3(C[2], _t_, q, p);
        }
        function iter_s(q, f, p){
         function _s_(resp){return caml_call2(Response[8], f, resp);}
         return caml_call3(C[2], _s_, q, p);
        }
        function collect_list(q, p){
         function f(resp){
          var
           _q_ = caml_call1(Stdlib_Result[8], Stdlib_List[10]),
           _r_ = caml_call3(Response[6], Stdlib_List[5], resp, 0);
          return caml_call2(System[1][1][2], _r_, _q_);
         }
         return caml_call3(C[2], f, q, p);
        }
        function rev_collect_list(q, p){
         function f(resp){
          return caml_call3(Response[6], Stdlib_List[5], resp, 0);
         }
         return caml_call3(C[2], f, q, p);
        }
        function exec_with_affected_count(q, p){
         function f(response){
          function _o_(execResult){
           if(0 === execResult[0]) return caml_call1(Response[2], response);
           var x = execResult[1];
           return caml_call1(System[1][2], [1, x]);
          }
          var _p_ = caml_call1(Response[3], response);
          return caml_call2(System[1][1][1], _p_, _o_);
         }
         return caml_call3(C[2], f, q, p);
        }
        function with_transaction(f){
         var m = caml_call1(C[4], 0);
         function _d_(r){
          if(0 !== r[0]) return caml_call1(System[1][2], r);
          function _e_(param){
           function _l_(_n_){return 0;}
           var _m_ = caml_call1(C[6], 0);
           return caml_call2(System[1][1][2], _m_, _l_);
          }
          function _f_(param){
           function _g_(r){
            if(0 === r[0]){
             var
              y = r[1],
              m = caml_call1(C[5], 0),
              _i_ = function(r){return 0 === r[0] ? [0, y] : r;};
             return caml_call2(System[1][1][2], m, _i_);
            }
            function _j_(param){return r;}
            var _k_ = caml_call1(C[6], 0);
            return caml_call2(System[1][1][2], _k_, _j_);
           }
           var _h_ = caml_call1(f, 0);
           return caml_call2(System[1][1][1], _h_, _g_);
          }
          return caml_call2(System[1][5], _f_, _e_);
         }
         return caml_call2(System[1][1][1], m, _d_);
        }
        return [0,
                exec,
                exec_with_affected_count,
                find,
                find_opt,
                fold,
                fold_s,
                iter_s,
                collect_list,
                rev_collect_list,
                with_transaction];
       },
       _c_];
   runtime.caml_register_global
    (15, Caqti_platform_Connection_util, "Caqti_platform__Connection_utils");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
