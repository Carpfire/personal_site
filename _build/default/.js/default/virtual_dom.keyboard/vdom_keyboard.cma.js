// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Vdom_keyboard__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Vdom_keyboard = [0],
    Vdom_keyboard$0 = [0, Vdom_keyboard];
   runtime.caml_register_global(0, Vdom_keyboard$0, "Vdom_keyboard__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Import
//# unitInfo: Requires: Js_of_ocaml, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_keyboard_Import = "Vdom_keyboard__Import",
    cst_vdom_keyboard = "vdom_keyboard";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom = global_data.Virtual_dom;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][1], "keyboard/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_vdom_keyboard, "import.ml");
   var Top_level_effects = Virtual_dom[1];
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Import);
   var Vdom_keyboard_Import = [0, Top_level_effects];
   runtime.caml_register_global
    (12, Vdom_keyboard_Import, cst_Vdom_keyboard_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Keyboard_event
//# unitInfo: Requires: Core__Bool, Core__List, Core__Option, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_AltGraph = "AltGraph",
    cst_Vdom_keyboard_Keyboard_eve$0 = "Vdom_keyboard__Keyboard_event",
    cst_vdom_keyboard$0 = "vdom_keyboard";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Bool = global_data.Core__Bool,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Keyboard_eve$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], "keyboard/src/keyboard_event.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "keyboard_event.ml");
   var
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _d_ = [0, "Meta", 0],
    _c_ = [0, "Shift", 0],
    _b_ = [0, "Alt", [0, cst_AltGraph, 0]],
    _a_ = [0, "Control", [0, cst_AltGraph, 0]],
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Keyboard_eve = cst_Vdom_keyboard_Keyboard_eve$0;
   function key(e){return caml_call1(Js_of_ocaml_Dom_html[26][1], e);}
   function modifier(e, states, fallback){
    function _s_(state_name){
     return e.getModifierState(runtime.caml_jsstring_of_string(state_name))
            | 0;
    }
    var
     from_state = caml_call2(Core_List[23], states, _s_),
     from_fallback = fallback | 0,
     from_state$0 = from_state || from_fallback;
    return from_state$0;
   }
   function ctrl(t2){return modifier(t2, _a_, t2.ctrlKey);}
   function alt(t3){return modifier(t3, _b_, t3.altKey);}
   function shift(t4){return modifier(t4, _c_, t4.shiftKey);}
   function meta(t5){return modifier(t5, _d_, t5.metaKey);}
   function match_modifiers(ctrl$0, alt$0, shift$0, meta$0, e){
    function _m_(param){
     var
      env = param[2],
      cond = param[1],
      _r_ = caml_call1(Core_Bool[32], env);
     return caml_call3(Core_Option[41], cond, 1, _r_);
    }
    var
     _n_ = [0, [0, meta$0, meta(e)], 0],
     _o_ = [0, [0, shift$0, shift(e)], _n_],
     _p_ = [0, [0, alt$0, alt(e)], _o_],
     _q_ = [0, [0, ctrl$0, ctrl(e)], _p_];
    return caml_call2(Core_List[24], _q_, _m_);
   }
   function no_modifiers(e){return match_modifiers(_h_, _g_, _f_, _e_, e);}
   function map(e, f){
    var
     _i_ = key(e),
     _j_ = [0, 858945253, meta(e)],
     _k_ = [0, 256924770, shift(e)],
     _l_ = [0, 3256585, alt(e)];
    return caml_call1(f, [0, [0, 748795083, ctrl(e)], _l_, _k_, _j_, _i_]);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Keyboard_eve);
   var
    Vdom_keyboard_Keyboard_event =
      [0, key, ctrl, alt, shift, meta, match_modifiers, no_modifiers, map];
   runtime.caml_register_global
    (28, Vdom_keyboard_Keyboard_event, cst_Vdom_keyboard_Keyboard_eve$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Keystroke
//# unitInfo: Requires: Base__Hash, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Comparable, Core__Hashable, Core__List, Core__Option, Core__Sexp, Core__Sexpable, Core__String, Expect_test_config, Inline_test_config, Js_of_ocaml__Dom_html, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Vdom_keyboard__Keyboard_event
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$20 = "",
    cst_1 = " 1 ",
    cst_Ctrl_1 = " Ctrl+1 ",
    cst$21 = "*",
    cst$23 = "+",
    cst$22 = "-",
    cst$24 = ".",
    cst$26 = "/",
    cst$25 = "=",
    cst_AltLeft = "AltLeft",
    cst_AltRight = "AltRight",
    cst_ArrowDown = "ArrowDown",
    cst_ArrowLeft = "ArrowLeft",
    cst_ArrowRight = "ArrowRight",
    cst_ArrowUp = "ArrowUp",
    cst_Backquote = "Backquote",
    cst_Backslash = "Backslash",
    cst_Backspace = "Backspace",
    cst_BracketLeft = "BracketLeft",
    cst_BracketRight = "BracketRight",
    cst_BrowserBack = "BrowserBack",
    cst_BrowserFavorites = "BrowserFavorites",
    cst_BrowserForward = "BrowserForward",
    cst_BrowserHome = "BrowserHome",
    cst_BrowserRefresh = "BrowserRefresh",
    cst_BrowserSearch = "BrowserSearch",
    cst_BrowserStop = "BrowserStop",
    cst_CapsLock = "CapsLock",
    cst_Comma = "Comma",
    cst_ContextMenu = "ContextMenu",
    cst_ControlLeft = "ControlLeft",
    cst_ControlRight = "ControlRight",
    cst_Delete = "Delete",
    cst_Digit0 = "Digit0",
    cst_Digit1 = "Digit1",
    cst_Digit2 = "Digit2",
    cst_Digit3 = "Digit3",
    cst_Digit4 = "Digit4",
    cst_Digit5 = "Digit5",
    cst_Digit6 = "Digit6",
    cst_Digit7 = "Digit7",
    cst_Digit8 = "Digit8",
    cst_Digit9 = "Digit9",
    cst_End = "End",
    cst_Enter = "Enter",
    cst_Equal = "Equal",
    cst_Escape = "Escape",
    cst_F1 = "F1",
    cst_F10 = "F10",
    cst_F11 = "F11",
    cst_F12 = "F12",
    cst_F2 = "F2",
    cst_F3 = "F3",
    cst_F4 = "F4",
    cst_F5 = "F5",
    cst_F6 = "F6",
    cst_F7 = "F7",
    cst_F8 = "F8",
    cst_F9 = "F9",
    cst_Home = "Home",
    cst_Insert = "Insert",
    cst_IntlBackslash = "IntlBackslash",
    cst_IntlYen = "IntlYen",
    cst_KeyA = "KeyA",
    cst_KeyB = "KeyB",
    cst_KeyC = "KeyC",
    cst_KeyD = "KeyD",
    cst_KeyE = "KeyE",
    cst_KeyF = "KeyF",
    cst_KeyG = "KeyG",
    cst_KeyH = "KeyH",
    cst_KeyI = "KeyI",
    cst_KeyJ = "KeyJ",
    cst_KeyK = "KeyK",
    cst_KeyL = "KeyL",
    cst_KeyM = "KeyM",
    cst_KeyN = "KeyN",
    cst_KeyO = "KeyO",
    cst_KeyP = "KeyP",
    cst_KeyQ = "KeyQ",
    cst_KeyR = "KeyR",
    cst_KeyS = "KeyS",
    cst_KeyT = "KeyT",
    cst_KeyU = "KeyU",
    cst_KeyV = "KeyV",
    cst_KeyW = "KeyW",
    cst_KeyX = "KeyX",
    cst_KeyY = "KeyY",
    cst_KeyZ = "KeyZ",
    cst_MediaPlayPause = "MediaPlayPause",
    cst_MediaStop = "MediaStop",
    cst_MediaTrackNext = "MediaTrackNext",
    cst_MediaTrackPrevious = "MediaTrackPrevious",
    cst_MetaLeft = "MetaLeft",
    cst_MetaRight = "MetaRight",
    cst_Minus = "Minus",
    cst_NumLock = "NumLock",
    cst_Numpad0 = "Numpad0",
    cst_Numpad1 = "Numpad1",
    cst_Numpad2 = "Numpad2",
    cst_Numpad3 = "Numpad3",
    cst_Numpad4 = "Numpad4",
    cst_Numpad5 = "Numpad5",
    cst_Numpad6 = "Numpad6",
    cst_Numpad7 = "Numpad7",
    cst_Numpad8 = "Numpad8",
    cst_Numpad9 = "Numpad9",
    cst_NumpadAdd = "NumpadAdd",
    cst_NumpadDecimal = "NumpadDecimal",
    cst_NumpadDivide = "NumpadDivide",
    cst_NumpadEnter = "NumpadEnter",
    cst_NumpadEqual = "NumpadEqual",
    cst_NumpadMultiply = "NumpadMultiply",
    cst_NumpadSubtract = "NumpadSubtract",
    cst_OSLeft = "OSLeft",
    cst_OSRight = "OSRight",
    cst_PageDown = "PageDown",
    cst_PageUp = "PageUp",
    cst_Pause = "Pause",
    cst_Period = "Period",
    cst_PrintScreen = "PrintScreen",
    cst_Quote = "Quote",
    cst_ScrollLock = "ScrollLock",
    cst_Semicolon = "Semicolon",
    cst_ShiftLeft = "ShiftLeft",
    cst_ShiftRight = "ShiftRight",
    cst_Slash = "Slash",
    cst_Space = "Space",
    cst_Tab = "Tab",
    cst_Unidentified = "Unidentified",
    cst_Vdom_keyboard_Keystroke$0 = "Vdom_keyboard__Keystroke",
    cst_VolumeDown = "VolumeDown",
    cst_VolumeMute = "VolumeMute",
    cst_VolumeUp = "VolumeUp",
    cst_alt$2 = "alt",
    cst_altLeft = "altLeft",
    cst_altRight = "altRight",
    cst_arrowDown = "arrowDown",
    cst_arrowLeft = "arrowLeft",
    cst_arrowRight = "arrowRight",
    cst_arrowUp = "arrowUp",
    cst_backquote = "backquote",
    cst_backslash = "backslash",
    cst_backspace = "backspace",
    cst_bracketLeft = "bracketLeft",
    cst_bracketRight = "bracketRight",
    cst_browserBack = "browserBack",
    cst_browserFavorites = "browserFavorites",
    cst_browserForward = "browserForward",
    cst_browserHome = "browserHome",
    cst_browserRefresh = "browserRefresh",
    cst_browserSearch = "browserSearch",
    cst_browserStop = "browserStop",
    cst_capsLock = "capsLock",
    cst_comma = "comma",
    cst_contextMenu = "contextMenu",
    cst_controlLeft = "controlLeft",
    cst_controlRight = "controlRight",
    cst_ctrl$2 = "ctrl",
    cst_delete = "delete",
    cst_digit0 = "digit0",
    cst_digit1 = "digit1",
    cst_digit2 = "digit2",
    cst_digit3 = "digit3",
    cst_digit4 = "digit4",
    cst_digit5 = "digit5",
    cst_digit6 = "digit6",
    cst_digit7 = "digit7",
    cst_digit8 = "digit8",
    cst_digit9 = "digit9",
    cst_end = "end",
    cst_enter = "enter",
    cst_equal = "equal",
    cst_escape = "escape",
    cst_f1 = "f1",
    cst_f10 = "f10",
    cst_f11 = "f11",
    cst_f12 = "f12",
    cst_f2 = "f2",
    cst_f3 = "f3",
    cst_f4 = "f4",
    cst_f5 = "f5",
    cst_f6 = "f6",
    cst_f7 = "f7",
    cst_f8 = "f8",
    cst_f9 = "f9",
    cst_home = "home",
    cst_insert = "insert",
    cst_intlBackslash = "intlBackslash",
    cst_intlYen = "intlYen",
    cst_key$2 = "key",
    cst_keyA = "keyA",
    cst_keyB = "keyB",
    cst_keyC = "keyC",
    cst_keyD = "keyD",
    cst_keyE = "keyE",
    cst_keyF = "keyF",
    cst_keyG = "keyG",
    cst_keyH = "keyH",
    cst_keyI = "keyI",
    cst_keyJ = "keyJ",
    cst_keyK = "keyK",
    cst_keyL = "keyL",
    cst_keyM = "keyM",
    cst_keyN = "keyN",
    cst_keyO = "keyO",
    cst_keyP = "keyP",
    cst_keyQ = "keyQ",
    cst_keyR = "keyR",
    cst_keyS = "keyS",
    cst_keyT = "keyT",
    cst_keyU = "keyU",
    cst_keyV = "keyV",
    cst_keyW = "keyW",
    cst_keyX = "keyX",
    cst_keyY = "keyY",
    cst_keyZ = "keyZ",
    cst_keyboard_src_keystroke_ml$0 = "keyboard/src/keystroke.ml",
    cst_keyboard_src_keystroke_ml_$4 =
      "keyboard/src/keystroke.ml.Keyboard_code.T.t",
    cst_keyboard_src_keystroke_ml_$3 = "keyboard/src/keystroke.ml.T.t",
    cst_mediaPlayPause = "mediaPlayPause",
    cst_mediaStop = "mediaStop",
    cst_mediaTrackNext = "mediaTrackNext",
    cst_mediaTrackPrevious = "mediaTrackPrevious",
    cst_meta$2 = "meta",
    cst_metaLeft = "metaLeft",
    cst_metaRight = "metaRight",
    cst_minus = "minus",
    cst_numLock = "numLock",
    cst_numpad0 = "numpad0",
    cst_numpad1 = "numpad1",
    cst_numpad2 = "numpad2",
    cst_numpad3 = "numpad3",
    cst_numpad4 = "numpad4",
    cst_numpad5 = "numpad5",
    cst_numpad6 = "numpad6",
    cst_numpad7 = "numpad7",
    cst_numpad8 = "numpad8",
    cst_numpad9 = "numpad9",
    cst_numpadAdd = "numpadAdd",
    cst_numpadDecimal = "numpadDecimal",
    cst_numpadDivide = "numpadDivide",
    cst_numpadEnter = "numpadEnter",
    cst_numpadEqual = "numpadEqual",
    cst_numpadMultiply = "numpadMultiply",
    cst_numpadSubtract = "numpadSubtract",
    cst_oSLeft = "oSLeft",
    cst_oSRight = "oSRight",
    cst_pageDown = "pageDown",
    cst_pageUp = "pageUp",
    cst_pause = "pause",
    cst_period = "period",
    cst_printScreen = "printScreen",
    cst_quote = "quote",
    cst_scrollLock = "scrollLock",
    cst_semicolon = "semicolon",
    cst_shift$2 = "shift",
    cst_shiftLeft = "shiftLeft",
    cst_shiftRight = "shiftRight",
    cst_slash = "slash",
    cst_space = "space",
    cst_t$3 = "t",
    cst_tab = "tab",
    cst_unidentified = "unidentified",
    cst_vdom_keyboard$0 = "vdom_keyboard",
    cst_volumeDown = "volumeDown",
    cst_volumeMute = "volumeMute",
    cst_volumeUp = "volumeUp",
    caml_int_compare = runtime.caml_int_compare,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$19 = cst$20,
    cst$18 = cst$20,
    cst$17 = cst$20,
    cst$16 = cst$20,
    shift_str = cst$20,
    cst = cst$21,
    cst$0 = cst$22,
    cst$1 = cst$23,
    cst$2 = cst$24,
    cst$3 = cst$25,
    cst$4 = cst$26,
    cst$5 = cst$22,
    cst$6 = cst$25,
    cst$7 = "[",
    cst$8 = "]",
    cst$9 = ";",
    cst$10 = "'",
    cst$11 = "`",
    cst$12 = "\\",
    cst$13 = ",",
    cst$14 = cst$24,
    cst$15 = cst$26,
    error_source_003 = cst_keyboard_src_keystroke_ml_$4,
    all =
      caml_list_of_js_array
       ([0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         45,
         46,
         47,
         48,
         49,
         50,
         51,
         52,
         53,
         54,
         55,
         56,
         57,
         58,
         59,
         60,
         61,
         62,
         63,
         64,
         65,
         66,
         67,
         68,
         69,
         70,
         71,
         72,
         73,
         74,
         75,
         76,
         77,
         78,
         79,
         80,
         81,
         82,
         83,
         84,
         85,
         86,
         87,
         88,
         89,
         90,
         91,
         92,
         93,
         94,
         95,
         96,
         97,
         98,
         99,
         100,
         101,
         102,
         103,
         104,
         105,
         106,
         107,
         108,
         109,
         110,
         111,
         112,
         113,
         114,
         115,
         116,
         117,
         118,
         119,
         120,
         121,
         122,
         123]),
    t_sexp_grammar =
      [3,
       caml_list_of_js_array
        ([2,
          [1, [0, cst_Unidentified, 0]],
          [1, [0, cst_KeyA, 0]],
          [1, [0, cst_KeyB, 0]],
          [1, [0, cst_KeyC, 0]],
          [1, [0, cst_KeyD, 0]],
          [1, [0, cst_KeyE, 0]],
          [1, [0, cst_KeyF, 0]],
          [1, [0, cst_KeyG, 0]],
          [1, [0, cst_KeyH, 0]],
          [1, [0, cst_KeyI, 0]],
          [1, [0, cst_KeyJ, 0]],
          [1, [0, cst_KeyK, 0]],
          [1, [0, cst_KeyL, 0]],
          [1, [0, cst_KeyM, 0]],
          [1, [0, cst_KeyN, 0]],
          [1, [0, cst_KeyO, 0]],
          [1, [0, cst_KeyP, 0]],
          [1, [0, cst_KeyQ, 0]],
          [1, [0, cst_KeyR, 0]],
          [1, [0, cst_KeyS, 0]],
          [1, [0, cst_KeyT, 0]],
          [1, [0, cst_KeyU, 0]],
          [1, [0, cst_KeyV, 0]],
          [1, [0, cst_KeyW, 0]],
          [1, [0, cst_KeyX, 0]],
          [1, [0, cst_KeyY, 0]],
          [1, [0, cst_KeyZ, 0]],
          [1, [0, cst_Digit0, 0]],
          [1, [0, cst_Digit1, 0]],
          [1, [0, cst_Digit2, 0]],
          [1, [0, cst_Digit3, 0]],
          [1, [0, cst_Digit4, 0]],
          [1, [0, cst_Digit5, 0]],
          [1, [0, cst_Digit6, 0]],
          [1, [0, cst_Digit7, 0]],
          [1, [0, cst_Digit8, 0]],
          [1, [0, cst_Digit9, 0]],
          [1, [0, cst_Minus, 0]],
          [1, [0, cst_Equal, 0]],
          [1, [0, cst_Tab, 0]],
          [1, [0, cst_Enter, 0]],
          [1, [0, cst_Space, 0]],
          [1, [0, cst_Escape, 0]],
          [1, [0, cst_Backspace, 0]],
          [1, [0, cst_Insert, 0]],
          [1, [0, cst_Delete, 0]],
          [1, [0, cst_CapsLock, 0]],
          [1, [0, cst_BracketLeft, 0]],
          [1, [0, cst_BracketRight, 0]],
          [1, [0, cst_Semicolon, 0]],
          [1, [0, cst_Quote, 0]],
          [1, [0, cst_Backquote, 0]],
          [1, [0, cst_Backslash, 0]],
          [1, [0, cst_Comma, 0]],
          [1, [0, cst_Period, 0]],
          [1, [0, cst_Slash, 0]],
          [1, [0, cst_F1, 0]],
          [1, [0, cst_F2, 0]],
          [1, [0, cst_F3, 0]],
          [1, [0, cst_F4, 0]],
          [1, [0, cst_F5, 0]],
          [1, [0, cst_F6, 0]],
          [1, [0, cst_F7, 0]],
          [1, [0, cst_F8, 0]],
          [1, [0, cst_F9, 0]],
          [1, [0, cst_F10, 0]],
          [1, [0, cst_F11, 0]],
          [1, [0, cst_F12, 0]],
          [1, [0, cst_Numpad0, 0]],
          [1, [0, cst_Numpad1, 0]],
          [1, [0, cst_Numpad2, 0]],
          [1, [0, cst_Numpad3, 0]],
          [1, [0, cst_Numpad4, 0]],
          [1, [0, cst_Numpad5, 0]],
          [1, [0, cst_Numpad6, 0]],
          [1, [0, cst_Numpad7, 0]],
          [1, [0, cst_Numpad8, 0]],
          [1, [0, cst_Numpad9, 0]],
          [1, [0, cst_NumpadMultiply, 0]],
          [1, [0, cst_NumpadSubtract, 0]],
          [1, [0, cst_NumpadAdd, 0]],
          [1, [0, cst_NumpadDecimal, 0]],
          [1, [0, cst_NumpadEqual, 0]],
          [1, [0, cst_NumpadEnter, 0]],
          [1, [0, cst_NumpadDivide, 0]],
          [1, [0, cst_NumLock, 0]],
          [1, [0, cst_ControlLeft, 0]],
          [1, [0, cst_ControlRight, 0]],
          [1, [0, cst_MetaLeft, 0]],
          [1, [0, cst_MetaRight, 0]],
          [1, [0, cst_ShiftLeft, 0]],
          [1, [0, cst_ShiftRight, 0]],
          [1, [0, cst_AltLeft, 0]],
          [1, [0, cst_AltRight, 0]],
          [1, [0, cst_ArrowLeft, 0]],
          [1, [0, cst_ArrowRight, 0]],
          [1, [0, cst_ArrowUp, 0]],
          [1, [0, cst_ArrowDown, 0]],
          [1, [0, cst_PageUp, 0]],
          [1, [0, cst_PageDown, 0]],
          [1, [0, cst_Home, 0]],
          [1, [0, cst_End, 0]],
          [1, [0, cst_VolumeMute, 0]],
          [1, [0, cst_VolumeDown, 0]],
          [1, [0, cst_VolumeUp, 0]],
          [1, [0, cst_MediaTrackPrevious, 0]],
          [1, [0, cst_MediaTrackNext, 0]],
          [1, [0, cst_MediaPlayPause, 0]],
          [1, [0, cst_MediaStop, 0]],
          [1, [0, cst_ContextMenu, 0]],
          [1, [0, cst_BrowserSearch, 0]],
          [1, [0, cst_BrowserHome, 0]],
          [1, [0, cst_BrowserFavorites, 0]],
          [1, [0, cst_BrowserRefresh, 0]],
          [1, [0, cst_BrowserStop, 0]],
          [1, [0, cst_BrowserForward, 0]],
          [1, [0, cst_BrowserBack, 0]],
          [1, [0, cst_OSLeft, 0]],
          [1, [0, cst_OSRight, 0]],
          [1, [0, cst_ScrollLock, 0]],
          [1, [0, cst_PrintScreen, 0]],
          [1, [0, cst_IntlBackslash, 0]],
          [1, [0, cst_IntlYen, 0]],
          [1, [0, cst_Pause, 0]]])],
    error_source_010 = cst_keyboard_src_keystroke_ml_$3,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_String = global_data.Core__String,
    Core_Sexp = global_data.Core__Sexp,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Vdom_keyboard_Keyboard_event = global_data.Vdom_keyboard__Keyboard_event,
    Base_Hash = global_data.Base__Hash,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Core_Sexpable = global_data.Core__Sexpable,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Comparable = global_data.Core__Comparable,
    Core_Hashable = global_data.Core__Hashable,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Keystroke$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_keyboard_src_keystroke_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "keystroke.ml");
   var
    cst_to_string_hum = "%{to_string_hum}\n",
    _bT_ = [12, 10, 0],
    _bU_ = [0, 0],
    _bV_ = [0, 0],
    _bW_ = [0, 0],
    _bX_ = [0, 0],
    _bY_ = [0, 0],
    _bZ_ = [0, 0],
    _b0_ = [0, 0],
    _b1_ = [0, 0],
    _b2_ = [0, 0],
    _b3_ = [0, 0],
    _b4_ = [0, 0],
    _b5_ = [0, 0],
    _b6_ = [0, 0],
    cst_Ctrl = "Ctrl+",
    cst_Alt = "Alt+",
    cst_Meta = "Meta+",
    cst_Shift = "Shift+",
    cst_Esc = "Esc",
    cst_Bksp = "Bksp",
    _bx_ = [0, ")"],
    _by_ = [0, "!"],
    _bz_ = [0, "@"],
    _bA_ = [0, "#"],
    _bB_ = [0, "$"],
    _bC_ = [0, "%"],
    _bD_ = [0, "^"],
    _bE_ = [0, "&"],
    _bF_ = [0, cst$21],
    _bG_ = [0, "("],
    _bH_ = [0, "_"],
    _bI_ = [0, cst$23],
    _bJ_ = [0, "{"],
    _bK_ = [0, "}"],
    _bL_ = [0, ":"],
    _bM_ = [0, '"'],
    _bN_ = [0, "~"],
    _bO_ = [0, "|"],
    _bP_ = [0, "<"],
    _bQ_ = [0, ">"],
    _bR_ = [0, "?"],
    cst_Arrow = "Arrow",
    cst_Numpad = "Numpad",
    cst_Digit = "Digit",
    cst_Key = "Key",
    cst_meta$1 = cst_meta$2,
    cst_shift$1 = cst_shift$2,
    cst_alt$1 = cst_alt$2,
    cst_ctrl$1 = cst_ctrl$2,
    cst_key$1 = cst_key$2,
    cst_keyboard_src_keystroke_ml_$2 = cst_keyboard_src_keystroke_ml_$3,
    _bn_ = [0, cst_meta$2],
    _bo_ = [0, cst_shift$2],
    _bp_ = [0, cst_alt$2],
    _bq_ = [0, cst_ctrl$2],
    _br_ = [0, cst_key$2],
    cst_meta = cst_meta$2,
    cst_shift = cst_shift$2,
    cst_alt = cst_alt$2,
    cst_ctrl = cst_ctrl$2,
    cst_key = cst_key$2,
    _bl_ = [1, cst_keyboard_src_keystroke_ml_$4],
    cst_keyboard_src_keystroke_ml_$0 = cst_keyboard_src_keystroke_ml_$4,
    _a_ = [0, cst_Unidentified],
    _b_ = [0, cst_KeyA],
    _c_ = [0, cst_KeyB],
    _d_ = [0, cst_KeyC],
    _e_ = [0, cst_KeyD],
    _f_ = [0, cst_KeyE],
    _g_ = [0, cst_KeyF],
    _h_ = [0, cst_KeyG],
    _i_ = [0, cst_KeyH],
    _j_ = [0, cst_KeyI],
    _k_ = [0, cst_KeyJ],
    _l_ = [0, cst_KeyK],
    _m_ = [0, cst_KeyL],
    _n_ = [0, cst_KeyM],
    _o_ = [0, cst_KeyN],
    _p_ = [0, cst_KeyO],
    _q_ = [0, cst_KeyP],
    _r_ = [0, cst_KeyQ],
    _s_ = [0, cst_KeyR],
    _t_ = [0, cst_KeyS],
    _u_ = [0, cst_KeyT],
    _v_ = [0, cst_KeyU],
    _w_ = [0, cst_KeyV],
    _x_ = [0, cst_KeyW],
    _y_ = [0, cst_KeyX],
    _z_ = [0, cst_KeyY],
    _A_ = [0, cst_KeyZ],
    _B_ = [0, cst_Digit0],
    _C_ = [0, cst_Digit1],
    _D_ = [0, cst_Digit2],
    _E_ = [0, cst_Digit3],
    _F_ = [0, cst_Digit4],
    _G_ = [0, cst_Digit5],
    _H_ = [0, cst_Digit6],
    _I_ = [0, cst_Digit7],
    _J_ = [0, cst_Digit8],
    _K_ = [0, cst_Digit9],
    _L_ = [0, cst_Minus],
    _M_ = [0, cst_Equal],
    _N_ = [0, cst_Tab],
    _O_ = [0, cst_Enter],
    _P_ = [0, cst_Space],
    _Q_ = [0, cst_Escape],
    _R_ = [0, cst_Backspace],
    _S_ = [0, cst_Insert],
    _T_ = [0, cst_Delete],
    _U_ = [0, cst_CapsLock],
    _V_ = [0, cst_BracketLeft],
    _W_ = [0, cst_BracketRight],
    _X_ = [0, cst_Semicolon],
    _Y_ = [0, cst_Quote],
    _Z_ = [0, cst_Backquote],
    ___ = [0, cst_Backslash],
    _$_ = [0, cst_Comma],
    _aa_ = [0, cst_Period],
    _ab_ = [0, cst_Slash],
    _ac_ = [0, cst_F1],
    _ad_ = [0, cst_F2],
    _ae_ = [0, cst_F3],
    _af_ = [0, cst_F4],
    _ag_ = [0, cst_F5],
    _ah_ = [0, cst_F6],
    _ai_ = [0, cst_F7],
    _aj_ = [0, cst_F8],
    _ak_ = [0, cst_F9],
    _al_ = [0, cst_F10],
    _am_ = [0, cst_F11],
    _an_ = [0, cst_F12],
    _ao_ = [0, cst_Numpad0],
    _ap_ = [0, cst_Numpad1],
    _aq_ = [0, cst_Numpad2],
    _ar_ = [0, cst_Numpad3],
    _as_ = [0, cst_Numpad4],
    _at_ = [0, cst_Numpad5],
    _au_ = [0, cst_Numpad6],
    _av_ = [0, cst_Numpad7],
    _aw_ = [0, cst_Numpad8],
    _ax_ = [0, cst_Numpad9],
    _ay_ = [0, cst_NumpadMultiply],
    _az_ = [0, cst_NumpadSubtract],
    _aA_ = [0, cst_NumpadAdd],
    _aB_ = [0, cst_NumpadDecimal],
    _aC_ = [0, cst_NumpadEqual],
    _aD_ = [0, cst_NumpadEnter],
    _aE_ = [0, cst_NumpadDivide],
    _aF_ = [0, cst_NumLock],
    _aG_ = [0, cst_ControlLeft],
    _aH_ = [0, cst_ControlRight],
    _aI_ = [0, cst_MetaLeft],
    _aJ_ = [0, cst_MetaRight],
    _aK_ = [0, cst_ShiftLeft],
    _aL_ = [0, cst_ShiftRight],
    _aM_ = [0, cst_AltLeft],
    _aN_ = [0, cst_AltRight],
    _aO_ = [0, cst_ArrowLeft],
    _aP_ = [0, cst_ArrowRight],
    _aQ_ = [0, cst_ArrowUp],
    _aR_ = [0, cst_ArrowDown],
    _aS_ = [0, cst_PageUp],
    _aT_ = [0, cst_PageDown],
    _aU_ = [0, cst_Home],
    _aV_ = [0, cst_End],
    _aW_ = [0, cst_VolumeMute],
    _aX_ = [0, cst_VolumeDown],
    _aY_ = [0, cst_VolumeUp],
    _aZ_ = [0, cst_MediaTrackPrevious],
    _a0_ = [0, cst_MediaTrackNext],
    _a1_ = [0, cst_MediaPlayPause],
    _a2_ = [0, cst_MediaStop],
    _a3_ = [0, cst_ContextMenu],
    _a4_ = [0, cst_BrowserSearch],
    _a5_ = [0, cst_BrowserHome],
    _a6_ = [0, cst_BrowserFavorites],
    _a7_ = [0, cst_BrowserRefresh],
    _a8_ = [0, cst_BrowserStop],
    _a9_ = [0, cst_BrowserForward],
    _a__ = [0, cst_BrowserBack],
    _a$_ = [0, cst_OSLeft],
    _ba_ = [0, cst_OSRight],
    _bb_ = [0, cst_ScrollLock],
    _bc_ = [0, cst_PrintScreen],
    _bd_ = [0, cst_IntlBackslash],
    _be_ = [0, cst_IntlYen],
    _bf_ = [0, cst_Pause],
    _bg_ =
      caml_list_of_js_array
       ([[0, cst_Unidentified, 0],
         [0, cst_KeyA, 0],
         [0, cst_KeyB, 0],
         [0, cst_KeyC, 0],
         [0, cst_KeyD, 0],
         [0, cst_KeyE, 0],
         [0, cst_KeyF, 0],
         [0, cst_KeyG, 0],
         [0, cst_KeyH, 0],
         [0, cst_KeyI, 0],
         [0, cst_KeyJ, 0],
         [0, cst_KeyK, 0],
         [0, cst_KeyL, 0],
         [0, cst_KeyM, 0],
         [0, cst_KeyN, 0],
         [0, cst_KeyO, 0],
         [0, cst_KeyP, 0],
         [0, cst_KeyQ, 0],
         [0, cst_KeyR, 0],
         [0, cst_KeyS, 0],
         [0, cst_KeyT, 0],
         [0, cst_KeyU, 0],
         [0, cst_KeyV, 0],
         [0, cst_KeyW, 0],
         [0, cst_KeyX, 0],
         [0, cst_KeyY, 0],
         [0, cst_KeyZ, 0],
         [0, cst_Digit0, 0],
         [0, cst_Digit1, 0],
         [0, cst_Digit2, 0],
         [0, cst_Digit3, 0],
         [0, cst_Digit4, 0],
         [0, cst_Digit5, 0],
         [0, cst_Digit6, 0],
         [0, cst_Digit7, 0],
         [0, cst_Digit8, 0],
         [0, cst_Digit9, 0],
         [0, cst_Minus, 0],
         [0, cst_Equal, 0],
         [0, cst_Tab, 0],
         [0, cst_Enter, 0],
         [0, cst_Space, 0],
         [0, cst_Escape, 0],
         [0, cst_Backspace, 0],
         [0, cst_Insert, 0],
         [0, cst_Delete, 0],
         [0, cst_CapsLock, 0],
         [0, cst_BracketLeft, 0],
         [0, cst_BracketRight, 0],
         [0, cst_Semicolon, 0],
         [0, cst_Quote, 0],
         [0, cst_Backquote, 0],
         [0, cst_Backslash, 0],
         [0, cst_Comma, 0],
         [0, cst_Period, 0],
         [0, cst_Slash, 0],
         [0, cst_F1, 0],
         [0, cst_F2, 0],
         [0, cst_F3, 0],
         [0, cst_F4, 0],
         [0, cst_F5, 0],
         [0, cst_F6, 0],
         [0, cst_F7, 0],
         [0, cst_F8, 0],
         [0, cst_F9, 0],
         [0, cst_F10, 0],
         [0, cst_F11, 0],
         [0, cst_F12, 0],
         [0, cst_Numpad0, 0],
         [0, cst_Numpad1, 0],
         [0, cst_Numpad2, 0],
         [0, cst_Numpad3, 0],
         [0, cst_Numpad4, 0],
         [0, cst_Numpad5, 0],
         [0, cst_Numpad6, 0],
         [0, cst_Numpad7, 0],
         [0, cst_Numpad8, 0],
         [0, cst_Numpad9, 0],
         [0, cst_NumpadMultiply, 0],
         [0, cst_NumpadSubtract, 0],
         [0, cst_NumpadAdd, 0],
         [0, cst_NumpadDecimal, 0],
         [0, cst_NumpadEqual, 0],
         [0, cst_NumpadEnter, 0],
         [0, cst_NumpadDivide, 0],
         [0, cst_NumLock, 0],
         [0, cst_ControlLeft, 0],
         [0, cst_ControlRight, 0],
         [0, cst_MetaLeft, 0],
         [0, cst_MetaRight, 0],
         [0, cst_ShiftLeft, 0],
         [0, cst_ShiftRight, 0],
         [0, cst_AltLeft, 0],
         [0, cst_AltRight, 0],
         [0, cst_ArrowLeft, 0],
         [0, cst_ArrowRight, 0],
         [0, cst_ArrowUp, 0],
         [0, cst_ArrowDown, 0],
         [0, cst_PageUp, 0],
         [0, cst_PageDown, 0],
         [0, cst_Home, 0],
         [0, cst_End, 0],
         [0, cst_VolumeMute, 0],
         [0, cst_VolumeDown, 0],
         [0, cst_VolumeUp, 0],
         [0, cst_MediaTrackPrevious, 0],
         [0, cst_MediaTrackNext, 0],
         [0, cst_MediaPlayPause, 0],
         [0, cst_MediaStop, 0],
         [0, cst_ContextMenu, 0],
         [0, cst_BrowserSearch, 0],
         [0, cst_BrowserHome, 0],
         [0, cst_BrowserFavorites, 0],
         [0, cst_BrowserRefresh, 0],
         [0, cst_BrowserStop, 0],
         [0, cst_BrowserForward, 0],
         [0, cst_BrowserBack, 0],
         [0, cst_OSLeft, 0],
         [0, cst_OSRight, 0],
         [0, cst_ScrollLock, 0],
         [0, cst_PrintScreen, 0],
         [0, cst_IntlBackslash, 0],
         [0, cst_IntlYen, 0],
         [0, cst_Pause, 0]]),
    cst_t = cst_t$3,
    cst_keyboard_src_keystroke_ml_ = "keyboard/src/keystroke.ml:6:4",
    cst_t$0 = cst_t$3,
    cst_meta$0 = cst_meta$2,
    cst_shift$0 = cst_shift$2,
    cst_alt$0 = cst_alt$2,
    cst_ctrl$0 = cst_ctrl$2,
    cst_key$0 = cst_key$2,
    cst_t$1 = cst_t$3,
    cst_keyboard_src_keystroke_ml_$1 = "keyboard/src/keystroke.ml:400:2",
    cst_t$2 = cst_t$3,
    _b7_ = [0, [0, [0, " a ", [0, cst$20]], [0, 10455, 10466, 10473]]],
    _b8_ = [0, 10455, 10457, 10474],
    _b$_ = [0, [0, [0, " Shift+a ", [0, cst$20]], [0, 10500, 10511, 10524]]],
    _ca_ = [0, 10500, 10502, 10525],
    _cd_ =
      [0,
       [0,
        [0, " Ctrl+Alt+Shift+Meta+a ", [0, cst$20]],
        [0, 10577, 10588, 10615]]],
    _ce_ = [0, 10577, 10579, 10616],
    _ch_ = [0, [0, [0, cst_1, [0, cst$20]], [0, 10634, 10645, 10652]]],
    _ci_ = [0, 10634, 10636, 10653],
    _cl_ = [0, [0, [0, cst_Ctrl_1, [0, cst$20]], [0, 10680, 10691, 10703]]],
    _cm_ = [0, 10680, 10682, 10704],
    _cp_ = [0, [0, [0, cst_1, [0, cst$20]], [0, 10723, 10734, 10741]]],
    _cq_ = [0, 10723, 10725, 10742],
    _ct_ = [0, [0, [0, cst_Ctrl_1, [0, cst$20]], [0, 10770, 10781, 10793]]],
    _cu_ = [0, 10770, 10772, 10794],
    _cx_ = [0, [0, [0, cst_Ctrl_1, [0, cst$20]], [0, 10822, 10833, 10845]]],
    _cy_ = [0, 10822, 10824, 10846],
    _cB_ = [0, [0, [0, " , ", [0, cst$20]], [0, 10863, 10874, 10881]]],
    _cC_ = [0, 10863, 10865, 10882],
    _cF_ = [0, [0, [0, " < ", [0, cst$20]], [0, 10909, 10920, 10927]]],
    _cG_ = [0, 10909, 10911, 10928],
    _cJ_ = [0, [0, [0, " Ctrl+, ", [0, cst$20]], [0, 10954, 10965, 10977]]],
    _cK_ = [0, 10954, 10956, 10978],
    _cN_ = [0, [0, [0, " Ctrl+< ", [0, cst$20]], [0, 11014, 11025, 11037]]],
    _cO_ = [0, 11014, 11016, 11038],
    _cR_ = [0, cst$20],
    _cU_ = [0, 10302, 10302, 11038],
    _cV_ = [0, 11014, 11038, 11038],
    _cW_ = [0, 10302, 10302, 11038],
    cst_keyboard_src_keystroke_ml = cst_keyboard_src_keystroke_ml$0,
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Keystroke = cst_Vdom_keyboard_Keystroke$0;
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _dC_ = sexp_004[1], _dD_ = caml_string_compare(_dC_, cst_altLeft);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       I:
                                       {
                                        J:
                                        {
                                         K:
                                         {
                                          L:
                                          {
                                           M:
                                           {
                                            N:
                                            {
                                             O:
                                             {
                                              P:
                                              {
                                               Q:
                                               {
                                                R:
                                                {
                                                 S:
                                                 {
                                                  T:
                                                  {
                                                   U:
                                                   {
                                                    V:
                                                    {
                                                     W:
                                                     {
                                                      X:
                                                      {
                                                       Y:
                                                       {
                                                        Z:
                                                        {
                                                         _:
                                                         {
                                                          $:
                                                          {
                                                           aa:
                                                           {
                                                            ab:
                                                            {
                                                             ac:
                                                             {
                                                              ad:
                                                              {
                                                               ae:
                                                               {
                                                                af:
                                                                {
                                                                 ag:
                                                                 {
                                                                  ah:
                                                                  {
                                                                   ai:
                                                                   {
                                                                    aj:
                                                                    {
                                                                     ak:
                                                                     {
                                                                      al:
                                                                      {
                                                                       am:
                                                                       {
                                                                        an:
                                                                        {
                                                                         ao:
                                                                         {
                                                                          ap:
                                                                          {
                                                                           aq:
                                                                           {
                                                                            ar:
                                                                            {
                                                                             as:
                                                                             {
                                                                              at:
                                                                              {
                                                                               au:
                                                                               {
                                                                                av:
                                                                                {
                                                                                 aw:
                                                                                 {
                                                                                  ax:
                                                                                  {
                                                                                   ay:
                                                                                   {
                                                                                    az:
                                                                                    {
                                                                                     aA:
                                                                                     {
                                                                                      aB:
                                                                                      {
                                                                                       aC:
                                                                                       {
                                                                                        aD:
                                                                                        {
                                                                                         aE:
                                                                                         {
                                                                                          aF:
                                                                                          {
                                                                                           aG:
                                                                                           {
                                                                                            aH:
                                                                                            {
                                                                                             aI:
                                                                                             {
                                                                                              aJ:
                                                                                              {
                                                                                               aK:
                                                                                               {
                                                                                                aL:
                                                                                                {
                                                                                                 aM:
                                                                                                 {
                                                                                                  aN:
                                                                                                  {
                                                                                                   aO:
                                                                                                   {
                                                                                                    aP:
                                                                                                    {
                                                                                                     aQ:
                                                                                                     {
                                                                                                      aR:
                                                                                                      {
                                                                                                       aS:
                                                                                                       {
                                                                                                        aT:
                                                                                                        {
                                                                                                         aU:
                                                                                                         {
                                                                                                          aV:
                                                                                                          {
                                                                                                           aW:
                                                                                                           {
                                                                                                            aX:
                                                                                                            {
                                                                                                             aY:
                                                                                                             {
                                                                                                              aZ:
                                                                                                              {
                                                                                                               a0:
                                                                                                               {
                                                                                                                a1:
                                                                                                                {
                                                                                                                 a2:
                                                                                                                 {
                                                                                                                  a3:
                                                                                                                  {
                                                                                                                   a4:
                                                                                                                   {
                                                                                                                    a5:
                                                                                                                    {
                                                                                                                     a6:
                                                                                                                     {
                                                                                                                      a7:
                                                                                                                      {
                                                                                                                       a8:
                                                                                                                       {
                                                                                                                        a9:
                                                                                                                        {
                                                                                                                         a_:
                                                                                                                         {
                                                                                                                          a$:
                                                                                                                          {
                                                                                                                           ba:
                                                                                                                           {
                                                                                                                            bb:
                                                                                                                            {
                                                                                                                             bc:
                                                                                                                             {
                                                                                                                              bd:
                                                                                                                              {
                                                                                                                               be:
                                                                                                                               {
                                                                                                                                bf:
                                                                                                                                {
                                                                                                                                 if(0 <= _dD_){
                                                                                                                                  if(0 >= _dD_) break h;
                                                                                                                                  var _dE_ = caml_string_compare(_dC_, cst_keyI);
                                                                                                                                  if(0 > _dE_){
                                                                                                                                   var _dM_ = caml_string_compare(_dC_, cst_digit7);
                                                                                                                                   if(0 <= _dM_){
                                                                                                                                    if(0 >= _dM_) break ai;
                                                                                                                                    var _dN_ = caml_string_compare(_dC_, cst_f7);
                                                                                                                                    if(0 <= _dN_){
                                                                                                                                     if(0 >= _dN_) break ah;
                                                                                                                                     var _dO_ = caml_string_compare(_dC_, cst_keyB);
                                                                                                                                     if(0 <= _dO_){
                                                                                                                                      if(0 >= _dO_) break ag;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_keyC)) break af;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_keyD)) break ae;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_keyE)) break ad;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_keyF)) break ac;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_keyG)) break ab;
                                                                                                                                      if(caml_string_notequal(_dC_, cst_keyH)) break a;
                                                                                                                                      break aa;
                                                                                                                                     }
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f8)) break $;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f9)) break _;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_home)) break Z;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_insert)) break Y;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_intlBackslash)) break X;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_intlYen)) break W;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_keyA)) break a;
                                                                                                                                     break V;
                                                                                                                                    }
                                                                                                                                    var _dP_ = caml_string_compare(_dC_, cst_f10);
                                                                                                                                    if(0 <= _dP_){
                                                                                                                                     if(0 >= _dP_) break U;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f11)) break T;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f12)) break S;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f2)) break R;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f3)) break Q;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f4)) break P;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_f5)) break O;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_f6)) break a;
                                                                                                                                     break N;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_digit8)) break M;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_digit9)) break L;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_end)) break K;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_enter)) break J;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_equal)) break I;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_escape)) break H;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_f1)) break a;
                                                                                                                                    break G;
                                                                                                                                   }
                                                                                                                                   var _dQ_ = caml_string_compare(_dC_, cst_browserSearch);
                                                                                                                                   if(0 <= _dQ_){
                                                                                                                                    if(0 >= _dQ_) break w;
                                                                                                                                    var _dR_ = caml_string_compare(_dC_, cst_digit0);
                                                                                                                                    if(0 <= _dR_){
                                                                                                                                     if(0 >= _dR_) break D;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_digit1)) break C;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_digit2)) break B;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_digit3)) break A;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_digit4)) break z;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_digit5)) break y;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_digit6)) break a;
                                                                                                                                     break x;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_browserStop)) break v;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_capsLock)) break u;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_comma)) break t;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_contextMenu)) break s;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_controlLeft)) break r;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_controlRight)) break q;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_delete)) break a;
                                                                                                                                    break E;
                                                                                                                                   }
                                                                                                                                   var _dS_ = caml_string_compare(_dC_, cst_backspace);
                                                                                                                                   if(0 <= _dS_){
                                                                                                                                    if(0 >= _dS_) break o;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_bracketLeft)) break n;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_bracketRight)) break m;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_browserBack)) break l;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_browserFavorites))
                                                                                                                                     break k;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_browserForward))
                                                                                                                                     break j;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_browserHome)) break i;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_browserRefresh)) break a;
                                                                                                                                    break F;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_altRight)) break g;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_arrowDown)) break f;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_arrowLeft)) break e;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_arrowRight)) break d;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_arrowUp)) break c;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_backquote)) break b;
                                                                                                                                   if(caml_string_notequal(_dC_, cst_backslash)) break a;
                                                                                                                                   break p;
                                                                                                                                  }
                                                                                                                                  if(0 < _dE_){
                                                                                                                                   var _dF_ = caml_string_compare(_dC_, cst_numpad5);
                                                                                                                                   if(0 <= _dF_){
                                                                                                                                    if(0 >= _dF_) break bf;
                                                                                                                                    var _dG_ = caml_string_compare(_dC_, cst_pause);
                                                                                                                                    if(0 <= _dG_){
                                                                                                                                     if(0 >= _dG_) break be;
                                                                                                                                     var _dH_ = caml_string_compare(_dC_, cst_slash);
                                                                                                                                     if(0 <= _dH_){
                                                                                                                                      if(0 >= _dH_) break bd;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_space)) break bc;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_tab)) break bb;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_unidentified)) break ba;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_volumeDown)) break a$;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_volumeMute)) break a_;
                                                                                                                                      if(caml_string_notequal(_dC_, cst_volumeUp)) break a;
                                                                                                                                      break a9;
                                                                                                                                     }
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_period)) break a8;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_printScreen)) break a7;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_quote)) break a6;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_scrollLock)) break a5;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_semicolon)) break a4;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_shiftLeft)) break a3;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_shiftRight)) break a;
                                                                                                                                     break a2;
                                                                                                                                    }
                                                                                                                                    var _dI_ = caml_string_compare(_dC_, cst_numpadEnter);
                                                                                                                                    if(0 <= _dI_){
                                                                                                                                     if(0 >= _dI_) break a1;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpadEqual)) break a0;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpadMultiply))
                                                                                                                                      break aZ;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpadSubtract))
                                                                                                                                      break aY;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_oSLeft)) break aX;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_oSRight)) break aW;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_pageDown)) break aV;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_pageUp)) break a;
                                                                                                                                     break aU;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpad6)) break aT;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpad7)) break aS;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpad8)) break aR;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpad9)) break aQ;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpadAdd)) break aP;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_numpadDecimal))
                                                                                                                                     break aO;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_numpadDivide)) break a;
                                                                                                                                    break aN;
                                                                                                                                   }
                                                                                                                                   var _dJ_ = caml_string_compare(_dC_, cst_keyY);
                                                                                                                                   if(0 <= _dJ_){
                                                                                                                                    if(0 >= _dJ_) break aM;
                                                                                                                                    var _dK_ = caml_string_compare(_dC_, cst_minus);
                                                                                                                                    if(0 <= _dK_){
                                                                                                                                     if(0 >= _dK_) break aL;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numLock)) break aK;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpad0)) break aJ;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpad1)) break aI;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpad2)) break aH;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_numpad3)) break aG;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_numpad4)) break a;
                                                                                                                                     break aF;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyZ)) break aE;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_mediaPlayPause))
                                                                                                                                     break aD;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_mediaStop)) break aC;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_mediaTrackNext))
                                                                                                                                     break aB;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_mediaTrackPrevious))
                                                                                                                                     break aA;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_metaLeft)) break az;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_metaRight)) break a;
                                                                                                                                    break ay;
                                                                                                                                   }
                                                                                                                                   var _dL_ = caml_string_compare(_dC_, cst_keyQ);
                                                                                                                                   if(0 <= _dL_){
                                                                                                                                    if(0 >= _dL_) break ax;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyR)) break aw;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyS)) break av;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyT)) break au;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyU)) break at;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyV)) break as;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_keyW)) break ar;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_keyX)) break a;
                                                                                                                                    break aq;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyJ)) break ap;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyK)) break ao;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyL)) break an;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyM)) break am;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyN)) break al;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_keyO)) break ak;
                                                                                                                                   if(caml_string_notequal(_dC_, cst_keyP)) break a;
                                                                                                                                   break aj;
                                                                                                                                  }
                                                                                                                                 }
                                                                                                                                 else{
                                                                                                                                  var _dT_ = caml_string_compare(_dC_, cst_KeyI);
                                                                                                                                  if(0 > _dT_){
                                                                                                                                   var _d1_ = caml_string_compare(_dC_, cst_Digit7);
                                                                                                                                   if(0 <= _d1_){
                                                                                                                                    if(0 >= _d1_) break ai;
                                                                                                                                    var _d2_ = caml_string_compare(_dC_, cst_F7);
                                                                                                                                    if(0 <= _d2_){
                                                                                                                                     if(0 >= _d2_) break ah;
                                                                                                                                     var _d3_ = caml_string_compare(_dC_, cst_KeyB);
                                                                                                                                     if(0 <= _d3_){
                                                                                                                                      if(0 >= _d3_) break ag;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_KeyC)) break af;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_KeyD)) break ae;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_KeyE)) break ad;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_KeyF)) break ac;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_KeyG)) break ab;
                                                                                                                                      if(caml_string_notequal(_dC_, cst_KeyH)) break a;
                                                                                                                                      break aa;
                                                                                                                                     }
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F8)) break $;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F9)) break _;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Home)) break Z;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Insert)) break Y;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_IntlBackslash)) break X;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_IntlYen)) break W;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_KeyA)) break a;
                                                                                                                                     break V;
                                                                                                                                    }
                                                                                                                                    var _d4_ = caml_string_compare(_dC_, cst_F10);
                                                                                                                                    if(0 <= _d4_){
                                                                                                                                     if(0 >= _d4_) break U;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F11)) break T;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F12)) break S;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F2)) break R;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F3)) break Q;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F4)) break P;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_F5)) break O;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_F6)) break a;
                                                                                                                                     break N;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Digit8)) break M;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Digit9)) break L;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_End)) break K;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Enter)) break J;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Equal)) break I;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Escape)) break H;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_F1)) break a;
                                                                                                                                    break G;
                                                                                                                                   }
                                                                                                                                   var _d5_ = caml_string_compare(_dC_, cst_BrowserRefresh);
                                                                                                                                   if(0 <= _d5_){
                                                                                                                                    if(0 >= _d5_) break F;
                                                                                                                                    var _d6_ = caml_string_compare(_dC_, cst_Delete);
                                                                                                                                    if(0 <= _d6_){
                                                                                                                                     if(0 >= _d6_) break E;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit0)) break D;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit1)) break C;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit2)) break B;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit3)) break A;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit4)) break z;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Digit5)) break y;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_Digit6)) break a;
                                                                                                                                     break x;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BrowserSearch)) break w;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BrowserStop)) break v;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_CapsLock)) break u;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Comma)) break t;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_ContextMenu)) break s;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_ControlLeft)) break r;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_ControlRight)) break a;
                                                                                                                                    break q;
                                                                                                                                   }
                                                                                                                                   var _d7_ = caml_string_compare(_dC_, cst_Backslash);
                                                                                                                                   if(0 <= _d7_){
                                                                                                                                    if(0 >= _d7_) break p;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Backspace)) break o;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BracketLeft)) break n;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BracketRight)) break m;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BrowserBack)) break l;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BrowserFavorites))
                                                                                                                                     break k;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_BrowserForward))
                                                                                                                                     break j;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_BrowserHome)) break a;
                                                                                                                                    break i;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_AltLeft)) break h;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_AltRight)) break g;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_ArrowDown)) break f;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_ArrowLeft)) break e;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_ArrowRight)) break d;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_ArrowUp)) break c;
                                                                                                                                   if(caml_string_notequal(_dC_, cst_Backquote)) break a;
                                                                                                                                   break b;
                                                                                                                                  }
                                                                                                                                  if(0 < _dT_){
                                                                                                                                   var _dU_ = caml_string_compare(_dC_, cst_Numpad5);
                                                                                                                                   if(0 <= _dU_){
                                                                                                                                    if(0 >= _dU_) break bf;
                                                                                                                                    var _dV_ = caml_string_compare(_dC_, cst_Pause);
                                                                                                                                    if(0 <= _dV_){
                                                                                                                                     if(0 >= _dV_) break be;
                                                                                                                                     var _dW_ = caml_string_compare(_dC_, cst_Slash);
                                                                                                                                     if(0 <= _dW_){
                                                                                                                                      if(0 >= _dW_) break bd;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_Space)) break bc;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_Tab)) break bb;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_Unidentified)) break ba;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_VolumeDown)) break a$;
                                                                                                                                      if(! caml_string_notequal(_dC_, cst_VolumeMute)) break a_;
                                                                                                                                      if(caml_string_notequal(_dC_, cst_VolumeUp)) break a;
                                                                                                                                      break a9;
                                                                                                                                     }
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Period)) break a8;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_PrintScreen)) break a7;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Quote)) break a6;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_ScrollLock)) break a5;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Semicolon)) break a4;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_ShiftLeft)) break a3;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_ShiftRight)) break a;
                                                                                                                                     break a2;
                                                                                                                                    }
                                                                                                                                    var _dX_ = caml_string_compare(_dC_, cst_NumpadEnter);
                                                                                                                                    if(0 <= _dX_){
                                                                                                                                     if(0 >= _dX_) break a1;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_NumpadEqual)) break a0;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_NumpadMultiply))
                                                                                                                                      break aZ;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_NumpadSubtract))
                                                                                                                                      break aY;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_OSLeft)) break aX;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_OSRight)) break aW;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_PageDown)) break aV;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_PageUp)) break a;
                                                                                                                                     break aU;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Numpad6)) break aT;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Numpad7)) break aS;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Numpad8)) break aR;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_Numpad9)) break aQ;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_NumpadAdd)) break aP;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_NumpadDecimal))
                                                                                                                                     break aO;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_NumpadDivide)) break a;
                                                                                                                                    break aN;
                                                                                                                                   }
                                                                                                                                   var _dY_ = caml_string_compare(_dC_, cst_KeyY);
                                                                                                                                   if(0 <= _dY_){
                                                                                                                                    if(0 >= _dY_) break aM;
                                                                                                                                    var _dZ_ = caml_string_compare(_dC_, cst_Minus);
                                                                                                                                    if(0 <= _dZ_){
                                                                                                                                     if(0 >= _dZ_) break aL;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_NumLock)) break aK;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Numpad0)) break aJ;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Numpad1)) break aI;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Numpad2)) break aH;
                                                                                                                                     if(! caml_string_notequal(_dC_, cst_Numpad3)) break aG;
                                                                                                                                     if(caml_string_notequal(_dC_, cst_Numpad4)) break a;
                                                                                                                                     break aF;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyZ)) break aE;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_MediaPlayPause))
                                                                                                                                     break aD;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_MediaStop)) break aC;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_MediaTrackNext))
                                                                                                                                     break aB;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_MediaTrackPrevious))
                                                                                                                                     break aA;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_MetaLeft)) break az;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_MetaRight)) break a;
                                                                                                                                    break ay;
                                                                                                                                   }
                                                                                                                                   var _d0_ = caml_string_compare(_dC_, cst_KeyQ);
                                                                                                                                   if(0 <= _d0_){
                                                                                                                                    if(0 >= _d0_) break ax;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyR)) break aw;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyS)) break av;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyT)) break au;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyU)) break at;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyV)) break as;
                                                                                                                                    if(! caml_string_notequal(_dC_, cst_KeyW)) break ar;
                                                                                                                                    if(caml_string_notequal(_dC_, cst_KeyX)) break a;
                                                                                                                                    break aq;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyJ)) break ap;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyK)) break ao;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyL)) break an;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyM)) break am;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyN)) break al;
                                                                                                                                   if(! caml_string_notequal(_dC_, cst_KeyO)) break ak;
                                                                                                                                   if(caml_string_notequal(_dC_, cst_KeyP)) break a;
                                                                                                                                   break aj;
                                                                                                                                  }
                                                                                                                                 }
                                                                                                                                 return 9;
                                                                                                                                }
                                                                                                                                return 73;
                                                                                                                               }
                                                                                                                               return 123;
                                                                                                                              }
                                                                                                                              return 55;
                                                                                                                             }
                                                                                                                             return 41;
                                                                                                                            }
                                                                                                                            return 39;
                                                                                                                           }
                                                                                                                           return 0;
                                                                                                                          }
                                                                                                                          return 103;
                                                                                                                         }
                                                                                                                         return 102;
                                                                                                                        }
                                                                                                                        return 104;
                                                                                                                       }
                                                                                                                       return 54;
                                                                                                                      }
                                                                                                                      return 120;
                                                                                                                     }
                                                                                                                     return 50;
                                                                                                                    }
                                                                                                                    return 119;
                                                                                                                   }
                                                                                                                   return 49;
                                                                                                                  }
                                                                                                                  return 90;
                                                                                                                 }
                                                                                                                 return 91;
                                                                                                                }
                                                                                                                return 83;
                                                                                                               }
                                                                                                               return 82;
                                                                                                              }
                                                                                                              return 78;
                                                                                                             }
                                                                                                             return 79;
                                                                                                            }
                                                                                                            return 117;
                                                                                                           }
                                                                                                           return 118;
                                                                                                          }
                                                                                                          return 99;
                                                                                                         }
                                                                                                         return 98;
                                                                                                        }
                                                                                                        return 74;
                                                                                                       }
                                                                                                       return 75;
                                                                                                      }
                                                                                                      return 76;
                                                                                                     }
                                                                                                     return 77;
                                                                                                    }
                                                                                                    return 80;
                                                                                                   }
                                                                                                   return 81;
                                                                                                  }
                                                                                                  return 84;
                                                                                                 }
                                                                                                 return 25;
                                                                                                }
                                                                                                return 37;
                                                                                               }
                                                                                               return 85;
                                                                                              }
                                                                                              return 68;
                                                                                             }
                                                                                             return 69;
                                                                                            }
                                                                                            return 70;
                                                                                           }
                                                                                           return 71;
                                                                                          }
                                                                                          return 72;
                                                                                         }
                                                                                         return 26;
                                                                                        }
                                                                                        return 107;
                                                                                       }
                                                                                       return 108;
                                                                                      }
                                                                                      return 106;
                                                                                     }
                                                                                     return 105;
                                                                                    }
                                                                                    return 88;
                                                                                   }
                                                                                   return 89;
                                                                                  }
                                                                                  return 17;
                                                                                 }
                                                                                 return 18;
                                                                                }
                                                                                return 19;
                                                                               }
                                                                               return 20;
                                                                              }
                                                                              return 21;
                                                                             }
                                                                             return 22;
                                                                            }
                                                                            return 23;
                                                                           }
                                                                           return 24;
                                                                          }
                                                                          return 10;
                                                                         }
                                                                         return 11;
                                                                        }
                                                                        return 12;
                                                                       }
                                                                       return 13;
                                                                      }
                                                                      return 14;
                                                                     }
                                                                     return 15;
                                                                    }
                                                                    return 16;
                                                                   }
                                                                   return 34;
                                                                  }
                                                                  return 62;
                                                                 }
                                                                 return 2;
                                                                }
                                                                return 3;
                                                               }
                                                               return 4;
                                                              }
                                                              return 5;
                                                             }
                                                             return 6;
                                                            }
                                                            return 7;
                                                           }
                                                           return 8;
                                                          }
                                                          return 63;
                                                         }
                                                         return 64;
                                                        }
                                                        return 100;
                                                       }
                                                       return 44;
                                                      }
                                                      return 121;
                                                     }
                                                     return 122;
                                                    }
                                                    return 1;
                                                   }
                                                   return 65;
                                                  }
                                                  return 66;
                                                 }
                                                 return 67;
                                                }
                                                return 57;
                                               }
                                               return 58;
                                              }
                                              return 59;
                                             }
                                             return 60;
                                            }
                                            return 61;
                                           }
                                           return 35;
                                          }
                                          return 36;
                                         }
                                         return 101;
                                        }
                                        return 40;
                                       }
                                       return 38;
                                      }
                                      return 42;
                                     }
                                     return 56;
                                    }
                                    return 113;
                                   }
                                   return 45;
                                  }
                                  return 27;
                                 }
                                 return 28;
                                }
                                return 29;
                               }
                               return 30;
                              }
                              return 31;
                             }
                             return 32;
                            }
                            return 33;
                           }
                           return 110;
                          }
                          return 114;
                         }
                         return 46;
                        }
                        return 53;
                       }
                       return 109;
                      }
                      return 86;
                     }
                     return 87;
                    }
                    return 52;
                   }
                   return 43;
                  }
                  return 47;
                 }
                 return 48;
                }
                return 116;
               }
               return 112;
              }
              return 115;
             }
             return 111;
            }
            return 92;
           }
           return 93;
          }
          return 97;
         }
         return 94;
        }
        return 95;
       }
       return 96;
      }
      return 51;
     }
     var _d8_ = sexp_004[1];
     if(! _d8_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _d9_ = _d8_[1];
     if(0 !== _d9_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _d__ = _d9_[1], _d$_ = caml_string_compare(_d__, cst_altLeft);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      I:
                                      {
                                       J:
                                       {
                                        K:
                                        {
                                         L:
                                         {
                                          M:
                                          {
                                           N:
                                           {
                                            O:
                                            {
                                             P:
                                             {
                                              Q:
                                              {
                                               R:
                                               {
                                                S:
                                                {
                                                 T:
                                                 {
                                                  U:
                                                  {
                                                   V:
                                                   {
                                                    W:
                                                    {
                                                     X:
                                                     {
                                                      Y:
                                                      {
                                                       Z:
                                                       {
                                                        _:
                                                        {
                                                         $:
                                                         {
                                                          aa:
                                                          {
                                                           ab:
                                                           {
                                                            ac:
                                                            {
                                                             ad:
                                                             {
                                                              ae:
                                                              {
                                                               af:
                                                               {
                                                                ag:
                                                                {
                                                                 ah:
                                                                 {
                                                                  ai:
                                                                  {
                                                                   aj:
                                                                   {
                                                                    ak:
                                                                    {
                                                                     al:
                                                                     {
                                                                      am:
                                                                      {
                                                                       an:
                                                                       {
                                                                        ao:
                                                                        {
                                                                         ap:
                                                                         {
                                                                          aq:
                                                                          {
                                                                           ar:
                                                                           {
                                                                            as:
                                                                            {
                                                                             at:
                                                                             {
                                                                              au:
                                                                              {
                                                                               av:
                                                                               {
                                                                                aw:
                                                                                {
                                                                                 ax:
                                                                                 {
                                                                                  ay:
                                                                                  {
                                                                                   az:
                                                                                   {
                                                                                    aA:
                                                                                    {
                                                                                     aB:
                                                                                     {
                                                                                      aC:
                                                                                      {
                                                                                       aD:
                                                                                       {
                                                                                        aE:
                                                                                        {
                                                                                         aF:
                                                                                         {
                                                                                          aG:
                                                                                          {
                                                                                           aH:
                                                                                           {
                                                                                            aI:
                                                                                            {
                                                                                             aJ:
                                                                                             {
                                                                                              aK:
                                                                                              {
                                                                                               aL:
                                                                                               {
                                                                                                aM:
                                                                                                {
                                                                                                 aN:
                                                                                                 {
                                                                                                  aO:
                                                                                                  {
                                                                                                   aP:
                                                                                                   {
                                                                                                    aQ:
                                                                                                    {
                                                                                                     aR:
                                                                                                     {
                                                                                                      aS:
                                                                                                      {
                                                                                                       aT:
                                                                                                       {
                                                                                                        aU:
                                                                                                        {
                                                                                                         aV:
                                                                                                         {
                                                                                                          aW:
                                                                                                          {
                                                                                                           aX:
                                                                                                           {
                                                                                                            aY:
                                                                                                            {
                                                                                                             aZ:
                                                                                                             {
                                                                                                              a0:
                                                                                                              {
                                                                                                               a1:
                                                                                                               {
                                                                                                                a2:
                                                                                                                {
                                                                                                                 a3:
                                                                                                                 {
                                                                                                                  a4:
                                                                                                                  {
                                                                                                                   a5:
                                                                                                                   {
                                                                                                                    a6:
                                                                                                                    {
                                                                                                                     a7:
                                                                                                                     {
                                                                                                                      a8:
                                                                                                                      {
                                                                                                                       a9:
                                                                                                                       {
                                                                                                                        a_:
                                                                                                                        {
                                                                                                                         a$:
                                                                                                                         {
                                                                                                                          ba:
                                                                                                                          {
                                                                                                                           bb:
                                                                                                                           {
                                                                                                                            bc:
                                                                                                                            {
                                                                                                                             bd:
                                                                                                                             {
                                                                                                                              be:
                                                                                                                              {
                                                                                                                               bf:
                                                                                                                               {
                                                                                                                                if(0 <= _d$_){
                                                                                                                                 if(0 >= _d$_) break h;
                                                                                                                                 var _ea_ = caml_string_compare(_d__, cst_keyI);
                                                                                                                                 if(0 > _ea_){
                                                                                                                                  var _ei_ = caml_string_compare(_d__, cst_digit7);
                                                                                                                                  if(0 <= _ei_){
                                                                                                                                   if(0 >= _ei_) break ai;
                                                                                                                                   var _ej_ = caml_string_compare(_d__, cst_f7);
                                                                                                                                   if(0 <= _ej_){
                                                                                                                                    if(0 >= _ej_) break ah;
                                                                                                                                    var _ek_ = caml_string_compare(_d__, cst_keyB);
                                                                                                                                    if(0 <= _ek_){
                                                                                                                                     if(0 >= _ek_) break ag;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_keyC)) break af;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_keyD)) break ae;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_keyE)) break ad;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_keyF)) break ac;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_keyG)) break ab;
                                                                                                                                     if(caml_string_notequal(_d__, cst_keyH)) break a;
                                                                                                                                     break aa;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f8)) break $;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f9)) break _;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_home)) break Z;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_insert)) break Y;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_intlBackslash)) break X;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_intlYen)) break W;
                                                                                                                                    if(caml_string_notequal(_d__, cst_keyA)) break a;
                                                                                                                                    break V;
                                                                                                                                   }
                                                                                                                                   var _el_ = caml_string_compare(_d__, cst_f10);
                                                                                                                                   if(0 <= _el_){
                                                                                                                                    if(0 >= _el_) break U;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f11)) break T;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f12)) break S;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f2)) break R;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f3)) break Q;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f4)) break P;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_f5)) break O;
                                                                                                                                    if(caml_string_notequal(_d__, cst_f6)) break a;
                                                                                                                                    break N;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_digit8)) break M;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_digit9)) break L;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_end)) break K;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_enter)) break J;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_equal)) break I;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_escape)) break H;
                                                                                                                                   if(caml_string_notequal(_d__, cst_f1)) break a;
                                                                                                                                   break G;
                                                                                                                                  }
                                                                                                                                  var _em_ = caml_string_compare(_d__, cst_browserSearch);
                                                                                                                                  if(0 <= _em_){
                                                                                                                                   if(0 >= _em_) break w;
                                                                                                                                   var _en_ = caml_string_compare(_d__, cst_digit0);
                                                                                                                                   if(0 <= _en_){
                                                                                                                                    if(0 >= _en_) break D;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_digit1)) break C;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_digit2)) break B;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_digit3)) break A;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_digit4)) break z;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_digit5)) break y;
                                                                                                                                    if(caml_string_notequal(_d__, cst_digit6)) break a;
                                                                                                                                    break x;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_browserStop)) break v;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_capsLock)) break u;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_comma)) break t;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_contextMenu)) break s;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_controlLeft)) break r;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_controlRight)) break q;
                                                                                                                                   if(caml_string_notequal(_d__, cst_delete)) break a;
                                                                                                                                   break E;
                                                                                                                                  }
                                                                                                                                  var _eo_ = caml_string_compare(_d__, cst_backspace);
                                                                                                                                  if(0 <= _eo_){
                                                                                                                                   if(0 >= _eo_) break o;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_bracketLeft)) break n;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_bracketRight)) break m;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_browserBack)) break l;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_browserFavorites))
                                                                                                                                    break k;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_browserForward))
                                                                                                                                    break j;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_browserHome)) break i;
                                                                                                                                   if(caml_string_notequal(_d__, cst_browserRefresh)) break a;
                                                                                                                                   break F;
                                                                                                                                  }
                                                                                                                                  if(! caml_string_notequal(_d__, cst_altRight)) break g;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_arrowDown)) break f;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_arrowLeft)) break e;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_arrowRight)) break d;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_arrowUp)) break c;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_backquote)) break b;
                                                                                                                                  if(caml_string_notequal(_d__, cst_backslash)) break a;
                                                                                                                                  break p;
                                                                                                                                 }
                                                                                                                                 if(0 < _ea_){
                                                                                                                                  var _eb_ = caml_string_compare(_d__, cst_numpad5);
                                                                                                                                  if(0 <= _eb_){
                                                                                                                                   if(0 >= _eb_) break bf;
                                                                                                                                   var _ec_ = caml_string_compare(_d__, cst_pause);
                                                                                                                                   if(0 <= _ec_){
                                                                                                                                    if(0 >= _ec_) break be;
                                                                                                                                    var _ed_ = caml_string_compare(_d__, cst_slash);
                                                                                                                                    if(0 <= _ed_){
                                                                                                                                     if(0 >= _ed_) break bd;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_space)) break bc;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_tab)) break bb;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_unidentified)) break ba;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_volumeDown)) break a$;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_volumeMute)) break a_;
                                                                                                                                     if(caml_string_notequal(_d__, cst_volumeUp)) break a;
                                                                                                                                     break a9;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_d__, cst_period)) break a8;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_printScreen)) break a7;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_quote)) break a6;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_scrollLock)) break a5;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_semicolon)) break a4;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_shiftLeft)) break a3;
                                                                                                                                    if(caml_string_notequal(_d__, cst_shiftRight)) break a;
                                                                                                                                    break a2;
                                                                                                                                   }
                                                                                                                                   var _ee_ = caml_string_compare(_d__, cst_numpadEnter);
                                                                                                                                   if(0 <= _ee_){
                                                                                                                                    if(0 >= _ee_) break a1;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpadEqual)) break a0;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpadMultiply))
                                                                                                                                     break aZ;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpadSubtract))
                                                                                                                                     break aY;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_oSLeft)) break aX;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_oSRight)) break aW;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_pageDown)) break aV;
                                                                                                                                    if(caml_string_notequal(_d__, cst_pageUp)) break a;
                                                                                                                                    break aU;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpad6)) break aT;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpad7)) break aS;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpad8)) break aR;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpad9)) break aQ;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpadAdd)) break aP;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_numpadDecimal))
                                                                                                                                    break aO;
                                                                                                                                   if(caml_string_notequal(_d__, cst_numpadDivide)) break a;
                                                                                                                                   break aN;
                                                                                                                                  }
                                                                                                                                  var _ef_ = caml_string_compare(_d__, cst_keyY);
                                                                                                                                  if(0 <= _ef_){
                                                                                                                                   if(0 >= _ef_) break aM;
                                                                                                                                   var _eg_ = caml_string_compare(_d__, cst_minus);
                                                                                                                                   if(0 <= _eg_){
                                                                                                                                    if(0 >= _eg_) break aL;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numLock)) break aK;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpad0)) break aJ;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpad1)) break aI;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpad2)) break aH;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_numpad3)) break aG;
                                                                                                                                    if(caml_string_notequal(_d__, cst_numpad4)) break a;
                                                                                                                                    break aF;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyZ)) break aE;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_mediaPlayPause))
                                                                                                                                    break aD;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_mediaStop)) break aC;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_mediaTrackNext))
                                                                                                                                    break aB;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_mediaTrackPrevious))
                                                                                                                                    break aA;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_metaLeft)) break az;
                                                                                                                                   if(caml_string_notequal(_d__, cst_metaRight)) break a;
                                                                                                                                   break ay;
                                                                                                                                  }
                                                                                                                                  var _eh_ = caml_string_compare(_d__, cst_keyQ);
                                                                                                                                  if(0 <= _eh_){
                                                                                                                                   if(0 >= _eh_) break ax;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyR)) break aw;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyS)) break av;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyT)) break au;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyU)) break at;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyV)) break as;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_keyW)) break ar;
                                                                                                                                   if(caml_string_notequal(_d__, cst_keyX)) break a;
                                                                                                                                   break aq;
                                                                                                                                  }
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyJ)) break ap;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyK)) break ao;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyL)) break an;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyM)) break am;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyN)) break al;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_keyO)) break ak;
                                                                                                                                  if(caml_string_notequal(_d__, cst_keyP)) break a;
                                                                                                                                  break aj;
                                                                                                                                 }
                                                                                                                                }
                                                                                                                                else{
                                                                                                                                 var _ep_ = caml_string_compare(_d__, cst_KeyI);
                                                                                                                                 if(0 > _ep_){
                                                                                                                                  var _ex_ = caml_string_compare(_d__, cst_Digit7);
                                                                                                                                  if(0 <= _ex_){
                                                                                                                                   if(0 >= _ex_) break ai;
                                                                                                                                   var _ey_ = caml_string_compare(_d__, cst_F7);
                                                                                                                                   if(0 <= _ey_){
                                                                                                                                    if(0 >= _ey_) break ah;
                                                                                                                                    var _ez_ = caml_string_compare(_d__, cst_KeyB);
                                                                                                                                    if(0 <= _ez_){
                                                                                                                                     if(0 >= _ez_) break ag;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_KeyC)) break af;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_KeyD)) break ae;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_KeyE)) break ad;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_KeyF)) break ac;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_KeyG)) break ab;
                                                                                                                                     if(caml_string_notequal(_d__, cst_KeyH)) break a;
                                                                                                                                     break aa;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F8)) break $;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F9)) break _;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Home)) break Z;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Insert)) break Y;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_IntlBackslash)) break X;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_IntlYen)) break W;
                                                                                                                                    if(caml_string_notequal(_d__, cst_KeyA)) break a;
                                                                                                                                    break V;
                                                                                                                                   }
                                                                                                                                   var _eA_ = caml_string_compare(_d__, cst_F10);
                                                                                                                                   if(0 <= _eA_){
                                                                                                                                    if(0 >= _eA_) break U;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F11)) break T;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F12)) break S;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F2)) break R;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F3)) break Q;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F4)) break P;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_F5)) break O;
                                                                                                                                    if(caml_string_notequal(_d__, cst_F6)) break a;
                                                                                                                                    break N;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Digit8)) break M;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Digit9)) break L;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_End)) break K;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Enter)) break J;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Equal)) break I;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Escape)) break H;
                                                                                                                                   if(caml_string_notequal(_d__, cst_F1)) break a;
                                                                                                                                   break G;
                                                                                                                                  }
                                                                                                                                  var _eB_ = caml_string_compare(_d__, cst_BrowserRefresh);
                                                                                                                                  if(0 <= _eB_){
                                                                                                                                   if(0 >= _eB_) break F;
                                                                                                                                   var _eC_ = caml_string_compare(_d__, cst_Delete);
                                                                                                                                   if(0 <= _eC_){
                                                                                                                                    if(0 >= _eC_) break E;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit0)) break D;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit1)) break C;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit2)) break B;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit3)) break A;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit4)) break z;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Digit5)) break y;
                                                                                                                                    if(caml_string_notequal(_d__, cst_Digit6)) break a;
                                                                                                                                    break x;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BrowserSearch)) break w;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BrowserStop)) break v;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_CapsLock)) break u;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Comma)) break t;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_ContextMenu)) break s;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_ControlLeft)) break r;
                                                                                                                                   if(caml_string_notequal(_d__, cst_ControlRight)) break a;
                                                                                                                                   break q;
                                                                                                                                  }
                                                                                                                                  var _eD_ = caml_string_compare(_d__, cst_Backslash);
                                                                                                                                  if(0 <= _eD_){
                                                                                                                                   if(0 >= _eD_) break p;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Backspace)) break o;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BracketLeft)) break n;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BracketRight)) break m;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BrowserBack)) break l;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BrowserFavorites))
                                                                                                                                    break k;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_BrowserForward))
                                                                                                                                    break j;
                                                                                                                                   if(caml_string_notequal(_d__, cst_BrowserHome)) break a;
                                                                                                                                   break i;
                                                                                                                                  }
                                                                                                                                  if(! caml_string_notequal(_d__, cst_AltLeft)) break h;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_AltRight)) break g;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_ArrowDown)) break f;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_ArrowLeft)) break e;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_ArrowRight)) break d;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_ArrowUp)) break c;
                                                                                                                                  if(caml_string_notequal(_d__, cst_Backquote)) break a;
                                                                                                                                  break b;
                                                                                                                                 }
                                                                                                                                 if(0 < _ep_){
                                                                                                                                  var _eq_ = caml_string_compare(_d__, cst_Numpad5);
                                                                                                                                  if(0 <= _eq_){
                                                                                                                                   if(0 >= _eq_) break bf;
                                                                                                                                   var _er_ = caml_string_compare(_d__, cst_Pause);
                                                                                                                                   if(0 <= _er_){
                                                                                                                                    if(0 >= _er_) break be;
                                                                                                                                    var _es_ = caml_string_compare(_d__, cst_Slash);
                                                                                                                                    if(0 <= _es_){
                                                                                                                                     if(0 >= _es_) break bd;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_Space)) break bc;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_Tab)) break bb;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_Unidentified)) break ba;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_VolumeDown)) break a$;
                                                                                                                                     if(! caml_string_notequal(_d__, cst_VolumeMute)) break a_;
                                                                                                                                     if(caml_string_notequal(_d__, cst_VolumeUp)) break a;
                                                                                                                                     break a9;
                                                                                                                                    }
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Period)) break a8;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_PrintScreen)) break a7;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Quote)) break a6;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_ScrollLock)) break a5;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Semicolon)) break a4;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_ShiftLeft)) break a3;
                                                                                                                                    if(caml_string_notequal(_d__, cst_ShiftRight)) break a;
                                                                                                                                    break a2;
                                                                                                                                   }
                                                                                                                                   var _et_ = caml_string_compare(_d__, cst_NumpadEnter);
                                                                                                                                   if(0 <= _et_){
                                                                                                                                    if(0 >= _et_) break a1;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_NumpadEqual)) break a0;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_NumpadMultiply))
                                                                                                                                     break aZ;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_NumpadSubtract))
                                                                                                                                     break aY;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_OSLeft)) break aX;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_OSRight)) break aW;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_PageDown)) break aV;
                                                                                                                                    if(caml_string_notequal(_d__, cst_PageUp)) break a;
                                                                                                                                    break aU;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Numpad6)) break aT;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Numpad7)) break aS;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Numpad8)) break aR;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_Numpad9)) break aQ;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_NumpadAdd)) break aP;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_NumpadDecimal))
                                                                                                                                    break aO;
                                                                                                                                   if(caml_string_notequal(_d__, cst_NumpadDivide)) break a;
                                                                                                                                   break aN;
                                                                                                                                  }
                                                                                                                                  var _eu_ = caml_string_compare(_d__, cst_KeyY);
                                                                                                                                  if(0 <= _eu_){
                                                                                                                                   if(0 >= _eu_) break aM;
                                                                                                                                   var _ev_ = caml_string_compare(_d__, cst_Minus);
                                                                                                                                   if(0 <= _ev_){
                                                                                                                                    if(0 >= _ev_) break aL;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_NumLock)) break aK;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Numpad0)) break aJ;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Numpad1)) break aI;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Numpad2)) break aH;
                                                                                                                                    if(! caml_string_notequal(_d__, cst_Numpad3)) break aG;
                                                                                                                                    if(caml_string_notequal(_d__, cst_Numpad4)) break a;
                                                                                                                                    break aF;
                                                                                                                                   }
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyZ)) break aE;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_MediaPlayPause))
                                                                                                                                    break aD;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_MediaStop)) break aC;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_MediaTrackNext))
                                                                                                                                    break aB;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_MediaTrackPrevious))
                                                                                                                                    break aA;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_MetaLeft)) break az;
                                                                                                                                   if(caml_string_notequal(_d__, cst_MetaRight)) break a;
                                                                                                                                   break ay;
                                                                                                                                  }
                                                                                                                                  var _ew_ = caml_string_compare(_d__, cst_KeyQ);
                                                                                                                                  if(0 <= _ew_){
                                                                                                                                   if(0 >= _ew_) break ax;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyR)) break aw;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyS)) break av;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyT)) break au;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyU)) break at;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyV)) break as;
                                                                                                                                   if(! caml_string_notequal(_d__, cst_KeyW)) break ar;
                                                                                                                                   if(caml_string_notequal(_d__, cst_KeyX)) break a;
                                                                                                                                   break aq;
                                                                                                                                  }
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyJ)) break ap;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyK)) break ao;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyL)) break an;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyM)) break am;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyN)) break al;
                                                                                                                                  if(! caml_string_notequal(_d__, cst_KeyO)) break ak;
                                                                                                                                  if(caml_string_notequal(_d__, cst_KeyP)) break a;
                                                                                                                                  break aj;
                                                                                                                                 }
                                                                                                                                }
                                                                                                                                return caml_call2
                                                                                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                               }
                                                                                                                               return caml_call2
                                                                                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                              }
                                                                                                                              return caml_call2
                                                                                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                             }
                                                                                                                             return caml_call2
                                                                                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                            }
                                                                                                                            return caml_call2
                                                                                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                           }
                                                                                                                           return caml_call2
                                                                                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                          }
                                                                                                                          return caml_call2
                                                                                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                         }
                                                                                                                         return caml_call2
                                                                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                        }
                                                                                                                        return caml_call2
                                                                                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                       }
                                                                                                                       return caml_call2
                                                                                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                      }
                                                                                                                      return caml_call2
                                                                                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                     }
                                                                                                                     return caml_call2
                                                                                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                    }
                                                                                                                    return caml_call2
                                                                                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                   }
                                                                                                                   return caml_call2
                                                                                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                  }
                                                                                                                  return caml_call2
                                                                                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                 }
                                                                                                                 return caml_call2
                                                                                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                                }
                                                                                                                return caml_call2
                                                                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                               }
                                                                                                               return caml_call2
                                                                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                              }
                                                                                                              return caml_call2
                                                                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                             }
                                                                                                             return caml_call2
                                                                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                            }
                                                                                                            return caml_call2
                                                                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                           }
                                                                                                           return caml_call2
                                                                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                          }
                                                                                                          return caml_call2
                                                                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                         }
                                                                                                         return caml_call2
                                                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                        }
                                                                                                        return caml_call2
                                                                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                       }
                                                                                                       return caml_call2
                                                                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                      }
                                                                                                      return caml_call2
                                                                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                     }
                                                                                                     return caml_call2
                                                                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                    }
                                                                                                    return caml_call2
                                                                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                   }
                                                                                                   return caml_call2
                                                                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                  }
                                                                                                  return caml_call2
                                                                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                 }
                                                                                                 return caml_call2
                                                                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                                }
                                                                                                return caml_call2
                                                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                               }
                                                                                               return caml_call2
                                                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                              }
                                                                                              return caml_call2
                                                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                             }
                                                                                             return caml_call2
                                                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                            }
                                                                                            return caml_call2
                                                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                           }
                                                                                           return caml_call2
                                                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                          }
                                                                                          return caml_call2
                                                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                         }
                                                                                         return caml_call2
                                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                        }
                                                                                        return caml_call2
                                                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                       }
                                                                                       return caml_call2
                                                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                      }
                                                                                      return caml_call2
                                                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                     }
                                                                                     return caml_call2
                                                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                    }
                                                                                    return caml_call2
                                                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                   }
                                                                                   return caml_call2
                                                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                  }
                                                                                  return caml_call2
                                                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                 }
                                                                                 return caml_call2
                                                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                                }
                                                                                return caml_call2
                                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                               }
                                                                               return caml_call2
                                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                              }
                                                                              return caml_call2
                                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                             }
                                                                             return caml_call2
                                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                            }
                                                                            return caml_call2
                                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                           }
                                                                           return caml_call2
                                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                          }
                                                                          return caml_call2
                                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                         }
                                                                         return caml_call2
                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                        }
                                                                        return caml_call2
                                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                       }
                                                                       return caml_call2
                                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                      }
                                                                      return caml_call2
                                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                     }
                                                                     return caml_call2
                                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                    }
                                                                    return caml_call2
                                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                   }
                                                                   return caml_call2
                                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                  }
                                                                  return caml_call2
                                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                 }
                                                                 return caml_call2
                                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                                }
                                                                return caml_call2
                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                               }
                                                               return caml_call2
                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                              }
                                                              return caml_call2
                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                             }
                                                             return caml_call2
                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                            }
                                                            return caml_call2
                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                           }
                                                           return caml_call2
                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                          }
                                                          return caml_call2
                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                         }
                                                         return caml_call2
                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                        }
                                                        return caml_call2
                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                       }
                                                       return caml_call2
                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                      }
                                                      return caml_call2
                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                     }
                                                     return caml_call2
                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                    }
                                                    return caml_call2
                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                   }
                                                   return caml_call2
                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                  }
                                                  return caml_call2
                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                 }
                                                 return caml_call2
                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                                }
                                                return caml_call2
                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                               }
                                               return caml_call2
                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                              }
                                              return caml_call2
                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                             }
                                             return caml_call2
                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                            }
                                            return caml_call2
                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                           }
                                           return caml_call2
                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                          }
                                          return caml_call2
                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                         }
                                         return caml_call2
                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                        }
                                        return caml_call2
                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                       }
                                       return caml_call2
                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                      }
                                      return caml_call2
                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                     }
                                     return caml_call2
                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                    }
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                   }
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                 }
                                 return caml_call2
                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                                }
                                return caml_call2
                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                               }
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                              }
                              return caml_call2
                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                             }
                             return caml_call2
                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                            }
                            return caml_call2
                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    var _dB_ = param;
    if(62 <= _dB_){
     if(93 <= _dB_)
      switch(_dB_){
        case 93:
         return _aN_;
        case 94:
         return _aO_;
        case 95:
         return _aP_;
        case 96:
         return _aQ_;
        case 97:
         return _aR_;
        case 98:
         return _aS_;
        case 99:
         return _aT_;
        case 100:
         return _aU_;
        case 101:
         return _aV_;
        case 102:
         return _aW_;
        case 103:
         return _aX_;
        case 104:
         return _aY_;
        case 105:
         return _aZ_;
        case 106:
         return _a0_;
        case 107:
         return _a1_;
        case 108:
         return _a2_;
        case 109:
         return _a3_;
        case 110:
         return _a4_;
        case 111:
         return _a5_;
        case 112:
         return _a6_;
        case 113:
         return _a7_;
        case 114:
         return _a8_;
        case 115:
         return _a9_;
        case 116:
         return _a__;
        case 117:
         return _a$_;
        case 118:
         return _ba_;
        case 119:
         return _bb_;
        case 120:
         return _bc_;
        case 121:
         return _bd_;
        case 122:
         return _be_;
        default: return _bf_;
      }
     switch(_dB_){
       case 62:
        return _ai_;
       case 63:
        return _aj_;
       case 64:
        return _ak_;
       case 65:
        return _al_;
       case 66:
        return _am_;
       case 67:
        return _an_;
       case 68:
        return _ao_;
       case 69:
        return _ap_;
       case 70:
        return _aq_;
       case 71:
        return _ar_;
       case 72:
        return _as_;
       case 73:
        return _at_;
       case 74:
        return _au_;
       case 75:
        return _av_;
       case 76:
        return _aw_;
       case 77:
        return _ax_;
       case 78:
        return _ay_;
       case 79:
        return _az_;
       case 80:
        return _aA_;
       case 81:
        return _aB_;
       case 82:
        return _aC_;
       case 83:
        return _aD_;
       case 84:
        return _aE_;
       case 85:
        return _aF_;
       case 86:
        return _aG_;
       case 87:
        return _aH_;
       case 88:
        return _aI_;
       case 89:
        return _aJ_;
       case 90:
        return _aK_;
       case 91:
        return _aL_;
       default: return _aM_;
     }
    }
    if(31 <= _dB_)
     switch(_dB_){
       case 31:
        return _F_;
       case 32:
        return _G_;
       case 33:
        return _H_;
       case 34:
        return _I_;
       case 35:
        return _J_;
       case 36:
        return _K_;
       case 37:
        return _L_;
       case 38:
        return _M_;
       case 39:
        return _N_;
       case 40:
        return _O_;
       case 41:
        return _P_;
       case 42:
        return _Q_;
       case 43:
        return _R_;
       case 44:
        return _S_;
       case 45:
        return _T_;
       case 46:
        return _U_;
       case 47:
        return _V_;
       case 48:
        return _W_;
       case 49:
        return _X_;
       case 50:
        return _Y_;
       case 51:
        return _Z_;
       case 52:
        return ___;
       case 53:
        return _$_;
       case 54:
        return _aa_;
       case 55:
        return _ab_;
       case 56:
        return _ac_;
       case 57:
        return _ad_;
       case 58:
        return _ae_;
       case 59:
        return _af_;
       case 60:
        return _ag_;
       default: return _ah_;
     }
    switch(_dB_){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      case 13:
       return _n_;
      case 14:
       return _o_;
      case 15:
       return _p_;
      case 16:
       return _q_;
      case 17:
       return _r_;
      case 18:
       return _s_;
      case 19:
       return _t_;
      case 20:
       return _u_;
      case 21:
       return _v_;
      case 22:
       return _w_;
      case 23:
       return _x_;
      case 24:
       return _y_;
      case 25:
       return _z_;
      case 26:
       return _A_;
      case 27:
       return _B_;
      case 28:
       return _C_;
      case 29:
       return _D_;
      default: return _E_;
    }
   }
   var
    compare = caml_int_compare,
    _bh_ = caml_call1(Bin_prot_Shape[5], _bg_),
    _bi_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _bh_], 0],
    _bj_ = caml_call1(Bin_shape[4][1], cst_keyboard_src_keystroke_ml_),
    group = caml_call2(Bin_prot_Shape[2], _bj_, _bi_),
    _bk_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _bk_), 0);
   function bin_size_t(param){return 1;}
   function bin_write_t(buf, pos, param){
    var _dA_ = param;
    if(62 <= _dA_){
     if(93 <= _dA_)
      switch(_dA_){
        case 93:
         return caml_call3(Bin_prot_Write[30], buf, pos, 93);
        case 94:
         return caml_call3(Bin_prot_Write[30], buf, pos, 94);
        case 95:
         return caml_call3(Bin_prot_Write[30], buf, pos, 95);
        case 96:
         return caml_call3(Bin_prot_Write[30], buf, pos, 96);
        case 97:
         return caml_call3(Bin_prot_Write[30], buf, pos, 97);
        case 98:
         return caml_call3(Bin_prot_Write[30], buf, pos, 98);
        case 99:
         return caml_call3(Bin_prot_Write[30], buf, pos, 99);
        case 100:
         return caml_call3(Bin_prot_Write[30], buf, pos, 100);
        case 101:
         return caml_call3(Bin_prot_Write[30], buf, pos, 101);
        case 102:
         return caml_call3(Bin_prot_Write[30], buf, pos, 102);
        case 103:
         return caml_call3(Bin_prot_Write[30], buf, pos, 103);
        case 104:
         return caml_call3(Bin_prot_Write[30], buf, pos, 104);
        case 105:
         return caml_call3(Bin_prot_Write[30], buf, pos, 105);
        case 106:
         return caml_call3(Bin_prot_Write[30], buf, pos, 106);
        case 107:
         return caml_call3(Bin_prot_Write[30], buf, pos, 107);
        case 108:
         return caml_call3(Bin_prot_Write[30], buf, pos, 108);
        case 109:
         return caml_call3(Bin_prot_Write[30], buf, pos, 109);
        case 110:
         return caml_call3(Bin_prot_Write[30], buf, pos, 110);
        case 111:
         return caml_call3(Bin_prot_Write[30], buf, pos, 111);
        case 112:
         return caml_call3(Bin_prot_Write[30], buf, pos, 112);
        case 113:
         return caml_call3(Bin_prot_Write[30], buf, pos, 113);
        case 114:
         return caml_call3(Bin_prot_Write[30], buf, pos, 114);
        case 115:
         return caml_call3(Bin_prot_Write[30], buf, pos, 115);
        case 116:
         return caml_call3(Bin_prot_Write[30], buf, pos, 116);
        case 117:
         return caml_call3(Bin_prot_Write[30], buf, pos, 117);
        case 118:
         return caml_call3(Bin_prot_Write[30], buf, pos, 118);
        case 119:
         return caml_call3(Bin_prot_Write[30], buf, pos, 119);
        case 120:
         return caml_call3(Bin_prot_Write[30], buf, pos, 120);
        case 121:
         return caml_call3(Bin_prot_Write[30], buf, pos, 121);
        case 122:
         return caml_call3(Bin_prot_Write[30], buf, pos, 122);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 123);
      }
     switch(_dA_){
       case 62:
        return caml_call3(Bin_prot_Write[30], buf, pos, 62);
       case 63:
        return caml_call3(Bin_prot_Write[30], buf, pos, 63);
       case 64:
        return caml_call3(Bin_prot_Write[30], buf, pos, 64);
       case 65:
        return caml_call3(Bin_prot_Write[30], buf, pos, 65);
       case 66:
        return caml_call3(Bin_prot_Write[30], buf, pos, 66);
       case 67:
        return caml_call3(Bin_prot_Write[30], buf, pos, 67);
       case 68:
        return caml_call3(Bin_prot_Write[30], buf, pos, 68);
       case 69:
        return caml_call3(Bin_prot_Write[30], buf, pos, 69);
       case 70:
        return caml_call3(Bin_prot_Write[30], buf, pos, 70);
       case 71:
        return caml_call3(Bin_prot_Write[30], buf, pos, 71);
       case 72:
        return caml_call3(Bin_prot_Write[30], buf, pos, 72);
       case 73:
        return caml_call3(Bin_prot_Write[30], buf, pos, 73);
       case 74:
        return caml_call3(Bin_prot_Write[30], buf, pos, 74);
       case 75:
        return caml_call3(Bin_prot_Write[30], buf, pos, 75);
       case 76:
        return caml_call3(Bin_prot_Write[30], buf, pos, 76);
       case 77:
        return caml_call3(Bin_prot_Write[30], buf, pos, 77);
       case 78:
        return caml_call3(Bin_prot_Write[30], buf, pos, 78);
       case 79:
        return caml_call3(Bin_prot_Write[30], buf, pos, 79);
       case 80:
        return caml_call3(Bin_prot_Write[30], buf, pos, 80);
       case 81:
        return caml_call3(Bin_prot_Write[30], buf, pos, 81);
       case 82:
        return caml_call3(Bin_prot_Write[30], buf, pos, 82);
       case 83:
        return caml_call3(Bin_prot_Write[30], buf, pos, 83);
       case 84:
        return caml_call3(Bin_prot_Write[30], buf, pos, 84);
       case 85:
        return caml_call3(Bin_prot_Write[30], buf, pos, 85);
       case 86:
        return caml_call3(Bin_prot_Write[30], buf, pos, 86);
       case 87:
        return caml_call3(Bin_prot_Write[30], buf, pos, 87);
       case 88:
        return caml_call3(Bin_prot_Write[30], buf, pos, 88);
       case 89:
        return caml_call3(Bin_prot_Write[30], buf, pos, 89);
       case 90:
        return caml_call3(Bin_prot_Write[30], buf, pos, 90);
       case 91:
        return caml_call3(Bin_prot_Write[30], buf, pos, 91);
       default: return caml_call3(Bin_prot_Write[30], buf, pos, 92);
     }
    }
    if(31 <= _dA_)
     switch(_dA_){
       case 31:
        return caml_call3(Bin_prot_Write[30], buf, pos, 31);
       case 32:
        return caml_call3(Bin_prot_Write[30], buf, pos, 32);
       case 33:
        return caml_call3(Bin_prot_Write[30], buf, pos, 33);
       case 34:
        return caml_call3(Bin_prot_Write[30], buf, pos, 34);
       case 35:
        return caml_call3(Bin_prot_Write[30], buf, pos, 35);
       case 36:
        return caml_call3(Bin_prot_Write[30], buf, pos, 36);
       case 37:
        return caml_call3(Bin_prot_Write[30], buf, pos, 37);
       case 38:
        return caml_call3(Bin_prot_Write[30], buf, pos, 38);
       case 39:
        return caml_call3(Bin_prot_Write[30], buf, pos, 39);
       case 40:
        return caml_call3(Bin_prot_Write[30], buf, pos, 40);
       case 41:
        return caml_call3(Bin_prot_Write[30], buf, pos, 41);
       case 42:
        return caml_call3(Bin_prot_Write[30], buf, pos, 42);
       case 43:
        return caml_call3(Bin_prot_Write[30], buf, pos, 43);
       case 44:
        return caml_call3(Bin_prot_Write[30], buf, pos, 44);
       case 45:
        return caml_call3(Bin_prot_Write[30], buf, pos, 45);
       case 46:
        return caml_call3(Bin_prot_Write[30], buf, pos, 46);
       case 47:
        return caml_call3(Bin_prot_Write[30], buf, pos, 47);
       case 48:
        return caml_call3(Bin_prot_Write[30], buf, pos, 48);
       case 49:
        return caml_call3(Bin_prot_Write[30], buf, pos, 49);
       case 50:
        return caml_call3(Bin_prot_Write[30], buf, pos, 50);
       case 51:
        return caml_call3(Bin_prot_Write[30], buf, pos, 51);
       case 52:
        return caml_call3(Bin_prot_Write[30], buf, pos, 52);
       case 53:
        return caml_call3(Bin_prot_Write[30], buf, pos, 53);
       case 54:
        return caml_call3(Bin_prot_Write[30], buf, pos, 54);
       case 55:
        return caml_call3(Bin_prot_Write[30], buf, pos, 55);
       case 56:
        return caml_call3(Bin_prot_Write[30], buf, pos, 56);
       case 57:
        return caml_call3(Bin_prot_Write[30], buf, pos, 57);
       case 58:
        return caml_call3(Bin_prot_Write[30], buf, pos, 58);
       case 59:
        return caml_call3(Bin_prot_Write[30], buf, pos, 59);
       case 60:
        return caml_call3(Bin_prot_Write[30], buf, pos, 60);
       default: return caml_call3(Bin_prot_Write[30], buf, pos, 61);
     }
    switch(_dA_){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      case 2:
       return caml_call3(Bin_prot_Write[30], buf, pos, 2);
      case 3:
       return caml_call3(Bin_prot_Write[30], buf, pos, 3);
      case 4:
       return caml_call3(Bin_prot_Write[30], buf, pos, 4);
      case 5:
       return caml_call3(Bin_prot_Write[30], buf, pos, 5);
      case 6:
       return caml_call3(Bin_prot_Write[30], buf, pos, 6);
      case 7:
       return caml_call3(Bin_prot_Write[30], buf, pos, 7);
      case 8:
       return caml_call3(Bin_prot_Write[30], buf, pos, 8);
      case 9:
       return caml_call3(Bin_prot_Write[30], buf, pos, 9);
      case 10:
       return caml_call3(Bin_prot_Write[30], buf, pos, 10);
      case 11:
       return caml_call3(Bin_prot_Write[30], buf, pos, 11);
      case 12:
       return caml_call3(Bin_prot_Write[30], buf, pos, 12);
      case 13:
       return caml_call3(Bin_prot_Write[30], buf, pos, 13);
      case 14:
       return caml_call3(Bin_prot_Write[30], buf, pos, 14);
      case 15:
       return caml_call3(Bin_prot_Write[30], buf, pos, 15);
      case 16:
       return caml_call3(Bin_prot_Write[30], buf, pos, 16);
      case 17:
       return caml_call3(Bin_prot_Write[30], buf, pos, 17);
      case 18:
       return caml_call3(Bin_prot_Write[30], buf, pos, 18);
      case 19:
       return caml_call3(Bin_prot_Write[30], buf, pos, 19);
      case 20:
       return caml_call3(Bin_prot_Write[30], buf, pos, 20);
      case 21:
       return caml_call3(Bin_prot_Write[30], buf, pos, 21);
      case 22:
       return caml_call3(Bin_prot_Write[30], buf, pos, 22);
      case 23:
       return caml_call3(Bin_prot_Write[30], buf, pos, 23);
      case 24:
       return caml_call3(Bin_prot_Write[30], buf, pos, 24);
      case 25:
       return caml_call3(Bin_prot_Write[30], buf, pos, 25);
      case 26:
       return caml_call3(Bin_prot_Write[30], buf, pos, 26);
      case 27:
       return caml_call3(Bin_prot_Write[30], buf, pos, 27);
      case 28:
       return caml_call3(Bin_prot_Write[30], buf, pos, 28);
      case 29:
       return caml_call3(Bin_prot_Write[30], buf, pos, 29);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 30);
    }
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_keyboard_src_keystroke_ml_$0,
             pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(123 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _bl_, pos_ref[1]);
    var _dz_ = match;
    if(62 <= _dz_){
     if(93 <= _dz_)
      switch(_dz_){
        case 93:
         return 93;
        case 94:
         return 94;
        case 95:
         return 95;
        case 96:
         return 96;
        case 97:
         return 97;
        case 98:
         return 98;
        case 99:
         return 99;
        case 100:
         return 100;
        case 101:
         return 101;
        case 102:
         return 102;
        case 103:
         return 103;
        case 104:
         return 104;
        case 105:
         return 105;
        case 106:
         return 106;
        case 107:
         return 107;
        case 108:
         return 108;
        case 109:
         return 109;
        case 110:
         return 110;
        case 111:
         return 111;
        case 112:
         return 112;
        case 113:
         return 113;
        case 114:
         return 114;
        case 115:
         return 115;
        case 116:
         return 116;
        case 117:
         return 117;
        case 118:
         return 118;
        case 119:
         return 119;
        case 120:
         return 120;
        case 121:
         return 121;
        case 122:
         return 122;
        default: return 123;
      }
     switch(_dz_){
       case 62:
        return 62;
       case 63:
        return 63;
       case 64:
        return 64;
       case 65:
        return 65;
       case 66:
        return 66;
       case 67:
        return 67;
       case 68:
        return 68;
       case 69:
        return 69;
       case 70:
        return 70;
       case 71:
        return 71;
       case 72:
        return 72;
       case 73:
        return 73;
       case 74:
        return 74;
       case 75:
        return 75;
       case 76:
        return 76;
       case 77:
        return 77;
       case 78:
        return 78;
       case 79:
        return 79;
       case 80:
        return 80;
       case 81:
        return 81;
       case 82:
        return 82;
       case 83:
        return 83;
       case 84:
        return 84;
       case 85:
        return 85;
       case 86:
        return 86;
       case 87:
        return 87;
       case 88:
        return 88;
       case 89:
        return 89;
       case 90:
        return 90;
       case 91:
        return 91;
       default: return 92;
     }
    }
    if(31 <= _dz_)
     switch(_dz_){
       case 31:
        return 31;
       case 32:
        return 32;
       case 33:
        return 33;
       case 34:
        return 34;
       case 35:
        return 35;
       case 36:
        return 36;
       case 37:
        return 37;
       case 38:
        return 38;
       case 39:
        return 39;
       case 40:
        return 40;
       case 41:
        return 41;
       case 42:
        return 42;
       case 43:
        return 43;
       case 44:
        return 44;
       case 45:
        return 45;
       case 46:
        return 46;
       case 47:
        return 47;
       case 48:
        return 48;
       case 49:
        return 49;
       case 50:
        return 50;
       case 51:
        return 51;
       case 52:
        return 52;
       case 53:
        return 53;
       case 54:
        return 54;
       case 55:
        return 55;
       case 56:
        return 56;
       case 57:
        return 57;
       case 58:
        return 58;
       case 59:
        return 59;
       case 60:
        return 60;
       default: return 61;
     }
    switch(_dz_){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      case 4:
       return 4;
      case 5:
       return 5;
      case 6:
       return 6;
      case 7:
       return 7;
      case 8:
       return 8;
      case 9:
       return 9;
      case 10:
       return 10;
      case 11:
       return 11;
      case 12:
       return 12;
      case 13:
       return 13;
      case 14:
       return 14;
      case 15:
       return 15;
      case 16:
       return 16;
      case 17:
       return 17;
      case 18:
       return 18;
      case 19:
       return 19;
      case 20:
       return 20;
      case 21:
       return 21;
      case 22:
       return 22;
      case 23:
       return 23;
      case 24:
       return 24;
      case 25:
       return 25;
      case 26:
       return 26;
      case 27:
       return 27;
      case 28:
       return 28;
      case 29:
       return 29;
      default: return 30;
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function hash_fold_t(hsv, arg){
    var _dy_ = arg;
    if(62 <= _dy_)
     if(93 <= _dy_)
      switch(_dy_){
        case 93:
         var _dx_ = 93; break;
        case 94:
         var _dx_ = 94; break;
        case 95:
         var _dx_ = 95; break;
        case 96:
         var _dx_ = 96; break;
        case 97:
         var _dx_ = 97; break;
        case 98:
         var _dx_ = 98; break;
        case 99:
         var _dx_ = 99; break;
        case 100:
         var _dx_ = 100; break;
        case 101:
         var _dx_ = 101; break;
        case 102:
         var _dx_ = 102; break;
        case 103:
         var _dx_ = 103; break;
        case 104:
         var _dx_ = 104; break;
        case 105:
         var _dx_ = 105; break;
        case 106:
         var _dx_ = 106; break;
        case 107:
         var _dx_ = 107; break;
        case 108:
         var _dx_ = 108; break;
        case 109:
         var _dx_ = 109; break;
        case 110:
         var _dx_ = 110; break;
        case 111:
         var _dx_ = 111; break;
        case 112:
         var _dx_ = 112; break;
        case 113:
         var _dx_ = 113; break;
        case 114:
         var _dx_ = 114; break;
        case 115:
         var _dx_ = 115; break;
        case 116:
         var _dx_ = 116; break;
        case 117:
         var _dx_ = 117; break;
        case 118:
         var _dx_ = 118; break;
        case 119:
         var _dx_ = 119; break;
        case 120:
         var _dx_ = 120; break;
        case 121:
         var _dx_ = 121; break;
        case 122:
         var _dx_ = 122; break;
        default: var _dx_ = 123;
      }
     else
      switch(_dy_){
        case 62:
         var _dx_ = 62; break;
        case 63:
         var _dx_ = 63; break;
        case 64:
         var _dx_ = 64; break;
        case 65:
         var _dx_ = 65; break;
        case 66:
         var _dx_ = 66; break;
        case 67:
         var _dx_ = 67; break;
        case 68:
         var _dx_ = 68; break;
        case 69:
         var _dx_ = 69; break;
        case 70:
         var _dx_ = 70; break;
        case 71:
         var _dx_ = 71; break;
        case 72:
         var _dx_ = 72; break;
        case 73:
         var _dx_ = 73; break;
        case 74:
         var _dx_ = 74; break;
        case 75:
         var _dx_ = 75; break;
        case 76:
         var _dx_ = 76; break;
        case 77:
         var _dx_ = 77; break;
        case 78:
         var _dx_ = 78; break;
        case 79:
         var _dx_ = 79; break;
        case 80:
         var _dx_ = 80; break;
        case 81:
         var _dx_ = 81; break;
        case 82:
         var _dx_ = 82; break;
        case 83:
         var _dx_ = 83; break;
        case 84:
         var _dx_ = 84; break;
        case 85:
         var _dx_ = 85; break;
        case 86:
         var _dx_ = 86; break;
        case 87:
         var _dx_ = 87; break;
        case 88:
         var _dx_ = 88; break;
        case 89:
         var _dx_ = 89; break;
        case 90:
         var _dx_ = 90; break;
        case 91:
         var _dx_ = 91; break;
        default: var _dx_ = 92;
      }
    else if(31 <= _dy_)
     switch(_dy_){
       case 31:
        var _dx_ = 31; break;
       case 32:
        var _dx_ = 32; break;
       case 33:
        var _dx_ = 33; break;
       case 34:
        var _dx_ = 34; break;
       case 35:
        var _dx_ = 35; break;
       case 36:
        var _dx_ = 36; break;
       case 37:
        var _dx_ = 37; break;
       case 38:
        var _dx_ = 38; break;
       case 39:
        var _dx_ = 39; break;
       case 40:
        var _dx_ = 40; break;
       case 41:
        var _dx_ = 41; break;
       case 42:
        var _dx_ = 42; break;
       case 43:
        var _dx_ = 43; break;
       case 44:
        var _dx_ = 44; break;
       case 45:
        var _dx_ = 45; break;
       case 46:
        var _dx_ = 46; break;
       case 47:
        var _dx_ = 47; break;
       case 48:
        var _dx_ = 48; break;
       case 49:
        var _dx_ = 49; break;
       case 50:
        var _dx_ = 50; break;
       case 51:
        var _dx_ = 51; break;
       case 52:
        var _dx_ = 52; break;
       case 53:
        var _dx_ = 53; break;
       case 54:
        var _dx_ = 54; break;
       case 55:
        var _dx_ = 55; break;
       case 56:
        var _dx_ = 56; break;
       case 57:
        var _dx_ = 57; break;
       case 58:
        var _dx_ = 58; break;
       case 59:
        var _dx_ = 59; break;
       case 60:
        var _dx_ = 60; break;
       default: var _dx_ = 61;
     }
    else
     switch(_dy_){
       case 0:
        var _dx_ = 0; break;
       case 1:
        var _dx_ = 1; break;
       case 2:
        var _dx_ = 2; break;
       case 3:
        var _dx_ = 3; break;
       case 4:
        var _dx_ = 4; break;
       case 5:
        var _dx_ = 5; break;
       case 6:
        var _dx_ = 6; break;
       case 7:
        var _dx_ = 7; break;
       case 8:
        var _dx_ = 8; break;
       case 9:
        var _dx_ = 9; break;
       case 10:
        var _dx_ = 10; break;
       case 11:
        var _dx_ = 11; break;
       case 12:
        var _dx_ = 12; break;
       case 13:
        var _dx_ = 13; break;
       case 14:
        var _dx_ = 14; break;
       case 15:
        var _dx_ = 15; break;
       case 16:
        var _dx_ = 16; break;
       case 17:
        var _dx_ = 17; break;
       case 18:
        var _dx_ = 18; break;
       case 19:
        var _dx_ = 19; break;
       case 20:
        var _dx_ = 20; break;
       case 21:
        var _dx_ = 21; break;
       case 22:
        var _dx_ = 22; break;
       case 23:
        var _dx_ = 23; break;
       case 24:
        var _dx_ = 24; break;
       case 25:
        var _dx_ = 25; break;
       case 26:
        var _dx_ = 26; break;
       case 27:
        var _dx_ = 27; break;
       case 28:
        var _dx_ = 28; break;
       case 29:
        var _dx_ = 29; break;
       default: var _dx_ = 30;
     }
    return caml_call2(Base_Hash[3], hsv, _dx_);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _dw_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _dw_);
   }
   function equal(_dv_, _du_){return _dv_ === _du_ ? 1 : 0;}
   caml_call1(Core_Sexpable[1], [0, t_of_sexp, sexp_of_t]);
   var unidentified = 100000;
   function to_key_code_normal(param){
    var _dt_ = param;
    if(42 <= _dt_)
     switch(_dt_){
       case 42:
        return 27;
       case 43:
        return 8;
       case 44:
        return 45;
       case 45:
        return 46;
       case 46:
        return 20;
       case 47:
        return 219;
       case 48:
        return 221;
       case 49:
        return 186;
       case 50:
        return 222;
       case 51:
        return 192;
       case 52:
        return 220;
       case 53:
        return 188;
       case 54:
        return 190;
       case 55:
        return 191;
       case 56:
        return 112;
       case 57:
        return 113;
       case 58:
        return 114;
       case 59:
        return 115;
       case 60:
        return 116;
       case 61:
        return 117;
       case 62:
        return 118;
       case 63:
        return 119;
       case 64:
        return 120;
       case 65:
        return 121;
       case 66:
        return 122;
       case 67:
        return 123;
       case 94:
        return 37;
       case 95:
        return 39;
       case 96:
        return 38;
       case 97:
        return 40;
       case 98:
        return 33;
       case 99:
        return 34;
       case 100:
        return 36;
       case 101:
        return 35;
       case 109:
        return 93;
       case 119:
        return 145;
       case 120:
        return 42;
       case 123:
        return 19;
     }
    else
     switch(_dt_){
       case 1:
        return 65;
       case 2:
        return 66;
       case 3:
        return 67;
       case 4:
        return 68;
       case 5:
        return 69;
       case 6:
        return 70;
       case 7:
        return 71;
       case 8:
        return 72;
       case 9:
        return 73;
       case 10:
        return 74;
       case 11:
        return 75;
       case 12:
        return 76;
       case 13:
        return 77;
       case 14:
        return 78;
       case 15:
        return 79;
       case 16:
        return 80;
       case 17:
        return 81;
       case 18:
        return 82;
       case 19:
        return 83;
       case 20:
        return 84;
       case 21:
        return 85;
       case 22:
        return 86;
       case 23:
        return 87;
       case 24:
        return 88;
       case 25:
        return 89;
       case 26:
        return 90;
       case 27:
        return 48;
       case 28:
        return 49;
       case 29:
        return 50;
       case 30:
        return 51;
       case 31:
        return 52;
       case 32:
        return 53;
       case 33:
        return 54;
       case 34:
        return 55;
       case 35:
        return 56;
       case 36:
        return 57;
       case 37:
        return 189;
       case 38:
        return 187;
       case 39:
        return 9;
       case 40:
        return 13;
       case 41:
        return 32;
     }
    return unidentified;
   }
   function _bm_(t){
    if(68 <= t){
     if(94 > t)
      switch(t - 68 | 0){
        case 17: break;
        case 18:
        case 20:
        case 22:
        case 24:
         return 847852583;
        case 19:
        case 21:
        case 23:
        case 25:
         return -57574468;
        default: return -702966035;
      }
    }
    else if(27 > t) return -912009552;
    return -912009552;
   }
   function to_key_code(t){
    var match = _bm_(t);
    if(-57574468 > match){
     if(-702966035 > match) return to_key_code_normal(t);
     var switcher$1 = t - 68 | 0;
     if(16 >= switcher$1 >>> 0)
      switch(switcher$1){
        case 0:
         return 45;
        case 1:
         return 35;
        case 2:
         return 40;
        case 3:
         return 34;
        case 4:
         return 37;
        case 5:
         return 12;
        case 6:
         return 39;
        case 7:
         return 36;
        case 8:
         return 38;
        case 9:
         return 33;
        case 10:
         return 106;
        case 11:
         return 109;
        case 12:
         return 107;
        case 13:
         return 46;
        case 14: break;
        case 15:
         return 13;
        default: return 111;
      }
     return unidentified;
    }
    if(847852583 <= match){
     var switcher = t - 86 | 0;
     if(6 >= switcher >>> 0)
      switch(switcher){
        case 0:
         return 17;
        case 2:
         return 91;
        case 4:
         return 16;
        case 6:
         return 18;
      }
     return unidentified;
    }
    var switcher$0 = t - 87 | 0;
    if(6 >= switcher$0 >>> 0)
     switch(switcher$0){
       case 0:
        return 17;
       case 2:
        return 91;
       case 4:
        return 16;
       case 6:
        return 18;
     }
    return unidentified;
   }
   function to_location(t){
    var match = _bm_(t);
    return -57574468 <= match
            ? 847852583 <= match ? 1 : 2
            : -702966035 <= match ? 3 : 4;
   }
   var of_event = Js_of_ocaml_Dom_html[26][1];
   function t_of_sexp$0(x_011){
    function _dn_(param){
     var
      _dq_ = param[2],
      _dr_ = _dq_[2],
      _ds_ = _dr_[2],
      meta = _ds_[2][1],
      shift = _ds_[1],
      alt = _dr_[1],
      ctrl = _dq_[1],
      key = param[1];
     return [0, key, ctrl, alt, shift, meta];
    }
    var _do_ = 0;
    function _dp_(param){
     return caml_string_notequal(param, cst_alt$2)
             ? caml_string_notequal
                (param, cst_ctrl$2)
               ? caml_string_notequal
                  (param, cst_key$2)
                 ? caml_string_notequal
                    (param, cst_meta$2)
                   ? caml_string_notequal(param, cst_shift$2) ? -1 : 3
                   : 4
                 : 0
               : 1
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_010,
             [0,
              cst_key,
              1,
              t_of_sexp,
              [0,
               cst_ctrl,
               1,
               Core[324],
               [0,
                cst_alt,
                1,
                Core[324],
                [0, cst_shift, 1, Core[324], [0, cst_meta, 1, Core[324], 0]]]]],
             _dp_,
             _do_,
             _dn_,
             x_011);
   }
   function sexp_of_t$0(param){
    var
     meta_021 = param[5],
     shift_019 = param[4],
     alt_017 = param[3],
     ctrl_015 = param[2],
     key_013 = param[1],
     arg_022 = caml_call1(Core[323], meta_021),
     bnds_012 = [0, [1, [0, _bn_, [0, arg_022, 0]]], 0],
     arg_020 = caml_call1(Core[323], shift_019),
     bnds_012$0 = [0, [1, [0, _bo_, [0, arg_020, 0]]], bnds_012],
     arg_018 = caml_call1(Core[323], alt_017),
     bnds_012$1 = [0, [1, [0, _bp_, [0, arg_018, 0]]], bnds_012$0],
     arg_016 = caml_call1(Core[323], ctrl_015),
     bnds_012$2 = [0, [1, [0, _bq_, [0, arg_016, 0]]], bnds_012$1],
     arg_014 = sexp_of_t(key_013),
     bnds_012$3 = [0, [1, [0, _br_, [0, arg_014, 0]]], bnds_012$2];
    return [1, bnds_012$3];
   }
   function compare$0(a_023, b_024){
    if(a_023 === b_024) return 0;
    var n = caml_int_compare(a_023[1], b_024[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[316], a_023[2], b_024[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[316], a_023[3], b_024[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Core[316], a_023[4], b_024[4]);
    return 0 === n$2 ? caml_call2(Core[316], a_023[5], b_024[5]) : n$2;
   }
   var
    _bs_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_key$0, bin_shape_t],
         [0,
          [0, cst_ctrl$0, Core[306]],
          [0,
           [0, cst_alt$0, Core[306]],
           [0,
            [0, cst_shift$0, Core[306]],
            [0, [0, cst_meta$0, Core[306]], 0]]]]]),
    _bt_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _bs_], 0],
    _bu_ = caml_call1(Bin_shape[4][1], cst_keyboard_src_keystroke_ml_$1),
    group$0 = caml_call2(Bin_prot_Shape[2], _bu_, _bt_),
    _bv_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _bv_), 0);
   function bin_size_t$0(param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     size = caml_call2(Bin_prot_Common[23], 0, 1),
     _dj_ = caml_call1(Core[307], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _dj_),
     _dk_ = caml_call1(Core[307], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _dk_),
     _dl_ = caml_call1(Core[307], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _dl_),
     _dm_ = caml_call1(Core[307], v5);
    return caml_call2(Bin_prot_Common[23], size$2, _dm_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = bin_write_t(buf, pos, v1),
     pos$1 = caml_call3(Core[309], buf, pos$0, v2),
     pos$2 = caml_call3(Core[309], buf, pos$1, v3),
     pos$3 = caml_call3(Core[309], buf, pos$2, v4);
    return caml_call3(Core[309], buf, pos$3, v5);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_keyboard_src_keystroke_ml_$2,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_key = bin_read_t$0(buf, pos_ref),
     v_ctrl = caml_call2(Core[312], buf, pos_ref),
     v_alt = caml_call2(Core[312], buf, pos_ref),
     v_shift = caml_call2(Core[312], buf, pos_ref),
     v_meta = caml_call2(Core[312], buf, pos_ref);
    return [0, v_key, v_ctrl, v_alt, v_shift, v_meta];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function hash_fold_t$0(hsv, arg){
    var
     hsv$0 = hash_fold_t(hsv, arg[1]),
     hsv$1 = caml_call2(Core[321], hsv$0, arg[2]),
     hsv$2 = caml_call2(Core[321], hsv$1, arg[3]),
     hsv$3 = caml_call2(Core[321], hsv$2, arg[4]);
    return caml_call2(Core[321], hsv$3, arg[5]);
   }
   function hash$0(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _di_ = hash_fold_t$0(hsv, arg);
    return caml_call1(Base_Hash[9], _di_);
   }
   function meta(r){return r[5];}
   function shift(r){return r[4];}
   function alt(r){return r[3];}
   function ctrl(r){return r[2];}
   function key(r){return r[1];}
   var
    t_sexp_grammar$0 =
      [9,
       [246,
        function(_dh_){
         return [2,
                 [2,
                  [0,
                   0,
                   [0,
                    [1, [0, cst_key$1, 1, [0, t_sexp_grammar, 0]]],
                    [0,
                     [1, [0, cst_ctrl$1, 1, [0, Core[325], 0]]],
                     [0,
                      [1, [0, cst_alt$1, 1, [0, Core[325], 0]]],
                      [0,
                       [1, [0, cst_shift$1, 1, [0, Core[325], 0]]],
                       [0, [1, [0, cst_meta$1, 1, [0, Core[325], 0]]], 0]]]]]]]];
        }]],
    _bw_ =
      caml_call1
       (Core_Comparable[15],
        [0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         t_of_sexp$0,
         sexp_of_t$0]),
    symbol = _bw_[1],
    symbol$0 = _bw_[2],
    symbol$1 = _bw_[3],
    symbol$2 = _bw_[4],
    symbol$3 = _bw_[5],
    symbol$4 = _bw_[6],
    equal$0 = _bw_[7],
    compare$1 = _bw_[8],
    min = _bw_[9],
    max = _bw_[10],
    ascending = _bw_[11],
    descending = _bw_[12],
    between = _bw_[13],
    clamp_exn = _bw_[14],
    clamp = _bw_[15],
    validate_lbound = _bw_[16],
    validate_ubound = _bw_[17],
    validate_bound = _bw_[18],
    Replace_polymorphic_compare = _bw_[19],
    comparator = _bw_[20],
    Map = _bw_[21],
    Set = _bw_[22],
    include =
      caml_call1
       (Core_Hashable[5],
        [0,
         hash_fold_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         t_of_sexp$0,
         compare$0,
         sexp_of_t$0,
         hash$0]),
    hash_fold_t$1 = include[1],
    hash$1 = include[2],
    hashable = include[3],
    Table = include[4],
    Hash_set = include[5],
    Hash_queue = include[6];
   function create(key, ctrl, alt, shift, meta){return [0, key, ctrl, alt, shift, meta];
   }
   function create$0(ctrl, alt, shift, meta, key){
    var
     _de_ = caml_call1(Core_Option[62], meta),
     _df_ = caml_call1(Core_Option[62], shift),
     _dg_ = caml_call1(Core_Option[62], alt);
    return [0, key, caml_call1(Core_Option[62], ctrl), _dg_, _df_, _de_];
   }
   function of_event$0(ev){
    var
     key = caml_call1(Vdom_keyboard_Keyboard_event[1], ev),
     ctrl = caml_call1(Vdom_keyboard_Keyboard_event[2], ev),
     alt = caml_call1(Vdom_keyboard_Keyboard_event[3], ev),
     shift = caml_call1(Vdom_keyboard_Keyboard_event[4], ev),
     meta = caml_call1(Vdom_keyboard_Keyboard_event[5], ev);
    return [0, key, ctrl, alt, shift, meta];
   }
   function key$0(v0){return [0, v0];}
   function digit(v0){return [1, v0];}
   function numpad(v0){return [2, v0];}
   function arrow(v0){return [3, v0];}
   function shift_string_and_keyboard_code(t){
    if(t[4]){
     var key = t[1];
     a:
     {
      if(56 > key)
       switch(key){
         case 27:
          var match = _bx_; break a;
         case 28:
          var match = _by_; break a;
         case 29:
          var match = _bz_; break a;
         case 30:
          var match = _bA_; break a;
         case 31:
          var match = _bB_; break a;
         case 32:
          var match = _bC_; break a;
         case 33:
          var match = _bD_; break a;
         case 34:
          var match = _bE_; break a;
         case 35:
          var match = _bF_; break a;
         case 36:
          var match = _bG_; break a;
         case 37:
          var match = _bH_; break a;
         case 38:
          var match = _bI_; break a;
         case 47:
          var match = _bJ_; break a;
         case 48:
          var match = _bK_; break a;
         case 49:
          var match = _bL_; break a;
         case 50:
          var match = _bM_; break a;
         case 51:
          var match = _bN_; break a;
         case 52:
          var match = _bO_; break a;
         case 53:
          var match = _bP_; break a;
         case 54:
          var match = _bQ_; break a;
         case 55:
          var match = _bR_; break a;
       }
      var match = 0;
     }
     if(match)
      var
       str$3 = match[1],
       shift_combo_str = [0, str$3],
       shift_str$0 = cst$16;
     else
      var shift_combo_str = 0, shift_str$0 = cst_Shift;
    }
    else
     var shift_combo_str = 0, shift_str$0 = shift_str;
    if(shift_combo_str)
     var str$4 = shift_combo_str[1], keyboard_code_str = str$4;
    else{
     var
      _dc_ = sexp_of_t(t[1]),
      str$5 = caml_call1(Core_Sexp[86], _dc_),
      _c$_ = [4, str$5],
      _da_ =
        function(param){
         var f = param[2], prefix = param[1];
         return caml_call2(Core_String[73], str$5, prefix)
                 ? [0,
                   caml_call1
                    (f,
                     caml_call2
                      (Core_String[99],
                       str$5,
                       runtime.caml_ml_string_length(prefix)))]
                 : 0;
        },
      _db_ =
        caml_call2
         (Core_List[28],
          [0,
           [0, cst_Key, key$0],
           [0,
            [0, cst_Digit, digit],
            [0, [0, cst_Numpad, numpad], [0, [0, cst_Arrow, arrow], 0]]]],
          _da_),
      key_with_prefix = caml_call2(Core_Option[39], _db_, _c$_),
      key$1 = t[1];
     a:
     switch(key_with_prefix[0]){
       case 0:
        var str = key_with_prefix[1], _dd_ = caml_call1(Core_String[50], str);
        break;
       case 2:
        var str$1 = key_with_prefix[1], switcher = key$1 - 78 | 0;
        if(6 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var _dd_ = cst; break a;
           case 1:
            var _dd_ = cst$0; break a;
           case 2:
            var _dd_ = cst$1; break a;
           case 3:
            var _dd_ = cst$2; break a;
           case 4:
            var _dd_ = cst$3; break a;
           case 5: break;
           default: var _dd_ = cst$4; break a;
         }
        var _dd_ = str$1;
        break;
       case 4:
        var str$2 = key_with_prefix[1], switcher$0 = key$1 - 37 | 0;
        if(18 >= switcher$0 >>> 0)
         switch(switcher$0){
           case 0:
            var _dd_ = cst$5; break a;
           case 1:
            var _dd_ = cst$6; break a;
           case 5:
            var _dd_ = cst_Esc; break a;
           case 6:
            var _dd_ = cst_Bksp; break a;
           case 10:
            var _dd_ = cst$7; break a;
           case 11:
            var _dd_ = cst$8; break a;
           case 12:
            var _dd_ = cst$9; break a;
           case 13:
            var _dd_ = cst$10; break a;
           case 14:
            var _dd_ = cst$11; break a;
           case 15:
            var _dd_ = cst$12; break a;
           case 16:
            var _dd_ = cst$13; break a;
           case 17:
            var _dd_ = cst$14; break a;
           case 18:
            var _dd_ = cst$15; break a;
         }
        var _dd_ = str$2;
        break;
       default: var str$0 = key_with_prefix[1], _dd_ = str$0;
     }
     var keyboard_code_str = _dd_;
    }
    return [0, shift_str$0, keyboard_code_str];
   }
   function to_string_hum(t){
    var
     ctrl_str = t[2] ? cst_Ctrl : cst$19,
     alt_str = t[3] ? cst_Alt : cst$18,
     meta_str = t[5] ? cst_Meta : cst$17,
     match = shift_string_and_keyboard_code(t),
     keyboard_code_str = match[2],
     shift_str = match[1];
    return caml_call2
            (Core_String[46],
             0,
             [0,
              ctrl_str,
              [0,
               alt_str,
               [0, shift_str, [0, meta_str, [0, keyboard_code_str, 0]]]]]);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bS_ =
       function(param){
        function print(ctrl, alt, shift, meta, key){
         var
          _c9_ = create$0(ctrl, alt, shift, meta, key),
          _c__ =
            [0,
             [24,
              _bU_,
              function(param, custom_printf_025){
               return to_string_hum(custom_printf_025);
              },
              _bT_],
             cst_to_string_hum];
         return caml_call2(Core[258], _c__, _c9_);
        }
        print(0, 0, 0, 0, 1);
        var _cX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _cX_);
        print(0, 0, _bV_, 0, 1);
        var _cY_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _cY_);
        print(_bZ_, _bY_, _bX_, _bW_, 1);
        var _cZ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        caml_call1(Ppx_expect_test_block[2], _cZ_);
        print(0, 0, 0, 0, 28);
        var _c0_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        caml_call1(Ppx_expect_test_block[2], _c0_);
        print(_b0_, 0, 0, 0, 28);
        var _c1_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
        caml_call1(Ppx_expect_test_block[2], _c1_);
        print(0, 0, 0, 0, 69);
        var _c2_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5);
        caml_call1(Ppx_expect_test_block[2], _c2_);
        print(_b1_, 0, 0, 0, 69);
        var _c3_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        caml_call1(Ppx_expect_test_block[2], _c3_);
        print(_b2_, 0, 0, 0, 69);
        var _c4_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
        caml_call1(Ppx_expect_test_block[2], _c4_);
        print(0, 0, 0, 0, 53);
        var _c5_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8);
        caml_call1(Ppx_expect_test_block[2], _c5_);
        print(0, 0, _b3_, 0, 53);
        var _c6_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        caml_call1(Ppx_expect_test_block[2], _c6_);
        print(_b4_, 0, 0, 0, 53);
        var _c7_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
        caml_call1(Ppx_expect_test_block[2], _c7_);
        print(_b6_, 0, _b5_, 0, 53);
        var _c8_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11);
        return caml_call1(Ppx_expect_test_block[2], _c8_);
       },
     _b9_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _b8_,
         _b7_),
     _b__ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _b9_], 0],
     _cb_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ca_,
         _b$_),
     _cc_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _cb_], _b__],
     _cf_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ce_,
         _cd_),
     _cg_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _cf_], _cc_],
     _cj_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ci_,
         _ch_),
     _ck_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _cj_], _cg_],
     _cn_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cm_,
         _cl_),
     _co_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 4), _cn_], _ck_],
     _cr_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cq_,
         _cp_),
     _cs_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 5), _cr_], _co_],
     _cv_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cu_,
         _ct_),
     _cw_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _cv_], _cs_],
     _cz_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cy_,
         _cx_),
     _cA_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 7), _cz_], _cw_],
     _cD_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cC_,
         _cB_),
     _cE_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 8), _cD_], _cA_],
     _cH_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cG_,
         _cF_),
     _cI_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _cH_], _cE_],
     _cL_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cK_,
         _cJ_),
     _cM_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 10), _cL_], _cI_],
     _cP_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cO_,
         _cN_),
     _cQ_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 11), _cP_], _cM_],
     _cS_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13),
     _cT_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_keyboard_src_keystroke_ml,
      541,
      _cW_,
      _cV_,
      _cU_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cT_,
      _cS_,
      _cR_,
      0,
      Inline_test_config,
      _cQ_,
      _bS_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Keystroke);
   var
    Vdom_keyboard_Keystroke =
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        compare,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        hash_fold_t,
        hash,
        all,
        equal,
        to_key_code,
        to_location,
        of_event],
       t_of_sexp$0,
       sexp_of_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_sexp_grammar$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal$0,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator,
       Map,
       Set,
       hash_fold_t$1,
       hash$1,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       create,
       create$0,
       key,
       ctrl,
       alt,
       shift,
       meta,
       of_event$0,
       to_string_hum,
       shift_string_and_keyboard_code];
   runtime.caml_register_global
    (801, Vdom_keyboard_Keystroke, cst_Vdom_keyboard_Keystroke$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Help_text
//# unitInfo: Requires: Core, Core__Bool, Core__Comparable, Core__Int, Core__List, Core__Option, Core__String, Css_gen, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record, Vdom_keyboard__Keystroke, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_or$0 = " or ",
    cst_to$0 = " to ",
    cst_Vdom_keyboard_Help_text$0 = "Vdom_keyboard__Help_text",
    cst_description$0 = "description",
    cst_keys$0 = "keys",
    cst_vdom_keyboard$0 = "vdom_keyboard",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " : ",
    error_source_002 = "keyboard/src/help_text.ml.Command.t",
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Core = global_data.Core,
    Css_gen = global_data.Css_gen,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Core_Option = global_data.Core__Option,
    Vdom_keyboard_Keystroke = global_data.Vdom_keyboard__Keystroke,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Core_Bool = global_data.Core__Bool,
    Core_Int = global_data.Core__Int,
    Core_Comparable = global_data.Core__Comparable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Help_text$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], "keyboard/src/help_text.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "help_text.ml");
   var
    plain = [0, Virtual_dom_Node[6], Virtual_dom_Node[6]],
    cst_or = cst_or$0,
    cst_to = cst_to$0,
    _a_ = [0, cst_description$0],
    _b_ = [0, cst_keys$0],
    cst_description = cst_description$0,
    cst_keys = cst_keys$0,
    _c_ = [0, [0, 936573133, "."], 0],
    _d_ = [0, 936573133, cst_to$0],
    _e_ = [0, 836767252, [0, 4150142, cst_or$0]],
    _f_ = [0, 936573133, "Press "],
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Help_text = cst_Vdom_keyboard_Help_text$0;
   function with_classes(key_class, plain_text_class){
    function text_span(class$0, text){
     var
      _aj_ = [0, caml_call1(Virtual_dom_Node[6], text), 0],
      _ak_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][16], class$0), 0]];
     return caml_call3(Virtual_dom_Node[42], 0, _ak_, _aj_);
    }
    function _ag_(_ai_){return text_span(plain_text_class, _ai_);}
    return [0, function(_ah_){return text_span(key_class, _ah_);}, _ag_];
   }
   var View_spec = [0, plain, with_classes];
   function dedup_keys(keys){
    function _af_(a, b){
     return caml_call4
             (Core_Comparable[2],
              Core_String[146],
              Vdom_keyboard_Keystroke[49],
              a,
              b);
    }
    return caml_call2(Core_List[122], keys, _af_);
   }
   function keys_are_consecutive(k0, k1){
    function extract_digit(k){
     function _ab_(param){
      var
       _ac_ = caml_call1(Vdom_keyboard_Keystroke[43], k),
       _ad_ = caml_call5(Vdom_keyboard_Keystroke[42], 0, 0, 0, 0, _ac_),
       _ae_ = caml_call1(Vdom_keyboard_Keystroke[49], _ad_);
      return caml_call1(Core_Int[78], _ae_);
     }
     return caml_call1(Core_Option[56], _ab_);
    }
    var match = extract_digit(k0), match$0 = extract_digit(k1);
    if(match && match$0){
     var
      digit1 = match$0[1],
      digit0 = match[1],
      _Z_ = caml_call2(Core[90], digit0 + 1 | 0, digit1);
     if(! _Z_) return _Z_;
     var
      ___ =
        function(modifier){
         var _$_ = caml_call1(modifier, k1), _aa_ = caml_call1(modifier, k0);
         return caml_call2(Core_Bool[28], _aa_, _$_);
        };
     return caml_call2
             (Core_List[24],
              [0,
               Vdom_keyboard_Keystroke[44],
               [0,
                Vdom_keyboard_Keystroke[45],
                [0,
                 Vdom_keyboard_Keystroke[46],
                 [0, Vdom_keyboard_Keystroke[47], 0]]]],
              ___);
    }
    return 0;
   }
   function t_of_sexp(x_003){
    function _U_(param){
     var description = param[2][1], keys = param[1];
     return [0, keys, description];
    }
    var _V_ = 0;
    function _W_(param){
     return caml_string_notequal(param, cst_description$0)
             ? caml_string_notequal(param, cst_keys$0) ? -1 : 0
             : 1;
    }
    var
     _X_ = [0, cst_description, 1, Core[559], 0],
     _Y_ =
       [0,
        cst_keys,
        1,
        caml_call1(Core[473], Vdom_keyboard_Keystroke[2]),
        _X_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             _Y_,
             _W_,
             _V_,
             _U_,
             x_003);
   }
   function sexp_of_t(param){
    var
     description_007 = param[2],
     keys_005 = param[1],
     arg_008 = caml_call1(Core[558], description_007),
     bnds_004 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call2(Core[472], Vdom_keyboard_Keystroke[3], keys_005),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004];
    return [1, bnds_004$0];
   }
   var
    default$0 =
      [0,
       _f_,
       [0, _e_, [0, _d_, [0, [0, -1018191652, [0, Core_String[52]]], _c_]]]],
    Format = [0, default$0];
   function view_keys(t, view_spec, sep){
    function _J_(param){
     if(! param) return 0;
     var
      keys = param[2],
      first_key = param[1],
      _P_ = caml_call1(Core_List[116], keys),
      keys$0 = [0, first_key, caml_call1(Core_Option[51], _P_)],
      _Q_ = caml_call1(view_spec[2], cst_to),
      _R_ = view_spec[1],
      _S_ = caml_call2(Core_List[51], keys$0, Vdom_keyboard_Keystroke[49]),
      _T_ = caml_call2(Core_List[51], _S_, _R_);
     return caml_call2(Core_List[153], _T_, _Q_);
    }
    function _K_(a, b){return 1 - keys_are_consecutive(a, b);}
    var
     _L_ = dedup_keys(t[1]),
     _M_ = caml_call2(Core_List[112], _L_, _K_),
     keys = caml_call2(Core_List[51], _M_, _J_),
     _N_ = [0, caml_call1(view_spec[2], sep), 0],
     _O_ = caml_call2(Core_List[153], keys, _N_);
    return caml_call1(Core_List[11], _O_);
   }
   function view_description(opt, t, view_spec){
    if(opt)
     var sth = opt[1], f = sth;
    else
     var f = function(_I_){return _I_;};
    var _H_ = caml_call1(f, t[2]);
    return caml_call1(view_spec[2], _H_);
   }
   function view(t, view_spec, format){
    function _E_(param){
     var _G_ = param[1];
     if(836767252 === _G_){
      var sep = param[2][2];
      return view_keys(t, view_spec, sep);
     }
     if(936573133 <= _G_){
      var text = param[2];
      return [0, caml_call1(view_spec[2], text), 0];
     }
     var f = param[2];
     return [0, view_description(f, t, view_spec), 0];
    }
    var _F_ = caml_call2(Core_List[14], format, _E_);
    return caml_call3(Virtual_dom_Node[17], 0, 0, _F_);
   }
   function t_of_sexp$0(x_014){
    return caml_call2(Core[473], t_of_sexp, x_014);
   }
   function sexp_of_t$0(x_015){
    return caml_call2(Core[472], sexp_of_t, x_015);
   }
   function compare(a_016, b_017){
    function _A_(a_018, b_019){
     if(a_018 === b_019) return 0;
     var _B_ = b_019[1], _C_ = a_018[1];
     function _D_(a_011, b_012){
      return caml_call2(Vdom_keyboard_Keystroke[20], a_011, b_012);
     }
     var n = caml_call3(Core[466], _D_, _C_, _B_);
     return 0 === n ? caml_call2(Core[551], a_018[2], b_019[2]) : n;
    }
    return caml_call3(Core[466], _A_, a_016, b_017);
   }
   var is_empty = Core_List[18], empty = 0;
   function of_command_list(_z_){return _z_;}
   function commands(_y_){return _y_;}
   function add_command(t, command){
    return caml_call2(Core[156], t, [0, command, 0]);
   }
   function view_rows(opt, commands$0, view_spec){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst_or;
    function align(how){
     var _x_ = caml_call1(Css_gen[55], how);
     return caml_call1(Virtual_dom_Vdom[1][32], _x_);
    }
    function _h_(commands){
     var _v_ = caml_call1(Core_List[84], commands)[2];
     function _w_(c){return c[1];}
     return [0, caml_call2(Core_List[14], commands, _w_), _v_];
    }
    function _i_(c0, c1){
     var match = dedup_keys(c0[1]), match$0 = dedup_keys(c1[1]);
     if(match && ! match[2] && match$0 && ! match$0[2]){
      var
       k1 = match$0[1],
       k0 = match[1],
       _t_ = keys_are_consecutive(k0, k1),
       _u_ = _t_ ? caml_call2(Core_String[141], c0[2], c1[2]) : _t_;
      return 1 - _u_;
     }
     return 1;
    }
    var
     _j_ = caml_call2(Core_List[112], commands$0, _i_),
     commands = caml_call2(Core_List[51], _j_, _h_);
    function _k_(command){
     var
      _l_ = [0, view_description(0, command, view_spec), 0],
      _m_ = [0, [0, align(847852583), 0]],
      _n_ = [0, caml_call3(Virtual_dom_Node[50], 0, _m_, _l_), 0],
      _o_ = [0, caml_call1(view_spec[2], cst), 0],
      _p_ = view_keys(command, view_spec, sep),
      _q_ = caml_call2(Core[156], _p_, _o_),
      _r_ = [0, [0, align(-57574468), 0]],
      _s_ = [0, caml_call3(Virtual_dom_Node[50], 0, _r_, _q_), _n_];
     return caml_call3(Virtual_dom_Node[53], 0, 0, _s_);
    }
    return caml_call2(Core_List[51], commands, _k_);
   }
   function view$0(sep, t, view_spec){
    var _g_ = view_rows(sep, t, view_spec);
    return caml_call3(Virtual_dom_Node[48], 0, 0, _g_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Help_text);
   var
    Vdom_keyboard_Help_text =
      [0,
       View_spec,
       [0, t_of_sexp, sexp_of_t, Format, view],
       t_of_sexp$0,
       sexp_of_t$0,
       compare,
       empty,
       is_empty,
       of_command_list,
       add_command,
       commands,
       view$0,
       view_rows];
   runtime.caml_register_global
    (37, Vdom_keyboard_Help_text, cst_Vdom_keyboard_Help_text$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Grouped_help_text
//# unitInfo: Requires: Base__Option, Core, Core__List, Core__Map, Core__Option, Core__String, Css_gen, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record, Vdom_keyboard__Help_text, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_keyboard_Grouped_help$0 = "Vdom_keyboard__Grouped_help_text",
    cst_group_order$0 = "group_order",
    cst_groups$0 = "groups",
    cst_vdom_keyboard$0 = "vdom_keyboard",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = "keyboard/src/grouped_help_text.ml.t",
    Css_gen = global_data.Css_gen,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Vdom_keyboard_Help_text = global_data.Vdom_keyboard__Help_text,
    Core_List = global_data.Core__List,
    Core_Map = global_data.Core__Map,
    Base_Option = global_data.Base__Option,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Grouped_help$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], "keyboard/src/grouped_help_text.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "grouped_help_text.ml");
   var
    plain = [0, Vdom_keyboard_Help_text[1][1], Virtual_dom_Node[6]],
    cst_2 = "2",
    cst_colspan = "colspan",
    _a_ = [0, cst_group_order$0],
    _b_ = [0, cst_groups$0],
    cst_group_order = cst_group_order$0,
    cst_groups = cst_groups$0,
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Grouped_help = cst_Vdom_keyboard_Grouped_help$0;
   function with_classes(group_name_class, key_class, plain_text_class){
    function _P_(text){
     var
      _Q_ = [0, caml_call1(Virtual_dom_Node[6], text), 0],
      _R_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][16], group_name_class), 0]];
     return caml_call3(Virtual_dom_Node[17], 0, _R_, _Q_);
    }
    return [0,
            caml_call2
             (Vdom_keyboard_Help_text[1][2], key_class, plain_text_class),
            _P_];
   }
   var View_spec = [0, plain, with_classes];
   function t_of_sexp(x_003){
    function _K_(param){
     var group_order = param[2][1], groups = param[1];
     return [0, groups, group_order];
    }
    var _L_ = 0;
    function _M_(param){
     return caml_string_notequal(param, cst_group_order$0)
             ? caml_string_notequal(param, cst_groups$0) ? -1 : 0
             : 1;
    }
    var
     _N_ = [0, cst_group_order, 1, caml_call1(Core[473], Core_String[134]), 0],
     _O_ =
       [0,
        cst_groups,
        1,
        caml_call1(Core_String[159][44], Vdom_keyboard_Help_text[3]),
        _N_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             _O_,
             _M_,
             _L_,
             _K_,
             x_003);
   }
   function sexp_of_t(param){
    var
     group_order_007 = param[2],
     groups_005 = param[1],
     arg_008 = caml_call2(Core[472], Core_String[135], group_order_007),
     bnds_004 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 =
       caml_call2
        (Core_String[159][45], Vdom_keyboard_Help_text[4], groups_005),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004];
    return [1, bnds_004$0];
   }
   function compare(a_009, b_010){
    if(a_009 === b_010) return 0;
    var _E_ = b_010[1], _F_ = a_009[1];
    function _G_(a_011, b_012){
     return caml_call2(Vdom_keyboard_Help_text[5], a_011, b_012);
    }
    var n = caml_call3(Core_String[159][3], _G_, _F_, _E_);
    if(0 !== n) return n;
    var _H_ = b_010[2], _I_ = a_009[2];
    function _J_(a_013, b_014){
     return caml_call2(Core_String[146], a_013, b_014);
    }
    return caml_call3(Core[466], _J_, _I_, _H_);
   }
   var empty = [0, Core_String[159][5], 0];
   function is_empty(t){return caml_call1(Core_Map[34], t[1]);}
   function of_group_list_exn(group_list){
    function _B_(_D_){return _D_[1];}
    var _C_ = caml_call2(Core_List[51], group_list, _B_);
    return [0, caml_call1(Core_String[159][15], group_list), _C_];
   }
   function add_group_exn(t, group_name, commands){
    var _A_ = caml_call2(Core[156], t[2], [0, group_name, 0]);
    return [0, caml_call3(Core_Map[37], t[1], group_name, commands), _A_];
   }
   function of_command_list(opt, command_list){
    if(opt)
     var sth = opt[1], custom_group_order = sth;
    else
     var custom_group_order = 0;
    function _s_(group_name){return [0, group_name, 0];}
    var
     _t_ = caml_call2(Core_List[51], custom_group_order, _s_),
     groups = caml_call1(Core_String[159][15], _t_),
     rev_group_order = caml_call1(Core_List[59], custom_group_order);
    function _u_(param, _y_){
     var
      command = _y_[2],
      group_name = _y_[1],
      rev_group_order = param[2],
      groups = param[1],
      rev_group_order$0 =
        caml_call2(Core_Map[48], groups, group_name)
         ? rev_group_order
         : [0, group_name, rev_group_order];
     function _z_(commands){
      var commands$0 = caml_call2(Core_Option[39], commands, 0);
      return [0, command, commands$0];
     }
     var groups$0 = caml_call3(Core_Map[43], groups, group_name, _z_);
     return [0, groups$0, rev_group_order$0];
    }
    var
     match =
       caml_call3
        (Core_List[20], command_list, [0, groups, rev_group_order], _u_),
     rev_group_order$0 = match[2],
     groups$0 = match[1],
     _v_ = caml_call1(Core_List[59], rev_group_order$0);
    function _w_(commands){
     if(! commands) return 0;
     var _x_ = caml_call1(Core_List[59], commands);
     return [0, caml_call1(Vdom_keyboard_Help_text[8], _x_)];
    }
    return [0, caml_call2(Core_Map[68], groups$0, _w_), _v_];
   }
   function add_command(t, group_name, command){
    var
     group_order =
       caml_call2(Core_Map[48], t[1], group_name)
        ? t[2]
        : caml_call2(Core[156], t[2], [0, group_name, 0]);
    function _r_(help_text){
     var
      help_text$0 =
        caml_call2(Core_Option[39], help_text, Vdom_keyboard_Help_text[6]);
     return caml_call2(Vdom_keyboard_Help_text[9], help_text$0, command);
    }
    var groups = caml_call3(Core_Map[43], t[1], group_name, _r_);
    return [0, groups, group_order];
   }
   function groups(t){
    function _o_(group_name){
     function _p_(group){return [0, group_name, group];}
     var _q_ = caml_call2(Core_Map[44], t[1], group_name);
     return caml_call2(Base_Option[29][4][3], _q_, _p_);
    }
    return caml_call2(Core_List[13], t[2], _o_);
   }
   function commands(t){
    function _k_(param){
     var help_text = param[2], group_name = param[1];
     function _m_(command){return [0, group_name, command];}
     var _n_ = caml_call1(Vdom_keyboard_Help_text[10], help_text);
     return caml_call2(Core_List[51], _n_, _m_);
    }
    var _l_ = groups(t);
    return caml_call2(Core_List[14], _l_, _k_);
   }
   function view(t, view_spec){
    function _c_(param){
     var
      help_text = param[2],
      group_name = param[1],
      _e_ = [0, caml_call1(view_spec[2], group_name), 0],
      _f_ = caml_call1(Css_gen[55], 980392437),
      _g_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _f_), 0],
      _h_ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_colspan, cst_2), _g_],
      _i_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][10], _h_), 0]],
      _j_ = [0, caml_call3(Virtual_dom_Node[50], 0, _i_, _e_), 0],
      group_name_row = caml_call3(Virtual_dom_Node[53], 0, 0, _j_);
     return [0,
             group_name_row,
             caml_call3
              (Vdom_keyboard_Help_text[12], 0, help_text, view_spec[1])];
    }
    var _d_ = groups(t), rows = caml_call2(Core_List[14], _d_, _c_);
    return caml_call3(Virtual_dom_Node[48], 0, 0, rows);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Grouped_help);
   var
    Vdom_keyboard_Grouped_help_tex =
      [0,
       [0,
        Core_String[126],
        Core_String[127],
        Core_String[128],
        Core_String[129],
        Core_String[130],
        Core_String[131],
        Core_String[132],
        Core_String[133],
        Core_String[134],
        Core_String[135],
        Core_String[136],
        Core_String[137],
        Core_String[138],
        Core_String[139],
        Core_String[140],
        Core_String[141],
        Core_String[142],
        Core_String[143],
        Core_String[144],
        Core_String[145],
        Core_String[146],
        Core_String[147],
        Core_String[148],
        Core_String[149],
        Core_String[150],
        Core_String[151],
        Core_String[152],
        Core_String[153],
        Core_String[154],
        Core_String[155],
        Core_String[156],
        Core_String[157],
        Core_String[158],
        Core_String[159],
        Core_String[160],
        Core_String[161],
        Core_String[162],
        Core_String[163],
        Core_String[164],
        Core_String[165],
        Core_String[166]],
       View_spec,
       t_of_sexp,
       sexp_of_t,
       compare,
       empty,
       is_empty,
       of_group_list_exn,
       add_group_exn,
       groups,
       of_command_list,
       add_command,
       commands,
       view];
   runtime.caml_register_global
    (31, Vdom_keyboard_Grouped_help_tex, cst_Vdom_keyboard_Grouped_help$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Keyboard_event_handler
//# unitInfo: Requires: Base__Hash, Core, Core__Hashable, Core__Hashtbl, Core__List, Core__Map, Core__Option, Core__Set, Core__String, Core__Tuple, Core__Unique_id, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Vdom_keyboard__Grouped_help_text, Vdom_keyboard__Help_text, Vdom_keyboard__Keystroke, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command$1 = "Command",
    cst_Disabled_key$1 = "Disabled_key",
    cst_Vdom_keyboard_Keyboard_eve$0 = "Vdom_keyboard__Keyboard_event_handler",
    cst_command = "command",
    cst_description$0 = "description",
    cst_disabled_key = "disabled_key",
    cst_group$0 = "group",
    cst_handler$0 = "handler",
    cst_keyboard_src_keyboard_even = "keyboard/src/keyboard_event_handler.ml",
    cst_keys$0 = "keys",
    cst_vdom_keyboard$0 = "vdom_keyboard",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "keyboard/src/keyboard_event_handler.ml.Command.t",
    error_source_016 = "keyboard/src/keyboard_event_handler.ml.Action.t",
    descriptions =
      [0, [0, cst_Command$1, 1], [0, [0, cst_Disabled_key$1, 1], 0]],
    error_source_044 = "keyboard/src/keyboard_event_handler.ml.Uid_pair.T.t",
    Core_Map = global_data.Core__Map,
    Core_Option = global_data.Core__Option,
    Core_Tuple = global_data.Core__Tuple,
    Core_List = global_data.Core__List,
    Vdom_keyboard_Grouped_help_tex =
      global_data.Vdom_keyboard__Grouped_help_text,
    Vdom_keyboard_Help_text = global_data.Vdom_keyboard__Help_text,
    Core = global_data.Core,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Vdom_keyboard_Keystroke = global_data.Vdom_keyboard__Keystroke,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_Set = global_data.Core__Set,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id,
    Core_Hashable = global_data.Core__Hashable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Keyboard_eve$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_keyboard_src_keyboard_even);
   caml_call2
    (Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "keyboard_event_handler.ml");
   var
    _l_ = [0, [0, cst_keyboard_src_keyboard_even, 305, 9590, 9629]],
    cst_bug_merge_failed_on_disabl =
      "bug: [merge] failed on disabled key %{sexp: Keystroke.t}",
    _k_ = [0, 0],
    cst_bug_merge_failed_on_disabl$0 = "bug: [merge] failed on disabled key ",
    cst_Duplicate_key_Keystroke_hu = "Duplicate key %{Keystroke#hum}",
    _j_ = [0, 0],
    cst_Duplicate_key = "Duplicate key ",
    _g_ = [0, [2, 0, [12, 47, [2, 0, 0]]], "%s/%s"],
    cst_Disabled = "Disabled",
    cst_Command$0 = cst_Command$1,
    cst_Disabled_key$0 = cst_Disabled_key$1,
    _e_ = [0, cst_Command$1],
    _f_ = [0, cst_Disabled_key$1],
    _a_ = [0, cst_handler$0],
    _b_ = [0, cst_group$0],
    _c_ = [0, cst_description$0],
    _d_ = [0, cst_keys$0],
    cst_handler = cst_handler$0,
    cst_group = cst_group$0,
    cst_description = cst_description$0,
    cst_keys = cst_keys$0,
    cst_number = "number",
    cst_text = "text",
    cst_Command = cst_Command$1,
    cst_Disabled_key = cst_Disabled_key$1,
    cst_Disabled_keys = "Disabled keys",
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Keyboard_eve = cst_Vdom_keyboard_Keyboard_eve$0;
   function true$0(ev){return 1;}
   function false$0(ev){return 0;}
   function not(t1, ev){return 1 - caml_call1(t1, ev);}
   function and(t1, t2, ev){
    var _aV_ = caml_call1(t1, ev);
    return _aV_ ? caml_call1(t2, ev) : _aV_;
   }
   function or(t1, t2, ev){
    var _aU_ = caml_call1(t1, ev);
    return _aU_ ? _aU_ : caml_call1(t2, ev);
   }
   function get_target(ev){
    return caml_call1(Js_of_ocaml_Js[5][10], ev.target);
   }
   function input_cond(ev, on_input, on_textarea){
    var match = get_target(ev);
    if(! match) return 0;
    var
     elem = match[1],
     match$0 = caml_call1(Js_of_ocaml_Dom_html[112], elem);
    switch(match$0[0]){
      case 31:
       var i = match$0[1]; return caml_call1(on_input, i);
      case 53:
       var t = match$0[1]; return caml_call1(on_textarea, t);
      default: return 0;
    }
   }
   function has_input_target(ev){
    function _aT_(param){return 1;}
    return input_cond(ev, function(param){return 1;}, _aT_);
   }
   function has_text_input_target(ev){
    function _aS_(param){return 1;}
    return input_cond
            (ev,
             function(t3){
              return caml_call2
                      (Core_String[145],
                       caml_string_of_jsstring(t3.type),
                       cst_text);
             },
             _aS_);
   }
   function has_number_input_target(ev){
    function _aR_(param){return 0;}
    return input_cond
            (ev,
             function(t4){
              return caml_call2
                      (Core_String[145],
                       caml_string_of_jsstring(t4.type),
                       cst_number);
             },
             _aR_);
   }
   function has_form_element_target(ev){
    function f(t5){
     var _aQ_ = caml_call1(Js_of_ocaml_Js[5][10], t5.form);
     return caml_call1(Core_Option[62], _aQ_);
    }
    return input_cond(ev, f, f);
   }
   function has_target_id(id, ev){
    function _aO_(elem){return caml_string_of_jsstring(elem.id);}
    var
     _aP_ = get_target(ev),
     match = caml_call2(Core_Option[34], _aP_, _aO_);
    if(! match) return 0;
    var target_id = match[1];
    return caml_call2(Core_String[145], id, target_id);
   }
   function has_target_class(class$0, ev){
    function _aM_(elem){return elem.classList;}
    var
     _aN_ = get_target(ev),
     match = caml_call2(Core_Option[34], _aN_, _aM_);
    if(! match) return 0;
    var class_list = match[1];
    return class_list.contains(caml_jsstring_of_string(class$0)) | 0;
   }
   function element_has_target_class(selector, class$0, ev){
    var
     _aL_ =
       Js_of_ocaml_Dom_html[2].querySelector
        (caml_jsstring_of_string(selector)),
     match = caml_call1(Js_of_ocaml_Js[5][10], _aL_);
    if(! match) return 0;
    var element = match[1];
    return element.classList.contains(caml_jsstring_of_string(class$0)) | 0;
   }
   var t_of_sexp = Sexplib0_Sexp_conv[48];
   function sexp_of_t(param){
    function _aJ_(_aK_){return 0;}
    return caml_call1(Sexplib0_Sexp_conv[24], _aJ_);
   }
   function prevent_default(ev){return Virtual_dom_Effect[20];}
   function with_prevent_default(t, ev){
    var _aI_ = [0, caml_call1(t, ev), 0];
    return [0, Virtual_dom_Effect[2], [0, Virtual_dom_Effect[20], _aI_]];
   }
   function handle_by_case(prevent_default, ts, ev){
    function _aG_(param){
     var t = param[2], cond = param[1], _aH_ = caml_call1(cond, ev);
     return caml_call2(Core_Option[60], _aH_, t);
    }
    var match = caml_call2(Core_List[28], ts, _aG_);
    if(! match) return Virtual_dom_Effect[1];
    var t = match[1], event = caml_call1(t, ev);
    return prevent_default
            ? [0,
              Virtual_dom_Effect[2],
              [0, event, [0, Virtual_dom_Effect[20], 0]]]
            : event;
   }
   function only_handle_if(prevent_default, cond, t){
    var _aE_ = [0, [0, cond, t], 0];
    return function(_aF_){
     return handle_by_case(prevent_default, _aE_, _aF_);};
   }
   var Uid = caml_call1(Core_Unique_id[1], 0);
   function get_help_text(param){
    var description = param[2], keys = param[1];
    return [0, keys, description];
   }
   function t_of_sexp$0(sexp_018){
    a:
    {
     if(0 === sexp_018[0]){
      var _az_ = sexp_018[1];
      b:
      if(caml_string_notequal(_az_, cst_Command$1)){
       if(caml_string_notequal(_az_, cst_Disabled_key$1)){
        if(! caml_string_notequal(_az_, cst_command)) break b;
        if(caml_string_notequal(_az_, cst_disabled_key)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_016, sexp_018);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_016, sexp_018);
     }
     var _aA_ = sexp_018[1];
     if(! _aA_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_016, sexp_018);
     var _aB_ = _aA_[1];
     if(0 !== _aB_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_016, sexp_018);
     var tag_019 = _aB_[1];
     b:
     if(caml_string_notequal(tag_019, cst_Command$1)){
      if(caml_string_notequal(tag_019, cst_Disabled_key$1)){
       if(! caml_string_notequal(tag_019, cst_command)) break b;
       if(caml_string_notequal(tag_019, cst_disabled_key)) break a;
      }
      var sexp_args_025 = _aA_[2];
      if(sexp_args_025 && ! sexp_args_025[2]){
       var
        arg0_026 = sexp_args_025[1],
        res0_027 = caml_call1(Vdom_keyboard_Keystroke[2], arg0_026);
       return [1, res0_027];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_016,
               tag_019,
               sexp_018);
     }
     var sexp_args_020 = _aA_[2];
     if(sexp_args_020 && ! sexp_args_020[2]){
      var
       arg0_021 = sexp_args_020[1],
       _at_ =
         function(param){
          var
           _aC_ = param[2],
           _aD_ = _aC_[2],
           handler = _aD_[2][1],
           group = _aD_[1],
           description = _aC_[1],
           keys = param[1];
          return [0, keys, description, group, handler];
         },
       _au_ = 0,
       _av_ =
         function(param){
          return caml_string_notequal(param, cst_description$0)
                  ? caml_string_notequal
                     (param, cst_group$0)
                    ? caml_string_notequal
                       (param, cst_handler$0)
                      ? caml_string_notequal(param, cst_keys$0) ? -1 : 0
                      : 3
                    : 2
                  : 1;
         },
       _aw_ =
         [0,
          cst_group,
          1,
          caml_call1(Core[516], Vdom_keyboard_Grouped_help_tex[1][9]),
          [0, cst_handler, 1, t_of_sexp, 0]],
       _ax_ = [0, cst_description, 1, Core[559], _aw_],
       _ay_ =
         [0,
          cst_keys,
          1,
          caml_call1(Core[473], Vdom_keyboard_Keystroke[2]),
          _ax_],
       res0_022 =
         caml_call6
          (Sexplib0_Sexp_conv_record[3],
           error_source_003,
           _ay_,
           _av_,
           _au_,
           _at_,
           arg0_021);
      return [0, res0_022];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_016,
              tag_019,
              sexp_018);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_016, sexp_018);
   }
   function sexp_of_t$0(param){
    if(0 === param[0]){
     var
      arg0_028 = param[1],
      handler_012 = arg0_028[4],
      group_010 = arg0_028[3],
      description_008 = arg0_028[2],
      keys_006 = arg0_028[1],
      arg_013 = sexp_of_t(handler_012),
      bnds_005 = [0, [1, [0, _a_, [0, arg_013, 0]]], 0],
      arg_011 =
        caml_call2
         (Core[515], Vdom_keyboard_Grouped_help_tex[1][10], group_010),
      bnds_005$0 = [0, [1, [0, _b_, [0, arg_011, 0]]], bnds_005],
      arg_009 = caml_call1(Core[558], description_008),
      bnds_005$1 = [0, [1, [0, _c_, [0, arg_009, 0]]], bnds_005$0],
      arg_007 = caml_call2(Core[472], Vdom_keyboard_Keystroke[3], keys_006),
      bnds_005$2 = [0, [1, [0, _d_, [0, arg_007, 0]]], bnds_005$1],
      res0_029 = [1, bnds_005$2];
     return [1, [0, _e_, [0, res0_029, 0]]];
    }
    var
     arg0_030 = param[1],
     res0_031 = caml_call1(Vdom_keyboard_Keystroke[3], arg0_030);
    return [1, [0, _f_, [0, res0_031, 0]]];
   }
   function command(v0){return [0, v0];}
   function disabled_key(v0){return [1, v0];}
   function is_command(param){return 0 === param[0] ? 1 : 0;}
   function is_disabled_key(param){return 0 === param[0] ? 0 : 1;}
   function command_val(param){
    if(0 !== param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   function disabled_key_val(param){
    if(0 === param[0]) return 0;
    var v0 = param[1];
    return [0, v0];
   }
   var
    command$0 = [0, cst_Command, 0, command],
    disabled_key$0 = [0, cst_Disabled_key, 1, disabled_key];
   function fold(init, command_fun, disabled_key_fun){
    return caml_call2
            (disabled_key_fun,
             caml_call2(command_fun, init, command$0),
             disabled_key$0);
   }
   function iter(command_fun, disabled_key_fun){
    caml_call1(command_fun, command$0);
    return caml_call1(disabled_key_fun, disabled_key$0);
   }
   function map(t, command_fun, disabled_key_fun){
    if(0 === t[0]){
     var v0 = t[1];
     return caml_call2(command_fun, command$0, v0);
    }
    var v0$0 = t[1];
    return caml_call2(disabled_key_fun, disabled_key$0, v0$0);
   }
   function make_matcher(command_fun, disabled_key_fun, compile_acc){
    var
     match = caml_call2(command_fun, command$0, compile_acc),
     compile_acc$0 = match[2],
     command_gen = match[1],
     match$0 = caml_call2(disabled_key_fun, disabled_key$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     disabled_key_gen = match$0[1];
    function _aq_(param){return command_gen;}
    function _ar_(param){return disabled_key_gen;}
    return [0, function(_as_){return map(_as_, _aq_, _ar_);}, compile_acc$1];
   }
   function to_rank(param){return 0 === param[0] ? 0 : 1;}
   function to_name(param){
    return 0 === param[0] ? cst_Command$0 : cst_Disabled_key$0;
   }
   var
    Variants =
      [0,
       command$0,
       disabled_key$0,
       fold,
       iter,
       map,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
   function get_help_text$0(param){
    if(0 === param[0]){var command = param[1]; return get_help_text(command);}
    var key = param[1];
    return [0, [0, key, 0], cst_Disabled];
   }
   function sexp_of_t$1(x_036){
    function _ap_(param){
     var
      arg1_033 = param[2],
      arg0_032 = param[1],
      res0_034 = caml_call1(Uid[10], arg0_032),
      res1_035 = sexp_of_t$0(arg1_033);
     return [1, [0, res0_034, [0, res1_035, 0]]];
    }
    return caml_call2(Vdom_keyboard_Keystroke[33][45], _ap_, x_036);
   }
   var empty = Vdom_keyboard_Keystroke[33][5];
   function new_entries(action){
    var data = [0, caml_call1(Uid[45], 0), action];
    function _an_(key){return [0, key, data];}
    if(0 === action[0])
     var command = action[1], _ao_ = command[1];
    else
     var key = action[1], _ao_ = [0, key, 0];
    return caml_call2(Core_List[51], _ao_, _an_);
   }
   function of_action_list_exn(actions){
    var _am_ = caml_call2(Core_List[14], actions, new_entries);
    return caml_call1(Vdom_keyboard_Keystroke[33][15], _am_);
   }
   function of_command_list_exn(commands){
    return of_action_list_exn(caml_call2(Core_List[51], commands, command));
   }
   function add_action_core(t, action, map_add){
    function _ak_(t, param){
     var data = param[2], key = param[1];
     return caml_call3(map_add, t, key, data);
    }
    var _al_ = new_entries(action);
    return caml_call3(Core_List[20], _al_, t, _ak_);
   }
   function set_action(t, action){
    return add_action_core(t, action, Core_Map[38]);
   }
   function set_command(t, command){return set_action(t, [0, command]);}
   function set_disabled_key(t, key){return set_action(t, [1, key]);}
   function add_action_exn(t, action){
    return add_action_core(t, action, Core_Map[37]);
   }
   function add_command_exn(t, command){
    return add_action_exn(t, [0, command]);
   }
   function add_disabled_key_exn(t, key){return add_action_exn(t, [1, key]);}
   var merge_core = Core_Map[86];
   function _h_(param, id1, id2){return id2;}
   function merge_override_with_right(_ah_){
    var _ai_ = caml_call1(merge_core, _ah_);
    return function(_aj_){return caml_call2(_ai_, _aj_, _h_);};
   }
   function _i_(key, param, _ad_){
    var
     _ae_ = 0,
     _af_ = 0,
     _ag_ =
       [0,
        [11,
         cst_Duplicate_key,
         [24,
          _j_,
          function(param, custom_printf_037){
           return caml_call1(Vdom_keyboard_Keystroke[49], custom_printf_037);
          },
          _af_]],
        cst_Duplicate_key_Keystroke_hu];
    return caml_call3(Core[246], _ag_, key, _ae_);
   }
   function merge_exn(_aa_){
    var _ab_ = caml_call1(merge_core, _aa_);
    return function(_ac_){return caml_call2(_ab_, _ac_, _i_);};
   }
   function t_of_sexp$1(sexp_043){
    if(1 === sexp_043[0]){
     var ___ = sexp_043[1];
     if(___){
      var _$_ = ___[2];
      if(_$_ && ! _$_[2]){
       var
        arg1_040 = _$_[1],
        arg0_039 = ___[1],
        res0_041 = caml_call1(Uid[9], arg0_039),
        res1_042 = caml_call1(Uid[9], arg1_040);
       return [0, res0_041, res1_042];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_044, 2, sexp_043);
   }
   function sexp_of_t$2(param){
    var
     arg1_046 = param[2],
     arg0_045 = param[1],
     res0_047 = caml_call1(Uid[10], arg0_045),
     res1_048 = caml_call1(Uid[10], arg1_046);
    return [1, [0, res0_047, [0, res1_048, 0]]];
   }
   function hash_fold_t(hsv, arg){
    var
     e1 = arg[2],
     e0 = arg[1],
     hsv$0 = caml_call2(Uid[35], hsv, e0),
     hsv$1 = caml_call2(Uid[35], hsv$0, e1);
    return hsv$1;
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _Z_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _Z_);
   }
   function compare(a_049, b_050){
    var
     t_052 = a_049[2],
     t_051 = a_049[1],
     t_054 = b_050[2],
     t_053 = b_050[1],
     n = caml_call2(Uid[20], t_051, t_053);
    return 0 === n ? caml_call2(Uid[20], t_052, t_054) : n;
   }
   var
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp$1, compare, sexp_of_t$2, hash]),
    Table = include[5];
   function merge_both(t1, t2){
    var
     combined_keys_by_id_pair = caml_call3(Table[5], 0, 0, 0),
     combined_keys_by_id = caml_call3(Uid[38][5], 0, 0, 0);
    function add_combined_keys_by_id(id, key){
     function _Y_(param){
      if(! param) return caml_call1(Vdom_keyboard_Keystroke[34][6], key);
      var keys = param[1];
      return caml_call2(Core_Set[12], keys, key);
     }
     return caml_call3(Core_Hashtbl[41], combined_keys_by_id, id, _Y_);
    }
    function _H_(key, data){
     if(737457313 !== data[1]) return 0;
     var _X_ = data[2], id2 = _X_[2][1], id1 = _X_[1][1];
     function _W_(param){
      if(! param) return [0, caml_call1(Uid[45], 0), [0, key, 0]];
      var match = param[1], keys = match[2], id = match[1];
      return [0, id, caml_call2(Core[156], keys, [0, key, 0])];
     }
     caml_call3
      (Core_Hashtbl[41], combined_keys_by_id_pair, [0, id1, id2], _W_);
     add_combined_keys_by_id(id1, key);
     return add_combined_keys_by_id(id2, key);
    }
    caml_call3(Core_Map[56], t1, t2, _H_);
    function _I_(param, _L_){
     if(737457313 !== _L_[1]){
      var
       match$1 = _L_[2],
       action$0 = match$1[2],
       id = match$1[1],
       match$2 = caml_call2(Core_Hashtbl[56], combined_keys_by_id, id);
      if(! match$2) return [0, [0, id, action$0]];
      var combined_keys = match$2[1];
      if(0 === action$0[0]){
       var
        command$0 = action$0[1],
        _O_ =
          function(k){return 1 - caml_call2(Core_Set[11], combined_keys, k);},
        keys_left = caml_call2(Core_List[12], command$0[1], _O_);
       return keys_left
               ? [0,
                 [0,
                  id,
                  [0,
                   [0, keys_left, command$0[2], command$0[3], command$0[4]]]]]
               : 0;
      }
      var
       key = action$0[1],
       _P_ = 0,
       _Q_ = 0,
       _R_ =
         [0,
          [11,
           cst_bug_merge_failed_on_disabl$0,
           [24,
            _k_,
            function(param, custom_printf_055){
             var
              _V_ = caml_call1(Vdom_keyboard_Keystroke[3], custom_printf_055);
             return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _V_);
            },
            _Q_]],
          cst_bug_merge_failed_on_disabl];
      return caml_call3(Core[246], _R_, key, _P_);
     }
     var
      _M_ = _L_[2],
      _N_ = _M_[2],
      action2 = _N_[2],
      id2 = _N_[1],
      match = _M_[1],
      action1 = match[2],
      id1 = match[1],
      match$0 =
        caml_call2(Core_Hashtbl[57], combined_keys_by_id_pair, [0, id1, id2]),
      keys = match$0[2],
      new_id = match$0[1];
     a:
     {
      if(0 === action1[0]){
       var command1 = action1[1];
       if(0 === action2[0]){
        var
         command2 = action2[1],
         _J_ =
           function(ev){
            var
             _T_ = [0, caml_call1(command2[4], ev), 0],
             _U_ = [0, caml_call1(command1[4], ev), _T_];
            return [0, Virtual_dom_Effect[2], _U_];
           },
         _K_ = caml_call2(Core_Option[59], command1[3], command2[3]),
         action =
           [0,
            [0,
             keys,
             caml_call3(Core[265], _g_, command1[2], command2[2]),
             _K_,
             _J_]];
        break a;
       }
       var command = command1;
      }
      else{
       if(0 !== action2[0]){var action = action1; break a;}
       var command = action2[1];
      }
      var
       handler =
         function(ev){
          var _S_ = [0, caml_call1(command[4], ev), 0];
          return [0, Virtual_dom_Effect[2], [0, Virtual_dom_Effect[20], _S_]];
         },
       action = [0, [0, command[1], command[2], command[3], handler]];
     }
     return [0, [0, new_id, action]];
    }
    return caml_call3(Core_Map[84], t1, t2, _I_);
   }
   function merge(on_dup){
    return 737457313 === on_dup
            ? merge_both
            : 916717526 <= on_dup ? merge_override_with_right : merge_exn;
   }
   function handle_event(t, ev){
    function _D_(param){
     var action = param[2];
     if(0 === action[0])
      var command = action[1], _G_ = command[4];
     else
      var _G_ = prevent_default;
     return caml_call1(_G_, ev);
    }
    var
     _E_ = caml_call1(Vdom_keyboard_Keystroke[48], ev),
     _F_ = caml_call2(Core_Map[44], t, _E_);
    return caml_call2(Core_Option[34], _F_, _D_);
   }
   function handle_or_ignore_event(t, ev){
    var _B_ = Virtual_dom_Effect[1], _C_ = handle_event(t, ev);
    return caml_call2(Core_Option[39], _C_, _B_);
   }
   var
    disabled_key_group_name =
      caml_call1(Vdom_keyboard_Grouped_help_tex[1][11], cst_Disabled_keys);
   function get_help_text_commands(include_disabled_keys, t){
    function _v_(key, param, actions_by_id){
     var action = param[2], id = param[1];
     function _A_(prev){
      if(prev)
       var prev_keys = prev[1][2], prev_keys$0 = prev_keys;
      else
       var prev_keys$0 = 0;
      return [0, action, caml_call2(Core[156], prev_keys$0, [0, key, 0])];
     }
     return caml_call3(Core_Map[43], actions_by_id, id, _A_);
    }
    var
     _w_ = caml_call3(Core_Map[61], t, Uid[33][5], _v_),
     actions = caml_call1(Core_Map[80], _w_);
    function _x_(param){
     var keys = param[2], action = param[1];
     if(0 === action[0]){
      var
       command = action[1],
       command$0 = [0, keys, command[2], command[3], command[4]],
       _y_ = get_help_text(command$0);
      return [0, [0, command$0[3], _y_]];
     }
     var key = action[1];
     function _z_(param){
      return [0, [0, disabled_key_group_name], get_help_text$0([1, key])];
     }
     return caml_call2(Core_Option[34], include_disabled_keys, _z_);
    }
    return caml_call2(Core_List[13], actions, _x_);
   }
   function get_help_text$1(include_disabled_keys, t){
    function _s_(_u_){return _u_[2];}
    var
     _t_ = get_help_text_commands(include_disabled_keys, t),
     help_text_commands = caml_call2(Core_List[51], _t_, _s_);
    return caml_call1(Vdom_keyboard_Help_text[8], help_text_commands);
   }
   function get_grouped_help_text_core
   (include_disabled_keys, custom_group_order, t, get_group){
    var _o_ = Core_Tuple[1][12];
    function _p_(_r_){return caml_call2(_o_, _r_, get_group);}
    var
     _q_ = get_help_text_commands(include_disabled_keys, t),
     help_text_commands = caml_call2(Core_List[51], _q_, _p_);
    return caml_call2
            (Vdom_keyboard_Grouped_help_tex[11],
             custom_group_order,
             help_text_commands);
   }
   function get_grouped_help_text
   (include_disabled_keys, custom_group_order, t, default_group){
    var _m_ = Core_Option[39];
    return get_grouped_help_text_core
            (include_disabled_keys,
             custom_group_order,
             t,
             function(_n_){return caml_call2(_m_, _n_, default_group);});
   }
   function get_grouped_help_text_exn
   (include_disabled_keys, custom_group_order, t){
    var arg = caml_call1(Core_Option[40], _l_);
    return get_grouped_help_text_core
            (include_disabled_keys,
             custom_group_order,
             t,
             function(eta){return caml_call3(arg, 0, 0, eta);});
   }
   function get_action(t, keystroke){
    var match = caml_call2(Core_Map[44], t, keystroke);
    if(! match) return 0;
    var action = match[1][2];
    return [0, action];
   }
   var handled_keystrokes = Core_Map[120];
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Keyboard_eve);
   var
    Vdom_keyboard_Keyboard_event_h =
      [0,
       [0,
        true$0,
        false$0,
        not,
        and,
        or,
        has_input_target,
        has_text_input_target,
        has_number_input_target,
        has_form_element_target,
        has_target_id,
        has_target_class,
        element_has_target_class],
       [0,
        t_of_sexp,
        sexp_of_t,
        with_prevent_default,
        only_handle_if,
        handle_by_case],
       [0, get_help_text],
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        command,
        disabled_key,
        is_command,
        is_disabled_key,
        command_val,
        disabled_key_val,
        Variants,
        get_help_text$0],
       sexp_of_t$1,
       empty,
       of_action_list_exn,
       of_command_list_exn,
       add_action_exn,
       add_command_exn,
       add_disabled_key_exn,
       set_action,
       set_command,
       set_disabled_key,
       merge,
       handle_event,
       handle_or_ignore_event,
       get_help_text$1,
       get_grouped_help_text,
       get_grouped_help_text_exn,
       get_action,
       handled_keystrokes];
   runtime.caml_register_global
    (84, Vdom_keyboard_Keyboard_event_h, cst_Vdom_keyboard_Keyboard_eve$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard__Variable_keyboard_event_handler
//# unitInfo: Requires: Core, Core__List, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Vdom_keyboard__Keyboard_event_handler
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_keyboard_Variable_key$0 =
      "Vdom_keyboard__Variable_keyboard_event_handler",
    cst_vdom_keyboard$0 = "vdom_keyboard";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Vdom_keyboard_Keyboard_event_h =
      global_data.Vdom_keyboard__Keyboard_event_handler,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard_Variable_key$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "keyboard/src/variable_keyboard_event_handler.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_vdom_keyboard$0,
     "variable_keyboard_event_handler.ml");
   var
    _a_ = [0, "variable_actions"],
    _b_ = [0, "handler"],
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard_Variable_key = cst_Vdom_keyboard_Variable_key$0;
   function sexp_of_t(of_env_001, param){
    var handler_003 = param[1], bnds_002 = 0;
    function _y_(_z_){return 0;}
    var
     arg_006 = caml_call1(Sexplib0_Sexp_conv[24], _y_),
     bnds_002$0 = [0, [1, [0, _a_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call1(Vdom_keyboard_Keyboard_event_h[5], handler_003),
     bnds_002$1 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function empty_variable_actions(env){return 0;}
   var empty = [0, Vdom_keyboard_Keyboard_event_h[6], empty_variable_actions];
   function of_const_handler(opt, handler){
    if(opt)
     var sth = opt[1], variable_actions = sth;
    else
     var variable_actions = empty_variable_actions;
    return [0, handler, variable_actions];
   }
   function to_const_handler(t, env){
    var variable_actions = caml_call1(t[2], env);
    return caml_call3
            (Core_List[20],
             variable_actions,
             t[1],
             Vdom_keyboard_Keyboard_event_h[12]);
   }
   function map_handler(t, f, arg){
    var _x_ = t[2];
    return [0, caml_call2(f, t[1], arg), _x_];
   }
   function add_action_exn(t){
    var _v_ = Vdom_keyboard_Keyboard_event_h[9];
    return function(_w_){return map_handler(t, _v_, _w_);};
   }
   function add_command_exn(t){
    var _t_ = Vdom_keyboard_Keyboard_event_h[10];
    return function(_u_){return map_handler(t, _t_, _u_);};
   }
   function add_disabled_key_exn(t){
    var _r_ = Vdom_keyboard_Keyboard_event_h[11];
    return function(_s_){return map_handler(t, _r_, _s_);};
   }
   function set_action(t){
    var _p_ = Vdom_keyboard_Keyboard_event_h[12];
    return function(_q_){return map_handler(t, _p_, _q_);};
   }
   function set_command(t){
    var _n_ = Vdom_keyboard_Keyboard_event_h[13];
    return function(_o_){return map_handler(t, _n_, _o_);};
   }
   function set_disabled_key(t){
    var _l_ = Vdom_keyboard_Keyboard_event_h[14];
    return function(_m_){return map_handler(t, _l_, _m_);};
   }
   function add_variable_actions(t, actions){
    function _i_(env){
     var _j_ = caml_call1(actions, env), _k_ = caml_call1(t[2], env);
     return caml_call2(Core[156], _k_, _j_);
    }
    return [0, t[1], _i_];
   }
   function add_variable_commands(t, commands){
    return add_variable_actions
            (t,
             function(env){
              var
               _g_ = Vdom_keyboard_Keyboard_event_h[4][3],
               _h_ = caml_call1(commands, env);
              return caml_call2(Core_List[51], _h_, _g_);
             });
   }
   function add_variable_disabled_keys(t, keys){
    return add_variable_actions
            (t,
             function(env){
              var
               _e_ = Vdom_keyboard_Keyboard_event_h[4][4],
               _f_ = caml_call1(keys, env);
              return caml_call2(Core_List[51], _f_, _e_);
             });
   }
   function get_help_text(param){
    var description = param[2], keys = param[1];
    return [0, keys, description];
   }
   function get_help_text$0(action){
    if(0 === action[0]){
     var command = action[1];
     return get_help_text(command);
    }
    var key = action[1];
    return caml_call1(Vdom_keyboard_Keyboard_event_h[4][10], [1, key]);
   }
   function add_variable_handler_action(t, action){
    return add_variable_actions
            (t,
             function(env){
              var _c_ = 0;
              if(0 === action[0])
               var
                command = action[1],
                handler = command[4],
                group = command[3],
                description = command[2],
                keys = command[1],
                _d_ =
                  [0, [0, keys, description, group, caml_call1(handler, env)]];
              else
               var key = action[1], _d_ = [1, key];
              return [0, _d_, _c_];
             });
   }
   function add_variable_handler_command(t, command){
    return add_variable_handler_action(t, [0, command]);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard_Variable_key);
   var
    Vdom_keyboard_Variable_keyboar =
      [0,
       sexp_of_t,
       empty,
       of_const_handler,
       add_variable_actions,
       add_variable_commands,
       add_variable_disabled_keys,
       add_action_exn,
       add_command_exn,
       add_disabled_key_exn,
       set_action,
       set_command,
       set_disabled_key,
       to_const_handler,
       [0, get_help_text],
       [0, get_help_text$0],
       add_variable_handler_action,
       add_variable_handler_command];
   runtime.caml_register_global
    (17, Vdom_keyboard_Variable_keyboar, cst_Vdom_keyboard_Variable_key$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_keyboard
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Vdom_keyboard__Keyboard_event_handler, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_keyboard$0 = "Vdom_keyboard",
    cst_vdom_keyboard$0 = "vdom_keyboard";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Vdom_keyboard_Keyboard_event_h =
      global_data.Vdom_keyboard__Keyboard_event_handler,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_keyboard$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_keyboard$0);
   caml_call1(Ppx_expect_runtime[1][1], "keyboard/src/vdom_keyboard.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_vdom_keyboard$0, "vdom_keyboard.ml");
   var
    cst_vdom_keyboard = cst_vdom_keyboard$0,
    cst_Vdom_keyboard = cst_Vdom_keyboard$0;
   function with_keyboard_handler(node, keyboard_handler){
    var _a_ = [0, node, 0], _b_ = 0;
    function _c_(event){
     return caml_call2
             (Vdom_keyboard_Keyboard_event_h[17], keyboard_handler, event);
    }
    var _d_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][81], _c_), _b_]];
    return caml_call3(Virtual_dom_Node[17], 0, _d_, _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_keyboard);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_keyboard);
   var Vdom_keyboard = [0, with_keyboard_handler];
   runtime.caml_register_global(14, Vdom_keyboard, cst_Vdom_keyboard$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
