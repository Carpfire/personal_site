// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Domain_name
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Format, Stdlib__List, Stdlib__Map, Stdlib__Set, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_invalid_domain_name$2 = "invalid domain name",
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ".",
    cst = cst$1,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    root = caml_make_vect(0, cst$1),
    cst_invalid_domain_name$1 = cst_invalid_domain_name$2,
    _b_ = [1, [0, 3854881, "couldn't concatenate domain names"]],
    cst_invalid_domain_name$0 = cst_invalid_domain_name$2,
    _a_ = [1, [0, 3854881, "couldn't drop labels"]],
    cst_invalid_domain_name = cst_invalid_domain_name$2,
    cst_label_not_found = "label not found",
    cst_bad_index_for_domain_name = "bad index for domain name",
    cst_invalid_service_name = "invalid service name",
    cst_invalid_host_name = "invalid host name";
   function is_ldh(param){
    a:
    {
     if(58 <= param){
      if(91 <= param){
       if(25 < param - 97 >>> 0) break a;
      }
      else if(65 > param) break a;
     }
     else if(45 !== param && 48 > param) break a;
     return 1;
    }
    return 0;
   }
   function for_all(p, s){
    var n = caml_ml_string_length(s), i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, caml_string_unsafe_get(s, i))) return 0;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function check_host_label(s){
    var _aB_ = 45 !== runtime.caml_string_get(s, 0) ? 1 : 0;
    return _aB_ ? for_all(is_ldh, s) : _aB_;
   }
   function host_exn(t){
    if(0 < t.length - 1){
     var s = caml_check_bound(t, 0)[1], n = caml_ml_string_length(s), i = 0;
     for(;;){
      if(i === n)
       var _az_ = 0;
      else{
       var param = caml_string_unsafe_get(s, i);
       a:
       {
        b:
        {
         if(91 <= param){
          if(25 < param - 97 >>> 0) break b;
         }
         else if(65 > param) break b;
         var _ay_ = 1;
         break a;
        }
        var _ay_ = 0;
       }
       if(! _ay_){var i$0 = i + 1 | 0, i = i$0; continue;}
       var _az_ = 1;
      }
      var _aA_ = _az_;
      break;
     }
    }
    else
     var _aA_ = 1;
    if(_aA_ && caml_call2(Stdlib_Array[22], check_host_label, t)) return t;
    return caml_call1(Stdlib[1], cst_invalid_host_name);
   }
   function host(t){
    try{var _ax_ = [0, host_exn(t)]; return _ax_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, [0, 3854881, e]];
    }
   }
   function check_label_length(s){
    var
     l = caml_ml_string_length(s),
     _av_ = l < 64 ? 1 : 0,
     _aw_ = _av_ ? 0 < l ? 1 : 0 : _av_;
    return _aw_;
   }
   function check_total_length(t){
    var _at_ = 1;
    function _au_(acc, s){
     return (acc + 1 | 0) + caml_ml_string_length(s) | 0;
    }
    return caml_call3(Stdlib_Array[17], _au_, _at_, t) <= 255 ? 1 : 0;
   }
   function service_exn(t){
    var l = t.length - 1;
    if(2 < l){
     var
      name = caml_call3(Stdlib_Array[5], t, 0, l - 2 | 0),
      _al_ = l - 1 | 0,
      s = caml_check_bound(t, _al_)[1 + _al_];
     a:
     {
      if(0 < caml_ml_string_length(s) && 95 === caml_string_unsafe_get(s, 0)){
       var
        srv =
          caml_call3
           (Stdlib_String[16], s, 1, caml_ml_string_length(s) - 1 | 0),
        slen = caml_ml_string_length(srv),
        _aa_ = 0 < slen ? 1 : 0;
       if(_aa_){
        var _ab_ = slen <= 15 ? 1 : 0;
        if(_ab_){
         var _ac_ = for_all(is_ldh, srv);
         if(_ac_){
          var _ad_ = 45 !== caml_string_unsafe_get(srv, 0) ? 1 : 0;
          if(_ad_){
           var
            _ae_ = 45 !== caml_string_unsafe_get(srv, slen - 1 | 0) ? 1 : 0;
           if(_ae_){
            var
             _af_ = caml_call2(Stdlib_String[17], 45, srv),
             _ag_ = function(l){return caml_string_notequal(l, cst$1);},
             _am_ = caml_call2(Stdlib_List[33], _ag_, _af_);
            break a;
           }
           var _ah_ = _ae_;
          }
          else
           var _ah_ = _ad_;
         }
         else
          var _ah_ = _ac_;
        }
        else
         var _ah_ = _ab_;
       }
       else
        var _ah_ = _aa_;
       var _am_ = _ah_;
       break a;
      }
      var _am_ = 0;
     }
     if(_am_){
      var
       _an_ = l - 2 | 0,
       s$0 = caml_check_bound(t, _an_)[1 + _an_],
       _ai_ = caml_string_equal(s$0, "_tcp");
      if(_ai_)
       var _aj_ = _ai_;
      else
       var
        _ak_ = caml_string_equal(s$0, "_udp"),
        _aj_ = _ak_ || caml_string_equal(s$0, "_sctp");
      if(_aj_){
       var _ao_ = caml_call2(Stdlib_Array[22], check_label_length, name);
       if(_ao_){
        var _ap_ = check_total_length(t);
        if(_ap_)
         var _aq_ = 0 === host(name)[0] ? 1 : 0, _ar_ = _aq_;
        else
         var _ar_ = _ap_;
       }
       else
        var _ar_ = _ao_;
      }
      else
       var _ar_ = _aj_;
     }
     else
      var _ar_ = _am_;
     var _as_ = _ar_;
    }
    else
     var _as_ = 0;
    return _as_ ? t : caml_call1(Stdlib[1], cst_invalid_service_name);
   }
   function service(t){
    try{var _$_ = [0, service_exn(t)]; return _$_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, [0, 3854881, e]];
    }
   }
   function raw(t){return t;}
   function get_label_exn(opt, xs, idx){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var idx$0 = rev ? idx : (xs.length - 1 - 1 | 0) - idx | 0;
    try{var _Z_ = caml_check_bound(xs, idx$0)[1 + idx$0]; return _Z_;}
    catch(___){
     var _Y_ = caml_wrap_exception(___);
     if(_Y_[1] === Stdlib[6])
      return caml_call1(Stdlib[1], cst_bad_index_for_domain_name);
     throw caml_maybe_attach_backtrace(_Y_, 0);
    }
   }
   function get_label(rev, xs, idx){
    try{var _X_ = [0, get_label_exn(rev, xs, idx)]; return _X_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, [0, 3854881, e]];
    }
   }
   function find_label_exn(opt, xs, p){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    var l = xs.length - 1 - 1 | 0;
    if(rev)
     var _U_ = 0, start = _U_, next = function(_V_){return _V_ + 1 | 0;};
    else
     var
      next$0 = function(_W_){return _W_ - 1 | 0;},
      start = l,
      next = next$0;
    var idx = start;
    for(;;){
     var _S_ = 0 <= idx ? 1 : 0, _T_ = _S_ ? idx <= l ? 1 : 0 : _S_;
     if(_T_){
      if(! caml_call1(p, caml_check_bound(xs, idx)[1 + idx])){var idx$0 = next(idx), idx = idx$0; continue;}
      var r = idx;
     }
     else
      var r = caml_call1(Stdlib[1], cst_label_not_found);
     return l - r | 0;
    }
   }
   function find_label(rev, xs, p){
    try{var _Q_ = [0, find_label_exn(rev, xs, p)]; return _Q_;}
    catch(_R_){
     var _P_ = caml_wrap_exception(_R_);
     if(_P_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_P_, 0);
    }
   }
   function count_labels(xs){return xs.length - 1;}
   function prepend_label_exn(xs, lbl){
    var n = caml_make_vect(1, lbl), n$0 = caml_call2(Stdlib_Array[3], xs, n);
    if(check_label_length(lbl) && check_total_length(n$0)) return n$0;
    return caml_call1(Stdlib[1], cst_invalid_domain_name);
   }
   function prepend_label(xs, lbl){
    try{var _O_ = [0, prepend_label_exn(xs, lbl)]; return _O_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, [0, 3854881, e]];
    }
   }
   function drop_label_exn(opt, _N_, t){
    if(opt) var sth = opt[1], rev = sth; else var rev = 0;
    if(_N_) var sth$0 = _N_[1], amount = sth$0; else var amount = 1;
    var len = t.length - 1 - amount | 0, start = rev ? amount : 0;
    return caml_call3(Stdlib_Array[5], t, start, len);
   }
   function drop_label(rev, amount, t){
    try{var _L_ = [0, drop_label_exn(rev, amount, t)]; return _L_;}
    catch(_M_){
     var _K_ = caml_wrap_exception(_M_);
     if(_K_[1] === Stdlib[6]) return _a_;
     throw caml_maybe_attach_backtrace(_K_, 0);
    }
   }
   function append_exn(pre, post){
    var r = caml_call2(Stdlib_Array[3], post, pre);
    return check_total_length(r)
            ? r
            : caml_call1(Stdlib[1], cst_invalid_domain_name$0);
   }
   function append(pre, post){
    try{var _I_ = [0, append_exn(pre, post)]; return _I_;}
    catch(_J_){
     var _H_ = caml_wrap_exception(_J_);
     if(_H_[1] === Stdlib[6]) return _b_;
     throw caml_maybe_attach_backtrace(_H_, 0);
    }
   }
   function of_strings_exn(xs){
    var rst = caml_call1(Stdlib_List[10], xs);
    a:
    {
     if(rst && ! caml_string_notequal(rst[1], cst$1)){var rst$0 = rst[2], labels = rst$0; break a;}
     var labels = rst;
    }
    var
     t = caml_call1(Stdlib_Array[10], labels),
     _F_ = caml_call2(Stdlib_Array[22], check_label_length, t),
     _G_ = _F_ ? check_total_length(t) : _F_;
    return _G_ ? t : caml_call1(Stdlib[1], cst_invalid_domain_name$1);
   }
   function of_strings(xs){
    try{var _E_ = [0, of_strings_exn(xs)]; return _E_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, [0, 3854881, e]];
    }
   }
   function of_string(s){
    return of_strings(caml_call2(Stdlib_String[17], 46, s));
   }
   function of_string_exn(s){
    return of_strings_exn(caml_call2(Stdlib_String[17], 46, s));
   }
   function of_array(a){return a;}
   function to_array(a){return a;}
   function to_strings(opt, dn){
    if(opt) var sth = opt[1], trailing = sth; else var trailing = 0;
    var
     labels = caml_call1(Stdlib_Array[9], dn),
     _D_ = trailing ? [0, cst, labels] : labels;
    return caml_call1(Stdlib_List[10], _D_);
   }
   function to_string(trailing, dn){
    var _C_ = to_strings(trailing, dn);
    return caml_call2(Stdlib_String[7], cst$0, _C_);
   }
   function canonical(t){
    var str = to_string(0, t);
    return of_string_exn(caml_call1(Stdlib_String[27], str));
   }
   function pp(ppf, xs){
    var _B_ = to_string(0, xs);
    return caml_call2(Stdlib_Format[13], ppf, _B_);
   }
   function compare_label(a, b){
    var
     _z_ = caml_call1(Stdlib_String[27], b),
     _A_ = caml_call1(Stdlib_String[27], a);
    return caml_call2(Stdlib_String[10], _A_, _z_);
   }
   function compare_domain(cmp_sub, a, b){
    var al = a.length - 1, bl = b.length - 1, idx = 0;
    for(;;){
     if(al === bl && al === idx) return 0;
     if(al === idx) return -1;
     if(bl === idx) return 1;
     var
      _y_ = caml_check_bound(b, idx)[1 + idx],
      x = caml_call2(cmp_sub, caml_check_bound(a, idx)[1 + idx], _y_);
     if(0 !== x) return x;
     var idx$0 = idx + 1 | 0, idx = idx$0;
    }
   }
   function compare(_w_, _x_){return compare_domain(compare_label, _w_, _x_);}
   function equal_label(opt, a, b){
    if(opt)
     var sth = opt[1], case_sensitive = sth;
    else
     var case_sensitive = 0;
    var cmp = case_sensitive ? Stdlib_String[10] : compare_label;
    return 0 === caml_call2(cmp, a, b) ? 1 : 0;
   }
   function equal(opt, a, b){
    if(opt)
     var sth = opt[1], case_sensitive = sth;
    else
     var case_sensitive = 0;
    var cmp = case_sensitive ? Stdlib_String[10] : compare_label;
    return 0 === compare_domain(cmp, a, b) ? 1 : 0;
   }
   function is_subdomain(subdomain, domain){
    var supl = domain.length - 1;
    if(subdomain.length - 1 < supl) return 0;
    var idx = 0;
    for(;;){
     if(idx === supl) return 1;
     var
      _u_ = caml_check_bound(subdomain, idx)[1 + idx],
      _v_ =
        0 === compare_label(caml_check_bound(domain, idx)[1 + idx], _u_)
         ? 1
         : 0;
     if(! _v_) return _v_;
     var idx$0 = idx + 1 | 0, idx = idx$0;
    }
   }
   function compare$0(_s_, _t_){
    return compare_domain(compare_label, _s_, _t_);
   }
   var Ordered = [0, compare$0];
   function compare$1(_q_, _r_){
    return compare_domain(compare_label, _q_, _r_);
   }
   var Host_ordered = [0, compare$1];
   function compare$2(_o_, _p_){
    return compare_domain(compare_label, _o_, _p_);
   }
   var
    Service_ordered = [0, compare$2],
    include = caml_call1(Stdlib_Map[1], Host_ordered),
    empty = include[1],
    add = include[2],
    add_to_list = include[3],
    update = include[4],
    singleton = include[5],
    remove = include[6],
    merge = include[7],
    union = include[8],
    cardinal = include[9],
    bindings = include[10],
    min_binding = include[11],
    min_binding_opt = include[12],
    max_binding = include[13],
    max_binding_opt = include[14],
    choose = include[15],
    choose_opt = include[16],
    find_opt = include[18],
    find_first = include[19],
    find_first_opt = include[20],
    find_last = include[21],
    find_last_opt = include[22],
    iter = include[23],
    fold = include[24],
    map = include[25],
    mapi = include[26],
    filter = include[27],
    filter_map = include[28],
    partition = include[29],
    split = include[30],
    is_empty = include[31],
    mem = include[32],
    equal$0 = include[33],
    compare$3 = include[34],
    for_all$0 = include[35],
    exists = include[36],
    to_list = include[37],
    of_list = include[38],
    to_seq = include[39],
    to_rev_seq = include[40],
    to_seq_from = include[41],
    add_seq = include[42],
    of_seq = include[43],
    _c_ = include[17];
   function find(k, m){
    try{var _m_ = [0, caml_call2(_c_, k, m)]; return _m_;}
    catch(_n_){
     var _l_ = caml_wrap_exception(_n_);
     if(_l_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_l_, 0);
    }
   }
   var
    Host_map =
      [0,
       empty,
       add,
       add_to_list,
       update,
       singleton,
       remove,
       merge,
       union,
       cardinal,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose,
       choose_opt,
       find_opt,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       iter,
       fold,
       map,
       mapi,
       filter,
       filter_map,
       partition,
       split,
       is_empty,
       mem,
       equal$0,
       compare$3,
       for_all$0,
       exists,
       to_list,
       of_list,
       to_seq,
       to_rev_seq,
       to_seq_from,
       add_seq,
       of_seq,
       find],
    Host_set = caml_call1(Stdlib_Set[1], Host_ordered),
    include$0 = caml_call1(Stdlib_Map[1], Service_ordered),
    empty$0 = include$0[1],
    add$0 = include$0[2],
    add_to_list$0 = include$0[3],
    update$0 = include$0[4],
    singleton$0 = include$0[5],
    remove$0 = include$0[6],
    merge$0 = include$0[7],
    union$0 = include$0[8],
    cardinal$0 = include$0[9],
    bindings$0 = include$0[10],
    min_binding$0 = include$0[11],
    min_binding_opt$0 = include$0[12],
    max_binding$0 = include$0[13],
    max_binding_opt$0 = include$0[14],
    choose$0 = include$0[15],
    choose_opt$0 = include$0[16],
    find_opt$0 = include$0[18],
    find_first$0 = include$0[19],
    find_first_opt$0 = include$0[20],
    find_last$0 = include$0[21],
    find_last_opt$0 = include$0[22],
    iter$0 = include$0[23],
    fold$0 = include$0[24],
    map$0 = include$0[25],
    mapi$0 = include$0[26],
    filter$0 = include$0[27],
    filter_map$0 = include$0[28],
    partition$0 = include$0[29],
    split$0 = include$0[30],
    is_empty$0 = include$0[31],
    mem$0 = include$0[32],
    equal$1 = include$0[33],
    compare$4 = include$0[34],
    for_all$1 = include$0[35],
    exists$0 = include$0[36],
    to_list$0 = include$0[37],
    of_list$0 = include$0[38],
    to_seq$0 = include$0[39],
    to_rev_seq$0 = include$0[40],
    to_seq_from$0 = include$0[41],
    add_seq$0 = include$0[42],
    of_seq$0 = include$0[43],
    _d_ = include$0[17];
   function find$0(k, m){
    try{var _j_ = [0, caml_call2(_d_, k, m)]; return _j_;}
    catch(_k_){
     var _i_ = caml_wrap_exception(_k_);
     if(_i_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_i_, 0);
    }
   }
   var
    Service_map =
      [0,
       empty$0,
       add$0,
       add_to_list$0,
       update$0,
       singleton$0,
       remove$0,
       merge$0,
       union$0,
       cardinal$0,
       bindings$0,
       min_binding$0,
       min_binding_opt$0,
       max_binding$0,
       max_binding_opt$0,
       choose$0,
       choose_opt$0,
       find_opt$0,
       find_first$0,
       find_first_opt$0,
       find_last$0,
       find_last_opt$0,
       iter$0,
       fold$0,
       map$0,
       mapi$0,
       filter$0,
       filter_map$0,
       partition$0,
       split$0,
       is_empty$0,
       mem$0,
       equal$1,
       compare$4,
       for_all$1,
       exists$0,
       to_list$0,
       of_list$0,
       to_seq$0,
       to_rev_seq$0,
       to_seq_from$0,
       add_seq$0,
       of_seq$0,
       find$0],
    Service_set = caml_call1(Stdlib_Set[1], Service_ordered),
    include$1 = caml_call1(Stdlib_Map[1], Ordered),
    empty$1 = include$1[1],
    add$1 = include$1[2],
    add_to_list$1 = include$1[3],
    update$1 = include$1[4],
    singleton$1 = include$1[5],
    remove$1 = include$1[6],
    merge$1 = include$1[7],
    union$1 = include$1[8],
    cardinal$1 = include$1[9],
    bindings$1 = include$1[10],
    min_binding$1 = include$1[11],
    min_binding_opt$1 = include$1[12],
    max_binding$1 = include$1[13],
    max_binding_opt$1 = include$1[14],
    choose$1 = include$1[15],
    choose_opt$1 = include$1[16],
    find_opt$1 = include$1[18],
    find_first$1 = include$1[19],
    find_first_opt$1 = include$1[20],
    find_last$1 = include$1[21],
    find_last_opt$1 = include$1[22],
    iter$1 = include$1[23],
    fold$1 = include$1[24],
    map$1 = include$1[25],
    mapi$1 = include$1[26],
    filter$1 = include$1[27],
    filter_map$1 = include$1[28],
    partition$1 = include$1[29],
    split$1 = include$1[30],
    is_empty$1 = include$1[31],
    mem$1 = include$1[32],
    equal$2 = include$1[33],
    compare$5 = include$1[34],
    for_all$2 = include$1[35],
    exists$1 = include$1[36],
    to_list$1 = include$1[37],
    of_list$1 = include$1[38],
    to_seq$1 = include$1[39],
    to_rev_seq$1 = include$1[40],
    to_seq_from$1 = include$1[41],
    add_seq$1 = include$1[42],
    of_seq$1 = include$1[43],
    _e_ = include$1[17];
   function find$1(k, m){
    try{var _g_ = [0, caml_call2(_e_, k, m)]; return _g_;}
    catch(_h_){
     var _f_ = caml_wrap_exception(_h_);
     if(_f_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_f_, 0);
    }
   }
   var
    Map =
      [0,
       empty$1,
       add$1,
       add_to_list$1,
       update$1,
       singleton$1,
       remove$1,
       merge$1,
       union$1,
       cardinal$1,
       bindings$1,
       min_binding$1,
       min_binding_opt$1,
       max_binding$1,
       max_binding_opt$1,
       choose$1,
       choose_opt$1,
       find_opt$1,
       find_first$1,
       find_first_opt$1,
       find_last$1,
       find_last_opt$1,
       iter$1,
       fold$1,
       map$1,
       mapi$1,
       filter$1,
       filter_map$1,
       partition$1,
       split$1,
       is_empty$1,
       mem$1,
       equal$2,
       compare$5,
       for_all$2,
       exists$1,
       to_list$1,
       of_list$1,
       to_seq$1,
       to_rev_seq$1,
       to_seq_from$1,
       add_seq$1,
       of_seq$1,
       find$1],
    Set = caml_call1(Stdlib_Set[1], Ordered),
    Domain_name =
      [0,
       root,
       of_string,
       of_string_exn,
       to_string,
       canonical,
       host,
       host_exn,
       service,
       service_exn,
       raw,
       count_labels,
       is_subdomain,
       get_label,
       get_label_exn,
       find_label,
       find_label_exn,
       prepend_label,
       prepend_label_exn,
       drop_label,
       drop_label_exn,
       append,
       append_exn,
       equal,
       compare,
       equal_label,
       compare_label,
       Host_map,
       Host_set,
       Service_map,
       Service_set,
       Map,
       Set,
       of_strings,
       of_strings_exn,
       to_strings,
       pp,
       of_array,
       to_array];
   runtime.caml_register_global(24, Domain_name, "Domain_name");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
