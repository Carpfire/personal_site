// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Squeue__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Squeue = [0],
    Squeue$0 = [0, Squeue];
   runtime.caml_register_global(0, Squeue$0, "Squeue__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Squeue__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Squeue_Import = "Squeue__Import",
    cst_squeue = "squeue";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Squeue_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_squeue);
   caml_call1(Ppx_expect_runtime[1][1], "squeue/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_squeue, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_squeue);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Squeue_Import);
   var Squeue_Import = [0];
   runtime.caml_register_global(11, Squeue_Import, cst_Squeue_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Squeue
//# unitInfo: Requires: Base__Exn, Core, Core__Linked_queue, Error_checking_mutex, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Condition
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Squeue$0 = "Squeue",
    cst_squeue$0 = "squeue";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core_Linked_queue = global_data.Core__Linked_queue,
    Core = global_data.Core,
    Stdlib_Condition = global_data.Stdlib__Condition,
    Error_checking_mutex = global_data.Error_checking_mutex,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Squeue$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_squeue$0);
   caml_call1(Ppx_expect_runtime[1][1], "squeue/src/squeue.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_squeue$0, "squeue.ml");
   var
    _a_ = [0, "not_full"],
    _b_ = [0, "not_empty"],
    _c_ = [0, "mutex"],
    _d_ = [0, "maxsize"],
    _e_ = [0, "ev_q"],
    cst_squeue = cst_squeue$0,
    cst_Squeue = cst_Squeue$0;
   function sexp_of_t(of_a_001, param){
    var
     not_full_011 = param[5],
     not_empty_009 = param[4],
     mutex_007 = param[3],
     maxsize_005 = param[2],
     ev_q_003 = param[1],
     arg_012 = caml_call1(Sexplib0_Sexp_conv[23], not_full_011),
     bnds_002 = [0, [1, [0, _a_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Sexplib0_Sexp_conv[23], not_empty_009),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_010, 0]]], bnds_002],
     arg_008 = caml_call1(Sexplib0_Sexp_conv[23], mutex_007),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_008, 0]]], bnds_002$0],
     arg_006 = caml_call1(Core[389], maxsize_005),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = caml_call2(Core_Linked_queue[10], of_a_001, ev_q_003),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_004, 0]]], bnds_002$2];
    return [1, bnds_002$3];
   }
   function create(maxsize){
    var
     ev_q = caml_call1(Core_Linked_queue[60], 0),
     mutex = caml_call1(Error_checking_mutex[1], 0),
     not_empty = caml_call1(Stdlib_Condition[1], 0),
     not_full = caml_call1(Stdlib_Condition[1], 0);
    return [0, ev_q, maxsize, mutex, not_empty, not_full];
   }
   function finally$0(t){
    var len = caml_call1(Core_Linked_queue[13], t[1]);
    if(caml_call2(Core[93], len, 0)) caml_call1(Stdlib_Condition[3], t[4]);
    if(caml_call2(Core[92], len, t[2])) caml_call1(Stdlib_Condition[3], t[5]);
    return caml_call1(Error_checking_mutex[5], t[3]);
   }
   function wrap(q, run){
    caml_call1(Error_checking_mutex[3], q[3]);
    return caml_call3(Base_Exn[12], run, q, finally$0);
   }
   function clear(q){
    function run(q){return caml_call1(Core_Linked_queue[48], q[1]);}
    return wrap(q, run);
   }
   function wait_not_full(q){
    for(;;){
     var _l_ = q[2], _m_ = caml_call1(Core_Linked_queue[13], q[1]);
     if(! caml_call2(Core[88], _m_, _l_)) return;
     caml_call2(Stdlib_Condition[2], q[5], q[3]);
    }
   }
   function _f_(q){
    for(;;){
     if(! caml_call1(Core_Linked_queue[14], q[1])) return 0;
     caml_call2(Stdlib_Condition[2], q[4], q[3]);
    }
   }
   function push(q, x){
    function run(q){
     wait_not_full(q);
     return caml_call2(Core_Linked_queue[40], q[1], x);
    }
    return wrap(q, run);
   }
   function push_uncond(q, x){
    function run(q){return caml_call2(Core_Linked_queue[40], q[1], x);}
    return wrap(q, run);
   }
   function push_or_drop(q, x){
    function run(q){
     var _j_ = q[2], _k_ = caml_call1(Core_Linked_queue[13], q[1]);
     return caml_call2(Core[92], _k_, _j_)
             ? (caml_call2(Core_Linked_queue[40], q[1], x), 1)
             : 0;
    }
    return wrap(q, run);
   }
   function length(q){
    function run(q){return caml_call1(Core_Linked_queue[13], q[1]);}
    return wrap(q, run);
   }
   function pop(q){
    function run(q){_f_(q); return caml_call1(Core_Linked_queue[43], q[1]);}
    return wrap(q, run);
   }
   function lpop(q){
    function run(q){
     _f_(q);
     var
      el = caml_call1(Core_Linked_queue[43], q[1]),
      len = caml_call1(Core_Linked_queue[13], q[1]);
     return [0, el, len];
    }
    return wrap(q, run);
   }
   function transfer_queue_in_uncond(q, in_q){
    var _i_ = 1 - caml_call1(Core_Linked_queue[14], in_q);
    if(! _i_) return _i_;
    function run(q){return caml_call2(Core_Linked_queue[61], in_q, q[1]);}
    return wrap(q, run);
   }
   function transfer_queue_in(q, in_q){
    var _h_ = 1 - caml_call1(Core_Linked_queue[14], in_q);
    if(! _h_) return _h_;
    function run(q){
     wait_not_full(q);
     return caml_call2(Core_Linked_queue[61], in_q, q[1]);
    }
    return wrap(q, run);
   }
   function transfer_queue_nowait_nolock(sq, q){
    return caml_call2(Core_Linked_queue[61], sq[1], q);
   }
   function transfer_queue_nowait(sq, q){
    var _g_ = 1 - caml_call1(Core_Linked_queue[14], sq[1]);
    if(! _g_) return _g_;
    function run(sq){return transfer_queue_nowait_nolock(sq, q);}
    return wrap(sq, run);
   }
   function transfer_queue(sq, q){
    function run(sq){_f_(sq); return transfer_queue_nowait_nolock(sq, q);}
    return wrap(sq, run);
   }
   function wait_not_empty(sq){
    function run(sq){return _f_(sq);}
    return wrap(sq, run);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_squeue);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Squeue);
   var
    Squeue =
      [0,
       sexp_of_t,
       create,
       push,
       push_uncond,
       push_or_drop,
       length,
       pop,
       lpop,
       transfer_queue_in,
       transfer_queue_in_uncond,
       transfer_queue,
       transfer_queue_nowait,
       clear,
       wait_not_empty];
   runtime.caml_register_global(22, Squeue, cst_Squeue$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
