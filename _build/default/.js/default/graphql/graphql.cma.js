// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Graphql_schema
//# unitInfo: Requires: CamlinternalLazy, Rresult, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Map, Stdlib__Printf, Stdlib__Set, Stdlib__String, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_is_not_defined_on_type = "' is not defined on type '",
    cst$3 = ", ",
    cst_Boolean$1 = "Boolean",
    cst_Field$0 = "Field '",
    cst_Field_s_is_not_defined_on_ = "Field '%s' is not defined on type '%s'",
    cst_Float$1 = "Float",
    cst_ID$1 = "ID",
    cst_Int$1 = "Int",
    cst_String$1 = "String",
    cst_s = "[%s]",
    cst_typename = "__typename",
    cst_on_field = "` on field `",
    cst_args$1 = "args",
    cst_data$2 = "data",
    cst_deprecationReason$1 = "deprecationReason",
    cst_description$4 = "description",
    cst_errors$1 = "errors",
    cst_if$1 = "if",
    cst_include$0 = "include",
    cst_isDeprecated$1 = "isDeprecated",
    cst_name$5 = "name",
    cst_skip$0 = "skip",
    cst_type$2 = "type",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst = cst$3,
    cst$0 = cst$3,
    cst$1 = "",
    partial = [12, 46, 0],
    type_kind =
      [4,
       [0,
        "__TypeKind",
        0,
        [0,
         [0, "SCALAR", 0, 0, -256222388],
         [0,
          [0, "OBJECT", 0, 0, -908856609],
          [0,
           [0, "INTERFACE", 0, 0, -609414759],
           [0,
            [0, "UNION", 0, 0, 974443759],
            [0,
             [0, "ENUM", 0, 0, 770676513],
             [0,
              [0, "INPUT_OBJECT", 0, 0, -291114423],
              [0,
               [0, "LIST", 0, 0, 848054398],
               [0, [0, "NON_NULL", 0, 0, 388158996], 0]]]]]]]]]],
    directive_location =
      [4,
       [0,
        "__DirectiveLocation",
        0,
        [0,
         [0, "QUERY", 0, 0, -250086680],
         [0,
          [0, "MUTATION", 0, 0, 1035765577],
          [0,
           [0, "SUBSCRIPTION", 0, 0, -32289987],
           [0,
            [0, "FIELD", 0, 0, 331416730],
            [0,
             [0, "FRAGMENT_DEFINITION", 0, 0, 342305986],
             [0,
              [0, "FRAGMENT_SPREAD", 0, 0, -861465054],
              [0,
               [0, "INLINE_FRAGMENT", 0, 0, 962724246],
               [0, [0, "VARIABLE_DEFINITION", 0, 0, -1013253674], 0]]]]]]]]]],
    Stdlib_Format = global_data.Stdlib__Format,
    Rresult = global_data.Rresult,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Yojson_Basic = global_data.Yojson__Basic,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_List = global_data.Stdlib__List,
    cons = Stdlib_List[5],
    rev = Stdlib_List[10],
    append = Stdlib_List[12],
    concat = Stdlib_List[14],
    iter = Stdlib_List[18],
    map = Stdlib_List[20],
    mapi = Stdlib_List[21],
    fold_left = Stdlib_List[26],
    exists = Stdlib_List[34],
    find_exn = Stdlib_List[39],
    filter = Stdlib_List[44],
    partition = Stdlib_List[47],
    assoc_exn = Stdlib_List[49],
    _D_ = [0, [11, "Unknown directive: ", [2, 0, 0]], "Unknown directive: %s"],
    _E_ = [0, 1],
    _F_ = [0, 0],
    _G_ = [0, "directive"],
    _J_ = [0, 0],
    _H_ = [0, 0],
    _I_ = [0, 0],
    _K_ = [0, 0],
    _N_ = [0, 870828711, 0],
    _O_ =
      [0,
       [11,
        cst_Field$0,
        [2, 0, [11, cst_is_not_defined_on_type, [2, 0, [12, 39, 0]]]]],
       cst_Field_s_is_not_defined_on_],
    _U_ =
      [0,
       [11, "Fragment cycle detected: ", [2, 0, 0]],
       "Fragment cycle detected: %s"],
    _V_ = [1, -1002274466],
    _W_ = [1, -784750693],
    _X_ = [1, 80281036],
    _T_ =
      [0,
       [11,
        cst_Field$0,
        [2, 0, [11, cst_is_not_defined_on_type, [2, 0, [12, 39, 0]]]]],
       cst_Field_s_is_not_defined_on_],
    _S_ =
      [0,
       -560894942,
       "Subscriptions only allow exactly one selection for the operation."],
    _R_ = [0, 0],
    cst_Mutations_not_configured = "Mutations not configured",
    cst_Subscriptions_not_configur = "Subscriptions not configured",
    cst_No_operation_found = "No operation found",
    cst_Operation_not_found = "Operation not found",
    cst_Operation_name_required = "Operation name required",
    _P_ = [0, 870828711],
    _Q_ = [0, 870828711],
    cst_data$0 = cst_data$2,
    cst_errors$0 = cst_errors$1,
    cst_data$1 = cst_data$2,
    cst_errors = cst_errors$1,
    cst_data = cst_data$2,
    cst_path = "path",
    cst_extensions = "extensions",
    cst_message = "message",
    _M_ = [0, 0],
    _L_ = [0, 870828711, 0],
    cst_Abstracts_can_t_have_argum = "Abstracts can't have argument types",
    cst_schema = "__schema",
    cst_name$4 = cst_name$5,
    cst_type$1 = "__type",
    cst_directives = "directives",
    cst_subscriptionType = "subscriptionType",
    cst_mutationType = "mutationType",
    cst_queryType = "queryType",
    cst_types = "types",
    cst_args$0 = cst_args$1,
    cst_locations = "locations",
    cst_description$3 = cst_description$4,
    cst_name$3 = cst_name$5,
    cst_deprecationReason$0 = cst_deprecationReason$1,
    cst_isDeprecated$0 = cst_isDeprecated$1,
    cst_type$0 = cst_type$2,
    cst_args = cst_args$1,
    cst_description$2 = cst_description$4,
    cst_name$2 = cst_name$5,
    cst_enumValues = "enumValues",
    cst_inputFields = "inputFields",
    cst_ofType = "ofType",
    cst_possibleTypes = "possibleTypes",
    cst_interfaces = "interfaces",
    cst_fields = "fields",
    cst_description$1 = cst_description$4,
    cst_name$1 = cst_name$5,
    cst_kind = "kind",
    cst_defaultValue = "defaultValue",
    cst_type = cst_type$2,
    cst_description$0 = cst_description$4,
    cst_name$0 = cst_name$5,
    cst_deprecationReason = cst_deprecationReason$1,
    cst_isDeprecated = cst_isDeprecated$1,
    cst_description = cst_description$4,
    cst_name = cst_name$5,
    cst_Arguments_must_be_Interfac =
      "Arguments must be Interface/Union and Object",
    cst_mutation = "mutation",
    cst_subscription = "subscription",
    cst_query = "query",
    _a_ = [0, [2, 0, [11, ": ", [2, 0, 0]]], "%s: %s"],
    _b_ = [0, [12, 123, [2, 0, [12, 125, 0]]], "{%s}"],
    _c_ = [0, [12, 91, [2, 0, [12, 93, 0]]], cst_s],
    _d_ = [0, [12, 91, [2, 0, [12, 93, 0]]], cst_s],
    _e_ = [0, [2, 0, [12, 33, 0]], "%s!"],
    _m_ = [0, 0],
    _n_ = [0, 0],
    _o_ = [0, 0],
    _p_ = [0, 0],
    _q_ = [0, 0],
    _s_ =
      [0,
       [11,
        "Invalid enum value for argument `",
        [2, 0, [11, cst_on_field, [2, 0, [12, 96, 0]]]]],
       "Invalid enum value for argument `%s` on field `%s`"],
    _r_ =
      [0,
       [11,
        "Expected enum for argument `",
        [2, 0, [11, cst_on_field, [2, 0, [12, 96, 0]]]]],
       "Expected enum for argument `%s` on field `%s`"],
    _t_ = [0, 0],
    _u_ = [0, 0],
    _v_ = [0, 0],
    _w_ =
      [0,
       [11,
        "Invalid default provided for arg name=",
        [2, 0, [11, ", default=", [2, 0, 0]]]],
       "Invalid default provided for arg name=%s, default=%s"],
    _l_ = [1, "Invalid ID"],
    _k_ = [1, "Invalid boolean"],
    _j_ = [1, "Invalid float"],
    _i_ = [1, "Invalid string"],
    _h_ = [1, "Invalid int"],
    cst_field = "field",
    _f_ = [0, [11, "found ", [2, 0, 0]], "found %s"],
    cst_but_not_provided = "but not provided",
    _g_ =
      [0,
       [11,
        "Argument `",
        [2,
         0,
         [11,
          "` of type `",
          [2,
           0,
           [11,
            "` expected on ",
            [2, 0, [11, " `", [2, 0, [11, "`, ", [2, 0, partial]]]]]]]]]],
       "Argument `%s` of type `%s` expected on %s `%s`, %s."],
    cst_Graphql_schema_Make_Io_Fie =
      "Graphql_schema.Make(Io)(Field_error).StringMap.Missing_key",
    cst_Int = cst_Int$1,
    cst_String = cst_String$1,
    cst_Float = cst_Float$1,
    cst_Boolean = cst_Boolean$1,
    cst_ID = cst_ID$1,
    cst_Int$0 = cst_Int$1,
    cst_String$0 = cst_String$1,
    cst_Boolean$0 = cst_Boolean$1,
    cst_Float$0 = cst_Float$1,
    cst_ID$0 = cst_ID$1,
    cst_if = cst_if$1,
    _x_ = [0, "Skipped when true."],
    _y_ = [0, 331416730, [0, -861465054, [0, 962724246, 0]]],
    _z_ =
      [0,
       "Directs the executor to skip this field or fragment when the `if` argument is true."],
    cst_skip = cst_skip$0,
    cst_if$0 = cst_if$1,
    _A_ = [0, "Included when true."],
    _B_ = [0, 331416730, [0, -861465054, [0, 962724246, 0]]],
    _C_ =
      [0,
       "Directs the executor to include this field or fragment only when the `if` argument is true."],
    cst_include = cst_include$0,
    cst_EnumValue = "__EnumValue",
    cst_InputValue = "__InputValue",
    cst_Type = "__Type",
    cst_Field = "__Field",
    cst_Directive = "__Directive",
    cst_Schema = "__Schema",
    cst_Graphql_schema_Make_Io_Fie$0 =
      "Graphql_schema.Make(Io)(Field_error).FragmentCycle";
   function find(cond, xs){
    try{var _eV_ = [0, caml_call2(find_exn, cond, xs)]; return _eV_;}
    catch(_eW_){
     var _eU_ = caml_wrap_exception(_eW_);
     if(_eU_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_eU_, 0);
    }
   }
   function join(opt, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0) var sth = opt$0[1], memo = sth; else var memo = 0;
     if(! param$0) return [0, caml_call1(Stdlib_List[10], memo)];
     var err = param$0[1];
     if(0 !== err[0]) return err;
     var
      xs = param$0[2],
      x = err[1],
      opt$1 = [0, [0, x, memo]],
      opt$0 = opt$1,
      param$0 = xs;
    }
   }
   function map$0(t, f){
    if(! t) return 0;
    var y = t[1];
    return [0, caml_call1(f, y)];
   }
   function Make(Io, Field_error){
    var return$0 = Io[1], bind = Io[2], Stream = Io[3];
    function map$1(x, f){
     return caml_call2
             (bind,
              x,
              function(x){return caml_call1(return$0, caml_call1(f, x));});
    }
    function ok(x){return caml_call1(Io[1], [0, x]);}
    function error(x){return caml_call1(Io[1], [1, x]);}
    function all(param){
     if(! param) return caml_call1(Io[1], 0);
     var xs = param[2], x = param[1];
     function _eT_(xs){return map$1(x, function(x){return [0, x, xs];});}
     return caml_call2(bind, all(xs), _eT_);
    }
    function bind$0(x, f){
     return caml_call2
             (bind,
              x,
              function(err){
               if(0 !== err[0]) return caml_call1(Io[1], err);
               var x = err[1];
               return caml_call1(f, x);
              });
    }
    function map_error(x, f){
     return map$1
             (x,
              function(ok){
               if(0 === ok[0]) return ok;
               var err = ok[1];
               return [1, caml_call1(f, err)];
              });
    }
    function map$2(x, f){
     return map$1
             (x,
              function(err){
               if(0 !== err[0]) return err;
               var x = err[1];
               return [0, caml_call1(f, x)];
              });
    }
    var Result = [0, bind$0, map_error, map$2];
    function map_s(opt, f, param){
     if(opt) var sth = opt[1], memo = sth; else var memo = 0;
     if(param){
      var
       xs = param[2],
       x = param[1],
       _eR_ = function(x){return map_s([0, [0, x, memo]], f, xs);};
      return caml_call2(bind, caml_call1(f, x), _eR_);
     }
     var _eS_ = caml_call1(rev, memo);
     return caml_call1(Io[1], _eS_);
    }
    function map_p(f, xs){return all(caml_call2(map, f, xs));}
    function symbol_map(x, f){return map$1(x, f);}
    var
     symbol = Result[1],
     Infix = [0, symbol_map, symbol],
     Io$0 =
       [0,
        return$0,
        bind,
        Stream,
        map$1,
        ok,
        error,
        all,
        Result,
        map_s,
        map_p,
        Infix],
     include = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
     empty = include[1],
     add = include[2],
     add_to_list = include[3],
     update = include[4],
     singleton = include[5],
     remove = include[6],
     merge = include[7],
     union = include[8],
     cardinal = include[9],
     bindings = include[10],
     min_binding = include[11],
     min_binding_opt = include[12],
     max_binding = include[13],
     max_binding_opt = include[14],
     choose = include[15],
     choose_opt = include[16],
     find_opt = include[18],
     find_first = include[19],
     find_first_opt = include[20],
     find_last = include[21],
     find_last_opt = include[22],
     iter$0 = include[23],
     fold = include[24],
     map$3 = include[25],
     mapi$0 = include[26],
     filter$0 = include[27],
     filter_map = include[28],
     partition$0 = include[29],
     split = include[30],
     is_empty = include[31],
     mem = include[32],
     equal = include[33],
     compare = include[34],
     for_all = include[35],
     exists$0 = include[36],
     to_list = include[37],
     of_list = include[38],
     to_seq = include[39],
     to_rev_seq = include[40],
     to_seq_from = include[41],
     add_seq = include[42],
     of_seq = include[43],
     Missing_key = [248, cst_Graphql_schema_Make_Io_Fie, caml_fresh_oo_id(0)],
     _ab_ = include[17];
    function find_exn$0(key, t){
     try{var _eP_ = caml_call2(_ab_, key, t); return _eP_;}
     catch(_eQ_){
      var _eO_ = caml_wrap_exception(_eQ_);
      if(_eO_ === Stdlib[8])
       throw caml_maybe_attach_backtrace([0, Missing_key, key], 1);
      throw caml_maybe_attach_backtrace(_eO_, 0);
     }
    }
    function find$0(k, t){
     try{var _eM_ = [0, find_exn$0(k, t)]; return _eM_;}
     catch(_eN_){
      var _eL_ = caml_wrap_exception(_eN_);
      if(_eL_[1] === Missing_key) return 0;
      throw caml_maybe_attach_backtrace(_eL_, 0);
     }
    }
    var
     StringMap =
       [0,
        empty,
        add,
        add_to_list,
        update,
        singleton,
        remove,
        merge,
        union,
        cardinal,
        bindings,
        min_binding,
        min_binding_opt,
        max_binding,
        max_binding_opt,
        choose,
        choose_opt,
        find_opt,
        find_first,
        find_first_opt,
        find_last,
        find_last_opt,
        iter$0,
        fold,
        map$3,
        mapi$0,
        filter$0,
        filter_map,
        partition$0,
        split,
        is_empty,
        mem,
        equal,
        compare,
        for_all,
        exists$0,
        to_list,
        of_list,
        to_seq,
        to_rev_seq,
        to_seq_from,
        add_seq,
        of_seq,
        Missing_key,
        find_exn$0,
        find$0],
     StringSet = caml_call1(Stdlib_Set[1], [0, Stdlib_String[10]]);
    function enum_value(doc, opt, name, value){
     if(opt) var sth = opt[1], deprecated = sth; else var deprecated = 0;
     return [0, name, doc, deprecated, value];
    }
    function id(x){return x;}
    function fix(f){
     var recursive = [], r = [];
     caml_update_dummy
      (recursive,
       [0,
        function(doc, name, fields){
         var
          _eG_ =
            [246,
             function(_eI_){
              var _eJ_ = caml_obj_tag(r);
              a:
              if(250 === _eJ_)
               var _eK_ = r[1];
              else{
               if(246 !== _eJ_ && 244 !== _eJ_){var _eK_ = r; break a;}
               var _eK_ = caml_call1(CamlinternalLazy[2], r);
              }
              return caml_call1(fields, _eK_);
             }];
         return function(_eH_){return [1, name, doc, _eG_, _eH_];};
        }]);
     caml_update_dummy
      (r, [246, function(_eF_){return caml_call1(f, recursive);}]);
     var _eE_ = caml_obj_tag(r);
     if(250 === _eE_) return r[1];
     if(246 !== _eE_ && 244 !== _eE_) return r;
     return caml_call1(CamlinternalLazy[2], r);
    }
    function string_of_const_value(param){
     if(typeof param === "number")
      return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, 870828711);
     var _eA_ = param[1];
     if(737456202 > _eA_){
      if(3654863 === _eA_){
       var i = param[2];
       return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, 3654863, i]);
      }
      if(365180284 <= _eA_){
       var f = param[2];
       return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, 365180284, f]);
      }
      var s = param[2];
      return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, -976970511, s]);
     }
     if(848054398 <= _eA_){
      if(963043957 <= _eA_){
       var
        a = param[2],
        values =
          caml_call2
           (map,
            function(param){
             var v = param[2], k = param[1], _eD_ = string_of_const_value(v);
             return caml_call3(Stdlib_Printf[4], _a_, k, _eD_);
            },
            a),
        _eB_ = caml_call2(Stdlib_String[7], cst, values);
       return caml_call2(Stdlib_Printf[4], _b_, _eB_);
      }
      var
       l = param[2],
       values$0 =
         caml_call2(map, function(i){return string_of_const_value(i);}, l),
       _eC_ = caml_call2(Stdlib_String[7], cst$0, values$0);
      return caml_call2(Stdlib_Printf[4], _c_, _eC_);
     }
     if(770676513 <= _eA_){var e = param[2]; return e;}
     var b = param[2];
     return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, 737456202, b]);
    }
    function string_of_arg_typ(param){
     switch(param[0]){
       case 0:
        return param[1];
       case 1:
        return param[1];
       case 2:
        return param[1];
       case 3:
        var a = param[1], _ey_ = string_of_arg_typ(a);
        return caml_call2(Stdlib_Printf[4], _d_, _ey_);
       default:
        var a$0 = param[1], _ez_ = string_of_arg_typ(a$0);
        return caml_call2(Stdlib_Printf[4], _e_, _ez_);
     }
    }
    function eval_arg_error(opt, field_name, arg_name, arg_typ, value){
     if(opt)
      var sth = opt[1], field_type = sth;
     else
      var field_type = cst_field;
     if(value)
      var
       v = value[1],
       _ew_ = string_of_const_value(v),
       found_str = caml_call2(Stdlib_Printf[4], _f_, _ew_);
     else
      var found_str = cst_but_not_provided;
     var _ex_ = string_of_arg_typ(arg_typ);
     return caml_call6
             (Stdlib_Printf[4],
              _g_,
              arg_name,
              _ex_,
              field_type,
              field_name,
              found_str);
    }
    var
     int$0 =
       [0,
        cst_Int,
        0,
        function(param){
         if(typeof param !== "number" && 3654863 === param[1]){var n = param[2]; return [0, n];}
         return _h_;
        }],
     string =
       [0,
        cst_String,
        0,
        function(param){
         if(typeof param !== "number" && -976970511 === param[1]){var s = param[2]; return [0, s];}
         return _i_;
        }],
     float$0 =
       [0,
        cst_Float,
        0,
        function(param){
         if(typeof param !== "number"){
          var _ev_ = param[1];
          if(3654863 === _ev_){var n = param[2]; return [0, n];}
          if(365180284 === _ev_){var f = param[2]; return [0, f];}
         }
         return _j_;
        }],
     bool =
       [0,
        cst_Boolean,
        0,
        function(param){
         if(typeof param !== "number" && 737456202 === param[1]){var b = param[2]; return [0, b];}
         return _k_;
        }],
     guid =
       [0,
        cst_ID,
        0,
        function(param){
         if(typeof param !== "number"){
          var _eu_ = param[1];
          if(-976970511 === _eu_){var s = param[2]; return [0, s];}
          if(3654863 === _eu_){
           var n = param[2];
           return [0, caml_call1(Stdlib[33], n)];
          }
         }
         return _l_;
        }];
    function non_null(typ){return [4, typ];}
    function list(typ){return [3, typ];}
    function value_to_const_value(variable_map, i){
     if(typeof i === "number") return 870828711;
     var _es_ = i[1];
     if(737456202 > _es_){
      if(3654863 <= _es_) return 365180284 <= _es_ ? i : i;
      if(-976970511 <= _es_) return i;
      var
       v = i[2],
       t = caml_call2(StringMap[45], v, variable_map),
       default$0 = 870828711;
      if(! t) return default$0;
      var x = t[1];
      return x;
     }
     if(848054398 > _es_) return 770676513 <= _es_ ? i : i;
     if(963043957 <= _es_){
      var
       props = i[2],
       props$0 =
         caml_call2
          (map,
           function(param){
            var value = param[2], name = param[1];
            return [0, name, value_to_const_value(variable_map, value)];
           },
           props);
      return [0, 963043957, props$0];
     }
     var xs = i[2];
     return [0,
             848054398,
             caml_call2
              (map,
               function(_et_){
                return value_to_const_value(variable_map, _et_);
               },
               xs)];
    }
    function eval_arglist
    (variable_map, field_type, field_name, arglist, key_values, f){
     var arglist$0 = arglist, f$0 = f;
     for(;;){
      if(! arglist$0) return [0, f$0];
      var match = arglist$0[1];
      if(0 === match[0]){
       var arglist$1 = arglist$0[2], x = match[1];
       try{var _en_ = [0, caml_call2(assoc_exn, x, key_values)], value = _en_;
       }
       catch(_er_){
        var _em_ = caml_wrap_exception(_er_);
        if(_em_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_em_, 0);
        var value = 0;
       }
       var
        const_value =
          map$0
           (value,
            function(_eq_){return value_to_const_value(variable_map, _eq_);}),
        _eo_ =
          function(coerced){
           return eval_arglist
                   (variable_map,
                    field_type,
                    field_name,
                    arglist$1,
                    key_values,
                    caml_call1(f$0, coerced));
          },
        _ep_ =
          eval_arg
           (variable_map,
            field_type,
            field_name,
            match[1],
            match[3],
            const_value);
       return caml_call2(Rresult[1], _ep_, _eo_);
      }
      var
       arglist$2 = arglist$0[2],
       arglist$3 = [0, [0, match[1], match[2], match[3]], arglist$2],
       f$2 =
         function(f, match){
          function f$0(param){
           if(! param) return caml_call1(f, match[4]);
           var value = param[1];
           return caml_call1(f, value);
          }
          return f$0;
         },
       f$1 = f$2(f$0, match),
       arglist$0 = arglist$3,
       f$0 = f$1;
     }
    }
    function eval_arg
    (variable_map, field_type, field_name, arg_name, typ, value){
     switch(typ[0]){
       case 0:
        if(! value) return _n_;
        var value$0 = value[1];
        if(typeof value$0 === "number" && 870828711 === value$0) return _m_;
        var match = caml_call1(typ[3], value$0);
        if(0 !== match[0])
         return [1,
                 eval_arg_error
                  (field_type, field_name, arg_name, typ, [0, value$0])];
        var coerced = match[1];
        return [0, [0, coerced]];
       case 1:
        if(! value) return _p_;
        var value$1 = value[1];
        if(typeof value$1 === "number" && 870828711 === value$1) return _o_;
        if(typeof value$1 !== "number" && 963043957 === value$1[1]){
         var
          props = value$1[2],
          _d9_ = function(coerced){return [0, coerced];},
          _d$_ = typ[3],
          _d__ = typ[4],
          _ea_ = caml_obj_tag(_d$_);
         a:
         if(250 === _ea_)
          var _eb_ = _d$_[1];
         else{
          if(246 !== _ea_ && 244 !== _ea_){var _eb_ = _d$_; break a;}
          var _eb_ = caml_call1(CamlinternalLazy[2], _d$_);
         }
         var
          _ec_ =
            eval_arglist
             (variable_map, field_type, field_name, _eb_, props, _d__);
         return caml_call2(Rresult[2], _ec_, _d9_);
        }
        return [1,
                eval_arg_error
                 (field_type, field_name, arg_name, typ, [0, value$1])];
       case 2:
        if(! value) return _t_;
        var value$2 = value[1];
        if(typeof value$2 === "number" && 870828711 === value$2) return _q_;
        a:
        if(typeof value$2 !== "number"){
         var _ed_ = value$2[1];
         if(-976970511 !== _ed_ && 770676513 !== _ed_) break a;
         var
          v = value$2[2],
          _ee_ = typ[3],
          match$0 =
            find
             (function(enum_value){
               return caml_string_equal(enum_value[1], v);
              },
              _ee_);
         if(! match$0)
          return [1, caml_call3(Stdlib_Printf[4], _s_, arg_name, field_name)];
         var enum_value = match$0[1];
         return [0, [0, enum_value[4]]];
        }
        return [1, caml_call3(Stdlib_Printf[4], _r_, arg_name, field_name)];
       case 3:
        var typ$0 = typ[1];
        if(! value) return _v_;
        var value$3 = value[1];
        if(typeof value$3 === "number" && 870828711 === value$3) return _u_;
        if(typeof value$3 !== "number" && 848054398 === value$3[1]){
         var
          values = value$3[2],
          option_values = caml_call2(map, function(x){return [0, x];}, values),
          _eh_ = function(coerced){return [0, coerced];},
          f =
            function(_el_){
             return eval_arg
                     (variable_map,
                      field_type,
                      field_name,
                      arg_name,
                      typ$0,
                      _el_);
            },
          _d8_ = join(0, caml_call2(Stdlib_List[20], f, option_values));
         return caml_call2(Rresult[2], _d8_, _eh_);
        }
        var
         _ef_ = function(coerced){return [0, [0, coerced, 0]];},
         _eg_ =
           eval_arg
            (variable_map,
             field_type,
             field_name,
             arg_name,
             typ$0,
             [0, value$3]);
        return caml_call2(Rresult[2], _eg_, _ef_);
       default:
        var typ$1 = typ[1];
        if(! value)
         return [1,
                 eval_arg_error(field_type, field_name, arg_name, typ, value)];
        var _ei_ = value[1];
        if(typeof _ei_ === "number" && 870828711 === _ei_)
         return [1,
                 eval_arg_error(field_type, field_name, arg_name, typ, value)];
        var
         _ej_ =
           function(param){
            if(! param)
             return [1,
                     eval_arg_error(field_type, field_name, arg_name, typ$1, 0)];
            var value = param[1];
            return [0, value];
           },
         _ek_ =
           eval_arg
            (variable_map, field_type, field_name, arg_name, typ$1, value);
        return caml_call2(Rresult[1], _ek_, _ej_);
     }
    }
    function arg(doc, name, typ){return [0, name, doc, typ];}
    function arg$0(doc, name, typ, default$0){
     var match = eval_arg(StringMap[1], 0, cst$1, name, typ, [0, default$0]);
     if(0 === match[0]){
      var match$0 = match[1];
      if(match$0){
       var v = match$0[1];
       return [1, name, doc, typ, v, default$0];
      }
     }
     var
      _d6_ = string_of_const_value(default$0),
      _d7_ = caml_call3(Stdlib_Printf[4], _w_, name, _d6_);
     throw caml_maybe_attach_backtrace([0, Stdlib[7], _d7_], 1);
    }
    function scalar(doc, name, coerce){return [0, name, doc, coerce];}
    function enum$0(doc, name, values){return [2, name, doc, values];}
    function obj(doc, name, fields, coerce){return [1, name, doc, fields, coerce];
    }
    var
     Arg =
       [0,
        fix,
        string_of_const_value,
        string_of_arg_typ,
        eval_arg_error,
        int$0,
        string,
        float$0,
        bool,
        guid,
        non_null,
        list,
        value_to_const_value,
        eval_arglist,
        eval_arg,
        arg,
        arg$0,
        scalar,
        enum$0,
        obj];
    function _ac_(doc, name, fields){
     return [0, [0, name, doc, fields, [0, 0]]];
    }
    function union$0(doc, name){return [5, [0, name, doc, 974443759, 0]];}
    function interface$0(doc, name, fields){
     var i = [], _d4_ = 0;
     caml_update_dummy
      (i,
       [5,
        [0,
         name,
         doc,
         [0, -609414759, [246, function(_d5_){return caml_call1(fields, i);}]],
         _d4_]]);
     return i;
    }
    function fix$0(f){
     var recursive = [], r = [];
     function _dU_(doc, name, fields){
      var _d0_ = 0;
      return [5,
              [0,
               name,
               doc,
               [0,
                -609414759,
                [246,
                 function(_d1_){
                  var _d2_ = caml_obj_tag(r);
                  a:
                  if(250 === _d2_)
                   var _d3_ = r[1];
                  else{
                   if(246 !== _d2_ && 244 !== _d2_){var _d3_ = r; break a;}
                   var _d3_ = caml_call1(CamlinternalLazy[2], r);
                  }
                  return caml_call1(fields, _d3_);
                 }]],
               _d0_]];
     }
     caml_update_dummy
      (recursive,
       [0,
        function(doc, name, fields){
         return _ac_
                 (doc,
                  name,
                  [246,
                   function(_dX_){
                    var _dY_ = caml_obj_tag(r);
                    a:
                    if(250 === _dY_)
                     var _dZ_ = r[1];
                    else{
                     if(246 !== _dY_ && 244 !== _dY_){var _dZ_ = r; break a;}
                     var _dZ_ = caml_call1(CamlinternalLazy[2], r);
                    }
                    return caml_call1(fields, _dZ_);
                   }]);
        },
        _dU_]);
     caml_update_dummy
      (r, [246, function(_dW_){return caml_call1(f, recursive);}]);
     var _dV_ = caml_obj_tag(r);
     if(250 === _dV_) return r[1];
     if(246 !== _dV_ && 244 !== _dV_) return r;
     return caml_call1(CamlinternalLazy[2], r);
    }
    function schema(opt, mutations, _dS_, subscriptions, _dR_, fields){
     if(opt)
      var sth = opt[1], mutation_name = sth;
     else
      var mutation_name = cst_mutation;
     if(_dS_)
      var sth$0 = _dS_[1], subscription_name = sth$0;
     else
      var subscription_name = cst_subscription;
     if(_dR_)
      var sth$1 = _dR_[1], query_name = sth$1;
     else
      var query_name = cst_query;
     var
      _dT_ =
        map$0
         (subscriptions,
          function(fields){return [0, subscription_name, 0, fields];});
     return [0,
             [0, query_name, 0, fields, [0, 0]],
             map$0
              (mutations,
               function(fields){return [0, mutation_name, 0, fields, [0, 0]];}),
             _dT_];
    }
    function obj$0(doc, name, fields){return _ac_(doc, name, fields);}
    function field(doc, opt, name, typ, args, resolve){
     if(opt) var sth = opt[1], deprecated = sth; else var deprecated = 0;
     return [0, name, doc, deprecated, typ, args, resolve, Io$0[5]];
    }
    function io_field(doc, opt, name, typ, args, resolve){
     if(opt) var sth = opt[1], deprecated = sth; else var deprecated = 0;
     return [0, name, doc, deprecated, typ, args, resolve, id];
    }
    function abstract_field(doc, opt, name, typ, args){
     if(opt) var sth = opt[1], deprecated = sth; else var deprecated = 0;
     return [0, [0, name, doc, deprecated, typ, args, 0, Io$0[5]]];
    }
    function subscription_field(doc, opt, name, typ, args, resolve){
     if(opt) var sth = opt[1], deprecated = sth; else var deprecated = 0;
     return [0, name, doc, deprecated, typ, args, resolve];
    }
    function enum$1(doc, name, values){return [4, [0, name, doc, values]];}
    function scalar$0(doc, name, coerce){return [3, [0, name, doc, coerce]];}
    function list$0(typ){return [1, typ];}
    function non_null$0(typ){return [2, typ];}
    function add_type(abstract_typ, typ){
     if(5 === abstract_typ[0] && 0 === typ[0]){
      var o = typ[1], a = abstract_typ[1];
      a[4] = [0, [0, typ], a[4]];
      o[4][1] = [0, a, o[4][1]];
      return function(src){return [0, typ, src];};
     }
     return caml_call1(Stdlib[1], cst_Arguments_must_be_Interfac);
    }
    function obj_of_subscription_obj(param){
     var
      fields = param[3],
      doc = param[2],
      name = param[1],
      fields$0 =
        caml_call2
         (map,
          function(param){
           var
            resolve = param[6],
            args = param[5],
            typ = param[4],
            deprecated = param[3],
            doc = param[2],
            name = param[1],
            _dQ_ = 0;
           return [0,
                   name,
                   doc,
                   deprecated,
                   typ,
                   args,
                   function(ctx, param){return caml_call1(resolve, ctx);},
                   _dQ_];
          },
          fields);
     return [0, name, doc, fields$0, [0, 0]];
    }
    var
     int$1 = [3, [0, cst_Int$0, 0, function(i){return [0, 3654863, i];}]],
     string$0 =
       [3, [0, cst_String$0, 0, function(s){return [0, -976970511, s];}]],
     bool$0 =
       [3, [0, cst_Boolean$0, 0, function(b){return [0, 737456202, b];}]],
     float$1 =
       [3, [0, cst_Float$0, 0, function(f){return [0, 365180284, f];}]],
     guid$0 = [3, [0, cst_ID$0, 0, function(x){return [0, -976970511, x];}]];
    function _ad_(param){return param ? 925778591 : 524822024;}
    var
     _ae_ = Arg[10].call(null, Arg[8]),
     skip_directive =
       [0,
        cst_skip,
        _z_,
        _y_,
        [0, Arg[15].call(null, _x_, cst_if, _ae_), 0],
        _ad_];
    function _af_(param){return param ? 524822024 : 925778591;}
    var
     _ag_ = Arg[10].call(null, Arg[8]),
     include_directive =
       [0,
        cst_include,
        _C_,
        _B_,
        [0, Arg[15].call(null, _A_, cst_if$0, _ag_), 0],
        _af_];
    function unless_visited(param, name, f){
     var visited = param[2], result = param[1];
     return caml_call2(StringSet[31], name, visited)
             ? [0, result, visited]
             : caml_call1(f, [0, result, visited]);
    }
    function types(opt, typ){
     var opt$0 = opt, typ$0 = typ;
     for(;;){
      if(opt$0)
       var sth = opt$0[1], memo = sth;
      else
       var memo = [0, 0, StringSet[1]];
      switch(typ$0[0]){
        case 0:
         var
          o = typ$0[1],
          _dH_ =
            function(param){
             var
              visited = param[2],
              result = param[1],
              result$0 = [0, [0, typ$0], result],
              visited$0 = caml_call2(StringSet[2], o[1], visited);
             function reducer(memo, param){
              var memo$0 = types([0, memo], param[4]);
              return arg_list_types(memo$0, param[5]);
             }
             var _dN_ = o[3], _dO_ = caml_obj_tag(_dN_);
             a:
             if(250 === _dO_)
              var _dP_ = _dN_[1];
             else{
              if(246 !== _dO_ && 244 !== _dO_){var _dP_ = _dN_; break a;}
              var _dP_ = caml_call1(CamlinternalLazy[2], _dN_);
             }
             return caml_call3
                     (fold_left, reducer, [0, result$0, visited$0], _dP_);
            };
         return unless_visited(memo, o[1], _dH_);
        case 1:
         var
          typ$1 = typ$0[1],
          opt$1 = [0, memo],
          opt$0 = opt$1,
          typ$0 = typ$1;
         break;
        case 2:
         var
          typ$2 = typ$0[1],
          opt$2 = [0, memo],
          opt$0 = opt$2,
          typ$0 = typ$2;
         break;
        case 3:
         var
          s = typ$0[1],
          _dI_ =
            function(param){
             var visited = param[2], result = param[1];
             return [0,
                     [0, [0, typ$0], result],
                     caml_call2(StringSet[2], s[1], visited)];
            };
         return unless_visited(memo, s[1], _dI_);
        case 4:
         var
          e = typ$0[1],
          _dJ_ =
            function(param){
             var visited = param[2], result = param[1];
             return [0,
                     [0, [0, typ$0], result],
                     caml_call2(StringSet[2], e[1], visited)];
            };
         return unless_visited(memo, e[1], _dJ_);
        default:
         var
          a = typ$0[1],
          _dK_ =
            function(param){
             var
              visited = param[2],
              result = param[1],
              result$0 = [0, [0, typ$0], result],
              visited$0 = caml_call2(StringSet[2], a[1], visited),
              _dL_ = a[4],
              _dM_ = [0, result$0, visited$0];
             return caml_call3
                     (fold_left,
                      function(memo, typ){
                       if(0 !== typ[0])
                        return caml_call1(Stdlib[2], cst_Abstracts_can_t_have_argum);
                       var typ$0 = typ[1];
                       return types([0, memo], typ$0);
                      },
                      _dM_,
                      _dL_);
            };
         return unless_visited(memo, a[1], _dK_);
      }
     }
    }
    function arg_types(memo, argtyp){
     var argtyp$0 = argtyp;
     for(;;)
      switch(argtyp$0[0]){
        case 0:
         var
          _dB_ =
            function(param){
             var visited = param[2], result = param[1];
             return [0,
                     [0, [1, argtyp$0], result],
                     caml_call2(StringSet[2], argtyp$0[1], visited)];
            };
         return unless_visited(memo, argtyp$0[1], _dB_);
        case 1:
         var
          _dC_ =
            function(param){
             var
              visited = param[2],
              result = param[1],
              memo =
                [0,
                 [0, [1, argtyp$0], result],
                 caml_call2(StringSet[2], argtyp$0[1], visited)],
              _dE_ = argtyp$0[3],
              _dF_ = caml_obj_tag(_dE_);
             a:
             if(250 === _dF_)
              var _dG_ = _dE_[1];
             else{
              if(246 !== _dF_ && 244 !== _dF_){var _dG_ = _dE_; break a;}
              var _dG_ = caml_call1(CamlinternalLazy[2], _dE_);
             }
             return arg_list_types(memo, _dG_);
            };
         return unless_visited(memo, argtyp$0[1], _dC_);
        case 2:
         var
          _dD_ =
            function(param){
             var visited = param[2], result = param[1];
             return [0,
                     [0, [1, argtyp$0], result],
                     caml_call2(StringSet[2], argtyp$0[1], visited)];
            };
         return unless_visited(memo, argtyp$0[1], _dD_);
        case 3:
         var argtyp$1 = argtyp$0[1], argtyp$0 = argtyp$1; break;
        default: var argtyp$2 = argtyp$0[1], argtyp$0 = argtyp$2;
      }
    }
    function arg_list_types(memo, arglist){
     var memo$0 = memo, arglist$0 = arglist;
     for(;;){
      if(! arglist$0) return memo$0;
      var
       arglist$1 = arglist$0[2],
       arg = arglist$0[1],
       memo$1 =
         0 === arg[0] ? arg_types(memo$0, arg[3]) : arg_types(memo$0, arg[3]),
       memo$0 = memo$1,
       arglist$0 = arglist$1;
     }
    }
    function types_of_schema(s){
     var
      _dy_ = [0, map$0(s[3], obj_of_subscription_obj), 0],
      _dz_ = [0, [0, s[1]], [0, s[2], _dy_]],
      _dA_ = [0, 0, StringSet[1]],
      types$0 =
        caml_call3
          (fold_left,
           function(memo, op){
            if(! op) return memo;
            var op$0 = op[1];
            return types([0, memo], [0, op$0]);
           },
           _dA_,
           _dz_)
         [1];
     return types$0;
    }
    function args_to_list(opt, arglist){
     var opt$0 = opt, arglist$0 = arglist;
     for(;;){
      if(opt$0) var sth = opt$0[1], memo = sth; else var memo = 0;
      if(! arglist$0) return memo;
      var
       arglist$1 = arglist$0[2],
       arg = arglist$0[1],
       memo$0 = caml_call2(cons, [0, arg], memo),
       opt$1 = [0, memo$0],
       opt$0 = opt$1,
       arglist$0 = arglist$1;
     }
    }
    var
     no_abstracts = [0, 0],
     enum_value$0 =
       [0,
        [0,
         cst_EnumValue,
         0,
         [246,
          function(_dl_){
           var
            _dm_ = 0,
            _dn_ = Io$0[5],
            _do_ =
              [0,
               [0,
                cst_deprecationReason,
                0,
                0,
                string$0,
                0,
                function(param, _dx_){
                 var enum_value = _dx_[1], match = enum_value[3];
                 if(! match) return 0;
                 var reason = match[1];
                 return reason;
                },
                _dn_],
               _dm_],
            _dp_ = Io$0[5],
            _dq_ =
              [0,
               [0,
                cst_isDeprecated,
                0,
                0,
                [2, bool$0],
                0,
                function(param, _dw_){
                 var enum_value = _dw_[1];
                 return 0 !== enum_value[3] ? 1 : 0;
                },
                _dp_],
               _do_],
            _dr_ = Io$0[5],
            _ds_ =
              [0,
               [0,
                cst_description,
                0,
                0,
                string$0,
                0,
                function(param, _dv_){
                 var enum_value = _dv_[1];
                 return enum_value[2];
                },
                _dr_],
               _dq_],
            _dt_ = Io$0[5];
           return [0,
                   [0,
                    cst_name,
                    0,
                    0,
                    [2, string$0],
                    0,
                    function(param, _du_){
                     var enum_value = _du_[1];
                     return enum_value[1];
                    },
                    _dt_],
                   _ds_];
          }],
         no_abstracts]],
     input_value = [],
     type = [],
     field$0 = [];
    caml_update_dummy
     (input_value,
      [0,
       [0,
        cst_InputValue,
        0,
        [246,
         function(_c__){
          var
           _c$_ = 0,
           _da_ = Io$0[5],
           _db_ =
             [0,
              [0,
               cst_defaultValue,
               0,
               0,
               string$0,
               0,
               function(param, _dk_){
                var arg = _dk_[1];
                return 0 === arg[0] ? 0 : [0, Arg[2].call(null, arg[5])];
               },
               _da_],
              _c$_],
           _dc_ = Io$0[5],
           _dd_ =
             [0,
              [0,
               cst_type,
               0,
               0,
               [2, type],
               0,
               function(param, _dj_){
                var arg = _dj_[1];
                return 0 === arg[0] ? [1, arg[3]] : [1, arg[3]];
               },
               _dc_],
              _db_],
           _de_ = Io$0[5],
           _df_ =
             [0,
              [0,
               cst_description$0,
               0,
               0,
               string$0,
               0,
               function(param, _di_){
                var arg = _di_[1];
                return 0 === arg[0] ? arg[2] : arg[2];
               },
               _de_],
              _dd_],
           _dg_ = Io$0[5];
          return [0,
                  [0,
                   cst_name$0,
                   0,
                   0,
                   [2, string$0],
                   0,
                   function(param, _dh_){
                    var arg = _dh_[1];
                    return 0 === arg[0] ? arg[1] : arg[1];
                   },
                   _dg_],
                  _df_];
         }],
        no_abstracts]]);
    caml_update_dummy
     (type,
      [0,
       [0,
        cst_Type,
        0,
        [246,
         function(_cB_){
          var
           _cC_ = 0,
           _cD_ = Io$0[5],
           _cE_ =
             [0,
              [0,
               cst_enumValues,
               0,
               0,
               [1, [2, enum_value$0]],
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 if(4 === match[0]){
                  var e = match[1], _c8_ = e[3];
                  return [0,
                          caml_call2(map, function(x){return [0, x];}, _c8_)];
                 }
                }
                else{
                 var match$0 = t[1];
                 if(2 === match$0[0]){
                  var _c9_ = match$0[3];
                  return [0,
                          caml_call2(map, function(x){return [0, x];}, _c9_)];
                 }
                }
                return 0;
               },
               _cD_],
              _cC_],
           _cF_ = Io$0[5],
           _cG_ =
             [0,
              [0,
               cst_inputFields,
               0,
               0,
               [1, [2, input_value]],
               0,
               function(param, t){
                if(1 === t[0]){
                 var match = t[1];
                 if(1 === match[0]){
                  var _c5_ = match[3], _c6_ = caml_obj_tag(_c5_);
                  a:
                  if(250 === _c6_)
                   var _c7_ = _c5_[1];
                  else{
                   if(246 !== _c6_ && 244 !== _c6_){var _c7_ = _c5_; break a;}
                   var _c7_ = caml_call1(CamlinternalLazy[2], _c5_);
                  }
                  return [0, args_to_list(0, _c7_)];
                 }
                }
                return 0;
               },
               _cF_],
              _cE_],
           _cH_ = Io$0[5],
           _cI_ =
             [0,
              [0,
               cst_ofType,
               0,
               0,
               type,
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 switch(match[0]){
                   case 1:
                    var typ = match[1]; return [0, [0, typ]];
                   case 2:
                    var typ$0 = match[1]; return [0, [0, typ$0]];
                 }
                }
                else{
                 var match$0 = t[1];
                 switch(match$0[0]){
                   case 3:
                    var typ$1 = match$0[1]; return [0, [1, typ$1]];
                   case 4:
                    var typ$2 = match$0[1]; return [0, [1, typ$2]];
                 }
                }
                return 0;
               },
               _cH_],
              _cG_],
           _cJ_ = Io$0[5],
           _cK_ =
             [0,
              [0,
               cst_possibleTypes,
               0,
               0,
               [1, [2, type]],
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 if(5 === match[0]){var a = match[1]; return [0, a[4]];}
                }
                return 0;
               },
               _cJ_],
              _cI_],
           _cL_ = Io$0[5],
           _cM_ =
             [0,
              [0,
               cst_interfaces,
               0,
               0,
               [1, [2, type]],
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 if(0 === match[0]){
                  var
                   o = match[1],
                   _c3_ = o[4][1],
                   interfaces =
                     caml_call2
                      (filter,
                       function(param){
                        var _c4_ = param[3];
                        if(typeof _c4_ !== "number" && -609414759 === _c4_[1])
                         return 1;
                        return 0;
                       },
                       _c3_);
                  return [0,
                          caml_call2
                           (map, function(i){return [0, [5, i]];}, interfaces)];
                 }
                }
                return 0;
               },
               _cL_],
              _cK_],
           _cN_ = Io$0[5],
           _cO_ =
             [0,
              [0,
               cst_fields,
               0,
               0,
               [1, [2, field$0]],
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 switch(match[0]){
                   case 0:
                    var o = match[1], _cV_ = o[3], _cW_ = caml_obj_tag(_cV_);
                    a:
                    if(250 === _cW_)
                     var _cX_ = _cV_[1];
                    else{
                     if(246 !== _cW_ && 244 !== _cW_){var _cX_ = _cV_; break a;}
                     var _cX_ = caml_call1(CamlinternalLazy[2], _cV_);
                    }
                    return [0,
                            caml_call2(map, function(f){return [0, f];}, _cX_)];
                   case 5:
                    var match$0 = match[1][3];
                    if(typeof match$0 !== "number" && -609414759 === match$0[1]){
                     var fields = match$0[2], _cY_ = caml_obj_tag(fields);
                     a:
                     if(250 === _cY_)
                      var _cZ_ = fields[1];
                     else{
                      if(246 !== _cY_ && 244 !== _cY_){var _cZ_ = fields; break a;}
                      var _cZ_ = caml_call1(CamlinternalLazy[2], fields);
                     }
                     return [0,
                             caml_call2
                              (map,
                               function(param){var f = param[1]; return [0, f];},
                               _cZ_)];
                    }
                    break;
                 }
                }
                else{
                 var match$1 = t[1];
                 if(1 === match$1[0]){
                  var _c0_ = match$1[3], _c1_ = caml_obj_tag(_c0_);
                  a:
                  if(250 === _c1_)
                   var _c2_ = _c0_[1];
                  else{
                   if(246 !== _c1_ && 244 !== _c1_){var _c2_ = _c0_; break a;}
                   var _c2_ = caml_call1(CamlinternalLazy[2], _c0_);
                  }
                  var arg_list = args_to_list(0, _c2_);
                  return [0,
                          caml_call2
                           (map,
                            function(param){var f = param[1]; return [1, f];},
                            arg_list)];
                 }
                }
                return 0;
               },
               _cN_],
              _cM_],
           _cP_ = Io$0[5],
           _cQ_ =
             [0,
              [0,
               cst_description$1,
               0,
               0,
               string$0,
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 switch(match[0]){
                   case 0:
                    var o = match[1]; return o[2];
                   case 3:
                    var s = match[1]; return s[2];
                   case 4:
                    var e = match[1]; return e[2];
                   case 5:
                    var a = match[1]; return a[2];
                 }
                }
                else{
                 var match$0 = t[1];
                 switch(match$0[0]){
                   case 0:
                    return match$0[2];
                   case 1:
                    return match$0[2];
                   case 2:
                    return match$0[2];
                 }
                }
                return 0;
               },
               _cP_],
              _cO_],
           _cR_ = Io$0[5],
           _cS_ =
             [0,
              [0,
               cst_name$1,
               0,
               0,
               string$0,
               0,
               function(param, t){
                if(0 === t[0]){
                 var match = t[1];
                 switch(match[0]){
                   case 0:
                    var o = match[1]; return [0, o[1]];
                   case 3:
                    var s = match[1]; return [0, s[1]];
                   case 4:
                    var e = match[1]; return [0, e[1]];
                   case 5:
                    var a = match[1]; return [0, a[1]];
                 }
                }
                else{
                 var match$0 = t[1];
                 switch(match$0[0]){
                   case 0:
                    return [0, match$0[1]];
                   case 1:
                    return [0, match$0[1]];
                   case 2:
                    return [0, match$0[1]];
                 }
                }
                return 0;
               },
               _cR_],
              _cQ_],
           _cT_ = Io$0[5];
          return [0,
                  [0,
                   cst_kind,
                   0,
                   0,
                   [2, type_kind],
                   0,
                   function(param, t){
                    if(0 !== t[0])
                     switch(t[1][0]){
                       case 0:
                        return -256222388;
                       case 1:
                        return -291114423;
                       case 2:
                        return 770676513;
                       case 3:
                        return 848054398;
                       default: return 388158996;
                     }
                    var _cU_ = t[1];
                    switch(_cU_[0]){
                      case 0:
                       return -908856609;
                      case 1:
                       return 848054398;
                      case 2:
                       return 388158996;
                      case 3:
                       return -256222388;
                      case 4:
                       return 770676513;
                      default:
                       return typeof _cU_[1][3] === "number"
                               ? 974443759
                               : -609414759;
                    }
                   },
                   _cT_],
                  _cS_];
         }],
        no_abstracts]]);
    caml_update_dummy
     (field$0,
      [0,
       [0,
        cst_Field,
        0,
        [246,
         function(_co_){
          var
           _cp_ = 0,
           _cq_ = Io$0[5],
           _cr_ =
             [0,
              [0,
               cst_deprecationReason$0,
               0,
               0,
               string$0,
               0,
               function(param, f){
                if(0 === f[0]){
                 var match = f[1][3];
                 if(match){var reason = match[1]; return reason;}
                }
                return 0;
               },
               _cq_],
              _cp_],
           _cs_ = Io$0[5],
           _ct_ =
             [0,
              [0,
               cst_isDeprecated$0,
               0,
               0,
               [2, bool$0],
               0,
               function(param, f){
                if(0 === f[0] && f[1][3]) return 1;
                return 0;
               },
               _cs_],
              _cr_],
           _cu_ = Io$0[5],
           _cv_ =
             [0,
              [0,
               cst_type$0,
               0,
               0,
               [2, type],
               0,
               function(param, f){
                if(0 === f[0]) return [0, f[1][4]];
                var match = f[1];
                return 0 === match[0] ? [1, match[3]] : [1, match[3]];
               },
               _cu_],
              _ct_],
           _cw_ = Io$0[5],
           _cx_ =
             [0,
              [0,
               cst_args,
               0,
               0,
               [2, [1, [2, input_value]]],
               0,
               function(param, f){
                return 0 === f[0] ? args_to_list(0, f[1][5]) : 0;
               },
               _cw_],
              _cv_],
           _cy_ = Io$0[5],
           _cz_ =
             [0,
              [0,
               cst_description$2,
               0,
               0,
               string$0,
               0,
               function(param, f){
                if(0 === f[0]) return f[1][2];
                var match = f[1];
                return 0 === match[0] ? match[2] : match[2];
               },
               _cy_],
              _cx_],
           _cA_ = Io$0[5];
          return [0,
                  [0,
                   cst_name$2,
                   0,
                   0,
                   [2, string$0],
                   0,
                   function(param, f){
                    if(0 === f[0]) return f[1][1];
                    var match = f[1];
                    return 0 === match[0] ? match[1] : match[1];
                   },
                   _cA_],
                  _cz_];
         }],
        no_abstracts]]);
    var
     directive =
       [0,
        [0,
         cst_Directive,
         0,
         [246,
          function(_cf_){
           var
            _cg_ = 0,
            _ch_ = Io$0[5],
            _ci_ =
              [0,
               [0,
                cst_args$0,
                0,
                0,
                [2, [1, [2, input_value]]],
                0,
                function(param, d){return args_to_list(0, d[4]);},
                _ch_],
               _cg_],
            _cj_ = Io$0[5],
            _ck_ =
              [0,
               [0,
                cst_locations,
                0,
                0,
                [2, [1, [2, directive_location]]],
                0,
                function(param, d){return d[3];},
                _cj_],
               _ci_],
            _cl_ = Io$0[5],
            _cm_ =
              [0,
               [0,
                cst_description$3,
                0,
                0,
                string$0,
                0,
                function(param, d){return d[2];},
                _cl_],
               _ck_],
            _cn_ = Io$0[5];
           return [0,
                   [0,
                    cst_name$3,
                    0,
                    0,
                    [2, string$0],
                    0,
                    function(param, d){return d[1];},
                    _cn_],
                   _cm_];
          }],
         no_abstracts]],
     schema$0 =
       [0,
        [0,
         cst_Schema,
         0,
         [246,
          function(_bZ_){
           var
            _b0_ = 0,
            _b1_ = Io$0[5],
            _b2_ =
              [0,
               [0,
                cst_directives,
                0,
                0,
                [2, [1, [2, directive]]],
                0,
                function(param, _ce_){return 0;},
                _b1_],
               _b0_],
            _b3_ = Io$0[5],
            _b4_ =
              [0,
               [0,
                cst_subscriptionType,
                0,
                0,
                type,
                0,
                function(param, _cc_){
                 var schema = _cc_[1];
                 function _cd_(subs){
                  return [0, [0, obj_of_subscription_obj(subs)]];
                 }
                 return map$0(schema[3], _cd_);
                },
                _b3_],
               _b2_],
            _b5_ = Io$0[5],
            _b6_ =
              [0,
               [0,
                cst_mutationType,
                0,
                0,
                type,
                0,
                function(param, _ca_){
                 var schema = _ca_[1];
                 function _cb_(mut){return [0, [0, mut]];}
                 return map$0(schema[2], _cb_);
                },
                _b5_],
               _b4_],
            _b7_ = Io$0[5],
            _b8_ =
              [0,
               [0,
                cst_queryType,
                0,
                0,
                [2, type],
                0,
                function(param, _b$_){
                 var schema = _b$_[1];
                 return [0, [0, schema[1]]];
                },
                _b7_],
               _b6_],
            _b9_ = Io$0[5];
           return [0,
                   [0,
                    cst_types,
                    0,
                    0,
                    [2, [1, [2, type]]],
                    0,
                    function(param, _b__){var types = _b__[2]; return types;},
                    _b9_],
                   _b8_];
          }],
         no_abstracts]];
    function add_built_in_fields(schema){
     var
      types = types_of_schema(schema),
      _bO_ = Io$0[5],
      schema_field =
        [0,
         cst_schema,
         0,
         0,
         [2, schema$0],
         0,
         function(param, _bY_){return [0, schema, types];},
         _bO_],
      _bP_ = Io$0[5];
     function _bQ_(param, _bX_, name){
      return find
              (function(typ){
                if(0 === typ[0]){
                 var match = typ[1];
                 switch(match[0]){
                   case 0:
                    var o = match[1]; return caml_string_equal(o[1], name);
                   case 1:
                    return 0;
                   case 2:
                    return 0;
                   case 3:
                    var s = match[1]; return caml_string_equal(s[1], name);
                   case 4:
                    var e = match[1]; return caml_string_equal(e[1], name);
                   default:
                    var a = match[1]; return caml_string_equal(a[1], name);
                 }
                }
                var match$0 = typ[1];
                switch(match$0[0]){
                  case 0:
                   return caml_string_equal(match$0[1], name);
                  case 1:
                   return caml_string_equal(match$0[1], name);
                  case 2:
                   return caml_string_equal(match$0[1], name);
                  case 3:
                   return 0;
                  default: return 0;
                }
               },
               types);
     }
     var
      _bR_ = Arg[10].call(null, Arg[6]),
      type_field =
        [0,
         cst_type$1,
         0,
         0,
         type,
         [0, Arg[15].call(null, 0, cst_name$4, _bR_), 0],
         _bQ_,
         _bP_],
      fields =
        [246,
         function(_bT_){
          var _bU_ = schema[1][3], _bV_ = caml_obj_tag(_bU_);
          a:
          if(250 === _bV_)
           var _bW_ = _bU_[1];
          else{
           if(246 !== _bV_ && 244 !== _bV_){var _bW_ = _bU_; break a;}
           var _bW_ = caml_call1(CamlinternalLazy[2], _bU_);
          }
          return [0, schema_field, [0, type_field, _bW_]];
         }],
      _bS_ = schema[1];
     return [0, [0, _bS_[1], _bS_[2], fields, _bS_[4]], schema[2], schema[3]];
    }
    var
     Introspection = [0, , , , , , , , , , , , , , , , add_built_in_fields];
    function matches_type_condition(type_condition, obj){
     var _bM_ = caml_string_equal(obj[1], type_condition);
     if(_bM_) return _bM_;
     var _bN_ = obj[4][1];
     return caml_call2
             (exists,
              function(abstract$0){
               return caml_string_equal(abstract$0[1], type_condition);
              },
              _bN_);
    }
    function should_include_field(ctx, directives){
     if(! directives) return _E_;
     var match = directives[1], name = match[1];
     if(! caml_string_notequal(name, cst_include$0)){
      var rest$0 = directives[2], arguments$1 = match[2];
      return eval_directive(ctx, include_directive, arguments$1, rest$0);
     }
     if(caml_string_notequal(name, cst_skip$0)){
      var err = caml_call2(Stdlib_Format[140], _D_, name);
      return [1, err];
     }
     var rest = directives[2], arguments$0 = match[2];
     return eval_directive(ctx, skip_directive, arguments$0, rest);
    }
    function eval_directive(ctx, param, arguments$0, rest){
     var resolve = param[5], args = param[4], name = param[1];
     function _bK_(param){
      return 925778591 <= param ? _F_ : should_include_field(ctx, rest);
     }
     var
      _bL_ = Arg[13].call(null, ctx[1], _G_, name, args, arguments$0, resolve);
     return caml_call2(Rresult[1], _bL_, _bK_);
    }
    function alias_or_name(field){
     var match = field[1];
     if(! match) return field[2];
     var alias = match[1];
     return alias;
    }
    function merge_selections(opt, param){
     var opt$0 = opt, param$0 = param;
     for(;;){
      if(opt$0) var sth = opt$0[1], memo = sth; else var memo = 0;
      if(! param$0) return caml_call1(rev, memo);
      var
       fields = param$0[2],
       field = param$0[1],
       id = alias_or_name(field),
       match =
         caml_call2
          (partition,
           function(id){
             return function(field){
              return caml_string_equal(id, alias_or_name(field));};
            }
            (id),
           fields),
       rest = match[2],
       matching = match[1],
       _bJ_ = [0, field, matching],
       selection_sets =
         caml_call2(map, function(field){return field[5];}, _bJ_),
       selection_set = caml_call1(concat, selection_sets),
       opt$1 =
         [0,
          [0,
           [0, field[1], field[2], field[3], field[4], selection_set],
           memo]],
       opt$0 = opt$1,
       param$0 = rest;
     }
    }
    function collect_fields(ctx, obj, fields){
     var
      _bA_ =
        join
         (0,
          caml_call2
           (map,
            function(param){
             switch(param[0]){
               case 0:
                var
                 field = param[1],
                 _bD_ =
                   function(include_field){
                    return include_field ? [0, field, 0] : 0;
                   },
                 _bE_ = should_include_field(ctx, field[4]);
                return caml_call2(Rresult[2], _bE_, _bD_);
               case 1:
                var
                 spread = param[1],
                 match = caml_call2(StringMap[45], spread[1], ctx[2]);
                if(match){
                 var
                  match$0 = match[1],
                  selection_set = match$0[4],
                  type_condition = match$0[2];
                 if(matches_type_condition(type_condition, obj)){
                  var
                   _bF_ =
                     function(include_field){
                      return include_field
                              ? collect_fields(ctx, obj, selection_set)
                              : _H_;
                     },
                   _bG_ = should_include_field(ctx, spread[2]);
                  return caml_call2(Rresult[1], _bG_, _bF_);
                 }
                }
                return _I_;
               default:
                var fragment = param[1], match$1 = fragment[1];
                if(match$1)
                 var
                  condition = match$1[1],
                  matches_type_condition$0 =
                    matches_type_condition(condition, obj);
                else
                 var matches_type_condition$0 = 1;
                if(! matches_type_condition$0) return _K_;
                var
                 _bH_ =
                   function(include_field){
                    return include_field
                            ? collect_fields(ctx, obj, fragment[3])
                            : _J_;
                   },
                 _bI_ = should_include_field(ctx, fragment[2]);
                return caml_call2(Rresult[1], _bI_, _bH_);
             }
            },
            fields)),
      _bB_ = caml_call1(caml_call1(Rresult[3][9], concat), _bA_);
     function _bC_(eta){return merge_selections(0, eta);}
     return caml_call1(caml_call1(Rresult[3][9], _bC_), _bB_);
    }
    function field_from_object(obj, field_name){
     var _bx_ = obj[3], _by_ = caml_obj_tag(_bx_);
     a:
     if(250 === _by_)
      var _bz_ = _bx_[1];
     else{
      if(246 !== _by_ && 244 !== _by_){var _bz_ = _bx_; break a;}
      var _bz_ = caml_call1(CamlinternalLazy[2], _bx_);
     }
     return find
             (function(param){return caml_string_equal(param[1], field_name);},
              _bz_);
    }
    function field_from_subscription_object(obj, field_name){
     var _bw_ = obj[3];
     return find
             (function(param){return caml_string_equal(param[1], field_name);},
              _bw_);
    }
    function coerce_or_null(src, f){
     if(! src) return Io$0[5].call(null, _L_);
     var src$0 = src[1];
     return caml_call1(f, src$0);
    }
    function map_fields_with_order(param){
     if(param) return Io$0[10];
     var _br_ = Io$0[9];
     return function(_bs_, _bt_){
      var _bv_ = _bt_, _bu_ = _bs_;
      return _br_(_M_, _bu_, _bv_);};
    }
    function error_to_json(path, extensions, msg){
     if(path)
      var
       path$0 = path[1],
       props = [0, [0, cst_path, [0, 848054398, caml_call1(rev, path$0)]], 0];
     else
      var props = 0;
     a:
     {
      if(extensions){
       var extensions$0 = extensions[1];
       if(extensions$0){
        var
         extension_props =
           [0, [0, cst_extensions, [0, 963043957, extensions$0]], 0];
        break a;
       }
      }
      var extension_props = 0;
     }
     return [0,
             963043957,
             [0,
              [0, cst_message, [0, -976970511, msg]],
              caml_call2(append, props, extension_props)]];
    }
    function error_response(data, path, extensions, msg){
     var
      errors =
        [0,
         cst_errors,
         [0, 848054398, [0, error_to_json(path, extensions, msg), 0]]];
     if(data)
      var data$0 = data[1], data$1 = [0, [0, cst_data, data$0], 0];
     else
      var data$1 = 0;
     return [0, 963043957, [0, errors, data$1]];
    }
    function present(ctx, src, query_field, typ, path){
     var src$0 = src, typ$0 = typ;
     for(;;)
      switch(typ$0[0]){
        case 0:
         var o = typ$0[1];
         return coerce_or_null
                 (src$0,
                  function(src){
                   var match = collect_fields(ctx, o, query_field[5]);
                   if(0 === match[0]){
                    var fields = match[1];
                    return resolve_fields(ctx, 0, src, o, fields, path);
                   }
                   var e = match[1];
                   return Io$0[6].call(null, [0, -892235418, e]);
                  });
        case 1:
         var t = typ$0[1];
         return coerce_or_null
                 (src$0,
                  function(src){
                   var
                    _bk_ =
                      caml_call2
                       (mapi,
                        function(i, x){
                         return present
                                 (ctx, x, query_field, t, [0, [0, 3654863, i], path]);
                        },
                        src),
                    _bl_ = Io$0[7].call(null, _bk_),
                    func = Io$0[4],
                    _bm_ = func(_bl_, function(eta){return join(0, eta);}),
                    _bn_ = Io$0[8][3];
                   return _bn_
                           (_bm_,
                            function(xs){
                             var
                              _bo_ =
                                caml_call1
                                 (concat,
                                  caml_call2(map, function(_bq_){return _bq_[2];}, xs));
                             return [0,
                                     [0,
                                      848054398,
                                      caml_call2(map, function(_bp_){return _bp_[1];}, xs)],
                                     _bo_];
                            });
                  });
        case 2:
         var
          typ$1 = typ$0[1],
          src$1 = [0, src$0],
          src$0 = src$1,
          typ$0 = typ$1;
         break;
        case 3:
         var s = typ$0[1];
         return coerce_or_null
                 (src$0,
                  function(x){
                   var _bj_ = [0, caml_call1(s[3], x), 0];
                   return Io$0[5].call(null, _bj_);
                  });
        case 4:
         var e = typ$0[1];
         return coerce_or_null
                 (src$0,
                  function(src){
                   var
                    _bi_ = e[3],
                    match =
                      find
                       (function(enum_value){return src === enum_value[4] ? 1 : 0;},
                        _bi_);
                   if(! match) return Io$0[5].call(null, _N_);
                   var enum_value = match[1];
                   return Io$0[5].call
                           (null, [0, [0, -976970511, enum_value[1]], 0]);
                  });
        default:
         return coerce_or_null
                 (src$0,
                  function(param){
                   var src = param[2], typ = param[1];
                   return present(ctx, [0, src], query_field, typ, path);
                  });
      }
    }
    function resolve_field(ctx, src, query_field, field, path){
     var
      name = alias_or_name(query_field),
      path$0 = [0, [0, -976970511, name], path],
      resolve_info = [0, ctx[3], query_field, ctx[2], ctx[1]],
      resolver = caml_call2(field[6], resolve_info, src),
      match =
        Arg[13].call
         (null, ctx[1], 0, field[1], field[5], query_field[3], resolver);
     if(0 === match[0]){
      var
       unlifted_value = match[1],
       _bd_ =
         function(resolved){
          return present(ctx, resolved, query_field, field[4], path$0);
         },
       _be_ = caml_call1(field[7], unlifted_value),
       _bf_ = Io$0[8][2],
       _bg_ =
         _bf_(_be_, function(err){return [0, 1048866517, [0, err, path$0]];}),
       lifted_value = Io$0[11][2].call(null, _bg_, _bd_),
       _bh_ =
         function(error){
          if(0 === error[0]){
           var match = error[1], errors = match[2], value = match[1];
           return [0, [0, [0, name, value], errors]];
          }
          var match$0 = error[1];
          if(1048866517 > match$0[1]) return error;
          var err = match$0[2];
          return 2 === field[4][0]
                  ? error
                  : [0, [0, [0, name, 870828711], [0, err, 0]]];
         };
      return Io$0[11][1].call(null, lifted_value, _bh_);
     }
     var err = match[1];
     return Io$0[6].call(null, [0, -892235418, err]);
    }
    function resolve_fields(ctx, opt, src, obj, fields, path){
     if(opt)
      var sth = opt[1], execution_order = sth;
     else
      var execution_order = 1;
     function _a8_(query_field){
      var name = alias_or_name(query_field);
      if(caml_string_equal(query_field[2], cst_typename))
       return Io$0[5].call(null, [0, [0, name, [0, -976970511, obj[1]]], 0]);
      var match = field_from_object(obj, query_field[2]);
      if(match){
       var field = match[1];
       return resolve_field(ctx, src, query_field, field, path);
      }
      var err = caml_call3(Stdlib_Printf[4], _O_, query_field[2], obj[1]);
      return Io$0[6].call(null, [0, -560894942, err]);
     }
     var
      _a9_ = caml_call2(map_fields_with_order(execution_order), _a8_, fields),
      func = Io$0[4],
      _a__ = func(_a9_, function(eta){return join(0, eta);}),
      _a$_ = Io$0[8][3];
     return _a$_
             (_a__,
              function(xs){
               var
                _ba_ =
                  caml_call1
                   (concat,
                    caml_call2(map, function(_bc_){return _bc_[2];}, xs));
               return [0,
                       [0,
                        963043957,
                        caml_call2(map, function(_bb_){return _bb_[1];}, xs)],
                       _ba_];
              });
    }
    function data_to_json(param){
     var data = param[1];
     if(! param[2]) return [0, 963043957, [0, [0, cst_data$1, data], 0]];
     var
      errors = param[2],
      errors$0 =
        caml_call2
         (map,
          function(param){
           var
            path = param[2],
            field_error = param[1],
            extensions = caml_call1(Field_error[2], field_error),
            msg = caml_call1(Field_error[1], field_error);
           return error_to_json([0, path], extensions, msg);
          },
          errors);
     return [0,
             963043957,
             [0,
              [0, cst_errors$0, [0, 848054398, errors$0]],
              [0, [0, cst_data$0, data], 0]]];
    }
    function to_response(res){
     if(0 === res[0]) return res;
     var match = res[1];
     if(typeof match === "number")
      return -784750693 === match
              ? [1, error_response(0, 0, 0, cst_Operation_name_required)]
              : 218856819
                <= match
                ? 928682367
                  <= match
                  ? [1, error_response(0, 0, 0, cst_Mutations_not_configured)]
                  : [1,
                    error_response(0, 0, 0, cst_Subscriptions_not_configur)]
                : 80281036
                  <= match
                  ? [1, error_response(0, 0, 0, cst_No_operation_found)]
                  : [1, error_response(0, 0, 0, cst_Operation_not_found)];
     var _a7_ = match[1];
     if(-560894942 === _a7_){
      var msg = match[2];
      return [1, error_response(0, 0, 0, msg)];
     }
     if(1048866517 <= _a7_){
      var
       match$0 = match[2],
       path = match$0[2],
       field_error = match$0[1],
       extensions = caml_call1(Field_error[2], field_error),
       msg$0 = caml_call1(Field_error[1], field_error);
      return [1, error_response(_P_, [0, path], extensions, msg$0)];
     }
     var msg$1 = match[2];
     return [1, error_response(_Q_, 0, 0, msg$1)];
    }
    function subscribe(ctx, subs_field, field){
     var
      name = alias_or_name(field),
      path = [0, [0, -976970511, name], 0],
      resolve_info = [0, ctx[3], field, ctx[2], ctx[1]],
      resolver = caml_call1(subs_field[6], resolve_info),
      match =
        Arg[13].call
         (null, ctx[1], 0, subs_field[1], subs_field[5], field[3], resolver);
     if(0 === match[0]){
      var
       result = match[1],
       _a0_ = Io$0[8][3],
       _a1_ =
         _a0_
          (result,
           function(source_stream){
            function _a3_(value){
             var
              _a4_ = present(ctx, value, field, subs_field[4], path),
              _a5_ = Io$0[8][3],
              _a6_ =
                _a5_
                 (_a4_,
                  function(param){
                   var errors = param[2], data = param[1];
                   return data_to_json
                           ([0, [0, 963043957, [0, [0, name, data], 0]], errors]);
                  });
             return Io$0[11][1].call(null, _a6_, to_response);
            }
            return caml_call2(Io$0[3][1], source_stream, _a3_);
           }),
       _a2_ = Io$0[8][2];
      return _a2_
              (_a1_, function(err){return [0, 1048866517, [0, err, path]];});
     }
     var err = match[1];
     return Io$0[6].call(null, [0, -892235418, err]);
    }
    function execute_operation(schema, ctx, operation){
     switch(operation[1]){
       case 0:
        var
         query = schema[1],
         _aD_ =
           function(fields){
            var
             _aY_ = resolve_fields(ctx, 0, 0, query, fields, 0),
             _aZ_ = Io$0[8][3];
            return _aZ_
                    (_aY_,
                     function(data_errs){
                      return [0, -71406943, data_to_json(data_errs)];
                     });
           },
         _aE_ = collect_fields(ctx, query, operation[5]),
         _aF_ = caml_call1(Io$0[1], _aE_),
         _aG_ = Io$0[8][2],
         _aH_ = _aG_(_aF_, function(e){return [0, -892235418, e];});
        return Io$0[11][2].call(null, _aH_, _aD_);
       case 1:
        var match = schema[2];
        if(! match) return Io$0[6].call(null, 928682367);
        var
         mut = match[1],
         _aI_ =
           function(fields){
            var
             _aW_ = resolve_fields(ctx, _R_, 0, mut, fields, 0),
             _aX_ = Io$0[8][3];
            return _aX_
                    (_aW_,
                     function(data_errs){
                      return [0, -71406943, data_to_json(data_errs)];
                     });
           },
         _aJ_ = collect_fields(ctx, mut, operation[5]),
         _aK_ = caml_call1(Io$0[1], _aJ_),
         _aL_ = Io$0[8][2],
         _aM_ = _aL_(_aK_, function(e){return [0, -892235418, e];});
        return Io$0[11][2].call(null, _aM_, _aI_);
       default:
        var match$0 = schema[3];
        if(! match$0) return Io$0[6].call(null, 218856819);
        var
         subs = match$0[1],
         _aN_ =
           function(fields){
            if(fields && ! fields[2]){
             var field = fields[1];
             if(caml_string_equal(field[2], cst_typename)){
              var
               _aT_ =
                 [0,
                  -71406943,
                  data_to_json
                   ([0,
                     [0,
                      963043957,
                      [0, [0, field[2], [0, -976970511, subs[1]]], 0]],
                     0])];
              return Io$0[5].call(null, _aT_);
             }
             var match = field_from_subscription_object(subs, field[2]);
             if(match){
              var
               subscription_field = match[1],
               _aU_ = subscribe(ctx, subscription_field, field),
               _aV_ = Io$0[8][3];
              return _aV_
                      (_aU_, function(stream){return [0, -977172320, stream];});
             }
             var err = caml_call3(Stdlib_Printf[4], _T_, field[2], subs[1]);
             return Io$0[6].call(null, [0, -560894942, err]);
            }
            return Io$0[6].call(null, _S_);
           },
         _aO_ = operation[5],
         _aP_ = collect_fields(ctx, obj_of_subscription_obj(subs), _aO_),
         _aQ_ = caml_call1(Io$0[1], _aP_),
         _aR_ = Io$0[8][2],
         _aS_ = _aR_(_aQ_, function(e){return [0, -892235418, e];});
        return Io$0[11][2].call(null, _aS_, _aN_);
     }
    }
    function collect_fragments(doc){
     var _aC_ = StringMap[1];
     return caml_call3
             (fold_left,
              function(memo, param){
               if(0 === param[0]) return memo;
               var f = param[1];
               return caml_call3(StringMap[2], f[1], f, memo);
              },
              _aC_,
              doc);
    }
    var
     FragmentCycle =
       [248, cst_Graphql_schema_Make_Io_Fie$0, caml_fresh_oo_id(0)];
    function validate_fragments(fragment_map){
     try{
      var
       _aA_ =
         function(name, param){
          return validate_fragment(fragment_map, StringSet[1], name);
         };
      caml_call2(StringMap[22], _aA_, fragment_map);
      var _aB_ = [0, fragment_map];
      return _aB_;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== FragmentCycle) throw caml_maybe_attach_backtrace(exn, 0);
      var
       fragment_names = exn[2],
       cycle = caml_call2(Stdlib_String[7], cst$2, fragment_names),
       err = caml_call2(Stdlib_Format[140], _U_, cycle);
      return [1, [0, -560894942, err]];
     }
    }
    function validate_fragment(fragment_map, visited, name){
     var match = caml_call2(StringMap[45], name, fragment_map);
     if(! match) return 0;
     var fragment = match[1];
     if(caml_call2(StringSet[31], fragment[1], visited))
      throw caml_maybe_attach_backtrace
             ([0, FragmentCycle, caml_call1(StringSet[10], visited)], 1);
     var
      visited$0 = caml_call2(StringSet[2], fragment[1], visited),
      _ay_ = fragment[4];
     return caml_call2
             (iter,
              function(_az_){
               return validate_fragment_selection
                       (fragment_map, visited$0, _az_);
              },
              _ay_);
    }
    function validate_fragment_selection(fragment_map, visited, selection){
     switch(selection[0]){
       case 0:
        var field = selection[1], _au_ = field[5];
        return caml_call2
                (iter,
                 function(_ax_){
                  return validate_fragment_selection
                          (fragment_map, visited, _ax_);
                 },
                 _au_);
       case 1:
        var fragment_spread = selection[1];
        return validate_fragment(fragment_map, visited, fragment_spread[1]);
       default:
        var inline_fragment = selection[1], _av_ = inline_fragment[3];
        return caml_call2
                (iter,
                 function(_aw_){
                  return validate_fragment_selection
                          (fragment_map, visited, _aw_);
                 },
                 _av_);
     }
    }
    function collect_and_validate_fragments(doc){
     var fragments = collect_fragments(doc);
     return validate_fragments(fragments);
    }
    function collect_operations(doc){
     var _at_ = 0;
     return caml_call3
             (fold_left,
              function(memo, param){
               if(0 !== param[0]) return memo;
               var op = param[1];
               return [0, op, memo];
              },
              _at_,
              doc);
    }
    function select_operation(operation_name, doc){
     var operations = collect_operations(doc);
     if(! operations) return _X_;
     if(! operation_name){
      var op = operations[1];
      return operations[2] ? _W_ : [0, op];
     }
     var name = operation_name[1];
     try{
      var
       _ar_ =
         [0,
          caml_call2
           (find_exn,
            function(op){return runtime.caml_equal(op[2], [0, name]);},
            operations)];
      return _ar_;
     }
     catch(_as_){
      var _aq_ = caml_wrap_exception(_as_);
      if(_aq_ === Stdlib[8]) return _V_;
      throw caml_maybe_attach_backtrace(_aq_, 0);
     }
    }
    function execute(schema, ctx, opt, operation_name, doc){
     if(opt) var sth = opt[1], variables = sth; else var variables = 0;
     function _ah_(fragments){
      var schema$0 = Introspection[16].call(null, schema);
      function _al_(op){
       var
        _ao_ = op[3],
        _ap_ = StringMap[1],
        default_variables =
          caml_call3
           (fold_left,
            function(memo, param){
             var default_value = param[3], name = param[1];
             if(! default_value) return memo;
             var value = default_value[1];
             return caml_call3(StringMap[2], name, value, memo);
            },
            _ap_,
            _ao_),
        variables$0 =
          caml_call3
           (fold_left,
            function(memo, param){
             var value = param[2], name = param[1];
             return caml_call3(StringMap[2], name, value, memo);
            },
            default_variables,
            variables),
        execution_ctx = [0, variables$0, fragments, ctx];
       return execute_operation(schema$0, execution_ctx, op);
      }
      var
       _am_ = select_operation(operation_name, doc),
       _an_ = caml_call1(Io$0[1], _am_);
      return Io$0[11][2].call(null, _an_, _al_);
     }
     var
      _ai_ = collect_and_validate_fragments(doc),
      _aj_ = caml_call1(Io$0[1], _ai_),
      _ak_ = Io$0[11][2].call(null, _aj_, _ah_);
     return Io$0[11][1].call(null, _ak_, to_response);
    }
    return [0,
            Io$0,
            StringMap,
            ,
            enum_value,
            ,
            Arg,
            union$0,
            interface$0,
            fix$0,
            schema,
            obj$0,
            field,
            io_field,
            abstract_field,
            subscription_field,
            enum$1,
            scalar$0,
            list$0,
            non_null$0,
            add_type,
            ,
            int$1,
            string$0,
            bool$0,
            float$1,
            guid$0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            execute];
   }
   var
    Graphql_schema =
      [0,
       function(_Z_, _Y_){
        var ___ = Make(_Z_, _Y_), _$_ = ___[6], _aa_ = ___[1];
        return [0,
                [0, _aa_[1], _aa_[2], _aa_[3]],
                ___[2],
                ___[10],
                ___[4],
                ___[11],
                [0,
                 _$_[15],
                 _$_[16],
                 _$_[1],
                 _$_[17],
                 _$_[18],
                 _$_[19],
                 _$_[5],
                 _$_[6],
                 _$_[8],
                 _$_[7],
                 _$_[9],
                 _$_[11],
                 _$_[10]],
                ___[12],
                ___[13],
                ___[15],
                ___[16],
                ___[17],
                ___[18],
                ___[19],
                ___[7],
                ___[14],
                ___[8],
                ___[20],
                ___[9],
                ___[22],
                ___[23],
                ___[26],
                ___[24],
                ___[25],
                ___[57]];
       }];
   runtime.caml_register_global(147, Graphql_schema, "Graphql_schema");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Graphql_intf = [0];
   runtime.caml_register_global(0, Graphql_intf, "Graphql_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphql
//# unitInfo: Requires: Graphql_schema, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Graphql_schema = global_data.Graphql_schema;
   function message_of_field_error(t){return t;}
   function extensions_of_field_error(t){return 0;}
   var _a_ = [0, message_of_field_error, extensions_of_field_error];
   function bind(t, f){return caml_call1(f, t);}
   function return$0(t){return t;}
   function map(t, f){return caml_call2(Stdlib_Seq[29], f, t);}
   function iter(t, f){return caml_call2(Stdlib_Seq[4], f, t);}
   function close(t){return 0;}
   var
    Stream = [0, map, iter, close],
    Schema =
      caml_call1
       (caml_call1(Graphql_schema[1], [0, return$0, bind, Stream]), _a_),
    Graphql = [0, Schema];
   runtime.caml_register_global(2, Graphql, "Graphql");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
