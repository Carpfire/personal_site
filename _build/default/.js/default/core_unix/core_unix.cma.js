// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Core_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Core_unix = [0],
    Core_unix$0 = [0, Core_unix];
   runtime.caml_register_global(0, Core_unix$0, "Core_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Core_unix_Import = "Core_unix__Import",
    cst_core_unix = "core_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][1], "core_unix/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix_Import);
   var Core_unix_Import = [0];
   runtime.caml_register_global(11, Core_unix_Import, cst_Core_unix_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix__Unix_error
//# unitInfo: Requires: Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Core_unix_Unix_error$0 = "Core_unix__Unix_error",
    cst_E2BIG = "E2BIG",
    cst_EACCES = "EACCES",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EAGAIN = "EAGAIN",
    cst_EALREADY = "EALREADY",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_ECONNRESET = "ECONNRESET",
    cst_EDEADLK = "EDEADLK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISCONN = "EISCONN",
    cst_EISDIR = "EISDIR",
    cst_ELOOP = "ELOOP",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETRESET = "ENETRESET",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENFILE = "ENFILE",
    cst_ENOBUFS = "ENOBUFS",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTCONN = "ENOTCONN",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EOVERFLOW = "EOVERFLOW",
    cst_EPERM = "EPERM",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EPIPE = "EPIPE",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_EUNKNOWNERR = "EUNKNOWNERR",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EXDEV = "EXDEV",
    cst_core_unix$0 = "core_unix",
    cst_e2BIG = "e2BIG",
    cst_eACCES = "eACCES",
    cst_eADDRINUSE = "eADDRINUSE",
    cst_eADDRNOTAVAIL = "eADDRNOTAVAIL",
    cst_eAFNOSUPPORT = "eAFNOSUPPORT",
    cst_eAGAIN = "eAGAIN",
    cst_eALREADY = "eALREADY",
    cst_eBADF = "eBADF",
    cst_eBUSY = "eBUSY",
    cst_eCHILD = "eCHILD",
    cst_eCONNABORTED = "eCONNABORTED",
    cst_eCONNREFUSED = "eCONNREFUSED",
    cst_eCONNRESET = "eCONNRESET",
    cst_eDEADLK = "eDEADLK",
    cst_eDESTADDRREQ = "eDESTADDRREQ",
    cst_eDOM = "eDOM",
    cst_eEXIST = "eEXIST",
    cst_eFAULT = "eFAULT",
    cst_eFBIG = "eFBIG",
    cst_eHOSTDOWN = "eHOSTDOWN",
    cst_eHOSTUNREACH = "eHOSTUNREACH",
    cst_eINPROGRESS = "eINPROGRESS",
    cst_eINTR = "eINTR",
    cst_eINVAL = "eINVAL",
    cst_eIO = "eIO",
    cst_eISCONN = "eISCONN",
    cst_eISDIR = "eISDIR",
    cst_eLOOP = "eLOOP",
    cst_eMFILE = "eMFILE",
    cst_eMLINK = "eMLINK",
    cst_eMSGSIZE = "eMSGSIZE",
    cst_eNAMETOOLONG = "eNAMETOOLONG",
    cst_eNETDOWN = "eNETDOWN",
    cst_eNETRESET = "eNETRESET",
    cst_eNETUNREACH = "eNETUNREACH",
    cst_eNFILE = "eNFILE",
    cst_eNOBUFS = "eNOBUFS",
    cst_eNODEV = "eNODEV",
    cst_eNOENT = "eNOENT",
    cst_eNOEXEC = "eNOEXEC",
    cst_eNOLCK = "eNOLCK",
    cst_eNOMEM = "eNOMEM",
    cst_eNOPROTOOPT = "eNOPROTOOPT",
    cst_eNOSPC = "eNOSPC",
    cst_eNOSYS = "eNOSYS",
    cst_eNOTCONN = "eNOTCONN",
    cst_eNOTDIR = "eNOTDIR",
    cst_eNOTEMPTY = "eNOTEMPTY",
    cst_eNOTSOCK = "eNOTSOCK",
    cst_eNOTTY = "eNOTTY",
    cst_eNXIO = "eNXIO",
    cst_eOPNOTSUPP = "eOPNOTSUPP",
    cst_eOVERFLOW = "eOVERFLOW",
    cst_ePERM = "ePERM",
    cst_ePFNOSUPPORT = "ePFNOSUPPORT",
    cst_ePIPE = "ePIPE",
    cst_ePROTONOSUPPORT = "ePROTONOSUPPORT",
    cst_ePROTOTYPE = "ePROTOTYPE",
    cst_eRANGE = "eRANGE",
    cst_eROFS = "eROFS",
    cst_eSHUTDOWN = "eSHUTDOWN",
    cst_eSOCKTNOSUPPORT = "eSOCKTNOSUPPORT",
    cst_eSPIPE = "eSPIPE",
    cst_eSRCH = "eSRCH",
    cst_eTIMEDOUT = "eTIMEDOUT",
    cst_eTOOMANYREFS = "eTOOMANYREFS",
    cst_eUNKNOWNERR = "eUNKNOWNERR",
    cst_eWOULDBLOCK = "eWOULDBLOCK",
    cst_eXDEV = "eXDEV",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "core_unix/src/unix_error.ml.error",
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix_Unix_error$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "core_unix/src/unix_error.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix$0, "unix_error.ml");
   var
    _a_ = [0, cst_E2BIG],
    _b_ = [0, cst_EACCES],
    _c_ = [0, cst_EAGAIN],
    _d_ = [0, cst_EBADF],
    _e_ = [0, cst_EBUSY],
    _f_ = [0, cst_ECHILD],
    _g_ = [0, cst_EDEADLK],
    _h_ = [0, cst_EDOM],
    _i_ = [0, cst_EEXIST],
    _j_ = [0, cst_EFAULT],
    _k_ = [0, cst_EFBIG],
    _l_ = [0, cst_EINTR],
    _m_ = [0, cst_EINVAL],
    _n_ = [0, cst_EIO],
    _o_ = [0, cst_EISDIR],
    _p_ = [0, cst_EMFILE],
    _q_ = [0, cst_EMLINK],
    _r_ = [0, cst_ENAMETOOLONG],
    _s_ = [0, cst_ENFILE],
    _t_ = [0, cst_ENODEV],
    _u_ = [0, cst_ENOENT],
    _v_ = [0, cst_ENOEXEC],
    _w_ = [0, cst_ENOLCK],
    _x_ = [0, cst_ENOMEM],
    _y_ = [0, cst_ENOSPC],
    _z_ = [0, cst_ENOSYS],
    _A_ = [0, cst_ENOTDIR],
    _B_ = [0, cst_ENOTEMPTY],
    _C_ = [0, cst_ENOTTY],
    _D_ = [0, cst_ENXIO],
    _E_ = [0, cst_EPERM],
    _F_ = [0, cst_EPIPE],
    _G_ = [0, cst_ERANGE],
    _H_ = [0, cst_EROFS],
    _I_ = [0, cst_ESPIPE],
    _J_ = [0, cst_ESRCH],
    _K_ = [0, cst_EXDEV],
    _L_ = [0, cst_EWOULDBLOCK],
    _M_ = [0, cst_EINPROGRESS],
    _N_ = [0, cst_EALREADY],
    _O_ = [0, cst_ENOTSOCK],
    _P_ = [0, cst_EDESTADDRREQ],
    _Q_ = [0, cst_EMSGSIZE],
    _R_ = [0, cst_EPROTOTYPE],
    _S_ = [0, cst_ENOPROTOOPT],
    _T_ = [0, cst_EPROTONOSUPPORT],
    _U_ = [0, cst_ESOCKTNOSUPPORT],
    _V_ = [0, cst_EOPNOTSUPP],
    _W_ = [0, cst_EPFNOSUPPORT],
    _X_ = [0, cst_EAFNOSUPPORT],
    _Y_ = [0, cst_EADDRINUSE],
    _Z_ = [0, cst_EADDRNOTAVAIL],
    ___ = [0, cst_ENETDOWN],
    _$_ = [0, cst_ENETUNREACH],
    _aa_ = [0, cst_ENETRESET],
    _ab_ = [0, cst_ECONNABORTED],
    _ac_ = [0, cst_ECONNRESET],
    _ad_ = [0, cst_ENOBUFS],
    _ae_ = [0, cst_EISCONN],
    _af_ = [0, cst_ENOTCONN],
    _ag_ = [0, cst_ESHUTDOWN],
    _ah_ = [0, cst_ETOOMANYREFS],
    _ai_ = [0, cst_ETIMEDOUT],
    _aj_ = [0, cst_ECONNREFUSED],
    _ak_ = [0, cst_EHOSTDOWN],
    _al_ = [0, cst_EHOSTUNREACH],
    _am_ = [0, cst_ELOOP],
    _an_ = [0, cst_EOVERFLOW],
    _ao_ = [0, cst_EUNKNOWNERR],
    cst_core_unix = cst_core_unix$0,
    cst_Core_unix_Unix_error = cst_Core_unix_Unix_error$0;
   function error_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _ar_ = sexp_005[1], _as_ = caml_string_compare(_ar_, cst_e2BIG);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       I:
                                       {
                                        J:
                                        {
                                         K:
                                         {
                                          L:
                                          {
                                           M:
                                           {
                                            N:
                                            {
                                             O:
                                             {
                                              P:
                                              {
                                               Q:
                                               {
                                                R:
                                                {
                                                 S:
                                                 {
                                                  T:
                                                  {
                                                   U:
                                                   {
                                                    V:
                                                    {
                                                     W:
                                                     {
                                                      X:
                                                      {
                                                       Y:
                                                       {
                                                        Z:
                                                        {
                                                         _:
                                                         {
                                                          $:
                                                          {
                                                           aa:
                                                           {
                                                            ab:
                                                            {
                                                             ac:
                                                             {
                                                              ad:
                                                              {
                                                               ae:
                                                               {
                                                                af:
                                                                {
                                                                 ag:
                                                                 {
                                                                  ah:
                                                                  {
                                                                   ai:
                                                                   {
                                                                    aj:
                                                                    {
                                                                     ak:
                                                                     {
                                                                      al:
                                                                      {
                                                                       am:
                                                                       {
                                                                        an:
                                                                        {
                                                                         ao:
                                                                         {
                                                                          if(0 <= _as_){
                                                                           if(0 >= _as_) break i;
                                                                           var _at_ = caml_string_compare(_ar_, cst_eNFILE);
                                                                           if(0 <= _at_){
                                                                            if(0 >= _at_) break Q;
                                                                            var _au_ = caml_string_compare(_ar_, cst_eOVERFLOW);
                                                                            if(0 <= _au_){
                                                                             if(0 >= _au_) break ao;
                                                                             var _av_ = caml_string_compare(_ar_, cst_eSOCKTNOSUPPORT);
                                                                             if(0 <= _av_){
                                                                              if(0 >= _av_) break an;
                                                                              if(! caml_string_notequal(_ar_, cst_eSPIPE)) break am;
                                                                              if(! caml_string_notequal(_ar_, cst_eSRCH)) break al;
                                                                              if(! caml_string_notequal(_ar_, cst_eTIMEDOUT)) break ak;
                                                                              if(! caml_string_notequal(_ar_, cst_eTOOMANYREFS)) break aj;
                                                                              if(! caml_string_notequal(_ar_, cst_eUNKNOWNERR)) break ai;
                                                                              if(! caml_string_notequal(_ar_, cst_eWOULDBLOCK)) break ah;
                                                                              if(caml_string_notequal(_ar_, cst_eXDEV)) break a;
                                                                              break ag;
                                                                             }
                                                                             if(! caml_string_notequal(_ar_, cst_ePERM)) break af;
                                                                             if(! caml_string_notequal(_ar_, cst_ePFNOSUPPORT)) break ae;
                                                                             if(! caml_string_notequal(_ar_, cst_ePIPE)) break ad;
                                                                             if(! caml_string_notequal(_ar_, cst_ePROTONOSUPPORT))
                                                                              break ac;
                                                                             if(! caml_string_notequal(_ar_, cst_ePROTOTYPE)) break ab;
                                                                             if(! caml_string_notequal(_ar_, cst_eRANGE)) break aa;
                                                                             if(! caml_string_notequal(_ar_, cst_eROFS)) break $;
                                                                             if(caml_string_notequal(_ar_, cst_eSHUTDOWN)) break a;
                                                                             break _;
                                                                            }
                                                                            var _aw_ = caml_string_compare(_ar_, cst_eNOSYS);
                                                                            if(0 <= _aw_){
                                                                             if(0 >= _aw_) break Y;
                                                                             if(! caml_string_notequal(_ar_, cst_eNOTCONN)) break X;
                                                                             if(! caml_string_notequal(_ar_, cst_eNOTDIR)) break W;
                                                                             if(! caml_string_notequal(_ar_, cst_eNOTEMPTY)) break V;
                                                                             if(! caml_string_notequal(_ar_, cst_eNOTSOCK)) break U;
                                                                             if(! caml_string_notequal(_ar_, cst_eNOTTY)) break T;
                                                                             if(! caml_string_notequal(_ar_, cst_eNXIO)) break S;
                                                                             if(caml_string_notequal(_ar_, cst_eOPNOTSUPP)) break a;
                                                                             break R;
                                                                            }
                                                                            if(! caml_string_notequal(_ar_, cst_eNOBUFS)) break P;
                                                                            if(! caml_string_notequal(_ar_, cst_eNODEV)) break O;
                                                                            if(! caml_string_notequal(_ar_, cst_eNOENT)) break N;
                                                                            if(! caml_string_notequal(_ar_, cst_eNOEXEC)) break M;
                                                                            if(! caml_string_notequal(_ar_, cst_eNOLCK)) break L;
                                                                            if(! caml_string_notequal(_ar_, cst_eNOMEM)) break K;
                                                                            if(! caml_string_notequal(_ar_, cst_eNOPROTOOPT)) break J;
                                                                            if(caml_string_notequal(_ar_, cst_eNOSPC)) break a;
                                                                            break Z;
                                                                           }
                                                                           var _ax_ = caml_string_compare(_ar_, cst_eFBIG);
                                                                           if(0 > _ax_){
                                                                            var _az_ = caml_string_compare(_ar_, cst_eCHILD);
                                                                            if(0 <= _az_){
                                                                             if(0 >= _az_) break q;
                                                                             if(! caml_string_notequal(_ar_, cst_eCONNABORTED)) break p;
                                                                             if(! caml_string_notequal(_ar_, cst_eCONNREFUSED)) break o;
                                                                             if(! caml_string_notequal(_ar_, cst_eCONNRESET)) break n;
                                                                             if(! caml_string_notequal(_ar_, cst_eDEADLK)) break m;
                                                                             if(! caml_string_notequal(_ar_, cst_eDESTADDRREQ)) break l;
                                                                             if(! caml_string_notequal(_ar_, cst_eDOM)) break k;
                                                                             if(! caml_string_notequal(_ar_, cst_eEXIST)) break j;
                                                                             if(caml_string_notequal(_ar_, cst_eFAULT)) break a;
                                                                             break I;
                                                                            }
                                                                            if(! caml_string_notequal(_ar_, cst_eACCES)) break h;
                                                                            if(! caml_string_notequal(_ar_, cst_eADDRINUSE)) break g;
                                                                            if(! caml_string_notequal(_ar_, cst_eADDRNOTAVAIL)) break f;
                                                                            if(! caml_string_notequal(_ar_, cst_eAFNOSUPPORT)) break e;
                                                                            if(! caml_string_notequal(_ar_, cst_eAGAIN)) break d;
                                                                            if(! caml_string_notequal(_ar_, cst_eALREADY)) break c;
                                                                            if(! caml_string_notequal(_ar_, cst_eBADF)) break b;
                                                                            if(caml_string_notequal(_ar_, cst_eBUSY)) break a;
                                                                            break r;
                                                                           }
                                                                           if(0 >= _ax_) break z;
                                                                           var _ay_ = caml_string_compare(_ar_, cst_eLOOP);
                                                                           if(0 > _ay_){
                                                                            if(! caml_string_notequal(_ar_, cst_eHOSTDOWN)) break y;
                                                                            if(! caml_string_notequal(_ar_, cst_eHOSTUNREACH)) break x;
                                                                            if(! caml_string_notequal(_ar_, cst_eINPROGRESS)) break w;
                                                                            if(! caml_string_notequal(_ar_, cst_eINTR)) break v;
                                                                            if(! caml_string_notequal(_ar_, cst_eINVAL)) break u;
                                                                            if(! caml_string_notequal(_ar_, cst_eIO)) break t;
                                                                            if(! caml_string_notequal(_ar_, cst_eISCONN)) break s;
                                                                            if(caml_string_notequal(_ar_, cst_eISDIR)) break a;
                                                                            break H;
                                                                           }
                                                                           if(0 >= _ay_) break G;
                                                                           if(! caml_string_notequal(_ar_, cst_eMFILE)) break F;
                                                                           if(! caml_string_notequal(_ar_, cst_eMLINK)) break E;
                                                                           if(! caml_string_notequal(_ar_, cst_eMSGSIZE)) break D;
                                                                           if(! caml_string_notequal(_ar_, cst_eNAMETOOLONG)) break C;
                                                                           if(! caml_string_notequal(_ar_, cst_eNETDOWN)) break B;
                                                                           if(! caml_string_notequal(_ar_, cst_eNETRESET)) break A;
                                                                           if(caml_string_notequal(_ar_, cst_eNETUNREACH)) break a;
                                                                          }
                                                                          else{
                                                                           var _aA_ = caml_string_compare(_ar_, cst_ENETUNREACH);
                                                                           if(0 > _aA_){
                                                                            var _aE_ = caml_string_compare(_ar_, cst_EFAULT);
                                                                            if(0 <= _aE_){
                                                                             if(0 >= _aE_) break I;
                                                                             var _aF_ = caml_string_compare(_ar_, cst_EISDIR);
                                                                             if(0 <= _aF_){
                                                                              if(0 >= _aF_) break H;
                                                                              if(! caml_string_notequal(_ar_, cst_ELOOP)) break G;
                                                                              if(! caml_string_notequal(_ar_, cst_EMFILE)) break F;
                                                                              if(! caml_string_notequal(_ar_, cst_EMLINK)) break E;
                                                                              if(! caml_string_notequal(_ar_, cst_EMSGSIZE)) break D;
                                                                              if(! caml_string_notequal(_ar_, cst_ENAMETOOLONG)) break C;
                                                                              if(! caml_string_notequal(_ar_, cst_ENETDOWN)) break B;
                                                                              if(caml_string_notequal(_ar_, cst_ENETRESET)) break a;
                                                                              break A;
                                                                             }
                                                                             if(! caml_string_notequal(_ar_, cst_EFBIG)) break z;
                                                                             if(! caml_string_notequal(_ar_, cst_EHOSTDOWN)) break y;
                                                                             if(! caml_string_notequal(_ar_, cst_EHOSTUNREACH)) break x;
                                                                             if(! caml_string_notequal(_ar_, cst_EINPROGRESS)) break w;
                                                                             if(! caml_string_notequal(_ar_, cst_EINTR)) break v;
                                                                             if(! caml_string_notequal(_ar_, cst_EINVAL)) break u;
                                                                             if(! caml_string_notequal(_ar_, cst_EIO)) break t;
                                                                             if(caml_string_notequal(_ar_, cst_EISCONN)) break a;
                                                                             break s;
                                                                            }
                                                                            var _aG_ = caml_string_compare(_ar_, cst_EBUSY);
                                                                            if(0 <= _aG_){
                                                                             if(0 >= _aG_) break r;
                                                                             if(! caml_string_notequal(_ar_, cst_ECHILD)) break q;
                                                                             if(! caml_string_notequal(_ar_, cst_ECONNABORTED)) break p;
                                                                             if(! caml_string_notequal(_ar_, cst_ECONNREFUSED)) break o;
                                                                             if(! caml_string_notequal(_ar_, cst_ECONNRESET)) break n;
                                                                             if(! caml_string_notequal(_ar_, cst_EDEADLK)) break m;
                                                                             if(! caml_string_notequal(_ar_, cst_EDESTADDRREQ)) break l;
                                                                             if(! caml_string_notequal(_ar_, cst_EDOM)) break k;
                                                                             if(caml_string_notequal(_ar_, cst_EEXIST)) break a;
                                                                             break j;
                                                                            }
                                                                            if(! caml_string_notequal(_ar_, cst_E2BIG)) break i;
                                                                            if(! caml_string_notequal(_ar_, cst_EACCES)) break h;
                                                                            if(! caml_string_notequal(_ar_, cst_EADDRINUSE)) break g;
                                                                            if(! caml_string_notequal(_ar_, cst_EADDRNOTAVAIL)) break f;
                                                                            if(! caml_string_notequal(_ar_, cst_EAFNOSUPPORT)) break e;
                                                                            if(! caml_string_notequal(_ar_, cst_EAGAIN)) break d;
                                                                            if(! caml_string_notequal(_ar_, cst_EALREADY)) break c;
                                                                            if(caml_string_notequal(_ar_, cst_EBADF)) break a;
                                                                            break b;
                                                                           }
                                                                           if(0 < _aA_){
                                                                            var _aB_ = caml_string_compare(_ar_, cst_EOVERFLOW);
                                                                            if(0 <= _aB_){
                                                                             if(0 >= _aB_) break ao;
                                                                             var _aC_ = caml_string_compare(_ar_, cst_ESOCKTNOSUPPORT);
                                                                             if(0 <= _aC_){
                                                                              if(0 >= _aC_) break an;
                                                                              if(! caml_string_notequal(_ar_, cst_ESPIPE)) break am;
                                                                              if(! caml_string_notequal(_ar_, cst_ESRCH)) break al;
                                                                              if(! caml_string_notequal(_ar_, cst_ETIMEDOUT)) break ak;
                                                                              if(! caml_string_notequal(_ar_, cst_ETOOMANYREFS)) break aj;
                                                                              if(! caml_string_notequal(_ar_, cst_EUNKNOWNERR)) break ai;
                                                                              if(! caml_string_notequal(_ar_, cst_EWOULDBLOCK)) break ah;
                                                                              if(caml_string_notequal(_ar_, cst_EXDEV)) break a;
                                                                              break ag;
                                                                             }
                                                                             if(! caml_string_notequal(_ar_, cst_EPERM)) break af;
                                                                             if(! caml_string_notequal(_ar_, cst_EPFNOSUPPORT)) break ae;
                                                                             if(! caml_string_notequal(_ar_, cst_EPIPE)) break ad;
                                                                             if(! caml_string_notequal(_ar_, cst_EPROTONOSUPPORT))
                                                                              break ac;
                                                                             if(! caml_string_notequal(_ar_, cst_EPROTOTYPE)) break ab;
                                                                             if(! caml_string_notequal(_ar_, cst_ERANGE)) break aa;
                                                                             if(! caml_string_notequal(_ar_, cst_EROFS)) break $;
                                                                             if(caml_string_notequal(_ar_, cst_ESHUTDOWN)) break a;
                                                                             break _;
                                                                            }
                                                                            var _aD_ = caml_string_compare(_ar_, cst_ENOSPC);
                                                                            if(0 <= _aD_){
                                                                             if(0 >= _aD_) break Z;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOSYS)) break Y;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOTCONN)) break X;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOTDIR)) break W;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOTEMPTY)) break V;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOTSOCK)) break U;
                                                                             if(! caml_string_notequal(_ar_, cst_ENOTTY)) break T;
                                                                             if(! caml_string_notequal(_ar_, cst_ENXIO)) break S;
                                                                             if(caml_string_notequal(_ar_, cst_EOPNOTSUPP)) break a;
                                                                             break R;
                                                                            }
                                                                            if(! caml_string_notequal(_ar_, cst_ENFILE)) break Q;
                                                                            if(! caml_string_notequal(_ar_, cst_ENOBUFS)) break P;
                                                                            if(! caml_string_notequal(_ar_, cst_ENODEV)) break O;
                                                                            if(! caml_string_notequal(_ar_, cst_ENOENT)) break N;
                                                                            if(! caml_string_notequal(_ar_, cst_ENOEXEC)) break M;
                                                                            if(! caml_string_notequal(_ar_, cst_ENOLCK)) break L;
                                                                            if(! caml_string_notequal(_ar_, cst_ENOMEM)) break K;
                                                                            if(caml_string_notequal(_ar_, cst_ENOPROTOOPT)) break a;
                                                                            break J;
                                                                           }
                                                                          }
                                                                          return 53;
                                                                         }
                                                                         return 67;
                                                                        }
                                                                        return 46;
                                                                       }
                                                                       return 34;
                                                                      }
                                                                      return 35;
                                                                     }
                                                                     return 62;
                                                                    }
                                                                    return 61;
                                                                   }
                                                                   return caml_call2
                                                                           (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
                                                                  }
                                                                  return 37;
                                                                 }
                                                                 return 36;
                                                                }
                                                                return 30;
                                                               }
                                                               return 48;
                                                              }
                                                              return 31;
                                                             }
                                                             return 45;
                                                            }
                                                            return 43;
                                                           }
                                                           return 32;
                                                          }
                                                          return 33;
                                                         }
                                                         return 60;
                                                        }
                                                        return 24;
                                                       }
                                                       return 25;
                                                      }
                                                      return 59;
                                                     }
                                                     return 26;
                                                    }
                                                    return 27;
                                                   }
                                                   return 40;
                                                  }
                                                  return 28;
                                                 }
                                                 return 29;
                                                }
                                                return 47;
                                               }
                                               return 18;
                                              }
                                              return 57;
                                             }
                                             return 19;
                                            }
                                            return 20;
                                           }
                                           return 21;
                                          }
                                          return 22;
                                         }
                                         return 23;
                                        }
                                        return 44;
                                       }
                                       return 9;
                                      }
                                      return 14;
                                     }
                                     return 66;
                                    }
                                    return 15;
                                   }
                                   return 16;
                                  }
                                  return 42;
                                 }
                                 return 17;
                                }
                                return 52;
                               }
                               return 54;
                              }
                              return 10;
                             }
                             return 64;
                            }
                            return 65;
                           }
                           return 38;
                          }
                          return 11;
                         }
                         return 12;
                        }
                        return 13;
                       }
                       return 58;
                      }
                      return 4;
                     }
                     return 5;
                    }
                    return 55;
                   }
                   return 63;
                  }
                  return 56;
                 }
                 return 6;
                }
                return 41;
               }
               return 7;
              }
              return 8;
             }
             return 0;
            }
            return 1;
           }
           return 50;
          }
          return 51;
         }
         return 49;
        }
        return 2;
       }
       return 39;
      }
      return 3;
     }
     var _aH_ = sexp_005[1];
     if(! _aH_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _aI_ = _aH_[1];
     if(0 !== _aI_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var tag_006 = _aI_[1], _aJ_ = caml_string_compare(tag_006, cst_e2BIG);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      I:
                                      {
                                       J:
                                       {
                                        K:
                                        {
                                         L:
                                         {
                                          M:
                                          {
                                           N:
                                           {
                                            O:
                                            {
                                             P:
                                             {
                                              Q:
                                              {
                                               R:
                                               {
                                                S:
                                                {
                                                 T:
                                                 {
                                                  U:
                                                  {
                                                   V:
                                                   {
                                                    W:
                                                    {
                                                     X:
                                                     {
                                                      Y:
                                                      {
                                                       Z:
                                                       {
                                                        _:
                                                        {
                                                         $:
                                                         {
                                                          aa:
                                                          {
                                                           ab:
                                                           {
                                                            ac:
                                                            {
                                                             ad:
                                                             {
                                                              ae:
                                                              {
                                                               af:
                                                               {
                                                                ag:
                                                                {
                                                                 ah:
                                                                 {
                                                                  ai:
                                                                  {
                                                                   aj:
                                                                   {
                                                                    ak:
                                                                    {
                                                                     al:
                                                                     {
                                                                      am:
                                                                      {
                                                                       an:
                                                                       {
                                                                        ao:
                                                                        {
                                                                         if(0 <= _aJ_){
                                                                          if(0 >= _aJ_) break i;
                                                                          var _aK_ = caml_string_compare(tag_006, cst_eNFILE);
                                                                          if(0 <= _aK_){
                                                                           if(0 >= _aK_) break Q;
                                                                           var _aL_ = caml_string_compare(tag_006, cst_eOVERFLOW);
                                                                           if(0 <= _aL_){
                                                                            if(0 >= _aL_) break ao;
                                                                            var
                                                                             _aM_ = caml_string_compare(tag_006, cst_eSOCKTNOSUPPORT);
                                                                            if(0 <= _aM_){
                                                                             if(0 >= _aM_) break an;
                                                                             if(! caml_string_notequal(tag_006, cst_eSPIPE)) break am;
                                                                             if(! caml_string_notequal(tag_006, cst_eSRCH)) break al;
                                                                             if(! caml_string_notequal(tag_006, cst_eTIMEDOUT)) break ak;
                                                                             if(! caml_string_notequal(tag_006, cst_eTOOMANYREFS))
                                                                              break aj;
                                                                             if(! caml_string_notequal(tag_006, cst_eUNKNOWNERR))
                                                                              break ai;
                                                                             if(! caml_string_notequal(tag_006, cst_eWOULDBLOCK))
                                                                              break ah;
                                                                             if(caml_string_notequal(tag_006, cst_eXDEV)) break a;
                                                                             break ag;
                                                                            }
                                                                            if(! caml_string_notequal(tag_006, cst_ePERM)) break af;
                                                                            if(! caml_string_notequal(tag_006, cst_ePFNOSUPPORT))
                                                                             break ae;
                                                                            if(! caml_string_notequal(tag_006, cst_ePIPE)) break ad;
                                                                            if(! caml_string_notequal(tag_006, cst_ePROTONOSUPPORT))
                                                                             break ac;
                                                                            if(! caml_string_notequal(tag_006, cst_ePROTOTYPE))
                                                                             break ab;
                                                                            if(! caml_string_notequal(tag_006, cst_eRANGE)) break aa;
                                                                            if(! caml_string_notequal(tag_006, cst_eROFS)) break $;
                                                                            if(caml_string_notequal(tag_006, cst_eSHUTDOWN)) break a;
                                                                            break _;
                                                                           }
                                                                           var _aN_ = caml_string_compare(tag_006, cst_eNOSYS);
                                                                           if(0 <= _aN_){
                                                                            if(0 >= _aN_) break Y;
                                                                            if(! caml_string_notequal(tag_006, cst_eNOTCONN)) break X;
                                                                            if(! caml_string_notequal(tag_006, cst_eNOTDIR)) break W;
                                                                            if(! caml_string_notequal(tag_006, cst_eNOTEMPTY)) break V;
                                                                            if(! caml_string_notequal(tag_006, cst_eNOTSOCK)) break U;
                                                                            if(! caml_string_notequal(tag_006, cst_eNOTTY)) break T;
                                                                            if(! caml_string_notequal(tag_006, cst_eNXIO)) break S;
                                                                            if(caml_string_notequal(tag_006, cst_eOPNOTSUPP)) break a;
                                                                            break R;
                                                                           }
                                                                           if(! caml_string_notequal(tag_006, cst_eNOBUFS)) break P;
                                                                           if(! caml_string_notequal(tag_006, cst_eNODEV)) break O;
                                                                           if(! caml_string_notequal(tag_006, cst_eNOENT)) break N;
                                                                           if(! caml_string_notequal(tag_006, cst_eNOEXEC)) break M;
                                                                           if(! caml_string_notequal(tag_006, cst_eNOLCK)) break L;
                                                                           if(! caml_string_notequal(tag_006, cst_eNOMEM)) break K;
                                                                           if(! caml_string_notequal(tag_006, cst_eNOPROTOOPT))
                                                                            break J;
                                                                           if(caml_string_notequal(tag_006, cst_eNOSPC)) break a;
                                                                           break Z;
                                                                          }
                                                                          var _aO_ = caml_string_compare(tag_006, cst_eFBIG);
                                                                          if(0 > _aO_){
                                                                           var _aQ_ = caml_string_compare(tag_006, cst_eCHILD);
                                                                           if(0 <= _aQ_){
                                                                            if(0 >= _aQ_) break q;
                                                                            if(! caml_string_notequal(tag_006, cst_eCONNABORTED))
                                                                             break p;
                                                                            if(! caml_string_notequal(tag_006, cst_eCONNREFUSED))
                                                                             break o;
                                                                            if(! caml_string_notequal(tag_006, cst_eCONNRESET)) break n;
                                                                            if(! caml_string_notequal(tag_006, cst_eDEADLK)) break m;
                                                                            if(! caml_string_notequal(tag_006, cst_eDESTADDRREQ))
                                                                             break l;
                                                                            if(! caml_string_notequal(tag_006, cst_eDOM)) break k;
                                                                            if(! caml_string_notequal(tag_006, cst_eEXIST)) break j;
                                                                            if(caml_string_notequal(tag_006, cst_eFAULT)) break a;
                                                                            break I;
                                                                           }
                                                                           if(! caml_string_notequal(tag_006, cst_eACCES)) break h;
                                                                           if(! caml_string_notequal(tag_006, cst_eADDRINUSE)) break g;
                                                                           if(! caml_string_notequal(tag_006, cst_eADDRNOTAVAIL))
                                                                            break f;
                                                                           if(! caml_string_notequal(tag_006, cst_eAFNOSUPPORT))
                                                                            break e;
                                                                           if(! caml_string_notequal(tag_006, cst_eAGAIN)) break d;
                                                                           if(! caml_string_notequal(tag_006, cst_eALREADY)) break c;
                                                                           if(! caml_string_notequal(tag_006, cst_eBADF)) break b;
                                                                           if(caml_string_notequal(tag_006, cst_eBUSY)) break a;
                                                                           break r;
                                                                          }
                                                                          if(0 >= _aO_) break z;
                                                                          var _aP_ = caml_string_compare(tag_006, cst_eLOOP);
                                                                          if(0 > _aP_){
                                                                           if(! caml_string_notequal(tag_006, cst_eHOSTDOWN)) break y;
                                                                           if(! caml_string_notequal(tag_006, cst_eHOSTUNREACH))
                                                                            break x;
                                                                           if(! caml_string_notequal(tag_006, cst_eINPROGRESS))
                                                                            break w;
                                                                           if(! caml_string_notequal(tag_006, cst_eINTR)) break v;
                                                                           if(! caml_string_notequal(tag_006, cst_eINVAL)) break u;
                                                                           if(! caml_string_notequal(tag_006, cst_eIO)) break t;
                                                                           if(! caml_string_notequal(tag_006, cst_eISCONN)) break s;
                                                                           if(caml_string_notequal(tag_006, cst_eISDIR)) break a;
                                                                           break H;
                                                                          }
                                                                          if(0 >= _aP_) break G;
                                                                          if(! caml_string_notequal(tag_006, cst_eMFILE)) break F;
                                                                          if(! caml_string_notequal(tag_006, cst_eMLINK)) break E;
                                                                          if(! caml_string_notequal(tag_006, cst_eMSGSIZE)) break D;
                                                                          if(! caml_string_notequal(tag_006, cst_eNAMETOOLONG))
                                                                           break C;
                                                                          if(! caml_string_notequal(tag_006, cst_eNETDOWN)) break B;
                                                                          if(! caml_string_notequal(tag_006, cst_eNETRESET)) break A;
                                                                          if(caml_string_notequal(tag_006, cst_eNETUNREACH)) break a;
                                                                         }
                                                                         else{
                                                                          var _aR_ = caml_string_compare(tag_006, cst_ENETUNREACH);
                                                                          if(0 > _aR_){
                                                                           var _aV_ = caml_string_compare(tag_006, cst_EFAULT);
                                                                           if(0 <= _aV_){
                                                                            if(0 >= _aV_) break I;
                                                                            var _aW_ = caml_string_compare(tag_006, cst_EISDIR);
                                                                            if(0 <= _aW_){
                                                                             if(0 >= _aW_) break H;
                                                                             if(! caml_string_notequal(tag_006, cst_ELOOP)) break G;
                                                                             if(! caml_string_notequal(tag_006, cst_EMFILE)) break F;
                                                                             if(! caml_string_notequal(tag_006, cst_EMLINK)) break E;
                                                                             if(! caml_string_notequal(tag_006, cst_EMSGSIZE)) break D;
                                                                             if(! caml_string_notequal(tag_006, cst_ENAMETOOLONG))
                                                                              break C;
                                                                             if(! caml_string_notequal(tag_006, cst_ENETDOWN)) break B;
                                                                             if(caml_string_notequal(tag_006, cst_ENETRESET)) break a;
                                                                             break A;
                                                                            }
                                                                            if(! caml_string_notequal(tag_006, cst_EFBIG)) break z;
                                                                            if(! caml_string_notequal(tag_006, cst_EHOSTDOWN)) break y;
                                                                            if(! caml_string_notequal(tag_006, cst_EHOSTUNREACH))
                                                                             break x;
                                                                            if(! caml_string_notequal(tag_006, cst_EINPROGRESS))
                                                                             break w;
                                                                            if(! caml_string_notequal(tag_006, cst_EINTR)) break v;
                                                                            if(! caml_string_notequal(tag_006, cst_EINVAL)) break u;
                                                                            if(! caml_string_notequal(tag_006, cst_EIO)) break t;
                                                                            if(caml_string_notequal(tag_006, cst_EISCONN)) break a;
                                                                            break s;
                                                                           }
                                                                           var _aX_ = caml_string_compare(tag_006, cst_EBUSY);
                                                                           if(0 <= _aX_){
                                                                            if(0 >= _aX_) break r;
                                                                            if(! caml_string_notequal(tag_006, cst_ECHILD)) break q;
                                                                            if(! caml_string_notequal(tag_006, cst_ECONNABORTED))
                                                                             break p;
                                                                            if(! caml_string_notequal(tag_006, cst_ECONNREFUSED))
                                                                             break o;
                                                                            if(! caml_string_notequal(tag_006, cst_ECONNRESET)) break n;
                                                                            if(! caml_string_notequal(tag_006, cst_EDEADLK)) break m;
                                                                            if(! caml_string_notequal(tag_006, cst_EDESTADDRREQ))
                                                                             break l;
                                                                            if(! caml_string_notequal(tag_006, cst_EDOM)) break k;
                                                                            if(caml_string_notequal(tag_006, cst_EEXIST)) break a;
                                                                            break j;
                                                                           }
                                                                           if(! caml_string_notequal(tag_006, cst_E2BIG)) break i;
                                                                           if(! caml_string_notequal(tag_006, cst_EACCES)) break h;
                                                                           if(! caml_string_notequal(tag_006, cst_EADDRINUSE)) break g;
                                                                           if(! caml_string_notequal(tag_006, cst_EADDRNOTAVAIL))
                                                                            break f;
                                                                           if(! caml_string_notequal(tag_006, cst_EAFNOSUPPORT))
                                                                            break e;
                                                                           if(! caml_string_notequal(tag_006, cst_EAGAIN)) break d;
                                                                           if(! caml_string_notequal(tag_006, cst_EALREADY)) break c;
                                                                           if(caml_string_notequal(tag_006, cst_EBADF)) break a;
                                                                           break b;
                                                                          }
                                                                          if(0 < _aR_){
                                                                           var _aS_ = caml_string_compare(tag_006, cst_EOVERFLOW);
                                                                           if(0 <= _aS_){
                                                                            if(0 >= _aS_) break ao;
                                                                            var
                                                                             _aT_ = caml_string_compare(tag_006, cst_ESOCKTNOSUPPORT);
                                                                            if(0 <= _aT_){
                                                                             if(0 >= _aT_) break an;
                                                                             if(! caml_string_notequal(tag_006, cst_ESPIPE)) break am;
                                                                             if(! caml_string_notequal(tag_006, cst_ESRCH)) break al;
                                                                             if(! caml_string_notequal(tag_006, cst_ETIMEDOUT)) break ak;
                                                                             if(! caml_string_notequal(tag_006, cst_ETOOMANYREFS))
                                                                              break aj;
                                                                             if(! caml_string_notequal(tag_006, cst_EUNKNOWNERR))
                                                                              break ai;
                                                                             if(! caml_string_notequal(tag_006, cst_EWOULDBLOCK))
                                                                              break ah;
                                                                             if(caml_string_notequal(tag_006, cst_EXDEV)) break a;
                                                                             break ag;
                                                                            }
                                                                            if(! caml_string_notequal(tag_006, cst_EPERM)) break af;
                                                                            if(! caml_string_notequal(tag_006, cst_EPFNOSUPPORT))
                                                                             break ae;
                                                                            if(! caml_string_notequal(tag_006, cst_EPIPE)) break ad;
                                                                            if(! caml_string_notequal(tag_006, cst_EPROTONOSUPPORT))
                                                                             break ac;
                                                                            if(! caml_string_notequal(tag_006, cst_EPROTOTYPE))
                                                                             break ab;
                                                                            if(! caml_string_notequal(tag_006, cst_ERANGE)) break aa;
                                                                            if(! caml_string_notequal(tag_006, cst_EROFS)) break $;
                                                                            if(caml_string_notequal(tag_006, cst_ESHUTDOWN)) break a;
                                                                            break _;
                                                                           }
                                                                           var _aU_ = caml_string_compare(tag_006, cst_ENOSPC);
                                                                           if(0 <= _aU_){
                                                                            if(0 >= _aU_) break Z;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOSYS)) break Y;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOTCONN)) break X;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOTDIR)) break W;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOTEMPTY)) break V;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOTSOCK)) break U;
                                                                            if(! caml_string_notequal(tag_006, cst_ENOTTY)) break T;
                                                                            if(! caml_string_notequal(tag_006, cst_ENXIO)) break S;
                                                                            if(caml_string_notequal(tag_006, cst_EOPNOTSUPP)) break a;
                                                                            break R;
                                                                           }
                                                                           if(! caml_string_notequal(tag_006, cst_ENFILE)) break Q;
                                                                           if(! caml_string_notequal(tag_006, cst_ENOBUFS)) break P;
                                                                           if(! caml_string_notequal(tag_006, cst_ENODEV)) break O;
                                                                           if(! caml_string_notequal(tag_006, cst_ENOENT)) break N;
                                                                           if(! caml_string_notequal(tag_006, cst_ENOEXEC)) break M;
                                                                           if(! caml_string_notequal(tag_006, cst_ENOLCK)) break L;
                                                                           if(! caml_string_notequal(tag_006, cst_ENOMEM)) break K;
                                                                           if(caml_string_notequal(tag_006, cst_ENOPROTOOPT)) break a;
                                                                           break J;
                                                                          }
                                                                         }
                                                                         return caml_call2
                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                        }
                                                                        return caml_call2
                                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                       }
                                                                       return caml_call2
                                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                      }
                                                                      return caml_call2
                                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                     }
                                                                     return caml_call2
                                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                    }
                                                                    return caml_call2
                                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                   }
                                                                   return caml_call2
                                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                  }
                                                                  var sexp_args_007 = _aH_[2];
                                                                  if(sexp_args_007 && ! sexp_args_007[2]){
                                                                   var
                                                                    arg0_008 = sexp_args_007[1],
                                                                    res0_009 = caml_call1(Core[390], arg0_008);
                                                                   return [0, res0_009];
                                                                  }
                                                                  return caml_call3
                                                                          (Sexplib0_Sexp_conv_error[8],
                                                                           error_source_003,
                                                                           tag_006,
                                                                           sexp_005);
                                                                 }
                                                                 return caml_call2
                                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                                }
                                                                return caml_call2
                                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                               }
                                                               return caml_call2
                                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                              }
                                                              return caml_call2
                                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                             }
                                                             return caml_call2
                                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                            }
                                                            return caml_call2
                                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                           }
                                                           return caml_call2
                                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                          }
                                                          return caml_call2
                                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                         }
                                                         return caml_call2
                                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                        }
                                                        return caml_call2
                                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                       }
                                                       return caml_call2
                                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                      }
                                                      return caml_call2
                                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                     }
                                                     return caml_call2
                                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                    }
                                                    return caml_call2
                                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                   }
                                                   return caml_call2
                                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                  }
                                                  return caml_call2
                                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                 }
                                                 return caml_call2
                                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                                }
                                                return caml_call2
                                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                               }
                                               return caml_call2
                                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                              }
                                              return caml_call2
                                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                             }
                                             return caml_call2
                                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                            }
                                            return caml_call2
                                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                           }
                                           return caml_call2
                                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                          }
                                          return caml_call2
                                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                         }
                                         return caml_call2
                                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                        }
                                        return caml_call2
                                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                       }
                                       return caml_call2
                                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                      }
                                      return caml_call2
                                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                     }
                                     return caml_call2
                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                    }
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                   }
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                 }
                                 return caml_call2
                                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                }
                                return caml_call2
                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                               }
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                              }
                              return caml_call2
                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                             }
                             return caml_call2
                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                            }
                            return caml_call2
                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_error(param){
    if(typeof param !== "number"){
     var arg0_010 = param[1], res0_011 = caml_call1(Core[389], arg0_010);
     return [1, [0, _ao_, [0, res0_011, 0]]];
    }
    var _aq_ = param;
    if(34 <= _aq_)
     switch(_aq_){
       case 34:
        return _I_;
       case 35:
        return _J_;
       case 36:
        return _K_;
       case 37:
        return _L_;
       case 38:
        return _M_;
       case 39:
        return _N_;
       case 40:
        return _O_;
       case 41:
        return _P_;
       case 42:
        return _Q_;
       case 43:
        return _R_;
       case 44:
        return _S_;
       case 45:
        return _T_;
       case 46:
        return _U_;
       case 47:
        return _V_;
       case 48:
        return _W_;
       case 49:
        return _X_;
       case 50:
        return _Y_;
       case 51:
        return _Z_;
       case 52:
        return ___;
       case 53:
        return _$_;
       case 54:
        return _aa_;
       case 55:
        return _ab_;
       case 56:
        return _ac_;
       case 57:
        return _ad_;
       case 58:
        return _ae_;
       case 59:
        return _af_;
       case 60:
        return _ag_;
       case 61:
        return _ah_;
       case 62:
        return _ai_;
       case 63:
        return _aj_;
       case 64:
        return _ak_;
       case 65:
        return _al_;
       case 66:
        return _am_;
       default: return _an_;
     }
    switch(_aq_){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      case 13:
       return _n_;
      case 14:
       return _o_;
      case 15:
       return _p_;
      case 16:
       return _q_;
      case 17:
       return _r_;
      case 18:
       return _s_;
      case 19:
       return _t_;
      case 20:
       return _u_;
      case 21:
       return _v_;
      case 22:
       return _w_;
      case 23:
       return _x_;
      case 24:
       return _y_;
      case 25:
       return _z_;
      case 26:
       return _A_;
      case 27:
       return _B_;
      case 28:
       return _C_;
      case 29:
       return _D_;
      case 30:
       return _E_;
      case 31:
       return _F_;
      case 32:
       return _G_;
      default: return _H_;
    }
   }
   function compare_error(a_012, b_013){
    if(a_012 === b_013) return 0;
    if(typeof a_012 === "number"){
     var _ap_ = a_012;
     if(34 <= _ap_)
      switch(_ap_){
        case 34:
         if(typeof b_013 === "number" && 34 === b_013) return 0; break;
        case 35:
         if(typeof b_013 === "number" && 35 === b_013) return 0; break;
        case 36:
         if(typeof b_013 === "number" && 36 === b_013) return 0; break;
        case 37:
         if(typeof b_013 === "number" && 37 === b_013) return 0; break;
        case 38:
         if(typeof b_013 === "number" && 38 === b_013) return 0; break;
        case 39:
         if(typeof b_013 === "number" && 39 === b_013) return 0; break;
        case 40:
         if(typeof b_013 === "number" && 40 === b_013) return 0; break;
        case 41:
         if(typeof b_013 === "number" && 41 === b_013) return 0; break;
        case 42:
         if(typeof b_013 === "number" && 42 === b_013) return 0; break;
        case 43:
         if(typeof b_013 === "number" && 43 === b_013) return 0; break;
        case 44:
         if(typeof b_013 === "number" && 44 === b_013) return 0; break;
        case 45:
         if(typeof b_013 === "number" && 45 === b_013) return 0; break;
        case 46:
         if(typeof b_013 === "number" && 46 === b_013) return 0; break;
        case 47:
         if(typeof b_013 === "number" && 47 === b_013) return 0; break;
        case 48:
         if(typeof b_013 === "number" && 48 === b_013) return 0; break;
        case 49:
         if(typeof b_013 === "number" && 49 === b_013) return 0; break;
        case 50:
         if(typeof b_013 === "number" && 50 === b_013) return 0; break;
        case 51:
         if(typeof b_013 === "number" && 51 === b_013) return 0; break;
        case 52:
         if(typeof b_013 === "number" && 52 === b_013) return 0; break;
        case 53:
         if(typeof b_013 === "number" && 53 === b_013) return 0; break;
        case 54:
         if(typeof b_013 === "number" && 54 === b_013) return 0; break;
        case 55:
         if(typeof b_013 === "number" && 55 === b_013) return 0; break;
        case 56:
         if(typeof b_013 === "number" && 56 === b_013) return 0; break;
        case 57:
         if(typeof b_013 === "number" && 57 === b_013) return 0; break;
        case 58:
         if(typeof b_013 === "number" && 58 === b_013) return 0; break;
        case 59:
         if(typeof b_013 === "number" && 59 === b_013) return 0; break;
        case 60:
         if(typeof b_013 === "number" && 60 === b_013) return 0; break;
        case 61:
         if(typeof b_013 === "number" && 61 === b_013) return 0; break;
        case 62:
         if(typeof b_013 === "number" && 62 === b_013) return 0; break;
        case 63:
         if(typeof b_013 === "number" && 63 === b_013) return 0; break;
        case 64:
         if(typeof b_013 === "number" && 64 === b_013) return 0; break;
        case 65:
         if(typeof b_013 === "number" && 65 === b_013) return 0; break;
        case 66:
         if(typeof b_013 === "number" && 66 === b_013) return 0; break;
        default: if(typeof b_013 === "number" && 67 <= b_013) return 0;
      }
     else
      switch(_ap_){
        case 0:
         if(typeof b_013 === "number" && ! b_013) return 0; return -1;
        case 1:
         if(typeof b_013 === "number" && 1 === b_013) return 0; break;
        case 2:
         if(typeof b_013 === "number" && 2 === b_013) return 0; break;
        case 3:
         if(typeof b_013 === "number" && 3 === b_013) return 0; break;
        case 4:
         if(typeof b_013 === "number" && 4 === b_013) return 0; break;
        case 5:
         if(typeof b_013 === "number" && 5 === b_013) return 0; break;
        case 6:
         if(typeof b_013 === "number" && 6 === b_013) return 0; break;
        case 7:
         if(typeof b_013 === "number" && 7 === b_013) return 0; break;
        case 8:
         if(typeof b_013 === "number" && 8 === b_013) return 0; break;
        case 9:
         if(typeof b_013 === "number" && 9 === b_013) return 0; break;
        case 10:
         if(typeof b_013 === "number" && 10 === b_013) return 0; break;
        case 11:
         if(typeof b_013 === "number" && 11 === b_013) return 0; break;
        case 12:
         if(typeof b_013 === "number" && 12 === b_013) return 0; break;
        case 13:
         if(typeof b_013 === "number" && 13 === b_013) return 0; break;
        case 14:
         if(typeof b_013 === "number" && 14 === b_013) return 0; break;
        case 15:
         if(typeof b_013 === "number" && 15 === b_013) return 0; break;
        case 16:
         if(typeof b_013 === "number" && 16 === b_013) return 0; break;
        case 17:
         if(typeof b_013 === "number" && 17 === b_013) return 0; break;
        case 18:
         if(typeof b_013 === "number" && 18 === b_013) return 0; break;
        case 19:
         if(typeof b_013 === "number" && 19 === b_013) return 0; break;
        case 20:
         if(typeof b_013 === "number" && 20 === b_013) return 0; break;
        case 21:
         if(typeof b_013 === "number" && 21 === b_013) return 0; break;
        case 22:
         if(typeof b_013 === "number" && 22 === b_013) return 0; break;
        case 23:
         if(typeof b_013 === "number" && 23 === b_013) return 0; break;
        case 24:
         if(typeof b_013 === "number" && 24 === b_013) return 0; break;
        case 25:
         if(typeof b_013 === "number" && 25 === b_013) return 0; break;
        case 26:
         if(typeof b_013 === "number" && 26 === b_013) return 0; break;
        case 27:
         if(typeof b_013 === "number" && 27 === b_013) return 0; break;
        case 28:
         if(typeof b_013 === "number" && 28 === b_013) return 0; break;
        case 29:
         if(typeof b_013 === "number" && 29 === b_013) return 0; break;
        case 30:
         if(typeof b_013 === "number" && 30 === b_013) return 0; break;
        case 31:
         if(typeof b_013 === "number" && 31 === b_013) return 0; break;
        case 32:
         if(typeof b_013 === "number" && 32 === b_013) return 0; break;
        default: if(typeof b_013 === "number" && 33 === b_013) return 0;
      }
    }
    else if(typeof b_013 !== "number"){
     var b_015 = b_013[1], a_014 = a_012[1];
     return caml_call2(Core[382], a_014, b_015);
    }
    if(typeof b_013 === "number" && ! b_013) return 1;
    if(typeof a_012 === "number" && 1 === a_012) return -1;
    if(typeof b_013 === "number" && 1 === b_013) return 1;
    if(typeof a_012 === "number" && 2 === a_012) return -1;
    if(typeof b_013 === "number" && 2 === b_013) return 1;
    if(typeof a_012 === "number" && 3 === a_012) return -1;
    if(typeof b_013 === "number" && 3 === b_013) return 1;
    if(typeof a_012 === "number" && 4 === a_012) return -1;
    if(typeof b_013 === "number" && 4 === b_013) return 1;
    if(typeof a_012 === "number" && 5 === a_012) return -1;
    if(typeof b_013 === "number" && 5 === b_013) return 1;
    if(typeof a_012 === "number" && 6 === a_012) return -1;
    if(typeof b_013 === "number" && 6 === b_013) return 1;
    if(typeof a_012 === "number" && 7 === a_012) return -1;
    if(typeof b_013 === "number" && 7 === b_013) return 1;
    if(typeof a_012 === "number" && 8 === a_012) return -1;
    if(typeof b_013 === "number" && 8 === b_013) return 1;
    if(typeof a_012 === "number" && 9 === a_012) return -1;
    if(typeof b_013 === "number" && 9 === b_013) return 1;
    if(typeof a_012 === "number" && 10 === a_012) return -1;
    if(typeof b_013 === "number" && 10 === b_013) return 1;
    if(typeof a_012 === "number" && 11 === a_012) return -1;
    if(typeof b_013 === "number" && 11 === b_013) return 1;
    if(typeof a_012 === "number" && 12 === a_012) return -1;
    if(typeof b_013 === "number" && 12 === b_013) return 1;
    if(typeof a_012 === "number" && 13 === a_012) return -1;
    if(typeof b_013 === "number" && 13 === b_013) return 1;
    if(typeof a_012 === "number" && 14 === a_012) return -1;
    if(typeof b_013 === "number" && 14 === b_013) return 1;
    if(typeof a_012 === "number" && 15 === a_012) return -1;
    if(typeof b_013 === "number" && 15 === b_013) return 1;
    if(typeof a_012 === "number" && 16 === a_012) return -1;
    if(typeof b_013 === "number" && 16 === b_013) return 1;
    if(typeof a_012 === "number" && 17 === a_012) return -1;
    if(typeof b_013 === "number" && 17 === b_013) return 1;
    if(typeof a_012 === "number" && 18 === a_012) return -1;
    if(typeof b_013 === "number" && 18 === b_013) return 1;
    if(typeof a_012 === "number" && 19 === a_012) return -1;
    if(typeof b_013 === "number" && 19 === b_013) return 1;
    if(typeof a_012 === "number" && 20 === a_012) return -1;
    if(typeof b_013 === "number" && 20 === b_013) return 1;
    if(typeof a_012 === "number" && 21 === a_012) return -1;
    if(typeof b_013 === "number" && 21 === b_013) return 1;
    if(typeof a_012 === "number" && 22 === a_012) return -1;
    if(typeof b_013 === "number" && 22 === b_013) return 1;
    if(typeof a_012 === "number" && 23 === a_012) return -1;
    if(typeof b_013 === "number" && 23 === b_013) return 1;
    if(typeof a_012 === "number" && 24 === a_012) return -1;
    if(typeof b_013 === "number" && 24 === b_013) return 1;
    if(typeof a_012 === "number" && 25 === a_012) return -1;
    if(typeof b_013 === "number" && 25 === b_013) return 1;
    if(typeof a_012 === "number" && 26 === a_012) return -1;
    if(typeof b_013 === "number" && 26 === b_013) return 1;
    if(typeof a_012 === "number" && 27 === a_012) return -1;
    if(typeof b_013 === "number" && 27 === b_013) return 1;
    if(typeof a_012 === "number" && 28 === a_012) return -1;
    if(typeof b_013 === "number" && 28 === b_013) return 1;
    if(typeof a_012 === "number" && 29 === a_012) return -1;
    if(typeof b_013 === "number" && 29 === b_013) return 1;
    if(typeof a_012 === "number" && 30 === a_012) return -1;
    if(typeof b_013 === "number" && 30 === b_013) return 1;
    if(typeof a_012 === "number" && 31 === a_012) return -1;
    if(typeof b_013 === "number" && 31 === b_013) return 1;
    if(typeof a_012 === "number" && 32 === a_012) return -1;
    if(typeof b_013 === "number" && 32 === b_013) return 1;
    if(typeof a_012 === "number" && 33 === a_012) return -1;
    if(typeof b_013 === "number" && 33 === b_013) return 1;
    if(typeof a_012 === "number" && 34 === a_012) return -1;
    if(typeof b_013 === "number" && 34 === b_013) return 1;
    if(typeof a_012 === "number" && 35 === a_012) return -1;
    if(typeof b_013 === "number" && 35 === b_013) return 1;
    if(typeof a_012 === "number" && 36 === a_012) return -1;
    if(typeof b_013 === "number" && 36 === b_013) return 1;
    if(typeof a_012 === "number" && 37 === a_012) return -1;
    if(typeof b_013 === "number" && 37 === b_013) return 1;
    if(typeof a_012 === "number" && 38 === a_012) return -1;
    if(typeof b_013 === "number" && 38 === b_013) return 1;
    if(typeof a_012 === "number" && 39 === a_012) return -1;
    if(typeof b_013 === "number" && 39 === b_013) return 1;
    if(typeof a_012 === "number" && 40 === a_012) return -1;
    if(typeof b_013 === "number" && 40 === b_013) return 1;
    if(typeof a_012 === "number" && 41 === a_012) return -1;
    if(typeof b_013 === "number" && 41 === b_013) return 1;
    if(typeof a_012 === "number" && 42 === a_012) return -1;
    if(typeof b_013 === "number" && 42 === b_013) return 1;
    if(typeof a_012 === "number" && 43 === a_012) return -1;
    if(typeof b_013 === "number" && 43 === b_013) return 1;
    if(typeof a_012 === "number" && 44 === a_012) return -1;
    if(typeof b_013 === "number" && 44 === b_013) return 1;
    if(typeof a_012 === "number" && 45 === a_012) return -1;
    if(typeof b_013 === "number" && 45 === b_013) return 1;
    if(typeof a_012 === "number" && 46 === a_012) return -1;
    if(typeof b_013 === "number" && 46 === b_013) return 1;
    if(typeof a_012 === "number" && 47 === a_012) return -1;
    if(typeof b_013 === "number" && 47 === b_013) return 1;
    if(typeof a_012 === "number" && 48 === a_012) return -1;
    if(typeof b_013 === "number" && 48 === b_013) return 1;
    if(typeof a_012 === "number" && 49 === a_012) return -1;
    if(typeof b_013 === "number" && 49 === b_013) return 1;
    if(typeof a_012 === "number" && 50 === a_012) return -1;
    if(typeof b_013 === "number" && 50 === b_013) return 1;
    if(typeof a_012 === "number" && 51 === a_012) return -1;
    if(typeof b_013 === "number" && 51 === b_013) return 1;
    if(typeof a_012 === "number" && 52 === a_012) return -1;
    if(typeof b_013 === "number" && 52 === b_013) return 1;
    if(typeof a_012 === "number" && 53 === a_012) return -1;
    if(typeof b_013 === "number" && 53 === b_013) return 1;
    if(typeof a_012 === "number" && 54 === a_012) return -1;
    if(typeof b_013 === "number" && 54 === b_013) return 1;
    if(typeof a_012 === "number" && 55 === a_012) return -1;
    if(typeof b_013 === "number" && 55 === b_013) return 1;
    if(typeof a_012 === "number" && 56 === a_012) return -1;
    if(typeof b_013 === "number" && 56 === b_013) return 1;
    if(typeof a_012 === "number" && 57 === a_012) return -1;
    if(typeof b_013 === "number" && 57 === b_013) return 1;
    if(typeof a_012 === "number" && 58 === a_012) return -1;
    if(typeof b_013 === "number" && 58 === b_013) return 1;
    if(typeof a_012 === "number" && 59 === a_012) return -1;
    if(typeof b_013 === "number" && 59 === b_013) return 1;
    if(typeof a_012 === "number" && 60 === a_012) return -1;
    if(typeof b_013 === "number" && 60 === b_013) return 1;
    if(typeof a_012 === "number" && 61 === a_012) return -1;
    if(typeof b_013 === "number" && 61 === b_013) return 1;
    if(typeof a_012 === "number" && 62 === a_012) return -1;
    if(typeof b_013 === "number" && 62 === b_013) return 1;
    if(typeof a_012 === "number" && 63 === a_012) return -1;
    if(typeof b_013 === "number" && 63 === b_013) return 1;
    if(typeof a_012 === "number" && 64 === a_012) return -1;
    if(typeof b_013 === "number" && 64 === b_013) return 1;
    if(typeof a_012 === "number" && 65 === a_012) return -1;
    if(typeof b_013 === "number" && 65 === b_013) return 1;
    if(typeof a_012 === "number" && 66 === a_012) return -1;
    if(typeof b_013 === "number" && 66 === b_013) return 1;
    if(typeof a_012 === "number" && 67 <= a_012) return -1;
    return 1;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix_Unix_error);
   var
    Core_unix_Unix_error =
      [0,
       error_of_sexp,
       sexp_of_error,
       compare_error,
       error_of_sexp,
       sexp_of_error,
       compare_error];
   runtime.caml_register_global
    (359, Core_unix_Unix_error, cst_Core_unix_Unix_error$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix__Syscall_result_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Core_unix_Syscall_result_i = "Core_unix__Syscall_result_intf",
    cst_core_unix = "core_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix_Syscall_result_i);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix);
   caml_call1
    (Ppx_expect_runtime[1][1], "core_unix/src/syscall_result_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix, "syscall_result_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix_Syscall_result_i);
   var Core_unix_Syscall_result_intf = [0];
   runtime.caml_register_global
    (11, Core_unix_Syscall_result_intf, cst_Core_unix_Syscall_result_i);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix__File_descr
//# unitInfo: Requires: Core, Core__Hashable, Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Core_unix_File_descr$0 = "Core_unix__File_descr",
    cst_core_unix$0 = "core_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Hashable = global_data.Core__Hashable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix_File_descr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "core_unix/src/file_descr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix$0, "file_descr.ml");
   var
    cst_core_unix = cst_core_unix$0,
    cst_Core_unix_File_descr = cst_Core_unix_File_descr$0;
   function of_string(string){return caml_call1(Core_Int[78], string);}
   function to_string(t){return caml_call1(Core_Int[79], t);}
   function hash(t){return caml_call1(Core_Int[101], t);}
   function compare(t1, t2){return caml_call2(Core_Int[88], t1, t2);}
   function t_of_sexp(sexp){return caml_call1(Core_Int[76], sexp);}
   function sexp_of_t(t){
    var _f_ = Core[628], _g_ = _f_ ? caml_call2(Core_Int[84], t, 2) : _f_;
    return _g_
            ? caml_call1(Sexplib0_Sexp_conv[7], cst)
            : caml_call1(Core[389], t);
   }
   var
    include = caml_call1(Core_Hashable[2], [0, compare, sexp_of_t, hash]),
    compare$0 = include[1],
    hash_fold_t = include[2],
    hash$0 = include[3],
    hashable = include[4],
    Table = include[5],
    Hash_set = include[6],
    Hash_queue = include[7];
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix_File_descr);
   function _a_(_e_){return _e_;}
   function _b_(_d_){return _d_;}
   var
    Core_unix_File_descr =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       compare$0,
       hash_fold_t,
       hash$0,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       of_string,
       to_string,
       function(_c_){return _c_;},
       _b_,
       _a_];
   runtime.caml_register_global
    (16, Core_unix_File_descr, cst_Core_unix_File_descr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix__Syscall_result
//# unitInfo: Requires: Core, Core__Array, Core__Int, Core__Result, Core__Sexp, Core_unix__File_descr, Core_unix__Unix_error, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, UnixLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Core_unix_Syscall_result$0 = "Core_unix__Syscall_result",
    cst_Syscall_result_error_code_$1 =
      "Syscall_result.error_code_exn received success value",
    cst_core_unix$0 = "core_unix",
    cst_core_unix_src_syscall_resu$0 = "core_unix/src/syscall_result.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Int = global_data.Core__Int,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Core_Sexp = global_data.Core__Sexp,
    UnixLabels = global_data.UnixLabels,
    Core_unix_Unix_error = global_data.Core_unix__Unix_error,
    Core_Result = global_data.Core__Result,
    Core_Array = global_data.Core__Array,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_unix_File_descr = global_data.Core_unix__File_descr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix_Syscall_result$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_core_unix_src_syscall_resu$0);
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix$0, "syscall_result.ml");
   var
    _h_ = [0, cst_core_unix_src_syscall_resu$0, 159, 25],
    cst_Syscall_result_cast_error_ =
      "Syscall_result.cast_error_exn received success value",
    _f_ = [0, cst_core_unix_src_syscall_resu$0, 113, 2901, 2915],
    cst_Syscall_result_error_code_$0 = cst_Syscall_result_error_code_$1,
    _e_ = [0, cst_core_unix_src_syscall_resu$0, 100, 2638, 2652],
    cst_Syscall_result_ok_exn_rece =
      "Syscall_result.ok_exn received error value",
    _d_ = [0, cst_core_unix_src_syscall_resu$0, 93, 2477, 2502],
    _c_ =
      [0,
       [11,
        "Syscall_result.create_ok received negative value (",
        [4, 0, 0, 0, [12, 41, 0]]],
       "Syscall_result.create_ok received negative value (%d)"],
    _b_ = [1, [0, 0]],
    cst_core_unix_src_syscall_resu = cst_core_unix_src_syscall_resu$0,
    cst_no_0_errno = "no 0 errno",
    cst_Syscall_result_error_code_ = cst_Syscall_result_error_code_$1,
    _a_ = [0, cst_core_unix_src_syscall_resu$0, 17, 325, 337],
    cst_core_unix = cst_core_unix$0,
    cst_Core_unix_Syscall_result = cst_Core_unix_Syscall_result$0;
   function create_error(err){
    return - runtime.core_code_of_unix_error(err) | 0;
   }
   function is_ok(t){return 0 <= t ? 1 : 0;}
   function is_error(t){return t < 0 ? 1 : 0;}
   function error_exn(t){
    var
     _v_ =
       0 <= t
        ? caml_call5
          (Core[247], 0, _a_, cst_Syscall_result_error_code_, t, Core[389])
        : - t | 0;
    return runtime.core_unix_error_of_code(_v_);
   }
   function Make(M, symbol){
    function _o_(i){return [1, runtime.core_unix_error_of_code(i)];}
    var preallocated_errnos = caml_call2(Core_Array[56], 64, _o_);
    function _p_(param){
     return runtime.caml_equal
             (runtime.caml_check_bound(preallocated_errnos, 0)[1], _b_);
    }
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_no_0_errno,
      0,
      cst_core_unix_src_syscall_resu,
      36,
      2,
      99,
      _p_);
    var
     num_preallocated_errnos = preallocated_errnos.length - 1,
     compare = Core_Int[88],
     equal = Core_Int[87];
    a:
    {
     b:
     {
      var i = 0, rev_acc = 0;
      for(;;){
       if(caml_call2(Core[90], i, 2048)) break b;
       try{var m = caml_call1(M[4], i);}catch(_u_){break;}
       var
        rev_acc$0 = [0, [0, m], rev_acc],
        i$0 = i + 1 | 0,
        i = i$0,
        rev_acc = rev_acc$0;
      }
      var preallocated_ms = caml_call1(Core_Array[99], rev_acc);
      break a;
     }
     var preallocated_ms = caml_call1(Core_Array[99], rev_acc);
    }
    var num_preallocated_ms = preallocated_ms.length - 1;
    function create_ok(x){
     var t = caml_call1(M[3], x);
     return caml_call2(Core[92], t, 0) ? caml_call3(Core[246], _c_, t, 0) : t;
    }
    function to_result(t){
     if(0 <= t)
      return caml_call2(Core[92], t, num_preallocated_ms)
              ? preallocated_ms[1 + t]
              : [0, caml_call1(M[4], t)];
     var errno = - t | 0;
     return caml_call2(Core[92], errno, num_preallocated_errnos)
             ? preallocated_errnos[1 + errno]
             : [1, runtime.core_unix_error_of_code(errno)];
    }
    function sexp_of_t(t){
     var x_001 = to_result(t);
     return caml_call3(Core_Result[15], M[1], Core_unix_Unix_error[5], x_001);
    }
    function ok_exn(t){
     return 0 <= t
             ? caml_call1(M[4], t)
             : caml_call5
               (Core[247],
                0,
                _d_,
                cst_Syscall_result_ok_exn_rece,
                t,
                sexp_of_t);
    }
    function error_code_exn(t){
     return 0 <= t
             ? caml_call5
               (Core[247],
                0,
                _e_,
                cst_Syscall_result_error_code_$0,
                t,
                sexp_of_t)
             : - t | 0;
    }
    function error_exn(t){
     return runtime.core_unix_error_of_code(error_code_exn(t));
    }
    function reinterpret_error_exn(t){
     return 0 <= t
             ? caml_call5
               (Core[247],
                0,
                _f_,
                cst_Syscall_result_cast_error_,
                t,
                sexp_of_t)
             : t;
    }
    function ok_or_unix_error_exn(t, syscall_name){
     if(0 <= t) return caml_call1(M[4], t);
     var _t_ = runtime.core_unix_error_of_code(- t | 0);
     throw caml_maybe_attach_backtrace
            ([0, UnixLabels[1], _t_, syscall_name, cst], 0);
    }
    function ok_or_unix_error_with_args_exn(t, syscall_name, x, sexp_of_x){
     if(0 <= t) return caml_call1(M[4], t);
     var
      _q_ = caml_call1(sexp_of_x, x),
      _r_ = caml_call1(Core_Sexp[86], _q_),
      _s_ = runtime.core_unix_error_of_code(- t | 0);
     throw caml_maybe_attach_backtrace
            ([0, UnixLabels[1], _s_, syscall_name, _r_], 0);
    }
    function is_none(t){return t < 0 ? 1 : 0;}
    function unchecked_value(t){return caml_call1(M[4], t);}
    var
     Optional_syntax = [0, is_none, unchecked_value],
     Optional_syntax$0 = [0, Optional_syntax];
    function of_int(t){return t;}
    var
     length_preallocated_errnos = preallocated_errnos.length - 1,
     length_preallocated_ms = preallocated_ms.length - 1,
     Private = [0, of_int, length_preallocated_errnos, length_preallocated_ms];
    return [0,
            ,
            ,
            compare,
            equal,
            ,
            ,
            create_ok,
            create_error,
            is_ok,
            is_error,
            to_result,
            sexp_of_t,
            ok_exn,
            ,
            error_exn,
            reinterpret_error_exn,
            ok_or_unix_error_exn,
            ok_or_unix_error_with_args_exn,
            ,
            ,
            Optional_syntax$0,
            Private];
   }
   var
    Int = Make([0, Core_Int[77], Core_Int[88], Core_Int[65], Core_Int[5]], 0),
    sexp_of_t = Core[620],
    compare = Core[613],
    _g_ = 0;
   function of_int_exn(n){
    if(caml_call2(Core[90], n, 0)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
   }
   function to_int(param){return 0;}
   var
    Unit = Make([0, sexp_of_t, compare, to_int, of_int_exn], _g_),
    File_descr =
      Make
       ([0,
         Core_unix_File_descr[2],
         Core_unix_File_descr[4],
         Core_unix_File_descr[15],
         Core_unix_File_descr[14]],
        0),
    unit = Unit[7].call(null, 0);
   function ignore_ok_value(t){return caml_call2(Core_Int[89], t, 0);}
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix_Syscall_result);
   var
    _i_ =
      [0,
       File_descr[3],
       File_descr[12],
       File_descr[4],
       File_descr[7],
       File_descr[8],
       File_descr[9],
       File_descr[10],
       File_descr[11],
       File_descr[13],
       File_descr[15],
       File_descr[16],
       File_descr[17],
       File_descr[18],
       File_descr[21],
       File_descr[22]],
    _j_ =
      [0,
       Unit[3],
       Unit[12],
       Unit[4],
       Unit[7],
       Unit[8],
       Unit[9],
       Unit[10],
       Unit[11],
       Unit[13],
       Unit[15],
       Unit[16],
       Unit[17],
       Unit[18],
       Unit[21],
       Unit[22]],
    _k_ =
      [0,
       Int[3],
       Int[12],
       Int[4],
       Int[7],
       Int[8],
       Int[9],
       Int[10],
       Int[11],
       Int[13],
       Int[15],
       Int[16],
       Int[17],
       Int[18],
       Int[21],
       Int[22]],
    Core_unix_Syscall_result =
      [0,
       function(_m_, _l_){
        var _n_ = Make(_m_, _l_);
        return [0,
                _n_[3],
                _n_[12],
                _n_[4],
                _n_[7],
                _n_[8],
                _n_[9],
                _n_[10],
                _n_[11],
                _n_[13],
                _n_[15],
                _n_[16],
                _n_[17],
                _n_[18],
                _n_[21],
                _n_[22]];
       },
       _k_,
       _j_,
       _i_,
       create_error,
       unit,
       is_ok,
       is_error,
       error_exn,
       ignore_ok_value];
   runtime.caml_register_global
    (35, Core_unix_Syscall_result, cst_Core_unix_Syscall_result$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Core_unix
//# unitInfo: Requires: Base__Buffer, Base__Exn, Base__Hash, Base__Sexpable, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Array, Core__Bigstring, Core__Binable, Core__Char, Core__Command_internal, Core__Comparable, Core__Comparator, Core__Core_sys, Core__Error, Core__Filename, Core__Hashtbl, Core__Identifiable, Core__Int, Core__Int32, Core__Int63, Core__Int64, Core__List, Core__Map, Core__Nativeint, Core__Option, Core__Or_error, Core__Ordered_collection_common, Core__Pid, Core__Printf, Core__Result, Core__Sequence, Core__Set, Core__Sexp, Core__Sexpable, Core__Signal, Core__Stable_unit_test, Core__String, Core__Time_ns, Core_unix__File_descr, Core_unix__Syscall_result, Core_unix__Unix_error, Error_checking_mutex, Flags, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Sexplib_unix__Sexplib_unix_conv, Signal_unix, Spawn, Stable_witness, Stdlib, Stdlib__Bigarray, Stdlib__Format, UnixLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$8 = "",
    cst$10 = "\x02::",
    cst_1$4 = "\x03::1",
    cst_2001_db8_1$9 = "\x0b2001:db8::1",
    cst_2001_db8_1_0_0_1$6 = "\x112001:db8::1:0:0:1",
    cst_ffff_192_0_2_128$4 = "\x12::ffff:192.0.2.128",
    cst_2001_db8_0_1_1_1_1_1$6 = "\x142001:db8:0:1:1:1:1:1",
    cst_2001_db8_85a3_8a2e_370_733$6 = "\x1c2001:db8:85a3::8a2e:370:7334",
    cst_signal_number = " (signal number ",
    cst$9 = ".",
    cst_bin_sh$1 = "/bin/sh",
    cst_0_0_0_0$2 = "0.0.0.0",
    cst_0o = "0o",
    cst_0o_o = "0o%o",
    cst_10_0_0_0$2 = "10.0.0.0",
    cst_127_0_0_1$2 = "127.0.0.1",
    cst_192_168_1_101$2 = "192.168.1.101",
    cst_2001_db8_0_1_1_1_1_1$7 = "2001:db8:0:1:1:1:1:1",
    cst_2001_db8_85a3_8a2e_370_733$7 = "2001:db8:85a3::8a2e:370:7334",
    cst_2001_db8_1$10 = "2001:db8::1",
    cst_2001_db8_1_0_0_1$7 = "2001:db8::1:0:0:1",
    cst_2001_db8_2_1$2 = "2001:db8::2:1",
    cst_255_255_255_255$2 = "255.255.255.255",
    cst_len_0$1 = ": len < 0",
    cst_pos_0$1 = ": pos < 0",
    cst$11 = "::",
    cst_1$5 = "::1",
    cst_ffff_192_0_2_128$5 = "::ffff:192.0.2.128",
    cst_ADDR_INET$1 = "ADDR_INET",
    cst_ADDR_UNIX$1 = "ADDR_UNIX",
    cst_AI_CANONNAME = "AI_CANONNAME",
    cst_AI_FAMILY = "AI_FAMILY",
    cst_AI_NUMERICHOST = "AI_NUMERICHOST",
    cst_AI_PASSIVE = "AI_PASSIVE",
    cst_AI_PROTOCOL = "AI_PROTOCOL",
    cst_AI_SOCKTYPE = "AI_SOCKTYPE",
    cst_ARG_MAX = "ARG_MAX",
    cst_AVPHYS_PAGES = "AVPHYS_PAGES",
    cst_Allmulti = "Allmulti",
    cst_Any = "Any",
    cst_Automedia = "Automedia",
    cst_Broadcast = "Broadcast",
    cst_CHILD_MAX = "CHILD_MAX",
    cst_CLK_TCK = "CLK_TCK",
    cst_Core_file_size = "Core_file_size",
    cst_Core_unix$0 = "Core_unix",
    cst_Cpu_seconds = "Cpu_seconds",
    cst_Current = "Current",
    cst_Data_segment = "Data_segment",
    cst_Debug = "Debug",
    cst_Dynamic = "Dynamic",
    cst_E2BIG = "E2BIG",
    cst_EACCES = "EACCES",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EAGAIN = "EAGAIN",
    cst_EALREADY = "EALREADY",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_ECONNRESET = "ECONNRESET",
    cst_EDEADLK = "EDEADLK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISCONN = "EISCONN",
    cst_EISDIR = "EISDIR",
    cst_ELOOP = "ELOOP",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETRESET = "ENETRESET",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENFILE = "ENFILE",
    cst_ENOBUFS = "ENOBUFS",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTCONN = "ENOTCONN",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EOVERFLOW = "EOVERFLOW",
    cst_EPERM = "EPERM",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EPIPE = "EPIPE",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_EUNKNOWNERR = "EUNKNOWNERR",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EXDEV = "EXDEV",
    cst_Exit_non_zero = "Exit_non_zero",
    cst_Extend = "Extend",
    cst_F_LOCK = "F_LOCK",
    cst_F_RLOCK = "F_RLOCK",
    cst_F_TEST = "F_TEST",
    cst_F_TLOCK = "F_TLOCK",
    cst_F_TRLOCK = "F_TRLOCK",
    cst_F_ULOCK = "F_ULOCK",
    cst_Fifo = "Fifo",
    cst_File_size = "File_size",
    cst_Future = "Future",
    cst_Group = "Group",
    cst_HOST_NAME_MAX = "HOST_NAME_MAX",
    cst_IOV_MAX = "IOV_MAX",
    cst_IPV6_ONLY = "IPV6_ONLY",
    cst_ITIMER_PROF = "ITIMER_PROF",
    cst_ITIMER_REAL = "ITIMER_REAL",
    cst_ITIMER_VIRTUAL = "ITIMER_VIRTUAL",
    cst_Inet$0 = "Inet",
    cst_Inet4 = "Inet4",
    cst_Inet6$0 = "Inet6",
    cst_Infinity = "Infinity",
    cst_LOGIN_NAME_MAX = "LOGIN_NAME_MAX",
    cst_Limit = "Limit",
    cst_Loopback = "Loopback",
    cst_MSG_DONTROUTE = "MSG_DONTROUTE",
    cst_MSG_OOB = "MSG_OOB",
    cst_MSG_PEEK = "MSG_PEEK",
    cst_Master = "Master",
    cst_Multicast = "Multicast",
    cst_My_group = "My_group",
    cst_NI_DGRAM = "NI_DGRAM",
    cst_NI_NAMEREQD = "NI_NAMEREQD",
    cst_NI_NOFQDN = "NI_NOFQDN",
    cst_NI_NUMERICHOST = "NI_NUMERICHOST",
    cst_NI_NUMERICSERV = "NI_NUMERICSERV",
    cst_NPROCESSORS_CONF = "NPROCESSORS_CONF",
    cst_NPROCESSORS_ONLN = "NPROCESSORS_ONLN",
    cst_Nice = "Nice",
    cst_Noarp = "Noarp",
    cst_Notrailers = "Notrailers",
    cst_Num_file_descriptors = "Num_file_descriptors",
    cst_OPEN_MAX = "OPEN_MAX",
    cst_O_APPEND = "O_APPEND",
    cst_O_CLOEXEC = "O_CLOEXEC",
    cst_O_CREAT = "O_CREAT",
    cst_O_DSYNC = "O_DSYNC",
    cst_O_EXCL = "O_EXCL",
    cst_O_KEEPEXEC = "O_KEEPEXEC",
    cst_O_NOCTTY = "O_NOCTTY",
    cst_O_NONBLOCK = "O_NONBLOCK",
    cst_O_RDONLY = "O_RDONLY",
    cst_O_RDWR = "O_RDWR",
    cst_O_RSYNC = "O_RSYNC",
    cst_O_SHARE_DELETE = "O_SHARE_DELETE",
    cst_O_SYNC = "O_SYNC",
    cst_O_TRUNC = "O_TRUNC",
    cst_O_WRONLY = "O_WRONLY",
    cst_Other = "Other",
    cst_Override = "Override",
    cst_PAGESIZE = "PAGESIZE",
    cst_PF_INET = "PF_INET",
    cst_PF_INET6 = "PF_INET6",
    cst_PF_UNIX = "PF_UNIX",
    cst_PHYS_PAGES = "PHYS_PAGES",
    cst_POSIX_VERSION = "POSIX_VERSION",
    cst_Packet = "Packet",
    cst_Pid = "Pid",
    cst_Pointopoint = "Pointopoint",
    cst_Portsel = "Portsel",
    cst_Promisc = "Promisc",
    cst_RE_DUP_MAX = "RE_DUP_MAX",
    cst_Replace = "Replace",
    cst_Replace_raw = "Replace_raw",
    cst_Round_robin = "Round_robin",
    cst_Running = "Running",
    cst_SEEK_CUR = "SEEK_CUR",
    cst_SEEK_END = "SEEK_END",
    cst_SEEK_SET = "SEEK_SET",
    cst_SHUTDOWN_ALL = "SHUTDOWN_ALL",
    cst_SHUTDOWN_RECEIVE = "SHUTDOWN_RECEIVE",
    cst_SHUTDOWN_SEND = "SHUTDOWN_SEND",
    cst_SOCK_DGRAM = "SOCK_DGRAM",
    cst_SOCK_RAW = "SOCK_RAW",
    cst_SOCK_SEQPACKET = "SOCK_SEQPACKET",
    cst_SOCK_STREAM = "SOCK_STREAM",
    cst_SO_ACCEPTCONN = "SO_ACCEPTCONN",
    cst_SO_BROADCAST = "SO_BROADCAST",
    cst_SO_DEBUG = "SO_DEBUG",
    cst_SO_DONTROUTE = "SO_DONTROUTE",
    cst_SO_ERROR = "SO_ERROR",
    cst_SO_KEEPALIVE = "SO_KEEPALIVE",
    cst_SO_OOBINLINE = "SO_OOBINLINE",
    cst_SO_RCVBUF = "SO_RCVBUF",
    cst_SO_RCVLOWAT = "SO_RCVLOWAT",
    cst_SO_RCVTIMEO = "SO_RCVTIMEO",
    cst_SO_REUSEADDR = "SO_REUSEADDR",
    cst_SO_REUSEPORT = "SO_REUSEPORT",
    cst_SO_SNDBUF = "SO_SNDBUF",
    cst_SO_SNDLOWAT = "SO_SNDLOWAT",
    cst_SO_SNDTIMEO = "SO_SNDTIMEO",
    cst_SO_TYPE = "SO_TYPE",
    cst_STREAM_MAX = "STREAM_MAX",
    cst_SYMLOOP_MAX = "SYMLOOP_MAX",
    cst_S_BLK = "S_BLK",
    cst_S_CHR = "S_CHR",
    cst_S_DIR = "S_DIR",
    cst_S_FIFO = "S_FIFO",
    cst_S_LNK = "S_LNK",
    cst_S_REG = "S_REG",
    cst_S_SOCK = "S_SOCK",
    cst_Signal = "Signal",
    cst_Slave = "Slave",
    cst_Stack = "Stack",
    cst_Stop = "Stop",
    cst_TCIFLUSH = "TCIFLUSH",
    cst_TCIOFF = "TCIOFF",
    cst_TCIOFLUSH = "TCIOFLUSH",
    cst_TCION = "TCION",
    cst_TCOFLUSH = "TCOFLUSH",
    cst_TCOOFF = "TCOOFF",
    cst_TCOON = "TCOON",
    cst_TCP_NODELAY = "TCP_NODELAY",
    cst_TTY_NAME_MAX = "TTY_NAME_MAX",
    cst_TZNAME_MAX = "TZNAME_MAX",
    cst_Unix$0 = "Unix",
    cst_Unix_ext = "Unix_ext.",
    cst_Up = "Up",
    cst_Virtual_memory = "Virtual_memory",
    cst_none = "_none_",
    cst_aDDR_INET = "aDDR_INET",
    cst_aDDR_UNIX = "aDDR_UNIX",
    cst_aI_CANONNAME = "aI_CANONNAME",
    cst_aI_FAMILY = "aI_FAMILY",
    cst_aI_NUMERICHOST = "aI_NUMERICHOST",
    cst_aI_PASSIVE = "aI_PASSIVE",
    cst_aI_PROTOCOL = "aI_PROTOCOL",
    cst_aI_SOCKTYPE = "aI_SOCKTYPE",
    cst_aRG_MAX = "aRG_MAX",
    cst_aVPHYS_PAGES = "aVPHYS_PAGES",
    cst_addr$3 = "addr",
    cst_address$0 = "address",
    cst_ai_addr$0 = "ai_addr",
    cst_ai_canonname$0 = "ai_canonname",
    cst_ai_family$0 = "ai_family",
    cst_ai_protocol$0 = "ai_protocol",
    cst_ai_socktype$0 = "ai_socktype",
    cst_aliases$1 = "aliases",
    cst_allmulti = "allmulti",
    cst_args$1 = "args",
    cst_automedia = "automedia",
    cst_broadcast = "broadcast",
    cst_buf$0 = "buf",
    cst_cHILD_MAX = "cHILD_MAX",
    cst_cLK_TCK = "cLK_TCK",
    cst_command$2 = "command",
    cst_core_file_size = "core_file_size",
    cst_core_unix$0 = "core_unix",
    cst_core_unix_src_core_unix_ml$19 = "core_unix/src/core_unix.ml",
    cst_core_unix_src_core_unix_ml$26 = "core_unix/src/core_unix.ml.Env.t",
    cst_core_unix_src_core_unix_ml$23 =
      "core_unix/src/core_unix.ml.Exit.error",
    cst_core_unix_src_core_unix_ml$24 =
      "core_unix/src/core_unix.ml.Exit_or_signal.error",
    cst_core_unix_src_core_unix_ml$25 =
      "core_unix/src/core_unix.ml.Exit_or_signal_or_stop.error",
    cst_core_unix_src_core_unix_ml$20 =
      "core_unix/src/core_unix.ml.Protocol_family.t",
    cst_core_unix_src_core_unix_ml$22 =
      "core_unix/src/core_unix.ml.Scheduler.Policy.t",
    cst_core_unix_src_core_unix_ml$21 =
      "core_unix/src/core_unix.ml.Utsname.Stable.V1.t",
    cst_core_unix_src_core_unix_ml$16 = "core_unix/src/core_unix.ml.sockaddr",
    cst_core_unix_src_core_unix_ml$15 =
      "core_unix/src/core_unix.ml.sockaddr_blocking_sexp",
    cst_core_unix_src_core_unix_ml$18 =
      "core_unix/src/core_unix.ml.socket_domain",
    cst_core_unix_src_core_unix_ml$17 =
      "core_unix/src/core_unix.ml.socket_type",
    cst_core_unix_src_core_unix_ml$27 = "core_unix/src/core_unix.ml.wait_on",
    cst_cpu_seconds = "cpu_seconds",
    cst_cur$0 = "cur",
    cst_current = "current",
    cst_data_segment = "data_segment",
    cst_debug = "debug",
    cst_dir$0 = "dir",
    cst_dst$1 = "dst",
    cst_dynamic = "dynamic",
    cst_e2BIG = "e2BIG",
    cst_eACCES = "eACCES",
    cst_eADDRINUSE = "eADDRINUSE",
    cst_eADDRNOTAVAIL = "eADDRNOTAVAIL",
    cst_eAFNOSUPPORT = "eAFNOSUPPORT",
    cst_eAGAIN = "eAGAIN",
    cst_eALREADY = "eALREADY",
    cst_eBADF = "eBADF",
    cst_eBUSY = "eBUSY",
    cst_eCHILD = "eCHILD",
    cst_eCONNABORTED = "eCONNABORTED",
    cst_eCONNREFUSED = "eCONNREFUSED",
    cst_eCONNRESET = "eCONNRESET",
    cst_eDEADLK = "eDEADLK",
    cst_eDESTADDRREQ = "eDESTADDRREQ",
    cst_eDOM = "eDOM",
    cst_eEXIST = "eEXIST",
    cst_eFAULT = "eFAULT",
    cst_eFBIG = "eFBIG",
    cst_eHOSTDOWN = "eHOSTDOWN",
    cst_eHOSTUNREACH = "eHOSTUNREACH",
    cst_eINPROGRESS = "eINPROGRESS",
    cst_eINTR = "eINTR",
    cst_eINVAL = "eINVAL",
    cst_eIO = "eIO",
    cst_eISCONN = "eISCONN",
    cst_eISDIR = "eISDIR",
    cst_eLOOP = "eLOOP",
    cst_eMFILE = "eMFILE",
    cst_eMLINK = "eMLINK",
    cst_eMSGSIZE = "eMSGSIZE",
    cst_eNAMETOOLONG = "eNAMETOOLONG",
    cst_eNETDOWN = "eNETDOWN",
    cst_eNETRESET = "eNETRESET",
    cst_eNETUNREACH = "eNETUNREACH",
    cst_eNFILE = "eNFILE",
    cst_eNOBUFS = "eNOBUFS",
    cst_eNODEV = "eNODEV",
    cst_eNOENT = "eNOENT",
    cst_eNOEXEC = "eNOEXEC",
    cst_eNOLCK = "eNOLCK",
    cst_eNOMEM = "eNOMEM",
    cst_eNOPROTOOPT = "eNOPROTOOPT",
    cst_eNOSPC = "eNOSPC",
    cst_eNOSYS = "eNOSYS",
    cst_eNOTCONN = "eNOTCONN",
    cst_eNOTDIR = "eNOTDIR",
    cst_eNOTEMPTY = "eNOTEMPTY",
    cst_eNOTSOCK = "eNOTSOCK",
    cst_eNOTTY = "eNOTTY",
    cst_eNXIO = "eNXIO",
    cst_eOPNOTSUPP = "eOPNOTSUPP",
    cst_eOVERFLOW = "eOVERFLOW",
    cst_ePERM = "ePERM",
    cst_ePFNOSUPPORT = "ePFNOSUPPORT",
    cst_ePIPE = "ePIPE",
    cst_ePROTONOSUPPORT = "ePROTONOSUPPORT",
    cst_ePROTOTYPE = "ePROTOTYPE",
    cst_eRANGE = "eRANGE",
    cst_eROFS = "eROFS",
    cst_eSHUTDOWN = "eSHUTDOWN",
    cst_eSOCKTNOSUPPORT = "eSOCKTNOSUPPORT",
    cst_eSPIPE = "eSPIPE",
    cst_eSRCH = "eSRCH",
    cst_eTIMEDOUT = "eTIMEDOUT",
    cst_eTOOMANYREFS = "eTOOMANYREFS",
    cst_eUNKNOWNERR = "eUNKNOWNERR",
    cst_eWOULDBLOCK = "eWOULDBLOCK",
    cst_eXDEV = "eXDEV",
    cst_env$2 = "env",
    cst_except$0 = "except",
    cst_f_LOCK = "f_LOCK",
    cst_f_RLOCK = "f_RLOCK",
    cst_f_TEST = "f_TEST",
    cst_f_TLOCK = "f_TLOCK",
    cst_f_TRLOCK = "f_TRLOCK",
    cst_f_ULOCK = "f_ULOCK",
    cst_family = "family",
    cst_file_size = "file_size",
    cst_future = "future",
    cst_gecos$0 = "gecos",
    cst_gid$2 = "gid",
    cst_hOST_NAME_MAX = "hOST_NAME_MAX",
    cst_iOV_MAX = "iOV_MAX",
    cst_iPV6_ONLY = "iPV6_ONLY",
    cst_iTIMER_PROF = "iTIMER_PROF",
    cst_iTIMER_REAL = "iTIMER_REAL",
    cst_iTIMER_VIRTUAL = "iTIMER_VIRTUAL",
    cst_idrss$0 = "idrss",
    cst_inblock$0 = "inblock",
    cst_infinity = "infinity",
    cst_isrss$0 = "isrss",
    cst_it_interval$0 = "it_interval",
    cst_it_value$0 = "it_value",
    cst_ixrss$0 = "ixrss",
    cst_kind$0 = "kind",
    cst_lOGIN_NAME_MAX = "lOGIN_NAME_MAX",
    cst_len$2 = "len",
    cst_limit$0 = "limit",
    cst_link_name$1 = "link_name",
    cst_loopback = "loopback",
    cst_mSG_DONTROUTE = "mSG_DONTROUTE",
    cst_mSG_OOB = "mSG_OOB",
    cst_mSG_PEEK = "mSG_PEEK",
    cst_machine$1 = "machine",
    cst_majflt$0 = "majflt",
    cst_master = "master",
    cst_max$0 = "max",
    cst_maxrss$0 = "maxrss",
    cst_minflt$0 = "minflt",
    cst_mode$13 = "mode",
    cst_msgrcv$0 = "msgrcv",
    cst_msgsnd$0 = "msgsnd",
    cst_multicast = "multicast",
    cst_nI_DGRAM = "nI_DGRAM",
    cst_nI_NAMEREQD = "nI_NAMEREQD",
    cst_nI_NOFQDN = "nI_NOFQDN",
    cst_nI_NUMERICHOST = "nI_NUMERICHOST",
    cst_nI_NUMERICSERV = "nI_NUMERICSERV",
    cst_nPROCESSORS_CONF = "nPROCESSORS_CONF",
    cst_nPROCESSORS_ONLN = "nPROCESSORS_ONLN",
    cst_name$3 = "name",
    cst_ni_hostname$0 = "ni_hostname",
    cst_ni_service$0 = "ni_service",
    cst_nice = "nice",
    cst_nivcsw$0 = "nivcsw",
    cst_noarp = "noarp",
    cst_nodename$1 = "nodename",
    cst_notrailers = "notrailers",
    cst_nsignals$0 = "nsignals",
    cst_nswap$0 = "nswap",
    cst_num_file_descriptors = "num_file_descriptors",
    cst_nvcsw$0 = "nvcsw",
    cst_oPEN_MAX = "oPEN_MAX",
    cst_o_APPEND = "o_APPEND",
    cst_o_CLOEXEC = "o_CLOEXEC",
    cst_o_CREAT = "o_CREAT",
    cst_o_DSYNC = "o_DSYNC",
    cst_o_EXCL = "o_EXCL",
    cst_o_KEEPEXEC = "o_KEEPEXEC",
    cst_o_NOCTTY = "o_NOCTTY",
    cst_o_NONBLOCK = "o_NONBLOCK",
    cst_o_RDONLY = "o_RDONLY",
    cst_o_RDWR = "o_RDWR",
    cst_o_RSYNC = "o_RSYNC",
    cst_o_SHARE_DELETE = "o_SHARE_DELETE",
    cst_o_SYNC = "o_SYNC",
    cst_o_TRUNC = "o_TRUNC",
    cst_o_WRONLY = "o_WRONLY",
    cst_opt$1 = "opt",
    cst_opts$1 = "opts",
    cst_oublock$0 = "oublock",
    cst_pAGESIZE = "pAGESIZE",
    cst_pF_INET = "pF_INET",
    cst_pF_INET6 = "pF_INET6",
    cst_pF_UNIX = "pF_UNIX",
    cst_pHYS_PAGES = "pHYS_PAGES",
    cst_pOSIX_VERSION = "pOSIX_VERSION",
    cst_passwd$0 = "passwd",
    cst_perm$1 = "perm",
    cst_pid$1 = "pid",
    cst_pointopoint = "pointopoint",
    cst_port$0 = "port",
    cst_portsel = "portsel",
    cst_pos$7 = "pos",
    cst_prog$2 = "prog",
    cst_promisc = "promisc",
    cst_proto$1 = "proto",
    cst_rE_DUP_MAX = "rE_DUP_MAX",
    cst_read$0 = "read",
    cst_release$1 = "release",
    cst_resource$1 = "resource",
    cst_running = "running",
    cst_sEEK_CUR = "sEEK_CUR",
    cst_sEEK_END = "sEEK_END",
    cst_sEEK_SET = "sEEK_SET",
    cst_sHUTDOWN_ALL = "sHUTDOWN_ALL",
    cst_sHUTDOWN_RECEIVE = "sHUTDOWN_RECEIVE",
    cst_sHUTDOWN_SEND = "sHUTDOWN_SEND",
    cst_sOCK_DGRAM = "sOCK_DGRAM",
    cst_sOCK_RAW = "sOCK_RAW",
    cst_sOCK_SEQPACKET = "sOCK_SEQPACKET",
    cst_sOCK_STREAM = "sOCK_STREAM",
    cst_sO_ACCEPTCONN = "sO_ACCEPTCONN",
    cst_sO_BROADCAST = "sO_BROADCAST",
    cst_sO_DEBUG = "sO_DEBUG",
    cst_sO_DONTROUTE = "sO_DONTROUTE",
    cst_sO_ERROR = "sO_ERROR",
    cst_sO_KEEPALIVE = "sO_KEEPALIVE",
    cst_sO_OOBINLINE = "sO_OOBINLINE",
    cst_sO_RCVBUF = "sO_RCVBUF",
    cst_sO_RCVLOWAT = "sO_RCVLOWAT",
    cst_sO_RCVTIMEO = "sO_RCVTIMEO",
    cst_sO_REUSEADDR = "sO_REUSEADDR",
    cst_sO_REUSEPORT = "sO_REUSEPORT",
    cst_sO_SNDBUF = "sO_SNDBUF",
    cst_sO_SNDLOWAT = "sO_SNDLOWAT",
    cst_sO_SNDTIMEO = "sO_SNDTIMEO",
    cst_sO_TYPE = "sO_TYPE",
    cst_sTREAM_MAX = "sTREAM_MAX",
    cst_sYMLOOP_MAX = "sYMLOOP_MAX",
    cst_s_BLK = "s_BLK",
    cst_s_CHR = "s_CHR",
    cst_s_DIR = "s_DIR",
    cst_s_FIFO = "s_FIFO",
    cst_s_LNK = "s_LNK",
    cst_s_REG = "s_REG",
    cst_s_SOCK = "s_SOCK",
    cst_shell$0 = "shell",
    cst_slave = "slave",
    cst_sockaddr$1 = "sockaddr",
    cst_sockaddr_blocking_sexp$1 = "sockaddr_blocking_sexp",
    cst_socket_domain$1 = "socket_domain",
    cst_socket_type$1 = "socket_type",
    cst_src$1 = "src",
    cst_st_atime$1 = "st_atime",
    cst_st_ctime$1 = "st_ctime",
    cst_st_dev$1 = "st_dev",
    cst_st_gid$1 = "st_gid",
    cst_st_ino$1 = "st_ino",
    cst_st_kind$1 = "st_kind",
    cst_st_mtime$1 = "st_mtime",
    cst_st_nlink$1 = "st_nlink",
    cst_st_perm$1 = "st_perm",
    cst_st_rdev$1 = "st_rdev",
    cst_st_size$1 = "st_size",
    cst_st_uid$1 = "st_uid",
    cst_stack = "stack",
    cst_stime$0 = "stime",
    cst_sysname$1 = "sysname",
    cst_t$9 = "t",
    cst_tCIFLUSH = "tCIFLUSH",
    cst_tCIOFF = "tCIOFF",
    cst_tCIOFLUSH = "tCIOFLUSH",
    cst_tCION = "tCION",
    cst_tCOFLUSH = "tCOFLUSH",
    cst_tCOOFF = "tCOOFF",
    cst_tCOON = "tCOON",
    cst_tCP_NODELAY = "tCP_NODELAY",
    cst_tTY_NAME_MAX = "tTY_NAME_MAX",
    cst_tZNAME_MAX = "tZNAME_MAX",
    cst_target$1 = "target",
    cst_tm_hour$0 = "tm_hour",
    cst_tm_isdst$0 = "tm_isdst",
    cst_tm_mday$0 = "tm_mday",
    cst_tm_min$0 = "tm_min",
    cst_tm_mon$0 = "tm_mon",
    cst_tm_sec$0 = "tm_sec",
    cst_tm_wday$0 = "tm_wday",
    cst_tm_yday$0 = "tm_yday",
    cst_tm_year$0 = "tm_year",
    cst_tms_cstime$0 = "tms_cstime",
    cst_tms_cutime$0 = "tms_cutime",
    cst_tms_stime$0 = "tms_stime",
    cst_tms_utime$0 = "tms_utime",
    cst_uid$2 = "uid",
    cst_up = "up",
    cst_utime$0 = "utime",
    cst_version$1 = "version",
    cst_virtual_memory = "virtual_memory",
    cst_write$0 = "write",
    caml_compare = runtime.caml_compare,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int64_add = runtime.caml_int64_add,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_exit = runtime.caml_sys_exit,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call17
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16){
    return (f.l >= 0 ? f.l : f.l = f.length) == 17
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [4, 6, [0, 2, 2], 0, [4, 6, [0, 2, 2], 0, 0]],
    partial$0 =
      [4,
       6,
       [0, 2, 2],
       0,
       [12,
        58,
        [4,
         6,
         [0, 2, 2],
         0,
         [4,
          6,
          [0, 2, 2],
          0,
          [12,
           58,
           [4,
            6,
            [0, 2, 2],
            0,
            [4,
             6,
             [0, 2, 2],
             0,
             [12,
              58,
              [4, 6, [0, 2, 2], 0, [4, 6, [0, 2, 2], 0, [12, 58, partial]]]]]]]]]]],
    partial$1 = [0, 2, 2],
    err = [2, cst_core_unix_src_core_unix_ml$20],
    cst$2 = "\0",
    cst$1 = "/",
    cst$0 = cst$9,
    cst = "=",
    loc$0 = "write_assume_fd_is_nonblocking",
    loc = "read_assume_fd_is_nonblocking",
    error_source_003 = "core_unix/src/core_unix.ml.RLimit.Limit.t",
    error_source_014 = "core_unix/src/core_unix.ml.RLimit.limit",
    error_source_024 = "core_unix/src/core_unix.ml.RLimit.t",
    error_source_033 = "core_unix/src/core_unix.ml.RLimit.resource",
    virtual_memory = [0, 6],
    nice = [0, 7],
    error_source_036 = "core_unix/src/core_unix.ml.Resource_usage.t",
    error_source_073 = "core_unix/src/core_unix.ml.sysconf",
    error_source_077 = "core_unix/src/core_unix.ml.IOVec.t",
    string_kind = cst$8,
    error_source_106 = cst_core_unix_src_core_unix_ml$21,
    error_source_126 = cst_core_unix_src_core_unix_ml$22,
    error_source_128 = cst_core_unix_src_core_unix_ml$22,
    error_source_135 = "core_unix/src/core_unix.ml.Mman.Mcl_flags.t",
    error_source_144 = "core_unix/src/core_unix.ml.Error.t",
    error_source_190 = cst_core_unix_src_core_unix_ml$23,
    error_source_192 = cst_core_unix_src_core_unix_ml$23,
    error_source_219 = cst_core_unix_src_core_unix_ml$24,
    error_source_221 = cst_core_unix_src_core_unix_ml$24,
    error_source_243 = cst_core_unix_src_core_unix_ml$25,
    error_source_245 = cst_core_unix_src_core_unix_ml$25,
    error_source_259 = cst_core_unix_src_core_unix_ml$26,
    error_source_285 = cst_core_unix_src_core_unix_ml$26,
    error_source_314 = cst_core_unix_src_core_unix_ml$27,
    error_source_322 = cst_core_unix_src_core_unix_ml$27,
    error_source_344 = "core_unix/src/core_unix.ml.open_flag",
    error_source_349 = "core_unix/src/core_unix.ml.seek_command",
    error_source_353 = "core_unix/src/core_unix.ml.file_kind",
    error_source_356 = "core_unix/src/core_unix.ml.Native_file.stats",
    error_source_385 = "core_unix/src/core_unix.ml.lock_command",
    error_source_388 = "core_unix/src/core_unix.ml.stats",
    empty$1 = [0, 0, 0, 0],
    error_source_444 = "core_unix/src/core_unix.ml.process_times",
    error_source_456 = "core_unix/src/core_unix.ml.tm",
    error_source_479 = "core_unix/src/core_unix.ml.interval_timer",
    error_source_482 = "core_unix/src/core_unix.ml.interval_timer_status",
    error_source_492 = "core_unix/src/core_unix.ml.Passwd.t",
    error_source_531 = cst_core_unix_src_core_unix_ml$20,
    error_source_533 = cst_core_unix_src_core_unix_ml$20,
    cst$3 = cst$10,
    cst$4 = cst$11,
    cst$5 = cst$11,
    cst$6 = cst$10,
    cst$7 = cst$11,
    module_name = "Core_unix.Cidr",
    error_source_555 = "core_unix/src/core_unix.ml.Protocol.t",
    error_source_569 = "core_unix/src/core_unix.ml.Service.t",
    error_source_590 = cst_core_unix_src_core_unix_ml$18,
    error_source_594 = cst_core_unix_src_core_unix_ml$17,
    error_source_612 = cst_core_unix_src_core_unix_ml$15,
    error_source_634 = "core_unix/src/core_unix.ml.shutdown_command",
    error_source_638 = "core_unix/src/core_unix.ml.msg_flag",
    error_source_642 = "core_unix/src/core_unix.ml.socket_bool_option",
    error_source_646 = "core_unix/src/core_unix.ml.socket_int_option",
    error_source_654 = "core_unix/src/core_unix.ml.socket_float_option",
    error_source_668 = "core_unix/src/core_unix.ml.addr_info_blocking_sexp",
    error_source_683 = "core_unix/src/core_unix.ml.getaddrinfo_option",
    error_source_707 = "core_unix/src/core_unix.ml.name_info",
    error_source_716 = "core_unix/src/core_unix.ml.getnameinfo_option",
    error_source_805 = "core_unix/src/core_unix.ml.Terminal_io.flush_queue",
    error_source_809 = "core_unix/src/core_unix.ml.Terminal_io.flow_action",
    error_source_821 = "core_unix/src/core_unix.ml.Ifaddr.Flag.T.t",
    all =
      caml_list_of_js_array
       ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]),
    UnixLabels = global_data.UnixLabels,
    Core_Array = global_data.Core__Array,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Set = global_data.Core__Set,
    Core = global_data.Core,
    Core_Char = global_data.Core__Char,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Core_Int = global_data.Core__Int,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib = global_data.Stdlib,
    Core_Filename = global_data.Core__Filename,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Base_Exn = global_data.Base__Exn,
    Assert_failure = global_data.Assert_failure,
    Core_Int32 = global_data.Core__Int32,
    Core_Sequence = global_data.Core__Sequence,
    Core_String = global_data.Core__String,
    Stable_witness = global_data.Stable_witness,
    Base_Hash = global_data.Base__Hash,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Error_checking_mutex = global_data.Error_checking_mutex,
    Core_Printf = global_data.Core__Printf,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Pid = global_data.Core__Pid,
    Core_Core_sys = global_data.Core__Core_sys,
    Spawn = global_data.Spawn,
    Core_Nativeint = global_data.Core__Nativeint,
    Core_Int63 = global_data.Core__Int63,
    Core_Result = global_data.Core__Result,
    Core_Int64 = global_data.Core__Int64,
    Core_Ordered_collection_common =
      global_data.Core__Ordered_collection_common,
    Core_Sexp = global_data.Core__Sexp,
    Core_Map = global_data.Core__Map,
    Core_Or_error = global_data.Core__Or_error,
    Core_Signal = global_data.Core__Signal,
    Signal_unix = global_data.Signal_unix;
   global_data.Core__Error;
   var
    Base_Buffer = global_data.Base__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Core_unix_Unix_error = global_data.Core_unix__Unix_error,
    Flags = global_data.Flags,
    Base_Sexpable = global_data.Base__Sexpable,
    Core_Binable = global_data.Core__Binable,
    Core_Comparable = global_data.Core__Comparable,
    Core_Stable_unit_test = global_data.Core__Stable_unit_test,
    Core_Command_internal = global_data.Core__Command_internal,
    Core_Sexpable = global_data.Core__Sexpable,
    Core_Comparator = global_data.Core__Comparator,
    Core_Identifiable = global_data.Core__Identifiable;
   global_data.Sexplib_unix__Sexplib_unix_conv;
   var Core_unix_Syscall_result = global_data.Core_unix__Syscall_result;
   caml_call1(Ppx_module_timer_runtime[4], cst_Core_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_core_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_core_unix_src_core_unix_ml$19);
   caml_call2(Ppx_inline_test_lib[6], cst_core_unix$0, "core_unix.ml");
   var
    symbol = Core_Filename[10],
    _iA_ =
      [0,
       [11, "IPv6 address is length ", [4, 0, 0, 0, [12, 33, 0]]],
       "IPv6 address is length %d!"],
    _iz_ =
      [0,
       [4,
        6,
        [0, 2, 2],
        0,
        [4,
         6,
         [0, 2, 2],
         0,
         [12,
          58,
          [4,
           6,
           [0, 2, 2],
           0,
           [4,
            6,
            [0, 2, 2],
            0,
            [12,
             58,
             [4,
              6,
              [0, 2, 2],
              0,
              [4, 6, [0, 2, 2], 0, [12, 58, [4, 6, partial$1, 0, partial$0]]]]]]]]]],
       "%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x"],
    _iy_ =
      [0,
       [11, "IPv4 address is length ", [4, 0, 0, 0, [12, 33, 0]]],
       "IPv4 address is length %d!"],
    _ix_ =
      [0,
       [4,
        0,
        0,
        0,
        [12,
         46,
         [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]]]]]],
       "%d.%d.%d.%d"],
    _ir_ = [0, "broadcast_or_destination"],
    _is_ = [0, "netmask"],
    _it_ = [0, cst_address$0],
    _iu_ = [0, "flags"],
    _iv_ = [0, cst_family],
    _iw_ = [0, cst_name$3],
    _ib_ = [0, cst_Allmulti],
    _ic_ = [0, cst_Automedia],
    _id_ = [0, cst_Broadcast],
    _ie_ = [0, cst_Debug],
    _if_ = [0, cst_Dynamic],
    _ig_ = [0, cst_Loopback],
    _ih_ = [0, cst_Master],
    _ii_ = [0, cst_Multicast],
    _ij_ = [0, cst_Noarp],
    _ik_ = [0, cst_Notrailers],
    _il_ = [0, cst_Pointopoint],
    _im_ = [0, cst_Portsel],
    _in_ = [0, cst_Promisc],
    _io_ = [0, cst_Running],
    _ip_ = [0, cst_Slave],
    _iq_ = [0, cst_Up],
    _h5_ = [0, cst_Packet],
    _h6_ = [0, cst_Inet4],
    _h7_ = [0, cst_Inet6$0],
    _h3_ = [0, cst_Broadcast],
    _h4_ = [0, "Destination"],
    cst_mode$12 = cst_mode$13,
    _hZ_ = [0, cst_TCOOFF],
    _h0_ = [0, cst_TCOON],
    _h1_ = [0, cst_TCIOFF],
    _h2_ = [0, cst_TCION],
    cst_mode$11 = cst_mode$13,
    _hW_ = [0, cst_TCIFLUSH],
    _hX_ = [0, cst_TCOFLUSH],
    _hY_ = [0, cst_TCIOFLUSH],
    cst_duration = "duration",
    cst_termios = "termios",
    cst_mode$10 = cst_mode$13,
    _hT_ = [0, "TCSANOW"],
    _hU_ = [0, "TCSADRAIN"],
    _hV_ = [0, "TCSAFLUSH"],
    _hh_ = [0, "c_vstop"],
    _hi_ = [0, "c_vstart"],
    _hj_ = [0, "c_vtime"],
    _hk_ = [0, "c_vmin"],
    _hl_ = [0, "c_veol"],
    _hm_ = [0, "c_veof"],
    _hn_ = [0, "c_vkill"],
    _ho_ = [0, "c_verase"],
    _hp_ = [0, "c_vquit"],
    _hq_ = [0, "c_vintr"],
    _hr_ = [0, "c_echonl"],
    _hs_ = [0, "c_echok"],
    _ht_ = [0, "c_echoe"],
    _hu_ = [0, "c_echo"],
    _hv_ = [0, "c_noflsh"],
    _hw_ = [0, "c_icanon"],
    _hx_ = [0, "c_isig"],
    _hy_ = [0, "c_clocal"],
    _hz_ = [0, "c_hupcl"],
    _hA_ = [0, "c_parodd"],
    _hB_ = [0, "c_parenb"],
    _hC_ = [0, "c_cread"],
    _hD_ = [0, "c_cstopb"],
    _hE_ = [0, "c_csize"],
    _hF_ = [0, "c_ibaud"],
    _hG_ = [0, "c_obaud"],
    _hH_ = [0, "c_opost"],
    _hI_ = [0, "c_ixoff"],
    _hJ_ = [0, "c_ixon"],
    _hK_ = [0, "c_icrnl"],
    _hL_ = [0, "c_igncr"],
    _hM_ = [0, "c_inlcr"],
    _hN_ = [0, "c_istrip"],
    _hO_ = [0, "c_inpck"],
    _hP_ = [0, "c_parmrk"],
    _hQ_ = [0, "c_ignpar"],
    _hR_ = [0, "c_brkint"],
    _hS_ = [0, "c_ignbrk"],
    _hf_ = [0, cst_opts$1],
    _hg_ = [0, cst_addr$3],
    cst_Unix_getnameinfo_not_found = "Unix.getnameinfo: not found",
    cst_opts$0 = cst_opts$1,
    cst_addr$2 = cst_addr$3,
    _ha_ = [0, cst_NI_NOFQDN],
    _hb_ = [0, cst_NI_NUMERICHOST],
    _hc_ = [0, cst_NI_NAMEREQD],
    _hd_ = [0, cst_NI_NUMERICSERV],
    _he_ = [0, cst_NI_DGRAM],
    _g__ = [0, cst_ni_service$0],
    _g$_ = [0, cst_ni_hostname$0],
    cst_ni_service = cst_ni_service$0,
    cst_ni_hostname = cst_ni_hostname$0,
    cst_opts = cst_opts$1,
    cst_service = "service",
    cst_host = "host",
    _g4_ = [0, cst_AI_NUMERICHOST],
    _g5_ = [0, cst_AI_CANONNAME],
    _g6_ = [0, cst_AI_PASSIVE],
    _g7_ = [0, cst_AI_FAMILY],
    _g8_ = [0, cst_AI_SOCKTYPE],
    _g9_ = [0, cst_AI_PROTOCOL],
    _gZ_ = [0, cst_ai_canonname$0],
    _g0_ = [0, cst_ai_addr$0],
    _g1_ = [0, cst_ai_protocol$0],
    _g2_ = [0, cst_ai_socktype$0],
    _g3_ = [0, cst_ai_family$0],
    cst_ai_canonname = cst_ai_canonname$0,
    cst_ai_addr = cst_ai_addr$0,
    cst_ai_protocol = cst_ai_protocol$0,
    cst_ai_socktype = cst_ai_socktype$0,
    cst_ai_family = cst_ai_family$0,
    _gU_ = [0, cst_ai_canonname$0],
    _gV_ = [0, cst_ai_addr$0],
    _gW_ = [0, cst_ai_protocol$0],
    _gX_ = [0, cst_ai_socktype$0],
    _gY_ = [0, cst_ai_family$0],
    cst_val = "val",
    cst_opt$0 = cst_opt$1,
    cst_opt = cst_opt$1,
    _gR_ = [0, cst_SO_SNDTIMEO],
    _gS_ = [0, cst_SO_RCVTIMEO],
    _gQ_ = [0, "SO_LINGER"],
    _gK_ = [0, cst_SO_SNDBUF],
    _gL_ = [0, cst_SO_RCVBUF],
    _gM_ = [0, cst_SO_ERROR],
    _gN_ = [0, cst_SO_TYPE],
    _gO_ = [0, cst_SO_RCVLOWAT],
    _gP_ = [0, cst_SO_SNDLOWAT],
    _gA_ = [0, cst_SO_DEBUG],
    _gB_ = [0, cst_SO_BROADCAST],
    _gC_ = [0, cst_SO_REUSEADDR],
    _gD_ = [0, cst_SO_KEEPALIVE],
    _gE_ = [0, cst_SO_DONTROUTE],
    _gF_ = [0, cst_SO_OOBINLINE],
    _gG_ = [0, cst_SO_ACCEPTCONN],
    _gH_ = [0, cst_TCP_NODELAY],
    _gI_ = [0, cst_IPV6_ONLY],
    _gJ_ = [0, cst_SO_REUSEPORT],
    cst_addr$1 = cst_addr$3,
    cst_mode$9 = cst_mode$13,
    cst_pos$6 = cst_pos$7,
    cst_addr$0 = cst_addr$3,
    cst_mode$8 = cst_mode$13,
    cst_pos$5 = cst_pos$7,
    cst_mode$7 = cst_mode$13,
    cst_pos$4 = cst_pos$7,
    _gt_ = [0, cst_MSG_OOB],
    _gu_ = [0, cst_MSG_DONTROUTE],
    _gv_ = [0, cst_MSG_PEEK],
    cst_mode$6 = cst_mode$13,
    _gq_ = [0, cst_SHUTDOWN_RECEIVE],
    _gr_ = [0, cst_SHUTDOWN_SEND],
    _gs_ = [0, cst_SHUTDOWN_ALL],
    cst_backlog = "backlog",
    _gp_ =
      [0,
       [11, "/proc/self/fd/", [4, 0, 0, 0, [12, 47, [2, 0, 0]]]],
       "/proc/self/fd/%d/%s"],
    cst_proc_self_fd = "/proc/self/fd",
    _gn_ = [0, 13, [0, 0, 0]],
    _go_ = [0, 13, [0, 0, 0]],
    _gm_ = [0, cst$8],
    cst_protocol = "protocol",
    cst_kind = cst_kind$0,
    cst_domain = "domain",
    cst_addr = cst_addr$3,
    _gj_ = [1, cst_core_unix_src_core_unix_ml$15],
    cst_core_unix_src_core_unix_ml$13 = cst_core_unix_src_core_unix_ml$15,
    _gd_ = [0, cst_ADDR_UNIX$1],
    _ge_ = [0, cst_ADDR_INET$1],
    _gc_ = [1, cst_core_unix_src_core_unix_ml$16],
    cst_core_unix_src_core_unix_ml$11 = cst_core_unix_src_core_unix_ml$16,
    _f8_ = [0, cst_ADDR_UNIX$1],
    _f9_ = [0, cst_ADDR_INET$1],
    _f7_ = [1, cst_core_unix_src_core_unix_ml$17],
    cst_core_unix_src_core_unix_ml$9 = cst_core_unix_src_core_unix_ml$17,
    _fY_ = [0, cst_SOCK_STREAM],
    _fZ_ = [0, cst_SOCK_DGRAM],
    _f0_ = [0, cst_SOCK_RAW],
    _f1_ = [0, cst_SOCK_SEQPACKET],
    _fX_ = [1, cst_core_unix_src_core_unix_ml$18],
    cst_core_unix_src_core_unix_ml$7 = cst_core_unix_src_core_unix_ml$18,
    _fP_ = [0, cst_PF_UNIX],
    _fQ_ = [0, cst_PF_INET],
    _fR_ = [0, cst_PF_INET6],
    _fN_ = [0, "core_unix/src/core_unix.ml.Service.Getbyport"],
    _fO_ = [0, cst_none, 0, -1],
    _fK_ = [0, "core_unix/src/core_unix.ml.Service.Getbyname"],
    _fL_ = [0, cst_none, 0, -1],
    _fF_ = [0, cst_proto$1],
    _fG_ = [0, cst_port$0],
    _fH_ = [0, cst_aliases$1],
    _fI_ = [0, cst_name$3],
    cst_proto$0 = cst_proto$1,
    cst_port = cst_port$0,
    cst_aliases$0 = cst_aliases$1,
    cst_name$2 = cst_name$3,
    _fC_ = [0, "core_unix/src/core_unix.ml.Protocol.Getbynumber"],
    _fD_ = [0, cst_none, 0, -1],
    _fy_ = [0, "core_unix/src/core_unix.ml.Protocol.Getbyname"],
    _fz_ = [0, cst_none, 0, -1],
    _fu_ = [0, cst_proto$1],
    _fv_ = [0, cst_aliases$1],
    _fw_ = [0, cst_name$3],
    cst_proto = cst_proto$1,
    cst_aliases = cst_aliases$1,
    cst_name$1 = cst_name$3,
    _ft_ = [0, cst_core_unix_src_core_unix_ml$19, 2586, 4],
    _fs_ = [0, cst_core_unix_src_core_unix_ml$19, 2587, 4],
    _fr_ = [0, [2, 0, [12, 47, [4, 0, 0, 0, 0]]], "%s/%d"],
    _fq_ =
      [0,
       [11,
        "Couldn't parse '",
        [2, 0, [11, "' into a CIDR address/bits pair", 0]]],
       "Couldn't parse '%s' into a CIDR address/bits pair"],
    _fp_ =
      [0,
       [4,
        0,
        0,
        0,
        [11, " is an invalid number of mask bits (0 <= bits <= 32)", 0]],
       "%d is an invalid number of mask bits (0 <= bits <= 32)"],
    cst_core_unix_src_core_unix_ml$5 =
      "core_unix/src/core_unix.ml.Cidr.Stable.V1.T0.t",
    _fk_ = [0, cst_core_unix_src_core_unix_ml$19, 2478, 21],
    cst_empty_addrs = "empty addrs",
    cst_host_not_found = "host not found",
    _fi_ = [0, "core_unix/src/core_unix.ml.Inet_addr.Get_inet_addr"],
    _fj_ = [0, cst_none, 0, -1],
    _fe_ = [0, "core_unix/src/core_unix.ml.Host.Getbyaddr"],
    _ff_ = [0, cst_none, 0, -1],
    _fa_ = [0, "core_unix/src/core_unix.ml.Host.Getbyname"],
    _fb_ = [0, cst_none, 0, -1],
    _e7_ = [0, "addresses"],
    _e8_ = [0, cst_family],
    _e9_ = [0, cst_aliases$1],
    _e__ = [0, cst_name$3],
    _eD_ = [0, cst_Unix$0],
    _eE_ = [0, cst_Inet6$0],
    _eC_ = [0, cst_Inet$0],
    _er_ = [0, "core_unix/src/core_unix.ml.Group.Getbygid"],
    _es_ = [0, cst_none, 0, -1],
    _en_ = [0, "core_unix/src/core_unix.ml.Group.Getbyname"],
    _eo_ = [0, cst_none, 0, -1],
    _ei_ = [0, "mem"],
    _ej_ = [0, cst_gid$2],
    _ek_ = [0, cst_passwd$0],
    _el_ = [0, cst_name$3],
    _ef_ = [0, "core_unix/src/core_unix.ml.Passwd.Getbyuid"],
    _eg_ = [0, cst_none, 0, -1],
    _eb_ = [0, "core_unix/src/core_unix.ml.Passwd.Getbyname"],
    _ec_ = [0, cst_none, 0, -1],
    _d5_ = [0, cst_shell$0],
    _d6_ = [0, cst_dir$0],
    _d7_ = [0, cst_gecos$0],
    _d8_ = [0, cst_gid$2],
    _d9_ = [0, cst_uid$2],
    _d__ = [0, cst_passwd$0],
    _d$_ = [0, cst_name$3],
    cst_shell = cst_shell$0,
    cst_dir = cst_dir$0,
    cst_gecos = cst_gecos$0,
    cst_gid$1 = cst_gid$2,
    cst_uid$1 = cst_uid$2,
    cst_passwd = cst_passwd$0,
    cst_name$0 = cst_name$3,
    _d4_ =
      [0,
       [11,
        "NUL bytes are not allowed in the group and user names, but found one in ",
        [3, 0, 0]],
       "NUL bytes are not allowed in the group and user names, but found one in %S"],
    cst_gid$0 = cst_gid$2,
    cst_uid$0 = cst_uid$2,
    _d2_ = [0, cst_it_value$0],
    _d3_ = [0, cst_it_interval$0],
    cst_it_value = cst_it_value$0,
    cst_it_interval = cst_it_interval$0,
    _dZ_ = [0, cst_ITIMER_REAL],
    _d0_ = [0, cst_ITIMER_VIRTUAL],
    _d1_ = [0, cst_ITIMER_PROF],
    _dQ_ = [0, cst_tm_isdst$0],
    _dR_ = [0, cst_tm_yday$0],
    _dS_ = [0, cst_tm_wday$0],
    _dT_ = [0, cst_tm_year$0],
    _dU_ = [0, cst_tm_mon$0],
    _dV_ = [0, cst_tm_mday$0],
    _dW_ = [0, cst_tm_hour$0],
    _dX_ = [0, cst_tm_min$0],
    _dY_ = [0, cst_tm_sec$0],
    cst_tm_isdst = cst_tm_isdst$0,
    cst_tm_yday = cst_tm_yday$0,
    cst_tm_wday = cst_tm_wday$0,
    cst_tm_year = cst_tm_year$0,
    cst_tm_mon = cst_tm_mon$0,
    cst_tm_mday = cst_tm_mday$0,
    cst_tm_hour = cst_tm_hour$0,
    cst_tm_min = cst_tm_min$0,
    cst_tm_sec = cst_tm_sec$0,
    _dM_ = [0, cst_tms_cstime$0],
    _dN_ = [0, cst_tms_cutime$0],
    _dO_ = [0, cst_tms_stime$0],
    _dP_ = [0, cst_tms_utime$0],
    cst_tms_cstime = cst_tms_cstime$0,
    cst_tms_cutime = cst_tms_cutime$0,
    cst_tms_stime = cst_tms_stime$0,
    cst_tms_utime = cst_tms_utime$0,
    cst_timeout = "timeout",
    cst_except = cst_except$0,
    cst_write = cst_write$0,
    cst_read = cst_read$0,
    _dJ_ = [0, "Never"],
    _dK_ = [0, "Immediately"],
    _dL_ = [0, "After"],
    _dG_ = [0, cst_except$0],
    _dH_ = [0, cst_write$0],
    _dI_ = [0, cst_read$0],
    cst_link_name$0 = cst_link_name$1,
    cst_target$0 = cst_target$1,
    cst_env$1 = cst_env$2,
    cst_command$1 = cst_command$2,
    cst_command$0 = cst_command$2,
    _dC_ = [0, -72399366, 0],
    cst_args$0 = cst_args$1,
    cst_prog$1 = cst_prog$2,
    cst_env$0 = cst_env$2,
    cst_args = cst_args$1,
    cst_prog$0 = cst_prog$2,
    cst_working_dir = "working_dir",
    _dB_ = [0, -72399366, 0],
    _dA_ = [0, cst_core_unix_src_core_unix_ml$19, 1848, 14],
    _dz_ = [0, 2, 0],
    cst_Core_unix_create_process = "Core_unix.create_process",
    cst_bin_sh = cst_bin_sh$1,
    cst_bin_sh$0 = cst_bin_sh$1,
    _dy_ = [0, cst_core_unix_src_core_unix_ml$19, 1800, 4],
    cst_Core_unix_create_process_e =
      "Core_unix.create_process: empty prog_search_path",
    _dx_ = [0, "/bin", [0, "/usr/bin", 0]],
    cst_PATH = "PATH",
    _dt_ = [0, "stderr"],
    _du_ = [0, "stdout"],
    _dv_ = [0, "stdin"],
    _dw_ = [0, cst_pid$1],
    cst_name = cst_name$3,
    _ds_ = [0, 1],
    _dl_ = [0, 3],
    _dm_ = [0, 2],
    _dn_ = [0, 1],
    _do_ = [0, 5],
    _dp_ = [0, 4],
    _dq_ = [0, 0],
    _dr_ = [0, 6],
    _di_ = [0, cst_kind$0],
    _dj_ = [0, "inode"],
    _dk_ = [0, cst_name$3],
    _df_ = [0, cst_core_unix_src_core_unix_ml$19, 1559, 4],
    cst_dst$0 = cst_dst$1,
    cst_src$0 = cst_src$1,
    cst_perm$0 = cst_perm$1,
    _dd_ = [0, [11, cst_0o, [4, 10, 0, 0, 0]], cst_0o_o],
    cst_mode$5 = cst_mode$13,
    _c$_ = [0, "R_OK"],
    _da_ = [0, "W_OK"],
    _db_ = [0, "X_OK"],
    _dc_ = [0, "F_OK"],
    cst_link_name = cst_link_name$1,
    cst_target = cst_target$1,
    cst_dst = cst_dst$1,
    cst_src = cst_src$1,
    _cZ_ = [0, cst_st_ctime$1],
    _c0_ = [0, cst_st_mtime$1],
    _c1_ = [0, cst_st_atime$1],
    _c2_ = [0, cst_st_size$1],
    _c3_ = [0, cst_st_rdev$1],
    _c4_ = [0, cst_st_gid$1],
    _c5_ = [0, cst_st_uid$1],
    _c6_ = [0, cst_st_nlink$1],
    _c7_ = [0, cst_st_perm$1],
    _c8_ = [0, cst_st_kind$1],
    _c9_ = [0, cst_st_ino$1],
    _c__ = [0, cst_st_dev$1],
    cst_st_ctime$0 = cst_st_ctime$1,
    cst_st_mtime$0 = cst_st_mtime$1,
    cst_st_atime$0 = cst_st_atime$1,
    cst_st_size$0 = cst_st_size$1,
    cst_st_rdev$0 = cst_st_rdev$1,
    cst_st_gid$0 = cst_st_gid$1,
    cst_st_uid$0 = cst_st_uid$1,
    cst_st_nlink$0 = cst_st_nlink$1,
    cst_st_perm$0 = cst_st_perm$1,
    cst_st_kind$0 = cst_st_kind$1,
    cst_st_ino$0 = cst_st_ino$1,
    cst_st_dev$0 = cst_st_dev$1,
    cst_len$1 = cst_len$2,
    cst_mode$4 = cst_mode$13,
    cst_pos$3 = cst_pos$7,
    _cY_ = [0, cst_core_unix_src_core_unix_ml$19, 1285, 32],
    cst_mode$3 = cst_mode$13,
    cst_len_passed_to_Unix_lockf_t =
      "~len passed to Unix.lockf too large to fit in native int",
    _cS_ = [0, cst_F_ULOCK],
    _cT_ = [0, cst_F_LOCK],
    _cU_ = [0, cst_F_TLOCK],
    _cV_ = [0, cst_F_TEST],
    _cW_ = [0, cst_F_RLOCK],
    _cX_ = [0, cst_F_TRLOCK],
    cst_mode$2 = cst_mode$13,
    cst_pos$2 = cst_pos$7,
    _cG_ = [0, cst_st_ctime$1],
    _cH_ = [0, cst_st_mtime$1],
    _cI_ = [0, cst_st_atime$1],
    _cJ_ = [0, cst_st_size$1],
    _cK_ = [0, cst_st_rdev$1],
    _cL_ = [0, cst_st_gid$1],
    _cM_ = [0, cst_st_uid$1],
    _cN_ = [0, cst_st_nlink$1],
    _cO_ = [0, cst_st_perm$1],
    _cP_ = [0, cst_st_kind$1],
    _cQ_ = [0, cst_st_ino$1],
    _cR_ = [0, cst_st_dev$1],
    cst_st_ctime = cst_st_ctime$1,
    cst_st_mtime = cst_st_mtime$1,
    cst_st_atime = cst_st_atime$1,
    cst_st_size = cst_st_size$1,
    cst_st_rdev = cst_st_rdev$1,
    cst_st_gid = cst_st_gid$1,
    cst_st_uid = cst_st_uid$1,
    cst_st_nlink = cst_st_nlink$1,
    cst_st_perm = cst_st_perm$1,
    cst_st_kind = cst_st_kind$1,
    cst_st_ino = cst_st_ino$1,
    cst_st_dev = cst_st_dev$1,
    _cz_ = [0, cst_S_REG],
    _cA_ = [0, cst_S_DIR],
    _cB_ = [0, cst_S_CHR],
    _cC_ = [0, cst_S_BLK],
    _cD_ = [0, cst_S_LNK],
    _cE_ = [0, cst_S_FIFO],
    _cF_ = [0, cst_S_SOCK],
    _cw_ = [0, cst_SEEK_SET],
    _cx_ = [0, cst_SEEK_CUR],
    _cy_ = [0, cst_SEEK_END],
    cst_pos$1 = cst_pos$7,
    cst_pos$0 = cst_pos$7,
    cst_mode$1 = cst_mode$13,
    _co_ =
      [0,
       [11,
        "Unix.openfile: no read or write flag specified in mode: ",
        [2, 0, 0]],
       "Unix.openfile: no read or write flag specified in mode: %s"],
    _cn_ = [0, [11, cst_0o, [4, 10, [0, 2, 3], 0, 0]], "0o%03o"],
    _b__ = [0, cst_O_RDONLY],
    _b$_ = [0, cst_O_WRONLY],
    _ca_ = [0, cst_O_RDWR],
    _cb_ = [0, cst_O_NONBLOCK],
    _cc_ = [0, cst_O_APPEND],
    _cd_ = [0, cst_O_CREAT],
    _ce_ = [0, cst_O_TRUNC],
    _cf_ = [0, cst_O_EXCL],
    _cg_ = [0, cst_O_NOCTTY],
    _ch_ = [0, cst_O_DSYNC],
    _ci_ = [0, cst_O_SYNC],
    _cj_ = [0, cst_O_RSYNC],
    _ck_ = [0, cst_O_SHARE_DELETE],
    _cl_ = [0, cst_O_CLOEXEC],
    _cm_ = [0, cst_O_KEEPEXEC],
    cst_priority = "priority",
    _b9_ = [0, "You don't have a parent process"],
    cst_command = cst_command$2,
    _b6_ = [0, "unexpected None with wait4 without WNOHANG"],
    _b7_ = [0, "ps"],
    _b8_ = [0, cst_pid$1],
    cst_process_status_is_Stop_whi =
      "process status is `Stop, which is unexpected when waiting without WUNTRACED",
    cst_pid$0 = cst_pid$1,
    cst_mode$0 = cst_mode$13,
    _b4_ = [0, "Child_pid"],
    cst_child_process_didn_t_exit_ = "child process didn't exit with status 0",
    _b5_ = [0, cst_core_unix_src_core_unix_ml$19, 1026, 27251, 27263],
    _b3_ = [0, cst_core_unix_src_core_unix_ml$19, 1017, 2],
    _b2_ = [0, 0, [0, 1, 0]],
    _b1_ = [0, 1, 0],
    _b0_ = [0, 0, 0],
    cst_pid = cst_pid$1,
    cst_mode = cst_mode$13,
    cst_waitpid_syscall_returned_i =
      "waitpid syscall returned invalid result for mode",
    _bZ_ = [0, cst_core_unix_src_core_unix_ml$19, 987, 26285, 26297],
    _bV_ = [0, cst_Any],
    _bW_ = [0, cst_My_group],
    _bX_ = [0, cst_Group],
    _bY_ = [0, cst_Pid],
    _bT_ = [0, "WUNTRACED"],
    _bU_ = [0, "WNOHANG"],
    _bR_ = [0, "core_unix/src/core_unix.ml.Fork_returned_negative_result"],
    _bS_ = [0, cst_none, 0, -1],
    _bM_ = [0, cst_Override],
    _bN_ = [0, cst_Extend],
    _bO_ = [0, cst_Replace],
    _bP_ = [0, cst_Replace_raw],
    cst_env = cst_env$2,
    cst_argv = "argv",
    cst_prog = cst_prog$2,
    cst_Unix_Exit_or_signal_or_sto = "Unix.Exit_or_signal_or_stop",
    _bL_ = [0, 0],
    _bK_ =
      [0,
       [11,
        "stopped by ",
        [2, 0, [11, cst_signal_number, [4, 0, 0, 0, [12, 41, 0]]]]],
       "stopped by %s (signal number %d)"],
    _bJ_ = [0, cst_Stop],
    cst_Unix_Exit_or_signal = "Unix.Exit_or_signal",
    _bI_ = [0, 0],
    _bG_ =
      [0,
       "core_unix/src/core_unix.ml.Exit_or_signal.Of_unix_got_invalid_status"],
    _bH_ = [0, cst_none, 0, -1],
    _bE_ =
      [0,
       [11,
        "died after receiving ",
        [2, 0, [11, cst_signal_number, [4, 0, 0, 0, [12, 41, 0]]]]],
       "died after receiving %s (signal number %d)"],
    _bD_ = [0, cst_Signal],
    cst_Unix_Exit = "Unix.Exit",
    _bC_ = [0, 0],
    _bA_ =
      [0, "core_unix/src/core_unix.ml.Exit.Exit_code_must_be_nonnegative"],
    _bB_ = [0, cst_none, 0, -1],
    cst_exited_normally = "exited normally",
    _by_ =
      [0, [11, "exited with code ", [4, 0, 0, 0, 0]], "exited with code %d"],
    _bx_ = [0, cst_Exit_non_zero],
    _bu_ = [0, "WEXITED"],
    _bv_ = [0, "WSIGNALED"],
    _bw_ = [0, "WSTOPPED"],
    cst_unsetenv = "unsetenv",
    cst_data = "data",
    cst_key = "key",
    _ap_ = [0, cst_E2BIG],
    _aq_ = [0, cst_EACCES],
    _ar_ = [0, cst_EAGAIN],
    _as_ = [0, cst_EBADF],
    _at_ = [0, cst_EBUSY],
    _au_ = [0, cst_ECHILD],
    _av_ = [0, cst_EDEADLK],
    _aw_ = [0, cst_EDOM],
    _ax_ = [0, cst_EEXIST],
    _ay_ = [0, cst_EFAULT],
    _az_ = [0, cst_EFBIG],
    _aA_ = [0, cst_EINTR],
    _aB_ = [0, cst_EINVAL],
    _aC_ = [0, cst_EIO],
    _aD_ = [0, cst_EISDIR],
    _aE_ = [0, cst_EMFILE],
    _aF_ = [0, cst_EMLINK],
    _aG_ = [0, cst_ENAMETOOLONG],
    _aH_ = [0, cst_ENFILE],
    _aI_ = [0, cst_ENODEV],
    _aJ_ = [0, cst_ENOENT],
    _aK_ = [0, cst_ENOEXEC],
    _aL_ = [0, cst_ENOLCK],
    _aM_ = [0, cst_ENOMEM],
    _aN_ = [0, cst_ENOSPC],
    _aO_ = [0, cst_ENOSYS],
    _aP_ = [0, cst_ENOTDIR],
    _aQ_ = [0, cst_ENOTEMPTY],
    _aR_ = [0, cst_ENOTTY],
    _aS_ = [0, cst_ENXIO],
    _aT_ = [0, cst_EPERM],
    _aU_ = [0, cst_EPIPE],
    _aV_ = [0, cst_ERANGE],
    _aW_ = [0, cst_EROFS],
    _aX_ = [0, cst_ESPIPE],
    _aY_ = [0, cst_ESRCH],
    _aZ_ = [0, cst_EXDEV],
    _a0_ = [0, cst_EWOULDBLOCK],
    _a1_ = [0, cst_EINPROGRESS],
    _a2_ = [0, cst_EALREADY],
    _a3_ = [0, cst_ENOTSOCK],
    _a4_ = [0, cst_EDESTADDRREQ],
    _a5_ = [0, cst_EMSGSIZE],
    _a6_ = [0, cst_EPROTOTYPE],
    _a7_ = [0, cst_ENOPROTOOPT],
    _a8_ = [0, cst_EPROTONOSUPPORT],
    _a9_ = [0, cst_ESOCKTNOSUPPORT],
    _a__ = [0, cst_EOPNOTSUPP],
    _a$_ = [0, cst_EPFNOSUPPORT],
    _ba_ = [0, cst_EAFNOSUPPORT],
    _bb_ = [0, cst_EADDRINUSE],
    _bc_ = [0, cst_EADDRNOTAVAIL],
    _bd_ = [0, cst_ENETDOWN],
    _be_ = [0, cst_ENETUNREACH],
    _bf_ = [0, cst_ENETRESET],
    _bg_ = [0, cst_ECONNABORTED],
    _bh_ = [0, cst_ECONNRESET],
    _bi_ = [0, cst_ENOBUFS],
    _bj_ = [0, cst_EISCONN],
    _bk_ = [0, cst_ENOTCONN],
    _bl_ = [0, cst_ESHUTDOWN],
    _bm_ = [0, cst_ETOOMANYREFS],
    _bn_ = [0, cst_ETIMEDOUT],
    _bo_ = [0, cst_ECONNREFUSED],
    _bp_ = [0, cst_EHOSTDOWN],
    _bq_ = [0, cst_EHOSTUNREACH],
    _br_ = [0, cst_ELOOP],
    _bs_ = [0, cst_EOVERFLOW],
    _bt_ = [0, cst_EUNKNOWNERR],
    cst_dir_handle = "dir_handle",
    cst_close_on_exec = "close_on_exec",
    cst_fd = "fd",
    cst_gid = cst_gid$2,
    cst_uid = cst_uid$2,
    cst_len$0 = cst_len$2,
    _ao_ = [0, [11, cst_0o, [4, 10, 0, 0, 0]], cst_0o_o],
    cst_perm = cst_perm$1,
    cst_filename = "filename",
    cst_dirname = "dirname",
    _am_ = [0, cst_Future],
    _an_ = [0, cst_Current],
    _ak_ = [0, cst_Fifo],
    _al_ = [0, cst_Other],
    _aj_ = [0, cst_Round_robin],
    _ae_ = [0, cst_machine$1],
    _af_ = [0, cst_version$1],
    _ag_ = [0, cst_release$1],
    _ah_ = [0, cst_nodename$1],
    _ai_ = [0, cst_sysname$1],
    cst_machine$0 = cst_machine$1,
    cst_version$0 = cst_version$1,
    cst_release$0 = cst_release$1,
    cst_nodename$0 = cst_nodename$1,
    cst_sysname$0 = cst_sysname$1,
    cst_core_unix_src_core_unix_ml$0 = cst_core_unix_src_core_unix_ml$21,
    cst_writev = "writev",
    cst_writev_assume_fd_is_nonblo = "writev_assume_fd_is_nonblocking",
    cst_count_0 = ": count < 0",
    cst_count_n_iovecs = ": count > n_iovecs",
    cst_IOVec_drop_n_length_iovec = "IOVec.drop: n > length iovec",
    cst_IOVec_of_bigstring = "IOVec.of_bigstring",
    cst_IOVec_of_string = "IOVec.of_string",
    cst_pos_0$0 = cst_pos_0$1,
    cst_pos_length_buf = ": pos > length buf",
    cst_len_0$0 = cst_len_0$1,
    cst_pos_len_length_buf = ": pos + len > length buf",
    _Z_ = [0, cst_len$2],
    ___ = [0, cst_pos$7],
    _$_ = [0, cst_buf$0],
    cst_len = cst_len$2,
    cst_pos = cst_pos$7,
    cst_buf = cst_buf$0,
    _Y_ = [0, "conf"],
    cst_sysconf_exn_value_not_avai =
      "[sysconf_exn]: value not available or limit is unspecified",
    _G_ = [0, cst_ARG_MAX],
    _H_ = [0, cst_CHILD_MAX],
    _I_ = [0, cst_HOST_NAME_MAX],
    _J_ = [0, cst_LOGIN_NAME_MAX],
    _K_ = [0, cst_OPEN_MAX],
    _L_ = [0, cst_PAGESIZE],
    _M_ = [0, cst_RE_DUP_MAX],
    _N_ = [0, cst_STREAM_MAX],
    _O_ = [0, cst_SYMLOOP_MAX],
    _P_ = [0, cst_TTY_NAME_MAX],
    _Q_ = [0, cst_TZNAME_MAX],
    _R_ = [0, cst_POSIX_VERSION],
    _S_ = [0, cst_PHYS_PAGES],
    _T_ = [0, cst_AVPHYS_PAGES],
    _U_ = [0, cst_IOV_MAX],
    _V_ = [0, cst_CLK_TCK],
    _W_ = [0, cst_NPROCESSORS_CONF],
    _X_ = [0, cst_NPROCESSORS_ONLN],
    _q_ = [0, cst_nivcsw$0],
    _r_ = [0, cst_nvcsw$0],
    _s_ = [0, cst_nsignals$0],
    _t_ = [0, cst_msgrcv$0],
    _u_ = [0, cst_msgsnd$0],
    _v_ = [0, cst_oublock$0],
    _w_ = [0, cst_inblock$0],
    _x_ = [0, cst_nswap$0],
    _y_ = [0, cst_majflt$0],
    _z_ = [0, cst_minflt$0],
    _A_ = [0, cst_isrss$0],
    _B_ = [0, cst_idrss$0],
    _C_ = [0, cst_ixrss$0],
    _D_ = [0, cst_maxrss$0],
    _E_ = [0, cst_stime$0],
    _F_ = [0, cst_utime$0],
    cst_nivcsw = cst_nivcsw$0,
    cst_nvcsw = cst_nvcsw$0,
    cst_nsignals = cst_nsignals$0,
    cst_msgrcv = cst_msgrcv$0,
    cst_msgsnd = cst_msgsnd$0,
    cst_oublock = cst_oublock$0,
    cst_inblock = cst_inblock$0,
    cst_nswap = cst_nswap$0,
    cst_majflt = cst_majflt$0,
    cst_minflt = cst_minflt$0,
    cst_isrss = cst_isrss$0,
    cst_idrss = cst_idrss$0,
    cst_ixrss = cst_ixrss$0,
    cst_maxrss = cst_maxrss$0,
    cst_stime = cst_stime$0,
    cst_utime = cst_utime$0,
    cst_limit = cst_limit$0,
    cst_resource$0 = cst_resource$1,
    cst_resource = cst_resource$1,
    _i_ = [0, cst_Core_file_size],
    _j_ = [0, cst_Cpu_seconds],
    _k_ = [0, cst_Data_segment],
    _l_ = [0, cst_File_size],
    _m_ = [0, cst_Num_file_descriptors],
    _n_ = [0, cst_Stack],
    _o_ = [0, cst_Virtual_memory],
    _p_ = [0, cst_Nice],
    _g_ = [0, cst_max$0],
    _h_ = [0, cst_cur$0],
    cst_max = cst_max$0,
    cst_cur = cst_cur$0,
    _e_ = [0, cst_Limit],
    _f_ = [0, cst_Infinity],
    _c_ = [0, cst_Limit],
    _d_ = [0, cst_Infinity],
    _b_ =
      [0,
       [11, cst_Unix_ext, [2, 0, [11, cst_pos_0$1, 0]]],
       "Unix_ext.%s: pos < 0"],
    cst_pos_0 = cst_pos_0$1,
    cst_len_0 = cst_len_0$1,
    _a_ =
      [0,
       [11, cst_Unix_ext, [2, 0, [11, ": length(str) < pos + len", 0]]],
       "Unix_ext.%s: length(str) < pos + len"],
    cst_machine = cst_machine$1,
    cst_version = cst_version$1,
    cst_release = cst_release$1,
    cst_nodename = cst_nodename$1,
    cst_sysname = cst_sysname$1,
    cst_t = cst_t$9,
    cst_core_unix_src_core_unix_ml = "core_unix/src/core_unix.ml:518:6",
    cst_t$0 = cst_t$9,
    cst_Core_unix_Exit_Exit_code_m =
      "Core_unix.Exit.Exit_code_must_be_nonnegative",
    cst_Core_unix_Exit_or_signal_O =
      "Core_unix.Exit_or_signal.Of_unix_got_invalid_status",
    cst_Core_unix_Fork_returned_ne = "Core_unix.Fork_returned_negative_result",
    cst_trunc = "trunc",
    cst_sync = "sync",
    cst_rsync = "rsync",
    cst_nonblock = "nonblock",
    cst_nofollow = "nofollow",
    cst_noctty = "noctty",
    cst_noatime = "noatime",
    cst_excl = "excl",
    cst_dsync = "dsync",
    cst_directory = "directory",
    cst_direct = "direct",
    cst_creat = "creat",
    cst_cloexec = "cloexec",
    cst_async = "async",
    cst_append = "append",
    cst_wronly = "wronly",
    cst_rdwr = "rdwr",
    cst_rdonly = "rdonly",
    cst_Core_unix_Passwd_Getbyname = "Core_unix.Passwd.Getbyname",
    cst_Core_unix_Passwd_Getbyuid = "Core_unix.Passwd.Getbyuid",
    cst_Core_unix_Group_Getbyname = "Core_unix.Group.Getbyname",
    cst_Core_unix_Group_Getbygid = "Core_unix.Group.Getbygid",
    cst_Inet6 = cst_Inet6$0,
    cst_Inet = cst_Inet$0,
    cst_Unix = cst_Unix$0,
    cst_core_unix_src_core_unix_ml$1 = "core_unix/src/core_unix.ml:2334:4",
    cst_t$1 = cst_t$9,
    cst_core_unix_src_core_unix_ml$2 = "core_unix/src/core_unix.ml:2333:2",
    cst_t$2 = cst_t$9,
    cst_t$3 = cst_t$9,
    cst_core_unix_src_core_unix_ml$3 = "core_unix/src/core_unix.ml:2380:4",
    cst_t$4 = cst_t$9,
    cst_2001_db8_1 = cst_2001_db8_1$9,
    cst_2001_db8_1$0 = cst_2001_db8_1$10,
    cst_2001_db8_1$1 = cst_2001_db8_1$10,
    cst_2001_db8_1$2 = cst_2001_db8_1$9,
    cst_2001_db8_1$3 = cst_2001_db8_1$10,
    cst_2001_DB8_1 = "2001:DB8::1",
    cst_2001_db8_1_0_0_1 = cst_2001_db8_1_0_0_1$6,
    cst_2001_db8_1_0_0_1$0 = cst_2001_db8_1_0_0_1$7,
    cst_2001_db8_1_0_0_1$1 = cst_2001_db8_1_0_0_1$7,
    cst_2001_db8_1_0_0_1$2 = cst_2001_db8_1_0_0_1$6,
    cst_2001_db8_1_0_0_1$3 = cst_2001_db8_1_0_0_1$7,
    cst_2001_db8_0_0_1_1 = "2001:db8:0:0:1::1",
    cst_2001_db8_1_0_0_1$4 = cst_2001_db8_1_0_0_1$6,
    cst_2001_db8_1_0_0_1$5 = cst_2001_db8_1_0_0_1$7,
    cst_2001_db8_0_0_1_0_0_1 = "2001:db8:0:0:1:0:0:1",
    cst_2001_db8_0_1_1_1_1_1 = cst_2001_db8_0_1_1_1_1_1$6,
    cst_2001_db8_0_1_1_1_1_1$0 = cst_2001_db8_0_1_1_1_1_1$7,
    cst_2001_db8_0_1_1_1_1_1$1 = cst_2001_db8_0_1_1_1_1_1$7,
    cst_2001_db8_0_1_1_1_1_1$2 = cst_2001_db8_0_1_1_1_1_1$6,
    cst_2001_db8_0_1_1_1_1_1$3 = cst_2001_db8_0_1_1_1_1_1$7,
    cst_2001_db8_1_1_1_1_1 = "2001:db8::1:1:1:1:1",
    cst_2001_db8_0_1_1_1_1_1$4 = cst_2001_db8_0_1_1_1_1_1$6,
    cst_2001_db8_0_1_1_1_1_1$5 = cst_2001_db8_0_1_1_1_1_1$7,
    cst_2001_db8_0000_1_1_1_1_1 = "2001:db8:0000:1:1:1:1:1",
    cst_2001_db8_2_1 = "\r2001:db8::2:1",
    cst_2001_db8_2_1$0 = cst_2001_db8_2_1$2,
    cst_2001_db8_2_1$1 = cst_2001_db8_2_1$2,
    cst_2001_db8_1$4 = cst_2001_db8_1$9,
    cst_2001_db8_1$5 = cst_2001_db8_1$10,
    cst_2001_db8_1$6 = cst_2001_db8_1$10,
    cst_2001_db8_1$7 = cst_2001_db8_1$9,
    cst_2001_db8_1$8 = cst_2001_db8_1$10,
    cst_2001_0db8_0001 = "2001:0db8::0001",
    cst_ffff_192_0_2_128 = cst_ffff_192_0_2_128$4,
    cst_ffff_192_0_2_128$0 = cst_ffff_192_0_2_128$5,
    cst_ffff_192_0_2_128$1 = cst_ffff_192_0_2_128$5,
    cst_ffff_192_0_2_128$2 = cst_ffff_192_0_2_128$4,
    cst_ffff_192_0_2_128$3 = cst_ffff_192_0_2_128$5,
    cst_ffff_c000_0280 = "::ffff:c000:0280",
    cst_0_0_0_0_0_0_0_0 = "0:0:0:0:0:0:0:0",
    cst_1 = cst_1$4,
    cst_1$0 = cst_1$5,
    cst_1$1 = cst_1$5,
    cst_1$2 = cst_1$4,
    cst_1$3 = cst_1$5,
    cst_0_0_0_0_0_0_0_1 = "0:0:0:0:0:0:0:1",
    cst_2001_db8_85a3_8a2e_370_733 = cst_2001_db8_85a3_8a2e_370_733$6,
    cst_2001_db8_85a3_8a2e_370_733$0 = cst_2001_db8_85a3_8a2e_370_733$7,
    cst_2001_db8_85a3_8a2e_370_733$1 = cst_2001_db8_85a3_8a2e_370_733$7,
    cst_2001_db8_85a3_8a2e_370_733$2 = cst_2001_db8_85a3_8a2e_370_733$6,
    cst_2001_db8_85a3_8a2e_370_733$3 = cst_2001_db8_85a3_8a2e_370_733$7,
    cst_2001_db8_85a3_0_0_8a2e_370 = "2001:db8:85a3:0:0:8a2e:370:7334",
    cst_2001_db8_85a3_8a2e_370_733$4 = cst_2001_db8_85a3_8a2e_370_733$6,
    cst_2001_db8_85a3_8a2e_370_733$5 = cst_2001_db8_85a3_8a2e_370_733$7,
    cst_2001_0db8_85a3_0000_0000_8 = "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
    cst_255_255_255_255 = "\x0f255.255.255.255",
    cst_255_255_255_255$0 = cst_255_255_255_255$2,
    cst_255_255_255_255$1 = cst_255_255_255_255$2,
    cst_192_168_1_101 = "\r192.168.1.101",
    cst_192_168_1_101$0 = cst_192_168_1_101$2,
    cst_192_168_1_101$1 = cst_192_168_1_101$2,
    cst_127_0_0_1 = "\t127.0.0.1",
    cst_127_0_0_1$0 = cst_127_0_0_1$2,
    cst_127_0_0_1$1 = cst_127_0_0_1$2,
    cst_10_0_0_0 = "\b10.0.0.0",
    cst_10_0_0_0$0 = cst_10_0_0_0$2,
    cst_10_0_0_0$1 = cst_10_0_0_0$2,
    cst_0_0_0_0 = "\x070.0.0.0",
    cst_0_0_0_0$0 = cst_0_0_0_0$2,
    cst_0_0_0_0$1 = cst_0_0_0_0$2,
    cst_Core_unix_Host_Getbyname = "Core_unix.Host.Getbyname",
    cst_Core_unix_Host_Getbyaddr = "Core_unix.Host.Getbyaddr",
    cst_Core_unix_Inet_addr_Get_in = "Core_unix.Inet_addr.Get_inet_addr",
    cst_bits = "bits",
    cst_address = cst_address$0,
    cst_t$5 = cst_t$9,
    cst_core_unix_src_core_unix_ml$4 = "core_unix/src/core_unix.ml:2524:8",
    cst_t$6 = cst_t$9,
    cst_224_0_0_0_4 = "224.0.0.0/4",
    cst_Core_unix_Protocol_Getbyna = "Core_unix.Protocol.Getbyname",
    cst_Core_unix_Protocol_Getbynu = "Core_unix.Protocol.Getbynumber",
    cst_Core_unix_Service_Getbynam = "Core_unix.Service.Getbyname",
    cst_Core_unix_Service_Getbypor = "Core_unix.Service.Getbyport",
    _fS_ =
      [0,
       [0, cst_PF_UNIX, 0],
       [0, [0, cst_PF_INET, 0], [0, [0, cst_PF_INET6, 0], 0]]],
    cst_socket_domain = cst_socket_domain$1,
    cst_core_unix_src_core_unix_ml$6 = "core_unix/src/core_unix.ml:2699:0",
    cst_socket_domain$0 = cst_socket_domain$1,
    _f2_ =
      [0,
       [0, cst_SOCK_STREAM, 0],
       [0,
        [0, cst_SOCK_DGRAM, 0],
        [0, [0, cst_SOCK_RAW, 0], [0, [0, cst_SOCK_SEQPACKET, 0], 0]]]],
    cst_socket_type = cst_socket_type$1,
    cst_core_unix_src_core_unix_ml$8 = "core_unix/src/core_unix.ml:2705:0",
    cst_socket_type$0 = cst_socket_type$1,
    cst_ADDR_INET = cst_ADDR_INET$1,
    cst_ADDR_UNIX = cst_ADDR_UNIX$1,
    cst_sockaddr = cst_sockaddr$1,
    cst_core_unix_src_core_unix_ml$10 = "core_unix/src/core_unix.ml:2712:0",
    cst_sockaddr$0 = cst_sockaddr$1,
    cst_ADDR_INET$0 = cst_ADDR_INET$1,
    cst_ADDR_UNIX$0 = cst_ADDR_UNIX$1,
    cst_sockaddr_blocking_sexp = cst_sockaddr_blocking_sexp$1,
    cst_core_unix_src_core_unix_ml$12 = "core_unix/src/core_unix.ml:2717:0",
    cst_sockaddr_blocking_sexp$0 = cst_sockaddr_blocking_sexp$1,
    _h8_ =
      [0,
       [0, cst_Packet, 0],
       [0, [0, cst_Inet4, 0], [0, [0, cst_Inet6$0, 0], 0]]],
    cst_t$7 = cst_t$9,
    cst_core_unix_src_core_unix_ml$14 = "core_unix/src/core_unix.ml:3212:4",
    cst_t$8 = cst_t$9,
    cst_core_unix = cst_core_unix$0,
    cst_Core_unix = cst_Core_unix$0;
   function atom(x){return [0, x];}
   function retry_until_no_eintr(f){
    for(;;)
     try{var _ws_ = caml_call1(f, 0); return _ws_;}
     catch(_wt_){
      var _wq_ = caml_wrap_exception(_wt_);
      if(_wq_[1] === UnixLabels[1]){
       var _wr_ = _wq_[2];
       if(typeof _wr_ === "number" && 11 === _wr_) continue;
      }
      throw caml_maybe_attach_backtrace(_wq_, 0);
     }
   }
   function sexp_to_string_hum(sexp){
    var
     buf = caml_call1(Base_Buffer[2], 100),
     fmt = caml_call1(Stdlib_Format[114], buf);
    caml_call2(Stdlib_Format[42], fmt, 10000);
    caml_call2(Core_Sexp[72], fmt, sexp);
    caml_call2(Stdlib_Format[38], fmt, 0);
    return caml_call1(Base_Buffer[3], buf);
   }
   var Private = [0, sexp_to_string_hum];
   function improve(opt, f, make_arg_sexps){
    if(opt) var sth = opt[1], restart = sth; else var restart = 0;
    try{
     var _wp_ = restart ? retry_until_no_eintr(f) : caml_call1(f, 0);
     return _wp_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== UnixLabels[1]) throw caml_maybe_attach_backtrace(exn, 0);
     var
      s = exn[3],
      e = exn[2],
      l = caml_call1(make_arg_sexps, 0),
      _wn_ =
        function(param){
         var value = param[2], name = param[1];
         return [1, [0, [0, name], [0, value, 0]]];
        },
      _wo_ = sexp_to_string_hum([1, caml_call2(Core_List[51], l, _wn_)]);
     throw caml_maybe_attach_backtrace([0, UnixLabels[1], e, s, _wo_], 0);
    }
   }
   var sprintf = Core_Printf[2];
   function check_bytes_args(loc, str, pos, len){
    if(caml_call2(Core[92], pos, 0)){
     var _wj_ = caml_call2(Core[18], loc, cst_pos_0);
     caml_call1(Core[5], _wj_);
    }
    if(caml_call2(Core[92], len, 0)){
     var _wk_ = caml_call2(Core[18], loc, cst_len_0);
     caml_call1(Core[5], _wk_);
    }
    var
     str_len = caml_ml_bytes_length(str),
     _wl_ = caml_call2(Core[92], str_len, pos + len | 0);
    if(! _wl_) return _wl_;
    var _wm_ = caml_call2(Core_Printf[2], _a_, loc);
    return caml_call1(Core[5], _wm_);
   }
   function get_opt_pos(loc, param){
    if(! param) return 0;
    var pos = param[1];
    if(caml_call2(Core[92], pos, 0)){
     var _wi_ = caml_call2(Core_Printf[2], _b_, loc);
     caml_call1(Core[5], _wi_);
    }
    return pos;
   }
   function get_opt_len(str, pos, param){
    if(! param) return caml_ml_bytes_length(str) - pos | 0;
    var len = param[1];
    return len;
   }
   function read_assume_fd_is_nonblocking(fd, pos, len, buf){
    var pos$0 = get_opt_pos(loc, pos), len$0 = get_opt_len(buf, pos$0, len);
    check_bytes_args(loc, buf, pos$0, len$0);
    return runtime.core_unix_read_assume_fd_is_nonblocking_stub
            (fd, buf, pos$0, len$0);
   }
   function write_assume_fd_is_nonblocking(fd, pos, len, buf){
    var pos$0 = get_opt_pos(loc$0, pos), len$0 = get_opt_len(buf, pos$0, len);
    check_bytes_args(loc$0, buf, pos$0, len$0);
    return runtime.core_unix_write_assume_fd_is_nonblocking_stub
            (fd, buf, pos$0, len$0);
   }
   function mknod(opt, _wh_, _wg_, _wf_, pathname){
    if(opt) var sth = opt[1], file_kind = sth; else var file_kind = 0;
    if(_wh_) var sth$0 = _wh_[1], perm = sth$0; else var perm = 384;
    if(_wg_) var sth$1 = _wg_[1], major = sth$1; else var major = 0;
    if(_wf_) var sth$2 = _wf_[1], minor = sth$2; else var minor = 0;
    return runtime.core_unix_mknod_stub
            (pathname, file_kind, perm, major, minor);
   }
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _wc_ = sexp_005[1];
      b:
      if(caml_string_notequal(_wc_, cst_Infinity)){
       if(caml_string_notequal(_wc_, cst_Limit)){
        if(! caml_string_notequal(_wc_, cst_infinity)) break b;
        if(caml_string_notequal(_wc_, cst_limit$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
      }
      return 0;
     }
     var _wd_ = sexp_005[1];
     if(! _wd_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _we_ = _wd_[1];
     if(0 !== _we_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var tag_006 = _we_[1];
     b:
     if(caml_string_notequal(tag_006, cst_Infinity)){
      if(caml_string_notequal(tag_006, cst_Limit)){
       if(! caml_string_notequal(tag_006, cst_infinity)) break b;
       if(caml_string_notequal(tag_006, cst_limit$0)) break a;
      }
      var sexp_args_007 = _wd_[2];
      if(sexp_args_007 && ! sexp_args_007[2]){
       var
        arg0_008 = sexp_args_007[1],
        res0_009 = caml_call1(Core[434], arg0_008);
       return [0, res0_009];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_003,
               tag_006,
               sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t(param){
    if(! param) return _d_;
    var arg0_010 = param[1], res0_011 = caml_call1(Core[433], arg0_010);
    return [1, [0, _c_, [0, res0_011, 0]]];
   }
   function max(t1, t2){
    if(t1 && t2){
     var n2 = t2[1], n1 = t1[1];
     return [0, caml_call2(Core_Int64[86], n1, n2)];
    }
    return 0;
   }
   function min(t1, t2){
    if(t1){
     if(t2){
      var n2 = t2[1], n1 = t1[1];
      return [0, caml_call2(Core_Int64[85], n1, n2)];
     }
     var t = t1;
    }
    else
     var t = t2;
    return t;
   }
   function limit_of_sexp(sexp_016){
    a:
    {
     if(0 === sexp_016[0]){
      var _v$_ = sexp_016[1];
      b:
      if(caml_string_notequal(_v$_, cst_Infinity)){
       if(caml_string_notequal(_v$_, cst_Limit)){
        if(! caml_string_notequal(_v$_, cst_infinity)) break b;
        if(caml_string_notequal(_v$_, cst_limit$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_014, sexp_016);
      }
      return 0;
     }
     var _wa_ = sexp_016[1];
     if(! _wa_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_014, sexp_016);
     var _wb_ = _wa_[1];
     if(0 !== _wb_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_014, sexp_016);
     var tag_017 = _wb_[1];
     b:
     if(caml_string_notequal(tag_017, cst_Infinity)){
      if(caml_string_notequal(tag_017, cst_Limit)){
       if(! caml_string_notequal(tag_017, cst_infinity)) break b;
       if(caml_string_notequal(tag_017, cst_limit$0)) break a;
      }
      var sexp_args_018 = _wa_[2];
      if(sexp_args_018 && ! sexp_args_018[2]){
       var
        arg0_019 = sexp_args_018[1],
        res0_020 = caml_call1(Core[434], arg0_019);
       return [0, res0_020];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_014,
               tag_017,
               sexp_016);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_014, sexp_016);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_014, sexp_016);
   }
   function sexp_of_limit(param){
    if(! param) return _f_;
    var arg0_021 = param[1], res0_022 = caml_call1(Core[433], arg0_021);
    return [1, [0, _e_, [0, res0_022, 0]]];
   }
   function t_of_sexp$0(x_025){
    function _v8_(param){
     var max = param[2][1], cur = param[1];
     return [0, cur, max];
    }
    var _v9_ = 0;
    function _v__(param){
     return caml_string_notequal(param, cst_cur$0)
             ? caml_string_notequal(param, cst_max$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_024,
             [0, cst_cur, 1, limit_of_sexp, [0, cst_max, 1, limit_of_sexp, 0]],
             _v__,
             _v9_,
             _v8_,
             x_025);
   }
   function sexp_of_t$0(param){
    var
     max_029 = param[2],
     cur_027 = param[1],
     arg_030 = sexp_of_limit(max_029),
     bnds_026 = [0, [1, [0, _g_, [0, arg_030, 0]]], 0],
     arg_028 = sexp_of_limit(cur_027),
     bnds_026$0 = [0, [1, [0, _h_, [0, arg_028, 0]]], bnds_026];
    return [1, bnds_026$0];
   }
   function sexp_of_resource(param){
    switch(param){
      case 0:
       return _i_;
      case 1:
       return _j_;
      case 2:
       return _k_;
      case 3:
       return _l_;
      case 4:
       return _m_;
      case 5:
       return _n_;
      case 6:
       return _o_;
      default: return _p_;
    }
   }
   var
    core_file_size = 0,
    cpu_seconds = 1,
    data_segment = 2,
    file_size = 3,
    num_file_descriptors = 4,
    stack = 5;
   function resource_of_sexp(sexp_034){
    a:
    {
     b:
     {
      if(0 === sexp_034[0]){
       var
        _v2_ = sexp_034[1],
        _v3_ = caml_string_compare(_v2_, cst_core_file_size);
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _v3_){
               if(0 < _v3_){
                if(! caml_string_notequal(_v2_, cst_cpu_seconds)) break i;
                if(! caml_string_notequal(_v2_, cst_data_segment)) break h;
                if(! caml_string_notequal(_v2_, cst_file_size)) break g;
                if(! caml_string_notequal(_v2_, cst_nice)) break f;
                if(! caml_string_notequal(_v2_, cst_num_file_descriptors))
                 break e;
                if(! caml_string_notequal(_v2_, cst_stack)) break d;
                if(caml_string_notequal(_v2_, cst_virtual_memory)) break b;
                break c;
               }
              }
              else if(caml_string_notequal(_v2_, cst_Core_file_size)){
               if(! caml_string_notequal(_v2_, cst_Cpu_seconds)) break i;
               if(! caml_string_notequal(_v2_, cst_Data_segment)) break h;
               if(! caml_string_notequal(_v2_, cst_File_size)) break g;
               if(! caml_string_notequal(_v2_, cst_Nice)) break f;
               if(! caml_string_notequal(_v2_, cst_Num_file_descriptors))
                break e;
               if(! caml_string_notequal(_v2_, cst_Stack)) break d;
               if(caml_string_notequal(_v2_, cst_Virtual_memory)) break b;
               break c;
              }
              var resource = 0;
              break a;
             }
             var resource = 1;
             break a;
            }
            var resource = 2;
            break a;
           }
           var resource = 3;
           break a;
          }
          var resource = 7;
          break a;
         }
         var resource = 4;
         break a;
        }
        var resource = 5;
        break a;
       }
       var resource = 6;
       break a;
      }
      var _v4_ = sexp_034[1];
      if(! _v4_){
       var
        resource =
          caml_call2(Sexplib0_Sexp_conv_error[11], error_source_033, sexp_034);
       break a;
      }
      var _v5_ = _v4_[1];
      if(0 !== _v5_[0]){
       var
        resource =
          caml_call2(Sexplib0_Sexp_conv_error[10], error_source_033, sexp_034);
       break a;
      }
      var
       _v6_ = _v5_[1],
       _v7_ = caml_string_compare(_v6_, cst_core_file_size);
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             if(0 <= _v7_){
              if(0 < _v7_){
               if(! caml_string_notequal(_v6_, cst_cpu_seconds)) break i;
               if(! caml_string_notequal(_v6_, cst_data_segment)) break h;
               if(! caml_string_notequal(_v6_, cst_file_size)) break g;
               if(! caml_string_notequal(_v6_, cst_nice)) break f;
               if(! caml_string_notequal(_v6_, cst_num_file_descriptors))
                break e;
               if(! caml_string_notequal(_v6_, cst_stack)) break d;
               if(caml_string_notequal(_v6_, cst_virtual_memory)) break b;
               break c;
              }
             }
             else if(caml_string_notequal(_v6_, cst_Core_file_size)){
              if(! caml_string_notequal(_v6_, cst_Cpu_seconds)) break i;
              if(! caml_string_notequal(_v6_, cst_Data_segment)) break h;
              if(! caml_string_notequal(_v6_, cst_File_size)) break g;
              if(! caml_string_notequal(_v6_, cst_Nice)) break f;
              if(! caml_string_notequal(_v6_, cst_Num_file_descriptors))
               break e;
              if(! caml_string_notequal(_v6_, cst_Stack)) break d;
              if(caml_string_notequal(_v6_, cst_Virtual_memory)) break b;
              break c;
             }
             var
              resource =
                caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
             break a;
            }
            var
             resource =
               caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
            break a;
           }
           var
            resource =
              caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
           break a;
          }
          var
           resource =
             caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
          break a;
         }
         var
          resource =
            caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
         break a;
        }
        var
         resource =
           caml_call2(Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
        break a;
       }
       var
        resource =
          caml_call2(Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
       break a;
      }
      var
       resource =
         caml_call2(Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
      break a;
     }
     var
      resource =
        caml_call2(Sexplib0_Sexp_conv_error[12], error_source_033, sexp_034);
    }
    if(7 > resource) return resource;
    var resource$0 = nice[1];
    return resource$0;
   }
   function get(resource){
    function _v1_(param){
     return [0, [0, cst_resource, sexp_of_resource(resource)], 0];
    }
    return improve
            (0,
             function(param){return runtime.core_unix_getrlimit(resource);},
             _v1_);
   }
   function set(resource, t){
    function _vZ_(param){
     var _v0_ = [0, [0, cst_limit, sexp_of_t$0(t)], 0];
     return [0, [0, cst_resource$0, sexp_of_resource(resource)], _v0_];
    }
    return improve
            (0,
             function(param){return runtime.core_unix_setrlimit(resource, t);},
             _vZ_);
   }
   function t_of_sexp$1(x_037){
    function _vI_(param){
     var
      _vL_ = param[2],
      _vM_ = _vL_[2],
      _vN_ = _vM_[2],
      _vO_ = _vN_[2],
      _vP_ = _vO_[2],
      _vQ_ = _vP_[2],
      _vR_ = _vQ_[2],
      _vS_ = _vR_[2],
      _vT_ = _vS_[2],
      _vU_ = _vT_[2],
      _vV_ = _vU_[2],
      _vW_ = _vV_[2],
      _vX_ = _vW_[2],
      _vY_ = _vX_[2],
      nivcsw = _vY_[2][1],
      nvcsw = _vY_[1],
      nsignals = _vX_[1],
      msgrcv = _vW_[1],
      msgsnd = _vV_[1],
      oublock = _vU_[1],
      inblock = _vT_[1],
      nswap = _vS_[1],
      majflt = _vR_[1],
      minflt = _vQ_[1],
      isrss = _vP_[1],
      idrss = _vO_[1],
      ixrss = _vN_[1],
      maxrss = _vM_[1],
      stime = _vL_[1],
      utime = param[1];
     return [0,
             utime,
             stime,
             maxrss,
             ixrss,
             idrss,
             isrss,
             minflt,
             majflt,
             nswap,
             inblock,
             oublock,
             msgsnd,
             msgrcv,
             nsignals,
             nvcsw,
             nivcsw];
    }
    var _vJ_ = 0;
    function _vK_(param){
     var switch$0 = caml_string_compare(param, cst_msgsnd$0);
     if(0 <= switch$0){
      if(0 >= switch$0) return 11;
      if(! caml_string_notequal(param, cst_nivcsw$0)) return 15;
      if(! caml_string_notequal(param, cst_nsignals$0)) return 13;
      if(! caml_string_notequal(param, cst_nswap$0)) return 8;
      if(! caml_string_notequal(param, cst_nvcsw$0)) return 14;
      if(! caml_string_notequal(param, cst_oublock$0)) return 10;
      if(! caml_string_notequal(param, cst_stime$0)) return 1;
      if(! caml_string_notequal(param, cst_utime$0)) return 0;
     }
     else{
      if(! caml_string_notequal(param, cst_idrss$0)) return 4;
      if(! caml_string_notequal(param, cst_inblock$0)) return 9;
      if(! caml_string_notequal(param, cst_isrss$0)) return 5;
      if(! caml_string_notequal(param, cst_ixrss$0)) return 3;
      if(! caml_string_notequal(param, cst_majflt$0)) return 7;
      if(! caml_string_notequal(param, cst_maxrss$0)) return 2;
      if(! caml_string_notequal(param, cst_minflt$0)) return 6;
      if(! caml_string_notequal(param, cst_msgrcv$0)) return 12;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_036,
             [0,
              cst_utime,
              1,
              Core[368],
              [0,
               cst_stime,
               1,
               Core[368],
               [0,
                cst_maxrss,
                1,
                Core[434],
                [0,
                 cst_ixrss,
                 1,
                 Core[434],
                 [0,
                  cst_idrss,
                  1,
                  Core[434],
                  [0,
                   cst_isrss,
                   1,
                   Core[434],
                   [0,
                    cst_minflt,
                    1,
                    Core[434],
                    [0,
                     cst_majflt,
                     1,
                     Core[434],
                     [0,
                      cst_nswap,
                      1,
                      Core[434],
                      [0,
                       cst_inblock,
                       1,
                       Core[434],
                       [0,
                        cst_oublock,
                        1,
                        Core[434],
                        [0,
                         cst_msgsnd,
                         1,
                         Core[434],
                         [0,
                          cst_msgrcv,
                          1,
                          Core[434],
                          [0,
                           cst_nsignals,
                           1,
                           Core[434],
                           [0,
                            cst_nvcsw,
                            1,
                            Core[434],
                            [0, cst_nivcsw, 1, Core[434], 0]]]]]]]]]]]]]]]],
             _vK_,
             _vJ_,
             _vI_,
             x_037);
   }
   function sexp_of_t$1(param){
    var
     nivcsw_069 = param[16],
     nvcsw_067 = param[15],
     nsignals_065 = param[14],
     msgrcv_063 = param[13],
     msgsnd_061 = param[12],
     oublock_059 = param[11],
     inblock_057 = param[10],
     nswap_055 = param[9],
     majflt_053 = param[8],
     minflt_051 = param[7],
     isrss_049 = param[6],
     idrss_047 = param[5],
     ixrss_045 = param[4],
     maxrss_043 = param[3],
     stime_041 = param[2],
     utime_039 = param[1],
     arg_070 = caml_call1(Core[433], nivcsw_069),
     bnds_038 = [0, [1, [0, _q_, [0, arg_070, 0]]], 0],
     arg_068 = caml_call1(Core[433], nvcsw_067),
     bnds_038$0 = [0, [1, [0, _r_, [0, arg_068, 0]]], bnds_038],
     arg_066 = caml_call1(Core[433], nsignals_065),
     bnds_038$1 = [0, [1, [0, _s_, [0, arg_066, 0]]], bnds_038$0],
     arg_064 = caml_call1(Core[433], msgrcv_063),
     bnds_038$2 = [0, [1, [0, _t_, [0, arg_064, 0]]], bnds_038$1],
     arg_062 = caml_call1(Core[433], msgsnd_061),
     bnds_038$3 = [0, [1, [0, _u_, [0, arg_062, 0]]], bnds_038$2],
     arg_060 = caml_call1(Core[433], oublock_059),
     bnds_038$4 = [0, [1, [0, _v_, [0, arg_060, 0]]], bnds_038$3],
     arg_058 = caml_call1(Core[433], inblock_057),
     bnds_038$5 = [0, [1, [0, _w_, [0, arg_058, 0]]], bnds_038$4],
     arg_056 = caml_call1(Core[433], nswap_055),
     bnds_038$6 = [0, [1, [0, _x_, [0, arg_056, 0]]], bnds_038$5],
     arg_054 = caml_call1(Core[433], majflt_053),
     bnds_038$7 = [0, [1, [0, _y_, [0, arg_054, 0]]], bnds_038$6],
     arg_052 = caml_call1(Core[433], minflt_051),
     bnds_038$8 = [0, [1, [0, _z_, [0, arg_052, 0]]], bnds_038$7],
     arg_050 = caml_call1(Core[433], isrss_049),
     bnds_038$9 = [0, [1, [0, _A_, [0, arg_050, 0]]], bnds_038$8],
     arg_048 = caml_call1(Core[433], idrss_047),
     bnds_038$10 = [0, [1, [0, _B_, [0, arg_048, 0]]], bnds_038$9],
     arg_046 = caml_call1(Core[433], ixrss_045),
     bnds_038$11 = [0, [1, [0, _C_, [0, arg_046, 0]]], bnds_038$10],
     arg_044 = caml_call1(Core[433], maxrss_043),
     bnds_038$12 = [0, [1, [0, _D_, [0, arg_044, 0]]], bnds_038$11],
     arg_042 = caml_call1(Core[367], stime_041),
     bnds_038$13 = [0, [1, [0, _E_, [0, arg_042, 0]]], bnds_038$12],
     arg_040 = caml_call1(Core[367], utime_039),
     bnds_038$14 = [0, [1, [0, _F_, [0, arg_040, 0]]], bnds_038$13];
    return [1, bnds_038$14];
   }
   function nivcsw(r){return r[16];}
   function nvcsw(r){return r[15];}
   function nsignals(r){return r[14];}
   function msgrcv(r){return r[13];}
   function msgsnd(r){return r[12];}
   function oublock(r){return r[11];}
   function inblock(r){return r[10];}
   function nswap(r){return r[9];}
   function majflt(r){return r[8];}
   function minflt(r){return r[7];}
   function isrss(r){return r[6];}
   function idrss(r){return r[5];}
   function ixrss(r){return r[4];}
   function maxrss(r){return r[3];}
   function stime(r){return r[2];}
   function utime(r){return r[1];}
   function get$0(who){
    var _vH_ = 925480876 <= who ? 0 : 1;
    return runtime.core_unix_getrusage(_vH_);
   }
   function add(t1, t2){
    return [0,
            t1[1] + t2[1],
            t1[2] + t2[2],
            caml_int64_add(t1[3], t2[3]),
            caml_int64_add(t1[4], t2[4]),
            caml_int64_add(t1[5], t2[5]),
            caml_int64_add(t1[6], t2[6]),
            caml_int64_add(t1[7], t2[7]),
            caml_int64_add(t1[8], t2[8]),
            caml_int64_add(t1[9], t2[9]),
            caml_int64_add(t1[10], t2[10]),
            caml_int64_add(t1[11], t2[11]),
            caml_int64_add(t1[12], t2[12]),
            caml_int64_add(t1[13], t2[13]),
            caml_int64_add(t1[14], t2[14]),
            caml_int64_add(t1[15], t2[15]),
            caml_int64_add(t1[16], t2[16])];
   }
   var
    Resource_usage =
      [0,
       t_of_sexp$1,
       sexp_of_t$1,
       nivcsw,
       nvcsw,
       nsignals,
       msgrcv,
       msgsnd,
       oublock,
       inblock,
       nswap,
       majflt,
       minflt,
       isrss,
       idrss,
       ixrss,
       maxrss,
       stime,
       utime,
       get$0,
       add];
   function sysconf_of_sexp(sexp_074){
    a:
    {
     if(0 === sexp_074[0]){
      var _vx_ = sexp_074[1], _vy_ = caml_string_compare(_vx_, cst_aRG_MAX);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       if(0 <= _vy_){
                        if(0 >= _vy_) break j;
                        var _vz_ = caml_string_compare(_vx_, cst_oPEN_MAX);
                        if(0 > _vz_){
                         if(! caml_string_notequal(_vx_, cst_aVPHYS_PAGES)) break i;
                         if(! caml_string_notequal(_vx_, cst_cHILD_MAX)) break h;
                         if(! caml_string_notequal(_vx_, cst_cLK_TCK)) break g;
                         if(! caml_string_notequal(_vx_, cst_hOST_NAME_MAX)) break f;
                         if(! caml_string_notequal(_vx_, cst_iOV_MAX)) break e;
                         if(! caml_string_notequal(_vx_, cst_lOGIN_NAME_MAX))
                          break d;
                         if(! caml_string_notequal(_vx_, cst_nPROCESSORS_CONF))
                          break c;
                         if(caml_string_notequal(_vx_, cst_nPROCESSORS_ONLN))
                          break a;
                         break b;
                        }
                        if(0 < _vz_){
                         if(! caml_string_notequal(_vx_, cst_pAGESIZE)) break r;
                         if(! caml_string_notequal(_vx_, cst_pHYS_PAGES)) break q;
                         if(! caml_string_notequal(_vx_, cst_pOSIX_VERSION)) break p;
                         if(! caml_string_notequal(_vx_, cst_rE_DUP_MAX)) break o;
                         if(! caml_string_notequal(_vx_, cst_sTREAM_MAX)) break n;
                         if(! caml_string_notequal(_vx_, cst_sYMLOOP_MAX)) break m;
                         if(! caml_string_notequal(_vx_, cst_tTY_NAME_MAX)) break l;
                         if(caml_string_notequal(_vx_, cst_tZNAME_MAX)) break a;
                         break k;
                        }
                       }
                       else{
                        var _vA_ = caml_string_compare(_vx_, cst_OPEN_MAX);
                        if(0 > _vA_){
                         if(! caml_string_notequal(_vx_, cst_ARG_MAX)) break j;
                         if(! caml_string_notequal(_vx_, cst_AVPHYS_PAGES)) break i;
                         if(! caml_string_notequal(_vx_, cst_CHILD_MAX)) break h;
                         if(! caml_string_notequal(_vx_, cst_CLK_TCK)) break g;
                         if(! caml_string_notequal(_vx_, cst_HOST_NAME_MAX)) break f;
                         if(! caml_string_notequal(_vx_, cst_IOV_MAX)) break e;
                         if(! caml_string_notequal(_vx_, cst_LOGIN_NAME_MAX))
                          break d;
                         if(! caml_string_notequal(_vx_, cst_NPROCESSORS_CONF))
                          break c;
                         if(caml_string_notequal(_vx_, cst_NPROCESSORS_ONLN))
                          break a;
                         break b;
                        }
                        if(0 < _vA_){
                         if(! caml_string_notequal(_vx_, cst_PAGESIZE)) break r;
                         if(! caml_string_notequal(_vx_, cst_PHYS_PAGES)) break q;
                         if(! caml_string_notequal(_vx_, cst_POSIX_VERSION)) break p;
                         if(! caml_string_notequal(_vx_, cst_RE_DUP_MAX)) break o;
                         if(! caml_string_notequal(_vx_, cst_STREAM_MAX)) break n;
                         if(! caml_string_notequal(_vx_, cst_SYMLOOP_MAX)) break m;
                         if(! caml_string_notequal(_vx_, cst_TTY_NAME_MAX)) break l;
                         if(caml_string_notequal(_vx_, cst_TZNAME_MAX)) break a;
                         break k;
                        }
                       }
                       return 4;
                      }
                      return 5;
                     }
                     return 12;
                    }
                    return 11;
                   }
                   return 6;
                  }
                  return 7;
                 }
                 return 8;
                }
                return 9;
               }
               return 10;
              }
              return 0;
             }
             return 13;
            }
            return 1;
           }
           return 15;
          }
          return 2;
         }
         return 14;
        }
        return 3;
       }
       return 16;
      }
      return 17;
     }
     var _vB_ = sexp_074[1];
     if(! _vB_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_073, sexp_074);
     var _vC_ = _vB_[1];
     if(0 !== _vC_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_073, sexp_074);
     var _vD_ = _vC_[1], _vE_ = caml_string_compare(_vD_, cst_aRG_MAX);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      if(0 <= _vE_){
                       if(0 >= _vE_) break j;
                       var _vF_ = caml_string_compare(_vD_, cst_oPEN_MAX);
                       if(0 > _vF_){
                        if(! caml_string_notequal(_vD_, cst_aVPHYS_PAGES)) break i;
                        if(! caml_string_notequal(_vD_, cst_cHILD_MAX)) break h;
                        if(! caml_string_notequal(_vD_, cst_cLK_TCK)) break g;
                        if(! caml_string_notequal(_vD_, cst_hOST_NAME_MAX)) break f;
                        if(! caml_string_notequal(_vD_, cst_iOV_MAX)) break e;
                        if(! caml_string_notequal(_vD_, cst_lOGIN_NAME_MAX))
                         break d;
                        if(! caml_string_notequal(_vD_, cst_nPROCESSORS_CONF))
                         break c;
                        if(caml_string_notequal(_vD_, cst_nPROCESSORS_ONLN))
                         break a;
                        break b;
                       }
                       if(0 < _vF_){
                        if(! caml_string_notequal(_vD_, cst_pAGESIZE)) break r;
                        if(! caml_string_notequal(_vD_, cst_pHYS_PAGES)) break q;
                        if(! caml_string_notequal(_vD_, cst_pOSIX_VERSION)) break p;
                        if(! caml_string_notequal(_vD_, cst_rE_DUP_MAX)) break o;
                        if(! caml_string_notequal(_vD_, cst_sTREAM_MAX)) break n;
                        if(! caml_string_notequal(_vD_, cst_sYMLOOP_MAX)) break m;
                        if(! caml_string_notequal(_vD_, cst_tTY_NAME_MAX)) break l;
                        if(caml_string_notequal(_vD_, cst_tZNAME_MAX)) break a;
                        break k;
                       }
                      }
                      else{
                       var _vG_ = caml_string_compare(_vD_, cst_OPEN_MAX);
                       if(0 > _vG_){
                        if(! caml_string_notequal(_vD_, cst_ARG_MAX)) break j;
                        if(! caml_string_notequal(_vD_, cst_AVPHYS_PAGES)) break i;
                        if(! caml_string_notequal(_vD_, cst_CHILD_MAX)) break h;
                        if(! caml_string_notequal(_vD_, cst_CLK_TCK)) break g;
                        if(! caml_string_notequal(_vD_, cst_HOST_NAME_MAX)) break f;
                        if(! caml_string_notequal(_vD_, cst_IOV_MAX)) break e;
                        if(! caml_string_notequal(_vD_, cst_LOGIN_NAME_MAX))
                         break d;
                        if(! caml_string_notequal(_vD_, cst_NPROCESSORS_CONF))
                         break c;
                        if(caml_string_notequal(_vD_, cst_NPROCESSORS_ONLN))
                         break a;
                        break b;
                       }
                       if(0 < _vG_){
                        if(! caml_string_notequal(_vD_, cst_PAGESIZE)) break r;
                        if(! caml_string_notequal(_vD_, cst_PHYS_PAGES)) break q;
                        if(! caml_string_notequal(_vD_, cst_POSIX_VERSION)) break p;
                        if(! caml_string_notequal(_vD_, cst_RE_DUP_MAX)) break o;
                        if(! caml_string_notequal(_vD_, cst_STREAM_MAX)) break n;
                        if(! caml_string_notequal(_vD_, cst_SYMLOOP_MAX)) break m;
                        if(! caml_string_notequal(_vD_, cst_TTY_NAME_MAX)) break l;
                        if(caml_string_notequal(_vD_, cst_TZNAME_MAX)) break a;
                        break k;
                       }
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_073, sexp_074);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_073, sexp_074);
   }
   function sexp_of_sysconf(param){
    switch(param){
      case 0:
       return _G_;
      case 1:
       return _H_;
      case 2:
       return _I_;
      case 3:
       return _J_;
      case 4:
       return _K_;
      case 5:
       return _L_;
      case 6:
       return _M_;
      case 7:
       return _N_;
      case 8:
       return _O_;
      case 9:
       return _P_;
      case 10:
       return _Q_;
      case 11:
       return _R_;
      case 12:
       return _S_;
      case 13:
       return _T_;
      case 14:
       return _U_;
      case 15:
       return _V_;
      case 16:
       return _W_;
      default: return _X_;
    }
   }
   function sysconf_exn(conf){
    var match = runtime.core_unix_sysconf(conf);
    if(match){var x = match[1]; return x;}
    var
     _vv_ = [0, [1, [0, _Y_, [0, sexp_of_sysconf(conf), 0]]], 0],
     _vw_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_sysconf_exn_value_not_avai),
         _vv_]];
    return caml_call1(Core[261], _vw_);
   }
   function t_of_sexp$2(of_buf_075, x_078){
    function _vr_(param){
     var _vu_ = param[2], len = _vu_[2][1], pos = _vu_[1], buf = param[1];
     return [0, buf, pos, len];
    }
    var _vs_ = 0;
    function _vt_(param){
     return caml_string_notequal(param, cst_buf$0)
             ? caml_string_notequal
                (param, cst_len$2)
               ? caml_string_notequal(param, cst_pos$7) ? -1 : 1
               : 2
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_077,
             [0,
              cst_buf,
              1,
              of_buf_075,
              [0, cst_pos, 1, Core[390], [0, cst_len, 1, Core[390], 0]]],
             _vt_,
             _vs_,
             _vr_,
             x_078);
   }
   function sexp_of_t$2(of_buf_079, param){
    var
     len_085 = param[3],
     pos_083 = param[2],
     buf_081 = param[1],
     arg_086 = caml_call1(Core[389], len_085),
     bnds_080 = [0, [1, [0, _Z_, [0, arg_086, 0]]], 0],
     arg_084 = caml_call1(Core[389], pos_083),
     bnds_080$0 = [0, [1, [0, ___, [0, arg_084, 0]]], bnds_080],
     arg_082 = caml_call1(of_buf_079, buf_081),
     bnds_080$1 = [0, [1, [0, _$_, [0, arg_082, 0]]], bnds_080$0];
    return [1, bnds_080$1];
   }
   var
    bigstring_kind =
      caml_call3
       (Stdlib_Bigarray[19][1], Stdlib_Bigarray[13], Stdlib_Bigarray[15], 0);
   function empty(kind){return [0, kind, 0, 0];}
   function get_iovec(loc, pos, len, true_len, buf){
    if(pos){
     var pos$0 = pos[1];
     if(caml_call2(Core[92], pos$0, 0)){
      var _vn_ = caml_call2(Core[18], loc, cst_pos_0$0);
      caml_call1(Core[5], _vn_);
     }
     if(caml_call2(Core[91], pos$0, true_len)){
      var _vo_ = caml_call2(Core[18], loc, cst_pos_length_buf);
      caml_call1(Core[5], _vo_);
     }
     var pos$1 = pos$0;
    }
    else
     var pos$1 = 0;
    if(len){
     var len$0 = len[1];
     if(caml_call2(Core[92], len$0, 0)){
      var _vp_ = caml_call2(Core[18], loc, cst_len_0$0);
      caml_call1(Core[5], _vp_);
     }
     var len$1 = len$0;
    }
    else
     var len$1 = true_len - pos$1 | 0;
    if(caml_call2(Core[91], pos$1 + len$1 | 0, true_len)){
     var _vq_ = caml_call2(Core[18], loc, cst_pos_len_length_buf);
     caml_call1(Core[5], _vq_);
    }
    return [0, buf, pos$1, len$1];
   }
   function of_string(pos, len, str){
    var str_len = caml_ml_string_length(str);
    return get_iovec(cst_IOVec_of_string, pos, len, str_len, str);
   }
   function of_bigstring(pos, len, bstr){
    var bstr_len = runtime.caml_ba_dim_1(bstr);
    return get_iovec(cst_IOVec_of_bigstring, pos, len, bstr_len, bstr);
   }
   function drop(iovec, n){
    return caml_call2(Core[91], n, iovec[3])
            ? caml_call1(Core[6], cst_IOVec_drop_n_length_iovec)
            : [0, iovec[1], iovec[2] + n | 0, iovec[3] - n | 0];
   }
   var
    default_max_iovecs = 1024,
    max_iovecs =
      [246,
       function(param){
        var match = runtime.core_unix_sysconf(14);
        if(! match) return default_max_iovecs;
        var n64 = match[1];
        return caml_call2
                 (Core_Int64[80],
                  n64,
                  runtime.caml_int64_of_int32(Core_Array[62]))
                ? Core_Array[62]
                : caml_call1(Core_Int64[6], n64);
       }];
   function get_iovec_count(loc, iovecs, param){
    if(! param) return iovecs.length - 1;
    var count = param[1];
    if(caml_call2(Core[92], count, 0)){
     var _vl_ = caml_call2(Core[18], loc, cst_count_0);
     caml_call1(Core[5], _vl_);
    }
    var n_iovecs = iovecs.length - 1;
    if(caml_call2(Core[91], count, n_iovecs)){
     var _vm_ = caml_call2(Core[18], loc, cst_count_n_iovecs);
     caml_call1(Core[5], _vm_);
    }
    return count;
   }
   function writev_assume_fd_is_nonblockin(fd, count, iovecs){
    var
     count$0 = get_iovec_count(cst_writev_assume_fd_is_nonblo, iovecs, count);
    return runtime.core_unix_writev_assume_fd_is_nonblocking_stub
            (fd, iovecs, count$0);
   }
   function writev(fd, count, iovecs){
    var count$0 = get_iovec_count(cst_writev, iovecs, count);
    return runtime.core_unix_writev_stub(fd, iovecs, count$0);
   }
   function flag_to_internal(param){
    return -75290636 <= param
            ? 538529489
              <= param
              ? 762792592 <= param ? 1 : 5
              : 215850510 <= param ? 3 : 4
            : -273689311 <= param ? 2 : 0;
   }
   function fnmatch(flags$0, pat, fname){
    a:
    {
     if(flags$0){
      var flags = flags$0[1];
      if(flags){
       var
        _vj_ = caml_call1(Core_Array[24], flags),
        _vk_ =
          runtime.core_unix_fnmatch_make_flags
           (caml_call2(Core_Array[27], _vj_, flag_to_internal));
       break a;
      }
     }
     var _vk_ = Core_Int32[17];
    }
    return runtime.core_unix_fnmatch(_vk_, pat, fname);
   }
   function flag_to_internal$0(param){
    return 360161283 === param ? 1 : 974192876 <= param ? 2 : 0;
   }
   var
    wordexp =
      [0,
       function(flags$0, str){
        a:
        {
         if(flags$0){
          var flags = flags$0[1];
          if(flags){
           var
            _vh_ = caml_call1(Core_Array[24], flags),
            _vi_ =
              runtime.core_unix_wordexp_make_flags
               (caml_call2(Core_Array[27], _vh_, flag_to_internal$0));
           break a;
          }
         }
         var _vi_ = Core_Int32[17];
        }
        return runtime.core_unix_wordexp(_vi_, str);
       }];
   function machine(r){return r[5];}
   function version(r){return r[4];}
   function release(r){return r[3];}
   function nodename(r){return r[2];}
   function sysname(r){return r[1];}
   var
    _aa_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_sysname, Core[541]],
         [0,
          [0, cst_nodename, Core[541]],
          [0,
           [0, cst_release, Core[541]],
           [0,
            [0, cst_version, Core[541]],
            [0, [0, cst_machine, Core[541]], 0]]]]]),
    _ab_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aa_], 0],
    _ac_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml),
    group = caml_call2(Bin_prot_Shape[2], _ac_, _ab_),
    _ad_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _ad_), 0);
   function bin_size_t(param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _vc_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _vc_),
     _vd_ = caml_call1(Core[542], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _vd_),
     _ve_ = caml_call1(Core[542], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _ve_),
     _vf_ = caml_call1(Core[542], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _vf_),
     _vg_ = caml_call1(Core[542], v5);
    return caml_call2(Bin_prot_Common[23], size$2, _vg_);
   }
   function bin_write_t(buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1),
     pos$1 = caml_call3(Core[544], buf, pos$0, v2),
     pos$2 = caml_call3(Core[544], buf, pos$1, v3),
     pos$3 = caml_call3(Core[544], buf, pos$2, v4);
    return caml_call3(Core[544], buf, pos$3, v5);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$0,
             pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_sysname = caml_call2(Core[547], buf, pos_ref),
     v_nodename = caml_call2(Core[547], buf, pos_ref),
     v_release = caml_call2(Core[547], buf, pos_ref),
     v_version = caml_call2(Core[547], buf, pos_ref),
     v_machine = caml_call2(Core[547], buf, pos_ref);
    return [0, v_sysname, v_nodename, v_release, v_version, v_machine];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp$3(x_107){
    function _u8_(param){
     var
      _u$_ = param[2],
      _va_ = _u$_[2],
      _vb_ = _va_[2],
      machine = _vb_[2][1],
      version = _vb_[1],
      release = _va_[1],
      nodename = _u$_[1],
      sysname = param[1];
     return [0, sysname, nodename, release, version, machine];
    }
    var _u9_ = 0;
    function _u__(param){
     return caml_string_notequal(param, cst_machine$1)
             ? caml_string_notequal
                (param, cst_nodename$1)
               ? caml_string_notequal
                  (param, cst_release$1)
                 ? caml_string_notequal
                    (param, cst_sysname$1)
                   ? caml_string_notequal(param, cst_version$1) ? -1 : 3
                   : 0
                 : 2
               : 1
             : 4;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_106,
             [0,
              cst_sysname$0,
              1,
              Core[559],
              [0,
               cst_nodename$0,
               1,
               Core[559],
               [0,
                cst_release$0,
                1,
                Core[559],
                [0,
                 cst_version$0,
                 1,
                 Core[559],
                 [0, cst_machine$0, 1, Core[559], 0]]]]],
             _u__,
             _u9_,
             _u8_,
             x_107);
   }
   function sexp_of_t$3(param){
    var
     machine_117 = param[5],
     version_115 = param[4],
     release_113 = param[3],
     nodename_111 = param[2],
     sysname_109 = param[1],
     arg_118 = caml_call1(Core[558], machine_117),
     bnds_108 = [0, [1, [0, _ae_, [0, arg_118, 0]]], 0],
     arg_116 = caml_call1(Core[558], version_115),
     bnds_108$0 = [0, [1, [0, _af_, [0, arg_116, 0]]], bnds_108],
     arg_114 = caml_call1(Core[558], release_113),
     bnds_108$1 = [0, [1, [0, _ag_, [0, arg_114, 0]]], bnds_108$0],
     arg_112 = caml_call1(Core[558], nodename_111),
     bnds_108$2 = [0, [1, [0, _ah_, [0, arg_112, 0]]], bnds_108$1],
     arg_110 = caml_call1(Core[558], sysname_109),
     bnds_108$3 = [0, [1, [0, _ai_, [0, arg_110, 0]]], bnds_108$2];
    return [1, bnds_108$3];
   }
   function compare(a_119, b_120){
    if(a_119 === b_120) return 0;
    var n = caml_call2(Core[551], a_119[1], b_120[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[551], a_119[2], b_120[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[551], a_119[3], b_120[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Core[551], a_119[4], b_120[4]);
    return 0 === n$2 ? caml_call2(Core[551], a_119[5], b_120[5]) : n$2;
   }
   var stable_witness = Stable_witness[6];
   function t_of_sexp$4(sexp_124){
    if(0 === sexp_124[0]){
     var atom_122 = sexp_124[1];
     return caml_string_notequal(atom_122, cst_Fifo)
             ? caml_string_notequal
                (atom_122, cst_Other)
               ? caml_string_notequal
                  (atom_122, cst_Round_robin)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : -886337767
               : -912009552
             : 781514092;
    }
    var _u7_ = sexp_124[1];
    if(! _u7_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_126, sexp_124);
    var match = _u7_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_126, sexp_124);
    var atom_122$0 = match[1];
    return caml_string_notequal(atom_122$0, cst_Fifo)
            ? caml_string_notequal
               (atom_122$0, cst_Other)
              ? caml_string_notequal
                 (atom_122$0, cst_Round_robin)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_126, sexp_124)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_126, sexp_124)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_126, sexp_124);
   }
   function t_of_sexp$5(sexp_127){
    try{var _u5_ = t_of_sexp$4(sexp_127); return _u5_;}
    catch(_u6_){
     var _u4_ = caml_wrap_exception(_u6_);
     if(_u4_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_128, sexp_127);
     throw caml_maybe_attach_backtrace(_u4_, 0);
    }
   }
   function sexp_of_t$4(param){
    return -886337767 === param ? _aj_ : 781514092 <= param ? _ak_ : _al_;
   }
   function set$0(pid, policy, priority){
    if(pid)
     var pid$0 = pid[1], pid$1 = caml_call1(Core_Pid[46], pid$0);
    else
     var pid$1 = 0;
    var _u3_ = -886337767 === policy ? 1 : 781514092 <= policy ? 0 : 2;
    return runtime.core_unix_sched_setscheduler(pid$1, _u3_, priority);
   }
   function t_of_sexp$6(sexp_136){
    a:
    {
     if(0 === sexp_136[0]){
      var _uZ_ = sexp_136[1];
      b:
      if(caml_string_notequal(_uZ_, cst_Current)){
       if(caml_string_notequal(_uZ_, cst_Future)){
        if(! caml_string_notequal(_uZ_, cst_current)) break b;
        if(caml_string_notequal(_uZ_, cst_future)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _u0_ = sexp_136[1];
     if(! _u0_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_135, sexp_136);
     var _u1_ = _u0_[1];
     if(0 !== _u1_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_135, sexp_136);
     var _u2_ = _u1_[1];
     b:
     if(caml_string_notequal(_u2_, cst_Current)){
      if(caml_string_notequal(_u2_, cst_Future)){
       if(! caml_string_notequal(_u2_, cst_current)) break b;
       if(caml_string_notequal(_u2_, cst_future)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_135, sexp_136);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_135, sexp_136);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_135, sexp_136);
   }
   function sexp_of_t$5(param){return param ? _am_ : _an_;}
   var Mcl_flags = [0, t_of_sexp$6, sexp_of_t$5];
   function mlockall(flags){
    return runtime.core_unix_mlockall(caml_call1(Core_List[30], flags));
   }
   function munlockall(_uY_){return runtime.core_unix_munlockall(_uY_);}
   var Mman = [0, Mcl_flags, mlockall, munlockall];
   function dirname_r(filename){return [0, cst_dirname, [0, filename]];}
   function filename_r(filename){return [0, cst_filename, [0, filename]];}
   function file_perm_r(perm){
    return [0, cst_perm, [0, caml_call2(Core_Printf[2], _ao_, perm)]];
   }
   function len_r(len){return [0, cst_len$0, caml_call1(Core_Int[77], len)];}
   function uid_r(uid){return [0, cst_uid, caml_call1(Core_Int[77], uid)];}
   function gid_r(gid){return [0, cst_gid, caml_call1(Core_Int[77], gid)];}
   function fd_r(fd){
    return [0, cst_fd, caml_call1(Core_unix_File_descr[2], fd)];
   }
   function close_on_exec_r(boolopt){
    return [0, cst_close_on_exec, caml_call2(Core[515], Core[323], boolopt)];
   }
   function dir_handle_r(handle){
    try{
     var
      _uV_ = runtime.core_unix_dirfd(handle),
      _uW_ = caml_call1(Core_unix_File_descr[2], _uV_),
      fd = _uW_;
    }
    catch(_uX_){var fd = caml_call1(Core_Int[77], -1);}
    return [0, cst_dir_handle, fd];
   }
   function unary(restart, make_r, f){
    return function(x){
     function _uU_(param){return [0, caml_call1(make_r, x), 0];}
     return improve(restart, function(param){return caml_call1(f, x);}, _uU_);};
   }
   function unary_fd(restart, f){return unary(restart, fd_r, f);}
   function unary_filename(restart, f){return unary(restart, filename_r, f);}
   function unary_dirname(restart, f){return unary(restart, dirname_r, f);}
   function unary_dir_handle(restart, f){
    return unary(restart, dir_handle_r, f);
   }
   var
    error_of_sexp = Core_unix_Unix_error[1],
    sexp_of_error = Core_unix_Unix_error[2],
    Unix_error = UnixLabels[1],
    error_message = UnixLabels[2];
   function handle_unix_error(f){return caml_call2(UnixLabels[3], f, 0);}
   var environment = UnixLabels[4];
   function compare$0(a_138, b_139){
    if(a_138 === b_139) return 0;
    if(typeof a_138 === "number"){
     var _uT_ = a_138;
     if(34 <= _uT_)
      switch(_uT_){
        case 34:
         if(typeof b_139 === "number" && 34 === b_139) return 0; break;
        case 35:
         if(typeof b_139 === "number" && 35 === b_139) return 0; break;
        case 36:
         if(typeof b_139 === "number" && 36 === b_139) return 0; break;
        case 37:
         if(typeof b_139 === "number" && 37 === b_139) return 0; break;
        case 38:
         if(typeof b_139 === "number" && 38 === b_139) return 0; break;
        case 39:
         if(typeof b_139 === "number" && 39 === b_139) return 0; break;
        case 40:
         if(typeof b_139 === "number" && 40 === b_139) return 0; break;
        case 41:
         if(typeof b_139 === "number" && 41 === b_139) return 0; break;
        case 42:
         if(typeof b_139 === "number" && 42 === b_139) return 0; break;
        case 43:
         if(typeof b_139 === "number" && 43 === b_139) return 0; break;
        case 44:
         if(typeof b_139 === "number" && 44 === b_139) return 0; break;
        case 45:
         if(typeof b_139 === "number" && 45 === b_139) return 0; break;
        case 46:
         if(typeof b_139 === "number" && 46 === b_139) return 0; break;
        case 47:
         if(typeof b_139 === "number" && 47 === b_139) return 0; break;
        case 48:
         if(typeof b_139 === "number" && 48 === b_139) return 0; break;
        case 49:
         if(typeof b_139 === "number" && 49 === b_139) return 0; break;
        case 50:
         if(typeof b_139 === "number" && 50 === b_139) return 0; break;
        case 51:
         if(typeof b_139 === "number" && 51 === b_139) return 0; break;
        case 52:
         if(typeof b_139 === "number" && 52 === b_139) return 0; break;
        case 53:
         if(typeof b_139 === "number" && 53 === b_139) return 0; break;
        case 54:
         if(typeof b_139 === "number" && 54 === b_139) return 0; break;
        case 55:
         if(typeof b_139 === "number" && 55 === b_139) return 0; break;
        case 56:
         if(typeof b_139 === "number" && 56 === b_139) return 0; break;
        case 57:
         if(typeof b_139 === "number" && 57 === b_139) return 0; break;
        case 58:
         if(typeof b_139 === "number" && 58 === b_139) return 0; break;
        case 59:
         if(typeof b_139 === "number" && 59 === b_139) return 0; break;
        case 60:
         if(typeof b_139 === "number" && 60 === b_139) return 0; break;
        case 61:
         if(typeof b_139 === "number" && 61 === b_139) return 0; break;
        case 62:
         if(typeof b_139 === "number" && 62 === b_139) return 0; break;
        case 63:
         if(typeof b_139 === "number" && 63 === b_139) return 0; break;
        case 64:
         if(typeof b_139 === "number" && 64 === b_139) return 0; break;
        case 65:
         if(typeof b_139 === "number" && 65 === b_139) return 0; break;
        case 66:
         if(typeof b_139 === "number" && 66 === b_139) return 0; break;
        default: if(typeof b_139 === "number" && 67 <= b_139) return 0;
      }
     else
      switch(_uT_){
        case 0:
         if(typeof b_139 === "number" && ! b_139) return 0; return -1;
        case 1:
         if(typeof b_139 === "number" && 1 === b_139) return 0; break;
        case 2:
         if(typeof b_139 === "number" && 2 === b_139) return 0; break;
        case 3:
         if(typeof b_139 === "number" && 3 === b_139) return 0; break;
        case 4:
         if(typeof b_139 === "number" && 4 === b_139) return 0; break;
        case 5:
         if(typeof b_139 === "number" && 5 === b_139) return 0; break;
        case 6:
         if(typeof b_139 === "number" && 6 === b_139) return 0; break;
        case 7:
         if(typeof b_139 === "number" && 7 === b_139) return 0; break;
        case 8:
         if(typeof b_139 === "number" && 8 === b_139) return 0; break;
        case 9:
         if(typeof b_139 === "number" && 9 === b_139) return 0; break;
        case 10:
         if(typeof b_139 === "number" && 10 === b_139) return 0; break;
        case 11:
         if(typeof b_139 === "number" && 11 === b_139) return 0; break;
        case 12:
         if(typeof b_139 === "number" && 12 === b_139) return 0; break;
        case 13:
         if(typeof b_139 === "number" && 13 === b_139) return 0; break;
        case 14:
         if(typeof b_139 === "number" && 14 === b_139) return 0; break;
        case 15:
         if(typeof b_139 === "number" && 15 === b_139) return 0; break;
        case 16:
         if(typeof b_139 === "number" && 16 === b_139) return 0; break;
        case 17:
         if(typeof b_139 === "number" && 17 === b_139) return 0; break;
        case 18:
         if(typeof b_139 === "number" && 18 === b_139) return 0; break;
        case 19:
         if(typeof b_139 === "number" && 19 === b_139) return 0; break;
        case 20:
         if(typeof b_139 === "number" && 20 === b_139) return 0; break;
        case 21:
         if(typeof b_139 === "number" && 21 === b_139) return 0; break;
        case 22:
         if(typeof b_139 === "number" && 22 === b_139) return 0; break;
        case 23:
         if(typeof b_139 === "number" && 23 === b_139) return 0; break;
        case 24:
         if(typeof b_139 === "number" && 24 === b_139) return 0; break;
        case 25:
         if(typeof b_139 === "number" && 25 === b_139) return 0; break;
        case 26:
         if(typeof b_139 === "number" && 26 === b_139) return 0; break;
        case 27:
         if(typeof b_139 === "number" && 27 === b_139) return 0; break;
        case 28:
         if(typeof b_139 === "number" && 28 === b_139) return 0; break;
        case 29:
         if(typeof b_139 === "number" && 29 === b_139) return 0; break;
        case 30:
         if(typeof b_139 === "number" && 30 === b_139) return 0; break;
        case 31:
         if(typeof b_139 === "number" && 31 === b_139) return 0; break;
        case 32:
         if(typeof b_139 === "number" && 32 === b_139) return 0; break;
        default: if(typeof b_139 === "number" && 33 === b_139) return 0;
      }
    }
    else if(typeof b_139 !== "number"){
     var b_141 = b_139[1], a_140 = a_138[1];
     return caml_call2(Core[382], a_140, b_141);
    }
    if(typeof b_139 === "number" && ! b_139) return 1;
    if(typeof a_138 === "number" && 1 === a_138) return -1;
    if(typeof b_139 === "number" && 1 === b_139) return 1;
    if(typeof a_138 === "number" && 2 === a_138) return -1;
    if(typeof b_139 === "number" && 2 === b_139) return 1;
    if(typeof a_138 === "number" && 3 === a_138) return -1;
    if(typeof b_139 === "number" && 3 === b_139) return 1;
    if(typeof a_138 === "number" && 4 === a_138) return -1;
    if(typeof b_139 === "number" && 4 === b_139) return 1;
    if(typeof a_138 === "number" && 5 === a_138) return -1;
    if(typeof b_139 === "number" && 5 === b_139) return 1;
    if(typeof a_138 === "number" && 6 === a_138) return -1;
    if(typeof b_139 === "number" && 6 === b_139) return 1;
    if(typeof a_138 === "number" && 7 === a_138) return -1;
    if(typeof b_139 === "number" && 7 === b_139) return 1;
    if(typeof a_138 === "number" && 8 === a_138) return -1;
    if(typeof b_139 === "number" && 8 === b_139) return 1;
    if(typeof a_138 === "number" && 9 === a_138) return -1;
    if(typeof b_139 === "number" && 9 === b_139) return 1;
    if(typeof a_138 === "number" && 10 === a_138) return -1;
    if(typeof b_139 === "number" && 10 === b_139) return 1;
    if(typeof a_138 === "number" && 11 === a_138) return -1;
    if(typeof b_139 === "number" && 11 === b_139) return 1;
    if(typeof a_138 === "number" && 12 === a_138) return -1;
    if(typeof b_139 === "number" && 12 === b_139) return 1;
    if(typeof a_138 === "number" && 13 === a_138) return -1;
    if(typeof b_139 === "number" && 13 === b_139) return 1;
    if(typeof a_138 === "number" && 14 === a_138) return -1;
    if(typeof b_139 === "number" && 14 === b_139) return 1;
    if(typeof a_138 === "number" && 15 === a_138) return -1;
    if(typeof b_139 === "number" && 15 === b_139) return 1;
    if(typeof a_138 === "number" && 16 === a_138) return -1;
    if(typeof b_139 === "number" && 16 === b_139) return 1;
    if(typeof a_138 === "number" && 17 === a_138) return -1;
    if(typeof b_139 === "number" && 17 === b_139) return 1;
    if(typeof a_138 === "number" && 18 === a_138) return -1;
    if(typeof b_139 === "number" && 18 === b_139) return 1;
    if(typeof a_138 === "number" && 19 === a_138) return -1;
    if(typeof b_139 === "number" && 19 === b_139) return 1;
    if(typeof a_138 === "number" && 20 === a_138) return -1;
    if(typeof b_139 === "number" && 20 === b_139) return 1;
    if(typeof a_138 === "number" && 21 === a_138) return -1;
    if(typeof b_139 === "number" && 21 === b_139) return 1;
    if(typeof a_138 === "number" && 22 === a_138) return -1;
    if(typeof b_139 === "number" && 22 === b_139) return 1;
    if(typeof a_138 === "number" && 23 === a_138) return -1;
    if(typeof b_139 === "number" && 23 === b_139) return 1;
    if(typeof a_138 === "number" && 24 === a_138) return -1;
    if(typeof b_139 === "number" && 24 === b_139) return 1;
    if(typeof a_138 === "number" && 25 === a_138) return -1;
    if(typeof b_139 === "number" && 25 === b_139) return 1;
    if(typeof a_138 === "number" && 26 === a_138) return -1;
    if(typeof b_139 === "number" && 26 === b_139) return 1;
    if(typeof a_138 === "number" && 27 === a_138) return -1;
    if(typeof b_139 === "number" && 27 === b_139) return 1;
    if(typeof a_138 === "number" && 28 === a_138) return -1;
    if(typeof b_139 === "number" && 28 === b_139) return 1;
    if(typeof a_138 === "number" && 29 === a_138) return -1;
    if(typeof b_139 === "number" && 29 === b_139) return 1;
    if(typeof a_138 === "number" && 30 === a_138) return -1;
    if(typeof b_139 === "number" && 30 === b_139) return 1;
    if(typeof a_138 === "number" && 31 === a_138) return -1;
    if(typeof b_139 === "number" && 31 === b_139) return 1;
    if(typeof a_138 === "number" && 32 === a_138) return -1;
    if(typeof b_139 === "number" && 32 === b_139) return 1;
    if(typeof a_138 === "number" && 33 === a_138) return -1;
    if(typeof b_139 === "number" && 33 === b_139) return 1;
    if(typeof a_138 === "number" && 34 === a_138) return -1;
    if(typeof b_139 === "number" && 34 === b_139) return 1;
    if(typeof a_138 === "number" && 35 === a_138) return -1;
    if(typeof b_139 === "number" && 35 === b_139) return 1;
    if(typeof a_138 === "number" && 36 === a_138) return -1;
    if(typeof b_139 === "number" && 36 === b_139) return 1;
    if(typeof a_138 === "number" && 37 === a_138) return -1;
    if(typeof b_139 === "number" && 37 === b_139) return 1;
    if(typeof a_138 === "number" && 38 === a_138) return -1;
    if(typeof b_139 === "number" && 38 === b_139) return 1;
    if(typeof a_138 === "number" && 39 === a_138) return -1;
    if(typeof b_139 === "number" && 39 === b_139) return 1;
    if(typeof a_138 === "number" && 40 === a_138) return -1;
    if(typeof b_139 === "number" && 40 === b_139) return 1;
    if(typeof a_138 === "number" && 41 === a_138) return -1;
    if(typeof b_139 === "number" && 41 === b_139) return 1;
    if(typeof a_138 === "number" && 42 === a_138) return -1;
    if(typeof b_139 === "number" && 42 === b_139) return 1;
    if(typeof a_138 === "number" && 43 === a_138) return -1;
    if(typeof b_139 === "number" && 43 === b_139) return 1;
    if(typeof a_138 === "number" && 44 === a_138) return -1;
    if(typeof b_139 === "number" && 44 === b_139) return 1;
    if(typeof a_138 === "number" && 45 === a_138) return -1;
    if(typeof b_139 === "number" && 45 === b_139) return 1;
    if(typeof a_138 === "number" && 46 === a_138) return -1;
    if(typeof b_139 === "number" && 46 === b_139) return 1;
    if(typeof a_138 === "number" && 47 === a_138) return -1;
    if(typeof b_139 === "number" && 47 === b_139) return 1;
    if(typeof a_138 === "number" && 48 === a_138) return -1;
    if(typeof b_139 === "number" && 48 === b_139) return 1;
    if(typeof a_138 === "number" && 49 === a_138) return -1;
    if(typeof b_139 === "number" && 49 === b_139) return 1;
    if(typeof a_138 === "number" && 50 === a_138) return -1;
    if(typeof b_139 === "number" && 50 === b_139) return 1;
    if(typeof a_138 === "number" && 51 === a_138) return -1;
    if(typeof b_139 === "number" && 51 === b_139) return 1;
    if(typeof a_138 === "number" && 52 === a_138) return -1;
    if(typeof b_139 === "number" && 52 === b_139) return 1;
    if(typeof a_138 === "number" && 53 === a_138) return -1;
    if(typeof b_139 === "number" && 53 === b_139) return 1;
    if(typeof a_138 === "number" && 54 === a_138) return -1;
    if(typeof b_139 === "number" && 54 === b_139) return 1;
    if(typeof a_138 === "number" && 55 === a_138) return -1;
    if(typeof b_139 === "number" && 55 === b_139) return 1;
    if(typeof a_138 === "number" && 56 === a_138) return -1;
    if(typeof b_139 === "number" && 56 === b_139) return 1;
    if(typeof a_138 === "number" && 57 === a_138) return -1;
    if(typeof b_139 === "number" && 57 === b_139) return 1;
    if(typeof a_138 === "number" && 58 === a_138) return -1;
    if(typeof b_139 === "number" && 58 === b_139) return 1;
    if(typeof a_138 === "number" && 59 === a_138) return -1;
    if(typeof b_139 === "number" && 59 === b_139) return 1;
    if(typeof a_138 === "number" && 60 === a_138) return -1;
    if(typeof b_139 === "number" && 60 === b_139) return 1;
    if(typeof a_138 === "number" && 61 === a_138) return -1;
    if(typeof b_139 === "number" && 61 === b_139) return 1;
    if(typeof a_138 === "number" && 62 === a_138) return -1;
    if(typeof b_139 === "number" && 62 === b_139) return 1;
    if(typeof a_138 === "number" && 63 === a_138) return -1;
    if(typeof b_139 === "number" && 63 === b_139) return 1;
    if(typeof a_138 === "number" && 64 === a_138) return -1;
    if(typeof b_139 === "number" && 64 === b_139) return 1;
    if(typeof a_138 === "number" && 65 === a_138) return -1;
    if(typeof b_139 === "number" && 65 === b_139) return 1;
    if(typeof a_138 === "number" && 66 === a_138) return -1;
    if(typeof b_139 === "number" && 66 === b_139) return 1;
    if(typeof a_138 === "number" && 67 <= a_138) return -1;
    return 1;
   }
   function t_of_sexp$7(sexp_146){
    a:
    {
     if(0 === sexp_146[0]){
      var _um_ = sexp_146[1], _un_ = caml_string_compare(_um_, cst_e2BIG);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       I:
                                       {
                                        J:
                                        {
                                         K:
                                         {
                                          L:
                                          {
                                           M:
                                           {
                                            N:
                                            {
                                             O:
                                             {
                                              P:
                                              {
                                               Q:
                                               {
                                                R:
                                                {
                                                 S:
                                                 {
                                                  T:
                                                  {
                                                   U:
                                                   {
                                                    V:
                                                    {
                                                     W:
                                                     {
                                                      X:
                                                      {
                                                       Y:
                                                       {
                                                        Z:
                                                        {
                                                         _:
                                                         {
                                                          $:
                                                          {
                                                           aa:
                                                           {
                                                            ab:
                                                            {
                                                             ac:
                                                             {
                                                              ad:
                                                              {
                                                               ae:
                                                               {
                                                                af:
                                                                {
                                                                 ag:
                                                                 {
                                                                  ah:
                                                                  {
                                                                   ai:
                                                                   {
                                                                    aj:
                                                                    {
                                                                     ak:
                                                                     {
                                                                      al:
                                                                      {
                                                                       am:
                                                                       {
                                                                        an:
                                                                        {
                                                                         ao:
                                                                         {
                                                                          if(0 <= _un_){
                                                                           if(0 >= _un_) break i;
                                                                           var _uo_ = caml_string_compare(_um_, cst_eNFILE);
                                                                           if(0 <= _uo_){
                                                                            if(0 >= _uo_) break Q;
                                                                            var _up_ = caml_string_compare(_um_, cst_eOVERFLOW);
                                                                            if(0 <= _up_){
                                                                             if(0 >= _up_) break ao;
                                                                             var _uq_ = caml_string_compare(_um_, cst_eSOCKTNOSUPPORT);
                                                                             if(0 <= _uq_){
                                                                              if(0 >= _uq_) break an;
                                                                              if(! caml_string_notequal(_um_, cst_eSPIPE)) break am;
                                                                              if(! caml_string_notequal(_um_, cst_eSRCH)) break al;
                                                                              if(! caml_string_notequal(_um_, cst_eTIMEDOUT)) break ak;
                                                                              if(! caml_string_notequal(_um_, cst_eTOOMANYREFS)) break aj;
                                                                              if(! caml_string_notequal(_um_, cst_eUNKNOWNERR)) break ai;
                                                                              if(! caml_string_notequal(_um_, cst_eWOULDBLOCK)) break ah;
                                                                              if(caml_string_notequal(_um_, cst_eXDEV)) break a;
                                                                              break ag;
                                                                             }
                                                                             if(! caml_string_notequal(_um_, cst_ePERM)) break af;
                                                                             if(! caml_string_notequal(_um_, cst_ePFNOSUPPORT)) break ae;
                                                                             if(! caml_string_notequal(_um_, cst_ePIPE)) break ad;
                                                                             if(! caml_string_notequal(_um_, cst_ePROTONOSUPPORT))
                                                                              break ac;
                                                                             if(! caml_string_notequal(_um_, cst_ePROTOTYPE)) break ab;
                                                                             if(! caml_string_notequal(_um_, cst_eRANGE)) break aa;
                                                                             if(! caml_string_notequal(_um_, cst_eROFS)) break $;
                                                                             if(caml_string_notequal(_um_, cst_eSHUTDOWN)) break a;
                                                                             break _;
                                                                            }
                                                                            var _ur_ = caml_string_compare(_um_, cst_eNOSYS);
                                                                            if(0 <= _ur_){
                                                                             if(0 >= _ur_) break Y;
                                                                             if(! caml_string_notequal(_um_, cst_eNOTCONN)) break X;
                                                                             if(! caml_string_notequal(_um_, cst_eNOTDIR)) break W;
                                                                             if(! caml_string_notequal(_um_, cst_eNOTEMPTY)) break V;
                                                                             if(! caml_string_notequal(_um_, cst_eNOTSOCK)) break U;
                                                                             if(! caml_string_notequal(_um_, cst_eNOTTY)) break T;
                                                                             if(! caml_string_notequal(_um_, cst_eNXIO)) break S;
                                                                             if(caml_string_notequal(_um_, cst_eOPNOTSUPP)) break a;
                                                                             break R;
                                                                            }
                                                                            if(! caml_string_notequal(_um_, cst_eNOBUFS)) break P;
                                                                            if(! caml_string_notequal(_um_, cst_eNODEV)) break O;
                                                                            if(! caml_string_notequal(_um_, cst_eNOENT)) break N;
                                                                            if(! caml_string_notequal(_um_, cst_eNOEXEC)) break M;
                                                                            if(! caml_string_notequal(_um_, cst_eNOLCK)) break L;
                                                                            if(! caml_string_notequal(_um_, cst_eNOMEM)) break K;
                                                                            if(! caml_string_notequal(_um_, cst_eNOPROTOOPT)) break J;
                                                                            if(caml_string_notequal(_um_, cst_eNOSPC)) break a;
                                                                            break Z;
                                                                           }
                                                                           var _us_ = caml_string_compare(_um_, cst_eFBIG);
                                                                           if(0 > _us_){
                                                                            var _uu_ = caml_string_compare(_um_, cst_eCHILD);
                                                                            if(0 <= _uu_){
                                                                             if(0 >= _uu_) break q;
                                                                             if(! caml_string_notequal(_um_, cst_eCONNABORTED)) break p;
                                                                             if(! caml_string_notequal(_um_, cst_eCONNREFUSED)) break o;
                                                                             if(! caml_string_notequal(_um_, cst_eCONNRESET)) break n;
                                                                             if(! caml_string_notequal(_um_, cst_eDEADLK)) break m;
                                                                             if(! caml_string_notequal(_um_, cst_eDESTADDRREQ)) break l;
                                                                             if(! caml_string_notequal(_um_, cst_eDOM)) break k;
                                                                             if(! caml_string_notequal(_um_, cst_eEXIST)) break j;
                                                                             if(caml_string_notequal(_um_, cst_eFAULT)) break a;
                                                                             break I;
                                                                            }
                                                                            if(! caml_string_notequal(_um_, cst_eACCES)) break h;
                                                                            if(! caml_string_notequal(_um_, cst_eADDRINUSE)) break g;
                                                                            if(! caml_string_notequal(_um_, cst_eADDRNOTAVAIL)) break f;
                                                                            if(! caml_string_notequal(_um_, cst_eAFNOSUPPORT)) break e;
                                                                            if(! caml_string_notequal(_um_, cst_eAGAIN)) break d;
                                                                            if(! caml_string_notequal(_um_, cst_eALREADY)) break c;
                                                                            if(! caml_string_notequal(_um_, cst_eBADF)) break b;
                                                                            if(caml_string_notequal(_um_, cst_eBUSY)) break a;
                                                                            break r;
                                                                           }
                                                                           if(0 >= _us_) break z;
                                                                           var _ut_ = caml_string_compare(_um_, cst_eLOOP);
                                                                           if(0 > _ut_){
                                                                            if(! caml_string_notequal(_um_, cst_eHOSTDOWN)) break y;
                                                                            if(! caml_string_notequal(_um_, cst_eHOSTUNREACH)) break x;
                                                                            if(! caml_string_notequal(_um_, cst_eINPROGRESS)) break w;
                                                                            if(! caml_string_notequal(_um_, cst_eINTR)) break v;
                                                                            if(! caml_string_notequal(_um_, cst_eINVAL)) break u;
                                                                            if(! caml_string_notequal(_um_, cst_eIO)) break t;
                                                                            if(! caml_string_notequal(_um_, cst_eISCONN)) break s;
                                                                            if(caml_string_notequal(_um_, cst_eISDIR)) break a;
                                                                            break H;
                                                                           }
                                                                           if(0 >= _ut_) break G;
                                                                           if(! caml_string_notequal(_um_, cst_eMFILE)) break F;
                                                                           if(! caml_string_notequal(_um_, cst_eMLINK)) break E;
                                                                           if(! caml_string_notequal(_um_, cst_eMSGSIZE)) break D;
                                                                           if(! caml_string_notequal(_um_, cst_eNAMETOOLONG)) break C;
                                                                           if(! caml_string_notequal(_um_, cst_eNETDOWN)) break B;
                                                                           if(! caml_string_notequal(_um_, cst_eNETRESET)) break A;
                                                                           if(caml_string_notequal(_um_, cst_eNETUNREACH)) break a;
                                                                          }
                                                                          else{
                                                                           var _uv_ = caml_string_compare(_um_, cst_ENETUNREACH);
                                                                           if(0 > _uv_){
                                                                            var _uz_ = caml_string_compare(_um_, cst_EFAULT);
                                                                            if(0 <= _uz_){
                                                                             if(0 >= _uz_) break I;
                                                                             var _uA_ = caml_string_compare(_um_, cst_EISDIR);
                                                                             if(0 <= _uA_){
                                                                              if(0 >= _uA_) break H;
                                                                              if(! caml_string_notequal(_um_, cst_ELOOP)) break G;
                                                                              if(! caml_string_notequal(_um_, cst_EMFILE)) break F;
                                                                              if(! caml_string_notequal(_um_, cst_EMLINK)) break E;
                                                                              if(! caml_string_notequal(_um_, cst_EMSGSIZE)) break D;
                                                                              if(! caml_string_notequal(_um_, cst_ENAMETOOLONG)) break C;
                                                                              if(! caml_string_notequal(_um_, cst_ENETDOWN)) break B;
                                                                              if(caml_string_notequal(_um_, cst_ENETRESET)) break a;
                                                                              break A;
                                                                             }
                                                                             if(! caml_string_notequal(_um_, cst_EFBIG)) break z;
                                                                             if(! caml_string_notequal(_um_, cst_EHOSTDOWN)) break y;
                                                                             if(! caml_string_notequal(_um_, cst_EHOSTUNREACH)) break x;
                                                                             if(! caml_string_notequal(_um_, cst_EINPROGRESS)) break w;
                                                                             if(! caml_string_notequal(_um_, cst_EINTR)) break v;
                                                                             if(! caml_string_notequal(_um_, cst_EINVAL)) break u;
                                                                             if(! caml_string_notequal(_um_, cst_EIO)) break t;
                                                                             if(caml_string_notequal(_um_, cst_EISCONN)) break a;
                                                                             break s;
                                                                            }
                                                                            var _uB_ = caml_string_compare(_um_, cst_EBUSY);
                                                                            if(0 <= _uB_){
                                                                             if(0 >= _uB_) break r;
                                                                             if(! caml_string_notequal(_um_, cst_ECHILD)) break q;
                                                                             if(! caml_string_notequal(_um_, cst_ECONNABORTED)) break p;
                                                                             if(! caml_string_notequal(_um_, cst_ECONNREFUSED)) break o;
                                                                             if(! caml_string_notequal(_um_, cst_ECONNRESET)) break n;
                                                                             if(! caml_string_notequal(_um_, cst_EDEADLK)) break m;
                                                                             if(! caml_string_notequal(_um_, cst_EDESTADDRREQ)) break l;
                                                                             if(! caml_string_notequal(_um_, cst_EDOM)) break k;
                                                                             if(caml_string_notequal(_um_, cst_EEXIST)) break a;
                                                                             break j;
                                                                            }
                                                                            if(! caml_string_notequal(_um_, cst_E2BIG)) break i;
                                                                            if(! caml_string_notequal(_um_, cst_EACCES)) break h;
                                                                            if(! caml_string_notequal(_um_, cst_EADDRINUSE)) break g;
                                                                            if(! caml_string_notequal(_um_, cst_EADDRNOTAVAIL)) break f;
                                                                            if(! caml_string_notequal(_um_, cst_EAFNOSUPPORT)) break e;
                                                                            if(! caml_string_notequal(_um_, cst_EAGAIN)) break d;
                                                                            if(! caml_string_notequal(_um_, cst_EALREADY)) break c;
                                                                            if(caml_string_notequal(_um_, cst_EBADF)) break a;
                                                                            break b;
                                                                           }
                                                                           if(0 < _uv_){
                                                                            var _uw_ = caml_string_compare(_um_, cst_EOVERFLOW);
                                                                            if(0 <= _uw_){
                                                                             if(0 >= _uw_) break ao;
                                                                             var _ux_ = caml_string_compare(_um_, cst_ESOCKTNOSUPPORT);
                                                                             if(0 <= _ux_){
                                                                              if(0 >= _ux_) break an;
                                                                              if(! caml_string_notequal(_um_, cst_ESPIPE)) break am;
                                                                              if(! caml_string_notequal(_um_, cst_ESRCH)) break al;
                                                                              if(! caml_string_notequal(_um_, cst_ETIMEDOUT)) break ak;
                                                                              if(! caml_string_notequal(_um_, cst_ETOOMANYREFS)) break aj;
                                                                              if(! caml_string_notequal(_um_, cst_EUNKNOWNERR)) break ai;
                                                                              if(! caml_string_notequal(_um_, cst_EWOULDBLOCK)) break ah;
                                                                              if(caml_string_notequal(_um_, cst_EXDEV)) break a;
                                                                              break ag;
                                                                             }
                                                                             if(! caml_string_notequal(_um_, cst_EPERM)) break af;
                                                                             if(! caml_string_notequal(_um_, cst_EPFNOSUPPORT)) break ae;
                                                                             if(! caml_string_notequal(_um_, cst_EPIPE)) break ad;
                                                                             if(! caml_string_notequal(_um_, cst_EPROTONOSUPPORT))
                                                                              break ac;
                                                                             if(! caml_string_notequal(_um_, cst_EPROTOTYPE)) break ab;
                                                                             if(! caml_string_notequal(_um_, cst_ERANGE)) break aa;
                                                                             if(! caml_string_notequal(_um_, cst_EROFS)) break $;
                                                                             if(caml_string_notequal(_um_, cst_ESHUTDOWN)) break a;
                                                                             break _;
                                                                            }
                                                                            var _uy_ = caml_string_compare(_um_, cst_ENOSPC);
                                                                            if(0 <= _uy_){
                                                                             if(0 >= _uy_) break Z;
                                                                             if(! caml_string_notequal(_um_, cst_ENOSYS)) break Y;
                                                                             if(! caml_string_notequal(_um_, cst_ENOTCONN)) break X;
                                                                             if(! caml_string_notequal(_um_, cst_ENOTDIR)) break W;
                                                                             if(! caml_string_notequal(_um_, cst_ENOTEMPTY)) break V;
                                                                             if(! caml_string_notequal(_um_, cst_ENOTSOCK)) break U;
                                                                             if(! caml_string_notequal(_um_, cst_ENOTTY)) break T;
                                                                             if(! caml_string_notequal(_um_, cst_ENXIO)) break S;
                                                                             if(caml_string_notequal(_um_, cst_EOPNOTSUPP)) break a;
                                                                             break R;
                                                                            }
                                                                            if(! caml_string_notequal(_um_, cst_ENFILE)) break Q;
                                                                            if(! caml_string_notequal(_um_, cst_ENOBUFS)) break P;
                                                                            if(! caml_string_notequal(_um_, cst_ENODEV)) break O;
                                                                            if(! caml_string_notequal(_um_, cst_ENOENT)) break N;
                                                                            if(! caml_string_notequal(_um_, cst_ENOEXEC)) break M;
                                                                            if(! caml_string_notequal(_um_, cst_ENOLCK)) break L;
                                                                            if(! caml_string_notequal(_um_, cst_ENOMEM)) break K;
                                                                            if(caml_string_notequal(_um_, cst_ENOPROTOOPT)) break a;
                                                                            break J;
                                                                           }
                                                                          }
                                                                          return 53;
                                                                         }
                                                                         return 67;
                                                                        }
                                                                        return 46;
                                                                       }
                                                                       return 34;
                                                                      }
                                                                      return 35;
                                                                     }
                                                                     return 62;
                                                                    }
                                                                    return 61;
                                                                   }
                                                                   return caml_call2
                                                                           (Sexplib0_Sexp_conv_error[9], error_source_144, sexp_146);
                                                                  }
                                                                  return 37;
                                                                 }
                                                                 return 36;
                                                                }
                                                                return 30;
                                                               }
                                                               return 48;
                                                              }
                                                              return 31;
                                                             }
                                                             return 45;
                                                            }
                                                            return 43;
                                                           }
                                                           return 32;
                                                          }
                                                          return 33;
                                                         }
                                                         return 60;
                                                        }
                                                        return 24;
                                                       }
                                                       return 25;
                                                      }
                                                      return 59;
                                                     }
                                                     return 26;
                                                    }
                                                    return 27;
                                                   }
                                                   return 40;
                                                  }
                                                  return 28;
                                                 }
                                                 return 29;
                                                }
                                                return 47;
                                               }
                                               return 18;
                                              }
                                              return 57;
                                             }
                                             return 19;
                                            }
                                            return 20;
                                           }
                                           return 21;
                                          }
                                          return 22;
                                         }
                                         return 23;
                                        }
                                        return 44;
                                       }
                                       return 9;
                                      }
                                      return 14;
                                     }
                                     return 66;
                                    }
                                    return 15;
                                   }
                                   return 16;
                                  }
                                  return 42;
                                 }
                                 return 17;
                                }
                                return 52;
                               }
                               return 54;
                              }
                              return 10;
                             }
                             return 64;
                            }
                            return 65;
                           }
                           return 38;
                          }
                          return 11;
                         }
                         return 12;
                        }
                        return 13;
                       }
                       return 58;
                      }
                      return 4;
                     }
                     return 5;
                    }
                    return 55;
                   }
                   return 63;
                  }
                  return 56;
                 }
                 return 6;
                }
                return 41;
               }
               return 7;
              }
              return 8;
             }
             return 0;
            }
            return 1;
           }
           return 50;
          }
          return 51;
         }
         return 49;
        }
        return 2;
       }
       return 39;
      }
      return 3;
     }
     var _uC_ = sexp_146[1];
     if(! _uC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_144, sexp_146);
     var _uD_ = _uC_[1];
     if(0 !== _uD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_144, sexp_146);
     var tag_147 = _uD_[1], _uE_ = caml_string_compare(tag_147, cst_e2BIG);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      I:
                                      {
                                       J:
                                       {
                                        K:
                                        {
                                         L:
                                         {
                                          M:
                                          {
                                           N:
                                           {
                                            O:
                                            {
                                             P:
                                             {
                                              Q:
                                              {
                                               R:
                                               {
                                                S:
                                                {
                                                 T:
                                                 {
                                                  U:
                                                  {
                                                   V:
                                                   {
                                                    W:
                                                    {
                                                     X:
                                                     {
                                                      Y:
                                                      {
                                                       Z:
                                                       {
                                                        _:
                                                        {
                                                         $:
                                                         {
                                                          aa:
                                                          {
                                                           ab:
                                                           {
                                                            ac:
                                                            {
                                                             ad:
                                                             {
                                                              ae:
                                                              {
                                                               af:
                                                               {
                                                                ag:
                                                                {
                                                                 ah:
                                                                 {
                                                                  ai:
                                                                  {
                                                                   aj:
                                                                   {
                                                                    ak:
                                                                    {
                                                                     al:
                                                                     {
                                                                      am:
                                                                      {
                                                                       an:
                                                                       {
                                                                        ao:
                                                                        {
                                                                         if(0 <= _uE_){
                                                                          if(0 >= _uE_) break i;
                                                                          var _uF_ = caml_string_compare(tag_147, cst_eNFILE);
                                                                          if(0 <= _uF_){
                                                                           if(0 >= _uF_) break Q;
                                                                           var _uG_ = caml_string_compare(tag_147, cst_eOVERFLOW);
                                                                           if(0 <= _uG_){
                                                                            if(0 >= _uG_) break ao;
                                                                            var
                                                                             _uH_ = caml_string_compare(tag_147, cst_eSOCKTNOSUPPORT);
                                                                            if(0 <= _uH_){
                                                                             if(0 >= _uH_) break an;
                                                                             if(! caml_string_notequal(tag_147, cst_eSPIPE)) break am;
                                                                             if(! caml_string_notequal(tag_147, cst_eSRCH)) break al;
                                                                             if(! caml_string_notequal(tag_147, cst_eTIMEDOUT)) break ak;
                                                                             if(! caml_string_notequal(tag_147, cst_eTOOMANYREFS))
                                                                              break aj;
                                                                             if(! caml_string_notequal(tag_147, cst_eUNKNOWNERR))
                                                                              break ai;
                                                                             if(! caml_string_notequal(tag_147, cst_eWOULDBLOCK))
                                                                              break ah;
                                                                             if(caml_string_notequal(tag_147, cst_eXDEV)) break a;
                                                                             break ag;
                                                                            }
                                                                            if(! caml_string_notequal(tag_147, cst_ePERM)) break af;
                                                                            if(! caml_string_notequal(tag_147, cst_ePFNOSUPPORT))
                                                                             break ae;
                                                                            if(! caml_string_notequal(tag_147, cst_ePIPE)) break ad;
                                                                            if(! caml_string_notequal(tag_147, cst_ePROTONOSUPPORT))
                                                                             break ac;
                                                                            if(! caml_string_notequal(tag_147, cst_ePROTOTYPE))
                                                                             break ab;
                                                                            if(! caml_string_notequal(tag_147, cst_eRANGE)) break aa;
                                                                            if(! caml_string_notequal(tag_147, cst_eROFS)) break $;
                                                                            if(caml_string_notequal(tag_147, cst_eSHUTDOWN)) break a;
                                                                            break _;
                                                                           }
                                                                           var _uI_ = caml_string_compare(tag_147, cst_eNOSYS);
                                                                           if(0 <= _uI_){
                                                                            if(0 >= _uI_) break Y;
                                                                            if(! caml_string_notequal(tag_147, cst_eNOTCONN)) break X;
                                                                            if(! caml_string_notequal(tag_147, cst_eNOTDIR)) break W;
                                                                            if(! caml_string_notequal(tag_147, cst_eNOTEMPTY)) break V;
                                                                            if(! caml_string_notequal(tag_147, cst_eNOTSOCK)) break U;
                                                                            if(! caml_string_notequal(tag_147, cst_eNOTTY)) break T;
                                                                            if(! caml_string_notequal(tag_147, cst_eNXIO)) break S;
                                                                            if(caml_string_notequal(tag_147, cst_eOPNOTSUPP)) break a;
                                                                            break R;
                                                                           }
                                                                           if(! caml_string_notequal(tag_147, cst_eNOBUFS)) break P;
                                                                           if(! caml_string_notequal(tag_147, cst_eNODEV)) break O;
                                                                           if(! caml_string_notequal(tag_147, cst_eNOENT)) break N;
                                                                           if(! caml_string_notequal(tag_147, cst_eNOEXEC)) break M;
                                                                           if(! caml_string_notequal(tag_147, cst_eNOLCK)) break L;
                                                                           if(! caml_string_notequal(tag_147, cst_eNOMEM)) break K;
                                                                           if(! caml_string_notequal(tag_147, cst_eNOPROTOOPT))
                                                                            break J;
                                                                           if(caml_string_notequal(tag_147, cst_eNOSPC)) break a;
                                                                           break Z;
                                                                          }
                                                                          var _uJ_ = caml_string_compare(tag_147, cst_eFBIG);
                                                                          if(0 > _uJ_){
                                                                           var _uL_ = caml_string_compare(tag_147, cst_eCHILD);
                                                                           if(0 <= _uL_){
                                                                            if(0 >= _uL_) break q;
                                                                            if(! caml_string_notequal(tag_147, cst_eCONNABORTED))
                                                                             break p;
                                                                            if(! caml_string_notequal(tag_147, cst_eCONNREFUSED))
                                                                             break o;
                                                                            if(! caml_string_notequal(tag_147, cst_eCONNRESET)) break n;
                                                                            if(! caml_string_notequal(tag_147, cst_eDEADLK)) break m;
                                                                            if(! caml_string_notequal(tag_147, cst_eDESTADDRREQ))
                                                                             break l;
                                                                            if(! caml_string_notequal(tag_147, cst_eDOM)) break k;
                                                                            if(! caml_string_notequal(tag_147, cst_eEXIST)) break j;
                                                                            if(caml_string_notequal(tag_147, cst_eFAULT)) break a;
                                                                            break I;
                                                                           }
                                                                           if(! caml_string_notequal(tag_147, cst_eACCES)) break h;
                                                                           if(! caml_string_notequal(tag_147, cst_eADDRINUSE)) break g;
                                                                           if(! caml_string_notequal(tag_147, cst_eADDRNOTAVAIL))
                                                                            break f;
                                                                           if(! caml_string_notequal(tag_147, cst_eAFNOSUPPORT))
                                                                            break e;
                                                                           if(! caml_string_notequal(tag_147, cst_eAGAIN)) break d;
                                                                           if(! caml_string_notequal(tag_147, cst_eALREADY)) break c;
                                                                           if(! caml_string_notequal(tag_147, cst_eBADF)) break b;
                                                                           if(caml_string_notequal(tag_147, cst_eBUSY)) break a;
                                                                           break r;
                                                                          }
                                                                          if(0 >= _uJ_) break z;
                                                                          var _uK_ = caml_string_compare(tag_147, cst_eLOOP);
                                                                          if(0 > _uK_){
                                                                           if(! caml_string_notequal(tag_147, cst_eHOSTDOWN)) break y;
                                                                           if(! caml_string_notequal(tag_147, cst_eHOSTUNREACH))
                                                                            break x;
                                                                           if(! caml_string_notequal(tag_147, cst_eINPROGRESS))
                                                                            break w;
                                                                           if(! caml_string_notequal(tag_147, cst_eINTR)) break v;
                                                                           if(! caml_string_notequal(tag_147, cst_eINVAL)) break u;
                                                                           if(! caml_string_notequal(tag_147, cst_eIO)) break t;
                                                                           if(! caml_string_notequal(tag_147, cst_eISCONN)) break s;
                                                                           if(caml_string_notequal(tag_147, cst_eISDIR)) break a;
                                                                           break H;
                                                                          }
                                                                          if(0 >= _uK_) break G;
                                                                          if(! caml_string_notequal(tag_147, cst_eMFILE)) break F;
                                                                          if(! caml_string_notequal(tag_147, cst_eMLINK)) break E;
                                                                          if(! caml_string_notequal(tag_147, cst_eMSGSIZE)) break D;
                                                                          if(! caml_string_notequal(tag_147, cst_eNAMETOOLONG))
                                                                           break C;
                                                                          if(! caml_string_notequal(tag_147, cst_eNETDOWN)) break B;
                                                                          if(! caml_string_notequal(tag_147, cst_eNETRESET)) break A;
                                                                          if(caml_string_notequal(tag_147, cst_eNETUNREACH)) break a;
                                                                         }
                                                                         else{
                                                                          var _uM_ = caml_string_compare(tag_147, cst_ENETUNREACH);
                                                                          if(0 > _uM_){
                                                                           var _uQ_ = caml_string_compare(tag_147, cst_EFAULT);
                                                                           if(0 <= _uQ_){
                                                                            if(0 >= _uQ_) break I;
                                                                            var _uR_ = caml_string_compare(tag_147, cst_EISDIR);
                                                                            if(0 <= _uR_){
                                                                             if(0 >= _uR_) break H;
                                                                             if(! caml_string_notequal(tag_147, cst_ELOOP)) break G;
                                                                             if(! caml_string_notequal(tag_147, cst_EMFILE)) break F;
                                                                             if(! caml_string_notequal(tag_147, cst_EMLINK)) break E;
                                                                             if(! caml_string_notequal(tag_147, cst_EMSGSIZE)) break D;
                                                                             if(! caml_string_notequal(tag_147, cst_ENAMETOOLONG))
                                                                              break C;
                                                                             if(! caml_string_notequal(tag_147, cst_ENETDOWN)) break B;
                                                                             if(caml_string_notequal(tag_147, cst_ENETRESET)) break a;
                                                                             break A;
                                                                            }
                                                                            if(! caml_string_notequal(tag_147, cst_EFBIG)) break z;
                                                                            if(! caml_string_notequal(tag_147, cst_EHOSTDOWN)) break y;
                                                                            if(! caml_string_notequal(tag_147, cst_EHOSTUNREACH))
                                                                             break x;
                                                                            if(! caml_string_notequal(tag_147, cst_EINPROGRESS))
                                                                             break w;
                                                                            if(! caml_string_notequal(tag_147, cst_EINTR)) break v;
                                                                            if(! caml_string_notequal(tag_147, cst_EINVAL)) break u;
                                                                            if(! caml_string_notequal(tag_147, cst_EIO)) break t;
                                                                            if(caml_string_notequal(tag_147, cst_EISCONN)) break a;
                                                                            break s;
                                                                           }
                                                                           var _uS_ = caml_string_compare(tag_147, cst_EBUSY);
                                                                           if(0 <= _uS_){
                                                                            if(0 >= _uS_) break r;
                                                                            if(! caml_string_notequal(tag_147, cst_ECHILD)) break q;
                                                                            if(! caml_string_notequal(tag_147, cst_ECONNABORTED))
                                                                             break p;
                                                                            if(! caml_string_notequal(tag_147, cst_ECONNREFUSED))
                                                                             break o;
                                                                            if(! caml_string_notequal(tag_147, cst_ECONNRESET)) break n;
                                                                            if(! caml_string_notequal(tag_147, cst_EDEADLK)) break m;
                                                                            if(! caml_string_notequal(tag_147, cst_EDESTADDRREQ))
                                                                             break l;
                                                                            if(! caml_string_notequal(tag_147, cst_EDOM)) break k;
                                                                            if(caml_string_notequal(tag_147, cst_EEXIST)) break a;
                                                                            break j;
                                                                           }
                                                                           if(! caml_string_notequal(tag_147, cst_E2BIG)) break i;
                                                                           if(! caml_string_notequal(tag_147, cst_EACCES)) break h;
                                                                           if(! caml_string_notequal(tag_147, cst_EADDRINUSE)) break g;
                                                                           if(! caml_string_notequal(tag_147, cst_EADDRNOTAVAIL))
                                                                            break f;
                                                                           if(! caml_string_notequal(tag_147, cst_EAFNOSUPPORT))
                                                                            break e;
                                                                           if(! caml_string_notequal(tag_147, cst_EAGAIN)) break d;
                                                                           if(! caml_string_notequal(tag_147, cst_EALREADY)) break c;
                                                                           if(caml_string_notequal(tag_147, cst_EBADF)) break a;
                                                                           break b;
                                                                          }
                                                                          if(0 < _uM_){
                                                                           var _uN_ = caml_string_compare(tag_147, cst_EOVERFLOW);
                                                                           if(0 <= _uN_){
                                                                            if(0 >= _uN_) break ao;
                                                                            var
                                                                             _uO_ = caml_string_compare(tag_147, cst_ESOCKTNOSUPPORT);
                                                                            if(0 <= _uO_){
                                                                             if(0 >= _uO_) break an;
                                                                             if(! caml_string_notequal(tag_147, cst_ESPIPE)) break am;
                                                                             if(! caml_string_notequal(tag_147, cst_ESRCH)) break al;
                                                                             if(! caml_string_notequal(tag_147, cst_ETIMEDOUT)) break ak;
                                                                             if(! caml_string_notequal(tag_147, cst_ETOOMANYREFS))
                                                                              break aj;
                                                                             if(! caml_string_notequal(tag_147, cst_EUNKNOWNERR))
                                                                              break ai;
                                                                             if(! caml_string_notequal(tag_147, cst_EWOULDBLOCK))
                                                                              break ah;
                                                                             if(caml_string_notequal(tag_147, cst_EXDEV)) break a;
                                                                             break ag;
                                                                            }
                                                                            if(! caml_string_notequal(tag_147, cst_EPERM)) break af;
                                                                            if(! caml_string_notequal(tag_147, cst_EPFNOSUPPORT))
                                                                             break ae;
                                                                            if(! caml_string_notequal(tag_147, cst_EPIPE)) break ad;
                                                                            if(! caml_string_notequal(tag_147, cst_EPROTONOSUPPORT))
                                                                             break ac;
                                                                            if(! caml_string_notequal(tag_147, cst_EPROTOTYPE))
                                                                             break ab;
                                                                            if(! caml_string_notequal(tag_147, cst_ERANGE)) break aa;
                                                                            if(! caml_string_notequal(tag_147, cst_EROFS)) break $;
                                                                            if(caml_string_notequal(tag_147, cst_ESHUTDOWN)) break a;
                                                                            break _;
                                                                           }
                                                                           var _uP_ = caml_string_compare(tag_147, cst_ENOSPC);
                                                                           if(0 <= _uP_){
                                                                            if(0 >= _uP_) break Z;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOSYS)) break Y;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOTCONN)) break X;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOTDIR)) break W;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOTEMPTY)) break V;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOTSOCK)) break U;
                                                                            if(! caml_string_notequal(tag_147, cst_ENOTTY)) break T;
                                                                            if(! caml_string_notequal(tag_147, cst_ENXIO)) break S;
                                                                            if(caml_string_notequal(tag_147, cst_EOPNOTSUPP)) break a;
                                                                            break R;
                                                                           }
                                                                           if(! caml_string_notequal(tag_147, cst_ENFILE)) break Q;
                                                                           if(! caml_string_notequal(tag_147, cst_ENOBUFS)) break P;
                                                                           if(! caml_string_notequal(tag_147, cst_ENODEV)) break O;
                                                                           if(! caml_string_notequal(tag_147, cst_ENOENT)) break N;
                                                                           if(! caml_string_notequal(tag_147, cst_ENOEXEC)) break M;
                                                                           if(! caml_string_notequal(tag_147, cst_ENOLCK)) break L;
                                                                           if(! caml_string_notequal(tag_147, cst_ENOMEM)) break K;
                                                                           if(caml_string_notequal(tag_147, cst_ENOPROTOOPT)) break a;
                                                                           break J;
                                                                          }
                                                                         }
                                                                         return caml_call2
                                                                                 (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                        }
                                                                        return caml_call2
                                                                                (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                       }
                                                                       return caml_call2
                                                                               (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                      }
                                                                      return caml_call2
                                                                              (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                     }
                                                                     return caml_call2
                                                                             (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                    }
                                                                    return caml_call2
                                                                            (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                   }
                                                                   return caml_call2
                                                                           (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                  }
                                                                  var sexp_args_148 = _uC_[2];
                                                                  if(sexp_args_148 && ! sexp_args_148[2]){
                                                                   var
                                                                    arg0_149 = sexp_args_148[1],
                                                                    res0_150 = caml_call1(Core[390], arg0_149);
                                                                   return [0, res0_150];
                                                                  }
                                                                  return caml_call3
                                                                          (Sexplib0_Sexp_conv_error[8],
                                                                           error_source_144,
                                                                           tag_147,
                                                                           sexp_146);
                                                                 }
                                                                 return caml_call2
                                                                         (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                                }
                                                                return caml_call2
                                                                        (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                               }
                                                               return caml_call2
                                                                       (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                              }
                                                              return caml_call2
                                                                      (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                             }
                                                             return caml_call2
                                                                     (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                            }
                                                            return caml_call2
                                                                    (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                           }
                                                           return caml_call2
                                                                   (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                          }
                                                          return caml_call2
                                                                  (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                         }
                                                         return caml_call2
                                                                 (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                        }
                                                        return caml_call2
                                                                (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                       }
                                                       return caml_call2
                                                               (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                      }
                                                      return caml_call2
                                                              (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                     }
                                                     return caml_call2
                                                             (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                    }
                                                    return caml_call2
                                                            (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                   }
                                                   return caml_call2
                                                           (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                  }
                                                  return caml_call2
                                                          (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                 }
                                                 return caml_call2
                                                         (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                                }
                                                return caml_call2
                                                        (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                               }
                                               return caml_call2
                                                       (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                              }
                                              return caml_call2
                                                      (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                             }
                                             return caml_call2
                                                     (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                            }
                                            return caml_call2
                                                    (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                           }
                                           return caml_call2
                                                   (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                          }
                                          return caml_call2
                                                  (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                         }
                                         return caml_call2
                                                 (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                        }
                                        return caml_call2
                                                (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                       }
                                       return caml_call2
                                               (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                      }
                                      return caml_call2
                                              (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                     }
                                     return caml_call2
                                             (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                    }
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                   }
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                 }
                                 return caml_call2
                                         (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                                }
                                return caml_call2
                                        (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                               }
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                              }
                              return caml_call2
                                      (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                             }
                             return caml_call2
                                     (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                            }
                            return caml_call2
                                    (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_144, sexp_146);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_144, sexp_146);
   }
   function sexp_of_t$6(param){
    if(typeof param !== "number"){
     var arg0_151 = param[1], res0_152 = caml_call1(Core[389], arg0_151);
     return [1, [0, _bt_, [0, res0_152, 0]]];
    }
    var _ul_ = param;
    if(34 <= _ul_)
     switch(_ul_){
       case 34:
        return _aX_;
       case 35:
        return _aY_;
       case 36:
        return _aZ_;
       case 37:
        return _a0_;
       case 38:
        return _a1_;
       case 39:
        return _a2_;
       case 40:
        return _a3_;
       case 41:
        return _a4_;
       case 42:
        return _a5_;
       case 43:
        return _a6_;
       case 44:
        return _a7_;
       case 45:
        return _a8_;
       case 46:
        return _a9_;
       case 47:
        return _a__;
       case 48:
        return _a$_;
       case 49:
        return _ba_;
       case 50:
        return _bb_;
       case 51:
        return _bc_;
       case 52:
        return _bd_;
       case 53:
        return _be_;
       case 54:
        return _bf_;
       case 55:
        return _bg_;
       case 56:
        return _bh_;
       case 57:
        return _bi_;
       case 58:
        return _bj_;
       case 59:
        return _bk_;
       case 60:
        return _bl_;
       case 61:
        return _bm_;
       case 62:
        return _bn_;
       case 63:
        return _bo_;
       case 64:
        return _bp_;
       case 65:
        return _bq_;
       case 66:
        return _br_;
       default: return _bs_;
     }
    switch(_ul_){
      case 0:
       return _ap_;
      case 1:
       return _aq_;
      case 2:
       return _ar_;
      case 3:
       return _as_;
      case 4:
       return _at_;
      case 5:
       return _au_;
      case 6:
       return _av_;
      case 7:
       return _aw_;
      case 8:
       return _ax_;
      case 9:
       return _ay_;
      case 10:
       return _az_;
      case 11:
       return _aA_;
      case 12:
       return _aB_;
      case 13:
       return _aC_;
      case 14:
       return _aD_;
      case 15:
       return _aE_;
      case 16:
       return _aF_;
      case 17:
       return _aG_;
      case 18:
       return _aH_;
      case 19:
       return _aI_;
      case 20:
       return _aJ_;
      case 21:
       return _aK_;
      case 22:
       return _aL_;
      case 23:
       return _aM_;
      case 24:
       return _aN_;
      case 25:
       return _aO_;
      case 26:
       return _aP_;
      case 27:
       return _aQ_;
      case 28:
       return _aR_;
      case 29:
       return _aS_;
      case 30:
       return _aT_;
      case 31:
       return _aU_;
      case 32:
       return _aV_;
      default: return _aW_;
    }
   }
   function of_system_int(errno){
    return runtime.core_unix_error_of_code(errno);
   }
   var message = UnixLabels[2];
   function to_errno(_uk_){return runtime.core_code_of_unix_error(_uk_);}
   var
    Private$0 = [0, to_errno],
    Error =
      [0,
       compare$0,
       t_of_sexp$7,
       sexp_of_t$6,
       of_system_int,
       message,
       Private$0];
   function putenv(key, data){
    function _uj_(param){
     return [0, [0, cst_key, [0, key]], [0, [0, cst_data, [0, data]], 0]];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[8], key, data);},
             _uj_);
   }
   function unsetenv(name){
    if(caml_call4(Core_String[48], 0, 0, name, 0))
     throw caml_maybe_attach_backtrace
            ([0, Unix_error, 12, cst_unsetenv, name], 0);
    return runtime.core_unix_unsetenv(name);
   }
   function compare_error(a_178, b_179){
    if(a_178 === b_179) return 0;
    var right_181 = b_179[2], left_180 = a_178[2];
    return caml_call2(Core[382], left_180, right_181);
   }
   function error_of_sexp$0(sexp_185){
    if(0 === sexp_185[0]){
     var atom_183 = sexp_185[1];
     return caml_string_notequal(atom_183, cst_Exit_non_zero)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_190, sexp_185);
    }
    var _ui_ = sexp_185[1];
    if(! _ui_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_190, sexp_185);
    var match = _ui_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_190, sexp_185);
    var sexp_args_186 = _ui_[2], atom_183$0 = match[1];
    if(caml_string_notequal(atom_183$0, cst_Exit_non_zero))
     return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
    if(sexp_args_186 && ! sexp_args_186[2]){
     var
      arg0_188 = sexp_args_186[1],
      res0_189 = caml_call1(Core[390], arg0_188);
     return [0, -34939077, res0_189];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_190,
             atom_183$0,
             sexp_185);
   }
   function error_of_sexp$1(sexp_191){
    try{var _ug_ = error_of_sexp$0(sexp_191); return _ug_;}
    catch(_uh_){
     var _uf_ = caml_wrap_exception(_uh_);
     if(_uf_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_192, sexp_191);
     throw caml_maybe_attach_backtrace(_uf_, 0);
    }
   }
   function sexp_of_error$0(param){
    var v_193 = param[2];
    return [1, [0, _bx_, [0, caml_call1(Core[389], v_193), 0]]];
   }
   function compare$1(a_194, b_195){
    function _ud_(a_198, b_199){return compare_error(a_198, b_199);}
    function _ue_(a_196, b_197){return caml_call2(Core[613], a_196, b_197);}
    return caml_call4(Core_Result[17], _ue_, _ud_, a_194, b_195);
   }
   function t_of_sexp$8(x_201){
    return caml_call3(Core_Result[14], Core[621], error_of_sexp$1, x_201);
   }
   function sexp_of_t$7(x_202){
    return caml_call3(Core_Result[15], Core[620], sexp_of_error$0, x_202);
   }
   function to_string_hum(param){
    if(0 === param[0]) return cst_exited_normally;
    var i = param[1][2];
    return caml_call2(sprintf, _by_, i);
   }
   function code(param){
    if(0 === param[0]) return 0;
    var i = param[1][2];
    return i;
   }
   var
    Exit_code_must_be_nonnegative =
      [248, cst_Core_unix_Exit_Exit_code_m, caml_fresh_oo_id(0)];
   function _bz_(param){
    if(param[1] !== Exit_code_must_be_nonnegative)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bB_], 1);
    var arg0_203 = param[2], res0_204 = caml_call1(Core[389], arg0_203);
    return [1, [0, _bA_, [0, res0_204, 0]]];
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Exit_code_must_be_nonnegative, _bz_);
   function of_code(code){
    if(caml_call2(Core[92], code, 0))
     throw caml_maybe_attach_backtrace
            ([0, Exit_code_must_be_nonnegative, code], 0);
    return caml_call2(Core[90], code, 0) ? _bC_ : [1, [0, -34939077, code]];
   }
   function or_error(ok){
    if(0 === ok[0]) return ok;
    var error = ok[1];
    return caml_call5
            (Core_Or_error[44], 0, 0, cst_Unix_Exit, error, sexp_of_error$0);
   }
   function compare_error$0(a_205, b_206){
    if(a_205 === b_206) return 0;
    if(-34939077 <= a_205[1]){
     if(typeof b_206 !== "number" && -34939077 === b_206[1])
      return compare_error(a_205, b_206);
    }
    else if(typeof b_206 !== "number" && -384130424 === b_206[1]){
     var right_210 = b_206[2], left_209 = a_205[2];
     return caml_call2(Core_Signal[31], left_209, right_210);
    }
    return caml_compare(a_205, b_206);
   }
   function error_of_sexp$2(sexp_211){
    try{var _ub_ = error_of_sexp$0(sexp_211); return _ub_;}
    catch(_uc_){
     var _t$_ = caml_wrap_exception(_uc_);
     if(_t$_ !== Sexplib0_Sexp_conv_error[22])
      throw caml_maybe_attach_backtrace(_t$_, 0);
     if(0 === sexp_211[0]){
      var atom_212 = sexp_211[1];
      return caml_string_notequal(atom_212, cst_Signal)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[27], error_source_219, sexp_211);
     }
     var _ua_ = sexp_211[1];
     if(! _ua_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_219, sexp_211);
     var match = _ua_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[28], error_source_219, sexp_211);
     var sexp_args_215 = _ua_[2], atom_212$0 = match[1];
     if(caml_string_notequal(atom_212$0, cst_Signal))
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     if(sexp_args_215 && ! sexp_args_215[2]){
      var
       arg0_217 = sexp_args_215[1],
       res0_218 = caml_call1(Core_Signal[9], arg0_217);
      return [0, -384130424, res0_218];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_219,
              atom_212$0,
              sexp_211);
    }
   }
   function error_of_sexp$3(sexp_220){
    try{var _t9_ = error_of_sexp$2(sexp_220); return _t9_;}
    catch(_t__){
     var _t8_ = caml_wrap_exception(_t__);
     if(_t8_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_221, sexp_220);
     throw caml_maybe_attach_backtrace(_t8_, 0);
    }
   }
   function sexp_of_error$1(v_222){
    if(-34939077 <= v_222[1]) return sexp_of_error$0(v_222);
    var v_223 = v_222[2];
    return [1, [0, _bD_, [0, caml_call1(Core_Signal[10], v_223), 0]]];
   }
   function compare$2(a_224, b_225){
    function _t6_(a_228, b_229){return compare_error$0(a_228, b_229);}
    function _t7_(a_226, b_227){return caml_call2(Core[613], a_226, b_227);}
    return caml_call4(Core_Result[17], _t7_, _t6_, a_224, b_225);
   }
   function t_of_sexp$9(x_231){
    return caml_call3(Core_Result[14], Core[621], error_of_sexp$3, x_231);
   }
   function sexp_of_t$8(x_232){
    return caml_call3(Core_Result[15], Core[620], sexp_of_error$1, x_232);
   }
   function to_string_hum$0(e){
    if(1 === e[0]){
     var match = e[1];
     if(-34939077 > match[1]){
      var s = match[2], _t5_ = caml_call1(Signal_unix[2], s);
      return caml_call3(sprintf, _bE_, caml_call1(Core_Signal[42], s), _t5_);
     }
    }
    return to_string_hum(e);
   }
   var
    Of_unix_got_invalid_status =
      [248, cst_Core_unix_Exit_or_signal_O, caml_fresh_oo_id(0)];
   function _bF_(param){
    if(param[1] !== Of_unix_got_invalid_status)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bH_], 1);
    var arg0_233 = param[2];
    switch(arg0_233[0]){
      case 0:
       var
        arg0_172 = arg0_233[1],
        res0_173 = caml_call1(Core[389], arg0_172),
        res0_234 = [1, [0, _bu_, [0, res0_173, 0]]];
       break;
      case 1:
       var
        arg0_174 = arg0_233[1],
        res0_175 = caml_call1(Core[389], arg0_174),
        res0_234 = [1, [0, _bv_, [0, res0_175, 0]]];
       break;
      default:
       var
        arg0_176 = arg0_233[1],
        res0_177 = caml_call1(Core[389], arg0_176),
        res0_234 = [1, [0, _bw_, [0, res0_177, 0]]];
    }
    return [1, [0, _bG_, [0, res0_234, 0]]];
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Of_unix_got_invalid_status, _bF_);
   function of_unix(status){
    switch(status[0]){
      case 0:
       var i = status[1];
       return caml_call2(Core[90], i, 0) ? _bI_ : [1, [0, -34939077, i]];
      case 1:
       var i$0 = status[1];
       return [1, [0, -384130424, caml_call1(Core_Signal[40], i$0)]];
      default:
       throw caml_maybe_attach_backtrace
              ([0, Of_unix_got_invalid_status, status], 0);
    }
   }
   function or_error$0(ok){
    if(0 === ok[0]) return ok;
    var error = ok[1];
    return caml_call5
            (Core_Or_error[44],
             0,
             0,
             cst_Unix_Exit_or_signal,
             error,
             sexp_of_error$1);
   }
   function error_of_sexp$4(sexp_235){
    try{var _t3_ = error_of_sexp$2(sexp_235); return _t3_;}
    catch(_t4_){
     var _t1_ = caml_wrap_exception(_t4_);
     if(_t1_ !== Sexplib0_Sexp_conv_error[22])
      throw caml_maybe_attach_backtrace(_t1_, 0);
     if(0 === sexp_235[0]){
      var atom_236 = sexp_235[1];
      return caml_string_notequal(atom_236, cst_Stop)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[27], error_source_243, sexp_235);
     }
     var _t2_ = sexp_235[1];
     if(! _t2_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_243, sexp_235);
     var match = _t2_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[28], error_source_243, sexp_235);
     var sexp_args_239 = _t2_[2], atom_236$0 = match[1];
     if(caml_string_notequal(atom_236$0, cst_Stop))
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     if(sexp_args_239 && ! sexp_args_239[2]){
      var
       arg0_241 = sexp_args_239[1],
       res0_242 = caml_call1(Core_Signal[9], arg0_241);
      return [0, 926227490, res0_242];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_243,
              atom_236$0,
              sexp_235);
    }
   }
   function error_of_sexp$5(sexp_244){
    try{var _tZ_ = error_of_sexp$4(sexp_244); return _tZ_;}
    catch(_t0_){
     var _tY_ = caml_wrap_exception(_t0_);
     if(_tY_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_245, sexp_244);
     throw caml_maybe_attach_backtrace(_tY_, 0);
    }
   }
   function sexp_of_error$2(v_246){
    if(926227490 > v_246[1]) return sexp_of_error$1(v_246);
    var v_247 = v_246[2];
    return [1, [0, _bJ_, [0, caml_call1(Core_Signal[10], v_247), 0]]];
   }
   function t_of_sexp$10(x_249){
    return caml_call3(Core_Result[14], Core[621], error_of_sexp$5, x_249);
   }
   function sexp_of_t$9(x_250){
    return caml_call3(Core_Result[15], Core[620], sexp_of_error$2, x_250);
   }
   function to_string_hum$1(e){
    if(1 === e[0]){
     var match = e[1];
     if(926227490 <= match[1]){
      var s = match[2], _tX_ = caml_call1(Signal_unix[2], s);
      return caml_call3(sprintf, _bK_, caml_call1(Core_Signal[42], s), _tX_);
     }
    }
    return to_string_hum$0(e);
   }
   function of_unix$0(param){
    switch(param[0]){
      case 0:
       var i = param[1];
       return caml_call2(Core[90], i, 0) ? _bL_ : [1, [0, -34939077, i]];
      case 1:
       var i$0 = param[1];
       return [1, [0, -384130424, caml_call1(Core_Signal[40], i$0)]];
      default:
       var i$1 = param[1];
       return [1, [0, 926227490, caml_call1(Core_Signal[40], i$1)]];
    }
   }
   function or_error$1(ok){
    if(0 === ok[0]) return ok;
    var error = ok[1];
    return caml_call5
            (Core_Or_error[44],
             0,
             0,
             cst_Unix_Exit_or_signal_or_sto,
             error,
             sexp_of_error$2);
   }
   function prog_r(prog){return [0, cst_prog, [0, prog]];}
   function args_r(argv){
    return [0, cst_argv, caml_call2(Core[301], atom, argv)];
   }
   function env_r(env){return [0, cst_env, caml_call2(Core[301], atom, env)];}
   function t_of_sexp$11(sexp_254){
    if(0 === sexp_254[0]){
     var atom_252 = sexp_254[1];
     return caml_string_notequal(atom_252, cst_Extend)
             ? caml_string_notequal
                (atom_252, cst_Override)
               ? caml_string_notequal
                  (atom_252, cst_Replace)
                 ? caml_string_notequal
                    (atom_252, cst_Replace_raw)
                   ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                   : caml_call2
                     (Sexplib0_Sexp_conv_error[27], error_source_259, sexp_254)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_259, sexp_254)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_259, sexp_254)
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_259, sexp_254);
    }
    var _tN_ = sexp_254[1];
    if(! _tN_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_259, sexp_254);
    var match = _tN_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_259, sexp_254);
    var sexp_args_255 = _tN_[2], atom_252$0 = match[1];
    if(! caml_string_notequal(atom_252$0, cst_Extend)){
     if(sexp_args_255 && ! sexp_args_255[2]){
      var
       arg0_274 = sexp_args_255[1],
       _tQ_ =
         function(sexp_273){
          if(1 === sexp_273[0]){
           var _tV_ = sexp_273[1];
           if(_tV_){
            var _tW_ = _tV_[2];
            if(_tW_ && ! _tW_[2]){
             var
              arg1_270 = _tW_[1],
              arg0_269 = _tV_[1],
              res0_271 = caml_call1(Core[559], arg0_269),
              res1_272 = caml_call1(Core[559], arg1_270);
             return [0, res0_271, res1_272];
            }
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4], error_source_259, 2, sexp_273);
         },
       res0_275 = caml_call2(Core[473], _tQ_, arg0_274);
      return [0, -72399366, res0_275];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_259,
              atom_252$0,
              sexp_254);
    }
    if(! caml_string_notequal(atom_252$0, cst_Override)){
     if(sexp_args_255 && ! sexp_args_255[2]){
      var
       arg0_266 = sexp_args_255[1],
       _tP_ =
         function(sexp_265){
          if(1 === sexp_265[0]){
           var _tT_ = sexp_265[1];
           if(_tT_){
            var _tU_ = _tT_[2];
            if(_tU_ && ! _tU_[2]){
             var
              arg1_262 = _tU_[1],
              arg0_261 = _tT_[1],
              res0_263 = caml_call1(Core[559], arg0_261),
              res1_264 = caml_call2(Core[516], Core[559], arg1_262);
             return [0, res0_263, res1_264];
            }
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4], error_source_259, 2, sexp_265);
         },
       res0_267 = caml_call2(Core[473], _tP_, arg0_266);
      return [0, 584703596, res0_267];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_259,
              atom_252$0,
              sexp_254);
    }
    if(caml_string_notequal(atom_252$0, cst_Replace)){
     if(caml_string_notequal(atom_252$0, cst_Replace_raw))
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     if(sexp_args_255 && ! sexp_args_255[2]){
      var
       arg0_257 = sexp_args_255[1],
       res0_258 = caml_call2(Core[473], Core[559], arg0_257);
      return [0, -854121219, res0_258];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_259,
              atom_252$0,
              sexp_254);
    }
    if(sexp_args_255 && ! sexp_args_255[2]){
     var
      arg0_282 = sexp_args_255[1],
      _tO_ =
        function(sexp_281){
         if(1 === sexp_281[0]){
          var _tR_ = sexp_281[1];
          if(_tR_){
           var _tS_ = _tR_[2];
           if(_tS_ && ! _tS_[2]){
            var
             arg1_278 = _tS_[1],
             arg0_277 = _tR_[1],
             res0_279 = caml_call1(Core[559], arg0_277),
             res1_280 = caml_call1(Core[559], arg1_278);
            return [0, res0_279, res1_280];
           }
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4], error_source_259, 2, sexp_281);
        },
      res0_283 = caml_call2(Core[473], _tO_, arg0_282);
     return [0, -126259180, res0_283];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_259,
             atom_252$0,
             sexp_254);
   }
   function env_of_sexp(sexp_284){
    try{var _tL_ = t_of_sexp$11(sexp_284); return _tL_;}
    catch(_tM_){
     var _tK_ = caml_wrap_exception(_tM_);
     if(_tK_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_285, sexp_284);
     throw caml_maybe_attach_backtrace(_tK_, 0);
    }
   }
   function sexp_of_env(param){
    var _tD_ = param[1];
    if(-72399366 <= _tD_){
     if(584703596 <= _tD_){
      var
       v_296 = param[2],
       _tE_ = 0,
       _tF_ =
         function(param){
          var
           arg1_298 = param[2],
           arg0_297 = param[1],
           res0_299 = caml_call1(Core[558], arg0_297),
           res1_300 = caml_call2(Core[515], Core[558], arg1_298);
          return [1, [0, res0_299, [0, res1_300, 0]]];
         };
      return [1, [0, _bM_, [0, caml_call2(Core[472], _tF_, v_296), _tE_]]];
     }
     var
      v_291 = param[2],
      _tG_ = 0,
      _tH_ =
        function(param){
         var
          arg1_293 = param[2],
          arg0_292 = param[1],
          res0_294 = caml_call1(Core[558], arg0_292),
          res1_295 = caml_call1(Core[558], arg1_293);
         return [1, [0, res0_294, [0, res1_295, 0]]];
        };
     return [1, [0, _bN_, [0, caml_call2(Core[472], _tH_, v_291), _tG_]]];
    }
    if(-126259180 <= _tD_){
     var
      v_286 = param[2],
      _tI_ = 0,
      _tJ_ =
        function(param){
         var
          arg1_288 = param[2],
          arg0_287 = param[1],
          res0_289 = caml_call1(Core[558], arg0_287),
          res1_290 = caml_call1(Core[558], arg1_288);
         return [1, [0, res0_289, [0, res1_290, 0]]];
        };
     return [1, [0, _bO_, [0, caml_call2(Core[472], _tJ_, v_286), _tI_]]];
    }
    var v_301 = param[2];
    return [1, [0, _bP_, [0, caml_call2(Core[472], Core[558], v_301), 0]]];
   }
   function current(base, param){
    if(base)
     var v = base[1], base$0 = caml_call1(Core[248], v);
    else
     var
      _tC_ = caml_call1(UnixLabels[4], 0),
      base$0 = caml_call1(Core_Array[45], _tC_);
    function _tB_(s){return caml_call2(Core_String[74], s, 61);}
    return caml_call2(Core_List[51], base$0, _tB_);
   }
   function expand(base, env$0){
    if(-126259180 > env$0[1]){var env$1 = env$0[2]; return env$1;}
    function _tw_(key, data, acc){
     var _tA_ = caml_call2(Core[18], cst, data);
     return [0, caml_call2(Core[18], key, _tA_), acc];
    }
    var _tx_ = 0;
    function map_of_list(list){
     function _tz_(param, x){return x;}
     return caml_call2(Core_String[159][18], list, _tz_);
    }
    var _ts_ = env$0[1];
    if(-72399366 === _ts_)
     var
      extend = env$0[2],
      _tt_ = current(base, 0),
      _ty_ = map_of_list(caml_call2(Core[156], _tt_, extend));
    else if(584703596 <= _ts_)
     var
      overrides = env$0[2],
      _tu_ =
        function(acc, param){
         var v = param[2], key = param[1];
         if(! v) return caml_call2(Core_Map[47], acc, key);
         var data = v[1];
         return caml_call3(Core_Map[38], acc, key, data);
        },
      _tv_ = map_of_list(current(base, 0)),
      _ty_ = caml_call3(Core_List[102], overrides, _tv_, _tu_);
    else
     var env = env$0[2], _ty_ = map_of_list(env);
    return caml_call3(Core_Map[61], _ty_, _tx_, _tw_);
   }
   function expand_array(base, env){
    var _tr_ = expand(base, env);
    return caml_call1(Core_Array[24], _tr_);
   }
   var
    new_process_group = Spawn[4][1],
    of_pid = Spawn[4][2],
    Pgid = [0, new_process_group, of_pid];
   function exec_internal(prog, argv, use_path, env){
    if(use_path){
     if(env){
      var
       env$0 = env[1],
       _tk_ =
         function(param){
          var _tp_ = [0, env_r(env$0), 0], _tq_ = [0, args_r(argv), _tp_];
          return [0, prog_r(prog), _tq_];
         };
      return improve
              (0,
               function(param){
                return caml_call3(UnixLabels[12], prog, argv, env$0);
               },
               _tk_);
     }
     var
      _tj_ =
        function(param){
         var _to_ = [0, args_r(argv), 0];
         return [0, prog_r(prog), _to_];
        };
     return improve
             (0,
              function(param){return caml_call2(UnixLabels[11], prog, argv);},
              _tj_);
    }
    if(env){
     var
      env$1 = env[1],
      _ti_ =
        function(param){
         var _tm_ = [0, env_r(env$1), 0], _tn_ = [0, args_r(argv), _tm_];
         return [0, prog_r(prog), _tn_];
        };
     return improve
             (0,
              function(param){
               return caml_call3(UnixLabels[10], prog, argv, env$1);
              },
              _ti_);
    }
    function _th_(param){
     var _tl_ = [0, args_r(argv), 0];
     return [0, prog_r(prog), _tl_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[9], prog, argv);},
             _th_);
   }
   var
    Fork_returned_negative_result =
      [248, cst_Core_unix_Fork_returned_ne, caml_fresh_oo_id(0)];
   function _bQ_(param){
    if(param[1] !== Fork_returned_negative_result)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bS_], 1);
    var arg0_303 = param[2], res0_304 = caml_call1(Core[389], arg0_303);
    return [1, [0, _bR_, [0, res0_304, 0]]];
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Fork_returned_negative_result, _bQ_);
   function fork(param){
    var pid = caml_call1(UnixLabels[13], 0);
    if(caml_call2(Core[92], pid, 0))
     throw caml_maybe_attach_backtrace
            ([0, Fork_returned_negative_result, pid], 0);
    return caml_call2(Core[90], pid, 0)
            ? -163213292
            : [0, 928761778, caml_call1(Core_Pid[45], pid)];
   }
   function fork_exec(prog, argv, preexec_fn, opt, env, param){
    if(opt) var sth = opt[1], use_path = sth; else var use_path = 1;
    var argv$0 = caml_call1(Core_Array[24], argv);
    function _td_(eta){return expand_array(0, eta);}
    var env$0 = caml_call2(Core_Option[34], env, _td_), match = fork(0);
    if(typeof match === "number")
     try{
      caml_call2(Core_Option[53], 0, preexec_fn);
      var
       _te_ = exec_internal(prog, argv$0, use_path, env$0),
       _tf_ = caml_call1(Core[158], _te_);
      return _tf_;
     }
     catch(_tg_){return caml_sys_exit(127);}
    var pid = match[2];
    return pid;
   }
   function sexp_of_wait_flag(param){return param ? _bT_ : _bU_;}
   function wait_on_of_sexp(sexp_312){
    if(0 === sexp_312[0]){
     var atom_310 = sexp_312[1];
     return caml_string_notequal(atom_310, cst_Any)
             ? caml_string_notequal
                (atom_310, cst_Group)
               ? caml_string_notequal
                  (atom_310, cst_My_group)
                 ? caml_string_notequal
                    (atom_310, cst_Pid)
                   ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                   : caml_call2
                     (Sexplib0_Sexp_conv_error[27], error_source_314, sexp_312)
                 : -240292084
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_314, sexp_312)
             : 3257036;
    }
    var _tc_ = sexp_312[1];
    if(! _tc_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_314, sexp_312);
    var match = _tc_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_314, sexp_312);
    var sexp_args_313 = _tc_[2], atom_310$0 = match[1];
    if(! caml_string_notequal(atom_310$0, cst_Any))
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_314, sexp_312);
    if(caml_string_notequal(atom_310$0, cst_Group)){
     if(! caml_string_notequal(atom_310$0, cst_My_group))
      return caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_314, sexp_312);
     if(caml_string_notequal(atom_310$0, cst_Pid))
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     if(sexp_args_313 && ! sexp_args_313[2]){
      var
       arg0_316 = sexp_args_313[1],
       res0_317 = caml_call1(Core_Pid[12], arg0_316);
      return [0, 4001835, res0_317];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_314,
              atom_310$0,
              sexp_312);
    }
    if(sexp_args_313 && ! sexp_args_313[2]){
     var
      arg0_319 = sexp_args_313[1],
      res0_320 = caml_call1(Core_Pid[12], arg0_319);
     return [0, 757211935, res0_320];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_314,
             atom_310$0,
             sexp_312);
   }
   function wait_on_of_sexp$0(sexp_321){
    try{var _ta_ = wait_on_of_sexp(sexp_321); return _ta_;}
    catch(_tb_){
     var _s$_ = caml_wrap_exception(_tb_);
     if(_s$_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_322, sexp_321);
     throw caml_maybe_attach_backtrace(_s$_, 0);
    }
   }
   function sexp_of_wait_on(param){
    if(typeof param === "number") return 3257036 <= param ? _bV_ : _bW_;
    if(757211935 <= param[1]){
     var v_323 = param[2];
     return [1, [0, _bX_, [0, caml_call1(Core_Pid[13], v_323), 0]]];
    }
    var v_324 = param[2];
    return [1, [0, _bY_, [0, caml_call1(Core_Pid[13], v_324), 0]]];
   }
   function pid_of_wait_on(param){
    if(typeof param === "number") return 3257036 <= param ? -1 : 0;
    if(757211935 <= param[1]){
     var pid = param[2];
     return - caml_call1(Core_Pid[46], pid) | 0;
    }
    var pid$0 = param[2];
    return caml_call1(Core_Pid[46], pid$0);
   }
   function wait_gen(mode, f, restart, wait_on){
    var pid = pid_of_wait_on(wait_on);
    function _s7_(param){
     var _s__ = [0, [0, cst_pid, caml_call1(Core_Int[77], pid)], 0];
     return [0,
             [0, cst_mode, caml_call2(Core[472], sexp_of_wait_flag, mode)],
             _s__];
    }
    var
     match =
       improve
        ([0, restart],
         function(param){
          var
           match = caml_call2(UnixLabels[15], mode, pid),
           ps = match[2],
           x = match[1];
          return [0, x, of_unix$0(ps)];
         },
         _s7_),
     status = match[2],
     pid$0 = match[1];
    if(caml_call2(Core[90], pid$0, 0))
     var waitpid_result = 0;
    else
     var
      pid$1 = caml_call1(Core_Pid[45], pid$0),
      waitpid_result = [0, [0, pid$1, status]];
    var match$0 = caml_call1(f, waitpid_result);
    if(match$0){var a = match$0[1]; return a;}
    function _s8_(param){
     var
      arg2_333 = param[3],
      arg1_332 = param[2],
      arg0_331 = param[1],
      res0_334 = caml_call1(Core[389], arg0_331),
      res1_335 = caml_call2(Core[472], sexp_of_wait_flag, arg1_332);
     function _s9_(param){
      var
       arg1_327 = param[2],
       arg0_326 = param[1],
       res0_328 = caml_call1(Core_Pid[13], arg0_326),
       res1_329 = sexp_of_t$9(arg1_327);
      return [1, [0, res0_328, [0, res1_329, 0]]];
     }
     var res2_336 = caml_call2(Core[515], _s9_, arg2_333);
     return [1, [0, res0_334, [0, res1_335, [0, res2_336, 0]]]];
    }
    return caml_call5
            (Core[247],
             0,
             _bZ_,
             cst_waitpid_syscall_returned_i,
             [0, pid$0, mode, waitpid_result],
             _s8_);
   }
   function wait(opt, pid){
    if(opt) var sth = opt[1], restart = sth; else var restart = 1;
    function f(param){
     a:
     if(param){
      var x = param[1], _s4_ = x[2];
      if(1 === _s4_[0]){
       var _s5_ = _s4_[1];
       if(typeof _s5_ === "number") break a;
       var _s6_ = _s5_[1];
       if(-384130424 !== _s6_ && -34939077 !== _s6_) break a;
      }
      return [0, x];
     }
     return 0;
    }
    return wait_gen(0, f, restart, pid);
   }
   function wait_nohang(pid){
    function f(x){
     a:
     if(x){
      var _s1_ = x[1][2];
      if(0 !== _s1_[0]){
       var _s2_ = _s1_[1];
       if(typeof _s2_ !== "number"){
        var _s3_ = _s2_[1];
        if(-384130424 === _s3_ || -34939077 === _s3_) break a;
       }
       return 0;
      }
     }
     return [0, x];
    }
    return wait_gen(_b0_, f, 1, pid);
   }
   function wait_untraced(opt, pid){
    if(opt) var sth = opt[1], restart = sth; else var restart = 1;
    return wait_gen(_b1_, function(_s0_){return _s0_;}, restart, pid);
   }
   function wait_nohang_untraced(pid){
    return wait_gen(_b2_, Core_Option[58], 1, pid);
   }
   function waitpid(pid){
    var
     match = wait(0, [0, 4001835, pid]),
     exit_or_signal = match[2],
     pid$0 = match[1];
    if(caml_call2(Core_Pid[23], pid, pid$0)) return exit_or_signal;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b3_], 1);
   }
   function waitpid_exn(pid){
    var
     exit_or_signal = waitpid(pid),
     _sY_ = caml_call1(Core_Result[38], exit_or_signal);
    if(! _sY_) return _sY_;
    function _sZ_(param){
     var
      arg1_339 = param[2],
      arg0_338 = param[1],
      v_337 = arg0_338[2],
      res0_340 = [1, [0, _b4_, [0, caml_call1(Core_Pid[13], v_337), 0]]],
      res1_341 = sexp_of_t$8(arg1_339);
     return [1, [0, res0_340, [0, res1_341, 0]]];
    }
    return caml_call5
            (Core[247],
             0,
             _b5_,
             cst_child_process_didn_t_exit_,
             [0, [0, 28845256, pid], exit_or_signal],
             _sZ_);
   }
   function wait_with_resource_usage(restart$0, wait_on){
    var mode = 0;
    if(restart$0) var sth = restart$0[1], restart = sth; else var restart = 1;
    var pid = pid_of_wait_on(wait_on);
    function _sP_(param){
     var _sX_ = [0, [0, cst_pid$0, caml_call1(Core_Int[77], pid)], 0];
     return [0,
             [0, cst_mode$0, caml_call2(Core[472], sexp_of_wait_flag, mode)],
             _sX_];
    }
    var
     _sQ_ =
       improve
        ([0, restart],
         function(param){return runtime.core_unix_wait4(0, pid);},
         _sP_),
     rusage = _sQ_[2],
     match = _sQ_[1],
     ps = match[2],
     x = match[1];
    if(caml_call2(Core[90], x, 0))
     var _sS_ = 0;
    else
     var
      _sR_ = of_unix$0(ps),
      _sS_ = [0, [0, [0, caml_call1(Core_Pid[45], x), _sR_], rusage]];
    var
     _sT_ = caml_call4(Core_Option[40], 0, 0, _b6_, _sS_),
     rusage$0 = _sT_[2],
     match$0 = _sT_[1],
     ps$0 = match$0[2],
     pid$0 = match$0[1];
    if(1 === ps$0[0] && 926227490 <= ps$0[1][1]){
     var
      _sU_ = [0, [1, [0, _b7_, [0, sexp_of_t$9(ps$0), 0]]], 0],
      _sV_ =
        [0, [1, [0, _b8_, [0, caml_call1(Core_Pid[13], pid$0), 0]]], _sU_],
      _sW_ =
        [1,
         [0,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_process_status_is_Stop_whi),
            _sV_]],
          0]];
     return caml_call1(Core[261], _sW_);
    }
    return [0, [0, pid$0, ps$0], rusage$0];
   }
   function system(s){
    function _sO_(param){return [0, [0, cst_command, [0, s]], 0];}
    return improve
            (0,
             function(param){return of_unix(caml_call1(UnixLabels[16], s));},
             _sO_);
   }
   function getpid(param){
    var _sN_ = caml_call1(UnixLabels[18], 0);
    return caml_call1(Core_Pid[45], _sN_);
   }
   function getppid(param){
    var x = caml_call1(UnixLabels[19], 0);
    return caml_call2(Core[92], x, 1) ? 0 : [0, caml_call1(Core_Pid[45], x)];
   }
   function getppid_exn(param){
    var _sM_ = getppid(0);
    return caml_call4(Core_Option[40], 0, 0, _b9_, _sM_);
   }
   var gettid = [0, function(_sL_){return runtime.core_unix_gettid(_sL_);}];
   function nice$0(i){
    function _sK_(param){
     return [0, [0, cst_priority, caml_call1(Core_Int[77], i)], 0];
    }
    return improve
            (0, function(param){return caml_call1(UnixLabels[20], i);}, _sK_);
   }
   var
    stdin = UnixLabels[21],
    stdout = UnixLabels[22],
    stderr = UnixLabels[23];
   function open_flag_of_sexp(sexp_345){
    a:
    {
     if(0 === sexp_345[0]){
      var _sA_ = sexp_345[1], _sB_ = caml_string_compare(_sA_, cst_o_APPEND);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    if(0 <= _sB_){
                     if(0 >= _sB_) break h;
                     var _sC_ = caml_string_compare(_sA_, cst_o_RDONLY);
                     if(0 <= _sC_){
                      if(0 >= _sC_) break o;
                      if(! caml_string_notequal(_sA_, cst_o_RDWR)) break n;
                      if(! caml_string_notequal(_sA_, cst_o_RSYNC)) break m;
                      if(! caml_string_notequal(_sA_, cst_o_SHARE_DELETE))
                       break l;
                      if(! caml_string_notequal(_sA_, cst_o_SYNC)) break k;
                      if(! caml_string_notequal(_sA_, cst_o_TRUNC)) break j;
                      if(caml_string_notequal(_sA_, cst_o_WRONLY)) break a;
                      break i;
                     }
                     if(! caml_string_notequal(_sA_, cst_o_CLOEXEC)) break g;
                     if(! caml_string_notequal(_sA_, cst_o_CREAT)) break f;
                     if(! caml_string_notequal(_sA_, cst_o_DSYNC)) break e;
                     if(! caml_string_notequal(_sA_, cst_o_EXCL)) break d;
                     if(! caml_string_notequal(_sA_, cst_o_KEEPEXEC)) break c;
                     if(! caml_string_notequal(_sA_, cst_o_NOCTTY)) break b;
                     if(caml_string_notequal(_sA_, cst_o_NONBLOCK)) break a;
                    }
                    else{
                     var _sD_ = caml_string_compare(_sA_, cst_O_NONBLOCK);
                     if(0 > _sD_){
                      if(! caml_string_notequal(_sA_, cst_O_APPEND)) break h;
                      if(! caml_string_notequal(_sA_, cst_O_CLOEXEC)) break g;
                      if(! caml_string_notequal(_sA_, cst_O_CREAT)) break f;
                      if(! caml_string_notequal(_sA_, cst_O_DSYNC)) break e;
                      if(! caml_string_notequal(_sA_, cst_O_EXCL)) break d;
                      if(! caml_string_notequal(_sA_, cst_O_KEEPEXEC)) break c;
                      if(caml_string_notequal(_sA_, cst_O_NOCTTY)) break a;
                      break b;
                     }
                     if(0 < _sD_){
                      if(! caml_string_notequal(_sA_, cst_O_RDONLY)) break o;
                      if(! caml_string_notequal(_sA_, cst_O_RDWR)) break n;
                      if(! caml_string_notequal(_sA_, cst_O_RSYNC)) break m;
                      if(! caml_string_notequal(_sA_, cst_O_SHARE_DELETE))
                       break l;
                      if(! caml_string_notequal(_sA_, cst_O_SYNC)) break k;
                      if(! caml_string_notequal(_sA_, cst_O_TRUNC)) break j;
                      if(caml_string_notequal(_sA_, cst_O_WRONLY)) break a;
                      break i;
                     }
                    }
                    return 3;
                   }
                   return 0;
                  }
                  return 2;
                 }
                 return 11;
                }
                return 12;
               }
               return 10;
              }
              return 6;
             }
             return 1;
            }
            return 4;
           }
           return 13;
          }
          return 5;
         }
         return 9;
        }
        return 7;
       }
       return 14;
      }
      return 8;
     }
     var _sE_ = sexp_345[1];
     if(! _sE_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_344, sexp_345);
     var _sF_ = _sE_[1];
     if(0 !== _sF_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_344, sexp_345);
     var _sG_ = _sF_[1], _sH_ = caml_string_compare(_sG_, cst_o_APPEND);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   if(0 <= _sH_){
                    if(0 >= _sH_) break h;
                    var _sI_ = caml_string_compare(_sG_, cst_o_RDONLY);
                    if(0 <= _sI_){
                     if(0 >= _sI_) break o;
                     if(! caml_string_notequal(_sG_, cst_o_RDWR)) break n;
                     if(! caml_string_notequal(_sG_, cst_o_RSYNC)) break m;
                     if(! caml_string_notequal(_sG_, cst_o_SHARE_DELETE))
                      break l;
                     if(! caml_string_notequal(_sG_, cst_o_SYNC)) break k;
                     if(! caml_string_notequal(_sG_, cst_o_TRUNC)) break j;
                     if(caml_string_notequal(_sG_, cst_o_WRONLY)) break a;
                     break i;
                    }
                    if(! caml_string_notequal(_sG_, cst_o_CLOEXEC)) break g;
                    if(! caml_string_notequal(_sG_, cst_o_CREAT)) break f;
                    if(! caml_string_notequal(_sG_, cst_o_DSYNC)) break e;
                    if(! caml_string_notequal(_sG_, cst_o_EXCL)) break d;
                    if(! caml_string_notequal(_sG_, cst_o_KEEPEXEC)) break c;
                    if(! caml_string_notequal(_sG_, cst_o_NOCTTY)) break b;
                    if(caml_string_notequal(_sG_, cst_o_NONBLOCK)) break a;
                   }
                   else{
                    var _sJ_ = caml_string_compare(_sG_, cst_O_NONBLOCK);
                    if(0 > _sJ_){
                     if(! caml_string_notequal(_sG_, cst_O_APPEND)) break h;
                     if(! caml_string_notequal(_sG_, cst_O_CLOEXEC)) break g;
                     if(! caml_string_notequal(_sG_, cst_O_CREAT)) break f;
                     if(! caml_string_notequal(_sG_, cst_O_DSYNC)) break e;
                     if(! caml_string_notequal(_sG_, cst_O_EXCL)) break d;
                     if(! caml_string_notequal(_sG_, cst_O_KEEPEXEC)) break c;
                     if(caml_string_notequal(_sG_, cst_O_NOCTTY)) break a;
                     break b;
                    }
                    if(0 < _sJ_){
                     if(! caml_string_notequal(_sG_, cst_O_RDONLY)) break o;
                     if(! caml_string_notequal(_sG_, cst_O_RDWR)) break n;
                     if(! caml_string_notequal(_sG_, cst_O_RSYNC)) break m;
                     if(! caml_string_notequal(_sG_, cst_O_SHARE_DELETE))
                      break l;
                     if(! caml_string_notequal(_sG_, cst_O_SYNC)) break k;
                     if(! caml_string_notequal(_sG_, cst_O_TRUNC)) break j;
                     if(caml_string_notequal(_sG_, cst_O_WRONLY)) break a;
                     break i;
                    }
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_344, sexp_345);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_344, sexp_345);
   }
   function sexp_of_open_flag(param){
    switch(param){
      case 0:
       return _b__;
      case 1:
       return _b$_;
      case 2:
       return _ca_;
      case 3:
       return _cb_;
      case 4:
       return _cc_;
      case 5:
       return _cd_;
      case 6:
       return _ce_;
      case 7:
       return _cf_;
      case 8:
       return _cg_;
      case 9:
       return _ch_;
      case 10:
       return _ci_;
      case 11:
       return _cj_;
      case 12:
       return _ck_;
      case 13:
       return _cl_;
      default: return _cm_;
    }
   }
   var file_perm_of_sexp = Core[390];
   function sexp_of_file_perm(fp){
    return [0, caml_call2(Core_Printf[2], _cn_, fp)];
   }
   function is_rw_open_flag(param){return 3 <= param ? 0 : 1;}
   function openfile(opt, mode, filename){
    if(opt) var sth = opt[1], perm = sth; else var perm = 420;
    function mode_sexp(param){
     return caml_call2(Core[472], sexp_of_open_flag, mode);
    }
    if(caml_call2(Core_List[23], mode, is_rw_open_flag)){
     var
      _sv_ =
        function(param){
         var
          _sy_ = [0, file_perm_r(perm), 0],
          _sz_ = [0, [0, cst_mode$1, mode_sexp(0)], _sy_];
         return [0, filename_r(filename), _sz_];
        };
     return improve
             (0,
              function(param){
               return caml_call3(UnixLabels[24], filename, mode, perm);
              },
              _sv_);
    }
    var _sw_ = mode_sexp(0), _sx_ = caml_call1(Core_Sexp[86], _sw_);
    return caml_call3(Core[246], _co_, _sx_, 0);
   }
   function close(restart){return unary_fd(restart, UnixLabels[25]);}
   function with_file(perm, file, mode, f){
    var fd = openfile(perm, mode, file);
    function _st_(param){return close(0)(fd);}
    function _su_(param){return caml_call1(f, fd);}
    return caml_call2(Core[259], _su_, _st_);
   }
   function read_write(f, restart, pos, len, fd, buf){
    var
     match =
       caml_call4
        (Core_Ordered_collection_common[1],
         pos,
         len,
         0,
         caml_ml_bytes_length(buf)),
     len$0 = match[2],
     pos$0 = match[1];
    function _sq_(param){
     var
      _sr_ = [0, len_r(len$0), 0],
      _ss_ = [0, [0, cst_pos$0, caml_call1(Core_Int[77], pos$0)], _sr_];
     return [0, fd_r(fd), _ss_];
    }
    return improve
            (restart,
             function(param){return caml_call4(f, fd, buf, pos$0, len$0);},
             _sq_);
   }
   function read_write_string(f, restart, pos, len, fd, buf){
    var
     match =
       caml_call4
        (Core_Ordered_collection_common[1],
         pos,
         len,
         0,
         caml_ml_string_length(buf)),
     len$0 = match[2],
     pos$0 = match[1];
    function _sn_(param){
     var
      _so_ = [0, len_r(len$0), 0],
      _sp_ = [0, [0, cst_pos$1, caml_call1(Core_Int[77], pos$0)], _so_];
     return [0, fd_r(fd), _sp_];
    }
    return improve
            (restart,
             function(param){return caml_call4(f, fd, buf, pos$0, len$0);},
             _sn_);
   }
   var _cp_ = UnixLabels[27];
   function read(_si_, _sj_, _sk_, _sl_, _sm_){
    return read_write(_cp_, _si_, _sj_, _sk_, _sl_, _sm_);
   }
   var _cq_ = 0, _cr_ = UnixLabels[28];
   function write(_se_, _sf_, _sg_, _sh_){
    return read_write(_cr_, _cq_, _se_, _sf_, _sg_, _sh_);
   }
   var _cs_ = 0, _ct_ = UnixLabels[30];
   function write_substring(_sa_, _sb_, _sc_, _sd_){
    return read_write_string(_ct_, _cs_, _sa_, _sb_, _sc_, _sd_);
   }
   var _cu_ = UnixLabels[29];
   function single_write(_r7_, _r8_, _r9_, _r__, _r$_){
    return read_write(_cu_, _r7_, _r8_, _r9_, _r__, _r$_);
   }
   var _cv_ = UnixLabels[31];
   function single_write_substring(_r2_, _r3_, _r4_, _r5_, _r6_){
    return read_write_string(_cv_, _r2_, _r3_, _r4_, _r5_, _r6_);
   }
   var
    in_channel_of_descr = UnixLabels[32],
    out_channel_of_descr = UnixLabels[33],
    descr_of_in_channel = UnixLabels[34],
    descr_of_out_channel = UnixLabels[35];
   function seek_command_of_sexp(sexp_350){
    a:
    {
     if(0 === sexp_350[0]){
      var _rY_ = sexp_350[1];
      b:
      if(caml_string_notequal(_rY_, cst_SEEK_CUR)){
       c:
       if(caml_string_notequal(_rY_, cst_SEEK_END)){
        if(caml_string_notequal(_rY_, cst_SEEK_SET)){
         if(! caml_string_notequal(_rY_, cst_sEEK_CUR)) break b;
         if(! caml_string_notequal(_rY_, cst_sEEK_END)) break c;
         if(caml_string_notequal(_rY_, cst_sEEK_SET)) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _rZ_ = sexp_350[1];
     if(! _rZ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_349, sexp_350);
     var _r0_ = _rZ_[1];
     if(0 !== _r0_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_349, sexp_350);
     var _r1_ = _r0_[1];
     b:
     if(caml_string_notequal(_r1_, cst_SEEK_CUR)){
      c:
      if(caml_string_notequal(_r1_, cst_SEEK_END)){
       if(caml_string_notequal(_r1_, cst_SEEK_SET)){
        if(! caml_string_notequal(_r1_, cst_sEEK_CUR)) break b;
        if(! caml_string_notequal(_r1_, cst_sEEK_END)) break c;
        if(caml_string_notequal(_r1_, cst_sEEK_SET)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_349, sexp_350);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_349, sexp_350);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_349, sexp_350);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_349, sexp_350);
   }
   function sexp_of_seek_command(param){
    switch(param){
      case 0:
       return _cw_;
      case 1:
       return _cx_;
      default: return _cy_;
    }
   }
   function file_kind_of_sexp(sexp_354){
    a:
    {
     if(0 === sexp_354[0]){
      var _rS_ = sexp_354[1], _rT_ = caml_string_compare(_rS_, cst_s_BLK);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            if(0 <= _rT_){
             if(0 < _rT_){
              if(! caml_string_notequal(_rS_, cst_s_CHR)) break g;
              if(! caml_string_notequal(_rS_, cst_s_DIR)) break f;
              if(! caml_string_notequal(_rS_, cst_s_FIFO)) break e;
              if(! caml_string_notequal(_rS_, cst_s_LNK)) break d;
              if(! caml_string_notequal(_rS_, cst_s_REG)) break c;
              if(caml_string_notequal(_rS_, cst_s_SOCK)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(_rS_, cst_S_BLK)){
             if(! caml_string_notequal(_rS_, cst_S_CHR)) break g;
             if(! caml_string_notequal(_rS_, cst_S_DIR)) break f;
             if(! caml_string_notequal(_rS_, cst_S_FIFO)) break e;
             if(! caml_string_notequal(_rS_, cst_S_LNK)) break d;
             if(! caml_string_notequal(_rS_, cst_S_REG)) break c;
             if(caml_string_notequal(_rS_, cst_S_SOCK)) break a;
             break b;
            }
            return 3;
           }
           return 2;
          }
          return 1;
         }
         return 5;
        }
        return 4;
       }
       return 0;
      }
      return 6;
     }
     var _rU_ = sexp_354[1];
     if(! _rU_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_353, sexp_354);
     var _rV_ = _rU_[1];
     if(0 !== _rV_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_353, sexp_354);
     var _rW_ = _rV_[1], _rX_ = caml_string_compare(_rW_, cst_s_BLK);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(0 <= _rX_){
            if(0 < _rX_){
             if(! caml_string_notequal(_rW_, cst_s_CHR)) break g;
             if(! caml_string_notequal(_rW_, cst_s_DIR)) break f;
             if(! caml_string_notequal(_rW_, cst_s_FIFO)) break e;
             if(! caml_string_notequal(_rW_, cst_s_LNK)) break d;
             if(! caml_string_notequal(_rW_, cst_s_REG)) break c;
             if(caml_string_notequal(_rW_, cst_s_SOCK)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_rW_, cst_S_BLK)){
            if(! caml_string_notequal(_rW_, cst_S_CHR)) break g;
            if(! caml_string_notequal(_rW_, cst_S_DIR)) break f;
            if(! caml_string_notequal(_rW_, cst_S_FIFO)) break e;
            if(! caml_string_notequal(_rW_, cst_S_LNK)) break d;
            if(! caml_string_notequal(_rW_, cst_S_REG)) break c;
            if(caml_string_notequal(_rW_, cst_S_SOCK)) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_353, sexp_354);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_353, sexp_354);
   }
   function sexp_of_file_kind(param){
    switch(param){
      case 0:
       return _cz_;
      case 1:
       return _cA_;
      case 2:
       return _cB_;
      case 3:
       return _cC_;
      case 4:
       return _cD_;
      case 5:
       return _cE_;
      default: return _cF_;
    }
   }
   var isatty = unary_fd(0, UnixLabels[42]);
   function stats_of_sexp(x_357){
    function _rF_(param){
     var
      _rI_ = param[2],
      _rJ_ = _rI_[2],
      _rK_ = _rJ_[2],
      _rL_ = _rK_[2],
      _rM_ = _rL_[2],
      _rN_ = _rM_[2],
      _rO_ = _rN_[2],
      _rP_ = _rO_[2],
      _rQ_ = _rP_[2],
      _rR_ = _rQ_[2],
      st_ctime = _rR_[2][1],
      st_mtime = _rR_[1],
      st_atime = _rQ_[1],
      st_size = _rP_[1],
      st_rdev = _rO_[1],
      st_gid = _rN_[1],
      st_uid = _rM_[1],
      st_nlink = _rL_[1],
      st_perm = _rK_[1],
      st_kind = _rJ_[1],
      st_ino = _rI_[1],
      st_dev = param[1];
     return [0,
             st_dev,
             st_ino,
             st_kind,
             st_perm,
             st_nlink,
             st_uid,
             st_gid,
             st_rdev,
             st_size,
             st_atime,
             st_mtime,
             st_ctime];
    }
    var _rG_ = 0;
    function _rH_(param){
     var switch$0 = caml_string_compare(param, cst_st_mtime$1);
     if(0 <= switch$0){
      if(0 >= switch$0) return 10;
      if(! caml_string_notequal(param, cst_st_nlink$1)) return 4;
      if(! caml_string_notequal(param, cst_st_perm$1)) return 3;
      if(! caml_string_notequal(param, cst_st_rdev$1)) return 7;
      if(! caml_string_notequal(param, cst_st_size$1)) return 8;
      if(! caml_string_notequal(param, cst_st_uid$1)) return 5;
     }
     else{
      if(! caml_string_notequal(param, cst_st_atime$1)) return 9;
      if(! caml_string_notequal(param, cst_st_ctime$1)) return 11;
      if(! caml_string_notequal(param, cst_st_dev$1)) return 0;
      if(! caml_string_notequal(param, cst_st_gid$1)) return 6;
      if(! caml_string_notequal(param, cst_st_ino$1)) return 1;
      if(! caml_string_notequal(param, cst_st_kind$1)) return 2;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_356,
             [0,
              cst_st_dev,
              1,
              Core[390],
              [0,
               cst_st_ino,
               1,
               Core[390],
               [0,
                cst_st_kind,
                1,
                file_kind_of_sexp,
                [0,
                 cst_st_perm,
                 1,
                 file_perm_of_sexp,
                 [0,
                  cst_st_nlink,
                  1,
                  Core[390],
                  [0,
                   cst_st_uid,
                   1,
                   Core[390],
                   [0,
                    cst_st_gid,
                    1,
                    Core[390],
                    [0,
                     cst_st_rdev,
                     1,
                     Core[390],
                     [0,
                      cst_st_size,
                      1,
                      Core[390],
                      [0,
                       cst_st_atime,
                       1,
                       Core[368],
                       [0,
                        cst_st_mtime,
                        1,
                        Core[368],
                        [0, cst_st_ctime, 1, Core[368], 0]]]]]]]]]]]],
             _rH_,
             _rG_,
             _rF_,
             x_357);
   }
   function sexp_of_stats(param){
    var
     st_ctime_381 = param[12],
     st_mtime_379 = param[11],
     st_atime_377 = param[10],
     st_size_375 = param[9],
     st_rdev_373 = param[8],
     st_gid_371 = param[7],
     st_uid_369 = param[6],
     st_nlink_367 = param[5],
     st_perm_365 = param[4],
     st_kind_363 = param[3],
     st_ino_361 = param[2],
     st_dev_359 = param[1],
     arg_382 = caml_call1(Core[367], st_ctime_381),
     bnds_358 = [0, [1, [0, _cG_, [0, arg_382, 0]]], 0],
     arg_380 = caml_call1(Core[367], st_mtime_379),
     bnds_358$0 = [0, [1, [0, _cH_, [0, arg_380, 0]]], bnds_358],
     arg_378 = caml_call1(Core[367], st_atime_377),
     bnds_358$1 = [0, [1, [0, _cI_, [0, arg_378, 0]]], bnds_358$0],
     arg_376 = caml_call1(Core[389], st_size_375),
     bnds_358$2 = [0, [1, [0, _cJ_, [0, arg_376, 0]]], bnds_358$1],
     arg_374 = caml_call1(Core[389], st_rdev_373),
     bnds_358$3 = [0, [1, [0, _cK_, [0, arg_374, 0]]], bnds_358$2],
     arg_372 = caml_call1(Core[389], st_gid_371),
     bnds_358$4 = [0, [1, [0, _cL_, [0, arg_372, 0]]], bnds_358$3],
     arg_370 = caml_call1(Core[389], st_uid_369),
     bnds_358$5 = [0, [1, [0, _cM_, [0, arg_370, 0]]], bnds_358$4],
     arg_368 = caml_call1(Core[389], st_nlink_367),
     bnds_358$6 = [0, [1, [0, _cN_, [0, arg_368, 0]]], bnds_358$5],
     arg_366 = sexp_of_file_perm(st_perm_365),
     bnds_358$7 = [0, [1, [0, _cO_, [0, arg_366, 0]]], bnds_358$6],
     arg_364 = sexp_of_file_kind(st_kind_363),
     bnds_358$8 = [0, [1, [0, _cP_, [0, arg_364, 0]]], bnds_358$7],
     arg_362 = caml_call1(Core[389], st_ino_361),
     bnds_358$9 = [0, [1, [0, _cQ_, [0, arg_362, 0]]], bnds_358$8],
     arg_360 = caml_call1(Core[389], st_dev_359),
     bnds_358$10 = [0, [1, [0, _cR_, [0, arg_360, 0]]], bnds_358$9];
    return [1, bnds_358$10];
   }
   var
    stat = unary_filename(0, UnixLabels[39]),
    lstat = unary_filename(0, UnixLabels[40]),
    fstat = unary_fd(0, UnixLabels[41]);
   function lseek(fd, pos, mode){
    function _rC_(param){
     var
      _rD_ = [0, [0, cst_mode$2, sexp_of_seek_command(mode)], 0],
      _rE_ = [0, [0, cst_pos$2, caml_call1(Core_Int[77], pos)], _rD_];
     return [0, fd_r(fd), _rE_];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[36], fd, pos, mode);
             },
             _rC_);
   }
   function truncate(filename, len){
    function _rA_(param){
     var _rB_ = [0, len_r(len), 0];
     return [0, filename_r(filename), _rB_];
    }
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[37], filename, len);
             },
             _rA_);
   }
   function ftruncate(fd, len){
    function _ry_(param){
     var _rz_ = [0, len_r(len), 0];
     return [0, fd_r(fd), _rz_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[38], fd, len);},
             _ry_);
   }
   function lock_command_of_sexp(sexp_386){
    a:
    {
     if(0 === sexp_386[0]){
      var _rs_ = sexp_386[1], _rt_ = caml_string_compare(_rs_, cst_f_LOCK);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _rt_){
            if(0 < _rt_){
             if(! caml_string_notequal(_rs_, cst_f_RLOCK)) break f;
             if(! caml_string_notequal(_rs_, cst_f_TEST)) break e;
             if(! caml_string_notequal(_rs_, cst_f_TLOCK)) break d;
             if(! caml_string_notequal(_rs_, cst_f_TRLOCK)) break c;
             if(caml_string_notequal(_rs_, cst_f_ULOCK)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_rs_, cst_F_LOCK)){
            if(! caml_string_notequal(_rs_, cst_F_RLOCK)) break f;
            if(! caml_string_notequal(_rs_, cst_F_TEST)) break e;
            if(! caml_string_notequal(_rs_, cst_F_TLOCK)) break d;
            if(! caml_string_notequal(_rs_, cst_F_TRLOCK)) break c;
            if(caml_string_notequal(_rs_, cst_F_ULOCK)) break a;
            break b;
           }
           return 1;
          }
          return 4;
         }
         return 3;
        }
        return 2;
       }
       return 5;
      }
      return 0;
     }
     var _ru_ = sexp_386[1];
     if(! _ru_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_385, sexp_386);
     var _rv_ = _ru_[1];
     if(0 !== _rv_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_385, sexp_386);
     var _rw_ = _rv_[1], _rx_ = caml_string_compare(_rw_, cst_f_LOCK);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _rx_){
           if(0 < _rx_){
            if(! caml_string_notequal(_rw_, cst_f_RLOCK)) break f;
            if(! caml_string_notequal(_rw_, cst_f_TEST)) break e;
            if(! caml_string_notequal(_rw_, cst_f_TLOCK)) break d;
            if(! caml_string_notequal(_rw_, cst_f_TRLOCK)) break c;
            if(caml_string_notequal(_rw_, cst_f_ULOCK)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_rw_, cst_F_LOCK)){
           if(! caml_string_notequal(_rw_, cst_F_RLOCK)) break f;
           if(! caml_string_notequal(_rw_, cst_F_TEST)) break e;
           if(! caml_string_notequal(_rw_, cst_F_TLOCK)) break d;
           if(! caml_string_notequal(_rw_, cst_F_TRLOCK)) break c;
           if(caml_string_notequal(_rw_, cst_F_ULOCK)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_385, sexp_386);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_385, sexp_386);
   }
   function sexp_of_lock_command(param){
    switch(param){
      case 0:
       return _cS_;
      case 1:
       return _cT_;
      case 2:
       return _cU_;
      case 3:
       return _cV_;
      case 4:
       return _cW_;
      default: return _cX_;
    }
   }
   function lockf(fd, mode, len){
    try{var _ro_ = caml_call1(Core_Int64[6], len), len$0 = _ro_;}
    catch(_rr_){
     var len$0 = caml_call1(Core[6], cst_len_passed_to_Unix_lockf_t);
    }
    function _rn_(param){
     var
      _rp_ = [0, len_r(len$0), 0],
      _rq_ = [0, [0, cst_mode$3, sexp_of_lock_command(mode)], _rp_];
     return [0, fd_r(fd), _rq_];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[94], fd, mode, len$0);
             },
             _rn_);
   }
   var Flock_command = [0, 0, 1, 2];
   function flock(_rl_, _rm_){return runtime.core_unix_flock(0, _rl_, _rm_);}
   function flock_blocking(fd, command){
    if(runtime.core_unix_flock(1, fd, command)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _cY_], 1);
   }
   function lseek$0(fd, pos, mode){
    function _ri_(param){
     var
      _rj_ = [0, [0, cst_mode$4, sexp_of_seek_command(mode)], 0],
      _rk_ = [0, [0, cst_pos$3, caml_call1(Core_Int64[73], pos)], _rj_];
     return [0, fd_r(fd), _rk_];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[43][1], fd, pos, mode);
             },
             _ri_);
   }
   function len64_r(len){
    return [0, cst_len$1, caml_call1(Core_Int64[73], len)];
   }
   function truncate$0(filename, len){
    function _rg_(param){
     var _rh_ = [0, len64_r(len), 0];
     return [0, filename_r(filename), _rh_];
    }
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[43][2], filename, len);
             },
             _rg_);
   }
   function ftruncate$0(fd, len){
    function _re_(param){
     var _rf_ = [0, len64_r(len), 0];
     return [0, fd_r(fd), _rf_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[43][3], fd, len);},
             _re_);
   }
   function stats_of_sexp$0(x_389){
    function _q3_(param){
     var
      _q6_ = param[2],
      _q7_ = _q6_[2],
      _q8_ = _q7_[2],
      _q9_ = _q8_[2],
      _q__ = _q9_[2],
      _q$_ = _q__[2],
      _ra_ = _q$_[2],
      _rb_ = _ra_[2],
      _rc_ = _rb_[2],
      _rd_ = _rc_[2],
      st_ctime = _rd_[2][1],
      st_mtime = _rd_[1],
      st_atime = _rc_[1],
      st_size = _rb_[1],
      st_rdev = _ra_[1],
      st_gid = _q$_[1],
      st_uid = _q__[1],
      st_nlink = _q9_[1],
      st_perm = _q8_[1],
      st_kind = _q7_[1],
      st_ino = _q6_[1],
      st_dev = param[1];
     return [0,
             st_dev,
             st_ino,
             st_kind,
             st_perm,
             st_nlink,
             st_uid,
             st_gid,
             st_rdev,
             st_size,
             st_atime,
             st_mtime,
             st_ctime];
    }
    var _q4_ = 0;
    function _q5_(param){
     var switch$0 = caml_string_compare(param, cst_st_mtime$1);
     if(0 <= switch$0){
      if(0 >= switch$0) return 10;
      if(! caml_string_notequal(param, cst_st_nlink$1)) return 4;
      if(! caml_string_notequal(param, cst_st_perm$1)) return 3;
      if(! caml_string_notequal(param, cst_st_rdev$1)) return 7;
      if(! caml_string_notequal(param, cst_st_size$1)) return 8;
      if(! caml_string_notequal(param, cst_st_uid$1)) return 5;
     }
     else{
      if(! caml_string_notequal(param, cst_st_atime$1)) return 9;
      if(! caml_string_notequal(param, cst_st_ctime$1)) return 11;
      if(! caml_string_notequal(param, cst_st_dev$1)) return 0;
      if(! caml_string_notequal(param, cst_st_gid$1)) return 6;
      if(! caml_string_notequal(param, cst_st_ino$1)) return 1;
      if(! caml_string_notequal(param, cst_st_kind$1)) return 2;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_388,
             [0,
              cst_st_dev$0,
              1,
              Core[390],
              [0,
               cst_st_ino$0,
               1,
               Core[390],
               [0,
                cst_st_kind$0,
                1,
                file_kind_of_sexp,
                [0,
                 cst_st_perm$0,
                 1,
                 file_perm_of_sexp,
                 [0,
                  cst_st_nlink$0,
                  1,
                  Core[390],
                  [0,
                   cst_st_uid$0,
                   1,
                   Core[390],
                   [0,
                    cst_st_gid$0,
                    1,
                    Core[390],
                    [0,
                     cst_st_rdev$0,
                     1,
                     Core[390],
                     [0,
                      cst_st_size$0,
                      1,
                      Core[434],
                      [0,
                       cst_st_atime$0,
                       1,
                       Core[368],
                       [0,
                        cst_st_mtime$0,
                        1,
                        Core[368],
                        [0, cst_st_ctime$0, 1, Core[368], 0]]]]]]]]]]]],
             _q5_,
             _q4_,
             _q3_,
             x_389);
   }
   function sexp_of_stats$0(param){
    var
     st_ctime_413 = param[12],
     st_mtime_411 = param[11],
     st_atime_409 = param[10],
     st_size_407 = param[9],
     st_rdev_405 = param[8],
     st_gid_403 = param[7],
     st_uid_401 = param[6],
     st_nlink_399 = param[5],
     st_perm_397 = param[4],
     st_kind_395 = param[3],
     st_ino_393 = param[2],
     st_dev_391 = param[1],
     arg_414 = caml_call1(Core[367], st_ctime_413),
     bnds_390 = [0, [1, [0, _cZ_, [0, arg_414, 0]]], 0],
     arg_412 = caml_call1(Core[367], st_mtime_411),
     bnds_390$0 = [0, [1, [0, _c0_, [0, arg_412, 0]]], bnds_390],
     arg_410 = caml_call1(Core[367], st_atime_409),
     bnds_390$1 = [0, [1, [0, _c1_, [0, arg_410, 0]]], bnds_390$0],
     arg_408 = caml_call1(Core[433], st_size_407),
     bnds_390$2 = [0, [1, [0, _c2_, [0, arg_408, 0]]], bnds_390$1],
     arg_406 = caml_call1(Core[389], st_rdev_405),
     bnds_390$3 = [0, [1, [0, _c3_, [0, arg_406, 0]]], bnds_390$2],
     arg_404 = caml_call1(Core[389], st_gid_403),
     bnds_390$4 = [0, [1, [0, _c4_, [0, arg_404, 0]]], bnds_390$3],
     arg_402 = caml_call1(Core[389], st_uid_401),
     bnds_390$5 = [0, [1, [0, _c5_, [0, arg_402, 0]]], bnds_390$4],
     arg_400 = caml_call1(Core[389], st_nlink_399),
     bnds_390$6 = [0, [1, [0, _c6_, [0, arg_400, 0]]], bnds_390$5],
     arg_398 = sexp_of_file_perm(st_perm_397),
     bnds_390$7 = [0, [1, [0, _c7_, [0, arg_398, 0]]], bnds_390$6],
     arg_396 = sexp_of_file_kind(st_kind_395),
     bnds_390$8 = [0, [1, [0, _c8_, [0, arg_396, 0]]], bnds_390$7],
     arg_394 = caml_call1(Core[389], st_ino_393),
     bnds_390$9 = [0, [1, [0, _c9_, [0, arg_394, 0]]], bnds_390$8],
     arg_392 = caml_call1(Core[389], st_dev_391),
     bnds_390$10 = [0, [1, [0, _c__, [0, arg_392, 0]]], bnds_390$9];
    return [1, bnds_390$10];
   }
   var
    stat$0 = unary_filename(0, UnixLabels[43][4]),
    lstat$0 = unary_filename(0, UnixLabels[43][5]),
    fstat$0 = unary_fd(0, UnixLabels[43][6]),
    unlink = unary_filename(0, UnixLabels[45]),
    f = UnixLabels[46];
   function rename(src, dst){
    function _q2_(param){
     return [0, [0, cst_src, [0, src]], [0, [0, cst_dst, [0, dst]], 0]];
    }
    return improve(0, function(param){return caml_call2(f, src, dst);}, _q2_);
   }
   function link(opt, target, link_name, param){
    if(opt) var sth = opt[1], force = sth; else var force = 0;
    function _qY_(param){
     return [0,
             [0, cst_target, [0, target]],
             [0, [0, cst_link_name, [0, link_name]], 0]];
    }
    return improve
            (0,
             function(param){
              a:
              if(force)
               try{caml_call1(UnixLabels[45], link_name);}
               catch(_q1_){
                var _qZ_ = caml_wrap_exception(_q1_);
                if(_qZ_[1] === Unix_error){
                 var _q0_ = _qZ_[2];
                 if(typeof _q0_ === "number" && 20 === _q0_) break a;
                }
                throw caml_maybe_attach_backtrace(_qZ_, 0);
               }
              return caml_call3(UnixLabels[47], 0, target, link_name);
             },
             _qY_);
   }
   function map_file(fd, pos, kind, layout, shared, dims){
    return caml_call6(UnixLabels[44], fd, pos, kind, layout, shared, dims);
   }
   function sexp_of_access_permission(param){
    switch(param){
      case 0:
       return _c$_;
      case 1:
       return _da_;
      case 2:
       return _db_;
      default: return _dc_;
    }
   }
   function chmod(filename, perm){
    function _qW_(param){
     var _qX_ = [0, file_perm_r(perm), 0];
     return [0, filename_r(filename), _qX_];
    }
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[49], filename, perm);
             },
             _qW_);
   }
   function fchmod(fd, perm){
    function _qU_(param){
     var _qV_ = [0, file_perm_r(perm), 0];
     return [0, fd_r(fd), _qV_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[50], fd, perm);},
             _qU_);
   }
   function chown(filename, uid, gid){
    function _qR_(param){
     var _qS_ = [0, gid_r(gid), 0], _qT_ = [0, uid_r(uid), _qS_];
     return [0, filename_r(filename), _qT_];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[51], filename, uid, gid);
             },
             _qR_);
   }
   function fchown(fd, uid, gid){
    function _qO_(param){
     var _qP_ = [0, gid_r(gid), 0], _qQ_ = [0, uid_r(uid), _qP_];
     return [0, fd_r(fd), _qQ_];
    }
    return improve
            (0,
             function(param){return caml_call3(UnixLabels[52], fd, uid, gid);},
             _qO_);
   }
   function umask(mode){
    function _qN_(param){
     return [0,
             [0, cst_mode$5, [0, caml_call2(Core_Printf[2], _dd_, mode)]],
             0];
    }
    return improve
            (0,
             function(param){return caml_call1(UnixLabels[53], mode);},
             _qN_);
   }
   function access(filename, perm){
    function _qJ_(param){
     function _qL_(param){
      return 771170225 <= param
              ? 914388854 <= param ? 0 : 2
              : -193687044 <= param ? 3 : 1;
     }
     var perm$0 = caml_call2(Core_List[51], perm, _qL_);
     function _qK_(param){
      var
       _qM_ =
         [0,
          [0,
           cst_perm$0,
           caml_call2(Core[472], sexp_of_access_permission, perm$0)],
          0];
      return [0, filename_r(filename), _qM_];
     }
     return improve
             (0,
              function(param){
               return caml_call2(UnixLabels[54], filename, perm$0);
              },
              _qK_);
    }
    return caml_call1(Core_Result[54], _qJ_);
   }
   function access_exn(filename, perm){
    var _qI_ = access(filename, perm);
    return caml_call1(Core_Result[40], _qI_);
   }
   var
    remove =
      unary_filename
       (0, function(_qH_){return runtime.core_unix_remove(_qH_);});
   function dup(close_on_exec, fd){
    function _qF_(param){
     var _qG_ = [0, close_on_exec_r(close_on_exec), 0];
     return [0, fd_r(fd), _qG_];
    }
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[55], close_on_exec, fd);
             },
             _qF_);
   }
   function dup2(close_on_exec, src, dst, param){
    function _qC_(param){
     var
      _qD_ = [0, close_on_exec_r(close_on_exec), 0],
      _qE_ =
        [0, [0, cst_dst$0, caml_call1(Core_unix_File_descr[2], dst)], _qD_];
     return [0,
             [0, cst_src$0, caml_call1(Core_unix_File_descr[2], src)],
             _qE_];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[56], close_on_exec, src, dst);
             },
             _qC_);
   }
   var
    set_nonblock = unary_fd(0, UnixLabels[57]),
    clear_nonblock = unary_fd(0, UnixLabels[58]),
    set_close_on_exec = unary_fd(0, UnixLabels[59]),
    clear_close_on_exec = unary_fd(0, UnixLabels[60]),
    append = runtime.unix_O_APPEND(0),
    async = runtime.unix_O_ASYNC(0),
    cloexec = runtime.unix_O_CLOEXEC(0),
    creat = runtime.unix_O_CREAT(0),
    direct = runtime.unix_O_DIRECT(0),
    directory = runtime.unix_O_DIRECTORY(0),
    dsync = runtime.unix_O_DSYNC(0),
    excl = runtime.unix_O_EXCL(0),
    noatime = runtime.unix_O_NOATIME(0),
    noctty = runtime.unix_O_NOCTTY(0),
    nofollow = runtime.unix_O_NOFOLLOW(0),
    nonblock = runtime.unix_O_NONBLOCK(0),
    rdonly = runtime.unix_O_RDONLY(0),
    rdwr = runtime.unix_O_RDWR(0),
    rsync = runtime.unix_O_RSYNC(0),
    sync = runtime.unix_O_SYNC(0),
    trunc = runtime.unix_O_TRUNC(0),
    wronly = runtime.unix_O_WRONLY(0),
    known =
      [0,
       [0, append, cst_append],
       [0,
        [0, async, cst_async],
        [0,
         [0, cloexec, cst_cloexec],
         [0,
          [0, creat, cst_creat],
          [0,
           [0, direct, cst_direct],
           [0,
            [0, directory, cst_directory],
            [0,
             [0, dsync, cst_dsync],
             [0,
              [0, excl, cst_excl],
              [0,
               [0, noatime, cst_noatime],
               [0,
                [0, noctty, cst_noctty],
                [0,
                 [0, nofollow, cst_nofollow],
                 [0,
                  [0, nonblock, cst_nonblock],
                  [0,
                   [0, rsync, cst_rsync],
                   [0, [0, sync, cst_sync], [0, [0, trunc, cst_trunc], 0]]]]]]]]]]]]]]],
    access_modes =
      [0,
       [0, rdonly, cst_rdonly],
       [0, [0, rdwr, cst_rdwr], [0, [0, wronly, cst_wronly], 0]]],
    include = caml_call1(Flags[2], [0, known, 1, 1, 1]),
    t_of_sexp$12 = include[1],
    typerep_of_t = include[3],
    typename_of_t = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol$2 = include[7],
    symbol$3 = include[8],
    symbol$4 = include[9],
    symbol$5 = include[10],
    equal = include[11],
    compare$3 = include[12],
    min$0 = include[13],
    max$0 = include[14],
    ascending = include[15],
    descending = include[16],
    between = include[17],
    clamp_exn = include[18],
    clamp = include[19],
    comparator = include[20],
    validate_lbound = include[21],
    validate_ubound = include[22],
    validate_bound = include[23],
    Replace_polymorphic_compare = include[24],
    Map = include[25],
    Set = include[26],
    to_flag_list = include[27],
    of_int = include[28],
    to_int_exn = include[29],
    empty$0 = include[30],
    symbol$6 = include[31],
    symbol$7 = include[32],
    intersect = include[33],
    complement = include[34],
    is_empty = include[35],
    do_intersect = include[36],
    are_disjoint = include[37],
    is_subset = include[38],
    Unstable = include[39],
    _de_ = include[2];
   function access_mode(t){
    var _qB_ = caml_call1(Core_Int63[72], 3);
    return caml_call2(Core_Int63[45], t, _qB_);
   }
   function can_read(t){
    var _qA_ = caml_call2(symbol$2, access_mode(t), rdonly);
    return _qA_ ? _qA_ : caml_call2(symbol$2, access_mode(t), rdwr);
   }
   function can_write(t){
    var _qz_ = caml_call2(symbol$2, access_mode(t), wronly);
    return _qz_ ? _qz_ : caml_call2(symbol$2, access_mode(t), rdwr);
   }
   function sexp_of_t$10(t){
    var a = access_mode(t);
    function _qy_(param){
     var a$0 = param[1];
     return caml_call2(symbol$2, a, a$0);
    }
    var match = caml_call2(Core_List[27], access_modes, _qy_);
    if(match)
     var
      name = match[1][2],
      prefix = [0, [0, name], 0],
      prefix$0 = prefix,
      t$0 = caml_call2(symbol$7, t, a);
    else
     var prefix$0 = 0, t$0 = t;
    var s = caml_call1(_de_, t$0);
    if(0 === s[0]) var rest = [0, s, 0]; else var l = s[1], rest = l;
    return [1, caml_call2(Core[156], prefix$0, rest)];
   }
   var getfl = runtime.unix_F_GETFL(0), setfl = runtime.unix_F_SETFL(0);
   function fcntl_getfl(fd){
    return runtime.core_unix_fcntl(fd, getfl, Core_Int63[16]);
   }
   function fcntl_setfl(fd, flags){
    var result = runtime.core_unix_fcntl(fd, setfl, flags);
    if(caml_call2(Core_Int63[113], result, Core_Int63[16])) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _df_], 1);
   }
   function improve_mkdir(mkdir, dirname, perm){
    function _qw_(param){
     var _qx_ = [0, file_perm_r(perm), 0];
     return [0, dirname_r(dirname), _qx_];
    }
    return improve
            (0,
             function(param){return caml_call2(mkdir, dirname, perm);},
             _qw_);
   }
   var _dg_ = UnixLabels[61];
   function mkdir_idempotent(dirname, perm){
    try{caml_call2(UnixLabels[61], dirname, perm);}
    catch(_qv_){
     var _qt_ = caml_wrap_exception(_qv_);
     a:
     if(_qt_[1] === Unix_error){
      var _qu_ = _qt_[2];
      if(typeof _qu_ === "number"){
       if(8 !== _qu_ && 14 !== _qu_) break a;
       return 0;
      }
     }
     throw caml_maybe_attach_backtrace(_qt_, 0);
    }
    return 0;
   }
   function mkdir_idempotent$0(_qr_, _qs_){
    return improve_mkdir(mkdir_idempotent, _qr_, _qs_);
   }
   function _dh_(dir, perm){
    try{mkdir_idempotent$0(dir, perm);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Unix_error){
      var _qq_ = exn[2];
      if(typeof _qq_ === "number" && 20 === _qq_){
       var parent = caml_call1(Core_Filename[20], dir);
       if(caml_call2(Core_Filename[46], parent, dir))
        throw caml_maybe_attach_backtrace(exn, 0);
       _dh_(parent, perm);
       return mkdir_idempotent$0(dir, perm);
      }
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 0;
   }
   function mkdir(opt, dir){
    if(opt) var sth = opt[1], perm = sth; else var perm = 511;
    return improve_mkdir(_dg_, dir, perm);
   }
   function mkdir_p(opt, dir){
    if(opt) var sth = opt[1], perm = sth; else var perm = 511;
    return _dh_(dir, perm);
   }
   var
    rmdir = unary_dirname(0, UnixLabels[62]),
    chdir = unary_dirname(0, UnixLabels[63]),
    getcwd = UnixLabels[64],
    chroot = unary_dirname(0, UnixLabels[65]);
   function opendir(restart){return unary_dirname(restart, UnixLabels[66]);}
   var readdir = unary_dir_handle(0, UnixLabels[67]);
   function readdir_opt(dh){
    try{var entry = readdir(dh);}
    catch(_qp_){
     var _qo_ = caml_wrap_exception(_qp_);
     if(_qo_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_qo_, 0);
    }
    return [0, entry];
   }
   var
    rewinddir = unary_dir_handle(0, UnixLabels[68]),
    closedir =
      unary_dir_handle
       (0,
        function(dh){
         try{var _qm_ = caml_call1(UnixLabels[69], dh); return _qm_;}
         catch(_qn_){
          var _ql_ = caml_wrap_exception(_qn_);
          if(_ql_[1] === Stdlib[6]) return 0;
          throw caml_maybe_attach_backtrace(_ql_, 0);
         }
        });
   function sexp_of_t$11(param){
    var
     kind_424 = param[3],
     inode_422 = param[2],
     name_420 = param[1],
     arg_425 = caml_call2(Core[515], sexp_of_file_kind, kind_424),
     bnds_419 = [0, [1, [0, _di_, [0, arg_425, 0]]], 0],
     arg_423 = caml_call1(Core_Nativeint[89], inode_422),
     bnds_419$0 = [0, [1, [0, _dj_, [0, arg_423, 0]]], bnds_419],
     arg_421 = caml_call1(Core[558], name_420),
     bnds_419$1 = [0, [1, [0, _dk_, [0, arg_421, 0]]], bnds_419$0];
    return [1, bnds_419$1];
   }
   var Readdir_detailed = [0, sexp_of_t$11];
   function readdir_detailed_opt(dh){
    try{var val = runtime.core_unix_readdir_detailed_stub(dh);}
    catch(_qk_){
     var _qi_ = caml_wrap_exception(_qk_);
     if(_qi_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_qi_, 0);
    }
    var kind = val[3], inode = val[2], name = val[1];
    if(6 < kind >>> 0)
     var _qj_ = 0;
    else
     switch(kind){
       case 0:
        var _qj_ = _dl_; break;
       case 1:
        var _qj_ = _dm_; break;
       case 2:
        var _qj_ = _dn_; break;
       case 3:
        var _qj_ = _do_; break;
       case 4:
        var _qj_ = _dp_; break;
       case 5:
        var _qj_ = _dq_; break;
       default: var _qj_ = _dr_;
     }
    return [0, [0, name, inode, _qj_]];
   }
   function ls_dir_detailed(path){
    var _qa_ = opendir(_ds_)(path);
    function _qb_(fd){
     var acc = [0, 0];
     for(;;){
      a:
      {
       try{var val = readdir_detailed_opt(fd);}
       catch(_qh_){
        var _qc_ = caml_wrap_exception(_qh_);
        if(_qc_[1] === Unix_error){
         var _qd_ = _qc_[2];
         if(typeof _qd_ === "number" && 11 === _qd_){var _qe_ = 1; break a;}
        }
        throw caml_maybe_attach_backtrace(_qc_, 0);
       }
       if(val){
        var r = val[1], _qf_ = r[1];
        b:
        if
         (caml_string_notequal(_qf_, cst$9)
          && caml_string_notequal(_qf_, "..")){acc[1] = [0, r, acc[1]]; break b;
        }
        var _qg_ = 1;
       }
       else
        var _qg_ = 0;
       var _qe_ = _qg_;
      }
      if(! _qe_) return acc[1];
     }
    }
    return caml_call3(Base_Exn[12], _qb_, _qa_, closedir);
   }
   function pipe(close_on_exec, param){
    return caml_call2(UnixLabels[70], close_on_exec, 0);
   }
   function mkfifo(name, perm){
    function _p$_(param){
     return [0, [0, cst_name, [0, name]], [0, file_perm_r(perm), 0]];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[71], name, perm);},
             _p$_);
   }
   function sexp_of_t$12(param){
    var
     stderr_433 = param[4],
     stdout_431 = param[3],
     stdin_429 = param[2],
     pid_427 = param[1],
     arg_434 = caml_call1(Core_unix_File_descr[2], stderr_433),
     bnds_426 = [0, [1, [0, _dt_, [0, arg_434, 0]]], 0],
     arg_432 = caml_call1(Core_unix_File_descr[2], stdout_431),
     bnds_426$0 = [0, [1, [0, _du_, [0, arg_432, 0]]], bnds_426],
     arg_430 = caml_call1(Core_unix_File_descr[2], stdin_429),
     bnds_426$1 = [0, [1, [0, _dv_, [0, arg_430, 0]]], bnds_426$0],
     arg_428 = caml_call1(Core_Pid[13], pid_427),
     bnds_426$2 = [0, [1, [0, _dw_, [0, arg_428, 0]]], bnds_426$1];
    return [1, bnds_426$2];
   }
   var Process_info = [0, sexp_of_t$12], Fd_spec = [0];
   function create_process_with_fds
   (working_dir,
    prog_search_path,
    argv0,
    setpgid,
    opt,
    prog,
    args,
    stdin,
    stdout,
    stderr,
    param){
    if(opt) var sth = opt[1], env = sth; else var env = _dB_;
    function _pH_(param){
     var
      _p8_ = [0, [0, cst_env$0, sexp_of_env(env)], 0],
      _p9_ =
        [0,
         [0, cst_prog$0, [0, prog]],
         [0, [0, cst_args, caml_call2(Core[472], atom, args)], _p8_]];
     if(working_dir)
      var
       working_dir$0 = working_dir[1],
       _p__ = [0, [0, cst_working_dir, [0, working_dir$0]], 0];
     else
      var _p__ = 0;
     return caml_call2(Core[156], _p__, _p9_);
    }
    return improve
            (0,
             function(param$1){
              var env_assignments = expand(0, env);
              function spawn(prog, argv){
               var close_on_err = [0, 0], close_on_success = [0, 0];
               try{
                var
                 get_fds =
                   function(fd, is_stdin){
                    if(fd){var fd$0 = fd[1]; return [0, -248441323, fd$0];}
                    var
                     match = caml_call1(Spawn[6], 0),
                     fd_for_child = match[2],
                     fd_for_parent = match[1];
                    if(is_stdin)
                     var
                      fd_for_child$0 = fd_for_parent,
                      fd_for_parent$0 = fd_for_child;
                    else
                     var
                      fd_for_child$0 = fd_for_child,
                      fd_for_parent$0 = fd_for_parent;
                    close_on_err[1] =
                     [0, fd_for_parent$0, [0, fd_for_child$0, close_on_err[1]]];
                    close_on_success[1] =
                     [0, fd_for_child$0, close_on_success[1]];
                    return [0, fd_for_parent$0, fd_for_child$0];
                   },
                 match = get_fds(stdin, 1),
                 stdin_for_child = match[2],
                 stdin_for_parent = match[1],
                 match$0 = get_fds(stdout, 0),
                 stdout_for_child = match$0[2],
                 stdout_for_parent = match$0[1],
                 match$1 = get_fds(stderr, 0),
                 stderr_for_child = match$1[2],
                 stderr_for_parent = match$1[1],
                 _pU_ = 0,
                 _pV_ = 0,
                 _pW_ = 0,
                 _pX_ = [0, stderr_for_child],
                 _pY_ = [0, stdout_for_child],
                 _pZ_ = [0, stdin_for_child],
                 _p0_ = function(x){return [0, x];},
                 _p1_ = caml_call2(Core_Option[34], working_dir, _p0_),
                 _p2_ = [0, caml_call1(Spawn[3][1], env_assignments)],
                 _p3_ =
                   caml_call11
                    (Spawn[5],
                     _p2_,
                     _p1_,
                     prog,
                     argv,
                     _pZ_,
                     _pY_,
                     _pX_,
                     _pW_,
                     setpgid,
                     _pV_,
                     _pU_),
                 pid = caml_call1(Core_Pid[45], _p3_),
                 _p4_ = function(eta){return close(0)(eta);};
                caml_call2(Core_List[19], close_on_success[1], _p4_);
                var
                 _p5_ =
                   [0,
                    pid,
                    stdin_for_parent,
                    stdout_for_parent,
                    stderr_for_parent];
                return _p5_;
               }
               catch(exn$0){
                var
                 exn = caml_wrap_exception(exn$0),
                 _pT_ =
                   function(x){
                    try{var _p6_ = close(0)(x); return _p6_;}
                    catch(_p7_){return 0;}
                   };
                caml_call2(Core_List[19], close_on_err[1], _pT_);
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              }
              var argv = [0, caml_call2(Core_Option[39], argv0, prog), args];
              function spawn1(candidate){
               try{
                try{
                 if(caml_call1(Core_Filename[11], candidate) && working_dir)
                  var
                   working_dir$0 = working_dir[1],
                   _pS_ = caml_call2(symbol, working_dir$0, candidate);
                 else
                  var _pS_ = candidate;
                 caml_call2(UnixLabels[54], _pS_, _dz_);
                }
                catch(exn){
                 var exn$0 = caml_wrap_exception(exn);
                 if(exn$0[1] !== Unix_error)
                  throw caml_maybe_attach_backtrace(exn$0, 0);
                 var args$0 = exn$0[4], code = exn$0[2];
                 throw caml_maybe_attach_backtrace
                        ([0, Unix_error, code, cst_Core_unix_create_process, args$0],
                         0);
                }
                var pid = spawn(candidate, argv);
               }
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                a:
                if(exn[1] === Unix_error){
                 var _pQ_ = exn[2];
                 if(typeof _pQ_ === "number"){
                  var _pR_ = _pQ_ - 62 | 0;
                  if(4 < _pR_ >>> 0){
                   if(-35 <= _pR_) break a;
                   switch(_pR_ + 62 | 0){
                     case 1:
                      return [0, exn];
                     case 21:
                      return [2,
                              spawn(cst_bin_sh$0, [0, cst_bin_sh, [0, candidate, args]])];
                     case 14:
                     case 17:
                     case 19:
                     case 20:
                     case 26: break;
                     default: break a;
                   }
                  }
                  else if(2 >= _pR_ - 1 >>> 0) break a;
                  return [1, exn];
                 }
                }
                throw caml_maybe_attach_backtrace(exn, 0);
               }
               return [2, pid];
              }
              if(! caml_call2(Core_String[145], Core_Filename[9], cst$1))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _dy_], 1);
              if(caml_call4(Core_String[48], 0, 0, prog, 47))
               var param$0 = [0, prog, 0];
              else{
               var _pN_ = function(h){return caml_call2(symbol, h, prog);};
               if(prog_search_path)
                var
                 dirs = prog_search_path[1],
                 _pO_ =
                   dirs || caml_call1(Core[5], cst_Core_unix_create_process_e);
               else
                var
                 _pI_ =
                   function(x){
                    return caml_string_notequal(x, cst$8) ? x : cst$0;
                   },
                 _pJ_ = Core_String[78],
                 _pK_ = function(_pP_){return caml_call2(_pJ_, _pP_, 58);},
                 _pL_ = caml_call1(Core_Core_sys[19], cst_PATH),
                 _pM_ = caml_call3(Core_Option[41], _pL_, _dx_, _pK_),
                 _pO_ = caml_call2(Core_List[51], _pM_, _pI_);
               var param$0 = caml_call2(Core_List[51], _pO_, _pN_);
              }
              var first_eaccess = 0, param = param$0;
              for(;;){
               if(! param)
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _dA_], 1);
               var candidates = param[2], candidate = param[1];
               if(! candidates){
                var match$0 = spawn1(candidate);
                if(2 === match$0[0]){var pid$0 = match$0[1]; return pid$0;}
                var exn$0 = match$0[1];
                throw caml_maybe_attach_backtrace
                       (caml_call2(Core_Option[39], first_eaccess, exn$0), 0);
               }
               var match = spawn1(candidate);
               switch(match[0]){
                 case 0:
                  var
                   exn = match[1],
                   first_eaccess$0 =
                     [0, caml_call2(Core_Option[39], first_eaccess, exn)],
                   first_eaccess = first_eaccess$0,
                   param = candidates;
                  break;
                 case 1:
                  var param = candidates; break;
                 default: var pid = match[1]; return pid;
               }
              }
             },
             _pH_);
   }
   function create_process_env
   (working_dir, prog_search_path, argv0, setpgid, prog, args, env, param){
    var
     param$0 =
       create_process_with_fds
        (working_dir,
         prog_search_path,
         argv0,
         setpgid,
         [0, env],
         prog,
         args,
         0,
         0,
         0,
         0),
     stderr = param$0[4],
     stdout = param$0[3],
     stdin = param$0[2],
     pid = param$0[1];
    return [0, pid, stdin, stdout, stderr];
   }
   function create_process(prog, args){
    function _pG_(param){
     return [0,
             [0, cst_prog$1, [0, prog]],
             [0, [0, cst_args$0, caml_call2(Core[472], atom, args)], 0]];
    }
    return improve
            (0,
             function(param){
              return create_process_env(0, 0, 0, 0, prog, args, _dC_, 0);
             },
             _pG_);
   }
   function make_open_process(f, command){
    function _pF_(param){return [0, [0, cst_command$0, [0, command]], 0];}
    return improve(0, function(param){return caml_call1(f, command);}, _pF_);
   }
   var _dD_ = UnixLabels[74];
   function open_process_in(_pE_){return make_open_process(_dD_, _pE_);}
   var _dE_ = UnixLabels[75];
   function open_process_out(_pD_){return make_open_process(_dE_, _pD_);}
   var _dF_ = UnixLabels[76];
   function open_process(_pC_){return make_open_process(_dF_, _pC_);}
   var Process_channels = [0];
   function open_process_full(command, env){
    function _pB_(param){
     return [0,
             [0, cst_command$1, [0, command]],
             [0, [0, cst_env$1, caml_call2(Core[301], atom, env)], 0]];
    }
    return improve
            (0,
             function(param){
              var
               match = caml_call2(UnixLabels[77], command, env),
               stderr = match[3],
               stdin = match[2],
               stdout = match[1];
              return [0, stdin, stdout, stderr];
             },
             _pB_);
   }
   function close_process_in(ic){
    return of_unix(caml_call1(UnixLabels[86], ic));
   }
   function close_process_out(oc){
    return of_unix(caml_call1(UnixLabels[87], oc));
   }
   function close_process(param){
    var oc = param[2], ic = param[1];
    return of_unix(caml_call1(UnixLabels[88], [0, ic, oc]));
   }
   function close_process_full(c){
    return of_unix(caml_call1(UnixLabels[89], [0, c[2], c[1], c[3]]));
   }
   function setpgid(of, to){
    var _pA_ = caml_call1(Core_Pid[46], to);
    return runtime.core_unix_setpgid(caml_call1(Core_Pid[46], of), _pA_);
   }
   function getpgid(pid){
    var pgid = runtime.core_unix_getpgid(caml_call1(Core_Pid[46], pid));
    return 0 === pgid ? 0 : [0, caml_call1(Core_Pid[45], pgid)];
   }
   function symlink(target, link_name){
    function _pz_(param){
     return [0,
             [0, cst_target$0, [0, target]],
             [0, [0, cst_link_name$0, [0, link_name]], 0]];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[90], 0, target, link_name);
             },
             _pz_);
   }
   var readlink = unary_filename(0, UnixLabels[92]);
   function sexp_of_t$13(param){
    var
     except_440 = param[3],
     write_438 = param[2],
     read_436 = param[1],
     arg_441 = caml_call2(Core[472], Core_unix_File_descr[2], except_440),
     bnds_435 = [0, [1, [0, _dG_, [0, arg_441, 0]]], 0],
     arg_439 = caml_call2(Core[472], Core_unix_File_descr[2], write_438),
     bnds_435$0 = [0, [1, [0, _dH_, [0, arg_439, 0]]], bnds_435],
     arg_437 = caml_call2(Core[472], Core_unix_File_descr[2], read_436),
     bnds_435$1 = [0, [1, [0, _dI_, [0, arg_437, 0]]], bnds_435$0];
    return [1, bnds_435$1];
   }
   var Select_fds = [0, sexp_of_t$13, empty$1];
   function sexp_of_select_timeout(param){
    if(typeof param === "number") return 744337004 <= param ? _dJ_ : _dK_;
    var v_442 = param[2];
    return [1, [0, _dL_, [0, caml_call1(Core_Time_ns[1][10], v_442), 0]]];
   }
   function select(restart, read, write, except, timeout, param){
    function _pu_(param){
     var
      _pw_ = [0, [0, cst_timeout, sexp_of_select_timeout(timeout)], 0],
      _px_ =
        [0,
         [0,
          cst_except,
          caml_call2(Core[472], Core_unix_File_descr[2], except)],
         _pw_],
      _py_ =
        [0,
         [0, cst_write, caml_call2(Core[472], Core_unix_File_descr[2], write)],
         _px_];
     return [0,
             [0,
              cst_read,
              caml_call2(Core[472], Core_unix_File_descr[2], read)],
             _py_];
    }
    return improve
            (restart,
             function(param){
              if(typeof timeout === "number")
               var timeout$0 = 744337004 <= timeout ? -1. : 0.;
              else
               var
                span = timeout[2],
                _pv_ =
                  caml_call2(Core_Time_ns[1][19], span, Core_Time_ns[1][76])
                   ? 0.
                   : caml_call1(Core_Time_ns[1][89], span),
                timeout$0 = _pv_;
              var
               match =
                 caml_call4(UnixLabels[93], read, write, except, timeout$0),
               except$0 = match[3],
               write$0 = match[2],
               read$0 = match[1];
              return [0, read$0, write$0, except$0];
             },
             _pu_);
   }
   var pause = UnixLabels[99];
   function process_times_of_sexp(x_445){
    function _pp_(param){
     var
      _ps_ = param[2],
      _pt_ = _ps_[2],
      tms_cstime = _pt_[2][1],
      tms_cutime = _pt_[1],
      tms_stime = _ps_[1],
      tms_utime = param[1];
     return [254, tms_utime, tms_stime, tms_cutime, tms_cstime];
    }
    var _pq_ = 0;
    function _pr_(param){
     return caml_string_notequal(param, cst_tms_cstime$0)
             ? caml_string_notequal
                (param, cst_tms_cutime$0)
               ? caml_string_notequal
                  (param, cst_tms_stime$0)
                 ? caml_string_notequal(param, cst_tms_utime$0) ? -1 : 0
                 : 1
               : 2
             : 3;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_444,
             [0,
              cst_tms_utime,
              1,
              Core[368],
              [0,
               cst_tms_stime,
               1,
               Core[368],
               [0,
                cst_tms_cutime,
                1,
                Core[368],
                [0, cst_tms_cstime, 1, Core[368], 0]]]],
             _pr_,
             _pq_,
             _pp_,
             x_445);
   }
   function sexp_of_process_times(param){
    var
     tms_cstime_453 = param[4],
     tms_cutime_451 = param[3],
     tms_stime_449 = param[2],
     tms_utime_447 = param[1],
     arg_454 = caml_call1(Core[367], tms_cstime_453),
     bnds_446 = [0, [1, [0, _dM_, [0, arg_454, 0]]], 0],
     arg_452 = caml_call1(Core[367], tms_cutime_451),
     bnds_446$0 = [0, [1, [0, _dN_, [0, arg_452, 0]]], bnds_446],
     arg_450 = caml_call1(Core[367], tms_stime_449),
     bnds_446$1 = [0, [1, [0, _dO_, [0, arg_450, 0]]], bnds_446$0],
     arg_448 = caml_call1(Core[367], tms_utime_447),
     bnds_446$2 = [0, [1, [0, _dP_, [0, arg_448, 0]]], bnds_446$1];
    return [1, bnds_446$2];
   }
   var
    get_cpuclock_for =
      [0, function(_po_){return runtime.caml_clock_getcpuclockid(_po_);}],
    getres = [0, function(_pn_){return runtime.caml_clock_getres(_pn_);}],
    gettime = [0, function(_pm_){return runtime.caml_clock_gettime(_pm_);}],
    Clock = [0, get_cpuclock_for, getres, gettime];
   function tm_of_sexp(x_457){
    function _pc_(param){
     var
      _pf_ = param[2],
      _pg_ = _pf_[2],
      _ph_ = _pg_[2],
      _pi_ = _ph_[2],
      _pj_ = _pi_[2],
      _pk_ = _pj_[2],
      _pl_ = _pk_[2],
      tm_isdst = _pl_[2][1],
      tm_yday = _pl_[1],
      tm_wday = _pk_[1],
      tm_year = _pj_[1],
      tm_mon = _pi_[1],
      tm_mday = _ph_[1],
      tm_hour = _pg_[1],
      tm_min = _pf_[1],
      tm_sec = param[1];
     return [0,
             tm_sec,
             tm_min,
             tm_hour,
             tm_mday,
             tm_mon,
             tm_year,
             tm_wday,
             tm_yday,
             tm_isdst];
    }
    var _pd_ = 0;
    function _pe_(param){
     return caml_string_notequal(param, cst_tm_hour$0)
             ? caml_string_notequal
                (param, cst_tm_isdst$0)
               ? caml_string_notequal
                  (param, cst_tm_mday$0)
                 ? caml_string_notequal
                    (param, cst_tm_min$0)
                   ? caml_string_notequal
                      (param, cst_tm_mon$0)
                     ? caml_string_notequal
                        (param, cst_tm_sec$0)
                       ? caml_string_notequal
                          (param, cst_tm_wday$0)
                         ? caml_string_notequal
                            (param, cst_tm_yday$0)
                           ? caml_string_notequal(param, cst_tm_year$0) ? -1 : 5
                           : 7
                         : 6
                       : 0
                     : 4
                   : 1
                 : 3
               : 8
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_456,
             [0,
              cst_tm_sec,
              1,
              Core[390],
              [0,
               cst_tm_min,
               1,
               Core[390],
               [0,
                cst_tm_hour,
                1,
                Core[390],
                [0,
                 cst_tm_mday,
                 1,
                 Core[390],
                 [0,
                  cst_tm_mon,
                  1,
                  Core[390],
                  [0,
                   cst_tm_year,
                   1,
                   Core[390],
                   [0,
                    cst_tm_wday,
                    1,
                    Core[390],
                    [0,
                     cst_tm_yday,
                     1,
                     Core[390],
                     [0, cst_tm_isdst, 1, Core[324], 0]]]]]]]]],
             _pe_,
             _pd_,
             _pc_,
             x_457);
   }
   function sexp_of_tm(param){
    var
     tm_isdst_475 = param[9],
     tm_yday_473 = param[8],
     tm_wday_471 = param[7],
     tm_year_469 = param[6],
     tm_mon_467 = param[5],
     tm_mday_465 = param[4],
     tm_hour_463 = param[3],
     tm_min_461 = param[2],
     tm_sec_459 = param[1],
     arg_476 = caml_call1(Core[323], tm_isdst_475),
     bnds_458 = [0, [1, [0, _dQ_, [0, arg_476, 0]]], 0],
     arg_474 = caml_call1(Core[389], tm_yday_473),
     bnds_458$0 = [0, [1, [0, _dR_, [0, arg_474, 0]]], bnds_458],
     arg_472 = caml_call1(Core[389], tm_wday_471),
     bnds_458$1 = [0, [1, [0, _dS_, [0, arg_472, 0]]], bnds_458$0],
     arg_470 = caml_call1(Core[389], tm_year_469),
     bnds_458$2 = [0, [1, [0, _dT_, [0, arg_470, 0]]], bnds_458$1],
     arg_468 = caml_call1(Core[389], tm_mon_467),
     bnds_458$3 = [0, [1, [0, _dU_, [0, arg_468, 0]]], bnds_458$2],
     arg_466 = caml_call1(Core[389], tm_mday_465),
     bnds_458$4 = [0, [1, [0, _dV_, [0, arg_466, 0]]], bnds_458$3],
     arg_464 = caml_call1(Core[389], tm_hour_463),
     bnds_458$5 = [0, [1, [0, _dW_, [0, arg_464, 0]]], bnds_458$4],
     arg_462 = caml_call1(Core[389], tm_min_461),
     bnds_458$6 = [0, [1, [0, _dX_, [0, arg_462, 0]]], bnds_458$5],
     arg_460 = caml_call1(Core[389], tm_sec_459),
     bnds_458$7 = [0, [1, [0, _dY_, [0, arg_460, 0]]], bnds_458$6];
    return [1, bnds_458$7];
   }
   var
    time = UnixLabels[100],
    gettimeofday = UnixLabels[101],
    mktime = UnixLabels[104],
    alarm = UnixLabels[105],
    sleep = UnixLabels[106],
    times = UnixLabels[108],
    utimes = UnixLabels[109];
   function strptime(opt, fmt, s){
    if(opt)
     var sth = opt[1], allow_trailing_input = sth;
    else
     var allow_trailing_input = 0;
    return runtime.core_unix_strptime(allow_trailing_input, fmt, s);
   }
   function interval_timer_of_sexp(sexp_480){
    a:
    {
     if(0 === sexp_480[0]){
      var _o__ = sexp_480[1];
      b:
      if(caml_string_notequal(_o__, cst_ITIMER_PROF)){
       c:
       if(caml_string_notequal(_o__, cst_ITIMER_REAL)){
        if(caml_string_notequal(_o__, cst_ITIMER_VIRTUAL)){
         if(! caml_string_notequal(_o__, cst_iTIMER_PROF)) break b;
         if(! caml_string_notequal(_o__, cst_iTIMER_REAL)) break c;
         if(caml_string_notequal(_o__, cst_iTIMER_VIRTUAL)) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var _o$_ = sexp_480[1];
     if(! _o$_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_479, sexp_480);
     var _pa_ = _o$_[1];
     if(0 !== _pa_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_479, sexp_480);
     var _pb_ = _pa_[1];
     b:
     if(caml_string_notequal(_pb_, cst_ITIMER_PROF)){
      c:
      if(caml_string_notequal(_pb_, cst_ITIMER_REAL)){
       if(caml_string_notequal(_pb_, cst_ITIMER_VIRTUAL)){
        if(! caml_string_notequal(_pb_, cst_iTIMER_PROF)) break b;
        if(! caml_string_notequal(_pb_, cst_iTIMER_REAL)) break c;
        if(caml_string_notequal(_pb_, cst_iTIMER_VIRTUAL)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_479, sexp_480);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_479, sexp_480);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_479, sexp_480);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_479, sexp_480);
   }
   function sexp_of_interval_timer(param){
    switch(param){
      case 0:
       return _dZ_;
      case 1:
       return _d0_;
      default: return _d1_;
    }
   }
   function interval_timer_status_of_sexp(x_483){
    function _o7_(param){
     var it_value = param[2][1], it_interval = param[1];
     return [254, it_interval, it_value];
    }
    var _o8_ = 0;
    function _o9_(param){
     return caml_string_notequal(param, cst_it_interval$0)
             ? caml_string_notequal(param, cst_it_value$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_482,
             [0,
              cst_it_interval,
              1,
              Core[368],
              [0, cst_it_value, 1, Core[368], 0]],
             _o9_,
             _o8_,
             _o7_,
             x_483);
   }
   function sexp_of_interval_timer_status(param){
    var
     it_value_487 = param[2],
     it_interval_485 = param[1],
     arg_488 = caml_call1(Core[367], it_value_487),
     bnds_484 = [0, [1, [0, _d2_, [0, arg_488, 0]]], 0],
     arg_486 = caml_call1(Core[367], it_interval_485),
     bnds_484$0 = [0, [1, [0, _d3_, [0, arg_486, 0]]], bnds_484];
    return [1, bnds_484$0];
   }
   var
    getitimer = UnixLabels[110],
    setitimer = UnixLabels[111],
    getuid = UnixLabels[112],
    geteuid = UnixLabels[113];
   function setuid(uid){
    function _o6_(param){
     return [0, [0, cst_uid$0, caml_call1(Core_Int[77], uid)], 0];
    }
    return improve
            (0,
             function(param){return caml_call1(UnixLabels[114], uid);},
             _o6_);
   }
   var getgid = UnixLabels[115], getegid = UnixLabels[116];
   function setgid(gid){
    function _o5_(param){
     return [0, [0, cst_gid$0, caml_call1(Core_Int[77], gid)], 0];
    }
    return improve
            (0,
             function(param){return caml_call1(UnixLabels[117], gid);},
             _o5_);
   }
   var getgroups = UnixLabels[118];
   function make_by(f, make_exn){
    function normal(arg){
     try{var _o3_ = [0, caml_call1(f, arg)]; return _o3_;}
     catch(_o4_){
      var _o2_ = caml_wrap_exception(_o4_);
      if(_o2_[1] !== Core[627] && _o2_ !== Stdlib[8])
       throw caml_maybe_attach_backtrace(_o2_, 0);
      return 0;
     }
    }
    function exn(arg){
     try{var _o0_ = caml_call1(f, arg); return _o0_;}
     catch(_o1_){
      var _oZ_ = caml_wrap_exception(_o1_);
      if(_oZ_[1] !== Core[627] && _oZ_ !== Stdlib[8])
       throw caml_maybe_attach_backtrace(_oZ_, 0);
      throw caml_maybe_attach_backtrace(caml_call1(make_exn, arg), 0);
     }
    }
    return [0, normal, exn];
   }
   function string_to_zero_terminated_bigs(s){
    if(caml_call4(Core_String[48], 0, 0, s, 0))
     caml_call3(Core_Printf[4], Core[5], _d4_, s);
    var _oY_ = caml_call2(Core[18], s, cst$2);
    return caml_call3(Core_Bigstring[14], 0, 0, _oY_);
   }
   function make_by$0(f, make_exn){
    return make_by
            (function(x$0){
              var n = 10000;
              for(;;)
               try{
                var
                 x = caml_call2(f, x$0, caml_call1(Core_Bigstring[121], n));
                return x;
               }
               catch(_oX_){
                var _oV_ = caml_wrap_exception(_oX_);
                if(_oV_[1] === Unix_error){
                 var _oW_ = _oV_[2];
                 if(typeof _oW_ === "number" && 32 === _oW_){var n$0 = 4 * n | 0, n = n$0; continue;}
                }
                throw caml_maybe_attach_backtrace(_oV_, 0);
               }
             },
             make_exn);
   }
   function compare$4(a_489, b_490){
    if(a_489 === b_490) return 0;
    var n = caml_call2(Core[551], a_489[1], b_490[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[551], a_489[2], b_490[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[382], a_489[3], b_490[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Core[382], a_489[4], b_490[4]);
    if(0 !== n$2) return n$2;
    var n$3 = caml_call2(Core[551], a_489[5], b_490[5]);
    if(0 !== n$3) return n$3;
    var n$4 = caml_call2(Core[551], a_489[6], b_490[6]);
    return 0 === n$4 ? caml_call2(Core[551], a_489[7], b_490[7]) : n$4;
   }
   function shell(r){return r[7];}
   function dir(r){return r[6];}
   function gecos(r){return r[5];}
   function gid(r){return r[4];}
   function uid(r){return r[3];}
   function passwd(r){return r[2];}
   function name(r){return r[1];}
   function t_of_sexp$13(x_493){
    function _oN_(param){
     var
      _oQ_ = param[2],
      _oR_ = _oQ_[2],
      _oS_ = _oR_[2],
      _oT_ = _oS_[2],
      _oU_ = _oT_[2],
      shell = _oU_[2][1],
      dir = _oU_[1],
      gecos = _oT_[1],
      gid = _oS_[1],
      uid = _oR_[1],
      passwd = _oQ_[1],
      name = param[1];
     return [0, name, passwd, uid, gid, gecos, dir, shell];
    }
    var _oO_ = 0;
    function _oP_(param){
     return caml_string_notequal(param, cst_dir$0)
             ? caml_string_notequal
                (param, cst_gecos$0)
               ? caml_string_notequal
                  (param, cst_gid$2)
                 ? caml_string_notequal
                    (param, cst_name$3)
                   ? caml_string_notequal
                      (param, cst_passwd$0)
                     ? caml_string_notequal
                        (param, cst_shell$0)
                       ? caml_string_notequal(param, cst_uid$2) ? -1 : 2
                       : 6
                     : 1
                   : 0
                 : 3
               : 4
             : 5;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_492,
             [0,
              cst_name$0,
              1,
              Core[559],
              [0,
               cst_passwd,
               1,
               Core[559],
               [0,
                cst_uid$1,
                1,
                Core[390],
                [0,
                 cst_gid$1,
                 1,
                 Core[390],
                 [0,
                  cst_gecos,
                  1,
                  Core[559],
                  [0, cst_dir, 1, Core[559], [0, cst_shell, 1, Core[559], 0]]]]]]],
             _oP_,
             _oO_,
             _oN_,
             x_493);
   }
   function sexp_of_t$14(param){
    var
     shell_507 = param[7],
     dir_505 = param[6],
     gecos_503 = param[5],
     gid_501 = param[4],
     uid_499 = param[3],
     passwd_497 = param[2],
     name_495 = param[1],
     arg_508 = caml_call1(Core[558], shell_507),
     bnds_494 = [0, [1, [0, _d5_, [0, arg_508, 0]]], 0],
     arg_506 = caml_call1(Core[558], dir_505),
     bnds_494$0 = [0, [1, [0, _d6_, [0, arg_506, 0]]], bnds_494],
     arg_504 = caml_call1(Core[558], gecos_503),
     bnds_494$1 = [0, [1, [0, _d7_, [0, arg_504, 0]]], bnds_494$0],
     arg_502 = caml_call1(Core[389], gid_501),
     bnds_494$2 = [0, [1, [0, _d8_, [0, arg_502, 0]]], bnds_494$1],
     arg_500 = caml_call1(Core[389], uid_499),
     bnds_494$3 = [0, [1, [0, _d9_, [0, arg_500, 0]]], bnds_494$2],
     arg_498 = caml_call1(Core[558], passwd_497),
     bnds_494$4 = [0, [1, [0, _d__, [0, arg_498, 0]]], bnds_494$3],
     arg_496 = caml_call1(Core[558], name_495),
     bnds_494$5 = [0, [1, [0, _d$_, [0, arg_496, 0]]], bnds_494$4];
    return [1, bnds_494$5];
   }
   function of_unix$1(u){
    return [0, u[1], u[2], u[3], u[4], u[5], u[6], u[7]];
   }
   function setpwent(_oM_){return runtime.core_unix_setpwent(_oM_);}
   function getpwent_exn(param){
    return of_unix$1(runtime.core_unix_getpwent(0));
   }
   function getpwent(param){
    function _oL_(param){return getpwent_exn(0);}
    return caml_call1(Core_Option[56], _oL_);
   }
   function endpwent(_oK_){return runtime.core_unix_endpwent(_oK_);}
   var Getbyname = [248, cst_Core_unix_Passwd_Getbyname, caml_fresh_oo_id(0)];
   function _ea_(param){
    if(param[1] !== Getbyname)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ec_], 1);
    var arg0_509 = param[2], res0_510 = caml_call1(Core[558], arg0_509);
    return [1, [0, _eb_, [0, res0_510, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyname, _ea_);
   function _ed_(s){return [0, Getbyname, s];}
   var
    match =
      make_by$0
       (function(name, buf){
         return of_unix$1
                 (runtime.core_unix_getpwnam_r
                   (string_to_zero_terminated_bigs(name), buf));
        },
        _ed_),
    getbyname_exn = match[2],
    getbyname = match[1],
    Getbyuid = [248, cst_Core_unix_Passwd_Getbyuid, caml_fresh_oo_id(0)];
   function _ee_(param){
    if(param[1] !== Getbyuid)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eg_], 1);
    var arg0_511 = param[2], res0_512 = caml_call1(Core[389], arg0_511);
    return [1, [0, _ef_, [0, res0_512, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyuid, _ee_);
   function _eh_(s){return [0, Getbyuid, s];}
   var
    match$0 =
      make_by$0
       (function(uid, buf){
         return of_unix$1(runtime.core_unix_getpwuid_r(uid, buf));
        },
        _eh_),
    getbyuid_exn = match$0[2],
    getbyuid = match$0[1],
    pwdb_lock = caml_call1(Error_checking_mutex[1], 0);
   function getpwents(param){
    function _oF_(param){
     runtime.core_unix_setpwent(0);
     function _oG_(param){return runtime.core_unix_endpwent(0);}
     function _oH_(param){
      var acc = 0;
      for(;;){
       try{var ent = getpwent_exn(0);}
       catch(_oJ_){
        var _oI_ = caml_wrap_exception(_oJ_);
        if(_oI_ === Stdlib[12]) return caml_call1(Core_List[59], acc);
        throw caml_maybe_attach_backtrace(_oI_, 0);
       }
       var acc$0 = [0, ent, acc], acc = acc$0;
      }
     }
     return caml_call2(Base_Exn[13], _oH_, _oG_);
    }
    return caml_call2(Error_checking_mutex[6], pwdb_lock, _oF_);
   }
   function mem(r){return r[4];}
   function gid$0(r){return r[3];}
   function passwd$0(r){return r[2];}
   function name$0(r){return r[1];}
   function sexp_of_t$15(param){
    var
     mem_520 = param[4],
     gid_518 = param[3],
     passwd_516 = param[2],
     name_514 = param[1],
     arg_521 = caml_call2(Core[301], Core[558], mem_520),
     bnds_513 = [0, [1, [0, _ei_, [0, arg_521, 0]]], 0],
     arg_519 = caml_call1(Core[389], gid_518),
     bnds_513$0 = [0, [1, [0, _ej_, [0, arg_519, 0]]], bnds_513],
     arg_517 = caml_call1(Core[558], passwd_516),
     bnds_513$1 = [0, [1, [0, _ek_, [0, arg_517, 0]]], bnds_513$0],
     arg_515 = caml_call1(Core[558], name_514),
     bnds_513$2 = [0, [1, [0, _el_, [0, arg_515, 0]]], bnds_513$1];
    return [1, bnds_513$2];
   }
   function of_unix$2(u){return [0, u[1], u[2], u[3], u[4]];}
   var
    Getbyname$0 = [248, cst_Core_unix_Group_Getbyname, caml_fresh_oo_id(0)];
   function _em_(param){
    if(param[1] !== Getbyname$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eo_], 1);
    var arg0_522 = param[2], res0_523 = caml_call1(Core[558], arg0_522);
    return [1, [0, _en_, [0, res0_523, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyname$0, _em_);
   function _ep_(s){return [0, Getbyname$0, s];}
   var
    match$1 =
      make_by$0
       (function(name, buf){
         return of_unix$2
                 (runtime.core_unix_getgrnam_r
                   (string_to_zero_terminated_bigs(name), buf));
        },
        _ep_),
    getbyname_exn$0 = match$1[2],
    getbyname$0 = match$1[1],
    Getbygid = [248, cst_Core_unix_Group_Getbygid, caml_fresh_oo_id(0)];
   function _eq_(param){
    if(param[1] !== Getbygid)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _es_], 1);
    var arg0_524 = param[2], res0_525 = caml_call1(Core[389], arg0_524);
    return [1, [0, _er_, [0, res0_525, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbygid, _eq_);
   function _et_(s){return [0, Getbygid, s];}
   var
    match$2 =
      make_by$0
       (function(gid, buf){
         return of_unix$2(runtime.core_unix_getgrgid_r(gid, buf));
        },
        _et_),
    getbygid_exn = match$2[2],
    getbygid = match$2[1];
   function username(param){return getbyuid_exn(caml_call1(getuid, 0))[1];}
   var
    _eu_ = [0, caml_call2(Bin_prot_Shape[6], cst_Inet6, 0), 0],
    _ev_ = [0, caml_call2(Bin_prot_Shape[6], cst_Inet, 0), _eu_],
    _ew_ = [0, caml_call2(Bin_prot_Shape[6], cst_Unix, 0), _ev_],
    _ex_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$1),
    _ey_ = caml_call2(Bin_prot_Shape[8], _ex_, _ew_),
    _ez_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _ey_], 0],
    _eA_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$2),
    group$0 = caml_call2(Bin_prot_Shape[2], _eA_, _ez_),
    _eB_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _eB_), 0);
   function bin_size_t$0(param){return 4;}
   function bin_write_t$0(buf, pos, param){
    return 815031220 === param
            ? caml_call3(Bin_prot_Write[29], buf, pos, 815031220)
            : 948106920
              <= param
              ? caml_call3(Bin_prot_Write[29], buf, pos, 948106920)
              : caml_call3(Bin_prot_Write[29], buf, pos, -784147966);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, param, vint){
    if(-784147966 === vint) return -784147966;
    if(815031220 === vint) return 815031220;
    if(948106920 === vint) return 948106920;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_t$2(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _oD_ = bin_read_t$1(buf, pos_ref, vint); return _oD_;}
    catch(_oE_){
     var _oC_ = caml_wrap_exception(_oE_);
     if(_oC_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_oC_, 0);
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function t_of_sexp$14(sexp_529){
    if(0 === sexp_529[0]){
     var atom_527 = sexp_529[1];
     return caml_string_notequal(atom_527, cst_Inet$0)
             ? caml_string_notequal
                (atom_527, cst_Inet6$0)
               ? caml_string_notequal
                  (atom_527, cst_Unix$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : 948106920
               : -784147966
             : 815031220;
    }
    var _oB_ = sexp_529[1];
    if(! _oB_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_531, sexp_529);
    var match = _oB_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_531, sexp_529);
    var atom_527$0 = match[1];
    return caml_string_notequal(atom_527$0, cst_Inet$0)
            ? caml_string_notequal
               (atom_527$0, cst_Inet6$0)
              ? caml_string_notequal
                 (atom_527$0, cst_Unix$0)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_531, sexp_529)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_531, sexp_529)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_531, sexp_529);
   }
   function t_of_sexp$15(sexp_532){
    try{var _oz_ = t_of_sexp$14(sexp_532); return _oz_;}
    catch(_oA_){
     var _oy_ = caml_wrap_exception(_oA_);
     if(_oy_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_533, sexp_532);
     throw caml_maybe_attach_backtrace(_oy_, 0);
    }
   }
   function sexp_of_t$16(param){
    return 815031220 === param ? _eC_ : 948106920 <= param ? _eD_ : _eE_;
   }
   var
    gethostname = UnixLabels[161],
    stable_witness$0 = Stable_witness[6],
    of_string$0 = UnixLabels[126],
    to_string = UnixLabels[127],
    compare$5 = caml_compare;
   function hash_fold_t(hash, t){
    var _ox_ = caml_call1(Core_Hashtbl[1], t);
    return caml_call2(Core[387], hash, _ox_);
   }
   var
    hash = caml_call1(Base_Hash[12], hash_fold_t),
    _eF_ = caml_call1(Base_Sexpable[5], [0, of_string$0, to_string]),
    t_of_sexp$16 = _eF_[2],
    sexp_of_t$17 = _eF_[3],
    include$0 = caml_call1(Core_Binable[13], [0, of_string$0, to_string]),
    bin_size_t$1 = include$0[1],
    bin_write_t$1 = include$0[2],
    bin_read_t$3 = include$0[3],
    bin_read_t$4 = include$0[4],
    bin_shape_t$1 = include$0[5],
    bin_writer_t$1 = include$0[6],
    bin_reader_t$1 = include$0[7],
    bin_t$1 = include$0[8],
    include$1 =
      caml_call1
       (Core_Comparable[12], [0, compare$5, t_of_sexp$16, sexp_of_t$17]),
    symbol$8 = include$1[1],
    symbol$9 = include$1[2],
    symbol$10 = include$1[3],
    symbol$11 = include$1[4],
    symbol$12 = include$1[5],
    symbol$13 = include$1[6],
    equal$0 = include$1[7],
    compare$6 = include$1[8],
    min$1 = include$1[9],
    max$1 = include$1[10],
    ascending$0 = include$1[11],
    descending$0 = include$1[12],
    between$0 = include$1[13],
    clamp_exn$0 = include$1[14],
    clamp$0 = include$1[15],
    comparator$0 = include$1[16],
    validate_lbound$0 = include$1[17],
    validate_ubound$0 = include$1[18],
    validate_bound$0 = include$1[19],
    Replace_polymorphic_compare$0 = include$1[20],
    Map$0 = include$1[21],
    Set$0 = include$1[22],
    _eG_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, bin_shape_t$1], 0],
    _eH_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$3),
    group$1 = caml_call2(Bin_prot_Shape[2], _eH_, _eG_),
    _eI_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _eI_), 0),
    bin_writer_t$2 = [0, bin_size_t$1, bin_write_t$1],
    bin_reader_t$2 = [0, bin_read_t$3, bin_read_t$4],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2],
    _eJ_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_1$1),
        cst_2001_db8_1$0,
        cst_2001_db8_1],
       0],
    _eK_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_DB8_1),
        cst_2001_db8_1$3,
        cst_2001_db8_1$2],
       _eJ_],
    _eL_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_1_0_0_1$1),
        cst_2001_db8_1_0_0_1$0,
        cst_2001_db8_1_0_0_1],
       _eK_],
    _eM_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_0_0_1_1),
        cst_2001_db8_1_0_0_1$3,
        cst_2001_db8_1_0_0_1$2],
       _eL_],
    _eN_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_0_0_1_0_0_1),
        cst_2001_db8_1_0_0_1$5,
        cst_2001_db8_1_0_0_1$4],
       _eM_],
    _eO_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_0_1_1_1_1_1$1),
        cst_2001_db8_0_1_1_1_1_1$0,
        cst_2001_db8_0_1_1_1_1_1],
       _eN_],
    _eP_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_1_1_1_1_1),
        cst_2001_db8_0_1_1_1_1_1$3,
        cst_2001_db8_0_1_1_1_1_1$2],
       _eO_],
    _eQ_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_0000_1_1_1_1_1),
        cst_2001_db8_0_1_1_1_1_1$5,
        cst_2001_db8_0_1_1_1_1_1$4],
       _eP_],
    _eR_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_2_1$1),
        cst_2001_db8_2_1$0,
        cst_2001_db8_2_1],
       _eQ_],
    _eS_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_1$6),
        cst_2001_db8_1$5,
        cst_2001_db8_1$4],
       _eR_],
    _eT_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_0db8_0001),
        cst_2001_db8_1$8,
        cst_2001_db8_1$7],
       _eS_],
    _eU_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_ffff_192_0_2_128$1),
        cst_ffff_192_0_2_128$0,
        cst_ffff_192_0_2_128],
       _eT_],
    _eV_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_ffff_c000_0280),
        cst_ffff_192_0_2_128$3,
        cst_ffff_192_0_2_128$2],
       _eU_],
    _eW_ = [0, [0, caml_call1(of_string$0, cst$5), cst$4, cst$3], _eV_],
    _eX_ =
      [0,
       [0, caml_call1(of_string$0, cst_0_0_0_0_0_0_0_0), cst$7, cst$6],
       _eW_],
    _eY_ = [0, [0, caml_call1(of_string$0, cst_1$1), cst_1$0, cst_1], _eX_],
    _eZ_ =
      [0,
       [0, caml_call1(of_string$0, cst_0_0_0_0_0_0_0_1), cst_1$3, cst_1$2],
       _eY_],
    _e0_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_85a3_8a2e_370_733$1),
        cst_2001_db8_85a3_8a2e_370_733$0,
        cst_2001_db8_85a3_8a2e_370_733],
       _eZ_],
    _e1_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_db8_85a3_0_0_8a2e_370),
        cst_2001_db8_85a3_8a2e_370_733$3,
        cst_2001_db8_85a3_8a2e_370_733$2],
       _e0_],
    _e2_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_2001_0db8_85a3_0000_0000_8),
        cst_2001_db8_85a3_8a2e_370_733$5,
        cst_2001_db8_85a3_8a2e_370_733$4],
       _e1_],
    _e3_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_255_255_255_255$1),
        cst_255_255_255_255$0,
        cst_255_255_255_255],
       _e2_],
    _e4_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_192_168_1_101$1),
        cst_192_168_1_101$0,
        cst_192_168_1_101],
       _e3_],
    _e5_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_127_0_0_1$1),
        cst_127_0_0_1$0,
        cst_127_0_0_1],
       _e4_],
    _e6_ =
      [0,
       [0,
        caml_call1(of_string$0, cst_10_0_0_0$1),
        cst_10_0_0_0$0,
        cst_10_0_0_0],
       _e5_],
    tests =
      [0,
       [0, caml_call1(of_string$0, cst_0_0_0_0$1), cst_0_0_0_0$0, cst_0_0_0_0],
       _e6_];
   caml_call1
    (Core_Stable_unit_test[4],
     [0,
      t_of_sexp$16,
      sexp_of_t$17,
      bin_size_t$1,
      bin_write_t$1,
      bin_read_t$3,
      bin_read_t$4,
      bin_shape_t$2,
      bin_writer_t$2,
      bin_reader_t$2,
      bin_t$2,
      equal$0,
      tests]);
   var arg_type = caml_call3(Core_Command_internal[19][1], 0, 0, of_string$0);
   function sexp_of_t$18(param){
    var
     addresses_542 = param[4],
     family_540 = param[3],
     aliases_538 = param[2],
     name_536 = param[1],
     arg_543 = caml_call2(Core[301], sexp_of_t$17, addresses_542),
     bnds_535 = [0, [1, [0, _e7_, [0, arg_543, 0]]], 0],
     arg_541 = sexp_of_t$16(family_540),
     bnds_535$0 = [0, [1, [0, _e8_, [0, arg_541, 0]]], bnds_535],
     arg_539 = caml_call2(Core[301], Core[558], aliases_538),
     bnds_535$1 = [0, [1, [0, _e9_, [0, arg_539, 0]]], bnds_535$0],
     arg_537 = caml_call1(Core[558], name_536),
     bnds_535$2 = [0, [1, [0, _e__, [0, arg_537, 0]]], bnds_535$1];
    return [1, bnds_535$2];
   }
   function of_unix$3(u){
    var _ov_ = u[4];
    switch(u[3]){
      case 0:
       var _ow_ = 948106920; break;
      case 1:
       var _ow_ = 815031220; break;
      default: var _ow_ = -784147966;
    }
    return [0, u[1], u[2], _ow_, _ov_];
   }
   var Getbyname$1 = [248, cst_Core_unix_Host_Getbyname, caml_fresh_oo_id(0)];
   function _e$_(param){
    if(param[1] !== Getbyname$1)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fb_], 1);
    var arg0_544 = param[2], res0_545 = caml_call1(Core[558], arg0_544);
    return [1, [0, _fa_, [0, res0_545, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyname$1, _e$_);
   function _fc_(s){return [0, Getbyname$1, s];}
   var
    match$3 =
      make_by
       (function(name){return of_unix$3(caml_call1(UnixLabels[162], name));},
        _fc_),
    getbyname_exn$1 = match$3[2],
    getbyname$1 = match$3[1],
    Getbyaddr = [248, cst_Core_unix_Host_Getbyaddr, caml_fresh_oo_id(0)];
   function _fd_(param){
    if(param[1] !== Getbyaddr)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ff_], 1);
    var arg0_546 = param[2], res0_547 = caml_call1(sexp_of_t$17, arg0_546);
    return [1, [0, _fe_, [0, res0_547, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyaddr, _fd_);
   function _fg_(a){return [0, Getbyaddr, a];}
   var
    match$4 =
      make_by
       (function(addr){return of_unix$3(caml_call1(UnixLabels[163], addr));},
        _fg_),
    getbyaddr_exn = match$4[2],
    getbyaddr = match$4[1];
   function have_address_in_common(h1, h2){
    var
     addrs1 = caml_call1(Set$0[10], h1[4]),
     addrs2 = caml_call1(Set$0[10], h2[4]),
     _ou_ = caml_call2(Core_Set[16], addrs1, addrs2);
    return 1 - caml_call1(Core_Set[10], _ou_);
   }
   var
    Get_inet_addr = [248, cst_Core_unix_Inet_addr_Get_in, caml_fresh_oo_id(0)];
   function _fh_(param){
    if(param[1] !== Get_inet_addr)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fj_], 1);
    var
     arg1_549 = param[3],
     arg0_548 = param[2],
     res0_550 = caml_call1(Core[558], arg0_548),
     res1_551 = caml_call1(Core[558], arg1_549);
    return [1, [0, _fi_, [0, res0_550, [0, res1_551, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Get_inet_addr, _fh_);
   function of_string_or_getbyname(name){
    try{var _os_ = caml_call1(of_string$0, name); return _os_;}
    catch(_ot_){
     var _or_ = caml_wrap_exception(_ot_);
     if(_or_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_or_, 0);
     var match = getbyname$1(name);
     if(! match)
      throw caml_maybe_attach_backtrace
             ([0, Get_inet_addr, name, cst_host_not_found], 0);
     var host = match[1];
     if(948106920 <= host[3])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _fk_], 1);
     var addrs = host[4];
     if(caml_call2(Core_Int[84], addrs.length - 1, 0))
      return runtime.caml_check_bound(addrs, 0)[1];
     throw caml_maybe_attach_backtrace
            ([0, Get_inet_addr, name, cst_empty_addrs], 0);
    }
   }
   var
    include$2 =
      caml_call1(Base_Sexpable[5], [0, of_string_or_getbyname, to_string]),
    t_of_sexp$17 = include$2[2],
    sexp_of_t$19 = include$2[3],
    bind_any = UnixLabels[128],
    bind_any_inet6 = UnixLabels[130],
    localhost = UnixLabels[129],
    localhost_inet6 = UnixLabels[131];
   function bits(r){return r[2];}
   var
    _fl_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_address, Core[394]], [0, [0, cst_bits, Core[372]], 0]]),
    _fm_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _fl_], 0],
    _fn_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$4),
    group$2 = caml_call2(Bin_prot_Shape[2], _fn_, _fm_),
    _fo_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _fo_), 0);
   function bin_size_t$2(param){
    var
     v2 = param[2],
     v1 = param[1],
     _op_ = caml_call1(Core[395], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _op_),
     _oq_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _oq_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[397], buf, pos, v1);
    return caml_call3(Core[375], buf, pos$0, v2);
   }
   var bin_writer_t$3 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$5,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_address = caml_call2(Core[400], buf, pos_ref),
     v_bits = caml_call2(Core[378], buf, pos_ref);
    return [0, v_address, v_bits];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3];
   function compare$7(a_552, b_553){
    if(a_552 === b_553) return 0;
    var n = caml_call2(Core[404], a_552[1], b_553[1]);
    return 0 === n ? caml_call2(Core[382], a_552[2], b_553[2]) : n;
   }
   function hash_fold_t$0(hsv, arg){
    var hsv$0 = caml_call2(Core[409], hsv, arg[1]);
    return caml_call2(Core[387], hsv$0, arg[2]);
   }
   function hash$0(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _oo_ = hash_fold_t$0(hsv, arg);
    return caml_call1(Base_Hash[9], _oo_);
   }
   var stable_witness$1 = Stable_witness[6];
   function normalized_address(base, bits){
    if(caml_call2(Core[90], bits, 0)) return 0;
    var shift = 32 - bits | 0, _on_ = caml_call2(Core_Int32[66], base, shift);
    return caml_call2(Core_Int32[51], _on_, shift);
   }
   function create(base_address, bits){
    var
     _ol_ = caml_call2(Core[92], bits, 0),
     _om_ = _ol_ || caml_call2(Core[91], bits, 32);
    if(_om_) caml_call3(Core[246], _fp_, bits, 0);
    var
     base = runtime.core_unix_inet4_addr_to_int32_exn(base_address),
     address = normalized_address(base, bits);
    return [0, address, bits];
   }
   function of_string$1(s){
    var match = caml_call2(Core_String[78], s, 47);
    if(match){
     var _oj_ = match[2];
     if(_oj_ && ! _oj_[2]){
      var
       s_bits = _oj_[1],
       s_inet_address = match[1],
       _ok_ = caml_call1(Core_Int[78], s_bits);
      return create(caml_call1(of_string$0, s_inet_address), _ok_);
     }
    }
    return caml_call3(Core[246], _fq_, s, 0);
   }
   function to_string$0(t){
    var addr = runtime.core_unix_inet4_addr_of_int32(t[1]), _oi_ = t[2];
    return caml_call3(sprintf, _fr_, caml_call1(to_string, addr), _oi_);
   }
   var
    include$3 =
      caml_call1(Core_Sexpable[2][5][1], [0, of_string$1, to_string$0]),
    sexp_of_t$20 = include$3[3],
    include$4 =
      caml_call1(Core_Comparator[13][1][2], [0, compare$7, sexp_of_t$20]),
    t_of_sexp$18 = include$3[2],
    sexp_of_t$21 = include$3[3],
    comparator$1 = include$4[1],
    T3 =
      caml_call1
       (Core_Comparable[26][1][2][1],
        [0,
         stable_witness$1,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$7,
         t_of_sexp$18,
         sexp_of_t$21,
         comparator$1]),
    t_of_sexp$19 = include$3[2],
    sexp_of_t$22 = include$3[3],
    comparator$2 = include$4[1],
    Map$1 = T3[1],
    Set$1 = T3[2];
   function invariant(t){
    if(caml_call2(Core[88], t[2], 0) && caml_call2(Core[89], t[2], 32)){
     var _oh_ = normalized_address(t[1], t[2]);
     if(caml_call2(Core_Int32[104], t[1], _oh_)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fs_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ft_], 1);
   }
   function base_address(t){
    return runtime.core_unix_inet4_addr_of_int32(t[1]);
   }
   function broadcast_address(t){
    var
     _og_ = caml_call2(Core_Int32[51], -1, 32 - t[2] | 0),
     inverted_netmask = caml_call1(Core_Int32[49], _og_);
    return runtime.core_unix_inet4_addr_of_int32
            (caml_call2(Core_Int32[47], t[1], inverted_netmask));
   }
   function netmask_of_bits(t){
    return runtime.core_unix_inet4_addr_of_int32
            (caml_call2(Core_Int32[51], -1, 32 - t[2] | 0));
   }
   function does_match_int32(t, address){
    var _of_ = normalized_address(address, t[2]);
    return caml_call2(Core_Int32[104], t[1], _of_);
   }
   function does_match(t, inet_addr){
    try{var address = runtime.core_unix_inet4_addr_to_int32_exn(inet_addr);}
    catch(_oe_){return 0;}
    return does_match_int32(t, address);
   }
   var multicast = of_string$1(cst_224_0_0_0_4);
   function is_subset$0(t, of){
    var _od_ = caml_call2(Core[89], of[2], t[2]);
    return _od_ ? does_match_int32(of, t[1]) : _od_;
   }
   function all_matching_addresses(t){
    function _ob_(address){
     if(! does_match_int32(t, address)) return 0;
     var _oc_ = caml_call1(Core_Int32[43], address);
     return [0, [0, runtime.core_unix_inet4_addr_of_int32(address), _oc_]];
    }
    return caml_call2(Core_Sequence[52], t[1], _ob_);
   }
   var
    t_of_sexp$20 = include$3[2],
    sexp_of_t$23 = include$3[3],
    comparator$3 = include$4[1],
    include$5 =
      caml_call1
       (Core_Identifiable[5],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$7,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$20,
         sexp_of_t$23,
         comparator$3,
         of_string$1,
         to_string$0,
         module_name]),
    bin_size_t$3 = include$5[1],
    bin_write_t$3 = include$5[2],
    bin_read_t$7 = include$5[3],
    bin_read_t$8 = include$5[4],
    bin_shape_t$4 = include$5[5],
    bin_writer_t$4 = include$5[6],
    bin_reader_t$4 = include$5[7],
    bin_t$4 = include$5[8],
    t_of_sexp$21 = include$5[9],
    sexp_of_t$24 = include$5[10],
    of_string$2 = include$5[11],
    to_string$1 = include$5[12],
    pp = include$5[13],
    symbol$14 = include$5[14],
    symbol$15 = include$5[15],
    symbol$16 = include$5[16],
    symbol$17 = include$5[17],
    symbol$18 = include$5[18],
    symbol$19 = include$5[19],
    equal$1 = include$5[20],
    compare$8 = include$5[21],
    min$2 = include$5[22],
    max$2 = include$5[23],
    ascending$1 = include$5[24],
    descending$1 = include$5[25],
    between$1 = include$5[26],
    clamp_exn$1 = include$5[27],
    clamp$1 = include$5[28],
    validate_lbound$1 = include$5[29],
    validate_ubound$1 = include$5[30],
    validate_bound$1 = include$5[31],
    Replace_polymorphic_compare$1 = include$5[32],
    comparator$4 = include$5[33],
    Map$2 = include$5[34],
    Set$2 = include$5[35],
    hash_fold_t$1 = include$5[36],
    hash$1 = include$5[37],
    hashable = include$5[38],
    Table = include$5[39],
    Hash_set = include$5[40],
    Hash_queue = include$5[41],
    arg_type$0 = caml_call3(Core_Command_internal[19][1], 0, 0, of_string$2);
   function t_of_sexp$22(x_556){
    function _n7_(param){
     var
      _oa_ = param[2],
      proto = _oa_[2][1],
      aliases = _oa_[1],
      name = param[1];
     return [0, name, aliases, proto];
    }
    var _n8_ = 0;
    function _n9_(param){
     return caml_string_notequal(param, cst_aliases$1)
             ? caml_string_notequal
                (param, cst_name$3)
               ? caml_string_notequal(param, cst_proto$1) ? -1 : 2
               : 0
             : 1;
    }
    var
     _n__ = [0, cst_proto, 1, Core[390], 0],
     _n$_ = [0, cst_aliases, 1, caml_call1(Core[302], Core[559]), _n__];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_555,
             [0, cst_name$1, 1, Core[559], _n$_],
             _n9_,
             _n8_,
             _n7_,
             x_556);
   }
   function sexp_of_t$25(param){
    var
     proto_562 = param[3],
     aliases_560 = param[2],
     name_558 = param[1],
     arg_563 = caml_call1(Core[389], proto_562),
     bnds_557 = [0, [1, [0, _fu_, [0, arg_563, 0]]], 0],
     arg_561 = caml_call2(Core[301], Core[558], aliases_560),
     bnds_557$0 = [0, [1, [0, _fv_, [0, arg_561, 0]]], bnds_557],
     arg_559 = caml_call1(Core[558], name_558),
     bnds_557$1 = [0, [1, [0, _fw_, [0, arg_559, 0]]], bnds_557$0];
    return [1, bnds_557$1];
   }
   function of_unix$4(u){return [0, u[1], u[2], u[3]];}
   var
    Getbyname$2 = [248, cst_Core_unix_Protocol_Getbyna, caml_fresh_oo_id(0)];
   function _fx_(param){
    if(param[1] !== Getbyname$2)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fz_], 1);
    var arg0_564 = param[2], res0_565 = caml_call1(Core[558], arg0_564);
    return [1, [0, _fy_, [0, res0_565, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyname$2, _fx_);
   function _fA_(s){return [0, Getbyname$2, s];}
   var
    match$5 =
      make_by
       (function(name){return of_unix$4(caml_call1(UnixLabels[164], name));},
        _fA_),
    getbyname_exn$2 = match$5[2],
    getbyname$2 = match$5[1],
    Getbynumber = [248, cst_Core_unix_Protocol_Getbynu, caml_fresh_oo_id(0)];
   function _fB_(param){
    if(param[1] !== Getbynumber)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fD_], 1);
    var arg0_566 = param[2], res0_567 = caml_call1(Core[389], arg0_566);
    return [1, [0, _fC_, [0, res0_567, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbynumber, _fB_);
   function _fE_(i){return [0, Getbynumber, i];}
   var
    match$6 =
      make_by
       (function(i){return of_unix$4(caml_call1(UnixLabels[165], i));}, _fE_),
    getbynumber_exn = match$6[2],
    getbynumber = match$6[1];
   function t_of_sexp$23(x_570){
    function _n0_(param){
     var
      _n5_ = param[2],
      _n6_ = _n5_[2],
      proto = _n6_[2][1],
      port = _n6_[1],
      aliases = _n5_[1],
      name = param[1];
     return [0, name, aliases, port, proto];
    }
    var _n1_ = 0;
    function _n2_(param){
     return caml_string_notequal(param, cst_aliases$1)
             ? caml_string_notequal
                (param, cst_name$3)
               ? caml_string_notequal
                  (param, cst_port$0)
                 ? caml_string_notequal(param, cst_proto$1) ? -1 : 3
                 : 2
               : 0
             : 1;
    }
    var
     _n3_ = [0, cst_port, 1, Core[390], [0, cst_proto$0, 1, Core[559], 0]],
     _n4_ = [0, cst_aliases$0, 1, caml_call1(Core[302], Core[559]), _n3_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_569,
             [0, cst_name$2, 1, Core[559], _n4_],
             _n2_,
             _n1_,
             _n0_,
             x_570);
   }
   function sexp_of_t$26(param){
    var
     proto_578 = param[4],
     port_576 = param[3],
     aliases_574 = param[2],
     name_572 = param[1],
     arg_579 = caml_call1(Core[558], proto_578),
     bnds_571 = [0, [1, [0, _fF_, [0, arg_579, 0]]], 0],
     arg_577 = caml_call1(Core[389], port_576),
     bnds_571$0 = [0, [1, [0, _fG_, [0, arg_577, 0]]], bnds_571],
     arg_575 = caml_call2(Core[301], Core[558], aliases_574),
     bnds_571$1 = [0, [1, [0, _fH_, [0, arg_575, 0]]], bnds_571$0],
     arg_573 = caml_call1(Core[558], name_572),
     bnds_571$2 = [0, [1, [0, _fI_, [0, arg_573, 0]]], bnds_571$1];
    return [1, bnds_571$2];
   }
   function of_unix$5(u){return [0, u[1], u[2], u[3], u[4]];}
   var
    Getbyname$3 = [248, cst_Core_unix_Service_Getbynam, caml_fresh_oo_id(0)];
   function _fJ_(param){
    if(param[1] !== Getbyname$3)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fL_], 1);
    var
     arg1_581 = param[3],
     arg0_580 = param[2],
     res0_582 = caml_call1(Core[558], arg0_580),
     res1_583 = caml_call1(Core[558], arg1_581);
    return [1, [0, _fK_, [0, res0_582, [0, res1_583, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyname$3, _fJ_);
   function getbyname_exn$3(name, protocol){
    try{
     var _nY_ = of_unix$5(caml_call2(UnixLabels[166], name, protocol));
     return _nY_;
    }
    catch(_nZ_){
     var _nX_ = caml_wrap_exception(_nZ_);
     if(_nX_[1] !== Core[627] && _nX_ !== Stdlib[8])
      throw caml_maybe_attach_backtrace(_nX_, 0);
     throw caml_maybe_attach_backtrace([0, Getbyname$3, name, protocol], 0);
    }
   }
   function getbyname$3(name, protocol){
    try{
     var _nV_ = [0, of_unix$5(caml_call2(UnixLabels[166], name, protocol))];
     return _nV_;
    }
    catch(_nW_){return 0;}
   }
   var Getbyport = [248, cst_Core_unix_Service_Getbypor, caml_fresh_oo_id(0)];
   function _fM_(param){
    if(param[1] !== Getbyport)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _fO_], 1);
    var
     arg1_585 = param[3],
     arg0_584 = param[2],
     res0_586 = caml_call1(Core[389], arg0_584),
     res1_587 = caml_call1(Core[558], arg1_585);
    return [1, [0, _fN_, [0, res0_586, [0, res1_587, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Getbyport, _fM_);
   function getbyport_exn(num, protocol){
    try{
     var _nT_ = of_unix$5(caml_call2(UnixLabels[167], num, protocol));
     return _nT_;
    }
    catch(_nU_){
     var _nS_ = caml_wrap_exception(_nU_);
     if(_nS_[1] !== Core[627] && _nS_ !== Stdlib[8])
      throw caml_maybe_attach_backtrace(_nS_, 0);
     throw caml_maybe_attach_backtrace([0, Getbyport, num, protocol], 0);
    }
   }
   function getbyport(num, protocol){
    try{
     var _nQ_ = [0, of_unix$5(caml_call2(UnixLabels[167], num, protocol))];
     return _nQ_;
    }
    catch(_nR_){
     var _nP_ = caml_wrap_exception(_nR_);
     if(_nP_[1] !== Core[627] && _nP_ !== Stdlib[8])
      throw caml_maybe_attach_backtrace(_nP_, 0);
     return 0;
    }
   }
   function socket_domain_of_sexp(sexp_591){
    a:
    {
     if(0 === sexp_591[0]){
      var _nL_ = sexp_591[1];
      b:
      if(caml_string_notequal(_nL_, cst_PF_INET)){
       c:
       if(caml_string_notequal(_nL_, cst_PF_INET6)){
        if(caml_string_notequal(_nL_, cst_PF_UNIX)){
         if(! caml_string_notequal(_nL_, cst_pF_INET)) break b;
         if(! caml_string_notequal(_nL_, cst_pF_INET6)) break c;
         if(caml_string_notequal(_nL_, cst_pF_UNIX)) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _nM_ = sexp_591[1];
     if(! _nM_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_590, sexp_591);
     var _nN_ = _nM_[1];
     if(0 !== _nN_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_590, sexp_591);
     var _nO_ = _nN_[1];
     b:
     if(caml_string_notequal(_nO_, cst_PF_INET)){
      c:
      if(caml_string_notequal(_nO_, cst_PF_INET6)){
       if(caml_string_notequal(_nO_, cst_PF_UNIX)){
        if(! caml_string_notequal(_nO_, cst_pF_INET)) break b;
        if(! caml_string_notequal(_nO_, cst_pF_INET6)) break c;
        if(caml_string_notequal(_nO_, cst_pF_UNIX)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_590, sexp_591);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_590, sexp_591);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_590, sexp_591);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_590, sexp_591);
   }
   function sexp_of_socket_domain(param){
    switch(param){
      case 0:
       return _fP_;
      case 1:
       return _fQ_;
      default: return _fR_;
    }
   }
   var
    _fT_ = caml_call1(Bin_prot_Shape[5], _fS_),
    _fU_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_socket_domain), 0, _fT_], 0],
    _fV_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$6),
    group$3 = caml_call2(Bin_prot_Shape[2], _fV_, _fU_),
    _fW_ = caml_call1(Bin_shape[2][1], cst_socket_domain$0),
    bin_shape_socket_domain =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _fW_), 0);
   function bin_size_socket_domain(param){return 1;}
   function bin_write_socket_domain(buf, pos, param){
    switch(param){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 2);
    }
   }
   var
    bin_writer_socket_domain =
      [0, bin_size_socket_domain, bin_write_socket_domain];
   function bin_read_socket_domain(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$7,
             pos_ref[1]);
   }
   function bin_read_socket_domain$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _fX_, pos_ref[1]);
    switch(match){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   var
    bin_reader_socket_domain =
      [0, bin_read_socket_domain$0, bin_read_socket_domain],
    bin_socket_domain =
      [0,
       bin_shape_socket_domain,
       bin_writer_socket_domain,
       bin_reader_socket_domain];
   function socket_type_of_sexp(sexp_595){
    a:
    {
     if(0 === sexp_595[0]){
      var _nH_ = sexp_595[1];
      b:
      if(caml_string_notequal(_nH_, cst_SOCK_DGRAM)){
       c:
       if(caml_string_notequal(_nH_, cst_SOCK_RAW)){
        d:
        if(caml_string_notequal(_nH_, cst_SOCK_SEQPACKET)){
         if(caml_string_notequal(_nH_, cst_SOCK_STREAM)){
          if(! caml_string_notequal(_nH_, cst_sOCK_DGRAM)) break b;
          if(! caml_string_notequal(_nH_, cst_sOCK_RAW)) break c;
          if(! caml_string_notequal(_nH_, cst_sOCK_SEQPACKET)) break d;
          if(caml_string_notequal(_nH_, cst_sOCK_STREAM)) break a;
         }
         return 0;
        }
        return 3;
       }
       return 2;
      }
      return 1;
     }
     var _nI_ = sexp_595[1];
     if(! _nI_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_594, sexp_595);
     var _nJ_ = _nI_[1];
     if(0 !== _nJ_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_594, sexp_595);
     var _nK_ = _nJ_[1];
     b:
     if(caml_string_notequal(_nK_, cst_SOCK_DGRAM)){
      c:
      if(caml_string_notequal(_nK_, cst_SOCK_RAW)){
       d:
       if(caml_string_notequal(_nK_, cst_SOCK_SEQPACKET)){
        if(caml_string_notequal(_nK_, cst_SOCK_STREAM)){
         if(! caml_string_notequal(_nK_, cst_sOCK_DGRAM)) break b;
         if(! caml_string_notequal(_nK_, cst_sOCK_RAW)) break c;
         if(! caml_string_notequal(_nK_, cst_sOCK_SEQPACKET)) break d;
         if(caml_string_notequal(_nK_, cst_sOCK_STREAM)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_594, sexp_595);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_594, sexp_595);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_594, sexp_595);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_594, sexp_595);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_594, sexp_595);
   }
   function sexp_of_socket_type(param){
    switch(param){
      case 0:
       return _fY_;
      case 1:
       return _fZ_;
      case 2:
       return _f0_;
      default: return _f1_;
    }
   }
   var
    _f3_ = caml_call1(Bin_prot_Shape[5], _f2_),
    _f4_ = [0, [0, caml_call1(Bin_shape[2][1], cst_socket_type), 0, _f3_], 0],
    _f5_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$8),
    group$4 = caml_call2(Bin_prot_Shape[2], _f5_, _f4_),
    _f6_ = caml_call1(Bin_shape[2][1], cst_socket_type$0),
    bin_shape_socket_type =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _f6_), 0);
   function bin_size_socket_type(param){return 1;}
   function bin_write_socket_type(buf, pos, param){
    switch(param){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      case 2:
       return caml_call3(Bin_prot_Write[30], buf, pos, 2);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 3);
    }
   }
   var
    bin_writer_socket_type = [0, bin_size_socket_type, bin_write_socket_type];
   function bin_read_socket_type(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$9,
             pos_ref[1]);
   }
   function bin_read_socket_type$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _f7_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   var
    bin_reader_socket_type = [0, bin_read_socket_type$0, bin_read_socket_type],
    bin_socket_type =
      [0,
       bin_shape_socket_type,
       bin_writer_socket_type,
       bin_reader_socket_type];
   function compare_sockaddr(a_596, b_597){
    if(a_596 === b_597) return 0;
    if(0 === a_596[0]){
     var a_598 = a_596[1];
     if(0 !== b_597[0]) return -1;
     var b_599 = b_597[1];
     return caml_call2(Core[551], a_598, b_599);
    }
    var a_602 = a_596[2], a_600 = a_596[1];
    if(0 === b_597[0]) return 1;
    var
     b_603 = b_597[2],
     b_601 = b_597[1],
     n = caml_call2(compare$6, a_600, b_601);
    return 0 === n ? caml_call2(Core[382], a_602, b_603) : n;
   }
   function sexp_of_sockaddr(param){
    if(0 === param[0]){
     var arg0_604 = param[1], res0_605 = caml_call1(Core[558], arg0_604);
     return [1, [0, _f8_, [0, res0_605, 0]]];
    }
    var
     arg1_607 = param[2],
     arg0_606 = param[1],
     res0_608 = caml_call1(sexp_of_t$17, arg0_606),
     res1_609 = caml_call1(Core[389], arg1_607);
    return [1, [0, _f9_, [0, res0_608, [0, res1_609, 0]]]];
   }
   var
    _f__ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_ADDR_UNIX, [0, Core[541], 0]],
         [0, [0, cst_ADDR_INET, [0, bin_shape_t$1, [0, Core[372], 0]]], 0]]),
    _f$_ = [0, [0, caml_call1(Bin_shape[2][1], cst_sockaddr), 0, _f__], 0],
    _ga_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$10),
    group$5 = caml_call2(Bin_prot_Shape[2], _ga_, _f$_),
    _gb_ = caml_call1(Bin_shape[2][1], cst_sockaddr$0),
    bin_shape_sockaddr =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _gb_), 0);
   function bin_size_sockaddr(param){
    if(0 === param[0]){
     var v1 = param[1], _nE_ = caml_call1(Core[542], v1);
     return caml_call2(Bin_prot_Common[23], 1, _nE_);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     _nF_ = caml_call1(bin_size_t$1, v1$0),
     size = caml_call2(Bin_prot_Common[23], 1, _nF_),
     _nG_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _nG_);
   }
   function bin_write_sockaddr(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Core[544], buf, pos$0, v1);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
     pos$2 = caml_call3(bin_write_t$1, buf, pos$1, v1$0);
    return caml_call3(Core[375], buf, pos$2, v2);
   }
   var bin_writer_sockaddr = [0, bin_size_sockaddr, bin_write_sockaddr];
   function bin_read_sockaddr(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$11,
             pos_ref[1]);
   }
   function bin_read_sockaddr$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Core[547], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _gc_, pos_ref[1]);
    var
     arg_1$0 = caml_call2(bin_read_t$3, buf, pos_ref),
     arg_2 = caml_call2(Core[378], buf, pos_ref);
    return [1, arg_1$0, arg_2];
   }
   var
    bin_reader_sockaddr = [0, bin_read_sockaddr$0, bin_read_sockaddr],
    bin_sockaddr =
      [0, bin_shape_sockaddr, bin_writer_sockaddr, bin_reader_sockaddr];
   function sockaddr_blocking_sexp_of_sexp(sexp_614){
    a:
    {
     if(0 === sexp_614[0]){
      var _nA_ = sexp_614[1];
      b:
      if(caml_string_notequal(_nA_, cst_ADDR_INET$1)){
       if(caml_string_notequal(_nA_, cst_ADDR_UNIX$1)){
        if(! caml_string_notequal(_nA_, cst_aDDR_INET)) break b;
        if(caml_string_notequal(_nA_, cst_aDDR_UNIX)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_612, sexp_614);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_612, sexp_614);
     }
     var _nB_ = sexp_614[1];
     if(! _nB_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_612, sexp_614);
     var _nC_ = _nB_[1];
     if(0 !== _nC_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_612, sexp_614);
     var tag_615 = _nC_[1];
     b:
     if(caml_string_notequal(tag_615, cst_ADDR_INET$1)){
      if(caml_string_notequal(tag_615, cst_ADDR_UNIX$1)){
       if(! caml_string_notequal(tag_615, cst_aDDR_INET)) break b;
       if(caml_string_notequal(tag_615, cst_aDDR_UNIX)) break a;
      }
      var sexp_args_616 = _nB_[2];
      if(sexp_args_616 && ! sexp_args_616[2]){
       var
        arg0_617 = sexp_args_616[1],
        res0_618 = caml_call1(Core[559], arg0_617);
       return [0, res0_618];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_612,
               tag_615,
               sexp_614);
     }
     var sexp_args_621 = _nB_[2];
     if(sexp_args_621){
      var _nD_ = sexp_args_621[2];
      if(_nD_ && ! _nD_[2]){
       var
        arg1_623 = _nD_[1],
        arg0_622 = sexp_args_621[1],
        res0_624 = caml_call1(t_of_sexp$17, arg0_622),
        res1_625 = caml_call1(Core[390], arg1_623);
       return [1, res0_624, res1_625];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_612,
              tag_615,
              sexp_614);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_612, sexp_614);
   }
   function sexp_of_sockaddr_blocking_sexp(param){
    if(0 === param[0]){
     var arg0_626 = param[1], res0_627 = caml_call1(Core[558], arg0_626);
     return [1, [0, _gd_, [0, res0_627, 0]]];
    }
    var
     arg1_629 = param[2],
     arg0_628 = param[1],
     res0_630 = caml_call1(sexp_of_t$19, arg0_628),
     res1_631 = caml_call1(Core[389], arg1_629);
    return [1, [0, _ge_, [0, res0_630, [0, res1_631, 0]]]];
   }
   var
    _gf_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_ADDR_UNIX$0, [0, Core[541], 0]],
         [0, [0, cst_ADDR_INET$0, [0, bin_shape_t$1, [0, Core[372], 0]]], 0]]),
    _gg_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_sockaddr_blocking_sexp), 0, _gf_],
       0],
    _gh_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$12),
    group$6 = caml_call2(Bin_prot_Shape[2], _gh_, _gg_),
    _gi_ = caml_call1(Bin_shape[2][1], cst_sockaddr_blocking_sexp$0),
    bin_shape_sockaddr_blocking_se =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _gi_), 0);
   function bin_size_sockaddr_blocking_sex(param){
    if(0 === param[0]){
     var v1 = param[1], _nx_ = caml_call1(Core[542], v1);
     return caml_call2(Bin_prot_Common[23], 1, _nx_);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     _ny_ = caml_call1(bin_size_t$1, v1$0),
     size = caml_call2(Bin_prot_Common[23], 1, _ny_),
     _nz_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _nz_);
   }
   function bin_write_sockaddr_blocking_se(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Core[544], buf, pos$0, v1);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
     pos$2 = caml_call3(bin_write_t$1, buf, pos$1, v1$0);
    return caml_call3(Core[375], buf, pos$2, v2);
   }
   var
    bin_writer_sockaddr_blocking_s =
      [0, bin_size_sockaddr_blocking_sex, bin_write_sockaddr_blocking_se];
   function bin_read_sockaddr_blocking_sex(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_core_unix_src_core_unix_ml$13,
             pos_ref[1]);
   }
   function bin_read_sockaddr_blocking_sex$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Core[547], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _gj_, pos_ref[1]);
    var
     arg_1$0 = caml_call2(bin_read_t$3, buf, pos_ref),
     arg_2 = caml_call2(Core[378], buf, pos_ref);
    return [1, arg_1$0, arg_2];
   }
   var
    bin_reader_sockaddr_blocking_s =
      [0, bin_read_sockaddr_blocking_sex$0, bin_read_sockaddr_blocking_sex],
    bin_sockaddr_blocking_sexp =
      [0,
       bin_shape_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_reader_sockaddr_blocking_s],
    domain_of_sockaddr = UnixLabels[134];
   function addr_r(addr){return [0, cst_addr, sexp_of_sockaddr(addr)];}
   function socket_or_pair(f, close_on_exec, domain, kind, protocol, param){
    function _nt_(param){
     var
      _nu_ = [0, close_on_exec_r(close_on_exec), 0],
      _nv_ = [0, [0, cst_protocol, caml_call1(Core_Int[77], protocol)], _nu_],
      _nw_ = [0, [0, cst_kind, sexp_of_socket_type(kind)], _nv_];
     return [0, [0, cst_domain, sexp_of_socket_domain(domain)], _nw_];
    }
    return improve
            (0,
             function(param){
              return caml_call4(f, close_on_exec, domain, kind, protocol);
             },
             _nt_);
   }
   var _gk_ = UnixLabels[133];
   function socket(_no_, _np_, _nq_, _nr_, _ns_){
    return socket_or_pair(_gk_, _no_, _np_, _nq_, _nr_, _ns_);
   }
   var _gl_ = UnixLabels[135];
   function socketpair(_nj_, _nk_, _nl_, _nm_, _nn_){
    return socket_or_pair(_gl_, _nj_, _nk_, _nl_, _nm_, _nn_);
   }
   function accept(close_on_exec, fd){
    function _nh_(param){
     var _ni_ = [0, close_on_exec_r(close_on_exec), 0];
     return [0, fd_r(fd), _ni_];
    }
    var
     match =
       improve
        (0,
         function(param){
          return caml_call2(UnixLabels[136], close_on_exec, fd);
         },
         _nh_),
     addr = match[2],
     fd$0 = match[1],
     addr$0 = 0 === addr[0] ? _gm_ : addr;
    return [0, fd$0, addr$0];
   }
   function with_socket_length_restriction(f, fd, addr){
    if(0 !== addr[0]) return caml_call2(f, fd, addr);
    var path = addr[1];
    try{var _ne_ = caml_call2(f, fd, addr); return _ne_;}
    catch(orig_exn$0){
     var orig_exn = caml_wrap_exception(orig_exn$0);
     if(orig_exn[1] === Unix_error){
      var _m9_ = orig_exn[2];
      if(typeof _m9_ === "number" && 17 === _m9_){
       var orig2 = orig_exn[4], orig1 = orig_exn[3];
       try{var _na_ = openfile(0, _gn_, cst_proc_self_fd); close(0)(_na_);}
       catch(_ng_){
        var _m__ = caml_wrap_exception(_ng_);
        if(_m__[1] !== Unix_error) throw caml_maybe_attach_backtrace(_m__, 0);
        var _m$_ = _m__[2];
        if(typeof _m$_ === "number" && 11 === _m$_)
         throw caml_maybe_attach_backtrace
                ([0, Unix_error, 11, orig1, orig2], 0);
        throw caml_maybe_attach_backtrace(orig_exn, 0);
       }
       var
        _nb_ = function(eta){return close(0)(eta);},
        _nc_ = openfile(0, _go_, caml_call1(Core_Filename[20], path)),
        _nd_ =
          function(dirfd){
           var
            _nf_ = caml_call1(Core_Filename[19], path),
            path$0 =
              caml_call3
               (sprintf,
                _gp_,
                caml_call1(Core_unix_File_descr[15], dirfd),
                _nf_);
           return caml_call2(f, fd, [0, path$0]);
          };
       return caml_call3(Base_Exn[12], _nd_, _nc_, _nb_);
      }
     }
     throw caml_maybe_attach_backtrace(orig_exn, 0);
    }
   }
   function bind(fd, addr){
    function _m7_(param){
     var _m8_ = [0, addr_r(addr), 0];
     return [0, fd_r(fd), _m8_];
    }
    return improve
            (0,
             function(param){
              return with_socket_length_restriction(UnixLabels[137], fd, addr);
             },
             _m7_);
   }
   function connect(fd, addr){
    function _m5_(param){
     var _m6_ = [0, addr_r(addr), 0];
     return [0, fd_r(fd), _m6_];
    }
    return improve
            (0,
             function(param){
              return with_socket_length_restriction(UnixLabels[138], fd, addr);
             },
             _m5_);
   }
   function listen(fd, backlog){
    function _m3_(param){
     var _m4_ = [0, [0, cst_backlog, caml_call1(Core_Int[77], backlog)], 0];
     return [0, fd_r(fd), _m4_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[139], fd, backlog);},
             _m3_);
   }
   function shutdown_command_of_sexp(sexp_635){
    a:
    {
     if(0 === sexp_635[0]){
      var _mZ_ = sexp_635[1];
      b:
      if(caml_string_notequal(_mZ_, cst_SHUTDOWN_ALL)){
       c:
       if(caml_string_notequal(_mZ_, cst_SHUTDOWN_RECEIVE)){
        if(caml_string_notequal(_mZ_, cst_SHUTDOWN_SEND)){
         if(! caml_string_notequal(_mZ_, cst_sHUTDOWN_ALL)) break b;
         if(! caml_string_notequal(_mZ_, cst_sHUTDOWN_RECEIVE)) break c;
         if(caml_string_notequal(_mZ_, cst_sHUTDOWN_SEND)) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var _m0_ = sexp_635[1];
     if(! _m0_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_634, sexp_635);
     var _m1_ = _m0_[1];
     if(0 !== _m1_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_634, sexp_635);
     var _m2_ = _m1_[1];
     b:
     if(caml_string_notequal(_m2_, cst_SHUTDOWN_ALL)){
      c:
      if(caml_string_notequal(_m2_, cst_SHUTDOWN_RECEIVE)){
       if(caml_string_notequal(_m2_, cst_SHUTDOWN_SEND)){
        if(! caml_string_notequal(_m2_, cst_sHUTDOWN_ALL)) break b;
        if(! caml_string_notequal(_m2_, cst_sHUTDOWN_RECEIVE)) break c;
        if(caml_string_notequal(_m2_, cst_sHUTDOWN_SEND)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_634, sexp_635);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_634, sexp_635);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_634, sexp_635);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_634, sexp_635);
   }
   function sexp_of_shutdown_command(param){
    switch(param){
      case 0:
       return _gq_;
      case 1:
       return _gr_;
      default: return _gs_;
    }
   }
   function shutdown(fd, mode){
    function _mT_(param){
     var _mY_ = [0, [0, cst_mode$6, sexp_of_shutdown_command(mode)], 0];
     return [0, fd_r(fd), _mY_];
    }
    return improve
            (0,
             function(param){
              try{
               var _mW_ = caml_call2(UnixLabels[140], fd, mode);
               return _mW_;
              }
              catch(_mX_){
               var _mU_ = caml_wrap_exception(_mX_);
               if(_mU_[1] === UnixLabels[1]){
                var _mV_ = _mU_[2];
                if(typeof _mV_ === "number" && 59 === _mV_) return 0;
               }
               throw caml_maybe_attach_backtrace(_mU_, 0);
              }
             },
             _mT_);
   }
   var
    getsockname = unary_fd(0, UnixLabels[141]),
    getpeername = unary_fd(0, UnixLabels[142]);
   function msg_flag_of_sexp(sexp_639){
    a:
    {
     if(0 === sexp_639[0]){
      var _mP_ = sexp_639[1];
      b:
      if(caml_string_notequal(_mP_, cst_MSG_DONTROUTE)){
       c:
       if(caml_string_notequal(_mP_, cst_MSG_OOB)){
        if(caml_string_notequal(_mP_, cst_MSG_PEEK)){
         if(! caml_string_notequal(_mP_, cst_mSG_DONTROUTE)) break b;
         if(! caml_string_notequal(_mP_, cst_mSG_OOB)) break c;
         if(caml_string_notequal(_mP_, cst_mSG_PEEK)) break a;
        }
        return 2;
       }
       return 0;
      }
      return 1;
     }
     var _mQ_ = sexp_639[1];
     if(! _mQ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_638, sexp_639);
     var _mR_ = _mQ_[1];
     if(0 !== _mR_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_638, sexp_639);
     var _mS_ = _mR_[1];
     b:
     if(caml_string_notequal(_mS_, cst_MSG_DONTROUTE)){
      c:
      if(caml_string_notequal(_mS_, cst_MSG_OOB)){
       if(caml_string_notequal(_mS_, cst_MSG_PEEK)){
        if(! caml_string_notequal(_mS_, cst_mSG_DONTROUTE)) break b;
        if(! caml_string_notequal(_mS_, cst_mSG_OOB)) break c;
        if(caml_string_notequal(_mS_, cst_mSG_PEEK)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_638, sexp_639);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_638, sexp_639);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_638, sexp_639);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_638, sexp_639);
   }
   function sexp_of_msg_flag(param){
    switch(param){
      case 0:
       return _gt_;
      case 1:
       return _gu_;
      default: return _gv_;
    }
   }
   function recv_send(f, fd, buf, pos, len, mode){
    function _mL_(param){
     var
      _mM_ =
        [0, [0, cst_mode$7, caml_call2(Core[472], sexp_of_msg_flag, mode)], 0],
      _mN_ = [0, len_r(len), _mM_],
      _mO_ = [0, [0, cst_pos$4, caml_call1(Core_Int[77], pos)], _mN_];
     return [0, fd_r(fd), _mO_];
    }
    return improve
            (0,
             function(param){return caml_call5(f, fd, buf, pos, len, mode);},
             _mL_);
   }
   var _gw_ = UnixLabels[143];
   function recv(_mG_, _mH_, _mI_, _mJ_, _mK_){
    return recv_send(_gw_, _mG_, _mH_, _mI_, _mJ_, _mK_);
   }
   var _gx_ = UnixLabels[144];
   function recvfrom(_mB_, _mC_, _mD_, _mE_, _mF_){
    return recv_send(_gx_, _mB_, _mC_, _mD_, _mE_, _mF_);
   }
   var _gy_ = UnixLabels[145];
   function send(_mw_, _mx_, _my_, _mz_, _mA_){
    return recv_send(_gy_, _mw_, _mx_, _my_, _mz_, _mA_);
   }
   var _gz_ = UnixLabels[146];
   function send_substring(_mr_, _ms_, _mt_, _mu_, _mv_){
    return recv_send(_gz_, _mr_, _ms_, _mt_, _mu_, _mv_);
   }
   function sendto(fd, buf, pos, len, mode, addr){
    function _mm_(param){
     var
      _mn_ = [0, [0, cst_addr$0, sexp_of_sockaddr(addr)], 0],
      _mo_ =
        [0,
         [0, cst_mode$8, caml_call2(Core[472], sexp_of_msg_flag, mode)],
         _mn_],
      _mp_ = [0, len_r(len), _mo_],
      _mq_ = [0, [0, cst_pos$5, caml_call1(Core_Int[77], pos)], _mp_];
     return [0, fd_r(fd), _mq_];
    }
    return improve
            (0,
             function(param){
              return caml_call6
                      (UnixLabels[147], fd, buf, pos, len, mode, addr);
             },
             _mm_);
   }
   var unix_sendto_substring = UnixLabels[148];
   function sendto_substring(fd, buf, pos, len, mode, addr){
    function _mh_(param){
     var
      _mi_ = [0, [0, cst_addr$1, sexp_of_sockaddr(addr)], 0],
      _mj_ =
        [0,
         [0, cst_mode$9, caml_call2(Core[472], sexp_of_msg_flag, mode)],
         _mi_],
      _mk_ = [0, len_r(len), _mj_],
      _ml_ = [0, [0, cst_pos$6, caml_call1(Core_Int[77], pos)], _mk_];
     return [0, fd_r(fd), _ml_];
    }
    return improve
            (0,
             function(param){
              return caml_call6
                      (unix_sendto_substring, fd, buf, pos, len, mode, addr);
             },
             _mh_);
   }
   function socket_bool_option_of_sexp(sexp_643){
    a:
    {
     if(0 === sexp_643[0]){
      var _l$_ = sexp_643[1], _ma_ = caml_string_compare(_l$_, cst_iPV6_ONLY);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               if(0 <= _ma_){
                if(0 >= _ma_) break f;
                if(! caml_string_notequal(_l$_, cst_sO_ACCEPTCONN)) break e;
                if(! caml_string_notequal(_l$_, cst_sO_BROADCAST)) break d;
                if(! caml_string_notequal(_l$_, cst_sO_DEBUG)) break c;
                if(! caml_string_notequal(_l$_, cst_sO_DONTROUTE)) break b;
                if(caml_string_notequal(_l$_, cst_sO_KEEPALIVE)){
                 if(! caml_string_notequal(_l$_, cst_sO_OOBINLINE)) break j;
                 if(! caml_string_notequal(_l$_, cst_sO_REUSEADDR)) break i;
                 if(! caml_string_notequal(_l$_, cst_sO_REUSEPORT)) break h;
                 if(caml_string_notequal(_l$_, cst_tCP_NODELAY)) break a;
                 break g;
                }
               }
               else{
                var _mb_ = caml_string_compare(_l$_, cst_SO_KEEPALIVE);
                if(0 > _mb_){
                 if(! caml_string_notequal(_l$_, cst_IPV6_ONLY)) break f;
                 if(! caml_string_notequal(_l$_, cst_SO_ACCEPTCONN)) break e;
                 if(! caml_string_notequal(_l$_, cst_SO_BROADCAST)) break d;
                 if(! caml_string_notequal(_l$_, cst_SO_DEBUG)) break c;
                 if(caml_string_notequal(_l$_, cst_SO_DONTROUTE)) break a;
                 break b;
                }
                if(0 < _mb_){
                 if(! caml_string_notequal(_l$_, cst_SO_OOBINLINE)) break j;
                 if(! caml_string_notequal(_l$_, cst_SO_REUSEADDR)) break i;
                 if(! caml_string_notequal(_l$_, cst_SO_REUSEPORT)) break h;
                 if(caml_string_notequal(_l$_, cst_TCP_NODELAY)) break a;
                 break g;
                }
               }
               return 3;
              }
              return 5;
             }
             return 2;
            }
            return 9;
           }
           return 7;
          }
          return 8;
         }
         return 6;
        }
        return 1;
       }
       return 0;
      }
      return 4;
     }
     var _mc_ = sexp_643[1];
     if(! _mc_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_642, sexp_643);
     var _md_ = _mc_[1];
     if(0 !== _md_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_642, sexp_643);
     var _me_ = _md_[1], _mf_ = caml_string_compare(_me_, cst_iPV6_ONLY);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              if(0 <= _mf_){
               if(0 >= _mf_) break f;
               if(! caml_string_notequal(_me_, cst_sO_ACCEPTCONN)) break e;
               if(! caml_string_notequal(_me_, cst_sO_BROADCAST)) break d;
               if(! caml_string_notequal(_me_, cst_sO_DEBUG)) break c;
               if(! caml_string_notequal(_me_, cst_sO_DONTROUTE)) break b;
               if(caml_string_notequal(_me_, cst_sO_KEEPALIVE)){
                if(! caml_string_notequal(_me_, cst_sO_OOBINLINE)) break j;
                if(! caml_string_notequal(_me_, cst_sO_REUSEADDR)) break i;
                if(! caml_string_notequal(_me_, cst_sO_REUSEPORT)) break h;
                if(caml_string_notequal(_me_, cst_tCP_NODELAY)) break a;
                break g;
               }
              }
              else{
               var _mg_ = caml_string_compare(_me_, cst_SO_KEEPALIVE);
               if(0 > _mg_){
                if(! caml_string_notequal(_me_, cst_IPV6_ONLY)) break f;
                if(! caml_string_notequal(_me_, cst_SO_ACCEPTCONN)) break e;
                if(! caml_string_notequal(_me_, cst_SO_BROADCAST)) break d;
                if(! caml_string_notequal(_me_, cst_SO_DEBUG)) break c;
                if(caml_string_notequal(_me_, cst_SO_DONTROUTE)) break a;
                break b;
               }
               if(0 < _mg_){
                if(! caml_string_notequal(_me_, cst_SO_OOBINLINE)) break j;
                if(! caml_string_notequal(_me_, cst_SO_REUSEADDR)) break i;
                if(! caml_string_notequal(_me_, cst_SO_REUSEPORT)) break h;
                if(caml_string_notequal(_me_, cst_TCP_NODELAY)) break a;
                break g;
               }
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_642, sexp_643);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_642, sexp_643);
   }
   function sexp_of_socket_bool_option(param){
    switch(param){
      case 0:
       return _gA_;
      case 1:
       return _gB_;
      case 2:
       return _gC_;
      case 3:
       return _gD_;
      case 4:
       return _gE_;
      case 5:
       return _gF_;
      case 6:
       return _gG_;
      case 7:
       return _gH_;
      case 8:
       return _gI_;
      default: return _gJ_;
    }
   }
   function socket_int_option_of_sexp(sexp_647){
    a:
    {
     if(0 === sexp_647[0]){
      var _l5_ = sexp_647[1], _l6_ = caml_string_compare(_l5_, cst_sO_ERROR);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _l6_){
            if(0 < _l6_){
             if(! caml_string_notequal(_l5_, cst_sO_RCVBUF)) break f;
             if(! caml_string_notequal(_l5_, cst_sO_RCVLOWAT)) break e;
             if(! caml_string_notequal(_l5_, cst_sO_SNDBUF)) break d;
             if(! caml_string_notequal(_l5_, cst_sO_SNDLOWAT)) break c;
             if(caml_string_notequal(_l5_, cst_sO_TYPE)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_l5_, cst_SO_ERROR)){
            if(! caml_string_notequal(_l5_, cst_SO_RCVBUF)) break f;
            if(! caml_string_notequal(_l5_, cst_SO_RCVLOWAT)) break e;
            if(! caml_string_notequal(_l5_, cst_SO_SNDBUF)) break d;
            if(! caml_string_notequal(_l5_, cst_SO_SNDLOWAT)) break c;
            if(caml_string_notequal(_l5_, cst_SO_TYPE)) break a;
            break b;
           }
           return 2;
          }
          return 1;
         }
         return 4;
        }
        return 0;
       }
       return 5;
      }
      return 3;
     }
     var _l7_ = sexp_647[1];
     if(! _l7_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_646, sexp_647);
     var _l8_ = _l7_[1];
     if(0 !== _l8_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_646, sexp_647);
     var _l9_ = _l8_[1], _l__ = caml_string_compare(_l9_, cst_sO_ERROR);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _l__){
           if(0 < _l__){
            if(! caml_string_notequal(_l9_, cst_sO_RCVBUF)) break f;
            if(! caml_string_notequal(_l9_, cst_sO_RCVLOWAT)) break e;
            if(! caml_string_notequal(_l9_, cst_sO_SNDBUF)) break d;
            if(! caml_string_notequal(_l9_, cst_sO_SNDLOWAT)) break c;
            if(caml_string_notequal(_l9_, cst_sO_TYPE)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_l9_, cst_SO_ERROR)){
           if(! caml_string_notequal(_l9_, cst_SO_RCVBUF)) break f;
           if(! caml_string_notequal(_l9_, cst_SO_RCVLOWAT)) break e;
           if(! caml_string_notequal(_l9_, cst_SO_SNDBUF)) break d;
           if(! caml_string_notequal(_l9_, cst_SO_SNDLOWAT)) break c;
           if(caml_string_notequal(_l9_, cst_SO_TYPE)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_646, sexp_647);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_646, sexp_647);
   }
   function sexp_of_socket_int_option(param){
    switch(param){
      case 0:
       return _gK_;
      case 1:
       return _gL_;
      case 2:
       return _gM_;
      case 3:
       return _gN_;
      case 4:
       return _gO_;
      default: return _gP_;
    }
   }
   function sexp_of_socket_optint_option(param){return _gQ_;}
   function socket_float_option_of_sexp(sexp_655){
    a:
    {
     if(0 === sexp_655[0]){
      var _l1_ = sexp_655[1];
      b:
      if(caml_string_notequal(_l1_, cst_SO_RCVTIMEO)){
       if(caml_string_notequal(_l1_, cst_SO_SNDTIMEO)){
        if(! caml_string_notequal(_l1_, cst_sO_RCVTIMEO)) break b;
        if(caml_string_notequal(_l1_, cst_sO_SNDTIMEO)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _l2_ = sexp_655[1];
     if(! _l2_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_654, sexp_655);
     var _l3_ = _l2_[1];
     if(0 !== _l3_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_654, sexp_655);
     var _l4_ = _l3_[1];
     b:
     if(caml_string_notequal(_l4_, cst_SO_RCVTIMEO)){
      if(caml_string_notequal(_l4_, cst_SO_SNDTIMEO)){
       if(! caml_string_notequal(_l4_, cst_sO_RCVTIMEO)) break b;
       if(caml_string_notequal(_l4_, cst_sO_SNDTIMEO)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_654, sexp_655);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_654, sexp_655);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_654, sexp_655);
   }
   function sexp_of_socket_float_option(param){return param ? _gR_ : _gS_;}
   function make_sockopt(get, set, sexp_of_opt, sexp_of_val){
    function getsockopt(fd, opt){
     function _lZ_(param){
      var _l0_ = [0, [0, cst_opt, caml_call1(sexp_of_opt, opt)], 0];
      return [0, fd_r(fd), _l0_];
     }
     return improve
             (0, function(param){return caml_call2(get, fd, opt);}, _lZ_);
    }
    function setsockopt(fd, opt, value){
     function _lW_(param){
      var
       _lX_ = [0, [0, cst_val, caml_call1(sexp_of_val, value)], 0],
       _lY_ = [0, [0, cst_opt$0, caml_call1(sexp_of_opt, opt)], _lX_];
      return [0, fd_r(fd), _lY_];
     }
     return improve
             (0,
              function(param){return caml_call3(set, fd, opt, value);},
              _lW_);
    }
    return [0, getsockopt, setsockopt];
   }
   var
    match$7 =
      make_sockopt
       (UnixLabels[149],
        UnixLabels[150],
        sexp_of_socket_bool_option,
        Core[323]),
    setsockopt = match$7[2],
    getsockopt = match$7[1],
    match$8 =
      make_sockopt
       (UnixLabels[151],
        UnixLabels[152],
        sexp_of_socket_int_option,
        Core[389]),
    setsockopt_int = match$8[2],
    getsockopt_int = match$8[1],
    _gT_ = caml_call1(Core[515], Core[389]),
    match$9 =
      make_sockopt
       (UnixLabels[153], UnixLabels[154], sexp_of_socket_optint_option, _gT_),
    setsockopt_optint = match$9[2],
    getsockopt_optint = match$9[1],
    match$10 =
      make_sockopt
       (UnixLabels[155],
        UnixLabels[156],
        sexp_of_socket_float_option,
        Core[367]),
    setsockopt_float = match$10[2],
    getsockopt_float = match$10[1];
   function mcast_join(ifname, source, fd, sockaddr){
    return runtime.core_unix_mcast_modify(0, ifname, source, fd, sockaddr);
   }
   function mcast_leave(ifname, source, fd, sockaddr){
    return runtime.core_unix_mcast_modify(1, ifname, source, fd, sockaddr);
   }
   function set_mcast_ifname(fd, ifname){
    try{
     var _lU_ = runtime.core_unix_mcast_set_ifname(fd, ifname);
     return _lU_;
    }
    catch(_lV_){
     var _lT_ = caml_wrap_exception(_lV_);
     if(_lT_[1] === Unix_error){
      var errno = _lT_[3], message = _lT_[2];
      if(! caml_string_notequal(_lT_[4], cst$8))
       throw caml_maybe_attach_backtrace
              ([0, Unix_error, message, errno, ifname], 0);
     }
     throw caml_maybe_attach_backtrace(_lT_, 0);
    }
   }
   function open_connection(addr){
    function _lS_(param){return [0, addr_r(addr), 0];}
    return improve
            (0,
             function(param){return caml_call1(UnixLabels[158], addr);},
             _lS_);
   }
   var shutdown_connection = UnixLabels[159];
   function establish_server(handle_connection, addr){
    function _lR_(param){return [0, addr_r(addr), 0];}
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[160], handle_connection, addr);
             },
             _lR_);
   }
   function sexp_of_addr_info(param){
    var
     ai_canonname_665 = param[5],
     ai_addr_663 = param[4],
     ai_protocol_661 = param[3],
     ai_socktype_659 = param[2],
     ai_family_657 = param[1],
     arg_666 = caml_call1(Core[558], ai_canonname_665),
     bnds_656 = [0, [1, [0, _gU_, [0, arg_666, 0]]], 0],
     arg_664 = sexp_of_sockaddr(ai_addr_663),
     bnds_656$0 = [0, [1, [0, _gV_, [0, arg_664, 0]]], bnds_656],
     arg_662 = caml_call1(Core[389], ai_protocol_661),
     bnds_656$1 = [0, [1, [0, _gW_, [0, arg_662, 0]]], bnds_656$0],
     arg_660 = sexp_of_socket_type(ai_socktype_659),
     bnds_656$2 = [0, [1, [0, _gX_, [0, arg_660, 0]]], bnds_656$1],
     arg_658 = sexp_of_socket_domain(ai_family_657),
     bnds_656$3 = [0, [1, [0, _gY_, [0, arg_658, 0]]], bnds_656$2];
    return [1, bnds_656$3];
   }
   function addr_info_blocking_sexp_of_sex(x_669){
    function _lL_(param){
     var
      _lO_ = param[2],
      _lP_ = _lO_[2],
      _lQ_ = _lP_[2],
      ai_canonname = _lQ_[2][1],
      ai_addr = _lQ_[1],
      ai_protocol = _lP_[1],
      ai_socktype = _lO_[1],
      ai_family = param[1];
     return [0, ai_family, ai_socktype, ai_protocol, ai_addr, ai_canonname];
    }
    var _lM_ = 0;
    function _lN_(param){
     return caml_string_notequal(param, cst_ai_addr$0)
             ? caml_string_notequal
                (param, cst_ai_canonname$0)
               ? caml_string_notequal
                  (param, cst_ai_family$0)
                 ? caml_string_notequal
                    (param, cst_ai_protocol$0)
                   ? caml_string_notequal(param, cst_ai_socktype$0) ? -1 : 1
                   : 2
                 : 0
               : 4
             : 3;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_668,
             [0,
              cst_ai_family,
              1,
              socket_domain_of_sexp,
              [0,
               cst_ai_socktype,
               1,
               socket_type_of_sexp,
               [0,
                cst_ai_protocol,
                1,
                Core[390],
                [0,
                 cst_ai_addr,
                 1,
                 sockaddr_blocking_sexp_of_sexp,
                 [0, cst_ai_canonname, 1, Core[559], 0]]]]],
             _lN_,
             _lM_,
             _lL_,
             x_669);
   }
   function sexp_of_addr_info_blocking_sex(param){
    var
     ai_canonname_679 = param[5],
     ai_addr_677 = param[4],
     ai_protocol_675 = param[3],
     ai_socktype_673 = param[2],
     ai_family_671 = param[1],
     arg_680 = caml_call1(Core[558], ai_canonname_679),
     bnds_670 = [0, [1, [0, _gZ_, [0, arg_680, 0]]], 0],
     arg_678 = sexp_of_sockaddr_blocking_sexp(ai_addr_677),
     bnds_670$0 = [0, [1, [0, _g0_, [0, arg_678, 0]]], bnds_670],
     arg_676 = caml_call1(Core[389], ai_protocol_675),
     bnds_670$1 = [0, [1, [0, _g1_, [0, arg_676, 0]]], bnds_670$0],
     arg_674 = sexp_of_socket_type(ai_socktype_673),
     bnds_670$2 = [0, [1, [0, _g2_, [0, arg_674, 0]]], bnds_670$1],
     arg_672 = sexp_of_socket_domain(ai_family_671),
     bnds_670$3 = [0, [1, [0, _g3_, [0, arg_672, 0]]], bnds_670$2];
    return [1, bnds_670$3];
   }
   function getaddrinfo_option_of_sexp(sexp_685){
    a:
    {
     if(0 === sexp_685[0]){
      var
       _lG_ = sexp_685[1],
       _lH_ = caml_string_compare(_lG_, cst_aI_CANONNAME);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _lH_){
            if(0 < _lH_){
             if(! caml_string_notequal(_lG_, cst_aI_FAMILY)) break f;
             if(! caml_string_notequal(_lG_, cst_aI_NUMERICHOST)) break e;
             if(! caml_string_notequal(_lG_, cst_aI_PASSIVE)) break d;
             if(! caml_string_notequal(_lG_, cst_aI_PROTOCOL)) break c;
             if(caml_string_notequal(_lG_, cst_aI_SOCKTYPE)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_lG_, cst_AI_CANONNAME)){
            if(! caml_string_notequal(_lG_, cst_AI_FAMILY)) break f;
            if(! caml_string_notequal(_lG_, cst_AI_NUMERICHOST)) break e;
            if(! caml_string_notequal(_lG_, cst_AI_PASSIVE)) break d;
            if(! caml_string_notequal(_lG_, cst_AI_PROTOCOL)) break c;
            if(caml_string_notequal(_lG_, cst_AI_SOCKTYPE)) break a;
            break b;
           }
           return 1;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_683, sexp_685);
         }
         return 0;
        }
        return 2;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_683, sexp_685);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_683, sexp_685);
     }
     var _lI_ = sexp_685[1];
     if(! _lI_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_683, sexp_685);
     var _lJ_ = _lI_[1];
     if(0 !== _lJ_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_683, sexp_685);
     var
      tag_686 = _lJ_[1],
      _lK_ = caml_string_compare(tag_686, cst_aI_CANONNAME);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _lK_){
           if(0 < _lK_){
            if(! caml_string_notequal(tag_686, cst_aI_FAMILY)) break f;
            if(! caml_string_notequal(tag_686, cst_aI_NUMERICHOST)) break e;
            if(! caml_string_notequal(tag_686, cst_aI_PASSIVE)) break d;
            if(! caml_string_notequal(tag_686, cst_aI_PROTOCOL)) break c;
            if(caml_string_notequal(tag_686, cst_aI_SOCKTYPE)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_686, cst_AI_CANONNAME)){
           if(! caml_string_notequal(tag_686, cst_AI_FAMILY)) break f;
           if(! caml_string_notequal(tag_686, cst_AI_NUMERICHOST)) break e;
           if(! caml_string_notequal(tag_686, cst_AI_PASSIVE)) break d;
           if(! caml_string_notequal(tag_686, cst_AI_PROTOCOL)) break c;
           if(caml_string_notequal(tag_686, cst_AI_SOCKTYPE)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_683, sexp_685);
         }
         var sexp_args_687 = _lI_[2];
         if(sexp_args_687 && ! sexp_args_687[2]){
          var
           arg0_688 = sexp_args_687[1],
           res0_689 = socket_domain_of_sexp(arg0_688);
          return [0, res0_689];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_683,
                  tag_686,
                  sexp_685);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_683, sexp_685);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_683, sexp_685);
      }
      var sexp_args_697 = _lI_[2];
      if(sexp_args_697 && ! sexp_args_697[2]){
       var
        arg0_698 = sexp_args_697[1],
        res0_699 = caml_call1(Core[390], arg0_698);
       return [2, res0_699];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_683,
               tag_686,
               sexp_685);
     }
     var sexp_args_692 = _lI_[2];
     if(sexp_args_692 && ! sexp_args_692[2]){
      var
       arg0_693 = sexp_args_692[1],
       res0_694 = socket_type_of_sexp(arg0_693);
      return [1, res0_694];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_683,
              tag_686,
              sexp_685);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_683, sexp_685);
   }
   function sexp_of_getaddrinfo_option(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _g4_;
       case 1:
        return _g5_;
       default: return _g6_;
     }
    switch(param[0]){
      case 0:
       var arg0_700 = param[1], res0_701 = sexp_of_socket_domain(arg0_700);
       return [1, [0, _g7_, [0, res0_701, 0]]];
      case 1:
       var arg0_702 = param[1], res0_703 = sexp_of_socket_type(arg0_702);
       return [1, [0, _g8_, [0, res0_703, 0]]];
      default:
       var arg0_704 = param[1], res0_705 = caml_call1(Core[389], arg0_704);
       return [1, [0, _g9_, [0, res0_705, 0]]];
    }
   }
   function getaddrinfo(host, service, opts){
    function _lF_(param){
     return [0,
             [0, cst_host, [0, host]],
             [0,
              [0, cst_service, [0, service]],
              [0,
               [0,
                cst_opts,
                caml_call2(Core[472], sexp_of_getaddrinfo_option, opts)],
               0]]];
    }
    return improve
            (0,
             function(param){
              return caml_call3(UnixLabels[168], host, service, opts);
             },
             _lF_);
   }
   function name_info_of_sexp(x_708){
    function _lC_(param){
     var ni_service = param[2][1], ni_hostname = param[1];
     return [0, ni_hostname, ni_service];
    }
    var _lD_ = 0;
    function _lE_(param){
     return caml_string_notequal(param, cst_ni_hostname$0)
             ? caml_string_notequal(param, cst_ni_service$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_707,
             [0,
              cst_ni_hostname,
              1,
              Core[559],
              [0, cst_ni_service, 1, Core[559], 0]],
             _lE_,
             _lD_,
             _lC_,
             x_708);
   }
   function sexp_of_name_info(param){
    var
     ni_service_712 = param[2],
     ni_hostname_710 = param[1],
     arg_713 = caml_call1(Core[558], ni_service_712),
     bnds_709 = [0, [1, [0, _g__, [0, arg_713, 0]]], 0],
     arg_711 = caml_call1(Core[558], ni_hostname_710),
     bnds_709$0 = [0, [1, [0, _g$_, [0, arg_711, 0]]], bnds_709];
    return [1, bnds_709$0];
   }
   function getnameinfo_option_of_sexp(sexp_717){
    a:
    {
     if(0 === sexp_717[0]){
      var _lw_ = sexp_717[1], _lx_ = caml_string_compare(_lw_, cst_nI_DGRAM);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _lx_){
           if(0 < _lx_){
            if(! caml_string_notequal(_lw_, cst_nI_NAMEREQD)) break e;
            if(! caml_string_notequal(_lw_, cst_nI_NOFQDN)) break d;
            if(! caml_string_notequal(_lw_, cst_nI_NUMERICHOST)) break c;
            if(caml_string_notequal(_lw_, cst_nI_NUMERICSERV)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_lw_, cst_NI_DGRAM)){
           if(! caml_string_notequal(_lw_, cst_NI_NAMEREQD)) break e;
           if(! caml_string_notequal(_lw_, cst_NI_NOFQDN)) break d;
           if(! caml_string_notequal(_lw_, cst_NI_NUMERICHOST)) break c;
           if(caml_string_notequal(_lw_, cst_NI_NUMERICSERV)) break a;
           break b;
          }
          return 4;
         }
         return 2;
        }
        return 0;
       }
       return 1;
      }
      return 3;
     }
     var _ly_ = sexp_717[1];
     if(! _ly_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_716, sexp_717);
     var _lz_ = _ly_[1];
     if(0 !== _lz_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_716, sexp_717);
     var _lA_ = _lz_[1], _lB_ = caml_string_compare(_lA_, cst_nI_DGRAM);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= _lB_){
          if(0 < _lB_){
           if(! caml_string_notequal(_lA_, cst_nI_NAMEREQD)) break e;
           if(! caml_string_notequal(_lA_, cst_nI_NOFQDN)) break d;
           if(! caml_string_notequal(_lA_, cst_nI_NUMERICHOST)) break c;
           if(caml_string_notequal(_lA_, cst_nI_NUMERICSERV)) break a;
           break b;
          }
         }
         else if(caml_string_notequal(_lA_, cst_NI_DGRAM)){
          if(! caml_string_notequal(_lA_, cst_NI_NAMEREQD)) break e;
          if(! caml_string_notequal(_lA_, cst_NI_NOFQDN)) break d;
          if(! caml_string_notequal(_lA_, cst_NI_NUMERICHOST)) break c;
          if(caml_string_notequal(_lA_, cst_NI_NUMERICSERV)) break a;
          break b;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_716, sexp_717);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_716, sexp_717);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_716, sexp_717);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_716, sexp_717);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_716, sexp_717);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_716, sexp_717);
   }
   function sexp_of_getnameinfo_option(param){
    switch(param){
      case 0:
       return _ha_;
      case 1:
       return _hb_;
      case 2:
       return _hc_;
      case 3:
       return _hd_;
      default: return _he_;
    }
   }
   function getnameinfo(addr, x_718){
    function _lo_(param){
     var
      _lv_ =
        [0,
         [0,
          cst_opts$0,
          caml_call2(Core[472], sexp_of_getnameinfo_option, x_718)],
         0];
     return [0, [0, cst_addr$2, sexp_of_sockaddr(addr)], _lv_];
    }
    return improve
            (0,
             function(param){
              try{
               var _lt_ = caml_call2(UnixLabels[169], addr, x_718);
               return _lt_;
              }
              catch(_lu_){
               var _lp_ = caml_wrap_exception(_lu_);
               if(_lp_ !== Stdlib[8])
                throw caml_maybe_attach_backtrace(_lp_, 0);
               var
                _lq_ =
                  [0,
                   [1,
                    [0,
                     _hf_,
                     [0,
                      caml_call2(Core[472], sexp_of_getnameinfo_option, x_718),
                      0]]],
                   0],
                _lr_ =
                  [0, [1, [0, _hg_, [0, sexp_of_sockaddr(addr), 0]]], _lq_],
                _ls_ =
                  [1,
                   [0,
                    caml_call1
                     (Sexplib0_Sexp_conv[7], cst_Unix_getnameinfo_not_found),
                    _lr_]];
               throw caml_maybe_attach_backtrace([0, Core[627], _ls_], 0);
              }
             },
             _lo_);
   }
   function sexp_of_t$27(param){
    var
     c_ignbrk_723 = param[1],
     c_brkint_725 = param[2],
     c_ignpar_727 = param[3],
     c_parmrk_729 = param[4],
     c_inpck_731 = param[5],
     c_istrip_733 = param[6],
     c_inlcr_735 = param[7],
     c_igncr_737 = param[8],
     c_icrnl_739 = param[9],
     c_ixon_741 = param[10],
     c_ixoff_743 = param[11],
     c_opost_745 = param[12],
     c_obaud_747 = param[13],
     c_ibaud_749 = param[14],
     c_csize_751 = param[15],
     c_cstopb_753 = param[16],
     c_cread_755 = param[17],
     c_parenb_757 = param[18],
     c_parodd_759 = param[19],
     c_hupcl_761 = param[20],
     c_clocal_763 = param[21],
     c_isig_765 = param[22],
     c_icanon_767 = param[23],
     c_noflsh_769 = param[24],
     c_echo_771 = param[25],
     c_echoe_773 = param[26],
     c_echok_775 = param[27],
     c_echonl_777 = param[28],
     c_vintr_779 = param[29],
     c_vquit_781 = param[30],
     c_verase_783 = param[31],
     c_vkill_785 = param[32],
     c_veof_787 = param[33],
     c_veol_789 = param[34],
     c_vmin_791 = param[35],
     c_vtime_793 = param[36],
     c_vstart_795 = param[37],
     c_vstop_797 = param[38],
     arg_798 = caml_call1(Core[345], c_vstop_797),
     bnds_722 = [0, [1, [0, _hh_, [0, arg_798, 0]]], 0],
     arg_796 = caml_call1(Core[345], c_vstart_795),
     bnds_722$0 = [0, [1, [0, _hi_, [0, arg_796, 0]]], bnds_722],
     arg_794 = caml_call1(Core[389], c_vtime_793),
     bnds_722$1 = [0, [1, [0, _hj_, [0, arg_794, 0]]], bnds_722$0],
     arg_792 = caml_call1(Core[389], c_vmin_791),
     bnds_722$2 = [0, [1, [0, _hk_, [0, arg_792, 0]]], bnds_722$1],
     arg_790 = caml_call1(Core[345], c_veol_789),
     bnds_722$3 = [0, [1, [0, _hl_, [0, arg_790, 0]]], bnds_722$2],
     arg_788 = caml_call1(Core[345], c_veof_787),
     bnds_722$4 = [0, [1, [0, _hm_, [0, arg_788, 0]]], bnds_722$3],
     arg_786 = caml_call1(Core[345], c_vkill_785),
     bnds_722$5 = [0, [1, [0, _hn_, [0, arg_786, 0]]], bnds_722$4],
     arg_784 = caml_call1(Core[345], c_verase_783),
     bnds_722$6 = [0, [1, [0, _ho_, [0, arg_784, 0]]], bnds_722$5],
     arg_782 = caml_call1(Core[345], c_vquit_781),
     bnds_722$7 = [0, [1, [0, _hp_, [0, arg_782, 0]]], bnds_722$6],
     arg_780 = caml_call1(Core[345], c_vintr_779),
     bnds_722$8 = [0, [1, [0, _hq_, [0, arg_780, 0]]], bnds_722$7],
     arg_778 = caml_call1(Core[323], c_echonl_777),
     bnds_722$9 = [0, [1, [0, _hr_, [0, arg_778, 0]]], bnds_722$8],
     arg_776 = caml_call1(Core[323], c_echok_775),
     bnds_722$10 = [0, [1, [0, _hs_, [0, arg_776, 0]]], bnds_722$9],
     arg_774 = caml_call1(Core[323], c_echoe_773),
     bnds_722$11 = [0, [1, [0, _ht_, [0, arg_774, 0]]], bnds_722$10],
     arg_772 = caml_call1(Core[323], c_echo_771),
     bnds_722$12 = [0, [1, [0, _hu_, [0, arg_772, 0]]], bnds_722$11],
     arg_770 = caml_call1(Core[323], c_noflsh_769),
     bnds_722$13 = [0, [1, [0, _hv_, [0, arg_770, 0]]], bnds_722$12],
     arg_768 = caml_call1(Core[323], c_icanon_767),
     bnds_722$14 = [0, [1, [0, _hw_, [0, arg_768, 0]]], bnds_722$13],
     arg_766 = caml_call1(Core[323], c_isig_765),
     bnds_722$15 = [0, [1, [0, _hx_, [0, arg_766, 0]]], bnds_722$14],
     arg_764 = caml_call1(Core[323], c_clocal_763),
     bnds_722$16 = [0, [1, [0, _hy_, [0, arg_764, 0]]], bnds_722$15],
     arg_762 = caml_call1(Core[323], c_hupcl_761),
     bnds_722$17 = [0, [1, [0, _hz_, [0, arg_762, 0]]], bnds_722$16],
     arg_760 = caml_call1(Core[323], c_parodd_759),
     bnds_722$18 = [0, [1, [0, _hA_, [0, arg_760, 0]]], bnds_722$17],
     arg_758 = caml_call1(Core[323], c_parenb_757),
     bnds_722$19 = [0, [1, [0, _hB_, [0, arg_758, 0]]], bnds_722$18],
     arg_756 = caml_call1(Core[323], c_cread_755),
     bnds_722$20 = [0, [1, [0, _hC_, [0, arg_756, 0]]], bnds_722$19],
     arg_754 = caml_call1(Core[389], c_cstopb_753),
     bnds_722$21 = [0, [1, [0, _hD_, [0, arg_754, 0]]], bnds_722$20],
     arg_752 = caml_call1(Core[389], c_csize_751),
     bnds_722$22 = [0, [1, [0, _hE_, [0, arg_752, 0]]], bnds_722$21],
     arg_750 = caml_call1(Core[389], c_ibaud_749),
     bnds_722$23 = [0, [1, [0, _hF_, [0, arg_750, 0]]], bnds_722$22],
     arg_748 = caml_call1(Core[389], c_obaud_747),
     bnds_722$24 = [0, [1, [0, _hG_, [0, arg_748, 0]]], bnds_722$23],
     arg_746 = caml_call1(Core[323], c_opost_745),
     bnds_722$25 = [0, [1, [0, _hH_, [0, arg_746, 0]]], bnds_722$24],
     arg_744 = caml_call1(Core[323], c_ixoff_743),
     bnds_722$26 = [0, [1, [0, _hI_, [0, arg_744, 0]]], bnds_722$25],
     arg_742 = caml_call1(Core[323], c_ixon_741),
     bnds_722$27 = [0, [1, [0, _hJ_, [0, arg_742, 0]]], bnds_722$26],
     arg_740 = caml_call1(Core[323], c_icrnl_739),
     bnds_722$28 = [0, [1, [0, _hK_, [0, arg_740, 0]]], bnds_722$27],
     arg_738 = caml_call1(Core[323], c_igncr_737),
     bnds_722$29 = [0, [1, [0, _hL_, [0, arg_738, 0]]], bnds_722$28],
     arg_736 = caml_call1(Core[323], c_inlcr_735),
     bnds_722$30 = [0, [1, [0, _hM_, [0, arg_736, 0]]], bnds_722$29],
     arg_734 = caml_call1(Core[323], c_istrip_733),
     bnds_722$31 = [0, [1, [0, _hN_, [0, arg_734, 0]]], bnds_722$30],
     arg_732 = caml_call1(Core[323], c_inpck_731),
     bnds_722$32 = [0, [1, [0, _hO_, [0, arg_732, 0]]], bnds_722$31],
     arg_730 = caml_call1(Core[323], c_parmrk_729),
     bnds_722$33 = [0, [1, [0, _hP_, [0, arg_730, 0]]], bnds_722$32],
     arg_728 = caml_call1(Core[323], c_ignpar_727),
     bnds_722$34 = [0, [1, [0, _hQ_, [0, arg_728, 0]]], bnds_722$33],
     arg_726 = caml_call1(Core[323], c_brkint_725),
     bnds_722$35 = [0, [1, [0, _hR_, [0, arg_726, 0]]], bnds_722$34],
     arg_724 = caml_call1(Core[323], c_ignbrk_723),
     bnds_722$36 = [0, [1, [0, _hS_, [0, arg_724, 0]]], bnds_722$35];
    return [1, bnds_722$36];
   }
   var tcgetattr = unary_fd(0, UnixLabels[170]);
   function sexp_of_setattr_when(param){
    switch(param){
      case 0:
       return _hT_;
      case 1:
       return _hU_;
      default: return _hV_;
    }
   }
   function tcsetattr(t, fd, mode){
    function _ll_(param){
     var
      _lm_ = [0, [0, cst_termios, sexp_of_t$27(t)], 0],
      _ln_ = [0, [0, cst_mode$10, sexp_of_setattr_when(mode)], _lm_];
     return [0, fd_r(fd), _ln_];
    }
    return improve
            (0,
             function(param){return caml_call3(UnixLabels[171], fd, mode, t);},
             _ll_);
   }
   function tcsendbreak(fd, duration){
    function _lj_(param){
     var _lk_ = [0, [0, cst_duration, caml_call1(Core_Int[77], duration)], 0];
     return [0, fd_r(fd), _lk_];
    }
    return improve
            (0,
             function(param){
              return caml_call2(UnixLabels[172], fd, duration);
             },
             _lj_);
   }
   var tcdrain = unary_fd(0, UnixLabels[173]);
   function flush_queue_of_sexp(sexp_806){
    a:
    {
     if(0 === sexp_806[0]){
      var _lf_ = sexp_806[1];
      b:
      if(caml_string_notequal(_lf_, cst_TCIFLUSH)){
       c:
       if(caml_string_notequal(_lf_, cst_TCIOFLUSH)){
        if(caml_string_notequal(_lf_, cst_TCOFLUSH)){
         if(! caml_string_notequal(_lf_, cst_tCIFLUSH)) break b;
         if(! caml_string_notequal(_lf_, cst_tCIOFLUSH)) break c;
         if(caml_string_notequal(_lf_, cst_tCOFLUSH)) break a;
        }
        return 1;
       }
       return 2;
      }
      return 0;
     }
     var _lg_ = sexp_806[1];
     if(! _lg_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_805, sexp_806);
     var _lh_ = _lg_[1];
     if(0 !== _lh_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_805, sexp_806);
     var _li_ = _lh_[1];
     b:
     if(caml_string_notequal(_li_, cst_TCIFLUSH)){
      c:
      if(caml_string_notequal(_li_, cst_TCIOFLUSH)){
       if(caml_string_notequal(_li_, cst_TCOFLUSH)){
        if(! caml_string_notequal(_li_, cst_tCIFLUSH)) break b;
        if(! caml_string_notequal(_li_, cst_tCIOFLUSH)) break c;
        if(caml_string_notequal(_li_, cst_tCOFLUSH)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_805, sexp_806);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_805, sexp_806);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_805, sexp_806);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_805, sexp_806);
   }
   function sexp_of_flush_queue(param){
    switch(param){
      case 0:
       return _hW_;
      case 1:
       return _hX_;
      default: return _hY_;
    }
   }
   function tcflush(fd, mode){
    function _ld_(param){
     var _le_ = [0, [0, cst_mode$11, sexp_of_flush_queue(mode)], 0];
     return [0, fd_r(fd), _le_];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[174], fd, mode);},
             _ld_);
   }
   function flow_action_of_sexp(sexp_810){
    a:
    {
     if(0 === sexp_810[0]){
      var _k$_ = sexp_810[1];
      b:
      if(caml_string_notequal(_k$_, cst_TCIOFF)){
       c:
       if(caml_string_notequal(_k$_, cst_TCION)){
        d:
        if(caml_string_notequal(_k$_, cst_TCOOFF)){
         if(caml_string_notequal(_k$_, cst_TCOON)){
          if(! caml_string_notequal(_k$_, cst_tCIOFF)) break b;
          if(! caml_string_notequal(_k$_, cst_tCION)) break c;
          if(! caml_string_notequal(_k$_, cst_tCOOFF)) break d;
          if(caml_string_notequal(_k$_, cst_tCOON)) break a;
         }
         return 1;
        }
        return 0;
       }
       return 3;
      }
      return 2;
     }
     var _la_ = sexp_810[1];
     if(! _la_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_809, sexp_810);
     var _lb_ = _la_[1];
     if(0 !== _lb_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_809, sexp_810);
     var _lc_ = _lb_[1];
     b:
     if(caml_string_notequal(_lc_, cst_TCIOFF)){
      c:
      if(caml_string_notequal(_lc_, cst_TCION)){
       d:
       if(caml_string_notequal(_lc_, cst_TCOOFF)){
        if(caml_string_notequal(_lc_, cst_TCOON)){
         if(! caml_string_notequal(_lc_, cst_tCIOFF)) break b;
         if(! caml_string_notequal(_lc_, cst_tCION)) break c;
         if(! caml_string_notequal(_lc_, cst_tCOOFF)) break d;
         if(caml_string_notequal(_lc_, cst_tCOON)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_809, sexp_810);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_809, sexp_810);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_809, sexp_810);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_809, sexp_810);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_809, sexp_810);
   }
   function sexp_of_flow_action(param){
    switch(param){
      case 0:
       return _hZ_;
      case 1:
       return _h0_;
      case 2:
       return _h1_;
      default: return _h2_;
    }
   }
   function tcflow(fd, mode){
    function _k9_(param){
     var _k__ = [0, [0, cst_mode$12, sexp_of_flow_action(mode)], 0];
     return [0, fd_r(fd), _k__];
    }
    return improve
            (0,
             function(param){return caml_call2(UnixLabels[175], fd, mode);},
             _k9_);
   }
   var setsid = UnixLabels[176];
   function get_sockaddr(name, port){
    return [1, of_string_or_getbyname(name), port];
   }
   function set_in_channel_timeout(ic, rcv_timeout){
    var s = caml_call1(descr_of_in_channel, ic);
    return setsockopt_float(s, 0, rcv_timeout);
   }
   function set_out_channel_timeout(oc, snd_timeout){
    var s = caml_call1(descr_of_out_channel, oc);
    return setsockopt_float(s, 1, snd_timeout);
   }
   function sexp_of_t$28(param){
    if(0 === param[0]){
     var arg0_811 = param[1], res0_812 = caml_call1(sexp_of_t$17, arg0_811);
     return [1, [0, _h3_, [0, res0_812, 0]]];
    }
    var arg0_813 = param[1], res0_814 = caml_call1(sexp_of_t$17, arg0_813);
    return [1, [0, _h4_, [0, res0_814, 0]]];
   }
   var Broadcast_or_destination = [0, sexp_of_t$28];
   function sexp_of_t$29(param){
    switch(param){
      case 0:
       return _h5_;
      case 1:
       return _h6_;
      default: return _h7_;
    }
   }
   var
    _h9_ = caml_call1(Bin_prot_Shape[5], _h8_),
    _h__ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _h9_], 0],
    _h$_ = caml_call1(Bin_shape[4][1], cst_core_unix_src_core_unix_ml$14),
    group$7 = caml_call2(Bin_prot_Shape[2], _h$_, _h__),
    _ia_ = caml_call1(Bin_shape[2][1], cst_t$8);
   caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _ia_), 0);
   function t_of_sexp$24(sexp_822){
    a:
    {
     if(0 === sexp_822[0]){
      var _kZ_ = sexp_822[1], _k0_ = caml_string_compare(_kZ_, cst_allmulti);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     if(0 <= _k0_){
                      if(0 >= _k0_) break i;
                      var _k1_ = caml_string_compare(_kZ_, cst_noarp);
                      if(0 > _k1_){
                       if(! caml_string_notequal(_kZ_, cst_automedia)) break h;
                       if(! caml_string_notequal(_kZ_, cst_broadcast)) break g;
                       if(! caml_string_notequal(_kZ_, cst_debug)) break f;
                       if(! caml_string_notequal(_kZ_, cst_dynamic)) break e;
                       if(! caml_string_notequal(_kZ_, cst_loopback)) break d;
                       if(! caml_string_notequal(_kZ_, cst_master)) break c;
                       if(caml_string_notequal(_kZ_, cst_multicast)) break a;
                       break b;
                      }
                      if(0 < _k1_){
                       if(! caml_string_notequal(_kZ_, cst_notrailers)) break p;
                       if(! caml_string_notequal(_kZ_, cst_pointopoint)) break o;
                       if(! caml_string_notequal(_kZ_, cst_portsel)) break n;
                       if(! caml_string_notequal(_kZ_, cst_promisc)) break m;
                       if(! caml_string_notequal(_kZ_, cst_running)) break l;
                       if(! caml_string_notequal(_kZ_, cst_slave)) break k;
                       if(caml_string_notequal(_kZ_, cst_up)) break a;
                       break j;
                      }
                     }
                     else{
                      var _k2_ = caml_string_compare(_kZ_, cst_Noarp);
                      if(0 > _k2_){
                       if(! caml_string_notequal(_kZ_, cst_Allmulti)) break i;
                       if(! caml_string_notequal(_kZ_, cst_Automedia)) break h;
                       if(! caml_string_notequal(_kZ_, cst_Broadcast)) break g;
                       if(! caml_string_notequal(_kZ_, cst_Debug)) break f;
                       if(! caml_string_notequal(_kZ_, cst_Dynamic)) break e;
                       if(! caml_string_notequal(_kZ_, cst_Loopback)) break d;
                       if(! caml_string_notequal(_kZ_, cst_Master)) break c;
                       if(caml_string_notequal(_kZ_, cst_Multicast)) break a;
                       break b;
                      }
                      if(0 < _k2_){
                       if(! caml_string_notequal(_kZ_, cst_Notrailers)) break p;
                       if(! caml_string_notequal(_kZ_, cst_Pointopoint)) break o;
                       if(! caml_string_notequal(_kZ_, cst_Portsel)) break n;
                       if(! caml_string_notequal(_kZ_, cst_Promisc)) break m;
                       if(! caml_string_notequal(_kZ_, cst_Running)) break l;
                       if(! caml_string_notequal(_kZ_, cst_Slave)) break k;
                       if(caml_string_notequal(_kZ_, cst_Up)) break a;
                       break j;
                      }
                     }
                     return 8;
                    }
                    return 9;
                   }
                   return 10;
                  }
                  return 11;
                 }
                 return 12;
                }
                return 13;
               }
               return 14;
              }
              return 15;
             }
             return 0;
            }
            return 1;
           }
           return 2;
          }
          return 3;
         }
         return 4;
        }
        return 5;
       }
       return 6;
      }
      return 7;
     }
     var _k3_ = sexp_822[1];
     if(! _k3_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_821, sexp_822);
     var _k4_ = _k3_[1];
     if(0 !== _k4_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_821, sexp_822);
     var _k5_ = _k4_[1], _k6_ = caml_string_compare(_k5_, cst_allmulti);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    if(0 <= _k6_){
                     if(0 >= _k6_) break i;
                     var _k7_ = caml_string_compare(_k5_, cst_noarp);
                     if(0 > _k7_){
                      if(! caml_string_notequal(_k5_, cst_automedia)) break h;
                      if(! caml_string_notequal(_k5_, cst_broadcast)) break g;
                      if(! caml_string_notequal(_k5_, cst_debug)) break f;
                      if(! caml_string_notequal(_k5_, cst_dynamic)) break e;
                      if(! caml_string_notequal(_k5_, cst_loopback)) break d;
                      if(! caml_string_notequal(_k5_, cst_master)) break c;
                      if(caml_string_notequal(_k5_, cst_multicast)) break a;
                      break b;
                     }
                     if(0 < _k7_){
                      if(! caml_string_notequal(_k5_, cst_notrailers)) break p;
                      if(! caml_string_notequal(_k5_, cst_pointopoint)) break o;
                      if(! caml_string_notequal(_k5_, cst_portsel)) break n;
                      if(! caml_string_notequal(_k5_, cst_promisc)) break m;
                      if(! caml_string_notequal(_k5_, cst_running)) break l;
                      if(! caml_string_notequal(_k5_, cst_slave)) break k;
                      if(caml_string_notequal(_k5_, cst_up)) break a;
                      break j;
                     }
                    }
                    else{
                     var _k8_ = caml_string_compare(_k5_, cst_Noarp);
                     if(0 > _k8_){
                      if(! caml_string_notequal(_k5_, cst_Allmulti)) break i;
                      if(! caml_string_notequal(_k5_, cst_Automedia)) break h;
                      if(! caml_string_notequal(_k5_, cst_Broadcast)) break g;
                      if(! caml_string_notequal(_k5_, cst_Debug)) break f;
                      if(! caml_string_notequal(_k5_, cst_Dynamic)) break e;
                      if(! caml_string_notequal(_k5_, cst_Loopback)) break d;
                      if(! caml_string_notequal(_k5_, cst_Master)) break c;
                      if(caml_string_notequal(_k5_, cst_Multicast)) break a;
                      break b;
                     }
                     if(0 < _k8_){
                      if(! caml_string_notequal(_k5_, cst_Notrailers)) break p;
                      if(! caml_string_notequal(_k5_, cst_Pointopoint)) break o;
                      if(! caml_string_notequal(_k5_, cst_Portsel)) break n;
                      if(! caml_string_notequal(_k5_, cst_Promisc)) break m;
                      if(! caml_string_notequal(_k5_, cst_Running)) break l;
                      if(! caml_string_notequal(_k5_, cst_Slave)) break k;
                      if(caml_string_notequal(_k5_, cst_Up)) break a;
                      break j;
                     }
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_821, sexp_822);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_821, sexp_822);
   }
   function sexp_of_t$30(param){
    switch(param){
      case 0:
       return _ib_;
      case 1:
       return _ic_;
      case 2:
       return _id_;
      case 3:
       return _ie_;
      case 4:
       return _if_;
      case 5:
       return _ig_;
      case 6:
       return _ih_;
      case 7:
       return _ii_;
      case 8:
       return _ij_;
      case 9:
       return _ik_;
      case 10:
       return _il_;
      case 11:
       return _im_;
      case 12:
       return _in_;
      case 13:
       return _io_;
      case 14:
       return _ip_;
      default: return _iq_;
    }
   }
   var
    compare$9 = runtime.caml_int_compare,
    include$6 =
      caml_call1
       (Core_Comparable[12], [0, compare$9, t_of_sexp$24, sexp_of_t$30]),
    symbol$20 = include$6[1],
    symbol$21 = include$6[2],
    symbol$22 = include$6[3],
    symbol$23 = include$6[4],
    symbol$24 = include$6[5],
    symbol$25 = include$6[6],
    equal$2 = include$6[7],
    compare$10 = include$6[8],
    min$3 = include$6[9],
    max$3 = include$6[10],
    ascending$2 = include$6[11],
    descending$2 = include$6[12],
    between$2 = include$6[13],
    clamp_exn$2 = include$6[14],
    clamp$2 = include$6[15],
    comparator$5 = include$6[16],
    validate_lbound$2 = include$6[17],
    validate_ubound$2 = include$6[18],
    validate_bound$2 = include$6[19],
    Replace_polymorphic_compare$2 = include$6[20],
    Map$3 = include$6[21],
    Set$3 = include$6[22];
   function set_of_int(bitmask){
    function _kY_(flags, t){
     var v = runtime.core_unix_iff_to_int(t);
     return 0 === (bitmask & v) ? flags : caml_call2(Core_Set[12], flags, t);
    }
    return caml_call3(Core_List[20], all, Set$3[5], _kY_);
   }
   function core_unix_iff_to_int(_kX_){
    return runtime.core_unix_iff_to_int(_kX_);
   }
   var Private$1 = [0, core_unix_iff_to_int, set_of_int];
   function sexp_of_t$31(param){
    var
     broadcast_or_destination_840 = param[6],
     netmask_836 = param[5],
     address_832 = param[4],
     flags_830 = param[3],
     family_828 = param[2],
     name_826 = param[1],
     bnds_825 = 0;
    if(broadcast_or_destination_840)
     var
      v_841 = broadcast_or_destination_840[1],
      arg_843 = caml_call1(Broadcast_or_destination[1], v_841),
      bnd_842 = [1, [0, _ir_, [0, arg_843, 0]]],
      bnds_825$0 = [0, bnd_842, bnds_825];
    else
     var bnds_825$0 = bnds_825;
    if(netmask_836)
     var
      v_837 = netmask_836[1],
      arg_839 = caml_call1(sexp_of_t$17, v_837),
      bnd_838 = [1, [0, _is_, [0, arg_839, 0]]],
      bnds_825$1 = [0, bnd_838, bnds_825$0];
    else
     var bnds_825$1 = bnds_825$0;
    if(address_832)
     var
      v_833 = address_832[1],
      arg_835 = caml_call1(sexp_of_t$17, v_833),
      bnd_834 = [1, [0, _it_, [0, arg_835, 0]]],
      bnds_825$2 = [0, bnd_834, bnds_825$1];
    else
     var bnds_825$2 = bnds_825$1;
    var
     arg_831 = caml_call1(Set$3[28], flags_830),
     bnds_825$3 = [0, [1, [0, _iu_, [0, arg_831, 0]]], bnds_825$2],
     arg_829 = sexp_of_t$29(family_828),
     bnds_825$4 = [0, [1, [0, _iv_, [0, arg_829, 0]]], bnds_825$3],
     arg_827 = caml_call1(Core[558], name_826),
     bnds_825$5 = [0, [1, [0, _iw_, [0, arg_827, 0]]], bnds_825$4];
    return [1, bnds_825$5];
   }
   function broadcast_or_destination(r){return r[6];}
   function netmask(r){return r[5];}
   function address(r){return r[4];}
   function flags(r){return r[3];}
   function family(r){return r[2];}
   function name$1(r){return r[1];}
   function addr_to_inet_addr(family, addr){
    switch(family){
      case 0:
       return 0;
      case 1:
       var addrlen = caml_ml_string_length(addr);
       if(0 === addrlen) return 0;
       if(4 !== addrlen) return caml_call3(Core[246], _iy_, addrlen, 0);
       var
        _kj_ = caml_string_get(addr, 3),
        _kk_ = caml_call1(Core_Char[11], _kj_),
        _kl_ = caml_string_get(addr, 2),
        _km_ = caml_call1(Core_Char[11], _kl_),
        _kn_ = caml_string_get(addr, 1),
        _ko_ = caml_call1(Core_Char[11], _kn_),
        _kp_ = caml_string_get(addr, 0),
        _kq_ =
          caml_call1
           (of_string$0,
            caml_call5
             (sprintf,
              _ix_,
              caml_call1(Core_Char[11], _kp_),
              _ko_,
              _km_,
              _kk_));
       return caml_call1(Core_Option[33], _kq_);
      default:
       var addrlen$0 = caml_ml_string_length(addr);
       if(0 === addrlen$0) return 0;
       if(16 !== addrlen$0) return caml_call3(Core[246], _iA_, addrlen$0, 0);
       var
        _kr_ = caml_string_get(addr, 15),
        _ks_ = caml_call1(Core_Char[11], _kr_),
        _kt_ = caml_string_get(addr, 14),
        _ku_ = caml_call1(Core_Char[11], _kt_),
        _kv_ = caml_string_get(addr, 13),
        _kw_ = caml_call1(Core_Char[11], _kv_),
        _kx_ = caml_string_get(addr, 12),
        _ky_ = caml_call1(Core_Char[11], _kx_),
        _kz_ = caml_string_get(addr, 11),
        _kA_ = caml_call1(Core_Char[11], _kz_),
        _kB_ = caml_string_get(addr, 10),
        _kC_ = caml_call1(Core_Char[11], _kB_),
        _kD_ = caml_string_get(addr, 9),
        _kE_ = caml_call1(Core_Char[11], _kD_),
        _kF_ = caml_string_get(addr, 8),
        _kG_ = caml_call1(Core_Char[11], _kF_),
        _kH_ = caml_string_get(addr, 7),
        _kI_ = caml_call1(Core_Char[11], _kH_),
        _kJ_ = caml_string_get(addr, 6),
        _kK_ = caml_call1(Core_Char[11], _kJ_),
        _kL_ = caml_string_get(addr, 5),
        _kM_ = caml_call1(Core_Char[11], _kL_),
        _kN_ = caml_string_get(addr, 4),
        _kO_ = caml_call1(Core_Char[11], _kN_),
        _kP_ = caml_string_get(addr, 3),
        _kQ_ = caml_call1(Core_Char[11], _kP_),
        _kR_ = caml_string_get(addr, 2),
        _kS_ = caml_call1(Core_Char[11], _kR_),
        _kT_ = caml_string_get(addr, 1),
        _kU_ = caml_call1(Core_Char[11], _kT_),
        _kV_ = caml_string_get(addr, 0),
        _kW_ =
          caml_call1
           (of_string$0,
            caml_call17
             (sprintf,
              _iz_,
              caml_call1(Core_Char[11], _kV_),
              _kU_,
              _kS_,
              _kQ_,
              _kO_,
              _kM_,
              _kK_,
              _kI_,
              _kG_,
              _kE_,
              _kC_,
              _kA_,
              _ky_,
              _kw_,
              _ku_,
              _ks_));
       return caml_call1(Core_Option[33], _kW_);
    }
   }
   function test_and_convert(ifa){
    var flags = set_of_int(ifa[3]);
    if(caml_call2(Core_Set[11], flags, 2))
     var
      _kc_ = function(x){return [0, x];},
      _kd_ = addr_to_inet_addr(ifa[2], ifa[6]),
      _kg_ = caml_call2(Core_Option[34], _kd_, _kc_);
    else if(caml_call2(Core_Set[11], flags, 10))
     var
      _ke_ = function(x){return [1, x];},
      _kf_ = addr_to_inet_addr(ifa[2], ifa[7]),
      _kg_ = caml_call2(Core_Option[34], _kf_, _ke_);
    else
     var _kg_ = 0;
    var
     _kh_ = addr_to_inet_addr(ifa[2], ifa[5]),
     _ki_ = addr_to_inet_addr(ifa[2], ifa[4]);
    return [0, ifa[1], ifa[2], flags, _ki_, _kh_, _kg_];
   }
   function getifaddrs(param){
    var _kb_ = runtime.core_unix_getifaddrs(0);
    return caml_call2(Core_List[51], _kb_, test_and_convert);
   }
   var Stable = [0];
   function exec(prog, argv, opt, env, param){
    if(opt) var sth = opt[1], use_path = sth; else var use_path = 1;
    var argv$0 = caml_call1(Core_Array[24], argv);
    function _ka_(eta){return expand_array(0, eta);}
    var env$0 = caml_call2(Core_Option[34], env, _ka_);
    return exec_internal(prog, argv$0, use_path, env$0);
   }
   var Expert = [0, exec_internal];
   caml_call1(Ppx_inline_test_lib[7], cst_core_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Core_unix);
   function _iB_(_j$_){return runtime.core_unix_all_ifnames(_j$_);}
   var
    _iC_ =
      [0,
       Broadcast_or_destination,
       [0,
        all,
        sexp_of_t$30,
        symbol$20,
        symbol$21,
        symbol$22,
        symbol$23,
        symbol$24,
        symbol$25,
        equal$2,
        compare$10,
        min$3,
        max$3,
        ascending$2,
        descending$2,
        between$2,
        clamp_exn$2,
        clamp$2,
        comparator$5,
        validate_lbound$2,
        validate_ubound$2,
        validate_bound$2,
        Replace_polymorphic_compare$2,
        Map$3,
        Set$3,
        Private$1],
       [0, sexp_of_t$29],
       broadcast_or_destination,
       netmask,
       address,
       flags,
       family,
       name$1,
       sexp_of_t$31],
    _iD_ = [0, function(_j__){return runtime.core_unix_nice(_j__);}],
    _iE_ = [0, [0, sexp_of_t$4, t_of_sexp$5, t_of_sexp$4], set$0];
   function _iF_(_j9_, _j8_){
    return runtime.core_unix_mcast_set_loop(_j9_, _j8_);
   }
   function _iG_(_j7_){return runtime.core_unix_mcast_get_loop(_j7_);}
   function _iH_(_j6_, _j5_){
    return runtime.core_unix_mcast_set_ttl(_j6_, _j5_);
   }
   function _iI_(_j4_){return runtime.core_unix_mcast_get_ttl(_j4_);}
   function _iJ_(_j3_){return runtime.core_unix_if_nametoindex(_j3_);}
   function _iK_(_j2_){return runtime.core_unix_if_indextoname(_j2_);}
   function _iL_(_j1_){return runtime.core_unix_uname(_j1_);}
   var
    _iM_ =
      [0,
       sexp_of_t$3,
       compare,
       sysname,
       nodename,
       release,
       version,
       machine,
       [0,
        [0,
         stable_witness,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp$3,
         sexp_of_t$3]]];
   function _iN_(_j0_, _jZ_){
    return runtime.core_unix_getgrouplist(_j0_, _jZ_);
   }
   function _iO_(_jY_, _jX_){return runtime.core_unix_initgroups(_jY_, _jX_);}
   function _iP_(_jW_){return runtime.core_unix_abort(_jW_);}
   function _iQ_(_jV_){return runtime.core_unix_mkdtemp(_jV_);}
   function _iR_(_jU_){return runtime.core_unix_mkstemp(_jU_);}
   function _iS_(_jT_){return runtime.core_unix_sysconf(_jT_);}
   var
    _iT_ =
      [0,
       [0, t_of_sexp, sexp_of_t, min, max],
       sexp_of_limit,
       limit_of_sexp,
       t_of_sexp$0,
       sexp_of_t$0,
       sexp_of_resource,
       resource_of_sexp,
       core_file_size,
       cpu_seconds,
       data_segment,
       file_size,
       num_file_descriptors,
       stack,
       virtual_memory,
       nice,
       get,
       set];
   function _iU_(_jS_, _jR_, _jQ_, _jP_, _jO_){
    return runtime.core_unix_pselect_stub(_jS_, _jR_, _jQ_, _jP_, _jO_);
   }
   function _iV_(_jN_){return runtime.core_unix_fdatasync(_jN_);}
   function _iW_(_jM_){return runtime.core_unix_fsync(_jM_);}
   function _iX_(_jL_){return runtime.core_unix_sync(_jL_);}
   function _iY_(_jK_){return runtime.core_unix_dirfd(_jK_);}
   var
    _iZ_ =
      [0,
       t_of_sexp$2,
       sexp_of_t$2,
       string_kind,
       bigstring_kind,
       empty,
       of_string,
       of_bigstring,
       drop,
       max_iovecs],
    _i0_ = caml_sys_exit,
    _i1_ =
      [0,
       sexp_of_t$27,
       sexp_of_setattr_when,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       sexp_of_flush_queue,
       flush_queue_of_sexp,
       tcflush,
       sexp_of_flow_action,
       flow_action_of_sexp,
       tcflow,
       setsid],
    _i2_ =
      [0,
       t_of_sexp$23,
       sexp_of_t$26,
       getbyname$3,
       getbyname_exn$3,
       getbyport,
       getbyport_exn],
    _i3_ =
      [0,
       t_of_sexp$22,
       sexp_of_t$25,
       getbyname$2,
       getbyname_exn$2,
       getbynumber,
       getbynumber_exn],
    _i4_ =
      [0,
       sexp_of_t$18,
       getbyname$1,
       getbyname_exn$1,
       getbyaddr,
       getbyaddr_exn,
       have_address_in_common],
    _i5_ =
      [0,
       arg_type$0,
       bin_size_t$3,
       bin_write_t$3,
       bin_read_t$7,
       bin_read_t$8,
       bin_shape_t$4,
       bin_writer_t$4,
       bin_reader_t$4,
       bin_t$4,
       t_of_sexp$21,
       sexp_of_t$24,
       of_string$2,
       to_string$1,
       pp,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       equal$1,
       compare$8,
       min$2,
       max$2,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Replace_polymorphic_compare$1,
       comparator$4,
       Map$2,
       Set$2,
       hash_fold_t$1,
       hash$1,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       invariant,
       create,
       base_address,
       bits,
       all_matching_addresses,
       broadcast_address,
       multicast,
       does_match,
       netmask_of_bits,
       is_subset$0,
       [0,
        [0,
         stable_witness$1,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$7,
         t_of_sexp$19,
         sexp_of_t$22,
         comparator$2,
         Map$1,
         Set$1]]],
    _i6_ =
      [0,
       [0,
        hash_fold_t,
        hash,
        stable_witness$0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$1,
        bin_writer_t$1,
        bin_reader_t$1,
        bin_t$1,
        compare$6,
        t_of_sexp$16,
        sexp_of_t$17,
        comparator$0]];
   function _i7_(_jJ_){
    return runtime.core_unix_inet4_addr_to_int63_exn(_jJ_);
   }
   function _i8_(_jI_){return runtime.core_unix_inet4_addr_of_int63(_jI_);}
   function _i9_(_jH_){
    return runtime.core_unix_inet4_addr_to_int32_exn(_jH_);
   }
   var
    _i__ =
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$1,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       hash_fold_t,
       hash,
       sexp_of_t$17,
       arg_type,
       t_of_sexp$17,
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$1,
        bin_writer_t$1,
        bin_reader_t$1,
        bin_t$1,
        compare$6,
        hash_fold_t,
        hash,
        t_of_sexp$17,
        sexp_of_t$19],
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       equal$0,
       compare$6,
       min$1,
       max$1,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       Map$0,
       Set$0,
       of_string$0,
       of_string_or_getbyname,
       to_string,
       bind_any,
       bind_any_inet6,
       localhost,
       localhost_inet6,
       function(_jG_){return runtime.core_unix_inet4_addr_of_int32(_jG_);},
       _i9_,
       _i8_,
       _i7_,
       _i6_],
    _i$_ =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       sexp_of_t$16,
       t_of_sexp$15,
       t_of_sexp$14],
    _ja_ =
      [0,
       mem,
       gid$0,
       passwd$0,
       name$0,
       sexp_of_t$15,
       getbyname$0,
       getbyname_exn$0,
       getbygid,
       getbygid_exn],
    _jb_ =
      [0,
       compare$4,
       shell,
       dir,
       gecos,
       gid,
       uid,
       passwd,
       name,
       t_of_sexp$13,
       sexp_of_t$14,
       getbyname,
       getbyname_exn,
       getbyuid,
       getbyuid_exn,
       getpwents,
       [0, setpwent, getpwent, getpwent_exn, endpwent]];
   function _jc_(_jF_){return runtime.core_time_ns_nanosleep(_jF_);}
   function _jd_(_jE_, _jD_){
    return runtime.core_time_ns_strftime(_jE_, _jD_);
   }
   function _je_(_jC_){return runtime.core_localtime(_jC_);}
   function _jf_(_jB_){return runtime.core_timegm(_jB_);}
   function _jg_(_jA_){return runtime.core_gmtime(_jA_);}
   var _jh_ = [0];
   function _ji_(_jz_){return runtime.core_unix_get_close_on_exec(_jz_);}
   var
    _jl_ = Core_Int[99],
    _jm_ = _jl_[2],
    _jn_ = _jl_[1],
    _jo_ = Core_Int[98],
    _jp_ = _jo_[2],
    _jq_ = _jo_[1],
    _jj_ =
      [0,
       sexp_of_stats,
       stats_of_sexp,
       stat,
       lstat,
       fstat,
       lseek,
       truncate,
       ftruncate],
    _jk_ =
      [0,
       t_of_sexp$12,
       sexp_of_t$10,
       typerep_of_t,
       typename_of_t,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       equal,
       compare$3,
       min$0,
       max$0,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       to_flag_list,
       of_int,
       to_int_exn,
       empty$0,
       symbol$6,
       symbol$7,
       intersect,
       complement,
       is_empty,
       do_intersect,
       are_disjoint,
       is_subset,
       Unstable,
       rdonly,
       wronly,
       rdwr,
       creat,
       excl,
       noctty,
       trunc,
       append,
       nonblock,
       dsync,
       sync,
       rsync,
       direct,
       can_read,
       can_write],
    _jr_ =
      [0,
       Core_Int[77],
       Core_Int[121],
       Core_Int[122],
       Core_Int[123],
       Core_Int[124],
       Core_Int[127],
       Core_Int[128],
       Core_Int[129],
       Core_Int[130],
       Core_Int[81],
       Core_Int[82],
       Core_Int[83],
       Core_Int[84],
       Core_Int[85],
       Core_Int[86],
       Core_Int[87],
       Core_Int[88],
       Core_Int[89],
       Core_Int[90],
       Core_Int[91],
       Core_Int[92],
       Core_Int[93],
       Core_Int[94],
       Core_Int[95],
       Core_Int[97],
       Core_Int[106],
       Core_Int[107],
       Core_Int[108],
       Core_Int[96],
       [0,
        [0, _jq_[9], _jq_[10], _jq_[11]],
        [0, _jp_[9], _jp_[10], _jp_[11], _jp_[12], _jp_[13]],
        _jo_[3],
        _jo_[4],
        _jo_[5],
        _jo_[6],
        _jo_[7],
        _jo_[8],
        _jo_[9],
        _jo_[10],
        _jo_[11],
        _jo_[12],
        _jo_[13],
        _jo_[14],
        _jo_[15],
        _jo_[16],
        _jo_[17],
        _jo_[18],
        _jo_[19],
        _jo_[20],
        _jo_[21],
        _jo_[22],
        _jo_[23],
        _jo_[24],
        _jo_[25],
        _jo_[26],
        _jo_[27],
        _jo_[28],
        _jo_[29],
        _jo_[30],
        _jo_[31],
        _jo_[32],
        _jo_[33],
        _jo_[34],
        _jo_[35],
        _jo_[36],
        _jo_[37],
        _jo_[38],
        _jo_[39],
        _jo_[40],
        _jo_[41],
        _jo_[42],
        _jo_[43],
        _jo_[44],
        _jo_[45]],
       [0,
        [0, _jn_[1], _jn_[2], _jn_[11]],
        [0, _jm_[9], _jm_[10], _jm_[11], _jm_[12], _jm_[13]],
        _jl_[3],
        _jl_[4],
        _jl_[5],
        _jl_[6],
        _jl_[7],
        _jl_[8],
        _jl_[9],
        _jl_[10],
        _jl_[11],
        _jl_[12],
        _jl_[13],
        _jl_[14],
        _jl_[15],
        _jl_[16],
        _jl_[17],
        _jl_[18],
        _jl_[19],
        _jl_[20],
        _jl_[21],
        _jl_[22],
        _jl_[23],
        _jl_[24],
        _jl_[25],
        _jl_[26],
        _jl_[27],
        _jl_[28]],
       Core_Int[65]],
    _js_ = [0, sexp_of_env, env_of_sexp, t_of_sexp$11, expand, expand_array],
    _jt_ =
      [0,
       sexp_of_error$2,
       error_of_sexp$5,
       error_of_sexp$4,
       t_of_sexp$10,
       sexp_of_t$9,
       of_unix$0,
       to_string_hum$1,
       or_error$1],
    _ju_ =
      [0,
       compare_error$0,
       sexp_of_error$1,
       error_of_sexp$3,
       error_of_sexp$2,
       compare$2,
       t_of_sexp$9,
       sexp_of_t$8,
       of_unix,
       to_string_hum$0,
       or_error$0],
    _jv_ =
      [0,
       compare_error,
       sexp_of_error$0,
       error_of_sexp$1,
       error_of_sexp$0,
       compare$1,
       t_of_sexp$8,
       sexp_of_t$7,
       to_string_hum,
       code,
       of_code,
       or_error],
    Core_unix =
      [0,
       sexp_of_error,
       error_of_sexp,
       Error,
       Unix_error,
       Core_unix_Syscall_result,
       function(_jy_, _jx_, _jw_){
        return runtime.core_unix_error_stub(_jy_, _jx_, _jw_);
       },
       error_message,
       handle_unix_error,
       retry_until_no_eintr,
       Private,
       environment,
       putenv,
       unsetenv,
       _jv_,
       _ju_,
       _jt_,
       _js_,
       sexp_of_env,
       env_of_sexp,
       Pgid,
       exec,
       fork_exec,
       fork,
       sexp_of_wait_on,
       wait_on_of_sexp$0,
       wait_on_of_sexp,
       wait,
       wait_nohang,
       wait_untraced,
       wait_nohang_untraced,
       waitpid,
       waitpid_exn,
       system,
       getpid,
       getppid,
       getppid_exn,
       setpgid,
       getpgid,
       _jr_,
       gettid,
       nice$0,
       stdin,
       stdout,
       stderr,
       open_flag_of_sexp,
       sexp_of_open_flag,
       sexp_of_file_perm,
       file_perm_of_sexp,
       openfile,
       _jk_,
       fcntl_getfl,
       fcntl_setfl,
       close,
       with_file,
       read,
       write,
       write_substring,
       single_write,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       sexp_of_seek_command,
       seek_command_of_sexp,
       lseek$0,
       truncate$0,
       ftruncate$0,
       sexp_of_file_kind,
       file_kind_of_sexp,
       sexp_of_stats$0,
       stats_of_sexp$0,
       stat$0,
       lstat$0,
       fstat$0,
       _jj_,
       sexp_of_lock_command,
       lock_command_of_sexp,
       lockf,
       Flock_command,
       flock,
       flock_blocking,
       isatty,
       map_file,
       unlink,
       remove,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       access_exn,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       _ji_,
       clear_close_on_exec,
       mkdir,
       mkdir_p,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir_opt,
       readdir,
       rewinddir,
       closedir,
       Readdir_detailed,
       readdir_detailed_opt,
       ls_dir_detailed,
       pipe,
       mkfifo,
       Process_info,
       create_process,
       create_process_env,
       Fd_spec,
       _jh_,
       create_process_with_fds,
       open_process_in,
       open_process_out,
       open_process,
       Process_channels,
       open_process_full,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       readlink,
       Select_fds,
       sexp_of_select_timeout,
       select,
       pause,
       sexp_of_process_times,
       process_times_of_sexp,
       Clock,
       sexp_of_tm,
       tm_of_sexp,
       time,
       gettimeofday,
       _jg_,
       _jf_,
       _je_,
       mktime,
       _jd_,
       strptime,
       alarm,
       sleep,
       _jc_,
       times,
       utimes,
       sexp_of_interval_timer,
       interval_timer_of_sexp,
       sexp_of_interval_timer_status,
       interval_timer_status_of_sexp,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       _jb_,
       _ja_,
       username,
       username,
       _i$_,
       _i__,
       _i5_,
       sexp_of_socket_domain,
       socket_domain_of_sexp,
       bin_shape_socket_domain,
       bin_size_socket_domain,
       bin_write_socket_domain,
       bin_writer_socket_domain,
       bin_read_socket_domain$0,
       bin_read_socket_domain,
       bin_reader_socket_domain,
       bin_socket_domain,
       sexp_of_socket_type,
       socket_type_of_sexp,
       bin_shape_socket_type,
       bin_size_socket_type,
       bin_write_socket_type,
       bin_writer_socket_type,
       bin_read_socket_type$0,
       bin_read_socket_type,
       bin_reader_socket_type,
       bin_socket_type,
       bin_shape_sockaddr,
       bin_size_sockaddr,
       bin_write_sockaddr,
       bin_writer_sockaddr,
       bin_read_sockaddr$0,
       bin_read_sockaddr,
       bin_reader_sockaddr,
       bin_sockaddr,
       compare_sockaddr,
       sexp_of_sockaddr,
       sockaddr_blocking_sexp_of_sexp,
       bin_shape_sockaddr_blocking_se,
       bin_size_sockaddr_blocking_sex,
       bin_write_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_read_sockaddr_blocking_sex$0,
       bin_read_sockaddr_blocking_sex,
       bin_reader_sockaddr_blocking_s,
       bin_sockaddr_blocking_sexp,
       sexp_of_sockaddr_blocking_sexp,
       sockaddr_blocking_sexp_of_sexp,
       domain_of_sockaddr,
       socket,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       sexp_of_shutdown_command,
       shutdown_command_of_sexp,
       shutdown,
       getsockname,
       getpeername,
       sexp_of_msg_flag,
       msg_flag_of_sexp,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       sexp_of_socket_bool_option,
       socket_bool_option_of_sexp,
       sexp_of_socket_int_option,
       socket_int_option_of_sexp,
       sexp_of_socket_float_option,
       socket_float_option_of_sexp,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       _i4_,
       _i3_,
       _i2_,
       sexp_of_addr_info,
       sexp_of_addr_info_blocking_sex,
       addr_info_blocking_sexp_of_sex,
       sexp_of_getaddrinfo_option,
       getaddrinfo_option_of_sexp,
       getaddrinfo,
       sexp_of_name_info,
       name_info_of_sexp,
       sexp_of_getnameinfo_option,
       getnameinfo_option_of_sexp,
       getnameinfo,
       _i1_,
       get_sockaddr,
       set_in_channel_timeout,
       set_out_channel_timeout,
       _i0_,
       mknod,
       _iZ_,
       _iY_,
       _iX_,
       _iW_,
       _iV_,
       read_assume_fd_is_nonblocking,
       write_assume_fd_is_nonblocking,
       writev_assume_fd_is_nonblockin,
       writev,
       _iU_,
       _iT_,
       Resource_usage,
       wait_with_resource_usage,
       sexp_of_sysconf,
       sysconf_of_sexp,
       _iS_,
       sysconf_exn,
       _iR_,
       _iQ_,
       _iP_,
       _iO_,
       _iN_,
       getgroups,
       fnmatch,
       wordexp,
       _iM_,
       _iL_,
       _iK_,
       _iJ_,
       mcast_join,
       mcast_leave,
       _iI_,
       _iH_,
       _iG_,
       _iF_,
       set_mcast_ifname,
       _iE_,
       _iD_,
       Mman,
       _iC_,
       getifaddrs,
       _iB_,
       Expert,
       Stable];
   runtime.caml_register_global(2116, Core_unix, cst_Core_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
