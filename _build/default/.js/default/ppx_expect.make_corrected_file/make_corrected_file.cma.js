// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Make_corrected_file__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Make_corrected_file = [0],
    Make_corrected_file$0 = [0, Make_corrected_file];
   runtime.caml_register_global
    (0, Make_corrected_file$0, "Make_corrected_file__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Make_corrected_file_Import = [0];
   runtime.caml_register_global
    (0, Make_corrected_file_Import, "Make_corrected_file__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__List, Base__Option, Base__String, Base__Sys, Ppxlib_print_diff, Stdio__In_channel, Stdio__Out_channel, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$3 = "", cst$4 = "/";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$0 = cst$4,
    cst$1 = cst$3,
    cst = cst$4,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Base_Sys = global_data.Base__Sys,
    Base_Char = global_data.Base__Char,
    Base_List = global_data.Base__List,
    Ppxlib_print_diff = global_data.Ppxlib_print_diff,
    Base_Error = global_data.Base__Error,
    _a_ = [0, 0],
    cst_corrected = ".corrected",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    _b_ = [0, "-default", 0],
    cst_alt_old = "-alt-old",
    cst_alt_new = "-alt-new",
    cst_Changes_found = "Changes found.";
   function chop_if_exists(ancestor, path){
    var _j_ = caml_call2(Base[241], ancestor, cst);
    return caml_call2(Base_String[119], path, _j_);
   }
   function f
   (opt,
    corrected_path,
    _c_,
    diff_command,
    diff_path_prefix,
    next_contents,
    path,
    param){
    if(opt)
     var sth = opt[1], use_dot_patdiff = sth;
    else
     var use_dot_patdiff = 0;
    if(_c_) var sth$0 = _c_[1], use_color = sth$0; else var use_color = 0;
    var
     prev_contents =
       runtime.caml_sys_file_exists(path)
        ? caml_call3(Stdio_In_channel[4], 0, path, Stdio_In_channel[14])
        : cst$2;
    if(caml_call2(Base_String[47], prev_contents, next_contents)) return _a_;
    var
     default_corrected_path = caml_call2(Base[241], path, cst_corrected),
     corrected_path$0 =
       caml_call2(Base_Option[30], corrected_path, default_corrected_path);
    caml_call2(Stdio_Out_channel[37], corrected_path$0, next_contents);
    if(use_dot_patdiff)
     var
      _d_ = caml_call1(Base_Sys[19], cst_TESTING_FRAMEWORK),
      _e_ = caml_call1(Base_Option[52], _d_);
    else
     var _e_ = use_dot_patdiff;
    var default_configs = _e_ ? 0 : _b_, cwd = runtime.caml_sys_getcwd(0);
    if(diff_path_prefix)
     var
      prefix = diff_path_prefix[1],
      _f_ = [0, caml_call1(Base_Char[16], 47)],
      _g_ = caml_call2(Base_String[108], _f_, prefix),
      prefix$0 = caml_call2(Base[241], _g_, cst$0);
    else
     var prefix$0 = cst$1;
    var
     _h_ = chop_if_exists(cwd, path),
     alt_old = [0, cst_alt_old, [0, caml_call2(Base[241], prefix$0, _h_), 0]],
     _i_ = chop_if_exists(cwd, default_corrected_path),
     alt_new = [0, cst_alt_new, [0, caml_call2(Base[241], prefix$0, _i_), 0]],
     extra_patdiff_args =
       caml_call1
        (Base_List[11], [0, default_configs, [0, alt_old, [0, alt_new, 0]]]);
    caml_call6
     (Ppxlib_print_diff[1],
      diff_command,
      [0, extra_patdiff_args],
      [0, use_color],
      path,
      corrected_path$0,
      0);
    return [1, caml_call1(Base_Error[14], cst_Changes_found)];
   }
   var Make_corrected_file = [0, f];
   runtime.caml_register_global
    (21, Make_corrected_file, "Make_corrected_file");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtYWtlX2NvcnJlY3RlZF9maWxlLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJjaG9wX2lmX2V4aXN0cyIsImFuY2VzdG9yIiwicGF0aCIsImYiLCJvcHQiLCJjb3JyZWN0ZWRfcGF0aCIsImRpZmZfY29tbWFuZCIsImRpZmZfcGF0aF9wcmVmaXgiLCJuZXh0X2NvbnRlbnRzIiwic3RoIiwidXNlX2RvdF9wYXRkaWZmIiwic3RoJDAiLCJ1c2VfY29sb3IiLCJwcmV2X2NvbnRlbnRzIiwiZGVmYXVsdF9jb3JyZWN0ZWRfcGF0aCIsImNvcnJlY3RlZF9wYXRoJDAiLCJkZWZhdWx0X2NvbmZpZ3MiLCJjd2QiLCJwcmVmaXgiLCJwcmVmaXgkMCIsImFsdF9vbGQiLCJhbHRfbmV3IiwiZXh0cmFfcGF0ZGlmZl9hcmdzIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvcHB4X2V4cGVjdC9tYWtlX2NvcnJlY3RlZF9maWxlL21ha2VfY29ycmVjdGVkX2ZpbGVfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL3BweF9leHBlY3QvbWFrZV9jb3JyZWN0ZWRfZmlsZS9tYWtlX2NvcnJlY3RlZF9maWxlLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0dBSytCOztJQUFBOzs7OztFOzs7Ozs7Ozs7O0U7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lDRjNCQSxlQUFnQkMsVUFBZUM7SUFDUyxVQUFBLHNCQUR4QkQ7SUFDd0IsT0FBQSw2QkFEVEM7R0FDeUI7WUFHeERDO0lBQ0FDO0lBQ0RDOztJQUVBQztJQUNBQztJQUNBQztJQUNBTjs7SUFHRCxHQVRFRTtTQUFrQkssTUFBbEJMLFFBQUFNLGtCQUFrQkQ7O1NBQWxCQztJQVNGLFlBUGNDLGdCQUFaQyxZQUFZRCxnQkFBWkM7SUFRRztLQUREQztPQUNDLDZCQUpKWDtVQUtNLG1DQUxOQTs7T0FRSyw0QkFMRlcsZUFKSEwsZ0JBZ0JDO0lBRTZCO0tBQXpCTSx5QkFBeUIsc0JBakI5Qlo7S0FrQkthO09BQWlCLDRCQXZCdEJWLGdCQXNCS1M7SUFFSixrQ0FESUMsa0JBbkJMUDtPQUxDRTtLQTRCNEM7TUFBQSxNQUFBO1lBQWY7O2VBNUI3QkE7SUFnQ1ksSUFMTk0saUNBS0FDLE1BQU07SUFLVixHQWpDSFY7S0FtQzBDO01BQTlCVyxTQW5DWlg7TUFtQzBDLFVBQUE7TUFBcEIsTUFBQSxrQ0FBVlc7TUFGTEMsV0FFZTs7U0FGZkE7SUFLaUM7S0FBQSxNQS9DdkNuQixlQXFDTWlCLEtBMUJQZjtLQW9DT2tCLCtCQUF3QixzQkFMeEJEO0tBT3FCLE1BakQzQm5CLGVBcUNNaUIsS0FURkg7S0FvQkVPLCtCQUNZLHNCQVBaRjtLQVhGRztPQW9CRjs0QkFuQklOLHFCQWVBSSxhQUNBQztJQUtOOztNQTdDRGY7VUF1QktnQjtVQXhCSlY7TUFJRFY7TUFrQkthOztJQStCSixXQUFNO0dBQWtDO2lDQXhEeENaOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgYnkgZHVuZSAqKVxuXG4oKiogQGNhbm9uaWNhbCBNYWtlX2NvcnJlY3RlZF9maWxlLkltcG9ydCAqKVxubW9kdWxlIEltcG9ydCA9IE1ha2VfY29ycmVjdGVkX2ZpbGVfX0ltcG9ydFxuXG5tb2R1bGUgTWFrZV9jb3JyZWN0ZWRfZmlsZV9fID0gc3RydWN0IGVuZFxuW0BAZGVwcmVjYXRlZCBcInRoaXMgbW9kdWxlIGlzIHNoYWRvd2VkXCJdXG4iLCJvcGVuISBCYXNlXG5vcGVuISBJbXBvcnRcblxubGV0IGNob3BfaWZfZXhpc3RzIH5hbmNlc3RvciB+ZnJvbTpwYXRoID1cbiAgU3RyaW5nLmNob3BfcHJlZml4X2lmX2V4aXN0cyBwYXRoIH5wcmVmaXg6KGFuY2VzdG9yIF4gXCIvXCIpXG47O1xuXG5sZXQgZlxuICA/KHVzZV9kb3RfcGF0ZGlmZiA9IGZhbHNlKVxuICA/Y29ycmVjdGVkX3BhdGhcbiAgPyh1c2VfY29sb3IgPSBmYWxzZSlcbiAgP2RpZmZfY29tbWFuZFxuICA/ZGlmZl9wYXRoX3ByZWZpeFxuICB+bmV4dF9jb250ZW50c1xuICB+cGF0aFxuICAoKVxuICA9XG4gIGxldCBwcmV2X2NvbnRlbnRzID1cbiAgICBpZiBTdGRsaWIuU3lzLmZpbGVfZXhpc3RzIHBhdGhcbiAgICB0aGVuIFN0ZGlvLkluX2NoYW5uZWwud2l0aF9maWxlIHBhdGggfmY6U3RkaW8uSW5fY2hhbm5lbC5pbnB1dF9hbGxcbiAgICBlbHNlIFwiXCJcbiAgaW5cbiAgbWF0Y2ggU3RyaW5nLiggPSApIHByZXZfY29udGVudHMgbmV4dF9jb250ZW50cyB3aXRoXG4gIHwgdHJ1ZSAtPlxuICAgICgqIEl0J3MgcG9zc2libGUgZm9yIHN0YWxlIC5jb3JyZWN0ZWQgZmlsZXMgdG8gbGluZ2VyIGFuZCBpZGVhbGx5IHdlIHdvdWxkIGRlbGV0ZSB0aGVtXG4gICAgICAgaGVyZSwgYnV0IHRoaXMgcHJvYmFibHkgaXNuJ3Qgd29ydGggZml4aW5nIHNpbmNlIGl0J3MgbW9vdGVkIGJ5IGR1bmUsIHdoaWNoIHB1dHNcbiAgICAgICBpdHMgYnVpbGQgcHJvZHVjdHMgaW4gYSBzZXBhcmF0ZSBkaXJlY3RvcnkuIElmIHdlIGRvIGFkZCBkZWxldGlvbiBhdCBzb21lIHBvaW50IGluXG4gICAgICAgdGhlIGZ1dHVyZSwgd2Ugc2hvdWxkIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IGNhdXNlIHByb2JsZW1zIGZvciBjbGllbnRzIHdobyBjYWxsIFtmXVxuICAgICAgIGFuZCB0aGVuIHBlcmZvcm0gZGVsZXRpb24gb24gdGhlaXIgb3duLiAqKVxuICAgIE9rICgpXG4gIHwgZmFsc2UgLT5cbiAgICBsZXQgZGVmYXVsdF9jb3JyZWN0ZWRfcGF0aCA9IHBhdGggXiBcIi5jb3JyZWN0ZWRcIiBpblxuICAgIGxldCBjb3JyZWN0ZWRfcGF0aCA9IE9wdGlvbi52YWx1ZSBjb3JyZWN0ZWRfcGF0aCB+ZGVmYXVsdDpkZWZhdWx0X2NvcnJlY3RlZF9wYXRoIGluXG4gICAgU3RkaW8uT3V0X2NoYW5uZWwud3JpdGVfYWxsIGNvcnJlY3RlZF9wYXRoIH5kYXRhOm5leHRfY29udGVudHM7XG4gICAgbGV0IGV4dHJhX3BhdGRpZmZfYXJncyA9XG4gICAgICBsZXQgZGVmYXVsdF9jb25maWdzID1cbiAgICAgICAgbWF0Y2ggdXNlX2RvdF9wYXRkaWZmICYmIE9wdGlvbi5pc19ub25lIChTeXMuZ2V0ZW52IFwiVEVTVElOR19GUkFNRVdPUktcIikgd2l0aFxuICAgICAgICB8IHRydWUgLT4gW11cbiAgICAgICAgfCBmYWxzZSAtPiBbIFwiLWRlZmF1bHRcIiBdXG4gICAgICBpblxuICAgICAgbGV0IGN3ZCA9IFN0ZGxpYi5TeXMuZ2V0Y3dkICgpIGluXG4gICAgICAoKiBkaWZmX3BhdGhfcHJlZml4IGlzIHVzZWZ1bCB0byB0cmFuc2Zvcm0gb3V0cHV0IHBhdGhzIHRvIG1ha2UgaXQgZWFzaWVyIGZvciB0aGVcbiAgICAgICAgIGNvbnN1bWVyIChlLmcuIGVkaXRvcikgdG8gbG9jYXRlIHRoZSBmaWxlcyB3aXRoIGRpZmZzLiBPbmUgcGFydGljdWxhciBleGFtcGxlIHRoaXNcbiAgICAgICAgIGhlbHBzIGlzIHRoZSBcInRlc3QtdGhpcy1maWxlXCIgcnVsZXMgZ2VuZXJhdGVkIGJ5IGVtYWNzL3ZzY29kZSBpbiBqZW5nYS9zdGFydC9qYnVpbGQsXG4gICAgICAgICB3aGVyZSB0aGUgcnVsZSBhbmQgdGhlIHRlc3QgYXJlIGluIGRpZmZlcmVudCBkaXJlY3Rvcmllcy4gKilcbiAgICAgIGxldCBwcmVmaXggPVxuICAgICAgICBtYXRjaCBkaWZmX3BhdGhfcHJlZml4IHdpdGhcbiAgICAgICAgfCBTb21lIHByZWZpeCAtPiBTdHJpbmcucnN0cmlwIH5kcm9wOihDaGFyLmVxdWFsICcvJykgcHJlZml4IF4gXCIvXCJcbiAgICAgICAgfCBOb25lIC0+IFwiXCJcbiAgICAgIGluXG4gICAgICBsZXQgYWx0X29sZCA9IFsgXCItYWx0LW9sZFwiOyBwcmVmaXggXiBjaG9wX2lmX2V4aXN0cyB+YW5jZXN0b3I6Y3dkIH5mcm9tOnBhdGggXSBpblxuICAgICAgbGV0IGFsdF9uZXcgPVxuICAgICAgICBbIFwiLWFsdC1uZXdcIjsgcHJlZml4IF4gY2hvcF9pZl9leGlzdHMgfmFuY2VzdG9yOmN3ZCB+ZnJvbTpkZWZhdWx0X2NvcnJlY3RlZF9wYXRoIF1cbiAgICAgIGluXG4gICAgICBbIGRlZmF1bHRfY29uZmlnczsgYWx0X29sZDsgYWx0X25ldyBdIHw+IExpc3QuY29uY2F0XG4gICAgaW5cbiAgICBQcHhsaWJfcHJpbnRfZGlmZi5wcmludFxuICAgICAgP2RpZmZfY29tbWFuZFxuICAgICAgfnVzZV9jb2xvclxuICAgICAgfmV4dHJhX3BhdGRpZmZfYXJnc1xuICAgICAgfmZpbGUxOnBhdGhcbiAgICAgIH5maWxlMjpjb3JyZWN0ZWRfcGF0aFxuICAgICAgKCk7XG4gICAgRXJyb3IgKEVycm9yLm9mX3N0cmluZyBcIkNoYW5nZXMgZm91bmQuXCIpXG47O1xuIl19
