// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ojs
//# unitInfo: Requires: CamlinternalOO, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    joo_global_object = globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_to_js$0 = "to_js",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_to_bool = runtime.caml_js_to_bool,
    caml_js_to_string = runtime.caml_js_to_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    shared = [0, cst_to_js$0],
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_to_js = cst_to_js$0;
   function type_of(x){return caml_js_to_string(typeof x);}
   function instance_of(x, constr){return (x instanceof constr ? 1 : 0) | 0;}
   var null$0 = null, undefined$0 = undefined, global = joo_global_object;
   function array_make(n){return new global["Array"](n);}
   var array_get = caml_js_get, array_set = caml_js_set;
   function array_of_js_from(f, objs, start){
    var n = objs["length"];
    function _G_(i){return caml_call1(f, objs[start + i | 0]);}
    return caml_call2(Stdlib_Array[1], n - start | 0, _G_);
   }
   function array_of_js(f, objs){return array_of_js_from(f, objs, 0);}
   function array_to_js(f, arr){
    var n = arr.length - 1, a = array_make(n), _E_ = n - 1 | 0, _D_ = 0;
    if(_E_ >= 0){
     var i = _D_;
     for(;;){
      a[i] = caml_call1(f, runtime.caml_check_bound(arr, i)[1 + i]);
      var _F_ = i + 1 | 0;
      if(_E_ === i) break;
      var i = _F_;
     }
    }
    return a;
   }
   function list_of_js_from(f, objs, start){
    var _C_ = array_of_js_from(f, objs, start);
    return caml_call1(Stdlib_Array[9], _C_);
   }
   function list_of_js(f, objs){return list_of_js_from(f, objs, 0);}
   function list_to_js(f, l){
    return array_to_js(f, caml_call1(Stdlib_Array[10], l));
   }
   function option_of_js(f, x){
    return x == null$0 ? 0 : [0, caml_call1(f, x)];
   }
   function option_to_js(f, param){
    if(! param) return null$0;
    var x = param[1];
    return caml_call1(f, x);
   }
   function unit_to_js(param){return undefined$0;}
   function unit_of_js(param){return 0;}
   function _a_(_u_){
    var
     _v_ = caml_call2(CamlinternalOO[3], _u_, cst),
     _w_ = caml_call2(CamlinternalOO[7], _u_, cst_to_js);
    function _x_(self_1){return self_1[1 + _v_];}
    caml_call3(CamlinternalOO[10], _u_, _w_, _x_);
    return function(_A_, _z_, _y_){
     var _B_ = caml_call2(CamlinternalOO[24], _z_, _u_);
     _B_[1 + _v_] = _y_;
     return _B_;};
   }
   var obj = caml_call2(CamlinternalOO[19], shared, _a_);
   function has_property(o, x){
    var _r_ = runtime.caml_string_equal(type_of(o), "object");
    if(_r_)
     var
      _s_ = o !== null$0 ? 1 : 0,
      _t_ = _s_ ? o[caml_js_from_string(x)] !== undefined$0 ? 1 : 0 : _s_;
    else
     var _t_ = _r_;
    return _t_;
   }
   function empty_obj(param){return new global["Object"];}
   function iter_properties(x, f){
    return runtime.caml_ojs_iterate_properties
            (x,
             runtime.caml_js_wrap_callback_strict
              (1, function(x){return caml_call1(f, caml_js_to_string(x));}));
   }
   function apply_arr(o, arr){return o.apply(null$0, arr);}
   function call_arr(o, s, arr){
    return o[caml_js_from_string(s)].apply(o, arr);
   }
   function is_null(x){return x == null$0 ? 1 : 0;}
   function obj_type(x){
    return caml_js_to_string(Object.prototype.toString.call(x));
   }
   function t_to_js(_q_){return _q_;}
   function t_of_js(_p_){return _p_;}
   var
    Int = [0, t_to_js, t_of_js],
    t_to_js$0 = caml_js_from_string,
    t_of_js$0 = caml_js_to_string,
    String = [0, t_to_js$0, t_of_js$0],
    t_to_js$1 = runtime.caml_js_from_bool,
    t_of_js$1 = caml_js_to_bool,
    Bool = [0, t_to_js$1, t_of_js$1];
   function t_to_js$2(_o_){return _o_;}
   function t_of_js$2(_n_){return _n_;}
   var Float = [0, t_to_js$2, t_of_js$2];
   function Array(A){
    var _j_ = A[1];
    function t_to_js(_m_){return array_to_js(_j_, _m_);}
    var _k_ = A[2];
    function t_of_js(_l_){return array_of_js(_k_, _l_);}
    return [0, t_to_js, t_of_js];
   }
   function List(A){
    var _f_ = A[1];
    function t_to_js(_i_){return list_to_js(_f_, _i_);}
    var _g_ = A[2];
    function t_of_js(_h_){return list_of_js(_g_, _h_);}
    return [0, t_to_js, t_of_js];
   }
   function Option(A){
    var _b_ = A[1];
    function t_to_js(_e_){return option_to_js(_b_, _e_);}
    var _c_ = A[2];
    function t_of_js(_d_){return option_of_js(_c_, _d_);}
    return [0, t_to_js, t_of_js];
   }
   var
    Ojs =
      [0,
       array_of_js,
       array_to_js,
       list_of_js,
       list_to_js,
       array_of_js_from,
       list_of_js_from,
       option_of_js,
       option_to_js,
       unit_of_js,
       unit_to_js,
       empty_obj,
       has_property,
       iter_properties,
       call_arr,
       apply_arr,
       array_make,
       array_get,
       array_set,
       global,
       null$0,
       type_of,
       instance_of,
       obj,
       is_null,
       obj_type,
       Int,
       String,
       Bool,
       Float,
       Array,
       List,
       Option];
   runtime.caml_register_global(16, Ojs, "Ojs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ojs_exn
//# unitInfo: Requires: Jsoo_runtime, Ojs, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_to_string = runtime.caml_js_to_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ojs = global_data.Ojs,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_Printexc = global_data.Stdlib__Printexc;
   function name(x){return caml_js_to_string(x["name"]);}
   function message(x){return caml_js_to_string(x["message"]);}
   function stack(x){
    var _b_ = x["stack"];
    return caml_call2(Ojs[7], caml_js_to_string, _b_);
   }
   function to_string(x){return caml_js_to_string(x.toString());}
   var Error = Jsoo_runtime[3][4];
   function _a_(param){
    if(param[1] !== Error) return 0;
    var x = param[2];
    return [0, to_string(x)];
   }
   caml_call1(Stdlib_Printexc[9], _a_);
   var Ojs_exn = [0, name, message, stack, to_string, Error];
   runtime.caml_register_global(7, Ojs_exn, "Ojs_exn");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJvanMuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInR5cGVfb2YiLCJ4IiwiaW5zdGFuY2Vfb2YiLCJjb25zdHIiLCJudWxsJDAiLCJ1bmRlZmluZWQkMCIsImdsb2JhbCIsImFycmF5X21ha2UiLCJuIiwiYXJyYXlfZ2V0IiwiYXJyYXlfc2V0IiwiYXJyYXlfb2ZfanNfZnJvbSIsImYiLCJvYmpzIiwic3RhcnQiLCJpIiwiYXJyYXlfb2ZfanMiLCJhcnJheV90b19qcyIsImFyciIsImEiLCJsaXN0X29mX2pzX2Zyb20iLCJsaXN0X29mX2pzIiwibGlzdF90b19qcyIsImwiLCJvcHRpb25fb2ZfanMiLCJvcHRpb25fdG9fanMiLCJ1bml0X3RvX2pzIiwidW5pdF9vZl9qcyIsInNlbGZfMSIsImhhc19wcm9wZXJ0eSIsIm8iLCJlbXB0eV9vYmoiLCJpdGVyX3Byb3BlcnRpZXMiLCJhcHBseV9hcnIiLCJjYWxsX2FyciIsInMiLCJpc19udWxsIiwib2JqX3R5cGUiLCJ0X3RvX2pzIiwidF9vZl9qcyIsInRfdG9fanMkMCIsInRfb2ZfanMkMCIsInRfdG9fanMkMSIsInRfb2ZfanMkMSIsInRfdG9fanMkMiIsInRfb2ZfanMkMiIsIm5hbWUiLCJtZXNzYWdlIiwic3RhY2siLCJ0b19zdHJpbmciXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9vanMvb2pzLm1sIiwiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvb2pzL29qc19leG4ubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7OztZQWlESUEsUUFBUUMsR0FBSSxPQUFBLHlCQUFKQSxHQUFxQztZQUc3Q0MsWUFBWUQsR0FBR0UsUUFBUyxRQUFaRixhQUFHRSxvQkFBbUQ7R0FHM0QsSUFBUEMsZUFDQUMseUJBSUFDO1lBT0FDLFdBQVdDLEdBQUksV0FQ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K0MsTUFBTS9DO0lBQXNDLFVBQXRDQTtJQUFzQyxPQUFBO0dBQXVDO1lBQ25GZ0QsVUFBVWhELEdBQUksT0FBQSxrQkFBSkEsY0FBMEQ7OztJQUs1Qyx1QkFFZjtRQURDQTtJQUFLLFdBTmZnRCxVQU1VaEQ7R0FFVDtHQUhIO3FCQVJFNkMsTUFDQUMsU0FDQUMsT0FDQUM7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogVGhlIGdlbl9qc19hcGkgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIHRlcm1zIG9mIGFuIE1JVC1saWtlIGxpY2Vuc2UuICAgICAqKVxuKCogU2VlIHRoZSBhdHRhY2hlZCBMSUNFTlNFIGZpbGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogQ29weXJpZ2h0IDIwMTUgYnkgTGV4aUZpLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuXG4oKiBUaGlzIG1vZHVsZSAobW9zdGx5KSBhYnN0cmFjdHMgYXdheSBmcm9tIGpzX29mX29jYW1sIGVuY29kaW5nIG9mXG4gICBPQ2FtbCB2YWx1ZXMuICBJdCBzZXJ2ZXMgYXMgYSBzdXBwb3J0IGxpYnJhcnkgZm9yIHRoZSBjb2RlIGdlbmVyYXRlZFxuICAgYnkgZ2VuX2pzX2FwaS5cblxuICAgVGhlIG1vZHVsZSBjb3VsZCBtb3N0bHkgYmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mIGpzX29mX29jYW1sJ3MgSnMgbW9kdWxlXG4gICAoYW5kIGluIHBhcnRpY3VsYXIgSnMuVW5zYWZlKSwgYnV0IHdlIHByZWZlciB0byBkcm9wIHRoZSBkZXBlbmRlbmN5XG4gICB0byBqc19vZl9vY2FtbCdzIGxpYnJhcnkgYW5kIHRvIHJlbHkgb25seSBvbiBpdHMgY29tcGlsZXIgYW5kIEpTXG4gICBydW50aW1lIGNvZGUuXG4qKVxuXG5cbnR5cGUgdFxuXG5leHRlcm5hbCB0X29mX2pzOiB0IC0+IHQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCB0X3RvX2pzOiB0IC0+IHQgPSBcIiVpZGVudGl0eVwiXG5cbmV4dGVybmFsIHN0cmluZ19vZl9qczogdCAtPiBzdHJpbmcgPSBcImNhbWxfanNfdG9fc3RyaW5nXCJcbmV4dGVybmFsIHN0cmluZ190b19qczogc3RyaW5nIC0+IHQgPSBcImNhbWxfanNfZnJvbV9zdHJpbmdcIlxuXG5leHRlcm5hbCBpbnRfb2ZfanM6IHQgLT4gaW50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgaW50X3RvX2pzOiBpbnQgLT4gdCA9IFwiJWlkZW50aXR5XCJcblxuZXh0ZXJuYWwgYm9vbF9vZl9qczogdCAtPiBib29sID0gXCJjYW1sX2pzX3RvX2Jvb2xcIlxuZXh0ZXJuYWwgYm9vbF90b19qczogYm9vbCAtPiB0ID0gXCJjYW1sX2pzX2Zyb21fYm9vbFwiXG5cbmV4dGVybmFsIGZsb2F0X29mX2pzOiB0IC0+IGZsb2F0ID0gXCJjYW1sX2pzX3RvX2Zsb2F0XCJcbmV4dGVybmFsIGZsb2F0X3RvX2pzOiBmbG9hdCAtPiB0ID0gXCJjYW1sX2pzX2Zyb21fZmxvYXRcIlxuXG5leHRlcm5hbCBvYmo6IChzdHJpbmcgKiB0KSBhcnJheSAtPiB0ID0gXCJjYW1sX2pzX29iamVjdFwiXG5cbmV4dGVybmFsIHZhcmlhYmxlOiBzdHJpbmcgLT4gdCA9IFwiY2FtbF9qc192YXJcIlxuXG5leHRlcm5hbCBnZXQ6IHQgLT4gc3RyaW5nIC0+IHQgPSBcImNhbWxfanNfZ2V0XCJcbmV4dGVybmFsIHNldDogdCAtPiBzdHJpbmcgLT4gdCAtPiB1bml0ID0gXCJjYW1sX2pzX3NldFwiXG5leHRlcm5hbCBkZWxldGU6IHQgLT4gc3RyaW5nIC0+IHVuaXQgPSBcImNhbWxfanNfZGVsZXRlXCJcblxuZXh0ZXJuYWwgZ2V0X3Byb3A6IHQgLT4gdCAtPiB0ID0gXCJjYW1sX2pzX2dldFwiXG5leHRlcm5hbCBzZXRfcHJvcDogdCAtPiB0IC0+IHQgLT4gdW5pdCA9IFwiY2FtbF9qc19zZXRcIlxuZXh0ZXJuYWwgZGVsZXRlX3Byb3A6IHQgLT4gdCAtPiB1bml0ID0gXCJjYW1sX2pzX2RlbGV0ZVwiXG5cbmV4dGVybmFsIGdldF9wcm9wX2FzY2lpOiB0IC0+IHN0cmluZyAtPiB0ID0gXCJjYW1sX2pzX2dldFwiXG5leHRlcm5hbCBzZXRfcHJvcF9hc2NpaTogdCAtPiBzdHJpbmcgLT4gdCAtPiB1bml0ID0gXCJjYW1sX2pzX3NldFwiXG5leHRlcm5hbCBkZWxldGVfcHJvcF9hc2NpaTogdCAtPiBzdHJpbmcgLT4gdW5pdCA9IFwiY2FtbF9qc19kZWxldGVcIlxuXG5leHRlcm5hbCBpbnRlcm5hbF90eXBlX29mOiB0IC0+IHQgPSBcImNhbWxfanNfdHlwZW9mXCJcbmxldCB0eXBlX29mIHggPSBzdHJpbmdfb2ZfanMgKGludGVybmFsX3R5cGVfb2YgeClcblxuZXh0ZXJuYWwgaW50ZXJuYWxfaW5zdGFuY2Vfb2Y6IHQgLT4gdCAtPiB0ID0gXCJjYW1sX2pzX2luc3RhbmNlb2ZcIlxubGV0IGluc3RhbmNlX29mIHggfmNvbnN0ciA9IGJvb2xfb2ZfanMgKGludGVybmFsX2luc3RhbmNlX29mIHggY29uc3RyKVxuXG5leHRlcm5hbCBwdXJlX2pzX2V4cHI6IHN0cmluZyAtPiB0ID0gXCJjYW1sX3B1cmVfanNfZXhwclwiXG5sZXQgbnVsbCA9IHB1cmVfanNfZXhwciBcIm51bGxcIlxubGV0IHVuZGVmaW5lZCA9IHB1cmVfanNfZXhwciBcInVuZGVmaW5lZFwiXG5cbmV4dGVybmFsIGVxdWFsczogdCAtPiB0IC0+IGJvb2wgPSBcImNhbWxfanNfZXF1YWxzXCJcblxubGV0IGdsb2JhbCA9IHB1cmVfanNfZXhwciBcImpvb19nbG9iYWxfb2JqZWN0XCJcblxuZXh0ZXJuYWwgbmV3X29iajogdCAtPiB0IGFycmF5IC0+IHQgPSBcImNhbWxfanNfbmV3XCJcblxuZXh0ZXJuYWwgY2FsbDogdCAtPiBzdHJpbmcgLT4gdCBhcnJheSAtPiB0ID0gXCJjYW1sX2pzX21ldGhfY2FsbFwiXG5leHRlcm5hbCBhcHBseTogdCAtPiB0IGFycmF5IC0+IHQgPSBcImNhbWxfanNfZnVuX2NhbGxcIlxuXG5sZXQgYXJyYXlfbWFrZSBuID0gbmV3X29iaiAoZ2V0X3Byb3BfYXNjaWkgZ2xvYmFsIFwiQXJyYXlcIikgW3xpbnRfdG9fanMgbnxdXG5sZXQgYXJyYXlfZ2V0IHQgaSA9IGdldF9wcm9wIHQgKGludF90b19qcyBpKVxubGV0IGFycmF5X3NldCB0IGkgeCA9IHNldF9wcm9wIHQgKGludF90b19qcyBpKSB4XG5cbmxldCBhcnJheV9vZl9qc19mcm9tIGYgb2JqcyBzdGFydCA9XG4gIGxldCBuID0gaW50X29mX2pzIChnZXRfcHJvcF9hc2NpaSBvYmpzIFwibGVuZ3RoXCIpIGluXG4gIEFycmF5LmluaXQgKG4gLSBzdGFydCkgKGZ1biBpIC0+IGYgKGFycmF5X2dldCBvYmpzIChzdGFydCArIGkpKSlcblxubGV0IGFycmF5X29mX2pzIGYgb2JqcyA9IGFycmF5X29mX2pzX2Zyb20gZiBvYmpzIDBcblxubGV0IGFycmF5X3RvX2pzIGYgYXJyID1cbiAgbGV0IG4gPSBBcnJheS5sZW5ndGggYXJyIGluXG4gIGxldCBhID0gYXJyYXlfbWFrZSBuIGluXG4gIGZvciBpID0gMCB0byBuIC0gMSBkb1xuICAgIGFycmF5X3NldCBhIGkgKGYgYXJyLihpKSlcbiAgZG9uZTtcbiAgYVxuXG5sZXQgbGlzdF9vZl9qc19mcm9tIGYgb2JqcyBzdGFydCA9IEFycmF5LnRvX2xpc3QgKGFycmF5X29mX2pzX2Zyb20gZiBvYmpzIHN0YXJ0KVxuXG5sZXQgbGlzdF9vZl9qcyBmIG9ianMgPSBsaXN0X29mX2pzX2Zyb20gZiBvYmpzIDBcblxubGV0IGxpc3RfdG9fanMgZiBsID1cbiAgYXJyYXlfdG9fanMgZiAoQXJyYXkub2ZfbGlzdCBsKVxuXG5sZXQgb3B0aW9uX29mX2pzIGYgeCA9XG4gIGlmIGVxdWFscyB4IG51bGwgdGhlbiBOb25lXG4gIGVsc2UgU29tZSAoZiB4KVxuXG5sZXQgb3B0aW9uX3RvX2pzIGYgPSBmdW5jdGlvblxuICB8IFNvbWUgeCAtPiBmIHhcbiAgfCBOb25lIC0+IG51bGxcblxubGV0IHVuaXRfdG9fanMgKCkgPSB1bmRlZmluZWRcbmxldCB1bml0X29mX2pzIF8gPSAoKVxuXG5jbGFzcyBvYmogKHg6dCkgPVxuICBvYmplY3RcbiAgICBtZXRob2QgdG9fanMgPSB4XG4gIGVuZFxuXG5leHRlcm5hbCBmdW5fdG9fanM6IGludCAtPiAodCAtPiAnYSkgLT4gdCA9IFwiY2FtbF9qc193cmFwX2NhbGxiYWNrX3N0cmljdFwiXG5leHRlcm5hbCBmdW5fdG9fanNfYXJnczogKHQgLT4gJ2EpIC0+IHQgPSBcImNhbWxfb2pzX3dyYXBfZnVuX2FyZ3VtZW50c1wiXG5cbmxldCBoYXNfcHJvcGVydHkgbyB4ID1cbiAgdHlwZV9vZiBvID0gXCJvYmplY3RcIiAmJiBvICE9IG51bGxcbiAgJiYgZ2V0X3Byb3AgbyAoc3RyaW5nX3RvX2pzIHgpICE9IHVuZGVmaW5lZFxuXG5leHRlcm5hbCBuZXdfb2JqX2FycjogdCAtPiB0IC0+IHQgPSBcImNhbWxfb2pzX25ld19hcnJcIlxuXG5sZXQgZW1wdHlfb2JqICgpID0gbmV3X29iaiAoZ2V0X3Byb3BfYXNjaWkgZ2xvYmFsIFwiT2JqZWN0XCIpIFt8fF1cblxuZXh0ZXJuYWwgaXRlcl9wcm9wZXJ0aWVzX3VudHlwZWQgOiB0IC0+IHQgLT4gdW5pdCA9IFwiY2FtbF9vanNfaXRlcmF0ZV9wcm9wZXJ0aWVzXCJcbmxldCBpdGVyX3Byb3BlcnRpZXMgeCBmID1cbiAgaXRlcl9wcm9wZXJ0aWVzX3VudHlwZWQgeCAoZnVuX3RvX2pzIDEgKGZ1biB4IC0+IGYgKHN0cmluZ19vZl9qcyB4KSkpXG5cbmxldCBhcHBseV9hcnIgbyBhcnIgPSBjYWxsIG8gXCJhcHBseVwiIFt8IG51bGw7IGFyciB8XVxubGV0IGNhbGxfYXJyIG8gcyBhcnIgPSBjYWxsIChnZXRfcHJvcCBvIChzdHJpbmdfdG9fanMgcykpIFwiYXBwbHlcIiBbfCBvOyBhcnIgfF1cblxubGV0IGlzX251bGwgeCA9XG4gIGVxdWFscyB4IG51bGxcblxubGV0IG9ial90eXBlIHggPVxuICBzdHJpbmdfb2ZfanMgKGNhbGwgKHB1cmVfanNfZXhwciBcIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcIikgXCJjYWxsXCIgW3x4fF0pXG5cbm1vZHVsZSB0eXBlIFQgPSBzaWdcbiAgdHlwZSBqcyA6PSB0XG4gIHR5cGUgdFxuICB2YWwgdF90b19qcyA6IHQgLT4ganNcbiAgdmFsIHRfb2ZfanMgOiBqcyAtPiB0XG5lbmRcblxuKCogT2pzLlQgaW5zdGFuY2VzIGZvciBidWlsdC1pbiB0eXBlcyAqKVxubW9kdWxlIEludCA9IHN0cnVjdFxuICB0eXBlIHQgPSBpbnRcbiAgbGV0IHRfdG9fanMgPSBpbnRfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBpbnRfb2ZfanNcbiBlbmRcbm1vZHVsZSBTdHJpbmcgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gc3RyaW5nXG4gIGxldCB0X3RvX2pzID0gc3RyaW5nX3RvX2pzXG4gIGxldCB0X29mX2pzID0gc3RyaW5nX29mX2pzXG5lbmRcbm1vZHVsZSBCb29sID0gc3RydWN0XG4gIHR5cGUgdCA9IGJvb2xcbiAgbGV0IHRfdG9fanMgPSBib29sX3RvX2pzXG4gIGxldCB0X29mX2pzID0gYm9vbF9vZl9qc1xuZW5kXG5tb2R1bGUgRmxvYXQgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gZmxvYXRcbiAgbGV0IHRfdG9fanMgPSBmbG9hdF90b19qc1xuICBsZXQgdF9vZl9qcyA9IGZsb2F0X29mX2pzXG5lbmRcbm1vZHVsZSBBcnJheSAoQTogVCkgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gQS50IGFycmF5XG4gIGxldCB0X3RvX2pzID0gYXJyYXlfdG9fanMgQS50X3RvX2pzXG4gIGxldCB0X29mX2pzID0gYXJyYXlfb2ZfanMgQS50X29mX2pzXG5lbmRcbm1vZHVsZSBMaXN0IChBOiBUKSA9IHN0cnVjdFxuICB0eXBlIHQgPSBBLnQgbGlzdFxuICBsZXQgdF90b19qcyA9IGxpc3RfdG9fanMgQS50X3RvX2pzXG4gIGxldCB0X29mX2pzID0gbGlzdF9vZl9qcyBBLnRfb2ZfanNcbmVuZFxubW9kdWxlIE9wdGlvbiAoQTogVCkgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gQS50IG9wdGlvblxuICBsZXQgdF90b19qcyA9IG9wdGlvbl90b19qcyBBLnRfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBvcHRpb25fb2ZfanMgQS50X29mX2pzXG5lbmRcbiIsIigqIFRoZSBnZW5fanNfYXBpIGlzIHJlbGVhc2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiBhbiBNSVQtbGlrZSBsaWNlbnNlLiAgICAgKilcbigqIFNlZSB0aGUgYXR0YWNoZWQgTElDRU5TRSBmaWxlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcbigqIENvcHlyaWdodCAyMDE1IGJ5IExleGlGaS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKilcblxudHlwZSB0ID0gSnNvb19ydW50aW1lLkVycm9yLnRcblxuZXh0ZXJuYWwgY29lcmNlIDogdCAtPiBPanMudCA9IFwiJWlkZW50aXR5XCJcbmxldCBuYW1lIHggPSBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKGNvZXJjZSB4KSBcIm5hbWVcIilcbmxldCBtZXNzYWdlIHggPSBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKGNvZXJjZSB4KSBcIm1lc3NhZ2VcIilcbmxldCBzdGFjayB4ID0gT2pzLm9wdGlvbl9vZl9qcyBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKGNvZXJjZSB4KSBcInN0YWNrXCIpXG5sZXQgdG9fc3RyaW5nIHggPSBPanMuc3RyaW5nX29mX2pzIChPanMuY2FsbCAoY29lcmNlIHgpIFwidG9TdHJpbmdcIiBbfHxdKVxuXG5leGNlcHRpb24gRXJyb3IgPSBKc29vX3J1bnRpbWUuRXJyb3IuRXhuXG5cbmxldCAoKSA9XG4gIFByaW50ZXhjLnJlZ2lzdGVyX3ByaW50ZXIgKGZ1bmN0aW9uXG4gICAgICB8IEVycm9yIHggLT4gU29tZSAodG9fc3RyaW5nIHgpXG4gICAgICB8IF8gLT4gTm9uZVxuICAgIClcbiJdfQ==
