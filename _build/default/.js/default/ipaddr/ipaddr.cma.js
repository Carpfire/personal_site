// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ipaddr
//# unitInfo: Requires: Domain_name, Macaddr, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__Int32, Stdlib__List, Stdlib__Map, Stdlib__Printf, Stdlib__Result, Stdlib__Set, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_a_d = "%a/%d",
    cst_s = "%s",
    cst_x = "%x",
    cst$0 = "::",
    cst_Ipaddr$3 = "Ipaddr: ",
    cst_Ipaddr_highest_address_has =
      "Ipaddr: highest address has been reached",
    cst_Ipaddr_lowest_address_has_ = "Ipaddr: lowest address has been reached",
    cst_admin$0 = "admin",
    cst_arpa$1 = "arpa",
    cst_global$0 = "global",
    cst_in_addr$0 = "in-addr",
    cst_interface$0 = "interface",
    cst_invalid_netmask$1 = "invalid netmask",
    cst_invalid_prefix_size$1 = "invalid prefix size",
    cst_ip6$0 = "ip6",
    cst_lib_ipaddr_ml = "lib/ipaddr.ml",
    cst_link$0 = "link",
    cst_n_must_be_0_128$1 = "n must be >= 0 && <= 128",
    cst_octal_notation_disallowed = "octal notation disallowed",
    cst_organization$0 = "organization",
    cst_out_of_bounds$1 = "out of bounds",
    cst_point$0 = "point",
    cst_site$0 = "site",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Result = global_data.Stdlib__Result,
    Domain_name = global_data.Domain_name,
    Stdlib = global_data.Stdlib,
    Macaddr = global_data.Macaddr,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Map = global_data.Stdlib__Map,
    Parse_error = [248, "Ipaddr.Parse_error", caml_fresh_oo_id(0)],
    _M_ = [0, [2, 0, 0], cst_s],
    _L_ =
      [0,
       [11,
        "not an IPv4 prefix: ",
        [2, 0, [11, "\nnot an IPv6 prefix: ", [2, 0, 0]]]],
       "not an IPv4 prefix: %s\nnot an IPv6 prefix: %s"],
    cst_octets_must_be_of_length_4 = "octets must be of length 4 or 16",
    cst_Ipaddr$2 = cst_Ipaddr$3,
    _K_ =
      [0,
       [11,
        "not an IPv4 address: ",
        [2, 0, [11, "\nnot an IPv6 address: ", [2, 0, 0]]]],
       "not an IPv4 address: %s\nnot an IPv6 address: %s"],
    _J_ = [0, [2, 0, 0], cst_s],
    _I_ = [0, cst_lib_ipaddr_ml, 1117, 13],
    _H_ = [0, [2, 0, 0], cst_s],
    _G_ = [0, [15, [12, 47, [4, 0, 0, 0, 0]]], cst_a_d],
    cst_invalid_netmask$0 = cst_invalid_netmask$1,
    _F_ = [0, 0, 1],
    cst_invalid_prefix_size$0 = cst_invalid_prefix_size$1,
    cst_int_of_char_string_invalid =
      "int_of_char_string: invalid hexadecimal string",
    cst_arpa$0 = cst_arpa$1,
    cst_ip6 = cst_ip6$0,
    _D_ = [0, [4, 6, 0, 0, 0], cst_x],
    _E_ = [0, cst_ip6$0, [0, cst_arpa$1, 0]],
    _C_ = [0, [2, 0, 0], cst_s],
    _x_ = [0, 0],
    _z_ = [0, [4, 6, 0, 0, [11, cst$0, 0]], "%x::"],
    _A_ = [0, [4, 6, 0, 0, 0], cst_x],
    _y_ = [0, [4, 6, 0, 0, [12, 58, 0]], "%x:"],
    _B_ = [0, cst_lib_ipaddr_ml, 844, 4],
    cst_Ipaddr$1 = cst_Ipaddr$3,
    _w_ =
      [0,
       [11, "component ", [4, 0, 0, 0, [11, " out of bounds", 0]]],
       "component %d out of bounds"],
    _v_ = [0, -1, 0],
    cst_too_many_components = "too many components",
    _u_ = [1, [0, 3854881, cst_Ipaddr_lowest_address_has_]],
    _t_ = [1, [0, 3854881, cst_Ipaddr_highest_address_has]],
    _s_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 0)],
    cst_larger_including_offset_th =
      "larger including offset than target bytes",
    cst_n_must_be_0_128$0 = cst_n_must_be_0_128$1,
    cst_n_must_be_0_128 = cst_n_must_be_0_128$1,
    cst_n_must_be_0_8 = "n must be >= 0 && <= 8",
    cst_out_of_bounds$0 = cst_out_of_bounds$1,
    cst_out_of_bounds = cst_out_of_bounds$1,
    cst_not_16_bytes_long = "not 16 bytes long",
    _q_ = [0, [2, 0, 0], cst_s],
    _p_ = [0, [15, [12, 47, [4, 0, 0, 0, 0]]], cst_a_d],
    cst_invalid_netmask = cst_invalid_netmask$1,
    cst_invalid_prefix_size = cst_invalid_prefix_size$1,
    _o_ = [1, [0, 3854881, cst_Ipaddr_lowest_address_has_]],
    _n_ = [1, [0, 3854881, cst_Ipaddr_highest_address_has]],
    cst_label_with_a_too_big_numbe = "label with a too big number",
    cst_arpa = cst_arpa$1,
    cst_in_addr = cst_in_addr$0,
    _m_ = [0, cst_in_addr$0, [0, cst_arpa$1, 0]],
    _l_ = [0, cst_lib_ipaddr_ml, 202, 13],
    _k_ = [0, [2, 0, 0], cst_s],
    _j_ =
      [0,
       [5,
        0,
        0,
        0,
        [12,
         46,
         [5, 0, 0, 0, [12, 46, [5, 0, 0, 0, [12, 46, [5, 0, 0, 0, 0]]]]]]],
       "%ld.%ld.%ld.%ld"],
    cst_Ipaddr$0 = cst_Ipaddr$3,
    cst_first_octet_out_of_bounds = "first octet out of bounds",
    cst_second_octet_out_of_bounds = "second octet out of bounds",
    cst_third_octet_out_of_bounds = "third octet out of bounds",
    cst_fourth_octet_out_of_bounds = "fourth octet out of bounds",
    _i_ =
      [0,
       [11, cst_octal_notation_disallowed, 0],
       cst_octal_notation_disallowed],
    _h_ =
      [0,
       [11, "invalid character '", [0, [11, "' at ", [4, 0, 0, 0, 0]]]],
       "invalid character '%c' at %d"],
    cst_not_enough_data = "not enough data",
    _a_ = [0, 4],
    _b_ = [0, 0],
    _c_ = [0, 5],
    _d_ = [0, 2],
    _e_ = [0, 1],
    _f_ = [0, 6],
    _g_ = [0, 3],
    cst_unknown_scope = "unknown scope: ",
    cst_point = cst_point$0,
    cst_interface = cst_interface$0,
    cst_link = cst_link$0,
    cst_admin = cst_admin$0,
    cst_site = cst_site$0,
    cst_organization = cst_organization$0,
    cst_global = cst_global$0,
    cst_Ipaddr = cst_Ipaddr$3,
    cst_Ipaddr_S128_Overflow = "Ipaddr.S128.Overflow";
   function try_with_result(fn, a){
    try{var _cB_ = [0, caml_call1(fn, a)]; return _cB_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [1, [0, 3854881, caml_call2(Stdlib[28], cst_Ipaddr, msg)]];
    }
   }
   function failwith_msg(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var m = param[1][2];
    return caml_call1(Stdlib[2], m);
   }
   function string_of_scope(param){
    switch(param){
      case 0:
       return cst_point;
      case 1:
       return cst_interface;
      case 2:
       return cst_link;
      case 3:
       return cst_admin;
      case 4:
       return cst_site;
      case 5:
       return cst_organization;
      default: return cst_global;
    }
   }
   function scope_of_string(s){
    return caml_string_notequal(s, cst_admin$0)
            ? caml_string_notequal
               (s, cst_global$0)
              ? caml_string_notequal
                 (s, cst_interface$0)
                ? caml_string_notequal
                   (s, cst_link$0)
                  ? caml_string_notequal
                     (s, cst_organization$0)
                    ? caml_string_notequal
                       (s, cst_point$0)
                      ? caml_string_notequal
                         (s, cst_site$0)
                        ? [1,
                          [0, 3854881, caml_call2(Stdlib[28], cst_unknown_scope, s)]]
                        : _a_
                      : _b_
                    : _c_
                  : _d_
                : _e_
              : _f_
            : _g_;
   }
   function pp_scope(fmt, s){
    var _cA_ = string_of_scope(s);
    return caml_call2(Stdlib_Format[13], fmt, _cA_);
   }
   function symbol(x, y){return (x >>> y | 0) & 255;}
   function symbol$0(x, y){return (x & 255) << y;}
   function need_more(x){return [0, Parse_error, cst_not_enough_data, x];}
   function int_of_char(c){
    if(65 <= c){
     if(97 <= c){
      if(103 > c) return (10 + c | 0) - 97 | 0;
     }
     else if(71 > c) return (10 + c | 0) - 65 | 0;
    }
    else if(9 >= c - 48 >>> 0) return c - 48 | 0;
    return -1;
   }
   function bad_char(i, s){
    var
     _cz_ = caml_string_get(s, i),
     msg = caml_call3(Stdlib_Printf[4], _h_, _cz_, i);
    return [0, Parse_error, msg, s];
   }
   function is_number(base, n){
    var _cx_ = 0 <= n ? 1 : 0, _cy_ = _cx_ ? n < base ? 1 : 0 : _cx_;
    return _cy_;
   }
   function parse_int(base, s, i){
    var len = caml_ml_string_length(s), i$0 = i[1];
    if(i$0 >= len) throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(! is_number(base, int_of_char(caml_string_get(s, i$0))))
     throw caml_maybe_attach_backtrace(bad_char(i$0, s), 1);
    var prev = 0;
    for(;;){
     var j = i[1];
     if(len <= j) return prev;
     var c = caml_string_get(s, j), k = int_of_char(c);
     if(! is_number(base, k)) return prev;
     i[1]++;
     var prev$0 = runtime.caml_mul(prev, base) + k | 0, prev = prev$0;
    }
   }
   function parse_dec_int(s, i){return parse_int(10, s, i);}
   function expect_char(s, i, c){
    if(i[1] >= caml_ml_string_length(s))
     throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(caml_string_get(s, i[1]) !== c)
     throw caml_maybe_attach_backtrace(bad_char(i[1], s), 1);
    i[1]++;
    return;
   }
   function expect_end(s, i){
    if(caml_ml_string_length(s) <= i[1]) return;
    throw caml_maybe_attach_backtrace(bad_char(i[1], s), 1);
   }
   function reject_octal(s, i){
    if((i[1] + 1 | 0) < caml_ml_string_length(s)){
     var
      _cv_ = 48 === caml_string_get(s, i[1]) ? 1 : 0,
      _cw_ =
        _cv_
         ? is_number(10, int_of_char(caml_string_get(s, i[1] + 1 | 0)))
         : _cv_;
     if(_cw_){
      var msg = caml_call1(Stdlib_Printf[4], _i_);
      throw caml_maybe_attach_backtrace([0, Parse_error, msg, s], 1);
     }
    }
    return;
   }
   var compare = Stdlib_Int32[16];
   function make(a, b, c, d){
    var
     _cs_ = symbol$0(d, 0),
     _ct_ = symbol$0(c, 8) | _cs_,
     _cu_ = symbol$0(b, 16);
    return symbol$0(a, 24) | _cu_ | _ct_;
   }
   function parse_dotted_quad(s, i){
    reject_octal(s, i);
    var a = parse_dec_int(s, i);
    expect_char(s, i, 46);
    reject_octal(s, i);
    var b = parse_dec_int(s, i);
    expect_char(s, i, 46);
    reject_octal(s, i);
    var c = parse_dec_int(s, i);
    expect_char(s, i, 46);
    reject_octal(s, i);
    var d = parse_dec_int(s, i);
    function valid(a){return (a & 255) !== a ? 1 : 0;}
    if(valid(a))
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_first_octet_out_of_bounds, s], 1);
    if(valid(b))
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_second_octet_out_of_bounds, s], 1);
    if(valid(c))
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_third_octet_out_of_bounds, s], 1);
    if(valid(d))
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_fourth_octet_out_of_bounds, s], 1);
    return make(a, b, c, d);
   }
   function of_string_exn(s){
    var o = [0, 0], x = parse_dotted_quad(s, o);
    expect_end(s, o);
    return x;
   }
   function of_string(s){return try_with_result(of_string_exn, s);}
   function with_port_of_string(default$0, s){
    try{
     var
      len = caml_ml_string_length(s),
      o = [0, 0],
      ipv4 = parse_dotted_quad(s, o);
     a:
     {
      if(o[1] < len && 58 === caml_string_get(s, o[1])){
       o[1]++;
       var port = parse_dec_int(s, o);
       expect_end(s, o);
       var _cr_ = [0, [0, ipv4, port]];
       break a;
      }
      expect_end(s, o);
      var _cr_ = [0, [0, ipv4, default$0]];
     }
     return _cr_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [1, [0, 3854881, caml_call2(Stdlib[28], cst_Ipaddr$0, msg)]];
    }
   }
   function to_buffer(b, i){
    var
     _cn_ = symbol(i, 0),
     _co_ = symbol(i, 8),
     _cp_ = symbol(i, 16),
     _cq_ = symbol(i, 24);
    return caml_call6(Stdlib_Printf[5], b, _j_, _cq_, _cp_, _co_, _cn_);
   }
   function to_string(i){
    var b = caml_call1(Stdlib_Buffer[1], 15);
    to_buffer(b, i);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function pp(ppf, i){
    var _cm_ = to_string(i);
    return caml_call3(Stdlib_Format[137], ppf, _k_, _cm_);
   }
   function of_octets_exn(opt, bs){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    try{
     var
      _ch_ = caml_string_get(bs, 3 + off | 0),
      _ci_ = caml_string_get(bs, 2 + off | 0),
      _cj_ = caml_string_get(bs, 1 + off | 0),
      _ck_ = make(caml_string_get(bs, off | 0), _cj_, _ci_, _ch_);
     return _ck_;
    }
    catch(_cl_){throw caml_maybe_attach_backtrace(need_more(bs), 1);}
   }
   function of_octets(off, bs){
    return try_with_result
            (function(_cg_){return of_octets_exn(off, _cg_);}, bs);
   }
   function write_octets_exn(opt, i, b){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    try{
     var _ca_ = symbol(i, 24);
     caml_bytes_set(b, off | 0, caml_call1(Stdlib_Char[1], _ca_));
     var _cb_ = symbol(i, 16);
     caml_bytes_set(b, 1 + off | 0, caml_call1(Stdlib_Char[1], _cb_));
     var _cc_ = symbol(i, 8);
     caml_bytes_set(b, 2 + off | 0, caml_call1(Stdlib_Char[1], _cc_));
     var
      _cd_ = symbol(i, 0),
      _ce_ = caml_bytes_set(b, 3 + off | 0, caml_call1(Stdlib_Char[1], _cd_));
     return _ce_;
    }
    catch(_cf_){
     throw caml_maybe_attach_backtrace
            (need_more(caml_call1(Stdlib_Bytes[6], b)), 1);
    }
   }
   function write_octets(off, i, bs){
    return try_with_result
            (function(_b$_){return write_octets_exn(off, i, _b$_);}, bs);
   }
   function to_octets(i){
    function _b6_(param){
     if(3 < param >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     switch(param){
       case 0:
        var _b7_ = symbol(i, 24); return caml_call1(Stdlib_Char[1], _b7_);
       case 1:
        var _b8_ = symbol(i, 16); return caml_call1(Stdlib_Char[1], _b8_);
       case 2:
        var _b9_ = symbol(i, 8); return caml_call1(Stdlib_Char[1], _b9_);
       default:
        var _b__ = symbol(i, 0); return caml_call1(Stdlib_Char[1], _b__);
     }
    }
    return caml_call2(Stdlib_String[2], 4, _b6_);
   }
   function of_int32(i){return i;}
   function to_int32(i){return i;}
   function of_int16(param){
    var b = param[2], a = param[1];
    return a << 16 | b;
   }
   function to_int16(a){return [0, a >>> 16 | 0, a & 65535];}
   function multicast_to_mac(i){
    var macb = caml_create_bytes(6);
    caml_bytes_set(macb, 0, caml_call1(Stdlib_Char[1], 1));
    caml_bytes_set(macb, 1, caml_call1(Stdlib_Char[1], 0));
    caml_bytes_set(macb, 2, caml_call1(Stdlib_Char[1], 94));
    caml_bytes_set(macb, 3, caml_call1(Stdlib_Char[1], (i >>> 16 | 0) & 127));
    var _b3_ = symbol(i, 8);
    caml_bytes_set(macb, 4, caml_call1(Stdlib_Char[1], _b3_));
    var _b4_ = symbol(i, 0);
    caml_bytes_set(macb, 5, caml_call1(Stdlib_Char[1], _b4_));
    var _b5_ = caml_call1(Stdlib_Bytes[6], macb);
    return caml_call1(Macaddr[2], _b5_);
   }
   function to_domain_name(i){
    var
     _bV_ = symbol(i, 24),
     _bW_ = [0, caml_call1(Stdlib_Int32[14], _bV_), _m_],
     _bX_ = symbol(i, 16),
     _bY_ = [0, caml_call1(Stdlib_Int32[14], _bX_), _bW_],
     _bZ_ = symbol(i, 8),
     _b0_ = [0, caml_call1(Stdlib_Int32[14], _bZ_), _bY_],
     _b1_ = symbol(i, 0),
     name = [0, caml_call1(Stdlib_Int32[14], _b1_), _b0_],
     _b2_ = caml_call1(Domain_name[34], name);
    return caml_call1(Domain_name[7], _b2_);
   }
   function of_domain_name(n){
    var match = caml_call2(Domain_name[35], 0, n);
    if(match){
     var _bK_ = match[2];
     if(_bK_){
      var _bL_ = _bK_[2];
      if(_bL_){
       var _bM_ = _bL_[2];
       if(_bM_){
        var _bN_ = _bM_[2];
        if(_bN_){
         var _bO_ = _bN_[2];
         if(_bO_ && ! _bO_[2]){
          var
           arpa = _bO_[1],
           in_addr = _bN_[1],
           d = _bM_[1],
           c = _bL_[1],
           b = _bK_[1],
           a = match[1];
          if
           (caml_call3(Domain_name[25], 0, arpa, cst_arpa)
            && caml_call3(Domain_name[25], 0, in_addr, cst_in_addr)){
           var
            conv =
              function(bits, data){
               var i = parse_dec_int(data, [0, 0]);
               if(runtime.caml_greaterthan(i, 255))
                throw caml_maybe_attach_backtrace
                       ([0, Parse_error, cst_label_with_a_too_big_numbe, data], 1);
               return symbol$0(i, bits);
              };
           try{
            var
             _bQ_ = conv(24, d),
             _bR_ = conv(16, c),
             _bS_ = conv(8, b),
             _bT_ = [0, ((conv(0, a) + _bS_ | 0) + _bR_ | 0) + _bQ_ | 0];
            return _bT_;
           }
           catch(_bU_){
            var _bP_ = caml_wrap_exception(_bU_);
            if(_bP_[1] === Parse_error) return 0;
            throw caml_maybe_attach_backtrace(_bP_, 0);
           }
          }
         }
        }
       }
      }
     }
    }
    return 0;
   }
   function succ(t){
    return caml_call2(Stdlib_Int32[17], t, -1)
            ? _n_
            : [0, caml_call1(Stdlib_Int32[6], t)];
   }
   function pred(t){
    return caml_call2(Stdlib_Int32[17], t, 0)
            ? _o_
            : [0, caml_call1(Stdlib_Int32[7], t)];
   }
   var
    any = make(0, 0, 0, 0),
    unspecified = make(0, 0, 0, 0),
    broadcast = make(255, 255, 255, 255),
    localhost = make(127, 0, 0, 1),
    nodes = make(224, 0, 0, 1),
    routers = make(224, 0, 0, 2);
   function compare$0(param, _bJ_){
    var
     sz = _bJ_[2],
     pre = _bJ_[1],
     sz$0 = param[2],
     pre$0 = param[1],
     c = caml_call2(compare, pre$0, pre);
    return 0 === c ? caml_compare(sz$0, sz) : c;
   }
   function mask(sz){return 0 < sz ? 32 <= sz ? -1 : -1 << (32 - sz | 0) : 0;}
   function prefix(param){
    var sz = param[2], pre = param[1];
    return [0, pre & mask(sz), sz];
   }
   function make$0(sz, pre){return [0, pre, sz];}
   function network_address(param, addr){
    var
     sz = param[2],
     pre = param[1],
     _bH_ = mask(sz),
     _bI_ = addr & caml_call1(Stdlib_Int32[11], _bH_);
    return pre & mask(sz) | _bI_;
   }
   function of_string_raw(s, i){
    var quad = parse_dotted_quad(s, i);
    expect_char(s, i, 47);
    var
     p = parse_dec_int(s, i),
     _bF_ = 32 < p ? 1 : 0,
     _bG_ = _bF_ || (p < 0 ? 1 : 0);
    if(_bG_)
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_invalid_prefix_size, s], 1);
    return [0, p, quad];
   }
   function of_string_raw$0(s, i){
    var match = of_string_raw(s, i), quad = match[2], p = match[1];
    return [0, quad, p];
   }
   function of_string_exn$0(s){
    var i = [0, 0], res = of_string_raw(s, i);
    expect_end(s, i);
    var quad = res[2], p = res[1];
    return [0, quad, p];
   }
   function of_string$0(s){return try_with_result(of_string_exn$0, s);}
   function of_netmask_exn(netmask, address){
    var
     bits$1 = netmask & (- netmask | 0),
     i$1 = caml_equal(bits$1, 0) ? 33 : 0,
     bits = bits$1,
     i = i$1;
    for(;;){
     if(caml_equal(bits, 0)){
      var sz = 32 - (i - 1 | 0) | 0;
      if(runtime.caml_notequal(netmask, mask(sz)))
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, cst_invalid_netmask, to_string(netmask)], 1);
      return [0, address, sz];
     }
     var i$0 = i + 1 | 0, bits$0 = bits >>> 1 | 0, bits = bits$0, i = i$0;
    }
   }
   function of_netmask_exn$0(netmask, address){return of_netmask_exn(netmask, address);
   }
   function of_netmask(netmask, address){
    return try_with_result
            (function(_bE_){return of_netmask_exn(netmask, _bE_);}, address);
   }
   function to_buffer$0(buf, param){
    var sz = param[2], pre = param[1];
    return caml_call5(Stdlib_Printf[5], buf, _p_, to_buffer, pre, sz);
   }
   function to_string$0(subnet){
    var b = caml_call1(Stdlib_Buffer[1], 18);
    to_buffer$0(b, subnet);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function pp$0(ppf, i){
    var _bD_ = to_string$0(i);
    return caml_call3(Stdlib_Format[137], ppf, _q_, _bD_);
   }
   function mem(ip, param){
    var sz = param[2], pre = param[1], m = mask(sz);
    return caml_equal(ip & m, pre & m);
   }
   function subset(param, _bB_){
    var
     sz2 = _bB_[2],
     pre2 = _bB_[1],
     sz1 = param[2],
     pre1 = param[1],
     _bC_ = sz2 <= sz1 ? 1 : 0;
    return _bC_ ? mem(pre1, [0, pre2, sz2]) : _bC_;
   }
   function of_addr(ip){return [0, ip, 32];}
   var
    global = [0, make(0, 0, 0, 0), 0],
    relative = [0, make(0, 0, 0, 0), 8],
    loopback = [0, make(127, 0, 0, 0), 8],
    link = [0, make(169, 254, 0, 0), 16],
    multicast = [0, make(224, 0, 0, 0), 4],
    multicast_org = [0, make(239, 192, 0, 0), 14],
    multicast_admin = [0, make(239, 255, 0, 0), 16],
    multicast_link = [0, make(224, 0, 0, 0), 24],
    private_10 = [0, make(10, 0, 0, 0), 8],
    private_172 = [0, make(172, 16, 0, 0), 12],
    private_192 = [0, make(192, 168, 0, 0), 16],
    private_blocks =
      [0,
       loopback,
       [0, link, [0, private_10, [0, private_172, [0, private_192, 0]]]]];
   function broadcast$0(param){
    var sz = param[2], pre = param[1];
    return pre | mask(sz) ^ -1;
   }
   function network(param){
    var sz = param[2], pre = param[1];
    return pre & mask(sz);
   }
   function address(param){var addr = param[1]; return addr;}
   function bits(param){var sz = param[2]; return sz;}
   function netmask(subnet){return mask(subnet[2]);}
   function first(cidr){
    var sz = cidr[2];
    return 30 < sz ? network(cidr) : failwith_msg(succ(network(cidr)));
   }
   function last(cidr){
    var sz = cidr[2];
    return 30 < sz ? broadcast$0(cidr) : failwith_msg(pred(broadcast$0(cidr)));
   }
   function hosts(opt, cidr){
    var sz = cidr[2];
    if(opt) var sth = opt[1], usable = sth; else var usable = 1;
    function iter_seq(start, stop){
     if(0 < compare$0([0, start, 32], [0, stop, 32])) return 0;
     var match = succ(start);
     if(0 !== match[0]) return [0, start, function(param){return 0;}];
     var start_succ = match[1];
     return [0, start, function(param){return iter_seq(start_succ, stop);}];
    }
    if(usable && 32 === sz) return function(param){return 0;};
    if(usable)
     var stop = last(cidr), stop$0 = stop, start = first(cidr);
    else
     var
      stop$1 = broadcast$0(cidr),
      start$0 = network(cidr),
      stop$0 = stop$1,
      start = start$0;
    return function(param){return iter_seq(start, stop$0);};
   }
   function subnets(n, cidr){
    var sz = cidr[2];
    function iter_seq(start, stop, steps){
     if(0 < compare$0([0, start, 32], [0, stop, 32])) return 0;
     var prefix = [0, start, n], start_succ = start + steps | 0;
     return caml_equal(start_succ, 0)
             ? [0, prefix, function(param){return 0;}]
             : [0,
               prefix,
               function(param){return iter_seq(start_succ, stop, steps);}];
    }
    if(n >= sz && 32 >= n){
     var
      start = network(cidr),
      stop = broadcast$0(cidr),
      steps = ((netmask(cidr) ^ -1) + 1 | 0) >>> (n - sz | 0) | 0;
     return function(param){return iter_seq(start, stop, steps);};
    }
    return function(param){return 0;};
   }
   function scope(i){
    function mem$0(_bA_){return mem(i, _bA_);}
    return mem$0(loopback)
            ? 1
            : mem$0
               (link)
              ? 2
              : caml_call2
                 (Stdlib_List[34], mem$0, private_blocks)
                ? 5
                : caml_equal
                   (i, unspecified)
                  ? 0
                  : caml_equal
                     (i, broadcast)
                    ? 3
                    : mem$0
                       (relative)
                      ? 3
                      : mem$0
                         (multicast)
                        ? mem$0
                           (multicast_org)
                          ? 5
                          : mem$0(multicast_admin) ? 3 : mem$0(multicast_link) ? 2 : 6
                        : 6;
   }
   function is_global(i){return 6 === scope(i) ? 1 : 0;}
   function is_multicast(i){return mem(i, multicast);}
   function is_private(i){return 6 !== scope(i) ? 1 : 0;}
   function compare$1(a, b){return caml_call2(compare, a, b);}
   var Set = caml_call1(Stdlib_Set[1], [0, compare$1]);
   function compare$2(a, b){return caml_call2(compare, a, b);}
   var
    Map = caml_call1(Stdlib_Map[1], [0, compare$2]),
    Overflow = [248, cst_Ipaddr_S128_Overflow, caml_fresh_oo_id(0)];
   function mk_zero(param){return caml_call2(Stdlib_Bytes[1], 16, 0);}
   var
    _r_ = mk_zero(0),
    zero = caml_call1(Stdlib_Bytes[44], _r_),
    max_int = caml_call2(Stdlib_String[1], 16, 255),
    compare$3 = Stdlib_String[10],
    equal = Stdlib_String[9];
   function fold_left(f, init, s){
    var a = [0, init], i = 0;
    for(;;){
     var _by_ = caml_string_get(s, i);
     a[1] = caml_call2(f, a[1], _by_);
     var _bz_ = i + 1 | 0;
     if(15 === i) return a[1];
     var i = _bz_;
    }
   }
   function iteri_right2(f, x, y){
    var i = 15;
    for(;;){
     var x$0 = caml_string_get(x, i), y$0 = caml_string_get(y, i);
     caml_call3(f, i, x$0, y$0);
     var _bx_ = i - 1 | 0;
     if(0 === i) return;
     var i = _bx_;
    }
   }
   function of_octets_exn$0(s){
    if(16 !== caml_ml_string_length(s))
     caml_call1(Stdlib[1], cst_not_16_bytes_long);
    return s;
   }
   function to_octets$0(_bw_){return _bw_;}
   function of_int64(param){
    var b = param[2], a = param[1], b$0 = mk_zero(0);
    caml_call3(Stdlib_Bytes[85], b$0, 0, a);
    caml_call3(Stdlib_Bytes[85], b$0, 8, b);
    return caml_call1(Stdlib_Bytes[44], b$0);
   }
   function to_int64(s){
    var
     b = caml_call1(Stdlib_Bytes[45], s),
     _bv_ = caml_call2(Stdlib_Bytes[71], b, 8);
    return [0, caml_call2(Stdlib_Bytes[71], b, 0), _bv_];
   }
   function of_int32$0(param){
    var
     d = param[4],
     c = param[3],
     b = param[2],
     a = param[1],
     b$0 = mk_zero(0);
    caml_call3(Stdlib_Bytes[82], b$0, 0, a);
    caml_call3(Stdlib_Bytes[82], b$0, 4, b);
    caml_call3(Stdlib_Bytes[82], b$0, 8, c);
    caml_call3(Stdlib_Bytes[82], b$0, 12, d);
    return caml_call1(Stdlib_Bytes[44], b$0);
   }
   function to_int32$0(s){
    var
     b = caml_call1(Stdlib_Bytes[45], s),
     _bs_ = caml_call2(Stdlib_Bytes[68], b, 12),
     _bt_ = caml_call2(Stdlib_Bytes[68], b, 8),
     _bu_ = caml_call2(Stdlib_Bytes[68], b, 4);
    return [0, caml_call2(Stdlib_Bytes[68], b, 0), _bu_, _bt_, _bs_];
   }
   function of_int16$0(param){
    var
     h = param[8],
     g = param[7],
     f = param[6],
     e = param[5],
     d = param[4],
     c = param[3],
     b = param[2],
     a = param[1],
     b$0 = mk_zero(0);
    caml_call3(Stdlib_Bytes[76], b$0, 0, a);
    caml_call3(Stdlib_Bytes[76], b$0, 2, b);
    caml_call3(Stdlib_Bytes[76], b$0, 4, c);
    caml_call3(Stdlib_Bytes[76], b$0, 6, d);
    caml_call3(Stdlib_Bytes[76], b$0, 8, e);
    caml_call3(Stdlib_Bytes[76], b$0, 10, f);
    caml_call3(Stdlib_Bytes[76], b$0, 12, g);
    caml_call3(Stdlib_Bytes[76], b$0, 14, h);
    return caml_call1(Stdlib_Bytes[44], b$0);
   }
   function to_int16$0(s){
    var
     b = caml_call1(Stdlib_Bytes[45], s),
     _bl_ = caml_call2(Stdlib_Bytes[62], b, 14),
     _bm_ = caml_call2(Stdlib_Bytes[62], b, 12),
     _bn_ = caml_call2(Stdlib_Bytes[62], b, 10),
     _bo_ = caml_call2(Stdlib_Bytes[62], b, 8),
     _bp_ = caml_call2(Stdlib_Bytes[62], b, 6),
     _bq_ = caml_call2(Stdlib_Bytes[62], b, 4),
     _br_ = caml_call2(Stdlib_Bytes[62], b, 2);
    return [0,
            caml_call2(Stdlib_Bytes[62], b, 0),
            _br_,
            _bq_,
            _bp_,
            _bo_,
            _bn_,
            _bm_,
            _bl_];
   }
   function add_exn(x, y){
    var b = mk_zero(0), carry = [0, 0];
    iteri_right2
     (function(i, x, y){
       var sum = (x + y | 0) + carry[1] | 0;
       return 256 <= sum
               ? (carry
                  [1]
                 = 1,
                 caml_call3(Stdlib_Bytes[73], b, i, sum - 256 | 0))
               : (carry[1] = 0, caml_call3(Stdlib_Bytes[73], b, i, sum));
      },
      x,
      y);
    if(0 === carry[1]) return caml_call1(Stdlib_Bytes[44], b);
    throw caml_maybe_attach_backtrace(Overflow, 1);
   }
   function logand(x, y){
    var b = mk_zero(0);
    iteri_right2
     (function(i, x, y){return caml_call3(Stdlib_Bytes[73], b, i, x & y);},
      x,
      y);
    return caml_call1(Stdlib_Bytes[44], b);
   }
   function logor(x, y){
    var b = mk_zero(0);
    iteri_right2
     (function(i, x, y){return caml_call3(Stdlib_Bytes[73], b, i, x | y);},
      x,
      y);
    return caml_call1(Stdlib_Bytes[44], b);
   }
   function shift_right(x, n){
    if(0 === n) return x;
    if(128 === n) return zero;
    if(0 < n && 128 > n){
     var b = mk_zero(0), shift_bits = n % 8 | 0, shift_bytes = n / 8 | 0;
     if(0 === shift_bits)
      caml_call5(Stdlib_Bytes[12], x, 0, b, shift_bytes, 16 - shift_bytes | 0);
     else{
      var carry = [0, 0], _bj_ = 15 - shift_bytes | 0, _bi_ = 0;
      if(_bj_ >= 0){
       var i = _bi_;
       for(;;){
        var
         x$0 = caml_string_get(x, i),
         _bg_ = shift_bits <= 0 ? 1 : 0,
         _bh_ = _bg_ || (8 < shift_bits ? 1 : 0);
        if(_bh_) caml_call1(Stdlib[1], cst_out_of_bounds);
        var
         new_carry = x$0 & ((1 << shift_bits) - 1 | 0),
         shifted_value = x$0 >>> shift_bits | 0,
         x$1 = carry[1];
        if(0 <= shift_bits && 8 >= shift_bits){
         var
          new_value =
            0 === shift_bits
             ? shifted_value
             : 8
               === shift_bits
               ? x$1
               : x$1 << (8 - shift_bits | 0) | shifted_value;
         caml_call3(Stdlib_Bytes[73], b, i + shift_bytes | 0, new_value);
         carry[1] = new_carry;
         var _bk_ = i + 1 | 0;
         if(_bj_ === i) break;
         var i = _bk_;
         continue;
        }
        throw caml_maybe_attach_backtrace
               ([0, Stdlib[6], cst_n_must_be_0_8], 1);
       }
      }
     }
     return caml_call1(Stdlib_Bytes[44], b);
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_n_must_be_0_128], 1);
   }
   function write_octets_exn$0(opt, s, dest){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(16 <= (runtime.caml_ml_bytes_length(dest) - off | 0))
     return caml_call5
             (Stdlib_Bytes[12], s, 0, dest, off, caml_ml_string_length(s));
    throw caml_maybe_attach_backtrace
           ([0, Parse_error, cst_larger_including_offset_th, s], 1);
   }
   function succ_exn(x){return add_exn(x, of_int64(_s_));}
   function succ$0(x){
    try{var _be_ = [0, succ_exn(x)]; return _be_;}
    catch(_bf_){
     var _bd_ = caml_wrap_exception(_bf_);
     if(_bd_ === Overflow) return _t_;
     throw caml_maybe_attach_backtrace(_bd_, 0);
    }
   }
   function pred$0(x){
    try{
     if(caml_call2(equal, x, zero))
      throw caml_maybe_attach_backtrace(Overflow, 1);
     var b = caml_call1(Stdlib_Bytes[5], x), i = 15;
     for(;;){
      var _a$_ = caml_string_get(x, i) - 1 | 0;
      caml_call3(Stdlib_Bytes[73], b, i, _a$_);
      if(0 !== caml_string_get(x, i)){
       var _bb_ = [0, caml_call1(Stdlib_Bytes[44], b)];
       return _bb_;
      }
      var i$0 = i - 1 | 0, i = i$0;
     }
    }
    catch(_bc_){
     var _ba_ = caml_wrap_exception(_bc_);
     if(_ba_ !== Overflow && _ba_[1] !== Stdlib[6])
      throw caml_maybe_attach_backtrace(_ba_, 0);
     return _u_;
    }
   }
   function make$1(a, b, c, d, e, f, g, h){
    return of_int16$0([0, a, b, c, d, e, f, g, h]);
   }
   function of_string_raw$1(s, offset){
    var compressed = [0, 0], len = caml_ml_string_length(s);
    if(len < (offset[1] + 1 | 0))
     throw caml_maybe_attach_backtrace(need_more(s), 1);
    var use_bracket = 91 === caml_string_get(s, offset[1]) ? 1 : 0;
    if(use_bracket) offset[1]++;
    if(len < (offset[1] + 2 | 0))
     throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(58 === caml_string_get(s, offset[1])){
     offset[1]++;
     if(58 !== caml_string_get(s, offset[1]))
      throw caml_maybe_attach_backtrace(bad_char(offset[1], s), 1);
     compressed[1] = 1;
     offset[1]++;
     var acc = _v_;
    }
    else
     var acc = 0;
    var nb$2 = caml_call1(Stdlib_List[1], acc);
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          var nb = nb$2, acc$0 = acc;
          for(;;){
           if(8 <= nb) break b;
           if(len <= offset[1]) break c;
           var pos = offset[1];
           try{var _a0_ = parse_int(16, s, offset), x = _a0_;}
           catch(_a__){var x = -1;}
           if(0 > x) break d;
           if(7 === nb) break e;
           if(offset[1] >= len) break;
           if(58 !== caml_string_get(s, offset[1])) break;
           offset[1]++;
           if(offset[1] >= len)
            throw caml_maybe_attach_backtrace(need_more(s), 1);
           if(58 === caml_string_get(s, offset[1])){
            if(compressed[1]) break f;
            compressed[1] = 1;
            offset[1]++;
            var
             acc$1 = [0, -1, [0, x, acc$0]],
             nb$0 = nb + 2 | 0,
             nb = nb$0,
             acc$0 = acc$1;
           }
           else{
            if(! is_number(16, int_of_char(caml_string_get(s, offset[1]))))
             throw caml_maybe_attach_backtrace(bad_char(offset[1], s), 1);
            var
             acc$2 = [0, x, acc$0],
             nb$1 = nb + 1 | 0,
             nb = nb$1,
             acc$0 = acc$2;
           }
          }
          if(offset[1] < len && 46 === caml_string_get(s, offset[1])){
           offset[1] = pos;
           var
            v4 = parse_dotted_quad(s, offset),
            match = to_int16(v4),
            lo = match[2],
            hi = match[1],
            res = [0, lo, [0, hi, acc$0]];
           break a;
          }
          var res = [0, x, acc$0];
          break a;
         }
         offset[1] += -1;
         var res = [0, x, acc$0];
         break a;
        }
        var res = [0, x, acc$0];
        break a;
       }
       var res = acc$0;
       break a;
      }
      var res = acc$0;
      break a;
     }
     var res = acc$0;
    }
    var res_len = caml_call1(Stdlib_List[1], res);
    if(8 < res_len)
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_too_many_components, s], 1);
    if(0 === res_len) throw caml_maybe_attach_backtrace(need_more(s), 1);
    var a = runtime.caml_make_vect(8, 0);
    if(compressed[1])
     var missing = 8 - (res_len - 1 | 0) | 0;
    else{
     if(8 !== res_len){
      if(offset[1] < len)
       throw caml_maybe_attach_backtrace(bad_char(offset[1], s), 1);
      throw caml_maybe_attach_backtrace(need_more(s), 1);
     }
     var missing = 0;
    }
    var _a1_ = 7;
    function _a2_(i, x){
     if(-1 === x) return i - missing | 0;
     if((x & 65535) !== x)
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, caml_call2(Stdlib_Printf[4], _w_, i), s], 1);
     caml_check_bound(a, i)[1 + i] = x;
     return i - 1 | 0;
    }
    caml_call3(Stdlib_List[26], _a2_, _a1_, res);
    if(use_bracket) expect_char(s, offset, 93);
    var
     _a3_ = caml_check_bound(a, 7)[8],
     _a4_ = caml_check_bound(a, 6)[7],
     _a5_ = caml_check_bound(a, 5)[6],
     _a6_ = caml_check_bound(a, 4)[5],
     _a7_ = caml_check_bound(a, 3)[4],
     _a8_ = caml_check_bound(a, 2)[3],
     _a9_ = caml_check_bound(a, 1)[2];
    return make$1
            (caml_check_bound(a, 0)[1],
             _a9_,
             _a8_,
             _a7_,
             _a6_,
             _a5_,
             _a4_,
             _a3_);
   }
   function of_string_exn$1(s){
    var o = [0, 0], x = of_string_raw$1(s, o);
    expect_end(s, o);
    return x;
   }
   function of_string$1(s){return try_with_result(of_string_exn$1, s);}
   function with_port_of_string$0(default$0, s){
    var len = caml_ml_string_length(s), o = [0, 0];
    try{
     var ipv6 = of_string_raw$1(s, o);
     a:
     {
      if(o[1] < len && 58 === caml_string_get(s, o[1])){
       o[1]++;
       var port = parse_dec_int(s, o);
       expect_end(s, o);
       var _aZ_ = [0, [0, ipv6, port]];
       break a;
      }
      expect_end(s, o);
      var _aZ_ = [0, [0, ipv6, default$0]];
     }
     return _aZ_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [1, [0, 3854881, caml_call2(Stdlib[28], cst_Ipaddr$1, msg)]];
    }
   }
   function to_buffer$1(buf, addr){
    var
     comp = to_int16$0(addr),
     h = comp[8],
     g = comp[7],
     f = comp[6],
     e = comp[5],
     d = comp[4],
     c = comp[3],
     b = comp[2],
     a = comp[1];
    a:
    {
     if
      (0 === comp[1]
       &&
        0 === comp[2]
        &&
         0 === comp[3] && 0 === comp[4] && 0 === comp[5] && 65535 === comp[6]){var v4 = 1; break a;}
     var v4 = 0;
    }
    var
     elide = 0,
     zeros = 0,
     acc = 0,
     param = [0, h, [0, g, [0, f, [0, e, [0, d, [0, c, [0, b, [0, a, 0]]]]]]]];
    for(;;){
     if(! param) break;
     var n = param[1];
     if(0 === n)
      var xs = param[2], zeros$0 = zeros - 1 | 0, zeros = zeros$0, param = xs;
     else{
      var xs$0 = param[2];
      if(0 === zeros)
       var acc$0 = [0, n, acc], zeros = 0, acc = acc$0, param = xs$0;
      else
       var
        xs$1 = param[2],
        acc$1 = [0, n, [0, zeros, acc]],
        elide$0 = caml_call2(Stdlib[16], elide, zeros),
        elide = elide$0,
        zeros = 0,
        acc = acc$1,
        param = xs$1;
     }
    }
    var
     elide$1 = caml_call2(Stdlib[16], elide, zeros),
     acc$2 = 0 === zeros ? acc : [0, zeros, acc],
     elide$2 = -1 <= elide$1 ? 0 : [0, elide$1];
    a:
    {
     if(elide$2){var x = elide$2[1]; if(-8 > x){var _aT_ = 0; break a;}}
     var _aT_ = 1;
    }
    if(! _aT_) throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
    var _aU_ = [0, elide$2, 0];
    function _aV_(param, x$1){
     var l$1 = param[2], patt = param[1];
     if(caml_equal([0, x$1], patt)) return [0, 0, [0, 0, l$1]];
     if(0 <= x$1) return [0, patt, [0, [0, x$1], l$1]];
     var l = l$1, x = x$1;
     for(;;){
      if(0 <= x) return [0, patt, l];
      var x$0 = x + 1 | 0, l$0 = [0, _x_, l], l = l$0, x = x$0;
     }
    }
    var
     lrev = caml_call3(Stdlib_List[26], _aV_, _aU_, acc$2)[2],
     param$0 = caml_call1(Stdlib_List[10], lrev);
    for(;;){
     if(! param$0) return 0;
     var _aW_ = param$0[1];
     if(_aW_){
      var hi = _aW_[1], _aX_ = param$0[2];
      if(! _aX_) return caml_call3(Stdlib_Printf[5], buf, _A_, hi);
      var _aY_ = _aX_[1];
      if(_aY_){
       if(! _aX_[2]){
        var lo = _aY_[1];
        if(v4){
         var addr$0 = of_int16([0, hi, lo]);
         return to_buffer(buf, addr$0);
        }
       }
       var xs$2 = param$0[2];
       caml_call3(Stdlib_Printf[5], buf, _y_, hi);
       var param$0 = xs$2;
      }
      else{
       var xs$3 = _aX_[2];
       caml_call3(Stdlib_Printf[5], buf, _z_, hi);
       var param$0 = xs$3;
      }
     }
     else{
      var xs$4 = param$0[2];
      caml_call2(Stdlib_Buffer[16], buf, cst);
      var param$0 = xs$4;
     }
    }
   }
   function to_string$1(l){
    var buf = caml_call1(Stdlib_Buffer[1], 39);
    to_buffer$1(buf, l);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function pp$1(ppf, i){
    var _aS_ = to_string$1(i);
    return caml_call3(Stdlib_Format[137], ppf, _C_, _aS_);
   }
   function of_octets_exn$1(opt, bs){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(16 <= (caml_ml_string_length(bs) - off | 0))
     return of_octets_exn$0(caml_call3(Stdlib_String[16], bs, off, 16));
    throw caml_maybe_attach_backtrace(need_more(bs), 1);
   }
   function of_octets$0(off, bs){
    return try_with_result
            (function(_aR_){return of_octets_exn$1(off, _aR_);}, bs);
   }
   function write_octets$0(off, i, bs){
    return try_with_result
            (function(_aQ_){return write_octets_exn$0(off, i, _aQ_);}, bs);
   }
   function multicast_to_mac$0(s){
    var
     _aO_ = caml_call1(Stdlib_Char[1], 51),
     macb = caml_call2(Stdlib_Bytes[1], 6, _aO_);
    caml_call5(Stdlib_Bytes[12], s, 12, macb, 2, 4);
    var _aP_ = caml_call1(Stdlib_Bytes[6], macb);
    return caml_call1(Macaddr[2], _aP_);
   }
   function to_domain_name$0(b){
    var
     hexstr_of_int = caml_call1(Stdlib_Printf[4], _D_),
     name =
       fold_left
        (function(acc, b){
          var
           x = caml_call1(hexstr_of_int, b & 15),
           y = caml_call1(hexstr_of_int, b >>> 4 | 0);
          return [0, x, [0, y, acc]];
         },
         _E_,
         b),
     _aN_ = caml_call1(Domain_name[34], name);
    return caml_call1(Domain_name[7], _aN_);
   }
   function of_domain_name$0(n){
    function int_of_char_string(param){
     var switch$0 = runtime.caml_string_compare(param, "8");
     if(0 <= switch$0){
      if(0 >= switch$0) return 8;
      if(! caml_string_notequal(param, "9")) return 9;
      if(! caml_string_notequal(param, "a")) return 10;
      if(! caml_string_notequal(param, "b")) return 11;
      if(! caml_string_notequal(param, "c")) return 12;
      if(! caml_string_notequal(param, "d")) return 13;
      if(! caml_string_notequal(param, "e")) return 14;
      if(! caml_string_notequal(param, "f")) return 15;
     }
     else{
      if(! caml_string_notequal(param, "0")) return 0;
      if(! caml_string_notequal(param, "1")) return 1;
      if(! caml_string_notequal(param, "2")) return 2;
      if(! caml_string_notequal(param, "3")) return 3;
      if(! caml_string_notequal(param, "4")) return 4;
      if(! caml_string_notequal(param, "5")) return 5;
      if(! caml_string_notequal(param, "6")) return 6;
      if(! caml_string_notequal(param, "7")) return 7;
     }
     return caml_call1(Stdlib[2], cst_int_of_char_string_invalid);
    }
    var labels = caml_call1(Domain_name[38], n);
    if(34 === labels.length - 1){
     var _aG_ = caml_check_bound(labels, 0)[1];
     if(caml_call3(Domain_name[25], 0, _aG_, cst_arpa$0)){
      var _aH_ = caml_check_bound(labels, 1)[2];
      if(caml_call3(Domain_name[25], 0, _aH_, cst_ip6)){
       var b = caml_create_bytes(16);
       try{
        var bi = 0;
        for(;;){
         var
          i = 2 * (bi + 1 | 0) | 0,
          x = int_of_char_string(caml_check_bound(labels, i)[1 + i]),
          _aK_ = i + 1 | 0,
          y = int_of_char_string(caml_check_bound(labels, _aK_)[1 + _aK_]);
         caml_call3(Stdlib_Bytes[73], b, bi, x << 4 | y);
         var _aL_ = bi + 1 | 0;
         if(15 === bi){
          var _aJ_ = [0, of_octets_exn$0(caml_call1(Stdlib_Bytes[44], b))];
          return _aJ_;
         }
         var bi = _aL_;
        }
       }
       catch(_aM_){
        var _aI_ = caml_wrap_exception(_aM_);
        if(_aI_[1] === Stdlib[7]) return 0;
        throw caml_maybe_attach_backtrace(_aI_, 0);
       }
      }
     }
    }
    return 0;
   }
   var
    unspecified$0 = make$1(0, 0, 0, 0, 0, 0, 0, 0),
    localhost$0 = make$1(0, 0, 0, 0, 0, 0, 0, 1),
    interface_nodes = make$1(65281, 0, 0, 0, 0, 0, 0, 1),
    link_nodes = make$1(65282, 0, 0, 0, 0, 0, 0, 1),
    interface_routers = make$1(65281, 0, 0, 0, 0, 0, 0, 2),
    link_routers = make$1(65282, 0, 0, 0, 0, 0, 0, 2),
    site_routers = make$1(65285, 0, 0, 0, 0, 0, 0, 2);
   function compare$4(param, _aF_){
    var
     sz = _aF_[2],
     pre = _aF_[1],
     sz$0 = param[2],
     pre$0 = param[1],
     c = caml_call2(compare$3, pre$0, pre);
    return 0 === c ? caml_compare(sz$0, sz) : c;
   }
   function mask$0(sz){
    var n = 128 - sz | 0;
    if(0 === n) return max_int;
    if(128 === n) return zero;
    if(0 < n && 128 > n){
     var b = mk_zero(0), shift_bits = n % 8 | 0, shift_bytes = n / 8 | 0;
     if(0 === shift_bits)
      caml_call5
       (Stdlib_Bytes[12], max_int, shift_bytes, b, 0, 16 - shift_bytes | 0);
     else{
      var carry = [0, 0], _aD_ = shift_bytes | 0, _aC_ = 15;
      if(15 >= _aD_){
       var i = _aC_;
       for(;;){
        var
         x = caml_string_get(max_int, i),
         _aA_ = shift_bits <= 0 ? 1 : 0,
         _aB_ = _aA_ || (8 < shift_bits ? 1 : 0);
        if(_aB_) caml_call1(Stdlib[1], cst_out_of_bounds$0);
        var
         new_carry =
           (x & 255 << (8 - shift_bits | 0)) >>> (8 - shift_bits | 0) | 0,
         shifted_value = x << shift_bits,
         new_value = shifted_value | carry[1];
        caml_call3(Stdlib_Bytes[73], b, i - shift_bytes | 0, new_value);
        carry[1] = new_carry;
        var _aE_ = i - 1 | 0;
        if(_aD_ === i) break;
        var i = _aE_;
       }
      }
     }
     return caml_call1(Stdlib_Bytes[44], b);
    }
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_n_must_be_0_128$0], 1);
   }
   function prefix$0(param){
    var sz = param[2], pre = param[1];
    return [0, logand(pre, mask$0(sz)), sz];
   }
   function make$2(sz, pre){return [0, pre, sz];}
   function network_address$0(param, addr){
    var sz = param[2], pre = param[1], x = mask$0(sz), b = mk_zero(0);
    function _aw_(i, param){
     var _ay_ = caml_string_get(x, i), _az_ = caml_call1(Stdlib[21], _ay_);
     return caml_call3(Stdlib_Bytes[73], b, i, _az_);
    }
    caml_call2(Stdlib_String[31], _aw_, x);
    var _ax_ = logand(addr, caml_call1(Stdlib_Bytes[44], b));
    return logor(logand(pre, mask$0(sz)), _ax_);
   }
   function of_string_raw$2(s, i){
    var v6 = of_string_raw$1(s, i);
    expect_char(s, i, 47);
    var
     p = parse_dec_int(s, i),
     _au_ = 128 < p ? 1 : 0,
     _av_ = _au_ || (p < 0 ? 1 : 0);
    if(_av_)
     throw caml_maybe_attach_backtrace
            ([0, Parse_error, cst_invalid_prefix_size$0, s], 1);
    return [0, p, v6];
   }
   function of_string_raw$3(s, i){
    var match = of_string_raw$2(s, i), v6 = match[2], p = match[1];
    return [0, v6, p];
   }
   function of_string_exn$2(s){
    var i = [0, 0], res = of_string_raw$2(s, i);
    expect_end(s, i);
    var v6 = res[2], p = res[1];
    return [0, v6, p];
   }
   function of_string$2(s){return try_with_result(of_string_exn$2, s);}
   function of_netmask_exn$1(netmask, address){
    var
     nm_bits_set =
       fold_left
         (function(param$0, e$0){
           var
            is_last_bit_set$0 = param$0[2],
            bits = param$0[1],
            a$0 = [0, bits, is_last_bit_set$0],
            bitmask = [0, 128],
            a = [0, a$0],
            for$0 = 0;
           for(;;){
            var
             e = 0 < (e$0 & bitmask[1]) ? 1 : 0,
             param = a[1],
             is_last_bit_set = param[2],
             a$1 = param[1];
            a:
            {
             if(is_last_bit_set){
              if(e){var _as_ = [0, a$1 + 1 | 0, 1]; break a;}
             }
             else if(e)
              throw caml_maybe_attach_backtrace
                     ([0,
                       Parse_error,
                       cst_invalid_netmask$0,
                       to_string$1(netmask)],
                      1);
             var _as_ = [0, a$1, 0];
            }
            a[1] = _as_;
            bitmask[1] = bitmask[1] >>> 1 | 0;
            var _at_ = for$0 + 1 | 0;
            if(7 === for$0) return a[1];
            var for$0 = _at_;
           }
          },
          _F_,
          netmask)
        [1];
    return [0, address, nm_bits_set];
   }
   function of_netmask_exn$2(netmask, address){return of_netmask_exn$1(netmask, address);
   }
   function of_netmask$0(netmask, address){
    return try_with_result
            (function(_ar_){return of_netmask_exn$1(netmask, _ar_);}, address);
   }
   function to_buffer$2(buf, param){
    var sz = param[2], pre = param[1];
    return caml_call5(Stdlib_Printf[5], buf, _G_, to_buffer$1, pre, sz);
   }
   function to_string$2(subnet){
    var buf = caml_call1(Stdlib_Buffer[1], 43);
    to_buffer$2(buf, subnet);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function pp$2(ppf, i){
    var _aq_ = to_string$2(i);
    return caml_call3(Stdlib_Format[137], ppf, _H_, _aq_);
   }
   function mem$0(ip, param){
    var sz = param[2], pre = param[1], m = mask$0(sz), _ap_ = logand(pre, m);
    return caml_equal(logand(ip, m), _ap_);
   }
   function subset$0(param, _an_){
    var
     sz2 = _an_[2],
     pre2 = _an_[1],
     sz1 = param[2],
     pre1 = param[1],
     _ao_ = sz2 <= sz1 ? 1 : 0;
    return _ao_ ? mem$0(pre1, [0, pre2, sz2]) : _ao_;
   }
   function of_addr$0(ip){return [0, ip, 128];}
   var
    global_unicast_001 = [0, make$1(8192, 0, 0, 0, 0, 0, 0, 0), 3],
    link$0 = [0, make$1(65152, 0, 0, 0, 0, 0, 0, 0), 64],
    unique_local = [0, make$1(64512, 0, 0, 0, 0, 0, 0, 0), 7],
    multicast$0 = [0, make$1(65280, 0, 0, 0, 0, 0, 0, 0), 8],
    ipv4_mapped = [0, make$1(0, 0, 0, 0, 0, 65535, 0, 0), 96],
    noneui64_interface = [0, make$1(0, 0, 0, 0, 0, 0, 0, 0), 3],
    solicited_node = [0, make$1(65282, 0, 0, 0, 0, 1, 65280, 0), 104];
   function network$0(param){
    var sz = param[2], pre = param[1];
    return logand(pre, mask$0(sz));
   }
   function address$0(param){var addr = param[1]; return addr;}
   function bits$0(param){var sz = param[2]; return sz;}
   function netmask$0(subnet){return mask$0(subnet[2]);}
   function first$0(cidr){
    var sz = cidr[2];
    return 126 < sz ? network$0(cidr) : failwith_msg(succ$0(network$0(cidr)));
   }
   function last$0(cidr){
    var sz = cidr[2], _am_ = shift_right(max_int, sz);
    return logor(network$0(cidr), _am_);
   }
   function hosts$0(opt, cidr){
    var sz = cidr[2];
    if(opt) var sth = opt[1], usable = sth; else var usable = 1;
    function iter_seq(start, stop){
     if(0 < caml_call2(compare$3, start, stop)) return 0;
     var match = succ$0(start);
     if(0 !== match[0]) return [0, start, function(param){return 0;}];
     var start_succ = match[1];
     return [0, start, function(param){return iter_seq(start_succ, stop);}];
    }
    if(usable && 128 === sz) return function(param){return 0;};
    if(usable)
     var stop = last$0(cidr), stop$0 = stop, start = first$0(cidr);
    else
     var
      stop$1 = last$0(cidr),
      start$0 = network$0(cidr),
      stop$0 = stop$1,
      start = start$0;
    return function(param){return iter_seq(start, stop$0);};
   }
   function subnets$0(n, cidr){
    var sz = cidr[2];
    function iter_seq(start, stop, steps){
     if(0 < caml_call2(compare$3, start, stop)) return 0;
     var prefix = [0, start, n];
     if(caml_call2(equal, start, stop))
      return [0, prefix, function(param){return 0;}];
     try{var _ak_ = [0, add_exn(start, steps)], match = _ak_;}
     catch(_al_){
      var _aj_ = caml_wrap_exception(_al_);
      if(_aj_ !== Overflow) throw caml_maybe_attach_backtrace(_aj_, 0);
      var match = 0;
     }
     if(! match) return [0, prefix, function(param){return 0;}];
     var start_succ = match[1];
     return [0,
             prefix,
             function(param){return iter_seq(start_succ, stop, steps);}];
    }
    if(n >= sz && 128 >= n){
     var
      start = network$0(cidr),
      stop = last$0(cidr),
      x = netmask$0(cidr),
      b = mk_zero(0),
      _ai_ = n - sz | 0;
     iteri_right2
      (function(i, x, y){return caml_call3(Stdlib_Bytes[73], b, i, x ^ y);},
       x,
       max_int);
     var steps = succ_exn(shift_right(caml_call1(Stdlib_Bytes[44], b), _ai_));
     return function(param){return iter_seq(start, stop, steps);};
    }
    return function(param){return 0;};
   }
   function scope$0(i){
    function mem(_ah_){return mem$0(i, _ah_);}
    if(mem(global_unicast_001)) return 6;
    if(mem(ipv4_mapped)){var v4 = to_int32$0(i)[4]; return scope(v4);}
    if(! mem(multicast$0))
     return mem(link$0)
             ? 2
             : mem
                (unique_local)
               ? 6
               : caml_equal
                  (i, localhost$0)
                 ? 1
                 : caml_equal(i, unspecified$0) ? 0 : 6;
    var x = to_int16$0(i)[1], match = x & 15;
    if(15 < match >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      case 4:
       return 3;
      case 2:
      case 3:
       return 2;
      case 14:
      case 15:
       return 6;
      case 5:
      case 6:
      case 7:
       return 4;
      default: return 5;
    }
   }
   function link_address_of_mac(mac){
    var
     bmac = caml_call1(Macaddr[6], mac),
     c_0 = caml_string_get(bmac, 0) ^ 2,
     _ad_ = caml_string_get(bmac, 5),
     _ae_ = (caml_string_get(bmac, 4) << 8) + _ad_ | 0,
     _af_ = 65024 + caml_string_get(bmac, 3) | 0,
     _ag_ = (caml_string_get(bmac, 2) << 8) + 255 | 0,
     addr =
       make$1
        (0,
         0,
         0,
         0,
         (c_0 << 8) + caml_string_get(bmac, 1) | 0,
         _ag_,
         _af_,
         _ae_);
    return network_address$0(link$0, addr);
   }
   function is_global$0(i){return 6 === scope$0(i) ? 1 : 0;}
   function is_multicast$0(i){return mem$0(i, multicast$0);}
   function is_private$0(i){return 6 !== scope$0(i) ? 1 : 0;}
   function compare$5(a, b){return caml_call2(compare$3, a, b);}
   var Set$0 = caml_call1(Stdlib_Set[1], [0, compare$5]);
   function compare$6(a, b){return caml_call2(compare$3, a, b);}
   var Map$0 = caml_call1(Stdlib_Map[1], [0, compare$6]);
   function compare$7(a, b){
    if(0 === a[0]){
     var a$0 = a[1];
     if(0 !== b[0]) return -1;
     var b$0 = b[1];
     return caml_call2(compare, a$0, b$0);
    }
    var a$1 = a[1];
    if(0 === b[0]) return 1;
    var b$1 = b[1];
    return caml_call2(compare$3, a$1, b$1);
   }
   function compare$8(a, b){return compare$7(a, b);}
   var Set$1 = caml_call1(Stdlib_Set[1], [0, compare$8]);
   function compare$9(a, b){return compare$7(a, b);}
   var Map$1 = caml_call1(Stdlib_Map[1], [0, compare$9]);
   function to_string$3(param){
    if(0 === param[0]){var x = param[1]; return to_string(x);}
    var x$0 = param[1];
    return to_string$1(x$0);
   }
   function to_buffer$3(buf, param){
    if(0 === param[0]){var x = param[1]; return to_buffer(buf, x);}
    var x$0 = param[1];
    return to_buffer$1(buf, x$0);
   }
   function pp$3(ppf, i){
    var _ac_ = to_string$3(i);
    return caml_call3(Stdlib_Format[137], ppf, _J_, _ac_);
   }
   function of_string_raw$4(s, offset){
    var len = caml_ml_string_length(s);
    if(len < (offset[1] + 1 | 0))
     throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(91 === caml_string_get(s, 0)) return [1, of_string_raw$1(s, offset)];
    var pos = offset[1];
    try{var _ab_ = [0, parse_dotted_quad(s, offset)]; return _ab_;}
    catch(exn$1){
     var exn = caml_wrap_exception(exn$1);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var v4_msg = exn[2];
     offset[1] = pos;
     try{var _aa_ = [1, of_string_raw$1(s, offset)]; return _aa_;}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0[1] !== Parse_error)
       throw caml_maybe_attach_backtrace(exn$0, 0);
      var
       s$0 = exn$0[3],
       v6_msg = exn$0[2],
       msg = caml_call3(Stdlib_Printf[4], _K_, v4_msg, v6_msg);
      throw caml_maybe_attach_backtrace([0, Parse_error, msg, s$0], 1);
     }
    }
   }
   function of_string_exn$3(s){
    var o = [0, 0], x = of_string_raw$4(s, o);
    expect_end(s, o);
    return x;
   }
   function of_string$3(s){return try_with_result(of_string_exn$3, s);}
   function with_port_of_string$1(default$0, s){
    var len = caml_ml_string_length(s), o = [0, 0];
    try{
     var ipv6 = of_string_raw$4(s, o);
     a:
     {
      if(o[1] < len && 58 === caml_string_get(s, o[1])){
       o[1]++;
       var port = parse_dec_int(s, o);
       expect_end(s, o);
       var _$_ = [0, [0, ipv6, port]];
       break a;
      }
      expect_end(s, o);
      var _$_ = [0, [0, ipv6, default$0]];
     }
     return _$_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [1, [0, 3854881, caml_call2(Stdlib[28], cst_Ipaddr$2, msg)]];
    }
   }
   function of_octets_exn$2(bs){
    var match = caml_ml_string_length(bs);
    if(4 === match) return [0, of_octets_exn(0, bs)];
    if(16 === match) return [1, of_octets_exn$1(0, bs)];
    throw caml_maybe_attach_backtrace
           ([0, Parse_error, cst_octets_must_be_of_length_4, bs], 1);
   }
   function of_octets$1(bs){return try_with_result(of_octets_exn$2, bs);}
   function to_octets$1(i){
    if(0 === i[0]){var p = i[1]; return to_octets(p);}
    var p$0 = i[1];
    return p$0;
   }
   function v6_of_v4(v4){
    return network_address$0(ipv4_mapped, of_int32$0([0, 0, 0, 0, v4]));
   }
   function v4_of_v6(v6){
    if(! mem$0(v6, ipv4_mapped)) return 0;
    var v4 = to_int32$0(v6)[4];
    return [0, v4];
   }
   function to_v4(param){
    if(0 === param[0]){var v4 = param[1]; return [0, v4];}
    var v6 = param[1];
    return v4_of_v6(v6);
   }
   function to_v6(param){
    if(0 === param[0]){var v4 = param[1]; return v6_of_v4(v4);}
    var v6 = param[1];
    return v6;
   }
   function scope$1(param){
    if(0 === param[0]){var v4 = param[1]; return scope(v4);}
    var v6 = param[1];
    return scope$0(v6);
   }
   function is_global$1(param){
    if(0 === param[0]){var v4 = param[1]; return is_global(v4);}
    var v6 = param[1];
    return is_global$0(v6);
   }
   function is_multicast$1(param){
    if(0 === param[0]){var v4 = param[1]; return is_multicast(v4);}
    var v6 = param[1];
    return is_multicast$0(v6);
   }
   function is_private$1(param){
    if(0 === param[0]){var v4 = param[1]; return is_private(v4);}
    var v6 = param[1];
    return is_private$0(v6);
   }
   function multicast_to_mac$1(param){
    if(0 === param[0]){var v4 = param[1]; return multicast_to_mac(v4);}
    var v6 = param[1];
    return multicast_to_mac$0(v6);
   }
   function to_domain_name$1(param){
    if(0 === param[0]){var v4 = param[1]; return to_domain_name(v4);}
    var v6 = param[1];
    return to_domain_name$0(v6);
   }
   function of_domain_name$1(n){
    var match = caml_call1(Domain_name[11], n);
    if(6 === match){
     var match$0 = of_domain_name(n);
     if(! match$0) return 0;
     var x = match$0[1];
     return [0, [0, x]];
    }
    if(34 !== match) return 0;
    var match$1 = of_domain_name$0(n);
    if(! match$1) return 0;
    var x$0 = match$1[1];
    return [0, [1, x$0]];
   }
   function succ$1(param){
    if(0 === param[0]){
     var addr = param[1], _X_ = succ(addr), _Y_ = function(v){return [0, v];};
     return caml_call2(Stdlib_Result[8], _Y_, _X_);
    }
    var addr$0 = param[1], _Z_ = succ$0(addr$0);
    function ___(v){return [1, v];}
    return caml_call2(Stdlib_Result[8], ___, _Z_);
   }
   function pred$1(param){
    if(0 === param[0]){
     var addr = param[1], _T_ = pred(addr), _U_ = function(v){return [0, v];};
     return caml_call2(Stdlib_Result[8], _U_, _T_);
    }
    var addr$0 = param[1], _V_ = pred$0(addr$0);
    function _W_(v){return [1, v];}
    return caml_call2(Stdlib_Result[8], _W_, _V_);
   }
   function compare$10(a, b){
    if(0 === a[0]){
     var a$0 = a[1];
     if(0 !== b[0]) return -1;
     var b$0 = b[1];
     return compare$0(a$0, b$0);
    }
    var a$1 = a[1];
    if(0 === b[0]) return 1;
    var b$1 = b[1];
    return compare$4(a$1, b$1);
   }
   function of_string_raw$5(s, offset){
    var len = caml_ml_string_length(s);
    if(len < (offset[1] + 1 | 0))
     throw caml_maybe_attach_backtrace(need_more(s), 1);
    if(91 === caml_string_get(s, 0)) return [1, of_string_raw$3(s, offset)];
    var pos = offset[1];
    try{var _S_ = [0, of_string_raw$0(s, offset)]; return _S_;}
    catch(exn$1){
     var exn = caml_wrap_exception(exn$1);
     if(exn[1] !== Parse_error) throw caml_maybe_attach_backtrace(exn, 0);
     var v4_msg = exn[2];
     offset[1] = pos;
     try{var _R_ = [1, of_string_raw$3(s, offset)]; return _R_;}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0[1] !== Parse_error)
       throw caml_maybe_attach_backtrace(exn$0, 0);
      var
       s$0 = exn$0[3],
       v6_msg = exn$0[2],
       msg = caml_call3(Stdlib_Printf[4], _L_, v4_msg, v6_msg);
      throw caml_maybe_attach_backtrace([0, Parse_error, msg, s$0], 1);
     }
    }
   }
   function of_string_exn$4(s){
    var o = [0, 0], x = of_string_raw$5(s, o);
    expect_end(s, o);
    return x;
   }
   function of_string$4(s){return try_with_result(of_string_exn$4, s);}
   function v6_of_v4$0(v4){
    var _Q_ = v6_of_v4(network(v4));
    return [0, _Q_, 96 + v4[2] | 0];
   }
   function v4_of_v6$0(v6){
    var match = v4_of_v6(network$0(v6));
    if(! match) return 0;
    var v4 = match[1];
    return [0, [0, v4, v6[2] - 96 | 0]];
   }
   function to_v4$0(param){
    if(0 === param[0]){var v4 = param[1]; return [0, v4];}
    var v6 = param[1];
    return v4_of_v6$0(v6);
   }
   function to_v6$0(param){
    if(0 === param[0]){var v4 = param[1]; return v6_of_v4$0(v4);}
    var v6 = param[1];
    return v6;
   }
   function mem$1(ip, prefix){
    var _P_ = to_v6$0(prefix);
    return mem$0(to_v6(ip), _P_);
   }
   function subset$1(subnet, network){
    var _O_ = to_v6$0(network);
    return subset$0(to_v6$0(subnet), _O_);
   }
   function of_addr$1(param){
    if(0 === param[0]){var p = param[1]; return [0, of_addr(p)];}
    var p$0 = param[1];
    return [1, of_addr$0(p$0)];
   }
   function to_string$4(param){
    if(0 === param[0]){var p = param[1]; return to_string$0(p);}
    var p$0 = param[1];
    return to_string$2(p$0);
   }
   function to_buffer$4(buf, param){
    if(0 === param[0]){var p = param[1]; return to_buffer$0(buf, p);}
    var p$0 = param[1];
    return to_buffer$2(buf, p$0);
   }
   function network$1(param){
    if(0 === param[0]){var p = param[1]; return [0, network(p)];}
    var p$0 = param[1];
    return [1, network$0(p$0)];
   }
   function netmask$1(param){
    if(0 === param[0]){var p = param[1]; return [0, netmask(p)];}
    var p$0 = param[1];
    return [1, netmask$0(p$0)];
   }
   function address$1(param){
    if(0 === param[0]){var p = param[1]; return [0, p[1]];}
    var p$0 = param[1];
    return [1, p$0[1]];
   }
   function pp$4(ppf, i){
    var _N_ = to_string$4(i);
    return caml_call3(Stdlib_Format[137], ppf, _M_, _N_);
   }
   function first$1(param){
    if(0 === param[0]){var p = param[1]; return [0, first(p)];}
    var p$0 = param[1];
    return [1, first$0(p$0)];
   }
   function last$1(param){
    if(0 === param[0]){var p = param[1]; return [0, last(p)];}
    var p$0 = param[1];
    return [1, last$0(p$0)];
   }
   function hosts$1(opt, param){
    if(opt) var sth = opt[1], usable = sth; else var usable = 1;
    if(0 === param[0]){var p = param[1]; return [0, hosts([0, usable], p)];}
    var p$0 = param[1];
    return [1, hosts$0([0, usable], p$0)];
   }
   function subnets$1(n, param){
    if(0 === param[0]){var p = param[1]; return [0, subnets(n, p)];}
    var p$0 = param[1];
    return [1, subnets$0(n, p$0)];
   }
   var
    Ipaddr =
      [0,
       Parse_error,
       string_of_scope,
       scope_of_string,
       pp_scope,
       [0,
        make,
        of_string,
        of_string_exn,
        parse_dotted_quad,
        with_port_of_string,
        to_string,
        to_buffer,
        pp,
        of_octets,
        of_octets_exn,
        write_octets,
        write_octets_exn,
        to_octets,
        of_int32,
        to_int32,
        of_int16,
        to_int16,
        multicast_to_mac,
        to_domain_name,
        of_domain_name,
        succ,
        pred,
        any,
        unspecified,
        broadcast,
        nodes,
        routers,
        localhost,
        [0,
         mask,
         make$0,
         prefix,
         network_address,
         of_string$0,
         of_string_exn$0,
         of_string_raw$0,
         to_string$0,
         pp$0,
         to_buffer$0,
         of_netmask_exn$0,
         of_netmask,
         mem,
         subset,
         of_addr,
         global,
         loopback,
         link,
         relative,
         multicast,
         private_10,
         private_172,
         private_192,
         private_blocks,
         broadcast$0,
         network,
         netmask,
         address,
         bits,
         first,
         last,
         hosts,
         subnets,
         compare$0],
        scope,
        is_global,
        is_multicast,
        is_private,
        compare,
        Set,
        Map],
       [0,
        make$1,
        of_string$1,
        of_string_exn$1,
        with_port_of_string$0,
        of_string_raw$1,
        to_string$1,
        to_buffer$1,
        pp$1,
        of_octets$0,
        of_octets_exn$1,
        write_octets_exn$0,
        write_octets$0,
        to_octets$0,
        of_int64,
        to_int64,
        of_int32$0,
        to_int32$0,
        of_int16$0,
        to_int16$0,
        multicast_to_mac$0,
        to_domain_name$0,
        of_domain_name$0,
        succ$0,
        pred$0,
        unspecified$0,
        localhost$0,
        interface_nodes,
        link_nodes,
        interface_routers,
        link_routers,
        site_routers,
        [0,
         mask$0,
         make$2,
         prefix$0,
         network_address$0,
         of_string_exn$2,
         of_string$2,
         of_string_raw$3,
         to_string$2,
         pp$2,
         to_buffer$2,
         of_netmask_exn$2,
         of_netmask$0,
         mem$0,
         subset$0,
         of_addr$0,
         global_unicast_001,
         unique_local,
         link$0,
         multicast$0,
         ipv4_mapped,
         noneui64_interface,
         solicited_node,
         network$0,
         netmask$0,
         address$0,
         bits$0,
         first$0,
         last$0,
         hosts$0,
         subnets$0,
         compare$4],
        scope$0,
        link_address_of_mac,
        is_global$0,
        is_multicast$0,
        is_private$0,
        compare$3,
        Set$0,
        Map$0],
       to_string$3,
       to_buffer$3,
       pp$3,
       of_string_exn$3,
       of_string$3,
       of_string_raw$4,
       with_port_of_string$1,
       of_octets_exn$2,
       of_octets$1,
       to_octets$1,
       v4_of_v6,
       to_v4,
       v6_of_v4,
       to_v6,
       scope$1,
       is_global$1,
       is_multicast$1,
       is_private$1,
       multicast_to_mac$1,
       to_domain_name$1,
       of_domain_name$1,
       succ$1,
       pred$1,
       [0,
        to_string$4,
        to_buffer$4,
        pp$4,
        of_string_exn$4,
        of_string$4,
        of_string_raw$5,
        v4_of_v6$0,
        to_v4$0,
        v6_of_v4$0,
        to_v6$0,
        mem$1,
        subset$1,
        of_addr$1,
        network$1,
        netmask$1,
        address$1,
        first$1,
        last$1,
        hosts$1,
        subnets$1,
        compare$10],
       compare$7,
       Set$1,
       Map$1];
   runtime.caml_register_global(134, Ipaddr, "Ipaddr");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
