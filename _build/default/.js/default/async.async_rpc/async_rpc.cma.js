// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_rpc__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_rpc = [0],
    Async_rpc$0 = [0, Async_rpc];
   runtime.caml_register_global(0, Async_rpc$0, "Async_rpc__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc__Import
//# unitInfo: Requires: Async_kernel, Async_log, Async_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_Import = "Async_rpc__Import",
    cst_async_rpc = "async_rpc";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel = global_data.Async_kernel,
    Async_log = global_data.Async_log,
    Async_unix = global_data.Async_unix;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][1], "async_rpc/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc, "import.ml");
   var
    catch$0 = Async_kernel[3],
    choice = Async_kernel[4],
    choose = Async_kernel[5],
    don_t_wait_for = Async_kernel[6],
    never = Async_kernel[8],
    try_with = Async_kernel[11],
    upon = Async_kernel[12],
    with_timeout_exn = Async_kernel[14],
    symbol = Async_kernel[17],
    symbol$0 = Async_kernel[18],
    symbol$1 = Async_kernel[19],
    return$0 = Async_kernel[20],
    symbol_bind = Async_kernel[21],
    symbol_map = Async_kernel[22],
    Let_syntax = Async_kernel[23],
    Async_kernel_private = Async_kernel[24],
    Ppx_log_syntax = Async_log[39][1],
    Unix = Async_unix[1],
    after = Async_unix[2],
    at = Async_unix[3],
    every = Async_unix[4],
    with_timeout = Async_unix[5],
    schedule = Async_unix[6],
    schedule$0 = Async_unix[7],
    shutdown = Async_unix[8],
    within = Async_unix[9],
    within$0 = Async_unix[10],
    Printf = Async_unix[11],
    Overwrite = Async_unix[12],
    close_in_noerr = Async_unix[13],
    close_in = Async_unix[14],
    close_out_noerr = Async_unix[15],
    close_out = Async_unix[16],
    eprintf = Async_unix[17],
    flush_all = Async_unix[18],
    flush = Async_unix[19],
    fprintf = Async_unix[20],
    ifprintf = Async_unix[21],
    in_channel_length = Async_unix[22],
    input_binary_int = Async_unix[23],
    input_byte = Async_unix[24],
    input_char = Async_unix[25],
    input_line = Async_unix[26],
    input_lines = Async_unix[27],
    input = Async_unix[28],
    input_value = Async_unix[29],
    open_in_bin = Async_unix[30],
    open_in_gen = Async_unix[31],
    open_in = Async_unix[32],
    open_out_bin = Async_unix[33],
    open_out_gen = Async_unix[34],
    open_out = Async_unix[35],
    out_channel_length = Async_unix[36],
    output_binary_int = Async_unix[37],
    output_byte = Async_unix[38],
    output_char = Async_unix[39],
    output = Async_unix[40],
    output_string = Async_unix[41],
    output_value = Async_unix[42],
    pos_in = Async_unix[43],
    pos_out = Async_unix[44],
    prerr_char = Async_unix[45],
    prerr_endline = Async_unix[46],
    prerr_float = Async_unix[47],
    prerr_int = Async_unix[48],
    prerr_newline = Async_unix[49],
    prerr_string = Async_unix[50],
    print_char = Async_unix[51],
    print_endline = Async_unix[52],
    print_float = Async_unix[53],
    printf = Async_unix[54],
    print_int = Async_unix[55],
    print_newline = Async_unix[56],
    print_s = Async_unix[57],
    print_string = Async_unix[58],
    read_float = Async_unix[59],
    read_int = Async_unix[60],
    read_line = Async_unix[61],
    read_lines = Async_unix[62],
    read_wrap = Async_unix[63],
    really_input = Async_unix[64],
    seek_in = Async_unix[65],
    seek_out = Async_unix[66],
    set_binary_mode_in = Async_unix[67],
    set_binary_mode_out = Async_unix[68],
    write_lines = Async_unix[69],
    write_wrap = Async_unix[70],
    eprint_s = Async_unix[71],
    eprint_s_nonblocking = Async_unix[72],
    LargeFile = Async_unix[73],
    Sexp = Async_unix[74],
    exit = Async_unix[75],
    Async_unix_private = Async_unix[76];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_Import);
   var
    Async_rpc_Import =
      [0,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       never,
       try_with,
       upon,
       with_timeout_exn,
       symbol,
       symbol$0,
       symbol$1,
       return$0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Async_kernel_private,
       Ppx_log_syntax,
       Unix,
       after,
       at,
       every,
       with_timeout,
       schedule,
       schedule$0,
       shutdown,
       within,
       within$0,
       Printf,
       Overwrite,
       close_in_noerr,
       close_in,
       close_out_noerr,
       close_out,
       eprintf,
       flush_all,
       flush,
       fprintf,
       ifprintf,
       in_channel_length,
       input_binary_int,
       input_byte,
       input_char,
       input_line,
       input_lines,
       input,
       input_value,
       open_in_bin,
       open_in_gen,
       open_in,
       open_out_bin,
       open_out_gen,
       open_out,
       out_channel_length,
       output_binary_int,
       output_byte,
       output_char,
       output,
       output_string,
       output_value,
       pos_in,
       pos_out,
       prerr_char,
       prerr_endline,
       prerr_float,
       prerr_int,
       prerr_newline,
       prerr_string,
       print_char,
       print_endline,
       print_float,
       printf,
       print_int,
       print_newline,
       print_s,
       print_string,
       read_float,
       read_int,
       read_line,
       read_lines,
       read_wrap,
       really_input,
       seek_in,
       seek_out,
       set_binary_mode_in,
       set_binary_mode_out,
       write_lines,
       write_wrap,
       eprint_s,
       eprint_s_nonblocking,
       LargeFile,
       Sexp,
       exit,
       Async_unix_private];
   runtime.caml_register_global(14, Async_rpc_Import, cst_Async_rpc_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc__Rpc_transport_low_latency
//# unitInfo: Requires: Async_kernel__Clock_ns, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_log, Async_rpc__Import, Async_rpc_kernel__Transport, Async_unix__Fd, Async_unix__Scheduler, Bigstring_unix, Core, Core__Bigstring, Core__Int, Core__Int63, Core__Ordered_collection_common, Core__Queue, Core__Time_ns, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Message_sexp, Ppx_log_types__Message_source, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_did_not_match_expected_len = ") did not match expected length (",
    cst_Async_rpc_Rpc_transport_lo$1 = "Async_rpc__Rpc_transport_low_latency",
    cst_async_rpc$0 = "async_rpc",
    cst_async_rpc_src_rpc_transpor$0 =
      "async_rpc/src/rpc_transport_low_latency.ml",
    cst_buf = "buf",
    cst_buffering_threshold_in_byt$0 = "buffering_threshold_in_bytes",
    cst_close_finished = "close_finished",
    cst_config = "config",
    cst_fd = "fd",
    cst_initial_buffer_size$0 = "initial_buffer_size",
    cst_max_buffer_size$0 = "max_buffer_size",
    cst_max_message_size$0 = "max_message_size",
    cst_pos = "pos",
    cst_start_batching_after_num_m$0 = "start_batching_after_num_messages",
    cst_t$0 = "t",
    cst_write_timeout$0 = "write_timeout",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$0 = cst$3,
    cst$1 = cst$3,
    cst = cst$3,
    error_source_002 = "async_rpc/src/rpc_transport_low_latency.ml.Config.t",
    Core = global_data.Core,
    Ppx_log_types_Message_source = global_data.Ppx_log_types__Message_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Ppx_log_types_Message_sexp = global_data.Ppx_log_types__Message_sexp,
    Async_log = global_data.Async_log,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Async_rpc_Import = global_data.Async_rpc__Import,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Ordered_collection_common =
      global_data.Core__Ordered_collection_common,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Assert_failure = global_data.Assert_failure,
    Core_unix = global_data.Core_unix,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_unix_Scheduler = global_data.Async_unix__Scheduler,
    Bigstring_unix = global_data.Bigstring_unix,
    Core_Int63 = global_data.Core__Int63,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Int = global_data.Core__Int,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_Rpc_transport_lo$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_async_rpc_src_rpc_transpor$0);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc$0, "rpc_transport_low_latency.ml");
   var
    default_write_timeout = caml_call1(Core_Time_ns[1][83], 2.),
    default_max_message_size = Core_Int[45],
    default_max_buffer_size = Core_Int[45],
    _ar_ = [0, "writer"],
    _as_ = [0, "reader"],
    _al_ = [0, "Bad_fd"],
    _am_ = [0, "Closed"],
    cst_Async_rpc_Rpc_transport_lo = cst_Async_rpc_Rpc_transport_lo$1,
    cst_async_rpc_src_rpc_transpor = cst_async_rpc_src_rpc_transpor$0,
    cst_t = cst_t$0,
    cst_timeout = "timeout",
    _aj_ =
      [0,
       [1,
        "Rpc_transport_low_latency.Writer timed out waiting to write on file descriptor. Closing the writer."]],
    _ak_ = [0, 106380200],
    _ai_ = [0, 106380200],
    _an_ = [0, "ready_to_result"],
    _ao_ = [0, cst_t$0],
    cst_Rpc_transport_low_latency_$11 =
      "Rpc_transport_low_latency.Writer: fd changed",
    _aq_ = [0, 0, 0],
    _ap_ = [0, cst_async_rpc_src_rpc_transpor$0, 875, 6],
    cst_write = "write",
    cst_writev = "writev",
    _ah_ = [0, 0],
    _ag_ = [0, cst_async_rpc_src_rpc_transpor$0, 699, 4],
    _X_ = [0, "sends_in_this_job"],
    _Y_ = [0, "last_send_job"],
    _Z_ = [0, "flushes"],
    ___ = [0, "monitor"],
    _$_ = [0, "bytes_written"],
    _aa_ = [0, cst_pos],
    _ab_ = [0, cst_buf],
    _ac_ = [0, "writing"],
    _ad_ = [0, "connection_state"],
    _ae_ = [0, cst_config],
    _af_ = [0, cst_fd],
    _U_ = [0, "connection_lost"],
    _V_ = [0, cst_close_finished],
    _W_ = [0, "close_started"],
    _S_ = [0, "ivar"],
    _T_ = [0, cst_pos],
    cst_Rpc_transport_low_latency_$10 =
      "Rpc_transport_low_latency.Reader_internal.peek_once_without_buffering_from_socket",
    _R_ =
      [0,
       [11,
        "peek_bin_prot: message length (",
        [4,
         0,
         0,
         0,
         [11, cst_did_not_match_expected_len, [4, 0, 0, 0, [12, 41, 0]]]]],
       "peek_bin_prot: message length (%d) did not match expected length (%d)"],
    cst_Rpc_transport_low_latency_$9 =
      "Rpc_transport_low_latency.Reader_internal.peek_bin_prot",
    _Q_ =
      [0,
       [11,
        "message length (",
        [4,
         0,
         0,
         0,
         [11, cst_did_not_match_expected_len, [4, 0, 0, 0, [12, 41, 0]]]]],
       "message length (%d) did not match expected length (%d)"],
    cst_Rpc_transport_low_latency_$8 =
      "Rpc_transport_low_latency.Reader_internal.read_forever",
    cst_Rpc_transport_low_latency_$6 =
      "Rpc_transport_low_latency.Reader: reader closed",
    _L_ = [0, cst_async_rpc_src_rpc_transpor$0, 483, 16301, 16315],
    cst_Rpc_transport_low_latency_$7 =
      "Rpc_transport_low_latency.Reader: already reading",
    _M_ = [0, cst_async_rpc_src_rpc_transpor$0, 490, 16462, 16476],
    _N_ = [0, -146189108],
    _O_ = [0, 3903734],
    _P_ = [0, [0, cst_async_rpc_src_rpc_transpor$0, 498, 16661, 16673]],
    _C_ = [1, -1025106484],
    cst_Rpc_transport_low_latency_$2 =
      "Rpc_transport_low_latency.Reader.read_forever: file descriptor doesn't support watching",
    _B_ = [1, 3456156],
    _E_ = [0, cst_async_rpc_src_rpc_transpor$0, 392, 11],
    _D_ = [1, -1025106484],
    _z_ = [0, "Rpc_transport_low_latency.Reader_internal.Dispatcher.run"],
    _A_ = [0, [0, cst_async_rpc_src_rpc_transpor$0, 363, 11463, 11479]],
    _K_ = [0, 0],
    cst_Rpc_transport_low_latency_$5 =
      "Rpc_transport_low_latency.Reader_internal.Dispatcher.peek_once_without_buffering_from_socket: on_message returned unexpected value",
    cst_Rpc_transport_low_latency_$3 =
      "Rpc_transport_low_latency.Reader_internal.Dispatcher.peek_once_without_buffering_from_socket file descriptor doesn't support watching",
    _H_ = [1, 658743757],
    cst_Rpc_transport_low_latency_$4 =
      "Rpc_transport_low_latency.Reader_internal.Dispatcher.peek_once_without_buffering_from_socket: unexpected state Waiting_for_handler",
    _J_ = [0, cst_async_rpc_src_rpc_transpor$0, 464, 11],
    _I_ = [1, -1025106484],
    _F_ =
      [0,
       "Rpc_transport_low_latency.Reader_internal.Dispatcher.peek_once_without_buffering_from_socket"],
    _G_ = [0, [0, cst_async_rpc_src_rpc_transpor$0, 418, 13565, 13581]],
    _y_ = [0, cst_async_rpc_src_rpc_transpor$0, 302, 6],
    _x_ = [0, cst_async_rpc_src_rpc_transpor$0, 247, 8],
    cst_read = "read",
    cst_BUG_Rpc_Low_latency_transp =
      "BUG: Rpc.Low_latency_transport's reader has buffered messages that are unprocessed.",
    cst_Message_len_value_exn_of_N = "Message_len.value_exn of None",
    _w_ =
      [0,
       [11, "Message_len.create_exn of negative int: ", [4, 0, 0, 0, 0]],
       "Message_len.create_exn of negative int: %d"],
    _n_ = [0, "bytes_read"],
    _o_ = [0, "max"],
    _p_ = [0, cst_pos],
    _q_ = [0, cst_buf],
    _r_ = [0, cst_close_finished],
    _s_ = [0, "closed"],
    _t_ = [0, "reading"],
    _u_ = [0, cst_config],
    _v_ = [0, cst_fd],
    _m_ = [0, 1],
    _l_ = [0, cst_async_rpc_src_rpc_transpor$0, 104, 4],
    _j_ = [0, cst_config],
    _k_ = [0, "new_size_request"],
    cst_Rpc_transport_low_latency_$1 =
      "Rpc_transport_low_latency: cannot grow buffer",
    _h_ = [0, cst_config],
    _i_ = [0, "message_size"],
    cst_Rpc_transport_low_latency_$0 =
      "Rpc_transport_low_latency: message too small or too big",
    cst_Rpc_transport_low_latency_ =
      "Rpc_transport_low_latency.Config.validate: invalid config",
    _g_ = [0, cst_async_rpc_src_rpc_transpor$0, 60, 2026, 2040],
    _a_ = [0, cst_start_batching_after_num_m$0],
    _b_ = [0, cst_buffering_threshold_in_byt$0],
    _c_ = [0, cst_write_timeout$0],
    _d_ = [0, cst_max_buffer_size$0],
    _e_ = [0, cst_initial_buffer_size$0],
    _f_ = [0, cst_max_message_size$0],
    cst_start_batching_after_num_m = cst_start_batching_after_num_m$0,
    cst_buffering_threshold_in_byt = cst_buffering_threshold_in_byt$0,
    cst_write_timeout = cst_write_timeout$0,
    cst_max_buffer_size = cst_max_buffer_size$0,
    cst_initial_buffer_size = cst_initial_buffer_size$0,
    cst_max_message_size = cst_max_message_size$0,
    cst_async_rpc = cst_async_rpc$0,
    cst_Async_rpc_Rpc_transport_lo$0 = cst_Async_rpc_Rpc_transport_lo$1,
    default_start_batching_after_n = 2,
    default_initial_buffer_size = 65536,
    default_buffering_threshold_in = 32768;
   function sexp_of_t(param){
    var
     start_batching_after_num_messa = param[6],
     buffering_threshold_in_bytes_0 = param[5],
     write_timeout_017 = param[4],
     max_buffer_size_015 = param[3],
     initial_buffer_size_013 = param[2],
     max_message_size_011 = param[1],
     arg_022 = caml_call1(Core[389], start_batching_after_num_messa),
     bnds_010 = [0, [1, [0, _a_, [0, arg_022, 0]]], 0],
     arg_020 = caml_call1(Core[389], buffering_threshold_in_bytes_0),
     bnds_010$0 = [0, [1, [0, _b_, [0, arg_020, 0]]], bnds_010],
     arg_018 = caml_call1(Core_Time_ns[1][10], write_timeout_017),
     bnds_010$1 = [0, [1, [0, _c_, [0, arg_018, 0]]], bnds_010$0],
     arg_016 = caml_call1(Core[389], max_buffer_size_015),
     bnds_010$2 = [0, [1, [0, _d_, [0, arg_016, 0]]], bnds_010$1],
     arg_014 = caml_call1(Core[389], initial_buffer_size_013),
     bnds_010$3 = [0, [1, [0, _e_, [0, arg_014, 0]]], bnds_010$2],
     arg_012 = caml_call1(Core[389], max_message_size_011),
     bnds_010$4 = [0, [1, [0, _f_, [0, arg_012, 0]]], bnds_010$3];
    return [1, bnds_010$4];
   }
   function validate(t){
    var _cO_ = caml_call2(Core[89], t[2], 0);
    if(_cO_)
     var _cP_ = _cO_;
    else{
     var _cQ_ = caml_call2(Core[89], t[1], 0);
     if(_cQ_)
      var _cP_ = _cQ_;
     else{
      var _cR_ = caml_call2(Core[91], t[2], t[3]);
      if(_cR_)
       var _cP_ = _cR_;
      else{
       var _cS_ = caml_call2(Core[91], t[1], t[3]);
       if(_cS_)
        var _cP_ = _cS_;
       else{
        var _cT_ = caml_call2(Core[92], t[5], 0);
        if(_cT_)
         var _cP_ = _cT_;
        else
         var
          _cU_ = caml_call2(Core[92], t[6], 0),
          _cP_ =
            _cU_ || caml_call2(Core_Time_ns[1][16], t[4], Core_Time_ns[1][76]);
       }
      }
     }
    }
    if(_cP_)
     caml_call5
      (Core[247], 0, _g_, cst_Rpc_transport_low_latency_, t, sexp_of_t);
    return t;
   }
   function t_of_sexp(x_009){
    function _cu_(param){
     var
      _cK_ = param[2],
      _cL_ = _cK_[2],
      _cM_ = _cL_[2],
      _cN_ = _cM_[2],
      start_batching_after_num_messa = _cN_[2][1],
      buffering_threshold_in_bytes = _cN_[1],
      write_timeout = _cM_[1],
      max_buffer_size = _cL_[1],
      initial_buffer_size = _cK_[1],
      max_message_size = param[1];
     return [0,
             max_message_size,
             initial_buffer_size,
             max_buffer_size,
             write_timeout,
             buffering_threshold_in_bytes,
             start_batching_after_num_messa];
    }
    var _cv_ = 0;
    function _cw_(param){
     return caml_string_notequal(param, cst_buffering_threshold_in_byt$0)
             ? caml_string_notequal
                (param, cst_initial_buffer_size$0)
               ? caml_string_notequal
                  (param, cst_max_buffer_size$0)
                 ? caml_string_notequal
                    (param, cst_max_message_size$0)
                   ? caml_string_notequal
                      (param, cst_start_batching_after_num_m$0)
                     ? caml_string_notequal(param, cst_write_timeout$0) ? -1 : 3
                     : 5
                   : 0
                 : 2
               : 1
             : 4;
    }
    var
     _cx_ = 0,
     _cy_ = Core[390],
     _cz_ =
       [0,
        cst_start_batching_after_num_m,
        [0, function(param){return default_start_batching_after_n;}],
        _cy_,
        _cx_],
     _cA_ = Core[390],
     _cB_ =
       [0,
        cst_buffering_threshold_in_byt,
        [0, function(param){return default_buffering_threshold_in;}],
        _cA_,
        _cz_],
     _cC_ = Core_Time_ns[1][9],
     _cD_ =
       [0,
        cst_write_timeout,
        [0, function(param){return default_write_timeout;}],
        _cC_,
        _cB_],
     _cE_ = Core[390],
     _cF_ =
       [0,
        cst_max_buffer_size,
        [0, function(param){return default_max_buffer_size;}],
        _cE_,
        _cD_],
     _cG_ = Core[390],
     _cH_ =
       [0,
        cst_initial_buffer_size,
        [0, function(param){return default_initial_buffer_size;}],
        _cG_,
        _cF_],
     _cI_ = Core[390],
     _cJ_ =
       [0,
        cst_max_message_size,
        [0, function(param){return default_max_message_size;}],
        _cI_,
        _cH_];
    return validate
            (caml_call6
              (Sexplib0_Sexp_conv_record[3],
               error_source_002,
               _cJ_,
               _cw_,
               _cv_,
               _cu_,
               x_009));
   }
   function create(opt, _ct_, _cs_, _cr_, _cq_, _cp_, param){
    if(opt)
     var sth = opt[1], max_message_size = sth;
    else
     var max_message_size = default_max_message_size;
    if(_ct_)
     var sth$0 = _ct_[1], initial_buffer_size = sth$0;
    else
     var initial_buffer_size = default_initial_buffer_size;
    if(_cs_)
     var sth$1 = _cs_[1], max_buffer_size = sth$1;
    else
     var max_buffer_size = default_max_buffer_size;
    if(_cr_)
     var sth$2 = _cr_[1], write_timeout = sth$2;
    else
     var write_timeout = default_write_timeout;
    if(_cq_)
     var sth$3 = _cq_[1], buffering_threshold_in_bytes = sth$3;
    else
     var buffering_threshold_in_bytes = default_buffering_threshold_in;
    if(_cp_)
     var sth$4 = _cp_[1], start_batching_after_num_messa = sth$4;
    else
     var start_batching_after_num_messa = default_start_batching_after_n;
    return validate
            ([0,
              max_message_size,
              initial_buffer_size,
              max_buffer_size,
              write_timeout,
              buffering_threshold_in_bytes,
              start_batching_after_num_messa]);
   }
   var default$0 = create(0, 0, 0, 0, 0, 0, 0);
   function message_size_ok(t, payload_len){
    var _co_ = caml_call2(Core[88], payload_len, 0);
    return _co_ ? caml_call2(Core[89], payload_len, t[1]) : _co_;
   }
   function grow_buffer(t, buf, new_size_request){
    var _cj_ = caml_call1(Core_Bigstring[21], buf);
    if(! caml_call2(Core[91], new_size_request, _cj_))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    if(caml_call2(Core[91], new_size_request, t[3])){
     var
      _ck_ = [0, [1, [0, _j_, [0, sexp_of_t(t), 0]]], 0],
      _cl_ =
        [0,
         [1,
          [0,
           [1, [0, _k_, [0, caml_call1(Core[389], new_size_request), 0]]],
           _ck_]],
         0],
      _cm_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Rpc_transport_low_latency_$1),
          _cl_]];
     caml_call1(Core[261], _cm_);
    }
    var
     _cn_ = caml_call1(Core_Int[48], new_size_request),
     len = caml_call2(Core_Int[89], t[3], _cn_);
    return runtime.bigstring_realloc(buf, len);
   }
   function set_nonblocking(fd){
    function _ch_(_ci_){return 0;}
    return caml_call3(Async_unix_Fd[23], _m_, fd, _ch_);
   }
   function sexp_of_t$0(param){
    var
     config_026 = param[2],
     fd_024 = param[1],
     reading_028 = param[3],
     closed_030 = param[4],
     close_finished_032 = param[5],
     buf_034 = param[6],
     pos_036 = param[7],
     max_038 = param[8],
     bytes_read_040 = param[9],
     arg_041 = caml_call1(Core_Int63[103], bytes_read_040),
     bnds_023 = [0, [1, [0, _n_, [0, arg_041, 0]]], 0],
     arg_039 = caml_call1(Core[389], max_038),
     bnds_023$0 = [0, [1, [0, _o_, [0, arg_039, 0]]], bnds_023],
     arg_037 = caml_call1(Core[389], pos_036),
     bnds_023$1 = [0, [1, [0, _p_, [0, arg_037, 0]]], bnds_023$0],
     arg_035 = caml_call1(Sexplib0_Sexp_conv[23], buf_034),
     bnds_023$2 = [0, [1, [0, _q_, [0, arg_035, 0]]], bnds_023$1],
     arg_033 = caml_call2(Async_kernel_Ivar[9], Core[620], close_finished_032),
     bnds_023$3 = [0, [1, [0, _r_, [0, arg_033, 0]]], bnds_023$2],
     arg_031 = caml_call1(Core[323], closed_030),
     bnds_023$4 = [0, [1, [0, _s_, [0, arg_031, 0]]], bnds_023$3],
     arg_029 = caml_call1(Core[323], reading_028),
     bnds_023$5 = [0, [1, [0, _t_, [0, arg_029, 0]]], bnds_023$4],
     arg_027 = sexp_of_t(config_026),
     bnds_023$6 = [0, [1, [0, _u_, [0, arg_027, 0]]], bnds_023$5],
     arg_025 = caml_call1(Async_unix_Fd[2], fd_024),
     bnds_023$7 = [0, [1, [0, _v_, [0, arg_025, 0]]], bnds_023$6];
    return [1, bnds_023$7];
   }
   function is_closed(t){return t[4];}
   function close_finished(t){return caml_call1(Async_kernel_Ivar[19], t[5]);}
   function bytes_read(t){return t[9];}
   var none = -1;
   function is_running(t){return t[5] ? 0 : 1;}
   function interrupt(t, reason){
    if(! is_running(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
    t[5] = [0, reason];
    return caml_call2(Async_kernel_Ivar[14], t[4], 0);
   }
   function can_process_message(t){
    var _cg_ = 1 - t[1][4];
    return _cg_ ? is_running(t) : _cg_;
   }
   function process_received_messages(t$0, read_or_peek){
    for(;;){
     var _cd_ = can_process_message(t$0);
     if(! _cd_) return _cd_;
     var t$1 = t$0[1], pos = t$1[7], available = t$1[8] - pos | 0;
     if(caml_call2(Core[88], available, Async_rpc_kernel_Transport[1][1])){
      var
       payload_len = caml_call2(Async_rpc_kernel_Transport[1][2], t$1[6], pos),
       total_len = payload_len + Async_rpc_kernel_Transport[1][1] | 0,
       t = t$1[2];
      if(1 - message_size_ok(t, payload_len)){
       var
        _b$_ = [0, [1, [0, _h_, [0, sexp_of_t(t), 0]]], 0],
        _ca_ =
          [0,
           [1,
            [0,
             [1, [0, _i_, [0, caml_call1(Core[389], payload_len), 0]]],
             _b$_]],
           0],
        _cb_ =
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7], cst_Rpc_transport_low_latency_$0),
            _ca_]];
       caml_call1(Core[261], _cb_);
      }
      if(caml_call2(Core[89], total_len, available))
       var
        len =
          caml_call2(Core[92], payload_len, 0)
           ? caml_call3(Core[246], _w_, payload_len, 0)
           : payload_len;
      else{
       var _cc_ = caml_call1(Core_Bigstring[21], t$1[6]);
       if(caml_call2(Core[91], total_len, _cc_))
        t$1[6] = grow_buffer(t$1[2], t$1[6], total_len);
       var len = none;
      }
     }
     else
      var len = none;
     if(! caml_call2(Core[88], len, 0)) return caml_call1(t$0[3], 0);
     var
      len$0 =
        caml_call2(Core[92], len, 0)
         ? caml_call1(Core[6], cst_Message_len_value_exn_of_N)
         : len,
      start = t$0[1][7] + Async_rpc_kernel_Transport[1][1] | 0;
     if(914388854 <= read_or_peek){
      var
       _ce_ = caml_call1(Core_Int63[72], len$0),
       _cf_ = caml_call2(Core_Int63[19], t$0[1][9], _ce_);
      t$0[1][9] = _cf_;
      t$0[1][7] = start + len$0 | 0;
     }
     var match = caml_call3(t$0[2], t$0[1][6], start, len$0);
     if(typeof match !== "number"){
      if(0 === match[0]){var x = match[1]; return interrupt(t$0, [1, x]);}
      var d = match[1];
      if(! caml_call1(Async_kernel_Deferred[7], d))
       return interrupt(t$0, [0, d]);
     }
    }
   }
   function stop_watching_on_error(t, monitor){
    var parent = caml_call1(Async_kernel_Monitor[5], 0);
    function _b__(exn){
     if(is_running(t)) interrupt(t, 0);
     return caml_call3(Async_kernel_Monitor[15], parent, 0, exn);
    }
    return caml_call2(Async_kernel_Monitor[7], monitor, _b__);
   }
   function run
   (reader, allow_buffering, on_message, on_end_of_batch, read_or_peek){
    var
     t =
       [0,
        reader,
        on_message,
        on_end_of_batch,
        caml_call1(Async_kernel_Ivar[12], 0),
        0],
     monitor = caml_call4(Async_kernel_Monitor[3], _A_, 0, _z_, 0);
    stop_watching_on_error(t, monitor);
    function _bT_(param){
     if(-18684779 <= param)
      return caml_call1(Core[6], cst_Rpc_transport_low_latency_$2);
     var _b8_ = t[5];
     if(! _b8_){
      if(! caml_call1(Async_unix_Fd[16], t[1][1]) && ! t[1][4])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
      return caml_call1(Async_rpc_Import[12], _D_);
     }
     var match = _b8_[1];
     if(typeof match === "number")
      return 0 === match
              ? caml_call1(Async_kernel_Deferred[19], 0)
              : caml_call1(Async_rpc_Import[12], _B_);
     if(0 === match[0]){
      var
       d = match[1],
       _b9_ =
         function(param){
          return reader[4]
                  ? caml_call1(Async_rpc_Import[12], _C_)
                  : run
                    (reader,
                     allow_buffering,
                     on_message,
                     on_end_of_batch,
                     read_or_peek);
         };
      return caml_call2(Async_rpc_Import[15][2], d, _b9_);
     }
     var x = match[1];
     return caml_call1(Async_rpc_Import[12], [0, x]);
    }
    function _bU_(param){
     process_received_messages(t, read_or_peek);
     var
      _bW_ = [0, close_finished(t[1]), 0],
      _bX_ = [0, caml_call1(Async_kernel_Ivar[19], t[4]), _bW_],
      interrupt$0 = caml_call1(Async_kernel_Deferred[23], _bX_);
     function _bY_(t$0){
      var _b6_ = can_process_message(t$0);
      if(_b6_){
       var t = t$0[1];
       if(caml_call2(Core[91], t[7], 0)){
        var len = t[8] - t[7] | 0;
        if(caml_call2(Core[91], len, 0))
         caml_call5(Core_Bigstring[22], t[6], t[7], t[6], 0, len);
        t[7] = 0;
        t[8] = len;
       }
       var
        _b0_ = t[8],
        available_buffer_capacity =
          caml_call1(Core_Bigstring[21], t[6]) - _b0_ | 0;
       if(allow_buffering)
        var len$0 = available_buffer_capacity;
       else{
        var pos = t[7], available = t[8] - pos | 0;
        if(caml_call2(Core[92], available, Async_rpc_kernel_Transport[1][1]))
         var _b5_ = Async_rpc_kernel_Transport[1][1] - available | 0;
        else{
         var
          payload_len =
            caml_call2(Async_rpc_kernel_Transport[1][2], t[6], pos),
          total_len = payload_len + Async_rpc_kernel_Transport[1][1] | 0;
         if(caml_call2(Core[92], available, total_len))
          var _b5_ = total_len - available | 0;
         else
          var
           _bZ_ =
             caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Rpc_Low_latency_transp),
           _b5_ = caml_call1(Core[261], _bZ_);
        }
        var len$0 = caml_call2(Core_Int[89], _b5_, available_buffer_capacity);
       }
       var
        _b1_ = t[6],
        _b2_ = [0, t[8]],
        _b3_ = caml_call1(Async_unix_Fd[40], t[1]),
        result = caml_call4(Bigstring_unix[131], _b3_, _b2_, [0, len$0], _b1_);
       a:
       {
        if(! caml_call1(Core_unix[5][2][6], result)){
         var error = caml_call1(Core_unix[5][2][10], result);
         b:
         if(typeof error === "number"){
          if(31 <= error){
           var _b4_ = error - 32 | 0;
           if(19 < _b4_ >>> 0){
            if(0 <= _b4_)
             switch(_b4_ - 20 | 0){
               case 0:
               case 1:
               case 2:
               case 4:
               case 10:
               case 13: break;
               default: break b;
             }
            var match = 3456156;
            break a;
           }
           if(5 !== _b4_) break b;
          }
          else if(2 !== error && 11 !== error) break b;
          var match = -445537353;
          break a;
         }
         throw caml_maybe_attach_backtrace
                ([0, Async_rpc_Import[18][153], error, cst_read, cst], 0);
        }
        var n = caml_call1(Core_unix[5][2][9], result);
        if(0 === n)
         var match = 3456156;
        else{
         if(! caml_call2(Core[91], n, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
         t[8] = t[8] + n | 0;
         var match = -554304611;
        }
       }
       if(-445537353 !== match)
        return 3456156 <= match
                ? interrupt(t$0, 1)
                : process_received_messages(t$0, read_or_peek);
       var _b7_ = 0;
      }
      else
       var _b7_ = _b6_;
      return _b7_;
     }
     return caml_call5
             (Async_unix_Fd[29], t[1][1], 914388854, interrupt$0, _bY_, t);
    }
    var _bV_ = caml_call3(Async_unix_Scheduler[4], [0, monitor], 0, _bU_);
    return caml_call2(Async_rpc_Import[15][2], _bV_, _bT_);
   }
   function read_or_peek_dispatcher(t, dispatcher_impl, caller_name){
    if(t[4])
     caml_call5
      (Core[247], 0, _L_, cst_Rpc_transport_low_latency_$6, cst$0, Core[558]);
    if(t[3])
     caml_call5
      (Core[247], 0, _M_, cst_Rpc_transport_low_latency_$7, cst$1, Core[558]);
    t[3] = 1;
    function _bR_(param){t[3] = 0; return Async_kernel_Deferred[18];}
    function _bS_(param){return caml_call1(dispatcher_impl, 0);}
    return caml_call8
            (Async_kernel_Monitor[23],
             _P_,
             0,
             [0, caller_name],
             0,
             _O_,
             _N_,
             _bS_,
             _bR_);
   }
   function read_forever(t, allow_buffering, on_message, on_end_of_batch){
    return read_or_peek_dispatcher
            (t,
             function(param){
              return run
                      (t, allow_buffering, on_message, on_end_of_batch, 914388854);
             },
             cst_Rpc_transport_low_latency_$8);
   }
   function read_forever$0(_bN_){
    var _bO_ = 1;
    return function(_bP_, _bQ_){return read_forever(_bN_, _bO_, _bP_, _bQ_);};
   }
   function close(t){
    if(1 - t[4]){
     t[4] = 1;
     var
      _bL_ =
        function(param){return caml_call2(Async_kernel_Ivar[14], t[5], 0);},
      _bM_ = caml_call2(Async_unix_Fd[12], 0, t[1]);
     caml_call2(Async_rpc_Import[9], _bM_, _bL_);
    }
    return close_finished(t);
   }
   function sexp_of_flush(param){
    var
     ivar_046 = param[2],
     pos_044 = param[1],
     arg_047 = caml_call2(Async_kernel_Ivar[9], Core[620], ivar_046),
     bnds_043 = [0, [1, [0, _S_, [0, arg_047, 0]]], 0],
     arg_045 = caml_call1(Core_Int63[103], pos_044),
     bnds_043$0 = [0, [1, [0, _T_, [0, arg_045, 0]]], bnds_043];
    return [1, bnds_043$0];
   }
   function start_close(t){return caml_call2(Async_kernel_Ivar[16], t[1], 0);}
   function is_able_to_send_data(t){
    return caml_call1(Async_kernel_Ivar[17], t[3]);
   }
   function sexp_of_t$1(param){
    var
     connection_state_060 = param[3],
     config_058 = param[2],
     fd_056 = param[1],
     writing_062 = param[4],
     buf_064 = param[5],
     pos_066 = param[6],
     bytes_written_068 = param[7],
     flushes_072 = param[9],
     monitor_070 = param[8],
     last_send_job_074 = param[10],
     sends_in_this_job_076 = param[11],
     arg_077 = caml_call1(Core[389], sends_in_this_job_076),
     bnds_055 = [0, [1, [0, _X_, [0, arg_077, 0]]], 0],
     arg_075 = caml_call1(Core[389], last_send_job_074),
     bnds_055$0 = [0, [1, [0, _Y_, [0, arg_075, 0]]], bnds_055],
     arg_073 = caml_call2(Core_Queue[13], sexp_of_flush, flushes_072),
     bnds_055$1 = [0, [1, [0, _Z_, [0, arg_073, 0]]], bnds_055$0],
     arg_071 = caml_call1(Async_kernel_Monitor[1], monitor_070),
     bnds_055$2 = [0, [1, [0, ___, [0, arg_071, 0]]], bnds_055$1],
     arg_069 = caml_call1(Core_Int63[103], bytes_written_068),
     bnds_055$3 = [0, [1, [0, _$_, [0, arg_069, 0]]], bnds_055$2],
     arg_067 = caml_call1(Core[389], pos_066),
     bnds_055$4 = [0, [1, [0, _aa_, [0, arg_067, 0]]], bnds_055$3],
     arg_065 = caml_call1(Sexplib0_Sexp_conv[23], buf_064),
     bnds_055$5 = [0, [1, [0, _ab_, [0, arg_065, 0]]], bnds_055$4],
     arg_063 = caml_call1(Core[323], writing_062),
     bnds_055$6 = [0, [1, [0, _ac_, [0, arg_063, 0]]], bnds_055$5],
     connection_lost_053 = connection_state_060[3],
     close_finished_051 = connection_state_060[2],
     close_started_049 = connection_state_060[1],
     arg_054 =
       caml_call2(Async_kernel_Ivar[9], Core[620], connection_lost_053),
     bnds_048 = [0, [1, [0, _U_, [0, arg_054, 0]]], 0],
     arg_052 = caml_call2(Async_kernel_Ivar[9], Core[620], close_finished_051),
     bnds_048$0 = [0, [1, [0, _V_, [0, arg_052, 0]]], bnds_048],
     arg_050 = caml_call2(Async_kernel_Ivar[9], Core[620], close_started_049),
     bnds_048$1 = [0, [1, [0, _W_, [0, arg_050, 0]]], bnds_048$0],
     arg_061 = [1, bnds_048$1],
     bnds_055$7 = [0, [1, [0, _ad_, [0, arg_061, 0]]], bnds_055$6],
     arg_059 = sexp_of_t(config_058),
     bnds_055$8 = [0, [1, [0, _ae_, [0, arg_059, 0]]], bnds_055$7],
     arg_057 = caml_call1(Async_unix_Fd[2], fd_056),
     bnds_055$9 = [0, [1, [0, _af_, [0, arg_057, 0]]], bnds_055$8];
    return [1, bnds_055$9];
   }
   function monitor(r){return r[8];}
   function bytes_written(r){return r[7];}
   function is_closed$0(t){
    var t$0 = t[3];
    return 1 - caml_call1(Async_kernel_Ivar[17], t$0[1]);
   }
   function bytes_to_write(t){return t[6];}
   function stopped(t){
    var
     t$0 = t[3],
     _bJ_ = [0, caml_call1(Async_kernel_Ivar[19], t$0[1]), 0],
     _bK_ = [0, caml_call1(Async_kernel_Ivar[19], t$0[3]), _bJ_];
    return caml_call1(Async_kernel_Deferred[23], _bK_);
   }
   function flushed(t){
    if(caml_call2(Core[90], t[6], 0)) return Async_kernel_Deferred[18];
    if(! is_able_to_send_data(t[3]))
     return caml_call1(Async_kernel_Deferred[19], 0);
    var
     _bH_ = caml_call1(Async_kernel_Ivar[12], 0),
     _bI_ = caml_call1(Core_Int63[72], t[6]),
     flush = [0, caml_call2(Core_Int63[19], t[7], _bI_), _bH_];
    caml_call2(Core_Queue[43], t[9], flush);
    return caml_call1(Async_kernel_Ivar[19], flush[2]);
   }
   function discard(t, n){
    if(caml_call2(Core[88], n, 0) && caml_call2(Core[89], n, t[6])){
     var remaining = t[6] - n | 0;
     if(caml_call2(Core[91], remaining, 0))
      caml_call5(Core_Bigstring[22], t[5], n, t[5], 0, remaining);
     t[6] = remaining;
     var _bG_ = caml_call1(Core_Int63[72], n);
     t[7] = caml_call2(Core_Int63[19], t[7], _bG_);
     for(;;){
      if(! caml_call1(Core_Queue[17], t[9])){
       var _bD_ = t[7], _bE_ = caml_call1(Core_Queue[50], t[9])[1];
       if(caml_call2(Core_Int63[108], _bE_, _bD_)){
        var _bF_ = caml_call1(Core_Queue[46], t[9])[2];
        caml_call2(Async_kernel_Ivar[14], _bF_, 0);
        continue;
       }
      }
      return;
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ag_], 1);
   }
   function handle_error(t, error){
    a:
    if(typeof error === "number"){
     if(31 <= error){
      var _bC_ = error - 32 | 0;
      if(19 < _bC_ >>> 0){
       if(0 <= _bC_)
        switch(_bC_ - 20 | 0){
          case 0:
          case 1:
          case 2:
          case 4:
          case 10:
          case 13: break;
          default: break a;
        }
       var t$0 = t[3];
       caml_call2(Async_kernel_Ivar[16], t$0[3], 0);
       return 1;
      }
      if(5 !== _bC_) break a;
     }
     else if(2 !== error && 11 !== error) break a;
     return 0;
    }
    return 2;
   }
   function finish_close(t){
    var fd_closed = caml_call2(Async_unix_Fd[12], 0, t[1]);
    t[4] = 0;
    var t$0 = t[3];
    start_close(t$0);
    caml_call2(Async_kernel_Ivar[16], t$0[3], 0);
    var _bB_ = caml_call1(Async_kernel_Ivar[16], t$0[2]);
    return caml_call2(Async_rpc_Import[7], fd_closed, _bB_);
   }
   function write_everything(t){
    a:
    {
     try{
      var
       _bx_ = t[5],
       _by_ = [0, t[6]],
       _bz_ = caml_call1(Async_unix_Fd[40], t[1]),
       n = caml_call4(Bigstring_unix[143], _bz_, _ah_, _by_, _bx_);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Async_rpc_Import[18][153])
       throw caml_maybe_attach_backtrace(exn, 0);
      var error = exn[2];
      switch(handle_error(t, error)){
        case 0:
         var match = 0; break a;
        case 1:
         var match = 1; break a;
        default: throw caml_maybe_attach_backtrace(exn, 0);
      }
     }
     discard(t, n);
     var match = 0;
    }
    if(match) return finish_close(t);
    if(! caml_call2(Core[90], t[6], 0)) return wait_and_write_everything(t);
    t[4] = 0;
    var _bA_ = is_closed$0(t);
    return _bA_ ? finish_close(t) : _bA_;
   }
   function wait_and_write_everything(t){
    function _bk_(result){
     if(! is_able_to_send_data(t[3])) return finish_close(t);
     if(typeof result !== "number"){
      var result$0 = result[2];
      if(-102231997 === result$0) return write_everything(t);
      var
       _br_ = 0,
       _bs_ = 0,
       _bt_ = 0,
       _bu_ = -3286312 <= result$0 ? _al_ : _am_,
       _bv_ =
         [0,
          [1,
           [0,
            [1, [0, _ao_, [0, sexp_of_t$1(t), 0]]],
            [0, [1, [0, _an_, [0, _bu_, _bt_]]], _bs_]]],
          _br_],
       _bw_ =
         [1,
          [0,
           caml_call1
            (Sexplib0_Sexp_conv[7], cst_Rpc_transport_low_latency_$11),
           _bv_]];
      return caml_call1(Core[261], _bw_);
     }
     if(caml_call1(Async_log[39][1][4][1], _ai_)){
      var
       _bn_ =
         caml_call3
          (Ppx_log_types_Message_source[3][1],
           cst_async_rpc_src_rpc_transpor,
           775,
           cst_Async_rpc_Rpc_transport_lo),
       _bo_ = [0, [0, cst_t, [5, sexp_of_t$1(t)]], 0],
       _bp_ =
         [0,
          [0, cst_timeout, [5, caml_call1(Core_Time_ns[1][10], t[2][4])]],
          _bo_],
       _bq_ =
         [0,
          348871921,
          caml_call3(Ppx_log_types_Message_sexp[2], 0, _aj_, _bp_)];
      caml_call5(Async_log[39][1][4][3], _ak_, 0, 0, _bq_, _bn_);
     }
     return finish_close(t);
    }
    var
     _bl_ = caml_call2(Async_unix_Fd[28], t[1], -477700929),
     _bm_ = caml_call2(Async_kernel_Clock_ns[5], t[2][4], _bl_);
    return caml_call2(Async_rpc_Import[9], _bm_, _bk_);
   }
   function flush(t){
    var _bh_ = 1 - t[4], _bi_ = _bh_ ? caml_call2(Core[91], t[6], 0) : _bh_;
    if(! _bi_) return _bi_;
    t[4] = 1;
    function _bj_(param){return write_everything(t);}
    return caml_call3(Async_unix_Scheduler[5], [0, t[8]], 0, _bj_);
   }
   function ensure_at_least(t, needed){
    var _bf_ = t[6], _bg_ = caml_call1(Core_Bigstring[21], t[5]) - _bf_ | 0;
    if(caml_call2(Core[92], _bg_, needed)){
     var new_size_request = t[6] + needed | 0;
     t[5] = grow_buffer(t[2], t[5], new_size_request);
    }
    return;
   }
   function copy_bytes(t, buf, pos, len){
    if(caml_call2(Core[91], len, 0)){
     ensure_at_least(t, len);
     caml_call5(Core_Bigstring[22], buf, pos, t[5], t[6], len);
     t[6] = t[6] + len | 0;
    }
    return;
   }
   function slow_write_bin_prot_and_bigstr(t, writer, msg, buf, pos, len){
    var
     payload_len = caml_call1(writer[1], msg) + len | 0,
     total_len = Async_rpc_kernel_Transport[1][1] + payload_len | 0;
    if(! message_size_ok(t[2], payload_len))
     return [1, [0, payload_len, t[2][1]]];
    ensure_at_least(t, total_len);
    caml_call3(Async_rpc_kernel_Transport[1][3], t[5], t[6], payload_len);
    var
     stop =
       caml_call3
        (writer[2], t[5], t[6] + Async_rpc_kernel_Transport[1][1] | 0, msg);
    if(! caml_call2(Core[90], stop + len | 0, t[6] + total_len | 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ap_], 1);
    caml_call5(Core_Bigstring[22], buf, pos, t[5], stop, len);
    t[6] = stop + len | 0;
    return [0, 0, payload_len];
   }
   function send_bin_prot_and_bigstring(t, writer, msg, buf, pos, len){
    if(is_closed$0(t)) return 0;
    var _a$_ = caml_call1(Core_Bigstring[21], buf);
    caml_call3(Core_Ordered_collection_common[2], pos, len, _a$_);
    if(! is_able_to_send_data(t[3])) return _aq_;
    var current_job = caml_call1(Async_unix_Scheduler[33], 0);
    if(caml_call2(Core[90], current_job, t[10]))
     t[11] = t[11] + 1 | 0;
    else{t[10] = current_job; t[11] = 1;}
    var
     _a__ = caml_call2(Core[88], t[6], t[2][5]),
     send_now = _a__ || caml_call2(Core[89], t[11], t[2][6]),
     _ba_ = Async_rpc_kernel_Transport[1][1],
     _bb_ = t[6],
     _bc_ = caml_call1(Core_Bigstring[21], t[5]) - _bb_ | 0;
    a:
    if(caml_call2(Core[92], _bc_, _ba_))
     var
      result$0 = slow_write_bin_prot_and_bigstr(t, writer, msg, buf, pos, len);
    else{
     try{
      var
       stop =
         caml_call3
          (writer[2], t[5], t[6] + Async_rpc_kernel_Transport[1][1] | 0, msg);
     }
     catch(_be_){
      var
       result$0 =
         slow_write_bin_prot_and_bigstr(t, writer, msg, buf, pos, len);
      break a;
     }
     var
      payload_len =
        (stop - (t[6] + Async_rpc_kernel_Transport[1][1] | 0) | 0) + len | 0;
     if(message_size_ok(t[2], payload_len)){
      caml_call3(Async_rpc_kernel_Transport[1][3], t[5], t[6], payload_len);
      t[6] = stop;
      if(send_now){
       var
        len$0 =
          caml_call2(Core[92], len, 128)
           ? (copy_bytes(t, buf, pos, len), 0)
           : len,
        _a8_ = t[6],
        _a9_ = t[5],
        result =
          runtime.async_extra_rpc_writev2_byte
           (caml_call1(Async_unix_Fd[40], t[1]),
            _a9_,
            0,
            _a8_,
            buf,
            pos,
            len$0);
       if(caml_call1(Core_unix[5][2][6], result)){
        var n = caml_call1(Core_unix[5][2][9], result);
        if(caml_call2(Core[89], n, t[6])){
         discard(t, n);
         copy_bytes(t, buf, pos, len$0);
        }
        else{
         var
          written_from_other_buf = n - t[6] | 0,
          remaining_in_other_buf = len$0 - written_from_other_buf | 0;
         discard(t, t[6]);
         if(caml_call2(Core[91], remaining_in_other_buf, 0))
          copy_bytes
           (t, buf, pos + written_from_other_buf | 0, remaining_in_other_buf);
        }
       }
       else{
        var error = caml_call1(Core_unix[5][2][10], result);
        switch(handle_error(t, error)){
          case 0:
           copy_bytes(t, buf, pos, len$0); break;
          case 1: break;
          default:
           var
            syscall = caml_call2(Core[90], len$0, 0) ? cst_write : cst_writev;
           caml_call3
            (Async_kernel_Monitor[15],
             t[8],
             0,
             [0, Async_rpc_Import[18][153], error, syscall, cst$2]);
        }
       }
      }
      else
       copy_bytes(t, buf, pos, len);
      var _bd_ = [0, 0, payload_len];
     }
     else
      var _bd_ = [1, [0, payload_len, t[2][1]]];
     var result$0 = _bd_;
    }
    if(send_now)
     flush(t);
    else{
     var _a5_ = 1 - t[4], _a6_ = _a5_ ? caml_call2(Core[91], t[6], 0) : _a5_;
     if(_a6_){
      t[4] = 1;
      var _a7_ = function(param){return wait_and_write_everything(t);};
      caml_call3(Async_unix_Scheduler[5], [0, t[8]], 0, _a7_);
     }
    }
    return result$0;
   }
   function send_bin_prot_and_bigstring_no(t, writer, msg, buf, pos, len){
    var r = send_bin_prot_and_bigstring(t, writer, msg, buf, pos, len);
    if(typeof r !== "number" && 0 === r[0]){
     var bytes = r[2];
     return [0, Async_kernel_Deferred[18], bytes];
    }
    return r;
   }
   var dummy_buf = caml_call1(Core_Bigstring[121], 0);
   function send_bin_prot(t, writer, msg){
    return send_bin_prot_and_bigstring(t, writer, msg, dummy_buf, 0, 0);
   }
   function close$0(t$0){
    if(1 - is_closed$0(t$0)){
     start_close(t$0[3]);
     flush(t$0);
     if(1 - t$0[4]) finish_close(t$0);
    }
    var t = t$0[3];
    return caml_call1(Async_kernel_Ivar[19], t[2]);
   }
   function make_create(f, opt, max_message_size, fd){
    if(opt) var sth = opt[1], config = sth; else var config = default$0;
    var
     max_message_size$0 = caml_call2(Core[96], config[1], max_message_size),
     config$0 =
       validate
        ([0,
          max_message_size$0,
          config[2],
          config[3],
          config[4],
          config[5],
          config[6]]);
    return caml_call2(f, fd, config$0);
   }
   var
    include = Async_rpc_kernel_Transport[2],
    sexp_of_t$2 = include[1],
    close$1 = include[2],
    is_closed$1 = include[3],
    bytes_read$0 = include[4],
    read_forever$1 = include[5],
    pack = include[6],
    read_one_message_bin_prot = include[7];
   function create_internal(fd, config){
    set_nonblocking(fd);
    var
     _a3_ = Core_Int63[16],
     _a4_ = caml_call1(Core_Bigstring[121], config[2]),
     internal_reader =
       [0,
        fd,
        config,
        0,
        0,
        caml_call1(Async_kernel_Ivar[12], 0),
        _a4_,
        0,
        0,
        _a3_],
     reader =
       caml_call2
        (pack,
         [0, sexp_of_t$0, close, is_closed, bytes_read, read_forever$0],
         internal_reader);
    return [0, internal_reader, reader];
   }
   function create$0(_a0_, _a1_, _a2_){
    return make_create(create_internal, _a0_, _a1_, _a2_);
   }
   function transport_reader(t){return t[2];}
   function read_one_message_bin_prot_with(t, bin_reader){
    var t$0 = t[1];
    function _aY_(_aZ_){return 0;}
    return read_forever
            (t$0,
             0,
             function(buf, pos, len){
              var
               pos_ref = [0, pos],
               x = caml_call2(bin_reader[1], buf, pos_ref);
              return caml_call2(Core[93], pos_ref[1], pos + len | 0)
                      ? caml_call4(Core[246], _Q_, pos_ref[1] - pos | 0, len, 0)
                      : [0, x];
             },
             _aY_);
   }
   function peek_bin_prot(t, bin_reader){
    var t$0 = t[1];
    function on_message(buf, pos, len){
     var pos_ref = [0, pos], x = caml_call2(bin_reader[1], buf, pos_ref);
     return caml_call2(Core[93], pos_ref[1], pos + len | 0)
             ? caml_call4(Core[246], _R_, pos_ref[1] - pos | 0, len, 0)
             : [0, x];
    }
    return read_or_peek_dispatcher
            (t$0,
             function(param){
              var _aW_ = 892210619;
              return run(t$0, 1, on_message, function(_aX_){return 0;}, _aW_);
             },
             cst_Rpc_transport_low_latency_$9);
   }
   function peek_once_without_buffering_fr(t, len){
    var reader = t[1];
    function on_message(buf, param, _aV_){return [0, buf];}
    return read_or_peek_dispatcher
            (reader,
             function(param){
              var
               _aG_ = 0,
               _aH_ = caml_call1(Async_kernel_Ivar[12], 0),
               t =
                 [0,
                  reader,
                  on_message,
                  function(_aU_){return 0;},
                  _aH_,
                  _aG_],
               monitor = caml_call4(Async_kernel_Monitor[3], _G_, 0, _F_, 0),
               buf = caml_call1(Core_Bigstring[121], len);
              stop_watching_on_error(t, monitor);
              function _aI_(param){
               if(-18684779 <= param)
                return caml_call1(Core[6], cst_Rpc_transport_low_latency_$3);
               var _aT_ = t[5];
               if(_aT_){
                var match = _aT_[1];
                if(typeof match === "number")
                 return 0 === match
                         ? caml_call1(Async_kernel_Deferred[19], 0)
                         : caml_call1(Async_rpc_Import[12], _H_);
                if(0 === match[0])
                 return caml_call1(Core[6], cst_Rpc_transport_low_latency_$4);
                var x = match[1];
                return caml_call1(Async_rpc_Import[12], [0, x]);
               }
               if(! caml_call1(Async_unix_Fd[16], t[1][1]) && ! t[1][4])
                throw caml_maybe_attach_backtrace([0, Assert_failure, _J_], 1);
               return caml_call1(Async_rpc_Import[12], _I_);
              }
              function _aJ_(param){
               function _aL_(t){
                var _aP_ = can_process_message(t);
                if(! _aP_) return _aP_;
                function _aQ_(file_descr){
                 return caml_call4
                         (Bigstring_unix[129], file_descr, _K_, len, buf);
                }
                var
                 peek_len = caml_call3(Async_unix_Fd[32], 0, t[1][1], _aQ_);
                if(! caml_call2(Core[88], peek_len, len))
                 return interrupt(t, 1);
                var
                 _aR_ = caml_call1(Core_Int63[72], len),
                 _aS_ = caml_call2(Core_Int63[19], t[1][9], _aR_);
                t[1][9] = _aS_;
                var match = [0, buf];
                if(0 !== match[0])
                 return caml_call1(Core[6], cst_Rpc_transport_low_latency_$5);
                var x = match[1];
                return interrupt(t, [1, x]);
               }
               var
                _aM_ = [0, close_finished(t[1]), 0],
                _aN_ = [0, caml_call1(Async_kernel_Ivar[19], t[4]), _aM_],
                _aO_ = caml_call1(Async_kernel_Deferred[23], _aN_);
               return caml_call5
                       (Async_unix_Fd[29], t[1][1], 914388854, _aO_, _aL_, t);
              }
              var
               _aK_ =
                 caml_call3(Async_unix_Scheduler[4], [0, monitor], 0, _aJ_);
              return caml_call2(Async_rpc_Import[15][2], _aK_, _aI_);
             },
             cst_Rpc_transport_low_latency_$10);
   }
   function create$1(config, max_message_size, fd){
    var internal = make_create(create_internal, config, max_message_size, fd);
    return internal[2];
   }
   var
    include$0 = Async_rpc_kernel_Transport[3],
    sexp_of_t$3 = include$0[1],
    close$2 = include$0[2],
    is_closed$2 = include$0[3],
    monitor$0 = include$0[4],
    bytes_to_write$0 = include$0[5],
    bytes_written$0 = include$0[6],
    stopped$0 = include$0[7],
    flushed$0 = include$0[8],
    ready_to_write = include$0[9],
    send_bin_prot$0 = include$0[10],
    send_bin_prot_and_bigstring$0 = include$0[11],
    send_bin_prot_and_bigstring_no$0 = include$0[12],
    pack$0 = include$0[13],
    can_send = include$0[14],
    transfer = include$0[15];
   function create_internal$0(fd, config){
    set_nonblocking(fd);
    var
     _aC_ = caml_call2(Core_Queue[66], 0, 0),
     _aD_ = caml_call4(Async_kernel_Monitor[3], 0, 0, 0, 0),
     _aE_ = Core_Int63[16],
     _aF_ = caml_call1(Core_Bigstring[121], config[2]),
     _aA_ = caml_call1(Async_kernel_Ivar[12], 0),
     _aB_ = caml_call1(Async_kernel_Ivar[12], 0);
    return caml_call2
            (pack$0,
             [0,
              sexp_of_t$1,
              close$0,
              is_closed$0,
              monitor,
              bytes_to_write,
              bytes_written,
              stopped,
              flushed,
              flushed,
              send_bin_prot,
              send_bin_prot_and_bigstring,
              send_bin_prot_and_bigstring_no],
             [0,
              fd,
              config,
              [0, caml_call1(Async_kernel_Ivar[12], 0), _aB_, _aA_],
              0,
              _aF_,
              0,
              _aE_,
              _aD_,
              _aC_,
              0,
              0]);
   }
   function create$2(_ax_, _ay_, _az_){
    return make_create(create_internal$0, _ax_, _ay_, _az_);
   }
   function sexp_of_t$4(param){
    var
     writer_081 = param[2],
     reader_079 = param[1],
     arg_082 = caml_call1(sexp_of_t$3, writer_081),
     bnds_078 = [0, [1, [0, _ar_, [0, arg_082, 0]]], 0],
     arg_080 = caml_call1(sexp_of_t$2, reader_079),
     bnds_078$0 = [0, [1, [0, _as_, [0, arg_080, 0]]], bnds_078];
    return [1, bnds_078$0];
   }
   function create_internal$1(fd, config){
    var _aw_ = create_internal$0(fd, config);
    return [0, create_internal(fd, config), _aw_];
   }
   function create$3(_at_, _au_, _av_){
    return make_create(create_internal$1, _at_, _au_, _av_);
   }
   var close$3 = Async_rpc_kernel_Transport[5];
   function create$4(config, max_message_size, fd){
    var
     internal = make_create(create_internal$1, config, max_message_size, fd);
    return [0, internal[1][2], internal[2]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_Rpc_transport_lo$0);
   var
    Async_rpc_Rpc_transport_low_la =
      [0,
       [0, t_of_sexp, sexp_of_t, create],
       [0,
        sexp_of_t$2,
        close$1,
        is_closed$1,
        bytes_read$0,
        read_forever$1,
        pack,
        read_one_message_bin_prot,
        create$1,
        [0,
         create$0,
         transport_reader,
         read_one_message_bin_prot_with,
         peek_bin_prot,
         peek_once_without_buffering_fr]],
       [0,
        sexp_of_t$3,
        close$2,
        is_closed$2,
        monitor$0,
        bytes_to_write$0,
        bytes_written$0,
        stopped$0,
        flushed$0,
        ready_to_write,
        send_bin_prot$0,
        send_bin_prot_and_bigstring$0,
        send_bin_prot_and_bigstring_no$0,
        pack$0,
        can_send,
        transfer,
        create$2],
       sexp_of_t$4,
       close$3,
       create$4,
       [0, create$3]];
   runtime.caml_register_global
    (147, Async_rpc_Rpc_transport_low_la, cst_Async_rpc_Rpc_transport_lo$1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc__Rpc_transport
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Monitor, Async_rpc__Import, Async_rpc_kernel, Async_rpc_kernel__Transport, Async_unix__Async_sys, Async_unix__Fd, Async_unix__Reader, Async_unix__Tcp, Async_unix__Unix_syscalls, Async_unix__Writer, Core, Core__Int, Core__Int63, Core__List, Core__Option, Core__Or_error, Core__Time_ns, Expect_test_config, Inline_test_config, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Async_rpc_Rpc_transport$0 = "Async_rpc__Rpc_transport",
    cst_async_rpc$0 = "async_rpc",
    cst_async_rpc_src_rpc_transpor$0 = "async_rpc/src/rpc_transport.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    max_message_size_env_var = "ASYNC_RPC_MAX_MESSAGE_SIZE",
    Core_Time_ns = global_data.Core__Time_ns,
    Async_unix_Tcp = global_data.Async_unix__Tcp,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_rpc_Import = global_data.Async_rpc__Import,
    Async_rpc_kernel = global_data.Async_rpc_kernel,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Linux_ext = global_data.Linux_ext,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Async_unix_Writer = global_data.Async_unix__Writer,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Int63 = global_data.Core__Int63,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_List = global_data.Core__List,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Int = global_data.Core__Int,
    Async_unix_Async_sys = global_data.Async_unix__Async_sys,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_Rpc_transport$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_async_rpc_src_rpc_transpor$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc$0, "rpc_transport.ml");
   var
    _m_ = [0, 3804260],
    _n_ = [0, 523273847],
    cst_Error_getting_peer_credent =
      "Error getting peer credentials of unix socket",
    _k_ = [0, -146189108],
    _l_ = [0, 523273847],
    _i_ = [0, "writer"],
    _j_ = [0, "reader"],
    _h_ = [1, 3456156],
    _e_ = [0, "Message_size"],
    _f_ = [0, "Max_message_size"],
    cst_env_var = " env var",
    cst_Rpc_transport_message_is_t =
      "Rpc_transport: message is too large or has negative size. Try increasing the size limit by setting the ",
    _g_ = [0, cst_async_rpc_src_rpc_transpor$0, 104, 3158, 3172],
    _d_ =
      [0,
       [11,
        "Rpc_transport.With_limit.create got negative max message size: ",
        [4, 0, 0, 0, 0]],
       "Rpc_transport.With_limit.create got negative max message size: %d"],
    _a_ = [0, "total_bytes"],
    _b_ = [0, "max_message_size"],
    _c_ = [0, "t"],
    _p_ = [0, "effective_max"],
    _q_ = [0, "proposed_max"],
    _r_ = [0, 1],
    _s_ = [0, 1024],
    _t_ =
      [0,
       [0,
        [0,
         "\n    ((proposed_max ()) (effective_max 104857600))\n    ((proposed_max (1)) (effective_max 1))\n    ((proposed_max (209715200)) (effective_max 209715200))\n    ",
         [0, cst]],
        [0, 1214, 1218, 1379]]],
    _u_ = [0, 1203, 1205, 1380],
    _x_ =
      [0,
       [0,
        [0,
         "\n    ((proposed_max ()) (effective_max 1024))\n    ((proposed_max (1)) (effective_max 1024))\n    ((proposed_max (209715200)) (effective_max 209715200))\n    ",
         [0, cst]],
        [0, 1448, 1452, 1611]]],
    _y_ = [0, 1437, 1439, 1612],
    _B_ =
      [0,
       [0,
        [0,
         "\n    ((proposed_max ()) (effective_max 314572800))\n    ((proposed_max (1)) (effective_max 314572800))\n    ((proposed_max (209715200)) (effective_max 314572800))\n    ",
         [0, cst]],
        [0, 1695, 1699, 1868]]],
    _C_ = [0, 1684, 1686, 1869],
    _F_ = [0, " "],
    _I_ = [0, 780, 780, 1869],
    _J_ = [0, 1862, 1869, 1869],
    _K_ = [0, 780, 780, 1869],
    cst_async_rpc_src_rpc_transpor = cst_async_rpc_src_rpc_transpor$0,
    cst_async_rpc = cst_async_rpc$0,
    cst_Async_rpc_Rpc_transport = cst_Async_rpc_Rpc_transport$0,
    max_message_size_from_environm =
      [246,
       function(_aR_){
        function _aS_(param){
         var
          _aT_ = Core_Int[78],
          _aU_ =
            caml_call1(Async_unix_Async_sys[14], max_message_size_env_var);
         return caml_call2(Core_Option[34], _aU_, _aT_);
        }
        return caml_call1(Core_Option[57], _aS_);
       }];
   function aux_effective_max_message_size
   (max_message_size_from_environm, proposed_max){
    var default$0 = 104857600;
    if(proposed_max){
     var x = proposed_max[1];
     if(max_message_size_from_environm){
      var y = max_message_size_from_environm[1];
      return caml_call2(Core_Int[90], x, y);
     }
     var x$0 = x;
    }
    else{
     if(! max_message_size_from_environm) return default$0;
     var x$0 = max_message_size_from_environm[1];
    }
    return x$0;
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _o_ =
       function(param){
        function test(max_message_size_from_environm){
         function _aO_(proposed_max){
          var
           effective_max =
             aux_effective_max_message_size
              (max_message_size_from_environm, proposed_max),
           _aP_ =
             [0,
              [1, [0, _p_, [0, caml_call1(Core[389], effective_max), 0]]],
              0],
           _aQ_ =
             [1,
              [0,
               [1,
                [0,
                 _q_,
                 [0, caml_call2(Core[515], Core[389], proposed_max), 0]]],
               _aP_]];
          return caml_call2(Async_rpc_Import[74], 0, _aQ_);
         }
         return caml_call2
                 (Core_List[19],
                  [0, 0, [0, _r_, [0, [0, 209715200], 0]]],
                  _aO_);
        }
        test(0);
        var _aL_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _aL_);
        test(_s_);
        var _aM_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _aM_);
        test([0, 314572800]);
        var _aN_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        return caml_call1(Ppx_expect_test_block[2], _aN_);
       },
     _v_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _u_,
         _t_),
     _w_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _v_], 0],
     _z_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _y_,
         _x_),
     _A_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _z_], _w_],
     _D_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _C_,
         _B_),
     _E_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _D_], _A_],
     _G_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4),
     _H_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_async_rpc_src_rpc_transpor,
      27,
      _K_,
      _J_,
      _I_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _H_,
      _G_,
      _F_,
      0,
      Inline_test_config,
      _E_,
      _o_);
   }
   function effective_max_message_size(proposed_max){
    var
     max_message_size_from_environm$0 =
       caml_call1(Core[248], max_message_size_from_environm);
    return aux_effective_max_message_size
            (max_message_size_from_environm$0, proposed_max);
   }
   function sexp_of_t(of_a_002, param){
    var
     max_message_size_006 = param[2],
     t_004 = param[1],
     total_bytes_008 = param[3],
     arg_009 = caml_call1(Core_Int63[103], total_bytes_008),
     bnds_003 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Core[389], max_message_size_006),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_003],
     arg_005 = caml_call1(of_a_002, t_004),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003$0];
    return [1, bnds_003$1];
   }
   function create(t, max_message_size){
    var max_message_size$0 = effective_max_message_size(max_message_size);
    if(caml_call2(Core[92], max_message_size$0, 0))
     caml_call3(Core[246], _d_, max_message_size$0, 0);
    return [0, t, max_message_size$0, Core_Int63[16]];
   }
   function message_size_ok(t, payload_len){
    var _aK_ = caml_call2(Core[88], payload_len, 0);
    return _aK_ ? caml_call2(Core[89], payload_len, t[2]) : _aK_;
   }
   function incr_total_bytes(t, bytes){
    var _aJ_ = caml_call1(Core_Int63[72], bytes);
    t[3] = caml_call2(Core_Int63[19], t[3], _aJ_);
    return;
   }
   function sexp_of_t$0(x_016){return sexp_of_t(Async_unix_Reader[3], x_016);}
   function close(t){return caml_call1(Async_unix_Reader[15], t[1]);}
   function is_closed(t){return caml_call1(Async_unix_Reader[17], t[1]);}
   function bytes_read(t){return t[3];}
   function all_unit_then_return(l, ret_val){
    if(! l) return caml_call1(Async_rpc_Import[12], ret_val);
    function _aH_(param){return ret_val;}
    var _aI_ = caml_call1(Async_kernel_Deferred[22], l);
    return caml_call2(Async_rpc_Import[15][3], _aI_, _aH_);
   }
   function read_forever(t, on_message, on_end_of_batch){
    function finish_loop(consumed, need, wait_before_reading){
     caml_call1(on_end_of_batch, 0);
     return all_unit_then_return
             (wait_before_reading,
              [0, 116552, [0, consumed, [0, 870031478, need]]]);
    }
    function handle_chunk(buf, pos$2, len$2){
     var pos = pos$2, len = len$2, consumed = 0, wait_before_reading = 0;
     for(;;){
      if(caml_call2(Core[92], len, Async_rpc_kernel_Transport[1][1]))
       return finish_loop
               (consumed,
                Async_rpc_kernel_Transport[1][1],
                wait_before_reading);
      var
       payload_len = caml_call2(Async_rpc_kernel_Transport[1][2], buf, pos),
       total_len = Async_rpc_kernel_Transport[1][1] + payload_len | 0;
      if(1 - message_size_ok(t, payload_len)){
       var
        _aC_ =
          function(param){
           var
            arg1_013 = param[2],
            arg0_012 = param[1],
            v_010 = arg0_012[2],
            res0_014 = [1, [0, _e_, [0, caml_call1(Core[389], v_010), 0]]],
            v_011 = arg1_013[2],
            res1_015 = [1, [0, _f_, [0, caml_call1(Core[389], v_011), 0]]];
           return [1, [0, res0_014, [0, res1_015, 0]]];
          },
        _aD_ = [0, [0, 183140761, payload_len], [0, -1017527468, t[2]]],
        _aE_ =
          [0,
           max_message_size_env_var,
           [0, caml_call1(Ppx_string_runtime[1][2], cst_env_var), 0]],
        _aF_ =
          [0,
           caml_call1
            (Ppx_string_runtime[1][2], cst_Rpc_transport_message_is_t),
           _aE_],
        _aG_ = caml_call1(Ppx_string_runtime[1][4], _aF_);
       caml_call5(Core[247], 0, _g_, _aG_, _aD_, _aC_);
      }
      if(caml_call2(Core[92], len, total_len))
       return finish_loop(consumed, total_len, wait_before_reading);
      var consumed$0 = consumed + total_len | 0;
      incr_total_bytes(t, payload_len);
      var
       result =
         caml_call3
          (on_message,
           buf,
           pos + Async_rpc_kernel_Transport[1][1] | 0,
           payload_len);
      if(typeof result === "number")
       var
        len$0 = len - total_len | 0,
        pos$0 = pos + total_len | 0,
        pos = pos$0,
        len = len$0,
        consumed = consumed$0;
      else{
       if(0 === result[0]){
        var x = result[1];
        return all_unit_then_return
                (wait_before_reading, [0, -686730715, [0, x, consumed$0]]);
       }
       var
        d = result[1],
        wait_before_reading$0 =
          caml_call1(Async_kernel_Deferred[7], d)
           ? wait_before_reading
           : [0, d, wait_before_reading],
        len$1 = len - total_len | 0,
        pos$1 = pos + total_len | 0,
        pos = pos$1,
        len = len$1,
        consumed = consumed$0,
        wait_before_reading = wait_before_reading$0;
      }
     }
    }
    function _aA_(param){
     if(typeof param !== "number" && 280164845 <= param[1]){var x = param[2]; return [0, x];}
     return _h_;
    }
    var _aB_ = caml_call2(Async_unix_Reader[29], t[1], handle_chunk);
    return caml_call2(Async_rpc_Import[15][3], _aB_, _aA_);
   }
   function sexp_of_t$1(x_018){return sexp_of_t(Async_unix_Writer[3], x_018);}
   function close$0(t){return caml_call2(Async_unix_Writer[65], 0, t[1]);}
   function is_closed$0(t){return caml_call1(Async_unix_Writer[68], t[1]);}
   function monitor(t){return caml_call1(Async_unix_Writer[64], t[1]);}
   function bytes_to_write(t){return caml_call1(Async_unix_Writer[75], t[1]);}
   function bytes_written(t){return t[3];}
   function stopped(t){
    var
     _ay_ = [0, caml_call1(Async_unix_Writer[22], t[1]), 0],
     _az_ = [0, caml_call1(Async_unix_Writer[66], t[1]), _ay_];
    return caml_call1(Async_kernel_Deferred[23], _az_);
   }
   function flushed(t){return caml_call1(Async_unix_Writer[58], t[1]);}
   function bin_write_payload_length(buf, pos, x){
    caml_call3(Async_rpc_kernel_Transport[1][3], buf, pos, x);
    return pos + Async_rpc_kernel_Transport[1][1] | 0;
   }
   function send_bin_prot_internal(t, bin_writer, x, followup_len){
    if(caml_call1(Async_unix_Writer[68], t[1])) return 0;
    var
     data_len = caml_call1(bin_writer[1], x),
     payload_len = data_len + followup_len | 0;
    return message_size_ok(t, payload_len)
            ? (incr_total_bytes
               (t, payload_len),
              caml_call4
               (Async_unix_Writer[47],
                t[1],
                Async_rpc_kernel_Transport[1][1],
                bin_write_payload_length,
                payload_len),
              caml_call4
               (Async_unix_Writer[47], t[1], data_len, bin_writer[2], x),
              [0, 0, payload_len])
            : [1, [0, payload_len, t[2]]];
   }
   function send_bin_prot(t, bin_writer, x){
    return send_bin_prot_internal(t, bin_writer, x, 0);
   }
   function send_bin_prot_and_bigstring(t, bin_writer, x, buf, pos, len){
    var result = send_bin_prot_internal(t, bin_writer, x, len);
    if(typeof result !== "number" && 0 === result[0]){
     caml_call4(Async_unix_Writer[34], [0, pos], [0, len], t[1], buf);
     return result;
    }
    return result;
   }
   function send_bin_prot_and_bigstring_no(t, bin_writer, x, buf, pos, len){
    var r = send_bin_prot_internal(t, bin_writer, x, len);
    if(typeof r !== "number" && 0 === r[0]){
     var bytes = r[2];
     caml_call4(Async_unix_Writer[48], t[1], [0, pos], [0, len], buf);
     return [0, caml_call1(Async_unix_Writer[58], t[1]), bytes];
    }
    return r;
   }
   var
    include = Async_rpc_kernel_Transport[2],
    sexp_of_t$2 = include[1],
    close$1 = include[2],
    is_closed$1 = include[3],
    bytes_read$0 = include[4],
    read_forever$0 = include[5],
    pack = include[6],
    read_one_message_bin_prot = include[7];
   function of_reader(max_message_size, reader){
    return caml_call2
            (pack,
             [0, sexp_of_t$0, close, is_closed, bytes_read, read_forever],
             create(reader, max_message_size));
   }
   var
    Reader =
      [0,
       sexp_of_t$2,
       close$1,
       is_closed$1,
       bytes_read$0,
       read_forever$0,
       pack,
       read_one_message_bin_prot,
       of_reader],
    include$0 = Async_rpc_kernel_Transport[3],
    sexp_of_t$3 = include$0[1],
    close$2 = include$0[2],
    is_closed$2 = include$0[3],
    monitor$0 = include$0[4],
    bytes_to_write$0 = include$0[5],
    bytes_written$0 = include$0[6],
    stopped$0 = include$0[7],
    flushed$0 = include$0[8],
    ready_to_write = include$0[9],
    send_bin_prot$0 = include$0[10],
    send_bin_prot_and_bigstring$0 = include$0[11],
    send_bin_prot_and_bigstring_no$0 = include$0[12],
    pack$0 = include$0[13],
    can_send = include$0[14],
    transfer = include$0[15];
   function of_writer(max_message_size, writer){
    caml_call2(Async_unix_Writer[20], writer, 0);
    return caml_call2
            (pack$0,
             [0,
              sexp_of_t$1,
              close$0,
              is_closed$0,
              monitor,
              bytes_to_write,
              bytes_written,
              stopped,
              flushed,
              flushed,
              send_bin_prot,
              send_bin_prot_and_bigstring,
              send_bin_prot_and_bigstring_no],
             create(writer, max_message_size));
   }
   var
    Writer =
      [0,
       sexp_of_t$3,
       close$2,
       is_closed$2,
       monitor$0,
       bytes_to_write$0,
       bytes_written$0,
       stopped$0,
       flushed$0,
       ready_to_write,
       send_bin_prot$0,
       send_bin_prot_and_bigstring$0,
       send_bin_prot_and_bigstring_no$0,
       pack$0,
       can_send,
       transfer,
       of_writer];
   function sexp_of_t$4(param){
    var
     writer_022 = param[2],
     reader_020 = param[1],
     arg_023 = caml_call1(Writer[1], writer_022),
     bnds_019 = [0, [1, [0, _i_, [0, arg_023, 0]]], 0],
     arg_021 = caml_call1(Reader[1], reader_020),
     bnds_019$0 = [0, [1, [0, _j_, [0, arg_021, 0]]], bnds_019];
    return [1, bnds_019$0];
   }
   var close$3 = Async_rpc_kernel_Transport[5];
   function of_reader_writer(max_message_size, reader, writer){
    var _ax_ = caml_call2(Writer[16], max_message_size, writer);
    return [0, caml_call2(Reader[8], max_message_size, reader), _ax_];
   }
   function of_fd
   (buffer_age_limit,
    reader_buffer_size,
    writer_buffer_size,
    max_message_size,
    fd){
    var
     _aw_ =
       caml_call7
        (Async_unix_Writer[18],
         writer_buffer_size,
         0,
         buffer_age_limit,
         0,
         0,
         0,
         fd);
    return of_reader_writer
            ([0, max_message_size],
             caml_call2(Async_unix_Reader[12], reader_buffer_size, fd),
             _aw_);
   }
   function default_transport_maker(fd, max_message_size){return of_fd(0, 0, 0, max_message_size, fd);
   }
   function make_serve_func_with_fd
   (tcp_creator,
    where_to_listen,
    max_connections,
    backlog,
    drop_incoming_connections,
    time_source,
    proposed_max,
    opt,
    _aq_,
    _ap_,
    handle_transport){
    if(opt)
     var sth = opt[1], make_transport = sth;
    else
     var make_transport = default_transport_maker;
    if(_aq_)
     var sth$0 = _aq_[1], auth = sth$0;
    else
     var auth = function(param){return 1;};
    if(_ap_)
     var sth$1 = _ap_[1], on_handler_error = sth$1;
    else
     var on_handler_error = -950194894;
    return caml_call9
            (tcp_creator,
             max_connections,
             0,
             backlog,
             drop_incoming_connections,
             0,
             time_source,
             on_handler_error,
             where_to_listen,
             function(client_addr, socket){
              if(! caml_call1(auth, client_addr))
               return caml_call1(Async_rpc_Import[12], 0);
              var
               max_message_size = effective_max_message_size(proposed_max),
               fd = caml_call1(Async_unix_Unix_syscalls[95][18], socket),
               transport = caml_call2(make_transport, fd, max_message_size);
              function _ar_(result){
               function _au_(param){
                if(0 === result[0])
                 return caml_call1(Async_rpc_Import[12], 0);
                var exn = result[1];
                throw caml_maybe_attach_backtrace(exn, 0);
               }
               var _av_ = caml_call1(close$3, transport);
               return caml_call2(Async_rpc_Import[15][2], _av_, _au_);
              }
              function _as_(param){
               return caml_call4
                       (handle_transport,
                        fd,
                        client_addr,
                        caml_call1(Async_unix_Unix_syscalls[95][20], socket),
                        transport);
              }
              var
               _at_ =
                 caml_call7
                  (Async_kernel_Monitor[16], 0, 0, 0, 0, _l_, _k_, _as_);
              return caml_call2(Async_rpc_Import[15][2], _at_, _ar_);
             });
   }
   function make_serve_func
   (tcp_creator,
    where_to_listen,
    max_connections,
    backlog,
    drop_incoming_connections,
    time_source,
    max_message_size,
    make_transport,
    auth,
    on_handler_error,
    handle_transport){
    return make_serve_func_with_fd
            (tcp_creator,
             where_to_listen,
             max_connections,
             backlog,
             drop_incoming_connections,
             time_source,
             max_message_size,
             make_transport,
             auth,
             on_handler_error,
             function(param, client_addr, server_addr, transport){
              return caml_call3
                      (handle_transport, client_addr, server_addr, transport);
             });
   }
   function serve(where_to_listen){
    var _af_ = Async_unix_Tcp[8][11];
    return function(_ag_, _ah_, _ai_, _aj_, _ak_, _al_, _am_, _an_, _ao_){
     return make_serve_func
             (_af_,
              where_to_listen,
              _ag_,
              _ah_,
              _ai_,
              _aj_,
              _ak_,
              _al_,
              _am_,
              _an_,
              _ao_);};
   }
   function serve_inet(where_to_listen){
    var _X_ = Async_unix_Tcp[8][12];
    return function(_Y_, _Z_, ___, _$_, _aa_, _ab_, _ac_, _ad_, _ae_){
     return make_serve_func
             (_X_,
              where_to_listen,
              _Y_,
              _Z_,
              ___,
              _$_,
              _aa_,
              _ab_,
              _ac_,
              _ad_,
              _ae_);};
   }
   function serve_unix
   (where_to_listen,
    max_connections,
    backlog,
    drop_incoming_connections,
    time_source,
    max_message_size,
    make_transport,
    auth,
    on_handler_error,
    handle_transport){
    function _S_(fd, client_addr, server_addr, transport){
     function _T_(param){
      var _W_ = caml_call1(Async_unix_Fd[40], fd);
      return caml_call1(caml_call1(Core[255], Linux_ext[32]), _W_);
     }
     var
      _U_ = caml_call2(Core_Or_error[37], 0, _T_),
      _V_ = caml_call2(Core_Or_error[48], _U_, cst_Error_getting_peer_credent),
      peer_credentials = caml_call1(Core[255], _V_);
     return caml_call4
             (handle_transport,
              client_addr,
              server_addr,
              peer_credentials,
              transport);
    }
    return make_serve_func_with_fd
            (Async_unix_Tcp[8][11],
             where_to_listen,
             max_connections,
             backlog,
             drop_incoming_connections,
             time_source,
             max_message_size,
             make_transport,
             auth,
             on_handler_error,
             _S_);
   }
   function connect(proposed_max, opt, _L_, where_to_connect){
    if(opt)
     var sth = opt[1], make_transport = sth;
    else
     var make_transport = default_transport_maker;
    if(_L_)
     var sth$0 = _L_[1], tcp_connect_timeout = sth$0;
    else
     var tcp_connect_timeout = Async_rpc_kernel[3][3];
    function _M_(sock){
     if(0 !== sock[0]) return caml_call1(Async_rpc_Import[12], sock);
     var sock$0 = sock[1];
     try{
      var
       sock_peername = caml_call1(Async_unix_Unix_syscalls[95][21], sock$0);
     }
     catch(exn_could_be_raised_if_the_soc$0){
      var
       exn_could_be_raised_if_the_soc =
         caml_wrap_exception(exn_could_be_raised_if_the_soc$0);
      caml_call2(Async_unix_Unix_syscalls[95][17], sock$0, 737457313);
      var
       _Q_ = caml_call1(Async_unix_Unix_syscalls[95][18], sock$0),
       _R_ = caml_call2(Async_rpc_Import[18][16], 0, _Q_);
      caml_call1(Async_rpc_Import[4], _R_);
      return caml_call1
              (Async_rpc_Import[12], [1, exn_could_be_raised_if_the_soc]);
     }
     var
      max_message_size = effective_max_message_size(proposed_max),
      transport =
        caml_call2
         (make_transport,
          caml_call1(Async_unix_Unix_syscalls[95][18], sock$0),
          max_message_size);
     return caml_call1
             (Async_rpc_Import[12], [0, [0, transport, sock_peername]]);
    }
    function _N_(param){
     var _P_ = [0, caml_call1(Core_Time_ns[1][144], tcp_connect_timeout)];
     return caml_call5(Async_unix_Tcp[3], 0, 0, _P_, 0, where_to_connect);
    }
    var _O_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _n_, _m_, _N_);
    return caml_call2(Async_rpc_Import[15][2], _O_, _M_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_Rpc_transport);
   var
    Async_rpc_Rpc_transport =
      [0,
       Reader,
       Writer,
       sexp_of_t$4,
       close$3,
       of_reader_writer,
       of_fd,
       [0, serve, serve_inet, serve_unix, connect]];
   runtime.caml_register_global
    (69, Async_rpc_Rpc_transport, cst_Async_rpc_Rpc_transport$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc__Rpc
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Monitor, Async_rpc__Import, Async_rpc__Rpc_transport, Async_rpc_kernel, Async_rpc_kernel__Rpc, Async_rpc_kernel__Util, Async_unix__Async_sys, Async_unix__Reader, Async_unix__Tcp, Async_unix__Unix_syscalls, Base__Exn, Bigstring_unix, Core, Core__Info, Core__Option, Core__Pid, Core__Result, Core__String, Core__Time_ns, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Async_rpc_Rpc$0 = "Async_rpc__Rpc",
    cst = "_",
    cst_async_rpc$0 = "async_rpc",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Util = global_data.Async_rpc_kernel__Util,
    Core = global_data.Core,
    Core_unix = global_data.Core_unix,
    Core_Option = global_data.Core__Option,
    Bigstring_unix = global_data.Bigstring_unix,
    Base_Exn = global_data.Base__Exn,
    Core_Pid = global_data.Core__Pid,
    Core_Info = global_data.Core__Info,
    Async_rpc_Import = global_data.Async_rpc__Import,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_rpc_Rpc_transport = global_data.Async_rpc__Rpc_transport,
    Async_unix_Tcp = global_data.Async_unix__Tcp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Result = global_data.Core__Result,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel = global_data.Async_rpc_kernel,
    Async_unix_Async_sys = global_data.Async_unix__Async_sys,
    Core_String = global_data.Core__String;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_Rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc$0);
   caml_call1(Ppx_expect_runtime[1][1], "async_rpc/src/rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc$0, "rpc.ml");
   var
    include = Async_rpc_kernel_Rpc[5],
    sexp_of_t = include[1],
    Client_implementations = include[3],
    description = include[6],
    add_heartbeat_callback = include[7],
    reset_heartbeat_timeout = include[8],
    last_seen_alive = include[9],
    close = include[10],
    close_finished = include[11],
    close_reason = include[12],
    is_closed = include[13],
    bytes_to_write = include[14],
    bytes_written = include[15],
    bytes_read = include[16],
    flushed = include[17],
    peer_menu = include[18],
    peer_menu$0 = include[19],
    my_menu = include[20],
    peer_identification = include[21],
    _p_ =
      [0,
       [11,
        "Tried and failed to dump internal buffer to ",
        [2, 0, [11, " (offset ", [4, 0, 0, 0, [11, "): ", [2, 0, 0]]]]]],
       "Tried and failed to dump internal buffer to %s (offset %d): %s"],
    _q_ =
      [0,
       [11,
        "Dump of buffer written to ",
        [2, 0, [11, ". This message begins at offset ", [4, 0, 0, 0, 0]]]],
       "Dump of buffer written to %s. This message begins at offset %d"],
    cst_dev_shm_rpc_message_reader =
      "/dev/shm/rpc-message-reader-errors__pid_",
    cst_Rpc_Connection_with_client = "Rpc.Connection.with_client finished",
    _n_ = [0, 3804260],
    _o_ = [0, 523273847],
    _m_ = [0, cst],
    _l_ = [0, cst],
    cst_via_TCP = "via TCP",
    cst_Client_connected_via_TCP = "Client connected via TCP",
    _j_ = [0, "client_addr"],
    _k_ = [0, "server_addr"],
    cst_TCP_server = "TCP server",
    _g_ = [0, 3804260],
    _h_ = [0, 523273847],
    _i_ = [0, "Rpc.Connection.collect_errors"],
    _e_ = [0, 3804260],
    _f_ = [0, 523273847],
    cst_ASYNC_RPC_DEBUG_DUMP_DESER =
      "ASYNC_RPC_DEBUG_DUMP_DESERIALIZATION_ERRORS",
    cst_dev_shm = "/dev/shm",
    cst_ASYNC_RPC_DEBUG_DUMP_MESSA =
      "ASYNC_RPC_DEBUG_DUMP_MESSAGE_LENGTH_ERRORS",
    cst_async_rpc = cst_async_rpc$0,
    cst_Async_rpc_Rpc = cst_Async_rpc_Rpc$0,
    _a_ = include[4],
    _b_ = include[5],
    _c_ = include[22],
    _d_ = include[23];
   function create
   (implementations,
    connection_state,
    max_message_size,
    handshake_timeout,
    heartbeat_config,
    description,
    identification,
    reader,
    writer){
    var
     _a2_ =
       caml_call3
        (Async_rpc_Rpc_transport[5], max_message_size, reader, writer);
    return caml_call10
            (_a_,
             implementations,
             0,
             connection_state,
             caml_call2
              (Core_Option[34], handshake_timeout, Core_Time_ns[1][146]),
             heartbeat_config,
             0,
             description,
             0,
             identification,
             _a2_);
   }
   function contains_magic_prefix(reader){
    function _aZ_(param){
     if(0 === param[0]){
      var match = param[1];
      if(typeof match !== "number"){var b = match[2]; return b;}
     }
     return 0;
    }
    function _a0_(param){
     return caml_call3(Async_unix_Reader[46], 0, reader, _b_);
    }
    var
     _a1_ =
       caml_call6(Async_kernel_Deferred_or_error[38], 0, _f_, _e_, 0, 0, _a0_);
    return caml_call2(Async_rpc_Import[15][3], _a1_, _aZ_);
   }
   function with_close
   (implementations,
    max_message_size,
    handshake_timeout,
    heartbeat_config,
    description,
    connection_state,
    reader,
    writer,
    dispatch_queries,
    on_handshake_error){
    var
     _aY_ =
       caml_call3
        (Async_rpc_Rpc_transport[5], max_message_size, reader, writer);
    return caml_call10
            (_c_,
             implementations,
             0,
             caml_call2
              (Core_Option[34], handshake_timeout, Core_Time_ns[1][146]),
             heartbeat_config,
             description,
             0,
             connection_state,
             _aY_,
             dispatch_queries,
             on_handshake_error);
   }
   function server_with_close
   (max_message_size,
    handshake_timeout,
    heartbeat_config,
    description,
    reader,
    writer,
    implementations,
    connection_state,
    on_handshake_error){
    var
     _aX_ =
       caml_call3
        (Async_rpc_Rpc_transport[5], max_message_size, reader, writer);
    return caml_call8
            (_d_,
             caml_call2
              (Core_Option[34], handshake_timeout, Core_Time_ns[1][146]),
             heartbeat_config,
             description,
             0,
             _aX_,
             implementations,
             connection_state,
             on_handshake_error);
   }
   function serve_with_transport
   (identification,
    transport,
    handshake_timeout,
    heartbeat_config,
    implementations,
    description,
    connection_state,
    on_handshake_error,
    client_addr){
    function _aQ_(res){
     function _aV_(param){return caml_call1(Core_Result[40], res);}
     var _aW_ = caml_call1(Async_rpc_Rpc_transport[4], transport);
     return caml_call2(Async_rpc_Import[15][3], _aW_, _aV_);
    }
    function f(param){
     function _aS_(param){
      if(0 === param[0]){
       var t = param[1];
       return caml_call1(close_finished, t);
      }
      var handshake_error = param[1];
      if(typeof on_handshake_error === "number"){
       if(-146189108 <= on_handshake_error)
        throw caml_maybe_attach_backtrace(handshake_error, 0);
      }
      else{
       var f = on_handshake_error[2];
       caml_call2(f, client_addr, handshake_error);
      }
      return Async_kernel_Deferred[18];
     }
     var
      _aT_ =
        caml_call2(Core_Option[34], handshake_timeout, Core_Time_ns[1][146]),
      _aU_ =
        caml_call10
         (Async_rpc_kernel_Rpc[5][4],
          [0, implementations],
          0,
          connection_state,
          _aT_,
          heartbeat_config,
          0,
          [0, description],
          0,
          identification,
          transport);
     return caml_call2(Async_rpc_Import[15][2], _aU_, _aS_);
    }
    var monitor = caml_call1(Async_rpc_Rpc_transport[2][4], transport[2]);
    caml_call1(Async_kernel_Monitor[9], monitor);
    var _aI_ = 0;
    function _aJ_(_aR_){return _aR_;}
    var
     _aK_ = caml_call7(Async_kernel_Monitor[16], 0, 0, _i_, 0, _h_, _g_, f),
     _aL_ = [0, caml_call2(Async_rpc_Import[2], _aK_, _aJ_), _aI_];
    function _aM_(e){return [1, e];}
    var
     _aN_ = caml_call1(Async_kernel_Monitor[10], monitor),
     _aO_ = [0, caml_call2(Async_rpc_Import[2], _aN_, _aM_), _aL_],
     _aP_ = caml_call1(Async_rpc_Import[3], _aO_);
    return caml_call2(Async_rpc_Import[15][2], _aP_, _aQ_);
   }
   function connection_description
   (description, server_addr, client_addr, param){
    var
     _aF_ =
       [0,
        [1,
         [0,
          _j_,
          [0, caml_call1(Async_unix_Unix_syscalls[95][1][11], client_addr), 0]]],
        0],
     _aG_ =
       [0,
        [1,
         [0,
          _k_,
          [0, caml_call1(Async_unix_Unix_syscalls[95][1][11], server_addr), 0]]],
        _aF_],
     _aH_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_TCP_server), _aG_]],
     connection_description = caml_call1(Core_Info[20], _aH_);
    if(! description) return connection_description;
    var description$0 = description[1];
    return caml_call1
            (Core_Info[26],
             [0, description$0, [0, connection_description, 0]]);
   }
   var default_on_handshake_error = -950194894;
   function make_serve_func
   (serve_with_transport_handler,
    implementations,
    initial_connection_state,
    where_to_listen,
    max_connections,
    backlog,
    drop_incoming_connections,
    time_source,
    max_message_size,
    make_transport,
    handshake_timeout,
    heartbeat_config,
    auth,
    opt,
    on_handler_error,
    description,
    identification,
    param){
    if(opt)
     var sth = opt[1], on_handshake_error = sth;
    else
     var on_handshake_error = default_on_handshake_error;
    return caml_call10
            (serve_with_transport_handler,
             where_to_listen,
             max_connections,
             backlog,
             drop_incoming_connections,
             time_source,
             max_message_size,
             make_transport,
             auth,
             on_handler_error,
             function(client_addr, server_addr, transport){
              function _aE_(conn){
               return caml_call2(initial_connection_state, client_addr, conn);
              }
              return serve_with_transport
                      (identification,
                       transport,
                       handshake_timeout,
                       heartbeat_config,
                       implementations,
                       connection_description
                        (description, server_addr, client_addr, 0),
                       _aE_,
                       on_handshake_error,
                       client_addr);
             });
   }
   function serve(implementations){
    var _an_ = Async_rpc_Rpc_transport[7][1];
    return function
     (_ao_,
      _ap_,
      _aq_,
      _ar_,
      _as_,
      _at_,
      _au_,
      _av_,
      _aw_,
      _ax_,
      _ay_,
      _az_,
      _aA_,
      _aB_,
      _aC_,
      _aD_){
     return make_serve_func
             (_an_,
              implementations,
              _ao_,
              _ap_,
              _aq_,
              _ar_,
              _as_,
              _at_,
              _au_,
              _av_,
              _aw_,
              _ax_,
              _ay_,
              _az_,
              _aA_,
              _aB_,
              _aC_,
              _aD_);};
   }
   function serve_inet(implementations){
    var _Y_ = Async_rpc_Rpc_transport[7][2];
    return function
     (_Z_,
      ___,
      _$_,
      _aa_,
      _ab_,
      _ac_,
      _ad_,
      _ae_,
      _af_,
      _ag_,
      _ah_,
      _ai_,
      _aj_,
      _ak_,
      _al_,
      _am_){
     return make_serve_func
             (_Y_,
              implementations,
              _Z_,
              ___,
              _$_,
              _aa_,
              _ab_,
              _ac_,
              _ad_,
              _ae_,
              _af_,
              _ag_,
              _ah_,
              _ai_,
              _aj_,
              _ak_,
              _al_,
              _am_);};
   }
   function serve_unix
   (implementations,
    initial_connection_state,
    where_to_listen,
    max_connections,
    backlog,
    drop_incoming_connections,
    time_source,
    max_message_size,
    make_transport,
    handshake_timeout,
    heartbeat_config,
    auth,
    opt,
    on_handler_error,
    description,
    identification,
    param){
    if(opt)
     var sth = opt[1], on_handshake_error = sth;
    else
     var on_handshake_error = default_on_handshake_error;
    function _W_(client_addr, server_addr, peer_creds, transport){
     function _X_(conn){
      return caml_call3
              (initial_connection_state, client_addr, peer_creds, conn);
     }
     return serve_with_transport
             (identification,
              transport,
              handshake_timeout,
              heartbeat_config,
              implementations,
              connection_description(description, server_addr, client_addr, 0),
              _X_,
              on_handshake_error,
              client_addr);
    }
    return caml_call10
            (Async_rpc_Rpc_transport[7][3],
             where_to_listen,
             max_connections,
             backlog,
             drop_incoming_connections,
             time_source,
             max_message_size,
             make_transport,
             auth,
             on_handler_error,
             _W_);
   }
   var
    default_handshake_timeout_floa =
      caml_call1(Core_Time_ns[1][144], Async_rpc_kernel[3][3]);
   function client
   (implementations,
    max_message_size,
    make_transport,
    opt,
    heartbeat_config,
    description,
    identification,
    where_to_connect){
    if(opt)
     var sth = opt[1], handshake_timeout_float = sth;
    else
     var handshake_timeout_float = default_handshake_timeout_floa;
    var
     handshake_timeout =
       caml_call1(Core_Time_ns[1][146], handshake_timeout_float),
     _G_ = caml_call1(Core_Time_ns[66], 0),
     finish_handshake_by =
       caml_call2(Core_Time_ns[67], _G_, handshake_timeout);
    function _H_(error){
     if(0 !== error[0]) return caml_call1(Async_rpc_Import[12], error);
     var match = error[1], sock_peername = match[2], transport = match[1];
     if(description)
      var
       desc = description[1],
       _J_ = 0,
       _K_ = 0,
       _L_ = function(param){return _l_;},
       _M_ = [0, caml_call2(Async_unix_Tcp[1][1], _L_, where_to_connect), _K_],
       _N_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_via_TCP), _M_]],
       _O_ = [0, desc, [0, caml_call1(Core_Info[20], _N_), _J_]],
       description$0 = caml_call1(Core_Info[26], _O_);
     else
      var
       _S_ =
         function(x_003){
          function _V_(param){return _m_;}
          return caml_call2(Async_unix_Tcp[1][1], _V_, x_003);
         },
       description$0 =
         caml_call5
          (Core_Info[19],
           0,
           0,
           cst_Client_connected_via_TCP,
           where_to_connect,
           _S_);
     var
      _P_ = caml_call1(Core_Time_ns[66], 0),
      handshake_timeout =
        caml_call2(Core_Time_ns[73], finish_handshake_by, _P_);
     function _Q_(rpc_connection){
      if(0 === rpc_connection[0]){
       var t = rpc_connection[1];
       return caml_call1(Async_rpc_Import[12], [0, [0, sock_peername, t]]);
      }
      function _T_(param){
       return caml_call1(Async_rpc_Import[12], rpc_connection);
      }
      var _U_ = caml_call1(Async_rpc_Rpc_transport[4], transport);
      return caml_call2(Async_rpc_Import[15][2], _U_, _T_);
     }
     if(implementations)
      var
       match$0 = implementations[1],
       implementations$0 = match$0[2],
       connection_state = match$0[1],
       _R_ =
         caml_call10
          (Async_rpc_kernel_Rpc[5][4],
           [0, implementations$0],
           0,
           connection_state,
           [0, handshake_timeout],
           heartbeat_config,
           0,
           [0, description$0],
           0,
           identification,
           transport);
     else
      var
       match$1 = caml_call1(Client_implementations[1], 0),
       implementations$1 = match$1[2],
       connection_state$0 = match$1[1],
       _R_ =
         caml_call10
          (Async_rpc_kernel_Rpc[5][4],
           [0, implementations$1],
           0,
           connection_state$0,
           [0, handshake_timeout],
           heartbeat_config,
           0,
           [0, description$0],
           0,
           identification,
           transport);
     return caml_call2(Async_rpc_Import[15][2], _R_, _Q_);
    }
    var
     _I_ =
       caml_call4
        (Async_rpc_Rpc_transport[7][4],
         max_message_size,
         make_transport,
         [0, handshake_timeout],
         where_to_connect);
    return caml_call2(Async_rpc_Import[15][2], _I_, _H_);
   }
   function client$0
   (implementations,
    max_message_size,
    make_transport,
    handshake_timeout,
    heartbeat_config,
    description,
    identification,
    where_to_connect){
    function _D_(_F_){return _F_[2];}
    var
     _E_ =
       client
        (implementations,
         max_message_size,
         make_transport,
         handshake_timeout,
         heartbeat_config,
         description,
         identification,
         where_to_connect);
    return caml_call2(Async_rpc_Import[11], _E_, _D_);
   }
   function with_client
   (implementations,
    max_message_size,
    make_transport,
    handshake_timeout,
    heartbeat_config,
    description,
    identification,
    where_to_connect,
    f){
    function _w_(param){
     var t = param[2], remote_server = param[1];
     function _y_(result){
      function _B_(param){return result;}
      var
       _C_ =
         caml_call3
          (close,
           0,
           [0, caml_call1(Core_Info[14], cst_Rpc_Connection_with_client)],
           t);
      return caml_call2(Async_rpc_Import[15][3], _C_, _B_);
     }
     function _z_(param){return caml_call2(f, remote_server, t);}
     var
      _A_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _o_, _n_, _z_);
     return caml_call2(Async_rpc_Import[15][2], _A_, _y_);
    }
    var
     _x_ =
       client
        (implementations,
         max_message_size,
         make_transport,
         handshake_timeout,
         heartbeat_config,
         description,
         identification,
         where_to_connect);
    return caml_call2(Async_rpc_Import[10], _x_, _w_);
   }
   function with_client$0
   (implementations,
    max_message_size,
    make_transport,
    handshake_timeout,
    heartbeat_config,
    description,
    identification,
    where_to_connect,
    f){
    return with_client
            (implementations,
             max_message_size,
             make_transport,
             handshake_timeout,
             heartbeat_config,
             description,
             identification,
             where_to_connect,
             function(param){return f;});
   }
   var
    default_path =
      [246,
       function(param){
        var
         _u_ = caml_call1(Core_unix[34], 0),
         _v_ = caml_call1(Core_Pid[15], _u_);
        return caml_call2(Core[18], cst_dev_shm_rpc_message_reader, _v_);
       }],
    path_override = [0, 0];
   function dump_deserialization_error(buf, pos){
    function open_file(param){
     var match = path_override[1];
     if(match)
      var path = match[1], path$0 = path;
     else
      var path$0 = caml_call1(Core[248], default_path);
     return [0,
             caml_call3(Core_unix[49], 0, [0, 5, [0, 1, [0, 6, 0]]], path$0),
             path$0];
    }
    try{var _t_ = open_file(0), match = _t_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(caml_call1(Core_Option[61], path_override[1]))
      throw caml_maybe_attach_backtrace(exn, 0);
     path_override[1] = 0;
     var match = open_file(0);
    }
    var path = match[2], fd = match[1];
    a:
    {
     try{caml_call4(Bigstring_unix[137], fd, 0, 0, buf);}
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       _s_ = caml_call1(Base_Exn[10], e),
       result = caml_call4(Core[265], _p_, path, pos, _s_);
      break a;
     }
     var result = caml_call3(Core[265], _q_, path, pos);
    }
    caml_call2(Core_unix[53], 0, fd);
    return result;
   }
   function enable_dumping_buffers_on_dese(override, param){
    if(override){
     var override$0 = override[1];
     path_override[1] = [0, override$0];
    }
    Async_rpc_kernel_Util[2][1] = dump_deserialization_error;
    return 0;
   }
   var
    match =
      caml_call1(Async_unix_Async_sys[14], cst_ASYNC_RPC_DEBUG_DUMP_DESER);
   if(match){
    var dump_to = match[1];
    a:
    {
     if
      (caml_string_notequal(dump_to, cst$0)
       && caml_string_notequal(dump_to, "1")){
      var
       _r_ =
         caml_call4(Core_String[48], 0, 0, dump_to, 47)
          ? [0, dump_to]
          : [0, caml_call2(Core[631], cst_dev_shm, dump_to)],
       path_override$0 = _r_;
      break a;
     }
     var path_override$0 = 0;
    }
    enable_dumping_buffers_on_dese(path_override$0, 0);
   }
   else{
    var
     match$0 =
       caml_call1(Async_unix_Async_sys[14], cst_ASYNC_RPC_DEBUG_DUMP_MESSA);
    a:
    if(match$0 && caml_string_notequal(match$0[1], cst$0)){enable_dumping_buffers_on_dese(0, 0); break a;}
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_Rpc);
   var
    Async_rpc_Rpc =
      [0,
       [0,
        sexp_of_t,
        description,
        add_heartbeat_callback,
        reset_heartbeat_timeout,
        last_seen_alive,
        close,
        close_finished,
        close_reason,
        is_closed,
        bytes_to_write,
        bytes_written,
        bytes_read,
        flushed,
        peer_menu,
        peer_menu$0,
        my_menu,
        peer_identification,
        create,
        contains_magic_prefix,
        with_close,
        server_with_close,
        serve,
        serve_inet,
        serve_unix,
        client$0,
        client,
        with_client$0,
        with_client],
       [0, enable_dumping_buffers_on_dese]];
   runtime.caml_register_global(58, Async_rpc_Rpc, cst_Async_rpc_Rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc = "Async_rpc",
    cst_async_rpc = "async_rpc";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][1], "async_rpc/src/async_rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc, "async_rpc.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc);
   var Async_rpc = [0];
   runtime.caml_register_global(11, Async_rpc, cst_Async_rpc);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
