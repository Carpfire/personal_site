// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Mtime
//# unitInfo: Requires: Stdlib, Stdlib__Float, Stdlib__Format, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ld = "%Ld",
    cst_Ld_Ld = "%Ld.%Ld",
    cst_Lda = "%Lda",
    cst_Lu = "%Lu",
    cst_h$1 = "h",
    cst_min$1 = "min",
    cst_ns = "ns",
    cst_s$2 = "s",
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_float = runtime.caml_int64_to_float,
    caml_notequal = runtime.caml_notequal,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst_s = "\xce\xbcs",
    cst_ms = "ms",
    cst_s$0 = cst_s$2,
    _A_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_s$1 = cst_s$2,
    cst_min = cst_min$1,
    _B_ = runtime.caml_int64_create_lo_mi_hi(60, 0, 0),
    cst_min$0 = cst_min$1,
    cst_h = cst_h$1,
    _C_ = runtime.caml_int64_create_lo_mi_hi(24, 0, 0),
    cst_h$0 = cst_h$1,
    cst_d = "d",
    y = runtime.caml_int64_create_lo_mi_hi(366, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    max_span = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    ns = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    us = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    ms = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    s = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    min = runtime.caml_int64_create_lo_mi_hi(4675584, 3576, 0),
    hour = runtime.caml_int64_create_lo_mi_hi(12099584, 214576, 0),
    day = runtime.caml_int64_create_lo_mi_hi(5177344, 5149841, 0),
    year = runtime.caml_int64_create_lo_mi_hi(16171008, 1931345, 112),
    min_stamp = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    max_stamp = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Float = global_data.Stdlib__Float,
    equal = Stdlib_Int64[17],
    compare = Stdlib_Int64[16],
    _K_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    _J_ = [0, [7, 12, 0, 0, [11, cst_ns, 0]], "%Luns"],
    _b_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = [0, [7, 0, 0, 0, 0], cst_Ld],
    _e_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _i_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _j_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, 0]]], cst_Ld_Ld],
    _k_ = [0, [7, 0, 0, 0, 0], cst_Ld],
    _l_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _m_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _n_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _o_ = runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
    _p_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _q_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _r_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _s_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, 0, 0, 0]]], cst_Ld_Ld],
    _t_ = [0, [7, 0, 0, 0, [12, 46, [7, 0, [0, 2, 2], 0, 0]]], "%Ld.%02Ld"],
    _u_ = [0, [7, 0, 0, 0, 0], cst_Ld],
    _v_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _w_ = [0, [7, 0, 0, 0, [2, 0, 0]], "%Ld%s"],
    _x_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _y_ = [0, [7, 0, 0, 0, [2, 0, [7, 0, 0, 0, [2, 0, 0]]]], "%Ld%s%Ld%s"],
    _z_ = [0, [7, 0, 0, 0, [11, cst_ns, 0]], "%Ldns"],
    _D_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _E_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _F_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _G_ = [0, [7, 0, 0, 0, [12, 97, 0]], cst_Lda],
    _H_ = [0, [7, 0, 0, 0, [12, 97, [7, 0, 0, 0, [12, 100, 0]]]], "%Lda%Ldd"],
    _I_ = [0, [7, 12, 0, 0, 0], cst_Lu],
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function is_shorter(s, than){
    return caml_call2(compare, s, than) < 0 ? 1 : 0;
   }
   function is_longer(s, than){
    return 0 < caml_call2(compare, s, than) ? 1 : 0;
   }
   var add = caml_int64_add;
   function abs_diff(s0, s1){
    return 0 <= caml_call2(compare, s0, s1)
            ? caml_int64_sub(s0, s1)
            : caml_int64_sub(s1, s0);
   }
   function symbol(n, s){
    return caml_int64_mul(runtime.caml_int64_of_int32(n), s);
   }
   function to_uint64_ns(s){return s;}
   function of_uint64_ns(ns){return ns;}
   var
    int64_min_int_float = caml_int64_to_float(Stdlib_Int64[10]),
    int64_max_int_float = caml_int64_to_float(Stdlib_Int64[9]);
   function of_float_ns(sf){
    if
     (!
      (sf < 0.)
      && ! (9007199254740992. <= sf) && caml_call1(Stdlib_Float[15], sf))
     return [0, runtime.caml_int64_of_float(sf)];
    return 0;
   }
   function to_float_ns(s){
    return 0 < caml_call2(Stdlib_Int64[15], _a_, s)
            ? int64_max_int_float
             + (- int64_min_int_float + caml_int64_to_float(s))
            : caml_int64_to_float(s);
   }
   function unsafe_of_uint64_ns_option(nsopt){return nsopt;}
   var pf = Stdlib_Format[137];
   function pp_si_span
   (counter, unit_str, unit_str_len, si_unit, si_higher_unit, ppf, span){
    function geq(x, y){
     return 0 <= caml_call2(Stdlib_Int64[16], x, y) ? 1 : 0;
    }
    var
     m = caml_call2(Stdlib_Int64[4], span, si_unit),
     n = caml_call2(Stdlib_Int64[5], span, si_unit);
    function pp_unit(ppf, param){
     return caml_call3(Stdlib_Format[17], ppf, unit_str_len, unit_str);
    }
    if(geq(m, _b_)){
     var
      m_up =
        caml_call2(Stdlib_Int64[17], n, _c_)
         ? m
         : caml_call1(Stdlib_Int64[6], m),
      span$0 = caml_int64_mul(m_up, si_unit);
     if(! geq(span$0, si_higher_unit)){
      caml_call3(pf, ppf, _d_, m_up);
      return pp_unit(ppf, 0);
     }
     if(counter >= 50) return caml_trampoline_return(pp$1, [0, ppf, span$0]);
     var counter$0 = counter + 1 | 0;
     return pp$1(counter$0, ppf, span$0);
    }
    if(geq(m, _e_)){
     var
      f_factor = caml_call2(Stdlib_Int64[4], si_unit, _f_),
      f_m = caml_call2(Stdlib_Int64[4], n, f_factor),
      f_n = caml_call2(Stdlib_Int64[5], n, f_factor),
      f_m_up =
        caml_call2(Stdlib_Int64[17], f_n, _g_)
         ? f_m
         : caml_call1(Stdlib_Int64[6], f_m);
     if(! caml_notequal(f_m_up, _h_)){
      caml_call3(pf, ppf, _k_, m);
      return pp_unit(ppf, 0);
     }
     if(! geq(f_m_up, _i_)){
      caml_call4(pf, ppf, _j_, m, f_m_up);
      return pp_unit(ppf, 0);
     }
     var
      _P_ =
        caml_int64_add
         (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up, f_factor));
     if(counter >= 50) return caml_trampoline_return(pp$1, [0, ppf, _P_]);
     var counter$1 = counter + 1 | 0;
     return pp$1(counter$1, ppf, _P_);
    }
    var
     f_factor$0 = caml_call2(Stdlib_Int64[4], si_unit, _l_),
     f_m$0 = caml_call2(Stdlib_Int64[4], n, f_factor$0),
     f_n$0 = caml_call2(Stdlib_Int64[5], n, f_factor$0),
     f_m_up$0 =
       caml_call2(Stdlib_Int64[17], f_n$0, _m_)
        ? f_m$0
        : caml_call1(Stdlib_Int64[6], f_m$0);
    if(! caml_notequal(f_m_up$0, _n_)){
     caml_call3(pf, ppf, _u_, m);
     return pp_unit(ppf, 0);
    }
    if(! geq(f_m_up$0, _o_))
     return caml_call2
              (Stdlib_Int64[17], runtime.caml_int64_mod(f_m_up$0, _q_), _p_)
             ? (caml_call4
                (pf, ppf, _s_, m, runtime.caml_int64_div(f_m_up$0, _r_)),
               pp_unit(ppf, 0))
             : (caml_call4(pf, ppf, _t_, m, f_m_up$0), pp_unit(ppf, 0));
    var
     _Q_ =
       caml_int64_add
        (caml_int64_mul(m, si_unit), caml_int64_mul(f_m_up$0, f_factor$0));
    if(counter >= 50) return caml_trampoline_return(pp$1, [0, ppf, _Q_]);
    var counter$2 = counter + 1 | 0;
    return pp$1(counter$2, ppf, _Q_);
   }
   function pp_non_si
   (counter, unit_str, unit, unit_lo_str, unit_lo, unit_lo_size, ppf, span){
    var
     m = caml_call2(Stdlib_Int64[4], span, unit),
     n = caml_call2(Stdlib_Int64[5], span, unit);
    if(caml_call2(Stdlib_Int64[17], n, _v_))
     return caml_call4(pf, ppf, _w_, m, unit_str);
    var
     f_m = caml_call2(Stdlib_Int64[4], n, unit_lo),
     f_n = caml_call2(Stdlib_Int64[5], n, unit_lo),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _x_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    if(0 > caml_call2(Stdlib_Int64[16], f_m_up, unit_lo_size))
     return caml_call6(pf, ppf, _y_, m, unit_str, f_m_up, unit_lo_str);
    var
     _O_ =
       caml_int64_add
        (caml_int64_mul(m, unit), caml_int64_mul(f_m_up, unit_lo));
    if(counter >= 50) return caml_trampoline_return(pp$1, [0, ppf, _O_]);
    var counter$0 = counter + 1 | 0;
    return pp$1(counter$0, ppf, _O_);
   }
   function pp$1(counter, ppf, span){
    function lt(x, y){
     return -1 === caml_call2(Stdlib_Int64[16], x, y) ? 1 : 0;
    }
    if(lt(span, us)) return caml_call3(pf, ppf, _z_, span);
    if(lt(span, ms)){
     var _L_ = 2;
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_s, _L_, us, ms, ppf, span]);
     var counter$0 = counter + 1 | 0;
     return pp_si_span(counter$0, cst_s, _L_, us, ms, ppf, span);
    }
    if(lt(span, s)){
     var _M_ = 2;
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_ms, _M_, ms, s, ppf, span]);
     var counter$1 = counter + 1 | 0;
     return pp_si_span(counter$1, cst_ms, _M_, ms, s, ppf, span);
    }
    if(lt(span, min)){
     var _N_ = 1;
     if(counter >= 50)
      return caml_trampoline_return
              (pp_si_span, [0, cst_s$0, _N_, s, min, ppf, span]);
     var counter$2 = counter + 1 | 0;
     return pp_si_span(counter$2, cst_s$0, _N_, s, min, ppf, span);
    }
    if(lt(span, hour)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si, [0, cst_min, min, cst_s$1, s, _A_, ppf, span]);
     var counter$3 = counter + 1 | 0;
     return pp_non_si(counter$3, cst_min, min, cst_s$1, s, _A_, ppf, span);
    }
    if(lt(span, day)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si, [0, cst_h, hour, cst_min$0, min, _B_, ppf, span]);
     var counter$4 = counter + 1 | 0;
     return pp_non_si(counter$4, cst_h, hour, cst_min$0, min, _B_, ppf, span);
    }
    if(lt(span, year)){
     if(counter >= 50)
      return caml_trampoline_return
              (pp_non_si, [0, cst_d, day, cst_h$0, hour, _C_, ppf, span]);
     var counter$5 = counter + 1 | 0;
     return pp_non_si(counter$5, cst_d, day, cst_h$0, hour, _C_, ppf, span);
    }
    var
     m = caml_call2(Stdlib_Int64[4], span, year),
     n = caml_call2(Stdlib_Int64[5], span, year);
    if(caml_call2(Stdlib_Int64[17], n, _D_))
     return caml_call3(pf, ppf, _E_, m);
    var
     f_m = caml_call2(Stdlib_Int64[4], n, day),
     f_n = caml_call2(Stdlib_Int64[5], n, day),
     f_m_up =
       caml_call2(Stdlib_Int64[17], f_n, _F_)
        ? f_m
        : caml_call1(Stdlib_Int64[6], f_m);
    return 0 <= caml_call2(Stdlib_Int64[16], f_m_up, y)
            ? caml_call3(pf, ppf, _G_, caml_call1(Stdlib_Int64[6], m))
            : caml_call4(pf, ppf, _H_, m, f_m_up);
   }
   function pp(ppf, span){return caml_trampoline(pp$1(0, ppf, span));}
   function dump(ppf, s){return caml_call3(Stdlib_Format[137], ppf, _I_, s);}
   function to_uint64_ns$0(s){return s;}
   function of_uint64_ns$0(ns){return ns;}
   var equal$0 = Stdlib_Int64[17], compare$0 = Stdlib_Int64[16];
   function is_earlier(t, than){
    return caml_call2(compare$0, t, than) < 0 ? 1 : 0;
   }
   function is_later(t, than){
    return 0 < caml_call2(compare$0, t, than) ? 1 : 0;
   }
   function span(t0, t1){
    return 0 <= caml_call2(compare$0, t0, t1)
            ? caml_int64_sub(t0, t1)
            : caml_int64_sub(t1, t0);
   }
   function add_span(t, s){
    var sum = caml_int64_add(t, s);
    return 0 < caml_call2(compare$0, t, sum) ? 0 : [0, sum];
   }
   function sub_span(t, s){
    return 0 <= caml_call2(compare$0, t, s) ? [0, caml_int64_sub(t, s)] : 0;
   }
   function pp$0(ppf, ns){
    return caml_call3(Stdlib_Format[137], ppf, _J_, ns);
   }
   function dump$0(ppf, ns){
    return caml_call3(Stdlib_Format[137], ppf, _K_, ns);
   }
   var
    Mtime =
      [0,
       [0,
        zero,
        one,
        zero,
        max_span,
        equal,
        compare,
        is_shorter,
        is_longer,
        add,
        abs_diff,
        symbol,
        ns,
        us,
        ms,
        s,
        min,
        hour,
        day,
        year,
        to_uint64_ns,
        of_uint64_ns,
        of_float_ns,
        to_float_ns,
        pp,
        dump,
        unsafe_of_uint64_ns_option],
       to_uint64_ns$0,
       of_uint64_ns$0,
       min_stamp,
       max_stamp,
       equal$0,
       compare$0,
       is_earlier,
       is_later,
       span,
       add_span,
       sub_span,
       pp$0,
       dump$0];
   runtime.caml_register_global(65, Mtime, "Mtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtdGltZS5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJLE87Rzs7SSxXO0c7OztJLFk7YztjO0c7O0ksTyxlO0c7NEIsUzs2QixVO0c7SSxzQjtJLHNCOztJOzs7d0M7SyxXO0k7Rzs7SSxXOzt3QztjO0c7OEMsYTs7OztJO0ssWTtJO0k7SyxJO0ssSTs7SyxPO0k7STtLO007UTs7VztNLFM7SztNO007O0ssa0IsTzs7Szs7STtLO00sVztNLE07TSxNO007UTs7Vzs7TTtNOztLO007TTs7Szs7UTtVLDRCO0ssa0IsTzs7Szs7STtLLGE7SyxRO0ssUTtLO087O1U7O0s7Szs7STtLLE87aUM7Z0I7a0M7O2dCO0k7O087Uyw0QjtJLGtCLE87O0k7Ozs7STtLLEk7SyxJO0ksRztLLE87STtLLE07SyxNO0s7Tzs7VTtJLE87SyxPO0k7O087Uyx5QjtJLGtCLE87O0k7Rzs7STtLLGM7STtJLGlCLE87STs7SztNLE87OztLOztJOztLO00sTzs7O0s7O0k7O0s7TSxPOzs7Szs7STtLO00sTzs7O0s7O0k7SztNLE87OztLOztJO0s7TSxPOzs7Szs7STtLLEk7SyxJO0ksRztLLE87STtLLE07SyxNO0s7Tzs7VTtJLFk7Yyx5QjtjO0c7MEI7eUIsTyw0Qzs4QixTOytCLFU7OztJLE87Rzs7SSxXO0c7O0ksWTtjO2M7Rzs7SSxVO0ksVztHOztJLFksa0M7Rzs7SSxPO0c7O0ksTztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6W119
