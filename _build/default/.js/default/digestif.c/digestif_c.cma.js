// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Digestif_bi
//# unitInfo: Requires: Stdlib__Bigarray, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray;
   function create(n){
    return caml_call3(Stdlib_Bigarray[19][1], 12, Stdlib_Bigarray[15], n);
   }
   var
    length = caml_ba_dim_1,
    sub = runtime.caml_ba_sub,
    empty = caml_call3(Stdlib_Bigarray[19][1], 12, Stdlib_Bigarray[15], 0),
    get = caml_ba_get_1;
   function copy(t){
    var r = create(caml_ba_dim_1(t));
    runtime.caml_ba_blit(t, r);
    return r;
   }
   function init(l, f){
    var
     v = caml_call3(Stdlib_Bigarray[19][1], 12, Stdlib_Bigarray[15], l),
     _h_ = l - 1 | 0,
     _g_ = 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      caml_ba_set_1(v, i, caml_call1(f, i));
      var _i_ = i + 1 | 0;
      if(_h_ === i) break;
      var i = _i_;
     }
    }
    return v;
   }
   function unsafe_get_nat(s, i){
    return 32 === Stdlib_Sys[9]
            ? caml_ba_uint8_get32(s, i)
            : runtime.caml_int64_to_int32(caml_ba_uint8_get64(s, i));
   }
   function unsafe_set_nat(s, i, v){
    return 32 === Stdlib_Sys[9]
            ? caml_ba_uint8_set32(s, i, v)
            : caml_ba_uint8_set64(s, i, runtime.caml_int64_of_int32(v));
   }
   function to_string(v){
    function _d_(_f_){return caml_ba_get_1(v, _f_);}
    var _e_ = caml_ba_dim_1(v);
    return caml_call2(Stdlib_String[2], _e_, _d_);
   }
   function blit_from_bytes(src, src_off, dst, dst_off, len){
    var _b_ = len - 1 | 0, _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      caml_ba_set_1
       (dst, dst_off + i | 0, runtime.caml_bytes_get(src, src_off + i | 0));
      var _c_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _c_;
     }
    }
    return 0;
   }
   function cpu_to_be32(s, i, v){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_set32(s, i, v)
            : caml_ba_uint8_set32(s, i, caml_int32_bswap(v));
   }
   function cpu_to_le32(s, i, v){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_set32(s, i, caml_int32_bswap(v))
            : caml_ba_uint8_set32(s, i, v);
   }
   function cpu_to_be64(s, i, v){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_set64(s, i, v)
            : caml_ba_uint8_set64(s, i, caml_int64_bswap(v));
   }
   function cpu_to_le64(s, i, v){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_set64(s, i, caml_int64_bswap(v))
            : caml_ba_uint8_set64(s, i, v);
   }
   function be32_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_get32(s, i)
            : caml_int32_bswap(caml_ba_uint8_get32(s, i));
   }
   function le32_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_ba_uint8_get32(s, i))
            : caml_ba_uint8_get32(s, i);
   }
   function be64_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_ba_uint8_get64(s, i)
            : caml_int64_bswap(caml_ba_uint8_get64(s, i));
   }
   function le64_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_ba_uint8_get64(s, i))
            : caml_ba_uint8_get64(s, i);
   }
   function benat_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? unsafe_get_nat(s, i)
            : caml_int32_bswap(unsafe_get_nat(s, i));
   }
   function cpu_to_benat(s, i, v){
    return Stdlib_Sys[11]
            ? unsafe_set_nat(s, i, v)
            : unsafe_set_nat(s, i, caml_int32_bswap(v));
   }
   var
    Digestif_bi =
      [0,
       create,
       length,
       sub,
       empty,
       get,
       copy,
       init,
       unsafe_get_nat,
       unsafe_set_nat,
       to_string,
       blit_from_bytes,
       cpu_to_be32,
       cpu_to_le32,
       cpu_to_be64,
       cpu_to_le64,
       be32_to_cpu,
       le32_to_cpu,
       be64_to_cpu,
       le64_to_cpu,
       benat_to_cpu,
       cpu_to_benat];
   runtime.caml_register_global(3, Digestif_bi, "Digestif_bi");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Digestif_by
//# unitInfo: Requires: Stdlib__Bytes, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap;
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    make = Stdlib_Bytes[1],
    init = Stdlib_Bytes[2],
    empty = Stdlib_Bytes[3],
    copy = Stdlib_Bytes[4],
    of_string = Stdlib_Bytes[5],
    to_string = Stdlib_Bytes[6],
    sub = Stdlib_Bytes[7],
    sub_string = Stdlib_Bytes[8],
    extend = Stdlib_Bytes[9],
    fill = Stdlib_Bytes[10],
    blit = Stdlib_Bytes[11],
    blit_string = Stdlib_Bytes[12],
    concat = Stdlib_Bytes[13],
    cat = Stdlib_Bytes[14],
    iter = Stdlib_Bytes[15],
    iteri = Stdlib_Bytes[16],
    map = Stdlib_Bytes[17],
    mapi = Stdlib_Bytes[18],
    fold_left = Stdlib_Bytes[19],
    fold_right = Stdlib_Bytes[20],
    for_all = Stdlib_Bytes[21],
    exists = Stdlib_Bytes[22],
    trim = Stdlib_Bytes[23],
    escaped = Stdlib_Bytes[24],
    index = Stdlib_Bytes[25],
    index_opt = Stdlib_Bytes[26],
    rindex = Stdlib_Bytes[27],
    rindex_opt = Stdlib_Bytes[28],
    index_from = Stdlib_Bytes[29],
    index_from_opt = Stdlib_Bytes[30],
    rindex_from = Stdlib_Bytes[31],
    rindex_from_opt = Stdlib_Bytes[32],
    contains = Stdlib_Bytes[33],
    contains_from = Stdlib_Bytes[34],
    rcontains_from = Stdlib_Bytes[35],
    uppercase_ascii = Stdlib_Bytes[36],
    lowercase_ascii = Stdlib_Bytes[37],
    capitalize_ascii = Stdlib_Bytes[38],
    uncapitalize_ascii = Stdlib_Bytes[39],
    compare = Stdlib_Bytes[40],
    equal = Stdlib_Bytes[41],
    starts_with = Stdlib_Bytes[42],
    ends_with = Stdlib_Bytes[43],
    unsafe_to_string = Stdlib_Bytes[44],
    unsafe_of_string = Stdlib_Bytes[45],
    split_on_char = Stdlib_Bytes[46],
    to_seq = Stdlib_Bytes[47],
    to_seqi = Stdlib_Bytes[48],
    of_seq = Stdlib_Bytes[49],
    get_utf_8_uchar = Stdlib_Bytes[50],
    set_utf_8_uchar = Stdlib_Bytes[51],
    is_valid_utf_8 = Stdlib_Bytes[52],
    get_utf_16be_uchar = Stdlib_Bytes[53],
    set_utf_16be_uchar = Stdlib_Bytes[54],
    is_valid_utf_16be = Stdlib_Bytes[55],
    get_utf_16le_uchar = Stdlib_Bytes[56],
    set_utf_16le_uchar = Stdlib_Bytes[57],
    is_valid_utf_16le = Stdlib_Bytes[58],
    get_uint8 = Stdlib_Bytes[59],
    get_int8 = Stdlib_Bytes[60],
    get_uint16_ne = Stdlib_Bytes[61],
    get_uint16_be = Stdlib_Bytes[62],
    get_uint16_le = Stdlib_Bytes[63],
    get_int16_ne = Stdlib_Bytes[64],
    get_int16_be = Stdlib_Bytes[65],
    get_int16_le = Stdlib_Bytes[66],
    get_int32_ne = Stdlib_Bytes[67],
    get_int32_be = Stdlib_Bytes[68],
    get_int32_le = Stdlib_Bytes[69],
    get_int64_ne = Stdlib_Bytes[70],
    get_int64_be = Stdlib_Bytes[71],
    get_int64_le = Stdlib_Bytes[72],
    set_uint8 = Stdlib_Bytes[73],
    set_int8 = Stdlib_Bytes[74],
    set_uint16_ne = Stdlib_Bytes[75],
    set_uint16_be = Stdlib_Bytes[76],
    set_uint16_le = Stdlib_Bytes[77],
    set_int16_ne = Stdlib_Bytes[78],
    set_int16_be = Stdlib_Bytes[79],
    set_int16_le = Stdlib_Bytes[80],
    set_int32_ne = Stdlib_Bytes[81],
    set_int32_be = Stdlib_Bytes[82],
    set_int32_le = Stdlib_Bytes[83],
    set_int64_ne = Stdlib_Bytes[84],
    set_int64_be = Stdlib_Bytes[85],
    set_int64_le = Stdlib_Bytes[86],
    unsafe_escape = Stdlib_Bytes[87];
   function unsafe_get_nat(s, i){
    return 32 === Stdlib_Sys[9]
            ? caml_bytes_get32(s, i)
            : runtime.caml_int64_to_int32(caml_bytes_get64(s, i));
   }
   function unsafe_set_nat(s, i, v){
    return 32 === Stdlib_Sys[9]
            ? caml_bytes_set32(s, i, v)
            : caml_bytes_set64(s, i, runtime.caml_int64_of_int32(v));
   }
   function blit_from_bigstring(src, src_off, dst, dst_off, len){
    var _b_ = len - 1 | 0, _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      runtime.caml_bytes_set
       (dst, dst_off + i | 0, runtime.caml_ba_get_1(src, src_off + i | 0));
      var _c_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _c_;
     }
    }
    return 0;
   }
   function rpad(a, size, x){
    var
     l = runtime.caml_ml_bytes_length(a),
     b = runtime.caml_create_bytes(size);
    caml_call5(blit, a, 0, b, 0, l);
    caml_call4(fill, b, l, size - l | 0, x);
    return b;
   }
   function cpu_to_be32(s, i, v){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(s, i, v)
            : caml_bytes_set32(s, i, caml_int32_bswap(v));
   }
   function cpu_to_le32(s, i, v){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(s, i, caml_int32_bswap(v))
            : caml_bytes_set32(s, i, v);
   }
   function cpu_to_be64(s, i, v){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(s, i, v)
            : caml_bytes_set64(s, i, caml_int64_bswap(v));
   }
   function cpu_to_le64(s, i, v){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(s, i, caml_int64_bswap(v))
            : caml_bytes_set64(s, i, v);
   }
   function be32_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get32(s, i)
            : caml_int32_bswap(caml_bytes_get32(s, i));
   }
   function le32_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_bytes_get32(s, i))
            : caml_bytes_get32(s, i);
   }
   function be64_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get64(s, i)
            : caml_int64_bswap(caml_bytes_get64(s, i));
   }
   function le64_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_bytes_get64(s, i))
            : caml_bytes_get64(s, i);
   }
   function benat_to_cpu(s, i){
    return Stdlib_Sys[11]
            ? unsafe_get_nat(s, i)
            : caml_int32_bswap(unsafe_get_nat(s, i));
   }
   function cpu_to_benat(s, i, v){
    return Stdlib_Sys[11]
            ? unsafe_set_nat(s, i, v)
            : unsafe_set_nat(s, i, caml_int32_bswap(v));
   }
   var
    Digestif_by =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       equal,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_uint16_be,
       set_uint16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape,
       unsafe_get_nat,
       unsafe_set_nat,
       blit_from_bigstring,
       rpad,
       cpu_to_be32,
       cpu_to_le32,
       cpu_to_be64,
       cpu_to_le64,
       be32_to_cpu,
       le32_to_cpu,
       be64_to_cpu,
       le64_to_cpu,
       benat_to_cpu,
       cpu_to_benat];
   runtime.caml_register_global(2, Digestif_by, "Digestif_by");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Digestif_native
//# unitInfo: Requires: Digestif_bi, Digestif_by, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Native_Bigstring_xor_into_$1 =
      "Native.Bigstring.xor_into: buffers to small",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Digestif_by = global_data.Digestif_by,
    Stdlib = global_data.Stdlib,
    Digestif_bi = global_data.Digestif_bi,
    dup = Digestif_by[4],
    Bigstring = [0],
    Bytes = [0],
    MD5 = [0, Bigstring, Bytes],
    Bigstring$0 = [0],
    Bytes$0 = [0],
    SHA1 = [0, Bigstring$0, Bytes$0],
    Bigstring$1 = [0],
    Bytes$1 = [0],
    SHA224 = [0, Bigstring$1, Bytes$1],
    Bigstring$2 = [0],
    Bytes$2 = [0],
    SHA256 = [0, Bigstring$2, Bytes$2],
    Bigstring$3 = [0],
    Bytes$3 = [0],
    SHA384 = [0, Bigstring$3, Bytes$3],
    Bigstring$4 = [0],
    Bytes$4 = [0],
    SHA512 = [0, Bigstring$4, Bytes$4],
    Bigstring$5 = [0],
    Bytes$5 = [0],
    SHA3_224 = [0, Bigstring$5, Bytes$5],
    Bigstring$6 = [0],
    Bytes$6 = [0],
    SHA3_256 = [0, Bigstring$6, Bytes$6],
    Bigstring$7 = [0],
    Bytes$7 = [0],
    KECCAK_256 = [0, Bigstring$7, Bytes$7],
    Bigstring$8 = [0],
    Bytes$8 = [0],
    SHA3_384 = [0, Bigstring$8, Bytes$8],
    Bigstring$9 = [0],
    Bytes$9 = [0],
    SHA3_512 = [0, Bigstring$9, Bytes$9],
    Bigstring$10 = [0],
    Bytes$10 = [0],
    WHIRLPOOL = [0, Bigstring$10, Bytes$10],
    Bigstring$11 = [0],
    Bytes$11 = [0],
    BLAKE2B = [0, Bigstring$11, Bytes$11],
    Bigstring$12 = [0],
    Bytes$12 = [0],
    BLAKE2S = [0, Bigstring$12, Bytes$12],
    Bigstring$13 = [0],
    Bytes$13 = [0],
    RMD160 = [0, Bigstring$13, Bytes$13],
    cst_Native_Bigstring_xor_into_$0 = cst_Native_Bigstring_xor_into_$1,
    cst_Native_Bigstring_xor_into_ = cst_Native_Bigstring_xor_into_$1;
   function imin(a, b){return a < b ? a : b;}
   function xor_into(a, b, n){
    var _d_ = caml_call1(Digestif_bi[2], b);
    if(imin(caml_call1(Digestif_bi[2], a), _d_) < n)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Native_Bigstring_xor_into_], 1);
    return runtime.caml_digestif_ba_xor_into(a, 0, b, 0, n);
   }
   function xor(a, b){
    var
     _b_ = caml_call1(Digestif_bi[2], b),
     l = imin(caml_call1(Digestif_bi[2], a), _b_),
     _c_ = caml_call3(Digestif_bi[3], b, 0, l),
     r = caml_call1(Digestif_bi[6], _c_);
    xor_into(a, r, l);
    return r;
   }
   var Bigstring$14 = [0, xor_into, xor];
   function xor_into$0(a, b, n){
    if(imin(caml_ml_bytes_length(a), caml_ml_bytes_length(b)) < n)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Native_Bigstring_xor_into_$0], 1);
    return runtime.caml_digestif_st_xor_into(a, 0, b, 0, n);
   }
   function xor$0(a, b){
    var
     l = imin(caml_ml_bytes_length(a), caml_ml_bytes_length(b)),
     _a_ = caml_call3(Digestif_by[7], b, 0, l),
     r = caml_call1(Digestif_by[4], _a_);
    xor_into$0(a, r, l);
    return r;
   }
   var
    Bytes$14 = [0, xor_into$0, xor$0],
    XOR = [0, Bigstring$14, Bytes$14],
    Digestif_native =
      [0,
       dup,
       MD5,
       SHA1,
       SHA224,
       SHA256,
       SHA384,
       SHA512,
       SHA3_224,
       SHA3_256,
       KECCAK_256,
       SHA3_384,
       SHA3_512,
       WHIRLPOOL,
       BLAKE2B,
       BLAKE2S,
       RMD160,
       imin,
       XOR];
   runtime.caml_register_global(5, Digestif_native, "Digestif_native");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Digestif_eq
//# unitInfo: Requires: Eqaf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Eqaf = global_data.Eqaf;
   function Make(D){
    function equal(a, b){return caml_call2(Eqaf[1], a, b);}
    function unsafe_compare(a, b){return caml_call2(Stdlib_String[10], a, b);}
    return [0, equal, unsafe_compare];
   }
   var Digestif_eq = [0, Make];
   runtime.caml_register_global(2, Digestif_eq, "Digestif_eq");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Digestif_conv
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Not_enough_hex_value = "Not enough hex value",
    cst_invalid_hash_size = "invalid hash size",
    cst_of_hex_odd_number_of_hex_c = "of_hex: odd number of hex characters",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    _f_ = [0, [11, cst_invalid_hash_size, 0], cst_invalid_hash_size],
    _e_ = [0, [4, 6, [0, 2, 2], 0, 0], "%02x"],
    _c_ = [0, [11, cst_Not_enough_hex_value, 0], cst_Not_enough_hex_value],
    _d_ =
      [0,
       [11,
        "Too much enough bytes (reach: ",
        [4, 0, 0, 0, [11, ", expect: ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "Too much enough bytes (reach: %d, expect: %d)"],
    _b_ =
      [0,
       [11, cst_of_hex_odd_number_of_hex_c, 0],
       cst_of_hex_odd_number_of_hex_c],
    _a_ = [0, [11, "of_hex: ", [4, 8, [0, 2, 2], 0, 0]], "of_hex: %02X"];
   function invalid_arg(fmt){
    function _G_(s){return caml_call1(Stdlib[1], s);}
    return caml_call2(Stdlib_Format[147], _G_, fmt);
   }
   function Make(D){
    function to_hex(hash){
     var res = runtime.caml_create_bytes(D[1] * 2 | 0);
     function chr(x){
      return 9 < x >>> 0
              ? caml_call1(Stdlib_Char[1], 97 + (x - 10 | 0) | 0)
              : caml_call1(Stdlib_Char[1], 48 + x | 0);
     }
     var _E_ = D[1] - 1 | 0, _D_ = 0;
     if(_E_ >= 0){
      var i = _D_;
      for(;;){
       var v = caml_string_get(hash, i);
       caml_bytes_unsafe_set(res, i * 2 | 0, chr(v >>> 4 | 0));
       caml_bytes_unsafe_set(res, (i * 2 | 0) + 1 | 0, chr(v & 15));
       var _F_ = i + 1 | 0;
       if(_E_ === i) break;
       var i = _F_;
      }
     }
     return caml_call1(Stdlib_Bytes[44], res);
    }
    function code(x){
     if(65 <= x){
      if(97 <= x){
       if(103 > x) return (x - 97 | 0) + 10 | 0;
      }
      else if(71 > x) return (x - 65 | 0) + 10 | 0;
     }
     else if(9 >= x - 48 >>> 0) return x - 48 | 0;
     return caml_call1(invalid_arg(_a_), x);
    }
    function decode(chr1, chr2){
     var _B_ = code(chr2), _C_ = code(chr1) << 4 | _B_;
     return caml_call1(Stdlib_Char[1], _C_);
    }
    function of_hex(hex){
     var offset = [0, 0];
     function go(have_first, idx){
      for(;;){
       if(caml_ml_string_length(hex) <= (offset[1] + idx | 0)) return 0;
       var
        chr2 = caml_string_get(hex, offset[1] + idx | 0),
        _A_ = chr2 - 9 | 0;
       a:
       {
        if(4 < _A_ >>> 0){
         if(23 === _A_) break a;
        }
        else if(1 < _A_ - 2 >>> 0) break a;
        if(have_first) return chr2;
        offset[1]++;
        var chr2$0 = go(1, idx);
        return 0 === chr2$0 ? invalid_arg(_b_) : decode(chr2, chr2$0);
       }
       offset[1]++;
      }
     }
     var _x_ = 0;
     function _y_(_z_){return go(_x_, _z_);}
     return caml_call2(Stdlib_String[2], D[1], _y_);
    }
    function of_hex_opt(hex){
     try{var digest = of_hex(hex);}
     catch(_w_){
      var _v_ = caml_wrap_exception(_w_);
      if(_v_[1] === Stdlib[6]) return 0;
      throw caml_maybe_attach_backtrace(_v_, 0);
     }
     return [0, digest];
    }
    function consistent_of_hex(str){
     var offset = [0, 0];
     function go(have_first, idx){
      for(;;){
       if(caml_ml_string_length(str) <= (offset[1] + idx | 0))
        return invalid_arg(_c_);
       var
        chr2 = caml_string_get(str, offset[1] + idx | 0),
        _u_ = chr2 - 9 | 0;
       a:
       {
        if(4 < _u_ >>> 0){
         if(23 === _u_) break a;
        }
        else if(1 < _u_ - 2 >>> 0) break a;
        if(have_first) return chr2;
        offset[1]++;
        var chr2$0 = go(1, idx);
        return decode(chr2, chr2$0);
       }
       offset[1]++;
      }
     }
     var _o_ = 0;
     function _p_(_t_){return go(_o_, _t_);}
     var res = caml_call2(Stdlib_String[2], D[1], _p_);
     for(;;){
      if((D[1] + offset[1] | 0) < caml_ml_string_length(str)){
       var _q_ = caml_string_get(str, offset[1] + (D[1] * 2 | 0) | 0) - 9 | 0;
       a:
       {
        b:
        {
         if(4 < _q_ >>> 0){
          if(23 === _q_) break b;
         }
         else if(1 < _q_ - 2 >>> 0) break b;
         var _r_ = 0;
         break a;
        }
        var _r_ = 1;
       }
       if(_r_){offset[1]++; continue;}
      }
      if((offset[1] + D[1] | 0) === caml_ml_string_length(str)) return res;
      var _s_ = offset[1] + (D[1] * 2 | 0) | 0;
      return caml_call2(invalid_arg(_d_), _s_, caml_ml_string_length(str));
     }
    }
    function consistent_of_hex_opt(hex){
     try{var digest = consistent_of_hex(hex);}
     catch(_n_){
      var _m_ = caml_wrap_exception(_n_);
      if(_m_[1] === Stdlib[6]) return 0;
      throw caml_maybe_attach_backtrace(_m_, 0);
     }
     return [0, digest];
    }
    function pp(ppf, hash){
     var _j_ = D[1] - 1 | 0, _i_ = 0;
     if(_j_ >= 0){
      var i = _i_;
      for(;;){
       var _k_ = caml_string_get(hash, i);
       caml_call3(Stdlib_Format[137], ppf, _e_, _k_);
       var _l_ = i + 1 | 0;
       if(_j_ === i) break;
       var i = _l_;
      }
     }
     return 0;
    }
    function of_raw_string(x){
     return caml_ml_string_length(x) !== D[1] ? invalid_arg(_f_) : x;
    }
    function of_raw_string_opt(x){
     try{var digest = of_raw_string(x);}
     catch(_h_){
      var _g_ = caml_wrap_exception(_h_);
      if(_g_[1] === Stdlib[6]) return 0;
      throw caml_maybe_attach_backtrace(_g_, 0);
     }
     return [0, digest];
    }
    function to_raw_string(x){return x;}
    return [0,
            to_hex,
            code,
            decode,
            of_hex,
            of_hex_opt,
            consistent_of_hex,
            consistent_of_hex_opt,
            pp,
            of_raw_string,
            of_raw_string_opt,
            to_raw_string];
   }
   var Digestif_conv = [0, invalid_arg, Make];
   runtime.caml_register_global(11, Digestif_conv, "Digestif_conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Digestif
//# unitInfo: Requires: Digestif_bi, Digestif_by, Digestif_conv, Digestif_eq, Digestif_native, Stdlib, Stdlib__Bytes, Stdlib__Format, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_offset_out_of_bounds$2 = "offset out of bounds",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    fmt =
      [0,
       [11,
        "Invalid digest_size:",
        [4, 0, 0, 0, [11, " to make a BLAKE2{S,B} implementation", 0]]],
       "Invalid digest_size:%d to make a BLAKE2{S,B} implementation"],
    Digestif_native = global_data.Digestif_native,
    Stdlib_List = global_data.Stdlib__List,
    Digestif_bi = global_data.Digestif_bi,
    Stdlib_String = global_data.Stdlib__String,
    Digestif_by = global_data.Digestif_by,
    Stdlib = global_data.Stdlib,
    Digestif_conv = global_data.Digestif_conv,
    Digestif_eq = global_data.Digestif_eq,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Format = global_data.Stdlib__Format,
    cst_BLAKE2_S_B_Keyed_maci_bigs =
      "BLAKE2{S,B}.Keyed.maci_bigstring: invalid key",
    cst_BLAKE2_S_B_Keyed_maci_stri =
      "BLAKE2{S,B}.Keyed.maci_string: invalid key",
    cst_BLAKE2_S_B_Keyed_maci_byte =
      "BLAKE2{S,B}.Keyed.maci_bytes: invalid key",
    cst_offset_out_of_bounds$1 = cst_offset_out_of_bounds$2,
    cst_destination_too_small = "destination too small",
    cst_offset_out_of_bounds$0 = cst_offset_out_of_bounds$2,
    cst_offset_out_of_bounds = cst_offset_out_of_bounds$2;
   function Make(F, D){
    var block_size = D[1], digest_size = D[2], ctx_size = caml_call1(F[3], 0);
    function init(param){
     var t = caml_create_bytes(ctx_size);
     caml_call1(F[2][1], t);
     return t;
    }
    var empty = caml_create_bytes(ctx_size);
    caml_call1(F[2][1], empty);
    function unsafe_feed_bytes(t, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var len$0 = len[1], len$1 = len$0, off$1 = off$0;
      else
       var len$1 = caml_ml_bytes_length(buf) - off$0 | 0, off$1 = off$0;
     }
     else if(len)
      var len$2 = len[1], len$1 = len$2, off$1 = 0;
     else
      var len$3 = caml_ml_bytes_length(buf), len$1 = len$3, off$1 = 0;
     if
      (0 <= off$1
       && 0 <= len$1 && (caml_ml_bytes_length(buf) - len$1 | 0) >= off$1)
      return caml_call4(F[2][2], t, buf, off$1, len$1);
     return caml_call1(Stdlib[1], cst_offset_out_of_bounds);
    }
    function unsafe_feed_string(t, off, len, buf){
     return unsafe_feed_bytes(t, off, len, caml_call1(Stdlib_Bytes[45], buf));
    }
    function unsafe_feed_bigstring(t, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var len$0 = len[1], len$1 = len$0, off$1 = off$0;
      else
       var len$1 = caml_call1(Digestif_bi[2], buf) - off$0 | 0, off$1 = off$0;
     }
     else if(len)
      var len$2 = len[1], len$1 = len$2, off$1 = 0;
     else
      var len$3 = caml_call1(Digestif_bi[2], buf), len$1 = len$3, off$1 = 0;
     if
      (0 <= off$1
       && 0 <= len$1 && (caml_call1(Digestif_bi[2], buf) - len$1 | 0) >= off$1)
      return caml_call4(F[1][2], t, buf, off$1, len$1);
     return caml_call1(Stdlib[1], cst_offset_out_of_bounds$0);
    }
    function unsafe_get(t){
     var res = caml_create_bytes(digest_size);
     caml_call4(Digestif_by[10], res, 0, digest_size, 0);
     caml_call3(F[2][3], t, res, 0);
     return res;
    }
    function get_into_bytes(t, opt, buf){
     if(opt) var sth = opt[1], off = sth; else var off = 0;
     var
      _gZ_ = off < 0 ? 1 : 0,
      _g0_ = _gZ_ || (caml_ml_bytes_length(buf) <= off ? 1 : 0);
     if(_g0_) caml_call1(Stdlib[1], cst_offset_out_of_bounds$1);
     if((caml_ml_bytes_length(buf) - off | 0) < digest_size)
      caml_call1(Stdlib[1], cst_destination_too_small);
     var _g1_ = caml_call1(Digestif_native[1], t);
     return caml_call3(F[2][3], _g1_, buf, off);
    }
    var
     _gS_ = caml_call1(Digestif_conv[2], [0, D[2]]),
     to_hex = _gS_[1],
     of_hex = _gS_[4],
     of_hex_opt = _gS_[5],
     consistent_of_hex = _gS_[6],
     consistent_of_hex_opt = _gS_[7],
     pp = _gS_[8],
     of_raw_string = _gS_[9],
     of_raw_string_opt = _gS_[10],
     to_raw_string = _gS_[11],
     include = caml_call1(Digestif_eq[1], [0, D[2]]),
     equal = include[1],
     unsafe_compare = include[2];
    function get(t){
     var t$0 = caml_call1(Digestif_native[1], t), _gY_ = unsafe_get(t$0);
     return caml_call1(Digestif_by[44], _gY_);
    }
    function feed_bytes(t, off, len, buf){
     var t$0 = caml_call1(Digestif_native[1], t);
     unsafe_feed_bytes(t$0, off, len, buf);
     return t$0;
    }
    function feed_string(t, off, len, buf){
     var t$0 = caml_call1(Digestif_native[1], t);
     unsafe_feed_string(t$0, off, len, buf);
     return t$0;
    }
    function feed_bigstring(t, off, len, buf){
     var t$0 = caml_call1(Digestif_native[1], t);
     unsafe_feed_bigstring(t$0, off, len, buf);
     return t$0;
    }
    function feedi_bytes(t, iter){
     var t$0 = caml_call1(Digestif_native[1], t);
     function feed(buf){return unsafe_feed_bytes(t$0, 0, 0, buf);}
     caml_call1(iter, feed);
     return t$0;
    }
    function feedi_string(t, iter){
     var t$0 = caml_call1(Digestif_native[1], t);
     function feed(buf){return unsafe_feed_string(t$0, 0, 0, buf);}
     caml_call1(iter, feed);
     return t$0;
    }
    function feedi_bigstring(t, iter){
     var t$0 = caml_call1(Digestif_native[1], t);
     function feed(buf){return unsafe_feed_bigstring(t$0, 0, 0, buf);}
     caml_call1(iter, feed);
     return t$0;
    }
    function digest_bytes(off, len, buf){
     return get(feed_bytes(empty, off, len, buf));
    }
    function digest_string(off, len, buf){
     return get(feed_string(empty, off, len, buf));
    }
    function digest_bigstring(off, len, buf){
     return get(feed_bigstring(empty, off, len, buf));
    }
    function digesti_bytes(iter){return get(feedi_bytes(empty, iter));}
    function digesti_string(iter){return get(feedi_string(empty, iter));}
    function digesti_bigstring(iter){
     return get(feedi_bigstring(empty, iter));
    }
    function digestv_bytes(lst){
     return digesti_bytes
             (function(f){return caml_call2(Stdlib_List[18], f, lst);});
    }
    function digestv_string(lst){
     return digesti_string
             (function(f){return caml_call2(Stdlib_List[18], f, lst);});
    }
    function digestv_bigstring(lst){
     return digesti_bigstring
             (function(f){return caml_call2(Stdlib_List[18], f, lst);});
    }
    var
     bytes_opad = caml_call2(Digestif_by[1], block_size, 92),
     bytes_ipad = caml_call2(Digestif_by[1], block_size, 54);
    function norm_bytes(key){
     var key$0 = key;
     for(;;){
      var
       switcher =
         runtime.caml_int_compare(caml_ml_string_length(key$0), block_size)
         + 1
         | 0;
      if(2 >= switcher >>> 0)
       switch(switcher){
         case 0:
          var _gX_ = caml_call1(Digestif_by[45], key$0);
          return caml_call3(Digestif_by[91], _gX_, block_size, 0);
         case 1: break;
         default:
          var key$1 = digest_string(0, 0, key$0), key$0 = key$1; continue;
       }
      return caml_call1(Digestif_by[5], key$0);
     }
    }
    function hmaci_bytes(key, iter){
     var
      key$0 = norm_bytes(key),
      outer = caml_call2(Digestif_native[18][2][2], key$0, bytes_opad),
      inner = caml_call2(Digestif_native[18][2][2], key$0, bytes_ipad),
      ctx = feed_bytes(empty, 0, 0, inner),
      res = get(feedi_bytes(ctx, iter)),
      ctx$0 = feed_bytes(empty, 0, 0, outer);
     return get(feed_string(ctx$0, 0, 0, res));
    }
    function hmaci_string(key, iter){
     var
      key$0 = norm_bytes(key),
      outer = caml_call2(Digestif_native[18][2][2], key$0, bytes_opad),
      inner = caml_call2(Digestif_native[18][2][2], key$0, bytes_ipad),
      ctx = feed_bytes(empty, 0, 0, inner),
      res = get(feedi_string(ctx, iter)),
      ctx$0 = feed_bytes(empty, 0, 0, outer);
     return get(feed_string(ctx$0, 0, 0, res));
    }
    function hmaci_bigstring(key, iter){
     var
      key$0 = norm_bytes(key),
      outer = caml_call2(Digestif_native[18][2][2], key$0, bytes_opad),
      inner = caml_call2(Digestif_native[18][2][2], key$0, bytes_ipad),
      ctx = feed_bytes(empty, 0, 0, inner),
      res = get(feedi_bigstring(ctx, iter)),
      ctx$0 = feed_bytes(empty, 0, 0, outer);
     return get(feed_string(ctx$0, 0, 0, res));
    }
    function hmac_bytes(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gW_ = caml_call3(Digestif_by[7], buf, off$0, len$0);
      else
       var
        _gW_ =
          caml_call3
           (Digestif_by[7], buf, off$0, caml_ml_bytes_length(buf) - off$0 | 0);
      var buf$0 = _gW_;
     }
     else if(len)
      var len$1 = len[1], buf$0 = caml_call3(Digestif_by[7], buf, 0, len$1);
     else
      var buf$0 = buf;
     return hmaci_bytes(key, function(f){return caml_call1(f, buf$0);});
    }
    function hmac_string(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gV_ = caml_call3(Stdlib_String[16], buf, off$0, len$0);
      else
       var
        _gV_ =
          caml_call3
           (Stdlib_String[16],
            buf,
            off$0,
            caml_ml_string_length(buf) - off$0 | 0);
      var buf$0 = _gV_;
     }
     else if(len)
      var
       len$1 = len[1],
       buf$0 = caml_call3(Stdlib_String[16], buf, 0, len$1);
     else
      var buf$0 = buf;
     return hmaci_string(key, function(f){return caml_call1(f, buf$0);});
    }
    function hmac_bigstring(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gT_ = caml_call3(Digestif_bi[3], buf, off$0, len$0);
      else
       var
        _gU_ = caml_call1(Digestif_bi[2], buf) - off$0 | 0,
        _gT_ = caml_call3(Digestif_bi[3], buf, off$0, _gU_);
      var buf$0 = _gT_;
     }
     else if(len)
      var len$1 = len[1], buf$0 = caml_call3(Digestif_bi[3], buf, 0, len$1);
     else
      var buf$0 = buf;
     return hmaci_bigstring(key, function(f){return caml_call1(f, buf$0);});
    }
    function hmacv_bytes(key, bufs){
     return hmaci_bytes
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    function hmacv_string(key, bufs){
     return hmaci_string
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    function hmacv_bigstring(key, bufs){
     return hmaci_bigstring
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    return [0,
            ,
            digest_size,
            ctx_size,
            init,
            empty,
            ,
            ,
            ,
            ,
            get_into_bytes,
            to_hex,
            ,
            ,
            of_hex,
            of_hex_opt,
            consistent_of_hex,
            consistent_of_hex_opt,
            pp,
            of_raw_string,
            of_raw_string_opt,
            to_raw_string,
            equal,
            unsafe_compare,
            get,
            feed_bytes,
            feed_string,
            feed_bigstring,
            feedi_bytes,
            feedi_string,
            feedi_bigstring,
            digest_bytes,
            digest_string,
            digest_bigstring,
            digesti_bytes,
            digesti_string,
            digesti_bigstring,
            digestv_bytes,
            digestv_string,
            digestv_bigstring,
            ,
            ,
            ,
            hmaci_bytes,
            hmaci_string,
            hmaci_bigstring,
            hmac_bytes,
            hmac_string,
            hmac_bigstring,
            hmacv_bytes,
            hmacv_string,
            hmacv_bigstring];
   }
   function Make_BLAKE2(F, D){
    var _gJ_ = caml_call1(F[3], 0);
    if(_gJ_ < D[2]){
     var _gK_ = D[2];
     caml_call1(caml_call2(Stdlib_Format[147], Stdlib[2], fmt), _gK_);
    }
    function init(ctx){
     return caml_call5(F[1][3], ctx, D[2], Digestif_bi[4], 0, 0);
    }
    var
     update = F[1][1],
     finalize = F[1][2],
     Bigstring = [0, init, update, finalize];
    function init$0(ctx){
     return caml_call5(F[2][3], ctx, D[2], Digestif_by[3], 0, 0);
    }
    var
     update$0 = F[2][1],
     finalize$0 = F[2][2],
     Bytes = [0, init$0, update$0, finalize$0];
    function ctx_size(param){return caml_call1(F[4], 0);}
    var
     include = Make([0, Bigstring, Bytes, ctx_size], D),
     digest_size = include[2],
     ctx_size$0 = include[3],
     init$1 = include[4],
     empty = include[5],
     get_into_bytes = include[10],
     to_hex = include[11],
     of_hex = include[14],
     of_hex_opt = include[15],
     consistent_of_hex = include[16],
     consistent_of_hex_opt = include[17],
     pp = include[18],
     of_raw_string = include[19],
     of_raw_string_opt = include[20],
     to_raw_string = include[21],
     equal = include[22],
     unsafe_compare = include[23],
     get = include[24],
     feed_bytes = include[25],
     feed_string = include[26],
     feed_bigstring = include[27],
     feedi_bytes = include[28],
     feedi_string = include[29],
     feedi_bigstring = include[30],
     digest_bytes = include[31],
     digest_string = include[32],
     digest_bigstring = include[33],
     digesti_bytes = include[34],
     digesti_string = include[35],
     digesti_bigstring = include[36],
     digestv_bytes = include[37],
     digestv_string = include[38],
     digestv_bigstring = include[39],
     hmaci_bytes = include[43],
     hmaci_string = include[44],
     hmaci_bigstring = include[45],
     hmac_bytes = include[46],
     hmac_string = include[47],
     hmac_bigstring = include[48],
     hmacv_bytes = include[49],
     hmacv_string = include[50],
     hmacv_bigstring = include[51],
     key_size = caml_call1(F[5], 0);
    function maci_bytes(key, iter){
     if(key_size < caml_ml_string_length(key))
      caml_call1(Stdlib[1], cst_BLAKE2_S_B_Keyed_maci_byte);
     var
      ctx = caml_create_bytes(ctx_size$0),
      _gR_ = caml_call1(Digestif_by[45], key);
     caml_call5
      (F[2][3], ctx, digest_size, _gR_, 0, caml_ml_string_length(key));
     return get(feedi_bytes(ctx, iter));
    }
    function maci_string(key, iter){
     if(key_size < caml_ml_string_length(key))
      caml_call1(Stdlib[1], cst_BLAKE2_S_B_Keyed_maci_stri);
     var
      ctx = caml_create_bytes(ctx_size$0),
      _gQ_ = caml_call1(Digestif_by[45], key);
     caml_call5
      (F[2][3], ctx, digest_size, _gQ_, 0, caml_ml_string_length(key));
     return get(feedi_string(ctx, iter));
    }
    function maci_bigstring(key, iter){
     if(key_size < caml_ml_string_length(key))
      caml_call1(Stdlib[1], cst_BLAKE2_S_B_Keyed_maci_bigs);
     var
      ctx = caml_create_bytes(ctx_size$0),
      _gP_ = caml_call1(Digestif_by[45], key);
     caml_call5
      (F[2][3], ctx, digest_size, _gP_, 0, caml_ml_string_length(key));
     return get(feedi_bigstring(ctx, iter));
    }
    function mac_bytes(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gO_ = caml_call3(Digestif_by[7], buf, off$0, len$0);
      else
       var
        _gO_ =
          caml_call3
           (Digestif_by[7], buf, off$0, caml_ml_bytes_length(buf) - off$0 | 0);
      var buf$0 = _gO_;
     }
     else if(len)
      var len$1 = len[1], buf$0 = caml_call3(Digestif_by[7], buf, 0, len$1);
     else
      var buf$0 = buf;
     return maci_bytes(key, function(f){return caml_call1(f, buf$0);});
    }
    function mac_string(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gN_ = caml_call3(Stdlib_String[16], buf, off$0, len$0);
      else
       var
        _gN_ =
          caml_call3
           (Stdlib_String[16],
            buf,
            off$0,
            caml_ml_string_length(buf) - off$0 | 0);
      var buf$0 = _gN_;
     }
     else if(len)
      var
       len$1 = len[1],
       buf$0 = caml_call3(Stdlib_String[16], buf, 0, len$1);
     else
      var buf$0 = buf;
     return maci_string(key, function(f){return caml_call1(f, buf$0);});
    }
    function mac_bigstring(key, off, len, buf){
     if(off){
      var off$0 = off[1];
      if(len)
       var
        len$0 = len[1],
        _gL_ = caml_call3(Digestif_bi[3], buf, off$0, len$0);
      else
       var
        _gM_ = caml_call1(Digestif_bi[2], buf) - off$0 | 0,
        _gL_ = caml_call3(Digestif_bi[3], buf, off$0, _gM_);
      var buf$0 = _gL_;
     }
     else if(len)
      var len$1 = len[1], buf$0 = caml_call3(Digestif_bi[3], buf, 0, len$1);
     else
      var buf$0 = buf;
     return maci_bigstring(key, function(f){return caml_call1(f, buf$0);});
    }
    function macv_bytes(key, bufs){
     return maci_bytes
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    function macv_string(key, bufs){
     return maci_string
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    function macv_bigstring(key, bufs){
     return maci_bigstring
             (key, function(f){return caml_call2(Stdlib_List[18], f, bufs);});
    }
    var
     Keyed =
       [0,
        key_size,
        maci_bytes,
        maci_string,
        maci_bigstring,
        mac_bytes,
        mac_string,
        mac_bigstring,
        macv_bytes,
        macv_string,
        macv_bigstring];
    return [0,
            ,
            digest_size,
            ,
            init$1,
            empty,
            ,
            ,
            ,
            ,
            get_into_bytes,
            to_hex,
            ,
            ,
            of_hex,
            of_hex_opt,
            consistent_of_hex,
            consistent_of_hex_opt,
            pp,
            of_raw_string,
            of_raw_string_opt,
            to_raw_string,
            equal,
            unsafe_compare,
            get,
            feed_bytes,
            feed_string,
            feed_bigstring,
            feedi_bytes,
            feedi_string,
            feedi_bigstring,
            digest_bytes,
            digest_string,
            digest_bigstring,
            digesti_bytes,
            digesti_string,
            digesti_bigstring,
            digestv_bytes,
            digestv_string,
            digestv_bigstring,
            ,
            ,
            ,
            hmaci_bytes,
            hmaci_string,
            hmaci_bigstring,
            hmac_bytes,
            hmac_string,
            hmac_bigstring,
            hmacv_bytes,
            hmacv_string,
            hmacv_bigstring,
            Keyed];
   }
   var _a_ = [0, 64, 16];
   function _b_(_gI_){return runtime.caml_digestif_md5_ctx_size(_gI_);}
   function _c_(_gH_, _gG_, _gF_){
    return runtime.caml_digestif_md5_st_finalize(_gH_, _gG_, _gF_);
   }
   function _d_(_gE_, _gD_, _gC_, _gB_){
    return runtime.caml_digestif_md5_st_update(_gE_, _gD_, _gC_, _gB_);
   }
   var
    _e_ =
      [0,
       function(_gA_){return runtime.caml_digestif_md5_st_init(_gA_);},
       _d_,
       _c_];
   function _f_(_gz_, _gy_, _gx_){
    return runtime.caml_digestif_md5_ba_finalize(_gz_, _gy_, _gx_);
   }
   function _g_(_gw_, _gv_, _gu_, _gt_){
    return runtime.caml_digestif_md5_ba_update(_gw_, _gv_, _gu_, _gt_);
   }
   var
    _bh_ =
      Make
       ([0,
         [0,
          function(_gs_){return runtime.caml_digestif_md5_ba_init(_gs_);},
          _g_,
          _f_],
         _e_,
         _b_],
        _a_),
    MD5 =
      [0,
       _bh_[2],
       _bh_[5],
       _bh_[4],
       _bh_[25],
       _bh_[26],
       _bh_[27],
       _bh_[28],
       _bh_[29],
       _bh_[30],
       _bh_[24],
       _bh_[31],
       _bh_[32],
       _bh_[33],
       _bh_[34],
       _bh_[35],
       _bh_[36],
       _bh_[37],
       _bh_[38],
       _bh_[39],
       _bh_[46],
       _bh_[47],
       _bh_[48],
       _bh_[43],
       _bh_[44],
       _bh_[45],
       _bh_[49],
       _bh_[50],
       _bh_[51],
       _bh_[23],
       _bh_[22],
       _bh_[18],
       _bh_[14],
       _bh_[15],
       _bh_[16],
       _bh_[17],
       _bh_[11],
       _bh_[19],
       _bh_[20],
       _bh_[21],
       _bh_[10]],
    _h_ = [0, 64, 20];
   function _i_(_gr_){return runtime.caml_digestif_sha1_ctx_size(_gr_);}
   function _j_(_gq_, _gp_, _go_){
    return runtime.caml_digestif_sha1_st_finalize(_gq_, _gp_, _go_);
   }
   function _k_(_gn_, _gm_, _gl_, _gk_){
    return runtime.caml_digestif_sha1_st_update(_gn_, _gm_, _gl_, _gk_);
   }
   var
    _l_ =
      [0,
       function(_gj_){return runtime.caml_digestif_sha1_st_init(_gj_);},
       _k_,
       _j_];
   function _m_(_gi_, _gh_, _gg_){
    return runtime.caml_digestif_sha1_ba_finalize(_gi_, _gh_, _gg_);
   }
   function _n_(_gf_, _ge_, _gd_, _gc_){
    return runtime.caml_digestif_sha1_ba_update(_gf_, _ge_, _gd_, _gc_);
   }
   var
    _bg_ =
      Make
       ([0,
         [0,
          function(_gb_){return runtime.caml_digestif_sha1_ba_init(_gb_);},
          _n_,
          _m_],
         _l_,
         _i_],
        _h_),
    SHA1 =
      [0,
       _bg_[2],
       _bg_[5],
       _bg_[4],
       _bg_[25],
       _bg_[26],
       _bg_[27],
       _bg_[28],
       _bg_[29],
       _bg_[30],
       _bg_[24],
       _bg_[31],
       _bg_[32],
       _bg_[33],
       _bg_[34],
       _bg_[35],
       _bg_[36],
       _bg_[37],
       _bg_[38],
       _bg_[39],
       _bg_[46],
       _bg_[47],
       _bg_[48],
       _bg_[43],
       _bg_[44],
       _bg_[45],
       _bg_[49],
       _bg_[50],
       _bg_[51],
       _bg_[23],
       _bg_[22],
       _bg_[18],
       _bg_[14],
       _bg_[15],
       _bg_[16],
       _bg_[17],
       _bg_[11],
       _bg_[19],
       _bg_[20],
       _bg_[21],
       _bg_[10]],
    _o_ = [0, 64, 28];
   function _p_(_ga_){return runtime.caml_digestif_sha224_ctx_size(_ga_);}
   function _q_(_f$_, _f__, _f9_){
    return runtime.caml_digestif_sha224_st_finalize(_f$_, _f__, _f9_);
   }
   function _r_(_f8_, _f7_, _f6_, _f5_){
    return runtime.caml_digestif_sha224_st_update(_f8_, _f7_, _f6_, _f5_);
   }
   var
    _s_ =
      [0,
       function(_f4_){return runtime.caml_digestif_sha224_st_init(_f4_);},
       _r_,
       _q_];
   function _t_(_f3_, _f2_, _f1_){
    return runtime.caml_digestif_sha224_ba_finalize(_f3_, _f2_, _f1_);
   }
   function _u_(_f0_, _fZ_, _fY_, _fX_){
    return runtime.caml_digestif_sha224_ba_update(_f0_, _fZ_, _fY_, _fX_);
   }
   var
    _bf_ =
      Make
       ([0,
         [0,
          function(_fW_){return runtime.caml_digestif_sha224_ba_init(_fW_);},
          _u_,
          _t_],
         _s_,
         _p_],
        _o_),
    SHA224 =
      [0,
       _bf_[2],
       _bf_[5],
       _bf_[4],
       _bf_[25],
       _bf_[26],
       _bf_[27],
       _bf_[28],
       _bf_[29],
       _bf_[30],
       _bf_[24],
       _bf_[31],
       _bf_[32],
       _bf_[33],
       _bf_[34],
       _bf_[35],
       _bf_[36],
       _bf_[37],
       _bf_[38],
       _bf_[39],
       _bf_[46],
       _bf_[47],
       _bf_[48],
       _bf_[43],
       _bf_[44],
       _bf_[45],
       _bf_[49],
       _bf_[50],
       _bf_[51],
       _bf_[23],
       _bf_[22],
       _bf_[18],
       _bf_[14],
       _bf_[15],
       _bf_[16],
       _bf_[17],
       _bf_[11],
       _bf_[19],
       _bf_[20],
       _bf_[21],
       _bf_[10]],
    _v_ = [0, 64, 32];
   function _w_(_fV_){return runtime.caml_digestif_sha256_ctx_size(_fV_);}
   function _x_(_fU_, _fT_, _fS_){
    return runtime.caml_digestif_sha256_st_finalize(_fU_, _fT_, _fS_);
   }
   function _y_(_fR_, _fQ_, _fP_, _fO_){
    return runtime.caml_digestif_sha256_st_update(_fR_, _fQ_, _fP_, _fO_);
   }
   var
    _z_ =
      [0,
       function(_fN_){return runtime.caml_digestif_sha256_st_init(_fN_);},
       _y_,
       _x_];
   function _A_(_fM_, _fL_, _fK_){
    return runtime.caml_digestif_sha256_ba_finalize(_fM_, _fL_, _fK_);
   }
   function _B_(_fJ_, _fI_, _fH_, _fG_){
    return runtime.caml_digestif_sha256_ba_update(_fJ_, _fI_, _fH_, _fG_);
   }
   var
    _be_ =
      Make
       ([0,
         [0,
          function(_fF_){return runtime.caml_digestif_sha256_ba_init(_fF_);},
          _B_,
          _A_],
         _z_,
         _w_],
        _v_),
    SHA256 =
      [0,
       _be_[2],
       _be_[5],
       _be_[4],
       _be_[25],
       _be_[26],
       _be_[27],
       _be_[28],
       _be_[29],
       _be_[30],
       _be_[24],
       _be_[31],
       _be_[32],
       _be_[33],
       _be_[34],
       _be_[35],
       _be_[36],
       _be_[37],
       _be_[38],
       _be_[39],
       _be_[46],
       _be_[47],
       _be_[48],
       _be_[43],
       _be_[44],
       _be_[45],
       _be_[49],
       _be_[50],
       _be_[51],
       _be_[23],
       _be_[22],
       _be_[18],
       _be_[14],
       _be_[15],
       _be_[16],
       _be_[17],
       _be_[11],
       _be_[19],
       _be_[20],
       _be_[21],
       _be_[10]],
    _C_ = [0, 128, 48];
   function _D_(_fE_){return runtime.caml_digestif_sha384_ctx_size(_fE_);}
   function _E_(_fD_, _fC_, _fB_){
    return runtime.caml_digestif_sha384_st_finalize(_fD_, _fC_, _fB_);
   }
   function _F_(_fA_, _fz_, _fy_, _fx_){
    return runtime.caml_digestif_sha384_st_update(_fA_, _fz_, _fy_, _fx_);
   }
   var
    _G_ =
      [0,
       function(_fw_){return runtime.caml_digestif_sha384_st_init(_fw_);},
       _F_,
       _E_];
   function _H_(_fv_, _fu_, _ft_){
    return runtime.caml_digestif_sha384_ba_finalize(_fv_, _fu_, _ft_);
   }
   function _I_(_fs_, _fr_, _fq_, _fp_){
    return runtime.caml_digestif_sha384_ba_update(_fs_, _fr_, _fq_, _fp_);
   }
   var
    _bd_ =
      Make
       ([0,
         [0,
          function(_fo_){return runtime.caml_digestif_sha384_ba_init(_fo_);},
          _I_,
          _H_],
         _G_,
         _D_],
        _C_),
    SHA384 =
      [0,
       _bd_[2],
       _bd_[5],
       _bd_[4],
       _bd_[25],
       _bd_[26],
       _bd_[27],
       _bd_[28],
       _bd_[29],
       _bd_[30],
       _bd_[24],
       _bd_[31],
       _bd_[32],
       _bd_[33],
       _bd_[34],
       _bd_[35],
       _bd_[36],
       _bd_[37],
       _bd_[38],
       _bd_[39],
       _bd_[46],
       _bd_[47],
       _bd_[48],
       _bd_[43],
       _bd_[44],
       _bd_[45],
       _bd_[49],
       _bd_[50],
       _bd_[51],
       _bd_[23],
       _bd_[22],
       _bd_[18],
       _bd_[14],
       _bd_[15],
       _bd_[16],
       _bd_[17],
       _bd_[11],
       _bd_[19],
       _bd_[20],
       _bd_[21],
       _bd_[10]],
    _J_ = [0, 128, 64];
   function _K_(_fn_){return runtime.caml_digestif_sha512_ctx_size(_fn_);}
   function _L_(_fm_, _fl_, _fk_){
    return runtime.caml_digestif_sha512_st_finalize(_fm_, _fl_, _fk_);
   }
   function _M_(_fj_, _fi_, _fh_, _fg_){
    return runtime.caml_digestif_sha512_st_update(_fj_, _fi_, _fh_, _fg_);
   }
   var
    _N_ =
      [0,
       function(_ff_){return runtime.caml_digestif_sha512_st_init(_ff_);},
       _M_,
       _L_];
   function _O_(_fe_, _fd_, _fc_){
    return runtime.caml_digestif_sha512_ba_finalize(_fe_, _fd_, _fc_);
   }
   function _P_(_fb_, _fa_, _e$_, _e__){
    return runtime.caml_digestif_sha512_ba_update(_fb_, _fa_, _e$_, _e__);
   }
   var
    _bc_ =
      Make
       ([0,
         [0,
          function(_e9_){return runtime.caml_digestif_sha512_ba_init(_e9_);},
          _P_,
          _O_],
         _N_,
         _K_],
        _J_),
    SHA512 =
      [0,
       _bc_[2],
       _bc_[5],
       _bc_[4],
       _bc_[25],
       _bc_[26],
       _bc_[27],
       _bc_[28],
       _bc_[29],
       _bc_[30],
       _bc_[24],
       _bc_[31],
       _bc_[32],
       _bc_[33],
       _bc_[34],
       _bc_[35],
       _bc_[36],
       _bc_[37],
       _bc_[38],
       _bc_[39],
       _bc_[46],
       _bc_[47],
       _bc_[48],
       _bc_[43],
       _bc_[44],
       _bc_[45],
       _bc_[49],
       _bc_[50],
       _bc_[51],
       _bc_[23],
       _bc_[22],
       _bc_[18],
       _bc_[14],
       _bc_[15],
       _bc_[16],
       _bc_[17],
       _bc_[11],
       _bc_[19],
       _bc_[20],
       _bc_[21],
       _bc_[10]],
    _Q_ = [0, 144, 28];
   function _R_(_e8_){return runtime.caml_digestif_sha3_224_ctx_size(_e8_);}
   function _S_(_e7_, _e6_, _e5_){
    return runtime.caml_digestif_sha3_224_st_finalize(_e7_, _e6_, _e5_);
   }
   function _T_(_e4_, _e3_, _e2_, _e1_){
    return runtime.caml_digestif_sha3_224_st_update(_e4_, _e3_, _e2_, _e1_);
   }
   var
    _U_ =
      [0,
       function(_e0_){return runtime.caml_digestif_sha3_224_st_init(_e0_);},
       _T_,
       _S_];
   function _V_(_eZ_, _eY_, _eX_){
    return runtime.caml_digestif_sha3_224_ba_finalize(_eZ_, _eY_, _eX_);
   }
   function _W_(_eW_, _eV_, _eU_, _eT_){
    return runtime.caml_digestif_sha3_224_ba_update(_eW_, _eV_, _eU_, _eT_);
   }
   var
    _bb_ =
      Make
       ([0,
         [0,
          function(_eS_){return runtime.caml_digestif_sha3_224_ba_init(_eS_);},
          _W_,
          _V_],
         _U_,
         _R_],
        _Q_),
    SHA3_224 =
      [0,
       _bb_[2],
       _bb_[5],
       _bb_[4],
       _bb_[25],
       _bb_[26],
       _bb_[27],
       _bb_[28],
       _bb_[29],
       _bb_[30],
       _bb_[24],
       _bb_[31],
       _bb_[32],
       _bb_[33],
       _bb_[34],
       _bb_[35],
       _bb_[36],
       _bb_[37],
       _bb_[38],
       _bb_[39],
       _bb_[46],
       _bb_[47],
       _bb_[48],
       _bb_[43],
       _bb_[44],
       _bb_[45],
       _bb_[49],
       _bb_[50],
       _bb_[51],
       _bb_[23],
       _bb_[22],
       _bb_[18],
       _bb_[14],
       _bb_[15],
       _bb_[16],
       _bb_[17],
       _bb_[11],
       _bb_[19],
       _bb_[20],
       _bb_[21],
       _bb_[10]],
    _X_ = [0, 136, 32];
   function _Y_(_eR_){return runtime.caml_digestif_sha3_256_ctx_size(_eR_);}
   function _Z_(_eQ_, _eP_, _eO_){
    return runtime.caml_digestif_sha3_256_st_finalize(_eQ_, _eP_, _eO_);
   }
   function ___(_eN_, _eM_, _eL_, _eK_){
    return runtime.caml_digestif_sha3_256_st_update(_eN_, _eM_, _eL_, _eK_);
   }
   var
    _$_ =
      [0,
       function(_eJ_){return runtime.caml_digestif_sha3_256_st_init(_eJ_);},
       ___,
       _Z_];
   function _aa_(_eI_, _eH_, _eG_){
    return runtime.caml_digestif_sha3_256_ba_finalize(_eI_, _eH_, _eG_);
   }
   function _ab_(_eF_, _eE_, _eD_, _eC_){
    return runtime.caml_digestif_sha3_256_ba_update(_eF_, _eE_, _eD_, _eC_);
   }
   var
    _ba_ =
      Make
       ([0,
         [0,
          function(_eB_){return runtime.caml_digestif_sha3_256_ba_init(_eB_);},
          _ab_,
          _aa_],
         _$_,
         _Y_],
        _X_),
    SHA3_256 =
      [0,
       _ba_[2],
       _ba_[5],
       _ba_[4],
       _ba_[25],
       _ba_[26],
       _ba_[27],
       _ba_[28],
       _ba_[29],
       _ba_[30],
       _ba_[24],
       _ba_[31],
       _ba_[32],
       _ba_[33],
       _ba_[34],
       _ba_[35],
       _ba_[36],
       _ba_[37],
       _ba_[38],
       _ba_[39],
       _ba_[46],
       _ba_[47],
       _ba_[48],
       _ba_[43],
       _ba_[44],
       _ba_[45],
       _ba_[49],
       _ba_[50],
       _ba_[51],
       _ba_[23],
       _ba_[22],
       _ba_[18],
       _ba_[14],
       _ba_[15],
       _ba_[16],
       _ba_[17],
       _ba_[11],
       _ba_[19],
       _ba_[20],
       _ba_[21],
       _ba_[10]],
    _ac_ = [0, 136, 32];
   function _ad_(_eA_){return runtime.caml_digestif_sha3_256_ctx_size(_eA_);}
   function _ae_(_ez_, _ey_, _ex_){
    return runtime.caml_digestif_keccak_256_st_finalize(_ez_, _ey_, _ex_);
   }
   function _af_(_ew_, _ev_, _eu_, _et_){
    return runtime.caml_digestif_sha3_256_st_update(_ew_, _ev_, _eu_, _et_);
   }
   var
    _ag_ =
      [0,
       function(_es_){return runtime.caml_digestif_sha3_256_st_init(_es_);},
       _af_,
       _ae_];
   function _ah_(_er_, _eq_, _ep_){
    return runtime.caml_digestif_keccak_256_ba_finalize(_er_, _eq_, _ep_);
   }
   function _ai_(_eo_, _en_, _em_, _el_){
    return runtime.caml_digestif_sha3_256_ba_update(_eo_, _en_, _em_, _el_);
   }
   var
    _a$_ =
      Make
       ([0,
         [0,
          function(_ek_){return runtime.caml_digestif_sha3_256_ba_init(_ek_);},
          _ai_,
          _ah_],
         _ag_,
         _ad_],
        _ac_),
    KECCAK_256 =
      [0,
       _a$_[2],
       _a$_[5],
       _a$_[4],
       _a$_[25],
       _a$_[26],
       _a$_[27],
       _a$_[28],
       _a$_[29],
       _a$_[30],
       _a$_[24],
       _a$_[31],
       _a$_[32],
       _a$_[33],
       _a$_[34],
       _a$_[35],
       _a$_[36],
       _a$_[37],
       _a$_[38],
       _a$_[39],
       _a$_[46],
       _a$_[47],
       _a$_[48],
       _a$_[43],
       _a$_[44],
       _a$_[45],
       _a$_[49],
       _a$_[50],
       _a$_[51],
       _a$_[23],
       _a$_[22],
       _a$_[18],
       _a$_[14],
       _a$_[15],
       _a$_[16],
       _a$_[17],
       _a$_[11],
       _a$_[19],
       _a$_[20],
       _a$_[21],
       _a$_[10]],
    _aj_ = [0, 104, 48];
   function _ak_(_ej_){return runtime.caml_digestif_sha3_384_ctx_size(_ej_);}
   function _al_(_ei_, _eh_, _eg_){
    return runtime.caml_digestif_sha3_384_st_finalize(_ei_, _eh_, _eg_);
   }
   function _am_(_ef_, _ee_, _ed_, _ec_){
    return runtime.caml_digestif_sha3_384_st_update(_ef_, _ee_, _ed_, _ec_);
   }
   var
    _an_ =
      [0,
       function(_eb_){return runtime.caml_digestif_sha3_384_st_init(_eb_);},
       _am_,
       _al_];
   function _ao_(_ea_, _d$_, _d__){
    return runtime.caml_digestif_sha3_384_ba_finalize(_ea_, _d$_, _d__);
   }
   function _ap_(_d9_, _d8_, _d7_, _d6_){
    return runtime.caml_digestif_sha3_384_ba_update(_d9_, _d8_, _d7_, _d6_);
   }
   var
    _a__ =
      Make
       ([0,
         [0,
          function(_d5_){return runtime.caml_digestif_sha3_384_ba_init(_d5_);},
          _ap_,
          _ao_],
         _an_,
         _ak_],
        _aj_),
    SHA3_384 =
      [0,
       _a__[2],
       _a__[5],
       _a__[4],
       _a__[25],
       _a__[26],
       _a__[27],
       _a__[28],
       _a__[29],
       _a__[30],
       _a__[24],
       _a__[31],
       _a__[32],
       _a__[33],
       _a__[34],
       _a__[35],
       _a__[36],
       _a__[37],
       _a__[38],
       _a__[39],
       _a__[46],
       _a__[47],
       _a__[48],
       _a__[43],
       _a__[44],
       _a__[45],
       _a__[49],
       _a__[50],
       _a__[51],
       _a__[23],
       _a__[22],
       _a__[18],
       _a__[14],
       _a__[15],
       _a__[16],
       _a__[17],
       _a__[11],
       _a__[19],
       _a__[20],
       _a__[21],
       _a__[10]],
    _aq_ = [0, 72, 64];
   function _ar_(_d4_){return runtime.caml_digestif_sha3_512_ctx_size(_d4_);}
   function _as_(_d3_, _d2_, _d1_){
    return runtime.caml_digestif_sha3_512_st_finalize(_d3_, _d2_, _d1_);
   }
   function _at_(_d0_, _dZ_, _dY_, _dX_){
    return runtime.caml_digestif_sha3_512_st_update(_d0_, _dZ_, _dY_, _dX_);
   }
   var
    _au_ =
      [0,
       function(_dW_){return runtime.caml_digestif_sha3_512_st_init(_dW_);},
       _at_,
       _as_];
   function _av_(_dV_, _dU_, _dT_){
    return runtime.caml_digestif_sha3_512_ba_finalize(_dV_, _dU_, _dT_);
   }
   function _aw_(_dS_, _dR_, _dQ_, _dP_){
    return runtime.caml_digestif_sha3_512_ba_update(_dS_, _dR_, _dQ_, _dP_);
   }
   var
    _a9_ =
      Make
       ([0,
         [0,
          function(_dO_){return runtime.caml_digestif_sha3_512_ba_init(_dO_);},
          _aw_,
          _av_],
         _au_,
         _ar_],
        _aq_),
    SHA3_512 =
      [0,
       _a9_[2],
       _a9_[5],
       _a9_[4],
       _a9_[25],
       _a9_[26],
       _a9_[27],
       _a9_[28],
       _a9_[29],
       _a9_[30],
       _a9_[24],
       _a9_[31],
       _a9_[32],
       _a9_[33],
       _a9_[34],
       _a9_[35],
       _a9_[36],
       _a9_[37],
       _a9_[38],
       _a9_[39],
       _a9_[46],
       _a9_[47],
       _a9_[48],
       _a9_[43],
       _a9_[44],
       _a9_[45],
       _a9_[49],
       _a9_[50],
       _a9_[51],
       _a9_[23],
       _a9_[22],
       _a9_[18],
       _a9_[14],
       _a9_[15],
       _a9_[16],
       _a9_[17],
       _a9_[11],
       _a9_[19],
       _a9_[20],
       _a9_[21],
       _a9_[10]],
    _ax_ = [0, 64, 64];
   function _ay_(_dN_){return runtime.caml_digestif_whirlpool_ctx_size(_dN_);}
   function _az_(_dM_, _dL_, _dK_){
    return runtime.caml_digestif_whirlpool_st_finalize(_dM_, _dL_, _dK_);
   }
   function _aA_(_dJ_, _dI_, _dH_, _dG_){
    return runtime.caml_digestif_whirlpool_st_update(_dJ_, _dI_, _dH_, _dG_);
   }
   var
    _aB_ =
      [0,
       function(_dF_){return runtime.caml_digestif_whirlpool_st_init(_dF_);},
       _aA_,
       _az_];
   function _aC_(_dE_, _dD_, _dC_){
    return runtime.caml_digestif_whirlpool_ba_finalize(_dE_, _dD_, _dC_);
   }
   function _aD_(_dB_, _dA_, _dz_, _dy_){
    return runtime.caml_digestif_whirlpool_ba_update(_dB_, _dA_, _dz_, _dy_);
   }
   var
    _a8_ =
      Make
       ([0,
         [0,
          function(_dx_){
           return runtime.caml_digestif_whirlpool_ba_init(_dx_);
          },
          _aD_,
          _aC_],
         _aB_,
         _ay_],
        _ax_),
    WHIRLPOOL =
      [0,
       _a8_[2],
       _a8_[5],
       _a8_[4],
       _a8_[25],
       _a8_[26],
       _a8_[27],
       _a8_[28],
       _a8_[29],
       _a8_[30],
       _a8_[24],
       _a8_[31],
       _a8_[32],
       _a8_[33],
       _a8_[34],
       _a8_[35],
       _a8_[36],
       _a8_[37],
       _a8_[38],
       _a8_[39],
       _a8_[46],
       _a8_[47],
       _a8_[48],
       _a8_[43],
       _a8_[44],
       _a8_[45],
       _a8_[49],
       _a8_[50],
       _a8_[51],
       _a8_[23],
       _a8_[22],
       _a8_[18],
       _a8_[14],
       _a8_[15],
       _a8_[16],
       _a8_[17],
       _a8_[11],
       _a8_[19],
       _a8_[20],
       _a8_[21],
       _a8_[10]],
    _aE_ = [0, 128, 64];
   function _aF_(_dw_){return runtime.caml_digestif_blake2b_key_size(_dw_);}
   function _aG_(_dv_){return runtime.caml_digestif_blake2b_ctx_size(_dv_);}
   function _aH_(_du_){return runtime.caml_digestif_blake2b_max_outlen(_du_);}
   function _aI_(_dt_, _ds_, _dr_, _dq_, _dp_){
    return runtime.caml_digestif_blake2b_st_init_with_outlen_and_key
            (_dt_, _ds_, _dr_, _dq_, _dp_);
   }
   function _aJ_(_do_, _dn_, _dm_){
    return runtime.caml_digestif_blake2b_st_finalize(_do_, _dn_, _dm_);
   }
   var
    _aK_ =
      [0,
       function(_dl_, _dk_, _dj_, _di_){
        return runtime.caml_digestif_blake2b_st_update(_dl_, _dk_, _dj_, _di_);
       },
       _aJ_,
       _aI_];
   function _aL_(_dh_, _dg_, _df_, _de_, _dd_){
    return runtime.caml_digestif_blake2b_ba_init_with_outlen_and_key
            (_dh_, _dg_, _df_, _de_, _dd_);
   }
   function _aM_(_dc_, _db_, _da_){
    return runtime.caml_digestif_blake2b_ba_finalize(_dc_, _db_, _da_);
   }
   var
    _a7_ =
      Make_BLAKE2
       ([0,
         [0,
          function(_c$_, _c__, _c9_, _c8_){
           return runtime.caml_digestif_blake2b_ba_update
                   (_c$_, _c__, _c9_, _c8_);
          },
          _aM_,
          _aL_],
         _aK_,
         _aH_,
         _aG_,
         _aF_],
        _aE_),
    _aN_ = _a7_[52],
    BLAKE2B =
      [0,
       _a7_[2],
       _a7_[5],
       _a7_[4],
       _a7_[25],
       _a7_[26],
       _a7_[27],
       _a7_[28],
       _a7_[29],
       _a7_[30],
       _a7_[24],
       _a7_[31],
       _a7_[32],
       _a7_[33],
       _a7_[34],
       _a7_[35],
       _a7_[36],
       _a7_[37],
       _a7_[38],
       _a7_[39],
       _a7_[46],
       _a7_[47],
       _a7_[48],
       _a7_[43],
       _a7_[44],
       _a7_[45],
       _a7_[49],
       _a7_[50],
       _a7_[51],
       _a7_[23],
       _a7_[22],
       _a7_[18],
       _a7_[14],
       _a7_[15],
       _a7_[16],
       _a7_[17],
       _a7_[11],
       _a7_[19],
       _a7_[20],
       _a7_[21],
       _a7_[10],
       [0,
        _aN_[5],
        _aN_[6],
        _aN_[7],
        _aN_[2],
        _aN_[3],
        _aN_[4],
        _aN_[8],
        _aN_[9],
        _aN_[10]]],
    _aO_ = [0, 64, 32];
   function _aP_(_c7_){return runtime.caml_digestif_blake2s_key_size(_c7_);}
   function _aQ_(_c6_){return runtime.caml_digestif_blake2s_ctx_size(_c6_);}
   function _aR_(_c5_){return runtime.caml_digestif_blake2s_max_outlen(_c5_);}
   function _aS_(_c4_, _c3_, _c2_, _c1_, _c0_){
    return runtime.caml_digestif_blake2s_st_init_with_outlen_and_key
            (_c4_, _c3_, _c2_, _c1_, _c0_);
   }
   function _aT_(_cZ_, _cY_, _cX_){
    return runtime.caml_digestif_blake2s_st_finalize(_cZ_, _cY_, _cX_);
   }
   var
    _aU_ =
      [0,
       function(_cW_, _cV_, _cU_, _cT_){
        return runtime.caml_digestif_blake2s_st_update(_cW_, _cV_, _cU_, _cT_);
       },
       _aT_,
       _aS_];
   function _aV_(_cS_, _cR_, _cQ_, _cP_, _cO_){
    return runtime.caml_digestif_blake2s_ba_init_with_outlen_and_key
            (_cS_, _cR_, _cQ_, _cP_, _cO_);
   }
   function _aW_(_cN_, _cM_, _cL_){
    return runtime.caml_digestif_blake2s_ba_finalize(_cN_, _cM_, _cL_);
   }
   var
    _a6_ =
      Make_BLAKE2
       ([0,
         [0,
          function(_cK_, _cJ_, _cI_, _cH_){
           return runtime.caml_digestif_blake2s_ba_update
                   (_cK_, _cJ_, _cI_, _cH_);
          },
          _aW_,
          _aV_],
         _aU_,
         _aR_,
         _aQ_,
         _aP_],
        _aO_),
    _aX_ = _a6_[52],
    BLAKE2S =
      [0,
       _a6_[2],
       _a6_[5],
       _a6_[4],
       _a6_[25],
       _a6_[26],
       _a6_[27],
       _a6_[28],
       _a6_[29],
       _a6_[30],
       _a6_[24],
       _a6_[31],
       _a6_[32],
       _a6_[33],
       _a6_[34],
       _a6_[35],
       _a6_[36],
       _a6_[37],
       _a6_[38],
       _a6_[39],
       _a6_[46],
       _a6_[47],
       _a6_[48],
       _a6_[43],
       _a6_[44],
       _a6_[45],
       _a6_[49],
       _a6_[50],
       _a6_[51],
       _a6_[23],
       _a6_[22],
       _a6_[18],
       _a6_[14],
       _a6_[15],
       _a6_[16],
       _a6_[17],
       _a6_[11],
       _a6_[19],
       _a6_[20],
       _a6_[21],
       _a6_[10],
       [0,
        _aX_[5],
        _aX_[6],
        _aX_[7],
        _aX_[2],
        _aX_[3],
        _aX_[4],
        _aX_[8],
        _aX_[9],
        _aX_[10]]],
    _aY_ = [0, 64, 20];
   function _aZ_(_cG_){return runtime.caml_digestif_rmd160_ctx_size(_cG_);}
   function _a0_(_cF_, _cE_, _cD_){
    return runtime.caml_digestif_rmd160_st_finalize(_cF_, _cE_, _cD_);
   }
   function _a1_(_cC_, _cB_, _cA_, _cz_){
    return runtime.caml_digestif_rmd160_st_update(_cC_, _cB_, _cA_, _cz_);
   }
   var
    _a2_ =
      [0,
       function(_cy_){return runtime.caml_digestif_rmd160_st_init(_cy_);},
       _a1_,
       _a0_];
   function _a3_(_cx_, _cw_, _cv_){
    return runtime.caml_digestif_rmd160_ba_finalize(_cx_, _cw_, _cv_);
   }
   function _a4_(_cu_, _ct_, _cs_, _cr_){
    return runtime.caml_digestif_rmd160_ba_update(_cu_, _ct_, _cs_, _cr_);
   }
   var
    _a5_ =
      Make
       ([0,
         [0,
          function(_cq_){return runtime.caml_digestif_rmd160_ba_init(_cq_);},
          _a4_,
          _a3_],
         _a2_,
         _aZ_],
        _aY_),
    RMD160 =
      [0,
       _a5_[2],
       _a5_[5],
       _a5_[4],
       _a5_[25],
       _a5_[26],
       _a5_[27],
       _a5_[28],
       _a5_[29],
       _a5_[30],
       _a5_[24],
       _a5_[31],
       _a5_[32],
       _a5_[33],
       _a5_[34],
       _a5_[35],
       _a5_[36],
       _a5_[37],
       _a5_[38],
       _a5_[39],
       _a5_[46],
       _a5_[47],
       _a5_[48],
       _a5_[43],
       _a5_[44],
       _a5_[45],
       _a5_[49],
       _a5_[50],
       _a5_[51],
       _a5_[23],
       _a5_[22],
       _a5_[18],
       _a5_[14],
       _a5_[15],
       _a5_[16],
       _a5_[17],
       _a5_[11],
       _a5_[19],
       _a5_[20],
       _a5_[21],
       _a5_[10]];
   function Make_BLAKE2B(D){
    var digest_size = D[1], _bS_ = [0, 128, digest_size];
    function _bT_(_cp_){return runtime.caml_digestif_blake2b_key_size(_cp_);}
    function _bU_(_co_){return runtime.caml_digestif_blake2b_ctx_size(_co_);}
    function _bV_(_cn_){
     return runtime.caml_digestif_blake2b_max_outlen(_cn_);
    }
    function _bW_(_cm_, _cl_, _ck_, _cj_, _ci_){
     return runtime.caml_digestif_blake2b_st_init_with_outlen_and_key
             (_cm_, _cl_, _ck_, _cj_, _ci_);
    }
    function _bX_(_ch_, _cg_, _cf_){
     return runtime.caml_digestif_blake2b_st_finalize(_ch_, _cg_, _cf_);
    }
    var
     _bY_ =
       [0,
        function(_ce_, _cd_, _cc_, _cb_){
         return runtime.caml_digestif_blake2b_st_update
                 (_ce_, _cd_, _cc_, _cb_);
        },
        _bX_,
        _bW_];
    function _bZ_(_ca_, _b$_, _b__, _b9_, _b8_){
     return runtime.caml_digestif_blake2b_ba_init_with_outlen_and_key
             (_ca_, _b$_, _b__, _b9_, _b8_);
    }
    function _b0_(_b7_, _b6_, _b5_){
     return runtime.caml_digestif_blake2b_ba_finalize(_b7_, _b6_, _b5_);
    }
    var
     include =
       Make_BLAKE2
        ([0,
          [0,
           function(_b4_, _b3_, _b2_, _b1_){
            return runtime.caml_digestif_blake2b_ba_update
                    (_b4_, _b3_, _b2_, _b1_);
           },
           _b0_,
           _bZ_],
          _bY_,
          _bV_,
          _bU_,
          _bT_],
         _bS_),
     digest_size$0 = include[2],
     init = include[4],
     empty = include[5],
     get_into_bytes = include[10],
     to_hex = include[11],
     of_hex = include[14],
     of_hex_opt = include[15],
     consistent_of_hex = include[16],
     consistent_of_hex_opt = include[17],
     pp = include[18],
     of_raw_string = include[19],
     of_raw_string_opt = include[20],
     to_raw_string = include[21],
     equal = include[22],
     unsafe_compare = include[23],
     get = include[24],
     feed_bytes = include[25],
     feed_string = include[26],
     feed_bigstring = include[27],
     feedi_bytes = include[28],
     feedi_string = include[29],
     feedi_bigstring = include[30],
     digest_bytes = include[31],
     digest_string = include[32],
     digest_bigstring = include[33],
     digesti_bytes = include[34],
     digesti_string = include[35],
     digesti_bigstring = include[36],
     digestv_bytes = include[37],
     digestv_string = include[38],
     digestv_bigstring = include[39],
     hmaci_bytes = include[43],
     hmaci_string = include[44],
     hmaci_bigstring = include[45],
     hmac_bytes = include[46],
     hmac_string = include[47],
     hmac_bigstring = include[48],
     hmacv_bytes = include[49],
     hmacv_string = include[50],
     hmacv_bigstring = include[51];
    return [0,
            digest_size$0,
            empty,
            init,
            feed_bytes,
            feed_string,
            feed_bigstring,
            feedi_bytes,
            feedi_string,
            feedi_bigstring,
            get,
            digest_bytes,
            digest_string,
            digest_bigstring,
            digesti_bytes,
            digesti_string,
            digesti_bigstring,
            digestv_bytes,
            digestv_string,
            digestv_bigstring,
            hmac_bytes,
            hmac_string,
            hmac_bigstring,
            hmaci_bytes,
            hmaci_string,
            hmaci_bigstring,
            hmacv_bytes,
            hmacv_string,
            hmacv_bigstring,
            unsafe_compare,
            equal,
            pp,
            of_hex,
            of_hex_opt,
            consistent_of_hex,
            consistent_of_hex_opt,
            to_hex,
            of_raw_string,
            of_raw_string_opt,
            to_raw_string,
            get_into_bytes];
   }
   function Make_BLAKE2S(D){
    var digest_size = D[1], _bi_ = [0, 64, digest_size];
    function _bj_(_bR_){return runtime.caml_digestif_blake2s_key_size(_bR_);}
    function _bk_(_bQ_){return runtime.caml_digestif_blake2s_ctx_size(_bQ_);}
    function _bl_(_bP_){
     return runtime.caml_digestif_blake2s_max_outlen(_bP_);
    }
    function _bm_(_bO_, _bN_, _bM_, _bL_, _bK_){
     return runtime.caml_digestif_blake2s_st_init_with_outlen_and_key
             (_bO_, _bN_, _bM_, _bL_, _bK_);
    }
    function _bn_(_bJ_, _bI_, _bH_){
     return runtime.caml_digestif_blake2s_st_finalize(_bJ_, _bI_, _bH_);
    }
    var
     _bo_ =
       [0,
        function(_bG_, _bF_, _bE_, _bD_){
         return runtime.caml_digestif_blake2s_st_update
                 (_bG_, _bF_, _bE_, _bD_);
        },
        _bn_,
        _bm_];
    function _bp_(_bC_, _bB_, _bA_, _bz_, _by_){
     return runtime.caml_digestif_blake2s_ba_init_with_outlen_and_key
             (_bC_, _bB_, _bA_, _bz_, _by_);
    }
    function _bq_(_bx_, _bw_, _bv_){
     return runtime.caml_digestif_blake2s_ba_finalize(_bx_, _bw_, _bv_);
    }
    var
     include =
       Make_BLAKE2
        ([0,
          [0,
           function(_bu_, _bt_, _bs_, _br_){
            return runtime.caml_digestif_blake2s_ba_update
                    (_bu_, _bt_, _bs_, _br_);
           },
           _bq_,
           _bp_],
          _bo_,
          _bl_,
          _bk_,
          _bj_],
         _bi_),
     digest_size$0 = include[2],
     init = include[4],
     empty = include[5],
     get_into_bytes = include[10],
     to_hex = include[11],
     of_hex = include[14],
     of_hex_opt = include[15],
     consistent_of_hex = include[16],
     consistent_of_hex_opt = include[17],
     pp = include[18],
     of_raw_string = include[19],
     of_raw_string_opt = include[20],
     to_raw_string = include[21],
     equal = include[22],
     unsafe_compare = include[23],
     get = include[24],
     feed_bytes = include[25],
     feed_string = include[26],
     feed_bigstring = include[27],
     feedi_bytes = include[28],
     feedi_string = include[29],
     feedi_bigstring = include[30],
     digest_bytes = include[31],
     digest_string = include[32],
     digest_bigstring = include[33],
     digesti_bytes = include[34],
     digesti_string = include[35],
     digesti_bigstring = include[36],
     digestv_bytes = include[37],
     digestv_string = include[38],
     digestv_bigstring = include[39],
     hmaci_bytes = include[43],
     hmaci_string = include[44],
     hmaci_bigstring = include[45],
     hmac_bytes = include[46],
     hmac_string = include[47],
     hmac_bigstring = include[48],
     hmacv_bytes = include[49],
     hmacv_string = include[50],
     hmacv_bigstring = include[51];
    return [0,
            digest_size$0,
            empty,
            init,
            feed_bytes,
            feed_string,
            feed_bigstring,
            feedi_bytes,
            feedi_string,
            feedi_bigstring,
            get,
            digest_bytes,
            digest_string,
            digest_bigstring,
            digesti_bytes,
            digesti_string,
            digesti_bigstring,
            digestv_bytes,
            digestv_string,
            digestv_bigstring,
            hmac_bytes,
            hmac_string,
            hmac_bigstring,
            hmaci_bytes,
            hmaci_string,
            hmaci_bigstring,
            hmacv_bytes,
            hmacv_string,
            hmacv_bigstring,
            unsafe_compare,
            equal,
            pp,
            of_hex,
            of_hex_opt,
            consistent_of_hex,
            consistent_of_hex_opt,
            to_hex,
            of_raw_string,
            of_raw_string_opt,
            to_raw_string,
            get_into_bytes];
   }
   var
    md5 = 0,
    sha1 = 1,
    rmd160 = 2,
    sha224 = 3,
    sha256 = 4,
    sha384 = 5,
    sha512 = 6,
    sha3_224 = 7,
    sha3_256 = 8,
    keccak_256 = 9,
    sha3_384 = 10,
    sha3_512 = 11,
    whirlpool = 12,
    blake2b = 13,
    blake2s = 14;
   function hash_to_hash(param){
    switch(param){
      case 0:
       return 3844350;
      case 1:
       return 924029093;
      case 2:
       return -868867806;
      case 3:
       return -812273176;
      case 4:
       return -812272505;
      case 5:
       return -812222109;
      case 6:
       return -812124214;
      case 7:
       return -688402020;
      case 8:
       return -688401349;
      case 9:
       return -161105864;
      case 10:
       return -688350953;
      case 11:
       return -688253058;
      case 12:
       return -491873618;
      case 13:
       return 981157537;
      default: return 981157554;
    }
   }
   function module_of_hash(param){
    return -688350953 <= param
            ? 3844350
              <= param
              ? 981157537
                <= param
                ? 981157554
                  <= param
                  ? [0,
                    BLAKE2S[1],
                    BLAKE2S[2],
                    BLAKE2S[3],
                    BLAKE2S[4],
                    BLAKE2S[5],
                    BLAKE2S[6],
                    BLAKE2S[7],
                    BLAKE2S[8],
                    BLAKE2S[9],
                    BLAKE2S[10],
                    BLAKE2S[11],
                    BLAKE2S[12],
                    BLAKE2S[13],
                    BLAKE2S[14],
                    BLAKE2S[15],
                    BLAKE2S[16],
                    BLAKE2S[17],
                    BLAKE2S[18],
                    BLAKE2S[19],
                    BLAKE2S[20],
                    BLAKE2S[21],
                    BLAKE2S[22],
                    BLAKE2S[23],
                    BLAKE2S[24],
                    BLAKE2S[25],
                    BLAKE2S[26],
                    BLAKE2S[27],
                    BLAKE2S[28],
                    BLAKE2S[29],
                    BLAKE2S[30],
                    BLAKE2S[31],
                    BLAKE2S[32],
                    BLAKE2S[33],
                    BLAKE2S[34],
                    BLAKE2S[35],
                    BLAKE2S[36],
                    BLAKE2S[37],
                    BLAKE2S[38],
                    BLAKE2S[39],
                    BLAKE2S[40]]
                  : [0,
                    BLAKE2B[1],
                    BLAKE2B[2],
                    BLAKE2B[3],
                    BLAKE2B[4],
                    BLAKE2B[5],
                    BLAKE2B[6],
                    BLAKE2B[7],
                    BLAKE2B[8],
                    BLAKE2B[9],
                    BLAKE2B[10],
                    BLAKE2B[11],
                    BLAKE2B[12],
                    BLAKE2B[13],
                    BLAKE2B[14],
                    BLAKE2B[15],
                    BLAKE2B[16],
                    BLAKE2B[17],
                    BLAKE2B[18],
                    BLAKE2B[19],
                    BLAKE2B[20],
                    BLAKE2B[21],
                    BLAKE2B[22],
                    BLAKE2B[23],
                    BLAKE2B[24],
                    BLAKE2B[25],
                    BLAKE2B[26],
                    BLAKE2B[27],
                    BLAKE2B[28],
                    BLAKE2B[29],
                    BLAKE2B[30],
                    BLAKE2B[31],
                    BLAKE2B[32],
                    BLAKE2B[33],
                    BLAKE2B[34],
                    BLAKE2B[35],
                    BLAKE2B[36],
                    BLAKE2B[37],
                    BLAKE2B[38],
                    BLAKE2B[39],
                    BLAKE2B[40]]
                : 924029093 <= param ? SHA1 : MD5
              : -491873618
                <= param
                ? -161105864 <= param ? KECCAK_256 : WHIRLPOOL
                : -688253058 <= param ? SHA3_512 : SHA3_384
            : -812222109
              <= param
              ? -688402020
                <= param
                ? -688401349 <= param ? SHA3_256 : SHA3_224
                : -812124214 <= param ? SHA512 : SHA384
              : -812273176
                === param
                ? SHA224
                : -812272505 <= param ? SHA256 : RMD160;
   }
   function module_of(param){
    switch(param){
      case 0:
       return MD5;
      case 1:
       return SHA1;
      case 2:
       return RMD160;
      case 3:
       return SHA224;
      case 4:
       return SHA256;
      case 5:
       return SHA384;
      case 6:
       return SHA512;
      case 7:
       return SHA3_224;
      case 8:
       return SHA3_256;
      case 9:
       return KECCAK_256;
      case 10:
       return SHA3_384;
      case 11:
       return SHA3_512;
      case 12:
       return WHIRLPOOL;
      case 13:
       return [0,
               BLAKE2B[1],
               BLAKE2B[2],
               BLAKE2B[3],
               BLAKE2B[4],
               BLAKE2B[5],
               BLAKE2B[6],
               BLAKE2B[7],
               BLAKE2B[8],
               BLAKE2B[9],
               BLAKE2B[10],
               BLAKE2B[11],
               BLAKE2B[12],
               BLAKE2B[13],
               BLAKE2B[14],
               BLAKE2B[15],
               BLAKE2B[16],
               BLAKE2B[17],
               BLAKE2B[18],
               BLAKE2B[19],
               BLAKE2B[20],
               BLAKE2B[21],
               BLAKE2B[22],
               BLAKE2B[23],
               BLAKE2B[24],
               BLAKE2B[25],
               BLAKE2B[26],
               BLAKE2B[27],
               BLAKE2B[28],
               BLAKE2B[29],
               BLAKE2B[30],
               BLAKE2B[31],
               BLAKE2B[32],
               BLAKE2B[33],
               BLAKE2B[34],
               BLAKE2B[35],
               BLAKE2B[36],
               BLAKE2B[37],
               BLAKE2B[38],
               BLAKE2B[39],
               BLAKE2B[40]];
      default:
       return [0,
               BLAKE2S[1],
               BLAKE2S[2],
               BLAKE2S[3],
               BLAKE2S[4],
               BLAKE2S[5],
               BLAKE2S[6],
               BLAKE2S[7],
               BLAKE2S[8],
               BLAKE2S[9],
               BLAKE2S[10],
               BLAKE2S[11],
               BLAKE2S[12],
               BLAKE2S[13],
               BLAKE2S[14],
               BLAKE2S[15],
               BLAKE2S[16],
               BLAKE2S[17],
               BLAKE2S[18],
               BLAKE2S[19],
               BLAKE2S[20],
               BLAKE2S[21],
               BLAKE2S[22],
               BLAKE2S[23],
               BLAKE2S[24],
               BLAKE2S[25],
               BLAKE2S[26],
               BLAKE2S[27],
               BLAKE2S[28],
               BLAKE2S[29],
               BLAKE2S[30],
               BLAKE2S[31],
               BLAKE2S[32],
               BLAKE2S[33],
               BLAKE2S[34],
               BLAKE2S[35],
               BLAKE2S[36],
               BLAKE2S[37],
               BLAKE2S[38],
               BLAKE2S[39],
               BLAKE2S[40]];
    }
   }
   function digest_bytes(hash, buf){
    return caml_call3(module_of(hash)[11], 0, 0, buf);
   }
   function digest_string(hash, buf){
    return caml_call3(module_of(hash)[12], 0, 0, buf);
   }
   function digest_bigstring(hash, buf){
    return caml_call3(module_of(hash)[13], 0, 0, buf);
   }
   function digesti_bytes(hash, iter){
    return caml_call1(module_of(hash)[14], iter);
   }
   function digesti_string(hash, iter){
    return caml_call1(module_of(hash)[15], iter);
   }
   function digesti_bigstring(hash, iter){
    return caml_call1(module_of(hash)[16], iter);
   }
   function hmaci_bytes(hash, key, iter){
    return caml_call2(module_of(hash)[23], key, iter);
   }
   function hmaci_string(hash, key, iter){
    return caml_call2(module_of(hash)[24], key, iter);
   }
   function hmaci_bigstring(hash, key, iter){
    return caml_call2(module_of(hash)[25], key, iter);
   }
   function unsafe_compare(hash, a, b){
    return caml_call2(module_of(hash)[29], a, b);
   }
   function equal(hash, a, b){return caml_call2(module_of(hash)[30], a, b);}
   function pp(hash, ppf, t){return caml_call2(module_of(hash)[31], ppf, t);}
   function consistent_of_hex(hash, hex){
    return caml_call1(module_of(hash)[34], hex);
   }
   function consistent_of_hex_opt(hash, hex){
    return caml_call1(module_of(hash)[35], hex);
   }
   function of_hex(hash, hex){return caml_call1(module_of(hash)[32], hex);}
   function of_hex_opt(hash, hex){
    return caml_call1(module_of(hash)[33], hex);
   }
   function to_hex(hash, t){return caml_call1(module_of(hash)[36], t);}
   function of_raw_string(hash, s){return caml_call1(module_of(hash)[37], s);}
   function of_raw_string_opt(hash, s){
    return caml_call1(module_of(hash)[38], s);
   }
   function to_raw_string(hash, t){return caml_call1(module_of(hash)[39], t);}
   function of_digest(H, hash){return hash;}
   function of_md5(hash){return hash;}
   function of_sha1(hash){return hash;}
   function of_rmd160(hash){return hash;}
   function of_sha224(hash){return hash;}
   function of_sha256(hash){return hash;}
   function of_sha384(hash){return hash;}
   function of_sha512(hash){return hash;}
   function of_sha3_224(hash){return hash;}
   function of_sha3_256(hash){return hash;}
   function of_keccak_256(hash){return hash;}
   function of_sha3_384(hash){return hash;}
   function of_sha3_512(hash){return hash;}
   function of_whirlpool(hash){return hash;}
   function of_blake2b(hash){return hash;}
   function of_blake2s(hash){return hash;}
   var
    Digestif =
      [0,
       MD5,
       SHA1,
       SHA224,
       SHA256,
       SHA384,
       SHA512,
       SHA3_224,
       SHA3_256,
       KECCAK_256,
       SHA3_384,
       SHA3_512,
       WHIRLPOOL,
       BLAKE2B,
       BLAKE2S,
       RMD160,
       Make_BLAKE2B,
       Make_BLAKE2S,
       module_of_hash,
       hash_to_hash,
       md5,
       sha1,
       rmd160,
       sha224,
       sha256,
       sha384,
       sha512,
       sha3_224,
       sha3_256,
       keccak_256,
       sha3_384,
       sha3_512,
       whirlpool,
       blake2b,
       blake2s,
       module_of,
       digest_bytes,
       digest_string,
       digest_bigstring,
       digesti_bytes,
       digesti_string,
       digesti_bigstring,
       hmaci_bytes,
       hmaci_string,
       hmaci_bigstring,
       pp,
       equal,
       unsafe_compare,
       to_hex,
       of_hex,
       of_hex_opt,
       consistent_of_hex,
       consistent_of_hex_opt,
       of_raw_string,
       of_raw_string_opt,
       to_raw_string,
       of_digest,
       of_md5,
       of_sha1,
       of_rmd160,
       of_sha224,
       of_sha256,
       of_sha384,
       of_sha512,
       of_sha3_224,
       of_sha3_256,
       of_keccak_256,
       of_sha3_384,
       of_sha3_512,
       of_whirlpool,
       of_blake2b,
       of_blake2s];
   runtime.caml_register_global(18, Digestif, "Digestif");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
