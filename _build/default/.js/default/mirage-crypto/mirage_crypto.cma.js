// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Mirage_crypto__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Mirage_crypto = [0];
   runtime.caml_register_global(0, Mirage_crypto, "Mirage_crypto__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Native
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    AES = [0],
    DES = [0],
    Chacha = [0],
    Poly1305 = [0],
    GHASH = [0];
   runtime.mc_detect_cpu_features(0);
   runtime.mc_entropy_detect(0);
   var Mirage_crypto_Native = [0, AES, DES, Chacha, Poly1305, GHASH];
   runtime.caml_register_global
    (0, Mirage_crypto_Native, "Mirage_crypto__Native");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Uncommon
//# unitInfo: Requires: Mirage_crypto__Native, Stdlib, Stdlib__Bytes, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Mirage_crypto = "Mirage_crypto: ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Format = global_data.Stdlib__Format,
    _b_ = [0, "src/uncommon.ml", 24, 2],
    _a_ = [0, [11, cst_Mirage_crypto, 0], cst_Mirage_crypto];
   function kasprintf(k, fmt){
    var _d_ = Stdlib_Format[117];
    function _e_(param){
     return caml_call1(k, caml_call1(Stdlib_Format[119], 0));
    }
    return caml_call3(Stdlib_Format[144], _e_, _d_, fmt);
   }
   function invalid_arg(fmt){
    var _c_ = caml_call2(Stdlib[98], _a_, fmt);
    return kasprintf(Stdlib[1], _c_);
   }
   function symbol(x, y){
    if(1 <= y) return 0 < x ? 1 + runtime.caml_div(x - 1 | 0, y) | 0 : 0;
    throw caml_maybe_attach_backtrace(Stdlib[13], 1);
   }
   function imin(a, b){return a < b ? a : b;}
   function imax(a, b){return a < b ? b : a;}
   function iter2(a, b, f){caml_call1(f, a); return caml_call1(f, b);}
   function iter3(a, b, c, f){
    caml_call1(f, a);
    caml_call1(f, b);
    return caml_call1(f, c);
   }
   function unsafe_xor_into(src, src_off, dst, dst_off, n){
    return runtime.mc_xor_into_bytes(src, src_off, dst, dst_off, n);
   }
   function xor(a, b){
    if(caml_ml_string_length(a) !== caml_ml_string_length(b))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var b$0 = caml_call1(Stdlib_Bytes[5], b);
    runtime.mc_xor_into_bytes(a, 0, b$0, 0, runtime.caml_ml_bytes_length(b$0));
    return caml_call1(Stdlib_Bytes[44], b$0);
   }
   var
    Mirage_crypto_Uncommon =
      [0,
       kasprintf,
       invalid_arg,
       symbol,
       imin,
       imax,
       iter2,
       iter3,
       unsafe_xor_into,
       xor];
   runtime.caml_register_global
    (6, Mirage_crypto_Uncommon, "Mirage_crypto__Uncommon");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Poly1305
//# unitInfo: Requires: Mirage_crypto__Native, Mirage_crypto__Uncommon, Stdlib, Stdlib__Bytes, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_off = " - off ",
    cst_0 = " < 0",
    cst_len = " < len ",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    mac_size = runtime.mc_poly1305_mac_size(0),
    dup = Stdlib_Bytes[4],
    _c_ =
      [0,
       [11, "Poly1305: d off ", [4, 12, 0, 0, [11, cst_0, 0]]],
       "Poly1305: d off %u < 0"],
    _d_ =
      [0,
       [11,
        "Poly1305: d length ",
        [4,
         12,
         0,
         0,
         [11, cst_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       "Poly1305: d length %u - off %u < len %u"],
    _a_ =
      [0,
       [11,
        "Poly1305: dst length ",
        [4,
         12,
         0,
         0,
         [11, cst_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       "Poly1305: dst length %u - off %u < len %u"],
    _b_ =
      [0,
       [11, "Poly1305: dst_off ", [4, 12, 0, 0, [11, cst_0, 0]]],
       "Poly1305: dst_off %u < 0"],
    cst_Poly1305_key_must_be_32_by = "Poly1305 key must be 32 bytes";
   function empty(key){
    var ctx = caml_create_bytes(runtime.mc_poly1305_ctx_size(0));
    if(32 !== caml_ml_string_length(key))
     caml_call1(Stdlib[1], cst_Poly1305_key_must_be_32_by);
    runtime.mc_poly1305_init(ctx, key);
    return ctx;
   }
   function update(ctx, data){
    return runtime.mc_poly1305_update
            (ctx, data, 0, caml_ml_string_length(data));
   }
   function feed(ctx, cs){
    var t = caml_call1(dup, ctx);
    update(t, cs);
    return t;
   }
   function feedi(ctx, iter){
    var t = caml_call1(dup, ctx);
    caml_call1(iter, function(_g_){return update(t, _g_);});
    return t;
   }
   function final$0(ctx){
    var res = caml_create_bytes(mac_size);
    runtime.mc_poly1305_finalize(ctx, res, 0);
    return caml_call1(Stdlib_Bytes[44], res);
   }
   function get(ctx){return final$0(caml_call1(dup, ctx));}
   function mac(key, data){return final$0(feed(empty(key), data));}
   function maci(key, iter){return final$0(feedi(empty(key), iter));}
   function unsafe_mac_into(key, datas, dst, dst_off){
    var ctx = empty(key);
    function _f_(param){
     var len = param[3], off = param[2], d = param[1];
     return runtime.mc_poly1305_update(ctx, d, off, len);
    }
    caml_call2(Stdlib_List[18], _f_, datas);
    return runtime.mc_poly1305_finalize(ctx, dst, dst_off);
   }
   function mac_into(key, datas, dst, dst_off){
    if((caml_ml_bytes_length(dst) - dst_off | 0) < mac_size)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _a_,
       caml_ml_bytes_length(dst),
       dst_off,
       mac_size);
    if(dst_off < 0) caml_call2(Mirage_crypto_Uncommon[2], _b_, dst_off);
    var ctx = empty(key);
    function _e_(param){
     var len = param[3], off = param[2], d = param[1];
     if(off < 0) caml_call2(Mirage_crypto_Uncommon[2], _c_, off);
     if((caml_ml_string_length(d) - off | 0) < len)
      caml_call4
       (Mirage_crypto_Uncommon[2], _d_, caml_ml_string_length(d), off, len);
     return runtime.mc_poly1305_update(ctx, d, off, len);
    }
    caml_call2(Stdlib_List[18], _e_, datas);
    return runtime.mc_poly1305_finalize(ctx, dst, dst_off);
   }
   var
    It =
      [0,
       mac_size,
       empty,
       feed,
       feedi,
       get,
       mac,
       maci,
       mac_into,
       unsafe_mac_into],
    Mirage_crypto_Poly1305 = [0, It];
   runtime.caml_register_global
    (9, Mirage_crypto_Poly1305, "Mirage_crypto__Poly1305");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Aead
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Mirage_crypto_Aead = [0];
   runtime.caml_register_global(0, Mirage_crypto_Aead, "Mirage_crypto__Aead");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Ccm
//# unitInfo: Requires: Eqaf, Mirage_crypto__Uncommon, Stdlib__Bytes, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_blit_string = runtime.caml_blit_string,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Eqaf = global_data.Eqaf,
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    Stdlib_Sys = global_data.Stdlib__Sys,
    block_size = 16;
   function flags(bit6, len1, len2){
    return ((bit6 << 6) + (len1 << 3) | 0) + len2 | 0;
   }
   function encode_len(buf, off, size, value){
    var m$1 = size - 1 | 0, num = value, m = m$1;
    for(;;){
     if(0 === m) return caml_call3(Stdlib_Bytes[73], buf, off, num);
     caml_call3(Stdlib_Bytes[73], buf, off + m | 0, num & 255);
     var m$0 = m - 1 | 0, num$0 = num >>> 8 | 0, num = num$0, m = m$0;
    }
   }
   function set_format(buf, opt, nonce, flag_val, value){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var n = caml_ml_string_length(nonce), small_q = 15 - n | 0;
    caml_call3(Stdlib_Bytes[73], buf, off, flag_val);
    caml_blit_string(nonce, 0, buf, off + 1 | 0, n);
    return encode_len(buf, (off + n | 0) + 1 | 0, small_q, value);
   }
   function gen_adata(a){
    var x = caml_ml_string_length(a);
    a:
    if(x < 65280)
     var
      _c_ = 2,
      set_llen =
        function(buf, off){return caml_call3(Stdlib_Bytes[76], buf, off, x);},
      llen = _c_;
    else{
     if(32 <= Stdlib_Sys[10] && x >= 1){
      var
       set_llen$0 =
         function(buf, off){
          caml_call3(Stdlib_Bytes[76], buf, off, 65535);
          return caml_call3
                  (Stdlib_Bytes[85],
                   buf,
                   off + 2 | 0,
                   runtime.caml_int64_of_int32(x));
         },
       set_llen = set_llen$0,
       llen = 10;
      break a;
     }
     var
      _d_ = 6,
      set_llen =
        function(buf, off){
         caml_call3(Stdlib_Bytes[76], buf, off, 65534);
         return caml_call3(Stdlib_Bytes[82], buf, off + 2 | 0, x);
        },
      llen = _d_;
    }
    var
     leftover = (llen + caml_ml_string_length(a) | 0) % 16 | 0,
     to_pad = 16 - leftover | 0;
    return [0,
            (llen + caml_ml_string_length(a) | 0) + to_pad | 0,
            function(buf, off){
             set_llen(buf, off);
             caml_blit_string
              (a, 0, buf, off + llen | 0, caml_ml_string_length(a));
             return caml_fill_bytes
                     (buf,
                      (off + llen | 0) + caml_ml_string_length(a) | 0,
                      to_pad,
                      0);
            }];
   }
   function gen_ctr(nonce, i){
    var
     n = caml_ml_string_length(nonce),
     small_q = 15 - n | 0,
     flag_val = flags(0, 0, small_q - 1 | 0),
     buf = caml_create_bytes(16);
    set_format(buf, 0, nonce, flag_val, i);
    return buf;
   }
   function prepare_header(nonce, adata, plen, tlen){
    var
     small_q = 15 - caml_ml_string_length(nonce) | 0,
     b6 = 0 === caml_ml_string_length(adata) ? 0 : 1,
     flag_val = flags(b6, (tlen - 2 | 0) / 2 | 0, small_q - 1 | 0);
    if(0 === caml_ml_string_length(adata)){
     var hdr = caml_create_bytes(16);
     set_format(hdr, 0, nonce, flag_val, plen);
     return hdr;
    }
    var
     match = gen_adata(adata),
     set = match[2],
     len = match[1],
     buf = caml_create_bytes(16 + len | 0);
    set_format(buf, 0, nonce, flag_val, plen);
    caml_call2(set, buf, 16);
    return buf;
   }
   function crypto_core_into
   (cipher, mode, key, nonce, adata, src, src_off, dst, dst_off, len){
    var
     cbcheader = prepare_header(nonce, adata, len, block_size),
     small_q = 15 - caml_ml_string_length(nonce) | 0,
     ctr_flag_val = flags(0, 0, small_q - 1 | 0);
    function ctrblock(i, block, dst_off){
     caml_call3(Stdlib_Bytes[73], block, dst_off, ctr_flag_val);
     caml_blit_string
      (nonce, 0, block, dst_off + 1 | 0, caml_ml_string_length(nonce));
     encode_len
      (block,
       (dst_off + caml_ml_string_length(nonce) | 0) + 1 | 0,
       small_q,
       i);
     return caml_call5
             (cipher,
              key,
              caml_call1(Stdlib_Bytes[44], block),
              dst_off,
              block,
              dst_off);
    }
    function cbc(iv, src_off, block, dst_off){
     caml_call5
      (Mirage_crypto_Uncommon[8], iv, src_off, block, dst_off, block_size);
     return caml_call5
             (cipher,
              key,
              caml_call1(Stdlib_Bytes[44], block),
              dst_off,
              block,
              dst_off);
    }
    var
     iv$1 = caml_call2(Stdlib_Bytes[1], block_size, 0),
     iv = iv$1,
     iv_off = 0,
     block_off = 0;
    for(;;){
     if(0 === (caml_ml_bytes_length(cbcheader) - block_off | 0)) break;
     cbc(caml_call1(Stdlib_Bytes[44], iv), iv_off, cbcheader, block_off);
     var
      block_off$0 = block_off + 16 | 0,
      iv = cbcheader,
      iv_off = block_off,
      block_off = block_off$0;
    }
    var
     iv$0 = caml_call3(Stdlib_Bytes[7], iv, iv_off, block_size),
     ctr = 1,
     src_off$0 = src_off,
     dst_off$0 = dst_off,
     len$0 = len;
    for(;;){
     if(mode)
      var cbc_off = dst_off$0, cbcblock = caml_call1(Stdlib_Bytes[44], dst);
     else
      var cbc_off = src_off$0, cbcblock = src;
     if(0 !== len$0){
      if(len$0 >= 16){
       ctrblock(ctr, dst, dst_off$0);
       caml_call5
        (Mirage_crypto_Uncommon[8],
         src,
         src_off$0,
         dst,
         dst_off$0,
         block_size);
       cbc(cbcblock, cbc_off, iv$0, 0);
       var
        len$1 = len$0 - 16 | 0,
        dst_off$1 = dst_off$0 + 16 | 0,
        src_off$1 = src_off$0 + 16 | 0,
        ctr$0 = ctr + 1 | 0,
        ctr = ctr$0,
        src_off$0 = src_off$1,
        dst_off$0 = dst_off$1,
        len$0 = len$1;
       continue;
      }
      var buf = caml_call2(Stdlib_Bytes[1], block_size, 0);
      caml_blit_bytes(dst, dst_off$0, buf, 0, len$0);
      ctrblock(ctr, buf, 0);
      caml_blit_bytes(buf, 0, dst, dst_off$0, len$0);
      caml_call5
       (Mirage_crypto_Uncommon[8], src, src_off$0, dst, dst_off$0, len$0);
      caml_blit_string(cbcblock, cbc_off, buf, 0, len$0);
      caml_fill_bytes(buf, len$0, 16 - len$0 | 0, 0);
      cbc(caml_call1(Stdlib_Bytes[44], buf), 0, iv$0, 0);
     }
     return iv$0;
    }
   }
   function crypto_core(cipher, mode, key, nonce, adata, data){
    var
     datalen = caml_ml_string_length(data),
     dst = caml_create_bytes(datalen),
     t =
       crypto_core_into
        (cipher, mode, key, nonce, adata, data, 0, dst, 0, datalen);
    return [0, dst, t];
   }
   function crypto_t(t, nonce, cipher, key){
    var ctr = gen_ctr(nonce, 0);
    caml_call5(cipher, key, caml_call1(Stdlib_Bytes[44], ctr), 0, ctr, 0);
    var _b_ = caml_call1(Stdlib_Bytes[44], ctr);
    return caml_call5
            (Mirage_crypto_Uncommon[8], _b_, 0, t, 0, caml_ml_bytes_length(t));
   }
   function unsafe_generation_encryption_i
   (cipher, key, nonce, adata, src, src_off, dst, dst_off, tag_off, len){
    var
     t =
       crypto_core_into
        (cipher, 0, key, nonce, adata, src, src_off, dst, dst_off, len);
    crypto_t(t, nonce, cipher, key);
    return caml_blit_bytes(t, 0, dst, tag_off, 16);
   }
   function unsafe_decryption_verification
   (cipher, key, nonce, adata, src, src_off, tag_off, dst, dst_off, len){
    var
     tag = caml_call3(Stdlib_String[16], src, tag_off, block_size),
     t =
       crypto_core_into
        (cipher, 1, key, nonce, adata, src, src_off, dst, dst_off, len);
    crypto_t(t, nonce, cipher, key);
    var _a_ = caml_call1(Stdlib_Bytes[44], t);
    return caml_call2(Eqaf[1], tag, _a_);
   }
   var
    Mirage_crypto_Ccm =
      [0,
       block_size,
       flags,
       encode_len,
       set_format,
       gen_adata,
       gen_ctr,
       prepare_header,
       crypto_core_into,
       crypto_core,
       crypto_t,
       unsafe_generation_encryption_i,
       unsafe_decryption_verification];
   runtime.caml_register_global(5, Mirage_crypto_Ccm, "Mirage_crypto__Ccm");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Chacha20
//# unitInfo: Requires: Eqaf, Mirage_crypto__Native, Mirage_crypto__Poly1305, Mirage_crypto__Uncommon, Stdlib, Stdlib__Bytes, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_dst_off = " - dst_off ",
    cst_src_off = " - src_off ",
    cst_tag_off = " - tag_off ",
    cst_len = " < len ",
    cst_tag_size = " < tag_size ",
    cst_Chacha20_dst_length = "Chacha20: dst length ",
    cst_Chacha20_dst_length_u_dst_ =
      "Chacha20: dst length %u - dst_off %u < len %u",
    cst_Chacha20_src_length = "Chacha20: src length ",
    cst_Chacha20_src_length_u_src_ =
      "Chacha20: src length %u - src_off %u < len %u",
    cst_Counter_too_big_for_IETF_m =
      "Counter too big for IETF mode (32 bit counter)",
    cst_Valid_parameters_are_nonce =
      "Valid parameters are nonce 12 bytes and key 32 bytes (counter 32 bit), or nonce 8 byte and key 16 or 32 bytes (counter 64 bit).",
    cst_expand_32_byte_k$1 = "expand 32-byte k",
    caml_blit_string = runtime.caml_blit_string,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    Stdlib_String = global_data.Stdlib__String,
    Eqaf = global_data.Eqaf,
    Mirage_crypto_Poly1305 = global_data.Mirage_crypto__Poly1305,
    _k_ =
      [0,
       [11,
        cst_Chacha20_src_length,
        [4,
         12,
         0,
         0,
         [11, cst_src_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       cst_Chacha20_src_length_u_src_],
    _l_ =
      [0,
       [11,
        cst_Chacha20_dst_length,
        [4,
         12,
         0,
         0,
         [11, cst_dst_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       cst_Chacha20_dst_length_u_dst_],
    _m_ =
      [0,
       [11,
        cst_Chacha20_src_length,
        [4,
         12,
         0,
         0,
         [11,
          cst_tag_off,
          [4, 12, 0, 0, [11, cst_tag_size, [4, 12, 0, 0, 0]]]]]],
       "Chacha20: src length %u - tag_off %u < tag_size %u"],
    _j_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _g_ =
      [0,
       [11,
        cst_Chacha20_src_length,
        [4,
         12,
         0,
         0,
         [11, cst_src_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       cst_Chacha20_src_length_u_src_],
    _h_ =
      [0,
       [11,
        cst_Chacha20_dst_length,
        [4,
         12,
         0,
         0,
         [11, cst_dst_off, [4, 12, 0, 0, [11, cst_len, [4, 12, 0, 0, 0]]]]]],
       cst_Chacha20_dst_length_u_dst_],
    _i_ =
      [0,
       [11,
        cst_Chacha20_dst_length,
        [4,
         12,
         0,
         0,
         [11,
          cst_tag_off,
          [4, 12, 0, 0, [11, cst_tag_size, [4, 12, 0, 0, 0]]]]]],
       "Chacha20: dst length %u - tag_off %u < tag_size %u"],
    _f_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_expand_32_byte_k$0 = cst_expand_32_byte_k$1,
    _d_ =
      [0,
       [11, cst_Counter_too_big_for_IETF_m, 0],
       cst_Counter_too_big_for_IETF_m],
    cst_expand_32_byte_k = cst_expand_32_byte_k$1,
    cst_expand_16_byte_k = "expand 16-byte k",
    _c_ =
      [0,
       [11, cst_Valid_parameters_are_nonce, 0],
       cst_Valid_parameters_are_nonce],
    block = 64;
   function of_secret(a){return a;}
   function chacha20_block(state, idx, key_stream){
    return runtime.mc_chacha_round(10, state, key_stream, idx);
   }
   function init(ctr, key, nonce){
    var ctr_off = 48;
    function set_ctr32(b, v){
     return caml_call3(Stdlib_Bytes[83], b, ctr_off, v);
    }
    function set_ctr64(b, v){
     return caml_call3(Stdlib_Bytes[86], b, ctr_off, v);
    }
    function inc32(b){
     return set_ctr32(b, caml_call2(Stdlib_Bytes[69], b, ctr_off) + 1 | 0);
    }
    function inc64(b){
     return set_ctr64
             (b,
              runtime.caml_int64_add
               (caml_call2(Stdlib_Bytes[72], b, ctr_off), _a_));
    }
    var
     _q_ = caml_ml_string_length(key),
     match = caml_ml_string_length(nonce);
    a:
    {
     var
      match$0 =
        runtime.caml_equal(runtime.caml_int64_shift_right(ctr, 32), _b_);
     if(16 === _q_){
      if(8 === match){
       var
        k = caml_call2(Stdlib[28], key, key),
        _r_ = 56,
        inc = inc64,
        nonce_off = _r_,
        init_ctr = function(b){return set_ctr64(b, ctr);},
        key$0 = k,
        s = cst_expand_16_byte_k;
       break a;
      }
     }
     else if(32 === _q_){
      if(8 === match){
       var
        _t_ = 56,
        inc = inc64,
        nonce_off = _t_,
        init_ctr = function(b){return set_ctr64(b, ctr);},
        key$0 = key,
        s = cst_expand_32_byte_k;
       break a;
      }
      if(12 === match){
       if(match$0){
        var
         ctr$0 = runtime.caml_int64_to_int32(ctr),
         _u_ = 52,
         inc = inc32,
         nonce_off = _u_,
         init_ctr = function(b){return set_ctr32(b, ctr$0);},
         key$0 = key,
         s = cst_expand_32_byte_k$0;
        break a;
       }
       var
        _v_ = caml_call1(Mirage_crypto_Uncommon[2], _d_),
        inc = _v_[5],
        nonce_off = _v_[4],
        init_ctr = _v_[3],
        key$0 = _v_[2],
        s = _v_[1];
       break a;
      }
     }
     var
      _s_ = caml_call1(Mirage_crypto_Uncommon[2], _c_),
      inc$0 = _s_[5],
      nonce_off$0 = _s_[4],
      init_ctr$0 = _s_[3],
      key$1 = _s_[2],
      s$0 = _s_[1],
      inc = inc$0,
      nonce_off = nonce_off$0,
      init_ctr = init_ctr$0,
      key$0 = key$1,
      s = s$0;
    }
    var state = caml_create_bytes(64);
    caml_blit_string(s, 0, state, 0, 16);
    caml_blit_string(key$0, 0, state, 16, 32);
    caml_call1(init_ctr, state);
    caml_blit_string(nonce, 0, state, nonce_off, caml_ml_string_length(nonce));
    return [0, state, inc];
   }
   function crypt_into(key, nonce, ctr, src, src_off, dst, dst_off, len){
    var
     match = init(ctr, key, nonce),
     inc = match[2],
     state = match[1],
     block_count = caml_call2(Mirage_crypto_Uncommon[3], len, block),
     last = len % 64 | 0,
     last_len = 0 === last ? block : last,
     i = 0,
     n = block_count;
    for(;;){
     if(0 === n) return 0;
     if(1 === n){
      if(last_len === 64){
       runtime.mc_chacha_round(10, state, dst, dst_off + i | 0);
       return runtime.mc_xor_into_bytes
               (src, src_off + i | 0, dst, dst_off + i | 0, 64);
      }
      var buf = caml_create_bytes(64);
      runtime.mc_chacha_round(10, state, buf, 0);
      runtime.mc_xor_into_bytes(src, src_off + i | 0, buf, 0, last_len);
      return runtime.caml_blit_bytes(buf, 0, dst, dst_off + i | 0, last_len);
     }
     runtime.mc_chacha_round(10, state, dst, dst_off + i | 0);
     runtime.mc_xor_into_bytes(src, src_off + i | 0, dst, dst_off + i | 0, 64);
     caml_call1(inc, state);
     var n$0 = n - 1 | 0, i$0 = i + 64 | 0, i = i$0, n = n$0;
    }
   }
   function crypt(key, nonce, opt, data){
    if(opt) var sth = opt[1], ctr = sth; else var ctr = _e_;
    var l = caml_ml_string_length(data), res = caml_create_bytes(l);
    crypt_into(key, nonce, ctr, data, 0, res, 0, l);
    return caml_call1(Stdlib_Bytes[44], res);
   }
   var tag_size = Mirage_crypto_Poly1305[1][1];
   function generate_poly1305_key(key, nonce){
    return crypt(key, nonce, 0, caml_call2(Stdlib_String[1], 32, 0));
   }
   function mac_into(key, adata, src, src_off, len, dst, dst_off){
    function pad16(l){
     var len = l % 16 | 0;
     return 0 === len ? cst : caml_call2(Stdlib_String[1], 16 - len | 0, 0);
    }
    var data = caml_create_bytes(16);
    caml_call3
     (Stdlib_Bytes[86],
      data,
      0,
      caml_int64_of_int32(caml_ml_string_length(adata)));
    caml_call3(Stdlib_Bytes[86], data, 8, caml_int64_of_int32(len));
    var
     len_buf = caml_call1(Stdlib_Bytes[44], data),
     p1 = pad16(caml_ml_string_length(adata)),
     p2 = pad16(len);
    return caml_call4
            (Mirage_crypto_Poly1305[1][9],
             key,
             [0,
              [0, adata, 0, caml_ml_string_length(adata)],
              [0,
               [0, p1, 0, caml_ml_string_length(p1)],
               [0,
                [0, src, src_off, len],
                [0,
                 [0, p2, 0, caml_ml_string_length(p2)],
                 [0, [0, len_buf, 0, caml_ml_string_length(len_buf)], 0]]]]],
             dst,
             dst_off);
   }
   function unsafe_authenticate_encrypt_in
   (key, nonce, opt, src, src_off, dst, dst_off, tag_off, len){
    if(opt) var sth = opt[1], adata = sth; else var adata = cst$0;
    var poly1305_key = generate_poly1305_key(key, nonce);
    crypt_into(key, nonce, _f_, src, src_off, dst, dst_off, len);
    return mac_into
            (poly1305_key,
             adata,
             caml_call1(Stdlib_Bytes[44], dst),
             dst_off,
             len,
             dst,
             tag_off);
   }
   function authenticate_encrypt_into
   (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len){
    if((caml_ml_string_length(src) - src_off | 0) < len)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _g_,
       caml_ml_string_length(src),
       src_off,
       len);
    if((caml_ml_bytes_length(dst) - dst_off | 0) < len)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _h_,
       caml_ml_bytes_length(dst),
       dst_off,
       len);
    if((caml_ml_bytes_length(dst) - tag_off | 0) < tag_size)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _i_,
       caml_ml_bytes_length(dst),
       tag_off,
       tag_size);
    return unsafe_authenticate_encrypt_in
            (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len);
   }
   function authenticate_encrypt(key, nonce, adata, data){
    var
     l = caml_ml_string_length(data),
     dst = caml_create_bytes(l + tag_size | 0);
    unsafe_authenticate_encrypt_in(key, nonce, adata, data, 0, dst, 0, l, l);
    return caml_call1(Stdlib_Bytes[44], dst);
   }
   function authenticate_encrypt_tag(key, nonce, adata, data){
    var
     r = authenticate_encrypt(key, nonce, adata, data),
     _p_ =
       caml_call3(Stdlib_String[16], r, caml_ml_string_length(data), tag_size);
    return [0,
            caml_call3(Stdlib_String[16], r, 0, caml_ml_string_length(data)),
            _p_];
   }
   function unsafe_authenticate_decrypt_in
   (key, nonce, opt, src, src_off, tag_off, dst, dst_off, len){
    if(opt) var sth = opt[1], adata = sth; else var adata = cst$1;
    var
     poly1305_key = generate_poly1305_key(key, nonce),
     ctag = caml_create_bytes(tag_size);
    mac_into(poly1305_key, adata, src, src_off, len, ctag, 0);
    crypt_into(key, nonce, _j_, src, src_off, dst, dst_off, len);
    var
     _n_ = caml_call1(Stdlib_Bytes[44], ctag),
     _o_ = caml_call3(Stdlib_String[16], src, tag_off, tag_size);
    return caml_call2(Eqaf[1], _o_, _n_);
   }
   function authenticate_decrypt_into
   (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len){
    if((caml_ml_string_length(src) - src_off | 0) < len)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _k_,
       caml_ml_string_length(src),
       src_off,
       len);
    if((caml_ml_bytes_length(dst) - dst_off | 0) < len)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _l_,
       caml_ml_bytes_length(dst),
       dst_off,
       len);
    if((caml_ml_string_length(src) - tag_off | 0) < tag_size)
     caml_call4
      (Mirage_crypto_Uncommon[2],
       _m_,
       caml_ml_string_length(src),
       tag_off,
       tag_size);
    return unsafe_authenticate_decrypt_in
            (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len);
   }
   function authenticate_decrypt(key, nonce, adata, data){
    if(caml_ml_string_length(data) < tag_size) return 0;
    var
     l = caml_ml_string_length(data) - tag_size | 0,
     r = caml_create_bytes(l);
    return unsafe_authenticate_decrypt_in
             (key, nonce, adata, data, 0, l, r, 0, l)
            ? [0, caml_call1(Stdlib_Bytes[44], r)]
            : 0;
   }
   function authenticate_decrypt_tag(key, nonce, adata, tag, data){
    var cdata = caml_call2(Stdlib[28], data, tag);
    return authenticate_decrypt(key, nonce, adata, cdata);
   }
   var
    Mirage_crypto_Chacha20 =
      [0,
       block,
       of_secret,
       chacha20_block,
       init,
       crypt_into,
       crypt,
       tag_size,
       generate_poly1305_key,
       mac_into,
       unsafe_authenticate_encrypt_in,
       authenticate_encrypt_into,
       authenticate_encrypt,
       authenticate_encrypt_tag,
       unsafe_authenticate_decrypt_in,
       authenticate_decrypt_into,
       authenticate_decrypt,
       authenticate_decrypt_tag];
   runtime.caml_register_global
    (26, Mirage_crypto_Chacha20, "Mirage_crypto__Chacha20");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Cipher_block
//# unitInfo: Requires: Eqaf, Mirage_crypto__Ccm, Mirage_crypto__Native, Mirage_crypto__Uncommon, Stdlib, Stdlib__Bytes, Stdlib__Int64, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_not_of_block_size = " not of block size",
    cst$3 = ": ",
    cst_CBC$3 = "CBC",
    cst_CCM$5 = "CCM",
    cst_CTR$2 = "CTR",
    cst_ECB$1 = "ECB",
    cst_GCM$5 = "GCM",
    cst_GCM_invalid_nonce_of_lengt = "GCM: invalid nonce of length 0",
    cst_dst$7 = "dst",
    cst_dst_tag$1 = "dst tag",
    cst_src$7 = "src",
    cst_src_tag$1 = "src tag",
    cst_src_cipher_block_ml = "src/cipher_block.ml",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_div = runtime.caml_div,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    hi = runtime.caml_int64_create_lo_mi_hi(0, 16776960, 65535),
    lo = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Mirage_crypto_Ccm = global_data.Mirage_crypto__Ccm,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    Eqaf = global_data.Eqaf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Block = [0],
    _v_ =
      [0,
       [11, "DES.of_secret: key length ", [4, 12, 0, 0, 0]],
       "DES.of_secret: key length %u"],
    _q_ =
      [0,
       [11, "AES.of_secret: key length ", [4, 12, 0, 0, 0]],
       "AES.of_secret: key length %u"],
    cst_src$6 = cst_src$7,
    cst_CCM$2 = cst_CCM$5,
    cst_src_tag$0 = cst_src_tag$1,
    cst_CCM$3 = cst_CCM$5,
    cst_dst$6 = cst_dst$7,
    cst_CCM$4 = cst_CCM$5,
    cst_src$5 = cst_src$7,
    cst_CCM = cst_CCM$5,
    cst_dst$5 = cst_dst$7,
    cst_CCM$0 = cst_CCM$5,
    cst_dst_tag$0 = cst_dst_tag$1,
    cst_CCM$1 = cst_CCM$5,
    _o_ =
      [0,
       [11, "CCM: nonce length not between 7 and 13: ", [4, 12, 0, 0, 0]],
       "CCM: nonce length not between 7 and 13: %u"],
    _p_ = [0, cst_src_cipher_block_ml, 458, 4],
    cst_src$4 = cst_src$7,
    cst_GCM$2 = cst_GCM$5,
    cst_src_tag = cst_src_tag$1,
    cst_GCM$3 = cst_GCM$5,
    cst_dst$4 = cst_dst$7,
    cst_GCM$4 = cst_GCM$5,
    _m_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    cst_src$3 = cst_src$7,
    cst_GCM = cst_GCM$5,
    cst_dst$3 = cst_dst$7,
    cst_GCM$0 = cst_GCM$5,
    cst_dst_tag = cst_dst_tag$1,
    cst_GCM$1 = cst_GCM$5,
    _l_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _k_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _j_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _i_ =
      [0,
       [11, cst_GCM_invalid_nonce_of_lengt, 0],
       cst_GCM_invalid_nonce_of_lengt],
    _n_ = [0, cst_src_cipher_block_ml, 366, 4],
    _h_ = [0, cst_src_cipher_block_ml, 349, 6],
    cst_src$2 = cst_src$7,
    cst_CTR$0 = cst_CTR$2,
    cst_dst$2 = cst_dst$7,
    cst_CTR$1 = cst_CTR$2,
    cst_buf = "buf",
    cst_CTR = cst_CTR$2,
    _g_ = [0, cst_src_cipher_block_ml, 282, 4],
    cst_src$1 = cst_src$7,
    cst_CBC$1 = cst_CBC$3,
    cst_dst$1 = cst_dst$7,
    cst_CBC$2 = cst_CBC$3,
    cst_src$0 = cst_src$7,
    cst_CBC = cst_CBC$3,
    cst_dst$0 = cst_dst$7,
    cst_CBC$0 = cst_CBC$3,
    _e_ =
      [0,
       [11, "CBC: IV length ", [4, 12, 0, 0, [11, cst_not_of_block_size, 0]]],
       "CBC: IV length %u not of block size"],
    _f_ =
      [0,
       [11,
        "CBC: argument length ",
        [4, 12, 0, 0, [11, cst_not_of_block_size, 0]]],
       "CBC: argument length %u not of block size"],
    _d_ =
      [0,
       [11, "ECB: length ", [4, 12, 0, 0, [11, cst_not_of_block_size, 0]]],
       "ECB: length %u not of block size"],
    cst_src = cst_src$7,
    cst_ECB = cst_ECB$1,
    cst_dst = cst_dst$7,
    cst_ECB$0 = cst_ECB$1,
    _b_ =
      [0,
       [2,
        0,
        [11, cst$3, [2, 0, [11, " off ", [4, 12, 0, 0, [11, " < 0", 0]]]]]],
       "%s: %s off %u < 0"],
    _c_ =
      [0,
       [2,
        0,
        [11,
         cst$3,
         [2,
          0,
          [11,
           " length ",
           [4,
            12,
            0,
            0,
            [11, " - off ", [4, 12, 0, 0, [11, " < len ", [4, 12, 0, 0, 0]]]]]]]]],
       "%s: %s length %u - off %u < len %u"],
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _A_ = [0, 289154965, 0],
    _C_ = [0, 3247855, 0],
    _F_ = [0, 4393851, 0],
    size = 8;
   function of_octets(cs){return caml_call2(Stdlib_String[63], cs, 0);}
   var add = caml_int64_add;
   function unsafe_count_into(t, buf, off, blocks){
    var ctr = caml_create_bytes(8);
    caml_call3(Stdlib_Bytes[85], ctr, 0, t);
    return runtime.mc_count_8_be(ctr, buf, off, blocks);
   }
   var C64be = [0, size, of_octets, add, unsafe_count_into], size$0 = 16;
   function of_octets$0(cs){
    var
     buf = caml_call1(Stdlib_Bytes[45], cs),
     _av_ = caml_call2(Stdlib_Bytes[71], buf, 8);
    return [0, caml_call2(Stdlib_Bytes[71], buf, 0), _av_];
   }
   function add$0(param, n){
    var
     w0 = param[2],
     w1 = param[1],
     w0$0 = caml_int64_add(w0, n),
     flip =
       caml_lessthan(runtime.caml_int64_xor(w0, w0$0), _a_)
        ? runtime.caml_greaterthan(w0$0, w0)
        : caml_lessthan(w0$0, w0),
     _au_ = flip ? caml_call1(Stdlib_Int64[6], w1) : w1;
    return [0, _au_, w0$0];
   }
   function unsafe_count_into$0(param, buf, off, blocks){
    var w0 = param[2], w1 = param[1], ctr = caml_create_bytes(16);
    caml_call3(Stdlib_Bytes[85], ctr, 0, w1);
    caml_call3(Stdlib_Bytes[85], ctr, 8, w0);
    return runtime.mc_count_16_be(ctr, buf, off, blocks);
   }
   var
    C128be = [0, size$0, of_octets$0, add$0, unsafe_count_into$0],
    size$1 = C128be[1],
    of_octets$1 = C128be[2];
   function add$1(param, n){
    var w0 = param[2], w1 = param[1];
    return [0,
            w1,
            runtime.caml_int64_or
             (caml_int64_and(hi, w0),
              caml_int64_and(lo, caml_int64_add(n, w0)))];
   }
   function unsafe_count_into$1(param, buf, off, blocks){
    var w0 = param[2], w1 = param[1], ctr = caml_create_bytes(16);
    caml_call3(Stdlib_Bytes[85], ctr, 0, w1);
    caml_call3(Stdlib_Bytes[85], ctr, 8, w0);
    return runtime.mc_count_16_be_4(ctr, buf, off, blocks);
   }
   var
    C128be32 = [0, size$1, of_octets$1, add$1, unsafe_count_into$1],
    Counters = [0, C64be, C128be, C128be32];
   function check_offset(tag, buf, off, len, actual_len){
    if(off < 0) caml_call4(Mirage_crypto_Uncommon[2], _b_, tag, buf, off);
    var _at_ = (actual_len - off | 0) < len ? 1 : 0;
    return _at_
            ? caml_call6
              (Mirage_crypto_Uncommon[2], _c_, tag, buf, actual_len, off, len)
            : _at_;
   }
   function ECB_of(Core){
    var block_size = Core[5], key_sizes = Core[4], of_secret = Core[1];
    function unsafe_ecb(xform, key, src, src_off, dst, dst_off, len){
     return caml_call6
             (xform,
              key,
              caml_div(len, block_size),
              src,
              src_off,
              dst,
              dst_off);
    }
    function ecb(xform, key, src, src_off, dst, dst_off, len){
     if(0 !== caml_mod(len, block_size))
      caml_call2(Mirage_crypto_Uncommon[2], _d_, len);
     check_offset(cst_ECB, cst_src, src_off, len, caml_ml_string_length(src));
     check_offset(cst_ECB$0, cst_dst, dst_off, len, caml_ml_bytes_length(dst));
     return unsafe_ecb(xform, key, src, src_off, dst, dst_off, len);
    }
    function encrypt_into(param, src, src_off, dst, dst_off, len){
     var key = param[1];
     return ecb(Core[6], key, src, src_off, dst, dst_off, len);
    }
    function unsafe_encrypt_into(param, src, src_off, dst, dst_off, len){
     var key = param[1];
     return unsafe_ecb(Core[6], key, src, src_off, dst, dst_off, len);
    }
    function decrypt_into(param, src, src_off, dst, dst_off, len){
     var key = param[2];
     return ecb(Core[7], key, src, src_off, dst, dst_off, len);
    }
    function unsafe_decrypt_into(param, src, src_off, dst, dst_off, len){
     var key = param[2];
     return unsafe_ecb(Core[7], key, src, src_off, dst, dst_off, len);
    }
    function encrypt(key, src){
     var len = caml_ml_string_length(src), dst = caml_create_bytes(len);
     encrypt_into(key, src, 0, dst, 0, len);
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    function decrypt(key, src){
     var len = caml_ml_string_length(src), dst = caml_create_bytes(len);
     decrypt_into(key, src, 0, dst, 0, len);
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    return [0,
            of_secret,
            key_sizes,
            block_size,
            encrypt,
            decrypt,
            encrypt_into,
            decrypt_into,
            unsafe_encrypt_into,
            unsafe_decrypt_into];
   }
   function CBC_of(Core){
    var block_size = Core[5], key_sizes = Core[4], of_secret = Core[1];
    function check_block_size(iv, len){
     if(caml_ml_string_length(iv) !== block_size)
      caml_call2(Mirage_crypto_Uncommon[2], _e_, caml_ml_string_length(iv));
     var _as_ = 0 !== caml_mod(len, block_size) ? 1 : 0;
     return _as_ ? caml_call2(Mirage_crypto_Uncommon[2], _f_, len) : _as_;
    }
    function next_iv(opt, cs, iv){
     if(opt) var sth = opt[1], off = sth; else var off = 0;
     check_block_size(iv, caml_ml_string_length(cs) - off | 0);
     return off < caml_ml_string_length(cs)
             ? caml_call3
               (Stdlib_String[16],
                cs,
                caml_ml_string_length(cs) - block_size | 0,
                block_size)
             : iv;
    }
    function unsafe_encrypt_into_inplace(param, iv, dst, dst_off, len){
     var
      key = param[1],
      b$1 = caml_div(len, block_size),
      iv$0 = iv,
      iv_i = 0,
      dst_i = dst_off,
      b = b$1;
     for(;;){
      if(0 === b) return 0;
      runtime.mc_xor_into_bytes(iv$0, iv_i, dst, dst_i, block_size);
      var _ar_ = caml_call1(Stdlib_Bytes[44], dst);
      caml_call6(Core[6], key, 1, _ar_, dst_i, dst, dst_i);
      var
       b$0 = b - 1 | 0,
       dst_i$0 = dst_i + block_size | 0,
       iv$1 = caml_call1(Stdlib_Bytes[44], dst),
       iv$0 = iv$1,
       iv_i = dst_i,
       dst_i = dst_i$0,
       b = b$0;
     }
    }
    function unsafe_encrypt_into(key, iv, src, src_off, dst, dst_off, len){
     runtime.caml_blit_string(src, src_off, dst, dst_off, len);
     return unsafe_encrypt_into_inplace(key, iv, dst, dst_off, len);
    }
    function encrypt_into(key, iv, src, src_off, dst, dst_off, len){
     check_block_size(iv, len);
     check_offset
      (cst_CBC, cst_src$0, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_CBC$0, cst_dst$0, dst_off, len, caml_ml_bytes_length(dst));
     return unsafe_encrypt_into(key, iv, src, src_off, dst, dst_off, len);
    }
    function encrypt(key, iv, src){
     var dst = caml_create_bytes(caml_ml_string_length(src));
     encrypt_into(key, iv, src, 0, dst, 0, caml_ml_string_length(src));
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    function unsafe_decrypt_into(param, iv, src, src_off, dst, dst_off, len){
     var
      key = param[2],
      b = caml_div(len, block_size),
      _ap_ = 0 < b ? 1 : 0,
      _aq_ =
        _ap_
         ? (caml_call6
            (Core[7], key, b, src, src_off, dst, dst_off),
           runtime.mc_xor_into_bytes(iv, 0, dst, dst_off, block_size),
           runtime.mc_xor_into_bytes
            (src,
             src_off,
             dst,
             dst_off + block_size | 0,
             caml_mul(b - 1 | 0, block_size)))
         : _ap_;
     return _aq_;
    }
    function decrypt_into(key, iv, src, src_off, dst, dst_off, len){
     check_block_size(iv, len);
     check_offset
      (cst_CBC$1, cst_src$1, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_CBC$2, cst_dst$1, dst_off, len, caml_ml_bytes_length(dst));
     return unsafe_decrypt_into(key, iv, src, src_off, dst, dst_off, len);
    }
    function decrypt(key, iv, src){
     var len = caml_ml_string_length(src), msg = caml_create_bytes(len);
     decrypt_into(key, iv, src, 0, msg, 0, len);
     return caml_call1(Stdlib_Bytes[44], msg);
    }
    return [0,
            of_secret,
            key_sizes,
            block_size,
            encrypt,
            decrypt,
            next_iv,
            encrypt_into,
            decrypt_into,
            unsafe_encrypt_into,
            unsafe_decrypt_into,
            unsafe_encrypt_into_inplace];
   }
   function CTR_of(Core, Ctr){
    if(Core[5] !== Ctr[1])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    var block_size = Core[5], key_sizes = Core[4], of_secret = Core[2];
    function unsafe_stream_into(key, ctr, buf, off, len){
     var
      blocks =
        caml_div(caml_call2(Mirage_crypto_Uncommon[5], 0, len), block_size);
     caml_call4(Ctr[4], ctr, buf, off, blocks);
     var _al_ = caml_call1(Stdlib_Bytes[44], buf);
     caml_call6(Core[6], key, blocks, _al_, off, buf, off);
     var
      slack =
        caml_mod(caml_call2(Mirage_crypto_Uncommon[5], 0, len), block_size),
      _am_ = 0 !== slack ? 1 : 0;
     if(_am_){
      var
       buf$0 = caml_create_bytes(block_size),
       ctr$0 = caml_call2(Ctr[2], ctr, caml_int64_of_int32(blocks));
      caml_call4(Ctr[4], ctr$0, buf$0, 0, 1);
      var _an_ = caml_call1(Stdlib_Bytes[44], buf$0);
      caml_call6(Core[6], key, 1, _an_, 0, buf$0, 0);
      var
       _ao_ =
         runtime.caml_blit_bytes
          (buf$0, 0, buf, off + caml_mul(blocks, block_size) | 0, slack);
     }
     else
      var _ao_ = _am_;
     return _ao_;
    }
    function stream_into(key, ctr, buf, off, len){
     check_offset(cst_CTR, cst_buf, off, len, caml_ml_bytes_length(buf));
     return unsafe_stream_into(key, ctr, buf, off, len);
    }
    function stream(key, ctr, n){
     var buf = caml_create_bytes(n);
     unsafe_stream_into(key, ctr, buf, 0, n);
     return caml_call1(Stdlib_Bytes[44], buf);
    }
    function unsafe_encrypt_into(key, ctr, src, src_off, dst, dst_off, len){
     unsafe_stream_into(key, ctr, dst, dst_off, len);
     return caml_call5
             (Mirage_crypto_Uncommon[8], src, src_off, dst, dst_off, len);
    }
    function encrypt_into(key, ctr, src, src_off, dst, dst_off, len){
     check_offset
      (cst_CTR$0, cst_src$2, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_CTR$1, cst_dst$2, dst_off, len, caml_ml_bytes_length(dst));
     return unsafe_encrypt_into(key, ctr, src, src_off, dst, dst_off, len);
    }
    function encrypt(key, ctr, src){
     var len = caml_ml_string_length(src), dst = caml_create_bytes(len);
     encrypt_into(key, ctr, src, 0, dst, 0, len);
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    var add_ctr = Ctr[2];
    function next_ctr(opt, msg, ctr){
     if(opt) var sth = opt[1], off = sth; else var off = 0;
     return caml_call2
             (add_ctr,
              ctr,
              caml_int64_of_int32
               (caml_call2
                 (Mirage_crypto_Uncommon[3],
                  caml_ml_string_length(msg) - off | 0,
                  block_size)));
    }
    var ctr_of_octets = Ctr[3];
    return [0,
            of_secret,
            key_sizes,
            block_size,
            add_ctr,
            next_ctr,
            ctr_of_octets,
            stream,
            encrypt,
            encrypt,
            stream_into,
            encrypt_into,
            encrypt_into,
            unsafe_stream_into,
            unsafe_encrypt_into,
            unsafe_encrypt_into];
   }
   var keysize = runtime.mc_ghash_key_size(0), tagsize = 16;
   function derive(cs){
    if(16 > caml_ml_string_length(cs))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    var k = caml_create_bytes(keysize);
    runtime.mc_ghash_init_key(cs, k);
    return caml_call1(Stdlib_Bytes[44], k);
   }
   function digesti_off_len(key, i){
    var res = caml_call2(Stdlib_Bytes[1], tagsize, 0);
    caml_call1
     (i,
      function(param){
       var len = param[3], off = param[2], cs = param[1];
       return runtime.mc_ghash(key, res, cs, off, len);
      });
    return caml_call1(Stdlib_Bytes[44], res);
   }
   function digesti(key, i){
    var res = caml_call2(Stdlib_Bytes[1], tagsize, 0);
    caml_call1
     (i,
      function(cs){
       return runtime.mc_ghash(key, res, cs, 0, caml_ml_string_length(cs));
      });
    return caml_call1(Stdlib_Bytes[44], res);
   }
   var GHASH = [0, derive, digesti, digesti_off_len, tagsize];
   function GCM_of(C){
    if(16 !== C[5])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
    var
     ___ = Counters[3],
     CTR = CTR_of(C, [0, ___[1], ___[3], ___[2], ___[4]]),
     tag_size = GHASH[4],
     block_size = C[5],
     key_sizes = C[4],
     z128 = caml_call2(Stdlib_String[1], block_size, 0);
    function of_secret(cs){
     var h = caml_create_bytes(block_size), key = caml_call1(C[2], cs);
     caml_call6(C[6], key, 1, z128, 0, h, 0);
     var _ak_ = caml_call1(Stdlib_Bytes[44], h);
     return [0, key, caml_call1(GHASH[1], _ak_)];
    }
    function bits64(cs){
     return caml_int64_of_int32(caml_ml_string_length(cs) * 8 | 0);
    }
    function pack64s(a, b){
     var cs = caml_create_bytes(16);
     caml_call3(Stdlib_Bytes[85], cs, 0, a);
     caml_call3(Stdlib_Bytes[85], cs, 8, b);
     return caml_call1(Stdlib_Bytes[44], cs);
    }
    function counter(hkey, nonce){
     var match = caml_ml_string_length(nonce);
     if(0 === match) return caml_call1(Mirage_crypto_Uncommon[2], _i_);
     if(12 === match){
      var
       w2 = caml_call2(Stdlib_String[60], nonce, 8),
       w1 = caml_call2(Stdlib_String[63], nonce, 0);
      return [0,
              w1,
              caml_int64_add
               (_j_,
                runtime.caml_int64_shift_left(caml_int64_of_int32(w2), 32))];
     }
     var
      _ah_ = pack64s(_k_, bits64(nonce)),
      _ai_ = caml_call2(Mirage_crypto_Uncommon[6], nonce, _ah_),
      _aj_ = caml_call1(caml_call1(GHASH[2], hkey), _ai_);
     return caml_call1(CTR[6], _aj_);
    }
    function unsafe_tag_into
    (key, hkey, ctr, opt, cdata, off, len, dst, tag_off){
     if(opt) var sth = opt[1], adata = sth; else var adata = cst;
     var
      _ae_ =
        [0, pack64s(bits64(adata), caml_int64_of_int32(len * 8 | 0)), 0, 16],
      _af_ =
        caml_call3
         (Mirage_crypto_Uncommon[7],
          [0, adata, 0, caml_ml_string_length(adata)],
          [0, cdata, off, len],
          _ae_),
      _ag_ = caml_call2(GHASH[3], hkey, _af_);
     return caml_call7(CTR[14], key, ctr, _ag_, 0, dst, tag_off, tag_size);
    }
    function unsafe_authenticate_encrypt_in
    (param, nonce, adata, src, src_off, dst, dst_off, tag_off, len){
     var
      hkey = param[2],
      key = param[1],
      ctr = counter(hkey, nonce),
      _ad_ = caml_call2(CTR[4], ctr, _l_);
     caml_call7(CTR[14], key, _ad_, src, src_off, dst, dst_off, len);
     return unsafe_tag_into
             (key,
              hkey,
              ctr,
              adata,
              caml_call1(Stdlib_Bytes[44], dst),
              dst_off,
              len,
              dst,
              tag_off);
    }
    function authenticate_encrypt_into
    (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len){
     check_offset
      (cst_GCM, cst_src$3, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_GCM$0, cst_dst$3, dst_off, len, caml_ml_bytes_length(dst));
     check_offset
      (cst_GCM$1, cst_dst_tag, tag_off, tag_size, caml_ml_bytes_length(dst));
     return unsafe_authenticate_encrypt_in
             (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len);
    }
    function authenticate_encrypt(key, nonce, adata, data){
     var
      l = caml_ml_string_length(data),
      dst = caml_create_bytes(l + tag_size | 0);
     unsafe_authenticate_encrypt_in(key, nonce, adata, data, 0, dst, 0, l, l);
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    function authenticate_encrypt_tag(key, nonce, adata, data){
     var
      r = authenticate_encrypt(key, nonce, adata, data),
      _ac_ =
        caml_call3
         (Stdlib_String[16], r, caml_ml_string_length(data), tag_size);
     return [0,
             caml_call3(Stdlib_String[16], r, 0, caml_ml_string_length(data)),
             _ac_];
    }
    function unsafe_authenticate_decrypt_in
    (param, nonce, adata, src, src_off, tag_off, dst, dst_off, len){
     var
      hkey = param[2],
      key = param[1],
      ctr = counter(hkey, nonce),
      _$_ = caml_call2(CTR[4], ctr, _m_);
     caml_call7(CTR[14], key, _$_, src, src_off, dst, dst_off, len);
     var ctag = caml_create_bytes(tag_size);
     unsafe_tag_into(key, hkey, ctr, adata, src, src_off, len, ctag, 0);
     var
      _aa_ = caml_call1(Stdlib_Bytes[44], ctag),
      _ab_ = caml_call3(Stdlib_String[16], src, tag_off, tag_size);
     return caml_call2(Eqaf[1], _ab_, _aa_);
    }
    function authenticate_decrypt_into
    (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len){
     check_offset
      (cst_GCM$2, cst_src$4, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_GCM$3, cst_src_tag, tag_off, tag_size, caml_ml_string_length(src));
     check_offset
      (cst_GCM$4, cst_dst$4, dst_off, len, caml_ml_bytes_length(dst));
     return unsafe_authenticate_decrypt_in
             (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len);
    }
    function authenticate_decrypt(key, nonce, adata, cdata){
     if(caml_ml_string_length(cdata) < tag_size) return 0;
     var
      l = caml_ml_string_length(cdata) - tag_size | 0,
      data = caml_create_bytes(l);
     return unsafe_authenticate_decrypt_in
              (key, nonce, adata, cdata, 0, l, data, 0, l)
             ? [0, caml_call1(Stdlib_Bytes[44], data)]
             : 0;
    }
    function authenticate_decrypt_tag(key, nonce, adata, tag_data, cipher){
     var cdata = caml_call2(Stdlib[28], cipher, tag_data);
     return authenticate_decrypt(key, nonce, adata, cdata);
    }
    return [0,
            tag_size,
            of_secret,
            authenticate_encrypt,
            authenticate_decrypt,
            authenticate_encrypt_tag,
            authenticate_decrypt_tag,
            authenticate_encrypt_into,
            authenticate_decrypt_into,
            unsafe_authenticate_encrypt_in,
            unsafe_authenticate_decrypt_in,
            key_sizes,
            block_size];
   }
   function CCM16_of(C){
    if(16 !== C[5])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var tag_size = C[5];
    function of_secret(sec){return caml_call1(C[2], sec);}
    var block_size = C[5], key_sizes = C[4];
    function cipher(key, src, src_off, dst, dst_off){
     return caml_call6(C[6], key, 1, src, src_off, dst, dst_off);
    }
    function unsafe_authenticate_encrypt_in
    (key, nonce, opt, src, src_off, dst, dst_off, tag_off, len){
     if(opt) var sth = opt[1], adata = sth; else var adata = cst$0;
     return caml_call10
             (Mirage_crypto_Ccm[11],
              cipher,
              key,
              nonce,
              adata,
              src,
              src_off,
              dst,
              dst_off,
              tag_off,
              len);
    }
    function valid_nonce(nonce){
     var
      nsize = caml_ml_string_length(nonce),
      _Y_ = nsize < 7 ? 1 : 0,
      _Z_ = _Y_ || (13 < nsize ? 1 : 0);
     return _Z_ ? caml_call2(Mirage_crypto_Uncommon[2], _o_, nsize) : _Z_;
    }
    function authenticate_encrypt_into
    (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len){
     check_offset
      (cst_CCM, cst_src$5, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_CCM$0, cst_dst$5, dst_off, len, caml_ml_bytes_length(dst));
     check_offset
      (cst_CCM$1, cst_dst_tag$0, tag_off, tag_size, caml_ml_bytes_length(dst));
     valid_nonce(nonce);
     return unsafe_authenticate_encrypt_in
             (key, nonce, adata, src, src_off, dst, dst_off, tag_off, len);
    }
    function authenticate_encrypt(key, nonce, adata, cs){
     valid_nonce(nonce);
     var
      l = caml_ml_string_length(cs),
      dst = caml_create_bytes(l + tag_size | 0);
     unsafe_authenticate_encrypt_in(key, nonce, adata, cs, 0, dst, 0, l, l);
     return caml_call1(Stdlib_Bytes[44], dst);
    }
    function authenticate_encrypt_tag(key, nonce, adata, cs){
     var
      res = authenticate_encrypt(key, nonce, adata, cs),
      _X_ =
        caml_call3
         (Stdlib_String[16], res, caml_ml_string_length(cs), tag_size);
     return [0,
             caml_call3(Stdlib_String[16], res, 0, caml_ml_string_length(cs)),
             _X_];
    }
    function unsafe_authenticate_decrypt_in
    (key, nonce, opt, src, src_off, tag_off, dst, dst_off, len){
     if(opt) var sth = opt[1], adata = sth; else var adata = cst$1;
     return caml_call10
             (Mirage_crypto_Ccm[12],
              cipher,
              key,
              nonce,
              adata,
              src,
              src_off,
              tag_off,
              dst,
              dst_off,
              len);
    }
    function authenticate_decrypt_into
    (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len){
     check_offset
      (cst_CCM$2, cst_src$6, src_off, len, caml_ml_string_length(src));
     check_offset
      (cst_CCM$3,
       cst_src_tag$0,
       tag_off,
       tag_size,
       caml_ml_string_length(src));
     check_offset
      (cst_CCM$4, cst_dst$6, dst_off, len, caml_ml_bytes_length(dst));
     valid_nonce(nonce);
     return unsafe_authenticate_decrypt_in
             (key, nonce, adata, src, src_off, tag_off, dst, dst_off, len);
    }
    function authenticate_decrypt(key, nonce, adata, data){
     if(caml_ml_string_length(data) < tag_size) return 0;
     var
      dlen = caml_ml_string_length(data) - tag_size | 0,
      dst = caml_create_bytes(dlen);
     return authenticate_decrypt_into
              (key, nonce, adata, data, 0, dlen, dst, 0, dlen)
             ? [0, caml_call1(Stdlib_Bytes[44], dst)]
             : 0;
    }
    function authenticate_decrypt_tag(key, nonce, adata, tag, cs){
     return authenticate_decrypt
             (key, nonce, adata, caml_call2(Stdlib[28], cs, tag));
    }
    return [0,
            tag_size,
            of_secret,
            authenticate_encrypt,
            authenticate_decrypt,
            authenticate_encrypt_tag,
            authenticate_decrypt_tag,
            authenticate_encrypt_into,
            authenticate_decrypt_into,
            unsafe_authenticate_encrypt_in,
            unsafe_authenticate_decrypt_in,
            key_sizes,
            block_size];
   }
   var
    Modes = [0, ECB_of, CBC_of, CTR_of, GHASH, GCM_of, CCM16_of],
    key = [0, 16, 24, 32],
    block = 16;
   function of_secret_with(init, key){
    var _W_ = caml_ml_string_length(key) - 16 | 0;
    a:
    {
     b:
     {
      if(8 < _W_ >>> 0){
       if(16 === _W_) break b;
      }
      else if(6 < _W_ - 1 >>> 0) break b;
      var
       rounds =
         caml_call2
          (Mirage_crypto_Uncommon[2], _q_, caml_ml_string_length(key));
      break a;
     }
     var rounds = (caml_ml_string_length(key) / 4 | 0) + 6 | 0;
    }
    var rk = caml_create_bytes(runtime.mc_aes_rk_size(rounds));
    caml_call3(init, key, rk, rounds);
    return [0, caml_call1(Stdlib_Bytes[44], rk), rounds];
   }
   function _r_(_V_, _U_, _T_){
    return runtime.mc_aes_derive_e_key(_V_, _U_, _T_);
   }
   function e_of_secret(_S_){return of_secret_with(_r_, _S_);}
   function _s_(_P_, _Q_, _R_){
    return runtime.mc_aes_derive_d_key(_P_, _Q_, _R_, 0);
   }
   function d_of_secret(_O_){return of_secret_with(_s_, _O_);}
   function of_secret(secret){
    var ekey = e_of_secret(secret), e = ekey[1], _K_ = [0, e];
    return [0,
            ekey,
            of_secret_with
             (function(_L_, _M_, _N_){
               return runtime.mc_aes_derive_d_key(_L_, _M_, _N_, _K_);
              },
              secret)];
   }
   function encrypt(param, blocks, src, off1, dst, off2){
    var rounds = param[2], e = param[1];
    return runtime.mc_aes_enc_bc(src, off1, dst, off2, e, rounds, blocks);
   }
   function decrypt(param, blocks, src, off1, dst, off2){
    var rounds = param[2], d = param[1];
    return runtime.mc_aes_dec_bc(src, off1, dst, off2, d, rounds, blocks);
   }
   var
    Core =
      [0, of_secret, e_of_secret, d_of_secret, key, block, encrypt, decrypt],
    ECB = caml_call1(Modes[1], Core),
    CBC = caml_call1(Modes[2], Core),
    _t_ = Counters[2],
    _u_ = [0, _t_[1], _t_[3], _t_[2], _t_[4]],
    CTR = caml_call1(caml_call1(Modes[3], Core), _u_),
    GCM = caml_call1(Modes[5], Core),
    CCM16 = caml_call1(Modes[6], Core),
    AES = [0, Core, ECB, CBC, CTR, GCM, CCM16],
    key$0 = [0, 24],
    k_s = runtime.mc_des_key_size(0),
    block$0 = 8;
   function gen_of_secret(direction, key){
    if(24 !== caml_ml_string_length(key))
     caml_call2(Mirage_crypto_Uncommon[2], _v_, caml_ml_string_length(key));
    var
     key$0 = caml_call1(Stdlib_Bytes[5], key),
     keybuf = caml_create_bytes(k_s);
    runtime.mc_des_des3key(key$0, direction, keybuf);
    return caml_call1(Stdlib_Bytes[44], keybuf);
   }
   var _w_ = 0;
   function e_of_secret$0(_J_){return gen_of_secret(_w_, _J_);}
   var _x_ = 1;
   function d_of_secret$0(_I_){return gen_of_secret(_x_, _I_);}
   function of_secret$0(secret){
    var _H_ = d_of_secret$0(secret);
    return [0, e_of_secret$0(secret), _H_];
   }
   function encrypt$0(key, blocks, src, off1, dst, off2){
    return runtime.mc_des_ddes_bc(src, off1, dst, off2, blocks, key);
   }
   var
    Core$0 =
      [0,
       of_secret$0,
       e_of_secret$0,
       d_of_secret$0,
       key$0,
       block$0,
       encrypt$0,
       encrypt$0],
    ECB$0 = caml_call1(Modes[1], Core$0),
    CBC$0 = caml_call1(Modes[2], Core$0),
    _y_ = Counters[1],
    _z_ = [0, _y_[1], _y_[3], _y_[2], _y_[4]],
    CTR$0 = caml_call1(caml_call1(Modes[3], Core$0), _z_),
    DES = [0, Core$0, ECB$0, CBC$0, CTR$0],
    _B_ = 1 === runtime.mc_ghash_mode(0) ? _A_ : 0,
    _D_ = 1 === runtime.mc_aes_mode(0) ? _C_ : 0,
    _E_ = caml_call2(Stdlib[37], _D_, _B_),
    _G_ = 1 === runtime.mc_misc_mode(0) ? _F_ : 0,
    accelerated = caml_call2(Stdlib[37], _G_, _E_),
    Mirage_crypto_Cipher_block =
      [0, Block, Counters, check_offset, Modes, AES, DES, accelerated];
   runtime.caml_register_global
    (76, Mirage_crypto_Cipher_block, "Mirage_crypto__Cipher_block");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto__Cipher_stream
//# unitInfo: Requires: Mirage_crypto__Uncommon, Stdlib__Array, Stdlib__Bytes, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    _a_ =
      [0,
       [11, "ARC4.of_secret: key size ", [4, 0, 0, 0, 0]],
       "ARC4.of_secret: key size %d"];
   function of_secret(buf){
    var
     len = caml_ml_string_length(buf),
     _d_ = len < 1 ? 1 : 0,
     _e_ = _d_ || (256 < len ? 1 : 0);
    if(_e_) caml_call2(Mirage_crypto_Uncommon[2], _a_, len);
    function _f_(x){return x;}
    var s = caml_call2(Stdlib_Array[1], 256, _f_), j = 0, i = 0;
    for(;;){
     if(256 === i) return [0, 0, 0, s];
     var
      _g_ = runtime.caml_mod(i, len),
      x = caml_call2(Stdlib_String[49], buf, _g_),
      si = caml_check_bound(s, i)[1 + i],
      j$0 = ((j + si | 0) + x | 0) & 255,
      sj = caml_check_bound(s, j$0)[1 + j$0];
     s[1 + i] = sj;
     s[1 + j$0] = si;
     var i$0 = i + 1 | 0, j = j$0, i = i$0;
    }
   }
   function encrypt(param, buf){
    var
     s = param[3],
     j = param[2],
     i = param[1],
     s$0 = caml_call1(Stdlib_Array[6], s),
     len = caml_ml_string_length(buf),
     res = runtime.caml_create_bytes(len),
     i$0 = i,
     j$0 = j,
     n = 0;
    for(;;){
     if(n === len){
      var key = [0, i$0, j$0, s$0];
      return [0, caml_call1(Stdlib_Bytes[44], res), key];
     }
     var
      i$1 = (i$0 + 1 | 0) & 255,
      si = caml_check_bound(s$0, i$1)[1 + i$1],
      j$1 = (j$0 + si | 0) & 255,
      sj = caml_check_bound(s$0, j$1)[1 + j$1];
     s$0[1 + i$1] = sj;
     s$0[1 + j$1] = si;
     var
      _b_ = (si + sj | 0) & 255,
      k = caml_check_bound(s$0, _b_)[1 + _b_],
      _c_ = k ^ caml_call2(Stdlib_String[49], buf, n);
     caml_call3(Stdlib_Bytes[73], res, n, _c_);
     var n$0 = n + 1 | 0, i$0 = i$1, j$0 = j$1, n = n$0;
    }
   }
   var
    ARC4 = [0, of_secret, encrypt, encrypt],
    Mirage_crypto_Cipher_stream = [0, ARC4];
   runtime.caml_register_global
    (5, Mirage_crypto_Cipher_stream, "Mirage_crypto__Cipher_stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto
//# unitInfo: Requires: Mirage_crypto__Chacha20, Mirage_crypto__Cipher_block, Mirage_crypto__Cipher_stream, Mirage_crypto__Poly1305, Mirage_crypto__Uncommon
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Mirage_crypto_Cipher_block = global_data.Mirage_crypto__Cipher_block,
    Mirage_crypto_Cipher_stream = global_data.Mirage_crypto__Cipher_stream,
    Mirage_crypto_Chacha20 = global_data.Mirage_crypto__Chacha20,
    Mirage_crypto_Poly1305 = global_data.Mirage_crypto__Poly1305,
    Mirage_crypto_Uncommon = global_data.Mirage_crypto__Uncommon,
    Block = Mirage_crypto_Cipher_block[1],
    AES = Mirage_crypto_Cipher_block[5],
    DES = Mirage_crypto_Cipher_block[6],
    accelerated = Mirage_crypto_Cipher_block[7],
    ARC4 = Mirage_crypto_Cipher_stream[1],
    Mirage_crypto =
      [0,
       [0,
        Mirage_crypto_Uncommon[3],
        Mirage_crypto_Uncommon[4],
        Mirage_crypto_Uncommon[5],
        Mirage_crypto_Uncommon[6],
        Mirage_crypto_Uncommon[7],
        Mirage_crypto_Uncommon[9],
        Mirage_crypto_Uncommon[8],
        Mirage_crypto_Uncommon[2]],
       Mirage_crypto_Poly1305[1],
       Block,
       [0, AES[2], AES[3], AES[4], AES[5], AES[6]],
       [0, DES[2], DES[3], DES[4]],
       accelerated,
       [0,
        Mirage_crypto_Chacha20[7],
        Mirage_crypto_Chacha20[2],
        Mirage_crypto_Chacha20[12],
        Mirage_crypto_Chacha20[16],
        Mirage_crypto_Chacha20[13],
        Mirage_crypto_Chacha20[17],
        Mirage_crypto_Chacha20[11],
        Mirage_crypto_Chacha20[15],
        Mirage_crypto_Chacha20[10],
        Mirage_crypto_Chacha20[14],
        Mirage_crypto_Chacha20[6]],
       ARC4];
   runtime.caml_register_global(5, Mirage_crypto, "Mirage_crypto");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
