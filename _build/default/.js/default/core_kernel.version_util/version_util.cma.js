// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Version_util__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Version_util = [0],
    Version_util$0 = [0, Version_util];
   runtime.caml_register_global(0, Version_util$0, "Version_util__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Version_util__Section
//# unitInfo: Requires: Base__Option, Core, Core__Bytes, Core__Char, Core__List, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__BytesLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Version_util_Section = "Version_util__Section",
    cst_version_util = "version_util",
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_String = global_data.Core__String,
    Core_List = global_data.Core__List,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Core_Bytes = global_data.Core__Bytes,
    Core = global_data.Core,
    Core_Char = global_data.Core__Char,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Version_util_Section);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_version_util);
   caml_call1(Ppx_expect_runtime[1][1], "version_util/src/section.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_version_util, "section.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_version_util);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Version_util_Section);
   var
    cst_sections_can_t_contain_NUL = "sections can't contain NUL bytes",
    _a_ =
      [0,
       [2, 0, [11, " must be shorter than ", [4, 0, 0, 0, [11, " bytes", 0]]]],
       "%s must be shorter than %d bytes"],
    Version_util_Section =
      [0,
       function(M){
        var _b_ = Core_String[95], _c_ = M[2];
        function chop_start_marker_if_exists(_k_){return caml_call2(_b_, _k_, _c_);
        }
        function get(contents_of_exe){
         function _g_(i){
          var
           _i_ = caml_call1(Core_Char[53], 0),
           _j_ =
             caml_call3
              (Core_String[121],
               contents_of_exe,
               i + caml_ml_string_length(M[2]) | 0,
               i + M[3] | 0);
          return caml_call2(Core_String[123], _j_, _i_);
         }
         var _h_ = caml_call3(Core_String[63], 0, contents_of_exe, M[2]);
         return caml_call2(Base_Option[29][4][3], _h_, _g_);
        }
        function pad_with_at_least_one_nul_byte(string){
         if(caml_call2(Core_String[43], string, 0))
          caml_call1(Core[6], cst_sections_can_t_contain_NUL);
         var len = M[3] - caml_ml_string_length(M[2]) | 0;
         if(! caml_call2(Core[91], len, caml_ml_string_length(string)))
          return caml_call4(Core[246], _a_, M[1], len, 0);
         var
          _f_ =
            caml_call2
             (Core_String[44], len - caml_ml_string_length(string) | 0, 0);
         return caml_call2(Core[18], string, _f_);
        }
        function replace(contents_of_exe, data){
         var
          raw_data = pad_with_at_least_one_nul_byte(data),
          l = caml_call3(Core_String[65], contents_of_exe, 0, M[2]);
         if(! l) return 0;
         var b = caml_call1(Core_Bytes[40], contents_of_exe);
         function _e_(i){
          var start = i + caml_ml_string_length(M[2]) | 0;
          return caml_call5
                  (Stdlib_BytesLabels[12],
                   raw_data,
                   0,
                   b,
                   start,
                   caml_ml_string_length(raw_data));
         }
         caml_call2(Core_List[19], l, _e_);
         return [0, runtime.caml_string_of_bytes(b)];
        }
        function count_occurrences(contents_of_exe){
         var _d_ = caml_call3(Core_String[65], contents_of_exe, 0, M[2]);
         return caml_call1(Core_List[45], _d_);
        }
        var
         start_marker = M[2],
         Expert = [0, start_marker, pad_with_at_least_one_nul_byte];
        return [0,
                get,
                replace,
                chop_start_marker_if_exists,
                count_occurrences,
                Expert];
       }];
   runtime.caml_register_global
    (20, Version_util_Section, cst_Version_util_Section);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Version_util
//# unitInfo: Requires: Base__Exn, Base__Option, Core, Core__Char, Core__Date, Core__List, Core__Md5, Core__Or_error, Core__Ref, Core__Sexp, Core__String, Core__Time_float, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Sexplib__Conv, Version_util__Section
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$12 = "",
    cst$10 = "\n",
    cst$11 = " ",
    cst$13 = ":",
    cst_NO_BUILD_INFO$0 = "NO_BUILD_INFO",
    cst_NO_VERSION_UTIL$1 = "NO_VERSION_UTIL",
    cst_Version_util$0 = "Version_util",
    cst_allowed_projections$0 = "allowed_projections",
    cst_application_specific_field$0 = "application_specific_fields",
    cst_build_system$0 = "build_system",
    cst_build_time$0 = "build_time",
    cst_dynlinkable_code$0 = "dynlinkable_code",
    cst_executable_path$0 = "executable_path",
    cst_hostname$0 = "hostname",
    cst_kernel$0 = "kernel",
    cst_ocaml_version$0 = "ocaml_version",
    cst_portable_int63$0 = "portable_int63",
    cst_risk_system$0 = "risk_system",
    cst_username$0 = "username",
    cst_version_util$0 = "version_util",
    cst_with_fdo$0 = "with_fdo",
    cst_x_library_inlining$0 = "x_library_inlining",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = "+",
    cst$5 = cst$10,
    cst$6 = cst$11,
    cst$2 = cst$12,
    cst$1 = "_",
    cst$3 = cst$10,
    name = cst_version_util$0,
    cst = cst$13,
    name$0 = "build info",
    cst$0 = cst$13,
    error_source_013 = "version_util/src/version_util.ml.Build_info.t",
    cst$7 = cst$12,
    cst$8 = cst$12,
    cst$9 = cst$12,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Core_Sexp = global_data.Core__Sexp,
    Core_Ref = global_data.Core__Ref,
    Core_Md5 = global_data.Core__Md5,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Core_String = global_data.Core__String,
    Core_Date = global_data.Core__Date,
    Core_Time_float = global_data.Core__Time_float,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Char = global_data.Core__Char,
    Base_Option = global_data.Base__Option,
    Core_Or_error = global_data.Core__Or_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Version_util_Section = global_data.Version_util__Section,
    Base_Exn = global_data.Base__Exn;
   caml_call1(Ppx_module_timer_runtime[4], cst_Version_util$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_version_util$0);
   caml_call1(Ppx_expect_runtime[1][1], "version_util/src/version_util.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_version_util$0, "version_util.ml");
   var
    start_marker =
      caml_call2(Core[18], "rUb71QgfHXXwnBWBoJfb0Sa3R60vihdV", cst),
    Version_util_section =
      caml_call1(Version_util_Section[1], [0, name, start_marker, 4096]),
    start_marker$0 =
      caml_call2(Core[18], "vNxXpiccvPI9MHVFJuNwNxj8eu9W5KCB", cst$0),
    Build_info_section =
      caml_call1(Version_util_Section[1], [0, name$0, start_marker$0, 4096]),
    _h_ = [0, cst_application_specific_field$0],
    _i_ = [0, cst_with_fdo$0],
    _j_ = [0, cst_allowed_projections$0],
    _k_ = [0, cst_build_system$0],
    _l_ = [0, cst_executable_path$0],
    _m_ = [0, cst_ocaml_version$0],
    _n_ = [0, cst_risk_system$0],
    _o_ = [0, cst_dynlinkable_code$0],
    _p_ = [0, cst_portable_int63$0],
    _q_ = [0, cst_x_library_inlining$0],
    _r_ = [0, cst_build_time$0],
    _s_ = [0, cst_kernel$0],
    _t_ = [0, cst_hostname$0],
    _u_ = [0, cst_username$0],
    cst_application_specific_field = cst_application_specific_field$0,
    cst_with_fdo = cst_with_fdo$0,
    cst_allowed_projections = cst_allowed_projections$0,
    cst_build_system = cst_build_system$0,
    cst_executable_path = cst_executable_path$0,
    cst_ocaml_version = cst_ocaml_version$0,
    cst_risk_system = cst_risk_system$0,
    cst_dynlinkable_code = cst_dynlinkable_code$0,
    cst_portable_int63 = cst_portable_int63$0,
    cst_x_library_inlining = cst_x_library_inlining$0,
    cst_build_time = cst_build_time$0,
    cst_kernel = cst_kernel$0,
    cst_hostname = cst_hostname$0,
    cst_username = cst_username$0,
    cst_Z = "Z",
    cst_time_must_contain_one_spac =
      "time must contain one space between date and ofday",
    cst_zone_must_be_Z = "zone must be Z",
    cst_NO_BUILD_INFO = cst_NO_BUILD_INFO$0,
    cst_doesn_t_look_like_a_repo_u = " doesn't look like a repo url",
    cst_doesn_t_look_like_a_full_h = " doesn't look like a full hg version",
    cst_version_util_must_include_ =
      "version_util must include at least one repository",
    cst_version_util_must_not_cont =
      "version_util must not contain duplicate repositories",
    cst_NO_VERSION_UTIL$0 = cst_NO_VERSION_UTIL$1,
    _f_ = [0, cst$11],
    cst_executable_built_without_v = "executable built without version util",
    cst_NO_VERSION_UTIL = cst_NO_VERSION_UTIL$1,
    _e_ = [0, 0],
    cst_Could_not_parse_version = "Could not parse version",
    _c_ = [0, "version"],
    _d_ = [0, "repo"],
    _a_ = [0, cst_NO_VERSION_UTIL$1, 0],
    _b_ = [0, cst$11],
    _g_ = [0, "1970-01-01 00:00:00Z"],
    cst_Print_build_info_as_sexp_a = " Print build info as sexp and exit",
    cst_build_info = "-build_info",
    cst_Print_the_hg_revision_of_t =
      " Print the hg revision of this build and exit",
    cst_version = "-version",
    cst_version_util = cst_version_util$0,
    cst_Version_util = cst_Version_util$0;
   function parse_generated_hg_version(generated_hg_version){
    if(! caml_string_notequal(generated_hg_version, cst$12)) return _a_;
    function _aE_(line){
     var match = caml_call2(Core_String[77], line, 32);
     if(! match) return line;
     var
      match$0 = match[1],
      rev_status = match$0[2],
      repo = match$0[1],
      _aI_ = 0,
      _aJ_ =
        caml_call2(Core[90], caml_ml_string_length(rev_status) % 2 | 0, 1)
         ? caml_call2(Core_String[96], rev_status, 1)
         : cst$2,
      _aK_ =
        [0,
         repo,
         [0,
          cst$1,
          [0, caml_call2(Core_String[97], rev_status, 12), [0, _aJ_, _aI_]]]];
     return caml_call2(Core_String[46], 0, _aK_);
    }
    var
     _aF_ = caml_call2(Core_String[94], generated_hg_version, cst$3),
     _aG_ = caml_call1(Version_util_section[3], _aF_),
     _aH_ = caml_call2(Core_String[78], _aG_, 10);
    return caml_call2(Core_List[51], _aH_, _aE_);
   }
   var
    version_list = parse_generated_hg_version(runtime.generated_hg_version(0)),
    version = caml_call2(Core_String[46], _b_, version_list);
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    var n = caml_call2(Core[551], a_001[1], b_002[1]);
    return 0 === n ? caml_call2(Core[551], a_001[2], b_002[2]) : n;
   }
   function sexp_of_t(param){
    var
     version_006 = param[2],
     repo_004 = param[1],
     arg_007 = caml_call1(Core[558], version_006),
     bnds_003 = [0, [1, [0, _c_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Core[558], repo_004),
     bnds_003$0 = [0, [1, [0, _d_, [0, arg_005, 0]]], bnds_003];
    return [1, bnds_003$0];
   }
   function parse1(version){
    var match = caml_call2(Core_String[77], version, 95);
    if(match){
     var match$0 = match[1], version$0 = match$0[2], repo = match$0[1];
     return [0, [0, repo, version$0]];
    }
    var
     _aC_ = [0, caml_call1(Sexplib0_Sexp_conv[7], version), 0],
     _aD_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Could_not_parse_version),
         _aC_]];
    return caml_call1(Core[245], _aD_);
   }
   function parse_list(l){
    var _ay_ = caml_call1(Core_String[141], cst_NO_VERSION_UTIL);
    if(caml_call2(Core_List[23], l, _ay_)) return _e_;
    function _az_(x){return [0, x];}
    var
     _aA_ = caml_call2(Core_List[51], l, parse1),
     _aB_ = caml_call1(Core_Or_error[56], _aA_);
    return caml_call2(Core_Or_error[53], _aB_, _az_);
   }
   function parse_lines(versions){
    return parse_list(caml_call1(Core_String[80], versions));
   }
   function current_version(param){
    var _ax_ = parse_list(version_list);
    return caml_call1(Core[255], _ax_);
   }
   function present(param){
    if(param){var x = param[1]; return [0, x];}
    var
     _aw_ = caml_call1(Sexplib0_Sexp_conv[7], cst_executable_built_without_v);
    return caml_call1(Core[245], _aw_);
   }
   function parse_list_present(x){
    var _av_ = parse_list(x);
    return caml_call2(Core_Or_error[29], _av_, present);
   }
   function parse_lines_present(x){
    var _au_ = parse_lines(x);
    return caml_call2(Core_Or_error[29], _au_, present);
   }
   function current_version_present(param){return present(current_version(0));
   }
   function get_version_util(contents_of_exe){
    function _ar_(section){
     var _at_ = parse_generated_hg_version(section);
     return caml_call2(Core_String[46], _f_, _at_);
    }
    var _as_ = caml_call1(Version_util_section[1], contents_of_exe);
    return caml_call2(Base_Option[29][4][3], _as_, _ar_);
   }
   function text(versions_opt){
    if(! versions_opt) return cst_NO_VERSION_UTIL$0;
    var versions = versions_opt[1];
    if(caml_call1(Core_List[18], versions))
     caml_call1(Core[6], cst_version_util_must_include_);
    var _af_ = Core_String[146];
    function _ag_(v){return v[1];}
    var _ah_ = caml_call2(Core_List[51], versions, _ag_);
    if(caml_call2(Core_List[125], _ah_, _af_))
     caml_call1(Core[6], cst_version_util_must_not_cont);
    function _ai_(param){
     var version = param[2], repo = param[1];
     if(1 - caml_call2(Core_String[43], repo, 47)){
      var
       _al_ =
         [0,
          repo,
          [0,
           caml_call1
            (Ppx_string_runtime[1][2], cst_doesn_t_look_like_a_repo_u),
           0]],
       _am_ = caml_call1(Ppx_string_runtime[1][4], _al_);
      caml_call1(Core[6], _am_);
     }
     var version$0 = caml_call2(Core_String[94], version, cst$4);
     a:
     {
      b:
      {
       if
        (!
         caml_call2(Core[90], caml_ml_string_length(version$0), 40)
         && ! caml_call2(Core[90], caml_ml_string_length(version$0), 64))
        break b;
       if(caml_call2(Core_String[20], version$0, Core_Char[28])) break a;
      }
      var
       _ap_ =
         [0,
          version,
          [0,
           caml_call1
            (Ppx_string_runtime[1][2], cst_doesn_t_look_like_a_full_h),
           0]],
       _aq_ = caml_call1(Ppx_string_runtime[1][4], _ap_);
      caml_call1(Core[6], _aq_);
     }
     var
      _an_ = caml_call2(Core[18], version, cst$5),
      _ao_ = caml_call2(Core[18], cst$6, _an_);
     return caml_call2(Core[18], repo, _ao_);
    }
    var
     _aj_ = caml_call2(Core_List[79], versions, compare),
     _ak_ = caml_call2(Core_List[51], _aj_, _ai_);
    return caml_call2(Core_String[46], 0, _ak_);
   }
   function raw_text(v){
    var _ae_ = text(v);
    return caml_call1(Version_util_section[5][2], _ae_);
   }
   function replace_version_util(contents_of_exe, versions_opt){
    var _ad_ = text(versions_opt);
    return caml_call2(Version_util_section[2], contents_of_exe, _ad_);
   }
   var get_build_info = Build_info_section[1];
   function remove_build_info(contents_of_exe){
    return caml_call2
            (Build_info_section[2], contents_of_exe, cst_NO_BUILD_INFO);
   }
   var Experimental = [0, get_build_info, remove_build_info];
   function count_section_occurrences(contents_of_exe){
    var _ac_ = caml_call1(Build_info_section[4], contents_of_exe);
    return caml_call1(Version_util_section[4], contents_of_exe) + _ac_ | 0;
   }
   var For_tests = [0, count_section_occurrences];
   function t_of_sexp(x_010){
    return caml_call2(Core_String[159][44], Core_Sexp[94], x_010);
   }
   function sexp_of_t$0(x_011){
    return caml_call2(Core_String[159][45], Core_Sexp[93], x_011);
   }
   var Application_specific_fields = [0, t_of_sexp, sexp_of_t$0];
   function t_of_sexp$0(sexp){
    var str = caml_call1(Core[559], sexp);
    try{
     var match = caml_call2(Core_String[92], str, cst_Z);
     if(match){
      var rest = match[1], match$0 = caml_call2(Core_String[76], rest, 32);
      if(match$0)
       var
        match$1 = match$0[1],
        ofday = match$1[2],
        date = match$1[1],
        _Z_ = caml_call1(Core[558], date),
        date$0 = caml_call1(Core_Date[11], _Z_),
        ___ = caml_call1(Core[558], ofday),
        ofday$0 = caml_call1(Core_Time_float[83][9], ___),
        _$_ =
          [0,
           caml_call3
            (Core_Time_float[59], Core_Time_float[85][7], date$0, ofday$0),
           sexp];
      else
       var _$_ = caml_call1(Core[6], cst_time_must_contain_one_spac);
      var _aa_ = _$_;
     }
     else
      var _aa_ = caml_call1(Core[6], cst_zone_must_be_Z);
     return _aa_;
    }
    catch(_ab_){
     var
      _Y_ = caml_wrap_exception(_ab_),
      e = _Y_[1] === Sexplib_Conv[25] ? _Y_[2] : _Y_;
     throw caml_maybe_attach_backtrace([0, Sexplib_Conv[25], e, sexp], 0);
    }
   }
   var
    sexp_of_t_ref = [0, function(param){var sexp = param[2]; return sexp;}],
    epoch = [0, Core_Time_float[66], _g_],
    default_019 = 0;
   function sexp_of_t$1(param){
    var
     application_specific_fields_06 = param[14],
     with_fdo_056 = param[13],
     allowed_projections_052 = param[12],
     build_system_050 = param[11],
     executable_path_048 = param[10],
     ocaml_version_046 = param[9],
     risk_system_044 = param[8],
     dynlinkable_code_042 = param[7],
     portable_int63_040 = param[6],
     x_library_inlining_038 = param[5],
     build_time_034 = param[4],
     kernel_030 = param[3],
     hostname_026 = param[2],
     username_022 = param[1],
     bnds_021 = 0;
    if(application_specific_fields_06)
     var
      v_065 = application_specific_fields_06[1],
      arg_067 = caml_call1(Application_specific_fields[2], v_065),
      bnd_066 = [1, [0, _h_, [0, arg_067, 0]]],
      bnds_021$0 = [0, bnd_066, bnds_021];
    else
     var bnds_021$0 = bnds_021;
    if(with_fdo_056)
     var
      v_057 = with_fdo_056[1],
      arg1_061 = v_057[2],
      arg0_060 = v_057[1],
      res0_062 = caml_call1(Core[558], arg0_060),
      res1_063 = caml_call2(Core[515], Core_Md5[4], arg1_061),
      arg_059 = [1, [0, res0_062, [0, res1_063, 0]]],
      bnd_058 = [1, [0, _i_, [0, arg_059, 0]]],
      bnds_021$1 = [0, bnd_058, bnds_021$0];
    else
     var bnds_021$1 = bnds_021$0;
    if(allowed_projections_052)
     var
      v_053 = allowed_projections_052[1],
      arg_055 = caml_call2(Core[472], Core[558], v_053),
      bnd_054 = [1, [0, _j_, [0, arg_055, 0]]],
      bnds_021$2 = [0, bnd_054, bnds_021$1];
    else
     var bnds_021$2 = bnds_021$1;
    var
     arg_051 = caml_call1(Core[558], build_system_050),
     bnds_021$3 = [0, [1, [0, _k_, [0, arg_051, 0]]], bnds_021$2],
     arg_049 = caml_call1(Core[558], executable_path_048),
     bnds_021$4 = [0, [1, [0, _l_, [0, arg_049, 0]]], bnds_021$3],
     arg_047 = caml_call1(Core[558], ocaml_version_046),
     bnds_021$5 = [0, [1, [0, _m_, [0, arg_047, 0]]], bnds_021$4],
     arg_045 = caml_call1(Core[323], risk_system_044),
     bnds_021$6 = [0, [1, [0, _n_, [0, arg_045, 0]]], bnds_021$5],
     arg_043 = caml_call1(Core[323], dynlinkable_code_042),
     bnds_021$7 = [0, [1, [0, _o_, [0, arg_043, 0]]], bnds_021$6],
     arg_041 = caml_call1(Core[323], portable_int63_040),
     bnds_021$8 = [0, [1, [0, _p_, [0, arg_041, 0]]], bnds_021$7],
     arg_039 = caml_call1(Core[323], x_library_inlining_038),
     bnds_021$9 = [0, [1, [0, _q_, [0, arg_039, 0]]], bnds_021$8];
    if(build_time_034)
     var
      v_035 = build_time_034[1],
      arg_037 = caml_call1(sexp_of_t_ref[1], v_035),
      bnd_036 = [1, [0, _r_, [0, arg_037, 0]]],
      bnds_021$10 = [0, bnd_036, bnds_021$9];
    else
     var bnds_021$10 = bnds_021$9;
    if(kernel_030)
     var
      v_031 = kernel_030[1],
      arg_033 = caml_call1(Core[558], v_031),
      bnd_032 = [1, [0, _s_, [0, arg_033, 0]]],
      bnds_021$11 = [0, bnd_032, bnds_021$10];
    else
     var bnds_021$11 = bnds_021$10;
    if(hostname_026)
     var
      v_027 = hostname_026[1],
      arg_029 = caml_call1(Core[558], v_027),
      bnd_028 = [1, [0, _t_, [0, arg_029, 0]]],
      bnds_021$12 = [0, bnd_028, bnds_021$11];
    else
     var bnds_021$12 = bnds_021$11;
    if(username_022)
     var
      v_023 = username_022[1],
      arg_025 = caml_call1(Core[558], v_023),
      bnd_024 = [1, [0, _u_, [0, arg_025, 0]]],
      bnds_021$13 = [0, bnd_024, bnds_021$12];
    else
     var bnds_021$13 = bnds_021$12;
    return [1, bnds_021$13];
   }
   function _v_(param){
    var non_empty_string = runtime.generated_build_info(0);
    if(! caml_string_notequal(non_empty_string, cst$12)) return 0;
    var str = caml_call1(Build_info_section[3], non_empty_string);
    if(! caml_string_notequal(str, cst_NO_BUILD_INFO$0)) return 1;
    var x_020 = caml_call1(Core_Sexp[76], str);
    function _B_(param){
     var
      _M_ = param[2],
      _N_ = _M_[2],
      _O_ = _N_[2],
      _P_ = _O_[2],
      _Q_ = _P_[2],
      _R_ = _Q_[2],
      _S_ = _R_[2],
      _T_ = _S_[2],
      _U_ = _T_[2],
      _V_ = _U_[2],
      _W_ = _V_[2],
      _X_ = _W_[2],
      application_specific_fields = _X_[2][1],
      with_fdo = _X_[1],
      allowed_projections = _W_[1],
      build_system = _V_[1],
      executable_path = _U_[1],
      ocaml_version = _T_[1],
      risk_system = _S_[1],
      dynlinkable_code = _R_[1],
      portable_int63 = _Q_[1],
      x_library_inlining = _P_[1],
      build_time = _O_[1],
      kernel = _N_[1],
      hostname = _M_[1],
      username = param[1];
     return [0,
             username,
             hostname,
             kernel,
             build_time,
             x_library_inlining,
             portable_int63,
             dynlinkable_code,
             risk_system,
             ocaml_version,
             executable_path,
             build_system,
             allowed_projections,
             with_fdo,
             application_specific_fields];
    }
    var _C_ = 0;
    function _D_(param){
     var switch$0 = runtime.caml_string_compare(param, cst_kernel$0);
     if(0 <= switch$0){
      if(0 >= switch$0) return 2;
      if(! caml_string_notequal(param, cst_ocaml_version$0)) return 8;
      if(! caml_string_notequal(param, cst_portable_int63$0)) return 5;
      if(! caml_string_notequal(param, cst_risk_system$0)) return 7;
      if(! caml_string_notequal(param, cst_username$0)) return 0;
      if(! caml_string_notequal(param, cst_with_fdo$0)) return 12;
      if(! caml_string_notequal(param, cst_x_library_inlining$0)) return 4;
     }
     else{
      if(! caml_string_notequal(param, cst_allowed_projections$0)) return 11;
      if(! caml_string_notequal(param, cst_application_specific_field$0))
       return 13;
      if(! caml_string_notequal(param, cst_build_system$0)) return 10;
      if(! caml_string_notequal(param, cst_build_time$0)) return 3;
      if(! caml_string_notequal(param, cst_dynlinkable_code$0)) return 6;
      if(! caml_string_notequal(param, cst_executable_path$0)) return 9;
      if(! caml_string_notequal(param, cst_hostname$0)) return 1;
     }
     return -1;
    }
    var
     _E_ =
       [0,
        cst_application_specific_field,
        5,
        Application_specific_fields[1],
        0],
     _F_ =
       [0,
        cst_with_fdo,
        5,
        function(sexp_018){
         if(1 === sexp_018[0]){
          var _K_ = sexp_018[1];
          if(_K_){
           var _L_ = _K_[2];
           if(_L_ && ! _L_[2]){
            var
             arg1_015 = _L_[1],
             arg0_014 = _K_[1],
             res0_016 = caml_call1(Core[559], arg0_014),
             res1_017 = caml_call2(Core[516], Core_Md5[3], arg1_015);
            return [0, res0_016, res1_017];
           }
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4], error_source_013, 2, sexp_018);
        },
        _E_],
     _G_ =
       [0, cst_allowed_projections, 5, caml_call1(Core[473], Core[559]), _F_],
     _H_ =
       [0,
        cst_ocaml_version,
        1,
        Core[559],
        [0,
         cst_executable_path,
         1,
         Core[559],
         [0, cst_build_system, 1, Core[559], _G_]]],
     _I_ = Core[324],
     _J_ =
       [0,
        cst_risk_system,
        [0, function(param){return default_019;}],
        _I_,
        _H_],
     t =
       caml_call6
        (Sexplib0_Sexp_conv_record[3],
         error_source_013,
         [0,
          cst_username,
          5,
          Core[559],
          [0,
           cst_hostname,
           5,
           Core[559],
           [0,
            cst_kernel,
            5,
            Core[559],
            [0,
             cst_build_time,
             5,
             t_of_sexp$0,
             [0,
              cst_x_library_inlining,
              1,
              Core[324],
              [0,
               cst_portable_int63,
               1,
               Core[324],
               [0, cst_dynlinkable_code, 1, Core[324], _J_]]]]]]],
         _D_,
         _C_,
         _B_,
         x_020);
    return [0, [0, str, x_020, t]];
   }
   var
    t = caml_call1(Base_Exn[15], _v_),
    dummy = [0, 0, 0, 0, [0, epoch], 0, 1, 0, 0, cst$9, cst$8, cst$7, 0, 0, 0];
   a:
   {
    if(typeof t === "number" && ! t){
     var build_system_supports_version_ = 0;
     break a;
    }
    var build_system_supports_version_ = 1;
   }
   var
    build_info_status =
      typeof t === "number" ? t ? 974938825 : 404463778 : 4150146;
   if(typeof t === "number")
    var
     sexp = sexp_of_t$1(dummy),
     str = caml_call1(Core_Sexp[85], sexp),
     dummy$0 = dummy,
     build_info_as_sexp = sexp,
     build_info = str;
   else
    var
     tuple = t[1],
     dummy$0 = tuple[3],
     build_info_as_sexp = tuple[2],
     build_info = tuple[1];
   var
    application_specific_fields = dummy$0[14],
    with_fdo = dummy$0[13],
    allowed_projections = dummy$0[12],
    build_system = dummy$0[11],
    executable_path = dummy$0[10],
    ocaml_version = dummy$0[9],
    dynlinkable_code = dummy$0[7],
    x_library_inlining = dummy$0[5],
    build_time_and_sexp = dummy$0[4],
    kernel = dummy$0[3],
    hostname = dummy$0[2],
    username = dummy$0[1];
   if(build_time_and_sexp)
    var time = build_time_and_sexp[1][1], build_time = [0, time];
   else
    var build_time = 0;
   function reprint_build_info(sexp_of_time){
    function _y_(param){
     var _A_ = sexp_of_t$1(dummy$0);
     return caml_call1(Core_Sexp[86], _A_);
    }
    function _z_(param){
     var time = param[1];
     return caml_call1(sexp_of_time, time);
    }
    return caml_call3(Core_Ref[26], sexp_of_t_ref, _z_, _y_);
   }
   var
    compiled_for_speed =
      x_library_inlining ? 1 - dynlinkable_code : x_library_inlining,
    _w_ = 0,
    _x_ =
      [0,
       [0,
        cst_build_info,
        [0,
         function(param){
          caml_call1(Core[32], build_info);
          return caml_call1(Core[83], 0);
         }],
        cst_Print_build_info_as_sexp_a],
       _w_],
    arg_spec =
      [0,
       [0,
        cst_version,
        [0,
         function(param){
          caml_call2(Core_List[19], version_list, Core[32]);
          return caml_call1(Core[83], 0);
         }],
        cst_Print_the_hg_revision_of_t],
       _x_],
    version_util_start_marker = Version_util_section[5][1],
    Private_For_version_util_async =
      [0, version_util_start_marker, parse_generated_hg_version, raw_text];
   caml_call1(Ppx_inline_test_lib[7], cst_version_util);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Version_util);
   var
    Version_util =
      [0,
       version_list,
       version,
       [0,
        sexp_of_t,
        parse1,
        parse_list,
        parse_lines,
        current_version,
        parse_list_present,
        parse_lines_present,
        current_version_present],
       arg_spec,
       Application_specific_fields,
       build_info,
       build_info_as_sexp,
       reprint_build_info,
       username,
       hostname,
       kernel,
       build_time,
       x_library_inlining,
       dynlinkable_code,
       compiled_for_speed,
       application_specific_fields,
       ocaml_version,
       allowed_projections,
       executable_path,
       build_system,
       with_fdo,
       [0, parse_generated_hg_version, build_info_status],
       build_system_supports_version_,
       [0,
        get_version_util,
        replace_version_util,
        parse_generated_hg_version,
        Experimental,
        For_tests],
       Private_For_version_util_async];
   runtime.caml_register_global(113, Version_util, cst_Version_util$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
