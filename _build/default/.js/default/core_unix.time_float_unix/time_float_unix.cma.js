// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Time_float_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Time_float_unix = [0],
    Time_float_unix$0 = [0, Time_float_unix];
   runtime.caml_register_global(0, Time_float_unix$0, "Time_float_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_float_unix__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Time_float_unix_Import = "Time_float_unix__Import",
    cst_time_float_unix = "time_float_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_float_unix_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_float_unix);
   caml_call1(Ppx_expect_runtime[1][1], "time_float_unix/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_time_float_unix, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_time_float_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_float_unix_Import);
   var Time_float_unix_Import = [0];
   runtime.caml_register_global
    (11, Time_float_unix_Import, cst_Time_float_unix_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_float_unix__Time_functor_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Time_float_unix_Time_funct = "Time_float_unix__Time_functor_intf",
    cst_time_float_unix = "time_float_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_float_unix_Time_funct);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_float_unix);
   caml_call1
    (Ppx_expect_runtime[1][1], "time_float_unix/src/time_functor_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_time_float_unix, "time_functor_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_time_float_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_float_unix_Time_funct);
   var Time_float_unix_Time_functor_i = [0];
   runtime.caml_register_global
    (11, Time_float_unix_Time_functor_i, cst_Time_float_unix_Time_funct);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_float_unix__Time_functor
//# unitInfo: Requires: Base__Exn, Base__Hash, Base__Pretty_printer, Bin_prot__Common, Bin_prot__Shape, Bin_shape, CamlinternalLazy, Core, Core__Char, Core__Command_internal, Core__Date, Core__Float, Core__Hashable, Core__Int, Core__List, Core__Map, Core__Month, Core__Option, Core__Set, Core__String, Core_unix, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Time_float_unix__Time_functor_intf, Timezone
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = " ",
    cst_Time_float_unix_Time_funct$1 = "Time_float_unix__Time_functor",
    cst_input_too_long = "input too long",
    cst_t$7 = "t",
    cst_time_float_unix$0 = "time_float_unix",
    cst_time_float_unix_src_time_f$5 = "time_float_unix/src/time_functor.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$2 = ":",
    cst$1 = "-",
    cst$0 = cst$4,
    cst = cst$4,
    error_source_011 =
      "time_float_unix/src/time_functor.ml.Make.Ofday.Zoned.sexp_repr",
    module_name = "Time_float_unix.Ofday.Zoned",
    module_name$0 = "Time_float_unix",
    t_sexp_grammar =
      [4,
       [0,
        4,
        [0, [2, [0, 4, [0, 4, 0]]], [0, [2, [0, 4, [0, 4, [0, 4, 0]]]], 0]]]],
    Core_Float = global_data.Core__Float,
    Core_Option = global_data.Core__Option,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Map = global_data.Core__Map,
    Core_Set = global_data.Core__Set,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Date = global_data.Core__Date,
    Core = global_data.Core,
    Base_Exn = global_data.Base__Exn,
    Assert_failure = global_data.Assert_failure,
    Core_Char = global_data.Core__Char,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core_unix = global_data.Core_unix,
    Core_Month = global_data.Core__Month,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Core_Command_internal = global_data.Core__Command_internal,
    Timezone = global_data.Timezone,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Hashable = global_data.Core__Hashable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_float_unix_Time_funct$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_float_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_time_float_unix_src_time_f$5);
   caml_call2
    (Ppx_inline_test_lib[6], cst_time_float_unix$0, "time_functor.ml");
   var
    cst_t$3 = cst_t$7,
    cst_time_float_unix_src_time_f$2 =
      "time_float_unix/src/time_functor.ml:329:8",
    cst_t$4 = cst_t$7,
    cst_Time_t_of_sexp = "Time.t_of_sexp",
    _h_ = [0, [11, "Time.t_of_sexp: ", [2, 0, 0]], "Time.t_of_sexp: %s"],
    _f_ =
      [0, "time_float_unix/src/time_functor.ml.Make.Time_string_not_absolute"],
    _g_ = [0, "_none_", 0, -1],
    _e_ = [0, [11, "invalid offset ", [2, 0, 0]], "invalid offset %s"],
    _c_ =
      [0,
       [11, "no dash in position ", [4, 0, 0, 0, 0]],
       "no dash in position %d"],
    _d_ = [0, [11, cst_input_too_long, 0], cst_input_too_long],
    _b_ =
      [0,
       [11, "Time.of_string_fix_proto ", [2, 0, [11, ": ", [2, 0, 0]]]],
       "Time.of_string_fix_proto %s: %s"],
    _a_ =
      [0,
       [11, "Ofday.Zoned.of_string ", [2, 0, 0]],
       "Ofday.Zoned.of_string %s"],
    cst_time_float_unix_src_time_f$0 =
      "time_float_unix/src/time_functor.ml.Make.Ofday.Zoned.t",
    cst_zone = "zone",
    cst_ofday = "ofday",
    cst_t = cst_t$7,
    cst_time_float_unix_src_time_f =
      "time_float_unix/src/time_functor.ml:72:6",
    cst_t$0 = cst_t$7,
    cst_t$1 = cst_t$7,
    cst_time_float_unix_src_time_f$1 =
      "time_float_unix/src/time_functor.ml:109:8",
    cst_t$2 = cst_t$7,
    cst_Time_float_unix_Time_funct =
      "Time_float_unix__Time_functor.Make(Time0)(Time).Time_string_not_absolute",
    cst_time_float_unix_src_time_f$3 = cst_time_float_unix_src_time_f$5,
    cst_Set_equal_Set_of_list_epoc =
      "<<Set.equal (Set.of_list [epoch])   (Set.t_of_s[...]>>",
    cst_t$5 = cst_t$7,
    cst_time_float_unix_src_time_f$4 =
      "time_float_unix/src/time_functor.ml:366:4",
    cst_t$6 = cst_t$7,
    cst_time_float_unix = cst_time_float_unix$0,
    cst_Time_float_unix_Time_funct$0 = cst_Time_float_unix_Time_funct$1;
   function Make(Time0, Time){
    var
     include = Time[13],
     bin_size_t = include[1],
     bin_write_t = include[2],
     bin_read_t = include[3],
     bin_read_t$0 = include[4],
     bin_shape_t = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8],
     t_of_sexp = include[9],
     sexp_of_t = include[10],
     t_sexp_grammar$0 = include[11],
     typerep_of_t = include[12],
     typename_of_t = include[13],
     Parts = include[14],
     symbol = include[15],
     symbol$0 = include[16],
     symbol$1 = include[17],
     symbol$2 = include[18],
     symbol$3 = include[19],
     symbol$4 = include[20],
     equal = include[21],
     compare = include[22],
     min = include[23],
     max = include[24],
     ascending = include[25],
     descending = include[26],
     between = include[27],
     clamp_exn = include[28],
     clamp = include[29],
     Replace_polymorphic_compare = include[30],
     comparator = include[31],
     Map = include[32],
     Set = include[33],
     is_positive = include[34],
     is_non_negative = include[35],
     is_negative = include[36],
     is_non_positive = include[37],
     sign = include[38],
     validate_lbound = include[39],
     validate_ubound = include[40],
     validate_bound = include[41],
     validate_positive = include[42],
     validate_non_negative = include[43],
     validate_negative = include[44],
     validate_non_positive = include[45],
     hash_fold_t = include[46],
     hash = include[47],
     hashable = include[48],
     Table = include[49],
     Hash_set = include[50],
     Hash_queue = include[51],
     Diff = include[52],
     pp = include[53],
     symbol$5 = include[54],
     symbol$6 = include[55],
     symbol$7 = include[56],
     symbol$8 = include[57],
     symbol$9 = include[58],
     symbol$10 = include[59],
     robustly_compare = include[60],
     quickcheck_generator = include[61],
     quickcheck_observer = include[62],
     quickcheck_shrinker = include[63],
     gen_incl = include[64],
     gen_uniform_incl = include[65],
     to_string = include[66],
     of_string = include[67],
     nanosecond = include[68],
     microsecond = include[69],
     millisecond = include[70],
     second = include[71],
     minute = include[72],
     hour = include[73],
     day = include[74],
     robust_comparison_tolerance = include[75],
     zero = include[76],
     create = include[77],
     to_parts = include[78],
     of_ns = include[79],
     of_us = include[80],
     of_ms = include[81],
     of_sec = include[82],
     of_min = include[83],
     of_hr = include[84],
     of_day = include[85],
     to_ns = include[86],
     to_us = include[87],
     to_ms = include[88],
     to_sec = include[89],
     to_min = include[90],
     to_hr = include[91],
     to_day = include[92],
     of_int_ns = include[93],
     of_int_us = include[94],
     of_int_ms = include[95],
     of_int_sec = include[96],
     of_int_min = include[97],
     of_int_hr = include[98],
     of_int_day = include[99],
     of_int32_seconds = include[100],
     of_int63_seconds = include[101],
     to_int63_seconds_round_down_ex = include[102],
     to_proportional_float = include[103],
     symbol$11 = include[104],
     symbol$12 = include[105],
     abs = include[106],
     neg = include[107],
     scale = include[108],
     symbol$13 = include[109],
     symbol$14 = include[110],
     next = include[111],
     prev = include[112],
     to_short_string = include[113],
     to_unit_of_time = include[114],
     of_unit_of_time = include[115],
     to_string_hum = include[116],
     randomize = include[117],
     arg_type = caml_call3(Core_Command_internal[19][1], 0, 0, of_string),
     Span =
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        t_of_sexp,
        sexp_of_t,
        t_sexp_grammar$0,
        typerep_of_t,
        typename_of_t,
        Parts,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        Replace_polymorphic_compare,
        comparator,
        Map,
        Set,
        is_positive,
        is_non_negative,
        is_negative,
        is_non_positive,
        sign,
        validate_lbound,
        validate_ubound,
        validate_bound,
        validate_positive,
        validate_non_negative,
        validate_negative,
        validate_non_positive,
        hash_fold_t,
        hash,
        hashable,
        Table,
        Hash_set,
        Hash_queue,
        Diff,
        pp,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        robustly_compare,
        quickcheck_generator,
        quickcheck_observer,
        quickcheck_shrinker,
        gen_incl,
        gen_uniform_incl,
        to_string,
        of_string,
        nanosecond,
        microsecond,
        millisecond,
        second,
        minute,
        hour,
        day,
        robust_comparison_tolerance,
        zero,
        create,
        to_parts,
        of_ns,
        of_us,
        of_ms,
        of_sec,
        of_min,
        of_hr,
        of_day,
        to_ns,
        to_us,
        to_ms,
        to_sec,
        to_min,
        to_hr,
        to_day,
        of_int_ns,
        of_int_us,
        of_int_ms,
        of_int_sec,
        of_int_min,
        of_int_hr,
        of_int_day,
        of_int32_seconds,
        of_int63_seconds,
        to_int63_seconds_round_down_ex,
        to_proportional_float,
        symbol$11,
        symbol$12,
        abs,
        neg,
        scale,
        symbol$13,
        symbol$14,
        next,
        prev,
        to_short_string,
        to_unit_of_time,
        of_unit_of_time,
        to_string_hum,
        randomize,
        arg_type],
     _o_ = Time[50],
     input_tz_file = _o_[3],
     likely_machine_zones = _o_[4],
     of_utc_offset = _o_[5],
     of_utc_offset_explicit_name = _o_[6],
     utc = _o_[7],
     name = _o_[8],
     original_filename = _o_[9],
     digest = _o_[10],
     reset_transition_cache = _o_[11],
     Index = _o_[12],
     index = _o_[13],
     index_of_date_and_ofday = _o_[14],
     index_offset_from_utc_exn = _o_[15],
     index_abbreviation_exn = _o_[16],
     index_has_prev_clock_shift = _o_[17],
     index_prev_clock_shift_time_ex = _o_[18],
     index_prev_clock_shift_amount_ = _o_[19],
     index_has_next_clock_shift = _o_[20],
     index_next_clock_shift_time_ex = _o_[21],
     index_next_clock_shift_amount_ = _o_[22],
     abbreviation = _o_[23],
     absolute_time_of_date_and_ofda = _o_[24],
     date_and_ofday_of_absolute_tim = _o_[25],
     next_clock_shift = _o_[26],
     prev_clock_shift = _o_[27],
     init = Timezone[69],
     initialized_zones = Timezone[68],
     local = Timezone[67],
     find_exn = Timezone[66],
     find = Timezone[65],
     Diff$0 = Timezone[64],
     Hash_queue$0 = Timezone[63],
     Hash_set$0 = Timezone[62],
     Table$0 = Timezone[61],
     hashable$0 = Timezone[60],
     hash$0 = Timezone[59],
     hash_fold_t$0 = Timezone[58],
     Set$0 = Timezone[57],
     Map$0 = Timezone[56],
     comparator$0 = Timezone[55],
     Replace_polymorphic_compare$0 = Timezone[54],
     validate_bound$0 = Timezone[53],
     validate_ubound$0 = Timezone[52],
     validate_lbound$0 = Timezone[51],
     clamp$0 = Timezone[50],
     clamp_exn$0 = Timezone[49],
     between$0 = Timezone[48],
     descending$0 = Timezone[47],
     ascending$0 = Timezone[46],
     max$0 = Timezone[45],
     min$0 = Timezone[44],
     compare$0 = Timezone[43],
     equal$0 = Timezone[42],
     symbol$15 = Timezone[41],
     symbol$16 = Timezone[40],
     symbol$17 = Timezone[39],
     symbol$18 = Timezone[38],
     symbol$19 = Timezone[37],
     symbol$20 = Timezone[36],
     pp$0 = Timezone[35],
     to_string$0 = Timezone[34],
     of_string$0 = Timezone[33],
     sexp_of_t$0 = Timezone[32],
     t_of_sexp$0 = Timezone[31],
     bin_t$0 = Timezone[30],
     bin_reader_t$0 = Timezone[29],
     bin_writer_t$0 = Timezone[28],
     bin_shape_t$0 = Timezone[27],
     bin_read_t$1 = Timezone[26],
     bin_read_t$2 = Timezone[25],
     bin_write_t$0 = Timezone[24],
     bin_size_t$0 = Timezone[23],
     t_sexp_grammar$1 = Timezone[22],
     arg_type$0 = caml_call3(Core_Command_internal[19][1], 0, 0, of_string$0),
     Zone =
       [0,
        input_tz_file,
        likely_machine_zones,
        of_utc_offset,
        of_utc_offset_explicit_name,
        utc,
        name,
        original_filename,
        digest,
        reset_transition_cache,
        Index,
        index,
        index_of_date_and_ofday,
        index_offset_from_utc_exn,
        index_abbreviation_exn,
        index_has_prev_clock_shift,
        index_prev_clock_shift_time_ex,
        index_prev_clock_shift_amount_,
        index_has_next_clock_shift,
        index_next_clock_shift_time_ex,
        index_next_clock_shift_amount_,
        abbreviation,
        absolute_time_of_date_and_ofda,
        date_and_ofday_of_absolute_tim,
        next_clock_shift,
        prev_clock_shift,
        t_sexp_grammar$1,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$2,
        bin_read_t$1,
        bin_shape_t$0,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0,
        t_of_sexp$0,
        sexp_of_t$0,
        of_string$0,
        to_string$0,
        pp$0,
        symbol$20,
        symbol$19,
        symbol$18,
        symbol$17,
        symbol$16,
        symbol$15,
        equal$0,
        compare$0,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        validate_lbound$0,
        validate_ubound$0,
        validate_bound$0,
        Replace_polymorphic_compare$0,
        comparator$0,
        Map$0,
        Set$0,
        hash_fold_t$0,
        hash$0,
        hashable$0,
        Table$0,
        Hash_set$0,
        Hash_queue$0,
        Diff$0,
        find,
        find_exn,
        local,
        initialized_zones,
        init,
        arg_type$0],
     include$0 = Time[14],
     bin_size_t$1 = include$0[1],
     bin_write_t$1 = include$0[2],
     bin_read_t$3 = include$0[3],
     bin_read_t$4 = include$0[4],
     bin_shape_t$1 = include$0[5],
     bin_writer_t$1 = include$0[6],
     bin_reader_t$1 = include$0[7],
     bin_t$1 = include$0[8],
     t_of_sexp$1 = include$0[9],
     sexp_of_t$1 = include$0[10],
     t_sexp_grammar$2 = include$0[11],
     typerep_of_t$0 = include$0[12],
     typename_of_t$0 = include$0[13],
     symbol$21 = include$0[14],
     symbol$22 = include$0[15],
     symbol$23 = include$0[16],
     symbol$24 = include$0[17],
     symbol$25 = include$0[18],
     symbol$26 = include$0[19],
     equal$1 = include$0[20],
     compare$1 = include$0[21],
     min$1 = include$0[22],
     max$1 = include$0[23],
     ascending$1 = include$0[24],
     descending$1 = include$0[25],
     between$1 = include$0[26],
     clamp_exn$1 = include$0[27],
     clamp$1 = include$0[28],
     validate_lbound$1 = include$0[29],
     validate_ubound$1 = include$0[30],
     validate_bound$1 = include$0[31],
     Replace_polymorphic_compare$1 = include$0[32],
     comparator$1 = include$0[33],
     Map$1 = include$0[34],
     Set$1 = include$0[35],
     hash_fold_t$1 = include$0[36],
     hash$1 = include$0[37],
     hashable$1 = include$0[38],
     Table$1 = include$0[39],
     Hash_set$1 = include$0[40],
     Hash_queue$1 = include$0[41],
     Diff$1 = include$0[42],
     pp$1 = include$0[43],
     symbol$27 = include$0[44],
     symbol$28 = include$0[45],
     symbol$29 = include$0[46],
     symbol$30 = include$0[47],
     symbol$31 = include$0[48],
     symbol$32 = include$0[49],
     robustly_compare$0 = include$0[50],
     quickcheck_generator$0 = include$0[51],
     quickcheck_observer$0 = include$0[52],
     quickcheck_shrinker$0 = include$0[53],
     gen_incl$0 = include$0[54],
     gen_uniform_incl$0 = include$0[55],
     of_string$1 = include$0[56],
     to_string$1 = include$0[57],
     create$0 = include$0[58],
     to_parts$0 = include$0[59],
     start_of_day = include$0[60],
     start_of_next_day = include$0[61],
     approximate_end_of_day = include$0[62],
     to_span_since_start_of_day = include$0[63],
     of_span_since_start_of_day_exn = include$0[64],
     of_span_since_start_of_day = include$0[65],
     span_since_start_of_day_is_val = include$0[66],
     of_span_since_start_of_day_unc = include$0[67],
     add = include$0[68],
     sub = include$0[69],
     next$0 = include$0[70],
     prev$0 = include$0[71],
     diff = include$0[72],
     small_diff = include$0[73],
     to_string_trimmed = include$0[74],
     to_sec_string = include$0[75],
     of_string_iso8601_extended = include$0[76],
     to_millisecond_string = include$0[77],
     to_millisec_string = include$0[78],
     arg_type$1 = caml_call3(Core_Command_internal[19][1], 0, 0, of_string$1);
    function now(zone){
     var _aZ_ = caml_call1(Time[49], 0);
     return caml_call2(Time[67], _aZ_, zone);
    }
    var
     _p_ =
       caml_call1
        (Bin_prot_Shape[4],
         [0, [0, cst_ofday, Time[14][5]], [0, [0, cst_zone, Zone[31]], 0]]),
     _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _p_], 0],
     _r_ = caml_call1(Bin_shape[4][1], cst_time_float_unix_src_time_f),
     group = caml_call2(Bin_prot_Shape[2], _r_, _q_),
     _s_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t$2 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _s_), 0);
    function bin_size_t$2(param){
     var
      v2 = param[2],
      v1 = param[1],
      _aX_ = caml_call1(Time[14][1], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _aX_),
      _aY_ = caml_call1(Zone[27], v2);
     return caml_call2(Bin_prot_Common[23], size, _aY_);
    }
    function bin_write_t$2(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Time[14][2], buf, pos, v1);
     return caml_call3(Zone[28], buf, pos$0, v2);
    }
    var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
    function bin_read_t$5(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_time_float_unix_src_time_f$0,
              pos_ref[1]);
    }
    function bin_read_t$6(buf, pos_ref){
     var
      v_ofday = caml_call2(Time[14][3], buf, pos_ref),
      v_zone = caml_call2(Zone[29], buf, pos_ref);
     return [0, v_ofday, v_zone];
    }
    var
     bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
     bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
    function zone(r){return r[2];}
    function ofday(r){return r[1];}
    function compare$2(a_001, b_002){
     if(a_001 === b_002) return 0;
     var n = caml_call2(Time[14][21], a_001[1], b_002[1]);
     return 0 === n ? caml_call2(Zone[47], a_001[2], b_002[2]) : n;
    }
    function equal$2(a_003, b_004){
     if(a_003 === b_004) return 1;
     var _aW_ = caml_call2(Time[14][20], a_003[1], b_004[1]);
     return _aW_ ? caml_call2(Zone[46], a_003[2], b_004[2]) : _aW_;
    }
    function hash_fold_t$2(hsv, arg){
     var hsv$0 = caml_call2(Time[14][36], hsv, arg[1]);
     return caml_call2(Zone[62], hsv$0, arg[2]);
    }
    function hash$2(arg){
     var
      hsv = caml_call2(Base_Hash[11], 0, 0),
      _aV_ = hash_fold_t$2(hsv, arg);
     return caml_call1(Base_Hash[9], _aV_);
    }
    function sexp_repr_of_sexp(sexp_010){
     if(1 === sexp_010[0]){
      var _aT_ = sexp_010[1];
      if(_aT_){
       var _aU_ = _aT_[2];
       if(_aU_ && ! _aU_[2]){
        var
         arg1_007 = _aU_[1],
         arg0_006 = _aT_[1],
         res0_008 = caml_call1(Time[14][9], arg0_006),
         res1_009 = caml_call1(Zone[35], arg1_007);
        return [0, res0_008, res1_009];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_011, 2, sexp_010);
    }
    function sexp_of_sexp_repr(param){
     var
      arg1_013 = param[2],
      arg0_012 = param[1],
      res0_014 = caml_call1(Time[14][10], arg0_012),
      res1_015 = caml_call1(Zone[36], arg1_013);
     return [1, [0, res0_014, [0, res1_015, 0]]];
    }
    function sexp_of_t$2(t){return sexp_of_sexp_repr([0, t[1], t[2]]);}
    function t_of_sexp$2(sexp){
     var match = sexp_repr_of_sexp(sexp), zone = match[2], ofday = match[1];
     return [0, ofday, zone];
    }
    function to_time(t, date){return caml_call3(Time[62], t[2], date, t[1]);}
    function create$1(ofday, zone){return [0, ofday, zone];}
    function create_local(ofday){
     var _aQ_ = Zone[71], _aR_ = caml_obj_tag(_aQ_);
     a:
     if(250 === _aR_)
      var _aS_ = _aQ_[1];
     else{
      if(246 !== _aR_ && 244 !== _aR_){var _aS_ = _aQ_; break a;}
      var _aS_ = caml_call1(CamlinternalLazy[2], _aQ_);
     }
     return [0, ofday, _aS_];
    }
    function of_string$2(string){
     var match = caml_call2(Core_String[78], string, 32);
     if(match){
      var _aO_ = match[2];
      if(_aO_ && ! _aO_[2]){
       var
        zone = _aO_[1],
        ofday = match[1],
        _aP_ = caml_call1(Zone[37], zone);
       return [0, caml_call1(Time[14][56], ofday), _aP_];
      }
     }
     return caml_call3(Core[246], _a_, string, 0);
    }
    function to_string$2(t){
     var
      _aM_ = [0, cst, [0, caml_call1(Zone[38], t[2]), 0]],
      _aN_ = [0, caml_call1(Time[14][57], t[1]), _aM_];
     return caml_call2(Core_String[46], 0, _aN_);
    }
    function to_string_trimmed$0(t){
     var
      _aK_ = [0, cst$0, [0, caml_call1(Zone[38], t[2]), 0]],
      _aL_ = [0, caml_call1(Time[14][74], t[1]), _aK_];
     return caml_call2(Core_String[46], 0, _aL_);
    }
    var
     arg_type$2 = caml_call3(Core_Command_internal[19][1], 0, 0, of_string$2),
     _t_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, bin_shape_t$2], 0],
     _u_ = caml_call1(Bin_shape[4][1], cst_time_float_unix_src_time_f$1),
     group$0 = caml_call2(Bin_prot_Shape[2], _u_, _t_),
     _v_ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t$3 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _v_), 0),
     bin_writer_t$3 = [0, bin_size_t$2, bin_write_t$2],
     bin_reader_t$3 = [0, bin_read_t$6, bin_read_t$5],
     bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3];
    function hash$3(x){return hash$2(x);}
    var
     With_nonchronological_compare =
       [0,
        bin_shape_t$3,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$3,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$3,
        bin_t$3,
        compare$2,
        equal$2,
        t_of_sexp$2,
        sexp_of_t$2,
        hash_fold_t$2,
        hash$3],
     include$1 =
       caml_call1(Base_Pretty_printer[2], [0, module_name, to_string$2]),
     pp$2 = include$1[1],
     Zoned =
       [0,
        bin_shape_t$2,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$2,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$2,
        bin_t$2,
        zone,
        ofday,
        compare$2,
        equal$2,
        hash_fold_t$2,
        hash$2,
        sexp_repr_of_sexp,
        sexp_of_sexp_repr,
        sexp_of_t$2,
        t_of_sexp$2,
        to_time,
        create$1,
        create_local,
        of_string$2,
        to_string$2,
        to_string_trimmed$0,
        arg_type$2,
        With_nonchronological_compare,
        pp$2],
     Ofday =
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$1,
        bin_writer_t$1,
        bin_reader_t$1,
        bin_t$1,
        t_of_sexp$1,
        sexp_of_t$1,
        t_sexp_grammar$2,
        typerep_of_t$0,
        typename_of_t$0,
        symbol$21,
        symbol$22,
        symbol$23,
        symbol$24,
        symbol$25,
        symbol$26,
        equal$1,
        compare$1,
        min$1,
        max$1,
        ascending$1,
        descending$1,
        between$1,
        clamp_exn$1,
        clamp$1,
        validate_lbound$1,
        validate_ubound$1,
        validate_bound$1,
        Replace_polymorphic_compare$1,
        comparator$1,
        Map$1,
        Set$1,
        hash_fold_t$1,
        hash$1,
        hashable$1,
        Table$1,
        Hash_set$1,
        Hash_queue$1,
        Diff$1,
        pp$1,
        symbol$27,
        symbol$28,
        symbol$29,
        symbol$30,
        symbol$31,
        symbol$32,
        robustly_compare$0,
        quickcheck_generator$0,
        quickcheck_observer$0,
        quickcheck_shrinker$0,
        gen_incl$0,
        gen_uniform_incl$0,
        of_string$1,
        to_string$1,
        create$0,
        to_parts$0,
        start_of_day,
        start_of_next_day,
        approximate_end_of_day,
        to_span_since_start_of_day,
        of_span_since_start_of_day_exn,
        of_span_since_start_of_day,
        span_since_start_of_day_is_val,
        of_span_since_start_of_day_unc,
        add,
        sub,
        next$0,
        prev$0,
        diff,
        small_diff,
        to_string_trimmed,
        to_sec_string,
        of_string_iso8601_extended,
        to_millisecond_string,
        to_millisec_string,
        arg_type$1,
        now,
        Zoned],
     to_string_utc = Time[87],
     of_string_with_utc_offset = Time[85],
     occurrence = Time[83],
     to_string_iso8601_basic = Time[82],
     of_string_gen = Time[81],
     of_localized_string = Time[80],
     to_sec_string_with_zone = Time[79],
     to_sec_string$0 = Time[78],
     to_string_trimmed$1 = Time[77],
     to_string_abs_parts = Time[76],
     to_string_abs_trimmed = Time[75],
     to_string_abs = Time[74],
     of_filename_string = Time[73],
     to_filename_string = Time[72],
     utc_offset = Time[71],
     convert = Time[70],
     epoch = Time[69],
     reset_date_cache = Time[68],
     to_ofday = Time[67],
     to_date = Time[66],
     to_date_ofday_precise = Time[65],
     to_date_ofday = Time[64],
     of_date_ofday_precise = Time[63],
     of_date_ofday = Time[62],
     is_later = Time[61],
     is_earlier = Time[60],
     gen_uniform_incl$1 = Time[59],
     gen_incl$1 = Time[58],
     quickcheck_shrinker$1 = Time[57],
     quickcheck_observer$1 = Time[56],
     quickcheck_generator$1 = Time[55],
     abs_diff = Time[54],
     diff$0 = Time[53],
     sub$0 = Time[52],
     add$0 = Time[51],
     now$0 = Time[49],
     prev_multiple = Time[48],
     next_multiple = Time[47],
     Date_and_ofday = Time[46],
     validate_bound$2 = Time[45],
     validate_ubound$2 = Time[44],
     validate_lbound$2 = Time[43],
     comparator$2 = Time[42],
     clamp$2 = Time[41],
     clamp_exn$2 = Time[40],
     between$2 = Time[39],
     descending$2 = Time[38],
     ascending$2 = Time[37],
     max$2 = Time[36],
     min$2 = Time[35],
     compare$3 = Time[34],
     equal$3 = Time[33],
     symbol$33 = Time[32],
     symbol$34 = Time[31],
     symbol$35 = Time[30],
     symbol$36 = Time[29],
     symbol$37 = Time[28],
     symbol$38 = Time[27],
     of_span_since_epoch = Time[26],
     to_span_since_epoch = Time[25],
     prev$1 = Time[24],
     next$1 = Time[23],
     robustly_compare$1 = Time[22],
     symbol$39 = Time[21],
     symbol$40 = Time[20],
     symbol$41 = Time[19],
     symbol$42 = Time[18],
     symbol$43 = Time[17],
     symbol$44 = Time[16],
     Replace_polymorphic_compare$2 = Time[15],
     typename_of_t$1 = Time[12],
     typerep_of_t$1 = Time[11],
     hash$4 = Time[10],
     hash_fold_t$3 = Time[9],
     bin_t$4 = Time[8],
     bin_reader_t$4 = Time[7],
     bin_writer_t$4 = Time[6],
     bin_shape_t$4 = Time[5],
     bin_read_t$7 = Time[4],
     bin_read_t$8 = Time[3],
     bin_write_t$3 = Time[2],
     bin_size_t$3 = Time[1];
    function of_tm(tm, zone){
     var
      tm_year = tm[6],
      tm_mon = tm[5],
      tm_mday = tm[4],
      tm_hour = tm[3],
      tm_min = tm[2],
      tm_sec = tm[1],
      _aJ_ = caml_call1(Core_Month[84], tm_mon + 1 | 0),
      date = caml_call3(Core_Date[48], tm_year + 1900 | 0, _aJ_, tm_mday),
      ofday =
        caml_call7
         (Ofday[58], [0, tm_hour], [0, tm_min], [0, tm_sec], 0, 0, 0, 0);
     return caml_call3(of_date_ofday, zone, date, ofday);
    }
    function of_date_ofday_zoned(date, ofday_zoned){
     return Ofday[81][19].call(null, ofday_zoned, date);
    }
    function to_date_ofday_zoned(t, zone){
     var
      match = caml_call2(to_date_ofday, t, zone),
      ofday = match[2],
      date = match[1];
     return [0, date, Ofday[81][20].call(null, ofday, zone)];
    }
    function to_ofday_zoned(t, zone){
     var ofday = caml_call2(to_ofday, t, zone);
     return Ofday[81][20].call(null, ofday, zone);
    }
    function of_string_fix_proto(utc, str){
     try{
      var _aD_ = caml_string_get(str, 8), expect_length = 21, expect_dash = 8;
      if(caml_call2(Core_Char[53], _aD_, 45))
       caml_call3(Core[246], _c_, expect_dash, 0);
      if(203307339 <= utc){
       var _aE_ = Zone[71], _aF_ = caml_obj_tag(_aE_);
       a:
       if(250 === _aF_)
        var _aG_ = _aE_[1];
       else{
        if(246 !== _aF_ && 244 !== _aF_){var _aG_ = _aE_; break a;}
        var _aG_ = caml_call1(CamlinternalLazy[2], _aE_);
       }
       var zone = _aG_;
      }
      else
       var zone = Zone[5];
      if(caml_call2(Core_Int[84], caml_ml_string_length(str), expect_length))
       caml_call2(Core[246], _d_, 0);
      var
       _aH_ = caml_call3(Ofday[76], [0, 9], 0, str),
       _aI_ =
         caml_call3
          (of_date_ofday, zone, caml_call2(Core_Date[49], str, 0), _aH_);
      return _aI_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _aC_ = caml_call1(Base_Exn[10], exn);
      return caml_call4(Core[250], _b_, str, _aC_, 0);
     }
    }
    function to_string_fix_proto(utc, t){
     if(203307339 <= utc){
      var _aw_ = Zone[71], _ax_ = caml_obj_tag(_aw_);
      a:
      if(250 === _ax_)
       var _ay_ = _aw_[1];
      else{
       if(246 !== _ax_ && 244 !== _ax_){var _ay_ = _aw_; break a;}
       var _ay_ = caml_call1(CamlinternalLazy[2], _aw_);
      }
      var zone = _ay_;
     }
     else
      var zone = Zone[5];
     var
      match = caml_call2(to_date_ofday, t, zone),
      sec = match[2],
      date = match[1],
      _az_ = caml_call1(Ofday[77], sec),
      _aA_ = caml_call2(Core[18], cst$1, _az_),
      _aB_ = caml_call1(Core_Date[50], date);
     return caml_call2(Core[18], _aB_, _aA_);
    }
    function format(t, s, zone){
     var
      _at_ = caml_call2(Zone[23], zone, t),
      _au_ = caml_call1(Date_and_ofday[8], _at_),
      epoch_time = caml_call1(Span[89], _au_),
      _av_ = caml_call1(Core_unix[147], epoch_time);
     return caml_call2(Core_unix[151], _av_, s);
    }
    function parse(allow_trailing_input, s, fmt, zone){
     return of_tm
             (caml_call3(Core_unix[152], allow_trailing_input, fmt, s), zone);
    }
    function pause_for(span){
     var
      _ar_ = caml_call2(Span[108], Span[74], 100.),
      span$0 = caml_call2(Span[23], span, _ar_),
      _as_ = caml_call1(Span[89], span$0),
      time_remaining = caml_call1(Core_unix[155], _as_);
     return caml_call2(Core_Float[129], time_remaining, 0.)
             ? [0, -577460522, caml_call1(Span[82], time_remaining)]
             : 17724;
    }
    function pause(span){
     var span$0 = span;
     for(;;){
      var match = pause_for(span$0);
      if(typeof match === "number") return 0;
      var span$1 = match[2], span$0 = span$1;
     }
    }
    function pause_forever(param){for(;;) pause(caml_call1(Span[85], 1.));}
    function to_string$3(t){
     var _ao_ = Zone[71], _ap_ = caml_obj_tag(_ao_);
     a:
     if(250 === _ap_)
      var _aq_ = _ao_[1];
     else{
      if(246 !== _ap_ && 244 !== _ap_){var _aq_ = _ao_; break a;}
      var _aq_ = caml_call1(CamlinternalLazy[2], _ao_);
     }
     return caml_call2(to_string_abs, t, _aq_);
    }
    function ensure_colon_in_offset(offset){
     var _ak_ = caml_string_get(offset, 1);
     if(! caml_call2(Core_Char[50], _ak_, 58)){
      var _al_ = caml_string_get(offset, 2);
      if(! caml_call2(Core_Char[50], _al_, 58)){
       var offset_length = caml_ml_string_length(offset);
       if
        (!
         caml_call2(Core_Int[85], offset_length, 3)
         && ! caml_call2(Core_Int[84], offset_length, 4)){
        var
         _am_ =
           [0,
            cst$2,
            [0,
             caml_call3
              (Core_String[121], offset, offset_length - 2 | 0, offset_length),
             0]],
         _an_ =
           [0,
            caml_call3(Core_String[121], offset, 0, offset_length - 2 | 0),
            _am_];
        return caml_call2(Core_String[46], 0, _an_);
       }
       return caml_call3(Core[246], _e_, offset, 0);
      }
     }
     return offset;
    }
    var
     Time_string_not_absolute =
       [248, cst_Time_float_unix_Time_funct, runtime.caml_fresh_oo_id(0)];
    function _w_(param){
     if(param[1] !== Time_string_not_absolute)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var arg0_021 = param[2], res0_022 = caml_call1(Core[558], arg0_021);
     return [1, [0, _f_, [0, res0_022, 0]]];
    }
    caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Time_string_not_absolute, _w_);
    function of_string_gen$0(if_no_timezone, s){
     function default_zone(param){
      if(typeof if_no_timezone !== "number"){
       var zone = if_no_timezone[2];
       return zone;
      }
      if(781116926 <= if_no_timezone)
       throw caml_maybe_attach_backtrace([0, Time_string_not_absolute, s], 0);
      var _ai_ = Zone[71], _aj_ = caml_obj_tag(_ai_);
      if(250 === _aj_) return _ai_[1];
      if(246 !== _aj_ && 244 !== _aj_) return _ai_;
      return caml_call1(CamlinternalLazy[2], _ai_);
     }
     return caml_call3(of_string_gen, default_zone, Zone[70], s);
    }
    function of_string_abs(s){return of_string_gen$0(781116926, s);}
    function of_string$3(s){return of_string_gen$0(203307339, s);}
    var
     arg_type$3 =
       caml_call3(Core_Command_internal[19][1], 0, 0, of_string_abs),
     include$2 =
       caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string$3]),
     pp$3 = include$2[1],
     sexp_zone = [0, Zone[71]];
    function get_sexp_zone(param){
     var _ag_ = sexp_zone[1], _ah_ = caml_obj_tag(_ag_);
     if(250 === _ah_) return _ag_[1];
     if(246 !== _ah_ && 244 !== _ah_) return _ag_;
     return caml_call1(CamlinternalLazy[2], _ag_);
    }
    function set_sexp_zone(zone){sexp_zone[1] = [250, zone]; return 0;}
    function t_of_sexp_gen(if_no_timezone, sexp){
     try{
      a:
      if(0 === sexp[0])
       var
        datetime = sexp[1],
        _X_ = of_string_gen$0(if_no_timezone, datetime);
      else{
       var _Y_ = sexp[1];
       b:
       if(_Y_){
        var _Z_ = _Y_[1];
        if(0 === _Z_[0]){
         var ___ = _Y_[2];
         if(___){
          var _$_ = ___[1], date = _Z_[1];
          if(0 === _$_[0]){
           var _aa_ = ___[2], ofday = _$_[1];
           if(_aa_){
            var _ab_ = _aa_[1];
            if(0 !== _ab_[0]) break b;
            if(_aa_[2]) break b;
            var
             tz = _ab_[1],
             _ac_ = caml_call1(Ofday[56], ofday),
             _ad_ = caml_call1(Core_Date[22], date),
             _ae_ =
               caml_call3(of_date_ofday, caml_call1(Zone[70], tz), _ad_, _ac_);
           }
           else
            var
             _af_ = caml_call2(Core[18], cst$3, ofday),
             _ae_ =
               of_string_gen$0
                (if_no_timezone, caml_call2(Core[18], date, _af_));
           var _X_ = _ae_;
           break a;
          }
         }
        }
       }
       var _X_ = caml_call2(Core[154], cst_Time_t_of_sexp, sexp);
      }
      return _X_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] === Core[153]) throw caml_maybe_attach_backtrace(e, 0);
      var
       _V_ = caml_call1(Base_Exn[10], e),
       _W_ = caml_call2(Core[265], _h_, _V_);
      return caml_call2(Core[154], _W_, sexp);
     }
    }
    function t_of_sexp$3(sexp){
     var _S_ = sexp_zone[1], _T_ = caml_obj_tag(_S_);
     a:
     if(250 === _T_)
      var _U_ = _S_[1];
     else{
      if(246 !== _T_ && 244 !== _T_){var _U_ = _S_; break a;}
      var _U_ = caml_call1(CamlinternalLazy[2], _S_);
     }
     return t_of_sexp_gen([0, 514999069, _U_], sexp);
    }
    function t_of_sexp_abs(sexp){return t_of_sexp_gen(781116926, sexp);}
    function sexp_of_t_abs(t, zone){
     function _Q_(s){return [0, s];}
     var _R_ = caml_call2(Time[76], t, zone);
     return [1, caml_call2(Core_List[51], _R_, _Q_)];
    }
    function sexp_of_t$3(t){
     var _N_ = sexp_zone[1], _O_ = caml_obj_tag(_N_);
     a:
     if(250 === _O_)
      var _P_ = _N_[1];
     else{
      if(246 !== _O_ && 244 !== _O_){var _P_ = _N_; break a;}
      var _P_ = caml_call1(CamlinternalLazy[2], _N_);
     }
     return sexp_of_t_abs(t, _P_);
    }
    function make_comparable(opt, _J_, param){
     if(opt)
      var sth = opt[1], sexp_of_t = sth;
     else
      var sexp_of_t = sexp_of_t$3;
     if(_J_)
      var sth$0 = _J_[1], t_of_sexp = sth$0;
     else
      var t_of_sexp = t_of_sexp$3;
     var
      _K_ =
        [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, bin_shape_t$4], 0],
      _L_ = caml_call1(Bin_shape[4][1], cst_time_float_unix_src_time_f$2),
      group = caml_call2(Bin_prot_Shape[2], _L_, _K_),
      _M_ = caml_call1(Bin_shape[2][1], cst_t$4),
      bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _M_), 0),
      bin_writer_t = [0, bin_size_t$3, bin_write_t$3],
      bin_reader_t = [0, bin_read_t$8, bin_read_t$7],
      bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
      Map =
        caml_call1
         (Core_Map[131],
          [0,
           bin_size_t$3,
           bin_write_t$3,
           bin_read_t$8,
           bin_read_t$7,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator$2]),
      Set =
        caml_call1
         (Core_Set[84],
          [0,
           bin_size_t$3,
           bin_write_t$3,
           bin_read_t$8,
           bin_read_t$7,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator$2]);
     return [0, comparator$2, Map, Set];
    }
    var
     _x_ = 0,
     include$3 =
       make_comparable
        (0,
         [0,
          function(sexp){
           function _H_(param){
            var _I_ = caml_call1(Core_Float[122], sexp);
            return caml_call1(of_span_since_epoch, caml_call1(Span[82], _I_));
           }
           var match = caml_call1(Core_Option[56], _H_);
           if(! match) return t_of_sexp$3(sexp);
           var t = match[1];
           return t;
          }],
         _x_),
     comparator$3 = include$3[1],
     Map$2 = include$3[2],
     Set$2 = include$3[3];
    function _y_(param){
     var
      _C_ = caml_call1(to_span_since_epoch, epoch),
      _D_ = caml_call1(Span[89], _C_),
      _E_ = [1, [0, caml_call1(Core_Float[123], _D_), 0]],
      _F_ = caml_call1(Set$2[27], _E_),
      _G_ = caml_call1(Set$2[8], [0, epoch, 0]);
     return caml_call2(Set$2[4], _G_, _F_);
    }
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_Set_equal_Set_of_list_epoc,
      0,
      cst_time_float_unix_src_time_f$3,
      358,
      2,
      163,
      _y_);
    var
     _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, bin_shape_t$4], 0],
     _A_ = caml_call1(Bin_shape[4][1], cst_time_float_unix_src_time_f$4),
     group$1 = caml_call2(Bin_prot_Shape[2], _A_, _z_),
     _B_ = caml_call1(Bin_shape[2][1], cst_t$6),
     bin_shape_t$5 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _B_), 0),
     bin_writer_t$5 = [0, bin_size_t$3, bin_write_t$3],
     bin_reader_t$5 = [0, bin_read_t$8, bin_read_t$7],
     bin_t$5 = [0, bin_shape_t$5, bin_writer_t$5, bin_reader_t$5];
    function hash$5(x){return caml_call1(hash$4, x);}
    var
     include$4 =
       caml_call1
        (Core_Hashable[5],
         [0,
          hash_fold_t$3,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$8,
          bin_read_t$7,
          bin_shape_t$5,
          bin_writer_t$5,
          bin_reader_t$5,
          bin_t$5,
          t_of_sexp$3,
          compare$3,
          sexp_of_t$3,
          hash$5]),
     hash_fold_t$4 = include$4[1],
     hash$6 = include$4[2],
     hashable$2 = include$4[3],
     Table$2 = include$4[4],
     Hash_set$2 = include$4[5],
     Hash_queue$2 = include$4[6],
     Exposed_for_tests = [0, ensure_colon_in_offset];
    return [0,
            Span,
            Zone,
            Ofday,
            bin_size_t$3,
            bin_write_t$3,
            bin_read_t$8,
            bin_read_t$7,
            bin_shape_t$4,
            bin_writer_t$4,
            bin_reader_t$4,
            bin_t$4,
            typerep_of_t$1,
            typename_of_t$1,
            Replace_polymorphic_compare$2,
            symbol$44,
            symbol$43,
            symbol$42,
            symbol$41,
            symbol$40,
            symbol$39,
            robustly_compare$1,
            next$1,
            prev$1,
            to_span_since_epoch,
            of_span_since_epoch,
            symbol$38,
            symbol$37,
            symbol$36,
            symbol$35,
            symbol$34,
            symbol$33,
            equal$3,
            compare$3,
            min$2,
            max$2,
            ascending$2,
            descending$2,
            between$2,
            clamp_exn$2,
            clamp$2,
            validate_lbound$2,
            validate_ubound$2,
            validate_bound$2,
            Date_and_ofday,
            next_multiple,
            prev_multiple,
            now$0,
            add$0,
            sub$0,
            diff$0,
            abs_diff,
            quickcheck_generator$1,
            quickcheck_observer$1,
            quickcheck_shrinker$1,
            gen_incl$1,
            gen_uniform_incl$1,
            is_earlier,
            is_later,
            of_date_ofday,
            of_date_ofday_precise,
            to_date_ofday,
            to_date_ofday_precise,
            to_date,
            to_ofday,
            reset_date_cache,
            epoch,
            convert,
            utc_offset,
            to_filename_string,
            of_filename_string,
            to_string_abs,
            to_string_abs_trimmed,
            to_string_abs_parts,
            to_string_trimmed$1,
            to_sec_string$0,
            to_sec_string_with_zone,
            of_localized_string,
            to_string_iso8601_basic,
            occurrence,
            of_string_with_utc_offset,
            to_string_utc,
            of_tm,
            of_date_ofday_zoned,
            to_date_ofday_zoned,
            to_ofday_zoned,
            of_string_fix_proto,
            to_string_fix_proto,
            format,
            parse,
            ,
            pause,
            pause_for,
            pause_forever,
            to_string$3,
            ,
            ,
            of_string_gen$0,
            of_string_abs,
            of_string$3,
            arg_type$3,
            pp$3,
            ,
            get_sexp_zone,
            set_sexp_zone,
            ,
            t_of_sexp$3,
            t_sexp_grammar,
            t_of_sexp_abs,
            sexp_of_t_abs,
            sexp_of_t$3,
            ,
            comparator$3,
            Map$2,
            Set$2,
            hash_fold_t$4,
            hash$6,
            hashable$2,
            Table$2,
            Hash_set$2,
            Hash_queue$2,
            Exposed_for_tests];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_time_float_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_float_unix_Time_funct$0);
   var
    Time_float_unix_Time_functor =
      [0,
       function(_j_, _i_){
        var _k_ = Make(_j_, _i_), _l_ = _k_[3], _m_ = _l_[81], _n_ = _m_[26];
        return [0,
                _k_[1],
                _k_[2],
                [0,
                 _l_[1],
                 _l_[2],
                 _l_[3],
                 _l_[4],
                 _l_[5],
                 _l_[6],
                 _l_[7],
                 _l_[8],
                 _l_[9],
                 _l_[10],
                 _l_[11],
                 _l_[12],
                 _l_[13],
                 _l_[14],
                 _l_[15],
                 _l_[16],
                 _l_[17],
                 _l_[18],
                 _l_[19],
                 _l_[20],
                 _l_[21],
                 _l_[22],
                 _l_[23],
                 _l_[24],
                 _l_[25],
                 _l_[26],
                 _l_[27],
                 _l_[28],
                 _l_[29],
                 _l_[30],
                 _l_[31],
                 _l_[32],
                 _l_[33],
                 _l_[34],
                 _l_[35],
                 _l_[36],
                 _l_[37],
                 _l_[38],
                 _l_[39],
                 _l_[40],
                 _l_[41],
                 _l_[42],
                 _l_[43],
                 _l_[44],
                 _l_[45],
                 _l_[46],
                 _l_[47],
                 _l_[48],
                 _l_[49],
                 _l_[50],
                 _l_[51],
                 _l_[52],
                 _l_[53],
                 _l_[54],
                 _l_[55],
                 _l_[56],
                 _l_[57],
                 _l_[58],
                 _l_[59],
                 _l_[60],
                 _l_[61],
                 _l_[62],
                 _l_[63],
                 _l_[64],
                 _l_[65],
                 _l_[66],
                 _l_[67],
                 _l_[68],
                 _l_[69],
                 _l_[70],
                 _l_[71],
                 _l_[72],
                 _l_[73],
                 _l_[74],
                 _l_[75],
                 _l_[76],
                 _l_[77],
                 _l_[78],
                 _l_[79],
                 [0,
                  _m_[2],
                  _m_[3],
                  _m_[6],
                  _m_[5],
                  _m_[1],
                  _m_[4],
                  _m_[7],
                  _m_[8],
                  _m_[18],
                  _m_[17],
                  _m_[13],
                  _m_[14],
                  _m_[27],
                  _m_[22],
                  _m_[23],
                  _m_[24],
                  _m_[25],
                  _m_[20],
                  _m_[21],
                  _m_[10],
                  _m_[9],
                  _m_[19],
                  [0,
                   _n_[2],
                   _n_[3],
                   _n_[6],
                   _n_[5],
                   _n_[1],
                   _n_[4],
                   _n_[7],
                   _n_[8],
                   _n_[11],
                   _n_[12],
                   _n_[9],
                   _n_[10],
                   _n_[13],
                   _n_[14]]],
                 _l_[80]],
                _k_[107],
                _k_[12],
                _k_[13],
                _k_[14],
                _k_[22],
                _k_[23],
                _k_[24],
                _k_[25],
                _k_[44],
                _k_[45],
                _k_[46],
                _k_[47],
                _k_[48],
                _k_[49],
                _k_[50],
                _k_[51],
                _k_[52],
                _k_[53],
                _k_[54],
                _k_[55],
                _k_[56],
                _k_[57],
                _k_[58],
                _k_[59],
                _k_[60],
                _k_[61],
                _k_[62],
                _k_[63],
                _k_[64],
                _k_[65],
                _k_[66],
                _k_[67],
                _k_[68],
                _k_[69],
                _k_[70],
                _k_[71],
                _k_[72],
                _k_[73],
                _k_[74],
                _k_[75],
                _k_[76],
                _k_[77],
                _k_[78],
                _k_[79],
                _k_[80],
                _k_[81],
                _k_[100],
                _k_[4],
                _k_[5],
                _k_[6],
                _k_[7],
                _k_[8],
                _k_[9],
                _k_[10],
                _k_[11],
                _k_[106],
                _k_[110],
                _k_[99],
                _k_[94],
                _k_[101],
                _k_[26],
                _k_[27],
                _k_[28],
                _k_[29],
                _k_[30],
                _k_[31],
                _k_[32],
                _k_[33],
                _k_[34],
                _k_[35],
                _k_[36],
                _k_[37],
                _k_[38],
                _k_[39],
                _k_[40],
                _k_[41],
                _k_[42],
                _k_[43],
                _k_[112],
                _k_[113],
                _k_[114],
                _k_[115],
                _k_[116],
                _k_[117],
                _k_[118],
                _k_[119],
                _k_[120],
                _k_[103],
                _k_[104],
                _k_[15],
                _k_[16],
                _k_[17],
                _k_[18],
                _k_[19],
                _k_[20],
                _k_[21],
                _k_[82],
                _k_[83],
                _k_[84],
                _k_[85],
                _k_[87],
                _k_[86],
                _k_[98],
                _k_[97],
                _k_[108],
                _k_[109],
                _k_[91],
                _k_[92],
                _k_[93],
                _k_[88],
                _k_[89],
                _k_[121]];
       }];
   runtime.caml_register_global
    (76, Time_float_unix_Time_functor, cst_Time_float_unix_Time_funct$1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_float_unix
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Binable, Core__Comparable, Core__Float, Core__Hashable, Core__Map, Core__Ofday_float, Core__Set, Core__Span_float, Core__Time_float, Diffable__Atomic, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stable_witness, Time_float_unix__Time_functor, Timezone
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Time_float_unix$0 = "Time_float_unix",
    cst_t$1 = "t",
    cst_time_float_unix$0 = "time_float_unix",
    cst_time_float_unix_src_time_f$2 =
      "time_float_unix/src/time_float_unix.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_009 =
      "time_float_unix/src/time_float_unix.ml.Stable.Ofday.Zoned.V1.sexp_repr",
    Core_Ofday_float = global_data.Core__Ofday_float,
    Timezone = global_data.Timezone,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stable_witness = global_data.Stable_witness,
    Core_Float = global_data.Core__Float,
    Core_Time_float = global_data.Core__Time_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Time_float_unix_Time_functor = global_data.Time_float_unix__Time_functor,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Core_Hashable = global_data.Core__Hashable,
    Core_Map = global_data.Core__Map,
    Core_Set = global_data.Core__Set,
    Core_Comparable = global_data.Core__Comparable,
    Core_Binable = global_data.Core__Binable,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_Span_float = global_data.Core__Span_float;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_float_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_float_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_time_float_unix_src_time_f$2);
   caml_call2
    (Ppx_inline_test_lib[6], cst_time_float_unix$0, "time_float_unix.ml");
   var
    _a_ = Core_Time_float[85],
    _b_ = Core_Time_float[83],
    _c_ = Core_Time_float[84],
    _e_ = Core_Time_float[83],
    _f_ = Core_Time_float[84],
    _d_ =
      [0,
       Core_Time_float[1],
       Core_Time_float[2],
       Core_Time_float[3],
       Core_Time_float[4],
       Core_Time_float[5],
       Core_Time_float[6],
       Core_Time_float[7],
       Core_Time_float[8],
       Core_Time_float[9],
       Core_Time_float[10],
       Core_Time_float[11],
       Core_Time_float[12],
       [0,
        _c_[1],
        _c_[2],
        _c_[3],
        _c_[4],
        _c_[5],
        _c_[6],
        _c_[7],
        _c_[8],
        _c_[9],
        _c_[10],
        _c_[11],
        _c_[12],
        _c_[13],
        _c_[14],
        _c_[15],
        _c_[16],
        _c_[17],
        _c_[18],
        _c_[19],
        _c_[20],
        _c_[21],
        _c_[22],
        _c_[23],
        _c_[24],
        _c_[25],
        _c_[26],
        _c_[27],
        _c_[28],
        _c_[29],
        _c_[30],
        _c_[31],
        _c_[32],
        _c_[33],
        _c_[34],
        _c_[35],
        _c_[36],
        _c_[37],
        _c_[38],
        _c_[39],
        _c_[40],
        _c_[41],
        _c_[42],
        _c_[43],
        _c_[44],
        _c_[45],
        _c_[46],
        _c_[47],
        _c_[48],
        _c_[49],
        _c_[50],
        _c_[51],
        _c_[52],
        _c_[53],
        _c_[54],
        _c_[55],
        _c_[56],
        _c_[57],
        _c_[58],
        _c_[59],
        _c_[60],
        _c_[61],
        _c_[62],
        _c_[63],
        _c_[64],
        _c_[65],
        _c_[66],
        _c_[67],
        _c_[68],
        _c_[69],
        _c_[70],
        _c_[71],
        _c_[72],
        _c_[73],
        _c_[74],
        _c_[75],
        _c_[76],
        _c_[77],
        _c_[78],
        _c_[79],
        _c_[80],
        _c_[81],
        _c_[82],
        _c_[83],
        _c_[84],
        _c_[85],
        _c_[86],
        _c_[87],
        _c_[88],
        _c_[89],
        _c_[90],
        _c_[91],
        _c_[92],
        _c_[93],
        _c_[94],
        _c_[95],
        _c_[96],
        _c_[97],
        _c_[98],
        _c_[99],
        _c_[100],
        _c_[101],
        _c_[102],
        _c_[103],
        _c_[104],
        _c_[105],
        _c_[106],
        _c_[107],
        _c_[108],
        _c_[109],
        _c_[110],
        _c_[111],
        _c_[112],
        _c_[113],
        _c_[114],
        _c_[115],
        _c_[116],
        _c_[117]],
       [0,
        _b_[1],
        _b_[2],
        _b_[3],
        _b_[4],
        _b_[5],
        _b_[6],
        _b_[7],
        _b_[8],
        _b_[9],
        _b_[10],
        _b_[11],
        _b_[12],
        _b_[13],
        _b_[14],
        _b_[15],
        _b_[16],
        _b_[17],
        _b_[18],
        _b_[19],
        _b_[20],
        _b_[21],
        _b_[22],
        _b_[23],
        _b_[24],
        _b_[25],
        _b_[26],
        _b_[27],
        _b_[28],
        _b_[29],
        _b_[30],
        _b_[31],
        _b_[32],
        _b_[33],
        _b_[34],
        _b_[35],
        _b_[36],
        _b_[37],
        _b_[38],
        _b_[39],
        _b_[40],
        _b_[41],
        _b_[42],
        _b_[43],
        _b_[44],
        _b_[45],
        _b_[46],
        _b_[47],
        _b_[48],
        _b_[49],
        _b_[50],
        _b_[51],
        _b_[52],
        _b_[53],
        _b_[54],
        _b_[55],
        _b_[56],
        _b_[57],
        _b_[58],
        _b_[59],
        _b_[60],
        _b_[61],
        _b_[62],
        _b_[63],
        _b_[64],
        _b_[65],
        _b_[66],
        _b_[67],
        _b_[68],
        _b_[69],
        _b_[70],
        _b_[71],
        _b_[72],
        _b_[73],
        _b_[74],
        _b_[75],
        _b_[76],
        _b_[77],
        _b_[78]],
       Core_Time_float[13],
       Core_Time_float[14],
       Core_Time_float[15],
       Core_Time_float[16],
       Core_Time_float[17],
       Core_Time_float[18],
       Core_Time_float[19],
       Core_Time_float[20],
       Core_Time_float[21],
       Core_Time_float[22],
       Core_Time_float[23],
       Core_Time_float[24],
       Core_Time_float[25],
       Core_Time_float[26],
       Core_Time_float[27],
       Core_Time_float[28],
       Core_Time_float[29],
       Core_Time_float[30],
       Core_Time_float[31],
       Core_Time_float[32],
       Core_Time_float[33],
       Core_Time_float[34],
       Core_Time_float[35],
       Core_Time_float[36],
       Core_Time_float[37],
       Core_Time_float[38],
       Core_Time_float[39],
       Core_Time_float[40],
       Core_Time_float[41],
       Core_Time_float[42],
       Core_Time_float[43],
       Core_Time_float[44],
       Core_Time_float[45],
       Core_Time_float[46],
       Core_Time_float[47],
       [0,
        _a_[1],
        _a_[2],
        _a_[3],
        _a_[4],
        _a_[5],
        _a_[6],
        _a_[7],
        _a_[8],
        _a_[9],
        _a_[10],
        _a_[11],
        _a_[12],
        _a_[13],
        _a_[14],
        _a_[15],
        _a_[16],
        _a_[17],
        _a_[18],
        _a_[19],
        _a_[20],
        _a_[21],
        _a_[22],
        _a_[23],
        _a_[24],
        _a_[25],
        _a_[26],
        _a_[27]],
       Core_Time_float[48],
       Core_Time_float[49],
       Core_Time_float[50],
       Core_Time_float[51],
       Core_Time_float[52],
       Core_Time_float[53],
       Core_Time_float[54],
       Core_Time_float[55],
       Core_Time_float[56],
       Core_Time_float[57],
       Core_Time_float[58],
       Core_Time_float[59],
       Core_Time_float[60],
       Core_Time_float[61],
       Core_Time_float[62],
       Core_Time_float[63],
       Core_Time_float[64],
       Core_Time_float[65],
       Core_Time_float[66],
       Core_Time_float[67],
       Core_Time_float[68],
       Core_Time_float[69],
       Core_Time_float[70],
       Core_Time_float[71],
       Core_Time_float[72],
       Core_Time_float[73],
       Core_Time_float[74],
       Core_Time_float[75],
       Core_Time_float[76],
       Core_Time_float[77],
       Core_Time_float[78],
       Core_Time_float[79],
       Core_Time_float[80],
       Core_Time_float[99],
       Core_Time_float[81],
       Core_Time_float[114],
       Core_Time_float[82]],
    T =
      caml_call1
       (caml_call1
         (Time_float_unix_Time_functor[1],
          [0,
           Core_Time_float[1],
           Core_Time_float[2],
           Core_Time_float[3],
           Core_Time_float[4],
           Core_Time_float[5],
           Core_Time_float[6],
           Core_Time_float[7],
           Core_Time_float[8],
           Core_Time_float[9],
           Core_Time_float[10],
           Core_Time_float[11],
           Core_Time_float[12],
           [0,
            _f_[1],
            _f_[2],
            _f_[3],
            _f_[4],
            _f_[5],
            _f_[6],
            _f_[7],
            _f_[8],
            _f_[9],
            _f_[10],
            _f_[11],
            _f_[12],
            _f_[13],
            _f_[14],
            _f_[15],
            _f_[16],
            _f_[17],
            _f_[18],
            _f_[19],
            _f_[20],
            _f_[21],
            _f_[22],
            _f_[23],
            _f_[24],
            _f_[25],
            _f_[26],
            _f_[27],
            _f_[28],
            _f_[29],
            _f_[30],
            _f_[31],
            _f_[32],
            _f_[33],
            _f_[34],
            _f_[35],
            _f_[36],
            _f_[37],
            _f_[38],
            _f_[39],
            _f_[40],
            _f_[41],
            _f_[42],
            _f_[43],
            _f_[44],
            _f_[45],
            _f_[46],
            _f_[47],
            _f_[48],
            _f_[49],
            _f_[50],
            _f_[51],
            _f_[52],
            _f_[53],
            _f_[54],
            _f_[55],
            _f_[56],
            _f_[57],
            _f_[58],
            _f_[59],
            _f_[60],
            _f_[61],
            _f_[62],
            _f_[63],
            _f_[64],
            _f_[65],
            _f_[66],
            _f_[67],
            _f_[68],
            _f_[69],
            _f_[70],
            _f_[71],
            _f_[72],
            _f_[73],
            _f_[74],
            _f_[75],
            _f_[76],
            _f_[77],
            _f_[78],
            _f_[79],
            _f_[80],
            _f_[81],
            _f_[82],
            _f_[83],
            _f_[84],
            _f_[85],
            _f_[86],
            _f_[87],
            _f_[88],
            _f_[89],
            _f_[90],
            _f_[91],
            _f_[92],
            _f_[93],
            _f_[94],
            _f_[95],
            _f_[96],
            _f_[97],
            _f_[98],
            _f_[99],
            _f_[100],
            _f_[101],
            _f_[102],
            _f_[103],
            _f_[104],
            _f_[105],
            _f_[106],
            _f_[107],
            _f_[108],
            _f_[109],
            _f_[110],
            _f_[111],
            _f_[112],
            _f_[113],
            _f_[114],
            _f_[115],
            _f_[116],
            _f_[117]],
           [0,
            _e_[1],
            _e_[2],
            _e_[3],
            _e_[4],
            _e_[5],
            _e_[6],
            _e_[7],
            _e_[8],
            _e_[9],
            _e_[10],
            _e_[11],
            _e_[12],
            _e_[13],
            _e_[14],
            _e_[15],
            _e_[16],
            _e_[17],
            _e_[18],
            _e_[19],
            _e_[20],
            _e_[21],
            _e_[22],
            _e_[23],
            _e_[24],
            _e_[25],
            _e_[26],
            _e_[27],
            _e_[28],
            _e_[29],
            _e_[30],
            _e_[31],
            _e_[32],
            _e_[33],
            _e_[34],
            _e_[35],
            _e_[36],
            _e_[37],
            _e_[38],
            _e_[39],
            _e_[40],
            _e_[41],
            _e_[42],
            _e_[43],
            _e_[44],
            _e_[45],
            _e_[46],
            _e_[47],
            _e_[48],
            _e_[49],
            _e_[50],
            _e_[51],
            _e_[52],
            _e_[53],
            _e_[54],
            _e_[55],
            _e_[56],
            _e_[57],
            _e_[58],
            _e_[59],
            _e_[60],
            _e_[61],
            _e_[62],
            _e_[63],
            _e_[64],
            _e_[65],
            _e_[66],
            _e_[67],
            _e_[68],
            _e_[69],
            _e_[70],
            _e_[71],
            _e_[72],
            _e_[73],
            _e_[74],
            _e_[75],
            _e_[76],
            _e_[77],
            _e_[78]],
           Core_Time_float[13],
           Core_Time_float[14],
           Core_Time_float[15],
           Core_Time_float[16],
           Core_Time_float[17],
           Core_Time_float[18],
           Core_Time_float[19],
           Core_Time_float[20],
           Core_Time_float[48],
           Core_Time_float[49],
           Core_Time_float[50],
           Core_Time_float[21],
           Core_Time_float[22],
           Core_Time_float[23],
           Core_Time_float[24],
           Core_Time_float[25],
           Core_Time_float[26],
           Core_Time_float[27],
           Core_Time_float[28],
           Core_Time_float[29],
           Core_Time_float[30],
           Core_Time_float[31],
           Core_Time_float[32],
           Core_Time_float[33],
           Core_Time_float[34],
           Core_Time_float[35],
           Core_Time_float[36],
           Core_Time_float[37],
           Core_Time_float[38],
           Core_Time_float[39],
           Core_Time_float[40],
           Core_Time_float[41],
           Core_Time_float[42],
           Core_Time_float[43],
           Core_Time_float[44],
           Core_Time_float[45],
           Core_Time_float[46],
           Core_Time_float[47]]),
        _d_),
    include =
      caml_call1
       (Diffable_Atomic[3],
        [0,
         T[70],
         T[59],
         T[60],
         T[51],
         T[52],
         T[53],
         T[54],
         T[55],
         T[56],
         T[57],
         T[58]]),
    Diff = include[1],
    _g_ = Core_Time_float[5],
    _h_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _g_], 0],
    _i_ =
      caml_call1
       (Bin_shape[4][1], "time_float_unix/src/time_float_unix.ml:23:2"),
    group = caml_call2(Bin_prot_Shape[2], _i_, _h_),
    _j_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _j_), 0),
    bin_size_t = Core_Time_float[1],
    bin_write_t = Core_Time_float[2],
    bin_writer_t = [0, bin_size_t, bin_write_t],
    bin_read_t = Core_Time_float[4],
    bin_read_t$0 = Core_Time_float[3],
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    compare = Core_Time_float[32],
    hash_fold_t = Core_Time_float[9],
    func = Core_Time_float[10],
    cst_time_float_unix_src_time_f$0 =
      "time_float_unix/src/time_float_unix.ml.Stable.Ofday.Zoned.V1.Bin_repr.t",
    cst_zone = "zone",
    cst_ofday = "ofday",
    cst_t = cst_t$1,
    cst_time_float_unix_src_time_f =
      "time_float_unix/src/time_float_unix.ml:134:10",
    cst_t$0 = cst_t$1,
    _B_ =
      [0,
       [0,
        [0, " 490573c3397b4fe37e8ade0086fb4759 ", [0, ""]],
        [0, 4007, 4026, 4064]]],
    _C_ = [0, 4007, 4017, 4065],
    _H_ = [0, 3937, 3945, 4065],
    _I_ = [0, 4007, 4065, 4065],
    _J_ = [0, 3937, 3945, 4065],
    cst_time_float_unix_src_time_f$1 = cst_time_float_unix_src_time_f$2,
    cst_time_float_unix = cst_time_float_unix$0,
    cst_Time_float_unix = cst_Time_float_unix$0;
   function hash(x){return caml_call1(func, x);}
   var sexp_of_t = T[60];
   function t_of_sexp(sexp){
    try{var float$0 = caml_call1(Core_Float[122], sexp);}
    catch(_T_){return caml_call1(T[59], sexp);}
    var _S_ = caml_call1(Core_Time_float[84][82], float$0);
    return caml_call1(Core_Time_float[24], _S_);
   }
   var
    include$0 =
      caml_call1
       (Core_Hashable[5],
        [0,
         hash_fold_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         compare,
         sexp_of_t,
         hash]),
    Table = include$0[4],
    Hash_set = include$0[5],
    Hash_queue = include$0[6],
    include$1 = Core_Time_float[84],
    bin_size_t$0 = include$1[1],
    bin_write_t$0 = include$1[2],
    bin_read_t$1 = include$1[3],
    bin_read_t$2 = include$1[4],
    bin_shape_t$0 = include$1[5],
    bin_writer_t$0 = include$1[6],
    bin_reader_t$0 = include$1[7],
    bin_t$0 = include$1[8],
    t_of_sexp$0 = include$1[9],
    sexp_of_t$0 = include$1[10],
    t_sexp_grammar = include$1[11],
    typerep_of_t = include$1[12],
    typename_of_t = include$1[13],
    Parts = include$1[14],
    symbol = include$1[15],
    symbol$0 = include$1[16],
    symbol$1 = include$1[17],
    symbol$2 = include$1[18],
    symbol$3 = include$1[19],
    symbol$4 = include$1[20],
    equal = include$1[21],
    compare$0 = include$1[22],
    min = include$1[23],
    max = include$1[24],
    ascending = include$1[25],
    descending = include$1[26],
    between = include$1[27],
    clamp_exn = include$1[28],
    clamp = include$1[29],
    Replace_polymorphic_compare = include$1[30],
    comparator = include$1[31],
    Map = include$1[32],
    Set = include$1[33],
    is_positive = include$1[34],
    is_non_negative = include$1[35],
    is_negative = include$1[36],
    is_non_positive = include$1[37],
    sign = include$1[38],
    validate_lbound = include$1[39],
    validate_ubound = include$1[40],
    validate_bound = include$1[41],
    validate_positive = include$1[42],
    validate_non_negative = include$1[43],
    validate_negative = include$1[44],
    validate_non_positive = include$1[45],
    hash_fold_t$0 = include$1[46],
    hash$0 = include$1[47],
    hashable = include$1[48],
    Table$0 = include$1[49],
    Hash_set$0 = include$1[50],
    Hash_queue$0 = include$1[51],
    Diff$0 = include$1[52],
    pp = include$1[53],
    symbol$5 = include$1[54],
    symbol$6 = include$1[55],
    symbol$7 = include$1[56],
    symbol$8 = include$1[57],
    symbol$9 = include$1[58],
    symbol$10 = include$1[59],
    robustly_compare = include$1[60],
    quickcheck_generator = include$1[61],
    quickcheck_observer = include$1[62],
    quickcheck_shrinker = include$1[63],
    gen_incl = include$1[64],
    gen_uniform_incl = include$1[65],
    to_string = include$1[66],
    of_string = include$1[67],
    nanosecond = include$1[68],
    microsecond = include$1[69],
    millisecond = include$1[70],
    second = include$1[71],
    minute = include$1[72],
    hour = include$1[73],
    day = include$1[74],
    robust_comparison_tolerance = include$1[75],
    zero = include$1[76],
    create = include$1[77],
    to_parts = include$1[78],
    of_ns = include$1[79],
    of_us = include$1[80],
    of_ms = include$1[81],
    of_sec = include$1[82],
    of_min = include$1[83],
    of_hr = include$1[84],
    of_day = include$1[85],
    to_ns = include$1[86],
    to_us = include$1[87],
    to_ms = include$1[88],
    to_sec = include$1[89],
    to_min = include$1[90],
    to_hr = include$1[91],
    to_day = include$1[92],
    of_int_ns = include$1[93],
    of_int_us = include$1[94],
    of_int_ms = include$1[95],
    of_int_sec = include$1[96],
    of_int_min = include$1[97],
    of_int_hr = include$1[98],
    of_int_day = include$1[99],
    of_int32_seconds = include$1[100],
    of_int63_seconds = include$1[101],
    to_int63_seconds_round_down_ex = include$1[102],
    to_proportional_float = include$1[103],
    symbol$11 = include$1[104],
    symbol$12 = include$1[105],
    abs = include$1[106],
    neg = include$1[107],
    scale = include$1[108],
    symbol$13 = include$1[109],
    symbol$14 = include$1[110],
    next = include$1[111],
    prev = include$1[112],
    to_short_string = include$1[113],
    to_unit_of_time = include$1[114],
    of_unit_of_time = include$1[115],
    to_string_hum = include$1[116],
    randomize = include$1[117],
    arg_type = T[1][118],
    Span =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       typerep_of_t,
       typename_of_t,
       Parts,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       Replace_polymorphic_compare,
       comparator,
       Map,
       Set,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       validate_lbound,
       validate_ubound,
       validate_bound,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       hash_fold_t$0,
       hash$0,
       hashable,
       Table$0,
       Hash_set$0,
       Hash_queue$0,
       Diff$0,
       pp,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       robustly_compare,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       to_string,
       of_string,
       nanosecond,
       microsecond,
       millisecond,
       second,
       minute,
       hour,
       day,
       robust_comparison_tolerance,
       zero,
       create,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       of_sec,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       to_sec,
       to_min,
       to_hr,
       to_day,
       of_int_ns,
       of_int_us,
       of_int_ms,
       of_int_sec,
       of_int_min,
       of_int_hr,
       of_int_day,
       of_int32_seconds,
       of_int63_seconds,
       to_int63_seconds_round_down_ex,
       to_proportional_float,
       symbol$11,
       symbol$12,
       abs,
       neg,
       scale,
       symbol$13,
       symbol$14,
       next,
       prev,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum,
       randomize,
       arg_type],
    include$2 = Core_Time_float[83],
    bin_size_t$1 = include$2[1],
    bin_write_t$1 = include$2[2],
    bin_read_t$3 = include$2[3],
    bin_read_t$4 = include$2[4],
    bin_shape_t$1 = include$2[5],
    bin_writer_t$1 = include$2[6],
    bin_reader_t$1 = include$2[7],
    bin_t$1 = include$2[8],
    t_of_sexp$1 = include$2[9],
    sexp_of_t$1 = include$2[10],
    t_sexp_grammar$0 = include$2[11],
    typerep_of_t$0 = include$2[12],
    typename_of_t$0 = include$2[13],
    symbol$15 = include$2[14],
    symbol$16 = include$2[15],
    symbol$17 = include$2[16],
    symbol$18 = include$2[17],
    symbol$19 = include$2[18],
    symbol$20 = include$2[19],
    equal$0 = include$2[20],
    compare$1 = include$2[21],
    min$0 = include$2[22],
    max$0 = include$2[23],
    ascending$0 = include$2[24],
    descending$0 = include$2[25],
    between$0 = include$2[26],
    clamp_exn$0 = include$2[27],
    clamp$0 = include$2[28],
    validate_lbound$0 = include$2[29],
    validate_ubound$0 = include$2[30],
    validate_bound$0 = include$2[31],
    Replace_polymorphic_compare$0 = include$2[32],
    comparator$0 = include$2[33],
    Map$0 = include$2[34],
    Set$0 = include$2[35],
    hash_fold_t$1 = include$2[36],
    hash$1 = include$2[37],
    hashable$0 = include$2[38],
    Table$1 = include$2[39],
    Hash_set$1 = include$2[40],
    Hash_queue$1 = include$2[41],
    Diff$1 = include$2[42],
    pp$0 = include$2[43],
    symbol$21 = include$2[44],
    symbol$22 = include$2[45],
    symbol$23 = include$2[46],
    symbol$24 = include$2[47],
    symbol$25 = include$2[48],
    symbol$26 = include$2[49],
    robustly_compare$0 = include$2[50],
    quickcheck_generator$0 = include$2[51],
    quickcheck_observer$0 = include$2[52],
    quickcheck_shrinker$0 = include$2[53],
    gen_incl$0 = include$2[54],
    gen_uniform_incl$0 = include$2[55],
    of_string$0 = include$2[56],
    to_string$0 = include$2[57],
    create$0 = include$2[58],
    to_parts$0 = include$2[59],
    start_of_day = include$2[60],
    start_of_next_day = include$2[61],
    approximate_end_of_day = include$2[62],
    to_span_since_start_of_day = include$2[63],
    of_span_since_start_of_day_exn = include$2[64],
    of_span_since_start_of_day = include$2[65],
    span_since_start_of_day_is_val = include$2[66],
    of_span_since_start_of_day_unc = include$2[67],
    add = include$2[68],
    sub = include$2[69],
    next$0 = include$2[70],
    prev$0 = include$2[71],
    diff = include$2[72],
    small_diff = include$2[73],
    to_string_trimmed = include$2[74],
    to_sec_string = include$2[75],
    of_string_iso8601_extended = include$2[76],
    to_millisecond_string = include$2[77],
    to_millisec_string = include$2[78],
    now = T[3][81],
    arg_type$0 = T[3][79],
    Index = Core_Time_float[85][12],
    _k_ = T[2],
    arg_type$1 = _k_[74],
    init = _k_[73],
    initialized_zones = _k_[72],
    local = _k_[71],
    find_exn = _k_[70],
    find = _k_[69],
    hashable$1 = _k_[64],
    hash$2 = _k_[63],
    hash_fold_t$2 = _k_[62],
    comparator$1 = _k_[59],
    validate_bound$1 = _k_[57],
    validate_ubound$1 = _k_[56],
    validate_lbound$1 = _k_[55],
    clamp$1 = _k_[54],
    clamp_exn$1 = _k_[53],
    between$1 = _k_[52],
    descending$1 = _k_[51],
    ascending$1 = _k_[50],
    max$1 = _k_[49],
    min$1 = _k_[48],
    compare$2 = _k_[47],
    equal$1 = _k_[46],
    symbol$27 = _k_[45],
    symbol$28 = _k_[44],
    symbol$29 = _k_[43],
    symbol$30 = _k_[42],
    symbol$31 = _k_[41],
    symbol$32 = _k_[40],
    pp$1 = _k_[39],
    to_string$1 = _k_[38],
    of_string$1 = _k_[37],
    sexp_of_t$2 = _k_[36],
    t_of_sexp$2 = _k_[35],
    bin_t$2 = _k_[34],
    bin_reader_t$2 = _k_[33],
    bin_writer_t$2 = _k_[32],
    bin_shape_t$2 = _k_[31],
    bin_read_t$5 = _k_[30],
    bin_read_t$6 = _k_[29],
    bin_write_t$2 = _k_[28],
    bin_size_t$2 = _k_[27],
    t_sexp_grammar$1 = _k_[26],
    prev_clock_shift = _k_[25],
    next_clock_shift = _k_[24],
    date_and_ofday_of_absolute_tim = _k_[23],
    absolute_time_of_date_and_ofda = _k_[22],
    abbreviation = _k_[21],
    index_next_clock_shift_amount_ = _k_[20],
    index_next_clock_shift_time_ex = _k_[19],
    index_has_next_clock_shift = _k_[18],
    index_prev_clock_shift_amount_ = _k_[17],
    index_prev_clock_shift_time_ex = _k_[16],
    index_has_prev_clock_shift = _k_[15],
    index_abbreviation_exn = _k_[14],
    index_offset_from_utc_exn = _k_[13],
    index_of_date_and_ofday = _k_[12],
    index = _k_[11],
    reset_transition_cache = _k_[9],
    digest = _k_[8],
    original_filename = _k_[7],
    name = _k_[6],
    utc = _k_[5],
    of_utc_offset_explicit_name = _k_[4],
    of_utc_offset = _k_[3],
    likely_machine_zones = _k_[2],
    input_tz_file = _k_[1],
    t_sexp_grammar$2 = T[4],
    typerep_of_t$1 = T[5],
    typename_of_t$1 = T[6],
    bin_size_t$3 = T[51],
    bin_write_t$3 = T[52],
    bin_read_t$7 = T[53],
    bin_read_t$8 = T[54],
    bin_shape_t$3 = T[55],
    bin_writer_t$3 = T[56],
    bin_reader_t$3 = T[57],
    bin_t$3 = T[58],
    t_of_sexp$3 = T[59],
    sexp_of_t$3 = T[60],
    compare$3 = T[71],
    comparator$2 = T[82],
    Map$1 = T[83],
    Set$1 = T[84],
    hash_fold_t$3 = T[85],
    hash$3 = T[86],
    t_of_sexp_abs = T[108],
    sexp_of_t_abs = T[109],
    include$3 =
      caml_call1
       (Diffable_Atomic[3],
        [0,
         T[70],
         T[59],
         T[60],
         T[51],
         T[52],
         T[53],
         T[54],
         T[55],
         T[56],
         T[57],
         T[58]]),
    Diff$2 = include$3[1],
    stable_witness = Stable_witness[6],
    Diff$3 = Map$1[2],
    compare$4 = Map$1[3],
    map = Map$1[38],
    t_of_sexp$4 = Map$1[44],
    sexp_of_t$4 = Map$1[45],
    bin_shape_t$4 = Map$1[46],
    bin_size_t$4 = Map$1[47],
    bin_write_t$4 = Map$1[48],
    bin_read_t$9 = Map$1[49],
    bin_read_t$10 = Map$1[50],
    bin_writer_t$4 = Map$1[51],
    bin_reader_t$4 = Map$1[52],
    bin_t$4 = Map$1[53];
   function stable_witness$0(param){return Stable_witness[6];}
   var
    Diff$4 = Set$1[2],
    compare$5 = Set$1[3],
    t_of_sexp$5 = Set$1[27],
    sexp_of_t$5 = Set$1[28],
    bin_size_t$5 = Set$1[29],
    bin_write_t$5 = Set$1[30],
    bin_read_t$11 = Set$1[31],
    bin_read_t$12 = Set$1[32],
    bin_shape_t$5 = Set$1[33],
    bin_writer_t$5 = Set$1[34],
    bin_reader_t$5 = Set$1[35],
    bin_t$5 = Set$1[36],
    stable_witness$1 = Stable_witness[6];
   function sexp_of_t$6(t){return caml_call2(sexp_of_t_abs, t, T[2][5]);}
   var
    Map$2 =
      caml_call1
       (Core_Map[131],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         t_of_sexp$3,
         sexp_of_t$6,
         comparator$2]),
    Set$2 =
      caml_call1
       (Core_Set[84],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         t_of_sexp$3,
         sexp_of_t$6,
         comparator$2]),
    include$4 = Core_Time_float[86][4][2],
    hash_fold_t$4 = include$4[1],
    hash$4 = include$4[2],
    bin_size_t$6 = include$4[5],
    bin_write_t$6 = include$4[6],
    bin_read_t$13 = include$4[7],
    bin_read_t$14 = include$4[8],
    bin_shape_t$6 = include$4[9],
    bin_writer_t$6 = include$4[10],
    bin_reader_t$6 = include$4[11],
    bin_t$6 = include$4[12],
    compare$6 = include$4[13],
    t_of_sexp$6 = include$4[14],
    sexp_of_t$7 = include$4[15],
    comparator$3 = T[82],
    include$5 =
      caml_call1
       (Core_Comparable[26][1][1],
        [0,
         bin_size_t$6,
         bin_write_t$6,
         bin_read_t$13,
         bin_read_t$14,
         bin_shape_t$6,
         bin_writer_t$6,
         bin_reader_t$6,
         bin_t$6,
         compare$6,
         t_of_sexp$6,
         sexp_of_t$7,
         comparator$3]),
    Map$3 = include$5[1],
    Set$3 = include$5[2],
    hash_fold_t$5 = T[3][80][11],
    func$0 = T[3][80][12];
   function hash$5(x){return caml_call1(func$0, x);}
   var
    compare$7 = T[3][80][23][11],
    _l_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_ofday, Core_Ofday_float[79][1][5]],
         [0, [0, cst_zone, Timezone[70][1][5]], 0]]),
    _m_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _l_], 0],
    _n_ = caml_call1(Bin_shape[4][1], cst_time_float_unix_src_time_f),
    group$0 = caml_call2(Bin_prot_Shape[2], _n_, _m_),
    _o_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _o_), 0);
   function bin_size_t$7(param){
    var
     v2 = param[2],
     v1 = param[1],
     _Q_ = caml_call1(Core_Ofday_float[79][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _Q_),
     _R_ = caml_call1(Timezone[70][1][1], v2);
    return caml_call2(Bin_prot_Common[23], size, _R_);
   }
   function bin_write_t$7(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_Ofday_float[79][1][2], buf, pos, v1);
    return caml_call3(Timezone[70][1][2], buf, pos$0, v2);
   }
   function bin_read_t$15(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_time_float_unix_src_time_f$0,
             pos_ref[1]);
   }
   function bin_read_t$16(buf, pos_ref){
    var
     v_ofday = caml_call2(Core_Ofday_float[79][1][3], buf, pos_ref),
     v_zone = caml_call2(Timezone[70][1][3], buf, pos_ref);
    return [0, v_ofday, v_zone];
   }
   function to_binable(t){
    var _P_ = caml_call1(T[3][80][21], t);
    return [0, caml_call1(T[3][80][20], t), _P_];
   }
   function of_binable(repr){
    return caml_call2(T[3][80][18], repr[1], repr[2]);
   }
   var
    include$6 =
      caml_call1
       (caml_call1
         (Core_Binable[16][1][1],
          [0,
           bin_shape_t$7,
           bin_size_t$7,
           bin_write_t$7,
           bin_read_t$16,
           bin_read_t$15]),
        [0, to_binable, of_binable]),
    bin_size_t$8 = include$6[1],
    bin_write_t$8 = include$6[2],
    bin_read_t$17 = include$6[3],
    bin_read_t$18 = include$6[4],
    bin_shape_t$8 = include$6[5],
    bin_writer_t$7 = include$6[6],
    bin_reader_t$7 = include$6[7],
    bin_t$7 = include$6[8],
    stable_witness$2 =
      caml_call3(Stable_witness[2], Stable_witness[6], of_binable, to_binable);
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _A_ =
       function(param){
        var
         _M_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$8),
         _N_ = caml_call1(Bin_shape[19][4], _M_);
        caml_call1(Core[32], _N_);
        var _O_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _O_);
       },
     _D_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _C_,
         _B_),
     _E_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _D_], 0],
     _F_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _G_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_time_float_unix_src_time_f$1,
      161,
      _J_,
      _I_,
      _H_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _G_,
      _F_,
      0,
      0,
      Inline_test_config,
      _E_,
      _A_);
   }
   function sexp_of_t$8(t){
    var
     arg1_011 = caml_call1(T[3][80][21], t),
     arg0_010 = caml_call1(T[3][80][20], t),
     res0_012 = caml_call1(Core_Ofday_float[79][1][13], arg0_010),
     res1_013 = caml_call1(Timezone[70][1][14], arg1_011);
    return [1, [0, res0_012, [0, res1_013, 0]]];
   }
   function t_of_sexp$7(sexp_008){
    a:
    {
     if(1 === sexp_008[0]){
      var _K_ = sexp_008[1];
      if(_K_){
       var _L_ = _K_[2];
       if(_L_ && ! _L_[2]){
        var
         arg1_005 = _L_[1],
         arg0_004 = _K_[1],
         res0_006 = caml_call1(Core_Ofday_float[79][1][12], arg0_004),
         res1_007 = caml_call1(Timezone[70][1][13], arg1_005),
         match = [0, res0_006, res1_007];
        break a;
       }
      }
     }
     var
      match =
        caml_call3(Sexplib0_Sexp_conv_error[4], error_source_009, 2, sexp_008);
    }
    var zone = match[2], ofday = match[1];
    return caml_call2(T[3][80][18], ofday, zone);
   }
   var
    parse = T[114],
    format = T[113],
    pause_forever = T[112],
    interruptible_pause = T[111],
    pause = T[110],
    sexp_of_t_abs$0 = T[109],
    t_of_sexp_abs$0 = T[108],
    of_string_abs = T[106],
    of_string_fix_proto = T[105],
    to_string_fix_proto = T[104],
    to_ofday_zoned = T[103],
    to_date_ofday_zoned = T[102],
    of_date_ofday_zoned = T[101],
    of_tm = T[100],
    robustly_compare$1 = T[99],
    symbol$33 = T[98],
    symbol$34 = T[97],
    symbol$35 = T[96],
    symbol$36 = T[95],
    symbol$37 = T[94],
    symbol$38 = T[93],
    set_sexp_zone = T[92],
    get_sexp_zone = T[91],
    hashable$2 = T[87],
    hash$6 = T[86],
    hash_fold_t$6 = T[85],
    comparator$4 = T[82],
    validate_bound$2 = T[81],
    validate_ubound$2 = T[80],
    validate_lbound$2 = T[79],
    clamp$2 = T[78],
    clamp_exn$2 = T[77],
    between$2 = T[76],
    descending$2 = T[75],
    ascending$2 = T[74],
    max$2 = T[73],
    min$2 = T[72],
    compare$8 = T[71],
    equal$2 = T[70],
    symbol$39 = T[69],
    symbol$40 = T[68],
    symbol$41 = T[67],
    symbol$42 = T[66],
    symbol$43 = T[65],
    symbol$44 = T[64],
    pp$2 = T[63],
    sexp_of_t$9 = T[60],
    t_of_sexp$8 = T[59],
    bin_t$8 = T[58],
    bin_reader_t$8 = T[57],
    bin_writer_t$8 = T[56],
    bin_shape_t$9 = T[55],
    bin_read_t$19 = T[54],
    bin_read_t$20 = T[53],
    bin_write_t$9 = T[52],
    bin_size_t$9 = T[51],
    arg_type$2 = T[50],
    to_string_utc = T[49],
    of_string_with_utc_offset = T[48],
    occurrence = T[47],
    to_string_iso8601_basic = T[46],
    of_localized_string = T[45],
    to_sec_string_with_zone = T[44],
    to_sec_string$0 = T[43],
    to_string_trimmed$0 = T[42],
    to_string_abs_parts = T[41],
    to_string_abs_trimmed = T[40],
    to_string_abs = T[39],
    of_filename_string = T[38],
    to_filename_string = T[37],
    utc_offset = T[36],
    convert = T[35],
    epoch = T[34],
    reset_date_cache = T[33],
    to_ofday = T[32],
    to_date = T[31],
    to_date_ofday_precise = T[30],
    to_date_ofday = T[29],
    of_date_ofday_precise = T[28],
    of_date_ofday = T[27],
    is_later = T[26],
    is_earlier = T[25],
    gen_uniform_incl$1 = T[24],
    gen_incl$1 = T[23],
    quickcheck_shrinker$1 = T[22],
    quickcheck_observer$1 = T[21],
    quickcheck_generator$1 = T[20],
    abs_diff = T[19],
    diff$0 = T[18],
    sub$0 = T[17],
    add$0 = T[16],
    now$0 = T[15],
    prev_multiple = T[14],
    next_multiple = T[13],
    of_span_since_epoch = T[11],
    to_span_since_epoch = T[10],
    prev$1 = T[9],
    next$1 = T[8],
    typename_of_t$2 = T[6],
    typerep_of_t$2 = T[5],
    t_sexp_grammar$3 = T[4],
    to_string$2 = T[62],
    of_string$2 = T[61],
    of_string_gen = T[107];
   caml_call1(Ppx_inline_test_lib[7], cst_time_float_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_float_unix);
   var
    _p_ = Timezone[70],
    _q_ = _p_[2][1],
    _r_ = _p_[1],
    _s_ = Core_Ofday_float[79][1],
    _t_ = _s_[16],
    _u_ = Core_Span_float[118],
    _v_ = _u_[3],
    _w_ = _u_[2],
    _x_ = _u_[1],
    _y_ = Set$2[2],
    _z_ = Map$2[2],
    Time_float_unix =
      [0,
       Span,
       [0,
        input_tz_file,
        likely_machine_zones,
        of_utc_offset,
        of_utc_offset_explicit_name,
        utc,
        name,
        original_filename,
        digest,
        reset_transition_cache,
        Index,
        index,
        index_of_date_and_ofday,
        index_offset_from_utc_exn,
        index_abbreviation_exn,
        index_has_prev_clock_shift,
        index_prev_clock_shift_time_ex,
        index_prev_clock_shift_amount_,
        index_has_next_clock_shift,
        index_next_clock_shift_time_ex,
        index_next_clock_shift_amount_,
        abbreviation,
        absolute_time_of_date_and_ofda,
        date_and_ofday_of_absolute_tim,
        next_clock_shift,
        prev_clock_shift,
        t_sexp_grammar$1,
        bin_size_t$2,
        bin_write_t$2,
        bin_read_t$6,
        bin_read_t$5,
        bin_shape_t$2,
        bin_writer_t$2,
        bin_reader_t$2,
        bin_t$2,
        t_of_sexp$2,
        sexp_of_t$2,
        of_string$1,
        to_string$1,
        pp$1,
        symbol$32,
        symbol$31,
        symbol$30,
        symbol$29,
        symbol$28,
        symbol$27,
        equal$1,
        compare$2,
        min$1,
        max$1,
        ascending$1,
        descending$1,
        between$1,
        clamp_exn$1,
        clamp$1,
        validate_lbound$1,
        validate_ubound$1,
        validate_bound$1,
        T[2][58],
        comparator$1,
        T[2][60],
        T[2][61],
        hash_fold_t$2,
        hash$2,
        hashable$1,
        T[2][65],
        T[2][66],
        T[2][67],
        T[2][68],
        find,
        find_exn,
        local,
        initialized_zones,
        init,
        arg_type$1],
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$1,
        bin_writer_t$1,
        bin_reader_t$1,
        bin_t$1,
        t_of_sexp$1,
        sexp_of_t$1,
        t_sexp_grammar$0,
        typerep_of_t$0,
        typename_of_t$0,
        symbol$15,
        symbol$16,
        symbol$17,
        symbol$18,
        symbol$19,
        symbol$20,
        equal$0,
        compare$1,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        validate_lbound$0,
        validate_ubound$0,
        validate_bound$0,
        Replace_polymorphic_compare$0,
        comparator$0,
        Map$0,
        Set$0,
        hash_fold_t$1,
        hash$1,
        hashable$0,
        Table$1,
        Hash_set$1,
        Hash_queue$1,
        Diff$1,
        pp$0,
        symbol$21,
        symbol$22,
        symbol$23,
        symbol$24,
        symbol$25,
        symbol$26,
        robustly_compare$0,
        quickcheck_generator$0,
        quickcheck_observer$0,
        quickcheck_shrinker$0,
        gen_incl$0,
        gen_uniform_incl$0,
        of_string$0,
        to_string$0,
        create$0,
        to_parts$0,
        start_of_day,
        start_of_next_day,
        approximate_end_of_day,
        to_span_since_start_of_day,
        of_span_since_start_of_day_exn,
        of_span_since_start_of_day,
        span_since_start_of_day_is_val,
        of_span_since_start_of_day_unc,
        add,
        sub,
        next$0,
        prev$0,
        diff,
        small_diff,
        to_string_trimmed,
        to_sec_string,
        of_string_iso8601_extended,
        to_millisecond_string,
        to_millisec_string,
        arg_type$0,
        T[3][80],
        now],
       t_sexp_grammar$3,
       typerep_of_t$2,
       typename_of_t$2,
       Core_Time_float[13],
       next$1,
       prev$1,
       to_span_since_epoch,
       of_span_since_epoch,
       Core_Time_float[44],
       next_multiple,
       prev_multiple,
       now$0,
       add$0,
       sub$0,
       diff$0,
       abs_diff,
       quickcheck_generator$1,
       quickcheck_observer$1,
       quickcheck_shrinker$1,
       gen_incl$1,
       gen_uniform_incl$1,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       epoch,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$0,
       to_sec_string$0,
       to_sec_string_with_zone,
       of_localized_string,
       to_string_iso8601_basic,
       occurrence,
       of_string_with_utc_offset,
       to_string_utc,
       arg_type$2,
       bin_size_t$9,
       bin_write_t$9,
       bin_read_t$20,
       bin_read_t$19,
       bin_shape_t$9,
       bin_writer_t$8,
       bin_reader_t$8,
       bin_t$8,
       t_of_sexp$8,
       sexp_of_t$9,
       of_string$2,
       to_string$2,
       pp$2,
       symbol$44,
       symbol$43,
       symbol$42,
       symbol$41,
       symbol$40,
       symbol$39,
       equal$2,
       compare$8,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       comparator$4,
       T[83],
       T[84],
       hash_fold_t$6,
       hash$6,
       hashable$2,
       Table,
       Hash_set,
       Hash_queue,
       get_sexp_zone,
       set_sexp_zone,
       symbol$38,
       symbol$37,
       symbol$36,
       symbol$35,
       symbol$34,
       symbol$33,
       robustly_compare$1,
       of_tm,
       of_date_ofday_zoned,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       of_string_fix_proto,
       of_string_abs,
       of_string_gen,
       t_of_sexp_abs$0,
       sexp_of_t_abs$0,
       pause,
       interruptible_pause,
       pause_forever,
       format,
       parse,
       T[115],
       Diff,
       [0,
        [0,
         hash_fold_t$3,
         hash$3,
         typerep_of_t$1,
         typename_of_t$1,
         t_sexp_grammar$2,
         stable_witness,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$3,
         t_of_sexp$3,
         sexp_of_t$3,
         comparator$2,
         [0,
          bin_shape_t$4,
          bin_size_t$4,
          bin_write_t$4,
          bin_read_t$9,
          bin_read_t$10,
          bin_writer_t$4,
          bin_reader_t$4,
          bin_t$4,
          compare$4,
          t_of_sexp$4,
          sexp_of_t$4,
          map,
          [0,
           Diff$3[9],
           Diff$3[10],
           Diff$3[1],
           Diff$3[2],
           Diff$3[3],
           Diff$3[4],
           Diff$3[5],
           Diff$3[6],
           Diff$3[7],
           Diff$3[8],
           Diff$3[11],
           Diff$3[12],
           Diff$3[13]],
          stable_witness$0],
         [0,
          bin_size_t$5,
          bin_write_t$5,
          bin_read_t$11,
          bin_read_t$12,
          bin_shape_t$5,
          bin_writer_t$5,
          bin_reader_t$5,
          bin_t$5,
          compare$5,
          t_of_sexp$5,
          sexp_of_t$5,
          [0,
           Diff$4[9],
           Diff$4[10],
           Diff$4[1],
           Diff$4[2],
           Diff$4[3],
           Diff$4[4],
           Diff$4[5],
           Diff$4[6],
           Diff$4[7],
           Diff$4[8],
           Diff$4[11],
           Diff$4[12],
           Diff$4[13]],
          stable_witness$1],
         Diff$2],
        [0,
         [0,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$7,
          bin_read_t$8,
          bin_shape_t$3,
          bin_writer_t$3,
          bin_reader_t$3,
          bin_t$3,
          compare$3,
          t_of_sexp$3,
          sexp_of_t$6,
          comparator$2,
          [0,
           Map$2[46],
           Map$2[47],
           Map$2[48],
           Map$2[49],
           Map$2[50],
           Map$2[51],
           Map$2[52],
           Map$2[53],
           Map$2[3],
           Map$2[44],
           Map$2[45],
           Map$2[38],
           [0,
            _z_[9],
            _z_[10],
            _z_[1],
            _z_[2],
            _z_[3],
            _z_[4],
            _z_[5],
            _z_[6],
            _z_[7],
            _z_[8],
            _z_[11],
            _z_[12],
            _z_[13]]],
          [0,
           Set$2[29],
           Set$2[30],
           Set$2[31],
           Set$2[32],
           Set$2[33],
           Set$2[34],
           Set$2[35],
           Set$2[36],
           Set$2[3],
           Set$2[27],
           Set$2[28],
           [0,
            _y_[9],
            _y_[10],
            _y_[1],
            _y_[2],
            _y_[3],
            _y_[4],
            _y_[5],
            _y_[6],
            _y_[7],
            _y_[8],
            _y_[11],
            _y_[12],
            _y_[13]]]],
         [0,
          hash_fold_t$4,
          hash$4,
          bin_size_t$6,
          bin_write_t$6,
          bin_read_t$13,
          bin_read_t$14,
          bin_shape_t$6,
          bin_writer_t$6,
          bin_reader_t$6,
          bin_t$6,
          compare$6,
          t_of_sexp$6,
          sexp_of_t$7,
          comparator$3,
          Map$3,
          Set$3]],
        [0,
         [0,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$7,
          bin_read_t$8,
          bin_shape_t$3,
          bin_writer_t$3,
          bin_reader_t$3,
          bin_t$3,
          compare$3,
          t_of_sexp_abs,
          sexp_of_t$3,
          comparator$2]],
        [0,
         [0,
          _x_[13],
          _x_[14],
          _x_[15],
          _x_[16],
          _x_[4],
          _x_[5],
          _x_[6],
          _x_[7],
          _x_[8],
          _x_[9],
          _x_[10],
          _x_[11],
          _x_[12],
          _x_[1],
          _x_[2],
          _x_[17]],
         [0,
          _w_[13],
          _w_[14],
          _w_[15],
          _w_[3],
          _w_[16],
          _w_[4],
          _w_[5],
          _w_[6],
          _w_[7],
          _w_[8],
          _w_[9],
          _w_[10],
          _w_[11],
          _w_[12],
          _w_[1],
          _w_[2],
          _w_[17]],
         [0,
          _v_[13],
          _v_[14],
          _v_[15],
          _v_[16],
          _v_[17],
          _v_[3],
          _v_[18],
          _v_[4],
          _v_[5],
          _v_[6],
          _v_[7],
          _v_[8],
          _v_[9],
          _v_[10],
          _v_[11],
          _v_[12],
          _v_[1],
          _v_[2],
          _v_[19]]],
        [0,
         [0,
          _s_[10],
          _s_[11],
          _s_[14],
          _s_[15],
          _s_[1],
          _s_[2],
          _s_[3],
          _s_[4],
          _s_[5],
          _s_[6],
          _s_[7],
          _s_[8],
          _s_[9],
          _s_[12],
          _s_[13],
          [0,
           _t_[9],
           _t_[10],
           _t_[1],
           _t_[2],
           _t_[3],
           _t_[4],
           _t_[5],
           _t_[6],
           _t_[7],
           _t_[8],
           _t_[11],
           _t_[12],
           _t_[13]]],
         [0,
          [0,
           hash_fold_t$5,
           hash$5,
           stable_witness$2,
           bin_size_t$8,
           bin_write_t$8,
           bin_read_t$17,
           bin_read_t$18,
           bin_shape_t$8,
           bin_writer_t$7,
           bin_reader_t$7,
           bin_t$7,
           compare$7,
           t_of_sexp$7,
           sexp_of_t$8]]],
        [0,
         [0,
          _r_[11],
          _r_[12],
          _r_[15],
          _r_[16],
          _r_[1],
          _r_[2],
          _r_[3],
          _r_[4],
          _r_[5],
          _r_[6],
          _r_[7],
          _r_[8],
          _r_[9],
          _r_[13],
          _r_[14],
          _r_[19]],
         [0,
          [0,
           _q_[2],
           _q_[3],
           _q_[4],
           _q_[5],
           _q_[6],
           _q_[7],
           _q_[8],
           _q_[9],
           _q_[10],
           _q_[11],
           _q_[12]]]]]];
   runtime.caml_register_global(50, Time_float_unix, cst_Time_float_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
