// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Multipart_form_lwt
//# unitInfo: Requires: Lwt, Lwt_stream, Multipart_form, Stdlib__Buffer, Stdlib__Hashtbl, Stdlib__Queue, Stdlib__Result
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Result = global_data.Stdlib__Result,
    Lwt = global_data.Lwt,
    Multipart_form = global_data.Multipart_form,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Queue = global_data.Stdlib__Queue,
    _a_ = [1, [0, 3854881, "Invalid multipart/form"]];
   function stream(opt, identify, stream, content_type){
    if(opt) var sth = opt[1], bounds = sth; else var bounds = 10;
    var
     match = caml_call1(Lwt_stream[4], 0),
     push = match[2],
     output = match[1],
     q = caml_call1(Stdlib_Queue[2], 0),
     r = [0, 0],
     tbl = caml_call2(Stdlib_Hashtbl[1], 0, 16);
    function emitters(header){
     r[1]++;
     var id = r[1];
     caml_call2(Stdlib_Queue[4], [0, 16379, [0, header, id]], q);
     return [0,
             function(data){
              return caml_call2
                      (Stdlib_Queue[4], [0, 758940234, [0, id, data]], q);
             },
             id];
    }
    var parse = caml_call2(Multipart_form[9], emitters, content_type);
    function go(param){
     for(;;){
      try{var val = caml_call1(Stdlib_Queue[7], q);}
      catch(_C_){
       var _w_ = caml_wrap_exception(_C_);
       if(_w_ !== Stdlib_Queue[1]) throw caml_maybe_attach_backtrace(_w_, 0);
       var
        _x_ =
          function(data){
           if(data)
            var s = data[1], data$0 = [0, -976970511, s];
           else
            var data$0 = 3456156;
           var match = caml_call1(parse, data$0);
           if(typeof match === "number") return go(0);
           if(781116926 <= match[1]){
            caml_call1(push, 0);
            return caml_call1(Lwt[4], _a_);
           }
           var t = match[2];
           function client_id_of_id(id){
            var client_id = caml_call2(Stdlib_Hashtbl[6], tbl, id)[1];
            return client_id;
           }
           caml_call1(push, 0);
           var _D_ = [0, caml_call2(Multipart_form[7], client_id_of_id, t)];
           return caml_call1(Lwt[4], _D_);
          },
        _y_ = caml_call1(Lwt_stream[21], stream);
       return caml_call2(Lwt[33][1], _y_, _x_);
      }
      if(758940234 <= val[1]){
       var _z_ = val[2], match = _z_[2], id = _z_[1];
       if(match){
        var
         data = match[1],
         emitter = caml_call2(Stdlib_Hashtbl[6], tbl, id)[3],
         _A_ = function(param){return go(0);},
         _B_ =
           caml_call2
            (caml_get_public_method(emitter, -899608102, 1), emitter, data);
        return caml_call2(Lwt[33][1], _B_, _A_);
       }
       var emitter$0 = caml_call2(Stdlib_Hashtbl[6], tbl, id)[3];
       caml_call1(caml_get_public_method(emitter$0, -933029960, 2), emitter$0);
      }
      else{
       var
        match$0 = val[2],
        id$0 = match$0[2],
        header = match$0[1],
        client_id = caml_call1(identify, header),
        match$1 = caml_call1(Lwt_stream[7], bounds),
        bounded_emitter = match$1[2],
        stream$0 = match$1[1];
       caml_call3
        (Stdlib_Hashtbl[5],
         tbl,
         id$0,
         [0, client_id, stream$0, bounded_emitter]);
       caml_call1(push, [0, [0, client_id, header, stream$0]]);
      }
     }
    }
    return [0, [0, -796721133, go(0)], output];
   }
   function of_stream_to_tbl(s, content_type){
    var id = [0, -1];
    function identify(header){id[1]++; return id[1];}
    var
     _m_ = stream(0, identify, s, content_type),
     parts = _m_[2],
     t = _m_[1][2],
     parts_tbl = caml_call2(Stdlib_Hashtbl[1], 0, 16);
    function consume_part(param){
     var
      part_stream = param[3],
      id = param[1],
      buf = caml_call1(Stdlib_Buffer[1], 4096);
     function _s_(param){
      var _v_ = caml_call1(Stdlib_Buffer[2], buf);
      caml_call3(Stdlib_Hashtbl[5], parts_tbl, id, _v_);
      return caml_call1(Lwt[4], 0);
     }
     var
      _t_ = caml_call1(Stdlib_Buffer[16], buf),
      _u_ = caml_call2(Lwt_stream[49], _t_, part_stream);
     return caml_call2(Lwt[33][1], _u_, _s_);
    }
    function _n_(param){
     var res = param[1];
     function _q_(tree){return [0, tree, parts_tbl];}
     var _r_ = caml_call2(Stdlib_Result[8], _q_, res);
     return caml_call1(Lwt[4], _r_);
    }
    var
     _o_ = caml_call2(Lwt_stream[51], consume_part, parts),
     _p_ = caml_call2(Lwt[13], t, _o_);
    return caml_call2(Lwt[33][1], _p_, _n_);
   }
   function of_stream_to_tree(s, content_type){
    function _h_(res){
     function _j_(param){
      var
       parts_tbl = param[2],
       tree = param[1],
       _l_ = caml_call1(Stdlib_Hashtbl[6], parts_tbl);
      return caml_call2(Multipart_form[7], _l_, tree);
     }
     var _k_ = caml_call2(Stdlib_Result[8], _j_, res);
     return caml_call1(Lwt[4], _k_);
    }
    var _i_ = of_stream_to_tbl(s, content_type);
    return caml_call2(Lwt[33][1], _i_, _h_);
   }
   function of_stream_to_list(s, content_type){
    function _b_(res){
     function _d_(param){
      var parts_tbl = param[2], tree = param[1], _f_ = 0;
      function _g_(k, b, a){return [0, [0, k, b], a];}
      var assoc = caml_call3(Stdlib_Hashtbl[14], _g_, parts_tbl, _f_);
      return [0, tree, assoc];
     }
     var _e_ = caml_call2(Stdlib_Result[8], _d_, res);
     return caml_call1(Lwt[4], _e_);
    }
    var _c_ = of_stream_to_tbl(s, content_type);
    return caml_call2(Lwt[33][1], _c_, _b_);
   }
   var Multipart_form_lwt = [0, stream, of_stream_to_list, of_stream_to_tree];
   runtime.caml_register_global(8, Multipart_form_lwt, "Multipart_form_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtdWx0aXBhcnRfZm9ybV9sd3QuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInN0cmVhbSIsIm9wdCIsImlkZW50aWZ5IiwiY29udGVudF90eXBlIiwic3RoIiwiYm91bmRzIiwicHVzaCIsIm91dHB1dCIsInEiLCJyIiwidGJsIiwiZW1pdHRlcnMiLCJoZWFkZXIiLCJpZCIsImRhdGEiLCJwYXJzZSIsImdvIiwicyIsImRhdGEkMCIsInQiLCJjbGllbnRfaWRfb2ZfaWQiLCJjbGllbnRfaWQiLCJlbWl0dGVyIiwiZW1pdHRlciQwIiwiaWQkMCIsImJvdW5kZWRfZW1pdHRlciIsInN0cmVhbSQwIiwib2Zfc3RyZWFtX3RvX3RibCIsInBhcnRzIiwicGFydHNfdGJsIiwiY29uc3VtZV9wYXJ0IiwicGFydF9zdHJlYW0iLCJidWYiLCJyZXMiLCJ0cmVlIiwib2Zfc3RyZWFtX3RvX3RyZWUiLCJvZl9zdHJlYW1fdG9fbGlzdCIsImsiLCJiIiwiYSIsImFzc29jIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvbXVsdGlwYXJ0X2Zvcm0tbHd0L211bHRpcGFydF9mb3JtX2x3dC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7WUFHSUEsT0FBU0MsS0FBY0MsVUFBU0YsUUFBT0c7SUFDekMsR0FEV0YsU0FBU0csTUFBVEgsUUFBQUksU0FBU0QsY0FBVEM7SUFDUTtLQUFBLFFBQUE7S0FBUEM7S0FBUkM7S0FDQUMsSUFBSTtLQUVGQztLQUlGQyxNQUFNO2FBQ05DLFNBQVNDO0tBTFBIO1NBTUFJLEtBTkFKO0tBT0osMkNBRldHLFFBQ1BDLE1BUkZMO0tBVUY7c0JBQU1NO2NBQVEsT0FIaEI7MkRBQ01ELElBRUVDLFFBVkpOO2FBVTJDO2FBRnpDSztJQUUrQztJQUN6QyxJQUFSRSxRQUFRLDhCQUpSSixVQVRxQ1I7YUFjakNhO0tBQ047TUFBQSxJQUFNLFVBQUEsNEJBYkpSOzs7O09BNkJFOzttQkFDUU07V0FDUixHQURRQTtnQkFDd0JHLElBRHhCSCxTQUNKSSx5QkFBNEJEOztnQkFBNUJDO1dBQ0UsWUFBQSxXQXJCUkgsT0FvQk1HO3lDQUVXLE9BckJiRjs7WUE2QkUsV0ExQ0VWO1lBMENGLE9BQUE7O2VBUElhO1dBQ0osU0FBSUMsZ0JBQWdCUDtZQUNsQixJQUFJUSxZQUFrQiw4QkE5QjlCWCxLQTZCMEJHO1lBRWxCLE9BRElRO1dBQ0s7V0FDWCxXQXZDRWY7V0F3Q1MsY0FBSSw4QkFKWGMsaUJBREFEO1dBS08sT0FBQTtVQUd1QztRQWJ0RCxNQUFBLDJCQS9CNEJuQjtPQWdDeEIsT0FBQTs7O3lDQVBDYTs7UUFETDtTQUZjQztTQUNKUSxVQUFVLDhCQWZ0QlosS0FpQk9HO1NBREwsc0JBQWdDLE9BVjlCRyxNQVVtQztTQUFyQztXQUFBO29DQURVTSx5QkFBQUEsU0FESVI7UUFFUSxPQUFBOztXQUVaUyxZQUFVLDhCQWxCdEJiLEtBaUJPRztPQUVMLFdBQUEsdUJBRFVVLDJCQUFBQTs7O09BVE07O1FBRExDO1FBQVJaO1FBQ0NTLFlBQVksV0FqQkduQixVQWdCaEJVO1FBRTJCLFVBQUEsMEJBbEJ6QlA7UUFrQk9vQjtRQUFSQztPQUNKOztTQVhGaEI7U0FRYWM7YUFDUEgsV0FDQUssVUFBUUQ7T0FFWixXQW5CTW5CLGNBZ0JGZSxXQUREVCxRQUVDYzs7O0lBMEJtRDtJQUM3RCwyQkEvQlFWLFFBYkpUO0dBNENvQjtZQUd0Qm9CLGlCQUFpQlYsR0FBRWQ7SUFFVixJQUFMVTtJQUNKLFNBRkVYLFNBRUVVLFFBREFDLGdCQUFBQSxNQUdDO0lBQ2U7S0FBQSxNQXREcEJiLFVBaURFRSxVQURlZSxHQUFFZDtLQU1QeUI7S0FBSFQ7S0FDUFUsWUFBWTtJQUNoQixTQUFJQztLQUNRO01BRGFDO01BQVBsQjtNQUNabUIsTUFBTTs7TUFFZSxVQUFBLDZCQUZyQkE7TUFFSiw4QkFKRUgsV0FDY2hCO01BR2hCLE9BQUE7S0FDYTtLQUZHO01BQUEsTUFBQSw4QkFEWm1CO01BQ0osTUFBQSxnQ0FGdUJEO0tBRWlDLE9BQUE7O0lBRzFEO0tBQXNELElBQUtFO2tCQUM3QkMsTUFBUSxXQUFSQSxNQVAxQkwsV0FPbUQ7S0FBekMsVUFBQSxrQ0FENkNJO0tBQzdDLE9BQUE7SUFBOEM7SUFEakQ7S0FBQSxNQUFBLDJCQUxQSCxjQUZVRjtLQU9kLE1BQUEsb0JBUFdUO0lBTzJDLE9BQUE7R0FDTTtZQUUxRGdCLGtCQUFrQmxCLEdBQUVkO0lBQ3RCLGFBQXdDOEI7O01BRTFCO09BQVlKO09BQU5LO09BQXdCLE1BQUEsOEJBQWxCTDtNQUFjLE9BQUEsbUNBQXBCSztLQUFzRDtLQUF2RSxVQUFBLGtDQUZxQ0Q7S0FFckMsT0FBQTtJQUEyRTtJQUY5RSxVQWpCRU4saUJBZ0JrQlYsR0FBRWQ7SUFDYyxPQUFBO0dBRTBDO1lBRTVFaUMsa0JBQWtCbkIsR0FBRWQ7SUFDdEIsYUFBd0M4Qjs7TUFHbkMsSUFBWUosc0JBQU5LO21CQUMwQkcsR0FBRUMsR0FBRUMsR0FBSyxlQUFURixHQUFFQyxJQUFFQyxHQUFnQjtNQUF0QyxJQUFSQyxRQUFRLG9DQURGWDtNQUVWLFdBRklLLE1BQ0FNO0tBQ1U7S0FIbEIsVUFBQSxrQ0FGcUNQO0tBRXJDLE9BQUE7SUFJSztJQU5SLFVBdEJFTixpQkFxQmtCVixHQUFFZDtJQUNjLE9BQUE7R0FNNUI7Z0NBNUVOSCxRQXFFQW9DLG1CQUxBRDs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIE11bHRpcGFydF9mb3JtXG5vcGVuIEx3dC5JbmZpeFxuXG5sZXQgc3RyZWFtID8oYm91bmRzID0gMTApIH5pZGVudGlmeSBzdHJlYW0gY29udGVudF90eXBlID1cbiAgbGV0IG91dHB1dCwgcHVzaCA9IEx3dF9zdHJlYW0uY3JlYXRlICgpIGluXG4gIGxldCBxID0gUXVldWUuY3JlYXRlICgpIGluXG4gIGxldCBmcmVzaF9pZCA9XG4gICAgbGV0IHIgPSByZWYgMCBpblxuICAgIGZ1biAoKSAtPlxuICAgICAgaW5jciByIDtcbiAgICAgICFyIGluXG4gIGxldCB0YmwgPSBIYXNodGJsLmNyZWF0ZSAweDEwIGluXG4gIGxldCBlbWl0dGVycyBoZWFkZXIgPVxuICAgIGxldCBpZCA9IGZyZXNoX2lkICgpIGluXG4gICAgUXVldWUucHVzaCAoYElkIChoZWFkZXIsIGlkKSkgcSA7XG4gICAgKChmdW4gZGF0YSAtPiBRdWV1ZS5wdXNoIChgRGF0YSAoaWQsIGRhdGEpKSBxKSwgaWQpIGluXG4gIGxldCBwYXJzZSA9IE11bHRpcGFydF9mb3JtLnBhcnNlIH5lbWl0dGVycyBjb250ZW50X3R5cGUgaW5cbiAgbGV0IHJlYyBnbyAoKSA9XG4gICAgbWF0Y2ggUXVldWUucG9wIHEgd2l0aFxuICAgIHwgYElkIChoZWFkZXIsIGlkKSAtPlxuICAgICAgICBsZXQgY2xpZW50X2lkID0gaWRlbnRpZnkgaGVhZGVyIGluXG4gICAgICAgIGxldCBzdHJlYW0sIGJvdW5kZWRfZW1pdHRlciA9IEx3dF9zdHJlYW0uY3JlYXRlX2JvdW5kZWQgYm91bmRzIGluXG4gICAgICAgIEhhc2h0YmwuYWRkIHRibCBpZCAoY2xpZW50X2lkLCBzdHJlYW0sIGJvdW5kZWRfZW1pdHRlcikgO1xuICAgICAgICBwdXNoIChTb21lIChjbGllbnRfaWQsIGhlYWRlciwgc3RyZWFtKSkgO1xuICAgICAgICBnbyAoKVxuICAgIHwgYERhdGEgKGlkLCBTb21lIGRhdGEpIC0+XG4gICAgICAgIGxldCBfLCBfLCBlbWl0dGVyID0gSGFzaHRibC5maW5kIHRibCBpZCBpblxuICAgICAgICBlbWl0dGVyI3B1c2ggZGF0YSA+Pj0gZnVuICgpIC0+IGdvICgpXG4gICAgfCBgRGF0YSAoaWQsIE5vbmUpIC0+XG4gICAgICAgIGxldCBfLCBfLCBlbWl0dGVyID0gSGFzaHRibC5maW5kIHRibCBpZCBpblxuICAgICAgICBlbWl0dGVyI2Nsb3NlIDtcbiAgICAgICAgZ28gKClcbiAgICB8IGV4Y2VwdGlvbiBRdWV1ZS5FbXB0eSAtPiAoXG4gICAgICAgICgqIG90aGVyd2lzZSwgY29udGludWUgcGFyc2luZyAodGh1cyBhZGRpbmcgZWxlbWVudHMgdG8gdGhlIHF1ZXVlKSAqKVxuICAgICAgICBMd3Rfc3RyZWFtLmdldCBzdHJlYW1cbiAgICAgICAgPj49IGZ1biBkYXRhIC0+XG4gICAgICAgIGxldCBkYXRhID0gbWF0Y2ggZGF0YSB3aXRoIFNvbWUgcyAtPiBgU3RyaW5nIHMgfCBOb25lIC0+IGBFb2YgaW5cbiAgICAgICAgbWF0Y2ggcGFyc2UgZGF0YSB3aXRoXG4gICAgICAgIHwgYENvbnRpbnVlIC0+IGdvICgpXG4gICAgICAgIHwgYERvbmUgdCAtPlxuICAgICAgICAgICAgbGV0IGNsaWVudF9pZF9vZl9pZCBpZCA9XG4gICAgICAgICAgICAgIGxldCBjbGllbnRfaWQsIF8sIF8gPSBIYXNodGJsLmZpbmQgdGJsIGlkIGluXG4gICAgICAgICAgICAgIGNsaWVudF9pZCBpblxuICAgICAgICAgICAgcHVzaCBOb25lIDtcbiAgICAgICAgICAgIEx3dC5yZXR1cm4gKE9rIChtYXAgY2xpZW50X2lkX29mX2lkIHQpKVxuICAgICAgICB8IGBGYWlsIF8gLT5cbiAgICAgICAgICAgIHB1c2ggTm9uZSA7XG4gICAgICAgICAgICBMd3QucmV0dXJuIChFcnJvciAoYE1zZyBcIkludmFsaWQgbXVsdGlwYXJ0L2Zvcm1cIikpKSBpblxuICAoYFBhcnNlIChnbyAoKSksIG91dHB1dClcblxuKCogb25seSB1c2VkIGludGVybmFsbHkgdG8gaW1wbGVtZW50IG9mX3N0cmVhbV90b197dHJlZSxsaXN0fSAqKVxubGV0IG9mX3N0cmVhbV90b190YmwgcyBjb250ZW50X3R5cGUgPVxuICBsZXQgaWRlbnRpZnkgPVxuICAgIGxldCBpZCA9IHJlZiAoLTEpIGluXG4gICAgZnVuIF9oZWFkZXIgLT5cbiAgICAgIGluY3IgaWQgO1xuICAgICAgIWlkIGluXG4gIGxldCBgUGFyc2UgdCwgcGFydHMgPSBzdHJlYW0gfmlkZW50aWZ5IHMgY29udGVudF90eXBlIGluXG4gIGxldCBwYXJ0c190YmwgPSBIYXNodGJsLmNyZWF0ZSAweDEwIGluXG4gIGxldCBjb25zdW1lX3BhcnQgKGlkLCBfLCBwYXJ0X3N0cmVhbSkgPVxuICAgIGxldCBidWYgPSBCdWZmZXIuY3JlYXRlIDQwOTYgaW5cbiAgICBMd3Rfc3RyZWFtLml0ZXIgKEJ1ZmZlci5hZGRfc3RyaW5nIGJ1ZikgcGFydF9zdHJlYW0gPj49IGZ1biAoKSAtPlxuICAgIEhhc2h0YmwuYWRkIHBhcnRzX3RibCBpZCAoQnVmZmVyLmNvbnRlbnRzIGJ1ZikgO1xuICAgIEx3dC5yZXR1cm4gKCkgaW5cbiAgTHd0LmJvdGggdCAoTHd0X3N0cmVhbS5pdGVyX3MgY29uc3VtZV9wYXJ0IHBhcnRzKSA+Pj0gZnVuIChyZXMsICgpKSAtPlxuICBMd3QucmV0dXJuIEBAIFJlc3VsdC5tYXAgKGZ1biB0cmVlIC0+ICh0cmVlLCBwYXJ0c190YmwpKSByZXNcblxubGV0IG9mX3N0cmVhbV90b190cmVlIHMgY29udGVudF90eXBlID1cbiAgb2Zfc3RyZWFtX3RvX3RibCBzIGNvbnRlbnRfdHlwZSA+Pj0gZnVuIHJlcyAtPlxuICBMd3QucmV0dXJuXG4gIEBAIFJlc3VsdC5tYXAgKGZ1biAodHJlZSwgcGFydHNfdGJsKSAtPiBtYXAgKEhhc2h0YmwuZmluZCBwYXJ0c190YmwpIHRyZWUpIHJlc1xuXG5sZXQgb2Zfc3RyZWFtX3RvX2xpc3QgcyBjb250ZW50X3R5cGUgPVxuICBvZl9zdHJlYW1fdG9fdGJsIHMgY29udGVudF90eXBlID4+PSBmdW4gcmVzIC0+XG4gIEx3dC5yZXR1cm5cbiAgQEAgUmVzdWx0Lm1hcFxuICAgICAgIChmdW4gKHRyZWUsIHBhcnRzX3RibCkgLT5cbiAgICAgICAgIGxldCBhc3NvYyA9IEhhc2h0YmwuZm9sZCAoZnVuIGsgYiBhIC0+IChrLCBiKSA6OiBhKSBwYXJ0c190YmwgW10gaW5cbiAgICAgICAgICh0cmVlLCBhc3NvYykpXG4gICAgICAgcmVzXG4iXX0=
