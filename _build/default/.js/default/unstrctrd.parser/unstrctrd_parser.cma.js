// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Unstrctrd_parser
//# unitInfo: Requires: Angstrom, Stdlib, Stdlib__Bytes, Unstrctrd
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Invalid_unstructured_form$2 = "Invalid unstructured form",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Angstrom = global_data.Angstrom,
    Unstrctrd = global_data.Unstrctrd,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    cst_Invalid_unstructured_form$1 = cst_Invalid_unstructured_form$2,
    cst_Invalid_unstructured_form$0 = cst_Invalid_unstructured_form$2,
    cst_Invalid_unstructured_form = cst_Invalid_unstructured_form$2;
   function unstrctrd(buf){
    var lexbuf = caml_call1(Unstrctrd[19], 0);
    function read(continue$0, buffer){
     function _m_(m0){
      function _n_(curr_pos0){
       var curr_pos0$0 = curr_pos0 - lexbuf[4] | 0;
       function _o_(m1){
        function _p_(curr_pos1){
         var curr_pos1$0 = curr_pos1 - lexbuf[4] | 0;
         if(0 < (curr_pos1$0 - curr_pos0$0 | 0)){
          var
           _q_ =
             function(param){
              if(param) return caml_call2(Angstrom[58], Angstrom[50], m0);
              try{var _A_ = caml_call1(continue$0, 0); return _A_;}
              catch(_B_){
               return caml_call1(Angstrom[52], cst_Invalid_unstructured_form);
              }
             };
          return caml_call2(Angstrom[53], Angstrom[1], _q_);
         }
         function _r_(len){
          var saved = lexbuf[6] - curr_pos0$0 | 0, rest = len - saved | 0;
          if(0 === rest){
           var
            _s_ =
              function(param){
               if(param){
                var
                 _w_ = caml_call1(Angstrom[22], len),
                 _x_ = caml_call2(Angstrom[58], _w_, m1);
                return caml_call2(Angstrom[47], _x_, m0);
               }
               try{var _y_ = caml_call1(continue$0, 0); return _y_;}
               catch(_z_){
                return caml_call1
                        (Angstrom[52], cst_Invalid_unstructured_form$0);
               }
              };
           return caml_call2(Angstrom[53], Angstrom[1], _s_);
          }
          function _t_(src){
           var
            len =
              caml_call2
               (Stdlib[16], rest, runtime.caml_ml_bytes_length(buffer));
           caml_call5(Stdlib_Bytes[12], src, saved, buffer, 0, len);
           var _v_ = caml_call1(continue$0, len);
           return caml_call2(Angstrom[47], _v_, m1);
          }
          var _u_ = caml_call1(Angstrom[3], len);
          return caml_call2(Angstrom[53], _u_, _t_);
         }
         return caml_call2(Angstrom[53], Angstrom[79], _r_);
        }
        return caml_call2(Angstrom[53], Angstrom[78], _p_);
       }
       return caml_call1(Angstrom[45], _o_);
      }
      return caml_call2(Angstrom[53], Angstrom[78], _n_);
     }
     return caml_call1(Angstrom[45], _m_);
    }
    var
     blit_to_bytes = Stdlib_Bytes[11],
     Buffer = [0, blit_to_bytes, buf],
     return$0 = Angstrom[51];
    function bind(x, f){
     function _i_(x){
      try{var _k_ = caml_call1(f, x); return _k_;}
      catch(_l_){
       var _j_ = caml_wrap_exception(_l_);
       if(_j_[1] === Stdlib[7])
        return caml_call1(Angstrom[52], cst_Invalid_unstructured_form$1);
       throw caml_maybe_attach_backtrace(_j_, 0);
      }
     }
     return caml_call2(Angstrom[53], x, _i_);
    }
    var
     fail = Angstrom[52],
     Monad = [0, return$0, bind, fail, read],
     State = caml_call1(caml_call1(Unstrctrd[18], Buffer), Monad);
    function trailer(v){
     function _e_(curr_pos){
      function _f_(available){
       var
        curr_pos$0 = curr_pos - lexbuf[4] | 0,
        saved = lexbuf[6] - curr_pos$0 | 0,
        _g_ = caml_call1(Angstrom[51], v),
        _h_ =
          saved <= available
           ? caml_call1(Angstrom[22], saved)
           : caml_call1(Angstrom[51], 0);
       return caml_call2(Angstrom[58], _h_, _g_);
      }
      return caml_call2(Angstrom[53], Angstrom[79], _f_);
     }
     return caml_call2(Angstrom[53], Angstrom[78], _e_);
    }
    function _a_(lex_abs_pos){
     lexbuf[4] = lex_abs_pos;
     var
      _b_ = caml_call1(Unstrctrd[20], Angstrom[51]),
      _c_ = caml_call2(State[2], 0, lexbuf),
      _d_ = caml_call2(Angstrom[53], _c_, trailer);
     return caml_call2(Angstrom[53], _d_, _b_);
    }
    return caml_call2(Angstrom[53], Angstrom[78], _a_);
   }
   var Unstrctrd_parser = [0, unstrctrd];
   runtime.caml_register_global(7, Unstrctrd_parser, "Unstrctrd_parser");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1bnN0cmN0cmRfcGFyc2VyLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJ1bnN0cmN0cmQiLCJidWYiLCJsZXhidWYiLCJyZWFkIiwiY29udGludWUkMCIsImJ1ZmZlciIsIm0wIiwiY3Vycl9wb3MwIiwiY3Vycl9wb3MwJDAiLCJtMSIsImN1cnJfcG9zMSIsImN1cnJfcG9zMSQwIiwibGVuIiwic2F2ZWQiLCJyZXN0Iiwic3JjIiwiYmxpdF90b19ieXRlcyIsInJldHVybiQwIiwiYmluZCIsIngiLCJmIiwiZmFpbCIsInRyYWlsZXIiLCJ2IiwiY3Vycl9wb3MiLCJhdmFpbGFibGUiLCJjdXJyX3BvcyQwIiwibGV4X2Fic19wb3MiXSwic291cmNlcyI6WyIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi91bnN0cmN0cmQvcGFyc2VyL3Vuc3RyY3RyZF9wYXJzZXIubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7WUE2QklBLFVBQVVDO0lBQ0MsSUE1QlBDLFNBNEJPO2FBQ1RDLEtBQUtDLFlBQVNDO2tCQTNCTEM7bUJBQ0NDO09BQ1osSUFBSUMsY0FEUUQsWUFIUkw7b0JBS09PO3FCQUNDQztTQUNaLElBQUlDLGNBRFFELFlBTlJSO2lCQU9BUyxjQUhBSDs7OztjQU1pQixVQVByQixPQUFBLHVDQURXRjtjQVVNLElBQU0sVUFBQSxXQWlCaEJGLGdCQWpCZ0I7O2VBQXFCLE9BQUE7O2FBQWtDO1VBRnpELE9BQUE7O3NCQUdJUTtVQUNsQixJQUFJQyxRQWRQWCxZQUlBTSxpQkFpQktNLE9BUmdCRixNQUNkQzttQkFPRkM7Ozs7ZUFIZ0I7Z0JBQ0U7aUJBQUEsTUFBQSx5QkFORkY7aUJBTUMsTUFBQSw4QkFkZkg7Z0JBRlgsT0FBQSw4QkFEV0g7O2VBa0JZLElBQU0sVUFBQSxXQVN0QkYsZ0JBVHNCOztnQkFBcUIsT0FBQTs7O2NBQWtDO1dBRjNELE9BQUE7O3VCQUlRVztXQUNkO1lBQU5IO2NBQU07NEJBRlZFLG1DQVFPVDtXQUxQLDZCQUZ3QlUsS0FSdEJGLE9BZUtSLFdBTkhPO1dBRUgsVUFBQSxXQUlIUixZQU5NUTtXQWpCYixPQUFBLDhCQURXSDtVQW9CcUI7VUFIdkIsVUFBQSx3QkFUZ0JHO1VBU0ksT0FBQTtTQUdHO1NBWlgsT0FBQTtRQVlhO1FBbkIxQixPQUFBO09BbUIwQjtPQXBCM0IsT0FBQTtNQW9CMkI7TUF0QjFCLE9BQUE7S0FzQjBCO0tBdkIzQixPQUFBO0lBMkI2QztJQUNsQztLQUVkSTtLQUZjLGFBRWRBLGVBTE1mO0tBWU5nQjthQUNBQyxLQUFLQyxHQUFFQztrQkFDV0Q7TUFBSyxJQUFJLFVBQUEsV0FEcEJDLEdBQ1dELElBQVM7Ozs7UUFBc0IsT0FBQTs7O0tBQXlDO0tBQTVFLE9BQUEseUJBRFRBO0lBQ3NGO0lBTjlFO0tBT2JFO0tBUGEsWUFJYkosVUFDQUMsTUFFQUcsTUFiRmxCOzthQWtCQW1CLFFBQVFDO2tCQUNFQzttQkFDTUM7T0FDbEI7UUFBSUMsYUFGUUYsV0FoRFJ0QjtRQW1EQVcsUUFuREFYLFlBa0RBd0I7UUFFMkQsTUFBQSx5QkFMckRIOztVQUlOVixTQUZjWTthQUdXLHlCQUR6Qlo7YUFDNEM7T0FBZSxPQUFBO01BQVE7TUFIekQsT0FBQTtLQUd5RDtLQUovRCxPQUFBO0lBSStEO2lCQUU3RGM7S0F0RE56QixZQXNETXlCO0tBRWlDO01BQUEsTUFBQTtNQUE3QyxNQUFBLHdCQXhETXpCO01Bd0ROLE1BQUEsOEJBVElvQjtLQVN5QyxPQUFBO0lBQTZCO0lBRmxFLE9BQUE7R0FFa0U7OEJBN0J4RXRCOzs7RSIsInNvdXJjZXNDb250ZW50IjpbImxldCByZWFkXG4gIDogTGV4aW5nLmxleGJ1ZiAtPiAoaW50IC0+ICdhIEFuZ3N0cm9tLnQpIC0+IGJ5dGVzIC0+ICdhIEFuZ3N0cm9tLnRcbiAgPSBmdW4gbGV4YnVmIGNvbnRpbnVlIGJ1ZmZlciAtPlxuICAgIGxldCBvcGVuIEFuZ3N0cm9tIGluXG4gICAgZml4IEBAIGZ1biBtMCAtPlxuICAgIHBvcyA+Pj0gZnVuIGN1cnJfcG9zMCAtPlxuICAgIGxldCBjdXJyX3BvczAgPSBjdXJyX3BvczAgLSBsZXhidWYuTGV4aW5nLmxleF9hYnNfcG9zIGluXG4gICAgZml4IEBAIGZ1biBtMSAtPlxuICAgIHBvcyA+Pj0gZnVuIGN1cnJfcG9zMSAtPlxuICAgIGxldCBjdXJyX3BvczEgPSBjdXJyX3BvczEgLSBsZXhidWYuTGV4aW5nLmxleF9hYnNfcG9zIGluXG5cbiAgICBpZiBjdXJyX3BvczEgLSBjdXJyX3BvczAgPiAwXG4gICAgdGhlbiAoIHBlZWtfY2hhciA+Pj0gZnVuY3Rpb25cbiAgICAgICAgICAgfCBTb21lIF8gLT4gY29tbWl0ICo+IG0wXG4gICAgICAgICAgIHwgTm9uZSAtPiAoIHRyeSBjb250aW51ZSAwIHdpdGggXyAtPiBmYWlsIFwiSW52YWxpZCB1bnN0cnVjdHVyZWQgZm9ybVwiICkgKVxuICAgIGVsc2UgKCBhdmFpbGFibGUgPj49IGZ1biBsZW4gLT5cbiAgICAgICAgICAgbGV0IHNhdmVkID0gbGV4YnVmLkxleGluZy5sZXhfY3Vycl9wb3MgLSBjdXJyX3BvczAgaW5cblxuICAgICAgICAgICBtYXRjaCBsZW4gLSBzYXZlZCB3aXRoXG4gICAgICAgICAgIHwgMCAtPlxuICAgICAgICAgICAgICggcGVla19jaGFyID4+PSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICB8IFNvbWUgXyAtPiAoKGFkdmFuY2UgbGVuICo+IG0xKSA8fD4gbTApXG4gICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoIHRyeSBjb250aW51ZSAwIHdpdGggXyAtPiBmYWlsIFwiSW52YWxpZCB1bnN0cnVjdHVyZWQgZm9ybVwiICkgKVxuICAgICAgICAgICB8IHJlc3QgLT5cbiAgICAgICAgICAgICBwZWVrX3N0cmluZyBsZW4gPj49IGZ1biBzcmMgLT5cbiAgICAgICAgICAgICBsZXQgbGVuID0gbWluIHJlc3QgKEJ5dGVzLmxlbmd0aCBidWZmZXIpIGluXG4gICAgICAgICAgICAgQnl0ZXMuYmxpdF9zdHJpbmcgc3JjIHNhdmVkIGJ1ZmZlciAwIGxlbiA7XG4gICAgICAgICAgICAgKChjb250aW51ZSBsZW4pIDx8PiBtMSkgKVxuXG5sZXQgdW5zdHJjdHJkIGJ1ZiA9XG4gIGxldCBsZXhidWYgPSBVbnN0cmN0cmQubGV4YnVmX21ha2UgKCkgaW5cbiAgbGV0IHJlYWQgY29udGludWUgYnVmZmVyID0gcmVhZCBsZXhidWYgY29udGludWUgYnVmZmVyIGluXG4gIGxldCBtb2R1bGUgQnVmZmVyID0gc3RydWN0XG4gICAgdHlwZSB0ID0gYnl0ZXNcbiAgICBsZXQgYmxpdF90b19ieXRlcyA9IEJ5dGVzLmJsaXRcbiAgICBsZXQgYnVmID0gYnVmXG4gIGVuZCBpblxuICBsZXQgbW9kdWxlIE1vbmFkID0gc3RydWN0XG4gICAgdHlwZSAnYSB0ID0gJ2EgQW5nc3Ryb20udFxuICAgIHR5cGUgYnVmZmVyID0gYnl0ZXNcblxuICAgIGxldCByZXR1cm4gPSBBbmdzdHJvbS5yZXR1cm5cbiAgICBsZXQgYmluZCB4IGYgPVxuICAgICAgQW5nc3Ryb20uKHggPj49IGZ1biB4IC0+IHRyeSBmIHggd2l0aCBGYWlsdXJlIF8gLT4gQW5nc3Ryb20uZmFpbCBcIkludmFsaWQgdW5zdHJ1Y3R1cmVkIGZvcm1cIilcbiAgICBsZXQgZmFpbCA9IEFuZ3N0cm9tLmZhaWxcbiAgICBsZXQgcmVhZCA9IHJlYWRcbiAgZW5kIGluXG4gIGxldCBtb2R1bGUgU3RhdGUgPSBVbnN0cmN0cmQuTWFrZShCdWZmZXIpKE1vbmFkKSBpblxuICBsZXQgb3BlbiBBbmdzdHJvbSBpblxuICBsZXQgdHJhaWxlciB2ID1cbiAgICBwb3MgPj49IGZ1biBjdXJyX3BvcyAtPlxuICAgIGF2YWlsYWJsZSA+Pj0gZnVuIGF2YWlsYWJsZSAtPlxuICAgIGxldCBjdXJyX3BvcyA9IGN1cnJfcG9zIC0gbGV4YnVmLkxleGluZy5sZXhfYWJzX3BvcyBpblxuICAgIGxldCBzYXZlZCA9IGxleGJ1Zi5MZXhpbmcubGV4X2N1cnJfcG9zIC0gY3Vycl9wb3MgaW5cbiAgICAoIGlmIHNhdmVkIDw9IGF2YWlsYWJsZSB0aGVuIGFkdmFuY2Ugc2F2ZWQgZWxzZSByZXR1cm4gKCkgKSAqPiByZXR1cm4gdiBpblxuXG4gIHBvcyA+Pj0gZnVuIGxleF9hYnNfcG9zIC0+XG4gIGxleGJ1Zi5MZXhpbmcubGV4X2Fic19wb3MgPC0gbGV4X2Fic19wb3MgO1xuICBTdGF0ZS51bnN0cnVjdHVyZWQgW10gbGV4YnVmID4+PSB0cmFpbGVyID4+PSBVbnN0cmN0cmQucG9zdF9wcm9jZXNzIHJldHVyblxuIl19
