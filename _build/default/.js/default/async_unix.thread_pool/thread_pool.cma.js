// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Thread_pool__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Thread_pool = [0],
    Thread_pool$0 = [0, Thread_pool];
   runtime.caml_register_global(0, Thread_pool$0, "Thread_pool__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool__Import
//# unitInfo: Requires: Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_pool_Import = "Thread_pool__Import",
    cst_thread_pool = "thread_pool";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Time_ns_unix = global_data.Time_ns_unix;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool);
   caml_call1(Ppx_expect_runtime[1][1], "thread_pool/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_thread_pool, "import.ml");
   var
    include = Core_Int[96],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare = include[8],
    min = include[9],
    max = include[10],
    sec = Time_ns_unix[72][82];
   caml_call1(Ppx_inline_test_lib[7], cst_thread_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool_Import);
   var
    Thread_pool_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       sec];
   runtime.caml_register_global
    (13, Thread_pool_Import, cst_Thread_pool_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool
//# unitInfo: Requires: Base__Field, Core, Core__Error, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Or_error, Core__Queue, Core__Result, Core__Sexp, Core__String, Core__Unique_id, Core_thread, Linux_ext, Nano_mutex, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Squeue, Thread_pool__Import, Thread_pool_cpu_affinity, Thread_safe_ivar, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Finished = "Finished",
    cst_Finishing = "Finishing",
    cst_In_use = "In_use",
    cst_Thread_pool$0 = "Thread_pool",
    cst_aggregate_working_start_ti$0 =
      "aggregate_working_start_time_since_epoch",
    cst_available_threads$0 = "available_threads",
    cst_cpu_affinity$0 = "cpu_affinity",
    cst_default_priority$0 = "default_priority",
    cst_exn = "exn",
    cst_finished$0 = "finished",
    cst_helper_thread$0 = "helper_thread",
    cst_id$0 = "id",
    cst_last_thread_creation_failu$0 = "last_thread_creation_failure",
    cst_max_num_threads$0 = "max_num_threads",
    cst_max_recent_completed_queue$0 = "max_recent_completed_queue_wait",
    cst_max_recent_unfinished_work$0 = "max_recent_unfinished_work",
    cst_mutex$0 = "mutex",
    cst_name = "name",
    cst_num_threads$0 = "num_threads",
    cst_num_work_completed$0 = "num_work_completed",
    cst_num_working_threads$0 = "num_working_threads",
    cst_priority = "priority",
    cst_state$0 = "state",
    cst_thread = "thread",
    cst_thread_by_id$0 = "thread_by_id",
    cst_thread_creation_failure_lo$0 = "thread_creation_failure_lockout",
    cst_thread_id$0 = "thread_id",
    cst_thread_pool$0 = "thread_pool",
    cst_thread_pool_src_thread_poo = "thread_pool/src/thread_pool.ml",
    cst_total_completed_working_ti$0 = "total_completed_working_time",
    cst_unfinished_work$1 = "unfinished_work",
    cst_work_queue$0 = "work_queue",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    default_thread_name = "thread-pool thread",
    Core_Error = global_data.Core__Error,
    Thread_safe_ivar = global_data.Thread_safe_ivar,
    Core_Result = global_data.Core__Result,
    Core = global_data.Core,
    Nano_mutex = global_data.Nano_mutex,
    Core_Option = global_data.Core__Option,
    Core_Queue = global_data.Core__Queue,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Or_error = global_data.Core__Or_error,
    Thread_pool_Import = global_data.Thread_pool__Import,
    Squeue = global_data.Squeue,
    Core_thread = global_data.Core_thread,
    Base_Field = global_data.Base__Field,
    Assert_failure = global_data.Assert_failure,
    Core_List = global_data.Core__List,
    Thread_pool_cpu_affinity = global_data.Thread_pool_cpu_affinity,
    Linux_ext = global_data.Linux_ext,
    Core_String = global_data.Core__String,
    Time_ns_unix = global_data.Time_ns_unix,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_thread_pool_src_thread_poo);
   caml_call2(Ppx_inline_test_lib[6], cst_thread_pool$0, "thread_pool.ml");
   var
    cst_fake_error = "fake-error",
    _bg_ = [0, "max_queue_wait"],
    _bh_ = [0, "max_unfinished_work"],
    _bi_ = [0, "total_working_time"],
    _bj_ = [0, cst_unfinished_work$1],
    _bk_ = [0, cst_num_work_completed$0],
    _bl_ = [0, cst_num_threads$0],
    _be_ = [0, cst_thread_pool$0],
    _bf_ = [0, cst_helper_thread$0],
    cst_finished_with_helper_threa$0 =
      "finished_with_helper_thread called on helper thread not in pool",
    cst_finished_with_helper_threa = "finished_with_helper_thread",
    cst_add_work_for_helper_thread = "add_work_for_helper_thread",
    cst_add_work_for_helper_thread$2 =
      "add_work_for_helper_thread called on helper thread not in pool",
    cst_add_work_for_helper_thread$1 =
      "add_work_for_helper_thread called on finished thread pool",
    cst_add_work_for_helper_thread$0 =
      "add_work_for_helper_thread called on helper thread no longer in use",
    _bd_ = [0, 0],
    cst_become_helper_thread_not_c =
      "become_helper_thread not called within thread-pool thread",
    cst_create_helper_thread_could =
      "create_helper_thread could not get a thread",
    _bc_ = [0, 0],
    cst_become_helper_thread_inter = "become_helper_thread_internal",
    cst_become_helper_thread_inter$0 =
      "become_helper_thread_internal called on finished thread pool",
    cst_helper_thread = cst_helper_thread$0,
    cst_add_work = "add_work",
    cst_add_work_called_on_finishe = "add_work called on finished thread pool",
    _bb_ = [0, 0],
    cst_get_available_thread = "get_available_thread",
    _ba_ = [0, cst_thread],
    cst_thread_pool_thread_unexpec =
      "thread-pool thread unexpectedly available",
    cst_thread_got_work = "thread got work",
    cst_thread_finished_with_work = "thread finished with work",
    cst_create_thread = "create_thread",
    cst_make_thread_available = "make_thread_available",
    cst_Thread_pool_finished_with = "Thread_pool.finished_with",
    cst_Thread_pool_create_setaffi =
      "Thread_pool.create setaffinity not supported on this platform",
    cst_Thread_pool_create_max_num =
      "Thread_pool.create max_num_threads was < 1",
    _aV_ = [0, cst_thread_pool$0],
    _aW_ = [0, cst_exn],
    cst_Thread_pool_invariant_fail = "Thread_pool.invariant failed",
    _a$_ = [0, cst_thread_pool_src_thread_poo, 301, 14],
    _a__ = [0, cst_thread_pool_src_thread_poo, 302, 14],
    _a9_ = [0, cst_thread_pool_src_thread_poo, 307, 56],
    _a8_ = [0, cst_thread_pool_src_thread_poo, 310, 13],
    _a7_ = [0, cst_thread_pool_src_thread_poo, 311, 13],
    _a5_ = [0, cst_thread_pool_src_thread_poo, 321, 15],
    _a4_ = [0, cst_thread_pool_src_thread_poo, 324, 15],
    _a6_ = [0, cst_thread_pool_src_thread_poo, 319, 13],
    _a3_ = [0, cst_thread_pool_src_thread_poo, 337, 13],
    _a2_ = [0, cst_thread_pool_src_thread_poo, 338, 56],
    _a1_ = [0, cst_thread_pool_src_thread_poo, 340, 44],
    _a0_ = [0, cst_thread_pool_src_thread_poo, 343, 13],
    _aZ_ = [0, cst_thread_pool_src_thread_poo, 347, 13],
    _aY_ = [0, cst_thread_pool_src_thread_poo, 350, 13],
    _aX_ = [0, cst_thread_pool_src_thread_poo, 353, 13],
    _ay_ = [0, cst_max_recent_completed_queue$0],
    _az_ = [0, cst_max_recent_unfinished_work$0],
    _aA_ = [0, cst_total_completed_working_ti$0],
    _aB_ = [0, cst_aggregate_working_start_ti$0],
    _aC_ = [0, cst_num_working_threads$0],
    _aD_ = [0, cst_num_work_completed$0],
    _aE_ = [0, cst_unfinished_work$1],
    _aF_ = [0, cst_work_queue$0],
    _aG_ = [0, cst_available_threads$0],
    _aH_ = [0, cst_thread_by_id$0],
    _aI_ = [0, cst_last_thread_creation_failu$0],
    _aJ_ = [0, cst_thread_creation_failure_lo$0],
    _aK_ = [0, cst_num_threads$0],
    _aL_ = [0, cst_cpu_affinity$0],
    _aM_ = [0, cst_max_num_threads$0],
    _aN_ = [0, cst_default_priority$0],
    _aO_ = [0, cst_mutex$0],
    _aP_ = [0, cst_finished$0],
    _aT_ = [0, cst_Finishing],
    _aU_ = [0, cst_In_use],
    _aQ_ = [0, cst_Finished],
    _aR_ = [0, cst_state$0],
    _aS_ = [0, cst_id$0],
    _K_ = [0, "error"],
    _L_ = [0, "at"],
    _G_ = [0, cst_thread],
    _H_ = [0, cst_exn],
    cst_Thread_invariant_failed = "Thread.invariant failed",
    _J_ = [0, cst_thread_pool_src_thread_poo, 153, 38],
    _I_ = [0, cst_thread_pool_src_thread_poo, 158, 15],
    _x_ = [0, cst_work_queue$0],
    _y_ = [0, cst_unfinished_work$1],
    _z_ = [0, "Available"],
    _E_ = [0, "Working"],
    _F_ = [0, "Helper"],
    _A_ = [0, cst_state$0],
    _B_ = [0, cst_priority],
    _C_ = [0, cst_thread_id$0],
    _D_ = [0, cst_name],
    _l_ = [0, cst_default_priority$0],
    _m_ = [0, "default_name"],
    _n_ = [0, cst_thread],
    _r_ = [0, cst_Finishing],
    _s_ = [0, cst_In_use],
    _o_ = [0, cst_Finished],
    _p_ = [0, cst_state$0],
    _q_ = [0, "in_pool"],
    _j_ = [0, "Work"],
    _k_ = [0, "Stop"],
    _f_ = [0, cst_priority],
    _g_ = [0, "enqueued_at"],
    _h_ = [0, "doit"],
    _i_ = [0, cst_name],
    _a_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    cst_unfinished_work = cst_unfinished_work$1,
    cst_thread_id = cst_thread_id$0,
    cst_max_recent_completed_queue = cst_max_recent_completed_queue$0,
    cst_max_recent_unfinished_work = cst_max_recent_unfinished_work$0,
    cst_total_completed_working_ti = cst_total_completed_working_ti$0,
    cst_aggregate_working_start_ti = cst_aggregate_working_start_ti$0,
    cst_num_working_threads = cst_num_working_threads$0,
    cst_num_work_completed = cst_num_work_completed$0,
    cst_unfinished_work$0 = cst_unfinished_work$1,
    cst_work_queue = cst_work_queue$0,
    cst_available_threads = cst_available_threads$0,
    cst_thread_by_id = cst_thread_by_id$0,
    cst_last_thread_creation_failu = cst_last_thread_creation_failu$0,
    cst_thread_creation_failure_lo = cst_thread_creation_failure_lo$0,
    cst_num_threads = cst_num_threads$0,
    cst_cpu_affinity = cst_cpu_affinity$0,
    cst_max_num_threads = cst_max_num_threads$0,
    cst_default_priority = cst_default_priority$0,
    cst_mutex = cst_mutex$0,
    cst_finished = cst_finished$0,
    cst_state = cst_state$0,
    cst_id = cst_id$0,
    cst_thread_pool = cst_thread_pool$0,
    cst_Thread_pool = cst_Thread_pool$0;
   function debug_log(message, a, sexp_of_a){
    var
     _dW_ = [0, caml_call1(sexp_of_a, a), 0],
     _dX_ = [0, caml_call1(Core[558], message), _dW_],
     _dY_ = caml_call1(Time_ns_unix[40], 0),
     _dZ_ = [1, [0, caml_call1(Time_ns_unix[85], _dY_), _dX_]],
     _d0_ = caml_call2(Core_Sexp[84], 0, _dZ_);
    return caml_call2(Core[243], _a_, _d0_);
   }
   var
    epoch = Time_ns_unix[33],
    now = Time_ns_unix[40],
    diff = Time_ns_unix[47],
    to_span_since_epoch = Time_ns_unix[49],
    Span = Time_ns_unix[72],
    _b_ = Time_ns_unix[85];
   function sexp_of_t(t){
    var _dV_ = Core[628] ? epoch : t;
    return caml_call1(_b_, _dV_);
   }
   var
    sexp_of_t$0 = Core_Int[77],
    Table = Core_Int[103],
    of_ocaml_thread = Core_thread[4],
    _c_ = Table[5],
    _d_ = Table[4],
    _e_ = Table[2],
    priority_zero = caml_call1(Linux_ext[53][4], 0),
    match = Linux_ext[55];
   if(0 === match[0])
    var
     f = match[1],
     getpriority = function(param){return caml_call2(f, 0, 0);};
   else
    var getpriority = caml_call1(Core[242], priority_zero);
   var match$0 = Linux_ext[54];
   if(0 === match$0[0])
    var
     f$0 = match$0[1],
     setpriority = function(p){return caml_call2(f$0, 0, p);};
   else
    var setpriority = function(_dU_){return;};
   var match$1 = Linux_ext[39];
   if(0 === match$1[0])
    var f$1 = match$1[1], set_thread_name = f$1;
   else
    var set_thread_name = function(_dT_){return;};
   var
    debug = [0, 0],
    check_invariant = [0, 0],
    error = Core_Or_error[44],
    Pool_id = caml_call1(Core_Unique_id[2], 0);
   function sexp_of_t$1(param){
    var
     priority_008 = param[4],
     enqueued_at_006 = param[3],
     name_002 = param[1],
     arg_009 = caml_call1(Linux_ext[53][2], priority_008),
     bnds_001 = [0, [1, [0, _f_, [0, arg_009, 0]]], 0],
     arg_007 = sexp_of_t(enqueued_at_006),
     bnds_001$0 = [0, [1, [0, _g_, [0, arg_007, 0]]], bnds_001];
    function _dR_(_dS_){return 0;}
    var
     arg_005 = caml_call1(Sexplib0_Sexp_conv[24], _dR_),
     bnds_001$1 = [0, [1, [0, _h_, [0, arg_005, 0]]], bnds_001$0],
     arg_003 = caml_call1(Core[558], name_002),
     bnds_001$2 = [0, [1, [0, _i_, [0, arg_003, 0]]], bnds_001$1];
    return [1, bnds_001$2];
   }
   function enqueued_for(t){
    var now$0 = caml_call1(now, 0);
    return caml_call2(diff, now$0, t[3]);
   }
   function sexp_of_elt(param){
    if(! param) return _k_;
    var arg0_010 = param[1], res0_011 = sexp_of_t$1(arg0_010);
    return [1, [0, _j_, [0, res0_011, 0]]];
   }
   function enqueue(t, work){return caml_call2(Squeue[4], t, work);}
   function default_priority(r){return r[5];}
   function default_name(r){return r[4];}
   function sexp_of_t$2(of_thread_013, param){
    var
     in_pool_015 = param[1],
     state_017 = param[2],
     default_priority_023 = param[5],
     default_name_021 = param[4],
     thread_019 = param[3],
     arg_024 = caml_call1(Linux_ext[53][2], default_priority_023),
     bnds_014 = [0, [1, [0, _l_, [0, arg_024, 0]]], 0],
     arg_022 = caml_call1(Core[558], default_name_021),
     bnds_014$0 = [0, [1, [0, _m_, [0, arg_022, 0]]], bnds_014],
     arg_020 = caml_call1(of_thread_013, thread_019),
     bnds_014$1 = [0, [1, [0, _n_, [0, arg_020, 0]]], bnds_014$0],
     arg_018 =
       -289386606 === state_017 ? _o_ : -108502449 <= state_017 ? _r_ : _s_,
     bnds_014$2 = [0, [1, [0, _p_, [0, arg_018, 0]]], bnds_014$1],
     arg_016 = caml_call1(Pool_id[10], in_pool_015),
     bnds_014$3 = [0, [1, [0, _q_, [0, arg_016, 0]]], bnds_014$2];
    return [1, bnds_014$3];
   }
   function unfinished_work(r){return r[5];}
   function set_unfinished_work(r, v){r[5] = v; return 0;}
   function thread_id(r){return r[2];}
   function set_thread_id(r, v){r[2] = v; return 0;}
   function _t_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6]];}
   var
    _u_ = [0, set_unfinished_work],
    unfinished_work$0 =
      [0,
       function(param){return 0;},
       cst_unfinished_work,
       _u_,
       unfinished_work,
       _t_];
   function _v_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6]];}
   var
    _w_ = [0, set_thread_id],
    thread_id$0 =
      [0, function(param){return 0;}, cst_thread_id, _w_, thread_id, _v_];
   function sexp_of_t$3(param){
    var
     name_026 = param[1],
     thread_id_028 = param[2],
     priority_030 = param[3],
     state_032 = param[4],
     unfinished_work_035 = param[5],
     work_queue_037 = param[6],
     arg_038 = caml_call2(Squeue[1], sexp_of_elt, work_queue_037),
     bnds_025 = [0, [1, [0, _x_, [0, arg_038, 0]]], 0],
     arg_036 = caml_call1(Core[389], unfinished_work_035),
     bnds_025$0 = [0, [1, [0, _y_, [0, arg_036, 0]]], bnds_025];
    if(typeof state_032 === "number")
     var arg_033 = 425081257 <= state_032 ? _z_ : _E_;
    else
     var
      v_034 = state_032[2],
      arg_033 =
        [1, [0, _F_, [0, sexp_of_t$2(Sexplib0_Sexp_conv[23], v_034), 0]]];
    var
     bnds_025$1 = [0, [1, [0, _A_, [0, arg_033, 0]]], bnds_025$0],
     arg_031 = caml_call1(Linux_ext[53][2], priority_030),
     bnds_025$2 = [0, [1, [0, _B_, [0, arg_031, 0]]], bnds_025$1],
     arg_029 = caml_call2(Core[515], sexp_of_t$0, thread_id_028),
     bnds_025$3 = [0, [1, [0, _C_, [0, arg_029, 0]]], bnds_025$2],
     arg_027 = caml_call1(Core[558], name_026),
     bnds_025$4 = [0, [1, [0, _D_, [0, arg_027, 0]]], bnds_025$3];
    return [1, bnds_025$4];
   }
   function invariant(t){
    try{
     var
      check =
        function(invariant, field){
         return caml_call1(invariant, caml_call2(Base_Field[3], field, t));
        },
      _dO_ =
        function(unfinished_work){
         var _dP_ = caml_call1(Squeue[6], t[6]);
         if(! caml_call2(Thread_pool_Import[3], unfinished_work, _dP_)){
          var _dQ_ = caml_call1(Squeue[6], t[6]) + 1 | 0;
          if(! caml_call2(Thread_pool_Import[3], unfinished_work, _dQ_))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
         }
         return 0;
        };
     check
      (function(o){
        if(caml_call1(Core[253], o)) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _J_], 1);
       },
       thread_id$0);
     check(_dO_, unfinished_work$0);
     var _dK_ = 0;
     return _dK_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _dL_ = [0, [1, [0, _G_, [0, sexp_of_t$3(t), 0]]], 0],
      _dM_ = [0, [1, [0, _H_, [0, caml_call1(Core[625], exn), 0]]], _dL_],
      _dN_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Thread_invariant_failed),
          _dM_]];
     return caml_call1(Core[261], _dN_);
    }
   }
   function enqueue_work(t, work){
    t[5] = t[5] + 1 | 0;
    return enqueue(t[6], [0, work]);
   }
   function stop(t){return enqueue(t[6], 0);}
   function at(r){return r[1];}
   function sexp_of_t$4(param){
    var
     error_042 = param[2],
     at_040 = param[1],
     arg_043 = caml_call1(Core_Error[9], error_042),
     bnds_039 = [0, [1, [0, _K_, [0, arg_043, 0]]], 0],
     arg_041 = sexp_of_t(at_040),
     bnds_039$0 = [0, [1, [0, _L_, [0, arg_041, 0]]], bnds_039];
    return [1, bnds_039$0];
   }
   function max_recent_completed_queue_wai(r){return r[20];}
   function set_max_recent_completed_queue(r, v){r[20] = v; return 0;}
   function max_recent_unfinished_work(r){return r[19];}
   function set_max_recent_unfinished_work(r, v){r[19] = v; return 0;}
   function total_completed_working_time(r){return r[18];}
   function set_total_completed_working_ti(r, v){r[18] = v; return 0;}
   function aggregate_working_start_time_s(r){return r[17];}
   function set_aggregate_working_start_ti(r, v){r[17] = v; return 0;}
   function num_working_threads(r){return r[16];}
   function set_num_working_threads(r, v){r[16] = v; return 0;}
   function num_work_completed(r){return r[15];}
   function set_num_work_completed(r, v){r[15] = v; return 0;}
   function unfinished_work$1(r){return r[14];}
   function set_unfinished_work$0(r, v){r[14] = v; return 0;}
   function work_queue(r){return r[13];}
   function available_threads(r){return r[12];}
   function set_available_threads(r, v){r[12] = v; return 0;}
   function thread_by_id(r){return r[11];}
   function set_thread_by_id(r, v){r[11] = v; return 0;}
   function last_thread_creation_failure(r){return r[10];}
   function set_last_thread_creation_failu(r, v){r[10] = v; return 0;}
   function thread_creation_failure_lockou(r){return r[9];}
   function set_thread_creation_failure_lo(r, v){r[9] = v; return 0;}
   function num_threads(r){return r[8];}
   function set_num_threads(r, v){r[8] = v; return 0;}
   function cpu_affinity(r){return r[7];}
   function max_num_threads(r){return r[6];}
   function default_priority$0(r){return r[5];}
   function mutex(r){return r[4];}
   function finished(r){return r[3];}
   function state(r){return r[2];}
   function set_state(r, v){r[2] = v; return 0;}
   function id(r){return r[1];}
   function _M_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            v];
   }
   var
    _N_ = [0, set_max_recent_completed_queue],
    max_recent_completed_queue_wai$0 =
      [0,
       function(param){return 0;},
       cst_max_recent_completed_queue,
       _N_,
       max_recent_completed_queue_wai,
       _M_];
   function _O_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20]];
   }
   var
    _P_ = [0, set_max_recent_unfinished_work],
    max_recent_unfinished_work$0 =
      [0,
       function(param){return 0;},
       cst_max_recent_unfinished_work,
       _P_,
       max_recent_unfinished_work,
       _O_];
   function _Q_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20]];
   }
   var
    _R_ = [0, set_total_completed_working_ti],
    total_completed_working_time$0 =
      [0,
       function(param){return 0;},
       cst_total_completed_working_ti,
       _R_,
       total_completed_working_time,
       _Q_];
   function _S_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18],
            r[19],
            r[20]];
   }
   var
    _T_ = [0, set_aggregate_working_start_ti],
    aggregate_working_start_time_s$0 =
      [0,
       function(param){return 0;},
       cst_aggregate_working_start_ti,
       _T_,
       aggregate_working_start_time_s,
       _S_];
   function _U_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _V_ = [0, set_num_working_threads],
    num_working_threads$0 =
      [0,
       function(param){return 0;},
       cst_num_working_threads,
       _V_,
       num_working_threads,
       _U_];
   function _W_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _X_ = [0, set_num_work_completed],
    num_work_completed$0 =
      [0,
       function(param){return 0;},
       cst_num_work_completed,
       _X_,
       num_work_completed,
       _W_];
   function _Y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _Z_ = [0, set_unfinished_work$0],
    unfinished_work$2 =
      [0,
       function(param){return 0;},
       cst_unfinished_work$0,
       _Z_,
       unfinished_work$1,
       _Y_];
   function ___(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _$_ = 0,
    work_queue$0 =
      [0, function(param){return 0;}, cst_work_queue, _$_, work_queue, ___];
   function _aa_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ab_ = [0, set_available_threads],
    available_threads$0 =
      [0,
       function(param){return 0;},
       cst_available_threads,
       _ab_,
       available_threads,
       _aa_];
   function _ac_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ad_ = [0, set_thread_by_id],
    thread_by_id$0 =
      [0,
       function(param){return 0;},
       cst_thread_by_id,
       _ad_,
       thread_by_id,
       _ac_];
   function _ae_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _af_ = [0, set_last_thread_creation_failu],
    last_thread_creation_failure$0 =
      [0,
       function(param){return 0;},
       cst_last_thread_creation_failu,
       _af_,
       last_thread_creation_failure,
       _ae_];
   function _ag_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ah_ = [0, set_thread_creation_failure_lo],
    thread_creation_failure_lockou$0 =
      [0,
       function(param){return 0;},
       cst_thread_creation_failure_lo,
       _ah_,
       thread_creation_failure_lockou,
       _ag_];
   function _ai_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _aj_ = [0, set_num_threads],
    num_threads$0 =
      [0,
       function(param){return 0;},
       cst_num_threads,
       _aj_,
       num_threads,
       _ai_];
   function _ak_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _al_ = 0,
    cpu_affinity$0 =
      [0,
       function(param){return 0;},
       cst_cpu_affinity,
       _al_,
       cpu_affinity,
       _ak_];
   function _am_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _an_ = 0,
    max_num_threads$0 =
      [0,
       function(param){return 0;},
       cst_max_num_threads,
       _an_,
       max_num_threads,
       _am_];
   function _ao_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ap_ = 0,
    default_priority$1 =
      [0,
       function(param){return 0;},
       cst_default_priority,
       _ap_,
       default_priority$0,
       _ao_];
   function _aq_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ar_ = 0,
    mutex$0 = [0, function(param){return 0;}, cst_mutex, _ar_, mutex, _aq_];
   function _as_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _at_ = 0,
    finished$0 =
      [0, function(param){return 0;}, cst_finished, _at_, finished, _as_];
   function _au_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _av_ = [0, set_state],
    state$0 = [0, function(param){return 0;}, cst_state, _av_, state, _au_];
   function _aw_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20]];
   }
   var
    _ax_ = 0,
    id$0 = [0, function(param){return 0;}, cst_id, _ax_, id, _aw_];
   function iter
   (id_fun,
    state_fun,
    finished_fun,
    mutex_fun,
    default_priority_fun,
    max_num_threads_fun,
    cpu_affinity_fun,
    num_threads_fun,
    thread_creation_failure_lockou,
    last_thread_creation_failure_f,
    thread_by_id_fun,
    available_threads_fun,
    work_queue_fun,
    unfinished_work_fun,
    num_work_completed_fun,
    num_working_threads_fun,
    aggregate_working_start_time_s,
    total_completed_working_time_f,
    max_recent_unfinished_work_fun,
    max_recent_completed_queue_wai){
    caml_call1(id_fun, id$0);
    caml_call1(state_fun, state$0);
    caml_call1(finished_fun, finished$0);
    caml_call1(mutex_fun, mutex$0);
    caml_call1(default_priority_fun, default_priority$1);
    caml_call1(max_num_threads_fun, max_num_threads$0);
    caml_call1(cpu_affinity_fun, cpu_affinity$0);
    caml_call1(num_threads_fun, num_threads$0);
    caml_call1
     (thread_creation_failure_lockou, thread_creation_failure_lockou$0);
    caml_call1(last_thread_creation_failure_f, last_thread_creation_failure$0);
    caml_call1(thread_by_id_fun, thread_by_id$0);
    caml_call1(available_threads_fun, available_threads$0);
    caml_call1(work_queue_fun, work_queue$0);
    caml_call1(unfinished_work_fun, unfinished_work$2);
    caml_call1(num_work_completed_fun, num_work_completed$0);
    caml_call1(num_working_threads_fun, num_working_threads$0);
    caml_call1
     (aggregate_working_start_time_s, aggregate_working_start_time_s$0);
    caml_call1(total_completed_working_time_f, total_completed_working_time$0);
    caml_call1(max_recent_unfinished_work_fun, max_recent_unfinished_work$0);
    return caml_call1
            (max_recent_completed_queue_wai, max_recent_completed_queue_wai$0);
   }
   function sexp_of_t$5(param){
    var
     id_045 = param[1],
     state_047 = param[2],
     cpu_affinity_057 = param[7],
     max_num_threads_055 = param[6],
     default_priority_053 = param[5],
     mutex_051 = param[4],
     finished_049 = param[3],
     num_threads_059 = param[8],
     thread_creation_failure_lockou = param[9],
     last_thread_creation_failure_0 = param[10],
     thread_by_id_065 = param[11],
     available_threads_067 = param[12],
     work_queue_069 = param[13],
     unfinished_work_071 = param[14],
     num_work_completed_073 = param[15],
     num_working_threads_075 = param[16],
     aggregate_working_start_time_s = param[17],
     total_completed_working_time_0 = param[18],
     max_recent_unfinished_work_081 = param[19],
     max_recent_completed_queue_wai = param[20],
     arg_084 = caml_call1(Span[10], max_recent_completed_queue_wai),
     bnds_044 = [0, [1, [0, _ay_, [0, arg_084, 0]]], 0],
     arg_082 = caml_call1(Core[389], max_recent_unfinished_work_081),
     bnds_044$0 = [0, [1, [0, _az_, [0, arg_082, 0]]], bnds_044],
     arg_080 = caml_call1(Span[10], total_completed_working_time_0),
     bnds_044$1 = [0, [1, [0, _aA_, [0, arg_080, 0]]], bnds_044$0],
     arg_078 = caml_call1(Span[10], aggregate_working_start_time_s),
     bnds_044$2 = [0, [1, [0, _aB_, [0, arg_078, 0]]], bnds_044$1],
     arg_076 = caml_call1(Core[389], num_working_threads_075),
     bnds_044$3 = [0, [1, [0, _aC_, [0, arg_076, 0]]], bnds_044$2],
     arg_074 = caml_call1(Core[389], num_work_completed_073),
     bnds_044$4 = [0, [1, [0, _aD_, [0, arg_074, 0]]], bnds_044$3],
     arg_072 = caml_call1(Core[389], unfinished_work_071),
     bnds_044$5 = [0, [1, [0, _aE_, [0, arg_072, 0]]], bnds_044$4],
     arg_070 = caml_call2(Core_Queue[13], sexp_of_t$1, work_queue_069),
     bnds_044$6 = [0, [1, [0, _aF_, [0, arg_070, 0]]], bnds_044$5],
     arg_068 = caml_call2(Core[472], sexp_of_t$3, available_threads_067),
     bnds_044$7 = [0, [1, [0, _aG_, [0, arg_068, 0]]], bnds_044$6],
     arg_066 = caml_call2(_e_, sexp_of_t$3, thread_by_id_065),
     bnds_044$8 = [0, [1, [0, _aH_, [0, arg_066, 0]]], bnds_044$7],
     arg_064 =
       caml_call2(Core[515], sexp_of_t$4, last_thread_creation_failure_0),
     bnds_044$9 = [0, [1, [0, _aI_, [0, arg_064, 0]]], bnds_044$8],
     arg_062 = caml_call1(Span[10], thread_creation_failure_lockou),
     bnds_044$10 = [0, [1, [0, _aJ_, [0, arg_062, 0]]], bnds_044$9],
     arg_060 = caml_call1(Core[389], num_threads_059),
     bnds_044$11 = [0, [1, [0, _aK_, [0, arg_060, 0]]], bnds_044$10],
     arg_058 = caml_call1(Thread_pool_cpu_affinity[3], cpu_affinity_057),
     bnds_044$12 = [0, [1, [0, _aL_, [0, arg_058, 0]]], bnds_044$11],
     arg_056 = caml_call1(Core[389], max_num_threads_055),
     bnds_044$13 = [0, [1, [0, _aM_, [0, arg_056, 0]]], bnds_044$12],
     arg_054 = caml_call1(Linux_ext[53][2], default_priority_053),
     bnds_044$14 = [0, [1, [0, _aN_, [0, arg_054, 0]]], bnds_044$13],
     arg_052 = caml_call1(Nano_mutex[1], mutex_051),
     bnds_044$15 = [0, [1, [0, _aO_, [0, arg_052, 0]]], bnds_044$14],
     arg_050 = caml_call2(Thread_safe_ivar[1], Core[620], finished_049),
     bnds_044$16 = [0, [1, [0, _aP_, [0, arg_050, 0]]], bnds_044$15],
     arg_048 =
       -289386606 === state_047 ? _aQ_ : -108502449 <= state_047 ? _aT_ : _aU_,
     bnds_044$17 = [0, [1, [0, _aR_, [0, arg_048, 0]]], bnds_044$16],
     arg_046 = caml_call1(Pool_id[10], id_045),
     bnds_044$18 = [0, [1, [0, _aS_, [0, arg_046, 0]]], bnds_044$17];
    return [1, bnds_044$18];
   }
   function invariant$0(t){
    try{
     var
      check =
        function(invariant, field){
         return caml_call1(invariant, caml_call2(Base_Field[3], field, t));
        },
      _cO_ =
        function(max_recent_completed_queue_wai){
         if(caml_call2(Span[15], max_recent_completed_queue_wai, Span[76]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aX_], 1);
        },
      _cP_ = function(_dJ_){return check(_cO_, _dJ_);},
      _cQ_ =
        function(max_recent_unfinished_work){
         if
          (caml_call2
            (Thread_pool_Import[1], max_recent_unfinished_work, t[14]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aY_], 1);
        },
      _cR_ = function(_dI_){return check(_cQ_, _dI_);},
      _cS_ =
        function(total_completed_working_time){
         if(caml_call2(Span[15], total_completed_working_time, Span[76]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
        },
      _cT_ = function(_dH_){return check(_cS_, _dH_);},
      _cU_ = function(_dG_){return 0;},
      _cV_ =
        function(num_working_threads){
         if(caml_call2(Thread_pool_Import[2], num_working_threads, t[8]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a0_], 1);
        },
      _cW_ = function(_dF_){return check(_cV_, _dF_);},
      _cX_ =
        function(num_work_completed){
         if(caml_call2(Thread_pool_Import[1], num_work_completed, 0))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a1_], 1);
        },
      _cY_ = function(_dE_){return check(_cX_, _dE_);},
      _cZ_ =
        function(unfinished_work){
         if(caml_call2(Thread_pool_Import[1], unfinished_work, 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a2_], 1);
        },
      _c0_ = function(_dD_){return check(_cZ_, _dD_);},
      _c1_ =
        function(work_queue){
         if
          (!
           caml_call1(Core_Queue[17], work_queue)
           && ! caml_call1(Core_List[18], t[12]))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a3_], 1);
         return 0;
        },
      _c2_ = function(_dC_){return check(_c1_, _dC_);},
      _c3_ =
        function(available_threads){
         var _dw_ = t[8], _dx_ = caml_call1(Core_List[45], available_threads);
         if(! caml_call2(Thread_pool_Import[2], _dx_, _dw_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
         function _dy_(thread){
          function _dA_(thread$0){return thread === thread$0 ? 1 : 0;}
          if(! caml_call2(Core_Hashtbl[23], t[11], _dA_))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
          var _dz_ = thread[4];
          a:
          {
           if(typeof _dz_ === "number" && 425081257 <= _dz_){var _dB_ = 1; break a;}
           var _dB_ = 0;
          }
          if(_dB_) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a4_], 1);
         }
         return caml_call2(Core_List[19], available_threads, _dy_);
        },
      _c4_ = function(_dv_){return check(_c3_, _dv_);},
      _c5_ =
        function(thread_by_id){
         return caml_call2(_d_, invariant, thread_by_id);
        },
      _c6_ = function(_du_){return check(_c5_, _du_);},
      _c7_ = function(_dt_){return 0;},
      _c8_ = function(_ds_){return 0;},
      _c9_ =
        function(num_threads){
         var _dr_ = caml_call1(Core_Hashtbl[28], t[11]);
         if(! caml_call2(Thread_pool_Import[3], num_threads, _dr_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a8_], 1);
         if(caml_call2(Thread_pool_Import[2], num_threads, t[6])) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a7_], 1);
        },
      _c__ = function(_dq_){return check(_c9_, _dq_);},
      _c$_ = function(_dp_){return 0;},
      _da_ =
        function(max_num_threads){
         if(caml_call2(Thread_pool_Import[1], max_num_threads, 1)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a9_], 1);
        },
      _db_ = function(_do_){return check(_da_, _do_);},
      _dc_ = function(_dn_){return 0;},
      _dd_ = Nano_mutex[2],
      _de_ = function(_dm_){return check(_dd_, _dm_);},
      _df_ = function(_dl_){return 0;},
      _dg_ =
        function(param){
         if(-289386606 !== param) return 0;
         if(! caml_call2(Thread_pool_Import[3], t[14], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a$_], 1);
         if(caml_call2(Thread_pool_Import[3], t[8], 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a__], 1);
        },
      _dh_ = function(_dk_){return check(_dg_, _dk_);},
      _di_ =
        iter
         (function(_dj_){return 0;},
          _dh_,
          _df_,
          _de_,
          _dc_,
          _db_,
          _c$_,
          _c__,
          _c8_,
          _c7_,
          _c6_,
          _c4_,
          _c2_,
          _c0_,
          _cY_,
          _cW_,
          _cU_,
          _cT_,
          _cR_,
          _cP_);
     return _di_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _cL_ = [0, [1, [0, _aV_, [0, sexp_of_t$5(t), 0]]], 0],
      _cM_ = [0, [1, [0, _aW_, [0, caml_call1(Core[625], exn), 0]]], _cL_],
      _cN_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Thread_pool_invariant_fail),
          _cM_]];
     return caml_call1(Core[261], _cN_);
    }
   }
   function is_finished(t){return -289386606 === t[2] ? 1 : 0;}
   function is_in_use(t){return -289386606 <= t[2] ? 0 : 1;}
   function has_unstarted_work(t){
    return 1 - caml_call1(Core_Queue[17], t[13]);
   }
   function maybe_finish(t){
    if(-108502449 > t[2]) return 0;
    var _b7_ = caml_call2(Thread_pool_Import[3], t[14], 0);
    if(! _b7_) return _b7_;
    function set(x, f){
     var _cK_ = caml_call1(Base_Field[5], f);
     return caml_call6(Core_Option[40], 0, 0, 0, _cK_, t, x);
    }
    function _b8_(_cJ_){return 0;}
    function _b9_(_cI_){return 0;}
    function _b__(_cH_){return 0;}
    function _b$_(_cG_){return 0;}
    function _ca_(_cF_){return 0;}
    function _cb_(_cE_){return 0;}
    function _cc_(_cD_){return 0;}
    function _cd_(_cC_){return 0;}
    var _ce_ = 0;
    function _cf_(_cB_){return set(_ce_, _cB_);}
    function _cg_(param){
     caml_call2(Core_Hashtbl[20], t[11], stop);
     return caml_call1(Core_Hashtbl[16], t[11]);
    }
    function _ch_(_cA_){return 0;}
    function _ci_(_cz_){return 0;}
    var _cj_ = 0;
    function _ck_(_cy_){return set(_cj_, _cy_);}
    function _cl_(_cx_){return 0;}
    function _cm_(_cw_){return 0;}
    function _cn_(_cv_){return 0;}
    function _co_(_cu_){return 0;}
    function _cp_(param){return caml_call2(Thread_safe_ivar[3], t[3], 0);}
    var _cq_ = -289386606;
    function _cr_(_ct_){return set(_cq_, _ct_);}
    return iter
            (function(_cs_){return 0;},
             _cr_,
             _cp_,
             _co_,
             _cn_,
             _cm_,
             _cl_,
             _ck_,
             _ci_,
             _ch_,
             _cg_,
             _cf_,
             _cd_,
             _cc_,
             _cb_,
             _ca_,
             _b$_,
             _b__,
             _b9_,
             _b8_);
   }
   function assign_work_to_thread(thread, work){
    thread[4] = -299865199;
    return enqueue_work(thread, work);
   }
   function make_thread_available(t, thread){
    if(debug[1])
     debug_log
      (cst_make_thread_available,
       [0, thread, t],
       function(param){
        var
         arg1_086 = param[2],
         arg0_085 = param[1],
         res0_087 = sexp_of_t$3(arg0_085),
         res1_088 = sexp_of_t$5(arg1_086);
        return [1, [0, res0_087, [0, res1_088, 0]]];
       });
    var match = caml_call1(Core_Queue[45], t[13]);
    if(! match){
     thread[4] = 425081257;
     t[12] = [0, thread, t[12]];
     return maybe_finish(t);
    }
    var work = match[1], enqueued_for$0 = enqueued_for(work);
    if(caml_call2(Span[18], enqueued_for$0, t[20])) t[20] = enqueued_for$0;
    return assign_work_to_thread(thread, work);
   }
   function maybe_finish_helper_thread(t, helper_thread){
    if(-108502449 > helper_thread[2]) return 0;
    var
     thread = helper_thread[3],
     _b6_ = caml_call2(Thread_pool_Import[3], thread[5], 0);
    return _b6_
            ? (helper_thread
               [2]
              = -289386606,
              make_thread_available(t, thread))
            : _b6_;
   }
   function get_available_thread(t){
    if(debug[1]) debug_log(cst_get_available_thread, t, sexp_of_t$5);
    var match$0 = t[12];
    if(match$0){
     var rest = match$0[2], thread$0 = match$0[1];
     t[12] = rest;
     return [0, 17724, thread$0];
    }
    if(caml_call2(Thread_pool_Import[3], t[8], t[6])) return -93515166;
    var
     now$0 = caml_call1(now, 0),
     _bR_ = t[9],
     _bS_ =
       caml_call2(diff, now$0, caml_call3(Core_Option[41], t[10], epoch, at));
    if(caml_call2(Span[19], _bS_, _bR_)) return -93515166;
    if(debug[1]) debug_log(cst_create_thread, t, sexp_of_t$5);
    var
     priority = t[5],
     thread = [0, cst, 0, priority, 425081257, 0, caml_call1(Squeue[2], 1)];
    function _bP_(param){
     var _bT_ = 0;
     function _bU_(param){
      var cpu_affinity = t[7];
      caml_call1(set_thread_name, thread[1]);
      var _bV_ = thread[3], _bW_ = caml_call1(getpriority, 0);
      if(1 - caml_call2(Linux_ext[53][3], _bW_, _bV_)) setpriority(thread[3]);
      if(cpu_affinity){
       var
        cpuset = cpu_affinity[1],
        _bX_ = caml_call1(Thread_pool_cpu_affinity[1][5], cpuset);
       caml_call2(Core_Or_error[40], Core_thread[16], _bX_);
      }
      for(;;){
       var match = caml_call1(Squeue[7], thread[6]);
       if(! match) return 0;
       var
        work = match[1],
        started_working_at = caml_call1(now, 0),
        _bY_ =
          function(started_working_at){
            return function(param){
             var _b5_ = caml_call1(to_span_since_epoch, started_working_at);
             t[17] = caml_call2(Span[101], t[17], _b5_);
             t[16] = t[16] + 1 | 0;
             return 0;};
           }
           (started_working_at);
       caml_call2(Nano_mutex[12], t[4], _bY_);
       if(debug[1])
        debug_log
         (cst_thread_got_work,
          [0, work, thread, t],
          function(param){
           var
            arg2_091 = param[3],
            arg1_090 = param[2],
            arg0_089 = param[1],
            res0_092 = sexp_of_t$1(arg0_089),
            res1_093 = sexp_of_t$3(arg1_090),
            res2_094 = sexp_of_t$5(arg2_091);
           return [1, [0, res0_092, [0, res1_093, [0, res2_094, 0]]]];
          });
       var name = work[1];
       if(caml_call2(Core_String[144], name, thread[1])){
        caml_call1(set_thread_name, name);
        thread[1] = name;
       }
       var priority = work[4];
       if(1 - caml_call2(Linux_ext[53][3], thread[3], priority)){setpriority(priority); thread[3] = priority;}
       try{caml_call1(work[2], 0);}catch(_b4_){}
       t[15] = t[15] + 1 | 0;
       if(debug[1])
        debug_log
         (cst_thread_finished_with_work,
          [0, work, thread, t],
          function(param){
           var
            arg2_097 = param[3],
            arg1_096 = param[2],
            arg0_095 = param[1],
            res0_098 = sexp_of_t$1(arg0_095),
            res1_099 = sexp_of_t$3(arg1_096),
            res2_100 = sexp_of_t$5(arg2_097);
           return [1, [0, res0_098, [0, res1_099, [0, res2_100, 0]]]];
          });
       var
        stopped_working_at = caml_call1(now, 0),
        _bZ_ =
          function(started_working_at, stopped_working_at){
            return function(param){
             t[14] = t[14] - 1 | 0;
             t[16] = t[16] - 1 | 0;
             var
              _b0_ = caml_call2(diff, stopped_working_at, started_working_at);
             t[18] = caml_call2(Span[101], t[18], _b0_);
             var _b1_ = caml_call1(to_span_since_epoch, started_working_at);
             t[17] = caml_call2(Span[102], t[17], _b1_);
             thread[5] = thread[5] - 1 | 0;
             var match = thread[4];
             if(typeof match !== "number"){
              var helper_thread = match[2];
              return maybe_finish_helper_thread(t, helper_thread);
             }
             if(425081257 > match) return make_thread_available(t, thread);
             var
              _b2_ = [0, [1, [0, _ba_, [0, sexp_of_t$3(thread), 0]]], 0],
              _b3_ =
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_thread_pool_thread_unexpec),
                  _b2_]];
             return caml_call1(Core[261], _b3_);};
           }
           (started_working_at, stopped_working_at);
       caml_call2(Nano_mutex[12], t[4], _bZ_);
      }
     }
     return caml_call3(Core_thread[2], 890699316, _bU_, _bT_);
    }
    var ocaml_thread = caml_call2(Core_Or_error[37], 0, _bP_);
    function _bQ_(ocaml_thread){
     var thread_id = caml_call1(of_ocaml_thread, ocaml_thread);
     thread[2] = [0, thread_id];
     t[8] = t[8] + 1 | 0;
     caml_call3(Core_Hashtbl[39], t[11], thread_id, thread);
     return thread;
    }
    var match = caml_call2(Core_Or_error[53], ocaml_thread, _bQ_);
    if(0 === match[0]){var thread$1 = match[1]; return [0, 17724, thread$1];}
    var error = match[1];
    t[10] = [0, [0, now$0, error]];
    return -93515166;
   }
   function inc_unfinished_work(t){
    var unfinished_work = t[14] + 1 | 0;
    t[14] = unfinished_work;
    if(caml_call2(Thread_pool_Import[4], unfinished_work, t[19]))
     t[19] = unfinished_work;
    return;
   }
   function become_helper_thread_internal(priority, name, t, get_thread){
    if(debug[1]) debug_log(cst_become_helper_thread_inter, t, sexp_of_t$5);
    if(! is_in_use(t))
     return caml_call5
             (error, 0, 0, cst_become_helper_thread_inter$0, t, sexp_of_t$5);
    var e = caml_call1(get_thread, t);
    if(0 !== e[0]) return e;
    var
     thread = e[1],
     _bN_ = caml_call2(Core_Option[39], priority, t[5]),
     _bO_ = caml_call2(Core_Option[39], name, cst_helper_thread),
     helper_thread = [0, t[1], -985294899, thread, _bO_, _bN_];
    thread[4] = [0, 954397070, helper_thread];
    return [0, helper_thread];
   }
   function sexp_of_t$6(param){
    var
     max_queue_wait_129 = param[6],
     max_unfinished_work_127 = param[5],
     total_working_time_125 = param[4],
     unfinished_work_123 = param[3],
     num_work_completed_121 = param[2],
     num_threads_119 = param[1],
     arg_130 = caml_call1(Span[10], max_queue_wait_129),
     bnds_118 = [0, [1, [0, _bg_, [0, arg_130, 0]]], 0],
     arg_128 = caml_call1(Core[389], max_unfinished_work_127),
     bnds_118$0 = [0, [1, [0, _bh_, [0, arg_128, 0]]], bnds_118],
     arg_126 = caml_call1(Span[10], total_working_time_125),
     bnds_118$1 = [0, [1, [0, _bi_, [0, arg_126, 0]]], bnds_118$0],
     arg_124 = caml_call1(Core[389], unfinished_work_123),
     bnds_118$2 = [0, [1, [0, _bj_, [0, arg_124, 0]]], bnds_118$1],
     arg_122 = caml_call1(Core[389], num_work_completed_121),
     bnds_118$3 = [0, [1, [0, _bk_, [0, arg_122, 0]]], bnds_118$2],
     arg_120 = caml_call1(Core[389], num_threads_119),
     bnds_118$4 = [0, [1, [0, _bl_, [0, arg_120, 0]]], bnds_118$3];
    return [1, bnds_118$4];
   }
   var Stats = [0, sexp_of_t$6];
   function last_thread_creation_failure$1(t){
    return caml_call2(Core_Option[34], t[10], sexp_of_t$4);
   }
   function critical_section(t, f){
    function _bK_(param){
     function _bL_(param){
      var _bM_ = check_invariant[1];
      return _bM_ ? invariant$0(t) : _bM_;
     }
     return caml_call2(Core[259], f, _bL_);
    }
    return caml_call2(Nano_mutex[12], t[4], _bK_);
   }
   function invariant$1(t){
    return critical_section(t, function(param){return invariant$0(t);});
   }
   function create(cpu_affinity$0, max_num_threads, param){
    function _bI_(t){if(check_invariant[1]) invariant$1(t); return t;}
    if(cpu_affinity$0)
     var sth = cpu_affinity$0[1], cpu_affinity = sth;
    else
     var cpu_affinity = 0;
    var
     _by_ = cpu_affinity ? caml_call1(Core_Or_error[36], Core_thread[16]) : 0;
    if(_by_)
     var _bJ_ = caml_call1(Core_Or_error[46], cst_Thread_pool_create_setaffi);
    else if(caml_call2(Thread_pool_Import[5], max_num_threads, 1))
     var
      _bJ_ =
        caml_call5
         (error,
          0,
          0,
          cst_Thread_pool_create_max_num,
          max_num_threads,
          Core[389]);
    else
     var
      _bz_ = Span[76],
      _bA_ = Span[76],
      _bB_ = Span[76],
      _bC_ = caml_call2(Core_Queue[66], 0, 0),
      _bD_ = caml_call3(_c_, 0, 0, 0),
      _bE_ = caml_call1(Thread_pool_Import[11], 0.5),
      _bF_ = caml_call1(getpriority, 0),
      _bG_ = caml_call1(Nano_mutex[3], 0),
      _bH_ = caml_call1(Thread_safe_ivar[2], 0),
      t =
        [0,
         caml_call1(Pool_id[45], 0),
         -985294899,
         _bH_,
         _bG_,
         _bF_,
         max_num_threads,
         cpu_affinity,
         0,
         _bE_,
         0,
         _bD_,
         0,
         _bC_,
         0,
         0,
         0,
         _bB_,
         _bA_,
         0,
         _bz_],
      _bJ_ = [0, t];
    return caml_call2(Core_Result[46], _bJ_, _bI_);
   }
   function finished_with(t){
    return critical_section
            (t,
             function(param){
              if(debug[1])
               debug_log(cst_Thread_pool_finished_with, t, sexp_of_t$5);
              return -289386606 <= t[2]
                      ? 0
                      : (t[2] = -108502449, maybe_finish(t));
             });
   }
   function block_until_finished(t){
    return caml_call1(Thread_safe_ivar[4], t[3]);
   }
   function sexp_of_t$7(x_131){return sexp_of_t$2(sexp_of_t$3, x_131);}
   var Helper_thread = [0, sexp_of_t$7, default_name, default_priority];
   function add_work(priority, name, t, doit){
    return critical_section
            (t,
             function(param){
              if(debug[1]) debug_log(cst_add_work, t, sexp_of_t$5);
              if(! is_in_use(t))
               return caml_call5
                       (error,
                        0,
                        0,
                        cst_add_work_called_on_finishe,
                        t,
                        sexp_of_t$5);
              var
               _bw_ = caml_call2(Core_Option[39], priority, t[5]),
               _bx_ = caml_call1(now, 0),
               work =
                 [0,
                  caml_call2(Core_Option[39], name, default_thread_name),
                  doit,
                  _bx_,
                  _bw_];
              inc_unfinished_work(t);
              var match = get_available_thread(t);
              if(typeof match === "number")
               caml_call2(Core_Queue[43], t[13], work);
              else{var thread = match[2]; assign_work_to_thread(thread, work);
              }
              return _bb_;
             });
   }
   function become_helper_thread(priority, name, t){
    return critical_section
            (t,
             function(param){
              return become_helper_thread_internal
                      (priority,
                       name,
                       t,
                       function(t){
                        var
                         _bv_ =
                           caml_call1(of_ocaml_thread, caml_call1(Core_thread[3], 0)),
                         match = caml_call2(Core_Hashtbl[56], t[11], _bv_);
                        if(! match)
                         return caml_call1
                                 (Core_Or_error[46], cst_become_helper_thread_not_c);
                        var thread = match[1];
                        return [0, thread];
                       });
             });
   }
   function create_helper_thread(priority, name, t){
    return critical_section
            (t,
             function(param){
              return become_helper_thread_internal
                      (priority,
                       name,
                       t,
                       function(t){
                        var match = get_available_thread(t);
                        if(typeof match === "number")
                         return caml_call5
                                 (error,
                                  0,
                                  _bc_,
                                  cst_create_helper_thread_could,
                                  t,
                                  sexp_of_t$5);
                        var thread = match[2];
                        return [0, thread];
                       });
             });
   }
   function add_work_for_helper_thread(priority, name, t, helper_thread, doit){
    return critical_section
            (t,
             function(param){
              if(debug[1])
               debug_log
                (cst_add_work_for_helper_thread,
                 [0, helper_thread, t],
                 function(param){
                  var
                   arg1_102 = param[2],
                   arg0_101 = param[1],
                   res0_103 = sexp_of_t$2(sexp_of_t$3, arg0_101),
                   res1_104 = sexp_of_t$5(arg1_102);
                  return [1, [0, res0_103, [0, res1_104, 0]]];
                 });
              if(! caml_call2(Pool_id[19], t[1], helper_thread[1]))
               return caml_call5
                       (error,
                        0,
                        0,
                        cst_add_work_for_helper_thread$2,
                        [0, helper_thread, t],
                        function(param){
                         var
                          arg1_106 = param[2],
                          arg0_105 = param[1],
                          res0_107 = sexp_of_t$2(sexp_of_t$3, arg0_105),
                          res1_108 = sexp_of_t$5(arg1_106);
                         return [1, [0, res0_107, [0, res1_108, 0]]];
                        });
              if(! is_in_use(t))
               return caml_call5
                       (error,
                        0,
                        0,
                        cst_add_work_for_helper_thread$1,
                        t,
                        sexp_of_t$5);
              if(-289386606 <= helper_thread[2])
               return caml_call5
                       (error,
                        0,
                        0,
                        cst_add_work_for_helper_thread$0,
                        [0, helper_thread, t],
                        function(param){
                         var
                          arg1_110 = param[2],
                          arg0_109 = param[1],
                          res0_111 = sexp_of_t$2(sexp_of_t$3, arg0_109),
                          res1_112 = sexp_of_t$5(arg1_110);
                         return [1, [0, res0_111, [0, res1_112, 0]]];
                        });
              var thread = helper_thread[3];
              inc_unfinished_work(t);
              var
               _bt_ = caml_call2(Core_Option[39], priority, helper_thread[5]),
               _bu_ = caml_call1(now, 0);
              enqueue_work
               (thread,
                [0,
                 caml_call2(Core_Option[39], name, helper_thread[4]),
                 doit,
                 _bu_,
                 _bt_]);
              return _bd_;
             });
   }
   function finished_with_helper_thread(t, helper_thread){
    return critical_section
            (t,
             function(param){
              if(debug[1])
               debug_log
                (cst_finished_with_helper_threa,
                 [0, helper_thread, t],
                 function(param){
                  var
                   arg1_114 = param[2],
                   arg0_113 = param[1],
                   res0_115 = sexp_of_t$2(sexp_of_t$3, arg0_113),
                   res1_116 = sexp_of_t$5(arg1_114);
                  return [1, [0, res0_115, [0, res1_116, 0]]];
                 });
              if(caml_call2(Pool_id[19], t[1], helper_thread[1]))
               return -289386606 <= helper_thread[2]
                       ? 0
                       : (helper_thread
                          [2]
                         = -108502449,
                         maybe_finish_helper_thread(t, helper_thread));
              var
               _bq_ = [0, [1, [0, _be_, [0, sexp_of_t$5(t), 0]]], 0],
               _br_ =
                 [0,
                  [1,
                   [0, _bf_, [0, sexp_of_t$2(sexp_of_t$3, helper_thread), 0]]],
                  _bq_],
               _bs_ =
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_finished_with_helper_threa$0),
                   _br_]];
              return caml_call1(Core[261], _bs_);
             });
   }
   function get_and_reset_stats(t){
    return critical_section
            (t,
             function(param){
              var match = caml_call1(Core_Queue[49], t[13]);
              if(match)
               var work = match[1], current_queue_wait = enqueued_for(work);
              else
               var current_queue_wait = Span[76];
              var
               max_queue_wait =
                 caml_call2(Span[24], current_queue_wait, t[20]),
               _bm_ = t[17],
               _bn_ = t[16],
               _bo_ = caml_call1(Span[140], 0),
               _bp_ = caml_call2(Span[133], _bo_, _bn_),
               total_active_working_time = caml_call2(Span[102], _bp_, _bm_),
               total_working_time =
                 caml_call2(Span[101], t[18], total_active_working_time),
               stats =
                 [0,
                  t[8],
                  t[15],
                  t[14],
                  total_working_time,
                  t[19],
                  max_queue_wait];
              t[19] = t[14];
              t[20] = Span[76];
              return stats;
             });
   }
   function set_last_thread_creation_failu$0(t, at){
    t[10] = [0, [0, at, caml_call1(Core_Error[14], cst_fake_error)]];
    return 0;
   }
   function set_thread_creation_failure_lo$0(t, span){t[9] = span; return 0;}
   var
    Private =
      [0,
       check_invariant,
       default_thread_name,
       is_finished,
       is_in_use,
       set_last_thread_creation_failu$0,
       set_thread_creation_failure_lo$0];
   caml_call1(Ppx_inline_test_lib[7], cst_thread_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool);
   var
    Thread_pool =
      [0,
       Linux_ext[53],
       sexp_of_t$5,
       invariant$1,
       create,
       cpu_affinity,
       finished_with,
       block_until_finished,
       max_num_threads,
       num_threads,
       unfinished_work$1,
       default_priority$0,
       add_work,
       num_work_completed,
       has_unstarted_work,
       Helper_thread,
       create_helper_thread,
       become_helper_thread,
       add_work_for_helper_thread,
       finished_with_helper_thread,
       last_thread_creation_failure$1,
       thread_creation_failure_lockou,
       debug,
       Stats,
       get_and_reset_stats,
       Private];
   runtime.caml_register_global(170, Thread_pool, cst_Thread_pool$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
