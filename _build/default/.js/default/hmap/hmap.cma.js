// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Hmap
//# unitInfo: Requires: Stdlib, Stdlib__Map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Map = global_data.Stdlib__Map,
    cst_empty_map = "empty map",
    cst_key_not_found_in_map = "key not found in map",
    _a_ = [0, 0],
    cst_Tid = "Tid";
   function Make(Key_info){
    var id = [0, -1];
    function create(info){
     id[1]++;
     var
      uid = id[1],
      Tid = [248, cst_Tid, runtime.caml_fresh_oo_id(0)],
      tid = [0, Tid];
     return [0, uid, tid, info];
    }
    function info(k){return k[3];}
    function hide_type(k){return [0, k];}
    function equal(param, _q_){
     var k1 = _q_[1], k0 = param[1];
     return 0 === caml_int_compare(k0[1], k1[1]) ? 1 : 0;
    }
    function compare(param, _p_){
     var k1 = _p_[1], k0 = param[1];
     return caml_int_compare(k0[1], k1[1]);
    }
    var
     M = caml_call1(Stdlib_Map[1], [0, compare]),
     empty = M[1],
     is_empty = M[31];
    function mem(k, m){return caml_call2(M[32], [0, k], m);}
    function add(k, v, m){return caml_call3(M[2], [0, k], [0, k, v], m);}
    function singleton(k, v){return caml_call2(M[5], [0, k], [0, k, v]);}
    function rem(k, m){return caml_call2(M[6], [0, k], m);}
    function find(k, s){
     try{
      var
       match = caml_call2(M[17], [0, k], s),
       v = match[2],
       k$0 = match[1],
       s$0 = k$0[2],
       r = k[2],
       match$0 = r[1] === s$0[1] ? _a_ : 0,
       _n_ = match$0 ? [0, v] : 0;
      return _n_;
     }
     catch(_o_){
      var _m_ = caml_wrap_exception(_o_);
      if(_m_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_m_, 0);
     }
    }
    function get(k, s){
     var match = find(k, s);
     if(! match) return caml_call1(Stdlib[1], cst_key_not_found_in_map);
     var v = match[1];
     return v;
    }
    function iter(f, m){
     function _l_(param, b){return caml_call1(f, b);}
     return caml_call2(M[23], _l_, m);
    }
    function fold(f, m, acc){
     function _k_(param, b, acc){return caml_call2(f, b, acc);}
     return caml_call3(M[24], _k_, m, acc);
    }
    function for_all(p, m){
     function _j_(param, b){return caml_call1(p, b);}
     return caml_call2(M[35], _j_, m);
    }
    function exists(p, m){
     function _i_(param, b){return caml_call1(p, b);}
     return caml_call2(M[36], _i_, m);
    }
    function filter(p, m){
     function _h_(param, b){return caml_call1(p, b);}
     return caml_call2(M[27], _h_, m);
    }
    function cardinal(m){return caml_call1(M[9], m);}
    function any_binding(m){
     try{var _f_ = [0, caml_call1(M[15], m)[2]]; return _f_;}
     catch(_g_){
      var _e_ = caml_wrap_exception(_g_);
      if(_e_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_e_, 0);
     }
    }
    function get_any_binding(m){
     try{var _c_ = caml_call1(M[15], m)[2]; return _c_;}
     catch(_d_){
      var _b_ = caml_wrap_exception(_d_);
      if(_b_ === Stdlib[8]) return caml_call1(Stdlib[1], cst_empty_map);
      throw caml_maybe_attach_backtrace(_b_, 0);
     }
    }
    return [0,
            [0, create, info, hide_type, equal, compare],
            empty,
            is_empty,
            mem,
            add,
            singleton,
            rem,
            find,
            get,
            iter,
            fold,
            for_all,
            exists,
            filter,
            cardinal,
            any_binding,
            get_any_binding];
   }
   var
    include = Make([0]),
    Key = include[1],
    empty = include[2],
    is_empty = include[3],
    mem = include[4],
    add = include[5],
    singleton = include[6],
    rem = include[7],
    find = include[8],
    get = include[9],
    iter = include[10],
    fold = include[11],
    for_all = include[12],
    exists = include[13],
    filter = include[14],
    cardinal = include[15],
    any_binding = include[16],
    get_any_binding = include[17],
    Hmap =
      [0,
       [0, Key[1], Key[3], Key[4], Key[5]],
       empty,
       is_empty,
       mem,
       add,
       singleton,
       rem,
       find,
       get,
       iter,
       fold,
       for_all,
       exists,
       filter,
       cardinal,
       any_binding,
       get_any_binding,
       Make];
   runtime.caml_register_global(6, Hmap, "Hmap");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJobWFwLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7OztJOztLO0s7O007TTtLO0k7cUIsWTswQixjOzs7Ozs7Ozs7Ozs7O3VCLE8sNkI7MEIsTyx1Qzs2QixPLG9DO3VCLE8sNEI7O0s7TTtPLFE7OztPOzs7O007Ozs7NEI7OztJOztLO2lCLE87O0s7STs7NEIsTyxpQjtLLE87STs7aUMsTyxzQjtLLE87STs7NEIsTyxpQjtLLE87STs7NEIsTyxpQjtLLE87STs7NEIsTyxpQjtLLE87STt5QixPLG9COztLLEksYywwQjs7OzRCOzs7STs7SyxJLFUseUI7Ozs0QixPOzs7STtJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
