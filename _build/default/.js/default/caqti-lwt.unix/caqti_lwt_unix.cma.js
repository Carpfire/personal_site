// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Caqti_lwt_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Caqti_lwt_unix = [0],
    Caqti_lwt_unix$0 = [0, Caqti_lwt_unix];
   runtime.caml_register_global(0, Caqti_lwt_unix$0, "Caqti_lwt_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_lwt_unix__System_unix
//# unitInfo: Requires: Lwt, Lwt_unix, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_unix = global_data.Lwt_unix,
    Stdlib_Option = global_data.Stdlib__Option,
    cst_Caqti_lwt_Unix_poll_No_ope =
      "Caqti_lwt.Unix.poll: No operation specified.";
   function wrap_fd(f, fd){
    return caml_call1(f, caml_call3(Lwt_unix[11], 0, 0, fd));
   }
   function poll(param, opt, _a_, timeout, fd){
    if(opt) var sth = opt[1], read = sth; else var read = 0;
    if(_a_) var sth$0 = _a_[1], write = sth$0; else var write = 0;
    var
     acc = 0,
     acc$0 = read ? [0, caml_call1(Lwt_unix[37], fd), acc] : acc,
     _b_ = write ? [0, caml_call1(Lwt_unix[38], fd), acc$0] : acc$0;
    function _c_(t, acc){return [0, caml_call1(Lwt_unix[7], t), acc];}
    function _d_(_l_){return _l_;}
    var
     choices =
       caml_call1(caml_call3(Stdlib_Option[8], _d_, _c_, timeout), _b_);
    if(0 === choices)
     return caml_call1(Lwt[45], cst_Caqti_lwt_Unix_poll_No_ope);
    function _e_(timed_out){
     var _k_ = caml_call1(Lwt_unix[36], fd);
     return [0, caml_call1(Lwt_unix[35], fd), _k_, timed_out];
    }
    function _f_(exn){
     return exn === Lwt_unix[6] ? Lwt[39] : caml_call1(Lwt[5], exn);
    }
    function _g_(param){
     function _i_(param){return 0;}
     var _j_ = caml_call1(Lwt[17], choices);
     return caml_call2(Lwt[33][2], _j_, _i_);
    }
    var _h_ = caml_call2(Lwt[7], _g_, _f_);
    return caml_call2(Lwt[33][2], _h_, _e_);
   }
   var Unix = [0, wrap_fd, poll], Caqti_lwt_unix_System_unix = [0, Unix];
   runtime.caml_register_global
    (4, Caqti_lwt_unix_System_unix, "Caqti_lwt_unix__System_unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_lwt_unix__System
//# unitInfo: Requires: Caqti_connect_config, Caqti_error, Caqti_lwt, Caqti_platform__Connector, Caqti_platform__Logging, Caqti_platform__Pool, Domain_name, Ipaddr, Logs, Lwt, Lwt_io, Lwt_unix, Mtime, Mtime_clock, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Result, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    opts = [0, [1, 0], 0],
    Caqti_connect_config = global_data.Caqti_connect_config,
    Caqti_platform_Connector = global_data.Caqti_platform__Connector,
    Caqti_platform_Logging = global_data.Caqti_platform__Logging,
    Logs = global_data.Logs,
    Lwt_io = global_data.Lwt_io,
    Lwt_unix = global_data.Lwt_unix,
    Lwt = global_data.Lwt,
    Unix = global_data.Unix,
    Stdlib_Result = global_data.Stdlib__Result,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Domain_name = global_data.Domain_name,
    Ipaddr = global_data.Ipaddr,
    Mtime_clock = global_data.Mtime_clock,
    Mtime = global_data.Mtime,
    Stdlib_Format = global_data.Stdlib__Format,
    Assert_failure = global_data.Assert_failure,
    Caqti_error = global_data.Caqti_error,
    Caqti_lwt = global_data.Caqti_lwt,
    Caqti_platform_Pool = global_data.Caqti_platform__Pool,
    Msg_unix =
      [248, "Caqti_lwt_unix__System.Msg_unix", runtime.caml_fresh_oo_id(0)],
    _c_ =
      [0,
       [11, "TLS configured, but missing caqti-tls-lwt.unix: ", [2, 0, 0]],
       "TLS configured, but missing caqti-tls-lwt.unix: %s"],
    cst_tls = "tls",
    cst_caqti_tls_lwt_unix = "caqti-tls-lwt.unix",
    cst_Cannot_resolve_host_name = "Cannot resolve host name: ",
    _a_ =
      [0,
       [2, 0, [11, " in ", [2, 0, [12, 40, [3, 0, [12, 41, 0]]]]]],
       "%s in %s(%S)"],
    _b_ = [0, "caqti-lwt/lib-unix/system.ml", 26, 10];
   function pp(ppf, param){
    if(param[1] !== Msg_unix)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var
     arg = param[4],
     func = param[3],
     err = param[2],
     _E_ = caml_call1(Unix[2], err);
    return caml_call5(Stdlib_Format[137], ppf, _a_, _E_, func, arg);
   }
   caml_call3(Caqti_error[2], pp, 0, Msg_unix);
   var
    include = Caqti_lwt[3],
    Fiber = include[1],
    Switch = include[2],
    async = include[3],
    Semaphore = include[4],
    Log = include[5],
    Stream = include[6],
    Sequencer = include[7],
    System_core = [0, Fiber, Switch, async, Semaphore, Log, Stream, Sequencer],
    Fiber$0 = System_core[1],
    Switch$0 = System_core[2],
    async$0 = System_core[3],
    Semaphore$0 = System_core[4],
    Log$0 = System_core[5],
    Sequencer$0 = System_core[7];
   function schedule(param, _B_, t, f){
    var t_now = caml_call1(Mtime_clock[2], 0);
    if(caml_call2(Mtime[9], t, t_now))
     var delay = caml_call1(Lwt[57], 0);
    else
     var
      _C_ = caml_call2(Mtime[10], t, t_now),
      _D_ = caml_call1(Mtime[1][23], _C_) * 1e-9,
      delay = caml_call1(Lwt_unix[2], _D_);
    var task = caml_call2(Lwt[33][2], delay, f);
    return [0, function(param){return caml_call1(Lwt[23], task);}];
   }
   function unschedule(alarm){return caml_call1(alarm[1], 0);}
   var
    Alarm = [0, schedule, unschedule],
    Pool = caml_call1(caml_call1(Caqti_platform_Pool[1], System_core), Alarm);
   function unix(s){return [0, s];}
   function tcp(param){
    var port = param[2], addr = param[1], _A_ = caml_call1(Ipaddr[7], addr);
    return [1, caml_call1(Unix[126], _A_), port];
   }
   var Sockaddr = [0, unix, tcp];
   function getaddrinfo(param, host, port){
    function _p_(exn){
     if(exn === Stdlib[8]) return caml_call1(Lwt[42], 0);
     if(exn[1] !== Unix[1]) return caml_call1(Lwt[5], exn);
     var
      code = exn[2],
      _y_ = caml_call1(Unix[2], code),
      _z_ =
        [0,
         3854881,
         caml_call2(Stdlib[28], cst_Cannot_resolve_host_name, _y_)];
     return caml_call1(Lwt[43], _z_);
    }
    function _q_(param){
     var _r_ = Stdlib_Result[1];
     function _s_(ai){return ai[4];}
     var
      _t_ = caml_call1(Stdlib_List[20], _s_),
      _u_ = caml_call1(Stdlib[33], port),
      _v_ = caml_call2(Domain_name[4], 0, host),
      _w_ = caml_call3(Lwt_unix[130], _v_, _u_, opts),
      _x_ = caml_call2(Lwt[33][2], _w_, _t_);
     return caml_call2(Lwt[33][2], _x_, _r_);
    }
    return caml_call2(Lwt[7], _q_, _p_);
   }
   function convert_io_exception(param){
    if(param[1] !== Unix[1]) return 0;
    var arg = param[4], fn = param[3], err = param[2];
    return [0, [0, Msg_unix, err, fn, arg]];
   }
   function output_char(param, data){
    var oc = param[3];
    return caml_call2(Lwt_io[41], oc, data);
   }
   function output_string(param, data){
    var oc = param[3];
    return caml_call2(Lwt_io[43], oc, data);
   }
   function flush(param){
    var oc = param[3];
    return caml_call1(Lwt_io[20], oc);
   }
   function input_char(param){
    var ic = param[2];
    return caml_call1(Lwt_io[29], ic);
   }
   function really_input(param, data, offset, length){
    var ic = param[2];
    return caml_call4(Lwt_io[37], ic, data, offset, length);
   }
   function close(param){
    var oc = param[3];
    return caml_call1(Lwt_io[15], oc);
   }
   var
    Socket =
      [0, output_char, output_string, flush, input_char, really_input, close];
   function connect_tcp(param, _f_, sockaddr){
    var
     domain = caml_call1(Unix[134], sockaddr),
     fd = caml_call4(Lwt_unix[92], 0, domain, 0, 0);
    function _g_(exn){
     if(exn[1] === Unix[1]){
      var
       arg = exn[4],
       fn = exn[3],
       err = exn[2],
       _l_ = function(param){return [1, [0, Msg_unix, err, fn, arg]];},
       _m_ = caml_call1(Lwt_unix[25], fd);
      return caml_call2(Lwt[33][2], _m_, _l_);
     }
     function _n_(param){return caml_call1(Lwt[5], exn);}
     var _o_ = caml_call1(Lwt_unix[25], fd);
     return caml_call2(Lwt[33][1], _o_, _n_);
    }
    function _h_(param){
     try{caml_call1(Lwt_unix[61], fd);}catch(_k_){}
     function _i_(param){
      var
       ic = caml_call1(caml_call3(Lwt_io[13], 0, 0, Lwt_io[2]), fd),
       oc = caml_call1(caml_call3(Lwt_io[13], 0, 0, Lwt_io[3]), fd);
      return [0, [0, [0, fd], ic, oc]];
     }
     var _j_ = caml_call2(Lwt_unix[98], fd, sockaddr);
     return caml_call2(Lwt[33][2], _j_, _i_);
    }
    return caml_call2(Lwt[7], _h_, _g_);
   }
   function tcp_flow_of_socket(param){var fd = param[1]; return fd;}
   function socket_of_tls_flow(param, _e_){
    var oc = _e_[2], ic = _e_[1];
    return [0, 0, ic, oc];
   }
   var tls_providers_r = [0, 0];
   function tls_providers(config){
    if(caml_call2(Caqti_connect_config[7], cst_tls, config)){
     var
      match = caml_call1(Caqti_platform_Connector[2], cst_caqti_tls_lwt_unix);
     if(0 !== match[0]){
      var
       msg = match[1],
       _d_ = function(p){return caml_call4(p, 0, 0, _c_, msg);};
      caml_call2(Logs[12], [0, Caqti_platform_Logging[1]], _d_);
     }
    }
    return tls_providers_r[1];
   }
   function register_tls_provider(p){
    tls_providers_r[1] = [0, p, tls_providers_r[1]];
    return 0;
   }
   var
    Caqti_lwt_unix_System =
      [0,
       Fiber$0,
       Switch$0,
       async$0,
       Semaphore$0,
       Log$0,
       Caqti_lwt[1],
       Sequencer$0,
       [0,
        Sockaddr,
        getaddrinfo,
        convert_io_exception,
        Socket,
        connect_tcp,
        tcp_flow_of_socket,
        socket_of_tls_flow,
        register_tls_provider,
        tls_providers],
       Alarm,
       Pool];
   runtime.caml_register_global
    (29, Caqti_lwt_unix_System, "Caqti_lwt_unix__System");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Caqti_lwt_unix
//# unitInfo: Requires: Caqti_lwt, Caqti_lwt_unix__System, Caqti_lwt_unix__System_unix, Caqti_platform__Connector, Caqti_platform_unix__Driver_loader, Lwt_preemptive
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Caqti_lwt = global_data.Caqti_lwt,
    Caqti_lwt_unix_System_unix = global_data.Caqti_lwt_unix__System_unix,
    Lwt_preemptive = global_data.Lwt_preemptive,
    Caqti_lwt_unix_System = global_data.Caqti_lwt_unix__System,
    Caqti_platform_unix_Driver_loa =
      global_data.Caqti_platform_unix__Driver_loader,
    Caqti_platform_Connector = global_data.Caqti_platform__Connector,
    _a_ =
      [0,
       Caqti_lwt_unix_System_unix[1],
       [0, Lwt_preemptive[1], Lwt_preemptive[2]]],
    Loader =
      caml_call1
       (caml_call1
         (Caqti_platform_unix_Driver_loa[2],
          [0,
           Caqti_lwt_unix_System[1],
           Caqti_lwt_unix_System[2],
           Caqti_lwt_unix_System[3],
           Caqti_lwt_unix_System[4],
           Caqti_lwt_unix_System[5],
           Caqti_lwt_unix_System[6],
           Caqti_lwt_unix_System[7],
           Caqti_lwt_unix_System[8]]),
        _a_),
    _b_ = Caqti_lwt_unix_System[10],
    include =
      caml_call1
       (caml_call1
         (caml_call1
           (Caqti_platform_Connector[3],
            [0,
             Caqti_lwt_unix_System[1],
             Caqti_lwt_unix_System[2],
             Caqti_lwt_unix_System[3],
             Caqti_lwt_unix_System[4],
             Caqti_lwt_unix_System[5],
             Caqti_lwt_unix_System[6],
             Caqti_lwt_unix_System[7],
             Caqti_lwt_unix_System[8]]),
          _b_),
        Loader),
    with_connection = include[2],
    connect_pool = include[3],
    _c_ = include[1];
   function connect(env, config, tweaks_version, opt, uri){
    if(opt) var sth = opt[1], sw = sth; else var sw = Caqti_lwt[2][2];
    return caml_call6(_c_, env, config, tweaks_version, sw, 0, uri);
   }
   function with_connection$0(_g_, _f_, _e_){
    return caml_call4(with_connection, _g_, _f_, _e_, 0);
   }
   function connect_pool$0
   (pool_config, post_connect, env, config, tweaks_version, opt, uri){
    if(opt) var sth = opt[1], sw = sth; else var sw = Caqti_lwt[2][2];
    return caml_call8
            (connect_pool,
             pool_config,
             post_connect,
             env,
             config,
             tweaks_version,
             sw,
             0,
             uri);
   }
   var
    _d_ = Caqti_lwt_unix_System[10],
    Caqti_lwt_unix =
      [0,
       [0, _d_[1], _d_[2], _d_[3]],
       connect,
       with_connection$0,
       connect_pool$0];
   runtime.caml_register_global(6, Caqti_lwt_unix, "Caqti_lwt_unix");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
