// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Prettym__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Prettym = [0];
   runtime.caml_register_global(0, Prettym, "Prettym__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Prettym__Enclosure
//# unitInfo: Requires: Bigstringaf, Fmt, Ke__Fke, Overlap, Stdlib, Stdlib__Array, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = " ",
    cst$2 = "  ",
    cst$1 = " }",
    cst_hov = "<hov>",
    cst$0 = "@ ",
    cst$4 = "@,",
    cst_lib_enclosure_ml = "lib/enclosure.ml",
    cst = "{ ",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_sub = runtime.caml_ba_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    partial =
      [4,
       0,
       0,
       0,
       [12,
        59,
        [17,
         [0, cst$0, 1, 0],
         [11,
          "received= ",
          [4,
           0,
           0,
           0,
           [12,
            59,
            [17,
             [0, cst$0, 1, 0],
             [11, "emitter= #emitter;", [17, 0, [11, cst$1, 0]]]]]]]]]],
    partial$0 =
      [15,
       [17,
        0,
        [12,
         59,
         [17,
          [0, cst$0, 1, 0],
          [11,
           "flush= ",
           [18,
            [1, [0, [11, cst_hov, 0], cst_hov]],
            [15,
             [17,
              0,
              [12, 59, [17, [0, cst$0, 1, 0], [11, "written= ", partial]]]]]]]]]]],
    partial$1 = [1, [0, [11, cst_hov, 0], cst_hov]],
    partial$2 =
      [12,
       59,
       [17,
        [0, cst$0, 1, 0],
        [11, "len= ", [4, 0, 0, 0, [12, 59, [17, 0, [11, cst$1, 0]]]]]]],
    partial$3 =
      [11,
       "m = ",
       [4,
        0,
        0,
        0,
        [12,
         59,
         [17,
          [0, cst$0, 1, 0],
          [11, "q = ", [15, [12, 59, [17, 0, [11, cst$1, 0]]]]]]]]],
    partial$4 = [0, cst$0, 1, 0],
    deadbeef = "\xde\xad\xbe\xef",
    Ke_Fke = global_data.Ke__Fke,
    Assert_failure = global_data.Assert_failure,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Overlap = global_data.Overlap,
    Fmt = global_data.Fmt,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    _Q_ = [0, 8],
    _R_ = [0, 0],
    _P_ = [0, cst_lib_enclosure_ml, 504, 6],
    _O_ = [0, cst_lib_enclosure_ml, 505, 6],
    _M_ = [0, 4],
    _N_ = [0, 0],
    _L_ = [0, cst_lib_enclosure_ml, 493, 6],
    _K_ = [0, cst_lib_enclosure_ml, 494, 6],
    _I_ = [0, 2],
    _J_ = [0, 0],
    _H_ = [0, cst_lib_enclosure_ml, 482, 6],
    _G_ = [0, cst_lib_enclosure_ml, 483, 6],
    _F_ = [0, cst_lib_enclosure_ml, 477, 18],
    _D_ = [0, 1],
    _E_ = [0, 0],
    _C_ = [0, cst_lib_enclosure_ml, 451, 4],
    _B_ = [0, cst_lib_enclosure_ml, 452, 4],
    _A_ = [0, cst_lib_enclosure_ml, 449, 17],
    _y_ = [0, 1],
    _z_ = [0, 0],
    _x_ = [0, cst_lib_enclosure_ml, 440, 4],
    _w_ = [0, cst_lib_enclosure_ml, 441, 4],
    _v_ = [0, cst_lib_enclosure_ml, 438, 17],
    _r_ =
      [0,
       [11,
        cst,
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "sched= ",
          [18,
           [1, [0, [11, cst_hov, 0], cst_hov]],
           [15,
            [17,
             0,
             [12,
              59,
              [17,
               [0, cst$0, 1, 0],
               [11, "write= ", [18, partial$1, partial$0]]]]]]]]]],
       "{ @[<hov>sched= @[<hov>%a@];@ write= @[<hov>%a@];@ flush= @[<hov>%a@];@ written= %d;@ received= %d;@ emitter= #emitter;@] }"],
    cst_flush = "#flush",
    _q_ = [0, cst_lib_enclosure_ml, 162, 8],
    _p_ = [0, cst_lib_enclosure_ml, 154, 4],
    _o_ = [0, cst_lib_enclosure_ml, 150, 4],
    _l_ =
      [0,
       [11,
        cst,
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "buffer= ",
          [18,
           [1, [0, [11, cst_hov, 0], cst_hov]],
           [15,
            [17,
             0,
             [12,
              59,
              [17, [0, cst$0, 1, 0], [11, "off= ", [4, 0, 0, 0, partial$2]]]]]]]]]],
       "{ @[<hov>buffer= @[<hov>%a@];@ off= %d;@ len= %d;@] }"],
    _d_ = [0, [4, 6, [0, 2, 8], 0, [11, ": ", 0]], "%08x: "],
    _i_ = [0, [4, 6, [0, 2, 2], 0, 0], "%02x"],
    _k_ = [0, [11, cst$2, 0], cst$2],
    _j_ = [0, [12, 32, 0], cst$3],
    _e_ = [0, [11, cst$2, 0], cst$2],
    _g_ = [0, [15, 0], "%a"],
    _h_ = [0, [12, 32, 0], cst$3],
    _f_ = [0, [17, [0, cst$4, 0, 0], 0], cst$4],
    _a_ =
      [0,
       [11,
        cst,
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "a = ",
          [15,
           [12,
            59,
            [17,
             [0, cst$0, 1, 0],
             [11, "c = ", [4, 0, 0, 0, [12, 59, [17, partial$4, partial$3]]]]]]]]]],
       "{ @[<hov>a = %a;@ c = %d;@ m = %d;@ q = %a;@] }"],
    cst_Prettym_Enclosure_RBQ_V_Fu = "Prettym__Enclosure.RBQ(V).Full",
    _b_ = Fmt[56];
   function _c_(x){return 94 < x - 32 >>> 0 ? 46 : x;}
   var pp_chr = caml_call2(Fmt[19], _c_, _b_);
   function pp_scalar(get, length, ppf, b){
    var l = caml_call1(length, b), _bj_ = l / 16 | 0, _bi_ = 0;
    if(_bj_ >= 0){
     var i = _bi_;
     for(;;){
      caml_call3(Fmt[3], ppf, _d_, i * 16 | 0);
      var j = [0, 0];
      for(;;){
       if(16 <= j[1]) break;
       if(((i * 16 | 0) + j[1] | 0) < l){
        var _bm_ = caml_call2(get, b, (i * 16 | 0) + j[1] | 0);
        caml_call3(Fmt[3], ppf, _i_, _bm_);
       }
       else
        caml_call2(Fmt[3], ppf, _k_);
       if(0 !== (j[1] % 2 | 0)) caml_call2(Fmt[3], ppf, _j_);
       j[1]++;
      }
      caml_call2(Fmt[3], ppf, _e_);
      j[1] = 0;
      for(;;){
       if(16 <= j[1]) break;
       if(((i * 16 | 0) + j[1] | 0) < l){
        var _bl_ = caml_call2(get, b, (i * 16 | 0) + j[1] | 0);
        caml_call4(Fmt[3], ppf, _g_, pp_chr, _bl_);
       }
       else
        caml_call2(Fmt[3], ppf, _h_);
       j[1]++;
      }
      caml_call2(Fmt[3], ppf, _f_);
      var _bk_ = i + 1 | 0;
      if(_bj_ === i) break;
      var i = _bk_;
     }
    }
    return 0;
   }
   function pp$0(ppf, param){
    switch(param[0]){
      case 0:
       var x = param[1];
       return pp_scalar(runtime.caml_ba_get_1, Bigstringaf[6], ppf, x);
      case 1:
       var x$0 = param[1];
       return pp_scalar
               (runtime.caml_string_get, caml_ml_string_length, ppf, x$0);
      default:
       var x$1 = param[1];
       return pp_scalar
               (runtime.caml_bytes_get, caml_ml_bytes_length, ppf, x$1);
    }
   }
   function weight(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Bigstringaf[6], x);
      case 1:
       var x$0 = param[1]; return caml_ml_string_length(x$0);
      default: var x$1 = param[1]; return caml_ml_bytes_length(x$1);
    }
   }
   function sub(buffer, off, len){
    switch(buffer[0]){
      case 0:
       var x = buffer[1]; return [0, caml_call3(Bigstringaf[5], x, off, len)];
      case 1:
       var x$0 = buffer[1];
       return [1, caml_call3(Stdlib_String[16], x$0, off, len)];
      default:
       var x$1 = buffer[1];
       return [2, caml_call3(Stdlib_Bytes[7], x$1, off, len)];
    }
   }
   function weight$0(param){var len = param[3]; return len;}
   function pp$1(ppf, t){
    return caml_call6(Fmt[3], ppf, _l_, pp$0, t[1], t[2], t[3]);
   }
   var sentinel = [0, [1, deadbeef], 0, 4];
   function length(param){var len = param[3]; return len;}
   var _m_ = 0;
   function _n_(a, x){return x[3] + a | 0;}
   var lengthv = caml_call2(Stdlib_List[26], _n_, _m_);
   function shift(param, n){
    var len = param[3], off = param[2], buffer = param[1];
    if(n <= len) return [0, buffer, off + n | 0, len - n | 0];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
   }
   function split(param, n){
    var len = param[3], off = param[2], buffer = param[1];
    if(n > len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var _bh_ = [0, sub(buffer, off + n | 0, len - n | 0), 0, len - n | 0];
    return [0, [0, sub(buffer, off, n), 0, n], _bh_];
   }
   function merge(a, b){
    var _bg_ = a[1];
    switch(_bg_[0]){
      case 0:
       var a$0 = _bg_[1];
       if(0 === b[1][0])
        return (a[2] + a[3] | 0) === b[2]
                ? [0, [0, [0, a$0], a[2], a[3] + b[3] | 0]]
                : 0;
       break;
      case 1: break;
      default:
       var match = b[1], a$1 = _bg_[1];
       if(2 === match[0]){
        var b$0 = match[1];
        if(a$1 === b$0)
         return (a[2] + a[3] | 0) === b[2]
                 ? [0, [0, [2, a$1], a[2], a[3] + b[3] | 0]]
                 : 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
       }
    }
    return 0;
   }
   function pp(ppf, t){
    var
     a = caml_make_vect(caml_call1(Ke_Fke[18][5], t[4]), sentinel),
     x = [0, 0],
     _a9_ = t[4];
    function _a__(i){
     var _be_ = caml_check_bound(t[1], i)[1 + i], _bf_ = x[1];
     caml_check_bound(a, _bf_)[1 + _bf_] = _be_;
     x[1]++;
     return 0;
    }
    caml_call2(Ke_Fke[18][18], _a__, _a9_);
    var
     _a$_ = t[4],
     _ba_ = caml_call1(Ke_Fke[18][22], Fmt[45]),
     _bb_ = t[3],
     _bc_ = t[2],
     _bd_ = caml_call1(Fmt[70][8], pp$1);
    return caml_call8(Fmt[3], ppf, _a_, _bd_, a, _bc_, _bb_, _ba_, _a$_);
   }
   function mask(x, t){return x & (t[3] - 1 | 0);}
   var
    Full = [248, cst_Prettym_Enclosure_RBQ_V_Fu, runtime.caml_fresh_oo_id(0)];
   function pp_flush(ppf, param){return caml_call2(Fmt[57], ppf, cst_flush);}
   function pp$2(ppf, t){
    var
     _a3_ = t[5],
     _a4_ = t[4],
     _a5_ = t[3],
     _a6_ = caml_call2(Ke_Fke[16], 0, pp_flush),
     _a7_ = t[2],
     _a8_ = caml_call2(Ke_Fke[18][21], 0, pp_chr);
    return caml_call10
            (Fmt[3], ppf, _r_, pp, t[1], _a8_, _a7_, _a6_, _a5_, _a4_, _a3_);
   }
   function is_empty(t){
    var t$0 = t[1];
    return caml_call1(Ke_Fke[18][3], t$0[4]);
   }
   function create(emitter, len){
    var
     write = caml_call2(Ke_Fke[18][4], [0, len], 12)[1],
     capacity$0 = len * 2 | 0,
     _a2_ = Ke_Fke[2],
     match = caml_call2(Ke_Fke[18][4], [0, capacity$0], 8),
     capacity = match[2],
     q = match[1];
    return [0,
            [0, caml_make_vect(capacity, sentinel), 0, capacity, q],
            write,
            _a2_,
            0,
            0,
            emitter];
   }
   function check(iovec, param){
    var write = param[2], match = iovec[1];
    if(0 !== match[0]) return 0;
    var x = match[1], buf = caml_call1(Ke_Fke[18][23], write);
    return caml_call2(Overlap[3], x, buf) ? 1 : 0;
   }
   function flush(k, t$6){
    var t$1 = t$6[1], _aG_ = t$1[4], _aH_ = 0;
    function _aI_(a, i){return a + caml_check_bound(t$1[1], i)[1 + i][3] | 0;}
    var written = caml_call3(Ke_Fke[18][20], _aI_, _aH_, _aG_);
    function go(t){
     try{
      var
       _aZ_ = caml_call1(Ke_Fke[10], t[3]),
       flush = _aZ_[2],
       match = _aZ_[1],
       f = match[2],
       threshold = match[1],
       _a0_ =
         0
          <=
           runtime.caml_int_compare
            ((t[4] + written | 0) - Stdlib[20] | 0,
             threshold - Stdlib[20] | 0)
          ? (caml_call2
             (f, written, [0, t[1], t[2], flush, t[4], t[5], t[6]]),
            go([0, t[1], t[2], flush, t[4], t[5], t[6]]))
          : t;
      return _a0_;
     }
     catch(_a1_){
      var _aY_ = caml_wrap_exception(_a1_);
      if(_aY_ === Ke_Fke[1]) return t;
      throw caml_maybe_attach_backtrace(_aY_, 0);
     }
    }
    var t$0 = go(t$6), t$7 = t$0[1], res = [0, 0], _aJ_ = t$7[4];
    function _aK_(i){
     var _aX_ = res[1];
     res[1] = [0, caml_check_bound(t$7[1], i)[1 + i], _aX_];
     return 0;
    }
    caml_call2(Ke_Fke[18][19], _aK_, _aJ_);
    var drain = caml_call1(t$0[6], res[1]);
    a:
    {
     var rest = drain, t$2 = t$0;
     for(;;){
      try{
       var
        t$3 = t$2[1],
        match = caml_call1(Ke_Fke[18][10], t$3[4]),
        q = match[2],
        i = match[1],
        shifted = [0, t$3[1], t$3[2], t$3[3], q],
        iovec = caml_check_bound(t$3[1], i)[1 + i];
      }
      catch(_aW_){
       var _aL_ = caml_wrap_exception(_aW_);
       if(_aL_ !== Ke_Fke[18][1]) throw caml_maybe_attach_backtrace(_aL_, 0);
       var t$5 = t$2;
       break a;
      }
      var len = iovec[3];
      if(len > rest) break;
      var
       _aM_ = t$2[6],
       _aN_ = t$2[5],
       _aO_ = t$2[4],
       _aP_ = t$2[3],
       _aQ_ =
         check(iovec, t$2)
          ? caml_call2(Ke_Fke[18][17][6], t$2[2], len)
          : t$2[2],
       t$4 = [0, shifted, _aQ_, _aP_, _aO_, _aN_, _aM_],
       rest$0 = rest - len | 0,
       rest = rest$0,
       t$2 = t$4;
     }
     var
      _aR_ = t$2[6],
      _aS_ = t$2[5],
      _aT_ = t$2[4],
      _aU_ = t$2[3],
      _aV_ =
        check(iovec, t$2)
         ? caml_call2(Ke_Fke[18][17][6], t$2[2], rest)
         : t$2[2],
      v = shift(iovec, rest),
      i$0 = mask(shifted[2], shifted),
      match$0 = caml_call2(Ke_Fke[18][13], shifted[4], i$0);
     if(match$0){
      var q$0 = match$0[1];
      caml_check_bound(shifted[1], i$0)[1 + i$0] = v;
      var match$1 = [0, [0, shifted[1], shifted[2] + 1 | 0, shifted[3], q$0]];
     }
     else
      var match$1 = [1, shifted];
     if(0 !== match$1[0]) throw caml_maybe_attach_backtrace(Full, 1);
     var t = match$1[1], t$5 = [0, t, _aV_, _aU_, _aT_, _aS_, _aR_];
    }
    return caml_call1
            (k,
             [0,
              t$5[1],
              t$5[2],
              t$5[3],
              (t$5[4] + drain | 0) + drain | 0,
              t$5[5],
              t$5[6]]);
   }
   function schedule(k, length, buffer, opt, len, v, t){
    var k$0 = k, opt$0 = opt, len$0 = len;
    for(;;){
     if(opt$0) var sth = opt$0[1], off = sth; else var off = 0;
     if(len$0)
      var len$1 = len$0[1], len$2 = len$1;
     else
      var len$2 = caml_call1(length, v) - off | 0;
     var
      v$0 = [0, caml_call1(buffer, v), off, len$2],
      t$0 = t[1],
      i = mask(t$0[2], t$0),
      match = caml_call2(Ke_Fke[18][8], t$0[4], i);
     if(match){
      var q = match[1];
      caml_check_bound(t$0[1], i)[1 + i] = v$0;
      var match$0 = [0, [0, t$0[1], t$0[2] + 1 | 0, t$0[3], q]];
     }
     else
      var match$0 = [1, t$0];
     if(0 === match$0[0]){
      var sched = match$0[1];
      return caml_call1
              (k$0, [0, sched, t[2], t[3], t[4], t[5] + len$2 | 0, t[6]]);
     }
     var
      t$1 = t[1],
      max = caml_call1(Ke_Fke[18][6], t$1[4]),
      k$3 =
        function(max, k, off, len){
         function k$0(t){
          return schedule
                  (k,
                   length,
                   buffer,
                   [0, off + max | 0],
                   [0, len - max | 0],
                   v,
                   t);
         }
         return k$0;
        },
      k$1 = k$3(max, k$0, off, len$2),
      len$3 = [0, max],
      opt$1 = [0, off],
      k$4 =
        function(k){function k$0(_aF_){return flush(k, _aF_);} return k$0;},
      k$2 = k$4(k$1),
      k$0 = k$2,
      opt$0 = opt$1,
      len$0 = len$3;
    }
   }
   var length$0 = caml_ml_string_length;
   function buffer(x){return [1, x];}
   function kschedule_string(k, t, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return schedule(k, length$0, buffer, [0, off], len, v, t);
   }
   function _s_(_aE_){return _aE_;}
   function schedule_string(_aA_, _aB_, _aC_, _aD_){
    return kschedule_string(_s_, _aA_, _aB_, _aC_, _aD_);
   }
   var length$1 = caml_ml_bytes_length;
   function buffer$0(x){return [2, x];}
   function kschedule_bytes(k, t, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return schedule(k, length$1, buffer$0, [0, off], len, v, t);
   }
   function _t_(_az_){return _az_;}
   function schedule_bytes(_av_, _aw_, _ax_, _ay_){
    return kschedule_bytes(_t_, _av_, _aw_, _ax_, _ay_);
   }
   var length$2 = caml_ba_dim_1;
   function buffer$1(x){return [0, x];}
   function kschedule_bigstring(k, t, opt, len, v){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return schedule(k, length$2, buffer$1, [0, off], len, v, t);
   }
   function _u_(_au_){return _au_;}
   function schedule_bigstring(_aq_, _ar_, _as_, _at_){
    return kschedule_bigstring(_u_, _aq_, _ar_, _as_, _at_);
   }
   function schedule_flush(f, t){
    var
     _am_ = t[6],
     _an_ = t[5],
     _ao_ = t[4],
     _ap_ = caml_call2(Ke_Fke[5], t[3], [0, t[5], f]);
    return [0, t[1], t[2], _ap_, _ao_, _an_, _am_];
   }
   function kschedulev_bigstring(k, l, t){
    function go(t, param){
     if(! param) return caml_call1(k, t);
     var r = param[2], buffer = param[1], _ak_ = 0, _al_ = 0;
     return kschedule_bigstring
             (function(t){return go(t, r);}, t, _al_, _ak_, buffer);
    }
    return go(t, l);
   }
   function kwrite(k, blit, length, opt, len, buffer, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(length, buffer) - off | 0;
    var available = caml_call1(Ke_Fke[18][6], t[2]);
    if(len$1 <= available){
     var
      match =
        caml_call6
         (Ke_Fke[18][17][1], t[2], blit, length, [0, off], [0, len$1], buffer),
      write = match[2],
      areas = match[1];
     return kschedulev_bigstring
             (k, areas, [0, t[1], write, t[3], t[4], t[5], t[6]]);
    }
    if(0 < available){
     var
      k$0 =
        function(t){
         return kwrite
                 (k,
                  blit,
                  length,
                  [0, off + available | 0],
                  [0, len$1 - available | 0],
                  buffer,
                  t);
        },
      match$0 =
        caml_call6
         (Ke_Fke[18][17][1],
          t[2],
          blit,
          length,
          [0, off],
          [0, available],
          buffer),
      write$0 = match$0[2],
      areas$0 = match$0[1],
      _ai_ = [0, t[1], write$0, t[3], t[4], t[5], t[6]];
     return kschedulev_bigstring
             (function(_aj_){return flush(k$0, _aj_);}, areas$0, _ai_);
    }
    function k$1(t){
     return kwrite(k, blit, length, [0, off], [0, len$1], buffer, t);
    }
    return flush(k$1, t);
   }
   function bigarray_blit_from_string(src, src_off, dst, dst_off, len){
    return caml_call5(Bigstringaf[24], src, src_off, dst, dst_off, len);
   }
   function bigarray_blit_from_bytes(src, src_off, dst, dst_off, len){
    return caml_call5(Bigstringaf[25], src, src_off, dst, dst_off, len);
   }
   function bigarray_blit(src, src_off, dst, dst_off, len){
    var _ah_ = caml_ba_sub(dst, dst_off, len);
    return runtime.caml_ba_blit(caml_ba_sub(src, src_off, len), _ah_);
   }
   var length$3 = caml_ml_string_length;
   function k(_ag_){return _ag_;}
   function write_string(opt, len, a, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return kwrite(k, bigarray_blit_from_string, length$3, [0, off], len, a, t);
   }
   var length$4 = caml_ml_bytes_length;
   function k$0(_af_){return _af_;}
   function write_bytes(opt, len, a, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return kwrite
            (k$0, bigarray_blit_from_bytes, length$4, [0, off], len, a, t);
   }
   var length$5 = caml_ba_dim_1;
   function k$1(_ae_){return _ae_;}
   function write_bigstring(opt, len, a, t){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    return kwrite(k$1, bigarray_blit, length$5, [0, off], len, a, t);
   }
   function length$6(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
   }
   function blit(src, src_off, dst, dst_off, len){
    if(0 !== src_off)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
    if(1 === len) return caml_ba_set_1(dst, dst_off, src);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
   }
   function k$2(_ad_){return _ad_;}
   function write_char(a, t){
    return kwrite(k$2, blit, length$6, _z_, _y_, a, t);
   }
   function length$7(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
   }
   function blit$0(src, src_off, dst, dst_off, len){
    if(0 !== src_off)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
    if(1 === len) return caml_ba_set_1(dst, dst_off, src);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
   }
   function k$3(_ac_){return _ac_;}
   function write_uint8(a, t){
    return kwrite(k$3, blit$0, length$7, _E_, _D_, a, t);
   }
   function Make(X){
    function length(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
    }
    function blit(src, src_off, dst, dst_off, len){
     if(0 !== src_off)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
     if(2 === len) return caml_call3(X[1], dst, dst_off, src);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
    }
    function kwrite_uint16(k, a, t){
     return kwrite(k, blit, length, _J_, _I_, a, t);
    }
    function _S_(_ab_){return _ab_;}
    function write_uint16(_$_, _aa_){return kwrite_uint16(_S_, _$_, _aa_);}
    function blit$0(src, src_off, dst, dst_off, len){
     if(0 !== src_off)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
     if(4 === len) return caml_call3(X[2], dst, dst_off, src);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
    }
    function kwrite_uint32(k, a, t){
     return kwrite(k, blit$0, length, _N_, _M_, a, t);
    }
    function _T_(___){return ___;}
    function write_uint32(_Y_, _Z_){return kwrite_uint32(_T_, _Y_, _Z_);}
    function blit$1(src, src_off, dst, dst_off, len){
     if(0 !== src_off)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _P_], 1);
     if(8 === len) return caml_call3(X[3], dst, dst_off, src);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
    }
    function kwrite_uint64(k, a, t){
     return kwrite(k, blit$1, length, _R_, _Q_, a, t);
    }
    function _U_(_X_){return _X_;}
    function write_uint64(_V_, _W_){return kwrite_uint64(_U_, _V_, _W_);}
    return [0, , write_uint16, , write_uint32, , write_uint64];
   }
   var
    set_int16 = Bigstringaf[11],
    set_int32 = Bigstringaf[13],
    set_int64 = Bigstringaf[15],
    LE = [0, set_int16, set_int32, set_int64],
    set_int16$0 = Bigstringaf[18],
    set_int32$0 = Bigstringaf[20],
    set_int64$0 = Bigstringaf[22],
    BE = [0, set_int16$0, set_int32$0, set_int64$0],
    LE$0 = Make(LE),
    BE$0 = Make(BE),
    Prettym_Enclosure =
      [0,
       [0, weight, sub],
       [0, weight$0, length, lengthv, shift, split, merge],
       is_empty,
       pp$2,
       schedule_flush,
       schedule_bigstring,
       kschedule_bigstring,
       schedule_string,
       kschedule_string,
       schedule_bytes,
       kschedule_bytes,
       write_char,
       write_string,
       write_bigstring,
       write_bytes,
       write_uint8,
       flush,
       [0, LE$0[2], LE$0[4], LE$0[6]],
       [0, BE$0[2], BE$0[4], BE$0[6]],
       create];
   runtime.caml_register_global(49, Prettym_Enclosure, "Prettym__Enclosure");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Prettym__Pretty
//# unitInfo: Requires: Bigstringaf, Fmt, Ke__Fke, Prettym__Enclosure, Stdlib, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_S = "%S",
    cst_Indent = "(`Indent ",
    cst_Indent_d = "(`Indent %d)",
    cst_hov = "<hov>",
    cst$0 = "@ ",
    cst_root = "[<root>",
    cst_lib_pretty_ml = "lib/pretty.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call15
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14){
    return (f.l >= 0 ? f.l : f.l = f.length) == 15
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\r\n",
    partial = [17, 0, [11, " }", 0]],
    partial$0 =
      [11,
       "queue= ",
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [15,
         [17,
          0,
          [12,
           59,
           [17,
            [0, cst$0, 1, 0],
            [11,
             "encoder= ",
             [18,
              [1, [0, [11, cst_hov, 0], cst_hov]],
              [15, [17, 0, [12, 59, partial]]]]]]]]]]],
    partial$1 = [0, cst$0, 1, 0],
    partial$2 =
      [4,
       0,
       0,
       0,
       [12,
        59,
        [17,
         [0, cst$0, 1, 0],
         [11,
          "margin= ",
          [4,
           0,
           0,
           0,
           [12,
            59,
            [17,
             [0, cst$0, 1, 0],
             [11, "new_line= ", [3, 0, [12, 59, [17, partial$1, partial$0]]]]]]]]]]],
    partial$3 =
      [15,
       [17,
        0,
        [12,
         59,
         [17,
          [0, cst$0, 1, 0],
          [11,
           "inner= ",
           [18,
            [1, [0, [11, cst_hov, 0], cst_hov]],
            [15,
             [17,
              0,
              [12, 59, [17, [0, cst$0, 1, 0], [11, "indent= ", partial$2]]]]]]]]]]],
    partial$4 = [1, [0, [11, cst_hov, 0], cst_hov]],
    fws = [2, 1, 1],
    Ke_Fke = global_data.Ke__Fke,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Prettym_Enclosure = global_data.Prettym__Enclosure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Fmt = global_data.Fmt,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Bigstringaf = global_data.Bigstringaf,
    _m_ = [0, cst_lib_pretty_ml, 315, 14],
    _n_ = [2, 3306987],
    cst_In = "In",
    _l_ =
      [0,
       [11,
        "{ ",
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "boxes= ",
          [18,
           [1, [0, [11, cst_hov, 0], cst_hov]],
           [15,
            [17,
             0,
             [12,
              59,
              [17,
               [0, cst$0, 1, 0],
               [11, "breaks= ", [18, partial$4, partial$3]]]]]]]]]],
       "{ @[<hov>boxes= @[<hov>%a@];@ breaks= @[<hov>%a@];@ inner= @[<hov>%a@];@ indent= %d;@ margin= %d;@ new_line= %S;@ queue= @[<hov>%a@];@ encoder= @[<hov>%a@];@] }"],
    _d_ = [0, [12, 93, 0], "]"],
    _e_ = [0, [3, 0, 0], cst_S],
    _f_ = [0, [3, 0, 0], cst_S],
    _g_ = [0, [3, 0, 0], cst_S],
    _h_ = [0, [12, 60, [3, 0, [12, 62, 0]]], "<%S>"],
    _i_ = [0, [11, cst_root, 0], cst_root],
    _j_ = [0, [12, 91, 0], "["],
    _k_ = [0, [11, "[<", [4, 0, 0, 0, [12, 62, 0]]], "[<%d>"],
    _c_ = [0, [11, cst_Indent, [4, 0, 0, 0, [12, 41, 0]]], cst_Indent_d],
    cst_Root = "`Root",
    cst_Box = "`Box",
    _b_ = [0, [11, cst_Indent, [4, 0, 0, 0, [12, 41, 0]]], cst_Indent_d],
    _a_ = [0, cst_lib_pretty_ml, 22, 2],
    cst_Prettym_Pretty_Stack_Empty = "Prettym__Pretty.Stack.Empty";
   function length_of_value(param){var vec = param[1]; return vec[2];}
   var box = 0;
   function tbox(indent){return [0, indent];}
   var bbox = 1;
   function o(box){return [3, box];}
   var new_line = 0, close = 1;
   function spaces(len){return [2, len, 0];}
   function break$0(len, indent){return [2, len, indent];}
   function v(breakable){
    return breakable
            ? function(x){return [0, x];}
            : function(x){return [1, x];};
   }
   function string(opt, _cS_, len, x){
    if(opt) var sth = opt[1], breakable = sth; else var breakable = 0;
    if(_cS_) var sth$0 = _cS_[1], off = sth$0; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = runtime.caml_ml_string_length(x) - off | 0;
    var value = [0, [0, off, len$1], x];
    return v(breakable)(value);
   }
   function bytes(opt, _cR_, len, x){
    if(opt) var sth = opt[1], breakable = sth; else var breakable = 0;
    if(_cR_) var sth$0 = _cR_[1], off = sth$0; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = runtime.caml_ml_bytes_length(x) - off | 0;
    var value = [1, [0, off, len$1], x];
    return v(breakable)(value);
   }
   function bigstring(opt, _cQ_, len, x){
    if(opt) var sth = opt[1], breakable = sth; else var breakable = 0;
    if(_cQ_) var sth$0 = _cQ_[1], off = sth$0; else var off = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_call1(Bigstringaf[6], x) - off | 0;
    var value = [2, [0, off, len$1], x];
    return v(breakable)(value);
   }
   function length_of_token(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var value = param[1]; return length_of_value(value);
      case 1:
       var len = param[1]; return len;
      default: return 0;
    }
   }
   var
    Empty = [248, cst_Prettym_Pretty_Stack_Empty, caml_fresh_oo_id(0)],
    empty = 0;
   function swap_exn(f, param){
    if(! param) throw caml_maybe_attach_backtrace(Empty, 1);
    var r = param[2], x = param[1];
    return [0, caml_call1(f, x), r];
   }
   var fold = Stdlib_List[26];
   function tail_exn(param){
    if(! param) throw caml_maybe_attach_backtrace(Empty, 1);
    var r = param[2];
    return r;
   }
   function map(f, l){return caml_call2(Stdlib_List[20], f, l);}
   var pp = Fmt[70][7];
   function pp_box(ppf, param){
    if(typeof param === "number")
     return 914889282 <= param
             ? caml_call2(Fmt[57], ppf, cst_Root)
             : caml_call2(Fmt[57], ppf, cst_Box);
    var n = param[2];
    return caml_call3(Fmt[3], ppf, _b_, n);
   }
   function pp_break(ppf, param){
    var n = param[2];
    return caml_call3(Fmt[3], ppf, _c_, n);
   }
   function pp_token(ppf, param){
    if(typeof param === "number") return caml_call2(Fmt[3], ppf, _d_);
    switch(param[0]){
      case 0:
       var _cL_ = param[1];
       switch(_cL_[0]){
         case 0:
          var
           x = _cL_[2],
           match = _cL_[1],
           len = match[2],
           off = match[1],
           _cM_ = caml_call3(Stdlib_String[16], x, off, len);
          return caml_call3(Fmt[3], ppf, _e_, _cM_);
         case 1:
          var
           x$0 = _cL_[2],
           match$0 = _cL_[1],
           len$0 = match$0[2],
           off$0 = match$0[1],
           _cN_ = caml_call3(Stdlib_Bytes[8], x$0, off$0, len$0);
          return caml_call3(Fmt[3], ppf, _f_, _cN_);
         default:
          var
           x$1 = _cL_[2],
           match$1 = _cL_[1],
           len$1 = match$1[2],
           off$1 = match$1[1],
           _cO_ = caml_call3(Bigstringaf[7], x$1, off$1, len$1);
          return caml_call3(Fmt[3], ppf, _g_, _cO_);
       }
      case 1:
       var len$2 = param[1], _cP_ = caml_call2(Stdlib_String[1], len$2, 32);
       return caml_call3(Fmt[3], ppf, _h_, _cP_);
      default:
       var match$2 = param[1];
       if(typeof match$2 === "number")
        return 914889282 <= match$2
                ? caml_call2(Fmt[3], ppf, _i_)
                : caml_call2(Fmt[3], ppf, _j_);
       var n = match$2[2];
       return caml_call3(Fmt[3], ppf, _k_, n);
    }
   }
   function pp$0(ppf, t){
    var
     _cy_ = t[8],
     _cz_ = Prettym_Enclosure[4],
     _cA_ = t[7],
     _cB_ = caml_call2(Ke_Fke[16], 0, pp_token),
     _cC_ = t[6],
     _cD_ = t[5],
     _cE_ = t[4],
     _cF_ = t[3],
     _cG_ = caml_call1(pp, caml_call1(Fmt[70][7], Fmt[45])),
     _cH_ = t[2],
     _cI_ = caml_call1(pp, caml_call1(Fmt[70][7], pp_break)),
     _cJ_ = t[1],
     _cK_ = caml_call1(pp, pp_box);
    return caml_call15
            (Fmt[3],
             ppf,
             _l_,
             _cK_,
             _cJ_,
             _cI_,
             _cH_,
             _cG_,
             _cF_,
             _cE_,
             _cD_,
             _cC_,
             _cB_,
             _cA_,
             _cz_,
             _cy_);
   }
   function symbol(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function flip(f, a, b){return caml_call2(f, b, a);}
   function emit_line(k, t){
    function go(queue, encoder){
     var queue$0 = queue;
     for(;;){
      var match = caml_call1(Ke_Fke[9], queue$0);
      if(! match){
       var
        k$0 =
          function(encoder){
           return caml_call1
                   (k,
                    [0, t[1], t[2], t[3], t[4], t[5], t[6], Ke_Fke[2], encoder]);
          },
        k$1 =
          function(encoder){
           return caml_call2(Prettym_Enclosure[17], k$0, encoder);
          };
       return caml_call5(Prettym_Enclosure[9], k$1, encoder, 0, 0, t[6]);
      }
      var _cf_ = match[1], match$0 = _cf_[1];
      if(typeof match$0 !== "number")
       switch(match$0[0]){
         case 0:
          var _cg_ = match$0[1];
          switch(_cg_[0]){
            case 0:
             var
              queue$2 = _cf_[2],
              v = _cg_[2],
              match$1 = _cg_[1],
              len = match$1[2],
              off = match$1[1],
              _ch_ = [0, len],
              _ci_ = [0, off],
              _cj_ = function(_cx_){return go(queue$2, _cx_);};
             return caml_call5
                     (Prettym_Enclosure[9], _cj_, encoder, _ci_, _ch_, v);
            case 1:
             var
              queue$3 = _cf_[2],
              v$0 = _cg_[2],
              match$2 = _cg_[1],
              len$0 = match$2[2],
              off$0 = match$2[1],
              _ck_ = [0, len$0],
              _cl_ = [0, off$0],
              _cm_ = function(_cw_){return go(queue$3, _cw_);};
             return caml_call5
                     (Prettym_Enclosure[11], _cm_, encoder, _cl_, _ck_, v$0);
            default:
             var
              queue$4 = _cf_[2],
              v$1 = _cg_[2],
              match$3 = _cg_[1],
              len$1 = match$3[2],
              off$1 = match$3[1],
              _cn_ = [0, len$1],
              _co_ = [0, off$1],
              _cp_ = function(_cv_){return go(queue$4, _cv_);};
             return caml_call5
                     (Prettym_Enclosure[7], _cp_, encoder, _co_, _cn_, v$1);
          }
         case 1:
          var
           queue$5 = _cf_[2],
           len$2 = match$0[1],
           _cq_ = caml_call2(Stdlib_String[1], len$2, 32),
           _cr_ = [0, len$2],
           _cs_ = 0,
           _ct_ = function(_cu_){return go(queue$5, _cu_);};
          return caml_call5
                  (Prettym_Enclosure[9], _ct_, encoder, _cs_, _cr_, _cq_);
       }
      var queue$1 = _cf_[2], queue$0 = queue$1;
     }
    }
    var
     _b__ = caml_call2(Stdlib_String[1], t[4], 32),
     _b$_ = 0,
     _ca_ = 0,
     _cb_ = t[8],
     _cc_ = t[7];
    function _cd_(_ce_){return go(_cc_, _ce_);}
    return caml_call5(Prettym_Enclosure[9], _cd_, _cb_, _ca_, _b$_, _b__);
   }
   function merge_indents(k, t){
    var
     _bY_ = t[1],
     _bZ_ = 0,
     indent_by_box =
       caml_call3
        (fold,
         function(a, param){
          if(typeof param === "number") return a;
          var n = param[2];
          return a + n | 0;
         },
         _bZ_,
         _bY_);
    function k$0(a, l){
     function _b9_(a, param){
      var n = param[2];
      return caml_call2(Stdlib[17], a, n);
     }
     return caml_call3(Stdlib_List[26], _b9_, a, l);
    }
    var
     indent_by_break = caml_call3(fold, k$0, 0, t[2]),
     _b0_ = t[8],
     _b1_ = t[7],
     _b2_ = t[6],
     _b3_ = t[5],
     _b4_ = indent_by_box + indent_by_break | 0,
     _b5_ = t[1],
     _b6_ = map(function(param){return 0;}, _b5_),
     _b7_ = t[1],
     _b8_ = map(function(param){return 0;}, _b7_);
    return caml_call1(k, [0, t[1], _b8_, _b6_, _b4_, _b3_, _b2_, _b1_, _b0_]);
   }
   function is_in_box(t){
    var In = [248, cst_In, caml_fresh_oo_id(0)];
    try{
     var
      _bU_ = t[7],
      _bV_ =
        function(param){
         if(typeof param !== "number" && 2 === param[0])
          throw caml_maybe_attach_backtrace(In, 1);
         return 0;
        };
     caml_call2(Ke_Fke[14], _bV_, _bU_);
     var _bW_ = 0;
     return _bW_;
    }
    catch(_bX_){
     var _bT_ = caml_wrap_exception(_bX_);
     if(_bT_ === In) return 1;
     throw caml_maybe_attach_backtrace(_bT_, 0);
    }
   }
   function without_last_box(q){
    var q$0 = q;
    for(;;){
     var match = caml_call1(Ke_Fke[11], q$0);
     if(! match) return Ke_Fke[2];
     var _bR_ = match[1], q$1 = _bR_[1], _bS_ = _bR_[2];
     if(typeof _bS_ !== "number" && 2 === _bS_[0]) return q$1;
     var q$0 = q$1;
    }
   }
   function unroll_last_box_and_emit(k, value, t){
    var q$1 = t[7], acc$1 = [0, [0, value], 0], acc = acc$1, q = q$1;
    for(;;){
     var match = caml_call1(Ke_Fke[12], q), x = match[2], q$0 = match[1];
     if(typeof x !== "number" && 2 === x[0]){
      var
       box = caml_call1(Stdlib_List[10], [0, x, acc]),
       k$0 =
         function(t){
          var
           q$1 = t[7],
           acc$1 = caml_call1(Stdlib_List[10], box),
           acc = acc$1,
           q = q$1;
          for(;;){
           if(! acc)
            return caml_call1
                    (k, [0, t[1], t[2], t[3], t[4], t[5], t[6], q, t[8]]);
           var
            acc$0 = acc[2],
            x = acc[1],
            q$0 = caml_call2(Ke_Fke[5], q, x),
            acc = acc$0,
            q = q$0;
          }
         },
       _bP_ = [0, t[1], t[2], t[3], t[4], t[5], t[6], q$0, t[8]];
      return emit_line(function(_bQ_){return merge_indents(k$0, _bQ_);}, _bP_);
     }
     var acc$0 = [0, x, acc], acc = acc$0, q = q$0;
    }
   }
   function kpush(k, value, t){
    var _S_ = t[7], _T_ = 0;
    function _U_(_bO_, _bN_){return _bO_ + _bN_ | 0;}
    function _V_(_bM_){return symbol(_U_, length_of_token, _bM_);}
    function _W_(_bK_, _bL_){return flip(_V_, _bK_, _bL_);}
    var
     _X_ = caml_call3(Ke_Fke[15], _W_, _T_, _S_),
     current_length_of_line = t[4] + _X_ | 0;
    function append(stack, len){
     if(stack)
      var r = stack[2], x = stack[1], match = [0, [0, x, r]];
     else
      var match = 0;
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
     var match$0 = match[1], stack$0 = match$0[2], lenv = match$0[1];
     return [0, [0, len, lenv], stack$0];
    }
    if(typeof value === "number"){
     if(0 === value)
      return emit_line(function(_bJ_){return merge_indents(k, _bJ_);}, t);
     var
      _aD_ = t[8],
      _aE_ = caml_call2(Ke_Fke[5], t[7], 0),
      _aF_ = t[6],
      _aG_ = t[5],
      _aH_ = t[4],
      _aI_ = tail_exn(t[3]),
      _aJ_ = tail_exn(t[2]);
     return caml_call1
             (k,
              [0, tail_exn(t[1]), _aJ_, _aI_, _aH_, _aG_, _aF_, _aE_, _aD_]);
    }
    switch(value[0]){
      case 0:
       var value$0 = value[1];
       if(t[5] <= current_length_of_line){
        var
         _Y_ = [0, value$0],
         _Z_ = function(_bI_){return kpush(k, _Y_, _bI_);};
        return emit_line(function(_bH_){return merge_indents(_Z_, _bH_);}, t);
       }
       var ___ = t[5];
       if(___ >= (current_length_of_line + length_of_token([0, value$0]) | 0)){
        var
         _ae_ = t[8],
         _af_ = caml_call2(Ke_Fke[5], t[7], [0, value$0]),
         _ag_ = t[6],
         _ah_ = t[5],
         _ai_ = t[4],
         _aj_ = t[3],
         _ak_ =
           swap_exn
            (function(lenv){return [0, length_of_value(value$0), lenv];},
             _aj_);
        return caml_call1
                (k, [0, t[1], t[2], _ak_, _ai_, _ah_, _ag_, _af_, _ae_]);
       }
       if(is_in_box(t)){
        var _$_ = without_last_box(t[7]);
        if(! caml_call1(Ke_Fke[3], _$_))
         return unroll_last_box_and_emit(k, value$0, t);
       }
       var len$0 = t[5] - current_length_of_line | 0;
       if(0 >= len$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
       switch(value$0[0]){
         case 0:
          var
           v$0 = value$0[2],
           vec = value$0[1],
           v0 = caml_call3(Stdlib_String[16], v$0, 0, len$0),
           v1 = caml_call3(Stdlib_String[16], v$0, len$0, vec[2] - len$0 | 0),
           match =
             [0, [0, [0, 0, len$0], v0], [0, [0, 0, vec[2] - len$0 | 0], v1]];
          break;
         case 1:
          var
           v$1 = value$0[2],
           vec$0 = value$0[1],
           v0$0 = caml_call3(Stdlib_Bytes[7], v$1, 0, len$0),
           v1$0 =
             caml_call3(Stdlib_Bytes[7], v$1, len$0, vec$0[2] - len$0 | 0),
           match =
             [0,
              [1, [0, 0, len$0], v0$0],
              [1, [0, 0, vec$0[2] - len$0 | 0], v1$0]];
          break;
         default:
          var
           v$2 = value$0[2],
           vec$1 = value$0[1],
           match =
             [0,
              [2, [0, vec$1[1], len$0], v$2],
              [2, [0, vec$1[1] + len$0 | 0, vec$1[2] - len$0 | 0], v$2]];
       }
       var
        value1 = match[2],
        value0 = match[1],
        token0 = [0, value0],
        token1 = v(1)(value1),
        _aa_ = t[8],
        _ab_ = caml_call2(Ke_Fke[5], t[7], token0),
        _ac_ = [0, t[1], t[2], t[3], t[4], t[5], t[6], _ab_, _aa_],
        _ad_ = function(_bG_){return kpush(k, token1, _bG_);};
       return emit_line
               (function(_bF_){return merge_indents(_ad_, _bF_);}, _ac_);
      case 1:
       var value$1 = value[1], _al_ = t[5];
       if
        (_al_ < (current_length_of_line + length_of_token([0, value$1]) | 0)
         && ! caml_call1(Ke_Fke[3], t[7])){
        if(is_in_box(t)){
         var _at_ = without_last_box(t[7]);
         if(! caml_call1(Ke_Fke[3], _at_))
          return unroll_last_box_and_emit(k, value$1, t);
        }
        var match$0 = caml_call1(Ke_Fke[11], t[7]);
        if(! match$0){
         var
          _aB_ = [1, value$1],
          _aC_ = function(_bE_){return kpush(k, _aB_, _bE_);};
         return emit_line
                 (function(_bD_){return merge_indents(_aC_, _bD_);}, t);
        }
        var _au_ = match$0[1], _av_ = _au_[2];
        if(typeof _av_ !== "number" && 1 === _av_[0]){
         var
          queue$0 = _au_[1],
          _ay_ = [0, t[1], t[2], t[3], t[4], t[5], t[6], queue$0, t[8]],
          _az_ = [1, value$1],
          _aA_ = function(_bC_){return kpush(k, _az_, _bC_);};
         return emit_line
                 (function(_bB_){return merge_indents(_aA_, _bB_);}, _ay_);
        }
        var
         _aw_ = [1, value$1],
         _ax_ = function(_bA_){return kpush(k, _aw_, _bA_);};
        return emit_line(function(_bz_){return merge_indents(_ax_, _bz_);}, t);
       }
       var
        _am_ = t[8],
        _an_ = caml_call2(Ke_Fke[5], t[7], [0, value$1]),
        _ao_ = t[6],
        _ap_ = t[5],
        _aq_ = t[4],
        _ar_ = t[3],
        _as_ =
          swap_exn
           (function(lenv){return [0, length_of_value(value$1), lenv];}, _ar_);
       return caml_call1
               (k, [0, t[1], t[2], _as_, _aq_, _ap_, _ao_, _an_, _am_]);
      case 2:
       var
        indent = value[2],
        len$1 = value[1],
        x$1 = caml_call1(Ke_Fke[11], t[7]);
       if(x$1){
        var x = x$1[1], x$0 = x[2], queue = x[1];
        a:
        {
         if
          (typeof value !== "number"
           && 2 === value[0] && typeof x$0 !== "number" && 1 === x$0[0]){
          var
           len = x$0[1],
           len_x = value[1],
           _R_ = [0, [0, queue, len_x + len | 0]];
          break a;
         }
         var _R_ = 0;
        }
        var match$1 = _R_;
       }
       else
        var match$1 = 0;
       if(match$1){
        var
         match$2 = match$1[1],
         len$2 = match$2[2],
         queue$1 = match$2[1],
         _aK_ = t[5];
        if(_aK_ <= (current_length_of_line + length_of_token([1, len$2]) | 0)){
         var
          _aL_ = t[8],
          _aM_ = t[6],
          _aN_ = t[5],
          _aO_ = t[4],
          _aP_ = t[3],
          _aQ_ = append(t[2], [0, -930643828, indent]),
          _aR_ = [0, t[1], _aQ_, _aP_, _aO_, _aN_, _aM_, queue$1, _aL_];
         return emit_line
                 (function(_by_){return merge_indents(k, _by_);}, _aR_);
        }
        var
         _aS_ = t[8],
         _aT_ = caml_call2(Ke_Fke[5], queue$1, [1, len$2]),
         _aU_ = t[6],
         _aV_ = t[5],
         _aW_ = t[4],
         _aX_ = append(t[3], len$2),
         _aY_ = append(t[2], [0, -930643828, indent]);
        return caml_call1
                (k, [0, t[1], _aY_, _aX_, _aW_, _aV_, _aU_, _aT_, _aS_]);
       }
       var _aZ_ = t[5];
       if(_aZ_ < (current_length_of_line + length_of_token([1, len$1]) | 0)){
        var
         _a0_ = t[8],
         _a1_ = t[7],
         _a2_ = t[6],
         _a3_ = t[5],
         _a4_ = t[4],
         _a5_ = t[3],
         _a6_ = append(t[2], [0, -930643828, indent]),
         _a7_ = [0, t[1], _a6_, _a5_, _a4_, _a3_, _a2_, _a1_, _a0_];
        return emit_line(function(_bx_){return merge_indents(k, _bx_);}, _a7_);
       }
       var
        _a8_ = t[8],
        _a9_ = caml_call2(Ke_Fke[5], t[7], [1, len$1]),
        _a__ = t[6],
        _a$_ = t[5],
        _ba_ = t[4],
        _bb_ = append(t[3], len$1),
        _bc_ = append(t[2], [0, -930643828, indent]);
       return caml_call1
               (k, [0, t[1], _bc_, _bb_, _ba_, _a$_, _a__, _a9_, _a8_]);
      default:
       var match$3 = value[1];
       if(typeof match$3 !== "number"){
        var
         indent$1 = match$3[1],
         _bo_ = t[8],
         _bp_ = caml_call2(Ke_Fke[5], t[7], [2, [0, -930643828, indent$1]]);
        return caml_call1
                (k,
                 [0,
                  [0, [0, -930643828, indent$1], t[1]],
                  [0, 0, t[2]],
                  [0, 0, t[3]],
                  t[4],
                  t[5],
                  t[6],
                  _bp_,
                  _bo_]);
       }
       if(match$3){
        var
         _bd_ = t[3],
         _be_ = 0,
         _bf_ = 0,
         _bg_ = function(_bw_, _bv_){return _bw_ + _bv_ | 0;},
         _bh_ = caml_call2(Stdlib_List[26], _bg_, _bf_),
         _bi_ = function(_bu_, _bt_){return _bu_ + _bt_ | 0;},
         _bj_ = function(_bs_){return symbol(_bi_, _bh_, _bs_);},
         indent$0 =
           caml_call3
            (fold,
             function(_bq_, _br_){return flip(_bj_, _bq_, _br_);},
             _be_,
             _bd_),
         _bk_ = t[8],
         _bl_ = caml_call2(Ke_Fke[5], t[7], [2, [0, -930643828, indent$0]]);
        return caml_call1
                (k,
                 [0,
                  [0, [0, -930643828, indent$0], t[1]],
                  [0, 0, t[2]],
                  [0, 0, t[3]],
                  t[4],
                  t[5],
                  t[6],
                  _bl_,
                  _bk_]);
       }
       var _bm_ = t[8], _bn_ = caml_call2(Ke_Fke[5], t[7], _n_);
       return caml_call1
               (k,
                [0,
                 [0, 3306987, t[1]],
                 [0, 0, t[2]],
                 [0, 0, t[3]],
                 t[4],
                 t[5],
                 t[6],
                 _bn_,
                 _bm_]);
    }
   }
   function kflush(k, t){
    function go(queue, encoder){
     var queue$0 = queue;
     for(;;){
      var match = caml_call1(Ke_Fke[9], queue$0);
      if(! match){
       var
        _M_ =
          function(encoder){
           return caml_call1
                   (k,
                    [0, t[1], t[2], t[3], t[4], t[5], t[6], Ke_Fke[2], encoder]);
          };
       return caml_call2(Prettym_Enclosure[17], _M_, encoder);
      }
      var _x_ = match[1], match$0 = _x_[1];
      if(typeof match$0 !== "number")
       switch(match$0[0]){
         case 0:
          var _y_ = match$0[1];
          switch(_y_[0]){
            case 0:
             var
              queue$2 = _x_[2],
              v = _y_[2],
              match$1 = _y_[1],
              len = match$1[2],
              off = match$1[1],
              _z_ = [0, len],
              _A_ = [0, off],
              _B_ = function(_Q_){return go(queue$2, _Q_);};
             return caml_call5
                     (Prettym_Enclosure[9], _B_, encoder, _A_, _z_, v);
            case 1:
             var
              queue$3 = _x_[2],
              v$0 = _y_[2],
              match$2 = _y_[1],
              len$0 = match$2[2],
              off$0 = match$2[1],
              _C_ = [0, len$0],
              _D_ = [0, off$0],
              _E_ = function(_P_){return go(queue$3, _P_);};
             return caml_call5
                     (Prettym_Enclosure[11], _E_, encoder, _D_, _C_, v$0);
            default:
             var
              queue$4 = _x_[2],
              v$1 = _y_[2],
              match$3 = _y_[1],
              len$1 = match$3[2],
              off$1 = match$3[1],
              _F_ = [0, len$1],
              _G_ = [0, off$1],
              _H_ = function(_O_){return go(queue$4, _O_);};
             return caml_call5
                     (Prettym_Enclosure[7], _H_, encoder, _G_, _F_, v$1);
          }
         case 1:
          var
           queue$5 = _x_[2],
           len$2 = match$0[1],
           _I_ = caml_call2(Stdlib_String[1], len$2, 32),
           _J_ = [0, len$2],
           _K_ = 0,
           _L_ = function(_N_){return go(queue$5, _N_);};
          return caml_call5(Prettym_Enclosure[9], _L_, encoder, _K_, _J_, _I_);
       }
      var queue$1 = _x_[2], queue$0 = queue$1;
     }
    }
    return go(t[7], t[8]);
   }
   function _o_(_w_){return _w_;}
   function push(_u_, _v_){return kpush(_o_, _u_, _v_);}
   function _p_(_t_){return _t_;}
   function flush(_s_){return kflush(_p_, _s_);}
   function is_empty(t){
    var _r_ = caml_call1(Ke_Fke[3], t[7]);
    return _r_ ? caml_call1(Prettym_Enclosure[3], t[8]) : _r_;
   }
   function create(opt, _q_, emitter, len){
    if(opt) var sth = opt[1], margin = sth; else var margin = 998;
    if(_q_) var sth$0 = _q_[1], new_line = sth$0; else var new_line = cst;
    var encoder = caml_call2(Prettym_Enclosure[20], emitter, len);
    return [0,
            [0, 914889282, empty],
            [0, 0, empty],
            [0, 0, empty],
            0,
            margin,
            new_line,
            Ke_Fke[2],
            encoder];
   }
   var
    Prettym_Pretty =
      [0,
       pp$0,
       box,
       tbox,
       bbox,
       o,
       new_line,
       close,
       string,
       bytes,
       bigstring,
       fws,
       spaces,
       break$0,
       kpush,
       push,
       kflush,
       flush,
       is_empty,
       create];
   runtime.caml_register_global(41, Prettym_Pretty, "Prettym__Pretty");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Prettym__Fancy
//# unitInfo: Requires: Prettym__Pretty, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    fws = [3, 1, 1],
    cut = [3, 0, 0],
    Prettym_Pretty = global_data.Prettym__Pretty,
    Stdlib_String = global_data.Stdlib__String,
    _e_ = [0, 1],
    _d_ = [0, 0],
    _c_ = [0, 0],
    _b_ = [0, 0],
    _a_ = [0, 0];
   function keval_order(k, t, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return function(encoder, v){
         return caml_call1(k, caml_call2(encoder, t, v));};
       case 1:
        return caml_call3(Prettym_Pretty[14], k, Prettym_Pretty[6], t);
       default:
        return caml_call3(Prettym_Pretty[14], k, Prettym_Pretty[7], t);
     }
    switch(param[0]){
      case 0:
       var v = param[2], encoder = param[1];
       return caml_call1(k, caml_call2(encoder, t, v));
      case 1:
       var encoder$0 = param[1];
       return function(v){return caml_call1(k, caml_call2(encoder$0, t, v));};
      case 2:
       var box = param[1], _h_ = caml_call1(Prettym_Pretty[5], box);
       return caml_call3(Prettym_Pretty[14], k, _h_, t);
      default:
       var
        len = param[2],
        indent = param[1],
        _i_ = caml_call2(Prettym_Pretty[13], len, indent);
       return caml_call3(Prettym_Pretty[14], k, _i_, t);
    }
   }
   function const$0(encoder, v){return [0, encoder, v];}
   function atom(encoder){return [1, encoder];}
   var a = 0, new_line = 1;
   function tbox(indent){return [2, caml_call1(Prettym_Pretty[3], indent)];}
   var bbox = [2, Prettym_Pretty[4]], box = [2, Prettym_Pretty[2]], close = 2;
   function break$0(indent, len){return [3, indent, len];}
   function spaces(len){return [3, 0, len];}
   function using(f, encoder, t, v){
    return caml_call2(encoder, t, caml_call1(f, v));
   }
   function list(param, encoder){
    var e = param[2], sep = param[1];
    function go(t, param){
     var t$0 = t, param$0 = param;
     for(;;){
      if(! param$0) return t$0;
      var x = param$0[1];
      if(! param$0[2]) return caml_call2(encoder, t$0, x);
      var
       r = param$0[2],
       t$1 = caml_call2(encoder, t$0, x),
       t$2 = caml_call2(sep, t$1, e),
       t$0 = t$2,
       param$0 = r;
     }
    }
    return go;
   }
   function option(encoder, t, param){
    if(! param) return t;
    var x = param[1];
    return caml_call2(encoder, t, x);
   }
   function char$0(t, x){
    var
     _g_ = caml_call2(Stdlib_String[1], 1, x),
     atom = caml_call4(Prettym_Pretty[8], _a_, 0, 0, _g_);
    return caml_call2(Prettym_Pretty[15], atom, t);
   }
   function string(t, x){
    var atom = caml_call4(Prettym_Pretty[8], _b_, 0, 0, x);
    return caml_call2(Prettym_Pretty[15], atom, t);
   }
   function bytes(t, x){
    var atom = caml_call4(Prettym_Pretty[9], _c_, 0, 0, x);
    return caml_call2(Prettym_Pretty[15], atom, t);
   }
   function bigstring(t, x){
    var atom = caml_call4(Prettym_Pretty[10], _d_, 0, 0, x);
    return caml_call2(Prettym_Pretty[15], atom, t);
   }
   function breakable(t, x){
    var atom = caml_call4(Prettym_Pretty[8], _e_, 0, 0, x);
    return caml_call2(Prettym_Pretty[15], atom, t);
   }
   function concat(l1, l2){
    if(! l1) return l2;
    var t = l1[2], h = l1[1];
    return [0, h, concat(t, l2)];
   }
   function keval(k, t, param){
    if(! param) return caml_call1(k, t);
    var r = param[2], x = param[1];
    function k$0(t){return keval(k, t, r);}
    return keval_order(k$0, t, x);
   }
   function eval$0(t, fmt){return keval(function(_f_){return _f_;}, t, fmt);}
   var
    Prettym_Fancy =
      [0,
       keval_order,
       break$0,
       fws,
       spaces,
       cut,
       const$0,
       atom,
       a,
       atom,
       const$0,
       new_line,
       tbox,
       bbox,
       box,
       close,
       using,
       string,
       bytes,
       bigstring,
       breakable,
       char$0,
       list,
       option,
       concat,
       keval,
       eval$0];
   runtime.caml_register_global(9, Prettym_Fancy, "Prettym__Fancy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Prettym
//# unitInfo: Requires: Bigstringaf, Fmt, Prettym__Enclosure, Prettym__Fancy, Prettym__Pretty, Stdlib__Buffer, Stdlib__List, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "\r\n",
    cst_Leave_a_non_empty_encoder = "Leave a non-empty encoder",
    cst_Leave_with_a_non_empty_enc = "Leave with a non-empty encoder",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Prettym_Pretty = global_data.Prettym__Pretty,
    Fmt = global_data.Fmt,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Prettym_Fancy = global_data.Prettym__Fancy,
    Prettym_Enclosure = global_data.Prettym__Enclosure,
    keval_order = Prettym_Fancy[1],
    break$0 = Prettym_Fancy[2],
    fws = Prettym_Fancy[3],
    spaces = Prettym_Fancy[4],
    cut = Prettym_Fancy[5],
    const$0 = Prettym_Fancy[6],
    atom = Prettym_Fancy[7],
    a = Prettym_Fancy[8],
    symbol = Prettym_Fancy[9],
    symbol$0 = Prettym_Fancy[10],
    new_line = Prettym_Fancy[11],
    tbox = Prettym_Fancy[12],
    bbox = Prettym_Fancy[13],
    box = Prettym_Fancy[14],
    close = Prettym_Fancy[15],
    using = Prettym_Fancy[16],
    string = Prettym_Fancy[17],
    bytes = Prettym_Fancy[18],
    bigstring = Prettym_Fancy[19],
    breakable = Prettym_Fancy[20],
    char$0 = Prettym_Fancy[21],
    list = Prettym_Fancy[22],
    option = Prettym_Fancy[23],
    concat = Prettym_Fancy[24],
    keval = Prettym_Fancy[25],
    eval$0 = Prettym_Fancy[26],
    create = Prettym_Pretty[19],
    is_empty = Prettym_Pretty[18],
    flush = Prettym_Pretty[17],
    kflush = Prettym_Pretty[16],
    _b_ =
      [0,
       [11, cst_Leave_with_a_non_empty_enc, 0],
       cst_Leave_with_a_non_empty_enc],
    _a_ =
      [0,
       [11, cst_Leave_a_non_empty_encoder, 0],
       cst_Leave_a_non_empty_encoder],
    io_buffer_size = 65536;
   function to_string(opt, _g_, gen, value){
    if(opt) var sth = opt[1], margin = sth; else var margin = 78;
    if(_g_) var sth$0 = _g_[1], new_line = sth$0; else var new_line = cst;
    var buf = caml_call1(Stdlib_Buffer[1], 256);
    function write(a, x){
     var match = x[1];
     switch(match[0]){
       case 0:
        var
         len = x[3],
         off = x[2],
         x$0 = match[1],
         x$1 = caml_call3(Bigstringaf[7], x$0, off, len);
        caml_call2(Stdlib_Buffer[16], buf, x$1);
        return a + len | 0;
       case 1:
        var len$0 = x[3], off$0 = x[2], x$2 = match[1];
        caml_call4(Stdlib_Buffer[18], buf, x$2, off$0, len$0);
        return a + len$0 | 0;
       default:
        var len$1 = x[3], off$1 = x[2], x$3 = match[1];
        caml_call4(Stdlib_Buffer[19], buf, x$3, off$1, len$1);
        return a + len$1 | 0;
     }
    }
    var
     emitter = caml_call2(Stdlib_List[26], write, 0),
     encoder =
       caml_call4
        (Prettym_Pretty[19], [0, margin], [0, new_line], emitter, 256);
    function kend(encoder){
     return caml_call1(Prettym_Pretty[18], encoder)
             ? 0
             : caml_call1(Fmt[11], _a_);
    }
    var
     encoder$0 =
       caml_call3
        (eval$0, encoder, [0, caml_call1(Prettym_Fancy[9], gen), 0], value);
    caml_call2(Prettym_Pretty[16], kend, encoder$0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function to_stream(opt, _c_, gen, value){
    if(opt) var sth = opt[1], margin = sth; else var margin = 78;
    if(_c_) var sth$0 = _c_[1], new_line = sth$0; else var new_line = cst$0;
    var
     queue = caml_call1(Stdlib_Queue[2], 0),
     line = caml_call1(Stdlib_Buffer[1], 4096);
    function emitter(iovecs){
     function write(a, x){
      var match = x[1];
      switch(match[0]){
        case 0:
         var
          len = x[3],
          off = x[2],
          x$0 = match[1],
          x$1 = caml_call3(Bigstringaf[7], x$0, off, len);
         caml_call2(Stdlib_Buffer[16], line, x$1);
         return a + len | 0;
        case 1:
         var len$0 = x[3], off$0 = x[2], x$2 = match[1];
         caml_call4(Stdlib_Buffer[18], line, x$2, off$0, len$0);
         return a + len$0 | 0;
        default:
         var len$1 = x[3], off$1 = x[2], x$3 = match[1];
         caml_call4(Stdlib_Buffer[19], line, x$3, off$1, len$1);
         return a + len$1 | 0;
      }
     }
     var
      len = caml_call3(Stdlib_List[26], write, 0, iovecs),
      res = caml_call1(Stdlib_Buffer[2], line);
     if(0 < runtime.caml_ml_string_length(res))
      caml_call2(Stdlib_Queue[3], res, queue);
     caml_call1(Stdlib_Buffer[8], line);
     return len;
    }
    function consumer(param){
     try{var x = caml_call1(Stdlib_Queue[7], queue);}
     catch(_f_){
      var _e_ = caml_wrap_exception(_f_);
      if(_e_ === Stdlib_Queue[1]) return 0;
      throw caml_maybe_attach_backtrace(_e_, 0);
     }
     return [0, x];
    }
    var
     encoder =
       caml_call4
        (Prettym_Pretty[19], [0, margin], [0, new_line], emitter, 4096);
    function kend(encoder){
     return caml_call1(Prettym_Pretty[18], encoder)
             ? 0
             : caml_call1(Fmt[11], _b_);
    }
    var _d_ = [0, caml_call1(Prettym_Fancy[9], gen), 0];
    caml_call4
     (keval, caml_call1(Prettym_Pretty[16], kend), encoder, _d_, value);
    return consumer;
   }
   var
    Prettym =
      [0,
       keval_order,
       break$0,
       fws,
       spaces,
       cut,
       const$0,
       atom,
       a,
       symbol,
       symbol$0,
       new_line,
       tbox,
       bbox,
       box,
       close,
       using,
       string,
       bytes,
       bigstring,
       breakable,
       char$0,
       list,
       option,
       concat,
       keval,
       eval$0,
       Prettym_Enclosure[1],
       Prettym_Enclosure[2],
       io_buffer_size,
       create,
       is_empty,
       flush,
       kflush,
       to_string,
       to_stream];
   runtime.caml_register_global(12, Prettym, "Prettym");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
