// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_log__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_log = [0],
    Async_log$0 = [0, Async_log];
   runtime.caml_register_global(0, Async_log$0, "Async_log__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Rotation_id_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Rotation_id_intf = "Async_log__Rotation_id_intf",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Rotation_id_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/rotation_id_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "rotation_id_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Rotation_id_intf);
   var Async_log_Rotation_id_intf = [0];
   runtime.caml_register_global
    (11, Async_log_Rotation_id_intf, cst_Async_log_Rotation_id_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Rotation_id
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Rotation_id = "Async_log__Rotation_id",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Rotation_id);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/rotation_id.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "rotation_id.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Rotation_id);
   var Async_log_Rotation_id = [0];
   runtime.caml_register_global
    (11, Async_log_Rotation_id, cst_Async_log_Rotation_id);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Import = "Async_log__Import",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Import);
   var Async_log_Import = [0];
   runtime.caml_register_global(11, Async_log_Import, cst_Async_log_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Import_stable
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Import_stable = "Async_log__Import_stable",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Import_stable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/import_stable.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "import_stable.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Import_stable);
   var Async_log_Import_stable = [0];
   runtime.caml_register_global
    (11, Async_log_Import_stable, cst_Async_log_Import_stable);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Rotation
//# unitInfo: Requires: Base__Field, Core, Core__Byte_units, Core__Ofday_float, Core__Option, Core__Span_float, Core__Stable, Core__Time_float, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Rotation$0 = "Async_log__Rotation",
    cst_async_log$0 = "async_log",
    cst_messages$0 = "messages",
    cst_size$0 = "size",
    cst_time$0 = "time";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Time_float_unix = global_data.Time_float_unix,
    Core = global_data.Core,
    Core_Time_float = global_data.Core__Time_float,
    Base_Field = global_data.Base__Field,
    Core_Byte_units = global_data.Core__Byte_units,
    Core_Option = global_data.Core__Option,
    Core_Span_float = global_data.Core__Span_float,
    Core_Stable = global_data.Core__Stable,
    Core_Ofday_float = global_data.Core__Ofday_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Rotation$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/rotation.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log$0, "rotation.ml");
   var
    _k_ = [0, "zone"],
    _l_ = [0, "naming_scheme"],
    _m_ = [0, "All"],
    _r_ = [0, "Newer_than"],
    _s_ = [0, "At_least"],
    _n_ = [0, "keep"],
    _o_ = [0, cst_time$0],
    _p_ = [0, cst_size$0],
    _q_ = [0, cst_messages$0],
    _b_ = [0, "Timestamped"],
    _c_ = [0, "Dated"],
    _a_ = [0, "Numbered"],
    _d_ = [0, "User_defined"],
    cst_time = cst_time$0,
    cst_size = cst_size$0,
    cst_messages = cst_messages$0,
    cst_async_log = cst_async_log$0,
    cst_Async_log_Rotation = cst_Async_log_Rotation$0;
   function zone(r){return r[6];}
   function naming_scheme(r){return r[5];}
   function keep(r){return r[4];}
   function time(r){return r[3];}
   function size(r){return r[2];}
   function messages(r){return r[1];}
   function _e_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}
   var
    _f_ = 0,
    field = [0, function(param){return 0;}, cst_time, _f_, time, _e_];
   function _g_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6]];}
   var
    _h_ = 0,
    field$0 = [0, function(param){return 0;}, cst_size, _h_, size, _g_];
   function _i_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}
   var
    _j_ = 0,
    messages$0 =
      [0, function(param){return 0;}, cst_messages, _j_, messages, _i_];
   function sexp_of_t(param){
    var
     zone_020 = param[6],
     naming_scheme_018 = param[5],
     keep_014 = param[4],
     time_010 = param[3],
     size_006 = param[2],
     messages_002 = param[1],
     arg_021 = caml_call1(Time_float_unix[117][6][1][15], zone_020),
     bnds_001 = [0, [1, [0, _k_, [0, arg_021, 0]]], 0],
     arg_019 =
       typeof naming_scheme_018 === "number"
        ? 871538568
          === naming_scheme_018
          ? _a_
          : 989931157 <= naming_scheme_018 ? _b_ : _c_
        : _d_,
     bnds_001$0 = [0, [1, [0, _l_, [0, arg_019, 0]]], bnds_001];
    if(typeof keep_014 === "number")
     var arg_015 = _m_;
    else{
     if(-485091469 <= keep_014[1])
      var
       v_016 = keep_014[2],
       _u_ =
         [1, [0, _r_, [0, caml_call1(Core_Span_float[118][3][2], v_016), 0]]];
     else
      var
       v_017 = keep_014[2],
       _u_ = [1, [0, _s_, [0, caml_call1(Core_Stable[333], v_017), 0]]];
     var arg_015 = _u_;
    }
    var bnds_001$1 = [0, [1, [0, _n_, [0, arg_015, 0]]], bnds_001$0];
    if(time_010)
     var
      v_011 = time_010[1],
      arg_013 = caml_call1(Core_Ofday_float[79][1][13], v_011),
      bnd_012 = [1, [0, _o_, [0, arg_013, 0]]],
      bnds_001$2 = [0, bnd_012, bnds_001$1];
    else
     var bnds_001$2 = bnds_001$1;
    if(size_006)
     var
      v_007 = size_006[1],
      arg_009 = caml_call1(Core_Byte_units[84][1][14], v_007),
      bnd_008 = [1, [0, _p_, [0, arg_009, 0]]],
      bnds_001$3 = [0, bnd_008, bnds_001$2];
    else
     var bnds_001$3 = bnds_001$2;
    if(messages_002)
     var
      v_003 = messages_002[1],
      arg_005 = caml_call1(Core_Stable[333], v_003),
      bnd_004 = [1, [0, _q_, [0, arg_005, 0]]],
      bnds_001$4 = [0, bnd_004, bnds_001$3];
    else
     var bnds_001$4 = bnds_001$3;
    return [1, bnds_001$4];
   }
   function create(messages, size, time, zone, keep, naming_scheme, param){
    var _t_ = caml_call1(Core[248], Time_float_unix[2][71]);
    return [0,
            messages,
            size,
            time,
            keep,
            naming_scheme,
            caml_call2(Core_Option[39], zone, _t_)];
   }
   function should_rotate
   (t, last_messages, last_size, last_time, current_time){
    var match$1 = caml_call2(Base_Field[3], messages$0, t), init = 0;
    if(match$1)
     var
      rotate_messages = match$1[1],
      acc = caml_call2(Core[89], rotate_messages, last_messages);
    else
     var acc = init;
    var match$0 = caml_call2(Base_Field[3], field$0, t);
    if(match$0)
     var
      rotate_size = match$0[1],
      acc$0 = acc || caml_call2(Core_Byte_units[6], rotate_size, last_size);
    else
     var acc$0 = acc;
    var match = caml_call2(Base_Field[3], field, t);
    if(! match) return acc$0;
    var rotation_ofday = match[1], zone = t[6];
    function first_at_or_after(time){
     return caml_call4
             (Core_Time_float[80], 476625469, time, rotation_ofday, zone);
    }
    var
     candidate = first_at_or_after(last_time),
     rotation_time =
       caml_call2(Core_Time_float[31], last_time, candidate)
        ? first_at_or_after
          (caml_call2(Core_Time_float[48], last_time, Core_Time_float[84][75]))
        : candidate;
    return acc$0
            ? acc$0
            : caml_call2(Core_Time_float[25], current_time, rotation_time);
   }
   function default$0(opt, param){
    if(opt)
     var sth = opt[1], zone = sth;
    else
     var zone = caml_call1(Core[248], Time_float_unix[2][71]);
    return [0, 0, 0, [0, Core_Time_float[83][60]], 3256577, -407535018, zone];
   }
   var Naming_scheme = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Rotation);
   var
    Async_log_Rotation =
      [0,
       Naming_scheme,
       zone,
       naming_scheme,
       keep,
       time,
       size,
       messages,
       sexp_of_t,
       create,
       default$0,
       should_rotate];
   runtime.caml_register_global
    (39, Async_log_Rotation, cst_Async_log_Rotation$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Message
//# unitInfo: Requires: Async_log_kernel__Message, Bin_prot__Shape, Bin_shape, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Message$0 = "Async_log__Message",
    cst_async_log$0 = "async_log",
    cst_t = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Time_float_unix = global_data.Time_float_unix,
    Core = global_data.Core,
    Async_log_kernel_Message = global_data.Async_log_kernel__Message,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Message$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/message.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log$0, "message.ml");
   var
    _a_ =
      caml_call1(Async_log_kernel_Message[11][1][1][1], Time_float_unix[55]),
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/message.ml:3:4"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    cst_async_log = cst_async_log$0,
    cst_Async_log_Message = cst_Async_log_Message$0;
   function bin_size_t(v){
    return caml_call2
            (Async_log_kernel_Message[11][1][1][2], Time_float_unix[51], v);
   }
   function bin_write_t(buf, pos, v){
    return caml_call4
            (Async_log_kernel_Message[11][1][1][3],
             Time_float_unix[52],
             buf,
             pos,
             v);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call3
            (caml_call1
              (Async_log_kernel_Message[11][1][1][5], Time_float_unix[53]),
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$0(buf, pos_ref){
    return caml_call2
            (caml_call1
              (Async_log_kernel_Message[11][1][1][4], Time_float_unix[53]),
             buf,
             pos_ref);
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(x_002){
    return caml_call2
            (Async_log_kernel_Message[11][1][1][9],
             Time_float_unix[59],
             x_002);
   }
   function sexp_of_t(x_003){
    return caml_call2
            (Async_log_kernel_Message[11][1][1][10],
             Time_float_unix[60],
             x_003);
   }
   function sexp_of_t_as_v0(x_004){
    return caml_call2
            (Async_log_kernel_Message[11][1][1][11][1],
             Time_float_unix[60],
             x_004);
   }
   var
    For_testing = [0, sexp_of_t_as_v0],
    to_write_only_text = Async_log_kernel_Message[10],
    add_tags = Async_log_kernel_Message[9],
    tags = Async_log_kernel_Message[8],
    raw_message = Async_log_kernel_Message[7],
    message = Async_log_kernel_Message[6],
    set_level = Async_log_kernel_Message[5],
    level = Async_log_kernel_Message[4],
    time = Async_log_kernel_Message[3],
    create = Async_log_kernel_Message[2],
    T1 = Async_log_kernel_Message[1];
   function sexp_of_t$0(x_005){
    return caml_call2
            (Async_log_kernel_Message[1][1], Time_float_unix[60], x_005);
   }
   function to_write_only_text$0(opt, t){
    if(opt)
     var sth = opt[1], zone = sth;
    else
     var zone = caml_call1(Core[248], Time_float_unix[2][71]);
    return caml_call2(to_write_only_text, t, zone);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Message);
   var
    Async_log_Message =
      [0,
       T1,
       create,
       time,
       level,
       set_level,
       message,
       raw_message,
       tags,
       add_tags,
       sexp_of_t$0,
       to_write_only_text$0,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t,
         For_testing]]];
   runtime.caml_register_global
    (19, Async_log_Message, cst_Async_log_Message$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Output
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_list, Async_kernel__Deferred_or_error, Async_kernel__Synchronous_time_source, Async_kernel__Tail, Async_log__Message, Async_log__Rotation, Async_log_kernel, Async_log_kernel__Output_format, Async_unix, Async_unix__Async_sys, Async_unix__Writer, Base__Option, CamlinternalLazy, Core, Core__Array, Core__Byte_units, Core__Date, Core__Filename, Core__Fn, Core__Int, Core__Int63, Core__Lazy, Core__List, Core__Memo, Core__Option, Core__Queue, Core__String, Core__Time_float, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Output$0 = "Async_log__Output",
    cst_async_log$0 = "async_log",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = ".",
    Async_unix_Writer = global_data.Async_unix__Writer,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Date = global_data.Core__Date,
    Core_Option = global_data.Core__Option,
    Time_float_unix = global_data.Time_float_unix,
    Core = global_data.Core,
    Core_Time_float = global_data.Core__Time_float,
    Core_Int = global_data.Core__Int,
    Async_kernel = global_data.Async_kernel,
    Core_Lazy = global_data.Core__Lazy,
    Core_Filename = global_data.Core__Filename,
    Async_log_Rotation = global_data.Async_log__Rotation,
    Core_Fn = global_data.Core__Fn,
    Async_unix_Async_sys = global_data.Async_unix__Async_sys,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Core_Queue = global_data.Core__Queue,
    Core_Int63 = global_data.Core__Int63,
    Core_Byte_units = global_data.Core__Byte_units,
    Core_String = global_data.Core__String,
    Async_unix = global_data.Async_unix,
    Core_List = global_data.Core__List,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list;
   global_data.Sexplib0__Sexp_conv;
   var Async_kernel_Deferred = global_data.Async_kernel__Deferred;
   global_data.Async_log_kernel__Output_format;
   var
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Base_Option = global_data.Base__Option,
    Core_Array = global_data.Core__Array,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_log_Message = global_data.Async_log__Message,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_kernel = global_data.Async_log_kernel,
    Core_Memo = global_data.Core__Memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Output$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/output.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log$0, "output.ml");
   var
    cst_log = ".log",
    _h_ = [0, 0],
    _f_ = [0, 3804260],
    _g_ = [0, 523273847],
    _d_ = [0, 3804260],
    _e_ = [0, 523273847],
    _b_ = [0, [2, 0, [12, 46, [2, 0, [2, 0, 0]]]], "%s.%s%s"],
    _c_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
    _a_ = [0, 1],
    cst_async_log = cst_async_log$0,
    cst_Async_log_Output = cst_Async_log_Output$0;
   function write_sexp(t, hum, wr){
    var _bz_ = caml_call1(Async_log_Message[12][1][10], t);
    caml_call4(Async_unix_Writer[45], [0, hum], 0, wr, _bz_);
    return caml_call2(Async_unix_Writer[41], 0, wr);
   }
   var
    include = Async_log_kernel[1],
    create = include[1],
    create_expert = include[2],
    create_unbuffered = include[3],
    filter_to_level = include[4],
    empty = include[5],
    rotate = include[6],
    Private = include[7],
    For_testing = include[8];
   function now(time_source){
    if(! time_source) return caml_call1(Core_Time_float[47], 0);
    var
     time_source$0 = time_source[1],
     _by_ = caml_call1(Async_kernel_Synchronous_time_[12], time_source$0);
    return caml_call1(Core_Time_ns[92], _by_);
   }
   function basic_write(format, wr, msg){
    if(925483562 > format)
     return 706852075 <= format
             ? write_sexp(msg, 1, wr)
             : caml_call3
               (Async_unix_Writer[46], wr, Async_log_Message[12][1][6], msg);
    if(936573133 > format) return write_sexp(msg, 0, wr);
    var _bx_ = caml_call2(Async_log_Message[11], 0, msg);
    caml_call4(Async_unix_Writer[33], 0, 0, wr, _bx_);
    return caml_call2(Async_unix_Writer[41], 0, wr);
   }
   function open_writer(filename, perm){
    return [246,
            function(param){
             function _bw_(w){
              caml_call2(Async_unix_Writer[21], w, 751362817);
              return w;
             }
             function _bu_(param){
              return caml_call8
                      (Async_unix_Writer[24], 0, _a_, 0, 0, perm, 0, 0, filename);
             }
             var
              _bv_ =
                caml_call2
                 (Async_kernel[23][2], Async_kernel_Deferred[18], _bu_);
             return caml_call2(Async_kernel[23][3], _bv_, _bw_);
            }];
   }
   function write(w, format, msgs){
    function _bs_(w){
     function _bt_(msg){return basic_write(format, w, msg);}
     caml_call2(Core_Queue[18], msgs, _bt_);
     return caml_call1(Async_unix_Writer[77], w);
    }
    return caml_call2(Async_kernel[23][3], w, _bs_);
   }
   function create$0(perm, format, filename){
    var w = open_writer(filename, perm);
    function _bk_(msgs){
     function _bq_(param){return 0;}
     var _br_ = write(caml_call1(Core[248], w), format, msgs);
     return caml_call2(Async_kernel[23][3], _br_, _bq_);
    }
    function _bl_(param){
     if(! caml_call1(Core_Lazy[40], w))
      return caml_call1(Async_kernel[20], 0);
     var _bo_ = Async_unix_Writer[58], _bp_ = caml_call1(Core[248], w);
     return caml_call2(Async_kernel[21], _bp_, _bo_);
    }
    return caml_call4
            (create,
             0,
             [0,
              function(param){
               if(! caml_call1(Core_Lazy[40], w))
                return caml_call1(Async_kernel[20], 0);
               var arg = Async_unix_Writer[65];
               function _bm_(eta){return caml_call2(arg, 0, eta);}
               var _bn_ = caml_call1(Core[248], w);
               return caml_call2(Async_kernel[21], _bn_, _bm_);
              }],
             _bl_,
             _bk_);
   }
   function create$1(format, w){
    function _bi_(msgs){
     function _bj_(msg){return basic_write(format, w, msg);}
     caml_call2(Core_Queue[18], msgs, _bj_);
     return caml_call1(Async_kernel[20], 0);
    }
    return caml_call4
            (create,
             0,
             0,
             function(param){return caml_call1(Async_unix_Writer[58], w);},
             _bi_);
   }
   function Make(Id){
    function make_filename(dirname, basename, suffix, id){
     var match = caml_call1(Id[3], id);
     if(match){
      var
       s = match[1],
       _bg_ = caml_call4(Core[265], _b_, basename, s, suffix);
      return caml_call2(Core[631], dirname, _bg_);
     }
     var _bh_ = caml_call3(Core[265], _c_, basename, suffix);
     return caml_call2(Core[631], dirname, _bh_);
    }
    function parse_filename_id(basename, suffix, filename){
     var
      _a__ = caml_call2(Core[18], basename, suffix),
      _a$_ = caml_call1(Core_Filename[19], filename);
     if(caml_call2(Core_String[145], _a$_, _a__)) return caml_call1(Id[4], 0);
     function _ba_(id_dot_log){
      function _be_(id){return caml_call1(Id[4], [0, id]);}
      var _bf_ = caml_call2(Core_String[92], id_dot_log, suffix);
      return caml_call2(Base_Option[29][4][2], _bf_, _be_);
     }
     var
      _bb_ = caml_call2(Core[18], basename, cst),
      _bc_ = caml_call1(Core_Filename[19], filename),
      _bd_ = caml_call2(Core_String[93], _bc_, _bb_);
     return caml_call2(Base_Option[29][4][2], _bd_, _ba_);
    }
    function current_log_files(dirname, basename, suffix){
     function _a4_(files){
      function _a6_(filename){
       var filename$0 = caml_call2(Core[631], dirname, filename);
       function _a8_(id){return [0, id, filename$0];}
       var _a9_ = parse_filename_id(basename, suffix, filename$0);
       return caml_call2(Base_Option[29][4][3], _a9_, _a8_);
      }
      var _a7_ = caml_call1(Core_Array[45], files);
      return caml_call2(Core_List[13], _a7_, _a6_);
     }
     var _a5_ = caml_call1(Async_unix_Async_sys[22], dirname);
     return caml_call2(Async_kernel[23][3], _a5_, _a4_);
    }
    function maybe_delete_old_logs(dirname, basename, suffix, keep){
     function _aL_(param){return 0;}
     var _aM_ = caml_call1(Async_kernel_Deferred_list[16], -686623969);
     function _aN_(param){
      var filename = param[2];
      function _a3_(param){return caml_call1(Async_unix[1][37], filename);}
      return caml_call6
              (Async_kernel_Deferred_or_error[38], 0, _e_, _d_, 0, 0, _a3_);
     }
     function _aO_(_a2_){return caml_call2(_aM_, _a2_, _aN_);}
     if(typeof keep === "number")
      var _aP_ = caml_call1(Async_kernel[20], 0);
     else{
      if(-485091469 <= keep[1])
       var
        span = keep[2],
        _aR_ =
          function(files){
           var
            now = caml_call1(Core_Time_float[47], 0),
            cutoff = caml_call2(Core_Time_float[49], now, span);
           function _aW_(param){
            var filename = param[2];
            function _aX_(param){
             if(0 !== param[0]) return 0;
             var stats = param[1];
             return caml_call2(Core_Time_float[29], stats[11], cutoff);
            }
            function _aY_(param){
             return caml_call1(Async_unix[1][34], filename);
            }
            var
             _aZ_ =
               caml_call6
                (Async_kernel_Deferred_or_error[38], 0, _g_, _f_, 0, 0, _aY_);
            return caml_call2(Async_kernel[23][3], _aZ_, _aX_);
           }
           return caml_call3
                   (Async_kernel_Deferred_list[18], -686623969, files, _aW_);
          },
        _aS_ = current_log_files(dirname, basename, suffix),
        _aT_ = caml_call2(Async_kernel[23][2], _aS_, _aR_);
      else
       var
        i = keep[2],
        _aU_ =
          function(files){
           function _a0_(param, _a1_){
            var i2 = _a1_[1], i1 = param[1];
            return caml_call2(Id[5], i1, i2);
           }
           var files$0 = caml_call2(Core_List[79], files, _a0_);
           return caml_call2(Core_List[135], files$0, i);
          },
        _aV_ = current_log_files(dirname, basename, suffix),
        _aT_ = caml_call2(Async_kernel[23][3], _aV_, _aU_);
      var _aP_ = _aT_;
     }
     var _aQ_ = caml_call2(Async_kernel[21], _aP_, _aO_);
     return caml_call2(Async_kernel[23][3], _aQ_, _aL_);
    }
    function we_have_written_to_the_current(t){return caml_call1(Core_Lazy[40], t[6]);
    }
    function close_writer(t){
     if(! we_have_written_to_the_current(t))
      return caml_call1(Async_kernel[20], 0);
     function _aH_(w){return caml_call2(Async_unix_Writer[65], 0, w);}
     var _aI_ = t[6], _aJ_ = caml_obj_tag(_aI_);
     a:
     if(250 === _aJ_)
      var _aK_ = _aI_[1];
     else{
      if(246 !== _aJ_ && 244 !== _aJ_){var _aK_ = _aI_; break a;}
      var _aK_ = caml_call1(CamlinternalLazy[2], _aI_);
     }
     return caml_call2(Async_kernel[23][2], _aK_, _aH_);
    }
    function rotate(t, time_source){
     var dirname = t[3], suffix = t[2], basename = t[1];
     function _at_(param){
      function _av_(files){
       function _ax_(param, _aG_){
        var i2 = _aG_[1], i1 = param[1];
        return caml_call2(Id[5], i1, i2);
       }
       var
        _ay_ = caml_call2(Core_List[79], files, _ax_),
        files$0 = caml_call1(Core_List[59], _ay_);
       function _az_(param){
        function _aD_(param){
         var
          _aF_ = caml_call1(Async_log_Rotation[2], t[4]),
          filename =
            make_filename
             (dirname, basename, suffix, caml_call2(Id[1], time_source, _aF_));
         t[9] = 0;
         t[8] = 0;
         t[10] = now(time_source);
         t[7] = filename;
         t[6] = open_writer(filename, t[13]);
         return 0;
        }
        var _aE_ = maybe_delete_old_logs(dirname, basename, suffix, t[4][4]);
        return caml_call2(Async_kernel[23][3], _aE_, _aD_);
       }
       function _aA_(param){
        var
         src = param[2],
         id = param[1],
         id$0 = caml_call1(Id[2], id),
         dst = make_filename(dirname, basename, suffix, id$0);
        if(caml_call2(Core_String[145], src, t[7]))
         caml_call2(Async_kernel_Tail[3], t[11], dst);
        var _aC_ = caml_call2(Id[5], id, id$0);
        return caml_call2(Core[93], _aC_, 0)
                ? caml_call2(Async_unix[1][39], src, dst)
                : caml_call1(Async_kernel[20], 0);
       }
       var
        _aB_ =
          caml_call3
           (Async_kernel_Deferred_list[14], -686623969, files$0, _aA_);
       return caml_call2(Async_kernel[23][2], _aB_, _az_);
      }
      var _aw_ = current_log_files(dirname, basename, suffix);
      return caml_call2(Async_kernel[23][2], _aw_, _av_);
     }
     var _au_ = close_writer(t);
     return caml_call2(Async_kernel[23][2], _au_, _at_);
    }
    function write$0(t, time_source, msgs){
     var current_time = now(time_source);
     function ___(param){
      var on_rotation_log_size = param[2], rotation_msgs = param[1];
      function _al_(size){
       var _ar_ = caml_call1(Core_Queue[16], msgs);
       t[8] = (t[8] + rotation_msgs | 0) + _ar_ | 0;
       var _as_ = caml_call1(Core_Int63[5], on_rotation_log_size);
       t[9] = caml_call1(Core_Int63[5], size) + _as_ | 0;
       t[10] = current_time;
       return 0;
      }
      var _an_ = t[6], _am_ = t[5], _ao_ = caml_obj_tag(_an_);
      a:
      if(250 === _ao_)
       var _ap_ = _an_[1];
      else{
       if(246 !== _ao_ && 244 !== _ao_){var _ap_ = _an_; break a;}
       var _ap_ = caml_call1(CamlinternalLazy[2], _an_);
      }
      var _aq_ = write(_ap_, _am_, msgs);
      return caml_call2(Async_kernel[23][3], _aq_, _al_);
     }
     var _$_ = t[10], _aa_ = caml_call1(Core_Byte_units[36], t[9]);
     if
      (caml_call5(Async_log_Rotation[11], t[4], t[8], _aa_, _$_, current_time))
      var
       _ab_ =
         function(param){
          var
           _ae_ = caml_call1(t[12], 0),
           msgs = caml_call1(Core_Queue[40], _ae_),
           rotation_msgs = caml_call1(Core_Queue[16], msgs);
          function _af_(size){return [0, rotation_msgs, size];}
          var _ah_ = t[6], _ag_ = t[5], _ai_ = caml_obj_tag(_ah_);
          a:
          if(250 === _ai_)
           var _aj_ = _ah_[1];
          else{
           if(246 !== _ai_ && 244 !== _ai_){var _aj_ = _ah_; break a;}
           var _aj_ = caml_call1(CamlinternalLazy[2], _ah_);
          }
          var _ak_ = write(_aj_, _ag_, msgs);
          return caml_call2(Async_kernel[23][3], _ak_, _af_);
         },
       _ac_ = rotate(t, time_source),
       _ad_ = caml_call2(Async_kernel[23][2], _ac_, _ab_);
     else
      var _ad_ = caml_call1(Async_kernel[20], [0, 0, Core_Int63[16]]);
     return caml_call2(Async_kernel[23][2], _ad_, ___);
    }
    function create$0
    (perm, time_source, log_on_rotation, format, basename, suffix, rotation){
     if(log_on_rotation)
      var f = log_on_rotation[1], log_on_rotation$0 = f;
     else
      var log_on_rotation$0 = caml_call1(Core_Fn[1], 0);
     if(caml_call1(Core_Filename[12], basename))
      var absolute_basename = caml_call1(Async_kernel[20], basename);
     else
      var
       _N_ =
         function(cwd){return caml_call2(Core_Filename[21], basename, cwd);},
       _O_ = caml_call1(Async_unix_Async_sys[21], 0),
       absolute_basename = caml_call2(Async_kernel[23][3], _O_, _N_);
     var log_files = caml_call1(Async_kernel_Tail[2], 0);
     function _K_(absolute_basename){
      var
       dirname = caml_call1(Core_Filename[20], absolute_basename),
       basename = caml_call1(Core_Filename[19], absolute_basename),
       _Y_ = caml_call1(Async_log_Rotation[2], rotation),
       filename =
         make_filename
          (dirname, basename, suffix, caml_call2(Id[1], time_source, _Y_)),
       _Z_ = now(time_source);
      return [0,
              basename,
              suffix,
              dirname,
              rotation,
              format,
              open_writer(filename, perm),
              filename,
              0,
              0,
              _Z_,
              log_files,
              log_on_rotation$0,
              perm];
     }
     var
      t_deferred = caml_call2(Async_kernel[23][3], absolute_basename, _K_),
      first_rotate_scheduled = [0, 0];
     function finalize(param){
      function _X_(t){return close_writer(t);}
      return caml_call2(Async_kernel[23][2], t_deferred, _X_);
     }
     function flush(param){
      function _U_(t){
       if(! caml_call1(Core_Lazy[40], t[6]))
        return caml_call1(Async_kernel[20], 0);
       var _V_ = Async_unix_Writer[58], _W_ = caml_call1(Core[248], t[6]);
       return caml_call2(Async_kernel[21], _W_, _V_);
      }
      return caml_call2(Async_kernel[23][2], t_deferred, _U_);
     }
     function _L_(msgs){
      function _R_(t){
       if(first_rotate_scheduled[1]) return write$0(t, time_source, msgs);
       first_rotate_scheduled[1] = 1;
       function _S_(param){return write$0(t, time_source, msgs);}
       var _T_ = rotate(t, time_source);
       return caml_call2(Async_kernel[23][2], _T_, _S_);
      }
      return caml_call2(Async_kernel[23][2], t_deferred, _R_);
     }
     var _M_ = [0, finalize];
     return [0,
             caml_call4
              (create,
               [0,
                function(param){
                 function _P_(_Q_){return rotate(_Q_, time_source);}
                 return caml_call2(Async_kernel[21], t_deferred, _P_);
                }],
               _M_,
               flush,
               _L_),
             log_files];
    }
    return [0, , , , , , , , , , create$0];
   }
   function create$2(param, _J_){return 0;}
   function rotate_one(_I_){return 1 + _I_ | 0;}
   function to_string_opt(x){
    return 0 === x ? 0 : [0, caml_call1(Core_Int[79], x)];
   }
   var cmp_newest_first = Core_Int[91];
   function of_string_opt(param){
    if(! param) return _h_;
    var s = param[1];
    try{var _G_ = [0, caml_call1(Core_Int[78], s)]; return _G_;}
    catch(_H_){return 0;}
   }
   var
    Numbered =
      Make
       ([0,
         create$2,
         rotate_one,
         to_string_opt,
         of_string_opt,
         cmp_newest_first]);
   function create$3(time_source, zone){return now(time_source);}
   function rotate_one$0(_F_){return _F_;}
   function to_string_opt$0(ts){
    var _E_ = caml_call1(Core[248], Time_float_unix[2][71]);
    return [0, caml_call2(Core_Time_float[69], ts, _E_)];
   }
   var cmp_newest_first$0 = Core_Time_float[36];
   function of_string_opt$0(param){
    if(! param) return 0;
    var s = param[1];
    try{
     var
      _B_ = caml_call1(Core[248], Time_float_unix[2][71]),
      _C_ = [0, caml_call2(Core_Time_float[70], s, _B_)];
     return _C_;
    }
    catch(_D_){return 0;}
   }
   var
    Timestamped =
      Make
       ([0,
         create$3,
         rotate_one$0,
         to_string_opt$0,
         of_string_opt$0,
         cmp_newest_first$0]);
   function create$4(time_source, zone){
    var _A_ = now(time_source);
    return caml_call2(Core_Date[99], _A_, zone);
   }
   function rotate_one$1(_z_){return _z_;}
   function to_string_opt$1(date){
    return [0, caml_call1(Core_Date[23], date)];
   }
   var cmp_newest_first$1 = Core_Date[35];
   function of_string_opt$1(param){
    if(! param) return 0;
    var str = param[1];
    function _y_(param){return caml_call1(Core_Date[22], str);}
    return caml_call1(Core_Option[56], _y_);
   }
   var
    Dated =
      Make
       ([0,
         create$4,
         rotate_one$1,
         to_string_opt$1,
         of_string_opt$1,
         cmp_newest_first$1]);
   function create$5(perm, time_source, format, basename, opt, rotation){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = cst_log;
    var match = rotation[5];
    if(typeof match !== "number"){
     var id = match[2], _t_ = Make(id)[10];
     return function(_x_){
      return _t_(perm, time_source, _x_, format, basename, suffix, rotation);};
    }
    if(871538568 === match){
     var _q_ = Numbered[10];
     return function(_w_){
      return _q_(perm, time_source, _w_, format, basename, suffix, rotation);};
    }
    if(989931157 <= match){
     var _r_ = Timestamped[10];
     return function(_v_){
      return _r_(perm, time_source, _v_, format, basename, suffix, rotation);};
    }
    var _s_ = Dated[10];
    return function(_u_){
     return _s_(perm, time_source, _u_, format, basename, suffix, rotation);};
   }
   function rotating_file
   (perm, time_source, log_on_rotation, format, basename, suffix, rotation){
    return create$5(perm, time_source, format, basename, suffix, rotation)
             (log_on_rotation)
            [1];
   }
   function rotating_file_with_tail
   (perm, time_source, log_on_rotation, format, basename, suffix, rotation){
    return create$5(perm, time_source, format, basename, suffix, rotation)
            (log_on_rotation);
   }
   function _i_(format){
    var _n_ = Async_unix_Writer[5], _o_ = caml_obj_tag(_n_);
    a:
    if(250 === _o_)
     var _p_ = _n_[1];
    else{
     if(246 !== _o_ && 244 !== _o_){var _p_ = _n_; break a;}
     var _p_ = caml_call1(CamlinternalLazy[2], _n_);
    }
    return create$1(format, _p_);
   }
   var make = caml_call3(Core_Memo[1], 0, 0, _i_);
   function stdout(opt, param){
    if(opt) var sth = opt[1], format = sth; else var format = 936573133;
    return caml_call1(make, format);
   }
   function _j_(format){
    var _k_ = Async_unix_Writer[6], _l_ = caml_obj_tag(_k_);
    a:
    if(250 === _l_)
     var _m_ = _k_[1];
    else{
     if(246 !== _l_ && 244 !== _l_){var _m_ = _k_; break a;}
     var _m_ = caml_call1(CamlinternalLazy[2], _k_);
    }
    return create$1(format, _m_);
   }
   var make$0 = caml_call3(Core_Memo[1], 0, 0, _j_);
   function stderr(opt, param){
    if(opt) var sth = opt[1], format = sth; else var format = 936573133;
    return caml_call1(make$0, format);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Output);
   var
    Async_log_Output =
      [0,
       create,
       create_expert,
       create_unbuffered,
       filter_to_level,
       empty,
       rotate,
       Private,
       For_testing,
       stdout,
       stderr,
       create$1,
       create$0,
       rotating_file,
       rotating_file_with_tail];
   runtime.caml_register_global(67, Async_log_Output, cst_Async_log_Output$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Message_reader
//# unitInfo: Requires: Async_kernel, Async_kernel__Pipe, Async_log__Message, Async_unix__Reader, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Message_reader$0 = "Async_log__Message_reader",
    cst_async_log$0 = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_log_Message = global_data.Async_log__Message,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Message_reader$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/message_reader.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log$0, "message_reader.ml");
   var
    cst_async_log = cst_async_log$0,
    cst_Async_log_Message_reader = cst_Async_log_Message_reader$0;
   function read_from_reader(format, r, pipe_w){
    if(706852075 <= format){
     var
      sexp_pipe = caml_call2(Async_unix_Reader[43], 0, r),
      _f_ = function(param){return caml_call1(Async_kernel_Pipe[15], pipe_w);},
      _g_ =
        caml_call3
         (Async_kernel_Pipe[57],
          sexp_pipe,
          pipe_w,
          Async_log_Message[12][1][9]);
     return caml_call2(Async_kernel[23][3], _g_, _f_);
    }
    function loop(param){
     function _h_(param){
      if(typeof param === "number"){
       caml_call1(Async_kernel_Pipe[15], pipe_w);
       return caml_call1(Async_kernel[20], 0);
      }
      var
       msg = param[2],
       _j_ = caml_call2(Async_kernel_Pipe[29], pipe_w, msg);
      return caml_call2(Async_kernel[21], _j_, loop);
     }
     var
      _i_ =
        caml_call3(Async_unix_Reader[45], 0, r, Async_log_Message[12][1][7]);
     return caml_call2(Async_kernel[23][2], _i_, _h_);
    }
    return loop(0);
   }
   function pipe_of_reader(format, reader){
    function _e_(pipe_w){return read_from_reader(format, reader, pipe_w);}
    return caml_call3(Async_kernel_Pipe[5], 0, 0, _e_);
   }
   function pipe(format, filename){
    function _c_(pipe_w){
     function _d_(reader){return read_from_reader(format, reader, pipe_w);}
     return caml_call4(Async_unix_Reader[14], 0, 0, filename, _d_);
    }
    return caml_call3(Async_kernel_Pipe[5], 0, 0, _c_);
   }
   function read_one(format, reader){
    if(706852075 > format)
     return caml_call3
             (Async_unix_Reader[45], 0, reader, Async_log_Message[12][1][7]);
    function _a_(sexp){
     return caml_call2
             (Async_unix_Reader[1][17], sexp, Async_log_Message[12][1][9]);
    }
    var _b_ = caml_call2(Async_unix_Reader[42], 0, reader);
    return caml_call2(Async_kernel[23][3], _b_, _a_);
   }
   var Expert = [0, read_one];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Message_reader);
   var Async_log_Message_reader = [0, pipe, pipe_of_reader, Expert];
   runtime.caml_register_global
    (15, Async_log_Message_reader, cst_Async_log_Message_reader$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Log
//# unitInfo: Requires: Async_log_kernel__Log, Async_unix__Shutdown, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Log = "Async_log__Log",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_kernel_Log = global_data.Async_log_kernel__Log,
    Async_unix_Shutdown = global_data.Async_unix__Shutdown;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Log);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/log.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "log.ml");
   var
    sexp_of_t = Async_log_kernel_Log[1],
    set_level_via_param = Async_log_kernel_Log[2],
    set_level = Async_log_kernel_Log[3],
    level = Async_log_kernel_Log[4],
    set_output = Async_log_kernel_Log[5],
    get_output = Async_log_kernel_Log[6],
    get_time_source = Async_log_kernel_Log[7],
    set_time_source = Async_log_kernel_Log[8],
    get_transform = Async_log_kernel_Log[9],
    set_transform = Async_log_kernel_Log[10],
    get_on_error = Async_log_kernel_Log[11],
    set_on_error = Async_log_kernel_Log[12],
    close = Async_log_kernel_Log[13],
    is_closed = Async_log_kernel_Log[14],
    flushed = Async_log_kernel_Log[15],
    create = Async_log_kernel_Log[16],
    create_null = Async_log_kernel_Log[17],
    copy = Async_log_kernel_Log[18],
    raw = Async_log_kernel_Log[19],
    debug = Async_log_kernel_Log[20],
    info = Async_log_kernel_Log[21],
    error = Async_log_kernel_Log[22],
    printf = Async_log_kernel_Log[23],
    raw_s = Async_log_kernel_Log[24],
    info_s = Async_log_kernel_Log[25],
    error_s = Async_log_kernel_Log[26],
    debug_s = Async_log_kernel_Log[27],
    sexp = Async_log_kernel_Log[28],
    string = Async_log_kernel_Log[29],
    structured_message = Async_log_kernel_Log[30],
    message = Async_log_kernel_Log[31],
    message_event = Async_log_kernel_Log[32],
    surround_s = Async_log_kernel_Log[33],
    surroundf = Async_log_kernel_Log[34],
    would_log = Async_log_kernel_Log[35],
    For_testing = Async_log_kernel_Log[36],
    Private = Async_log_kernel_Log[37];
   caml_call1(Async_unix_Shutdown[11], Private[4]);
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Log);
   var
    Async_log_Log =
      [0,
       sexp_of_t,
       set_level_via_param,
       set_level,
       level,
       set_output,
       get_output,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       get_on_error,
       set_on_error,
       close,
       is_closed,
       flushed,
       create,
       create_null,
       copy,
       raw,
       debug,
       info,
       error,
       printf,
       raw_s,
       info_s,
       error_s,
       debug_s,
       sexp,
       string,
       structured_message,
       message,
       message_event,
       surround_s,
       surroundf,
       would_log,
       For_testing,
       Private];
   runtime.caml_register_global(13, Async_log_Log, cst_Async_log_Log);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Blocking
//# unitInfo: Requires: Async_kernel__Synchronous_time_source, Async_log__Message, Async_log_kernel__Level, Async_unix__Scheduler, Core, Core__Printf, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s\n%!",
    cst_Async_log_Blocking$0 = "Async_log__Blocking",
    cst_async_log$0 = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_log_Message = global_data.Async_log__Message,
    Async_log_kernel_Level = global_data.Async_log_kernel__Level,
    Async_unix_Scheduler = global_data.Async_unix__Scheduler,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Printf = global_data.Core__Printf;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Blocking$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/blocking.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log$0, "blocking.ml");
   var
    _l_ = [0, 106380200],
    _k_ = [0, 815031438],
    _j_ = [0, -364068301],
    _i_ = [0, 106380200],
    _h_ = [0, 815031438],
    _g_ = [0, -364068301],
    cst_Log_Global_Blocking_functi =
      "Log.Global.Blocking function called after scheduler started",
    _a_ = [0, [2, 0, [12, 10, [10, 0]]], cst_s],
    _c_ = [0, [2, 0, [12, 10, [10, 0]]], cst_s],
    cst_async_log = cst_async_log$0,
    cst_Async_log_Blocking = cst_Async_log_Blocking$0;
   function create(_t_){return _t_;}
   function write(print, msg){
    return caml_call1(print, caml_call2(Async_log_Message[11], 0, msg));
   }
   var _b_ = caml_call1(Core_Printf[11], _a_);
   function stdout(_s_){return write(_b_, _s_);}
   var _d_ = caml_call1(Core_Printf[8], _c_);
   function stderr(_r_){return write(_d_, _r_);}
   var level = [0, 815031438], write$0 = [0, stderr];
   if(Ppx_inline_test_lib[1])
    var
     _e_ =
       caml_call3(Async_kernel_Synchronous_time_[9], 0, Core_Time_ns[59], 0),
     _f_ = caml_call1(Async_kernel_Synchronous_time_[8], _e_);
   else
    var _f_ = caml_call1(Async_kernel_Synchronous_time_[21], 0);
   var time_source = [0, _f_], transform = [0, 0];
   function set_level(l){level[1] = l; return 0;}
   function level$0(param){return level[1];}
   function set_output(output){write$0[1] = output; return 0;}
   function set_time_source(ts){time_source[1] = ts; return 0;}
   function set_transform(f){transform[1] = f; return 0;}
   function write$1(msg){
    if(caml_call1(Async_unix_Scheduler[43], 0))
     caml_call1(Core[6], cst_Log_Global_Blocking_functi);
    var match = transform[1];
    if(match)
     var f = match[1], msg$0 = caml_call1(f, msg);
    else
     var msg$0 = msg;
    return caml_call1(write$0[1], msg$0);
   }
   function would_log(msg_level){
    var _q_ = level$0(0);
    return caml_call2(Async_log_kernel_Level[18], _q_, msg_level);
   }
   function create_message(level, time, tags, msg){
    if(time)
     var time$0 = time[1], time$1 = time$0;
    else
     var
      _p_ = caml_call1(Async_kernel_Synchronous_time_[12], time_source[1]),
      time$1 = caml_call1(Core_Time_ns[92], _p_);
    return caml_call4(Async_log_Message[2], level, [0, time$1], tags, msg);
   }
   function gen(msg_level, time, tags, k){
    function _n_(msg){
     var _o_ = would_log(msg_level);
     if(! _o_) return _o_;
     var msg$0 = [0, -976970511, msg];
     return write$1(create_message(msg_level, time, tags, msg$0));
    }
    return caml_call2(Core[254], _n_, k);
   }
   function printf(level, time, tags, k){return gen(level, time, tags, k);}
   function raw(time, tags, k){return gen(0, time, tags, k);}
   function debug(time, tags, k){return gen(_g_, time, tags, k);}
   function info(time, tags, k){return gen(_h_, time, tags, k);}
   function error(time, tags, k){return gen(_i_, time, tags, k);}
   function sexp(level, time, tags, sexp){
    var _m_ = would_log(level);
    return _m_
            ? write$1(create_message(level, time, tags, [0, 925483562, sexp]))
            : _m_;
   }
   function raw_s(time, tags, the_sexp){return sexp(0, time, tags, the_sexp);}
   function debug_s(time, tags, the_sexp){
    return sexp(_j_, time, tags, the_sexp);
   }
   function info_s(time, tags, the_sexp){
    return sexp(_k_, time, tags, the_sexp);
   }
   function error_s(time, tags, the_sexp){
    return sexp(_l_, time, tags, the_sexp);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Blocking);
   var
    Async_log_Blocking =
      [0,
       [0, stdout, stderr, create],
       level$0,
       set_level,
       set_output,
       set_time_source,
       set_transform,
       raw,
       info,
       error,
       debug,
       printf,
       raw_s,
       info_s,
       error_s,
       debug_s,
       sexp];
   runtime.caml_register_global
    (27, Async_log_Blocking, cst_Async_log_Blocking$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log__Assign_top_level_logs
//# unitInfo: Requires: Async_kernel, Async_kernel__Monitor, Async_log__Output, Async_log_kernel, Async_log_kernel__Global, Async_unix__Tcp, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log_Assign_top_level$0 = "Async_log__Assign_top_level_logs",
    cst_async_log$0 = "async_log",
    cst_src_assign_top_level_logs_ = "src/assign_top_level_logs.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_log_Output = global_data.Async_log__Output,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_log_kernel_Global = global_data.Async_log_kernel__Global,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_unix_Tcp = global_data.Async_unix__Tcp,
    Async_log_kernel = global_data.Async_log_kernel;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log_Assign_top_level$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_assign_top_level_logs_);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_log$0, "assign_top_level_logs.ml");
   var
    current_unflushed_errors = [0, 0],
    cst_Stopped_logging_exceptions =
      "Stopped logging exceptions raised to [Monitor.try_with] that already returned until error log can be flushed.",
    _b_ = [0, "exn"],
    cst_This_error_was_captured_by =
      "This error was captured by a default handler in [Async.Log].",
    cst_Exception_raised_to_Monito =
      "Exception raised to [Monitor.try_with] that already returned.",
    _a_ = [0, 106380200],
    _d_ = [0, cst_src_assign_top_level_logs_, 39, 1574, 1584],
    cst_async_log = cst_async_log$0,
    cst_Async_log_Assign_top_level = cst_Async_log_Assign_top_level$0,
    max_unflushed_errors = 10;
   function log(sexp){
    return caml_call4(Async_log_kernel_Global[24], _a_, 0, 0, sexp);
   }
   function try_with_log_exn(exn){
    var
     _g_ =
       caml_call2(Core[92], current_unflushed_errors[1], max_unflushed_errors);
    if(! _g_) return _g_;
    current_unflushed_errors[1]++;
    var
     _h_ = [0, [1, [0, _b_, [0, caml_call1(Core[625], exn), 0]]], 0],
     _i_ =
       [0,
        caml_call1(Sexplib0_Sexp_conv[7], cst_This_error_was_captured_by),
        _h_];
    log
     ([1,
       [0,
        caml_call1(Sexplib0_Sexp_conv[7], cst_Exception_raised_to_Monito),
        _i_]]);
    if
     (caml_call2(Core[90], current_unflushed_errors[1], max_unflushed_errors))
     log(caml_call1(Sexplib0_Sexp_conv[7], cst_Stopped_logging_exceptions));
    function _j_(param){current_unflushed_errors[1] += -1; return 0;}
    var _k_ = caml_call1(Async_log_kernel_Global[18], 0);
    return caml_call2(Async_kernel[12], _k_, _j_);
   }
   Async_kernel_Monitor[25][1][1] = try_with_log_exn;
   var arg = Async_log_kernel_Global[22];
   function _c_(eta){return caml_call3(arg, 0, 0, eta);}
   caml_call1(Async_unix_Tcp[10][2], _c_);
   var
    _e_ = [246, function(_f_){return caml_call2(Async_log_Output[10], 0, 0);}];
   caml_call2(Async_log_kernel[1][7][1], _e_, _d_);
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log_Assign_top_level);
   var Async_log_Assign_top_level_log = [0];
   runtime.caml_register_global
    (25, Async_log_Assign_top_level_log, cst_Async_log_Assign_top_level$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_log
//# unitInfo: Requires: Async_log__Assign_top_level_logs, Async_log__Log, Async_log_kernel, Async_log_kernel__Global, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_log = "Async_log",
    cst_async_log = "async_log";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_log_Log = global_data.Async_log__Log,
    Async_log_kernel = global_data.Async_log_kernel,
    Async_log_kernel_Global = global_data.Async_log_kernel__Global;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_log);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_log.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_log, "async_log.ml");
   var
    sexp_of_t = Async_log_Log[1],
    set_level_via_param = Async_log_Log[2],
    set_level = Async_log_Log[3],
    level = Async_log_Log[4],
    set_output = Async_log_Log[5],
    get_output = Async_log_Log[6],
    get_time_source = Async_log_Log[7],
    set_time_source = Async_log_Log[8],
    get_transform = Async_log_Log[9],
    set_transform = Async_log_Log[10],
    get_on_error = Async_log_Log[11],
    set_on_error = Async_log_Log[12],
    close = Async_log_Log[13],
    is_closed = Async_log_Log[14],
    flushed = Async_log_Log[15],
    create = Async_log_Log[16],
    create_null = Async_log_Log[17],
    copy = Async_log_Log[18],
    raw = Async_log_Log[19],
    debug = Async_log_Log[20],
    info = Async_log_Log[21],
    error = Async_log_Log[22],
    printf = Async_log_Log[23],
    raw_s = Async_log_Log[24],
    info_s = Async_log_Log[25],
    error_s = Async_log_Log[26],
    debug_s = Async_log_Log[27],
    sexp = Async_log_Log[28],
    string = Async_log_Log[29],
    structured_message = Async_log_Log[30],
    message = Async_log_Log[31],
    message_event = Async_log_Log[32],
    surround_s = Async_log_Log[33],
    surroundf = Async_log_Log[34],
    would_log = Async_log_Log[35],
    For_testing = Async_log_Log[36],
    Private = Async_log_Log[37];
   caml_call1(Ppx_inline_test_lib[7], cst_async_log);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_log);
   var
    Async_log =
      [0,
       sexp_of_t,
       set_level_via_param,
       set_level,
       level,
       set_output,
       get_output,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       get_on_error,
       set_on_error,
       close,
       is_closed,
       flushed,
       create,
       create_null,
       copy,
       raw,
       debug,
       info,
       error,
       printf,
       raw_s,
       info_s,
       error_s,
       debug_s,
       sexp,
       string,
       structured_message,
       message,
       message_event,
       surround_s,
       surroundf,
       would_log,
       For_testing,
       Private,
       Async_log_kernel_Global,
       Async_log_kernel[2]];
   runtime.caml_register_global(14, Async_log, cst_Async_log);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
