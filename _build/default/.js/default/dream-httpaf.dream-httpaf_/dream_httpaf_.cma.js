// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_httpaf_
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf = [0];
   runtime.caml_register_global(0, Dream_httpaf, "Dream_httpaf_");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Version
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_HTTP$0 = "HTTP/",
    cst_HTTP_d_d = "HTTP/%d.%d",
    cst_HTTP_1_0$0 = "HTTP/1.0",
    cst_HTTP_1_1$0 = "HTTP/1.1",
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    v1_0 = [0, 1, 0],
    v1_1 = [0, 1, 1],
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    _d_ =
      [0,
       [11, cst_HTTP$0, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]]],
       cst_HTTP_d_d],
    _b_ = [0, 1, 1],
    _c_ = [0, 1, 0],
    _a_ =
      [0,
       [11, cst_HTTP$0, [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, 0]]]],
       cst_HTTP_d_d],
    cst_Version_of_string = "Version.of_string",
    cst_HTTP_1_1 = cst_HTTP_1_1$0,
    cst_HTTP_1_0 = cst_HTTP_1_0$0,
    cst_HTTP = cst_HTTP$0;
   function to_buffer(b, t){
    caml_call2(Stdlib_Buffer[16], b, cst_HTTP);
    var _i_ = caml_call1(Stdlib[33], t[1]);
    caml_call2(Stdlib_Buffer[16], b, _i_);
    caml_call2(Stdlib_Buffer[12], b, 46);
    var _j_ = caml_call1(Stdlib[33], t[2]);
    return caml_call2(Stdlib_Buffer[16], b, _j_);
   }
   function compare(x, y){
    var c = caml_int_compare(x[1], y[1]);
    return 0 === c ? caml_int_compare(x[2], y[2]) : c;
   }
   function to_string(t){
    if(1 === t[1]){
     var _h_ = t[2];
     if(0 === _h_) return cst_HTTP_1_0;
     if(1 === _h_) return cst_HTTP_1_1;
    }
    var b = caml_call1(Stdlib_Buffer[1], 8);
    to_buffer(b, t);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function of_string(s){
    if(! caml_string_notequal(s, cst_HTTP_1_0$0)) return _c_;
    if(! caml_string_notequal(s, cst_HTTP_1_1$0)) return _b_;
    try{
     var
      _e_ = function(major, minor){return [0, major, minor];},
      _f_ = caml_call3(Stdlib_Scanf[5], s, _a_, _e_);
     return _f_;
    }
    catch(_g_){
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[7], cst_Version_of_string], 1);
    }
   }
   function pp_hum(fmt, t){
    return caml_call4(Stdlib_Format[137], fmt, _d_, t[1], t[2]);
   }
   var
    Dream_httpaf_Version =
      [0, v1_0, v1_1, to_buffer, compare, to_string, of_string, pp_hum];
   runtime.caml_register_global
    (16, Dream_httpaf_Version, "Dream_httpaf___Version");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Status
//# unitInfo: Requires: Stdlib, Stdlib__Format, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    _c_ = [0, [4, 12, 0, 0, 0], "%u"],
    cst_408 = "408",
    cst_307 = "307",
    cst_417 = "417",
    cst_206 = "206",
    cst_428 = "428",
    cst_410 = "410",
    cst_414 = "414",
    cst_504 = "504",
    cst_202 = "202",
    cst_413 = "413",
    cst_418 = "418",
    cst_302 = "302",
    cst_301 = "301",
    cst_401 = "401",
    cst_412 = "412",
    cst_303 = "303",
    cst_100 = "100",
    cst_203 = "203",
    cst_429 = "429",
    cst_300 = "300",
    cst_405 = "405",
    cst_200 = "200",
    cst_407 = "407",
    cst_511 = "511",
    cst_409 = "409",
    cst_400 = "400",
    cst_406 = "406",
    cst_411 = "411",
    cst_205 = "205",
    cst_404 = "404",
    cst_304 = "304",
    cst_305 = "305",
    cst_403 = "403",
    cst_415 = "415",
    cst_501 = "501",
    cst_204 = "204",
    cst_201 = "201",
    cst_402 = "402",
    cst_500 = "500",
    cst_503 = "503",
    cst_420 = "420",
    cst_426 = "426",
    cst_502 = "502",
    cst_505 = "505",
    cst_101 = "101",
    cst_431 = "431",
    cst_416 = "416",
    _b_ =
      [0,
       [11,
        "Status.of_code: ",
        [4, 0, 0, 0, [11, " is not a three-digit number", 0]]],
       "Status.of_code: %d is not a three-digit number"],
    _a_ =
      [0,
       [11, "Status.unsafe_of_code: ", [4, 0, 0, 0, [11, " is negative", 0]]],
       "Status.unsafe_of_code: %d is negative"],
    cst_Request_Timeout = "Request Timeout",
    cst_Temporary_Redirect = "Temporary Redirect",
    cst_Expectation_Failed = "Expectation Failed",
    cst_Partial_Content = "Partial Content",
    cst_Precondition_Required = "Precondition Required",
    cst_Gone = "Gone",
    cst_URI_Too_Long = "URI Too Long",
    cst_Gateway_Timeout = "Gateway Timeout",
    cst_Accepted = "Accepted",
    cst_Payload_Too_Large = "Payload Too Large",
    cst_I_m_a_teapot = "I'm a teapot",
    cst_Found = "Found",
    cst_Moved_Permanently = "Moved Permanently",
    cst_Unauthorized = "Unauthorized",
    cst_Precondition_Failed = "Precondition Failed",
    cst_See_Other = "See Other",
    cst_Continue = "Continue",
    cst_Non_Authoritative_Informat = "Non-Authoritative Information",
    cst_Too_Many_Requests = "Too Many Requests",
    cst_Multiple_Choices = "Multiple Choices",
    cst_Method_Not_Allowed = "Method Not Allowed",
    cst_OK = "OK",
    cst_Proxy_Authentication_Requi = "Proxy Authentication Required",
    cst_Network_Authentication_Req = "Network Authentication Required",
    cst_Conflict = "Conflict",
    cst_Bad_Request = "Bad Request",
    cst_Not_Acceptable = "Not Acceptable",
    cst_Length_Required = "Length Required",
    cst_Reset_Content = "Reset Content",
    cst_Not_Found = "Not Found",
    cst_Not_Modified = "Not Modified",
    cst_Use_Proxy = "Use Proxy",
    cst_Forbidden = "Forbidden",
    cst_Unsupported_Media_Type = "Unsupported Media Type",
    cst_Not_Implemented = "Not Implemented",
    cst_No_Content = "No Content",
    cst_Created = "Created",
    cst_Payment_Required = "Payment Required",
    cst_Internal_Server_Error = "Internal Server Error",
    cst_Service_Unavailable = "Service Unavailable",
    cst_Enhance_Your_Calm = "Enhance Your Calm",
    cst_Upgrade_Required = "Upgrade Required",
    cst_Bad_Gateway = "Bad Gateway",
    cst_HTTP_Version_Not_Supported = "HTTP Version Not Supported",
    cst_Switching_Protocols = "Switching Protocols",
    cst_Request_Header_Fields_Too_ = "Request Header Fields Too Large",
    cst_Range_Not_Satisfiable = "Range Not Satisfiable";
   function default_reason_phrase(param){
    return -15361451 <= param
            ? 398750242
              <= param
              ? 792903807
                <= param
                ? 893234971
                  <= param
                  ? 1034456810
                    <= param
                    ? 1052164689
                      <= param
                      ? cst_Request_Timeout
                      : cst_Temporary_Redirect
                    : 897427648
                      <= param
                      ? cst_Expectation_Failed
                      : cst_Partial_Content
                  : 807430278 <= param ? cst_Precondition_Required : cst_Gone
                : 565592383
                  <= param
                  ? 731537414
                    <= param
                    ? 751586522
                      <= param
                      ? cst_URI_Too_Long
                      : cst_Gateway_Timeout
                    : 566851975 <= param ? cst_Accepted : cst_Payload_Too_Large
                  : 491839979 <= param ? cst_I_m_a_teapot : cst_Found
              : 102779818
                <= param
                ? 260151748
                  <= param
                  ? 324098644
                    <= param
                    ? 384167631
                      <= param
                      ? cst_Moved_Permanently
                      : cst_Unauthorized
                    : 282375460
                      <= param
                      ? cst_Precondition_Failed
                      : cst_See_Other
                  : 192584839
                    <= param
                    ? cst_Continue
                    : cst_Non_Authoritative_Informat
                : 17692
                  <= param
                  ? 18898339
                    <= param
                    ? 65414873
                      <= param
                      ? cst_Too_Many_Requests
                      : cst_Multiple_Choices
                    : 13829438 <= param ? cst_Method_Not_Allowed : cst_OK
                  : -12825579
                    <= param
                    ? cst_Proxy_Authentication_Requi
                    : cst_Network_Authentication_Req
            : -527633381
              <= param
              ? -358247754
                <= param
                ? -221106440
                  <= param
                  ? -99004555
                    <= param
                    ? -36288910 <= param ? cst_Conflict : cst_Bad_Request
                    : -176787538
                      <= param
                      ? cst_Not_Acceptable
                      : cst_Length_Required
                  : -234002583 <= param ? cst_Reset_Content : cst_Not_Found
                : -459143713
                  <= param
                  ? -398446314
                    <= param
                    ? -387970219 <= param ? cst_Not_Modified : cst_Use_Proxy
                    : -438114087
                      <= param
                      ? cst_Forbidden
                      : cst_Unsupported_Media_Type
                  : -498198474 <= param ? cst_Not_Implemented : cst_No_Content
              : -867418942
                <= param
                ? -774758938
                  <= param
                  ? -720017128
                    <= param
                    ? -558113336 <= param ? cst_Created : cst_Payment_Required
                    : -732353682
                      <= param
                      ? cst_Internal_Server_Error
                      : cst_Service_Unavailable
                  : -785212614
                    <= param
                    ? cst_Enhance_Your_Calm
                    : cst_Upgrade_Required
                : -1045236833
                  === param
                  ? cst_Range_Not_Satisfiable
                  : -1014316796
                    <= param
                    ? -957501398
                      <= param
                      ? cst_Bad_Gateway
                      : cst_HTTP_Version_Not_Supported
                    : -1021676630
                      <= param
                      ? cst_Switching_Protocols
                      : cst_Request_Header_Fields_Too_;
   }
   function to_code(param){
    if(typeof param === "number")
     return -15361451 <= param
             ? 398750242
               <= param
               ? 792903807
                 <= param
                 ? 893234971
                   <= param
                   ? 1034456810
                     <= param
                     ? 1052164689 <= param ? 408 : 307
                     : 897427648 <= param ? 417 : 206
                   : 807430278 <= param ? 428 : 410
                 : 565592383
                   <= param
                   ? 731537414
                     <= param
                     ? 751586522 <= param ? 414 : 504
                     : 566851975 <= param ? 202 : 413
                   : 491839979 <= param ? 418 : 302
               : 102779818
                 <= param
                 ? 260151748
                   <= param
                   ? 324098644
                     <= param
                     ? 384167631 <= param ? 301 : 401
                     : 282375460 <= param ? 412 : 303
                   : 192584839 <= param ? 100 : 203
                 : 17692
                   <= param
                   ? 18898339
                     <= param
                     ? 65414873 <= param ? 429 : 300
                     : 13829438 <= param ? 405 : 200
                   : -12825579 <= param ? 407 : 511
             : -527633381
               <= param
               ? -358247754
                 <= param
                 ? -221106440
                   <= param
                   ? -99004555
                     <= param
                     ? -36288910 <= param ? 409 : 400
                     : -176787538 <= param ? 406 : 411
                   : -234002583 <= param ? 205 : 404
                 : -459143713
                   <= param
                   ? -398446314
                     <= param
                     ? -387970219 <= param ? 304 : 305
                     : -438114087 <= param ? 403 : 415
                   : -498198474 <= param ? 501 : 204
               : -867418942
                 <= param
                 ? -774758938
                   <= param
                   ? -720017128
                     <= param
                     ? -558113336 <= param ? 201 : 402
                     : -732353682 <= param ? 500 : 503
                   : -785212614 <= param ? 420 : 426
                 : -1045236833
                   === param
                   ? 416
                   : -1014316796
                     <= param
                     ? -957501398 <= param ? 502 : 505
                     : -1021676630 <= param ? 101 : 431;
    var c = param[2];
    return c;
   }
   function really_unsafe_of_code(c){
    if(300 <= c)
     if(432 <= c){
      var switcher = c - 500 | 0;
      if(11 >= switcher >>> 0)
       switch(switcher){
         case 0:
          return -732353682;
         case 1:
          return -498198474;
         case 2:
          return -957501398;
         case 3:
          return -774758938;
         case 4:
          return 731537414;
         case 5:
          return -1014316796;
         case 11:
          return -15361451;
       }
     }
     else
      if(308 <= c){
       if(400 <= c)
        switch(c - 400 | 0){
          case 0:
           return -99004555;
          case 1:
           return 324098644;
          case 2:
           return -720017128;
          case 3:
           return -438114087;
          case 4:
           return -358247754;
          case 5:
           return 13829438;
          case 6:
           return -176787538;
          case 7:
           return -12825579;
          case 8:
           return 1052164689;
          case 9:
           return -36288910;
          case 10:
           return 792903807;
          case 11:
           return -221106440;
          case 12:
           return 282375460;
          case 13:
           return 565592383;
          case 14:
           return 751586522;
          case 15:
           return -459143713;
          case 16:
           return -1045236833;
          case 17:
           return 897427648;
          case 18:
           return 491839979;
          case 20:
           return -785212614;
          case 26:
           return -867418942;
          case 28:
           return 807430278;
          case 29:
           return 65414873;
          case 31:
           return -1051942420;
        }
      }
      else
       switch(c - 300 | 0){
         case 0:
          return 18898339;
         case 1:
          return 384167631;
         case 2:
          return 398750242;
         case 3:
          return 260151748;
         case 4:
          return -387970219;
         case 5:
          return -398446314;
         case 6: break;
         default: return 1034456810;
       }
    else{
     var switcher$0 = c - 100 | 0;
     if(1 >= switcher$0 >>> 0) return switcher$0 ? -1021676630 : 192584839;
     var switcher$1 = switcher$0 - 100 | 0;
     if(6 >= switcher$1 >>> 0)
      switch(switcher$1){
        case 0:
         return 17692;
        case 1:
         return -558113336;
        case 2:
         return 566851975;
        case 3:
         return 102779818;
        case 4:
         return -527633381;
        case 5:
         return -234002583;
        default: return 893234971;
      }
    }
    return [0, 748543309, c];
   }
   function unsafe_of_code(c){
    var s = really_unsafe_of_code(c);
    if(typeof s !== "number" && 748543309 === s[1]){
     var c$0 = s[2];
     if(0 <= c$0) return [0, 748543309, c$0];
     var _q_ = caml_call2(Stdlib_Printf[4], _a_, c$0);
     return caml_call1(Stdlib[2], _q_);
    }
    return s;
   }
   function of_code(c){
    var s = really_unsafe_of_code(c);
    if(typeof s !== "number" && 748543309 === s[1]){
     var c$0 = s[2];
     if(100 <= c$0 && 999 >= c$0) return [0, 748543309, c$0];
     var _p_ = caml_call2(Stdlib_Printf[4], _b_, c$0);
     return caml_call1(Stdlib[2], _p_);
    }
    return s;
   }
   function is_informational(t){
    a:
    {
     if(typeof t === "number"){
      if(-1021676630 !== t && 192584839 !== t) break a;
      return 1;
     }
     if(748543309 === t[1]){
      var
       n = t[2],
       _n_ = 100 <= n ? 1 : 0,
       _o_ = _n_ ? n <= 199 ? 1 : 0 : _n_;
      return _o_;
     }
    }
    return 0;
   }
   function is_successful(t){
    a:
    {
     if(typeof t === "number"){
      if(17692 <= t){
       if(566851975 <= t){
        if(893234971 !== t && 566851976 <= t) break a;
       }
       else if(102779818 !== t && 17693 <= t) break a;
      }
      else if(-558113336 !== t && -527633381 !== t && -234002583 !== t)
       break a;
      return 1;
     }
     if(748543309 === t[1]){
      var
       n = t[2],
       _l_ = 200 <= n ? 1 : 0,
       _m_ = _l_ ? n <= 299 ? 1 : 0 : _l_;
      return _m_;
     }
    }
    return 0;
   }
   function is_redirection(t){
    a:
    {
     if(typeof t === "number"){
      if(260151748 <= t){
       if(398750242 <= t){
        if(1034456810 !== t && 398750243 <= t) break a;
       }
       else if(384167631 !== t && 260151749 <= t) break a;
      }
      else if(-398446314 !== t && -387970219 !== t && 18898339 !== t) break a;
      return 1;
     }
     if(748543309 === t[1]){
      var
       n = t[2],
       _j_ = 300 <= n ? 1 : 0,
       _k_ = _j_ ? n <= 399 ? 1 : 0 : _j_;
      return _k_;
     }
    }
    return 0;
   }
   function is_client_error(t){
    a:
    {
     if(typeof t === "number"){
      if(-36288909 <= t){
       if(491839980 <= t){
        if(792903808 <= t){
         if(807430278 !== t && 897427648 !== t && 1052164689 !== t) break a;
        }
        else if(565592383 !== t && 751586522 !== t && 792903807 > t) break a;
       }
       else
        if(65414874 <= t){
         if(282375460 !== t && 324098644 !== t && 491839979 > t) break a;
        }
        else if(-12825579 !== t && 13829438 !== t && 65414873 > t) break a;
      }
      else
       if(-459143712 <= t){
        if(-221106439 <= t){
         if(-176787538 !== t && -99004555 !== t && -36288910 > t) break a;
        }
        else if(-438114087 !== t && -358247754 !== t && -221106440 > t)
         break a;
       }
       else
        if(-867418941 <= t){
         if(-785212614 !== t && -720017128 !== t && -459143713 > t) break a;
        }
        else if(-1051942420 !== t && -1045236833 !== t && -867418942 > t)
         break a;
      return 1;
     }
     if(748543309 === t[1]){
      var
       n = t[2],
       _h_ = 400 <= n ? 1 : 0,
       _i_ = _h_ ? n <= 499 ? 1 : 0 : _h_;
      return _i_;
     }
    }
    return 0;
   }
   function is_server_error(t){
    a:
    {
     if(typeof t === "number"){
      if(-732353682 <= t){
       if(-15361451 <= t){
        if(731537414 !== t && -15361450 <= t) break a;
       }
       else if(-498198474 !== t && -732353681 <= t) break a;
      }
      else if(-1014316796 !== t && -957501398 !== t && -774758938 !== t)
       break a;
      return 1;
     }
     if(748543309 === t[1]){
      var
       n = t[2],
       _f_ = 500 <= n ? 1 : 0,
       _g_ = _f_ ? n <= 599 ? 1 : 0 : _f_;
      return _g_;
     }
    }
    return 0;
   }
   function is_error(t){
    var _e_ = is_client_error(t);
    return _e_ ? _e_ : is_server_error(t);
   }
   function to_string(param){
    if(typeof param === "number")
     return -15361451 <= param
             ? 398750242
               <= param
               ? 792903807
                 <= param
                 ? 893234971
                   <= param
                   ? 1034456810
                     <= param
                     ? 1052164689 <= param ? cst_408 : cst_307
                     : 897427648 <= param ? cst_417 : cst_206
                   : 807430278 <= param ? cst_428 : cst_410
                 : 565592383
                   <= param
                   ? 731537414
                     <= param
                     ? 751586522 <= param ? cst_414 : cst_504
                     : 566851975 <= param ? cst_202 : cst_413
                   : 491839979 <= param ? cst_418 : cst_302
               : 102779818
                 <= param
                 ? 260151748
                   <= param
                   ? 324098644
                     <= param
                     ? 384167631 <= param ? cst_301 : cst_401
                     : 282375460 <= param ? cst_412 : cst_303
                   : 192584839 <= param ? cst_100 : cst_203
                 : 17692
                   <= param
                   ? 18898339
                     <= param
                     ? 65414873 <= param ? cst_429 : cst_300
                     : 13829438 <= param ? cst_405 : cst_200
                   : -12825579 <= param ? cst_407 : cst_511
             : -527633381
               <= param
               ? -358247754
                 <= param
                 ? -221106440
                   <= param
                   ? -99004555
                     <= param
                     ? -36288910 <= param ? cst_409 : cst_400
                     : -176787538 <= param ? cst_406 : cst_411
                   : -234002583 <= param ? cst_205 : cst_404
                 : -459143713
                   <= param
                   ? -398446314
                     <= param
                     ? -387970219 <= param ? cst_304 : cst_305
                     : -438114087 <= param ? cst_403 : cst_415
                   : -498198474 <= param ? cst_501 : cst_204
               : -867418942
                 <= param
                 ? -774758938
                   <= param
                   ? -720017128
                     <= param
                     ? -558113336 <= param ? cst_201 : cst_402
                     : -732353682 <= param ? cst_500 : cst_503
                   : -785212614 <= param ? cst_420 : cst_426
                 : -1045236833
                   === param
                   ? cst_416
                   : -1014316796
                     <= param
                     ? -957501398 <= param ? cst_502 : cst_505
                     : -1021676630 <= param ? cst_101 : cst_431;
    var c = param[2];
    return caml_call1(Stdlib[33], c);
   }
   function of_string(x){return of_code(runtime.caml_int_of_string(x));}
   function pp_hum(fmt, t){
    var _d_ = to_code(t);
    return caml_call3(Stdlib_Format[137], fmt, _c_, _d_);
   }
   var
    Dream_httpaf_Status =
      [0,
       default_reason_phrase,
       to_code,
       really_unsafe_of_code,
       unsafe_of_code,
       of_code,
       is_informational,
       is_successful,
       is_redirection,
       is_client_error,
       is_server_error,
       is_error,
       to_string,
       of_string,
       pp_hum];
   runtime.caml_register_global
    (100, Dream_httpaf_Status, "Dream_httpaf___Status");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Headers
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst$3 = "\r\n",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    cst$0 = cst$3,
    cst$1 = cst$3,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    _a_ =
      [0,
       [18,
        [1, [0, 0, cst$2]],
        [12, 40, [3, 0, [12, 32, [3, 0, [12, 41, [17, 0, 0]]]]]]],
       "@[(%S %S)@]"],
    _b_ = [0, [18, [1, [0, 0, cst$2]], [12, 40, 0]], "@[("],
    _c_ = [0, [12, 41, [17, 0, 0]], ")@]"],
    cst_Dream_httpaf_Headers_Local = "Dream_httpaf___Headers.Local",
    empty = 0;
   function of_rev_list(t){return t;}
   function of_list(t){return caml_call1(Stdlib_List[10], t);}
   function to_rev_list(t){return t;}
   function to_list(t){return caml_call1(Stdlib_List[10], t);}
   function ci_equal(x, y){
    var
     len = caml_ml_string_length(x),
     _o_ = len === caml_ml_string_length(y) ? 1 : 0;
    if(_o_){
     var equal_so_far = [0, 1], i = [0, 0];
     for(;;){
      if(equal_so_far[1] && i[1] < len){
       var
        c1 = caml_string_unsafe_get(x, i[1]),
        c2 = caml_string_unsafe_get(y, i[1]),
        codes = c1 << 8 | c2,
        b = 32896 | codes,
        c = b - 24929 | 0,
        d = caml_call1(Stdlib[21], b - 31611 | 0),
        e = c & d & caml_call1(Stdlib[21], codes) & 32896,
        upper = codes - (e >>> 2 | 0) | 0;
       equal_so_far[1] = (upper >>> 8 | 0) === (upper & 255) ? 1 : 0;
       i[1]++;
       continue;
      }
      var _p_ = equal_so_far[1];
      break;
     }
    }
    else
     var _p_ = _o_;
    return _p_;
   }
   function mem(t, name){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var t$1 = t$0[2], name$0 = t$0[1][1], _n_ = ci_equal(name, name$0);
     if(_n_) return _n_;
     var t$0 = t$1;
    }
   }
   function add(t, name, value){return [0, [0, name, value], t];}
   function add_list(t, ls){return caml_call2(Stdlib[37], ls, t);}
   function add_multi(t, lss){
    var t$0 = t, lss$0 = lss;
    for(;;){
     if(! lss$0) return t$0;
     var
      lss$1 = lss$0[2],
      match = lss$0[1],
      vs = match[2],
      n = match[1],
      t$1 = t$0,
      vs$0 = vs;
     for(;;){
      if(! vs$0) break;
      var
       vs$1 = vs$0[2],
       v = vs$0[1],
       t$2 = [0, [0, n, v], t$1],
       t$1 = t$2,
       vs$0 = vs$1;
     }
     var t$0 = t$1, lss$0 = lss$1;
    }
   }
   function add_unless_exists(t, name, value){
    return mem(t, name) ? t : [0, [0, name, value], t];
   }
   var
    Local = [248, cst_Dream_httpaf_Headers_Local, runtime.caml_fresh_oo_id(0)];
   function replace(t, name, value){
    function loop(t, needle, nv, seen){
     var t$0 = t, seen$0 = seen;
     for(;;){
      if(! t$0){
       if(seen$0) return 0;
       throw caml_maybe_attach_backtrace(Local, 1);
      }
      var t$1 = t$0[2], nv$0 = t$0[1], name = nv$0[1];
      if(! ci_equal(needle, name))
       return [0, nv$0, loop(t$1, needle, nv, seen$0)];
      if(! seen$0) return [0, nv, loop(t$1, needle, nv, 1)];
      var t$0 = t$1, seen$0 = 1;
     }
    }
    try{var _l_ = loop(t, name, [0, name, value], 0); return _l_;}
    catch(_m_){
     var _k_ = caml_wrap_exception(_m_);
     if(_k_ === Local) return t;
     throw caml_maybe_attach_backtrace(_k_, 0);
    }
   }
   function remove(t, name){
    function loop(s, needle, seen){
     var s$0 = s, seen$0 = seen;
     for(;;){
      if(! s$0){
       if(seen$0) return 0;
       throw caml_maybe_attach_backtrace(Local, 1);
      }
      var s$1 = s$0[2], nv = s$0[1], name = nv[1];
      if(! ci_equal(needle, name)) return [0, nv, loop(s$1, needle, seen$0)];
      var s$0 = s$1, seen$0 = 1;
     }
    }
    try{var _i_ = loop(t, name, 0); return _i_;}
    catch(_j_){
     var _h_ = caml_wrap_exception(_j_);
     if(_h_ === Local) return t;
     throw caml_maybe_attach_backtrace(_h_, 0);
    }
   }
   function get(t, name){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var t$1 = t$0[2], match = t$0[1], v = match[2], n = match[1];
     if(ci_equal(name, n)) return [0, v];
     var t$0 = t$1;
    }
   }
   function get_exn(t, name){
    var t$0 = t;
    for(;;){
     if(! t$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var t$1 = t$0[2], match = t$0[1], v = match[2], n = match[1];
     if(ci_equal(name, n)) return v;
     var t$0 = t$1;
    }
   }
   function get_multi(t, name){
    var t$0 = t, acc = 0;
    for(;;){
     if(! t$0) return acc;
     var t$1 = t$0[2], match = t$0[1], v = match[2], n = match[1];
     if(ci_equal(name, n))
      var acc$0 = [0, v, acc], t$0 = t$1, acc = acc$0;
     else
      var t$0 = t$1;
    }
   }
   function iter(f, t){
    function _g_(param){
     var value = param[2], name = param[1];
     return caml_call2(f, name, value);
    }
    return caml_call2(Stdlib_List[18], _g_, t);
   }
   function fold(f, init, t){
    function _f_(acc, param){
     var value = param[2], name = param[1];
     return caml_call3(f, name, value, acc);
    }
    return caml_call3(Stdlib_List[26], _f_, init, t);
   }
   function to_string(t){
    var b = caml_call1(Stdlib_Buffer[1], 128), _e_ = to_list(t);
    iter
     (function(name, value){
       caml_call2(Stdlib_Buffer[16], b, name);
       caml_call2(Stdlib_Buffer[16], b, cst);
       caml_call2(Stdlib_Buffer[16], b, value);
       return caml_call2(Stdlib_Buffer[16], b, cst$0);
      },
      _e_);
    caml_call2(Stdlib_Buffer[16], b, cst$1);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function pp_hum(fmt, t){
    function pp_elem(fmt, param){
     var v = param[2], n = param[1];
     return caml_call4(Stdlib_Format[137], fmt, _a_, n, v);
    }
    caml_call2(Stdlib_Format[137], fmt, _b_);
    var _d_ = to_list(t);
    caml_call4(Stdlib_Format[130], 0, pp_elem, fmt, _d_);
    return caml_call2(Stdlib_Format[137], fmt, _c_);
   }
   var
    Dream_httpaf_Headers =
      [0,
       ci_equal,
       empty,
       of_list,
       of_rev_list,
       to_list,
       to_rev_list,
       add,
       add_unless_exists,
       add_list,
       add_multi,
       remove,
       replace,
       mem,
       get,
       get_exn,
       get_multi,
       iter,
       fold,
       to_string,
       pp_hum];
   runtime.caml_register_global
    (11, Dream_httpaf_Headers, "Dream_httpaf___Headers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___IOVec
//# unitInfo: Requires: Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    _c_ =
      [0,
       [11,
        "{ buffer = <opaque>; off = ",
        [4, 0, 0, 0, [11, "; len = ", [4, 0, 0, 0, [11, " }", 0]]]]],
       "{ buffer = <opaque>; off = %d; len = %d }"],
    cst_shiftv_n_lengthv_iovecs = "shiftv: n > lengthv iovecs",
    _b_ =
      [0,
       [11, "IOVec.shiftv: ", [4, 0, 0, 0, [11, " is a negative number", 0]]],
       "IOVec.shiftv: %d is a negative number"],
    _a_ = [0, "src/vendor/httpaf/lib/iOVec.ml", 44, 2];
   function length(param){var len = param[3]; return len;}
   function lengthv(iovs){
    var _e_ = 0;
    function _f_(acc, param){var len = param[3]; return acc + len | 0;}
    return caml_call3(Stdlib_List[26], _f_, _e_, iovs);
   }
   function shift(param, n){
    var len = param[3], off = param[2], buffer = param[1];
    if(n <= len) return [0, buffer, off + n | 0, len - n | 0];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function shiftv(iovecs, n){
    if(n < 0){
     var _d_ = caml_call2(Stdlib_Printf[4], _b_, n);
     caml_call1(Stdlib[2], _d_);
    }
    var iovecs$0 = iovecs, n$0 = n;
    for(;;){
     if(0 === n$0) return iovecs$0;
     if(! iovecs$0) return caml_call1(Stdlib[2], cst_shiftv_n_lengthv_iovecs);
     var iovecs$1 = iovecs$0[2], iovec = iovecs$0[1], iovec_len = iovec[3];
     if(iovec_len > n$0) return [0, shift(iovec, n$0), iovecs$1];
     var n$1 = n$0 - iovec_len | 0, iovecs$0 = iovecs$1, n$0 = n$1;
    }
   }
   function add_len(param, n){
    var len = param[3], off = param[2], buffer = param[1];
    return [0, buffer, off, len + n | 0];
   }
   function pp_hum(fmt, t){
    return caml_call4(Stdlib_Format[137], fmt, _c_, t[2], t[3]);
   }
   var
    Dream_httpaf_IOVec = [0, length, lengthv, shift, shiftv, add_len, pp_hum];
   runtime.caml_register_global(9, Dream_httpaf_IOVec, "Dream_httpaf___IOVec");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Message
//# unitInfo: Requires: Dream_httpaf___Headers, Dream_httpaf___Version, Stdlib__Int64, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Dream_httpaf_Version = global_data.Dream_httpaf___Version,
    _a_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    cst_content_length = "content-length",
    cst_connection = "connection";
   function persistent_connection(opt, version, headers){
    var match = caml_call2(Dream_httpaf_Headers[14], headers, cst_connection);
    if(match){
     var _d_ = match[1];
     if(! caml_string_notequal(_d_, "close")) return 0;
     if(! caml_string_notequal(_d_, "keep-alive"))
      return 0
              <=
               caml_call2
                (Dream_httpaf_Version[4], version, Dream_httpaf_Version[1])
              ? 1
              : 0;
    }
    return 0
            <=
             caml_call2
              (Dream_httpaf_Version[4], version, Dream_httpaf_Version[2])
            ? 1
            : 0;
   }
   function sort_uniq(xs){
    if(xs && xs[2]) return caml_call2(Stdlib_List[62], Stdlib_String[10], xs);
    return xs;
   }
   function unique_content_length_values(headers){
    return sort_uniq
            (caml_call2(Dream_httpaf_Headers[16], headers, cst_content_length));
   }
   function content_length_of_string(s){
    try{var _b_ = runtime.caml_int64_of_string(s); return _b_;}
    catch(_c_){return _a_;}
   }
   var
    Dream_httpaf_Message =
      [0,
       persistent_connection,
       sort_uniq,
       unique_content_length_values,
       content_length_of_string];
   runtime.caml_register_global
    (9, Dream_httpaf_Message, "Dream_httpaf___Message");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Method
//# unitInfo: Requires: Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_CONNECT$0 = "CONNECT",
    cst_DELETE$0 = "DELETE",
    cst_GET$0 = "GET",
    cst_HEAD$0 = "HEAD",
    cst_OPTIONS$0 = "OPTIONS",
    cst_POST$0 = "POST",
    cst_PUT$0 = "PUT",
    cst_TRACE$0 = "TRACE",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    _a_ = [0, [2, 0, 0], "%s"],
    cst_POST = cst_POST$0,
    cst_HEAD = cst_HEAD$0,
    cst_DELETE = cst_DELETE$0,
    cst_CONNECT = cst_CONNECT$0,
    cst_TRACE = cst_TRACE$0,
    cst_PUT = cst_PUT$0,
    cst_GET = cst_GET$0,
    cst_OPTIONS = cst_OPTIONS$0;
   function is_safe(param){
    a:
    if(typeof param === "number"){
     if(3546231 <= param){
      if(336447077 !== param && 801894688 !== param) break a;
     }
     else if(-539883714 !== param && 3546230 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_cacheable(param){
    a:
    if(typeof param === "number"){
     if(3546230 !== param && 801894688 !== param && 891112544 !== param)
      break a;
     return 1;
    }
    return 0;
   }
   function is_idempotent(t){
    a:
    if(typeof t === "number"){
     if(3997359 !== t && 492530731 !== t) break a;
     return 1;
    }
    return is_safe(t);
   }
   function to_string(param){
    if(typeof param === "number")
     return 357830602 <= param
             ? 801894688
               <= param
               ? 891112544 <= param ? cst_POST : cst_HEAD
               : 492530731 <= param ? cst_DELETE : cst_CONNECT
             : 3997359
               <= param
               ? 336447077 <= param ? cst_TRACE : cst_PUT
               : 3546230 <= param ? cst_GET : cst_OPTIONS;
    var s = param[2];
    return s;
   }
   function of_string(s){
    return caml_string_notequal(s, cst_CONNECT$0)
            ? caml_string_notequal
               (s, cst_DELETE$0)
              ? caml_string_notequal
                 (s, cst_GET$0)
                ? caml_string_notequal
                   (s, cst_HEAD$0)
                  ? caml_string_notequal
                     (s, cst_OPTIONS$0)
                    ? caml_string_notequal
                       (s, cst_POST$0)
                      ? caml_string_notequal
                         (s, cst_PUT$0)
                        ? caml_string_notequal
                           (s, cst_TRACE$0)
                          ? [0, -912009552, s]
                          : 336447077
                        : 3997359
                      : 891112544
                    : -539883714
                  : 801894688
                : 3546230
              : 492530731
            : 357830602;
   }
   function pp_hum(fmt, t){
    var _b_ = to_string(t);
    return caml_call3(Stdlib_Format[137], fmt, _a_, _b_);
   }
   var
    Dream_httpaf_Method =
      [0, is_safe, is_cacheable, is_idempotent, to_string, of_string, pp_hum];
   runtime.caml_register_global
    (18, Dream_httpaf_Method, "Dream_httpaf___Method");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Optional_thunk
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Optional_thunk_this_functi =
      "Optional_thunk: this function is not representable as a some value";
   function none(param){return 0;}
   function some(f){
    if(f === none) caml_call1(Stdlib[2], cst_Optional_thunk_this_functi);
    return f;
   }
   function is_none(t){return t === none ? 1 : 0;}
   function is_some(t){return 1 - is_none(t);}
   function call_if_some(t){return caml_call1(t, 0);}
   function unchecked_value(t){return t;}
   var
    Dream_httpaf_Optional_thunk =
      [0, none, some, is_none, is_some, call_if_some, unchecked_value];
   runtime.caml_register_global
    (2, Dream_httpaf_Optional_thunk, "Dream_httpaf___Optional_thunk");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Request
//# unitInfo: Requires: Dream_httpaf___Headers, Dream_httpaf___Message, Dream_httpaf___Method, Dream_httpaf___Version, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    bad_request = [0, 106380200, -99004555],
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Dream_httpaf_Version = global_data.Dream_httpaf___Version,
    Dream_httpaf_Method = global_data.Dream_httpaf___Method,
    Stdlib_Format = global_data.Stdlib__Format,
    Dream_httpaf_Message = global_data.Dream_httpaf___Message,
    Stdlib_List = global_data.Stdlib__List,
    _d_ =
      [0,
       [11,
        '((method "',
        [15,
         [11,
          '") (target ',
          [3,
           0,
           [11,
            ') (version "',
            [15, [11, '") (headers ', [15, [11, "))", 0]]]]]]]]],
       '((method "%a") (target %S) (version "%a") (headers %a))'],
    cst_transfer_encoding = "transfer-encoding",
    cst_chunked = "chunked",
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _c_ = [0, 332360020, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    cst_Chunked = "Chunked",
    _a_ = [0, [11, "Fixed ", [7, 3, 0, 0, 0]], "Fixed %Li"],
    cst_Error_Bad_request = "Error: Bad request";
   function create(opt, _f_, meth, target){
    if(opt)
     var sth = opt[1], version = sth;
    else
     var version = Dream_httpaf_Version[2];
    if(_f_)
     var sth$0 = _f_[1], headers = sth$0;
    else
     var headers = Dream_httpaf_Headers[2];
    return [0, meth, target, version, headers];
   }
   function pp_hum(fmt, len){
    if(typeof len === "number")
     return caml_call2(Stdlib_Format[13], fmt, cst_Chunked);
    if(332360020 > len[1])
     return caml_call2(Stdlib_Format[13], fmt, cst_Error_Bad_request);
    var n = len[2];
    return caml_call3(Stdlib_Format[137], fmt, _a_, n);
   }
   var Body_length = [0, pp_hum];
   function body_length(param){
    var
     headers = param[4],
     _e_ =
       caml_call2(Dream_httpaf_Headers[16], headers, cst_transfer_encoding),
     match = caml_call1(Stdlib_List[10], _e_);
    if(match){
     var value = match[1];
     return caml_call2(Dream_httpaf_Headers[1], value, cst_chunked)
             ? 505707500
             : bad_request;
    }
    var match$0 = caml_call1(Dream_httpaf_Message[3], headers);
    if(! match$0) return _c_;
    if(match$0[2]) return bad_request;
    var len = match$0[1], len$0 = caml_call1(Dream_httpaf_Message[4], len);
    return runtime.caml_greaterequal(len$0, _b_)
            ? [0, 332360020, len$0]
            : bad_request;
   }
   function persistent_connection(proxy, param){
    var headers = param[4], version = param[3];
    return caml_call3(Dream_httpaf_Message[1], proxy, version, headers);
   }
   function pp_hum$0(fmt, param){
    var
     headers = param[4],
     version = param[3],
     target = param[2],
     meth = param[1];
    return caml_call9
            (Stdlib_Format[137],
             fmt,
             _d_,
             Dream_httpaf_Method[6],
             meth,
             target,
             Dream_httpaf_Version[7],
             version,
             Dream_httpaf_Headers[20],
             headers);
   }
   var
    Dream_httpaf_Request =
      [0,
       create,
       bad_request,
       Body_length,
       body_length,
       persistent_connection,
       pp_hum$0];
   runtime.caml_register_global
    (15, Dream_httpaf_Request, "Dream_httpaf___Request");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Response
//# unitInfo: Requires: Dream_httpaf___Headers, Dream_httpaf___Message, Dream_httpaf___Status, Dream_httpaf___Version, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    proxy_error = [0, 106380200, -957501398],
    server_error = [0, 106380200, -732353682],
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Dream_httpaf_Status = global_data.Dream_httpaf___Status,
    Dream_httpaf_Version = global_data.Dream_httpaf___Version,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Dream_httpaf_Message = global_data.Dream_httpaf___Message,
    _f_ =
      [0,
       [11,
        '((version "',
        [15,
         [11,
          '") (status ',
          [15,
           [11,
            ") (reason ",
            [3, 0, [11, ") (headers ", [15, [11, "))", 0]]]]]]]]],
       '((version "%a") (status %a) (reason %S) (headers %a))'],
    _b_ = [0, 332360020, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    _d_ = [0, 332360020, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    cst_transfer_encoding = "transfer-encoding",
    cst_chunked = "chunked",
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _c_ = [0, 332360020, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    cst_Close_delimited = "Close delimited",
    cst_Chunked = "Chunked",
    _a_ = [0, [11, "Fixed ", [7, 3, 0, 0, 0]], "Fixed %Li"],
    cst_Error_Internal_server_erro = "Error: Internal server error",
    cst_Error_Bad_gateway = "Error: Bad gateway",
    cst_Non_standard_status_code = "Non-standard status code";
   function create(reason, opt, _h_, status){
    if(opt)
     var sth = opt[1], version = sth;
    else
     var version = Dream_httpaf_Version[2];
    if(_h_)
     var sth$0 = _h_[1], headers = sth$0;
    else
     var headers = Dream_httpaf_Headers[2];
    if(reason)
     var reason$0 = reason[1], reason$1 = reason$0;
    else
     var
      reason$1 =
        typeof status === "number"
         ? caml_call1(Dream_httpaf_Status[1], status)
         : cst_Non_standard_status_code;
    return [0, version, status, reason$1, headers];
   }
   function persistent_connection(proxy, param){
    var headers = param[4], version = param[1];
    return caml_call3(Dream_httpaf_Message[1], proxy, version, headers);
   }
   function pp_hum(fmt, len){
    if(typeof len === "number")
     return 536442962 <= len
             ? caml_call2(Stdlib_Format[13], fmt, cst_Close_delimited)
             : caml_call2(Stdlib_Format[13], fmt, cst_Chunked);
    if(332360020 > len[1])
     return -732353682 <= len[2]
             ? caml_call2
               (Stdlib_Format[13], fmt, cst_Error_Internal_server_erro)
             : caml_call2(Stdlib_Format[13], fmt, cst_Error_Bad_gateway);
    var n = len[2];
    return caml_call3(Stdlib_Format[137], fmt, _a_, n);
   }
   var Body_length = [0, pp_hum];
   function body_length(opt, request_method, param){
    if(opt) var sth = opt[1], proxy = sth; else var proxy = 0;
    var headers = param[4], status = param[2];
    if(typeof request_method === "number" && 801894688 === request_method)
     return _b_;
    a:
    if(typeof status === "number"){
     if(-527633381 !== status && -387970219 !== status) break a;
     return _c_;
    }
    if(caml_call1(Dream_httpaf_Status[6], status)) return _d_;
    if
     (typeof request_method === "number"
      &&
       357830602 === request_method
       && caml_call1(Dream_httpaf_Status[7], status))
     return 536442962;
    var
     _g_ =
       caml_call2(Dream_httpaf_Headers[16], headers, cst_transfer_encoding),
     match = caml_call1(Stdlib_List[10], _g_);
    if(match){
     var value = match[1];
     return caml_call2(Dream_httpaf_Headers[1], value, cst_chunked)
             ? 505707500
             : 536442962;
    }
    var match$0 = caml_call1(Dream_httpaf_Message[3], headers);
    if(! match$0) return 536442962;
    if(match$0[2]) return proxy ? proxy_error : server_error;
    var len = match$0[1], len$0 = caml_call1(Dream_httpaf_Message[4], len);
    return runtime.caml_greaterequal(len$0, _e_)
            ? [0, 332360020, len$0]
            : proxy ? proxy_error : server_error;
   }
   function pp_hum$0(fmt, param){
    var
     headers = param[4],
     reason = param[3],
     status = param[2],
     version = param[1];
    return caml_call9
            (Stdlib_Format[137],
             fmt,
             _f_,
             Dream_httpaf_Version[7],
             version,
             Dream_httpaf_Status[14],
             status,
             reason,
             Dream_httpaf_Headers[20],
             headers);
   }
   var
    Dream_httpaf_Response =
      [0,
       create,
       persistent_connection,
       proxy_error,
       server_error,
       Body_length,
       body_length,
       pp_hum$0];
   runtime.caml_register_global
    (21, Dream_httpaf_Response, "Dream_httpaf___Response");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Serialize
//# unitInfo: Requires: Bigstringaf, Dream_httpaf___Headers, Dream_httpaf___IOVec, Dream_httpaf___Method, Dream_httpaf___Optional_thunk, Dream_httpaf___Status, Dream_httpaf___Version, Faraday, Stdlib, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ": ",
    cst = "\r\n",
    Faraday = global_data.Faraday,
    Dream_httpaf_Optional_thunk = global_data.Dream_httpaf___Optional_thunk,
    Stdlib = global_data.Stdlib,
    Dream_httpaf_IOVec = global_data.Dream_httpaf___IOVec,
    Stdlib_List = global_data.Stdlib__List,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Dream_httpaf_Status = global_data.Dream_httpaf___Status,
    Dream_httpaf_Method = global_data.Dream_httpaf___Method,
    Dream_httpaf_Version = global_data.Dream_httpaf___Version,
    cst_on_wakeup_on_closed_writer = "on_wakeup on closed writer",
    cst_on_wakeup_only_one_callbac =
      "on_wakeup: only one callback can be registered at a time",
    _a_ = [0, [4, 6, 0, 0, 0], "%x"];
   function write_space(t){return caml_call2(Faraday[7], t, 32);}
   function write_crlf(t){return caml_call4(Faraday[3], t, 0, 0, cst);}
   function write_version(t, version){
    var _h_ = caml_call1(Dream_httpaf_Version[5], version);
    return caml_call4(Faraday[3], t, 0, 0, _h_);
   }
   function write_method(t, meth){
    var _g_ = caml_call1(Dream_httpaf_Method[4], meth);
    return caml_call4(Faraday[3], t, 0, 0, _g_);
   }
   function write_status(t, status){
    var _f_ = caml_call1(Dream_httpaf_Status[12], status);
    return caml_call4(Faraday[3], t, 0, 0, _f_);
   }
   function write_headers(t, headers){
    var _d_ = caml_call1(Dream_httpaf_Headers[5], headers);
    function _e_(param){
     var value = param[2], name = param[1];
     caml_call4(Faraday[3], t, 0, 0, name);
     caml_call4(Faraday[3], t, 0, 0, cst$0);
     caml_call4(Faraday[3], t, 0, 0, value);
     return write_crlf(t);
    }
    caml_call2(Stdlib_List[18], _e_, _d_);
    return write_crlf(t);
   }
   function write_request(t, param){
    var
     headers = param[4],
     version = param[3],
     target = param[2],
     meth = param[1];
    write_method(t, meth);
    write_space(t);
    caml_call4(Faraday[3], t, 0, 0, target);
    write_space(t);
    write_version(t, version);
    write_crlf(t);
    return write_headers(t, headers);
   }
   function write_response(t, param){
    var
     headers = param[4],
     reason = param[3],
     status = param[2],
     version = param[1];
    write_version(t, version);
    write_space(t);
    write_status(t, status);
    write_space(t);
    caml_call4(Faraday[3], t, 0, 0, reason);
    write_crlf(t);
    return write_headers(t, headers);
   }
   function write_chunk_length(t, len){
    var _c_ = caml_call2(Stdlib_Printf[4], _a_, len);
    caml_call4(Faraday[3], t, 0, 0, _c_);
    return write_crlf(t);
   }
   function write_string_chunk(t, chunk){
    write_chunk_length(t, runtime.caml_ml_string_length(chunk));
    caml_call4(Faraday[3], t, 0, 0, chunk);
    return write_crlf(t);
   }
   function write_bigstring_chunk(t, chunk){
    write_chunk_length(t, caml_call1(Bigstringaf[6], chunk));
    caml_call4(Faraday[5], t, 0, 0, chunk);
    return write_crlf(t);
   }
   function schedule_bigstring_chunk(t, chunk){
    write_chunk_length(t, caml_call1(Bigstringaf[6], chunk));
    caml_call4(Faraday[11], t, 0, 0, chunk);
    return write_crlf(t);
   }
   function create(opt, param){
    if(opt) var sth = opt[1], buffer_size = sth; else var buffer_size = 2048;
    var
     buffer = caml_call1(Bigstringaf[1], buffer_size),
     encoder = caml_call1(Faraday[2], buffer);
    return [0, buffer, encoder, 0, Dream_httpaf_Optional_thunk[1]];
   }
   function faraday(t){return t[2];}
   function write_request$0(t, request){return write_request(t[2], request);}
   function write_response$0(t, response){
    return write_response(t[2], response);
   }
   function write_string(t, off, len, string){
    return caml_call4(Faraday[3], t[2], off, len, string);
   }
   function write_bytes(t, off, len, bytes){
    return caml_call4(Faraday[4], t[2], off, len, bytes);
   }
   function write_bigstring(t, off, len, bigstring){
    return caml_call4(Faraday[5], t[2], off, len, bigstring);
   }
   function schedule_bigstring(t, off, len, bigstring){
    return caml_call4(Faraday[11], t[2], off, len, bigstring);
   }
   function schedule_fixed(t, iovecs){
    function _b_(param){
     var len = param[3], off = param[2], buffer = param[1];
     return schedule_bigstring(t, [0, off], [0, len], buffer);
    }
    return caml_call2(Stdlib_List[18], _b_, iovecs);
   }
   function schedule_chunk(t, iovecs){
    var length = caml_call1(Dream_httpaf_IOVec[2], iovecs);
    write_chunk_length(t[2], length);
    schedule_fixed(t, iovecs);
    return write_crlf(t[2]);
   }
   function on_wakeup(t, k){
    return caml_call1(Faraday[20], t[2])
            ? caml_call1(Stdlib[2], cst_on_wakeup_on_closed_writer)
            : caml_call1
               (Dream_httpaf_Optional_thunk[4], t[4])
              ? caml_call1(Stdlib[2], cst_on_wakeup_only_one_callbac)
              : (t[4] = caml_call1(Dream_httpaf_Optional_thunk[2], k), 0);
   }
   function wakeup(t){
    var f = t[4];
    t[4] = Dream_httpaf_Optional_thunk[1];
    return caml_call1(Dream_httpaf_Optional_thunk[5], f);
   }
   function flush(t, f){return caml_call2(Faraday[16], t[2], f);}
   function unyield(t){return flush(t, function(param){return 0;});}
   function yield$0(t){return caml_call1(Faraday[15], t[2]);}
   function close(t){return caml_call1(Faraday[19], t[2]);}
   function close_and_drain(t){
    caml_call1(Faraday[19], t[2]);
    var drained = caml_call1(Faraday[22], t[2]);
    t[3] = t[3] + drained | 0;
    return wakeup(t);
   }
   function is_closed(t){return caml_call1(Faraday[20], t[2]);}
   function drained_bytes(t){return t[3];}
   function report_result(t, result){
    if(typeof result === "number") return close_and_drain(t);
    var len = result[2];
    return caml_call2(Faraday[21], t[2], len);
   }
   function next(t){
    var match = caml_call1(Faraday[23], t[2]);
    if(typeof match === "number")
     return 73271853 <= match ? 73271853 : [0, -611285096, t[3]];
    var iovecs = match[2];
    return [0, -477700929, iovecs];
   }
   var
    Writer =
      [0,
       create,
       faraday,
       write_request$0,
       write_response$0,
       write_string,
       write_bytes,
       write_bigstring,
       schedule_bigstring,
       schedule_fixed,
       schedule_chunk,
       on_wakeup,
       wakeup,
       flush,
       unyield,
       yield$0,
       close,
       close_and_drain,
       is_closed,
       drained_bytes,
       report_result,
       next],
    Dream_httpaf_Serialize =
      [0,
       write_space,
       write_crlf,
       write_version,
       write_method,
       write_status,
       write_headers,
       write_request,
       write_response,
       write_chunk_length,
       write_string_chunk,
       write_bigstring_chunk,
       schedule_bigstring_chunk,
       Writer];
   runtime.caml_register_global
    (16, Dream_httpaf_Serialize, "Dream_httpaf___Serialize");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Body
//# unitInfo: Requires: Bigstringaf, Dream_httpaf___IOVec, Dream_httpaf___Optional_thunk, Dream_httpaf___Serialize, Faraday, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Faraday = global_data.Faraday,
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Dream_httpaf_IOVec = global_data.Dream_httpaf___IOVec,
    Bigstringaf = global_data.Bigstringaf,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Dream_httpaf_Optional_thunk = global_data.Dream_httpaf___Optional_thunk,
    _b_ = [0, 332360020, 0],
    _a_ = [0, "src/vendor/httpaf/lib/body.ml", 81, 26],
    cst_Body_schedule_read_reader_ =
      "Body.schedule_read: reader already scheduled";
   function default_on_eof(param){return 0;}
   function default_on_read(param, _p_, _o_){return 0;}
   function create(buffer, when_ready_to_read){
    return [0,
            caml_call1(Faraday[2], buffer),
            0,
            default_on_eof,
            0,
            default_on_read,
            when_ready_to_read];
   }
   function create_empty(param){
    var t = create(Bigstringaf[2], Dream_httpaf_Optional_thunk[1]);
    caml_call1(Faraday[19], t[1]);
    return t;
   }
   function is_closed(t){return caml_call1(Faraday[20], t[1]);}
   function unsafe_faraday(t){return t[1];}
   function ready_to_read(t){
    return caml_call1(Dream_httpaf_Optional_thunk[5], t[6]);
   }
   function do_execute_read$0(counter, t, on_eof, on_read){
    var match = caml_call1(Faraday[23], t[1]);
    if(typeof match === "number"){
     if(73271853 <= match) return 0;
     t[2] = 0;
     t[3] = default_on_eof;
     t[5] = default_on_read;
     var _n_ = 1 - t[4];
     return _n_ ? (t[4] = 1, caml_call1(on_eof, 0)) : _n_;
    }
    var match$0 = match[2];
    if(! match$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var iovec = match$0[1];
    t[2] = 0;
    t[3] = default_on_eof;
    t[5] = default_on_read;
    var len = iovec[3], off = iovec[2], buffer = iovec[1];
    caml_call2(Faraday[21], t[1], len);
    caml_call3(on_read, buffer, off, len);
    if(counter >= 50) return caml_trampoline_return(execute_read$0, [0, t]);
    var counter$0 = counter + 1 | 0;
    return execute_read$0(counter$0, t);
   }
   function execute_read$0(counter, t){
    var _k_ = t[2];
    if(! _k_) return _k_;
    var _l_ = t[5], _m_ = t[3];
    if(counter >= 50)
     return caml_trampoline_return(do_execute_read$0, [0, t, _m_, _l_]);
    var counter$0 = counter + 1 | 0;
    return do_execute_read$0(counter$0, t, _m_, _l_);
   }
   function do_execute_read(t, on_eof, on_read){
    return caml_trampoline(do_execute_read$0(0, t, on_eof, on_read));
   }
   function execute_read(t){return caml_trampoline(execute_read$0(0, t));}
   function schedule_read(t, on_eof, on_read){
    if(t[2]) caml_call1(Stdlib[2], cst_Body_schedule_read_reader_);
    if(1 - is_closed(t)){t[2] = 1; t[3] = on_eof; t[5] = on_read;}
    do_execute_read(t, on_eof, on_read);
    return ready_to_read(t);
   }
   function close(t){
    caml_call1(Faraday[19], t[1]);
    execute_read(t);
    return ready_to_read(t);
   }
   function has_pending_output(t){return caml_call1(Faraday[13], t[1]);}
   function is_read_scheduled(t){return t[2];}
   var
    Reader =
      [0,
       default_on_eof,
       default_on_read,
       create,
       create_empty,
       is_closed,
       unsafe_faraday,
       ready_to_read,
       do_execute_read,
       execute_read,
       schedule_read,
       close,
       has_pending_output,
       is_read_scheduled];
   function of_faraday(faraday, encoding, writer){
    a:
    {
     if(typeof encoding === "number" && 536442962 > encoding){var encoding$0 = [0, 0]; break a;}
     var encoding$0 = 0;
    }
    return [0, faraday, encoding$0, writer, [0, 0]];
   }
   function create$0(buffer, encoding){
    var _i_ = caml_call1(Faraday[2], buffer);
    return function(_j_){return of_faraday(_i_, encoding, _j_);};
   }
   function create_empty$0(writer){
    var t = create$0(Bigstringaf[2], _b_)(writer);
    caml_call1(Faraday[19], t[1]);
    return t;
   }
   function write_char(t, c){return caml_call2(Faraday[7], t[1], c);}
   function write_string(t, off, len, s){
    return caml_call4(Faraday[3], t[1], off, len, s);
   }
   function write_bigstring(t, off, len, b){
    return caml_call4(Faraday[5], t[1], off, len, b);
   }
   function schedule_bigstring(t, off, len, b){
    return caml_call4(Faraday[11], t[1], off, len, b);
   }
   function ready_to_write(t){
    return caml_call1(Dream_httpaf_Serialize[13][12], t[3]);
   }
   function flush(t, kontinue){
    function _h_(param){
     return caml_call2(Dream_httpaf_Serialize[13][13], t[3], kontinue);
    }
    caml_call2(Faraday[16], t[1], _h_);
    return ready_to_write(t);
   }
   function is_closed$0(t){return caml_call1(Faraday[20], t[1]);}
   function close$0(t){
    caml_call1(Dream_httpaf_Serialize[13][14], t[3]);
    caml_call1(Faraday[19], t[1]);
    return ready_to_write(t);
   }
   function force_close(t){
    var match = t[2];
    if(match) match[1] = 1;
    return close$0(t);
   }
   function has_pending_output$0(t){
    var faraday_has_output = caml_call1(Faraday[13], t[1]), match = t[2];
    if(match)
     var
      written_final_chunk = match[1],
      _f_ = caml_call1(Faraday[20], t[1]),
      _g_ = _f_ ? 1 - written_final_chunk : _f_,
      additional_encoding_output = _g_;
    else
     var additional_encoding_output = 0;
    var
     faraday_has_output$0 = faraday_has_output || additional_encoding_output;
    return faraday_has_output$0;
   }
   function requires_output(t){
    var _e_ = 1 - is_closed$0(t);
    return _e_ ? _e_ : has_pending_output$0(t);
   }
   function transfer_to_writer(t){
    var faraday = t[1], match = caml_call1(Faraday[23], faraday);
    if(typeof match === "number"){
     if(73271853 <= match) return 0;
     var chunked = t[2];
     if(! chunked) return 0;
     var written_final_chunk = chunked[1], _c_ = 1 - written_final_chunk;
     return _c_
             ? (chunked
                [1]
               = 1,
               caml_call2(Dream_httpaf_Serialize[13][10], t[3], 0))
             : _c_;
    }
    var
     iovecs = match[2],
     buffered = t[4],
     iovecs$0 = caml_call2(Dream_httpaf_IOVec[4], iovecs, buffered[1]);
    if(! iovecs$0) return 0;
    var lengthv = caml_call1(Dream_httpaf_IOVec[2], iovecs$0);
    buffered[1] = buffered[1] + lengthv | 0;
    if(t[2])
     caml_call2(Dream_httpaf_Serialize[13][10], t[3], iovecs$0);
    else
     caml_call2(Dream_httpaf_Serialize[13][9], t[3], iovecs$0);
    function _d_(param){
     caml_call2(Faraday[21], faraday, lengthv);
     buffered[1] = buffered[1] - lengthv | 0;
     return 0;
    }
    return caml_call2(Dream_httpaf_Serialize[13][13], t[3], _d_);
   }
   var
    Writer =
      [0,
       of_faraday,
       create$0,
       create_empty$0,
       write_char,
       write_string,
       write_bigstring,
       schedule_bigstring,
       ready_to_write,
       flush,
       is_closed$0,
       close$0,
       force_close,
       has_pending_output$0,
       requires_output,
       transfer_to_writer],
    Dream_httpaf_Body = [0, Reader, Writer];
   runtime.caml_register_global(10, Dream_httpaf_Body, "Dream_httpaf___Body");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Config
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    default$0 = [0, 4096, 4096, 1024, 4096],
    Dream_httpaf_Config = [0, default$0];
   runtime.caml_register_global
    (1, Dream_httpaf_Config, "Dream_httpaf___Config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Input_state
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf_Input_state = [0];
   runtime.caml_register_global
    (0, Dream_httpaf_Input_state, "Dream_httpaf___Input_state");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Output_state
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf_Output_state = [0];
   runtime.caml_register_global
    (0, Dream_httpaf_Output_state, "Dream_httpaf___Output_state");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Respd
//# unitInfo: Requires: CamlinternalLazy, Dream_httpaf___Body, Dream_httpaf___Request, Dream_httpaf___Response, Dream_httpaf___Serialize
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Assert_failure = global_data.Assert_failure,
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Dream_httpaf_Request = global_data.Dream_httpaf___Request,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Dream_httpaf_Response = global_data.Dream_httpaf___Response,
    Request_state = [0],
    _a_ = [0, "src/vendor/httpaf/lib/respd.ml", 71, 4];
   function create
   (error_handler, request, request_body, writer, response_handler){
    var handler = function _l_(_j_, _k_){return _l_.fun(_j_, _k_);}, t = [];
    caml_update_dummy
     (handler,
      function(response, body){
       var _h_ = caml_obj_tag(t);
       a:
       if(250 === _h_)
        var t$0 = t[1];
       else{
        if(246 !== _h_ && 244 !== _h_){var t$0 = t; break a;}
        var t$0 = caml_call1(CamlinternalLazy[2], t);
       }
       if(t$0[8]) t$0[8] = caml_call2(Dream_httpaf_Response[2], 0, response);
       var _i_ = response[2];
       a:
       {
        if(typeof _i_ === "number" && -1021676630 === _i_){var next_state = [1, response]; break a;}
        var next_state = [0, response, body];
       }
       t$0[7] = next_state;
       return caml_call2(response_handler, response, body);
      });
    caml_update_dummy
     (t,
      [246,
       function(param){
        return [0,
                request,
                request_body,
                handler,
                error_handler,
                17724,
                writer,
                0,
                caml_call2(Dream_httpaf_Request[5], 0, request)];
       }]);
    var _g_ = caml_obj_tag(t);
    if(250 === _g_) return t[1];
    if(246 !== _g_ && 244 !== _g_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function request(param){var request = param[1]; return request;}
   function write_request(t){
    caml_call2(Dream_httpaf_Serialize[13][3], t[6], t[1]);
    t[7] = 1;
    return 0;
   }
   function report_error(t, error){
    t[8] = 0;
    caml_call1(Dream_httpaf_Body[2][12], t[2]);
    var _e_ = t[7], _f_ = t[5];
    a:
    {
     if(typeof _e_ === "number")
      switch(_e_){
        case 0:
         if(typeof _f_ !== "number" && 3458171 === _f_[1])
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
         break;
        case 1: break;
        default: break a;
      }
     else if(0 === _e_[0]){
      if(typeof _f_ !== "number") break a;
      if(17724 !== _f_) break a;
      var response_body = _e_[2];
      caml_call1(Dream_httpaf_Body[1][11], response_body);
      t[5] = error;
      return caml_call1(t[4], error);
     }
     if(typeof _f_ === "number" && 17724 === _f_){
      t[7] = 2;
      t[5] = error;
      return caml_call1(t[4], error);
     }
    }
    return 0;
   }
   function persistent_connection(t){return t[8];}
   function close_request_body(t){
    return caml_call1(Dream_httpaf_Body[2][11], t[2]);
   }
   function close_response_body(t){
    var match = t[7];
    if(typeof match === "number") return 0;
    if(0 === match[0]){
     var response_body = match[2];
     return caml_call1(Dream_httpaf_Body[1][11], response_body);
    }
    t[7] = 2;
    return 0;
   }
   function input_state(t){
    var match = t[7];
    if(typeof match === "number"){if(2 !== match) return 0;}
    else if(0 === match[0]){
     var response_body = match[2];
     return caml_call1(Dream_httpaf_Body[1][5], response_body)
             ? 2
             : caml_call1(Dream_httpaf_Body[1][13], response_body) ? 0 : 1;
    }
    return 2;
   }
   function output_state(param){
    var request_body = param[2], state = param[7];
    if(typeof state !== "number" && 1 === state[0]) return 0;
    if(0 !== state && ! caml_call1(Dream_httpaf_Body[2][14], request_body))
     return 2;
    return 1;
   }
   function flush_request_body(param){
    var
     request_body = param[2],
     _d_ = caml_call1(Dream_httpaf_Body[2][13], request_body);
    return _d_ ? caml_call1(Dream_httpaf_Body[2][15], request_body) : _d_;
   }
   function flush_response_body(t){
    var match = t[7];
    if(typeof match !== "number" && 0 === match[0]){
     var
      response_body = match[2],
      _b_ = caml_call1(Dream_httpaf_Body[1][12], response_body);
     if(! _b_) return _b_;
     try{
      var _c_ = caml_call1(Dream_httpaf_Body[1][9], response_body);
      return _c_;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return report_error(t, [0, 3458171, exn]);
     }
    }
    return 0;
   }
   var
    Dream_httpaf_Respd =
      [0,
       Request_state,
       create,
       request,
       write_request,
       report_error,
       persistent_connection,
       close_request_body,
       close_response_body,
       input_state,
       output_state,
       flush_request_body,
       flush_response_body];
   runtime.caml_register_global(7, Dream_httpaf_Respd, "Dream_httpaf___Respd");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Parse
//# unitInfo: Requires: Angstrom, Bigstringaf, CamlinternalLazy, Dream_httpaf___Body, Dream_httpaf___Headers, Dream_httpaf___Method, Dream_httpaf___Optional_thunk, Dream_httpaf___Request, Dream_httpaf___Respd, Dream_httpaf___Response, Dream_httpaf___Status, Faraday, Stdlib, Stdlib__Int64, Stdlib__Printf, Stdlib__Queue, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_vendor_httpaf_lib_pars = "src/vendor/httpaf/lib/parse.ml",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\r\n",
    Angstrom = global_data.Angstrom,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Dream_httpaf_Respd = global_data.Dream_httpaf___Respd,
    Dream_httpaf_Response = global_data.Dream_httpaf___Response,
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Dream_httpaf_Optional_thunk = global_data.Dream_httpaf___Optional_thunk,
    Bigstringaf = global_data.Bigstringaf,
    Dream_httpaf_Request = global_data.Dream_httpaf___Request,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Faraday = global_data.Faraday,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Dream_httpaf_Status = global_data.Dream_httpaf___Status,
    Stdlib_String = global_data.Stdlib__String,
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Dream_httpaf_Method = global_data.Dream_httpaf___Method,
    peek_char = Angstrom[1],
    peek_char_fail = Angstrom[2],
    peek_string = Angstrom[3],
    char$0 = Angstrom[4],
    not_char = Angstrom[5],
    any_char = Angstrom[6],
    satisfy = Angstrom[7],
    string = Angstrom[8],
    string_ci = Angstrom[9],
    skip = Angstrom[10],
    skip_while = Angstrom[11],
    take = Angstrom[12],
    take_while = Angstrom[13],
    take_while1 = Angstrom[14],
    take_till = Angstrom[15],
    consumed = Angstrom[16],
    take_bigstring = Angstrom[17],
    take_bigstring_while = Angstrom[18],
    take_bigstring_while1 = Angstrom[19],
    take_bigstring_till = Angstrom[20],
    consumed_bigstring = Angstrom[21],
    advance = Angstrom[22],
    end_of_line = Angstrom[23],
    at_end_of_input = Angstrom[24],
    end_of_input = Angstrom[25],
    scan = Angstrom[26],
    scan_state = Angstrom[27],
    scan_string = Angstrom[28],
    int8 = Angstrom[29],
    any_uint8 = Angstrom[30],
    any_int8 = Angstrom[31],
    BE = Angstrom[32],
    LE = Angstrom[33],
    option = Angstrom[34],
    both = Angstrom[35],
    list = Angstrom[36],
    count = Angstrom[37],
    many = Angstrom[38],
    many1 = Angstrom[39],
    many_till = Angstrom[40],
    sep_by = Angstrom[41],
    sep_by1 = Angstrom[42],
    skip_many = Angstrom[43],
    skip_many1 = Angstrom[44],
    fix = Angstrom[45],
    fix_lazy = Angstrom[46],
    symbol = Angstrom[47],
    choice = Angstrom[48],
    symbol$0 = Angstrom[49],
    commit = Angstrom[50],
    return$0 = Angstrom[51],
    fail = Angstrom[52],
    symbol_bind = Angstrom[53],
    bind = Angstrom[54],
    symbol_map = Angstrom[55],
    symbol$1 = Angstrom[56],
    symbol$2 = Angstrom[57],
    symbol$3 = Angstrom[58],
    symbol$4 = Angstrom[59],
    lift = Angstrom[60],
    lift2 = Angstrom[61],
    lift3 = Angstrom[62],
    lift4 = Angstrom[63],
    map = Angstrom[64],
    map2 = Angstrom[65],
    map3 = Angstrom[66],
    map4 = Angstrom[67],
    Let_syntax = Angstrom[68],
    let$0 = Angstrom[69],
    let$1 = Angstrom[70],
    and = Angstrom[71],
    Unsafe = Angstrom[72],
    Consume = Angstrom[73],
    parse_bigstring = Angstrom[74],
    parse_string = Angstrom[75],
    Buffered = Angstrom[76],
    Unbuffered = Angstrom[77],
    pos = Angstrom[78],
    available = Angstrom[79],
    cst_httpaf_Parse_unable_to_sta = "httpaf.Parse.unable to start parser",
    _D_ = [0, cst_src_vendor_httpaf_lib_pars, 333, 13],
    _z_ = [0, cst_src_vendor_httpaf_lib_pars, 279, 6],
    cst_Local = "Local",
    _C_ = [0, cst_src_vendor_httpaf_lib_pars, 287, 16],
    _A_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _B_ = [0, cst_src_vendor_httpaf_lib_pars, 292, 61],
    _y_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_on_wakeup_on_closed_reader = "on_wakeup on closed reader",
    cst_on_wakeup_only_one_callbac =
      "on_wakeup: only one callback can be registered at a time",
    _v_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _w_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_expected_more_from_body_ch = "expected more from body chunk",
    cst_expected_more_from_fixed_b = "expected more from fixed body",
    cst_status_code_empty = "status-code empty",
    _q_ =
      [0,
       [11, "status-code too long: ", [3, 0, 0]],
       "status-code too long: %S"],
    cst_0x = "0x",
    cst_hex = "hex",
    _b_ = [0, cst_src_vendor_httpaf_lib_pars, 77, 55],
    cst_eol = "eol",
    cst_HTTP = "HTTP/",
    cst_header = "header",
    _x_ = [0, 0];
   function is_space(param){
    if(9 !== param && 32 !== param) return 0;
    return 1;
   }
   function is_cr(param){return 13 === param ? 1 : 0;}
   function is_space_or_colon(param){
    var _aa_ = param - 9 | 0;
    a:
    {
     if(23 < _aa_ >>> 0){
      if(49 === _aa_) break a;
     }
     else if(21 < _aa_ - 1 >>> 0) break a;
     return 0;
    }
    return 1;
   }
   function is_hex(param){
    var _$_ = param - 48 | 0;
    a:
    {
     if(22 < _$_ >>> 0){
      if(5 < _$_ - 49 >>> 0) break a;
     }
     else if(6 >= _$_ - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function is_separator(param){
    a:
    {
     if(91 <= param){
      var ___ = param - 94 | 0;
      if(30 < ___ >>> 0){if(32 <= ___) break a;} else if(29 !== ___) break a;
     }
     else if(32 <= param){
      if(65 <= param) break a;
      switch(param - 32 | 0){
        case 0:
        case 2:
        case 8:
        case 9:
        case 12:
        case 15:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32: break;
        default: break a;
      }
     }
     else if(9 !== param) break a;
     return 1;
    }
    return 0;
   }
   function is_token(param){
    a:
    {
     if(123 <= param){
      if(126 <= param){
       if(127 !== param) break a;
      }
      else if(124 === param) break a;
     }
     else
      if(65 <= param){
       if(2 < param - 91 >>> 0) break a;
      }
      else{
       var _Z_ = param - 32 | 0;
       if(25 >= _Z_ >>> 0)
        switch(_Z_){
          case 2:
          case 8:
          case 9:
          case 12:
          case 15: break;
          default: break a;
        }
      }
     return 0;
    }
    return 1;
   }
   var
    P =
      [0,
       is_space,
       is_cr,
       is_space_or_colon,
       is_hex,
       is_digit,
       is_separator,
       is_token],
    unit = caml_call1(return$0, 0),
    token = caml_call1(take_while1, P[7]),
    spaces = caml_call1(skip_while, P[1]);
   function _a_(param){
    var switcher = param - 48 | 0;
    if(9 < switcher >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    switch(switcher){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      case 4:
       return 4;
      case 5:
       return 5;
      case 6:
       return 6;
      case 7:
       return 7;
      case 8:
       return 8;
      default: return 9;
    }
   }
   var
    digit = caml_call2(symbol_map, caml_call1(satisfy, P[5]), _a_),
    eol = caml_call2(symbol$0, caml_call1(string, cst), cst_eol);
   function hex(str){
    try{
     var
      _X_ =
        caml_call1
         (return$0,
          runtime.caml_int64_of_string(caml_call2(Stdlib[28], cst_0x, str)));
     return _X_;
    }
    catch(_Y_){return caml_call1(fail, cst_hex);}
   }
   var
    skip_line = caml_call2(symbol$3, caml_call1(take_till, P[2]), eol),
    _c_ = caml_call2(symbol$4, digit, caml_call1(char$0, 46)),
    _d_ =
      caml_call3
       (lift2, function(major, minor){return [0, major, minor];}, _c_, digit),
    version = caml_call2(symbol$3, caml_call1(string, cst_HTTP), _d_),
    _e_ = Stdlib_String[24],
    _f_ =
      caml_call2
       (symbol_map,
        caml_call2(symbol$4, caml_call1(take_till, P[2]), eol),
        _e_),
    _g_ = caml_call1(char$0, 58),
    _h_ =
      caml_call2
       (symbol$4,
        caml_call2(symbol$4, caml_call1(take_till, P[3]), _g_),
        spaces),
    header =
      caml_call2
       (symbol$0,
        caml_call2
         (symbol$4,
          caml_call3
           (lift2, function(key, value){return [0, key, value];}, _h_, _f_),
          commit),
        cst_header);
   function cons(x, xs){return [0, x, xs];}
   var
    _i_ = Dream_httpaf_Headers[3],
    headers =
      caml_call2
       (symbol_map,
        caml_call1
         (fix,
          function(headers){
           var
            emp = caml_call1(return$0, 0),
            rec = caml_call3(lift2, cons, header, headers);
           return caml_call2
                   (symbol_bind,
                    peek_char_fail,
                    function(param){return 13 === param ? emp : rec;});
          }),
        _i_),
    _j_ = Dream_httpaf_Method[5],
    meth = caml_call2(symbol_map, caml_call1(take_till, P[1]), _j_),
    _k_ = caml_call2(symbol$4, headers, eol),
    _l_ = caml_call2(symbol$4, caml_call2(symbol$4, version, eol), commit),
    _m_ = caml_call1(char$0, 32),
    _n_ = caml_call2(symbol$4, caml_call1(take_till, P[1]), _m_),
    _o_ = caml_call2(symbol$4, meth, caml_call1(char$0, 32)),
    request =
      caml_call5
       (lift4,
        function(meth, target, version, headers){
         return caml_call4
                 (Dream_httpaf_Request[1],
                  [0, version],
                  [0, headers],
                  meth,
                  target);
        },
        _o_,
        _n_,
        _l_,
        _k_);
   function _p_(str){
    return 0 === caml_ml_string_length(str)
            ? caml_call1(fail, cst_status_code_empty)
            : 3
              < caml_ml_string_length(str)
              ? caml_call1(fail, caml_call2(Stdlib_Printf[4], _q_, str))
              : caml_call1(return$0, caml_call1(Dream_httpaf_Status[13], str));
   }
   var
    status = caml_call2(symbol_bind, caml_call1(take_while, P[5]), _p_),
    _r_ = caml_call2(symbol$4, headers, eol),
    _s_ =
      caml_call2
       (symbol$4,
        caml_call2(symbol$4, caml_call1(take_till, P[2]), eol),
        commit),
    _t_ = caml_call2(symbol$4, status, caml_call1(char$0, 32)),
    _u_ = caml_call2(symbol$4, version, caml_call1(char$0, 32)),
    response =
      caml_call5
       (lift4,
        function(version, status, reason, headers){
         return caml_call4
                 (Dream_httpaf_Response[1],
                  [0, reason],
                  [0, version],
                  [0, headers],
                  status);
        },
        _u_,
        _t_,
        _s_,
        _r_);
   function finish(body){
    caml_call1(Dream_httpaf_Body[1][11], body);
    return commit;
   }
   function schedule_size(body, n){
    var faraday = caml_call1(Dream_httpaf_Body[1][6], body);
    if(caml_call1(Faraday[20], faraday))
     var _V_ = caml_call1(advance, n);
    else
     var
      _W_ = function(s){return caml_call4(Faraday[11], faraday, 0, 0, s);},
      _V_ = caml_call2(symbol_map, caml_call1(take_bigstring, n), _W_);
    return caml_call2(symbol$3, _V_, commit);
   }
   function body(encoding, body){
    function fixed(n, unexpected){
     return caml_equal(n, _v_)
             ? unit
             : caml_call2
               (symbol_bind,
                at_end_of_input,
                function(param){
                 return param
                         ? caml_call2(symbol$3, commit, caml_call1(fail, unexpected))
                         : caml_call2
                           (symbol_bind,
                            available,
                            function(m){
                             var
                              m$0 =
                                caml_call2
                                 (Stdlib_Int64[18], runtime.caml_int64_of_int32(m), n),
                              n$0 = runtime.caml_int64_sub(n, m$0);
                             function _U_(param){return fixed(n$0, unexpected);}
                             return caml_call2
                                     (symbol_bind,
                                      schedule_size(body, runtime.caml_int64_to_int32(m$0)),
                                      _U_);
                            });
                });
    }
    if(typeof encoding === "number")
     return 536442962 <= encoding
             ? caml_call1
               (fix,
                function(p){
                 var
                  rec =
                    caml_call2
                     (symbol$3,
                      caml_call2
                       (symbol_bind,
                        available,
                        function(n){return schedule_size(body, n);}),
                      p);
                 return caml_call2
                         (symbol_bind,
                          at_end_of_input,
                          function(param){return param ? finish(body) : rec;});
                })
             : caml_call1
               (fix,
                function(p){
                 var _S_ = caml_call2(symbol$3, eol, commit);
                 function _T_(size){return hex(size);}
                 var
                  hex$0 =
                    caml_call2
                     (symbol$4,
                      caml_call2(symbol_bind, caml_call1(take_while1, P[4]), _T_),
                      _S_);
                 return caml_call2
                         (symbol_bind,
                          hex$0,
                          function(size){
                           return caml_equal(size, _w_)
                                   ? caml_call2
                                     (symbol_bind, eol, function(eol){return finish(body);})
                                   : caml_call2
                                     (symbol$3,
                                      caml_call2
                                       (symbol$3, fixed(size, cst_expected_more_from_body_ch), eol),
                                      p);
                          });
                });
    var n = encoding[2];
    function _R_(param){return finish(body);}
    return caml_call2
            (symbol_bind, fixed(n, cst_expected_more_from_fixed_b), _R_);
   }
   function create(parser){
    return [0, parser, 0, 0, Dream_httpaf_Optional_thunk[1]];
   }
   var ok = caml_call1(return$0, _x_);
   function is_closed(t){return t[3];}
   function on_wakeup(t, k){
    return t[3]
            ? caml_call1(Stdlib[2], cst_on_wakeup_on_closed_reader)
            : caml_call1
               (Dream_httpaf_Optional_thunk[4], t[4])
              ? caml_call1(Stdlib[2], cst_on_wakeup_only_one_callbac)
              : (t[4] = caml_call1(Dream_httpaf_Optional_thunk[2], k), 0);
   }
   function wakeup(t){
    var f = t[4];
    t[4] = Dream_httpaf_Optional_thunk[1];
    return caml_call1(Dream_httpaf_Optional_thunk[5], f);
   }
   function request$0(wakeup, handler){
    function _P_(request){
     var encoding = caml_call1(Dream_httpaf_Request[4], request);
     if(typeof encoding !== "number"){
      if(332360020 > encoding[1])
       return caml_call1(return$0, [1, [0, -99004555, request]]);
      if(! caml_notequal(encoding[2], _y_)){
       caml_call2(handler, request, caml_call1(Dream_httpaf_Body[1][4], 0));
       return ok;
      }
     }
     var
      _Q_ = caml_call1(Dream_httpaf_Optional_thunk[2], wakeup),
      request_body = caml_call2(Dream_httpaf_Body[1][3], Bigstringaf[2], _Q_);
     caml_call2(handler, request, request_body);
     return caml_call2(symbol$3, body(encoding, request_body), ok);
    }
    return create
            (caml_call2
              (symbol_bind, caml_call2(symbol$4, request, commit), _P_));
   }
   function response$0(request_queue){
    var t = [];
    runtime.caml_update_dummy
     (t,
      [246,
       function(param){
        function _H_(response){
         if(caml_call1(Stdlib_Queue[13], request_queue))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
         var Local = [248, cst_Local, runtime.caml_fresh_oo_id(0)];
         try{
          var
           _L_ =
             function(respd){
              var _O_ = 1 === respd[7] ? 1 : 0;
              if(_O_) throw caml_maybe_attach_backtrace([0, Local, respd], 1);
              return _O_;
             };
          caml_call2(Stdlib_Queue[15], _L_, request_queue);
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn[1] !== Local) throw caml_maybe_attach_backtrace(exn, 0);
          var
           respd = exn[2],
           request = caml_call1(Dream_httpaf_Respd[3], respd),
           encoding =
             caml_call3(Dream_httpaf_Response[6], 0, request[1], response);
          if(typeof encoding !== "number"){
           if(332360020 > encoding[1]){
            if(-732353682 <= encoding[2])
             return caml_call1(return$0, [1, [0, -349406259, response]]);
            throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
           }
           if(! caml_notequal(encoding[2], _A_)){
            var _K_ = caml_call1(Dream_httpaf_Body[1][4], 0);
            caml_call2(respd[3], response, _K_);
            return ok;
           }
          }
          var
           _I_ =
             function(param){
              var _M_ = caml_obj_tag(t);
              a:
              if(250 === _M_)
               var _N_ = t[1];
              else{
               if(246 !== _M_ && 244 !== _M_){var _N_ = t; break a;}
               var _N_ = caml_call1(CamlinternalLazy[2], t);
              }
              return wakeup(_N_);
             },
           _J_ = caml_call1(Dream_httpaf_Optional_thunk[2], _I_),
           response_body =
             caml_call2(Dream_httpaf_Body[1][3], Bigstringaf[2], _J_);
          caml_call2(respd[3], response, response_body);
          return caml_call2(symbol$3, body(encoding, response_body), ok);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
        }
        return create
                (caml_call2
                  (symbol_bind, caml_call2(symbol$4, response, commit), _H_));
       }]);
    var _G_ = caml_obj_tag(t);
    if(250 === _G_) return t[1];
    if(246 !== _G_ && 244 !== _G_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function transition(t, state){
    switch(state[0]){
      case 0:
       var match = state[1], continue$0 = match[2], committed = match[1];
       t[2] = [1, continue$0];
       return committed;
      case 1:
       var match$0 = state[2], consumed = state[1];
       if(0 === match$0[0]){t[2] = 0; return consumed;}
       var error = match$0[1];
       t[2] = [0, error];
       return consumed;
      default:
       var msg = state[3], marks = state[2], consumed$0 = state[1];
       t[2] = [0, [0, -796721133, [0, marks, msg]]];
       return consumed$0;
    }
   }
   function start(t, state){
    switch(state[0]){
      case 0:
       var _F_ = state[1];
       if(0 === _F_[1]){
        var continue$0 = _F_[2];
        t[2] = [1, continue$0];
        return 0;
       }
       break;
      case 1:
       return caml_call1(Stdlib[2], cst_httpaf_Parse_unable_to_sta);
      default:
       if(0 === state[1]){
        var msg = state[3], marks = state[2];
        t[2] = [0, [0, -796721133, [0, marks, msg]]];
        return 0;
       }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
   }
   function read_with_more(t, bs, off, len, more){
    var initial = typeof t[2] === "number" ? 1 : 0, match = t[2];
    if(typeof match === "number")
     var
      consumed =
        0 === len
         ? 0
         : (start
            (t, caml_call1(Angstrom[77][1], t[1])),
           read_with_more(t, bs, off, len, more));
    else if(0 === match[0])
     var consumed = 0;
    else
     var
      continue$0 = match[1],
      consumed = transition(t, caml_call4(continue$0, bs, off, len, more));
    var _E_ = initial ? 0 === len ? 1 : 0 : initial;
    if(_E_) t[2] = 0;
    if(typeof t[2] === "number" && consumed < len){
     var off$0 = off + consumed | 0, len$0 = len - consumed | 0;
     return consumed + read_with_more(t, bs, off$0, len$0, more) | 0;
    }
    return consumed;
   }
   function read_with_more$0(t, bs, off, len, more){
    var consumed = read_with_more(t, bs, off, len, more);
    if(! more) t[3] = 1;
    return consumed;
   }
   function force_close(t){t[3] = 1; return 0;}
   function next(t){
    var match = t[2];
    if(typeof match !== "number" && 0 === match[0]){
     var failure = match[1];
     return [0, 106380200, failure];
    }
    return t[3]
            ? -611285096
            : typeof match === "number" ? 389604418 : 914388854;
   }
   var
    Reader =
      [0,
       create,
       ok,
       is_closed,
       on_wakeup,
       wakeup,
       request$0,
       response$0,
       transition,
       start,
       read_with_more,
       read_with_more$0,
       force_close,
       next],
    Dream_httpaf_Parse =
      [0,
       peek_char,
       peek_char_fail,
       peek_string,
       char$0,
       not_char,
       any_char,
       satisfy,
       string,
       string_ci,
       skip,
       skip_while,
       take,
       take_while,
       take_while1,
       take_till,
       consumed,
       take_bigstring,
       take_bigstring_while,
       take_bigstring_while1,
       take_bigstring_till,
       consumed_bigstring,
       advance,
       end_of_line,
       at_end_of_input,
       end_of_input,
       scan,
       scan_state,
       scan_string,
       int8,
       any_uint8,
       any_int8,
       BE,
       LE,
       option,
       both,
       list,
       count,
       many,
       many1,
       many_till,
       sep_by,
       sep_by1,
       skip_many,
       skip_many1,
       fix,
       fix_lazy,
       symbol,
       choice,
       symbol$0,
       commit,
       return$0,
       fail,
       symbol_bind,
       bind,
       symbol_map,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       lift,
       lift2,
       lift3,
       lift4,
       map,
       map2,
       map3,
       map4,
       Let_syntax,
       let$0,
       let$1,
       and,
       Unsafe,
       Consume,
       parse_bigstring,
       parse_string,
       Buffered,
       Unbuffered,
       pos,
       available,
       P,
       unit,
       token,
       spaces,
       digit,
       eol,
       hex,
       skip_line,
       version,
       header,
       headers,
       request,
       response,
       finish,
       schedule_size,
       body,
       Reader];
   runtime.caml_register_global
    (43, Dream_httpaf_Parse, "Dream_httpaf___Parse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Response_state
//# unitInfo: Requires: Dream_httpaf___Body
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Body = global_data.Dream_httpaf___Body;
   function output_state(t){
    if(typeof t === "number") return 0;
    switch(t[0]){
      case 0:
       return 2;
      case 1:
       var response_body = t[2];
       return caml_call1(Dream_httpaf_Body[2][14], response_body) ? 1 : 2;
      default: return 1;
    }
   }
   function flush_response_body(t){
    if(typeof t !== "number" && 1 === t[0]){
     var response_body = t[2];
     return caml_call1(Dream_httpaf_Body[2][15], response_body);
    }
    return 0;
   }
   var Dream_httpaf_Response_state = [0, output_state, flush_response_body];
   runtime.caml_register_global
    (1, Dream_httpaf_Response_state, "Dream_httpaf___Response_state");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Reqd
//# unitInfo: Requires: Dream_httpaf___Body, Dream_httpaf___Parse, Dream_httpaf___Request, Dream_httpaf___Response, Dream_httpaf___Response_state, Dream_httpaf___Serialize, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_httpaf_Reqd_respond_with_s$7 =
      "httpaf.Reqd.respond_with_streaming: invalid state, currently handling error",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Response_state = global_data.Dream_httpaf___Response_state,
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Dream_httpaf_Response = global_data.Dream_httpaf___Response,
    Stdlib = global_data.Stdlib,
    Dream_httpaf_Parse = global_data.Dream_httpaf___Parse,
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Dream_httpaf_Request = global_data.Dream_httpaf___Request,
    _a_ = [0, 0],
    cst_httpaf_Reqd_report_exn_NYI = "httpaf.Reqd.report_exn: NYI",
    cst_httpaf_Reqd_respond_with_s$6 = cst_httpaf_Reqd_respond_with_s$7,
    cst_httpaf_Reqd_unsafe_respond =
      "httpaf.Reqd.unsafe_respond_with_upgrade: response already complete",
    cst_httpaf_Reqd_unsafe_respond$0 =
      "httpaf.Reqd.unsafe_respond_with_upgrade: response already started",
    cst_httpaf_Reqd_respond_with_s$5 = cst_httpaf_Reqd_respond_with_s$7,
    cst_httpaf_Reqd_respond_with_s$2 =
      "httpaf.Reqd.respond_with_streaming: invalid response body length",
    cst_httpaf_Reqd_respond_with_s$3 =
      "httpaf.Reqd.respond_with_streaming: response already complete",
    cst_httpaf_Reqd_respond_with_s$4 =
      "httpaf.Reqd.respond_with_streaming: response already started",
    cst_httpaf_Reqd_respond_with_b =
      "httpaf.Reqd.respond_with_bigstring: invalid state, currently handling error",
    cst_httpaf_Reqd_respond_with_b$0 =
      "httpaf.Reqd.respond_with_bigstring: response already complete",
    cst_httpaf_Reqd_respond_with_b$1 =
      "httpaf.Reqd.respond_with_bigstring: response already started",
    cst_httpaf_Reqd_respond_with_s =
      "httpaf.Reqd.respond_with_string: invalid state, currently handling error",
    cst_httpaf_Reqd_respond_with_s$0 =
      "httpaf.Reqd.respond_with_string: response already complete",
    cst_httpaf_Reqd_respond_with_s$1 =
      "httpaf.Reqd.respond_with_string: response already started",
    cst_httpaf_Reqd_response_exn_r =
      "httpaf.Reqd.response_exn: response has not started";
   function create
   (error_handler,
    request,
    request_body,
    reader,
    writer,
    response_body_buffer){
    return [0,
            request,
            request_body,
            reader,
            writer,
            response_body_buffer,
            error_handler,
            caml_call2(Dream_httpaf_Request[5], 0, request),
            0,
            17724];
   }
   function request(param){var request = param[1]; return request;}
   function request_body(param){
    var request_body = param[2];
    return request_body;
   }
   function response(param){
    var response_state = param[8];
    if(typeof response_state === "number") return 0;
    var response = response_state[1];
    return [0, response];
   }
   function response_exn(param){
    var response_state = param[8];
    if(typeof response_state === "number")
     return caml_call1(Stdlib[2], cst_httpaf_Reqd_response_exn_r);
    var response = response_state[1];
    return response;
   }
   function respond_with_string(t, response, str){
    if(17724 !== t[9]) caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s);
    var _j_ = t[8];
    if(typeof _j_ !== "number")
     return 0 === _j_[0]
             ? caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$0)
             : caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$1);
    caml_call2(Dream_httpaf_Serialize[13][4], t[4], response);
    caml_call4(Dream_httpaf_Serialize[13][5], t[4], 0, 0, str);
    if(t[7]) t[7] = caml_call2(Dream_httpaf_Response[2], 0, response);
    t[8] = [0, response];
    return caml_call1(Dream_httpaf_Serialize[13][12], t[4]);
   }
   function respond_with_bigstring(t, response, bstr){
    if(17724 !== t[9]) caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_b);
    var _i_ = t[8];
    if(typeof _i_ !== "number")
     return 0 === _i_[0]
             ? caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_b$0)
             : caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_b$1);
    caml_call2(Dream_httpaf_Serialize[13][4], t[4], response);
    caml_call4(Dream_httpaf_Serialize[13][8], t[4], 0, 0, bstr);
    if(t[7]) t[7] = caml_call2(Dream_httpaf_Response[2], 0, response);
    t[8] = [0, response];
    return caml_call1(Dream_httpaf_Serialize[13][12], t[4]);
   }
   function unsafe_respond_with_streaming
   (flush_headers_immediately, t, response){
    var _h_ = t[8];
    if(typeof _h_ !== "number")
     return 0 === _h_[0]
             ? caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$3)
             : caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$4);
    var encoding = caml_call3(Dream_httpaf_Response[6], 0, t[1][1], response);
    a:
    {
     if(typeof encoding !== "number" && 332360020 > encoding[1]){
      var
       encoding$0 = caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$2);
      break a;
     }
     var encoding$0 = encoding;
    }
    var
     response_body =
       caml_call3(Dream_httpaf_Body[2][2], t[5], encoding$0, t[4]);
    caml_call2(Dream_httpaf_Serialize[13][4], t[4], response);
    if(t[7]) t[7] = caml_call2(Dream_httpaf_Response[2], 0, response);
    t[8] = [1, response, response_body];
    if(flush_headers_immediately)
     caml_call1(Dream_httpaf_Serialize[13][12], t[4]);
    return response_body;
   }
   function respond_with_streaming(opt, t, response){
    if(opt)
     var sth = opt[1], flush_headers_immediately = sth;
    else
     var flush_headers_immediately = 0;
    if(17724 !== t[9])
     caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$5);
    return unsafe_respond_with_streaming
            (flush_headers_immediately, t, response);
   }
   function unsafe_respond_with_upgrade(t, headers, upgrade_handler){
    var _g_ = t[8];
    if(typeof _g_ !== "number")
     return 0 === _g_[0]
             ? caml_call1(Stdlib[2], cst_httpaf_Reqd_unsafe_respond)
             : caml_call1(Stdlib[2], cst_httpaf_Reqd_unsafe_respond$0);
    var
     response =
       caml_call4(Dream_httpaf_Response[1], 0, 0, [0, headers], -1021676630);
    caml_call2(Dream_httpaf_Serialize[13][4], t[4], response);
    if(t[7]) t[7] = caml_call2(Dream_httpaf_Response[2], 0, response);
    t[8] = [2, response, upgrade_handler];
    caml_call2(Dream_httpaf_Serialize[13][13], t[4], upgrade_handler);
    caml_call1(Dream_httpaf_Body[1][11], t[2]);
    return caml_call1(Dream_httpaf_Serialize[13][12], t[4]);
   }
   function respond_with_upgrade(t, response, upgrade_handler){
    if(17724 !== t[9])
     caml_call1(Stdlib[2], cst_httpaf_Reqd_respond_with_s$6);
    return unsafe_respond_with_upgrade(t, response, upgrade_handler);
   }
   function report_error(t, error){
    t[7] = 0;
    var _e_ = t[8], match = t[9];
    if
     (typeof _e_ === "number" && typeof match === "number" && 17724 === match){
     t[9] = error;
     var
      status = typeof error === "number" ? error : -732353682,
      _f_ =
        function(headers){
         var
          response_body =
            unsafe_respond_with_streaming
             (1,
              t,
              caml_call4(Dream_httpaf_Response[1], 0, 0, [0, headers], status));
         caml_call1(Dream_httpaf_Body[1][11], t[2]);
         return response_body;
        };
     return caml_call3(t[6], [0, t[1]], error, _f_);
    }
    caml_call1(Dream_httpaf_Body[1][11], t[2]);
    if(typeof _e_ === "number"){
     if(typeof match !== "number" && 3458171 === match[1])
      return caml_call1(Stdlib[2], cst_httpaf_Reqd_report_exn_NYI);
    }
    else if(1 === _e_[0]){
     var response_body = _e_[2];
     if(typeof match === "number"){
      if(17724 === match){
       caml_call1(Dream_httpaf_Body[2][12], response_body);
       return caml_call1(Dream_httpaf_Parse[96][5], t[3]);
      }
     }
     else if(3458171 === match[1]){
      caml_call1(Dream_httpaf_Body[2][11], response_body);
      caml_call1(Dream_httpaf_Serialize[13][17], t[4]);
      return caml_call1(Dream_httpaf_Parse[96][5], t[3]);
     }
    }
    return 0;
   }
   function report_exn(t, exn){return report_error(t, [0, 3458171, exn]);}
   function try_with(t, f){
    try{caml_call1(f, 0); return _a_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     report_exn(t, exn);
     return [1, exn];
    }
   }
   function close_request_body(param){
    var request_body = param[2];
    return caml_call1(Dream_httpaf_Body[1][11], request_body);
   }
   function error_code(t){
    var error = t[9];
    if(typeof error === "number" && 17724 <= error) return 0;
    return [0, error];
   }
   function persistent_connection(t){return t[7];}
   function input_state(t){
    var _d_ = t[8];
    if(typeof _d_ !== "number" && 2 === _d_[0]) return 0;
    return caml_call1(Dream_httpaf_Body[1][5], t[2])
            ? 2
            : caml_call1(Dream_httpaf_Body[1][13], t[2]) ? 0 : 1;
   }
   function output_state(t){
    return caml_call1(Dream_httpaf_Response_state[1], t[8]);
   }
   function flush_request_body(t){
    var _b_ = caml_call1(Dream_httpaf_Body[1][12], t[2]);
    if(! _b_) return _b_;
    try{var _c_ = caml_call1(Dream_httpaf_Body[1][9], t[2]); return _c_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return report_exn(t, exn);
    }
   }
   function flush_response_body(t){
    return caml_call1(Dream_httpaf_Response_state[2], t[8]);
   }
   var
    Dream_httpaf_Reqd =
      [0,
       create,
       request,
       request_body,
       response,
       response_exn,
       respond_with_string,
       respond_with_bigstring,
       unsafe_respond_with_streaming,
       respond_with_streaming,
       unsafe_respond_with_upgrade,
       respond_with_upgrade,
       report_error,
       report_exn,
       try_with,
       close_request_body,
       error_code,
       persistent_connection,
       input_state,
       output_state,
       flush_request_body,
       flush_response_body];
   runtime.caml_register_global(23, Dream_httpaf_Reqd, "Dream_httpaf___Reqd");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Server_connection
//# unitInfo: Requires: Bigstringaf, CamlinternalLazy, Dream_httpaf___Body, Dream_httpaf___Config, Dream_httpaf___Headers, Dream_httpaf___Parse, Dream_httpaf___Reqd, Dream_httpaf___Response, Dream_httpaf___Response_state, Dream_httpaf___Serialize, Dream_httpaf___Status, Stdlib, Stdlib__Printexc, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Parse = global_data.Dream_httpaf___Parse,
    Dream_httpaf_Reqd = global_data.Dream_httpaf___Reqd,
    Dream_httpaf_Response_state = global_data.Dream_httpaf___Response_state,
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Dream_httpaf_Response = global_data.Dream_httpaf___Response,
    Stdlib = global_data.Stdlib,
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Dream_httpaf_Config = global_data.Dream_httpaf___Config,
    Bigstringaf = global_data.Bigstringaf,
    Dream_httpaf_Status = global_data.Dream_httpaf___Status,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    cst_httpaf_Server_connection_e =
      "httpaf.Server_connection.error_handler: invalid response body length",
    _a_ = [0, "src/vendor/httpaf/lib/server_connection.ml", 169, 4];
   function is_closed(t){
    var _v_ = caml_call1(Dream_httpaf_Parse[96][3], t[1]);
    return _v_ ? caml_call1(Dream_httpaf_Serialize[13][18], t[2]) : _v_;
   }
   function is_active(t){return 1 - caml_call1(Stdlib_Queue[13], t[6]);}
   function current_reqd_exn(t){return caml_call1(Stdlib_Queue[8], t[6]);}
   function yield_reader(t, k){
    return caml_call2(Dream_httpaf_Parse[96][4], t[1], k);
   }
   function wakeup_reader(t){
    if(is_active(t)){
     var reqd = current_reqd_exn(t);
     caml_call1(Dream_httpaf_Reqd[20], reqd);
    }
    return caml_call1(Dream_httpaf_Parse[96][5], t[1]);
   }
   function yield_writer(t, k){
    return caml_call2(Dream_httpaf_Serialize[13][11], t[2], k);
   }
   function wakeup_writer(t){
    return caml_call1(Dream_httpaf_Serialize[13][12], t[2]);
   }
   function default_error_handler(param, error, handle){
    if(typeof error === "number")
     var message = caml_call1(Dream_httpaf_Status[12], error);
    else
     var exn = error[2], message = caml_call1(Stdlib_Printexc[1], exn);
    var body = caml_call1(handle, Dream_httpaf_Headers[2]);
    caml_call4(Dream_httpaf_Body[2][5], body, 0, 0, message);
    return caml_call1(Dream_httpaf_Body[2][11], body);
   }
   function create(opt, _g_, request_handler){
    if(opt)
     var sth = opt[1], config = sth;
    else
     var config = Dream_httpaf_Config[1];
    if(_g_)
     var sth$0 = _g_[1], error_handler = sth$0;
    else
     var error_handler = default_error_handler;
    var
     response_body_buffer_size = config[4],
     response_buffer_size = config[3],
     writer =
       caml_call2(Dream_httpaf_Serialize[13][1], [0, response_buffer_size], 0),
     request_queue = caml_call1(Stdlib_Queue[2], 0),
     response_body_buffer =
       caml_call1(Bigstringaf[1], response_body_buffer_size),
     reader = [],
     handler = function _u_(_s_, _t_){return _u_.fun(_s_, _t_);},
     t = [];
    caml_update_dummy
     (reader,
      [246,
       function(_o_){
        function _p_(param){
         var _q_ = caml_obj_tag(t);
         a:
         if(250 === _q_)
          var _r_ = t[1];
         else{
          if(246 !== _q_ && 244 !== _q_){var _r_ = t; break a;}
          var _r_ = caml_call1(CamlinternalLazy[2], t);
         }
         return wakeup_reader(_r_);
        }
        return caml_call2(Dream_httpaf_Parse[96][6], _p_, handler);
       }]);
    caml_update_dummy
     (handler,
      function(request, request_body){
       var _m_ = caml_obj_tag(reader);
       a:
       if(250 === _m_)
        var _n_ = reader[1];
       else{
        if(246 !== _m_ && 244 !== _m_){var _n_ = reader; break a;}
        var _n_ = caml_call1(CamlinternalLazy[2], reader);
       }
       var
        reqd =
          caml_call6
           (Dream_httpaf_Reqd[1],
            error_handler,
            request,
            request_body,
            _n_,
            writer,
            response_body_buffer),
        call_handler = caml_call1(Stdlib_Queue[13], request_queue);
       caml_call2(Stdlib_Queue[4], reqd, request_queue);
       return call_handler ? caml_call1(request_handler, reqd) : call_handler;
      });
    caml_update_dummy
     (t,
      [246,
       function(_i_){
        var _k_ = caml_obj_tag(reader);
        a:
        {
         var _j_ = 0;
         if(250 === _k_)
          var _l_ = reader[1];
         else{
          if(246 !== _k_ && 244 !== _k_){var _l_ = reader; break a;}
          var _l_ = caml_call1(CamlinternalLazy[2], reader);
         }
        }
        return [0,
                _l_,
                writer,
                response_body_buffer,
                request_handler,
                error_handler,
                request_queue,
                _j_];
       }]);
    var _h_ = caml_obj_tag(t);
    if(250 === _h_) return t[1];
    if(246 !== _h_ && 244 !== _h_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function shutdown_reader(t){
    if(is_active(t)){
     var _f_ = current_reqd_exn(t);
     caml_call1(Dream_httpaf_Reqd[15], _f_);
    }
    caml_call1(Dream_httpaf_Parse[96][12], t[1]);
    return wakeup_reader(t);
   }
   function shutdown_writer(t){
    if(is_active(t)){
     var reqd = current_reqd_exn(t);
     caml_call1(Dream_httpaf_Reqd[15], reqd);
     caml_call1(Dream_httpaf_Reqd[21], reqd);
    }
    caml_call1(Dream_httpaf_Serialize[13][16], t[2]);
    return wakeup_writer(t);
   }
   function error_code(t){
    if(! is_active(t)) return 0;
    var _e_ = current_reqd_exn(t);
    return caml_call1(Dream_httpaf_Reqd[16], _e_);
   }
   function shutdown(t){shutdown_reader(t); return shutdown_writer(t);}
   function set_error_and_handle(request, t, error){
    if(is_active(t)){
     if(0 !== request)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var reqd = current_reqd_exn(t);
     return caml_call2(Dream_httpaf_Reqd[12], reqd, error);
    }
    var status = typeof error === "number" ? error : -732353682;
    shutdown_reader(t);
    var writer = t[2];
    if(t[7]){
     caml_call1(Dream_httpaf_Serialize[13][17], t[2]);
     return shutdown(t);
    }
    t[7] = [0, request, 0];
    function _d_(headers){
     var
      response =
        caml_call4(Dream_httpaf_Response[1], 0, 0, [0, headers], status);
     if(request)
      var request$0 = request[1], request_method = request$0[1];
     else
      var request_method = 3546230;
     var
      encoding =
        caml_call3(Dream_httpaf_Response[6], 0, request_method, response);
     a:
     {
      if(typeof encoding !== "number" && 332360020 > encoding[1]){
       var encoding$0 = caml_call1(Stdlib[2], cst_httpaf_Server_connection_e);
       break a;
      }
      var encoding$0 = encoding;
     }
     var
      response_body =
        caml_call3(Dream_httpaf_Body[2][2], t[3], encoding$0, t[2]);
     caml_call2(Dream_httpaf_Serialize[13][4], writer, response);
     t[7] = [0, request, [1, response, response_body]];
     wakeup_writer(t);
     return response_body;
    }
    return caml_call3(t[5], request, error, _d_);
   }
   function report_exn(t, exn){
    return set_error_and_handle(0, t, [0, 3458171, exn]);
   }
   function advance_request_queue(t){
    caml_call1(Stdlib_Queue[5], t[6]);
    var _b_ = 1 - caml_call1(Stdlib_Queue[13], t[6]);
    if(! _b_) return _b_;
    var _c_ = caml_call1(Stdlib_Queue[8], t[6]);
    return caml_call1(t[4], _c_);
   }
   function next_read_operation$1(counter, t){
    if(is_active(t)){
     var reqd = current_reqd_exn(t);
     switch(caml_call1(Dream_httpaf_Reqd[18], reqd)){
       case 0:
        return caml_call1(Dream_httpaf_Parse[96][13], t[1]);
       case 1:
        if(2 <= caml_call1(Dream_httpaf_Reqd[19], reqd))
         return caml_call1(Dream_httpaf_Parse[96][13], t[1]);
        var operation = caml_call1(Dream_httpaf_Parse[96][13], t[1]);
        if(typeof operation !== "number" && 106380200 === operation[1])
         return operation;
        return 73271853;
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (final_read_operation_for$0, [0, t, reqd]);
        var counter$0 = counter + 1 | 0;
        return final_read_operation_for$0(counter$0, t, reqd);
     }
    }
    var next = caml_call1(Dream_httpaf_Parse[96][13], t[1]);
    a:
    if(typeof next === "number"){
     if(-611285096 === next){if(! t[7]) shutdown(t); break a;}
    }
    else if(106380200 === next[1]){shutdown_reader(t); break a;}
    return next;
   }
   function final_read_operation_for$0(counter, t, reqd){
    if
     (!
      caml_call1(Dream_httpaf_Parse[96][3], t[1])
      && caml_call1(Dream_httpaf_Reqd[17], reqd)){
     if(2 > caml_call1(Dream_httpaf_Reqd[19], reqd)) return 73271853;
     var op = caml_call1(Dream_httpaf_Parse[96][13], t[1]);
     if(typeof op === "number"){
      if(914388854 === op){advance_request_queue(t); return op;}
     }
     else if(106380200 === op[1]) return op;
     advance_request_queue(t);
     if(counter >= 50)
      return caml_trampoline_return(next_read_operation$1, [0, t]);
     var counter$0 = counter + 1 | 0;
     return next_read_operation$1(counter$0, t);
    }
    shutdown_reader(t);
    return caml_call1(Dream_httpaf_Parse[96][13], t[1]);
   }
   function next_read_operation(t){
    return caml_trampoline(next_read_operation$1(0, t));
   }
   function final_read_operation_for(t, reqd){
    return caml_trampoline(final_read_operation_for$0(0, t, reqd));
   }
   function next_read_operation$0(t){
    var operation = next_read_operation(t);
    if(typeof operation === "number")
     return 389604418 <= operation ? 914388854 : operation;
    var match = operation[2];
    if(-99004555 <= match[1]){
     var request = match[2];
     set_error_and_handle([0, request], t, -99004555);
     return -611285096;
    }
    set_error_and_handle(0, t, -99004555);
    return -611285096;
   }
   function read_with_more(t, bs, off, len, more){
    var
     consumed =
       caml_call5(Dream_httpaf_Parse[96][11], t[1], bs, off, len, more);
    if(is_active(t)){
     var reqd = current_reqd_exn(t);
     caml_call1(Dream_httpaf_Reqd[20], reqd);
    }
    return consumed;
   }
   function read(t, bs, off, len){return read_with_more(t, bs, off, len, 1);}
   function read_eof(t, bs, off, len){
    return read_with_more(t, bs, off, len, 0);
   }
   function flush_response_error_body(response_state){
    return caml_call1(Dream_httpaf_Response_state[2], response_state);
   }
   function next_write_operation$1(counter, t){
    if(is_active(t)){
     var reqd = current_reqd_exn(t);
     switch(caml_call1(Dream_httpaf_Reqd[19], reqd)){
       case 0:
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
       case 1:
        caml_call1(Dream_httpaf_Reqd[21], reqd);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (final_write_operation_for$0, [0, t, reqd]);
        var counter$0 = counter + 1 | 0;
        return final_write_operation_for$0(counter$0, t, reqd);
     }
    }
    var match = t[7];
    if(match){
     var response_state = match[2];
     switch(caml_call1(Dream_httpaf_Response_state[1], response_state)){
       case 0:
        return 73271853;
       case 1:
        flush_response_error_body(response_state);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
       default:
        shutdown_writer(t);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
     }
    }
    if(caml_call1(Dream_httpaf_Parse[96][3], t[1])) shutdown(t);
    return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
   }
   function final_write_operation_for$0(counter, t, reqd){
    if(caml_call1(Dream_httpaf_Reqd[17], reqd))
     switch(caml_call1(Dream_httpaf_Reqd[18], reqd)){
       case 0:
        wakeup_reader(t);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
       case 1:
        wakeup_reader(t);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
       default:
        var match = caml_call1(Dream_httpaf_Parse[96][13], t[1]);
        if(typeof match !== "number" && 106380200 === match[1])
         return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
        advance_request_queue(t);
        wakeup_reader(t);
        if(counter >= 50)
         return caml_trampoline_return(next_write_operation$1, [0, t]);
        var counter$0 = counter + 1 | 0;
        return next_write_operation$1(counter$0, t);
     }
    shutdown_writer(t);
    wakeup_reader(t);
    return caml_call1(Dream_httpaf_Serialize[13][21], t[2]);
   }
   function next_write_operation(t){
    return caml_trampoline(next_write_operation$1(0, t));
   }
   function final_write_operation_for(t, reqd){
    return caml_trampoline(final_write_operation_for$0(0, t, reqd));
   }
   function next_write_operation$0(t){return next_write_operation(t);}
   function report_write_result(t, result){
    return caml_call2(Dream_httpaf_Serialize[13][20], t[2], result);
   }
   var
    Dream_httpaf_Server_connection =
      [0,
       is_closed,
       is_active,
       current_reqd_exn,
       yield_reader,
       wakeup_reader,
       yield_writer,
       wakeup_writer,
       default_error_handler,
       create,
       shutdown_reader,
       shutdown_writer,
       error_code,
       shutdown,
       set_error_and_handle,
       report_exn,
       advance_request_queue,
       next_read_operation,
       final_read_operation_for,
       next_read_operation$0,
       read_with_more,
       read,
       read_eof,
       flush_response_error_body,
       next_write_operation,
       final_write_operation_for,
       next_write_operation$0,
       report_write_result];
   runtime.caml_register_global
    (17, Dream_httpaf_Server_connection, "Dream_httpaf___Server_connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Client_connection
//# unitInfo: Requires: Bigstringaf, Dream_httpaf___Body, Dream_httpaf___Config, Dream_httpaf___Parse, Dream_httpaf___Request, Dream_httpaf___Respd, Dream_httpaf___Serialize, Stdlib, Stdlib__Queue, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    cst$0 = ">",
    cst$1 = "",
    Dream_httpaf_Parse = global_data.Dream_httpaf___Parse,
    Dream_httpaf_Respd = global_data.Dream_httpaf___Respd,
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Dream_httpaf_Request = global_data.Dream_httpaf___Request,
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Stdlib = global_data.Stdlib,
    Bigstringaf = global_data.Bigstringaf,
    Dream_httpaf_Config = global_data.Dream_httpaf___Config,
    _b_ = [0, -522261659, "unexpected eof"],
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Httpaf_Client_connection_r =
      "Httpaf.Client_connection.request: invalid body length",
    cst_Dream_httpaf_Client_connec = "Dream_httpaf___Client_connection.Local";
   function is_closed(t){
    var _w_ = caml_call1(Dream_httpaf_Parse[96][3], t[2]);
    return _w_ ? caml_call1(Dream_httpaf_Serialize[13][18], t[3]) : _w_;
   }
   function is_waiting(t){
    var _v_ = 1 - is_closed(t);
    return _v_ ? caml_call1(Stdlib_Queue[13], t[4]) : _v_;
   }
   function is_active(t){return 1 - caml_call1(Stdlib_Queue[13], t[4]);}
   function current_respd_exn(t){return caml_call1(Stdlib_Queue[8], t[4]);}
   function yield_reader(t, k){
    return caml_call2(Dream_httpaf_Parse[96][4], t[2], k);
   }
   function wakeup_reader(t){
    return caml_call1(Dream_httpaf_Parse[96][5], t[2]);
   }
   function yield_writer(t, k){
    return caml_call2(Dream_httpaf_Serialize[13][11], t[3], k);
   }
   function wakeup_writer(t){
    return caml_call1(Dream_httpaf_Serialize[13][12], t[3]);
   }
   function create(opt, param){
    if(opt)
     var sth = opt[1], config = sth;
    else
     var config = Dream_httpaf_Config[1];
    var
     request_queue = caml_call1(Stdlib_Queue[2], 0),
     _u_ = caml_call2(Dream_httpaf_Serialize[13][1], 0, 0);
    return [0,
            config,
            caml_call1(Dream_httpaf_Parse[96][7], request_queue),
            _u_,
            request_queue];
   }
   function create_request_body(request, t){
    var encoding = caml_call1(Dream_httpaf_Request[4], request);
    if(typeof encoding !== "number"){
     if(332360020 > encoding[1])
      return caml_call1(Stdlib[2], cst_Httpaf_Client_connection_r);
     if(! runtime.caml_notequal(encoding[2], _a_))
      return caml_call1(Dream_httpaf_Body[2][3], t[3]);
    }
    var _s_ = t[3], _t_ = caml_call1(Bigstringaf[1], t[1][2]);
    return caml_call3(Dream_httpaf_Body[2][2], _t_, encoding, _s_);
   }
   function request(t, opt, request, error_handler, response_handler){
    if(opt)
     var sth = opt[1], flush_headers_immediately = sth;
    else
     var flush_headers_immediately = 0;
    var
     request_body = create_request_body(request, t),
     respd =
       caml_call5
        (Dream_httpaf_Respd[2],
         error_handler,
         request,
         request_body,
         t[3],
         response_handler),
     handle_now = caml_call1(Stdlib_Queue[13], t[4]);
    caml_call2(Stdlib_Queue[4], respd, t[4]);
    if(handle_now) caml_call1(Dream_httpaf_Respd[4], respd);
    if(1 - flush_headers_immediately)
     caml_call1(Dream_httpaf_Serialize[13][15], t[3]);
    wakeup_writer(t);
    return request_body;
   }
   function shutdown_reader(t){
    if(is_active(t)){
     var _r_ = current_respd_exn(t);
     caml_call1(Dream_httpaf_Respd[8], _r_);
    }
    caml_call1(Dream_httpaf_Parse[96][12], t[2]);
    return wakeup_reader(t);
   }
   function shutdown_writer(t){
    if(is_active(t)){
     var _q_ = current_respd_exn(t);
     caml_call1(Dream_httpaf_Respd[7], _q_);
    }
    caml_call1(Dream_httpaf_Serialize[13][16], t[3]);
    return wakeup_writer(t);
   }
   function shutdown(t){shutdown_reader(t); return shutdown_writer(t);}
   function set_error_and_handle(t, error){
    var _o_ = t[4];
    function _p_(respd){
     if(2 > caml_call1(Dream_httpaf_Respd[9], respd))
      return caml_call2(Dream_httpaf_Respd[5], respd, error);
     var match = caml_call1(Dream_httpaf_Parse[96][13], t[2]);
     a:
     {
      if(typeof match === "number"){
       if(914388854 === match) break a;
      }
      else if(106380200 === match[1]) break a;
      return 0;
     }
     return caml_call2(Dream_httpaf_Respd[5], respd, error);
    }
    caml_call2(Stdlib_Queue[15], _p_, _o_);
    return shutdown(t);
   }
   function unexpected_eof(t){return set_error_and_handle(t, _b_);}
   function report_exn(t, exn){
    return set_error_and_handle(t, [0, 3458171, exn]);
   }
   var
    Local = [248, cst_Dream_httpaf_Client_connec, runtime.caml_fresh_oo_id(0)];
   function maybe_pipeline_queued_requests(t){
    var _h_ = 1 < caml_call1(Stdlib_Queue[14], t[4]) ? 1 : 0;
    if(_h_)
     try{
      var
       _j_ = t[4],
       _k_ = 0,
       _l_ =
         function(prev, respd){
          a:
          if(prev){
           var
            prev$0 = prev[1],
            match = respd[7],
            match$0 = caml_call1(Dream_httpaf_Respd[10], prev$0);
           if(typeof match === "number" && ! match && 2 <= match$0){
            caml_call1(Dream_httpaf_Respd[4], respd);
            caml_call1(Dream_httpaf_Respd[11], respd);
            break a;
           }
           throw caml_maybe_attach_backtrace(Local, 1);
          }
          return [0, respd];
         };
      caml_call3(Stdlib_Queue[16], _l_, _k_, _j_);
      var _m_ = 0;
      return _m_;
     }
     catch(_n_){var _i_ = 0;}
    else
     var _i_ = _h_;
    return _i_;
   }
   function advance_request_queue(t){
    caml_call1(Stdlib_Queue[5], t[4]);
    var _e_ = 1 - caml_call1(Stdlib_Queue[13], t[4]);
    if(_e_){
     var respd = current_respd_exn(t), _f_ = respd[7];
     if(typeof _f_ === "number" && ! _f_){
      caml_call1(Dream_httpaf_Respd[4], respd);
      return wakeup_writer(t);
     }
     var _g_ = 0;
    }
    else
     var _g_ = _e_;
    return _g_;
   }
   function next_read_operation(t){
    if(is_active(t)){
     var respd = current_respd_exn(t);
     switch(caml_call1(Dream_httpaf_Respd[9], respd)){
       case 0:
        return caml_call1(Dream_httpaf_Parse[96][13], t[2]);
       case 1:
        return 73271853;
       default: return final_read_operation_for(t, respd);
     }
    }
    if(caml_call1(Dream_httpaf_Parse[96][3], t[2])) shutdown(t);
    return caml_call1(Dream_httpaf_Parse[96][13], t[2]);
   }
   function final_read_operation_for(t, respd){
    if(caml_call1(Dream_httpaf_Respd[6], respd)){
     if(2 <= caml_call1(Dream_httpaf_Respd[10], respd)){
      var operation = caml_call1(Dream_httpaf_Parse[96][13], t[2]);
      a:
      {
       b:
       {
        if(typeof operation === "number"){
         if(914388854 === operation) break b;
        }
        else if(106380200 === operation[1]) break b;
        advance_request_queue(t);
        var operation$0 = next_read_operation(t);
        break a;
       }
       var operation$0 = operation;
      }
      var operation$1 = operation$0;
     }
     else
      var operation$1 = 73271853;
     var next = operation$1;
    }
    else{
     shutdown_reader(t);
     var next = caml_call1(Dream_httpaf_Parse[96][13], t[2]);
    }
    wakeup_writer(t);
    return next;
   }
   function next_read_operation$0(t){
    var operation = next_read_operation(t);
    if(typeof operation === "number")
     return 389604418 === operation ? 914388854 : operation;
    var error = operation[2];
    if(-349406259 <= error[1]){
     set_error_and_handle(t, error);
     return -611285096;
    }
    var
     match = error[2],
     message = match[2],
     marks = match[1],
     _d_ =
       [0,
        caml_call2(Stdlib_String[7], cst$0, marks),
        [0, cst, [0, message, 0]]],
     message$0 = caml_call2(Stdlib_String[7], cst$1, _d_);
    set_error_and_handle(t, [0, -522261659, message$0]);
    return -611285096;
   }
   function read_with_more(t, bs, off, len, more){
    var
     consumed =
       caml_call5(Dream_httpaf_Parse[96][11], t[2], bs, off, len, more);
    if(is_active(t)){
     var _c_ = current_respd_exn(t);
     caml_call1(Dream_httpaf_Respd[12], _c_);
    }
    return consumed;
   }
   function read(t, bs, off, len){return read_with_more(t, bs, off, len, 1);}
   function read_eof(t, bs, off, len){
    var bytes_read = read_with_more(t, bs, off, len, 0);
    if(is_active(t)) unexpected_eof(t);
    return bytes_read;
   }
   function next_write_operation$1(counter, t){
    if(is_active(t)){
     var respd = current_respd_exn(t);
     switch(caml_call1(Dream_httpaf_Respd[10], respd)){
       case 0:
        return 73271853;
       case 1:
        caml_call1(Dream_httpaf_Respd[11], respd);
        return caml_call1(Dream_httpaf_Serialize[13][21], t[3]);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (final_write_operation_for$0, [0, t, respd]);
        var counter$0 = counter + 1 | 0;
        return final_write_operation_for$0(counter$0, t, respd);
     }
    }
    if(caml_call1(Dream_httpaf_Parse[96][3], t[2])) shutdown(t);
    return caml_call1(Dream_httpaf_Serialize[13][21], t[3]);
   }
   function final_write_operation_for$0(counter, t, respd){
    if(! caml_call1(Dream_httpaf_Respd[6], respd)){
     shutdown_writer(t);
     return caml_call1(Dream_httpaf_Serialize[13][21], t[3]);
    }
    maybe_pipeline_queued_requests(t);
    if(2 > caml_call1(Dream_httpaf_Respd[9], respd)){
     wakeup_reader(t);
     return caml_call1(Dream_httpaf_Serialize[13][21], t[3]);
    }
    var match = caml_call1(Dream_httpaf_Parse[96][13], t[2]);
    if(typeof match !== "number" && 106380200 === match[1])
     return caml_call1(Dream_httpaf_Serialize[13][21], t[3]);
    advance_request_queue(t);
    wakeup_reader(t);
    if(counter >= 50)
     return caml_trampoline_return(next_write_operation$1, [0, t]);
    var counter$0 = counter + 1 | 0;
    return next_write_operation$1(counter$0, t);
   }
   function next_write_operation(t){
    return caml_trampoline(next_write_operation$1(0, t));
   }
   function final_write_operation_for(t, respd){
    return caml_trampoline(final_write_operation_for$0(0, t, respd));
   }
   function next_write_operation$0(t){return next_write_operation(t);}
   function report_write_result(t, result){
    return caml_call2(Dream_httpaf_Serialize[13][20], t[3], result);
   }
   var
    Dream_httpaf_Client_connection =
      [0,
       is_closed,
       is_waiting,
       is_active,
       current_respd_exn,
       yield_reader,
       wakeup_reader,
       yield_writer,
       wakeup_writer,
       create,
       create_request_body,
       request,
       shutdown_reader,
       shutdown_writer,
       shutdown,
       set_error_and_handle,
       unexpected_eof,
       report_exn,
       Local,
       maybe_pipeline_queued_requests,
       advance_request_queue,
       next_read_operation,
       final_read_operation_for,
       next_read_operation$0,
       read_with_more,
       read,
       read_eof,
       next_write_operation,
       final_write_operation_for,
       next_write_operation$0,
       report_write_result];
   runtime.caml_register_global
    (17, Dream_httpaf_Client_connection, "Dream_httpaf___Client_connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf___Httpaf
//# unitInfo: Requires: Dream_httpaf___Body, Dream_httpaf___Client_connection, Dream_httpaf___Config, Dream_httpaf___Headers, Dream_httpaf___IOVec, Dream_httpaf___Method, Dream_httpaf___Parse, Dream_httpaf___Reqd, Dream_httpaf___Request, Dream_httpaf___Response, Dream_httpaf___Serialize, Dream_httpaf___Server_connection, Dream_httpaf___Status, Dream_httpaf___Version
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Serialize = global_data.Dream_httpaf___Serialize,
    Dream_httpaf_Parse = global_data.Dream_httpaf___Parse,
    Dream_httpaf_Client_connection =
      global_data.Dream_httpaf___Client_connection,
    Dream_httpaf_Server_connection =
      global_data.Dream_httpaf___Server_connection,
    Dream_httpaf_Config = global_data.Dream_httpaf___Config,
    Dream_httpaf_Reqd = global_data.Dream_httpaf___Reqd,
    Dream_httpaf_IOVec = global_data.Dream_httpaf___IOVec,
    Dream_httpaf_Response = global_data.Dream_httpaf___Response,
    Dream_httpaf_Request = global_data.Dream_httpaf___Request,
    Dream_httpaf_Body = global_data.Dream_httpaf___Body,
    Dream_httpaf_Headers = global_data.Dream_httpaf___Headers,
    Dream_httpaf_Status = global_data.Dream_httpaf___Status,
    Dream_httpaf_Method = global_data.Dream_httpaf___Method,
    Dream_httpaf_Version = global_data.Dream_httpaf___Version,
    _a_ = Dream_httpaf_Body[2],
    _b_ = Dream_httpaf_Body[1],
    Dream_httpaf_Httpaf =
      [0,
       [0,
        Dream_httpaf_Version[4],
        Dream_httpaf_Version[5],
        Dream_httpaf_Version[6],
        Dream_httpaf_Version[7]],
       Dream_httpaf_Method,
       [0,
        Dream_httpaf_Status[1],
        Dream_httpaf_Status[2],
        Dream_httpaf_Status[5],
        Dream_httpaf_Status[4],
        Dream_httpaf_Status[6],
        Dream_httpaf_Status[7],
        Dream_httpaf_Status[8],
        Dream_httpaf_Status[9],
        Dream_httpaf_Status[10],
        Dream_httpaf_Status[11],
        Dream_httpaf_Status[12],
        Dream_httpaf_Status[13],
        Dream_httpaf_Status[14]],
       [0,
        Dream_httpaf_Headers[2],
        Dream_httpaf_Headers[3],
        Dream_httpaf_Headers[4],
        Dream_httpaf_Headers[5],
        Dream_httpaf_Headers[6],
        Dream_httpaf_Headers[7],
        Dream_httpaf_Headers[8],
        Dream_httpaf_Headers[9],
        Dream_httpaf_Headers[10],
        Dream_httpaf_Headers[11],
        Dream_httpaf_Headers[12],
        Dream_httpaf_Headers[13],
        Dream_httpaf_Headers[14],
        Dream_httpaf_Headers[15],
        Dream_httpaf_Headers[16],
        Dream_httpaf_Headers[17],
        Dream_httpaf_Headers[18],
        Dream_httpaf_Headers[19],
        Dream_httpaf_Headers[20]],
       [0,
        [0, _b_[10], _b_[11], _b_[5]],
        [0, _a_[4], _a_[5], _a_[6], _a_[7], _a_[9], _a_[11], _a_[10]]],
       [0,
        Dream_httpaf_Request[1],
        Dream_httpaf_Request[3],
        Dream_httpaf_Request[4],
        Dream_httpaf_Request[5],
        Dream_httpaf_Request[6]],
       [0,
        Dream_httpaf_Response[1],
        Dream_httpaf_Response[5],
        Dream_httpaf_Response[6],
        Dream_httpaf_Response[2],
        Dream_httpaf_Response[7]],
       [0,
        Dream_httpaf_IOVec[1],
        Dream_httpaf_IOVec[2],
        Dream_httpaf_IOVec[3],
        Dream_httpaf_IOVec[4],
        Dream_httpaf_IOVec[6]],
       [0,
        Dream_httpaf_Reqd[2],
        Dream_httpaf_Reqd[3],
        Dream_httpaf_Reqd[4],
        Dream_httpaf_Reqd[5],
        Dream_httpaf_Reqd[6],
        Dream_httpaf_Reqd[7],
        Dream_httpaf_Reqd[9],
        Dream_httpaf_Reqd[11],
        Dream_httpaf_Reqd[16],
        Dream_httpaf_Reqd[13],
        Dream_httpaf_Reqd[14]],
       Dream_httpaf_Config,
       [0,
        Dream_httpaf_Server_connection[9],
        Dream_httpaf_Server_connection[19],
        Dream_httpaf_Server_connection[21],
        Dream_httpaf_Server_connection[22],
        Dream_httpaf_Server_connection[4],
        Dream_httpaf_Server_connection[26],
        Dream_httpaf_Server_connection[27],
        Dream_httpaf_Server_connection[6],
        Dream_httpaf_Server_connection[15],
        Dream_httpaf_Server_connection[1],
        Dream_httpaf_Server_connection[12],
        Dream_httpaf_Server_connection[13]],
       [0,
        Dream_httpaf_Client_connection[9],
        Dream_httpaf_Client_connection[11],
        Dream_httpaf_Client_connection[23],
        Dream_httpaf_Client_connection[25],
        Dream_httpaf_Client_connection[26],
        Dream_httpaf_Client_connection[29],
        Dream_httpaf_Client_connection[30],
        Dream_httpaf_Client_connection[5],
        Dream_httpaf_Client_connection[7],
        Dream_httpaf_Client_connection[17],
        Dream_httpaf_Client_connection[1],
        Dream_httpaf_Client_connection[14]],
       [0,
        [0, Dream_httpaf_Parse[91], Dream_httpaf_Parse[92]],
        [0, Dream_httpaf_Serialize[7], Dream_httpaf_Serialize[8]]]];
   runtime.caml_register_global
    (14, Dream_httpaf_Httpaf, "Dream_httpaf___Httpaf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
