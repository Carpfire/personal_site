// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Time_stamp_counter__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Time_stamp_counter = [0],
    Time_stamp_counter$0 = [0, Time_stamp_counter];
   runtime.caml_register_global
    (0, Time_stamp_counter$0, "Time_stamp_counter__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_stamp_counter__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Time_stamp_counter_Import = "Time_stamp_counter__Import",
    cst_time_stamp_counter = "time_stamp_counter";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_stamp_counter_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_stamp_counter);
   caml_call1(Ppx_expect_runtime[1][1], "time_stamp_counter/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_time_stamp_counter, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_time_stamp_counter);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_stamp_counter_Import);
   var Time_stamp_counter_Import = [0];
   runtime.caml_register_global
    (11, Time_stamp_counter_Import, cst_Time_stamp_counter_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Time_stamp_counter
//# unitInfo: Requires: Base__Exn, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Core_sys, Core__Float, Core__Int, Core__Int63, Core__List, Core__Time_float, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record, Stdlib, Typerep_lib__Make_typename
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Time_stamp_counter$0 = "Time_stamp_counter",
    cst_ewma_time$1 = "ewma_time",
    cst_ewma_time_tsc$1 = "ewma_time_tsc",
    cst_ewma_tsc$1 = "ewma_tsc",
    cst_ewma_tsc_square$1 = "ewma_tsc_square",
    cst_float_fields$1 = "float_fields",
    cst_floats$1 = "floats",
    cst_monotonic_nanos_per_cycle$1 = "monotonic_nanos_per_cycle",
    cst_monotonic_sec_per_cycle$1 = "monotonic_sec_per_cycle",
    cst_monotonic_time$1 = "monotonic_time",
    cst_monotonic_time_nanos$1 = "monotonic_time_nanos",
    cst_monotonic_until_tsc$1 = "monotonic_until_tsc",
    cst_nanos_per_cycle$1 = "nanos_per_cycle",
    cst_sec_per_cycle$1 = "sec_per_cycle",
    cst_t$3 = "t",
    cst_time$1 = "time",
    cst_time_nanos$1 = "time_nanos",
    cst_time_stamp_counter$0 = "time_stamp_counter",
    cst_time_stamp_counter_src_tim$4 =
      "time_stamp_counter/src/time_stamp_counter.ml",
    cst_time_stamp_counter_src_tim$5 =
      "time_stamp_counter/src/time_stamp_counter.ml.Calibrator.t",
    cst_tsc$3 = "tsc",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "time_stamp_counter/src/time_stamp_counter.ml.t",
    error_source_008 =
      "time_stamp_counter/src/time_stamp_counter.ml.Calibrator.float_fields",
    error_source_032 = cst_time_stamp_counter_src_tim$5,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Time_float = global_data.Core__Time_float,
    Base_Exn = global_data.Base__Exn,
    Core_Int63 = global_data.Core__Int63,
    Core_Float = global_data.Core__Float,
    Core = global_data.Core,
    Core_Core_sys = global_data.Core__Core_sys,
    Core_Int = global_data.Core__Int,
    Assert_failure = global_data.Assert_failure,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Typerep_lib_Make_typename = global_data.Typerep_lib__Make_typename;
   caml_call1(Ppx_module_timer_runtime[4], cst_Time_stamp_counter$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_time_stamp_counter$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_time_stamp_counter_src_tim$4);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_time_stamp_counter$0,
     "time_stamp_counter.ml");
   var
    _F_ = [0, "calibrator"],
    _E_ = [0, cst_time_stamp_counter_src_tim$4, 298, 4],
    _z_ = [0, cst_floats$1],
    _A_ = [0, cst_monotonic_time_nanos$1],
    _B_ = [0, cst_time_nanos$1],
    _C_ = [0, cst_monotonic_until_tsc$1],
    _D_ = [0, cst_tsc$3],
    cst_floats$0 = cst_floats$1,
    cst_monotonic_time_nanos$0 = cst_monotonic_time_nanos$1,
    cst_time_nanos$0 = cst_time_nanos$1,
    cst_monotonic_until_tsc$0 = cst_monotonic_until_tsc$1,
    cst_tsc$2 = cst_tsc$3,
    cst_time_stamp_counter_src_tim$3 = cst_time_stamp_counter_src_tim$5,
    _l_ = [0, cst_monotonic_nanos_per_cycle$1],
    _m_ = [0, cst_nanos_per_cycle$1],
    _n_ = [0, cst_ewma_tsc$1],
    _o_ = [0, cst_ewma_time$1],
    _p_ = [0, cst_ewma_tsc_square$1],
    _q_ = [0, cst_ewma_time_tsc$1],
    _r_ = [0, cst_monotonic_sec_per_cycle$1],
    _s_ = [0, cst_monotonic_time$1],
    _t_ = [0, cst_sec_per_cycle$1],
    _u_ = [0, cst_time$1],
    cst_monotonic_nanos_per_cycle$0 = cst_monotonic_nanos_per_cycle$1,
    cst_nanos_per_cycle$0 = cst_nanos_per_cycle$1,
    cst_ewma_tsc$0 = cst_ewma_tsc$1,
    cst_ewma_time$0 = cst_ewma_time$1,
    cst_ewma_tsc_square$0 = cst_ewma_tsc_square$1,
    cst_ewma_time_tsc$0 = cst_ewma_time_tsc$1,
    cst_monotonic_sec_per_cycle$0 = cst_monotonic_sec_per_cycle$1,
    cst_monotonic_time$0 = cst_monotonic_time$1,
    cst_sec_per_cycle$0 = cst_sec_per_cycle$1,
    cst_time$0 = cst_time$1,
    cst_t = cst_t$3,
    cst_time_stamp_counter_src_tim =
      "time_stamp_counter/src/time_stamp_counter.ml:85:0",
    cst_t$0 = cst_t$3,
    cst_tsc = cst_tsc$3,
    cst_time_stamp_counter_src_tim$0 =
      "time_stamp_counter/src/time_stamp_counter.ml:86:0",
    cst_tsc$0 = cst_tsc$3,
    cst_monotonic_nanos_per_cycle = cst_monotonic_nanos_per_cycle$1,
    cst_nanos_per_cycle = cst_nanos_per_cycle$1,
    cst_ewma_tsc = cst_ewma_tsc$1,
    cst_ewma_time = cst_ewma_time$1,
    cst_ewma_tsc_square = cst_ewma_tsc_square$1,
    cst_ewma_time_tsc = cst_ewma_time_tsc$1,
    cst_monotonic_sec_per_cycle = cst_monotonic_sec_per_cycle$1,
    cst_monotonic_time = cst_monotonic_time$1,
    cst_sec_per_cycle = cst_sec_per_cycle$1,
    cst_time = cst_time$1,
    cst_float_fields = cst_float_fields$1,
    cst_time_stamp_counter_src_tim$1 =
      "time_stamp_counter/src/time_stamp_counter.ml:115:2",
    cst_float_fields$0 = cst_float_fields$1,
    cst_floats = cst_floats$1,
    cst_monotonic_time_nanos = cst_monotonic_time_nanos$1,
    cst_time_nanos = cst_time_nanos$1,
    cst_monotonic_until_tsc = cst_monotonic_until_tsc$1,
    cst_tsc$1 = cst_tsc$3,
    cst_t$1 = cst_t$3,
    cst_time_stamp_counter_src_tim$2 =
      "time_stamp_counter/src/time_stamp_counter.ml:133:2",
    cst_t$2 = cst_t$3,
    cst_time_stamp_counter = cst_time_stamp_counter$0,
    cst_Time_stamp_counter = cst_Time_stamp_counter$0,
    max_percent_change_from_real_s = 0.2;
   function ewma(alpha, old, add){return (1. - alpha) * old + alpha * add;}
   var
    _a_ = Core_Int63[98],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], cst_time_stamp_counter_src_tim),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_tsc = Core_Int63[94],
    bin_write_tsc = Core_Int63[95],
    bin_writer_t = [0, bin_size_tsc, bin_write_tsc],
    bin_read_t = Core_Int63[97],
    bin_read_tsc = Core_Int63[96],
    bin_reader_t = [0, bin_read_tsc, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    tsc_of_sexp = Core_Int63[102],
    sexp_of_tsc = Core_Int63[103],
    Typename_of_t = caml_call1(Typerep_lib_Make_typename[1], [0, name]),
    typename_of_t = Typename_of_t[2],
    name_of_t = Typename_of_t[1],
    typerep_of_t = [9, [0, name_of_t, [0, Core_Int63[90]]]],
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_tsc), 0, bin_shape_t], 0],
    _f_ = caml_call1(Bin_shape[4][1], cst_time_stamp_counter_src_tim$0),
    group$0 = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_tsc$0),
    bin_shape_tsc =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _g_), 0),
    max = Core_Int63[116],
    min = Core_Int63[115],
    compare = Core_Int63[114],
    equal = Core_Int63[113],
    symbol = Core_Int63[112],
    symbol$0 = Core_Int63[111],
    symbol$1 = Core_Int63[110],
    symbol$2 = Core_Int63[109],
    symbol$3 = Core_Int63[108],
    symbol$4 = Core_Int63[107];
   function diff(t1, t2){return caml_call2(Core_Int63[20], t1, t2);}
   function add(t, s){return caml_call2(Core_Int63[19], t, s);}
   function of_int63(t){return t;}
   function to_int63(t){return t;}
   var zero = Core_Int63[16];
   function now(param){
    var tsc64 = runtime.caml_rdtsc(0), _aU_ = Core_Core_sys[8];
    if(typeof _aU_ === "number" && ! _aU_)
     return caml_call1(Core_Int63[72], runtime.caml_int64_to_int32(tsc64));
    return caml_call1(Core_Int63[81], tsc64);
   }
   var
    _h_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_time, Core[350]],
         [0,
          [0, cst_sec_per_cycle, Core[350]],
          [0,
           [0, cst_monotonic_time, Core[350]],
           [0,
            [0, cst_monotonic_sec_per_cycle, Core[350]],
            [0,
             [0, cst_ewma_time_tsc, Core[350]],
             [0,
              [0, cst_ewma_tsc_square, Core[350]],
              [0,
               [0, cst_ewma_time, Core[350]],
               [0,
                [0, cst_ewma_tsc, Core[350]],
                [0,
                 [0, cst_nanos_per_cycle, Core[350]],
                 [0, [0, cst_monotonic_nanos_per_cycle, Core[350]], 0]]]]]]]]]]),
    _i_ = [0, [0, caml_call1(Bin_shape[2][1], cst_float_fields), 0, _h_], 0],
    _j_ = caml_call1(Bin_shape[4][1], cst_time_stamp_counter_src_tim$1),
    group$1 = caml_call2(Bin_prot_Shape[2], _j_, _i_),
    _k_ = caml_call1(Bin_shape[2][1], cst_float_fields$0),
    bin_shape_float_fields =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _k_), 0);
   function float_fields_of_sexp(x_009){
    function _aJ_(param){
     var
      _aM_ = param[2],
      _aN_ = _aM_[2],
      _aO_ = _aN_[2],
      _aP_ = _aO_[2],
      _aQ_ = _aP_[2],
      _aR_ = _aQ_[2],
      _aS_ = _aR_[2],
      _aT_ = _aS_[2],
      monotonic_nanos_per_cycle = _aT_[2][1],
      nanos_per_cycle = _aT_[1],
      ewma_tsc = _aS_[1],
      ewma_time = _aR_[1],
      ewma_tsc_square = _aQ_[1],
      ewma_time_tsc = _aP_[1],
      monotonic_sec_per_cycle = _aO_[1],
      monotonic_time = _aN_[1],
      sec_per_cycle = _aM_[1],
      time = param[1];
     return [254,
             time,
             sec_per_cycle,
             monotonic_time,
             monotonic_sec_per_cycle,
             ewma_time_tsc,
             ewma_tsc_square,
             ewma_time,
             ewma_tsc,
             nanos_per_cycle,
             monotonic_nanos_per_cycle];
    }
    var _aK_ = 0;
    function _aL_(param){
     var
      switch$0 =
        runtime.caml_string_compare(param, cst_monotonic_sec_per_cycle$1);
     if(0 <= switch$0){
      if(0 >= switch$0) return 3;
      if(! caml_string_notequal(param, cst_monotonic_time$1)) return 2;
      if(! caml_string_notequal(param, cst_nanos_per_cycle$1)) return 8;
      if(! caml_string_notequal(param, cst_sec_per_cycle$1)) return 1;
      if(! caml_string_notequal(param, cst_time$1)) return 0;
     }
     else{
      if(! caml_string_notequal(param, cst_ewma_time$1)) return 6;
      if(! caml_string_notequal(param, cst_ewma_time_tsc$1)) return 4;
      if(! caml_string_notequal(param, cst_ewma_tsc$1)) return 7;
      if(! caml_string_notequal(param, cst_ewma_tsc_square$1)) return 5;
      if(! caml_string_notequal(param, cst_monotonic_nanos_per_cycle$1))
       return 9;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_008,
             [0,
              cst_time$0,
              1,
              Core[368],
              [0,
               cst_sec_per_cycle$0,
               1,
               Core[368],
               [0,
                cst_monotonic_time$0,
                1,
                Core[368],
                [0,
                 cst_monotonic_sec_per_cycle$0,
                 1,
                 Core[368],
                 [0,
                  cst_ewma_time_tsc$0,
                  1,
                  Core[368],
                  [0,
                   cst_ewma_tsc_square$0,
                   1,
                   Core[368],
                   [0,
                    cst_ewma_time$0,
                    1,
                    Core[368],
                    [0,
                     cst_ewma_tsc$0,
                     1,
                     Core[368],
                     [0,
                      cst_nanos_per_cycle$0,
                      1,
                      Core[368],
                      [0, cst_monotonic_nanos_per_cycle$0, 1, Core[368], 0]]]]]]]]]],
             _aL_,
             _aK_,
             _aJ_,
             x_009);
   }
   var
    _v_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_tsc$1, bin_shape_tsc],
         [0,
          [0, cst_monotonic_until_tsc, bin_shape_tsc],
          [0,
           [0, cst_time_nanos, Core_Int63[98]],
           [0,
            [0, cst_monotonic_time_nanos, Core_Int63[98]],
            [0, [0, cst_floats, bin_shape_float_fields], 0]]]]]),
    _w_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _v_], 0],
    _x_ = caml_call1(Bin_shape[4][1], cst_time_stamp_counter_src_tim$2),
    group$2 = caml_call2(Bin_prot_Shape[2], _x_, _w_),
    _y_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _y_), 0);
   function bin_size_t(param){
    var
     v1$0 = param[1],
     v2$0 = param[2],
     v3$0 = param[3],
     v4$0 = param[4],
     v5$0 = param[5],
     _aF_ = caml_call1(bin_size_tsc, v1$0),
     size$8 = caml_call2(Bin_prot_Common[23], 0, _aF_),
     _aG_ = caml_call1(bin_size_tsc, v2$0),
     size$9 = caml_call2(Bin_prot_Common[23], size$8, _aG_),
     _aH_ = caml_call1(Core_Int63[94], v3$0),
     size$10 = caml_call2(Bin_prot_Common[23], size$9, _aH_),
     _aI_ = caml_call1(Core_Int63[94], v4$0),
     size$11 = caml_call2(Bin_prot_Common[23], size$10, _aI_),
     v1 = v5$0[1],
     v2 = v5$0[2],
     v3 = v5$0[3],
     v4 = v5$0[4],
     v5 = v5$0[5],
     v6 = v5$0[6],
     v7 = v5$0[7],
     v8 = v5$0[8],
     v9 = v5$0[9],
     v10 = v5$0[10],
     _au_ = caml_call1(Core[351], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _au_),
     _av_ = caml_call1(Core[351], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _av_),
     _aw_ = caml_call1(Core[351], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _aw_),
     _ax_ = caml_call1(Core[351], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _ax_),
     _ay_ = caml_call1(Core[351], v5),
     size$3 = caml_call2(Bin_prot_Common[23], size$2, _ay_),
     _az_ = caml_call1(Core[351], v6),
     size$4 = caml_call2(Bin_prot_Common[23], size$3, _az_),
     _aA_ = caml_call1(Core[351], v7),
     size$5 = caml_call2(Bin_prot_Common[23], size$4, _aA_),
     _aB_ = caml_call1(Core[351], v8),
     size$6 = caml_call2(Bin_prot_Common[23], size$5, _aB_),
     _aC_ = caml_call1(Core[351], v9),
     size$7 = caml_call2(Bin_prot_Common[23], size$6, _aC_),
     _aD_ = caml_call1(Core[351], v10),
     _aE_ = caml_call2(Bin_prot_Common[23], size$7, _aD_);
    return caml_call2(Bin_prot_Common[23], size$11, _aE_);
   }
   function bin_write_t(buf, pos$8, param){
    var
     v1$0 = param[1],
     v2$0 = param[2],
     v3$0 = param[3],
     v4$0 = param[4],
     v5$0 = param[5],
     pos$9 = caml_call3(bin_write_tsc, buf, pos$8, v1$0),
     pos$10 = caml_call3(bin_write_tsc, buf, pos$9, v2$0),
     pos$11 = caml_call3(Core_Int63[95], buf, pos$10, v3$0),
     pos$12 = caml_call3(Core_Int63[95], buf, pos$11, v4$0),
     v1 = v5$0[1],
     v2 = v5$0[2],
     v3 = v5$0[3],
     v4 = v5$0[4],
     v5 = v5$0[5],
     v6 = v5$0[6],
     v7 = v5$0[7],
     v8 = v5$0[8],
     v9 = v5$0[9],
     v10 = v5$0[10],
     pos = caml_call3(Core[353], buf, pos$12, v1),
     pos$0 = caml_call3(Core[353], buf, pos, v2),
     pos$1 = caml_call3(Core[353], buf, pos$0, v3),
     pos$2 = caml_call3(Core[353], buf, pos$1, v4),
     pos$3 = caml_call3(Core[353], buf, pos$2, v5),
     pos$4 = caml_call3(Core[353], buf, pos$3, v6),
     pos$5 = caml_call3(Core[353], buf, pos$4, v7),
     pos$6 = caml_call3(Core[353], buf, pos$5, v8),
     pos$7 = caml_call3(Core[353], buf, pos$6, v9);
    return caml_call3(Core[353], buf, pos$7, v10);
   }
   var bin_writer_t$0 = [0, bin_size_t, bin_write_t];
   function bin_read_t$0(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_time_stamp_counter_src_tim$3,
             pos_ref[1]);
   }
   function bin_read_t$1(buf, pos_ref){
    var
     v_tsc = caml_call2(bin_read_tsc, buf, pos_ref),
     v_monotonic_until_tsc = caml_call2(bin_read_tsc, buf, pos_ref),
     v_time_nanos = caml_call2(Core_Int63[96], buf, pos_ref),
     v_monotonic_time_nanos = caml_call2(Core_Int63[96], buf, pos_ref),
     v_time = caml_call2(Core[356], buf, pos_ref),
     v_sec_per_cycle = caml_call2(Core[356], buf, pos_ref),
     v_monotonic_time = caml_call2(Core[356], buf, pos_ref),
     v_monotonic_sec_per_cycle = caml_call2(Core[356], buf, pos_ref),
     v_ewma_time_tsc = caml_call2(Core[356], buf, pos_ref),
     v_ewma_tsc_square = caml_call2(Core[356], buf, pos_ref),
     v_ewma_time = caml_call2(Core[356], buf, pos_ref),
     v_ewma_tsc = caml_call2(Core[356], buf, pos_ref),
     v_nanos_per_cycle = caml_call2(Core[356], buf, pos_ref),
     v_monotonic_nanos_per_cycle = caml_call2(Core[356], buf, pos_ref),
     v_floats =
       [254,
        v_time,
        v_sec_per_cycle,
        v_monotonic_time,
        v_monotonic_sec_per_cycle,
        v_ewma_time_tsc,
        v_ewma_tsc_square,
        v_ewma_time,
        v_ewma_tsc,
        v_nanos_per_cycle,
        v_monotonic_nanos_per_cycle];
    return [0,
            v_tsc,
            v_monotonic_until_tsc,
            v_time_nanos,
            v_monotonic_time_nanos,
            v_floats];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$1, bin_read_t$0],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function t_of_sexp(x_033){
    function _ao_(param){
     var
      _ar_ = param[2],
      _as_ = _ar_[2],
      _at_ = _as_[2],
      floats = _at_[2][1],
      monotonic_time_nanos = _at_[1],
      time_nanos = _as_[1],
      monotonic_until_tsc = _ar_[1],
      tsc = param[1];
     return [0,
             tsc,
             monotonic_until_tsc,
             time_nanos,
             monotonic_time_nanos,
             floats];
    }
    var _ap_ = 0;
    function _aq_(param){
     return caml_string_notequal(param, cst_floats$1)
             ? caml_string_notequal
                (param, cst_monotonic_time_nanos$1)
               ? caml_string_notequal
                  (param, cst_monotonic_until_tsc$1)
                 ? caml_string_notequal
                    (param, cst_time_nanos$1)
                   ? caml_string_notequal(param, cst_tsc$3) ? -1 : 0
                   : 2
                 : 1
               : 3
             : 4;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_032,
             [0,
              cst_tsc$2,
              1,
              tsc_of_sexp,
              [0,
               cst_monotonic_until_tsc$0,
               1,
               tsc_of_sexp,
               [0,
                cst_time_nanos$0,
                1,
                Core_Int63[102],
                [0,
                 cst_monotonic_time_nanos$0,
                 1,
                 Core_Int63[102],
                 [0, cst_floats$0, 1, float_fields_of_sexp, 0]]]]],
             _aq_,
             _ap_,
             _ao_,
             x_033);
   }
   function sexp_of_t(param){
    var
     tsc_035 = param[1],
     monotonic_until_tsc_037 = param[2],
     time_nanos_039 = param[3],
     monotonic_time_nanos_041 = param[4],
     floats_043 = param[5],
     time_011 = floats_043[1],
     sec_per_cycle_013 = floats_043[2],
     monotonic_time_015 = floats_043[3],
     monotonic_sec_per_cycle_017 = floats_043[4],
     ewma_time_tsc_019 = floats_043[5],
     ewma_tsc_square_021 = floats_043[6],
     ewma_time_023 = floats_043[7],
     ewma_tsc_025 = floats_043[8],
     nanos_per_cycle_027 = floats_043[9],
     monotonic_nanos_per_cycle_029 = floats_043[10],
     arg_030 = caml_call1(Core[367], monotonic_nanos_per_cycle_029),
     bnds_010 = [0, [1, [0, _l_, [0, arg_030, 0]]], 0],
     arg_028 = caml_call1(Core[367], nanos_per_cycle_027),
     bnds_010$0 = [0, [1, [0, _m_, [0, arg_028, 0]]], bnds_010],
     arg_026 = caml_call1(Core[367], ewma_tsc_025),
     bnds_010$1 = [0, [1, [0, _n_, [0, arg_026, 0]]], bnds_010$0],
     arg_024 = caml_call1(Core[367], ewma_time_023),
     bnds_010$2 = [0, [1, [0, _o_, [0, arg_024, 0]]], bnds_010$1],
     arg_022 = caml_call1(Core[367], ewma_tsc_square_021),
     bnds_010$3 = [0, [1, [0, _p_, [0, arg_022, 0]]], bnds_010$2],
     arg_020 = caml_call1(Core[367], ewma_time_tsc_019),
     bnds_010$4 = [0, [1, [0, _q_, [0, arg_020, 0]]], bnds_010$3],
     arg_018 = caml_call1(Core[367], monotonic_sec_per_cycle_017),
     bnds_010$5 = [0, [1, [0, _r_, [0, arg_018, 0]]], bnds_010$4],
     arg_016 = caml_call1(Core[367], monotonic_time_015),
     bnds_010$6 = [0, [1, [0, _s_, [0, arg_016, 0]]], bnds_010$5],
     arg_014 = caml_call1(Core[367], sec_per_cycle_013),
     bnds_010$7 = [0, [1, [0, _t_, [0, arg_014, 0]]], bnds_010$6],
     arg_012 = caml_call1(Core[367], time_011),
     bnds_010$8 = [0, [1, [0, _u_, [0, arg_012, 0]]], bnds_010$7],
     arg_044 = [1, bnds_010$8],
     bnds_034 = [0, [1, [0, _z_, [0, arg_044, 0]]], 0],
     arg_042 = caml_call1(Core_Int63[103], monotonic_time_nanos_041),
     bnds_034$0 = [0, [1, [0, _A_, [0, arg_042, 0]]], bnds_034],
     arg_040 = caml_call1(Core_Int63[103], time_nanos_039),
     bnds_034$1 = [0, [1, [0, _B_, [0, arg_040, 0]]], bnds_034$0],
     arg_038 = caml_call1(sexp_of_tsc, monotonic_until_tsc_037),
     bnds_034$2 = [0, [1, [0, _C_, [0, arg_038, 0]]], bnds_034$1],
     arg_036 = caml_call1(sexp_of_tsc, tsc_035),
     bnds_034$3 = [0, [1, [0, _D_, [0, arg_036, 0]]], bnds_034$2];
    return [1, bnds_034$3];
   }
   function convert(t, tsc, base, mul){
    var _an_ = diff(tsc, t[1]);
    return base + mul * caml_call1(Core_Int63[3], _an_);
   }
   function tsc_to_seconds_since_epoch(t, tsc){
    var
     _am_ =
       caml_call2(symbol$0, tsc, t[2])
        ? 0. + convert(t, tsc, t[5][3], t[5][4])
        : 0. + convert(t, tsc, t[5][1], t[5][2]);
    return 0. + _am_;
   }
   function convert$0(t, tsc, base, mul){
    var
     _aj_ = diff(tsc, t[1]),
     _ak_ = mul * caml_call1(Core_Int63[3], _aj_),
     _al_ = caml_call1(Core_Float[56], _ak_);
    return caml_call2(Core_Int63[19], base, _al_);
   }
   var initial_alpha = 1.;
   function calibrate_using(t, tsc, time, am_initializing){
    var
     estimated_time = 0. + tsc_to_seconds_since_epoch(t, tsc),
     time_diff_est = time - estimated_time,
     time_diff = time - t[5][1],
     _ac_ = diff(tsc, t[1]),
     tsc_diff = caml_call1(Core_Int63[3], _ac_),
     alpha =
       am_initializing
        ? initial_alpha
        : 0.
         + caml_call2(Core_Float[135], 0., 1. - Math.exp(-0.5 * time_diff));
    t[5][1] = time;
    t[1] = tsc;
    var _ad_ = ewma(alpha, t[5][5], tsc_diff * time_diff);
    t[5][5] = _ad_;
    var _ae_ = ewma(alpha, t[5][6], tsc_diff * tsc_diff);
    t[5][6] = _ae_;
    var _af_ = ewma(alpha, t[5][8], tsc_diff);
    t[5][8] = _af_;
    var _ag_ = ewma(alpha, t[5][7], time_diff);
    t[5][7] = _ag_;
    t[5][2] = t[5][5] / t[5][6];
    t[5][3] = estimated_time;
    if(1 - am_initializing){
     var
      catchup_sec_per_cycle = t[5][2] + time_diff_est / 1000000000.,
      _ah_ =
        caml_call1(Core_Float[6], time_diff_est)
         ? 0.
          + caml_call2(Core_Float[134], catchup_sec_per_cycle, t[5][2] * 1.2)
         : 0.
          + caml_call2(Core_Float[135], catchup_sec_per_cycle, t[5][2] * 0.8);
     t[5][4] = _ah_;
     var
      float$1 = time_diff_est / (t[5][4] - t[5][2]),
      if_iround_up_fails = Core_Int63[16];
     if(caml_call2(Core_Float[129], float$1, 0.)){
      var float$0 = Math.ceil(float$1);
      if(caml_call2(Core_Float[127], float$0, Core_Float[58]))
       var
        _aa_ = caml_call1(Core_Int63[60], float$0),
        _ai_ = caml_call2(Core_Int63[19], tsc, _aa_);
      else
       var _ai_ = if_iround_up_fails;
     }
     else if(caml_call2(Core_Float[126], float$1, Core_Float[57]))
      var
       _ab_ = caml_call1(Core_Int63[60], float$1),
       _ai_ = caml_call2(Core_Int63[19], tsc, _ab_);
     else
      var _ai_ = if_iround_up_fails;
     t[2] = _ai_;
    }
    t[3] = caml_call1(Core_Float[56], t[5][1] * 1000000000.);
    t[5][9] = t[5][2] * 1000000000.;
    t[4] = caml_call1(Core_Float[56], t[5][3] * 1000000000.);
    t[5][10] = t[5][4] * 1000000000.;
    return 0;
   }
   function now_float(param){
    var
     ___ = caml_call1(Core_Time_ns[66], 0),
     _$_ = caml_call1(Core_Time_ns[77], ___);
    return 1e-9 * caml_call1(Core_Int63[3], _$_);
   }
   function initialize(t, samples){
    function _Z_(param){
     var time = param[2], tsc = param[1];
     return calibrate_using(t, tsc, time, 1);
    }
    return caml_call2(Core_List[19], samples, _Z_);
   }
   function create_using(tsc, time, samples){
    var
     t =
       [0,
        tsc,
        Core_Int63[16],
        Core_Int63[16],
        Core_Int63[16],
        [254, time, 0., time, 0., 0., 0., 0., 0., 0., 0.]];
    initialize(t, samples);
    return t;
   }
   function create(param){
    var time = now_float(0), tsc = now(0), _X_ = Core_Core_sys[8];
    if(typeof _X_ === "number" && ! _X_){
     var interval = 0.0005, num_samples = 3;
     if(! caml_call2(Core_Int[81], 3, 1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
     var
      loop =
        function(n, sleep){
         var _Y_ = now_float(0), sample = [0, now(0), _Y_];
         return caml_call2(Core_Int[83], n, 1)
                 ? [0, sample, 0]
                 : (runtime.tsc_nanosleep
                    (sleep),
                   [0, sample, loop(n - 1 | 0, sleep + 0.0005)]);
        },
      samples = loop(num_samples, interval);
     return create_using(tsc, time, samples);
    }
    var
     t =
       [0,
        tsc,
        Core_Int63[62],
        tsc,
        tsc,
        [254, time, 1e-9, time, 1e-9, 0., 0., 0., 0., 1., 1.]];
    return t;
   }
   var
    calibrator = [246, function(_W_){return create(0);}],
    cpu_mhz = [0, function(t){return 1. / (t[5][2] * 1000000.);}];
   function calibrate(t){
    var _V_ = now_float(0);
    return calibrate_using(t, now(0), _V_, 0);
   }
   function nanos_per_cycle(t){return t[5][9];}
   var
    Private = [0, create_using, calibrate_using, initialize, nanos_per_cycle],
    of_int_exn = Core_Int63[4],
    to_int_exn = Core_Int63[5],
    zero$0 = Core_Int63[16],
    symbol$5 = Core_Int63[19],
    symbol$6 = Core_Int63[20],
    bin_size_t$0 = Core_Int63[94],
    bin_write_t$0 = Core_Int63[95],
    bin_read_t$2 = Core_Int63[96],
    bin_read_t$3 = Core_Int63[97],
    bin_shape_t$1 = Core_Int63[98],
    bin_writer_t$1 = Core_Int63[99],
    bin_reader_t$1 = Core_Int63[100],
    bin_t$1 = Core_Int63[101],
    t_of_sexp$0 = Core_Int63[102],
    sexp_of_t$0 = Core_Int63[103],
    symbol$7 = Core_Int63[107],
    symbol$8 = Core_Int63[108],
    symbol$9 = Core_Int63[109],
    symbol$10 = Core_Int63[110],
    symbol$11 = Core_Int63[111],
    symbol$12 = Core_Int63[112],
    equal$0 = Core_Int63[113],
    compare$0 = Core_Int63[114],
    min$0 = Core_Int63[115],
    max$0 = Core_Int63[116],
    ascending = Core_Int63[117],
    descending = Core_Int63[118],
    between = Core_Int63[119],
    clamp_exn = Core_Int63[120],
    clamp = Core_Int63[121],
    Replace_polymorphic_compare = Core_Int63[122],
    comparator = Core_Int63[123],
    Map = Core_Int63[124],
    Set = Core_Int63[125],
    validate_lbound = Core_Int63[132],
    validate_ubound = Core_Int63[133],
    validate_bound = Core_Int63[134];
   function of_int63$0(t){return t;}
   function to_int63$0(t){return t;}
   var Private$0 = [0, of_int63$0, to_int63$0];
   function to_ns(t, calibrator){
    var _T_ = calibrator[5][9], _U_ = caml_call1(Core_Int63[3], t) * _T_;
    return caml_call1(Core_Float[56], _U_);
   }
   function of_ns(ns, calibrator){
    try{
     var
      _Q_ = calibrator[5][9],
      _R_ = caml_call1(Core_Int63[3], ns) / _Q_,
      _S_ = caml_call1(Core_Float[56], _R_);
     return _S_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _O_ = [0, [1, [0, _F_, [0, sexp_of_t(calibrator), 0]]], 0],
      _P_ = [1, [0, caml_call1(Base_Exn[1], exn), _O_]];
     return caml_call1(Core[261], _P_);
    }
   }
   function to_time_ns_span(t, calibrator){
    var _N_ = to_ns(t, calibrator);
    return caml_call1(Core_Time_ns[1][137], _N_);
   }
   function of_time_ns_span(span, calibrator){
    return of_ns(caml_call1(Core_Time_ns[1][136], span), calibrator);
   }
   function to_time(t, calibrator){
    var
     _L_ = tsc_to_seconds_since_epoch(calibrator, t),
     _M_ = caml_call1(Core_Time_float[84][82], _L_);
    return caml_call1(Core_Time_float[24], _M_);
   }
   function to_nanos_since_epoch(tsc, calibrator){
    return caml_call2(symbol$0, tsc, calibrator[2])
            ? convert$0(calibrator, tsc, calibrator[4], calibrator[5][10])
            : convert$0(calibrator, tsc, calibrator[3], calibrator[5][9]);
   }
   function to_time_ns(t, calibrator){
    var _K_ = to_nanos_since_epoch(t, calibrator);
    return caml_call1(Core_Time_ns[78], _K_);
   }
   var
    Private$1 =
      [0,
       ewma,
       of_int63,
       max_percent_change_from_real_s,
       to_nanos_since_epoch];
   caml_call1(Ppx_inline_test_lib[7], cst_time_stamp_counter);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Time_stamp_counter);
   var
    _G_ = Set[2],
    _H_ = Set[1],
    _I_ = Map[2],
    _J_ = Map[1],
    Time_stamp_counter =
      [0,
       bin_size_tsc,
       bin_write_tsc,
       bin_read_tsc,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       tsc_of_sexp,
       sexp_of_tsc,
       typerep_of_t,
       typename_of_t,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol,
       equal,
       compare,
       min,
       max,
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t$1,
        bin_read_t$0,
        bin_shape_t$0,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0,
        t_of_sexp,
        sexp_of_t,
        create,
        calibrate,
        cpu_mhz,
        Private],
       [0,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$2,
        bin_read_t$3,
        bin_shape_t$1,
        bin_writer_t$1,
        bin_reader_t$1,
        bin_t$1,
        t_of_sexp$0,
        sexp_of_t$0,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol$12,
        equal$0,
        compare$0,
        min$0,
        max$0,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        [0,
         [0, _J_[9], _J_[10], _J_[11]],
         [0, _I_[9], _I_[10], _I_[11], _I_[12], _I_[13]],
         Map[3],
         Map[4],
         Map[5],
         Map[6],
         Map[7],
         Map[8],
         Map[9],
         Map[10],
         Map[11],
         Map[12],
         Map[13],
         Map[14],
         Map[15],
         Map[16],
         Map[17],
         Map[18],
         Map[19],
         Map[20],
         Map[21],
         Map[22],
         Map[23],
         Map[24],
         Map[25],
         Map[26],
         Map[27],
         Map[28],
         Map[29],
         Map[30],
         Map[31],
         Map[32],
         Map[33],
         Map[34],
         Map[35],
         Map[36],
         Map[37],
         Map[38],
         Map[39],
         Map[40],
         Map[41],
         Map[42],
         Map[43],
         Map[44],
         Map[45]],
        [0,
         [0, _H_[1], _H_[2], _H_[11]],
         [0, _G_[9], _G_[10], _G_[11], _G_[12], _G_[13]],
         Set[3],
         Set[4],
         Set[5],
         Set[6],
         Set[7],
         Set[8],
         Set[9],
         Set[10],
         Set[11],
         Set[12],
         Set[13],
         Set[14],
         Set[15],
         Set[16],
         Set[17],
         Set[18],
         Set[19],
         Set[20],
         Set[21],
         Set[22],
         Set[23],
         Set[24],
         Set[25],
         Set[26],
         Set[27],
         Set[28]],
        of_int_exn,
        to_int_exn,
        symbol$5,
        symbol$6,
        zero$0,
        to_ns,
        of_ns,
        to_time_ns_span,
        of_time_ns_span,
        Private$0],
       now,
       diff,
       add,
       to_int63,
       zero,
       calibrator,
       to_time,
       to_time_ns,
       Private$1];
   runtime.caml_register_global
    (150, Time_stamp_counter, cst_Time_stamp_counter$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
