// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Profunctor__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Profunctor = [0],
    Profunctor$0 = [0, Profunctor];
   runtime.caml_register_global(0, Profunctor$0, "Profunctor__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Profunctor__Profunctor_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Profunctor_Profunctor_intf = "Profunctor__Profunctor_intf",
    cst_profunctor = "profunctor";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Profunctor_Profunctor_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_profunctor);
   caml_call1(Ppx_expect_runtime[1][1], "src/profunctor_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_profunctor, "profunctor_intf.ml");
   var Interfaces = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_profunctor);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Profunctor_Profunctor_intf);
   var Profunctor_Profunctor_intf = [0, Interfaces];
   runtime.caml_register_global
    (11, Profunctor_Profunctor_intf, cst_Profunctor_Profunctor_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Profunctor
//# unitInfo: Requires: Base__Field, Base__Fn, Base__Staged, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Profunctor__Profunctor_intf, Record_builder
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Profunctor$0 = "Profunctor",
    cst_profunctor$0 = "profunctor";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Fn = global_data.Base__Fn,
    Base_Staged = global_data.Base__Staged,
    Base_Field = global_data.Base__Field,
    Record_builder = global_data.Record_builder,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Profunctor$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_profunctor$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/profunctor.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_profunctor$0, "profunctor.ml");
   var cst_profunctor = cst_profunctor$0, cst_Profunctor = cst_Profunctor$0;
   function Record_builder_internal(F, T){
    var
     prj = T[1],
     inj = T[2],
     Bare = caml_call1(Record_builder[2], [0, F[1], F[3]]);
    function field(term, field){
     var
      _r_ = caml_call1(Base_Field[3], field),
      _s_ = caml_call1(inj, term),
      _t_ = caml_call2(F[2], _s_, _r_);
     return caml_call2(Bare[2], _t_, field);
    }
    function build_for_record(f){
     return caml_call1(prj, caml_call1(Bare[3], f));
    }
    return [0, prj, inj, Bare, field, build_for_record];
   }
   function Record_builder$0(F){
    function prj(_q_){return _q_;}
    function inj(_p_){return _p_;}
    return Record_builder_internal(F, [0, prj, inj]);
   }
   function map(x, f){
    if(! x) return [0, f];
    var g = x[1];
    return [0, caml_call2(Base_Fn[5], f, g)];
   }
   function contra_map(x, f){
    if(! x) return [0, f];
    var g = x[1];
    return [0, caml_call2(Base_Fn[5], g, f)];
   }
   function as_fn(x){
    if(! x) return function(_o_){return _o_;};
    var f = x[1];
    return f;
   }
   function both(l, r){
    var l$0 = as_fn(l), r$0 = as_fn(r);
    return [0,
            function(x){
             var _n_ = caml_call1(r$0, x);
             return [0, caml_call1(l$0, x), _n_];
            }];
   }
   function split(l, r){
    if(! l && ! r) return 0;
    var l$0 = as_fn(l), r$0 = as_fn(r);
    return [0,
            function(param){
             var y = param[2], x = param[1], _m_ = caml_call1(r$0, y);
             return [0, caml_call1(l$0, x), _m_];
            }];
   }
   var id = 0;
   function of_fn(x){return [0, x];}
   function as_fn$0(t){
    var _l_ = as_fn(t);
    return caml_call1(Base_Staged[1], _l_);
   }
   function compose(g, f){
    if(! g) return f ? f : 0;
    if(! f) return g;
    var f$0 = f[1], g$0 = g[1];
    return [0, caml_call2(Base_Fn[5], g$0, f$0)];
   }
   var Of_record = Record_builder$0([0, map, contra_map, both]);
   caml_call1(Ppx_inline_test_lib[7], cst_profunctor);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Profunctor);
   var
    _a_ =
      [0,
       map,
       contra_map,
       both,
       id,
       of_fn,
       as_fn$0,
       split,
       compose,
       Of_record];
   function _b_(F){
    function contra_map$0(param, f){
     var _j_ = param[3], _k_ = param[2];
     return [0, contra_map(param[1], f), _k_, _j_];
    }
    function map$0(param, f){
     var _i_ = map(param[3], f);
     return [0, param[1], param[2], _i_];
    }
    function both$0(param, r){
     var _g_ = split(param[3], r[3]), _h_ = caml_call2(F[2], param[2], r[2]);
     return [0, both(param[1], r[1]), _h_, _g_];
    }
    function inj(inner){return [0, 0, inner, 0];}
    function prj(param){
     var _e_ = as_fn(param[1]), _f_ = as_fn(param[3]);
     return caml_call3(F[1], param[2], _f_, _e_);
    }
    var
     Of_record =
       Record_builder_internal
        ([0, map$0, contra_map$0, both$0], [0, prj, inj]);
    return [0, map$0, contra_map$0, both$0, inj, prj, Of_record];
   }
   var
    Profunctor =
      [0,
       Record_builder$0,
       function(F){
        function contra_map(x, param){return x;}
        var map = F[2], both = F[3];
        function inj(_d_){return _d_;}
        function prj(_c_){return _c_;}
        var
         Of_record =
           Record_builder_internal([0, map, contra_map, both], [0, prj, inj]);
        return [0, map, contra_map, both, Of_record];
       },
       _b_,
       _a_];
   runtime.caml_register_global(15, Profunctor, cst_Profunctor$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
