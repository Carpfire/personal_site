// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Faraday_lwt
//# unitInfo: Requires: Faraday, Lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Faraday = global_data.Faraday;
   function serialize(t, yield$0, writev){
    function shutdown(param){
     caml_call1(Faraday[19], t);
     caml_call1(Faraday[22], t);
     return;
    }
    function loop(t){
     var match = caml_call1(Faraday[23], t);
     if(typeof match !== "number"){
      var
       iovecs = match[2],
       _e_ =
         function(param){
          if(typeof param === "number"){
           shutdown(0);
           return caml_call1(Lwt[4], 0);
          }
          var n = param[2];
          caml_call2(Faraday[21], t, n);
          return loop(t);
         },
       _f_ = caml_call1(writev, iovecs);
      return caml_call2(Lwt[70], _f_, _e_);
     }
     if(73271853 > match) return caml_call1(Lwt[4], 0);
     function _c_(param){return loop(t);}
     var _d_ = caml_call1(yield$0, t);
     return caml_call2(Lwt[70], _d_, _c_);
    }
    function _a_(exn){shutdown(0); return caml_call1(Lwt[5], exn);}
    function _b_(param){return loop(t);}
    return caml_call2(Lwt[7], _b_, _a_);
   }
   var Faraday_lwt = [0, serialize];
   runtime.caml_register_global(2, Faraday_lwt, "Faraday_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJmYXJhZGF5X2x3dC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsic2VyaWFsaXplIiwidCIsInlpZWxkJDAiLCJ3cml0ZXYiLCJzaHV0ZG93biIsImxvb3AiLCJpb3ZlY3MiLCJuIiwiZXhuIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvZmFyYWRheS1sd3QvZmFyYWRheV9sd3QubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7O1lBRUlBLFVBQVVDLEdBQUdDLFNBQU9DO2FBQ2xCQztLQUNGLHdCQUZVSDtLQUtILHdCQUxHQTtLQUtIO0lBQWtCO2FBRW5CSSxLQUFLSjtLQUNMLFlBQUEsd0JBREtBOztNQUdUO09BRFFLOzs7VUFFSjtXQVZKRjtXQVdpQixPQUFBOztjQUNURztVQUFTLHdCQU5STixHQU1ETTtVQUhSLE9BSElGLEtBQUtKO1NBTWtDO09BSDNDLE1BQUEsV0FWa0JFLFFBU1ZHO01BRUosT0FBQTs7MEJBS00sT0FBQTt5QkFEWSxPQVJsQkQsS0FBS0osR0FRbUI7S0FBNUIsVUFBQSxXQWZXQyxTQU9GRDtLQVFHLE9BQUE7SUFDTztpQkFJaEJPLEtBbkJISixhQW9CQSxPQUFBLG1CQURHSSxLQUVLO3dCQUhFLE9BWk5ILEtBUElKLEdBbUJRO0lBQ2xCLE9BQUE7R0FFVzt5QkF0QlhEOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gTHd0XG5cbmxldCBzZXJpYWxpemUgdCB+eWllbGQgfndyaXRldiA9XG4gIGxldCBzaHV0ZG93biAoKSA9XG4gICAgRmFyYWRheS5jbG9zZSB0O1xuICAgICgqIEl0J3MgbmVjZXNzYXJ5IHRvIGRyYWluIHRoZSBzZXJpYWxpemVyIGluIG9yZGVyIHRvIGZyZWUgYW55IGJ1ZmZlcnMgdGhhdFxuICAgICAqIG1heSBiZSBiZSBxdWV1ZWQgdXAuICopXG4gICAgaWdub3JlIChGYXJhZGF5LmRyYWluIHQpO1xuICBpblxuICBsZXQgcmVjIGxvb3AgdCA9XG4gICAgbWF0Y2ggRmFyYWRheS5vcGVyYXRpb24gdCB3aXRoXG4gICAgfCBgV3JpdGV2IGlvdmVjcyAtPlxuICAgICAgd3JpdGV2IGlvdmVjc1xuICAgICAgPj49IChmdW5jdGlvblxuICAgICAgICB8IGBDbG9zZWQgICAtPiBzaHV0ZG93biAoKTsgcmV0dXJuICgpICgqIFhYWChzZWxpb3BvdSk6IHRoaXMgc2hvdWxkIGJlIHJlcG9ydGVkICopXG4gICAgICAgIHwgYE9rIG4gICAgIC0+IEZhcmFkYXkuc2hpZnQgdCBuOyBsb29wIHQpXG4gICAgfCBgWWllbGQgLT5cbiAgICAgIHlpZWxkIHQgPj49IGZ1biAoKSAtPiBsb29wIHRcbiAgICB8IGBDbG9zZSAtPiByZXR1cm4gKClcbiAgaW5cbiAgY2F0Y2hcbiAgICAoZnVuICgpICAtPiBsb29wIHQpXG4gICAgKGZ1biBleG4gLT5cbiAgICAgIHNodXRkb3duICgpO1xuICAgICAgZmFpbCBleG4pXG4iXX0=
