// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Css_gen__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Css_gen = [0],
    Css_gen$0 = [0, Css_gen];
   runtime.caml_register_global(0, Css_gen$0, "Css_gen__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen__Css_tokenizer
//# unitInfo: Requires: Core, Core__Char, Core__Int, Core__List, Core__Sexp, Core__String, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "",
    cst_Atkeyword = "Atkeyword",
    cst_Colon = "Colon",
    cst_Comma = "Comma",
    cst_Comment = "Comment",
    cst_Css_gen_Css_tokenizer$0 = "Css_gen__Css_tokenizer",
    cst_Delim = "Delim",
    cst_Dimension = "Dimension",
    cst_Eof = "Eof",
    cst_Error = "Error",
    cst_Function = "Function",
    cst_Hash = "Hash",
    cst_Ident = "Ident",
    cst_Lbracket = "Lbracket",
    cst_Lcurly = "Lcurly",
    cst_Lparen = "Lparen",
    cst_Number = "Number",
    cst_Percentage = "Percentage",
    cst_Rbracket = "Rbracket",
    cst_Rcurly = "Rcurly",
    cst_Rparen = "Rparen",
    cst_Semi_colon = "Semi_colon",
    cst_String = "String",
    cst_Uri = "Uri",
    cst_White_space = "White_space",
    cst_atkeyword = "atkeyword",
    cst_colon = "colon",
    cst_color_rgb_255_0_0$1 = "color: rgb(255,0,0)",
    cst_comma = "comma",
    cst_comment = "comment",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_tokenizer_$12 = "css_gen/src/css_tokenizer.ml",
    cst_delim = "delim",
    cst_dimension = "dimension",
    cst_eof = "eof",
    cst_error = "error",
    cst_function = "function",
    cst_hash = "hash",
    cst_ident = "ident",
    cst_lbracket = "lbracket",
    cst_lcurly = "lcurly",
    cst_lparen = "lparen",
    cst_number = "number",
    cst_percentage = "percentage",
    cst_rbracket = "rbracket",
    cst_rcurly = "rcurly",
    cst_rparen = "rparen",
    cst_semi_colon = "semi_colon",
    cst_string = "string",
    cst_uri = "uri",
    cst_white_space = "white_space",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$5 =
      '"\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6"',
    cst$6 = "'",
    cst$7 = "'\\'",
    cst$8 = "  ",
    cst$9 = ")({}[];:",
    cst$10 = cst$11,
    cst$4 = cst$11,
    cst$3 = "@",
    cst$2 = cst$11,
    cst$1 = "*/",
    cst$0 = "/*",
    cst = cst$11,
    error_source_003 = "css_gen/src/css_tokenizer.ml.Token.t",
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Assert_failure = global_data.Assert_failure,
    Core_Char = global_data.Core__Char,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen_Css_tokenizer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_css_gen_src_css_tokenizer_$12);
   caml_call2(Ppx_inline_test_lib[6], cst_css_gen$0, "css_tokenizer.ml");
   var
    cst_test_19abf2_2 = '"test\\19abf2\\2"',
    cst_010_xFFa_o123_n_u_12345_aa =
      '"\\010\\xFFa\\o123\\n\\\\\\u{12345}aa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa"',
    cst_url_http_wwww_google_com = 'url( "http://wwww.google.com")',
    cst_url_http_wwww_google_com$0 = "url('http://wwww.google.com')",
    cst_url_http_wwww_google_com$1 = "url('http://wwww.google.com' )",
    cst_url_http_wwww_google_com$2 = "url(  http://wwww.google.com )",
    cst_url_http_wwww_google_com$3 = 'url(  http://wwww.google."com )',
    cst_red = "red-->",
    cst_import_foo_bar = '@import "foo.bar";',
    cst_color_f00 = "color: #f00",
    cst_color_rgb_255_0_0 = cst_color_rgb_255_0_0$1,
    cst_color_rgb_255_0_0$0 = cst_color_rgb_255_0_0$1,
    cst_Foo_Bar = "'Foo '\"Bar\"';' '\\'' \"\\\"\"",
    cst_foo_bar = "'foo bar",
    cst_margin_0_5en = "margin: 0.5en",
    cst_margin_0_5em = "margin: 0.5em",
    cst_margin_0_5in = "margin: 0.5in",
    cst_line_height_3cm = "line-height: 3cm",
    cst_line_height_120 = "line-height: 120%",
    cst_grid_0_1_foo = "grid: 0 1 foo",
    cst_margin_0_5_in = "margin: 0.5-in",
    cst_margin_02e_20 = "margin: .02e+20",
    cst_margin_02e_20$0 = "margin: .02e-20",
    cst_margin_02E_20 = "margin: .02E+20",
    cst_margin_02E_20$0 = "margin: .02E-20",
    cst_margin_02E20 = "margin: .02E20",
    cst_margin_02e20 = "margin: .02e20",
    cst_foo_bar_baz = "-foo-bar: baz",
    cst_foo_bar$0 = "-foo-bar(",
    cst_foo_bar$1 = "@foo-bar",
    cst_foo_bar$2 = "@-foo-bar",
    cst_foo_bar$3 = "@--foo-bar",
    cst_var = "--var",
    cst_RGBA = "RGBA",
    _aW_ = [0, [0, [0, " ((Eof 0 0)) ", [0, cst$11]], [0, 8442, 8457, 8474]]],
    _aX_ = [0, 8442, 8448, 8475],
    _aY_ = [0, cst_eof],
    _aZ_ = [0, 8399, 8403, 8475],
    _a0_ = [0, 8442, 8475, 8475],
    _a1_ = [0, 8399, 8403, 8475],
    cst_css_gen_src_css_tokenizer_$10 = cst_css_gen_src_css_tokenizer_$12,
    _aQ_ =
      [0,
       [0,
        [0,
         " ((Rparen 0 1)(Lparen 1 1)(Lcurly 2 1)(Rcurly 3 1)(Lbracket 4 1)(Rbracket 5 1)(Semi_colon 6 1)(Colon 7 1)(Eof 8 0)) ",
         [0, cst$11]],
        [0, 8560, 8568, 8688]]],
    _aR_ = [0, 8545, 8551, 8689],
    _aS_ = [0, "simple_tokens"],
    _aT_ = [0, 8484, 8488, 8689],
    _aU_ = [0, 8560, 8689, 8689],
    _aV_ = [0, 8484, 8488, 8689],
    cst_css_gen_src_css_tokenizer_$9 = cst_css_gen_src_css_tokenizer_$12,
    _aK_ =
      [0,
       [0,
        [0,
         "\n        ((Ident 0 8)(Colon 8 1)(White_space 9 1)(Ident 10 3)(Eof 13 0))\n        ((Function 0 9)(Eof 9 0))\n        ((Atkeyword 0 8)(Eof 8 0))\n        ((Atkeyword 0 9)(Eof 9 0))\n        ((Atkeyword 0 10)(Eof 10 0))\n        ((Ident 0 5)(Eof 5 0))\n        ((Ident 0 4)(Eof 4 0))\n        ",
         [0, cst$11]],
        [0, 8906, 8914, 9202]]],
    _aL_ = [0, 8891, 8897, 9203],
    _aM_ = [0, cst_ident],
    _aN_ = [0, 8698, 8702, 9203],
    _aO_ = [0, 9192, 9203, 9203],
    _aP_ = [0, 8698, 8702, 9203],
    cst_css_gen_src_css_tokenizer_$8 = cst_css_gen_src_css_tokenizer_$12,
    _aE_ =
      [0,
       [0,
        [0, " ((White_space 0 2)(Eof 2 0)) ", [0, cst$11]],
        [0, 9264, 9279, 9313]]],
    _aF_ = [0, 9264, 9270, 9314],
    _aG_ = [0, "whitespace"],
    _aH_ = [0, 9212, 9216, 9314],
    _aI_ = [0, 9264, 9314, 9314],
    _aJ_ = [0, 9212, 9216, 9314],
    cst_css_gen_src_css_tokenizer_$7 = cst_css_gen_src_css_tokenizer_$12,
    _ay_ =
      [0,
       [0,
        [0,
         "\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n        ((Ident 0 11)(Colon 11 1)(White_space 12 1)(Dimension 13 3)(Eof 16 0))\n        ((Ident 0 11)(Colon 11 1)(White_space 12 1)(Percentage 13 4)(Eof 17 0))\n        ((Ident 0 4)(Colon 4 1)(White_space 5 1)(Number 6 1)(White_space 7 1)(Number 8 1)(White_space 9 1)(Ident 10 3)(Eof 13 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 6)(Eof 14 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 6)(Eof 14 0))\n        ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 6)(Eof 14 0))\n        ",
         [0, cst$11]],
        [0, 9752, 9760, 10794]]],
    _az_ = [0, 9737, 9743, 10795],
    _aA_ = [0, "numbers"],
    _aB_ = [0, 9323, 9327, 10795],
    _aC_ = [0, 10784, 10795, 10795],
    _aD_ = [0, 9323, 9327, 10795],
    cst_css_gen_src_css_tokenizer_$6 = cst_css_gen_src_css_tokenizer_$12,
    _as_ =
      [0,
       [0,
        [0,
         "\n        ((Error 0 8))\n        ((Error 0 1))\n        ((Error 0 3))\n        ",
         [0, cst$11]],
        [0, 10914, 10922, 11001]]],
    _at_ = [0, 10899, 10905, 11002],
    _au_ = [0, "badly_quoted"],
    _av_ = [0, 10804, 10808, 11002],
    _aw_ = [0, 10991, 11002, 11002],
    _ax_ = [0, 10804, 10808, 11002],
    cst_css_gen_src_css_tokenizer_$5 = cst_css_gen_src_css_tokenizer_$12,
    _am_ =
      [0,
       [0,
        [0,
         " ((String 0 6)(String 6 5)(String 11 3)(White_space 14 1)(String 15 4)(White_space 19 1)(String 20 4)(Eof 24 0)) ",
         [0, cst$11]],
        [0, 11098, 11106, 11223]]],
    _an_ = [0, 11083, 11089, 11224],
    _ao_ = [0, "quoted"],
    _ap_ = [0, 11011, 11015, 11224],
    _aq_ = [0, 11098, 11224, 11224],
    _ar_ = [0, 11011, 11015, 11224],
    cst_css_gen_src_css_tokenizer_$4 = cst_css_gen_src_css_tokenizer_$12,
    _ag_ =
      [0,
       [0,
        [0,
         "\n        ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Hash 7 4)(Eof 11 0))\n        ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Function 7 4)(Number 11 3)(Comma 14 1)(Number 15 1)(Comma 16 1)(Number 17 1)(Rparen 18 1)(Eof 19 0))\n        ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Function 7 4)(Number 11 3)(Comma 14 1)(Number 15 1)(Comma 16 1)(Number 17 1)(Rparen 18 1)(Eof 19 0))\n        ",
         [0, cst$11]],
        [0, 11379, 11387, 11770]]],
    _ah_ = [0, 11364, 11370, 11771],
    _ai_ = [0, "colors"],
    _aj_ = [0, 11233, 11237, 11771],
    _ak_ = [0, 11760, 11771, 11771],
    _al_ = [0, 11233, 11237, 11771],
    cst_css_gen_src_css_tokenizer_$3 = cst_css_gen_src_css_tokenizer_$12,
    _aa_ =
      [0,
       [0,
        [0,
         " ((Atkeyword 0 7)(White_space 7 1)(String 8 9)(Semi_colon 17 1)(Eof 18 0)) ",
         [0, cst$11]],
        [0, 11861, 11869, 11948]]],
    _ab_ = [0, 11846, 11852, 11949],
    _ac_ = [0, "import"],
    _ad_ = [0, 11780, 11784, 11949],
    _ae_ = [0, 11861, 11949, 11949],
    _af_ = [0, 11780, 11784, 11949],
    cst_css_gen_src_css_tokenizer_$2 = cst_css_gen_src_css_tokenizer_$12,
    _W_ =
      [0,
       [0,
        [0, " ((Ident 0 5)(Delim 5 1)(Eof 6 0)) ", [0, cst$11]],
        [0, 12015, 12030, 12069]]],
    _X_ = [0, 12015, 12021, 12070],
    _Y_ = [0, "red example"],
    _Z_ = [0, 11958, 11962, 12070],
    ___ = [0, 12015, 12070, 12070],
    _$_ = [0, 11958, 11962, 12070],
    cst_css_gen_src_css_tokenizer_$1 = cst_css_gen_src_css_tokenizer_$12,
    _Q_ =
      [0,
       [0,
        [0,
         "\n        ((Function 0 4)(White_space 4 1)(String 5 24)(Rparen 29 1)(Eof 30 0))\n        ((Function 0 4)(String 4 24)(Rparen 28 1)(Eof 29 0))\n        ((Function 0 4)(String 4 24)(White_space 28 1)(Rparen 29 1)(Eof 30 0))\n        ((Uri 0 30)(Eof 30 0))\n        ((Error 0 25))\n        ",
         [0, cst$11]],
        [0, 12357, 12365, 12650]]],
    _R_ = [0, 12342, 12348, 12651],
    _S_ = [0, "url"],
    _T_ = [0, 12079, 12083, 12651],
    _U_ = [0, 12640, 12651, 12651],
    _V_ = [0, 12079, 12083, 12651],
    cst_css_gen_src_css_tokenizer_$0 = cst_css_gen_src_css_tokenizer_$12,
    _K_ =
      [0,
       [0,
        [0,
         "\n        ((String 0 15)(Eof 15 0))\n        ((String 0 51)(Eof 51 0))\n        ((String 0 49)(Eof 49 0))\n        ",
         [0, cst$11]],
        [0, 12872, 12880, 12995]]],
    _L_ = [0, 12857, 12863, 12996],
    _M_ = [0, "escape"],
    _N_ = [0, 12660, 12664, 12996],
    _O_ = [0, 12985, 12996, 12996],
    _P_ = [0, 12660, 12664, 12996],
    cst_css_gen_src_css_tokenizer_ = cst_css_gen_src_css_tokenizer_$12,
    _H_ = [0, cst_css_gen_src_css_tokenizer_$12, 293, 2],
    _G_ = [0, cst_css_gen_src_css_tokenizer_$12, 270, 2],
    _F_ = [0, cst_css_gen_src_css_tokenizer_$12, 271, 2],
    cst_url = "url(",
    _E_ = [0, cst_css_gen_src_css_tokenizer_$12, 262, 2],
    _D_ = [0, cst_css_gen_src_css_tokenizer_$12, 263, 2],
    _C_ = [0, cst_css_gen_src_css_tokenizer_$12, 251, 2],
    _B_ = [0, cst_css_gen_src_css_tokenizer_$12, 252, 2],
    _A_ = [0, cst_css_gen_src_css_tokenizer_$12, 239, 2],
    _z_ = [0, cst_css_gen_src_css_tokenizer_$12, 202, 2],
    _y_ = [0, cst_css_gen_src_css_tokenizer_$12, 145, 2],
    _x_ = [0, cst_css_gen_src_css_tokenizer_$12, 55, 2],
    _a_ = [0, cst_Ident],
    _b_ = [0, cst_Function],
    _c_ = [0, cst_Atkeyword],
    _d_ = [0, cst_Hash],
    _e_ = [0, cst_String],
    _f_ = [0, cst_Uri],
    _g_ = [0, cst_Delim],
    _h_ = [0, cst_Number],
    _i_ = [0, cst_Percentage],
    _j_ = [0, cst_Dimension],
    _k_ = [0, cst_White_space],
    _l_ = [0, cst_Colon],
    _m_ = [0, cst_Semi_colon],
    _n_ = [0, cst_Comma],
    _o_ = [0, cst_Lbracket],
    _p_ = [0, cst_Rbracket],
    _q_ = [0, cst_Lparen],
    _r_ = [0, cst_Rparen],
    _s_ = [0, cst_Lcurly],
    _t_ = [0, cst_Rcurly],
    _u_ = [0, cst_Comment],
    _v_ = [0, cst_Eof],
    _w_ = [0, cst_Error],
    cst_Css_gen_Css_tokenizer_Erro = "Css_gen__Css_tokenizer.Error_happened",
    cst_css_gen_src_css_tokenizer_$11 = cst_css_gen_src_css_tokenizer_$12,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen_Css_tokenizer = cst_Css_gen_Css_tokenizer$0;
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _cu_ = sexp_004[1], _cv_ = caml_string_compare(_cu_, cst_atkeyword);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            if(0 <= _cv_){
                             if(0 >= _cv_) break f;
                             var _cw_ = caml_string_compare(_cu_, cst_lcurly);
                             if(0 <= _cw_){
                              if(0 >= _cw_) break q;
                              var _cx_ = caml_string_compare(_cu_, cst_rparen);
                              if(0 <= _cx_){
                               if(0 >= _cx_) break v;
                               if(! caml_string_notequal(_cu_, cst_semi_colon)) break u;
                               if(! caml_string_notequal(_cu_, cst_string)) break t;
                               if(! caml_string_notequal(_cu_, cst_uri)) break s;
                               if(caml_string_notequal(_cu_, cst_white_space)) break a;
                               break r;
                              }
                              if(! caml_string_notequal(_cu_, cst_lparen)) break p;
                              if(! caml_string_notequal(_cu_, cst_number)) break o;
                              if(! caml_string_notequal(_cu_, cst_percentage)) break n;
                              if(! caml_string_notequal(_cu_, cst_rbracket)) break m;
                              if(caml_string_notequal(_cu_, cst_rcurly)) break a;
                              break w;
                             }
                             var _cy_ = caml_string_compare(_cu_, cst_eof);
                             if(0 > _cy_){
                              if(! caml_string_notequal(_cu_, cst_colon)) break e;
                              if(! caml_string_notequal(_cu_, cst_comma)) break d;
                              if(! caml_string_notequal(_cu_, cst_comment)) break c;
                              if(! caml_string_notequal(_cu_, cst_delim)) break b;
                              if(caml_string_notequal(_cu_, cst_dimension)) break a;
                              break l;
                             }
                             if(0 >= _cy_) break k;
                             if(! caml_string_notequal(_cu_, cst_error)) break j;
                             if(! caml_string_notequal(_cu_, cst_function)) break i;
                             if(! caml_string_notequal(_cu_, cst_hash)) break h;
                             if(! caml_string_notequal(_cu_, cst_ident)) break g;
                             if(caml_string_notequal(_cu_, cst_lbracket)) break a;
                            }
                            else{
                             var _cz_ = caml_string_compare(_cu_, cst_Lbracket);
                             if(0 > _cz_){
                              var _cB_ = caml_string_compare(_cu_, cst_Dimension);
                              if(0 <= _cB_){
                               if(0 >= _cB_) break l;
                               if(! caml_string_notequal(_cu_, cst_Eof)) break k;
                               if(! caml_string_notequal(_cu_, cst_Error)) break j;
                               if(! caml_string_notequal(_cu_, cst_Function)) break i;
                               if(! caml_string_notequal(_cu_, cst_Hash)) break h;
                               if(caml_string_notequal(_cu_, cst_Ident)) break a;
                               break g;
                              }
                              if(! caml_string_notequal(_cu_, cst_Atkeyword)) break f;
                              if(! caml_string_notequal(_cu_, cst_Colon)) break e;
                              if(! caml_string_notequal(_cu_, cst_Comma)) break d;
                              if(! caml_string_notequal(_cu_, cst_Comment)) break c;
                              if(caml_string_notequal(_cu_, cst_Delim)) break a;
                              break b;
                             }
                             if(0 < _cz_){
                              var _cA_ = caml_string_compare(_cu_, cst_Rcurly);
                              if(0 <= _cA_){
                               if(0 >= _cA_) break w;
                               if(! caml_string_notequal(_cu_, cst_Rparen)) break v;
                               if(! caml_string_notequal(_cu_, cst_Semi_colon)) break u;
                               if(! caml_string_notequal(_cu_, cst_String)) break t;
                               if(! caml_string_notequal(_cu_, cst_Uri)) break s;
                               if(caml_string_notequal(_cu_, cst_White_space)) break a;
                               break r;
                              }
                              if(! caml_string_notequal(_cu_, cst_Lcurly)) break q;
                              if(! caml_string_notequal(_cu_, cst_Lparen)) break p;
                              if(! caml_string_notequal(_cu_, cst_Number)) break o;
                              if(! caml_string_notequal(_cu_, cst_Percentage)) break n;
                              if(caml_string_notequal(_cu_, cst_Rbracket)) break a;
                              break m;
                             }
                            }
                            return 14;
                           }
                           return 19;
                          }
                          return 17;
                         }
                         return 12;
                        }
                        return 4;
                       }
                       return 5;
                      }
                      return 10;
                     }
                     return 18;
                    }
                    return 16;
                   }
                   return 7;
                  }
                  return 8;
                 }
                 return 15;
                }
                return 9;
               }
               return 21;
              }
              return 22;
             }
             return 1;
            }
            return 3;
           }
           return 0;
          }
          return 2;
         }
         return 11;
        }
        return 13;
       }
       return 20;
      }
      return 6;
     }
     var _cC_ = sexp_004[1];
     if(! _cC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _cD_ = _cC_[1];
     if(0 !== _cD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _cE_ = _cD_[1], _cF_ = caml_string_compare(_cE_, cst_atkeyword);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           if(0 <= _cF_){
                            if(0 >= _cF_) break f;
                            var _cG_ = caml_string_compare(_cE_, cst_lcurly);
                            if(0 <= _cG_){
                             if(0 >= _cG_) break q;
                             var _cH_ = caml_string_compare(_cE_, cst_rparen);
                             if(0 <= _cH_){
                              if(0 >= _cH_) break v;
                              if(! caml_string_notequal(_cE_, cst_semi_colon)) break u;
                              if(! caml_string_notequal(_cE_, cst_string)) break t;
                              if(! caml_string_notequal(_cE_, cst_uri)) break s;
                              if(caml_string_notequal(_cE_, cst_white_space)) break a;
                              break r;
                             }
                             if(! caml_string_notequal(_cE_, cst_lparen)) break p;
                             if(! caml_string_notequal(_cE_, cst_number)) break o;
                             if(! caml_string_notequal(_cE_, cst_percentage)) break n;
                             if(! caml_string_notequal(_cE_, cst_rbracket)) break m;
                             if(caml_string_notequal(_cE_, cst_rcurly)) break a;
                             break w;
                            }
                            var _cI_ = caml_string_compare(_cE_, cst_eof);
                            if(0 > _cI_){
                             if(! caml_string_notequal(_cE_, cst_colon)) break e;
                             if(! caml_string_notequal(_cE_, cst_comma)) break d;
                             if(! caml_string_notequal(_cE_, cst_comment)) break c;
                             if(! caml_string_notequal(_cE_, cst_delim)) break b;
                             if(caml_string_notequal(_cE_, cst_dimension)) break a;
                             break l;
                            }
                            if(0 >= _cI_) break k;
                            if(! caml_string_notequal(_cE_, cst_error)) break j;
                            if(! caml_string_notequal(_cE_, cst_function)) break i;
                            if(! caml_string_notequal(_cE_, cst_hash)) break h;
                            if(! caml_string_notequal(_cE_, cst_ident)) break g;
                            if(caml_string_notequal(_cE_, cst_lbracket)) break a;
                           }
                           else{
                            var _cJ_ = caml_string_compare(_cE_, cst_Lbracket);
                            if(0 > _cJ_){
                             var _cL_ = caml_string_compare(_cE_, cst_Dimension);
                             if(0 <= _cL_){
                              if(0 >= _cL_) break l;
                              if(! caml_string_notequal(_cE_, cst_Eof)) break k;
                              if(! caml_string_notequal(_cE_, cst_Error)) break j;
                              if(! caml_string_notequal(_cE_, cst_Function)) break i;
                              if(! caml_string_notequal(_cE_, cst_Hash)) break h;
                              if(caml_string_notequal(_cE_, cst_Ident)) break a;
                              break g;
                             }
                             if(! caml_string_notequal(_cE_, cst_Atkeyword)) break f;
                             if(! caml_string_notequal(_cE_, cst_Colon)) break e;
                             if(! caml_string_notequal(_cE_, cst_Comma)) break d;
                             if(! caml_string_notequal(_cE_, cst_Comment)) break c;
                             if(caml_string_notequal(_cE_, cst_Delim)) break a;
                             break b;
                            }
                            if(0 < _cJ_){
                             var _cK_ = caml_string_compare(_cE_, cst_Rcurly);
                             if(0 <= _cK_){
                              if(0 >= _cK_) break w;
                              if(! caml_string_notequal(_cE_, cst_Rparen)) break v;
                              if(! caml_string_notequal(_cE_, cst_Semi_colon)) break u;
                              if(! caml_string_notequal(_cE_, cst_String)) break t;
                              if(! caml_string_notequal(_cE_, cst_Uri)) break s;
                              if(caml_string_notequal(_cE_, cst_White_space)) break a;
                              break r;
                             }
                             if(! caml_string_notequal(_cE_, cst_Lcurly)) break q;
                             if(! caml_string_notequal(_cE_, cst_Lparen)) break p;
                             if(! caml_string_notequal(_cE_, cst_Number)) break o;
                             if(! caml_string_notequal(_cE_, cst_Percentage)) break n;
                             if(caml_string_notequal(_cE_, cst_Rbracket)) break a;
                             break m;
                            }
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      case 13:
       return _n_;
      case 14:
       return _o_;
      case 15:
       return _p_;
      case 16:
       return _q_;
      case 17:
       return _r_;
      case 18:
       return _s_;
      case 19:
       return _t_;
      case 20:
       return _u_;
      case 21:
       return _v_;
      default: return _w_;
    }
   }
   function equal(x_007, x_008){
    return 0 === runtime.caml_int_compare(x_007, x_008) ? 1 : 0;
   }
   function source(t){return t[1];}
   function next_pos(t){return t[2] + t[3] | 0;}
   function is_next_eof(t){
    var _cs_ = caml_ml_string_length(t[1]), _ct_ = next_pos(t);
    return caml_call2(Core_Int[96][1], _ct_, _cs_);
   }
   function next_char(t){
    var _cr_ = next_pos(t);
    return runtime.caml_string_get(t[1], _cr_);
   }
   function reset(t, param){t[3] = param; return;}
   function consume_1(t){t[3] = t[3] + 1 | 0; return;}
   function one_char_token(t, tok){
    if(! caml_call2(Core_Int[96][3], t[3], 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
    consume_1(t);
    t[4] = tok;
    return 0;
   }
   var
    Error_happened =
      [248, cst_Css_gen_Css_tokenizer_Erro, runtime.caml_fresh_oo_id(0)];
   function error(t){
    t[4] = 22;
    throw caml_maybe_attach_backtrace(Error_happened, 0);
   }
   function accept(t, f){
    if(! is_next_eof(t) && caml_call1(f, next_char(t))){consume_1(t); return 1;}
    return 0;
   }
   function accept_char(t, ch){
    return accept(t, caml_call1(Core_Char[54], ch));
   }
   function accept_string(t, str){
    if(caml_call2(Core_Int[96][3], caml_ml_string_length(str), 0)) return 1;
    var pos = next_pos(t), str_len = caml_ml_string_length(str);
    return caml_call2
             (Core_Int[96][4], pos + str_len | 0, caml_ml_string_length(t[1]))
            ? 0
            : caml_call3
               (Core_String[69], t[1], pos, str)
              ? (t[3] = t[3] + str_len | 0, 1)
              : 0;
   }
   function expect(t, f){if(accept(t, f)) return; return error(t);}
   function expect_char(t, ch){
    return expect(t, caml_call1(Core_Char[54], ch));
   }
   function many(t, f){
    for(;;){
     if(! is_next_eof(t) && caml_call1(f, next_char(t))){consume_1(t); continue;}
     return;
    }
   }
   function many1(t, f){expect(t, f); return many(t, f);}
   function plus_or_minus(param){
    if(43 !== param && 45 !== param) return 0;
    return 1;
   }
   function nmstart(param){
    var _cq_ = param - 91 | 0;
    a:
    {
     if(5 < _cq_ >>> 0){
      if(57 < _cq_ + 26 >>> 0) break a;
     }
     else if(4 !== _cq_) break a;
     return 1;
    }
    return 0;
   }
   function nmchar(param){
    a:
    {
     if(65 <= param){
      var _cp_ = param - 91 | 0;
      if(5 < _cp_ >>> 0){if(32 <= _cp_) break a;} else if(4 !== _cp_) break a;
     }
     else
      if(48 <= param){if(58 <= param) break a;} else if(45 !== param) break a;
     return 1;
    }
    return 0;
   }
   function ident(t){
    return accept_char(t, 45)
            ? accept_char
               (t, 45)
              ? many(t, nmchar)
              : (expect(t, nmstart), many(t, nmchar))
            : (expect(t, nmstart), many(t, nmchar));
   }
   function ident_or_function(t){
    ident(t);
    return accept_char(t, 40) ? (t[4] = 1, 0) : (t[4] = 0, 0);
   }
   function is_whitespace(param){
    var _co_ = param - 9 | 0;
    a:
    {
     if(4 < _co_ >>> 0){if(23 !== _co_) break a;} else if(2 === _co_) break a;
     return 1;
    }
    return 0;
   }
   function start_ident(prefix, t){
    var cur = t[3], _cm_ = accept_string(t, prefix);
    if(_cm_)
     if(accept_char(t, 45))
      var _cn_ = accept_char(t, 45), b = _cn_ || accept(t, nmstart);
     else
      var b = accept(t, nmstart);
    else
     var b = _cm_;
    reset(t, cur);
    return b;
   }
   function _I_(t){
    var new_off = next_pos(t);
    t[2] = new_off;
    t[3] = 0;
    if(is_next_eof(t)){t[4] = 21; return 0;}
    var quote = next_char(t);
    if(is_whitespace(quote)){many(t, is_whitespace); t[4] = 10; return 0;}
    if(94 <= quote){
     var switcher = quote - 117 | 0;
     if(8 >= switcher >>> 0)
      switch(switcher){
        case 0:
         if(! caml_call2(Core_Int[96][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
         var _ch_ = next_char(t);
         if(! caml_call2(Core_Char[54], _ch_, 117))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
         if(! accept_string(t, cst_url)) return ident_or_function(t);
         var m = t[3];
         many(t, is_whitespace);
         var _ci_ = next_char(t);
         if(! caml_call2(Core_Char[54], _ci_, 34)){
          var _cj_ = next_char(t);
          if(! caml_call2(Core_Char[54], _cj_, 39)){
           many
            (t,
             function(c){
              var _ck_ = c - 32 | 0;
              if(9 >= _ck_ >>> 0)
               switch(_ck_){
                 case 0:
                 case 9:
                  return 0;
                 case 2:
                 case 7:
                 case 8:
                  return error(t);
               }
              return caml_call1(Core_Char[23], c) ? 1 : error(t);
             });
           many(t, is_whitespace);
           expect_char(t, 41);
           t[4] = 5;
           return 0;
          }
         }
         reset(t, m);
         t[4] = 1;
         return 0;
        case 6:
         return one_char_token(t, 18);
        case 8:
         return one_char_token(t, 19);
      }
    }
    else if(34 <= quote)
     switch(quote - 34 | 0){
       case 1:
        if(! caml_call2(Core_Int[96][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
        var _cf_ = next_char(t);
        if(! caml_call2(Core_Char[54], _cf_, 35))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
        consume_1(t);
        return accept(t, nmchar)
                ? (many1(t, nmchar), t[4] = 3, 0)
                : (t[4] = 6, 0);
       case 6:
        return one_char_token(t, 16);
       case 7:
        return one_char_token(t, 17);
       case 10:
        return one_char_token(t, 13);
       case 13:
        if(! caml_call2(Core_Int[96][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
        if(! accept_string(t, cst$0)){expect_char(t, 47); t[4] = 6; return 0;}
        for(;;){
         many(t, function(param){return 42 === param ? 0 : 1;});
         if(accept_string(t, cst$1)){t[4] = 20; return 0;}
         if(! accept_char(t, 42)) return error(t);
        }
        break;
       case 24:
        return one_char_token(t, 11);
       case 25:
        return one_char_token(t, 12);
       case 30:
        if(start_ident(cst$3, t)){
         if(! caml_call2(Core_Int[96][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
         var _cg_ = next_char(t);
         if(! caml_call2(Core_Char[54], _cg_, 64))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
         consume_1(t);
         ident(t);
         t[4] = 2;
         return 0;
        }
        break;
       case 57:
        return one_char_token(t, 14);
       case 59:
        return one_char_token(t, 15);
       case 0:
       case 5:
        if(! caml_call2(Core_Int[96][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
        var _ce_ = next_char(t);
        if(! caml_call2(Core_Char[54], _ce_, quote))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
        consume_1(t);
        for(;;){
         many
          (t,
           function(c){
            var _cl_ = c - 10 | 0;
            a:
            {
             if(3 < _cl_ >>> 0){
              if(82 !== _cl_) break a;
             }
             else if(1 === _cl_) break a;
             return 0;
            }
            return caml_call2(Core_Char[54], c, quote) ? 0 : 1;
           });
         if(! accept_char(t, 92)){expect_char(t, quote); t[4] = 4; return 0;}
         if(! accept_char(t, quote)){
          var c = next_char(t);
          a:
          {
           if(11 <= c){
            if(14 <= c) break a;
            switch(c - 11 | 0){
              case 0:
               break a;
              case 1: break;
              default: consume_1(t); accept_char(t, 10); continue;
            }
           }
           else if(10 > c) break a;
           consume_1(t);
           continue;
          }
          consume_1(t);
         }
        }
        break;
       case 9:
       case 11:
       case 12:
       case 14:
       case 15:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 23:
        var cur = t[3];
        accept(t, plus_or_minus);
        accept_char(t, 46);
        var b = accept(t, Core_Char[18]);
        reset(t, cur);
        if(b){
         if(! caml_call2(Core_Int[96][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
         accept(t, plus_or_minus);
         if(accept_char(t, 46))
          many1(t, Core_Char[18]);
         else{
          many1(t, Core_Char[18]);
          if(accept_char(t, 46)) many1(t, Core_Char[18]);
         }
         var mark = t[3];
         if
          (accept
            (t,
             function(param){
              if(69 !== param && 101 !== param) return 0;
              return 1;
             }))
          if(accept(t, plus_or_minus))
           many1(t, Core_Char[18]);
          else if(accept(t, Core_Char[18]))
           many(t, Core_Char[18]);
          else
           reset(t, mark);
         return accept_char(t, 37)
                 ? (t[4] = 8, 0)
                 : start_ident
                    (cst, t)
                   ? (ident(t), t[4] = 9, 0)
                   : (t[4] = 7, 0);
        }
        break;
     }
    return start_ident(cst$2, t)
            ? ident_or_function(t)
            : (consume_1(t), t[4] = 6, 0);
   }
   function next(t){
    if(equal(t[4], 22)) return 0;
    try{var _cc_ = _I_(t); return _cc_;}
    catch(_cd_){
     var _cb_ = caml_wrap_exception(_cd_);
     if(_cb_ === Error_happened) return 0;
     throw caml_maybe_attach_backtrace(_cb_, 0);
    }
   }
   function create(s){var t = [0, s, 0, 0, 10]; next(t); return t;}
   function slice(t){return [0, t[2], t[3]];}
   function current(t){return t[4];}
   function current_text(t){
    if(equal(t[4], 21)) return cst$4;
    var match = slice(t), len = match[2], pos = match[1];
    return caml_call3(Core_String[3], t[1], pos, len);
   }
   function _J_(param){
    function test(s){
     var t = create(s), acc = 0;
     for(;;){
      var
       match = slice(t),
       len = match[2],
       start = match[1],
       acc$0 = [0, [0, t[4], start, len], acc];
      if(! equal(t[4], 21) && ! equal(t[4], 22)){next(t); var acc = acc$0; continue;}
      var
       x_017 = caml_call1(Core_List[59], acc$0),
       _b__ =
         function(param){
          var
           arg2_013 = param[3],
           arg1_012 = param[2],
           arg0_011 = param[1],
           res0_014 = sexp_of_t(arg0_011),
           res1_015 = caml_call1(Core[389], arg1_012),
           res2_016 = caml_call1(Core[389], arg2_013);
          return [1, [0, res0_014, [0, res1_015, [0, res2_016, 0]]]];
         },
       _b$_ = caml_call2(Core[472], _b__, x_017),
       _ca_ = caml_call1(Core_Sexp[85], _b$_);
      return caml_call1(Core[32], _ca_);
     }
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$10 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bT_ =
        function(param){
         test(cst$10);
         var _b9_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$10[2], _b9_);
        },
      _bU_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aX_,
          _aW_),
      _bV_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _bU_], 0],
      _bW_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _bX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$10[3],
       cst_css_gen_src_css_tokenizer_$10,
       396,
       _a1_,
       _a0_,
       _aZ_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bX_,
       _bW_,
       _aY_,
       0,
       Inline_test_config,
       _bV_,
       _bT_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$9 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bO_ =
        function(param){
         test(cst$9);
         var _b8_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block$9[2], _b8_);
        },
      _bP_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aR_,
          _aQ_),
      _bQ_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _bP_], 0],
      _bR_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _bS_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block$9[3],
       cst_css_gen_src_css_tokenizer_$9,
       401,
       _aV_,
       _aU_,
       _aT_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bS_,
       _bR_,
       _aS_,
       0,
       Inline_test_config,
       _bQ_,
       _bO_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$8 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bJ_ =
        function(param){
         test(cst_foo_bar_baz);
         test(cst_foo_bar$0);
         test(cst_foo_bar$1);
         test(cst_foo_bar$2);
         test(cst_foo_bar$3);
         test(cst_var);
         test(cst_RGBA);
         var _b7_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
         return caml_call1(Ppx_expect_test_block$8[2], _b7_);
        },
      _bK_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aL_,
          _aK_),
      _bL_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _bK_], 0],
      _bM_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
      _bN_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
     caml_call14
      (Ppx_expect_test_block$8[3],
       cst_css_gen_src_css_tokenizer_$8,
       407,
       _aP_,
       _aO_,
       _aN_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bN_,
       _bM_,
       _aM_,
       0,
       Inline_test_config,
       _bL_,
       _bJ_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$7 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bE_ =
        function(param){
         test(cst$8);
         var _b6_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
         return caml_call1(Ppx_expect_test_block$7[2], _b6_);
        },
      _bF_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _aF_,
          _aE_),
      _bG_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _bF_], 0],
      _bH_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
      _bI_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
     caml_call14
      (Ppx_expect_test_block$7[3],
       cst_css_gen_src_css_tokenizer_$7,
       427,
       _aJ_,
       _aI_,
       _aH_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bI_,
       _bH_,
       _aG_,
       0,
       Inline_test_config,
       _bG_,
       _bE_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$6 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bz_ =
        function(param){
         test(cst_margin_0_5en);
         test(cst_margin_0_5em);
         test(cst_margin_0_5in);
         test(cst_line_height_3cm);
         test(cst_line_height_120);
         test(cst_grid_0_1_foo);
         test(cst_margin_0_5_in);
         test(cst_margin_02e_20);
         test(cst_margin_02e_20$0);
         test(cst_margin_02E_20);
         test(cst_margin_02E_20$0);
         test(cst_margin_02E20);
         test(cst_margin_02e20);
         var _b5_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
         return caml_call1(Ppx_expect_test_block$6[2], _b5_);
        },
      _bA_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _az_,
          _ay_),
      _bB_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _bA_], 0],
      _bC_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
      _bD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
     caml_call14
      (Ppx_expect_test_block$6[3],
       cst_css_gen_src_css_tokenizer_$6,
       432,
       _aD_,
       _aC_,
       _aB_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bD_,
       _bC_,
       _aA_,
       0,
       Inline_test_config,
       _bB_,
       _bz_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$5 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bu_ =
        function(param){
         test(cst_foo_bar);
         test(cst$6);
         test(cst$7);
         var _b4_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15);
         return caml_call1(Ppx_expect_test_block$5[2], _b4_);
        },
      _bv_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _at_,
          _as_),
      _bw_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 15), _bv_], 0],
      _bx_ = caml_call1(Ppx_expect_runtime_Types[4][1], 17),
      _by_ = caml_call1(Ppx_expect_runtime_Types[4][1], 16);
     caml_call14
      (Ppx_expect_test_block$5[3],
       cst_css_gen_src_css_tokenizer_$5,
       464,
       _ax_,
       _aw_,
       _av_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _by_,
       _bx_,
       _au_,
       0,
       Inline_test_config,
       _bw_,
       _bu_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$4 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bp_ =
        function(param){
         test(cst_Foo_Bar);
         var _b3_ = caml_call1(Ppx_expect_runtime_Types[4][1], 18);
         return caml_call1(Ppx_expect_test_block$4[2], _b3_);
        },
      _bq_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _an_,
          _am_),
      _br_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 18), _bq_], 0],
      _bs_ = caml_call1(Ppx_expect_runtime_Types[4][1], 20),
      _bt_ = caml_call1(Ppx_expect_runtime_Types[4][1], 19);
     caml_call14
      (Ppx_expect_test_block$4[3],
       cst_css_gen_src_css_tokenizer_$4,
       476,
       _ar_,
       _aq_,
       _ap_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bt_,
       _bs_,
       _ao_,
       0,
       Inline_test_config,
       _br_,
       _bp_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$3 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bk_ =
        function(param){
         test(cst_color_f00);
         test(cst_color_rgb_255_0_0);
         test(cst_color_rgb_255_0_0$0);
         var _b2_ = caml_call1(Ppx_expect_runtime_Types[4][1], 21);
         return caml_call1(Ppx_expect_test_block$3[2], _b2_);
        },
      _bl_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _ah_,
          _ag_),
      _bm_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 21), _bl_], 0],
      _bn_ = caml_call1(Ppx_expect_runtime_Types[4][1], 23),
      _bo_ = caml_call1(Ppx_expect_runtime_Types[4][1], 22);
     caml_call14
      (Ppx_expect_test_block$3[3],
       cst_css_gen_src_css_tokenizer_$3,
       482,
       _al_,
       _ak_,
       _aj_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bo_,
       _bn_,
       _ai_,
       0,
       Inline_test_config,
       _bm_,
       _bk_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$2 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bf_ =
        function(param){
         test(cst_import_foo_bar);
         var _b1_ = caml_call1(Ppx_expect_runtime_Types[4][1], 24);
         return caml_call1(Ppx_expect_test_block$2[2], _b1_);
        },
      _bg_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _ab_,
          _aa_),
      _bh_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 24), _bg_], 0],
      _bi_ = caml_call1(Ppx_expect_runtime_Types[4][1], 26),
      _bj_ = caml_call1(Ppx_expect_runtime_Types[4][1], 25);
     caml_call14
      (Ppx_expect_test_block$2[3],
       cst_css_gen_src_css_tokenizer_$2,
       494,
       _af_,
       _ae_,
       _ad_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bj_,
       _bi_,
       _ac_,
       0,
       Inline_test_config,
       _bh_,
       _bf_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$1 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _ba_ =
        function(param){
         test(cst_red);
         var _b0_ = caml_call1(Ppx_expect_runtime_Types[4][1], 27);
         return caml_call1(Ppx_expect_test_block$1[2], _b0_);
        },
      _bb_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _X_,
          _W_),
      _bc_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 27), _bb_], 0],
      _bd_ = caml_call1(Ppx_expect_runtime_Types[4][1], 29),
      _be_ = caml_call1(Ppx_expect_runtime_Types[4][1], 28);
     caml_call14
      (Ppx_expect_test_block$1[3],
       cst_css_gen_src_css_tokenizer_$1,
       500,
       _$_,
       ___,
       _Z_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _be_,
       _bd_,
       _Y_,
       0,
       Inline_test_config,
       _bc_,
       _ba_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _a7_ =
        function(param){
         test(cst_url_http_wwww_google_com);
         test(cst_url_http_wwww_google_com$0);
         test(cst_url_http_wwww_google_com$1);
         test(cst_url_http_wwww_google_com$2);
         test(cst_url_http_wwww_google_com$3);
         var _bZ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 30);
         return caml_call1(Ppx_expect_test_block$0[2], _bZ_);
        },
      _a8_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _R_,
          _Q_),
      _a9_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 30), _a8_], 0],
      _a__ = caml_call1(Ppx_expect_runtime_Types[4][1], 32),
      _a$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 31);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_css_gen_src_css_tokenizer_$0,
       505,
       _V_,
       _U_,
       _T_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _a$_,
       _a__,
       _S_,
       0,
       Inline_test_config,
       _a9_,
       _a7_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _a2_ =
        function(param){
         test(cst_test_19abf2_2);
         test(cst_010_xFFa_o123_n_u_12345_aa);
         test(cst$5);
         var _bY_ = caml_call1(Ppx_expect_runtime_Types[4][1], 33);
         return caml_call1(Ppx_expect_test_block[2], _bY_);
        },
      _a3_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _L_,
          _K_),
      _a4_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 33), _a3_], 0],
      _a5_ = caml_call1(Ppx_expect_runtime_Types[4][1], 35),
      _a6_ = caml_call1(Ppx_expect_runtime_Types[4][1], 34);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_css_gen_src_css_tokenizer_,
       521,
       _P_,
       _O_,
       _N_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _a6_,
       _a5_,
       _M_,
       0,
       Inline_test_config,
       _a4_,
       _a2_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_tokenizer_$11,
     389,
     0,
     4781,
     _J_);
   caml_call1(Ppx_inline_test_lib[7], cst_css_gen);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen_Css_tokenizer);
   var
    Css_gen_Css_tokenizer =
      [0,
       create,
       [0, t_of_sexp, sexp_of_t, equal],
       current,
       slice,
       current_text,
       source,
       next];
   runtime.caml_register_global
    (285, Css_gen_Css_tokenizer, cst_Css_gen_Css_tokenizer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen__Css_parser
//# unitInfo: Requires: Core, Core__List, Core__Or_error, Core__Sexp, Core__String, Core__Unit, Css_gen__Css_tokenizer, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Css_gen_Css_parser$0 = "Css_gen__Css_parser",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_parser_ml$5 = "css_gen/src/css_parser.ml",
    cst_flex_1_0_auto$2 = "flex: 1 0 auto";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = ";;;;;",
    value =
      "0 4px 8px 0 RGBA(var(--js-text-color-rgb), 0.12), 0 2px 4px 0 RGBA(var(--js-text-color-rgb), 0.08)",
    cst = " --> ",
    Css_gen_Css_tokenizer = global_data.Css_gen__Css_tokenizer,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Sexp = global_data.Core__Sexp,
    Core_Unit = global_data.Core__Unit,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen_Css_parser$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_css_gen_src_css_parser_ml$5);
   caml_call2(Ppx_inline_test_lib[6], cst_css_gen$0, "css_parser.ml");
   var
    cst_Expected_any = "Expected <any>",
    cst_Expected_value = "Expected <value>",
    cst_flex_1_0_auto = cst_flex_1_0_auto$2,
    cst_flex_1_0_auto$0 = "flex: 1 0 auto;",
    cst_background_5d9ab2_url_img_ =
      'background: #5d9ab2 url("img_tree.png") no-repeat top left;margin-left: 200px',
    cst_flex_1_0_auto_other_sa = "flex: 1 0 auto ;; other : sa ",
    cst_content =
      "content: '\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6'",
    _l_ =
      [0,
       "\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6"],
    cst_flex_1_0_auto$1 = cst_flex_1_0_auto$2,
    cst_content_Hello_World = "content: 'Hello World'",
    cst_content_foo = "content: foo;",
    cst_content_bar = "content: bar ",
    cst_x = "x",
    cst_3 = "3",
    cst_3in = "3in",
    cst_3$0 = "3%",
    cst_fff = "#fff",
    cst_1_0_auto = "1 0 auto",
    cst_Hello_World = "'Hello World'",
    cst_rgb_0_0_0 = "rgb(0,0,0)",
    _E_ = [0, "validate_value value"],
    _F_ =
      [0,
       [0,
        [0,
         "\n        Number\n        White_space\n        Dimension\n        White_space\n        Dimension\n        White_space\n        Number\n        White_space\n        Function\n        Function\n        Ident\n        Rparen\n        Comma\n        White_space\n        Number\n        Rparen\n        Comma\n        White_space\n        Number\n        White_space\n        Dimension\n        White_space\n        Dimension\n        White_space\n        Number\n        White_space\n        Function\n        Function\n        Ident\n        Rparen\n        Comma\n        White_space\n        Number\n        Rparen\n        ",
         [0, cst$1]],
        [0, 5058, 5066, 5659]]],
    _G_ = [0, 5043, 5049, 5660],
    _H_ =
      [0,
       [0,
        [0, ' ("validate_value value" (Ok ())) ', [0, cst$1]],
        [0, 5729, 5744, 5782]]],
    _I_ = [0, 5729, 5735, 5783],
    _J_ = [0, cst$1],
    _K_ = [0, 4845, 4849, 5783],
    _L_ = [0, 5729, 5783, 5783],
    _M_ = [0, 4845, 4849, 5783],
    cst_css_gen_src_css_parser_ml$3 = cst_css_gen_src_css_parser_ml$5,
    _y_ =
      [0,
       [0,
        [0,
         "\n        x --> (Ok ())\n        3 --> (Ok ())\n        3in --> (Ok ())\n        3% --> (Ok ())\n        #fff --> (Ok ())\n        1 0 auto --> (Ok ())\n        'Hello World' --> (Ok ())\n        rgb(0,0,0) --> (Ok ())\n        ",
         [0, cst$1]],
        [0, 6060, 6068, 6291]]],
    _z_ = [0, 6045, 6051, 6292],
    _A_ = [0, "values"],
    _B_ = [0, 5792, 5796, 6292],
    _C_ = [0, 6281, 6292, 6292],
    _D_ = [0, 5792, 5796, 6292],
    cst_css_gen_src_css_parser_ml$2 = cst_css_gen_src_css_parser_ml$5,
    _s_ =
      [0,
       [0,
        [0,
         '\n        flex: 1 0 auto --> (Ok (flex "1 0 auto"))\n        content: \'Hello World\' --> (Ok (content "\'Hello World\'"))\n        content: foo; --> (Error ("Unexpected token" (expected Eof) (got Semi_colon)))\n        content: bar  --> (Ok (content bar))\n        ',
         [0, cst$1]],
        [0, 6670, 6678, 6939]]],
    _t_ = [0, 6655, 6661, 6940],
    _u_ = [0, "declaration"],
    _v_ = [0, 6301, 6305, 6940],
    _w_ = [0, 6929, 6940, 6940],
    _x_ = [0, 6301, 6305, 6940],
    cst_css_gen_src_css_parser_ml$1 = cst_css_gen_src_css_parser_ml$5,
    _m_ =
      [0,
       [0,
        [0,
         "\n        content: '\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6' --> (Ok\n         (content\n          \"'\\226\\134\\144 \\226\\134\\145 \\226\\134\\146 \\226\\134\\147 \\226\\134\\148 \\226\\134\\149 \\226\\135\\170 \\226\\134\\185 \\226\\172\\136 \\226\\134\\152 \\226\\159\\190 \\226\\134\\182'\"))\n        \"\\226\\134\\144 \\226\\134\\145 \\226\\134\\146 \\226\\134\\147 \\226\\134\\148 \\226\\134\\149 \\226\\135\\170 \\226\\134\\185 \\226\\172\\136 \\226\\134\\152 \\226\\159\\190 \\226\\134\\182\"\n        ",
         [0, cst$1]],
        [0, 7248, 7256, 7700]]],
    _n_ = [0, 7233, 7239, 7701],
    _o_ = [0, "unicode"],
    _p_ = [0, 6949, 6953, 7701],
    _q_ = [0, 7690, 7701, 7701],
    _r_ = [0, 6949, 6953, 7701],
    cst_css_gen_src_css_parser_ml$0 = cst_css_gen_src_css_parser_ml$5,
    _f_ =
      [0,
       [0,
        [0,
         '\n        flex: 1 0 auto --> (Ok ((flex "1 0 auto")))\n        flex: 1 0 auto; --> (Ok ((flex "1 0 auto")))\n        background: #5d9ab2 url("img_tree.png") no-repeat top left;margin-left: 200px --> (Ok\n         ((background "#5d9ab2 url(\\"img_tree.png\\") no-repeat top left")\n          (margin-left 200px)))\n        ;;;;; --> (Ok ())\n        flex: 1 0 auto ;; other : sa  --> (Ok ((flex "1 0 auto") (other sa)))\n        ',
         [0, cst$1]],
        [0, 8082, 8090, 8512]]],
    _g_ = [0, 8067, 8073, 8513],
    _h_ = [0, "declaration list"],
    _i_ = [0, 7710, 7714, 8513],
    _j_ = [0, 8502, 8513, 8513],
    _k_ = [0, 7710, 7714, 8513],
    cst_css_gen_src_css_parser_ml = cst_css_gen_src_css_parser_ml$5,
    cst_s_sexp_arg_Or_error_t = "%s --> %{sexp:arg Or_error.t}\n",
    _c_ = [12, 10, 0],
    _d_ = [0, 0],
    cst_Expected_declaration = "Expected <declaration>",
    _a_ = [0, "got"],
    _b_ = [0, "expected"],
    cst_Unexpected_token = "Unexpected token",
    cst_css_gen_src_css_parser_ml$4 = cst_css_gen_src_css_parser_ml$5,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen_Css_parser = cst_Css_gen_Css_parser$0;
   function next(ct){
    for(;;){
     caml_call1(Css_gen_Css_tokenizer[7], ct);
     var _aY_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _aY_, 20)) return;
    }
   }
   function skip_white_space(ct){
    for(;;){
     var _aX_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _aX_, 10)) return;
     next(ct);
    }
   }
   function accept(ct, expected){
    var got = caml_call1(Css_gen_Css_tokenizer[3], ct);
    return caml_call2(Css_gen_Css_tokenizer[2][3], got, expected)
            ? (next(ct), 1)
            : 0;
   }
   function expect(ct, expected){
    var got = caml_call1(Css_gen_Css_tokenizer[3], ct);
    if(caml_call2(Css_gen_Css_tokenizer[2][3], got, expected))
     return next(ct);
    var
     _aU_ =
       [0,
        [1, [0, _a_, [0, caml_call1(Css_gen_Css_tokenizer[2][2], got), 0]]],
        0],
     _aV_ =
       [0,
        [1,
         [0, _b_, [0, caml_call1(Css_gen_Css_tokenizer[2][2], expected), 0]]],
        _aU_],
     _aW_ =
       [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unexpected_token), _aV_]];
    return caml_call1(Core[261], _aW_);
   }
   function many(ct, f){for(;;) if(! caml_call1(f, ct)) return;}
   function any(ct){
    switch(caml_call1(Css_gen_Css_tokenizer[3], ct)){
      case 1:
       next(ct);
       skip_white_space(ct);
       many(ct, any);
       expect(ct, 17);
       var res = 1;
       break;
      case 14:
       next(ct);
       skip_white_space(ct);
       expect_any(ct);
       expect(ct, 15);
       var res = 1;
       break;
      case 16:
       next(ct);
       skip_white_space(ct);
       expect_any(ct);
       expect(ct, 17);
       var res = 1;
       break;
      case 18:
       var res = 0; break;
      case 15:
      case 17:
      case 19:
       var res = 0; break;
      case 2:
      case 11:
      case 12:
       var res = 0; break;
      case 10:
      case 20:
      case 21:
      case 22:
       var res = 0; break;
      default: next(ct); var res = 1;
    }
    if(res) skip_white_space(ct);
    return res;
   }
   function expect_any(ct){
    if(any(ct)) return;
    var _aT_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_any);
    return caml_call1(Core[261], _aT_);
   }
   function value0(ct){
    var _aO_ = any(ct);
    if(_aO_)
     var _aP_ = _aO_;
    else{
     var
      _aQ_ =
        accept(ct, 18)
         ? (skip_white_space
            (ct),
           many
            (ct,
             function(ct){
              var _aR_ = value0(ct);
              if(_aR_)
               var _aS_ = _aR_;
              else{
               if(accept(ct, 12)){skip_white_space(ct); return 1;}
               var _aS_ = 0;
              }
              return _aS_;
             }),
           expect(ct, 19),
           skip_white_space(ct),
           1)
         : 0;
     if(_aQ_)
      var _aP_ = _aQ_;
     else{if(accept(ct, 2)){skip_white_space(ct); return 1;} var _aP_ = 0;}
    }
    return _aP_;
   }
   function expect_value(ct){
    var _aM_ = value0(ct) ? (many(ct, value0), 1) : 0;
    if(_aM_) return 0;
    var _aN_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_value);
    return caml_call1(Core[261], _aN_);
   }
   function declaration(ct){
    var
     match = caml_call1(Css_gen_Css_tokenizer[4], ct),
     ident_len = match[2],
     ident_start = match[1];
    if(! accept(ct, 0)) return 0;
    skip_white_space(ct);
    expect(ct, 11);
    skip_white_space(ct);
    var value_start = caml_call1(Css_gen_Css_tokenizer[4], ct)[1];
    expect_value(ct);
    var
     next_token_start = caml_call1(Css_gen_Css_tokenizer[4], ct)[1],
     source = caml_call1(Css_gen_Css_tokenizer[6], ct),
     _aK_ =
       caml_call3
        (Core_String[3],
         source,
         value_start,
         next_token_start - value_start | 0),
     _aL_ = caml_call2(Core_String[84], 0, _aK_);
    return [0,
            [0,
             caml_call3(Core_String[3], source, ident_start, ident_len),
             _aL_]];
   }
   function expect_declaration(ct){
    var match = declaration(ct);
    if(match){
     var match$0 = match[1], value = match$0[2], field = match$0[1];
     return [0, field, value];
    }
    var _aJ_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_declaration);
    return caml_call1(Core[261], _aJ_);
   }
   function expect_declaration_list(ct){
    var res = [0, 0];
    function add(kv){
     if(! kv) return;
     var match = kv[1], v = match[2], k = match[1];
     res[1] = [0, [0, k, v], res[1]];
     return;
    }
    skip_white_space(ct);
    add(declaration(ct));
    many
     (ct,
      function(ct){
       return accept(ct, 12)
               ? (skip_white_space(ct), add(declaration(ct)), 1)
               : 0;
      });
    return caml_call1(Core_List[59], res[1]);
   }
   function parse(parser_f, s){
    var ct = caml_call1(Css_gen_Css_tokenizer[1], s);
    for(;;){
     var _aH_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _aH_, 20)){
      var
       _aI_ =
         function(param){
          var res = caml_call1(parser_f, ct);
          expect(ct, 21);
          return res;
         };
      return caml_call2(Core_Or_error[37], 0, _aI_);
     }
     caml_call1(Css_gen_Css_tokenizer[7], ct);
    }
   }
   function validate_value(_aG_){return parse(expect_value, _aG_);}
   function parse_declaration_list(s){
    return parse(expect_declaration_list, s);
   }
   function test_parser(p, sexp_of_arg, s){
    var
     r = parse(p, s),
     _aE_ =
       [0,
        [2,
         0,
         [11,
          cst,
          [24,
           _d_,
           function(param, custom_printf_002){
            var
             _aF_ =
               caml_call2(Core_Or_error[17], sexp_of_arg, custom_printf_002);
            return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _aF_);
           },
           _c_]]],
        cst_s_sexp_arg_Or_error_t];
    return caml_call3(Core[258], _aE_, s, r);
   }
   function _e_(param){
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$3 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _af_ =
        function(param){
         var ct = caml_call1(Css_gen_Css_tokenizer[1], value);
         for(;;){
          var _ay_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
          if(caml_call2(Css_gen_Css_tokenizer[2][3], _ay_, 21)) break;
          var
           _az_ = caml_call1(Css_gen_Css_tokenizer[3], ct),
           _aA_ = caml_call1(Css_gen_Css_tokenizer[2][2], _az_);
          caml_call2(Core[256], 0, _aA_);
          caml_call1(Css_gen_Css_tokenizer[7], ct);
         }
         var _aB_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         caml_call1(Ppx_expect_test_block$3[2], _aB_);
         var
          x_003 = validate_value(value),
          _aC_ =
            [1,
             [0, _E_, [0, caml_call2(Core_Or_error[17], Core[620], x_003), 0]]];
         caml_call2(Core[256], 0, _aC_);
         var _aD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
         return caml_call1(Ppx_expect_test_block$3[2], _aD_);
        },
      _ag_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _G_,
          _F_),
      _ah_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _ag_], 0],
      _ai_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _I_,
          _H_),
      _aj_ =
        [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _ai_], _ah_],
      _ak_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3),
      _al_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
     caml_call14
      (Ppx_expect_test_block$3[3],
       cst_css_gen_src_css_parser_ml$3,
       202,
       _M_,
       _L_,
       _K_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _al_,
       _ak_,
       _J_,
       0,
       Inline_test_config,
       _aj_,
       _af_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$2 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _aa_ =
        function(param){
         var _av_ = Core_Unit[10];
         function test(_ax_){return test_parser(expect_value, _av_, _ax_);}
         test(cst_x);
         test(cst_3);
         test(cst_3in);
         test(cst_3$0);
         test(cst_fff);
         test(cst_1_0_auto);
         test(cst_Hello_World);
         test(cst_rgb_0_0_0);
         var _aw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
         return caml_call1(Ppx_expect_test_block$2[2], _aw_);
        },
      _ab_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _z_,
          _y_),
      _ac_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 4), _ab_], 0],
      _ad_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6),
      _ae_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5);
     caml_call14
      (Ppx_expect_test_block$2[3],
       cst_css_gen_src_css_parser_ml$2,
       249,
       _D_,
       _C_,
       _B_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _ae_,
       _ad_,
       _A_,
       0,
       Inline_test_config,
       _ac_,
       _aa_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$1 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _X_ =
        function(param){
         function _as_(param){
          var
           arg1_005 = param[2],
           arg0_004 = param[1],
           res0_006 = caml_call1(Core[558], arg0_004),
           res1_007 = caml_call1(Core[558], arg1_005);
          return [1, [0, res0_006, [0, res1_007, 0]]];
         }
         function test(_au_){
          return test_parser(expect_declaration, _as_, _au_);
         }
         test(cst_flex_1_0_auto$1);
         test(cst_content_Hello_World);
         test(cst_content_foo);
         test(cst_content_bar);
         var _at_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
         return caml_call1(Ppx_expect_test_block$1[2], _at_);
        },
      _Y_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _t_,
          _s_),
      _Z_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 7), _Y_], 0],
      ___ = caml_call1(Ppx_expect_runtime_Types[4][1], 9),
      _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8);
     caml_call14
      (Ppx_expect_test_block$1[3],
       cst_css_gen_src_css_parser_ml$1,
       272,
       _x_,
       _w_,
       _v_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _$_,
       ___,
       _u_,
       0,
       Inline_test_config,
       _Z_,
       _X_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _S_ =
        function(param){
         test_parser
          (expect_declaration,
           function(param){
            var
             arg1_009 = param[2],
             arg0_008 = param[1],
             res0_010 = caml_call1(Core[558], arg0_008),
             res1_011 = caml_call1(Core[558], arg1_009);
            return [1, [0, res0_010, [0, res1_011, 0]]];
           },
           cst_content);
         var _aq_ = caml_call1(Core_Sexp[86], _l_);
         caml_call1(Core[32], _aq_);
         var _ar_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
         return caml_call1(Ppx_expect_test_block$0[2], _ar_);
        },
      _T_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _n_,
          _m_),
      _U_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 10), _T_], 0],
      _V_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12),
      _W_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_css_gen_src_css_parser_ml$0,
       289,
       _r_,
       _q_,
       _p_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _W_,
       _V_,
       _o_,
       0,
       Inline_test_config,
       _U_,
       _S_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _N_ =
        function(param){
         function _am_(x_016){
          function _ap_(param){
           var
            arg1_013 = param[2],
            arg0_012 = param[1],
            res0_014 = caml_call1(Core[558], arg0_012),
            res1_015 = caml_call1(Core[558], arg1_013);
           return [1, [0, res0_014, [0, res1_015, 0]]];
          }
          return caml_call2(Core[472], _ap_, x_016);
         }
         function test(_ao_){
          return test_parser(expect_declaration_list, _am_, _ao_);
         }
         test(cst_flex_1_0_auto);
         test(cst_flex_1_0_auto$0);
         test(cst_background_5d9ab2_url_img_);
         test(cst$0);
         test(cst_flex_1_0_auto_other_sa);
         var _an_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
         return caml_call1(Ppx_expect_test_block[2], _an_);
        },
      _O_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _g_,
          _f_),
      _P_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 13), _O_], 0],
      _Q_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15),
      _R_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_css_gen_src_css_parser_ml,
       302,
       _k_,
       _j_,
       _i_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _R_,
       _Q_,
       _h_,
       0,
       Inline_test_config,
       _P_,
       _N_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_parser_ml$4,
     200,
     0,
     3724,
     _e_);
   caml_call1(Ppx_inline_test_lib[7], cst_css_gen);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen_Css_parser);
   var Css_gen_Css_parser = [0, validate_value, parse_declaration_list];
   runtime.caml_register_global
    (95, Css_gen_Css_parser, cst_Css_gen_Css_parser$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, CamlinternalLazy, Core, Core__Int, Core__List, Core__Option, Core__Or_error, Core__Percent, Core__Sexpable, Core__Stable, Core__String, Core__Time_ns, Css_gen__Css_parser, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$36 = "",
    cst$37 = " ",
    cst$39 = "%",
    cst$42 = "% ",
    cst$43 = "%,",
    cst$38 = ")",
    cst$41 = ",",
    cst$40 = ", ",
    cst_Auto$0 = "Auto",
    cst_Ch$0 = "Ch",
    cst_Css_gen$0 = "Css_gen",
    cst_Dashed = "Dashed",
    cst_Dotted = "Dotted",
    cst_Double = "Double",
    cst_Em$0 = "Em",
    cst_Em_float$0 = "Em_float",
    cst_HSLA$1 = "HSLA",
    cst_Hex$1 = "Hex",
    cst_Inherit$0 = "Inherit",
    cst_Initial$0 = "Initial",
    cst_LCHA$1 = "LCHA",
    cst_Line_through = "Line_through",
    cst_Name$1 = "Name",
    cst_None = "None",
    cst_Overline = "Overline",
    cst_Percent$0 = "Percent",
    cst_Pt$0 = "Pt",
    cst_Px$0 = "Px",
    cst_Px_float$0 = "Px_float",
    cst_RGBA$1 = "RGBA",
    cst_Raw$0 = "Raw",
    cst_Rem$0 = "Rem",
    cst_Solid = "Solid",
    cst_Underline = "Underline",
    cst_Var$1 = "Var",
    cst_Var_with_default$1 = "Var_with_default",
    cst_Vh$0 = "Vh",
    cst_Vw$0 = "Vw",
    cst_Wavy = "Wavy",
    cst_a$10 = "a",
    cst_auto$3 = "auto",
    cst_b$2 = "b",
    cst_black$1 = "black",
    cst_both$1 = "both",
    cst_bottom$1 = "bottom",
    cst_c$2 = "c",
    cst_center$4 = "center",
    cst_collapse$1 = "collapse",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_gen_ml$2 = "css_gen/src/css_gen.ml",
    cst_css_gen_src_css_gen_ml_Aut = "css_gen/src/css_gen.ml.Auto_or_length.t",
    cst_css_gen_src_css_gen_ml_Col$4 = "css_gen/src/css_gen.ml.Color.T.HSLA.t",
    cst_css_gen_src_css_gen_ml_Col$3 = "css_gen/src/css_gen.ml.Color.T.LCHA.t",
    cst_css_gen_src_css_gen_ml_Col$5 = "css_gen/src/css_gen.ml.Color.T.RGBA.t",
    cst_css_gen_src_css_gen_ml_Col$2 = "css_gen/src/css_gen.ml.Color.T.t",
    cst_css_gen_src_css_gen_ml_Len = "css_gen/src/css_gen.ml.Length.t",
    cst_css_gen_src_css_gen_ml_css =
      "css_gen/src/css_gen.ml.css_global_values",
    cst_css_gen_src_css_gen_ml_tex =
      "css_gen/src/css_gen.ml.text_decoration_line",
    cst_css_gen_src_css_gen_ml_tex$0 =
      "css_gen/src/css_gen.ml.text_decoration_style",
    cst_css_global_values$1 = "css_global_values",
    cst_dashed$1 = "dashed",
    cst_dotted$1 = "dotted",
    cst_double$1 = "double",
    cst_em$1 = "em",
    cst_flex$1 = "flex",
    cst_flex_end$2 = "flex-end",
    cst_flex_start$2 = "flex-start",
    cst_g$2 = "g",
    cst_h$5 = "h",
    cst_hidden$2 = "hidden",
    cst_l$5 = "l",
    cst_lch$1 = "lch(",
    cst_left$3 = "left",
    cst_none$6 = "none",
    cst_normal$5 = "normal",
    cst_nowrap$1 = "nowrap",
    cst_px$1 = "px",
    cst_r$2 = "r",
    cst_red$1 = "red",
    cst_right$3 = "right",
    cst_s$3 = "s",
    cst_solid$1 = "solid",
    cst_space_around$1 = "space-around",
    cst_space_between$1 = "space-between",
    cst_space_evenly$1 = "space-evenly",
    cst_stretch$1 = "stretch",
    cst_t$17 = "t",
    cst_top$1 = "top",
    cst_var$1 = "var(",
    cst_visible$1 = "visible",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$35 = '";"',
    cst$33 = cst$37,
    cst$34 = cst$37,
    cst$32 = cst$36,
    cst$31 = cst$37,
    cst$29 = cst$38,
    cst$30 = cst$38,
    cst$28 = cst$38,
    cst$26 = cst$39,
    cst$27 = cst$37,
    cst$25 = ": ",
    cst$24 = cst$36,
    cst$23 = cst$39,
    cst$2 = cst$38,
    cst$3 = cst$41,
    cst$4 = cst$41,
    cst$5 = cst$41,
    cst$6 = cst$38,
    cst$7 = cst$41,
    cst$8 = cst$41,
    cst$9 = cst$38,
    cst$10 = " / ",
    cst$11 = cst$37,
    cst$12 = cst$42,
    cst$13 = cst$38,
    cst$14 = cst$37,
    cst$15 = cst$42,
    cst$16 = cst$38,
    cst$17 = cst$43,
    cst$18 = cst$43,
    cst$19 = cst$41,
    cst$20 = "%)",
    cst$21 = cst$43,
    cst$22 = cst$41,
    err = [2, cst_css_gen_src_css_gen_ml_Col$2],
    t_sexp_grammar$2 = [8, cst_t$17, 0],
    cst = cst$38,
    cst$0 = cst$40,
    cst$1 = cst$38,
    error_source_007 = "css_gen/src/css_gen.ml.Stable.V1.t",
    error_source_036 = cst_css_gen_src_css_gen_ml_css,
    error_source_049 = cst_css_gen_src_css_gen_ml_css,
    error_source_078 = cst_css_gen_src_css_gen_ml_Col$5,
    error_source_098 = cst_css_gen_src_css_gen_ml_Col$4,
    error_source_118 = cst_css_gen_src_css_gen_ml_Col$3,
    error_source_145 = cst_css_gen_src_css_gen_ml_Col$2,
    error_source_159 = cst_css_gen_src_css_gen_ml_Col$2,
    error_source_207 = cst_css_gen_src_css_gen_ml_Len,
    error_source_239 = cst_css_gen_src_css_gen_ml_Len,
    error_source_289 = cst_css_gen_src_css_gen_ml_Aut,
    error_source_291 = cst_css_gen_src_css_gen_ml_Aut,
    error_source_298 = cst_css_gen_src_css_gen_ml_tex,
    error_source_300 = cst_css_gen_src_css_gen_ml_tex,
    error_source_307 = cst_css_gen_src_css_gen_ml_tex$0,
    error_source_309 = cst_css_gen_src_css_gen_ml_tex$0,
    Core = global_data.Core,
    Core_Percent = global_data.Core__Percent,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_Int = global_data.Core__Int,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Css_gen_Css_parser = global_data.Css_gen__Css_parser,
    Core_Or_error = global_data.Core__Or_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Stable = global_data.Core__Stable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_Sexpable = global_data.Core__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_css_gen_src_css_gen_ml$2);
   caml_call2(Ppx_inline_test_lib[6], cst_css_gen$0, "css_gen.ml");
   var
    cst_red = cst_red$1,
    cst_ff0000 = "#ff0000",
    cst_black = cst_black$1,
    _bc_ = [0, 3404198, 90],
    cst_red$0 = cst_red$1,
    cst_black$0 = cst_black$1,
    _bl_ = [0, -81804554],
    _bm_ = [0, 1],
    cst_content = "content",
    _bn_ =
      [0,
       [0,
        [0,
         '\n        flex: 1.000000 1.000000 auto;overflow: scroll\n        flex: 1.000000 1.000000 auto;overflow: scroll\n        display: inline-flex;flex-direction: column;flex-wrap: nowrap;border: dashed\n        display: inline-flex;flex-direction: column;flex-wrap: nowrap;border: dashed\n        color: rgb(100,100,100)\n        color: rgb(100,100,100)\n        color: hsl(100,75%,60%)\n        color: hsl(100,75%,60%)\n        content: ";"\n        content: ";"\n        ',
         [0, cst$36]],
        [0, 24832, 24840, 25301]]],
    _bo_ = [0, 24817, 24823, 25302],
    _bp_ = [0, "to_string_css -> of_string_css_exn -> to_string_css"],
    _bq_ = [0, 24106, 24110, 25302],
    _br_ = [0, 25291, 25302, 25302],
    _bs_ = [0, 24106, 24110, 25302],
    cst_css_gen_src_css_gen_ml$0 = cst_css_gen_src_css_gen_ml$2,
    _bd_ =
      [0,
       [0,
        [0,
         " background-image: linear-gradient(90deg, black 0.000000%, #ff0000 20.000000%, red 40.000000%, rgba(100,50,30,0.75) 100.000000%) ",
         [0, cst$36]],
        [0, 25909, 25917, 26050]]],
    _be_ = [0, 25894, 25900, 26051],
    _bf_ =
      [0,
       [0,
        [0,
         " background-image: radial-gradient(black 0.000000%, red 100.000000%) ",
         [0, cst$36]],
        [0, 26166, 26181, 26254]]],
    _bg_ = [0, 26166, 26172, 26255],
    _bh_ = [0, "gradients"],
    _bi_ = [0, 25311, 25315, 26255],
    _bj_ = [0, 26166, 26255, 26255],
    _bk_ = [0, 25311, 25315, 26255],
    cst_css_gen_src_css_gen_ml = cst_css_gen_src_css_gen_ml$2,
    cst_user_select = "user-select",
    cst_text = "text",
    cst_none$5 = cst_none$6,
    cst_auto$2 = cst_auto$3,
    cst_all = "all",
    cst_animation_delay = "animation-delay",
    cst_animation_iteration_count = "animation-iteration-count",
    cst_animation_timing_function = "animation-timing-function",
    cst_none$4 = cst_none$6,
    cst_backwards = "backwards",
    cst_both$0 = cst_both$1,
    cst_forwards = "forwards",
    cst_animation_fill_mode = "animation-fill-mode",
    cst_alternate_reverse = "alternate-reverse",
    cst_reverse = "reverse",
    cst_alternate = "alternate",
    cst_normal$4 = cst_normal$5,
    cst_animation_direction = "animation-direction",
    cst_s$2 = cst_s$3,
    cst_animation_duration = "animation-duration",
    cst_animation_name = "animation-name",
    cst_none$3 = cst_none$6,
    cst_both = cst_both$1,
    cst_vertical = "vertical",
    cst_horizontal = "horizontal",
    cst_resize = "resize",
    cst_align_self = "align-self",
    cst_order = "order",
    cst_flex$0 = cst_flex$1,
    cst_flex_wrap = "flex-wrap",
    cst_flex_direction = "flex-direction",
    cst_column_reverse = "column-reverse",
    cst_row_reverse = "row-reverse",
    cst_row = "row",
    cst_column = "column",
    cst_wrap = "wrap",
    cst_wrap_reverse = "wrap-reverse",
    cst_nowrap$0 = cst_nowrap$1,
    cst_align_items = "align-items",
    cst_align_content = "align-content",
    cst_justify_content = "justify-content",
    cst_center$3 = cst_center$4,
    cst_space_evenly$0 = cst_space_evenly$1,
    cst_flex_start$1 = cst_flex_start$2,
    cst_space_between$0 = cst_space_between$1,
    cst_flex_end$1 = cst_flex_end$2,
    cst_space_around$0 = cst_space_around$1,
    cst_center$2 = cst_center$4,
    cst_auto$1 = cst_auto$3,
    cst_flex_start$0 = cst_flex_start$2,
    cst_baseline = "baseline",
    cst_flex_end$0 = cst_flex_end$2,
    cst_stretch$0 = cst_stretch$1,
    cst_center$1 = cst_center$4,
    cst_space_evenly = cst_space_evenly$1,
    cst_flex_start = cst_flex_start$2,
    cst_space_between = cst_space_between$1,
    cst_flex_end = cst_flex_end$2,
    cst_normal$3 = cst_normal$5,
    cst_space_around = cst_space_around$1,
    cst_stretch = cst_stretch$1,
    cst_wavy = "wavy",
    cst_solid$0 = cst_solid$1,
    cst_double$0 = cst_double$1,
    cst_dashed$0 = cst_dashed$1,
    cst_dotted$0 = cst_dotted$1,
    cst_none$2 = cst_none$6,
    cst_underline = "underline",
    cst_line_through = "line-through",
    cst_overline = "overline",
    _ba_ = [0, cst$37],
    cst_text_decoration = "text-decoration",
    cst_border_radius = "border-radius",
    cst_collapse$0 = cst_collapse$1,
    cst_separate = "separate",
    cst_border_collapse = "border-collapse",
    cst_outline = "outline",
    _a$_ = [0, -57574468],
    _a__ = [0, 847852583],
    _a9_ = [0, 437082891],
    _a8_ = [0, 4202101],
    cst_border_left = "border-left",
    cst_border_bottom = "border-bottom",
    cst_border_top = "border-top",
    cst_border_right = "border-right",
    cst_border = "border",
    cst_none$1 = cst_none$6,
    cst_solid = cst_solid$1,
    cst_hidden$1 = cst_hidden$2,
    cst_ridge = "ridge",
    cst_double = cst_double$1,
    cst_dotted = cst_dotted$1,
    cst_dashed = cst_dashed$1,
    cst_inset = "inset",
    cst_groove = "groove",
    cst_outset = "outset",
    cst_none$0 = cst_none$6,
    cst_left$2 = cst_left$3,
    cst_right$2 = cst_right$3,
    cst_float = "float",
    cst_bottom$0 = cst_bottom$1,
    cst_super = "super",
    cst_middle = "middle",
    cst_top$0 = cst_top$1,
    cst_sub = "sub",
    cst_vertical_align = "vertical-align",
    cst_center$0 = cst_center$4,
    cst_left$1 = cst_left$3,
    cst_right$1 = cst_right$3,
    cst_horizontal_align = "horizontal-align",
    cst_center = cst_center$4,
    cst_left$0 = cst_left$3,
    cst_justify = "justify",
    cst_right$0 = cst_right$3,
    cst_text_align = "text-align",
    cst_radial_gradient = "radial-gradient(",
    cst_deg = "deg, ",
    cst_linear_gradient = "linear-gradient(",
    cst_url = "url(",
    cst_background_image = "background-image",
    _a7_ = [0, cst$40],
    cst_fill = "fill",
    cst_background_color = "background-color",
    cst_color = "color",
    cst_normal$2 = cst_normal$5,
    cst_small_caps = "small-caps",
    cst_font_variant = "font-variant",
    cst_bold = "bold",
    cst_lighter = "lighter",
    cst_normal$1 = cst_normal$5,
    cst_bolder = "bolder",
    cst_font_weight = "font-weight",
    cst_italic = "italic",
    cst_oblique = "oblique",
    cst_normal$0 = cst_normal$5,
    cst_font_style = "font-style",
    _a6_ = [0, cst$41],
    cst_font_family = "font-family",
    cst_pre = "pre",
    cst_nowrap = cst_nowrap$1,
    cst_normal = cst_normal$5,
    cst_pre_wrap = "pre-wrap",
    cst_pre_line = "pre-line",
    cst_white_space = "white-space",
    cst_opacity = "opacity",
    cst_z_index = "z-index",
    cst_auto$0 = cst_auto$3,
    cst_hidden$0 = cst_hidden$2,
    cst_scroll = "scroll",
    cst_visible$0 = cst_visible$1,
    cst_collapse = cst_collapse$1,
    cst_visible = cst_visible$1,
    cst_hidden = cst_hidden$2,
    cst_visibility = "visibility",
    cst_none = cst_none$6,
    cst_flex = cst_flex$1,
    cst_table = "table",
    cst_list_item = "list-item",
    cst_inline_grid = "inline-grid",
    cst_inline_flex = "inline-flex",
    cst_inline_block = "inline-block",
    cst_inline = "inline",
    cst_block = "block",
    cst_inline_table = "inline-table",
    cst_display = "display",
    cst_content_box = "content-box",
    cst_border_box = "border-box",
    cst_box_sizing = "box-sizing",
    cst_sticky = "sticky",
    cst_static = "static",
    cst_absolute = "absolute",
    cst_relative = "relative",
    cst_fixed = "fixed",
    cst_position = "position",
    _a5_ = [0, ";"],
    cst_auto = cst_auto$3,
    _a4_ = [0, cst_Auto$0],
    cst_em = cst_em$1,
    cst_rem = "rem",
    cst_vw = "vw",
    cst_vh = "vh",
    cst_px = cst_px$1,
    cst_pt = "pt",
    cst_em$0 = cst_em$1,
    cst_ch = "ch",
    cst_px$0 = cst_px$1,
    _ar_ = [0, cst_Em_float$0],
    _as_ = [0, cst_Rem$0],
    _at_ = [0, cst_Raw$0],
    _au_ = [0, cst_Vw$0],
    _av_ = [0, cst_Vh$0],
    _aw_ = [0, cst_Px$0],
    _ax_ = [0, cst_Pt$0],
    _ay_ = [0, cst_Em$0],
    _az_ = [0, cst_Ch$0],
    _aA_ = [0, cst_Px_float$0],
    _aB_ = [0, cst_Percent$0],
    cst_rgba = "rgba(",
    cst_rgb = "rgb(",
    cst_lch = cst_lch$1,
    cst_lch$0 = cst_lch$1,
    cst_hsla = "hsla(",
    cst_hsl = "hsl(",
    ___ = [0, cst_RGBA$1],
    _$_ = [0, cst_Name$1],
    _aa_ = [0, cst_LCHA$1],
    _ab_ = [0, cst_HSLA$1],
    _ac_ = [0, cst_Hex$1],
    cst_t$11 = cst_t$17,
    cst_Hex$0 = cst_Hex$1,
    cst_Name$0 = cst_Name$1,
    cst_LCHA$0 = cst_LCHA$1,
    cst_HSLA$0 = cst_HSLA$1,
    cst_RGBA$0 = cst_RGBA$1,
    cst_t$10 = cst_t$17,
    cst_a$9 = cst_a$10,
    cst_h$4 = cst_h$5,
    cst_c$1 = cst_c$2,
    cst_l$4 = cst_l$5,
    cst_css_gen_src_css_gen_ml_Col$1 = cst_css_gen_src_css_gen_ml_Col$3,
    _R_ = [0, cst_a$10],
    _S_ = [0, cst_h$5],
    _T_ = [0, cst_c$2],
    _U_ = [0, cst_l$5],
    cst_a$7 = cst_a$10,
    cst_h$2 = cst_h$5,
    cst_c = cst_c$2,
    cst_l$2 = cst_l$5,
    cst_a$6 = cst_a$10,
    cst_l$1 = cst_l$5,
    cst_s$1 = cst_s$3,
    cst_h$1 = cst_h$5,
    cst_css_gen_src_css_gen_ml_Col$0 = cst_css_gen_src_css_gen_ml_Col$4,
    _I_ = [0, cst_a$10],
    _J_ = [0, cst_l$5],
    _K_ = [0, cst_s$3],
    _L_ = [0, cst_h$5],
    cst_a$4 = cst_a$10,
    cst_l = cst_l$5,
    cst_s = cst_s$3,
    cst_h = cst_h$5,
    cst_a$3 = cst_a$10,
    cst_b$1 = cst_b$2,
    cst_g$1 = cst_g$2,
    cst_r$1 = cst_r$2,
    cst_css_gen_src_css_gen_ml_Col = cst_css_gen_src_css_gen_ml_Col$5,
    _z_ = [0, cst_a$10],
    _A_ = [0, cst_b$2],
    _B_ = [0, cst_g$2],
    _C_ = [0, cst_r$2],
    cst_a$1 = cst_a$10,
    cst_b = cst_b$2,
    cst_g = cst_g$2,
    cst_r = cst_r$2,
    _y_ = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
    cst_initial = "initial",
    cst_inherit = "inherit",
    cst_var = cst_var$1,
    cst_var$0 = cst_var$1,
    cst_Var_with_default$0 = cst_Var_with_default$1,
    cst_Var$0 = cst_Var$1,
    _w_ = [1, [0, cst_Initial$0, 0]],
    _x_ = [1, [0, cst_Inherit$0, 0]],
    cst_css_global_values$0 = cst_css_global_values$1,
    _f_ = [0, cst_Initial$0],
    _g_ = [0, cst_Inherit$0],
    _h_ = [0, cst_Var_with_default$1],
    _i_ = [0, cst_Var$1],
    cst_t = cst_t$17,
    cst_css_gen_src_css_gen_ml_7_4 = "css_gen/src/css_gen.ml:7:4",
    cst_t$0 = cst_t$17,
    cst_a = cst_a$10,
    cst_css_gen_src_css_gen_ml_18_ = "css_gen/src/css_gen.ml:18:34",
    cst_Var_with_default = cst_Var_with_default$1,
    cst_Var = cst_Var$1,
    cst_Initial = cst_Initial$0,
    cst_Inherit = cst_Inherit$0,
    cst_css_gen_src_css_gen_ml_15_ = "css_gen/src/css_gen.ml:15:2",
    cst_a$0 = cst_a$10,
    cst_css_global_values = cst_css_global_values$1,
    cst_css_gen_src_css_gen_ml_14_ = "css_gen/src/css_gen.ml:14:0",
    cst_a$2 = cst_a$10,
    cst_b$0 = cst_b$2,
    cst_g$0 = cst_g$2,
    cst_r$0 = cst_r$2,
    cst_t$1 = cst_t$17,
    cst_css_gen_src_css_gen_ml_39_ = "css_gen/src/css_gen.ml:39:6",
    cst_t$2 = cst_t$17,
    cst_a$5 = cst_a$10,
    cst_l$0 = cst_l$5,
    cst_s$0 = cst_s$3,
    cst_h$0 = cst_h$5,
    cst_t$3 = cst_t$17,
    cst_css_gen_src_css_gen_ml_51_ = "css_gen/src/css_gen.ml:51:6",
    cst_t$4 = cst_t$17,
    cst_a$8 = cst_a$10,
    cst_h$3 = cst_h$5,
    cst_c$0 = cst_c$2,
    cst_l$3 = cst_l$5,
    cst_t$5 = cst_t$17,
    cst_css_gen_src_css_gen_ml_63_ = "css_gen/src/css_gen.ml:63:6",
    cst_t$6 = cst_t$17,
    cst_t$7 = cst_t$17,
    cst_css_gen_src_css_gen_ml_80_ = "css_gen/src/css_gen.ml:80:8",
    cst_Hex = cst_Hex$1,
    cst_Name = cst_Name$1,
    cst_LCHA = cst_LCHA$1,
    cst_HSLA = cst_HSLA$1,
    cst_RGBA = cst_RGBA$1,
    cst_css_gen_src_css_gen_ml_75_ = "css_gen/src/css_gen.ml:75:6",
    cst_t$8 = cst_t$17,
    cst_css_gen_src_css_gen_ml_74_ = "css_gen/src/css_gen.ml:74:4",
    cst_t$9 = cst_t$17,
    cst_t$12 = cst_t$17,
    cst_css_gen_src_css_gen_ml_131 = "css_gen/src/css_gen.ml:131:6",
    cst_Vw = cst_Vw$0,
    cst_Vh = cst_Vh$0,
    cst_Px_float = cst_Px_float$0,
    cst_Px = cst_Px$0,
    cst_Pt = cst_Pt$0,
    cst_Percent = cst_Percent$0,
    cst_Em_float = cst_Em_float$0,
    cst_Em = cst_Em$0,
    cst_Rem = cst_Rem$0,
    cst_Ch = cst_Ch$0,
    cst_Raw = cst_Raw$0,
    cst_css_gen_src_css_gen_ml_120 = "css_gen/src/css_gen.ml:120:4",
    cst_t$13 = cst_t$17,
    cst_css_gen_src_css_gen_ml_119 = "css_gen/src/css_gen.ml:119:2",
    cst_t$14 = cst_t$17,
    cst_css_gen_src_css_gen_ml_157 = "css_gen/src/css_gen.ml:157:6",
    cst_Auto = cst_Auto$0,
    cst_css_gen_src_css_gen_ml_156 = "css_gen/src/css_gen.ml:156:4",
    cst_t$15 = cst_t$17,
    cst_css_gen_src_css_gen_ml_155 = "css_gen/src/css_gen.ml:155:2",
    cst_t$16 = cst_t$17,
    cst_left = cst_left$3,
    cst_top = cst_top$1,
    cst_bottom = cst_bottom$1,
    cst_right = cst_right$3,
    cst_overflow = "overflow",
    cst_overflow_x = "overflow-x",
    cst_overflow_y = "overflow-y",
    cst_font_size = "font-size",
    cst_line_height = "line-height",
    cst_width = "width",
    cst_min_width = "min-width",
    cst_max_width = "max-width",
    cst_height = "height",
    cst_min_height = "min-height",
    cst_max_height = "max-height",
    cst_padding_top = "padding-top",
    cst_padding_bottom = "padding-bottom",
    cst_padding_left = "padding-left",
    cst_padding_right = "padding-right",
    cst_margin_top = "margin-top",
    cst_margin_bottom = "margin-bottom",
    cst_margin_left = "margin-left",
    cst_margin_right = "margin-right",
    cst_row_gap = "row-gap",
    cst_column_gap = "column-gap",
    cst_border_spacing = "border-spacing",
    cst_css_gen_src_css_gen_ml$1 = cst_css_gen_src_css_gen_ml$2,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen = cst_Css_gen$0;
   function t_of_sexp(x_008){
    function _hb_(sexp_006){
     if(1 === sexp_006[0]){
      var _hc_ = sexp_006[1];
      if(_hc_){
       var _hd_ = _hc_[2];
       if(_hd_ && ! _hd_[2]){
        var
         arg1_003 = _hd_[1],
         arg0_002 = _hc_[1],
         res0_004 = caml_call1(Core_Stable[355], arg0_002),
         res1_005 = caml_call1(Core_Stable[355], arg1_003);
        return [0, res0_004, res1_005];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_007, 2, sexp_006);
    }
    return caml_call2(Core_Stable[343], _hb_, x_008);
   }
   function sexp_of_t(x_013){
    function _ha_(param){
     var
      arg1_010 = param[2],
      arg0_009 = param[1],
      res0_011 = caml_call1(Core_Stable[354], arg0_009),
      res1_012 = caml_call1(Core_Stable[354], arg1_010);
     return [1, [0, res0_011, [0, res1_012, 0]]];
    }
    return caml_call2(Core_Stable[342], _ha_, x_013);
   }
   function compare(a_014, b_015){
    function _g$_(a_016, b_017){
     var
      t_019 = a_016[2],
      t_018 = a_016[1],
      t_021 = b_017[2],
      t_020 = b_017[1],
      n = caml_call2(Core_Stable[442], t_018, t_020);
     return 0 === n ? caml_call2(Core_Stable[442], t_019, t_021) : n;
    }
    return caml_call3(Core_Stable[446], _g$_, a_014, b_015);
   }
   function equal(a_022, b_023){
    function _g9_(a_024, b_025){
     var
      t_027 = a_024[2],
      t_026 = a_024[1],
      t_029 = b_025[2],
      t_028 = b_025[1],
      _g__ = caml_call2(Core_Stable[456], t_026, t_028);
     return _g__ ? caml_call2(Core_Stable[456], t_027, t_029) : _g__;
    }
    return caml_call3(Core_Stable[460], _g9_, a_022, b_023);
   }
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[3], [0, Core_Stable[99], [0, Core_Stable[99], 0]]),
    _b_ = caml_call1(Core_Stable[203], _a_),
    _c_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _b_], 0],
    _d_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_7_4),
    group = caml_call2(Bin_prot_Shape[2], _d_, _c_),
    _e_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _e_), 0);
   function bin_size_t(v){
    function _g6_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _g7_ = caml_call1(Core_Stable[3], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _g7_),
      _g8_ = caml_call1(Core_Stable[3], v2);
     return caml_call2(Bin_prot_Common[23], size, _g8_);
    }
    return caml_call2(Core_Stable[18], _g6_, v);
   }
   function bin_write_t(buf, pos, v){
    function _g5_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Core_Stable[101], buf, pos, v1);
     return caml_call3(Core_Stable[101], buf, pos$0, v2);
    }
    return caml_call4(Core_Stable[205], _g5_, buf, pos, v);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    function _g4_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[104], buf, pos_ref),
      v2 = caml_call2(Core_Stable[104], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call3(caml_call1(Core_Stable[209], _g4_), buf, pos_ref, vint);
   }
   function bin_read_t$0(buf, pos_ref){
    function _g3_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[104], buf, pos_ref),
      v2 = caml_call2(Core_Stable[104], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call2(caml_call1(Core_Stable[208], _g3_), buf, pos_ref);
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function css_global_values_of_sexp(of_a_030, sexp_034){
    if(0 === sexp_034[0]){
     var atom_032 = sexp_034[1];
     return caml_string_notequal(atom_032, cst_Inherit$0)
             ? caml_string_notequal
                (atom_032, cst_Initial$0)
               ? caml_string_notequal
                  (atom_032, cst_Var$1)
                 ? caml_string_notequal
                    (atom_032, cst_Var_with_default$1)
                   ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                   : caml_call2
                     (Sexplib0_Sexp_conv_error[27], error_source_036, sexp_034)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_036, sexp_034)
               : 418396260
             : -72987685;
    }
    var _g0_ = sexp_034[1];
    if(! _g0_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_036, sexp_034);
    var match = _g0_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_036, sexp_034);
    var sexp_args_035 = _g0_[2], atom_032$0 = match[1];
    if(! caml_string_notequal(atom_032$0, cst_Inherit$0))
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_036, sexp_034);
    if(! caml_string_notequal(atom_032$0, cst_Initial$0))
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_036, sexp_034);
    if(! caml_string_notequal(atom_032$0, cst_Var$1)){
     if(sexp_args_035 && ! sexp_args_035[2]){
      var
       arg0_046 = sexp_args_035[1],
       res0_047 = caml_call1(Core[559], arg0_046);
      return [0, 4298439, res0_047];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[26],
              error_source_036,
              atom_032$0,
              sexp_034);
    }
    if(caml_string_notequal(atom_032$0, cst_Var_with_default$1))
     return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
    if(sexp_args_035 && ! sexp_args_035[2]){
     var arg0_043 = sexp_args_035[1];
     a:
     {
      if(1 === arg0_043[0]){
       var _g1_ = arg0_043[1];
       if(_g1_){
        var _g2_ = _g1_[2];
        if(_g2_ && ! _g2_[2]){
         var
          arg1_039 = _g2_[1],
          arg0_038 = _g1_[1],
          res0_040 = caml_call1(Core[559], arg0_038),
          res1_041 = caml_call1(of_a_030, arg1_039),
          res0_044 = [0, res0_040, res1_041];
         break a;
        }
       }
      }
      var
       res0_044 =
         caml_call3
          (Sexplib0_Sexp_conv_error[4], error_source_036, 2, arg0_043);
     }
     return [0, 94775808, res0_044];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_036,
             atom_032$0,
             sexp_034);
   }
   function css_global_values_of_sexp$0(of_a_030, sexp_048){
    try{var _gY_ = css_global_values_of_sexp(of_a_030, sexp_048); return _gY_;
    }
    catch(_gZ_){
     var _gX_ = caml_wrap_exception(_gZ_);
     if(_gX_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_049, sexp_048);
     throw caml_maybe_attach_backtrace(_gX_, 0);
    }
   }
   function sexp_of_css_global_values(of_a_050, param){
    if(typeof param === "number") return 418396260 <= param ? _f_ : _g_;
    if(94775808 <= param[1]){
     var
      v_052 = param[2],
      arg1_054 = v_052[2],
      arg0_053 = v_052[1],
      res0_055 = caml_call1(Core[558], arg0_053),
      res1_056 = caml_call1(of_a_050, arg1_054);
     return [1, [0, _h_, [0, [1, [0, res0_055, [0, res1_056, 0]]], 0]]];
    }
    var v_051 = param[2];
    return [1, [0, _i_, [0, caml_call1(Core[558], v_051), 0]]];
   }
   var
    _j_ = caml_call1(Bin_shape[3][1], cst_a),
    _k_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_18_),
    _l_ = [0, caml_call2(Bin_prot_Shape[11], _k_, _j_), 0],
    _m_ = [0, caml_call1(Bin_prot_Shape[3], [0, Core[541], _l_])],
    _n_ = [0, caml_call2(Bin_prot_Shape[6], cst_Var_with_default, _m_), 0],
    _o_ = [0, caml_call2(Bin_prot_Shape[6], cst_Var, [0, Core[541]]), _n_],
    _p_ = [0, caml_call2(Bin_prot_Shape[6], cst_Initial, 0), _o_],
    _q_ = [0, caml_call2(Bin_prot_Shape[6], cst_Inherit, 0), _p_],
    _r_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_15_),
    _s_ = caml_call2(Bin_prot_Shape[8], _r_, _q_),
    _t_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _u_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_css_global_values), _t_, _s_],
       0],
    _v_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_14_),
    group$0 = caml_call2(Bin_prot_Shape[2], _v_, _u_);
   function bin_shape_css_global_values(a){
    var _gW_ = caml_call1(Bin_shape[2][1], cst_css_global_values$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _gW_), [0, a, 0]);
   }
   function compare_css_global_values(cmp_a, a_057, b_058){
    if(a_057 === b_058) return 0;
    if(typeof a_057 === "number"){
     if(418396260 <= a_057){
      if(typeof b_058 === "number" && 418396260 === b_058) return 0;
     }
     else if(typeof b_058 === "number" && -72987685 === b_058) return 0;
    }
    else
     if(94775808 <= a_057[1]){
      if(typeof b_058 !== "number" && 94775808 === b_058[1]){
       var
        right_062 = b_058[2],
        left_061 = a_057[2],
        t_064 = left_061[2],
        t_063 = left_061[1],
        t_066 = right_062[2],
        t_065 = right_062[1],
        n = caml_call2(Core[551], t_063, t_065);
       return 0 === n ? caml_call2(cmp_a, t_064, t_066) : n;
      }
     }
     else if(typeof b_058 !== "number" && 4298439 === b_058[1]){
      var right_060 = b_058[2], left_059 = a_057[2];
      return caml_call2(Core[551], left_059, right_060);
     }
    return caml_compare(a_057, b_058);
   }
   function css_global_values_sexp_grammar(a_sexp_grammar){
    return [3,
            [0,
             1,
             [0,
              _x_,
              [0,
               _w_,
               [0,
                [1, [0, cst_Var$0, [0, [0, Core[560], 0]]]],
                [0,
                 [1,
                  [0,
                   cst_Var_with_default$0,
                   [0, [0, [2, [0, Core[560], [0, a_sexp_grammar, 0]]], 0]]]],
                 0]]]]]];
   }
   function global_to_string_css(t, to_string_css){
    if(typeof t === "number")
     return 418396260 <= t ? cst_initial : cst_inherit;
    if(94775808 <= t[1]){
     var
      match = t[2],
      default$0 = match[2],
      var$0 = match[1],
      _gQ_ = [0, caml_call1(Ppx_string_runtime[1][2], cst), 0],
      _gR_ = [0, caml_call1(to_string_css, default$0), _gQ_],
      _gS_ =
        [0, var$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$0), _gR_]],
      _gT_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_var), _gS_];
     return caml_call1(Ppx_string_runtime[1][4], _gT_);
    }
    var
     var$1 = t[2],
     _gU_ = [0, var$1, [0, caml_call1(Ppx_string_runtime[1][2], cst$1), 0]],
     _gV_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_var$0), _gU_];
    return caml_call1(Ppx_string_runtime[1][4], _gV_);
   }
   var
    float_to_string_with_fixed =
      [0, function(digits, f){return caml_call3(Core[265], _y_, digits, f);}],
    Private = [0, float_to_string_with_fixed];
   function f2s(digits, f){return caml_call2(Private[1][1], digits, f);}
   function t_of_sexp$0(x_079){
    function _gK_(param){
     var
      _gO_ = param[2],
      _gP_ = _gO_[2],
      a = _gP_[2][1],
      b = _gP_[1],
      g = _gO_[1],
      r = param[1];
     return [0, r, g, b, a];
    }
    var _gL_ = 0;
    function _gM_(param){
     return caml_string_notequal(param, cst_a$10)
             ? caml_string_notequal
                (param, cst_b$2)
               ? caml_string_notequal
                  (param, cst_g$2)
                 ? caml_string_notequal(param, cst_r$2) ? -1 : 0
                 : 1
               : 2
             : 3;
    }
    var _gN_ = [0, cst_a$1, 1, caml_call1(Core[516], Core_Percent[9]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_078,
             [0,
              cst_r,
              1,
              Core[390],
              [0, cst_g, 1, Core[390], [0, cst_b, 1, Core[390], _gN_]]],
             _gM_,
             _gL_,
             _gK_,
             x_079);
   }
   function sexp_of_t$0(param){
    var
     a_087 = param[4],
     b_085 = param[3],
     g_083 = param[2],
     r_081 = param[1],
     arg_088 = caml_call2(Core[515], Core_Percent[10], a_087),
     bnds_080 = [0, [1, [0, _z_, [0, arg_088, 0]]], 0],
     arg_086 = caml_call1(Core[389], b_085),
     bnds_080$0 = [0, [1, [0, _A_, [0, arg_086, 0]]], bnds_080],
     arg_084 = caml_call1(Core[389], g_083),
     bnds_080$1 = [0, [1, [0, _B_, [0, arg_084, 0]]], bnds_080$0],
     arg_082 = caml_call1(Core[389], r_081),
     bnds_080$2 = [0, [1, [0, _C_, [0, arg_082, 0]]], bnds_080$1];
    return [1, bnds_080$2];
   }
   var
    _D_ = [0, [0, cst_a$2, caml_call1(Core[499], Core_Percent[16])], 0],
    _E_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_r$0, Core[372]],
         [0, [0, cst_g$0, Core[372]], [0, [0, cst_b$0, Core[372]], _D_]]]),
    _F_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _E_], 0],
    _G_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_39_),
    group$1 = caml_call2(Bin_prot_Shape[2], _G_, _F_),
    _H_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _H_), 0);
   function bin_size_t$0(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _gG_ = caml_call1(Core[373], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _gG_),
     _gH_ = caml_call1(Core[373], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _gH_),
     _gI_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _gI_),
     _gJ_ = caml_call2(Core[500], Core_Percent[12], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _gJ_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[375], buf, pos, v1),
     pos$1 = caml_call3(Core[375], buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3);
    return caml_call4(Core[502], Core_Percent[13], buf, pos$2, v4);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_css_gen_src_css_gen_ml_Col, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_r = caml_call2(Core[378], buf, pos_ref),
     v_g = caml_call2(Core[378], buf, pos_ref),
     v_b = caml_call2(Core[378], buf, pos_ref),
     v_a = caml_call2(caml_call1(Core[505], Core_Percent[14]), buf, pos_ref);
    return [0, v_r, v_g, v_b, v_a];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function compare$0(a_089, b_090){
    if(a_089 === b_090) return 0;
    var n = caml_call2(Core[382], a_089[1], b_090[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[382], a_089[2], b_090[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[382], a_089[3], b_090[3]);
    if(0 !== n$1) return n$1;
    var _gD_ = b_090[4], _gE_ = a_089[4];
    function _gF_(a_091, b_092){
     return caml_call2(Core_Percent[27], a_091, b_092);
    }
    return caml_call3(Core[509], _gF_, _gE_, _gD_);
   }
   function equal$0(a_093, b_094){
    if(a_093 === b_094) return 1;
    var _gw_ = caml_call2(Core[384], a_093[1], b_094[1]);
    if(_gw_){
     var _gx_ = caml_call2(Core[384], a_093[2], b_094[2]);
     if(_gx_){
      var _gy_ = caml_call2(Core[384], a_093[3], b_094[3]);
      if(_gy_){
       var
        _gz_ = b_094[4],
        _gA_ = a_093[4],
        _gB_ =
          function(a_095, b_096){
           return caml_call2(Core_Percent[26], a_095, b_096);
          };
       return caml_call3(Core[511], _gB_, _gA_, _gz_);
      }
      var _gC_ = _gy_;
     }
     else
      var _gC_ = _gx_;
    }
    else
     var _gC_ = _gw_;
    return _gC_;
   }
   var
    t_sexp_grammar =
      [9,
       [246,
        function(param){
         var
          _gv_ =
            [0,
             [1,
              [0, cst_a$3, 1, [0, caml_call1(Core[517], Core_Percent[11]), 0]]],
             0];
         return [2,
                 [2,
                  [0,
                   0,
                   [0,
                    [1, [0, cst_r$1, 1, [0, Core[391], 0]]],
                    [0,
                     [1, [0, cst_g$1, 1, [0, Core[391], 0]]],
                     [0, [1, [0, cst_b$1, 1, [0, Core[391], 0]]], _gv_]]]]]];
        }]];
   function create(r, g, b, a, param){return [0, r, g, b, a];}
   function t_of_sexp$1(x_099){
    function _gp_(param){
     var
      _gt_ = param[2],
      _gu_ = _gt_[2],
      a = _gu_[2][1],
      l = _gu_[1],
      s = _gt_[1],
      h = param[1];
     return [0, h, s, l, a];
    }
    var _gq_ = 0;
    function _gr_(param){
     return caml_string_notequal(param, cst_a$10)
             ? caml_string_notequal
                (param, cst_h$5)
               ? caml_string_notequal
                  (param, cst_l$5)
                 ? caml_string_notequal(param, cst_s$3) ? -1 : 1
                 : 2
               : 0
             : 3;
    }
    var _gs_ = [0, cst_a$4, 1, caml_call1(Core[516], Core_Percent[9]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_098,
             [0,
              cst_h,
              1,
              Core[390],
              [0,
               cst_s,
               1,
               Core_Percent[9],
               [0, cst_l, 1, Core_Percent[9], _gs_]]],
             _gr_,
             _gq_,
             _gp_,
             x_099);
   }
   function sexp_of_t$1(param){
    var
     a_107 = param[4],
     l_105 = param[3],
     s_103 = param[2],
     h_101 = param[1],
     arg_108 = caml_call2(Core[515], Core_Percent[10], a_107),
     bnds_100 = [0, [1, [0, _I_, [0, arg_108, 0]]], 0],
     arg_106 = caml_call1(Core_Percent[10], l_105),
     bnds_100$0 = [0, [1, [0, _J_, [0, arg_106, 0]]], bnds_100],
     arg_104 = caml_call1(Core_Percent[10], s_103),
     bnds_100$1 = [0, [1, [0, _K_, [0, arg_104, 0]]], bnds_100$0],
     arg_102 = caml_call1(Core[389], h_101),
     bnds_100$2 = [0, [1, [0, _L_, [0, arg_102, 0]]], bnds_100$1];
    return [1, bnds_100$2];
   }
   var
    _M_ = [0, [0, cst_a$5, caml_call1(Core[499], Core_Percent[16])], 0],
    _N_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_h$0, Core[372]],
         [0,
          [0, cst_s$0, Core_Percent[16]],
          [0, [0, cst_l$0, Core_Percent[16]], _M_]]]),
    _O_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _N_], 0],
    _P_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_51_),
    group$2 = caml_call2(Bin_prot_Shape[2], _P_, _O_),
    _Q_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _Q_), 0);
   function bin_size_t$1(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _gl_ = caml_call1(Core[373], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _gl_),
     _gm_ = caml_call1(Core_Percent[12], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _gm_),
     _gn_ = caml_call1(Core_Percent[12], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _gn_),
     _go_ = caml_call2(Core[500], Core_Percent[12], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _go_);
   }
   function bin_write_t$1(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[375], buf, pos, v1),
     pos$1 = caml_call3(Core_Percent[13], buf, pos$0, v2),
     pos$2 = caml_call3(Core_Percent[13], buf, pos$1, v3);
    return caml_call4(Core[502], Core_Percent[13], buf, pos$2, v4);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_css_gen_src_css_gen_ml_Col$0,
             pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var
     v_h = caml_call2(Core[378], buf, pos_ref),
     v_s = caml_call2(Core_Percent[14], buf, pos_ref),
     v_l = caml_call2(Core_Percent[14], buf, pos_ref),
     v_a = caml_call2(caml_call1(Core[505], Core_Percent[14]), buf, pos_ref);
    return [0, v_h, v_s, v_l, v_a];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$1, bin_writer_t$1, bin_reader_t$1];
   function compare$1(a_109, b_110){
    if(a_109 === b_110) return 0;
    var n = caml_call2(Core[382], a_109[1], b_110[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core_Percent[27], a_109[2], b_110[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core_Percent[27], a_109[3], b_110[3]);
    if(0 !== n$1) return n$1;
    var _gi_ = b_110[4], _gj_ = a_109[4];
    function _gk_(a_111, b_112){
     return caml_call2(Core_Percent[27], a_111, b_112);
    }
    return caml_call3(Core[509], _gk_, _gj_, _gi_);
   }
   function equal$1(a_113, b_114){
    if(a_113 === b_114) return 1;
    var _gb_ = caml_call2(Core[384], a_113[1], b_114[1]);
    if(_gb_){
     var _gc_ = caml_call2(Core_Percent[26], a_113[2], b_114[2]);
     if(_gc_){
      var _gd_ = caml_call2(Core_Percent[26], a_113[3], b_114[3]);
      if(_gd_){
       var
        _ge_ = b_114[4],
        _gf_ = a_113[4],
        _gg_ =
          function(a_115, b_116){
           return caml_call2(Core_Percent[26], a_115, b_116);
          };
       return caml_call3(Core[511], _gg_, _gf_, _ge_);
      }
      var _gh_ = _gd_;
     }
     else
      var _gh_ = _gc_;
    }
    else
     var _gh_ = _gb_;
    return _gh_;
   }
   var
    t_sexp_grammar$0 =
      [9,
       [246,
        function(param){
         var
          _ga_ =
            [0,
             [1,
              [0, cst_a$6, 1, [0, caml_call1(Core[517], Core_Percent[11]), 0]]],
             0];
         return [2,
                 [2,
                  [0,
                   0,
                   [0,
                    [1, [0, cst_h$1, 1, [0, Core[391], 0]]],
                    [0,
                     [1, [0, cst_s$1, 1, [0, Core_Percent[11], 0]]],
                     [0, [1, [0, cst_l$1, 1, [0, Core_Percent[11], 0]]], _ga_]]]]]];
        }]];
   function create$0(h, s, l, a, param){return [0, h, s, l, a];}
   function t_of_sexp$2(x_119){
    function _f6_(param){
     var
      _f__ = param[2],
      _f$_ = _f__[2],
      a = _f$_[2][1],
      h = _f$_[1],
      c = _f__[1],
      l = param[1];
     return [0, l, c, h, a];
    }
    var _f7_ = 0;
    function _f8_(param){
     return caml_string_notequal(param, cst_a$10)
             ? caml_string_notequal
                (param, cst_c$2)
               ? caml_string_notequal
                  (param, cst_h$5)
                 ? caml_string_notequal(param, cst_l$5) ? -1 : 0
                 : 2
               : 1
             : 3;
    }
    var _f9_ = [0, cst_a$7, 1, caml_call1(Core[516], Core_Percent[9]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_118,
             [0,
              cst_l$2,
              1,
              Core_Percent[9],
              [0, cst_c, 1, Core_Percent[9], [0, cst_h$2, 1, Core[368], _f9_]]],
             _f8_,
             _f7_,
             _f6_,
             x_119);
   }
   function sexp_of_t$2(param){
    var
     a_127 = param[4],
     h_125 = param[3],
     c_123 = param[2],
     l_121 = param[1],
     arg_128 = caml_call2(Core[515], Core_Percent[10], a_127),
     bnds_120 = [0, [1, [0, _R_, [0, arg_128, 0]]], 0],
     arg_126 = caml_call1(Core[367], h_125),
     bnds_120$0 = [0, [1, [0, _S_, [0, arg_126, 0]]], bnds_120],
     arg_124 = caml_call1(Core_Percent[10], c_123),
     bnds_120$1 = [0, [1, [0, _T_, [0, arg_124, 0]]], bnds_120$0],
     arg_122 = caml_call1(Core_Percent[10], l_121),
     bnds_120$2 = [0, [1, [0, _U_, [0, arg_122, 0]]], bnds_120$1];
    return [1, bnds_120$2];
   }
   var
    _V_ = [0, [0, cst_a$8, caml_call1(Core[499], Core_Percent[16])], 0],
    _W_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_l$3, Core_Percent[16]],
         [0,
          [0, cst_c$0, Core_Percent[16]],
          [0, [0, cst_h$3, Core[350]], _V_]]]),
    _X_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _W_], 0],
    _Y_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_63_),
    group$3 = caml_call2(Bin_prot_Shape[2], _Y_, _X_),
    _Z_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _Z_), 0);
   function bin_size_t$2(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _f2_ = caml_call1(Core_Percent[12], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _f2_),
     _f3_ = caml_call1(Core_Percent[12], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _f3_),
     _f4_ = caml_call1(Core[351], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _f4_),
     _f5_ = caml_call2(Core[500], Core_Percent[12], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _f5_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_Percent[13], buf, pos, v1),
     pos$1 = caml_call3(Core_Percent[13], buf, pos$0, v2),
     pos$2 = caml_call3(Core[353], buf, pos$1, v3);
    return caml_call4(Core[502], Core_Percent[13], buf, pos$2, v4);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_css_gen_src_css_gen_ml_Col$1,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_l = caml_call2(Core_Percent[14], buf, pos_ref),
     v_c = caml_call2(Core_Percent[14], buf, pos_ref),
     v_h = caml_call2(Core[356], buf, pos_ref),
     v_a = caml_call2(caml_call1(Core[505], Core_Percent[14]), buf, pos_ref);
    return [0, v_l, v_c, v_h, v_a];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
   function compare$2(a_129, b_130){
    if(a_129 === b_130) return 0;
    var n = caml_call2(Core_Percent[27], a_129[1], b_130[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core_Percent[27], a_129[2], b_130[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[360], a_129[3], b_130[3]);
    if(0 !== n$1) return n$1;
    var _fZ_ = b_130[4], _f0_ = a_129[4];
    function _f1_(a_131, b_132){
     return caml_call2(Core_Percent[27], a_131, b_132);
    }
    return caml_call3(Core[509], _f1_, _f0_, _fZ_);
   }
   function equal$2(a_133, b_134){
    if(a_133 === b_134) return 1;
    var _fS_ = caml_call2(Core_Percent[26], a_133[1], b_134[1]);
    if(_fS_){
     var _fT_ = caml_call2(Core_Percent[26], a_133[2], b_134[2]);
     if(_fT_){
      var _fU_ = caml_call2(Core[362], a_133[3], b_134[3]);
      if(_fU_){
       var
        _fV_ = b_134[4],
        _fW_ = a_133[4],
        _fX_ =
          function(a_135, b_136){
           return caml_call2(Core_Percent[26], a_135, b_136);
          };
       return caml_call3(Core[511], _fX_, _fW_, _fV_);
      }
      var _fY_ = _fU_;
     }
     else
      var _fY_ = _fT_;
    }
    else
     var _fY_ = _fS_;
    return _fY_;
   }
   var
    t_sexp_grammar$1 =
      [9,
       [246,
        function(param){
         var
          _fR_ =
            [0,
             [1,
              [0, cst_a$9, 1, [0, caml_call1(Core[517], Core_Percent[11]), 0]]],
             0];
         return [2,
                 [2,
                  [0,
                   0,
                   [0,
                    [1, [0, cst_l$4, 1, [0, Core_Percent[11], 0]]],
                    [0,
                     [1, [0, cst_c$1, 1, [0, Core_Percent[11], 0]]],
                     [0, [1, [0, cst_h$4, 1, [0, Core[369], 0]]], _fR_]]]]]];
        }]];
   function create$1(l, c, h, a, param){return [0, l, c, h, a];}
   var
    t_of_sexp$3 = function _fQ_(_fP_){return _fQ_.fun(_fP_);},
    t_of_sexp$4 = function _fO_(_fN_){return _fO_.fun(_fN_);};
   caml_update_dummy
    (t_of_sexp$3,
     function(sexp_140){
      if(0 === sexp_140[0]){
       var atom_138 = sexp_140[1];
       try{
        var _fH_ = css_global_values_of_sexp(t_of_sexp$4, sexp_140);
        return _fH_;
       }
       catch(_fM_){
        var _fG_ = caml_wrap_exception(_fM_);
        if(_fG_ === Sexplib0_Sexp_conv_error[22])
         return caml_string_notequal(atom_138, cst_HSLA$1)
                 ? caml_string_notequal
                    (atom_138, cst_Hex$1)
                   ? caml_string_notequal
                      (atom_138, cst_LCHA$1)
                     ? caml_string_notequal
                        (atom_138, cst_Name$1)
                       ? caml_string_notequal
                          (atom_138, cst_RGBA$1)
                         ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                         : caml_call2
                           (Sexplib0_Sexp_conv_error[27], error_source_145, sexp_140)
                       : caml_call2
                         (Sexplib0_Sexp_conv_error[27], error_source_145, sexp_140)
                     : caml_call2
                       (Sexplib0_Sexp_conv_error[27], error_source_145, sexp_140)
                   : caml_call2
                     (Sexplib0_Sexp_conv_error[27], error_source_145, sexp_140)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_145, sexp_140);
        throw caml_maybe_attach_backtrace(_fG_, 0);
       }
      }
      var _fI_ = sexp_140[1];
      if(! _fI_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[29], error_source_145, sexp_140);
      var match = _fI_[1];
      if(0 !== match[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_145, sexp_140);
      var sexp_args_141 = _fI_[2], atom_138$0 = match[1];
      if(! caml_string_notequal(atom_138$0, cst_HSLA$1)){
       if(sexp_args_141 && ! sexp_args_141[2]){
        var arg0_153 = sexp_args_141[1], res0_154 = t_of_sexp$1(arg0_153);
        return [0, 802593344, res0_154];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[26],
                error_source_145,
                atom_138$0,
                sexp_140);
      }
      if(! caml_string_notequal(atom_138$0, cst_Hex$1)){
       if(sexp_args_141 && ! sexp_args_141[2]){
        var
         arg0_143 = sexp_args_141[1],
         res0_144 = caml_call1(Core[559], arg0_143);
        return [0, 3603131, res0_144];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[26],
                error_source_145,
                atom_138$0,
                sexp_140);
      }
      if(! caml_string_notequal(atom_138$0, cst_LCHA$1)){
       if(sexp_args_141 && ! sexp_args_141[2]){
        var arg0_150 = sexp_args_141[1], res0_151 = t_of_sexp$2(arg0_150);
        return [0, 846155056, res0_151];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[26],
                error_source_145,
                atom_138$0,
                sexp_140);
      }
      if(caml_string_notequal(atom_138$0, cst_Name$1)){
       if(caml_string_notequal(atom_138$0, cst_RGBA$1))
        try{
         var _fK_ = css_global_values_of_sexp(t_of_sexp$4, sexp_140);
         return _fK_;
        }
        catch(_fL_){
         var _fJ_ = caml_wrap_exception(_fL_);
         if(_fJ_ === Sexplib0_Sexp_conv_error[22])
          return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
         throw caml_maybe_attach_backtrace(_fJ_, 0);
        }
       if(sexp_args_141 && ! sexp_args_141[2]){
        var arg0_156 = sexp_args_141[1], res0_157 = t_of_sexp$0(arg0_156);
        return [0, 912890036, res0_157];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[26],
                error_source_145,
                atom_138$0,
                sexp_140);
      }
      if(sexp_args_141 && ! sexp_args_141[2]){
       var
        arg0_147 = sexp_args_141[1],
        res0_148 = caml_call1(Core[559], arg0_147);
       return [0, 869834347, res0_148];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[26],
               error_source_145,
               atom_138$0,
               sexp_140);
     });
   caml_update_dummy
    (t_of_sexp$4,
     function(sexp_158){
      try{var _fE_ = caml_call1(t_of_sexp$3, sexp_158); return _fE_;}
      catch(_fF_){
       var _fD_ = caml_wrap_exception(_fF_);
       if(_fD_ === Sexplib0_Sexp_conv_error[22])
        return caml_call2
                (Sexplib0_Sexp_conv_error[24], error_source_159, sexp_158);
       throw caml_maybe_attach_backtrace(_fD_, 0);
      }
     });
   function sexp_of_t$3(v_165){
    if(typeof v_165 !== "number"){
     var _fC_ = v_165[1];
     if(802593344 <= _fC_){
      if(869834347 <= _fC_){
       if(912890036 <= _fC_){
        var v_160 = v_165[2];
        return [1, [0, ___, [0, sexp_of_t$0(v_160), 0]]];
       }
       var v_163 = v_165[2];
       return [1, [0, _$_, [0, caml_call1(Core[558], v_163), 0]]];
      }
      if(846155056 <= _fC_){
       var v_162 = v_165[2];
       return [1, [0, _aa_, [0, sexp_of_t$2(v_162), 0]]];
      }
      var v_161 = v_165[2];
      return [1, [0, _ab_, [0, sexp_of_t$1(v_161), 0]]];
     }
     if(4298439 > _fC_){
      var v_164 = v_165[2];
      return [1, [0, _ac_, [0, caml_call1(Core[558], v_164), 0]]];
     }
    }
    return sexp_of_css_global_values(sexp_of_t$3, v_165);
   }
   var
    _ad_ = caml_call1(Bin_shape[2][1], cst_t$7),
    _ae_ =
      bin_shape_css_global_values
       (caml_call1(caml_call1(Bin_prot_Shape[9], _ad_), 0)),
    _af_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_80_),
    _ag_ = [0, caml_call2(Bin_prot_Shape[7], _af_, _ae_), 0],
    _ah_ = [0, caml_call2(Bin_prot_Shape[6], cst_Hex, [0, Core[541]]), _ag_],
    _ai_ = [0, caml_call2(Bin_prot_Shape[6], cst_Name, [0, Core[541]]), _ah_],
    _aj_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_LCHA, [0, bin_shape_t$2]), _ai_],
    _ak_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_HSLA, [0, bin_shape_t$1]), _aj_],
    _al_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_RGBA, [0, bin_shape_t$0]), _ak_],
    _am_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_75_),
    _an_ = caml_call2(Bin_prot_Shape[8], _am_, _al_),
    _ao_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$8), 0, _an_], 0],
    _ap_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_74_),
    group$4 = caml_call2(Bin_prot_Shape[2], _ap_, _ao_),
    _aq_ = caml_call1(Bin_shape[2][1], cst_t$9),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _aq_), 0);
   function bin_size_t$3(v){
    if(typeof v !== "number"){
     var _fB_ = v[1];
     if(802593344 <= _fB_){
      if(869834347 <= _fB_){
       if(912890036 <= _fB_){
        var args$1 = v[2], size_args$1 = bin_size_t$0(args$1);
        return caml_call2(Bin_prot_Common[23], size_args$1, 4);
       }
       var args$2 = v[2], size_args$2 = caml_call1(Core[542], args$2);
       return caml_call2(Bin_prot_Common[23], size_args$2, 4);
      }
      if(846155056 <= _fB_){
       var args$3 = v[2], size_args$3 = bin_size_t$2(args$3);
       return caml_call2(Bin_prot_Common[23], size_args$3, 4);
      }
      var args$4 = v[2], size_args$4 = bin_size_t$1(args$4);
      return caml_call2(Bin_prot_Common[23], size_args$4, 4);
     }
     if(4298439 > _fB_){
      var args$5 = v[2], size_args$5 = caml_call1(Core[542], args$5);
      return caml_call2(Bin_prot_Common[23], size_args$5, 4);
     }
    }
    if(typeof v !== "number"){
     var _fy_ = v[1];
     if(4298439 === _fy_){
      var args = v[2], size_args = caml_call1(Core[542], args);
      return caml_call2(Bin_prot_Common[23], size_args, 4);
     }
     if(94775808 === _fy_){
      var
       args$0 = v[2],
       v2 = args$0[2],
       v1 = args$0[1],
       _fz_ = caml_call1(Core[542], v1),
       size = caml_call2(Bin_prot_Common[23], 0, _fz_),
       _fA_ = bin_size_t$3(v2),
       size_args$0 = caml_call2(Bin_prot_Common[23], size, _fA_);
      return caml_call2(Bin_prot_Common[23], size_args$0, 4);
     }
    }
    return 4;
   }
   function bin_write_t$4(counter, buf, pos$2, v){
    if(typeof v !== "number"){
     var _fx_ = v[1];
     if(802593344 <= _fx_){
      if(869834347 <= _fx_){
       if(912890036 <= _fx_){
        var
         args$1 = v[2],
         pos$3 = caml_call3(Bin_prot_Write[29], buf, pos$2, 912890036);
        return bin_write_t$0(buf, pos$3, args$1);
       }
       var
        args$2 = v[2],
        pos$4 = caml_call3(Bin_prot_Write[29], buf, pos$2, 869834347);
       return caml_call3(Core[544], buf, pos$4, args$2);
      }
      if(846155056 <= _fx_){
       var
        args$3 = v[2],
        pos$5 = caml_call3(Bin_prot_Write[29], buf, pos$2, 846155056);
       return bin_write_t$2(buf, pos$5, args$3);
      }
      var
       args$4 = v[2],
       pos$6 = caml_call3(Bin_prot_Write[29], buf, pos$2, 802593344);
      return bin_write_t$1(buf, pos$6, args$4);
     }
     if(4298439 > _fx_){
      var
       args$5 = v[2],
       pos$7 = caml_call3(Bin_prot_Write[29], buf, pos$2, 3603131);
      return caml_call3(Core[544], buf, pos$7, args$5);
     }
    }
    if(typeof v === "number")
     return 418396260 <= v
             ? caml_call3(Bin_prot_Write[29], buf, pos$2, 418396260)
             : caml_call3(Bin_prot_Write[29], buf, pos$2, -72987685);
    if(94775808 > v[1]){
     var
      args$0 = v[2],
      pos$1 = caml_call3(Bin_prot_Write[29], buf, pos$2, 4298439);
     return caml_call3(Core[544], buf, pos$1, args$0);
    }
    var
     args = v[2],
     pos = caml_call3(Bin_prot_Write[29], buf, pos$2, 94775808),
     v2 = args[2],
     v1 = args[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1);
    if(counter >= 50)
     return caml_trampoline_return(bin_write_t$4, [0, buf, pos$0, v2]);
    var counter$0 = counter + 1 | 0;
    return bin_write_t$4(counter$0, buf, pos$0, v2);
   }
   function bin_write_t$3(buf, pos, v){
    return caml_trampoline(bin_write_t$4(0, buf, pos, v));
   }
   var bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3];
   function bin_read_t$7(buf, pos_ref, vint){
    if(846155056 <= vint){
     if(869834347 === vint){
      var arg_1$1 = caml_call2(Core[547], buf, pos_ref);
      return [0, 869834347, arg_1$1];
     }
     if(912890036 === vint){
      var arg_1$2 = bin_read_t$2(buf, pos_ref);
      return [0, 912890036, arg_1$2];
     }
     if(846155057 > vint){
      var arg_1$3 = bin_read_t$6(buf, pos_ref);
      return [0, 846155056, arg_1$3];
     }
    }
    else{
     if(3603131 === vint){
      var arg_1$4 = caml_call2(Core[547], buf, pos_ref);
      return [0, 3603131, arg_1$4];
     }
     if(802593344 === vint){
      var arg_1$5 = bin_read_t$4(buf, pos_ref);
      return [0, 802593344, arg_1$5];
     }
    }
    if(4298440 <= vint){
     if(94775808 === vint){
      var
       v1 = caml_call2(Core[547], buf, pos_ref),
       v2 = bin_read_t$8(buf, pos_ref),
       arg_1 = [0, v1, v2];
      return [0, 94775808, arg_1];
     }
     if(418396260 === vint) return 418396260;
    }
    else{
     if(-72987685 === vint) return -72987685;
     if(4298439 <= vint){
      var arg_1$0 = caml_call2(Core[547], buf, pos_ref);
      return [0, 4298439, arg_1$0];
     }
    }
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_t$8(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _fv_ = bin_read_t$7(buf, pos_ref, vint); return _fv_;}
    catch(_fw_){
     var _fu_ = caml_wrap_exception(_fw_);
     if(_fu_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_fu_, 0);
    }
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3];
   function compare$3(a_166, b_167){
    if(a_166 === b_167) return 0;
    a:
    {
     if(typeof a_166 !== "number"){
      var _ft_ = a_166[1];
      if(802593344 <= _ft_){
       if(869834347 <= _ft_){
        if(912890036 <= _ft_){
         if(typeof b_167 === "number") break a;
         if(912890036 !== b_167[1]) break a;
         var right_169 = b_167[2], left_168 = a_166[2];
         return compare$0(left_168, right_169);
        }
        if(typeof b_167 === "number") break a;
        if(869834347 !== b_167[1]) break a;
        var right_175 = b_167[2], left_174 = a_166[2];
        return caml_call2(Core[551], left_174, right_175);
       }
       if(846155056 <= _ft_){
        if(typeof b_167 === "number") break a;
        if(846155056 !== b_167[1]) break a;
        var right_173 = b_167[2], left_172 = a_166[2];
        return compare$2(left_172, right_173);
       }
       if(typeof b_167 === "number") break a;
       if(802593344 !== b_167[1]) break a;
       var right_171 = b_167[2], left_170 = a_166[2];
       return compare$1(left_170, right_171);
      }
      if(4298439 > _ft_){
       if(typeof b_167 === "number") break a;
       if(3603131 !== b_167[1]) break a;
       var right_177 = b_167[2], left_176 = a_166[2];
       return caml_call2(Core[551], left_176, right_177);
      }
     }
     if(typeof b_167 === "number"){
      if(-72987685 !== b_167 && 418396260 !== b_167) break a;
     }
     else{
      var _fs_ = b_167[1];
      if(4298439 !== _fs_ && 94775808 !== _fs_) break a;
     }
     return compare_css_global_values
             (function(a_180, b_181){return compare$3(a_180, b_181);},
              a_166,
              b_167);
    }
    return caml_compare(a_166, b_167);
   }
   function equal$4(counter, a_182, b_183){
    if(a_182 === b_183) return 1;
    a:
    {
     if(typeof a_182 !== "number"){
      var _fr_ = a_182[1];
      if(802593344 <= _fr_){
       if(869834347 <= _fr_){
        if(912890036 <= _fr_){
         if(typeof b_183 === "number") break a;
         if(912890036 !== b_183[1]) break a;
         var right_185 = b_183[2], left_184 = a_182[2];
         return equal$0(left_184, right_185);
        }
        if(typeof b_183 === "number") break a;
        if(869834347 !== b_183[1]) break a;
        var right_191 = b_183[2], left_190 = a_182[2];
        return caml_call2(Core[553], left_190, right_191);
       }
       if(846155056 <= _fr_){
        if(typeof b_183 === "number") break a;
        if(846155056 !== b_183[1]) break a;
        var right_189 = b_183[2], left_188 = a_182[2];
        return equal$2(left_188, right_189);
       }
       if(typeof b_183 === "number") break a;
       if(802593344 !== b_183[1]) break a;
       var right_187 = b_183[2], left_186 = a_182[2];
       return equal$1(left_186, right_187);
      }
      if(4298439 > _fr_){
       if(typeof b_183 === "number") break a;
       if(3603131 !== b_183[1]) break a;
       var right_193 = b_183[2], left_192 = a_182[2];
       return caml_call2(Core[553], left_192, right_193);
      }
     }
     if(typeof b_183 === "number"){
      if(-72987685 !== b_183 && 418396260 !== b_183) break a;
     }
     else{
      var _fq_ = b_183[1];
      if(4298439 !== _fq_ && 94775808 !== _fq_) break a;
     }
     if(a_182 === b_183) return 1;
     if(typeof a_182 === "number"){
      if(418396260 <= a_182){
       if(typeof b_183 === "number" && 418396260 === b_183) return 1;
      }
      else if(typeof b_183 === "number" && -72987685 === b_183) return 1;
     }
     else
      if(94775808 <= a_182[1]){
       if(typeof b_183 !== "number" && 94775808 === b_183[1]){
        var
         right_072 = b_183[2],
         left_071 = a_182[2],
         t_074 = left_071[2],
         t_073 = left_071[1],
         t_076 = right_072[2],
         t_075 = right_072[1],
         _fp_ = caml_call2(Core[553], t_073, t_075);
        if(! _fp_) return _fp_;
        if(counter >= 50)
         return caml_trampoline_return(equal$4, [0, t_074, t_076]);
        var counter$0 = counter + 1 | 0;
        return equal$4(counter$0, t_074, t_076);
       }
      }
      else if(typeof b_183 !== "number" && 4298439 === b_183[1]){
       var right_070 = b_183[2], left_069 = a_182[2];
       return caml_call2(Core[553], left_069, right_070);
      }
     return caml_equal(a_182, b_183);
    }
    return caml_equal(a_182, b_183);
   }
   function equal$3(a_182, b_183){
    return caml_trampoline(equal$4(0, a_182, b_183));
   }
   var
    grammars_198 =
      [246,
       function(param){
        var
         _fo_ =
           [0,
            [3,
             [0,
              1,
              [0,
               [1, [0, cst_RGBA$0, [0, [0, t_sexp_grammar, 0]]]],
               [0,
                [1, [0, cst_HSLA$0, [0, [0, t_sexp_grammar$0, 0]]]],
                [0,
                 [1, [0, cst_LCHA$0, [0, [0, t_sexp_grammar$1, 0]]]],
                 [0,
                  [1, [0, cst_Name$0, [0, [0, Core[560], 0]]]],
                  [0, [1, [0, cst_Hex$0, [0, [0, Core[560], 0]]]], 0]]]]]]],
            0];
        return [0,
                [0,
                 cst_t$10,
                 0,
                 [4,
                  [0, css_global_values_sexp_grammar(t_sexp_grammar$2), _fo_]]],
                0];
       }],
    t_sexp_grammar$3 =
      [9,
       [246,
        function(_fl_){
         var _fm_ = runtime.caml_obj_tag(grammars_198);
         a:
         if(250 === _fm_)
          var _fn_ = grammars_198[1];
         else{
          if(246 !== _fm_ && 244 !== _fm_){var _fn_ = grammars_198; break a;}
          var _fn_ = caml_call1(CamlinternalLazy[2], grammars_198);
         }
         return [7, cst_t$11, 0, _fn_];
        }]];
   caml_call1(Core_Sexpable[1], [0, t_of_sexp$4, sexp_of_t$3]);
   function alpha_to_string(a){
    return f2s(2, caml_call1(Core_Percent[77], a));
   }
   function percent_to_string(percent){
    return f2s(0, caml_call1(Core_Percent[80], percent));
   }
   function to_string_css(global){
    if(typeof global !== "number"){
     var _eC_ = global[1];
     if(802593344 <= _eC_){
      if(869834347 <= _eC_){
       if(912890036 > _eC_){var name = global[2]; return name;}
       var
        match = global[2],
        a = match[4],
        b = match[3],
        g = match[2],
        r = match[1];
       if(a){
        var
         a$0 = a[1],
         _eD_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$2), 0],
         _eE_ = [0, alpha_to_string(a$0), _eD_],
         _eF_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$3), _eE_],
         _eG_ = caml_call1(Core_Int[79], b),
         _eH_ = [0, caml_call1(Ppx_string_runtime[1][3], _eG_), _eF_],
         _eI_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$4), _eH_],
         _eJ_ = caml_call1(Core_Int[79], g),
         _eK_ = [0, caml_call1(Ppx_string_runtime[1][3], _eJ_), _eI_],
         _eL_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$5), _eK_],
         _eM_ = caml_call1(Core_Int[79], r),
         _eN_ = [0, caml_call1(Ppx_string_runtime[1][3], _eM_), _eL_],
         _eO_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_rgba), _eN_];
        return caml_call1(Ppx_string_runtime[1][4], _eO_);
       }
       var
        _eP_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$6), 0],
        _eQ_ = caml_call1(Core_Int[79], b),
        _eR_ = [0, caml_call1(Ppx_string_runtime[1][3], _eQ_), _eP_],
        _eS_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$7), _eR_],
        _eT_ = caml_call1(Core_Int[79], g),
        _eU_ = [0, caml_call1(Ppx_string_runtime[1][3], _eT_), _eS_],
        _eV_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$8), _eU_],
        _eW_ = caml_call1(Core_Int[79], r),
        _eX_ = [0, caml_call1(Ppx_string_runtime[1][3], _eW_), _eV_],
        _eY_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_rgb), _eX_];
       return caml_call1(Ppx_string_runtime[1][4], _eY_);
      }
      if(846155056 <= _eC_){
       var
        match$0 = global[2],
        a$1 = match$0[4],
        angle = match$0[3],
        c = match$0[2],
        l = match$0[1],
        l$0 = percent_to_string(l),
        c$0 = percent_to_string(c),
        h = f2s(2, angle);
       if(a$1){
        var
         a$2 = a$1[1],
         _eZ_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$9), 0],
         _e0_ = [0, alpha_to_string(a$2), _eZ_],
         _e1_ =
           [0, h, [0, caml_call1(Ppx_string_runtime[1][2], cst$10), _e0_]],
         _e2_ =
           [0, c$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$11), _e1_]],
         _e3_ =
           [0, l$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$12), _e2_]],
         _e4_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_lch), _e3_];
        return caml_call1(Ppx_string_runtime[1][4], _e4_);
       }
       var
        _e5_ = [0, h, [0, caml_call1(Ppx_string_runtime[1][2], cst$13), 0]],
        _e6_ =
          [0, c$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$14), _e5_]],
        _e7_ =
          [0, l$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$15), _e6_]],
        _e8_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_lch$0), _e7_];
       return caml_call1(Ppx_string_runtime[1][4], _e8_);
      }
      var
       match$1 = global[2],
       a$3 = match$1[4],
       l$1 = match$1[3],
       s = match$1[2],
       h$0 = match$1[1],
       s$0 = percent_to_string(s),
       l$2 = percent_to_string(l$1);
      if(a$3){
       var
        a$4 = a$3[1],
        _e9_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$16), 0],
        _e__ = [0, alpha_to_string(a$4), _e9_],
        _e$_ =
          [0, l$2, [0, caml_call1(Ppx_string_runtime[1][2], cst$17), _e__]],
        _fa_ =
          [0, s$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$18), _e$_]],
        _fb_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$19), _fa_],
        _fc_ = caml_call1(Core_Int[79], h$0),
        _fd_ = [0, caml_call1(Ppx_string_runtime[1][3], _fc_), _fb_],
        _fe_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_hsla), _fd_];
       return caml_call1(Ppx_string_runtime[1][4], _fe_);
      }
      var
       _ff_ = [0, l$2, [0, caml_call1(Ppx_string_runtime[1][2], cst$20), 0]],
       _fg_ =
         [0, s$0, [0, caml_call1(Ppx_string_runtime[1][2], cst$21), _ff_]],
       _fh_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$22), _fg_],
       _fi_ = caml_call1(Core_Int[79], h$0),
       _fj_ = [0, caml_call1(Ppx_string_runtime[1][3], _fi_), _fh_],
       _fk_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_hsl), _fj_];
      return caml_call1(Ppx_string_runtime[1][4], _fk_);
     }
     if(4298439 > _eC_){var hex = global[2]; return hex;}
    }
    return global_to_string_css(global, to_string_css);
   }
   function to_string_css$0(t){return to_string_css(t);}
   var
    t_of_sexp$5 = function _eB_(_eA_){return _eB_.fun(_eA_);},
    t_of_sexp$6 = function _ez_(_ey_){return _ez_.fun(_ey_);};
   caml_update_dummy
    (t_of_sexp$5,
     function(sexp_202){
      if(0 === sexp_202[0]){
       var atom_200 = sexp_202[1];
       try{
        var _es_ = css_global_values_of_sexp(t_of_sexp$6, sexp_202);
        return _es_;
       }
       catch(_ex_){
        var _er_ = caml_wrap_exception(_ex_);
        if(_er_ !== Sexplib0_Sexp_conv_error[22])
         throw caml_maybe_attach_backtrace(_er_, 0);
        var switch$0 = caml_string_compare(atom_200, cst_Px$0);
        if(0 <= switch$0){
         if(0 >= switch$0)
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Px_float$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Raw$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Rem$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Vh$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Vw$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
        }
        else{
         if(! caml_string_notequal(atom_200, cst_Ch$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Em$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Em_float$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Percent$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
         if(! caml_string_notequal(atom_200, cst_Pt$0))
          return caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_207, sexp_202);
        }
        return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
       }
      }
      var _et_ = sexp_202[1];
      if(! _et_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[29], error_source_207, sexp_202);
      var match = _et_[1];
      if(0 !== match[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_207, sexp_202);
      var
       sexp_args_203 = _et_[2],
       atom_200$0 = match[1],
       switch$1 = caml_string_compare(atom_200$0, cst_Px$0);
      if(0 <= switch$1){
       if(0 >= switch$1){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_215 = sexp_args_203[1],
          res0_216 = caml_call1(Core[390], arg0_215);
         return [0, 17960, res0_216];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Px_float$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_212 = sexp_args_203[1],
          res0_213 = caml_call1(Core[368], arg0_212);
         return [0, -598646523, res0_213];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Raw$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_236 = sexp_args_203[1],
          res0_237 = caml_call1(Core[559], arg0_236);
         return [0, 4099528, res0_237];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Rem$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_230 = sexp_args_203[1],
          res0_231 = caml_call1(Core[368], arg0_230);
         return [0, 4100410, res0_231];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Vh$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_209 = sexp_args_203[1],
          res0_210 = caml_call1(Core_Percent[9], arg0_209);
         return [0, 19282, res0_210];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Vw$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_205 = sexp_args_203[1],
          res0_206 = caml_call1(Core_Percent[9], arg0_205);
         return [0, 19297, res0_206];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
      }
      else{
       if(! caml_string_notequal(atom_200$0, cst_Ch$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_233 = sexp_args_203[1],
          res0_234 = caml_call1(Core[368], arg0_233);
         return [0, 15045, res0_234];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Em$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_227 = sexp_args_203[1],
          res0_228 = caml_call1(Core[390], arg0_227);
         return [0, 15496, res0_228];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Em_float$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_224 = sexp_args_203[1],
          res0_225 = caml_call1(Core[368], arg0_224);
         return [0, 498753381, res0_225];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Percent$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_221 = sexp_args_203[1],
          res0_222 = caml_call1(Core_Percent[9], arg0_221);
         return [0, -970206555, res0_222];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
       if(! caml_string_notequal(atom_200$0, cst_Pt$0)){
        if(sexp_args_203 && ! sexp_args_203[2]){
         var
          arg0_218 = sexp_args_203[1],
          res0_219 = caml_call1(Core[368], arg0_218);
         return [0, 17956, res0_219];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_207,
                 atom_200$0,
                 sexp_202);
       }
      }
      try{
       var _ev_ = css_global_values_of_sexp(t_of_sexp$6, sexp_202);
       return _ev_;
      }
      catch(_ew_){
       var _eu_ = caml_wrap_exception(_ew_);
       if(_eu_ === Sexplib0_Sexp_conv_error[22])
        return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
       throw caml_maybe_attach_backtrace(_eu_, 0);
      }
     });
   caml_update_dummy
    (t_of_sexp$6,
     function(sexp_238){
      try{var _ep_ = caml_call1(t_of_sexp$5, sexp_238); return _ep_;}
      catch(_eq_){
       var _eo_ = caml_wrap_exception(_eq_);
       if(_eo_ === Sexplib0_Sexp_conv_error[22])
        return caml_call2
                (Sexplib0_Sexp_conv_error[24], error_source_239, sexp_238);
       throw caml_maybe_attach_backtrace(_eo_, 0);
      }
     });
   function sexp_of_t$4(v_251){
    if(typeof v_251 !== "number"){
     var _en_ = v_251[1];
     if(19282 > _en_){
      if(15045 > _en_){
       if(-598646523 <= _en_){
        var v_248 = v_251[2];
        return [1, [0, _aA_, [0, caml_call1(Core[367], v_248), 0]]];
       }
       var v_245 = v_251[2];
       return [1, [0, _aB_, [0, caml_call1(Core_Percent[10], v_245), 0]]];
      }
      if(17956 <= _en_){
       if(17960 <= _en_){
        var v_247 = v_251[2];
        return [1, [0, _aw_, [0, caml_call1(Core[389], v_247), 0]]];
       }
       var v_246 = v_251[2];
       return [1, [0, _ax_, [0, caml_call1(Core[367], v_246), 0]]];
      }
      if(15496 <= _en_){
       var v_243 = v_251[2];
       return [1, [0, _ay_, [0, caml_call1(Core[389], v_243), 0]]];
      }
      var v_241 = v_251[2];
      return [1, [0, _az_, [0, caml_call1(Core[367], v_241), 0]]];
     }
     if(4099528 > _en_){
      if(19297 <= _en_){
       var v_250 = v_251[2];
       return [1, [0, _au_, [0, caml_call1(Core_Percent[10], v_250), 0]]];
      }
      var v_249 = v_251[2];
      return [1, [0, _av_, [0, caml_call1(Core_Percent[10], v_249), 0]]];
     }
     if(4298439 > _en_){
      if(4100410 <= _en_){
       var v_242 = v_251[2];
       return [1, [0, _as_, [0, caml_call1(Core[367], v_242), 0]]];
      }
      var v_240 = v_251[2];
      return [1, [0, _at_, [0, caml_call1(Core[558], v_240), 0]]];
     }
     if(498753381 <= _en_){
      var v_244 = v_251[2];
      return [1, [0, _ar_, [0, caml_call1(Core[367], v_244), 0]]];
     }
    }
    return sexp_of_css_global_values(sexp_of_t$4, v_251);
   }
   var
    _aC_ = caml_call1(Bin_shape[2][1], cst_t$12),
    _aD_ =
      bin_shape_css_global_values
       (caml_call1(caml_call1(Bin_prot_Shape[9], _aC_), 0)),
    _aE_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_131),
    _aF_ = [0, caml_call2(Bin_prot_Shape[7], _aE_, _aD_), 0],
    _aG_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Vw, [0, Core_Percent[16]]), _aF_],
    _aH_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Vh, [0, Core_Percent[16]]), _aG_],
    _aI_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Px_float, [0, Core[350]]), _aH_],
    _aJ_ = [0, caml_call2(Bin_prot_Shape[6], cst_Px, [0, Core[372]]), _aI_],
    _aK_ = [0, caml_call2(Bin_prot_Shape[6], cst_Pt, [0, Core[350]]), _aJ_],
    _aL_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Percent, [0, Core_Percent[16]]),
       _aK_],
    _aM_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Em_float, [0, Core[350]]), _aL_],
    _aN_ = [0, caml_call2(Bin_prot_Shape[6], cst_Em, [0, Core[372]]), _aM_],
    _aO_ = [0, caml_call2(Bin_prot_Shape[6], cst_Rem, [0, Core[350]]), _aN_],
    _aP_ = [0, caml_call2(Bin_prot_Shape[6], cst_Ch, [0, Core[350]]), _aO_],
    _aQ_ = [0, caml_call2(Bin_prot_Shape[6], cst_Raw, [0, Core[541]]), _aP_],
    _aR_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_120),
    _aS_ = caml_call2(Bin_prot_Shape[8], _aR_, _aQ_),
    _aT_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _aS_], 0],
    _aU_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_119),
    group$5 = caml_call2(Bin_prot_Shape[2], _aU_, _aT_),
    _aV_ = caml_call1(Bin_shape[2][1], cst_t$14),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _aV_), 0);
   function compare$4(a_252, b_253){
    if(a_252 === b_253) return 0;
    a:
    {
     if(typeof a_252 !== "number"){
      var _em_ = a_252[1];
      if(19282 > _em_){
       if(15045 > _em_){
        if(-598646523 <= _em_){
         if(typeof b_253 === "number") break a;
         if(-598646523 !== b_253[1]) break a;
         var right_271 = b_253[2], left_270 = a_252[2];
         return caml_call2(Core[360], left_270, right_271);
        }
        if(typeof b_253 === "number") break a;
        if(-970206555 !== b_253[1]) break a;
        var right_265 = b_253[2], left_264 = a_252[2];
        return caml_call2(Core_Percent[27], left_264, right_265);
       }
       if(17956 <= _em_){
        if(17960 <= _em_){
         if(typeof b_253 === "number") break a;
         if(17960 !== b_253[1]) break a;
         var right_269 = b_253[2], left_268 = a_252[2];
         return caml_call2(Core[382], left_268, right_269);
        }
        if(typeof b_253 === "number") break a;
        if(17956 !== b_253[1]) break a;
        var right_267 = b_253[2], left_266 = a_252[2];
        return caml_call2(Core[360], left_266, right_267);
       }
       if(15496 <= _em_){
        if(typeof b_253 === "number") break a;
        if(15496 !== b_253[1]) break a;
        var right_261 = b_253[2], left_260 = a_252[2];
        return caml_call2(Core[382], left_260, right_261);
       }
       if(typeof b_253 === "number") break a;
       if(15045 !== b_253[1]) break a;
       var right_257 = b_253[2], left_256 = a_252[2];
       return caml_call2(Core[360], left_256, right_257);
      }
      if(4099528 > _em_){
       if(19297 <= _em_){
        if(typeof b_253 === "number") break a;
        if(19297 !== b_253[1]) break a;
        var right_275 = b_253[2], left_274 = a_252[2];
        return caml_call2(Core_Percent[27], left_274, right_275);
       }
       if(typeof b_253 === "number") break a;
       if(19282 !== b_253[1]) break a;
       var right_273 = b_253[2], left_272 = a_252[2];
       return caml_call2(Core_Percent[27], left_272, right_273);
      }
      if(4298439 > _em_){
       if(4100410 <= _em_){
        if(typeof b_253 === "number") break a;
        if(4100410 !== b_253[1]) break a;
        var right_259 = b_253[2], left_258 = a_252[2];
        return caml_call2(Core[360], left_258, right_259);
       }
       if(typeof b_253 === "number") break a;
       if(4099528 !== b_253[1]) break a;
       var right_255 = b_253[2], left_254 = a_252[2];
       return caml_call2(Core[551], left_254, right_255);
      }
      if(498753381 <= _em_){
       if(typeof b_253 === "number") break a;
       if(498753381 !== b_253[1]) break a;
       var right_263 = b_253[2], left_262 = a_252[2];
       return caml_call2(Core[360], left_262, right_263);
      }
     }
     if(typeof b_253 === "number"){
      if(-72987685 !== b_253 && 418396260 !== b_253) break a;
     }
     else{
      var _el_ = b_253[1];
      if(4298439 !== _el_ && 94775808 !== _el_) break a;
     }
     return compare_css_global_values
             (function(a_278, b_279){return compare$4(a_278, b_279);},
              a_252,
              b_253);
    }
    return caml_compare(a_252, b_253);
   }
   function to_string_css$1(global){
    if(typeof global !== "number"){
     var _d0_ = global[1];
     if(19282 > _d0_){
      if(15045 > _d0_){
       if(-598646523 <= _d0_){
        var
         f$1 = global[2],
         _eh_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_px$0), 0],
         _ei_ = [0, f2s(2, f$1), _eh_];
        return caml_call1(Ppx_string_runtime[1][4], _ei_);
       }
       var
        p$2 = global[2],
        _ej_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$23), 0],
        _ek_ = [0, f2s(2, caml_call1(Core_Percent[80], p$2)), _ej_];
       return caml_call1(Ppx_string_runtime[1][4], _ek_);
      }
      if(17956 <= _d0_){
       if(17960 <= _d0_){
        var
         i = global[2],
         _d9_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_px), 0],
         _d__ = caml_call1(Core_Int[79], i),
         _d$_ = [0, caml_call1(Ppx_string_runtime[1][3], _d__), _d9_];
        return caml_call1(Ppx_string_runtime[1][4], _d$_);
       }
       var
        p$1 = global[2],
        _ea_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_pt), 0],
        _eb_ = [0, f2s(2, p$1), _ea_];
       return caml_call1(Ppx_string_runtime[1][4], _eb_);
      }
      if(15496 <= _d0_){
       var
        i$0 = global[2],
        _ec_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_em$0), 0],
        _ed_ = caml_call1(Core_Int[79], i$0),
        _ee_ = [0, caml_call1(Ppx_string_runtime[1][3], _ed_), _ec_];
       return caml_call1(Ppx_string_runtime[1][4], _ee_);
      }
      var
       c = global[2],
       _ef_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_ch), 0],
       _eg_ = [0, f2s(2, c), _ef_];
      return caml_call1(Ppx_string_runtime[1][4], _eg_);
     }
     if(4099528 > _d0_){
      if(19297 <= _d0_){
       var
        p = global[2],
        _d5_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_vw), 0],
        _d6_ = [0, f2s(2, caml_call1(Core_Percent[80], p)), _d5_];
       return caml_call1(Ppx_string_runtime[1][4], _d6_);
      }
      var
       p$0 = global[2],
       _d7_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_vh), 0],
       _d8_ = [0, f2s(2, caml_call1(Core_Percent[80], p$0)), _d7_];
      return caml_call1(Ppx_string_runtime[1][4], _d8_);
     }
     if(4298439 > _d0_){
      if(4100410 <= _d0_){
       var
        f$0 = global[2],
        _d3_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_rem), 0],
        _d4_ = [0, f2s(2, f$0), _d3_];
       return caml_call1(Ppx_string_runtime[1][4], _d4_);
      }
      var s = global[2];
      return s;
     }
     if(498753381 <= _d0_){
      var
       f = global[2],
       _d1_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_em), 0],
       _d2_ = [0, f2s(2, f), _d1_];
      return caml_call1(Ppx_string_runtime[1][4], _d2_);
     }
    }
    return global_to_string_css(global, to_string_css$1);
   }
   function to_string_css$2(t){return to_string_css$1(t);}
   var
    percent100 = [0, -970206555, caml_call1(Core_Percent[78], 100.)],
    _aW_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_157),
    _aX_ = [0, caml_call2(Bin_prot_Shape[7], _aW_, bin_shape_t$4), 0],
    _aY_ = [0, caml_call2(Bin_prot_Shape[6], cst_Auto, 0), _aX_],
    _aZ_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_156),
    _a0_ = caml_call2(Bin_prot_Shape[8], _aZ_, _aY_),
    _a1_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _a0_], 0],
    _a2_ = caml_call1(Bin_shape[4][1], cst_css_gen_src_css_gen_ml_155),
    group$6 = caml_call2(Bin_prot_Shape[2], _a2_, _a1_),
    _a3_ = caml_call1(Bin_shape[2][1], cst_t$16);
   caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _a3_), 0);
   function compare$5(a_280, b_281){
    if(a_280 === b_281) return 0;
    a:
    {
     if(typeof a_280 === "number" && 726666127 <= a_280){
      if(typeof b_281 !== "number") break a;
      if(726666127 === b_281) return 0;
      break a;
     }
     if(typeof b_281 === "number"){
      if(-72987685 !== b_281 && 418396260 !== b_281) break a;
     }
     else{
      var _dZ_ = b_281[1];
      if(19282 <= _dZ_){
       if(4100411 <= _dZ_){
        if(4298439 !== _dZ_ && 94775808 !== _dZ_ && 498753381 !== _dZ_)
         break a;
       }
       else
        if(19298 <= _dZ_){
         if(4099528 !== _dZ_ && 4100410 > _dZ_) break a;
        }
        else if(19283 <= _dZ_ && 19297 > _dZ_) break a;
      }
      else
       if(15046 <= _dZ_){
        if(15496 !== _dZ_ && 17956 !== _dZ_ && 17960 !== _dZ_) break a;
       }
       else if(-970206555 !== _dZ_ && -598646523 !== _dZ_ && 15045 > _dZ_)
        break a;
     }
     return compare$4(a_280, b_281);
    }
    return caml_compare(a_280, b_281);
   }
   function t_of_sexp$7(sexp_287){
    if(0 === sexp_287[0]){
     var atom_285 = sexp_287[1];
     if(! caml_string_notequal(atom_285, cst_Auto$0)) return 726666127;
     try{var _dT_ = caml_call1(t_of_sexp$5, sexp_287); return _dT_;}
     catch(_dY_){
      var _dS_ = caml_wrap_exception(_dY_);
      if(_dS_ === Sexplib0_Sexp_conv_error[22])
       return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
      throw caml_maybe_attach_backtrace(_dS_, 0);
     }
    }
    var _dU_ = sexp_287[1];
    if(! _dU_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_289, sexp_287);
    var match = _dU_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_289, sexp_287);
    var atom_285$0 = match[1];
    try{var _dW_ = caml_call1(t_of_sexp$5, sexp_287); return _dW_;}
    catch(_dX_){
     var _dV_ = caml_wrap_exception(_dX_);
     if(_dV_ === Sexplib0_Sexp_conv_error[22])
      return caml_string_notequal(atom_285$0, cst_Auto$0)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_289, sexp_287);
     throw caml_maybe_attach_backtrace(_dV_, 0);
    }
   }
   function t_of_sexp$8(sexp_290){
    try{var _dQ_ = t_of_sexp$7(sexp_290); return _dQ_;}
    catch(_dR_){
     var _dP_ = caml_wrap_exception(_dR_);
     if(_dP_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_291, sexp_290);
     throw caml_maybe_attach_backtrace(_dP_, 0);
    }
   }
   function sexp_of_t$5(v_292){
    if(typeof v_292 === "number" && 726666127 <= v_292) return _a4_;
    return sexp_of_t$4(v_292);
   }
   function to_string_css$3(l){
    if(typeof l === "number" && 726666127 <= l) return cst_auto;
    return to_string_css$2(l);
   }
   function value_map(o, f){return caml_call3(Core_Option[41], o, cst$24, f);}
   function combine(t1, t2){return caml_call2(Core[156], t1, t2);}
   function concat(l){return caml_call1(Core_List[11], l);}
   function to_string_list(_dO_){return _dO_;}
   function to_string_css$4(t){
    function _dL_(param){
     var
      value = param[2],
      field = param[1],
      _dN_ =
        [0,
         field,
         [0, caml_call1(Ppx_string_runtime[1][2], cst$25), [0, value, 0]]];
     return caml_call1(Ppx_string_runtime[1][4], _dN_);
    }
    var _dM_ = caml_call2(Core_List[51], t, _dL_);
    return caml_call2(Core_String[46], _a5_, _dM_);
   }
   function of_string_css_exn(s){
    var _dK_ = caml_call1(Css_gen_Css_parser[2], s);
    return caml_call1(Core_Or_error[40], _dK_);
   }
   function create_raw(field, value){return [0, [0, field, value], 0];}
   var should_validate = [0, 0], Expert = [0, should_validate];
   function create$2(field, value){
    if(Expert[1][1]){
     var _dJ_ = caml_call1(Css_gen_Css_parser[1], value);
     caml_call1(Core_Or_error[40], _dJ_);
    }
    return create_raw(field, value);
   }
   var is_empty = Core_List[18], empty = 0;
   function create_placement(name, length){
    return create$2(name, to_string_css$2(length));
   }
   function left(_dI_){return create_placement(cst_left, _dI_);}
   function top(_dH_){return create_placement(cst_top, _dH_);}
   function bottom(_dG_){return create_placement(cst_bottom, _dG_);}
   function right(_dF_){return create_placement(cst_right, _dF_);}
   function position(tp, bt, lt, rt, pos){
    var
     value =
       332360020 === pos
        ? cst_fixed
        : 982536398
          <= pos
          ? 1070408009 <= pos ? cst_sticky : cst_static
          : 491227799 <= pos ? cst_absolute : cst_relative,
     pos$0 = create$2(cst_position, value);
    function convert(opt_l, f){
     return caml_call3(Core_Option[41], opt_l, empty, f);
    }
    var
     _dC_ = [0, convert(bt, bottom), 0],
     _dD_ = [0, convert(rt, right), _dC_],
     _dE_ = [0, convert(lt, left), _dD_];
    return concat([0, pos$0, [0, convert(tp, top), _dE_]]);
   }
   function box_sizing(v){
    function to_string_css(global){
     if(typeof global === "number"){
      if(92813848 === global) return cst_border_box;
      if(367114405 === global) return cst_content_box;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_box_sizing, to_string_css(v));
   }
   function display(v){
    function to_string_css(global){
     if(typeof global === "number")
      if(179740044 <= global){
       if(498536372 <= global)
        return 781663065 <= global
                ? 870530776 <= global ? cst_none : cst_flex
                : 504440814 <= global ? cst_table : cst_list_item;
       if(418396260 > global) return cst_inline_grid;
      }
      else{
       if(-841728391 > global)
        return -936778451 <= global ? cst_block : cst_inline_table;
       if(-72987685 > global)
        return -266363961 <= global ? cst_inline_block : cst_inline;
       if(168351231 <= global) return cst_inline_flex;
      }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_display, to_string_css(v));
   }
   function visibility(v){
    function to_string_css(global){
     if(typeof global === "number"){
      if(19559306 === global) return cst_hidden;
      if(-260726701 > global) return cst_visible;
      if(507973005 <= global) return cst_collapse;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_visibility, to_string_css(v));
   }
   function make_overflow(field, v){
    function to_string_css(global){
     if(typeof global === "number")
      if(-67548115 <= global){
       if(418396260 > global)
        return 19559306 <= global ? cst_hidden$0 : cst_scroll;
       if(726666127 <= global) return cst_auto$0;
      }
      else if(-72987685 > global) return cst_visible$0;
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(field, to_string_css(v));
   }
   function overflow(_dB_){return make_overflow(cst_overflow, _dB_);}
   function overflow_x(_dA_){return make_overflow(cst_overflow_x, _dA_);}
   function overflow_y(_dz_){return make_overflow(cst_overflow_y, _dz_);}
   function z_index(i){
    return create_raw(cst_z_index, caml_call1(Core_Int[79], i));
   }
   function opacity(i){return create_raw(cst_opacity, f2s(6, i));}
   function create_length_field(field, l){
    return create_raw(field, to_string_css$3(l));
   }
   function white_space(v){
    function to_string_css(global){
     if(typeof global === "number"){
      if(-453122489 > global)
       return -932293946 <= global ? cst_pre_wrap : cst_pre_line;
      if(-72987685 > global)
       return -397426005 <= global ? cst_nowrap : cst_normal;
      if(4003843 === global) return cst_pre;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create$2(cst_white_space, to_string_css(v));
   }
   function font_size(_dy_){return create_length_field(cst_font_size, _dy_);}
   function font_family(l){
    return create_raw(cst_font_family, caml_call2(Core_String[46], _a6_, l));
   }
   function font_style(s){
    function to_string_css(global){
     if(typeof global === "number"){
      if(-72987685 > global)
       return -115526511 <= global ? cst_oblique : cst_normal$0;
      if(989373200 <= global) return cst_italic;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_font_style, to_string_css(s));
   }
   function font_weight(s){
    function to_string_css(global){
     if(typeof global === "number"){
      if(347568466 === global) return cst_bolder;
      if(-415993180 > global)
       return -415993181 <= global ? cst_lighter : cst_normal$1;
      if(737455525 <= global) return cst_bold;
     }
     else if(4298439 > global[1]){
      var i = global[2];
      return caml_call1(Core_Int[79], i);
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_font_weight, to_string_css(s));
   }
   var bold = font_weight(737455525);
   function font_variant(s){
    function to_string_css(global){
     if(typeof global === "number"){
      if(57678329 === global) return cst_small_caps;
      if(-453122488 > global) return cst_normal$2;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_font_variant, to_string_css(s));
   }
   function font(size, family, style, weight, variant, param){
    var
     _dt_ = [0, caml_call2(Core_Option[34], variant, font_variant), 0],
     _du_ = [0, caml_call2(Core_Option[34], weight, font_weight), _dt_],
     _dv_ = [0, caml_call2(Core_Option[34], style, font_style), _du_],
     _dw_ = [0, [0, font_family(family)], _dv_],
     _dx_ = [0, [0, font_size(size)], _dw_];
    return concat(caml_call1(Core_List[132], _dx_));
   }
   function create_with_color(field, color){
    return create_raw(field, to_string_css$0(color));
   }
   function color(color){return create_with_color(cst_color, color);}
   function background_color(color){
    return create_with_color(cst_background_color, color);
   }
   function fill(color){return create_with_color(cst_fill, color);}
   function stops_to_string(stops){
    function _dn_(param){
     var
      color = param[2],
      pct = param[1],
      _dp_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$26), 0],
      _dq_ = [0, f2s(6, caml_call1(Core_Percent[80], pct)), _dp_],
      _dr_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$27), _dq_],
      _ds_ = [0, to_string_css$0(color), _dr_];
     return caml_call1(Ppx_string_runtime[1][4], _ds_);
    }
    var _do_ = caml_call2(Core_List[51], stops, _dn_);
    return caml_call2(Core_String[46], _a7_, _do_);
   }
   function background_image(spec){
    var _da_ = spec[1];
    if(4252495 === _da_)
     var
      url = spec[2],
      _db_ = [0, url, [0, caml_call1(Ppx_string_runtime[1][2], cst$28), 0]],
      _dc_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_url), _db_],
      value = caml_call1(Ppx_string_runtime[1][4], _dc_);
    else if(411117168 <= _da_)
     var
      stops = spec[2][1],
      _dd_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$29), 0],
      _de_ = [0, stops_to_string(stops), _dd_],
      _df_ =
        [0, caml_call1(Ppx_string_runtime[1][2], cst_radial_gradient), _de_],
      value = caml_call1(Ppx_string_runtime[1][4], _df_);
    else
     var
      _dg_ = spec[2],
      stops$0 = _dg_[2],
      direction = _dg_[1][2],
      _dh_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$30), 0],
      _di_ = [0, stops_to_string(stops$0), _dh_],
      _dj_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_deg), _di_],
      _dk_ = caml_call1(Core_Int[79], direction),
      _dl_ = [0, caml_call1(Ppx_string_runtime[1][3], _dk_), _dj_],
      _dm_ =
        [0, caml_call1(Ppx_string_runtime[1][2], cst_linear_gradient), _dl_],
      value = caml_call1(Ppx_string_runtime[1][4], _dm_);
    return create_raw(cst_background_image, value);
   }
   function text_align(value){
    function to_string_css(global){
     if(typeof global === "number"){
      if(-57574468 === global) return cst_right$0;
      if(847852583 <= global)
       return 980392437 <= global ? cst_center : cst_left$0;
      if(-788068559 > global) return cst_justify;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_text_align, to_string_css(value));
   }
   function horizontal_align(value){
    function to_string_css(global){
     if(typeof global === "number"){
      if(847852583 <= global)
       return 980392437 <= global ? cst_center$0 : cst_left$1;
      if(-57574468 === global) return cst_right$1;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_horizontal_align, to_string_css(value));
   }
   function vertical_align(value){
    function to_string_css(global){
     if(typeof global === "number")
      if(15943541 <= global){
       if(418396260 > global)
        return 401437019 <= global ? cst_super : cst_middle;
       if(437082891 <= global) return cst_bottom$0;
      }
      else{
       if(4153696 === global) return cst_sub;
       if(4202101 <= global) return cst_top$0;
      }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_vertical_align, to_string_css(value));
   }
   function float$0(f){
    function to_string_css(global){
     if(typeof global === "number"){
      if(847852583 <= global)
       return 870530776 <= global ? cst_none$0 : cst_left$2;
      if(-57574468 === global) return cst_right$2;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_float, to_string_css(f));
   }
   function line_height(_c$_){
    return create_length_field(cst_line_height, _c$_);
   }
   function width(_c__){return create_length_field(cst_width, _c__);}
   function min_width(_c9_){return create_length_field(cst_min_width, _c9_);}
   function max_width(_c8_){return create_length_field(cst_max_width, _c8_);}
   function height(_c7_){return create_length_field(cst_height, _c7_);}
   function min_height(_c6_){
    return create_length_field(cst_min_height, _c6_);
   }
   function max_height(_c5_){
    return create_length_field(cst_max_height, _c5_);
   }
   function padding_top(_c4_){
    return create_length_field(cst_padding_top, _c4_);
   }
   function padding_bottom(_c3_){
    return create_length_field(cst_padding_bottom, _c3_);
   }
   function padding_left(_c2_){
    return create_length_field(cst_padding_left, _c2_);
   }
   function padding_right(_c1_){
    return create_length_field(cst_padding_right, _c1_);
   }
   function padding(top, bottom, left, right, param){
    var
     m = Core_Option[34],
     _cX_ = [0, caml_call2(m, right, padding_right), 0],
     _cY_ = [0, caml_call2(m, left, padding_left), _cX_],
     _cZ_ = [0, caml_call2(m, bottom, padding_bottom), _cY_],
     _c0_ = [0, caml_call2(m, top, padding_top), _cZ_];
    return concat(caml_call1(Core_List[132], _c0_));
   }
   function uniform_padding(l){
    return padding([0, l], [0, l], [0, l], [0, l], 0);
   }
   function margin_top(_cW_){
    return create_length_field(cst_margin_top, _cW_);
   }
   function margin_bottom(_cV_){
    return create_length_field(cst_margin_bottom, _cV_);
   }
   function margin_left(_cU_){
    return create_length_field(cst_margin_left, _cU_);
   }
   function margin_right(_cT_){
    return create_length_field(cst_margin_right, _cT_);
   }
   function margin(top, bottom, left, right, param){
    var
     m = Core_Option[34],
     _cP_ = [0, caml_call2(m, right, margin_right), 0],
     _cQ_ = [0, caml_call2(m, left, margin_left), _cP_],
     _cR_ = [0, caml_call2(m, bottom, margin_bottom), _cQ_],
     _cS_ = [0, caml_call2(m, top, margin_top), _cR_];
    return concat(caml_call1(Core_List[132], _cS_));
   }
   function uniform_margin(l){
    return margin([0, l], [0, l], [0, l], [0, l], 0);
   }
   function row_gap(_cO_){return create_length_field(cst_row_gap, _cO_);}
   function column_gap(_cN_){
    return create_length_field(cst_column_gap, _cN_);
   }
   function concat2v(v1, v2){
    if(! caml_string_notequal(v1, cst$36)) return v2;
    if(! caml_string_notequal(v2, cst$36)) return v1;
    var _cM_ = caml_call2(Core[18], cst$31, v2);
    return caml_call2(Core[18], v1, _cM_);
   }
   function concat3v(v1, v2, v3){return concat2v(concat2v(v1, v2), v3);}
   function border_value(width, color, style, param){
    function style_to_string_css(global){
     if(typeof global === "number"){
      if(-72987685 > global)
       return -783455043 <= global
               ? -423359734
                 <= global
                 ? -413163727 <= global ? cst_double : cst_dotted
                 : -696935855 <= global ? cst_dashed : cst_inset
               : -793243622 <= global ? cst_groove : cst_outset;
      if(19559306 <= global){
       if(418396260 > global)
        return 334701579 <= global ? cst_solid : cst_hidden$1;
       if(870530776 <= global) return cst_none$1;
      }
      else if(-57723893 <= global) return cst_ridge;
     }
     return global_to_string_css(global, style_to_string_css);
    }
    var
     width$0 = value_map(width, to_string_css$2),
     color$0 = value_map(color, to_string_css$0);
    return concat3v(width$0, style_to_string_css(style), color$0);
   }
   function create_border(side, param){
    if(side)
     var
      _cK_ = side[1],
      _cL_ =
        437082891 <= _cK_
         ? 847852583 <= _cK_ ? cst_border_left : cst_border_bottom
         : 4202101 <= _cK_ ? cst_border_top : cst_border_right,
      field = _cL_;
    else
     var field = cst_border;
    return function(width, color, style, param){
     return create_raw(field, border_value(width, color, style, 0));};
   }
   function border_top(width, color, style, param){
    return create_border(_a8_, 0)(width, color, style, 0);
   }
   function border_bottom(width, color, style, param){
    return create_border(_a9_, 0)(width, color, style, 0);
   }
   function border_left(width, color, style, param){
    return create_border(_a__, 0)(width, color, style, 0);
   }
   function border_right(width, color, style, param){
    return create_border(_a$_, 0)(width, color, style, 0);
   }
   function border(width, color, style, param){
    return create_border(0, 0)(width, color, style, 0);
   }
   function outline(width, color, style, param){
    return create_raw(cst_outline, border_value(width, color, style, 0));
   }
   function border_collapse(v){
    function to_string_css(global){
     if(typeof global === "number"){
      if(-72987685 > global) return cst_separate;
      if(507973005 <= global) return cst_collapse$0;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_border_collapse, to_string_css(v));
   }
   function border_spacing(_cJ_){
    return create_length_field(cst_border_spacing, _cJ_);
   }
   function border_radius(l){
    return create$2(cst_border_radius, to_string_css$2(l));
   }
   var
    text_decoration_line_of_sexp = function _cI_(_cH_){return _cI_.fun(_cH_);},
    text_decoration_line_of_sexp$0 =
      function _cG_(_cF_){return _cG_.fun(_cF_);};
   caml_update_dummy
    (text_decoration_line_of_sexp,
     function(sexp_296){
      if(0 === sexp_296[0]){
       var atom_294 = sexp_296[1];
       if(! caml_string_notequal(atom_294, cst_Line_through))
        return -851306022;
       if(! caml_string_notequal(atom_294, cst_None)) return 870530776;
       if(! caml_string_notequal(atom_294, cst_Overline)) return 518168424;
       if(! caml_string_notequal(atom_294, cst_Underline)) return 698610924;
       try{
        var
         _cz_ =
           css_global_values_of_sexp(text_decoration_line_of_sexp$0, sexp_296);
        return _cz_;
       }
       catch(_cE_){
        var _cy_ = caml_wrap_exception(_cE_);
        if(_cy_ === Sexplib0_Sexp_conv_error[22])
         return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
        throw caml_maybe_attach_backtrace(_cy_, 0);
       }
      }
      var _cA_ = sexp_296[1];
      if(! _cA_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[29], error_source_298, sexp_296);
      var match = _cA_[1];
      if(0 !== match[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_298, sexp_296);
      var atom_294$0 = match[1];
      try{
       var
        _cC_ =
          css_global_values_of_sexp(text_decoration_line_of_sexp$0, sexp_296);
       return _cC_;
      }
      catch(_cD_){
       var _cB_ = caml_wrap_exception(_cD_);
       if(_cB_ === Sexplib0_Sexp_conv_error[22])
        return caml_string_notequal(atom_294$0, cst_Line_through)
                ? caml_string_notequal
                   (atom_294$0, cst_None)
                  ? caml_string_notequal
                     (atom_294$0, cst_Overline)
                    ? caml_string_notequal
                       (atom_294$0, cst_Underline)
                      ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[25], error_source_298, sexp_296)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_298, sexp_296)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_298, sexp_296)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_298, sexp_296);
       throw caml_maybe_attach_backtrace(_cB_, 0);
      }
     });
   caml_update_dummy
    (text_decoration_line_of_sexp$0,
     function(sexp_299){
      try{
       var _cw_ = caml_call1(text_decoration_line_of_sexp, sexp_299);
       return _cw_;
      }
      catch(_cx_){
       var _cv_ = caml_wrap_exception(_cx_);
       if(_cv_ === Sexplib0_Sexp_conv_error[22])
        return caml_call2
                (Sexplib0_Sexp_conv_error[24], error_source_300, sexp_299);
       throw caml_maybe_attach_backtrace(_cv_, 0);
      }
     });
   var
    text_decoration_style_of_sexp =
      function _cu_(_ct_){return _cu_.fun(_ct_);},
    text_decoration_style_of_sexp$0 =
      function _cs_(_cr_){return _cs_.fun(_cr_);};
   caml_update_dummy
    (text_decoration_style_of_sexp,
     function(sexp_305){
      if(0 === sexp_305[0]){
       var atom_303 = sexp_305[1];
       if(! caml_string_notequal(atom_303, cst_Dashed)) return -696935855;
       if(! caml_string_notequal(atom_303, cst_Dotted)) return -423359734;
       if(! caml_string_notequal(atom_303, cst_Double)) return -413163727;
       if(! caml_string_notequal(atom_303, cst_Solid)) return 334701579;
       if(! caml_string_notequal(atom_303, cst_Wavy)) return 969642477;
       try{
        var
         _cl_ =
           css_global_values_of_sexp
            (text_decoration_style_of_sexp$0, sexp_305);
        return _cl_;
       }
       catch(_cq_){
        var _ck_ = caml_wrap_exception(_cq_);
        if(_ck_ === Sexplib0_Sexp_conv_error[22])
         return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
        throw caml_maybe_attach_backtrace(_ck_, 0);
       }
      }
      var _cm_ = sexp_305[1];
      if(! _cm_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[29], error_source_307, sexp_305);
      var match = _cm_[1];
      if(0 !== match[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_307, sexp_305);
      var atom_303$0 = match[1];
      try{
       var
        _co_ =
          css_global_values_of_sexp(text_decoration_style_of_sexp$0, sexp_305);
       return _co_;
      }
      catch(_cp_){
       var _cn_ = caml_wrap_exception(_cp_);
       if(_cn_ === Sexplib0_Sexp_conv_error[22])
        return caml_string_notequal(atom_303$0, cst_Dashed)
                ? caml_string_notequal
                   (atom_303$0, cst_Dotted)
                  ? caml_string_notequal
                     (atom_303$0, cst_Double)
                    ? caml_string_notequal
                       (atom_303$0, cst_Solid)
                      ? caml_string_notequal
                         (atom_303$0, cst_Wavy)
                        ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                        : caml_call2
                          (Sexplib0_Sexp_conv_error[25], error_source_307, sexp_305)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[25], error_source_307, sexp_305)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_307, sexp_305)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_307, sexp_305)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_307, sexp_305);
       throw caml_maybe_attach_backtrace(_cn_, 0);
      }
     });
   caml_update_dummy
    (text_decoration_style_of_sexp$0,
     function(sexp_308){
      try{
       var _ci_ = caml_call1(text_decoration_style_of_sexp, sexp_308);
       return _ci_;
      }
      catch(_cj_){
       var _ch_ = caml_wrap_exception(_cj_);
       if(_ch_ === Sexplib0_Sexp_conv_error[22])
        return caml_call2
                (Sexplib0_Sexp_conv_error[24], error_source_309, sexp_308);
       throw caml_maybe_attach_backtrace(_ch_, 0);
      }
     });
   function text_decoration(style, color, line, param){
    function to_string_css(global){
     if(typeof global === "number"){
      if(518168424 === global) return cst_overline;
      if(698610924 <= global)
       return 870530776 <= global ? cst_none$2 : cst_underline;
      if(-72987685 > global) return cst_line_through;
     }
     return global_to_string_css(global, to_string_css);
    }
    var
     _cg_ = caml_call2(Core_List[51], line, to_string_css),
     line$0 = caml_call2(Core_String[46], _ba_, _cg_);
    function to_string_css$1(global){
     if(typeof global === "number"){
      if(-72987685 > global)
       return -423359734 === global
               ? cst_dotted$0
               : -413163727 <= global ? cst_double$0 : cst_dashed$0;
      if(334701579 === global) return cst_solid$0;
      if(969642477 <= global) return cst_wavy;
     }
     return global_to_string_css(global, to_string_css$1);
    }
    var
     style$0 = caml_call3(Core_Option[41], style, cst$32, to_string_css$1),
     color$0 = value_map(color, to_string_css$0),
     value = concat3v(line$0, style$0, color$0);
    return create_raw(cst_text_decoration, value);
   }
   function item_alignment_to_string_css(param){
    return -354838363 <= param
            ? 726666127
              <= param
              ? 980392437 <= param ? cst_center$2 : cst_auto$1
              : 555646908 <= param ? cst_flex_start$0 : cst_baseline
            : -401431371 <= param ? cst_flex_end$0 : cst_stretch$0;
   }
   function flex_container
   (opt,
    _cb_,
    _ca_,
    align_items,
    align_content,
    justify_content,
    rg,
    cg,
    param){
    if(opt) var sth = opt[1], inline = sth; else var inline = 0;
    if(_cb_)
     var sth$0 = _cb_[1], direction = sth$0;
    else
     var direction = 4102650;
    if(_ca_) var sth$1 = _ca_[1], wrap = sth$1; else var wrap = -397426005;
    function make_dir(v){return create_raw(cst_flex_direction, v);}
    var
     direction$0 =
       -81804554 === direction
        ? make_dir(cst_column)
        : 175421085
          <= direction
          ? 744569753
            <= direction
            ? make_dir(cst_column_reverse)
            : make_dir(cst_row_reverse)
          : 4102650 <= direction ? make_dir(cst_row) : empty;
    function make_wrap(v){return create_raw(cst_flex_wrap, v);}
    var
     wrap$0 =
       899936909 <= wrap
        ? 970483178
          <= wrap
          ? make_wrap(cst_wrap)
          : make_wrap(cst_wrap_reverse)
        : -384499551 <= wrap ? empty : make_wrap(cst_nowrap$0);
    if(align_items)
     var
      a = align_items[1],
      align_items$0 =
        create_raw(cst_align_items, item_alignment_to_string_css(a));
    else
     var align_items$0 = empty;
    if(align_content)
     var
      a$0 = align_content[1],
      _cc_ =
        -337248785 <= a$0
         ? 934993376
           <= a$0
           ? 980392437 <= a$0 ? cst_center$1 : cst_space_evenly
           : 555646908 <= a$0 ? cst_flex_start : cst_space_between
         : -453122489
           <= a$0
           ? -401431371 <= a$0 ? cst_flex_end : cst_normal$3
           : -682324474 <= a$0 ? cst_space_around : cst_stretch,
      align_content$0 = create_raw(cst_align_content, _cc_);
    else
     var align_content$0 = empty;
    if(justify_content)
     var
      a$1 = justify_content[1],
      _cd_ =
        -337248785 <= a$1
         ? 934993376
           <= a$1
           ? 980392437 <= a$1 ? cst_center$3 : cst_space_evenly$0
           : 555646908 <= a$1 ? cst_flex_start$1 : cst_space_between$0
         : -401431371 <= a$1 ? cst_flex_end$1 : cst_space_around$0,
      justify_content$0 = create_raw(cst_justify_content, _cd_);
    else
     var justify_content$0 = empty;
    var
     row_gap$0 = caml_call3(Core_Option[41], rg, empty, row_gap),
     column_gap$0 = caml_call3(Core_Option[41], cg, empty, column_gap),
     _ce_ =
       [0,
        direction$0,
        [0,
         wrap$0,
         [0,
          align_items$0,
          [0,
           align_content$0,
           [0, justify_content$0, [0, column_gap$0, [0, row_gap$0, 0]]]]]]],
     _cf_ = inline ? 168351231 : 781663065;
    return concat([0, display(_cf_), _ce_]);
   }
   function flex_item(order, opt, _b4_, grow, param){
    if(opt) var sth = opt[1], basis = sth; else var basis = 726666127;
    if(_b4_) var sth$0 = _b4_[1], shrink = sth$0; else var shrink = 1.;
    function _b5_(i){
     return create_raw(cst_order, caml_call1(Core_Int[79], i));
    }
    var
     _b6_ = caml_call2(Core_Option[34], order, _b5_),
     _b7_ = caml_call1(Core_Option[51], _b6_),
     order$0 = caml_call1(Core_List[52], _b7_),
     basis$0 = to_string_css$3(basis),
     _b8_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$33), [0, basis$0, 0]],
     _b9_ = [0, f2s(6, shrink), _b8_],
     _b__ = [0, caml_call1(Ppx_string_runtime[1][2], cst$34), _b9_],
     _b$_ = [0, f2s(6, grow), _b__],
     flex = create_raw(cst_flex$0, caml_call1(Ppx_string_runtime[1][4], _b$_));
    return concat([0, flex, [0, order$0, 0]]);
   }
   function align_self(a){
    var value = item_alignment_to_string_css(a);
    return create_raw(cst_align_self, value);
   }
   function resize(value){
    function to_string_css(global){
     if(typeof global === "number"){
      if(208994564 === global) return cst_horizontal;
      if(737457313 <= global)
       return 870530776 <= global ? cst_none$3 : cst_both;
      if(-1010337641 > global) return cst_vertical;
     }
     return global_to_string_css(global, to_string_css);
    }
    return create_raw(cst_resize, to_string_css(value));
   }
   function animation
   (name,
    duration,
    delay,
    direction,
    fill_mode,
    iter_count,
    timing_function,
    param){
    var m = Core_Option[34];
    function span_to_string(s){
     var
      _b2_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_s$2), 0],
      _b3_ = [0, f2s(2, caml_call1(Core_Time_ns[1][89], s)), _b2_];
     return caml_call1(Ppx_string_runtime[1][4], _b3_);
    }
    var
     direction$0 =
       caml_call2
        (m,
         direction,
         function(d){
          function to_string_css(global){
           if(typeof global === "number"){
            if(-453122489 === global) return cst_normal$4;
            if(-326048323 > global)
             return -397582078 <= global ? cst_reverse : cst_alternate;
            if(-72987685 > global) return cst_alternate_reverse;
           }
           return global_to_string_css(global, to_string_css);
          }
          return create_raw(cst_animation_direction, to_string_css(d));
         }),
     fill_mode$0 =
       caml_call2
        (m,
         fill_mode,
         function(f){
          function to_string_css(global){
           if(typeof global === "number"){
            if(90990382 === global) return cst_forwards;
            if(813329168 <= global)
             return 870530776 <= global ? cst_none$4 : cst_backwards;
            if(737457313 <= global) return cst_both$0;
           }
           return global_to_string_css(global, to_string_css);
          }
          return create_raw(cst_animation_fill_mode, to_string_css(f));
         }),
     _bW_ = [0, direction$0, [0, fill_mode$0, 0]],
     _bX_ =
       [0,
        caml_call2
         (m,
          timing_function,
          function(value){
           return create_raw(cst_animation_timing_function, value);
          }),
        _bW_],
     _bY_ =
       [0,
        caml_call2
         (m,
          iter_count,
          function(i){
           return create_raw
                   (cst_animation_iteration_count, caml_call1(Core_Int[79], i));
          }),
        _bX_],
     _bZ_ =
       [0,
        caml_call2
         (m,
          delay,
          function(s){
           return create_raw(cst_animation_delay, span_to_string(s));
          }),
        _bY_],
     _b0_ =
       [0,
        [0, create_raw(cst_animation_duration, span_to_string(duration))],
        _bZ_],
     _b1_ = [0, [0, create_raw(cst_animation_name, name)], _b0_];
    return concat(caml_call1(Core_List[132], _b1_));
   }
   function user_select(s){
    var
     value =
       870530776 <= s
        ? 936573133 <= s ? cst_text : cst_none$5
        : 726666127 <= s ? cst_auto$2 : cst_all;
    return create_raw(cst_user_select, value);
   }
   function _bb_(param){
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bA_ =
        function(param){
         function t(css){
          var
           s = to_string_css$4(css),
           s2 = to_string_css$4(of_string_css_exn(s));
          caml_call1(Core[32], s);
          return caml_call1(Core[32], s2);
         }
         var _bS_ = overflow(-67548115);
         t(combine(flex_item(0, 0, 0, 1., 0), _bS_));
         var _bT_ = border(0, 0, -696935855, 0);
         t(combine(flex_container(_bm_, _bl_, 0, 0, 0, 0, 0, 0, 0), _bT_));
         t(color([0, 912890036, [0, 100, 100, 100, 0]]));
         var _bU_ = caml_call1(Core_Percent[76], 0.6);
         t
          (color
            ([0,
              802593344,
              [0, 100, caml_call1(Core_Percent[76], 0.75), _bU_, 0]]));
         t(create$2(cst_content, cst$35));
         var _bV_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$0[2], _bV_);
        },
      _bB_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _bo_,
          _bn_),
      _bC_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _bB_], 0],
      _bD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _bE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_css_gen_src_css_gen_ml$0,
       926,
       _bs_,
       _br_,
       _bq_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bE_,
       _bD_,
       _bp_,
       0,
       Inline_test_config,
       _bC_,
       _bA_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _bt_ =
        function(param){
         function p(x){return caml_call1(Core_Percent[76], x);}
         function c(s){return [0, 869834347, s];}
         function t(css){
          var _bR_ = to_string_css$4(css);
          return caml_call1(Core[32], _bR_);
         }
         var
          _bF_ =
            [0,
             912890036,
             [0, 100, 50, 30, [0, caml_call1(Core_Percent[76], 0.75)]]],
          _bG_ = [0, [0, p(1.), _bF_], 0],
          _bH_ = c(cst_red),
          _bI_ = [0, [0, p(0.4), _bH_], _bG_],
          _bJ_ = c(cst_ff0000),
          _bK_ = [0, [0, p(0.2), _bJ_], _bI_],
          _bL_ = c(cst_black);
         t
          (background_image
            ([0, -464780630, [0, _bc_, [0, [0, p(0.), _bL_], _bK_]]]));
         var _bM_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         caml_call1(Ppx_expect_test_block[2], _bM_);
         var
          _bN_ = c(cst_red$0),
          _bO_ = [0, [0, p(1.), _bN_], 0],
          _bP_ = c(cst_black$0);
         t(background_image([0, 411117168, [0, [0, [0, p(0.), _bP_], _bO_]]]));
         var _bQ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
         return caml_call1(Ppx_expect_test_block[2], _bQ_);
        },
      _bu_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _be_,
          _bd_),
      _bv_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _bu_], 0],
      _bw_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _bg_,
          _bf_),
      _bx_ =
        [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 4), _bw_], _bv_],
      _by_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6),
      _bz_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_css_gen_src_css_gen_ml,
       960,
       _bk_,
       _bj_,
       _bi_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _bz_,
       _by_,
       _bh_,
       0,
       Inline_test_config,
       _bx_,
       _bt_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_gen_ml$1,
     924,
     0,
     2205,
     _bb_);
   caml_call1(Ppx_inline_test_lib[7], cst_css_gen);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen);
   var
    Css_gen =
      [0,
       sexp_of_css_global_values,
       css_global_values_of_sexp$0,
       css_global_values_of_sexp,
       compare_css_global_values,
       css_global_values_sexp_grammar,
       [0,
        [0,
         t_of_sexp$0,
         sexp_of_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         equal$0,
         t_sexp_grammar,
         create],
        [0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         equal$1,
         t_sexp_grammar$0,
         create$0],
        [0,
         t_of_sexp$2,
         sexp_of_t$2,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         compare$2,
         equal$2,
         t_sexp_grammar$1,
         create$1],
        sexp_of_t$3,
        t_of_sexp$4,
        t_of_sexp$3,
        bin_size_t$3,
        bin_write_t$3,
        bin_read_t$8,
        bin_read_t$7,
        bin_shape_t$3,
        bin_writer_t$3,
        bin_reader_t$3,
        bin_t$3,
        compare$3,
        equal$3,
        t_sexp_grammar$3,
        to_string_css$0],
       [0,
        sexp_of_t$4,
        t_of_sexp$6,
        t_of_sexp$5,
        compare$4,
        percent100,
        to_string_css$2],
       [0, sexp_of_t$5, t_of_sexp$8, t_of_sexp$7, compare$5, to_string_css$3],
       t_of_sexp,
       sexp_of_t,
       compare,
       equal,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       create$2,
       empty,
       is_empty,
       position,
       top,
       bottom,
       left,
       right,
       combine,
       combine,
       concat,
       to_string_list,
       to_string_css$4,
       of_string_css_exn,
       box_sizing,
       display,
       visibility,
       overflow,
       overflow_x,
       overflow_y,
       z_index,
       opacity,
       font_size,
       font_family,
       font_style,
       font_weight,
       font_variant,
       font,
       bold,
       create_with_color,
       color,
       background_color,
       background_image,
       fill,
       text_align,
       horizontal_align,
       vertical_align,
       white_space,
       float$0,
       line_height,
       width,
       min_width,
       max_width,
       height,
       min_height,
       max_height,
       padding_top,
       padding_bottom,
       padding_left,
       padding_right,
       uniform_padding,
       row_gap,
       column_gap,
       padding,
       margin_top,
       margin_bottom,
       margin_left,
       margin_right,
       uniform_margin,
       margin,
       border_top,
       border_bottom,
       border_left,
       border_right,
       border,
       border_radius,
       border_collapse,
       border_spacing,
       outline,
       text_decoration,
       flex_container,
       flex_item,
       align_self,
       resize,
       animation,
       user_select,
       [0,
        [0,
         t_of_sexp,
         sexp_of_t,
         compare,
         equal,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t]],
       Expert,
       Private];
   runtime.caml_register_global(578, Css_gen, cst_Css_gen$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
