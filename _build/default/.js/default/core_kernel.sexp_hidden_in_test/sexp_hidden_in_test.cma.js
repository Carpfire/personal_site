// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Sexp_hidden_in_test
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Sexp_hidden_in_test$0 = "Sexp_hidden_in_test",
    cst_a$3 = "a",
    cst_sexp_hidden_in_test$0 = "sexp_hidden_in_test",
    cst_sexp_hidden_in_test_src_se$6 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Sexp_hidden_in_test$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_sexp_hidden_in_test$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_sexp_hidden_in_test_src_se$6);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_sexp_hidden_in_test$0,
     "sexp_hidden_in_test.ml");
   var
    _j_ = [0, [0, [0, " <hidden_in_test> ", [0, cst$0]], [0, 951, 966, 988]]],
    _k_ = [0, 951, 957, 989],
    _l_ = [0, "Turned on"],
    _m_ = [0, 873, 877, 989],
    _n_ = [0, 951, 989, 989],
    _o_ = [0, 873, 877, 989],
    cst_sexp_hidden_in_test_src_se$4 = cst_sexp_hidden_in_test_src_se$6,
    _d_ = [0, [0, [0, " 1024 ", [0, cst$0]], [0, 1080, 1095, 1105]]],
    _e_ = [0, 1080, 1086, 1106],
    _f_ = [0, "Turned off"],
    _g_ = [0, 998, 1002, 1106],
    _h_ = [0, 1080, 1106, 1106],
    _i_ = [0, 998, 1002, 1106],
    cst_sexp_hidden_in_test_src_se$3 = cst_sexp_hidden_in_test_src_se$6,
    cst_t$2 = cst_t$3,
    _b_ = [0, "<hidden_in_test>"],
    _a_ = [5, "sexp_hidden_in_test/src/sexp_hidden_in_test.ml.Make.t"],
    cst_t$0 = cst_t$3,
    cst_a = cst_a$3,
    cst_sexp_hidden_in_test_src_se =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:14",
    cst_a$0 = cst_a$3,
    cst_t = cst_t$3,
    cst_sexp_hidden_in_test_src_se$0 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:2",
    cst_a$1 = cst_a$3,
    cst_sexp_hidden_in_test_src_se$1 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:23",
    cst_a$2 = cst_a$3,
    cst_t$1 = cst_t$3,
    cst_sexp_hidden_in_test_src_se$2 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:4",
    cst_sexp_hidden_in_test_src_se$5 = cst_sexp_hidden_in_test_src_se$6,
    cst_sexp_hidden_in_test = cst_sexp_hidden_in_test$0,
    cst_Sexp_hidden_in_test = cst_Sexp_hidden_in_test$0;
   function Make(M){
    var
     _D_ = caml_call1(Bin_shape[3][1], cst_a),
     _E_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se),
     _F_ = caml_call2(Bin_prot_Shape[11], _E_, _D_),
     _G_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
     _H_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _G_, _F_], 0],
     _I_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$0),
     group = caml_call2(Bin_prot_Shape[2], _I_, _H_);
    function bin_shape_t(a){
     var _$_ = caml_call1(Bin_shape[2][1], cst_t$0);
     return caml_call1(caml_call2(Bin_prot_Shape[10], group, _$_), [0, a, 0]);
    }
    function bin_size_t(size_of_a){return size_of_a;}
    function bin_write_t(write_a){return write_a;}
    function bin_writer_t(bin_writer_a){
     function ___(v){return caml_call1(bin_writer_a[2], v);}
     return [0, function(v){return caml_call1(bin_writer_a[1], v);}, ___];
    }
    function bin_read_t(of_a, buf, pos_ref, vint){
     return caml_call2(Bin_prot_Common[18], _a_, pos_ref[1]);
    }
    function bin_read_t$0(of_a){return of_a;}
    function bin_reader_t(bin_reader_a){
     function _Z_(buf, pos_ref, vtag){
      return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
     }
     return [0,
             function(buf, pos_ref){
              return caml_call2(bin_reader_a[1], buf, pos_ref);
             },
             _Z_];
    }
    function bin_t(bin_a){
     var _X_ = bin_reader_t(bin_a[3]), _Y_ = bin_writer_t(bin_a[2]);
     return [0, bin_shape_t(bin_a[1]), _Y_, _X_];
    }
    function compare(cmp_a, a_001, b_002){
     return caml_call2(cmp_a, a_001, b_002);
    }
    function equal(cmp_a, a_003, b_004){
     return caml_call2(cmp_a, a_003, b_004);
    }
    function t_of_sexp(of_a_005){return of_a_005;}
    function sexp_of_t(sexp_of_a, a){
     return M[1] ? _b_ : caml_call1(sexp_of_a, a);
    }
    var
     _J_ = caml_call1(Bin_shape[3][1], cst_a$1),
     _K_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$1),
     _L_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _K_, _J_)),
     _M_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
     _N_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _M_, _L_], 0],
     _O_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$2),
     group$0 = caml_call2(Bin_prot_Shape[2], _O_, _N_);
    function bin_shape_t$0(a){
     var _W_ = caml_call1(Bin_shape[2][1], cst_t$2);
     return caml_call1
             (caml_call2(Bin_prot_Shape[10], group$0, _W_), [0, a, 0]);
    }
    function bin_size_t$0(size_of_a, v){return caml_call1(size_of_a, v);}
    function bin_write_t$0(write_a, buf, pos, v){return caml_call3(write_a, buf, pos, v);
    }
    function bin_writer_t$0(bin_writer_a){
     function _S_(v){
      var _T_ = bin_writer_a[2];
      return function(_U_, _V_){return bin_write_t$0(_T_, v, _U_, _V_);};
     }
     return [0, function(v){return bin_size_t$0(bin_writer_a[1], v);}, _S_];
    }
    function bin_read_t$1(of_a, buf, pos_ref, vint){return bin_read_t(of_a, buf, pos_ref, vint);
    }
    function bin_read_t$2(of_a, buf, pos_ref){return caml_call2(of_a, buf, pos_ref);
    }
    function bin_reader_t$0(bin_reader_a){
     function _R_(buf, pos_ref, vtag){
      return bin_read_t$1(bin_reader_a[1], buf, pos_ref, vtag);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t$2(bin_reader_a[1], buf, pos_ref);
             },
             _R_];
    }
    function bin_t$0(bin_a){
     var _P_ = bin_reader_t$0(bin_a[3]), _Q_ = bin_writer_t$0(bin_a[2]);
     return [0, bin_shape_t$0(bin_a[1]), _Q_, _P_];
    }
    function compare$0(cmp_a, a_008, b_009){
     return compare
             (function(a_010, b_011){return caml_call2(cmp_a, a_010, b_011);},
              a_008,
              b_009);
    }
    function equal$0(cmp_a, a_012, b_013){
     return equal
             (function(a_014, b_015){return caml_call2(cmp_a, a_014, b_015);},
              a_012,
              b_013);
    }
    var
     With_non_roundtripping_in_test =
       [0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0,
        compare$0,
        equal$0,
        t_of_sexp,
        sexp_of_t];
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_writer_t,
            bin_read_t,
            bin_read_t$0,
            bin_reader_t,
            bin_t,
            compare,
            equal,
            ,
            sexp_of_t,
            With_non_roundtripping_in_test];
   }
   function _c_(param){
    var
     Sexp_hidden_in_test_turned_off = Make([0, 0]),
     Sexp_hidden_in_test_turned_on = Make([0, 1]);
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _u_ =
        function(param){
         var
          _B_ = Sexp_hidden_in_test_turned_on[12].call(null, Core[389], 1024);
         caml_call2(Core[256], 0, _B_);
         var _C_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$0[2], _C_);
        },
      _v_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _k_,
          _j_),
      _w_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _v_], 0],
      _x_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_sexp_hidden_in_test_src_se$4,
       36,
       _o_,
       _n_,
       _m_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _y_,
       _x_,
       _l_,
       0,
       Inline_test_config,
       _w_,
       _u_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _p_ =
        function(param){
         var
          _z_ = Sexp_hidden_in_test_turned_off[12].call(null, Core[389], 1024);
         caml_call2(Core[256], 0, _z_);
         var _A_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block[2], _A_);
        },
      _q_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _e_,
          _d_),
      _r_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _q_], 0],
      _s_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _t_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_sexp_hidden_in_test_src_se$3,
       41,
       _i_,
       _h_,
       _g_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _t_,
       _s_,
       _f_,
       0,
       Inline_test_config,
       _r_,
       _p_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_sexp_hidden_in_test_src_se$5,
     18,
     0,
     733,
     _c_);
   var
    am_running_test = Core[628],
    include = Make([0, am_running_test]),
    bin_shape_t = include[1],
    bin_size_t = include[2],
    bin_write_t = include[3],
    bin_writer_t = include[4],
    bin_read_t = include[5],
    bin_read_t$0 = include[6],
    bin_reader_t = include[7],
    bin_t = include[8],
    compare = include[9],
    equal = include[10],
    sexp_of_t = include[12],
    With_non_roundtripping_in_test = include[13];
   caml_call1(Ppx_inline_test_lib[7], cst_sexp_hidden_in_test);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Sexp_hidden_in_test);
   var
    Sexp_hidden_in_test =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       equal,
       sexp_of_t,
       [0,
        With_non_roundtripping_in_test[1],
        With_non_roundtripping_in_test[2],
        With_non_roundtripping_in_test[3],
        With_non_roundtripping_in_test[6],
        With_non_roundtripping_in_test[5],
        With_non_roundtripping_in_test[4],
        With_non_roundtripping_in_test[7],
        With_non_roundtripping_in_test[8],
        With_non_roundtripping_in_test[9],
        With_non_roundtripping_in_test[10],
        With_non_roundtripping_in_test[11],
        With_non_roundtripping_in_test[12]]];
   runtime.caml_register_global
    (50, Sexp_hidden_in_test, cst_Sexp_hidden_in_test$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzZXhwX2hpZGRlbl9pbl90ZXN0LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJncm91cCIsImJpbl9zaGFwZV90IiwiYSIsImJpbl9zaXplX3QiLCJzaXplX29mX2EiLCJiaW5fd3JpdGVfdCIsIndyaXRlX2EiLCJiaW5fd3JpdGVyX3QiLCJiaW5fd3JpdGVyX2EiLCJ2IiwiYmluX3JlYWRfdCIsIm9mX2EiLCJidWYiLCJwb3NfcmVmIiwidmludCIsImJpbl9yZWFkX3QkMCIsImJpbl9yZWFkZXJfdCIsImJpbl9yZWFkZXJfYSIsInZ0YWciLCJiaW5fdCIsImJpbl9hIiwiY29tcGFyZSIsImNtcF9hIiwiYV8wMDEiLCJiXzAwMiIsImVxdWFsIiwiYV8wMDMiLCJiXzAwNCIsInRfb2Zfc2V4cCIsIm9mX2FfMDA1Iiwic2V4cF9vZl90Iiwic2V4cF9vZl9hIiwiZ3JvdXAkMCIsImJpbl9zaGFwZV90JDAiLCJiaW5fc2l6ZV90JDAiLCJiaW5fd3JpdGVfdCQwIiwicG9zIiwiYmluX3dyaXRlcl90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fcmVhZGVyX3QkMCIsImJpbl90JDAiLCJjb21wYXJlJDAiLCJhXzAwOCIsImJfMDA5IiwiYV8wMTAiLCJiXzAxMSIsImVxdWFsJDAiLCJhXzAxMiIsImJfMDEzIiwiYV8wMTQiLCJiXzAxNSIsImFtX3J1bm5pbmdfdGVzdCJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2NvcmVfa2VybmVsL3NleHBfaGlkZGVuX2luX3Rlc3Qvc2V4cF9oaWRkZW5faW5fdGVzdC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU1VOzs7O0tBQUEsVUFBQTtLQUFSLGNBQVE7S0FBUixNQUFBO0tBQUFBLFFBQUE7SUFBUSxTQUFBQyxZQUFBQztLQUFSLFVBQUE7S0FBQSxPQUFBLFdBQUEsK0JBQUFGLGlCQUFRRTtJQUFnRDthQUF4REMsV0FBS0MsVyxPQUFBQTthQUFMQyxZQUFLQyxTLE9BQUFBO2FBQUxDLGFBQUtDO2tCQUFMQyxHQUFBLE9BQUEsV0FBS0QsaUJBQUxDLEdBQXdEO0tBQXhELG9CQUFBQSxHQUFBLE9BQUEsV0FBS0QsaUJBQUxDLEdBQXdEO0lBQUE7YUFBeERDLFdBQUtDLE1BQU9DLEtBQUFDLFNBQUFDO0ssNENBQUFEOzthQUFaRSxhQUFLSixNLE9BQUFBO2FBQUxLLGFBQUtDO2tCQUFMTCxLQUFBQyxTQUFBSztNQUFBLE9BQUFSLFdBQUtPLGlCQUFMTCxLQUFBQyxTQUFBSztLQUF3RDtLQUF4RDtzQkFBQU4sS0FBQUM7Y0FBQSxPQUFBLFdBQUtJLGlCQUFMTCxLQUFBQzthQUF3RDs7SUFBQTthQUF4RE0sTUFBS0M7S0FBTCxJQUFBLE1BQUFKLGFBQUtJLFdBQUwsTUFBQWIsYUFBS2E7S0FBTCxXQUFRbkIsWUFBSG1CO0lBQW1EO2FBQXhEQyxRQUFBQyxPQUFBQyxPQUFBQztLQUFZLE9BQUEsV0FBWkYsT0FBQUMsT0FBQUM7SUFBYzthQUFkQyxNQUFBSCxPQUFBSSxPQUFBQztLQUFZLE9BQUEsV0FBWkwsT0FBQUksT0FBQUM7SUFBYzthQU9aQyxVQVBHQyxVQUFMLE9BQUtBLFNBQW1EO2FBT3REQyxVQUxZQyxXQUFVN0I7S0FDdEIsb0JBQTRELFdBRGhENkIsV0FBVTdCO0lBQ2lEO0lBSXhEOzs7V0FQVEQ7S0FPUyxVQUFBO0tBQWYsY0FBZTtLQUFmLE1BQUE7S0FBQStCLFVBQUE7SUFBZSxTQUFBQyxjQUFBL0I7S0FBZixVQUFBO0tBQUEsT0FBQTtjQUFBLCtCQUFBOEIsbUJBQWU5QjtJQUFrRDthQUFqRWdDLGFBQVk5QixXQUFaSyxHLGtCQUFZTCxXQUFaSzthQUFBMEIsY0FBWTdCLFNBQVpNLEtBQUF3QixLQUFBM0IsRyxrQkFBWUgsU0FBWk0sS0FBQXdCLEtBQUEzQjs7YUFBQTRCLGVBQVk3QjtrQkFBWkM7TUFBQSxVQUFZRDtNQUFaLDBCLE9BQUEyQixtQkFBQTFCO0tBQWlFO0tBQWpFLG9CQUFBQSxHQUFBLE9BQUF5QixhQUFZMUIsaUJBQVpDLEdBQWlFO0lBQUE7YUFBakU2QixhQUFZM0IsTUFBVUMsS0FBQUMsU0FBQUMsTSxPQVB4QkosV0FPY0MsTUFBVUMsS0FBQUMsU0FBQUM7O2FBQXRCeUIsYUFBWTVCLE1BQVpDLEtBQUFDLFNBQUEsT0FBQSxXQUFZRixNQUFaQyxLQUFBQztJQUFpRTthQUFqRTJCLGVBQVl2QjtrQkFBWkwsS0FBQUMsU0FBQUs7TUFBQSxPQUFBb0IsYUFBWXJCLGlCQUFaTCxLQUFBQyxTQUFBSztLQUFpRTtLQUFqRTtzQkFBQU4sS0FBQUM7Y0FBQSxPQUFBMEIsYUFBWXRCLGlCQUFaTCxLQUFBQzthQUFpRTs7SUFBQTthQUFqRTRCLFFBQVlyQjtLQUFaLElBQUEsTUFBQW9CLGVBQVlwQixXQUFaLE1BQUFpQixlQUFZakI7S0FBWixXQUFlYSxjQUFIYjtJQUFxRDthQUFqRXNCLFVBQUFwQixPQUFBcUIsT0FBQUM7S0FBc0IsT0FQeEJ2Qjt1QkFPcUJ3QixPQUFBQyxPQUFBLE9BQUEsV0FBbkJ4QixPQUFtQnVCLE9BQUFDLE9BQUU7Y0FBckJIO2NBQUFDO0lBQXVCO2FBQXZCRyxRQUFBekIsT0FBQTBCLE9BQUFDO0tBQXNCLE9BUHhCeEI7dUJBT3FCeUIsT0FBQUMsT0FBQSxPQUFBLFdBQW5CN0IsT0FBbUI0QixPQUFBQyxPQUFFO2NBQXJCSDtjQUFBQztJQUF1QjtJQUR1Qjs7O1FBQy9CaEI7UUFBZkM7UUFBQUM7UUFBQUU7UUFBQUM7UUFBQUM7UUFBQUM7UUFBQUM7UUFBQUM7UUFBQUs7UUFBQW5CO1FBQUFFO0lBUko7WUFDVTdCO1lBQVJFO1lBQUFFO1lBQUFFO1lBQUFHO1lBQUFLO1lBQUFDO1lBQUFHO1lBQUFFO1lBQUFJOztZQU9FSzs7Ozs7Ozs7S0F3QkU7Ozs7O1NBTEE7O1NBSUE7U0FDQSxVQUFBO1NBQUEsT0FBQTtRQUFnQztNQUFoQztRQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUtBOzs7OztTQWxCQTs7U0FpQkE7U0FDQSxVQUFBO1NBQUEsT0FBQTtRQUFvQjtNQUFwQjtRQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU1Bc0I7dUJBQUFBO0lBMUNJbkQ7SUFBUkU7SUFBQUU7SUFBQUU7SUFBQUc7SUFBQUs7SUFBQUM7SUFBQUc7SUFBQUU7SUFBQUk7SUFFSUs7Ozs7Ozs7OztPQUZJN0I7T0FBUkU7T0FBQUU7T0FBQVU7T0FBQUw7T0FBQUg7T0FBQVM7T0FBQUc7T0FBQUU7T0FBQUk7T0FFSUs7Ozs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBDb3JlXG5cbm1vZHVsZSBNYWtlIChNIDogc2lnXG4gIHZhbCBhbV9ydW5uaW5nX3Rlc3QgOiBib29sXG5lbmQpID1cbnN0cnVjdFxuICB0eXBlICdhIHQgPSAnYSBbQEBkZXJpdmluZyBiaW5faW8sIGNvbXBhcmUsIGVxdWFsLCBzZXhwXVxuXG4gIGxldCBzZXhwX29mX3Qgc2V4cF9vZl9hIGEgPVxuICAgIGlmIE0uYW1fcnVubmluZ190ZXN0IHRoZW4gU2V4cC5BdG9tIFwiPGhpZGRlbl9pbl90ZXN0PlwiIGVsc2Ugc2V4cF9vZl9hIGFcbiAgOztcblxuICBtb2R1bGUgV2l0aF9ub25fcm91bmR0cmlwcGluZ19pbl90ZXN0X29mX3NleHAgPSBzdHJ1Y3RcbiAgICB0eXBlIG5vbnJlYyAnYSB0ID0gJ2EgdCBbQEBkZXJpdmluZyBiaW5faW8sIGNvbXBhcmUsIGVxdWFsLCBzZXhwXVxuICBlbmRcbmVuZFxuXG5sZXQldGVzdF9tb2R1bGUgXyA9XG4gIChtb2R1bGUgc3RydWN0XG4gICAgbW9kdWxlIFR1cm5lZF9vZmYgPSBzdHJ1Y3RcbiAgICAgIG1vZHVsZSBTZXhwX2hpZGRlbl9pbl90ZXN0X3R1cm5lZF9vZmYgPSBNYWtlIChzdHJ1Y3RcbiAgICAgICAgbGV0IGFtX3J1bm5pbmdfdGVzdCA9IGZhbHNlXG4gICAgICBlbmQpXG5cbiAgICAgIHR5cGUgbm9ucmVjIHQgPSBpbnQgU2V4cF9oaWRkZW5faW5fdGVzdF90dXJuZWRfb2ZmLnQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgICBlbmRcblxuICAgIG1vZHVsZSBUdXJuZWRfb24gPSBzdHJ1Y3RcbiAgICAgIG1vZHVsZSBTZXhwX2hpZGRlbl9pbl90ZXN0X3R1cm5lZF9vbiA9IE1ha2UgKHN0cnVjdFxuICAgICAgICBsZXQgYW1fcnVubmluZ190ZXN0ID0gdHJ1ZVxuICAgICAgZW5kKVxuXG4gICAgICB0eXBlIG5vbnJlYyB0ID0gaW50IFNleHBfaGlkZGVuX2luX3Rlc3RfdHVybmVkX29uLnQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgICBlbmRcblxuICAgIGxldCVleHBlY3RfdGVzdCBcIlR1cm5lZCBvblwiID1cbiAgICAgIHByaW50X3MgWyVzZXhwICgxMDI0IDogVHVybmVkX29uLnQpXTtcbiAgICAgIFslZXhwZWN0IHt8IDxoaWRkZW5faW5fdGVzdD4gfH1dXG4gICAgOztcblxuICAgIGxldCVleHBlY3RfdGVzdCBcIlR1cm5lZCBvZmZcIiA9XG4gICAgICBwcmludF9zIChbJXNleHBfb2Y6IFR1cm5lZF9vZmYudF0gMTAyNCk7XG4gICAgICBbJWV4cGVjdCB7fCAxMDI0IHx9XVxuICAgIDs7XG4gIGVuZClcbjs7XG5cbmluY2x1ZGUgTWFrZSAoc3RydWN0XG4gIGxldCBhbV9ydW5uaW5nX3Rlc3QgPSBhbV9ydW5uaW5nX3Rlc3RcbmVuZClcbiJdfQ==
