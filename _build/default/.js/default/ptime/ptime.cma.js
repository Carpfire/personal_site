// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ptime
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Int64, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_d_s = "%d%s",
    cst_dd = "%dd",
    cst_dh = "%dh",
    cst_dmin = "%dmin",
    cst_ds = "%ds",
    cst_dy = "%dy",
    cst_0_Ld = ".%0*Ld",
    cst_1 = "<1>",
    cst_h = "<h>",
    cst = "@ ",
    cst_input = "input",
    cst_min = "min",
    cst_ms$1 = "ms",
    cst_us$1 = "us",
    caml_check_bound = runtime.caml_check_bound,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mod = runtime.caml_int64_mod,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_float = runtime.caml_int64_to_float,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessthan = runtime.caml_lessthan,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    partial = [4, 0, [0, 2, 2], 0, 0],
    partial$0 = [4, 0, [0, 2, 2], 0, 0],
    acc = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    ps_count_in_ps = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    ps_count_in_ns = runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
    ps_count_in_100ns = runtime.caml_int64_create_lo_mi_hi(100000, 0, 0),
    ps_count_in_us = runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
    ps_count_in_100us = runtime.caml_int64_create_lo_mi_hi(16113920, 5, 0),
    ps_count_in_ms = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    ps_count_in_100ms = runtime.caml_int64_create_lo_mi_hi(7792640, 5960, 0),
    ps_count_in_s = runtime.caml_int64_create_lo_mi_hi(10817536, 59604, 0),
    ps_count_in_min = runtime.caml_int64_create_lo_mi_hi(11517952, 3576278, 0),
    ps_count_in_hour =
      runtime.caml_int64_create_lo_mi_hi(3211264, 13250129, 12),
    ps_count_in_day =
      runtime.caml_int64_create_lo_mi_hi(9961472, 16013212, 306),
    ps_day_max = runtime.caml_int64_create_lo_mi_hi(9961471, 16013212, 306),
    epoch = [0, 0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    zero = [0, 0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    min = [0, -719528, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    max = [0, 2932896, ps_day_max],
    stdlib_abs = Stdlib[18],
    _ag_ =
      [0,
       [4,
        0,
        [0, 2, 4],
        0,
        [12,
         45,
         [4,
          0,
          [0, 2, 2],
          0,
          [12,
           45,
           [4,
            0,
            [0, 2, 2],
            0,
            [12,
             32,
             [4,
              0,
              [0, 2, 2],
              0,
              [12, 58, [4, 0, [0, 2, 2], 0, [12, 58, partial]]]]]]]]]],
       "%04d-%02d-%02d %02d:%02d:%02d"],
    _ah_ = [0, [12, 46, [7, 0, [1, 2], 0, 0]], cst_0_Ld],
    _ai_ =
      [0,
       [12, 32, [0, [4, 0, [0, 2, 2], 0, [12, 58, [4, 0, [0, 2, 2], 0, 0]]]]],
       " %c%02d:%02d"],
    _af_ = [0, [2, 0, 0], "%s"],
    _ab_ =
      [0,
       [4,
        0,
        [0, 2, 4],
        0,
        [12,
         45,
         [4,
          0,
          [0, 2, 2],
          0,
          [12,
           45,
           [4,
            0,
            [0, 2, 2],
            0,
            [0,
             [4,
              0,
              [0, 2, 2],
              0,
              [12, 58, [4, 0, [0, 2, 2], 0, [12, 58, partial$0]]]]]]]]]],
       "%04d-%02d-%02d%c%02d:%02d:%02d"],
    _ac_ = [0, [12, 46, [7, 0, [1, 2], 0, 0]], cst_0_Ld],
    _ae_ = [0, [12, 90, 0], "Z"],
    _ad_ =
      [0,
       [0, [4, 0, [0, 2, 2], 0, [12, 58, [4, 0, [0, 2, 2], 0, 0]]]],
       "%c%02d:%02d"],
    _aa_ = [0, 0, 1],
    _$_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    ___ = [0, 0],
    _X_ = [0, 0],
    _Z_ = [0, 122, 0],
    _Y_ = [0, 43, [0, 45, [0, 90, 0]]],
    _W_ = runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
    _V_ = [0, 122, 0],
    _U_ = [0, 46, [0, 43, [0, 45, [0, 90, 0]]]],
    _T_ = [0, 116, [0, 32, 0]],
    _S_ = [0, 84, 0],
    _R_ =
      caml_list_of_js_array
       ([498443355, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]),
    _Q_ =
      [0,
       [18,
        [1, [0, [11, cst_h, 0], cst_h]],
        [15, [11, ": ", [15, [17, 0, 0]]]]],
       "@[<h>%a: %a@]"],
    _P_ = [0, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]], "%d-%d"],
    _N_ = [0, [17, [0, cst, 1, 0], [1, 0]], "@ %C"],
    _L_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "invalid",
         [17,
          [0, cst, 1, 0],
          [11, "time", [17, [0, cst, 1, 0], [11, "stamp", [17, 0, 0]]]]]]],
       "@[invalid@ time@ stamp@]"],
    _M_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11, "trailing", [17, [0, cst, 1, 0], [11, cst_input, [17, 0, 0]]]]],
       "@[trailing@ input@]"],
    _K_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "unexpected",
         [17,
          [0, cst, 1, 0],
          [11,
           "end",
           [17,
            [0, cst, 1, 0],
            [11, "of", [17, [0, cst, 1, 0], [11, cst_input, [17, 0, 0]]]]]]]]],
       "@[unexpected@ end@ of@ input@]"],
    _O_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "expected",
         [17,
          [0, cst, 1, 0],
          [12,
           97,
           [17,
            [0, cst, 1, 0],
            [11,
             "character",
             [17, [0, cst, 1, 0], [11, "in:", [15, [17, 0, 0]]]]]]]]]],
       "@[expected@ a@ character@ in:%a@]"],
    _I_ = [0, 0, 0, 0],
    _F_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _G_ =
      [0,
       [11,
        "illegal ptime timestamp: (",
        [4, 0, 0, 0, [12, 44, [7, 0, 0, 0, [12, 41, 0]]]]],
       "illegal ptime timestamp: (%d,%Ld)"],
    _E_ = [0, [4, 0, 0, 0, [11, "ps", 0]], "%dps"],
    _B_ = [0, [4, 0, 0, 0, [2, 0, 0]], cst_d_s],
    _C_ = [0, [4, 0, 0, 0, [2, 0, 0]], cst_d_s],
    _D_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, [0, 2, 3], 0, [2, 0, 0]]]],
       "%d.%03d%s"],
    _y_ = [0, [4, 0, 0, 0, [11, cst_min, 0]], cst_dmin],
    _A_ =
      [0,
       [4, 0, 0, 0, [12, 46, [4, 0, [0, 2, 3], 0, [12, 115, 0]]]],
       "%d.%03ds"],
    _z_ = [0, [4, 0, 0, 0, [12, 115, 0]], cst_ds],
    _v_ = [0, [4, 0, 0, 0, [12, 104, 0]], cst_dh],
    _w_ = [0, [4, 0, 0, 0, [11, cst_min, 0]], cst_dmin],
    _x_ = [0, [4, 0, 0, 0, [12, 115, 0]], cst_ds],
    _s_ = [0, [4, 0, 0, 0, [12, 100, 0]], cst_dd],
    _t_ = [0, [4, 0, 0, 0, [12, 104, 0]], cst_dh],
    _u_ = [0, [4, 0, 0, 0, [11, cst_min, 0]], cst_dmin],
    _o_ = [0, [4, 0, 0, 0, [11, "y1d", 0]], "%dy1d"],
    _p_ = [0, [4, 0, 0, 0, [12, 121, 0]], cst_dy],
    _q_ = [0, [4, 0, 0, 0, [12, 100, 0]], cst_dd],
    _r_ = [0, [4, 0, 0, 0, [12, 104, 0]], cst_dh],
    _m_ = [0, [4, 0, 0, 0, [12, 121, 0]], cst_dy],
    _n_ = [0, [4, 0, 0, 0, [12, 100, 0]], cst_dd],
    _l_ =
      [0,
       [18,
        [1, [0, [11, cst_1, 0], cst_1]],
        [12,
         40,
         [4,
          0,
          0,
          0,
          [12, 44, [17, [0, "@,", 0, 0], [7, 0, 0, 0, [12, 41, [17, 0, 0]]]]]]]],
       "@[<1>(%d,@,%Ld)@]"],
    _k_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _i_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ =
      [0,
       [11,
        "illegal ptime time span: (",
        [4, 0, 0, 0, [12, 44, [7, 0, 0, 0, [12, 41, 0]]]]],
       "illegal ptime time span: (%d,%Ld)"],
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _j_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(10817536, 59604, 0),
       runtime.caml_int64_create_lo_mi_hi(7792640, 5960, 0),
       runtime.caml_int64_create_lo_mi_hi(779264, 596, 0),
       runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
       runtime.caml_int64_create_lo_mi_hi(16113920, 5, 0),
       runtime.caml_int64_create_lo_mi_hi(10000000, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1000000, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(100000, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(10000, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1000, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(100, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 0)],
    cst_ms = cst_ms$1,
    cst_s = "s",
    cst_us = cst_us$1,
    cst_ms$0 = cst_ms$1,
    cst_ns = "ns",
    cst_us$0 = cst_us$1,
    _H_ = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    _J_ = [0, 4153708, 3853996, 4203428, 4349046, 4200545, 3506557, 4149254],
    cst_Ptime_RFC3339 = "Ptime.RFC3339",
    _ak_ = [0, 0];
   function neg(param){
    var d = param[1];
    if(! caml_notequal(param[2], _a_)) return [0, - d | 0, _b_];
    var ps = param[2];
    return [0, - (d + 1 | 0) | 0, caml_int64_sub(ps_count_in_day, ps)];
   }
   function add(param, _bh_){
    var
     ps1 = _bh_[2],
     d1 = _bh_[1],
     ps0 = param[2],
     d0 = param[1],
     d = d0 + d1 | 0,
     ps = caml_int64_add(ps0, ps1),
     ps_clamp = caml_int64_mod(ps, ps_count_in_day),
     d$0 = d + caml_call2(Stdlib_Int64[15], ps, ps_clamp) | 0;
    return [0, d$0, ps_clamp];
   }
   function sub(s0, s1){return add(s0, neg(s1));}
   function abs(s){var d = s[1]; return 0 <= d ? s : neg(s);}
   function v(s){
    var ps = s[2], d = s[1];
    if(! caml_lessthan(ps, _c_) && ! caml_greaterthan(ps, ps_day_max))
     return s;
    var _bg_ = caml_call3(Stdlib_Format[140], _d_, d, ps);
    return caml_call1(Stdlib[1], _bg_);
   }
   function of_d_ps(s){
    var ps = s[2];
    if(! caml_lessthan(ps, _e_) && ! caml_greaterthan(ps, ps_day_max))
     return [0, s];
    return 0;
   }
   function unsafe_of_d_ps(s){return s;}
   function unsafe_of_d_ps_option(s){return s;}
   function to_d_ps(s){return s;}
   function of_int_s(secs){
    var
     d = caml_call1(stdlib_abs, secs),
     s =
       [0,
        d / 86400 | 0,
        caml_int64_mul(caml_int64_of_int32(d % 86400 | 0), ps_count_in_s)];
    return 0 <= secs ? s : neg(s);
   }
   var
    day_int_min = Stdlib[20] / 86400 | 0,
    day_int_max = Stdlib[19] / 86400 | 0;
   function to_int_s(param){
    var ps = param[2], d = param[1];
    if(d >= day_int_min && day_int_max >= d){
     var
      days_s = d * 86400 | 0,
      day_s = caml_int64_to_int32(caml_int64_div(ps, ps_count_in_s)),
      secs = days_s + day_s | 0;
     return secs < days_s ? 0 : [0, secs];
    }
    return 0;
   }
   var min_int_float = Stdlib[20], max_int_float = Stdlib[19];
   function of_float_s(secs){
    if(secs != secs) return 0;
    var days = Math.floor(secs / 86400.);
    if(! (days < min_int_float) && ! (max_int_float < days)){
     var rem_s = secs % 86400., rem_s$0 = rem_s < 0. ? 86400. + rem_s : rem_s;
     if(86400. <= rem_s$0){
      var days$0 = days + 1.;
      return max_int_float < days$0 ? 0 : [0, [0, days$0 | 0, _f_]];
     }
     var
      match = runtime.caml_modf_float(rem_s$0),
      rem_s$1 = match[2],
      frac_s = match[1],
      rem_ps = caml_int64_mul(caml_int64_of_float(rem_s$1), ps_count_in_s),
      frac_ps = caml_int64_of_float(frac_s * 1000000000000.);
     return [0, [0, days | 0, caml_int64_add(rem_ps, frac_ps)]];
    }
    return 0;
   }
   function to_float_s(param){
    var
     ps = param[2],
     d = param[1],
     days_s = d * 86400.,
     day_s = caml_int64_to_float(caml_int64_div(ps, ps_count_in_s)),
     day_rem_ps = caml_int64_to_float(caml_int64_mod(ps, ps_count_in_s));
    return days_s + day_s + day_rem_ps * 1e-12;
   }
   function equal(param, _bd_){
    var
     ps1 = _bd_[2],
     d1 = _bd_[1],
     ps0 = param[2],
     d0 = param[1],
     _be_ = 0 === caml_int_compare(d0, d1) ? 1 : 0,
     _bf_ = _be_ ? 0 === caml_call2(Stdlib_Int64[15], ps0, ps1) ? 1 : 0 : _be_;
    return _bf_;
   }
   function compare(param, _bc_){
    var
     ps1 = _bc_[2],
     d1 = _bc_[1],
     ps0 = param[2],
     d0 = param[1],
     c = caml_int_compare(d0, d1);
    return 0 === c ? runtime.caml_int64_compare(ps0, ps1) : c;
   }
   function round_div(a, b){
    return runtime.caml_equal(a, _g_)
            ? _h_
            : caml_int64_div(caml_int64_add(a, caml_int64_div(b, _i_)), b);
   }
   var frac_div = _j_.slice();
   function round(frac, t){
    var
     sign = t[1],
     frac$0 = 0 <= frac ? 12 < frac ? 12 : frac : 0,
     match = 0 <= sign ? t : neg(t),
     ps = match[2],
     d = match[1],
     _bb_ = caml_check_bound(frac_div, frac$0)[1 + frac$0],
     rps = caml_int64_mul(round_div(ps, frac_div[1 + frac$0]), _bb_),
     t$0 =
       caml_greaterthan(rps, ps_day_max) ? [0, d + 1 | 0, _k_] : [0, d, rps];
    return 0 <= sign ? t$0 : neg(t$0);
   }
   function truncate(frac, t){
    var
     sign = t[1],
     frac$0 = 0 <= frac ? 12 < frac ? 12 : frac : 0,
     match = 0 <= sign ? t : neg(t),
     ps = match[2],
     d = match[1],
     tps =
       caml_int64_sub
        (ps,
         caml_int64_mod(ps, caml_check_bound(frac_div, frac$0)[1 + frac$0]));
    return 0 <= sign ? [0, d, tps] : neg([0, d, tps]);
   }
   function truncate_down(frac, param){
    var ps = param[2], d = param[1];
    return [0,
            d,
            caml_int64_sub
             (ps,
              caml_int64_mod(ps, caml_check_bound(frac_div, frac)[1 + frac]))];
   }
   function dump(ppf, param){
    var ps = param[2], d = param[1];
    return caml_call4(Stdlib_Format[137], ppf, _l_, d, ps);
   }
   function divide_ps(carry, ps, hi, lo){
    var
     hi_d = caml_int64_to_int32(caml_int64_div(ps, hi)),
     rem_ps = caml_int64_mod(ps, hi),
     lo_d = caml_int64_to_int32(round_div(rem_ps, lo));
    return lo_d === carry ? [0, hi_d + 1 | 0, 0] : [0, hi_d, lo_d];
   }
   function pp_unit(higher_str, hi, hi_str, frac_limit, lo, ppf, neg, ps){
    function pp_unit_integral(ppf, neg, h){
     if(1000 === h){
      var _a$_ = neg ? -1 : 1;
      return caml_call4(Stdlib_Format[137], ppf, _B_, _a$_, higher_str);
     }
     var _ba_ = neg ? - h | 0 : h;
     return caml_call4(Stdlib_Format[137], ppf, _C_, _ba_, hi_str);
    }
    if(! caml_lessthan(ps, frac_limit)){
     var ms = divide_ps(1, ps, hi, hi)[1];
     return pp_unit_integral(ppf, neg, ms);
    }
    var match = divide_ps(1000, ps, hi, lo), l = match[2], h = match[1];
    if(100 > h && 0 !== l){
     var h$0 = neg ? - h | 0 : h;
     return caml_call5(Stdlib_Format[137], ppf, _D_, h$0, l, hi_str);
    }
    return pp_unit_integral(ppf, neg, h);
   }
   function pp(ppf, s$2){
    var
     sign = s$2[1],
     neg = sign < 0 ? 1 : 0,
     match$2 = abs(s$2),
     d$1 = match$2[1];
    if(0 === d$1){
     var ps$0 = match$2[2];
     if(caml_greaterequal(ps$0, ps_count_in_hour)){
      var
       match = divide_ps(60, ps$0, ps_count_in_hour, ps_count_in_min),
       m = match[2],
       h$1 = match[1];
      if(24 === h$1){
       var _a7_ = neg ? -1 : 1;
       return caml_call3(Stdlib_Format[137], ppf, _s_, _a7_);
      }
      var h$2 = neg ? - h$1 | 0 : h$1;
      caml_call3(Stdlib_Format[137], ppf, _t_, h$2);
      if(0 !== m) caml_call3(Stdlib_Format[137], ppf, _u_, m);
      return 0;
     }
     if(caml_greaterequal(ps$0, ps_count_in_min)){
      var
       match$0 = divide_ps(60, ps$0, ps_count_in_min, ps_count_in_s),
       s = match$0[2],
       m$0 = match$0[1];
      if(60 === m$0){
       var _a8_ = neg ? -1 : 1;
       return caml_call3(Stdlib_Format[137], ppf, _v_, _a8_);
      }
      var m$1 = neg ? - m$0 | 0 : m$0;
      caml_call3(Stdlib_Format[137], ppf, _w_, m$1);
      if(0 !== s) caml_call3(Stdlib_Format[137], ppf, _x_, s);
      return 0;
     }
     if(! caml_greaterequal(ps$0, ps_count_in_s)){
      if(caml_greaterequal(ps$0, ps_count_in_ms))
       return pp_unit
               (cst_s,
                ps_count_in_ms,
                cst_ms,
                ps_count_in_100ms,
                ps_count_in_us,
                ppf,
                neg,
                ps$0);
      if(caml_greaterequal(ps$0, ps_count_in_us))
       return pp_unit
               (cst_ms$0,
                ps_count_in_us,
                cst_us,
                ps_count_in_100us,
                ps_count_in_ns,
                ppf,
                neg,
                ps$0);
      if(caml_greaterequal(ps$0, ps_count_in_ns))
       return pp_unit
               (cst_us$0,
                ps_count_in_ns,
                cst_ns,
                ps_count_in_100ns,
                ps_count_in_ps,
                ppf,
                neg,
                ps$0);
      var ps = caml_int64_to_int32(ps$0), _a__ = neg ? - ps | 0 : ps;
      return caml_call3(Stdlib_Format[137], ppf, _E_, _a__);
     }
     var
      match$1 = divide_ps(1000, ps$0, ps_count_in_s, ps_count_in_ms),
      ms = match$1[2],
      s$0 = match$1[1];
     if(60 === s$0){
      var _a9_ = neg ? -1 : 1;
      return caml_call3(Stdlib_Format[137], ppf, _y_, _a9_);
     }
     var s$1 = neg ? - s$0 | 0 : s$0;
     return 0 === ms
             ? caml_call3(Stdlib_Format[137], ppf, _z_, s$1)
             : caml_call4(Stdlib_Format[137], ppf, _A_, s$1, ms);
    }
    var ps$1 = match$2[2];
    if(365 < d$1){
     var max_d = Stdlib[19] / 4 | 0;
     if(max_d < d$1)
      var rem_d = d$1 % 365 | 0, y = d$1 / 365 | 0;
     else
      var
       y$2 = (d$1 * 4 | 0) / 1461 | 0,
       rem_d$0 = d$1 - ((y$2 * 1461 | 0) / 4 | 0) | 0,
       rem_d = rem_d$0,
       y = y$2;
     var
      days = rem_d + caml_int64_to_int32(round_div(ps$1, ps_count_in_day)) | 0;
     if(366 === days)
      var days$0 = 1, y$0 = y + 1 | 0;
     else
      var days$0 = days, y$0 = y;
     var y$1 = neg ? - y$0 | 0 : y$0;
     caml_call3(Stdlib_Format[137], ppf, _m_, y$1);
     if(0 !== days$0) caml_call3(Stdlib_Format[137], ppf, _n_, days$0);
     return 0;
    }
    var h = divide_ps(1, ps$1, ps_count_in_hour, ps_count_in_hour)[1];
    if(24 === h) var h$0 = 0, d = d$1 + 1 | 0; else var h$0 = h, d = d$1;
    if(366 === d){
     var _a5_ = neg ? -1 : 1;
     return caml_call3(Stdlib_Format[137], ppf, _o_, _a5_);
    }
    if(365 === d && 6 <= h$0){
     var _a6_ = neg ? -1 : 1;
     return caml_call3(Stdlib_Format[137], ppf, _p_, _a6_);
    }
    var d$0 = neg ? - d | 0 : d;
    caml_call3(Stdlib_Format[137], ppf, _q_, d$0);
    if(0 !== h$0) caml_call3(Stdlib_Format[137], ppf, _r_, h$0);
    return 0;
   }
   function v$0(s){
    var ps = s[2], d = s[1];
    if
     (!
      caml_lessthan(ps, _F_)
      && ! caml_greaterthan(ps, ps_day_max) && d >= -719528 && 2932896 >= d)
     return s;
    var _a4_ = caml_call3(Stdlib_Format[140], _G_, d, ps);
    return caml_call1(Stdlib[1], _a4_);
   }
   function unsafe_of_d_ps$0(s){return s;}
   function of_span(span){
    var d = span[1];
    if(d >= -719528 && 2932896 >= d) return [0, span];
    return 0;
   }
   function to_span(t){return t;}
   function of_float_s$0(secs){
    var match = of_float_s(secs);
    if(! match) return 0;
    var d = match[1];
    return of_span(d);
   }
   function frac_s(param){
    var ps = param[2];
    return [0, 0, caml_int64_mod(ps, ps_count_in_s)];
   }
   function is_earlier(t, than){return -1 === compare(t, than) ? 1 : 0;}
   function is_later(t, than){return 1 === compare(t, than) ? 1 : 0;}
   function add_span(t, d){return of_span(add(t, d));}
   function sub_span(t, d){return of_span(sub(t, d));}
   function diff(t1, t0){return sub(t1, t0);}
   var mlen = _H_.slice();
   function of_date_time(param){
    var
     t = param[2],
     tz_offset_s = t[2],
     match$0 = t[1],
     ss$0 = match$0[3],
     mm$0 = match$0[2],
     hh$0 = match$0[1],
     date = param[1],
     d = date[3],
     m$0 = date[2],
     y$0 = date[1],
     _aR_ = 0 <= y$0 ? 1 : 0;
    if(_aR_){
     var _aS_ = y$0 <= 9999 ? 1 : 0;
     if(_aS_){
      var _aT_ = 1 <= m$0 ? 1 : 0;
      if(_aT_){
       var _aU_ = m$0 <= 12 ? 1 : 0;
       if(_aU_){
        var _aV_ = 1 <= d ? 1 : 0;
        if(_aV_){
         a:
         {
          if(2 === m$0){
           var _aN_ = 0 === (y$0 % 4 | 0) ? 1 : 0;
           if(_aN_)
            var
             _aO_ = 0 !== (y$0 % 100 | 0) ? 1 : 0,
             _aP_ = _aO_ || (0 === (y$0 % 400 | 0) ? 1 : 0);
           else
            var _aP_ = _aN_;
           if(_aP_){var _aW_ = 29; break a;}
          }
          var
           _aQ_ = m$0 - 1 | 0,
           _aW_ = caml_check_bound(mlen, _aQ_)[1 + _aQ_];
         }
         var _aX_ = d <= _aW_ ? 1 : 0;
        }
        else
         var _aX_ = _aV_;
       }
       else
        var _aX_ = _aU_;
      }
      else
       var _aX_ = _aT_;
     }
     else
      var _aX_ = _aS_;
    }
    else
     var _aX_ = _aR_;
    if(_aX_){
     var
      match = t[1],
      ss = match[3],
      mm = match[2],
      hh = match[1],
      _aY_ = 0 <= hh ? 1 : 0;
     if(_aY_){
      var _aZ_ = hh <= 23 ? 1 : 0;
      if(_aZ_){
       var _a0_ = 0 <= mm ? 1 : 0;
       if(_a0_){
        var _a1_ = mm <= 59 ? 1 : 0;
        if(_a1_)
         var _a2_ = 0 <= ss ? 1 : 0, _a3_ = _a2_ ? ss <= 60 ? 1 : 0 : _a2_;
        else
         var _a3_ = _a1_;
       }
       else
        var _a3_ = _a0_;
      }
      else
       var _a3_ = _aZ_;
     }
     else
      var _a3_ = _aY_;
     if(_a3_){
      var
       day = date[3],
       month = date[2],
       year = date[1],
       a = (14 - month | 0) / 12 | 0,
       y = (year + 4800 | 0) - a | 0,
       m = (month + (12 * a | 0) | 0) - 3 | 0,
       d$0 =
         ((((((day + (((153 * m | 0) + 2 | 0) / 5 | 0) | 0) + (365 * y | 0)
         | 0)
         + (y / 4 | 0)
         | 0)
         - (y / 100 | 0)
         | 0)
         + (y / 400 | 0)
         | 0)
         - 32045
         | 0)
         - 2440588
         | 0,
       hh_ps = caml_int64_mul(caml_int64_of_int32(hh$0), ps_count_in_hour),
       mm_ps = caml_int64_mul(caml_int64_of_int32(mm$0), ps_count_in_min),
       ss_ps = caml_int64_mul(caml_int64_of_int32(ss$0), ps_count_in_s),
       ps = caml_int64_add(hh_ps, caml_int64_add(mm_ps, ss_ps));
      return sub_span([0, d$0, ps], of_int_s(tz_offset_s));
     }
    }
    return 0;
   }
   function to_date_time(opt, t){
    if(opt) var sth = opt[1], tz_offset_s = sth; else var tz_offset_s = 0;
    var match = add_span(t, of_int_s(tz_offset_s));
    if(match)
     var
      local = match[1],
      tz_offset_s$0 = tz_offset_s,
      ps = local[2],
      d$0 = local[1];
    else
     var ps$0 = t[2], d$1 = t[1], tz_offset_s$0 = 0, ps = ps$0, d$0 = d$1;
    var
     jd = d$0 + 2440588 | 0,
     a = jd + 32044 | 0,
     b = ((4 * a | 0) + 3 | 0) / 146097 | 0,
     c = a - ((146097 * b | 0) / 4 | 0) | 0,
     d = ((4 * c | 0) + 3 | 0) / 1461 | 0,
     e = c - ((1461 * d | 0) / 4 | 0) | 0,
     m = ((5 * e | 0) + 2 | 0) / 153 | 0,
     day = (e - (((153 * m | 0) + 2 | 0) / 5 | 0) | 0) + 1 | 0,
     month = (m + 3 | 0) - (12 * (m / 10 | 0) | 0) | 0,
     year = (((100 * b | 0) + d | 0) - 4800 | 0) + (m / 10 | 0) | 0,
     date = [0, year, month, day],
     hh = caml_int64_to_int32(caml_int64_div(ps, ps_count_in_hour)),
     hh_rem = caml_int64_mod(ps, ps_count_in_hour),
     mm = caml_int64_to_int32(caml_int64_div(hh_rem, ps_count_in_min)),
     mm_rem = caml_int64_mod(hh_rem, ps_count_in_min),
     ss = caml_int64_to_int32(caml_int64_div(mm_rem, ps_count_in_s));
    return [0, date, [0, [0, hh, mm, ss], tz_offset_s$0]];
   }
   function of_date(opt, date){
    if(opt) var sth = opt[1], tz = sth; else var tz = 0;
    return of_date_time([0, date, [0, _I_, tz]]);
   }
   function to_date(tz_offset_s, t){return to_date_time(tz_offset_s, t)[1];}
   function of_year(tz_offset_s, y){
    return of_date(tz_offset_s, [0, y, 1, 1]);
   }
   function to_year(opt, t){
    if(opt) var sth = opt[1], tz_offset_s = sth; else var tz_offset_s = 0;
    var match = add_span(t, of_int_s(tz_offset_s));
    if(match) var local_d = match[1][1], d$0 = local_d; else var d$0 = t[1];
    var
     jd = d$0 + 2440588 | 0,
     a = jd + 32044 | 0,
     b = ((4 * a | 0) + 3 | 0) / 146097 | 0,
     c = a - ((146097 * b | 0) / 4 | 0) | 0,
     d = ((4 * c | 0) + 3 | 0) / 1461 | 0,
     e = c - ((1461 * d | 0) / 4 | 0) | 0,
     m = ((5 * e | 0) + 2 | 0) / 153 | 0;
    return (((100 * b | 0) + d | 0) - 4800 | 0) + (m / 10 | 0) | 0;
   }
   function weekday_num(opt, t){
    if(opt) var sth = opt[1], tz_offset_s = sth; else var tz_offset_s = 0;
    var d = add(t, of_int_s(tz_offset_s))[1], i = (d + 4 | 0) % 7 | 0;
    return 0 <= i ? i : 7 + i | 0;
   }
   var wday = _J_.slice();
   function weekday(tz_offset_s, t){
    var _aM_ = weekday_num(tz_offset_s, t);
    return caml_check_bound(wday, _aM_)[1 + _aM_];
   }
   function pp_rfc3339_error(ppf, param){
    if(typeof param === "number")
     return 3456159 === param
             ? caml_call2(Stdlib_Format[137], ppf, _K_)
             : 415233371
               <= param
               ? caml_call2(Stdlib_Format[137], ppf, _L_)
               : caml_call2(Stdlib_Format[137], ppf, _M_);
    var cs = param[2];
    function pp_chars(ppf, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var cs = param$0[2], c = param$0[1];
      caml_call3(Stdlib_Format[137], ppf, _N_, c);
      var param$0 = cs;
     }
    }
    return caml_call4(Stdlib_Format[137], ppf, _O_, pp_chars, cs);
   }
   function pp_range(ppf, param){
    var e = param[2], s = param[1];
    return s === e
            ? caml_call2(Stdlib_Format[19], ppf, s)
            : caml_call4(Stdlib_Format[137], ppf, _P_, s, e);
   }
   function rfc3339_error_to_string(param){
    var err = param[2], r = param[1];
    return caml_call5
            (Stdlib_Format[141], _Q_, pp_range, r, pp_rfc3339_error, err);
   }
   function rfc3339_string_error(v){
    if(0 === v[0]) return v;
    var e = v[1][2];
    return [1, rfc3339_error_to_string(e)];
   }
   function rfc3339_error_to_msg(v){
    if(0 === v[0]) return v;
    var e = v[1][2];
    return [1, [0, 3854881, rfc3339_error_to_string(e)]];
   }
   var RFC3339 = [248, cst_Ptime_RFC3339, runtime.caml_fresh_oo_id(0)];
   function error(r, e){
    throw caml_maybe_attach_backtrace([0, RFC3339, r, e], 1);
   }
   function error_pos(p, e){return error([0, p, p], e);}
   function error_exp_digit(p){return error_pos(p, _R_);}
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function parse_digits(count, pos, max, s){
    var stop = (pos + count | 0) - 1 | 0;
    if(max < stop) return error_pos(max, 3456159);
    var k = pos, acc = 0;
    for(;;){
     if(stop < k) return acc;
     if(! is_digit(caml_string_get(s, k))) return error_exp_digit(k);
     var
      acc$0 = ((acc * 10 | 0) + caml_string_get(s, k) | 0) - 48 | 0,
      k$0 = k + 1 | 0,
      k = k$0,
      acc = acc$0;
    }
   }
   function parse_char(c, pos, max, s){
    if(max < pos) return error_pos(max, 3456159);
    if(caml_string_get(s, pos) === c) return;
    return error_pos(pos, [0, 498443355, [0, c, 0]]);
   }
   function of_rfc3339(opt, _aF_, _aE_, s){
    if(opt) var sth = opt[1], strict = sth; else var strict = 0;
    if(_aF_) var sth$0 = _aF_[1], sub = sth$0; else var sub = 0;
    if(_aE_) var sth$1 = _aE_[1], start = sth$1; else var start = 0;
    try{
     var s_len = runtime.caml_ml_string_length(s), max = s_len - 1 | 0;
     a:
     {
      if(0 !== s_len && 0 <= start && max >= start){
       var
        m_pos = start + 5 | 0,
        d_pos = m_pos + 3 | 0,
        hh_pos = d_pos + 3 | 0,
        mm_pos = hh_pos + 3 | 0,
        ss_pos = mm_pos + 3 | 0,
        decide_pos = ss_pos + 2 | 0,
        y = parse_digits(4, start, max, s);
       parse_char(45, m_pos - 1 | 0, max, s);
       var m = parse_digits(2, m_pos, max, s);
       parse_char(45, d_pos - 1 | 0, max, s);
       var d = parse_digits(2, d_pos, max, s), pos = hh_pos - 1 | 0;
       if(max < pos)
        error_pos(max, 3456159);
       else{
        var switcher = caml_string_get(s, pos) - 33 | 0;
        b:
        {
         if(82 < switcher >>> 0){
          if(84 >= switcher + 1 >>> 0 && ! strict){var _aA_ = 1; break b;}
         }
         else if(51 === switcher){var _aA_ = 1; break b;}
         var _aA_ = 0;
        }
        if(! _aA_){
         var _aB_ = strict ? 0 : _T_;
         error_pos(pos, [0, 498443355, caml_call2(Stdlib[37], _S_, _aB_)]);
        }
       }
       var hh = parse_digits(2, hh_pos, max, s);
       parse_char(58, mm_pos - 1 | 0, max, s);
       var mm = parse_digits(2, mm_pos, max, s);
       parse_char(58, ss_pos - 1 | 0, max, s);
       var ss = parse_digits(2, ss_pos, max, s);
       b:
       if(max < decide_pos)
        var match = error_pos(max, 3456159);
       else{
        var c = caml_string_get(s, decide_pos);
        c:
        {
         if(90 <= c){
          if(122 === c){
           if(! strict){var match = 18854; break b;}
          }
          else if(91 > c) break c;
         }
         else
          if(44 <= c){
           if(47 > c)
            switch(c - 44 | 0){
              case 0: break;
              case 1:
               break c;
              default: var match = 781960526; break b;
            }
          }
          else if(43 <= c) break c;
         var
          _aC_ = strict ? 0 : _V_,
          chars = caml_call2(Stdlib[37], _U_, _aC_),
          match = error_pos(decide_pos, [0, 498443355, chars]);
         break b;
        }
        var match = 18854;
       }
       if(781960526 <= match){
        var pos$0 = decide_pos + 1 | 0;
        b:
        if(max < pos$0)
         var _aH_ = error_pos(max, 3456159);
        else if(is_digit(caml_string_get(s, pos$0))){
         c:
         {
          var k = pos$0, acc$0 = acc, pow = ps_count_in_s;
          for(;;){
           if(max < k) break c;
           if(! is_digit(caml_string_get(s, k))) break;
           var count = (k - pos$0 | 0) + 1 | 0;
           if(12 < count)
            var k$0 = k + 1 | 0, k = k$0;
           else
            var
             pow$0 = caml_int64_div(pow, _W_),
             acc$1 =
               caml_int64_add
                (acc$0,
                 caml_int64_mul
                  (caml_int64_of_int32(caml_string_get(s, k) - 48 | 0), pow$0)),
             k$1 = k + 1 | 0,
             k = k$1,
             acc$0 = acc$1,
             pow = pow$0;
          }
          var _aH_ = [0, [0, acc$0], k];
          break b;
         }
         var _aH_ = error_pos(max, 3456159);
        }
        else
         var _aH_ = error_exp_digit(pos$0);
        var tz_pos = _aH_[2], frac = _aH_[1];
       }
       else
        var tz_pos = decide_pos, frac = 0;
       var
        parse_tz_mag =
          function(sign, hh_pos){
           var hh = parse_digits(2, hh_pos, max, s);
           a:
           if(strict){
            var mm_pos = hh_pos + 3 | 0;
            parse_char(58, mm_pos - 1 | 0, max, s);
            var mm_pos$0 = mm_pos, mm = parse_digits(2, mm_pos, max, s);
           }
           else{
            var next = hh_pos + 2 | 0;
            b:
            if(max >= next){
             if
              (58 !== caml_string_get(s, next)
               && ! is_digit(caml_string_get(s, next)))
              break b;
             var
              mm_pos$1 =
                58 === caml_string_get(s, next)
                 ? hh_pos + 3 | 0
                 : hh_pos + 2 | 0,
              mm$0 = parse_digits(2, mm_pos$1, max, s),
              mm_pos$0 = mm_pos$1,
              mm = mm$0;
             break a;
            }
            var mm_pos$0 = hh_pos, mm = 0;
           }
           if(23 < hh) return error([0, hh_pos, hh_pos + 1 | 0], 415233371);
           if(59 < mm)
            return error([0, mm_pos$0, mm_pos$0 + 1 | 0], 415233371);
           var
            secs = (hh * 3600 | 0) + (mm * 60 | 0) | 0,
            _aK_ = 0 === secs ? 1 : 0,
            _aL_ = _aK_ ? -1 === sign ? 1 : 0 : _aK_,
            tz_s = _aL_ ? 0 : [0, runtime.caml_mul(sign, secs)];
           return [0, tz_s, mm_pos$0 + 1 | 0];
          };
       b:
       if(max < tz_pos)
        var match$0 = error_pos(max, 3456159);
       else{
        var c$0 = caml_string_get(s, tz_pos);
        if(90 === c$0)
         var match$0 = [0, _X_, tz_pos];
        else{
         if(46 <= c$0){
          if(122 === c$0 && ! strict){
           var match$0 = [0, ___, tz_pos];
           break b;
          }
         }
         else if(43 <= c$0)
          switch(c$0 - 43 | 0){
            case 0:
             var match$0 = parse_tz_mag(1, tz_pos + 1 | 0); break b;
            case 1: break;
            default: var match$0 = parse_tz_mag(-1, tz_pos + 1 | 0); break b;
          }
         var
          _aD_ = strict ? 0 : _Z_,
          chars$0 = caml_call2(Stdlib[37], _Y_, _aD_),
          match$0 = error_pos(tz_pos, [0, 498443355, chars$0]);
        }
       }
       var last_pos = match$0[2], tz_s_opt = match$0[1];
       if(tz_s_opt) var s$0 = tz_s_opt[1], tz_s = s$0; else var tz_s = 0;
       var
        match$1 = of_date_time([0, [0, y, m, d], [0, [0, hh, mm, ss], tz_s]]);
       if(match$1){
        var t = match$1[1];
        b:
        {
         if(frac){
          var frac$0 = frac[1];
          if(caml_notequal(frac$0, _$_)){
           var match$2 = add_span(t, [0, 0, frac$0]);
           if(match$2){var t$0 = match$2[1], t$1 = t$0; break b;}
           var t$1 = error([0, start, last_pos], 415233371)[1];
           break b;
          }
         }
         var t$1 = t;
        }
        b:
        {
         if(! sub && last_pos !== max){
          var _aI_ = error_pos(last_pos + 1 | 0, -493009593);
          break b;
         }
         var _aI_ = [0, [0, t$1, tz_s_opt, (last_pos - start | 0) + 1 | 0]];
        }
        var _aJ_ = _aI_;
       }
       else
        var _aJ_ = error([0, start, last_pos], 415233371);
       var _aG_ = _aJ_;
       break a;
      }
      var _aG_ = error_pos(start, 3456159);
     }
     return _aG_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== RFC3339) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[3], r = exn[2];
     return [1, [0, 76606165, [0, r, e]]];
    }
   }
   function rfc3339_adjust_tz_offset(tz_offset_s){
    if
     (-86340 <= tz_offset_s
      && tz_offset_s <= 86340 && 0 === (tz_offset_s % 60 | 0))
     return [0, tz_offset_s, 0];
    return _aa_;
   }
   function s_frac_of_ps(frac, ps){
    return caml_int64_div
            (caml_int64_mod(ps, ps_count_in_s),
             caml_check_bound(frac_div, frac)[1 + frac]);
   }
   function to_rfc3339(opt, _au_, tz_offset_s, t){
    var ps = t[2];
    if(opt) var sth = opt[1], space = sth; else var space = 0;
    if(_au_) var sth$0 = _au_[1], frac = sth$0; else var frac = 0;
    var buf = caml_call1(Stdlib_Buffer[1], 255);
    if(tz_offset_s)
     var
      tz = tz_offset_s[1],
      _av_ = rfc3339_adjust_tz_offset(tz),
      tz_unknown = _av_[2],
      tz_offset_s$0 = _av_[1];
    else
     var tz_unknown = 1, tz_offset_s$0 = 0;
    var
     _aw_ = to_date_time([0, tz_offset_s$0], t),
     _ax_ = _aw_[2],
     tz_offset_s$1 = _ax_[2],
     _ay_ = _ax_[1],
     mm = _ay_[3],
     ss = _ay_[2],
     hh = _ay_[1],
     match = _aw_[1],
     d = match[3],
     m = match[2],
     y = match[1],
     dt_sep = space ? 32 : 84;
    caml_call9(Stdlib_Printf[5], buf, _ab_, y, m, d, dt_sep, hh, ss, mm);
    var frac$0 = 0 <= frac ? 12 < frac ? 12 : frac : 0;
    if(0 !== frac$0){
     var _az_ = s_frac_of_ps(frac$0, ps);
     caml_call4(Stdlib_Printf[5], buf, _ac_, frac$0, _az_);
    }
    a:
    {
     if(0 === tz_offset_s$1 && ! tz_unknown){
      caml_call2(Stdlib_Printf[5], buf, _ae_);
      break a;
     }
     b:
     {
      if(0 <= tz_offset_s$1 && ! tz_unknown){var tz_sign = 43; break b;}
      var tz_sign = 45;
     }
     var
      tz_min = caml_call1(Stdlib[18], tz_offset_s$1 / 60 | 0),
      tz_hh = tz_min / 60 | 0,
      tz_mm = tz_min % 60 | 0;
     caml_call5(Stdlib_Printf[5], buf, _ad_, tz_sign, tz_hh, tz_mm);
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function pp_rfc3339(space, frac_s, tz_offset_s, param, ppf, t){
    var _at_ = to_rfc3339(space, frac_s, tz_offset_s, t);
    return caml_call3(Stdlib_Format[137], ppf, _af_, _at_);
   }
   function pp_human(opt, tz_offset_s, param, ppf, t){
    var ps = t[2];
    if(opt) var sth = opt[1], frac = sth; else var frac = 0;
    if(tz_offset_s)
     var
      tz = tz_offset_s[1],
      _ao_ = rfc3339_adjust_tz_offset(tz),
      tz_unknown = _ao_[2],
      tz_offset_s$0 = _ao_[1];
    else
     var tz_unknown = 1, tz_offset_s$0 = 0;
    var
     _ap_ = to_date_time([0, tz_offset_s$0], t),
     _aq_ = _ap_[2],
     tz_offset_s$1 = _aq_[2],
     _ar_ = _aq_[1],
     mm = _ar_[3],
     ss = _ar_[2],
     hh = _ar_[1],
     match = _ap_[1],
     d = match[3],
     m = match[2],
     y = match[1];
    caml_call8(Stdlib_Format[137], ppf, _ag_, y, m, d, hh, ss, mm);
    var frac$0 = 0 <= frac ? 12 < frac ? 12 : frac : 0;
    if(0 !== frac$0){
     var _as_ = s_frac_of_ps(frac$0, ps);
     caml_call4(Stdlib_Format[137], ppf, _ah_, frac$0, _as_);
    }
    a:
    {
     if(0 <= tz_offset_s$1 && ! tz_unknown){var tz_sign = 43; break a;}
     var tz_sign = 45;
    }
    var
     tz_min = caml_call1(Stdlib[18], tz_offset_s$1 / 60 | 0),
     tz_hh = tz_min / 60 | 0,
     tz_mm = tz_min % 60 | 0;
    caml_call5(Stdlib_Format[137], ppf, _ai_, tz_sign, tz_hh, tz_mm);
    return 0;
   }
   var _aj_ = 0, _al_ = 0;
   function pp$0(_am_, _an_){return pp_human(_al_, _ak_, _aj_, _am_, _an_);}
   var
    Ptime =
      [0,
       [0,
        v,
        zero,
        of_d_ps,
        unsafe_of_d_ps,
        unsafe_of_d_ps_option,
        to_d_ps,
        of_int_s,
        to_int_s,
        of_float_s,
        to_float_s,
        equal,
        compare,
        neg,
        add,
        sub,
        abs,
        round,
        truncate,
        pp,
        dump],
       v$0,
       epoch,
       min,
       max,
       of_span,
       to_span,
       unsafe_of_d_ps$0,
       of_float_s$0,
       to_float_s,
       truncate_down,
       frac_s,
       equal,
       compare,
       is_earlier,
       is_later,
       add_span,
       sub_span,
       diff,
       of_date_time,
       to_date_time,
       of_date,
       to_date,
       of_year,
       to_year,
       weekday,
       weekday_num,
       pp_rfc3339_error,
       rfc3339_error_to_msg,
       rfc3339_string_error,
       of_rfc3339,
       to_rfc3339,
       pp_rfc3339,
       pp_human,
       pp$0,
       dump];
   runtime.caml_register_global(101, Ptime, "Ptime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwdGltZS5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJO0k7STs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7STt1Qzs7SSw4QjtHOztJOzs7Ozs7SyxLO0ssVztlO0k7O3dCLHdCO2lDOzs7SSxLLDRCO0s7SSxXO0ksTzs7OztJLEssNEI7SztJOzs4QixTO3FDLFM7dUIsUzs7STtLLEk7Szs7O1EsZTtJO0c7Ozs7Ozs7Szs7TSxRLG9COzs7O0k7O0csZ0M7O0ksaUI7SSxXOztLLEk7O007OztLO00sUTs7O00sUyxlO00sVTtLLHlCOztJO0c7O0k7OztLO0ssUSxvQjtLLGEsb0I7STs7Ozs7Ozs7O3lCOzs7Ozs7Ozs7O0ksaUI7OztJLE87O2MsZSxrQjtHOzs7STs7SztLOzs7SztLLE07SztPO0k7OztJOztLO0s7OztLO087O1M7STs7OztJOztZOztjOzs7O0ksTzs7O0k7SyxPLG9CO0ssUztLLE87O0c7OztLOzs7OztLLE87STtJLEs7O0s7O0ksSTs7O0ssTzs7STtHOztJOzs7Szs7OztLLEc7TTtPOzs7TTs7TyxPOzs7TTtrQjtNOztLLEc7TTtPOzs7TTs7TyxPOzs7TTtrQjtNOztLLEs7TSxHOzs7Ozs7Ozs7O00sRzs7Ozs7Ozs7OztNLEc7Ozs7Ozs7Ozs7TSxvQzs7O0s7TTs7O0s7O00sTzs7O0s7ZTtlOzs7STs7Ozs7Ozs7Ozs7cUI7Ozs7OztLO3NCO0s7Ozs7OztLLE87Ozs7SyxPOzs7STtrQjtJOzs7Ozs7TTtXO0s7SSxXO0ksTzs7Z0MsUzs7O3FDO0k7O3VCLFM7O0k7Z0I7O0k7Rzs7O0ksYzs7Z0MsdUM7OEIsc0M7MkIsMEI7MkIsMEI7eUIsbUI7RyxXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Vzs7VTtXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0s7TTs7Ozs7OztPOzs7Ozs7Ozs7Ozs7O08sUSxlO08sUSxlO08sUSxlO08sSyxzQjtNOzs7STs7O0k7STs7Ozs7Ozs7O0k7O0s7Ozs7Ozs7OztLO0ssSyxvQjtLLFM7SyxLLG9CO0ssUztLLEssb0I7STtHOztJO0k7RztvQyx1Qzs7STtHOztJO0k7O0k7O0s7Ozs7Ozs7Rzs7STs7STtHOzs7STtJO0c7O0k7O2U7OztpQjtpQjs7STs7O29COztNOzs7O0ksTzs7Ozs7YztjOzs7O0ksTzs7OztJLGU7O0k7Rzs7SSxlOztJO0c7Rzs7SSxNO0c7NEIsMkI7K0IseUI7NEIsb0M7O0k7bUI7O0k7a0I7SyxjLHdCOztnQzs7Ozs7Rzs7SSxjO08sK0I7STtHOztJO0k7STtJO0ssOEM7Ozs7TztRO1E7UTtRO1E7UTtRO087TztPO08sSSxvQzs7UTs7USxlOzs7O1U7Ozs7O1E7O1MsOEI7OztPO087TztPO087Ozs7O1EsUTs7Ozs7Vzs7Ozs7Ozs7Ozs7Ozs7O1M7O1UsUTs7Ozs7OztROzs7O3lCOzs7O1U7O1csYzs7Vzs7O1k7YSxRO2E7ZTs7aUI7bUIsb0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1c7OztZO1k7Ozs7WTs7O2E7c0I7NkI7O2E7Yzt1Qjs7O2M7Ozs7Ozs7dUI7O1k7Ozs7OztXO1U7Ozs7O1EsVTs7Ozs7VTs7Ozs7Ozs7Ozs7O1M7O1UsVTs7Ozs7TztPOzs7Ozs7Ozs7Vzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLOzs7Ozs7Szs7OztJOzs7SztJO0c7O0ksTzthOztHOzs7STtJO0ksVTs7Ozs7Ozs7O0k7Szs7Ozs7Ozs7Ozs7SztJOzs7SztLOzs7OztNOzs7Ozs7OztLO00sUzs7O0s7O0ksTzs7O0k7SSxPO0c7OztJOzs7Ozs7Ozs7STtLOzs7Ozs7Ozs7OztJOzs7SztLOzs7Ozs7O0k7SyxTOzs7STtJOzs7RywwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
