// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream__graphql
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_graphql = [0];
   runtime.caml_register_global(0, Dream_graphql, "Dream__graphql");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__graphql__Graphql
//# unitInfo: Requires: CamlinternalLazy, Dream__graphiql, Dream__server__Helpers, Dream__server__Log, Dream_pure__Message, Dream_pure__Method, Dream_pure__Stream, Graphql_lwt, Graphql_parser, Lwt, Lwt_stream, Stdlib__Hashtbl, Stdlib__Option, Stdlib__Printexc, Stdlib__String, Str, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s",
    cst_Content_Type_not_applicati = "Content-Type not 'application/json'",
    cst_Duplicate_connection_init = "Duplicate connection_init",
    cst_Exception_while_handling_W =
      "Exception while handling WebSocket message:",
    cst_GraphQL_WebSocket_closed_b = "GraphQL WebSocket closed by client",
    cst_GraphQL_message_is_not_JSO = "GraphQL message is not JSON",
    cst_GraphQL_message_lacks_a_ty = "GraphQL message lacks a type",
    cst_If_intentional_please_open =
      "If intentional, please open an issue about supporting this",
    cst_Sec_WebSocket_Protocol$0 = "Sec-WebSocket-Protocol",
    cst_Upgrade_websocket_header_m = "Upgrade: websocket header missing",
    cst_client_complete_operation_ = "client complete: operation id missing",
    cst_complete = "complete",
    cst_complete_before_connection = "complete before connection_init",
    cst_errors$1 = "errors",
    cst_graphql_transport_ws = "graphql-transport-ws",
    cst_https_github_com_aantron_d = "https://github.com/aantron/dream/issues",
    cst_id$3 = "id",
    cst_payload$2 = "payload",
    cst_subscribe_before_connectio = "subscribe before connection_init",
    cst_subscribe_duplicate_operat = "subscribe: duplicate operation id",
    cst_subscribe_operation_id_mis = "subscribe: operation id missing",
    cst_type$0 = "type",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Dream_graphiql = global_data.Dream__graphiql,
    Str = global_data.Str,
    Stdlib_String = global_data.Stdlib__String,
    Dream_pure_Method = global_data.Dream_pure__Method,
    Yojson_Basic = global_data.Yojson__Basic,
    Lwt = global_data.Lwt,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Lwt_stream = global_data.Lwt_stream,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Dream_server_Log = global_data.Dream__server__Log,
    Graphql_lwt = global_data.Graphql_lwt,
    Stdlib_Option = global_data.Stdlib__Option,
    Graphql_parser = global_data.Graphql_parser,
    log = caml_call2(Dream_server_Log[19], 0, "dream.graphql"),
    cst_ENDPOINT = "%%ENDPOINT%%",
    cst_DEFAULT_QUERY = "%%DEFAULT_QUERY%%",
    _M_ =
      [0,
       [11, cst_https_github_com_aantron_d, 0],
       cst_https_github_com_aantron_d],
    _L_ =
      [0,
       [11, cst_If_intentional_please_open, 0],
       cst_If_intentional_please_open],
    _K_ =
      [0,
       [11, "GraphQL endpoint route '", [2, 0, [11, "' contains '\"'", 0]]],
       "GraphQL endpoint route '%s' contains '\"'"],
    _I_ =
      [0,
       [11, "Method ", [2, 0, [11, "; must be GET or POST", 0]]],
       "Method %s; must be GET or POST"],
    _D_ =
      [0,
       [11, cst_Upgrade_websocket_header_m, 0],
       cst_Upgrade_websocket_header_m],
    _G_ =
      [0,
       [11, cst_Content_Type_not_applicati, 0],
       cst_Content_Type_not_applicati],
    cst_Subscriptions_and_streamin =
      "Subscriptions and streaming should use WebSocket transport",
    cst_Content_Type = "Content-Type",
    _H_ = [0, -949323947],
    cst_Upgrade = "Upgrade",
    cst_Sec_WebSocket_Protocol = cst_Sec_WebSocket_Protocol$0,
    _F_ =
      [0, [0, [0, cst_Sec_WebSocket_Protocol$0, cst_graphql_transport_ws], 0]],
    _E_ = [0, -36502890],
    _J_ = [0, -36502890],
    _C_ =
      [0,
       [11, cst_GraphQL_WebSocket_closed_b, 0],
       cst_GraphQL_WebSocket_closed_b],
    _A_ =
      [0,
       [11, cst_GraphQL_message_lacks_a_ty, 0],
       cst_GraphQL_message_lacks_a_ty],
    _h_ =
      [0,
       [11, "Unknown WebSocket message type '", [2, 0, [12, 39, 0]]],
       "Unknown WebSocket message type '%s'"],
    _w_ =
      [0,
       [11, cst_client_complete_operation_, 0],
       cst_client_complete_operation_],
    _y_ =
      [0,
       [11, cst_complete_before_connection, 0],
       cst_complete_before_connection],
    _u_ =
      [0,
       [11, cst_Duplicate_connection_init, 0],
       cst_Duplicate_connection_init],
    _q_ =
      [0,
       [11, cst_subscribe_operation_id_mis, 0],
       cst_subscribe_operation_id_mis],
    _p_ = [0, [11, "subscribe: error ", [2, 0, 0]], "subscribe: error %s"],
    _o_ =
      [0, [11, "Subscription: error ", [2, 0, 0]], "Subscription: error %s"],
    _m_ =
      [0,
       [11, cst_subscribe_duplicate_operat, 0],
       cst_subscribe_duplicate_operat],
    _n_ = [0, 4409],
    cst_Internal_Server_Error = "Internal Server Error",
    _l_ = [0, [2, 0, 0], cst_s],
    _k_ = [0, [2, 0, 0], cst_s],
    _j_ =
      [0,
       [11, cst_Exception_while_handling_W, 0],
       cst_Exception_while_handling_W],
    _s_ =
      [0,
       [11, cst_subscribe_before_connectio, 0],
       cst_subscribe_before_connectio],
    _f_ =
      [0,
       [11, cst_GraphQL_message_is_not_JSO, 0],
       cst_GraphQL_message_is_not_JSO],
    _e_ = [0, [11, "Message '", [2, 0, [12, 39, 0]]], "Message '%s'"],
    _g_ = [0, 4400],
    cst_type = cst_type$0,
    _t_ = [0, 4401],
    cst_payload$1 = cst_payload$2,
    _r_ = [0, 4400],
    _v_ = [0, 4429],
    _z_ = [0, 4401],
    _x_ = [0, 4400],
    _i_ = [0, 4400],
    _B_ = [0, 4400],
    cst_id$2 = cst_id$3,
    _d_ = [0, cst_type$0, [0, -976970511, cst_complete]],
    cst_errors$0 = cst_errors$1,
    cst_payload$0 = cst_payload$2,
    cst_id$1 = cst_id$3,
    _c_ = [0, cst_type$0, [0, -976970511, "error"]],
    cst_payload = cst_payload$2,
    cst_id$0 = cst_id$3,
    _b_ = [0, cst_type$0, [0, -976970511, "next"]],
    cst_id = cst_id$3,
    cst_query = "query",
    cst_operationName = "operationName",
    cst_variables = "variables",
    cst_No_query = "No query",
    cst_message = "message",
    cst_errors = cst_errors$1,
    _a_ =
      [0,
       963043957,
       [0, [0, cst_type$0, [0, -976970511, "connection_ack"]], 0]];
   function make_error(message){
    return [0,
            963043957,
            [0,
             [0,
              cst_errors,
              [0,
               848054398,
               [0,
                [0,
                 963043957,
                 [0, [0, cst_message, [0, -976970511, message]], 0]],
                0]]],
             0]];
   }
   function run_query(make_context, schema, request, json){
    var
     _bi_ = caml_call1(caml_call1(Yojson_Basic[96][6], cst_query), json),
     query = caml_call1(Yojson_Basic[96][22], _bi_),
     _bj_ =
       caml_call1(caml_call1(Yojson_Basic[96][6], cst_operationName), json),
     operation_name = caml_call1(Yojson_Basic[96][22], _bj_),
     _bk_ = caml_call1(caml_call1(Yojson_Basic[96][6], cst_variables), json),
     variables = caml_call1(Stdlib_Option[2], _bk_);
    if(! query){
     var _bp_ = [1, make_error(cst_No_query)];
     return caml_call1(Lwt[4], _bp_);
    }
    var query$0 = query[1], match = caml_call1(Graphql_parser[1], query$0);
    if(0 !== match[0]){
     var message = match[1], _bo_ = [1, make_error(message)];
     return caml_call1(Lwt[4], _bo_);
    }
    var query$1 = match[1];
    a:
    {
     if(variables){
      var json$0 = variables[1];
      if(typeof json$0 !== "number" && 963043957 === json$0[1]){
       var
        _bn_ = caml_call1(Yojson_Basic[96][10], json$0),
        variables$0 = caml_call1(Stdlib_Option[2], _bn_);
       break a;
      }
     }
     var variables$0 = 0;
    }
    var ppx_lwt_0 = caml_call1(make_context, request);
    function _bl_(context){
     return caml_call5
             (Graphql_lwt[1][24],
              schema,
              context,
              variables$0,
              operation_name,
              query$1);
    }
    function _bm_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _bm_, ppx_lwt_0, _bl_);
   }
   function operation_id(json){
    var _bh_ = caml_call1(caml_call1(Yojson_Basic[96][6], cst_id), json);
    return caml_call1(Yojson_Basic[96][22], _bh_);
   }
   function close_and_clean(code, subscriptions, websocket){
    var ppx_lwt_0 = caml_call2(Dream_pure_Message[33], code, websocket);
    function _be_(param){
     function _bg_(param, close){return caml_call1(close, 0);}
     caml_call2(Stdlib_Hashtbl[12], _bg_, subscriptions);
     return Lwt[36];
    }
    function _bf_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _bf_, ppx_lwt_0, _be_);
   }
   var ack_message = caml_call5(Yojson_Basic[1], 0, 0, 0, 0, _a_);
   function data_message(id, payload){
    return caml_call5
            (Yojson_Basic[1],
             0,
             0,
             0,
             0,
             [0,
              963043957,
              [0,
               _b_,
               [0,
                [0, cst_id$0, [0, -976970511, id]],
                [0, [0, cst_payload, payload], 0]]]]);
   }
   function error_message(id, json){
    var
     _bd_ =
       [0,
        963043957,
        [0,
         _c_,
         [0,
          [0, cst_id$1, [0, -976970511, id]],
          [0,
           [0,
            cst_payload$0,
            caml_call1(caml_call1(Yojson_Basic[96][6], cst_errors$0), json)],
           0]]]];
    return caml_call5(Yojson_Basic[1], 0, 0, 0, 0, _bd_);
   }
   function complete_message(id){
    return caml_call5
            (Yojson_Basic[1],
             0,
             0,
             0,
             0,
             [0,
              963043957,
              [0, _d_, [0, [0, cst_id$2, [0, -976970511, id]], 0]]]);
   }
   function handle_over_websocket
   (make_context, schema, subscriptions, request, websocket){
    function loop(inited){
     function _ao_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
     function _ap_(param){
      if(! param){
       var _aE_ = function(log){return caml_call2(log, [0, request], _C_);};
       caml_call1(log[3], _aE_);
       return close_and_clean(0, subscriptions, websocket);
      }
      var message = param[1];
      function _ar_(log){return caml_call3(log, [0, request], _e_, message);}
      caml_call1(log[4], _ar_);
      try{var json = caml_call4(Yojson_Basic[33], 0, 0, 0, message);}
      catch(_bc_){
       var _as_ = function(log){return caml_call2(log, [0, request], _f_);};
       caml_call1(log[2], _as_);
       return close_and_clean(_g_, subscriptions, websocket);
      }
      var
       _at_ = caml_call1(caml_call1(Yojson_Basic[96][6], cst_type), json),
       match = caml_call1(Yojson_Basic[96][22], _at_);
      if(! match){
       var _aD_ = function(log){return caml_call2(log, [0, request], _A_);};
       caml_call1(log[2], _aD_);
       return close_and_clean(_B_, subscriptions, websocket);
      }
      var message_type = match[1];
      if(! caml_string_notequal(message_type, cst_complete)){
       if(! inited){
        var _aC_ = function(log){return caml_call2(log, [0, request], _y_);};
        caml_call1(log[2], _aC_);
        return close_and_clean(_z_, subscriptions, websocket);
       }
       var match$1 = operation_id(json);
       if(! match$1){
        var _aB_ = function(log){return caml_call2(log, [0, request], _w_);};
        caml_call1(log[2], _aB_);
        return close_and_clean(_x_, subscriptions, websocket);
       }
       var
        id$0 = match$1[1],
        match$2 = caml_call2(Stdlib_Hashtbl[7], subscriptions, id$0);
       if(match$2){var close = match$2[1]; caml_call1(close, 0);}
       return loop(inited);
      }
      if(caml_string_notequal(message_type, "connection_init")){
       if(caml_string_notequal(message_type, "subscribe")){
        var
         _au_ =
           function(log){
            return caml_call3(log, [0, request], _h_, message_type);
           };
        caml_call1(log[2], _au_);
        return close_and_clean(_i_, subscriptions, websocket);
       }
       if(! inited){
        var _ax_ = function(log){return caml_call2(log, [0, request], _s_);};
        caml_call1(log[2], _ax_);
        return close_and_clean(_t_, subscriptions, websocket);
       }
       var match$0 = operation_id(json);
       if(match$0){
        var
         id = match$0[1],
         payload =
           caml_call1(caml_call1(Yojson_Basic[96][6], cst_payload$1), json),
         _av_ =
           function(param){
            var subscribed = [0, 0];
            function _aF_(exn){
             var backtrace = caml_call1(Stdlib_Printexc[6], 0);
             function _a3_(log){return caml_call2(log, [0, request], _j_);}
             caml_call1(log[1], _a3_);
             function _a4_(log){
              return caml_call3
                      (log,
                       [0, request],
                       _k_,
                       caml_call1(Stdlib_Printexc[1], exn));
             }
             caml_call1(log[1], _a4_);
             function _a5_(line){
              function _bb_(log){
               return caml_call3(log, [0, request], _l_, line);
              }
              return caml_call1(log[1], _bb_);
             }
             caml_call1(caml_call1(Dream_server_Log[21], _a5_), backtrace);
             function _a6_(param){return Lwt[36];}
             function _a7_(param){
              var
               _a9_ = error_message(id, make_error(cst_Internal_Server_Error)),
               ppx_lwt_0 =
                 caml_call4(Dream_server_Helpers[20], 0, 0, websocket, _a9_);
              function _a__(param){
               if(! subscribed[1]) return Lwt[36];
               var _ba_ = complete_message(id);
               return caml_call4
                       (Dream_server_Helpers[20], 0, 0, websocket, _ba_);
              }
              function _a$_(exn){
               try{throw caml_maybe_attach_backtrace(exn, 0);}
               catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
              }
              return caml_call3(Lwt[81], _a$_, ppx_lwt_0, _a__);
             }
             function _a8_(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             }
             return caml_call3(Lwt[82], _a8_, _a7_, _a6_);
            }
            function _aG_(param){
             function _aI_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
             function _aJ_(param){
              if(0 !== param[0]){
               var
                json$0 = param[1],
                _aS_ =
                  function(log){
                   return caml_call3
                           (log,
                            [0, request],
                            _p_,
                            caml_call5(Yojson_Basic[1], 0, 0, 0, 0, json$0));
                  };
               caml_call1(log[2], _aS_);
               var _aT_ = error_message(id, json$0);
               return caml_call4
                       (Dream_server_Helpers[20], 0, 0, websocket, _aT_);
              }
              var match = param[1];
              if(-71406943 <= match[1]){
               var
                json = match[2],
                _aL_ = data_message(id, json),
                ppx_lwt_0 =
                  caml_call4(Dream_server_Helpers[20], 0, 0, websocket, _aL_),
                _aM_ =
                  function(param){
                   var
                    _a0_ = complete_message(id),
                    ppx_lwt_0 =
                      caml_call4(Dream_server_Helpers[20], 0, 0, websocket, _a0_);
                   function _a1_(param){return Lwt[36];}
                   function _a2_(exn){
                    try{throw caml_maybe_attach_backtrace(exn, 0);}
                    catch(exn){
                     var exn$0 = caml_wrap_exception(exn);
                     return exn$0;
                    }
                   }
                   return caml_call3(Lwt[81], _a2_, ppx_lwt_0, _a1_);
                  },
                _aN_ =
                  function(exn){
                   try{throw caml_maybe_attach_backtrace(exn, 0);}
                   catch(exn){
                    var exn$0 = caml_wrap_exception(exn);
                    return exn$0;
                   }
                  };
               return caml_call3(Lwt[81], _aN_, ppx_lwt_0, _aM_);
              }
              var match$0 = match[2], close = match$0[2], stream = match$0[1];
              if(caml_call2(Stdlib_Hashtbl[9], subscriptions, id)){
               var
                _aO_ =
                  function(log){return caml_call2(log, [0, request], _m_);};
               caml_call1(log[2], _aO_);
               return close_and_clean(_n_, subscriptions, websocket);
              }
              caml_call3(Stdlib_Hashtbl[11], subscriptions, id, close);
              subscribed[1] = 1;
              function _aP_(param){
               if(0 === param[0]){
                var json = param[1], _aX_ = data_message(id, json);
                return caml_call4
                        (Dream_server_Helpers[20], 0, 0, websocket, _aX_);
               }
               var json$0 = param[1];
               function _aY_(log){
                return caml_call3
                        (log,
                         [0, request],
                         _o_,
                         caml_call5(Yojson_Basic[1], 0, 0, 0, 0, json$0));
               }
               caml_call1(log[2], _aY_);
               var _aZ_ = error_message(id, json$0);
               return caml_call4
                       (Dream_server_Helpers[20], 0, 0, websocket, _aZ_);
              }
              var
               ppx_lwt_0$0 =
                 caml_call1(caml_call1(Lwt_stream[51], _aP_), stream);
              function _aQ_(param){
               var
                _aU_ = complete_message(id),
                ppx_lwt_0 =
                  caml_call4(Dream_server_Helpers[20], 0, 0, websocket, _aU_);
               function _aV_(param){
                caml_call2(Stdlib_Hashtbl[10], subscriptions, id);
                return Lwt[36];
               }
               function _aW_(exn){
                try{throw caml_maybe_attach_backtrace(exn, 0);}
                catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;
                }
               }
               return caml_call3(Lwt[81], _aW_, ppx_lwt_0, _aV_);
              }
              function _aR_(exn){
               try{throw caml_maybe_attach_backtrace(exn, 0);}
               catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
              }
              return caml_call3(Lwt[81], _aR_, ppx_lwt_0$0, _aQ_);
             }
             function _aK_(param){
              return run_query(make_context, schema, request, payload);
             }
             return caml_call3(Lwt[9], _aK_, _aJ_, _aI_);
            }
            function _aH_(exn){
             try{throw caml_maybe_attach_backtrace(exn, 0);}
             catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
            }
            return caml_call3(Lwt[82], _aH_, _aG_, _aF_);
           };
        caml_call1(Lwt[11], _av_);
        return loop(inited);
       }
       var _aw_ = function(log){return caml_call2(log, [0, request], _q_);};
       caml_call1(log[2], _aw_);
       return close_and_clean(_r_, subscriptions, websocket);
      }
      if(inited){
       var _ay_ = function(log){return caml_call2(log, [0, request], _u_);};
       caml_call1(log[2], _ay_);
       return close_and_clean(_v_, subscriptions, websocket);
      }
      var
       ppx_lwt_0 =
         caml_call4(Dream_server_Helpers[20], 0, 0, websocket, ack_message);
      function _az_(param){return loop(1);}
      function _aA_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _aA_, ppx_lwt_0, _az_);
     }
     function _aq_(param){
      return caml_call1(Dream_server_Helpers[18], websocket);
     }
     return caml_call3(Lwt[9], _aq_, _ap_, _ao_);
    }
    return loop(0);
   }
   function graphql(make_context, schema, request){
    var method = caml_call1(Dream_pure_Message[2], request);
    if(typeof method === "number"){
     if(3546230 === method){
      var
       upgrade = caml_call2(Dream_pure_Message[9], request, cst_Upgrade),
       protocol =
         caml_call2
          (Dream_pure_Message[9], request, cst_Sec_WebSocket_Protocol);
      if
       (upgrade
        &&
         !
         caml_string_notequal(upgrade[1], "websocket")
         &&
          protocol
          && ! caml_string_notequal(protocol[1], cst_graphql_transport_ws)){
       var
        ___ = caml_call2(Stdlib_Hashtbl[1], 0, 16),
        _$_ =
          function(_an_){
           return handle_over_websocket
                   (make_context, schema, ___, request, _an_);
          };
       return caml_call3(Dream_server_Helpers[17], _F_, 0, _$_);
      }
      var _Y_ = function(log){return caml_call2(log, [0, request], _D_);};
      caml_call1(log[2], _Y_);
      var
       _Z_ =
         caml_call5
          (Dream_pure_Message[6],
           _E_,
           0,
           0,
           Dream_pure_Stream[8],
           Dream_pure_Stream[7]);
      return caml_call1(Lwt[4], _Z_);
     }
     if(891112544 === method){
      var
       match = caml_call2(Dream_pure_Message[9], request, cst_Content_Type);
      if(match && ! caml_string_notequal(match[1], "application/json")){
       var
        ppx_lwt_0 = caml_call1(Dream_pure_Message[19], request),
        _ac_ =
          function(body){
           var json = caml_call4(Yojson_Basic[33], 0, 0, 0, body);
           function _ag_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
           function _ah_(param){
            if(0 !== param[0]){
             var
              json$0 = param[1],
              _am_ = caml_call5(Yojson_Basic[1], 0, 0, 0, 0, json$0);
             return caml_call4(Dream_server_Helpers[12], 0, 0, 0, _am_);
            }
            var match = param[1];
            if(-71406943 <= match[1]){
             var
              json = match[2],
              _aj_ = caml_call5(Yojson_Basic[1], 0, 0, 0, 0, json);
             return caml_call4(Dream_server_Helpers[12], 0, 0, 0, _aj_);
            }
            var
             _ak_ = make_error(cst_Subscriptions_and_streamin),
             _al_ = caml_call5(Yojson_Basic[1], 0, 0, 0, 0, _ak_);
            return caml_call4(Dream_server_Helpers[12], 0, 0, 0, _al_);
           }
           function _ai_(param){
            return run_query(make_context, schema, request, json);
           }
           return caml_call3(Lwt[9], _ai_, _ah_, _ag_);
          },
        _ad_ =
          function(exn){
           try{throw caml_maybe_attach_backtrace(exn, 0);}
           catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
          };
       return caml_call3(Lwt[81], _ad_, ppx_lwt_0, _ac_);
      }
      var _aa_ = function(log){return caml_call2(log, [0, request], _G_);};
      caml_call1(log[2], _aa_);
      var
       _ab_ =
         caml_call5
          (Dream_pure_Message[6],
           _H_,
           0,
           0,
           Dream_pure_Stream[8],
           Dream_pure_Stream[7]);
      return caml_call1(Lwt[4], _ab_);
     }
    }
    function _ae_(log){
     return caml_call3
             (log,
              [0, request],
              _I_,
              caml_call1(Dream_pure_Method[1], method));
    }
    caml_call1(log[1], _ae_);
    var
     _af_ =
       caml_call5
        (Dream_pure_Message[6],
         _J_,
         0,
         0,
         Dream_pure_Stream[8],
         Dream_pure_Stream[7]);
    return caml_call1(Lwt[4], _af_);
   }
   function graphiql(opt, graphql_endpoint){
    if(opt)
     var sth = opt[1], default_query = sth;
    else
     var default_query = cst;
    if(caml_call2(Stdlib_String[37], graphql_endpoint, 34)){
     var
      _N_ = function(log){return caml_call3(log, 0, _K_, graphql_endpoint);};
     caml_call1(log[1], _N_);
     var _O_ = function(log){return caml_call2(log, 0, _L_);};
     caml_call1(log[1], _O_);
     var _P_ = function(log){return caml_call2(log, 0, _M_);};
     caml_call1(log[1], _P_);
    }
    var
     html =
       [246,
        function(param){
         var
          _S_ = Dream_graphiql[1],
          _T_ = caml_call1(Str[3], cst_ENDPOINT),
          _U_ = caml_call1(Str[1], _T_),
          _V_ = caml_call1(caml_call2(Str[16], _U_, graphql_endpoint), _S_),
          _W_ = caml_call1(Str[3], cst_DEFAULT_QUERY),
          _X_ = caml_call1(Str[1], _W_);
         return caml_call1(caml_call2(Str[16], _X_, default_query), _V_);
        }];
    return function(request){
     var _Q_ = runtime.caml_obj_tag(html);
     a:
     if(250 === _Q_)
      var _R_ = html[1];
     else{
      if(246 !== _Q_ && 244 !== _Q_){var _R_ = html; break a;}
      var _R_ = caml_call1(CamlinternalLazy[2], html);
     }
     return caml_call4(Dream_server_Helpers[11], 0, 0, 0, _R_);};
   }
   var
    Dream_graphql_Graphql =
      [0,
       log,
       make_error,
       run_query,
       operation_id,
       close_and_clean,
       ack_message,
       data_message,
       error_message,
       complete_message,
       handle_over_websocket,
       graphql,
       graphiql];
   runtime.caml_register_global
    (86, Dream_graphql_Graphql, "Dream__graphql__Graphql");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
