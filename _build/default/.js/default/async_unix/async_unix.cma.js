// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_unix = [0],
    Async_unix$0 = [0, Async_unix];
   runtime.caml_register_global(0, Async_unix$0, "Async_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Config
//# unitInfo: Requires: Async_kernel_config, Core__Int, Core__Int64, Core__Result, Core_unix, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Config$0 = "Async_unix__Config",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel_config = global_data.Async_kernel_config,
    Linux_ext = global_data.Linux_ext,
    Core_Result = global_data.Core__Result,
    Core_unix = global_data.Core_unix,
    Core_Int64 = global_data.Core__Int64,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Config$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/config.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "config.ml");
   var
    Max_num_open_file_descrs = Async_kernel_config[7],
    sexp_of_t = Async_kernel_config[12],
    create = Async_kernel_config[13],
    t = Async_kernel_config[14],
    environment_variable = Async_kernel_config[15],
    abort_after_thread_pool_stuck_ = Async_kernel_config[17],
    check_invariants = Async_kernel_config[18],
    detect_invalid_access_from_thr = Async_kernel_config[19],
    dump_core_on_job_delay = Async_kernel_config[20],
    thread_pool_cpu_affinity = Async_kernel_config[21],
    epoll_max_ready_events = Async_kernel_config[22],
    io_uring_max_submission_entrie = Async_kernel_config[23],
    io_uring_mode = Async_kernel_config[24],
    file_descr_watcher = Async_kernel_config[25],
    max_inter_cycle_timeout = Async_kernel_config[26],
    max_num_jobs_per_priority_per_ = Async_kernel_config[27],
    max_num_open_file_descrs = Async_kernel_config[28],
    max_num_threads = Async_kernel_config[29],
    min_inter_cycle_timeout = Async_kernel_config[30],
    record_backtraces = Async_kernel_config[31],
    report_thread_pool_stuck_for = Async_kernel_config[32],
    timing_wheel_config = Async_kernel_config[33],
    default_timing_wheel_config_fo = Async_kernel_config[34],
    task_id = Async_kernel_config[35],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Config = cst_Async_unix_Config$0,
    file_descr_watcher$0 =
      file_descr_watcher
      || (caml_call1(Core_Result[37], Linux_ext[35][6]) ? 1 : 2);
   if
    (caml_call2
      (Max_num_open_file_descrs[9],
       max_num_open_file_descrs,
       Max_num_open_file_descrs[10]))
    if(2 === file_descr_watcher$0)
     var
      max_num_open_file_descrs$0 =
        caml_call1(Max_num_open_file_descrs[4], 1024);
    else{
     var match = caml_call1(Core_unix[286][16], Core_unix[286][12])[2];
     if(match)
      var int64 = match[1], _a_ = caml_call1(Core_Int64[6], int64);
     else
      var _a_ = Core_Int[45];
     var
      _b_ =
        caml_call1(Max_num_open_file_descrs[5], Max_num_open_file_descrs[10]),
      _c_ = caml_call2(Core_Int[89], _b_, _a_),
      max_num_open_file_descrs$0 =
        caml_call1(Max_num_open_file_descrs[4], _c_);
    }
   else
    var max_num_open_file_descrs$0 = max_num_open_file_descrs;
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Config);
   var
    Async_unix_Config =
      [0,
       sexp_of_t,
       create,
       t,
       environment_variable,
       abort_after_thread_pool_stuck_,
       check_invariants,
       detect_invalid_access_from_thr,
       dump_core_on_job_delay,
       thread_pool_cpu_affinity,
       epoll_max_ready_events,
       io_uring_max_submission_entrie,
       io_uring_mode,
       file_descr_watcher$0,
       max_inter_cycle_timeout,
       max_num_jobs_per_priority_per_,
       max_num_open_file_descrs$0,
       max_num_threads,
       min_inter_cycle_timeout,
       record_backtraces,
       report_thread_pool_stuck_for,
       timing_wheel_config,
       default_timing_wheel_config_fo,
       task_id];
   runtime.caml_register_global
    (17, Async_unix_Config, cst_Async_unix_Config$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Busy_poller_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Busy_poller_int = "Async_unix__Busy_poller_intf",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Busy_poller_int);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/busy_poller_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix, "busy_poller_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Busy_poller_int);
   var Async_unix_Busy_poller_intf = [0];
   runtime.caml_register_global
    (11, Async_unix_Busy_poller_intf, cst_Async_unix_Busy_poller_int);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Busy_poller
//# unitInfo: Requires: Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Busy_poller$0 = "Async_unix__Busy_poller",
    cst = "_",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Type_equal = global_data.Core__Type_equal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Busy_poller$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/busy_poller.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "busy_poller.ml");
   var
    _d_ = [0, cst],
    _b_ = [0, cst],
    cst_empty = "empty",
    cst_extra = "extra",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Busy_poller = cst_Async_unix_Busy_poller$0;
   function poll(t, param){return 0;}
   function _a_(param){return _b_;}
   var
    kind = caml_call2(Core_Type_equal[8][3], cst_empty, _a_),
    Empty_poller = [0, poll, kind];
   function poll$0(t, deadline){return caml_call1(t, deadline);}
   function _c_(param){return _d_;}
   var
    kind$0 = caml_call2(Core_Type_equal[8][3], cst_extra, _c_),
    Extra_poller = [0, poll$0, kind$0];
   function poll$1(param, deadline){
    var poller = param[2], P = param[1];
    return caml_call2(P[1], poller, deadline);
   }
   function create(impl, poller){return [0, impl, poller];}
   function create$0(f){return [0, Extra_poller, f];}
   var empty = [0, Empty_poller, 0];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Busy_poller);
   var
    Async_unix_Busy_poller =
      [0, Empty_poller, Extra_poller, poll$1, create, create$0, empty];
   runtime.caml_register_global
    (16, Async_unix_Busy_poller, cst_Async_unix_Busy_poller$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Import
//# unitInfo: Requires: Async_kernel, Async_kernel_config, Base, Core, Core__Int, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Thread_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Import$0 = "Async_unix__Import",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Sexp = global_data.Core__Sexp,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Async_kernel = global_data.Async_kernel,
    Base = global_data.Base,
    Async_kernel_config = global_data.Async_kernel_config,
    Thread_pool = global_data.Thread_pool;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "import.ml");
   var
    _a_ = Core_Int[96],
    symbol = _a_[1],
    symbol$0 = _a_[2],
    symbol$1 = _a_[3],
    symbol$2 = _a_[4],
    symbol$3 = _a_[5],
    symbol$4 = _a_[6],
    equal = _a_[7],
    compare = _a_[8],
    min = _a_[9],
    max = _a_[10],
    after = Async_kernel[1],
    at = Async_kernel[2],
    catch$0 = Async_kernel[3],
    choice = Async_kernel[4],
    choose = Async_kernel[5],
    don_t_wait_for = Async_kernel[6],
    every = Async_kernel[7],
    never = Async_kernel[8],
    schedule = Async_kernel[9],
    schedule$0 = Async_kernel[10],
    try_with = Async_kernel[11],
    upon = Async_kernel[12],
    with_timeout = Async_kernel[13],
    with_timeout_exn = Async_kernel[14],
    within = Async_kernel[15],
    within$0 = Async_kernel[16],
    symbol$5 = Async_kernel[17],
    symbol$6 = Async_kernel[18],
    symbol$7 = Async_kernel[19],
    return$0 = Async_kernel[20],
    symbol_bind = Async_kernel[21],
    symbol_map = Async_kernel[22],
    Let_syntax = Async_kernel[23],
    Async_kernel_private = Async_kernel[24],
    _b_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Import = cst_Async_unix_Import$0;
   function print_s(sexp){
    var _c_ = caml_call2(Core_Sexp[84], 0, sexp);
    return caml_call2(Core[258], _b_, _c_);
   }
   var am_test_runner = Base[87][1];
   if(Async_kernel_config[16][12]) Thread_pool[22][1] = 1;
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Import);
   var
    Async_unix_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       after,
       at,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       every,
       never,
       schedule,
       schedule$0,
       try_with,
       upon,
       with_timeout,
       with_timeout_exn,
       within,
       within$0,
       symbol$5,
       symbol$6,
       symbol$7,
       return$0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Async_kernel_private,
       print_s,
       am_test_runner];
   runtime.caml_register_global
    (19, Async_unix_Import, cst_Async_unix_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Syscall
//# unitInfo: Requires: Core, Core__Error, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Syscall$0 = "Async_unix__Syscall",
    cst_async_unix$0 = "async_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_unix = global_data.Core_unix,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core = global_data.Core,
    Core_Error = global_data.Core__Error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Syscall$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/syscall.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "syscall.ml");
   var
    _a_ =
      caml_call5
       (Core_Error[19],
        0,
        0,
        "syscall interrupted too many times",
        1000,
        Core[389]),
    too_many_tries = caml_call1(Core_Error[28], _a_),
    too_many_tries_error = [1, too_many_tries],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Syscall = cst_Async_unix_Syscall$0;
   function syscall(f){
    var n = 0;
    for(;;){
     if(1000 <= n) return too_many_tries_error;
     try{var x = caml_call1(f, 0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Core_unix[4]){
       var _d_ = exn[2];
       if(typeof _d_ === "number" && 11 === _d_){var n$0 = n + 1 | 0, n = n$0; continue;}
      }
      return [1, exn];
     }
     return [0, x];
    }
   }
   function is_eintr(r){
    var
     _b_ = caml_call1(Core_unix[5][8], r),
     _c_ = _b_ ? 11 === caml_call1(Core_unix[5][9], r) ? 1 : 0 : _b_;
    return _c_;
   }
   function syscall_result(a, f){
    var n = 0;
    for(;;){
     if(1000 <= n) throw caml_maybe_attach_backtrace(too_many_tries, 0);
     var r = caml_call1(f, a);
     if(! is_eintr(r)) return r;
     var n$0 = n + 1 | 0, n = n$0;
    }
   }
   function syscall_result2(a, b, f){
    var n = 0;
    for(;;){
     if(1000 <= n) throw caml_maybe_attach_backtrace(too_many_tries, 0);
     var r = caml_call2(f, a, b);
     if(! is_eintr(r)) return r;
     var n$0 = n + 1 | 0, n = n$0;
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Syscall);
   var Async_unix_Syscall = [0, syscall, syscall_result, syscall_result2];
   runtime.caml_register_global
    (15, Async_unix_Syscall, cst_Async_unix_Syscall$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Raw_fd
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Execution_context, Async_kernel__Ivar, Async_kernel__Job, Async_unix__Import, Async_unix__Syscall, Base__Field, Core, Core__Info, Core__Result, Core_unix, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Read_write_pair, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Raw_fd$0 = "Async_unix__Raw_fd",
    cst_Bad_fd = "Bad_fd",
    cst_Closed = "Closed",
    cst_Interrupted = "Interrupted",
    cst_Unknown = "Unknown",
    cst_Unsupported = "Unsupported",
    cst_async_unix$0 = "async_unix",
    cst_can_set_nonblock$0 = "can_set_nonblock",
    cst_close_finished$0 = "close_finished",
    cst_exn = "exn",
    cst_fd = "fd",
    cst_file_descr$0 = "file_descr",
    cst_info$0 = "info",
    cst_kind$0 = "kind",
    cst_nonblock_status$0 = "nonblock_status",
    cst_num_active_syscalls$0 = "num_active_syscalls",
    cst_src_raw_fd_ml = "src/raw_fd.ml",
    cst_state$0 = "state",
    cst_watching$0 = "watching",
    cst_watching_has_changed$0 = "watching_has_changed",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_unix_Syscall = global_data.Async_unix__Syscall,
    Core_Result = global_data.Core__Result,
    Core_unix = global_data.Core_unix,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Read_write_pair = global_data.Read_write_pair,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Async_unix_Import = global_data.Async_unix__Import,
    Assert_failure = global_data.Assert_failure,
    Base_Field = global_data.Base__Field,
    Core_Info = global_data.Core__Info,
    Async_kernel_Job = global_data.Async_kernel__Job,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Raw_fd$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_raw_fd_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "raw_fd.ml");
   var
    debug = Async_kernel_Debug[2],
    cst_Fd_syscall_result_exn_got_ = "Fd.syscall_result_exn got closed fd",
    cst_Fd_syscall_exn_got_closed_ = "Fd.syscall_exn got closed fd",
    cst_Fd_with_file_descr_exn_got = "Fd.with_file_descr_exn got closed fd",
    _av_ = [0, cst_fd],
    cst_Fd_set_nonblock_if_necessa =
      "Fd.set_nonblock_if_necessary called on fd that does not support nonblock",
    _at_ = [0, "new_state"],
    _au_ = [0, cst_fd],
    cst_Fd_set_state_attempted_dis =
      "Fd.set_state attempted disallowed state transition",
    cst_Fd_set_state = "Fd.set_state",
    cst_Fd_create = "Fd.create",
    _al_ = [0, cst_fd],
    _am_ = [0, cst_exn],
    cst_Fd_invariant_failed = "Fd.invariant failed",
    _as_ = [0, cst_src_raw_fd_ml, 169, 11],
    _ar_ = [0, cst_src_raw_fd_ml, 175, 11],
    _aq_ = [0, cst_src_raw_fd_ml, 177, 23],
    _an_ = [0, cst_src_raw_fd_ml, 183, 34],
    _ap_ = [0, cst_src_raw_fd_ml, 185, 13],
    _ao_ = [0, cst_src_raw_fd_ml, 186, 13],
    _ai_ = [0, cst_kind$0],
    _aj_ = [0, cst_info$0],
    _ak_ = [0, cst_file_descr$0],
    ___ = [0, cst_close_finished$0],
    _$_ = [0, cst_num_active_syscalls$0],
    _aa_ = [0, cst_watching_has_changed$0],
    _ab_ = [0, cst_watching$0],
    _ac_ = [0, cst_state$0],
    _ad_ = [0, cst_nonblock_status$0],
    _ae_ = [0, cst_can_set_nonblock$0],
    _af_ = [0, cst_kind$0],
    _ag_ = [0, cst_info$0],
    _ah_ = [0, cst_file_descr$0],
    _D_ = [0, "Blocking"],
    _E_ = [0, "Nonblocking"],
    _F_ = [0, cst_Unknown],
    _z_ = [0, cst_watching$0],
    _A_ = [0, cst_exn],
    cst_Watching_invariant_failed = "Watching.invariant failed",
    _B_ = [0, cst_src_raw_fd_ml, 87, 27],
    _C_ = [0, cst_src_raw_fd_ml, 88, 38],
    _u_ = [0, cst_Bad_fd],
    _v_ = [0, cst_Unsupported],
    _w_ = [0, cst_Interrupted],
    _x_ = [0, cst_Closed],
    _r_ = [0, "Not_watching"],
    _s_ = [0, "Stop_requested"],
    _t_ = [0, "Watch_once"],
    _y_ = [0, "Watch_repeatedly"],
    _n_ = [0, cst_Bad_fd],
    _o_ = [0, cst_Unsupported],
    _p_ = [0, "Ready"],
    _q_ = [0, cst_Closed],
    _m_ = [0, cst_Interrupted],
    _j_ = [0, cst_Closed],
    _k_ = [0, "Close_requested"],
    _l_ = [0, "Open"],
    _a_ = [0, "Char"],
    _b_ = [0, "Fifo"],
    _c_ = [0, "File"],
    _f_ = [0, cst_Unknown],
    _g_ = [0, "Unconnected"],
    _h_ = [0, "Active"],
    _i_ = [0, "Bound"],
    _d_ = [0, "Passive"],
    _e_ = [0, "Socket"],
    cst_close_finished = cst_close_finished$0,
    cst_num_active_syscalls = cst_num_active_syscalls$0,
    cst_watching_has_changed = cst_watching_has_changed$0,
    cst_watching = cst_watching$0,
    cst_state = cst_state$0,
    cst_nonblock_status = cst_nonblock_status$0,
    cst_can_set_nonblock = cst_can_set_nonblock$0,
    cst_kind = cst_kind$0,
    cst_info = cst_info$0,
    cst_file_descr = cst_file_descr$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Raw_fd = cst_Async_unix_Raw_fd$0;
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    var
     arg0_001 = param[1],
     res0_002 =
       -893685881 === arg0_001
        ? _d_
        : 214958384
          <= arg0_001
          ? 785140586 <= arg0_001 ? _f_ : _g_
          : -891636250 <= arg0_001 ? _h_ : _i_;
    return [1, [0, _e_, [0, res0_002, 0]]];
   }
   var Kind = [0, sexp_of_t];
   function sexp_of_t$0(param){
    if(typeof param === "number") return _j_;
    if(0 === param[0]){
     var
      arg0_003 = param[1],
      res0_005 = caml_call1(Async_kernel_Execution_context[5], arg0_003),
      _bn_ = function(_bo_){return 0;},
      res1_006 = caml_call1(Sexplib0_Sexp_conv[24], _bn_);
     return [1, [0, _k_, [0, res0_005, [0, res1_006, 0]]]];
    }
    var
     arg0_007 = param[1],
     res0_008 = caml_call2(Async_kernel_Ivar[9], Core[620], arg0_007);
    return [1, [0, _l_, [0, res0_008, 0]]];
   }
   function transition_is_allowed(t$0, t){
    a:
    if(typeof t$0 !== "number"){
     if(0 === t$0[0]){
      if(typeof t !== "number") break a;
     }
     else if(typeof t === "number" || 1 === t[0]) break a;
     return 1;
    }
    return 0;
   }
   function is_open(param){
    if(typeof param !== "number" && 1 === param[0]) return 1;
    return 0;
   }
   var State = [0, sexp_of_t$0, transition_is_allowed, is_open];
   function sexp_of_ready_to_result(param){
    return -952706910 === param
            ? _m_
            : -18684779
              <= param
              ? -3286312 <= param ? _n_ : _o_
              : -102231997 <= param ? _p_ : _q_;
   }
   function sexp_of_t$1(param){
    if(typeof param === "number") return 0 === param ? _r_ : _s_;
    if(0 === param[0]){
     var
      arg0_009 = param[1],
      res0_010 =
        caml_call2(Async_kernel_Ivar[9], sexp_of_ready_to_result, arg0_009);
     return [1, [0, _t_, [0, res0_010, 0]]];
    }
    var
     arg1_012 = param[2],
     arg0_011 = param[1],
     res0_013 = caml_call1(Async_kernel_Job[1], arg0_011);
    function _bm_(param){
     return -18684779 <= param
             ? -3286312 <= param ? _u_ : _v_
             : -952706910 <= param ? _w_ : _x_;
    }
    var res1_014 = caml_call2(Async_kernel_Ivar[9], _bm_, arg1_012);
    return [1, [0, _y_, [0, res0_013, [0, res1_014, 0]]]];
   }
   function invariant(t){
    try{
     if(typeof t === "number")
      var _bl_ = 0;
     else if(0 === t[0]){
      var ivar = t[1];
      if(! caml_call1(Async_kernel_Ivar[17], ivar))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
      var _bl_ = 0;
     }
     else{
      var ivar$0 = t[2];
      if(! caml_call1(Async_kernel_Ivar[17], ivar$0))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
      var _bl_ = 0;
     }
     return _bl_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _bi_ = [0, [1, [0, _z_, [0, sexp_of_t$1(t), 0]]], 0],
      _bj_ = [0, [1, [0, _A_, [0, caml_call1(Core[625], exn), 0]]], _bi_],
      _bk_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Watching_invariant_failed),
          _bj_]];
     return caml_call1(Core[261], _bk_);
    }
   }
   var Watching = [0, sexp_of_t$1, invariant];
   function sexp_of_t$2(param){
    switch(param){case 0: return _D_;case 1: return _E_;default: return _F_;
    }
   }
   var Nonblock_status = [0, sexp_of_t$2];
   function close_finished(r){return r[10];}
   function num_active_syscalls(r){return r[9];}
   function set_num_active_syscalls(r, v){r[9] = v; return 0;}
   function watching_has_changed(r){return r[8];}
   function set_watching_has_changed(r, v){r[8] = v; return 0;}
   function watching(r){return r[7];}
   function state(r){return r[6];}
   function set_state(r, v){r[6] = v; return 0;}
   function nonblock_status(r){return r[5];}
   function set_nonblock_status(r, v){r[5] = v; return 0;}
   function can_set_nonblock(r){return r[4];}
   function set_can_set_nonblock(r, v){r[4] = v; return 0;}
   function kind(r){return r[3];}
   function set_kind(r, v){r[3] = v; return 0;}
   function info(r){return r[2];}
   function set_info(r, v){r[2] = v; return 0;}
   function file_descr(r){return r[1];}
   function _G_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], v];
   }
   var
    _H_ = 0,
    close_finished$0 =
      [0,
       function(param){return 0;},
       cst_close_finished,
       _H_,
       close_finished,
       _G_];
   function _I_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], v, r[10]];
   }
   var
    _J_ = [0, set_num_active_syscalls],
    num_active_syscalls$0 =
      [0,
       function(param){return 0;},
       cst_num_active_syscalls,
       _J_,
       num_active_syscalls,
       _I_];
   function _K_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v, r[9], r[10]];
   }
   var
    _L_ = [0, set_watching_has_changed],
    watching_has_changed$0 =
      [0,
       function(param){return 0;},
       cst_watching_has_changed,
       _L_,
       watching_has_changed,
       _K_];
   function _M_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8], r[9], r[10]];
   }
   var
    _N_ = 0,
    watching$0 =
      [0, function(param){return 0;}, cst_watching, _N_, watching, _M_];
   function _O_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8], r[9], r[10]];
   }
   var
    _P_ = [0, set_state],
    state$0 = [0, function(param){return 0;}, cst_state, _P_, state, _O_];
   function _Q_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _R_ = [0, set_nonblock_status],
    nonblock_status$0 =
      [0,
       function(param){return 0;},
       cst_nonblock_status,
       _R_,
       nonblock_status,
       _Q_];
   function _S_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _T_ = [0, set_can_set_nonblock],
    can_set_nonblock$0 =
      [0,
       function(param){return 0;},
       cst_can_set_nonblock,
       _T_,
       can_set_nonblock,
       _S_];
   function _U_(r, v){
    return [0, r[1], r[2], v, r[4], r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _V_ = [0, set_kind],
    kind$0 = [0, function(param){return 0;}, cst_kind, _V_, kind, _U_];
   function _W_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _X_ = [0, set_info],
    info$0 = [0, function(param){return 0;}, cst_info, _X_, info, _W_];
   function _Y_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _Z_ = 0,
    file_descr$0 =
      [0, function(param){return 0;}, cst_file_descr, _Z_, file_descr, _Y_];
   function iter
   (file_descr_fun,
    info_fun,
    kind_fun,
    can_set_nonblock_fun,
    nonblock_status_fun,
    state_fun,
    watching_fun,
    watching_has_changed_fun,
    num_active_syscalls_fun,
    close_finished_fun){
    caml_call1(file_descr_fun, file_descr$0);
    caml_call1(info_fun, info$0);
    caml_call1(kind_fun, kind$0);
    caml_call1(can_set_nonblock_fun, can_set_nonblock$0);
    caml_call1(nonblock_status_fun, nonblock_status$0);
    caml_call1(state_fun, state$0);
    caml_call1(watching_fun, watching$0);
    caml_call1(watching_has_changed_fun, watching_has_changed$0);
    caml_call1(num_active_syscalls_fun, num_active_syscalls$0);
    return caml_call1(close_finished_fun, close_finished$0);
   }
   var
    Fields =
      [0,
       close_finished$0,
       num_active_syscalls$0,
       watching_has_changed$0,
       watching$0,
       state$0,
       nonblock_status$0,
       can_set_nonblock$0,
       kind$0,
       info$0,
       file_descr$0,
       iter];
   function sexp_of_t$3(param){
    var
     file_descr_016 = param[1],
     info_018 = param[2],
     kind_020 = param[3],
     can_set_nonblock_022 = param[4],
     nonblock_status_024 = param[5],
     state_026 = param[6],
     watching_028 = param[7],
     watching_has_changed_030 = param[8],
     num_active_syscalls_032 = param[9],
     close_finished_034 = param[10],
     arg_035 = caml_call2(Async_kernel_Ivar[9], Core[620], close_finished_034),
     bnds_015 = [0, [1, [0, ___, [0, arg_035, 0]]], 0],
     arg_033 = caml_call1(Core[389], num_active_syscalls_032),
     bnds_015$0 = [0, [1, [0, _$_, [0, arg_033, 0]]], bnds_015],
     arg_031 = caml_call1(Core[323], watching_has_changed_030),
     bnds_015$1 = [0, [1, [0, _aa_, [0, arg_031, 0]]], bnds_015$0],
     arg_029 = caml_call2(Read_write_pair[6][2], Watching[1], watching_028),
     bnds_015$2 = [0, [1, [0, _ab_, [0, arg_029, 0]]], bnds_015$1],
     arg_027 = caml_call1(State[1], state_026),
     bnds_015$3 = [0, [1, [0, _ac_, [0, arg_027, 0]]], bnds_015$2],
     arg_025 = caml_call1(Nonblock_status[1], nonblock_status_024),
     bnds_015$4 = [0, [1, [0, _ad_, [0, arg_025, 0]]], bnds_015$3],
     arg_023 = caml_call1(Core[323], can_set_nonblock_022),
     bnds_015$5 = [0, [1, [0, _ae_, [0, arg_023, 0]]], bnds_015$4],
     arg_021 = caml_call1(Kind[1], kind_020),
     bnds_015$6 = [0, [1, [0, _af_, [0, arg_021, 0]]], bnds_015$5],
     arg_019 = caml_call1(Core_Info[9], info_018),
     bnds_015$7 = [0, [1, [0, _ag_, [0, arg_019, 0]]], bnds_015$6],
     arg_017 = caml_call1(Core_unix_File_descr[2], file_descr_016),
     bnds_015$8 = [0, [1, [0, _ah_, [0, arg_017, 0]]], bnds_015$7];
    return [1, bnds_015$8];
   }
   function sexp_of_t_hum(param){
    var
     file_descr = param[1],
     info = param[2],
     kind = param[3],
     _bg_ = [0, [1, [0, _ai_, [0, caml_call1(Kind[1], kind), 0]]], 0],
     _bh_ = [0, [1, [0, _aj_, [0, caml_call1(Core_Info[9], info), 0]]], _bg_];
    return [1,
            [0,
             [1,
              [0,
               _ak_,
               [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
             _bh_]];
   }
   var
    T =
      [0,
       close_finished,
       num_active_syscalls,
       set_num_active_syscalls,
       watching_has_changed,
       set_watching_has_changed,
       watching,
       state,
       set_state,
       nonblock_status,
       set_nonblock_status,
       can_set_nonblock,
       set_can_set_nonblock,
       kind,
       set_kind,
       info,
       set_info,
       file_descr,
       Fields,
       sexp_of_t$3,
       sexp_of_t_hum],
    close_finished$1 = T[1],
    num_active_syscalls$1 = T[2],
    set_num_active_syscalls$0 = T[3],
    watching_has_changed$1 = T[4],
    set_watching_has_changed$0 = T[5],
    watching$1 = T[6],
    state$1 = T[7],
    nonblock_status$1 = T[9],
    set_nonblock_status$0 = T[10],
    can_set_nonblock$1 = T[11],
    set_can_set_nonblock$0 = T[12],
    kind$1 = T[13],
    set_kind$0 = T[14],
    info$1 = T[15],
    set_info$0 = T[16],
    file_descr$1 = T[17],
    Fields$0 = T[18],
    sexp_of_t$4 = T[19],
    sexp_of_t_hum$0 = T[20];
   function equal(t$0, t){return t$0 === t ? 1 : 0;}
   function invariant$0(t){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t));
        },
      _aS_ =
        function(close_finished){
         var match = t[6];
         if(typeof match === "number") return 0;
         if(0 === match[0]){
          if(caml_call1(Async_kernel_Ivar[17], close_finished)) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
         }
         var close_started = match[1];
         if(! caml_call1(Async_kernel_Ivar[17], close_finished))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ap_], 1);
         if(caml_call1(Async_kernel_Ivar[17], close_started)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ao_], 1);
        },
      _aT_ = function(_bf_){return check(_aS_, _bf_);},
      _aU_ =
        function(num_active_syscalls){
         if(! caml_call2(Async_unix_Import[1], t[9], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1);
         function watching(read_or_write){
          var match = caml_call2(Read_write_pair[23], t[7], read_or_write);
          if(typeof match === "number" && ! match) return 0;
          return 1;
         }
         var
          _bd_ = watching(-477700929),
          _be_ = watching(914388854) + _bd_ | 0;
         if(! caml_call2(Async_unix_Import[1], t[9], _be_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ar_], 1);
         if(typeof t[6] !== "number") return 0;
         if(caml_call2(Async_unix_Import[3], num_active_syscalls, 0))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aq_], 1);
        },
      _aV_ = function(_bc_){return check(_aU_, _bc_);},
      _aW_ = function(_bb_){return 0;},
      _aX_ =
        function(watching){
         return caml_call2(Read_write_pair[18], watching, Watching[2]);
        },
      _aY_ = function(_ba_){return check(_aX_, _ba_);},
      _aZ_ = function(_a$_){return 0;},
      _a0_ = function(_a__){return 0;},
      _a1_ = function(_a9_){return 0;},
      _a2_ = function(_a8_){return 0;},
      _a3_ = function(_a7_){return 0;},
      _a4_ = function(_a6_){return 0;},
      _a5_ =
        caml_call10
         (Fields$0[11],
          _a4_,
          _a3_,
          _a2_,
          _a1_,
          _a0_,
          _aZ_,
          _aY_,
          _aW_,
          _aV_,
          _aT_);
     return _a5_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _aP_ = [0, [1, [0, _al_, [0, caml_call1(sexp_of_t$4, t), 0]]], 0],
      _aQ_ = [0, [1, [0, _am_, [0, caml_call1(Core[625], exn), 0]]], _aP_],
      _aR_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_invariant_failed), _aQ_]];
     return caml_call1(Core[261], _aR_);
    }
   }
   function to_int(t){return caml_call1(Core_unix_File_descr[15], t[1]);}
   function create(opt, kind, file_descr, info){
    if(opt)
     var sth = opt[1], avoid_setting_nonblock = sth;
    else
     var avoid_setting_nonblock = 0;
    if(avoid_setting_nonblock)
     var can_set_nonblock = 0;
    else if(typeof kind === "number")
     switch(kind){
       case 0:
        var can_set_nonblock = 0; break;
       case 1:
        var can_set_nonblock = 1; break;
       default: var can_set_nonblock = 0;
     }
    else
     var can_set_nonblock = 1;
    var
     _aN_ = caml_call1(Async_kernel_Ivar[12], 0),
     _aO_ = caml_call1(Read_write_pair[11], 0),
     t =
       [0,
        file_descr,
        info,
        kind,
        can_set_nonblock,
        2,
        [1, caml_call1(Async_kernel_Ivar[12], 0)],
        _aO_,
        0,
        0,
        _aN_];
    if(debug)
     caml_call3(Async_kernel_Debug[15], cst_Fd_create, t, sexp_of_t$4);
    return t;
   }
   function inc_num_active_syscalls(t){
    var _aM_ = t[6];
    if(typeof _aM_ !== "number" && 1 === _aM_[0]){t[9] = t[9] + 1 | 0; return 17724;}
    return -1034200365;
   }
   function set_state$0(t, new_state){
    if(debug){
     var
      _aI_ =
        function(param){
         var
          arg1_037 = param[2],
          arg0_036 = param[1],
          res0_038 = caml_call1(State[1], arg0_036),
          res1_039 = caml_call1(sexp_of_t$4, arg1_037);
         return [1, [0, res0_038, [0, res1_039, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15], cst_Fd_set_state, [0, new_state, t], _aI_);
    }
    if(caml_call2(State[2], t[6], new_state)){t[6] = new_state; return 0;}
    var
     _aJ_ = [0, [1, [0, _at_, [0, caml_call1(State[1], new_state), 0]]], 0],
     _aK_ = [0, [1, [0, _au_, [0, caml_call1(sexp_of_t$4, t), 0]]], _aJ_],
     _aL_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_set_state_attempted_dis),
         _aK_]];
    return caml_call1(Core[261], _aL_);
   }
   function is_open$0(t){return caml_call1(State[3], t[6]);}
   function is_closed(t){return 1 - is_open$0(t);}
   function determine_nonblock_status(t){
    switch(t[5]){
      case 0:
       return 0;
      case 1:
       return 1;
      default:
       var
        flags = caml_call1(Core_unix[51], t[1]),
        nonblock = caml_call2(Core_unix[50][38], Core_unix[50][48], flags),
        _aH_ = nonblock ? 1 : 0;
       t[5] = _aH_;
       return nonblock;
    }
   }
   function supports_nonblock(t){
    return t[4] ? 1 : determine_nonblock_status(t);
   }
   function set_nonblock_if_necessary(opt, t){
    if(opt) var sth = opt[1], nonblocking = sth; else var nonblocking = 0;
    if(! nonblocking) return nonblocking;
    if(determine_nonblock_status(t)) return 0;
    if(t[4]){caml_call1(Core_unix[98], t[1]); t[5] = 1; return 0;}
    var
     _aF_ = [0, [1, [0, _av_, [0, caml_call1(sexp_of_t$4, t), 0]]], 0],
     _aG_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_set_nonblock_if_necessa),
         _aF_]];
    return caml_call1(Core[261], _aG_);
   }
   function with_file_descr_exn(nonblocking, t, f){
    if(is_closed(t)){
     var
      _aD_ = [0, caml_call1(sexp_of_t$4, t), 0],
      _aE_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_with_file_descr_exn_got),
          _aD_]];
     return caml_call1(Core[261], _aE_);
    }
    set_nonblock_if_necessary(nonblocking, t);
    return caml_call1(f, t[1]);
   }
   function with_file_descr(nonblocking, t, f){
    if(is_closed(t)) return -1034200365;
    try{
     set_nonblock_if_necessary(nonblocking, t);
     var _aC_ = [0, 17724, caml_call1(f, t[1])];
     return _aC_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return [0, 106380200, exn];
    }
   }
   function syscall(nonblocking, t, f){
    return with_file_descr
            (nonblocking,
             t,
             function(file_descr){
              function _aA_(param){return caml_call1(f, file_descr);}
              var _aB_ = caml_call1(Async_unix_Syscall[1], _aA_);
              return caml_call1(Core_Result[40], _aB_);
             });
   }
   function syscall_exn(nonblocking, t, f){
    var match = syscall(nonblocking, t, f);
    if(typeof match === "number"){
     var
      _ay_ = [0, caml_call1(sexp_of_t$4, t), 0],
      _az_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_syscall_exn_got_closed_),
          _ay_]];
     return caml_call1(Core[261], _az_);
    }
    if(106380200 <= match[1]){
     var exn = match[2];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var a = match[2];
    return a;
   }
   function syscall_result_exn(nonblocking, t, a, f){
    if(is_closed(t)){
     var
      _aw_ = [0, caml_call1(sexp_of_t$4, t), 0],
      _ax_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_syscall_result_exn_got_),
          _aw_]];
     return caml_call1(Core[261], _ax_);
    }
    set_nonblock_if_necessary(nonblocking, t);
    return caml_call3(Async_unix_Syscall[3], t[1], a, f);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Raw_fd);
   var
    Async_unix_Raw_fd =
      [0,
       debug,
       Kind,
       State,
       sexp_of_ready_to_result,
       Watching,
       Nonblock_status,
       T,
       close_finished$1,
       num_active_syscalls$1,
       set_num_active_syscalls$0,
       watching_has_changed$1,
       set_watching_has_changed$0,
       watching$1,
       state$1,
       nonblock_status$1,
       set_nonblock_status$0,
       can_set_nonblock$1,
       set_can_set_nonblock$0,
       kind$1,
       set_kind$0,
       info$1,
       set_info$0,
       file_descr$1,
       Fields$0,
       sexp_of_t$4,
       sexp_of_t_hum$0,
       equal,
       invariant$0,
       to_int,
       create,
       inc_num_active_syscalls,
       set_state$0,
       is_open$0,
       is_closed,
       determine_nonblock_status,
       supports_nonblock,
       set_nonblock_if_necessary,
       with_file_descr_exn,
       with_file_descr,
       syscall,
       syscall_exn,
       syscall_result_exn];
   runtime.caml_register_global
    (101, Async_unix_Raw_fd, cst_Async_unix_Raw_fd$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__By_descr
//# unitInfo: Requires: Async_unix__Import, Async_unix__Raw_fd, Core, Core__List, Core__Option_array, Core__Sexp, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_By_descr$0 = "Async_unix__By_descr",
    cst_async_unix$0 = "async_unix",
    cst_file_descr = "file_descr",
    cst_src_by_descr_ml = "src/by_descr.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Raw_fd = global_data.Async_unix__Raw_fd,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option_array = global_data.Core__Option_array,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Assert_failure = global_data.Assert_failure,
    Core_Sexp = global_data.Core__Sexp,
    Core_List = global_data.Core__List,
    Async_unix_Import = global_data.Async_unix__Import,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_By_descr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_by_descr_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "by_descr.ml");
   var
    _g_ = [0, "fd"],
    _h_ = [0, "exn"],
    cst_By_descr_invariant_failure = "By_descr.invariant failure",
    _i_ = [0, cst_src_by_descr_ml, 117, 8],
    cst_Attempt_to_register_a_file =
      "Attempt to register a file descriptor with Async that Async believes it is already managing.",
    _f_ = [0, 0],
    _e_ = [0, cst_file_descr],
    cst_By_descr_find_exn_got_unkn =
      "[By_descr.find_exn] got unknown file_descr",
    _b_ = [0, "max_file_descr"],
    _c_ = [0, "min_file_descr"],
    _d_ = [0, cst_file_descr],
    cst_The_file_descriptor_is_not =
      "The file descriptor is not in the range that Async allows, which probably means that the program has created too many file descriptors without closing them.  You can cause Async to allow more file descriptors via the [ASYNC_CONFIG] environment variable, like this: ASYNC_CONFIG='((max_num_open_file_descrs <NUMBER>))' foo.exe arg1 arg2 ...",
    _a_ = [0, "num_file_descrs"],
    cst_By_descr_create_got_negati =
      "[By_descr.create] got negative [num_file_descrs]",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_By_descr = cst_Async_unix_By_descr$0;
   function capacity(t){return caml_call1(Core_Option_array[36], t);}
   function create(num_file_descrs){
    if(caml_call2(Async_unix_Import[5], num_file_descrs, 0)){
     var
      _Y_ =
        [0, [1, [0, _a_, [0, caml_call1(Core[389], num_file_descrs), 0]]], 0],
      _Z_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_By_descr_create_got_negati),
          _Y_]];
     caml_call1(Core[261], _Z_);
    }
    return caml_call1(Core_Option_array[13], num_file_descrs);
   }
   function bounds_check(t, file_descr){
    var
     i = caml_call1(Core_unix_File_descr[15], file_descr),
     _W_ = caml_call2(Async_unix_Import[2], 0, i);
    if(! _W_) return _W_;
    var _X_ = capacity(t);
    return caml_call2(Async_unix_Import[5], i, _X_);
   }
   function bounds_check_error(t, file_descr){
    var
     _S_ = capacity(t) - 1 | 0,
     _T_ = [0, [1, [0, _b_, [0, caml_call1(Core[389], _S_), 0]]], 0],
     _U_ =
       [0, [1, [0, _c_, [0, caml_call1(Sexplib0_Sexp_conv[10], 0), 0]]], _T_],
     _V_ =
       [0,
        [1, [0, _d_, [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
        _U_];
    return [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_The_file_descriptor_is_not),
             _V_]];
   }
   function bounds_check_exn(t, file_descr){
    var _Q_ = 1 - bounds_check(t, file_descr);
    if(! _Q_) return _Q_;
    var _R_ = bounds_check_error(t, file_descr);
    return caml_call1(Core[261], _R_);
   }
   function mem(t, file_descr){
    var _O_ = bounds_check(t, file_descr);
    if(! _O_) return _O_;
    var _P_ = caml_call1(Core_unix_File_descr[15], file_descr);
    return caml_call2(Core_Option_array[46], t, _P_);
   }
   function find(t, file_descr){
    if(! bounds_check(t, file_descr)) return 0;
    var _N_ = caml_call1(Core_unix_File_descr[15], file_descr);
    return caml_call2(Core_Option_array[42], t, _N_);
   }
   function find_exn(t, file_descr){
    bounds_check_exn(t, file_descr);
    var _J_ = caml_call1(Core_unix_File_descr[15], file_descr);
    if(caml_call2(Core_Option_array[45], t, _J_)){
     var
      _K_ =
        [0,
         [1,
          [0, _e_, [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
         0],
      _L_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_By_descr_find_exn_got_unkn),
          _K_]];
     caml_call1(Core[261], _L_);
    }
    var _M_ = caml_call1(Core_unix_File_descr[15], file_descr);
    return caml_call2(Core_Option_array[44], t, _M_);
   }
   function remove(t, fd){
    bounds_check_exn(t, fd);
    var _I_ = caml_call1(Core_unix_File_descr[15], fd);
    return caml_call2(Core_Option_array[53], t, _I_);
   }
   function add(t, file_descr, v){
    if(! bounds_check(t, file_descr)){
     var _H_ = bounds_check_error(t, file_descr);
     return caml_call1(Core[245], _H_);
    }
    var _E_ = caml_call1(Core_unix_File_descr[15], file_descr);
    if(caml_call2(Core_Option_array[46], t, _E_)){
     var
      _F_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Attempt_to_register_a_file);
     return caml_call1(Core[245], _F_);
    }
    var _G_ = caml_call1(Core_unix_File_descr[15], file_descr);
    caml_call3(Core_Option_array[52], t, _G_, v);
    return _f_;
   }
   function fold(t, init, f){
    var r = [0, init], _B_ = capacity(t) - 1 | 0, _A_ = 0;
    if(_B_ >= 0){
     var i = _A_;
     for(;;){
      if(caml_call2(Core_Option_array[46], t, i)){
       var _C_ = caml_call2(Core_Option_array[44], t, i);
       r[1] = caml_call2(f, r[1], _C_);
      }
      var _D_ = i + 1 | 0;
      if(_B_ === i) break;
      var i = _D_;
     }
    }
    return r[1];
   }
   function iter(t, f){
    var _y_ = capacity(t) - 1 | 0, _x_ = 0;
    if(_y_ >= 0){
     var i = _x_;
     for(;;){
      if(caml_call2(Core_Option_array[46], t, i))
       caml_call1(f, caml_call2(Core_Option_array[44], t, i));
      var _z_ = i + 1 | 0;
      if(_y_ === i) break;
      var i = _z_;
     }
    }
    return 0;
   }
   function exists(t, f){
    function _w_(param){
     if(! param) return 0;
     var x = param[1];
     return caml_call1(f, x);
    }
    return caml_call2(Core_Option_array[20], t, _w_);
   }
   function sexp_of_t(sexp_of, t){
    var r = [0, 0], _t_ = capacity(t) - 1 | 0, _s_ = 0;
    if(_t_ >= 0){
     var i = _s_;
     for(;;){
      if(caml_call2(Core_Option_array[46], t, i)){
       var x = caml_call2(Core_Option_array[44], t, i), acc = r[1];
       r[1] = [0, [0, i, caml_call1(sexp_of, x)], acc];
      }
      var _u_ = i + 1 | 0;
      if(_t_ === i) break;
      var i = _u_;
     }
    }
    var fd_alist = r[1], x_005 = caml_call1(Core_List[59], fd_alist);
    function _v_(param){
     var
      arg1_002 = param[2],
      arg0_001 = param[1],
      res0_003 = caml_call1(Core[389], arg0_001),
      res1_004 = caml_call1(Core_Sexp[93], arg1_002);
     return [1, [0, res0_003, [0, res1_004, 0]]];
    }
    return caml_call2(Core[472], _v_, x_005);
   }
   function invariant(x_006){
    try{
     var _n_ = capacity(x_006) - 1 | 0, _m_ = 0;
     if(_n_ >= 0){
      var i = _m_;
      for(;;){
       var match = caml_call2(Core_Option_array[42], x_006, i);
       if(match){
        var fd = match[1];
        caml_call1(Async_unix_Raw_fd[28], fd);
        var
         _p_ = caml_call1(Async_unix_Raw_fd[23], fd),
         _q_ = caml_call1(Core_unix_File_descr[13], i);
        if(! caml_call2(Core_unix_File_descr[3], _q_, _p_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
       }
       var _r_ = i + 1 | 0;
       if(_n_ === i) break;
       var i = _r_;
      }
     }
     var _o_ = 0;
     return _o_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _j_ =
        [0, [1, [0, _g_, [0, sexp_of_t(Async_unix_Raw_fd[25], x_006), 0]]], 0],
      _k_ = [0, [1, [0, _h_, [0, caml_call1(Core[625], exn), 0]]], _j_],
      _l_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_By_descr_invariant_failure),
          _k_]];
     return caml_call1(Core[261], _l_);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_By_descr);
   var
    Async_unix_By_descr =
      [0,
       sexp_of_t,
       invariant,
       create,
       capacity,
       add,
       mem,
       find,
       find_exn,
       remove,
       fold,
       iter,
       exists];
   runtime.caml_register_global
    (34, Async_unix_By_descr, cst_Async_unix_By_descr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Clock
//# unitInfo: Requires: Async_kernel__Clock_ns, Async_unix__Import, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Time_float_unix, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Clock$0 = "Async_unix__Clock",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Time_ns_unix = global_data.Time_ns_unix,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Async_unix_Import = global_data.Async_unix__Import,
    Core_Option = global_data.Core__Option,
    Time_float_unix = global_data.Time_float_unix,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Clock$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/clock.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "clock.ml");
   var
    _a_ = [0, "Aborted"],
    _b_ = [0, "Happened"],
    _c_ = [0, "Scheduled_at"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Clock = cst_Async_unix_Clock$0;
   function run_at(time, f, a){
    var _y_ = caml_call1(Time_ns_unix[68], time);
    return caml_call3(Async_kernel_Clock_ns[1], _y_, f, a);
   }
   function run_after(span, f, a){
    var _x_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call3(Async_kernel_Clock_ns[2], _x_, f, a);
   }
   function at(time){
    var _w_ = caml_call1(Time_ns_unix[68], time);
    return caml_call1(Async_kernel_Clock_ns[3], _w_);
   }
   function after(span){
    var _v_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call1(Async_kernel_Clock_ns[4], _v_);
   }
   function with_timeout(span, d){
    var _u_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call2(Async_kernel_Clock_ns[5], _u_, d);
   }
   function with_timeout_exn(span, d, error){
    var _t_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call3(Async_kernel_Clock_ns[6], _t_, d, error);
   }
   var
    sexp_of_t = Async_kernel_Clock_ns[7][1],
    sexp_of_t_unit = Async_kernel_Clock_ns[7][2],
    invariant = Async_kernel_Clock_ns[7][3],
    abort = Async_kernel_Clock_ns[7][9],
    abort_exn = Async_kernel_Clock_ns[7][10],
    abort_if_possible = Async_kernel_Clock_ns[7][11],
    fired = Async_kernel_Clock_ns[7][12];
   function scheduled_at(t){
    var _s_ = caml_call1(Async_kernel_Clock_ns[7][4], t);
    return caml_call1(Time_ns_unix[66], _s_);
   }
   function at$0(time){
    var _r_ = caml_call1(Time_ns_unix[68], time);
    return caml_call1(Async_kernel_Clock_ns[7][15], _r_);
   }
   function after$0(span){
    var _q_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call1(Async_kernel_Clock_ns[7][16], _q_);
   }
   function reschedule_at(t, time){
    var _p_ = caml_call1(Time_ns_unix[68], time);
    return caml_call2(Async_kernel_Clock_ns[7][13], t, _p_);
   }
   function reschedule_after(t, span){
    var _o_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call2(Async_kernel_Clock_ns[7][14], t, _o_);
   }
   function run_at$0(time, f, x){
    var _n_ = caml_call1(Time_ns_unix[68], time);
    return caml_call3(Async_kernel_Clock_ns[7][7], _n_, f, x);
   }
   function run_after$0(span, f, x){
    var _m_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call3(Async_kernel_Clock_ns[7][8], _m_, f, x);
   }
   function sexp_of_t$0(of_a_004, of_h_005, param){
    switch(param[0]){
      case 0:
       var arg0_006 = param[1], res0_007 = caml_call1(of_a_004, arg0_006);
       return [1, [0, _a_, [0, res0_007, 0]]];
      case 1:
       var arg0_008 = param[1], res0_009 = caml_call1(of_h_005, arg0_008);
       return [1, [0, _b_, [0, res0_009, 0]]];
      default:
       var
        arg0_010 = param[1],
        res0_011 = caml_call1(Time_float_unix[60], arg0_010);
       return [1, [0, _c_, [0, res0_011, 0]]];
    }
   }
   var Status = [0, sexp_of_t$0];
   function status(t){
    var match = caml_call1(Async_kernel_Clock_ns[7][6], t);
    switch(match[0]){
      case 0:
       var a = match[1]; return [0, a];
      case 1:
       var h = match[1]; return [1, h];
      default:
       var time = match[1]; return [2, caml_call1(Time_ns_unix[66], time)];
    }
   }
   function at_varying_intervals(stop, f){
    function _k_(param){
     var _l_ = caml_call1(f, 0);
     return caml_call1(Time_ns_unix[72][146], _l_);
    }
    return caml_call2(Async_kernel_Clock_ns[8], stop, _k_);
   }
   function at_intervals(start, stop, span){
    var
     start$0 = caml_call2(Core_Option[34], start, Time_ns_unix[68]),
     _j_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call3(Async_kernel_Clock_ns[9], start$0, stop, _j_);
   }
   function every(start, stop, continue_on_error, finished, span, f){
    var _i_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call6
            (Async_kernel_Clock_ns[10],
             start,
             stop,
             continue_on_error,
             finished,
             _i_,
             f);
   }
   function every$0(start, stop, continue_on_error, span, f){
    var _h_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call5
            (Async_kernel_Clock_ns[11],
             start,
             stop,
             continue_on_error,
             _h_,
             f);
   }
   function run_at_intervals(start, stop, continue_on_error, span, f){
    var
     start$0 = caml_call2(Core_Option[34], start, Time_ns_unix[68]),
     _g_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call5
            (Async_kernel_Clock_ns[12],
             start$0,
             stop,
             continue_on_error,
             _g_,
             f);
   }
   function run_at_intervals$0(start, stop, continue_on_error, span, f){
    var
     start$0 = caml_call2(Core_Option[34], start, Time_ns_unix[68]),
     _f_ = caml_call1(Time_ns_unix[72][146], span);
    return caml_call5
            (Async_kernel_Clock_ns[13],
             start$0,
             stop,
             continue_on_error,
             _f_,
             f);
   }
   function duration_of(f){
    function _d_(param){
     var span = param[2], res = param[1];
     return [0, res, caml_call1(Time_ns_unix[72][144], span)];
    }
    var _e_ = caml_call1(Async_kernel_Clock_ns[14], f);
    return caml_call2(Async_unix_Import[33][3], _e_, _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Clock);
   var
    Async_unix_Clock =
      [0,
       run_at,
       run_after,
       at,
       after,
       with_timeout,
       with_timeout_exn,
       [0,
        sexp_of_t,
        sexp_of_t_unit,
        invariant,
        scheduled_at,
        Status,
        status,
        run_at$0,
        run_after$0,
        abort,
        abort_exn,
        abort_if_possible,
        fired,
        reschedule_at,
        reschedule_after,
        at$0,
        after$0],
       at_varying_intervals,
       at_intervals,
       every,
       every$0,
       run_at_intervals,
       run_at_intervals$0,
       duration_of];
   runtime.caml_register_global(19, Async_unix_Clock, cst_Async_unix_Clock$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Dump_core_on_job_delay
//# unitInfo: Requires: Async_kernel_config, Async_unix__Clock, Core, Core_thread, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sys_unix, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Dump_core_on_jo$0 = "Async_unix__Dump_core_on_job_delay",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Time_float_unix = global_data.Time_float_unix,
    Core = global_data.Core,
    Core_thread = global_data.Core_thread,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Sys_unix = global_data.Sys_unix,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel_config = global_data.Async_kernel_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Dump_core_on_jo$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/dump_core_on_job_delay.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "dump_core_on_job_delay.ml");
   var
    include = Async_kernel_config[8][1],
    sexp_of_t = include[2],
    cst_usr_bin_gcore = "/usr/bin/gcore",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Dump_core_on_jo = cst_Async_unix_Dump_core_on_jo$0;
   function choose_dump_type(param){
    switch(param){
      case 0:
       return 4448519 === caml_call2(Sys_unix[2], 0, cst_usr_bin_gcore)
               ? 1
               : 0;
      case 1:
       return 0;
      default: return 1;
    }
   }
   function start_watching(dump_if_delayed_by, how_to_dump){
    var
     dump_type = choose_dump_type(how_to_dump),
     dump_if_delayed_by_sec =
       caml_call1(Time_float_unix[1][89], dump_if_delayed_by),
     tick_interval = caml_call1(Core[630], dump_if_delayed_by_sec / 10.),
     _a_ = 0;
    function _b_(param){
     return runtime.dump_core_on_job_delay_watch
             (dump_if_delayed_by_sec, dump_type);
    }
    caml_call3(Core_thread[2], 890699316, _b_, _a_);
    function _c_(_d_){return runtime.dump_core_on_job_delay_tick(_d_);}
    return caml_call5(Async_unix_Clock[11], 0, 0, 0, tick_interval, _c_);
   }
   function dump_core(opt, param){
    if(opt) var sth = opt[1], how_to_dump = sth; else var how_to_dump = 0;
    return runtime.dump_core_on_job_delay_dump_core
            (choose_dump_type(how_to_dump));
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Dump_core_on_jo);
   var
    Async_unix_Dump_core_on_job_de =
      [0, [0, sexp_of_t], start_watching, dump_core];
   runtime.caml_register_global
    (19, Async_unix_Dump_core_on_job_de, cst_Async_unix_Dump_core_on_jo$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__File_descr_watcher_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_File_descr_watc$0 = "Async_unix__File_descr_watcher_intf",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_File_descr_watc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/file_descr_watcher_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "file_descr_watcher_intf.ml");
   var
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_File_descr_watc = cst_Async_unix_File_descr_watc$0;
   function variant_of(t, span_or_unit){
    return t ? [0, 818927100, span_or_unit] : -511334242;
   }
   var Timeout = [0, variant_of];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_File_descr_watc);
   var Async_unix_File_descr_watcher_ = [0, Timeout];
   runtime.caml_register_global
    (11, Async_unix_File_descr_watcher_, cst_Async_unix_File_descr_watc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Epoll_file_descr_watcher
//# unitInfo: Requires: Async_kernel_config, Async_unix__Config, Base__Backtrace, Base__Field, Core, Core__List, Core__Or_error, Core__Result, Core_unix, Core_unix__File_descr, Linux_ext, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Epoll_file_desc$0 = "Async_unix__Epoll_file_descr_watcher",
    cst_async_unix$0 = "async_unix",
    cst_backtrace = "backtrace",
    cst_epoll$0 = "epoll",
    cst_epoll_file_descr_watcher = "epoll_file_descr_watcher",
    cst_exn = "exn",
    cst_src_epoll_file_descr_watch = "src/epoll_file_descr_watcher.ml",
    cst_timerfd$0 = "timerfd",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/epoll_file_descr_watcher.ml:40:26",
    ok = [0, 17724],
    timeout = [0, 642269825],
    Base_Backtrace = global_data.Base__Backtrace,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Linux_ext = global_data.Linux_ext,
    Core_unix = global_data.Core_unix,
    Core_Result = global_data.Core__Result,
    Async_unix_Config = global_data.Async_unix__Config,
    Async_kernel_config = global_data.Async_kernel_config,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Base_Field = global_data.Base__Field,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Epoll_file_desc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_epoll_file_descr_watch);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "epoll_file_descr_watcher.ml");
   var
    include = Linux_ext[60][1],
    sexp_of_t = include[2],
    equal = include[11],
    compare = include[12],
    symbol = include[31],
    do_intersect = include[36],
    in$0 = include[41],
    out = include[42],
    err = include[44],
    hup = include[45],
    et = include[46],
    in_out = caml_call2(symbol, in$0, out),
    for_timerfd = caml_call2(symbol, in$0, et),
    _n_ = [0, cst_epoll_file_descr_watcher],
    _o_ = [0, "check_result"],
    _p_ = [0, cst_backtrace],
    _q_ = [0, cst_exn],
    cst_Epoll_post_check_bug = "Epoll.post_check bug",
    _r_ = [0, cst_backtrace],
    _s_ = [0, cst_exn],
    cst_epoll_raised_unexpected_ex = "epoll raised unexpected exn",
    _l_ = [0, "Timeout"],
    _m_ = [0, "Ok"],
    _i_ = [0, cst_epoll_file_descr_watcher],
    _j_ = [0, cst_exn],
    cst_Epoll_file_descr_watcher_i =
      "Epoll_file_descr_watcher.invariant failed",
    _k_ = [0, cst_src_epoll_file_descr_watch, 46, 13],
    _a_ = [0, "handle_fd_write_ready"],
    _b_ = [0, "handle_fd_read_ready"],
    _c_ = [0, cst_epoll$0],
    _d_ = [0, cst_timerfd$0],
    cst_epoll = cst_epoll$0,
    cst_timerfd = cst_timerfd$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Epoll_file_desc = cst_Async_unix_Epoll_file_desc$0;
   function sexp_of_t$0(param){
    var epoll_004 = param[2], timerfd_002 = param[1], bnds_001 = 0;
    function _ad_(_ag_){return 0;}
    var
     arg_009 = caml_call1(Sexplib0_Sexp_conv[24], _ad_),
     bnds_001$0 = [0, [1, [0, _a_, [0, arg_009, 0]]], bnds_001];
    function _ae_(_af_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], _ae_),
     bnds_001$1 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_001$0],
     arg_005 = caml_call1(Linux_ext[60][2], epoll_004),
     bnds_001$2 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_001$1],
     arg_003 = caml_call1(Linux_ext[35][4], timerfd_002),
     bnds_001$3 = [0, [1, [0, _d_, [0, arg_003, 0]]], bnds_001$2];
    return [1, bnds_001$3];
   }
   function epoll(r){return r[2];}
   function timerfd(r){return r[1];}
   function _e_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _f_ = 0,
    epoll$0 = [0, function(param){return 0;}, cst_epoll, _f_, epoll, _e_];
   function _g_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _h_ = 0,
    timerfd$0 =
      [0, function(param){return 0;}, cst_timerfd, _h_, timerfd, _g_],
    backend = 1;
   function invariant(t){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t));
        },
      ___ =
        function(epoll){
         function _ab_(param, flags){
          function _ac_(flags$0){return caml_call2(equal, flags, flags$0);}
          if
           (caml_call2
             (Core_List[23],
              [0, in$0, [0, out, [0, in_out, [0, for_timerfd, 0]]]],
              _ac_))
           return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
         }
         return caml_call2(Linux_ext[60][10], epoll, _ab_);
        };
     check
      (function(timerfd){
        var
         _$_ = caml_call1(Linux_ext[35][5], timerfd),
         got = caml_call2(Linux_ext[60][6], t[2], _$_),
         expect = [0, for_timerfd],
         equal = 0,
         message = 0,
         here = 0;
        function sexpifier(x_014){
         return caml_call2(Core[515], sexp_of_t, x_014);
        }
        function comparator(a_010, b_011){
         function _aa_(a_012, b_013){
          return caml_call2(compare, a_012, b_013);
         }
         return caml_call3(Core[509], _aa_, a_010, b_011);
        }
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got);
       },
       timerfd$0);
     check(___, epoll$0);
     var _W_ = 0;
     return _W_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _X_ = [0, [1, [0, _i_, [0, sexp_of_t$0(t), 0]]], 0],
      _Y_ = [0, [1, [0, _j_, [0, caml_call1(Core[625], exn), 0]]], _X_],
      _Z_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Epoll_file_descr_watcher_i),
          _Y_]];
     return caml_call1(Core[261], _Z_);
    }
   }
   function create
   (timerfd, num_file_descrs, handle_fd_read_ready, handle_fd_write_ready){
    var
     _Q_ = caml_call1(Async_kernel_config[1][5], Async_unix_Config[10]),
     epoll =
       caml_call3(Core_Or_error[40], Linux_ext[60][4], num_file_descrs, _Q_),
     err_or_hup = caml_call2(symbol, hup, err);
    function handle_fd(read_or_write, handle_fd){
     var bit = 914388854 <= read_or_write ? in$0 : out;
     return function(file_descr, flags){
      var _T_ = caml_call2(do_intersect, flags, bit);
      if(_T_)
       var _U_ = _T_;
      else
       var
        _V_ = caml_call2(do_intersect, flags, err_or_hup),
        _U_ =
          _V_
           ? caml_call2
             (do_intersect,
              caml_call2(Linux_ext[60][7], epoll, file_descr),
              bit)
           : _V_;
      return _U_ ? caml_call1(handle_fd, file_descr) : _U_;};
    }
    var _R_ = caml_call1(Linux_ext[35][5], timerfd);
    caml_call3(Linux_ext[60][8], epoll, _R_, for_timerfd);
    var _S_ = handle_fd(-477700929, handle_fd_write_ready);
    return [0,
            timerfd,
            epoll,
            handle_fd(914388854, handle_fd_read_ready),
            _S_];
   }
   function reset_in_forked_process(t){
    return caml_call1(Linux_ext[60][5], t[2]);
   }
   function iter(t, f){
    function _L_(file_descr, flags){
     var
      _M_ = caml_call1(Linux_ext[35][5], t[1]),
      _N_ = 1 - caml_call2(Core_unix_File_descr[3], file_descr, _M_);
     if(_N_){
      if(caml_call2(do_intersect, flags, in$0))
       caml_call2(f, file_descr, 914388854);
      var _O_ = caml_call2(do_intersect, flags, out);
      if(_O_) return caml_call2(f, file_descr, -477700929);
      var _P_ = _O_;
     }
     else
      var _P_ = _N_;
     return _P_;
    }
    return caml_call2(Linux_ext[60][10], t[2], _L_);
   }
   function set(t, file_descr, desired){
    var
     actual_flags = caml_call2(Linux_ext[60][6], t[2], file_descr),
     _H_ = desired[2],
     desired_flags =
       desired[1] ? _H_ ? [0, in_out] : [0, in$0] : _H_ ? [0, out] : 0;
    if(! actual_flags){
     if(! desired_flags) return 17724;
     var d$0 = desired_flags[1];
     try{caml_call3(Linux_ext[60][8], t[2], file_descr, d$0);}
     catch(_K_){
      var _I_ = caml_wrap_exception(_K_);
      if(_I_[1] === Core_unix[4]){
       var _J_ = _I_[2];
       if(typeof _J_ === "number" && 30 === _J_) return -18684779;
      }
      throw caml_maybe_attach_backtrace(_I_, 0);
     }
     return 17724;
    }
    var a = actual_flags[1];
    if(! desired_flags){
     caml_call2(Linux_ext[60][9], t[2], file_descr);
     return 17724;
    }
    var d = desired_flags[1];
    if(1 - caml_call2(equal, a, d))
     caml_call3(Linux_ext[60][8], t[2], file_descr, d);
    return 17724;
   }
   var sexp_of_t$1 = Core[620], Pre = [0, sexp_of_t$1];
   function pre_check(t){return 0;}
   function sexp_of_t$2(x_019){
    function _F_(param){
     var
      arg1_016 = param[2],
      arg0_015 = param[1],
      res0_017 = caml_call1(Core[625], arg0_015),
      res1_018 = caml_call1(Base_Backtrace[1], arg1_016);
     return [1, [0, res0_017, [0, res1_018, 0]]];
    }
    function _G_(param){return 642269825 <= param ? _l_ : _m_;}
    return caml_call3(Core_Result[15], _G_, _F_, x_019);
   }
   function thread_safe_check(t, param, timeout$0, span_or_unit){
    try{
     var
      epoll = t[2],
      val =
        timeout$0
         ? caml_call2(Linux_ext[60][13], epoll, span_or_unit)
         : caml_call2(Linux_ext[60][12], epoll, -511334242);
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return [1, [0, e, caml_call1(Base_Backtrace[6][4], 0)]];
    }
    return 642269825 <= val ? timeout : ok;
   }
   function post_check(t, check_result){
    try{
     if(0 === check_result[0])
      var
       _y_ =
         642269825 <= check_result[1]
          ? 0
          : (caml_call2
             (Linux_ext[60][14], t[2], t[4]),
            caml_call2(Linux_ext[60][14], t[2], t[3]),
            caml_call1(Linux_ext[60][16][1], t[2])),
       _z_ = _y_;
     else{
      var match = check_result[1], exn$0 = match[1];
      a:
      {
       b:
       if(exn$0[1] === Core_unix[4]){
        var _A_ = exn$0[2];
        if(typeof _A_ === "number"){if(11 !== _A_) break b;}
        else if(514 !== _A_[1]) break b;
        var _B_ = 0;
        break a;
       }
       var
        backtrace$0 = match[2],
        _C_ =
          [0,
           [1, [0, _r_, [0, caml_call1(Base_Backtrace[1], backtrace$0), 0]]],
           0],
        _D_ = [0, [1, [0, _s_, [0, caml_call1(Core[625], exn$0), 0]]], _C_],
        _E_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_epoll_raised_unexpected_ex),
            _D_]],
        _B_ = caml_call1(Core[261], _E_);
      }
      var _z_ = _B_;
     }
     return _z_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      backtrace = caml_call1(Base_Backtrace[6][4], 0),
      _t_ = [0, [1, [0, _n_, [0, sexp_of_t$0(t), 0]]], 0],
      _u_ = [0, [1, [0, _o_, [0, sexp_of_t$2(check_result), 0]]], _t_],
      _v_ =
        [0,
         [1, [0, _p_, [0, caml_call1(Base_Backtrace[1], backtrace), 0]]],
         _u_],
      _w_ = [0, [1, [0, _q_, [0, caml_call1(Core[625], exn), 0]]], _v_],
      _x_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Epoll_post_check_bug), _w_]];
     return caml_call1(Core[261], _x_);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Epoll_file_desc);
   var
    Async_unix_Epoll_file_descr_wa =
      [0,
       sexp_of_t$0,
       invariant,
       create,
       backend,
       set,
       iter,
       Pre,
       pre_check,
       [0, sexp_of_t$2],
       thread_safe_check,
       post_check,
       reset_in_forked_process];
   runtime.caml_register_global
    (50, Async_unix_Epoll_file_descr_wa, cst_Async_unix_Epoll_file_desc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Interruptor
//# unitInfo: Requires: Async_kernel__Debug, Async_unix__Raw_fd, Core, Core__Bytes, Core__Info, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Read_write_pair, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Interruptor$0 = "Async_unix__Interruptor",
    cst_async_unix$0 = "async_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_unix = global_data.Core_unix,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Read_write_pair = global_data.Read_write_pair,
    Async_unix_Raw_fd = global_data.Async_unix__Raw_fd,
    Core_Info = global_data.Core__Info,
    Core_Bytes = global_data.Core__Bytes,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Interruptor$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/interruptor.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "interruptor.ml");
   var
    debug = Async_kernel_Debug[5],
    _e_ = [0, 0],
    cst_Interruptor_clear = "Interruptor.clear",
    _f_ = [0, 1],
    cst_Interruptor_thread_safe_in = "Interruptor.thread_safe_interrupt",
    cst_writing_to_interrupt_pipe_ = "writing to interrupt_pipe_write",
    _d_ = [0, 1],
    cst_interruptor_pipe_read = "interruptor_pipe_read",
    cst_interruptor_pipe_write = "interruptor_pipe_write",
    _a_ = [0, "clearbuffer"],
    _b_ = [0, "already_interrupted"],
    _c_ = [0, "pipe"],
    cst_w = "w",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Interruptor = cst_Async_unix_Interruptor$0;
   function sexp_of_t(param){
    var
     pipe_002 = param[1],
     already_interrupted_004 = param[2],
     clearbuffer_006 = param[3],
     arg_007 = caml_call1(Sexplib0_Sexp_conv[23], clearbuffer_006),
     bnds_001 = [0, [1, [0, _a_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Core[323], already_interrupted_004),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001],
     arg_003 = caml_call2(Read_write_pair[8], Async_unix_Raw_fd[25], pipe_002),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$0];
    return [1, bnds_001$1];
   }
   function invariant(param){return 0;}
   function read_fd(t){
    return caml_call2(Read_write_pair[23], t[1], 914388854);
   }
   function create(create_fd){
    var
     match = caml_call2(Core_unix[117], 0, 0),
     pipe_write = match[2],
     pipe_read = match[1];
    caml_call1(Core_unix[100], pipe_read);
    caml_call1(Core_unix[100], pipe_write);
    var
     pipe_read$0 =
       caml_call3
        (create_fd,
         1,
         pipe_read,
         caml_call1(Core_Info[14], cst_interruptor_pipe_read)),
     pipe_write$0 =
       caml_call3
        (create_fd,
         1,
         pipe_write,
         caml_call1(Core_Info[14], cst_interruptor_pipe_write)),
     _t_ = caml_call2(Core_Bytes[46], 1024, 32);
    return [0,
            caml_call2(Read_write_pair[9], pipe_read$0, pipe_write$0),
            0,
            _t_];
   }
   var bytes_w = caml_call1(Core_Bytes[40], cst_w);
   function thread_safe_interrupt(t){
    if(debug)
     caml_call1(Async_kernel_Debug[16], cst_Interruptor_thread_safe_in);
    var _m_ = 1 - t[2];
    if(! _m_) return _m_;
    t[2] = 1;
    if(debug)
     caml_call1(Async_kernel_Debug[16], cst_writing_to_interrupt_pipe_);
    function _n_(file_descr){
     try{
      caml_call4(Core_unix[282], file_descr, 0, 0, bytes_w);
      var _r_ = 0;
      return _r_;
     }
     catch(_s_){
      var _p_ = caml_wrap_exception(_s_);
      a:
      if(_p_[1] === Core_unix[4]){
       var _q_ = _p_[2];
       if(typeof _q_ === "number"){
        if(2 !== _q_ && 37 !== _q_) break a;
        return 0;
       }
      }
      throw caml_maybe_attach_backtrace(_p_, 0);
     }
    }
    var _o_ = caml_call2(Read_write_pair[23], t[1], -477700929);
    return caml_call3(Async_unix_Raw_fd[41], _d_, _o_, _n_);
   }
   function clear(t){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_Interruptor_clear);
    if(t[2]){
     var
      _g_ =
        function(file_descr){
         for(;;){
          a:
          try{
           caml_call4
            (Core_unix[281],
             file_descr,
             _e_,
             [0, runtime.caml_ml_bytes_length(t[3])],
             t[3]);
           var _k_ = 1, read_again = _k_;
          }
          catch(_l_){
           var _i_ = caml_wrap_exception(_l_);
           b:
           if(_i_[1] === Core_unix[4]){
            var _j_ = _i_[2];
            if(typeof _j_ === "number"){
             if(2 !== _j_ && 37 !== _j_) break b;
             var read_again = 0;
             break a;
            }
           }
           throw caml_maybe_attach_backtrace(_i_, 0);
          }
          if(! read_again) return read_again;
         }
        },
      _h_ = caml_call2(Read_write_pair[23], t[1], 914388854);
     caml_call3(Async_unix_Raw_fd[41], _f_, _h_, _g_);
    }
    t[2] = 0;
    return 0;
   }
   function already_interrupted(t){return t[2];}
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Interruptor);
   var
    Async_unix_Interruptor =
      [0,
       sexp_of_t,
       invariant,
       create,
       read_fd,
       thread_safe_interrupt,
       clear,
       already_interrupted];
   runtime.caml_register_global
    (31, Async_unix_Interruptor, cst_Async_unix_Interruptor$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_types_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_types_ = "Async_unix__Io_uring_types_intf",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_types_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/io_uring_types_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix, "io_uring_types_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_types_);
   var Async_unix_Io_uring_types_intf = [0];
   runtime.caml_register_global
    (11, Async_unix_Io_uring_types_intf, cst_Async_unix_Io_uring_types_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_raw_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_raw_in = "Async_unix__Io_uring_raw_intf",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_raw_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/io_uring_raw_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix, "io_uring_raw_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_raw_in);
   var Async_unix_Io_uring_raw_intf = [0];
   runtime.caml_register_global
    (11, Async_unix_Io_uring_raw_intf, cst_Async_unix_Io_uring_raw_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_raw_null
//# unitInfo: Requires: Async_unix__Import, Core, Core__Int64, Core__Or_error, Core__Result, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_raw_nu$0 = "Async_unix__Io_uring_raw_null",
    cst_async_unix$0 = "async_unix",
    cst_src_io_uring_raw_null_ml = "src/io_uring_raw_null.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Core_Or_error = global_data.Core__Or_error,
    Core_unix = global_data.Core_unix,
    Core = global_data.Core,
    Core_Result = global_data.Core__Result,
    Core_Int64 = global_data.Core__Int64,
    Async_unix_Import = global_data.Async_unix__Import,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_raw_nu$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_io_uring_raw_null_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "io_uring_raw_null.ml");
   var
    _w_ = [0, cst_src_io_uring_raw_null_ml, 212, 25],
    _v_ = [0, cst_src_io_uring_raw_null_ml, 211, 23],
    _u_ = [0, cst_src_io_uring_raw_null_ml, 210, 15],
    _t_ = [0, cst_src_io_uring_raw_null_ml, 209, 14],
    _s_ = [0, cst_src_io_uring_raw_null_ml, 208, 16],
    _r_ = [0, cst_src_io_uring_raw_null_ml, 207, 13],
    _q_ = [0, cst_src_io_uring_raw_null_ml, 206, 15],
    _p_ = [0, cst_src_io_uring_raw_null_ml, 205, 14],
    _o_ = [0, cst_src_io_uring_raw_null_ml, 204, 16],
    _n_ = [0, cst_src_io_uring_raw_null_ml, 203, 17],
    _m_ = [0, cst_src_io_uring_raw_null_ml, 202, 15],
    _l_ = [0, cst_src_io_uring_raw_null_ml, 201, 14],
    _k_ = [0, cst_src_io_uring_raw_null_ml, 200, 14],
    _j_ = [0, cst_src_io_uring_raw_null_ml, 199, 13],
    _i_ = [0, cst_src_io_uring_raw_null_ml, 198, 13],
    _h_ = [0, cst_src_io_uring_raw_null_ml, 197, 25],
    _g_ = [0, cst_src_io_uring_raw_null_ml, 196, 29],
    _f_ = [0, cst_src_io_uring_raw_null_ml, 195, 15],
    _e_ = [0, cst_src_io_uring_raw_null_ml, 194, 25],
    _d_ = [0, cst_src_io_uring_raw_null_ml, 193, 13],
    cst_Io_uring_raw_create = "Io_uring_raw.create",
    _c_ = [0, cst_src_io_uring_raw_null_ml, 52, 17],
    _b_ = [0, cst_src_io_uring_raw_null_ml, 10, 17],
    _a_ = [0, cst_src_io_uring_raw_null_ml, 9, 17],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Io_uring_raw_nu = cst_Async_unix_Io_uring_raw_nu$0;
   function of_int(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function to_int(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   var Int63 = [0, of_int, to_int];
   function of_int$0(x){return x;}
   function symbol(_E_, _D_){return _E_ | _D_;}
   function mem(a, b){return caml_call2(Async_unix_Import[3], a & b, a);}
   var Clock = [0], pollin = 0, pollout = 0, pollerr = 0, pollhup = 0;
   function create(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   var
    Flags = [0, of_int$0, symbol, mem, 0, 0, 0, 0, 0, 0, 0],
    compressed = 0,
    immutable = 0,
    append = 0,
    nodump = 0,
    encrypted = 0,
    verity = 0,
    dax = 0;
   function check(param, _C_, _B_){return 0;}
   var
    type = 0,
    mode = 0,
    nlink = 0,
    uid = 0,
    gid = 0,
    atime = 0,
    mtime = 0,
    ctime = 0,
    ino = 0,
    size = 0,
    blocks = 0,
    basic_stats = 0,
    btime = 0,
    mnt_id = 0,
    dioalign = 0;
   function check$0(param, _A_){return 0;}
   function blksize(param){return Core_Int64[58];}
   function attributes(param){return Core_Int64[58];}
   function nlink$0(param){return Core_Int64[58];}
   function uid$0(param){return Core_Int64[58];}
   function gid$0(param){return Core_Int64[58];}
   function ino$0(param){return Core_Int64[58];}
   function size$0(param){return Core_Int64[58];}
   function blocks$0(param){return Core_Int64[58];}
   function attributes_mask(param){return Core_Int64[58];}
   function rdev(param){return Core_Int64[58];}
   function dev(param){return Core_Int64[58];}
   function mask(param){return Core_Int64[58];}
   function mnt_id$0(param){return Core_Int64[58];}
   function dio_mem_align(param){return Core_Int64[58];}
   function dio_offset_align(param){return Core_Int64[58];}
   function atime_sec(param){return Core_Int64[58];}
   function btime_sec(param){return Core_Int64[58];}
   function ctime_sec(param){return Core_Int64[58];}
   function mtime_sec(param){return Core_Int64[58];}
   function atime_nsec(param){return 0;}
   function btime_nsec(param){return 0;}
   function ctime_nsec(param){return 0;}
   function mtime_nsec(param){return 0;}
   function mode$0(param){return 0;}
   function perm(param){return 0;}
   function kind(param){return 785140586;}
   function sexp_of_t(x_001){
    return caml_call3(Core_Result[15], Core[389], Core_unix[3][3], x_001);
   }
   var Syscall_result = [0, sexp_of_t];
   function invariant(param){return 0;}
   var
    Handle = [0, invariant],
    Open_flags =
      [0,
       of_int$0,
       symbol,
       mem,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0],
    Resolve = [0, of_int$0, symbol, mem, 0, 0, 0, 0, 0, 0, 0];
   function create$0(param, _z_, _y_){
    return caml_call1(Core_Or_error[52], cst_Io_uring_raw_create);
   }
   function exit(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
   }
   function supports_ext_arg(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function submit(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   }
   function cqe_ready(param, _x_){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
   }
   function fill_completions(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
   }
   function noop(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
   }
   function read(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
   }
   function write(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   }
   function readv(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
   }
   function writev(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
   }
   function poll_add(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
   }
   function openat2(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
   }
   function close(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
   }
   function unlink(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
   }
   function link(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
   }
   function timeout(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
   }
   function statx(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
   }
   function cancel(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
   }
   function syscall_result(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
   }
   function register_eventfd(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_raw_nu);
   var
    Async_unix_Io_uring_raw_null =
      [0,
       Int63,
       [0, of_int$0, symbol, mem, pollin, pollout, pollerr, pollhup],
       Clock,
       [0,
        create,
        Flags,
        [0,
         of_int$0,
         symbol,
         mem,
         compressed,
         immutable,
         append,
         nodump,
         encrypted,
         verity,
         dax,
         check],
        [0,
         of_int$0,
         symbol,
         mem,
         type,
         mode,
         nlink,
         uid,
         gid,
         atime,
         mtime,
         ctime,
         ino,
         size,
         blocks,
         basic_stats,
         btime,
         mnt_id,
         dioalign,
         check$0],
        blksize,
        attributes,
        nlink$0,
        uid$0,
        gid$0,
        ino$0,
        size$0,
        blocks$0,
        attributes_mask,
        rdev,
        dev,
        mask,
        mnt_id$0,
        dio_mem_align,
        dio_offset_align,
        atime_sec,
        btime_sec,
        ctime_sec,
        mtime_sec,
        atime_nsec,
        btime_nsec,
        ctime_nsec,
        mtime_nsec,
        mode$0,
        perm,
        kind],
       Open_flags,
       Resolve,
       Syscall_result,
       Handle,
       create$0,
       supports_ext_arg,
       exit,
       register_eventfd,
       submit,
       cqe_ready,
       fill_completions,
       noop,
       read,
       write,
       readv,
       writev,
       poll_add,
       openat2,
       close,
       link,
       unlink,
       timeout,
       statx,
       cancel,
       syscall_result];
   runtime.caml_register_global
    (42, Async_unix_Io_uring_raw_null, cst_Async_unix_Io_uring_raw_nu$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_raw
//# unitInfo: Requires: Async_unix__Io_uring_raw_null, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_raw = "Async_unix__Io_uring_raw",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Io_uring_raw_null = global_data.Async_unix__Io_uring_raw_null;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_raw);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/io_uring_raw.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix, "io_uring_raw.ml");
   var
    Int63 = Async_unix_Io_uring_raw_null[1],
    Poll_mask = Async_unix_Io_uring_raw_null[2],
    Clock = Async_unix_Io_uring_raw_null[3],
    Statx = Async_unix_Io_uring_raw_null[4],
    Open_flags = Async_unix_Io_uring_raw_null[5],
    Resolve = Async_unix_Io_uring_raw_null[6],
    Syscall_result = Async_unix_Io_uring_raw_null[7],
    Handle = Async_unix_Io_uring_raw_null[8],
    create = Async_unix_Io_uring_raw_null[9],
    supports_ext_arg = Async_unix_Io_uring_raw_null[10],
    exit = Async_unix_Io_uring_raw_null[11],
    register_eventfd = Async_unix_Io_uring_raw_null[12],
    submit = Async_unix_Io_uring_raw_null[13],
    cqe_ready = Async_unix_Io_uring_raw_null[14],
    fill_completions = Async_unix_Io_uring_raw_null[15],
    noop = Async_unix_Io_uring_raw_null[16],
    read = Async_unix_Io_uring_raw_null[17],
    write = Async_unix_Io_uring_raw_null[18],
    readv = Async_unix_Io_uring_raw_null[19],
    writev = Async_unix_Io_uring_raw_null[20],
    poll_add = Async_unix_Io_uring_raw_null[21],
    openat2 = Async_unix_Io_uring_raw_null[22],
    close = Async_unix_Io_uring_raw_null[23],
    link = Async_unix_Io_uring_raw_null[24],
    unlink = Async_unix_Io_uring_raw_null[25],
    timeout = Async_unix_Io_uring_raw_null[26],
    statx = Async_unix_Io_uring_raw_null[27],
    cancel = Async_unix_Io_uring_raw_null[28],
    syscall_result = Async_unix_Io_uring_raw_null[29];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_raw);
   var
    Async_unix_Io_uring_raw =
      [0,
       Int63,
       Poll_mask,
       Clock,
       Statx,
       Open_flags,
       Resolve,
       Syscall_result,
       Handle,
       create,
       supports_ext_arg,
       exit,
       register_eventfd,
       submit,
       cqe_ready,
       fill_completions,
       noop,
       read,
       write,
       readv,
       writev,
       poll_add,
       openat2,
       close,
       link,
       unlink,
       timeout,
       statx,
       cancel,
       syscall_result];
   runtime.caml_register_global
    (12, Async_unix_Io_uring_raw, cst_Async_unix_Io_uring_raw);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_file_descr_watcher
//# unitInfo: Requires: Async_kernel__Deferred, Async_unix__Import, Async_unix__Io_uring_raw, Base__Field, Bounded_int_table, Core, Core__List, Core_unix, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_file_d$0 =
      "Async_unix__Io_uring_file_descr_watcher",
    cst_async_unix$0 = "async_unix",
    cst_src_io_uring_file_descr_wa = "src/io_uring_file_descr_watcher.ml",
    cst_states$0 = "states",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bounded_int_table = global_data.Bounded_int_table,
    Core_unix = global_data.Core_unix,
    Core = global_data.Core,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Time_ns_unix = global_data.Time_ns_unix,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Base_Field = global_data.Base__Field,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_file_d$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_io_uring_file_descr_wa);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_unix$0,
     "io_uring_file_descr_watcher.ml");
   var
    include = Async_unix_Io_uring_raw[2],
    of_int = include[1],
    symbol = include[2],
    mem = include[3],
    pollin = include[4],
    pollout = include[5],
    pollerr = include[6],
    pollhup = include[7],
    cst_Attempted_to_remove_pollin =
      "Attempted to remove polling for a file descriptor that was not being polled",
    cst_Cannot_create_an_Ocaml_uri =
      "Cannot create an Ocaml_uring file descriptor watcher if IORING_FEAT_EXT_ARG is not supported because then it is not thread safe.",
    _g_ = [0, "io_uring_file_descr_watcher"],
    _h_ = [0, "exn"],
    cst_Io_uring_file_descr_watche =
      "Io_uring_file_descr_watcher.invariant failed",
    _i_ = [0, cst_src_io_uring_file_descr_wa, 41, 13],
    _a_ = [0, "handle_fd_write_ready"],
    _b_ = [0, "handle_fd_read_ready"],
    _c_ = [0, cst_states$0],
    _d_ = [0, "uring"],
    cst_states = cst_states$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Io_uring_file_d = cst_Async_unix_Io_uring_file_d$0;
   function sexp_of_t(param){
    var states_004 = param[2], uring_002 = param[1], bnds_001 = 0;
    function _N_(_Q_){return 0;}
    var
     arg_009 = caml_call1(Sexplib0_Sexp_conv[24], _N_),
     bnds_001$0 = [0, [1, [0, _a_, [0, arg_009, 0]]], bnds_001];
    function _O_(_P_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], _O_),
     bnds_001$1 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_001$0],
     arg_005 = caml_call1(Sexplib0_Sexp_conv[23], states_004),
     bnds_001$2 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_001$1],
     arg_003 = caml_call1(Sexplib0_Sexp_conv[23], uring_002),
     bnds_001$3 = [0, [1, [0, _d_, [0, arg_003, 0]]], bnds_001$2];
    return [1, bnds_001$3];
   }
   function states(r){return r[2];}
   function _e_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _f_ = 0,
    states$0 = [0, function(param){return 0;}, cst_states, _f_, states, _e_],
    backend = 3;
   function invariant(t){
    try{
     var
      states = caml_call2(Base_Field[3], states$0, t),
      _J_ =
        function(param){
         var flags = param[2];
         function _K_(flags$0){
          var _M_ = caml_call2(mem, flags$0, flags);
          return _M_ ? caml_call2(mem, flags, flags$0) : _M_;
         }
         var
          _L_ =
            [0,
             pollin,
             [0, pollout, [0, caml_call2(symbol, pollin, pollout), 0]]];
         if(caml_call2(Core_List[23], _L_, _K_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
        };
     caml_call2(Bounded_int_table[14], states, _J_);
     var _F_ = 0;
     return _F_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _G_ = [0, [1, [0, _g_, [0, sexp_of_t(t), 0]]], 0],
      _H_ = [0, [1, [0, _h_, [0, caml_call1(Core[625], exn), 0]]], _G_],
      _I_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Io_uring_file_descr_watche),
          _H_]];
     return caml_call1(Core[261], _I_);
    }
   }
   function create
   (uring, num_file_descrs, handle_fd_read_ready, handle_fd_write_ready){
    if(1 - caml_call1(Async_unix_Io_uring_raw[10], uring)){
     var
      _y_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_create_an_Ocaml_uri);
     caml_call1(Core[261], _y_);
    }
    var
     states =
       caml_call4
        (Bounded_int_table[4],
         [0, Core_unix_File_descr[2]],
         num_file_descrs,
         Core_unix_File_descr[15],
         0);
    function handle_fd(read_or_write, handle_fd){
     var bit = 914388854 <= read_or_write ? pollin : pollout;
     return function(file_descr, flags){
      var _A_ = caml_call2(mem, bit, flags);
      if(_A_)
       var _B_ = _A_;
      else{
       var
        _C_ = caml_call2(mem, pollerr, flags),
        _D_ = _C_ || caml_call2(mem, pollhup, flags);
       if(_D_){
        var match = caml_call2(Bounded_int_table[9], states, file_descr);
        if(match)
         var flags$0 = match[1][2], _E_ = caml_call2(mem, bit, flags$0);
        else
         var _E_ = 0;
        var _B_ = _E_;
       }
       else
        var _B_ = _D_;
      }
      return _B_ ? caml_call1(handle_fd, file_descr) : _B_;};
    }
    var _z_ = handle_fd(-477700929, handle_fd_write_ready);
    return [0, uring, states, handle_fd(914388854, handle_fd_read_ready), _z_];
   }
   function reset_in_forked_process(param){return 0;}
   function iter(t, f){
    function _w_(file_descr, param){
     var flags = param[2];
     if(caml_call2(mem, pollin, flags)) caml_call2(f, file_descr, 914388854);
     var _x_ = caml_call2(mem, pollout, flags);
     return _x_ ? caml_call2(f, file_descr, -477700929) : _x_;
    }
    return caml_call2(Bounded_int_table[15], t[2], _w_);
   }
   function add_poll(t, file_descr, flags){
    var
     handle = caml_call3(Async_unix_Io_uring_raw[21], t[1], file_descr, flags);
    caml_call3(Bounded_int_table[30], t[2], file_descr, [0, handle, flags]);
    function _q_(res){
     var match = caml_call2(Bounded_int_table[9], t[2], file_descr);
     if(! match) return caml_call1(Async_unix_Import[30], 0);
     var match$0 = match[1], flags = match$0[2], running_job = match$0[1];
     if(running_job === handle)
      if(0 === res[0]){
       var res$0 = res[1], _t_ = caml_call1(of_int, res$0);
       caml_call2(t[3], file_descr, _t_);
       var _u_ = caml_call1(of_int, res$0);
       caml_call2(t[4], file_descr, _u_);
       add_poll(t, file_descr, flags);
      }
      else{
       var err = res[1];
       a:
       {
        if(typeof err !== "number" && 125 === err[1]) break a;
        var _v_ = caml_call1(Core_unix[3][5], err);
        caml_call1(Core[6], _v_);
       }
      }
     return caml_call1(Async_unix_Import[30], 0);
    }
    var
     _r_ = caml_call1(Async_unix_Io_uring_raw[29], handle),
     _s_ = caml_call2(Async_unix_Import[33][2], _r_, _q_);
    return caml_call1(Async_kernel_Deferred[25], _s_);
   }
   function remove_poll_exn(t, file_descr){
    var match = caml_call2(Bounded_int_table[9], t[2], file_descr);
    if(match){
     var running_job = match[1][1];
     caml_call2(Bounded_int_table[29], t[2], file_descr);
     var _o_ = caml_call2(Async_unix_Io_uring_raw[28], t[1], running_job);
     return caml_call1(Async_kernel_Deferred[25], _o_);
    }
    var
     _p_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Attempted_to_remove_pollin);
    return caml_call1(Core[261], _p_);
   }
   function set(t, file_descr, desired){
    var match = caml_call2(Bounded_int_table[9], t[2], file_descr);
    if(match)
     var flags = match[1][2], actual_flags = [0, flags];
    else
     var actual_flags = 0;
    var
     _l_ = desired[2],
     desired_flags =
       desired[1]
        ? _l_ ? [0, caml_call2(symbol, pollin, pollout)] : [0, pollin]
        : _l_ ? [0, pollout] : 0;
    if(! actual_flags){
     if(! desired_flags) return 17724;
     var d$0 = desired_flags[1];
     add_poll(t, file_descr, d$0);
     return 17724;
    }
    var a = actual_flags[1];
    if(! desired_flags){remove_poll_exn(t, file_descr); return 17724;}
    var
     d = desired_flags[1],
     _m_ = caml_call2(mem, a, d),
     _n_ = _m_ ? caml_call2(mem, d, a) : _m_;
    if(1 - _n_){remove_poll_exn(t, file_descr); add_poll(t, file_descr, d);}
    return 17724;
   }
   var sexp_of_t$0 = Core[620], Pre = [0, sexp_of_t$0];
   function pre_check(t){
    caml_call1(Async_unix_Io_uring_raw[13], t[1]);
    return 0;
   }
   var sexp_of_t$1 = Core[323], Check_result = [0, sexp_of_t$1];
   function thread_safe_check(t, param, timeout, span_or_unit){
    if(! timeout) return 1;
    var _k_ = caml_call1(Time_ns_unix[72][89], span_or_unit);
    return caml_call2(Async_unix_Io_uring_raw[14], t[1], _k_);
   }
   function post_check(t, ready){
    var
     _j_ = ready ? (caml_call1(Async_unix_Io_uring_raw[15], t[1]), 0) : ready;
    return _j_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_file_d);
   var
    Async_unix_Io_uring_file_descr =
      [0,
       sexp_of_t,
       invariant,
       create,
       backend,
       set,
       iter,
       Pre,
       pre_check,
       Check_result,
       thread_safe_check,
       post_check,
       reset_in_forked_process];
   runtime.caml_register_global
    (37, Async_unix_Io_uring_file_descr, cst_Async_unix_Io_uring_file_d$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Select_file_descr_watcher
//# unitInfo: Requires: Async_unix__Syscall, Bounded_int_table, Core, Core__List, Core__Result, Core_unix, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Read_write_pair, Sexplib0__Sexp_conv, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Select_file_des$0 = "Async_unix__Select_file_descr_watcher",
    cst_async_unix$0 = "async_unix",
    cst_exn = "exn",
    cst_select_file_descr_watcher = "select_file_descr_watcher",
    cst_src_select_file_descr_watc = "src/select_file_descr_watcher.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_unix = global_data.Core_unix,
    Async_unix_Syscall = global_data.Async_unix__Syscall,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Time_ns_unix = global_data.Time_ns_unix,
    Core_Result = global_data.Core__Result,
    Bounded_int_table = global_data.Bounded_int_table,
    Read_write_pair = global_data.Read_write_pair,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Select_file_des$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_select_file_descr_watc);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "select_file_descr_watcher.ml");
   var
    _j_ = [0, cst_select_file_descr_watcher],
    _k_ = [0, "check_result"],
    _l_ = [0, cst_exn],
    cst_File_descr_watcher_post_ch = "File_descr_watcher.post_check bug",
    cst_select_raised_unexpected_e = "select raised unexpected exn",
    _n_ = [0, cst_exn],
    _o_ = [0, "file_descr"],
    cst_fstat_raised_unexpected_ex = "fstat raised unexpected exn",
    _m_ = [0, cst_src_select_file_descr_watc, 104, 6],
    _h_ = [0, "select_result"],
    _i_ = [0, "pre"],
    _f_ = [0, cst_select_file_descr_watcher],
    _g_ = [0, cst_exn],
    cst_Select_file_descr_watcher_ =
      "Select_file_descr_watcher.invariant failed",
    _a_ = [0, "handle_fd_write_bad"],
    _b_ = [0, "handle_fd_write_ready"],
    _c_ = [0, "handle_fd_read_bad"],
    _d_ = [0, "handle_fd_read_ready"],
    _e_ = [0, "descr_tables"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Select_file_des = cst_Async_unix_Select_file_des$0;
   function sexp_of_t(param){
    var descr_tables_002 = param[1], bnds_001 = 0;
    function _Y_(_ae_){return 0;}
    var
     arg_011 = caml_call1(Sexplib0_Sexp_conv[24], _Y_),
     bnds_001$0 = [0, [1, [0, _a_, [0, arg_011, 0]]], bnds_001];
    function _Z_(_ad_){return 0;}
    var
     arg_009 = caml_call1(Sexplib0_Sexp_conv[24], _Z_),
     bnds_001$1 = [0, [1, [0, _b_, [0, arg_009, 0]]], bnds_001$0];
    function ___(_ac_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], ___),
     bnds_001$2 = [0, [1, [0, _c_, [0, arg_007, 0]]], bnds_001$1];
    function _$_(_ab_){return 0;}
    var
     arg_005 = caml_call1(Sexplib0_Sexp_conv[24], _$_),
     bnds_001$3 = [0, [1, [0, _d_, [0, arg_005, 0]]], bnds_001$2],
     _aa_ =
       caml_call2(Bounded_int_table[1], Core_unix_File_descr[2], Core[620]),
     arg_003 = caml_call2(Read_write_pair[8], _aa_, descr_tables_002),
     bnds_001$4 = [0, [1, [0, _e_, [0, arg_003, 0]]], bnds_001$3];
    return [1, bnds_001$4];
   }
   var backend = 2;
   function invariant(t){
    try{
     var
      _S_ = function(_X_){return 0;},
      _T_ = function(_W_){return 0;},
      _U_ = caml_call2(Bounded_int_table[2], _T_, _S_),
      _V_ = caml_call2(Read_write_pair[18], t[1], _U_);
     return _V_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _P_ = [0, [1, [0, _f_, [0, sexp_of_t(t), 0]]], 0],
      _Q_ = [0, [1, [0, _g_, [0, caml_call1(Core[625], exn), 0]]], _P_],
      _R_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Select_file_descr_watcher_),
          _Q_]];
     return caml_call1(Core[261], _R_);
    }
   }
   function create
   (handle_fd_read_bad,
    handle_fd_write_bad,
    num_file_descrs,
    handle_fd_read_ready,
    handle_fd_write_ready){
    function _O_(param){
     return caml_call4
             (Bounded_int_table[4],
              [0, Core_unix_File_descr[2]],
              num_file_descrs,
              Core_unix_File_descr[15],
              0);
    }
    return [0,
            caml_call1(Read_write_pair[12], _O_),
            handle_fd_read_ready,
            handle_fd_read_bad,
            handle_fd_write_ready,
            handle_fd_write_bad];
   }
   function reset_in_forked_process(param){return 0;}
   function iter(t, f){
    function _M_(read_or_write, table){
     function _N_(key, param){return caml_call2(f, key, read_or_write);}
     return caml_call2(Bounded_int_table[15], table, _N_);
    }
    return caml_call2(Read_write_pair[17], t[1], _M_);
   }
   function sexp_of_t$0(x_012){
    var _L_ = caml_call1(Core[472], Core_unix_File_descr[2]);
    return caml_call2(Read_write_pair[8], _L_, x_012);
   }
   var Pre = [0, sexp_of_t$0];
   function set(t, file_descr, desired){
    function _K_(read_or_write, table){
     return caml_call2(Read_write_pair[23], desired, read_or_write)
             ? caml_call3(Bounded_int_table[30], table, file_descr, 0)
             : caml_call2(Bounded_int_table[29], table, file_descr);
    }
    caml_call2(Read_write_pair[17], t[1], _K_);
    return 17724;
   }
   function pre_check(t){
    return caml_call2(Read_write_pair[20], t[1], Bounded_int_table[7]);
   }
   function sexp_of_t$1(param){
    var
     select_result_016 = param[2],
     pre_014 = param[1],
     arg_017 =
       caml_call3
        (Core_Result[15], Core_unix[136][1], Core[625], select_result_016),
     bnds_013 = [0, [1, [0, _h_, [0, arg_017, 0]]], 0],
     arg_015 = caml_call1(Pre[1], pre_014),
     bnds_013$0 = [0, [1, [0, _i_, [0, arg_015, 0]]], bnds_013];
    return [1, bnds_013$0];
   }
   var Check_result = [0, sexp_of_t$1];
   function thread_safe_check(param, pre, timeout, span){
    var
     timeout$0 =
       timeout
        ? [0,
          818927100,
          caml_call2(Time_ns_unix[72][23], span, Time_ns_unix[72][71])]
        : -511334242;
    function _J_(param){
     return caml_call6(Core_unix[138], 0, pre[1], pre[2], 0, timeout$0, 0);
    }
    return [0, pre, caml_call1(Core_Result[54], _J_)];
   }
   function post_check(t, check_result){
    var select_result = check_result[2], pre = check_result[1];
    try{
     if(0 === select_result[0]){
      var
       match = select_result[1],
       except = match[3],
       write = match[2],
       read = match[1];
      if(! caml_call1(Core_List[18], except))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
      caml_call2(Core_List[19], write, t[4]);
      var _t_ = caml_call2(Core_List[19], read, t[2]);
     }
     else{
      var exn$0 = select_result[1];
      a:
      {
       b:
       if(exn$0[1] === Core_unix[4]){
        var _u_ = exn$0[2];
        c:
        {
         if(typeof _u_ === "number"){
          if(3 === _u_){
           var
            bad =
              function(read_or_write){
               var fds = 914388854 <= read_or_write ? pre[1] : pre[2];
               function _D_(ac, file_descr){
                function _E_(param){
                 caml_call1(Core_unix[75], file_descr);
                 return 0;
                }
                var match = caml_call1(Async_unix_Syscall[1], _E_);
                if(0 === match[0]) return ac;
                var exn = match[1];
                if(exn[1] === Core_unix[4]){
                 var _F_ = exn[2];
                 if(typeof _F_ === "number" && 3 === _F_)
                  return [0, file_descr, ac];
                }
                var
                 _G_ =
                   [0, [1, [0, _n_, [0, caml_call1(Core[625], exn), 0]]], 0],
                 _H_ =
                   [0,
                    [1,
                     [0,
                      _o_,
                      [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
                    _G_],
                 _I_ =
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_fstat_raised_unexpected_ex),
                     _H_]];
                return caml_call1(Core[261], _I_);
               }
               return caml_call3(Core_List[20], fds, 0, _D_);
              },
            _v_ = t[5],
            _w_ = bad(-477700929);
           caml_call2(Core_List[19], _w_, _v_);
           var
            _x_ = t[3],
            _y_ = bad(914388854),
            _z_ = caml_call2(Core_List[19], _y_, _x_);
           break c;
          }
          if(11 !== _u_) break b;
         }
         else if(514 !== _u_[1]) break b;
         var _z_ = 0;
        }
        var _A_ = _z_;
        break a;
       }
       var
        _B_ = [0, caml_call1(Core[625], exn$0), 0],
        _C_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_select_raised_unexpected_e),
            _B_]],
        _A_ = caml_call1(Core[261], _C_);
      }
      var _t_ = _A_;
     }
     return _t_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _p_ = [0, [1, [0, _j_, [0, sexp_of_t(t), 0]]], 0],
      _q_ =
        [0,
         [1, [0, _k_, [0, caml_call1(Check_result[1], check_result), 0]]],
         _p_],
      _r_ = [0, [1, [0, _l_, [0, caml_call1(Core[625], exn), 0]]], _q_],
      _s_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_File_descr_watcher_post_ch),
          _r_]];
     return caml_call1(Core[261], _s_);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Select_file_des);
   var
    Async_unix_Select_file_descr_w =
      [0,
       sexp_of_t,
       invariant,
       create,
       backend,
       set,
       iter,
       Pre,
       pre_check,
       Check_result,
       thread_safe_check,
       post_check,
       reset_in_forked_process];
   runtime.caml_register_global
    (41, Async_unix_Select_file_descr_w, cst_Async_unix_Select_file_des$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Raw_signal_manager
//# unitInfo: Requires: Core, Core__Hashtbl, Core__Signal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Thread_safe_queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Raw_signal_mana$0 = "Async_unix__Raw_signal_manager",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Thread_safe_queue = global_data.Thread_safe_queue,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core = global_data.Core,
    Core_Signal = global_data.Core__Signal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Raw_signal_mana$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/raw_signal_manager.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "raw_signal_manager.ml");
   var
    _a_ = [0, "thread_safe_notify_signal_delivered"],
    _b_ = [0, "delivered"],
    _c_ = [0, "original_dispositions_of_managed_signals"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Raw_signal_mana = cst_Async_unix_Raw_signal_mana$0;
   function sexp_of_t(param){
    var
     delivered_004 = param[2],
     original_dispositions_of_manag = param[1],
     bnds_001 = 0;
    function _h_(_i_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], _h_),
     bnds_001$0 = [0, [1, [0, _a_, [0, arg_007, 0]]], bnds_001],
     arg_005 = caml_call1(Sexplib0_Sexp_conv[23], delivered_004),
     bnds_001$1 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001$0],
     arg_003 =
       caml_call2
        (Core_Signal[35][2],
         Core_Signal[88][1],
         original_dispositions_of_manag),
     bnds_001$2 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$1];
    return [1, bnds_001$2];
   }
   function invariant(param){return 0;}
   function create(thread_safe_notify_signal_deli){
    var _g_ = caml_call1(Thread_safe_queue[3], 0);
    return [0,
            caml_call3(Core_Signal[35][5], 0, 0, 0),
            _g_,
            thread_safe_notify_signal_deli];
   }
   function is_managing(t, signal){
    return caml_call2(Core_Hashtbl[31], t[1], signal);
   }
   function manage(t, signal){
    function _e_(param){
     var
      _f_ =
        [0,
         -325978168,
         function(param){
          caml_call2(Thread_safe_queue[5], t[2], signal);
          return caml_call1(t[3], 0);
         }];
     return caml_call2(Core_Signal[88][2], signal, _f_);
    }
    caml_call3(Core_Hashtbl[54], t[1], signal, _e_);
    return 0;
   }
   function iter_delivered(t, f){
    for(;;){
     var _d_ = caml_call1(Thread_safe_queue[4], t[2]);
     if(! caml_call2(Core[91], _d_, 0)) return 0;
     var
      signal = caml_call1(Thread_safe_queue[6], t[2]),
      original_disposition = caml_call2(Core_Hashtbl[57], t[1], signal);
     caml_call2(f, original_disposition, signal);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Raw_signal_mana);
   var
    Async_unix_Raw_signal_manager =
      [0, sexp_of_t, invariant, create, manage, is_managing, iter_delivered];
   runtime.caml_register_global
    (19, Async_unix_Raw_signal_manager, cst_Async_unix_Raw_signal_mana$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Shutdown
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_unix__Clock, Async_unix__Import, Base__Backtrace, Base__Exn, Core, Core__Debug, Core__Error, Core__List, Core__Or_error, Core__Signal, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Signal_unix, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Shutdown$0 = "Async_unix__Shutdown",
    cst_Caml_exit_raised$1 = "Caml.exit raised",
    cst_async_unix$0 = "async_unix",
    cst_src_shutdown_ml = "src/shutdown.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_unix_Import = global_data.Async_unix__Import,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core = global_data.Core,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Signal = global_data.Core__Signal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Backtrace = global_data.Base__Backtrace,
    Core_Error = global_data.Core__Error,
    Core_Debug = global_data.Core__Debug,
    Core_Or_error = global_data.Core__Or_error,
    Assert_failure = global_data.Assert_failure,
    Core_List = global_data.Core__List,
    Base_Exn = global_data.Base__Exn,
    Core_unix = global_data.Core_unix,
    Match_failure = global_data.Match_failure,
    Stdlib = global_data.Stdlib,
    Signal_unix = global_data.Signal_unix,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Shutdown$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_shutdown_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "shutdown.ml");
   var
    cst_shutting_down_due_to_unhan =
      "shutting down due to unhandled exception",
    _m_ = [0, "Stop"],
    _n_ = [0, "Ignore"],
    _l_ = [0, "Continue"],
    _o_ = [0, "default_sys_behavior"],
    _p_ = [0, "signal"],
    cst_Shutdown_shutdown_with_sig =
      "Shutdown.shutdown_with_signal_exn: not a terminating signal",
    cst_Shutdown_forced = "Shutdown forced.",
    _k_ = [0, 1],
    cst_one_at_shutdown_function_f = "one at_shutdown function finished",
    cst_at_shutdown_function_raise = "at_shutdown function raised",
    _j_ = [0, 3804260],
    _h_ = [0, 1],
    _i_ = [0, cst_src_shutdown_ml, 124, 16],
    _f_ = [0, "prior"],
    _g_ = [0, "status"],
    cst_shutdown_with_inconsistent = "shutdown with inconsistent status",
    cst_shutdown = "shutdown",
    cst_Signal_unix_send_exn_faile =
      "Signal_unix.send_exn failed to kill process",
    cst_Caml_exit_raised$0 = cst_Caml_exit_raised$1,
    cst_Caml_exit_raised = cst_Caml_exit_raised$1,
    _e_ = [0, cst_src_shutdown_ml, 69, 4],
    cst_at_shutdown = "at_shutdown",
    _c_ = [0, "Yes"],
    _d_ = [0, "No"],
    _a_ = [0, "Exit"],
    _b_ = [0, "Signal"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Shutdown = cst_Async_unix_Shutdown$0;
   function sexp_of_t(param){
    if(0 === param[0]){
     var arg0_007 = param[1], res0_008 = caml_call1(Core[389], arg0_007);
     return [1, [0, _a_, [0, res0_008, 0]]];
    }
    var arg0_009 = param[1], res0_010 = caml_call1(Core_Signal[10], arg0_009);
    return [1, [0, _b_, [0, res0_010, 0]]];
   }
   function sexp_of_t$0(param){
    if(! param) return _d_;
    var arg0_011 = param[1], res0_012 = sexp_of_t(arg0_011);
    return [1, [0, _c_, [0, res0_012, 0]]];
   }
   var
    Maybe_status = [0, sexp_of_t$0],
    debug = Async_kernel_Debug[11],
    todo = [0, 0];
   function at_shutdown(f){
    var backtrace = caml_call2(Base_Backtrace[2], 0, 0);
    if(debug)
     caml_call3
      (Async_kernel_Debug[15], cst_at_shutdown, backtrace, Base_Backtrace[1]);
    todo[1] = [0, [0, backtrace, f], todo[1]];
    return 0;
   }
   var
    shutting_down_ref = [0, 0],
    default_force_ref =
      [0,
       function(param){
        var _P_ = caml_call1(Core[630], 10.);
        return caml_call1(Async_unix_Clock[4], _P_);
       }];
   function default_force(param){return default_force_ref[1];}
   function set_default_force(force){default_force_ref[1] = force; return 0;}
   function shutting_down(param){return shutting_down_ref[1];}
   function is_shutting_down(param){return shutting_down(0) ? 1 : 0;}
   function ignore_exn(f){try{caml_call1(f, 0); return;}catch(_O_){return;}}
   function exit_reliably(status){
    if(0 === status[0]){
     var code = status[1];
     try{caml_call1(Core[83], code);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      ignore_exn
       (function(param){
         return caml_call3
                 (Core_Debug[2], cst_Caml_exit_raised, exn, Base_Exn[1]);
        });
      var _M_ = caml_call2(Async_unix_Import[3], code, 0) ? 1 : code;
      return caml_call1(Core_unix[274], _M_);
     }
     throw caml_maybe_attach_backtrace([0, Match_failure, _e_], 1);
    }
    var signal = status[1];
    try{caml_call1(Stdlib[103], 0);}
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     ignore_exn
      (function(param){
        return caml_call3
                (Core_Debug[2], cst_Caml_exit_raised$0, exn$0, Base_Exn[1]);
       });
    }
    caml_call2(Core_Signal[88][3], signal, -384499551);
    var _N_ = [0, 4001835, caml_call1(Core_unix[34], 0)];
    caml_call2(Signal_unix[6], signal, _N_);
    ignore_exn
     (function(param){
       return caml_call3
               (Core_Debug[2],
                cst_Signal_unix_send_exn_faile,
                signal,
                Core_Signal[10]);
      });
    return caml_call1(Core_unix[274], 1);
   }
   function shutdown_with_status(force, status){
    if(debug)
     ignore_exn
      (function(param){
        return caml_call3
                (Async_kernel_Debug[15], cst_shutdown, status, sexp_of_t);
       });
    var match = shutting_down_ref[1];
    if(! match){
     shutting_down_ref[1] = [0, status];
     var
      _E_ =
        function(results){
         var match = shutting_down(0);
         if(! match)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
         var status = match[1];
         a:
         if(0 === caml_call1(Core_Or_error[57], results)[0])
          var status$0 = status;
         else{
          if(0 === status[0] && 0 === status[1]){var status$0 = _h_; break a;}
          var status$0 = status;
         }
         return exit_reliably(status$0);
        },
      _F_ =
        function(param){
         var f = param[2], backtrace = param[1];
         function _J_(result){
          if(0 !== result[0]){
           var error = result[1];
           ignore_exn
            (function(param){
              function _L_(param){
               var
                arg1_015 = param[2],
                arg0_014 = param[1],
                res0_016 = caml_call1(Core_Error[9], arg0_014),
                res1_017 = caml_call1(Base_Backtrace[1], arg1_015);
               return [1, [0, res0_016, [0, res1_017, 0]]];
              }
              return caml_call3
                      (Core_Debug[2],
                       cst_at_shutdown_function_raise,
                       [0, error, backtrace],
                       _L_);
             });
          }
          if(debug)
           ignore_exn
            (function(param){
              return caml_call3
                      (Async_kernel_Debug[15],
                       cst_one_at_shutdown_function_f,
                       backtrace,
                       Base_Backtrace[1]);
             });
          return result;
         }
         var _K_ = caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, _j_, f);
         return caml_call2(Async_unix_Import[33][3], _K_, _J_);
        },
      _G_ = caml_call2(Core_List[51], todo[1], _F_),
      _H_ = caml_call1(Async_kernel_Deferred[21], _G_);
     caml_call2(Async_unix_Import[22], _H_, _E_);
     if(force)
      var f = force[1], force$0 = f;
     else
      var force$0 = caml_call1(default_force_ref[1], 0);
     var
      _I_ =
        function(param){
         ignore_exn
          (function(param){
            return caml_call1(Async_kernel_Debug[16], cst_Shutdown_forced);
           });
         return exit_reliably(_k_);
        };
     return caml_call2(Async_unix_Import[22], force$0, _I_);
    }
    var prior = match[1];
    if(status === prior)
     var _A_ = 1;
    else if(0 === status[0]){
     var a_003 = status[1];
     if(0 === prior[0])
      var b_004 = prior[1], _A_ = caml_call2(Core[384], a_003, b_004);
     else
      var _A_ = 0;
    }
    else{
     var a_005 = status[1];
     if(0 === prior[0])
      var _A_ = 0;
     else
      var b_006 = prior[1], _A_ = caml_call2(Core_Signal[39], a_005, b_006);
    }
    a:
    if(_A_)
     var match$0 = 2;
    else{
     if(0 === status[0] && 0 === status[1]){var match$0 = 2; break a;}
     if(0 === prior[0] && 0 === prior[1]){var match$0 = 1; break a;}
     var match$0 = 0;
    }
    switch(match$0){
      case 0:
       var
        _B_ = [0, [1, [0, _f_, [0, sexp_of_t(prior), 0]]], 0],
        _C_ = [0, [1, [0, _g_, [0, sexp_of_t(status), 0]]], _B_],
        _D_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_shutdown_with_inconsistent),
            _C_]];
       return caml_call1(Core[261], _D_);
      case 1:
       shutting_down_ref[1] = [0, status]; return 0;
      default: return 0;
    }
   }
   function shutdown(force, exit_code){
    return shutdown_with_status(force, [0, exit_code]);
   }
   function shutdown_with_signal_exn(force, signal){
    var default_sys_behavior = caml_call1(Core_Signal[46], signal);
    if(497016682 <= default_sys_behavior && 926227490 > default_sys_behavior)
     return shutdown_with_status(force, [1, signal]);
    var
     _v_ = 0,
     _w_ = 0,
     _x_ =
       192584839 === default_sys_behavior
        ? _l_
        : 926227490 <= default_sys_behavior ? _m_ : _n_,
     _y_ =
       [0,
        [1, [0, _p_, [0, caml_call1(Core_Signal[10], signal), 0]]],
        [0, [1, [0, _o_, [0, _x_, _w_]]], _v_]],
     _z_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Shutdown_shutdown_with_sig),
         _y_]];
    return caml_call1(Core[261], _z_);
   }
   function shutdown_on_unhandled_exn(param){
    function _s_(exn){
     ignore_exn
      (function(param){
        return caml_call3
                (Async_kernel_Debug[15],
                 cst_shutting_down_due_to_unhan,
                 exn,
                 Core[625]);
       });
     try{var _t_ = shutdown(0, 1); return _t_;}catch(_u_){return 0;}
    }
    return caml_call2(Async_kernel_Monitor[7], Async_kernel_Monitor[24], _s_);
   }
   function exit(force, status){
    shutdown(force, status);
    return caml_call1(Async_kernel_Deferred[19], 0);
   }
   var
    proceed_with_shutdown = caml_call1(Async_kernel_Ivar[12], 0),
    num_waiting = [0, 0];
   function check(param){
    var _r_ = caml_call2(Async_unix_Import[3], num_waiting[1], 0);
    return _r_
            ? caml_call2(Async_kernel_Ivar[14], proceed_with_shutdown, 0)
            : _r_;
   }
   at_shutdown
    (function(param){
      check(0);
      return caml_call1(Async_kernel_Ivar[19], proceed_with_shutdown);
     });
   function don_t_finish_before(d){
    if(shutting_down(0)) return 0;
    num_waiting[1]++;
    function _q_(param){
     num_waiting[1] += -1;
     return shutting_down(0) ? check(0) : 0;
    }
    return caml_call2(Async_unix_Import[22], d, _q_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Shutdown);
   var
    Async_unix_Shutdown =
      [0,
       shutdown,
       shutdown_with_signal_exn,
       shutdown_on_unhandled_exn,
       exit,
       default_force,
       set_default_force,
       [0, sexp_of_t],
       Maybe_status,
       shutting_down,
       is_shutting_down,
       at_shutdown,
       don_t_finish_before];
   runtime.caml_register_global
    (59, Async_unix_Shutdown, cst_Async_unix_Shutdown$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Signal_manager
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Async_unix__Raw_signal_manager, Async_unix__Shutdown, Core, Core__Bag, Core__Hashtbl, Core__List, Core__Signal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Signal_manager$0 = "Async_unix__Signal_manager",
    cst_async_unix$0 = "async_unix",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Raw_signal_manager = global_data.Async_unix__Raw_signal_manager,
    Core_List = global_data.Core__List,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Signal = global_data.Core__Signal,
    Async_unix_Shutdown = global_data.Async_unix__Shutdown,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Bag = global_data.Core__Bag,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Signal_manager$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/signal_manager.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "signal_manager.ml");
   var
    _d_ = [0, "signal_dispatcher"],
    _e_ = [0, "raw_signal_manager"],
    _c_ = [0, "handlers_by_signal"],
    _b_ = [0, "exn"],
    cst_signal_handler_unexpectedl = "signal handler unexpectedly raised",
    _a_ = [0, "bag"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Signal_manager = cst_Async_unix_Signal_manager$0;
   function sexp_of_t(param){
    var
     bag_002 = param[1],
     arg_003 = caml_call2(Core_Bag[3], Sexplib0_Sexp_conv[23], bag_002),
     bnds_001 = [0, [1, [0, _a_, [0, arg_003, 0]]], 0];
    return [1, bnds_001];
   }
   function get_handlers(t, signal){
    function _r_(param){return [0, caml_call1(Core_Bag[22], 0)];}
    return caml_call3(Core_Hashtbl[54], t[1], signal, _r_);
   }
   function sexp_of_t$0(param){
    var
     signal_dispatcher_010 = param[2],
     raw_signal_manager_008 = param[1],
     handlers_by_signal_005 = signal_dispatcher_010[1],
     arg_006 =
       caml_call2(Core_Signal[35][2], sexp_of_t, handlers_by_signal_005),
     bnds_004 = [0, [1, [0, _c_, [0, arg_006, 0]]], 0],
     arg_011 = [1, bnds_004],
     bnds_007 = [0, [1, [0, _d_, [0, arg_011, 0]]], 0],
     arg_009 =
       caml_call1(Async_unix_Raw_signal_manager[1], raw_signal_manager_008),
     bnds_007$0 = [0, [1, [0, _e_, [0, arg_009, 0]]], bnds_007];
    return [1, bnds_007$0];
   }
   function invariant(param){return 0;}
   function create(thread_safe_notify_signal_deli){
    var _q_ = [0, caml_call3(Core_Signal[35][5], 0, 0, 0)];
    return [0,
            caml_call1
             (Async_unix_Raw_signal_manager[3],
              thread_safe_notify_signal_deli),
            _q_];
   }
   function is_managing(t, signal){
    return caml_call2(Async_unix_Raw_signal_manager[5], t[1], signal);
   }
   function set_composable_handler(t, signals){
    var _p_ = caml_call1(Async_unix_Raw_signal_manager[4], t[1]);
    caml_call2(Core_List[19], signals, _p_);
    var t$0 = t[2];
    function _o_(signal){get_handlers(t$0, signal); return 0;}
    return caml_call2(Core_List[19], signals, _o_);
   }
   function manage(t, signal){
    return set_composable_handler(t, [0, signal, 0]);
   }
   function manage_but_keep_default_behavi(t, signal){
    return caml_call2(Async_unix_Raw_signal_manager[4], t[1], signal);
   }
   function install_handler(t, signals, handler){
    var _n_ = caml_call1(Async_unix_Raw_signal_manager[4], t[1]);
    caml_call2(Core_List[19], signals, _n_);
    var t$0 = t[2];
    function _m_(signal){
     var handlers = get_handlers(t$0, signal);
     return [0, handlers, caml_call2(Core_Bag[23], handlers[1], handler)];
    }
    return [0, caml_call2(Core_List[51], signals, _m_)];
   }
   function remove_handler(t, handler$0){
    var handler = handler$0[1];
    function _l_(param){
     var handler_elt = param[2], handlers = param[1];
     return caml_call2(Core_Bag[26], handlers[1], handler_elt);
    }
    return caml_call2(Core_List[19], handler, _l_);
   }
   function handle_delivered(t){
    function _f_(original_disposition, signal){
     var t$0 = t[2], match = caml_call2(Core_Hashtbl[56], t$0[1], signal);
     if(match){
      var
       handlers = match[1],
       _g_ =
         function(handler){
          try{var _k_ = caml_call1(handler, signal); return _k_;}
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _i_ = [0, [1, [0, _b_, [0, caml_call1(Core[625], exn), 0]]], 0],
            _j_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_signal_handler_unexpectedl),
                _i_]];
           return caml_call1(Core[261], _j_);
          }
         };
      return caml_call2(Core_Bag[7], handlers[1], _g_);
     }
     function _h_(param){
      if(typeof original_disposition !== "number"){
       var f = original_disposition[2];
       return caml_call1(f, signal);
      }
      if(-384499551 > original_disposition) return 0;
      var match = caml_call1(Core_Signal[46], signal);
      if(497016682 <= match && 926227490 > match)
       return caml_call2(Async_unix_Shutdown[2], 0, signal);
      return 0;
     }
     return caml_call3(Async_kernel_Async_kernel_sche[9], 0, 0, _h_);
    }
    caml_call2(Async_unix_Raw_signal_manager[6], t[1], _f_);
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Signal_manager);
   var
    Async_unix_Signal_manager =
      [0,
       sexp_of_t$0,
       invariant,
       create,
       manage,
       manage_but_keep_default_behavi,
       is_managing,
       set_composable_handler,
       install_handler,
       remove_handler,
       handle_delivered];
   runtime.caml_register_global
    (26, Async_unix_Signal_manager, cst_Async_unix_Signal_manager$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Raw_scheduler
//# unitInfo: Requires: Async_kernel__Async_gc, Async_kernel__Async_kernel_scheduler, Async_kernel__Async_stream, Async_kernel__Clock_ns, Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Execution_context, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler, Async_kernel__Throttle, Async_kernel_config, Async_unix__Busy_poller, Async_unix__By_descr, Async_unix__Config, Async_unix__Dump_core_on_job_delay, Async_unix__Epoll_file_descr_watcher, Async_unix__File_descr_watcher_intf, Async_unix__Import, Async_unix__Interruptor, Async_unix__Io_uring_file_descr_watcher, Async_unix__Io_uring_raw, Async_unix__Raw_fd, Async_unix__Select_file_descr_watcher, Async_unix__Signal_manager, Base__Backtrace, Base__Exn, Base__Field, Core, Core__Bool, Core__Debug, Core__Error, Core__Int, Core__Int63, Core__Lazy, Core__List, Core__Option, Core__Or_error, Core__Pid, Core__Result, Core__Sexp, Core__Signal, Core__Stack, Core__Uniform_array, Core_thread, Core_unix, Core_unix__File_descr, Heap_block, Inline_test_config, Linux_ext, Nano_mutex, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Read_write_pair, Sexplib0__Sexp_conv, Stdlib, Thread_pool, Time_float_unix, Time_ns_unix, Time_stamp_counter
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Raw_scheduler$0 = "Async_unix__Raw_scheduler",
    cst_async_unix$0 = "async_unix",
    cst_busy_pollers$0 = "busy_pollers",
    cst_dns_lookup_throttle$0 = "dns_lookup_throttle",
    cst_exn = "exn",
    cst_external_fd_by_descr$0 = "external_fd_by_descr",
    cst_external_fd_events$0 = "external_fd_events",
    cst_fd_by_descr$0 = "fd_by_descr",
    cst_fds_whose_watching_has_cha$0 = "fds_whose_watching_has_changed",
    cst_file_descr = "file_descr",
    cst_file_descr_watcher$0 = "file_descr_watcher",
    cst_handle_thread_pool_stuck$0 = "handle_thread_pool_stuck",
    cst_have_lock_do_cycle$1 = "have_lock_do_cycle",
    cst_initialized_at$0 = "initialized_at",
    cst_interruptor$0 = "interruptor",
    cst_kernel_scheduler$0 = "kernel_scheduler",
    cst_max_inter_cycle_timeout$0 = "max_inter_cycle_timeout",
    cst_min_inter_cycle_timeout$0 = "min_inter_cycle_timeout",
    cst_mutex$0 = "mutex",
    cst_next_tsc_calibration$0 = "next_tsc_calibration",
    cst_num_busy_pollers$0 = "num_busy_pollers",
    cst_scheduler = "scheduler",
    cst_scheduler_thread_id$0 = "scheduler_thread_id",
    cst_signal_manager$0 = "signal_manager",
    cst_src_raw_scheduler_ml$0 = "src/raw_scheduler.ml",
    cst_start_type$0 = "start_type",
    cst_thread_pool$0 = "thread_pool",
    cst_thread_pool_stuck$0 = "thread_pool_stuck",
    cst_time_spent_waiting_for_io$0 = "time_spent_waiting_for_io",
    cst_timerfd$0 = "timerfd",
    cst_timerfd_set_at$0 = "timerfd_set_at",
    cst_uring$0 = "uring",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call26
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25){
    return (f.l >= 0 ? f.l : f.l = f.length) == 26
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16,
               a17,
               a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16,
                a17,
                a18,
                a19,
                a20,
                a21,
                a22,
                a23,
                a24,
                a25]);
   }
   function caml_call27
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26){
    return (f.l >= 0 ? f.l : f.l = f.length) == 27
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16,
               a17,
               a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16,
                a17,
                a18,
                a19,
                a20,
                a21,
                a22,
                a23,
                a24,
                a25,
                a26]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/raw_scheduler.ml:624:17",
    text = "Async's thread pool is stuck",
    Core_Or_error = global_data.Core__Or_error,
    Base_Exn = global_data.Base__Exn,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Async_unix_By_descr = global_data.Async_unix__By_descr,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_List = global_data.Core__List,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Core_Error = global_data.Core__Error,
    Core_Result = global_data.Core__Result,
    Core_Option = global_data.Core__Option,
    Async_unix_Import = global_data.Async_unix__Import,
    Thread_pool = global_data.Thread_pool,
    Time_ns_unix = global_data.Time_ns_unix,
    Async_kernel_config = global_data.Async_kernel_config,
    Async_kernel_Async_stream = global_data.Async_kernel__Async_stream,
    Base_Backtrace = global_data.Base__Backtrace,
    Nano_mutex = global_data.Nano_mutex,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Time_float_unix = global_data.Time_float_unix,
    Core_Pid = global_data.Core__Pid,
    Core_unix = global_data.Core_unix,
    Core_thread = global_data.Core_thread,
    Heap_block = global_data.Heap_block,
    Core_Sexp = global_data.Core__Sexp,
    Stdlib = global_data.Stdlib,
    Async_unix_Dump_core_on_job_de =
      global_data.Async_unix__Dump_core_on_job_delay,
    Async_unix_Signal_manager = global_data.Async_unix__Signal_manager,
    Linux_ext = global_data.Linux_ext,
    Time_stamp_counter = global_data.Time_stamp_counter,
    Core_Uniform_array = global_data.Core__Uniform_array,
    Async_unix_Busy_poller = global_data.Async_unix__Busy_poller,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_unix_File_descr_watcher_ =
      global_data.Async_unix__File_descr_watcher_intf,
    Async_unix_Interruptor = global_data.Async_unix__Interruptor,
    Async_unix_Raw_fd = global_data.Async_unix__Raw_fd,
    Read_write_pair = global_data.Read_write_pair,
    Core_Signal = global_data.Core__Signal,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_unix_Config = global_data.Async_unix__Config,
    Core_Lazy = global_data.Core__Lazy,
    Core_Int63 = global_data.Core__Int63,
    Core_Stack = global_data.Core__Stack,
    Assert_failure = global_data.Assert_failure,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Async_unix_Io_uring_file_descr =
      global_data.Async_unix__Io_uring_file_descr_watcher,
    Async_unix_Epoll_file_descr_wa =
      global_data.Async_unix__Epoll_file_descr_watcher,
    Async_unix_Select_file_descr_w =
      global_data.Async_unix__Select_file_descr_watcher,
    Core_Int = global_data.Core__Int,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime;
   global_data.Core__Bool;
   var
    Core_Debug = global_data.Core__Debug,
    Base_Field = global_data.Base__Field,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Raw_scheduler$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_raw_scheduler_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "raw_scheduler.ml");
   var
    debug = Async_kernel_Debug[10],
    cst_Attempt_to_run_one_cycle_w =
      "Attempt to run_one_cycle without holding Async lock",
    cst_Attempt_to_unregister_an_F =
      "Attempt to unregister an FD which is not registered",
    _bo_ = [0, 3553398],
    _bp_ = [0, 0],
    cst_Unsupported_file_descripto$0 =
      "Unsupported file descriptor type in unregister_fd",
    _bm_ = [0, 3553398],
    _bn_ = [0, 0],
    cst_Unsupported_file_descripto =
      "Unsupported file descriptor type in register_fd",
    cst_Cannot_watch_external_fds_ =
      "Cannot watch external fds while using the Ocaml_uring fd watcher",
    cst_FD_registration_must_only_ =
      "FD registration must only be done from the scheduler thread",
    cst_Scheduler_External_run_one$1 =
      "Scheduler.External.run_one_cycle called from wrong thread",
    cst_Scheduler_External_run_one$0 =
      "Scheduler.External.run_one_cycle called recursively",
    cst_Scheduler_External_run_one$2 =
      "Scheduler.External.run_one_cycle called while scheduler already running in another thread",
    cst_Scheduler_External_run_one =
      "Scheduler.External.run_one_cycle called from within Async",
    _bl_ = [0, "ev.file_descr"],
    cst_Bad_file_descriptor = "Bad file descriptor",
    cst_Scheduler_External_current =
      "Scheduler.External.current_thread_can_cycle called from within Async",
    cst_Attempt_to_call_current_th =
      "Attempt to call current_thread_can_cycle without holding Async lock",
    cst_Thread_pool_stats_subscrip =
      "Thread_pool_stats_subscription.create_exn can only be called once",
    cst_long_async_cycle = "long async cycle",
    _bk_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    _bj_ = [0, cst_initialized_at$0],
    cst_Async_was_initialized_prio =
      "Async was initialized prior to [Scheduler.go_main]",
    cst_cannot_mix_Scheduler_go_an =
      "cannot mix Scheduler.go and Scheduler.External",
    cst_cannot_Scheduler_go_more_t = "cannot Scheduler.go more than once",
    cst_Scheduler_go = "Scheduler.go",
    cst_error_program_is_attemptin =
      "error: program is attempting to schedule async work too soon (at toplevel of a library, usually)",
    _bh_ = [0, "pid"],
    _bi_ = [0, "thread_id"],
    cst_bug_in_async_scheduler = "bug in async scheduler",
    cst_Sexp_hum = "%{Sexp#hum}\n%!",
    _bf_ = [12, 10, [10, 0]],
    _bg_ = [0, 0],
    cst_unhandled_exception_in_Asy = "unhandled exception in Async scheduler",
    cst_dumping_core = "dumping core",
    cst_handling_delivered_signals = "handling delivered signals",
    _bd_ = [0, "Immediately"],
    _be_ = [0, "After"],
    cst_File_descr_watcher_pre_che = "File_descr_watcher.pre_check",
    cst_File_descr_watcher_thread_ = "File_descr_watcher.thread_safe_check",
    cst_File_descr_watcher_post_ch = "File_descr_watcher.post_check",
    _bb_ = [0, cst_scheduler],
    _bc_ = [0, "interruptor_read_fd"],
    cst_can_not_watch_interruptor = "can not watch interruptor",
    cst_add_busy_poller_maximum_nu =
      "[add_busy_poller] maximum number of pollers exceeded",
    _a8_ = [0, cst_scheduler],
    _a9_ = [0, "bt"],
    _a__ = [0, cst_exn],
    _a$_ = [0, "fd"],
    _ba_ = [0, "desired"],
    cst_sync_changed_fds_to_file_d =
      "sync_changed_fds_to_file_descr_watcher unable to set fd",
    cst_File_descr_watcher_set = "File_descr_watcher.set",
    cst_have_lock_do_cycle$0 = cst_have_lock_do_cycle$1,
    cst_Async_is_unusable_due_to_S =
      "Async is unusable due to [Scheduler.make_async_unusable]",
    cst_Async_refuses_to_run_using =
      "Async refuses to run using epoll on a system that doesn't support timer FDs, since\nAsync will be unable to timeout with sub-millisecond precision.",
    _a6_ = [0, cst_src_raw_scheduler_ml$0, 661, 14],
    cst_creating_scheduler = "creating scheduler",
    _a3_ = [0, cst_file_descr],
    cst_File_descr_watcher_returne$0 =
      "File_descr_watcher returned unknown file descr",
    _a2_ = [0, cst_file_descr],
    cst_File_descr_watcher_returne =
      "File_descr_watcher returned the timerfd as ready to be written to",
    cst_request_stop_watching = "request_stop_watching",
    cst_request_start_watching = "request_start_watching",
    cst_give_up_on_watching = "give_up_on_watching",
    _aX_ = [0, "last_thread_creation_failure"],
    _aY_ = [0, "max_num_threads"],
    _aZ_ = [0, "num_threads_created"],
    _a0_ = [0, "stuck_for"],
    _a1_ =
      [0,
       [2, 0, [11, ", and will raise an exception in ", [2, 0, 0]]],
       "%s, and will raise an exception in %s"],
    cst_attempt_to_access_Async_fr =
      "attempt to access Async from thread not holding the Async lock",
    _aM_ = [0, cst_scheduler],
    _aN_ = [0, cst_exn],
    cst_Scheduler_invariant_failed = "Scheduler.invariant failed",
    _aW_ = [0, cst_src_raw_scheduler_ml$0, 308, 13],
    _aU_ = [0, cst_src_raw_scheduler_ml$0, 311, 27],
    _aV_ = [0, cst_src_raw_scheduler_ml$0, 310, 23],
    _aR_ = [0, cst_file_descr],
    _aS_ = [0, cst_exn],
    cst_fd_problem = "fd problem",
    cst_missing_from_fd_by_descr = "missing from fd_by_descr",
    _aT_ = [0, cst_src_raw_scheduler_ml$0, 320, 28],
    _aQ_ = [0, cst_src_raw_scheduler_ml$0, 333, 15],
    _aP_ = [0, cst_src_raw_scheduler_ml$0, 337, 45],
    _aO_ = [0, cst_src_raw_scheduler_ml$0, 352, 11],
    _aI_ = [0, cst_scheduler],
    _aJ_ = [0, "backtrace"],
    _aK_ = [0, "error"],
    _aL_ = [0, cst_file_descr],
    cst_Async_was_unable_to_add_a_ =
      "Async was unable to add a file descriptor to its table of open file descriptors",
    cst_Async_the_one_and_only_not =
      "Async the_one_and_only not ready to initialize",
    cst_lock_released = "lock released",
    cst_waiting_on_lock = "waiting on lock",
    _ah_ = [0, cst_uring$0],
    _ai_ = [0, cst_initialized_at$0],
    _aj_ = [0, cst_min_inter_cycle_timeout$0],
    _ak_ = [0, cst_max_inter_cycle_timeout$0],
    _al_ = [0, cst_have_lock_do_cycle$1],
    _am_ = [0, cst_kernel_scheduler$0],
    _an_ = [0, cst_next_tsc_calibration$0],
    _ao_ = [0, cst_dns_lookup_throttle$0],
    _ap_ = [0, cst_thread_pool_stuck$0],
    _aq_ = [0, cst_handle_thread_pool_stuck$0],
    _ar_ = [0, cst_thread_pool$0],
    _as_ = [0, cst_signal_manager$0],
    _at_ = [0, cst_interruptor$0],
    _au_ = [0, cst_scheduler_thread_id$0],
    _av_ = [0, cst_timerfd_set_at$0],
    _aw_ = [0, cst_timerfd$0],
    _ax_ = [0, cst_external_fd_events$0],
    _ay_ = [0, cst_external_fd_by_descr$0],
    _az_ = [0, cst_fd_by_descr$0],
    _aA_ = [0, cst_time_spent_waiting_for_io$0],
    _aB_ = [0, cst_num_busy_pollers$0],
    _aC_ = [0, cst_busy_pollers$0],
    _aD_ = [0, cst_file_descr_watcher$0],
    _aE_ = [0, cst_fds_whose_watching_has_cha$0],
    _aF_ = [0, cst_start_type$0],
    _aG_ = [0, cst_mutex$0],
    _e_ = [0, "Not_started"],
    _f_ = [0, "Called_go"],
    _g_ = [0, "Called_block_on_async"],
    _h_ = [0, "active"],
    _i_ = [0, "Called_external_run"],
    _a_ = [0, "num_work_completed"],
    _b_ = [0, "stuck_since"],
    _c_ = [0, "Stuck"],
    _d_ = [0, "No_unstarted_work"],
    cst_uring = cst_uring$0,
    cst_initialized_at = cst_initialized_at$0,
    cst_min_inter_cycle_timeout = cst_min_inter_cycle_timeout$0,
    cst_max_inter_cycle_timeout = cst_max_inter_cycle_timeout$0,
    cst_have_lock_do_cycle = cst_have_lock_do_cycle$1,
    cst_kernel_scheduler = cst_kernel_scheduler$0,
    cst_next_tsc_calibration = cst_next_tsc_calibration$0,
    cst_dns_lookup_throttle = cst_dns_lookup_throttle$0,
    cst_thread_pool_stuck = cst_thread_pool_stuck$0,
    cst_handle_thread_pool_stuck = cst_handle_thread_pool_stuck$0,
    cst_thread_pool = cst_thread_pool$0,
    cst_signal_manager = cst_signal_manager$0,
    cst_interruptor = cst_interruptor$0,
    cst_scheduler_thread_id = cst_scheduler_thread_id$0,
    cst_timerfd_set_at = cst_timerfd_set_at$0,
    cst_timerfd = cst_timerfd$0,
    cst_external_fd_events = cst_external_fd_events$0,
    cst_external_fd_by_descr = cst_external_fd_by_descr$0,
    cst_fd_by_descr = cst_fd_by_descr$0,
    cst_time_spent_waiting_for_io = cst_time_spent_waiting_for_io$0,
    cst_num_busy_pollers = cst_num_busy_pollers$0,
    cst_busy_pollers = cst_busy_pollers$0,
    cst_file_descr_watcher = cst_file_descr_watcher$0,
    cst_fds_whose_watching_has_cha = cst_fds_whose_watching_has_cha$0,
    cst_start_type = cst_start_type$0,
    cst_mutex = cst_mutex$0,
    _aH_ = [0, 0],
    cst_src_raw_scheduler_ml = cst_src_raw_scheduler_ml$0,
    _a5_ = [0, "64-bits-only", 0],
    cst_maybe_report_long_async_cy =
      "maybe_report_long_async_cycles_to_magic_trace doesn't allocate",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Raw_scheduler = cst_Async_unix_Raw_scheduler$0;
   function sexp_of_t(t){
    var
     arg1_002 = t[13],
     arg0_001 = t[4],
     res0_003 = caml_call1(Async_kernel_config[10][1], arg0_001),
     res1_004 = caml_call1(t[1], arg1_002);
    return [1, [0, res0_003, [0, res1_004, 0]]];
   }
   var
    File_descr_watcher = [0, sexp_of_t],
    Custom = [0],
    Which_watcher = [0, Custom],
    External_fd_event = [0];
   function sexp_of_t$0(param){
    if(! param) return _d_;
    var
     num_work_completed_008 = param[2],
     stuck_since_006 = param[1],
     arg_009 = caml_call1(Core[389], num_work_completed_008),
     bnds_005 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Time_ns_unix[85], stuck_since_006),
     bnds_005$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_005];
    return [1, [0, _c_, bnds_005$0]];
   }
   var
    Thread_pool_stuck_status = [0, sexp_of_t$0],
    within_context = Async_kernel_Async_kernel_sche[2],
    within = Async_kernel_Async_kernel_sche[3],
    within$0 = Async_kernel_Async_kernel_sche[4],
    within_v = Async_kernel_Async_kernel_sche[5],
    with_local = Async_kernel_Async_kernel_sche[6],
    find_local = Async_kernel_Async_kernel_sche[7],
    schedule = Async_kernel_Async_kernel_sche[8],
    schedule$0 = Async_kernel_Async_kernel_sche[9],
    enqueue_job = Async_kernel_Async_kernel_sche[10],
    thread_safe_enqueue_job = Async_kernel_Async_kernel_sche[11],
    preserve_execution_context = Async_kernel_Async_kernel_sche[12],
    preserve_execution_context$0 = Async_kernel_Async_kernel_sche[13],
    cycle_start = Async_kernel_Async_kernel_sche[14],
    cycle_start_ns = Async_kernel_Async_kernel_sche[15],
    cycle_times = Async_kernel_Async_kernel_sche[16],
    cycle_times_ns = Async_kernel_Async_kernel_sche[17],
    last_cycle_time = Async_kernel_Async_kernel_sche[18],
    long_cycles = Async_kernel_Async_kernel_sche[19],
    cycle_count = Async_kernel_Async_kernel_sche[20],
    total_cycle_time = Async_kernel_Async_kernel_sche[21],
    event_precision = Async_kernel_Async_kernel_sche[22],
    event_precision_ns = Async_kernel_Async_kernel_sche[23],
    force_current_cycle_to_end = Async_kernel_Async_kernel_sche[24],
    set_max_num_jobs_per_priority_ = Async_kernel_Async_kernel_sche[25],
    max_num_jobs_per_priority_per_ = Async_kernel_Async_kernel_sche[26],
    set_record_backtraces = Async_kernel_Async_kernel_sche[27],
    recording_backtraces = Async_kernel_Async_kernel_sche[28],
    yield$0 = Async_kernel_Async_kernel_sche[29],
    yield_until_no_jobs_remain = Async_kernel_Async_kernel_sche[30],
    yield_every = Async_kernel_Async_kernel_sche[31],
    num_jobs_run = Async_kernel_Async_kernel_sche[32],
    num_pending_jobs = Async_kernel_Async_kernel_sche[33],
    Expert = Async_kernel_Async_kernel_sche[34];
   function sexp_of_start_type(param){
    if(typeof param === "number")
     switch(param){case 0: return _e_;case 1: return _f_;default: return _g_;}
    var
     active_011 = param[1],
     arg_012 = caml_call2(Core[598], Core[323], active_011),
     bnds_010 = [0, [1, [0, _h_, [0, arg_012, 0]]], 0];
    return [1, [0, _i_, bnds_010]];
   }
   function uring(r){return r[26];}
   function initialized_at(r){return r[25];}
   function min_inter_cycle_timeout(r){return r[24];}
   function set_min_inter_cycle_timeout(r, v){r[24] = v; return 0;}
   function max_inter_cycle_timeout(r){return r[23];}
   function set_max_inter_cycle_timeout(r, v){r[23] = v; return 0;}
   function have_lock_do_cycle(r){return r[22];}
   function set_have_lock_do_cycle(r, v){r[22] = v; return 0;}
   function kernel_scheduler(r){return r[21];}
   function next_tsc_calibration(r){return r[20];}
   function set_next_tsc_calibration(r, v){r[20] = v; return 0;}
   function dns_lookup_throttle(r){return r[19];}
   function thread_pool_stuck(r){return r[18];}
   function set_thread_pool_stuck(r, v){r[18] = v; return 0;}
   function handle_thread_pool_stuck(r){return r[17];}
   function set_handle_thread_pool_stuck(r, v){r[17] = v; return 0;}
   function thread_pool(r){return r[16];}
   function signal_manager(r){return r[15];}
   function interruptor(r){return r[14];}
   function scheduler_thread_id(r){return r[13];}
   function set_scheduler_thread_id(r, v){r[13] = v; return 0;}
   function timerfd_set_at(r){return r[12];}
   function set_timerfd_set_at(r, v){r[12] = v; return 0;}
   function timerfd(r){return r[11];}
   function set_timerfd(r, v){r[11] = v; return 0;}
   function external_fd_events(r){return r[10];}
   function set_external_fd_events(r, v){r[10] = v; return 0;}
   function external_fd_by_descr(r){return r[9];}
   function fd_by_descr(r){return r[8];}
   function time_spent_waiting_for_io(r){return r[7];}
   function set_time_spent_waiting_for_io(r, v){r[7] = v; return 0;}
   function num_busy_pollers(r){return r[6];}
   function set_num_busy_pollers(r, v){r[6] = v; return 0;}
   function busy_pollers(r){return r[5];}
   function file_descr_watcher(r){return r[4];}
   function fds_whose_watching_has_changed(r){return r[3];}
   function start_type(r){return r[2];}
   function set_start_type(r, v){r[2] = v; return 0;}
   function mutex(r){return r[1];}
   function _j_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            v];
   }
   var
    _k_ = 0,
    uring$0 = [0, function(param){return 0;}, cst_uring, _k_, uring, _j_];
   function _l_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            v,
            r[26]];
   }
   var
    _m_ = 0,
    initialized_at$0 =
      [0,
       function(param){return 0;},
       cst_initialized_at,
       _m_,
       initialized_at,
       _l_];
   function _n_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            v,
            r[25],
            r[26]];
   }
   var
    _o_ = [0, set_min_inter_cycle_timeout],
    min_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_min_inter_cycle_timeout,
       _o_,
       min_inter_cycle_timeout,
       _n_];
   function _p_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            v,
            r[24],
            r[25],
            r[26]];
   }
   var
    _q_ = [0, set_max_inter_cycle_timeout],
    max_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_max_inter_cycle_timeout,
       _q_,
       max_inter_cycle_timeout,
       _p_];
   function _r_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            v,
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _s_ = [0, set_have_lock_do_cycle],
    have_lock_do_cycle$0 =
      [0,
       function(param){return 0;},
       cst_have_lock_do_cycle,
       _s_,
       have_lock_do_cycle,
       _r_];
   function _t_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            v,
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _u_ = 0,
    kernel_scheduler$0 =
      [0,
       function(param){return 0;},
       cst_kernel_scheduler,
       _u_,
       kernel_scheduler,
       _t_];
   function _v_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            v,
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _w_ = [0, set_next_tsc_calibration],
    next_tsc_calibration$0 =
      [0,
       function(param){return 0;},
       cst_next_tsc_calibration,
       _w_,
       next_tsc_calibration,
       _v_];
   function _x_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _y_ = 0,
    dns_lookup_throttle$0 =
      [0,
       function(param){return 0;},
       cst_dns_lookup_throttle,
       _y_,
       dns_lookup_throttle,
       _x_];
   function _z_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _A_ = [0, set_thread_pool_stuck],
    thread_pool_stuck$0 =
      [0,
       function(param){return 0;},
       cst_thread_pool_stuck,
       _A_,
       thread_pool_stuck,
       _z_];
   function _B_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _C_ = [0, set_handle_thread_pool_stuck],
    handle_thread_pool_stuck$0 =
      [0,
       function(param){return 0;},
       cst_handle_thread_pool_stuck,
       _C_,
       handle_thread_pool_stuck,
       _B_];
   function _D_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _E_ = 0,
    thread_pool$0 =
      [0, function(param){return 0;}, cst_thread_pool, _E_, thread_pool, _D_];
   function _F_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _G_ = 0,
    signal_manager$0 =
      [0,
       function(param){return 0;},
       cst_signal_manager,
       _G_,
       signal_manager,
       _F_];
   function _H_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _I_ = 0,
    interruptor$0 =
      [0, function(param){return 0;}, cst_interruptor, _I_, interruptor, _H_];
   function _J_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _K_ = [0, set_scheduler_thread_id],
    scheduler_thread_id$0 =
      [0,
       function(param){return 0;},
       cst_scheduler_thread_id,
       _K_,
       scheduler_thread_id,
       _J_];
   function _L_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _M_ = [0, set_timerfd_set_at],
    timerfd_set_at$0 =
      [0,
       function(param){return 0;},
       cst_timerfd_set_at,
       _M_,
       timerfd_set_at,
       _L_];
   function _N_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _O_ = [0, set_timerfd],
    timerfd$0 =
      [0, function(param){return 0;}, cst_timerfd, _O_, timerfd, _N_];
   function _P_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _Q_ = [0, set_external_fd_events],
    external_fd_events$0 =
      [0,
       function(param){return 0;},
       cst_external_fd_events,
       _Q_,
       external_fd_events,
       _P_];
   function _R_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _S_ = 0,
    external_fd_by_descr$0 =
      [0,
       function(param){return 0;},
       cst_external_fd_by_descr,
       _S_,
       external_fd_by_descr,
       _R_];
   function _T_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _U_ = 0,
    fd_by_descr$0 =
      [0, function(param){return 0;}, cst_fd_by_descr, _U_, fd_by_descr, _T_];
   function _V_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _W_ = [0, set_time_spent_waiting_for_io],
    time_spent_waiting_for_io$0 =
      [0,
       function(param){return 0;},
       cst_time_spent_waiting_for_io,
       _W_,
       time_spent_waiting_for_io,
       _V_];
   function _X_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _Y_ = [0, set_num_busy_pollers],
    num_busy_pollers$0 =
      [0,
       function(param){return 0;},
       cst_num_busy_pollers,
       _Y_,
       num_busy_pollers,
       _X_];
   function _Z_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    ___ = 0,
    busy_pollers$0 =
      [0,
       function(param){return 0;},
       cst_busy_pollers,
       ___,
       busy_pollers,
       _Z_];
   function _$_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _aa_ = 0,
    file_descr_watcher$0 =
      [0,
       function(param){return 0;},
       cst_file_descr_watcher,
       _aa_,
       file_descr_watcher,
       _$_];
   function _ab_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _ac_ = 0,
    fds_whose_watching_has_changed$0 =
      [0,
       function(param){return 0;},
       cst_fds_whose_watching_has_cha,
       _ac_,
       fds_whose_watching_has_changed,
       _ab_];
   function _ad_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _ae_ = [0, set_start_type],
    start_type$0 =
      [0, function(param){return 0;}, cst_start_type, _ae_, start_type, _ad_];
   function _af_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26]];
   }
   var
    _ag_ = 0,
    mutex$0 = [0, function(param){return 0;}, cst_mutex, _ag_, mutex, _af_];
   function iter
   (mutex_fun,
    start_type_fun,
    fds_whose_watching_has_changed,
    file_descr_watcher_fun,
    busy_pollers_fun,
    num_busy_pollers_fun,
    time_spent_waiting_for_io_fun,
    fd_by_descr_fun,
    external_fd_by_descr_fun,
    external_fd_events_fun,
    timerfd_fun,
    timerfd_set_at_fun,
    scheduler_thread_id_fun,
    interruptor_fun,
    signal_manager_fun,
    thread_pool_fun,
    handle_thread_pool_stuck_fun,
    thread_pool_stuck_fun,
    dns_lookup_throttle_fun,
    next_tsc_calibration_fun,
    kernel_scheduler_fun,
    have_lock_do_cycle_fun,
    max_inter_cycle_timeout_fun,
    min_inter_cycle_timeout_fun,
    initialized_at_fun,
    uring_fun){
    caml_call1(mutex_fun, mutex$0);
    caml_call1(start_type_fun, start_type$0);
    caml_call1
     (fds_whose_watching_has_changed, fds_whose_watching_has_changed$0);
    caml_call1(file_descr_watcher_fun, file_descr_watcher$0);
    caml_call1(busy_pollers_fun, busy_pollers$0);
    caml_call1(num_busy_pollers_fun, num_busy_pollers$0);
    caml_call1(time_spent_waiting_for_io_fun, time_spent_waiting_for_io$0);
    caml_call1(fd_by_descr_fun, fd_by_descr$0);
    caml_call1(external_fd_by_descr_fun, external_fd_by_descr$0);
    caml_call1(external_fd_events_fun, external_fd_events$0);
    caml_call1(timerfd_fun, timerfd$0);
    caml_call1(timerfd_set_at_fun, timerfd_set_at$0);
    caml_call1(scheduler_thread_id_fun, scheduler_thread_id$0);
    caml_call1(interruptor_fun, interruptor$0);
    caml_call1(signal_manager_fun, signal_manager$0);
    caml_call1(thread_pool_fun, thread_pool$0);
    caml_call1(handle_thread_pool_stuck_fun, handle_thread_pool_stuck$0);
    caml_call1(thread_pool_stuck_fun, thread_pool_stuck$0);
    caml_call1(dns_lookup_throttle_fun, dns_lookup_throttle$0);
    caml_call1(next_tsc_calibration_fun, next_tsc_calibration$0);
    caml_call1(kernel_scheduler_fun, kernel_scheduler$0);
    caml_call1(have_lock_do_cycle_fun, have_lock_do_cycle$0);
    caml_call1(max_inter_cycle_timeout_fun, max_inter_cycle_timeout$0);
    caml_call1(min_inter_cycle_timeout_fun, min_inter_cycle_timeout$0);
    caml_call1(initialized_at_fun, initialized_at$0);
    return caml_call1(uring_fun, uring$0);
   }
   function fold
   (init,
    mutex_fun,
    start_type_fun,
    fds_whose_watching_has_changed,
    file_descr_watcher_fun,
    busy_pollers_fun,
    num_busy_pollers_fun,
    time_spent_waiting_for_io_fun,
    fd_by_descr_fun,
    external_fd_by_descr_fun,
    external_fd_events_fun,
    timerfd_fun,
    timerfd_set_at_fun,
    scheduler_thread_id_fun,
    interruptor_fun,
    signal_manager_fun,
    thread_pool_fun,
    handle_thread_pool_stuck_fun,
    thread_pool_stuck_fun,
    dns_lookup_throttle_fun,
    next_tsc_calibration_fun,
    kernel_scheduler_fun,
    have_lock_do_cycle_fun,
    max_inter_cycle_timeout_fun,
    min_inter_cycle_timeout_fun,
    initialized_at_fun,
    uring_fun){
    return caml_call2
            (uring_fun,
             caml_call2
              (initialized_at_fun,
               caml_call2
                (min_inter_cycle_timeout_fun,
                 caml_call2
                  (max_inter_cycle_timeout_fun,
                   caml_call2
                    (have_lock_do_cycle_fun,
                     caml_call2
                      (kernel_scheduler_fun,
                       caml_call2
                        (next_tsc_calibration_fun,
                         caml_call2
                          (dns_lookup_throttle_fun,
                           caml_call2
                            (thread_pool_stuck_fun,
                             caml_call2
                              (handle_thread_pool_stuck_fun,
                               caml_call2
                                (thread_pool_fun,
                                 caml_call2
                                  (signal_manager_fun,
                                   caml_call2
                                    (interruptor_fun,
                                     caml_call2
                                      (scheduler_thread_id_fun,
                                       caml_call2
                                        (timerfd_set_at_fun,
                                         caml_call2
                                          (timerfd_fun,
                                           caml_call2
                                            (external_fd_events_fun,
                                             caml_call2
                                              (external_fd_by_descr_fun,
                                               caml_call2
                                                (fd_by_descr_fun,
                                                 caml_call2
                                                  (time_spent_waiting_for_io_fun,
                                                   caml_call2
                                                    (num_busy_pollers_fun,
                                                     caml_call2
                                                      (busy_pollers_fun,
                                                       caml_call2
                                                        (file_descr_watcher_fun,
                                                         caml_call2
                                                          (fds_whose_watching_has_changed,
                                                           caml_call2
                                                            (start_type_fun,
                                                             caml_call2(mutex_fun, init, mutex$0),
                                                             start_type$0),
                                                           fds_whose_watching_has_changed$0),
                                                         file_descr_watcher$0),
                                                       busy_pollers$0),
                                                     num_busy_pollers$0),
                                                   time_spent_waiting_for_io$0),
                                                 fd_by_descr$0),
                                               external_fd_by_descr$0),
                                             external_fd_events$0),
                                           timerfd$0),
                                         timerfd_set_at$0),
                                       scheduler_thread_id$0),
                                     interruptor$0),
                                   signal_manager$0),
                                 thread_pool$0),
                               handle_thread_pool_stuck$0),
                             thread_pool_stuck$0),
                           dns_lookup_throttle$0),
                         next_tsc_calibration$0),
                       kernel_scheduler$0),
                     have_lock_do_cycle$0),
                   max_inter_cycle_timeout$0),
                 min_inter_cycle_timeout$0),
               initialized_at$0),
             uring$0);
   }
   var
    Fields =
      [0,
       uring$0,
       initialized_at$0,
       min_inter_cycle_timeout$0,
       max_inter_cycle_timeout$0,
       have_lock_do_cycle$0,
       kernel_scheduler$0,
       next_tsc_calibration$0,
       dns_lookup_throttle$0,
       thread_pool_stuck$0,
       handle_thread_pool_stuck$0,
       thread_pool$0,
       signal_manager$0,
       interruptor$0,
       scheduler_thread_id$0,
       timerfd_set_at$0,
       timerfd$0,
       external_fd_events$0,
       external_fd_by_descr$0,
       fd_by_descr$0,
       time_spent_waiting_for_io$0,
       num_busy_pollers$0,
       busy_pollers$0,
       file_descr_watcher$0,
       fds_whose_watching_has_changed$0,
       start_type$0,
       mutex$0,
       iter,
       fold];
   function sexp_of_t$1(param){
    var
     mutex_014 = param[1],
     start_type_016 = param[2],
     busy_pollers_022 = param[5],
     file_descr_watcher_020 = param[4],
     fds_whose_watching_has_changed = param[3],
     num_busy_pollers_024 = param[6],
     time_spent_waiting_for_io_026 = param[7],
     external_fd_by_descr_030 = param[9],
     fd_by_descr_028 = param[8],
     external_fd_events_032 = param[10],
     timerfd_034 = param[11],
     timerfd_set_at_036 = param[12],
     scheduler_thread_id_038 = param[13],
     thread_pool_044 = param[16],
     signal_manager_042 = param[15],
     interruptor_040 = param[14],
     thread_pool_stuck_048 = param[18],
     dns_lookup_throttle_050 = param[19],
     next_tsc_calibration_052 = param[20],
     kernel_scheduler_054 = param[21],
     have_lock_do_cycle_056 = param[22],
     max_inter_cycle_timeout_058 = param[23],
     min_inter_cycle_timeout_060 = param[24],
     uring_064 = param[26],
     initialized_at_062 = param[25],
     arg_065 = caml_call1(Sexplib0_Sexp_conv[23], uring_064),
     bnds_013 = [0, [1, [0, _ah_, [0, arg_065, 0]]], 0],
     arg_063 = caml_call1(Sexplib0_Sexp_conv[23], initialized_at_062),
     bnds_013$0 = [0, [1, [0, _ai_, [0, arg_063, 0]]], bnds_013],
     arg_061 =
       caml_call1(Async_kernel_config[4][2], min_inter_cycle_timeout_060),
     bnds_013$1 = [0, [1, [0, _aj_, [0, arg_061, 0]]], bnds_013$0],
     arg_059 =
       caml_call1(Async_kernel_config[3][2], max_inter_cycle_timeout_058),
     bnds_013$2 = [0, [1, [0, _ak_, [0, arg_059, 0]]], bnds_013$1];
    function _f9_(param){
     function _gb_(_gc_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _gb_);
    }
    var
     arg_057 = caml_call2(Core[515], _f9_, have_lock_do_cycle_056),
     bnds_013$3 = [0, [1, [0, _al_, [0, arg_057, 0]]], bnds_013$2],
     arg_055 = caml_call1(Async_kernel_Scheduler[1], kernel_scheduler_054),
     bnds_013$4 = [0, [1, [0, _am_, [0, arg_055, 0]]], bnds_013$3],
     arg_053 = caml_call1(Time_stamp_counter[10], next_tsc_calibration_052),
     bnds_013$5 = [0, [1, [0, _an_, [0, arg_053, 0]]], bnds_013$4],
     arg_051 =
       caml_call2
        (Async_kernel_Throttle[2], Core[620], dns_lookup_throttle_050),
     bnds_013$6 = [0, [1, [0, _ao_, [0, arg_051, 0]]], bnds_013$5],
     arg_049 = caml_call1(Thread_pool_stuck_status[1], thread_pool_stuck_048),
     bnds_013$7 = [0, [1, [0, _ap_, [0, arg_049, 0]]], bnds_013$6];
    function _f__(_ga_){return 0;}
    var
     arg_047 = caml_call1(Sexplib0_Sexp_conv[24], _f__),
     bnds_013$8 = [0, [1, [0, _aq_, [0, arg_047, 0]]], bnds_013$7],
     arg_045 = caml_call1(Thread_pool[2], thread_pool_044),
     bnds_013$9 = [0, [1, [0, _ar_, [0, arg_045, 0]]], bnds_013$8],
     arg_043 = caml_call1(Async_unix_Signal_manager[1], signal_manager_042),
     bnds_013$10 = [0, [1, [0, _as_, [0, arg_043, 0]]], bnds_013$9],
     arg_041 = caml_call1(Async_unix_Interruptor[1], interruptor_040),
     bnds_013$11 = [0, [1, [0, _at_, [0, arg_041, 0]]], bnds_013$10],
     arg_039 = caml_call1(Core[389], scheduler_thread_id_038),
     bnds_013$12 = [0, [1, [0, _au_, [0, arg_039, 0]]], bnds_013$11],
     arg_037 = caml_call1(Time_ns_unix[85], timerfd_set_at_036),
     bnds_013$13 = [0, [1, [0, _av_, [0, arg_037, 0]]], bnds_013$12],
     arg_035 = caml_call2(Core[515], Linux_ext[35][4], timerfd_034),
     bnds_013$14 = [0, [1, [0, _aw_, [0, arg_035, 0]]], bnds_013$13],
     arg_033 = caml_call1(Sexplib0_Sexp_conv[23], external_fd_events_032),
     bnds_013$15 = [0, [1, [0, _ax_, [0, arg_033, 0]]], bnds_013$14],
     _f$_ = caml_call1(Read_write_pair[8], Core[323]),
     arg_031 =
       caml_call2(Async_unix_By_descr[1], _f$_, external_fd_by_descr_030),
     bnds_013$16 = [0, [1, [0, _ay_, [0, arg_031, 0]]], bnds_013$15],
     arg_029 =
       caml_call2
        (Async_unix_By_descr[1], Async_unix_Raw_fd[25], fd_by_descr_028),
     bnds_013$17 = [0, [1, [0, _az_, [0, arg_029, 0]]], bnds_013$16],
     arg_027 =
       caml_call1(Time_stamp_counter[24][10], time_spent_waiting_for_io_026),
     bnds_013$18 = [0, [1, [0, _aA_, [0, arg_027, 0]]], bnds_013$17],
     arg_025 = caml_call1(Core[389], num_busy_pollers_024),
     bnds_013$19 = [0, [1, [0, _aB_, [0, arg_025, 0]]], bnds_013$18],
     arg_023 = caml_call1(Sexplib0_Sexp_conv[23], busy_pollers_022),
     bnds_013$20 = [0, [1, [0, _aC_, [0, arg_023, 0]]], bnds_013$19],
     arg_021 = caml_call1(File_descr_watcher[1], file_descr_watcher_020),
     bnds_013$21 = [0, [1, [0, _aD_, [0, arg_021, 0]]], bnds_013$20],
     arg_019 =
       caml_call2
        (Core_Stack[2], Async_unix_Raw_fd[25], fds_whose_watching_has_changed),
     bnds_013$22 = [0, [1, [0, _aE_, [0, arg_019, 0]]], bnds_013$21],
     arg_017 = sexp_of_start_type(start_type_016),
     bnds_013$23 = [0, [1, [0, _aF_, [0, arg_017, 0]]], bnds_013$22],
     arg_015 = caml_call1(Nano_mutex[1], mutex_014),
     bnds_013$24 = [0, [1, [0, _aG_, [0, arg_015, 0]]], bnds_013$23];
    return [1, bnds_013$24];
   }
   function max_num_threads(t){return caml_call1(Thread_pool[8], t[16]);}
   function max_num_open_file_descrs(t){
    return caml_call1(Async_unix_By_descr[4], t[8]);
   }
   function current_execution_context(t){
    return caml_call1(Async_kernel_Scheduler[4], t[21]);
   }
   function with_execution_context(t, context, f){
    return caml_call3(Async_kernel_Scheduler[5], t[21], context, f);
   }
   function thread_pool_cpu_affinity(t){
    return caml_call1(Thread_pool[5], t[16]);
   }
   function lock(t){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_waiting_on_lock);
    return caml_call1(Nano_mutex[7], t[1]);
   }
   function try_lock(t){
    return -326120466 <= caml_call1(Nano_mutex[9], t[1]) ? 1 : 0;
   }
   function unlock(t){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_lock_released);
    return caml_call1(Nano_mutex[11], t[1]);
   }
   function with_lock(t, f){
    lock(t);
    function _f8_(param){return unlock(t);}
    return caml_call2(Core[259], f, _f8_);
   }
   function am_holding_lock(t){return caml_call1(Nano_mutex[5], t[1]);}
   var
    mutex_for_initializing_the_one = caml_call1(Nano_mutex[3], 0),
    the_one_and_only_ref = [0, _aH_];
   function is_ready_to_initialize(param){
    return 1 === the_one_and_only_ref[1][0] ? 1 : 0;
   }
   function is_initialized(param){
    return 2 === the_one_and_only_ref[1][0] ? 1 : 0;
   }
   function the_one_and_only_uncommon_case(param){
    function _f6_(param){
     var match = the_one_and_only_ref[1];
     switch(match[0]){
       case 0:
        var
         _f7_ =
           caml_call1(Sexplib0_Sexp_conv[7], cst_Async_the_one_and_only_not);
        return caml_call1(Core[261], _f7_);
       case 1:
        var f = match[1], t = caml_call1(f, 0);
        the_one_and_only_ref[1] = [2, t];
        return t;
       default: var t$0 = match[1]; return t$0;
     }
    }
    return caml_call2(Nano_mutex[12], mutex_for_initializing_the_one, _f6_);
   }
   function the_one_and_only(param){
    var match = the_one_and_only_ref[1];
    if(2 !== match[0]) return the_one_and_only_uncommon_case(0);
    var t = match[1];
    return t;
   }
   var fds_created_before_initializat = [0, 0];
   function create_fd_registration(t, fd){
    var match = caml_call3(Async_unix_By_descr[5], t[8], fd[1], fd);
    if(0 === match[0]) return 0;
    var
     error = match[1],
     backtrace =
       Ppx_inline_test_lib[1] ? 0 : [0, caml_call2(Base_Backtrace[2], 0, 0)],
     _f0_ = Ppx_inline_test_lib[1] ? 0 : [0, t],
     match$0 = 0;
    if(_f0_)
     var
      v = _f0_[1],
      match$1 = [0, [1, [0, _aI_, [0, sexp_of_t$1(v), 0]]], match$0];
    else
     var match$1 = match$0;
    if(backtrace)
     var
      v$0 = backtrace[1],
      _f1_ =
        [0,
         [1, [0, _aJ_, [0, caml_call1(Base_Backtrace[1], v$0), 0]]],
         match$1];
    else
     var _f1_ = match$1;
    var
     _f2_ =
       [0, [1, [0, _aK_, [0, caml_call1(Core_Error[9], error), 0]]], _f1_],
     _f3_ = caml_call1(Async_unix_Raw_fd[23], fd),
     _f4_ =
       [0,
        [1, [0, _aL_, [0, caml_call1(Core_unix_File_descr[2], _f3_), 0]]],
        _f2_],
     res =
       [0,
        caml_call1(Sexplib0_Sexp_conv[7], cst_Async_was_unable_to_add_a_),
        _f4_];
    if(res[2]) var _f5_ = [1, res]; else var h = res[1], _f5_ = h;
    return caml_call1(Core[261], _f5_);
   }
   function create_fd(avoid_setting_nonblock, kind, file_descr, info){
    var
     fd =
       caml_call4
        (Async_unix_Raw_fd[30],
         avoid_setting_nonblock,
         kind,
         file_descr,
         info);
    if(is_initialized(0))
     create_fd_registration(the_one_and_only(0), fd);
    else{
     var
      _fZ_ =
        function(param){
         return is_initialized(0)
                 ? create_fd_registration(the_one_and_only(0), fd)
                 : (fds_created_before_initializat
                    [1]
                   = [0, fd, fds_created_before_initializat[1]],
                   0);
        };
     caml_call2(Nano_mutex[12], mutex_for_initializing_the_one, _fZ_);
    }
    return fd;
   }
   function current_thread_id(param){
    var _fY_ = caml_call1(Core_thread[3], 0);
    return caml_call1(Core_thread[4], _fY_);
   }
   function is_main_thread(param){
    var _fX_ = current_thread_id(0);
    return caml_call2(Async_unix_Import[3], _fX_, 0);
   }
   function remove_fd(t, fd){
    return caml_call2(Async_unix_By_descr[9], t[8], fd[1]);
   }
   function maybe_start_closing_fd(t, fd){
    var _fV_ = caml_call2(Async_unix_Import[3], fd[9], 0);
    if(_fV_){
     var match = fd[6];
     if(typeof match !== "number" && 0 === match[0]){
      var do_close_syscall = match[2], execution_context = match[1];
      remove_fd(t, fd);
      caml_call2(Async_unix_Raw_fd[32], fd, 0);
      return caml_call4
              (Async_kernel_Scheduler[8],
               t[21],
               execution_context,
               do_close_syscall,
               0);
     }
     var _fW_ = 0;
    }
    else
     var _fW_ = _fV_;
    return _fW_;
   }
   function dec_num_active_syscalls_fd(t, fd){
    fd[9] = fd[9] - 1 | 0;
    return maybe_start_closing_fd(t, fd);
   }
   function invariant(t){
    try{
     var
      check =
        function(invariant, field){
         return caml_call1(invariant, caml_call2(Base_Field[3], field, t));
        },
      _eK_ = function(_fU_){return 0;},
      _eL_ = function(_fT_){return 0;},
      _eM_ =
        function(min_inter_cycle_timeout){
         var
          _fR_ = caml_call1(Async_kernel_config[3][5], t[23]),
          _fS_ =
            caml_call1(Async_kernel_config[4][5], min_inter_cycle_timeout);
         if(caml_call2(Time_ns_unix[72][16], _fS_, _fR_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1);
        },
      _eN_ = function(_fQ_){return check(_eM_, _fQ_);},
      _eO_ = function(_fP_){return 0;},
      _eP_ = function(_fO_){return 0;},
      _eQ_ = Async_kernel_Scheduler[3],
      _eR_ = function(_fN_){return check(_eQ_, _fN_);},
      _eS_ = function(_fM_){return 0;},
      _eT_ = function(_fL_){return 0;},
      _eU_ = function(_fK_){return 0;},
      _eV_ = function(_fJ_){return 0;},
      _eW_ = Thread_pool[3],
      _eX_ = function(_fI_){return check(_eW_, _fI_);},
      _eY_ = Async_unix_Signal_manager[2],
      _eZ_ = function(_fH_){return check(_eY_, _fH_);},
      _e0_ = Async_unix_Interruptor[2],
      _e1_ = function(_fG_){return check(_e0_, _fG_);},
      _e2_ = function(_fF_){return 0;},
      _e3_ = function(_fE_){return 0;},
      _e4_ = function(_fD_){return 0;},
      _e5_ =
        function(fds){
         if(caml_call1(Core_List[18], fds)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
        },
      _e6_ = function(_fC_){return check(_e5_, _fC_);},
      _e7_ = function(_fB_){return 0;},
      _e8_ =
        function(fd_by_descr){
         caml_call1(Async_unix_By_descr[2], fd_by_descr);
         function _fy_(fd){
          var _fz_ = fd[8];
          if(! _fz_) return _fz_;
          function _fA_(fd$0){return fd === fd$0 ? 1 : 0;}
          if(caml_call2(Core_Stack[12], t[3], _fA_)) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
         }
         return caml_call2(Async_unix_By_descr[11], fd_by_descr, _fy_);
        },
      _e9_ = function(_fx_){return check(_e8_, _fx_);},
      _e__ = function(_fw_){return 0;},
      _e$_ = function(_fv_){return 0;},
      _fa_ = function(_fu_){return 0;},
      _fb_ =
        function(file_descr_watcher){
         caml_call1(file_descr_watcher[2], file_descr_watcher[13]);
         function _fn_(file_descr, param){
          try{
           var match = caml_call2(Async_unix_By_descr[7], t[8], file_descr);
           if(match){
            var fd = match[1], _fr_ = caml_call1(Async_unix_Raw_fd[9], fd);
            if(! caml_call2(Async_unix_Import[4], _fr_, 0))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
            var _fs_ = 0;
           }
           else
            var
             _ft_ =
               caml_call1(Sexplib0_Sexp_conv[7], cst_missing_from_fd_by_descr),
             _fs_ = caml_call1(Core[261], _ft_);
           return _fs_;
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _fo_ =
              [0,
               [1,
                [0,
                 _aR_,
                 [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
               0],
            _fp_ =
              [0, [1, [0, _aS_, [0, caml_call1(Core[625], exn), 0]]], _fo_],
            _fq_ =
              [1,
               [0, caml_call1(Sexplib0_Sexp_conv[7], cst_fd_problem), _fp_]];
           return caml_call1(Core[261], _fq_);
          }
         }
         return caml_call2
                 (file_descr_watcher[6], file_descr_watcher[13], _fn_);
        },
      _fc_ = function(_fm_){return check(_fb_, _fm_);},
      _fd_ =
        function(fds_whose_watching_has_changed){
         function _fl_(fd){
          if(! fd[8])
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aW_], 1);
          var match = caml_call2(Async_unix_By_descr[7], t[8], fd[1]);
          if(! match)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aV_], 1);
          var fd$0 = match[1];
          if(fd === fd$0) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aU_], 1);
         }
         return caml_call2
                 (Core_Stack[8], fds_whose_watching_has_changed, _fl_);
        },
      _fe_ = function(_fk_){return check(_fd_, _fk_);},
      _ff_ = function(_fj_){return 0;},
      _fg_ = function(_fi_){return 0;},
      _fh_ =
        caml_call26
         (Fields[27],
          _fg_,
          _ff_,
          _fe_,
          _fc_,
          _fa_,
          _e$_,
          _e__,
          _e9_,
          _e7_,
          _e6_,
          _e4_,
          _e3_,
          _e2_,
          _e1_,
          _eZ_,
          _eX_,
          _eV_,
          _eU_,
          _eT_,
          _eS_,
          _eR_,
          _eP_,
          _eO_,
          _eN_,
          _eL_,
          _eK_);
     return _fh_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _eH_ = [0, [1, [0, _aM_, [0, sexp_of_t$1(t), 0]]], 0],
      _eI_ = [0, [1, [0, _aN_, [0, caml_call1(Core[625], exn), 0]]], _eH_],
      _eJ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_invariant_failed),
          _eI_]];
     return caml_call1(Core[261], _eJ_);
    }
   }
   function update_check_access(t, do_check){
    var
     _eC_ =
       do_check
        ? [0,
          function(param){
           var _eD_ = 1 - am_holding_lock(t);
           if(! _eD_) return _eD_;
           function _eE_(param){
            var
             arg2_068 = param[3],
             arg1_067 = param[2],
             arg0_066 = param[1],
             res0_069 = caml_call1(Base_Backtrace[1], arg0_066),
             res1_070 = sexp_of_t$1(arg1_067),
             res2_071 = caml_call1(Time_float_unix[60], arg2_068);
            return [1, [0, res0_069, [0, res1_070, [0, res2_071, 0]]]];
           }
           var
            _eF_ = caml_call1(Time_float_unix[15], 0),
            _eG_ = [0, caml_call2(Base_Backtrace[2], 0, 0), t, _eF_];
           caml_call3
            (Async_kernel_Debug[15],
             cst_attempt_to_access_Async_fr,
             _eG_,
             _eE_);
           return caml_call1(Core[83], 1);
          }]
        : 0;
    return caml_call2(Async_kernel_Scheduler[31], t[21], _eC_);
   }
   function try_create_timerfd(param){
    var match = Linux_ext[35][6];
    if(0 !== match[0]) return 0;
    var create = match[1], clock = Linux_ext[35][1][12];
    try{
     var
      _eA_ =
        [0,
         caml_call2
          (create,
           [0,
            caml_call2
             (Linux_ext[35][2][31],
              Linux_ext[35][2][40],
              Linux_ext[35][2][41])],
           clock)];
     return _eA_;
    }
    catch(_eB_){
     var _ey_ = caml_wrap_exception(_eB_);
     if(_ey_[1] === Core_unix[4]){
      var _ez_ = _ey_[2];
      if(typeof _ez_ === "number"){
       if(12 === _ez_){
        var timerfd = caml_call2(create, 0, clock);
        caml_call1(Core_unix[100], timerfd);
        caml_call1(Core_unix[98], timerfd);
        return [0, timerfd];
       }
       if(25 === _ez_) return 0;
      }
     }
     throw caml_maybe_attach_backtrace(_ey_, 0);
    }
   }
   function default_handle_thread_pool_stu(thread_pool, stuck_for){
    var
     _ej_ = caml_call2(Time_ns_unix[72][15], stuck_for, Async_unix_Config[20]);
    if(! _ej_) return _ej_;
    var
     should_abort =
       caml_call2(Time_ns_unix[72][15], stuck_for, Async_unix_Config[5]);
    if(should_abort)
     var text$0 = text;
    else
     var
      _ew_ =
        caml_call2(Time_ns_unix[72][102], Async_unix_Config[5], stuck_for),
      _ex_ = caml_call1(Time_ns_unix[72][110], _ew_),
      text$0 = caml_call3(Core[265], _a1_, text, _ex_);
    var _ek_ = caml_call1(Thread_pool[20], thread_pool), match = 0;
    if(_ek_)
     var
      v = _ek_[1],
      _el_ = [0, [1, [0, _aX_, [0, caml_call1(Core_Sexp[93], v), 0]]], match];
    else
     var _el_ = match;
    var
     _em_ = caml_call1(Thread_pool[8], thread_pool),
     _en_ = [0, [1, [0, _aY_, [0, caml_call1(Core[389], _em_), 0]]], _el_],
     _eo_ = caml_call1(Thread_pool[9], thread_pool),
     _ep_ = [0, [1, [0, _aZ_, [0, caml_call1(Core[389], _eo_), 0]]], _en_],
     _eq_ = caml_call1(Time_ns_unix[72][110], stuck_for),
     _er_ = [0, [1, [0, _a0_, [0, caml_call1(Core[558], _eq_), 0]]], _ep_],
     _es_ = [0, caml_call1(Sexplib0_Sexp_conv[7], text$0), _er_],
     _et_ = Core[628] ? Time_ns_unix[33] : caml_call1(Time_ns_unix[40], 0),
     res = [0, caml_call1(Time_ns_unix[85], _et_), _es_];
    if(res[2]) var message = [1, res]; else var h = res[1], message = h;
    if(! should_abort) return caml_call1(Core_Debug[3], message);
    if(1 - Core[628]) caml_call2(Async_unix_Dump_core_on_job_de[3], 0, 0);
    var
     _eu_ = caml_call1(Core_Error[20], message),
     _ev_ = caml_call1(Core_Error[28], _eu_);
    return caml_call3
            (Async_kernel_Monitor[15], Async_kernel_Monitor[24], 0, _ev_);
   }
   function thread_pool_has_unfinished_wor(t){
    var _ei_ = caml_call1(Thread_pool[10], t[16]);
    return caml_call2(Async_unix_Import[6], _ei_, 0);
   }
   function thread_safe_wakeup_scheduler(t){
    return caml_call1(Async_unix_Interruptor[5], t[14]);
   }
   function i_am_the_scheduler(t){
    var _eg_ = t[13], _eh_ = current_thread_id(0);
    return caml_call2(Async_unix_Import[3], _eh_, _eg_);
   }
   function set_fd_desired_watching(t, fd, read_or_write, desired){
    caml_call3(Read_write_pair[26], fd[7], read_or_write, desired);
    var _ef_ = 1 - fd[8];
    return _ef_ ? (fd[8] = 1, caml_call2(Core_Stack[25], t[3], fd)) : _ef_;
   }
   function give_up_on_watching(t, fd, read_or_write, watching){
    if(Async_kernel_Debug[3]){
     var
      _ee_ =
        function(param){
         var
          arg2_074 = param[3],
          arg1_073 = param[2],
          arg0_072 = param[1],
          res0_075 = caml_call1(Read_write_pair[1][1], arg0_072),
          res1_076 = caml_call1(Async_unix_Raw_fd[25], arg1_073),
          res2_077 = sexp_of_t$1(arg2_074);
         return [1, [0, res0_075, [0, res1_076, [0, res2_077, 0]]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_give_up_on_watching,
       [0, read_or_write, fd, t],
       _ee_);
    }
    if(typeof watching === "number") return 0;
    if(0 === watching[0]){
     var ready_to = watching[1];
     caml_call2(Async_kernel_Ivar[14], ready_to, -18684779);
     return set_fd_desired_watching(t, fd, read_or_write, 1);
    }
    var finished = watching[2], job = watching[1];
    caml_call2(Async_kernel_Scheduler[11], t[21], job);
    caml_call2(Async_kernel_Ivar[14], finished, -18684779);
    return set_fd_desired_watching(t, fd, read_or_write, 1);
   }
   function request_start_watching(t, fd, read_or_write, watching){
    if(Async_kernel_Debug[3]){
     var
      _ec_ =
        function(param){
         var
          arg2_080 = param[3],
          arg1_079 = param[2],
          arg0_078 = param[1],
          res0_081 = caml_call1(Read_write_pair[1][1], arg0_078),
          res1_082 = caml_call1(Async_unix_Raw_fd[25], arg1_079),
          res2_083 = sexp_of_t$1(arg2_080);
         return [1, [0, res0_081, [0, res1_082, [0, res2_083, 0]]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_request_start_watching,
       [0, read_or_write, fd, t],
       _ec_);
    }
    var match = caml_call2(Read_write_pair[23], fd[7], read_or_write);
    if(typeof match === "number")
     if(match)
      var
       result =
         caml_call1(Async_unix_Raw_fd[34], fd) ? -1034200365 : -655995373;
     else
      var
       _ed_ =
         17724 <= caml_call1(Async_unix_Raw_fd[31], fd)
          ? -655995373
          : -1034200365,
       result = _ed_;
    else
     var result = 233446106;
    if(-655995373 === result){
     set_fd_desired_watching(t, fd, read_or_write, watching);
     if(1 - i_am_the_scheduler(t)) thread_safe_wakeup_scheduler(t);
    }
    return result;
   }
   function request_stop_watching(t, fd, read_or_write, value){
    if(Async_kernel_Debug[3]){
     var
      _d$_ =
        function(param){
         var
          arg3_087 = param[4],
          arg2_086 = param[3],
          arg1_085 = param[2],
          arg0_084 = param[1],
          res0_088 = caml_call1(Read_write_pair[1][1], arg0_084),
          res1_089 = caml_call1(Async_unix_Raw_fd[4], arg1_085),
          res2_090 = caml_call1(Async_unix_Raw_fd[25], arg2_086),
          res3_091 = sexp_of_t$1(arg3_087);
         return [1,
                 [0, res0_088, [0, res1_089, [0, res2_090, [0, res3_091, 0]]]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_request_stop_watching,
       [0, read_or_write, value, fd, t],
       _d$_);
    }
    var match = caml_call2(Read_write_pair[23], fd[7], read_or_write);
    if(typeof match === "number") return 0;
    if(0 === match[0]){
     var ready_to = match[1];
     caml_call2(Async_kernel_Ivar[14], ready_to, value);
     set_fd_desired_watching(t, fd, read_or_write, 1);
     var _ea_ = 1 - i_am_the_scheduler(t);
     return _ea_ ? thread_safe_wakeup_scheduler(t) : _ea_;
    }
    var finished = match[2], job = match[1];
    if(-102231997 === value)
     return caml_call3(Async_kernel_Scheduler[10], t[21], job, 0);
    caml_call2(Async_kernel_Scheduler[11], t[21], job);
    caml_call2(Async_kernel_Ivar[14], finished, value);
    set_fd_desired_watching(t, fd, read_or_write, 1);
    var _eb_ = 1 - i_am_the_scheduler(t);
    return _eb_ ? thread_safe_wakeup_scheduler(t) : _eb_;
   }
   function post_check_got_timerfd(file_descr){
    var
     _d9_ =
       [0,
        [1,
         [0, _a2_, [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
        0],
     _d__ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_File_descr_watcher_returne),
         _d9_]];
    return caml_call1(Core[261], _d__);
   }
   function post_check_invalid_fd(file_descr){
    var
     _d7_ =
       [0,
        [1,
         [0, _a3_, [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
        0],
     _d8_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_File_descr_watcher_returne$0),
         _d7_]];
    return caml_call1(Core[261], _d8_);
   }
   function post_check_handle_fd(t, file_descr, read_or_write, event_type){
    if(caml_call2(Async_unix_By_descr[6], t[8], file_descr)){
     var fd = caml_call2(Async_unix_By_descr[8], t[8], file_descr);
     return request_stop_watching(t, fd, read_or_write, event_type);
    }
    var match = t[11];
    if(match){
     var tfd = match[1];
     if(caml_call2(Core_unix_File_descr[3], file_descr, tfd))
      return 914388854 <= read_or_write
              ? 0
              : post_check_got_timerfd(file_descr);
    }
    if(! caml_call2(Async_unix_By_descr[6], t[9], file_descr))
     return post_check_invalid_fd(file_descr);
    var ev = [0, file_descr, read_or_write, event_type];
    t[10] = [0, ev, t[10]];
    return 0;
   }
   var too_long = [0, 0];
   function cycle_took_longer_than_100us(cycle_time){
    too_long[1] = 0;
    var
     _d5_ = too_long[1],
     _d6_ = _d5_ ? runtime.magic_trace_long_async_cycle(0) : _d5_;
    return _d6_;
   }
   function maybe_report_long_async_cycles(cycle_time){
    var
     symbol = Time_ns_unix[72][18],
     _d4_ =
       caml_call2(symbol, cycle_time, caml_call1(Time_ns_unix[72][116], 100));
    return _d4_ ? cycle_took_longer_than_100us(cycle_time) : _d4_;
   }
   function _a4_(param){
    var
     cycle_time = caml_call1(Time_ns_unix[72][93], 15),
     words_before = runtime.core_gc_major_plus_minor_words(0);
    maybe_report_long_async_cycles(cycle_time);
    var
     words_after = runtime.core_gc_major_plus_minor_words(0),
     got = words_after - words_before | 0,
     sexpifier = Core[389],
     expect = 0,
     equal = 0,
     message = 0,
     here = 0;
    function comparator(a_092, b_093){
     return caml_call2(Core[382], a_092, b_093);
    }
    caml_call8
     (Ppx_assert_lib_Runtime[3],
      pos,
      sexpifier,
      comparator,
      here,
      message,
      equal,
      expect,
      got);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_maybe_report_long_async_cy,
     _a5_,
     cst_src_raw_scheduler_ml,
     617,
     0,
     465,
     _a4_);
   function maybe_report_long_async_cycles$0(t){
    return maybe_report_long_async_cycles(t[21][16]);
   }
   function create(mutex, opt, _dv_, _du_, _dt_, param){
    if(opt)
     var sth = opt[1], thread_pool_cpu_affinity = sth;
    else
     var thread_pool_cpu_affinity = Async_unix_Config[9];
    if(_dv_)
     var sth$0 = _dv_[1], file_descr_watcher = sth$0;
    else
     var file_descr_watcher = [0, Async_unix_Config[13]];
    if(_du_)
     var sth$1 = _du_[1], max_num_open_file_descrs = sth$1;
    else
     var max_num_open_file_descrs = Async_unix_Config[16];
    if(_dt_)
     var sth$2 = _dt_[1], max_num_threads = sth$2;
    else
     var max_num_threads = Async_unix_Config[17];
    if(debug) caml_call1(Async_kernel_Debug[16], cst_creating_scheduler);
    var
     _dw_ = caml_call1(Async_kernel_config[5][5], max_num_threads),
     _dx_ = caml_call3(Thread_pool[4], [0, thread_pool_cpu_affinity], _dw_, 0),
     thread_pool = caml_call1(Core[255], _dx_),
     num_file_descrs =
       caml_call1(Async_kernel_config[7][5], max_num_open_file_descrs),
     fd_by_descr = caml_call1(Async_unix_By_descr[3], num_file_descrs);
    function create_fd(kind, file_descr, info){
     var
      fd = caml_call4(Async_unix_Raw_fd[30], 0, kind, file_descr, info),
      _d3_ = caml_call3(Async_unix_By_descr[5], fd_by_descr, fd[1], fd);
     caml_call1(Core[255], _d3_);
     return fd;
    }
    var
     external_fd_by_descr =
       caml_call1(Async_unix_By_descr[3], num_file_descrs),
     interruptor = caml_call1(Async_unix_Interruptor[3], create_fd),
     t_ref = [0, 0];
    function handle_fd(read_or_write, ready_or_bad_fd, file_descr){
     var match = t_ref[1];
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
     var t = match[1];
     return post_check_handle_fd
             (t, file_descr, read_or_write, ready_or_bad_fd);
    }
    var _dy_ = -102231997, _dz_ = 914388854;
    function handle_fd_read_ready(_d2_){return handle_fd(_dz_, _dy_, _d2_);}
    var _dA_ = -3286312, _dB_ = 914388854;
    function handle_fd_read_bad(_d1_){return handle_fd(_dB_, _dA_, _d1_);}
    var _dC_ = -102231997, _dD_ = -477700929;
    function handle_fd_write_ready(_d0_){return handle_fd(_dD_, _dC_, _d0_);}
    var _dE_ = -3286312, _dF_ = -477700929;
    function handle_fd_write_bad(_dZ_){return handle_fd(_dF_, _dE_, _dZ_);}
    if(0 === file_descr_watcher[0]){
     var _dG_ = file_descr_watcher[1];
     if(2 === _dG_)
      var
       watcher =
         caml_call5
          (Async_unix_Select_file_descr_w[3],
           handle_fd_read_bad,
           handle_fd_write_bad,
           num_file_descrs,
           handle_fd_read_ready,
           handle_fd_write_ready),
       sexp_of_t = Async_unix_Select_file_descr_w[1],
       invariant = Async_unix_Select_file_descr_w[2],
       create = Async_unix_Select_file_descr_w[3],
       backend = Async_unix_Select_file_descr_w[4],
       set = Async_unix_Select_file_descr_w[5],
       iter = Async_unix_Select_file_descr_w[6],
       Pre = Async_unix_Select_file_descr_w[7],
       pre_check = Async_unix_Select_file_descr_w[8],
       Check_result = Async_unix_Select_file_descr_w[9],
       thread_safe_check = Async_unix_Select_file_descr_w[10],
       post_check = Async_unix_Select_file_descr_w[11],
       reset_in_forked_process = Async_unix_Select_file_descr_w[12],
       uring = 0,
       timerfd = 0,
       file_descr_watcher$0 =
         [0,
          sexp_of_t,
          invariant,
          create,
          backend,
          set,
          iter,
          Pre,
          pre_check,
          Check_result,
          thread_safe_check,
          post_check,
          reset_in_forked_process,
          watcher];
     else if(3 <= _dG_)
      var
       _dV_ = caml_call1(Async_kernel_config[2][5], Async_unix_Config[11]),
       _dW_ = caml_call3(Async_unix_Io_uring_raw[9], 0, _dV_, 0),
       uring$0 = caml_call1(Core_Or_error[40], _dW_),
       watcher$0 =
         caml_call4
          (Async_unix_Io_uring_file_descr[3],
           uring$0,
           num_file_descrs,
           handle_fd_read_ready,
           handle_fd_write_ready),
       sexp_of_t$0 = Async_unix_Io_uring_file_descr[1],
       invariant$0 = Async_unix_Io_uring_file_descr[2],
       create$0 = Async_unix_Io_uring_file_descr[3],
       backend$0 = Async_unix_Io_uring_file_descr[4],
       set$0 = Async_unix_Io_uring_file_descr[5],
       iter$0 = Async_unix_Io_uring_file_descr[6],
       Pre$0 = Async_unix_Io_uring_file_descr[7],
       pre_check$0 = Async_unix_Io_uring_file_descr[8],
       Check_result$0 = Async_unix_Io_uring_file_descr[9],
       thread_safe_check$0 = Async_unix_Io_uring_file_descr[10],
       post_check$0 = Async_unix_Io_uring_file_descr[11],
       reset_in_forked_process$0 = Async_unix_Io_uring_file_descr[12],
       uring = [0, uring$0],
       timerfd = 0,
       file_descr_watcher$0 =
         [0,
          sexp_of_t$0,
          invariant$0,
          create$0,
          backend$0,
          set$0,
          iter$0,
          Pre$0,
          pre_check$0,
          Check_result$0,
          thread_safe_check$0,
          post_check$0,
          reset_in_forked_process$0,
          watcher$0];
     else{
      var match = try_create_timerfd(0);
      if(match)
       var timerfd$0 = match[1], timerfd$1 = timerfd$0;
      else
       var
        _dX_ =
          caml_call1(Sexplib0_Sexp_conv[7], cst_Async_refuses_to_run_using),
        timerfd$1 = caml_call1(Core[261], _dX_);
      var
       watcher$1 =
         caml_call4
          (Async_unix_Epoll_file_descr_wa[3],
           timerfd$1,
           num_file_descrs,
           handle_fd_read_ready,
           handle_fd_write_ready),
       sexp_of_t$1 = Async_unix_Epoll_file_descr_wa[1],
       invariant$1 = Async_unix_Epoll_file_descr_wa[2],
       create$1 = Async_unix_Epoll_file_descr_wa[3],
       backend$1 = Async_unix_Epoll_file_descr_wa[4],
       set$1 = Async_unix_Epoll_file_descr_wa[5],
       iter$1 = Async_unix_Epoll_file_descr_wa[6],
       Pre$1 = Async_unix_Epoll_file_descr_wa[7],
       pre_check$1 = Async_unix_Epoll_file_descr_wa[8],
       Check_result$1 = Async_unix_Epoll_file_descr_wa[9],
       thread_safe_check$1 = Async_unix_Epoll_file_descr_wa[10],
       post_check$1 = Async_unix_Epoll_file_descr_wa[11],
       reset_in_forked_process$1 = Async_unix_Epoll_file_descr_wa[12],
       uring = 0,
       timerfd = [0, timerfd$1],
       file_descr_watcher$0 =
         [0,
          sexp_of_t$1,
          invariant$1,
          create$1,
          backend$1,
          set$1,
          iter$1,
          Pre$1,
          pre_check$1,
          Check_result$1,
          thread_safe_check$1,
          post_check$1,
          reset_in_forked_process$1,
          watcher$1];
     }
    }
    else
     var
      Custom = file_descr_watcher[1],
      watcher$2 =
        caml_call5
         (Custom[3],
          handle_fd_read_bad,
          handle_fd_write_bad,
          num_file_descrs,
          handle_fd_read_ready,
          handle_fd_write_ready),
      sexp_of_t$2 = Custom[1],
      invariant$2 = Custom[2],
      create$2 = Custom[3],
      backend$2 = Custom[4],
      set$2 = Custom[5],
      iter$2 = Custom[6],
      Pre$2 = Custom[7],
      pre_check$2 = Custom[8],
      Check_result$2 = Custom[9],
      thread_safe_check$2 = Custom[10],
      post_check$2 = Custom[11],
      reset_in_forked_process$2 = Custom[12],
      file_descr_watcher$1 =
        [0,
         sexp_of_t$2,
         invariant$2,
         create$2,
         backend$2,
         set$2,
         iter$2,
         Pre$2,
         pre_check$2,
         Check_result$2,
         thread_safe_check$2,
         post_check$2,
         reset_in_forked_process$2,
         watcher$2],
      uring = 0,
      timerfd = 0,
      file_descr_watcher$0 = file_descr_watcher$1;
    var
     _dH_ = caml_call1(Thread_pool[8], thread_pool) / 2 | 0,
     max_concurrent_dns_lookups = caml_call2(Core_Int[90], _dH_, 1),
     dns_lookup_throttle =
       caml_call2(Async_kernel_Throttle[5], 1, max_concurrent_dns_lookups),
     kernel_scheduler = caml_call1(Async_kernel_Scheduler[2], 0),
     _dI_ = caml_call2(Base_Backtrace[2], 0, 0),
     _dJ_ = Async_unix_Config[18],
     _dK_ = Async_unix_Config[14],
     _dL_ = 0,
     _dM_ = caml_call1(Time_stamp_counter[25], 0),
     _dN_ = 0;
    function _dO_(param){
     return caml_call1(Async_unix_Interruptor[5], interruptor);
    }
    var
     _dP_ = caml_call1(Async_unix_Signal_manager[3], _dO_),
     _dQ_ = Time_ns_unix[37],
     _dR_ = caml_call1(Time_stamp_counter[24][33], 0),
     _dS_ = caml_call2(Core_Uniform_array[16], 256, Async_unix_Busy_poller[6]),
     t =
       [0,
        mutex,
        0,
        caml_call1(Core_Stack[23], 0),
        file_descr_watcher$0,
        _dS_,
        0,
        _dR_,
        fd_by_descr,
        external_fd_by_descr,
        0,
        timerfd,
        _dQ_,
        -1,
        interruptor,
        _dP_,
        thread_pool,
        default_handle_thread_pool_stu,
        _dN_,
        dns_lookup_throttle,
        _dM_,
        kernel_scheduler,
        _dL_,
        _dK_,
        _dJ_,
        _dI_,
        uring];
    t_ref[1] = [0, t];
    update_check_access(t, Async_unix_Config[7]);
    function _dT_(_dY_){return create_fd_registration(t, _dY_);}
    var _dU_ = caml_call1(Core_List[59], fds_created_before_initializat[1]);
    caml_call2(Core_List[19], _dU_, _dT_);
    fds_created_before_initializat[1] = 0;
    return t;
   }
   function init(take_the_lock){
    var mutex = caml_call1(Nano_mutex[3], 0);
    if(take_the_lock) caml_call1(Nano_mutex[7], mutex);
    the_one_and_only_ref[1] =
     [1, function(param){return create(mutex, 0, 0, 0, 0, 0);}];
    return 0;
   }
   init(1);
   function _a7_(take_the_lock){
    var _ds_ = the_one_and_only_ref[1];
    if(2 === _ds_[0]){
     var match = _ds_[1], file_descr_watcher = match[4], timerfd = match[11];
     caml_call1(file_descr_watcher[12], file_descr_watcher[13]);
     if(timerfd){var tfd = timerfd[1]; caml_call2(Core_unix[53], 0, tfd);}
    }
    caml_call1(Async_kernel_Scheduler[68], 0);
    fds_created_before_initializat[1] = 0;
    return init(take_the_lock);
   }
   function reset_in_forked_process_withou(param){return _a7_(0);}
   function reset_in_forked_process(param){return _a7_(1);}
   function make_async_unusable(param){
    reset_in_forked_process(0);
    caml_call1(Async_kernel_Scheduler[67], 0);
    the_one_and_only_ref[1] =
     [1,
      function(param){
       var
        _dr_ =
          caml_call1(Sexplib0_Sexp_conv[7], cst_Async_is_unusable_due_to_S);
       return caml_call1(Core[261], _dr_);
      }];
    return 0;
   }
   function thread_safe_enqueue_external_j(t, f){
    return caml_call2(Async_kernel_Scheduler[55], t[21], f);
   }
   function have_lock_do_cycle$1(t){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15], cst_have_lock_do_cycle$0, t, sexp_of_t$1);
    var match = t[22];
    if(match){var f = match[1]; return caml_call1(f, 0);}
    caml_call1(Async_kernel_Scheduler[14], t[21]);
    maybe_report_long_async_cycles$0(t);
    var _dq_ = 1 - i_am_the_scheduler(t);
    return _dq_ ? thread_safe_wakeup_scheduler(t) : _dq_;
   }
   function log_sync_changed_fds_to_file_d(t, file_descr, desired){
    var _do_ = t[4];
    function _dp_(param){
     var
      arg2_096 = param[3],
      arg1_095 = param[2],
      arg0_094 = param[1],
      res0_097 = caml_call1(Core_unix_File_descr[2], arg0_094),
      res1_098 = caml_call2(Read_write_pair[8], Core[323], arg1_095),
      res2_099 = caml_call1(_do_[1], arg2_096);
     return [1, [0, res0_097, [0, res1_098, [0, res2_099, 0]]]];
    }
    return caml_call3
            (Async_kernel_Debug[15],
             cst_File_descr_watcher_set,
             [0, file_descr, desired, _do_[13]],
             _dp_);
   }
   function sync_changed_fd_failed(t, fd, desired, exn){
    var
     bt = caml_call1(Base_Backtrace[6][4], 0),
     _di_ = [0, [1, [0, _a8_, [0, sexp_of_t$1(t), 0]]], 0],
     _dj_ =
       [0, [1, [0, _a9_, [0, caml_call1(Base_Backtrace[1], bt), 0]]], _di_],
     _dk_ = [0, [1, [0, _a__, [0, caml_call1(Core[625], exn), 0]]], _dj_],
     _dl_ =
       [0,
        [1, [0, _a$_, [0, caml_call1(Async_unix_Raw_fd[25], fd), 0]]],
        _dk_],
     _dm_ =
       [0,
        [1,
         [0, _ba_, [0, caml_call2(Read_write_pair[8], Core[323], desired), 0]]],
        _dl_],
     _dn_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_sync_changed_fds_to_file_d),
         _dm_]];
    return caml_call1(Core[261], _dn_);
   }
   function sync_changed_fds_to_file_descr(t){
    var _c$_ = 1 - caml_call1(Core_Stack[7], t[3]);
    if(_c$_){
     var F = t[4];
     for(;;){
      if(caml_call1(Core_Stack[7], t[3])){var _da_ = 0; break;}
      var fd = caml_call1(Core_Stack[27], t[3]);
      fd[8] = 0;
      var
       _db_ = function(watching){return typeof watching === "number" ? 0 : 1;},
       desired = caml_call2(Read_write_pair[20], fd[7], _db_);
      if(Async_kernel_Debug[3])
       log_sync_changed_fds_to_file_d(t, fd[1], desired);
      try{var _df_ = caml_call3(F[5], F[13], fd[1], desired), _dc_ = _df_;}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _dc_ = sync_changed_fd_failed(t, fd, desired, exn);
      }
      if(17724 <= _dc_){
       var
        _dd_ =
          function(fd){
            return function(read_or_write, watching){
             if(typeof watching === "number" && watching){
              caml_call3(Read_write_pair[26], fd[7], read_or_write, 0);
              return dec_num_active_syscalls_fd(t, fd);
             }
             return 0;};
           }
           (fd);
       caml_call2(Read_write_pair[17], fd[7], _dd_);
      }
      else{
       var
        _de_ =
          function(fd){
            return function(_dg_, _dh_){
             return give_up_on_watching(t, fd, _dg_, _dh_);};
           }
           (fd);
       caml_call2(Read_write_pair[17], fd[7], _de_);
      }
     }
    }
    else
     var _da_ = _c$_;
    return _da_;
   }
   function maybe_calibrate_tsc(t){
    var _c5_ = caml_call1(Core_Lazy[40], Time_stamp_counter[30]);
    if(_c5_){
     var
      now = caml_call1(Time_stamp_counter[25], 0),
      _c6_ = caml_call2(Time_stamp_counter[13], now, t[20]);
     if(_c6_){
      var calibrator = caml_call1(Core[248], Time_stamp_counter[30]);
      caml_call1(Time_stamp_counter[23][12], calibrator);
      var
       _c7_ = caml_call1(Core_Int63[72], 1000000000),
       _c8_ = caml_call2(Time_stamp_counter[24][39], _c7_, calibrator);
      t[20] = caml_call2(Time_stamp_counter[27], now, _c8_);
      var _c9_ = 0;
     }
     else
      var _c9_ = _c6_;
     var _c__ = _c9_;
    }
    else
     var _c__ = _c5_;
    return _c__;
   }
   function create_job(execution_context, t, f, x){
    if(execution_context)
     var e = execution_context[1], execution_context$0 = e;
    else
     var execution_context$0 = current_execution_context(t);
    return caml_call4
            (Async_kernel_Scheduler[9], t[21], execution_context$0, f, x);
   }
   function dump_core_on_job_delay(param){
    var _c3_ = Async_unix_Config[8];
    if(! _c3_) return 0;
    var
     match = _c3_[1],
     how_to_dump = match[2],
     dump_if_delayed_by = match[1],
     _c4_ = caml_call1(Time_ns_unix[72][144], dump_if_delayed_by);
    return caml_call2(Async_unix_Dump_core_on_job_de[2], _c4_, how_to_dump);
   }
   function num_busy_pollers$1(t){return t[6];}
   function add_busy_poller(t, max_busy_wait_duration, f){
    var _cZ_ = caml_call1(Core_Uniform_array[19], t[5]);
    if(caml_call2(Async_unix_Import[3], t[6], _cZ_)){
     var
      _c0_ = caml_call1(Sexplib0_Sexp_conv[7], cst_add_busy_poller_maximum_nu);
     caml_call1(Core[261], _c0_);
    }
    caml_call3(Core_Uniform_array[23], t[5], t[6], f);
    t[6] = t[6] + 1 | 0;
    var
     _c1_ = caml_call1(Async_kernel_config[3][5], t[23]),
     _c2_ = caml_call2(Time_ns_unix[72][23], _c1_, max_busy_wait_duration);
    t[23] = caml_call1(Async_kernel_config[3][4], _c2_);
    return 0;
   }
   function init$0(t){
    dump_core_on_job_delay(0);
    function _cQ_(param){return thread_safe_wakeup_scheduler(t);}
    caml_call2(Async_kernel_Scheduler[51], t[21], _cQ_);
    t[13] = current_thread_id(0);
    caml_call2(Async_unix_Signal_manager[4], t[15], Core_Signal[59]);
    var
     interruptor_finished = caml_call1(Async_kernel_Ivar[12], 0),
     interruptor_read_fd = caml_call1(Async_unix_Interruptor[4], t[14]);
    function problem_with_interruptor(param){
     var
      _cW_ = [0, [1, [0, _bb_, [0, sexp_of_t$1(t), 0]]], 0],
      _cX_ =
        [0,
         [1,
          [0,
           _bc_,
           [0, caml_call1(Async_unix_Raw_fd[25], interruptor_read_fd), 0]]],
         _cW_],
      _cY_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_can_not_watch_interruptor),
          _cX_]];
     return caml_call1(Core[261], _cY_);
    }
    var _cR_ = 0;
    function _cS_(_cV_){return 0;}
    var
     match =
       request_start_watching
        (t,
         interruptor_read_fd,
         914388854,
         [1,
          caml_call4
           (Async_kernel_Scheduler[9],
            t[21],
            Async_kernel_Execution_context[7],
            _cS_,
            _cR_),
          interruptor_finished]);
    a:
    if(-655995373 !== match && 233446106 > match){problem_with_interruptor(0); break a;}
    function _cT_(param){return problem_with_interruptor(0);}
    var _cU_ = caml_call1(Async_kernel_Ivar[19], interruptor_finished);
    return caml_call2(Async_unix_Import[22], _cU_, _cT_);
   }
   function fds_may_produce_events(t){
    var interruptor_fd = caml_call1(Async_unix_Interruptor[4], t[14]);
    function _cM_(fd){
     var _cN_ = 1 - caml_call2(Async_unix_Raw_fd[27], fd, interruptor_fd);
     if(! _cN_) return _cN_;
     function _cO_(watching){
      if(typeof watching === "number" && ! watching) return 0;
      return 1;
     }
     var _cP_ = caml_call1(Async_unix_Raw_fd[13], fd);
     return caml_call2(Read_write_pair[15], _cP_, _cO_);
    }
    return caml_call2(Async_unix_By_descr[12], t[8], _cM_);
   }
   function check_file_descr_watcher(t, timeout, span_or_unit){
    var F = t[4];
    if(Async_kernel_Debug[3])
     caml_call3
      (Async_kernel_Debug[15], cst_File_descr_watcher_pre_che, t, sexp_of_t$1);
    var pre = caml_call1(F[8], F[13]);
    unlock(t);
    caml_call1(Core_thread[10], 0);
    if(Async_kernel_Debug[3]){
     var
      _cI_ =
        function(param){
         var arg1_103 = param[2], arg0_102 = param[1];
         if(typeof arg0_102 === "number")
          var res0_104 = _bd_;
         else
          var
           v_101 = arg0_102[2],
           res0_104 =
             [1, [0, _be_, [0, caml_call1(Time_ns_unix[72][10], v_101), 0]]];
         var res1_105 = sexp_of_t$1(arg1_103);
         return [1, [0, res0_104, [0, res1_105, 0]]];
        },
      _cJ_ =
        [0,
         caml_call2
          (Async_unix_File_descr_watcher_[1][1], timeout, span_or_unit),
         t];
     caml_call3
      (Async_kernel_Debug[15], cst_File_descr_watcher_thread_, _cJ_, _cI_);
    }
    var
     before = caml_call1(Time_stamp_counter[25], 0),
     check_result = caml_call4(F[10], F[13], pre, timeout, span_or_unit),
     after = caml_call1(Time_stamp_counter[25], 0),
     _cK_ = caml_call2(Time_stamp_counter[26], after, before);
    t[7] = caml_call2(Time_stamp_counter[24][35], t[7], _cK_);
    lock(t);
    caml_call1(Async_unix_Interruptor[6], t[14]);
    if(Async_kernel_Debug[3]){
     var
      _cL_ =
        function(param){
         var
          arg1_107 = param[2],
          arg0_106 = param[1],
          res0_108 = caml_call1(F[9][1], arg0_106),
          res1_109 = sexp_of_t$1(arg1_107);
         return [1, [0, res0_108, [0, res1_109, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_File_descr_watcher_post_ch,
       [0, check_result, t],
       _cL_);
    }
    return caml_call2(F[11], F[13], check_result);
   }
   function run_busy_pollers_once(t, deadline){
    var did_work = [0, 0];
    try{
     var _cF_ = t[6] - 1 | 0, _cE_ = 0;
     if(_cF_ >= 0){
      var i = _cE_;
      for(;;){
       var
        poller = caml_call2(Core_Uniform_array[21], t[5], i),
        _cG_ = caml_call2(Async_unix_Busy_poller[3], poller, deadline);
       if(caml_call2(Async_unix_Import[4], _cG_, 0)) did_work[1] = 1;
       var _cH_ = i + 1 | 0;
       if(_cF_ === i) break;
       var i = _cH_;
      }
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call3(Async_kernel_Monitor[15], Async_kernel_Monitor[24], 0, exn);
    }
    return did_work[1];
   }
   function run_busy_pollers(t, timeout){
    var
     calibrator = caml_call1(Core[248], Time_stamp_counter[30]),
     _cy_ = caml_call2(Time_stamp_counter[24][41], timeout, calibrator),
     _cz_ = caml_call1(Time_stamp_counter[25], 0),
     deadline = [0, caml_call2(Time_stamp_counter[27], _cz_, _cy_)];
    for(;;){
     var
      pollers_did_something = run_busy_pollers_once(t, deadline[1]),
      now = caml_call1(Time_stamp_counter[25], 0);
     if(pollers_did_something)
      if(caml_call1(Async_kernel_Scheduler[45], t[21]))
       deadline[1] = now;
      else if(caml_call1(Async_kernel_Scheduler[16], t[21])){
       var
        _cA_ = caml_call2(Time_stamp_counter[32], now, calibrator),
        _cB_ = caml_call1(Async_kernel_Scheduler[18], t[21]),
        _cC_ = caml_call2(Time_ns_unix[47], _cB_, _cA_),
        new_timeout = caml_call2(Time_stamp_counter[24][41], _cC_, calibrator),
        _cD_ = caml_call2(Time_stamp_counter[27], now, new_timeout);
       deadline[1] = caml_call2(Time_stamp_counter[21], deadline[1], _cD_);
      }
     if(! caml_call2(Time_stamp_counter[17], now, deadline[1])) return 0;
    }
   }
   function compute_timeout_and_check_file(t){
    var
     min_inter_cycle_timeout = t[24],
     max_inter_cycle_timeout = t[23],
     have_busy_pollers = caml_call2(Async_unix_Import[4], t[6], 0),
     match = t[11];
    a:
    {
     if(match && ! have_busy_pollers){
      var
       timerfd = match[1],
       have_min_inter_cycle_timeout =
         caml_call2
          (Time_ns_unix[72][18],
           min_inter_cycle_timeout,
           Time_ns_unix[72][76]);
      if(caml_call1(Async_kernel_Scheduler[45], t[21]))
       var
        max_inter_cycle_timeout$0 =
          have_min_inter_cycle_timeout
           ? (t
              [12]
             = Time_ns_unix[37],
             caml_call2(Linux_ext[35][8], timerfd, min_inter_cycle_timeout),
             max_inter_cycle_timeout)
           : Time_ns_unix[72][76];
      else if(caml_call1(Async_kernel_Scheduler[16], t[21])){
       var next_event_at$0 = caml_call1(Async_kernel_Scheduler[18], t[21]);
       if(have_min_inter_cycle_timeout)
        var
         _cw_ = caml_call1(Time_ns_unix[40], 0),
         _cx_ = caml_call2(Time_ns_unix[41], _cw_, min_inter_cycle_timeout),
         set_timerfd_at = caml_call2(Time_ns_unix[98], next_event_at$0, _cx_);
       else
        var set_timerfd_at = next_event_at$0;
       if(1 - caml_call2(Time_ns_unix[95], t[12], set_timerfd_at)){
        t[12] = set_timerfd_at;
        caml_call2(Linux_ext[35][7], timerfd, set_timerfd_at);
       }
       var max_inter_cycle_timeout$0 = max_inter_cycle_timeout;
      }
      else
       var max_inter_cycle_timeout$0 = max_inter_cycle_timeout;
      var file_descr_watcher_timeout = max_inter_cycle_timeout$0;
      break a;
     }
     if(caml_call1(Async_kernel_Scheduler[45], t[21]))
      var file_descr_watcher_timeout = min_inter_cycle_timeout;
     else if(caml_call1(Async_kernel_Scheduler[16], t[21]))
      var
       next_event_at = caml_call1(Async_kernel_Scheduler[18], t[21]),
       _ct_ = caml_call1(Time_ns_unix[40], 0),
       _cu_ = caml_call2(Time_ns_unix[47], next_event_at, _ct_),
       _cv_ = caml_call2(Time_ns_unix[72][24], min_inter_cycle_timeout, _cu_),
       file_descr_watcher_timeout =
         caml_call2(Time_ns_unix[72][23], max_inter_cycle_timeout, _cv_);
     else
      var file_descr_watcher_timeout = max_inter_cycle_timeout;
    }
    return caml_call2
             (Time_ns_unix[72][16],
              file_descr_watcher_timeout,
              Time_ns_unix[72][76])
            ? (run_busy_pollers_once
               (t, Time_stamp_counter[29]),
              check_file_descr_watcher(t, 0, 0))
            : have_busy_pollers
              ? (run_busy_pollers
                 (t, file_descr_watcher_timeout),
                check_file_descr_watcher(t, 0, 0))
              : check_file_descr_watcher(t, 1, file_descr_watcher_timeout);
   }
   function one_iter(t){
    if(caml_call1(Async_kernel_Scheduler[33], t[21])) invariant(t);
    maybe_calibrate_tsc(t);
    sync_changed_fds_to_file_descr(t);
    compute_timeout_and_check_file(t);
    if(debug)
     caml_call1(Async_kernel_Debug[16], cst_handling_delivered_signals);
    caml_call1(Async_unix_Signal_manager[10], t[15]);
    have_lock_do_cycle$1(t);
    return caml_call1(Async_kernel_Scheduler[20], t[21]);
   }
   function be_the_scheduler(opt, t){
    if(opt)
     var sth = opt[1], raise_unhandled_exn = sth;
    else
     var raise_unhandled_exn = 0;
    init$0(t);
    try{
     for(;;){var match = one_iter(t); if(match) break;}
     var
      error = match[1],
      _cr_ = 830880297,
      error$1 = error,
      error_kind = _cr_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     unlock(t);
     var
      _cm_ =
        function(param){
         var
          arg1_111 = param[2],
          arg0_110 = param[1],
          res0_112 = caml_call1(Core[625], arg0_110),
          res1_113 = sexp_of_t$1(arg1_111);
         return [1, [0, res0_112, [0, res1_113, 0]]];
        },
      error$0 =
        caml_call5
         (Core_Error[19], 0, 0, cst_bug_in_async_scheduler, [0, exn, t], _cm_),
      error$1 = error$0,
      error_kind = 436759384;
    }
    if(raise_unhandled_exn) return caml_call1(Core_Error[30], error$1);
    try{caml_call1(Stdlib[103], 0);}catch(_cs_){}
    if(830880297 <= error_kind){
     var
      _cn_ = [0, caml_call1(Core_Error[9], error$1), 0],
      _co_ = caml_call1(Time_ns_unix[40], 0),
      _cp_ = [1, [0, caml_call1(Time_ns_unix[85], _co_), _cn_]],
      _cq_ =
        [0,
         [24,
          _bg_,
          function(param, custom_printf_114){
           return caml_call2(Core_Sexp[84], 0, custom_printf_114);
          },
          _bf_],
         cst_Sexp_hum];
     caml_call2(Core[243], _cq_, _cp_);
    }
    else{
     caml_call3
      (Async_kernel_Debug[15],
       cst_unhandled_exception_in_Asy,
       error$1,
       Core_Error[9]);
     caml_call1(Async_kernel_Debug[16], cst_dumping_core);
     caml_call2(Async_unix_Dump_core_on_job_de[3], 0, 0);
    }
    return caml_call1(Core_unix[274], 1);
   }
   function add_finalizer(t, heap_block, f){
    return caml_call3(Async_kernel_Scheduler[47], t[21], heap_block, f);
   }
   function add_finalizer_exn(t, x, f){
    function _cl_(heap_block){
     return caml_call1(f, caml_call1(Heap_block[4], heap_block));
    }
    return add_finalizer(t, caml_call1(Heap_block[3], x), _cl_);
   }
   function async_kernel_config_task_id(param){
    var
     v_115 = caml_call1(Core_unix[34], 0),
     _ck_ = caml_call1(Core_thread[3], 0),
     thread_id = caml_call1(Core_thread[4], _ck_),
     res0_119 = [1, [0, _bh_, [0, caml_call1(Core_Pid[13], v_115), 0]]],
     res1_120 = [1, [0, _bi_, [0, caml_call1(Core[389], thread_id), 0]]];
    return [1, [0, res0_119, [0, res1_120, 0]]];
   }
   function set_task_id(param){
    Async_kernel_config[35][1] = async_kernel_config_task_id;
    return 0;
   }
   function raise_if_any_jobs_were_schedul(param){
    var
     _ch_ = caml_call1(Async_kernel_Scheduler[2], 0),
     match = caml_call1(Async_kernel_Scheduler[54], _ch_);
    if(! match) return 0;
    var
     bt = match[1],
     _ci_ = [0, caml_call1(Base_Backtrace[1], bt), 0],
     _cj_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_error_program_is_attemptin),
         _ci_]];
    return caml_call1(Core[261], _cj_);
   }
   function is_running(t){
    var _cg_ = t[2];
    if(typeof _cg_ === "number" && ! _cg_) return 0;
    return 1;
   }
   function go(raise_unhandled_exn, param){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_Scheduler_go);
    set_task_id(0);
    var t = the_one_and_only(0);
    if(1 - am_holding_lock(t)) lock(t);
    var _cd_ = t[2];
    if(typeof _cd_ === "number")
     switch(_cd_){
       case 0:
        t[2] = 1; return be_the_scheduler(raise_unhandled_exn, t);
       case 1:
        var
         _ce_ =
           caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_Scheduler_go_more_t);
        return caml_call1(Core[261], _ce_);
       default:
        unlock(t);
        thread_safe_wakeup_scheduler(t);
        return caml_call1(Time_float_unix[112], 0);
     }
    var
     _cf_ = caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_mix_Scheduler_go_an);
    return caml_call1(Core[261], _cf_);
   }
   function go_main
   (raise_unhandled_exn,
    file_descr_watcher,
    max_num_open_file_descrs,
    max_num_threads,
    main,
    param){
    var _b$_ = the_one_and_only_ref[1];
    if(2 === _b$_[0]){
     var
      initialized_at = _b$_[1][25],
      _cb_ =
        [0,
         [1, [0, _bj_, [0, caml_call1(Base_Backtrace[1], initialized_at), 0]]],
         0],
      _cc_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Async_was_initialized_prio),
          _cb_]];
     caml_call1(Core[261], _cc_);
    }
    var
     max_num_open_file_descrs$0 =
       caml_call2
        (Core_Option[34], max_num_open_file_descrs, Async_kernel_config[7][4]),
     max_num_threads$0 =
       caml_call2(Core_Option[34], max_num_threads, Async_kernel_config[5][4]),
     mutex = caml_call1(Nano_mutex[3], 0);
    caml_call1(Nano_mutex[7], mutex);
    the_one_and_only_ref[1] =
     [1,
      function(param){
       return create
               (mutex,
                0,
                file_descr_watcher,
                max_num_open_file_descrs$0,
                max_num_threads$0,
                0);
      }];
    var _ca_ = caml_call1(Async_unix_Import[30], 0);
    caml_call2(Async_kernel_Deferred[4], _ca_, main);
    return go(raise_unhandled_exn, 0);
   }
   function is_the_one_and_only_running(param){
    return is_ready_to_initialize(0) ? 0 : is_running(the_one_and_only(0));
   }
   function report_long_cycle_times(opt, param){
    if(opt)
     var sth = opt[1], cutoff = sth;
    else
     var cutoff = caml_call1(Core[630], 1.);
    function _b7_(span){
     var
      _b9_ =
        caml_call5
         (Core_Error[19],
          0,
          0,
          cst_long_async_cycle,
          span,
          Time_ns_unix[72][10]),
      _b__ = caml_call1(Core_Error[12], _b9_);
     return caml_call2(Core[243], _bk_, _b__);
    }
    var
     _b8_ = caml_call1(long_cycles, caml_call1(Time_ns_unix[72][146], cutoff));
    return caml_call2(Async_kernel_Async_stream[18], _b8_, _b7_);
   }
   function set_check_invariants(bool){
    var _b6_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call2(Async_kernel_Scheduler[34], _b6_, bool);
   }
   function set_detect_invalid_access_from(bool){
    return update_check_access(the_one_and_only(0), bool);
   }
   function set_max_inter_cycle_timeout$0(span){
    var
     _b4_ = caml_call1(Time_ns_unix[72][146], span),
     _b5_ = caml_call1(Async_kernel_config[3][4], _b4_);
    the_one_and_only(0)[23] = _b5_;
    return 0;
   }
   function t(param){return the_one_and_only(0);}
   function with_t_once_started(f){
    var match = the_one_and_only_ref[1];
    if(2 === match[0]){
     var t$0 = match[1];
     if(is_running(t$0)) return caml_call1(f, t$0);
    }
    function _b2_(param){return caml_call1(f, t(0));}
    var _b3_ = caml_call1(Async_unix_Import[30], 0);
    return caml_call2(Async_kernel_Deferred[11], _b3_, _b2_);
   }
   function fold_fields(init, folder){
    var t$0 = t(0);
    function f(ac, field){return caml_call3(folder[1], ac, t$0, field);}
    return caml_call27
            (Fields[28],
             init,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f,
             f);
   }
   function handle_thread_pool_stuck$1(f){
    var
     t$0 = t(0),
     kernel_scheduler = t$0[21],
     execution_context =
       caml_call1(Async_kernel_Scheduler[4], kernel_scheduler);
    t$0[17] =
     function(param, stuck_for){
      var _b0_ = 0;
      function _b1_(param){return caml_call1(f, stuck_for);}
      return caml_call4
              (Async_kernel_Scheduler[8],
               kernel_scheduler,
               execution_context,
               _b1_,
               _b0_);
     };
    return 0;
   }
   var created = [0, 0];
   function create_exn(param){
    if(created[1]) caml_call1(Core[6], cst_Thread_pool_stats_subscrip);
    created[1] = 1;
    return 0;
   }
   function get_and_reset(param){
    var t$0 = t(0);
    return caml_call1(Thread_pool[24], t$0[16]);
   }
   var
    Thread_pool_stats_subscription = [0, created, create_exn, get_and_reset],
    For_metrics = [0, Thread_pool_stats_subscription];
   function current_thread_can_cycle(param){
    if(is_ready_to_initialize(0)) return 1;
    var t = the_one_and_only(0);
    if(1 - am_holding_lock(t)){
     var
      _bY_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Attempt_to_call_current_th);
     caml_call1(Core[261], _bY_);
    }
    var match = t[2];
    if(typeof match === "number"){if(! match) return 1;}
    else{var active = match[1]; if(! active[1]) return i_am_the_scheduler(t);}
    if(i_am_the_scheduler(t)){
     var
      _bZ_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_External_current);
     caml_call1(Core[261], _bZ_);
    }
    return 0;
   }
   function collect_events(event_list){
    function _bV_(ev){
     if(-3286312 > ev[3]) return [0, ev[1], ev[2]];
     var
      _bW_ =
        [0,
         [1, [0, _bl_, [0, caml_call1(Core_unix_File_descr[2], ev[1]), 0]]],
         0],
      _bX_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Bad_file_descriptor), _bW_]];
     return caml_call1(Core[261], _bX_);
    }
    return caml_call2(Core_List[51], event_list, _bV_);
   }
   function run_one_cycle(t){
    set_task_id(0);
    var match = t[2];
    if(typeof match === "number")
     if(match){
      var _bL_ = current_thread_id(0);
      if(caml_call2(Async_unix_Import[3], t[13], _bL_))
       var
        _bM_ =
          caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_External_run_one),
        active = caml_call1(Core[261], _bM_);
      else
       var
        _bS_ =
          caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_External_run_one$2),
        active = caml_call1(Core[261], _bS_);
     }
     else{
      var active$0 = [0, 0];
      t[2] = [0, active$0];
      init$0(t);
      var active = active$0;
     }
    else
     var active$1 = match[1], active = active$1;
    if(active[1]){
     var
      _bN_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_External_run_one$0);
     caml_call1(Core[261], _bN_);
    }
    var _bO_ = current_thread_id(0);
    if(caml_call2(Async_unix_Import[6], t[13], _bO_)){
     var
      _bP_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_External_run_one$1);
     caml_call1(Core[261], _bP_);
    }
    active[1] = 1;
    function _bQ_(param){active[1] = 0; t[10] = 0; return 0;}
    function _bR_(param){
     var _bT_ = Core_Error[30], _bU_ = one_iter(t);
     caml_call2(Core_Option[46], _bU_, _bT_);
     return collect_events(t[10]);
    }
    return caml_call2(Base_Exn[13], _bR_, _bQ_);
   }
   function check_thread(param){
    var _bJ_ = 1 - current_thread_can_cycle(0);
    if(! _bJ_) return _bJ_;
    var
     _bK_ = caml_call1(Sexplib0_Sexp_conv[7], cst_FD_registration_must_only_);
    return caml_call1(Core[261], _bK_);
   }
   function register_fd(fd, ops){
    check_thread(0);
    var t = the_one_and_only(0);
    if(t[26]){
     var
      _bG_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_watch_external_fds_);
     return caml_call1(Core[261], _bG_);
    }
    var F = t[4];
    function _bH_(param){
     try{var val = caml_call3(F[5], F[13], fd, ops);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      caml_call2(Async_unix_By_descr[9], t[9], fd);
      return [1, caml_call2(Core_Error[27], _bm_, exn)];
     }
     return 17724 <= val
             ? _bn_
             : (caml_call2
                (Async_unix_By_descr[9], t[9], fd),
               [1, caml_call1(Core_Error[14], cst_Unsupported_file_descripto)]);
    }
    var _bI_ = caml_call3(Async_unix_By_descr[5], t[9], fd, ops);
    return caml_call2(Core_Result[25][4][2], _bI_, _bH_);
   }
   var not_watching = caml_call2(Read_write_pair[9], 0, 0);
   function unregister_fd(fd){
    check_thread(0);
    var t = the_one_and_only(0), F = t[4];
    if(! caml_call2(Async_unix_By_descr[6], t[9], fd))
     return [1, caml_call1(Core_Error[14], cst_Attempt_to_unregister_an_F)];
    caml_call2(Async_unix_By_descr[9], t[9], fd);
    try{var val = caml_call3(F[5], F[13], fd, not_watching);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return [1, caml_call2(Core_Error[27], _bo_, exn)];
    }
    return 17724 <= val
            ? _bp_
            : [1,
              caml_call1(Core_Error[14], cst_Unsupported_file_descripto$0)];
   }
   function is_registered(fd){
    check_thread(0);
    var t = the_one_and_only(0);
    return caml_call2(Async_unix_By_descr[6], t[9], fd);
   }
   function run_one_cycle$0(max_wait){
    var t = the_one_and_only(0);
    if(1 - am_holding_lock(t)){
     var
      _bA_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Attempt_to_run_one_cycle_w);
     caml_call1(Core[261], _bA_);
    }
    if(typeof max_wait !== "number"){
     var
      wake_at = max_wait[2],
      wake = caml_call1(Async_kernel_Clock_ns[7][15], wake_at),
      _bD_ =
        function(param){
         return caml_call2(Async_kernel_Clock_ns[7][11], wake, 0);
        },
      _bE_ = function(param){return run_one_cycle(t);};
     return caml_call2(Base_Exn[13], _bE_, _bD_);
    }
    if(1059257461 <= max_wait) return run_one_cycle(t);
    var _bB_ = 0;
    function _bC_(_bF_){return 0;}
    caml_call4
     (Async_kernel_Scheduler[8],
      t[21],
      Async_kernel_Execution_context[7],
      _bC_,
      _bB_);
    return run_one_cycle(t);
   }
   function run_cycles_until_determined(d){
    for(;;){
     var match = caml_call1(Async_kernel_Deferred[5], d);
     if(match){var x = match[1]; return x;}
     var ready_fds = run_one_cycle$0(1059257461);
     if(ready_fds){
      var
       t = the_one_and_only(0),
       _bq_ =
         function(fd){
          return [0, fd, caml_call2(Async_unix_By_descr[8], t[9], fd)];
         },
       _br_ =
         function(a_122, b_123){
          return caml_call2(Core_unix_File_descr[4], a_122, b_123);
         },
       _bs_ = function(_bz_){return _bz_[1];},
       _bt_ = caml_call2(Core_List[51], ready_fds, _bs_),
       _bu_ = caml_call2(Core_List[122], _bt_, _br_),
       fd_ops = caml_call2(Core_List[51], _bu_, _bq_),
       temporarily_unregister =
         function(param){
          if(! param) return run_cycles_until_determined(d);
          var
           fd_ops = param[2],
           match = param[1],
           ops = match[2],
           fd = match[1],
           _bv_ = unregister_fd(fd);
          caml_call1(Core_Or_error[40], _bv_);
          function _bw_(param){
           var _by_ = register_fd(fd, ops);
           return caml_call1(Core_Or_error[40], _by_);
          }
          function _bx_(param){return temporarily_unregister(fd_ops);}
          return caml_call2(Base_Exn[13], _bx_, _bw_);
         };
      return temporarily_unregister(fd_ops);
     }
    }
   }
   var
    External =
      [0,
       current_thread_can_cycle,
       collect_events,
       check_thread,
       register_fd,
       not_watching,
       unregister_fd,
       is_registered,
       run_one_cycle$0,
       run_cycles_until_determined];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Raw_scheduler);
   var
    Async_unix_Raw_scheduler =
      [0,
       debug,
       File_descr_watcher,
       Which_watcher,
       External_fd_event,
       Thread_pool_stuck_status,
       within_context,
       within,
       within$0,
       within_v,
       with_local,
       find_local,
       schedule,
       schedule$0,
       enqueue_job,
       thread_safe_enqueue_job,
       preserve_execution_context,
       preserve_execution_context$0,
       cycle_start,
       cycle_start_ns,
       cycle_times,
       cycle_times_ns,
       last_cycle_time,
       long_cycles,
       cycle_count,
       total_cycle_time,
       event_precision,
       event_precision_ns,
       force_current_cycle_to_end,
       set_max_num_jobs_per_priority_,
       max_num_jobs_per_priority_per_,
       set_record_backtraces,
       recording_backtraces,
       yield$0,
       yield_until_no_jobs_remain,
       yield_every,
       num_jobs_run,
       num_pending_jobs,
       Expert,
       sexp_of_start_type,
       uring,
       initialized_at,
       min_inter_cycle_timeout,
       set_min_inter_cycle_timeout,
       max_inter_cycle_timeout,
       set_have_lock_do_cycle,
       kernel_scheduler,
       next_tsc_calibration,
       set_next_tsc_calibration,
       dns_lookup_throttle,
       thread_pool_stuck,
       set_thread_pool_stuck,
       set_handle_thread_pool_stuck,
       thread_pool,
       signal_manager,
       interruptor,
       scheduler_thread_id,
       set_scheduler_thread_id,
       timerfd_set_at,
       set_timerfd_set_at,
       timerfd,
       set_timerfd,
       external_fd_events,
       set_external_fd_events,
       external_fd_by_descr,
       fd_by_descr,
       time_spent_waiting_for_io,
       set_time_spent_waiting_for_io,
       set_num_busy_pollers,
       busy_pollers,
       file_descr_watcher,
       fds_whose_watching_has_changed,
       start_type,
       set_start_type,
       mutex,
       Fields,
       sexp_of_t$1,
       max_num_threads,
       max_num_open_file_descrs,
       current_execution_context,
       with_execution_context,
       thread_pool_cpu_affinity,
       lock,
       try_lock,
       unlock,
       with_lock,
       am_holding_lock,
       mutex_for_initializing_the_one,
       the_one_and_only_ref,
       is_ready_to_initialize,
       is_initialized,
       the_one_and_only_uncommon_case,
       the_one_and_only,
       fds_created_before_initializat,
       create_fd_registration,
       create_fd,
       current_thread_id,
       is_main_thread,
       remove_fd,
       maybe_start_closing_fd,
       dec_num_active_syscalls_fd,
       invariant,
       update_check_access,
       try_create_timerfd,
       default_handle_thread_pool_stu,
       thread_pool_has_unfinished_wor,
       thread_safe_wakeup_scheduler,
       i_am_the_scheduler,
       set_fd_desired_watching,
       give_up_on_watching,
       request_start_watching,
       request_stop_watching,
       post_check_got_timerfd,
       post_check_invalid_fd,
       post_check_handle_fd,
       cycle_took_longer_than_100us,
       maybe_report_long_async_cycles$0,
       create,
       reset_in_forked_process_withou,
       reset_in_forked_process,
       make_async_unusable,
       thread_safe_enqueue_external_j,
       have_lock_do_cycle$1,
       log_sync_changed_fds_to_file_d,
       sync_changed_fd_failed,
       sync_changed_fds_to_file_descr,
       maybe_calibrate_tsc,
       create_job,
       dump_core_on_job_delay,
       num_busy_pollers$1,
       add_busy_poller,
       init$0,
       fds_may_produce_events,
       check_file_descr_watcher,
       run_busy_pollers_once,
       run_busy_pollers,
       compute_timeout_and_check_file,
       one_iter,
       be_the_scheduler,
       add_finalizer,
       add_finalizer_exn,
       async_kernel_config_task_id,
       set_task_id,
       raise_if_any_jobs_were_schedul,
       is_running,
       go,
       go_main,
       is_the_one_and_only_running,
       report_long_cycle_times,
       set_check_invariants,
       set_detect_invalid_access_from,
       set_max_inter_cycle_timeout$0,
       t,
       with_t_once_started,
       fold_fields,
       handle_thread_pool_stuck$1,
       For_metrics,
       External];
   runtime.caml_register_global
    (230, Async_unix_Raw_scheduler, cst_Async_unix_Raw_scheduler$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__In_thread
//# unitInfo: Requires: Async_kernel__Clock_ns, Async_kernel__Ivar, Async_kernel__Pipe, Async_unix__Import, Async_unix__Interruptor, Async_unix__Raw_scheduler, Async_unix__Syscall, Core, Core__Linked_queue, Core__Option, Core__Result, Core__Sexp, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Squeue, Thread_pool, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_In_thread$0 = "Async_unix__In_thread",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    Thread_pool = global_data.Thread_pool,
    Time_ns_unix = global_data.Time_ns_unix,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Linked_queue = global_data.Core__Linked_queue,
    Squeue = global_data.Squeue,
    Async_unix_Syscall = global_data.Async_unix__Syscall,
    Core_Result = global_data.Core__Result,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_unix_Interruptor = global_data.Async_unix__Interruptor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Linux_ext = global_data.Linux_ext;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_In_thread$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/in_thread.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "in_thread.ml");
   var
    cst_Async_s_thread_pool_was_un =
      "Async's thread pool was unable to create a single thread",
    _a_ = [0, "Notify_the_scheduler"],
    _b_ = [0, "Take_the_async_lock"],
    _c_ = [0, "Try_to_take_the_async_lock"],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_In_thread = cst_Async_unix_In_thread$0;
   function sexp_of_t(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   var default$0 = [0, 2], When_finished = [0, all, sexp_of_t, default$0];
   function stuck_check_interval(param){
    return caml_call1(Time_ns_unix[72][82], 1.);
   }
   function schedule_stuck_check(t){
    var _F_ = caml_call1(Thread_pool[13], t[16]);
    t[18] = [0, caml_call1(Time_ns_unix[40], 0), _F_];
    var _G_ = stuck_check_interval(0);
    return caml_call3(Async_kernel_Clock_ns[2], _G_, check_still_stuck, t);
   }
   function check_still_stuck(t){
    var match = t[18];
    if(! match) return 0;
    if(! caml_call1(Thread_pool[14], t[16])){t[18] = 0; return 0;}
    var
     num_work_completed = match[2],
     stuck_since = match[1],
     _B_ = caml_call1(Thread_pool[13], t[16]);
    if(! caml_call2(Async_unix_Import[3], num_work_completed, _B_))
     return schedule_stuck_check(t);
    var
     _C_ = caml_call1(Time_ns_unix[40], 0),
     _D_ = caml_call2(Time_ns_unix[47], _C_, stuck_since);
    caml_call2(t[17], t[16], _D_);
    var _E_ = stuck_check_interval(0);
    return caml_call3(Async_kernel_Clock_ns[2], _E_, check_still_stuck, t);
   }
   function run(priority, thread, name, f){
    var when_finished = When_finished[3][1];
    function _l_(t){
     var ivar = caml_call1(Async_kernel_Ivar[12], 0);
     function doit(param){
      var result = caml_call1(Core_Result[54], f);
      switch(when_finished){
        case 0:
         var locked = 0; break;
        case 1:
         caml_call1(Async_unix_Raw_scheduler[82], t); var locked = 1; break;
        default:
         if(caml_call1(Async_unix_Raw_scheduler[81], t))
          var _z_ = 0;
         else
          var
           _A_ =
             caml_call1(Async_unix_Raw_scheduler[83], t)
              ? caml_call1
                 (Async_unix_Interruptor[7], t[14])
                ? (caml_call1(Async_unix_Raw_scheduler[84], t), 0)
                : 1
              : 0,
           _z_ = _A_;
         var locked = _z_;
      }
      if(locked){
       var
        _u_ =
          function(param){return caml_call1(Async_unix_Raw_scheduler[84], t);},
        _v_ =
          function(param){
           caml_call2(Async_kernel_Ivar[14], ivar, result);
           return caml_call1(Async_unix_Raw_scheduler[122], t);
          };
       return caml_call2(Core[259], _v_, _u_);
      }
      var _w_ = 0;
      function _x_(param){
       return caml_call2(Async_kernel_Ivar[14], ivar, result);
      }
      var _y_ = caml_call1(Async_unix_Raw_scheduler[79], t);
      return caml_call4(Async_unix_Raw_scheduler[121], t, _y_, _x_, _w_);
     }
     if(thread){
      var
       helper_thread = thread[1],
       _m_ =
         caml_call5
          (Thread_pool[18], priority, name, t[16], helper_thread, doit);
      caml_call1(Core[255], _m_);
     }
     else{
      var _p_ = caml_call4(Thread_pool[12], priority, name, t[16], doit);
      caml_call1(Core[255], _p_);
      var _q_ = caml_call1(Thread_pool[9], t[16]);
      if(caml_call2(Async_unix_Import[3], _q_, 0)){
       var _r_ = caml_call1(Thread_pool[20], t[16]), match = 0;
       if(_r_)
        var v = _r_[1], _s_ = [0, caml_call1(Core_Sexp[93], v), match];
       else
        var _s_ = match;
       var
        res =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Async_s_thread_pool_was_un),
           _s_];
       if(res[2]) var _t_ = [1, res]; else var h = res[1], _t_ = h;
       caml_call1(Core[261], _t_);
      }
     }
     if(caml_call1(Thread_pool[14], t[16]) && ! t[18])
      schedule_stuck_check(t);
     var _n_ = Core_Result[40], _o_ = caml_call1(Async_kernel_Ivar[19], ivar);
     return caml_call2(Async_unix_Import[32], _o_, _n_);
    }
    return caml_call1(Async_unix_Raw_scheduler[153], _l_);
   }
   function thread_pool_helper_thread(r){return r[1];}
   function create_internal(scheduler, thread_pool_helper_thread){
    function finalize(param){
     var thread_pool_helper_thread = param[1];
     return caml_call2
             (Thread_pool[19], scheduler[16], thread_pool_helper_thread);
    }
    var t = [0, thread_pool_helper_thread];
    caml_call3(Async_unix_Raw_scheduler[140], scheduler, t, finalize);
    return t;
   }
   function create_now(priority, name, param){
    var scheduler = caml_call1(Async_unix_Raw_scheduler[92], 0);
    function _j_(helper_thread){
     return create_internal(scheduler, helper_thread);
    }
    var _k_ = caml_call3(Thread_pool[16], priority, name, scheduler[16]);
    return caml_call2(Core_Result[46], _k_, _j_);
   }
   function create(priority, name, param){
    var scheduler = caml_call1(Async_unix_Raw_scheduler[92], 0);
    function _h_(helper_thread){
     return create_internal(scheduler, caml_call1(Core[255], helper_thread));
    }
    var
     _i_ =
       run
        (0,
         0,
         0,
         function(param){
          return caml_call3(Thread_pool[17], priority, name, scheduler[16]);
         });
    return caml_call2(Async_unix_Import[33][3], _i_, _h_);
   }
   function run$0(priority, thread, name, f){
    var
     thread$0 = caml_call2(Core_Option[34], thread, thread_pool_helper_thread);
    return run(priority, thread$0, name, f);
   }
   function syscall(name, f){
    return run$0
            (0,
             0,
             [0, name],
             function(param){return caml_call1(Async_unix_Syscall[1], f);});
   }
   function syscall_exn(name, f){
    return run$0
            (0,
             0,
             [0, name],
             function(param){
              var _g_ = caml_call1(Async_unix_Syscall[1], f);
              return caml_call1(Core_Result[40], _g_);
             });
   }
   function pipe_of_squeue(sq){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     w = match[2],
     r = match[1];
    function pull(param){
     var q = caml_call1(Core_Linked_queue[60], 0);
     caml_call2(Squeue[11], sq, q);
     return q;
    }
    function continue$0(q){
     var _e_ = caml_call1(Async_kernel_Pipe[30], w);
     caml_call2(Core_Linked_queue[15], q, _e_);
     var _f_ = caml_call1(Async_kernel_Pipe[28], w);
     return caml_call2(Async_unix_Import[27], _f_, loop);
    }
    function loop(param){
     var _d_ = run$0(0, 0, 0, pull);
     return caml_call2(Async_unix_Import[27], _d_, continue$0);
    }
    loop(0);
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_In_thread);
   var
    Async_unix_In_thread =
      [0,
       Linux_ext[53],
       [0, create, create_now],
       pipe_of_squeue,
       When_finished,
       run$0,
       syscall,
       syscall_exn];
   runtime.caml_register_global
    (35, Async_unix_In_thread, cst_Async_unix_In_thread$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring_raw_singleton
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel_config, Async_unix__Config, Async_unix__Io_uring_raw, Async_unix__Raw_scheduler, Core, Core__Error, Core__Info, Core__Int32, Core_unix, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_uring_raw_si$0 = "Async_unix__Io_uring_raw_singleton",
    cst_async_unix$0 = "async_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    arg0_005 = "unexpectedly stopped watching eventfd",
    arg0_001 = "unexpected result when asked to watch eventfd",
    Core = global_data.Core,
    Async_unix_Config = global_data.Async_unix__Config,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Async_kernel_config = global_data.Async_kernel_config,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Linux_ext = global_data.Linux_ext,
    Core_Int32 = global_data.Core__Int32,
    Core_Error = global_data.Core__Error,
    Core_unix = global_data.Core_unix,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Info = global_data.Core__Info,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring_raw_si$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/io_uring_raw_singleton.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "io_uring_raw_singleton.ml");
   var
    _i_ = [0, 0],
    _h_ = [0, 0],
    _g_ = [0, 0],
    _a_ = [0, "Bad_fd"],
    _b_ = [0, "Unsupported"],
    _c_ = [0, "Interrupted"],
    _d_ = [0, "Closed"],
    _e_ = [0, "Already_watching"],
    _f_ = [0, "Already_closed"],
    cst_io_uring_raw_eventfd = "io_uring_raw eventfd",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Io_uring_raw_si = cst_Async_unix_Io_uring_raw_si$0;
   function force_uring_exn(param){
    var
     _y_ = caml_call1(Async_kernel_config[2][5], Async_unix_Config[11]),
     uring = caml_call3(Async_unix_Io_uring_raw[9], 0, _y_, 0),
     _z_ = Linux_ext[34][4];
    if(0 === _z_[0]){
     var create_eventfd = _z_[1];
     if(0 !== uring[0]){
      var uring_error = uring[1];
      return caml_call1(Core_Error[30], uring_error);
     }
     var
      uring$0 = uring[1],
      _A_ = caml_call1(Core_Int32[5], 0),
      eventfd =
        caml_call2
         (create_eventfd,
          [0,
           caml_call2
            (Linux_ext[34][1][31], Linux_ext[34][1][40], Linux_ext[34][1][41])],
          _A_),
      _n_ = caml_call1(Linux_ext[34][7], eventfd);
     caml_call2(Async_unix_Io_uring_raw[12], uring$0, _n_);
     var
      _o_ =
        function(param){
         caml_call1(Async_unix_Io_uring_raw[13], uring$0);
         return 0;
        };
     caml_call1(Async_kernel_Async_kernel_sche[34][5], _o_);
     var
      _p_ = caml_call1(Sexplib0_Sexp_conv[7], cst_io_uring_raw_eventfd),
      _q_ = caml_call1(Core_Info[20], _p_),
      _r_ = caml_call1(Linux_ext[34][7], eventfd),
      fd = caml_call4(Async_unix_Raw_scheduler[95], 0, 1, _r_, _q_),
      _s_ = 0,
      _t_ =
        function(param){
         try{
          caml_call1(Linux_ext[34][5], eventfd);
          caml_call1(Async_unix_Io_uring_raw[15], uring$0);
          var _D_ = 0;
          return _D_;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          a:
          if(exn[1] === Core_unix[4]){
           var _C_ = exn[2];
           if(typeof _C_ === "number"){
            if(2 !== _C_ && 37 !== _C_) break a;
            return 0;
           }
          }
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        },
      _u_ = caml_call1(Async_unix_Raw_scheduler[92], 0),
      eventfd_ready_job =
        caml_call4(Async_unix_Raw_scheduler[127], 0, _u_, _t_, _s_),
      finished_watching = caml_call1(Async_kernel_Ivar[12], 0),
      _v_ = caml_call1(Async_unix_Raw_scheduler[92], 0),
      arg1_002 =
        caml_call4
         (Async_unix_Raw_scheduler[110],
          _v_,
          fd,
          914388854,
          [1, eventfd_ready_job, finished_watching]);
     if(-655995373 !== arg1_002){
      var
       res0_003 = caml_call1(Core[558], arg0_001),
       res1_004 = 233446106 <= arg1_002 ? _e_ : _f_;
      caml_call1(Core[261], [1, [0, res0_003, [0, res1_004, 0]]]);
     }
     var
      _w_ =
        function(arg1_006){
         var
          res0_007 = caml_call1(Core[558], arg0_005),
          res1_008 =
            -18684779 <= arg1_006
             ? -3286312 <= arg1_006 ? _a_ : _b_
             : -952706910 <= arg1_006 ? _c_ : _d_;
         return caml_call1(Core[261], [1, [0, res0_007, [0, res1_008, 0]]]);
        },
      _x_ = caml_call1(Async_kernel_Ivar[19], finished_watching);
     caml_call2(Async_kernel_Deferred[4], _x_, _w_);
     return [1, uring$0];
    }
    var eventfd_error = _z_[1];
    if(0 === uring[0]){
     var uring$1 = uring[1];
     caml_call1(Async_unix_Io_uring_raw[11], uring$1);
     return caml_call1(Core_Error[30], eventfd_error);
    }
    var
     uring_error$0 = uring[1],
     _B_ =
       caml_call1(Core_Error[26], [0, eventfd_error, [0, uring_error$0, 0]]);
    return caml_call1(Core_Error[30], _B_);
   }
   var
    global_io_uring =
      [246,
       function(_l_){
        switch(Async_unix_Config[12]){
          case 0:
           return _i_;
          case 1:
           return force_uring_exn(0);
          case 2:
           try{var _j_ = force_uring_exn(0); return _j_;}
           catch(_m_){return _g_;}
          default:
           var
            _k_ = caml_call1(Async_unix_Raw_scheduler[152], 0),
            match = caml_call1(Async_unix_Raw_scheduler[40], _k_);
           if(! match) return _h_;
           var uring = match[1];
           return [1, uring];
        }
       }];
   function the_one_and_only(param){
    var match = caml_call1(Core[248], global_io_uring);
    if(0 === match[0]) return 0;
    var io_uring = match[1];
    return [0, io_uring];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring_raw_si);
   var Async_unix_Io_uring_raw_single = [0, the_one_and_only];
   runtime.caml_register_global
    (37, Async_unix_Io_uring_raw_single, cst_Async_unix_Io_uring_raw_si$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Fd
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler, Async_unix__By_descr, Async_unix__Import, Async_unix__In_thread, Async_unix__Io_uring_raw, Async_unix__Io_uring_raw_singleton, Async_unix__Raw_fd, Async_unix__Raw_scheduler, Base__Exn, Core, Core__Info, Core__Memo, Core__Sexp, Core_unix, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Read_write_pair, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Fd$0 = "Async_unix__Fd",
    cst_async_unix$0 = "async_unix",
    cst_close$1 = "close",
    cst_fd = "fd",
    cst_fstat$1 = "fstat",
    cst_scheduler = "scheduler",
    cst_src_fd_ml = "src/fd.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Info = global_data.Core__Info,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Async_unix_Raw_fd = global_data.Async_unix__Raw_fd,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_unix_By_descr = global_data.Async_unix__By_descr,
    Async_unix_Import = global_data.Async_unix__Import,
    Base_Exn = global_data.Base__Exn,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_unix = global_data.Core_unix,
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Assert_failure = global_data.Assert_failure,
    Read_write_pair = global_data.Read_write_pair,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Memo = global_data.Core__Memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Fd$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_fd_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "fd.ml");
   var
    include = Async_unix_Raw_fd[7],
    kind = include[13],
    info = include[15],
    sexp_of_t = include[19],
    sexp_of_t_hum = include[20],
    debug = Async_unix_Raw_fd[1],
    is_closed = Async_unix_Raw_fd[34],
    is_open = Async_unix_Raw_fd[33],
    syscall = Async_unix_Raw_fd[40],
    syscall_exn = Async_unix_Raw_fd[41],
    syscall_result_exn = Async_unix_Raw_fd[42],
    with_file_descr = Async_unix_Raw_fd[39],
    with_file_descr_exn = Async_unix_Raw_fd[38],
    include$0 = Async_unix_Raw_fd[2],
    sexp_of_t$0 = include$0[1],
    _y_ = [0, "previously_was"],
    _v_ = [0, cst_scheduler],
    _w_ = [0, "kind"],
    _x_ = [0, cst_fd],
    cst_Fd_replace_got_closed_fd = "Fd.replace got closed fd",
    cst_replaced = "replaced",
    cst_File_descriptor_can_t_be_r =
      "File descriptor can't be redirected while in use",
    cst_Fd_file_descr_exn_on_alrea = "Fd.file_descr_exn on already closed fd",
    cst_of_out_channel = "<of_out_channel>",
    cst_of_in_channel = "<of_in_channel>",
    cst_Fd_syscall_in_thread_exn_o = "Fd.syscall_in_thread_exn of a closed fd",
    cst_Fd_syscall_in_thread_probl =
      "Fd.syscall_in_thread problem -- please report this",
    _u_ = [0, cst_src_fd_ml, 342, 40],
    cst_Fd_every_ready_to = "Fd.every_ready_to",
    cst_Fd_interruptible_every_rea = "Fd.interruptible_every_ready_to",
    _t_ = [0, cst_src_fd_ml, 310, 40],
    cst_Fd_ready_to = "Fd.ready_to",
    cst_Fd_interruptible_ready_to = "Fd.interruptible_ready_to",
    _r_ = [0, cst_scheduler],
    _s_ = [0, cst_fd],
    cst_cannot_watch_an_fd_already =
      "cannot watch an fd already being watched",
    cst_Fd_start_watching = "Fd.start_watching",
    cst_Fd_with_file_descr_deferre =
      "Fd.with_file_descr_deferred_exn got closed fd",
    _p_ = [0, 3804260],
    _q_ = [0, 523273847],
    _o_ = [0, 523273847],
    _l_ = [0, 0],
    _m_ = [0, 523273847],
    _n_ = [0, "Fd.create_borrowed"],
    _k_ = [0, 0],
    cst_shutdown = "shutdown",
    _i_ = [0, 523273847],
    _j_ = [0, 0],
    cst_Fd_close = "Fd.close",
    _g_ = [0, cst_src_fd_ml, 149, 8],
    _h_ = [0, cst_fd],
    cst_close = cst_close$1,
    cst_close$0 = cst_close$1,
    cst_stderr = "<stderr>",
    cst_stdout = "<stdout>",
    cst_stdin = "<stdin>",
    _c_ = [0, 1],
    cst_fstat$0 = cst_fstat$1,
    _a_ = [0, cst_src_fd_ml, 67, 6],
    _b_ = [0, "file_descr"],
    cst_fstat = cst_fstat$1,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Fd = cst_Async_unix_Fd$0;
   function get_socket_state(file_descr){
    try{var val = caml_call2(Core_unix[244], file_descr, 6);}
    catch(_bh_){
     var _bf_ = caml_wrap_exception(_bh_);
     if(_bf_[1] === Core_unix[4]){
      var _bg_ = _bf_[2];
      if(typeof _bg_ === "number" && 44 === _bg_) return 785140586;
     }
     throw caml_maybe_attach_backtrace(_bf_, 0);
    }
    return val ? -893685881 : -891636250;
   }
   function blocking_infer_using_stat(file_descr){
    var st = caml_call1(Core_unix[75], file_descr), kind = st[3];
    switch(kind){
      case 2:
       return 0;
      case 5:
       return 1;
      case 6:
       return [0, get_socket_state(file_descr)];
      default: return 2;
    }
   }
   function infer_using_stat(file_descr){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      statx_buffer = caml_call1(Async_unix_Io_uring_raw[4][1], 0),
      _a$_ =
        function(param){
         if(0 !== param[0]){
          var
           err = param[1],
           _bd_ =
             [1,
              [0,
               [1,
                [0,
                 _b_,
                 [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
               0]],
           _be_ = caml_call1(Core_unix[10][1], _bd_);
          throw caml_maybe_attach_backtrace
                 ([0, Core_unix[4], err, cst_fstat, _be_], 0);
         }
         var res = param[1];
         if(! caml_call2(Async_unix_Import[3], res, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
         var kind = caml_call1(Async_unix_Io_uring_raw[4][30], statx_buffer);
         if(215595176 <= kind){
          if(781514092 === kind) return 1;
          if(785140586 === kind) return 2;
         }
         else if(-495690425 !== kind)
          return -74006461 <= kind ? 0 : [0, get_socket_state(file_descr)];
         return 2;
        },
      _ba_ =
        caml_call6
         (Async_unix_Io_uring_raw[27],
          uring,
          [0, file_descr],
          Async_unix_Io_uring_raw[4][4][4],
          cst,
          statx_buffer,
          Async_unix_Io_uring_raw[4][2][5]),
      _bb_ = caml_call1(Async_unix_Io_uring_raw[29], _ba_);
     return caml_call2(Async_unix_Import[33][3], _bb_, _a$_);
    }
    function _bc_(param){return blocking_infer_using_stat(file_descr);}
    return caml_call2(Async_unix_In_thread[7], cst_fstat$0, _bc_);
   }
   function to_string(t){
    var _a__ = caml_call1(Async_unix_Raw_fd[25], t);
    return caml_call2(Core_Sexp[84], 0, _a__);
   }
   function the_one_and_only(param){
    return caml_call1(Async_unix_Raw_scheduler[92], 0);
   }
   function create(avoid_setting_nonblock, kind, file_descr, info){
    return caml_call4
            (Async_unix_Raw_scheduler[95],
             avoid_setting_nonblock,
             kind,
             file_descr,
             info);
   }
   function create_std_descr(file_descr, info){
    return create
            (_c_, blocking_infer_using_stat(file_descr), file_descr, info);
   }
   function _d_(param){
    var _a9_ = caml_call1(Core_Info[14], cst_stdin);
    return create_std_descr(Core_unix[42], _a9_);
   }
   var stdin = caml_call1(Core_Memo[3], _d_);
   function _e_(param){
    var _a8_ = caml_call1(Core_Info[14], cst_stdout);
    return create_std_descr(Core_unix[43], _a8_);
   }
   var stdout = caml_call1(Core_Memo[3], _e_);
   function _f_(param){
    var _a7_ = caml_call1(Core_Info[14], cst_stderr);
    return create_std_descr(Core_unix[44], _a7_);
   }
   var stderr = caml_call1(Core_Memo[3], _f_);
   function supports_nonblock(t){return caml_call1(Async_unix_Raw_fd[36], t);}
   function clear_nonblock(t){
    t[4] = 0;
    return t[5] ? (t[5] = 0, caml_call1(Core_unix[99], t[1])) : 0;
   }
   function close(opt, t){
    if(opt)
     var sth = opt[1], file_descriptor_handling = sth;
    else
     var file_descriptor_handling = _j_;
    if(debug)
     caml_call3
      (Async_kernel_Debug[15], cst_Fd_close, t, Async_unix_Raw_fd[25]);
    var match = t[6];
    a:
    if(typeof match !== "number" && 1 === match[0]){
     var close_started = match[1];
     caml_call2(Async_kernel_Ivar[14], close_started, 0);
     var
      do_close_syscall =
        function(param){
         function _aT_(param){
          return caml_call2(Async_kernel_Ivar[14], t[10], 0);
         }
         if(file_descriptor_handling)
          var
           socket_handling = file_descriptor_handling[1],
           _aU_ =
             function(param){
              var
               file_descr = t[1],
               match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
              if(match){
               var
                uring = match[1],
                _a1_ =
                  function(param){
                   if(0 !== param[0]){
                    var
                     err = param[1],
                     _a5_ =
                       [1,
                        [0,
                         [1,
                          [0,
                           _h_,
                           [0, caml_call1(Core_unix_File_descr[2], file_descr), 0]]],
                         0]],
                     _a6_ = caml_call1(Core_unix[10][1], _a5_);
                    throw caml_maybe_attach_backtrace
                           ([0, Core_unix[4], err, cst_close, _a6_], 0);
                   }
                   var result = param[1];
                   if(caml_call2(Async_unix_Import[3], result, 0)) return 0;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _g_], 1);
                  },
                _a2_ =
                  caml_call2(Async_unix_Io_uring_raw[23], uring, file_descr),
                _a3_ = caml_call1(Async_unix_Io_uring_raw[29], _a2_);
               return caml_call2(Async_unix_Import[32], _a3_, _a1_);
              }
              function _a4_(param){
               return caml_call2(Core_unix[53], 0, file_descr);
              }
              return caml_call2(Async_unix_In_thread[7], cst_close$0, _a4_);
             },
           _aV_ =
             function(param){
              var _aY_ = t[3];
              if(typeof _aY_ !== "number"){
               var _aZ_ = _aY_[1];
               if
                (typeof _aZ_ === "number"
                 && -891636250 === _aZ_ && ! socket_handling){
                var
                 _a0_ =
                   function(param){return caml_call2(Core_unix[227], t[1], 2);};
                return caml_call2(Async_unix_In_thread[7], cst_shutdown, _a0_);
               }
              }
              return caml_call1(Async_unix_Import[30], 0);
             },
           _aW_ =
             caml_call8
              (Async_kernel_Monitor[23], 0, 0, 0, 0, _i_, 0, _aV_, _aU_);
         else
          var _aW_ = caml_call1(Async_unix_Import[30], 0);
         var _aX_ = caml_call2(Async_unix_Import[33][3], _aW_, _aT_);
         return caml_call1(Async_unix_Import[16], _aX_);
        },
      scheduler = the_one_and_only(0),
      kernel_scheduler = scheduler[21],
      _aS_ =
        [0,
         caml_call1(Async_kernel_Scheduler[4], kernel_scheduler),
         do_close_syscall];
     caml_call2(Async_unix_Raw_fd[32], t, _aS_);
     caml_call4
      (Async_unix_Raw_scheduler[111], scheduler, t, 914388854, -1025106484);
     caml_call4
      (Async_unix_Raw_scheduler[111], scheduler, t, -477700929, -1025106484);
     caml_call2(Async_unix_Raw_scheduler[99], scheduler, t);
     break a;
    }
    return caml_call1(Async_kernel_Ivar[19], t[10]);
   }
   function deregister(t){return close(_k_, t);}
   function close_finished(t){
    return caml_call1(Async_kernel_Ivar[19], t[10]);
   }
   function close_started(t){
    var match = t[6];
    if(typeof match !== "number" && 1 === match[0]){
     var close_started = match[1];
     return caml_call1(Async_kernel_Ivar[19], close_started);
    }
    return caml_call1(Async_unix_Import[30], 0);
   }
   function create_borrowed(avoid_setting_nonblock, kind, file_descr, info, f){
    var fd = create(avoid_setting_nonblock, kind, file_descr, info);
    function _aQ_(param){return close(_l_, fd);}
    function _aR_(param){return caml_call1(f, fd);}
    return caml_call8
            (Async_kernel_Monitor[23], 0, 0, _n_, 0, _m_, 0, _aR_, _aQ_);
   }
   function with_close(t, f){
    function _aO_(param){return close(0, t);}
    function _aP_(param){return caml_call1(f, t);}
    return caml_call8
            (Async_kernel_Monitor[23], 0, 0, 0, 0, _o_, 0, _aP_, _aO_);
   }
   function with_file_descr_deferred(t, opt, f){
    if(opt) var sth = opt[1], extract_exn = sth; else var extract_exn = 0;
    if(17724 > caml_call1(Async_unix_Raw_fd[31], t))
     return caml_call1(Async_unix_Import[30], -1034200365);
    function _aK_(result){
     var _aN_ = the_one_and_only(0);
     caml_call2(Async_unix_Raw_scheduler[100], _aN_, t);
     if(0 === result[0]){var x = result[1]; return [0, 17724, x];}
     var e = result[1];
     return [0, 106380200, e];
    }
    function _aL_(param){return caml_call1(f, t[1]);}
    var
     _aM_ =
       caml_call7
        (Async_kernel_Monitor[16], 0, 0, 0, [0, extract_exn], _q_, _p_, _aL_);
    return caml_call2(Async_unix_Import[33][3], _aM_, _aK_);
   }
   function with_file_descr_deferred_resul(t, f){
    function _aI_(param){
     if(typeof param === "number") return -1034200365;
     if(106380200 <= param[1]){
      var exn = param[2];
      return [0, 106380200, exn];
     }
     var match = param[2];
     if(0 === match[0]){var x = match[1]; return [0, 17724, x];}
     var exn$0 = match[1];
     return [0, 106380200, exn$0];
    }
    var _aJ_ = with_file_descr_deferred(t, 0, f);
    return caml_call2(Async_unix_Import[33][3], _aJ_, _aI_);
   }
   function with_file_descr_deferred_exn(t, f){
    function _aE_(param){
     if(typeof param === "number"){
      var
       _aG_ = [0, caml_call1(Async_unix_Raw_fd[26], t), 0],
       _aH_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_with_file_descr_deferre),
           _aG_]];
      return caml_call1(Core[261], _aH_);
     }
     if(106380200 <= param[1]){
      var exn = param[2];
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var x = param[2];
     return x;
    }
    var _aF_ = with_file_descr_deferred(t, 0, f);
    return caml_call2(Async_unix_Import[33][3], _aF_, _aE_);
   }
   function start_watching(t, read_or_write, watching){
    if(debug){
     var
      _aA_ =
        function(param){
         var
          arg1_004 = param[2],
          arg0_003 = param[1],
          res0_005 = caml_call1(Async_unix_Raw_fd[25], arg0_003),
          res1_006 = caml_call1(Read_write_pair[1][1], arg1_004);
         return [1, [0, res0_005, [0, res1_006, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Fd_start_watching,
       [0, t, read_or_write],
       _aA_);
    }
    var
     r = the_one_and_only(0),
     x =
       caml_call4
        (Async_unix_Raw_scheduler[110], r, t, read_or_write, watching);
    if(233446106 > x) return x;
    var
     _aB_ =
       [0,
        [1, [0, _r_, [0, caml_call1(Async_unix_Raw_scheduler[76], r), 0]]],
        0],
     _aC_ =
       [0, [1, [0, _s_, [0, caml_call1(Async_unix_Raw_fd[25], t), 0]]], _aB_],
     _aD_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_watch_an_fd_already),
         _aC_]];
    return caml_call1(Core[261], _aD_);
   }
   function stop_watching_upon_interrupt(t, read_or_write, ivar, interrupt){
    function _aq_(param){
     if(840474678 <= param) return 0;
     var _ay_ = caml_call1(Async_kernel_Ivar[17], ivar);
     if(! _ay_) return _ay_;
     var _az_ = the_one_and_only(0);
     return caml_call4
             (Async_unix_Raw_scheduler[111],
              _az_,
              t,
              read_or_write,
              -952706910);
    }
    var _ar_ = 0;
    function _as_(param){return 840474678;}
    var
     _at_ = caml_call1(Async_kernel_Ivar[19], ivar),
     _au_ = [0, caml_call2(Async_unix_Import[14], _at_, _as_), _ar_];
    function _av_(param){return -952706910;}
    var
     _aw_ = [0, caml_call2(Async_unix_Import[14], interrupt, _av_), _au_],
     _ax_ = caml_call1(Async_unix_Import[15], _aw_);
    return caml_call2(Async_unix_Import[22], _ax_, _aq_);
   }
   function interruptible_ready_to(t, read_or_write, interrupt){
    if(debug){
     var
      _am_ =
        function(param){
         var
          arg1_008 = param[2],
          arg0_007 = param[1],
          res0_009 = caml_call1(Async_unix_Raw_fd[25], arg0_007),
          res1_010 = caml_call1(Read_write_pair[1][1], arg1_008);
         return [1, [0, res0_009, [0, res1_010, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Fd_interruptible_ready_to,
       [0, t, read_or_write],
       _am_);
    }
    var
     ready = caml_call1(Async_kernel_Ivar[12], 0),
     match = start_watching(t, read_or_write, [0, ready]);
    if(-655995373 === match){
     stop_watching_upon_interrupt(t, read_or_write, ready, interrupt);
     var
      _an_ =
        function(res){
         return -18684779 === res
                 ? caml_call1
                    (Async_kernel_Deferred[7], interrupt)
                   ? -952706910
                   : -102231997
                 : res;
        },
      _ao_ = caml_call1(Async_kernel_Ivar[19], ready);
     return caml_call2(Async_kernel_Deferred[13], _ao_, _an_);
    }
    if(-18684779 > match)
     return caml_call1(Async_unix_Import[30], -1025106484);
    var
     _ap_ =
       caml_call1(Async_kernel_Deferred[7], interrupt)
        ? -952706910
        : -102231997;
    return caml_call1(Async_unix_Import[30], _ap_);
   }
   function ready_to(t, read_or_write){
    if(debug){
     var
      _aj_ =
        function(param){
         var
          arg1_012 = param[2],
          arg0_011 = param[1],
          res0_013 = caml_call1(Async_unix_Raw_fd[25], arg0_011),
          res1_014 = caml_call1(Read_write_pair[1][1], arg1_012);
         return [1, [0, res0_013, [0, res1_014, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15], cst_Fd_ready_to, [0, t, read_or_write], _aj_);
    }
    var
     ready = caml_call1(Async_kernel_Ivar[12], 0),
     match = start_watching(t, read_or_write, [0, ready]);
    if(-655995373 !== match)
     return -18684779 <= match
             ? caml_call1(Async_unix_Import[30], -102231997)
             : caml_call1(Async_unix_Import[30], -1025106484);
    function _ak_(x){
     if(-952706910 === x)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
     return -18684779 === x ? -102231997 : x;
    }
    var _al_ = caml_call1(Async_kernel_Ivar[19], ready);
    return caml_call2(Async_unix_Import[33][3], _al_, _ak_);
   }
   function interruptible_every_ready_to(t, read_or_write, interrupt, f, x){
    if(debug){
     var
      _ah_ =
        function(param){
         var
          arg1_016 = param[2],
          arg0_015 = param[1],
          res0_017 = caml_call1(Async_unix_Raw_fd[25], arg0_015),
          res1_018 = caml_call1(Read_write_pair[1][1], arg1_016);
         return [1, [0, res0_017, [0, res1_018, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Fd_interruptible_every_rea,
       [0, t, read_or_write],
       _ah_);
    }
    var
     _ai_ = caml_call1(Async_unix_Raw_scheduler[152], 0),
     job =
       caml_call2(caml_call2(Async_unix_Raw_scheduler[127], 0, _ai_), f, x),
     finished = caml_call1(Async_kernel_Ivar[12], 0),
     match = start_watching(t, read_or_write, [1, job, finished]);
    return -655995373 === match
            ? (stop_watching_upon_interrupt
               (t, read_or_write, finished, interrupt),
              caml_call1(Async_kernel_Ivar[19], finished))
            : -18684779
              <= match
              ? caml_call1(Async_unix_Import[30], -18684779)
              : caml_call1(Async_unix_Import[30], -1025106484);
   }
   function every_ready_to(t, read_or_write, f, x){
    if(debug){
     var
      _ad_ =
        function(param){
         var
          arg1_020 = param[2],
          arg0_019 = param[1],
          res0_021 = caml_call1(Async_unix_Raw_fd[25], arg0_019),
          res1_022 = caml_call1(Read_write_pair[1][1], arg1_020);
         return [1, [0, res0_021, [0, res1_022, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Fd_every_ready_to,
       [0, t, read_or_write],
       _ad_);
    }
    var
     _ae_ = caml_call1(Async_unix_Raw_scheduler[152], 0),
     job =
       caml_call2(caml_call2(Async_unix_Raw_scheduler[127], 0, _ae_), f, x),
     finished = caml_call1(Async_kernel_Ivar[12], 0),
     match = start_watching(t, read_or_write, [1, job, finished]);
    if(-655995373 !== match)
     return -18684779 <= match
             ? caml_call1(Async_unix_Import[30], -18684779)
             : caml_call1(Async_unix_Import[30], -1025106484);
    function _af_(x){
     if(-952706910 === x)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
     return x;
    }
    var _ag_ = caml_call1(Async_kernel_Ivar[19], finished);
    return caml_call2(Async_unix_Import[33][3], _ag_, _af_);
   }
   function syscall_in_thread(t, name, f){
    function _Z_(param){
     if(typeof param === "number") return -1034200365;
     if(106380200 <= param[1]){
      var
       e = param[2],
       _aa_ = [0, caml_call1(Core[625], e), 0],
       _ab_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name), _aa_],
       _ac_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_syscall_in_thread_probl),
           _ab_]];
      return caml_call1(Core[261], _ac_);
     }
     var x = param[2];
     if(0 === x[0]){var x$0 = x[1]; return [0, 17724, x$0];}
     var exn = x[1];
     return [0, 106380200, exn];
    }
    var
     ___ =
       with_file_descr_deferred
        (t,
         0,
         function(file_descr){
          function _$_(param){return caml_call1(f, file_descr);}
          return caml_call2(Async_unix_In_thread[6], name, _$_);
         });
    return caml_call2(Async_unix_Import[33][3], ___, _Z_);
   }
   function syscall_in_thread_exn(t, name, f){
    function _U_(param){
     if(typeof param === "number"){
      var
       _W_ = [0, caml_call1(Async_unix_Raw_fd[26], t), 0],
       _X_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name), _W_],
       _Y_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_syscall_in_thread_exn_o),
           _X_]];
      return caml_call1(Core[261], _Y_);
     }
     if(106380200 <= param[1]){
      var exn = param[2];
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var x = param[2];
     return x;
    }
    var _V_ = syscall_in_thread(t, name, f);
    return caml_call2(Async_unix_Import[33][3], _V_, _U_);
   }
   function of_in_channel(ic, kind){
    var _T_ = caml_call1(Core_Info[14], cst_of_in_channel);
    return create(0, kind, caml_call1(Core_unix[62], ic), _T_);
   }
   function of_out_channel(oc, kind){
    var _S_ = caml_call1(Core_Info[14], cst_of_out_channel);
    return create(0, kind, caml_call1(Core_unix[63], oc), _S_);
   }
   function of_in_channel_auto(ic){
    function _P_(_R_){return of_in_channel(ic, _R_);}
    var _Q_ = infer_using_stat(caml_call1(Core_unix[62], ic));
    return caml_call2(Async_unix_Import[32], _Q_, _P_);
   }
   function of_out_channel_auto(oc){
    function _M_(_O_){return of_out_channel(oc, _O_);}
    var _N_ = infer_using_stat(caml_call1(Core_unix[63], oc));
    return caml_call2(Async_unix_Import[32], _N_, _M_);
   }
   function file_descr_exn(t){
    if(! caml_call1(is_closed, t)) return t[1];
    var
     _K_ = [0, caml_call1(Async_unix_Raw_fd[25], t), 0],
     _L_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_file_descr_exn_on_alrea),
         _K_]];
    return caml_call1(Core[261], _L_);
   }
   function to_int_exn(t){
    var _J_ = file_descr_exn(t);
    return caml_call1(Core_unix_File_descr[15], _J_);
   }
   function expect_file_descr_redirection(file_descr, f){
    var
     _I_ = the_one_and_only(0),
     fd_by_descr = caml_call1(Async_unix_Raw_scheduler[65], _I_),
     match = caml_call2(Async_unix_By_descr[7], fd_by_descr, file_descr);
    if(! match) return caml_call1(f, 0);
    var fd = match[1];
    if(caml_call2(Async_unix_Import[4], fd[9], 0)){
     var
      _F_ = [0, caml_call1(Async_unix_Raw_fd[25], fd), 0],
      _G_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_File_descriptor_can_t_be_r),
          _F_]];
     caml_call1(Core[261], _G_);
    }
    function _H_(param){fd[3] = blocking_infer_using_stat(fd[1]); return 0;}
    return caml_call2(Base_Exn[13], f, _H_);
   }
   function replace(t, kind, info){
    if(caml_call1(is_closed, t)){
     var
      _z_ = the_one_and_only(0),
      _A_ =
        [0,
         [1, [0, _v_, [0, caml_call1(Async_unix_Raw_scheduler[76], _z_), 0]]],
         0],
      _B_ = [0, [1, [0, _w_, [0, caml_call1(sexp_of_t$0, kind), 0]]], _A_],
      _C_ =
        [0, [1, [0, _x_, [0, caml_call1(Async_unix_Raw_fd[25], t), 0]]], _B_],
      _D_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_replace_got_closed_fd),
          _C_]];
     return caml_call1(Core[261], _D_);
    }
    t[3] = kind;
    if(4150146 <= info[1])
     var i = info[2], i$0 = i;
    else
     var
      i$1 = info[2],
      _E_ =
        function(param){
         var
          arg1_025 = param[2],
          arg0_024 = param[1],
          res0_026 = caml_call1(Core_Info[9], arg0_024),
          v_023 = arg1_025[2],
          res1_027 = [1, [0, _y_, [0, caml_call1(Core_Info[9], v_023), 0]]];
         return [1, [0, res0_026, [0, res1_027, 0]]];
        },
      i$0 =
        caml_call5
         (Core_Info[19],
          0,
          0,
          cst_replaced,
          [0, i$1, [0, -751874386, t[2]]],
          _E_);
    t[2] = i$0;
    return 0;
   }
   var Private = [0, replace];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Fd);
   var
    Async_unix_Fd =
      [0,
       [0, sexp_of_t$0, infer_using_stat],
       sexp_of_t,
       sexp_of_t_hum,
       info,
       to_string,
       create,
       create_borrowed,
       kind,
       supports_nonblock,
       clear_nonblock,
       [0, close, deregister],
       close,
       deregister,
       close_started,
       close_finished,
       is_closed,
       with_close,
       is_open,
       stdin,
       stdout,
       stderr,
       with_file_descr,
       with_file_descr_exn,
       with_file_descr_deferred,
       with_file_descr_deferred_resul,
       with_file_descr_deferred_exn,
       interruptible_ready_to,
       ready_to,
       interruptible_every_ready_to,
       every_ready_to,
       syscall,
       syscall_exn,
       syscall_result_exn,
       syscall_in_thread,
       syscall_in_thread_exn,
       of_in_channel,
       of_out_channel,
       of_in_channel_auto,
       of_out_channel_auto,
       file_descr_exn,
       to_int_exn,
       expect_file_descr_redirection,
       Private];
   runtime.caml_register_global(80, Async_unix_Fd, cst_Async_unix_Fd$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Writer_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Writer_intf = "Async_unix__Writer_intf",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Writer_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/writer_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix, "writer_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Writer_intf);
   var Async_unix_Writer_intf = [0];
   runtime.caml_register_global
    (11, Async_unix_Writer_intf, cst_Async_unix_Writer_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Backing_out_channel
//# unitInfo: Requires: Async_kernel__Async_invariant, Async_unix__Import, Core__Bigstring, Core__Bytes, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio__Out_channel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Backing_out_cha$0 = "Async_unix__Backing_out_channel",
    cst_async_unix$0 = "async_unix",
    cst_src_backing_out_channel_ml = "src/backing_out_channel.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_unix_Import = global_data.Async_unix__Import,
    Core_Bytes = global_data.Core__Bytes,
    Core_Bigstring = global_data.Core__Bigstring,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Async_kernel_Async_invariant = global_data.Async_kernel__Async_invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Backing_out_cha$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_backing_out_channel_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "backing_out_channel.ml");
   var
    _b_ = [0, "out_channel"],
    _a_ = [0, cst_src_backing_out_channel_ml, 14, 237, 259],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Backing_out_cha = cst_Async_unix_Backing_out_cha$0;
   function sexp_of_t(t){return caml_call1(t[3], 0);}
   function invariant(t){
    function _e_(param){return 0;}
    return caml_call4(Async_kernel_Async_invariant[1], _a_, t, sexp_of_t, _e_);
   }
   function create(output, flush, sexp){return [0, output, flush, sexp];}
   function of_out_channel(out_channel){
    var bytes_buf = [0, caml_call1(Core_Bytes[40], cst)];
    function _c_(param){
     return [1,
             [0,
              [1,
               [0, _b_, [0, caml_call1(Stdio_Out_channel[1], out_channel), 0]]],
              0]];
    }
    function _d_(param){
     return caml_call1(Stdio_Out_channel[10], out_channel);
    }
    return [0,
            function(buf, pos, len){
             if
              (caml_call2
                (Async_unix_Import[4],
                 len,
                 runtime.caml_ml_bytes_length(bytes_buf[1])))
              bytes_buf[1] = caml_call1(Core_Bytes[44], len * 2 | 0);
             caml_call5(Core_Bigstring[30][1], buf, pos, bytes_buf[1], 0, len);
             return caml_call4
                     (Stdio_Out_channel[11], out_channel, bytes_buf[1], 0, len);
            },
            _d_,
            _c_];
   }
   function output_iovec(t, iovec){
    return caml_call3(t[1], iovec[1], iovec[2], iovec[3]);
   }
   function flush(t){return caml_call1(t[2], 0);}
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Backing_out_cha);
   var
    Async_unix_Backing_out_channel =
      [0, sexp_of_t, invariant, of_out_channel, create, output_iovec, flush];
   runtime.caml_register_global
    (22, Async_unix_Backing_out_channel, cst_Async_unix_Backing_out_cha$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_uring
//# unitInfo: Requires: Async_unix__Fd, Async_unix__Import, Async_unix__Io_uring_raw, Async_unix__Io_uring_raw_singleton, Async_unix__Raw_scheduler, Core, Core__Array, Core__Info, Core__List, Core__Option, Core_unix, Core_unix__File_descr, Cstruct, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_Async_unix_Io_uring$0 = "Async_unix__Io_uring",
    cst_async_unix$0 = "async_unix",
    cst_fd = "fd",
    cst_filename = "filename",
    cst_fstat$1 = "fstat",
    cst_open$1 = "open",
    cst_read$1 = "read",
    cst_readv$1 = "readv",
    cst_src_io_uring_ml = "src/io_uring.ml",
    cst_statx$1 = "statx",
    cst_unlink$1 = "unlink",
    cst_write$1 = "write",
    cst_writev$1 = "writev",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$2 = cst$4,
    cst$1 = cst$4,
    cst$0 = cst$4,
    cst = cst$4,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Core = global_data.Core,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Core_unix = global_data.Core_unix,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Assert_failure = global_data.Assert_failure,
    Core_Info = global_data.Core__Info,
    Core_Option = global_data.Core__Option,
    Cstruct = global_data.Cstruct,
    Core_Array = global_data.Core__Array,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_uring$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_io_uring_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "io_uring.ml");
   var
    create = Async_unix_Io_uring_raw[9],
    exit = Async_unix_Io_uring_raw[11],
    submit = Async_unix_Io_uring_raw[13],
    fill_completions = Async_unix_Io_uring_raw[15],
    the_one_and_only = Async_unix_Io_uring_raw_single[1],
    cst_syscall_interrupted_too_ma = "syscall interrupted too many times",
    _o_ = [0, cst_filename],
    cst_lstat = "lstat",
    _n_ = [0, cst_fd],
    cst_fstat = cst_fstat$1,
    cst_fstat$0 = cst_fstat$1,
    _m_ = [0, cst_filename],
    cst_stat = "stat",
    _k_ = [0, "path"],
    _l_ = [0, cst_fd],
    cst_statx = cst_statx$1,
    cst_statx$0 = cst_statx$1,
    _j_ = [0, cst_src_io_uring_ml, 183, 4],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _f_ = [0, 0],
    cst_link = "link",
    _d_ = [0, "link_name"],
    _e_ = [0, "target"],
    _i_ = [0, 0],
    _c_ = [0, 0],
    _b_ = [0, cst_filename],
    cst_unlink = cst_unlink$1,
    cst_unlink$0 = cst_unlink$1,
    cst_open = cst_open$1,
    cst_open$0 = cst_open$1,
    cst_writev = cst_writev$1,
    cst_writev$0 = cst_writev$1,
    cst_readv = cst_readv$1,
    cst_readv$0 = cst_readv$1,
    cst_write = cst_write$1,
    cst_write$0 = cst_write$1,
    cst_read$0 = cst_read$1,
    cst_read = cst_read$1,
    cst_Fd_syscall_in_thread_exn_o = "Fd.syscall_in_thread_exn of a closed fd",
    _a_ = [0, 1],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Io_uring = cst_Async_unix_Io_uring$0,
    max_tries = 1000;
   function attempt_syscall_internal(f, count){
    if(caml_call2(Async_unix_Import[3], count, max_tries))
     caml_call1(Core[6], cst_syscall_interrupted_too_ma);
    function _aA_(param){
     if(0 === param[0]){
      var result = param[1];
      return caml_call1(Async_unix_Import[30], [0, result]);
     }
     var err = param[1];
     if(typeof err === "number" && 11 === err){
      var
       _aD_ =
         function(param){return attempt_syscall_internal(f, count + 1 | 0);},
       _aE_ = caml_call1(Async_unix_Raw_scheduler[33], 0);
      return caml_call2(Async_unix_Import[33][2], _aE_, _aD_);
     }
     return caml_call1(Async_unix_Import[30], [1, err]);
    }
    var
     _aB_ = caml_call1(f, 0),
     _aC_ = caml_call1(Async_unix_Io_uring_raw[29], _aB_);
    return caml_call2(Async_unix_Import[33][2], _aC_, _aA_);
   }
   function attempt_syscall(f){return attempt_syscall_internal(f, 0);}
   function with_file_descr_deferred(name, fd, f){
    function _at_(param){
     if(typeof param === "number"){
      try{
       var
        _aw_ = [0, caml_call1(Async_unix_Fd[3], fd), 0],
        _ax_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name), _aw_],
        _ay_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_Fd_syscall_in_thread_exn_o),
            _ax_]],
        _az_ = caml_call1(Core[261], _ay_),
        exn$0 = _az_;
      }
      catch(exn$1){var exn = caml_wrap_exception(exn$1), exn$0 = exn;}
      return [1, exn$0];
     }
     if(106380200 <= param[1]){
      var exn$1 = param[2];
      throw caml_maybe_attach_backtrace(exn$1, 0);
     }
     var ok = param[2];
     return ok;
    }
    function _au_(fd){return caml_call1(f, fd);}
    var _av_ = caml_call3(Async_unix_Fd[24], fd, _a_, _au_);
    return caml_call2(Async_unix_Import[33][3], _av_, _at_);
   }
   function with_file_descr_deferred_opt(name, fd_opt, f){
    if(! fd_opt) return caml_call1(f, 0);
    var fd = fd_opt[1];
    return with_file_descr_deferred
            (name, fd, function(fd){return caml_call1(f, [0, fd]);});
   }
   function read_file_descr(t, opt, file_descr, off, len, buf){
    if(opt) var sth = opt[1], file_offset = sth; else var file_offset = -1;
    function _ap_(param){
     if(0 === param[0]){var res = param[1]; return [0, res];}
     var err = param[1];
     return [1, [0, Core_unix[4], err, cst_read, cst]];
    }
    var
     _aq_ =
       attempt_syscall
        (function(param){
          var
           _ar_ = caml_call3(Cstruct[3], off, len, buf),
           _as_ = caml_call1(Async_unix_Io_uring_raw[1][1], file_offset);
          return caml_call4
                  (Async_unix_Io_uring_raw[17], t, _as_, file_descr, _ar_);
         });
    return caml_call2(Async_unix_Import[33][3], _aq_, _ap_);
   }
   function read(t, opt, fd, off, len, buf){
    if(opt) var sth = opt[1], file_offset = sth; else var file_offset = -1;
    return with_file_descr_deferred
            (cst_read$0,
             fd,
             function(fd){
              return read_file_descr(t, [0, file_offset], fd, off, len, buf);
             });
   }
   function write(t, opt, fd, off, len, buf){
    if(opt) var sth = opt[1], file_offset = sth; else var file_offset = -1;
    return with_file_descr_deferred
            (cst_write$0,
             fd,
             function(fd){
              function _al_(param){
               if(0 === param[0]){var res = param[1]; return [0, res];}
               var err = param[1];
               return [1, [0, Core_unix[4], err, cst_write, cst$0]];
              }
              var
               _am_ =
                 attempt_syscall
                  (function(param){
                    var
                     _an_ = caml_call3(Cstruct[3], off, len, buf),
                     _ao_ =
                       caml_call1(Async_unix_Io_uring_raw[1][1], file_offset);
                    return caml_call4
                            (Async_unix_Io_uring_raw[18], t, _ao_, fd, _an_);
                   });
              return caml_call2(Async_unix_Import[33][3], _am_, _al_);
             });
   }
   function to_cstruct(iovecs){
    function _aj_(param){
     var len = param[3], pos = param[2], buf = param[1];
     return caml_call3(Cstruct[3], [0, pos], [0, len], buf);
    }
    var _ak_ = caml_call1(Core_Array[45], iovecs);
    return caml_call2(Core_List[51], _ak_, _aj_);
   }
   function readv(t, opt, fd, bufs){
    if(opt) var sth = opt[1], file_offset = sth; else var file_offset = -1;
    return with_file_descr_deferred
            (cst_readv$0,
             fd,
             function(fd){
              function _af_(param){
               if(0 === param[0]){var res = param[1]; return [0, res];}
               var err = param[1];
               return [1, [0, Core_unix[4], err, cst_readv, cst$1]];
              }
              var
               _ag_ =
                 attempt_syscall
                  (function(param){
                    var
                     _ah_ = to_cstruct(bufs),
                     _ai_ =
                       caml_call1(Async_unix_Io_uring_raw[1][1], file_offset);
                    return caml_call4
                            (Async_unix_Io_uring_raw[19], t, _ai_, fd, _ah_);
                   });
              return caml_call2(Async_unix_Import[33][3], _ag_, _af_);
             });
   }
   function writev(t, opt, fd, bufs){
    if(opt) var sth = opt[1], file_offset = sth; else var file_offset = -1;
    return with_file_descr_deferred
            (cst_writev$0,
             fd,
             function(fd){
              function _ab_(param){
               if(0 === param[0]){var res = param[1]; return [0, res];}
               var err = param[1];
               return [1, [0, Core_unix[4], err, cst_writev, cst$2]];
              }
              var
               _ac_ =
                 attempt_syscall
                  (function(param){
                    var
                     _ad_ = to_cstruct(bufs),
                     _ae_ =
                       caml_call1(Async_unix_Io_uring_raw[1][1], file_offset);
                    return caml_call4
                            (Async_unix_Io_uring_raw[20], t, _ae_, fd, _ad_);
                   });
              return caml_call2(Async_unix_Import[33][3], _ac_, _ab_);
             });
   }
   function openat2(t, access, flags, opt, resolve, info, fd, filename){
    if(opt) var sth = opt[1], perm = sth; else var perm = 420;
    a:
    {
     if
      (!
       caml_call2
        (Async_unix_Io_uring_raw[5][3], Async_unix_Io_uring_raw[5][7], flags)
       &&
        !
        caml_call2
         (Async_unix_Io_uring_raw[5][3],
          Async_unix_Io_uring_raw[5][19],
          flags)){
      var perm$0 = 0;
      break a;
     }
     var perm$0 = perm;
    }
    var
     _X_ = caml_call1(Core[558], filename),
     _Y_ = caml_call1(Core_Info[20], _X_),
     info$0 = caml_call2(Core_Option[39], info, _Y_);
    return with_file_descr_deferred_opt
            (cst_open$0,
             fd,
             function(fd_opt){
              function ___(param){
               if(0 === param[0]){
                var
                 res = param[1],
                 _aa_ = caml_call1(Core_unix_File_descr[13], res);
                return [0, caml_call4(Async_unix_Fd[6], 0, 2, _aa_, info$0)];
               }
               var err = param[1], _$_ = caml_call1(Core_Info[13], info$0);
               return [1, [0, Core_unix[4], err, cst_open, _$_]];
              }
              var
               _Z_ =
                 attempt_syscall
                  (function(param){
                    return caml_call7
                            (Async_unix_Io_uring_raw[22],
                             t,
                             access,
                             flags,
                             perm$0,
                             resolve,
                             fd_opt,
                             filename);
                   });
              return caml_call2(Async_unix_Import[33][3], _Z_, ___);
             });
   }
   function unlink(t, dir, fd, filename){
    return with_file_descr_deferred_opt
            (cst_unlink$0,
             fd,
             function(fd_opt){
              function _U_(param){
               if(0 === param[0]) return _c_;
               var
                err = param[1],
                _V_ =
                  [1,
                   [0,
                    [1, [0, _b_, [0, caml_call1(Core[558], filename), 0]]],
                    0]],
                _W_ = caml_call1(Core_unix[10][1], _V_);
               return [1, [0, Core_unix[4], err, cst_unlink, _W_]];
              }
              var
               _T_ =
                 attempt_syscall
                  (function(param){
                    return caml_call4
                            (Async_unix_Io_uring_raw[25], t, dir, fd_opt, filename);
                   });
              return caml_call2(Async_unix_Import[33][3], _T_, _U_);
             });
   }
   function link(t, opt, _I_, target, link_name, param){
    if(opt) var sth = opt[1], follow = sth; else var follow = 0;
    if(_I_) var sth$0 = _I_[1], force = sth$0; else var force = 0;
    function args_for_error(param){
     var
      _R_ = [0, [1, [0, _d_, [0, caml_call1(Core[558], link_name), 0]]], 0],
      _S_ =
        [1, [0, [1, [0, _e_, [0, caml_call1(Core[558], target), 0]]], _R_]];
     return caml_call1(Core_unix[10][1], _S_);
    }
    function _J_(unlink_res){
     if(0 === unlink_res[0]){
      var
       _O_ =
         function(param){
          if(0 === param[0]) return _f_;
          var err = param[1], _Q_ = args_for_error(0);
          return [1, [0, Core_unix[4], err, cst_link, _Q_]];
         },
       _P_ =
         attempt_syscall
          (function(param){
            return caml_call4
                    (Async_unix_Io_uring_raw[24], t, follow, target, link_name);
           });
      return caml_call2(Async_unix_Import[33][3], _P_, _O_);
     }
     var exn = unlink_res[1];
     return caml_call1(Async_unix_Import[30], [1, exn]);
    }
    if(force)
     var
      _K_ =
        function(param){
         if(0 === param[0]) return _g_;
         var exn = param[1];
         if(exn[1] !== Core_unix[4]) return [1, exn];
         var e = exn[2];
         if(typeof e === "number" && 20 === e) return _h_;
         var s = exn[3], _N_ = args_for_error(0);
         return [1, [0, Core_unix[4], e, s, _N_]];
        },
      _L_ = unlink(t, 0, 0, link_name),
      _M_ = caml_call2(Async_unix_Import[33][3], _L_, _K_);
    else
     var _M_ = caml_call1(Async_unix_Import[30], _i_);
    return caml_call2(Async_unix_Import[33][2], _M_, _J_);
   }
   function do_statx(t, fd, opt, path, flags){
    if(opt)
     var sth = opt[1], mask = sth;
    else
     var mask = Async_unix_Io_uring_raw[4][4][15];
    var statx_buffer = caml_call1(Async_unix_Io_uring_raw[4][1], 0);
    function _G_(param){
     if(0 !== param[0]){var err = param[1]; return [1, err];}
     var res = param[1];
     if(caml_call2(Async_unix_Import[3], res, 0)) return [0, statx_buffer];
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    }
    var
     _H_ =
       attempt_syscall
        (function(param){
          return caml_call6
                  (Async_unix_Io_uring_raw[27],
                   t,
                   fd,
                   mask,
                   path,
                   statx_buffer,
                   flags);
         });
    return caml_call2(Async_unix_Import[33][3], _H_, _G_);
   }
   function statx(t, x_003, opt, path, flags){
    if(opt)
     var sth = opt[1], mask = sth;
    else
     var mask = Async_unix_Io_uring_raw[4][4][15];
    return with_file_descr_deferred_opt
            (cst_statx$0,
             x_003,
             function(fd_opt){
              function _C_(param){
               if(0 === param[0]){var res = param[1]; return [0, res];}
               var
                err = param[1],
                _D_ =
                  [0, [1, [0, _k_, [0, caml_call1(Core[558], path), 0]]], 0],
                _E_ =
                  [1,
                   [0,
                    [1,
                     [0,
                      _l_,
                      [0, caml_call2(Core[515], Async_unix_Fd[2], x_003), 0]]],
                    _D_]],
                _F_ = caml_call1(Core_unix[10][1], _E_);
               return [1, [0, Core_unix[4], err, cst_statx, _F_]];
              }
              var _B_ = do_statx(t, fd_opt, [0, mask], path, flags);
              return caml_call2(Async_unix_Import[33][3], _B_, _C_);
             });
   }
   function stat(t, mask, filename){
    function _x_(param){
     if(0 === param[0]){var res = param[1]; return [0, res];}
     var
      err = param[1],
      _z_ =
        [1, [0, [1, [0, _m_, [0, caml_call1(Core[558], filename), 0]]], 0]],
      _A_ = caml_call1(Core_unix[10][1], _z_);
     return [1, [0, Core_unix[4], err, cst_stat, _A_]];
    }
    var
     _y_ = do_statx(t, 0, mask, filename, Async_unix_Io_uring_raw[4][2][4]);
    return caml_call2(Async_unix_Import[33][3], _y_, _x_);
   }
   function fstat(t, mask, fd){
    return with_file_descr_deferred
            (cst_fstat$0,
             fd,
             function(fd){
              function _t_(param){
               if(0 === param[0]){var res = param[1]; return [0, res];}
               var
                err = param[1],
                _v_ =
                  [1,
                   [0,
                    [1,
                     [0, _n_, [0, caml_call1(Core_unix_File_descr[2], fd), 0]]],
                    0]],
                _w_ = caml_call1(Core_unix[10][1], _v_);
               return [1, [0, Core_unix[4], err, cst_fstat, _w_]];
              }
              var
               _u_ =
                 do_statx
                  (t, [0, fd], mask, cst$3, Async_unix_Io_uring_raw[4][2][5]);
              return caml_call2(Async_unix_Import[33][3], _u_, _t_);
             });
   }
   function lstat(t, mask, filename){
    function _p_(param){
     if(0 === param[0]){var res = param[1]; return [0, res];}
     var
      err = param[1],
      _r_ =
        [1, [0, [1, [0, _o_, [0, caml_call1(Core[558], filename), 0]]], 0]],
      _s_ = caml_call1(Core_unix[10][1], _r_);
     return [1, [0, Core_unix[4], err, cst_lstat, _s_]];
    }
    var
     _q_ = do_statx(t, 0, mask, filename, Async_unix_Io_uring_raw[4][2][7]);
    return caml_call2(Async_unix_Import[33][3], _q_, _p_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_uring);
   var
    Async_unix_Io_uring =
      [0,
       create,
       exit,
       submit,
       fill_completions,
       read,
       read_file_descr,
       write,
       readv,
       writev,
       openat2,
       unlink,
       link,
       statx,
       stat,
       fstat,
       lstat,
       the_one_and_only];
   runtime.caml_register_global
    (67, Async_unix_Io_uring, cst_Async_unix_Io_uring$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Thread_safe
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler, Async_unix__Import, Async_unix__Raw_scheduler, Base__Exn, Core, Core__Result, Core_thread, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Squeue, Thread_safe_ivar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Thread_safe$0 = "Async_unix__Thread_safe",
    cst_async_unix$0 = "async_unix",
    cst_block_on_async$0 = "block_on_async",
    cst_function = "function_",
    cst_run_in_async$1 = "run_in_async",
    cst_run_in_async_wait$1 = "run_in_async_wait",
    cst_run_in_async_with_optional$1 = "run_in_async_with_optional_cycle";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Result = global_data.Core__Result,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Squeue = global_data.Squeue,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_unix_Import = global_data.Async_unix__Import,
    Linux_ext = global_data.Linux_ext,
    Base_Exn = global_data.Base__Exn,
    Core_thread = global_data.Core_thread,
    Thread_safe_ivar = global_data.Thread_safe_ivar,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Thread_safe$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/thread_safe.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "thread_safe.ml");
   var
    debug = Async_kernel_Debug[13],
    _j_ = [0, "ok_to_drop_lock"],
    _k_ = [0, "am_holding_lock"],
    _l_ = [0, "i_am_the_scheduler"],
    cst_called_become_helper_threa =
      "called [become_helper_thread_and_block_on_async] from within async",
    cst_run_in_async_wait = cst_run_in_async_wait$1,
    cst_run_in_async_wait$0 = cst_run_in_async_wait$1,
    cst_run_in_async = cst_run_in_async$1,
    cst_run_in_async$0 = cst_run_in_async$1,
    cst_called_block_on_async_from =
      "called [block_on_async] from within async",
    cst_block_on_async = cst_block_on_async$0,
    _c_ = [0, 3804260],
    _d_ = [0, 523273847],
    _e_ = [0, cst_block_on_async$0],
    cst_async_scheduler = "async-scheduler",
    cst_run_in_async_with_optional = cst_run_in_async_with_optional$1,
    cst_run_in_async_with_optional$0 = cst_run_in_async_with_optional$1,
    _b_ = [0, cst_function],
    cst_cannot_call_while_holding_ =
      "cannot call while holding the async lock",
    _a_ = [0, cst_function],
    cst_cannot_call_from_the_main_ = "cannot call from the main thread",
    cst_run_holding_async_lock = "run_holding_async_lock",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Thread_safe = cst_Async_unix_Thread_safe$0;
   function run_holding_async_lock(opt, t, f, finish){
    if(opt)
     var sth = opt[1], wakeup_scheduler = sth;
    else
     var wakeup_scheduler = 1;
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_run_holding_async_lock,
       t,
       Async_unix_Raw_scheduler[76]);
    if(1 - caml_call1(Async_unix_Raw_scheduler[86], t))
     caml_call1(Async_unix_Raw_scheduler[82], t);
    function _T_(param){
     if(wakeup_scheduler) caml_call1(Async_unix_Raw_scheduler[106], t);
     return caml_call1(Async_unix_Raw_scheduler[84], t);
    }
    function _U_(param){
     function _V_(param){return caml_call1(Core_Result[54], f);}
     return caml_call1
             (finish,
              caml_call3
               (Async_unix_Raw_scheduler[80],
                t,
                Async_kernel_Scheduler[12],
                _V_));
    }
    return caml_call2(Core[259], _U_, _T_);
   }
   function ensure_in_a_thread(t, function$0){
    if(caml_call1(Async_unix_Raw_scheduler[97], 0)){
     var
      _O_ = [0, [1, [0, _a_, [0, caml_call1(Core[558], function$0), 0]]], 0],
      _P_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_call_from_the_main_),
          _O_]];
     caml_call1(Core[261], _P_);
    }
    var _Q_ = caml_call1(Async_unix_Raw_scheduler[86], t);
    if(! _Q_) return _Q_;
    var
     _R_ = [0, [1, [0, _b_, [0, caml_call1(Core[558], function$0), 0]]], 0],
     _S_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_call_while_holding_),
         _R_]];
    return caml_call1(Core[261], _S_);
   }
   function without_async_lock_unchecked(t, f){
    if(! caml_call1(Async_unix_Raw_scheduler[86], t)) return caml_call1(f, 0);
    caml_call1(Async_unix_Raw_scheduler[84], t);
    function _N_(param){return caml_call1(Async_unix_Raw_scheduler[82], t);}
    return caml_call2(Core[259], f, _N_);
   }
   function block_on_async_not_holding_asy(t, f$0){
    if(1 - caml_call1(Async_unix_Raw_scheduler[144], t)){
     var
      f =
        function(param){
         if(caml_call1(Async_unix_Raw_scheduler[144], t)) return 17505;
         t[2] = 2;
         var scheduler_ran_a_job = caml_call1(Thread_safe_ivar[2], 0);
         function _L_(param){
          return caml_call2(Thread_safe_ivar[3], scheduler_ran_a_job, 0);
         }
         var _M_ = caml_call1(Async_unix_Import[30], 0);
         caml_call2(Async_unix_Import[22], _M_, _L_);
         return [0, 4448519, scheduler_ran_a_job];
        };
     if(caml_call1(Async_unix_Raw_scheduler[86], t))
      var starting = f(0);
     else{
      caml_call1(Async_unix_Raw_scheduler[82], t);
      var
       _E_ =
         function(param){return caml_call1(Async_unix_Raw_scheduler[84], t);},
       starting = caml_call2(Core[259], f, _E_);
     }
     if(typeof starting !== "number"){
      var scheduler_ran_a_job = starting[2];
      without_async_lock_unchecked
       (t,
        function(param){
         var _H_ = 0;
         function _I_(param){
          function _J_(param){
           var match = Linux_ext[39];
           if(0 === match[0]){
            var f = match[1];
            caml_call1(f, cst_async_scheduler);
           }
           caml_call1(Async_unix_Raw_scheduler[82], t);
           var _K_ = caml_call2(Async_unix_Raw_scheduler[138], 0, t);
           return caml_call1(Core[158], _K_);
          }
          return caml_call2(Base_Exn[14], 1, _J_);
         }
         caml_call3(Core_thread[2], 890699316, _I_, _H_);
         return caml_call1(Thread_safe_ivar[4], scheduler_ran_a_job);
        });
     }
    }
    function _F_(res){
     if(0 !== res[0]){var exn = res[1]; return [0, 425081257, [1, exn]];}
     var d = res[1], match = caml_call1(Async_kernel_Deferred[5], d);
     if(match){var v = match[1]; return [0, 425081257, v];}
     caml_call1(Async_unix_Raw_scheduler[122], t);
     var match$0 = caml_call1(Async_kernel_Deferred[5], d);
     if(match$0){var v$0 = match$0[1]; return [0, 425081257, v$0];}
     var q = caml_call1(Squeue[2], 1);
     function _G_(v){return caml_call2(Squeue[4], q, v);}
     caml_call2(Async_unix_Import[22], d, _G_);
     return [0, -762465177, q];
    }
    var
     maybe_blocked =
       run_holding_async_lock
        (0,
         t,
         function(param){
          return caml_call7
                  (Async_kernel_Monitor[16], 0, 0, _e_, 0, _d_, _c_, f$0);
         },
         _F_);
    if(425081257 <= maybe_blocked[1]){var v = maybe_blocked[2]; return v;}
    var q = maybe_blocked[2];
    return caml_call1(Squeue[7], q);
   }
   function _f_(t, f){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_block_on_async,
       t,
       Async_unix_Raw_scheduler[76]);
    var _A_ = caml_call1(Async_unix_Raw_scheduler[107], t);
    if(_A_)
     var _B_ = _A_;
    else
     var
      _D_ = caml_call1(Async_unix_Raw_scheduler[86], t),
      _B_ = _D_ ? 1 - caml_call1(Async_unix_Raw_scheduler[97], 0) : _D_;
    if(_B_){
     var
      _C_ = caml_call1(Sexplib0_Sexp_conv[7], cst_called_block_on_async_from);
     caml_call1(Core[261], _C_);
    }
    if(! caml_call1(Async_unix_Raw_scheduler[86], t))
     return block_on_async_not_holding_asy(t, f);
    var execution_context = caml_call1(Async_kernel_Scheduler[4], t[21]);
    caml_call1(Async_unix_Raw_scheduler[84], t);
    var res = block_on_async_not_holding_asy(t, f);
    caml_call1(Async_unix_Raw_scheduler[82], t);
    caml_call2(Async_kernel_Scheduler[7], t[21], execution_context);
    return res;
   }
   function _g_(wakeup_scheduler, t, f){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_run_in_async,
       t,
       Async_unix_Raw_scheduler[76]);
    ensure_in_a_thread(t, cst_run_in_async$0);
    return run_holding_async_lock
            (wakeup_scheduler, t, f, function(_z_){return _z_;});
   }
   function _h_(wakeup_scheduler, t, f){
    var _y_ = _g_(wakeup_scheduler, t, f);
    return caml_call1(Core_Result[40], _y_);
   }
   function _i_(t, f){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_run_in_async_wait,
       t,
       Async_unix_Raw_scheduler[76]);
    ensure_in_a_thread(t, cst_run_in_async_wait$0);
    return _f_(t, f);
   }
   function t(param){return caml_call1(Async_unix_Raw_scheduler[92], 0);}
   function am_holding_async_lock(param){
    var _x_ = t(0);
    return caml_call1(Async_unix_Raw_scheduler[86], _x_);
   }
   function deferred(param){
    var
     t$0 = t(0),
     ivar =
       caml_call1(Async_unix_Raw_scheduler[86], t$0)
        ? caml_call1(Async_kernel_Ivar[12], 0)
        : run_holding_async_lock
          (0, t$0, Async_kernel_Ivar[12], Core_Result[40]);
    function fill(x){
     return _h_
             (0,
              t$0,
              function(param){
               return caml_call2(Async_kernel_Ivar[14], ivar, x);
              });
    }
    return [0, caml_call1(Async_kernel_Ivar[19], ivar), fill];
   }
   function run_in_async_with_optional_cyc(wakeup_scheduler, f){
    var t$0 = t(0);
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_run_in_async_with_optional,
       t$0,
       Async_unix_Raw_scheduler[76]);
    ensure_in_a_thread(t$0, cst_run_in_async_with_optional$0);
    return run_holding_async_lock
            (wakeup_scheduler,
             t$0,
             f,
             function(param){
              if(0 !== param[0]){var exn = param[1]; return [1, exn];}
              var
               match = param[1],
               a = match[2],
               maybe_run_a_cycle = match[1];
              if(883827348 > maybe_run_a_cycle)
               caml_call1(Async_unix_Raw_scheduler[122], t$0);
              return [0, a];
             });
   }
   function run_in_async(wakeup_scheduler, f){return _g_(wakeup_scheduler, t(0), f);
   }
   function run_in_async_exn(wakeup_scheduler, f){return _h_(wakeup_scheduler, t(0), f);
   }
   function block_on_async(f){return _f_(t(0), f);}
   function block_on_async_exn(f){
    var t$0 = t(0), _w_ = _f_(t$0, f);
    return caml_call1(Core_Result[40], _w_);
   }
   function run_in_async_wait(f){return _i_(t(0), f);}
   function run_in_async_wait_exn(f){
    var t$0 = t(0), _v_ = _i_(t$0, f);
    return caml_call1(Core_Result[40], _v_);
   }
   function ok_to_drop_lock(t){
    var
     _t_ = caml_call1(Async_unix_Raw_scheduler[97], 0),
     _u_ = _t_ ? 1 - caml_call1(Async_kernel_Scheduler[74], t[21]) : _t_;
    return _u_;
   }
   function without_async_lock(f){
    var t$0 = t(0);
    a:
    if(! caml_call1(Async_unix_Raw_scheduler[107], t$0)){
     if
      (caml_call1(Async_unix_Raw_scheduler[86], t$0) && ! ok_to_drop_lock(t$0))
      break a;
     return without_async_lock_unchecked(t$0, f);
    }
    var
     _m_ = ok_to_drop_lock(t$0),
     _n_ = [0, [1, [0, _j_, [0, caml_call1(Core[323], _m_), 0]]], 0],
     _o_ = caml_call1(Async_unix_Raw_scheduler[86], t$0),
     _p_ = [0, [1, [0, _k_, [0, caml_call1(Core[323], _o_), 0]]], _n_],
     _q_ = caml_call1(Async_unix_Raw_scheduler[107], t$0),
     _r_ =
       [0,
        [1, [0, [1, [0, _l_, [0, caml_call1(Core[323], _q_), 0]]], _p_]],
        0],
     _s_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_called_become_helper_threa),
         _r_]];
    return caml_call1(Core[261], _s_);
   }
   function without_async_lock_unchecked$0(f){
    var t$0 = t(0);
    return without_async_lock_unchecked(t$0, f);
   }
   var For_tests = [0, without_async_lock_unchecked$0];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Thread_safe);
   var
    Async_unix_Thread_safe =
      [0,
       am_holding_async_lock,
       deferred,
       run_in_async_with_optional_cyc,
       run_in_async,
       run_in_async_exn,
       block_on_async,
       block_on_async_exn,
       run_in_async_wait,
       run_in_async_wait_exn,
       without_async_lock,
       For_tests];
   runtime.caml_register_global
    (47, Async_unix_Thread_safe, cst_Async_unix_Thread_safe$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Scheduler
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel_config, Async_unix__Io_uring_raw_singleton, Async_unix__Raw_scheduler, Async_unix__Thread_safe, Core, Core__Error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Time_ns_unix, Time_stamp_counter
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Scheduler$0 = "Async_unix__Scheduler",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_unix_Thread_safe = global_data.Async_unix__Thread_safe,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton,
    Async_kernel_config = global_data.Async_kernel_config,
    Time_ns_unix = global_data.Time_ns_unix,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Error = global_data.Core__Error,
    Time_stamp_counter = global_data.Time_stamp_counter,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Scheduler$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/scheduler.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "scheduler.ml");
   var
    Which_watcher = Async_unix_Raw_scheduler[3],
    within_context = Async_unix_Raw_scheduler[6],
    within = Async_unix_Raw_scheduler[7],
    within$0 = Async_unix_Raw_scheduler[8],
    within_v = Async_unix_Raw_scheduler[9],
    with_local = Async_unix_Raw_scheduler[10],
    find_local = Async_unix_Raw_scheduler[11],
    schedule = Async_unix_Raw_scheduler[12],
    schedule$0 = Async_unix_Raw_scheduler[13],
    enqueue_job = Async_unix_Raw_scheduler[14],
    thread_safe_enqueue_job = Async_unix_Raw_scheduler[15],
    preserve_execution_context = Async_unix_Raw_scheduler[16],
    preserve_execution_context$0 = Async_unix_Raw_scheduler[17],
    cycle_start = Async_unix_Raw_scheduler[18],
    cycle_start_ns = Async_unix_Raw_scheduler[19],
    cycle_times = Async_unix_Raw_scheduler[20],
    cycle_times_ns = Async_unix_Raw_scheduler[21],
    last_cycle_time = Async_unix_Raw_scheduler[22],
    long_cycles = Async_unix_Raw_scheduler[23],
    cycle_count = Async_unix_Raw_scheduler[24],
    total_cycle_time = Async_unix_Raw_scheduler[25],
    event_precision = Async_unix_Raw_scheduler[26],
    event_precision_ns = Async_unix_Raw_scheduler[27],
    force_current_cycle_to_end = Async_unix_Raw_scheduler[28],
    set_max_num_jobs_per_priority_ = Async_unix_Raw_scheduler[29],
    max_num_jobs_per_priority_per_ = Async_unix_Raw_scheduler[30],
    set_record_backtraces = Async_unix_Raw_scheduler[31],
    recording_backtraces = Async_unix_Raw_scheduler[32],
    yield$0 = Async_unix_Raw_scheduler[33],
    yield_until_no_jobs_remain = Async_unix_Raw_scheduler[34],
    yield_every = Async_unix_Raw_scheduler[35],
    num_jobs_run = Async_unix_Raw_scheduler[36],
    num_pending_jobs = Async_unix_Raw_scheduler[37],
    sexp_of_t = Async_unix_Raw_scheduler[76],
    is_ready_to_initialize = Async_unix_Raw_scheduler[89],
    is_initialized = Async_unix_Raw_scheduler[90],
    default_handle_thread_pool_stu = Async_unix_Raw_scheduler[104],
    reset_in_forked_process_withou = Async_unix_Raw_scheduler[118],
    reset_in_forked_process = Async_unix_Raw_scheduler[119],
    make_async_unusable = Async_unix_Raw_scheduler[120],
    num_busy_pollers = Async_unix_Raw_scheduler[129],
    add_busy_poller = Async_unix_Raw_scheduler[130],
    raise_if_any_jobs_were_schedul = Async_unix_Raw_scheduler[143],
    go = Async_unix_Raw_scheduler[145],
    go_main = Async_unix_Raw_scheduler[146],
    is_the_one_and_only_running = Async_unix_Raw_scheduler[147],
    report_long_cycle_times = Async_unix_Raw_scheduler[148],
    set_check_invariants = Async_unix_Raw_scheduler[149],
    set_detect_invalid_access_from = Async_unix_Raw_scheduler[150],
    set_max_inter_cycle_timeout = Async_unix_Raw_scheduler[151],
    t = Async_unix_Raw_scheduler[152],
    fold_fields = Async_unix_Raw_scheduler[154],
    handle_thread_pool_stuck = Async_unix_Raw_scheduler[155],
    For_metrics = Async_unix_Raw_scheduler[156],
    External = Async_unix_Raw_scheduler[157],
    current_execution_context = Async_kernel_Async_kernel_sche[1],
    _e_ = [0, "t.max_inter_cycle_timeout"],
    _f_ = [0, "min_inter_cycle_timeout"],
    cst_min_inter_cycle_timeout_to = "min_inter_cycle_timeout too large",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Scheduler = cst_Async_unix_Scheduler$0,
    _a_ = Async_unix_Raw_scheduler[77],
    _b_ = Async_unix_Raw_scheduler[78],
    _c_ = Async_unix_Raw_scheduler[105],
    _d_ = Async_unix_Raw_scheduler[132];
   function time_spent_waiting_for_io(param){
    var
     t$0 = caml_call1(t, 0),
     _m_ = caml_call1(Core[248], Time_stamp_counter[30]),
     _n_ = caml_call2(Time_stamp_counter[24][38], t$0[7], _m_);
    return caml_call1(Time_ns_unix[72][137], _n_);
   }
   function set_min_inter_cycle_timeout(min_inter_cycle_timeout){
    var t$0 = caml_call1(t, 0);
    if(caml_call2(Time_ns_unix[72][18], min_inter_cycle_timeout, t$0[23])){
     var
      _i_ =
        [0,
         [1, [0, _e_, [0, caml_call1(Async_kernel_config[3][2], t$0[23]), 0]]],
         0],
      _j_ =
        [0,
         [1,
          [0,
           _f_,
           [0, caml_call1(Time_ns_unix[72][10], min_inter_cycle_timeout), 0]]],
         _i_],
      _k_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_min_inter_cycle_timeout_to),
          _j_]],
      _l_ = caml_call1(Core_Error[8], _k_);
     caml_call1(Core_Error[30], _l_);
    }
    t$0[24] = caml_call1(Async_kernel_config[4][4], min_inter_cycle_timeout);
    return 0;
   }
   function max_num_open_file_descrs(param){
    return caml_call1(_b_, caml_call1(t, 0));
   }
   function fds_may_produce_events(param){
    return caml_call1(_d_, caml_call1(t, 0));
   }
   function thread_pool_has_unfinished_wor(param){return caml_call1(_c_, caml_call1(t, 0));
   }
   function max_num_threads(param){return caml_call1(_a_, caml_call1(t, 0));}
   function is_running(param){
    return caml_call1(is_the_one_and_only_running, 0);
   }
   function warm_up_fds(param){
    function _h_(param){return caml_call1(Async_kernel_Deferred[12], 0);}
    caml_call1(Async_unix_Thread_safe[7], _h_);
    caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    return 0;
   }
   var For_tests = [0, warm_up_fds];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Scheduler);
   var
    _g_ = For_metrics[1],
    Async_unix_Scheduler =
      [0,
       sexp_of_t,
       current_execution_context,
       within_context,
       within,
       within$0,
       within_v,
       with_local,
       find_local,
       schedule,
       schedule$0,
       enqueue_job,
       thread_safe_enqueue_job,
       preserve_execution_context,
       preserve_execution_context$0,
       cycle_start,
       cycle_start_ns,
       cycle_times,
       cycle_times_ns,
       last_cycle_time,
       long_cycles,
       cycle_count,
       total_cycle_time,
       event_precision,
       event_precision_ns,
       force_current_cycle_to_end,
       set_max_num_jobs_per_priority_,
       max_num_jobs_per_priority_per_,
       set_record_backtraces,
       recording_backtraces,
       yield$0,
       yield_until_no_jobs_remain,
       yield_every,
       num_jobs_run,
       num_pending_jobs,
       Which_watcher,
       t,
       max_num_open_file_descrs,
       max_num_threads,
       go,
       go_main,
       raise_if_any_jobs_were_schedul,
       report_long_cycle_times,
       is_running,
       set_max_inter_cycle_timeout,
       set_check_invariants,
       set_detect_invalid_access_from,
       fold_fields,
       is_ready_to_initialize,
       is_initialized,
       reset_in_forked_process,
       reset_in_forked_process_withou,
       make_async_unusable,
       handle_thread_pool_stuck,
       default_handle_thread_pool_stu,
       time_spent_waiting_for_io,
       set_min_inter_cycle_timeout,
       fds_may_produce_events,
       thread_pool_has_unfinished_wor,
       add_busy_poller,
       num_busy_pollers,
       [0,
        External[8],
        External[9],
        External[1],
        External[4],
        External[6],
        External[7]],
       [0, [0, _g_[2], _g_[3]]],
       For_tests];
   runtime.caml_register_global
    (25, Async_unix_Scheduler, cst_Async_unix_Scheduler$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Require_explicit_time_source_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Require_explici =
      "Async_unix__Require_explicit_time_source_intf",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Require_explici);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1
    (Ppx_expect_runtime[1][1], "src/require_explicit_time_source_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_unix,
     "require_explicit_time_source_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Require_explici);
   var Async_unix_Require_explicit_ti = [0];
   runtime.caml_register_global
    (11, Async_unix_Require_explicit_ti, cst_Async_unix_Require_explici);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Require_explicit_time_source
//# unitInfo: Requires: Async_kernel__Require_explicit_time_source, Async_unix__Clock, Async_unix__Require_explicit_time_source_intf, Async_unix__Scheduler, Core__Date, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Time_float_unix, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Require_explici =
      "Async_unix__Require_explicit_time_source",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel_Require_explicit_ =
      global_data.Async_kernel__Require_explicit_time_source,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Time_ns_unix = global_data.Time_ns_unix,
    Time_float_unix = global_data.Time_float_unix,
    Core_Date = global_data.Core__Date,
    Async_unix_Scheduler = global_data.Async_unix__Scheduler;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Require_explici);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/require_explicit_time_source.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_unix,
     "require_explicit_time_source.ml");
   var
    at = Async_kernel_Require_explicit_[6],
    after = Async_kernel_Require_explicit_[7],
    every = Async_kernel_Require_explicit_[8],
    with_timeout = Async_kernel_Require_explicit_[9];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Require_explici);
   var
    _a_ = Time_ns_unix[75],
    _b_ = Time_float_unix[3],
    _c_ = Time_float_unix[3],
    Async_unix_Require_explicit_ti =
      [0,
       at,
       after,
       every,
       with_timeout,
       [0,
        Async_unix_Scheduler[1],
        Async_unix_Scheduler[2],
        Async_unix_Scheduler[3],
        Async_unix_Scheduler[4],
        Async_unix_Scheduler[5],
        Async_unix_Scheduler[6],
        Async_unix_Scheduler[7],
        Async_unix_Scheduler[8],
        Async_unix_Scheduler[9],
        Async_unix_Scheduler[10],
        Async_unix_Scheduler[11],
        Async_unix_Scheduler[12],
        Async_unix_Scheduler[13],
        Async_unix_Scheduler[14],
        Async_unix_Scheduler[16],
        Async_unix_Scheduler[17],
        Async_unix_Scheduler[18],
        Async_unix_Scheduler[19],
        Async_unix_Scheduler[20],
        Async_unix_Scheduler[21],
        Async_unix_Scheduler[22],
        Async_unix_Scheduler[23],
        Async_unix_Scheduler[24],
        Async_unix_Scheduler[25],
        Async_unix_Scheduler[26],
        Async_unix_Scheduler[27],
        Async_unix_Scheduler[28],
        Async_unix_Scheduler[29],
        Async_unix_Scheduler[30],
        Async_unix_Scheduler[31],
        Async_unix_Scheduler[32],
        Async_unix_Scheduler[33],
        Async_unix_Scheduler[34],
        Async_unix_Scheduler[36],
        Async_unix_Scheduler[37],
        Async_unix_Scheduler[38],
        Async_unix_Scheduler[39],
        Async_unix_Scheduler[40],
        Async_unix_Scheduler[41],
        Async_unix_Scheduler[42],
        Async_unix_Scheduler[43],
        Async_unix_Scheduler[44],
        Async_unix_Scheduler[45],
        Async_unix_Scheduler[46],
        Async_unix_Scheduler[47],
        Async_unix_Scheduler[48],
        Async_unix_Scheduler[49],
        Async_unix_Scheduler[50],
        Async_unix_Scheduler[51],
        Async_unix_Scheduler[52],
        Async_unix_Scheduler[53],
        Async_unix_Scheduler[54],
        Async_unix_Scheduler[55],
        Async_unix_Scheduler[56],
        Async_unix_Scheduler[57],
        Async_unix_Scheduler[58],
        Async_unix_Scheduler[59],
        Async_unix_Scheduler[60],
        Async_unix_Scheduler[15]],
       [0,
        Core_Date[1],
        Core_Date[2],
        Core_Date[3],
        Core_Date[4],
        Core_Date[5],
        Core_Date[6],
        Core_Date[7],
        Core_Date[8],
        Core_Date[9],
        Core_Date[10],
        Core_Date[11],
        Core_Date[12],
        Core_Date[13],
        Core_Date[14],
        Core_Date[15],
        Core_Date[16],
        Core_Date[17],
        Core_Date[18],
        Core_Date[22],
        Core_Date[23],
        Core_Date[24],
        Core_Date[25],
        Core_Date[26],
        Core_Date[27],
        Core_Date[28],
        Core_Date[29],
        Core_Date[30],
        Core_Date[31],
        Core_Date[32],
        Core_Date[33],
        Core_Date[34],
        Core_Date[35],
        Core_Date[36],
        Core_Date[37],
        Core_Date[38],
        Core_Date[39],
        Core_Date[40],
        Core_Date[41],
        Core_Date[43],
        Core_Date[47],
        Core_Date[48],
        Core_Date[49],
        Core_Date[50],
        Core_Date[51],
        Core_Date[52],
        Core_Date[53],
        Core_Date[54],
        Core_Date[55],
        Core_Date[56],
        Core_Date[57],
        Core_Date[58],
        Core_Date[59],
        Core_Date[60],
        Core_Date[61],
        Core_Date[62],
        Core_Date[63],
        Core_Date[64],
        Core_Date[65],
        Core_Date[66],
        Core_Date[67],
        Core_Date[68],
        Core_Date[69],
        Core_Date[70],
        Core_Date[71],
        Core_Date[72],
        Core_Date[73],
        Core_Date[74],
        Core_Date[75],
        Core_Date[76],
        Core_Date[77],
        Core_Date[78],
        Core_Date[79],
        Core_Date[80],
        Core_Date[81],
        Core_Date[82],
        Core_Date[83],
        Core_Date[84],
        Core_Date[85],
        Core_Date[86],
        Core_Date[87],
        Core_Date[88],
        Core_Date[89],
        Core_Date[90],
        Core_Date[91],
        Core_Date[92],
        Core_Date[93],
        Core_Date[99],
        Core_Date[101],
        Core_Date[102],
        Core_Date[103],
        Core_Date[100]],
       [0,
        Time_float_unix[4],
        Time_float_unix[5],
        Time_float_unix[6],
        Time_float_unix[8],
        Time_float_unix[9],
        Time_float_unix[10],
        Time_float_unix[11],
        Time_float_unix[13],
        Time_float_unix[14],
        Time_float_unix[16],
        Time_float_unix[17],
        Time_float_unix[18],
        Time_float_unix[19],
        Time_float_unix[20],
        Time_float_unix[21],
        Time_float_unix[22],
        Time_float_unix[23],
        Time_float_unix[24],
        Time_float_unix[25],
        Time_float_unix[26],
        Time_float_unix[27],
        Time_float_unix[28],
        Time_float_unix[29],
        Time_float_unix[30],
        Time_float_unix[31],
        Time_float_unix[32],
        Time_float_unix[33],
        Time_float_unix[34],
        Time_float_unix[35],
        Time_float_unix[36],
        Time_float_unix[37],
        Time_float_unix[38],
        Time_float_unix[39],
        Time_float_unix[40],
        Time_float_unix[41],
        Time_float_unix[42],
        Time_float_unix[43],
        Time_float_unix[44],
        Time_float_unix[45],
        Time_float_unix[46],
        Time_float_unix[47],
        Time_float_unix[48],
        Time_float_unix[49],
        Time_float_unix[50],
        Time_float_unix[51],
        Time_float_unix[52],
        Time_float_unix[53],
        Time_float_unix[54],
        Time_float_unix[55],
        Time_float_unix[56],
        Time_float_unix[57],
        Time_float_unix[58],
        Time_float_unix[59],
        Time_float_unix[60],
        Time_float_unix[61],
        Time_float_unix[62],
        Time_float_unix[63],
        Time_float_unix[64],
        Time_float_unix[65],
        Time_float_unix[66],
        Time_float_unix[67],
        Time_float_unix[68],
        Time_float_unix[69],
        Time_float_unix[70],
        Time_float_unix[71],
        Time_float_unix[72],
        Time_float_unix[73],
        Time_float_unix[74],
        Time_float_unix[75],
        Time_float_unix[76],
        Time_float_unix[77],
        Time_float_unix[78],
        Time_float_unix[79],
        Time_float_unix[80],
        Time_float_unix[81],
        Time_float_unix[82],
        Time_float_unix[85],
        Time_float_unix[86],
        Time_float_unix[87],
        Time_float_unix[91],
        Time_float_unix[92],
        Time_float_unix[93],
        Time_float_unix[94],
        Time_float_unix[95],
        Time_float_unix[96],
        Time_float_unix[97],
        Time_float_unix[98],
        Time_float_unix[99],
        Time_float_unix[100],
        Time_float_unix[101],
        Time_float_unix[102],
        Time_float_unix[103],
        Time_float_unix[104],
        Time_float_unix[105],
        Time_float_unix[106],
        Time_float_unix[107],
        Time_float_unix[108],
        Time_float_unix[109],
        Time_float_unix[110],
        Time_float_unix[111],
        Time_float_unix[112],
        Time_float_unix[113],
        Time_float_unix[114],
        [0,
         _c_[1],
         _c_[2],
         _c_[3],
         _c_[4],
         _c_[5],
         _c_[6],
         _c_[7],
         _c_[8],
         _c_[9],
         _c_[10],
         _c_[11],
         _c_[12],
         _c_[13],
         _c_[14],
         _c_[15],
         _c_[16],
         _c_[17],
         _c_[18],
         _c_[19],
         _c_[20],
         _c_[21],
         _c_[22],
         _c_[23],
         _c_[24],
         _c_[25],
         _c_[26],
         _c_[27],
         _c_[28],
         _c_[29],
         _c_[30],
         _c_[31],
         _c_[33],
         _c_[36],
         _c_[37],
         _c_[38],
         _c_[43],
         _c_[44],
         _c_[45],
         _c_[46],
         _c_[47],
         _c_[48],
         _c_[49],
         _c_[50],
         _c_[51],
         _c_[52],
         _c_[53],
         _c_[54],
         _c_[55],
         _c_[56],
         _c_[57],
         _c_[58],
         _c_[59],
         _c_[60],
         _c_[61],
         _c_[62],
         _c_[63],
         _c_[64],
         _c_[65],
         _c_[66],
         _c_[67],
         _c_[68],
         _c_[69],
         _c_[70],
         _c_[71],
         _c_[72],
         _c_[73],
         _c_[74],
         _c_[75],
         _c_[76],
         _c_[77],
         _c_[78],
         _c_[79],
         _c_[81]],
        Time_float_unix[15]],
       [0,
        Time_float_unix[4],
        Time_float_unix[5],
        Time_float_unix[6],
        Time_float_unix[8],
        Time_float_unix[9],
        Time_float_unix[10],
        Time_float_unix[11],
        Time_float_unix[13],
        Time_float_unix[14],
        Time_float_unix[16],
        Time_float_unix[17],
        Time_float_unix[18],
        Time_float_unix[19],
        Time_float_unix[20],
        Time_float_unix[21],
        Time_float_unix[22],
        Time_float_unix[23],
        Time_float_unix[24],
        Time_float_unix[25],
        Time_float_unix[26],
        Time_float_unix[27],
        Time_float_unix[28],
        Time_float_unix[29],
        Time_float_unix[30],
        Time_float_unix[31],
        Time_float_unix[32],
        Time_float_unix[33],
        Time_float_unix[34],
        Time_float_unix[35],
        Time_float_unix[36],
        Time_float_unix[37],
        Time_float_unix[38],
        Time_float_unix[39],
        Time_float_unix[40],
        Time_float_unix[41],
        Time_float_unix[42],
        Time_float_unix[43],
        Time_float_unix[44],
        Time_float_unix[45],
        Time_float_unix[46],
        Time_float_unix[47],
        Time_float_unix[48],
        Time_float_unix[49],
        Time_float_unix[50],
        Time_float_unix[51],
        Time_float_unix[52],
        Time_float_unix[53],
        Time_float_unix[54],
        Time_float_unix[55],
        Time_float_unix[56],
        Time_float_unix[57],
        Time_float_unix[58],
        Time_float_unix[59],
        Time_float_unix[60],
        Time_float_unix[61],
        Time_float_unix[62],
        Time_float_unix[63],
        Time_float_unix[64],
        Time_float_unix[65],
        Time_float_unix[66],
        Time_float_unix[67],
        Time_float_unix[68],
        Time_float_unix[69],
        Time_float_unix[70],
        Time_float_unix[71],
        Time_float_unix[72],
        Time_float_unix[73],
        Time_float_unix[74],
        Time_float_unix[75],
        Time_float_unix[76],
        Time_float_unix[77],
        Time_float_unix[78],
        Time_float_unix[79],
        Time_float_unix[80],
        Time_float_unix[81],
        Time_float_unix[82],
        Time_float_unix[85],
        Time_float_unix[86],
        Time_float_unix[87],
        Time_float_unix[91],
        Time_float_unix[92],
        Time_float_unix[93],
        Time_float_unix[94],
        Time_float_unix[95],
        Time_float_unix[96],
        Time_float_unix[97],
        Time_float_unix[98],
        Time_float_unix[99],
        Time_float_unix[100],
        Time_float_unix[101],
        Time_float_unix[102],
        Time_float_unix[103],
        Time_float_unix[104],
        Time_float_unix[105],
        Time_float_unix[106],
        Time_float_unix[107],
        Time_float_unix[108],
        Time_float_unix[109],
        Time_float_unix[110],
        Time_float_unix[111],
        Time_float_unix[112],
        Time_float_unix[113],
        Time_float_unix[114],
        [0,
         _b_[1],
         _b_[2],
         _b_[3],
         _b_[4],
         _b_[5],
         _b_[6],
         _b_[7],
         _b_[8],
         _b_[9],
         _b_[10],
         _b_[11],
         _b_[12],
         _b_[13],
         _b_[14],
         _b_[15],
         _b_[16],
         _b_[17],
         _b_[18],
         _b_[19],
         _b_[20],
         _b_[21],
         _b_[22],
         _b_[23],
         _b_[24],
         _b_[25],
         _b_[26],
         _b_[27],
         _b_[28],
         _b_[29],
         _b_[30],
         _b_[31],
         _b_[33],
         _b_[36],
         _b_[37],
         _b_[38],
         _b_[43],
         _b_[44],
         _b_[45],
         _b_[46],
         _b_[47],
         _b_[48],
         _b_[49],
         _b_[50],
         _b_[51],
         _b_[52],
         _b_[53],
         _b_[54],
         _b_[55],
         _b_[56],
         _b_[57],
         _b_[58],
         _b_[59],
         _b_[60],
         _b_[61],
         _b_[62],
         _b_[63],
         _b_[64],
         _b_[65],
         _b_[66],
         _b_[67],
         _b_[68],
         _b_[69],
         _b_[70],
         _b_[71],
         _b_[72],
         _b_[73],
         _b_[74],
         _b_[75],
         _b_[76],
         _b_[77],
         _b_[78],
         _b_[79],
         _b_[81]],
        Time_float_unix[15]],
       [0,
        Time_ns_unix[1],
        Time_ns_unix[2],
        Time_ns_unix[4],
        Time_ns_unix[5],
        Time_ns_unix[6],
        Time_ns_unix[7],
        Time_ns_unix[8],
        Time_ns_unix[9],
        Time_ns_unix[10],
        Time_ns_unix[11],
        Time_ns_unix[12],
        Time_ns_unix[13],
        Time_ns_unix[14],
        Time_ns_unix[15],
        Time_ns_unix[16],
        Time_ns_unix[17],
        Time_ns_unix[18],
        Time_ns_unix[19],
        Time_ns_unix[20],
        Time_ns_unix[21],
        Time_ns_unix[22],
        Time_ns_unix[23],
        Time_ns_unix[24],
        Time_ns_unix[25],
        Time_ns_unix[26],
        Time_ns_unix[27],
        Time_ns_unix[28],
        Time_ns_unix[29],
        Time_ns_unix[30],
        Time_ns_unix[31],
        Time_ns_unix[32],
        Time_ns_unix[33],
        Time_ns_unix[34],
        Time_ns_unix[35],
        Time_ns_unix[36],
        Time_ns_unix[37],
        Time_ns_unix[38],
        Time_ns_unix[39],
        Time_ns_unix[41],
        Time_ns_unix[42],
        Time_ns_unix[43],
        Time_ns_unix[44],
        Time_ns_unix[45],
        Time_ns_unix[46],
        Time_ns_unix[47],
        Time_ns_unix[48],
        Time_ns_unix[49],
        Time_ns_unix[50],
        Time_ns_unix[51],
        Time_ns_unix[52],
        Time_ns_unix[53],
        Time_ns_unix[54],
        Time_ns_unix[55],
        Time_ns_unix[56],
        Time_ns_unix[57],
        Time_ns_unix[58],
        Time_ns_unix[59],
        Time_ns_unix[60],
        Time_ns_unix[61],
        Time_ns_unix[62],
        Time_ns_unix[63],
        Time_ns_unix[64],
        Time_ns_unix[65],
        Time_ns_unix[66],
        Time_ns_unix[67],
        Time_ns_unix[68],
        Time_ns_unix[69],
        Time_ns_unix[73],
        Time_ns_unix[76],
        Time_ns_unix[77],
        Time_ns_unix[78],
        Time_ns_unix[79],
        Time_ns_unix[80],
        Time_ns_unix[81],
        Time_ns_unix[82],
        Time_ns_unix[83],
        Time_ns_unix[84],
        Time_ns_unix[85],
        Time_ns_unix[86],
        Time_ns_unix[87],
        Time_ns_unix[88],
        Time_ns_unix[89],
        Time_ns_unix[90],
        Time_ns_unix[91],
        Time_ns_unix[92],
        Time_ns_unix[93],
        Time_ns_unix[94],
        Time_ns_unix[95],
        Time_ns_unix[96],
        Time_ns_unix[97],
        Time_ns_unix[98],
        Time_ns_unix[99],
        Time_ns_unix[100],
        Time_ns_unix[101],
        Time_ns_unix[102],
        Time_ns_unix[103],
        Time_ns_unix[104],
        Time_ns_unix[105],
        Time_ns_unix[106],
        Time_ns_unix[108],
        Time_ns_unix[111],
        Time_ns_unix[112],
        Time_ns_unix[113],
        Time_ns_unix[118],
        Time_ns_unix[120],
        Time_ns_unix[121],
        Time_ns_unix[122],
        Time_ns_unix[123],
        Time_ns_unix[124],
        Time_ns_unix[125],
        Time_ns_unix[126],
        Time_ns_unix[127],
        Time_ns_unix[128],
        Time_ns_unix[129],
        Time_ns_unix[130],
        Time_ns_unix[131],
        Time_ns_unix[132],
        Time_ns_unix[133],
        Time_ns_unix[134],
        Time_ns_unix[135],
        [0,
         _a_[1],
         _a_[2],
         _a_[3],
         _a_[4],
         _a_[5],
         _a_[6],
         _a_[7],
         _a_[8],
         _a_[9],
         _a_[10],
         _a_[11],
         _a_[12],
         _a_[13],
         _a_[14],
         _a_[15],
         _a_[16],
         _a_[17],
         _a_[18],
         _a_[19],
         _a_[20],
         _a_[21],
         _a_[22],
         _a_[23],
         _a_[24],
         _a_[25],
         _a_[26],
         _a_[27],
         _a_[28],
         _a_[29],
         _a_[30],
         _a_[31],
         _a_[32],
         _a_[33],
         _a_[34],
         _a_[35],
         _a_[36],
         _a_[37],
         _a_[38],
         _a_[39],
         _a_[40],
         _a_[41],
         _a_[42],
         _a_[43],
         _a_[44],
         _a_[45],
         _a_[46],
         _a_[47],
         _a_[48],
         _a_[49],
         _a_[50],
         _a_[51],
         _a_[52],
         _a_[53],
         _a_[54],
         _a_[55],
         _a_[56],
         _a_[57],
         _a_[58],
         _a_[59],
         _a_[60],
         _a_[61],
         _a_[62],
         _a_[63],
         _a_[64],
         _a_[65],
         _a_[66],
         _a_[67],
         _a_[68],
         _a_[69],
         _a_[70],
         _a_[71],
         _a_[72],
         _a_[73],
         _a_[74],
         _a_[75],
         _a_[76],
         _a_[78],
         _a_[79],
         _a_[80],
         _a_[81],
         _a_[82],
         _a_[83],
         _a_[77]],
        Time_ns_unix[40]],
       Async_unix_Clock];
   runtime.caml_register_global
    (17, Async_unix_Require_explicit_ti, cst_Async_unix_Require_explici);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Signal
//# unitInfo: Requires: Async_unix__Import, Async_unix__Raw_scheduler, Async_unix__Signal_manager, Core, Core__List, Core__Option, Core__Signal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Signal$0 = "Async_unix__Signal",
    cst_async_unix$0 = "async_unix",
    cst_src_signal_ml = "src/signal.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Signal_manager = global_data.Async_unix__Signal_manager,
    Core_List = global_data.Core__List,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Signal = global_data.Core__Signal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Signal$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_signal_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "signal.ml");
   var
    bin_size_t = Core_Signal[1],
    bin_write_t = Core_Signal[2],
    bin_read_t = Core_Signal[3],
    bin_read_t$0 = Core_Signal[4],
    bin_shape_t = Core_Signal[5],
    bin_writer_t = Core_Signal[6],
    bin_reader_t = Core_Signal[7],
    bin_t = Core_Signal[8],
    t_of_sexp = Core_Signal[9],
    sexp_of_t = Core_Signal[10],
    symbol = Core_Signal[11],
    symbol$0 = Core_Signal[12],
    symbol$1 = Core_Signal[13],
    symbol$2 = Core_Signal[14],
    symbol$3 = Core_Signal[15],
    symbol$4 = Core_Signal[16],
    min = Core_Signal[17],
    max = Core_Signal[18],
    ascending = Core_Signal[19],
    descending = Core_Signal[20],
    between = Core_Signal[21],
    clamp_exn = Core_Signal[22],
    clamp = Core_Signal[23],
    comparator = Core_Signal[24],
    validate_lbound = Core_Signal[25],
    validate_ubound = Core_Signal[26],
    validate_bound = Core_Signal[27],
    Replace_polymorphic_compare = Core_Signal[28],
    Map = Core_Signal[29],
    Set = Core_Signal[30],
    compare = Core_Signal[31],
    hash_fold_t = Core_Signal[32],
    hash = Core_Signal[33],
    hashable = Core_Signal[34],
    Table = Core_Signal[35],
    Hash_set = Core_Signal[36],
    Hash_queue = Core_Signal[37],
    of_string = Core_Signal[38],
    equal = Core_Signal[39],
    of_caml_int = Core_Signal[40],
    to_caml_int = Core_Signal[41],
    to_string = Core_Signal[42],
    sexp_of_sys_behavior = Core_Signal[43],
    sys_behavior_of_sexp = Core_Signal[44],
    sys_behavior_of_sexp$0 = Core_Signal[45],
    default_sys_behavior = Core_Signal[46],
    abrt = Core_Signal[49],
    alrm = Core_Signal[50],
    bus = Core_Signal[51],
    chld = Core_Signal[52],
    cont = Core_Signal[53],
    fpe = Core_Signal[54],
    hup = Core_Signal[55],
    ill = Core_Signal[56],
    int$0 = Core_Signal[57],
    kill = Core_Signal[58],
    pipe = Core_Signal[59],
    poll = Core_Signal[60],
    prof = Core_Signal[61],
    quit = Core_Signal[62],
    segv = Core_Signal[63],
    sys = Core_Signal[64],
    stop = Core_Signal[65],
    term = Core_Signal[66],
    trap = Core_Signal[67],
    tstp = Core_Signal[68],
    ttin = Core_Signal[69],
    ttou = Core_Signal[70],
    urg = Core_Signal[71],
    usr1 = Core_Signal[72],
    usr2 = Core_Signal[73],
    vtalrm = Core_Signal[74],
    xcpu = Core_Signal[75],
    xfsz = Core_Signal[76],
    zero = Core_Signal[77],
    can_send_to = Core_Signal[78],
    of_system_int = Core_Signal[79],
    send = Core_Signal[80],
    send_exn = Core_Signal[81],
    send_i = Core_Signal[82],
    sexp_of_pid_spec = Core_Signal[83],
    sigpending = Core_Signal[84],
    sigprocmask = Core_Signal[85],
    sigsuspend = Core_Signal[86],
    to_system_int = Core_Signal[87],
    Stable = Core_Signal[89],
    _b_ = [0, cst_src_signal_ml, 6, 36],
    _a_ = [0, cst_src_signal_ml, 5, 44],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Signal = cst_Async_unix_Signal$0;
   function handle_default(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function ignore(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   var the_one_and_only = Async_unix_Raw_scheduler[92];
   function handle(stop, ts, f){
    var
     scheduler = caml_call1(the_one_and_only, 0),
     signal_manager = scheduler[15],
     _d_ = caml_call1(Async_unix_Raw_scheduler[16], f),
     _e_ = caml_call1(Core[267], _d_),
     handler =
       caml_call3(Async_unix_Signal_manager[8], signal_manager, ts, _e_);
    function _f_(stop){
     function _g_(param){
      return caml_call2(Async_unix_Signal_manager[9], signal_manager, handler);
     }
     return caml_call2(Async_unix_Import[22], stop, _g_);
    }
    return caml_call2(Core_Option[46], stop, _f_);
   }
   var
    terminating =
      [0, alrm, [0, hup, [0, int$0, [0, term, [0, usr1, [0, usr2, 0]]]]]];
   function manage_by_async(ts){
    var
     scheduler = caml_call1(the_one_and_only, 0),
     signal_manager = scheduler[15];
    function _c_(t){
     return caml_call2(Async_unix_Signal_manager[5], signal_manager, t);
    }
    return caml_call2(Core_List[19], ts, _c_);
   }
   function is_managed_by_async(t){
    var
     scheduler = caml_call1(the_one_and_only, 0),
     signal_manager = scheduler[15];
    return caml_call2(Async_unix_Signal_manager[6], signal_manager, t);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Signal);
   var
    Async_unix_Signal =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       sexp_of_t,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       compare,
       hash_fold_t,
       hash,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       of_string,
       equal,
       of_caml_int,
       to_caml_int,
       to_string,
       sexp_of_sys_behavior,
       sys_behavior_of_sexp,
       sys_behavior_of_sexp$0,
       default_sys_behavior,
       abrt,
       alrm,
       bus,
       chld,
       cont,
       fpe,
       hup,
       ill,
       int$0,
       kill,
       pipe,
       poll,
       prof,
       quit,
       segv,
       sys,
       stop,
       term,
       trap,
       tstp,
       ttin,
       ttou,
       urg,
       usr1,
       usr2,
       vtalrm,
       xcpu,
       xfsz,
       zero,
       can_send_to,
       of_system_int,
       send,
       send_exn,
       send_i,
       sexp_of_pid_spec,
       sigpending,
       sigprocmask,
       sigsuspend,
       to_system_int,
       Stable,
       handle_default,
       ignore,
       handle,
       manage_by_async,
       terminating,
       is_managed_by_async];
   runtime.caml_register_global
    (21, Async_unix_Signal, cst_Async_unix_Signal$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Unix_syscalls
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_list, Async_kernel__Execution_context, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler, Async_kernel__Throttle, Async_unix__Clock, Async_unix__Fd, Async_unix__Import, Async_unix__In_thread, Async_unix__Io_uring, Async_unix__Io_uring_raw, Async_unix__Io_uring_raw_singleton, Async_unix__Raw_scheduler, Async_unix__Signal, Base__Hash, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, CamlinternalLazy, Core, Core__Command_internal, Core__Comparable, Core__Core_sys, Core__Fn, Core__Host_and_port, Core__Info, Core__Int, Core__Int64, Core__List, Core__Option, Core__Or_error, Core__Pid, Core__Printf, Core__Result, Core__Sexp, Core__Sexpable, Core__Signal, Core_unix, Core_unix__File_descr, Linux_ext, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Sys_unix, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_ADDR_INET$1 = "ADDR_INET",
    cst_ADDR_UNIX$1 = "ADDR_UNIX",
    cst_AI_CANONNAME = "AI_CANONNAME",
    cst_AI_FAMILY$0 = "AI_FAMILY",
    cst_AI_NUMERICHOST = "AI_NUMERICHOST",
    cst_AI_PASSIVE = "AI_PASSIVE",
    cst_AI_PROTOCOL$0 = "AI_PROTOCOL",
    cst_AI_SOCKTYPE$0 = "AI_SOCKTYPE",
    cst_Async_unix_Unix_syscalls$0 = "Async_unix__Unix_syscalls",
    cst_Block$0 = "Block",
    cst_Char$0 = "Char",
    cst_Directory$0 = "Directory",
    cst_Fifo$0 = "Fifo",
    cst_File$0 = "File",
    cst_Flock = "Flock",
    cst_Inet$1 = "Inet",
    cst_Link$0 = "Link",
    cst_Lockf = "Lockf",
    cst_NI_DGRAM = "NI_DGRAM",
    cst_NI_NAMEREQD = "NI_NAMEREQD",
    cst_NI_NOFQDN = "NI_NOFQDN",
    cst_NI_NUMERICHOST = "NI_NUMERICHOST",
    cst_NI_NUMERICSERV = "NI_NUMERICSERV",
    cst_PF_INET = "PF_INET",
    cst_PF_INET6 = "PF_INET6",
    cst_PF_UNIX = "PF_UNIX",
    cst_SOCK_DGRAM = "SOCK_DGRAM",
    cst_SOCK_RAW = "SOCK_RAW",
    cst_SOCK_SEQPACKET = "SOCK_SEQPACKET",
    cst_SOCK_STREAM = "SOCK_STREAM",
    cst_Socket$0 = "Socket",
    cst_Unix$0 = "Unix",
    cst$2 = "_",
    cst_aDDR_INET = "aDDR_INET",
    cst_aDDR_UNIX = "aDDR_UNIX",
    cst_aI_CANONNAME = "aI_CANONNAME",
    cst_aI_FAMILY = "aI_FAMILY",
    cst_aI_NUMERICHOST = "aI_NUMERICHOST",
    cst_aI_PASSIVE = "aI_PASSIVE",
    cst_aI_PROTOCOL = "aI_PROTOCOL",
    cst_aI_SOCKTYPE = "aI_SOCKTYPE",
    cst_access$1 = "access",
    cst_ai_addr$2 = "ai_addr",
    cst_ai_canonname$2 = "ai_canonname",
    cst_ai_family$2 = "ai_family",
    cst_ai_protocol$2 = "ai_protocol",
    cst_ai_socktype$2 = "ai_socktype",
    cst_async_unix$0 = "async_unix",
    cst_atime$1 = "atime",
    cst_bound_on = "bound_on",
    cst_ctime$1 = "ctime",
    cst_dev$1 = "dev",
    cst_dir$0 = "dir",
    cst_file_perm$1 = "file_perm",
    cst_flock$0 = "flock",
    cst_fstat$1 = "fstat",
    cst_gecos$0 = "gecos",
    cst_getaddrinfo_option$1 = "getaddrinfo_option",
    cst_gethostbyaddr$1 = "gethostbyaddr",
    cst_gethostbyname$1 = "gethostbyname",
    cst_getnameinfo_option$1 = "getnameinfo_option",
    cst_gid$3 = "gid",
    cst_ino$1 = "ino",
    cst_kind$1 = "kind",
    cst_listening_on = "listening_on",
    cst_lockf$0 = "lockf",
    cst_mem$0 = "mem",
    cst_mkdir$1 = "mkdir",
    cst_mode = "mode",
    cst_mtime$1 = "mtime",
    cst_nI_DGRAM = "nI_DGRAM",
    cst_nI_NAMEREQD = "nI_NAMEREQD",
    cst_nI_NOFQDN = "nI_NOFQDN",
    cst_nI_NUMERICHOST = "nI_NUMERICHOST",
    cst_nI_NUMERICSERV = "nI_NUMERICSERV",
    cst_name$1 = "name",
    cst_ni_hostname$1 = "ni_hostname",
    cst_ni_service$1 = "ni_service",
    cst_nlink$1 = "nlink",
    cst_pF_INET = "pF_INET",
    cst_pF_INET6 = "pF_INET6",
    cst_pF_UNIX = "pF_UNIX",
    cst_passwd$1 = "passwd",
    cst_perm$1 = "perm",
    cst_rdev$1 = "rdev",
    cst_sOCK_DGRAM = "sOCK_DGRAM",
    cst_sOCK_RAW = "sOCK_RAW",
    cst_sOCK_SEQPACKET = "sOCK_SEQPACKET",
    cst_sOCK_STREAM = "sOCK_STREAM",
    cst_shell$0 = "shell",
    cst_size$1 = "size",
    cst_sockaddr$1 = "sockaddr",
    cst_sockaddr_blocking_sexp$1 = "sockaddr_blocking_sexp",
    cst_socket$2 = "socket",
    cst_socket_domain$1 = "socket_domain",
    cst_socket_type$1 = "socket_type",
    cst_src_unix_syscalls_ml = "src/unix_syscalls.ml",
    cst_src_unix_syscalls_ml_Addr_$3 =
      "src/unix_syscalls.ml.Addr_info.Blocking_sexp.t",
    cst_src_unix_syscalls_ml_Addr_$2 =
      "src/unix_syscalls.ml.Addr_info.getaddrinfo_option",
    cst_src_unix_syscalls_ml_File_ = "src/unix_syscalls.ml.File_kind.T.t",
    cst_src_unix_syscalls_ml_Name_$1 =
      "src/unix_syscalls.ml.Name_info.getnameinfo_option",
    cst_src_unix_syscalls_ml_Name_$2 = "src/unix_syscalls.ml.Name_info.t",
    cst_src_unix_syscalls_ml_Socke =
      "src/unix_syscalls.ml.Socket.Address.Blocking_sexp.t",
    cst_src_unix_syscalls_ml_Socke$1 =
      "src/unix_syscalls.ml.Socket.Address.Inet.Blocking_sexp.t",
    cst_src_unix_syscalls_ml_Socke$0 =
      "src/unix_syscalls.ml.Socket.Address.Unix.t",
    cst_src_unix_syscalls_ml_Stats$0 = "src/unix_syscalls.ml.Stats.t",
    cst_src_unix_syscalls_ml_socka$2 = "src/unix_syscalls.ml.sockaddr",
    cst_src_unix_syscalls_ml_socka$1 =
      "src/unix_syscalls.ml.sockaddr_blocking_sexp",
    cst_src_unix_syscalls_ml_socke$2 = "src/unix_syscalls.ml.socket_domain",
    cst_src_unix_syscalls_ml_socke$1 = "src/unix_syscalls.ml.socket_type",
    cst_t$19 = "t",
    cst_t_fd = "t.fd",
    cst_uid$2 = "uid",
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    err$4 = [2, cst_src_unix_syscalls_ml_Socke],
    err$3 = [2, "src/unix_syscalls.ml.Socket.Address.t"],
    err$2 = [2, cst_src_unix_syscalls_ml_Socke$0],
    err$1 = [2, cst_src_unix_syscalls_ml_Socke$1],
    err$0 = [2, "src/unix_syscalls.ml.Socket.Address.Inet.t"],
    cst = cst$1,
    err = [2, cst_src_unix_syscalls_ml_File_],
    all = [0, 0, [0, 1, 0]],
    error_source_012 = "src/unix_syscalls.ml.Lock_mechanism.T.t",
    error_source_028 = cst_src_unix_syscalls_ml_File_,
    error_source_030 = cst_src_unix_syscalls_ml_File_,
    error_source_032 = cst_src_unix_syscalls_ml_Stats$0,
    error_source_065 = "src/unix_syscalls.ml.wait_on",
    error_source_109 = cst_src_unix_syscalls_ml_Socke$1,
    error_source_113 = cst_src_unix_syscalls_ml_Socke$1,
    error_source_136 = cst_src_unix_syscalls_ml_Socke$0,
    error_source_138 = cst_src_unix_syscalls_ml_Socke$0,
    error_source_144 = cst_src_unix_syscalls_ml_Socke,
    error_source_170 = cst_src_unix_syscalls_ml_socke$2,
    error_source_176 = cst_src_unix_syscalls_ml_socke$1,
    error_source_194 = cst_src_unix_syscalls_ml_socka$1,
    error_source_226 = cst_src_unix_syscalls_ml_Addr_$3,
    error_source_241 = cst_src_unix_syscalls_ml_Addr_$2,
    error_source_265 = cst_src_unix_syscalls_ml_Name_$2,
    error_source_274 = cst_src_unix_syscalls_ml_Name_$1,
    error_source_277 = "src/unix_syscalls.ml.Passwd.t",
    error_source_295 = "src/unix_syscalls.ml.Group.t",
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Core_unix = global_data.Core_unix,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Core_Info = global_data.Core__Info,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_unix_Import = global_data.Async_unix__Import,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Core_List = global_data.Core__List,
    Core_Sexp = global_data.Core__Sexp,
    Core_Host_and_port = global_data.Core__Host_and_port,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Core_Pid = global_data.Core__Pid,
    Core_Result = global_data.Core__Result,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Signal = global_data.Core__Signal,
    Async_unix_Signal = global_data.Async_unix__Signal,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Core_Fn = global_data.Core__Fn,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton,
    Async_unix_Io_uring = global_data.Async_unix__Io_uring,
    Time_float_unix = global_data.Time_float_unix,
    Async_unix_Io_uring_raw = global_data.Async_unix__Io_uring_raw,
    Core_Int64 = global_data.Core__Int64,
    Core_Option = global_data.Core__Option,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_Printf = global_data.Core__Printf,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Linux_ext = global_data.Linux_ext,
    Core_Or_error = global_data.Core__Or_error,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Sexpable = global_data.Core__Sexpable,
    Core_Command_internal = global_data.Core__Command_internal,
    Core_Comparable = global_data.Core__Comparable,
    Core_Core_sys = global_data.Core__Core_sys,
    Sys_unix = global_data.Sys_unix;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Unix_syscalls$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_unix_syscalls_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "unix_syscalls.ml");
   var
    Unix_error = Core_unix[4],
    include = Async_unix_Fd[11],
    close = include[1],
    deregister = include[2],
    cst_wordexp = "wordexp",
    cst_getlogin = "getlogin",
    cst_username = "username",
    _c5_ = [0, cst_mem$0],
    _c6_ = [0, cst_gid$3],
    _c7_ = [0, cst_passwd$1],
    _c8_ = [0, cst_name$1],
    cst_mem = cst_mem$0,
    cst_gid$2 = cst_gid$3,
    cst_passwd$0 = cst_passwd$1,
    cst_name$0 = cst_name$1,
    _cY_ = [0, cst_shell$0],
    _cZ_ = [0, cst_dir$0],
    _c0_ = [0, cst_gecos$0],
    _c1_ = [0, cst_gid$3],
    _c2_ = [0, cst_uid$2],
    _c3_ = [0, cst_passwd$1],
    _c4_ = [0, cst_name$1],
    cst_shell = cst_shell$0,
    cst_dir = cst_dir$0,
    cst_gecos = cst_gecos$0,
    cst_gid$1 = cst_gid$3,
    cst_uid$1 = cst_uid$2,
    cst_passwd = cst_passwd$1,
    cst_name = cst_name$1,
    cst_tcsetattr = "tcsetattr",
    cst_tcgetattr = "tcgetattr",
    cst_getnameinfo = "getnameinfo",
    _cV_ = [1, cst_src_unix_syscalls_ml_Name_$1],
    cst_src_unix_syscalls_ml_Name_$0 = cst_src_unix_syscalls_ml_Name_$1,
    _cL_ = [0, cst_NI_NOFQDN],
    _cM_ = [0, cst_NI_NUMERICHOST],
    _cN_ = [0, cst_NI_NAMEREQD],
    _cO_ = [0, cst_NI_NUMERICSERV],
    _cP_ = [0, cst_NI_DGRAM],
    _cJ_ = [0, cst_ni_service$1],
    _cK_ = [0, cst_ni_hostname$1],
    cst_ni_service$0 = cst_ni_service$1,
    cst_ni_hostname$0 = cst_ni_hostname$1,
    cst_src_unix_syscalls_ml_Name_ = cst_src_unix_syscalls_ml_Name_$2,
    cst_getaddrinfo = "getaddrinfo",
    _cz_ = [0, cst_AI_NUMERICHOST],
    _cA_ = [0, cst_AI_CANONNAME],
    _cB_ = [0, cst_AI_PASSIVE],
    _cC_ = [0, cst_AI_FAMILY$0],
    _cD_ = [0, cst_AI_SOCKTYPE$0],
    _cE_ = [0, cst_AI_PROTOCOL$0],
    _cy_ = [1, cst_src_unix_syscalls_ml_Addr_$2],
    cst_src_unix_syscalls_ml_Addr_$1 = cst_src_unix_syscalls_ml_Addr_$2,
    _co_ = [0, cst_ai_canonname$2],
    _cp_ = [0, cst_ai_addr$2],
    _cq_ = [0, cst_ai_protocol$2],
    _cr_ = [0, cst_ai_socktype$2],
    _cs_ = [0, cst_ai_family$2],
    cst_ai_canonname$1 = cst_ai_canonname$2,
    cst_ai_addr$1 = cst_ai_addr$2,
    cst_ai_protocol$1 = cst_ai_protocol$2,
    cst_ai_socktype$1 = cst_ai_socktype$2,
    cst_ai_family$1 = cst_ai_family$2,
    cst_src_unix_syscalls_ml_Addr_$0 = cst_src_unix_syscalls_ml_Addr_$3,
    _cf_ = [0, cst_ai_canonname$2],
    _cg_ = [0, cst_ai_addr$2],
    _ch_ = [0, cst_ai_protocol$2],
    _ci_ = [0, cst_ai_socktype$2],
    _cj_ = [0, cst_ai_family$2],
    cst_src_unix_syscalls_ml_Addr_ = "src/unix_syscalls.ml.Addr_info.t",
    _b$_ = [0, cst_ADDR_UNIX$1],
    _ca_ = [0, cst_ADDR_INET$1],
    _b__ = [1, cst_src_unix_syscalls_ml_socka$1],
    cst_src_unix_syscalls_ml_socka$0 = cst_src_unix_syscalls_ml_socka$1,
    _b4_ = [0, cst_ADDR_UNIX$1],
    _b5_ = [0, cst_ADDR_INET$1],
    _b3_ = [1, cst_src_unix_syscalls_ml_socka$2],
    cst_src_unix_syscalls_ml_socka = cst_src_unix_syscalls_ml_socka$2,
    _bV_ = [0, cst_SOCK_STREAM],
    _bW_ = [0, cst_SOCK_DGRAM],
    _bX_ = [0, cst_SOCK_RAW],
    _bY_ = [0, cst_SOCK_SEQPACKET],
    _bU_ = [1, cst_src_unix_syscalls_ml_socke$1],
    cst_src_unix_syscalls_ml_socke$0 = cst_src_unix_syscalls_ml_socke$1,
    _bM_ = [0, cst_PF_UNIX],
    _bN_ = [0, cst_PF_INET],
    _bO_ = [0, cst_PF_INET6],
    _bL_ = [1, cst_src_unix_syscalls_ml_socke$2],
    cst_src_unix_syscalls_ml_socke = cst_src_unix_syscalls_ml_socke$2,
    cst_gethostbyaddr$0 = cst_gethostbyaddr$1,
    cst_gethostbyaddr = cst_gethostbyaddr$1,
    cst_gethostbyname$0 = cst_gethostbyname$1,
    cst_gethostbyname = cst_gethostbyname$1,
    cst_socketpair = "<socketpair>",
    _bF_ = [0, -891636250],
    _bE_ = [0, 1],
    _bC_ = [0, cst_src_unix_syscalls_ml, 1302, 22],
    _bB_ = [0, cst_t_fd],
    cst_close_during_connect = "close during connect",
    _bA_ = [0, cst_t_fd],
    cst_close_after_connect = "close after connect",
    cst_connect_on_bad_file_descri = "connect on bad file descriptor",
    cst_connect = "connect",
    _bz_ = [0, cst_t_fd],
    cst_close_before_connect = "close before connect",
    cst_connected_to = "connected to",
    _bx_ = [0, -891636250],
    _by_ = [0, 1],
    _bw_ = [0, "limit"],
    cst_Socket_accept_at_most_inte =
      "[Socket.accept_at_most_interruptible] got [limit] < 1",
    cst_accept_on_bad_file_descrip = "accept on bad file descriptor",
    _bu_ = [0, 990972795, 0],
    _bv_ = [0, -289386606, -177230888],
    _br_ = [0, cst_listening_on],
    _bs_ = [0, "client"],
    _bp_ = [0, 1],
    _bq_ = [0, 1],
    cst_socket$1 = cst_socket$2,
    _bt_ = [0, -891636250],
    cst_listening = "listening",
    _bo_ = [0, -893685881],
    cst_bind = "bind",
    _bn_ = [0, cst_bound_on],
    cst_socket$0 = cst_socket$2,
    _bm_ = [0, -903208930],
    _bc_ = [0, cst$2],
    _bb_ = [0, 1],
    cst_socket = cst_socket$2,
    _bd_ = [0, 214958384],
    _ba_ = [0, cst$2],
    cst_tcp = "tcp",
    cst_udp = "udp",
    _a8_ = [0, cst_listening_on],
    _a9_ = [0, cst_bound_on],
    _a__ = [0, "type_"],
    _a$_ = [0, "connected_to"],
    _a6_ = [0, cst_socket_type$1],
    _a7_ = [0, "family"],
    cst_unix = "unix",
    cst_inet = "inet",
    cst_inet6 = "inet6",
    _a5_ = [0, 0],
    cst_Socket_Address_unix = "Socket.Address.unix",
    _aM_ = [0, cst_Unix$0],
    cst_Socket_Address_inet = "Socket.Address.inet",
    cst_0_0_0_0 = "0.0.0.0",
    _aE_ = [0, cst_Inet$1],
    _aD_ = [0, cst_Inet$1],
    cst_PORT = "PORT",
    _au_ = [0, [2, 0, [12, 58, [2, 0, 0]]], "%s:%s"],
    cst_getbyname = "getbyname",
    _aj_ = [0, "exit_or_signal"],
    _ak_ = [0, "child_pid"],
    cst_child_process_didn_t_exit_ = "child process didn't exit with status 0",
    cst_src_unix_syscalls_ml_735_7 = "src/unix_syscalls.ml:735:78",
    cst_already_handling_SIGCHLD = "already handling SIGCHLD",
    _ai_ = [0, cst_src_unix_syscalls_ml, 688, 8],
    cst_utimes = "utimes",
    cst_getgrouplist = "getgrouplist",
    cst_mkstemp = "mkstemp",
    cst_mkdtemp = "mkdtemp",
    cst_readlink = "readlink",
    cst_symlink = "symlink",
    cst_mkfifo = "mkfifo",
    _ah_ = [0, 1],
    cst_writer = "writer",
    cst_reader = "reader",
    cst_pipe = "pipe",
    cst_closedir = "closedir",
    cst_rewinddir = "rewinddir",
    cst_readdir = "readdir",
    cst_opendir = "opendir",
    cst_getcwd = "getcwd",
    cst_chroot = "chroot",
    cst_chdir = "chdir",
    cst_rmdir = "rmdir",
    cst_mkdir = cst_mkdir$1,
    cst_mkdir$0 = cst_mkdir$1,
    cst_access$0 = cst_access$1,
    cst_access = cst_access$1,
    _af_ = [0, 3804260],
    _ag_ = [0, 523273847],
    cst_fchown = "fchown",
    cst_chown = "chown",
    cst_fchmod = "fchmod",
    cst_chmod = "chmod",
    cst_link = "link",
    cst_rename = "rename",
    cst_remove = "remove",
    cst_unlink = "unlink",
    cst_isatty = "isatty",
    cst_lstat = "lstat",
    cst_stat = "stat",
    cst_fstat$0 = cst_fstat$1,
    cst_src_unix_syscalls_ml_Stats = cst_src_unix_syscalls_ml_Stats$0,
    _R_ = [0, cst_ctime$1],
    _S_ = [0, cst_mtime$1],
    _T_ = [0, cst_atime$1],
    _U_ = [0, cst_size$1],
    _V_ = [0, cst_rdev$1],
    _W_ = [0, cst_gid$3],
    _X_ = [0, cst_uid$2],
    _Y_ = [0, cst_nlink$1],
    _Z_ = [0, cst_perm$1],
    ___ = [0, cst_kind$1],
    _$_ = [0, cst_ino$1],
    _aa_ = [0, cst_dev$1],
    cst_ctime = cst_ctime$1,
    cst_mtime = cst_mtime$1,
    cst_atime = cst_atime$1,
    cst_size = cst_size$1,
    cst_rdev = cst_rdev$1,
    cst_gid = cst_gid$3,
    cst_uid = cst_uid$2,
    cst_nlink = cst_nlink$1,
    cst_perm = cst_perm$1,
    cst_kind = cst_kind$1,
    cst_ino = cst_ino$1,
    cst_dev = cst_dev$1,
    cst_fstat = cst_fstat$1,
    _y_ = [0, cst_Link$0],
    _z_ = [0, cst_Directory$0],
    _A_ = [0, cst_File$0],
    _B_ = [0, cst_Fifo$0],
    _D_ = [0, cst_Char$0],
    _E_ = [0, cst_Block$0],
    _C_ = [0, cst_Socket$0],
    _w_ = [0, "mechanism"],
    _x_ = [0, cst_mode],
    _u_ = [0, cst_Flock],
    _v_ = [0, cst_Lockf],
    cst_flock = cst_flock$0,
    _t_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _s_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _r_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _q_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_lockf = cst_lockf$0,
    _o_ = [0, "Exclusive"],
    _p_ = [0, "Shared"],
    cst_sync = "sync",
    cst_fdatasync = "fdatasync",
    cst_fsync = "fsync",
    cst_ftruncate = "ftruncate",
    cst_truncate = "truncate",
    cst_lseek = "lseek",
    cst_fcntl_setfl = "fcntl_setfl",
    cst_fcntl_getfl = "fcntl_getfl",
    _n_ = [0, 13, 0],
    cst_openfile = "openfile",
    _j_ = [0, [11, "0o", [4, 10, 0, 0, 0]], "0o%o"],
    _k_ = [0, cst_perm$1],
    _l_ = [0, cst_mode],
    _m_ = [0, "filename"],
    cst_open = "open",
    cst_Async_Unix_syscalls_openfi =
      "Async.Unix_syscalls.openfile: must provide at least one access flag",
    _g_ = [0, cst_src_unix_syscalls_ml, 82, 18],
    _h_ = [0, cst_src_unix_syscalls_ml, 83, 18],
    _i_ = [0, cst_src_unix_syscalls_ml, 84, 16],
    cst_cores = "cores",
    _a_ = [0, "status"],
    cst_shell_command_failed = "shell command failed",
    cst_system = "system",
    cst_file_perm = cst_file_perm$1,
    cst_src_unix_syscalls_ml_75_0 = "src/unix_syscalls.ml:75:0",
    cst_file_perm$0 = cst_file_perm$1,
    cst_Socket = cst_Socket$0,
    cst_Fifo = cst_Fifo$0,
    cst_Link = cst_Link$0,
    cst_Block = cst_Block$0,
    cst_Char = cst_Char$0,
    cst_Directory = cst_Directory$0,
    cst_File = cst_File$0,
    cst_src_unix_syscalls_ml_341_6 = "src/unix_syscalls.ml:341:6",
    cst_t = cst_t$19,
    cst_src_unix_syscalls_ml_340_4 = "src/unix_syscalls.ml:340:4",
    cst_t$0 = cst_t$19,
    cst_ctime$0 = cst_ctime$1,
    cst_mtime$0 = cst_mtime$1,
    cst_atime$0 = cst_atime$1,
    cst_size$0 = cst_size$1,
    cst_rdev$0 = cst_rdev$1,
    cst_gid$0 = cst_gid$3,
    cst_uid$0 = cst_uid$2,
    cst_nlink$0 = cst_nlink$1,
    cst_perm$0 = cst_perm$1,
    cst_kind$0 = cst_kind$1,
    cst_ino$0 = cst_ino$1,
    cst_dev$0 = cst_dev$1,
    cst_t$1 = cst_t$19,
    cst_src_unix_syscalls_ml_388_2 = "src/unix_syscalls.ml:388:2",
    cst_t$2 = cst_t$19,
    cst_Inet = cst_Inet$1,
    cst_src_unix_syscalls_ml_814_1 = "src/unix_syscalls.ml:814:15",
    cst_t$3 = cst_t$19,
    cst_src_unix_syscalls_ml_814_6 = "src/unix_syscalls.ml:814:6",
    cst_t$4 = cst_t$19,
    cst_Inet$0 = cst_Inet$1,
    cst_src_unix_syscalls_ml_829_1 = "src/unix_syscalls.ml:829:17",
    cst_t$5 = cst_t$19,
    cst_src_unix_syscalls_ml_829_8 = "src/unix_syscalls.ml:829:8",
    cst_t$6 = cst_t$19,
    cst_Unix = cst_Unix$0,
    cst_src_unix_syscalls_ml_858_1 = "src/unix_syscalls.ml:858:15",
    cst_t$7 = cst_t$19,
    cst_src_unix_syscalls_ml_858_6 = "src/unix_syscalls.ml:858:6",
    cst_t$8 = cst_t$19,
    cst_src_unix_syscalls_ml_873_8 = "src/unix_syscalls.ml:873:8",
    cst_src_unix_syscalls_ml_872_8 = "src/unix_syscalls.ml:872:8",
    cst_src_unix_syscalls_ml_872_6 = "src/unix_syscalls.ml:872:6",
    cst_t$9 = cst_t$19,
    cst_src_unix_syscalls_ml_871_4 = "src/unix_syscalls.ml:871:4",
    cst_t$10 = cst_t$19,
    cst_src_unix_syscalls_ml_880_1 = "src/unix_syscalls.ml:880:10",
    cst_src_unix_syscalls_ml_879_1 = "src/unix_syscalls.ml:879:10",
    cst_src_unix_syscalls_ml_879_8 = "src/unix_syscalls.ml:879:8",
    cst_t$11 = cst_t$19,
    cst_src_unix_syscalls_ml_878_6 = "src/unix_syscalls.ml:878:6",
    cst_t$12 = cst_t$19,
    cst_debug = "debug",
    cst_broadcast = "broadcast",
    cst_reuseaddr = "reuseaddr",
    cst_reuseport = "reuseport",
    cst_keepalive = "keepalive",
    cst_dontroute = "dontroute",
    cst_oobinline = "oobinline",
    cst_acceptconn = "acceptconn",
    cst_nodelay = "nodelay",
    cst_sndbuf = "sndbuf",
    cst_rcvbuf = "rcvbuf",
    cst_error = "error",
    cst_typ = "typ",
    cst_rcvlowat = "rcvlowat",
    cst_sndlowat = "sndlowat",
    cst_linger = "linger",
    cst_rcvtimeo = "rcvtimeo",
    cst_sndtimeo = "sndtimeo",
    cst_mcast_loop = "mcast_loop",
    cst_mcast_ttl = "mcast_ttl",
    _bG_ =
      [0,
       [0, cst_PF_UNIX, 0],
       [0, [0, cst_PF_INET, 0], [0, [0, cst_PF_INET6, 0], 0]]],
    cst_socket_domain = cst_socket_domain$1,
    cst_src_unix_syscalls_ml_1366_ = "src/unix_syscalls.ml:1366:0",
    cst_socket_domain$0 = cst_socket_domain$1,
    _bP_ =
      [0,
       [0, cst_SOCK_STREAM, 0],
       [0,
        [0, cst_SOCK_DGRAM, 0],
        [0, [0, cst_SOCK_RAW, 0], [0, [0, cst_SOCK_SEQPACKET, 0], 0]]]],
    cst_socket_type = cst_socket_type$1,
    cst_src_unix_syscalls_ml_1372_ = "src/unix_syscalls.ml:1372:0",
    cst_socket_type$0 = cst_socket_type$1,
    cst_ADDR_INET = cst_ADDR_INET$1,
    cst_ADDR_UNIX = cst_ADDR_UNIX$1,
    cst_sockaddr = cst_sockaddr$1,
    cst_src_unix_syscalls_ml_1379_ = "src/unix_syscalls.ml:1379:0",
    cst_sockaddr$0 = cst_sockaddr$1,
    cst_ADDR_INET$0 = cst_ADDR_INET$1,
    cst_ADDR_UNIX$0 = cst_ADDR_UNIX$1,
    cst_sockaddr_blocking_sexp = cst_sockaddr_blocking_sexp$1,
    cst_src_unix_syscalls_ml_1384_ = "src/unix_syscalls.ml:1384:0",
    cst_sockaddr_blocking_sexp$0 = cst_sockaddr_blocking_sexp$1,
    cst_ai_canonname = cst_ai_canonname$2,
    cst_ai_addr = cst_ai_addr$2,
    cst_ai_protocol = cst_ai_protocol$2,
    cst_ai_socktype = cst_ai_socktype$2,
    cst_ai_family = cst_ai_family$2,
    cst_t$13 = cst_t$19,
    cst_src_unix_syscalls_ml_1390_ = "src/unix_syscalls.ml:1390:2",
    cst_t$14 = cst_t$19,
    cst_ai_canonname$0 = cst_ai_canonname$2,
    cst_ai_addr$0 = cst_ai_addr$2,
    cst_ai_protocol$0 = cst_ai_protocol$2,
    cst_ai_socktype$0 = cst_ai_socktype$2,
    cst_ai_family$0 = cst_ai_family$2,
    cst_t$15 = cst_t$19,
    cst_src_unix_syscalls_ml_1400_ = "src/unix_syscalls.ml:1400:4",
    cst_t$16 = cst_t$19,
    _ct_ =
      [0,
       [0, cst_AI_NUMERICHOST, 0],
       [0, [0, cst_AI_CANONNAME, 0], [0, [0, cst_AI_PASSIVE, 0], 0]]],
    cst_AI_PROTOCOL = cst_AI_PROTOCOL$0,
    cst_AI_SOCKTYPE = cst_AI_SOCKTYPE$0,
    cst_AI_FAMILY = cst_AI_FAMILY$0,
    cst_getaddrinfo_option = cst_getaddrinfo_option$1,
    cst_src_unix_syscalls_ml_1410_ = "src/unix_syscalls.ml:1410:2",
    cst_getaddrinfo_option$0 = cst_getaddrinfo_option$1,
    cst_ni_service = cst_ni_service$1,
    cst_ni_hostname = cst_ni_hostname$1,
    cst_t$17 = cst_t$19,
    cst_src_unix_syscalls_ml_1425_ = "src/unix_syscalls.ml:1425:2",
    cst_t$18 = cst_t$19,
    _cQ_ =
      [0,
       [0, cst_NI_NOFQDN, 0],
       [0,
        [0, cst_NI_NUMERICHOST, 0],
        [0,
         [0, cst_NI_NAMEREQD, 0],
         [0, [0, cst_NI_NUMERICSERV, 0], [0, [0, cst_NI_DGRAM, 0], 0]]]]],
    cst_getnameinfo_option = cst_getnameinfo_option$1,
    cst_src_unix_syscalls_ml_1431_ = "src/unix_syscalls.ml:1431:2",
    cst_getnameinfo_option$0 = cst_getnameinfo_option$1,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Unix_syscalls = cst_Async_unix_Unix_syscalls$0;
   function system(s){
    function _jK_(param){return caml_call1(Core_unix[33], s);}
    return caml_call2(Async_unix_In_thread[7], cst_system, _jK_);
   }
   function system_exn(s){
    function _jE_(status){
     var _jG_ = 1 - caml_call1(Core_Result[37], status);
     if(! _jG_) return _jG_;
     var
      _jH_ =
        [0, [1, [0, _a_, [0, caml_call1(Core_unix[15][7], status), 0]]], 0],
      _jI_ = [0, caml_call1(Core[558], s), _jH_],
      _jJ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_shell_command_failed),
          _jI_]];
     return caml_call1(Core[261], _jJ_);
    }
    var _jF_ = system(s);
    return caml_call2(Async_unix_Import[33][3], _jF_, _jE_);
   }
   function getpid(param){return caml_call1(Core_unix[34], 0);}
   function getppid(param){return caml_call1(Core_unix[35], 0);}
   function getppid_exn(param){return caml_call1(Core_unix[36], 0);}
   function this_process_became_child_of_i(opt, param){
    if(opt)
     var sth = opt[1], poll_delay = sth;
    else
     var poll_delay = caml_call1(Core[630], 1.);
    function _jy_(i){
     function _jz_(param){
      var
       _jB_ = Core_Pid[47],
       _jC_ = getppid_exn(0),
       _jD_ = caml_call2(Core_Pid[23], _jC_, _jB_);
      return _jD_ ? caml_call2(Async_kernel_Ivar[14], i, 0) : _jD_;
     }
     var _jA_ = [0, caml_call1(Async_kernel_Ivar[19], i)];
     return caml_call5(Async_unix_Clock[11], 0, _jA_, 0, poll_delay, _jz_);
    }
    return caml_call1(Async_kernel_Deferred[3], _jy_);
   }
   function nice(i){return caml_call1(Core_unix[41], i);}
   function _b_(cores, param){
    return caml_call2(Async_unix_In_thread[7], cst_cores, cores);
   }
   var cores = caml_call2(Core_Or_error[53], Linux_ext[47], _b_);
   function convert_open_flag(param){
    return 654843454 <= param
            ? 771169788
              <= param
              ? 914344045
                <= param
                ? 926475899 <= param ? 10 : 2
                : 913115943 <= param ? 1 : 7
              : 693908748 <= param ? 6 : 0
            : -545248983
              <= param
              ? 54217645
                <= param
                ? 627796288 <= param ? 3 : 11
                : -207672161 <= param ? 9 : 5
              : -619113641 <= param ? 8 : 4;
   }
   var
    file_perm_of_sexp = Core[390],
    sexp_of_file_perm = Core[389],
    _c_ = Core[372],
    _d_ = [0, [0, caml_call1(Bin_shape[2][1], cst_file_perm), 0, _c_], 0],
    _e_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_75_0),
    group = caml_call2(Bin_prot_Shape[2], _e_, _d_),
    _f_ = caml_call1(Bin_shape[2][1], cst_file_perm$0),
    bin_shape_file_perm =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _f_), 0),
    bin_size_file_perm = Core[373],
    bin_write_file_perm = Core[375],
    bin_read_file_perm = Core[378],
    compare_file_perm = Core[382];
   function convert_to_uring_flags(param){
    switch(param){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
      case 1:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      case 2:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
      case 3:
       return Async_unix_Io_uring_raw[5][16];
      case 4:
       return Async_unix_Io_uring_raw[5][5];
      case 5:
       return Async_unix_Io_uring_raw[5][7];
      case 6:
       return Async_unix_Io_uring_raw[5][20];
      case 7:
       return Async_unix_Io_uring_raw[5][11];
      case 8:
       return Async_unix_Io_uring_raw[5][14];
      case 9:
       return Async_unix_Io_uring_raw[5][10];
      case 10:
       return Async_unix_Io_uring_raw[5][18];
      case 11:
       return Async_unix_Io_uring_raw[5][18];
      case 12:
       return Async_unix_Io_uring_raw[5][4];
      case 13:
       return Async_unix_Io_uring_raw[5][6];
      default: return Async_unix_Io_uring_raw[5][4];
    }
   }
   function is_rw_flag(flag){return 3 <= flag ? 0 : 1;}
   function openfile(info, perm$0, file, mode){
    var
     _jl_ = caml_call2(Core_List[51], mode, convert_open_flag),
     unix_mode = caml_call2(Core[156], _jl_, _n_);
    function _jm_(file_descr){
     function _ju_(kind){
      var
       _jw_ = caml_call1(Core_Info[14], file),
       _jx_ = caml_call2(Core_Option[39], info, _jw_);
      return caml_call4(Async_unix_Fd[6], 0, kind, file_descr, _jx_);
     }
     var _jv_ = caml_call1(Async_unix_Fd[1][2], file_descr);
     return caml_call2(Async_unix_Import[33][3], _jv_, _ju_);
    }
    var match$2 = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match$2){
     var
      uring = match$2[1],
      match$1 = caml_call2(Core_List[15], unix_mode, is_rw_flag),
      flags = match$1[2],
      access = match$1[1],
      _jd_ = function(param){if(1 !== param && 3 > param) return 1; return 0;},
      match = caml_call2(Core_List[27], access, _jd_),
      _je_ = function(param){return 1 < param - 1 >>> 0 ? 0 : 1;},
      match$0 = caml_call2(Core_List[27], access, _je_),
      access$0 =
        match
         ? match$0 ? 18373 : 82
         : match$0 ? 87 : caml_call1(Core[6], cst_Async_Unix_syscalls_openfi),
      _jf_ = Async_unix_Io_uring_raw[5][2],
      _jg_ = Async_unix_Io_uring_raw[5][4],
      _jh_ = caml_call2(Core_List[51], flags, convert_to_uring_flags),
      flags$0 = caml_call3(Core_List[20], _jh_, _jg_, _jf_),
      perm_for_error = caml_call2(Core_Option[39], perm$0, 420);
     a:
     {
      var default_perm = 420;
      if
       (!
        caml_call2
         (Async_unix_Io_uring_raw[5][3],
          Async_unix_Io_uring_raw[5][7],
          flags$0)
        &&
         !
         caml_call2
          (Async_unix_Io_uring_raw[5][3],
           Async_unix_Io_uring_raw[5][19],
           flags$0)){
       var default_perm$0 = 0;
       break a;
      }
      var default_perm$0 = default_perm;
     }
     var
      perm = caml_call2(Core_Option[39], perm$0, default_perm$0),
      _ji_ =
        function(param){
         if(0 === param[0]){
          var res = param[1];
          return caml_call1(Core_unix_File_descr[13], res);
         }
         var
          err = param[1],
          _jp_ = caml_call2(Core_Printf[2], _j_, perm_for_error),
          _jq_ = [0, [1, [0, _k_, [0, caml_call1(Core[558], _jp_), 0]]], 0],
          _jr_ =
            [0,
             [1,
              [0,
               _l_,
               [0, caml_call2(Core[472], Core_unix[46], unix_mode), 0]]],
             _jq_],
          _js_ =
            [1, [0, [1, [0, _m_, [0, caml_call1(Core[558], file), 0]]], _jr_]],
          _jt_ = caml_call1(Core_unix[10][1], _js_);
         throw caml_maybe_attach_backtrace
                ([0, Core_unix[4], err, cst_open, _jt_], 0);
        },
      _jj_ =
        caml_call7
         (Async_unix_Io_uring_raw[22],
          uring,
          access$0,
          flags$0,
          perm,
          Async_unix_Io_uring_raw[6][4],
          0,
          file),
      _jk_ = caml_call1(Async_unix_Io_uring_raw[29], _jj_),
      _jn_ = caml_call2(Async_unix_Import[33][3], _jk_, _ji_);
    }
    else
     var
      _jo_ =
        function(param){
         return caml_call3(Core_unix[49], perm$0, unix_mode, file);
        },
      _jn_ = caml_call2(Async_unix_In_thread[7], cst_openfile, _jo_);
    return caml_call2(Async_unix_Import[33][2], _jn_, _jm_);
   }
   function fcntl_getfl(fd){
    function _jc_(file_descr){return caml_call1(Core_unix[51], file_descr);}
    return caml_call3(Async_unix_Fd[35], fd, cst_fcntl_getfl, _jc_);
   }
   function fcntl_setfl(fd, flags){
    function _jb_(file_descr){
     return caml_call2(Core_unix[52], file_descr, flags);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_fcntl_setfl, _jb_);
   }
   function lseek(fd, pos, mode){
    var mode$0 = 3455931 === mode ? 2 : 4150146 <= mode ? 0 : 1;
    function _ja_(file_descr){
     return caml_call3(Core_unix[66], file_descr, pos, mode$0);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_lseek, _ja_);
   }
   function truncate(filename, len){
    function _i$_(param){return caml_call2(Core_unix[67], filename, len);}
    return caml_call2(Async_unix_In_thread[7], cst_truncate, _i$_);
   }
   function ftruncate(fd, len){
    function _i__(file_descr){
     return caml_call2(Core_unix[68], file_descr, len);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_ftruncate, _i__);
   }
   function fsync(fd){
    return caml_call3(Async_unix_Fd[35], fd, cst_fsync, Core_unix[279]);
   }
   function fdatasync(fd){
    return caml_call3(Async_unix_Fd[35], fd, cst_fdatasync, Core_unix[280]);
   }
   function sync(param){
    return caml_call2(Async_unix_In_thread[7], cst_sync, Core_unix[278]);
   }
   function sexp_of_t(param){return param ? _o_ : _p_;}
   function flock_command(param){
    return param ? Core_unix[80][2] : Core_unix[80][1];
   }
   function lockf(opt, fd, lock_mode){
    if(opt) var sth = opt[1], len = sth; else var len = _q_;
    var mode = lock_mode ? 1 : 4;
    function _i9_(file_descr){
     return caml_call3(Core_unix[79], file_descr, mode, len);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_lockf, _i9_);
   }
   function try_lockf(opt, fd, lock_mode){
    if(opt) var sth = opt[1], len = sth; else var len = _r_;
    var mode = lock_mode ? 2 : 5;
    function _i4_(file_descr){
     try{
      caml_call3(Core_unix[79], file_descr, mode, len);
      var _i7_ = 1;
      return _i7_;
     }
     catch(_i8_){
      var _i5_ = caml_wrap_exception(_i8_);
      if(_i5_[1] === Unix_error){
       var _i6_ = _i5_[2];
       if(typeof _i6_ === "number" && 1 >= _i6_ - 1 >>> 0) return 0;
      }
      throw caml_maybe_attach_backtrace(_i5_, 0);
     }
    }
    return caml_call3(Async_unix_Fd[32], 0, fd, _i4_);
   }
   function test_lockf(opt, fd){
    if(opt) var sth = opt[1], len = sth; else var len = _s_;
    function _iZ_(file_descr){
     try{
      caml_call3(Core_unix[79], file_descr, 3, len);
      var _i2_ = 1;
      return _i2_;
     }
     catch(_i3_){
      var _i0_ = caml_wrap_exception(_i3_);
      if(_i0_[1] === Unix_error){
       var _i1_ = _i0_[2];
       if(typeof _i1_ === "number" && 1 >= _i1_ - 1 >>> 0) return 0;
      }
      throw caml_maybe_attach_backtrace(_i0_, 0);
     }
    }
    return caml_call3(Async_unix_Fd[32], 0, fd, _iZ_);
   }
   function unlockf(opt, fd){
    if(opt) var sth = opt[1], len = sth; else var len = _t_;
    function _iY_(file_descr){
     return caml_call3(Core_unix[79], file_descr, 0, len);
    }
    return caml_call3(Async_unix_Fd[32], 0, fd, _iY_);
   }
   function flock(fd, lock_mode){
    var mode = flock_command(lock_mode);
    function _iX_(file_descr){
     return caml_call2(Core_unix[82], file_descr, mode);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_flock, _iX_);
   }
   function try_flock(fd, lock_mode){
    var mode = flock_command(lock_mode);
    function _iW_(file_descr){
     return caml_call2(Core_unix[81], file_descr, mode);
    }
    return caml_call3(Async_unix_Fd[32], 0, fd, _iW_);
   }
   function funlock(fd){
    function _iV_(file_descr){
     caml_call2(Core_unix[81], file_descr, Core_unix[80][3]);
     return 0;
    }
    return caml_call3(Async_unix_Fd[32], 0, fd, _iV_);
   }
   var compare = caml_int_compare;
   function t_of_sexp(sexp_013){
    a:
    {
     if(0 === sexp_013[0]){
      var _iR_ = sexp_013[1];
      b:
      if(caml_string_notequal(_iR_, cst_Flock)){
       if(caml_string_notequal(_iR_, cst_Lockf)){
        if(! caml_string_notequal(_iR_, cst_flock$0)) break b;
        if(caml_string_notequal(_iR_, cst_lockf$0)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _iS_ = sexp_013[1];
     if(! _iS_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_012, sexp_013);
     var _iT_ = _iS_[1];
     if(0 !== _iT_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_012, sexp_013);
     var _iU_ = _iT_[1];
     b:
     if(caml_string_notequal(_iU_, cst_Flock)){
      if(caml_string_notequal(_iU_, cst_Lockf)){
       if(! caml_string_notequal(_iU_, cst_flock$0)) break b;
       if(caml_string_notequal(_iU_, cst_lockf$0)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_012, sexp_013);
   }
   function sexp_of_t$0(param){return param ? _u_ : _v_;}
   var
    include$0 = caml_call1(Core_Sexpable[1], [0, t_of_sexp, sexp_of_t$0]),
    of_string = include$0[1],
    to_string = include$0[2],
    arg_type = caml_call2(Core_Command_internal[19][11][7], 0, t_of_sexp);
   function sexp_of_t$1(param){
    var
     mechanism_017 = param[2],
     mode_015 = param[1],
     arg_018 = sexp_of_t$0(mechanism_017),
     bnds_014 = [0, [1, [0, _w_, [0, arg_018, 0]]], 0],
     arg_016 = sexp_of_t(mode_015),
     bnds_014$0 = [0, [1, [0, _x_, [0, arg_016, 0]]], bnds_014];
    return [1, bnds_014$0];
   }
   var Lock = [0, sexp_of_t$1];
   function with_file(lock, perm, file, mode, f){
    function doit(f){
     function _iP_(fd){return caml_call2(Async_unix_Fd[17], fd, f);}
     var _iQ_ = openfile(0, perm, file, mode);
     return caml_call2(Async_unix_Import[33][2], _iQ_, _iP_);
    }
    if(! lock) return doit(f);
    var match = lock[1], mechanism = match[2], mode$0 = match[1];
    return doit
            (function(fd){
              function _iK_(param){return caml_call1(f, fd);}
              if(mechanism)
               var _iM_ = flock;
              else
               var
                _iJ_ = 0,
                _iM_ = function(_iN_, _iO_){return lockf(_iJ_, _iN_, _iO_);};
              var _iL_ = _iM_(fd, mode$0);
              return caml_call2(Async_unix_Import[33][2], _iL_, _iK_);
             });
   }
   function compare$0(a_021, b_022){
    if(a_021 === b_022) return 0;
    if(781514092 <= a_021){
     if(840421965 <= a_021){
      if(848053274 <= a_021){
       if(typeof b_022 === "number" && 848053274 === b_022) return 0;
      }
      else if(typeof b_022 === "number" && 840421965 === b_022) return 0;
     }
     else
      if(781515420 <= a_021){
       if(typeof b_022 === "number" && 781515420 === b_022) return 0;
      }
      else if(typeof b_022 === "number" && 781514092 === b_022) return 0;
    }
    else
     if(-623181869 === a_021){
      if(typeof b_022 === "number" && -623181869 === b_022) return 0;
     }
     else
      if(748194550 <= a_021){
       if(typeof b_022 === "number" && 748194550 === b_022) return 0;
      }
      else if(typeof b_022 === "number" && -936778451 === b_022) return 0;
    return caml_int_compare(a_021, b_022);
   }
   function t_of_sexp$0(sexp_026){
    if(0 === sexp_026[0]){
     var atom_024 = sexp_026[1];
     return caml_string_notequal(atom_024, cst_Block$0)
             ? caml_string_notequal
                (atom_024, cst_Char$0)
               ? caml_string_notequal
                  (atom_024, cst_Directory$0)
                 ? caml_string_notequal
                    (atom_024, cst_Fifo$0)
                   ? caml_string_notequal
                      (atom_024, cst_File$0)
                     ? caml_string_notequal
                        (atom_024, cst_Link$0)
                       ? caml_string_notequal
                          (atom_024, cst_Socket$0)
                         ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                         : -623181869
                       : 848053274
                     : 781515420
                   : 781514092
                 : 840421965
               : 748194550
             : -936778451;
    }
    var _iI_ = sexp_026[1];
    if(! _iI_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_028, sexp_026);
    var match = _iI_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_028, sexp_026);
    var atom_024$0 = match[1];
    return caml_string_notequal(atom_024$0, cst_Block$0)
            ? caml_string_notequal
               (atom_024$0, cst_Char$0)
              ? caml_string_notequal
                 (atom_024$0, cst_Directory$0)
                ? caml_string_notequal
                   (atom_024$0, cst_Fifo$0)
                  ? caml_string_notequal
                     (atom_024$0, cst_File$0)
                    ? caml_string_notequal
                       (atom_024$0, cst_Link$0)
                      ? caml_string_notequal
                         (atom_024$0, cst_Socket$0)
                        ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                        : caml_call2
                          (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_028, sexp_026);
   }
   function t_of_sexp$1(sexp_029){
    try{var _iG_ = t_of_sexp$0(sexp_029); return _iG_;}
    catch(_iH_){
     var _iF_ = caml_wrap_exception(_iH_);
     if(_iF_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_030, sexp_029);
     throw caml_maybe_attach_backtrace(_iF_, 0);
    }
   }
   function sexp_of_t$2(param){
    return 781514092 <= param
            ? 840421965
              <= param
              ? 848053274 <= param ? _y_ : _z_
              : 781515420 <= param ? _A_ : _B_
            : -623181869 === param ? _C_ : 748194550 <= param ? _D_ : _E_;
   }
   var
    _F_ = [0, caml_call2(Bin_prot_Shape[6], cst_Socket, 0), 0],
    _G_ = [0, caml_call2(Bin_prot_Shape[6], cst_Fifo, 0), _F_],
    _H_ = [0, caml_call2(Bin_prot_Shape[6], cst_Link, 0), _G_],
    _I_ = [0, caml_call2(Bin_prot_Shape[6], cst_Block, 0), _H_],
    _J_ = [0, caml_call2(Bin_prot_Shape[6], cst_Char, 0), _I_],
    _K_ = [0, caml_call2(Bin_prot_Shape[6], cst_Directory, 0), _J_],
    _L_ = [0, caml_call2(Bin_prot_Shape[6], cst_File, 0), _K_],
    _M_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_341_6),
    _N_ = caml_call2(Bin_prot_Shape[8], _M_, _L_),
    _O_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _N_], 0],
    _P_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_340_4),
    group$0 = caml_call2(Bin_prot_Shape[2], _P_, _O_),
    _Q_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _Q_), 0),
    include$1 =
      caml_call1
       (Core_Comparable[12], [0, compare$0, t_of_sexp$1, sexp_of_t$2]),
    symbol = include$1[1],
    symbol$0 = include$1[2],
    symbol$1 = include$1[3],
    symbol$2 = include$1[4],
    symbol$3 = include$1[5],
    symbol$4 = include$1[6],
    equal = include$1[7],
    compare$1 = include$1[8],
    min = include$1[9],
    max = include$1[10],
    ascending = include$1[11],
    descending = include$1[12],
    between = include$1[13],
    clamp_exn = include$1[14],
    clamp = include$1[15],
    comparator = include$1[16],
    validate_lbound = include$1[17],
    validate_ubound = include$1[18],
    validate_bound = include$1[19],
    Replace_polymorphic_compare = include$1[20],
    Map = include$1[21],
    Set = include$1[22];
   function of_unix(param){
    switch(param){
      case 0:
       return 781515420;
      case 1:
       return 840421965;
      case 2:
       return 748194550;
      case 3:
       return -936778451;
      case 4:
       return 848053274;
      case 5:
       return 781514092;
      default: return -623181869;
    }
   }
   function to_unix(param){
    return 781514092 <= param
            ? 840421965
              <= param
              ? 848053274 <= param ? 4 : 1
              : 781515420 <= param ? 0 : 5
            : -623181869 === param ? 6 : 748194550 <= param ? 2 : 3;
   }
   function ctime(r){return r[12];}
   function mtime(r){return r[11];}
   function atime(r){return r[10];}
   function size(r){return r[9];}
   function rdev(r){return r[8];}
   function gid(r){return r[7];}
   function uid(r){return r[6];}
   function nlink(r){return r[5];}
   function perm(r){return r[4];}
   function kind(r){return r[3];}
   function ino(r){return r[2];}
   function dev(r){return r[1];}
   function t_of_sexp$2(x_033){
    function _is_(param){
     var
      _iv_ = param[2],
      _iw_ = _iv_[2],
      _ix_ = _iw_[2],
      _iy_ = _ix_[2],
      _iz_ = _iy_[2],
      _iA_ = _iz_[2],
      _iB_ = _iA_[2],
      _iC_ = _iB_[2],
      _iD_ = _iC_[2],
      _iE_ = _iD_[2],
      ctime = _iE_[2][1],
      mtime = _iE_[1],
      atime = _iD_[1],
      size = _iC_[1],
      rdev = _iB_[1],
      gid = _iA_[1],
      uid = _iz_[1],
      nlink = _iy_[1],
      perm = _ix_[1],
      kind = _iw_[1],
      ino = _iv_[1],
      dev = param[1];
     return [0,
             dev,
             ino,
             kind,
             perm,
             nlink,
             uid,
             gid,
             rdev,
             size,
             atime,
             mtime,
             ctime];
    }
    var _it_ = 0;
    function _iu_(param){
     var switch$0 = caml_string_compare(param, cst_mtime$1);
     if(0 <= switch$0){
      if(0 >= switch$0) return 10;
      if(! caml_string_notequal(param, cst_nlink$1)) return 4;
      if(! caml_string_notequal(param, cst_perm$1)) return 3;
      if(! caml_string_notequal(param, cst_rdev$1)) return 7;
      if(! caml_string_notequal(param, cst_size$1)) return 8;
      if(! caml_string_notequal(param, cst_uid$2)) return 5;
     }
     else{
      if(! caml_string_notequal(param, cst_atime$1)) return 9;
      if(! caml_string_notequal(param, cst_ctime$1)) return 11;
      if(! caml_string_notequal(param, cst_dev$1)) return 0;
      if(! caml_string_notequal(param, cst_gid$3)) return 6;
      if(! caml_string_notequal(param, cst_ino$1)) return 1;
      if(! caml_string_notequal(param, cst_kind$1)) return 2;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_032,
             [0,
              cst_dev,
              1,
              Core[390],
              [0,
               cst_ino,
               1,
               Core[390],
               [0,
                cst_kind,
                1,
                t_of_sexp$1,
                [0,
                 cst_perm,
                 1,
                 file_perm_of_sexp,
                 [0,
                  cst_nlink,
                  1,
                  Core[390],
                  [0,
                   cst_uid,
                   1,
                   Core[390],
                   [0,
                    cst_gid,
                    1,
                    Core[390],
                    [0,
                     cst_rdev,
                     1,
                     Core[390],
                     [0,
                      cst_size,
                      1,
                      Core[434],
                      [0,
                       cst_atime,
                       1,
                       Time_float_unix[59],
                       [0,
                        cst_mtime,
                        1,
                        Time_float_unix[59],
                        [0, cst_ctime, 1, Time_float_unix[59], 0]]]]]]]]]]]],
             _iu_,
             _it_,
             _is_,
             x_033);
   }
   function sexp_of_t$3(param){
    var
     ctime_057 = param[12],
     mtime_055 = param[11],
     atime_053 = param[10],
     size_051 = param[9],
     rdev_049 = param[8],
     gid_047 = param[7],
     uid_045 = param[6],
     nlink_043 = param[5],
     perm_041 = param[4],
     kind_039 = param[3],
     ino_037 = param[2],
     dev_035 = param[1],
     arg_058 = caml_call1(Time_float_unix[60], ctime_057),
     bnds_034 = [0, [1, [0, _R_, [0, arg_058, 0]]], 0],
     arg_056 = caml_call1(Time_float_unix[60], mtime_055),
     bnds_034$0 = [0, [1, [0, _S_, [0, arg_056, 0]]], bnds_034],
     arg_054 = caml_call1(Time_float_unix[60], atime_053),
     bnds_034$1 = [0, [1, [0, _T_, [0, arg_054, 0]]], bnds_034$0],
     arg_052 = caml_call1(Core[433], size_051),
     bnds_034$2 = [0, [1, [0, _U_, [0, arg_052, 0]]], bnds_034$1],
     arg_050 = caml_call1(Core[389], rdev_049),
     bnds_034$3 = [0, [1, [0, _V_, [0, arg_050, 0]]], bnds_034$2],
     arg_048 = caml_call1(Core[389], gid_047),
     bnds_034$4 = [0, [1, [0, _W_, [0, arg_048, 0]]], bnds_034$3],
     arg_046 = caml_call1(Core[389], uid_045),
     bnds_034$5 = [0, [1, [0, _X_, [0, arg_046, 0]]], bnds_034$4],
     arg_044 = caml_call1(Core[389], nlink_043),
     bnds_034$6 = [0, [1, [0, _Y_, [0, arg_044, 0]]], bnds_034$5],
     arg_042 = caml_call1(sexp_of_file_perm, perm_041),
     bnds_034$7 = [0, [1, [0, _Z_, [0, arg_042, 0]]], bnds_034$6],
     arg_040 = sexp_of_t$2(kind_039),
     bnds_034$8 = [0, [1, [0, ___, [0, arg_040, 0]]], bnds_034$7],
     arg_038 = caml_call1(Core[389], ino_037),
     bnds_034$9 = [0, [1, [0, _$_, [0, arg_038, 0]]], bnds_034$8],
     arg_036 = caml_call1(Core[389], dev_035),
     bnds_034$10 = [0, [1, [0, _aa_, [0, arg_036, 0]]], bnds_034$9];
    return [1, bnds_034$10];
   }
   var
    _ab_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_dev$0, Core[372]],
         [0,
          [0, cst_ino$0, Core[372]],
          [0,
           [0, cst_kind$0, bin_shape_t],
           [0,
            [0, cst_perm$0, bin_shape_file_perm],
            [0,
             [0, cst_nlink$0, Core[372]],
             [0,
              [0, cst_uid$0, Core[372]],
              [0,
               [0, cst_gid$0, Core[372]],
               [0,
                [0, cst_rdev$0, Core[372]],
                [0,
                 [0, cst_size$0, Core[416]],
                 [0,
                  [0, cst_atime$0, Time_float_unix[55]],
                  [0,
                   [0, cst_mtime$0, Time_float_unix[55]],
                   [0, [0, cst_ctime$0, Time_float_unix[55]], 0]]]]]]]]]]]]),
    _ac_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _ab_], 0],
    _ad_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_388_2),
    group$1 = caml_call2(Bin_prot_Shape[2], _ad_, _ac_),
    _ae_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _ae_), 0);
   function bin_size_t(param){
    var
     v12 = param[12],
     v11 = param[11],
     v10 = param[10],
     v9 = param[9],
     v8 = param[8],
     v7 = param[7],
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v2 = param[2],
     v1 = param[1],
     _ih_ = caml_call1(Core[373], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _ih_),
     _ii_ = caml_call1(Core[373], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _ii_),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, 4),
     _ij_ = caml_call1(bin_size_file_perm, v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _ij_),
     _ik_ = caml_call1(Core[373], v5),
     size$3 = caml_call2(Bin_prot_Common[23], size$2, _ik_),
     _il_ = caml_call1(Core[373], v6),
     size$4 = caml_call2(Bin_prot_Common[23], size$3, _il_),
     _im_ = caml_call1(Core[373], v7),
     size$5 = caml_call2(Bin_prot_Common[23], size$4, _im_),
     _in_ = caml_call1(Core[373], v8),
     size$6 = caml_call2(Bin_prot_Common[23], size$5, _in_),
     _io_ = caml_call1(Core[417], v9),
     size$7 = caml_call2(Bin_prot_Common[23], size$6, _io_),
     _ip_ = caml_call1(Time_float_unix[51], v10),
     size$8 = caml_call2(Bin_prot_Common[23], size$7, _ip_),
     _iq_ = caml_call1(Time_float_unix[51], v11),
     size$9 = caml_call2(Bin_prot_Common[23], size$8, _iq_),
     _ir_ = caml_call1(Time_float_unix[51], v12);
    return caml_call2(Bin_prot_Common[23], size$9, _ir_);
   }
   function bin_write_t(buf, pos, param){
    var
     v12 = param[12],
     v11 = param[11],
     v10 = param[10],
     v9 = param[9],
     v8 = param[8],
     v7 = param[7],
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[375], buf, pos, v1),
     pos$1 = caml_call3(Core[375], buf, pos$0, v2),
     pos$2 =
       781514092 <= v3
        ? 840421965
          <= v3
          ? 848053274
            <= v3
            ? caml_call3(Bin_prot_Write[29], buf, pos$1, 848053274)
            : caml_call3(Bin_prot_Write[29], buf, pos$1, 840421965)
          : 781515420
            <= v3
            ? caml_call3(Bin_prot_Write[29], buf, pos$1, 781515420)
            : caml_call3(Bin_prot_Write[29], buf, pos$1, 781514092)
        : -623181869
          === v3
          ? caml_call3(Bin_prot_Write[29], buf, pos$1, -623181869)
          : 748194550
            <= v3
            ? caml_call3(Bin_prot_Write[29], buf, pos$1, 748194550)
            : caml_call3(Bin_prot_Write[29], buf, pos$1, -936778451),
     pos$3 = caml_call3(bin_write_file_perm, buf, pos$2, v4),
     pos$4 = caml_call3(Core[375], buf, pos$3, v5),
     pos$5 = caml_call3(Core[375], buf, pos$4, v6),
     pos$6 = caml_call3(Core[375], buf, pos$5, v7),
     pos$7 = caml_call3(Core[375], buf, pos$6, v8),
     pos$8 = caml_call3(Core[419], buf, pos$7, v9),
     pos$9 = caml_call3(Time_float_unix[52], buf, pos$8, v10),
     pos$10 = caml_call3(Time_float_unix[52], buf, pos$9, v11);
    return caml_call3(Time_float_unix[52], buf, pos$10, v12);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_unix_syscalls_ml_Stats, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_dev = caml_call2(Core[378], buf, pos_ref),
     v_ino = caml_call2(Core[378], buf, pos_ref),
     vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     a:
     {
      if(781514092 <= vint)
       if(840421965 <= vint){
        if(848053274 === vint){var _if_ = 848053274; break a;}
        if(840421966 > vint){var _if_ = 840421965; break a;}
       }
       else{
        if(781515420 === vint){var _if_ = 781515420; break a;}
        if(781514093 > vint){var _if_ = 781514092; break a;}
       }
      else{
       if(-936778451 === vint){var _if_ = -936778451; break a;}
       if(-623181869 === vint){var _if_ = -623181869; break a;}
       if(748194550 === vint){var _if_ = 748194550; break a;}
      }
      throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
     }
     var v_kind = _if_;
    }
    catch(_ig_){
     var _ie_ = caml_wrap_exception(_ig_);
     if(_ie_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_ie_, 0);
     var v_kind = caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
    }
    var
     v_perm = caml_call2(bin_read_file_perm, buf, pos_ref),
     v_nlink = caml_call2(Core[378], buf, pos_ref),
     v_uid = caml_call2(Core[378], buf, pos_ref),
     v_gid = caml_call2(Core[378], buf, pos_ref),
     v_rdev = caml_call2(Core[378], buf, pos_ref),
     v_size = caml_call2(Core[422], buf, pos_ref),
     v_atime = caml_call2(Time_float_unix[53], buf, pos_ref),
     v_mtime = caml_call2(Time_float_unix[53], buf, pos_ref),
     v_ctime = caml_call2(Time_float_unix[53], buf, pos_ref);
    return [0,
            v_dev,
            v_ino,
            v_kind,
            v_perm,
            v_nlink,
            v_uid,
            v_gid,
            v_rdev,
            v_size,
            v_atime,
            v_mtime,
            v_ctime];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t$0, bin_writer_t, bin_reader_t];
   function compare$2(a_059, b_060){
    if(a_059 === b_060) return 0;
    var n = caml_call2(Core[382], a_059[1], b_060[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[382], a_059[2], b_060[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(compare$1, a_059[3], b_060[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(compare_file_perm, a_059[4], b_060[4]);
    if(0 !== n$2) return n$2;
    var n$3 = caml_call2(Core[382], a_059[5], b_060[5]);
    if(0 !== n$3) return n$3;
    var n$4 = caml_call2(Core[382], a_059[6], b_060[6]);
    if(0 !== n$4) return n$4;
    var n$5 = caml_call2(Core[382], a_059[7], b_060[7]);
    if(0 !== n$5) return n$5;
    var n$6 = caml_call2(Core[382], a_059[8], b_060[8]);
    if(0 !== n$6) return n$6;
    var n$7 = caml_call2(Core[426], a_059[9], b_060[9]);
    if(0 !== n$7) return n$7;
    var n$8 = caml_call2(Time_float_unix[71], a_059[10], b_060[10]);
    if(0 !== n$8) return n$8;
    var n$9 = caml_call2(Time_float_unix[71], a_059[11], b_060[11]);
    return 0 === n$9
            ? caml_call2(Time_float_unix[71], a_059[12], b_060[12])
            : n$9;
   }
   function of_unix$0(u){
    function of_float_sec(f){
     var _id_ = caml_call1(Time_float_unix[1][82], f);
     return caml_call1(Time_float_unix[11], _id_);
    }
    var
     _h5_ = of_float_sec(u[12]),
     _h6_ = of_float_sec(u[11]),
     _h7_ = of_float_sec(u[10]),
     _h8_ = u[9],
     _h9_ = u[8],
     _h__ = u[7],
     _h$_ = u[6],
     _ia_ = u[5],
     _ib_ = u[4],
     _ic_ = of_unix(u[3]);
    return [0,
            u[1],
            u[2],
            _ic_,
            _ib_,
            _ia_,
            _h$_,
            _h__,
            _h9_,
            _h8_,
            _h7_,
            _h6_,
            _h5_];
   }
   function to_unix$0(u){
    function to_float_sec(f){
     var _h4_ = caml_call1(Time_float_unix[10], f);
     return caml_call1(Time_float_unix[1][89], _h4_);
    }
    var
     _hU_ = to_float_sec(u[12]),
     _hV_ = to_float_sec(u[11]),
     _hW_ = to_float_sec(u[10]),
     _hX_ = u[9],
     _hY_ = u[8],
     _hZ_ = u[7],
     _h0_ = u[6],
     _h1_ = u[5],
     _h2_ = u[4],
     _h3_ = to_unix(u[3]);
    return [0,
            u[1],
            u[2],
            _h3_,
            _h2_,
            _h1_,
            _h0_,
            _hZ_,
            _hY_,
            _hX_,
            _hW_,
            _hV_,
            _hU_];
   }
   function of_ocaml_uring_statx(u){
    function of_timespec(sec, nsec){
     var
      _hR_ = caml_call1(Time_float_unix[1][93], nsec),
      _hS_ = caml_call1(Time_float_unix[1][96], sec),
      _hT_ = caml_call2(Time_float_unix[1][104], _hS_, _hR_);
     return caml_call1(Time_float_unix[11], _hT_);
    }
    var
     _hu_ = caml_call1(Async_unix_Io_uring_raw[4][26], u),
     _hv_ = caml_call1(Async_unix_Io_uring_raw[4][22], u),
     _hw_ = of_timespec(caml_call1(Core_Int64[6], _hv_), _hu_),
     _hx_ = caml_call1(Async_unix_Io_uring_raw[4][27], u),
     _hy_ = caml_call1(Async_unix_Io_uring_raw[4][23], u),
     _hz_ = of_timespec(caml_call1(Core_Int64[6], _hy_), _hx_),
     _hA_ = caml_call1(Async_unix_Io_uring_raw[4][24], u),
     _hB_ = caml_call1(Async_unix_Io_uring_raw[4][20], u),
     _hC_ = of_timespec(caml_call1(Core_Int64[6], _hB_), _hA_),
     _hD_ = caml_call1(Async_unix_Io_uring_raw[4][11], u),
     _hE_ = caml_call1(Async_unix_Io_uring_raw[4][14], u),
     _hF_ = caml_call1(Core_Int64[6], _hE_),
     _hG_ = caml_call1(Async_unix_Io_uring_raw[4][9], u),
     _hH_ = caml_call1(Core_Int64[6], _hG_),
     _hI_ = caml_call1(Async_unix_Io_uring_raw[4][8], u),
     _hJ_ = caml_call1(Core_Int64[6], _hI_),
     _hK_ = caml_call1(Async_unix_Io_uring_raw[4][7], u),
     _hL_ = caml_call1(Core_Int64[6], _hK_),
     _hM_ = caml_call1(Async_unix_Io_uring_raw[4][29], u),
     param = caml_call1(Async_unix_Io_uring_raw[4][30], u);
    if(465753759 <= param)
     if(785140586 <= param){
      if(840421965 > param)
       throw caml_maybe_attach_backtrace
              ([0, Core_unix[4], 12, cst_fstat, cst], 0);
      var _hN_ = 840421965;
     }
     else
      var _hN_ = 781514092 <= param ? 781514092 : 781515420;
    else
     var
      _hN_ =
        -74006461 <= param
         ? 215595176 <= param ? -936778451 : 748194550
         : -495690425 <= param ? 848053274 : -623181869;
    var
     _hO_ = caml_call1(Async_unix_Io_uring_raw[4][10], u),
     _hP_ = caml_call1(Core_Int64[6], _hO_),
     _hQ_ = caml_call1(Async_unix_Io_uring_raw[4][15], u);
    return [0,
            caml_call1(Core_Int64[6], _hQ_),
            _hP_,
            _hN_,
            _hM_,
            _hL_,
            _hJ_,
            _hH_,
            _hF_,
            _hD_,
            _hC_,
            _hz_,
            _hw_];
   }
   function to_string$0(t){
    var _ht_ = sexp_of_t$3(t);
    return caml_call1(Core_Sexp[86], _ht_);
   }
   function fstat(fd){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      _hq_ =
        function(res){
         return of_ocaml_uring_statx(caml_call1(Core_Result[40], res));
        },
      _hr_ = caml_call3(Async_unix_Io_uring[15], uring, 0, fd);
     return caml_call2(Async_unix_Import[32], _hr_, _hq_);
    }
    var _hs_ = caml_call3(Async_unix_Fd[35], fd, cst_fstat$0, Core_unix[75]);
    return caml_call2(Async_unix_Import[32], _hs_, of_unix$0);
   }
   function stat(filename){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      _hm_ =
        function(res){
         return of_ocaml_uring_statx(caml_call1(Core_Result[40], res));
        },
      _hn_ = caml_call3(Async_unix_Io_uring[14], uring, 0, filename);
     return caml_call2(Async_unix_Import[32], _hn_, _hm_);
    }
    function _ho_(param){return caml_call1(Core_unix[73], filename);}
    var _hp_ = caml_call2(Async_unix_In_thread[7], cst_stat, _ho_);
    return caml_call2(Async_unix_Import[32], _hp_, of_unix$0);
   }
   function lstat(filename){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      _hi_ =
        function(res){
         return of_ocaml_uring_statx(caml_call1(Core_Result[40], res));
        },
      _hj_ = caml_call3(Async_unix_Io_uring[16], uring, 0, filename);
     return caml_call2(Async_unix_Import[32], _hj_, _hi_);
    }
    function _hk_(param){return caml_call1(Core_unix[74], filename);}
    var _hl_ = caml_call2(Async_unix_In_thread[7], cst_lstat, _hk_);
    return caml_call2(Async_unix_Import[32], _hl_, of_unix$0);
   }
   function isatty(fd){
    return caml_call3(Async_unix_Fd[35], fd, cst_isatty, Core_unix[83]);
   }
   function unlink(filename){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      _hf_ = Core_Result[40],
      _hg_ = caml_call4(Async_unix_Io_uring[11], uring, 0, 0, filename);
     return caml_call2(Async_unix_Import[32], _hg_, _hf_);
    }
    function _hh_(param){return caml_call1(Core_unix[85], filename);}
    return caml_call2(Async_unix_In_thread[7], cst_unlink, _hh_);
   }
   function remove(filename){
    function _he_(param){return caml_call1(Core_unix[86], filename);}
    return caml_call2(Async_unix_In_thread[7], cst_remove, _he_);
   }
   function rename(src, dst){
    function _hd_(param){return caml_call2(Core_unix[87], src, dst);}
    return caml_call2(Async_unix_In_thread[7], cst_rename, _hd_);
   }
   function link(force, target, link_name, param){
    var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
    if(match){
     var
      uring = match[1],
      _ha_ = Core_Result[40],
      _hb_ =
        caml_call6
         (Async_unix_Io_uring[12], uring, 0, force, target, link_name, 0);
     return caml_call2(Async_unix_Import[32], _hb_, _ha_);
    }
    function _hc_(param){
     return caml_call4(Core_unix[88], force, target, link_name, 0);
    }
    return caml_call2(Async_unix_In_thread[7], cst_link, _hc_);
   }
   function chmod(filename, perm){
    function _g$_(param){return caml_call2(Core_unix[89], filename, perm);}
    return caml_call2(Async_unix_In_thread[7], cst_chmod, _g$_);
   }
   function fchmod(fd, perm){
    function _g__(file_descr){
     return caml_call2(Core_unix[90], file_descr, perm);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_fchmod, _g__);
   }
   function chown(filename, uid, gid){
    function _g9_(param){
     return caml_call3(Core_unix[91], filename, uid, gid);
    }
    return caml_call2(Async_unix_In_thread[7], cst_chown, _g9_);
   }
   function fchown(fd, uid, gid){
    function _g8_(file_descr){
     return caml_call3(Core_unix[92], file_descr, uid, gid);
    }
    return caml_call3(Async_unix_Fd[35], fd, cst_fchown, _g8_);
   }
   function access(filename, perm){
    function _g4_(param){
     if(0 === param[0]){var res = param[1]; return res;}
     var exn = param[1];
     return [1, caml_call1(Async_kernel_Monitor[13], exn)];
    }
    function _g5_(param){
     function _g7_(param){return caml_call2(Core_unix[94], filename, perm);}
     return caml_call2(Async_unix_In_thread[7], cst_access, _g7_);
    }
    var
     _g6_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _ag_, _af_, _g5_);
    return caml_call2(Async_unix_Import[33][3], _g6_, _g4_);
   }
   function access_exn(filename, perm){
    function _g3_(param){return caml_call2(Core_unix[95], filename, perm);}
    return caml_call2(Async_unix_In_thread[7], cst_access$0, _g3_);
   }
   function set_close_on_exec(fd){
    return caml_call3(Async_unix_Fd[23], 0, fd, Core_unix[100]);
   }
   function clear_close_on_exec(fd){
    return caml_call3(Async_unix_Fd[23], 0, fd, Core_unix[102]);
   }
   function mkdir(p, opt, dirname){
    if(opt) var sth = opt[1], perm = sth; else var perm = 511;
    if(p){
     var
      _g1_ =
        function(param){
         return caml_call2(Core_unix[104], [0, perm], dirname);
        };
     return caml_call2(Async_unix_In_thread[7], cst_mkdir, _g1_);
    }
    function _g2_(param){
     return caml_call2(Core_unix[103], [0, perm], dirname);
    }
    return caml_call2(Async_unix_In_thread[7], cst_mkdir$0, _g2_);
   }
   function rmdir(dirname){
    function _g0_(param){return caml_call1(Core_unix[105], dirname);}
    return caml_call2(Async_unix_In_thread[7], cst_rmdir, _g0_);
   }
   function chdir(dirname){
    function _gZ_(param){return caml_call1(Core_unix[106], dirname);}
    return caml_call2(Async_unix_In_thread[7], cst_chdir, _gZ_);
   }
   function chroot(dirname){
    function _gY_(param){return caml_call1(Core_unix[108], dirname);}
    return caml_call2(Async_unix_In_thread[7], cst_chroot, _gY_);
   }
   function getcwd(param){
    function _gX_(param){return caml_call1(Core_unix[107], 0);}
    return caml_call2(Async_unix_In_thread[7], cst_getcwd, _gX_);
   }
   function opendir(dirname){
    function _gW_(param){return caml_call2(Core_unix[109], 0, dirname);}
    return caml_call2(Async_unix_In_thread[7], cst_opendir, _gW_);
   }
   function readdir_opt(handle){
    function _gV_(param){return caml_call1(Core_unix[110], handle);}
    return caml_call2(Async_unix_In_thread[7], cst_readdir, _gV_);
   }
   function rewinddir(handle){
    function _gU_(param){return caml_call1(Core_unix[112], handle);}
    return caml_call2(Async_unix_In_thread[7], cst_rewinddir, _gU_);
   }
   function closedir(handle){
    function _gT_(param){return caml_call1(Core_unix[113], handle);}
    return caml_call2(Async_unix_In_thread[7], cst_closedir, _gT_);
   }
   function pipe(info){
    function _gO_(param){
     var writer = param[2], reader = param[1];
     function create(file_descr, kind){
      var _gS_ = caml_call2(Core_Info[22], info, kind);
      return caml_call4(Async_unix_Fd[6], 0, 1, file_descr, _gS_);
     }
     var _gR_ = [0, 846875347, create(writer, cst_writer)];
     return [0, [0, 824580451, create(reader, cst_reader)], _gR_];
    }
    function _gP_(param){return caml_call2(Core_unix[117], _ah_, 0);}
    var _gQ_ = caml_call2(Async_unix_In_thread[7], cst_pipe, _gP_);
    return caml_call2(Async_unix_Import[33][3], _gQ_, _gO_);
   }
   function mkfifo(opt, name){
    if(opt) var sth = opt[1], perm = sth; else var perm = 438;
    function _gN_(param){return caml_call2(Core_unix[118], name, perm);}
    return caml_call2(Async_unix_In_thread[7], cst_mkfifo, _gN_);
   }
   function symlink(target, link_name){
    function _gM_(param){
     return caml_call2(Core_unix[134], target, link_name);
    }
    return caml_call2(Async_unix_In_thread[7], cst_symlink, _gM_);
   }
   function readlink(filename){
    function _gL_(param){return caml_call1(Core_unix[135], filename);}
    return caml_call2(Async_unix_In_thread[7], cst_readlink, _gL_);
   }
   function mkdtemp(filename){
    function _gK_(param){return caml_call1(Core_unix[294], filename);}
    return caml_call2(Async_unix_In_thread[7], cst_mkdtemp, _gK_);
   }
   function mkstemp(filename){
    function _gG_(param){
     var
      file_descr = param[2],
      name = param[1],
      _gJ_ = caml_call1(Core_Info[14], name);
     return [0, name, caml_call4(Async_unix_Fd[6], 0, 2, file_descr, _gJ_)];
    }
    function _gH_(param){return caml_call1(Core_unix[293], filename);}
    var _gI_ = caml_call2(Async_unix_In_thread[7], cst_mkstemp, _gH_);
    return caml_call2(Async_unix_Import[33][3], _gI_, _gG_);
   }
   function getgrouplist(username, gid){
    function _gF_(param){return caml_call2(Core_unix[297], username, gid);}
    return caml_call2(Async_unix_In_thread[7], cst_getgrouplist, _gF_);
   }
   var
    times = Core_unix[156],
    time = Core_unix[145],
    gettimeofday = Core_unix[146],
    gmtime = Core_unix[147],
    localtime = Core_unix[149],
    mktime = Core_unix[150];
   function utimes(name, access, modif){
    function _gE_(param){
     return caml_call3(Core_unix[157], name, access, modif);
    }
    return caml_call2(Async_unix_In_thread[7], cst_utimes, _gE_);
   }
   var
    env_of_sexp = Core_unix[19],
    sexp_of_env = Core_unix[18],
    environment = Core_unix[11],
    getenv = Core_Core_sys[19],
    getenv_exn = Core_Core_sys[20],
    unsafe_getenv = Sys_unix[10],
    unsafe_getenv_exn = Sys_unix[11],
    putenv = Core_unix[12],
    unsetenv = Core_unix[13];
   function fork_exec(prog, argv, use_path, env, param){
    function _gD_(param){
     return caml_call6(Core_unix[22], prog, argv, 0, use_path, env, 0);
    }
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _gD_);
   }
   var wait_on_of_sexp = Core_unix[26];
   function wait_on_of_sexp$0(sexp_064){
    try{var _gB_ = caml_call1(wait_on_of_sexp, sexp_064); return _gB_;}
    catch(_gC_){
     var _gA_ = caml_wrap_exception(_gC_);
     if(_gA_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_065, sexp_064);
     throw caml_maybe_attach_backtrace(_gA_, 0);
    }
   }
   var
    sexp_of_wait_on = Core_unix[24],
    wait_nohang = Core_unix[28],
    wait_nohang_untraced = Core_unix[30];
   function wait_nohang$0(t, wait_on){
    switch(t){
      case 0:
       return caml_call1(wait_nohang, wait_on);
      case 1:
       return caml_call1(wait_nohang_untraced, wait_on);
      default:
       var res = caml_call1(wait_nohang, [0, 4001835, wait_on]);
       if(! res) return 0;
       var match = res[1], exit_or_signal = match[2], pid2 = match[1];
       if(caml_call2(Core_Pid[19], pid2, wait_on)) return [0, exit_or_signal];
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ai_], 1);
    }
   }
   function check(t){
    try{var val = wait_nohang$0(t[1], t[4]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call3(Async_kernel_Monitor[15], t[2], 0, exn);
     return 1;
    }
    if(! val) return 0;
    var x = val[1];
    caml_call2(Async_kernel_Ivar[14], t[3], x);
    return 1;
   }
   var waits = [0, 0];
   function check_all(param){
    var _gz_ = caml_call1(Core_Fn[2], check);
    waits[1] = caml_call2(Core_List[12], waits[1], _gz_);
    return 0;
   }
   var should_handle_sigchld = [0, 1], am_handling_sigchld = [0, 0];
   function do_not_handle_sigchld(param){
    if(am_handling_sigchld[1]){
     var
      _gx_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_src_unix_syscalls_ml_735_7),
         0],
      _gy_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_already_handling_SIGCHLD),
          _gx_]];
     caml_call1(Core[261], _gy_);
    }
    should_handle_sigchld[1] = 0;
    return 0;
   }
   var
    install_sigchld_handler_the_fi =
      [246,
       function(_gr_){
        var _gs_ = should_handle_sigchld[1];
        if(! _gs_) return _gs_;
        am_handling_sigchld[1] = 1;
        function _gt_(param){
         function _gw_(param){return check_all(0);}
         return caml_call3
                 (Async_unix_Signal[89], 0, [0, Core_Signal[52], 0], _gw_);
        }
        var
         _gu_ = Async_kernel_Execution_context[7],
         _gv_ = caml_call1(Async_kernel_Scheduler[2], 0);
        return caml_call2
                (caml_call1(Async_kernel_Scheduler[5], _gv_), _gu_, _gt_);
       }];
   function deferred_wait(wait_on, kind){
    var _gp_ = runtime.caml_obj_tag(install_sigchld_handler_the_fi);
    a:
    if(250 !== _gp_){
     if(246 !== _gp_ && 244 !== _gp_) break a;
     caml_call1(CamlinternalLazy[2], install_sigchld_handler_the_fi);
    }
    var match = wait_nohang$0(kind, wait_on);
    if(match){
     var result = match[1];
     return caml_call1(Async_unix_Import[30], result);
    }
    function _gq_(result){
     var monitor = caml_call1(Async_kernel_Monitor[5], 0);
     waits[1] = [0, [0, kind, monitor, result, wait_on], waits[1]];
     return 0;
    }
    return caml_call1(Async_kernel_Deferred[3], _gq_);
   }
   function wait(wait_on){return deferred_wait(wait_on, 0);}
   function wait_untraced(wait_on){return deferred_wait(wait_on, 1);}
   function waitpid_prompt(pid){return deferred_wait(pid, 2);}
   function waitpid_exn(pid){
    function _gj_(exit_or_signal){
     var _gl_ = caml_call1(Core_Result[38], exit_or_signal);
     if(! _gl_) return _gl_;
     var
      _gm_ =
        [0,
         [1, [0, _aj_, [0, caml_call1(Core_unix[15][7], exit_or_signal), 0]]],
         0],
      _gn_ = [0, [1, [0, _ak_, [0, caml_call1(Core_Pid[13], pid), 0]]], _gm_],
      _go_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_child_process_didn_t_exit_),
          _gn_]];
     return caml_call1(Core[261], _go_);
    }
    var _gk_ = waitpid_prompt(pid);
    return caml_call2(Async_unix_Import[33][3], _gk_, _gj_);
   }
   function dns_lookup(name, f){
    function _gh_(t){
     function _gi_(param){
      return caml_call4(Async_unix_In_thread[5], 0, 0, [0, name], f);
     }
     return caml_call2(Async_kernel_Throttle[10], t[19], _gi_);
    }
    return caml_call1(Async_unix_Raw_scheduler[153], _gh_);
   }
   var
    include$2 = Core_unix[175],
    bin_size_t$0 = include$2[1],
    bin_write_t$0 = include$2[2],
    bin_read_t$1 = include$2[3],
    bin_read_t$2 = include$2[4],
    bin_shape_t$1 = include$2[5],
    bin_writer_t$0 = include$2[6],
    bin_reader_t$0 = include$2[7],
    bin_t$0 = include$2[8],
    hash_fold_t = include$2[9],
    hash = include$2[10],
    sexp_of_t$4 = include$2[11],
    arg_type$0 = include$2[12],
    t_of_sexp$3 = include$2[13],
    Blocking_sexp = include$2[14],
    symbol$5 = include$2[15],
    symbol$6 = include$2[16],
    symbol$7 = include$2[17],
    symbol$8 = include$2[18],
    symbol$9 = include$2[19],
    symbol$10 = include$2[20],
    equal$0 = include$2[21],
    compare$3 = include$2[22],
    min$0 = include$2[23],
    max$0 = include$2[24],
    ascending$0 = include$2[25],
    descending$0 = include$2[26],
    between$0 = include$2[27],
    clamp_exn$0 = include$2[28],
    clamp$0 = include$2[29],
    comparator$0 = include$2[30],
    validate_lbound$0 = include$2[31],
    validate_ubound$0 = include$2[32],
    validate_bound$0 = include$2[33],
    of_string$0 = include$2[37],
    to_string$1 = include$2[39],
    bind_any = include$2[40],
    bind_any_inet6 = include$2[41],
    localhost = include$2[42],
    localhost_inet6 = include$2[43],
    inet4_addr_of_int32 = include$2[44],
    inet4_addr_to_int32_exn = include$2[45],
    inet4_addr_of_int63 = include$2[46],
    inet4_addr_to_int63_exn = include$2[47],
    _al_ = include$2[38];
   function of_string_or_getbyname(s){
    try{var t = caml_call1(of_string$0, s);}
    catch(_gg_){
     return dns_lookup
             (cst_getbyname, function(param){return caml_call1(_al_, s);});
    }
    return caml_call1(Async_kernel_Deferred[12], t);
   }
   function _am_(bind_to_interface, fd, spec){
    function _gf_(file_descr){
     return caml_call2(bind_to_interface, file_descr, spec);
    }
    return caml_call3(Async_unix_Fd[23], 0, fd, _gf_);
   }
   var
    bind_to_interface_exn = caml_call2(Core_Or_error[53], Linux_ext[58], _am_),
    _an_ =
      [0,
       caml_call1(Bin_prot_Shape[3], [0, bin_shape_t$1, [0, Core[372], 0]])],
    _ao_ = [0, caml_call2(Bin_prot_Shape[6], cst_Inet, _an_), 0],
    _ap_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_814_1),
    _aq_ = caml_call2(Bin_prot_Shape[8], _ap_, _ao_),
    _ar_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _aq_], 0],
    _as_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_814_6),
    group$2 = caml_call2(Bin_prot_Shape[2], _as_, _ar_),
    _at_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _at_), 0);
   function bin_size_t$1(param){
    var
     args = param[2],
     v2 = args[2],
     v1 = args[1],
     _gd_ = caml_call1(bin_size_t$0, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _gd_),
     _ge_ = caml_call1(Core[373], v2),
     size_args = caml_call2(Bin_prot_Common[23], size, _ge_);
    return caml_call2(Bin_prot_Common[23], size_args, 4);
   }
   function bin_write_t$1(buf, pos, param){
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 815031220),
     v2 = args[2],
     v1 = args[1],
     pos$1 = caml_call3(bin_write_t$0, buf, pos$0, v1);
    return caml_call3(Core[375], buf, pos$1, v2);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    if(815031220 !== vint)
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
    var
     v1 = caml_call2(bin_read_t$1, buf, pos_ref),
     v2 = caml_call2(Core[378], buf, pos_ref),
     arg_1 = [0, v1, v2];
    return [0, 815031220, arg_1];
   }
   function bin_read_t$4(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _gb_ = bin_read_t$3(buf, pos_ref, vint); return _gb_;}
    catch(_gc_){
     var _ga_ = caml_wrap_exception(_gc_);
     if(_ga_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$0, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_ga_, 0);
    }
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$2, bin_writer_t$1, bin_reader_t$1];
   function compare$4(a_082, b_083){
    if(a_082 === b_083) return 0;
    var
     right_085 = b_083[2],
     left_084 = a_082[2],
     t_087 = left_084[2],
     t_086 = left_084[1],
     t_089 = right_085[2],
     t_088 = right_085[1],
     n = caml_call2(compare$3, t_086, t_088);
    return 0 === n ? caml_call2(Core[382], t_087, t_089) : n;
   }
   function hash_fold_t$0(hsv, arg){
    var
     v = arg[2],
     hsv$0 = caml_call2(Base_Hash[3], hsv, 815031220),
     e1 = v[2],
     e0 = v[1],
     hsv$1 = caml_call2(hash_fold_t, hsv$0, e0),
     hsv$2 = caml_call2(Core[387], hsv$1, e1);
    return hsv$2;
   }
   function hash$0(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _f$_ = hash_fold_t$0(hsv, arg);
    return caml_call1(Base_Hash[9], _f$_);
   }
   function to_string_internal(show_port_in_test, param){
    var match = param[2], p = match[2], a = match[1];
    a:
    {
     if(Ppx_inline_test_lib[1] && ! show_port_in_test){var _f9_ = cst_PORT; break a;}
     var _f9_ = caml_call1(Core_Int[79], p);
    }
    var _f__ = caml_call1(to_string$1, a);
    return caml_call3(Core[265], _au_, _f__, _f9_);
   }
   var _av_ = 0;
   function to_string$2(_f8_){return to_string_internal(_av_, _f8_);}
   function sexp_of_t$5(t){return [0, to_string$2(t)];}
   var
    _aw_ =
      [0,
       caml_call1(Bin_prot_Shape[3], [0, Blocking_sexp[5], [0, Core[372], 0]])],
    _ax_ = [0, caml_call2(Bin_prot_Shape[6], cst_Inet$0, _aw_), 0],
    _ay_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_829_1),
    _az_ = caml_call2(Bin_prot_Shape[8], _ay_, _ax_),
    _aA_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _az_], 0],
    _aB_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_829_8),
    group$3 = caml_call2(Bin_prot_Shape[2], _aB_, _aA_),
    _aC_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _aC_), 0);
   function bin_size_t$2(param){
    var
     args = param[2],
     v2 = args[2],
     v1 = args[1],
     _f6_ = caml_call1(Blocking_sexp[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _f6_),
     _f7_ = caml_call1(Core[373], v2),
     size_args = caml_call2(Bin_prot_Common[23], size, _f7_);
    return caml_call2(Bin_prot_Common[23], size_args, 4);
   }
   function bin_write_t$2(buf, pos, param){
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 815031220),
     v2 = args[2],
     v1 = args[1],
     pos$1 = caml_call3(Blocking_sexp[2], buf, pos$0, v1);
    return caml_call3(Core[375], buf, pos$1, v2);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    if(815031220 !== vint)
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
    var
     v1 = caml_call2(Blocking_sexp[3], buf, pos_ref),
     v2 = caml_call2(Core[378], buf, pos_ref),
     arg_1 = [0, v1, v2];
    return [0, 815031220, arg_1];
   }
   function bin_read_t$6(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _f4_ = bin_read_t$5(buf, pos_ref, vint); return _f4_;}
    catch(_f5_){
     var _f3_ = caml_wrap_exception(_f5_);
     if(_f3_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$1, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_f3_, 0);
    }
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$3, bin_writer_t$2, bin_reader_t$2];
   function compare$5(a_090, b_091){
    if(a_090 === b_091) return 0;
    var
     right_093 = b_091[2],
     left_092 = a_090[2],
     t_095 = left_092[2],
     t_094 = left_092[1],
     t_097 = right_093[2],
     t_096 = right_093[1],
     n = caml_call2(Blocking_sexp[9], t_094, t_096);
    return 0 === n ? caml_call2(Core[382], t_095, t_097) : n;
   }
   function hash_fold_t$1(hsv, arg){
    var
     v = arg[2],
     hsv$0 = caml_call2(Base_Hash[3], hsv, 815031220),
     e1 = v[2],
     e0 = v[1],
     hsv$1 = caml_call2(Blocking_sexp[10], hsv$0, e0),
     hsv$2 = caml_call2(Core[387], hsv$1, e1);
    return hsv$2;
   }
   function hash$1(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _f2_ = hash_fold_t$1(hsv, arg);
    return caml_call1(Base_Hash[9], _f2_);
   }
   function t_of_sexp$4(sexp_101){
    if(0 === sexp_101[0]){
     var atom_099 = sexp_101[1];
     return caml_string_notequal(atom_099, cst_Inet$1)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_109, sexp_101);
    }
    var _fZ_ = sexp_101[1];
    if(! _fZ_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_109, sexp_101);
    var match = _fZ_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_109, sexp_101);
    var sexp_args_102 = _fZ_[2], atom_099$0 = match[1];
    if(caml_string_notequal(atom_099$0, cst_Inet$1))
     return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
    if(sexp_args_102 && ! sexp_args_102[2]){
     var arg0_110 = sexp_args_102[1];
     a:
     {
      if(1 === arg0_110[0]){
       var _f0_ = arg0_110[1];
       if(_f0_){
        var _f1_ = _f0_[2];
        if(_f1_ && ! _f1_[2]){
         var
          arg1_105 = _f1_[1],
          arg0_104 = _f0_[1],
          res0_106 = caml_call1(Blocking_sexp[12], arg0_104),
          res1_107 = caml_call1(Core[390], arg1_105),
          res0_111 = [0, res0_106, res1_107];
         break a;
        }
       }
      }
      var
       res0_111 =
         caml_call3
          (Sexplib0_Sexp_conv_error[4], error_source_109, 2, arg0_110);
     }
     return [0, 815031220, res0_111];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_109,
             atom_099$0,
             sexp_101);
   }
   function t_of_sexp$5(sexp_112){
    try{var _fX_ = t_of_sexp$4(sexp_112); return _fX_;}
    catch(_fY_){
     var _fW_ = caml_wrap_exception(_fY_);
     if(_fW_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_113, sexp_112);
     throw caml_maybe_attach_backtrace(_fW_, 0);
    }
   }
   function sexp_of_t$6(param){
    var
     v_114 = param[2],
     arg1_116 = v_114[2],
     arg0_115 = v_114[1],
     res0_117 = caml_call1(Blocking_sexp[13], arg0_115),
     res1_118 = caml_call1(Core[389], arg1_116);
    return [1, [0, _aD_, [0, [1, [0, res0_117, [0, res1_118, 0]]], 0]]];
   }
   function sexp_of_t$7(param){
    var
     v_119 = param[2],
     arg1_121 = v_119[2],
     arg0_120 = v_119[1],
     res0_122 = caml_call1(sexp_of_t$4, arg0_120),
     res1_123 = caml_call1(Core[389], arg1_121);
    return [1, [0, _aE_, [0, [1, [0, res0_122, [0, res1_123, 0]]], 0]]];
   }
   var _aF_ = 1;
   function to_string$3(_fV_){return to_string_internal(_aF_, _fV_);}
   var Show_port_in_test = [0, sexp_of_t$7, to_string$3];
   function addr(param){var a = param[2][1]; return a;}
   function port(param){var p = param[2][2]; return p;}
   function to_host_and_port(param){
    var
     match = param[2],
     port = match[2],
     addr = match[1],
     _fU_ = caml_call1(to_string$1, addr);
    return caml_call2(Core_Host_and_port[1], _fU_, port);
   }
   function create(a, port){return [0, 815031220, [0, a, port]];}
   function create_bind_any(port){
    return [0, 815031220, [0, caml_call1(of_string$0, cst_0_0_0_0), port]];
   }
   function of_sockaddr_exn(u){
    if(0 === u[0]){
     var
      _fS_ = [0, caml_call1(Core_unix[206], u), 0],
      _fT_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Socket_Address_inet), _fS_]];
     return caml_call1(Core[261], _fT_);
    }
    var i = u[2], a = u[1];
    return [0, 815031220, [0, a, i]];
   }
   function to_sockaddr(param){
    var match = param[2], i = match[2], a = match[1];
    return [1, a, i];
   }
   var
    _aG_ = [0, caml_call2(Bin_prot_Shape[6], cst_Unix, [0, Core[541]]), 0],
    _aH_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_858_1),
    _aI_ = caml_call2(Bin_prot_Shape[8], _aH_, _aG_),
    _aJ_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _aI_], 0],
    _aK_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_858_6),
    group$4 = caml_call2(Bin_prot_Shape[2], _aK_, _aJ_),
    _aL_ = caml_call1(Bin_shape[2][1], cst_t$8),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _aL_), 0);
   function bin_size_t$3(param){
    var args = param[2], size_args = caml_call1(Core[542], args);
    return caml_call2(Bin_prot_Common[23], size_args, 4);
   }
   function bin_write_t$3(buf, pos, param){
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 948106920);
    return caml_call3(Core[544], buf, pos$0, args);
   }
   var bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3];
   function bin_read_t$7(buf, pos_ref, vint){
    if(948106920 !== vint)
     throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
    var arg_1 = caml_call2(Core[547], buf, pos_ref);
    return [0, 948106920, arg_1];
   }
   function bin_read_t$8(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _fQ_ = bin_read_t$7(buf, pos_ref, vint); return _fQ_;}
    catch(_fR_){
     var _fP_ = caml_wrap_exception(_fR_);
     if(_fP_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$2, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_fP_, 0);
    }
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$4, bin_writer_t$3, bin_reader_t$3];
   function compare$6(a_124, b_125){
    if(a_124 === b_125) return 0;
    var right_127 = b_125[2], left_126 = a_124[2];
    return caml_call2(Core[551], left_126, right_127);
   }
   function t_of_sexp$6(sexp_131){
    if(0 === sexp_131[0]){
     var atom_129 = sexp_131[1];
     return caml_string_notequal(atom_129, cst_Unix$0)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_136, sexp_131);
    }
    var _fO_ = sexp_131[1];
    if(! _fO_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_136, sexp_131);
    var match = _fO_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_136, sexp_131);
    var sexp_args_132 = _fO_[2], atom_129$0 = match[1];
    if(caml_string_notequal(atom_129$0, cst_Unix$0))
     return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
    if(sexp_args_132 && ! sexp_args_132[2]){
     var
      arg0_134 = sexp_args_132[1],
      res0_135 = caml_call1(Core[559], arg0_134);
     return [0, 948106920, res0_135];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_136,
             atom_129$0,
             sexp_131);
   }
   function t_of_sexp$7(sexp_137){
    try{var _fM_ = t_of_sexp$6(sexp_137); return _fM_;}
    catch(_fN_){
     var _fL_ = caml_wrap_exception(_fN_);
     if(_fL_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_138, sexp_137);
     throw caml_maybe_attach_backtrace(_fL_, 0);
    }
   }
   function sexp_of_t$8(param){
    var v_139 = param[2];
    return [1, [0, _aM_, [0, caml_call1(Core[558], v_139), 0]]];
   }
   function create$0(s){return [0, 948106920, s];}
   function to_string$4(param){var s = param[2]; return s;}
   function of_sockaddr_exn$0(u){
    if(0 === u[0]){var s = u[1]; return [0, 948106920, s];}
    var
     _fJ_ = [0, caml_call1(Core_unix[206], u), 0],
     _fK_ =
       [1,
        [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Socket_Address_unix), _fJ_]];
    return caml_call1(Core[261], _fK_);
   }
   function to_sockaddr$0(param){var s = param[2]; return [0, s];}
   var
    _aN_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_873_8),
    _aO_ = [0, caml_call2(Bin_prot_Shape[7], _aN_, bin_shape_t$4), 0],
    _aP_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_872_8),
    _aQ_ = [0, caml_call2(Bin_prot_Shape[7], _aP_, bin_shape_t$2), _aO_],
    _aR_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_872_6),
    _aS_ = caml_call2(Bin_prot_Shape[8], _aR_, _aQ_),
    _aT_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _aS_], 0],
    _aU_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_871_4),
    group$5 = caml_call2(Bin_prot_Shape[2], _aU_, _aT_),
    _aV_ = caml_call1(Bin_shape[2][1], cst_t$10),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _aV_), 0);
   function bin_size_t$4(v){
    return 948106920 <= v[1] ? bin_size_t$3(v) : bin_size_t$1(v);
   }
   function bin_write_t$4(buf, pos, v){
    return 948106920 <= v[1]
            ? bin_write_t$3(buf, pos, v)
            : bin_write_t$1(buf, pos, v);
   }
   var bin_writer_t$4 = [0, bin_size_t$4, bin_write_t$4];
   function bin_read_t$9(buf, pos_ref, vint){
    try{var _fH_ = bin_read_t$3(buf, pos_ref, vint); return _fH_;}
    catch(_fI_){
     var _fG_ = caml_wrap_exception(_fI_);
     if(_fG_ === Bin_prot_Common[13]) return bin_read_t$7(buf, pos_ref, vint);
     throw caml_maybe_attach_backtrace(_fG_, 0);
    }
   }
   function bin_read_t$10(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _fE_ = bin_read_t$9(buf, pos_ref, vint); return _fE_;}
    catch(_fF_){
     var _fD_ = caml_wrap_exception(_fF_);
     if(_fD_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$3, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_fD_, 0);
    }
   }
   var
    bin_reader_t$4 = [0, bin_read_t$10, bin_read_t$9],
    bin_t$4 = [0, bin_shape_t$5, bin_writer_t$4, bin_reader_t$4];
   function sexp_of_t$9(v_140){
    return 948106920 <= v_140[1] ? sexp_of_t$8(v_140) : sexp_of_t$5(v_140);
   }
   var
    _aW_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_880_1),
    _aX_ = [0, caml_call2(Bin_prot_Shape[7], _aW_, bin_shape_t$4), 0],
    _aY_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_879_1),
    _aZ_ = [0, caml_call2(Bin_prot_Shape[7], _aY_, bin_shape_t$3), _aX_],
    _a0_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_879_8),
    _a1_ = caml_call2(Bin_prot_Shape[8], _a0_, _aZ_),
    _a2_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _a1_], 0],
    _a3_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_878_6),
    group$6 = caml_call2(Bin_prot_Shape[2], _a3_, _a2_),
    _a4_ = caml_call1(Bin_shape[2][1], cst_t$12),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _a4_), 0);
   function bin_size_t$5(v){
    return 948106920 <= v[1] ? bin_size_t$3(v) : bin_size_t$2(v);
   }
   function bin_write_t$5(buf, pos, v){
    return 948106920 <= v[1]
            ? bin_write_t$3(buf, pos, v)
            : bin_write_t$2(buf, pos, v);
   }
   var bin_writer_t$5 = [0, bin_size_t$5, bin_write_t$5];
   function bin_read_t$11(buf, pos_ref, vint){
    try{var _fB_ = bin_read_t$5(buf, pos_ref, vint); return _fB_;}
    catch(_fC_){
     var _fA_ = caml_wrap_exception(_fC_);
     if(_fA_ === Bin_prot_Common[13]) return bin_read_t$7(buf, pos_ref, vint);
     throw caml_maybe_attach_backtrace(_fA_, 0);
    }
   }
   function bin_read_t$12(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _fy_ = bin_read_t$11(buf, pos_ref, vint); return _fy_;}
    catch(_fz_){
     var _fx_ = caml_wrap_exception(_fz_);
     if(_fx_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$4, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_fx_, 0);
    }
   }
   var
    bin_reader_t$5 = [0, bin_read_t$12, bin_read_t$11],
    bin_t$5 = [0, bin_shape_t$6, bin_writer_t$5, bin_reader_t$5];
   function hash_fold_t$2(hsv$0, arg){
    if(948106920 > arg[1]) return hash_fold_t$1(hsv$0, arg);
    var v = arg[2], hsv = caml_call2(Base_Hash[3], hsv$0, 948106920);
    return caml_call2(Core[556], hsv, v);
   }
   function hash$2(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _fw_ = hash_fold_t$2(hsv, arg);
    return caml_call1(Base_Hash[9], _fw_);
   }
   function t_of_sexp$8(sexp_143){
    try{
     try{var _fr_ = t_of_sexp$4(sexp_143), _ft_ = _fr_;}
     catch(_fv_){
      var _fq_ = caml_wrap_exception(_fv_);
      if(_fq_ !== Sexplib0_Sexp_conv_error[22])
       throw caml_maybe_attach_backtrace(_fq_, 0);
      var _ft_ = t_of_sexp$6(sexp_143);
     }
     return _ft_;
    }
    catch(_fu_){
     var _fs_ = caml_wrap_exception(_fu_);
     if(_fs_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_144, sexp_143);
     throw caml_maybe_attach_backtrace(_fs_, 0);
    }
   }
   function sexp_of_t$10(v_145){
    return 948106920 <= v_145[1] ? sexp_of_t$8(v_145) : sexp_of_t$6(v_145);
   }
   function to_sockaddr$1(t){
    return 948106920 <= t[1] ? to_sockaddr$0(t) : to_sockaddr(t);
   }
   function to_string$5(t){return 948106920 <= t[1] ? t[2] : to_string$2(t);}
   function to_string$6(t){
    switch(t[1]){
      case 0:
       return cst_unix;
      case 1:
       return cst_inet;
      default: return cst_inet6;
    }
   }
   var
    inet = [0, 1, 0, of_sockaddr_exn, sexp_of_t$5],
    unix = [0, 0, 1, of_sockaddr_exn$0, sexp_of_t$8];
   function is_inet_witness(t){return t[2] ? 0 : _a5_;}
   function sexp_of_t$11(of_a_147, param){
    var
     socket_type_151 = param[2],
     family_149 = param[1],
     arg_152 = caml_call1(Core_unix[187], socket_type_151),
     bnds_148 = [0, [1, [0, _a6_, [0, arg_152, 0]]], 0],
     family = family_149[1],
     arg_150 = caml_call1(Core_unix[177], family),
     bnds_148$0 = [0, [1, [0, _a7_, [0, arg_150, 0]]], bnds_148];
    return [1, bnds_148$0];
   }
   function family(t){return t[1];}
   var
    tcp = [0, inet, 0],
    udp = [0, inet, 1],
    unix$0 = [0, unix, 0],
    unix_dgram = [0, unix, 1];
   function info(param){
    var
     connected_to = param[1],
     bound_on = param[2],
     listening = param[3],
     x_153 = param[4],
     type =
       x_153 === tcp
        ? caml_call1(Sexplib0_Sexp_conv[7], cst_tcp)
        : x_153
          === udp
          ? caml_call1(Sexplib0_Sexp_conv[7], cst_udp)
          : sexp_of_t$11(function(param){return _ba_;}, x_153);
    if(listening)
     var listening_on = bound_on, bound_on$0 = 0;
    else
     var listening_on = 0, bound_on$0 = bound_on;
    var match = 0;
    if(listening_on)
     var
      v_156 = listening_on[1],
      match$0 = [0, [1, [0, _a8_, [0, sexp_of_t$9(v_156), 0]]], match];
    else
     var match$0 = match;
    if(bound_on$0)
     var
      v_155 = bound_on$0[1],
      _fo_ = [0, [1, [0, _a9_, [0, sexp_of_t$9(v_155), 0]]], match$0];
    else
     var _fo_ = match$0;
    var
     match$1 =
       [0, [1, [0, _a__, [0, caml_call1(Core_Sexp[93], type), 0]]], _fo_];
    if(connected_to)
     var
      v_154 = connected_to[1],
      _fp_ = [0, [1, [0, _a$_, [0, sexp_of_t$9(v_154), 0]]], match$1];
    else
     var _fp_ = match$1;
    return caml_call1(Core_Info[20], [1, _fp_]);
   }
   function sexp_of_t$12(param, _fn_, t){
    return caml_call1(Async_unix_Fd[2], t[2]);
   }
   function fd(t){return t[2];}
   function of_fd(fd, type){return [0, type, fd, 0];}
   function sexp_of_address(t){var t$0 = t[1]; return t$0[1][4];}
   function create$1(type){
    var
     file_descr = caml_call5(Core_unix[219], _bb_, type[1][1], type[2], 0, 0);
    function _fl_(x_157){
     return sexp_of_t$11(function(param){return _bc_;}, x_157);
    }
    var
     _fm_ = caml_call5(Core_Info[19], 0, 0, cst_socket, type, _fl_),
     fd = caml_call4(Async_unix_Fd[6], 0, _bd_, file_descr, _fm_);
    return [0, type, fd, [0, [0, 0, 0, 0, type]]];
   }
   function to_string$7(t){return t[1];}
   function make(getsockopt, setsockopt, name, opt){
    function _fk_(fd, a){return caml_call3(setsockopt, fd, opt, a);}
    return [0,
            name,
            function(fd){return caml_call2(getsockopt, fd, opt);},
            _fk_];
   }
   var _be_ = Core_unix[245], _bf_ = Core_unix[244];
   function bool(_fi_, _fj_){return make(_bf_, _be_, _fi_, _fj_);}
   var _bg_ = Core_unix[247], _bh_ = Core_unix[246];
   function int$0(_fg_, _fh_){return make(_bh_, _bg_, _fg_, _fh_);}
   var
    _bi_ = Core_unix[249],
    _bj_ = Core_unix[248],
    _bk_ = Core_unix[251],
    _bl_ = Core_unix[250];
   function float$0(_fe_, _ff_){return make(_bl_, _bk_, _fe_, _ff_);}
   var
    debug = bool(cst_debug, 0),
    broadcast = bool(cst_broadcast, 1),
    reuseaddr = bool(cst_reuseaddr, 2),
    reuseport = bool(cst_reuseport, 9),
    keepalive = bool(cst_keepalive, 3),
    dontroute = bool(cst_dontroute, 4),
    oobinline = bool(cst_oobinline, 5),
    acceptconn = bool(cst_acceptconn, 6),
    nodelay = bool(cst_nodelay, 7),
    sndbuf = int$0(cst_sndbuf, 0),
    rcvbuf = int$0(cst_rcvbuf, 1),
    error = int$0(cst_error, 2),
    typ = int$0(cst_typ, 3),
    rcvlowat = int$0(cst_rcvlowat, 4),
    sndlowat = int$0(cst_sndlowat, 5),
    linger = make(_bj_, _bi_, cst_linger, 0),
    rcvtimeo = float$0(cst_rcvtimeo, 0),
    sndtimeo = float$0(cst_sndtimeo, 1),
    mcast_loop = [0, cst_mcast_loop, Core_unix[309], Core_unix[310]],
    mcast_ttl = [0, cst_mcast_ttl, Core_unix[307], Core_unix[308]];
   function getopt(t, opt){
    return caml_call3(Async_unix_Fd[23], 0, t[2], opt[2]);
   }
   function setopt(t, opt, a){
    function _fd_(file_descr){return caml_call2(opt[3], file_descr, a);}
    return caml_call3(Async_unix_Fd[23], 0, t[2], _fd_);
   }
   function mcast_join(ifname, source, t, address){
    function _fb_(file_descr){
     var _fc_ = to_sockaddr$1(address);
     return caml_call4(Core_unix[305], ifname, source, file_descr, _fc_);
    }
    return caml_call3(Async_unix_Fd[23], 0, t[2], _fb_);
   }
   function mcast_leave(ifname, source, t, address){
    function _e$_(file_descr){
     var _fa_ = to_sockaddr$1(address);
     return caml_call4(Core_unix[306], ifname, source, file_descr, _fa_);
    }
    return caml_call3(Async_unix_Fd[23], 0, t[2], _e$_);
   }
   function mark_bound(t, address){
    var match = t[3];
    if(match){
     var i = match[1];
     i[2] = [0, address];
     var info$0 = [0, 4150146, info(i)];
    }
    else
     var
      sexp_of_address$0 = sexp_of_address(t),
      _e__ =
        function(param){
         var v_158 = param[2];
         return [1, [0, _bn_, [0, caml_call1(sexp_of_address$0, v_158), 0]]];
        },
      info$0 =
        [0,
         -72399366,
         caml_call5
          (Core_Info[19], 0, 0, cst_socket$0, [0, -850067008, address], _e__)];
    return caml_call3(Async_unix_Fd[43][1], t[2], _bm_, info$0);
   }
   function bind_keep_opts(t, address){
    var sockaddr = to_sockaddr$1(address);
    function _e7_(param){mark_bound(t, address); return t;}
    function _e8_(file_descr){
     return caml_call2(Core_unix[222], file_descr, sockaddr);
    }
    var _e9_ = caml_call3(Async_unix_Fd[35], t[2], cst_bind, _e8_);
    return caml_call2(Async_unix_Import[33][3], _e9_, _e7_);
   }
   function bind(opt, t, address){
    if(opt) var sth = opt[1], reuseaddr$0 = sth; else var reuseaddr$0 = 1;
    setopt(t, reuseaddr, reuseaddr$0);
    set_close_on_exec(t[2]);
    return bind_keep_opts(t, address);
   }
   function bind_inet_keep_opts(t, address){
    var sockaddr = to_sockaddr$1(address);
    function _e6_(file_descr){
     return caml_call2(Core_unix[222], file_descr, sockaddr);
    }
    caml_call3(Async_unix_Fd[32], 0, t[2], _e6_);
    mark_bound(t, address);
    return t;
   }
   function bind_inet(opt, t, address){
    if(opt) var sth = opt[1], reuseaddr$0 = sth; else var reuseaddr$0 = 1;
    setopt(t, reuseaddr, reuseaddr$0);
    set_close_on_exec(t[2]);
    return bind_inet_keep_opts(t, address);
   }
   function listen(opt, t){
    if(opt) var sth = opt[1], backlog = sth; else var backlog = 64;
    var fd = t[2];
    function _e5_(file_descr){
     return caml_call2(Core_unix[224], file_descr, backlog);
    }
    caml_call3(Async_unix_Fd[32], 0, fd, _e5_);
    var match = t[3];
    if(match){
     var i = match[1];
     i[3] = 1;
     var info$0 = [0, 4150146, info(i)];
    }
    else
     var info$0 = [0, -72399366, caml_call1(Core_Info[14], cst_listening)];
    caml_call3(Async_unix_Fd[43][1], fd, _bo_, info$0);
    return t;
   }
   function turn_off_nagle(addr, t){
    var _e4_ = t[1][2];
    if(1 === addr[0] && ! _e4_) return setopt(t, nodelay, 1);
    return;
   }
   function accept_nonblocking(t){
    function _eZ_(file_descr){
     return caml_call2(Core_unix[221], _bp_, file_descr);
    }
    var match = caml_call3(Async_unix_Fd[22], _bq_, t[2], _eZ_);
    if(typeof match === "number") return -177230888;
    if(106380200 > match[1]){
     var
      match$0 = match[2],
      sockaddr = match$0[2],
      file_descr = match$0[1],
      address = caml_call1(t[1][1][3], sockaddr),
      sexp_of_address$0 = sexp_of_address(t),
      _e1_ =
        function(param){
         var
          arg1_163 = param[2],
          arg0_162 = param[1],
          v_160 = arg0_162[2],
          res0_164 = [1, [0, _br_, [0, caml_call1(Core_Info[9], v_160), 0]]],
          v_161 = arg1_163[2],
          res1_165 =
            [1, [0, _bs_, [0, caml_call1(sexp_of_address$0, v_161), 0]]];
         return [1, [0, res0_164, [0, res1_165, 0]]];
        },
      _e2_ =
        [0,
         [0, 333306659, caml_call1(Async_unix_Fd[4], t[2])],
         [0, 173001291, address]],
      _e3_ = caml_call5(Core_Info[19], 0, 0, cst_socket$1, _e2_, _e1_),
      fd = caml_call4(Async_unix_Fd[6], 0, _bt_, file_descr, _e3_),
      s = [0, t[1], fd, 0];
     turn_off_nagle(sockaddr, s);
     return [0, 17724, [0, s, address]];
    }
    var exn = match[2];
    a:
    if(exn[1] === Unix_error){
     var _e0_ = exn[2];
     if(typeof _e0_ === "number"){
      if(12 <= _e0_){
       if(37 !== _e0_ && 55 !== _e0_) break a;
      }
      else if(2 !== _e0_ && 11 > _e0_) break a;
      return 616804163;
     }
    }
    throw caml_maybe_attach_backtrace(exn, 0);
   }
   function accept_interruptible(t, interrupt){
    function _eU_(param){
     var x = accept_nonblocking(t);
     if(typeof x === "number" && 616804163 <= x){
      var
       _eV_ =
         function(x){
          if(-102231997 > x)
           return -952706910 <= x ? [0, -289386606, x] : _bv_;
          if(-3286312 > x) return _bu_;
          var
           _eX_ = [0, caml_call1(Async_unix_Fd[2], t[2]), 0],
           _eY_ =
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_accept_on_bad_file_descrip),
               _eX_]];
          return caml_call1(Core[261], _eY_);
         },
       _eW_ = caml_call3(Async_unix_Fd[27], t[2], 914388854, interrupt);
      return caml_call2(Async_unix_Import[33][3], _eW_, _eV_);
     }
     return caml_call1(Async_unix_Import[30], [0, -289386606, x]);
    }
    return caml_call2(Async_kernel_Deferred[31], 0, _eU_);
   }
   function accept(t){
    function _eS_(x){
     if(typeof x === "number" && -177230888 > x) return -177230888;
     return x;
    }
    var _eT_ = accept_interruptible(t, caml_call1(Async_unix_Fd[14], t[2]));
    return caml_call2(Async_unix_Import[33][3], _eT_, _eS_);
   }
   function accept_at_most_interruptible(t, limit, interrupt){
    if(caml_call2(Async_unix_Import[5], limit, 1)){
     var
      _eM_ = [0, [1, [0, _bw_, [0, caml_call1(Core[389], limit), 0]]], 0],
      _eN_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Socket_accept_at_most_inte),
          _eM_]];
     caml_call1(Core[261], _eN_);
    }
    function _eO_(x){
     if(typeof x === "number") return x;
     var
      connection = x[2],
      connections$1 = [0, connection, 0],
      limit$2 = limit - 1 | 0,
      limit$0 = limit$2,
      connections = connections$1;
     for(;;){
      if(! caml_call2(Async_unix_Import[3], limit$0, 0)){
       try{var val = accept_nonblocking(t);}
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         _eQ_ =
           function(param){
            var conn = param[1];
            return caml_call2(Async_unix_Fd[12], 0, conn[2]);
           },
         _eR_ =
           caml_call3
            (Async_kernel_Deferred_list[14], -686623969, connections, _eQ_);
        caml_call1(Async_unix_Import[16], _eR_);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       if(typeof val !== "number"){
        var
         connection$0 = val[2],
         connections$0 = [0, connection$0, connections],
         limit$1 = limit$0 - 1 | 0,
         limit$0 = limit$1,
         connections = connections$0;
        continue;
       }
      }
      return [0, 17724, caml_call1(Core_List[59], connections)];
     }
    }
    var _eP_ = accept_interruptible(t, interrupt);
    return caml_call2(Async_unix_Import[33][3], _eP_, _eO_);
   }
   function accept_at_most(t, limit){
    function _eK_(x){
     if(typeof x === "number" && -177230888 > x) return -177230888;
     return x;
    }
    var
     _eL_ =
       accept_at_most_interruptible
        (t, limit, caml_call1(Async_unix_Fd[14], t[2]));
    return caml_call2(Async_unix_Import[33][3], _eL_, _eK_);
   }
   function connect_interruptible(t, address, interrupt){
    var sockaddr = to_sockaddr$1(address);
    turn_off_nagle(sockaddr, t);
    function success(param){
     var match = t[3];
     if(match){
      var i = match[1];
      i[1] = [0, address];
      var info$0 = [0, 4150146, info(i)];
     }
     else
      var
       sexp_of_address$0 = sexp_of_address(t),
       info$0 =
         [0,
          -72399366,
          caml_call5
           (Core_Info[19], 0, 0, cst_connected_to, address, sexp_of_address$0)];
     caml_call3(Async_unix_Fd[43][1], t[2], _bx_, info$0);
     return [0, 17724, t];
    }
    function _ev_(file_descr){
     return caml_call2(Core_unix[223], file_descr, sockaddr);
    }
    var match = caml_call3(Async_unix_Fd[22], _by_, t[2], _ev_);
    if(typeof match === "number"){
     var
      _ew_ =
        [0, [1, [0, _bz_, [0, caml_call1(Async_unix_Fd[2], t[2]), 0]]], 0],
      _ex_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_close_before_connect),
          _ew_]];
     return caml_call1(Core[261], _ex_);
    }
    if(106380200 > match[1]){
     var _eB_ = success(0);
     return caml_call1(Async_unix_Import[30], _eB_);
    }
    var e = match[2];
    a:
    if(e[1] === Unix_error){
     var _ey_ = e[2];
     if(typeof _ey_ === "number"){
      if(11 !== _ey_ && 38 !== _ey_) break a;
      var
       _ez_ =
         function(x){
          if(-102231997 > x){
           if(-952706910 <= x) return x;
           var
            _eI_ =
              [0,
               [1, [0, _bB_, [0, caml_call1(Async_unix_Fd[2], t[2]), 0]]],
               0],
            _eJ_ =
              [1,
               [0,
                caml_call1(Sexplib0_Sexp_conv[7], cst_close_during_connect),
                _eI_]];
           return caml_call1(Core[261], _eJ_);
          }
          if(-3286312 <= x){
           var
            _eC_ = [0, caml_call1(Async_unix_Fd[2], t[2]), 0],
            _eD_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_connect_on_bad_file_descri),
                _eC_]];
           return caml_call1(Core[261], _eD_);
          }
          function _eE_(file_descr){
           return caml_call2(Core_unix[246], file_descr, 2);
          }
          var match = caml_call3(Async_unix_Fd[22], 0, t[2], _eE_);
          if(typeof match === "number"){
           var
            _eF_ =
              [0,
               [1, [0, _bA_, [0, caml_call1(Async_unix_Fd[2], t[2]), 0]]],
               0],
            _eG_ =
              [1,
               [0,
                caml_call1(Sexplib0_Sexp_conv[7], cst_close_after_connect),
                _eF_]];
           return caml_call1(Core[261], _eG_);
          }
          if(106380200 <= match[1]){
           var exn = match[2];
           throw caml_maybe_attach_backtrace(exn, 0);
          }
          var err = match[2];
          if(caml_call2(Async_unix_Import[3], err, 0)) return success(0);
          var _eH_ = to_string$5(address);
          return caml_call3(Core_unix[6], err, cst_connect, _eH_);
         },
       _eA_ = caml_call3(Async_unix_Fd[27], t[2], -477700929, interrupt);
      return caml_call2(Async_unix_Import[33][3], _eA_, _ez_);
     }
    }
    throw caml_maybe_attach_backtrace(e, 0);
   }
   function connect(t, addr){
    function _et_(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bC_], 1);
     var t = param[2];
     return t;
    }
    var
     _eu_ =
       connect_interruptible
        (t, addr, caml_call1(Async_kernel_Deferred[19], 0));
    return caml_call2(Async_unix_Import[33][3], _eu_, _et_);
   }
   function shutdown(t, mode){
    var mode$0 = 737457313 === mode ? 2 : 925481320 <= mode ? 1 : 0;
    function _es_(file_descr){
     return caml_call2(Core_unix[227], file_descr, mode$0);
    }
    return caml_call3(Async_unix_Fd[32], 0, t[2], _es_);
   }
   function getsockname(t){
    var
     _eq_ = caml_call1(Async_unix_Fd[40], t[2]),
     _er_ = caml_call1(Core_unix[228], _eq_);
    return caml_call1(t[1][1][3], _er_);
   }
   function getpeername(t){
    var
     _eo_ = caml_call1(Async_unix_Fd[40], t[2]),
     _ep_ = caml_call1(Core_unix[229], _eo_);
    return caml_call1(t[1][1][3], _ep_);
   }
   function _bD_(f, t, ifname){return caml_call2(f, t[2], ifname);}
   var
    bind_to_interface_exn$0 =
      caml_call2(Core_Or_error[53], bind_to_interface_exn, _bD_);
   function socketpair(param){
    var
     match = caml_call5(Core_unix[220], _bE_, 0, 0, 0, 0),
     s2 = match[2],
     s1 = match[1];
    function make_fd(s){
     var _en_ = caml_call1(Core_Info[14], cst_socketpair);
     return caml_call4(Async_unix_Fd[6], 0, _bF_, s, _en_);
    }
    var _em_ = make_fd(s2);
    return [0, make_fd(s1), _em_];
   }
   function getbyname(n){
    return dns_lookup
            (cst_gethostbyname,
             function(param){return caml_call1(Core_unix[256][2], n);});
   }
   function getbyname_exn(n){
    return dns_lookup
            (cst_gethostbyname$0,
             function(param){return caml_call1(Core_unix[256][3], n);});
   }
   function getbyaddr(a){
    return dns_lookup
            (cst_gethostbyaddr,
             function(param){return caml_call1(Core_unix[256][4], a);});
   }
   function getbyaddr_exn(a){
    return dns_lookup
            (cst_gethostbyaddr$0,
             function(param){return caml_call1(Core_unix[256][5], a);});
   }
   var
    have_address_in_common = Core_unix[256][6],
    Host =
      [0,
       getbyname,
       getbyname_exn,
       getbyaddr,
       getbyaddr_exn,
       have_address_in_common],
    _bH_ = caml_call1(Bin_prot_Shape[5], _bG_),
    _bI_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_socket_domain), 0, _bH_], 0],
    _bJ_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1366_),
    group$7 = caml_call2(Bin_prot_Shape[2], _bJ_, _bI_),
    _bK_ = caml_call1(Bin_shape[2][1], cst_socket_domain$0),
    bin_shape_socket_domain =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _bK_), 0);
   function bin_size_socket_domain(param){return 1;}
   function bin_write_socket_domain(buf, pos, param){
    switch(param){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 2);
    }
   }
   var
    bin_writer_socket_domain =
      [0, bin_size_socket_domain, bin_write_socket_domain];
   function bin_read_socket_domain(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_unix_syscalls_ml_socke, pos_ref[1]);
   }
   function bin_read_socket_domain$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _bL_, pos_ref[1]);
    switch(match){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   var
    bin_reader_socket_domain =
      [0, bin_read_socket_domain$0, bin_read_socket_domain],
    bin_socket_domain =
      [0,
       bin_shape_socket_domain,
       bin_writer_socket_domain,
       bin_reader_socket_domain],
    compare_socket_domain = caml_int_compare;
   function hash_fold_socket_domain(hsv, arg){
    switch(arg){
      case 0:
       var _el_ = 0; break;
      case 1:
       var _el_ = 1; break;
      default: var _el_ = 2;
    }
    return caml_call2(Base_Hash[3], hsv, _el_);
   }
   function hash_socket_domain(arg){
    var
     hsv = caml_call2(Base_Hash[11], 0, 0),
     _ek_ = hash_fold_socket_domain(hsv, arg);
    return caml_call1(Base_Hash[9], _ek_);
   }
   function socket_domain_of_sexp(sexp_171){
    a:
    {
     if(0 === sexp_171[0]){
      var _eg_ = sexp_171[1];
      b:
      if(caml_string_notequal(_eg_, cst_PF_INET)){
       c:
       if(caml_string_notequal(_eg_, cst_PF_INET6)){
        if(caml_string_notequal(_eg_, cst_PF_UNIX)){
         if(! caml_string_notequal(_eg_, cst_pF_INET)) break b;
         if(! caml_string_notequal(_eg_, cst_pF_INET6)) break c;
         if(caml_string_notequal(_eg_, cst_pF_UNIX)) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _eh_ = sexp_171[1];
     if(! _eh_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_170, sexp_171);
     var _ei_ = _eh_[1];
     if(0 !== _ei_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_170, sexp_171);
     var _ej_ = _ei_[1];
     b:
     if(caml_string_notequal(_ej_, cst_PF_INET)){
      c:
      if(caml_string_notequal(_ej_, cst_PF_INET6)){
       if(caml_string_notequal(_ej_, cst_PF_UNIX)){
        if(! caml_string_notequal(_ej_, cst_pF_INET)) break b;
        if(! caml_string_notequal(_ej_, cst_pF_INET6)) break c;
        if(caml_string_notequal(_ej_, cst_pF_UNIX)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_170, sexp_171);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_170, sexp_171);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_170, sexp_171);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_170, sexp_171);
   }
   function sexp_of_socket_domain(param){
    switch(param){
      case 0:
       return _bM_;
      case 1:
       return _bN_;
      default: return _bO_;
    }
   }
   var
    _bQ_ = caml_call1(Bin_prot_Shape[5], _bP_),
    _bR_ = [0, [0, caml_call1(Bin_shape[2][1], cst_socket_type), 0, _bQ_], 0],
    _bS_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1372_),
    group$8 = caml_call2(Bin_prot_Shape[2], _bS_, _bR_),
    _bT_ = caml_call1(Bin_shape[2][1], cst_socket_type$0),
    bin_shape_socket_type =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$8, _bT_), 0);
   function bin_size_socket_type(param){return 1;}
   function bin_write_socket_type(buf, pos, param){
    switch(param){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      case 2:
       return caml_call3(Bin_prot_Write[30], buf, pos, 2);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 3);
    }
   }
   var
    bin_writer_socket_type = [0, bin_size_socket_type, bin_write_socket_type];
   function bin_read_socket_type(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_unix_syscalls_ml_socke$0,
             pos_ref[1]);
   }
   function bin_read_socket_type$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _bU_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   var
    bin_reader_socket_type = [0, bin_read_socket_type$0, bin_read_socket_type],
    bin_socket_type =
      [0,
       bin_shape_socket_type,
       bin_writer_socket_type,
       bin_reader_socket_type],
    compare_socket_type = caml_int_compare;
   function hash_fold_socket_type(hsv, arg){
    switch(arg){
      case 0:
       var _ef_ = 0; break;
      case 1:
       var _ef_ = 1; break;
      case 2:
       var _ef_ = 2; break;
      default: var _ef_ = 3;
    }
    return caml_call2(Base_Hash[3], hsv, _ef_);
   }
   function hash_socket_type(arg){
    var
     hsv = caml_call2(Base_Hash[11], 0, 0),
     _ee_ = hash_fold_socket_type(hsv, arg);
    return caml_call1(Base_Hash[9], _ee_);
   }
   function socket_type_of_sexp(sexp_177){
    a:
    {
     if(0 === sexp_177[0]){
      var _ea_ = sexp_177[1];
      b:
      if(caml_string_notequal(_ea_, cst_SOCK_DGRAM)){
       c:
       if(caml_string_notequal(_ea_, cst_SOCK_RAW)){
        d:
        if(caml_string_notequal(_ea_, cst_SOCK_SEQPACKET)){
         if(caml_string_notequal(_ea_, cst_SOCK_STREAM)){
          if(! caml_string_notequal(_ea_, cst_sOCK_DGRAM)) break b;
          if(! caml_string_notequal(_ea_, cst_sOCK_RAW)) break c;
          if(! caml_string_notequal(_ea_, cst_sOCK_SEQPACKET)) break d;
          if(caml_string_notequal(_ea_, cst_sOCK_STREAM)) break a;
         }
         return 0;
        }
        return 3;
       }
       return 2;
      }
      return 1;
     }
     var _eb_ = sexp_177[1];
     if(! _eb_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_176, sexp_177);
     var _ec_ = _eb_[1];
     if(0 !== _ec_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_176, sexp_177);
     var _ed_ = _ec_[1];
     b:
     if(caml_string_notequal(_ed_, cst_SOCK_DGRAM)){
      c:
      if(caml_string_notequal(_ed_, cst_SOCK_RAW)){
       d:
       if(caml_string_notequal(_ed_, cst_SOCK_SEQPACKET)){
        if(caml_string_notequal(_ed_, cst_SOCK_STREAM)){
         if(! caml_string_notequal(_ed_, cst_sOCK_DGRAM)) break b;
         if(! caml_string_notequal(_ed_, cst_sOCK_RAW)) break c;
         if(! caml_string_notequal(_ed_, cst_sOCK_SEQPACKET)) break d;
         if(caml_string_notequal(_ed_, cst_sOCK_STREAM)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_176, sexp_177);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_176, sexp_177);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_176, sexp_177);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_176, sexp_177);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_176, sexp_177);
   }
   function sexp_of_socket_type(param){
    switch(param){
      case 0:
       return _bV_;
      case 1:
       return _bW_;
      case 2:
       return _bX_;
      default: return _bY_;
    }
   }
   var
    _bZ_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_ADDR_UNIX, [0, Core[541], 0]],
         [0, [0, cst_ADDR_INET, [0, bin_shape_t$1, [0, Core[372], 0]]], 0]]),
    _b0_ = [0, [0, caml_call1(Bin_shape[2][1], cst_sockaddr), 0, _bZ_], 0],
    _b1_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1379_),
    group$9 = caml_call2(Bin_prot_Shape[2], _b1_, _b0_),
    _b2_ = caml_call1(Bin_shape[2][1], cst_sockaddr$0),
    bin_shape_sockaddr =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$9, _b2_), 0);
   function bin_size_sockaddr(param){
    if(0 === param[0]){
     var v1 = param[1], _d9_ = caml_call1(Core[542], v1);
     return caml_call2(Bin_prot_Common[23], 1, _d9_);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     _d__ = caml_call1(bin_size_t$0, v1$0),
     size = caml_call2(Bin_prot_Common[23], 1, _d__),
     _d$_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _d$_);
   }
   function bin_write_sockaddr(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Core[544], buf, pos$0, v1);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
     pos$2 = caml_call3(bin_write_t$0, buf, pos$1, v1$0);
    return caml_call3(Core[375], buf, pos$2, v2);
   }
   var bin_writer_sockaddr = [0, bin_size_sockaddr, bin_write_sockaddr];
   function bin_read_sockaddr(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_unix_syscalls_ml_socka, pos_ref[1]);
   }
   function bin_read_sockaddr$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Core[547], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _b3_, pos_ref[1]);
    var
     arg_1$0 = caml_call2(bin_read_t$1, buf, pos_ref),
     arg_2 = caml_call2(Core[378], buf, pos_ref);
    return [1, arg_1$0, arg_2];
   }
   var
    bin_reader_sockaddr = [0, bin_read_sockaddr$0, bin_read_sockaddr],
    bin_sockaddr =
      [0, bin_shape_sockaddr, bin_writer_sockaddr, bin_reader_sockaddr];
   function compare_sockaddr(a_178, b_179){
    if(a_178 === b_179) return 0;
    if(0 === a_178[0]){
     var a_180 = a_178[1];
     if(0 !== b_179[0]) return -1;
     var b_181 = b_179[1];
     return caml_call2(Core[551], a_180, b_181);
    }
    var a_184 = a_178[2], a_182 = a_178[1];
    if(0 === b_179[0]) return 1;
    var
     b_185 = b_179[2],
     b_183 = b_179[1],
     n = caml_call2(compare$3, a_182, b_183);
    return 0 === n ? caml_call2(Core[382], a_184, b_185) : n;
   }
   function sexp_of_sockaddr(param){
    if(0 === param[0]){
     var arg0_186 = param[1], res0_187 = caml_call1(Core[558], arg0_186);
     return [1, [0, _b4_, [0, res0_187, 0]]];
    }
    var
     arg1_189 = param[2],
     arg0_188 = param[1],
     res0_190 = caml_call1(sexp_of_t$4, arg0_188),
     res1_191 = caml_call1(Core[389], arg1_189);
    return [1, [0, _b5_, [0, res0_190, [0, res1_191, 0]]]];
   }
   var
    _b6_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_ADDR_UNIX$0, [0, Core[541], 0]],
         [0,
          [0, cst_ADDR_INET$0, [0, Blocking_sexp[5], [0, Core[372], 0]]],
          0]]),
    _b7_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_sockaddr_blocking_sexp), 0, _b6_],
       0],
    _b8_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1384_),
    group$10 = caml_call2(Bin_prot_Shape[2], _b8_, _b7_),
    _b9_ = caml_call1(Bin_shape[2][1], cst_sockaddr_blocking_sexp$0),
    bin_shape_sockaddr_blocking_se =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$10, _b9_), 0);
   function bin_size_sockaddr_blocking_sex(param){
    if(0 === param[0]){
     var v1 = param[1], _d6_ = caml_call1(Core[542], v1);
     return caml_call2(Bin_prot_Common[23], 1, _d6_);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     _d7_ = caml_call1(Blocking_sexp[1], v1$0),
     size = caml_call2(Bin_prot_Common[23], 1, _d7_),
     _d8_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _d8_);
   }
   function bin_write_sockaddr_blocking_se(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Core[544], buf, pos$0, v1);
    }
    var
     v2 = param[2],
     v1$0 = param[1],
     pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
     pos$2 = caml_call3(Blocking_sexp[2], buf, pos$1, v1$0);
    return caml_call3(Core[375], buf, pos$2, v2);
   }
   var
    bin_writer_sockaddr_blocking_s =
      [0, bin_size_sockaddr_blocking_sex, bin_write_sockaddr_blocking_se];
   function bin_read_sockaddr_blocking_sex(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_unix_syscalls_ml_socka$0,
             pos_ref[1]);
   }
   function bin_read_sockaddr_blocking_sex$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Core[547], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _b__, pos_ref[1]);
    var
     arg_1$0 = caml_call2(Blocking_sexp[3], buf, pos_ref),
     arg_2 = caml_call2(Core[378], buf, pos_ref);
    return [1, arg_1$0, arg_2];
   }
   var
    bin_reader_sockaddr_blocking_s =
      [0, bin_read_sockaddr_blocking_sex$0, bin_read_sockaddr_blocking_sex],
    bin_sockaddr_blocking_sexp =
      [0,
       bin_shape_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_reader_sockaddr_blocking_s];
   function sockaddr_blocking_sexp_of_sexp(sexp_196){
    a:
    {
     if(0 === sexp_196[0]){
      var _d2_ = sexp_196[1];
      b:
      if(caml_string_notequal(_d2_, cst_ADDR_INET$1)){
       if(caml_string_notequal(_d2_, cst_ADDR_UNIX$1)){
        if(! caml_string_notequal(_d2_, cst_aDDR_INET)) break b;
        if(caml_string_notequal(_d2_, cst_aDDR_UNIX)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_194, sexp_196);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_194, sexp_196);
     }
     var _d3_ = sexp_196[1];
     if(! _d3_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_194, sexp_196);
     var _d4_ = _d3_[1];
     if(0 !== _d4_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_194, sexp_196);
     var tag_197 = _d4_[1];
     b:
     if(caml_string_notequal(tag_197, cst_ADDR_INET$1)){
      if(caml_string_notequal(tag_197, cst_ADDR_UNIX$1)){
       if(! caml_string_notequal(tag_197, cst_aDDR_INET)) break b;
       if(caml_string_notequal(tag_197, cst_aDDR_UNIX)) break a;
      }
      var sexp_args_198 = _d3_[2];
      if(sexp_args_198 && ! sexp_args_198[2]){
       var
        arg0_199 = sexp_args_198[1],
        res0_200 = caml_call1(Core[559], arg0_199);
       return [0, res0_200];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_194,
               tag_197,
               sexp_196);
     }
     var sexp_args_203 = _d3_[2];
     if(sexp_args_203){
      var _d5_ = sexp_args_203[2];
      if(_d5_ && ! _d5_[2]){
       var
        arg1_205 = _d5_[1],
        arg0_204 = sexp_args_203[1],
        res0_206 = caml_call1(Blocking_sexp[12], arg0_204),
        res1_207 = caml_call1(Core[390], arg1_205);
       return [1, res0_206, res1_207];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_194,
              tag_197,
              sexp_196);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_194, sexp_196);
   }
   function sexp_of_sockaddr_blocking_sexp(param){
    if(0 === param[0]){
     var arg0_208 = param[1], res0_209 = caml_call1(Core[558], arg0_208);
     return [1, [0, _b$_, [0, res0_209, 0]]];
    }
    var
     arg1_211 = param[2],
     arg0_210 = param[1],
     res0_212 = caml_call1(Blocking_sexp[13], arg0_210),
     res1_213 = caml_call1(Core[389], arg1_211);
    return [1, [0, _ca_, [0, res0_212, [0, res1_213, 0]]]];
   }
   var
    _cb_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_ai_family, bin_shape_socket_domain],
         [0,
          [0, cst_ai_socktype, bin_shape_socket_type],
          [0,
           [0, cst_ai_protocol, Core[372]],
           [0,
            [0, cst_ai_addr, bin_shape_sockaddr],
            [0, [0, cst_ai_canonname, Core[541]], 0]]]]]),
    _cc_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _cb_], 0],
    _cd_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1390_),
    group$11 = caml_call2(Bin_prot_Shape[2], _cd_, _cc_),
    _ce_ = caml_call1(Bin_shape[2][1], cst_t$14),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$11, _ce_), 0);
   function bin_size_t$6(param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     size = caml_call2(Bin_prot_Common[23], 0, 1),
     size$0 = caml_call2(Bin_prot_Common[23], size, 1),
     _dZ_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _dZ_),
     _d0_ = bin_size_sockaddr(v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _d0_),
     _d1_ = caml_call1(Core[542], v5);
    return caml_call2(Bin_prot_Common[23], size$2, _d1_);
   }
   function bin_write_t$6(buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = bin_write_socket_domain(buf, pos, v1),
     pos$1 = bin_write_socket_type(buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3),
     pos$3 = bin_write_sockaddr(buf, pos$2, v4);
    return caml_call3(Core[544], buf, pos$3, v5);
   }
   var bin_writer_t$6 = [0, bin_size_t$6, bin_write_t$6];
   function bin_read_t$13(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_unix_syscalls_ml_Addr_, pos_ref[1]);
   }
   function bin_read_t$14(buf, pos_ref){
    var
     v_ai_family = bin_read_socket_domain$0(buf, pos_ref),
     v_ai_socktype = bin_read_socket_type$0(buf, pos_ref),
     v_ai_protocol = caml_call2(Core[378], buf, pos_ref),
     v_ai_addr = bin_read_sockaddr$0(buf, pos_ref),
     v_ai_canonname = caml_call2(Core[547], buf, pos_ref);
    return [0,
            v_ai_family,
            v_ai_socktype,
            v_ai_protocol,
            v_ai_addr,
            v_ai_canonname];
   }
   var
    bin_reader_t$6 = [0, bin_read_t$14, bin_read_t$13],
    bin_t$6 = [0, bin_shape_t$7, bin_writer_t$6, bin_reader_t$6];
   function sexp_of_t$13(param){
    var
     ai_canonname_223 = param[5],
     ai_addr_221 = param[4],
     ai_protocol_219 = param[3],
     ai_socktype_217 = param[2],
     ai_family_215 = param[1],
     arg_224 = caml_call1(Core[558], ai_canonname_223),
     bnds_214 = [0, [1, [0, _cf_, [0, arg_224, 0]]], 0],
     arg_222 = sexp_of_sockaddr(ai_addr_221),
     bnds_214$0 = [0, [1, [0, _cg_, [0, arg_222, 0]]], bnds_214],
     arg_220 = caml_call1(Core[389], ai_protocol_219),
     bnds_214$1 = [0, [1, [0, _ch_, [0, arg_220, 0]]], bnds_214$0],
     arg_218 = sexp_of_socket_type(ai_socktype_217),
     bnds_214$2 = [0, [1, [0, _ci_, [0, arg_218, 0]]], bnds_214$1],
     arg_216 = sexp_of_socket_domain(ai_family_215),
     bnds_214$3 = [0, [1, [0, _cj_, [0, arg_216, 0]]], bnds_214$2];
    return [1, bnds_214$3];
   }
   var
    _ck_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_ai_family$0, bin_shape_socket_domain],
         [0,
          [0, cst_ai_socktype$0, bin_shape_socket_type],
          [0,
           [0, cst_ai_protocol$0, Core[372]],
           [0,
            [0, cst_ai_addr$0, bin_shape_sockaddr_blocking_se],
            [0, [0, cst_ai_canonname$0, Core[541]], 0]]]]]),
    _cl_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _ck_], 0],
    _cm_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1400_),
    group$12 = caml_call2(Bin_prot_Shape[2], _cm_, _cl_),
    _cn_ = caml_call1(Bin_shape[2][1], cst_t$16),
    bin_shape_t$8 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$12, _cn_), 0);
   function bin_size_t$7(param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     size = caml_call2(Bin_prot_Common[23], 0, 1),
     size$0 = caml_call2(Bin_prot_Common[23], size, 1),
     _dW_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _dW_),
     _dX_ = bin_size_sockaddr_blocking_sex(v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _dX_),
     _dY_ = caml_call1(Core[542], v5);
    return caml_call2(Bin_prot_Common[23], size$2, _dY_);
   }
   function bin_write_t$7(buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = bin_write_socket_domain(buf, pos, v1),
     pos$1 = bin_write_socket_type(buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3),
     pos$3 = bin_write_sockaddr_blocking_se(buf, pos$2, v4);
    return caml_call3(Core[544], buf, pos$3, v5);
   }
   var bin_writer_t$7 = [0, bin_size_t$7, bin_write_t$7];
   function bin_read_t$15(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_unix_syscalls_ml_Addr_$0,
             pos_ref[1]);
   }
   function bin_read_t$16(buf, pos_ref){
    var
     v_ai_family = bin_read_socket_domain$0(buf, pos_ref),
     v_ai_socktype = bin_read_socket_type$0(buf, pos_ref),
     v_ai_protocol = caml_call2(Core[378], buf, pos_ref),
     v_ai_addr = bin_read_sockaddr_blocking_sex$0(buf, pos_ref),
     v_ai_canonname = caml_call2(Core[547], buf, pos_ref);
    return [0,
            v_ai_family,
            v_ai_socktype,
            v_ai_protocol,
            v_ai_addr,
            v_ai_canonname];
   }
   var
    bin_reader_t$7 = [0, bin_read_t$16, bin_read_t$15],
    bin_t$7 = [0, bin_shape_t$8, bin_writer_t$7, bin_reader_t$7];
   function t_of_sexp$9(x_227){
    function _dQ_(param){
     var
      _dT_ = param[2],
      _dU_ = _dT_[2],
      _dV_ = _dU_[2],
      ai_canonname = _dV_[2][1],
      ai_addr = _dV_[1],
      ai_protocol = _dU_[1],
      ai_socktype = _dT_[1],
      ai_family = param[1];
     return [0, ai_family, ai_socktype, ai_protocol, ai_addr, ai_canonname];
    }
    var _dR_ = 0;
    function _dS_(param){
     return caml_string_notequal(param, cst_ai_addr$2)
             ? caml_string_notequal
                (param, cst_ai_canonname$2)
               ? caml_string_notequal
                  (param, cst_ai_family$2)
                 ? caml_string_notequal
                    (param, cst_ai_protocol$2)
                   ? caml_string_notequal(param, cst_ai_socktype$2) ? -1 : 1
                   : 2
                 : 0
               : 4
             : 3;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_226,
             [0,
              cst_ai_family$1,
              1,
              socket_domain_of_sexp,
              [0,
               cst_ai_socktype$1,
               1,
               socket_type_of_sexp,
               [0,
                cst_ai_protocol$1,
                1,
                Core[390],
                [0,
                 cst_ai_addr$1,
                 1,
                 sockaddr_blocking_sexp_of_sexp,
                 [0, cst_ai_canonname$1, 1, Core[559], 0]]]]],
             _dS_,
             _dR_,
             _dQ_,
             x_227);
   }
   function sexp_of_t$14(param){
    var
     ai_canonname_237 = param[5],
     ai_addr_235 = param[4],
     ai_protocol_233 = param[3],
     ai_socktype_231 = param[2],
     ai_family_229 = param[1],
     arg_238 = caml_call1(Core[558], ai_canonname_237),
     bnds_228 = [0, [1, [0, _co_, [0, arg_238, 0]]], 0],
     arg_236 = sexp_of_sockaddr_blocking_sexp(ai_addr_235),
     bnds_228$0 = [0, [1, [0, _cp_, [0, arg_236, 0]]], bnds_228],
     arg_234 = caml_call1(Core[389], ai_protocol_233),
     bnds_228$1 = [0, [1, [0, _cq_, [0, arg_234, 0]]], bnds_228$0],
     arg_232 = sexp_of_socket_type(ai_socktype_231),
     bnds_228$2 = [0, [1, [0, _cr_, [0, arg_232, 0]]], bnds_228$1],
     arg_230 = sexp_of_socket_domain(ai_family_229),
     bnds_228$3 = [0, [1, [0, _cs_, [0, arg_230, 0]]], bnds_228$2];
    return [1, bnds_228$3];
   }
   var
    _cu_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_AI_FAMILY, [0, bin_shape_socket_domain, 0]],
         [0,
          [0, cst_AI_SOCKTYPE, [0, bin_shape_socket_type, 0]],
          [0, [0, cst_AI_PROTOCOL, [0, Core[372], 0]], _ct_]]]),
    _cv_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_getaddrinfo_option), 0, _cu_],
       0],
    _cw_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1410_),
    group$13 = caml_call2(Bin_prot_Shape[2], _cw_, _cv_),
    _cx_ = caml_call1(Bin_shape[2][1], cst_getaddrinfo_option$0),
    bin_shape_getaddrinfo_option =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$13, _cx_), 0);
   function bin_size_getaddrinfo_option(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       return caml_call2(Bin_prot_Common[23], 1, 1);
      case 1:
       return caml_call2(Bin_prot_Common[23], 1, 1);
      default:
       var v1 = param[1], _dP_ = caml_call1(Core[373], v1);
       return caml_call2(Bin_prot_Common[23], 1, _dP_);
    }
   }
   function bin_write_getaddrinfo_option(buf, pos, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_call3(Bin_prot_Write[30], buf, pos, 3);
       case 1:
        return caml_call3(Bin_prot_Write[30], buf, pos, 4);
       default: return caml_call3(Bin_prot_Write[30], buf, pos, 5);
     }
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return bin_write_socket_domain(buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return bin_write_socket_type(buf, pos$1, v1$0);
      default:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(Core[375], buf, pos$2, v1$1);
    }
   }
   var
    bin_writer_getaddrinfo_option =
      [0, bin_size_getaddrinfo_option, bin_write_getaddrinfo_option];
   function bin_read_getaddrinfo_option(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_unix_syscalls_ml_Addr_$1,
             pos_ref[1]);
   }
   function bin_read_getaddrinfo_option$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(5 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _cy_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = bin_read_socket_domain$0(buf, pos_ref); return [0, arg_1];
      case 1:
       var arg_1$0 = bin_read_socket_type$0(buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var arg_1$1 = caml_call2(Core[378], buf, pos_ref); return [2, arg_1$1];
      case 3:
       return 0;
      case 4:
       return 1;
      default: return 2;
    }
   }
   var
    bin_reader_getaddrinfo_option =
      [0, bin_read_getaddrinfo_option$0, bin_read_getaddrinfo_option],
    bin_getaddrinfo_option =
      [0,
       bin_shape_getaddrinfo_option,
       bin_writer_getaddrinfo_option,
       bin_reader_getaddrinfo_option];
   function getaddrinfo_option_of_sexp(sexp_243){
    a:
    {
     if(0 === sexp_243[0]){
      var
       _dK_ = sexp_243[1],
       _dL_ = caml_string_compare(_dK_, cst_aI_CANONNAME);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _dL_){
            if(0 < _dL_){
             if(! caml_string_notequal(_dK_, cst_aI_FAMILY)) break f;
             if(! caml_string_notequal(_dK_, cst_aI_NUMERICHOST)) break e;
             if(! caml_string_notequal(_dK_, cst_aI_PASSIVE)) break d;
             if(! caml_string_notequal(_dK_, cst_aI_PROTOCOL)) break c;
             if(caml_string_notequal(_dK_, cst_aI_SOCKTYPE)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_dK_, cst_AI_CANONNAME)){
            if(! caml_string_notequal(_dK_, cst_AI_FAMILY$0)) break f;
            if(! caml_string_notequal(_dK_, cst_AI_NUMERICHOST)) break e;
            if(! caml_string_notequal(_dK_, cst_AI_PASSIVE)) break d;
            if(! caml_string_notequal(_dK_, cst_AI_PROTOCOL$0)) break c;
            if(caml_string_notequal(_dK_, cst_AI_SOCKTYPE$0)) break a;
            break b;
           }
           return 1;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_241, sexp_243);
         }
         return 0;
        }
        return 2;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_241, sexp_243);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_241, sexp_243);
     }
     var _dM_ = sexp_243[1];
     if(! _dM_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_241, sexp_243);
     var _dN_ = _dM_[1];
     if(0 !== _dN_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_241, sexp_243);
     var
      tag_244 = _dN_[1],
      _dO_ = caml_string_compare(tag_244, cst_aI_CANONNAME);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _dO_){
           if(0 < _dO_){
            if(! caml_string_notequal(tag_244, cst_aI_FAMILY)) break f;
            if(! caml_string_notequal(tag_244, cst_aI_NUMERICHOST)) break e;
            if(! caml_string_notequal(tag_244, cst_aI_PASSIVE)) break d;
            if(! caml_string_notequal(tag_244, cst_aI_PROTOCOL)) break c;
            if(caml_string_notequal(tag_244, cst_aI_SOCKTYPE)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_244, cst_AI_CANONNAME)){
           if(! caml_string_notequal(tag_244, cst_AI_FAMILY$0)) break f;
           if(! caml_string_notequal(tag_244, cst_AI_NUMERICHOST)) break e;
           if(! caml_string_notequal(tag_244, cst_AI_PASSIVE)) break d;
           if(! caml_string_notequal(tag_244, cst_AI_PROTOCOL$0)) break c;
           if(caml_string_notequal(tag_244, cst_AI_SOCKTYPE$0)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_241, sexp_243);
         }
         var sexp_args_245 = _dM_[2];
         if(sexp_args_245 && ! sexp_args_245[2]){
          var
           arg0_246 = sexp_args_245[1],
           res0_247 = socket_domain_of_sexp(arg0_246);
          return [0, res0_247];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_241,
                  tag_244,
                  sexp_243);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_241, sexp_243);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_241, sexp_243);
      }
      var sexp_args_255 = _dM_[2];
      if(sexp_args_255 && ! sexp_args_255[2]){
       var
        arg0_256 = sexp_args_255[1],
        res0_257 = caml_call1(Core[390], arg0_256);
       return [2, res0_257];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_241,
               tag_244,
               sexp_243);
     }
     var sexp_args_250 = _dM_[2];
     if(sexp_args_250 && ! sexp_args_250[2]){
      var
       arg0_251 = sexp_args_250[1],
       res0_252 = socket_type_of_sexp(arg0_251);
      return [1, res0_252];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_241,
              tag_244,
              sexp_243);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_241, sexp_243);
   }
   function sexp_of_getaddrinfo_option(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _cz_;
       case 1:
        return _cA_;
       default: return _cB_;
     }
    switch(param[0]){
      case 0:
       var arg0_258 = param[1], res0_259 = sexp_of_socket_domain(arg0_258);
       return [1, [0, _cC_, [0, res0_259, 0]]];
      case 1:
       var arg0_260 = param[1], res0_261 = sexp_of_socket_type(arg0_260);
       return [1, [0, _cD_, [0, res0_261, 0]]];
      default:
       var arg0_262 = param[1], res0_263 = caml_call1(Core[389], arg0_262);
       return [1, [0, _cE_, [0, res0_263, 0]]];
    }
   }
   function get(opt, host, options){
    if(opt) var sth = opt[1], service = sth; else var service = cst$0;
    return dns_lookup
            (cst_getaddrinfo,
             function(param){
              return caml_call3(Core_unix[264], host, service, options);
             });
   }
   var
    _cF_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_ni_hostname, Core[541]],
         [0, [0, cst_ni_service, Core[541]], 0]]),
    _cG_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$17), 0, _cF_], 0],
    _cH_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1425_),
    group$14 = caml_call2(Bin_prot_Shape[2], _cH_, _cG_),
    _cI_ = caml_call1(Bin_shape[2][1], cst_t$18),
    bin_shape_t$9 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$14, _cI_), 0);
   function bin_size_t$8(param){
    var
     v2 = param[2],
     v1 = param[1],
     _dI_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dI_),
     _dJ_ = caml_call1(Core[542], v2);
    return caml_call2(Bin_prot_Common[23], size, _dJ_);
   }
   function bin_write_t$8(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1);
    return caml_call3(Core[544], buf, pos$0, v2);
   }
   var bin_writer_t$8 = [0, bin_size_t$8, bin_write_t$8];
   function bin_read_t$17(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_unix_syscalls_ml_Name_, pos_ref[1]);
   }
   function bin_read_t$18(buf, pos_ref){
    var
     v_ni_hostname = caml_call2(Core[547], buf, pos_ref),
     v_ni_service = caml_call2(Core[547], buf, pos_ref);
    return [0, v_ni_hostname, v_ni_service];
   }
   var
    bin_reader_t$8 = [0, bin_read_t$18, bin_read_t$17],
    bin_t$8 = [0, bin_shape_t$9, bin_writer_t$8, bin_reader_t$8];
   function t_of_sexp$10(x_266){
    function _dF_(param){
     var ni_service = param[2][1], ni_hostname = param[1];
     return [0, ni_hostname, ni_service];
    }
    var _dG_ = 0;
    function _dH_(param){
     return caml_string_notequal(param, cst_ni_hostname$1)
             ? caml_string_notequal(param, cst_ni_service$1) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_265,
             [0,
              cst_ni_hostname$0,
              1,
              Core[559],
              [0, cst_ni_service$0, 1, Core[559], 0]],
             _dH_,
             _dG_,
             _dF_,
             x_266);
   }
   function sexp_of_t$15(param){
    var
     ni_service_270 = param[2],
     ni_hostname_268 = param[1],
     arg_271 = caml_call1(Core[558], ni_service_270),
     bnds_267 = [0, [1, [0, _cJ_, [0, arg_271, 0]]], 0],
     arg_269 = caml_call1(Core[558], ni_hostname_268),
     bnds_267$0 = [0, [1, [0, _cK_, [0, arg_269, 0]]], bnds_267];
    return [1, bnds_267$0];
   }
   function getnameinfo_option_of_sexp(sexp_275){
    a:
    {
     if(0 === sexp_275[0]){
      var _dz_ = sexp_275[1], _dA_ = caml_string_compare(_dz_, cst_nI_DGRAM);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _dA_){
           if(0 < _dA_){
            if(! caml_string_notequal(_dz_, cst_nI_NAMEREQD)) break e;
            if(! caml_string_notequal(_dz_, cst_nI_NOFQDN)) break d;
            if(! caml_string_notequal(_dz_, cst_nI_NUMERICHOST)) break c;
            if(caml_string_notequal(_dz_, cst_nI_NUMERICSERV)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_dz_, cst_NI_DGRAM)){
           if(! caml_string_notequal(_dz_, cst_NI_NAMEREQD)) break e;
           if(! caml_string_notequal(_dz_, cst_NI_NOFQDN)) break d;
           if(! caml_string_notequal(_dz_, cst_NI_NUMERICHOST)) break c;
           if(caml_string_notequal(_dz_, cst_NI_NUMERICSERV)) break a;
           break b;
          }
          return 4;
         }
         return 2;
        }
        return 0;
       }
       return 1;
      }
      return 3;
     }
     var _dB_ = sexp_275[1];
     if(! _dB_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_274, sexp_275);
     var _dC_ = _dB_[1];
     if(0 !== _dC_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_274, sexp_275);
     var _dD_ = _dC_[1], _dE_ = caml_string_compare(_dD_, cst_nI_DGRAM);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= _dE_){
          if(0 < _dE_){
           if(! caml_string_notequal(_dD_, cst_nI_NAMEREQD)) break e;
           if(! caml_string_notequal(_dD_, cst_nI_NOFQDN)) break d;
           if(! caml_string_notequal(_dD_, cst_nI_NUMERICHOST)) break c;
           if(caml_string_notequal(_dD_, cst_nI_NUMERICSERV)) break a;
           break b;
          }
         }
         else if(caml_string_notequal(_dD_, cst_NI_DGRAM)){
          if(! caml_string_notequal(_dD_, cst_NI_NAMEREQD)) break e;
          if(! caml_string_notequal(_dD_, cst_NI_NOFQDN)) break d;
          if(! caml_string_notequal(_dD_, cst_NI_NUMERICHOST)) break c;
          if(caml_string_notequal(_dD_, cst_NI_NUMERICSERV)) break a;
          break b;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_274, sexp_275);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_274, sexp_275);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_274, sexp_275);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_274, sexp_275);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_274, sexp_275);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_274, sexp_275);
   }
   function sexp_of_getnameinfo_option(param){
    switch(param){
      case 0:
       return _cL_;
      case 1:
       return _cM_;
      case 2:
       return _cN_;
      case 3:
       return _cO_;
      default: return _cP_;
    }
   }
   var
    _cR_ = caml_call1(Bin_prot_Shape[5], _cQ_),
    _cS_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_getnameinfo_option), 0, _cR_],
       0],
    _cT_ = caml_call1(Bin_shape[4][1], cst_src_unix_syscalls_ml_1431_),
    group$15 = caml_call2(Bin_prot_Shape[2], _cT_, _cS_),
    _cU_ = caml_call1(Bin_shape[2][1], cst_getnameinfo_option$0),
    bin_shape_getnameinfo_option =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$15, _cU_), 0);
   function bin_size_getnameinfo_option(param){return 1;}
   function bin_write_getnameinfo_option(buf, pos, param){
    switch(param){
      case 0:
       return caml_call3(Bin_prot_Write[30], buf, pos, 0);
      case 1:
       return caml_call3(Bin_prot_Write[30], buf, pos, 1);
      case 2:
       return caml_call3(Bin_prot_Write[30], buf, pos, 2);
      case 3:
       return caml_call3(Bin_prot_Write[30], buf, pos, 3);
      default: return caml_call3(Bin_prot_Write[30], buf, pos, 4);
    }
   }
   var
    bin_writer_getnameinfo_option =
      [0, bin_size_getnameinfo_option, bin_write_getnameinfo_option];
   function bin_read_getnameinfo_option(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_unix_syscalls_ml_Name_$0,
             pos_ref[1]);
   }
   function bin_read_getnameinfo_option$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(4 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _cV_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      default: return 4;
    }
   }
   var
    bin_reader_getnameinfo_option =
      [0, bin_read_getnameinfo_option$0, bin_read_getnameinfo_option],
    bin_getnameinfo_option =
      [0,
       bin_shape_getnameinfo_option,
       bin_writer_getnameinfo_option,
       bin_reader_getnameinfo_option];
   function get$0(addr, options){
    return dns_lookup
            (cst_getnameinfo,
             function(param){
              return caml_call2(Core_unix[269], addr, options);
             });
   }
   function gethostname(param){return caml_call1(Core_unix[255], 0);}
   function setuid(uid){return caml_call1(Core_unix[166], uid);}
   function setgid(gid){return caml_call1(Core_unix[169], gid);}
   function getuid(param){return caml_call1(Core_unix[164], 0);}
   function getgid(param){return caml_call1(Core_unix[167], 0);}
   function getegid(param){return caml_call1(Core_unix[168], 0);}
   function geteuid(param){return caml_call1(Core_unix[165], 0);}
   var include$3 = Core_unix[270], _cW_ = include$3[3], _cX_ = include$3[4];
   function tcgetattr(fd){
    function _dy_(file_descr){return caml_call1(_cW_, file_descr);}
    return caml_call3(Async_unix_Fd[35], fd, cst_tcgetattr, _dy_);
   }
   function tcsetattr(t, fd, mode){
    function _dx_(file_descr){return caml_call3(_cX_, t, file_descr, mode);}
    return caml_call3(Async_unix_Fd[35], fd, cst_tcsetattr, _dx_);
   }
   function shell(r){return r[7];}
   function dir(r){return r[6];}
   function gecos(r){return r[5];}
   function gid$0(r){return r[4];}
   function uid$0(r){return r[3];}
   function passwd(r){return r[2];}
   function name(r){return r[1];}
   function t_of_sexp$11(x_278){
    function _dp_(param){
     var
      _ds_ = param[2],
      _dt_ = _ds_[2],
      _du_ = _dt_[2],
      _dv_ = _du_[2],
      _dw_ = _dv_[2],
      shell = _dw_[2][1],
      dir = _dw_[1],
      gecos = _dv_[1],
      gid = _du_[1],
      uid = _dt_[1],
      passwd = _ds_[1],
      name = param[1];
     return [0, name, passwd, uid, gid, gecos, dir, shell];
    }
    var _dq_ = 0;
    function _dr_(param){
     return caml_string_notequal(param, cst_dir$0)
             ? caml_string_notequal
                (param, cst_gecos$0)
               ? caml_string_notequal
                  (param, cst_gid$3)
                 ? caml_string_notequal
                    (param, cst_name$1)
                   ? caml_string_notequal
                      (param, cst_passwd$1)
                     ? caml_string_notequal
                        (param, cst_shell$0)
                       ? caml_string_notequal(param, cst_uid$2) ? -1 : 2
                       : 6
                     : 1
                   : 0
                 : 3
               : 4
             : 5;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_277,
             [0,
              cst_name,
              1,
              Core[559],
              [0,
               cst_passwd,
               1,
               Core[559],
               [0,
                cst_uid$1,
                1,
                Core[390],
                [0,
                 cst_gid$1,
                 1,
                 Core[390],
                 [0,
                  cst_gecos,
                  1,
                  Core[559],
                  [0, cst_dir, 1, Core[559], [0, cst_shell, 1, Core[559], 0]]]]]]],
             _dr_,
             _dq_,
             _dp_,
             x_278);
   }
   function sexp_of_t$16(param){
    var
     shell_292 = param[7],
     dir_290 = param[6],
     gecos_288 = param[5],
     gid_286 = param[4],
     uid_284 = param[3],
     passwd_282 = param[2],
     name_280 = param[1],
     arg_293 = caml_call1(Core[558], shell_292),
     bnds_279 = [0, [1, [0, _cY_, [0, arg_293, 0]]], 0],
     arg_291 = caml_call1(Core[558], dir_290),
     bnds_279$0 = [0, [1, [0, _cZ_, [0, arg_291, 0]]], bnds_279],
     arg_289 = caml_call1(Core[558], gecos_288),
     bnds_279$1 = [0, [1, [0, _c0_, [0, arg_289, 0]]], bnds_279$0],
     arg_287 = caml_call1(Core[389], gid_286),
     bnds_279$2 = [0, [1, [0, _c1_, [0, arg_287, 0]]], bnds_279$1],
     arg_285 = caml_call1(Core[389], uid_284),
     bnds_279$3 = [0, [1, [0, _c2_, [0, arg_285, 0]]], bnds_279$2],
     arg_283 = caml_call1(Core[558], passwd_282),
     bnds_279$4 = [0, [1, [0, _c3_, [0, arg_283, 0]]], bnds_279$3],
     arg_281 = caml_call1(Core[558], name_280),
     bnds_279$5 = [0, [1, [0, _c4_, [0, arg_281, 0]]], bnds_279$4];
    return [1, bnds_279$5];
   }
   function getbyname$0(n){
    function _do_(param){return caml_call1(Core_unix[170][11], n);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _do_);
   }
   function getbyname_exn$0(n){
    function _dn_(param){return caml_call1(Core_unix[170][12], n);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _dn_);
   }
   function getbyuid(uid){
    function _dm_(param){return caml_call1(Core_unix[170][13], uid);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _dm_);
   }
   function getbyuid_exn(uid){
    function _dl_(param){return caml_call1(Core_unix[170][14], uid);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _dl_);
   }
   var
    Passwd =
      [0,
       shell,
       dir,
       gecos,
       gid$0,
       uid$0,
       passwd,
       name,
       t_of_sexp$11,
       sexp_of_t$16,
       getbyname$0,
       getbyname_exn$0,
       getbyuid,
       getbyuid_exn];
   function mem(r){return r[4];}
   function gid$1(r){return r[3];}
   function passwd$0(r){return r[2];}
   function name$0(r){return r[1];}
   function t_of_sexp$12(x_296){
    function _df_(param){
     var
      _dj_ = param[2],
      _dk_ = _dj_[2],
      mem = _dk_[2][1],
      gid = _dk_[1],
      passwd = _dj_[1],
      name = param[1];
     return [0, name, passwd, gid, mem];
    }
    var _dg_ = 0;
    function _dh_(param){
     return caml_string_notequal(param, cst_gid$3)
             ? caml_string_notequal
                (param, cst_mem$0)
               ? caml_string_notequal
                  (param, cst_name$1)
                 ? caml_string_notequal(param, cst_passwd$1) ? -1 : 1
                 : 0
               : 3
             : 2;
    }
    var _di_ = [0, cst_mem, 1, caml_call1(Core[302], Core[559]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_295,
             [0,
              cst_name$0,
              1,
              Core[559],
              [0,
               cst_passwd$0,
               1,
               Core[559],
               [0, cst_gid$2, 1, Core[390], _di_]]],
             _dh_,
             _dg_,
             _df_,
             x_296);
   }
   function sexp_of_t$17(param){
    var
     mem_304 = param[4],
     gid_302 = param[3],
     passwd_300 = param[2],
     name_298 = param[1],
     arg_305 = caml_call2(Core[301], Core[558], mem_304),
     bnds_297 = [0, [1, [0, _c5_, [0, arg_305, 0]]], 0],
     arg_303 = caml_call1(Core[389], gid_302),
     bnds_297$0 = [0, [1, [0, _c6_, [0, arg_303, 0]]], bnds_297],
     arg_301 = caml_call1(Core[558], passwd_300),
     bnds_297$1 = [0, [1, [0, _c7_, [0, arg_301, 0]]], bnds_297$0],
     arg_299 = caml_call1(Core[558], name_298),
     bnds_297$2 = [0, [1, [0, _c8_, [0, arg_299, 0]]], bnds_297$1];
    return [1, bnds_297$2];
   }
   function getbyname$1(n){
    function _de_(param){return caml_call1(Core_unix[171][6], n);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _de_);
   }
   function getbyname_exn$1(n){
    function _dd_(param){return caml_call1(Core_unix[171][7], n);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _dd_);
   }
   function getbygid(gid){
    function _dc_(param){return caml_call1(Core_unix[171][8], gid);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _dc_);
   }
   function getbygid_exn(gid){
    function _db_(param){return caml_call1(Core_unix[171][9], gid);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _db_);
   }
   var
    Group =
      [0,
       mem,
       gid$1,
       passwd$0,
       name$0,
       t_of_sexp$12,
       sexp_of_t$17,
       getbyname$1,
       getbyname_exn$1,
       getbygid,
       getbygid_exn];
   function username(param){
    function _da_(param){return caml_call1(Core_unix[172], 0);}
    return caml_call2(Async_unix_In_thread[7], cst_username, _da_);
   }
   function getlogin(param){
    function _c$_(param){return caml_call1(Core_unix[173], 0);}
    return caml_call2(Async_unix_In_thread[7], cst_getlogin, _c$_);
   }
   function getifaddrs(param){
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, Core_unix[316]);
   }
   function _c9_(wordexp, flags, glob){
    function _c__(param){return caml_call2(wordexp, flags, glob);}
    return caml_call2(Async_unix_In_thread[7], cst_wordexp, _c__);
   }
   var wordexp = caml_call2(Core_Or_error[53], Core_unix[300], _c9_);
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Unix_syscalls);
   var
    Async_unix_Unix_syscalls =
      [0,
       system,
       system_exn,
       getpid,
       getppid,
       getppid_exn,
       this_process_became_child_of_i,
       nice,
       cores,
       openfile,
       [0, sexp_of_t],
       [0,
        compare,
        all,
        t_of_sexp,
        sexp_of_t$0,
        of_string,
        to_string,
        arg_type],
       Lock,
       with_file,
       fcntl_getfl,
       fcntl_setfl,
       close,
       deregister,
       lseek,
       truncate,
       ftruncate,
       fsync,
       fdatasync,
       sync,
       lockf,
       try_lockf,
       test_lockf,
       unlockf,
       flock,
       try_flock,
       funlock,
       [0,
        sexp_of_t$2,
        t_of_sexp$1,
        t_of_sexp$0,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare$1,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        Map,
        Set,
        of_unix,
        to_unix],
       [0,
        ctime,
        mtime,
        atime,
        size,
        rdev,
        gid,
        uid,
        nlink,
        perm,
        kind,
        ino,
        dev,
        t_of_sexp$2,
        sexp_of_t$3,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t$0,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare$2,
        of_unix$0,
        to_unix$0,
        to_string$0],
       fstat,
       stat,
       lstat,
       isatty,
       unlink,
       remove,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       access,
       access_exn,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir_opt,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       symlink,
       readlink,
       mkstemp,
       mkdtemp,
       getgrouplist,
       times,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       utimes,
       sexp_of_env,
       env_of_sexp,
       environment,
       getenv,
       getenv_exn,
       unsafe_getenv,
       unsafe_getenv_exn,
       putenv,
       unsetenv,
       fork_exec,
       sexp_of_wait_on,
       wait_on_of_sexp$0,
       wait_on_of_sexp,
       wait,
       wait_nohang,
       wait_untraced,
       wait_nohang_untraced,
       waitpid_prompt,
       waitpid_prompt,
       waitpid_exn,
       [0,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_shape_t$1,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0,
        hash_fold_t,
        hash,
        sexp_of_t$4,
        arg_type$0,
        t_of_sexp$3,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        equal$0,
        compare$3,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0,
        validate_lbound$0,
        validate_ubound$0,
        validate_bound$0,
        of_string$0,
        to_string$1,
        bind_any,
        bind_any_inet6,
        localhost,
        localhost_inet6,
        inet4_addr_of_int32,
        inet4_addr_to_int32_exn,
        inet4_addr_of_int63,
        inet4_addr_to_int63_exn,
        of_string_or_getbyname],
       [0],
       socketpair,
       [0,
        [0,
         [0,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$8,
          bin_read_t$7,
          bin_shape_t$4,
          bin_writer_t$3,
          bin_reader_t$3,
          bin_t$3,
          sexp_of_t$8,
          t_of_sexp$7,
          t_of_sexp$6,
          compare$6,
          create$0,
          to_string$4,
          to_sockaddr$0],
         [0,
          bin_size_t$1,
          bin_write_t$1,
          bin_read_t$4,
          bin_read_t$3,
          bin_shape_t$2,
          bin_writer_t$1,
          bin_reader_t$1,
          bin_t$1,
          compare$4,
          hash_fold_t$0,
          hash$0,
          sexp_of_t$5,
          [0,
           bin_size_t$2,
           bin_write_t$2,
           bin_read_t$6,
           bin_read_t$5,
           bin_shape_t$3,
           bin_writer_t$2,
           bin_reader_t$2,
           bin_t$2,
           compare$5,
           hash_fold_t$1,
           hash$1,
           t_of_sexp$5,
           t_of_sexp$4,
           sexp_of_t$6],
          Show_port_in_test,
          create,
          create_bind_any,
          addr,
          port,
          to_string$2,
          to_host_and_port,
          to_sockaddr],
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$10,
         bin_read_t$9,
         bin_shape_t$5,
         bin_writer_t$4,
         bin_reader_t$4,
         bin_t$4,
         sexp_of_t$9,
         [0,
          bin_size_t$5,
          bin_write_t$5,
          bin_read_t$12,
          bin_read_t$11,
          bin_shape_t$6,
          bin_writer_t$5,
          bin_reader_t$5,
          bin_t$5,
          hash_fold_t$2,
          hash$2,
          t_of_sexp$8,
          sexp_of_t$10],
         to_string$5,
         to_sockaddr$1],
        [0, unix, inet, is_inet_witness, to_string$6],
        sexp_of_t$12,
        [0, sexp_of_t$11, tcp, udp, unix$0, unix_dgram, family],
        create$1,
        connect,
        connect_interruptible,
        bind_keep_opts,
        bind,
        bind_inet_keep_opts,
        bind_inet,
        listen,
        accept,
        accept_interruptible,
        accept_at_most,
        accept_at_most_interruptible,
        shutdown,
        fd,
        of_fd,
        getsockname,
        getpeername,
        [0,
         debug,
         broadcast,
         reuseaddr,
         reuseport,
         keepalive,
         dontroute,
         oobinline,
         acceptconn,
         nodelay,
         sndbuf,
         rcvbuf,
         error,
         typ,
         rcvlowat,
         sndlowat,
         linger,
         rcvtimeo,
         sndtimeo,
         mcast_loop,
         mcast_ttl,
         to_string$7],
        getopt,
        setopt,
        mcast_join,
        mcast_leave,
        bind_to_interface_exn$0],
       bind_to_interface_exn,
       Host,
       bin_shape_socket_domain,
       bin_size_socket_domain,
       bin_write_socket_domain,
       bin_writer_socket_domain,
       bin_read_socket_domain$0,
       bin_read_socket_domain,
       bin_reader_socket_domain,
       bin_socket_domain,
       compare_socket_domain,
       hash_fold_socket_domain,
       hash_socket_domain,
       sexp_of_socket_domain,
       socket_domain_of_sexp,
       bin_shape_socket_type,
       bin_size_socket_type,
       bin_write_socket_type,
       bin_writer_socket_type,
       bin_read_socket_type$0,
       bin_read_socket_type,
       bin_reader_socket_type,
       bin_socket_type,
       compare_socket_type,
       hash_fold_socket_type,
       hash_socket_type,
       sexp_of_socket_type,
       socket_type_of_sexp,
       bin_shape_sockaddr,
       bin_size_sockaddr,
       bin_write_sockaddr,
       bin_writer_sockaddr,
       bin_read_sockaddr$0,
       bin_read_sockaddr,
       bin_reader_sockaddr,
       bin_sockaddr,
       compare_sockaddr,
       sexp_of_sockaddr,
       bin_shape_sockaddr_blocking_se,
       bin_size_sockaddr_blocking_sex,
       bin_write_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_read_sockaddr_blocking_sex$0,
       bin_read_sockaddr_blocking_sex,
       bin_reader_sockaddr_blocking_s,
       bin_sockaddr_blocking_sexp,
       sexp_of_sockaddr_blocking_sexp,
       sockaddr_blocking_sexp_of_sexp,
       [0,
        bin_size_t$6,
        bin_write_t$6,
        bin_read_t$14,
        bin_read_t$13,
        bin_shape_t$7,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        sexp_of_t$13,
        [0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$16,
         bin_read_t$15,
         bin_shape_t$8,
         bin_writer_t$7,
         bin_reader_t$7,
         bin_t$7,
         t_of_sexp$9,
         sexp_of_t$14],
        bin_shape_getaddrinfo_option,
        bin_size_getaddrinfo_option,
        bin_write_getaddrinfo_option,
        bin_writer_getaddrinfo_option,
        bin_read_getaddrinfo_option$0,
        bin_read_getaddrinfo_option,
        bin_reader_getaddrinfo_option,
        bin_getaddrinfo_option,
        sexp_of_getaddrinfo_option,
        getaddrinfo_option_of_sexp,
        get],
       [0,
        bin_size_t$8,
        bin_write_t$8,
        bin_read_t$18,
        bin_read_t$17,
        bin_shape_t$9,
        bin_writer_t$8,
        bin_reader_t$8,
        bin_t$8,
        t_of_sexp$10,
        sexp_of_t$15,
        bin_shape_getnameinfo_option,
        bin_size_getnameinfo_option,
        bin_write_getnameinfo_option,
        bin_writer_getnameinfo_option,
        bin_read_getnameinfo_option$0,
        bin_read_getnameinfo_option,
        bin_reader_getnameinfo_option,
        bin_getnameinfo_option,
        sexp_of_getnameinfo_option,
        getnameinfo_option_of_sexp,
        get$0],
       gethostname,
       getuid,
       geteuid,
       getgid,
       getegid,
       setuid,
       setgid,
       Unix_error,
       [0, tcgetattr, tcsetattr],
       Passwd,
       Group,
       getifaddrs,
       username,
       getlogin,
       wordexp,
       [0, [0, check_all, do_not_handle_sigchld], dns_lookup]];
   runtime.caml_register_global
    (641, Async_unix_Unix_syscalls, cst_Async_unix_Unix_syscalls$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Writer0
//# unitInfo: Requires: Async_kernel__Async_invariant, Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Deferred_list, Async_kernel__Deferred_or_error, Async_kernel__Deferred_result, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_kernel__Priority, Async_kernel__Time_source, Async_unix__Backing_out_channel, Async_unix__Fd, Async_unix__Import, Async_unix__In_thread, Async_unix__Io_uring, Async_unix__Io_uring_raw_singleton, Async_unix__Require_explicit_time_source, Async_unix__Shutdown, Async_unix__Unix_syscalls, Base__Exn, Base__Field, Base__Int63, Bigstring_unix, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Utils, Bin_prot__Write, Bin_shape, CamlinternalLazy, Core, Core__Array, Core__Bag, Core__Bigstring, Core__Bigsubstring, Core__Bool, Core__Deque, Core__Error, Core__Filename, Core__Hashable, Core__Hashtbl, Core__Info, Core__Int, Core__Int63, Core__Lazy, Core__List, Core__Option, Core__Or_error, Core__Ordered_collection_common, Core__Queue, Core__Result, Core__Sexp, Core__Signal, Core__Substring, Core__Unique_id, Core_unix, Expect_test_config, Filename_unix, Inline_test_config, Iobuf, Iobuf_unix, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib__Pre_sexp, Stdio__Out_channel, Stdlib__Format, Time_float_unix, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Async_unix_Writer0$0 = "Async_unix__Writer0",
    cst_At_most$0 = "At_most",
    cst_Closed = "Closed",
    cst_Consumer_left = "Consumer_left",
    cst_Error = "Error",
    cst_Unlimited$0 = "Unlimited",
    cst_async_unix$0 = "async_unix",
    cst_back$0 = "back",
    cst_background_writer_state$0 = "background_writer_state",
    cst_backing_out_channel$0 = "backing_out_channel",
    cst_buffer_age_limit$1 = "buffer_age_limit",
    cst_bytes_received_queue$0 = "bytes_received_queue",
    cst_bytes_written$0 = "bytes_written",
    cst_close_finished$0 = "close_finished",
    cst_close_started$0 = "close_started",
    cst_consumer_left$0 = "consumer_left",
    cst_exn = "exn",
    cst_flush_at_shutdown_elt$0 = "flush_at_shutdown_elt",
    cst_maximum_age = "maximum_age",
    cst_open_flags = "open_flags",
    cst_scheduled_back$0 = "scheduled_back",
    cst_scheduled_bytes$0 = "scheduled_bytes",
    cst_src_writer0_ml$0 = "src/writer0.ml",
    cst_src_writer0_ml_buffer_age_ = "src/writer0.ml.buffer_age_limit",
    cst_times_received_queue$0 = "times_received_queue",
    cst_too_old$0 = "too_old",
    cst_writer = "writer",
    cst_written = "written",
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = "\n",
    mode = [0, 913115943, [0, -545248983, 0]],
    err = [2, cst_src_writer0_ml_buffer_age_],
    pos$0 = "src/writer0.ml:396:30",
    pos = "src/writer0.ml:323:26",
    error_source_054 = cst_src_writer0_ml_buffer_age_,
    error_source_059 = cst_src_writer0_ml_buffer_age_,
    Core = global_data.Core,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_unix_Import = global_data.Async_unix__Import,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_List = global_data.Core__List,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Assert_failure = global_data.Assert_failure,
    Filename_unix = global_data.Filename_unix,
    Core_Info = global_data.Core__Info,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Core_Error = global_data.Core__Error,
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred_result = global_data.Async_kernel__Deferred_result,
    Core_Option = global_data.Core__Option,
    Core_Filename = global_data.Core__Filename,
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Core_Lazy = global_data.Core__Lazy,
    Core_Signal = global_data.Core__Signal,
    Async_unix_Shutdown = global_data.Async_unix__Shutdown,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_unix = global_data.Core_unix,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Async_unix_Backing_out_channel =
      global_data.Async_unix__Backing_out_channel,
    Async_unix_Require_explicit_ti =
      global_data.Async_unix__Require_explicit_time_source,
    Iobuf = global_data.Iobuf,
    Iobuf_unix = global_data.Iobuf_unix,
    Core_Bigsubstring = global_data.Core__Bigsubstring,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Sexp = global_data.Core__Sexp,
    Stdlib_Format = global_data.Stdlib__Format,
    Sexplib_Pre_sexp = global_data.Sexplib__Pre_sexp,
    Core_Substring = global_data.Core__Substring,
    Core_Ordered_collection_common =
      global_data.Core__Ordered_collection_common,
    Bigstring_unix = global_data.Bigstring_unix,
    Base_Exn = global_data.Base__Exn,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Time_ns_unix = global_data.Time_ns_unix,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core_Array = global_data.Core__Array,
    Async_kernel_Priority = global_data.Async_kernel__Priority,
    Core_Deque = global_data.Core__Deque,
    Core_Int63 = global_data.Core__Int63,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton,
    Async_unix_Io_uring = global_data.Async_unix__Io_uring,
    Core_Int = global_data.Core__Int,
    Time_float_unix = global_data.Time_float_unix,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Base_Int63 = global_data.Base__Int63,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Field = global_data.Base__Field,
    Async_kernel_Async_invariant = global_data.Async_kernel__Async_invariant,
    Core_Bool = global_data.Core__Bool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_Unique_id = global_data.Core__Unique_id,
    Core_Hashable = global_data.Core__Hashable,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Writer0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_writer0_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "writer0.ml");
   var
    Id = caml_call1(Core_Unique_id[2], 0),
    debug = Async_kernel_Debug[14],
    _bV_ = [0, 523273847],
    cst_Writer_with_file_atomic_no$0 =
      "Writer.with_file_atomic: not replacing special file",
    cst_Writer_with_file_atomic_no =
      "Writer.with_file_atomic: not replacing a directory",
    _bS_ = [0, cst_src_writer0_ml$0, 1866, 11],
    cst_writer_closed_by_f = "writer closed by [f]",
    _bR_ = [0, "file"],
    cst_Error_in_Writer_with_file_ = "Error in Writer.with_file_atomic",
    _bT_ = [0, -146189108],
    _bU_ = [0, 3903734],
    _bZ_ = [0, "phys_equal stdout stderr"],
    _bY_ = [0, "Lazy.is_val stderr"],
    _bX_ = [0, "Lazy.is_val stdout"],
    cst_unable_to_create_stdout_st = "unable to create stdout/stderr",
    cst_src_writer0_ml_1767_35 = "src/writer0.ml:1767:35",
    _bP_ = [0, "size"],
    _bQ_ = [0, cst_written],
    cst_Writer_write_bin_prot_no_s =
      "Writer.write_bin_prot_no_size_header bug!",
    _bO_ = [0, [15, [17, 2, 0]], "%a@?"],
    _bM_ = [0, "Space_if_needed"],
    _bN_ = [0, "Newline"],
    _bL_ = [0, cst_exn],
    cst_Writer_write_gen_whole_err =
      "Writer.write_gen_whole: error writing value",
    _bK_ = [0, cst_exn],
    cst_Writer_write_gen_error_wri = "Writer.write_gen: error writing value",
    _bJ_ = [0, cst_src_writer0_ml$0, 1356, 6],
    _bI_ = [0, cst_src_writer0_ml$0, 1357, 6],
    _bF_ = [0, cst_writer],
    _bG_ = [0, "len"],
    _bH_ = [0, cst_written],
    cst_write_direct_s_f_argument_ =
      "[write_direct]'s [~f] argument returned invalid [written]",
    _bE_ = [0, cst_src_writer0_ml$0, 1236, 4],
    _bD_ = [0, cst_src_writer0_ml$0, 1237, 4],
    _bw_ = [0, "n"],
    cst_write_system_call_returned =
      "write system call returned negative result",
    cst_write_got_EBADF = "write got EBADF",
    _bv_ = [0, cst_src_writer0_ml$0, 1133, 8],
    cst_Writer_start_write = "Writer.start_write",
    _by_ = [0, cst_src_writer0_ml$0, 1110, 4],
    _bx_ = [0, 1],
    cst_writer_ready_to_got_Bad_fd = "writer ready_to got Bad_fd",
    cst_Writer_write_when_ready = "Writer.write_when_ready",
    _bz_ = [0, cst_src_writer0_ml$0, 1160, 4],
    cst_Writer_write_finished = "Writer.write_finished",
    _bB_ = [0, cst_src_writer0_ml$0, 1169, 4],
    _bA_ = [0, 1024986025, 1],
    _bC_ = [0, cst_open_flags],
    cst_not_allowed_to_write_due_t =
      "not allowed to write due to file-descriptor flags",
    cst_writer_wrote_nonzero_amoun =
      "writer wrote nonzero amount but IO_queue is empty",
    _bu_ = [0, cst_src_writer0_ml$0, 1076, 6],
    cst_writer_wrote_more_bytes_th =
      "writer wrote more bytes than it received",
    cst_writev = "writev",
    cst_writer_fd_unexpectedly_clo = "writer fd unexpectedly closed ",
    _bt_ = [0, cst_src_writer0_ml$0, 1000, 4],
    _bs_ = [0, cst_src_writer0_ml$0, 989, 4],
    _br_ = [0, cst_src_writer0_ml$0, 995, 4],
    _bq_ = [0, 523273847],
    _bp_ = [0, 523273847],
    cst_attempt_to_use_closed_writ = "attempt to use closed writer",
    _bo_ = [0, cst_writer],
    cst_Writer_error_from_inner_mo = "Writer error from inner_monitor",
    cst_Writer_create_buf_len_0 = "Writer.create: buf_len <= 0",
    _bm_ = [0, "Writer.monitor"],
    _bn_ = [0, "Writer.inner_monitor"],
    _bk_ = [0, cst_Unlimited$0],
    _bl_ = [0, cst_At_most$0],
    cst_Writer_at_shutdown = "Writer.at_shutdown",
    cst_Writer_close = "Writer.close",
    _bb_ = [0, cst_src_writer0_ml$0, 740, 15],
    _ba_ = [0, cst_src_writer0_ml$0, 721, 37],
    _a$_ = [0, 1024986025, 1],
    _a__ = [0, 523273847],
    _a9_ = [0, cst_src_writer0_ml$0, 626, 4],
    _a7_ = [0, 0],
    _a3_ = [0, cst_writer],
    _a4_ = [0, 0],
    _a5_ = [0, "beginning_of_buffer"],
    _a6_ = [0, cst_maximum_age],
    cst_writer_buffer_has_data_old = "writer buffer has data older than",
    _a1_ = [0, "_"],
    _aX_ = [0, cst_src_writer0_ml$0, 386, 17],
    _aZ_ = [0, cst_src_writer0_ml$0, 389, 13],
    _aY_ = [0, cst_src_writer0_ml$0, 390, 13],
    _aW_ = [0, cst_src_writer0_ml$0, 399, 15],
    _aV_ = [0, cst_src_writer0_ml$0, 374, 13],
    _a0_ = [0, cst_src_writer0_ml$0, 367, 6],
    _a2_ = [0, cst_src_writer0_ml$0, 365, 13890, 13914],
    _aF_ = [0, cst_writer],
    _aG_ = [0, cst_exn],
    cst_writer_invariant_failed = "writer invariant failed",
    _aS_ = [0, cst_src_writer0_ml$0, 288, 12],
    _aR_ = [0, cst_src_writer0_ml$0, 289, 12],
    _aQ_ = [0, cst_src_writer0_ml$0, 290, 12],
    _aU_ = [0, cst_src_writer0_ml$0, 285, 12],
    _aT_ = [0, cst_src_writer0_ml$0, 286, 12],
    _aP_ = [0, cst_src_writer0_ml$0, 295, 11],
    _aO_ = [0, cst_src_writer0_ml$0, 302, 15],
    _aN_ = [0, cst_src_writer0_ml$0, 308, 11],
    _aM_ = [0, cst_src_writer0_ml$0, 311, 11],
    _aL_ = [0, cst_src_writer0_ml$0, 312, 32],
    _aK_ = [0, cst_src_writer0_ml$0, 319, 45],
    _aI_ = [0, cst_src_writer0_ml$0, 333, 40],
    _aJ_ = [0, cst_src_writer0_ml$0, 332, 11],
    _aH_ = [0, cst_src_writer0_ml$0, 337, 46],
    _ax_ = [0, "Running"],
    _ay_ = [0, "Not_running"],
    _az_ = [0, "Stopped_permanently"],
    _at_ = [0, "Per_cycle"],
    _au_ = [0, "Periodic"],
    _ak_ = [0, "Open"],
    _al_ = [0, cst_Closed],
    _aj_ = [0, "Closed_and_flushing"],
    _$_ = [0, cst_backing_out_channel$0],
    _aa_ = [0, "line_ending"],
    _ab_ = [0, cst_open_flags],
    _ac_ = [0, "raise_when_consumer_leaves"],
    _ad_ = [0, cst_consumer_left$0],
    _ae_ = [0, "check_buffer_age"],
    _af_ = [0, cst_flush_at_shutdown_elt$0],
    _ag_ = [0, "num_producers_to_flush_at_close"],
    _ah_ = [0, cst_close_started$0],
    _ai_ = [0, cst_close_finished$0],
    _am_ = [0, "close_state"],
    _an_ = [0, "time_source"],
    _ao_ = [0, cst_back$0],
    _ap_ = [0, cst_scheduled_back$0],
    _aq_ = [0, cst_scheduled_bytes$0],
    _ar_ = [0, cst_bytes_written$0],
    _as_ = [0, "bytes_received"],
    _av_ = [0, "syscall"],
    _aw_ = [0, "background_writer_stopped"],
    _aA_ = [0, cst_background_writer_state$0],
    _aB_ = [0, "inner_monitor"],
    _aC_ = [0, "monitor"],
    _aD_ = [0, "fd"],
    _aE_ = [0, "id"],
    _C_ = [0, cst_Error],
    _D_ = [0, cst_Closed],
    _E_ = [0, cst_Consumer_left],
    _A_ = [0, "Keep"],
    _B_ = [0, "Destroy"],
    _x_ = [0, "Already_closed"],
    _y_ = [0, cst_Error],
    _z_ = [0, "Ok"],
    _n_ = [0, "for_this_time_source"],
    _o_ = [0, cst_too_old$0],
    _p_ = [0, "bytes_seen"],
    _q_ = [0, cst_times_received_queue$0],
    _r_ = [0, cst_bytes_received_queue$0],
    _s_ = [0, "bytes_received_at_now_minus_maximum_age"],
    _t_ = [0, cst_maximum_age],
    _u_ = [0, cst_writer],
    _v_ = [0, "closed"],
    _w_ = [0, "active_checks"],
    _f_ = [0, "Unix"],
    _g_ = [0, "Dos"],
    _b_ = [0, cst_Error],
    _c_ = [0, cst_Consumer_left],
    _d_ = [0, "Force_closed"],
    _e_ = [0, "Flushed"],
    _a_ = [1, 0],
    cst_too_old = cst_too_old$0,
    cst_times_received_queue = cst_times_received_queue$0,
    cst_bytes_received_queue = cst_bytes_received_queue$0,
    cst_backing_out_channel = cst_backing_out_channel$0,
    cst_consumer_left = cst_consumer_left$0,
    cst_flush_at_shutdown_elt = cst_flush_at_shutdown_elt$0,
    cst_close_started = cst_close_started$0,
    cst_close_finished = cst_close_finished$0,
    cst_back = cst_back$0,
    cst_scheduled_back = cst_scheduled_back$0,
    cst_scheduled_bytes = cst_scheduled_bytes$0,
    cst_scheduled = "scheduled",
    cst_bytes_written = cst_bytes_written$0,
    cst_background_writer_state = cst_background_writer_state$0,
    cst_Unlimited = cst_Unlimited$0,
    cst_At_most = cst_At_most$0,
    cst_src_writer0_ml_817_2 = "src/writer0.ml:817:2",
    cst_buffer_age_limit = cst_buffer_age_limit$1,
    cst_src_writer0_ml_816_0 = "src/writer0.ml:816:0",
    cst_buffer_age_limit$0 = cst_buffer_age_limit$1,
    _b0_ =
      [0,
       [0,
        [0, ' ("Lazy.is_val stdout" false) ', [0, cst$1]],
        [0, 60027, 60040, 60074]]],
    _b1_ = [0, 60027, 60031, 60075],
    _b4_ =
      [0,
       [0,
        [0, ' ("Lazy.is_val stderr" false) ', [0, cst$1]],
        [0, 60129, 60142, 60176]]],
    _b5_ = [0, 60129, 60133, 60177],
    _b8_ =
      [0,
       [0,
        [0, ' ("phys_equal stdout stderr" true) ', [0, cst$1]],
        [0, 60664, 60677, 60716]]],
    _b9_ = [0, 60664, 60668, 60717],
    _ca_ = [0, "stdout and stderr are always the same in tests"],
    _cd_ = [0, 59906, 59908, 60717],
    _ce_ = [0, 60664, 60717, 60717],
    _cf_ = [0, 59906, 59908, 60717],
    cst_src_writer0_ml = cst_src_writer0_ml$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Writer0 = cst_Async_unix_Writer0$0;
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){case 0: return _b_;case 1: return _c_;default: return _d_;}
    var
     arg0_001 = param[1],
     res0_002 =
       Ppx_inline_test_lib[1]
        ? _a_
        : caml_call1(Async_unix_Require_explicit_ti[9][78], arg0_001);
    return [1, [0, _e_, [0, res0_002, 0]]];
   }
   var Flush_result = [0, sexp_of_t];
   function sexp_of_t$0(param){return param ? _f_ : _g_;}
   var Line_ending = [0, sexp_of_t$0];
   function too_old(r){return r[7];}
   function set_too_old(r, v){r[7] = v; return 0;}
   function times_received_queue(r){return r[5];}
   function bytes_received_queue(r){return r[4];}
   function _h_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
   }
   var
    _i_ = [0, set_too_old],
    too_old$0 =
      [0, function(param){return 0;}, cst_too_old, _i_, too_old, _h_];
   function _j_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8]];
   }
   var
    _k_ = 0,
    times_received_queue$0 =
      [0,
       function(param){return 0;},
       cst_times_received_queue,
       _k_,
       times_received_queue,
       _j_];
   function _l_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8]];
   }
   var
    _m_ = 0,
    bytes_received_queue$0 =
      [0,
       function(param){return 0;},
       cst_bytes_received_queue,
       _m_,
       bytes_received_queue,
       _l_];
   function sexp_of_t$1(of_a_003, param){
    var
     maximum_age_007 = param[2],
     writer_005 = param[1],
     bytes_received_at_now_minus_ma = param[3],
     times_received_queue_013 = param[5],
     bytes_received_queue_011 = param[4],
     bytes_seen_015 = param[6],
     too_old_017 = param[7],
     for_this_time_source_019 = param[8],
     closed_025 = for_this_time_source_019[2],
     active_checks_023 = for_this_time_source_019[1],
     arg_026 = caml_call2(Async_kernel_Ivar[9], Core[620], closed_025),
     bnds_022 = [0, [1, [0, _v_, [0, arg_026, 0]]], 0],
     arg_024 =
       caml_call2(Core_Bag[3], Sexplib0_Sexp_conv[23], active_checks_023),
     bnds_022$0 = [0, [1, [0, _w_, [0, arg_024, 0]]], bnds_022],
     arg_020 = [1, bnds_022$0],
     bnds_004 = [0, [1, [0, _n_, [0, arg_020, 0]]], 0],
     arg_018 = caml_call2(Async_kernel_Ivar[9], Core[620], too_old_017),
     bnds_004$0 = [0, [1, [0, _o_, [0, arg_018, 0]]], bnds_004],
     arg_016 = caml_call1(Core_Int63[103], bytes_seen_015),
     bnds_004$1 = [0, [1, [0, _p_, [0, arg_016, 0]]], bnds_004$0],
     arg_014 =
       caml_call2
        (Core_Queue[13],
         Async_unix_Require_explicit_ti[9][78],
         times_received_queue_013),
     bnds_004$2 = [0, [1, [0, _q_, [0, arg_014, 0]]], bnds_004$1],
     arg_012 =
       caml_call2(Core_Queue[13], Core_Int63[103], bytes_received_queue_011),
     bnds_004$3 = [0, [1, [0, _r_, [0, arg_012, 0]]], bnds_004$2],
     arg_010 = caml_call1(Core_Int63[103], bytes_received_at_now_minus_ma),
     bnds_004$4 = [0, [1, [0, _s_, [0, arg_010, 0]]], bnds_004$3],
     arg_008 = caml_call1(Time_ns_unix[72][10], maximum_age_007),
     bnds_004$5 = [0, [1, [0, _t_, [0, arg_008, 0]]], bnds_004$4],
     arg_006 = caml_call1(of_a_003, writer_005),
     bnds_004$6 = [0, [1, [0, _u_, [0, arg_006, 0]]], bnds_004$5];
    return [1, bnds_004$6];
   }
   function sexp_of_open_flags(param){
    if(typeof param === "number") return _x_;
    if(106380200 <= param[1]){
     var v_028 = param[2];
     return [1, [0, _y_, [0, caml_call1(Core[625], v_028), 0]]];
    }
    var v_027 = param[2];
    return [1, [0, _z_, [0, caml_call1(Core_unix[50][2], v_027), 0]]];
   }
   function sexp_of_t$2(param){return param ? _A_ : _B_;}
   var Destroy_or_keep = [0, sexp_of_t$2];
   function backing_out_channel(r){return r[27];}
   function set_backing_out_channel(r, v){r[27] = v; return 0;}
   function raise_when_consumer_leaves(r){return r[24];}
   function consumer_left(r){return r[23];}
   function flush_at_shutdown_elt(r){return r[21];}
   function set_flush_at_shutdown_elt(r, v){r[21] = v; return 0;}
   function close_started(r){return r[19];}
   function close_finished(r){return r[18];}
   function back(r){return r[14];}
   function set_back(r, v){r[14] = v; return 0;}
   function scheduled_back(r){return r[13];}
   function set_scheduled_back(r, v){r[13] = v; return 0;}
   function scheduled_bytes(r){return r[11];}
   function set_scheduled_bytes(r, v){r[11] = v; return 0;}
   function scheduled(r){return r[10];}
   function bytes_written(r){return r[9];}
   function set_bytes_written(r, v){r[9] = v; return 0;}
   function bytes_received(r){return r[8];}
   function background_writer_state(r){return r[5];}
   function set_background_writer_state(r, v){r[5] = v; return 0;}
   function monitor(r){return r[3];}
   function fd(r){return r[2];}
   function id(r){return r[1];}
   function _F_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            v];
   }
   var
    _G_ = [0, set_backing_out_channel],
    backing_out_channel$0 =
      [0,
       function(param){return 0;},
       cst_backing_out_channel,
       _G_,
       backing_out_channel,
       _F_];
   function _H_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            v,
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _I_ = 0,
    consumer_left$0 =
      [0,
       function(param){return 0;},
       cst_consumer_left,
       _I_,
       consumer_left,
       _H_];
   function _J_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            v,
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _K_ = [0, set_flush_at_shutdown_elt],
    flush_at_shutdown_elt$0 =
      [0,
       function(param){return 0;},
       cst_flush_at_shutdown_elt,
       _K_,
       flush_at_shutdown_elt,
       _J_];
   function _L_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _M_ = 0,
    close_started$0 =
      [0,
       function(param){return 0;},
       cst_close_started,
       _M_,
       close_started,
       _L_];
   function _N_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _O_ = 0,
    close_finished$0 =
      [0,
       function(param){return 0;},
       cst_close_finished,
       _O_,
       close_finished,
       _N_];
   function _P_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _Q_ = [0, set_back],
    back$0 = [0, function(param){return 0;}, cst_back, _Q_, back, _P_];
   function _R_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _S_ = [0, set_scheduled_back],
    scheduled_back$0 =
      [0,
       function(param){return 0;},
       cst_scheduled_back,
       _S_,
       scheduled_back,
       _R_];
   function _T_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _U_ = [0, set_scheduled_bytes],
    scheduled_bytes$0 =
      [0,
       function(param){return 0;},
       cst_scheduled_bytes,
       _U_,
       scheduled_bytes,
       _T_];
   function _V_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _W_ = 0,
    scheduled$0 =
      [0, function(param){return 0;}, cst_scheduled, _W_, scheduled, _V_];
   function _X_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _Y_ = [0, set_bytes_written],
    bytes_written$0 =
      [0,
       function(param){return 0;},
       cst_bytes_written,
       _Y_,
       bytes_written,
       _X_];
   function _Z_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    ___ = [0, set_background_writer_state],
    background_writer_state$0 =
      [0,
       function(param){return 0;},
       cst_background_writer_state,
       ___,
       background_writer_state,
       _Z_];
   function sexp_of_writer(t){return caml_call1(Async_unix_Fd[3], t[2]);}
   function sexp_of_t_internals(param){
    var
     id = param[1],
     fd = param[2],
     inner_monitor = param[4],
     monitor = param[3],
     background_writer_state = param[5],
     syscall = param[7],
     background_writer_stopped = param[6],
     bytes_received = param[8],
     bytes_written = param[9],
     scheduled_bytes = param[11],
     scheduled_back = param[13],
     back = param[14],
     time_source = param[15],
     close_state = param[17],
     producers_to_flush_at_close = param[20],
     close_started = param[19],
     close_finished = param[18],
     flush_at_shutdown_elt = param[21],
     check_buffer_age = param[22],
     consumer_left = param[23],
     raise_when_consumer_leaves = param[24],
     line_ending = param[26],
     open_flags = param[25],
     backing_out_channel = param[27];
    function suppress_in_test(x){return Ppx_inline_test_lib[1] ? 0 : [0, x];}
    function monitor_name_in_test(monitor){
     if(! Ppx_inline_test_lib[1])
      return caml_call1(Async_kernel_Monitor[1], monitor);
     var _iu_ = caml_call1(Async_kernel_Monitor[4], monitor);
     return caml_call1(Core_Info[9], _iu_);
    }
    var
     time_source$0 =
       time_source === caml_call1(Async_kernel_Time_source[10], 0)
        ? 0
        : [0, time_source],
     match = suppress_in_test(id),
     match$0 = suppress_in_test(fd),
     match$1 = suppress_in_test(flush_at_shutdown_elt),
     match$2 = suppress_in_test(check_buffer_age),
     match$3 = suppress_in_test(open_flags),
     match$4 = 0;
    if(backing_out_channel)
     var
      v = backing_out_channel[1],
      _hY_ =
        [0,
         [1,
          [0, _$_, [0, caml_call1(Async_unix_Backing_out_channel[1], v), 0]]],
         match$4];
    else
     var _hY_ = match$4;
    var
     match$5 =
       [0,
        [1, [0, _aa_, [0, caml_call1(Line_ending[1], line_ending), 0]]],
        _hY_];
    if(match$3)
     var
      v$0 = match$3[1],
      _hZ_ = [0, [1, [0, _ab_, [0, sexp_of_open_flags(v$0), 0]]], match$5];
    else
     var _hZ_ = match$5;
    var
     _h0_ =
       [0,
        [1,
         [0, _ac_, [0, caml_call1(Core[323], raise_when_consumer_leaves), 0]]],
        _hZ_],
     match$6 =
       [0,
        [1,
         [0,
          _ad_,
          [0, caml_call2(Async_kernel_Ivar[9], Core[620], consumer_left), 0]]],
        _h0_];
    if(match$2)
     var
      x_035 = match$2[1],
      _h1_ = 0,
      _h2_ = Sexplib0_Sexp_conv[23],
      _h3_ = function(_it_){return sexp_of_t$1(_h2_, _it_);},
      _h4_ = caml_call1(Core_Bag[1][2], _h3_),
      _h5_ = caml_call1(Core[515], _h4_),
      match$7 =
        [0,
         [1, [0, _ae_, [0, caml_call2(Core_Lazy[23], _h5_, x_035), _h1_]]],
         match$6];
    else
     var match$7 = match$6;
    if(match$1)
     var
      x_034 = match$1[1],
      _h6_ = caml_call1(Core_Bag[1][2], Sexplib0_Sexp_conv[23]),
      _h7_ =
        [0,
         [1, [0, _af_, [0, caml_call2(Core[515], _h6_, x_034), 0]]],
         match$7];
    else
     var _h7_ = match$7;
    var
     _h8_ = caml_call1(Core_Bag[5], producers_to_flush_at_close),
     _h9_ = [0, [1, [0, _ag_, [0, caml_call1(Core[389], _h8_), 0]]], _h7_],
     _h__ =
       [0,
        [1,
         [0,
          _ah_,
          [0, caml_call2(Async_kernel_Ivar[9], Core[620], close_started), 0]]],
        _h9_],
     _h$_ =
       [0,
        [1,
         [0,
          _ai_,
          [0, caml_call2(Async_kernel_Ivar[9], Core[620], close_finished), 0]]],
        _h__],
     _ia_ = 0,
     _ib_ =
       -752096295 === close_state
        ? _aj_
        : 881668074 <= close_state ? _ak_ : _al_,
     match$8 = [0, [1, [0, _am_, [0, _ib_, _ia_]]], _h$_];
    if(time_source$0)
     var
      v$1 = time_source$0[1],
      _ic_ =
        [0,
         [1, [0, _an_, [0, caml_call1(Async_kernel_Time_source[4], v$1), 0]]],
         match$8];
    else
     var _ic_ = match$8;
    var
     _id_ = [0, [1, [0, _ao_, [0, caml_call1(Core[389], back), 0]]], _ic_],
     _ie_ =
       [0,
        [1, [0, _ap_, [0, caml_call1(Core[389], scheduled_back), 0]]],
        _id_],
     _if_ =
       [0,
        [1, [0, _aq_, [0, caml_call1(Core[389], scheduled_bytes), 0]]],
        _ie_],
     _ig_ =
       [0,
        [1, [0, _ar_, [0, caml_call1(Core_Int63[103], bytes_written), 0]]],
        _if_],
     _ih_ =
       [0,
        [1, [0, _as_, [0, caml_call1(Core_Int63[103], bytes_received), 0]]],
        _ig_],
     _ii_ = 0;
    if(typeof syscall === "number")
     var _ij_ = _at_;
    else
     var
      v_031 = syscall[2],
      _ij_ = [1, [0, _au_, [0, caml_call1(Time_float_unix[1][10], v_031), 0]]];
    var
     _ik_ =
       [0,
        [1,
         [0,
          _aw_,
          [0,
           caml_call2
            (Async_kernel_Ivar[9], Core[620], background_writer_stopped),
           0]]],
        [0, [1, [0, _av_, [0, _ij_, _ii_]]], _ih_]],
     _il_ = 0;
    if(typeof background_writer_state === "number")
     var _io_ = 951752159 <= background_writer_state ? _ax_ : _ay_;
    else{
     var v_029 = background_writer_state[2], _im_ = 0;
     switch(v_029){
       case 0:
        var _in_ = _C_; break;
       case 1:
        var _in_ = _D_; break;
       default: var _in_ = _E_;
     }
     var _io_ = [1, [0, _az_, [0, _in_, _im_]]];
    }
    var
     _ip_ = monitor_name_in_test(inner_monitor),
     _iq_ =
       [0,
        [1, [0, _aB_, [0, caml_call1(Core_Sexp[93], _ip_), 0]]],
        [0, [1, [0, _aA_, [0, _io_, _il_]]], _ik_]],
     _ir_ = monitor_name_in_test(monitor),
     match$9 =
       [0, [1, [0, _aC_, [0, caml_call1(Core_Sexp[93], _ir_), 0]]], _iq_];
    if(match$0)
     var
      v$2 = match$0[1],
      match$10 =
        [0,
         [1, [0, _aD_, [0, caml_call1(Async_unix_Fd[2], v$2), 0]]],
         match$9];
    else
     var match$10 = match$9;
    if(match)
     var
      v$3 = match[1],
      _is_ = [0, [1, [0, _aE_, [0, caml_call1(Id[10], v$3), 0]]], match$10];
    else
     var _is_ = match$10;
    return [1, _is_];
   }
   function set_raise_when_consumer_leaves(t, bool){t[24] = bool; return 0;}
   function bytes_to_write(t){return (t[11] + t[14] | 0) - t[13] | 0;}
   function is_stopped_permanently(t){
    return typeof t[5] === "number" ? 0 : 1;
   }
   function invariant(t){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t));
        },
      _hy_ = caml_call1(Core_Option[20], Async_unix_Backing_out_channel[2]),
      _hz_ =
        function(consumer_left){
         var _hX_ = caml_call1(Async_kernel_Ivar[18], consumer_left);
         if(! _hX_) return _hX_;
         if(is_stopped_permanently(t)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aH_], 1);
        },
      _hA_ =
        function(o){
         var
          _hU_ = caml_call1(Async_kernel_Ivar[18], t[18]),
          _hV_ = caml_call1(Core[252], o);
         if(! caml_call2(Core_Bool[32], _hV_, _hU_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
         function _hW_(elt){
          if(t === caml_call1(Core_Bag[1][3], elt)) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1);
         }
         return caml_call2(Core_Option[46], o, _hW_);
        },
      _hB_ =
        function(close_started){
         var
          got = caml_call1(Async_kernel_Ivar[17], close_started),
          expect = 881668074 <= t[17] ? 1 : 0,
          sexpifier = Core[323],
          equal = 0,
          message = 0,
          here = 0;
         function comparator(a_037, b_038){
          return caml_call2(Core[316], a_037, b_038);
         }
         return caml_call8
                 (Ppx_assert_lib_Runtime[3],
                  pos,
                  sexpifier,
                  comparator,
                  here,
                  message,
                  equal,
                  expect,
                  got);
        },
      _hC_ =
        function(close_finished){
         if(-752096295 > t[17]) return 0;
         if(caml_call1(Async_kernel_Ivar[17], close_finished)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
        },
      _hD_ =
        function(back){
         var _hT_ = caml_call1(Core_Bigstring[21], t[12]);
         if(caml_call2(Async_unix_Import[2], back, _hT_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aL_], 1);
        },
      _hE_ =
        function(scheduled_back){
         if
          (caml_call2(Async_unix_Import[2], 0, scheduled_back)
           && caml_call2(Async_unix_Import[2], scheduled_back, t[14]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aM_], 1);
        },
      _hF_ =
        function(scheduled_bytes){
         var t$0 = t[10];
         function _hR_(n, param){
          var iovec = param[1];
          return n + iovec[3] | 0;
         }
         var _hS_ = caml_call3(Core_Deque[18], t$0, 0, _hR_);
         if(caml_call2(Async_unix_Import[3], scheduled_bytes, _hS_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
        },
      _hG_ =
        function(scheduled){
         function _hO_(param){
          var
           kind = param[2],
           iovec = param[1],
           _hP_ = t[12] === iovec[1] ? 1 : 0;
          if(! _hP_) return _hP_;
          var _hQ_ = kind ? 1 : 0;
          if(_hQ_) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1);
         }
         return caml_call2(Core_Deque[17], scheduled, _hO_);
        },
      _hH_ =
        function(bytes_written){
         if
          (caml_call2(Core_Int63[108], Core_Int63[16], bytes_written)
           && caml_call2(Core_Int63[108], bytes_written, t[8]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
        };
     check
      (function(param){
        if(typeof param === "number"){
         var _hJ_ = caml_call1(Core_Bigstring[21], t[12]);
         if(! caml_call2(Async_unix_Import[4], _hJ_, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
         var
          _hK_ = bytes_to_write(t),
          _hL_ = caml_call1(Core_Int63[72], _hK_),
          _hM_ = caml_call2(Core_Int63[20], t[8], t[9]);
         if(! caml_call2(Core_Int63[109], _hM_, _hL_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
         if(caml_call1(Async_kernel_Ivar[17], t[6])) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
        }
        var _hN_ = bytes_to_write(t);
        if(! caml_call2(Async_unix_Import[3], _hN_, 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aU_], 1);
        if(caml_call1(Async_kernel_Ivar[18], t[6])) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
       },
       background_writer_state$0);
     check(_hH_, bytes_written$0);
     check(_hG_, scheduled$0);
     check(_hF_, scheduled_bytes$0);
     check(_hE_, scheduled_back$0);
     check(_hD_, back$0);
     check(_hC_, close_finished$0);
     check(_hB_, close_started$0);
     check(_hA_, flush_at_shutdown_elt$0);
     check(_hz_, consumer_left$0);
     var _hI_ = check(_hy_, backing_out_channel$0);
     return _hI_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _hv_ = [0, [1, [0, _aF_, [0, sexp_of_t_internals(t), 0]]], 0],
      _hw_ = [0, [1, [0, _aG_, [0, caml_call1(Core[625], exn), 0]]], _hv_],
      _hx_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_writer_invariant_failed),
          _hw_]];
     return caml_call1(Core[261], _hx_);
    }
   }
   function elt_invariant(t){
    function _hh_(param){
     function check(f, field){
      return caml_call1(f, caml_call2(Base_Field[3], field, t));
     }
     var
      _hj_ = caml_call1(Core_Queue[16], t[5]),
      _hk_ = caml_call1(Core_Queue[16], t[4]);
     if(! caml_call2(Async_unix_Import[3], _hk_, _hj_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a0_], 1);
     function _hl_(ivar){
      var
       b = caml_call1(Async_kernel_Ivar[18], ivar),
       a = caml_call2(Base_Int63[98][10], t[3], t[1][9]),
       _ht_ = 1 - a,
       _hu_ = _ht_ || b;
      if(_hu_) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aV_], 1);
     }
     function _hm_(q){
      var expect = caml_call1(Core_Queue[28], q);
      if(! expect) return 0;
      var
       got =
         caml_call2
          (Core_List[79], expect, Async_unix_Require_explicit_ti[9][89]),
       equal = 0,
       message = 0,
       here = 0;
      function sexpifier(x_044){
       return caml_call2
               (Core[472], Async_unix_Require_explicit_ti[9][78], x_044);
      }
      function comparator(a_040, b_041){
       function _hs_(a_042, b_043){
        return caml_call2(Async_unix_Require_explicit_ti[9][89], a_042, b_043);
       }
       return caml_call3(Core[466], _hs_, a_040, b_041);
      }
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$0,
        sexpifier,
        comparator,
        here,
        message,
        equal,
        expect,
        got);
      var
       _ho_ = t[2],
       _hp_ = caml_call1(Core_List[84], expect),
       _hq_ = caml_call1(Core_List[117], expect),
       _hr_ = caml_call2(Async_unix_Require_explicit_ti[9][45], _hq_, _hp_);
      if(caml_call2(Time_ns_unix[72][16], _hr_, _ho_)) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aW_], 1);
     }
     check
      (function(q){
        function _hn_(prev, count){
         if(caml_call2(Core_Int63[111], prev, count)) return count;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aX_], 1);
        }
        var n = caml_call3(Core_Queue[19], q, t[3], _hn_);
        if(! caml_call2(Core_Int63[108], n, t[1][8]))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
        if(caml_call2(Core_Int63[109], n, t[6])) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aY_], 1);
       },
       bytes_received_queue$0);
     check(_hm_, times_received_queue$0);
     check(_hl_, too_old$0);
     return 0;
    }
    function _hi_(x_039){
     return sexp_of_t$1(function(param){return _a1_;}, x_039);
    }
    return caml_call4(Async_kernel_Async_invariant[1], _a2_, t, _hi_, _hh_);
   }
   var dummy = 0;
   function process_active_check(e){
    var now = caml_call1(Async_kernel_Time_source[14], e[1][15]);
    a:
    for(;;){
     if(! (1 - caml_call1(Core_Queue[17], e[4]))) break a;
     var
      bytes_received = caml_call1(Core_Queue[50], e[4]),
      time_received = caml_call1(Core_Queue[50], e[5]),
      bytes_are_written = caml_call2(Core_Int63[108], bytes_received, e[1][9]),
      _g8_ = e[2],
      _g9_ =
        caml_call2(Async_unix_Require_explicit_ti[9][45], now, time_received),
      bytes_are_too_old = caml_call2(Time_ns_unix[72][18], _g9_, _g8_);
     if(bytes_are_too_old) e[3] = bytes_received;
     var bytes_are_written$0 = bytes_are_written || bytes_are_too_old;
     if(! bytes_are_written$0) break;
     caml_call1(Core_Queue[46], e[4]);
     caml_call1(Core_Queue[46], e[5]);
    }
    var bytes_received$0 = e[1][8], bytes_written = e[1][9];
    if(caml_call2(Base_Int63[98][10], bytes_received$0, e[6])){
     e[6] = bytes_received$0;
     if(caml_call2(Base_Int63[98][10], bytes_received$0, bytes_written)){
      caml_call2(Core_Queue[43], e[4], e[1][8]);
      caml_call2(Core_Queue[43], e[5], now);
     }
    }
    var too_old = caml_call2(Base_Int63[98][10], e[3], bytes_written);
    if(caml_call1(Async_kernel_Ivar[18], e[7])){
     if(! too_old){e[7] = caml_call1(Async_kernel_Ivar[12], 0); return 0;}
    }
    else if(too_old){
     caml_call2(Async_kernel_Ivar[14], e[7], 0);
     var
      writer = e[1],
      _g__ = [0, [1, [0, _a3_, [0, sexp_of_writer(writer), 0]]], 0],
      _g$_ = writer[12],
      _ha_ = caml_call1(Core_Bigstring[21], writer[12]),
      _hb_ = [0, caml_call2(Core_Int[89], 1024, _ha_)],
      _hc_ = caml_call3(Core_Bigstring[16], _a4_, _hb_, _g$_),
      _hd_ = [0, [1, [0, _a5_, [0, caml_call1(Core[558], _hc_), 0]]], _g__],
      _he_ =
        [0,
         [1, [0, _a6_, [0, caml_call1(Time_ns_unix[72][10], e[2]), 0]]],
         _hd_],
      _hf_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_writer_buffer_has_data_old),
          _he_]],
      _hg_ = caml_call1(Base_Exn[5], _hf_);
     return caml_call3(Async_kernel_Monitor[15], e[1][3], 0, _hg_);
    }
    return 0;
   }
   function check(t){
    return caml_call2(Core_Bag[7], t[1], process_active_check);
   }
   var sexp_of_t$3 = Async_kernel_Time_source[4];
   function hash_fold_t(state, t){
    var _g7_ = caml_call1(Async_kernel_Time_source[5], t);
    return caml_call2(Async_kernel_Time_source[3][35], state, _g7_);
   }
   function hash(t){
    var _g6_ = caml_call1(Async_kernel_Time_source[5], t);
    return caml_call1(Async_kernel_Time_source[3][36], _g6_);
   }
   function compare(t1, t2){
    var
     _g4_ = caml_call1(Async_kernel_Time_source[5], t2),
     _g5_ = caml_call1(Async_kernel_Time_source[5], t1);
    return caml_call2(Async_kernel_Time_source[3][20], _g5_, _g4_);
   }
   var
    Time_source_key =
      caml_call1
       (Core_Hashable[1], [0, hash_fold_t, compare, sexp_of_t$3, hash]),
    by_time_source = caml_call3(Time_source_key[5][5], 0, 0, 0);
   function num_active_checks_for(time_source){
    function _g2_(pt){return caml_call1(Core_Bag[5], pt[1]);}
    var _g3_ = caml_call2(Core_Hashtbl[56], by_time_source, time_source);
    return caml_call2(Core_Option[34], _g3_, _g2_);
   }
   function check_now(check_invariants, time_source){
    var t = caml_call2(Core_Hashtbl[57], by_time_source, time_source);
    if(check_invariants) caml_call2(Core_Bag[7], t[1], elt_invariant);
    return check(t);
   }
   function create(writer, maximum_age){
    if(typeof maximum_age === "number") return 0;
    var maximum_age$0 = maximum_age[2], time_source = writer[15];
    function _gR_(param){
     var
      _gY_ = caml_call1(Async_kernel_Ivar[12], 0),
      pt = [0, caml_call1(Core_Bag[22], 0), _gY_];
     function _gZ_(param){return check(pt);}
     var
      _g0_ = Time_ns_unix[72][71],
      _g1_ = [0, caml_call1(Async_kernel_Ivar[19], pt[2])];
     caml_call6
      (Async_kernel_Time_source[37], 0, _g1_, _a7_, time_source, _g0_, _gZ_);
     return pt;
    }
    var
     for_this_time_source =
       caml_call3(Core_Hashtbl[54], by_time_source, time_source, _gR_),
     _gS_ = caml_call1(Async_kernel_Ivar[12], 0),
     _gT_ = Core_Int63[16],
     _gU_ = caml_call2(Core_Queue[66], 0, 0),
     _gV_ = caml_call2(Core_Queue[66], 0, 0),
     _gW_ = Core_Int63[16],
     _gX_ =
       [0,
        writer,
        caml_call1(Time_ns_unix[72][146], maximum_age$0),
        _gW_,
        _gV_,
        _gU_,
        _gT_,
        _gS_,
        for_this_time_source];
    return [0, caml_call2(Core_Bag[23], for_this_time_source[1], _gX_)];
   }
   function destroy(t){
    if(! t) return;
    var
     elt = t[1],
     t$0 = caml_call1(Core_Bag[1][3], elt),
     per_time_source = t$0[8];
    caml_call2(Core_Bag[26], per_time_source[1], elt);
    var _gQ_ = caml_call1(Core_Bag[6], per_time_source[1]);
    return _gQ_
            ? (caml_call2
               (Core_Hashtbl[32], by_time_source, t$0[1][15]),
              caml_call2(Async_kernel_Ivar[16], per_time_source[2], 0))
            : _gQ_;
   }
   var _a8_ = [0, check_now, num_active_checks_for];
   function flushed_or_failed_with_result(t){
    var match = t[27];
    if(match){
     var backing_out_channel = match[1];
     caml_call1(Async_unix_Backing_out_channel[6], backing_out_channel);
     var _gM_ = [0, caml_call1(Async_kernel_Time_source[14], t[15])];
     return caml_call1(Async_unix_Import[30], _gM_);
    }
    if(caml_call2(Base_Int63[98][9], t[9], t[8])){
     var _gN_ = [0, caml_call1(Async_kernel_Time_source[14], t[15])];
     return caml_call1(Async_unix_Import[30], _gN_);
    }
    var _gO_ = t[5];
    if(typeof _gO_ !== "number")
     switch(_gO_[2]){
       case 0:
        return caml_call1(Async_unix_Import[30], 0);
       case 1:
        return caml_call1(Async_unix_Import[30], 2);
       default: return caml_call1(Async_unix_Import[30], 1);
     }
    if(caml_call1(Async_kernel_Ivar[18], t[18]))
     return caml_call1(Async_kernel_Deferred[12], 0);
    function _gP_(ivar){
     return caml_call2(Core_Queue[43], t[16], [0, ivar, t[8]]);
    }
    return caml_call1(Async_kernel_Deferred[3], _gP_);
   }
   function eager_map(t, f){
    if(! caml_call1(Async_kernel_Deferred[7], t))
     return caml_call2(Async_kernel_Deferred[13], t, f);
    var _gL_ = caml_call1(f, caml_call1(Async_kernel_Deferred[6], t));
    return caml_call1(Async_unix_Import[30], _gL_);
   }
   function flushed_or_failed_unit(t){
    function _gJ_(_gK_){return 0;}
    return eager_map(flushed_or_failed_with_result(t), _gJ_);
   }
   function flushed_time_ns(t){
    function f(param){
     if(typeof param === "number")
      return caml_call1(Async_kernel_Deferred[19], 0);
     var t = param[1];
     return caml_call1(Async_kernel_Deferred[12], t);
    }
    var t$0 = flushed_or_failed_with_result(t);
    return caml_call1(Async_kernel_Deferred[7], t$0)
            ? f(caml_call1(Async_kernel_Deferred[6], t$0))
            : caml_call2(Async_kernel_Deferred[11], t$0, f);
   }
   function flushed_time(t){
    var _gI_ = Async_unix_Require_explicit_ti[9][64];
    return eager_map(flushed_time_ns(t), _gI_);
   }
   function flushed(t){
    function _gG_(_gH_){return 0;}
    return eager_map(flushed_time_ns(t), _gG_);
   }
   function set_backing_out_channel$0(t, backing_out_channel){t[27] = [0, backing_out_channel]; return;
   }
   function set_synchronous_backing_out_ch(t, backing_out_channel){
    function wait_until_no_bytes_to_write(param){
     var _gD_ = bytes_to_write(t);
     if(caml_call2(Async_unix_Import[3], _gD_, 0)){
      set_backing_out_channel$0(t, backing_out_channel);
      return caml_call1(Async_unix_Import[30], 0);
     }
     function _gE_(param){return wait_until_no_bytes_to_write(0);}
     var _gF_ = flushed(t);
     return caml_call2(Async_unix_Import[33][2], _gF_, _gE_);
    }
    return wait_until_no_bytes_to_write(0);
   }
   function set_synchronous_out_channel(t, out_channel){
    return set_synchronous_backing_out_ch
            (t, caml_call1(Async_unix_Backing_out_channel[3], out_channel));
   }
   function using_synchronous_backing_out_(t){
    return caml_call1(Core_Option[62], t[27]);
   }
   function clear_synchronous_out_channel(t){
    var _gA_ = caml_call1(Core[253], t[27]);
    if(_gA_){
     var _gB_ = bytes_to_write(t);
     if(! caml_call2(Async_unix_Import[3], _gB_, 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a9_], 1);
     t[27] = 0;
     var _gC_ = 0;
    }
    else
     var _gC_ = _gA_;
    return _gC_;
   }
   function with_synchronous_backing_out_c(t, backing_out_channel, f){
    var saved_backing_out_channel = t[27];
    function _gw_(param){
     t[27] = saved_backing_out_channel;
     return caml_call1(Async_unix_Import[30], 0);
    }
    function _gx_(param){
     function _gy_(param){return caml_call1(f, 0);}
     var _gz_ = set_synchronous_backing_out_ch(t, backing_out_channel);
     return caml_call2(Async_unix_Import[33][2], _gz_, _gy_);
    }
    return caml_call8
            (Async_kernel_Monitor[23], 0, 0, 0, 0, _a__, 0, _gx_, _gw_);
   }
   function with_synchronous_out_channel(t, out_channel, f){
    return with_synchronous_backing_out_c
            (t, caml_call1(Async_unix_Backing_out_channel[3], out_channel), f);
   }
   function set_fd(t, fd){
    function _gu_(param){t[2] = fd; return 0;}
    var _gv_ = flushed(t);
    return caml_call2(Async_unix_Import[33][3], _gv_, _gu_);
   }
   function consumer_left$1(t){
    return caml_call1(Async_kernel_Ivar[19], t[23]);
   }
   function close_finished$1(t){
    return caml_call1(Async_kernel_Ivar[19], t[18]);
   }
   function close_started$1(t){
    return caml_call1(Async_kernel_Ivar[19], t[19]);
   }
   function is_closed(t){return 881668074 <= t[17] ? 0 : 1;}
   function is_open(t){return 1 - is_closed(t);}
   var writers_to_flush_at_shutdown = caml_call1(Core_Bag[22], 0);
   function final_flush(force, t){
    function _gl_(f){return caml_call1(f, 0);}
    var
     _gm_ = caml_call1(Core_Bag[17], t[20]),
     producers_flushed =
       caml_call3(Async_kernel_Deferred_list[14], -676829465, _gm_, _gl_);
    a:
    if(force)
     var fc = force[1], force$0 = fc;
    else{
     var match = caml_call1(Async_unix_Fd[8], t[2]);
     if(typeof match === "number" && 2 <= match){
      var force$0 = caml_call1(Async_kernel_Deferred[19], 0);
      break a;
     }
     var
      _gk_ = caml_call1(Time_ns_unix[72][82], 5.),
      force$0 = caml_call2(Async_kernel_Time_source[29], t[15], _gk_);
    }
    var _go_ = t[22], _gp_ = caml_obj_tag(_go_);
    a:
    {
     var _gn_ = 0;
     if(250 === _gp_)
      var t$0 = _go_[1];
     else{
      if(246 !== _gp_ && 244 !== _gp_){var t$0 = _go_; break a;}
      var t$0 = caml_call1(CamlinternalLazy[2], _go_);
     }
    }
    if(t$0)
     var
      elt = t$0[1],
      _gj_ = caml_call1(Core_Bag[1][3], elt)[7],
      _gq_ = caml_call1(Async_kernel_Ivar[19], _gj_);
    else
     var _gq_ = caml_call1(Async_kernel_Deferred[19], 0);
    var
     _gr_ = [0, producers_flushed, [0, flushed(t), 0]],
     _gs_ =
       [0,
        caml_call1(Async_kernel_Deferred[22], _gr_),
        [0, force$0, [0, _gq_, _gn_]]],
     _gt_ = [0, consumer_left$1(t), _gs_];
    return caml_call1(Async_kernel_Deferred[24], _gt_);
   }
   function do_close_noflush(t){
    if(-752096295 > t[17]) return 0;
    t[17] = -1025106484;
    caml_call2(Async_kernel_Ivar[16], t[19], 0);
    if(caml_call1(Core_Lazy[40], t[22]))
     destroy(caml_call1(Core[248], t[22]));
    var match = t[21];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bb_], 1);
    var elt = match[1];
    caml_call2(Core_Bag[26], writers_to_flush_at_shutdown, elt);
    function _gi_(param){return caml_call2(Async_kernel_Ivar[14], t[18], 0);}
    if(-752096295 <= t[17])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ba_], 1);
    var _ge_ = t[5];
    a:
    if(typeof _ge_ === "number" && -560725133 === _ge_){
     t[5] = _a$_;
     caml_call2(Async_kernel_Ivar[16], t[6], 0);
     break a;
    }
    function _gf_(param){return caml_call1(Async_kernel_Ivar[19], t[6]);}
    var
     _gg_ = caml_call2(Async_unix_Unix_syscalls[16], 0, t[2]),
     _gh_ = caml_call2(Async_unix_Import[33][2], _gg_, _gf_);
    return caml_call2(Async_unix_Import[27], _gh_, _gi_);
   }
   function close_internal(flush, t){
    if(debug)
     caml_call3(Async_kernel_Debug[15], cst_Writer_close, t, sexp_of_writer);
    if(typeof flush === "number"){
     do_close_noflush(t);
     return close_finished$1(t);
    }
    var force = flush[2];
    if(881668074 <= t[17]){
     t[17] = -752096295;
     caml_call2(Async_kernel_Ivar[14], t[19], 0);
     var
      _gc_ = function(param){return do_close_noflush(t);},
      _gd_ = final_flush(force, t);
     caml_call2(Async_unix_Import[27], _gd_, _gc_);
    }
    return close_finished$1(t);
   }
   function close(force_close, t){
    return close_internal([0, 365482660, force_close], t);
   }
   function close_noflush(t){return close_internal(-206574298, t);}
   function _bc_(param){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_Writer_at_shutdown);
    function _f__(t){
     var
      _ga_ = [0, close_finished$1(t), 0],
      _gb_ = [0, final_flush(0, t), _ga_];
     return caml_call1(Async_kernel_Deferred[24], _gb_);
    }
    var _f$_ = caml_call1(Core_Bag[17], writers_to_flush_at_shutdown);
    return caml_call3(Async_kernel_Deferred_list[14], -676829465, _f$_, _f__);
   }
   caml_call1(Async_unix_Shutdown[11], _bc_);
   function stop_permanently(t, outcome){
    t[5] = [0, 1024986025, outcome];
    caml_call1(Core_Deque[54], t[10]);
    t[11] = 0;
    t[12] = caml_call1(Core_Bigstring[121], 0);
    t[13] = 0;
    t[14] = 0;
    caml_call2(Async_kernel_Ivar[16], t[6], 0);
    function _f8_(param){
     var ivar = param[1];
     switch(outcome){
       case 0:
        var _f9_ = 0; break;
       case 1:
        var _f9_ = 2; break;
       default: var _f9_ = 1;
     }
     return caml_call2(Async_kernel_Ivar[14], ivar, _f9_);
    }
    caml_call2(Core_Queue[18], t[16], _f8_);
    return caml_call1(Core_Queue[51], t[16]);
   }
   function stopped_permanently(t){
    return caml_call1(Async_kernel_Ivar[19], t[6]);
   }
   function die(t, sexp){
    stop_permanently(t, 0);
    return caml_call1(Core[261], sexp);
   }
   var
    _bd_ = [0, caml_call2(Bin_prot_Shape[6], cst_Unlimited, 0), 0],
    _be_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_At_most, [0, Time_float_unix[1][5]]),
       _bd_],
    _bf_ = caml_call1(Bin_shape[4][1], cst_src_writer0_ml_817_2),
    _bg_ = caml_call2(Bin_prot_Shape[8], _bf_, _be_),
    _bh_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_buffer_age_limit), 0, _bg_], 0],
    _bi_ = caml_call1(Bin_shape[4][1], cst_src_writer0_ml_816_0),
    group = caml_call2(Bin_prot_Shape[2], _bi_, _bh_),
    _bj_ = caml_call1(Bin_shape[2][1], cst_buffer_age_limit$0),
    bin_shape_buffer_age_limit =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _bj_), 0);
   function bin_size_buffer_age_limit(param){
    if(typeof param !== "number" && -339018129 === param[1]){
     var args = param[2], size_args = caml_call1(Time_float_unix[1][1], args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_buffer_age_limit(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 751362817);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, -339018129);
    return caml_call3(Time_float_unix[1][2], buf, pos$0, args);
   }
   var
    bin_writer_buffer_age_limit =
      [0, bin_size_buffer_age_limit, bin_write_buffer_age_limit];
   function bin_read_buffer_age_limit(buf, pos_ref, vint){
    if(-339018129 === vint){
     var arg_1 = caml_call2(Time_float_unix[1][3], buf, pos_ref);
     return [0, -339018129, arg_1];
    }
    if(751362817 === vint) return 751362817;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_buffer_age_limit$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _f6_ = bin_read_buffer_age_limit(buf, pos_ref, vint); return _f6_;
    }
    catch(_f7_){
     var _f5_ = caml_wrap_exception(_f7_);
     if(_f5_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_f5_, 0);
    }
   }
   var
    bin_reader_buffer_age_limit =
      [0, bin_read_buffer_age_limit$0, bin_read_buffer_age_limit],
    bin_buffer_age_limit =
      [0,
       bin_shape_buffer_age_limit,
       bin_writer_buffer_age_limit,
       bin_reader_buffer_age_limit];
   function buffer_age_limit_of_sexp(sexp_052){
    if(0 === sexp_052[0]){
     var atom_050 = sexp_052[1];
     return caml_string_notequal(atom_050, cst_At_most$0)
             ? caml_string_notequal
                (atom_050, cst_Unlimited$0)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : 751362817
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_054, sexp_052);
    }
    var _f4_ = sexp_052[1];
    if(! _f4_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_054, sexp_052);
    var match = _f4_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_054, sexp_052);
    var sexp_args_053 = _f4_[2], atom_050$0 = match[1];
    if(caml_string_notequal(atom_050$0, cst_At_most$0))
     return caml_string_notequal(atom_050$0, cst_Unlimited$0)
             ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[25], error_source_054, sexp_052);
    if(sexp_args_053 && ! sexp_args_053[2]){
     var
      arg0_056 = sexp_args_053[1],
      res0_057 = caml_call1(Time_float_unix[1][9], arg0_056);
     return [0, -339018129, res0_057];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_054,
             atom_050$0,
             sexp_052);
   }
   function buffer_age_limit_of_sexp$0(sexp_058){
    try{var _f2_ = buffer_age_limit_of_sexp(sexp_058); return _f2_;}
    catch(_f3_){
     var _f1_ = caml_wrap_exception(_f3_);
     if(_f1_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_059, sexp_058);
     throw caml_maybe_attach_backtrace(_f1_, 0);
    }
   }
   function sexp_of_buffer_age_limit(param){
    if(typeof param === "number") return _bk_;
    var v_060 = param[2];
    return [1, [0, _bl_, [0, caml_call1(Time_float_unix[1][10], v_060), 0]]];
   }
   function create$0
   (buf_len, opt, buffer_age_limit, _fE_, _fD_, time_source, fd){
    if(opt) var sth = opt[1], syscall = sth; else var syscall = -843072412;
    if(_fE_)
     var sth$0 = _fE_[1], raise_when_consumer_leaves = sth$0;
    else
     var raise_when_consumer_leaves = 1;
    if(_fD_)
     var sth$1 = _fD_[1], line_ending = sth$1;
    else
     var line_ending = 1;
    if(time_source)
     var
      x = time_source[1],
      time_source$0 = caml_call1(Async_kernel_Time_source[8], x);
    else
     var time_source$0 = caml_call1(Async_kernel_Time_source[10], 0);
    if(buffer_age_limit)
     var z = buffer_age_limit[1], buffer_age_limit$0 = z;
    else{
     var match = caml_call1(Async_unix_Fd[8], fd);
     a:
     {
      if(typeof match === "number" && 2 <= match){var _fU_ = 751362817; break a;}
      var _fU_ = [0, -339018129, caml_call1(Time_float_unix[1][83], 2.)];
     }
     var buffer_age_limit$0 = _fU_;
    }
    if(buf_len)
     var
      buf_len$0 = buf_len[1],
      _fF_ =
        caml_call2(Async_unix_Import[2], buf_len$0, 0)
         ? caml_call1(Core[5], cst_Writer_create_buf_len_0)
         : buf_len$0,
      buf_len$1 = _fF_;
    else
     var buf_len$1 = 133120;
    var
     id = caml_call1(Id[45], 0),
     _fG_ = 0,
     _fH_ = Ppx_inline_test_lib[1] ? _bm_ : 0,
     monitor = caml_call4(Async_kernel_Monitor[3], 0, 0, _fH_, _fG_),
     _fI_ = 0,
     _fJ_ = Ppx_inline_test_lib[1] ? _bn_ : 0,
     inner_monitor = caml_call4(Async_kernel_Monitor[3], 0, 0, _fJ_, _fI_),
     consumer_left = caml_call1(Async_kernel_Ivar[12], 0);
    function _fK_(file_descr){return caml_call1(Core_unix[51], file_descr);}
    var
     open_flags = caml_call3(Async_unix_Fd[31], 0, fd, _fK_),
     _fL_ = caml_call1(Core_Bag[22], 0),
     _fM_ = caml_call1(Async_kernel_Ivar[12], 0),
     _fN_ = caml_call1(Async_kernel_Ivar[12], 0),
     _fO_ = caml_call2(Core_Queue[66], 0, 0),
     _fP_ = caml_call1(Core_Bigstring[121], buf_len$1),
     _fQ_ = caml_call3(Core_Deque[31], 0, 0, 0),
     _fR_ = Core_Int63[16],
     _fS_ = Core_Int63[16],
     t =
       [0,
        id,
        fd,
        monitor,
        inner_monitor,
        -560725133,
        caml_call1(Async_kernel_Ivar[12], 0),
        syscall,
        _fS_,
        _fR_,
        _fQ_,
        0,
        _fP_,
        0,
        0,
        time_source$0,
        _fO_,
        881668074,
        _fN_,
        _fM_,
        _fL_,
        0,
        dummy,
        consumer_left,
        raise_when_consumer_leaves,
        open_flags,
        line_ending,
        0];
    function _fT_(exn){
     var
      _fW_ = [0, [1, [0, _bo_, [0, sexp_of_writer(t), 0]]], 0],
      _fX_ = caml_call1(Async_kernel_Monitor[13], exn),
      _fY_ = [0, caml_call1(Base_Exn[1], _fX_), _fW_],
      _fZ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Writer_error_from_inner_mo),
          _fY_]],
      _f0_ = caml_call1(Base_Exn[5], _fZ_);
     return caml_call3(Async_kernel_Monitor[15], monitor, 0, _f0_);
    }
    caml_call2(Async_kernel_Monitor[7], inner_monitor, _fT_);
    t[22] = [246, function(_fV_){return create(t, buffer_age_limit$0);}];
    t[21] = [0, caml_call2(Core_Bag[23], writers_to_flush_at_shutdown, t)];
    return t;
   }
   function set_buffer_age_limit(t, maximum_age){
    if(caml_call1(Core_Lazy[40], t[22]))
     destroy(caml_call1(Core[248], t[22]));
    t[22] = [246, function(_fC_){return create(t, maximum_age);}];
    return 0;
   }
   function of_out_channel(oc, kind){
    return create$0(0, 0, 0, 0, 0, 0, caml_call2(Async_unix_Fd[37], oc, kind));
   }
   function can_write(t){return -752096295 <= t[17] ? 1 : 0;}
   function ensure_can_write(t){
    var _fz_ = 1 - can_write(t);
    if(! _fz_) return _fz_;
    var
     _fA_ = [0, sexp_of_writer(t), 0],
     _fB_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_attempt_to_use_closed_writ),
         _fA_]];
    return caml_call1(Core[261], _fB_);
   }
   function open_file
   (info, opt, buf_len, syscall, _fv_, line_ending, time_source, file){
    if(opt) var sth = opt[1], append = sth; else var append = 0;
    if(_fv_) var sth$0 = _fv_[1], perm = sth$0; else var perm = 438;
    var _fw_ = append ? -999795206 : 693908748, mode$0 = [0, _fw_, mode];
    function _fx_(eta){
     return create$0(buf_len, syscall, 0, 0, line_ending, time_source, eta);
    }
    var
     _fy_ =
       caml_call4(Async_unix_Unix_syscalls[9], info, [0, perm], file, mode$0);
    return caml_call2(Async_unix_Import[32], _fy_, _fx_);
   }
   function with_close(t, f){
    function _fp_(param){return close_noflush(t);}
    function _fq_(param){
     function _fr_(res){
      function _ft_(param){return res;}
      var _fu_ = final_flush(0, t);
      return caml_call2(Async_unix_Import[33][3], _fu_, _ft_);
     }
     var _fs_ = caml_call1(f, 0);
     return caml_call2(Async_unix_Import[33][2], _fs_, _fr_);
    }
    return caml_call8
            (Async_kernel_Monitor[23], 0, 0, 0, 0, _bp_, 0, _fq_, _fp_);
   }
   function with_file
   (perm, append, syscall, opt, line_ending, time_source, file, f){
    if(opt) var sth = opt[1], exclusive = sth; else var exclusive = 0;
    function _ff_(t){
     var
      parent_monitor = caml_call1(Async_kernel_Monitor[5], 0),
      monitor = t[3];
     function _fh_(exn){
      function _fn_(param){
       return caml_call3(Async_kernel_Monitor[15], parent_monitor, 0, exn);
      }
      var _fo_ = close_noflush(t);
      return caml_call2(Async_unix_Import[22], _fo_, _fn_);
     }
     caml_call2(Async_kernel_Monitor[7], monitor, _fh_);
     return with_close
             (t,
              function(param){
               if(! exclusive) return caml_call1(f, t);
               function f$0(param){return caml_call1(f, t);}
               function _fi_(param){
                function _fk_(param){
                 function _fl_(param){
                  return caml_call2(Async_unix_Unix_syscalls[27], 0, t[2]);
                 }
                 var _fm_ = flushed(t);
                 return caml_call2(Async_unix_Import[33][3], _fm_, _fl_);
                }
                return caml_call8
                        (Async_kernel_Monitor[23], 0, 0, 0, 0, _bq_, 0, f$0, _fk_);
               }
               var
                _fj_ = caml_call3(Async_unix_Unix_syscalls[24], 0, t[2], 1);
               return caml_call2(Async_unix_Import[33][2], _fj_, _fi_);
              });
    }
    var
     _fg_ =
       open_file(0, append, 0, syscall, perm, line_ending, time_source, file);
    return caml_call2(Async_unix_Import[33][2], _fg_, _ff_);
   }
   function got_bytes(t, n){
    var _fe_ = caml_call1(Core_Int63[72], n);
    t[8] = caml_call2(Core_Int63[19], t[8], _fe_);
    return 0;
   }
   function add_iovec(t, kind, iovec, count_bytes_as_received){
    if(! caml_call2(Async_unix_Import[3], t[13], t[14]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bs_], 1);
    if(count_bytes_as_received) got_bytes(t, iovec[3]);
    if(1 - is_stopped_permanently(t)){
     t[11] = t[11] + iovec[3] | 0;
     caml_call2(Core_Deque[53], t[10], [0, iovec, kind]);
    }
    if(caml_call2(Async_unix_Import[3], t[13], t[14])) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _br_], 1);
   }
   function schedule_unscheduled(t, kind){
    var need_to_schedule = t[14] - t[13] | 0;
    if(! caml_call2(Async_unix_Import[1], need_to_schedule, 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bt_], 1);
    var _fd_ = caml_call2(Async_unix_Import[4], need_to_schedule, 0);
    if(! _fd_) return _fd_;
    var pos = t[13];
    t[13] = t[14];
    return add_iovec
            (t,
             kind,
             caml_call3
              (Core_unix[276][7], [0, pos], [0, need_to_schedule], t[12]),
             0);
   }
   var dummy_iovec = caml_call1(Core_unix[276][5], Core_unix[276][4]);
   function mk_iovecs(t){
    schedule_unscheduled(t, 1);
    var _e6_ = Core_unix[276][9], _e7_ = caml_obj_tag(_e6_);
    a:
    if(250 === _e7_)
     var _e8_ = _e6_[1];
    else{
     if(246 !== _e7_ && 244 !== _e7_){var _e8_ = _e6_; break a;}
     var _e8_ = caml_call1(CamlinternalLazy[2], _e6_);
    }
    var
     _e9_ = caml_call1(Core_Deque[15], t[10]),
     n_iovecs = caml_call2(Core_Int[89], _e9_, _e8_),
     iovecs = caml_call2(Core_Array[63], n_iovecs, dummy_iovec),
     contains_mmapped_ref = [0, 0],
     iovecs_len = [0, 0];
    function _e__(r){
     var i = [0, 0];
     function _e$_(param){
      var iovec = param[1];
      if(caml_call2(Async_unix_Import[1], i[1], n_iovecs)) caml_call1(r, 0);
      var
       _fa_ = 1 - contains_mmapped_ref[1],
       _fb_ = _fa_ ? runtime.bigstring_is_mmapped_stub(iovec[1]) : _fa_;
      if(_fb_) contains_mmapped_ref[1] = 1;
      iovecs_len[1] = iovecs_len[1] + iovec[3] | 0;
      var _fc_ = i[1];
      runtime.caml_check_bound(iovecs, _fc_)[1 + _fc_] = iovec;
      i[1]++;
      return 0;
     }
     return caml_call2(Core_Deque[17], t[10], _e$_);
    }
    caml_call1(Core[268], _e__);
    return [0, iovecs, contains_mmapped_ref[1], iovecs_len[1]];
   }
   var thread_io_cutoff = 262144;
   function is_running(param){
    if(typeof param === "number" && 951752159 === param) return 1;
    return 0;
   }
   function fd_closed(t){
    return is_closed(t)
            ? stop_permanently(t, 1)
            : die
              (t,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_writer_fd_unexpectedly_clo));
   }
   function update_after_completed_write(t, bytes_written$0){
    var _e4_ = caml_call1(Core_Int63[72], bytes_written$0);
    t[9] = caml_call2(Core_Int63[19], t[9], _e4_);
    if(caml_call2(Core_Int63[110], t[9], t[8]))
     die(t, caml_call1(Sexplib0_Sexp_conv[7], cst_writer_wrote_more_bytes_th));
    var bytes_written = t[9], flushes = t[16], time_source = t[15];
    a:
    if(1 - caml_call1(Core_Queue[17], flushes)){
     var now = caml_call1(Async_kernel_Time_source[14], time_source);
     b:
     {
      for(;;){
       var match = caml_call1(Core_Queue[49], flushes);
       if(! match) break;
       var match$0 = match[1], z = match$0[2], ivar = match$0[1];
       if(! caml_call2(Core_Int63[108], z, bytes_written)) break b;
       caml_call2(Async_kernel_Ivar[14], ivar, [0, now]);
       caml_call1(Core_Queue[45], flushes);
      }
      break a;
     }
    }
    t[11] = t[11] - bytes_written$0 | 0;
    a:
    {
     b:
     {
      var bytes_written$1 = bytes_written$0;
      for(;;){
       if(! caml_call2(Async_unix_Import[1], bytes_written$1, 0))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bu_], 1);
       var match$1 = caml_call1(Core_Deque[60], t[10]);
       if(! match$1) break;
       var
        _e5_ = match$1[1],
        kind = _e5_[2],
        match$2 = _e5_[1],
        len = match$2[3],
        pos = match$2[2],
        buf = match$2[1];
       if(! caml_call2(Async_unix_Import[1], bytes_written$1, len)) break b;
       if(! kind) runtime.bigstring_destroy_stub(buf);
       var
        bytes_written$2 = bytes_written$1 - len | 0,
        bytes_written$1 = bytes_written$2;
      }
      if(! caml_call2(Async_unix_Import[4], bytes_written$1, 0)) break a;
      die
       (t, caml_call1(Sexplib0_Sexp_conv[7], cst_writer_wrote_nonzero_amoun));
      break a;
     }
     var
      new_iovec =
        caml_call3
         (Core_unix[276][7],
          [0, pos + bytes_written$1 | 0],
          [0, len - bytes_written$1 | 0],
          buf);
     caml_call2(Core_Deque[52], t[10], [0, new_iovec, kind]);
    }
    schedule_unscheduled(t, 1);
    return caml_call1(Core_Deque[16], t[10])
            ? (t[14] = 0, t[13] = 0, 973210841)
            : -376447349;
   }
   function start_write(t){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15], cst_Writer_start_write, t, sexp_of_writer);
    if(! is_running(t[5]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _by_], 1);
    var
     match = mk_iovecs(t),
     iovecs_len = match[3],
     contains_mmapped = match[2],
     iovecs = match[1];
    function handle_write_result(param){
     if(typeof param === "number") return fd_closed(t);
     if(106380200 > param[1]){
      var bytes_written = param[2];
      if(! caml_call2(Async_unix_Import[1], bytes_written, 0)){
       var
        _eX_ =
          [0, [1, [0, _bw_, [0, caml_call1(Core[389], bytes_written), 0]]], 0];
       return die
               (t,
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_write_system_call_returned),
                  _eX_]]);
      }
      if(debug){
       var
        _e0_ =
          function(param){
           var
            arg1_067 = param[2],
            arg0_066 = param[1],
            res0_068 = caml_call1(Core[389], arg0_066),
            res1_069 = sexp_of_writer(arg1_067);
           return [1, [0, res0_068, [0, res1_069, 0]]];
          };
       caml_call3
        (Async_kernel_Debug[15],
         cst_Writer_write_finished,
         [0, bytes_written, t],
         _e0_);
      }
      if(! is_running(t[5]))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bB_], 1);
      if(973210841 <= update_after_completed_write(t, bytes_written))
       return -752096295 <= t[17]
               ? (t[5] = -560725133, 0)
               : (t[5] = _bA_, caml_call2(Async_kernel_Ivar[16], t[6], 0));
      var match = t[7];
      if(typeof match === "number") return start_write(t);
      var
       span = match[2],
       _e1_ = function(param){return start_write(t);},
       _e2_ = caml_call1(Time_ns_unix[72][146], span),
       _e3_ = caml_call2(Async_kernel_Time_source[29], t[15], _e2_);
      return caml_call2(Async_unix_Import[27], _e3_, _e1_);
     }
     var exn = param[2];
     a:
     if(exn[1] === Async_unix_Unix_syscalls[153]){
      var _eV_ = exn[2];
      if(typeof _eV_ === "number"){
       if(31 <= _eV_){
        var _eW_ = _eV_ - 32 | 0;
        if(19 < _eW_ >>> 0){
         if(0 <= _eW_)
          switch(_eW_ - 20 | 0){
            case 0:
            case 1:
            case 2:
            case 4:
            case 10:
            case 13: break;
            default: break a;
          }
         if(! caml_call1(Async_kernel_Ivar[17], t[23]))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _bv_], 1);
         caml_call2(Async_kernel_Ivar[14], t[23], 0);
         if(! t[24]) return stop_permanently(t, 2);
         stop_permanently(t, 0);
         throw caml_maybe_attach_backtrace(exn, 0);
        }
        if(5 !== _eW_) break a;
       }
       else if(2 !== _eV_){
        if(3 === _eV_)
         return die(t, caml_call1(Sexplib0_Sexp_conv[7], cst_write_got_EBADF));
        break a;
       }
       if(debug)
        caml_call3
         (Async_kernel_Debug[15],
          cst_Writer_write_when_ready,
          t,
          sexp_of_writer);
       if(! is_running(t[5]))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bz_], 1);
       var
        _eY_ =
          function(param){
           return -102231997 === param
                   ? start_write(t)
                   : -3286312
                     <= param
                     ? die
                       (t,
                        caml_call1
                         (Sexplib0_Sexp_conv[7], cst_writer_ready_to_got_Bad_fd))
                     : fd_closed(t);
          },
        _eZ_ = caml_call2(Async_unix_Fd[28], t[2], -477700929);
       return caml_call2(Async_unix_Import[27], _eZ_, _eY_);
      }
     }
     return die(t, caml_call1(Base_Exn[1], exn));
    }
    var _eR_ = 1 - caml_call1(Async_unix_Fd[9], t[2]);
    if(_eR_)
     var should_write_in_thread = _eR_;
    else
     var
      _eT_ = caml_call2(Async_unix_Import[4], iovecs_len, thread_io_cutoff),
      should_write_in_thread = _eT_ || contains_mmapped;
    if(should_write_in_thread){
     var
      fd = t[2],
      _eP_ =
        function(file_descr){
         var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
         if(match){
          var uring = match[1];
          return caml_call4(Async_unix_Io_uring[9], uring, 0, fd, iovecs);
         }
         function _eU_(param){
          return caml_call3(Bigstring_unix[144], file_descr, 0, iovecs);
         }
         return caml_call2(Async_unix_In_thread[6], cst_writev, _eU_);
        },
      _eQ_ = caml_call2(Async_unix_Fd[25], fd, _eP_);
     return caml_call2(Async_unix_Import[27], _eQ_, handle_write_result);
    }
    function _eS_(file_descr){
     return caml_call3(Bigstring_unix[145], file_descr, 0, iovecs);
    }
    return handle_write_result
            (caml_call3(Async_unix_Fd[31], _bx_, t[2], _eS_));
   }
   function maybe_start_writer(t){
    var match$0 = t[27];
    if(! match$0){
     var _eL_ = t[5];
     if(typeof _eL_ === "number" && 951752159 > _eL_){
      var
       _eM_ = bytes_to_write(t),
       _eN_ = caml_call2(Async_unix_Import[4], _eM_, 0);
      if(! _eN_) return _eN_;
      caml_call1(Core[248], t[22]);
      t[5] = 951752159;
      var
       _eJ_ =
         function(param){
          var open_flags = t[25];
          a:
          {
           if(typeof open_flags !== "number" && 106380200 > open_flags[1]){
            var
             flags = open_flags[2],
             can_write_fd = caml_call1(Core_unix[50][54], flags);
            break a;
           }
           var can_write_fd = 0;
          }
          if(1 - can_write_fd){
           var
            _eO_ =
              [0, [1, [0, _bC_, [0, sexp_of_open_flags(open_flags), 0]]], 0];
           die
            (t,
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_not_allowed_to_write_due_t),
               _eO_]]);
          }
          return start_write(t);
         };
      return caml_call3
              (Async_unix_Import[19],
               [0, t[4]],
               [0, Async_kernel_Priority[4]],
               _eJ_);
     }
     return 0;
    }
    var backing_out_channel = match$0[1];
    for(;;){
     var
      match = mk_iovecs(t),
      bytes_written = match[3],
      iovecs = match[1],
      _eK_ =
        function(iovec){
         return caml_call2
                 (Async_unix_Backing_out_channel[5],
                  backing_out_channel,
                  iovec);
        };
     caml_call2(Core_Array[35], iovecs, _eK_);
     if(973210841 <= update_after_completed_write(t, bytes_written)) return 0;
    }
   }
   function give_buf(t, desired){
    if(! caml_call2(Async_unix_Import[1], desired, 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bE_], 1);
    if(is_stopped_permanently(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bD_], 1);
    got_bytes(t, desired);
    var
     buf_len = caml_call1(Core_Bigstring[21], t[12]),
     available = buf_len - t[14] | 0;
    if(caml_call2(Async_unix_Import[2], desired, available)){
     var pos = t[14];
     t[14] = t[14] + desired | 0;
     return [0, t[12], pos];
    }
    if(caml_call2(Async_unix_Import[4], desired, buf_len / 2 | 0)){
     schedule_unscheduled(t, 1);
     var buf = caml_call1(Core_Bigstring[121], desired);
     add_iovec(t, 0, caml_call3(Core_unix[276][7], 0, [0, desired], buf), 0);
     return [0, buf, 0];
    }
    schedule_unscheduled(t, 0);
    var buf$0 = caml_call1(Core_Bigstring[121], buf_len);
    t[12] = buf$0;
    t[13] = 0;
    t[14] = desired;
    return [0, buf$0, 0];
   }
   function write_gen_internal
   (t, src, src_pos, src_len, allow_partial_write, blit_to_bigstring){
    if(is_stopped_permanently(t)) return got_bytes(t, src_len);
    var
     _eI_ = t[14],
     available = caml_call1(Core_Bigstring[21], t[12]) - _eI_ | 0;
    if(caml_call2(Async_unix_Import[1], available, src_len)){
     got_bytes(t, src_len);
     var dst_pos = t[14];
     t[14] = dst_pos + src_len | 0;
     caml_call5(blit_to_bigstring, src, src_pos, t[12], dst_pos, src_len);
    }
    else if(allow_partial_write){
     got_bytes(t, available);
     var dst_pos$0 = t[14];
     t[14] = dst_pos$0 + available | 0;
     caml_call5(blit_to_bigstring, src, src_pos, t[12], dst_pos$0, available);
     var
      remaining = src_len - available | 0,
      match = give_buf(t, remaining),
      dst_pos$1 = match[2],
      dst = match[1];
     caml_call5
      (blit_to_bigstring,
       src,
       src_pos + available | 0,
       dst,
       dst_pos$1,
       remaining);
    }
    else{
     var
      match$0 = give_buf(t, src_len),
      dst_pos$2 = match$0[2],
      dst$0 = match$0[1];
     caml_call5(blit_to_bigstring, src, src_pos, dst$0, dst_pos$2, src_len);
    }
    return maybe_start_writer(t);
   }
   function write_gen_unchecked(pos, len, t, src, blit_to_bigstring, length){
    var
     _eH_ = caml_call1(length, src),
     match = caml_call4(Core_Ordered_collection_common[1], pos, len, 0, _eH_),
     src_len = match[2],
     src_pos = match[1];
    return write_gen_internal(t, src, src_pos, src_len, 1, blit_to_bigstring);
   }
   function write_bytes(pos, len, t, src){
    var _eG_ = runtime.caml_ml_bytes_length;
    return write_gen_unchecked
            (pos,
             len,
             t,
             src,
             function(src, src_pos, dst, dst_pos, len){
              return caml_call5
                      (Core_Bigstring[31][1], src, src_pos, dst, dst_pos, len);
             },
             _eG_);
   }
   function write(pos, len, t, src){
    var _eF_ = caml_ml_string_length;
    return write_gen_unchecked
            (pos,
             len,
             t,
             src,
             function(src, src_pos, dst, dst_pos, len){
              return caml_call5
                      (Core_Bigstring[29][1], src, src_pos, dst, dst_pos, len);
             },
             _eF_);
   }
   function write_bigstring(pos, len, t, src){
    function _eE_(buf){return caml_call1(Core_Bigstring[21], buf);}
    return write_gen_unchecked
            (pos,
             len,
             t,
             src,
             function(src, src_pos, dst, dst_pos, len){
              return caml_call5
                      (Core_Bigstring[22], src, src_pos, dst, dst_pos, len);
             },
             _eE_);
   }
   function to_formatter(t){
    function _eB_(_eD_){return 0;}
    function _eC_(str, pos, len){
     ensure_can_write(t);
     return write([0, pos], [0, len], t, str);
    }
    return caml_call2(Stdlib_Format[120], _eC_, _eB_);
   }
   function write_char(t, c){
    if(is_stopped_permanently(t)) return got_bytes(t, 1);
    var _ez_ = t[14], _eA_ = caml_call1(Core_Bigstring[21], t[12]) - _ez_ | 0;
    if(caml_call2(Async_unix_Import[1], _eA_, 1)){
     got_bytes(t, 1);
     caml_ba_set_1(t[12], t[14], c);
     t[14] = t[14] + 1 | 0;
    }
    else{
     var match = give_buf(t, 1), dst_pos = match[2], dst = match[1];
     caml_ba_set_1(dst, dst_pos, c);
    }
    return maybe_start_writer(t);
   }
   function newline(line_ending, t){
    if(line_ending)
     var x = line_ending[1], line_ending$0 = x;
    else
     var line_ending$0 = t[26];
    if(! line_ending$0) write_char(t, 13);
    return write_char(t, 10);
   }
   function sexp_of_t$4(param){return param ? _bM_ : _bN_;}
   var Terminate_with = [0, sexp_of_t$4];
   function write_sexp_internal(terminate_with, opt, t, sexp){
    if(opt) var sth = opt[1], hum = sth; else var hum = 0;
    if(hum){
     var _et_ = Core_Sexp[72], _eu_ = to_formatter(t);
     caml_call4(Stdlib_Format[137], _eu_, _bO_, _et_, sexp);
    }
    else{
     var
      _ev_ =
        function(eta){
         var _ew_ = 0, _ex_ = 0;
         return function(_ey_){return write(_ex_, _ew_, eta, _ey_);};
        };
     caml_call4(Core_Sexp[90], t, write_char, _ev_, sexp);
    }
    if(! terminate_with) return newline(0, t);
    if(0 === sexp[0])
     var
      str = sexp[1],
      space_is_needed = 1 - caml_call1(Sexplib_Pre_sexp[23], str);
    else
     var space_is_needed = 0;
    return space_is_needed ? write_char(t, 32) : space_is_needed;
   }
   function schedule_iovec(opt, t, iovec){
    if(opt)
     var sth = opt[1], destroy_or_keep = sth;
    else
     var destroy_or_keep = 1;
    schedule_unscheduled(t, 1);
    add_iovec(t, destroy_or_keep, iovec, 1);
    return maybe_start_writer(t);
   }
   function schedule_bigstring(destroy_or_keep, t, pos, len, bstr){
    return schedule_iovec
            (destroy_or_keep,
             t,
             caml_call3(Core_unix[276][7], pos, len, bstr));
   }
   function fsync(t){
    ensure_can_write(t);
    function _er_(param){
     return caml_call1(Async_unix_Unix_syscalls[21], t[2]);
    }
    var _es_ = flushed(t);
    return caml_call2(Async_unix_Import[33][2], _es_, _er_);
   }
   function fdatasync(t){
    ensure_can_write(t);
    function _ep_(param){
     return caml_call1(Async_unix_Unix_syscalls[22], t[2]);
    }
    var _eq_ = flushed(t);
    return caml_call2(Async_unix_Import[33][2], _eq_, _ep_);
   }
   function write_bin_prot(t, sw_arg, v){
    ensure_can_write(t);
    var len = caml_call1(sw_arg[1], v), tot_len = len + Bin_prot_Utils[1] | 0;
    if(is_stopped_permanently(t)) return got_bytes(t, tot_len);
    var match = give_buf(t, tot_len), start_pos = match[2], buf = match[1];
    caml_call5(Core_Bigstring[124], buf, [0, start_pos], sw_arg[2], len, v);
    return maybe_start_writer(t);
   }
   function send(t, s){
    ensure_can_write(t);
    var _eo_ = caml_call1(Core[22], caml_ml_string_length(s));
    write(0, 0, t, caml_call2(Core[18], _eo_, cst));
    return write(0, 0, t, s);
   }
   function schedule_iovec$0(destroy_or_keep, t, iovec){
    ensure_can_write(t);
    return schedule_iovec(destroy_or_keep, t, iovec);
   }
   function schedule_iovecs(t, iovecs){
    ensure_can_write(t);
    schedule_unscheduled(t, 1);
    var _el_ = 1;
    function _em_(_en_){return add_iovec(t, _el_, _en_, 1);}
    caml_call2(Core_Queue[18], iovecs, _em_);
    caml_call1(Core_Queue[51], iovecs);
    return maybe_start_writer(t);
   }
   function schedule_bigstring$0(t, pos, len, bstr){
    ensure_can_write(t);
    return schedule_bigstring(0, t, pos, len, bstr);
   }
   function schedule_bigsubstring(t, bigsubstring){
    ensure_can_write(t);
    var
     _ej_ = caml_call1(Core_Bigsubstring[29], bigsubstring),
     _ek_ = [0, caml_call1(Core_Bigsubstring[6], bigsubstring)];
    return schedule_bigstring
            (0,
             t,
             [0, caml_call1(Core_Bigsubstring[30], bigsubstring)],
             _ek_,
             _ej_);
   }
   function schedule_iobuf_peek(t, pos, len, iobuf){
    ensure_can_write(t);
    return schedule_iovec
            (0, t, caml_call3(Iobuf_unix[18][2], pos, len, iobuf));
   }
   function schedule_iobuf_consume(t, len$0, iobuf){
    ensure_can_write(t);
    var
     iovec = caml_call3(Iobuf_unix[18][2], 0, len$0, iobuf),
     len = iovec[3];
    schedule_iovec(0, t, iovec);
    function _eh_(param){return caml_call2(Iobuf[39], iobuf, len);}
    var _ei_ = flushed_time(t);
    return caml_call2(Async_unix_Import[33][3], _ei_, _eh_);
   }
   function write_gen(pos, len, t, src, blit_to_bigstring, length){
    ensure_can_write(t);
    try{
     var
      _eg_ = write_gen_unchecked(pos, len, t, src, blit_to_bigstring, length);
     return _eg_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _ef_ = [0, [1, [0, _bK_, [0, caml_call1(Core[625], exn), 0]]], 0];
     return die
             (t,
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Writer_write_gen_error_wri),
                _ef_]]);
    }
   }
   function write_bytes$0(pos, len, t, s){
    ensure_can_write(t);
    return write_bytes(pos, len, t, s);
   }
   function write$0(pos, len, t, s){
    ensure_can_write(t);
    return write(pos, len, t, s);
   }
   function write_line(line_ending, t, s){
    ensure_can_write(t);
    write(0, 0, t, s);
    return newline(line_ending, t);
   }
   function writef(t){
    ensure_can_write(t);
    function _ee_(s){return write(0, 0, t, s);}
    return caml_call1(Core[254], _ee_);
   }
   function write_sexp(hum, terminate_with$0, t, sexp){
    ensure_can_write(t);
    if(terminate_with$0)
     var sth = terminate_with$0[1], terminate_with = sth;
    else
     var terminate_with = 1;
    return write_sexp_internal(terminate_with, hum, t, sexp);
   }
   function write_sexp_internal$0(terminate_with, hum, t, sexp){
    ensure_can_write(t);
    return write_sexp_internal(terminate_with, hum, t, sexp);
   }
   function write_iobuf(pos, len, t, iobuf$0){
    ensure_can_write(t);
    var
     _ec_ = caml_call1(Iobuf[26], iobuf$0),
     iobuf = caml_call1(Iobuf[24], _ec_);
    function _ed_(buf){return caml_call1(Iobuf[29], buf);}
    return write_gen_unchecked
            (pos,
             len,
             t,
             iobuf,
             function(src, src_pos, dst, dst_pos, len){
              return caml_call5
                      (Iobuf[64][2][1], src, src_pos, dst, dst_pos, len);
             },
             _ed_);
   }
   function write_bigstring$0(pos, len, t, src){
    ensure_can_write(t);
    return write_bigstring(pos, len, t, src);
   }
   function write_bigsubstring(t, bigsubstring){
    ensure_can_write(t);
    var
     _ea_ = caml_call1(Core_Bigsubstring[29], bigsubstring),
     _eb_ = [0, caml_call1(Core_Bigsubstring[6], bigsubstring)];
    return write_bigstring
            ([0, caml_call1(Core_Bigsubstring[30], bigsubstring)],
             _eb_,
             t,
             _ea_);
   }
   function write_substring(t, substring){
    ensure_can_write(t);
    var
     _d__ = caml_call1(Core_Substring[29], substring),
     _d$_ = [0, caml_call1(Core_Substring[6], substring)];
    return write_bytes
            ([0, caml_call1(Core_Substring[30], substring)], _d$_, t, _d__);
   }
   function write_byte(t, b){
    ensure_can_write(t);
    var _d9_ = caml_call2(Core[237], b, 256);
    return write_char(t, caml_call1(Core[19], _d9_));
   }
   function write_char$0(t, c){ensure_can_write(t); return write_char(t, c);}
   function newline$0(line_ending, t){
    ensure_can_write(t);
    return newline(line_ending, t);
   }
   function write_bin_prot_no_size_header(t, size, write, v){
    ensure_can_write(t);
    if(is_stopped_permanently(t)) return got_bytes(t, size);
    var
     match = give_buf(t, size),
     start_pos = match[2],
     buf = match[1],
     end_pos = caml_call3(write, buf, start_pos, v),
     written = end_pos - start_pos | 0;
    if(caml_call2(Async_unix_Import[6], written, size)){
     var
      _d6_ = [0, [1, [0, _bP_, [0, caml_call1(Core[389], size), 0]]], 0],
      _d7_ = [0, [1, [0, _bQ_, [0, caml_call1(Core[389], written), 0]]], _d6_],
      _d8_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Writer_write_bin_prot_no_s),
          _d7_]];
     caml_call1(Core[261], _d8_);
    }
    return maybe_start_writer(t);
   }
   function write_direct(t, f){
    ensure_can_write(t);
    if(is_stopped_permanently(t)) return 0;
    var
     pos = t[14],
     len = caml_call1(Core_Bigstring[21], t[12]) - pos | 0,
     match = caml_call3(f, t[12], pos, len),
     written = match[2],
     x = match[1],
     _d0_ = caml_call2(Async_unix_Import[5], written, 0),
     _d1_ = _d0_ || caml_call2(Async_unix_Import[4], written, len);
    if(_d1_){
     var
      _d2_ = [0, [1, [0, _bF_, [0, sexp_of_writer(t), 0]]], 0],
      _d3_ = [0, [1, [0, _bG_, [0, caml_call1(Core[389], len), 0]]], _d2_],
      _d4_ = [0, [1, [0, _bH_, [0, caml_call1(Core[389], written), 0]]], _d3_],
      _d5_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_write_direct_s_f_argument_),
          _d4_]];
     caml_call1(Core[261], _d5_);
    }
    t[14] = pos + written | 0;
    got_bytes(t, written);
    maybe_start_writer(t);
    return [0, x];
   }
   function write_gen_whole(t, src, blit_to_bigstring, length){
    ensure_can_write(t);
    try{
     var
      src_len = caml_call1(length, src),
      _dY_ =
        write_gen_internal
         (t,
          src,
          0,
          src_len,
          0,
          function(src, src_pos, dst, dst_pos, len){
           if(! caml_call2(Async_unix_Import[3], src_pos, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bJ_], 1);
           if(caml_call2(Async_unix_Import[3], len, src_len))
            return caml_call3(blit_to_bigstring, src, dst, dst_pos);
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bI_], 1);
          });
     return _dY_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _dZ_ = [0, [1, [0, _bL_, [0, caml_call1(Core[625], exn), 0]]], 0];
     return die
             (t,
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Writer_write_gen_whole_err),
                _dZ_]]);
    }
   }
   var
    stdout_and_stderr_behave_nicel = [0, function(_dX_){return;}],
    stdout_and_stderr =
      [246,
       function(param){
        function _dS_(param){
         var
          stdout = caml_call1(Async_unix_Fd[20], 0),
          stderr = caml_call1(Async_unix_Fd[21], 0),
          stdout$0 = create$0(0, 0, 0, 0, 0, 0, stdout);
         function dev_and_ino(fd){
          var
           _dW_ = caml_call1(Async_unix_Fd[40], fd),
           stats = caml_call1(Core_unix[75], _dW_);
          return [0, stats[1], stats[2]];
         }
         if(Async_unix_Import[36]){
          set_backing_out_channel$0
           (stdout$0,
            caml_call1
             (Async_unix_Backing_out_channel[3], Stdio_Out_channel[3]));
          return [0, stdout$0, stdout$0];
         }
         var
          x_074 = dev_and_ino(stderr),
          x_073 = dev_and_ino(stdout),
          t_078 = x_073[2],
          t_077 = x_073[1],
          t_080 = x_074[2],
          t_079 = x_074[1],
          n = caml_call2(Core[382], t_077, t_079),
          match = 0 === n ? caml_call2(Core[382], t_078, t_080) : n,
          _dV_ = 0 === match ? 1 : 0;
         if(_dV_)
          var stderr$0 = stdout$0;
         else
          var
           stderr$1 = create$0(0, 0, 0, 0, 0, 0, stderr),
           stderr$0 = stderr$1;
         caml_call1(stdout_and_stderr_behave_nicel[1], stdout$0);
         caml_call1(stdout_and_stderr_behave_nicel[1], stderr$0);
         return [0, stdout$0, stderr$0];
        }
        var
         match =
           caml_call3
            (Async_unix_Require_explicit_ti[5][6],
             [0, Async_kernel_Monitor[24]],
             0,
             _dS_);
        if(match){var v = match[1]; return v;}
        var
         _dT_ =
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_unable_to_create_stdout_st),
            0],
         _dU_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_src_writer0_ml_1767_35),
             _dT_]];
        return caml_call1(Core[261], _dU_);
       }],
    stdout =
      [246,
       function(_dP_){
        var _dQ_ = caml_obj_tag(stdout_and_stderr);
        a:
        if(250 === _dQ_)
         var _dR_ = stdout_and_stderr[1];
        else{
         if(246 !== _dQ_ && 244 !== _dQ_){
          var _dR_ = stdout_and_stderr;
          break a;
         }
         var _dR_ = caml_call1(CamlinternalLazy[2], stdout_and_stderr);
        }
        return _dR_[1];
       }],
    stderr =
      [246,
       function(_dM_){
        var _dN_ = caml_obj_tag(stdout_and_stderr);
        a:
        if(250 === _dN_)
         var _dO_ = stdout_and_stderr[1];
        else{
         if(246 !== _dN_ && 244 !== _dN_){
          var _dO_ = stdout_and_stderr;
          break a;
         }
         var _dO_ = caml_call1(CamlinternalLazy[2], stdout_and_stderr);
        }
        return _dO_[2];
       }];
   function use_synchronous_stdout_and_std(param){
    var _dI_ = caml_obj_tag(stdout_and_stderr);
    a:
    if(250 === _dI_)
     var match = stdout_and_stderr[1];
    else{
     if(246 !== _dI_ && 244 !== _dI_){var match = stdout_and_stderr; break a;}
     var match = caml_call1(CamlinternalLazy[2], stdout_and_stderr);
    }
    var
     stderr = match[2],
     stdout = match[1],
     _dJ_ = stdout === stderr ? 0 : [0, [0, stderr, Stdio_Out_channel[4]], 0],
     ts_and_channels = [0, [0, stdout, Stdio_Out_channel[3]], _dJ_];
    function _dK_(param){
     var out_channel = param[2], t = param[1];
     return set_synchronous_out_channel(t, out_channel);
    }
    var _dL_ = caml_call2(Core_List[51], ts_and_channels, _dK_);
    return caml_call1(Async_kernel_Deferred[22], _dL_);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bW_ =
       function(param){
        var
         _dy_ = caml_call1(Core_Lazy[40], stdout),
         _dz_ = [1, [0, _bX_, [0, caml_call1(Core[323], _dy_), 0]]];
        caml_call1(Async_unix_Import[35], _dz_);
        var _dA_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _dA_);
        var
         _dB_ = caml_call1(Core_Lazy[40], stderr),
         _dC_ = [1, [0, _bY_, [0, caml_call1(Core[323], _dB_), 0]]];
        caml_call1(Async_unix_Import[35], _dC_);
        var _dD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _dD_);
        var
         saved_stderr = caml_call2(Core_unix[96], 0, Core_unix[44]),
         match = caml_call2(Core_unix[117], 0, 0),
         pipe_w = match[2],
         pipe_r = match[1];
        caml_call4(Core_unix[97], 0, pipe_w, Core_unix[44], 0);
        caml_call2(Core_unix[53], 0, pipe_r);
        caml_call2(Core_unix[53], 0, pipe_w);
        var _dE_ = caml_obj_tag(stdout);
        a:
        if(250 === _dE_)
         var stdout$0 = stdout[1];
        else{
         if(246 !== _dE_ && 244 !== _dE_){var stdout$0 = stdout; break a;}
         var stdout$0 = caml_call1(CamlinternalLazy[2], stdout);
        }
        var _dF_ = caml_obj_tag(stderr);
        a:
        if(250 === _dF_)
         var stderr$0 = stderr[1];
        else{
         if(246 !== _dF_ && 244 !== _dF_){var stderr$0 = stderr; break a;}
         var stderr$0 = caml_call1(CamlinternalLazy[2], stderr);
        }
        caml_call4(Core_unix[97], 0, saved_stderr, Core_unix[44], 0);
        caml_call2(Core_unix[53], 0, saved_stderr);
        var
         _dG_ =
           [1,
            [0,
             _bZ_,
             [0, caml_call1(Core[323], stdout$0 === stderr$0 ? 1 : 0), 0]]];
        caml_call1(Async_unix_Import[35], _dG_);
        var _dH_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        return caml_call1(Ppx_expect_test_block[2], _dH_);
       },
     _b2_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _b1_,
         _b0_),
     _b3_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _b2_], 0],
     _b6_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _b5_,
         _b4_),
     _b7_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _b6_], _b3_],
     _b__ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _b9_,
         _b8_),
     _b$_ =
       [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _b__], _b7_],
     _cb_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4),
     _cc_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_writer0_ml,
      1792,
      _cf_,
      _ce_,
      _cd_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cc_,
      _cb_,
      _ca_,
      0,
      Inline_test_config,
      _b$_,
      _bW_);
   }
   function make_writer_behave_nicely_in_p(writer){
    set_buffer_age_limit(writer, 751362817);
    set_raise_when_consumer_leaves(writer, 0);
    function _dv_(param){
     return caml_call2(Async_unix_Shutdown[2], 0, Core_Signal[59]);
    }
    var
     _dw_ = consumer_left$1(writer),
     _dx_ = caml_call2(Async_unix_Import[33][3], _dw_, _dv_);
    return caml_call1(Async_unix_Import[16], _dx_);
   }
   function behave_nicely_in_pipeline(writers, param){
    if(writers){
     var l = writers[1];
     return caml_call2(Core_List[19], l, make_writer_behave_nicely_in_p);
    }
    if(caml_call1(Core_Lazy[40], stdout_and_stderr)){
     var
      match = caml_call1(Core[248], stdout_and_stderr),
      stderr = match[2],
      stdout = match[1];
     return caml_call2
             (Core_List[19],
              [0, stdout, [0, stderr, 0]],
              make_writer_behave_nicely_in_p);
    }
    stdout_and_stderr_behave_nicel[1] = make_writer_behave_nicely_in_p;
    return 0;
   }
   function with_file_atomic(temp_file, perm, opt, _cH_, time_source, file, f){
    if(opt) var sth = opt[1], do_fsync = sth; else var do_fsync = 0;
    if(_cH_)
     var sth$0 = _cH_[1], replace_special = sth$0;
    else
     var replace_special = 0;
    function _cI_(current_file_permissions){
     if(perm)
      var p = perm[1], initial_permissions = p;
     else if(current_file_permissions)
      var p$0 = current_file_permissions[1], initial_permissions = p$0;
     else
      var initial_permissions = 438;
     function _cS_(param){
      var
       fd = param[2],
       temp_file = param[1],
       t = create$0(0, 0, 0, 0, 0, time_source, fd);
      function _cY_(param){
       if(0 === param[0]){
        var res = param[1];
        return caml_call1(Async_unix_Import[30], res);
       }
       var error = param[1];
       function _dm_(unlink_result){
        function _dp_(close_result){
         var
          _ds_ = [0, [1, [0, _bR_, [0, caml_call1(Core[558], file), 0]]], 0],
          _dt_ =
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_Error_in_Writer_with_file_),
              _ds_]],
          match =
            caml_call1
             (Core_Or_error[57], [0, close_result, [0, unlink_result, 0]]);
         if(0 === match[0]){
          if(10228857 <= error[1])
           var our_error = error[2], our_error$0 = our_error;
          else
           var
            f_error = error[2],
            our_error$0 = caml_call1(Core_Error[30], f_error);
          var our_error$1 = our_error$0;
         }
         else
          var
           cleanup_error = match[1],
           initial_error = error[2],
           our_error$1 =
             caml_call1
              (Core_Error[26], [0, initial_error, [0, cleanup_error, 0]]);
         var _du_ = caml_call2(Core_Error[23], our_error$1, _dt_);
         return caml_call1(Core_Error[30], _du_);
        }
        function _dq_(param){return close(0, t);}
        var _dr_ = caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, 0, _dq_);
        return caml_call2(Async_unix_Import[33][3], _dr_, _dp_);
       }
       function _dn_(param){
        return caml_call1(Async_unix_Unix_syscalls[37], temp_file);
       }
       var _do_ = caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, 0, _dn_);
       return caml_call2(Async_unix_Import[33][2], _do_, _dm_);
      }
      function _cZ_(f_result){
       function _c8_(param){
        if(0 === param[0]) return [0, f_result];
        var e = param[1];
        return [1, [0, 10228857, e]];
       }
       function _c9_(param){
        function _df_(param){
         function _dg_(param){
          function _di_(param){
           function _dk_(param){
            return caml_call2(Async_unix_Unix_syscalls[39], temp_file, file);
           }
           var _dl_ = close(0, t);
           return caml_call2(Async_unix_Import[33][2], _dl_, _dk_);
          }
          var
           _dj_ = do_fsync ? fsync(t) : caml_call1(Async_unix_Import[30], 0);
          return caml_call2(Async_unix_Import[33][2], _dj_, _di_);
         }
         var
          _dh_ =
            current_file_permissions
             ? caml_call2
               (Async_unix_Unix_syscalls[42], fd, initial_permissions)
             : caml_call1(Async_unix_Import[30], 0);
         return caml_call2(Async_unix_Import[33][2], _dh_, _dg_);
        }
        return caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, 0, _df_);
       }
       var
        _c__ = [0, caml_call1(Core[558], file), 0],
        _c$_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_writer_closed_by_f),
            _c__]],
        _da_ = caml_call1(Core_Error[20], _c$_),
        _db_ = 1 - is_closed(t),
        _dc_ = caml_call2(Core_Result[53], _db_, _da_),
        _dd_ = caml_call1(Async_kernel_Deferred[12], _dc_),
        _de_ =
          caml_call2(Async_kernel_Deferred_or_error[19][4][2], _dd_, _c9_);
       return caml_call2(Async_unix_Import[33][3], _de_, _c8_);
      }
      var _c0_ = Core_Result[47];
      function _c1_(e){return [0, -321063951, e];}
      function _c2_(_c7_){return caml_call2(_c0_, _c7_, _c1_);}
      function _c3_(param){return caml_call1(f, t);}
      var
       _c4_ = caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, 0, _c3_),
       _c5_ = caml_call2(Async_unix_Import[32], _c4_, _c2_),
       _c6_ = caml_call2(Async_kernel_Deferred_result[3][4][2], _c5_, _cZ_);
      return caml_call2(Async_unix_Import[31], _c6_, _cY_);
     }
     var temp_file$0 = caml_call2(Core_Option[39], temp_file, file);
     function _cT_(param){
      var
       fd = param[2],
       temp_file = param[1],
       _cX_ = caml_call1(Core_Info[14], temp_file);
      return [0, temp_file, caml_call4(Async_unix_Fd[6], 0, 2, fd, _cX_)];
     }
     var
      dir = caml_call1(Core_Filename[20], temp_file$0),
      prefix = caml_call1(Core_Filename[19], temp_file$0);
     function _cU_(param){
      return caml_call5
              (Filename_unix[3],
               0,
               [0, initial_permissions],
               [0, dir],
               prefix,
               cst$0);
     }
     var
      _cV_ = caml_call4(Async_unix_In_thread[5], 0, 0, 0, _cU_),
      _cW_ = caml_call2(Async_unix_Import[33][3], _cV_, _cT_);
     return caml_call2(Async_unix_Import[33][2], _cW_, _cS_);
    }
    function _cJ_(param){
     if(0 !== param[0]) return 0;
     var stats = param[1], _cN_ = stats[3];
     if(840421965 <= _cN_){
      if(848053274 <= _cN_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bS_], 1);
      var
       _cO_ = [0, caml_call1(Core[558], file), 0],
       _cP_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Writer_with_file_atomic_no),
           _cO_]];
      return caml_call1(Core[261], _cP_);
     }
     if(781515420 <= _cN_) return [0, stats[4]];
     if(replace_special) return [0, stats[4]];
     var
      _cQ_ = [0, caml_call1(Core[558], file), 0],
      _cR_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Writer_with_file_atomic_no$0),
          _cQ_]];
     return caml_call1(Core[261], _cR_);
    }
    function _cK_(param){
     return caml_call1(Async_unix_Unix_syscalls[34], file);
    }
    var
     _cL_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _bU_, _bT_, _cK_),
     _cM_ = caml_call2(Async_unix_Import[33][3], _cL_, _cJ_);
    return caml_call2(Async_unix_Import[33][2], _cM_, _cI_);
   }
   function save(temp_file, perm, fsync, replace_special, file, contents){
    return with_file_atomic
            (temp_file,
             perm,
             fsync,
             replace_special,
             0,
             file,
             function(t){
              write$0(0, 0, t, contents);
              return caml_call1(Async_unix_Import[30], 0);
             });
   }
   function save_lines(temp_file, perm, fsync, replace_special, file, lines){
    return with_file_atomic
            (temp_file,
             perm,
             fsync,
             replace_special,
             0,
             file,
             function(t){
              function _cG_(line){
               write$0(0, 0, t, line);
               return newline$0(0, t);
              }
              caml_call2(Core_List[19], lines, _cG_);
              return caml_call1(Async_unix_Import[30], 0);
             });
   }
   function save_sexp
   (temp_file, perm, fsync, replace_special, opt, file, sexp){
    if(opt) var sth = opt[1], hum = sth; else var hum = 1;
    return with_file_atomic
            (temp_file,
             perm,
             fsync,
             replace_special,
             0,
             file,
             function(t){
              write_sexp_internal$0(0, [0, hum], t, sexp);
              return caml_call1(Async_unix_Import[30], 0);
             });
   }
   function save_sexps_conv
   (temp_file, perm, fsync, replace_special, opt, file, xs, sexp_of_x){
    if(opt) var sth = opt[1], hum = sth; else var hum = 1;
    return with_file_atomic
            (temp_file,
             perm,
             fsync,
             replace_special,
             0,
             file,
             function(t){
              function _cF_(x){
               return write_sexp_internal$0
                       (0, [0, hum], t, caml_call1(sexp_of_x, x));
              }
              caml_call2(Core_List[19], xs, _cF_);
              return caml_call1(Async_unix_Import[30], 0);
             });
   }
   function save_sexps
   (temp_file, perm, fsync, replace_special, hum, file, sexps){
    return save_sexps_conv
            (temp_file,
             perm,
             fsync,
             replace_special,
             hum,
             file,
             sexps,
             function(_cE_){return _cE_;});
   }
   function save_bin_prot
   (temp_file, perm, fsync, replace_special, file, bin_writer, a){
    return with_file_atomic
            (temp_file,
             perm,
             fsync,
             replace_special,
             0,
             file,
             function(t){
              write_bin_prot(t, bin_writer, a);
              return caml_call1(Async_unix_Import[30], 0);
             });
   }
   function with_flushed_at_close(t, flushed, f){
    var
     producers_to_flush_at_close_el = caml_call2(Core_Bag[23], t[20], flushed);
    function _cD_(param){
     caml_call2(Core_Bag[26], t[20], producers_to_flush_at_close_el);
     return caml_call1(Async_unix_Import[30], 0);
    }
    return caml_call8(Async_kernel_Monitor[23], 0, 0, 0, 0, _bV_, 0, f, _cD_);
   }
   function make_transfer(opt, max_num_values_per_read, t, pipe_r, write_f){
    if(opt)
     var sth = opt[1], stop = sth;
    else
     var stop = caml_call1(Async_kernel_Deferred[19], 0);
    function _ci_(param){
     function _cB_(param){return 17724;}
     var _cC_ = flushed(t);
     return caml_call2(Async_unix_Import[33][3], _cC_, _cB_);
    }
    var
     consumer = caml_call2(Async_kernel_Pipe[23], pipe_r, _ci_),
     end_of_pipe_r = caml_call1(Async_kernel_Ivar[12], 0);
    function iter(param){
     if
      (!
       caml_call1(Async_kernel_Ivar[18], t[23])
       && can_write(t) && ! caml_call1(Async_kernel_Deferred[7], stop)){
      if(max_num_values_per_read)
       var
        max_queue_length = max_num_values_per_read[1],
        read_result =
          caml_call3
           (Async_kernel_Pipe[40],
            [0, consumer],
            [0, max_queue_length],
            pipe_r);
      else
       var
        read_result =
          caml_call3(Async_kernel_Pipe[40], [0, consumer], 0, pipe_r);
      if(typeof read_result !== "number"){
       var q = read_result[2];
       return caml_call2
               (write_f,
                q,
                function(param){
                 caml_call1(Async_kernel_Pipe[22][1], consumer);
                 var _cA_ = flushed(t);
                 return caml_call2(Async_unix_Import[27], _cA_, iter);
                });
      }
      if(3456156 <= read_result)
       return caml_call2(Async_kernel_Ivar[14], end_of_pipe_r, 0);
      var
       _cy_ = function(param){return iter(0);},
       _cz_ = caml_call1(Async_kernel_Pipe[46], pipe_r);
      return caml_call2(Async_unix_Import[27], _cz_, _cy_);
     }
     return 0;
    }
    function doit(param){
     iter(0);
     function _ck_(param){
      if(656392408 !== param && 1050608848 > param) return 0;
      return caml_call1(Async_kernel_Pipe[16], pipe_r);
     }
     var _cl_ = 0;
     function _cm_(param){return 1050608848;}
     var
      _cn_ = consumer_left$1(t),
      _co_ = [0, caml_call2(Async_unix_Import[14], _cn_, _cm_), _cl_];
     function _cp_(param){return 656392408;}
     var
      _cq_ = close_finished$1(t),
      _cr_ = [0, caml_call2(Async_unix_Import[14], _cq_, _cp_), _co_];
     function _cs_(param){return 926227490;}
     var _ct_ = [0, caml_call2(Async_unix_Import[14], stop, _cs_), _cr_];
     function _cu_(param){return -163278971;}
     var
      _cv_ = caml_call1(Async_kernel_Ivar[19], end_of_pipe_r),
      _cw_ = [0, caml_call2(Async_unix_Import[14], _cv_, _cu_), _ct_],
      _cx_ = caml_call1(Async_unix_Import[15], _cw_);
     return caml_call2(Async_unix_Import[33][3], _cx_, _ck_);
    }
    return with_flushed_at_close
            (t,
             function(param){
              var _cj_ = caml_call1(Async_kernel_Pipe[20], pipe_r);
              return caml_call1(Async_kernel_Deferred[15], _cj_);
             },
             doit);
   }
   function transfer(stop, max_num_values_per_read, t, pipe_r, write_f){
    return make_transfer
            (stop,
             max_num_values_per_read,
             t,
             pipe_r,
             function(q, cont){
              caml_call2(Core_Queue[18], q, write_f);
              return caml_call1(cont, 0);
             });
   }
   function transfer$0(stop, max_num_values_per_read, t, pipe_r, write_f){
    return make_transfer
            (stop,
             max_num_values_per_read,
             t,
             pipe_r,
             function(q, cont){
              var _ch_ = caml_call1(write_f, q);
              return caml_call2(Async_unix_Import[27], _ch_, cont);
             });
   }
   function pipe(t){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     pipe_w = match[2],
     pipe_r = match[1],
     _cg_ =
       transfer(0, 0, t, pipe_r, function(s){return write$0(0, 0, t, s);});
    caml_call1(Async_unix_Import[16], _cg_);
    return pipe_w;
   }
   function set_bytes_received(t, i){
    caml_call1(Core[248], t[22]);
    t[8] = i;
    return 0;
   }
   function set_bytes_written$0(t, i){t[9] = i; return 0;}
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Writer0);
   var
    Async_unix_Writer0 =
      [0,
       Id,
       Line_ending,
       sexp_of_writer,
       invariant,
       stdout,
       stderr,
       bin_shape_buffer_age_limit,
       bin_size_buffer_age_limit,
       bin_write_buffer_age_limit,
       bin_writer_buffer_age_limit,
       bin_read_buffer_age_limit$0,
       bin_read_buffer_age_limit,
       bin_reader_buffer_age_limit,
       bin_buffer_age_limit,
       sexp_of_buffer_age_limit,
       buffer_age_limit_of_sexp$0,
       buffer_age_limit_of_sexp,
       create$0,
       raise_when_consumer_leaves,
       set_raise_when_consumer_leaves,
       set_buffer_age_limit,
       consumer_left$1,
       of_out_channel,
       open_file,
       with_file,
       id,
       fd,
       set_fd,
       write_gen,
       write_gen_whole,
       write_direct,
       write_bytes$0,
       write$0,
       write_bigstring$0,
       write_iobuf,
       write_substring,
       write_bigsubstring,
       writef,
       to_formatter,
       write_char$0,
       newline$0,
       write_line,
       write_byte,
       Terminate_with,
       write_sexp,
       write_bin_prot,
       write_bin_prot_no_size_header,
       schedule_bigstring$0,
       schedule_bigsubstring,
       schedule_iobuf_peek,
       schedule_iobuf_consume,
       Destroy_or_keep,
       schedule_iovec$0,
       schedule_iovecs,
       Flush_result,
       flushed_or_failed_with_result,
       flushed_or_failed_unit,
       flushed,
       flushed_time,
       flushed_time_ns,
       fsync,
       fdatasync,
       send,
       monitor,
       close,
       close_started$1,
       close_finished$1,
       is_closed,
       is_open,
       with_close,
       can_write,
       is_stopped_permanently,
       stopped_permanently,
       with_flushed_at_close,
       bytes_to_write,
       bytes_written,
       bytes_received,
       with_file_atomic,
       save,
       save_lines,
       save_sexp,
       save_sexps,
       save_sexps_conv,
       save_bin_prot,
       transfer$0,
       transfer,
       pipe,
       behave_nicely_in_pipeline,
       set_synchronous_out_channel,
       using_synchronous_backing_out_,
       clear_synchronous_out_channel,
       with_synchronous_out_channel,
       use_synchronous_stdout_and_std,
       [0,
        Async_unix_Backing_out_channel[1],
        Async_unix_Backing_out_channel[4],
        Async_unix_Backing_out_channel[3]],
       set_synchronous_backing_out_ch,
       with_synchronous_backing_out_c,
       [0, [0, _a8_], set_bytes_received, set_bytes_written$0]];
   runtime.caml_register_global
    (313, Async_unix_Writer0, cst_Async_unix_Writer0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Reader0
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_unix__Clock, Async_unix__Fd, Async_unix__Import, Async_unix__In_thread, Async_unix__Io_uring, Async_unix__Io_uring_raw_singleton, Async_unix__Raw_scheduler, Async_unix__Unix_syscalls, Base__Buffer, Base__Char, Base__Monad, Bigstring_unix, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Utils, Bin_prot__Write, Bin_shape, Core, Core__Bigstring, Core__Bigsubstring, Core__Bytes, Core__Error, Core__Int, Core__Int63, Core__Int64, Core__List, Core__Option, Core__Or_error, Core__Result, Core__Sexp, Core__String, Core__Substring, Core__Unique_id, Core_unix, Eager_deferred, Iobuf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib__Conv, Sexplib__Sexp, Stdlib, Stdlib__Marshal, Time_float_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Reader0$0 = "Async_unix__Reader0",
    cst_Closed = "Closed",
    cst_Consumed = "Consumed",
    cst_Continue = "Continue",
    cst_Eof = "Eof",
    cst_In_use = "In_use",
    cst_Need = "Need",
    cst_Need_unknown = "Need_unknown",
    cst_Not_in_use = "Not_in_use",
    cst_Ok = "Ok",
    cst_Reader_read_bin_prot_got_c = "Reader.read_bin_prot got closed reader",
    cst_Stop = "Stop",
    cst_a = "a",
    cst_async_unix$0 = "async_unix",
    cst_exn = "exn",
    cst_fd = "fd",
    cst_file = "file",
    cst_len = "len",
    cst_open_flags = "open_flags",
    cst_pos = "pos",
    cst_read$1 = "read",
    cst_reader = "reader",
    cst_src_reader0_ml = "src/reader0.ml",
    cst_src_reader0_ml_Internal_St = "src/reader0.ml.Internal.State.t",
    cst_src_reader0_ml_Read_result = "src/reader0.ml.Read_result.Z.t",
    cst_t$0 = "t",
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err = [2, cst_src_reader0_ml_Read_result],
    error_source_007 = cst_src_reader0_ml_Read_result,
    error_source_012 = cst_src_reader0_ml_Read_result,
    error_source_020 = cst_src_reader0_ml_Internal_St,
    error_source_022 = cst_src_reader0_ml_Internal_St,
    name = "substring",
    name$0 = "bigsubstring",
    line_delimiter_pred = [0, 748194550, 10],
    cst = " ",
    Core = global_data.Core,
    Async_unix_Import = global_data.Async_unix__Import,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_List = global_data.Core__List,
    Core_Error = global_data.Core__Error,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Core_Int64 = global_data.Core__Int64,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Eager_deferred = global_data.Eager_deferred,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Bytes = global_data.Core__Bytes,
    Base_Buffer = global_data.Base__Buffer,
    Stdlib_Marshal = global_data.Stdlib__Marshal,
    Core_Substring = global_data.Core__Substring,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Core_Int = global_data.Core__Int,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Core_String = global_data.Core__String,
    Base_Char = global_data.Base__Char,
    Core_Bigsubstring = global_data.Core__Bigsubstring,
    Iobuf = global_data.Iobuf,
    Bigstring_unix = global_data.Bigstring_unix,
    Core_unix = global_data.Core_unix,
    Async_unix_Raw_scheduler = global_data.Async_unix__Raw_scheduler,
    Stdlib = global_data.Stdlib,
    Core_Int63 = global_data.Core__Int63,
    Time_float_unix = global_data.Time_float_unix,
    Async_unix_Io_uring_raw_single =
      global_data.Async_unix__Io_uring_raw_singleton,
    Core_Result = global_data.Core__Result,
    Async_unix_Io_uring = global_data.Async_unix__Io_uring,
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Option = global_data.Core__Option,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_Unique_id = global_data.Core__Unique_id,
    Base_Monad = global_data.Base__Monad,
    Sexplib_Conv = global_data.Sexplib__Conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Reader0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_reader0_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "reader0.ml");
   var
    Id = caml_call1(Core_Unique_id[2], 0),
    _a_ = [0, caml_call2(Bin_prot_Shape[6], cst_Eof, 0), 0],
    _b_ = caml_call1(Bin_shape[3][1], cst_a),
    _c_ = caml_call1(Bin_shape[4][1], "src/reader0.ml:10:15"),
    _d_ = [0, caml_call2(Bin_prot_Shape[11], _c_, _b_)],
    _e_ = [0, caml_call2(Bin_prot_Shape[6], cst_Ok, _d_), _a_],
    _f_ = caml_call1(Bin_shape[4][1], "src/reader0.ml:10:6"),
    _g_ = caml_call2(Bin_prot_Shape[8], _f_, _e_),
    _h_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _i_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _h_, _g_], 0],
    _j_ = caml_call1(Bin_shape[4][1], "src/reader0.ml:9:4"),
    group = caml_call2(Bin_prot_Shape[2], _j_, _i_),
    cst_Reader_load_bin_prot_got_u = "Reader.load_bin_prot got unexpected eof",
    _bi_ = [0, 3804260],
    _bj_ = [0, "Reader.load_bin_prot"],
    _bh_ = [0, cst_src_reader0_ml, 1553, 48],
    _be_ = [0, 3804260],
    _bf_ = [0, 523273847],
    _bg_ = [0, 1],
    _bb_ = [0, 3804260],
    _bc_ = [0, 523273847],
    _bd_ = [0, 1],
    cst_conversion_of_annotated_se =
      "conversion of annotated sexp unexpectedly succeeded",
    cst_Reader_load_sexp_requires_ =
      "Reader.load_sexp requires one sexp but got",
    _a$_ = [0, cst_exn],
    _ba_ = [0, cst_file],
    cst_Reader_load_sexp_s_error = "Reader.load_sexp(s) error",
    _a9_ = [0, cst_exn],
    _a__ = [0, cst_file],
    cst_invalid_sexp_failed_to_det =
      "invalid sexp (failed to determine location information)",
    _a5_ =
      [0,
       [2, 0, [12, 58, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]]]],
       "%s:%d:%d"],
    cst_syntax_error_when_parsing_ = "syntax error when parsing sexp",
    _a6_ = [0, 3804260],
    _a7_ = [0, 523273847],
    _a8_ = [0, 1],
    cst_Reader_load_sexp_error = "Reader.load_sexp error",
    _a4_ = [0, 0],
    cst_in = "in",
    cst_invalid_sexp = "invalid sexp",
    _a3_ = [0, cst_len],
    cst_Reader_peek_got_negative_l = "[Reader.peek] got negative len",
    _a2_ = [0, cst_src_reader0_ml, 1188, 19],
    _a0_ = [0, cst_reader],
    _a1_ = [0, "reason"],
    cst_can_not_read_from_reader = "can not read from reader",
    cst_closed = "closed",
    cst_in_use = "in use",
    _aY_ = [0, cst_reader],
    _aZ_ = [0, "length_str"],
    cst_Reader_recv_got_strange_le = "Reader.recv got strange length",
    cst_Reader_recv_got_unexpected = "Reader.recv got unexpected EOF",
    _aX_ = [1, 0],
    _aV_ = [0, -289386606, 0],
    _aW_ = [0, 990972795, 0],
    _aU_ = [0, 990972795, 0],
    _aS_ = [0, -289386606, 0],
    _aT_ = [0, -289386606, 0],
    cst_Reader_read_marshal_got_EO =
      "Reader.read_marshal got EOF with bytes remaining",
    _aQ_ = [0, "data"],
    _aR_ = [0, "length"],
    cst_Unconsumed_data = "Unconsumed data",
    _aO_ = [0, cst_reader],
    cst_Error_deserializing_reader = "Error deserializing reader",
    _aP_ = [0, 3903734],
    _aM_ = [0, cst_src_reader0_ml, 979, 25],
    _aN_ =
      [0,
       [11, cst_Reader_read_bin_prot_got_c, 0],
       cst_Reader_read_bin_prot_got_c],
    _aL_ =
      [0,
       [11,
        "max read length exceeded: ",
        [4, 0, 0, 0, [11, " > ", [4, 0, 0, 0, 0]]]],
       "max read length exceeded: %d > %d"],
    _aI_ = [0, 3456156],
    _aJ_ =
      [0,
       [11,
        "got Eof with ",
        [4,
         0,
         0,
         0,
         [11, " bytes left over (need ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "got Eof with %d bytes left over (need %d)"],
    cst_Reader_read_bin_prot = "Reader.read_bin_prot",
    _aK_ =
      [0,
       [11, "max read length is negative: ", [4, 0, 0, 0, 0]],
       "max read length is negative: %d"],
    _aG_ = [0, "Read"],
    _aH_ = [0, "Peek"],
    cst_header = "header",
    cst_Negative_message_size = "Negative message size",
    cst_Bytes_needed_overflowed = "Bytes needed overflowed",
    cst_message = "message",
    _aD_ = [0, cst_pos],
    _aE_ = [0, "size"],
    _aF_ = [0, cst_reader],
    _ay_ = [0, "new_pos"],
    _az_ = [0, "read_len"],
    _aA_ = [0, "old_pos"],
    _aB_ = [0, cst_reader],
    _aC_ = [0, "bin_type"],
    cst_Unexpected_reader_position = "Unexpected reader position after read",
    _aw_ = [0, cst_reader],
    cst_Reader_read_sexp_got_unexp = "Reader.read_sexp got unexpected eof",
    _ax_ = [0, 3456156],
    _av_ = [0, cst_src_reader0_ml, 794, 25],
    _au_ = [0, cst_src_reader0_ml, 765, 8],
    _at_ = [0, cst_src_reader0_ml, 755, 32],
    _ar_ = [0, cst_src_reader0_ml, 658, 6],
    _as_ = [0, cst_src_reader0_ml, 655, 6],
    _aq_ =
      [0,
       [11, "Reader.read_", [2, 0, [11, " with empty string", 0]]],
       "Reader.read_%s with empty string"],
    _ao_ = [0, cst_Continue],
    _ap_ = [0, cst_Stop],
    _am_ = [0, cst_reader],
    cst_read_one_chunk_at_a_time_g =
      "read_one_chunk_at_a_time got overflow in buffer len",
    _ak_ = [0, cst_reader],
    _al_ = [0, cst_len],
    cst_handle_chunk_returned_inva = "handle_chunk returned invalid `Consumed",
    _an_ = [0, cst_src_reader0_ml, 499, 31],
    _ah_ = [0, cst_Need_unknown],
    _aj_ = [0, cst_Need],
    _ai_ = [0, cst_Consumed],
    _ae_ = [0, cst_Eof],
    _af_ = [0, "Stopped"],
    _ag_ = [0, "Eof_with_unconsumed_data"],
    ___ = [0, cst_Continue],
    _ac_ = [0, cst_Stop],
    _ad_ = [0, "Stop_consumed"],
    _$_ = [0, cst_Need_unknown],
    _ab_ = [0, cst_Need],
    _aa_ = [0, cst_Consumed],
    _Z_ = [0, cst_src_reader0_ml, 458, 4],
    _X_ = [0, cst_src_reader0_ml, 452, 26],
    _Y_ = [0, cst_src_reader0_ml, 443, 21],
    _V_ = [0, cst_src_reader0_ml, 431, 25],
    _W_ = [0, cst_src_reader0_ml, 423, 21],
    cst_read$0 = cst_read$1,
    _S_ = [0, cst_src_reader0_ml, 334, 32],
    _R_ = [0, 1],
    _T_ = [0, cst_src_reader0_ml, 315, 27],
    _Q_ = [0, cst_reader],
    cst_reader_file_descriptor_was =
      "reader file descriptor was unexpectedly closed",
    _O_ = [0, cst_reader],
    _P_ = [0, cst_open_flags],
    cst_not_allowed_to_read_due_to =
      "not allowed to read due to file-descriptor flags",
    _U_ = [0, cst_src_reader0_ml, 244, 26],
    cst_read = cst_read$1,
    _N_ = [0, 523273847],
    _M_ = [0, 523273847],
    _K_ = [0, 654843454, 0],
    _L_ = [0, 0],
    _I_ = [0, cst_fd],
    _J_ = [0, "buf_len"],
    cst_Reader_create_got_non_posi = "Reader.create got non positive buf_len",
    _H_ = [0, cst_src_reader0_ml, 126, 4],
    _G_ = [0, cst_src_reader0_ml, 127, 4],
    _F_ = [0, cst_src_reader0_ml, 128, 4],
    _w_ = [0, "Not_now"],
    _x_ = [0, "Not_ever"],
    _v_ = [0, "Yes"],
    _s_ = [0, "bytes_read"],
    _t_ = [0, cst_fd],
    _u_ = [0, "close_finished"],
    _y_ = [0, "close_may_destroy_buf"],
    _z_ = [0, "last_read_time"],
    _A_ = [0, cst_open_flags],
    _B_ = [0, cst_pos],
    _C_ = [0, "available"],
    _D_ = [0, "state"],
    _E_ = [0, "id"],
    _p_ = [0, "Already_closed"],
    _q_ = [0, "Error"],
    _r_ = [0, cst_Ok],
    _n_ = [0, cst_Not_in_use],
    _o_ = [0, cst_Closed],
    _m_ = [0, cst_In_use],
    _k_ = [0, cst_Eof],
    _l_ = [0, cst_Ok],
    cst_t = cst_t$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Reader0 = cst_Async_unix_Reader0$0;
   function bin_shape_t(a){
    var _f3_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _f3_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    if(typeof param !== "number" && 17724 === param[1]){
     var args = param[2], size_args = caml_call1(size_of_a, args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_t(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 3456156);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 17724);
    return caml_call3(write_a, buf, pos$0, args);
   }
   function bin_writer_t(bin_writer_a){
    function _fZ_(v){
     var _f0_ = bin_writer_a[2];
     return function(_f1_, _f2_){return bin_write_t(_f0_, v, _f1_, _f2_);};
    }
    return [0, function(v){return bin_size_t(bin_writer_a[1], v);}, _fZ_];
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    if(17724 === vint){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, 17724, arg_1];
    }
    if(3456156 === vint) return 3456156;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{var _fX_ = bin_read_t(of_a, buf, pos_ref, vint); return _fX_;}
    catch(_fY_){
     var _fW_ = caml_wrap_exception(_fY_);
     if(_fW_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_fW_, 0);
    }
   }
   function bin_reader_t(bin_reader_a){
    function _fV_(buf, pos_ref, vtag){
     return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0(bin_reader_a[1], buf, pos_ref);
            },
            _fV_];
   }
   function bin_t(bin_a){
    var _fT_ = bin_reader_t(bin_a[3]), _fU_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _fU_, _fT_];
   }
   function t_of_sexp(of_a_001, sexp_005){
    if(0 === sexp_005[0]){
     var atom_003 = sexp_005[1];
     return caml_string_notequal(atom_003, cst_Eof)
             ? caml_string_notequal
                (atom_003, cst_Ok)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_007, sexp_005)
             : 3456156;
    }
    var _fS_ = sexp_005[1];
    if(! _fS_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_007, sexp_005);
    var match = _fS_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_007, sexp_005);
    var sexp_args_006 = _fS_[2], atom_003$0 = match[1];
    if(! caml_string_notequal(atom_003$0, cst_Eof))
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_007, sexp_005);
    if(caml_string_notequal(atom_003$0, cst_Ok))
     return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
    if(sexp_args_006 && ! sexp_args_006[2]){
     var
      arg0_009 = sexp_args_006[1],
      res0_010 = caml_call1(of_a_001, arg0_009);
     return [0, 17724, res0_010];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[26],
             error_source_007,
             atom_003$0,
             sexp_005);
   }
   function t_of_sexp$0(of_a_001, sexp_011){
    try{var _fQ_ = t_of_sexp(of_a_001, sexp_011); return _fQ_;}
    catch(_fR_){
     var _fP_ = caml_wrap_exception(_fR_);
     if(_fP_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_012, sexp_011);
     throw caml_maybe_attach_backtrace(_fP_, 0);
    }
   }
   function sexp_of_t(of_a_013, param){
    if(typeof param === "number") return _k_;
    var v_014 = param[2];
    return [1, [0, _l_, [0, caml_call1(of_a_013, v_014), 0]]];
   }
   function bind(a, f){
    if(typeof a === "number") return 3456156;
    var a$0 = a[2];
    return caml_call1(f, a$0);
   }
   var
    map =
      [0,
       -198771759,
       function(a, f){
        if(typeof a === "number") return 3456156;
        var a$0 = a[2];
        return [0, 17724, caml_call1(f, a$0)];
       }];
   function return$0(a){return [0, 17724, a];}
   var
    Z =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_writer_t,
       bin_read_t,
       bin_read_t$0,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       t_of_sexp$0,
       sexp_of_t,
       bind,
       map,
       return$0],
    bin_shape_t$0 = Z[1],
    bin_size_t$0 = Z[2],
    bin_write_t$0 = Z[3],
    bin_writer_t$0 = Z[4],
    bin_read_t$1 = Z[5],
    bin_read_t$2 = Z[6],
    bin_reader_t$0 = Z[7],
    bin_t$0 = Z[8],
    t_of_sexp$1 = Z[9],
    t_of_sexp$2 = Z[10],
    sexp_of_t$0 = Z[11],
    include = caml_call1(Base_Monad[1], [0, Z[12], Z[14], Z[13]]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11],
    Read_result =
      [0,
       Z,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp$1,
       t_of_sexp$2,
       sexp_of_t$0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax];
   function t_of_sexp$3(sexp_018){
    if(0 === sexp_018[0]){
     var atom_016 = sexp_018[1];
     return caml_string_notequal(atom_016, cst_Closed)
             ? caml_string_notequal
                (atom_016, cst_In_use)
               ? caml_string_notequal
                  (atom_016, cst_Not_in_use)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : -144639815
               : -985294899
             : -1025106484;
    }
    var _fO_ = sexp_018[1];
    if(! _fO_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_020, sexp_018);
    var match = _fO_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_020, sexp_018);
    var atom_016$0 = match[1];
    return caml_string_notequal(atom_016$0, cst_Closed)
            ? caml_string_notequal
               (atom_016$0, cst_In_use)
              ? caml_string_notequal
                 (atom_016$0, cst_Not_in_use)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[25], error_source_020, sexp_018)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_020, sexp_018)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_020, sexp_018);
   }
   function t_of_sexp$4(sexp_021){
    try{var _fM_ = t_of_sexp$3(sexp_021); return _fM_;}
    catch(_fN_){
     var _fL_ = caml_wrap_exception(_fN_);
     if(_fL_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_022, sexp_021);
     throw caml_maybe_attach_backtrace(_fL_, 0);
    }
   }
   function sexp_of_t$1(param){
    return -985294899 === param ? _m_ : -144639815 <= param ? _n_ : _o_;
   }
   var State = [0, t_of_sexp$3, t_of_sexp$4, sexp_of_t$1];
   function sexp_of_open_flags(param){
    if(typeof param === "number") return _p_;
    if(106380200 <= param[1]){
     var v_024 = param[2];
     return [1, [0, _q_, [0, caml_call1(Core[625], v_024), 0]]];
    }
    var v_023 = param[2];
    return [1, [0, _r_, [0, caml_call1(Core_unix[50][2], v_023), 0]]];
   }
   function open_flags(r){return r[11];}
   function last_read_time(r){return r[10];}
   function state(r){return r[8];}
   function available(r){return r[7];}
   function pos(r){return r[6];}
   function close_may_destroy_buf(r){return r[5];}
   function buf(r){return r[4];}
   function bytes_read(r){return r[3];}
   function id(r){return r[2];}
   function fd(r){return r[1];}
   function sexp_of_t$2(t){return caml_call1(Async_unix_Fd[3], t[1]);}
   function sexp_of_t_internals(param){
    var
     id = param[2],
     fd = param[1],
     bytes_read = param[3],
     close_may_destroy_buf = param[5],
     pos = param[6],
     available = param[7],
     state = param[8],
     close_finished = param[9],
     last_read_time = param[10],
     open_flags = param[11];
    function unless_testing(x){
     return caml_call2(Core_Option[60], 1 - Ppx_inline_test_lib[1], x);
    }
    var
     match = unless_testing(id),
     match$0 = unless_testing(open_flags),
     match$1 = unless_testing(last_read_time),
     match$2 = unless_testing(fd),
     match$3 =
       [0, [1, [0, _s_, [0, caml_call1(Core_Int63[103], bytes_read), 0]]], 0];
    if(match$2)
     var
      v = match$2[1],
      _fD_ =
        [0, [1, [0, _t_, [0, caml_call1(Async_unix_Fd[2], v), 0]]], match$3];
    else
     var _fD_ = match$3;
    var
     _fE_ =
       [0,
        [1,
         [0,
          _u_,
          [0, caml_call2(Async_kernel_Ivar[9], Core[620], close_finished), 0]]],
        _fD_],
     _fF_ = 0,
     _fG_ =
       4448519 === close_may_destroy_buf
        ? _v_
        : 381789322 <= close_may_destroy_buf ? _w_ : _x_,
     match$4 = [0, [1, [0, _y_, [0, _fG_, _fF_]]], _fE_];
    if(match$1)
     var
      v$0 = match$1[1],
      match$5 =
        [0,
         [1, [0, _z_, [0, caml_call1(Time_float_unix[60], v$0), 0]]],
         match$4];
    else
     var match$5 = match$4;
    if(match$0)
     var
      v$1 = match$0[1],
      _fH_ = [0, [1, [0, _A_, [0, sexp_of_open_flags(v$1), 0]]], match$5];
    else
     var _fH_ = match$5;
    var
     _fI_ = [0, [1, [0, _B_, [0, caml_call1(Core[389], pos), 0]]], _fH_],
     _fJ_ = [0, [1, [0, _C_, [0, caml_call1(Core[389], available), 0]]], _fI_],
     match$6 = [0, [1, [0, _D_, [0, caml_call1(State[3], state), 0]]], _fJ_];
    if(match)
     var
      v$2 = match[1],
      _fK_ = [0, [1, [0, _E_, [0, caml_call1(Id[10], v$2), 0]]], match$6];
    else
     var _fK_ = match$6;
    return [1, _fK_];
   }
   function invariant(t){
    if(! caml_call2(Async_unix_Import[2], 0, t[6]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
    if(! caml_call2(Async_unix_Import[2], 0, t[7]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
    var _fC_ = caml_call1(Core_Bigstring[21], t[4]);
    if(caml_call2(Async_unix_Import[2], t[6] + t[7] | 0, _fC_)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
   }
   function create(buf_len, fd){
    if(buf_len){
     var buf_len$0 = buf_len[1];
     if(caml_call2(Async_unix_Import[4], buf_len$0, 0))
      var buf_len$1 = buf_len$0;
     else
      var
       _fy_ = [0, [1, [0, _I_, [0, caml_call1(Async_unix_Fd[2], fd), 0]]], 0],
       _fz_ =
         [0, [1, [0, _J_, [0, caml_call1(Core[389], buf_len$0), 0]]], _fy_],
       _fA_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Reader_create_got_non_posi),
           _fz_]],
       buf_len$1 = caml_call1(Core[261], _fA_);
     var buf_len$2 = buf_len$1;
    }
    else{
     var match = caml_call1(Async_unix_Fd[8], fd);
     a:
     {
      if(typeof match === "number" && 1 !== match){var _fB_ = 32768; break a;}
      var _fB_ = 131072;
     }
     var buf_len$2 = _fB_;
    }
    function _ft_(file_descr){return caml_call1(Core_unix[51], file_descr);}
    var
     open_flags = caml_call3(Async_unix_Fd[31], 0, fd, _ft_),
     _fu_ = caml_call1(Async_unix_Raw_scheduler[18], 0),
     _fv_ = caml_call1(Async_kernel_Ivar[12], 0),
     _fw_ = caml_call1(Core_Bigstring[121], buf_len$2),
     _fx_ = Core_Int63[16];
    return [0,
            fd,
            caml_call1(Id[45], 0),
            _fx_,
            _fw_,
            4448519,
            0,
            0,
            -144639815,
            _fv_,
            _fu_,
            open_flags];
   }
   function of_in_channel(ic, kind){
    return create(0, caml_call2(Async_unix_Fd[36], ic, kind));
   }
   function open_file(buf_len, file){
    function _fr_(fd){return create(buf_len, fd);}
    var _fs_ = caml_call4(Async_unix_Unix_syscalls[9], 0, _L_, file, _K_);
    return caml_call2(Async_unix_Import[33][3], _fs_, _fr_);
   }
   var
    stdin =
      [246,
       function(param){return create(0, caml_call1(Async_unix_Fd[19], 0));}];
   function close_finished(t){return caml_call1(Async_kernel_Ivar[19], t[9]);}
   function is_closed(t){return -985294899 <= t[8] ? 0 : 1;}
   var empty_buf = caml_call1(Core_Bigstring[121], 0);
   function destroy(t){
    runtime.bigstring_destroy_stub(t[4]);
    t[4] = empty_buf;
    return 0;
   }
   function close(t){
    if(-985294899 <= t[8]){
     t[8] = -1025106484;
     var
      _fp_ =
        function(param){return caml_call2(Async_kernel_Ivar[14], t[9], 0);},
      _fq_ = caml_call2(Async_unix_Unix_syscalls[16], 0, t[1]);
     caml_call2(Async_unix_Import[22], _fq_, _fp_);
     t[6] = 0;
     t[7] = 0;
     if(4448519 === t[5]) destroy(t);
    }
    return close_finished(t);
   }
   function with_close(t, f){
    function _fo_(param){return close(t);}
    return caml_call8(Async_kernel_Monitor[23], 0, 0, 0, 0, _M_, 0, f, _fo_);
   }
   function with_reader_exclusive(t, f){
    function _fl_(param){
     function _fn_(param){
      if(1 - caml_call1(Async_unix_Fd[16], t[1]))
       caml_call2(Async_unix_Unix_syscalls[27], 0, t[1]);
      return caml_call1(Async_unix_Import[30], 0);
     }
     return caml_call8(Async_kernel_Monitor[23], 0, 0, 0, 0, _N_, 0, f, _fn_);
    }
    var _fm_ = caml_call3(Async_unix_Unix_syscalls[24], 0, t[1], 0);
    return caml_call2(Async_unix_Import[33][2], _fm_, _fl_);
   }
   function with_file(buf_len, opt, file, f){
    if(opt) var sth = opt[1], exclusive = sth; else var exclusive = 0;
    function _fj_(t){
     return with_close
             (t,
              function(param){
               return exclusive
                       ? with_reader_exclusive
                         (t, function(param){return caml_call1(f, t);})
                       : caml_call1(f, t);
              });
    }
    var _fk_ = open_file(buf_len, file);
    return caml_call2(Async_unix_Import[33][2], _fk_, _fj_);
   }
   function read_syscall_with_timestamp(fd, pos, len, buf){
    function _fc_(file_descr){
     var match = caml_call1(Async_unix_Io_uring_raw_single[1], 0);
     if(match){
      var
       uring = match[1],
       _fd_ = Core_Result[46],
       _fe_ =
         function(res){return [0, res, caml_call1(Time_float_unix[15], 0)];},
       _ff_ = function(_fi_){return caml_call2(_fd_, _fi_, _fe_);},
       _fg_ =
         caml_call6
          (Async_unix_Io_uring[6],
           uring,
           0,
           file_descr,
           [0, pos],
           [0, len],
           buf);
      return caml_call2(Async_unix_Import[32], _fg_, _ff_);
     }
     function _fh_(param){
      var
       res =
         caml_call5
          (Bigstring_unix[126], 0, file_descr, [0, pos], [0, len], buf);
      return [0, res, caml_call1(Time_float_unix[15], 0)];
     }
     return caml_call2(Async_unix_In_thread[6], cst_read, _fh_);
    }
    return caml_call2(Async_unix_Fd[25], fd, _fc_);
   }
   function get_data(t){
    function _eQ_(result){
     function eof(param){
      return caml_call2(Async_kernel_Ivar[14], result, 3456156);
     }
     var _eR_ = t[8], open_flags = t[11];
     a:
     if(-985294899 === _eR_){
      if(typeof open_flags !== "number"){
       var _eS_ = open_flags[1];
       if(17724 !== _eS_ && 106380200 !== _eS_) break a;
       if(106380200 <= open_flags[1])
        var can_read_fd = 0;
       else
        var
         open_flags$0 = open_flags[2],
         can_read_fd = caml_call1(Core_unix[50][53], open_flags$0);
       if(1 - can_read_fd){
        var
         _eT_ = [0, [1, [0, _O_, [0, sexp_of_t$2(t), 0]]], 0],
         _eU_ =
           [0, [1, [0, _P_, [0, sexp_of_open_flags(open_flags), 0]]], _eT_],
         _eV_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_not_allowed_to_read_due_to),
             _eU_]];
        caml_call1(Core[261], _eV_);
       }
       var
        ebadf =
          function(param){
           var
            _fa_ = [0, [1, [0, _Q_, [0, sexp_of_t$2(t), 0]]], 0],
            _fb_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_reader_file_descriptor_was),
                _fa_]];
           return caml_call1(Core[261], _fb_);
          },
        finish =
          function(res, handle){
           if(typeof res === "number") return eof(0);
           if(106380200 > res[1]){
            var
             match = res[2],
             read_time = match[2],
             bytes_read = match[1],
             _e$_ = caml_call1(Core_Int63[72], bytes_read);
            t[3] = caml_call2(Core_Int63[19], t[3], _e$_);
            return caml_call2(Async_unix_Import[3], bytes_read, 0)
                    ? eof(0)
                    : (t
                       [6]
                      = 0,
                      t[7] = t[7] + bytes_read | 0,
                      t[10] = read_time,
                      caml_call2(Async_kernel_Ivar[14], result, 17724));
           }
           var exn = res[2];
           a:
           {
            b:
            {
             if(exn[1] === Async_unix_Unix_syscalls[153]){
              var _e9_ = exn[2];
              if(typeof _e9_ === "number" && 3 === _e9_) return ebadf(0);
             }
             else if(exn[1] === Bigstring_unix[125]){
              if(0 !== exn[2]) break b;
              if(exn[3] === Stdlib[12]) break a;
              break b;
             }
             if(exn[1] === Async_unix_Unix_syscalls[153]){
              var _e__ = exn[2];
              if(typeof _e__ === "number"){
               if(31 !== _e__){
                if(52 > _e__) break b;
                switch(_e__ - 52 | 0){
                  case 0:
                  case 1:
                  case 2:
                  case 4:
                  case 10:
                  case 13: break;
                  default: break b;
                }
               }
               break a;
              }
             }
            }
            return caml_call1(handle, exn);
           }
           return eof(0);
          },
        buf = t[4],
        _eW_ = caml_call2(Async_unix_Import[4], t[7], 0),
        _eX_ = _eW_ ? caml_call2(Async_unix_Import[4], t[6], 0) : _eW_;
       if(_eX_){
        caml_call5(Core_Bigstring[22], buf, t[6], buf, 0, t[7]);
        t[6] = 0;
       }
       var pos = t[7], len = caml_call1(Core_Bigstring[21], buf) - pos | 0;
       if(caml_call1(Async_unix_Fd[9], t[1])){
        var
         loop =
           function(param){
            function _e2_(param){
             if(-102231997 !== param)
              return -3286312 <= param ? ebadf(0) : eof(0);
             var _e4_ = t[8];
             if(-985294899 === _e4_){
              var
               _e5_ =
                 function(exn){
                  a:
                  if(exn[1] === Async_unix_Unix_syscalls[153]){
                   var _e8_ = exn[2];
                   if(typeof _e8_ === "number"){
                    if(2 !== _e8_ && 37 !== _e8_) break a;
                    return loop(0);
                   }
                  }
                  throw caml_maybe_attach_backtrace(exn, 0);
                 },
               _e6_ =
                 function(file_descr){
                  var
                   _e7_ =
                     caml_call4
                      (Bigstring_unix[131], file_descr, [0, pos], [0, len], buf),
                   res = caml_call2(Core_unix[5][2][12], _e7_, cst_read$0);
                  return [0, res, caml_call1(Async_unix_Raw_scheduler[18], 0)];
                 };
              return finish
                      (caml_call3(Async_unix_Fd[31], _R_, t[1], _e6_), _e5_);
             }
             if(-144639815 <= _e4_)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _S_], 1);
             return eof(0);
            }
            var _e3_ = caml_call2(Async_unix_Fd[28], t[1], 914388854);
            return caml_call2(Async_unix_Import[27], _e3_, _e2_);
           };
        return loop(0);
       }
       if(4448519 === t[5]) t[5] = 381789322;
       var
        _eY_ =
          function(res){
           if(381789322 <= t[5]) t[5] = 4448519;
           var _e0_ = t[8];
           if(-985294899 === _e0_)
            return finish
                    (res,
                     function(_e1_){throw caml_maybe_attach_backtrace(_e1_, 0);});
           if(-144639815 <= _e0_)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
           destroy(t);
           return eof(0);
          },
        _eZ_ = read_syscall_with_timestamp(t[1], pos, len, buf);
       return caml_call2(Async_unix_Import[27], _eZ_, _eY_);
      }
     }
     else if(-144639815 <= _eR_)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
     return eof(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _eQ_);
   }
   function maybe_grow_buf_len(t, desired){
    var
     buf_len = caml_call1(Core_Bigstring[21], t[4]),
     _eO_ = caml_call2(Async_unix_Import[5], buf_len, desired);
    if(_eO_){
     var
      new_buf_len =
        caml_call2(Async_unix_Import[5], desired, 2 * buf_len | 0)
         ? 2 * buf_len | 0
         : caml_call2
            (Async_unix_Import[5], desired, 8 * buf_len | 0)
           ? desired
           : 4 * buf_len | 0,
      new_buf = caml_call1(Core_Bigstring[121], new_buf_len);
     if(caml_call2(Async_unix_Import[4], t[7], 0))
      caml_call5(Core_Bigstring[22], t[4], t[6], new_buf, 0, t[7]);
     t[4] = new_buf;
     t[6] = 0;
     var _eP_ = 0;
    }
    else
     var _eP_ = _eO_;
    return _eP_;
   }
   function get_data_until(t, available_at_least){
    if(caml_call2(Async_unix_Import[1], t[7], available_at_least))
     return caml_call1(Async_unix_Import[30], 17724);
    maybe_grow_buf_len(t, available_at_least);
    if(caml_call2(Async_unix_Import[4], t[6], 0)){
     caml_call5(Core_Bigstring[22], t[4], t[6], t[4], 0, t[7]);
     t[6] = 0;
    }
    function loop(param){
     function _eL_(result){
      if(caml_call2(Async_unix_Import[1], t[7], available_at_least))
       return caml_call1(Async_unix_Import[30], 17724);
      if(3456156 <= result)
       return caml_call1(Async_unix_Import[30], [0, 3456156, t[7]]);
      var _eN_ = caml_call1(Core_Bigstring[21], t[4]);
      if(caml_call2(Async_unix_Import[3], t[7], _eN_))
       maybe_grow_buf_len(t, available_at_least);
      return loop(0);
     }
     var _eM_ = get_data(t);
     return caml_call2(Async_unix_Import[33][2], _eM_, _eL_);
    }
    return loop(0);
   }
   function with_nonempty_buffer(t, f){
    var _eF_ = t[8];
    if(-985294899 !== _eF_){
     if(-144639815 <= _eF_)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
     var _eJ_ = caml_call1(f, 3456156);
     return caml_call1(Async_unix_Import[30], _eJ_);
    }
    if(caml_call2(Async_unix_Import[4], t[7], 0)){
     var _eG_ = caml_call1(f, 17724);
     return caml_call1(Async_unix_Import[30], _eG_);
    }
    function _eH_(ok_or_eof){
     var _eK_ = t[8];
     if(-985294899 === _eK_) return caml_call1(f, ok_or_eof);
     if(-144639815 <= _eK_)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
     return caml_call1(f, 3456156);
    }
    var _eI_ = get_data(t);
    return caml_call2(Async_unix_Import[33][3], _eI_, _eH_);
   }
   function with_nonempty_buffer$0(opt, t, f){
    if(opt) var sth = opt[1], force_refill = sth; else var force_refill = 0;
    var _eB_ = t[8];
    if(-985294899 === _eB_){
     if(! force_refill && caml_call2(Async_unix_Import[4], t[7], 0))
      return caml_call1(f, 17724);
     var
      _eC_ =
        function(ok_or_eof){
         var _eE_ = t[8];
         if(-985294899 === _eE_) return caml_call1(f, ok_or_eof);
         if(-144639815 <= _eE_)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
         return caml_call1(f, 3456156);
        },
      _eD_ = get_data(t);
     return caml_call2(Async_unix_Import[27], _eD_, _eC_);
    }
    if(-144639815 <= _eB_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
    return caml_call1(f, 3456156);
   }
   function consume(t, amount){
    if
     (caml_call2(Async_unix_Import[2], 0, amount)
      && caml_call2(Async_unix_Import[2], amount, t[7])){
     t[6] = t[6] + amount | 0;
     t[7] = t[7] - amount | 0;
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
   }
   function sexp_of_handle_chunk_result(of_a_031, param){
    if(typeof param === "number") return ___;
    var _ez_ = param[1];
    if(116552 === _ez_){
     var
      v_038 = param[2],
      arg1_041 = v_038[2],
      arg0_040 = v_038[1],
      res0_042 = caml_call1(Core[389], arg0_040),
      _eA_ = 0;
     if(typeof arg1_041 === "number")
      var res1_043 = _$_;
     else
      var
       v_039 = arg1_041[2],
       res1_043 = [1, [0, _ab_, [0, caml_call1(Core[389], v_039), 0]]];
     return [1, [0, _aa_, [0, [1, [0, res0_042, [0, res1_043, 0]]], _eA_]]];
    }
    if(926227490 <= _ez_){
     var v_032 = param[2];
     return [1, [0, _ac_, [0, caml_call1(of_a_031, v_032), 0]]];
    }
    var
     v_033 = param[2],
     arg1_035 = v_033[2],
     arg0_034 = v_033[1],
     res0_036 = caml_call1(of_a_031, arg0_034),
     res1_037 = caml_call1(Core[389], arg1_035);
    return [1, [0, _ad_, [0, [1, [0, res0_036, [0, res1_037, 0]]], 0]]];
   }
   function sexp_of_read_one_chunk_at_a_ti(of_a_044, param){
    if(typeof param === "number") return _ae_;
    if(280164845 <= param[1]){
     var v_045 = param[2];
     return [1, [0, _af_, [0, caml_call1(of_a_044, v_045), 0]]];
    }
    var v_046 = param[2];
    return [1, [0, _ag_, [0, caml_call1(Core[558], v_046), 0]]];
   }
   function sexp_of_consumed(param){
    var
     v_047 = param[2],
     arg1_050 = v_047[2],
     arg0_049 = v_047[1],
     res0_051 = caml_call1(Core[389], arg0_049),
     _ey_ = 0;
    if(typeof arg1_050 === "number")
     var res1_052 = _ah_;
    else
     var
      v_048 = arg1_050[2],
      res1_052 = [1, [0, _aj_, [0, caml_call1(Core[389], v_048), 0]]];
    return [1, [0, _ai_, [0, [1, [0, res0_051, [0, res1_052, 0]]], _ey_]]];
   }
   function read_one_chunk_at_a_time(t, handle_chunk){
    t[5] = -859789014;
    function _ej_(final_result){
     function loop(force_refill){
      return with_nonempty_buffer$0
              ([0, force_refill],
               t,
               function(param){
                if(3456156 <= param){
                 var
                  result =
                    caml_call2(Async_unix_Import[4], t[7], 0)
                     ? [0,
                       -596537294,
                       caml_call3(Core_Bigstring[16], [0, t[6]], [0, t[7]], t[4])]
                     : 3456156;
                 return caml_call2
                         (Async_kernel_Ivar[14], final_result, result);
                }
                var len = t[7];
                function continue$0(z){
                 var _ek_ = t[8];
                 if(-985294899 !== _ek_){
                  if(-144639815 <= _ek_)
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _an_], 1);
                  return caml_call2
                          (Async_kernel_Ivar[14], final_result, 3456156);
                 }
                 if(typeof z === "number"){consume(t, len); return loop(1);}
                 var _el_ = z[1];
                 if(116552 !== _el_){
                  if(926227490 <= _el_){
                   var a = z[2];
                   consume(t, len);
                   return caml_call2
                           (Async_kernel_Ivar[14], final_result, [0, 280164845, a]);
                  }
                  var
                   match$0 = z[2],
                   consumed$0 = match$0[2],
                   a$0 = match$0[1];
                  consume(t, consumed$0);
                  return caml_call2
                          (Async_kernel_Ivar[14], final_result, [0, 280164845, a$0]);
                 }
                 var
                  match = z[2],
                  need = match[2],
                  consumed = match[1],
                  _em_ = caml_call2(Async_unix_Import[5], consumed, 0);
                 if(_em_)
                  var _en_ = _em_;
                 else{
                  var _ev_ = caml_call2(Async_unix_Import[4], consumed, len);
                  if(_ev_)
                   var _en_ = _ev_;
                  else if(typeof need === "number")
                   var _en_ = 0;
                  else
                   var
                    need$1 = need[2],
                    _ew_ = caml_call2(Async_unix_Import[5], need$1, 0),
                    _ex_ =
                      _ew_
                      ||
                       caml_call2(Async_unix_Import[2], consumed + need$1 | 0, len),
                    _en_ = _ex_;
                 }
                 if(_en_){
                  var
                   _eo_ = [0, [1, [0, _ak_, [0, sexp_of_t$2(t), 0]]], 0],
                   _ep_ =
                     [0,
                      [1, [0, _al_, [0, caml_call1(Core[389], len), 0]]],
                      _eo_],
                   _eq_ = [0, sexp_of_consumed(z), _ep_],
                   _er_ =
                     [1,
                      [0,
                       caml_call1
                        (Sexplib0_Sexp_conv[7], cst_handle_chunk_returned_inva),
                       _eq_]];
                  caml_call1(Core[261], _er_);
                 }
                 consume(t, consumed);
                 var buf_len = caml_call1(Core_Bigstring[21], t[4]);
                 if(typeof need === "number")
                  var
                   new_len =
                     caml_call2(Async_unix_Import[3], t[7], buf_len)
                      ? buf_len * 2 | 0
                      : buf_len;
                 else
                  var
                   need$0 = need[2],
                   _eu_ =
                     caml_call2(Async_unix_Import[4], need$0, buf_len)
                      ? caml_call2(Core_Int[90], need$0, buf_len * 2 | 0)
                      : buf_len,
                   new_len = _eu_;
                 if(caml_call2(Async_unix_Import[5], new_len, 0)){
                  var
                   _es_ =
                     [0, [1, [0, _am_, [0, sexp_of_t_internals(t), 0]]], 0],
                   _et_ =
                     [1,
                      [0,
                       caml_call1
                        (Sexplib0_Sexp_conv[7], cst_read_one_chunk_at_a_time_g),
                       _es_]];
                  caml_call1(Core[261], _et_);
                 }
                 if(caml_call2(Async_unix_Import[4], new_len, buf_len)){
                  var new_buf = caml_call1(Core_Bigstring[121], new_len);
                  if(caml_call2(Async_unix_Import[4], t[7], 0))
                   caml_call5(Core_Bigstring[22], t[4], t[6], new_buf, 0, t[7]);
                  t[4] = new_buf;
                  t[6] = 0;
                 }
                 return loop(1);
                }
                var
                 deferred = caml_call3(handle_chunk, t[4], t[6], len),
                 match = caml_call1(Async_kernel_Deferred[5], deferred);
                if(! match)
                 return caml_call2
                         (Async_unix_Import[27], deferred, continue$0);
                var result$0 = match[1];
                return continue$0(result$0);
               });
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _ej_);
   }
   function sexp_of_handle_iobuf_result(of_a_053, param){
    if(typeof param === "number") return _ao_;
    var v_054 = param[2];
    return [1, [0, _ap_, [0, caml_call1(of_a_053, v_054), 0]]];
   }
   function read_one_iobuf_at_a_time(t, handle_chunk){
    var iobuf = caml_call3(Iobuf[12], 0, 0, t[4]);
    return read_one_chunk_at_a_time
            (t,
             function(bstr, pos, len){
              caml_call4(Iobuf[78][12], iobuf, pos, len, bstr);
              function _eh_(handle_result){
               if(caml_call1(Iobuf[32], iobuf)) return handle_result;
               var consumed = len - caml_call1(Iobuf[29], iobuf) | 0;
               if(typeof handle_result === "number")
                return [0, 116552, [0, consumed, 1056277377]];
               var a = handle_result[2];
               return [0, -686730715, [0, a, consumed]];
              }
              var _ei_ = caml_call1(handle_chunk, iobuf);
              return caml_call2(Async_unix_Import[33][3], _ei_, _eh_);
             });
   }
   function Read(S, Name){
    function read_available(t, s){
     var
      _eg_ = caml_call1(S[6], s),
      len = caml_call2(Core_Int[89], t[7], _eg_);
     caml_call4(S[38], s, t[4], t[6], len);
     consume(t, len);
     return len;
    }
    function read(t, s){
     var _ef_ = caml_call1(S[6], s);
     if(caml_call2(Async_unix_Import[3], _ef_, 0))
      caml_call3(Core[250], _aq_, Name[1], 0);
     return with_nonempty_buffer
             (t,
              function(param){
               return 3456156 <= param
                       ? 3456156
                       : [0, 17724, read_available(t, s)];
              });
    }
    function really_read(t, s){
     function _eb_(result){
      function loop(s, amount_read){
       var _ec_ = caml_call1(S[6], s);
       if(caml_call2(Async_unix_Import[3], _ec_, 0))
        return caml_call2(Async_kernel_Ivar[14], result, 17724);
       function _ed_(param){
        if(typeof param === "number")
         return caml_call2
                 (Async_kernel_Ivar[14], result, [0, 3456156, amount_read]);
        var len = param[2];
        return loop(caml_call2(S[46], s, len), amount_read + len | 0);
       }
       var _ee_ = read(t, s);
       return caml_call2(Async_unix_Import[27], _ee_, _ed_);
      }
      return loop(s, 0);
     }
     return caml_call1(Async_kernel_Deferred[3], _eb_);
    }
    return [0, read_available, read, really_read];
   }
   var
    Read_substring = Read(Core_Substring, [0, name]),
    read_substring_available = Read_substring[1],
    read_substring = Read_substring[2],
    really_read_substring = Read_substring[3],
    Read_bigsubstring = Read(Core_Bigsubstring, [0, name$0]),
    read_bigsubstring = Read_bigsubstring[2],
    really_read_bigsubstring = Read_bigsubstring[3];
   function really_read_bigstring(t, bigstring){
    return caml_call2
            (really_read_bigsubstring,
             t,
             caml_call3(Core_Bigsubstring[32], 0, 0, bigstring));
   }
   function peek_available(t, len){
    var _d$_ = t[4], _ea_ = [0, caml_call2(Core_Int[89], len, t[7])];
    return caml_call3(Core_Bigstring[16], [0, t[6]], _ea_, _d$_);
   }
   function peek(t, len){
    function _d9_(param){
     if(typeof param === "number"){
      if(caml_call2(Async_unix_Import[1], t[7], len))
       return [0,
               17724,
               caml_call3(Core_Bigstring[16], [0, t[6]], [0, len], t[4])];
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ar_], 1);
     }
     if(caml_call2(Async_unix_Import[5], t[7], len)) return 3456156;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1);
    }
    var _d__ = get_data_until(t, len);
    return caml_call2(Async_unix_Import[33][3], _d__, _d9_);
   }
   function read_available(t, pos, len, s){
    return caml_call2
            (read_substring_available,
             t,
             caml_call3(Core_Substring[32], pos, len, s));
   }
   function read(t, pos, len, s){
    return caml_call2
            (read_substring, t, caml_call3(Core_Substring[32], pos, len, s));
   }
   function really_read(t, pos, len, s){
    return caml_call2
            (really_read_substring,
             t,
             caml_call3(Core_Substring[32], pos, len, s));
   }
   function read_char(t){
    return with_nonempty_buffer
            (t,
             function(param){
              if(3456156 <= param) return 3456156;
              var c = caml_ba_get_1(t[4], t[6]);
              consume(t, 1);
              return [0, 17724, c];
             });
   }
   function first_char(t, p, available){
    var limit = t[6] + available | 0, buf = t[4];
    if(892857089 <= p[1]){
     var
      p$0 = p[2],
      _d6_ =
        function(param){
         var pos$1 = t[6], pos = pos$1;
         for(;;){
          if(caml_call2(Async_unix_Import[3], pos, limit)) return 0;
          if(caml_call1(p$0, caml_ba_get_1(buf, pos))) return [0, pos];
          var pos$0 = pos + 1 | 0, pos = pos$0;
         }
        };
     return caml_call2(Core_Or_error[37], 0, _d6_);
    }
    var ch = p[2], pos$1 = t[6], pos = pos$1;
    for(;;){
     if(caml_call2(Async_unix_Import[3], pos, limit))
      var _d8_ = 0;
     else{
      var _d7_ = caml_ba_get_1(buf, pos);
      if(! caml_call2(Base_Char[31][3], ch, _d7_)){
       var pos$0 = pos + 1 | 0, pos = pos$0;
       continue;
      }
      var _d8_ = [0, pos];
     }
     return [0, _d8_];
    }
   }
   function read_until_gen(t, p, keep_delim, max, k){
    function loop(ac, total){
     return with_nonempty_buffer$0
             (0,
              t,
              function(param){
               if(3456156 <= param){
                if(caml_call1(Core_List[18], ac))
                 var _d2_ = 3456156;
                else
                 var
                  _d3_ = caml_call1(Core_List[59], ac),
                  _d2_ =
                    [0, -256425003, caml_call1(Core_Bigsubstring[40], _d3_)];
                return caml_call1(k, [0, _d2_]);
               }
               function concat_helper(ss, lst){
                var _d5_ = caml_call2(Core_List[60], lst, [0, ss, 0]);
                return caml_call1(Core_Bigsubstring[40], _d5_);
               }
               if(max){
                var max$0 = max[1];
                if
                 (caml_call2
                   (Async_unix_Import[5], t[7], (max$0 - total | 0) + 1 | 0))
                 var need_more_bytes_to_exceed_max = 1, available = t[7];
                else
                 var
                  need_more_bytes_to_exceed_max = 0,
                  available = (max$0 - total | 0) + 1 | 0;
               }
               else
                var
                 available$0 = t[7],
                 need_more_bytes_to_exceed_max = 1,
                 available = available$0;
               var e = first_char(t, p, available);
               if(0 !== e[0]) return caml_call1(k, e);
               var match = e[1];
               if(match){
                var
                 pos = match[1],
                 amount_consumed = (pos + 1 | 0) - t[6] | 0,
                 len = keep_delim ? amount_consumed : amount_consumed - 1 | 0,
                 ss =
                   caml_call3(Core_Bigsubstring[32], [0, t[6]], [0, len], t[4]);
                consume(t, amount_consumed);
                var res = concat_helper(ss, ac);
                return caml_call1(k, [0, [0, 17724, res]]);
               }
               if(need_more_bytes_to_exceed_max){
                var
                 len$0 = t[7],
                 total$0 = total + len$0 | 0,
                 ss$0 =
                   caml_call3
                    (Core_Bigsubstring[32], [0, t[6]], [0, len$0], t[4]),
                 _d4_ = caml_call1(Core_Bigstring[21], t[4]);
                t[4] = caml_call1(Core_Bigstring[121], _d4_);
                t[6] = 0;
                t[7] = 0;
                return loop([0, ss$0, ac], total$0);
               }
               var
                ss$1 =
                  caml_call3
                   (Core_Bigsubstring[32], [0, t[6]], [0, available], t[4]);
               consume(t, available);
               var res$0 = concat_helper(ss$1, ac);
               return caml_call1(k, [0, [0, 338397998, res$0]]);
              });
    }
    return loop(0, 0);
   }
   function read_until(t, pred, keep_delim, k){
    return read_until_gen
            (t,
             pred,
             keep_delim,
             0,
             function(x){
              if(0 !== x[0]) return caml_call1(k, x);
              var _d1_ = x[1];
              if(typeof _d1_ !== "number" && 338397998 <= _d1_[1])
               throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
              return caml_call1(k, x);
             });
   }
   function read_line_gen(t, k){
    return read_until
            (t,
             line_delimiter_pred,
             0,
             function(param){
              if(0 !== param[0])
               throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
              var x = param[1];
              if(typeof x !== "number" && 17724 <= x[1]){
               var line = x[2], len = caml_ml_string_length(line);
               a:
               {
                if(caml_call2(Async_unix_Import[1], len, 1)){
                 var _dZ_ = runtime.caml_string_get(line, len - 1 | 0);
                 if(caml_call2(Base_Char[31][3], _dZ_, 13)){
                  var _d0_ = caml_call3(Core_String[3], line, 0, len - 1 | 0);
                  break a;
                 }
                }
                var _d0_ = line;
               }
               return caml_call1(k, [0, 17724, _d0_]);
              }
              return caml_call1(k, x);
             });
   }
   function read_line(t){
    function _dY_(result){
     return read_line_gen
             (t,
              function(z){
               a:
               {
                if(typeof z !== "number" && 17724 > z[1]){
                 var str = z[2], z$0 = [0, 17724, str];
                 break a;
                }
                var z$0 = z;
               }
               return caml_call2(Async_kernel_Ivar[14], result, z$0);
              });
    }
    return caml_call1(Async_kernel_Deferred[3], _dY_);
   }
   function really_read_line(wait_time, t){
    function _dS_(result){
     function fill_result(ac){
      if(! ac) return caml_call2(Async_kernel_Ivar[14], result, 0);
      var
       _dW_ = caml_call1(Core_List[59], ac),
       _dX_ = [0, caml_call2(Core_String[46], 0, _dW_)];
      return caml_call2(Async_kernel_Ivar[14], result, _dX_);
     }
     function continue$0(ac){
      var _dT_ = t[8];
      if(-985294899 === _dT_){
       var
        _dU_ = function(param){return loop(ac);},
        _dV_ = caml_call1(Async_unix_Clock[4], wait_time);
       return caml_call2(Async_unix_Import[27], _dV_, _dU_);
      }
      if(-144639815 <= _dT_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
      return fill_result(ac);
     }
     function loop(ac){
      return read_line_gen
              (t,
               function(param){
                if(typeof param === "number") return continue$0(ac);
                if(17724 <= param[1]){
                 var line = param[2];
                 return fill_result([0, line, ac]);
                }
                var str = param[2];
                return continue$0([0, str, ac]);
               });
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _dS_);
   }
   var space = caml_call3(Core_Bigstring[14], 0, 0, cst);
   function gen_read_sexp(parse_pos, t, sexp_kind, k){
    function loop(parse_fun){
     return with_nonempty_buffer$0
             (0,
              t,
              function(param){
               if(3456156 <= param){
                var
                 _dO_ =
                   function(param){return caml_call3(parse_fun, 0, 1, space);},
                 e = caml_call2(Core_Or_error[37], 0, _dO_);
                if(0 !== e[0]) return caml_call1(k, e);
                var match = e[1];
                if(0 === match[0]){
                 var parse_pos = match[2], sexp = match[1];
                 return caml_call1(k, [0, [0, 17724, [0, sexp, parse_pos]]]);
                }
                if(! match[1]) return caml_call1(k, _ax_);
                var
                 _dP_ = [0, [1, [0, _aw_, [0, sexp_of_t$2(t), 0]]], 0],
                 _dQ_ =
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_Reader_read_sexp_got_unexp),
                     _dP_]];
                return caml_call1(Core[261], _dQ_);
               }
               function _dR_(param){
                return caml_call3(parse_fun, t[6], t[7], t[4]);
               }
               var e$0 = caml_call2(Core_Or_error[37], 0, _dR_);
               if(0 !== e$0[0]) return caml_call1(k, e$0);
               var match$0 = e$0[1];
               if(0 === match$0[0]){
                var parse_pos$0 = match$0[2], sexp$0 = match$0[1];
                consume(t, parse_pos$0[4] - t[6] | 0);
                return caml_call1
                        (k, [0, [0, 17724, [0, sexp$0, parse_pos$0]]]);
               }
               var parse_fun$0 = match$0[2];
               t[7] = 0;
               return loop(parse_fun$0);
              });
    }
    function parse(pos, len, buf){
     if(parse_pos)
      var
       parse_pos$0 = parse_pos[1],
       parse_pos$1 = caml_call2(Sexplib_Sexp[12][2], parse_pos$0, pos);
     else
      var parse_pos$1 = caml_call5(Sexplib_Sexp[12][1], 0, 0, [0, pos], 0, 0);
     return sexp_kind
             ? caml_call3
               (Sexplib_Sexp[14][7], [0, parse_pos$1], [0, len], buf)
             : caml_call3(Core_Sexp[51], [0, parse_pos$1], [0, len], buf);
    }
    return loop(parse);
   }
   function gen_read_sexps(parse_pos, t, sexp_kind){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     pipe_w = match[2],
     pipe_r = match[1];
    function _dH_(result){
     function loop(parse_pos){
      return gen_read_sexp
              (parse_pos,
               t,
               sexp_kind,
               function(param){
                if(0 !== param[0]){
                 var error = param[1];
                 return caml_call1(Core_Error[30], error);
                }
                var _dL_ = param[1];
                if(typeof _dL_ === "number")
                 return caml_call2(Async_kernel_Ivar[14], result, 0);
                var match = _dL_[2], parse_pos = match[2], sexp = match[1];
                if(caml_call1(Async_kernel_Pipe[17], pipe_w))
                 return caml_call2(Async_kernel_Ivar[14], result, 0);
                function _dM_(param){return loop([0, parse_pos]);}
                var _dN_ = caml_call2(Async_kernel_Pipe[29], pipe_w, sexp);
                return caml_call2(Async_unix_Import[27], _dN_, _dM_);
               });
     }
     return loop(parse_pos);
    }
    var finished = caml_call1(Async_kernel_Deferred[3], _dH_);
    function _dI_(param){
     function _dJ_(param){return caml_call1(Async_kernel_Pipe[15], pipe_w);}
     var _dK_ = close(t);
     return caml_call2(Async_unix_Import[27], _dK_, _dJ_);
    }
    caml_call2(Async_unix_Import[22], finished, _dI_);
    return pipe_r;
   }
   function read_sexps(parse_pos, t){return gen_read_sexps(parse_pos, t, 0);}
   function read_annotated_sexps(parse_pos, t){return gen_read_sexps(parse_pos, t, 1);
   }
   function unexpected_pos(bin_type, t, old_pos, read_len, new_pos){
    var
     _dB_ = [0, [1, [0, _ay_, [0, caml_call1(Core[389], new_pos), 0]]], 0],
     _dC_ = [0, [1, [0, _az_, [0, caml_call1(Core[389], read_len), 0]]], _dB_],
     _dD_ = [0, [1, [0, _aA_, [0, caml_call1(Core[389], old_pos), 0]]], _dC_],
     _dE_ = [0, [1, [0, _aB_, [0, sexp_of_t$2(t), 0]]], _dD_],
     _dF_ = [0, [1, [0, _aC_, [0, caml_call1(Core[558], bin_type), 0]]], _dE_],
     _dG_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Unexpected_reader_position),
         _dF_]];
    return [2, caml_call1(Core_Error[20], _dG_)];
   }
   function size_error(message, t, size, pos){
    var
     _dx_ = [0, [1, [0, _aD_, [0, caml_call1(Core[389], pos), 0]]], 0],
     _dy_ = [0, [1, [0, _aE_, [0, caml_call1(Core[389], size), 0]]], _dx_],
     _dz_ = [0, [1, [0, _aF_, [0, sexp_of_t$2(t), 0]]], _dy_],
     _dA_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], message), _dz_]];
    return [2, caml_call1(Core_Error[20], _dA_)];
   }
   function read_raw(t, buf, pos_ref, len, bin_prot_reader){
    if(caml_call2(Async_unix_Import[5], len, Bin_prot_Utils[1]))
     return [1, Bin_prot_Utils[1]];
    var
     header_pos = pos_ref[1],
     message_size = caml_call2(Bin_prot_Utils[2], buf, pos_ref);
    if
     (caml_call2
       (Async_unix_Import[6], pos_ref[1], header_pos + Bin_prot_Utils[1] | 0))
     return unexpected_pos
             (cst_header, t, header_pos, Bin_prot_Utils[1], pos_ref[1]);
    if
     (caml_call2
       (Async_unix_Import[5], len - Bin_prot_Utils[1] | 0, message_size)){
     var bytes_needed = Bin_prot_Utils[1] + message_size | 0;
     return caml_call2(Async_unix_Import[5], message_size, 0)
             ? size_error
               (cst_Negative_message_size, t, message_size, header_pos)
             : caml_call2
                (Async_unix_Import[5], bytes_needed, 0)
               ? size_error
                 (cst_Bytes_needed_overflowed, t, bytes_needed, header_pos)
               : [1, bytes_needed];
    }
    var
     message_pos = pos_ref[1],
     message = caml_call2(bin_prot_reader[1], buf, pos_ref);
    return caml_call2
             (Async_unix_Import[6],
              pos_ref[1],
              message_pos + message_size | 0)
            ? unexpected_pos
              (cst_message, t, message_pos, message_size, pos_ref[1])
            : [0, message];
   }
   var Read_bin_prot = [0, unexpected_pos, size_error, read_raw];
   function sexp_of_t$3(param){return param ? _aG_ : _aH_;}
   var
    to_string = caml_call1(Sexplib_Conv[80], sexp_of_t$3),
    Peek_or_read = [0, sexp_of_t$3, to_string];
   function peek_or_read_bin_prot(opt, t, peek_or_read, bin_prot_reader, k){
    if(opt) var sth = opt[1], max_len = sth; else var max_len = Core_Int[45];
    function error(f){
     function _dv_(msg, param){
      function _dw_(param){
       var
        arg1_057 = param[2],
        arg0_056 = param[1],
        res0_058 = caml_call1(Core[558], arg0_056),
        res1_059 = sexp_of_t$2(arg1_057);
       return [1, [0, res0_058, [0, res1_059, 0]]];
      }
      return caml_call1
              (k,
               caml_call5
                (Core_Or_error[44],
                 0,
                 0,
                 cst_Reader_read_bin_prot,
                 [0, msg, t],
                 _dw_));
     }
     return caml_call2(Core[254], _dv_, f);
    }
    if(caml_call2(Async_unix_Import[5], max_len, 0))
     return caml_call2(error(_aK_), max_len, 0);
    var
     len_with_header = max_len + Bin_prot_Utils[1] | 0,
     max_len_with_header =
       caml_call2(Async_unix_Import[5], len_with_header, max_len)
        ? Core_Int[45]
        : len_with_header;
    function read_loop(param){
     var _ds_ = t[8];
     if(-985294899 === _ds_){
      var
       pos = t[6],
       pos_ref = [0, pos],
       len = caml_call2(Async_unix_Import[9], max_len_with_header, t[7]);
      try{
       var
        val =
          caml_call5(Read_bin_prot[3], t, t[4], pos_ref, len, bin_prot_reader);
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       return caml_call1(k, caml_call2(Core_Or_error[41], 0, exn));
      }
      switch(val[0]){
        case 0:
         var message = val[1];
         if(peek_or_read) consume(t, pos_ref[1] - pos | 0);
         return caml_call1(k, [0, [0, 17724, message]]);
        case 1:
         var need = val[1], need_message = need - Bin_prot_Utils[1] | 0;
         if(caml_call2(Async_unix_Import[4], need_message, max_len))
          return caml_call3(error(_aL_), need_message, max_len, 0);
         var
          _dt_ =
            function(param){
             if(typeof param === "number") return read_loop(0);
             var n = param[2];
             return caml_call2(Async_unix_Import[3], n, 0)
                     ? caml_call1(k, _aI_)
                     : caml_call3(error(_aJ_), n, need, 0);
            },
          _du_ = get_data_until(t, need);
         return caml_call2(Async_unix_Import[27], _du_, _dt_);
        default: var error$0 = val[1]; return caml_call1(k, [1, error$0]);
      }
     }
     if(-144639815 <= _ds_)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aM_], 1);
     return caml_call1(error(_aN_), 0);
    }
    return read_loop(0);
   }
   function iter_bin_prot(t, bin_prot_reader, f){
    function handle_chunk(buf, chunk_pos, len){
     var limit = chunk_pos + len | 0, pos_ref = [0, chunk_pos];
     function read_loop(param){
      var
       header_pos = pos_ref[1],
       len = limit - header_pos | 0,
       match =
         caml_call5(Read_bin_prot[3], t, buf, pos_ref, len, bin_prot_reader);
      switch(match[0]){
        case 0:
         var
          message = match[1],
          _dq_ = function(param){return read_loop(0);},
          _dr_ = caml_call1(f, message);
         return caml_call2(Eager_deferred[12][4][2], _dr_, _dq_);
        case 1:
         var bytes = match[1];
         return caml_call2(Async_unix_Import[3], header_pos, limit)
                 ? caml_call1(Eager_deferred[12][1], 192584839)
                 : caml_call1
                   (Eager_deferred[12][1],
                    [0,
                     116552,
                     [0, header_pos - chunk_pos | 0, [0, 870031478, bytes]]]);
        default:
         var error = match[1];
         return caml_call1(Eager_deferred[12][1], [0, 926227490, error]);
      }
     }
     function _dl_(param){
      if(0 === param[0]){var result = param[1]; return result;}
      var
       exn = param[1],
       _dn_ = [0, [1, [0, _aO_, [0, sexp_of_t$2(t), 0]]], 0],
       _do_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Error_deserializing_reader),
           _dn_]],
       _dp_ = caml_call2(Core_Error[27], 0, exn);
      return [0, 926227490, caml_call2(Core_Error[23], _dp_, _do_)];
     }
     var
      _dm_ = caml_call7(Async_unix_Import[21], 0, 0, 0, 0, _aP_, 0, read_loop);
     return caml_call2(Eager_deferred[12][4][3], _dm_, _dl_);
    }
    function _de_(result){
     function _dg_(param){
      if(typeof result === "number")
       return Async_kernel_Deferred_or_error[37];
      if(280164845 <= result[1]){
       var error = result[2];
       return caml_call1(Eager_deferred[12][1], [1, error]);
      }
      var
       data = result[2],
       length = caml_ml_string_length(data),
       _di_ = [0, [1, [0, _aQ_, [0, caml_call1(Core[558], data), 0]]], 0],
       _dj_ = [0, [1, [0, _aR_, [0, caml_call1(Core[389], length), 0]]], _di_],
       _dk_ =
         [1,
          [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unconsumed_data), _dj_]];
      return caml_call1(Async_kernel_Deferred_or_error[25], _dk_);
     }
     var _dh_ = close(t);
     return caml_call2(Eager_deferred[12][4][2], _dh_, _dg_);
    }
    var _df_ = read_one_chunk_at_a_time(t, handle_chunk);
    return caml_call2(Eager_deferred[12][4][2], _df_, _de_);
   }
   function read_marshal_raw(t){
    function eofn(n){
     if(caml_call2(Async_unix_Import[3], n, 0)) return 3456156;
     var
      _dc_ = [0, caml_call1(Core[389], n), 0],
      _dd_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Reader_read_marshal_got_EO),
          _dc_]];
     return caml_call1(Core[261], _dd_);
    }
    var header = caml_call1(Core_Bytes[44], Stdlib_Marshal[6]);
    function _c9_(param){
     if(typeof param === "number"){
      var
       len = caml_call2(Stdlib_Marshal[7], header, 0),
       buf = caml_call1(Core_Bytes[44], len + Stdlib_Marshal[6] | 0);
      caml_call5(Core_Bytes[17], header, 0, buf, 0, Stdlib_Marshal[6]);
      var
       sub =
         caml_call3(Core_Substring[32], [0, Stdlib_Marshal[6]], [0, len], buf),
       _c$_ =
         function(param){
          if(typeof param === "number") return [0, 17724, buf];
          var n = param[2];
          return eofn(n);
         },
       _da_ = caml_call2(really_read_substring, t, sub);
      return caml_call2(Async_unix_Import[33][3], _da_, _c$_);
     }
     var n = param[2], _db_ = eofn(n);
     return caml_call1(Async_unix_Import[30], _db_);
    }
    var _c__ = really_read(t, 0, 0, header);
    return caml_call2(Async_unix_Import[33][2], _c__, _c9_);
   }
   function read_marshal(t){
    function _c7_(param){
     if(typeof param === "number") return 3456156;
     var buf = param[2];
     return [0, 17724, caml_call2(Stdlib_Marshal[4], buf, 0)];
    }
    var _c8_ = read_marshal_raw(t);
    return caml_call2(Async_unix_Import[33][3], _c8_, _c7_);
   }
   function read_all(opt, t, read_one){
    if(opt)
     var sth = opt[1], close_when_finished = sth;
    else
     var close_when_finished = 1;
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     pipe_w = match[2],
     pipe_r = match[1];
    function _cZ_(param){
     function _c3_(param){
      if(typeof param === "number")
       return caml_call1(Async_unix_Import[30], _aS_);
      var one = param[2];
      if(caml_call1(Async_kernel_Pipe[17], pipe_w))
       return caml_call1(Async_unix_Import[30], _aT_);
      function _c5_(param){return _aU_;}
      var _c6_ = caml_call2(Async_kernel_Pipe[29], pipe_w, one);
      return caml_call2(Async_unix_Import[33][3], _c6_, _c5_);
     }
     var _c4_ = caml_call1(read_one, t);
     return caml_call2(Async_unix_Import[33][2], _c4_, _c3_);
    }
    var finished = caml_call2(Async_kernel_Deferred[31], 0, _cZ_);
    function _c0_(param){
     function _c1_(param){return caml_call1(Async_kernel_Pipe[15], pipe_w);}
     var
      _c2_ =
        close_when_finished ? close(t) : caml_call1(Async_unix_Import[30], 0);
     return caml_call2(Async_unix_Import[27], _c2_, _c1_);
    }
    caml_call2(Async_unix_Import[22], finished, _c0_);
    return pipe_r;
   }
   function lines(t){return read_all(0, t, read_line);}
   function contents(t){
    var
     buf = caml_call1(Base_Buffer[2], 1024),
     sbuf = caml_call1(Core_Bytes[44], 1024);
    function _cS_(param){
     function _cX_(param){return caml_call1(Base_Buffer[3], buf);}
     var _cY_ = close(t);
     return caml_call2(Async_unix_Import[33][3], _cY_, _cX_);
    }
    function _cT_(param){
     function _cV_(param){
      if(typeof param === "number") return _aV_;
      var l = param[2];
      caml_call4(Base_Buffer[19], buf, sbuf, 0, l);
      return _aW_;
     }
     var _cW_ = read(t, 0, 0, sbuf);
     return caml_call2(Async_unix_Import[33][3], _cW_, _cV_);
    }
    var _cU_ = caml_call2(Async_kernel_Deferred[31], 0, _cT_);
    return caml_call2(Async_unix_Import[33][2], _cU_, _cS_);
   }
   function recv(t){
    function _cH_(i){
     function _cI_(param){
      if(typeof param === "number")
       return caml_call2(Async_kernel_Ivar[14], i, 3456156);
      var length_str = param[2];
      try{
       var _cP_ = [0, runtime.caml_int_of_string(length_str)], match = _cP_;
      }
      catch(_cR_){var match = _aX_;}
      if(0 === match[0]){
       var
        length = match[1],
        buf = caml_call1(Core_Bytes[44], length),
        _cK_ =
          function(param){
           if(typeof param === "number")
            return caml_call2(Async_kernel_Ivar[14], i, [0, 17724, buf]);
           var
            _cQ_ =
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_Reader_recv_got_unexpected);
           return caml_call1(Core[261], _cQ_);
          },
        _cL_ = really_read(t, 0, 0, buf);
       return caml_call2(Async_unix_Import[27], _cL_, _cK_);
      }
      var
       _cM_ = [0, [1, [0, _aY_, [0, sexp_of_t$2(t), 0]]], 0],
       _cN_ =
         [0, [1, [0, _aZ_, [0, caml_call1(Core[558], length_str), 0]]], _cM_],
       _cO_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Reader_recv_got_strange_le),
           _cN_]];
      return caml_call1(Core[261], _cO_);
     }
     var _cJ_ = read_line(t);
     return caml_call2(Async_unix_Import[27], _cJ_, _cI_);
    }
    return caml_call1(Async_kernel_Deferred[3], _cH_);
   }
   function transfer(t, pipe_w){
    function _cA_(finished){
     function _cB_(param){
      return caml_call2(Async_kernel_Ivar[16], finished, 0);
     }
     var
      _cC_ = caml_call1(Async_kernel_Pipe[18], pipe_w),
      _cD_ = caml_call2(Async_unix_Import[33][3], _cC_, _cB_);
     caml_call1(Async_unix_Import[16], _cD_);
     function loop(param){
      return with_nonempty_buffer$0
              (0,
               t,
               function(param){
                if(3456156 <= param)
                 return caml_call2(Async_kernel_Ivar[16], finished, 0);
                var _cE_ = 1 - caml_call1(Async_kernel_Pipe[17], pipe_w);
                if(! _cE_) return _cE_;
                var pos = t[6], len = t[7];
                consume(t, len);
                var
                 _cF_ =
                   caml_call3(Core_Bigstring[16], [0, pos], [0, len], t[4]),
                 _cG_ = caml_call2(Async_kernel_Pipe[29], pipe_w, _cF_);
                return caml_call2(Async_unix_Import[27], _cG_, loop);
               });
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _cA_);
   }
   var
    Internal =
      [0,
       State,
       sexp_of_open_flags,
       open_flags,
       last_read_time,
       state,
       available,
       pos,
       close_may_destroy_buf,
       buf,
       bytes_read,
       id,
       fd,
       sexp_of_t$2,
       sexp_of_t_internals,
       invariant,
       create,
       of_in_channel,
       open_file,
       stdin,
       close_finished,
       is_closed,
       empty_buf,
       destroy,
       close,
       with_close,
       with_reader_exclusive,
       with_file,
       read_syscall_with_timestamp,
       get_data,
       maybe_grow_buf_len,
       get_data_until,
       with_nonempty_buffer,
       with_nonempty_buffer$0,
       consume,
       sexp_of_handle_chunk_result,
       sexp_of_read_one_chunk_at_a_ti,
       sexp_of_consumed,
       read_one_chunk_at_a_time,
       sexp_of_handle_iobuf_result,
       read_one_iobuf_at_a_time,
       Read,
       Read_substring,
       read_substring_available,
       read_substring,
       really_read_substring,
       Read_bigsubstring,
       read_bigsubstring,
       really_read_bigsubstring,
       really_read_bigstring,
       peek_available,
       peek,
       read_available,
       read,
       really_read,
       read_char,
       first_char,
       read_until_gen,
       read_until,
       line_delimiter_pred,
       read_line_gen,
       read_line,
       really_read_line,
       space,
       gen_read_sexp,
       gen_read_sexps,
       read_sexps,
       read_annotated_sexps,
       Read_bin_prot,
       Peek_or_read,
       peek_or_read_bin_prot,
       iter_bin_prot,
       read_marshal_raw,
       read_marshal,
       read_all,
       lines,
       contents,
       recv,
       transfer],
    sexp_of_t$4 = Internal[13],
    sexp_of_handle_chunk_result$0 = Internal[35],
    sexp_of_handle_iobuf_result$0 = Internal[39],
    sexp_of_read_one_chunk_at_a_ti$0 = Internal[36],
    close$0 = Internal[24],
    close_finished$0 = Internal[20],
    create$0 = Internal[16],
    fd$0 = Internal[12],
    id$0 = Internal[11],
    invariant$0 = Internal[15],
    bytes_read$0 = Internal[10],
    is_closed$0 = Internal[21],
    last_read_time$0 = Internal[4],
    of_in_channel$0 = Internal[17],
    open_file$0 = Internal[18],
    stdin$0 = Internal[19],
    with_close$0 = Internal[25],
    with_file$0 = Internal[27];
   function use(t){
    function error(reason){
     var
      _cx_ = [0, [1, [0, _a0_, [0, caml_call1(sexp_of_t$4, t), 0]]], 0],
      _cy_ = [0, [1, [0, _a1_, [0, caml_call1(Core[558], reason), 0]]], _cx_],
      _cz_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_can_not_read_from_reader),
          _cy_]];
     return caml_call1(Core[261], _cz_);
    }
    var _cw_ = t[8];
    return -985294899 === _cw_
            ? error(cst_in_use)
            : -144639815 <= _cw_ ? (t[8] = -985294899, 0) : error(cst_closed);
   }
   function finished_read(t){
    var _cv_ = t[8];
    if(-985294899 === _cv_){t[8] = -144639815; return 0;}
    if(-144639815 <= _cv_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a2_], 1);
    return 0;
   }
   function do_read_now(t, f){
    use(t);
    var x = caml_call1(f, 0);
    finished_read(t);
    return x;
   }
   function bytes_available(t){
    return do_read_now(t, function(param){return t[7];});
   }
   function peek_available$0(t, len){
    return do_read_now
            (t, function(param){return caml_call2(Internal[50], t, len);});
   }
   function read_available$0(t, pos, len, s){
    return do_read_now
            (t,
             function(param){return caml_call4(Internal[52], t, pos, len, s);});
   }
   function do_read(t, f){
    use(t);
    function _ct_(x){finished_read(t); return x;}
    var _cu_ = caml_call1(f, 0);
    return caml_call2(Async_unix_Import[33][3], _cu_, _ct_);
   }
   function peek$0(t, len){
    if(caml_call2(Async_unix_Import[5], len, 0)){
     var
      _cr_ = [0, [1, [0, _a3_, [0, caml_call1(Core[389], len), 0]]], 0],
      _cs_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Reader_peek_got_negative_l),
          _cr_]];
     caml_call1(Core[261], _cs_);
    }
    return do_read
            (t, function(param){return caml_call2(Internal[51], t, len);});
   }
   function read$0(t, pos, len, s){
    return do_read
            (t,
             function(param){return caml_call4(Internal[53], t, pos, len, s);});
   }
   function read_char$0(t){
    return do_read(t, function(param){return caml_call1(Internal[55], t);});
   }
   function read_substring$0(t, s){
    return do_read(t, function(param){return caml_call2(Internal[44], t, s);});
   }
   function read_bigsubstring$0(t, s){
    return do_read(t, function(param){return caml_call2(Internal[47], t, s);});
   }
   function read_one_chunk_at_a_time$0(t, handle_chunk){
    return do_read
            (t,
             function(param){
              return caml_call2(Internal[38], t, handle_chunk);
             });
   }
   function read_one_iobuf_at_a_time$0(t, handle_chunk){
    return do_read
            (t,
             function(param){
              return caml_call2(Internal[40], t, handle_chunk);
             });
   }
   function really_read$0(t, pos, len, s){
    return do_read
            (t,
             function(param){return caml_call4(Internal[54], t, pos, len, s);});
   }
   function really_read_substring$0(t, s){
    return do_read(t, function(param){return caml_call2(Internal[45], t, s);});
   }
   function really_read_bigsubstring$0(t, s){
    return do_read(t, function(param){return caml_call2(Internal[48], t, s);});
   }
   function read_line$0(t){
    return do_read(t, function(param){return caml_call1(Internal[61], t);});
   }
   function really_read_line$0(wait_time, t){
    return do_read
            (t,
             function(param){return caml_call2(Internal[62], wait_time, t);});
   }
   function do_read_k(t, read_k, make_result){
    use(t);
    function _cp_(result){
     return caml_call1
             (read_k,
              function(r){
               finished_read(t);
               var _cq_ = caml_call1(make_result, caml_call1(Core[255], r));
               return caml_call2(Async_kernel_Ivar[14], result, _cq_);
              });
    }
    return caml_call1(Async_kernel_Deferred[3], _cp_);
   }
   function read_until$0(t, p, keep_delim){
    function _cn_(_co_){return _co_;}
    return do_read_k(t, caml_call3(Internal[58], t, p, keep_delim), _cn_);
   }
   function read_until_bounded(t, p, keep_delim, max){
    function _cl_(_cm_){return _cm_;}
    return do_read_k
            (t, caml_call4(Internal[57], t, p, keep_delim, [0, max]), _cl_);
   }
   function read_sexp(parse_pos, t){
    function _ck_(param){
     if(typeof param === "number") return 3456156;
     var sexp = param[2][1];
     return [0, 17724, sexp];
    }
    return do_read_k(t, caml_call3(Internal[64], parse_pos, t, 0), _ck_);
   }
   function read_sexps$0(parse_pos, t){
    use(t);
    return caml_call2(Internal[66], parse_pos, t);
   }
   function read_annotated_sexps$0(parse_pos, t){
    use(t);
    return caml_call2(Internal[67], parse_pos, t);
   }
   function peek_or_read_bin_prot$0(max_len, t, reader, peek_or_read){
    function _ci_(_cj_){return _cj_;}
    return do_read_k
            (t,
             caml_call4(Internal[70], max_len, t, peek_or_read, reader),
             _ci_);
   }
   function peek_bin_prot(max_len, t, reader){
    return peek_or_read_bin_prot$0(max_len, t, reader, 0);
   }
   function read_bin_prot(max_len, t, reader){
    return peek_or_read_bin_prot$0(max_len, t, reader, 1);
   }
   function iter_bin_prot$0(t, reader, f){
    use(t);
    return caml_call3(Internal[71], t, reader, f);
   }
   function iter_bin_prot_exn(t, reader, f){
    var _cg_ = Core[255], _ch_ = iter_bin_prot$0(t, reader, f);
    return caml_call2(Async_unix_Import[32], _ch_, _cg_);
   }
   function read_bin_prot_into_pipe(t, reader, f){
    function _ca_(writer){
     function _cb_(param){
      var _cf_ = caml_call1(close$0, t);
      return caml_call1(Async_unix_Import[16], _cf_);
     }
     var _cc_ = caml_call1(Async_kernel_Pipe[18], writer);
     caml_call2(Async_unix_Import[22], _cc_, _cb_);
     return iter_bin_prot_exn
             (t,
              reader,
              function(element){
               var
                _cd_ = caml_call1(Async_kernel_Pipe[34], writer),
                _ce_ = caml_call1(f, element);
               return caml_call2(Eager_deferred[2], _ce_, _cd_);
              });
    }
    return caml_call3(Async_kernel_Pipe[5], 0, 0, _ca_);
   }
   function read_marshal_raw$0(t){
    return do_read(t, function(param){return caml_call1(Internal[72], t);});
   }
   function read_marshal$0(t){
    return do_read(t, function(param){return caml_call1(Internal[73], t);});
   }
   function recv$0(t){
    return do_read(t, function(param){return caml_call1(Internal[77], t);});
   }
   function read_all$0(close_when_finished, t, read_one){
    return caml_call3(Internal[74], close_when_finished, t, read_one);
   }
   function lines$0(t){use(t); return caml_call1(Internal[75], t);}
   function contents$0(t){
    return do_read(t, function(param){return caml_call1(Internal[76], t);});
   }
   function file_contents(file){
    return caml_call4(with_file$0, 0, 0, file, contents$0);
   }
   function file_lines(file){
    function _b9_(t){
     var _b$_ = lines$0(t);
     return caml_call1(Async_kernel_Pipe[78], _b$_);
    }
    var _b__ = caml_call2(open_file$0, 0, file);
    return caml_call2(Async_unix_Import[33][2], _b__, _b9_);
   }
   function transfer$0(t){use(t); return caml_call1(Internal[78], t);}
   function lseek(t, offset, mode){
    return do_read
            (t,
             function(param){
              t[6] = 0;
              t[7] = 0;
              return caml_call3
                      (Async_unix_Unix_syscalls[18], t[1], offset, mode);
             });
   }
   function ltell(t){
    return do_read
            (t,
             function(param){
              function _b7_(fd_offset){
               return runtime.caml_int64_sub
                       (fd_offset, runtime.caml_int64_of_int32(t[7]));
              }
              var
               _b8_ =
                 caml_call3
                  (Async_unix_Unix_syscalls[18],
                   t[1],
                   Core_Int64[58],
                   3358048);
              return caml_call2(Async_unix_Import[33][3], _b8_, _b7_);
             });
   }
   function get_error(file, sexp_kind, a_of_sexp, annotated_sexp){
    try{
     var
      annotated_sexp$0 =
        sexp_kind
         ? annotated_sexp
         : caml_call1(Sexplib_Sexp[14][3], annotated_sexp);
     caml_call1(a_of_sexp, annotated_sexp$0);
     return _a4_;
    }
    catch(exn$1){
     var
      exn = caml_wrap_exception(exn$1),
      unexpected_error =
        function(param){
         function _b6_(param){
          var
           arg1_077 = param[2],
           arg0_076 = param[1],
           res0_078 = caml_call1(Core[558], arg0_076),
           res1_079 = caml_call1(Core[625], arg1_077);
          return [1, [0, res0_078, [0, res1_079, 0]]];
         }
         return caml_call5
                 (Core[244],
                  0,
                  0,
                  cst_Reader_load_sexp_error,
                  [0, file, exn],
                  _b6_);
        };
     if(exn[1] !== Core[153]) return unexpected_error(0);
     var
      bad_sexp = exn[3],
      exc = exn[2],
      match = caml_call2(Sexplib_Sexp[14][5], annotated_sexp, bad_sexp);
     if(! match) return unexpected_error(0);
     var
      bad_annotated_sexp = match[1],
      match$0 =
        caml_call3(Sexplib_Sexp[14][18], file, exc, bad_annotated_sexp);
     if(match$0[1] === Core[153]){
      var match$1 = match$0[2];
      if(match$1[1] === Sexplib_Sexp[14][2]){
       var
        sexp = match$0[3],
        exn$0 = match$1[3],
        pos = match$1[2],
        _b5_ =
          function(param){
           var
            arg3_083 = param[4],
            arg2_082 = param[3],
            arg1_081 = param[2],
            arg0_080 = param[1],
            res0_084 = caml_call1(Core[558], arg0_080),
            res1_085 = caml_call1(Core[625], arg1_081),
            res2_086 = caml_call1(Core[558], arg2_082),
            res3_087 = caml_call1(Core_Sexp[93], arg3_083);
           return [1,
                   [0,
                    res0_084,
                    [0, res1_085, [0, res2_086, [0, res3_087, 0]]]]];
          };
       return caml_call5
               (Core_Or_error[44],
                0,
                0,
                cst_invalid_sexp,
                [0, pos, exn$0, cst_in, sexp],
                _b5_);
      }
     }
     return unexpected_error(0);
    }
   }
   function gen_load_exn(exclusive, sexp_kind, file, convert, get_error){
    var may_load_file_multiple_times = [0, 0];
    function load(sexp_kind){
     function _bW_(param){
      if(0 === param[0]){var sexps = param[1]; return sexps;}
      var exn = param[1];
      if(exn[1] !== Core_Sexp[49]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       match = exn[2],
       parse_state = match[2],
       err_msg = match[1],
       parse_pos = parse_state[2][1];
      function _b2_(param){
       var
        arg1_089 = param[2],
        arg0_088 = param[1],
        res0_090 = caml_call1(Core[558], arg0_088),
        res1_091 = caml_call1(Core[558], arg1_089);
       return [1, [0, res0_090, [0, res1_091, 0]]];
      }
      var
       _b3_ =
         [0,
          caml_call4(Core[265], _a5_, file, parse_pos[1], parse_pos[2]),
          err_msg],
       _b4_ =
         caml_call5
          (Core_Error[19], 0, 0, cst_syntax_error_when_parsing_, _b3_, _b2_);
      return caml_call1(Core_Error[30], _b4_);
     }
     function _bX_(param){
      return caml_call4
              (with_file$0,
               0,
               exclusive,
               file,
               function(t){
                var
                 _bZ_ = caml_call1(fd$0, t),
                 match = caml_call1(Async_unix_Fd[8], _bZ_);
                a:
                {
                 if(typeof match === "number" && 2 <= match){var _b0_ = 1; break a;}
                 var _b0_ = 0;
                }
                may_load_file_multiple_times[1] = _b0_;
                use(t);
                var _b1_ = caml_call3(Internal[65], 0, t, sexp_kind);
                return caml_call1(Async_kernel_Pipe[78], _b1_);
               });
     }
     var
      _bY_ =
        caml_call7(Async_kernel_Monitor[16], 0, 0, 0, _a8_, _a7_, _a6_, _bX_);
     return caml_call2(Async_unix_Import[33][3], _bY_, _bW_);
    }
    function _bJ_(sexps){
     try{
      var
       _bT_ = caml_call1(convert, sexps),
       _bU_ = caml_call1(Async_unix_Import[30], _bT_);
      return _bU_;
     }
     catch(exn$1){
      var exn = caml_wrap_exception(exn$1);
      if(exn[1] !== Core[153]){
       var
        _bQ_ = [0, [1, [0, _a$_, [0, caml_call1(Core[625], exn), 0]]], 0],
        _bR_ = [0, [1, [0, _ba_, [0, caml_call1(Core[558], file), 0]]], _bQ_],
        _bS_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_Reader_load_sexp_s_error),
            _bR_]];
       return caml_call1(Core[261], _bS_);
      }
      var exn$0 = exn[2];
      if(may_load_file_multiple_times[1]){
       var
        _bL_ =
          function(sexps){
           var _bV_ = caml_call1(get_error, sexps);
           return caml_call1(Core_Error[30], _bV_);
          },
        _bM_ = load(1);
       return caml_call2(Async_unix_Import[33][2], _bM_, _bL_);
      }
      var
       _bN_ = [0, [1, [0, _a9_, [0, caml_call1(Core[625], exn$0), 0]]], 0],
       _bO_ = [0, [1, [0, _a__, [0, caml_call1(Core[558], file), 0]]], _bN_],
       _bP_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_invalid_sexp_failed_to_det),
           _bO_]];
      return caml_call1(Core[261], _bP_);
     }
    }
    var _bK_ = load(sexp_kind);
    return caml_call2(Async_unix_Import[33][2], _bK_, _bJ_);
   }
   function get_load_result_exn(param){
    if(1025039613 <= param[1]){var x = param[2]; return x;}
    var exn = param[2][1];
    throw caml_maybe_attach_backtrace(exn, 0);
   }
   function gen_load_sexp_exn(exclusive, sexp_kind, file, a_of_sexp, param){
    function multiple(sexps){
     function _bH_(param){
      var
       arg1_095 = param[2],
       arg0_094 = param[1],
       res0_096 = caml_call1(Core[389], arg0_094),
       res1_097 = caml_call1(Core[558], arg1_095);
      return [1, [0, res0_096, [0, res1_097, 0]]];
     }
     var _bI_ = [0, caml_call1(Core_List[45], sexps), file];
     return caml_call5
             (Core_Error[19],
              0,
              0,
              cst_Reader_load_sexp_requires_,
              _bI_,
              _bH_);
    }
    function _bD_(annot_sexps){
     if(annot_sexps && ! annot_sexps[2]){
      var
       annot_sexp = annot_sexps[1],
       match = get_error(file, sexp_kind, a_of_sexp, annot_sexp);
      if(0 === match[0]){
       var
        _bF_ = Core_Sexp[93],
        _bG_ = caml_call1(Sexplib_Sexp[14][3], annot_sexp);
       return caml_call5
               (Core_Error[19],
                0,
                0,
                cst_conversion_of_annotated_se,
                _bG_,
                _bF_);
      }
      var e = match[1];
      return e;
     }
     return multiple(annot_sexps);
    }
    return gen_load_exn
            (exclusive,
             sexp_kind,
             file,
             function(sexps){
              if(sexps && ! sexps[2]){
               var sexp = sexps[1];
               return caml_call1(a_of_sexp, sexp);
              }
              var _bE_ = multiple(sexps);
              return caml_call1(Core_Error[30], _bE_);
             },
             _bD_);
   }
   function load_sexp_exn(exclusive, file, a_of_sexp){
    return gen_load_sexp_exn(exclusive, 0, file, a_of_sexp, 0);
   }
   function load_annotated_sexp_exn(exclusive, file, a_of_sexp){return gen_load_sexp_exn(exclusive, 1, file, a_of_sexp, 0);
   }
   function gen_load_sexp(exclusive, sexp_kind, file, a_of_sexp, param){
    function _bB_(_bC_){
     return gen_load_sexp_exn(exclusive, sexp_kind, file, a_of_sexp, _bC_);
    }
    return caml_call6
            (Async_kernel_Deferred_or_error[38], _bd_, _bc_, _bb_, 0, 0, _bB_);
   }
   function load_sexp(exclusive, file, a_of_sexp){
    return gen_load_sexp(exclusive, 0, file, a_of_sexp, 0);
   }
   function load_annotated_sexp(exclusive, file, a_of_sexp){return gen_load_sexp(exclusive, 1, file, a_of_sexp, 0);
   }
   function gen_load_sexps_exn(exclusive, sexp_kind, file, a_of_sexp, param){
    function _by_(annot_sexps){
     function _bz_(annot_sexp){
      var match = get_error(file, sexp_kind, a_of_sexp, annot_sexp);
      if(0 === match[0]) return 0;
      var error = match[1];
      return [0, error];
     }
     var _bA_ = caml_call2(Core_List[13], annot_sexps, _bz_);
     return caml_call1(Core_Error[26], _bA_);
    }
    return gen_load_exn
            (exclusive,
             sexp_kind,
             file,
             function(sexps){
              return caml_call2(Core_List[51], sexps, a_of_sexp);
             },
             _by_);
   }
   function load_sexps_exn(exclusive, file, a_of_sexp){
    return gen_load_sexps_exn(exclusive, 0, file, a_of_sexp, 0);
   }
   function load_annotated_sexps_exn(exclusive, file, a_of_sexp){return gen_load_sexps_exn(exclusive, 1, file, a_of_sexp, 0);
   }
   function gen_load_sexps(exclusive, sexp_kind, file, a_of_sexp, param){
    function _bw_(_bx_){
     return gen_load_sexps_exn(exclusive, sexp_kind, file, a_of_sexp, _bx_);
    }
    return caml_call6
            (Async_kernel_Deferred_or_error[38], _bg_, _bf_, _be_, 0, 0, _bw_);
   }
   function load_sexps(exclusive, file, a_of_sexp){
    return gen_load_sexps(exclusive, 0, file, a_of_sexp, 0);
   }
   function load_annotated_sexps(exclusive, file, a_of_sexp){return gen_load_sexps(exclusive, 1, file, a_of_sexp, 0);
   }
   function pipe(t){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     pipe_w = match[2],
     pipe_r = match[1];
    function _bs_(param){
     function _bu_(param){return caml_call1(Async_kernel_Pipe[15], pipe_w);}
     var _bv_ = caml_call1(close$0, t);
     return caml_call2(Async_unix_Import[27], _bv_, _bu_);
    }
    var _bt_ = caml_call1(transfer$0(t), pipe_w);
    caml_call2(Async_unix_Import[22], _bt_, _bs_);
    return pipe_r;
   }
   function drain(t){
    function _bp_(param){
     if(typeof param === "number") return caml_call1(close$0, t);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
    }
    var
     _bq_ =
       read_one_chunk_at_a_time$0
        (t,
         function(bigstring, param, _br_){
          return caml_call1(Async_unix_Import[30], 192584839);
         });
    return caml_call2(Async_unix_Import[33][2], _bq_, _bp_);
   }
   function load_bin_prot(exclusive, max_len, file, bin_reader){
    function _bm_(result){
     if(0 !== result[0]) return result;
     var match = result[1];
     if(typeof match === "number")
      return caml_call1(Core_Or_error[46], cst_Reader_load_bin_prot_got_u);
     var v = match[2];
     return [0, v];
    }
    function _bn_(param){
     return caml_call4
             (with_file$0,
              0,
              exclusive,
              file,
              function(t){return read_bin_prot(max_len, t, bin_reader);});
    }
    var
     _bo_ = caml_call6(Async_kernel_Monitor[17], 0, 0, _bj_, 0, _bi_, _bn_);
    return caml_call2(Async_unix_Import[33][3], _bo_, _bm_);
   }
   function load_bin_prot_exn(exclusive, max_len, file, bin_reader){
    var
     _bk_ = Core[255],
     _bl_ = load_bin_prot(exclusive, max_len, file, bin_reader);
    return caml_call2(Async_unix_Import[32], _bl_, _bk_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Reader0);
   var
    Async_unix_Reader0 =
      [0,
       Id,
       Read_result,
       Internal,
       sexp_of_t$4,
       sexp_of_handle_chunk_result$0,
       sexp_of_handle_iobuf_result$0,
       sexp_of_read_one_chunk_at_a_ti$0,
       close$0,
       close_finished$0,
       create$0,
       fd$0,
       id$0,
       invariant$0,
       bytes_read$0,
       is_closed$0,
       last_read_time$0,
       of_in_channel$0,
       open_file$0,
       stdin$0,
       with_close$0,
       with_file$0,
       use,
       finished_read,
       do_read_now,
       bytes_available,
       peek_available$0,
       read_available$0,
       do_read,
       peek$0,
       read$0,
       read_char$0,
       read_substring$0,
       read_bigsubstring$0,
       read_one_chunk_at_a_time$0,
       read_one_iobuf_at_a_time$0,
       really_read$0,
       really_read_substring$0,
       really_read_bigsubstring$0,
       read_line$0,
       really_read_line$0,
       do_read_k,
       read_until$0,
       read_until_bounded,
       read_sexp,
       read_sexps$0,
       read_annotated_sexps$0,
       peek_or_read_bin_prot$0,
       peek_bin_prot,
       read_bin_prot,
       iter_bin_prot$0,
       iter_bin_prot_exn,
       read_bin_prot_into_pipe,
       read_marshal_raw$0,
       read_marshal$0,
       recv$0,
       read_all$0,
       lines$0,
       contents$0,
       file_contents,
       file_lines,
       transfer$0,
       lseek,
       ltell,
       get_error,
       gen_load_exn,
       get_load_result_exn,
       gen_load_sexp_exn,
       load_sexp_exn,
       load_annotated_sexp_exn,
       gen_load_sexp,
       load_sexp,
       load_annotated_sexp,
       gen_load_sexps_exn,
       load_sexps_exn,
       load_annotated_sexps_exn,
       gen_load_sexps,
       load_sexps,
       load_annotated_sexps,
       pipe,
       drain,
       load_bin_prot,
       load_bin_prot_exn];
   runtime.caml_register_global
    (239, Async_unix_Reader0, cst_Async_unix_Reader0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Reader
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Pipe, Async_unix__Import, Async_unix__Reader0, Async_unix__Unix_syscalls, Async_unix__Writer0, Core, Core__Info, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Reader$0 = "Async_unix__Reader",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Info = global_data.Core__Info,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_unix_Writer0 = global_data.Async_unix__Writer0;
   global_data.Core;
   global_data.Async_kernel__Debug;
   var
    Async_unix_Import = global_data.Async_unix__Import,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Reader0 = global_data.Async_unix__Reader0;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Reader$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/reader.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "reader.ml");
   var
    Id = Async_unix_Reader0[1],
    Read_result = Async_unix_Reader0[2],
    sexp_of_t = Async_unix_Reader0[4],
    sexp_of_handle_chunk_result = Async_unix_Reader0[5],
    sexp_of_handle_iobuf_result = Async_unix_Reader0[6],
    sexp_of_read_one_chunk_at_a_ti = Async_unix_Reader0[7],
    close = Async_unix_Reader0[8],
    close_finished = Async_unix_Reader0[9],
    create = Async_unix_Reader0[10],
    fd = Async_unix_Reader0[11],
    id = Async_unix_Reader0[12],
    invariant = Async_unix_Reader0[13],
    bytes_read = Async_unix_Reader0[14],
    is_closed = Async_unix_Reader0[15],
    last_read_time = Async_unix_Reader0[16],
    of_in_channel = Async_unix_Reader0[17],
    open_file = Async_unix_Reader0[18],
    stdin = Async_unix_Reader0[19],
    with_close = Async_unix_Reader0[20],
    with_file = Async_unix_Reader0[21],
    bytes_available = Async_unix_Reader0[25],
    peek_available = Async_unix_Reader0[26],
    read_available = Async_unix_Reader0[27],
    peek = Async_unix_Reader0[29],
    read = Async_unix_Reader0[30],
    read_char = Async_unix_Reader0[31],
    read_substring = Async_unix_Reader0[32],
    read_bigsubstring = Async_unix_Reader0[33],
    read_one_chunk_at_a_time = Async_unix_Reader0[34],
    read_one_iobuf_at_a_time = Async_unix_Reader0[35],
    really_read = Async_unix_Reader0[36],
    really_read_substring = Async_unix_Reader0[37],
    really_read_bigsubstring = Async_unix_Reader0[38],
    read_line = Async_unix_Reader0[39],
    really_read_line = Async_unix_Reader0[40],
    read_until = Async_unix_Reader0[42],
    read_until_bounded = Async_unix_Reader0[43],
    read_sexp = Async_unix_Reader0[44],
    read_sexps = Async_unix_Reader0[45],
    read_annotated_sexps = Async_unix_Reader0[46],
    peek_bin_prot = Async_unix_Reader0[48],
    read_bin_prot = Async_unix_Reader0[49],
    iter_bin_prot = Async_unix_Reader0[50],
    iter_bin_prot_exn = Async_unix_Reader0[51],
    read_bin_prot_into_pipe = Async_unix_Reader0[52],
    read_marshal_raw = Async_unix_Reader0[53],
    read_marshal = Async_unix_Reader0[54],
    recv = Async_unix_Reader0[55],
    read_all = Async_unix_Reader0[56],
    lines = Async_unix_Reader0[57],
    contents = Async_unix_Reader0[58],
    file_contents = Async_unix_Reader0[59],
    file_lines = Async_unix_Reader0[60],
    transfer = Async_unix_Reader0[61],
    lseek = Async_unix_Reader0[62],
    ltell = Async_unix_Reader0[63],
    load_sexp_exn = Async_unix_Reader0[68],
    load_annotated_sexp_exn = Async_unix_Reader0[69],
    load_sexp = Async_unix_Reader0[71],
    load_annotated_sexp = Async_unix_Reader0[72],
    load_sexps_exn = Async_unix_Reader0[74],
    load_annotated_sexps_exn = Async_unix_Reader0[75],
    load_sexps = Async_unix_Reader0[77],
    load_annotated_sexps = Async_unix_Reader0[78],
    pipe = Async_unix_Reader0[79],
    drain = Async_unix_Reader0[80],
    load_bin_prot = Async_unix_Reader0[81],
    load_bin_prot_exn = Async_unix_Reader0[82],
    cst_reader_of_string_contents_ = "reader of string contents for tests",
    _a_ = [0, 0],
    _b_ = [0, 751362817],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Reader = cst_Async_unix_Reader$0;
   function of_pipe(info, pipe_r){
    function _c_(param){
     var
      writer_fd = param[2][2],
      reader_fd = param[1][2],
      reader = caml_call2(create, 0, reader_fd),
      writer =
        caml_call7(Async_unix_Writer0[18], 0, 0, _b_, _a_, 0, 0, writer_fd);
     function _e_(param){
      return caml_call2(Async_unix_Writer0[65], 0, writer);
     }
     function _f_(s){
      return caml_call4(Async_unix_Writer0[33], 0, 0, writer, s);
     }
     var
      _g_ = [0, caml_call1(close_finished, reader)],
      _h_ = caml_call5(Async_unix_Writer0[86], _g_, 0, writer, pipe_r, _f_),
      _i_ = caml_call2(Async_unix_Import[33][2], _h_, _e_);
     caml_call1(Async_unix_Import[16], _i_);
     return reader;
    }
    var _d_ = caml_call1(Async_unix_Unix_syscalls[58], info);
    return caml_call2(Async_unix_Import[33][3], _d_, _c_);
   }
   function of_string(opt, str){
    if(opt)
     var sth = opt[1], info = sth;
    else
     var info = caml_call1(Core_Info[14], cst_reader_of_string_contents_);
    return of_pipe(info, caml_call1(Async_kernel_Pipe[11], str));
   }
   var For_testing = [0, of_string];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Reader);
   var
    Async_unix_Reader =
      [0,
       [0,
        Read_result[2],
        Read_result[3],
        Read_result[4],
        Read_result[7],
        Read_result[6],
        Read_result[5],
        Read_result[8],
        Read_result[9],
        Read_result[12],
        Read_result[11],
        Read_result[10],
        Read_result[13],
        Read_result[14],
        Read_result[15],
        Read_result[16],
        Read_result[17],
        Read_result[18],
        Read_result[19],
        Read_result[20],
        Read_result[21],
        Read_result[22],
        Read_result[23]],
       Id,
       sexp_of_t,
       invariant,
       bytes_read,
       last_read_time,
       stdin,
       open_file,
       transfer,
       pipe,
       of_pipe,
       create,
       of_in_channel,
       with_file,
       close,
       close_finished,
       is_closed,
       with_close,
       id,
       fd,
       read,
       peek,
       bytes_available,
       read_available,
       peek_available,
       drain,
       sexp_of_read_one_chunk_at_a_ti,
       sexp_of_handle_chunk_result,
       read_one_chunk_at_a_time,
       sexp_of_handle_iobuf_result,
       read_one_iobuf_at_a_time,
       read_substring,
       read_bigsubstring,
       read_char,
       really_read,
       really_read_substring,
       really_read_bigsubstring,
       read_until,
       read_until_bounded,
       read_line,
       really_read_line,
       read_sexp,
       read_sexps,
       read_annotated_sexps,
       read_bin_prot,
       peek_bin_prot,
       iter_bin_prot,
       iter_bin_prot_exn,
       read_bin_prot_into_pipe,
       read_marshal_raw,
       read_marshal,
       recv,
       read_all,
       lseek,
       ltell,
       lines,
       contents,
       file_contents,
       file_lines,
       load_sexp,
       load_sexp_exn,
       load_sexps,
       load_sexps_exn,
       load_annotated_sexp,
       load_annotated_sexp_exn,
       load_annotated_sexps,
       load_annotated_sexps_exn,
       load_bin_prot,
       load_bin_prot_exn,
       For_testing];
   runtime.caml_register_global
    (23, Async_unix_Reader, cst_Async_unix_Reader$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Writer
//# unitInfo: Requires: Async_kernel__Debug, Async_kernel__Deferred, Async_kernel__Monitor, Async_kernel__Pipe, Async_unix__Import, Async_unix__Reader, Async_unix__Unix_syscalls, Async_unix__Writer0, Core, Core__Info, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Writer$0 = "Async_unix__Writer",
    cst_Writer_of_pipe$1 = "Writer.of_pipe",
    cst_async_unix$0 = "async_unix",
    cst_src_writer_ml = "src/writer.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_unix_Import = global_data.Async_unix__Import,
    Assert_failure = global_data.Assert_failure,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Info = global_data.Core__Info,
    Core_Sexp = global_data.Core__Sexp,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core = global_data.Core,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Writer0 = global_data.Async_unix__Writer0;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Writer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_writer_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "writer.ml");
   var
    Id = Async_unix_Writer0[1],
    Line_ending = Async_unix_Writer0[2],
    sexp_of_t = Async_unix_Writer0[3],
    invariant = Async_unix_Writer0[4],
    stdout = Async_unix_Writer0[5],
    stderr = Async_unix_Writer0[6],
    bin_shape_buffer_age_limit = Async_unix_Writer0[7],
    bin_size_buffer_age_limit = Async_unix_Writer0[8],
    bin_write_buffer_age_limit = Async_unix_Writer0[9],
    bin_writer_buffer_age_limit = Async_unix_Writer0[10],
    bin_read_buffer_age_limit = Async_unix_Writer0[11],
    bin_read_buffer_age_limit$0 = Async_unix_Writer0[12],
    bin_reader_buffer_age_limit = Async_unix_Writer0[13],
    bin_buffer_age_limit = Async_unix_Writer0[14],
    sexp_of_buffer_age_limit = Async_unix_Writer0[15],
    buffer_age_limit_of_sexp = Async_unix_Writer0[16],
    buffer_age_limit_of_sexp$0 = Async_unix_Writer0[17],
    create = Async_unix_Writer0[18],
    raise_when_consumer_leaves = Async_unix_Writer0[19],
    set_raise_when_consumer_leaves = Async_unix_Writer0[20],
    set_buffer_age_limit = Async_unix_Writer0[21],
    consumer_left = Async_unix_Writer0[22],
    of_out_channel = Async_unix_Writer0[23],
    open_file = Async_unix_Writer0[24],
    with_file = Async_unix_Writer0[25],
    id = Async_unix_Writer0[26],
    fd = Async_unix_Writer0[27],
    set_fd = Async_unix_Writer0[28],
    write_gen = Async_unix_Writer0[29],
    write_gen_whole = Async_unix_Writer0[30],
    write_direct = Async_unix_Writer0[31],
    write_bytes = Async_unix_Writer0[32],
    write = Async_unix_Writer0[33],
    write_bigstring = Async_unix_Writer0[34],
    write_iobuf = Async_unix_Writer0[35],
    write_substring = Async_unix_Writer0[36],
    write_bigsubstring = Async_unix_Writer0[37],
    writef = Async_unix_Writer0[38],
    to_formatter = Async_unix_Writer0[39],
    write_char = Async_unix_Writer0[40],
    newline = Async_unix_Writer0[41],
    write_line = Async_unix_Writer0[42],
    write_byte = Async_unix_Writer0[43],
    Terminate_with = Async_unix_Writer0[44],
    write_sexp = Async_unix_Writer0[45],
    write_bin_prot = Async_unix_Writer0[46],
    write_bin_prot_no_size_header = Async_unix_Writer0[47],
    schedule_bigstring = Async_unix_Writer0[48],
    schedule_bigsubstring = Async_unix_Writer0[49],
    schedule_iobuf_peek = Async_unix_Writer0[50],
    schedule_iobuf_consume = Async_unix_Writer0[51],
    Destroy_or_keep = Async_unix_Writer0[52],
    schedule_iovec = Async_unix_Writer0[53],
    schedule_iovecs = Async_unix_Writer0[54],
    Flush_result = Async_unix_Writer0[55],
    flushed_or_failed_with_result = Async_unix_Writer0[56],
    flushed_or_failed_unit = Async_unix_Writer0[57],
    flushed = Async_unix_Writer0[58],
    flushed_time = Async_unix_Writer0[59],
    flushed_time_ns = Async_unix_Writer0[60],
    fsync = Async_unix_Writer0[61],
    fdatasync = Async_unix_Writer0[62],
    send = Async_unix_Writer0[63],
    monitor = Async_unix_Writer0[64],
    close = Async_unix_Writer0[65],
    close_started = Async_unix_Writer0[66],
    close_finished = Async_unix_Writer0[67],
    is_closed = Async_unix_Writer0[68],
    is_open = Async_unix_Writer0[69],
    with_close = Async_unix_Writer0[70],
    can_write = Async_unix_Writer0[71],
    is_stopped_permanently = Async_unix_Writer0[72],
    stopped_permanently = Async_unix_Writer0[73],
    with_flushed_at_close = Async_unix_Writer0[74],
    bytes_to_write = Async_unix_Writer0[75],
    bytes_written = Async_unix_Writer0[76],
    bytes_received = Async_unix_Writer0[77],
    with_file_atomic = Async_unix_Writer0[78],
    save = Async_unix_Writer0[79],
    save_lines = Async_unix_Writer0[80],
    save_sexp = Async_unix_Writer0[81],
    save_sexps = Async_unix_Writer0[82],
    save_sexps_conv = Async_unix_Writer0[83],
    save_bin_prot = Async_unix_Writer0[84],
    transfer = Async_unix_Writer0[85],
    transfer$0 = Async_unix_Writer0[86],
    pipe = Async_unix_Writer0[87],
    behave_nicely_in_pipeline = Async_unix_Writer0[88],
    set_synchronous_out_channel = Async_unix_Writer0[89],
    using_synchronous_backing_out_ = Async_unix_Writer0[90],
    clear_synchronous_out_channel = Async_unix_Writer0[91],
    with_synchronous_out_channel = Async_unix_Writer0[92],
    use_synchronous_stdout_and_std = Async_unix_Writer0[93],
    Backing_out_channel = Async_unix_Writer0[94],
    set_synchronous_backing_out_ch = Async_unix_Writer0[95],
    with_synchronous_backing_out_c = Async_unix_Writer0[96],
    Private = Async_unix_Writer0[97],
    _b_ = [0, 926227490, 1050608848],
    _c_ = [0, 926227490, 106380200],
    _a_ = [0, cst_src_writer_ml, 41, 46],
    cst_Writer_of_pipe$0 = cst_Writer_of_pipe$1,
    cst_Writer_of_pipe = cst_Writer_of_pipe$1,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Writer = cst_Async_unix_Writer$0;
   function of_pipe(time_source, info, pipe_w){
    function _j_(param){
     var
      writer_fd = param[2][2],
      reader_fd = param[1][2],
      reader = caml_call2(Async_unix_Reader[12], 0, reader_fd),
      writer = caml_call7(create, 0, 0, 0, 0, 0, time_source, writer_fd);
     if(Async_kernel_Debug[14]){
      var
       _l_ =
         function(param){
          var
           arg2_004 = param[3],
           arg1_003 = param[2],
           arg0_002 = param[1],
           res0_005 = caml_call2(Async_kernel_Pipe[3][1], Core[558], arg0_002),
           res1_006 = caml_call1(Async_unix_Reader[3], arg1_003),
           res2_007 = caml_call1(sexp_of_t, arg2_004);
          return [1, [0, res0_005, [0, res1_006, [0, res2_007, 0]]]];
         };
      caml_call3
       (Async_kernel_Debug[15],
        cst_Writer_of_pipe,
        [0, pipe_w, reader, writer],
        _l_);
     }
     function _m_(param){
      var
       _o_ = caml_call1(raise_when_consumer_leaves, writer),
       _p_ = _o_ ? 1 - caml_call1(is_closed, writer) : _o_;
      if(_p_){
       var
        _q_ = caml_call1(Core_Info[9], info),
        _r_ = caml_call1(Core_Sexp[86], _q_),
        _s_ =
          [0, Async_unix_Unix_syscalls[153], 31, cst_Writer_of_pipe$0, _r_],
        _t_ = caml_call1(monitor, writer);
       caml_call3(Async_kernel_Monitor[15], _t_, 0, _s_);
      }
      function _u_(param){
       var _y_ = 1 - caml_call1(Async_kernel_Pipe[17], pipe_w);
       return _y_ ? caml_call1(Async_kernel_Pipe[15], pipe_w) : _y_;
      }
      var
       _v_ = caml_call2(close, 0, writer),
       _w_ = caml_call1(Async_unix_Reader[15], reader),
       _x_ = caml_call2(Async_kernel_Deferred[20], _w_, _v_);
      return caml_call2(Async_unix_Import[33][3], _x_, _u_);
     }
     var
      _n_ = caml_call2(Async_unix_Reader[9], reader, pipe_w),
      closed_and_flushed_downstream =
        caml_call2(Async_unix_Import[33][2], _n_, _m_);
     return [0, writer, [0, -367689927, closed_and_flushed_downstream]];
    }
    var _k_ = caml_call1(Async_unix_Unix_syscalls[58], info);
    return caml_call2(Async_unix_Import[33][3], _k_, _j_);
   }
   function splice_result(t, from){
    function _e_(param){
     if(typeof param === "number") return 17724;
     if(280164845 > param[1])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var result = param[2];
     return result;
    }
    function _f_(buffer, pos, len){
     caml_call4(schedule_bigstring, t, [0, pos], [0, len], buffer);
     function _h_(param){
      return typeof param === "number" ? param ? _b_ : _c_ : 192584839;
     }
     var _i_ = caml_call1(flushed_or_failed_with_result, t);
     return caml_call2(Async_unix_Import[33][3], _i_, _h_);
    }
    var _g_ = caml_call2(Async_unix_Reader[29], from, _f_);
    return caml_call2(Async_unix_Import[33][3], _g_, _e_);
   }
   function splice(t, from){
    var _d_ = splice_result(t, from);
    return caml_call1(Async_kernel_Deferred[15], _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Writer);
   var
    Async_unix_Writer =
      [0,
       Id,
       Line_ending,
       sexp_of_t,
       invariant,
       stdout,
       stderr,
       bin_shape_buffer_age_limit,
       bin_size_buffer_age_limit,
       bin_write_buffer_age_limit,
       bin_writer_buffer_age_limit,
       bin_read_buffer_age_limit,
       bin_read_buffer_age_limit$0,
       bin_reader_buffer_age_limit,
       bin_buffer_age_limit,
       sexp_of_buffer_age_limit,
       buffer_age_limit_of_sexp,
       buffer_age_limit_of_sexp$0,
       create,
       raise_when_consumer_leaves,
       set_raise_when_consumer_leaves,
       set_buffer_age_limit,
       consumer_left,
       of_out_channel,
       open_file,
       with_file,
       id,
       fd,
       set_fd,
       write_gen,
       write_gen_whole,
       write_direct,
       write_bytes,
       write,
       write_bigstring,
       write_iobuf,
       write_substring,
       write_bigsubstring,
       writef,
       to_formatter,
       write_char,
       newline,
       write_line,
       write_byte,
       Terminate_with,
       write_sexp,
       write_bin_prot,
       write_bin_prot_no_size_header,
       schedule_bigstring,
       schedule_bigsubstring,
       schedule_iobuf_peek,
       schedule_iobuf_consume,
       Destroy_or_keep,
       schedule_iovec,
       schedule_iovecs,
       Flush_result,
       flushed_or_failed_with_result,
       flushed_or_failed_unit,
       flushed,
       flushed_time,
       flushed_time_ns,
       fsync,
       fdatasync,
       send,
       monitor,
       close,
       close_started,
       close_finished,
       is_closed,
       is_open,
       with_close,
       can_write,
       is_stopped_permanently,
       stopped_permanently,
       with_flushed_at_close,
       bytes_to_write,
       bytes_written,
       bytes_received,
       with_file_atomic,
       save,
       save_lines,
       save_sexp,
       save_sexps,
       save_sexps_conv,
       save_bin_prot,
       transfer,
       transfer$0,
       pipe,
       behave_nicely_in_pipeline,
       set_synchronous_out_channel,
       using_synchronous_backing_out_,
       clear_synchronous_out_channel,
       with_synchronous_out_channel,
       use_synchronous_stdout_and_std,
       Backing_out_channel,
       set_synchronous_backing_out_ch,
       with_synchronous_backing_out_c,
       Private,
       of_pipe,
       splice_result,
       splice];
   runtime.caml_register_global
    (28, Async_unix_Writer, cst_Async_unix_Writer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Unused
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Unused = "Async_unix__Unused",
    cst_async_unix = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Unused);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][1], "src/unused.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix, "unused.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Unused);
   var Async_unix_Unused = [0];
   runtime.caml_register_global(11, Async_unix_Unused, cst_Async_unix_Unused);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Time_source_tests
//# unitInfo: Requires: Async_kernel__Ivar, Async_kernel__Scheduler, Async_kernel__Time_source, Async_unix__Import, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Time_source_tes$0 = "Async_unix__Time_source_tests",
    cst_async_unix$0 = "async_unix",
    cst_src_time_source_tests_ml$5 = "src/time_source_tests.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_unix_Import = global_data.Async_unix__Import,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Time_source_tes$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_time_source_tests_ml$5);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_unix$0, "time_source_tests.ml");
   var
    run_cycles_until_no_jobs_remai = Async_kernel_Scheduler[15],
    _c_ = [0, 1],
    _b_ = [0, 0],
    cst_src_time_source_tests_ml = cst_src_time_source_tests_ml$5,
    cst_src_time_source_tests_ml$0 = cst_src_time_source_tests_ml$5,
    cst_let_iv_Ivar_create_in_let_ =
      "let iv = Ivar.create () in\nlet n = ref 0 in\nTime_source.run_repeatedly time_source ~stop:(Ivar.read iv)\n  ~continue_on_error:false\n  ~f:(fun () ->\n        if (!n) >= 1_000 then Ivar.fill_exn iv () else incr n; return ())\n  ~continue:Time_source.Continue.immediately;\nrun_cycles_until_no_jobs_remain ()",
    cst_continue_on_error_false = "~continue-on-error:false",
    cst_src_time_source_tests_ml$1 = cst_src_time_source_tests_ml$5,
    cst_src_time_source_tests_ml$2 = cst_src_time_source_tests_ml$5,
    cst_let_iv_Ivar_create_in_let_$0 =
      "let iv = Ivar.create () in\nlet n = ref 0 in\nTime_source.run_repeatedly time_source ~stop:(Ivar.read iv)\n  ~continue_on_error:true\n  ~f:(fun () ->\n        if (!n) >= 1_000 then Ivar.fill_exn iv () else incr n; return ())\n  ~continue:Time_source.Continue.immediately;\nrun_cycles_until_no_jobs_remain ()",
    cst_continue_on_error_true = "~continue_on_error:true",
    cst_src_time_source_tests_ml$3 = cst_src_time_source_tests_ml$5,
    cst_src_time_source_tests_ml$4 = cst_src_time_source_tests_ml$5,
    cst_Clock_every = "Clock.every",
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Time_source_tes = cst_Async_unix_Time_source_tes$0;
   if(Ppx_bench_lib_Benchmark_accumu[3]){
    var
     _a_ =
       function(param){
        var
         scheduler = caml_call1(Async_kernel_Scheduler[2], 0),
         time_source = caml_call1(Async_kernel_Time_source[40], scheduler[19]);
        if(Ppx_bench_lib_Benchmark_accumu[3]){
         var
          f =
            function(param, _h_){
             var
              iv = caml_call1(Async_kernel_Ivar[12], 0),
              n = [0, 0],
              _i_ = Async_kernel_Time_source[24][1];
             function _j_(param){
              if(caml_call2(Async_unix_Import[1], n[1], 1000))
               caml_call2(Async_kernel_Ivar[14], iv, 0);
              else
               n[1]++;
              return caml_call1(Async_unix_Import[30], 0);
             }
             var _k_ = [0, caml_call1(Async_kernel_Ivar[19], iv)];
             caml_call7
              (Async_kernel_Time_source[25],
               0,
               _k_,
               _b_,
               0,
               time_source,
               _j_,
               _i_);
             return caml_call1(run_cycles_until_no_jobs_remai, 0);
            };
         caml_call8
          (Ppx_bench_lib_Benchmark_accumu[5],
           cst_continue_on_error_false,
           cst_let_iv_Ivar_create_in_let_,
           cst_src_time_source_tests_ml$0,
           cst_src_time_source_tests_ml,
           12,
           4,
           412,
           [0, f]);
        }
        if(Ppx_bench_lib_Benchmark_accumu[3]){
         var
          f$0 =
            function(param, _d_){
             var
              iv = caml_call1(Async_kernel_Ivar[12], 0),
              n = [0, 0],
              _e_ = Async_kernel_Time_source[24][1];
             function _f_(param){
              if(caml_call2(Async_unix_Import[1], n[1], 1000))
               caml_call2(Async_kernel_Ivar[14], iv, 0);
              else
               n[1]++;
              return caml_call1(Async_unix_Import[30], 0);
             }
             var _g_ = [0, caml_call1(Async_kernel_Ivar[19], iv)];
             caml_call7
              (Async_kernel_Time_source[25],
               0,
               _g_,
               _c_,
               0,
               time_source,
               _f_,
               _e_);
             return caml_call1(run_cycles_until_no_jobs_remai, 0);
            };
         caml_call8
          (Ppx_bench_lib_Benchmark_accumu[5],
           cst_continue_on_error_true,
           cst_let_iv_Ivar_create_in_let_$0,
           cst_src_time_source_tests_ml$2,
           cst_src_time_source_tests_ml$1,
           26,
           4,
           410,
           [0, f$0]);
        }
        return 0;
       };
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[6],
      cst_Clock_every,
      cst,
      cst_src_time_source_tests_ml$4,
      cst_src_time_source_tests_ml$3,
      7,
      0,
      1011,
      _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Time_source_tes);
   var Async_unix_Time_source_tests = [0];
   runtime.caml_register_global
    (29, Async_unix_Time_source_tests, cst_Async_unix_Time_source_tes$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Tcp
//# unitInfo: Requires: Async_kernel__Async_invariant, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Time_source, Async_unix__Clock, Async_unix__Fd, Async_unix__Import, Async_unix__Reader, Async_unix__Unix_syscalls, Async_unix__Writer, Base__Exn, Base__Field, Core, Core__Bag, Core__Fn, Core__Host_and_port, Core__Info, Core__List, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Tcp$0 = "Async_unix__Tcp",
    cst = "_",
    cst_async_unix$0 = "async_unix",
    cst_client_address$0 = "client_address",
    cst_connections$0 = "connections",
    cst_listening_on = "listening_on",
    cst_max_accepts_per_batch$0 = "max_accepts_per_batch",
    cst_max_connections$0 = "max_connections",
    cst_src_tcp_ml = "src/tcp.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Async_unix_Import = global_data.Async_unix__Import,
    Core_List = global_data.Core__List,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_unix_Writer = global_data.Async_unix__Writer,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core = global_data.Core,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Fn = global_data.Core__Fn,
    Assert_failure = global_data.Assert_failure,
    Base_Field = global_data.Base__Field,
    Time_ns_unix = global_data.Time_ns_unix,
    Core_Info = global_data.Core__Info,
    Async_kernel_Async_invariant = global_data.Async_kernel__Async_invariant,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Core_Host_and_port = global_data.Core__Host_and_port,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Tcp$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_tcp_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "tcp.ml");
   var
    _ad_ = [0, 3804260],
    _ae_ = [0, 523273847],
    _af_ = [0, "Tcp.Server.create_sock_inet"],
    _aa_ = [0, 3804260],
    _ab_ = [0, 523273847],
    _ac_ = [0, "Tcp.Server.create_sock"],
    _$_ = [0, 1],
    _Z_ = [0, "retries_attempted_upon_addr_in_use"],
    ___ = [0, "exn"],
    cst_Failed_to_bind_and_listen_ = "Failed to bind and listen to socket.",
    cst_Tcp_Server_creater_got_neg =
      "Tcp.Server.creater got negative [max_connections]",
    _Y_ = [0, cst_src_tcp_ml, 522, 16945, 16961],
    _S_ = [0, cst],
    _R_ = [0, cst],
    _X_ = [0, cst_src_tcp_ml, 387, 13],
    _W_ = [0, cst_src_tcp_ml, 389, 47],
    _V_ = [0, cst_src_tcp_ml, 394, 13],
    _U_ = [0, cst_src_tcp_ml, 395, 13],
    cst_invariant_failed = "invariant failed",
    _T_ = [0, cst_src_tcp_ml, 401, 12337, 12359],
    _N_ = [0, "Passive"],
    _D_ = [0, "close_finished_and_handlers_determined"],
    _E_ = [0, "drop_incoming_connections"],
    _F_ = [0, "accept_is_pending"],
    _G_ = [0, cst_connections$0],
    _H_ = [0, cst_max_accepts_per_batch$0],
    _I_ = [0, cst_max_connections$0],
    _J_ = [0, "handle_client"],
    _K_ = [0, "Raise"],
    _P_ = [0, "Ignore"],
    _Q_ = [0, "Call"],
    _L_ = [0, "on_handler_error"],
    _M_ = [0, cst_listening_on],
    _O_ = [0, "socket"],
    _v_ = [0, cst_listening_on],
    _w_ = [0, "limit"],
    cst_At_limit_of_Tcp_server_max =
      "At limit of Tcp server [max_connections]. New connections will not be accepted until an existing connection is closed.",
    _t_ = [0, cst],
    _u_ = [0, cst_src_tcp_ml, 304, 8760, 8786],
    _r_ = [0, "Active"],
    _q_ = [0, cst_client_address$0],
    _s_ = [0, "client_socket"],
    _l_ = [0, cst_listening_on],
    _m_ = [0, "address"],
    _n_ = [0, "socket_type"],
    _j_ = [0, "On_port"],
    _k_ = [0, "On_port_chosen_by_os"],
    _g_ = [0, "Localhost"],
    _h_ = [0, "All_addresses"],
    _i_ = [0, "Address"],
    _d_ = [0, 3804260],
    _e_ = [0, 523273847],
    _f_ = [0, "Tcp.collect_errors"],
    cst_connection_attempt_timeout = "connection attempt timeout",
    cst_connection_attempt_aborted = "connection attempt aborted",
    _a_ = [0, 3804260],
    _b_ = [0, 523273847],
    _c_ = [0, "Tcp.close_sock_on_error"],
    cst_client_address = cst_client_address$0,
    cst_connections = cst_connections$0,
    cst_max_accepts_per_batch = cst_max_accepts_per_batch$0,
    cst_max_connections = cst_max_connections$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Tcp = cst_Async_unix_Tcp$0;
   function sexp_of_t(param, _cF_){var info = _cF_[4]; return info;}
   function sexp_of_inet(x_001){return x_001[4];}
   function sexp_of_unix(x_002){return x_002[4];}
   function remote_address(t){return caml_call1(t[2], 0);}
   function create_local_address(bind_to_address, bind_to_port){
    if(bind_to_address){
     var
      inet_addr = bind_to_address[1],
      port = caml_call2(Core_Option[39], bind_to_port, 0);
     return [0,
             caml_call2
              (Async_unix_Unix_syscalls[95][1][2][15], inet_addr, port)];
    }
    if(! bind_to_port) return 0;
    var port$0 = bind_to_port[1];
    return [0, caml_call1(Async_unix_Unix_syscalls[95][1][2][16], port$0)];
   }
   function of_host_and_port(bind_to_address, bind_to_port, opt, hp){
    if(opt)
     var sth = opt[1], show_port_in_test = sth;
    else
     var show_port_in_test = 0;
    var
     port = hp[2],
     host = hp[1],
     _cA_ =
       show_port_in_test
        ? caml_call1(Core_Host_and_port[14], hp)
        : caml_call1(Core_Host_and_port[47][10], hp),
     _cB_ = create_local_address(bind_to_address, bind_to_port);
    function _cC_(param){
     function _cD_(inet_addr){
      return caml_call2
              (Async_unix_Unix_syscalls[95][1][2][15], inet_addr, port);
     }
     var _cE_ = caml_call1(Async_unix_Unix_syscalls[92][43], host);
     return caml_call2(Async_unix_Import[32], _cE_, _cD_);
    }
    return [0, Async_unix_Unix_syscalls[95][4][2], _cC_, _cB_, _cA_];
   }
   function of_file(file){
    var _cw_ = caml_call1(Core[558], file), _cx_ = 0;
    function _cy_(param){
     var _cz_ = caml_call1(Async_unix_Unix_syscalls[95][1][1][13], file);
     return caml_call1(Async_unix_Import[30], _cz_);
    }
    return [0, Async_unix_Unix_syscalls[95][4][4], _cy_, _cx_, _cw_];
   }
   function of_inet_address(bind_to_address, bind_to_port, opt, address){
    if(opt)
     var sth = opt[1], show_port_in_test = sth;
    else
     var show_port_in_test = 0;
    var
     _ct_ =
       show_port_in_test
        ? caml_call1(Async_unix_Unix_syscalls[95][1][2][14][1], address)
        : caml_call1(Async_unix_Unix_syscalls[95][1][2][12], address),
     _cu_ = create_local_address(bind_to_address, bind_to_port);
    function _cv_(param){return caml_call1(Async_unix_Import[30], address);}
    return [0, Async_unix_Unix_syscalls[95][4][2], _cv_, _cu_, _ct_];
   }
   function of_unix_address(address){
    var
     _cq_ = caml_call1(Async_unix_Unix_syscalls[95][1][1][9], address),
     _cr_ = 0;
    function _cs_(param){return caml_call1(Async_unix_Import[30], address);}
    return [0, Async_unix_Unix_syscalls[95][4][4], _cs_, _cr_, _cq_];
   }
   function reader_writer_of_sock
   (buffer_age_limit, reader_buffer_size, writer_buffer_size, s){
    var
     fd = caml_call1(Async_unix_Unix_syscalls[95][18], s),
     _cp_ =
       caml_call7
        (Async_unix_Writer[18],
         writer_buffer_size,
         0,
         buffer_age_limit,
         0,
         0,
         0,
         fd);
    return [0,
            caml_call2(Async_unix_Reader[12], reader_buffer_size, fd),
            _cp_];
   }
   function connect_sock
   (socket, interrupt, opt, time_source, where_to_connect){
    if(opt)
     var sth = opt[1], timeout = sth;
    else
     var timeout = caml_call1(Core[630], 10.);
    if(time_source)
     var
      x = time_source[1],
      time_source$0 = caml_call1(Async_kernel_Time_source[8], x);
    else
     var time_source$0 = caml_call1(Async_kernel_Time_source[10], 0);
    function _b7_(address){
     var
      _b9_ = caml_call1(Time_ns_unix[72][146], timeout),
      timeout$0 =
        caml_call2(Async_kernel_Time_source[33][19], time_source$0, _b9_);
     function _b__(param){
      return 0 === param[0]
              ? caml_call1(Async_kernel_Deferred[19], 0)
              : Async_kernel_Deferred[18];
     }
     var
      _b$_ = caml_call1(Async_kernel_Time_source[33][14], timeout$0),
      timeout$1 = caml_call2(Async_unix_Import[31], _b$_, _b__);
     if(interrupt)
      var
       interrupt$0 = interrupt[1],
       interrupt$1 =
         caml_call1
          (Async_kernel_Deferred[23], [0, interrupt$0, [0, timeout$1, 0]]);
     else
      var interrupt$1 = timeout$1;
     function connect_interruptible(s){
      return caml_call3
              (Async_unix_Unix_syscalls[95][7], s, address, interrupt$1);
     }
     function _ca_(result){
      if(socket)
       var s = socket[1], s$0 = s;
      else
       var
        s$0 = caml_call1(Async_unix_Unix_syscalls[95][5], where_to_connect[1]);
      function _ce_(param){
       if(typeof param !== "number"){
        var s = param[2];
        caml_call2(Async_kernel_Time_source[33][12], timeout$0, 0);
        return caml_call2(Async_kernel_Ivar[14], result, s);
       }
       var
        _cj_ = caml_call1(Async_unix_Unix_syscalls[95][18], s$0),
        _ck_ = caml_call2(Async_unix_Unix_syscalls[16], 0, _cj_);
       caml_call1(Async_unix_Import[16], _ck_);
       var
        address$0 = caml_call1(Async_unix_Unix_syscalls[95][1][13], address),
        match = caml_call2(Async_kernel_Time_source[33][10], timeout$0, 0);
       if(typeof match !== "number" && 1 === match[0]){
        var
         _cn_ = [0, caml_call1(Core[558], address$0), 0],
         _co_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_connection_attempt_timeout),
             _cn_]];
        return caml_call1(Core[261], _co_);
       }
       var
        _cl_ = [0, caml_call1(Core[558], address$0), 0],
        _cm_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_connection_attempt_aborted),
            _cl_]];
       return caml_call1(Core[261], _cm_);
      }
      function f(param){
       var match = where_to_connect[3];
       if(! match) return connect_interruptible(s$0);
       var local_interface = match[1];
       function _ch_(s){return connect_interruptible(s);}
       var
        _ci_ =
          caml_call3(Async_unix_Unix_syscalls[95][9], 0, s$0, local_interface);
       return caml_call2(Async_unix_Import[31], _ci_, _ch_);
      }
      function _cb_(param){
       if(0 === param[0]){var v = param[1]; return v;}
       var
        e = param[1],
        _cf_ = caml_call1(Async_unix_Unix_syscalls[95][18], s$0),
        _cg_ = caml_call2(Async_unix_Unix_syscalls[16], 0, _cf_);
       caml_call1(Async_unix_Import[16], _cg_);
       throw caml_maybe_attach_backtrace(e, 0);
      }
      var
       _cc_ = caml_call7(Async_kernel_Monitor[16], 0, 0, _c_, 0, _b_, _a_, f),
       _cd_ = caml_call2(Async_unix_Import[32], _cc_, _cb_);
      return caml_call2(Async_unix_Import[27], _cd_, _ce_);
     }
     return caml_call1(Async_kernel_Deferred[3], _ca_);
    }
    var _b8_ = caml_call1(where_to_connect[2], 0);
    return caml_call2(Async_unix_Import[31], _b8_, _b7_);
   }
   function connect
   (socket,
    buffer_age_limit,
    interrupt,
    reader_buffer_size,
    writer_buffer_size,
    timeout,
    time_source,
    where_to_connect){
    function _b5_(s){
     var
      match =
        reader_writer_of_sock
         (buffer_age_limit, reader_buffer_size, writer_buffer_size, s),
      w = match[2],
      r = match[1];
     return [0, s, r, w];
    }
    var
     _b6_ =
       connect_sock(socket, interrupt, timeout, time_source, where_to_connect);
    return caml_call2(Async_unix_Import[32], _b6_, _b5_);
   }
   function collect_errors(writer, f){
    var monitor = caml_call1(Async_unix_Writer[64], writer);
    caml_call1(Async_kernel_Monitor[9], monitor);
    var _bX_ = 0;
    function _bY_(_b4_){return _b4_;}
    var
     _bZ_ = caml_call7(Async_kernel_Monitor[16], 0, 0, _f_, 0, _e_, _d_, f),
     _b0_ = [0, caml_call2(Async_unix_Import[14], _bZ_, _bY_), _bX_];
    function _b1_(e){return [1, e];}
    var
     _b2_ = caml_call1(Async_kernel_Monitor[10], monitor),
     _b3_ = [0, caml_call2(Async_unix_Import[14], _b2_, _b1_), _b0_];
    return caml_call1(Async_unix_Import[15], _b3_);
   }
   function close_connection_via_reader_an(r, w){
    var
     _bS_ = caml_call1(Core[630], 30.),
     force_close_event = caml_call1(Async_unix_Clock[7][16], _bS_);
    function _bT_(param){
     return 0 === param[0]
             ? caml_call1(Async_kernel_Deferred[19], 0)
             : Async_kernel_Deferred[18];
    }
    var
     _bU_ = caml_call1(Async_unix_Clock[7][12], force_close_event),
     force_close = caml_call2(Async_unix_Import[31], _bU_, _bT_);
    function _bV_(param){
     caml_call2(Async_unix_Clock[7][11], force_close_event, 0);
     return caml_call1(Async_unix_Reader[15], r);
    }
    var _bW_ = caml_call2(Async_unix_Writer[65], [0, force_close], w);
    return caml_call2(Async_unix_Import[31], _bW_, _bV_);
   }
   function with_connection
   (buffer_age_limit,
    interrupt,
    reader_buffer_size,
    writer_buffer_size,
    timeout,
    time_source,
    where_to_connect,
    f){
    function _bH_(socket){
     var
      match =
        reader_writer_of_sock
         (buffer_age_limit, reader_buffer_size, writer_buffer_size, socket),
      w = match[2],
      r = match[1],
      res =
        collect_errors
         (w, function(param){return caml_call3(f, socket, r, w);});
     function _bJ_(param){
      function _bP_(param){
       function _bR_(param){
        if(0 === param[0]){var v = param[1]; return v;}
        var e = param[1];
        throw caml_maybe_attach_backtrace(e, 0);
       }
       return caml_call2(Async_unix_Import[32], res, _bR_);
      }
      var _bQ_ = close_connection_via_reader_an(r, w);
      return caml_call2(Async_unix_Import[31], _bQ_, _bP_);
     }
     var
      _bK_ = [0, caml_call1(Async_unix_Writer[67], w), 0],
      _bL_ = [0, caml_call1(Async_unix_Reader[16], r), _bK_];
     function _bM_(param){return 0;}
     var
      _bN_ = [0, caml_call2(Async_unix_Import[32], res, _bM_), _bL_],
      _bO_ = caml_call1(Async_kernel_Deferred[23], _bN_);
     return caml_call2(Async_unix_Import[31], _bO_, _bJ_);
    }
    var
     _bI_ = connect_sock(0, interrupt, timeout, time_source, where_to_connect);
    return caml_call2(Async_unix_Import[31], _bI_, _bH_);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return param ? _g_ : _h_;
    var
     arg0_003 = param[1],
     res0_004 = caml_call1(Async_unix_Unix_syscalls[92][11], arg0_003);
    return [1, [0, _i_, [0, res0_004, 0]]];
   }
   var Bind_to_address = [0, sexp_of_t$0];
   function sexp_of_t$1(param){
    if(! param) return _k_;
    var arg0_005 = param[1], res0_006 = caml_call1(Core[389], arg0_005);
    return [1, [0, _j_, [0, res0_006, 0]]];
   }
   var Bind_to_port = [0, sexp_of_t$1];
   function sexp_of_t$2(of_address_007, of_listening_on_008, param){
    var
     listening_on_014 = param[3],
     address_012 = param[2],
     socket_type_010 = param[1],
     arg_015 = caml_call1(Sexplib0_Sexp_conv[23], listening_on_014),
     bnds_009 = [0, [1, [0, _l_, [0, arg_015, 0]]], 0],
     arg_013 = caml_call1(of_address_007, address_012),
     bnds_009$0 = [0, [1, [0, _m_, [0, arg_013, 0]]], bnds_009],
     arg_011 =
       caml_call2
        (Async_unix_Unix_syscalls[95][4][1], of_address_007, socket_type_010),
     bnds_009$1 = [0, [1, [0, _n_, [0, arg_011, 0]]], bnds_009$0];
    return [1, bnds_009$1];
   }
   function address(r){return r[2];}
   function sexp_of_inet$0(x_016){
    return sexp_of_t$2
            (Async_unix_Unix_syscalls[95][1][2][12], Core[389], x_016);
   }
   function sexp_of_unix$0(x_017){
    return sexp_of_t$2
            (Async_unix_Unix_syscalls[95][1][1][9], Core[558], x_017);
   }
   function create(socket_type, address, listening_on){return [0, socket_type, address, listening_on];
   }
   function bind_to(bind_to_address, bind_to_port){
    if(bind_to_port)
     var port = bind_to_port[1], port$0 = port;
    else
     var port$0 = 0;
    if(typeof bind_to_address === "number")
     var
      address =
        bind_to_address
         ? caml_call2
           (Async_unix_Unix_syscalls[95][1][2][15],
            Async_unix_Unix_syscalls[92][37],
            port$0)
         : caml_call1(Async_unix_Unix_syscalls[95][1][2][16], port$0);
    else
     var
      addr = bind_to_address[1],
      address =
        caml_call2(Async_unix_Unix_syscalls[95][1][2][15], addr, port$0);
    function _bG_(param){var port = param[2][2]; return port;}
    return [0, Async_unix_Unix_syscalls[95][4][2], address, _bG_];
   }
   function of_port(port){return bind_to(0, [0, port]);}
   var of_port_chosen_by_os = bind_to(0, 0);
   function of_file$0(path){
    function _bE_(param){return path;}
    var _bF_ = caml_call1(Async_unix_Unix_syscalls[95][1][1][13], path);
    return [0, Async_unix_Unix_syscalls[95][4][4], _bF_, _bE_];
   }
   function client_address(r){return r[2];}
   function _o_(r, v){return [0, r[1], v];}
   var
    _p_ = 0,
    client_address$0 =
      [0,
       function(param){return 0;},
       cst_client_address,
       _p_,
       client_address,
       _o_];
   function sexp_of_t$3(of_address_018, param){
    var
     client_address_022 = param[2],
     client_socket_020 = param[1],
     arg_023 = caml_call1(of_address_018, client_address_022),
     bnds_019 = [0, [1, [0, _q_, [0, arg_023, 0]]], 0];
    function _bD_(param){return _r_;}
    var
     arg_021 =
       caml_call3
        (Async_unix_Unix_syscalls[95][3],
         _bD_,
         of_address_018,
         client_socket_020),
     bnds_019$0 = [0, [1, [0, _s_, [0, arg_021, 0]]], bnds_019];
    return [1, bnds_019$0];
   }
   function close(t){
    var _bC_ = caml_call1(Async_unix_Unix_syscalls[95][18], t[1]);
    return caml_call2(Async_unix_Fd[12], 0, _bC_);
   }
   function create$0(limit, time_source, listening_on){return [0, limit, time_source, listening_on, 0];
   }
   var
    log_threshold = caml_call1(Time_ns_unix[72][83], 1.),
    max_connection_limit_logger = [0, caml_call1(Core[257], 0)];
   function set_max_connection_limit_logge(_bB_){
    max_connection_limit_logger[1] = _bB_;
    return 0;
   }
   function log_at_limit(t, now){
    var
     _by_ = [0, [1, [0, _v_, [0, caml_call1(Core_Info[9], t[3]), 0]]], 0],
     _bz_ = [0, [1, [0, _w_, [0, caml_call1(Core[389], t[1]), 0]]], _by_],
     _bA_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_At_limit_of_Tcp_server_max),
         _bz_]];
    caml_call1(max_connection_limit_logger[1], _bA_);
    t[4] = [0, now];
    return 0;
   }
   function set_drop_incoming_connections(r, v){r[9] = v; return 0;}
   function connections(r){return r[7];}
   function max_accepts_per_batch(r){return r[6];}
   function max_connections(r){return r[5];}
   function listening_on(r){return r[2];}
   function socket(r){return r[1];}
   function _x_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8], r[9], r[10]];
   }
   var
    _y_ = 0,
    connections$0 =
      [0, function(param){return 0;}, cst_connections, _y_, connections, _x_];
   function _z_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8], r[9], r[10]];
   }
   var
    _A_ = 0,
    max_accepts_per_batch$0 =
      [0,
       function(param){return 0;},
       cst_max_accepts_per_batch,
       _A_,
       max_accepts_per_batch,
       _z_];
   function _B_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _C_ = 0,
    max_connections$0 =
      [0,
       function(param){return 0;},
       cst_max_connections,
       _C_,
       max_connections,
       _B_];
   function sexp_of_t$4(of_address_025, of_listening_on_026, param){
    var
     connections_041 = param[7],
     max_accepts_per_batch_039 = param[6],
     max_connections_037 = param[5],
     on_handler_error_032 = param[3],
     listening_on_030 = param[2],
     socket_028 = param[1],
     accept_is_pending_043 = param[8],
     drop_incoming_connections_045 = param[9],
     close_finished_and_handlers_de = param[10],
     arg_048 =
       caml_call2
        (Async_kernel_Ivar[9], Core[620], close_finished_and_handlers_de),
     bnds_027 = [0, [1, [0, _D_, [0, arg_048, 0]]], 0],
     arg_046 = caml_call1(Core[323], drop_incoming_connections_045),
     bnds_027$0 = [0, [1, [0, _E_, [0, arg_046, 0]]], bnds_027],
     arg_044 = caml_call1(Core[323], accept_is_pending_043),
     bnds_027$1 = [0, [1, [0, _F_, [0, arg_044, 0]]], bnds_027$0];
    function _bq_(_bx_){return sexp_of_t$3(of_address_025, _bx_);}
    var
     arg_042 = caml_call2(Core_Bag[3], _bq_, connections_041),
     bnds_027$2 = [0, [1, [0, _G_, [0, arg_042, 0]]], bnds_027$1],
     arg_040 = caml_call1(Core[389], max_accepts_per_batch_039),
     bnds_027$3 = [0, [1, [0, _H_, [0, arg_040, 0]]], bnds_027$2],
     arg_038 = caml_call1(Core[389], max_connections_037[1]),
     bnds_027$4 = [0, [1, [0, _I_, [0, arg_038, 0]]], bnds_027$3];
    function _br_(_bw_){return 0;}
    var
     arg_036 = caml_call1(Sexplib0_Sexp_conv[24], _br_),
     bnds_027$5 = [0, [1, [0, _J_, [0, arg_036, 0]]], bnds_027$4];
    if(typeof on_handler_error_032 === "number")
     var arg_033 = -146189108 <= on_handler_error_032 ? _K_ : _P_;
    else
     var
      _bt_ = 0,
      _bu_ = function(_bv_){return 0;},
      arg_033 =
        [1, [0, _Q_, [0, caml_call1(Sexplib0_Sexp_conv[24], _bu_), _bt_]]];
    var
     bnds_027$6 = [0, [1, [0, _L_, [0, arg_033, 0]]], bnds_027$5],
     arg_031 = caml_call1(of_listening_on_026, listening_on_030),
     bnds_027$7 = [0, [1, [0, _M_, [0, arg_031, 0]]], bnds_027$6];
    function _bs_(param){return _N_;}
    var
     arg_029 =
       caml_call3
        (Async_unix_Unix_syscalls[95][3], _bs_, of_address_025, socket_028),
     bnds_027$8 = [0, [1, [0, _O_, [0, arg_029, 0]]], bnds_027$7];
    return [1, bnds_027$8];
   }
   function is_dropping_incoming_connectio(t){return t[9];}
   function num_connections(t){return caml_call1(Core_Bag[5], t[7]);}
   function sexp_of_inet$1(x_049){
    return sexp_of_t$4
            (Async_unix_Unix_syscalls[95][1][2][12], Core[389], x_049);
   }
   function sexp_of_unix$1(x_050){
    return sexp_of_t$4
            (Async_unix_Unix_syscalls[95][1][1][9], Core[558], x_050);
   }
   function listening_on_address(t){
    return caml_call1(Async_unix_Unix_syscalls[95][20], t[1]);
   }
   function invariant(t){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t));
        },
      _bj_ =
        function(connections){
         function invariant_address(_bp_){return 0;}
         function _bm_(t){
          function _bn_(param){
           var
            client_address_fun =
              caml_call2
               (Async_kernel_Async_invariant[2], t, invariant_address);
           return caml_call1(client_address_fun, client_address$0);
          }
          function _bo_(x_024){
           return sexp_of_t$3(function(param){return _t_;}, x_024);
          }
          return caml_call4
                  (Async_kernel_Async_invariant[1], _u_, t, _bo_, _bn_);
         }
         caml_call2(Core_Bag[21], _bm_, connections);
         var num_connections$0 = num_connections(t);
         if(! caml_call2(Async_unix_Import[1], num_connections$0, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
         if(caml_call2(Async_unix_Import[2], num_connections$0, t[5][1]))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
        },
      _bk_ =
        function(max_accepts_per_batch){
         if(caml_call2(Async_unix_Import[1], max_accepts_per_batch, 1))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
        };
     check
      (function(max_connections){
        if(caml_call2(Async_unix_Import[1], max_connections[1], 1)) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
       },
       max_connections$0);
     check(_bk_, max_accepts_per_batch$0);
     check(_bj_, connections$0);
     var _bh_ = 0;
     return _bh_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _bi_ =
        function(param){
         var
          arg1_052 = param[2],
          arg0_051 = param[1],
          res0_053 = caml_call1(Core[625], arg0_051);
         function _bl_(param){return _R_;}
         var
          res1_054 = sexp_of_t$4(function(param){return _S_;}, _bl_, arg1_052);
         return [1, [0, res0_053, [0, res1_054, 0]]];
        };
     return caml_call5
             (Core[247], 0, _T_, cst_invariant_failed, [0, exn, t], _bi_);
    }
   }
   function fd(t){return caml_call1(Async_unix_Unix_syscalls[95][18], t[1]);}
   function is_closed(t){
    var _bg_ = fd(t);
    return caml_call1(Async_unix_Fd[16], _bg_);
   }
   function close_finished(t){
    var _bf_ = fd(t);
    return caml_call1(Async_unix_Fd[15], _bf_);
   }
   function close_finished_and_handlers_de(t){
    return caml_call1(Async_kernel_Ivar[19], t[10]);
   }
   function close$0(opt, t){
    if(opt)
     var sth = opt[1], close_existing_connections = sth;
    else
     var close_existing_connections = 0;
    var _bc_ = fd(t), fd_closed = caml_call2(Async_unix_Fd[12], 0, _bc_);
    if(! close_existing_connections) return fd_closed;
    var
     _bd_ = caml_call1(Core_Bag[17], t[7]),
     _be_ = [0, fd_closed, caml_call2(Core_List[51], _bd_, close)];
    return caml_call1(Async_kernel_Deferred[22], _be_);
   }
   function maybe_accept(t){
    var _aV_ = num_connections(t), available_slots = t[5][1] - _aV_ | 0;
    if
     (!
      is_closed(t)
      && caml_call2(Async_unix_Import[4], available_slots, 0) && ! t[8]){
     t[8] = 1;
     var
      _aY_ =
        function(accept_result){
         t[8] = 0;
         if(typeof accept_result === "number") return 0;
         var conns = accept_result[2];
         a:
         {
          if(! is_closed(t) && ! t[9]){
           var
            _a2_ =
              function(param){
               var
                client_address = param[2],
                client_socket = param[1],
                connection = [0, client_socket, client_address],
                connections_elt = caml_call2(Core_Bag[23], t[7], connection);
               function _a5_(res){
                function _a7_(param){
                 caml_call2(Core_Bag[26], t[7], connections_elt);
                 var
                  _a9_ = close_finished(t),
                  _a__ = caml_call1(Async_kernel_Deferred[7], _a9_);
                 if(_a__)
                  var
                   _a$_ = num_connections(t),
                   _ba_ = caml_call2(Async_unix_Import[3], _a$_, 0);
                 else
                  var _ba_ = _a__;
                 if(_ba_) caml_call2(Async_kernel_Ivar[16], t[10], 0);
                 if(0 !== res[0]){
                  var e = res[1];
                  try{
                   var match = t[3];
                   if(typeof match === "number"){
                    if(-146189108 <= match)
                     throw caml_maybe_attach_backtrace(e, 0);
                   }
                   else{var f = match[2]; caml_call2(f, client_address, e);}
                  }
                  catch(e){
                   var e$0 = caml_wrap_exception(e), _bb_ = close$0(0, t);
                   caml_call1(Async_unix_Import[16], _bb_);
                   throw caml_maybe_attach_backtrace(e$0, 0);
                  }
                 }
                 return maybe_accept(t);
                }
                var _a8_ = close(connection);
                return caml_call2(Async_unix_Import[27], _a8_, _a7_);
               }
               var _a6_ = caml_call2(t[4], client_address, client_socket);
               return caml_call2(Async_unix_Import[27], _a6_, _a5_);
              };
           caml_call2(Core_List[19], conns, _a2_);
           break a;
          }
          var
           _a1_ =
             function(param){
              var
               sock = param[1],
               _a3_ = caml_call1(Async_unix_Unix_syscalls[95][18], sock),
               _a4_ = caml_call2(Async_unix_Fd[12], 0, _a3_);
              return caml_call1(Async_unix_Import[16], _a4_);
             };
          caml_call2(Core_List[19], conns, _a1_);
         }
         return maybe_accept(t);
        },
      _aZ_ = caml_call2(Async_unix_Import[9], t[6], available_slots),
      _a0_ = caml_call2(Async_unix_Unix_syscalls[95][15], t[1], _aZ_);
     return caml_call2(Async_unix_Import[27], _a0_, _aY_);
    }
    var
     _aW_ = 1 - is_closed(t),
     _aX_ = _aW_ ? caml_call2(Async_unix_Import[3], available_slots, 0) : _aW_;
    if(! _aX_) return _aX_;
    var
     t$0 = t[5],
     now = caml_call1(Async_kernel_Time_source[14], t$0[2]),
     match = t$0[4];
    if(! match) return log_at_limit(t$0, now);
    var
     last_logged = match[1],
     _aT_ = caml_call2(Time_ns_unix[47], now, last_logged),
     _aU_ = caml_call2(Time_ns_unix[72][18], _aT_, log_threshold);
    return _aU_ ? log_at_limit(t$0, now) : _aU_;
   }
   function create_from_socket
   (max_connections,
    opt,
    _aL_,
    on_handler_error,
    where_to_listen,
    handle_client,
    socket){
    if(opt)
     var sth = opt[1], max_accepts_per_batch = sth;
    else
     var max_accepts_per_batch = 1;
    if(_aL_)
     var sth$0 = _aL_[1], drop_incoming_connections = sth$0;
    else
     var drop_incoming_connections = 0;
    var
     _aM_ = caml_call1(Async_kernel_Ivar[12], 0),
     _aN_ = caml_call1(Core_Bag[22], 0),
     _aO_ = caml_call1(Async_unix_Unix_syscalls[95][20], socket),
     t =
       [0,
        socket,
        caml_call1(where_to_listen[3], _aO_),
        on_handler_error,
        handle_client,
        max_connections,
        max_accepts_per_batch,
        _aN_,
        0,
        drop_incoming_connections,
        _aM_];
    function _aP_(param){
     var
      _aR_ = num_connections(t),
      _aS_ = caml_call2(Async_unix_Import[3], _aR_, 0);
     return _aS_ ? caml_call2(Async_kernel_Ivar[16], t[10], 0) : _aS_;
    }
    var _aQ_ = close_finished(t);
    caml_call2(Async_unix_Import[27], _aQ_, _aP_);
    maybe_accept(t);
    return t;
   }
   function get_max_connections_limit(max_connections){
    if(! max_connections) return 10000;
    var max_connections$0 = max_connections[1];
    if(caml_call2(Async_unix_Import[2], max_connections$0, 0))
     caml_call5
      (Core[247],
       0,
       _Y_,
       cst_Tcp_Server_creater_got_neg,
       max_connections$0,
       Core[389]);
    return max_connections$0;
   }
   function create$1(maybe_socket, where_to_listen){
    if(maybe_socket){
     var socket = maybe_socket[1];
     return [0, caml_call1(Core_Fn[1], socket), 0];
    }
    var inet = where_to_listen[2];
    if(948106920 <= inet[1])
     var match = 0;
    else
     var
      _aJ_ = caml_call1(Async_unix_Unix_syscalls[95][1][2][18], inet),
      match = caml_call2(Async_unix_Import[3], _aJ_, 0);
    var _aK_ = match ? 10 : 0;
    return [0,
            function(param){
             var
              socket =
                caml_call1
                 (Async_unix_Unix_syscalls[95][5], where_to_listen[1]);
             caml_call3
              (Async_unix_Unix_syscalls[95][24],
               socket,
               Async_unix_Unix_syscalls[95][22][3],
               1);
             return socket;
            },
            _aK_];
   }
   function handle_exn(t, socket, exn, retries_attempted_upon_addr_in){
    var
     _aD_ = caml_call1(Async_unix_Unix_syscalls[95][18], socket),
     _aE_ = caml_call2(Async_unix_Unix_syscalls[16], 0, _aD_);
    caml_call1(Async_unix_Import[16], _aE_);
    if
     (caml_call2(Async_unix_Import[4], t[2], retries_attempted_upon_addr_in)
      && exn[1] === Async_unix_Unix_syscalls[153]){
     var _aF_ = exn[2];
     if(typeof _aF_ === "number" && 50 === _aF_) return;
    }
    if(! caml_call2(Async_unix_Import[4], retries_attempted_upon_addr_in, 0))
     throw caml_maybe_attach_backtrace(exn, 0);
    var
     _aG_ =
       [0,
        [1,
         [0,
          _Z_,
          [0, caml_call1(Core[389], retries_attempted_upon_addr_in), 0]]],
        0],
     _aH_ = [0, [1, [0, ___, [0, caml_call1(Base_Exn[1], exn), 0]]], _aG_],
     _aI_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Failed_to_bind_and_listen_),
         _aH_]];
    return caml_call1(Core[261], _aI_);
   }
   function aux_bind_and_listen_maybe_retr
   (t, retries_attempted_upon_addr_in, f){
    var socket = caml_call1(t[1], 0);
    function _aA_(param){
     if(0 === param[0]){
      var v = param[1];
      return caml_call1(Async_unix_Import[30], v);
     }
     var exn = param[1];
     handle_exn(t, socket, exn, retries_attempted_upon_addr_in);
     return aux_bind_and_listen_maybe_retr
             (t, retries_attempted_upon_addr_in + 1 | 0, f);
    }
    function _aB_(param){return caml_call1(f, socket);}
    var _aC_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, _$_, 0, 0, _aB_);
    return caml_call2(Async_unix_Import[33][2], _aC_, _aA_);
   }
   function create_sock_non_inet_internal
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    if(time_source)
     var
      x = time_source[1],
      time_source$0 = caml_call1(Async_kernel_Time_source[8], x);
    else
     var time_source$0 = caml_call1(Async_kernel_Time_source[10], 0);
    function _au_(socket){
     var
      _ay_ = caml_call1(Async_unix_Unix_syscalls[95][18], socket),
      _az_ = caml_call1(Async_unix_Fd[4], _ay_),
      max_connections$0 =
        create$0
         (get_max_connections_limit(max_connections), time_source$0, _az_);
     return create_from_socket
             (max_connections$0,
              max_accepts_per_batch,
              drop_incoming_connections,
              on_handler_error,
              where_to_listen,
              handle_client,
              socket);
    }
    var
     socket_creator = create$1(socket, where_to_listen),
     _av_ =
       aux_bind_and_listen_maybe_retr
        (socket_creator,
         0,
         function(socket){
          var
           _aw_ = caml_call1(Async_unix_Unix_syscalls[95][12], backlog),
           _ax_ =
             caml_call2
              (Async_unix_Unix_syscalls[95][8], socket, where_to_listen[2]);
          return caml_call2(Async_unix_Import[32], _ax_, _aw_);
         });
    return caml_call2(Async_unix_Import[33][3], _av_, _au_);
   }
   function create_sock_inet_internal
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket$0,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    if(time_source)
     var
      x = time_source[1],
      time_source$0 = caml_call1(Async_kernel_Time_source[8], x);
    else
     var time_source$0 = caml_call1(Async_kernel_Time_source[10], 0);
    var
     socket_creator = create$1(socket$0, where_to_listen),
     retries_attempted_upon_addr_in = 0;
    for(;;){
     var socket = caml_call1(socket_creator[1], 0);
     try{
      var
       _ar_ =
         caml_call2
          (Async_unix_Unix_syscalls[95][10], socket, where_to_listen[2]),
       socket$1 = caml_call2(Async_unix_Unix_syscalls[95][12], backlog, _ar_);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      handle_exn(socket_creator, socket, exn, retries_attempted_upon_addr_in);
      var
       retries_attempted_upon_addr_in$0 =
         retries_attempted_upon_addr_in + 1 | 0,
       retries_attempted_upon_addr_in = retries_attempted_upon_addr_in$0;
      continue;
     }
     var
      _as_ = caml_call1(Async_unix_Unix_syscalls[95][18], socket$1),
      _at_ = caml_call1(Async_unix_Fd[4], _as_),
      max_connections$0 =
        create$0
         (get_max_connections_limit(max_connections), time_source$0, _at_);
     return create_from_socket
             (max_connections$0,
              max_accepts_per_batch,
              drop_incoming_connections,
              on_handler_error,
              where_to_listen,
              handle_client,
              socket$1);
    }
   }
   function create_sock_inet_internal_asyn
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    var
     _aq_ =
       create_sock_inet_internal
        (max_connections,
         max_accepts_per_batch,
         backlog,
         drop_incoming_connections,
         socket,
         time_source,
         on_handler_error,
         where_to_listen,
         handle_client);
    return caml_call1(Async_unix_Import[30], _aq_);
   }
   function create_sock_internal
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    var
     _ap_ = caml_call1(Async_unix_Unix_syscalls[95][4][6], where_to_listen[1]),
     is_inet = caml_call1(Async_unix_Unix_syscalls[95][2][3], _ap_),
     match =
       is_inet
        ? [0, create_sock_inet_internal_asyn]
        : [0, create_sock_non_inet_internal],
     f = match[1];
    return f
            (max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             handle_client);
   }
   function create_sock
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    return create_sock_internal
            (max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             function(client_address, client_socket){
              function _ao_(param){
               return caml_call2(handle_client, client_address, client_socket);
              }
              return caml_call7
                      (Async_kernel_Monitor[16], 0, 0, _ac_, 0, _ab_, _aa_, _ao_);
             });
   }
   function create_sock_inet
   (max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    return create_sock_inet_internal
            (max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             function(client_address, client_socket){
              function _an_(param){
               return caml_call2(handle_client, client_address, client_socket);
              }
              return caml_call7
                      (Async_kernel_Monitor[16], 0, 0, _af_, 0, _ae_, _ad_, _an_);
             });
   }
   function create_internal
   (create_sock,
    buffer_age_limit,
    max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    return caml_call9
            (create_sock,
             max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             function(client_address, client_socket){
              var
               match =
                 reader_writer_of_sock(buffer_age_limit, 0, 0, client_socket),
               w = match[2],
               r = match[1];
              caml_call2(Async_unix_Writer[20], w, 0);
              function _ag_(res){
               function _al_(param){return res;}
               var _am_ = close_connection_via_reader_an(r, w);
               return caml_call2(Async_unix_Import[32], _am_, _al_);
              }
              var
               _ah_ = caml_call1(Async_unix_Writer[22], w),
               _ai_ = [0, caml_call1(Async_kernel_Deferred[33], _ah_), 0],
               _aj_ =
                 [0,
                  collect_errors
                   (w,
                    function(param){
                     return caml_call3(handle_client, client_address, r, w);
                    }),
                  _ai_],
               _ak_ = caml_call1(Async_kernel_Deferred[23], _aj_);
              return caml_call2(Async_unix_Import[31], _ak_, _ag_);
             });
   }
   function create_inet
   (buffer_age_limit,
    max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    return create_internal
            (create_sock_inet_internal,
             buffer_age_limit,
             max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             handle_client);
   }
   function create$2
   (buffer_age_limit,
    max_connections,
    max_accepts_per_batch,
    backlog,
    drop_incoming_connections,
    socket,
    time_source,
    on_handler_error,
    where_to_listen,
    handle_client){
    return create_internal
            (create_sock_internal,
             buffer_age_limit,
             max_connections,
             max_accepts_per_batch,
             backlog,
             drop_incoming_connections,
             socket,
             time_source,
             on_handler_error,
             where_to_listen,
             handle_client);
   }
   var
    Private = [0, fd],
    Aliases = [0],
    Private$0 =
      [0, close_connection_via_reader_an, set_max_connection_limit_logge];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Tcp);
   var
    Async_unix_Tcp =
      [0,
       [0,
        sexp_of_t,
        sexp_of_inet,
        sexp_of_unix,
        remote_address,
        of_host_and_port,
        of_inet_address,
        of_file,
        of_unix_address],
       with_connection,
       connect_sock,
       connect,
       Bind_to_address,
       Bind_to_port,
       [0,
        sexp_of_t$2,
        sexp_of_inet$0,
        sexp_of_unix$0,
        create,
        address,
        bind_to,
        of_port,
        of_port_chosen_by_os,
        of_file$0],
       [0,
        sexp_of_t$4,
        sexp_of_inet$1,
        sexp_of_unix$1,
        invariant,
        listening_on,
        listening_on_address,
        close$0,
        close_finished,
        is_closed,
        close_finished_and_handlers_de,
        create_sock,
        create_sock_inet,
        create$2,
        create_inet,
        socket,
        num_connections,
        set_drop_incoming_connections,
        is_dropping_incoming_connectio,
        Private],
       Aliases,
       Private$0];
   runtime.caml_register_global(107, Async_unix_Tcp, cst_Async_unix_Tcp$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Process
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_unix__Fd, Async_unix__Import, Async_unix__In_thread, Async_unix__Reader, Async_unix__Unix_syscalls, Async_unix__Writer, CamlinternalLazy, Core, Core__Info, Core__Int, Core__Lazy, Core__List, Core__Or_error, Core__Pid, Core__Sexp, Core__Signal, Core__String, Core_unix, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Signal_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Async_unix_Process$0 = "Async_unix__Process",
    cst_Process_run_failed$1 = "Process.run failed",
    cst_args = "args",
    cst_async_unix$0 = "async_unix",
    cst_child_process$1 = "child process",
    cst_env = "env",
    cst_exit_status$0 = "exit_status",
    cst_pid = "pid",
    cst_prog = "prog",
    cst_src_process_ml = "src/process.ml",
    cst_stderr$1 = "stderr",
    cst_stdin$1 = "stdin",
    cst_stdout$1 = "stdout",
    cst_working_dir = "working_dir",
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    error_source_036 = "src/process.ml.Output.Stable.V1.t",
    Core_Pid = global_data.Core__Pid,
    Core_Signal = global_data.Core__Signal,
    Core = global_data.Core,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Signal_unix = global_data.Signal_unix,
    Core_unix = global_data.Core_unix,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Or_error = global_data.Core__Or_error,
    Async_unix_Writer = global_data.Async_unix__Writer,
    Core_Info = global_data.Core__Info,
    Async_unix_Fd = global_data.Async_unix__Fd,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Async_unix_Reader = global_data.Async_unix__Reader,
    Core_Int = global_data.Core__Int,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Core_Sexp = global_data.Core__Sexp,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Process$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_process_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "process.ml");
   var
    env_of_sexp = Async_unix_Unix_syscalls[73],
    sexp_of_env = Async_unix_Unix_syscalls[72],
    _ag_ =
      [0,
       [11,
        "Process.send_signal_compat_exn ",
        [2, 0, [11, " pid:", [2, 0, 0]]]],
       "Process.send_signal_compat_exn %s pid:%s"],
    _ab_ = [0, cst_exit_status$0],
    _ac_ = [0, cst_env],
    _ad_ = [0, cst_working_dir],
    _ae_ = [0, cst_args],
    _af_ = [0, cst_prog],
    cst_Process_run_forwarding_wit =
      "Process.run_forwarding_with_shared_fds failed",
    _Z_ = [0, cst_pid],
    ___ = [0, cst_prog],
    _$_ = [0, cst_args],
    cst_stdin$0 = cst_stdin$1,
    cst_child_process$0 = cst_child_process$1,
    _aa_ = [0, [0, cst_src_process_ml, 388, 9065, 9084]],
    cst_create_process_with_fds = "create_process_with_fds",
    _T_ = [0, cst_exit_status$0],
    _U_ = [0, cst_env],
    _V_ = [0, cst_working_dir],
    _W_ = [0, cst_args],
    _X_ = [0, cst_prog],
    cst_Process_run_failed$0 = cst_Process_run_failed$1,
    _O_ = [0, "output"],
    _P_ = [0, cst_args],
    _Q_ = [0, cst_prog],
    _R_ = [0, 0],
    cst_Process_run_expect_no_outp =
      "Process.run_expect_no_output: non-empty output",
    cst_Process_run_failed = cst_Process_run_failed$1,
    _D_ = [0, 0],
    _w_ = [0, cst_stderr$1],
    _x_ = [0, cst_stdout$1],
    _y_ = [0, cst_exit_status$0],
    _C_ = [0, cst_env],
    _z_ = [0, cst_working_dir],
    _A_ = [0, cst_args],
    _B_ = [0, cst_prog],
    _t_ = [0, cst_exit_status$0],
    _u_ = [0, cst_stderr$1],
    _v_ = [0, cst_stdout$1],
    _q_ = [0, cst_exit_status$0],
    _r_ = [0, cst_stderr$1],
    _s_ = [0, cst_stdout$1],
    cst_exit_status = cst_exit_status$0,
    cst_stderr$0 = cst_stderr$1,
    cst_stdout$0 = cst_stdout$1,
    _j_ = [0, cst_pid],
    _k_ = [0, cst_prog],
    _l_ = [0, cst_args],
    cst_child_process = cst_child_process$1,
    _m_ = [0, [0, cst_src_process_ml, 52, 965, 982]],
    cst_stdin = cst_stdin$1,
    _n_ = [0, 0],
    _o_ = [0, 751362817],
    cst_stderr = cst_stderr$1,
    cst_stdout = cst_stdout$1,
    _p_ = [0, -72399366, 0],
    cst_create_process_env = "create_process_env",
    _a_ = [0, "wait"],
    _b_ = [0, cst_env],
    _c_ = [0, cst_working_dir],
    _d_ = [0, cst_args],
    _e_ = [0, cst_prog],
    _f_ = [0, cst_stderr$1],
    _g_ = [0, cst_stdout$1],
    _h_ = [0, cst_stdin$1],
    _i_ = [0, cst_pid],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Process = cst_Async_unix_Process$0;
   function stderr(r){return r[4];}
   function stdout(r){return r[3];}
   function stdin(r){return r[2];}
   function pid(r){return r[1];}
   function sexp_of_t(param){
    var
     wait_019 = param[9],
     env_017 = param[8],
     working_dir_015 = param[7],
     args_013 = param[6],
     prog_011 = param[5],
     stderr_009 = param[4],
     stdout_007 = param[3],
     stdin_005 = param[2],
     pid_003 = param[1],
     _cF_ = caml_call1(Async_kernel_Deferred[1], Core_unix[15][7]),
     arg_020 = caml_call2(Core_Lazy[23], _cF_, wait_019),
     bnds_002 = [0, [1, [0, _a_, [0, arg_020, 0]]], 0],
     arg_018 = caml_call1(sexp_of_env, env_017),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_018, 0]]], bnds_002],
     arg_016 = caml_call2(Core[515], Core[558], working_dir_015),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_016, 0]]], bnds_002$0],
     arg_014 = caml_call2(Core[472], Core[558], args_013),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_014, 0]]], bnds_002$1],
     arg_012 = caml_call1(Core[558], prog_011),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_012, 0]]], bnds_002$2],
     arg_010 = caml_call1(Async_unix_Reader[3], stderr_009),
     bnds_002$4 = [0, [1, [0, _f_, [0, arg_010, 0]]], bnds_002$3],
     arg_008 = caml_call1(Async_unix_Reader[3], stdout_007),
     bnds_002$5 = [0, [1, [0, _g_, [0, arg_008, 0]]], bnds_002$4],
     arg_006 = caml_call1(Async_unix_Writer[3], stdin_005),
     bnds_002$6 = [0, [1, [0, _h_, [0, arg_006, 0]]], bnds_002$5],
     arg_004 = caml_call1(Core_Pid[13], pid_003),
     bnds_002$7 = [0, [1, [0, _i_, [0, arg_004, 0]]], bnds_002$6];
    return [1, bnds_002$7];
   }
   function create
   (argv0,
    buf_len,
    opt,
    prog_search_path,
    write_to_stdin,
    working_dir,
    setpgid,
    prog,
    args,
    param){
    if(opt) var sth = opt[1], env = sth; else var env = _p_;
    function _cv_(param){
     if(0 !== param[0]){
      var exn = param[1];
      return caml_call2(Core_Or_error[41], 0, exn);
     }
     var
      match = param[1],
      stderr = match[4],
      stdout = match[3],
      stdin = match[2],
      pid = match[1];
     function create_fd(name, file_descr){
      function _cD_(param){
       var
        arg3_027 = param[4],
        arg2_026 = param[3],
        arg1_025 = param[2],
        arg0_024 = param[1],
        res0_028 = caml_call1(Core[558], arg0_024),
        v_021 = arg1_025[2],
        res1_029 = [1, [0, _j_, [0, caml_call1(Core_Pid[13], v_021), 0]]],
        v_022 = arg2_026[2],
        res2_030 = [1, [0, _k_, [0, caml_call1(Core[558], v_022), 0]]],
        v_023 = arg3_027[2],
        res3_031 =
          [1, [0, _l_, [0, caml_call2(Core[472], Core[558], v_023), 0]]];
       return [1,
               [0, res0_028, [0, res1_029, [0, res2_030, [0, res3_031, 0]]]]];
      }
      var
       _cE_ =
         caml_call5
          (Core_Info[19],
           _m_,
           0,
           cst_child_process,
           [0,
            name,
            [0, 5593163, pid],
            [0, -899758182, prog],
            [0, -1066103459, args]],
           _cD_);
      return caml_call4(Async_unix_Fd[6], 0, 1, file_descr, _cE_);
     }
     var
      fd = create_fd(cst_stdin, stdin),
      stdin$0 =
        write_to_stdin
         ? caml_call7(Async_unix_Writer[18], buf_len, 0, _o_, _n_, 0, 0, fd)
         : caml_call7(Async_unix_Writer[18], buf_len, 0, 0, 0, 0, 0, fd),
      _cy_ =
        [246,
         function(_cC_){return caml_call1(Async_unix_Unix_syscalls[90], pid);}],
      _cz_ = create_fd(cst_stderr, stderr),
      _cA_ = caml_call2(Async_unix_Reader[12], buf_len, _cz_),
      _cB_ = create_fd(cst_stdout, stdout),
      t =
        [0,
         pid,
         stdin$0,
         caml_call2(Async_unix_Reader[12], buf_len, _cB_),
         _cA_,
         prog,
         args,
         working_dir,
         env,
         _cy_];
     if(write_to_stdin){
      var write_to_stdin$0 = write_to_stdin[1];
      caml_call4(Async_unix_Writer[33], 0, 0, t[2], write_to_stdin$0);
     }
     return [0, t];
    }
    function _cw_(param){
     return caml_call8
             (Core_unix[121],
              working_dir,
              prog_search_path,
              argv0,
              setpgid,
              prog,
              args,
              env,
              0);
    }
    var
     _cx_ = caml_call2(Async_unix_In_thread[6], cst_create_process_env, _cw_);
    return caml_call2(Async_unix_Import[33][3], _cx_, _cv_);
   }
   function create_exn
   (argv0,
    buf_len,
    env,
    prog_search_path,
    stdin,
    working_dir,
    setpgid,
    prog,
    args,
    param){
    var
     _ct_ = Core[255],
     _cu_ =
       create
        (argv0,
         buf_len,
         env,
         prog_search_path,
         stdin,
         working_dir,
         setpgid,
         prog,
         args,
         0);
    return caml_call2(Async_unix_Import[32], _cu_, _ct_);
   }
   function sexp_of_t$0(t){
    if(0 !== t[0]){var sexp = t[1]; return sexp;}
    var lines = t[1];
    a:
    if(lines){
     if(! caml_string_notequal(lines[1], cst$0) && ! lines[2]) break a;
     return caml_call2(Core[472], Core[558], lines);
    }
    return caml_call1(Sexplib0_Sexp_conv[7], cst);
   }
   function create$0(string){
    try{var _cr_ = [1, caml_call1(Core_Sexp[76], string)]; return _cr_;}
    catch(_cs_){return [0, caml_call2(Core_String[78], string, 10)];}
   }
   var Lines_or_sexp = [0, sexp_of_t$0, create$0];
   function compare(a_033, b_034){
    if(a_033 === b_034) return 0;
    var n = caml_call2(Core[551], a_033[1], b_034[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[551], a_033[2], b_034[2]);
    return 0 === n$0 ? caml_call2(Core_unix[15][5], a_033[3], b_034[3]) : n$0;
   }
   function t_of_sexp(x_037){
    function _cn_(param){
     var
      _cq_ = param[2],
      exit_status = _cq_[2][1],
      stderr = _cq_[1],
      stdout = param[1];
     return [0, stdout, stderr, exit_status];
    }
    var _co_ = 0;
    function _cp_(param){
     return caml_string_notequal(param, cst_exit_status$0)
             ? caml_string_notequal
                (param, cst_stderr$1)
               ? caml_string_notequal(param, cst_stdout$1) ? -1 : 0
               : 1
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_036,
             [0,
              cst_stdout$0,
              1,
              Core[559],
              [0,
               cst_stderr$0,
               1,
               Core[559],
               [0, cst_exit_status, 1, Core_unix[15][6], 0]]],
             _cp_,
             _co_,
             _cn_,
             x_037);
   }
   function sexp_of_t$1(param){
    var
     exit_status_043 = param[3],
     stderr_041 = param[2],
     stdout_039 = param[1],
     arg_044 = caml_call1(Core_unix[15][7], exit_status_043),
     bnds_038 = [0, [1, [0, _q_, [0, arg_044, 0]]], 0],
     arg_042 = caml_call1(Core[558], stderr_041),
     bnds_038$0 = [0, [1, [0, _r_, [0, arg_042, 0]]], bnds_038],
     arg_040 = caml_call1(Core[558], stdout_039),
     bnds_038$1 = [0, [1, [0, _s_, [0, arg_040, 0]]], bnds_038$0];
    return [1, bnds_038$1];
   }
   var
    V1 = [0, compare, t_of_sexp, sexp_of_t$1],
    Stable = [0, V1],
    include = Stable[1],
    compare$0 = include[1];
   function sexp_of_t$2(t){
    var
     _cj_ = [0, [1, [0, _t_, [0, caml_call1(Core_unix[15][7], t[3]), 0]]], 0],
     _ck_ = caml_call1(Lines_or_sexp[2], t[2]),
     _cl_ =
       [0, [1, [0, _u_, [0, caml_call1(Lines_or_sexp[1], _ck_), 0]]], _cj_],
     _cm_ = caml_call1(Lines_or_sexp[2], t[1]);
    return [1,
            [0,
             [1, [0, _v_, [0, caml_call1(Lines_or_sexp[1], _cm_), 0]]],
             _cl_]];
   }
   function wait(t){return caml_call1(Core[248], t[9]);}
   function collect_output_and_wait(t){
    var
     stdout = caml_call1(Async_unix_Reader[57], t[3]),
     stderr = caml_call1(Async_unix_Reader[57], t[4]);
    function _cb_(param){
     function _cf_(exit_status){
      function _ch_(stdout){
       function _ci_(stderr){
        return caml_call1
                (Async_unix_Import[30], [0, stdout, stderr, exit_status]);
       }
       return caml_call2(Async_unix_Import[33][2], stderr, _ci_);
      }
      return caml_call2(Async_unix_Import[33][2], stdout, _ch_);
     }
     var _cg_ = wait(t);
     return caml_call2(Async_unix_Import[33][2], _cg_, _cf_);
    }
    var
     _cc_ = t[2],
     _cd_ = [0, caml_call1(Async_kernel_Deferred[19], 0)],
     _ce_ = caml_call2(Async_unix_Writer[65], _cd_, _cc_);
    return caml_call2(Async_unix_Import[33][2], _ce_, _cb_);
   }
   function sexp_of_t$3(param){
    var
     stderr_067 = param[7],
     stdout_065 = param[6],
     exit_status_063 = param[5],
     env_060 = param[4],
     working_dir_054 = param[3],
     args_052 = param[2],
     prog_050 = param[1],
     arg_068 = caml_call1(Lines_or_sexp[1], stderr_067),
     bnds_049 = [0, [1, [0, _w_, [0, arg_068, 0]]], 0],
     arg_066 = caml_call1(Lines_or_sexp[1], stdout_065),
     bnds_049$0 = [0, [1, [0, _x_, [0, arg_066, 0]]], bnds_049],
     arg_064 = caml_call1(Core_unix[15][2], exit_status_063),
     bnds_049$1 = [0, [1, [0, _y_, [0, arg_064, 0]]], bnds_049$0];
    a:
    {
     if(-72399366 <= env_060[1] && ! env_060[2]){var _ca_ = 1; break a;}
     var _ca_ = 0;
    }
    if(_ca_)
     var bnds_049$2 = bnds_049$1;
    else
     var
      arg_062 = caml_call1(sexp_of_env, env_060),
      bnd_061 = [1, [0, _C_, [0, arg_062, 0]]],
      bnds_049$2 = [0, bnd_061, bnds_049$1];
    if(working_dir_054)
     var
      v_055 = working_dir_054[1],
      arg_057 = caml_call1(Core[558], v_055),
      bnd_056 = [1, [0, _z_, [0, arg_057, 0]]],
      bnds_049$3 = [0, bnd_056, bnds_049$2];
    else
     var bnds_049$3 = bnds_049$2;
    var
     arg_053 = caml_call2(Core[472], Core[558], args_052),
     bnds_049$4 = [0, [1, [0, _A_, [0, arg_053, 0]]], bnds_049$3],
     arg_051 = caml_call1(Core[558], prog_050),
     bnds_049$5 = [0, [1, [0, _B_, [0, arg_051, 0]]], bnds_049$4];
    return [1, bnds_049$5];
   }
   function handle_exit_status(opt, ok){
    if(opt)
     var sth = opt[1], accept_nonzero_exit = sth;
    else
     var accept_nonzero_exit = 0;
    if(0 === ok[0]) return ok;
    var match = ok[1];
    if(typeof match !== "number" && -34939077 === match[1]){
     var n = match[2];
     if(caml_call3(Core_List[17], accept_nonzero_exit, n, Core_Int[87]))
      return _D_;
    }
    return ok;
   }
   function collect_stdout_and_wait(accept_nonzero_exit, t){
    function _b8_(param){
     var
      exit_status = param[3],
      stderr = param[2],
      stdout = param[1],
      match = handle_exit_status(accept_nonzero_exit, exit_status);
     if(0 === match[0]) return [0, stdout];
     var
      exit_status$0 = match[1],
      env = t[8],
      working_dir = t[7],
      args = t[6],
      prog = t[5],
      _b__ = caml_call1(Lines_or_sexp[2], stderr),
      _b$_ =
        [0,
         prog,
         args,
         working_dir,
         env,
         exit_status$0,
         caml_call1(Lines_or_sexp[2], stdout),
         _b__];
     return caml_call5
             (Core_Or_error[44],
              0,
              0,
              cst_Process_run_failed,
              _b$_,
              sexp_of_t$3);
    }
    var _b9_ = collect_output_and_wait(t);
    return caml_call2(Async_unix_Import[33][3], _b9_, _b8_);
   }
   function map_collect(collect, f, accept_nonzero_exit, t){
    function _b6_(a){return caml_call1(f, a);}
    var _b7_ = caml_call2(collect, accept_nonzero_exit, t);
    return caml_call2(Async_unix_Import[33][3], _b7_, _b6_);
   }
   var _E_ = Core[255];
   function collect_stdout_and_wait_exn(_b4_, _b5_){
    return map_collect(collect_stdout_and_wait, _E_, _b4_, _b5_);
   }
   var _F_ = Core_Or_error[53], _G_ = Core_String[80];
   function _H_(_b3_){return caml_call2(_F_, _b3_, _G_);}
   function collect_stdout_lines_and_wait(_b1_, _b2_){
    return map_collect(collect_stdout_and_wait, _H_, _b1_, _b2_);
   }
   var _I_ = Core[255];
   function collect_stdout_lines_and_wait_(_bZ_, _b0_){
    return map_collect(collect_stdout_lines_and_wait, _I_, _bZ_, _b0_);
   }
   function run
   (accept_nonzero_exit,
    argv0,
    env,
    prog_search_path,
    stdin,
    working_dir,
    prog,
    args,
    param){
    function _bX_(e){
     if(0 !== e[0]) return caml_call1(Async_unix_Import[30], e);
     var t = e[1];
     return collect_stdout_and_wait(accept_nonzero_exit, t);
    }
    var
     _bY_ =
       create
        (argv0,
         0,
         env,
         prog_search_path,
         stdin,
         working_dir,
         0,
         prog,
         args,
         0);
    return caml_call2(Async_unix_Import[33][2], _bY_, _bX_);
   }
   function map_run
   (run,
    f,
    accept_nonzero_exit,
    argv0,
    env,
    prog_search_path,
    stdin,
    working_dir,
    prog,
    args,
    param){
    function _bV_(a){return caml_call1(f, a);}
    var
     _bW_ =
       caml_call9
        (run,
         accept_nonzero_exit,
         argv0,
         env,
         prog_search_path,
         stdin,
         working_dir,
         prog,
         args,
         0);
    return caml_call2(Async_unix_Import[33][3], _bW_, _bV_);
   }
   var _J_ = Core[255];
   function run_exn(_bM_, _bN_, _bO_, _bP_, _bQ_, _bR_, _bS_, _bT_, _bU_){
    return map_run
            (run, _J_, _bM_, _bN_, _bO_, _bP_, _bQ_, _bR_, _bS_, _bT_, _bU_);
   }
   var _K_ = Core_Or_error[53], _L_ = Core_String[80];
   function _M_(_bL_){return caml_call2(_K_, _bL_, _L_);}
   function run_lines(_bC_, _bD_, _bE_, _bF_, _bG_, _bH_, _bI_, _bJ_, _bK_){
    return map_run
            (run, _M_, _bC_, _bD_, _bE_, _bF_, _bG_, _bH_, _bI_, _bJ_, _bK_);
   }
   var _N_ = Core[255];
   function run_lines_exn
   (_bt_, _bu_, _bv_, _bw_, _bx_, _by_, _bz_, _bA_, _bB_){
    return map_run
            (run_lines,
             _N_,
             _bt_,
             _bu_,
             _bv_,
             _bw_,
             _bx_,
             _by_,
             _bz_,
             _bA_,
             _bB_);
   }
   function run_expect_no_output
   (accept_nonzero_exit,
    argv0,
    env,
    prog_search_path,
    stdin,
    working_dir,
    prog,
    x_072,
    param){
    function _bo_(err){
     if(0 !== err[0]) return err;
     var non_empty_output = err[1];
     if(! caml_string_notequal(non_empty_output, cst$0)) return _R_;
     function _bq_(param){
      var
       _br_ =
         [0,
          [1, [0, _O_, [0, caml_call1(Core[558], non_empty_output), 0]]],
          0],
       _bs_ =
         [0,
          [1, [0, _P_, [0, caml_call2(Core[472], Core[558], x_072), 0]]],
          _br_];
      return [1,
              [0, [1, [0, _Q_, [0, caml_call1(Core[558], prog), 0]]], _bs_]];
     }
     return caml_call5
             (Core_Or_error[44],
              0,
              0,
              cst_Process_run_expect_no_outp,
              0,
              _bq_);
    }
    var
     _bp_ =
       run
        (accept_nonzero_exit,
         argv0,
         env,
         prog_search_path,
         stdin,
         working_dir,
         prog,
         x_072,
         0);
    return caml_call2(Async_unix_Import[33][3], _bp_, _bo_);
   }
   var _S_ = Core[255];
   function run_expect_no_output_exn
   (_bf_, _bg_, _bh_, _bi_, _bj_, _bk_, _bl_, _bm_, _bn_){
    return map_run
            (run_expect_no_output,
             _S_,
             _bf_,
             _bg_,
             _bh_,
             _bi_,
             _bj_,
             _bk_,
             _bl_,
             _bm_,
             _bn_);
   }
   function transfer_and_close(reader, writer){
    function _be_(param){
     return caml_call2(Async_unix_Writer[100], writer, reader);
    }
    return caml_call2(Async_unix_Reader[18], reader, _be_);
   }
   function forward_output_and_wait(accept_nonzero_exit, t){
    var
     _aY_ = t[2],
     _aZ_ = [0, caml_call1(Async_kernel_Deferred[19], 0)],
     let_syntax_073 = caml_call2(Async_unix_Writer[65], _aZ_, _aY_),
     _a0_ = Async_unix_Writer[5],
     _a1_ = caml_obj_tag(_a0_);
    a:
    if(250 === _a1_)
     var _a2_ = _a0_[1];
    else{
     if(246 !== _a1_ && 244 !== _a1_){var _a2_ = _a0_; break a;}
     var _a2_ = caml_call1(CamlinternalLazy[2], _a0_);
    }
    var
     let_syntax_074 = transfer_and_close(t[3], _a2_),
     _a3_ = Async_unix_Writer[6],
     _a4_ = caml_obj_tag(_a3_);
    a:
    if(250 === _a4_)
     var _a5_ = _a3_[1];
    else{
     if(246 !== _a4_ && 244 !== _a4_){var _a5_ = _a3_; break a;}
     var _a5_ = caml_call1(CamlinternalLazy[2], _a3_);
    }
    var
     let_syntax_075 = transfer_and_close(t[4], _a5_),
     let_syntax_076 = wait(t);
    function _a6_(param){
     var
      exit_status = param[2][2][2],
      ok = handle_exit_status(accept_nonzero_exit, exit_status);
     if(0 === ok[0]) return ok;
     var
      exit_status$0 = ok[1],
      env = t[8],
      working_dir = t[7],
      x_078 = t[6],
      prog = t[5],
      _a__ =
        [0,
         [1, [0, _T_, [0, caml_call1(Core_unix[15][2], exit_status$0), 0]]],
         0],
      _a$_ = [0, [1, [0, _U_, [0, caml_call1(sexp_of_env, env), 0]]], _a__],
      _ba_ =
        [0,
         [1, [0, _V_, [0, caml_call2(Core[515], Core[558], working_dir), 0]]],
         _a$_],
      _bb_ =
        [0,
         [1, [0, _W_, [0, caml_call2(Core[472], Core[558], x_078), 0]]],
         _ba_],
      _bc_ = [0, [1, [0, _X_, [0, caml_call1(Core[558], prog), 0]]], _bb_],
      _bd_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Process_run_failed$0),
          _bc_]];
     return caml_call1(Core_Or_error[45], _bd_);
    }
    var
     _a7_ =
       caml_call2(Async_unix_Import[33][4], let_syntax_075, let_syntax_076),
     _a8_ = caml_call2(Async_unix_Import[33][4], let_syntax_074, _a7_),
     _a9_ = caml_call2(Async_unix_Import[33][4], let_syntax_073, _a8_);
    return caml_call2(Async_unix_Import[33][3], _a9_, _a6_);
   }
   var _Y_ = Core[255];
   function forward_output_and_wait_exn(_aW_, _aX_){
    return map_collect(forward_output_and_wait, _Y_, _aW_, _aX_);
   }
   function run_forwarding_with_spliced_fd
   (accept_nonzero_exit,
    argv0,
    env,
    prog_search_path,
    stdin,
    working_dir,
    prog,
    args,
    param){
    function _aU_(e){
     if(0 !== e[0]) return caml_call1(Async_unix_Import[30], e);
     var t = e[1];
     return forward_output_and_wait(accept_nonzero_exit, t);
    }
    var
     _aV_ =
       create
        (argv0,
         0,
         env,
         prog_search_path,
         stdin,
         working_dir,
         0,
         prog,
         args,
         0);
    return caml_call2(Async_unix_Import[33][2], _aV_, _aU_);
   }
   function run_forwarding_with_shared_fds
   (accept_nonzero_exit,
    argv0,
    x_099,
    prog_search_path,
    write_to_stdin,
    working_dir,
    prog,
    x_097,
    param){
    var _ax_ = Async_unix_Writer[5], _ay_ = caml_obj_tag(_ax_);
    a:
    if(250 === _ay_)
     var _az_ = _ax_[1];
    else{
     if(246 !== _ay_ && 244 !== _ay_){var _az_ = _ax_; break a;}
     var _az_ = caml_call1(CamlinternalLazy[2], _ax_);
    }
    var
     let_syntax_080 = caml_call1(Async_unix_Writer[58], _az_),
     _aA_ = Async_unix_Writer[6],
     _aB_ = caml_obj_tag(_aA_);
    a:
    if(250 === _aB_)
     var _aC_ = _aA_[1];
    else{
     if(246 !== _aB_ && 244 !== _aB_){var _aC_ = _aA_; break a;}
     var _aC_ = caml_call1(CamlinternalLazy[2], _aA_);
    }
    var let_syntax_081 = caml_call1(Async_unix_Writer[58], _aC_);
    function _aD_(param){
     function _aF_(param){
      if(0 === param[0]){
       var
        match = param[1],
        stdin = match[2],
        pid = match[1],
        _aI_ =
          function(param){
           var
            arg3_092 = param[4],
            arg2_091 = param[3],
            arg1_090 = param[2],
            arg0_089 = param[1],
            res0_093 = caml_call1(Core[558], arg0_089),
            v_086 = arg1_090[2],
            res1_094 = [1, [0, _Z_, [0, caml_call1(Core_Pid[13], v_086), 0]]],
            v_087 = arg2_091[2],
            res2_095 = [1, [0, ___, [0, caml_call1(Core[558], v_087), 0]]],
            v_088 = arg3_092[2],
            res3_096 =
              [1, [0, _$_, [0, caml_call2(Core[472], Core[558], v_088), 0]]];
           return [1,
                   [0,
                    res0_093,
                    [0, res1_094, [0, res2_095, [0, res3_096, 0]]]]];
          },
        _aJ_ =
          caml_call5
           (Core_Info[19],
            _aa_,
            0,
            cst_child_process$0,
            [0,
             cst_stdin$0,
             [0, 5593163, pid],
             [0, -899758182, prog],
             [0, -1066103459, x_097]],
            _aI_),
        _aK_ = caml_call4(Async_unix_Fd[6], 0, 1, stdin, _aJ_),
        writer = caml_call7(Async_unix_Writer[18], 0, 0, 0, 0, 0, 0, _aK_),
        _aL_ =
          function(param){
           if(write_to_stdin){
            var write_to_stdin$0 = write_to_stdin[1];
            caml_call4(Async_unix_Writer[33], 0, 0, writer, write_to_stdin$0);
           }
           return caml_call1(Async_unix_Writer[57], writer);
          },
        let_syntax_083 = caml_call2(Async_unix_Writer[70], writer, _aL_),
        let_syntax_084 = caml_call1(Async_unix_Unix_syscalls[90], pid),
        _aM_ =
          function(param){
           var
            exit_status = param[2],
            ok = handle_exit_status(accept_nonzero_exit, exit_status);
           if(0 === ok[0]) return ok;
           var
            exit_status$0 = ok[1],
            _aO_ =
              [0,
               [1,
                [0, _ab_, [0, caml_call1(Core_unix[15][2], exit_status$0), 0]]],
               0],
            _aP_ =
              [0,
               [1,
                [0, _ac_, [0, caml_call2(Core[515], sexp_of_env, x_099), 0]]],
               _aO_],
            _aQ_ =
              [0,
               [1,
                [0,
                 _ad_,
                 [0, caml_call2(Core[515], Core[558], working_dir), 0]]],
               _aP_],
            _aR_ =
              [0,
               [1, [0, _ae_, [0, caml_call2(Core[472], Core[558], x_097), 0]]],
               _aQ_],
            _aS_ =
              [0, [1, [0, _af_, [0, caml_call1(Core[558], prog), 0]]], _aR_],
            _aT_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Process_run_forwarding_wit),
                _aS_]];
           return caml_call1(Core_Or_error[45], _aT_);
          },
        _aN_ =
          caml_call2(Async_unix_Import[33][4], let_syntax_083, let_syntax_084);
       return caml_call2(Async_unix_Import[33][3], _aN_, _aM_);
      }
      var exn = param[1];
      return caml_call2(Async_kernel_Deferred_or_error[22], 0, exn);
     }
     function _aG_(param){
      return caml_call11
              (Core_unix[124],
               working_dir,
               prog_search_path,
               argv0,
               0,
               x_099,
               prog,
               x_097,
               0,
               [0, Core_unix[43]],
               [0, Core_unix[44]],
               0);
     }
     var
      _aH_ =
        caml_call2(Async_unix_In_thread[6], cst_create_process_with_fds, _aG_);
     return caml_call2(Async_unix_Import[33][2], _aH_, _aF_);
    }
    var
     _aE_ =
       caml_call2(Async_unix_Import[33][4], let_syntax_080, let_syntax_081);
    return caml_call2(Async_unix_Import[33][2], _aE_, _aD_);
   }
   function run_forwarding(opt){
    if(opt)
     var sth = opt[1], child_fds = sth;
    else
     var child_fds = -197985892;
    return 256529599 <= child_fds
            ? run_forwarding_with_shared_fds
            : run_forwarding_with_spliced_fd;
   }
   function run_forwarding_exn(child_fds){
    var _am_ = Core[255], _an_ = run_forwarding(child_fds);
    return function(_ao_, _ap_, _aq_, _ar_, _as_, _at_, _au_, _av_, _aw_){
     return map_run
             (_an_,
              _am_,
              _ao_,
              _ap_,
              _aq_,
              _ar_,
              _as_,
              _at_,
              _au_,
              _av_,
              _aw_);};
   }
   function send_signal_internal(t, signal){
    if(caml_call1(Core_Lazy[40], t[9])){
     var _aj_ = t[9], _ak_ = caml_obj_tag(_aj_);
     a:
     if(250 === _ak_)
      var _al_ = _aj_[1];
     else{
      if(246 !== _ak_ && 244 !== _ak_){var _al_ = _aj_; break a;}
      var _al_ = caml_call1(CamlinternalLazy[2], _aj_);
     }
     if(caml_call1(Async_kernel_Deferred[7], _al_)) return 275217255;
    }
    return 17724 <= caml_call2(Signal_unix[4], signal, [0, 4001835, t[1]])
            ? 17724
            : 204897742;
   }
   function send_signal_compat(t, signal){
    return 204897742 <= send_signal_internal(t, signal) ? -658003819 : 17724;
   }
   function send_signal_compat_exn(t, signal){
    if(17724 <= send_signal_compat(t, signal)) return 0;
    var
     _ah_ = caml_call1(Core_Pid[15], t[1]),
     _ai_ = caml_call1(Core_Signal[42], signal);
    return caml_call4(Core[246], _ag_, _ai_, _ah_, 0);
   }
   function send_signal(t, signal){send_signal_compat(t, signal); return 0;}
   var Aliases = [0], For_tests = [0, send_signal_internal];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Process);
   var
    Async_unix_Process =
      [0,
       sexp_of_t,
       pid,
       stdin,
       stdout,
       stderr,
       sexp_of_env,
       env_of_sexp,
       create,
       create_exn,
       wait,
       [0, compare$0, sexp_of_t$2, Stable],
       collect_output_and_wait,
       run,
       run_exn,
       run_lines,
       run_lines_exn,
       run_expect_no_output,
       run_expect_no_output_exn,
       run_forwarding,
       run_forwarding_exn,
       collect_stdout_and_wait,
       collect_stdout_and_wait_exn,
       collect_stdout_lines_and_wait,
       collect_stdout_lines_and_wait_,
       forward_output_and_wait,
       forward_output_and_wait_exn,
       send_signal,
       send_signal_compat,
       send_signal_compat_exn,
       Lines_or_sexp,
       Aliases,
       For_tests];
   runtime.caml_register_global
    (105, Async_unix_Process, cst_Async_unix_Process$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Io_stats
//# unitInfo: Requires: Core__Int63, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Io_stats$0 = "Async_unix__Io_stats",
    cst_async_unix$0 = "async_unix",
    cst_char$0 = "char",
    cst_fifo$0 = "fifo",
    cst_file$0 = "file",
    cst_socket$0 = "socket",
    cst_total$0 = "total",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = "src/io_stats.ml.t",
    Core_Int63 = global_data.Core__Int63,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Io_stats$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/io_stats.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "io_stats.ml");
   var
    _a_ = [0, cst_socket$0],
    _b_ = [0, cst_file$0],
    _c_ = [0, cst_fifo$0],
    _d_ = [0, cst_char$0],
    _e_ = [0, cst_total$0],
    cst_socket = cst_socket$0,
    cst_file = cst_file$0,
    cst_fifo = cst_fifo$0,
    cst_char = cst_char$0,
    cst_total = cst_total$0,
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Io_stats = cst_Async_unix_Io_stats$0;
   function t_of_sexp(x_003){
    function _f_(param){
     var
      _i_ = param[2],
      _j_ = _i_[2],
      _k_ = _j_[2],
      socket = _k_[2][1],
      file = _k_[1],
      fifo = _j_[1],
      char$0 = _i_[1],
      total = param[1];
     return [0, total, char$0, fifo, file, socket];
    }
    var _g_ = 0;
    function _h_(param){
     return caml_string_notequal(param, cst_char$0)
             ? caml_string_notequal
                (param, cst_fifo$0)
               ? caml_string_notequal
                  (param, cst_file$0)
                 ? caml_string_notequal
                    (param, cst_socket$0)
                   ? caml_string_notequal(param, cst_total$0) ? -1 : 0
                   : 4
                 : 3
               : 2
             : 1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_total,
              1,
              Core_Int63[102],
              [0,
               cst_char,
               1,
               Core_Int63[102],
               [0,
                cst_fifo,
                1,
                Core_Int63[102],
                [0,
                 cst_file,
                 1,
                 Core_Int63[102],
                 [0, cst_socket, 1, Core_Int63[102], 0]]]]],
             _h_,
             _g_,
             _f_,
             x_003);
   }
   function sexp_of_t(param){
    var
     total_005 = param[1],
     char_007 = param[2],
     fifo_009 = param[3],
     file_011 = param[4],
     socket_013 = param[5],
     arg_014 = caml_call1(Core_Int63[103], socket_013),
     bnds_004 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(Core_Int63[103], file_011),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_004],
     arg_010 = caml_call1(Core_Int63[103], fifo_009),
     bnds_004$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_004$0],
     arg_008 = caml_call1(Core_Int63[103], char_007),
     bnds_004$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_004$1],
     arg_006 = caml_call1(Core_Int63[103], total_005),
     bnds_004$3 = [0, [1, [0, _e_, [0, arg_006, 0]]], bnds_004$2];
    return [1, bnds_004$3];
   }
   function create(param){
    return [0,
            Core_Int63[16],
            Core_Int63[16],
            Core_Int63[16],
            Core_Int63[16],
            Core_Int63[16]];
   }
   function update(t, kind, bytes){
    t[1] = caml_call2(Core_Int63[19], t[1], bytes);
    if(typeof kind === "number")
     switch(kind){
       case 0:
        t[2] = caml_call2(Core_Int63[19], t[2], bytes); return 0;
       case 1:
        t[3] = caml_call2(Core_Int63[19], t[3], bytes); return 0;
       default: t[4] = caml_call2(Core_Int63[19], t[4], bytes); return 0;
     }
    t[5] = caml_call2(Core_Int63[19], t[5], bytes);
    return 0;
   }
   function total(t){return t[1];}
   function get(t, kind){
    if(typeof kind === "number")
     switch(kind){
       case 0:
        return t[2];
       case 1:
        return t[3];
       default: return t[4];
     }
    return t[5];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Io_stats);
   var
    Async_unix_Io_stats =
      [0, t_of_sexp, sexp_of_t, create, update, total, get];
   runtime.caml_register_global
    (29, Async_unix_Io_stats, cst_Async_unix_Io_stats$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Async_print
//# unitInfo: Requires: Async_unix__Writer, CamlinternalLazy, Core, Core__Float, Core__Int, Core__Printf, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Async_print$0 = "Async_unix__Async_print",
    cst_async_unix$0 = "async_unix",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Sexp = global_data.Core__Sexp,
    Core_Float = global_data.Core__Float,
    Core_Int = global_data.Core__Int,
    Async_unix_Writer = global_data.Async_unix__Writer,
    Core_Printf = global_data.Core__Printf,
    Core = global_data.Core,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Async_print$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_print.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "async_print.ml");
   var
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Async_print = cst_Async_unix_Async_print$0;
   function stdout(param){
    var _n_ = Async_unix_Writer[5], _o_ = caml_obj_tag(_n_);
    if(250 === _o_) return _n_[1];
    if(246 !== _o_ && 244 !== _o_) return _n_;
    return caml_call1(CamlinternalLazy[2], _n_);
   }
   function stderr(param){
    var _l_ = Async_unix_Writer[6], _m_ = caml_obj_tag(_l_);
    if(250 === _m_) return _l_[1];
    if(246 !== _m_ && 244 !== _m_) return _l_;
    return caml_call1(CamlinternalLazy[2], _l_);
   }
   function do_printf(writer){
    function _j_(s){
     var _k_ = caml_call1(writer, 0);
     return caml_call4(Async_unix_Writer[33], 0, 0, _k_, s);
    }
    return caml_call1(Core[254], _j_);
   }
   function printf(fmt){return caml_call1(do_printf(stdout), fmt);}
   function fprintf(writer, fmt){
    function _i_(s){
     return caml_call4(Async_unix_Writer[33], 0, 0, writer, s);
    }
    return caml_call2(Core_Printf[4], _i_, fmt);
   }
   function eprintf(fmt){return caml_call1(do_printf(stderr), fmt);}
   function print_char(c){
    var _h_ = stdout(0);
    return caml_call2(Async_unix_Writer[40], _h_, c);
   }
   function prerr_char(c){
    var _g_ = stderr(0);
    return caml_call2(Async_unix_Writer[40], _g_, c);
   }
   function print_string(s){
    var _f_ = stdout(0);
    return caml_call4(Async_unix_Writer[33], 0, 0, _f_, s);
   }
   function prerr_string(s){
    var _e_ = stderr(0);
    return caml_call4(Async_unix_Writer[33], 0, 0, _e_, s);
   }
   function print_newline(param){
    var _d_ = stdout(0);
    return caml_call2(Async_unix_Writer[40], _d_, 10);
   }
   function prerr_newline(param){
    var _c_ = stderr(0);
    return caml_call2(Async_unix_Writer[40], _c_, 10);
   }
   function print_endline(s){print_string(s); return print_newline(0);}
   function prerr_endline(s){prerr_string(s); return prerr_newline(0);}
   function print_int(i){return print_string(caml_call1(Core_Int[79], i));}
   function prerr_int(i){return prerr_string(caml_call1(Core_Int[79], i));}
   function print_float(f){
    return print_string(caml_call1(Core_Float[159], f));
   }
   function prerr_float(f){
    return prerr_string(caml_call1(Core_Float[159], f));
   }
   function print_s(mach, sexp){
    var
     _b_ =
       mach
        ? caml_call1(Core_Sexp[85], sexp)
        : caml_call2(Core_Sexp[84], 0, sexp);
    return print_endline(_b_);
   }
   function eprint_s(mach, sexp){
    var
     _a_ =
       mach
        ? caml_call1(Core_Sexp[85], sexp)
        : caml_call2(Core_Sexp[84], 0, sexp);
    return prerr_endline(_a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Async_print);
   var
    Async_unix_Async_print =
      [0,
       print_char,
       prerr_char,
       print_string,
       prerr_string,
       print_int,
       prerr_int,
       print_float,
       prerr_float,
       print_endline,
       prerr_endline,
       print_newline,
       prerr_newline,
       print_s,
       printf,
       fprintf,
       eprintf,
       eprint_s];
   runtime.caml_register_global
    (18, Async_unix_Async_print, cst_Async_unix_Async_print$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix__Async_sys
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_kernel__Time_source, Async_unix__Clock, Async_unix__Import, Async_unix__In_thread, Async_unix__Unix_syscalls, Core, Core__Core_sys, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sys_unix, Time_float_unix, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix_Async_sys$0 = "Async_unix__Async_sys",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Async_unix_Import = global_data.Async_unix__Import,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Time_float_unix = global_data.Time_float_unix,
    Time_ns_unix = global_data.Time_ns_unix,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_unix_In_thread = global_data.Async_unix__In_thread,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Core_sys = global_data.Core__Core_sys,
    Sys_unix = global_data.Sys_unix;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix_Async_sys$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_sys.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "async_sys.ml");
   var
    argv = Core_Core_sys[2],
    get_argv = Core_Core_sys[1],
    executable_name = Sys_unix[1],
    _r_ = [0, "file"],
    cst_when_file_exists_can_not_c = "when_file_exists can not check file",
    _o_ = [0, 3804260],
    _p_ = [0, 523273847],
    _q_ = [0, 1],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix_Async_sys = cst_Async_unix_Async_sys$0;
   function wrap1(f, x1){
    function _ab_(param){return caml_call1(f, x1);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _ab_);
   }
   var _a_ = Sys_unix[14];
   function chdir(_aa_){return wrap1(_a_, _aa_);}
   var _b_ = Sys_unix[12];
   function command(_$_){return wrap1(_b_, _$_);}
   var _c_ = Sys_unix[13];
   function command_exn(___){return wrap1(_c_, ___);}
   var
    quote = Core_Core_sys[21],
    concat_quoted = Core_Core_sys[22],
    _d_ = Sys_unix[15];
   function getcwd(_Z_){return wrap1(_d_, _Z_);}
   var _e_ = Sys_unix[23];
   function home_directory(_Y_){return wrap1(_e_, _Y_);}
   var _f_ = Sys_unix[18];
   function ls_dir(_X_){return wrap1(_f_, _X_);}
   var _g_ = Sys_unix[16];
   function readdir(_W_){return wrap1(_g_, _W_);}
   var _h_ = Sys_unix[8];
   function remove(_V_){return wrap1(_h_, _V_);}
   var f = Sys_unix[9];
   function rename(x1, x2){
    function _U_(param){return caml_call2(f, x1, x2);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _U_);
   }
   function wrap_is(f, follow_symlinks, path){
    function _T_(param){return caml_call2(f, follow_symlinks, path);}
    return caml_call4(Async_unix_In_thread[5], 0, 0, 0, _T_);
   }
   var _i_ = Sys_unix[2];
   function file_exists(_R_, _S_){return wrap_is(_i_, _R_, _S_);}
   var _j_ = Sys_unix[3];
   function file_exists_exn(_P_, _Q_){return wrap_is(_j_, _P_, _Q_);}
   var _k_ = Sys_unix[4];
   function is_directory(_N_, _O_){return wrap_is(_k_, _N_, _O_);}
   var _l_ = Sys_unix[6];
   function is_directory_exn(_L_, _M_){return wrap_is(_l_, _L_, _M_);}
   var _m_ = Sys_unix[5];
   function is_file(_J_, _K_){return wrap_is(_m_, _J_, _K_);}
   var _n_ = Sys_unix[7];
   function is_file_exn(_H_, _I_){return wrap_is(_n_, _H_, _I_);}
   function when_file_changes(opt, _A_, file){
    if(opt)
     var sth = opt[1], time_source = sth;
    else
     var time_source = caml_call1(Async_kernel_Time_source[10], 0);
    if(_A_)
     var sth$0 = _A_[1], poll_delay = sth$0;
    else
     var poll_delay = caml_call1(Core[630], 0.5);
    var
     last_reported_mtime = [0, 0],
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     writer = match[2],
     reader = match[1];
    function loop(param){
     function _B_(stat_result){
      var _E_ = 1 - caml_call1(Async_kernel_Pipe[17], writer);
      if(! _E_) return _E_;
      if(0 === stat_result[0]){
       var
        st = stat_result[1],
        mtime = st[11],
        match = last_reported_mtime[1];
       if(match)
        var
         last_reported_mtime$0 = match[1],
         should_report =
           1 - caml_call2(Time_float_unix[70], mtime, last_reported_mtime$0);
       else
        var should_report = 1;
       if(should_report){
        last_reported_mtime[1] = [0, mtime];
        caml_call2(Async_kernel_Pipe[30], writer, [0, mtime]);
       }
      }
      else{
       var exn = stat_result[1];
       last_reported_mtime[1] = 0;
       caml_call2(Async_kernel_Pipe[30], writer, [1, exn]);
      }
      var
       _F_ = caml_call1(Time_ns_unix[72][146], poll_delay),
       _G_ = caml_call2(Async_kernel_Time_source[29], time_source, _F_);
      return caml_call2(Async_unix_Import[27], _G_, loop);
     }
     function _C_(param){
      return caml_call1(Async_unix_Unix_syscalls[34], file);
     }
     var
      _D_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, _q_, _p_, _o_, _C_);
     return caml_call2(Async_unix_Import[27], _D_, _B_);
    }
    loop(0);
    return reader;
   }
   function when_file_exists(follow_symlinks, opt, file){
    if(opt)
     var sth = opt[1], poll_delay = sth;
    else
     var poll_delay = caml_call1(Core[630], 0.5);
    function _u_(i){
     function loop(param){
      function _v_(param){
       if(4448519 === param) return caml_call2(Async_kernel_Ivar[14], i, 0);
       if(785140586 <= param){
        var
         _x_ = [0, [1, [0, _r_, [0, caml_call1(Core[558], file), 0]]], 0],
         _y_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_when_file_exists_can_not_c),
             _x_]];
        return caml_call1(Core[261], _y_);
       }
       var _z_ = caml_call1(Async_unix_Clock[4], poll_delay);
       return caml_call2(Async_unix_Import[22], _z_, loop);
      }
      var _w_ = file_exists(follow_symlinks, file);
      return caml_call2(Async_unix_Import[27], _w_, _v_);
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _u_);
   }
   function c_int_size(_t_){return runtime.c_int_size(_t_);}
   var
    execution_mode = Sys_unix[22],
    getenv = Core_Core_sys[19],
    getenv_exn = Core_Core_sys[20],
    int_size = Core_Core_sys[10],
    interactive = Core_Core_sys[3],
    ocaml_version = Core_Core_sys[16],
    os_type = Core_Core_sys[4],
    word_size = Core_Core_sys[9];
   function opaque_identity(_s_){return _s_;}
   var big_endian = Core_Core_sys[11];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix_Async_sys);
   var
    Async_unix_Async_sys =
      [0,
       argv,
       get_argv,
       executable_name,
       file_exists,
       file_exists_exn,
       when_file_exists,
       when_file_changes,
       is_directory,
       is_directory_exn,
       is_file,
       is_file_exn,
       remove,
       rename,
       getenv,
       getenv_exn,
       command,
       command_exn,
       quote,
       concat_quoted,
       chdir,
       getcwd,
       readdir,
       ls_dir,
       home_directory,
       opaque_identity,
       interactive,
       os_type,
       word_size,
       int_size,
       big_endian,
       ocaml_version,
       execution_mode,
       c_int_size];
   runtime.caml_register_global
    (33, Async_unix_Async_sys, cst_Async_unix_Async_sys$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_unix
//# unitInfo: Requires: Async_unix__Async_print, Async_unix__Clock, Async_unix__Scheduler, Async_unix__Shutdown, Async_unix__Unix_syscalls, Core__Printf, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_unix$0 = "Async_unix",
    cst_async_unix$0 = "async_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Printf = global_data.Core__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_unix_Unix_syscalls = global_data.Async_unix__Unix_syscalls,
    Async_unix_Clock = global_data.Async_unix__Clock,
    Async_unix_Scheduler = global_data.Async_unix__Scheduler,
    Async_unix_Shutdown = global_data.Async_unix__Shutdown,
    Async_unix_Async_print = global_data.Async_unix__Async_print,
    Core_Sexp = global_data.Core__Sexp;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_unix.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_unix$0, "async_unix.ml");
   var
    system = Async_unix_Unix_syscalls[1],
    system_exn = Async_unix_Unix_syscalls[2],
    getpid = Async_unix_Unix_syscalls[3],
    getppid = Async_unix_Unix_syscalls[4],
    getppid_exn = Async_unix_Unix_syscalls[5],
    this_process_became_child_of_i = Async_unix_Unix_syscalls[6],
    nice = Async_unix_Unix_syscalls[7],
    cores = Async_unix_Unix_syscalls[8],
    openfile = Async_unix_Unix_syscalls[9],
    Lock_mode = Async_unix_Unix_syscalls[10],
    Lock_mechanism = Async_unix_Unix_syscalls[11],
    Lock = Async_unix_Unix_syscalls[12],
    with_file = Async_unix_Unix_syscalls[13],
    fcntl_getfl = Async_unix_Unix_syscalls[14],
    fcntl_setfl = Async_unix_Unix_syscalls[15],
    close = Async_unix_Unix_syscalls[16],
    deregister = Async_unix_Unix_syscalls[17],
    lseek = Async_unix_Unix_syscalls[18],
    truncate = Async_unix_Unix_syscalls[19],
    ftruncate = Async_unix_Unix_syscalls[20],
    fsync = Async_unix_Unix_syscalls[21],
    fdatasync = Async_unix_Unix_syscalls[22],
    sync = Async_unix_Unix_syscalls[23],
    lockf = Async_unix_Unix_syscalls[24],
    try_lockf = Async_unix_Unix_syscalls[25],
    test_lockf = Async_unix_Unix_syscalls[26],
    unlockf = Async_unix_Unix_syscalls[27],
    flock = Async_unix_Unix_syscalls[28],
    try_flock = Async_unix_Unix_syscalls[29],
    funlock = Async_unix_Unix_syscalls[30],
    File_kind = Async_unix_Unix_syscalls[31],
    Stats = Async_unix_Unix_syscalls[32],
    fstat = Async_unix_Unix_syscalls[33],
    stat = Async_unix_Unix_syscalls[34],
    lstat = Async_unix_Unix_syscalls[35],
    isatty = Async_unix_Unix_syscalls[36],
    unlink = Async_unix_Unix_syscalls[37],
    remove = Async_unix_Unix_syscalls[38],
    rename = Async_unix_Unix_syscalls[39],
    link = Async_unix_Unix_syscalls[40],
    chmod = Async_unix_Unix_syscalls[41],
    fchmod = Async_unix_Unix_syscalls[42],
    chown = Async_unix_Unix_syscalls[43],
    fchown = Async_unix_Unix_syscalls[44],
    access = Async_unix_Unix_syscalls[45],
    access_exn = Async_unix_Unix_syscalls[46],
    set_close_on_exec = Async_unix_Unix_syscalls[47],
    clear_close_on_exec = Async_unix_Unix_syscalls[48],
    mkdir = Async_unix_Unix_syscalls[49],
    rmdir = Async_unix_Unix_syscalls[50],
    chdir = Async_unix_Unix_syscalls[51],
    getcwd = Async_unix_Unix_syscalls[52],
    chroot = Async_unix_Unix_syscalls[53],
    opendir = Async_unix_Unix_syscalls[54],
    readdir_opt = Async_unix_Unix_syscalls[55],
    rewinddir = Async_unix_Unix_syscalls[56],
    closedir = Async_unix_Unix_syscalls[57],
    pipe = Async_unix_Unix_syscalls[58],
    mkfifo = Async_unix_Unix_syscalls[59],
    symlink = Async_unix_Unix_syscalls[60],
    readlink = Async_unix_Unix_syscalls[61],
    mkstemp = Async_unix_Unix_syscalls[62],
    mkdtemp = Async_unix_Unix_syscalls[63],
    getgrouplist = Async_unix_Unix_syscalls[64],
    times = Async_unix_Unix_syscalls[65],
    time = Async_unix_Unix_syscalls[66],
    gettimeofday = Async_unix_Unix_syscalls[67],
    gmtime = Async_unix_Unix_syscalls[68],
    localtime = Async_unix_Unix_syscalls[69],
    mktime = Async_unix_Unix_syscalls[70],
    utimes = Async_unix_Unix_syscalls[71],
    sexp_of_env = Async_unix_Unix_syscalls[72],
    env_of_sexp = Async_unix_Unix_syscalls[73],
    environment = Async_unix_Unix_syscalls[74],
    getenv = Async_unix_Unix_syscalls[75],
    getenv_exn = Async_unix_Unix_syscalls[76],
    unsafe_getenv = Async_unix_Unix_syscalls[77],
    unsafe_getenv_exn = Async_unix_Unix_syscalls[78],
    putenv = Async_unix_Unix_syscalls[79],
    unsetenv = Async_unix_Unix_syscalls[80],
    fork_exec = Async_unix_Unix_syscalls[81],
    sexp_of_wait_on = Async_unix_Unix_syscalls[82],
    wait_on_of_sexp = Async_unix_Unix_syscalls[83],
    wait_on_of_sexp$0 = Async_unix_Unix_syscalls[84],
    wait = Async_unix_Unix_syscalls[85],
    wait_nohang = Async_unix_Unix_syscalls[86],
    wait_untraced = Async_unix_Unix_syscalls[87],
    wait_nohang_untraced = Async_unix_Unix_syscalls[88],
    waitpid = Async_unix_Unix_syscalls[89],
    waitpid_prompt = Async_unix_Unix_syscalls[90],
    waitpid_exn = Async_unix_Unix_syscalls[91],
    Inet_addr = Async_unix_Unix_syscalls[92],
    Protocol_family = Async_unix_Unix_syscalls[93],
    socketpair = Async_unix_Unix_syscalls[94],
    Socket = Async_unix_Unix_syscalls[95],
    bind_to_interface_exn = Async_unix_Unix_syscalls[96],
    Host = Async_unix_Unix_syscalls[97],
    bin_shape_socket_domain = Async_unix_Unix_syscalls[98],
    bin_size_socket_domain = Async_unix_Unix_syscalls[99],
    bin_write_socket_domain = Async_unix_Unix_syscalls[100],
    bin_writer_socket_domain = Async_unix_Unix_syscalls[101],
    bin_read_socket_domain = Async_unix_Unix_syscalls[102],
    bin_read_socket_domain$0 = Async_unix_Unix_syscalls[103],
    bin_reader_socket_domain = Async_unix_Unix_syscalls[104],
    bin_socket_domain = Async_unix_Unix_syscalls[105],
    compare_socket_domain = Async_unix_Unix_syscalls[106],
    hash_fold_socket_domain = Async_unix_Unix_syscalls[107],
    hash_socket_domain = Async_unix_Unix_syscalls[108],
    sexp_of_socket_domain = Async_unix_Unix_syscalls[109],
    socket_domain_of_sexp = Async_unix_Unix_syscalls[110],
    bin_shape_socket_type = Async_unix_Unix_syscalls[111],
    bin_size_socket_type = Async_unix_Unix_syscalls[112],
    bin_write_socket_type = Async_unix_Unix_syscalls[113],
    bin_writer_socket_type = Async_unix_Unix_syscalls[114],
    bin_read_socket_type = Async_unix_Unix_syscalls[115],
    bin_read_socket_type$0 = Async_unix_Unix_syscalls[116],
    bin_reader_socket_type = Async_unix_Unix_syscalls[117],
    bin_socket_type = Async_unix_Unix_syscalls[118],
    compare_socket_type = Async_unix_Unix_syscalls[119],
    hash_fold_socket_type = Async_unix_Unix_syscalls[120],
    hash_socket_type = Async_unix_Unix_syscalls[121],
    sexp_of_socket_type = Async_unix_Unix_syscalls[122],
    socket_type_of_sexp = Async_unix_Unix_syscalls[123],
    bin_shape_sockaddr = Async_unix_Unix_syscalls[124],
    bin_size_sockaddr = Async_unix_Unix_syscalls[125],
    bin_write_sockaddr = Async_unix_Unix_syscalls[126],
    bin_writer_sockaddr = Async_unix_Unix_syscalls[127],
    bin_read_sockaddr = Async_unix_Unix_syscalls[128],
    bin_read_sockaddr$0 = Async_unix_Unix_syscalls[129],
    bin_reader_sockaddr = Async_unix_Unix_syscalls[130],
    bin_sockaddr = Async_unix_Unix_syscalls[131],
    compare_sockaddr = Async_unix_Unix_syscalls[132],
    sexp_of_sockaddr = Async_unix_Unix_syscalls[133],
    bin_shape_sockaddr_blocking_se = Async_unix_Unix_syscalls[134],
    bin_size_sockaddr_blocking_sex = Async_unix_Unix_syscalls[135],
    bin_write_sockaddr_blocking_se = Async_unix_Unix_syscalls[136],
    bin_writer_sockaddr_blocking_s = Async_unix_Unix_syscalls[137],
    bin_read_sockaddr_blocking_sex = Async_unix_Unix_syscalls[138],
    bin_read_sockaddr_blocking_sex$0 = Async_unix_Unix_syscalls[139],
    bin_reader_sockaddr_blocking_s = Async_unix_Unix_syscalls[140],
    bin_sockaddr_blocking_sexp = Async_unix_Unix_syscalls[141],
    sexp_of_sockaddr_blocking_sexp = Async_unix_Unix_syscalls[142],
    sockaddr_blocking_sexp_of_sexp = Async_unix_Unix_syscalls[143],
    Addr_info = Async_unix_Unix_syscalls[144],
    Name_info = Async_unix_Unix_syscalls[145],
    gethostname = Async_unix_Unix_syscalls[146],
    getuid = Async_unix_Unix_syscalls[147],
    geteuid = Async_unix_Unix_syscalls[148],
    getgid = Async_unix_Unix_syscalls[149],
    getegid = Async_unix_Unix_syscalls[150],
    setuid = Async_unix_Unix_syscalls[151],
    setgid = Async_unix_Unix_syscalls[152],
    Unix_error = Async_unix_Unix_syscalls[153],
    Terminal_io = Async_unix_Unix_syscalls[154],
    Passwd = Async_unix_Unix_syscalls[155],
    Group = Async_unix_Unix_syscalls[156],
    getifaddrs = Async_unix_Unix_syscalls[157],
    username = Async_unix_Unix_syscalls[158],
    getlogin = Async_unix_Unix_syscalls[159],
    wordexp = Async_unix_Unix_syscalls[160],
    Private = Async_unix_Unix_syscalls[161],
    Unix =
      [0,
       system,
       system_exn,
       getpid,
       getppid,
       getppid_exn,
       this_process_became_child_of_i,
       nice,
       cores,
       openfile,
       Lock_mode,
       Lock_mechanism,
       Lock,
       with_file,
       fcntl_getfl,
       fcntl_setfl,
       close,
       deregister,
       lseek,
       truncate,
       ftruncate,
       fsync,
       fdatasync,
       sync,
       lockf,
       try_lockf,
       test_lockf,
       unlockf,
       flock,
       try_flock,
       funlock,
       File_kind,
       Stats,
       fstat,
       stat,
       lstat,
       isatty,
       unlink,
       remove,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       access,
       access_exn,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir_opt,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       symlink,
       readlink,
       mkstemp,
       mkdtemp,
       getgrouplist,
       times,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       utimes,
       sexp_of_env,
       env_of_sexp,
       environment,
       getenv,
       getenv_exn,
       unsafe_getenv,
       unsafe_getenv_exn,
       putenv,
       unsetenv,
       fork_exec,
       sexp_of_wait_on,
       wait_on_of_sexp,
       wait_on_of_sexp$0,
       wait,
       wait_nohang,
       wait_untraced,
       wait_nohang_untraced,
       waitpid,
       waitpid_prompt,
       waitpid_exn,
       Inet_addr,
       Protocol_family,
       socketpair,
       Socket,
       bind_to_interface_exn,
       Host,
       bin_shape_socket_domain,
       bin_size_socket_domain,
       bin_write_socket_domain,
       bin_writer_socket_domain,
       bin_read_socket_domain,
       bin_read_socket_domain$0,
       bin_reader_socket_domain,
       bin_socket_domain,
       compare_socket_domain,
       hash_fold_socket_domain,
       hash_socket_domain,
       sexp_of_socket_domain,
       socket_domain_of_sexp,
       bin_shape_socket_type,
       bin_size_socket_type,
       bin_write_socket_type,
       bin_writer_socket_type,
       bin_read_socket_type,
       bin_read_socket_type$0,
       bin_reader_socket_type,
       bin_socket_type,
       compare_socket_type,
       hash_fold_socket_type,
       hash_socket_type,
       sexp_of_socket_type,
       socket_type_of_sexp,
       bin_shape_sockaddr,
       bin_size_sockaddr,
       bin_write_sockaddr,
       bin_writer_sockaddr,
       bin_read_sockaddr,
       bin_read_sockaddr$0,
       bin_reader_sockaddr,
       bin_sockaddr,
       compare_sockaddr,
       sexp_of_sockaddr,
       bin_shape_sockaddr_blocking_se,
       bin_size_sockaddr_blocking_sex,
       bin_write_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_read_sockaddr_blocking_sex,
       bin_read_sockaddr_blocking_sex$0,
       bin_reader_sockaddr_blocking_s,
       bin_sockaddr_blocking_sexp,
       sexp_of_sockaddr_blocking_sexp,
       sockaddr_blocking_sexp_of_sexp,
       Addr_info,
       Name_info,
       gethostname,
       getuid,
       geteuid,
       getgid,
       getegid,
       setuid,
       setgid,
       Unix_error,
       Terminal_io,
       Passwd,
       Group,
       getifaddrs,
       username,
       getlogin,
       wordexp,
       Private],
    after = Async_unix_Clock[4],
    at = Async_unix_Clock[3],
    every = Async_unix_Clock[11],
    with_timeout = Async_unix_Clock[5],
    schedule = Async_unix_Scheduler[10],
    schedule$0 = Async_unix_Scheduler[9],
    shutdown = Async_unix_Shutdown[1],
    within = Async_unix_Scheduler[5],
    within$0 = Async_unix_Scheduler[4],
    bprintf = Core_Printf[3],
    failwithf = Core_Printf[6],
    cst_async_unix = cst_async_unix$0,
    cst_Async_unix = cst_Async_unix$0,
    shadow = 382630979;
   function fprintf(param){return shadow;}
   function ifprintf(param){return Core_Printf[1];}
   var invalid_argf = Core_Printf[7], kbprintf = Core_Printf[5];
   function kfprintf(param, _c_){return shadow;}
   var
    ksprintf = Core_Printf[4],
    sprintf = Core_Printf[2],
    Printf =
      [0,
       shadow,
       bprintf,
       shadow,
       shadow,
       failwithf,
       fprintf,
       ifprintf,
       invalid_argf,
       kbprintf,
       kfprintf,
       ksprintf,
       shadow,
       sprintf];
   function overwrite1(x){return x;}
   function overwrite2(param){return overwrite1;}
   function overwrite3(param){return overwrite2;}
   function overwrite4(param){return overwrite3;}
   var
    Overwrite = [0, overwrite1, overwrite2, overwrite3, overwrite4],
    close_in_noerr = Overwrite[1],
    close_in = Overwrite[1],
    close_out_noerr = Overwrite[1],
    close_out = Overwrite[1],
    eprintf = Async_unix_Async_print[16],
    flush_all = Overwrite[1],
    flush = Overwrite[1],
    fprintf$0 = Async_unix_Async_print[15],
    ifprintf$0 = Core_Printf[1],
    in_channel_length = Overwrite[1],
    input_binary_int = Overwrite[1],
    input_byte = Overwrite[1],
    input_char = Overwrite[1],
    input_line = Overwrite[1];
   function input_lines(param){return Overwrite[1];}
   var
    input = Overwrite[4],
    input_value = Overwrite[1],
    open_in_bin = Overwrite[1],
    open_in_gen = Overwrite[3],
    open_in = Overwrite[1],
    open_out_bin = Overwrite[1],
    open_out_gen = Overwrite[3],
    open_out = Overwrite[1],
    out_channel_length = Overwrite[1],
    output_binary_int = Overwrite[2],
    output_byte = Overwrite[2],
    output_char = Overwrite[2],
    output = Overwrite[4],
    output_string = Overwrite[2],
    output_value = Overwrite[2],
    pos_in = Overwrite[1],
    pos_out = Overwrite[1],
    prerr_char = Async_unix_Async_print[2],
    prerr_endline = Async_unix_Async_print[10],
    prerr_float = Async_unix_Async_print[8],
    prerr_int = Async_unix_Async_print[6],
    prerr_newline = Async_unix_Async_print[12],
    prerr_string = Async_unix_Async_print[4],
    print_char = Async_unix_Async_print[1],
    print_endline = Async_unix_Async_print[9],
    print_float = Async_unix_Async_print[7],
    printf = Async_unix_Async_print[14],
    print_int = Async_unix_Async_print[5],
    print_newline = Async_unix_Async_print[11],
    print_s = Async_unix_Async_print[13],
    print_string = Async_unix_Async_print[3],
    read_float = Overwrite[1],
    read_int = Overwrite[1],
    read_line = Overwrite[1],
    read_lines = Overwrite[1];
   function read_wrap(param, _b_){return Overwrite[1];}
   var
    really_input = Overwrite[4],
    seek_in = Overwrite[2],
    seek_out = Overwrite[1],
    set_binary_mode_in = Overwrite[2],
    set_binary_mode_out = Overwrite[2],
    write_lines = Overwrite[2];
   function write_wrap(param, _a_){return Overwrite[1];}
   var
    eprint_s = Overwrite[1],
    eprint_s_nonblocking = Async_unix_Async_print[17],
    seek_out$0 = Overwrite[1],
    pos_out$0 = Overwrite[1],
    out_channel_length$0 = Overwrite[1],
    seek_in$0 = Overwrite[1],
    pos_in$0 = Overwrite[1],
    in_channel_length$0 = Overwrite[1],
    LargeFile =
      [0,
       seek_out$0,
       pos_out$0,
       out_channel_length$0,
       seek_in$0,
       pos_in$0,
       in_channel_length$0],
    Sexp =
      [0,
       Core_Sexp[1],
       Core_Sexp[2],
       Core_Sexp[3],
       Core_Sexp[4],
       Core_Sexp[5],
       Core_Sexp[6],
       Core_Sexp[7],
       Core_Sexp[8],
       Core_Sexp[9],
       Core_Sexp[10],
       Core_Sexp[11],
       Core_Sexp[12],
       Core_Sexp[13],
       Core_Sexp[15],
       Core_Sexp[16],
       Core_Sexp[17],
       Core_Sexp[18],
       Core_Sexp[19],
       Core_Sexp[20],
       Core_Sexp[21],
       Core_Sexp[22],
       Core_Sexp[23],
       Core_Sexp[24],
       Core_Sexp[25],
       Core_Sexp[26],
       Core_Sexp[27],
       Core_Sexp[28],
       Core_Sexp[29],
       Core_Sexp[30],
       Core_Sexp[31],
       Core_Sexp[35],
       Core_Sexp[36],
       Core_Sexp[37],
       Core_Sexp[38],
       Core_Sexp[39],
       Core_Sexp[40],
       Core_Sexp[41],
       Core_Sexp[42],
       Core_Sexp[43],
       Core_Sexp[44],
       Core_Sexp[45],
       Core_Sexp[46],
       Core_Sexp[47],
       Core_Sexp[48],
       Core_Sexp[49],
       Core_Sexp[50],
       Core_Sexp[51],
       Core_Sexp[52],
       Core_Sexp[53],
       Core_Sexp[54],
       Core_Sexp[55],
       Core_Sexp[56],
       Core_Sexp[57],
       Core_Sexp[58],
       Core_Sexp[59],
       Core_Sexp[60],
       Core_Sexp[61],
       Core_Sexp[62],
       Core_Sexp[63],
       Core_Sexp[64],
       Core_Sexp[65],
       Core_Sexp[72],
       Core_Sexp[73],
       Core_Sexp[74],
       Core_Sexp[75],
       Core_Sexp[76],
       Core_Sexp[77],
       Core_Sexp[78],
       Core_Sexp[79],
       Core_Sexp[80],
       Core_Sexp[81],
       Core_Sexp[82],
       Core_Sexp[83],
       Core_Sexp[84],
       Core_Sexp[85],
       Core_Sexp[86],
       Core_Sexp[87],
       Core_Sexp[88],
       Core_Sexp[89],
       Core_Sexp[90],
       Core_Sexp[91],
       Core_Sexp[92],
       Core_Sexp[93],
       Core_Sexp[94],
       Core_Sexp[95],
       Core_Sexp[96],
       Core_Sexp[97],
       Core_Sexp[98],
       Core_Sexp[99],
       Core_Sexp[100],
       Core_Sexp[101],
       Core_Sexp[102],
       Core_Sexp[103],
       Core_Sexp[104],
       Core_Sexp[105],
       Core_Sexp[106],
       Core_Sexp[107],
       Core_Sexp[108],
       Core_Sexp[109],
       Core_Sexp[110],
       Core_Sexp[113],
       Core_Sexp[68],
       Core_Sexp[66],
       Core_Sexp[67],
       Core_Sexp[71],
       Core_Sexp[69],
       Core_Sexp[70]],
    exit = Async_unix_Shutdown[4],
    Async_unix_private = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_async_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_unix);
   var
    Async_unix =
      [0,
       Unix,
       after,
       at,
       every,
       with_timeout,
       schedule,
       schedule$0,
       shutdown,
       within,
       within$0,
       Printf,
       Overwrite,
       close_in_noerr,
       close_in,
       close_out_noerr,
       close_out,
       eprintf,
       flush_all,
       flush,
       fprintf$0,
       ifprintf$0,
       in_channel_length,
       input_binary_int,
       input_byte,
       input_char,
       input_line,
       input_lines,
       input,
       input_value,
       open_in_bin,
       open_in_gen,
       open_in,
       open_out_bin,
       open_out_gen,
       open_out,
       out_channel_length,
       output_binary_int,
       output_byte,
       output_char,
       output,
       output_string,
       output_value,
       pos_in,
       pos_out,
       prerr_char,
       prerr_endline,
       prerr_float,
       prerr_int,
       prerr_newline,
       prerr_string,
       print_char,
       print_endline,
       print_float,
       printf,
       print_int,
       print_newline,
       print_s,
       print_string,
       read_float,
       read_int,
       read_line,
       read_lines,
       read_wrap,
       really_input,
       seek_in,
       seek_out,
       set_binary_mode_in,
       set_binary_mode_out,
       write_lines,
       write_wrap,
       eprint_s,
       eprint_s_nonblocking,
       LargeFile,
       Sexp,
       exit,
       Async_unix_private];
   runtime.caml_register_global(18, Async_unix, cst_Async_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
