// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Multipart_form__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Multipart_form = [0];
   runtime.caml_register_global(0, Multipart_form, "Multipart_form__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Content_type
//# unitInfo: Requires: Angstrom, Fmt, Prettym, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__Map, Stdlib__Result, Stdlib__String, Unstrctrd, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_does_not_respect_standards = " does not respect standards",
    cst_An_extension_token_MUST_be =
      "An extension token MUST be prefixed by [X-]: ",
    cst_An_extension_token_MUST_be$0 =
      "An extension token MUST be prefixed by [X-]: %S",
    cst_Extension_token = "Extension token ",
    cst_Extension_token_S_does_not =
      "Extension token %S does not respect standards",
    cst_Extension_token_MUST_have_ =
      "Extension token MUST have, at least, 3 bytes: ",
    cst_Extension_token_MUST_have_$0 =
      "Extension token MUST have, at least, 3 bytes: %S",
    cst_Value = "Value ",
    cst_X$1 = "X-",
    cst_application$2 = "application",
    cst_audio$2 = "audio",
    cst_ietf = "ietf:",
    cst_ietf_s = "ietf:%s",
    cst_image$2 = "image",
    cst_multipart$2 = "multipart",
    cst_text$2 = "text",
    cst_video$2 = "video",
    cst_x = "x:",
    cst_x_s = "x:%s",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    default$0 = [0, 672582309, "plain"],
    cst = "",
    Prettym = global_data.Prettym,
    Stdlib = global_data.Stdlib,
    Unstrctrd = global_data.Unstrctrd,
    Angstrom = global_data.Angstrom,
    Stdlib_Result = global_data.Stdlib__Result,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Fmt = global_data.Fmt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Uutf = global_data.Uutf,
    Stdlib_Map = global_data.Stdlib__Map,
    cst_X$0 = cst_X$1,
    cst_X = cst_X$1,
    cst_audio$1 = cst_audio$2,
    cst_text$1 = cst_text$2,
    cst_application$1 = cst_application$2,
    cst_message = "message",
    cst_image$1 = cst_image$2,
    cst_multipart$1 = cst_multipart$2,
    cst_video$1 = cst_video$2,
    _aG_ =
      [0,
       [11, "Invalid (unfolded) Content-Type value: ", [3, 0, 0]],
       "Invalid (unfolded) Content-Type value: %S"],
    _u_ = [0, [11, "invalid token: ", [2, 0, 0]], "invalid token: %s"],
    _t_ = [0, [15, [12, 47, [15, [12, 32, [15, 0]]]]], "%a/%a %a"],
    cst_boundary = "boundary",
    _p_ = [0, [15, [12, 61, [15, 0]]], "%a=%a"],
    _q_ = [0, [12, 59, [17, [0, "@ ", 1, 0], 0]], ";@ "],
    _o_ = [0, [3, 0, 0], "%S"],
    _n_ =
      [0,
       [11, cst_Value, [3, 0, [11, " is not a valid UTF-8 string", 0]]],
       "Value %S is not a valid UTF-8 string"],
    _m_ =
      [0,
       [11, cst_Value, [3, 0, [11, cst_does_not_respect_standards, 0]]],
       "Value %S does not respect standards"],
    _l_ =
      [0,
       [11, "Key ", [3, 0, [11, cst_does_not_respect_standards, 0]]],
       "Key %S does not respect standards"],
    _j_ = [0, [11, "iana:", [2, 0, 0]], "iana:%s"],
    _k_ = [0, [11, cst_x, [2, 0, 0]], cst_x_s],
    _i_ = [0, [11, cst_ietf, [2, 0, 0]], cst_ietf_s],
    _h_ =
      [0,
       [11, cst_Extension_token_MUST_have_, [3, 0, 0]],
       cst_Extension_token_MUST_have_$0],
    _f_ =
      [0,
       [11,
        cst_Extension_token,
        [3, 0, [11, cst_does_not_respect_standards, 0]]],
       cst_Extension_token_S_does_not],
    _g_ =
      [0,
       [11, cst_An_extension_token_MUST_be, [3, 0, 0]],
       cst_An_extension_token_MUST_be$0],
    cst_audio$0 = cst_audio$2,
    cst_text$0 = cst_text$2,
    cst_application$0 = cst_application$2,
    cst_image$0 = cst_image$2,
    cst_video$0 = cst_video$2,
    cst_multipart$0 = cst_multipart$2,
    cst_audio = cst_audio$2,
    cst_text = cst_text$2,
    cst_application = cst_application$2,
    cst_image = cst_image$2,
    cst_video = cst_video$2,
    cst_multipart = cst_multipart$2,
    _d_ = [0, [11, cst_ietf, [2, 0, 0]], cst_ietf_s],
    _e_ = [0, [11, cst_x, [2, 0, 0]], cst_x_s],
    _c_ =
      [0,
       [11, cst_Extension_token_MUST_have_, [3, 0, 0]],
       cst_Extension_token_MUST_have_$0],
    _a_ =
      [0,
       [11,
        cst_Extension_token,
        [3, 0, [11, cst_does_not_respect_standards, 0]]],
       cst_Extension_token_S_does_not],
    _b_ =
      [0,
       [11, cst_An_extension_token_MUST_be, [3, 0, 0]],
       cst_An_extension_token_MUST_be$0],
    cst_Multipart_form_Content_typ =
      "Multipart_form__Content_type.Invalid_token",
    cst_Multipart_form_Content_typ$0 =
      "Multipart_form__Content_type.Parameters.Invalid_utf_8",
    _r_ = [1, "us-ascii"],
    cst_charset = "charset";
   function error_msgf(fmt){
    function _c4_(msg){return [1, [0, 3854881, msg]];}
    return caml_call2(Fmt[8], _c4_, fmt);
   }
   var
    Invalid_token = [248, cst_Multipart_form_Content_typ, caml_fresh_oo_id(0)];
   function is_tspecials(param){
    var _c3_ = param - 34 | 0;
    a:
    {
     if(30 < _c3_ >>> 0){
      if(2 < _c3_ - 57 >>> 0) break a;
     }
     else if(24 > _c3_)
      switch(_c3_){
        case 0:
        case 6:
        case 7:
        case 10:
        case 13: break;
        default: break a;
      }
     return 1;
    }
    return 0;
   }
   function is_ctl(param){
    if(127 !== param && 32 <= param) return 0;
    return 1;
   }
   function is_space(_c2_){return 32 === _c2_ ? 1 : 0;}
   function is_ascii(param){return 128 <= param ? 0 : 1;}
   function is_token(c){
    var _cY_ = is_ascii(c);
    if(_cY_){
     var _cZ_ = 1 - is_tspecials(c);
     if(_cZ_)
      var _c0_ = 1 - is_ctl(c), _c1_ = _c0_ ? 1 - (32 === c ? 1 : 0) : _c0_;
     else
      var _c1_ = _cZ_;
    }
    else
     var _c1_ = _cY_;
    return _c1_;
   }
   function is_obs_no_ws_ctl(param){
    a:
    {
     if(13 <= param){
      if(32 <= param){
       if(127 === param) break a;
      }
      else if(14 <= param) break a;
     }
     else
      if(9 <= param){if(11 <= param) break a;} else if(param) break a;
     return 0;
    }
    return 1;
   }
   function is_qtext(param){
    var _cX_ = param - 13 | 0;
    a:
    {
     if(21 < _cX_ >>> 0){
      if(79 === _cX_) break a;
     }
     else if(19 < _cX_ - 1 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   var
    text = 936573133,
    image = -795439301,
    audio = 984475830,
    video = -903248805,
    application = 242303792,
    multipart = -1031569716;
   function is_discrete(param){
    a:
    if(typeof param === "number"){
     if(242303792 <= param){
      if(936573133 !== param && 984475830 !== param && 242303793 <= param)
       break a;
     }
     else if(-903248805 !== param && -795439301 !== param) break a;
     return 1;
    }
    return 0;
   }
   function is_multipart(param){
    if(typeof param === "number" && -1031569716 === param) return 1;
    return 0;
   }
   function ietf(token){return [0, [0, 452357416, token]];}
   function extension(token){
    if(3 > caml_ml_string_length(token))
     return caml_call1(error_msgf(_c_), token);
    var match = caml_string_get(token, 0);
    a:
    {
     var match$0 = caml_string_get(token, 1);
     if(88 !== match && 120 !== match) break a;
     if(45 === match$0)
      try{
       var
        _cS_ =
          caml_call3
           (Stdlib_String[16], token, 2, caml_ml_string_length(token) - 2 | 0),
        _cT_ =
          function(chr){
           var _cW_ = 1 - is_token(chr);
           if(_cW_) throw caml_maybe_attach_backtrace(Invalid_token, 1);
           return _cW_;
          };
       caml_call2(Stdlib_String[30], _cT_, _cS_);
       var _cU_ = [0, [0, -613180270, token]];
       return _cU_;
      }
      catch(_cV_){
       var _cR_ = caml_wrap_exception(_cV_);
       if(_cR_ === Invalid_token) return caml_call1(error_msgf(_a_), token);
       throw caml_maybe_attach_backtrace(_cR_, 0);
      }
    }
    return caml_call1(error_msgf(_b_), token);
   }
   function pp(ppf, param){
    if(typeof param === "number")
     return -795439301 <= param
             ? 936573133
               <= param
               ? 984475830
                 <= param
                 ? caml_call2(Fmt[57], ppf, cst_audio)
                 : caml_call2(Fmt[57], ppf, cst_text)
               : 242303792
                 <= param
                 ? caml_call2(Fmt[57], ppf, cst_application)
                 : caml_call2(Fmt[57], ppf, cst_image)
             : -903248805
               <= param
               ? caml_call2(Fmt[57], ppf, cst_video)
               : caml_call2(Fmt[57], ppf, cst_multipart);
    if(452357416 <= param[1]){
     var token = param[2];
     return caml_call3(Fmt[3], ppf, _d_, token);
    }
    var token$0 = param[2];
    return caml_call3(Fmt[3], ppf, _e_, token$0);
   }
   function to_string(param){
    if(typeof param === "number")
     return -795439301 <= param
             ? 936573133
               <= param
               ? 984475830 <= param ? cst_audio$0 : cst_text$0
               : 242303792 <= param ? cst_application$0 : cst_image$0
             : -903248805 <= param ? cst_video$0 : cst_multipart$0;
    var token = param[2];
    return token;
   }
   function compare(a, b){
    var
     _cN_ = to_string(b),
     _cO_ = caml_call1(Stdlib_String[27], _cN_),
     _cP_ = to_string(a),
     _cQ_ = caml_call1(Stdlib_String[27], _cP_);
    return caml_call2(Stdlib_String[10], _cQ_, _cO_);
   }
   function equal(a, b){return 0 === compare(a, b) ? 1 : 0;}
   var
    Type =
      [0,
       text,
       image,
       audio,
       video,
       application,
       multipart,
       is_discrete,
       is_multipart,
       ietf,
       extension,
       pp,
       to_string,
       compare,
       equal,
       936573133];
   function ietf$0(token){return [0, [0, 452357416, token]];}
   function iana(token){return [0, [0, 672582309, token]];}
   function iana_exn(token){
    var match = iana(token);
    if(0 === match[0]){var v = match[1]; return v;}
    var err = match[1][2];
    return caml_call1(Stdlib[1], err);
   }
   function v(token){return iana_exn(token);}
   function extension$0(token){
    if(3 > caml_ml_string_length(token))
     return caml_call1(error_msgf(_h_), token);
    var match = caml_string_get(token, 0);
    a:
    {
     var match$0 = caml_string_get(token, 1);
     if(88 !== match && 120 !== match) break a;
     if(45 === match$0)
      try{
       var
        _cI_ =
          caml_call3
           (Stdlib_String[16], token, 2, caml_ml_string_length(token) - 2 | 0),
        _cJ_ =
          function(chr){
           var _cM_ = 1 - is_token(chr);
           if(_cM_) throw caml_maybe_attach_backtrace(Invalid_token, 1);
           return _cM_;
          };
       caml_call2(Stdlib_String[30], _cJ_, _cI_);
       var _cK_ = [0, [0, -613180270, token]];
       return _cK_;
      }
      catch(_cL_){
       var _cH_ = caml_wrap_exception(_cL_);
       if(_cH_ === Invalid_token) return caml_call1(error_msgf(_f_), token);
       throw caml_maybe_attach_backtrace(_cH_, 0);
      }
    }
    return caml_call1(error_msgf(_g_), token);
   }
   function pp$0(ppf, param){
    var _cG_ = param[1];
    if(452357416 === _cG_){
     var token = param[2];
     return caml_call3(Fmt[3], ppf, _i_, token);
    }
    if(672582309 <= _cG_){
     var token$0 = param[2];
     return caml_call3(Fmt[3], ppf, _j_, token$0);
    }
    var token$1 = param[2];
    return caml_call3(Fmt[3], ppf, _k_, token$1);
   }
   function compare$0(a, b){
    var
     a$0 = a[2],
     b$0 = b[2],
     _cE_ = caml_call1(Stdlib_String[27], b$0),
     _cF_ = caml_call1(Stdlib_String[27], a$0);
    return caml_call2(Stdlib_String[10], _cF_, _cE_);
   }
   function equal$0(a, b){return 0 === compare$0(a, b) ? 1 : 0;}
   var
    Subtype =
      [0,
       ietf$0,
       iana,
       iana_exn,
       v,
       extension$0,
       pp$0,
       compare$0,
       equal$0,
       default$0],
    Map = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]);
   function key(key){
    try{
     var
      _cA_ =
        function(chr){
         var _cD_ = 1 - is_token(chr);
         if(_cD_) throw caml_maybe_attach_backtrace(Invalid_token, 1);
         return _cD_;
        };
     caml_call2(Stdlib_String[30], _cA_, key);
     var _cB_ = [0, caml_call1(Stdlib_String[27], key)];
     return _cB_;
    }
    catch(_cC_){
     var _cz_ = caml_wrap_exception(_cC_);
     if(_cz_ === Invalid_token) return caml_call1(error_msgf(_l_), key);
     throw caml_maybe_attach_backtrace(_cz_, 0);
    }
   }
   function key_exn(x){
    var match = key(x);
    if(0 === match[0]){var v = match[1]; return v;}
    var err = match[1][2];
    return caml_call1(Stdlib[1], err);
   }
   function k(x){return key_exn(x);}
   var
    Invalid_utf_8 =
      [248, cst_Multipart_form_Content_typ$0, caml_fresh_oo_id(0)];
   function value(v){
    function escape_characters(x){
     var
      len = caml_ml_string_length(x),
      buf = caml_call1(Stdlib_Buffer[1], len);
     function _cw_(chr){
      a:
      {
       b:
       {
        if(14 <= chr){
         if(34 === chr || 92 === chr) break b;
        }
        else
         if(11 <= chr){if(13 <= chr) break b;} else if(9 <= chr) break b;
        var _cx_ = 0;
        break a;
       }
       var _cx_ = 1;
      }
      if(! _cx_) return caml_call2(Stdlib_Buffer[12], buf, chr);
      caml_call2(Stdlib_Buffer[12], buf, 92);
      var switcher = chr - 9 | 0;
      a:
      {
       if(4 >= switcher >>> 0)
        switch(switcher){
          case 0:
           var _cy_ = 116; break a;
          case 1:
           var _cy_ = 110; break a;
          case 4:
           var _cy_ = 114; break a;
        }
       var _cy_ = chr;
      }
      return caml_call2(Stdlib_Buffer[12], buf, _cy_);
     }
     caml_call2(Stdlib_String[30], _cw_, x);
     return caml_call1(Stdlib_Buffer[2], buf);
    }
    try{
     var
      _ck_ =
        function(chr){
         var _cv_ = 1 - is_token(chr);
         if(_cv_) throw caml_maybe_attach_backtrace(Invalid_token, 1);
         return _cv_;
        };
     caml_call2(Stdlib_String[30], _ck_, v);
     var _cl_ = [0, [1, v]], v$0 = _cl_;
    }
    catch(_cu_){
     var _cj_ = caml_wrap_exception(_cu_);
     if(_cj_ !== Invalid_token) throw caml_maybe_attach_backtrace(_cj_, 0);
     var v$0 = caml_call1(error_msgf(_m_), v);
    }
    if(0 === v$0[0]) return v$0;
    function symbol_map(x, f){return caml_call2(Stdlib_Result[8], f, x);}
    function _cq_(x){return [0, x];}
    try{
     var
      _cn_ = 0,
      _co_ =
        function(param, pos, _ct_){
         if(852405675 <= _ct_[1]) return 0;
         throw caml_maybe_attach_backtrace(Invalid_utf_8, 1);
        };
     caml_call5(Uutf[22][2], 0, 0, _co_, _cn_, v);
     var _cp_ = [0, v], _cr_ = _cp_;
    }
    catch(_cs_){
     var _cm_ = caml_wrap_exception(_cs_);
     if(_cm_ !== Invalid_utf_8) throw caml_maybe_attach_backtrace(_cm_, 0);
     var _cr_ = caml_call1(error_msgf(_n_), v);
    }
    return symbol_map(symbol_map(_cr_, escape_characters), _cq_);
   }
   function value_exn(x){
    var match = value(x);
    if(0 === match[0]){var v = match[1]; return v;}
    var err = match[1][2];
    return caml_call1(Stdlib[1], err);
   }
   function v$0(x){return value_exn(x);}
   var empty = Map[1];
   function mem(key, t){return caml_call2(Map[32], key, t);}
   function add(key, value, t){return caml_call3(Map[2], key, value, t);}
   function singleton(key, value){return caml_call2(Map[5], key, value);}
   function remove(key, t){return caml_call2(Map[6], key, t);}
   function find(key, t){
    try{var x = caml_call2(Map[17], key, t);}
    catch(_ci_){
     var _ch_ = caml_wrap_exception(_ci_);
     if(_ch_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_ch_, 0);
    }
    return [0, x];
   }
   function iter(f, t){return caml_call2(Map[23], f, t);}
   var pp_key = Fmt[57];
   function pp_value(ppf, param){
    if(0 === param[0]){
     var value = param[1];
     return caml_call3(Fmt[3], ppf, _o_, value);
    }
    var token = param[1];
    return caml_call2(Fmt[57], ppf, token);
   }
   function pp$1(ppf, t){
    function pp(ppf, param){
     var value = param[2], key = param[1];
     return caml_call6(Fmt[3], ppf, _p_, pp_key, key, pp_value, value);
    }
    var _cf_ = caml_call1(Map[10], t), _cg_ = [0, caml_call1(Fmt[18], _q_)];
    return caml_call4(Fmt[64], _cg_, pp, ppf, _cf_);
   }
   function of_escaped_character(c){
    var switcher = c - 97 | 0;
    if(21 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return 7;
       case 1:
        return 8;
       case 5:
        return 12;
       case 13:
        return 10;
       case 17:
        return 13;
       case 19:
        return 9;
       case 21:
        return 11;
     }
    return c;
   }
   function value_unescape(x){
    var
     len = caml_ml_string_length(x),
     res = caml_call1(Stdlib_Buffer[1], len),
     pos = [0, 0];
    for(;;){
     if(pos[1] >= len) return caml_call1(Stdlib_Buffer[2], res);
     if(92 === caml_string_get(x, pos[1]) && pos[1] < (len - 1 | 0)){
      var _cd_ = of_escaped_character(caml_string_get(x, pos[1] + 1 | 0));
      caml_call2(Stdlib_Buffer[12], res, _cd_);
      pos[1] = pos[1] + 2 | 0;
      continue;
     }
     var _ce_ = caml_string_get(x, pos[1]);
     caml_call2(Stdlib_Buffer[12], res, _ce_);
     pos[1]++;
    }
   }
   function value_compare(a, b){
    if(0 === a[0]){
     var a$0 = a[1];
     if(0 === b[0]){
      var b$0 = b[1], _ca_ = value_unescape(b$0), _cb_ = value_unescape(a$0);
      return caml_call2(Stdlib_String[10], _cb_, _ca_);
     }
     var b$1 = b[1], a$1 = a$0;
    }
    else{
     var a$2 = a[1];
     if(0 !== b[0]){
      var b$2 = b[1];
      return caml_call2(Stdlib_String[10], a$2, b$2);
     }
     var b$1 = a$2, a$1 = b[1];
    }
    var _cc_ = value_unescape(a$1);
    return caml_call2(Stdlib_String[10], _cc_, b$1);
   }
   function value_equal(a, b){
    if(0 === a[0]){
     var a$0 = a[1];
     if(0 === b[0]){
      var b$0 = b[1], _b9_ = value_unescape(b$0), _b__ = value_unescape(a$0);
      return caml_call2(Stdlib_String[9], _b__, _b9_);
     }
     var b$1 = b[1], a$1 = a$0;
    }
    else{
     var a$2 = a[1];
     if(0 !== b[0]){
      var b$2 = b[1];
      return caml_call2(Stdlib_String[9], a$2, b$2);
     }
     var b$1 = a$2, a$1 = b[1];
    }
    var _b$_ = value_unescape(a$1);
    return caml_call2(Stdlib_String[9], _b$_, b$1);
   }
   var
    compare$1 = caml_call1(Map[34], value_compare),
    equal$1 = caml_call1(Map[33], value_equal);
   function of_list(lst){
    var _b7_ = Map[1];
    function _b8_(a, param){
     var value = param[2], key = param[1];
     return caml_call3(Map[2], key, value, a);
    }
    return caml_call3(Stdlib_List[26], _b8_, _b7_, lst);
   }
   function to_list(t){return caml_call1(Map[10], t);}
   var
    default$1 = caml_call3(Map[2], cst_charset, _r_, Map[1]),
    Parameters =
      [0,
       Map,
       key,
       key_exn,
       k,
       Invalid_utf_8,
       value,
       value_exn,
       v$0,
       empty,
       mem,
       add,
       singleton,
       remove,
       find,
       iter,
       pp_key,
       pp_value,
       pp$1,
       of_escaped_character,
       value_unescape,
       value_compare,
       value_equal,
       compare$1,
       equal$1,
       of_list,
       to_list,
       default$1],
    _s_ = caml_call1(Parameters[26], Parameters[27]),
    default$2 = [0, Type[15], Subtype[9], _s_];
   function ty(param){var ty = param[1]; return ty;}
   function subty(param){var subty = param[2]; return subty;}
   function parameters(param){var parameters = param[3]; return parameters;}
   function is_discrete$0(param){
    var ty = param[1];
    return caml_call1(Type[7], ty);
   }
   function is_multipart$0(param){
    var ty = param[1];
    return caml_call1(Type[8], ty);
   }
   function with_type(t, ty){return [0, ty, t[2], t[3]];}
   function with_subtype(t, subty){return [0, t[1], subty, t[3]];}
   function with_parameter(t, param){
    var
     v = param[2],
     k = param[1],
     parameters = caml_call1(Parameters[25], [0, [0, k, v], t[3]]),
     _b6_ = caml_call1(Parameters[26], parameters);
    return [0, t[1], t[2], _b6_];
   }
   function boundary(param){
    var
     parameters = param[3],
     match = caml_call2(Stdlib_List[50], cst_boundary, parameters);
    if(! match) return 0;
    var v = match[1][1];
    return [0, v];
   }
   function make(ty, subty, parameters){
    return [0, ty, subty, caml_call1(Parameters[26], parameters)];
   }
   function pp$2(ppf, param){
    var
     parameters = param[3],
     subty = param[2],
     ty = param[1],
     _b4_ = caml_call1(Parameters[25], parameters),
     _b5_ = caml_call2(Fmt[35], 0, Parameters[18]);
    return caml_call8
            (Fmt[3], ppf, _t_, Type[11], ty, Subtype[6], subty, _b5_, _b4_);
   }
   function equal$2(a, b){
    var _bZ_ = caml_call2(Type[14], a[1], b[1]);
    if(_bZ_){
     var _b0_ = caml_call2(Subtype[8], a[2], b[2]);
     if(_b0_){
      var
       _b1_ = caml_call1(Parameters[25], b[3]),
       _b2_ = caml_call1(Parameters[25], a[3]);
      return caml_call2(Parameters[24], _b2_, _b1_);
     }
     var _b3_ = _b0_;
    }
    else
     var _b3_ = _bZ_;
    return _b3_;
   }
   function invalid_token(token){
    return caml_call3(Fmt[8], Angstrom[52], _u_, token);
   }
   function of_string(s, a){
    var match = caml_call3(Angstrom[75], 1, a, s);
    if(0 !== match[0]) return 0;
    var v = match[1];
    return [0, v];
   }
   function is_wsp(param){if(9 !== param && 32 !== param) return 0; return 1;}
   var
    token = caml_call1(Angstrom[14], is_token),
    attribute = caml_call2(Angstrom[55], token, Stdlib_String[27]),
    _v_ = caml_call1(Angstrom[4], 45);
   function _w_(param){if(88 !== param && 120 !== param) return 0; return 1;}
   var
    _x_ = caml_call1(Angstrom[7], _w_),
    _y_ = caml_call2(Angstrom[58], _x_, _v_),
    x_token = caml_call2(Angstrom[58], _y_, token);
   function _z_(param){
    a:
    if(param){
     var _bW_ = param[1];
     if(88 !== _bW_ && 120 !== _bW_) break a;
     var _bX_ = function(v){return [0, -613180270, v];};
     return caml_call2(Angstrom[55], x_token, _bX_);
    }
    function _bY_(v){return [0, 452357416, v];}
    return caml_call2(Angstrom[55], token, _bY_);
   }
   var extension_token = caml_call2(Angstrom[53], Angstrom[1], _z_);
   function _A_(s){
    var match = caml_call1(Stdlib_String[27], s);
    if(! caml_string_notequal(match, cst_application$2))
     return caml_call1(Angstrom[51], 242303792);
    if(! caml_string_notequal(match, cst_audio$2))
     return caml_call1(Angstrom[51], 984475830);
    if(! caml_string_notequal(match, cst_image$2))
     return caml_call1(Angstrom[51], -795439301);
    if(! caml_string_notequal(match, cst_multipart$2))
     return caml_call1(Angstrom[51], -1031569716);
    if(! caml_string_notequal(match, cst_text$2))
     return caml_call1(Angstrom[51], 936573133);
    if(! caml_string_notequal(match, cst_video$2))
     return caml_call1(Angstrom[51], -903248805);
    var match$0 = of_string(s, extension_token);
    if(! match$0) return invalid_token(s);
    var v = match$0[1];
    return caml_call1(Angstrom[51], v);
   }
   var ty$0 = caml_call2(Angstrom[53], token, _A_);
   function _B_(s){
    try{
     var v$0 = [0, 672582309, s], _bU_ = caml_call1(Angstrom[51], v$0);
     return _bU_;
    }
    catch(_bV_){
     var _bT_ = caml_wrap_exception(_bV_);
     if(_bT_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_bT_, 0);
     var match = of_string(s, extension_token);
     if(! match) return invalid_token(s);
     var v = match[1];
     return caml_call1(Angstrom[51], v);
    }
   }
   var subty$0 = caml_call2(Angstrom[53], token, _B_);
   function _3(x, y, z){return [0, x, y, z];}
   function _4(a, b, c, d){return [0, a, b, c, d];}
   var symbol = caml_bytes_set;
   function _C_(param){return 63 < param - 128 >>> 0 ? 0 : 1;}
   var utf_8_tail = caml_call1(Angstrom[7], _C_);
   function _D_(b0){
    function _bR_(b1){
     var res = caml_create_bytes(2);
     caml_bytes_set(res, 0, b0);
     caml_bytes_set(res, 1, b1);
     var _bS_ = caml_call1(Stdlib_Bytes[44], res);
     return caml_call1(Angstrom[51], _bS_);
    }
    return caml_call2(Angstrom[53], utf_8_tail, _bR_);
   }
   function _E_(param){return 29 < param - 194 >>> 0 ? 0 : 1;}
   var
    _F_ = caml_call1(Angstrom[7], _E_),
    utf_8_0 = caml_call2(Angstrom[53], _F_, _D_);
   function _G_(param){return 1 < param - 238 >>> 0 ? 0 : 1;}
   var
    _H_ = caml_call1(Angstrom[7], _G_),
    _I_ = caml_call4(Angstrom[62], _3, _H_, utf_8_tail, utf_8_tail);
   function _J_(param){return 31 < param - 128 >>> 0 ? 0 : 1;}
   var
    _K_ = caml_call1(Angstrom[7], _J_),
    _L_ = caml_call1(Angstrom[4], 237),
    _M_ = caml_call4(Angstrom[62], _3, _L_, _K_, utf_8_tail);
   function _N_(param){return 11 < param - 225 >>> 0 ? 0 : 1;}
   var
    _O_ = caml_call1(Angstrom[7], _N_),
    _P_ = caml_call4(Angstrom[62], _3, _O_, utf_8_tail, utf_8_tail);
   function _Q_(param){return 31 < param - 160 >>> 0 ? 0 : 1;}
   var
    _R_ = caml_call1(Angstrom[7], _Q_),
    _S_ = caml_call1(Angstrom[4], 224),
    _T_ = caml_call4(Angstrom[62], _3, _S_, _R_, utf_8_tail),
    _U_ = caml_call2(Angstrom[47], _T_, _P_),
    _V_ = caml_call2(Angstrom[47], _U_, _M_),
    utf_8_1 = caml_call2(Angstrom[47], _V_, _I_);
   function _W_(param){
    var
     b2 = param[3],
     b1 = param[2],
     b0 = param[1],
     res = caml_create_bytes(3);
    caml_bytes_set(res, 0, b0);
    caml_bytes_set(res, 1, b1);
    caml_bytes_set(res, 2, b2);
    var _bQ_ = caml_call1(Stdlib_Bytes[44], res);
    return caml_call1(Angstrom[51], _bQ_);
   }
   var utf_8_1$0 = caml_call2(Angstrom[53], utf_8_1, _W_);
   function _X_(param){return 15 < param - 128 >>> 0 ? 0 : 1;}
   var
    _Y_ = caml_call1(Angstrom[7], _X_),
    _Z_ = caml_call1(Angstrom[4], 244),
    ___ = caml_call5(Angstrom[63], _4, _Z_, _Y_, utf_8_tail, utf_8_tail);
   function _$_(param){return 2 < param - 241 >>> 0 ? 0 : 1;}
   var
    _aa_ = caml_call1(Angstrom[7], _$_),
    _ab_ =
      caml_call5(Angstrom[63], _4, _aa_, utf_8_tail, utf_8_tail, utf_8_tail);
   function _ac_(param){return 47 < param - 144 >>> 0 ? 0 : 1;}
   var
    _ad_ = caml_call1(Angstrom[7], _ac_),
    _ae_ = caml_call1(Angstrom[4], 240),
    _af_ = caml_call5(Angstrom[63], _4, _ae_, _ad_, utf_8_tail, utf_8_tail),
    _ag_ = caml_call2(Angstrom[47], _af_, _ab_),
    utf_8_2 = caml_call2(Angstrom[47], _ag_, ___);
   function _ah_(param){
    var
     b3 = param[4],
     b2 = param[3],
     b1 = param[2],
     b0 = param[1],
     res = caml_create_bytes(4);
    caml_bytes_set(res, 0, b0);
    caml_bytes_set(res, 1, b1);
    caml_bytes_set(res, 2, b2);
    caml_bytes_set(res, 3, b3);
    var _bP_ = caml_call1(Stdlib_Bytes[44], res);
    return caml_call1(Angstrom[51], _bP_);
   }
   var utf_8_2$0 = caml_call2(Angstrom[53], utf_8_2, _ah_);
   function utf_8_and(is){
    var
     _bK_ = caml_call1(Stdlib_String[1], 1),
     _bL_ = caml_call1(Angstrom[7], is),
     _bM_ = caml_call2(Angstrom[55], _bL_, _bK_),
     _bN_ = caml_call2(Angstrom[47], _bM_, utf_8_0),
     _bO_ = caml_call2(Angstrom[47], _bN_, utf_8_1$0);
    return caml_call2(Angstrom[47], _bO_, utf_8_2$0);
   }
   var
    _ai_ = caml_call1(Stdlib_String[1], 1),
    _aj_ = Parameters[19],
    _ak_ = Angstrom[6],
    _al_ = caml_call1(Angstrom[4], 92),
    _am_ = caml_call2(Angstrom[58], _al_, _ak_),
    _an_ = caml_call2(Angstrom[55], _am_, _aj_),
    quoted_pair = caml_call2(Angstrom[55], _an_, _ai_),
    _ao_ = caml_call1(Stdlib_String[7], cst),
    _ap_ = caml_call1(Angstrom[4], 34),
    _aq_ = utf_8_and(is_qtext),
    _ar_ = caml_call2(Angstrom[47], quoted_pair, _aq_),
    _as_ = caml_call1(Angstrom[38], _ar_),
    _at_ = caml_call1(Angstrom[4], 34),
    _au_ = caml_call2(Angstrom[58], _at_, _as_),
    _av_ = caml_call2(Angstrom[59], _au_, _ap_),
    quoted_string = caml_call2(Angstrom[55], _av_, _ao_);
   function _aw_(v){return [1, v];}
   var _ax_ = caml_call2(Angstrom[55], token, _aw_);
   function _ay_(v){return [0, v];}
   var
    _az_ = caml_call2(Angstrom[55], quoted_string, _ay_),
    value$0 = caml_call2(Angstrom[47], _az_, _ax_);
   function _aA_(attribute){
    function _bD_(value){return [0, attribute, value];}
    var
     _bE_ = caml_call1(Angstrom[11], is_wsp),
     _bF_ = caml_call1(Angstrom[4], 61),
     _bG_ = caml_call1(Angstrom[11], is_wsp),
     _bH_ = caml_call2(Angstrom[58], _bG_, _bF_),
     _bI_ = caml_call2(Angstrom[58], _bH_, _bE_),
     _bJ_ = caml_call2(Angstrom[58], _bI_, value$0);
    return caml_call2(Angstrom[55], _bJ_, _bD_);
   }
   var parameter = caml_call2(Angstrom[53], attribute, _aA_);
   function _aB_(ty){
    function _bo_(param){
     function _bq_(subty){
      function _bv_(parameters){return [0, ty, subty, parameters];}
      var
       _bw_ = caml_call1(Angstrom[11], is_wsp),
       _bx_ = caml_call1(Angstrom[4], 59),
       _by_ = caml_call1(Angstrom[11], is_wsp),
       _bz_ = caml_call2(Angstrom[58], _by_, _bx_),
       _bA_ = caml_call2(Angstrom[58], _bz_, _bw_),
       _bB_ = caml_call2(Angstrom[58], _bA_, parameter),
       _bC_ = caml_call1(Angstrom[38], _bB_);
      return caml_call2(Angstrom[55], _bC_, _bv_);
     }
     var
      _br_ = caml_call1(Angstrom[11], is_wsp),
      _bs_ = caml_call1(Angstrom[11], is_wsp),
      _bt_ = caml_call2(Angstrom[58], _bs_, subty$0),
      _bu_ = caml_call2(Angstrom[59], _bt_, _br_);
     return caml_call2(Angstrom[53], _bu_, _bq_);
    }
    var _bp_ = caml_call1(Angstrom[4], 47);
    return caml_call2(Angstrom[53], _bp_, _bo_);
   }
   var
    _aC_ = caml_call1(Angstrom[11], is_wsp),
    _aD_ = caml_call1(Angstrom[11], is_wsp),
    _aE_ = caml_call2(Angstrom[58], _aD_, ty$0),
    _aF_ = caml_call2(Angstrom[59], _aE_, _aC_),
    content = caml_call2(Angstrom[53], _aF_, _aB_),
    Decoder =
      [0,
       invalid_token,
       of_string,
       is_wsp,
       token,
       attribute,
       token,
       x_token,
       extension_token,
       ty$0,
       subty$0,
       _3,
       _4,
       symbol,
       utf_8_tail,
       utf_8_0,
       utf_8_1$0,
       utf_8_2$0,
       utf_8_and,
       quoted_pair,
       quoted_string,
       value$0,
       parameter,
       content];
   function of_string$0(str){
    var symbol_bind = Stdlib_Result[6];
    function symbol_map(x, f){return caml_call2(Stdlib_Result[8], f, x);}
    function _bk_(str){
     var match = caml_call3(Angstrom[75], 0, Decoder[23], str);
     if(0 !== match[0]) return caml_call1(error_msgf(_aG_), str);
     var v = match[1];
     return [0, v];
    }
    var arg = Unstrctrd[7];
    function _bl_(eta){return caml_call2(arg, 0, eta);}
    var _bm_ = Unstrctrd[14];
    function _bn_(param){
     var v = param[2];
     return caml_call1(Unstrctrd[15], v);
    }
    return caml_call2
            (symbol_bind,
             symbol_map
              (caml_call2
                (symbol_bind,
                 symbol_map(caml_call1(Unstrctrd[3], str), _bn_),
                 _bm_),
               _bl_),
             _bk_);
   }
   function ty$1(ppf, param){
    if(typeof param === "number")
     return -412983897 <= param
             ? 936573133
               <= param
               ? 984475830
                 <= param
                 ? caml_call2(Prettym[17], ppf, cst_audio$1)
                 : caml_call2(Prettym[17], ppf, cst_text$1)
               : 242303792
                 <= param
                 ? caml_call2(Prettym[17], ppf, cst_application$1)
                 : caml_call2(Prettym[17], ppf, cst_message)
             : -903248805
               === param
               ? caml_call2(Prettym[17], ppf, cst_video$1)
               : -795439301
                 <= param
                 ? caml_call2(Prettym[17], ppf, cst_image$1)
                 : caml_call2(Prettym[17], ppf, cst_multipart$1);
    if(452357416 <= param[1]){
     var v = param[2];
     return caml_call2(Prettym[17], ppf, v);
    }
    var v$0 = param[2], _bi_ = Prettym[17];
    function _bj_(v){return caml_call2(Stdlib[28], cst_X, v);}
    return caml_call4(Prettym[16], _bj_, _bi_, ppf, v$0);
   }
   function subty$1(ppf, param){
    var _bf_ = param[1];
    if(452357416 === _bf_){
     var v = param[2];
     return caml_call2(Prettym[17], ppf, v);
    }
    if(672582309 <= _bf_){
     var v$0 = param[2];
     return caml_call2(Prettym[17], ppf, v$0);
    }
    var v$1 = param[2], _bg_ = Prettym[17];
    function _bh_(v){return caml_call2(Stdlib[28], cst_X$0, v);}
    return caml_call4(Prettym[16], _bh_, _bg_, ppf, v$1);
   }
   function value$1(ppf, param){
    if(0 === param[0]){
     var
      x = param[1],
      _bb_ = [0, caml_call2(Prettym[10], Prettym[21], 34), 0],
      _bc_ = [0, caml_call1(Prettym[9], Prettym[17]), _bb_],
      _bd_ = [0, caml_call2(Prettym[10], Prettym[21], 34), _bc_];
     return caml_call3(Prettym[26], ppf, _bd_, x);
    }
    var x$0 = param[1], _be_ = [0, caml_call1(Prettym[9], Prettym[17]), 0];
    return caml_call3(Prettym[26], ppf, _be_, x$0);
   }
   function parameter$0(ppf, param){
    var
     v = param[2],
     key = param[1],
     _a7_ = [0, Prettym[15], 0],
     _a8_ = [0, caml_call1(Prettym[9], value$1), _a7_],
     _a9_ = [0, Prettym[5], _a8_],
     _a__ = [0, caml_call2(Prettym[10], Prettym[21], 61), _a9_],
     _a$_ = [0, Prettym[5], _a__],
     _ba_ = [0, caml_call1(Prettym[9], Prettym[17]), _a$_];
    return caml_call4(Prettym[26], ppf, [0, Prettym[14], _ba_], key, v);
   }
   function parameters$0(ppf, parameters){
    function sep(ppf, param){
     var
      _a5_ = [0, Prettym[3], 0],
      _a6_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _a5_];
     return caml_call2(Prettym[26], ppf, _a6_);
    }
    var
     _a2_ = [0, Prettym[15], 0],
     _a3_ = caml_call2(Prettym[22], [0, sep, 0], parameter$0),
     _a4_ = [0, caml_call1(Prettym[9], _a3_), _a2_];
    return caml_call3(Prettym[26], ppf, [0, Prettym[14], _a4_], parameters);
   }
   function content_type(ppf, t){
    if(t[3]){
     var
      _aH_ = t[3],
      _aI_ = t[2],
      _aJ_ = t[1],
      _aK_ = [0, Prettym[15], 0],
      _aL_ = [0, caml_call1(Prettym[9], parameters$0), _aK_],
      _aM_ = [0, Prettym[3], _aL_],
      _aN_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _aM_],
      _aO_ = [0, Prettym[5], _aN_],
      _aP_ = [0, caml_call1(Prettym[9], subty$1), _aO_],
      _aQ_ = [0, Prettym[5], _aP_],
      _aR_ = [0, caml_call2(Prettym[10], Prettym[21], 47), _aQ_],
      _aS_ = [0, Prettym[5], _aR_],
      _aT_ = [0, caml_call1(Prettym[9], ty$1), _aS_];
     return caml_call5
             (Prettym[26], ppf, [0, Prettym[13], _aT_], _aJ_, _aI_, _aH_);
    }
    var
     _aU_ = t[2],
     _aV_ = t[1],
     _aW_ = [0, Prettym[15], 0],
     _aX_ = [0, caml_call1(Prettym[9], subty$1), _aW_],
     _aY_ = [0, Prettym[5], _aX_],
     _aZ_ = [0, caml_call2(Prettym[10], Prettym[21], 47), _aY_],
     _a0_ = [0, Prettym[5], _aZ_],
     _a1_ = [0, caml_call1(Prettym[9], ty$1), _a0_];
    return caml_call4(Prettym[26], ppf, [0, Prettym[13], _a1_], _aV_, _aU_);
   }
   var
    Encoder =
      [0, ty$1, subty$1, value$1, parameter$0, parameters$0, content_type];
   function to_string$0(v){
    return caml_call4(Prettym[34], 0, 0, Encoder[6], v);
   }
   var
    Multipart_form_Content_type =
      [0,
       error_msgf,
       Invalid_token,
       is_tspecials,
       is_ctl,
       is_space,
       is_ascii,
       is_token,
       is_obs_no_ws_ctl,
       is_qtext,
       Type,
       Subtype,
       Parameters,
       default$2,
       ty,
       subty,
       parameters,
       is_discrete$0,
       is_multipart$0,
       with_type,
       with_subtype,
       with_parameter,
       boundary,
       make,
       pp$2,
       equal$2,
       Decoder,
       of_string$0,
       Encoder,
       to_string$0];
   runtime.caml_register_global
    (66, Multipart_form_Content_type, "Multipart_form__Content_type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Content_disposition
//# unitInfo: Requires: Angstrom, Fmt, Multipart_form__Content_type, Prettym, Stdlib, Stdlib__List, Stdlib__Result, Stdlib__String, Unstrctrd
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_date = "#date",
    cst_hov = "<hov>",
    cst = "@ ",
    cst_X$0 = "X-",
    cst_attachment$1 = "attachment",
    cst_filename$1 = "filename",
    cst_inline$1 = "inline",
    cst_name$1 = "name",
    cst_nothing_to_do = "nothing to do",
    cst_parameters = "parameters",
    cst_read_date$1 = "read-date",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call16
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15){
    return (f.l >= 0 ? f.l : f.l = f.length) == 16
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [11, " }", 0],
    partial$0 =
      [17,
       [0, cst, 1, 0],
       [11,
        "size= ",
        [15,
         [12,
          59,
          [17,
           [0, cst, 1, 0],
           [11,
            "parameters= ",
            [18,
             [1, [0, [11, cst_hov, 0], cst_hov]],
             [15, [17, 0, [12, 59, [17, 0, partial]]]]]]]]]]],
    partial$1 =
      [11,
       "creation= ",
       [15,
        [12,
         59,
         [17,
          [0, cst, 1, 0],
          [11,
           "modification= ",
           [15,
            [12,
             59,
             [17, [0, cst, 1, 0], [11, "read= ", [15, [12, 59, partial$0]]]]]]]]]]],
    partial$2 = [0, cst, 1, 0],
    Prettym = global_data.Prettym,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Unstrctrd = global_data.Unstrctrd,
    Angstrom = global_data.Angstrom,
    Stdlib_Result = global_data.Stdlib__Result,
    Stdlib_String = global_data.Stdlib__String,
    Fmt = global_data.Fmt,
    Multipart_form_Content_type = global_data.Multipart_form__Content_type,
    cst_filename$0 = cst_filename$1,
    cst_size = "size",
    cst_attachment$0 = cst_attachment$1,
    cst_inline$0 = cst_inline$1,
    cst_X = cst_X$0,
    _T_ =
      [0,
       [11, "Invalid (unfolded) Content-Disposition value: ", [3, 0, 0]],
       "Invalid (unfolded) Content-Disposition value: %S"],
    _j_ = [0, [11, "invalid token: ", [2, 0, 0]], "invalid token: %s"],
    cst_name$0 = cst_name$1,
    _e_ = [0, [11, cst_parameters, 0], cst_parameters],
    _f_ = [0, [11, cst_date, 0], cst_date],
    _g_ = [0, [11, cst_date, 0], cst_date],
    _h_ = [0, [11, cst_date, 0], cst_date],
    _i_ =
      [0,
       [11,
        "{ ",
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "type= ",
          [15,
           [12,
            59,
            [17,
             [0, cst, 1, 0],
             [11, "filename= ", [15, [12, 59, [17, partial$2, partial$1]]]]]]]]]],
       "{ @[<hov>type= %a;@ filename= %a;@ creation= %a;@ modification= %a;@ read= %a;@ size= %a;@ parameters= @[<hov>%a@];@] }"],
    _d_ = [0, [3, 0, 0], "%S"],
    cst_attachment = cst_attachment$1,
    cst_inline = cst_inline$1,
    _b_ = [0, [11, "<ietf:", [2, 0, [12, 62, 0]]], "<ietf:%s>"],
    _c_ = [0, [11, cst_X$0, [2, 0, 0]], "X-%s"],
    _a_ = [0, 452357416, "form-data"],
    cst_name = cst_name$1,
    _k_ = [0, [11, cst_nothing_to_do, 0], cst_nothing_to_do],
    cst_filename = cst_filename$1,
    cst_creation_date = "creation-date",
    cst_modification_date = "modification-date",
    cst_read_date = cst_read_date$1,
    cst_read_date$0 = cst_read_date$1;
   function error_msgf(fmt){
    function _by_(msg){return [1, [0, 3854881, msg]];}
    return caml_call2(Fmt[8], _by_, fmt);
   }
   function v(filename, opt, size, name){
    if(opt) var sth = opt[1], kind = sth; else var kind = _a_;
    return [0,
            kind,
            filename,
            0,
            0,
            0,
            size,
            [0, [0, cst_name, [0, name]], 0]];
   }
   function pp_disposition_type(ppf, param){
    if(typeof param === "number")
     return -735835133 <= param
             ? caml_call2(Fmt[57], ppf, cst_attachment)
             : caml_call2(Fmt[57], ppf, cst_inline);
    if(452357416 <= param[1]){
     var v = param[2];
     return caml_call3(Fmt[3], ppf, _b_, v);
    }
    var v$0 = param[2];
    return caml_call3(Fmt[3], ppf, _c_, v$0);
   }
   function pp_value(ppf, param){
    if(0 === param[0]){
     var v = param[1];
     return caml_call3(Fmt[3], ppf, _d_, v);
    }
    var v$0 = param[1];
    return caml_call2(Fmt[57], ppf, v$0);
   }
   function pp(ppf, t){
    var _bf_ = t[7], _bg_ = Fmt[57], _bh_ = caml_call1(Fmt[18], _e_);
    function _bi_(f){
     function _bx_(param){
      var v = param[2], k = param[1];
      return caml_call2(f, k, v);
     }
     return caml_call1(Stdlib_List[18], _bx_);
    }
    var
     _bj_ = caml_call4(Fmt[70][16], _bi_, _bh_, _bg_, pp_value),
     _bk_ = t[6],
     _bl_ = caml_call2(Fmt[62], 0, Fmt[45]),
     _bm_ = t[5],
     _bn_ = caml_call1(Fmt[18], _f_),
     _bo_ = caml_call2(Fmt[62], 0, _bn_),
     _bp_ = t[4],
     _bq_ = caml_call1(Fmt[18], _g_),
     _br_ = caml_call2(Fmt[62], 0, _bq_),
     _bs_ = t[3],
     _bt_ = caml_call1(Fmt[18], _h_),
     _bu_ = caml_call2(Fmt[62], 0, _bt_),
     _bv_ = t[2],
     _bw_ = caml_call2(Fmt[62], 0, Fmt[57]);
    return caml_call16
            (Fmt[3],
             ppf,
             _i_,
             pp_disposition_type,
             t[1],
             _bw_,
             _bv_,
             _bu_,
             _bs_,
             _br_,
             _bp_,
             _bo_,
             _bm_,
             _bl_,
             _bk_,
             _bj_,
             _bf_);
   }
   function name(t){
    var match = caml_call2(Stdlib_List[50], cst_name$0, t[7]);
    if(! match) return 0;
    var v = match[1][1];
    return [0, v];
   }
   function filename(param){var filename = param[2]; return filename;}
   function size(param){var size = param[6]; return size;}
   function disposition_type(param){var ty = param[1]; return ty;}
   function of_escaped_character(c){
    var switcher = c - 97 | 0;
    if(21 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return 7;
       case 1:
        return 8;
       case 5:
        return 12;
       case 13:
        return 10;
       case 17:
        return 13;
       case 19:
        return 9;
       case 21:
        return 11;
     }
    return c;
   }
   function is_obs_no_ws_ctl(param){
    a:
    {
     if(13 <= param){
      if(32 <= param){
       if(127 === param) break a;
      }
      else if(14 <= param) break a;
     }
     else
      if(9 <= param){if(11 <= param) break a;} else if(param) break a;
     return 0;
    }
    return 1;
   }
   function is_qtext(c){
    var _be_ = c - 35 | 0;
    a:
    {
     if(91 < _be_ >>> 0){
      if(-2 !== _be_) break a;
     }
     else if(57 === _be_) break a;
     return 1;
    }
    return is_obs_no_ws_ctl(c);
   }
   function is_wsp(param){if(9 !== param && 32 !== param) return 0; return 1;}
   function is_tspecials(param){
    var _bd_ = param - 34 | 0;
    a:
    {
     if(30 < _bd_ >>> 0){
      if(2 < _bd_ - 57 >>> 0) break a;
     }
     else if(24 > _bd_)
      switch(_bd_){
        case 0:
        case 6:
        case 7:
        case 10:
        case 13: break;
        default: break a;
      }
     return 1;
    }
    return 0;
   }
   function invalid_token(token){
    return caml_call3(Fmt[8], Angstrom[52], _j_, token);
   }
   var nothing_to_do = caml_call2(Fmt[8], Angstrom[52], _k_);
   function is_ctl(param){
    if(127 !== param && 32 <= param) return 0;
    return 1;
   }
   function is_space(_bc_){return 32 === _bc_ ? 1 : 0;}
   function is_ascii(param){return 128 <= param ? 0 : 1;}
   function is_token(c){
    var _a__ = is_ascii(c);
    if(_a__){
     var _a$_ = 1 - is_tspecials(c);
     if(_a$_)
      var _ba_ = 1 - is_ctl(c), _bb_ = _ba_ ? 1 - (32 === c ? 1 : 0) : _ba_;
     else
      var _bb_ = _a$_;
    }
    else
     var _bb_ = _a__;
    return _bb_;
   }
   var token = caml_call1(Angstrom[14], is_token);
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   var
    attribute = caml_call2(Angstrom[55], token, Stdlib_String[27]),
    _l_ = caml_call1(Angstrom[4], 45);
   function _m_(param){if(88 !== param && 120 !== param) return 0; return 1;}
   var
    _n_ = caml_call1(Angstrom[7], _m_),
    _o_ = caml_call2(Angstrom[58], _n_, _l_),
    x_token = caml_call2(Angstrom[58], _o_, token);
   function _p_(param){
    a:
    if(param){
     var _a7_ = param[1];
     if(88 !== _a7_ && 120 !== _a7_) break a;
     var _a8_ = function(v){return [0, -613180270, v];};
     return caml_call2(Angstrom[55], x_token, _a8_);
    }
    function _a9_(v){return [0, 452357416, v];}
    return caml_call2(Angstrom[55], token, _a9_);
   }
   var extension_token = caml_call2(Angstrom[53], Angstrom[1], _p_);
   function _q_(v){return [1, v];}
   var _r_ = caml_call2(Angstrom[55], token, _q_);
   function _s_(v){return [0, v];}
   var
    _t_ = caml_call2(Angstrom[55], Multipart_form_Content_type[26][20], _s_),
    value = caml_call2(Angstrom[47], _t_, _r_);
   function of_string(s, a){
    var match = caml_call3(Angstrom[75], 1, a, s);
    if(0 !== match[0]) return 0;
    var v = match[1];
    return [0, v];
   }
   function _u_(s){
    var match = caml_call1(Stdlib_String[27], s);
    if(! caml_string_notequal(match, cst_attachment$1))
     return caml_call1(Angstrom[51], -735835133);
    if(! caml_string_notequal(match, cst_inline$1))
     return caml_call1(Angstrom[51], -841728391);
    var match$0 = of_string(s, extension_token);
    if(! match$0) return invalid_token(s);
    var v = match$0[1];
    return caml_call1(Angstrom[51], v);
   }
   var disposition_type$0 = caml_call2(Angstrom[53], token, _u_);
   function _v_(attribute){
    function _a0_(value){return [0, attribute, value];}
    var
     _a1_ = caml_call1(Angstrom[11], is_wsp),
     _a2_ = caml_call1(Angstrom[4], 61),
     _a3_ = caml_call1(Angstrom[11], is_wsp),
     _a4_ = caml_call2(Angstrom[58], _a3_, _a2_),
     _a5_ = caml_call2(Angstrom[58], _a4_, _a1_),
     _a6_ = caml_call2(Angstrom[58], _a5_, value);
    return caml_call2(Angstrom[55], _a6_, _a0_);
   }
   var parameter = caml_call2(Angstrom[53], attribute, _v_);
   function _w_(param){return 0;}
   var quoted_date_time = caml_call2(Angstrom[55], value, _w_);
   function parm(parm, value){
    var
     _aT_ = caml_call1(Angstrom[11], is_wsp),
     _aU_ = caml_call1(Angstrom[4], 61),
     _aV_ = caml_call1(Angstrom[11], is_wsp),
     _aW_ = caml_call1(Angstrom[8], parm),
     _aX_ = caml_call2(Angstrom[58], _aW_, _aV_),
     _aY_ = caml_call2(Angstrom[58], _aX_, _aU_),
     _aZ_ = caml_call2(Angstrom[58], _aY_, _aT_);
    return caml_call2(Angstrom[58], _aZ_, value);
   }
   var
    filename_parm = parm(cst_filename, value),
    creation_date_parm = parm(cst_creation_date, quoted_date_time),
    modification_date_parm = parm(cst_modification_date, quoted_date_time),
    read_date_parm = parm(cst_read_date, quoted_date_time),
    _x_ = caml_call1(Angstrom[14], is_digit),
    size_parm =
      parm
       (cst_read_date$0,
        caml_call2(Angstrom[55], _x_, runtime.caml_int_of_string));
   function _y_(v){return [5, v];}
   var _z_ = caml_call2(Angstrom[55], parameter, _y_);
   function _A_(v){return [4, v];}
   var _B_ = caml_call2(Angstrom[55], size_parm, _A_);
   function _C_(v){return [3, v];}
   var _D_ = caml_call2(Angstrom[55], read_date_parm, _C_);
   function _E_(v){return [2, v];}
   var _F_ = caml_call2(Angstrom[55], modification_date_parm, _E_);
   function _G_(v){return [1, v];}
   var _H_ = caml_call2(Angstrom[55], creation_date_parm, _G_);
   function _I_(v){return [0, v];}
   var
    _J_ = caml_call2(Angstrom[55], filename_parm, _I_),
    _K_ = caml_call2(Angstrom[47], _J_, _H_),
    _L_ = caml_call2(Angstrom[47], _K_, _F_),
    _M_ = caml_call2(Angstrom[47], _L_, _D_),
    _N_ = caml_call2(Angstrom[47], _M_, _B_),
    disposition_parm = caml_call2(Angstrom[47], _N_, _z_);
   function _O_(ty){
    function _aJ_(parameters){
     var
      filename = [0, 0],
      creation = [0, 0],
      modification = [0, 0],
      read = [0, 0],
      size = [0, 0],
      _aR_ = 0;
     function _aS_(a, param){
      switch(param[0]){
        case 0:
         var v = param[1][1]; filename[1] = [0, v]; return a;
        case 1:
         var v$0 = param[1]; creation[1] = [0, v$0]; return a;
        case 2:
         var v$1 = param[1]; modification[1] = [0, v$1]; return a;
        case 3:
         var v$2 = param[1]; read[1] = [0, v$2]; return a;
        case 4:
         var v$3 = param[1]; size[1] = [0, v$3]; return a;
        default: var v$4 = param[1]; return [0, v$4, a];
      }
     }
     var parameters$0 = caml_call3(Stdlib_List[26], _aS_, _aR_, parameters);
     return caml_call1
             (Angstrom[51],
              [0,
               ty,
               filename[1],
               creation[1],
               modification[1],
               read[1],
               size[1],
               parameters$0]);
    }
    var
     _aK_ = caml_call1(Angstrom[11], is_wsp),
     _aL_ = caml_call1(Angstrom[4], 59),
     _aM_ = caml_call1(Angstrom[11], is_wsp),
     _aN_ = caml_call2(Angstrom[58], _aM_, _aL_),
     _aO_ = caml_call2(Angstrom[58], _aN_, _aK_),
     _aP_ = caml_call2(Angstrom[58], _aO_, disposition_parm),
     _aQ_ = caml_call1(Angstrom[38], _aP_);
    return caml_call2(Angstrom[53], _aQ_, _aJ_);
   }
   var
    _P_ = caml_call1(Angstrom[11], is_wsp),
    _Q_ = caml_call1(Angstrom[11], is_wsp),
    _R_ = caml_call2(Angstrom[58], _Q_, disposition_type$0),
    _S_ = caml_call2(Angstrom[59], _R_, _P_),
    disposition = caml_call2(Angstrom[53], _S_, _O_),
    Decoder =
      [0,
       is_tspecials,
       invalid_token,
       nothing_to_do,
       is_ctl,
       is_space,
       is_ascii,
       is_token,
       token,
       is_digit,
       attribute,
       token,
       x_token,
       extension_token,
       value,
       of_string,
       disposition_type$0,
       parameter,
       quoted_date_time,
       parm,
       filename_parm,
       creation_date_parm,
       modification_date_parm,
       read_date_parm,
       size_parm,
       disposition_parm,
       disposition];
   function of_string$0(str){
    var symbol_bind = Stdlib_Result[6];
    function symbol_map(x, f){return caml_call2(Stdlib_Result[8], f, x);}
    function _aG_(str){
     var match = caml_call3(Angstrom[75], 1, Decoder[26], str);
     if(0 !== match[0]) return caml_call1(error_msgf(_T_), str);
     var v = match[1];
     return [0, v];
    }
    var arg = Unstrctrd[7];
    function _aH_(eta){return caml_call2(arg, 0, eta);}
    function _aI_(param){
     var v = param[2];
     return caml_call1(Unstrctrd[15], v);
    }
    return caml_call2
            (symbol_bind,
             symbol_map(symbol_map(caml_call1(Unstrctrd[3], str), _aI_), _aH_),
             _aG_);
   }
   function disposition_type$1(ppf, param){
    if(typeof param === "number"){
     if(-735835133 <= param){
      var
       _aB_ = [0, caml_call2(Prettym[10], Prettym[17], cst_attachment$0), 0];
      return caml_call2(Prettym[26], ppf, _aB_);
     }
     var _aC_ = [0, caml_call2(Prettym[10], Prettym[17], cst_inline$0), 0];
     return caml_call2(Prettym[26], ppf, _aC_);
    }
    if(452357416 <= param[1]){
     var v = param[2], _aD_ = [0, caml_call1(Prettym[9], Prettym[17]), 0];
     return caml_call3(Prettym[26], ppf, _aD_, v);
    }
    var
     v$0 = param[2],
     _aE_ = [0, caml_call1(Prettym[9], Prettym[17]), 0],
     _aF_ = [0, caml_call2(Prettym[10], Prettym[17], cst_X), _aE_];
    return caml_call3(Prettym[26], ppf, _aF_, v$0);
   }
   function token$0(ppf, str){
    var _aA_ = [0, caml_call1(Prettym[9], Prettym[17]), 0];
    return caml_call3(Prettym[26], ppf, _aA_, str);
   }
   function value$0(ppf, param){
    if(0 === param[0]){
     var
      v = param[1],
      _ax_ = [0, caml_call2(Prettym[10], Prettym[21], 34), 0],
      _ay_ = [0, caml_call1(Prettym[9], Prettym[17]), _ax_],
      _az_ = [0, caml_call2(Prettym[10], Prettym[21], 34), _ay_];
     return caml_call3(Prettym[26], ppf, _az_, v);
    }
    var v$0 = param[1];
    return token$0(ppf, v$0);
   }
   function disposition_parm$0(ppf, param){
    var v = param[1];
    switch(v[1]){
      case 0:
       var match = v[2];
       if(! match) return ppf;
       var
        v$0 = match[1],
        _ad_ = [0, Prettym[3], 0],
        _ae_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _ad_],
        _af_ = [0, caml_call1(Prettym[9], token$0), _ae_],
        _ag_ = [0, caml_call2(Prettym[10], Prettym[21], 61), _af_],
        _ah_ = [0, Prettym[5], _ag_],
        _ai_ = [0, caml_call2(Prettym[10], Prettym[17], cst_filename$0), _ah_];
       return caml_call3(Prettym[26], ppf, _ai_, v$0);
      case 1:
       return ppf;
      case 2:
       return ppf;
      case 3:
       return ppf;
      case 4:
       var match$0 = v[2];
       if(! match$0) return ppf;
       var
        v$1 = match$0[1],
        _aj_ = caml_call1(Stdlib[33], v$1),
        _ak_ = [0, Prettym[3], 0],
        _al_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _ak_],
        _am_ = [0, caml_call1(Prettym[9], Prettym[17]), _al_],
        _an_ = [0, caml_call2(Prettym[10], Prettym[21], 61), _am_],
        _ao_ = [0, Prettym[5], _an_],
        _ap_ = [0, caml_call2(Prettym[10], Prettym[17], cst_size), _ao_];
       return caml_call3(Prettym[26], ppf, _ap_, _aj_);
      default:
       var _aq_ = v[2];
       if(! _aq_) return ppf;
       var
        match$1 = _aq_[1],
        v$2 = match$1[2],
        k = match$1[1],
        _ar_ = [0, Prettym[3], 0],
        _as_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _ar_],
        _at_ = [0, caml_call1(Prettym[9], value$0), _as_],
        _au_ = [0, caml_call2(Prettym[10], Prettym[21], 61), _at_],
        _av_ = [0, Prettym[5], _au_],
        _aw_ = [0, caml_call1(Prettym[9], Prettym[17]), _av_];
       return caml_call4(Prettym[26], ppf, _aw_, k, v$2);
    }
   }
   function disposition$0(ppf, v){
    function sep(ppf, param){
     return caml_call2(Prettym[26], ppf, [0, Prettym[5], 0]);
    }
    var _U_ = v[7];
    function _V_(param){
     var v = param[2], k = param[1];
     return [0, [0, 5, [0, [0, k, v]]]];
    }
    var
     _W_ = caml_call2(Stdlib_List[20], _V_, _U_),
     _X_ =
       caml_call2
        (Stdlib[37],
         [0,
          [0, [0, 0, v[2]]],
          [0,
           [0, [0, 1, v[3]]],
           [0,
            [0, [0, 2, v[4]]],
            [0, [0, [0, 3, v[5]]], [0, [0, [0, 4, v[6]]], 0]]]]],
         _W_),
     _Y_ = v[1],
     _Z_ = caml_call2(Prettym[22], [0, sep, 0], disposition_parm$0),
     ___ = [0, caml_call1(Prettym[9], _Z_), 0],
     _$_ = [0, Prettym[3], ___],
     _aa_ = [0, caml_call2(Prettym[10], Prettym[21], 59), _$_],
     _ab_ = [0, Prettym[5], _aa_],
     _ac_ = [0, caml_call1(Prettym[9], disposition_type$1), _ab_];
    return caml_call4(Prettym[26], ppf, _ac_, _Y_, _X_);
   }
   var
    Encoder =
      [0,
       disposition_type$1,
       token$0,
       value$0,
       disposition_parm$0,
       disposition$0];
   function to_string(v){return caml_call4(Prettym[34], 0, 0, Encoder[5], v);}
   var
    Multipart_form_Content_disposi =
      [0,
       error_msgf,
       v,
       pp_disposition_type,
       pp_value,
       pp,
       name,
       filename,
       size,
       disposition_type,
       of_escaped_character,
       is_obs_no_ws_ctl,
       is_qtext,
       is_wsp,
       Decoder,
       of_string$0,
       Encoder,
       to_string];
   runtime.caml_register_global
    (37,
     Multipart_form_Content_disposi,
     "Multipart_form__Content_disposition");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Content_encoding
//# unitInfo: Requires: Angstrom, Fmt, Prettym, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_7bit$1 = "7bit",
    cst_8bit$1 = "8bit",
    cst_base64$1 = "base64",
    cst_binary$1 = "binary",
    cst_quoted_printable$1 = "quoted-printable",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Prettym = global_data.Prettym,
    Stdlib_String = global_data.Stdlib__String,
    Angstrom = global_data.Angstrom,
    Fmt = global_data.Fmt,
    cst_8bit$0 = cst_8bit$1,
    cst_7bit$0 = cst_7bit$1,
    cst_binary$0 = cst_binary$1,
    cst_base64$0 = cst_base64$1,
    cst_quoted_printable$0 = cst_quoted_printable$1,
    cst_X = "X-",
    _i_ = [0, [11, "invalid token: ", [2, 0, 0]], "invalid token: %s"],
    _d_ = [0, 456100816],
    _e_ = [0, 564146209],
    _f_ = [0, 163344815],
    _g_ = [0, 737158891],
    _h_ = [0, 737158890],
    _c_ =
      [0,
       [11, "Invalid MIME encoding: ", [2, 0, 0]],
       "Invalid MIME encoding: %s"],
    cst_8bit = cst_8bit$1,
    cst_7bit = cst_7bit$1,
    cst_binary = cst_binary$1,
    cst_base64 = cst_base64$1,
    cst_quoted_printable = cst_quoted_printable$1,
    _a_ = [0, [11, "ietf:", [2, 0, 0]], "ietf:%s"],
    _b_ = [0, [11, "x:", [2, 0, 0]], "x:%s"];
   function error_msgf(fmt){
    function _J_(msg){return [1, [0, 3854881, msg]];}
    return caml_call2(Fmt[8], _J_, fmt);
   }
   function pp(ppf, param){
    if(typeof param === "number")
     return 456100816 === param
             ? caml_call2(Fmt[57], ppf, cst_quoted_printable)
             : 737158890
               <= param
               ? 737158891
                 <= param
                 ? caml_call2(Fmt[57], ppf, cst_8bit)
                 : caml_call2(Fmt[57], ppf, cst_7bit)
               : 564146209
                 <= param
                 ? caml_call2(Fmt[57], ppf, cst_binary)
                 : caml_call2(Fmt[57], ppf, cst_base64);
    if(452357416 <= param[1]){
     var token = param[2];
     return caml_call3(Fmt[3], ppf, _a_, token);
    }
    var token$0 = param[2];
    return caml_call3(Fmt[3], ppf, _b_, token$0);
   }
   var
    default$0 = 737158890,
    bit8 = 737158891,
    bit7 = 737158890,
    binary = 564146209,
    quoted_printable = 456100816,
    base64 = 163344815;
   function of_string(x){
    return caml_string_notequal(x, cst_7bit$1)
            ? caml_string_notequal
               (x, cst_8bit$1)
              ? caml_string_notequal
                 (x, cst_base64$1)
                ? caml_string_notequal
                   (x, cst_binary$1)
                  ? caml_string_notequal
                     (x, cst_quoted_printable$1)
                    ? caml_call1(error_msgf(_c_), x)
                    : _d_
                  : _e_
                : _f_
              : _g_
            : _h_;
   }
   function equal(a, b){
    if(typeof a === "number"){
     if(564146209 <= a){
      if(737158890 === a){
       if(typeof b === "number" && 737158890 === b) return 1;
      }
      else
       if(737158891 === a){
        if(typeof b === "number" && 737158891 === b) return 1;
       }
       else if(564146210 > a && typeof b === "number" && 564146209 === b)
        return 1;
     }
     else
      if(163344815 === a){
       if(typeof b === "number" && 163344815 === b) return 1;
      }
      else if(456100816 === a && typeof b === "number" && 456100816 === b)
       return 1;
    }
    else{
     var _E_ = a[1];
     if(-613180270 === _E_){
      if(typeof b !== "number" && -613180270 === b[1]){
       var
        b$0 = b[2],
        a$0 = a[2],
        _F_ = caml_call1(Stdlib_String[27], b$0),
        _G_ = caml_call1(Stdlib_String[27], a$0);
       return caml_call2(Stdlib_String[9], _G_, _F_);
      }
     }
     else if(452357416 === _E_ && typeof b !== "number" && 452357416 === b[1]){
      var
       b$1 = b[2],
       a$1 = a[2],
       _H_ = caml_call1(Stdlib_String[27], b$1),
       _I_ = caml_call1(Stdlib_String[27], a$1);
      return caml_call2(Stdlib_String[9], _I_, _H_);
     }
    }
    return 0;
   }
   function invalid_token(token){
    return caml_call3(Fmt[8], Angstrom[52], _i_, token);
   }
   function of_string$0(s, a){
    var match = caml_call3(Angstrom[75], 1, a, s);
    if(0 !== match[0]) return 0;
    var v = match[1];
    return [0, v];
   }
   function is_tspecials(param){
    var _D_ = param - 34 | 0;
    a:
    {
     if(30 < _D_ >>> 0){
      if(2 < _D_ - 57 >>> 0) break a;
     }
     else if(24 > _D_)
      switch(_D_){
        case 0:
        case 6:
        case 7:
        case 10:
        case 13: break;
        default: break a;
      }
     return 1;
    }
    return 0;
   }
   function is_ctl(param){
    if(127 !== param && 32 <= param) return 0;
    return 1;
   }
   function is_space(_C_){return 32 === _C_ ? 1 : 0;}
   function is_ascii(param){return 128 <= param ? 0 : 1;}
   function is_token(c){
    var _y_ = is_ascii(c);
    if(_y_){
     var _z_ = 1 - is_tspecials(c);
     if(_z_)
      var _A_ = 1 - is_ctl(c), _B_ = _A_ ? 1 - (32 === c ? 1 : 0) : _A_;
     else
      var _B_ = _z_;
    }
    else
     var _B_ = _y_;
    return _B_;
   }
   var
    token = caml_call1(Angstrom[14], is_token),
    _j_ = caml_call1(Angstrom[4], 45);
   function _k_(param){if(88 !== param && 120 !== param) return 0; return 1;}
   var
    _l_ = caml_call1(Angstrom[7], _k_),
    _m_ = caml_call2(Angstrom[58], _l_, _j_),
    x_token = caml_call2(Angstrom[58], _m_, token);
   function _n_(param){
    a:
    if(param){
     var _v_ = param[1];
     if(88 !== _v_ && 120 !== _v_) break a;
     var _w_ = function(v){return [0, -613180270, v];};
     return caml_call2(Angstrom[55], x_token, _w_);
    }
    function _x_(v){return [0, 452357416, v];}
    return caml_call2(Angstrom[55], token, _x_);
   }
   var extension_token = caml_call2(Angstrom[53], Angstrom[1], _n_);
   function is_wsp(param){if(9 !== param && 32 !== param) return 0; return 1;}
   function _o_(s){
    var match = caml_call1(Stdlib_String[27], s);
    if(! caml_string_notequal(match, cst_7bit$1))
     return caml_call1(Angstrom[51], 737158890);
    if(! caml_string_notequal(match, cst_8bit$1))
     return caml_call1(Angstrom[51], 737158891);
    if(! caml_string_notequal(match, cst_base64$1))
     return caml_call1(Angstrom[51], 163344815);
    if(! caml_string_notequal(match, cst_binary$1))
     return caml_call1(Angstrom[51], 564146209);
    if(! caml_string_notequal(match, cst_quoted_printable$1))
     return caml_call1(Angstrom[51], 456100816);
    var match$0 = of_string$0(s, extension_token);
    if(! match$0) return invalid_token(s);
    var v = match$0[1];
    return caml_call1(Angstrom[51], v);
   }
   var
    _p_ = caml_call1(Angstrom[11], is_wsp),
    _q_ = caml_call1(Angstrom[11], is_wsp),
    _r_ = caml_call2(Angstrom[58], _q_, token),
    _s_ = caml_call2(Angstrom[59], _r_, _p_),
    mechanism = caml_call2(Angstrom[53], _s_, _o_),
    Decoder =
      [0,
       invalid_token,
       of_string$0,
       is_tspecials,
       is_ctl,
       is_space,
       is_ascii,
       is_token,
       token,
       token,
       x_token,
       extension_token,
       is_wsp,
       mechanism];
   function mechanism$0(ppf, param){
    if(typeof param === "number")
     return 456100816 === param
             ? caml_call2(Prettym[17], ppf, cst_quoted_printable$0)
             : 737158890
               <= param
               ? 737158891
                 <= param
                 ? caml_call2(Prettym[17], ppf, cst_8bit$0)
                 : caml_call2(Prettym[17], ppf, cst_7bit$0)
               : 564146209
                 <= param
                 ? caml_call2(Prettym[17], ppf, cst_binary$0)
                 : caml_call2(Prettym[17], ppf, cst_base64$0);
    if(452357416 <= param[1]){
     var x = param[2];
     return caml_call2(Prettym[17], ppf, x);
    }
    var
     x$0 = param[2],
     _t_ = [0, caml_call1(Prettym[9], Prettym[17]), 0],
     _u_ = [0, caml_call2(Prettym[10], Prettym[17], cst_X), _t_];
    return caml_call3(Prettym[26], ppf, _u_, x$0);
   }
   var Encoder = [0, mechanism$0];
   function to_string(v){return caml_call4(Prettym[34], 0, 0, Encoder[1], v);}
   var
    Multipart_form_Content_encodin =
      [0,
       error_msgf,
       pp,
       default$0,
       bit8,
       bit7,
       binary,
       quoted_printable,
       base64,
       of_string,
       equal,
       Decoder,
       Encoder,
       to_string];
   runtime.caml_register_global
    (34, Multipart_form_Content_encodin, "Multipart_form__Content_encoding");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Field_name
//# unitInfo: Requires: Angstrom, Fmt, Prettym, Stdlib__Bytes, Stdlib__Map, Stdlib__Set, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    content_type = "Content-Type",
    content_transfer_encoding = "Content-Transfer-Encoding",
    content_disposition = "Content-Disposition",
    Stdlib_String = global_data.Stdlib__String,
    Fmt = global_data.Fmt,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Angstrom = global_data.Angstrom,
    Prettym = global_data.Prettym,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    _c_ =
      [0,
       [11, "Field.prefixed_by: ", [2, 0, [11, " contains '-'", 0]]],
       "Field.prefixed_by: %s contains '-'"],
    _d_ = [0, "lib/field_name.ml", 56, 10],
    _b_ = [0, [2, 0, 0], "%s"],
    _a_ = [0, [11, "Invalid field: ", [3, 0, 0]], "Invalid field: %S"],
    cst_Multipart_form_Field_name_ = "Multipart_form__Field_name.Break";
   function error_msgf(fmt){
    function _r_(msg){return [1, [0, 3854881, msg]];}
    return caml_call2(Fmt[8], _r_, fmt);
   }
   function compare(a, b){
    var
     a$0 = caml_call1(Stdlib_String[27], a),
     b$0 = caml_call1(Stdlib_String[27], b);
    return caml_call2(Stdlib_String[10], a$0, b$0);
   }
   function equal(a, b){return 0 === compare(a, b) ? 1 : 0;}
   function capitalize(x){
    function capitalize(res, idx){
     var
      chr = runtime.caml_bytes_get(res, idx),
      _q_ = 25 < chr - 97 >>> 0 ? chr : chr - 32 | 0;
     runtime.caml_bytes_set(res, idx, _q_);
     return;
    }
    var
     res = caml_call1(Stdlib_Bytes[5], x),
     _n_ = caml_ml_string_length(x) - 1 | 0,
     _m_ = 0;
    if(_n_ >= 0){
     var i = _m_;
     for(;;){
      a:
      {
       if(0 < i){
        var param = caml_string_get(x, i - 1 | 0);
        b:
        {if(32 !== param && 45 !== param){var _o_ = 0; break b;} var _o_ = 1;}
        if(_o_){capitalize(res, i); break a;}
       }
       if(0 === i) capitalize(res, i);
      }
      var _p_ = i + 1 | 0;
      if(_n_ === i) break;
      var i = _p_;
     }
    }
    return caml_call1(Stdlib_Bytes[44], res);
   }
   var
    canonicalize = Stdlib_String[27],
    Break = [248, cst_Multipart_form_Field_name_, runtime.caml_fresh_oo_id(0)];
   function is_ftext(param){
    var switcher = param - 33 | 0;
    if(93 >= switcher >>> 0 && 25 !== switcher) return 1;
    return 0;
   }
   function of_string(x){
    try{
     var _i_ = caml_ml_string_length(x) - 1 | 0, _h_ = 0;
     if(_i_ >= 0){
      var i = _h_;
      for(;;){
       if(1 - is_ftext(caml_string_get(x, i)))
        throw caml_maybe_attach_backtrace(Break, 1);
       var _k_ = i + 1 | 0;
       if(_i_ === i) break;
       var i = _k_;
      }
     }
     var _j_ = [0, x];
     return _j_;
    }
    catch(_l_){
     var _g_ = caml_wrap_exception(_l_);
     if(_g_ === Break) return caml_call1(error_msgf(_a_), x);
     throw caml_maybe_attach_backtrace(_g_, 0);
    }
   }
   function of_string_exn(x){
    var match = of_string(x);
    if(0 === match[0]){var x$0 = match[1]; return x$0;}
    var err = match[1][2];
    return caml_call2(Fmt[13], _b_, err);
   }
   var pp = caml_call2(Fmt[19], capitalize, Fmt[57]);
   function prefixed_by(prefix, field){
    if(caml_call2(Stdlib_String[15], prefix, 45))
     caml_call2(Fmt[13], _c_, prefix);
    var
     _e_ = caml_call1(Stdlib_String[27], field),
     match = caml_call2(Stdlib_String[17], 45, _e_);
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    var x = match[1];
    if(! match[2]) return 0;
    var _f_ = caml_call1(Stdlib_String[27], prefix);
    return caml_call2(Stdlib_String[9], x, _f_);
   }
   var
    field_name = caml_call1(Angstrom[14], is_ftext),
    Decoder = [0, field_name],
    field_name$0 = caml_call2(Prettym[16], capitalize, Prettym[17]),
    Encoder = [0, field_name$0],
    Map = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
    Set = caml_call1(Stdlib_Set[1], [0, Stdlib_String[10]]),
    Multipart_form_Field_name =
      [0,
       error_msgf,
       compare,
       equal,
       capitalize,
       canonicalize,
       Break,
       is_ftext,
       of_string,
       of_string_exn,
       of_string_exn,
       pp,
       prefixed_by,
       Decoder,
       Encoder,
       Map,
       Set,
       content_type,
       content_transfer_encoding,
       content_disposition];
   runtime.caml_register_global
    (16, Multipart_form_Field_name, "Multipart_form__Field_name");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Field
//# unitInfo: Requires: Angstrom, Fmt, Multipart_form__Content_disposition, Multipart_form__Content_encoding, Multipart_form__Content_type, Multipart_form__Field_name, Prettym, Stdlib__Bytes, Stdlib__Option, Stdlib__Result, Stdlib__String, Unstrctrd, Unstrctrd_parser
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_hov = "<hov>",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ":",
    Prettym = global_data.Prettym,
    Multipart_form_Field_name = global_data.Multipart_form__Field_name,
    Multipart_form_Content_type = global_data.Multipart_form__Content_type,
    Multipart_form_Content_encodin =
      global_data.Multipart_form__Content_encoding,
    Multipart_form_Content_disposi =
      global_data.Multipart_form__Content_disposition,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Result = global_data.Stdlib__Result,
    Stdlib_Option = global_data.Stdlib__Option,
    Angstrom = global_data.Angstrom,
    Unstrctrd = global_data.Unstrctrd,
    Unstrctrd_parser = global_data.Unstrctrd_parser,
    Stdlib_String = global_data.Stdlib__String,
    Fmt = global_data.Fmt,
    _f_ = [0, "lib/field.ml", 73, 13],
    _c_ = [0, 0],
    _d_ = [0, 1],
    _e_ = [0, 2],
    _b_ = [0, 3],
    _a_ =
      [0,
       [15,
        [12,
         91,
         [0,
          [11,
           "]: ",
           [18, [1, [0, [11, cst_hov, 0], cst_hov]], [15, [17, 0, 0]]]]]]],
       "%a[%c]: @[<hov>%a@]"];
   function pp_unstrctrd(ppf, v){
    var _z_ = caml_call2(Unstrctrd[7], 0, v);
    return caml_call2(Fmt[57], ppf, _z_);
   }
   function pp(ppf, param){
    var
     v = param[3],
     w = param[2],
     field_name = param[1],
     is_unstructured = 3 <= w ? 1 : 0;
    switch(w){
      case 0:
       var _x_ = Multipart_form_Content_type[24]; break;
      case 1:
       var _x_ = Multipart_form_Content_encodin[2]; break;
      case 2:
       var _x_ = Multipart_form_Content_disposi[5]; break;
      default: var _x_ = pp_unstrctrd;
    }
    var _y_ = is_unstructured ? 33 : 42;
    return caml_call7
            (Fmt[3],
             ppf,
             _a_,
             Multipart_form_Field_name[11],
             field_name,
             _y_,
             _x_,
             v);
   }
   function symbol(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function of_field_name(field_name){
    var match = caml_call1(Stdlib_String[27], field_name);
    return caml_string_notequal(match, "content-disposition")
            ? caml_string_notequal
               (match, "content-transfer-encoding")
              ? caml_string_notequal(match, "content-type") ? _b_ : _c_
              : _d_
            : _e_;
   }
   function parser(param){
    switch(param){
      case 0:
       return Multipart_form_Content_type[26][23];
      case 1:
       return Multipart_form_Content_encodin[11][13];
      case 2:
       return Multipart_form_Content_disposi[14][26];
      default:
       var buf = caml_create_bytes(127);
       return caml_call1(Unstrctrd_parser[1], buf);
    }
   }
   function field(g, field_name){
    var buf = caml_create_bytes(127);
    function _m_(v){
     var
      _o_ = caml_call1(Multipart_form_Field_name[15][18], field_name),
      match = caml_call2(Stdlib_Option[5], g, _o_);
     if(match)
      var w = match[1], match$0 = w;
     else
      var match$0 = of_field_name(field_name);
     var
      w$0 = match$0[1],
      parser$0 = parser(w$0),
      symbol_bind = Stdlib_Result[6];
     function symbol_map(x, f){return caml_call2(Stdlib_Result[8], f, x);}
     function _p_(v){return [0, field_name, w$0, v];}
     var _q_ = caml_call1(caml_call1(Angstrom[75], 0), parser$0);
     function _r_(msg){return [0, 3854881, msg];}
     var _s_ = caml_call1(Stdlib_Result[9], _r_);
     function _t_(_w_){return symbol(_s_, _q_, _w_);}
     var arg = Unstrctrd[7];
     function _u_(eta){return caml_call2(arg, 0, eta);}
     var
      _v_ = Unstrctrd[15],
      res =
        symbol_map
         (caml_call2
           (symbol_bind,
            symbol_map(symbol_map(caml_call1(Unstrctrd[14], v), _v_), _u_),
            _t_),
          _p_);
     if(0 !== res[0]) return caml_call1(Angstrom[51], [0, field_name, 3, v]);
     var v$0 = res[1];
     return caml_call1(Angstrom[51], v$0);
    }
    var _n_ = caml_call1(Unstrctrd_parser[1], buf);
    return caml_call2(Angstrom[53], _n_, _m_);
   }
   var Decoder = [0, field];
   function encoder(param){
    switch(param){
      case 0:
       return Multipart_form_Content_type[28][6];
      case 1:
       return Multipart_form_Content_encodin[12][1];
      case 2:
       return Multipart_form_Content_disposi[16][5];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    }
   }
   function field$0(ppf, field){
    var
     v = field[3],
     w = field[2],
     field_name = field[1],
     e = encoder(w),
     _g_ = [0, Prettym[15], [0, Prettym[11], 0]],
     _h_ = [0, caml_call1(Prettym[9], e), _g_],
     _i_ = [0, caml_call1(Prettym[4], 1), _h_],
     _j_ = [0, caml_call2(Prettym[10], Prettym[17], cst), _i_],
     _k_ = [0, caml_call1(Prettym[9], Multipart_form_Field_name[14][1]), _j_],
     _l_ = [0, caml_call1(Prettym[12], 1), _k_];
    return caml_call4(Prettym[26], ppf, _l_, field_name, v);
   }
   var
    Encoder = [0, field$0],
    Multipart_form_Field =
      [0,
       pp_unstrctrd,
       pp,
       symbol,
       of_field_name,
       parser,
       Decoder,
       encoder,
       Encoder];
   runtime.caml_register_global
    (23, Multipart_form_Field, "Multipart_form__Field");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Header
//# unitInfo: Requires: Angstrom, Fmt, Multipart_form__Content_encoding, Multipart_form__Content_type, Multipart_form__Field, Multipart_form__Field_name, Prettym, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Multipart_form_Field = global_data.Multipart_form__Field,
    Angstrom = global_data.Angstrom,
    Multipart_form_Field_name = global_data.Multipart_form__Field_name,
    Stdlib_List = global_data.Stdlib__List,
    Multipart_form_Content_encodin =
      global_data.Multipart_form__Content_encoding,
    Multipart_form_Content_type = global_data.Multipart_form__Content_type,
    Stdlib = global_data.Stdlib,
    Fmt = global_data.Fmt,
    Prettym = global_data.Prettym,
    _a_ = Multipart_form_Field[2],
    _b_ = [0, caml_call1(Fmt[18], [0, [17, 3, 0], "@\n"])],
    pp = caml_call2(Fmt[64], _b_, _a_);
   function assoc(field_name, header){
    function f(acc, field){
     var field_name$0 = field[1];
     return caml_call2(Multipart_form_Field_name[3], field_name, field_name$0)
             ? [0, field, acc]
             : acc;
    }
    var _t_ = caml_call3(Stdlib_List[26], f, 0, header);
    return caml_call1(Stdlib_List[10], _t_);
   }
   function remove_assoc(field_name, header){
    function f(acc, x){
     var field_name$0 = x[1];
     return caml_call2(Multipart_form_Field_name[3], field_name, field_name$0)
             ? acc
             : [0, x, acc];
    }
    var _s_ = caml_call3(Stdlib_List[26], f, 0, header);
    return caml_call1(Stdlib_List[10], _s_);
   }
   function exists(field_name, t){
    function _r_(param){
     var field_name$0 = param[1];
     return caml_call2(Multipart_form_Field_name[3], field_name, field_name$0);
    }
    return caml_call2(Stdlib_List[34], _r_, t);
   }
   var empty = 0;
   function concat(a, b){return caml_call2(Stdlib[37], a, b);}
   function to_list(x){return x;}
   function add(field_name, param, t){
    var v = param[2], w = param[1], field = [0, field_name, w, v];
    return [0, field, t];
   }
   function replace(field_name, param, t){
    var
     v = param[2],
     w = param[1],
     header = remove_assoc(field_name, t),
     field = [0, field_name, w, v];
    return [0, field, header];
   }
   function of_list(x){return x;}
   function of_list_with_location(x){return x;}
   function content_type(header){
    var content = [0, Multipart_form_Content_type[13]];
    function _o_(param){
     if(param[2]) return 0;
     var
      v = param[3],
      field_name = param[1],
      _p_ =
        caml_call2
         (Multipart_form_Field_name[3],
          field_name,
          Multipart_form_Field_name[17]),
      _q_ = _p_ ? (content[1] = v, 0) : _p_;
     return _q_;
    }
    caml_call2(Stdlib_List[18], _o_, header);
    return content[1];
   }
   function content_encoding(header){
    var mechanism = [0, Multipart_form_Content_encodin[3]];
    function _l_(param){
     if(1 !== param[2]) return 0;
     var
      v = param[3],
      field_name = param[1],
      _m_ =
        caml_call2
         (Multipart_form_Field_name[3],
          field_name,
          Multipart_form_Field_name[18]),
      _n_ = _m_ ? (mechanism[1] = v, 0) : _m_;
     return _n_;
    }
    caml_call2(Stdlib_List[18], _l_, header);
    return mechanism[1];
   }
   function content_disposition(header){
    var disposition = [0, 0];
    function _i_(param){
     if(2 !== param[2]) return 0;
     var
      v = param[3],
      field_name = param[1],
      _j_ =
        caml_call2
         (Multipart_form_Field_name[3],
          field_name,
          Multipart_form_Field_name[19]),
      _k_ = _j_ ? (disposition[1] = [0, v], 0) : _j_;
     return _k_;
    }
    caml_call2(Stdlib_List[18], _i_, header);
    return disposition[1];
   }
   function is_wsp(param){if(9 !== param && 32 !== param) return 0; return 1;}
   function _c_(field_name){
    var
     _e_ = caml_call2(Multipart_form_Field[6][1], 0, field_name),
     _f_ = caml_call1(Angstrom[4], 58),
     _g_ = caml_call1(Angstrom[11], is_wsp),
     _h_ = caml_call2(Angstrom[58], _g_, _f_);
    return caml_call2(Angstrom[58], _h_, _e_);
   }
   var
    field = caml_call2(Angstrom[53], Multipart_form_Field_name[13][1], _c_),
    header = caml_call1(Angstrom[38], field),
    Decoder = [0, is_wsp, field, header],
    keval_order = Prettym[1],
    break$0 = Prettym[2],
    fws = Prettym[3],
    spaces = Prettym[4],
    cut = Prettym[5],
    const$0 = Prettym[6],
    atom = Prettym[7],
    a = Prettym[8],
    symbol = Prettym[9],
    symbol$0 = Prettym[10],
    new_line = Prettym[11],
    tbox = Prettym[12],
    bbox = Prettym[13],
    box = Prettym[14],
    close = Prettym[15],
    using = Prettym[16],
    string = Prettym[17],
    bytes = Prettym[18],
    bigstring = Prettym[19],
    breakable = Prettym[20],
    char$0 = Prettym[21],
    list = Prettym[22],
    option = Prettym[23],
    concat$0 = Prettym[24],
    keval = Prettym[25],
    eval$0 = Prettym[26],
    Buffer = Prettym[27],
    IOVec = Prettym[28],
    io_buffer_size = Prettym[29],
    create = Prettym[30],
    is_empty = Prettym[31],
    flush = Prettym[32],
    kflush = Prettym[33],
    to_string = Prettym[34],
    to_stream = Prettym[35],
    _d_ = 0,
    noop = [0, function(ppf, param){return ppf;}, _d_];
   function field$0(ppf, x){
    return caml_call2(Multipart_form_Field[8][1], ppf, x);
   }
   function header$0(ppf, x){
    return caml_call2(caml_call2(list, noop, field$0), ppf, x);
   }
   var
    Encoder =
      [0,
       keval_order,
       break$0,
       fws,
       spaces,
       cut,
       const$0,
       atom,
       a,
       symbol,
       symbol$0,
       new_line,
       tbox,
       bbox,
       box,
       close,
       using,
       string,
       bytes,
       bigstring,
       breakable,
       char$0,
       list,
       option,
       concat$0,
       keval,
       eval$0,
       Buffer,
       IOVec,
       io_buffer_size,
       create,
       is_empty,
       flush,
       kflush,
       to_string,
       to_stream,
       noop,
       field$0,
       header$0],
    Multipart_form_Header =
      [0,
       pp,
       assoc,
       remove_assoc,
       exists,
       empty,
       concat,
       to_list,
       add,
       replace,
       of_list,
       of_list_with_location,
       content_type,
       content_encoding,
       content_disposition,
       Decoder,
       Encoder];
   runtime.caml_register_global
    (10, Multipart_form_Header, "Multipart_form__Header");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form__Rfc2046
//# unitInfo: Requires: Angstrom, Bigstringaf, Fmt, Multipart_form__Header, Stdlib, Stdlib__Option, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "--",
    cst_nothing_to_do = "nothing to do",
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = "\r\n",
    cst = cst$2,
    Angstrom = global_data.Angstrom,
    Stdlib_Option = global_data.Stdlib__Option,
    Multipart_form_Header = global_data.Multipart_form__Header,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Fmt = global_data.Fmt,
    _b_ = [0, [11, cst_nothing_to_do, 0], cst_nothing_to_do];
   function is_bcharsnospace(param){
    a:
    {
     b:
     {
      if(95 <= param){
       if(97 <= param){if(123 <= param) break b; break a;}
       if(96 <= param) break b;
      }
      else{
       if(65 <= param){if(91 <= param) break b; break a;}
       if(39 > param) break b;
       switch(param - 39 | 0){
         case 3:
         case 20:
         case 21:
         case 23:
         case 25:
          break b;
         case 9:
         case 10:
         case 11:
         case 12:
         case 13:
         case 14:
         case 15:
         case 16:
         case 17:
         case 18:
          return 1;
       }
      }
      return 1;
     }
     return 0;
    }
    return 1;
   }
   function is_bchars(c){return 32 === c ? 1 : is_bcharsnospace(c);}
   function make_dash_boundary(boundary){
    return caml_call2(Stdlib[28], cst, boundary);
   }
   function dash_boundary(boundary){
    var _as_ = make_dash_boundary(boundary);
    return caml_call1(Angstrom[8], _as_);
   }
   function make_delimiter(boundary){
    var _ar_ = make_dash_boundary(boundary);
    return caml_call2(Stdlib[28], cst$0, _ar_);
   }
   function make_close_delimiter(boundary){
    var _aq_ = make_delimiter(boundary);
    return caml_call2(Stdlib[28], _aq_, cst$1);
   }
   function close_delimiter(boundary){
    var _ap_ = make_close_delimiter(boundary);
    return caml_call1(Angstrom[8], _ap_);
   }
   function discard_all_to_dash_boundary(boundary){
    var
     dash_boundary = make_dash_boundary(boundary),
     expected_len = caml_ml_string_length(dash_boundary);
    function _ae_(ba, off, len){
     var raw = caml_call3(Bigstringaf[7], ba, off, len);
     return caml_call2(Stdlib_String[9], raw, dash_boundary);
    }
    var check_boundary = caml_call2(Angstrom[72][5], expected_len, _ae_);
    function _af_(m){
     function _ag_(param){
      if(! param) return caml_call1(Angstrom[51], 0);
      if(45 === param[1]){
       var
        _am_ =
          function(param){
           if(param) return caml_call1(Angstrom[51], 0);
           var _ao_ = caml_call1(Angstrom[22], 1);
           return caml_call2(Angstrom[58], _ao_, m);
          };
       return caml_call2(Angstrom[53], check_boundary, _am_);
      }
      var _an_ = caml_call1(Angstrom[22], 1);
      return caml_call2(Angstrom[58], _an_, m);
     }
     var _ah_ = Angstrom[1];
     function _ai_(_al_){return 45 !== _al_ ? 1 : 0;}
     var
      _aj_ = caml_call1(Angstrom[11], _ai_),
      _ak_ = caml_call2(Angstrom[58], _aj_, _ah_);
     return caml_call2(Angstrom[53], _ak_, _ag_);
    }
    return caml_call1(Angstrom[45], _af_);
   }
   function _a_(param){if(9 !== param && 32 !== param) return 0; return 1;}
   var transport_padding = caml_call1(Angstrom[11], _a_);
   function discard_all_to_delimiter(boundary){
    var
     delimiter = make_delimiter(boundary),
     expected_len = caml_ml_string_length(delimiter);
    function _V_(ba, off, len){
     var raw = caml_call3(Bigstringaf[7], ba, off, len);
     return caml_call2(Stdlib_String[9], raw, delimiter);
    }
    var check_delimiter = caml_call2(Angstrom[72][5], expected_len, _V_);
    function _W_(m){
     function _X_(param){
      if(! param) return caml_call1(Angstrom[51], 0);
      if(13 === param[1]){
       var
        _ab_ =
          function(param){
           if(param) return caml_call1(Angstrom[51], 0);
           var _ad_ = caml_call1(Angstrom[22], 1);
           return caml_call2(Angstrom[58], _ad_, m);
          };
       return caml_call2(Angstrom[53], check_delimiter, _ab_);
      }
      var _ac_ = caml_call1(Angstrom[22], 1);
      return caml_call2(Angstrom[58], _ac_, m);
     }
     var _Y_ = Angstrom[1];
     function _Z_(_aa_){return 13 !== _aa_ ? 1 : 0;}
     var
      ___ = caml_call1(Angstrom[11], _Z_),
      _$_ = caml_call2(Angstrom[58], ___, _Y_);
     return caml_call2(Angstrom[53], _$_, _X_);
    }
    return caml_call1(Angstrom[45], _W_);
   }
   var
    nothing_to_do = caml_call2(Fmt[8], Angstrom[52], _b_),
    _c_ = caml_call1(Angstrom[4], 10),
    _d_ = caml_call1(Angstrom[4], 13),
    crlf = caml_call2(Angstrom[58], _d_, _c_);
   function body_part(body){
    function _J_(fields){
     function _K_(body){return [0, fields, body];}
     function _L_(param){
      if(747095785 > param) return caml_call1(Angstrom[51], 0);
      var _T_ = Stdlib_Option[2], _U_ = caml_call1(body, fields);
      return caml_call2(Angstrom[55], _U_, _T_);
     }
     var
      _M_ = Angstrom[50],
      _N_ = caml_call1(Angstrom[51], 481346541),
      _O_ = caml_call1(Angstrom[51], 747095785),
      _P_ = caml_call2(Angstrom[58], crlf, _O_),
      _Q_ = caml_call2(Angstrom[47], _P_, _N_),
      _R_ = caml_call2(Angstrom[59], _Q_, _M_),
      _S_ = caml_call2(Angstrom[53], _R_, _L_);
     return caml_call2(Angstrom[55], _S_, _K_);
    }
    return caml_call2(Angstrom[53], Multipart_form_Header[15][3], _J_);
   }
   function encapsulation(boundary, body){
    var
     _C_ = body_part(body),
     _D_ = Angstrom[50],
     _E_ = make_delimiter(boundary),
     _F_ = caml_call1(Angstrom[8], _E_),
     _G_ = caml_call2(Angstrom[58], _F_, transport_padding),
     _H_ = caml_call2(Angstrom[58], _G_, crlf),
     _I_ = caml_call2(Angstrom[58], _H_, _D_);
    return caml_call2(Angstrom[58], _I_, _C_);
   }
   function preambule(boundary){
    return discard_all_to_dash_boundary(boundary);
   }
   function epilogue(parent){
    if(parent){
     var boundary = parent[1];
     return discard_all_to_delimiter(boundary);
    }
    function _B_(param){return 1;}
    return caml_call1(Angstrom[11], _B_);
   }
   function multipart_body(parent, boundary, body){
    function _e_(x){
     function _p_(r){
      var
       _s_ = caml_call1(Angstrom[51], [0, x, r]),
       _t_ = caml_call1(Angstrom[51], 0),
       _u_ = epilogue(parent),
       _v_ = caml_call2(Angstrom[34], 0, _u_),
       _w_ = close_delimiter(boundary),
       _x_ = caml_call2(Angstrom[58], Angstrom[50], _w_),
       _y_ = caml_call2(Angstrom[58], _x_, transport_padding),
       _z_ = caml_call2(Angstrom[58], _y_, _v_),
       _A_ = caml_call2(Angstrom[47], _z_, _t_);
      return caml_call2(Angstrom[58], _A_, _s_);
     }
     var
      _q_ = encapsulation(boundary, body),
      _r_ = caml_call1(Angstrom[38], _q_);
     return caml_call2(Angstrom[53], _r_, _p_);
    }
    var
     _f_ = body_part(body),
     _g_ = Angstrom[50],
     _h_ = dash_boundary(boundary),
     _i_ = preambule(boundary),
     _j_ = caml_call2(Angstrom[34], 0, _i_),
     _k_ = caml_call2(Angstrom[58], _j_, _h_),
     _l_ = caml_call2(Angstrom[58], _k_, transport_padding),
     _m_ = caml_call2(Angstrom[58], _l_, crlf),
     _n_ = caml_call2(Angstrom[58], _m_, _g_),
     _o_ = caml_call2(Angstrom[58], _n_, _f_);
    return caml_call2(Angstrom[53], _o_, _e_);
   }
   var
    Multipart_form_Rfc2046 =
      [0,
       is_bcharsnospace,
       is_bchars,
       make_dash_boundary,
       dash_boundary,
       make_delimiter,
       make_close_delimiter,
       close_delimiter,
       discard_all_to_dash_boundary,
       transport_padding,
       discard_all_to_delimiter,
       nothing_to_do,
       crlf,
       body_part,
       encapsulation,
       preambule,
       epilogue,
       multipart_body];
   runtime.caml_register_global
    (11, Multipart_form_Rfc2046, "Multipart_form__Rfc2046");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Multipart_form
//# unitInfo: Requires: Angstrom, Base64_rfc2045, Bigstringaf, Fmt, Ke__Rke, Logs, Multipart_form__Content_disposition, Multipart_form__Content_encoding, Multipart_form__Content_type, Multipart_form__Field, Multipart_form__Field_name, Multipart_form__Header, Multipart_form__Rfc2046, Pecu, Prettym, Stdlib, Stdlib__Bigarray, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Hashtbl, Stdlib__List, Stdlib__Option, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "\n",
    cst$4 = "\r\n",
    cst_byte_s = " byte(s).",
    cst_Content_type_MUST_be_discr =
      "Content-type MUST be discrete type to a make a part",
    cst_Decode_a_8_bit_part = "Decode a 8-bit part.",
    cst_Decode_a_base64_part = "Decode a base64 part.",
    cst_Decode_a_quoted_printable_ = "Decode a quoted-printable part.",
    cst_Decode_the_8_bit_final_par = "Decode the 8-bit final part.",
    cst_Decode_the_base64_final_pa = "Decode the base64 final part.",
    cst_Decode_the_quoted_printabl = "Decode the quoted-printable final part.",
    cst_End_of_input = "End of input.",
    cst_Invalid_Content_Transfer_E =
      "Invalid Content-Transfer-Encoding value (",
    cst_Invalid_Content_Transfer_E$0 =
      "Invalid Content-Transfer-Encoding value (%s)",
    cst_Invalid_Content_Type_missi = "Invalid Content-Type, missing boundary",
    cst_Multipart_MUST_have_a_boun = "Multipart MUST have a boundary",
    cst_No_more_payloads = "No more payloads.",
    cst_Partial_state_of_the_multi =
      "Partial state of the multipart/form stream.",
    cst_Remain_multiple_payloads = "Remain multiple payloads",
    cst_boundary$1 = "boundary",
    cst_lib_multipart_form_ml = "lib/multipart_form.ml",
    cst_wrong_padding$3 = "wrong padding",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst$3 = cst$4,
    cst$0 = cst$4,
    cst = cst$5,
    end_of_line = cst$5,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_List = global_data.Stdlib__List,
    Multipart_form_Header = global_data.Multipart_form__Header,
    Multipart_form_Content_type = global_data.Multipart_form__Content_type,
    Fmt = global_data.Fmt,
    Multipart_form_Rfc2046 = global_data.Multipart_form__Rfc2046,
    Stdlib = global_data.Stdlib,
    Prettym = global_data.Prettym,
    Multipart_form_Field_name = global_data.Multipart_form__Field_name,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Ke_Rke = global_data.Ke__Rke,
    Bigstringaf = global_data.Bigstringaf,
    Match_failure = global_data.Match_failure,
    Angstrom = global_data.Angstrom,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Base64_rfc2045 = global_data.Base64_rfc2045,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Char = global_data.Stdlib__Char,
    Pecu = global_data.Pecu,
    Stdlib_String = global_data.Stdlib__String,
    Logs = global_data.Logs,
    Multipart_form_Content_disposi =
      global_data.Multipart_form__Content_disposition,
    Multipart_form_Content_encodin =
      global_data.Multipart_form__Content_encoding,
    src = caml_call2(Logs[7][1], 0, "multipart-form"),
    Log = caml_call1(Logs[18], src),
    _F_ =
      [0,
       [11, cst_Multipart_MUST_have_a_boun, 0],
       cst_Multipart_MUST_have_a_boun],
    cst_boundary$0 = cst_boundary$1,
    _B_ =
      [0,
       [11, cst_Content_type_MUST_be_discr, 0],
       cst_Content_type_MUST_be_discr],
    _C_ = [0, cst_lib_multipart_form_ml, 637, 36],
    _A_ = [1, [0, 3854881, "Invalid input"]],
    _x_ =
      [0,
       [11,
        "Length of the internal queue: ",
        [4, 0, 0, 0, [11, cst_byte_s, 0]]],
       "Length of the internal queue: %d byte(s)."],
    _w_ =
      [0,
       [11,
        "Capacity of the internal queue: ",
        [4, 0, 0, 0, [11, cst_byte_s, 0]]],
       "Capacity of the internal queue: %d byte(s)."],
    _v_ = [0, [11, cst_No_more_payloads, 0], cst_No_more_payloads],
    _u_ =
      [0, [11, "Remain one payload: ", [3, 0, 0]], "Remain one payload: %S"],
    _t_ =
      [0, [11, cst_Remain_multiple_payloads, 0], cst_Remain_multiple_payloads],
    _s_ = [0, [11, cst_End_of_input, 0], cst_End_of_input],
    _r_ =
      [0,
       [11, cst_Partial_state_of_the_multi, 0],
       cst_Partial_state_of_the_multi],
    _y_ = [0, 0],
    _z_ = [0, cst_lib_multipart_form_ml, 538, 31],
    _q_ = [0, 4096],
    _o_ =
      [0,
       [11, cst_Invalid_Content_Type_missi, 0],
       cst_Invalid_Content_Type_missi],
    _p_ =
      [0,
       [11, cst_Invalid_Content_Transfer_E, [2, 0, [12, 41, 0]]],
       cst_Invalid_Content_Transfer_E$0],
    cst_boundary = cst_boundary$1,
    _k_ =
      [0,
       [11, cst_Decode_the_quoted_printabl, 0],
       cst_Decode_the_quoted_printabl],
    _m_ =
      [0,
       [11, cst_Decode_the_base64_final_pa, 0],
       cst_Decode_the_base64_final_pa],
    _l_ =
      [0,
       [11, cst_Decode_the_8_bit_final_par, 0],
       cst_Decode_the_8_bit_final_par],
    _g_ =
      [0,
       [11, cst_Decode_a_quoted_printable_, 0],
       cst_Decode_a_quoted_printable_],
    _i_ = [0, [11, cst_Decode_a_base64_part, 0], cst_Decode_a_base64_part],
    _h_ = [0, [11, cst_Decode_a_8_bit_part, 0], cst_Decode_a_8_bit_part],
    _j_ =
      [0,
       [11, cst_Invalid_Content_Transfer_E, [2, 0, [12, 41, 0]]],
       cst_Invalid_Content_Transfer_E$0],
    _n_ =
      [0,
       [11, cst_Invalid_Content_Transfer_E, [2, 0, [12, 41, 0]]],
       cst_Invalid_Content_Transfer_E$0],
    cst_Found = "Found",
    _f_ = [0, cst_lib_multipart_form_ml, 401, 8],
    _e_ = [0, 128],
    _d_ = [0, cst_lib_multipart_form_ml, 355, 8],
    _c_ = [0, 128],
    _b_ = [0, cst_lib_multipart_form_ml, 195, 20],
    cst_wrong_padding$2 = cst_wrong_padding$3,
    cst_wrong_padding$1 = cst_wrong_padding$3,
    _a_ = [0, cst_lib_multipart_form_ml, 28, 20],
    cst_wrong_padding = cst_wrong_padding$3,
    cst_wrong_padding$0 = cst_wrong_padding$3,
    cst_form_data = "form-data";
   function map(f, param){
    if(0 === param[0]){
     var match = param[1], body = match[2], header = match[1];
     return [0, [0, header, caml_call1(f, body)]];
    }
    var match$0 = param[1], body$0 = match$0[2], header$0 = match$0[1];
    function _b1_(_b3_){return map(f, _b3_);}
    var _b2_ = caml_call1(Stdlib_Option[7], _b1_);
    return [1, [0, header$0, caml_call2(Stdlib_List[20], _b2_, body$0)]];
   }
   function flatten(param){
    if(0 === param[0]){var elt = param[1]; return [0, elt, 0];}
    var
     body = param[1][2],
     _bZ_ = caml_call1(Stdlib_Option[7], flatten),
     _b0_ = caml_call2(Stdlib_List[23], _bZ_, body);
    return caml_call1(Stdlib_List[15], _b0_);
   }
   function iter(f, buf, off, len){
    var _bX_ = len - 1 | 0;
    if(_bX_ >= off){
     var i = off;
     for(;;){
      caml_call1(f, caml_string_get(buf, i));
      var _bY_ = i + 1 | 0;
      if(_bX_ === i) break;
      var i = _bY_;
     }
    }
    return;
   }
   function content_encoding(fields){
    var
     encoding = [0, 737158890],
     Found = [248, cst_Found, runtime.caml_fresh_oo_id(0)];
    try{
     var
      _bU_ =
        function(param){
         if(1 !== param[2]) return 0;
         var v = param[3];
         encoding[1] = v;
         throw caml_maybe_attach_backtrace(Found, 1);
        };
     caml_call2(Stdlib_List[18], _bU_, fields);
     var _bV_ = encoding[1];
     return _bV_;
    }
    catch(_bW_){
     var _bT_ = caml_wrap_exception(_bW_);
     if(_bT_ === Found) return encoding[1];
     throw caml_maybe_attach_backtrace(_bT_, 0);
    }
   }
   function failf(fmt){return caml_call2(Fmt[8], Angstrom[52], fmt);}
   function parser(emitters, content_type){
    var header = [0, [0, Multipart_form_Field_name[17], 0, content_type], 0];
    function body(boundary$1, header){
     var
      _az_ = caml_call1(Multipart_form_Header[12], header),
      match$2 = caml_call1(Multipart_form_Content_type[14], _az_);
     if(typeof match$2 !== "number"){
      var v$1 = match$2[2];
      return caml_call1(failf(_p_), v$1);
     }
     if(-903248805 > match$2){
      var
       content_type = caml_call1(Multipart_form_Header[12], header),
       _ay_ = caml_call1(Multipart_form_Content_type[16], content_type),
       match$1 = caml_call2(Stdlib_List[50], cst_boundary, _ay_);
      if(match$1)
       var boundary$0 = match$1[1][1], match$4 = [0, boundary$0];
      else
       var match$4 = 0;
      if(! match$4) return failf(_o_);
      var
       boundary$2 = match$4[1],
       _aC_ = function(parts){return [1, [0, header, parts]];},
       _aD_ = function(param){var contents = param[2]; return contents;},
       _aE_ = caml_call1(Stdlib_List[20], _aD_),
       _aF_ = caml_call1(Stdlib_Option[2], boundary$2),
       _aG_ = function(_bS_){return body(_aF_, _bS_);},
       _aH_ =
         caml_call3(Multipart_form_Rfc2046[17], boundary$1, boundary$2, _aG_),
       _aI_ = caml_call2(Angstrom[55], _aH_, _aE_);
      return caml_call2(Angstrom[55], _aI_, _aC_);
     }
     var
      match$3 = caml_call1(emitters, header),
      id = match$3[2],
      emitter = match$3[1];
     function _aA_(param){return [0, [0, header, id]];}
     if(boundary$1){
      var
       boundary = boundary$1[1],
       end_of_body = caml_call1(Multipart_form_Rfc2046[5], boundary),
       _ao_ =
         function(param){
          caml_call1(emitter, 0);
          return caml_call1(Angstrom[51], 0);
         },
       match = content_encoding(header);
      if(typeof match === "number")
       if(456100816 === match){
        var _ap_ = function(m){return caml_call3(m, 0, 0, _g_);};
        caml_call1(Log[6], _ap_);
        var
         write_data$1 = function(x){return caml_call1(emitter, [0, x]);},
         write_line =
           function(x){
            return caml_call1
                    (emitter, [0, caml_call2(Stdlib[28], x, end_of_line)]);
           },
         dec$1 = caml_call1(Pecu[2], -328752538),
         expected_len$1 = caml_ml_string_length(end_of_body),
         _al_ =
           function(ba, off, len){
            var raw = caml_call3(Bigstringaf[7], ba, off, len);
            return caml_call2(Stdlib_String[9], raw, end_of_body);
           },
         check_end_of_body$1 =
           caml_call2(Angstrom[72][5], expected_len$1, _al_),
         trailer =
           function(param){
            function finish(param){
             var match = caml_call1(Pecu[3], dec$1);
             if(typeof match === "number"){
              if(1006505782 <= match)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
              return Angstrom[50];
             }
             var _aY_ = match[1];
             if(758940234 === _aY_){
              var data = match[2];
              write_data$1(data);
              return caml_call2(Angstrom[53], Angstrom[50], finish);
             }
             if(848053268 <= _aY_){
              var line = match[2];
              write_line(line);
              return caml_call2(Angstrom[53], Angstrom[50], finish);
             }
             var err = match[2], _aZ_ = caml_call1(Angstrom[52], err);
             return caml_call2(Angstrom[58], Angstrom[50], _aZ_);
            }
            function go(param){
             var match = caml_call1(Pecu[3], dec$1);
             if(typeof match === "number")
              return 1006505782 <= match
                      ? (caml_call4
                         (Pecu[1], dec$1, Stdlib_Bytes[3], 0, 0),
                        caml_call2(Angstrom[53], Angstrom[50], finish))
                      : Angstrom[50];
             var _aW_ = match[1];
             if(758940234 === _aW_){
              var data = match[2];
              write_data$1(data);
              return caml_call2(Angstrom[53], Angstrom[50], go);
             }
             if(848053268 <= _aW_){
              var line = match[2];
              write_line(line);
              return caml_call2(Angstrom[53], Angstrom[50], go);
             }
             var err = match[2], _aX_ = caml_call1(Angstrom[52], err);
             return caml_call2(Angstrom[58], Angstrom[50], _aX_);
            }
            return go(0);
           },
         _am_ =
           function(m){
            function _aJ_(chunk){
             function go(param){
              var match = caml_call1(Pecu[3], dec$1);
              if(typeof match === "number"){
               if(1006505782 > match) return Angstrom[50];
               var
                chunk$0 =
                  caml_create_bytes(caml_ml_string_length(chunk) + 1 | 0);
               caml_call5
                (Stdlib_Bytes[12],
                 chunk,
                 0,
                 chunk$0,
                 0,
                 caml_ml_string_length(chunk));
               var
                _aP_ =
                  function(param){
                   if(param){
                    var
                     chunk =
                       caml_call3
                        (Stdlib_Bytes[7],
                         chunk$0,
                         0,
                         caml_ml_bytes_length(chunk$0) - 1 | 0);
                    caml_call4
                     (Pecu[1], dec$1, chunk, 0, caml_ml_bytes_length(chunk));
                    return caml_call2(Angstrom[53], Angstrom[50], trailer);
                   }
                   caml_bytes_set
                    (chunk$0,
                     caml_ml_bytes_length(chunk$0) - 1 | 0,
                     caml_string_get(end_of_body, 0));
                   caml_call4
                    (Pecu[1], dec$1, chunk$0, 0, caml_ml_bytes_length(chunk$0));
                   var
                    _aT_ = Angstrom[50],
                    _aU_ = caml_call1(Angstrom[22], 1),
                    _aV_ = caml_call2(Angstrom[58], _aU_, _aT_);
                   return caml_call2(Angstrom[58], _aV_, m);
                  },
                _aQ_ =
                  caml_call2(Angstrom[59], check_end_of_body$1, Angstrom[50]);
               return caml_call2(Angstrom[53], _aQ_, _aP_);
              }
              var _aR_ = match[1];
              if(758940234 === _aR_){
               var data = match[2];
               write_data$1(data);
               return caml_call2(Angstrom[53], Angstrom[50], go);
              }
              if(848053268 <= _aR_){
               var line = match[2];
               write_line(line);
               return caml_call2(Angstrom[53], Angstrom[50], go);
              }
              var err = match[2], _aS_ = caml_call1(Angstrom[52], err);
              return caml_call2(Angstrom[58], Angstrom[50], _aS_);
             }
             return go(0);
            }
            var _aK_ = Bigstringaf[7], _aL_ = caml_string_get(end_of_body, 0);
            function _aM_(_aO_){return _aL_ !== _aO_ ? 1 : 0;}
            var _aN_ = caml_call2(Angstrom[72][2], _aM_, _aK_);
            return caml_call2(Angstrom[53], _aN_, _aJ_);
           },
         _aq_ = caml_call1(Angstrom[45], _am_);
       }
       else if(163344816 <= match){
        var _ar_ = function(m){return caml_call3(m, 0, 0, _h_);};
        caml_call1(Log[6], _ar_);
        var
         write_data$0 = function(x){return caml_call1(emitter, [0, x]);},
         expected_len$0 = caml_ml_string_length(end_of_body),
         _ai_ =
           function(ba, off, len){
            var raw = caml_call3(Bigstringaf[7], ba, off, len);
            return caml_call2(Stdlib_String[9], raw, end_of_body);
           },
         check_end_of_body$0 =
           caml_call2(Angstrom[72][5], expected_len$0, _ai_),
         _aj_ =
           function(m){
            function _a0_(len){
             if(0 === len){
              var
               _a1_ =
                 function(param){
                  return param ? m : caml_call1(Angstrom[51], 0);
                 };
              return caml_call2(Angstrom[53], Angstrom[1], _a1_);
             }
             function _a2_(chunk){
              try{
               var
                chr = caml_string_get(end_of_body, 0),
                max = caml_call1(Bigstringaf[6], chunk),
                idx = 0;
               for(;;){
                if(max <= idx)
                 throw caml_maybe_attach_backtrace(Stdlib[8], 1);
                if(runtime.caml_ba_get_1(chunk, idx) === chr) break;
                var idx$0 = idx + 1 | 0, idx = idx$0;
               }
              }
              catch(_be_){
               var _a4_ = caml_wrap_exception(_be_);
               if(_a4_ !== Stdlib[8])
                throw caml_maybe_attach_backtrace(_a4_, 0);
               write_data$0(caml_call1(Bigstringaf[8], chunk));
               var
                _a5_ = Angstrom[50],
                _a6_ = caml_call1(Angstrom[22], len),
                _a7_ = caml_call2(Angstrom[58], _a6_, _a5_);
               return caml_call2(Angstrom[58], _a7_, m);
              }
              var chunk$0 = caml_create_bytes(idx + 1 | 0);
              caml_call5(Bigstringaf[26], chunk, 0, chunk$0, 0, idx + 1 | 0);
              function _a8_(param){
               if(param){
                var
                 chunk =
                   caml_call3
                    (Stdlib_Bytes[8],
                     chunk$0,
                     0,
                     caml_ml_bytes_length(chunk$0) - 1 | 0);
                write_data$0(chunk);
                return Angstrom[50];
               }
               write_data$0(caml_call1(Stdlib_Bytes[44], chunk$0));
               var
                _bb_ = Angstrom[50],
                _bc_ = caml_call1(Angstrom[22], 1),
                _bd_ = caml_call2(Angstrom[58], _bc_, _bb_);
               return caml_call2(Angstrom[58], _bd_, m);
              }
              var
               _a9_ = Angstrom[50],
               _a__ = caml_call1(Angstrom[22], idx),
               _a$_ = caml_call2(Angstrom[58], _a__, check_end_of_body$0),
               _ba_ = caml_call2(Angstrom[59], _a$_, _a9_);
              return caml_call2(Angstrom[53], _ba_, _a8_);
             }
             var _a3_ = caml_call2(Angstrom[72][5], len, Bigstringaf[5]);
             return caml_call2(Angstrom[53], _a3_, _a2_);
            }
            return caml_call2(Angstrom[53], Angstrom[79], _a0_);
           },
         _aq_ = caml_call1(Angstrom[45], _aj_);
       }
       else{
        var _as_ = function(m){return caml_call3(m, 0, 0, _i_);};
        caml_call1(Log[6], _as_);
        var
         write_data = function(x){return caml_call1(emitter, [0, x]);},
         dec = caml_call1(Base64_rfc2045[3], -328752538),
         expected_len = caml_ml_string_length(end_of_body),
         _af_ =
           function(ba, off, len){
            var raw = caml_call3(Bigstringaf[7], ba, off, len);
            return caml_call2(Stdlib_String[9], raw, end_of_body);
           },
         check_end_of_body = caml_call2(Angstrom[72][5], expected_len, _af_),
         _ag_ =
           function(m){
            function _bf_(chunk){
             function go(param){
              var match = caml_call1(Base64_rfc2045[4], dec);
              if(typeof match === "number"){
               if(3455931 === match) return Angstrom[50];
               if(1006505782 <= match){
                var
                 chunk$0 =
                   caml_create_bytes(caml_ml_string_length(chunk) + 1 | 0);
                caml_call5
                 (Stdlib_Bytes[12],
                  chunk,
                  0,
                  chunk$0,
                  0,
                  caml_ml_string_length(chunk));
                var
                 _bl_ =
                   function(param){
                    if(param){
                     var
                      chunk =
                        caml_call3
                         (Stdlib_Bytes[7],
                          chunk$0,
                          0,
                          caml_ml_bytes_length(chunk$0) - 1 | 0);
                     caml_call4
                      (Base64_rfc2045[2],
                       dec,
                       chunk,
                       0,
                       caml_ml_bytes_length(chunk));
                     var
                      finish =
                        function(param){
                         var match = caml_call1(Base64_rfc2045[4], dec);
                         if(typeof match === "number"){
                          if(3455931 === match) return Angstrom[50];
                          if(1006505782 <= match)
                           throw caml_maybe_attach_backtrace
                                  ([0, Assert_failure, _a_], 1);
                          var _bu_ = caml_call1(Angstrom[52], cst_wrong_padding);
                          return caml_call2(Angstrom[58], Angstrom[50], _bu_);
                         }
                         if(659980059 <= match[1]){
                          var err = match[2], _bv_ = caml_call1(Angstrom[52], err);
                          return caml_call2(Angstrom[58], Angstrom[50], _bv_);
                         }
                         var data = match[2];
                         write_data(data);
                         return caml_call2(Angstrom[53], Angstrom[50], finish);
                        },
                      go =
                        function(param){
                         var match = caml_call1(Base64_rfc2045[4], dec);
                         if(typeof match === "number"){
                          if(3455931 === match) return Angstrom[50];
                          if(1006505782 <= match){
                           caml_call4(Base64_rfc2045[2], dec, Stdlib_Bytes[3], 0, 0);
                           return caml_call2(Angstrom[53], Angstrom[50], finish);
                          }
                          var _bs_ = caml_call1(Angstrom[52], cst_wrong_padding$0);
                          return caml_call2(Angstrom[58], Angstrom[50], _bs_);
                         }
                         if(659980059 <= match[1]){
                          var err = match[2], _bt_ = caml_call1(Angstrom[52], err);
                          return caml_call2(Angstrom[58], Angstrom[50], _bt_);
                         }
                         var data = match[2];
                         write_data(data);
                         return caml_call2(Angstrom[53], Angstrom[50], go);
                        },
                      _bo_ = go(0);
                     return caml_call2(Angstrom[58], Angstrom[50], _bo_);
                    }
                    caml_bytes_set
                     (chunk$0,
                      caml_ml_bytes_length(chunk$0) - 1 | 0,
                      caml_string_get(end_of_body, 0));
                    caml_call4
                     (Base64_rfc2045[2],
                      dec,
                      chunk$0,
                      0,
                      caml_ml_bytes_length(chunk$0));
                    var
                     _bp_ = Angstrom[50],
                     _bq_ = caml_call1(Angstrom[22], 1),
                     _br_ = caml_call2(Angstrom[58], _bq_, _bp_);
                    return caml_call2(Angstrom[58], _br_, m);
                   };
                return caml_call2(Angstrom[53], check_end_of_body, _bl_);
               }
               var _bm_ = caml_call1(Angstrom[52], cst_wrong_padding$1);
               return caml_call2(Angstrom[58], Angstrom[50], _bm_);
              }
              if(659980059 <= match[1]){
               var err = match[2], _bn_ = caml_call1(Angstrom[52], err);
               return caml_call2(Angstrom[58], Angstrom[50], _bn_);
              }
              var data = match[2];
              write_data(data);
              return caml_call2(Angstrom[53], Angstrom[50], go);
             }
             return go(0);
            }
            var _bg_ = Bigstringaf[7], _bh_ = caml_string_get(end_of_body, 0);
            function _bi_(_bk_){return _bh_ !== _bk_ ? 1 : 0;}
            var _bj_ = caml_call2(Angstrom[72][2], _bi_, _bg_);
            return caml_call2(Angstrom[53], _bj_, _bf_);
           },
         _aq_ = caml_call1(Angstrom[45], _ag_);
       }
      else
       var v = match[2], _aq_ = caml_call1(failf(_j_), v);
      var _aB_ = caml_call2(Angstrom[53], _aq_, _ao_);
     }
     else{
      var
       write_data$2 = function(data){return caml_call1(emitter, [0, data]);},
       _at_ =
         function(param){
          caml_call1(emitter, 0);
          return caml_call1(Angstrom[51], 0);
         },
       match$0 = content_encoding(header);
      if(typeof match$0 === "number")
       if(456100816 === match$0){
        var _au_ = function(m){return caml_call3(m, 0, 0, _k_);};
        caml_call1(Log[6], _au_);
        var
         dec$2 = caml_call1(Pecu[2], -328752538),
         _an_ =
           function(m){
            var match = caml_call1(Pecu[3], dec$2);
            if(typeof match === "number"){
             if(1006505782 > match) return Angstrom[50];
             var
              _bw_ =
                function(param){
                 if(param){
                  var
                   _bz_ =
                     function(n){
                      var _bA_ = Angstrom[50];
                      function _bB_(ba, off, len){
                       var chunk = caml_create_bytes(len);
                       caml_call5(Bigstringaf[26], ba, off, chunk, 0, len);
                       return caml_call4(Pecu[1], dec$2, chunk, 0, len);
                      }
                      var
                       _bC_ = caml_call2(Angstrom[72][1], n, _bB_),
                       _bD_ = caml_call2(Angstrom[58], _bC_, _bA_);
                      return caml_call2(Angstrom[58], _bD_, m);
                     };
                  return caml_call2(Angstrom[53], Angstrom[79], _bz_);
                 }
                 caml_call4(Pecu[1], dec$2, Stdlib_Bytes[3], 0, 0);
                 return Angstrom[50];
                };
             return caml_call2(Angstrom[53], Angstrom[1], _bw_);
            }
            var _bx_ = match[1];
            if(758940234 === _bx_){
             var data = match[2];
             write_data$2(data);
             return caml_call2(Angstrom[58], Angstrom[50], m);
            }
            if(848053268 <= _bx_){
             var line = match[2];
             caml_call1(emitter, [0, caml_call2(Stdlib[28], line, cst)]);
             return caml_call2(Angstrom[58], Angstrom[50], m);
            }
            var err = match[2], _by_ = caml_call1(Angstrom[52], err);
            return caml_call2(Angstrom[58], Angstrom[50], _by_);
           },
         _av_ = caml_call1(Angstrom[45], _an_);
       }
       else if(163344816 <= match$0){
        var _aw_ = function(m){return caml_call3(m, 0, 0, _l_);};
        caml_call1(Log[6], _aw_);
        var
         _ak_ =
           function(m){
            function _bE_(param){
             if(! param) return Angstrom[50];
             function _bF_(n){
              var _bG_ = Angstrom[50];
              function _bH_(ba, off, len){
               var chunk = caml_create_bytes(len);
               caml_call5(Bigstringaf[26], ba, off, chunk, 0, len);
               return write_data$2(caml_call1(Stdlib_Bytes[44], chunk));
              }
              var
               _bI_ = caml_call2(Angstrom[72][1], n, _bH_),
               _bJ_ = caml_call2(Angstrom[58], _bI_, _bG_);
              return caml_call2(Angstrom[58], _bJ_, m);
             }
             return caml_call2(Angstrom[53], Angstrom[79], _bF_);
            }
            return caml_call2(Angstrom[53], Angstrom[1], _bE_);
           },
         _av_ = caml_call1(Angstrom[45], _ak_);
       }
       else{
        var _ax_ = function(m){return caml_call3(m, 0, 0, _m_);};
        caml_call1(Log[6], _ax_);
        var
         dec$0 = caml_call1(Base64_rfc2045[3], -328752538),
         _ah_ =
           function(m){
            var match = caml_call1(Base64_rfc2045[4], dec$0);
            if(typeof match === "number"){
             if(3455931 === match) return Angstrom[50];
             if(1006505782 <= match){
              var
               _bK_ =
                 function(param){
                  if(param){
                   var
                    _bN_ =
                      function(n){
                       function _bP_(param){
                        return caml_call2(Angstrom[58], Angstrom[50], m);
                       }
                       function _bQ_(ba, off, len){
                        var chunk = caml_create_bytes(len);
                        caml_call5(Bigstringaf[26], ba, off, chunk, 0, len);
                        return caml_call4(Base64_rfc2045[2], dec$0, chunk, 0, len);
                       }
                       var _bR_ = caml_call2(Angstrom[72][1], n, _bQ_);
                       return caml_call2(Angstrom[53], _bR_, _bP_);
                      };
                   return caml_call2(Angstrom[53], Angstrom[79], _bN_);
                  }
                  caml_call4(Base64_rfc2045[2], dec$0, Stdlib_Bytes[3], 0, 0);
                  var _bO_ = caml_call1(Angstrom[51], 0);
                  return caml_call2(Angstrom[58], Angstrom[50], _bO_);
                 };
              return caml_call2(Angstrom[53], Angstrom[1], _bK_);
             }
             var _bL_ = caml_call1(Angstrom[52], cst_wrong_padding$2);
             return caml_call2(Angstrom[58], Angstrom[50], _bL_);
            }
            if(659980059 <= match[1]){
             var err = match[2], _bM_ = caml_call1(Angstrom[52], err);
             return caml_call2(Angstrom[58], Angstrom[50], _bM_);
            }
            var data = match[2];
            write_data$2(data);
            return caml_call2(Angstrom[58], Angstrom[50], m);
           },
         _av_ = caml_call1(Angstrom[45], _ah_);
       }
      else
       var v$0 = match$0[2], _av_ = caml_call1(failf(_n_), v$0);
      var _aB_ = caml_call2(Angstrom[53], _av_, _at_);
     }
     return caml_call2(Angstrom[55], _aB_, _aA_);
    }
    return body(0, header);
   }
   function blit(src, src_off, dst, dst_off, len){
    return caml_call5(Bigstringaf[24], src, src_off, dst, dst_off, len);
   }
   function parse(emitters, content_type){
    var
     parser$0 = parser(emitters, content_type),
     state = [0, caml_call1(Angstrom[77][1], parser$0)],
     ke = caml_call2(Ke_Rke[3], _q_, Stdlib_Bigarray[13]);
    return function(data){
     var match = state[1];
     switch(match[0]){
       case 0:
        var
         match$0 = match[1],
         continue$0 = match$0[2],
         committed = match$0[1];
        caml_call2(Ke_Rke[15][6], ke, committed);
        if(0 === committed) caml_call1(Ke_Rke[14], ke);
        var ___ = function(m){return caml_call3(m, 0, 0, _r_);};
        caml_call1(Log[6], ___);
        if(typeof data === "number"){
         var _$_ = function(m){return caml_call3(m, 0, 0, _s_);};
         caml_call1(Log[6], _$_);
         var match$1 = caml_call1(Ke_Rke[15][4], ke);
         if(match$1){
          var slice = match$1[1];
          if(match$1[2]){
           var _aa_ = function(m){return caml_call3(m, 0, 0, _t_);};
           caml_call1(Log[6], _aa_);
           state[1] =
            caml_call4
             (continue$0, slice, 0, caml_call1(Bigstringaf[6], slice), 1);
          }
          else{
           var
            _ab_ =
              function(m){
               return caml_call4
                       (m, 0, 0, _u_, caml_call1(Bigstringaf[8], slice));
              };
           caml_call1(Log[6], _ab_);
           state[1] =
            caml_call4
             (continue$0, slice, 0, caml_call1(Bigstringaf[6], slice), 0);
          }
         }
         else{
          var _ac_ = function(m){return caml_call3(m, 0, 0, _v_);};
          caml_call1(Log[6], _ac_);
          state[1] = caml_call4(continue$0, Bigstringaf[2], 0, 0, 0);
         }
        }
        else{
         var str = data[2];
         if(runtime.caml_string_notequal(str, "")){
          var
           _ad_ =
             function(m){
              return caml_call4(m, 0, 0, _w_, caml_call1(Ke_Rke[4], ke));
             };
          caml_call1(Log[6], _ad_);
          var
           _ae_ =
             function(m){
              return caml_call4(m, 0, 0, _x_, caml_call1(Ke_Rke[5], ke));
             };
          caml_call1(Log[6], _ae_);
          caml_call6
           (Ke_Rke[15][1],
            ke,
            blit,
            caml_ml_string_length,
            _y_,
            [0, caml_ml_string_length(str)],
            str);
          var match$2 = caml_call1(Ke_Rke[15][4], ke);
          if(! match$2)
           throw caml_maybe_attach_backtrace([0, Match_failure, _z_], 1);
          var slice$0 = match$2[1];
          state[1] =
           caml_call4
            (continue$0, slice$0, 0, caml_call1(Bigstringaf[6], slice$0), 1);
         }
        }
        return 192584839;
       case 1:
        var tree = match[2]; return [0, 759635106, tree];
       default: var msg = match[3]; return [0, 781116926, msg];
     }};
   }
   function of_stream_tbl(stream, content_type){
    var v = [0, -1], tbl = caml_call2(Stdlib_Hashtbl[1], 0, 16);
    function emitters(header){
     v[1]++;
     var idx = v[1], buf = caml_call1(Stdlib_Buffer[1], 256);
     caml_call3(Stdlib_Hashtbl[5], tbl, idx, buf);
     return [0,
             function(param){
              if(! param) return 0;
              var str = param[1];
              return caml_call2(Stdlib_Buffer[16], buf, str);
             },
             idx];
    }
    var parse$0 = parse(emitters, content_type);
    for(;;){
     var match = caml_call1(stream, 0);
     if(match)
      var str = match[1], data = [0, -976970511, str];
     else
      var data = 3456156;
     var match$0 = parse$0(data);
     if(typeof match$0 !== "number"){
      if(781116926 <= match$0[1]) return _A_;
      var m = match$0[2];
      return [0, [0, m, tbl]];
     }
    }
   }
   function of_stream_to_list(stream, content_type){
    var match = of_stream_tbl(stream, content_type);
    if(0 === match[0]){
     var
      match$0 = match[1],
      tbl = match$0[2],
      m = match$0[1],
      _Y_ = 0,
      _Z_ =
        function(k, b, a){
         return [0, [0, k, caml_call1(Stdlib_Buffer[2], b)], a];
        },
      assoc = caml_call3(Stdlib_Hashtbl[14], _Z_, tbl, _Y_);
     return [0, [0, m, assoc]];
    }
    var e = match[1];
    return [1, e];
   }
   function of_stream_to_tree(stream, content_type){
    var match = of_stream_tbl(stream, content_type);
    if(0 === match[0]){
     var
      match$0 = match[1],
      tbl = match$0[2],
      m = match$0[1],
      m$0 =
        map
         (function(k){
           var _X_ = caml_call2(Stdlib_Hashtbl[6], tbl, k);
           return caml_call1(Stdlib_Buffer[2], _X_);
          },
          m);
     return [0, m$0];
    }
    var e = match[1];
    return [1, e];
   }
   function stream_of_string(str){
    var consumed = [0, 0];
    return function(param){
     return consumed[1] ? 0 : (consumed[1] = 1, [0, str]);};
   }
   function of_string_to_list(str, content_type){
    return of_stream_to_list(stream_of_string(str), content_type);
   }
   function of_string_to_tree(str, content_type){
    return of_stream_to_tree(stream_of_string(str), content_type);
   }
   function part(opt, disposition, encoding, stream){
    if(opt)
     var sth = opt[1], header = sth;
    else
     var header = Multipart_form_Header[5];
    if(disposition)
     var
      v = disposition[1],
      header$0 =
        caml_call3
         (Multipart_form_Header[8],
          Multipart_form_Field_name[19],
          [0, 2, v],
          header);
    else
     var header$0 = header;
    if(encoding)
     var
      v$0 = encoding[1],
      header$1 =
        caml_call3
         (Multipart_form_Header[8],
          Multipart_form_Field_name[18],
          [0, 1, v$0],
          header$0);
    else
     var header$1 = header$0;
    var
     content_type = caml_call1(Multipart_form_Header[12], header$1),
     encoding$0 = content_encoding(header$1);
    if(1 - caml_call1(Multipart_form_Content_type[17], content_type))
     caml_call1(Fmt[13], _B_);
    if(typeof encoding$0 !== "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
    if(456100816 === encoding$0){
     var
      chunk = caml_create_bytes(4096),
      encoder = caml_call1(Pecu[7], -328752538),
      queue = caml_call2(Ke_Rke[3], _c_, 8),
      chunk_length = 4096,
      emit =
        function(param){
         caml_call2(Ke_Rke[11], queue, 256);
         var len = 4096 - caml_call1(Pecu[11], encoder) | 0;
         return [0, [0, caml_call1(Stdlib_Bytes[44], chunk), 0, len]];
        },
      go$2 =
        function(counter, param){
         for(;;){
          try{var chr = caml_call1(Ke_Rke[8], queue);}
          catch(_S_){
           var _Q_ = caml_wrap_exception(_S_);
           if(_Q_ !== Ke_Rke[1]) throw caml_maybe_attach_backtrace(_Q_, 0);
           var match = caml_call1(stream, 0);
           if(match){
            var
             match$0 = match[1],
             len$0 = match$0[3],
             off = match$0[2],
             buf = match$0[1];
            iter
             (function(chr){return caml_call2(Ke_Rke[6], queue, chr);},
              buf,
              off,
              len$0);
            continue;
           }
           caml_call2(Ke_Rke[6], queue, 257);
           continue;
          }
          var switcher = chr - 256 | 0;
          if(3 < switcher >>> 0){
           var _R_ = [0, 748194550, caml_call1(Stdlib_Char[1], chr)];
           if(939392865 <= caml_call2(Pecu[8], encoder, _R_)) return emit(0);
          }
          else
           switch(switcher){
             case 0:
              caml_call4(Pecu[10], encoder, chunk, 0, chunk_length);
              if(939392865 <= caml_call2(Pecu[8], encoder, 1006505782))
               return emit(0);
              break;
             case 1:
              caml_call2(Ke_Rke[11], queue, 258);
              if(939392865 <= caml_call2(Pecu[8], encoder, -879233260))
               return emit(0);
              break;
             case 2:
              caml_call2(Ke_Rke[11], queue, 259);
              if(939392865 <= caml_call2(Pecu[8], encoder, 3455931)){
               var len = 4096 - caml_call1(Pecu[11], encoder) | 0;
               return [0, [0, caml_call1(Stdlib_Bytes[44], chunk), 0, len]];
              }
              var _P_ = 0;
              if(counter >= 50) return caml_trampoline_return(go$2, [0, _P_]);
              var counter$0 = counter + 1 | 0;
              return go$2(counter$0, _P_);
             default:
              if(17724 !== caml_call2(Pecu[8], encoder, 1006505782))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
              caml_call2(Ke_Rke[11], queue, 259);
              return 0;
           }
         }
        },
      go = function(param){return caml_trampoline(go$2(0, param));};
     caml_call4(Pecu[10], encoder, chunk, 0, chunk_length);
     var stream$0 = go;
    }
    else if(163344816 <= encoding$0)
     var stream$0 = stream;
    else{
     var
      chunk$0 = caml_create_bytes(4096),
      encoder$0 = caml_call1(Base64_rfc2045[8], -328752538),
      queue$0 = caml_call2(Ke_Rke[3], _e_, 8),
      chunk_length$0 = 4096,
      emit$0 =
        function(param){
         caml_call2(Ke_Rke[11], queue$0, 256);
         var len = 4096 - caml_call1(Base64_rfc2045[12], encoder$0) | 0;
         return [0, [0, caml_call1(Stdlib_Bytes[44], chunk$0), 0, len]];
        },
      go$1 =
        function(counter, param){
         for(;;){
          try{var chr = caml_call1(Ke_Rke[8], queue$0);}
          catch(_W_){
           var _U_ = caml_wrap_exception(_W_);
           if(_U_ !== Ke_Rke[1]) throw caml_maybe_attach_backtrace(_U_, 0);
           var match = caml_call1(stream, 0);
           if(match){
            var
             match$0 = match[1],
             len$0 = match$0[3],
             off = match$0[2],
             buf = match$0[1];
            iter
             (function(chr){return caml_call2(Ke_Rke[6], queue$0, chr);},
              buf,
              off,
              len$0);
            continue;
           }
           caml_call2(Ke_Rke[6], queue$0, 257);
           continue;
          }
          var switcher = chr - 256 | 0;
          if(2 < switcher >>> 0){
           var _V_ = [0, 748194550, caml_call1(Stdlib_Char[1], chr)];
           if(939392865 <= caml_call2(Base64_rfc2045[9], encoder$0, _V_))
            return emit$0(0);
          }
          else
           switch(switcher){
             case 0:
              caml_call4
               (Base64_rfc2045[11], encoder$0, chunk$0, 0, chunk_length$0);
              if
               (939392865
                <= caml_call2(Base64_rfc2045[9], encoder$0, 1006505782))
               return emit$0(0);
              break;
             case 1:
              caml_call2(Ke_Rke[11], queue$0, 258);
              if
               (939392865 <= caml_call2(Base64_rfc2045[9], encoder$0, 3455931)){
               var len = 4096 - caml_call1(Base64_rfc2045[12], encoder$0) | 0;
               return [0, [0, caml_call1(Stdlib_Bytes[44], chunk$0), 0, len]];
              }
              var _T_ = 0;
              if(counter >= 50) return caml_trampoline_return(go$1, [0, _T_]);
              var counter$0 = counter + 1 | 0;
              return go$1(counter$0, _T_);
             default:
              if
               (17724 !== caml_call2(Base64_rfc2045[9], encoder$0, 1006505782))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
              caml_call2(Ke_Rke[11], queue$0, 258);
              return 0;
           }
         }
        },
      go$0 = function(param){return caml_trampoline(go$1(0, param));};
     caml_call4(Base64_rfc2045[11], encoder$0, chunk$0, 0, chunk_length$0);
     var stream$0 = go$0;
    }
    return [0, header$1, stream$0];
   }
   var
    _D_ = Multipart_form_Content_type[12][9],
    _E_ = caml_call1(Multipart_form_Content_type[11][4], cst_form_data),
    multipart_content_default =
      caml_call3(Multipart_form_Content_type[23], -1031569716, _E_, _D_);
   function multipart(rng, g, opt, boundary, parts){
    if(opt)
     var sth = opt[1], header = sth;
    else
     var header = Multipart_form_Header[5];
    if(boundary)
     var boundary$0 = boundary[1], boundary$1 = boundary$0;
    else
     var boundary$1 = caml_call2(rng, g, 8);
    var
     boundary$2 = caml_call1(Multipart_form_Content_type[12][8], boundary$1),
     content_type =
       caml_call2
         (Multipart_form_Header[4], Multipart_form_Field_name[17], header)
        ? caml_call1(Multipart_form_Header[12], header)
        : multipart_content_default,
     content_type$0 =
       caml_call2
        (Multipart_form_Content_type[21],
         content_type,
         [0, cst_boundary$0, boundary$2]),
     header$0 =
       caml_call3
        (Multipart_form_Header[9],
         Multipart_form_Field_name[17],
         [0, 0, content_type$0],
         header);
    return [0, header$0, parts];
   }
   function none(param){return 0;}
   function of_string(x){
    var once = [0, 0];
    function go(param){
     return once[1]
             ? 0
             : (once[1] = 1, [0, [0, x, 0, caml_ml_string_length(x)]]);
    }
    return go;
   }
   function symbol(s0, s1){
    var c = [0, s0];
    function go(param){
     for(;;){
      var match = caml_call1(c[1], 0);
      if(match){var x = match[1]; return [0, x];}
      if(c[1] !== s0) return 0;
      c[1] = s1;
     }
    }
    return go;
   }
   function of_part(param){
    var
     body = param[2],
     header = param[1],
     stream =
       caml_call4(Prettym[35], 0, 0, Multipart_form_Header[16][38], header);
    function content_stream(param){
     var match = caml_call1(stream, 0);
     if(! match) return 0;
     var v = match[1];
     return [0, [0, v, 0, caml_ml_string_length(v)]];
    }
    return symbol(content_stream, symbol(of_string(cst$0), body));
   }
   function to_stream(param){
    var
     parts = param[2],
     header = param[1],
     _I_ = caml_call1(Multipart_form_Header[12], header),
     match = caml_call1(Multipart_form_Content_type[22], _I_);
    if(match)
     var v = match[1], boundary = v;
    else
     var boundary = caml_call1(Fmt[11], _F_);
    var
     _J_ = caml_call1(Multipart_form_Rfc2046[3], boundary),
     beginner = caml_call2(Stdlib[28], _J_, cst$1),
     _K_ = caml_call1(Multipart_form_Rfc2046[5], boundary),
     inner = caml_call2(Stdlib[28], _K_, cst$2),
     _L_ = caml_call1(Multipart_form_Rfc2046[6], boundary),
     closer = caml_call2(Stdlib[28], _L_, cst$3),
     stream$1 = of_string(beginner),
     stream = stream$1,
     param$0 = parts;
    for(;;){
     if(param$0){
      var x = param$0[1];
      if(param$0[2]){
       var
        r = param$0[2],
        _M_ = of_string(inner),
        stream$0 = symbol(stream, symbol(of_part(x), _M_)),
        stream = stream$0,
        param$0 = r;
       continue;
      }
      var
       _N_ = of_string(closer),
       _O_ = symbol(stream, symbol(of_part(x), _N_));
     }
     else
      var _O_ = none;
     return [0, header, _O_];
    }
   }
   var
    _G_ = Multipart_form_Content_type[12],
    _H_ = Multipart_form_Content_type[11],
    Multipart_form =
      [0,
       [0,
        Multipart_form_Field_name[2],
        Multipart_form_Field_name[3],
        Multipart_form_Field_name[4],
        Multipart_form_Field_name[5],
        Multipart_form_Field_name[8],
        Multipart_form_Field_name[9],
        Multipart_form_Field_name[10],
        Multipart_form_Field_name[12],
        Multipart_form_Field_name[17],
        Multipart_form_Field_name[18],
        Multipart_form_Field_name[19],
        Multipart_form_Field_name[11]],
       [0,
        [0, Multipart_form_Content_type[10][11]],
        [0, _H_[2], _H_[6]],
        [0,
         _G_[1],
         _G_[2],
         _G_[3],
         _G_[4],
         _G_[6],
         _G_[7],
         _G_[8],
         _G_[11],
         _G_[9],
         _G_[18],
         _G_[25],
         _G_[26]],
        Multipart_form_Content_type[23],
        Multipart_form_Content_type[25],
        Multipart_form_Content_type[24],
        Multipart_form_Content_type[27],
        Multipart_form_Content_type[29]],
       [0,
        Multipart_form_Content_encodin[2],
        Multipart_form_Content_encodin[9],
        Multipart_form_Content_encodin[13]],
       [0,
        Multipart_form_Content_disposi[9],
        Multipart_form_Content_disposi[6],
        Multipart_form_Content_disposi[7],
        Multipart_form_Content_disposi[8],
        Multipart_form_Content_disposi[5],
        Multipart_form_Content_disposi[2],
        Multipart_form_Content_disposi[15],
        Multipart_form_Content_disposi[17]],
       [0],
       [0,
        Multipart_form_Header[2],
        Multipart_form_Header[4],
        Multipart_form_Header[12],
        Multipart_form_Header[13],
        Multipart_form_Header[14],
        Multipart_form_Header[7],
        Multipart_form_Header[10],
        Multipart_form_Header[1],
        [0, Multipart_form_Header[15][3]]],
       map,
       flatten,
       parse,
       parser,
       of_stream_to_list,
       of_string_to_list,
       of_stream_to_tree,
       of_string_to_tree,
       part,
       multipart,
       to_stream];
   runtime.caml_register_global(71, Multipart_form, "Multipart_form");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
