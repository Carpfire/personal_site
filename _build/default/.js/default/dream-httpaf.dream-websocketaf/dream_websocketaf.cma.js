// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_websocketaf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_websocketaf = [0];
   runtime.caml_register_global(0, Dream_websocketaf, "Dream_websocketaf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Optional_thunk
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Optional_thunk_this_functi =
      "Optional_thunk: this function is not representable as a some value";
   function none(param){return 0;}
   function some(f){
    if(f === none) caml_call1(Stdlib[2], cst_Optional_thunk_this_functi);
    return f;
   }
   function is_none(t){return t === none ? 1 : 0;}
   function is_some(t){return 1 - is_none(t);}
   function call_if_some(t){return caml_call1(t, 0);}
   function unchecked_value(t){return t;}
   var
    Dream_websocketaf_Optional_thu =
      [0, none, some, is_none, is_some, call_if_some, unchecked_value];
   runtime.caml_register_global
    (2, Dream_websocketaf_Optional_thu, "Dream_websocketaf__Optional_thunk");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Websocket
//# unitInfo: Requires: Bigstringaf, Stdlib, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bigstringaf = global_data.Bigstringaf,
    Stdlib = global_data.Stdlib,
    Stdlib_Format = global_data.Stdlib__Format,
    cst_Close_code_of_bigstring_ex =
      "Close_code.of_bigstring_exn: can't read 2 bytes from bigstring",
    cst_Close_code_of_code_exn_val =
      "Close_code.of_code_exn: value can't fit in two bytes",
    cst_Close_code_of_code_exn_val$0 =
      "Close_code.of_code_exn: value in invalid range 0-999",
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    cst_Opcode_of_code_exn_value_c =
      "Opcode.of_code_exn: value can't fit in four bits",
    _a_ =
      [0,
       225667031,
       936573133,
       564146209,
       [0, -912009552, 3],
       [0, -912009552, 4],
       [0, -912009552, 5],
       [0, -912009552, 6],
       [0, -912009552, 7],
       915654071,
       892411538,
       892709912,
       [0, -912009552, 11],
       [0, -912009552, 12],
       [0, -912009552, 13],
       [0, -912009552, 14],
       [0, -912009552, 15]],
    _c_ =
      [0,
       -1037083581,
       -1047972493,
       122638209,
       885248340,
       [0, -912009552, 1004],
       -832751506,
       862413028,
       956323317,
       -718269448,
       60978301,
       -1065495525,
       -732353682,
       [0, -912009552, 1012],
       [0, -912009552, 1013],
       [0, -912009552, 1014],
       1072880723];
   function code(param){
    if(typeof param === "number")
     return 892411538 <= param
             ? 915654071
               <= param
               ? 936573133 <= param ? 1 : 8
               : 892709912 <= param ? 10 : 9
             : 564146209 <= param ? 2 : 0;
    var code = param[2];
    return code;
   }
   var code_table = _a_.slice();
   function unsafe_of_code(code){return code_table[1 + code];}
   function of_code(code){return 15 < code ? 0 : [0, code_table[1 + code]];}
   function of_code_exn(code){
    if(15 < code) caml_call1(Stdlib[2], cst_Opcode_of_code_exn_value_c);
    return code_table[1 + code];
   }
   function pp_hum(fmt, t){
    var _h_ = code(t);
    return caml_call3(Stdlib_Format[137], fmt, _b_, _h_);
   }
   var
    Opcode =
      [0,
       code,
       code_table,
       unsafe_of_code,
       of_code,
       of_code_exn,
       code,
       of_code,
       of_code_exn,
       pp_hum];
   function code$0(param){
    if(typeof param === "number")
     return 60978301 <= param
             ? 862413028
               <= param
               ? 956323317
                 <= param
                 ? 1072880723 <= param ? 1015 : 1007
                 : 885248340 <= param ? 1003 : 1006
               : 122638209 <= param ? 1002 : 1009
             : -1037083581
               <= param
               ? -732353682
                 <= param
                 ? -718269448 <= param ? 1008 : 1011
                 : -832751506 <= param ? 1005 : 1000
               : -1047972493 <= param ? 1001 : 1010;
    var code = param[2];
    return code;
   }
   var code_table$0 = _c_.slice();
   function unsafe_of_code$0(code){return code_table$0[1 + code];}
   function of_code$0(code){
    if(65535 >= code && 1000 <= code)
     return 1016 <= code
             ? [0, [0, -912009552, code]]
             : [0, unsafe_of_code$0(code & 15)];
    return 0;
   }
   function of_code_exn$0(code){
    if(65535 < code) caml_call1(Stdlib[2], cst_Close_code_of_code_exn_val);
    if(code < 1000) caml_call1(Stdlib[2], cst_Close_code_of_code_exn_val$0);
    return 1016 <= code ? [0, -912009552, code] : unsafe_of_code$0(code & 15);
   }
   function of_bigstring(bs, off){
    if(0 > ((caml_call1(Bigstringaf[6], bs) - off | 0) - 2 | 0)) return 0;
    var code_int = caml_call2(Bigstringaf[16], bs, off);
    return of_code$0(code_int);
   }
   function of_bigstring_exn(bs, off){
    if(0 > ((caml_call1(Bigstringaf[6], bs) - off | 0) - 2 | 0))
     return caml_call1(Stdlib[2], cst_Close_code_of_bigstring_ex);
    var code_int = caml_call2(Bigstringaf[16], bs, off);
    return of_code_exn$0(code_int);
   }
   var
    Close_code =
      [0,
       code$0,
       code_table$0,
       unsafe_of_code$0,
       of_code$0,
       of_code_exn$0,
       code$0,
       of_code$0,
       of_code_exn$0,
       of_bigstring,
       of_bigstring_exn];
   function apply_mask(mask, opt, src_off, len, bs){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    if(len)
     var n = len[1], len$0 = n;
    else
     var len$0 = caml_call1(Bigstringaf[6], bs);
    var _f_ = (off + len$0 | 0) - 1 | 0;
    if(_f_ >= off){
     var i = off;
     for(;;){
      var
       j = ((i + src_off | 0) - off | 0) % 4 | 0,
       c = runtime.caml_ba_get_1(bs, i),
       c$0 = c ^ mask >> (8 * (3 - j | 0) | 0) & 255;
      runtime.caml_ba_set_1(bs, i, c$0);
      var _g_ = i + 1 | 0;
      if(_f_ === i) break;
      var i = _g_;
     }
    }
    return 0;
   }
   function apply_mask_bytes(mask, bs, src_off, off, len){
    var _d_ = (off + len | 0) - 1 | 0;
    if(_d_ >= off){
     var i = off;
     for(;;){
      var
       j = ((i + src_off | 0) - off | 0) % 4 | 0,
       c = runtime.caml_bytes_unsafe_get(bs, i),
       c$0 = c ^ mask >> (8 * (3 - j | 0) | 0) & 255;
      runtime.caml_bytes_unsafe_set(bs, i, c$0);
      var _e_ = i + 1 | 0;
      if(_d_ === i) break;
      var i = _e_;
     }
    }
    return 0;
   }
   var
    Frame = [0, apply_mask, apply_mask_bytes],
    Dream_websocketaf_Websocket = [0, Opcode, Close_code, Frame];
   runtime.caml_register_global
    (12, Dream_websocketaf_Websocket, "Dream_websocketaf__Websocket");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Serialize
//# unitInfo: Requires: Dream_websocketaf__Websocket, Faraday
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_websocketaf_Websocket = global_data.Dream_websocketaf__Websocket,
    Faraday = global_data.Faraday;
   function serialize_headers(mask, faraday, is_fin, opcode, payload_length){
    var
     opcode$0 = caml_call1(Dream_websocketaf_Websocket[1][6], opcode),
     is_fin$0 = is_fin ? 128 : 0,
     is_mask = mask ? 128 : 0;
    caml_call2(Faraday[8], faraday, is_fin$0 | opcode$0);
    if(125 < payload_length)
     if(65535 < payload_length){
      caml_call2(Faraday[8], faraday, is_mask | 127);
      caml_call2
       (Faraday[9][4], faraday, runtime.caml_int64_of_int32(payload_length));
     }
     else{
      caml_call2(Faraday[8], faraday, is_mask | 126);
      caml_call2(Faraday[9][1], faraday, payload_length);
     }
    else
     caml_call2(Faraday[8], faraday, is_mask | payload_length);
    if(! mask) return 0;
    var mask$0 = mask[1];
    return caml_call2(Faraday[9][2], faraday, mask$0);
   }
   function serialize_control(mask, faraday, opcode){
    return serialize_headers(mask, faraday, 1, opcode, 0);
   }
   function schedule_serialize
   (mask, faraday, is_fin, opcode, payload, src_off, off, len){
    serialize_headers(mask, faraday, is_fin, opcode, len);
    if(mask){
     var mask$0 = mask[1];
     caml_call5
      (Dream_websocketaf_Websocket[3][1],
       mask$0,
       [0, off],
       src_off,
       [0, len],
       payload);
    }
    return caml_call4(Faraday[11], faraday, [0, off], [0, len], payload);
   }
   function serialize_bytes
   (mask, faraday, is_fin, opcode, payload, src_off, off, len){
    serialize_headers(mask, faraday, is_fin, opcode, len);
    if(mask){
     var mask$0 = mask[1];
     caml_call5
      (Dream_websocketaf_Websocket[3][2], mask$0, payload, src_off, off, len);
    }
    return caml_call4(Faraday[4], faraday, [0, off], [0, len], payload);
   }
   var
    Dream_websocketaf_Serialize =
      [0,
       serialize_headers,
       serialize_control,
       schedule_serialize,
       serialize_bytes];
   runtime.caml_register_global
    (2, Dream_websocketaf_Serialize, "Dream_websocketaf__Serialize");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Wsd
//# unitInfo: Requires: Dream_websocketaf__Optional_thunk, Dream_websocketaf__Serialize, Dream_websocketaf__Websocket, Faraday, Stdlib, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Faraday = global_data.Faraday,
    Dream_websocketaf_Websocket = global_data.Dream_websocketaf__Websocket,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Dream_websocketaf_Serialize = global_data.Dream_websocketaf__Serialize,
    Dream_websocketaf_Optional_thu =
      global_data.Dream_websocketaf__Optional_thunk,
    Stdlib = global_data.Stdlib,
    _b_ = [0, -611285096, 0],
    _a_ = [0, 862413028],
    cst_on_wakeup_on_closed_writer = "on_wakeup on closed writer",
    cst_on_wakeup_only_one_callbac =
      "on_wakeup: only one callback can be registered at a time";
   function default_ready_to_write(param){return 0;}
   function create(error_handler, mode){
    var _e_ = Dream_websocketaf_Optional_thu[1];
    return [0, caml_call1(Faraday[1], 4096), mode, _e_, error_handler, 17724];
   }
   function mask(t){
    var match = t[2];
    if(typeof match === "number") return 0;
    var m = match[2];
    return [0, caml_call1(m, 0)];
   }
   function is_closed(t){return caml_call1(Faraday[20], t[1]);}
   function on_wakeup(t, k){
    return caml_call1(Faraday[20], t[1])
            ? caml_call1(Stdlib[2], cst_on_wakeup_on_closed_writer)
            : caml_call1
               (Dream_websocketaf_Optional_thu[4], t[3])
              ? caml_call1(Stdlib[2], cst_on_wakeup_only_one_callbac)
              : (t[3] = caml_call1(Dream_websocketaf_Optional_thu[2], k), 0);
   }
   function wakeup(t){
    var f = t[3];
    t[3] = Dream_websocketaf_Optional_thu[1];
    return caml_call1(Dream_websocketaf_Optional_thu[5], f);
   }
   function schedule(t, opt, kind, payload, off, len){
    if(opt) var sth = opt[1], is_fin = sth; else var is_fin = 1;
    var mask$0 = mask(t);
    caml_call8
     (Dream_websocketaf_Serialize[3],
      mask$0,
      t[1],
      is_fin,
      kind,
      payload,
      0,
      off,
      len);
    return wakeup(t);
   }
   function send_bytes(t, opt, kind, payload, off, len){
    if(opt) var sth = opt[1], is_fin = sth; else var is_fin = 1;
    var mask$0 = mask(t);
    caml_call8
     (Dream_websocketaf_Serialize[4],
      mask$0,
      t[1],
      is_fin,
      kind,
      payload,
      0,
      off,
      len);
    return wakeup(t);
   }
   function send_ping(application_data, t){
    if(application_data){
     var
      match = application_data[1],
      len = match[3],
      off = match[2],
      buffer = match[1],
      mask$0 = mask(t);
     caml_call8
      (Dream_websocketaf_Serialize[3],
       mask$0,
       t[1],
       1,
       892411538,
       buffer,
       0,
       off,
       len);
    }
    else
     caml_call3(Dream_websocketaf_Serialize[2], 0, t[1], 892411538);
    return wakeup(t);
   }
   function send_pong(application_data, t){
    if(application_data){
     var
      match = application_data[1],
      len = match[3],
      off = match[2],
      buffer = match[1],
      mask$0 = mask(t);
     caml_call8
      (Dream_websocketaf_Serialize[3],
       mask$0,
       t[1],
       1,
       892709912,
       buffer,
       0,
       off,
       len);
    }
    else
     caml_call3(Dream_websocketaf_Serialize[2], 0, t[1], 892709912);
    return wakeup(t);
   }
   function flushed(t, f){return caml_call2(Faraday[16], t[1], f);}
   function close(code, t){
    if(code){
     var
      code$0 = code[1],
      mask$0 = mask(t),
      payload = runtime.caml_create_bytes(2),
      _d_ = caml_call1(Dream_websocketaf_Websocket[2][6], code$0);
     caml_call3(Stdlib_Bytes[76], payload, 0, _d_);
     caml_call8
      (Dream_websocketaf_Serialize[4],
       mask$0,
       t[1],
       1,
       915654071,
       payload,
       0,
       0,
       2);
    }
    caml_call1(Faraday[19], t[1]);
    return wakeup(t);
   }
   function error_code(t){
    var error = t[5];
    return typeof error === "number" ? 0 : [0, error];
   }
   function report_error(t, error){
    if(typeof t[5] !== "number") return close(_a_, t);
    t[5] = error;
    var _c_ = 1 - is_closed(t);
    return _c_ ? caml_call2(t[4], t, error) : _c_;
   }
   function next(t){
    var match = caml_call1(Faraday[23], t[1]);
    if(typeof match === "number") return 73271853 <= match ? 73271853 : _b_;
    var iovecs = match[2];
    return [0, -477700929, iovecs];
   }
   function report_result(t, result){
    if(typeof result === "number") return close(0, t);
    var len = result[2];
    return caml_call2(Faraday[21], t[1], len);
   }
   var
    Dream_websocketaf_Wsd =
      [0,
       default_ready_to_write,
       create,
       mask,
       is_closed,
       on_wakeup,
       wakeup,
       schedule,
       send_bytes,
       send_ping,
       send_pong,
       flushed,
       close,
       error_code,
       report_error,
       next,
       report_result];
   runtime.caml_register_global
    (10, Dream_websocketaf_Wsd, "Dream_websocketaf__Wsd");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Handshake
//# unitInfo: Requires: Base64, Dream_httpaf___Httpaf, Stdlib, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_13 = "13",
    cst_connection$0 = "connection",
    cst_sec_websocket_key$2 = "sec-websocket-key",
    cst_sec_websocket_version$0 = "sec-websocket-version",
    cst_upgrade$1 = "upgrade",
    cst_websocket$0 = "websocket",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Base64 = global_data.Base64,
    Stdlib = global_data.Stdlib,
    _i_ = [0, 0],
    cst_sec_websocket_key$1 = cst_sec_websocket_key$2,
    cst_Sec_Websocket_Accept = "Sec-Websocket-Accept",
    _f_ = [0, "Connection", cst_upgrade$1],
    _g_ = [0, "Upgrade", cst_websocket$0],
    _h_ = [1, "Didn't pass scrutiny"],
    cst_upgrade$0 = cst_upgrade$1,
    cst_sec_websocket_version = cst_sec_websocket_version$0,
    cst_sec_websocket_key$0 = cst_sec_websocket_key$2,
    cst_connection = cst_connection$0,
    cst_upgrade = cst_upgrade$1,
    cst_host = "host",
    cst_websocket = cst_websocket$0,
    _e_ = [0, 1],
    cst_258EAFA5_E914_47DA_95CA_C5 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
    _d_ = [0, 1],
    cst_sec_websocket_key = cst_sec_websocket_key$2,
    _a_ = [0, cst_sec_websocket_version$0, cst_13],
    _b_ = [0, cst_connection$0, cst_upgrade$1],
    _c_ = [0, cst_upgrade$1, cst_websocket$0];
   function create_request(nonce, headers, target){
    var
     nonce$0 = caml_call5(Base64[12], 0, 0, 0, 0, nonce),
     headers$0 =
       caml_call2
        (Dream_httpaf_Httpaf[4][8],
         headers,
         [0,
          _c_,
          [0, _b_, [0, _a_, [0, [0, cst_sec_websocket_key, nonce$0], 0]]]]);
    return caml_call4
            (Dream_httpaf_Httpaf[6][1], 0, [0, headers$0], 3546230, target);
   }
   function sec_websocket_key_proof(sha1, sec_websocket_key){
    var
     concatenation =
       caml_call2
        (Stdlib[28], sec_websocket_key, cst_258EAFA5_E914_47DA_95CA_C5),
     _w_ = caml_call1(sha1, concatenation);
    return caml_call5(Base64[12], _d_, 0, 0, 0, _w_);
   }
   function lower(c){if(65 <= c && 90 >= c) return c + 32 | 0; return c;}
   function equal(x, y){
    var
     len = caml_ml_string_length(x),
     _t_ = len === caml_ml_string_length(y) ? 1 : 0;
    if(_t_){
     var equal_so_far = [0, 1], i = [0, 0];
     for(;;){
      if(equal_so_far[1] && i[1] < len){
       var
        c1 = caml_string_unsafe_get(x, i[1]),
        c2 = caml_string_unsafe_get(y, i[1]),
        _u_ = lower(c2);
       equal_so_far[1] = lower(c1) === _u_ ? 1 : 0;
       i[1]++;
       continue;
      }
      var _v_ = equal_so_far[1];
      break;
     }
    }
    else
     var _v_ = _t_;
    return _v_;
   }
   var CI = [0, lower, equal];
   function passes_scrutiny(request_method, headers){
    try{
     var
      val =
        caml_call2
         (Dream_httpaf_Httpaf[4][14], headers, cst_sec_websocket_version),
      sec_websocket_key =
        caml_call2
         (Dream_httpaf_Httpaf[4][14], headers, cst_sec_websocket_key$0),
      connection =
        caml_call2(Dream_httpaf_Httpaf[4][14], headers, cst_connection),
      upgrade = caml_call2(Dream_httpaf_Httpaf[4][14], headers, cst_upgrade);
     caml_call2(Dream_httpaf_Httpaf[4][14], headers, cst_host);
    }
    catch(_s_){return 0;}
    if
     (typeof request_method === "number"
      &&
       3546230 === request_method
       && ! runtime.caml_string_notequal(val, cst_13)){
     var _k_ = caml_call2(CI[2], upgrade, cst_websocket);
     if(_k_){
      var
       _l_ = caml_call2(Stdlib_String[17], 44, connection),
       _m_ =
         function(v){
          var _r_ = caml_call1(Stdlib_String[24], v);
          return caml_call2(CI[2], _r_, cst_upgrade$0);
         },
       _n_ = caml_call2(Stdlib_List[34], _m_, _l_);
      if(_n_)
       try{
        var
         _p_ =
           16
            ===
             caml_ml_string_length
              (caml_call5(Base64[6], _e_, 0, 0, 0, sec_websocket_key))
            ? 1
            : 0;
        return _p_;
       }
       catch(_q_){var _o_ = 0;}
      else
       var _o_ = _n_;
     }
     else
      var _o_ = _k_;
     return _o_;
    }
    return 0;
   }
   function upgrade_headers(sha1, request_method, headers){
    if(! passes_scrutiny(request_method, headers)) return _h_;
    var
     sec_websocket_key =
       caml_call2
        (Dream_httpaf_Httpaf[4][14], headers, cst_sec_websocket_key$1),
     accept = sec_websocket_key_proof(sha1, sec_websocket_key),
     upgrade_headers =
       [0, _g_, [0, _f_, [0, [0, cst_Sec_Websocket_Accept, accept], 0]]];
    return [0, upgrade_headers];
   }
   function respond_with_upgrade(opt, sha1, reqd, upgrade_handler){
    if(opt)
     var sth = opt[1], headers = sth;
    else
     var headers = Dream_httpaf_Httpaf[4][1];
    var
     request = caml_call1(Dream_httpaf_Httpaf[9][1], reqd),
     match = upgrade_headers(sha1, request[1], request[4]);
    if(0 === match[0]){
     var
      upgrade_headers$0 = match[1],
      _j_ = caml_call2(Dream_httpaf_Httpaf[4][8], headers, upgrade_headers$0);
     caml_call3(Dream_httpaf_Httpaf[9][8], reqd, _j_, upgrade_handler);
     return _i_;
    }
    var msg = match[1];
    return [1, msg];
   }
   var
    Dream_websocketaf_Handshake =
      [0,
       create_request,
       sec_websocket_key_proof,
       CI,
       passes_scrutiny,
       upgrade_headers,
       respond_with_upgrade];
   runtime.caml_register_global
    (26, Dream_websocketaf_Handshake, "Dream_websocketaf__Handshake");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Client_handshake
//# unitInfo: Requires: Dream_httpaf___Httpaf, Dream_websocketaf__Handshake
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Dream_websocketaf_Handshake = global_data.Dream_websocketaf__Handshake,
    _a_ = [0, 1];
   function create(nonce, headers, error_handler, response_handler, target){
    var
     connection = caml_call2(Dream_httpaf_Httpaf[12][1], 0, 0),
     _b_ = caml_call3(Dream_websocketaf_Handshake[1], nonce, headers, target),
     body =
       caml_call5
        (Dream_httpaf_Httpaf[12][2],
         connection,
         _a_,
         _b_,
         error_handler,
         response_handler);
    return [0, connection, body];
   }
   function next_read_operation(t){
    return caml_call1(Dream_httpaf_Httpaf[12][3], t[1]);
   }
   function next_write_operation(t){
    return caml_call1(Dream_httpaf_Httpaf[12][6], t[1]);
   }
   function read(t){return caml_call1(Dream_httpaf_Httpaf[12][4], t[1]);}
   function yield_reader(t){
    return caml_call1(Dream_httpaf_Httpaf[12][8], t[1]);
   }
   function report_write_result(t){
    return caml_call1(Dream_httpaf_Httpaf[12][7], t[1]);
   }
   function yield_writer(t){
    return caml_call1(Dream_httpaf_Httpaf[12][9], t[1]);
   }
   function report_exn(t, exn){
    return caml_call2(Dream_httpaf_Httpaf[12][10], t[1], exn);
   }
   function is_closed(t){
    return caml_call1(Dream_httpaf_Httpaf[12][11], t[1]);
   }
   function close(t){
    caml_call1(Dream_httpaf_Httpaf[5][2][6], t[2]);
    return caml_call1(Dream_httpaf_Httpaf[12][12], t[1]);
   }
   var
    Dream_websocketaf_Client_hands =
      [0,
       create,
       next_read_operation,
       next_write_operation,
       read,
       yield_reader,
       report_write_result,
       yield_writer,
       report_exn,
       is_closed,
       close];
   runtime.caml_register_global
    (3, Dream_websocketaf_Client_hands, "Dream_websocketaf__Client_handshake");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Payload
//# unitInfo: Requires: Bigstringaf, Faraday, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Faraday = global_data.Faraday,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Bigstringaf = global_data.Bigstringaf,
    _a_ = [0, "src/vendor/websocketaf/lib/payload.ml", 80, 26],
    cst_Payload_schedule_read_read =
      "Payload.schedule_read: reader already scheduled";
   function default_on_eof(param){return 0;}
   function default_on_read(param, _f_, _e_){return 0;}
   function of_faraday(faraday){
    return [0, faraday, 0, default_on_eof, default_on_read];
   }
   function create(buffer){return of_faraday(caml_call1(Faraday[2], buffer));}
   function create_empty(param){
    var t = create(Bigstringaf[2]);
    caml_call1(Faraday[19], t[1]);
    return t;
   }
   var empty = create_empty(0);
   function is_closed(t){return caml_call1(Faraday[20], t[1]);}
   function unsafe_faraday(t){return t[1];}
   function do_execute_read$0(counter, t, on_eof, on_read){
    var match = caml_call1(Faraday[23], t[1]);
    if(typeof match === "number")
     return 73271853 <= match
             ? 0
             : (t
                [2]
               = 0,
               t[3] = default_on_eof,
               t[4] = default_on_read,
               caml_call1(on_eof, 0));
    var match$0 = match[2];
    if(! match$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var iovec = match$0[1];
    t[2] = 0;
    t[3] = default_on_eof;
    t[4] = default_on_read;
    var len = iovec[3], off = iovec[2], buffer = iovec[1];
    caml_call2(Faraday[21], t[1], len);
    caml_call3(on_read, buffer, off, len);
    if(counter >= 50) return caml_trampoline_return(execute_read$0, [0, t]);
    var counter$0 = counter + 1 | 0;
    return execute_read$0(counter$0, t);
   }
   function execute_read$0(counter, t){
    var _b_ = t[2];
    if(! _b_) return _b_;
    var _c_ = t[4], _d_ = t[3];
    if(counter >= 50)
     return caml_trampoline_return(do_execute_read$0, [0, t, _d_, _c_]);
    var counter$0 = counter + 1 | 0;
    return do_execute_read$0(counter$0, t, _d_, _c_);
   }
   function do_execute_read(t, on_eof, on_read){
    return caml_trampoline(do_execute_read$0(0, t, on_eof, on_read));
   }
   function execute_read(t){return caml_trampoline(execute_read$0(0, t));}
   function schedule_read(t, on_eof, on_read){
    if(t[2]) caml_call1(Stdlib[2], cst_Payload_schedule_read_read);
    if(1 - is_closed(t)){t[2] = 1; t[3] = on_eof; t[4] = on_read;}
    return do_execute_read(t, on_eof, on_read);
   }
   function is_read_scheduled(t){return t[2];}
   function close(t){caml_call1(Faraday[19], t[1]); return execute_read(t);}
   var
    Dream_websocketaf_Payload =
      [0,
       default_on_eof,
       default_on_read,
       of_faraday,
       create,
       create_empty,
       empty,
       is_closed,
       unsafe_faraday,
       do_execute_read,
       execute_read,
       schedule_read,
       is_read_scheduled,
       close];
   runtime.caml_register_global
    (6, Dream_websocketaf_Payload, "Dream_websocketaf__Payload");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Parse
//# unitInfo: Requires: Angstrom, Bigstringaf, Dream_websocketaf__Payload, Dream_websocketaf__Websocket, Faraday, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Angstrom = global_data.Angstrom,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Bigstringaf = global_data.Bigstringaf,
    Dream_websocketaf_Payload = global_data.Dream_websocketaf__Payload,
    Faraday = global_data.Faraday,
    Dream_websocketaf_Websocket = global_data.Dream_websocketaf__Websocket,
    cst_websocketaf_Reader_unable_ =
      "websocketaf.Reader.unable to start parser",
    _d_ = [0, "src/vendor/websocketaf/lib/parse.ml", 191, 13],
    cst_missing_payload_bytes = "missing payload bytes",
    cst_Frame_mask_exn_no_mask_pre = "Frame.mask_exn: no mask present";
   function is_fin(t){
    var bits = caml_ba_get_1(t[1], 0);
    return (bits & 128) === 128 ? 1 : 0;
   }
   function rsv(t){
    var bits = caml_ba_get_1(t[1], 0);
    return (bits >>> 4 | 0) & 7;
   }
   function opcode(t){
    var bits = caml_ba_get_1(t[1], 0);
    return caml_call1(Dream_websocketaf_Websocket[1][3], bits & 15);
   }
   function payload_length_of_headers(headers){
    var bits = caml_ba_get_1(headers, 1), length = bits & 127;
    return 126 === length
            ? caml_call2(Bigstringaf[31], headers, 2)
            : 127
              === length
              ? runtime.caml_int64_to_int32
                (caml_call2(Bigstringaf[41], headers, 2))
              : length;
   }
   function payload_length(t){return payload_length_of_headers(t[1]);}
   function has_mask(t){
    var bits = caml_ba_get_1(t[1], 1);
    return (bits & 128) === 128 ? 1 : 0;
   }
   function mask(t){
    if(! has_mask(t)) return 0;
    var
     bits = caml_ba_get_1(t[1], 1),
     _w_ =
       254 === bits
        ? caml_call2(Bigstringaf[37], t[1], 4)
        : 255
          === bits
          ? caml_call2(Bigstringaf[37], t[1], 10)
          : caml_call2(Bigstringaf[37], t[1], 2);
    return [0, _w_];
   }
   function mask_exn(t){
    var bits = caml_ba_get_1(t[1], 1);
    return 254 === bits
            ? caml_call2(Bigstringaf[37], t[1], 4)
            : 255
              === bits
              ? caml_call2(Bigstringaf[37], t[1], 10)
              : 127
                <= bits
                ? caml_call2(Bigstringaf[37], t[1], 2)
                : caml_call1(Stdlib[2], cst_Frame_mask_exn_no_mask_pre);
   }
   function length(t){
    var payload_length$0 = payload_length(t);
    return caml_call1(Bigstringaf[6], t[1]) + payload_length$0 | 0;
   }
   function payload_offset_of_bits(bits){
    var
     mask_offset = (bits & 128) >>> 5 | 0,
     length = bits & 127,
     length_offset = 126 <= length ? 2 << ((length & 1) << 2) : 0;
    return (2 + mask_offset | 0) + length_offset | 0;
   }
   function payload_offset(opt, bs){
    if(opt) var sth = opt[1], off = sth; else var off = 0;
    var bits = caml_ba_get_1(bs, off + 1 | 0);
    return payload_offset_of_bits(bits);
   }
   function _a_(headers_len){
    return caml_call2(Angstrom[72][1], headers_len, Bigstringaf[5]);
   }
   function _b_(bs, off, param){return payload_offset([0, off], bs);}
   var
    _c_ = caml_call2(Angstrom[72][5], 2, _b_),
    parse_headers = caml_call2(Angstrom[53], _c_, _a_);
   function payload_parser(t){
    function read_exact(src_off, n){
     if(0 === n) return caml_call1(Angstrom[51], 0);
     function _n_(param){
      if(param){
       var _o_ = caml_call1(Angstrom[52], cst_missing_payload_bytes);
       return caml_call2(Angstrom[58], Angstrom[50], _o_);
      }
      function _p_(m){
       var m$0 = caml_call2(Stdlib[16], m, n), n$0 = n - m$0 | 0;
       function _v_(param){return read_exact(src_off + m$0 | 0, n$0);}
       var payload = t[2], _q_ = Angstrom[50];
       if(caml_call1(Dream_websocketaf_Payload[7], payload))
        var _r_ = caml_call1(Angstrom[22], m$0);
       else
        var
         _t_ =
           function(bs){
            var
             faraday = caml_call1(Dream_websocketaf_Payload[8], payload),
             match = mask(t);
            if(match){
             var mask$0 = match[1];
             caml_call5
              (Dream_websocketaf_Websocket[3][1], mask$0, 0, src_off, 0, bs);
            }
            return caml_call4(Faraday[11], faraday, 0, 0, bs);
           },
         _u_ = caml_call1(Angstrom[17], m$0),
         _r_ = caml_call2(Angstrom[55], _u_, _t_);
       var _s_ = caml_call2(Angstrom[58], _r_, _q_);
       return caml_call2(Angstrom[53], _s_, _v_);
      }
      return caml_call2(Angstrom[53], Angstrom[79], _p_);
     }
     return caml_call2(Angstrom[53], Angstrom[24], _n_);
    }
    function _m_(param){
     var payload = t[2];
     caml_call1(Dream_websocketaf_Payload[13], payload);
     return Angstrom[50];
    }
    var n = payload_length(t), _l_ = read_exact(0, n);
    return caml_call2(Angstrom[53], _l_, _m_);
   }
   function frame(buf){
    function _k_(headers){
     var
      len = payload_length_of_headers(headers),
      payload =
        0 === len
         ? Dream_websocketaf_Payload[6]
         : caml_call1(Dream_websocketaf_Payload[4], buf);
     return [0, headers, payload];
    }
    return caml_call2(Angstrom[55], parse_headers, _k_);
   }
   function create(frame_handler){
    var buf = caml_call1(Bigstringaf[1], 4096);
    function _f_(frame){
     var
      payload = frame[2],
      is_fin$0 = is_fin(frame),
      opcode$0 = opcode(frame),
      len = payload_length(frame);
     caml_call4(frame_handler, opcode$0, is_fin$0, len, payload);
     return payload_parser(frame);
    }
    var
     _g_ = Angstrom[50],
     _h_ = frame(buf),
     _i_ = caml_call2(Angstrom[59], _h_, _g_),
     _j_ = caml_call2(Angstrom[53], _i_, _f_),
     parser = caml_call1(Angstrom[43], _j_);
    return [0, parser, 0, 0];
   }
   function transition(t, state){
    switch(state[0]){
      case 0:
       var match = state[1], continue$0 = match[2], committed = match[1];
       t[2] = [1, continue$0];
       return committed;
      case 1:
       var consumed = state[1]; break;
      default:
       var consumed$0 = state[1];
       if(0 !== consumed$0){
        var msg = state[3], marks = state[2];
        t[2] = [0, [0, -796721133, [0, marks, msg]]];
        return consumed$0;
       }
       var consumed = consumed$0;
    }
    t[2] = 0;
    return consumed;
   }
   function start(t, state){
    switch(state[0]){
      case 0:
       var _e_ = state[1];
       if(0 === _e_[1]){
        var continue$0 = _e_[2];
        t[2] = [1, continue$0];
        return 0;
       }
       break;
      case 1:
       return caml_call1(Stdlib[2], cst_websocketaf_Reader_unable_);
      default:
       if(0 === state[1]){
        var msg = state[3], marks = state[2];
        t[2] = [0, [0, -796721133, [0, marks, msg]]];
        return 0;
       }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
   }
   function read_with_more(t, bs, off, len, more){
    var match = t[2];
    if(typeof match === "number"){
     start(t, caml_call1(Angstrom[77][1], t[1]));
     var consumed = read_with_more(t, bs, off, len, more);
    }
    else if(0 === match[0])
     var consumed = 0;
    else
     var
      continue$0 = match[1],
      consumed = transition(t, caml_call4(continue$0, bs, off, len, more));
    if(! more) t[3] = 1;
    return consumed;
   }
   function next(t){
    var match = t[2];
    if(typeof match === "number") return t[3] ? -611285096 : 914388854;
    if(0 !== match[0]) return 914388854;
    var failure = match[1];
    return [0, 106380200, failure];
   }
   var
    Reader = [0, create, transition, start, read_with_more, next],
    Dream_websocketaf_Parse =
      [0,
       is_fin,
       rsv,
       opcode,
       payload_length_of_headers,
       payload_length,
       has_mask,
       mask,
       mask_exn,
       length,
       payload_offset_of_bits,
       payload_offset,
       parse_headers,
       payload_parser,
       frame,
       Reader];
   runtime.caml_register_global
    (11, Dream_websocketaf_Parse, "Dream_websocketaf__Parse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Websocket_connection
//# unitInfo: Requires: Dream_websocketaf__Parse, Dream_websocketaf__Wsd, Stdlib, Stdlib__Bytes, Stdlib__Int32, Stdlib__Printexc, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_websocketaf_Wsd = global_data.Dream_websocketaf__Wsd,
    Dream_websocketaf_Parse = global_data.Dream_websocketaf__Parse,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Random = global_data.Stdlib__Random;
   function random_int32(param){
    return caml_call1(Stdlib_Random[7], Stdlib_Int32[9]);
   }
   function default_error_handler(wsd, param){
    var
     exn = param[2],
     message = caml_call1(Stdlib_Printexc[1], exn),
     payload = caml_call1(Stdlib_Bytes[5], message);
    caml_call6
     (Dream_websocketaf_Wsd[8],
      wsd,
      0,
      936573133,
      payload,
      0,
      runtime.caml_ml_bytes_length(payload));
    return caml_call2(Dream_websocketaf_Wsd[12], 0, wsd);
   }
   function create(mode, opt, websocket_handler){
    if(opt)
     var sth = opt[1], error_handler = sth;
    else
     var error_handler = default_error_handler;
    var
     wsd = caml_call2(Dream_websocketaf_Wsd[2], error_handler, mode),
     match = caml_call1(websocket_handler, wsd),
     eof = match[2],
     frame = match[1];
    return [0, caml_call1(Dream_websocketaf_Parse[15][1], frame), wsd, eof];
   }
   function shutdown(param){
    var wsd = param[2];
    return caml_call2(Dream_websocketaf_Wsd[12], 0, wsd);
   }
   function set_error_and_handle(t, error){
    caml_call2(Dream_websocketaf_Wsd[14], t[2], error);
    return shutdown(t);
   }
   function next_read_operation(t){
    var operation = caml_call1(Dream_websocketaf_Parse[15][5], t[1]);
    if(typeof operation === "number") return operation;
    var message = operation[2][2][2];
    set_error_and_handle(t, [0, 3458171, [0, Stdlib[7], message]]);
    return -611285096;
   }
   function next_write_operation(t){
    return caml_call1(Dream_websocketaf_Wsd[15], t[2]);
   }
   function read(t, bs, off, len){
    return caml_call5(Dream_websocketaf_Parse[15][4], t[1], bs, off, len, 1);
   }
   function read_eof(t, bs, off, len){
    var r = caml_call5(Dream_websocketaf_Parse[15][4], t[1], bs, off, len, 0);
    caml_call1(t[3], 0);
    return r;
   }
   function report_write_result(t, result){
    return caml_call2(Dream_websocketaf_Wsd[16], t[2], result);
   }
   function yield_writer(t, k){
    return caml_call1(Dream_websocketaf_Wsd[4], t[2])
            ? (caml_call2
               (Dream_websocketaf_Wsd[12], 0, t[2]),
              caml_call1(k, 0))
            : caml_call2(Dream_websocketaf_Wsd[5], t[2], k);
   }
   function is_closed(param){
    var wsd = param[2];
    return caml_call1(Dream_websocketaf_Wsd[4], wsd);
   }
   function report_exn(t, exn){
    return set_error_and_handle(t, [0, 3458171, exn]);
   }
   function yield_reader(t, f){return 0;}
   var
    Dream_websocketaf_Websocket_co =
      [0,
       random_int32,
       default_error_handler,
       create,
       shutdown,
       set_error_and_handle,
       next_read_operation,
       next_write_operation,
       read,
       read_eof,
       report_write_result,
       yield_writer,
       is_closed,
       report_exn,
       yield_reader];
   runtime.caml_register_global
    (7,
     Dream_websocketaf_Websocket_co,
     "Dream_websocketaf__Websocket_connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Client_connection
//# unitInfo: Requires: Base64, CamlinternalLazy, Dream_httpaf___Httpaf, Dream_websocketaf__Client_handshake, Dream_websocketaf__Handshake, Dream_websocketaf__Websocket_connection, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_vendor_websocketaf_lib =
      "src/vendor/websocketaf/lib/client_connection.ml",
    cst_upgrade$1 = "upgrade",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_websocketaf_Client_hands =
      global_data.Dream_websocketaf__Client_handshake,
    Dream_websocketaf_Websocket_co =
      global_data.Dream_websocketaf__Websocket_connection,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base64 = global_data.Base64,
    Dream_websocketaf_Handshake = global_data.Dream_websocketaf__Handshake,
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    _c_ = [0, cst_src_vendor_websocketaf_lib, 157, 28],
    _b_ = [0, cst_src_vendor_websocketaf_lib, 124, 8],
    _a_ = [0, cst_src_vendor_websocketaf_lib, 72, 19],
    cst_upgrade$0 = cst_upgrade$1,
    cst_sec_websocket_accept = "sec-websocket-accept",
    cst_connection = "connection",
    cst_upgrade = cst_upgrade$1,
    cst_websocket = "websocket";
   function passes_scrutiny(status, accept, headers){
    try{
     var
      sec_websocket_accept =
        caml_call2
         (Dream_httpaf_Httpaf[4][14], headers, cst_sec_websocket_accept),
      connection =
        caml_call2(Dream_httpaf_Httpaf[4][14], headers, cst_connection),
      upgrade = caml_call2(Dream_httpaf_Httpaf[4][14], headers, cst_upgrade);
    }
    catch(_o_){return 0;}
    if(typeof status === "number" && -1021676630 === status){
     var
      _i_ =
        caml_call2(Dream_websocketaf_Handshake[3][2], upgrade, cst_websocket);
     if(_i_){
      var
       _j_ = caml_call2(Stdlib_String[17], 44, connection),
       _k_ =
         function(v){
          var _n_ = caml_call1(Stdlib_String[24], v);
          return caml_call2
                  (Dream_websocketaf_Handshake[3][2], _n_, cst_upgrade$0);
         },
       _l_ = caml_call2(Stdlib_List[34], _k_, _j_);
      if(_l_)
       return caml_call2(Stdlib_String[9], sec_websocket_accept, accept);
      var _m_ = _l_;
     }
     else
      var _m_ = _i_;
     return _m_;
    }
    return 0;
   }
   function handshake_exn(t){
    var match = t[1];
    if(0 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var handshake = match[1];
    return handshake;
   }
   function connect
   (nonce, opt, sha1, error_handler, websocket_handler, target){
    if(opt)
     var sth = opt[1], headers = sth;
    else
     var headers = Dream_httpaf_Httpaf[4][1];
    var
     response_handler = function _h_(_f_, _g_){return _h_.fun(_f_, _g_);},
     t = [];
    caml_update_dummy
     (response_handler,
      function(response, response_body){
       var headers = response[4], status = response[2], _e_ = caml_obj_tag(t);
       a:
       if(250 === _e_)
        var t$0 = t[1];
       else{
        if(246 !== _e_ && 244 !== _e_){var t$0 = t; break a;}
        var t$0 = caml_call1(CamlinternalLazy[2], t);
       }
       var
        nonce$0 = caml_call5(Base64[12], 0, 0, 0, 0, nonce),
        accept = caml_call2(Dream_websocketaf_Handshake[2], sha1, nonce$0);
       if(! passes_scrutiny(status, accept, headers))
        return caml_call1
                (error_handler, [0, 641382818, [0, response, response_body]]);
       caml_call1(Dream_httpaf_Httpaf[5][1][2], response_body);
       var handshake = handshake_exn(t$0);
       t$0[1] =
        [1,
         caml_call3
          (Dream_websocketaf_Websocket_co[3],
           [0, 1055145579, Dream_websocketaf_Websocket_co[1]],
           0,
           websocket_handler)];
       return caml_call1(Dream_websocketaf_Client_hands[10], handshake);
      });
    caml_update_dummy
     (t,
      [246,
       function(param){
        return [0,
                [0,
                 caml_call5
                  (Dream_websocketaf_Client_hands[1],
                   nonce,
                   headers,
                   error_handler,
                   response_handler,
                   target)]];
       }]);
    var _d_ = caml_obj_tag(t);
    if(250 === _d_) return t[1];
    if(246 !== _d_ && 244 !== _d_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function create(error_handler, websocket_handler){
    return [0,
            [1,
             caml_call3
              (Dream_websocketaf_Websocket_co[3],
               [0, 1055145579, Dream_websocketaf_Websocket_co[1]],
               error_handler,
               websocket_handler)]];
   }
   function next_read_operation(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_websocketaf_Client_hands[2], handshake);
    }
    var
     websocket = match[1],
     operation = caml_call1(Dream_websocketaf_Websocket_co[6], websocket);
    if(typeof operation === "number") return operation;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function read(t, bs, off, len){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call4
             (Dream_websocketaf_Client_hands[4], handshake, bs, off, len);
    }
    var websocket = match[1];
    return caml_call4
            (Dream_websocketaf_Websocket_co[8], websocket, bs, off, len);
   }
   function read_eof(t, bs, off, len){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call4
             (Dream_websocketaf_Client_hands[4], handshake, bs, off, len);
    }
    var websocket = match[1];
    return caml_call4
            (Dream_websocketaf_Websocket_co[9], websocket, bs, off, len);
   }
   function next_write_operation(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_websocketaf_Client_hands[3], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[7], websocket);
   }
   function report_write_result(t, result){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call2(Dream_websocketaf_Client_hands[6], handshake, result);
    }
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[10], websocket, result);
   }
   function report_exn(t, exn){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call2(Dream_websocketaf_Client_hands[8], handshake, exn);
    }
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[13], websocket, exn);
   }
   function yield_reader(t, f){
    var match = t[1];
    if(0 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var handshake = match[1];
    return caml_call2(Dream_websocketaf_Client_hands[5], handshake, f);
   }
   function yield_writer(t, f){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call2(Dream_websocketaf_Client_hands[7], handshake, f);
    }
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[11], websocket, f);
   }
   function is_closed(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_websocketaf_Client_hands[9], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[12], websocket);
   }
   function shutdown(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_websocketaf_Client_hands[10], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[4], websocket);
   }
   var
    Dream_websocketaf_Client_conne =
      [0,
       passes_scrutiny,
       handshake_exn,
       connect,
       create,
       next_read_operation,
       read,
       read_eof,
       next_write_operation,
       report_write_result,
       report_exn,
       yield_reader,
       yield_writer,
       is_closed,
       shutdown];
   runtime.caml_register_global
    (17,
     Dream_websocketaf_Client_conne,
     "Dream_websocketaf__Client_connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Server_connection
//# unitInfo: Requires: CamlinternalLazy, Dream_gluten__Gluten, Dream_httpaf___Httpaf, Dream_websocketaf__Handshake, Dream_websocketaf__Websocket_connection, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_vendor_websocketaf_lib =
      "src/vendor/websocketaf/lib/server_connection.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_gluten_Gluten = global_data.Dream_gluten__Gluten,
    Dream_websocketaf_Websocket_co =
      global_data.Dream_websocketaf__Websocket_connection,
    Assert_failure = global_data.Assert_failure,
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Dream_websocketaf_Handshake = global_data.Dream_websocketaf__Handshake,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    CamlinternalLazy = global_data.CamlinternalLazy,
    _c_ = [0, cst_src_vendor_websocketaf_lib, 109, 19],
    _b_ = [0, cst_src_vendor_websocketaf_lib, 84, 4],
    _a_ = [0, [0, "Connection", "close"], 0];
   function is_closed(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_gluten_Gluten[3][9], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[12], websocket);
   }
   function create(sha1, error_handler, websocket_handler){
    var
     upgrade_handler = function _o_(_m_, _n_){return _o_.fun(_m_, _n_);},
     request_handler = function _l_(_k_){return _l_.fun(_k_);},
     t = [];
    caml_update_dummy
     (upgrade_handler,
      function(upgrade, param){
       var _j_ = caml_obj_tag(t);
       a:
       if(250 === _j_)
        var t$0 = t[1];
       else{
        if(246 !== _j_ && 244 !== _j_){var t$0 = t; break a;}
        var t$0 = caml_call1(CamlinternalLazy[2], t);
       }
       var
        ws_connection =
          caml_call3
           (Dream_websocketaf_Websocket_co[3],
            583778019,
            error_handler,
            websocket_handler);
       t$0[1] = [1, ws_connection];
       return caml_call1
               (upgrade,
                caml_call2
                 (Dream_gluten_Gluten[1],
                  [0,
                   Dream_websocketaf_Websocket_co[6],
                   Dream_websocketaf_Websocket_co[8],
                   Dream_websocketaf_Websocket_co[9],
                   Dream_websocketaf_Websocket_co[14],
                   Dream_websocketaf_Websocket_co[7],
                   Dream_websocketaf_Websocket_co[10],
                   Dream_websocketaf_Websocket_co[11],
                   Dream_websocketaf_Websocket_co[13],
                   Dream_websocketaf_Websocket_co[12],
                   Dream_websocketaf_Websocket_co[4]],
                  ws_connection));
      });
    caml_update_dummy
     (request_handler,
      function(param){
       var upgrade = param[2], reqd = param[1];
       function error(msg){
        var
         _i_ = [0, caml_call1(Dream_httpaf_Httpaf[4][2], _a_)],
         response =
           caml_call4(Dream_httpaf_Httpaf[7][1], 0, 0, _i_, -99004555);
        return caml_call3(Dream_httpaf_Httpaf[9][5], reqd, response, msg);
       }
       function _g_(param){
        var
         _h_ = caml_call1(upgrade_handler, upgrade),
         match =
           caml_call4(Dream_websocketaf_Handshake[6], 0, sha1, reqd, _h_);
        if(0 === match[0]) return 0;
        var msg = match[1];
        return error(msg);
       }
       var ret = caml_call2(Dream_httpaf_Httpaf[9][11], reqd, _g_);
       if(0 === ret[0]) return 0;
       var exn = ret[1];
       return error(caml_call1(Stdlib_Printexc[1], exn));
      });
    caml_update_dummy
     (t,
      [246,
       function(param){
        var
         _e_ = caml_call2(Dream_httpaf_Httpaf[11][1], 0, 0),
         _f_ = Dream_httpaf_Httpaf[11];
        return [0,
                [0,
                 caml_call3
                  (Dream_gluten_Gluten[3][13],
                   [0,
                    _f_[2],
                    _f_[3],
                    _f_[4],
                    _f_[5],
                    _f_[6],
                    _f_[7],
                    _f_[8],
                    _f_[9],
                    _f_[10],
                    _f_[12]],
                   _e_,
                   request_handler)],
                websocket_handler];
       }]);
    var _d_ = caml_obj_tag(t);
    if(250 === _d_) return t[1];
    if(246 !== _d_ && 244 !== _d_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function create_websocket(error_handler, websocket_handler){
    return [0,
            [1,
             caml_call3
              (Dream_websocketaf_Websocket_co[3],
               583778019,
               error_handler,
               websocket_handler)],
            websocket_handler];
   }
   function shutdown(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_gluten_Gluten[3][10], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[4], websocket);
   }
   function report_exn(t, exn){
    var match = t[1];
    if(0 === match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[13], websocket, exn);
   }
   function next_read_operation(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_gluten_Gluten[3][1], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[6], websocket);
   }
   function read(t, bs, off, len){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call4(Dream_gluten_Gluten[3][2], handshake, bs, off, len);
    }
    var websocket = match[1];
    return caml_call4
            (Dream_websocketaf_Websocket_co[8], websocket, bs, off, len);
   }
   function read_eof(t, bs, off, len){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call4(Dream_gluten_Gluten[3][3], handshake, bs, off, len);
    }
    var websocket = match[1];
    return caml_call4
            (Dream_websocketaf_Websocket_co[9], websocket, bs, off, len);
   }
   function yield_reader(t, f){
    var match = t[1];
    if(0 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var handshake = match[1];
    return caml_call2(Dream_gluten_Gluten[3][4], handshake, f);
   }
   function next_write_operation(t){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call1(Dream_gluten_Gluten[3][5], handshake);
    }
    var websocket = match[1];
    return caml_call1(Dream_websocketaf_Websocket_co[7], websocket);
   }
   function report_write_result(t, result){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call2(Dream_gluten_Gluten[3][6], handshake, result);
    }
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[10], websocket, result);
   }
   function yield_writer(t, f){
    var match = t[1];
    if(0 === match[0]){
     var handshake = match[1];
     return caml_call2(Dream_gluten_Gluten[3][7], handshake, f);
    }
    var websocket = match[1];
    return caml_call2(Dream_websocketaf_Websocket_co[11], websocket, f);
   }
   var
    Dream_websocketaf_Server_conne =
      [0,
       is_closed,
       create,
       create_websocket,
       shutdown,
       report_exn,
       next_read_operation,
       read,
       read_eof,
       yield_reader,
       next_write_operation,
       report_write_result,
       yield_writer];
   runtime.caml_register_global
    (10,
     Dream_websocketaf_Server_conne,
     "Dream_websocketaf__Server_connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_websocketaf__Websocketaf
//# unitInfo: Requires: Dream_websocketaf__Client_connection, Dream_websocketaf__Handshake, Dream_websocketaf__Payload, Dream_websocketaf__Server_connection, Dream_websocketaf__Websocket, Dream_websocketaf__Websocket_connection, Dream_websocketaf__Wsd
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Dream_websocketaf_Server_conne =
      global_data.Dream_websocketaf__Server_connection,
    Dream_websocketaf_Client_conne =
      global_data.Dream_websocketaf__Client_connection,
    Dream_websocketaf_Handshake = global_data.Dream_websocketaf__Handshake,
    Dream_websocketaf_Wsd = global_data.Dream_websocketaf__Wsd,
    Dream_websocketaf_Websocket = global_data.Dream_websocketaf__Websocket,
    Dream_websocketaf_Payload = global_data.Dream_websocketaf__Payload,
    _a_ = Dream_websocketaf_Websocket[2],
    _b_ = Dream_websocketaf_Websocket[1],
    Dream_websocketaf_Websocketaf =
      [0,
       [0,
        Dream_websocketaf_Payload[7],
        Dream_websocketaf_Payload[11],
        Dream_websocketaf_Payload[13]],
       [0,
        [0, _b_[1], _b_[4], _b_[5], _b_[6], _b_[7], _b_[8], _b_[9]],
        [0, _a_[1], _a_[4], _a_[5], _a_[6], _a_[7], _a_[8], _a_[9], _a_[10]]],
       [0,
        Dream_websocketaf_Wsd[7],
        Dream_websocketaf_Wsd[8],
        Dream_websocketaf_Wsd[9],
        Dream_websocketaf_Wsd[10],
        Dream_websocketaf_Wsd[11],
        Dream_websocketaf_Wsd[12],
        Dream_websocketaf_Wsd[4],
        Dream_websocketaf_Wsd[13]],
       [0,
        Dream_websocketaf_Handshake[1],
        Dream_websocketaf_Handshake[5],
        Dream_websocketaf_Handshake[6]],
       [0],
       [0,
        Dream_websocketaf_Client_conne[3],
        Dream_websocketaf_Client_conne[4],
        Dream_websocketaf_Client_conne[5],
        Dream_websocketaf_Client_conne[8],
        Dream_websocketaf_Client_conne[6],
        Dream_websocketaf_Client_conne[7],
        Dream_websocketaf_Client_conne[11],
        Dream_websocketaf_Client_conne[9],
        Dream_websocketaf_Client_conne[12],
        Dream_websocketaf_Client_conne[10],
        Dream_websocketaf_Client_conne[13],
        Dream_websocketaf_Client_conne[14]],
       [0,
        Dream_websocketaf_Server_conne[2],
        Dream_websocketaf_Server_conne[3],
        Dream_websocketaf_Server_conne[6],
        Dream_websocketaf_Server_conne[10],
        Dream_websocketaf_Server_conne[7],
        Dream_websocketaf_Server_conne[8],
        Dream_websocketaf_Server_conne[11],
        Dream_websocketaf_Server_conne[5],
        Dream_websocketaf_Server_conne[9],
        Dream_websocketaf_Server_conne[12],
        Dream_websocketaf_Server_conne[1],
        Dream_websocketaf_Server_conne[4]]];
   runtime.caml_register_global
    (6, Dream_websocketaf_Websocketaf, "Dream_websocketaf__Websocketaf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
