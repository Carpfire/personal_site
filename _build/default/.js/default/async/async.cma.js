// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Async = [0], Async$0 = [0, Async];
   runtime.caml_register_global(0, Async$0, "Async__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async__Expect_test_config
//# unitInfo: Requires: Async_kernel__Deferred, Async_unix__Thread_safe, Expect_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_Expect_test_config$0 = "Async__Expect_test_config",
    cst_async$0 = "async";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Thread_safe = global_data.Async_unix__Thread_safe,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_Expect_test_config$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/expect_test_config.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async$0, "expect_test_config.ml");
   var
    cst_async = cst_async$0,
    cst_Async_Expect_test_config = cst_Async_Expect_test_config$0;
   function run(f){return caml_call1(Async_unix_Thread_safe[7], f);}
   function sanitize(s){return s;}
   var upon_unreleasable_issue = Expect_test_config[4];
   caml_call1(Ppx_inline_test_lib[7], cst_async);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_Expect_test_config);
   var
    Async_Expect_test_config =
      [0,
       [0, Async_kernel_Deferred[12]],
       run,
       sanitize,
       upon_unreleasable_issue];
   runtime.caml_register_global
    (14, Async_Expect_test_config, cst_Async_Expect_test_config$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async__Expect_test_config_or_error
//# unitInfo: Requires: Async_kernel__Deferred_or_error, Async_unix__Thread_safe, Core__Or_error, Expect_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_Expect_test_config_o$0 = "Async__Expect_test_config_or_error",
    cst_async$0 = "async";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Thread_safe = global_data.Async_unix__Thread_safe,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_Expect_test_config_o$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/expect_test_config_or_error.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async$0, "expect_test_config_or_error.ml");
   var
    cst_async = cst_async$0,
    cst_Async_Expect_test_config_o = cst_Async_Expect_test_config_o$0;
   function run(f){
    var _a_ = caml_call1(Async_unix_Thread_safe[7], f);
    return caml_call1(Core_Or_error[40], _a_);
   }
   function sanitize(s){return s;}
   var upon_unreleasable_issue = Expect_test_config[4];
   caml_call1(Ppx_inline_test_lib[7], cst_async);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_Expect_test_config_o);
   var
    Async_Expect_test_config_or_er =
      [0,
       [0, Async_kernel_Deferred_or_error[13]],
       run,
       sanitize,
       upon_unreleasable_issue];
   runtime.caml_register_global
    (15, Async_Expect_test_config_or_er, cst_Async_Expect_test_config_o$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async__Deferred_or_error_expect_test_config
//# unitInfo: Requires: Async_kernel__Deferred_or_error, Async_unix__Thread_safe, Core__Or_error, Expect_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_Deferred_or_error_ex$0 =
      "Async__Deferred_or_error_expect_test_config",
    cst_async$0 = "async";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Thread_safe = global_data.Async_unix__Thread_safe,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_Deferred_or_error_ex$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "src/deferred_or_error_expect_test_config.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async$0,
     "deferred_or_error_expect_test_config.ml");
   var
    cst_async = cst_async$0,
    cst_Async_Deferred_or_error_ex = cst_Async_Deferred_or_error_ex$0;
   function run(f){
    var _a_ = caml_call1(Async_unix_Thread_safe[7], f);
    return caml_call1(Core_Or_error[40], _a_);
   }
   function sanitize(s){return s;}
   var upon_unreleasable_issue = Expect_test_config[4];
   caml_call1(Ppx_inline_test_lib[7], cst_async);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_Deferred_or_error_ex);
   var
    Async_Deferred_or_error_expect =
      [0,
       [0, Async_kernel_Deferred_or_error[13]],
       run,
       sanitize,
       upon_unreleasable_issue];
   runtime.caml_register_global
    (15, Async_Deferred_or_error_expect, cst_Async_Deferred_or_error_ex$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async
//# unitInfo: Requires: Async_command, Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_log, Async_quickcheck, Async_rpc, Async_unix, Async_unix__Scheduler, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async$0 = "Async",
    cst_async$0 = "async",
    cst_src_async_ml$0 = "src/async.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_unix_Scheduler = global_data.Async_unix__Scheduler,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_unix = global_data.Async_unix,
    Async_log = global_data.Async_log,
    Async_command = global_data.Async_command,
    Async_quickcheck = global_data.Async_quickcheck,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_async_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async$0, "async.ml");
   var
    catch$0 = Async_kernel[3],
    choice = Async_kernel[4],
    choose = Async_kernel[5],
    don_t_wait_for = Async_kernel[6],
    never = Async_kernel[8],
    try_with = Async_kernel[11],
    upon = Async_kernel[12],
    with_timeout_exn = Async_kernel[14],
    symbol = Async_kernel[17],
    symbol$0 = Async_kernel[18],
    symbol$1 = Async_kernel[19],
    return$0 = Async_kernel[20],
    symbol_bind = Async_kernel[21],
    symbol_map = Async_kernel[22],
    Let_syntax = Async_kernel[23],
    Async_kernel_private = Async_kernel[24],
    sexp_of_t = Async_kernel_Deferred[1],
    invariant = Async_kernel_Deferred[2],
    create = Async_kernel_Deferred[3],
    upon$0 = Async_kernel_Deferred[4],
    peek = Async_kernel_Deferred[5],
    value_exn = Async_kernel_Deferred[6],
    is_determined = Async_kernel_Deferred[7],
    symbol_bind$0 = Async_kernel_Deferred[8],
    symbol_map$0 = Async_kernel_Deferred[9],
    Monad_infix = Async_kernel_Deferred[10],
    bind = Async_kernel_Deferred[11],
    return$1 = Async_kernel_Deferred[12],
    map = Async_kernel_Deferred[13],
    join = Async_kernel_Deferred[14],
    ignore_m = Async_kernel_Deferred[15],
    Let_syntax$0 = Async_kernel_Deferred[16],
    Infix = Async_kernel_Deferred[17],
    unit = Async_kernel_Deferred[18],
    never$0 = Async_kernel_Deferred[19],
    both = Async_kernel_Deferred[20],
    all = Async_kernel_Deferred[21],
    all_unit = Async_kernel_Deferred[22],
    any = Async_kernel_Deferred[23],
    any_unit = Async_kernel_Deferred[24],
    don_t_wait_for$0 = Async_kernel_Deferred[25],
    Choice = Async_kernel_Deferred[26],
    choice$0 = Async_kernel_Deferred[27],
    enabled = Async_kernel_Deferred[28],
    choose$0 = Async_kernel_Deferred[29],
    for$0 = Async_kernel_Deferred[30],
    repeat_until_finished = Async_kernel_Deferred[31],
    forever = Async_kernel_Deferred[32],
    ok = Async_kernel_Deferred[33],
    For_tests = Async_kernel_Deferred[34],
    both$0 = Async_kernel_Deferred_or_error[1],
    symbol$2 = Async_kernel_Deferred_or_error[2],
    symbol$3 = Async_kernel_Deferred_or_error[3],
    symbol$4 = Async_kernel_Deferred_or_error[4],
    apply = Async_kernel_Deferred_or_error[5],
    map2 = Async_kernel_Deferred_or_error[6],
    map3 = Async_kernel_Deferred_or_error[7],
    Applicative_infix = Async_kernel_Deferred_or_error[8],
    symbol_bind$1 = Async_kernel_Deferred_or_error[9],
    symbol_map$1 = Async_kernel_Deferred_or_error[10],
    Monad_infix$0 = Async_kernel_Deferred_or_error[11],
    bind$0 = Async_kernel_Deferred_or_error[12],
    return$2 = Async_kernel_Deferred_or_error[13],
    map$0 = Async_kernel_Deferred_or_error[14],
    join$0 = Async_kernel_Deferred_or_error[15],
    ignore_m$0 = Async_kernel_Deferred_or_error[16],
    all$0 = Async_kernel_Deferred_or_error[17],
    all_unit$0 = Async_kernel_Deferred_or_error[18],
    Let_syntax$1 = Async_kernel_Deferred_or_error[19],
    fail = Async_kernel_Deferred_or_error[20],
    ok_exn = Async_kernel_Deferred_or_error[21],
    of_exn = Async_kernel_Deferred_or_error[22],
    of_exn_result = Async_kernel_Deferred_or_error[23],
    error = Async_kernel_Deferred_or_error[24],
    error_s = Async_kernel_Deferred_or_error[25],
    error_string = Async_kernel_Deferred_or_error[26],
    errorf = Async_kernel_Deferred_or_error[27],
    tag = Async_kernel_Deferred_or_error[28],
    tag_s = Async_kernel_Deferred_or_error[29],
    tag_s_lazy = Async_kernel_Deferred_or_error[30],
    tag_arg = Async_kernel_Deferred_or_error[31],
    unimplemented = Async_kernel_Deferred_or_error[32],
    combine_errors = Async_kernel_Deferred_or_error[33],
    combine_errors_unit = Async_kernel_Deferred_or_error[34],
    filter_ok_at_least_one = Async_kernel_Deferred_or_error[35],
    find_map_ok = Async_kernel_Deferred_or_error[36],
    ok_unit = Async_kernel_Deferred_or_error[37],
    try_with$0 = Async_kernel_Deferred_or_error[38],
    try_with_join = Async_kernel_Deferred_or_error[39],
    List = Async_kernel_Deferred_or_error[40],
    repeat_until_finished$0 = Async_kernel_Deferred_or_error[41],
    Or_error =
      [0,
       both$0,
       symbol$2,
       symbol$3,
       symbol$4,
       apply,
       map2,
       map3,
       Applicative_infix,
       symbol_bind$1,
       symbol_map$1,
       Monad_infix$0,
       bind$0,
       return$2,
       map$0,
       join$0,
       ignore_m$0,
       all$0,
       all_unit$0,
       Let_syntax$1,
       fail,
       ok_exn,
       of_exn,
       of_exn_result,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       find_map_ok,
       ok_unit,
       try_with$0,
       try_with_join,
       List,
       repeat_until_finished$0],
    Deferred =
      [0,
       sexp_of_t,
       invariant,
       create,
       upon$0,
       peek,
       value_exn,
       is_determined,
       symbol_bind$0,
       symbol_map$0,
       Monad_infix,
       bind,
       return$1,
       map,
       join,
       ignore_m,
       Let_syntax$0,
       Infix,
       unit,
       never$0,
       both,
       all,
       all_unit,
       any,
       any_unit,
       don_t_wait_for$0,
       Choice,
       choice$0,
       enabled,
       choose$0,
       for$0,
       repeat_until_finished,
       forever,
       ok,
       For_tests,
       Or_error],
    Unix = Async_unix[1],
    after = Async_unix[2],
    at = Async_unix[3],
    every = Async_unix[4],
    with_timeout = Async_unix[5],
    schedule = Async_unix[6],
    schedule$0 = Async_unix[7],
    shutdown = Async_unix[8],
    within = Async_unix[9],
    within$0 = Async_unix[10],
    Printf = Async_unix[11],
    Overwrite = Async_unix[12],
    close_in_noerr = Async_unix[13],
    close_in = Async_unix[14],
    close_out_noerr = Async_unix[15],
    close_out = Async_unix[16],
    eprintf = Async_unix[17],
    flush_all = Async_unix[18],
    flush = Async_unix[19],
    fprintf = Async_unix[20],
    ifprintf = Async_unix[21],
    in_channel_length = Async_unix[22],
    input_binary_int = Async_unix[23],
    input_byte = Async_unix[24],
    input_char = Async_unix[25],
    input_line = Async_unix[26],
    input_lines = Async_unix[27],
    input = Async_unix[28],
    input_value = Async_unix[29],
    open_in_bin = Async_unix[30],
    open_in_gen = Async_unix[31],
    open_in = Async_unix[32],
    open_out_bin = Async_unix[33],
    open_out_gen = Async_unix[34],
    open_out = Async_unix[35],
    out_channel_length = Async_unix[36],
    output_binary_int = Async_unix[37],
    output_byte = Async_unix[38],
    output_char = Async_unix[39],
    output = Async_unix[40],
    output_string = Async_unix[41],
    output_value = Async_unix[42],
    pos_in = Async_unix[43],
    pos_out = Async_unix[44],
    prerr_char = Async_unix[45],
    prerr_endline = Async_unix[46],
    prerr_float = Async_unix[47],
    prerr_int = Async_unix[48],
    prerr_newline = Async_unix[49],
    prerr_string = Async_unix[50],
    print_char = Async_unix[51],
    print_endline = Async_unix[52],
    print_float = Async_unix[53],
    printf = Async_unix[54],
    print_int = Async_unix[55],
    print_newline = Async_unix[56],
    print_s = Async_unix[57],
    print_string = Async_unix[58],
    read_float = Async_unix[59],
    read_int = Async_unix[60],
    read_line = Async_unix[61],
    read_lines = Async_unix[62],
    read_wrap = Async_unix[63],
    really_input = Async_unix[64],
    seek_in = Async_unix[65],
    seek_out = Async_unix[66],
    set_binary_mode_in = Async_unix[67],
    set_binary_mode_out = Async_unix[68],
    write_lines = Async_unix[69],
    write_wrap = Async_unix[70],
    eprint_s = Async_unix[71],
    eprint_s_nonblocking = Async_unix[72],
    LargeFile = Async_unix[73],
    Sexp = Async_unix[74],
    exit = Async_unix[75],
    Async_unix_private = Async_unix[76],
    sexp_of_t$0 = Async_log[1],
    set_level_via_param = Async_log[2],
    set_level = Async_log[3],
    level = Async_log[4],
    set_output = Async_log[5],
    get_output = Async_log[6],
    get_time_source = Async_log[7],
    set_time_source = Async_log[8],
    get_transform = Async_log[9],
    set_transform = Async_log[10],
    get_on_error = Async_log[11],
    set_on_error = Async_log[12],
    close = Async_log[13],
    is_closed = Async_log[14],
    flushed = Async_log[15],
    create$0 = Async_log[16],
    create_null = Async_log[17],
    copy = Async_log[18],
    raw = Async_log[19],
    debug = Async_log[20],
    info = Async_log[21],
    error$0 = Async_log[22],
    printf$0 = Async_log[23],
    raw_s = Async_log[24],
    info_s = Async_log[25],
    error_s$0 = Async_log[26],
    debug_s = Async_log[27],
    sexp = Async_log[28],
    string = Async_log[29],
    structured_message = Async_log[30],
    message = Async_log[31],
    message_event = Async_log[32],
    surround_s = Async_log[33],
    surroundf = Async_log[34],
    would_log = Async_log[35],
    For_testing = Async_log[36],
    Private = Async_log[37],
    Global = Async_log[38],
    Ppx_log_syntax = Async_log[39],
    Log =
      [0,
       sexp_of_t$0,
       set_level_via_param,
       set_level,
       level,
       set_output,
       get_output,
       get_time_source,
       set_time_source,
       get_transform,
       set_transform,
       get_on_error,
       set_on_error,
       close,
       is_closed,
       flushed,
       create$0,
       create_null,
       copy,
       raw,
       debug,
       info,
       error$0,
       printf$0,
       raw_s,
       info_s,
       error_s$0,
       debug_s,
       sexp,
       string,
       structured_message,
       message,
       message_event,
       surround_s,
       surroundf,
       would_log,
       For_testing,
       Private,
       Global,
       Ppx_log_syntax],
    include = Async_log[39],
    Ppx_log_syntax$0 = include[1],
    basic_spec = Async_command[1],
    basic = Async_command[2],
    basic_or_error = Async_command[3],
    group = Async_command[4],
    lazy_group = Async_command[5],
    exec = Async_command[6],
    of_lazy = Async_command[7],
    summary = Async_command[8],
    exit$0 = Async_command[9],
    run = Async_command[10],
    shape = Async_command[11],
    async = Async_command[12],
    async_spec = Async_command[13],
    async_or_error = Async_command[14],
    async_spec_or_error = Async_command[15],
    Staged = Async_command[16],
    For_testing$0 = Async_command[17],
    Command =
      [0,
       basic_spec,
       basic,
       basic_or_error,
       group,
       lazy_group,
       exec,
       of_lazy,
       summary,
       exit$0,
       run,
       shape,
       async,
       async_spec,
       async_or_error,
       async_spec_or_error,
       Staged,
       For_testing$0],
    default_seed = Async_quickcheck[1],
    default_sizes = Async_quickcheck[2],
    default_trial_count = Async_quickcheck[3],
    default_can_generate_trial_cou = Async_quickcheck[4],
    default_shrink_attempts = Async_quickcheck[5],
    random_value = Async_quickcheck[6],
    iter = Async_quickcheck[7],
    test = Async_quickcheck[8],
    test_or_error = Async_quickcheck[9],
    test_can_generate = Async_quickcheck[10],
    test_distinct_values = Async_quickcheck[11],
    random_sequence = Async_quickcheck[12],
    async_test = Async_quickcheck[13],
    async_test_or_error = Async_quickcheck[14],
    Configure = Async_quickcheck[15],
    Quickcheck =
      [0,
       default_seed,
       default_sizes,
       default_trial_count,
       default_can_generate_trial_cou,
       default_shrink_attempts,
       random_value,
       iter,
       test,
       test_or_error,
       test_can_generate,
       test_distinct_values,
       random_sequence,
       async_test,
       async_test_or_error,
       Configure],
    cst_src_async_ml = cst_src_async_ml$0,
    cst_Async_library_initializati =
      "Async library initialization does not initialize the scheduler",
    cst_async = cst_async$0,
    cst_Async = cst_Async$0;
   function _a_(param){return caml_call1(Async_unix_Scheduler[48], 0);}
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_Async_library_initializati,
     0,
     cst_src_async_ml,
     48,
     0,
     113,
     _a_);
   caml_call1(Ppx_inline_test_lib[7], cst_async);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async);
   var
    Async =
      [0,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       never,
       try_with,
       upon,
       with_timeout_exn,
       symbol,
       symbol$0,
       symbol$1,
       return$0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Async_kernel_private,
       Deferred,
       Unix,
       after,
       at,
       every,
       with_timeout,
       schedule,
       schedule$0,
       shutdown,
       within,
       within$0,
       Printf,
       Overwrite,
       close_in_noerr,
       close_in,
       close_out_noerr,
       close_out,
       eprintf,
       flush_all,
       flush,
       fprintf,
       ifprintf,
       in_channel_length,
       input_binary_int,
       input_byte,
       input_char,
       input_line,
       input_lines,
       input,
       input_value,
       open_in_bin,
       open_in_gen,
       open_in,
       open_out_bin,
       open_out_gen,
       open_out,
       out_channel_length,
       output_binary_int,
       output_byte,
       output_char,
       output,
       output_string,
       output_value,
       pos_in,
       pos_out,
       prerr_char,
       prerr_endline,
       prerr_float,
       prerr_int,
       prerr_newline,
       prerr_string,
       print_char,
       print_endline,
       print_float,
       printf,
       print_int,
       print_newline,
       print_s,
       print_string,
       read_float,
       read_int,
       read_line,
       read_lines,
       read_wrap,
       really_input,
       seek_in,
       seek_out,
       set_binary_mode_in,
       set_binary_mode_out,
       write_lines,
       write_wrap,
       eprint_s,
       eprint_s_nonblocking,
       LargeFile,
       Sexp,
       exit,
       Async_unix_private,
       Log,
       Ppx_log_syntax$0,
       Command,
       Quickcheck];
   runtime.caml_register_global(22, Async, cst_Async$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJhc3luYy5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsicnVuIiwiZiIsInNhbml0aXplIiwicyIsInVwb25fdW5yZWxlYXNhYmxlX2lzc3VlIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvYXN5bmMvYXN5bmNfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jL2V4cGVjdF90ZXN0X2NvbmZpZy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jL2V4cGVjdF90ZXN0X2NvbmZpZ19vcl9lcnJvci5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jL2RlZmVycmVkX29yX2Vycm9yX2V4cGVjdF90ZXN0X2NvbmZpZy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jL2FzeW5jLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0dBV2lCLHVDQUFBOzs7RTs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUNOYkEsSUFBSUMsR0FBSSxPQUFBLHNDQUFKQSxHQUFvQztZQUN4Q0MsU0FBU0MsR0FBSSxPQUFKQSxFQUFLO09BQ2RDOzs7Ozs7Ozs7T0FGQUo7T0FDQUU7T0FDQUU7Ozs7RTs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUNEQUosSUFBSUM7SUFBSSxVQUFBLHNDQUFKQTtJQUFJLE9BQUE7R0FBbUQ7WUFDM0RDLFNBQVNDLEdBQUksT0FBSkEsRUFBSztPQUNkQzs7Ozs7Ozs7O09BRkFKO09BQ0FFO09BQ0FFOzs7O0U7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQ0hBSixJQUFJQztJQUFJLFVBQUEsc0NBQUpBO0lBQUksT0FBQTtHQUFtRDtZQUMzREMsU0FBU0MsR0FBSSxPQUFKQSxFQUFLO09BQ2RDOzs7Ozs7Ozs7T0FGQUo7T0FDQUU7T0FDQUU7Ozs7RTs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQ0VnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUhGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlCTDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBVUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFVRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1QkFLbEIsT0FBQSx3Q0FBbUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGJ5IGR1bmUgKilcblxuKCoqIEBjYW5vbmljYWwgQXN5bmMuRGVmZXJyZWRfb3JfZXJyb3JfZXhwZWN0X3Rlc3RfY29uZmlnICopXG5tb2R1bGUgRGVmZXJyZWRfb3JfZXJyb3JfZXhwZWN0X3Rlc3RfY29uZmlnID0gQXN5bmNfX0RlZmVycmVkX29yX2Vycm9yX2V4cGVjdF90ZXN0X2NvbmZpZ1xuXG4oKiogQGNhbm9uaWNhbCBBc3luYy5FeHBlY3RfdGVzdF9jb25maWcgKilcbm1vZHVsZSBFeHBlY3RfdGVzdF9jb25maWcgPSBBc3luY19fRXhwZWN0X3Rlc3RfY29uZmlnXG5cbigqKiBAY2Fub25pY2FsIEFzeW5jLkV4cGVjdF90ZXN0X2NvbmZpZ19vcl9lcnJvciAqKVxubW9kdWxlIEV4cGVjdF90ZXN0X2NvbmZpZ19vcl9lcnJvciA9IEFzeW5jX19FeHBlY3RfdGVzdF9jb25maWdfb3JfZXJyb3JcblxubW9kdWxlIEFzeW5jX18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm9wZW4hIEFzeW5jX2tlcm5lbFxub3BlbiEgQXN5bmNfdW5peFxubW9kdWxlIElPID0gRGVmZXJyZWRcbm1vZHVsZSBFeHBlY3RfdGVzdF9jb25maWcgPSBDb3JlLkV4cGVjdF90ZXN0X2NvbmZpZ1xuXG5sZXQgcnVuIGYgPSBUaHJlYWRfc2FmZS5ibG9ja19vbl9hc3luY19leG4gZlxubGV0IHNhbml0aXplIHMgPSBzXG5sZXQgdXBvbl91bnJlbGVhc2FibGVfaXNzdWUgPSBFeHBlY3RfdGVzdF9jb25maWcudXBvbl91bnJlbGVhc2FibGVfaXNzdWVcbiIsIm9wZW4gQ29yZVxub3BlbiEgQXN5bmNfa2VybmVsXG5vcGVuISBBc3luY191bml4XG5tb2R1bGUgSU8gPSBEZWZlcnJlZC5Pcl9lcnJvclxubW9kdWxlIEV4cGVjdF90ZXN0X2NvbmZpZyA9IEV4cGVjdF90ZXN0X2NvbmZpZ1xuXG5sZXQgcnVuIGYgPSBUaHJlYWRfc2FmZS5ibG9ja19vbl9hc3luY19leG4gZiB8PiBPcl9lcnJvci5va19leG5cbmxldCBzYW5pdGl6ZSBzID0gc1xubGV0IHVwb25fdW5yZWxlYXNhYmxlX2lzc3VlID0gRXhwZWN0X3Rlc3RfY29uZmlnLnVwb25fdW5yZWxlYXNhYmxlX2lzc3VlXG4iLCJvcGVuISBDb3JlXG5vcGVuISBBc3luY19rZXJuZWxcbm9wZW4hIEFzeW5jX3VuaXhcbm1vZHVsZSBJTyA9IEFzeW5jX2tlcm5lbC5EZWZlcnJlZC5Pcl9lcnJvclxuXG5sZXQgcnVuIGYgPSBUaHJlYWRfc2FmZS5ibG9ja19vbl9hc3luY19leG4gZiB8PiBPcl9lcnJvci5va19leG5cbmxldCBzYW5pdGl6ZSBzID0gc1xubGV0IHVwb25fdW5yZWxlYXNhYmxlX2lzc3VlID0gRXhwZWN0X3Rlc3RfY29uZmlnLnVwb25fdW5yZWxlYXNhYmxlX2lzc3VlXG4iLCJvcGVuISBBc3luY19rZXJuZWxcblxuKCoqIHsyIEFzeW5jX2tlcm5lbH0gKilcblxuaW5jbHVkZSBBc3luY19rZXJuZWwgKCoqIEBvcGVuICopXG5cbm1vZHVsZSBEZWZlcnJlZCA9IHN0cnVjdFxuICBpbmNsdWRlIERlZmVycmVkXG5cbiAgbW9kdWxlIE9yX2Vycm9yID0gc3RydWN0XG4gICAgaW5jbHVkZSBBc3luY19rZXJuZWwuRGVmZXJyZWQuT3JfZXJyb3JcbiAgICBtb2R1bGUgRXhwZWN0X3Rlc3RfY29uZmlnID0gRGVmZXJyZWRfb3JfZXJyb3JfZXhwZWN0X3Rlc3RfY29uZmlnXG4gIGVuZFxuZW5kXG5cbigqKiB7MiBBc3luY191bml4fSAqKVxuXG5pbmNsdWRlIEFzeW5jX3VuaXggKCoqIEBvcGVuICopXG5cbigqKiB7MiBBc3luY19sb2d9ICopXG5cbigqIFdlIGRlZmluZSBbQXN5bmNfbG9nXSB1c2luZyBbc3RydWN0IGluY2x1ZGUgLi4uIGVuZF0gcmF0aGVyIHRoYW4gYXMgYW4gYWxpYXMgc28gdGhhdCB3ZVxuICAgZG9uJ3QgaGF2ZSB0byBhZGQgW2FzeW5jX2xvZ10gdG8gZG93bnN0cmVhbSBqYnVpbGQgbGlicmFyeSBpbXBvcnRzLiAqKVxubW9kdWxlIExvZyA9IHN0cnVjdFxuICBpbmNsdWRlIEFzeW5jX2xvZ1xuZW5kXG5cbmluY2x1ZGUgQXN5bmNfbG9nLlBweF9sb2dfc3ludGF4XG5cbigqKiB7MiBBc3luY19jb21tYW5kfSAqKVxuXG4oKiBXZSBkZWZpbmUgW0NvbW1hbmRdIHVzaW5nIFtzdHJ1Y3QgaW5jbHVkZSAuLi4gZW5kXSByYXRoZXIgdGhhbiBhcyBhbiBhbGlhcyBzbyB0aGF0IHdlXG4gICBkb24ndCBoYXZlIHRvIGFkZCBbYXN5bmNfY29tbWFuZF0gdG8gZG93bnN0cmVhbSBqYnVpbGQgbGlicmFyeSBpbXBvcnRzLiAqKVxubW9kdWxlIENvbW1hbmQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBBc3luY19jb21tYW5kXG5lbmRcblxuKCoqIHsyIEFzeW5jX3JwY30gKilcblxuaW5jbHVkZSBBc3luY19ycGMgKCoqIEBvcGVuICopXG5cbigqIFdlIGRlZmluZSBbUXVpY2tjaGVja10gdXNpbmcgW3N0cnVjdCBpbmNsdWRlIC4uLiBlbmRdIHJhdGhlciB0aGFuIGFzIGFuIGFsaWFzIHNvIHRoYXRcbiAgIHdlIGRvbid0IGhhdmUgdG8gYWRkIFthc3luY19xdWlja2NoZWNrXSB0byBkb3duc3RyZWFtIGpidWlsZCBsaWJyYXJ5IGltcG9ydHMuICopXG5tb2R1bGUgUXVpY2tjaGVjayA9IHN0cnVjdFxuICBpbmNsdWRlIEFzeW5jX3F1aWNrY2hlY2tcbmVuZFxuXG5sZXQldGVzdCBcIkFzeW5jIGxpYnJhcnkgaW5pdGlhbGl6YXRpb24gZG9lcyBub3QgaW5pdGlhbGl6ZSB0aGUgc2NoZWR1bGVyXCIgPVxuICBTY2hlZHVsZXIuaXNfcmVhZHlfdG9faW5pdGlhbGl6ZSAoKVxuOztcblxubW9kdWxlIEV4cGVjdF90ZXN0X2NvbmZpZyA9IEV4cGVjdF90ZXN0X2NvbmZpZ1xubW9kdWxlIEV4cGVjdF90ZXN0X2NvbmZpZ19vcl9lcnJvciA9IEV4cGVjdF90ZXN0X2NvbmZpZ19vcl9lcnJvclxuIl19
