// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream__server
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_server = [0];
   runtime.caml_register_global(0, Dream_server, "Dream__server");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Helpers
//# unitInfo: Requires: Dream_pure__Formats, Dream_pure__Message, Dream_pure__Stream, Lwt, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Content_Type$1 = "Content-Type",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Lwt = global_data.Lwt,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Stdlib = global_data.Stdlib,
    _h_ = [0, 1005],
    _g_ = [0, -454208630],
    _f_ = [0, -36502890],
    _e_ = [0, 581896612],
    cst_Location = "Location",
    cst_Content_Type$0 = cst_Content_Type$1,
    cst_Content_Type = cst_Content_Type$1,
    cst_127_0_0_1_0 = "127.0.0.1:0",
    _c_ = [0, "dream.client"],
    _d_ = [0, "dream.tls"],
    _a_ = 0,
    _b_ = [0, function(client){return client;}],
    client_field = caml_call3(Dream_pure_Message[39], _c_, _b_, _a_);
   function client(request){
    var match = caml_call2(Dream_pure_Message[40], request, client_field);
    if(! match) return cst_127_0_0_1_0;
    var client = match[1];
    return client;
   }
   function set_client(request, client){
    return caml_call3(Dream_pure_Message[41], request, client_field, client);
   }
   var
    tls_field = caml_call3(Dream_pure_Message[39], _d_, [0, Stdlib[30]], 0);
   function tls(request){
    var match = caml_call2(Dream_pure_Message[40], request, tls_field);
    if(match && match[1]) return 1;
    return 0;
   }
   function set_tls(request, tls){
    return caml_call3(Dream_pure_Message[41], request, tls_field, tls);
   }
   function request(client, method, target, tls, headers, server_stream){
    var
     request =
       caml_call5
        (Dream_pure_Message[1],
         [0, method],
         [0, target],
         [0, headers],
         Dream_pure_Stream[7],
         server_stream);
    set_client(request, client);
    set_tls(request, tls);
    return request;
   }
   function request_with_body(method, target, headers, body){
    var _v_ = caml_call1(Dream_pure_Stream[9], body);
    return caml_call5
            (Dream_pure_Message[1],
             method,
             target,
             headers,
             Dream_pure_Stream[7],
             _v_);
   }
   function response_with_body(status, code, headers, body){
    var
     response =
       caml_call5
        (Dream_pure_Message[6],
         status,
         code,
         headers,
         Dream_pure_Stream[7],
         Dream_pure_Stream[7]);
    caml_call2(Dream_pure_Message[20], response, body);
    return response;
   }
   function respond(status, code, headers, body){
    var _u_ = response_with_body(status, code, headers, body);
    return caml_call1(Lwt[4], _u_);
   }
   function html(status, code, headers, body){
    var response = response_with_body(status, code, headers, body);
    caml_call3
     (Dream_pure_Message[15],
      response,
      cst_Content_Type,
      Dream_pure_Formats[13]);
    return caml_call1(Lwt[4], response);
   }
   function json(status, code, headers, body){
    var response = response_with_body(status, code, headers, body);
    caml_call3
     (Dream_pure_Message[15],
      response,
      cst_Content_Type$0,
      Dream_pure_Formats[14]);
    return caml_call1(Lwt[4], response);
   }
   function redirect(status, code, headers, request, location){
    a:
    {
     if(! status && ! code){var status$0 = _e_; break a;}
     var status$0 = status;
    }
    var response = response_with_body(status$0, code, headers, cst);
    caml_call3(Dream_pure_Message[15], response, cst_Location, location);
    return caml_call1(Lwt[4], response);
   }
   function stream(status, code, headers, opt, callback){
    if(opt) var sth = opt[1], close = sth; else var close = 1;
    var
     match = caml_call1(Dream_pure_Stream[2], 0),
     writer = match[2],
     reader = match[1],
     client_stream =
       caml_call2(Dream_pure_Stream[6], reader, Dream_pure_Stream[5]),
     server_stream =
       caml_call2(Dream_pure_Stream[6], Dream_pure_Stream[4], writer),
     response =
       caml_call5
        (Dream_pure_Message[6],
         status,
         code,
         headers,
         client_stream,
         server_stream);
    function _o_(param){
     if(! close) return caml_call1(callback, server_stream);
     function _p_(exn){
      var ppx_lwt_0 = caml_call1(Dream_pure_Message[26], server_stream);
      function _s_(param){throw caml_maybe_attach_backtrace(exn, 1);}
      function _t_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _t_, ppx_lwt_0, _s_);
     }
     function _q_(param){
      return caml_call1(Dream_pure_Message[26], server_stream);
     }
     function _r_(param){return caml_call1(callback, server_stream);}
     return caml_call3(Lwt[9], _r_, _q_, _p_);
    }
    caml_call1(Lwt[11], _o_);
    return caml_call1(Lwt[4], response);
   }
   function empty(headers, status){
    return respond([0, status], 0, headers, cst$0);
   }
   function not_found(param){return respond(_f_, 0, 0, cst$1);}
   function websocket(headers, opt, callback){
    if(opt) var sth = opt[1], close = sth; else var close = 1;
    var
     response =
       caml_call5
        (Dream_pure_Message[6],
         _g_,
         0,
         headers,
         Dream_pure_Stream[8],
         Dream_pure_Stream[7]),
     websocket = caml_call1(Dream_pure_Message[31], response);
    function _i_(param){
     if(! close) return caml_call1(callback, websocket);
     function _j_(exn){
      var ppx_lwt_0 = caml_call2(Dream_pure_Message[33], _h_, websocket);
      function _m_(param){throw caml_maybe_attach_backtrace(exn, 1);}
      function _n_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _n_, ppx_lwt_0, _m_);
     }
     function _k_(param){
      return caml_call2(Dream_pure_Message[33], 0, websocket);
     }
     function _l_(param){return caml_call1(callback, websocket);}
     return caml_call3(Lwt[9], _l_, _k_, _j_);
    }
    caml_call1(Lwt[11], _i_);
    return caml_call1(Lwt[4], response);
   }
   function receive(param){
    var server_stream = param[2];
    return caml_call1(Dream_pure_Message[34], server_stream);
   }
   function receive_fragment(param){
    var server_stream = param[2];
    return caml_call1(Dream_pure_Message[35], server_stream);
   }
   function send(text_or_binary, end_of_message, param, data){
    var server_stream = param[2];
    return caml_call4
            (Dream_pure_Message[36],
             text_or_binary,
             end_of_message,
             server_stream,
             data);
   }
   var
    Dream_server_Helpers =
      [0,
       client_field,
       client,
       set_client,
       tls_field,
       tls,
       set_tls,
       request,
       request_with_body,
       response_with_body,
       respond,
       html,
       json,
       redirect,
       stream,
       empty,
       not_found,
       websocket,
       receive,
       receive_fragment,
       send];
   runtime.caml_register_global
    (18, Dream_server_Helpers, "Dream__server__Helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Log
//# unitInfo: Requires: CamlinternalLazy, Dream__server__Helpers, Dream_pure__Message, Dream_pure__Method, Dream_pure__Status, Fmt, Logs, Lwt, Ptime, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__List, Stdlib__Option, Stdlib__Printexc, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = " ",
    cst_s = "%s",
    cst_Dream_log_initialize_has_a =
      "Dream__log.initialize has already been called, ignoring this call.",
    cst_Dream_log_initialized_has_ =
      "Dream__log.initialized has already been set, check that this call is intentional",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) == 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$5,
    cst$3 = cst$6,
    cst$4 = cst$6,
    cst$1 = cst$5,
    partial =
      [4, 3, [0, 2, 2], 0, [12, 46, [8, [0, 0, 0], [0, 2, 3], [0, 0], 0]]],
    cst$0 = cst$6,
    request_id = cst$6,
    partial$0 = [0, 0, cst$6],
    cst = "     ",
    level = "DEBUG",
    request_id_label = "dream.request_id",
    setup_logs =
      "\nTo initialize logs with a default reporter, and set up Dream, do the following:\n  If you are using MirageOS, use the Dream device in config.ml\n   \n  If you are using Lwt/Unix, execute `Dream.log_initialize ()`\n   \n",
    Lwt = global_data.Lwt,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Dream_pure_Method = global_data.Dream_pure__Method,
    Stdlib_String = global_data.Stdlib__String,
    Logs = global_data.Logs,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Option = global_data.Stdlib__Option,
    Ptime = global_data.Ptime,
    Fmt = global_data.Fmt,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    logs_lib_tag =
      caml_call3(Logs[8][1], 0, request_id_label, Stdlib_Format[13]),
    id_lwt_key = caml_call1(Lwt[49], 0),
    _p_ =
      [0,
       [4,
        3,
        0,
        0,
        [2, 0, [11, " in ", [8, [0, 0, 0], 0, [0, 0], [11, " \xce\xbcs", 0]]]]],
       "%i%s in %.0f \xce\xbcs"],
    cst_Location = "Location",
    _o_ = [0, [2, 0, 0], cst_s],
    _n_ = [0, [11, "Aborted by: ", [2, 0, 0]], "Aborted by: %s"],
    _m_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, 0]]]]]]],
       "%s %s %s %s"],
    cst_User_Agent = "User-Agent",
    _k_ =
      [0,
       [11, cst_Dream_log_initialize_has_a, 0],
       cst_Dream_log_initialize_has_a],
    _l_ =
      [0,
       [11, cst_Dream_log_initialized_has_, 0],
       cst_Dream_log_initialized_has_],
    _j_ = [0, 1],
    _i_ = [0, [2, 0, 0], cst_s],
    _h_ = [0, [11, "Async exception: ", [2, 0, 0]], "Async exception: %s"],
    _g_ = [0, [2, 0, 0], cst_s],
    cst_The_default_logger_is_not_ =
      "The default logger is not yet initialized. ",
    _c_ =
      [0,
       [4,
        3,
        [0, 2, 2],
        0,
        [12,
         46,
         [4,
          3,
          [0, 2, 2],
          0,
          [12,
           46,
           [4,
            3,
            [0, 2, 2],
            0,
            [12,
             32,
             [4,
              3,
              [0, 2, 2],
              0,
              [12, 58, [4, 3, [0, 2, 2], 0, [12, 58, partial]]]]]]]]]],
       "%02i.%02i.%02i %02i:%02i:%02i.%03.0f"],
    cst_REQ = " REQ ",
    _d_ = [0, [17, 0, [17, 4, 0]], "@]@."],
    _e_ =
      [0,
       [15,
        [12,
         32,
         [15, [2, 0, [12, 32, [15, [15, [12, 32, [18, [1, partial$0], 0]]]]]]]]],
       "%a %a%s %a%a @["],
    cst_ERROR = "ERROR",
    cst_WARN = " WARN",
    cst_INFO = " INFO",
    cst_Dream_server_Log_Logs_are_ =
      "Dream__server__Log.Logs_are_not_initialized",
    cst_dream_logger = "dream.logger",
    _a_ = 0,
    _b_ = [0, function(id){return id;}],
    id_field =
      caml_call3(Dream_pure_Message[39], [0, request_id_label], _b_, _a_);
   function get_request_id(request, param){
    if(request)
     var
      request$0 = request[1],
      request_id = caml_call2(Dream_pure_Message[40], request$0, id_field);
    else
     var request_id = 0;
    return request_id ? request_id : caml_call1(Lwt[50], id_lwt_key);
   }
   var last_id = [0, 0];
   function reporter(now, param){
    var
     buffer = caml_call1(Stdlib_Buffer[1], 512),
     formatter = caml_call2(Fmt[10], [0, Fmt[2]], buffer);
    function report(src, level$0, over, k, user_s_callback){
     switch(level$0){
       case 0:
        var level$1 = cst, level_style = -588596599; break;
       case 1:
        var level$1 = cst_ERROR, level_style = 4100401; break;
       case 2:
        var level$1 = cst_WARN, level_style = 82908052; break;
       case 3:
        var level$1 = cst_INFO, level_style = 756711075; break;
       default: var level$1 = level, level_style = 737308346;
     }
     function write(param){
      var message = caml_call1(Stdlib_Buffer[2], buffer);
      caml_call1(Stdlib_Buffer[9], buffer);
      caml_call1(Stdlib[49], message);
      caml_call1(Stdlib[63], Stdlib[40]);
      caml_call1(over, 0);
      return caml_call1(k, 0);
     }
     return caml_call1
             (user_s_callback,
              function(header, tags, format_and_arguments){
               var
                unix_time = caml_call1(now, 0),
                _aj_ = caml_call1(Ptime[9], unix_time),
                time = caml_call1(Stdlib_Option[4], _aj_),
                fraction = runtime.caml_modf_float(unix_time)[1] * 1000.,
                clamped_fraction = 999. < fraction ? 999. : fraction,
                _ak_ = caml_call2(Ptime[21], 0, time),
                _al_ = _ak_[2][1],
                ss = _al_[3],
                mm = _al_[2],
                hh = _al_[1],
                match = _ak_[1],
                d = match[3],
                m = match[2],
                y = match[1],
                time$0 =
                  caml_call8
                   (Stdlib_Printf[4],
                    _c_,
                    d,
                    m,
                    y % 100 | 0,
                    hh,
                    mm,
                    ss,
                    clamped_fraction),
                _am_ = caml_call1(Logs[7][2], Logs[6]),
                width = 15;
               if
                (runtime.caml_string_equal(caml_call1(Logs[7][2], src), _am_))
                var source = caml_call2(Stdlib_String[1], width, 32);
               else{
                var name = caml_call1(Logs[7][2], src);
                if(15 < caml_ml_string_length(name))
                 var
                  _aw_ =
                    caml_call3
                     (Stdlib_String[16],
                      name,
                      caml_ml_string_length(name) - 15 | 0,
                      width);
                else
                 var
                  _ax_ =
                    caml_call2
                     (Stdlib_String[1], 15 - caml_ml_string_length(name) | 0, 32),
                  _aw_ = caml_call2(Stdlib[28], _ax_, name);
                var source = _aw_;
               }
               try{
                var
                 dot_index = caml_call2(Stdlib_String[38], source, 46) + 1 | 0,
                 source$1 =
                   caml_call3
                    (Stdlib_String[16],
                     source,
                     dot_index,
                     caml_ml_string_length(source) - dot_index | 0),
                 _av_ = caml_call3(Stdlib_String[16], source, 0, dot_index),
                 source$0 = source$1,
                 source_prefix = _av_;
               }
               catch(_ay_){
                var _an_ = caml_wrap_exception(_ay_);
                if(_an_ !== Stdlib[8])
                 throw caml_maybe_attach_backtrace(_an_, 0);
                var source$0 = source, source_prefix = cst$0;
               }
               if(tags)
                var
                 tags$0 = tags[1],
                 request_id_from_tags =
                   caml_call2(Logs[8][13], logs_lib_tag, tags$0);
               else
                var request_id_from_tags = 0;
               var
                request_id$0 = request_id_from_tags || get_request_id(0, 0);
               a:
               {
                if(request_id$0){
                 var request_id$1 = request_id$0[1];
                 if(caml_string_notequal(request_id$1, cst$6)){
                  var
                   last_byte =
                     runtime.caml_string_get
                      (request_id$1, caml_ml_string_length(request_id$1) - 1 | 0),
                   color = 0 === (last_byte & 1) ? 749039939 : -605101559,
                   request_style = color,
                   request_id$2 = caml_call2(Stdlib[28], cst_REQ, request_id$1);
                  break a;
                 }
                }
                var request_style = -588596599, request_id$2 = request_id;
               }
               var
                _ao_ = caml_call2(Fmt[92], 989373200, Fmt[57]),
                _ap_ = caml_call2(Fmt[92], request_style, _ao_),
                _aq_ = caml_call2(Fmt[92], level_style, Fmt[57]),
                _ar_ = caml_call2(Fmt[92], -588596599, Fmt[57]),
                _as_ = caml_call2(Fmt[92], 242899572, Fmt[57]),
                _at_ = caml_call2(Stdlib[98], format_and_arguments, _d_),
                _au_ = caml_call2(Stdlib[98], _e_, _at_);
               return caml_call12
                       (Stdlib_Format[144],
                        write,
                        formatter,
                        _au_,
                        _as_,
                        time$0,
                        _ar_,
                        source_prefix,
                        source$0,
                        _aq_,
                        level$1,
                        _ap_,
                        request_id$2);
              });
    }
    return [0, report];
   }
   var
    enable = [0, 1],
    level$0 = [0, 3],
    custom_log_levels = [0, 0],
    sources = [0, 0],
    set_printexc = [0, 1],
    set_async_exception_hook = [0, 1],
    initialized = [0, 0];
   function to_logs_level(l){
    return 106380200 <= l ? 815031438 <= l ? 3 : 1 : -364068301 <= l ? 4 : 2;
   }
   var
    Logs_are_not_initialized =
      [248, cst_Dream_server_Log_Logs_are_, runtime.caml_fresh_oo_id(0)];
   function _f_(param){
    return param === Logs_are_not_initialized
            ? [0,
              caml_call2
               (Stdlib[28], cst_The_default_logger_is_not_, setup_logs)]
            : 0;
   }
   caml_call1(Stdlib_Printexc[9], _f_);
   function initialized$0(param){
    var match = initialized[1];
    if(! match)
     throw caml_maybe_attach_backtrace(Logs_are_not_initialized, 1);
    var v = match[1], _ai_ = runtime.caml_obj_tag(v);
    if(250 === _ai_) return v[1];
    if(246 !== _ai_ && 244 !== _ai_) return v;
    return caml_call1(CamlinternalLazy[2], v);
   }
   function sub_log(level, name){
    function forward(destination_log, user_s_k){
     initialized$0(0);
     return caml_call1
             (destination_log,
              function(log){
               return caml_call1
                       (user_s_k,
                        function(request, format_and_arguments){
                         if(request){
                          var
                           request$0 = request[1],
                           match = get_request_id([0, request$0], 0);
                          if(match)
                           var
                            request_id = match[1],
                            _ah_ =
                              caml_call3
                               (Logs[8][11], logs_lib_tag, request_id, Logs[8][8]);
                          else
                           var _ah_ = Logs[8][8];
                          var tags = _ah_;
                         }
                         else
                          var tags = Logs[8][8];
                         return caml_call3(log, 0, [0, tags], format_and_arguments);
                        });
              });
    }
    var
     _aa_ = [0, [0, level$0[1]], 0],
     _ab_ = [0, caml_call2(Stdlib_List[50], name, custom_log_levels[1]), _aa_],
     _ac_ = [0, caml_call2(Stdlib_Option[7], to_logs_level, level), _ab_],
     level$1 = caml_call2(Stdlib_List[39], Stdlib_Option[11], _ac_),
     src = caml_call2(Logs[7][1], 0, name),
     Log = caml_call1(Logs[18], src);
    caml_call2(Logs[7][5], src, level$1);
    var _ad_ = caml_call2(Stdlib_List[55], name, custom_log_levels[1]);
    custom_log_levels[1] =
     [0, [0, name, caml_call1(Stdlib_Option[4], level$1)], _ad_];
    sources[1] =
     [0, [0, name, src], caml_call2(Stdlib_List[55], name, sources[1])];
    function _ae_(k){return forward(Log[6], k);}
    function _af_(k){return forward(Log[5], k);}
    function _ag_(k){return forward(Log[4], k);}
    return [0, function(k){return forward(Log[3], k);}, _ag_, _af_, _ae_];
   }
   function convenience_log(format_and_arguments){
    function ___(message){
     initialized$0(0);
     function _$_(log){return caml_call4(log, 0, 0, _g_, message);}
     return caml_call2(Logs[10], 0, _$_);
    }
    return caml_call2(Fmt[8], ___, format_and_arguments);
   }
   function iter_backtrace(f, backtrace){
    var _X_ = caml_call1(caml_call1(Stdlib_String[17], 10), backtrace);
    function _Y_(line){return caml_string_notequal(line, cst$6);}
    var _Z_ = caml_call1(caml_call1(Stdlib_List[44], _Y_), _X_);
    return caml_call1(caml_call1(Stdlib_List[18], f), _Z_);
   }
   var log = sub_log(0, cst_dream_logger);
   function set_up_exception_hook(param){
    var _S_ = set_async_exception_hook[1];
    if(_S_){
     set_async_exception_hook[1] = 0;
     var
      _T_ =
        function(exn){
         var backtrace = caml_call1(Stdlib_Printexc[6], 0);
         function _V_(log){
          return caml_call3(log, 0, _h_, caml_call1(Stdlib_Printexc[1], exn));
         }
         caml_call1(log[1], _V_);
         return iter_backtrace
                 (function(line){
                   function _W_(log){return caml_call3(log, 0, _i_, line);}
                   return caml_call1(log[1], _W_);
                  },
                  backtrace);
        };
     Lwt[12][1] = _T_;
     var _U_ = 0;
    }
    else
     var _U_ = _S_;
    return _U_;
   }
   function initialize_log(opt, _Q_, level, _P_, param){
    if(opt) var sth = opt[1], backtraces = sth; else var backtraces = 1;
    if(_Q_)
     var sth$0 = _Q_[1], async_exception_hook = sth$0;
    else
     var async_exception_hook = 1;
    if(_P_) var sth$1 = _P_[1], enable$0 = sth$1; else var enable$0 = 1;
    if(backtraces) caml_call1(Stdlib_Printexc[7], 1);
    set_printexc[1] = 0;
    if(async_exception_hook) set_up_exception_hook(0);
    set_async_exception_hook[1] = 0;
    var
     _R_ = caml_call2(Stdlib_Option[7], to_logs_level, level),
     level$1 = caml_call2(Stdlib_Option[3], _R_, 3);
    enable[1] = enable$0;
    level$0[1] = level$1;
    initialized$0(0);
    return 0;
   }
   function set_log_level(name, level){
    initialized$0(0);
    var level$0 = to_logs_level(level);
    custom_log_levels[1] =
     [0,
      [0, name, level$0],
      caml_call2(Stdlib_List[55], name, custom_log_levels[1])];
    var src = caml_call2(Stdlib_List[50], name, sources[1]);
    function _O_(s){return caml_call2(Logs[7][5], s, [0, level$0]);}
    return caml_call2(Stdlib_Option[9], _O_, src);
   }
   function Make(Pclock){
    function now(param){
     var _M_ = caml_call1(Pclock[1], 0), _N_ = caml_call1(Ptime[2], _M_);
     return caml_call1(Ptime[10], _N_);
    }
    function initializer(setup_outputs){
     return [246,
             function(_G_){
              if(enable[1]){
               caml_call1(setup_outputs, 0);
               caml_call2(Logs[2], _j_, [0, level$0[1]]);
               var
                _H_ = custom_log_levels[1],
                _I_ =
                  function(param){
                   var
                    level = param[2],
                    name = param[1],
                    _K_ = caml_call2(Stdlib_List[50], name, sources[1]);
                   function _L_(source){
                    return caml_call2(Logs[7][5], source, [0, level]);
                   }
                   return caml_call1(caml_call1(Stdlib_Option[9], _L_), _K_);
                  };
               caml_call1(caml_call1(Stdlib_List[18], _I_), _H_);
               var _J_ = reporter(now, 0);
               caml_call1(Logs[22], _J_);
              }
              return 457346292;
             }];
    }
    var set = [0, 0];
    function initialize(setup_outputs){
     if(set[1]){
      var _D_ = function(log){return caml_call3(log, 0, 0, _k_);};
      return caml_call2(Logs[14], 0, _D_);
     }
     try{initialized$0(0); caml_call1(Stdlib_Format[139], _l_);}
     catch(_F_){
      var _E_ = caml_wrap_exception(_F_);
      if(_E_ !== Logs_are_not_initialized)
       throw caml_maybe_attach_backtrace(_E_, 0);
     }
     set[1] = 1;
     initialized[1] = [0, initializer(setup_outputs)];
     return 0;
    }
    function logger(next_handler, request){
     var start = now(0);
     if(set_printexc[1]){
      caml_call1(Stdlib_Printexc[7], 1);
      set_printexc[1] = 0;
     }
     var match = caml_call2(Dream_pure_Message[40], request, id_field);
     if(match)
      var id = match[1], id$0 = id;
     else{
      last_id[1] = last_id[1] + 1 | 0;
      var id$1 = caml_call1(Stdlib[33], last_id[1]);
      caml_call3(Dream_pure_Message[41], request, id_field, id$1);
      var id$0 = id$1;
     }
     var
      _q_ = caml_call2(Dream_pure_Message[10], request, cst_User_Agent),
      user_agent = caml_call1(caml_call1(Stdlib_String[7], cst$1), _q_);
     function _r_(log){
      var
       _A_ = caml_call1(Dream_server_Helpers[2], request),
       _B_ = caml_call1(Dream_pure_Message[3], request),
       _C_ = caml_call1(Dream_pure_Message[2], request);
      return caml_call6
              (log,
               [0, request],
               _m_,
               caml_call1(Dream_pure_Method[1], _C_),
               _B_,
               _A_,
               user_agent);
     }
     caml_call1(log[3], _r_);
     function _s_(exn){
      var backtrace = caml_call1(Stdlib_Printexc[6], 0);
      function _y_(log){
       return caml_call3
               (log, [0, request], _n_, caml_call1(Stdlib_Printexc[1], exn));
      }
      caml_call1(log[2], _y_);
      iter_backtrace
       (function(line){
         function _z_(log){return caml_call3(log, 0, _o_, line);}
         return caml_call1(log[2], _z_);
        },
        backtrace);
      return caml_call1(Lwt[5], exn);
     }
     function _t_(response){
      var _w_ = caml_call1(Dream_pure_Message[7], response);
      if(caml_call1(Dream_pure_Status[3], _w_)){
       var match = caml_call2(Dream_pure_Message[9], response, cst_Location);
       if(match)
        var
         location = match[1],
         _x_ = caml_call2(Stdlib[28], cst$2, location);
       else
        var _x_ = cst$3;
       var location$0 = _x_;
      }
      else
       var location$0 = cst$4;
      var status = caml_call1(Dream_pure_Message[7], response);
      function report(log){
       var elapsed = now(0) - start;
       return caml_call5
               (log,
                [0, request],
                _p_,
                caml_call1(Dream_pure_Status[6], status),
                location$0,
                elapsed * 1000000.);
      }
      if(caml_call1(Dream_pure_Status[5], status))
       caml_call1(log[1], report);
      else if(caml_call1(Dream_pure_Status[4], status))
       caml_call1(log[2], report);
      else
       caml_call1(log[3], report);
      return caml_call1(Lwt[4], response);
     }
     function _u_(param){
      function _v_(param){return caml_call1(next_handler, request);}
      return caml_call3(Lwt[51], id_lwt_key, [0, id$0], _v_);
     }
     return caml_call3(Lwt[9], _u_, _t_, _s_);
    }
    return [0, now, initializer, set, initialize, logger];
   }
   var
    Dream_server_Log =
      [0,
       request_id_label,
       logs_lib_tag,
       id_lwt_key,
       id_field,
       get_request_id,
       last_id,
       reporter,
       enable,
       level$0,
       custom_log_levels,
       sources,
       set_printexc,
       set_async_exception_hook,
       initialized,
       to_logs_level,
       Logs_are_not_initialized,
       setup_logs,
       initialized$0,
       sub_log,
       convenience_log,
       iter_backtrace,
       log,
       set_up_exception_hook,
       initialize_log,
       set_log_level,
       Make];
   runtime.caml_register_global(55, Dream_server_Log, "Dream__server__Log");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Router
//# unitInfo: Requires: Dream__server__Helpers, Dream__server__Log, Dream_pure__Formats, Dream_pure__Message, Dream_pure__Method, Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst$3 = "*",
    cst$2 = "/",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = ", ",
    cst$0 = cst$2,
    cst = cst$2,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Stdlib_String = global_data.Stdlib__String,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_pure_Method = global_data.Dream_pure__Method,
    Dream_server_Log = global_data.Dream__server__Log,
    _a_ =
      [0,
       [11, "Empty path parameter name in '", [2, 0, [12, 39, 0]]],
       "Empty path parameter name in '%s'"],
    cst_Path_wildcard_must_be_last = "Path wildcard must be last",
    cst_Path_wildcard_must_be_just = "Path wildcard must be just '**'",
    _n_ = [0, [2, 0, 0], "%s"],
    _m_ =
      [0,
       [11, "Dream.param: missing path parameter ", [3, 0, 0]],
       "Dream.param: missing path parameter %S"],
    _j_ = [0, [2, 0, [12, 61, [2, 0, 0]]], "%s=%s"],
    _b_ = [0, cst$3],
    _e_ = [0, "dream.path"],
    _h_ = [0, "dream.prefix"],
    _l_ = [0, "dream.params"],
    cst_dream_router = "dream.router";
   function make_star_or_wildcard(s){
    return caml_string_notequal(s, cst$4) ? [2, s] : _b_;
   }
   function parse(string){
    function parse_separator$0(counter, tokens, index){
     try{var val = caml_string_get(string, index);}
     catch(_T_){
      var _R_ = caml_wrap_exception(_T_);
      if(_R_[1] === Stdlib[6]) return caml_call1(Stdlib_List[10], tokens);
      throw caml_maybe_attach_backtrace(_R_, 0);
     }
     if(47 === val){
      var _S_ = index + 1 | 0;
      if(counter >= 50)
       return caml_trampoline_return(parse_component_start, [0, tokens, _S_]);
      var counter$1 = counter + 1 | 0;
      return parse_component_start(counter$1, tokens, _S_);
     }
     if(counter >= 50)
      return caml_trampoline_return(parse_component_start, [0, tokens, index]);
     var counter$0 = counter + 1 | 0;
     return parse_component_start(counter$0, tokens, index);
    }
    function parse_component_start(counter, tokens, index){
     var index$0 = index;
     for(;;){
      a:
      {
       try{var val = caml_string_get(string, index$0);}
       catch(_Q_){
        var _J_ = caml_wrap_exception(_Q_);
        if(_J_[1] === Stdlib[6]) break a;
        throw caml_maybe_attach_backtrace(_J_, 0);
       }
       if(42 === val){
        var _L_ = index$0 + 1 | 0, _M_ = index$0 + 1 | 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (parse_component,
                  [0, tokens, make_star_or_wildcard, _M_, _L_]);
        var counter$1 = counter + 1 | 0;
        return parse_component
                (counter$1, tokens, make_star_or_wildcard, _M_, _L_);
       }
       if(47 === val){
        var index$1 = index$0 + 1 | 0, index$0 = index$1;
        continue;
       }
       if(58 === val){
        var
         _N_ = index$0 + 1 | 0,
         _O_ = index$0 + 1 | 0,
         _P_ = function(s){return [1, s];};
        if(counter >= 50)
         return caml_trampoline_return
                 (parse_component, [0, tokens, _P_, _O_, _N_]);
        var counter$0 = counter + 1 | 0;
        return parse_component(counter$0, tokens, _P_, _O_, _N_);
       }
      }
      var _K_ = function(s){return [0, s];};
      if(counter >= 50)
       return caml_trampoline_return
               (parse_component, [0, tokens, _K_, index$0, index$0]);
      var counter$2 = counter + 1 | 0;
      return parse_component(counter$2, tokens, _K_, index$0, index$0);
     }
    }
    function parse_component(counter, tokens, constructor, start_index, index){
     var index$0 = index;
     for(;;){
      try{var val = caml_string_get(string, index$0);}
      catch(_I_){
       var _G_ = caml_wrap_exception(_I_);
       if(_G_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_G_, 0);
       var
        token =
          caml_call1
           (constructor,
            caml_call3
             (Stdlib_String[16],
              string,
              start_index,
              index$0 - start_index | 0));
       return caml_call1(Stdlib_List[10], [0, token, tokens]);
      }
      if(47 === val){
       var
        token$0 =
          caml_call1
           (constructor,
            caml_call3
             (Stdlib_String[16],
              string,
              start_index,
              index$0 - start_index | 0)),
        _H_ = [0, token$0, tokens];
       if(counter >= 50)
        return caml_trampoline_return(parse_separator$0, [0, _H_, index$0]);
       var counter$0 = counter + 1 | 0;
       return parse_separator$0(counter$0, _H_, index$0);
      }
      var index$1 = index$0 + 1 | 0, index$0 = index$1;
     }
    }
    function parse_separator(tokens, index){
     return caml_trampoline(parse_separator$0(0, tokens, index));
    }
    var tokens$0 = parse_separator(0, 0), param = tokens$0;
    for(;;){
     a:
     if(param){
      var _F_ = param[1];
      switch(_F_[0]){
        case 1:
         if(! caml_string_notequal(_F_[1], cst$4)){
          caml_call3(Stdlib_Printf[10], Stdlib[2], _a_, string);
          break a;
         }
         break;
        case 2:
         if(caml_string_notequal(_F_[1], cst$3)){
          caml_call1(Stdlib[2], cst_Path_wildcard_must_be_just);
          break a;
         }
         if(! param[2]) break a;
         caml_call1(Stdlib[2], cst_Path_wildcard_must_be_last);
         break a;
      }
      var tokens = param[2], param = tokens;
      continue;
     }
     return tokens$0;
    }
   }
   function strip_empty_trailing_token(param){
    if(! param) return 0;
    var token = param[1];
    if
     (0 === token[0] && ! caml_string_notequal(token[1], cst$4) && ! param[2])
     return 0;
    var tokens = param[2];
    return [0, token, strip_empty_trailing_token(tokens)];
   }
   function get(pattern, handler){
    return [0, [0, parse(pattern), [0, 3546230, handler]], 0];
   }
   function post(pattern, handler){
    return [0, [0, parse(pattern), [0, 891112544, handler]], 0];
   }
   function put(pattern, handler){
    return [0, [0, parse(pattern), [0, 3997359, handler]], 0];
   }
   function delete$0(pattern, handler){
    return [0, [0, parse(pattern), [0, 492530731, handler]], 0];
   }
   function head(pattern, handler){
    return [0, [0, parse(pattern), [0, 801894688, handler]], 0];
   }
   function connect(pattern, handler){
    return [0, [0, parse(pattern), [0, 357830602, handler]], 0];
   }
   function options(pattern, handler){
    return [0, [0, parse(pattern), [0, -539883714, handler]], 0];
   }
   function trace(pattern, handler){
    return [0, [0, parse(pattern), [0, 336447077, handler]], 0];
   }
   function patch(pattern, handler){
    return [0, [0, parse(pattern), [0, 994393768, handler]], 0];
   }
   function any(pattern, handler){
    return [0, [0, parse(pattern), [0, 3257036, handler]], 0];
   }
   var no_route = 0;
   function apply(middlewares, routes){
    function compose(handler, param){
     if(! param) return handler;
     var more = param[2], middleware = param[1];
     return caml_call1(middleware, compose(handler, more));
    }
    var _D_ = caml_call1(Stdlib_List[15], routes);
    function _E_(param){
     var node = param[2], pattern = param[1];
     if(0 === node[0])
      var
       handler = node[2],
       method = node[1],
       node$0 = [0, method, compose(handler, middlewares)];
     else
      var route = node[1], node$0 = [1, apply(middlewares, [0, route, 0])];
     return [0, pattern, node$0];
    }
    return caml_call1(caml_call1(Stdlib_List[20], _E_), _D_);
   }
   function scope(prefix, middlewares, routes){
    var
     routes$0 = [0, apply(middlewares, routes), 0],
     _C_ = [1, caml_call1(Stdlib_List[15], routes$0)];
    return [0, [0, strip_empty_trailing_token(parse(prefix)), _C_], 0];
   }
   var
    _c_ = 0,
    _d_ = [0, function(path){return caml_call2(Stdlib_String[7], cst, path);}],
    path_field = caml_call3(Dream_pure_Message[39], _e_, _d_, _c_);
   function path(the_request){
    var match = caml_call2(Dream_pure_Message[40], the_request, path_field);
    if(match){var path = match[1]; return path;}
    var
     _A_ = caml_call1(Dream_pure_Message[3], the_request),
     _B_ = caml_call1(Dream_pure_Formats[9], _A_)[1];
    return caml_call1(Dream_pure_Formats[10], _B_);
   }
   function set_path(request, path){
    return caml_call3(Dream_pure_Message[41], request, path_field, path);
   }
   var
    _f_ = 0,
    _g_ =
      [0,
       function(prefix){
        var _z_ = caml_call1(Stdlib_List[10], prefix);
        return caml_call2(Stdlib_String[7], cst$0, _z_);
       }],
    prefix_field = caml_call3(Dream_pure_Message[39], _h_, _g_, _f_);
   function internal_prefix(request){
    var match = caml_call2(Dream_pure_Message[40], request, prefix_field);
    if(! match) return 0;
    var prefix = match[1];
    return prefix;
   }
   function prefix(request){
    var
     _x_ = internal_prefix(request),
     _y_ = caml_call1(Stdlib_List[10], _x_);
    return caml_call3(Dream_pure_Formats[11], 0, 0, _y_);
   }
   function set_prefix(request, prefix){
    return caml_call3(Dream_pure_Message[41], request, prefix_field, prefix);
   }
   var
    _i_ = 0,
    _k_ =
      [0,
       function(params){
        function _v_(param){
         var value = param[2];
         return caml_call3(Stdlib_Printf[4], _j_, param[1], value);
        }
        var _w_ = caml_call1(caml_call1(Stdlib_List[20], _v_), params);
        return caml_call1(caml_call1(Stdlib_String[7], cst$1), _w_);
       }],
    params_field = caml_call3(Dream_pure_Message[39], _l_, _k_, _i_),
    log = caml_call2(Dream_server_Log[19], 0, cst_dream_router);
   function missing_param(request, name){
    var message = caml_call2(Stdlib_Printf[4], _m_, name);
    function _u_(log){return caml_call3(log, [0, request], _n_, message);}
    caml_call1(log[1], _u_);
    return caml_call1(Stdlib[2], message);
   }
   function param(request, name){
    var match = caml_call2(Dream_pure_Message[40], request, params_field);
    if(! match) return missing_param(request, name);
    var params = match[1];
    try{var _s_ = caml_call2(Stdlib_List[49], name, params); return _s_;}
    catch(_t_){return missing_param(request, name);}
   }
   function router(routes){
    var routes$0 = caml_call1(Stdlib_List[15], routes);
    return function(request){
     function try_routes$0(counter, bindings, prefix, path, routes, ok, fail){
      if(! routes) return caml_call1(fail, 0);
      var
       routes$0 = routes[2],
       match = routes[1],
       node = match[2],
       pattern = match[1];
      function fail$0(param){
       return try_routes(bindings, prefix, path, routes$0, ok, fail);
      }
      var
       bindings$0 = bindings,
       prefix$0 = prefix,
       path$0 = path,
       pattern$0 = pattern;
      for(;;){
       if(! pattern$0){
        var _r_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (try_node,
                  [0, bindings$0, prefix$0, path$0, node, _r_, ok, fail$0]);
        var counter$0 = counter + 1 | 0;
        return try_node
                (counter$0,
                 bindings$0,
                 prefix$0,
                 path$0,
                 node,
                 _r_,
                 ok,
                 fail$0);
       }
       var match$0 = pattern$0[1];
       a:
       {
        switch(match$0[0]){
          case 0:
           if(path$0){
            var
             path$1 = path$0[2],
             s = path$0[1],
             pattern$1 = pattern$0[2],
             s$0 = match$0[1];
            if(! caml_string_equal(s$0, s)) break a;
            var
             prefix$1 = [0, s, prefix$0],
             prefix$0 = prefix$1,
             path$0 = path$1,
             pattern$0 = pattern$1;
            continue;
           }
           break;
          case 1:
           if(path$0){
            var s$1 = path$0[1], pattern$2 = pattern$0[2], s$2 = match$0[1];
            if(caml_string_equal(s$1, cst$4)) return fail$0(0);
            var
             path$2 = path$0[2],
             prefix$2 = [0, s$1, prefix$0],
             bindings$1 = [0, [0, s$2, s$1], bindings$0],
             bindings$0 = bindings$1,
             prefix$0 = prefix$2,
             path$0 = path$2,
             pattern$0 = pattern$2;
            continue;
           }
           break;
        }
        if(! path$0) return fail$0(0);
       }
       if(2 !== pattern$0[1][0]) return fail$0(0);
       var _q_ = 1;
       if(counter >= 50)
        return caml_trampoline_return
                (try_node,
                 [0, bindings$0, prefix$0, path$0, node, _q_, ok, fail$0]);
       var counter$1 = counter + 1 | 0;
       return try_node
               (counter$1,
                bindings$0,
                prefix$0,
                path$0,
                node,
                _q_,
                ok,
                fail$0);
      }
     }
     function try_node
     (counter, bindings, prefix, path, node, is_wildcard, ok, fail){
      if(0 !== node[0]){
       var routes = node[1];
       if(counter >= 50)
        return caml_trampoline_return
                (try_routes$0, [0, bindings, prefix, path, routes, ok, fail]);
       var counter$0 = counter + 1 | 0;
       return try_routes$0
               (counter$0, bindings, prefix, path, routes, ok, fail);
      }
      var
       method_set = node[1],
       handler = node[2],
       method = caml_call1(Dream_pure_Message[2], request);
      a:
      {
       if(typeof method_set === "number" && 3257036 === method_set){var _p_ = 1; break a;}
       var _p_ = caml_call2(Dream_pure_Method[4], method_set, method);
      }
      return _p_
              ? (caml_call3
                 (Dream_pure_Message[41], request, params_field, bindings),
                is_wildcard
                 ? (set_prefix
                    (request, prefix),
                   set_path(request, path),
                   caml_call2(ok, handler, request))
                 : 0
                   === path
                   ? caml_call2(ok, handler, request)
                   : caml_call1(fail, 0))
              : caml_call1(fail, 0);
     }
     function try_routes(bindings, prefix, path, routes, ok, fail){
      return caml_trampoline
              (try_routes$0(0, bindings, prefix, path, routes, ok, fail));
     }
     var match = caml_call2(Dream_pure_Message[40], request, params_field);
     if(match)
      var params = match[1], params$0 = params;
     else
      var params$0 = 0;
     var prefix = internal_prefix(request), path$0 = path(request);
     function _o_(param){
      return caml_call1(Dream_server_Helpers[16], request);
     }
     return try_routes
             (params$0,
              prefix,
              path$0,
              routes$0,
              function(handler, request){return caml_call1(handler, request);},
              _o_);};
   }
   var
    Dream_server_Router =
      [0,
       get,
       post,
       put,
       delete$0,
       head,
       connect,
       options,
       trace,
       patch,
       any,
       no_route,
       scope,
       router,
       param,
       path,
       prefix,
       set_path,
       set_prefix,
       parse];
   runtime.caml_register_global
    (28, Dream_server_Router, "Dream__server__Router");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Cookie
//# unitInfo: Requires: Dream__cipher__Cipher, Dream__server__Helpers, Dream__server__Router, Dream_pure__Formats, Dream_pure__Message, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Host$1 = "__Host-",
    cst_Secure$1 = "__Secure-",
    cst_dream_cookie$1 = "dream.cookie-";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = cst$2,
    cst$0 = cst$2,
    Dream_server_Router = global_data.Dream__server__Router,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Stdlib = global_data.Stdlib,
    Dream_cipher_Cipher = global_data.Dream__cipher__Cipher,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib_List = global_data.Stdlib__List,
    _e_ = [0, 0.],
    _f_ = [0, 0],
    _b_ = [0, 870530776],
    _c_ = [0, -976972951],
    _a_ = [0, 3801155],
    _d_ = [0, 3801155],
    cst_dream_cookie$0 = cst_dream_cookie$1,
    cst_Set_Cookie = "Set-Cookie",
    cst_dream_cookie = cst_dream_cookie$1,
    cst_Host = cst_Host$1,
    cst_Secure = cst_Secure$1,
    cst_Host$0 = cst_Host$1,
    cst_Secure$0 = cst_Secure$1,
    cst_Cookie = "Cookie";
   function all_cookies(request){
    var
     _q_ = caml_call2(Dream_pure_Message[10], request, cst_Cookie),
     _r_ = caml_call1(caml_call1(Stdlib_List[20], Dream_pure_Formats[8]), _q_);
    return caml_call1(Stdlib_List[15], _r_);
   }
   function infer_cookie_prefix(prefix, domain, path, secure){
    if(prefix){
     var _p_ = prefix[1];
     return _p_ ? 803994504 <= _p_[1] ? cst_Host : cst_Secure : cst;
    }
    a:
    {
     if(! domain && path && ! runtime.caml_string_notequal(path[1], "/")){if(secure) return cst_Host$0; break a;}
     if(secure) return cst_Secure$0;
    }
    return cst$0;
   }
   function cookie(cookie_prefix, opt, domain, path, secure, request, name){
    if(opt)
     var sth = opt[1], decrypt_cookie = sth;
    else
     var decrypt_cookie = 1;
    if(path)
     var path$0 = path[1], path$1 = path$0;
    else
     var path$1 = [0, caml_call1(Dream_server_Router[16], request)];
    if(secure)
     var secure$0 = secure[1], secure$1 = secure$0;
    else
     var secure$1 = caml_call1(Dream_server_Helpers[5], request);
    var
     cookie_prefix$0 =
       infer_cookie_prefix(cookie_prefix, domain, path$1, secure$1),
     name$0 = caml_call2(Stdlib[28], cookie_prefix$0, name);
    function test(param){
     var name = param[1];
     return runtime.caml_string_equal(name$0, name);
    }
    var
     _n_ = all_cookies(request),
     match = caml_call1(caml_call1(Stdlib_List[40], test), _n_);
    if(! match) return 0;
    var value = match[1][2];
    if(! decrypt_cookie) return [0, value];
    var match$0 = caml_call1(Dream_pure_Formats[3], value);
    if(! match$0) return 0;
    var
     value$0 = match$0[1],
     _o_ = [0, caml_call2(Stdlib[28], cst_dream_cookie, name$0)];
    return caml_call3(Dream_cipher_Cipher[8], _o_, request, value$0);
   }
   function set_cookie
   (cookie_prefix,
    opt,
    expires,
    max_age,
    domain,
    path,
    secure,
    _g_,
    same_site,
    response,
    request,
    name,
    value){
    if(opt)
     var sth = opt[1], encrypt_cookie = sth;
    else
     var encrypt_cookie = 1;
    if(_g_) var sth$0 = _g_[1], http_only = sth$0; else var http_only = 1;
    if(path)
     var path$0 = path[1], path$1 = path$0;
    else
     var path$1 = [0, caml_call1(Dream_server_Router[16], request)];
    if(secure)
     var secure$0 = secure[1], secure$1 = secure$0;
    else
     var secure$1 = caml_call1(Dream_server_Helpers[5], request);
    var
     cookie_prefix$0 =
       infer_cookie_prefix(cookie_prefix, domain, path$1, secure$1);
    if(same_site){
     var _h_ = same_site[1];
     if(_h_)
      var
       _i_ = _h_[1],
       _j_ = 3801155 === _i_ ? _a_ : 870530776 <= _i_ ? _b_ : _c_,
       _k_ = _j_;
     else
      var _k_ = 0;
     var same_site$0 = _k_;
    }
    else
     var same_site$0 = _d_;
    var name$0 = caml_call2(Stdlib[28], cookie_prefix$0, name);
    if(encrypt_cookie)
     var
      _l_ = [0, caml_call2(Stdlib[28], cst_dream_cookie$0, name$0)],
      _m_ = caml_call3(Dream_cipher_Cipher[7], _l_, request, value),
      value$0 = caml_call1(Dream_pure_Formats[2], _m_);
    else
     var value$0 = value;
    var
     set_cookie =
       caml_call9
        (Dream_pure_Formats[15],
         expires,
         max_age,
         domain,
         path$1,
         [0, secure$1],
         [0, http_only],
         same_site$0,
         name$0,
         value$0);
    return caml_call3
            (Dream_pure_Message[13], response, cst_Set_Cookie, set_cookie);
   }
   function drop_cookie
   (prefix,
    domain,
    path,
    secure,
    http_only,
    same_site,
    response,
    request,
    name){
    return set_cookie
            (prefix,
             _f_,
             _e_,
             0,
             domain,
             path,
             secure,
             http_only,
             same_site,
             response,
             request,
             name,
             cst$1);
   }
   var
    Dream_server_Cookie =
      [0, all_cookies, infer_cookie_prefix, cookie, set_cookie, drop_cookie];
   runtime.caml_register_global
    (25, Dream_server_Cookie, "Dream__server__Cookie");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Session
//# unitInfo: Requires: Dream__cipher__Random, Dream__server__Cookie, Dream__server__Log, Dream_pure__Formats, Dream_pure__Message, Lwt, Ptime, Stdlib, Stdlib__Hashtbl, Stdlib__List, Stdlib__Option, Stdlib__Printf, Stdlib__String, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_dream_session = "dream.session",
    cst_expires_at$0 = "expires_at",
    cst_id$0 = "id",
    cst_label$0 = "label",
    cst_payload$0 = "payload",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ", ",
    message = "Missing session middleware",
    session_cookie = cst_dream_session,
    Stdlib_List = global_data.Stdlib__List,
    Ptime = global_data.Ptime,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Yojson_Basic = global_data.Yojson__Basic,
    Dream_server_Cookie = global_data.Dream__server__Cookie,
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Dream_cipher_Random = global_data.Dream__cipher__Random,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_server_Log = global_data.Dream__server__Log,
    Stdlib_Option = global_data.Stdlib__Option,
    log = caml_call2(Dream_server_Log[19], 0, cst_dream_session),
    _f_ = [0, [3, 0, [11, ": ", [3, 0, 0]]], "%S: %S"],
    _g_ = [0, [2, 0, [11, " [", [2, 0, [12, 93, 0]]]], "%s [%s]"],
    cst_payload = cst_payload$0,
    cst_expires_at = cst_expires_at$0,
    cst_label = cst_label$0,
    cst_id = cst_id$0,
    cst_Bad_payload = "Bad payload",
    _d_ = [0, 0],
    _c_ = [0, 0],
    cst_0 = "0",
    _b_ = [0, cst_dream_session],
    _a_ = [0, [2, 0, 0], "%s"];
   function typed_middleware(show_value, param){
    var field = caml_call3(Dream_pure_Message[39], _b_, show_value, 0);
    function _ai_(request){
     var match = caml_call2(Dream_pure_Message[40], request, field);
     if(match){var session = match[1]; return session;}
     function _an_(log){return caml_call3(log, [0, request], _a_, message);}
     caml_call1(log[1], _an_);
     return caml_call1(Stdlib[2], message);
    }
    return [0,
            function(back_end, inner_handler, request){
             var ppx_lwt_0 = caml_call1(back_end[1], request);
             function _aj_(session){
              caml_call3(Dream_pure_Message[41], request, field, session);
              var ppx_lwt_0 = caml_call1(inner_handler, request);
              function _al_(response){
               return caml_call3(back_end[2], session, request, response);
              }
              function _am_(exn){
               try{throw caml_maybe_attach_backtrace(exn, 0);}
               catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
              }
              return caml_call3(Lwt[81], _am_, ppx_lwt_0, _al_);
             }
             function _ak_(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             }
             return caml_call3(Lwt[81], _ak_, ppx_lwt_0, _aj_);
            },
            _ai_];
   }
   var symbol = Stdlib_Option[5];
   function new_id(param){
    var _ah_ = caml_call1(Dream_cipher_Random[5], 18);
    return caml_call1(Dream_pure_Formats[2], _ah_);
   }
   function new_label(param){
    var _ag_ = caml_call1(Dream_cipher_Random[5], 9);
    return caml_call1(Dream_pure_Formats[2], _ag_);
   }
   function version_session_id(id){return caml_call2(Stdlib[28], cst_0, id);}
   function read_session_id(id){
    return 1 <= caml_ml_string_length(id)
            ? 48
              === runtime.caml_string_get(id, 0)
              ? [0,
                caml_call3
                 (Stdlib_String[16], id, 1, caml_ml_string_length(id) - 1 | 0)]
              : 0
            : 0;
   }
   function create(hash_table, expires_at){
    for(;;){
     var id = new_id(0);
     if(! caml_call2(Stdlib_Hashtbl[9], hash_table, id)){
      var session = [0, id, new_label(0), expires_at, 0];
      caml_call3(Stdlib_Hashtbl[11], hash_table, id, session);
      return session;
     }
    }
   }
   function put(session, name, value){
    var
     _af_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _af_),
     dictionary$0 = [0, [0, name, value], dictionary];
    session[4] = dictionary$0;
    return Lwt[36];
   }
   function drop(session, name){
    var
     _ae_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _ae_);
    session[4] = dictionary;
    return Lwt[36];
   }
   function invalidate(hash_table, now, lifetime, operations, session){
    caml_call2(Stdlib_Hashtbl[10], hash_table, session[1][1]);
    session[1] = create(hash_table, caml_call1(now, 0) + lifetime);
    operations[4] = 1;
    return Lwt[36];
   }
   function operations(now, hash_table, lifetime, session, dirty){
    var operations = [];
    function _ac_(param){
     return invalidate(hash_table, now, lifetime, operations, session);
    }
    function _ad_(name){return drop(session[1], name);}
    caml_update_dummy
     (operations,
      [0,
       function(name, value){return put(session[1], name, value);},
       _ad_,
       _ac_,
       dirty]);
    return operations;
   }
   function load(gettimeofday, hash_table, lifetime, request){
    var now = caml_call1(gettimeofday, 0);
    function _$_(session){
     return now < session[3]
             ? [0, session]
             : (caml_call2(Stdlib_Hashtbl[10], hash_table, session[1]), 0);
    }
    var
     _aa_ = caml_call1(Stdlib_Hashtbl[7], hash_table),
     valid_session =
       caml_call2
        (symbol,
         caml_call2
          (symbol,
           caml_call2
            (symbol,
             caml_call7
              (Dream_server_Cookie[3],
               0,
               _c_,
               0,
               0,
               0,
               request,
               session_cookie),
             read_session_id),
           _aa_),
         _$_);
    if(valid_session){
     var session = valid_session[1];
     if(lifetime / 2. < session[3] - now)
      var session$0 = session, dirty = 0;
     else{session[3] = now + lifetime; var session$0 = session, dirty = 1;}
    }
    else
     var
      session$2 = create(hash_table, now + lifetime),
      session$0 = session$2,
      dirty = 1;
    var
     session$1 = [0, session$0],
     _ab_ =
       [0,
        operations(gettimeofday, hash_table, lifetime, session$1, dirty),
        session$1];
    return caml_call1(Lwt[4], _ab_);
   }
   function send(now, param, request, response){
    var session = param[2], operations = param[1];
    if(operations[4]){
     var
      id = version_session_id(session[1][1]),
      ___ = caml_call1(now, 0),
      max_age = session[1][3] - ___;
     caml_call13
      (Dream_server_Cookie[4],
       0,
       _d_,
       0,
       [0, max_age],
       0,
       0,
       0,
       0,
       0,
       response,
       request,
       session_cookie,
       id);
    }
    return caml_call1(Lwt[4], response);
   }
   function back_end(now, lifetime){
    var hash_table = caml_call2(Stdlib_Hashtbl[1], 0, 256);
    function _V_(_X_, _Y_, _Z_){return send(now, _X_, _Y_, _Z_);}
    return [0,
            function(_W_){return load(now, hash_table, lifetime, _W_);},
            _V_];
   }
   var
    Memory =
      [0, create, put, drop, invalidate, operations, load, send, back_end];
   function create$0(expires_at){
    var _U_ = new_label(0);
    return [0, new_id(0), _U_, expires_at, 0];
   }
   function put$0(operations, session, name, value){
    var
     _T_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _T_),
     dictionary$0 = [0, [0, name, value], dictionary];
    session[4] = dictionary$0;
    operations[4] = 1;
    return Lwt[36];
   }
   function drop$0(operations, session, name){
    var
     _S_ = session[4],
     dictionary = caml_call1(caml_call1(Stdlib_List[55], name), _S_);
    session[4] = dictionary;
    operations[4] = 1;
    return Lwt[36];
   }
   function invalidate$0(now, lifetime, operations, session){
    session[1] = create$0(caml_call1(now, 0) + lifetime);
    operations[4] = 1;
    return Lwt[36];
   }
   function operations$0(now, lifetime, session, dirty){
    var operations = [];
    function _Q_(param){
     return invalidate$0(now, lifetime, operations, session);
    }
    function _R_(name){return drop$0(operations, session[1], name);}
    caml_update_dummy
     (operations,
      [0,
       function(name, value){
        return put$0(operations, session[1], name, value);
       },
       _R_,
       _Q_,
       dirty]);
    return operations;
   }
   function load$0(gettimeofday, lifetime, request){
    var now = caml_call1(gettimeofday, 0);
    function _y_(value){
     var match = caml_call4(Yojson_Basic[33], 0, 0, 0, value);
     if(typeof match !== "number" && 963043957 === match[1]){
      var _A_ = match[2];
      if(_A_){
       var _B_ = _A_[1];
       if(! caml_string_notequal(_B_[1], cst_id$0)){
        var _C_ = _B_[2];
        if(typeof _C_ !== "number" && -976970511 === _C_[1]){
         var _D_ = _A_[2];
         if(_D_){
          var _E_ = _D_[1], id = _C_[2];
          if(! caml_string_notequal(_E_[1], cst_label$0)){
           var _F_ = _E_[2];
           if(typeof _F_ !== "number" && -976970511 === _F_[1]){
            var _G_ = _D_[2];
            if(_G_){
             var _H_ = _G_[1], label = _F_[2];
             if(! caml_string_notequal(_H_[1], cst_expires_at$0)){
              var _I_ = _G_[2];
              if(_I_){
               var _J_ = _I_[1], expires_at = _H_[2];
               if(! caml_string_notequal(_J_[1], cst_payload$0)){
                var _K_ = _J_[2];
                if
                 (typeof _K_ !== "number" && 963043957 === _K_[1] && ! _I_[2]){
                 var payload = _K_[2];
                 a:
                 {
                  b:
                  {
                   var
                    _L_ =
                      function(expires_at){
                       if(expires_at <= now) return 0;
                       function _P_(param){
                        var match = param[2];
                        if(typeof match !== "number" && -976970511 === match[1]){
                         var value = match[2], name = param[1];
                         return [0, name, value];
                        }
                        return caml_call1(Stdlib[2], cst_Bad_payload);
                       }
                       var
                        payload$0 =
                          caml_call1(caml_call1(Stdlib_List[20], _P_), payload);
                       return [0, [0, id, label, expires_at, payload$0]];
                      };
                   if(typeof expires_at !== "number"){
                    var _N_ = expires_at[1];
                    if(3654863 === _N_)
                     var n = expires_at[2], _O_ = [0, n];
                    else{
                     if(365180284 !== _N_) break b;
                     var n$0 = expires_at[2], _O_ = [0, n$0];
                    }
                    var _M_ = _O_;
                    break a;
                   }
                  }
                  var _M_ = 0;
                 }
                 return caml_call2(symbol, _M_, _L_);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
     return 0;
    }
    var
     valid_session =
       caml_call2
        (symbol,
         caml_call2
          (symbol,
           caml_call7
            (Dream_server_Cookie[3], 0, 0, 0, 0, 0, request, session_cookie),
           read_session_id),
         _y_);
    if(valid_session){
     var session = valid_session[1];
     if(lifetime / 2. < session[3] - now)
      var session$0 = session, dirty = 0;
     else{session[3] = now + lifetime; var session$0 = session, dirty = 1;}
    }
    else
     var
      session$2 = create$0(now + lifetime),
      session$0 = session$2,
      dirty = 1;
    var
     session$1 = [0, session$0],
     _z_ =
       [0, operations$0(gettimeofday, lifetime, session$1, dirty), session$1];
    return caml_call1(Lwt[4], _z_);
   }
   function send$0(now, param, request, response){
    var session = param[2], operations = param[1];
    if(operations[4]){
     var
      _t_ = caml_call1(now, 0),
      max_age = session[1][3] - _t_,
      _u_ = 0,
      _v_ = session[1][4],
      _w_ =
        function(param){
         var value = param[2], name = param[1];
         return [0, name, [0, -976970511, value]];
        },
      _x_ =
        [0,
         [0,
          cst_payload,
          [0, 963043957, caml_call1(caml_call1(Stdlib_List[20], _w_), _v_)]],
         _u_],
      value =
        version_session_id
         (caml_call5
           (Yojson_Basic[1],
            0,
            0,
            0,
            0,
            [0,
             963043957,
             [0,
              [0, cst_id, [0, -976970511, session[1][1]]],
              [0,
               [0, cst_label, [0, -976970511, session[1][2]]],
               [0, [0, cst_expires_at, [0, 365180284, session[1][3]]], _x_]]]]));
     caml_call13
      (Dream_server_Cookie[4],
       0,
       0,
       0,
       [0, max_age],
       0,
       0,
       0,
       0,
       0,
       response,
       request,
       session_cookie,
       value);
    }
    return caml_call1(Lwt[4], response);
   }
   function back_end$0(now, lifetime){
    function _o_(_q_, _r_, _s_){return send$0(now, _q_, _r_, _s_);}
    return [0, function(_p_){return load$0(now, lifetime, _p_);}, _o_];
   }
   var
    Cookie =
      [0,
       create$0,
       put$0,
       drop$0,
       invalidate$0,
       operations$0,
       load$0,
       send$0,
       back_end$0],
    _e_ = 0,
    match =
      typed_middleware
       ([0,
         function(param){
          var session = param[2], _k_ = session[1][4];
          function _l_(param){
           var value = param[2], name = param[1];
           return caml_call3(Stdlib_Printf[4], _f_, name, value);
          }
          var
           _m_ = caml_call1(caml_call1(Stdlib_List[20], _l_), _k_),
           _n_ = caml_call1(caml_call1(Stdlib_String[7], cst), _m_);
          return caml_call1
                  (caml_call2(Stdlib_Printf[4], _g_, session[1][2]), _n_);
         }],
        _e_),
    getter = match[2],
    middleware = match[1],
    two_weeks = 1209600.;
   function Make(Pclock){
    function now(param){
     var _i_ = caml_call1(Pclock[1], 0), _j_ = caml_call1(Ptime[2], _i_);
     return caml_call1(Ptime[10], _j_);
    }
    function memory_sessions(opt){
     if(opt) var sth = opt[1], lifetime = sth; else var lifetime = two_weeks;
     return caml_call1(middleware, caml_call2(Memory[8], now, lifetime));
    }
    function cookie_sessions(opt){
     if(opt) var sth = opt[1], lifetime = sth; else var lifetime = two_weeks;
     return caml_call1(middleware, caml_call2(Cookie[8], now, lifetime));
    }
    return [0, now, memory_sessions, cookie_sessions];
   }
   function session(name, request){
    var _h_ = caml_call1(getter, request)[2][1][4];
    return caml_call2(Stdlib_List[50], name, _h_);
   }
   function put_session(name, value, request){
    return caml_call2(caml_call1(getter, request)[1][1], name, value);
   }
   function drop_session_field(request, name){
    return caml_call1(caml_call1(getter, request)[1][2], name);
   }
   function all_session_values(request){
    return caml_call1(getter, request)[2][1][4];
   }
   function invalidate_session(request){
    return caml_call1(caml_call1(getter, request)[1][3], 0);
   }
   function session_id(request){return caml_call1(getter, request)[2][1][1];}
   function session_label(request){
    return caml_call1(getter, request)[2][1][2];
   }
   function session_expires_at(request){
    return caml_call1(getter, request)[2][1][3];
   }
   var
    Dream_server_Session =
      [0,
       log,
       typed_middleware,
       session_cookie,
       symbol,
       new_id,
       new_label,
       version_session_id,
       read_session_id,
       version_session_id,
       read_session_id,
       Memory,
       Cookie,
       middleware,
       getter,
       two_weeks,
       Make,
       session,
       put_session,
       drop_session_field,
       all_session_values,
       invalidate_session,
       session_id,
       session_label,
       session_expires_at];
   runtime.caml_register_global
    (41, Dream_server_Session, "Dream__server__Session");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Csrf
//# unitInfo: Requires: Dream__cipher__Cipher, Dream__server__Log, Dream__server__Session, Dream_pure__Formats, Lwt, Stdlib, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_CSRF_token_could_not_be_ve = "CSRF token could not be verified",
    cst_CSRF_token_expired = "CSRF token expired",
    cst_CSRF_token_not_Base64_enco = "CSRF token not Base64-encoded",
    cst_CSRF_token_not_for_this_se = "CSRF token not for this session",
    cst_CSRF_token_payload_invalid = "CSRF token payload invalid",
    cst_expires_at$0 = "expires_at",
    cst_session$0 = "session",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    field_name = "dream.csrf",
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_cipher_Cipher = global_data.Dream__cipher__Cipher,
    Yojson_Basic = global_data.Yojson__Basic,
    Dream_server_Session = global_data.Dream__server__Session,
    Lwt = global_data.Lwt,
    Dream_server_Log = global_data.Dream__server__Log,
    _e_ =
      [0,
       [11, cst_CSRF_token_not_Base64_enco, 0],
       cst_CSRF_token_not_Base64_enco],
    _d_ =
      [0,
       [11, cst_CSRF_token_could_not_be_ve, 0],
       cst_CSRF_token_could_not_be_ve],
    _a_ =
      [0,
       [11, cst_CSRF_token_payload_invalid, 0],
       cst_CSRF_token_payload_invalid],
    _c_ = [0, [11, cst_CSRF_token_expired, 0], cst_CSRF_token_expired],
    _b_ =
      [0,
       [11, cst_CSRF_token_not_for_this_se, 0],
       cst_CSRF_token_not_for_this_se],
    cst_expires_at = cst_expires_at$0,
    cst_session = cst_session$0,
    default_valid_for = 3600.;
   function csrf_token(now, opt, request){
    if(opt)
     var sth = opt[1], valid_for = sth;
    else
     var valid_for = default_valid_for;
    var
     now$0 = caml_call1(now, 0),
     _w_ =
       [0,
        963043957,
        [0,
         [0,
          cst_session,
          [0, -976970511, caml_call1(Dream_server_Session[23], request)]],
         [0,
          [0, cst_expires_at, [0, 365180284, Math.floor(now$0 + valid_for)]],
          0]]],
     _x_ = caml_call5(Yojson_Basic[1], 0, 0, 0, 0, _w_),
     _y_ =
       caml_call1
        (caml_call2(Dream_cipher_Cipher[7], [0, field_name], request), _x_);
    return caml_call1(Dream_pure_Formats[2], _y_);
   }
   var log = caml_call2(Dream_server_Log[19], 0, field_name);
   function verify_csrf_token(now, request, token){
    var match = caml_call1(Dream_pure_Formats[3], token);
    if(match){
     var
      token$0 = match[1],
      match$0 =
        caml_call3(Dream_cipher_Cipher[8], [0, field_name], request, token$0);
     if(match$0){
      var token$1 = match$0[1];
      a:
      {
       b:
       {
        try{var val = caml_call4(Yojson_Basic[33], 0, 0, 0, token$1);}
        catch(_v_){break b;}
        if(typeof val !== "number" && 963043957 === val[1]){
         var _j_ = val[2];
         if(_j_){
          var _k_ = _j_[1];
          if(! caml_string_notequal(_k_[1], cst_session$0)){
           var _l_ = _k_[2];
           if(typeof _l_ !== "number" && -976970511 === _l_[1]){
            var _m_ = _j_[2];
            if(_m_){
             var _n_ = _m_[1], token_session_label = _l_[2];
             if(! caml_string_notequal(_n_[1], cst_expires_at$0)){
              var expires_at = _n_[2];
              if(typeof expires_at !== "number"){
               var _o_ = expires_at[1];
               if(3654863 !== _o_ && 365180284 !== _o_) break b;
               if(! _m_[2]){
                if(365180284 <= expires_at[1])
                 var n = expires_at[2], expires_at$0 = n;
                else
                 var n$0 = expires_at[2], expires_at$0 = n$0;
                var
                 real_session_label =
                   caml_call1(Dream_server_Session[23], request);
                if
                 (caml_string_notequal
                   (token_session_label, real_session_label)){
                 var
                  _p_ =
                    function(log){return caml_call2(log, [0, request], _b_);};
                 caml_call1(log[2], _p_);
                 var _q_ = 680209124;
                }
                else{
                 var now$0 = caml_call1(now, 0);
                 if(now$0 < expires_at$0)
                  var _r_ = 17724;
                 else{
                  var
                   _s_ =
                     function(log){return caml_call2(log, [0, request], _c_);};
                  caml_call1(log[2], _s_);
                  var _r_ = [0, -222591099, expires_at$0];
                 }
                 var _q_ = _r_;
                }
                var _g_ = _q_;
                break a;
               }
              }
             }
            }
           }
          }
         }
        }
       }
       var _f_ = function(log){return caml_call2(log, [0, request], _a_);};
       caml_call1(log[2], _f_);
       var _g_ = 144245463;
      }
      var _h_ = _g_;
     }
     else{
      var _t_ = function(log){return caml_call2(log, [0, request], _d_);};
      caml_call1(log[2], _t_);
      var _h_ = 144245463;
     }
     var _i_ = _h_;
    }
    else{
     var _u_ = function(log){return caml_call2(log, [0, request], _e_);};
     caml_call1(log[2], _u_);
     var _i_ = 144245463;
    }
    return caml_call1(Lwt[4], _i_);
   }
   var
    Dream_server_Csrf =
      [0, field_name, default_valid_for, csrf_token, log, verify_csrf_token];
   runtime.caml_register_global(18, Dream_server_Csrf, "Dream__server__Csrf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Form
//# unitInfo: Requires: Dream__server__Csrf, Dream__server__Log, Dream_pure__Formats, Dream_pure__Message, Lwt, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_CSRF_token_duplicated = "CSRF token duplicated",
    cst_CSRF_token_missing = "CSRF token missing",
    cst_Content_Type_not_applicati =
      "Content-Type not 'application/x-www-form-urlencoded'",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Lwt = global_data.Lwt,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib_String = global_data.Stdlib__String,
    Dream_server_Csrf = global_data.Dream__server__Csrf,
    Stdlib_List = global_data.Stdlib__List,
    Dream_server_Log = global_data.Dream__server__Log,
    log = caml_call2(Dream_server_Log[19], 0, "dream.form"),
    cst_Content_Type = "Content-Type",
    _c_ =
      [0,
       [11, cst_Content_Type_not_applicati, 0],
       cst_Content_Type_not_applicati],
    _b_ = [0, [11, cst_CSRF_token_missing, 0], cst_CSRF_token_missing],
    _a_ = [0, [11, cst_CSRF_token_duplicated, 0], cst_CSRF_token_duplicated];
   function sort(form){
    function _o_(param, _p_){
     var key = _p_[1], key$0 = param[1];
     return caml_call2(Stdlib_String[10], key$0, key);
    }
    return caml_call2(Stdlib_List[60], _o_, form);
   }
   function sort_and_check_form(now, to_value, form, request){
    function _h_(param){
     var name = param[1];
     return runtime.caml_string_equal(name, Dream_server_Csrf[1]);
    }
    var
     match = caml_call2(Stdlib_List[47], _h_, form),
     form$0 = match[2],
     csrf_token = match[1],
     form$1 = sort(form$0);
    if(! csrf_token){
     var _m_ = function(log){return caml_call2(log, [0, request], _b_);};
     caml_call1(log[2], _m_);
     return caml_call1(Lwt[4], [0, 464415232, form$1]);
    }
    var value = csrf_token[1][2];
    if(csrf_token[2]){
     var _i_ = function(log){return caml_call2(log, [0, request], _a_);};
     caml_call1(log[2], _i_);
     return caml_call1(Lwt[4], [0, -871438822, form$1]);
    }
    function _j_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
    function _k_(param){
     if(typeof param === "number")
      return 144245463 === param
              ? caml_call1(Lwt[4], [0, 685770833, form$1])
              : 680209124
                <= param
                ? caml_call1(Lwt[4], [0, 680209124, form$1])
                : caml_call1(Lwt[4], [0, 17724, form$1]);
     var time = param[2];
     return caml_call1(Lwt[4], [0, -222591099, [0, form$1, time]]);
    }
    function _l_(param){
     var _n_ = caml_call1(to_value, value);
     return caml_call3(Dream_server_Csrf[5], now, request, _n_);
    }
    return caml_call3(Lwt[9], _l_, _k_, _j_);
   }
   function wrong_content_type(request){
    function _g_(log){return caml_call2(log, [0, request], _c_);}
    caml_call1(log[2], _g_);
    return caml_call1(Lwt[4], -63947662);
   }
   function form(opt, now, request){
    if(opt) var sth = opt[1], csrf = sth; else var csrf = 1;
    var match = caml_call2(Dream_pure_Message[9], request, cst_Content_Type);
    if(! match) return wrong_content_type(request);
    var
     content_type = match[1],
     match$0 = caml_call2(Stdlib_String[17], 59, content_type);
    if
     (match$0
      &&
       !
       runtime.caml_string_notequal
        (match$0[1], "application/x-www-form-urlencoded")){
     var
      ppx_lwt_0 = caml_call1(Dream_pure_Message[19], request),
      _d_ =
        function(body){
         var form = caml_call1(Dream_pure_Formats[7], body);
         if(csrf)
          return sort_and_check_form
                  (now, function(string){return string;}, form, request);
         var _f_ = [0, 17724, sort(form)];
         return caml_call1(Lwt[4], _f_);
        },
      _e_ =
        function(exn){
         try{throw caml_maybe_attach_backtrace(exn, 0);}
         catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
        };
     return caml_call3(Lwt[81], _e_, ppx_lwt_0, _d_);
    }
    return wrong_content_type(request);
   }
   var
    Dream_server_Form =
      [0, log, sort, sort_and_check_form, wrong_content_type, form];
   runtime.caml_register_global(13, Dream_server_Form, "Dream__server__Form");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Upload
//# unitInfo: Requires: CamlinternalOO, Dream__server__Form, Dream__server__Log, Dream_pure__Message, Lwt, Lwt_stream, Multipart_form, Multipart_form_lwt, Stdlib, Stdlib__List, Stdlib__Map, Stdlib__Option, Stdlib__Result, Stdlib__String, Unstrctrd
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst$2 = "\r\n",
    cst_Content_Type$1 = "Content-Type",
    cst_End_of_the_part = "End of the part.",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$2,
    message =
      "The request does not have 'Content-Type: multipart/form_data; ...'",
    cst$1 = cst$3,
    cst$0 = cst$2,
    Lwt_stream = global_data.Lwt_stream,
    Lwt = global_data.Lwt,
    Multipart_form = global_data.Multipart_form,
    Stdlib_List = global_data.Stdlib__List,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib = global_data.Stdlib,
    Stdlib_Result = global_data.Stdlib__Result,
    Multipart_form_lwt = global_data.Multipart_form_lwt,
    Stdlib_Option = global_data.Stdlib__Option,
    Dream_server_Form = global_data.Dream__server__Form,
    CamlinternalOO = global_data.CamlinternalOO,
    Unstrctrd = global_data.Unstrctrd,
    Dream_server_Log = global_data.Dream__server__Log,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Map = global_data.Stdlib__Map,
    _d_ = [0, [2, 0, 0], "%s"],
    cst_Content_Type = cst_Content_Type$1,
    cst_Content_Type$0 = cst_Content_Type$1,
    _b_ = [0, [11, cst_End_of_the_part, 0], cst_End_of_the_part],
    _a_ = [0, "dream.multipart"],
    cst_dream_upload = "dream.upload";
   function initial_multipart_state(param){
    return [0, 1, 0, 0, caml_call1(Lwt_stream[12], 0)];
   }
   var multipart_state_field = caml_call3(Dream_pure_Message[39], _a_, 0, 0);
   function multipart_state(request){
    var
     match =
       caml_call2(Dream_pure_Message[40], request, multipart_state_field);
    if(match){var state = match[1]; return state;}
    var state$0 = initial_multipart_state(0);
    caml_call3
     (Dream_pure_Message[41], request, multipart_state_field, state$0);
    return state$0;
   }
   function field_to_string(request, field){
    var field_name = field[1];
    switch(field[2]){
      case 0:
       var v = field[3];
       return [0, field_name, caml_call1(Multipart_form[2][8], v)];
      case 1:
       var v$0 = field[3];
       return [0, field_name, caml_call1(Multipart_form[3][3], v$0)];
      case 2:
       var v$1 = field[3], state = multipart_state(request);
       state[3] = caml_call1(Multipart_form[4][3], v$1);
       state[2] = caml_call1(Multipart_form[4][2], v$1);
       return [0, field_name, caml_call1(Multipart_form[4][8], v$1)];
      default:
       var v$2 = field[3];
       return [0, field_name, caml_call2(Unstrctrd[7], 0, v$2)];
    }
   }
   var log = caml_call2(Dream_server_Log[19], 0, cst_dream_upload);
   function upload_part(request){
    var state = multipart_state(request);
    function _M_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
    function _N_(param){
     if(! param) return Lwt[37];
     var stream = param[1][3];
     function _P_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
     function _Q_(v){
      if(v) return caml_call1(Lwt[4], v);
      function _S_(m){return caml_call2(m, 0, _b_);}
      caml_call1(log[4], _S_);
      var ppx_lwt_0 = caml_call1(Lwt_stream[27], state[4]);
      function _T_(param){return Lwt[37];}
      function _U_(exn){
       try{throw caml_maybe_attach_backtrace(exn, 0);}
       catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
      }
      return caml_call3(Lwt[81], _U_, ppx_lwt_0, _T_);
     }
     function _R_(param){return caml_call1(Lwt_stream[21], stream);}
     return caml_call3(Lwt[9], _R_, _Q_, _P_);
    }
    function _O_(param){return caml_call1(Lwt_stream[19], state[4]);}
    return caml_call3(Lwt[9], _O_, _N_, _M_);
   }
   var _c_ = [0, 0];
   function identify(param){
    if(! _c_[1]){
     var
      _J_ = caml_call1(CamlinternalOO[16], 0),
      _K_ = function(_L_){return caml_call2(CamlinternalOO[24], 0, _J_);};
     caml_call1(CamlinternalOO[17], _J_);
     _c_[1] = _K_;
    }
    return caml_call1(_c_[1], 0);
   }
   function state(request){
    var state = multipart_state(request), stream = state[4];
    function _B_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
    function _C_(param){
     if(param){
      var
       headers = param[1][2],
       _E_ = caml_call1(Multipart_form[6][6], headers),
       _F_ = function(_I_){return field_to_string(request, _I_);},
       headers$0 = caml_call1(caml_call1(Stdlib_List[20], _F_), _E_),
       part = [0, state[2], state[3], headers$0];
      return caml_call1(Lwt[4], [0, part]);
     }
     var ppx_lwt_0 = caml_call1(Lwt_stream[27], stream);
     function _G_(param){return Lwt[37];}
     function _H_(exn){
      try{throw caml_maybe_attach_backtrace(exn, 0);}
      catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
     }
     return caml_call3(Lwt[81], _H_, ppx_lwt_0, _G_);
    }
    function _D_(param){return caml_call1(Lwt_stream[19], stream);}
    return caml_call3(Lwt[9], _D_, _C_, _B_);
   }
   function upload(request){
    var state$0 = multipart_state(request);
    if(! state$0[1]) return state(request);
    var match = caml_call2(Dream_pure_Message[9], request, cst_Content_Type);
    if(match)
     var
      content_type = match[1],
      _s_ = caml_call2(Stdlib[28], content_type, cst),
      _t_ = caml_call1(Multipart_form[2][7], _s_),
      content_type$0 = caml_call1(Stdlib_Result[17], _t_);
    else
     var content_type$0 = 0;
    if(content_type$0){
     var
      content_type$1 = content_type$0[1],
      _u_ =
        function(param){
         var _A_ = caml_call1(Dream_pure_Message[28], request);
         return caml_call1(Dream_pure_Message[23], _A_);
        },
      body = caml_call1(Lwt_stream[1], _u_),
      _v_ =
        caml_call4(Multipart_form_lwt[1], 0, identify, body, content_type$1),
      stream = _v_[2],
      th = _v_[1][2],
      _w_ =
        function(param){
         function _y_(param){return Lwt[36];}
         function _z_(exn){
          try{throw caml_maybe_attach_backtrace(exn, 0);}
          catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
         }
         return caml_call3(Lwt[81], _z_, th, _y_);
        };
     caml_call1(Lwt[11], _w_);
     state$0[4] = stream;
     state$0[1] = 0;
     return state(request);
    }
    function _x_(log){return caml_call3(log, 0, _d_, message);}
    caml_call1(log[1], _x_);
    return caml_call1(Stdlib[2], message);
   }
   var Map = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]);
   function multipart(opt, now, request){
    if(opt) var sth = opt[1], csrf = sth; else var csrf = 1;
    var
     match = caml_call2(Dream_pure_Message[9], request, cst_Content_Type$0);
    if(match)
     var
      content_type = match[1],
      _e_ = caml_call2(Stdlib[28], content_type, cst$0),
      _f_ = caml_call1(Multipart_form[2][7], _e_),
      content_type$0 = caml_call1(Stdlib_Result[17], _f_);
    else
     var content_type$0 = 0;
    if(! content_type$0) return caml_call1(Lwt[4], -63947662);
    var content_type$1 = content_type$0[1];
    function _g_(param){
     var _r_ = caml_call1(Dream_pure_Message[28], request);
     return caml_call1(Dream_pure_Message[23], _r_);
    }
    var body = caml_call1(Lwt_stream[1], _g_);
    function _h_(exn){throw caml_maybe_attach_backtrace(exn, 0);}
    function _i_(param){
     if(0 !== param[0]) return caml_call1(Lwt[4], -63947662);
     var
      match = param[1],
      assoc = match[2],
      tree = match[1],
      tree$0 = caml_call1(Multipart_form[8], tree);
     function fold(acc, param){
      var
       uid = param[2],
       header = param[1],
       contents = caml_call2(Stdlib_List[49], uid, assoc),
       content_disposition = caml_call1(Multipart_form[6][5], header),
       filename =
         caml_call2
          (Stdlib_Option[5], content_disposition, Multipart_form[4][3]),
       match =
         caml_call2
          (Stdlib_Option[5], content_disposition, Multipart_form[4][2]);
      if(! match) return acc;
      var name = match[1], match$0 = caml_call2(Map[18], name, acc);
      if(match$0) var vs = match$0[1], vs$0 = vs; else var vs$0 = 0;
      return caml_call3(Map[2], name, [0, [0, filename, contents], vs$0], acc);
     }
     var
      _k_ = caml_call3(Stdlib_List[26], fold, Map[1], tree$0),
      _l_ = caml_call1(Map[10], _k_);
     function _m_(param){
      var values = param[2], name = param[1];
      if(values){
       var _p_ = values[1], _q_ = _p_[1];
       if
        (_q_
         &&
          !
          caml_string_notequal(_q_[1], cst$3)
          && ! caml_string_notequal(_p_[2], cst$3) && ! values[2])
        return [0, name, 0];
      }
      return [0, name, caml_call1(Stdlib_List[10], values)];
     }
     var parts = caml_call1(caml_call1(Stdlib_List[20], _m_), _l_);
     if(csrf){
      var
       _n_ =
         function(param){
          if(param){
           var _o_ = param[1];
           if(! _o_[1] && ! param[2]){var value = _o_[2]; return value;}
          }
          return cst$1;
         };
      return caml_call4(Dream_server_Form[3], now, _n_, parts, request);
     }
     var form = caml_call1(Dream_server_Form[2], parts);
     return caml_call1(Lwt[4], [0, 17724, form]);
    }
    function _j_(param){
     return caml_call2(Multipart_form_lwt[2], body, content_type$1);
    }
    return caml_call3(Lwt[9], _j_, _i_, _h_);
   }
   var
    Dream_server_Upload =
      [0,
       initial_multipart_state,
       multipart_state_field,
       multipart_state,
       field_to_string,
       log,
       upload_part,
       identify,
       state,
       upload,
       Map,
       multipart];
   runtime.caml_register_global
    (27, Dream_server_Upload, "Dream__server__Upload");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Tag
//# unitInfo: Requires: Dream__server__Csrf, Dream_pure, Dream_pure__Formats, Stdlib__Buffer, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_s = "%s";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = '">\n',
    Dream_server_Csrf = global_data.Dream__server__Csrf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    html_escape = Dream_pure_Formats[1],
    to_base64url = Dream_pure_Formats[2],
    from_base64url = Dream_pure_Formats[3],
    to_percent_encoded = Dream_pure_Formats[4],
    from_percent_encoded = Dream_pure_Formats[5],
    to_form_urlencoded = Dream_pure_Formats[6],
    from_form_urlencoded = Dream_pure_Formats[7],
    from_cookie = Dream_pure_Formats[8],
    split_target = Dream_pure_Formats[9],
    from_path = Dream_pure_Formats[10],
    to_path = Dream_pure_Formats[11],
    drop_trailing_slash = Dream_pure_Formats[12],
    text_html = Dream_pure_Formats[13],
    application_json = Dream_pure_Formats[14],
    to_set_cookie = Dream_pure_Formats[15],
    Dream =
      [0,
       html_escape,
       to_base64url,
       from_base64url,
       to_percent_encoded,
       from_percent_encoded,
       to_form_urlencoded,
       from_form_urlencoded,
       from_cookie,
       split_target,
       from_path,
       to_path,
       drop_trailing_slash,
       text_html,
       application_json,
       to_set_cookie],
    cst_input_name = '<input name="',
    _a_ = [0, [2, 0, 0], cst_s],
    cst_type_hidden_value = '" type="hidden" value="',
    _b_ = [0, [2, 0, 0], cst_s];
   function csrf_tag(now, request){
    var
     token = caml_call3(Dream_server_Csrf[3], now, 0, request),
     eml_buffer = caml_call1(Stdlib_Buffer[1], 4096);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_input_name);
    caml_call3(Stdlib_Printf[5], eml_buffer, _a_, Dream_server_Csrf[1]);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_type_hidden_value);
    caml_call3(Stdlib_Printf[5], eml_buffer, _b_, token);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst);
    return caml_call1(Stdlib_Buffer[2], eml_buffer);
   }
   var Dream_server_Tag = [0, Dream, csrf_tag];
   runtime.caml_register_global(9, Dream_server_Tag, "Dream__server__Tag");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Site_prefix
//# unitInfo: Requires: Dream__server__Router, Dream_pure__Formats, Dream_pure__Message, Dream_pure__Stream, Lwt, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_server_Router = global_data.Dream__server__Router,
    Stdlib_List = global_data.Stdlib__List,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Lwt = global_data.Lwt,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    _a_ = [0, 339662858];
   function match_site_prefix(prefix, path){
    var prefix$0 = prefix, path$0 = path;
    for(;;){
     if(! prefix$0) return [0, path$0];
     if(! path$0) return 0;
     var
      path$1 = path$0[2],
      path_crumb = path$0[1],
      prefix$1 = prefix$0[2],
      prefix_crumb = prefix$0[1];
     if(! runtime.caml_equal(path_crumb, prefix_crumb)) return 0;
     var prefix$0 = prefix$1, path$0 = path$1;
    }
   }
   function with_site_prefix(prefix){
    var
     _b_ = caml_call1(Dream_pure_Formats[10], prefix),
     prefix$0 = caml_call1(Dream_pure_Formats[12], _b_);
    return function(next_handler, request){
     var
      match =
        match_site_prefix
         (prefix$0, caml_call1(Dream_server_Router[15], request));
     if(match){
      var path = match[1], _c_ = caml_call1(Stdlib_List[10], prefix$0);
      caml_call2(Dream_server_Router[18], request, _c_);
      caml_call2(Dream_server_Router[17], request, path);
      return caml_call1(next_handler, request);
     }
     var
      _d_ =
        caml_call5
         (Dream_pure_Message[6],
          _a_,
          0,
          0,
          Dream_pure_Stream[8],
          Dream_pure_Stream[7]);
     return caml_call1(Lwt[4], _d_);};
   }
   var Dream_server_Site_prefix = [0, match_site_prefix, with_site_prefix];
   runtime.caml_register_global
    (7, Dream_server_Site_prefix, "Dream__server__Site_prefix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Query
//# unitInfo: Requires: Dream_pure__Formats, Dream_pure__Message, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_pure_Formats = global_data.Dream_pure__Formats;
   function all_queries(request){
    var
     _f_ = caml_call1(Dream_pure_Message[3], request),
     _g_ = caml_call1(Dream_pure_Formats[9], _f_)[2];
    return caml_call1(Dream_pure_Formats[7], _g_);
   }
   function query(request, name){
    var _e_ = all_queries(request);
    return caml_call2(Stdlib_List[50], name, _e_);
   }
   function queries(request, name){
    var _a_ = all_queries(request), _b_ = 0;
    function _c_(accumulator, param){
     var value = param[2], name$0 = param[1];
     return runtime.caml_string_equal(name$0, name)
             ? [0, value, accumulator]
             : accumulator;
    }
    var _d_ = caml_call1(caml_call2(Stdlib_List[26], _c_, _b_), _a_);
    return caml_call1(Stdlib_List[10], _d_);
   }
   var Dream_server_Query = [0, all_queries, query, queries];
   runtime.caml_register_global(3, Dream_server_Query, "Dream__server__Query");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Origin_referrer_check
//# unitInfo: Requires: Dream__server__Helpers, Dream__server__Log, Dream_pure__Message, Dream_pure__Stream, Lwt, Stdlib, Stdlib__String, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Host_header_missing = "Host header missing",
    cst_Origin_and_Referer_headers = "Origin and Referer headers both missing",
    caml_equal = runtime.caml_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_pure_Message = global_data.Dream_pure__Message,
    Uri = global_data.Uri,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Lwt = global_data.Lwt,
    Dream_server_Log = global_data.Dream__server__Log,
    log = caml_call2(Dream_server_Log[19], 0, "dream.origin"),
    _e_ =
      [0,
       [11, cst_Origin_and_Referer_headers, 0],
       cst_Origin_and_Referer_headers],
    _c_ = [0, [11, cst_Host_header_missing, 0], cst_Host_header_missing],
    _a_ =
      [0,
       [11,
        "Origin-Host mismatch: '",
        [2, 0, [11, "' vs. '", [2, 0, [12, 39, 0]]]]],
       "Origin-Host mismatch: '%s' vs. '%s'"],
    cst_Origin = "Origin",
    cst_Referer = "Referer",
    cst_Host = "Host",
    _b_ = [0, -949323947],
    _d_ = [0, -949323947],
    _f_ = [0, -949323947];
   function origin_referrer_check(inner_handler, request){
    var match = caml_call1(Dream_pure_Message[2], request);
    a:
    if(typeof match === "number"){
     if(3546230 !== match && 801894688 !== match) break a;
     return caml_call1(inner_handler, request);
    }
    var origin = caml_call2(Dream_pure_Message[9], request, cst_Origin);
    a:
    {
     if(origin && caml_string_notequal(origin[1], "null")){var origin$0 = origin; break a;}
     var origin$0 = caml_call2(Dream_pure_Message[9], request, cst_Referer);
    }
    if(! origin$0){
     var _n_ = function(log){return caml_call2(log, [0, request], _e_);};
     caml_call1(log[2], _n_);
     var
      _o_ =
        caml_call5
         (Dream_pure_Message[6],
          _f_,
          0,
          0,
          Dream_pure_Stream[8],
          Dream_pure_Stream[7]);
     return caml_call1(Lwt[4], _o_);
    }
    var
     origin$1 = origin$0[1],
     match$0 = caml_call2(Dream_pure_Message[9], request, cst_Host);
    if(! match$0){
     var _l_ = function(log){return caml_call2(log, [0, request], _c_);};
     caml_call1(log[2], _l_);
     var
      _m_ =
        caml_call5
         (Dream_pure_Message[6],
          _d_,
          0,
          0,
          Dream_pure_Stream[8],
          Dream_pure_Stream[7]);
     return caml_call1(Lwt[4], _m_);
    }
    var
     host = match$0[1],
     origin_uri = caml_call1(Uri[7], origin$1),
     match$1 = caml_call1(Uri[29], origin_uri);
    a:
    {
     b:
     if(match$1){
      var _g_ = match$1[1];
      if(caml_string_notequal(_g_, "http")){
       if(caml_string_notequal(_g_, "https")) break b;
       var _k_ = caml_call1(Dream_server_Helpers[5], request);
      }
      else
       var _k_ = 1 - caml_call1(Dream_server_Helpers[5], request);
      var schemes_match = _k_;
      break a;
     }
     var schemes_match = 0;
    }
    var match$2 = caml_call2(Stdlib_String[17], 58, host);
    a:
    {
     if(match$2){
      var _h_ = match$2[2];
      if(_h_ && ! _h_[2]){
       var
        port$0 = _h_[1],
        host$0 = match$2[1],
        host_port = [0, port$0],
        host_host$0 = [0, host$0];
       break a;
      }
     }
     var host_host = [0, host], host_port = 0, host_host$0 = host_host;
    }
    var match$3 = caml_call1(Uri[39], origin_uri);
    if(match$3)
     var port = match$3[1], origin_port = [0, caml_call1(Stdlib[33], port)];
    else
     var origin_port = 0;
    var
     hosts_match = caml_equal(caml_call1(Uri[36], origin_uri), host_host$0),
     ports_match = caml_equal(origin_port, host_port);
    if(schemes_match && hosts_match && ports_match)
     return caml_call1(inner_handler, request);
    function _i_(log){
     return caml_call4(log, [0, request], _a_, origin$1, host);
    }
    caml_call1(log[2], _i_);
    var
     _j_ =
       caml_call5
        (Dream_pure_Message[6],
         _b_,
         0,
         0,
         Dream_pure_Stream[8],
         Dream_pure_Stream[7]);
    return caml_call1(Lwt[4], _j_);
   }
   var Dream_server_Origin_referrer_c = [0, log, origin_referrer_check];
   runtime.caml_register_global
    (21,
     Dream_server_Origin_referrer_c,
     "Dream__server__Origin_referrer_check");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Livereload
//# unitInfo: Requires: Dream__server__Helpers, Dream_pure__Message, Lwt, Markup, Soup, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_livereload = "/_livereload",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    route = cst_livereload,
    Markup = global_data.Markup,
    Soup = global_data.Soup,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Lwt = global_data.Lwt,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Stdlib_Printf = global_data.Stdlib__Printf,
    script =
      caml_call3
       (Stdlib_Printf[4],
        [0,
         [11,
          '\nvar socketUrl = "ws://" + location.host + "',
          [2,
           0,
           [11,
            '";\nvar s = new WebSocket(socketUrl);\n\ns.onopen = function(even) {\n  console.debug("Live reload: WebSocket connection open");\n};\n\ns.onclose = function(even) {\n  console.debug("Live reload: WebSocket connection closed");\n\n  var retryIntervalMs = ',
            [4,
             3,
             0,
             0,
             [11,
              ';\n\n  function reload() {\n    s2 = new WebSocket(socketUrl);\n\n    s2.onerror = function(event) {\n      setTimeout(reload, retryIntervalMs);\n    };\n\n    s2.onopen = function(event) {\n      location.reload();\n    };\n  };\n\n  reload();\n};\n\ns.onerror = function(event) {\n  console.debug("Live reload: WebSocket error:", event);\n};\n',
              0]]]]],
         '\nvar socketUrl = "ws://" + location.host + "%s";\nvar s = new WebSocket(socketUrl);\n\ns.onopen = function(even) {\n  console.debug("Live reload: WebSocket connection open");\n};\n\ns.onclose = function(even) {\n  console.debug("Live reload: WebSocket connection closed");\n\n  var retryIntervalMs = %i;\n\n  function reload() {\n    s2 = new WebSocket(socketUrl);\n\n    s2.onerror = function(event) {\n      setTimeout(reload, retryIntervalMs);\n    };\n\n    s2.onopen = function(event) {\n      location.reload();\n    };\n  };\n\n  reload();\n};\n\ns.onerror = function(event) {\n  console.debug("Live reload: WebSocket error:", event);\n};\n'],
        route,
        500),
    _a_ = [0, -188437701],
    cst_head = "head",
    cst_script = "script",
    cst_Content_Type = "Content-Type",
    retry_interval_ms = 500;
   function livereload(next_handler, request){
    var target = caml_call1(Dream_pure_Message[3], request);
    if(runtime.caml_string_equal(target, cst_livereload)){
     var
      _b_ =
        function(socket){
         var ppx_lwt_0 = caml_call1(Dream_server_Helpers[18], socket);
         function _m_(param){
          return caml_call2(Dream_pure_Message[33], 0, socket);
         }
         function _n_(exn){
          try{throw caml_maybe_attach_backtrace(exn, 0);}
          catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
         }
         return caml_call3(Lwt[81], _n_, ppx_lwt_0, _m_);
        };
     return caml_call3(Dream_server_Helpers[17], 0, 0, _b_);
    }
    var ppx_lwt_0 = caml_call1(next_handler, request);
    function _c_(response){
     var
      match = caml_call2(Dream_pure_Message[9], response, cst_Content_Type);
     a:
     if(match){
      var _e_ = match[1];
      if
       (caml_string_notequal(_e_, "text/html")
        && caml_string_notequal(_e_, "text/html; charset=utf-8"))
       break a;
      var
       ppx_lwt_0 = caml_call1(Dream_pure_Message[19], response),
       _f_ =
         function(body){
          var
           _h_ = caml_call1(Markup[10], body),
           _i_ = caml_call1(caml_call3(Markup[8], 0, 0, _a_), _h_),
           _j_ = caml_call1(Markup[4], _i_),
           soup = caml_call1(Soup[63], _j_),
           match = caml_call2(Soup[8][2], soup, cst_head);
          if(! match) return caml_call1(Lwt[4], response);
          var
           head = match[1],
           _k_ = caml_call6(Soup[66], 0, 0, 0, 0, [0, script], cst_script);
          caml_call1(caml_call1(Soup[69], head), _k_);
          var _l_ = caml_call1(Soup[60], soup);
          caml_call1(caml_call1(Dream_pure_Message[20], response), _l_);
          return caml_call1(Lwt[4], response);
         },
       _g_ =
         function(exn){
          try{throw caml_maybe_attach_backtrace(exn, 0);}
          catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
         };
      return caml_call3(Lwt[81], _g_, ppx_lwt_0, _f_);
     }
     return caml_call1(Lwt[4], response);
    }
    function _d_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _d_, ppx_lwt_0, _c_);
   }
   var
    Dream_server_Livereload =
      [0, route, retry_interval_ms, script, livereload];
   runtime.caml_register_global
    (14, Dream_server_Livereload, "Dream__server__Livereload");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Flash
//# unitInfo: Requires: Dream__server__Cookie, Dream__server__Log, Dream_pure__Message, Lwt, Stdlib, Stdlib__List, Stdlib__Option, Stdlib__String, Yojson__Basic
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s",
    cst_dream_flash = "dream.flash",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "",
    cst = ": ",
    cst$0 = ", ",
    message = "Missing flash message middleware",
    flash_cookie = cst_dream_flash,
    Stdlib_List = global_data.Stdlib__List,
    Dream_server_Cookie = global_data.Dream__server__Cookie,
    Yojson_Basic = global_data.Yojson__Basic,
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Stdlib_Option = global_data.Stdlib__Option,
    Dream_server_Log = global_data.Dream__server__Log,
    log = caml_call2(Dream_server_Log[19], 0, cst_dream_flash),
    storage_field =
      caml_call3(Dream_pure_Message[39], [0, cst_dream_flash], 0, 0),
    symbol = Stdlib_Option[5],
    _d_ =
      [0,
       [11,
        "Flash messages exceed soft size limit (",
        [4, 0, 0, 0, [11, " bytes)", 0]]],
       "Flash messages exceed soft size limit (%d bytes)"],
    _e_ = [0, 0.],
    _b_ = [0, [11, "Flash messages: ", [2, 0, 0]], "Flash messages: %s"],
    cst_No_flash_messages = "No flash messages.",
    _c_ = [0, [2, 0, 0], cst_s],
    _a_ = [0, [2, 0, 0], cst_s],
    cst_Bad_flash_message_content = "Bad flash message content",
    five_minutes = 300.,
    content_byte_size_limit = 3072;
   function flash(request){
    function group(x){
     if(x){
      var match = x[2];
      if(match){
       var rest = match[2], x2 = match[1], x1 = x[1];
       return [0, [0, x1, x2], group(rest)];
      }
     }
     return 0;
    }
    function unpack(u){
     if(typeof u !== "number" && -976970511 === u[1]){var x = u[2]; return x;}
     return caml_call1(Stdlib[2], cst_Bad_flash_message_content);
    }
    function _q_(value){
     var match = caml_call4(Yojson_Basic[33], 0, 0, 0, value);
     if(typeof match !== "number" && 848054398 === match[1]){
      var y = match[2];
      return [0, group(caml_call2(Stdlib_List[20], unpack, y))];
     }
     return 0;
    }
    var
     x =
       caml_call2
        (symbol,
         caml_call7
          (Dream_server_Cookie[3], 0, 0, 0, 0, 0, request, flash_cookie),
         _q_);
    return caml_call2(Stdlib_Option[3], x, 0);
   }
   function put_flash(request, category, message$0){
    var match = caml_call2(Dream_pure_Message[40], request, storage_field);
    if(match)
     var outbox = match[1], outbox$0 = outbox;
    else{
     var
      _p_ = function(log){return caml_call3(log, [0, request], _a_, message);};
     caml_call1(log[1], _p_);
     var outbox$0 = caml_call1(Stdlib[2], message);
    }
    outbox$0[1] = [0, [0, category, message$0], outbox$0[1]];
    return 0;
   }
   function flash_messages(inner_handler, request){
    function _f_(log){
     var _l_ = flash(request);
     function _m_(param){
      var q = param[2], p = param[1], _o_ = caml_call2(Stdlib[28], cst, q);
      return caml_call2(Stdlib[28], p, _o_);
     }
     var
      _n_ = caml_call1(caml_call1(Stdlib_List[20], _m_), _l_),
      current = caml_call1(caml_call1(Stdlib_String[7], cst$0), _n_);
     return 0 < caml_ml_string_length(current)
             ? caml_call3(log, [0, request], _b_, current)
             : caml_call3(log, [0, request], _c_, cst_No_flash_messages);
    }
    caml_call1(log[4], _f_);
    var outbox = [0, 0];
    caml_call3(Dream_pure_Message[41], request, storage_field, outbox);
    var
     existing =
       caml_call7
        (Dream_server_Cookie[3], 0, 0, 0, 0, 0, request, flash_cookie),
     ppx_lwt_0 = caml_call1(inner_handler, request);
    function _g_(response){
     var entries = caml_call1(Stdlib_List[10], outbox[1]);
     a:
     {
      if(existing){
       if(! entries){
        caml_call13
         (Dream_server_Cookie[4],
          0,
          0,
          _e_,
          0,
          0,
          0,
          0,
          0,
          0,
          response,
          request,
          flash_cookie,
          cst$1);
        break a;
       }
      }
      else if(! entries) break a;
      var
       _i_ = 0,
       _j_ =
         function(param, a){
          var y = param[2], x = param[1];
          return [0, [0, -976970511, x], [0, [0, -976970511, y], a]];
         },
       content = caml_call3(Stdlib_List[27], _j_, entries, _i_),
       value =
         caml_call5(Yojson_Basic[1], 0, 0, 0, 0, [0, 848054398, content]);
      if(3072 <= caml_ml_string_length(value)){
       var
        _k_ =
          function(log){
           return caml_call3(log, [0, request], _d_, content_byte_size_limit);
          };
       caml_call1(log[2], _k_);
      }
      caml_call13
       (Dream_server_Cookie[4],
        0,
        0,
        0,
        [0, five_minutes],
        0,
        0,
        0,
        0,
        0,
        response,
        request,
        flash_cookie,
        value);
     }
     return caml_call1(Lwt[4], response);
    }
    function _h_(exn){
     try{throw caml_maybe_attach_backtrace(exn, 0);}
     catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
    }
    return caml_call3(Lwt[81], _h_, ppx_lwt_0, _g_);
   }
   var
    Dream_server_Flash =
      [0,
       log,
       five_minutes,
       storage_field,
       flash_cookie,
       content_byte_size_limit,
       symbol,
       flash,
       put_flash,
       flash_messages];
   runtime.caml_register_global
    (25, Dream_server_Flash, "Dream__server__Flash");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Error_template
//# unitInfo: Requires: Dream_pure, Dream_pure__Formats, Stdlib__Buffer, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = " ",
    cst_i = "%i",
    cst_s = "%s";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    html_escape = Dream_pure_Formats[1],
    to_base64url = Dream_pure_Formats[2],
    from_base64url = Dream_pure_Formats[3],
    to_percent_encoded = Dream_pure_Formats[4],
    from_percent_encoded = Dream_pure_Formats[5],
    to_form_urlencoded = Dream_pure_Formats[6],
    from_form_urlencoded = Dream_pure_Formats[7],
    from_cookie = Dream_pure_Formats[8],
    split_target = Dream_pure_Formats[9],
    from_path = Dream_pure_Formats[10],
    to_path = Dream_pure_Formats[11],
    drop_trailing_slash = Dream_pure_Formats[12],
    text_html = Dream_pure_Formats[13],
    application_json = Dream_pure_Formats[14],
    to_set_cookie = Dream_pure_Formats[15],
    Dream =
      [0,
       html_escape,
       to_base64url,
       from_base64url,
       to_percent_encoded,
       from_percent_encoded,
       to_form_urlencoded,
       from_form_urlencoded,
       from_cookie,
       split_target,
       from_path,
       to_path,
       drop_trailing_slash,
       text_html,
       application_json,
       to_set_cookie],
    cst_DOCTYPE_html_html_lang_en_ =
      '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />\n    <style>\n\n    body {\n      color: rgb(17, 24, 39);\n      font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif;\n      margin: 3rem 2rem;\n    }\n\n    h1 {\n      font-weight: 600;\n      margin: 0;\n    }\n\n    h2 {\n      font-weight: normal;\n    }\n\n    h3 {\n      font-size: 16px;\n      font-weight: normal;\n      border: 1px solid #ddd;\n      margin: 0;\n      padding: 1rem 1.5rem;\n    }\n\n    pre {\n      background-color: rgb(31, 41, 55);\n      color: white;\n      font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\n      font-size: 16px;\n      line-height: 1.5;\n      margin: 0;\n      padding: 1rem;\n    }\n\n    <\/style>\n    <title>',
    _a_ = [0, [4, 3, 0, 0, 0], cst_i],
    _b_ = [0, [2, 0, 0], cst_s],
    cst_title_head_body_h1_An_erro =
      "<\/title>\n  <\/head>\n\n  <body>\n    <h1>An error occured!<\/h1>\n    <h2>",
    _c_ = [0, [4, 3, 0, 0, 0], cst_i],
    _d_ = [0, [2, 0, 0], cst_s],
    cst_h2_p_This_error_page_has_b =
      "<\/h2>\n    <p>\n      This error page has been generated by Dream's error handler.<br />\n      Remember to turn debugging mode off when deploying your application in\n      production.\n    <\/p>\n    <h3>Debug Dump<\/h3>\n    <pre><code>",
    _e_ = [0, [2, 0, 0], cst_s],
    cst_code_pre_body_html = "<\/code><\/pre>\n  <\/body>\n<\/html>\n";
   function render(debug_dump, code, reason){
    var eml_buffer = caml_call1(Stdlib_Buffer[1], 4096);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_DOCTYPE_html_html_lang_en_);
    caml_call3(Stdlib_Printf[5], eml_buffer, _a_, code);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst);
    var _f_ = caml_call1(Dream[1], reason);
    caml_call3(Stdlib_Printf[5], eml_buffer, _b_, _f_);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_title_head_body_h1_An_erro);
    caml_call3(Stdlib_Printf[5], eml_buffer, _c_, code);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst$0);
    var _g_ = caml_call1(Dream[1], reason);
    caml_call3(Stdlib_Printf[5], eml_buffer, _d_, _g_);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_h2_p_This_error_page_has_b);
    var _h_ = caml_call1(Dream[1], debug_dump);
    caml_call3(Stdlib_Printf[5], eml_buffer, _e_, _h_);
    caml_call2(Stdlib_Buffer[16], eml_buffer, cst_code_pre_body_html);
    return caml_call1(Stdlib_Buffer[2], eml_buffer);
   }
   var Dream_server_Error_template = [0, Dream, render];
   runtime.caml_register_global
    (14, Dream_server_Error_template, "Dream__server__Error_template");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Echo
//# unitInfo: Requires: Dream_pure__Message, Dream_pure__Stream, Lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Lwt = global_data.Lwt;
   function echo(request){
    var
     _a_ = Dream_pure_Stream[7],
     _b_ = caml_call1(Dream_pure_Message[28], request),
     _c_ = caml_call5(Dream_pure_Message[6], 0, 0, 0, _b_, _a_);
    return caml_call1(Lwt[4], _c_);
   }
   var Dream_server_Echo = [0, echo];
   runtime.caml_register_global(3, Dream_server_Echo, "Dream__server__Echo");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream__server__Catch
//# unitInfo: Requires: Dream__server__Helpers, Dream_pure__Message, Dream_pure__Status, Lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Lwt = global_data.Lwt;
   function catch$0(error_handler, next_handler, request){
    function _a_(exn){
     var
      error =
        [0,
         [0, 3458171, exn],
         3257473,
         583778019,
         [0, request],
         0,
         [0, caml_call1(Dream_server_Helpers[2], request)],
         106380200,
         1];
     return caml_call1(error_handler, error);
    }
    function _b_(response){
     var status = caml_call1(Dream_pure_Message[7], response);
     if
      (!
       caml_call1(Dream_pure_Status[4], status)
       && ! caml_call1(Dream_pure_Status[5], status))
      return caml_call1(Lwt[4], response);
     if(caml_call1(Dream_pure_Status[4], status))
      var severity = -685964740, caused_by = 1055145579;
     else
      var severity = 106380200, caused_by = 583778019;
     var
      error =
        [0,
         [0, -71406943, response],
         3257473,
         caused_by,
         [0, request],
         [0, response],
         [0, caml_call1(Dream_server_Helpers[2], request)],
         severity,
         1];
     return caml_call1(error_handler, error);
    }
    function _c_(param){return caml_call1(next_handler, request);}
    return caml_call3(Lwt[9], _c_, _b_, _a_);
   }
   var Dream_server_Catch = [0, catch$0];
   runtime.caml_register_global(4, Dream_server_Catch, "Dream__server__Catch");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
