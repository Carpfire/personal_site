// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_command__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_command = [0],
    Async_command$0 = [0, Async_command];
   runtime.caml_register_global(0, Async_command$0, "Async_command__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_command__Import
//# unitInfo: Requires: Async_kernel, Async_unix, Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_command_Import = "Async_command__Import",
    cst_async_command = "async_command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Async_kernel = global_data.Async_kernel,
    Async_unix = global_data.Async_unix;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_command_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_command);
   caml_call1(Ppx_expect_runtime[1][1], "async_command/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_command, "import.ml");
   var
    _a_ = Core_Int[96],
    symbol = _a_[1],
    symbol$0 = _a_[2],
    symbol$1 = _a_[3],
    symbol$2 = _a_[4],
    symbol$3 = _a_[5],
    symbol$4 = _a_[6],
    equal = _a_[7],
    compare = _a_[8],
    min = _a_[9],
    max = _a_[10],
    catch$0 = Async_kernel[3],
    choice = Async_kernel[4],
    choose = Async_kernel[5],
    don_t_wait_for = Async_kernel[6],
    never = Async_kernel[8],
    try_with = Async_kernel[11],
    upon = Async_kernel[12],
    with_timeout_exn = Async_kernel[14],
    symbol$5 = Async_kernel[17],
    symbol$6 = Async_kernel[18],
    symbol$7 = Async_kernel[19],
    return$0 = Async_kernel[20],
    symbol_bind = Async_kernel[21],
    symbol_map = Async_kernel[22],
    Let_syntax = Async_kernel[23],
    Async_kernel_private = Async_kernel[24],
    Unix = Async_unix[1],
    after = Async_unix[2],
    at = Async_unix[3],
    every = Async_unix[4],
    with_timeout = Async_unix[5],
    schedule = Async_unix[6],
    schedule$0 = Async_unix[7],
    shutdown = Async_unix[8],
    within = Async_unix[9],
    within$0 = Async_unix[10],
    Printf = Async_unix[11],
    Overwrite = Async_unix[12],
    close_in_noerr = Async_unix[13],
    close_in = Async_unix[14],
    close_out_noerr = Async_unix[15],
    close_out = Async_unix[16],
    eprintf = Async_unix[17],
    flush_all = Async_unix[18],
    flush = Async_unix[19],
    fprintf = Async_unix[20],
    ifprintf = Async_unix[21],
    in_channel_length = Async_unix[22],
    input_binary_int = Async_unix[23],
    input_byte = Async_unix[24],
    input_char = Async_unix[25],
    input_line = Async_unix[26],
    input_lines = Async_unix[27],
    input = Async_unix[28],
    input_value = Async_unix[29],
    open_in_bin = Async_unix[30],
    open_in_gen = Async_unix[31],
    open_in = Async_unix[32],
    open_out_bin = Async_unix[33],
    open_out_gen = Async_unix[34],
    open_out = Async_unix[35],
    out_channel_length = Async_unix[36],
    output_binary_int = Async_unix[37],
    output_byte = Async_unix[38],
    output_char = Async_unix[39],
    output = Async_unix[40],
    output_string = Async_unix[41],
    output_value = Async_unix[42],
    pos_in = Async_unix[43],
    pos_out = Async_unix[44],
    prerr_char = Async_unix[45],
    prerr_endline = Async_unix[46],
    prerr_float = Async_unix[47],
    prerr_int = Async_unix[48],
    prerr_newline = Async_unix[49],
    prerr_string = Async_unix[50],
    print_char = Async_unix[51],
    print_endline = Async_unix[52],
    print_float = Async_unix[53],
    printf = Async_unix[54],
    print_int = Async_unix[55],
    print_newline = Async_unix[56],
    print_s = Async_unix[57],
    print_string = Async_unix[58],
    read_float = Async_unix[59],
    read_int = Async_unix[60],
    read_line = Async_unix[61],
    read_lines = Async_unix[62],
    read_wrap = Async_unix[63],
    really_input = Async_unix[64],
    seek_in = Async_unix[65],
    seek_out = Async_unix[66],
    set_binary_mode_in = Async_unix[67],
    set_binary_mode_out = Async_unix[68],
    write_lines = Async_unix[69],
    write_wrap = Async_unix[70],
    eprint_s = Async_unix[71],
    eprint_s_nonblocking = Async_unix[72],
    LargeFile = Async_unix[73],
    Sexp = Async_unix[74],
    exit = Async_unix[75],
    Async_unix_private = Async_unix[76];
   caml_call1(Ppx_inline_test_lib[7], cst_async_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_command_Import);
   var
    Async_command_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       never,
       try_with,
       upon,
       with_timeout_exn,
       symbol$5,
       symbol$6,
       symbol$7,
       return$0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Async_kernel_private,
       Unix,
       after,
       at,
       every,
       with_timeout,
       schedule,
       schedule$0,
       shutdown,
       within,
       within$0,
       Printf,
       Overwrite,
       close_in_noerr,
       close_in,
       close_out_noerr,
       close_out,
       eprintf,
       flush_all,
       flush,
       fprintf,
       ifprintf,
       in_channel_length,
       input_binary_int,
       input_byte,
       input_char,
       input_line,
       input_lines,
       input,
       input_value,
       open_in_bin,
       open_in_gen,
       open_in,
       open_out_bin,
       open_out_gen,
       open_out,
       out_channel_length,
       output_binary_int,
       output_byte,
       output_char,
       output,
       output_string,
       output_value,
       pos_in,
       pos_out,
       prerr_char,
       prerr_endline,
       prerr_float,
       prerr_int,
       prerr_newline,
       prerr_string,
       print_char,
       print_endline,
       print_float,
       printf,
       print_int,
       print_newline,
       print_s,
       print_string,
       read_float,
       read_int,
       read_line,
       read_lines,
       read_wrap,
       really_input,
       seek_in,
       seek_out,
       set_binary_mode_in,
       set_binary_mode_out,
       write_lines,
       write_wrap,
       eprint_s,
       eprint_s_nonblocking,
       LargeFile,
       Sexp,
       exit,
       Async_unix_private];
   runtime.caml_register_global
    (14, Async_command_Import, cst_Async_command_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_command
//# unitInfo: Requires: Async_command__Import, Async_kernel__Deferred, Async_kernel__Deferred_list, Async_kernel__Deferred_or_error, Async_kernel__Monitor, Async_unix__Scheduler, Async_unix__Shutdown, Async_unix__Writer, Base__Exn, Command_unix, Core, Core__Command_internal, Core__Error, Core__Or_error, Core__Set_once, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_command$0 = "Async_command",
    cst_async_command$0 = "async_command",
    cst_async_command_src_async_co = "async_command/src/async_command.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Command_unix = global_data.Command_unix,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Set_once = global_data.Core__Set_once,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_command_Import = global_data.Async_command__Import,
    Async_unix_Writer = global_data.Async_unix__Writer,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Async_unix_Shutdown = global_data.Async_unix__Shutdown,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_unix_Scheduler = global_data.Async_unix__Scheduler,
    Core_Error = global_data.Core__Error,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Command_internal = global_data.Core__Command_internal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_command$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_command$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_async_command_src_async_co);
   caml_call2(Ppx_inline_test_lib[6], cst_async_command$0, "async_command.ml");
   var
    basic_spec = Core_Command_internal[4],
    basic = Core_Command_internal[5],
    basic_or_error = Core_Command_internal[6],
    group = Core_Command_internal[7],
    lazy_group = Core_Command_internal[8],
    exec = Core_Command_internal[9],
    of_lazy = Core_Command_internal[10],
    summary = Core_Command_internal[11],
    exit = Core_Command_internal[12],
    run = Core_Command_internal[15],
    shape = Core_Command_internal[17],
    Param = Core_Command_internal[20],
    Spec = Core_Command_internal[21],
    _f_ = [0, 0],
    cst_cannot_nest_recursive_comm =
      "cannot nest recursive command invocations during parsing",
    _g_ = [0, 0],
    _a_ = [0, cst_async_command_src_async_co, 59, 2556, 2591],
    _b_ = [0, 3804260],
    _c_ = [0, 523273847],
    cst_async_command = cst_async_command$0,
    cst_Async_command = cst_Async_command$0;
   function shutdown_with_error(e){
    function _N_(param){
     var _O_ = caml_call1(Core_Error[12], e);
     return caml_call1(Core[39], _O_);
    }
    caml_call1(Stdlib[100], _N_);
    return caml_call2(Async_command_Import[34], 0, 1);
   }
   function maybe_print_error_and_shutdown(param){
    if(0 === param[0]) return caml_call2(Async_command_Import[34], 0, 0);
    var e = param[1];
    return shutdown_with_error(e);
   }
   function unit(v0){return [0, v0];}
   function or_error(v0){return [1, v0];}
   var recursive_invocation = [0, 0];
   function in_async(opt, extract_exn, param, on_result, kind){
    if(opt)
     var sth = opt[1], behave_nicely_in_pipeline = sth;
    else
     var behave_nicely_in_pipeline = 1;
    function _s_(staged_main, param){
     if(behave_nicely_in_pipeline) caml_call2(Async_unix_Writer[88], 0, 0);
     function _t_(param){
      var _M_ = caml_call1(staged_main, 0);
      return caml_call1(Core[267], _M_);
     }
     var
      main = caml_call2(Core_Or_error[37], 0, _t_),
      match = recursive_invocation[1];
     if(match){
      var r = match[1], _u_ = caml_call2(Core_Or_error[53], main, kind);
      return caml_call3(Core_Set_once[7], r, _a_, _u_);
     }
     if(0 === main[0]){
      var
       main$0 = main[1],
       before_shutdown =
         function(param){
          function _G_(writer){
           var
            _J_ = [0, caml_call1(Async_unix_Writer[58], writer), 0],
            _K_ = [0, caml_call1(Async_unix_Writer[22], writer), _J_],
            _L_ = [0, caml_call1(Async_unix_Writer[67], writer), _K_];
           return caml_call1(Async_kernel_Deferred[24], _L_);
          }
          var
           _H_ = [0, caml_call1(Core[248], Async_unix_Writer[6]), 0],
           _I_ = [0, caml_call1(Core[248], Async_unix_Writer[5]), _H_];
          return caml_call3
                  (Async_kernel_Deferred_list[14], -676829465, _I_, _G_);
         };
      caml_call1(Async_unix_Shutdown[11], before_shutdown);
      var
       prev = caml_call1(Async_unix_Shutdown[5], 0),
       _v_ =
         function(param){
          var _A_ = 0;
          function _B_(param){
           var _F_ = caml_call1(Core[630], 1.);
           return caml_call1(Async_command_Import[28], _F_);
          }
          var
           _C_ = before_shutdown(0),
           _D_ = [0, caml_call2(Async_command_Import[23], _C_, _B_), _A_],
           _E_ = [0, caml_call1(prev, 0), _D_];
          return caml_call1(Async_kernel_Deferred[22], _E_);
         };
      caml_call1(Async_unix_Shutdown[6], _v_);
      var
       _w_ = function(param){return caml_call1(main$0, 914405341);},
       _x_ =
         caml_call6
          (Async_kernel_Deferred_or_error[38],
           extract_exn,
           _c_,
           _b_,
           0,
           0,
           _w_);
      caml_call2(Async_command_Import[17], _x_, on_result);
      var _y_ = caml_call2(Async_unix_Scheduler[39], 0, 0);
      return caml_call1(Core[158], _y_);
     }
     var e = main[1];
     shutdown_with_error(e);
     var _z_ = caml_call2(Async_unix_Scheduler[39], 0, 0);
     return caml_call1(Core[158], _z_);
    }
    return caml_call2(Param[2], param, _s_);
   }
   function async
   (behave_nicely_in_pipeline, extract_exn, summary, readme, param){
    return caml_call3
            (basic,
             summary,
             readme,
             in_async
              (behave_nicely_in_pipeline,
               extract_exn,
               param,
               maybe_print_error_and_shutdown,
               unit));
   }
   function async_spec
   (behave_nicely_in_pipeline, extract_exn, summary, readme, spec, main){
    return async
            (behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             caml_call2(Spec[60], spec, main));
   }
   function async_or_error
   (behave_nicely_in_pipeline, extract_exn, summary, readme, param){
    function on_result(res){
     return maybe_print_error_and_shutdown(caml_call1(Core_Or_error[31], res));
    }
    return caml_call3
            (basic,
             summary,
             readme,
             in_async
              (behave_nicely_in_pipeline,
               extract_exn,
               param,
               on_result,
               or_error));
   }
   function async_spec_or_error
   (behave_nicely_in_pipeline, extract_exn, summary, readme, spec, main){
    return async_or_error
            (behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             caml_call2(Spec[60], spec, main));
   }
   var
    Staged = [0, async, async_spec, async_or_error, async_spec_or_error],
    _d_ = Param[2];
   function _e_(main, param){
    function _r_(param){return caml_call1(main, 0);}
    return caml_call1(Core[266], _r_);
   }
   function stage_param(_q_){return caml_call2(_d_, _q_, _e_);}
   function async$0
   (behave_nicely_in_pipeline, extract_exn, summary, readme, param){
    var _p_ = stage_param(param);
    return caml_call5
            (Staged[1],
             behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             _p_);
   }
   function async_or_error$0
   (behave_nicely_in_pipeline, extract_exn, summary, readme, param){
    var _o_ = stage_param(param);
    return caml_call5
            (Staged[3],
             behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             _o_);
   }
   function async_spec$0
   (behave_nicely_in_pipeline, extract_exn, summary, readme, spec, main){
    return async$0
            (behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             caml_call2(Spec[60], spec, main));
   }
   function async_spec_or_error$0
   (behave_nicely_in_pipeline, extract_exn, summary, readme, spec, main){
    return async_or_error$0
            (behave_nicely_in_pipeline,
             extract_exn,
             summary,
             readme,
             caml_call2(Spec[60], spec, main));
   }
   function run_from_within_async(argv, cmd){
    var r = caml_call1(Core_Set_once[5], 0);
    if(recursive_invocation[1]){
     var
      _h_ = caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_nest_recursive_comm);
     return caml_call1(Core[261], _h_);
    }
    recursive_invocation[1] = [0, r];
    function _i_(param){
     function _m_(param){recursive_invocation[1] = 0; return 0;}
     function _n_(param){
      return caml_call9(Command_unix[1], 0, 0, 0, 0, [0, argv], 0, 0, 0, cmd);
     }
     return caml_call2(Base_Exn[13], _n_, _m_);
    }
    var e = caml_call2(Core_Or_error[37], 0, _i_);
    if(0 !== e[0]) return caml_call1(Async_command_Import[22], e);
    var match = caml_call1(Core_Set_once[9], r);
    if(! match) return caml_call1(Async_command_Import[22], _g_);
    var e$0 = match[1];
    if(0 !== e$0[0]) return caml_call1(Async_command_Import[22], e$0);
    var kind = e$0[1];
    function _j_(param){
     if(0 === kind[0]){
      var
       thunk = kind[1],
       _k_ = function(param){return _f_;},
       _l_ = caml_call1(thunk, 914405341);
      return caml_call2(Async_kernel_Deferred[16][4][3], _l_, _k_);
     }
     var thunk$0 = kind[1];
     return caml_call1(thunk$0, 914405341);
    }
    return caml_call6(Async_kernel_Monitor[18], 0, 0, 0, 0, 0, _j_);
   }
   var For_testing = [0, run_from_within_async];
   caml_call1(Ppx_inline_test_lib[7], cst_async_command);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_command);
   var
    Async_command =
      [0,
       basic_spec,
       basic,
       basic_or_error,
       group,
       lazy_group,
       exec,
       of_lazy,
       summary,
       exit,
       run,
       shape,
       async$0,
       async_spec$0,
       async_or_error$0,
       async_spec_or_error$0,
       Staged,
       For_testing];
   runtime.caml_register_global(40, Async_command, cst_Async_command$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
