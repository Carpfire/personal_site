// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Fmt_tty
//# unitInfo: Requires: Fmt, Stdlib, Stdlib__Format, Stdlib__String, Stdlib__Sys, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Fmt = global_data.Fmt,
    Stdlib_Format = global_data.Stdlib__Format,
    Unix = global_data.Unix,
    cst_LANG = "LANG",
    cst_LC_ALL = "LC_ALL",
    cst_LC_CTYPE = "LC_CTYPE";
   function setup(style_renderer, utf_8, oc){
    var
     ppf =
       oc === Stdlib[39]
        ? Fmt[1]
        : oc === Stdlib[40] ? Fmt[2] : caml_call1(Stdlib_Format[108], oc);
    if(style_renderer)
     var r = style_renderer[1], style_renderer$0 = r;
    else{
     try{
      var match = caml_sys_getenv("TERM");
      a:
      {
       if
        (caml_string_notequal(match, "")
         && caml_string_notequal(match, "dumb")){var _i_ = 0; break a;}
       var _i_ = 1;
      }
      var dumb = _i_;
     }
     catch(_q_){
      var _d_ = caml_wrap_exception(_q_);
      if(_d_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_d_, 0);
      var dumb = 1;
     }
     try{
      var
       _g_ = caml_call1(Unix[35], oc),
       _h_ = caml_call1(Unix[42], _g_),
       isatty = _h_;
     }
     catch(_p_){
      var _e_ = caml_wrap_exception(_p_);
      if(_e_[1] !== Unix[1]) throw caml_maybe_attach_backtrace(_e_, 0);
      var isatty = 0;
     }
     a:
     {if(! dumb && isatty){var _f_ = 323557469; break a;} var _f_ = 870530776;
     }
     var style_renderer$0 = _f_;
    }
    if(utf_8)
     var b = utf_8[1], utf_8$0 = b;
    else{
     var
      has_utf_8 =
        function(var$0){
         try{
          var
           _m_ = caml_sys_getenv(var$0),
           s = caml_call1(Stdlib_String[26], _m_),
           len_s = runtime.caml_ml_string_length(s);
          if(len_s < 5)
           var _n_ = 0;
          else{
           var max_idx_s = len_s - 5 | 0, i = 0, k = 0;
           for(;;){
            if(max_idx_s < i)
             var _k_ = 0;
            else{
             if(4 >= k){
              if(0 < k){
               var _j_ = caml_string_get(s, i + k | 0);
               if(caml_string_get("UTF-8", k) === _j_){
                var k$0 = k + 1 | 0, k = k$0;
                continue;
               }
               var i$0 = i + 1 | 0, i = i$0, k = 0;
               continue;
              }
              if(85 === caml_string_get(s, i)){var k = 1; continue;}
              var i$1 = i + 1 | 0, i = i$1, k = 0;
              continue;
             }
             var _k_ = 1;
            }
            var _n_ = _k_;
            break;
           }
          }
          return _n_;
         }
         catch(_o_){
          var _l_ = caml_wrap_exception(_o_);
          if(_l_ === Stdlib[8]) return 0;
          throw caml_maybe_attach_backtrace(_l_, 0);
         }
        },
      _a_ = has_utf_8(cst_LANG);
     if(_a_)
      var _b_ = _a_;
     else
      var _c_ = has_utf_8(cst_LC_ALL), _b_ = _c_ || has_utf_8(cst_LC_CTYPE);
     var utf_8$0 = _b_;
    }
    caml_call2(Fmt[94], ppf, style_renderer$0);
    caml_call2(Fmt[91], ppf, utf_8$0);
    return ppf;
   }
   function setup_std_outputs(style_renderer, utf_8, param){
    setup(style_renderer, utf_8, Stdlib[39]);
    setup(style_renderer, utf_8, Stdlib[40]);
    return 0;
   }
   var Fmt_tty = [0, setup, setup_std_outputs];
   runtime.caml_register_global(12, Fmt_tty, "Fmt_tty");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJmbXRfdHR5LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7STs7Ozt1QztJOzs7SztNLFk7Ozs7Ozs7Ozs7Ozs7OztLO007TyxNO08sTTs7Ozs7Ozs7Ozs7OztJOzs7Szs7O1M7VTtXLE07VyxJO1csUTs7Ozs7Vzs7Ozs7O2UsVTtrQjtnQixJOzs7Ozs7d0I7Ozs7Ozs7Ozs7VTs7OztnQzs7O1E7TTtLOzs7TSxJLDZCOzs7STtJO0k7Rzs7STtJO0k7Rzs7OztFIiwic291cmNlc0NvbnRlbnQiOltdfQ==
