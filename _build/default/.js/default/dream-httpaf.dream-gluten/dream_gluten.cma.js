// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_gluten
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_gluten = [0];
   runtime.caml_register_global(0, Dream_gluten, "Dream_gluten");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten__Gluten
//# unitInfo: Requires: Bigstringaf, CamlinternalLazy
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bigstringaf = global_data.Bigstringaf,
    CamlinternalLazy = global_data.CamlinternalLazy;
   function make(runtime, t){return [0, runtime, t];}
   function create(protocol, t){return [0, [0, protocol, t]];}
   function upgrade_protocol(t, protocol){
    var match = t[1], t$0 = match[2], P = match[1];
    t[1] = protocol;
    return caml_call1(P[10], t$0);
   }
   function next_read_operation(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[1], t);
   }
   function read(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[2], t);
   }
   function read_eof(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[3], t);
   }
   function yield_reader(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[4], t);
   }
   function next_write_operation(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[5], t);
   }
   function report_write_result(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[6], t);
   }
   function yield_writer(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[7], t);
   }
   function report_exn(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[8], t);
   }
   function shutdown(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[10], t);
   }
   function is_closed(param){
    var match = param[1], t = match[2], P = match[1];
    return caml_call1(P[9], t);
   }
   function create_upgradable(protocol, create, request_handler){
    var t = [], request_handler$0 = function _g_(_f_){return _g_.fun(_f_);};
    caml_update_dummy
     (t,
      [246,
       function(param){
        return [0, [0, protocol, caml_call1(create, request_handler$0)]];
       }]);
    caml_update_dummy
     (request_handler$0,
      function(reqd){
       var _c_ = caml_obj_tag(t);
       a:
       if(250 === _c_)
        var _d_ = t[1];
       else{
        if(246 !== _c_ && 244 !== _c_){var _d_ = t; break a;}
        var _d_ = caml_call1(CamlinternalLazy[2], t);
       }
       var
        reqd$0 = [0, reqd, function(_e_){return upgrade_protocol(_d_, _e_);}];
       return caml_call1(request_handler, reqd$0);
      });
    var _b_ = caml_obj_tag(t);
    if(250 === _b_) return t[1];
    if(246 !== _b_ && 244 !== _b_) return t;
    return caml_call1(CamlinternalLazy[2], t);
   }
   function create$0(size){
    var buffer = caml_call1(Bigstringaf[1], size);
    return [0, buffer, 0, 0, size];
   }
   function get(t, f){
    var n = caml_call3(f, t[1], t[2], t[3]);
    t[2] = t[2] + n | 0;
    t[3] = t[3] - n | 0;
    if(0 === t[3]) t[2] = 0;
    return n;
   }
   function put(t, f, k){
    if(0 === t[3]){
     t[2] = 0;
     t[3] = 0;
    }
    else if(0 < t[2]){
     caml_call5(Bigstringaf[23], t[1], t[2], t[1], 0, t[3]);
     t[2] = 0;
    }
    var off = t[2] + t[3] | 0, len = (t[4] - t[3] | 0) - t[2] | 0;
    function _a_(n){t[3] = t[3] + n | 0; return caml_call1(k, n);}
    return caml_call4(f, t[1], off, len, _a_);
   }
   var
    Dream_gluten_Gluten =
      [0,
       make,
       [0],
       [0,
        next_read_operation,
        read,
        read_eof,
        yield_reader,
        next_write_operation,
        report_write_result,
        yield_writer,
        report_exn,
        is_closed,
        shutdown,
        create,
        upgrade_protocol,
        create_upgradable],
       [0,
        next_read_operation,
        read,
        read_eof,
        yield_reader,
        next_write_operation,
        report_write_result,
        yield_writer,
        report_exn,
        is_closed,
        shutdown,
        create,
        upgrade_protocol],
       [0, create$0, get, put]];
   runtime.caml_register_global
    (2, Dream_gluten_Gluten, "Dream_gluten__Gluten");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
