// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Read_write_pair
//# unitInfo: Requires: Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Read = "Read",
    cst_Read_write_pair$0 = "Read_write_pair",
    cst_Write = "Write",
    cst_read$0 = "read",
    cst_read_write_pair$0 = "read_write_pair",
    cst_read_write_pair_src_read_w =
      "read_write_pair/src/read_write_pair.ml.Key.t",
    cst_write$0 = "write",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = cst_read_write_pair_src_read_w,
    error_source_008 = cst_read_write_pair_src_read_w,
    error_source_012 = "read_write_pair/src/read_write_pair.ml.any",
    Core = global_data.Core,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Read_write_pair$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_read_write_pair$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "read_write_pair/src/read_write_pair.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_read_write_pair$0, "read_write_pair.ml");
   var
    _c_ = [0, cst_write$0],
    _d_ = [0, cst_read$0],
    cst_write = cst_write$0,
    cst_read = cst_read$0,
    _a_ = [0, cst_Read],
    _b_ = [0, cst_Write],
    cst_read_write_pair = cst_read_write_pair$0,
    cst_Read_write_pair = cst_Read_write_pair$0;
   function t_of_sexp(sexp_004){
    if(0 === sexp_004[0]){
     var atom_002 = sexp_004[1];
     return caml_string_notequal(atom_002, cst_Read)
             ? caml_string_notequal
                (atom_002, cst_Write)
               ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
               : -477700929
             : 914388854;
    }
    var _s_ = sexp_004[1];
    if(! _s_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[29], error_source_006, sexp_004);
    var match = _s_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[28], error_source_006, sexp_004);
    var atom_002$0 = match[1];
    return caml_string_notequal(atom_002$0, cst_Read)
            ? caml_string_notequal
               (atom_002$0, cst_Write)
              ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004)
            : caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
   }
   function t_of_sexp$0(sexp_007){
    try{var _q_ = t_of_sexp(sexp_007); return _q_;}
    catch(_r_){
     var _p_ = caml_wrap_exception(_r_);
     if(_p_ === Sexplib0_Sexp_conv_error[22])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_008, sexp_007);
     throw caml_maybe_attach_backtrace(_p_, 0);
    }
   }
   function sexp_of_t(param){return 914388854 <= param ? _a_ : _b_;}
   function flip(param){return 914388854 <= param ? -477700929 : 914388854;}
   function any_of_sexp(of_a_009, of_z_010, x_013){
    function _m_(param){
     var write = param[2][1], read = param[1];
     return [0, read, write];
    }
    var _n_ = 0;
    function _o_(param){
     return caml_string_notequal(param, cst_read$0)
             ? caml_string_notequal(param, cst_write$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_012,
             [0, cst_read, 1, of_a_009, [0, cst_write, 1, of_a_009, 0]],
             _o_,
             _n_,
             _m_,
             x_013);
   }
   function sexp_of_any(of_a_014, of_z_015, param){
    var
     read_017 = param[1],
     write_019 = param[2],
     arg_020 = caml_call1(of_a_014, write_019),
     bnds_016 = [0, [1, [0, _c_, [0, arg_020, 0]]], 0],
     arg_018 = caml_call1(of_a_014, read_017),
     bnds_016$0 = [0, [1, [0, _d_, [0, arg_018, 0]]], bnds_016];
    return [1, bnds_016$0];
   }
   function t_of_sexp$1(of_a_021, x_023){
    return any_of_sexp(of_a_021, Core[197], x_023);
   }
   function sexp_of_t$0(of_a_024, x_025){
    return sexp_of_any(of_a_024, Core[196], x_025);
   }
   var Immutable = [0, t_of_sexp$1, sexp_of_t$0];
   function t_of_sexp$2(of_a_026, x_028){
    return any_of_sexp(of_a_026, Core[172], x_028);
   }
   function sexp_of_t$1(of_a_029, x_030){
    return sexp_of_any(of_a_029, Core[171], x_030);
   }
   var Read_only = [0, t_of_sexp$2, sexp_of_t$1];
   function t_of_sexp$3(of_a_031, x_033){
    return any_of_sexp(of_a_031, Core[213], x_033);
   }
   function sexp_of_t$2(of_a_034, x_035){
    return sexp_of_any(of_a_034, Core[212], x_035);
   }
   var
    Mutable = [0, t_of_sexp$3, sexp_of_t$2],
    t_of_sexp$4 = Immutable[1],
    sexp_of_t$3 = Immutable[2];
   function create(read, write){return [0, read, write];}
   function createi(f){
    var _l_ = caml_call1(f, -477700929);
    return [0, caml_call1(f, 914388854), _l_];
   }
   function create_both(x){return [0, x, x];}
   function create_fn(f){
    var _k_ = caml_call1(f, 0);
    return [0, caml_call1(f, 0), _k_];
   }
   function create_with(key, v, zero){
    return 914388854 <= key ? [0, v, zero] : [0, zero, v];
   }
   function copy(param){
    var read = param[1], write = param[2];
    return [0, read, write];
   }
   function exists(t, f){
    var _j_ = caml_call1(f, t[1]);
    return _j_ ? _j_ : caml_call1(f, t[2]);
   }
   function for_all(t, f){
    var _i_ = caml_call1(f, t[1]);
    return _i_ ? caml_call1(f, t[2]) : _i_;
   }
   function iteri(t, f){
    caml_call2(f, 914388854, t[1]);
    return caml_call2(f, -477700929, t[2]);
   }
   function iter(t, f){caml_call1(f, t[1]); return caml_call1(f, t[2]);}
   function map(t, f){
    var _h_ = caml_call1(f, t[2]);
    return [0, caml_call1(f, t[1]), _h_];
   }
   function mapi(t, f){
    var _g_ = caml_call2(f, -477700929, t[2]);
    return [0, caml_call2(f, 914388854, t[1]), _g_];
   }
   function foldi(t, init, f){
    var _f_ = [0, -477700929, t[2]];
    return caml_call2(f, caml_call2(f, init, [0, 914388854, t[1]]), _f_);
   }
   function fold(t, init, f){
    var _e_ = t[2];
    return caml_call2(f, caml_call2(f, init, t[1]), _e_);
   }
   function get(t, key){return 914388854 <= key ? t[1] : t[2];}
   function set(t, key, value){
    return 914388854 <= key ? (t[1] = value, 0) : (t[2] = value, 0);
   }
   function replace(t, key, f){
    return 914388854 <= key
            ? (t[1] = caml_call1(f, t[1]), 0)
            : (t[2] = caml_call1(f, t[2]), 0);
   }
   function replace_all(t, f){
    t[1] = caml_call2(f, 914388854, t[1]);
    t[2] = caml_call2(f, -477700929, t[2]);
    return 0;
   }
   var Export = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_read_write_pair);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Read_write_pair);
   var
    Read_write_pair =
      [0,
       [0, sexp_of_t, t_of_sexp$0, t_of_sexp, flip],
       sexp_of_any,
       any_of_sexp,
       Immutable,
       Read_only,
       Mutable,
       t_of_sexp$4,
       sexp_of_t$3,
       create,
       createi,
       create_both,
       create_fn,
       create_with,
       copy,
       exists,
       for_all,
       iteri,
       iter,
       mapi,
       map,
       foldi,
       fold,
       get,
       replace,
       replace_all,
       set,
       Export];
   runtime.caml_register_global(29, Read_write_pair, cst_Read_write_pair$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJyZWFkX3dyaXRlX3BhaXIuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVycm9yX3NvdXJjZV8wMDYiLCJlcnJvcl9zb3VyY2VfMDA4IiwiZXJyb3Jfc291cmNlXzAxMiIsInRfb2Zfc2V4cCIsInNleHBfMDA0IiwiYXRvbV8wMDIiLCJhdG9tXzAwMiQwIiwidF9vZl9zZXhwJDAiLCJzZXhwXzAwNyIsInNleHBfb2ZfdCIsImZsaXAiLCJhbnlfb2Zfc2V4cCIsIm9mX2FfMDA5Iiwib2Zfel8wMTAiLCJ4XzAxMyIsIndyaXRlIiwicmVhZCIsInNleHBfb2ZfYW55Iiwib2ZfYV8wMTQiLCJvZl96XzAxNSIsInJlYWRfMDE3Iiwid3JpdGVfMDE5IiwiYXJnXzAyMCIsImJuZHNfMDE2IiwiYXJnXzAxOCIsImJuZHNfMDE2JDAiLCJ0X29mX3NleHAkMSIsIm9mX2FfMDIxIiwieF8wMjMiLCJzZXhwX29mX3QkMCIsIm9mX2FfMDI0IiwieF8wMjUiLCJ0X29mX3NleHAkMiIsIm9mX2FfMDI2IiwieF8wMjgiLCJzZXhwX29mX3QkMSIsIm9mX2FfMDI5IiwieF8wMzAiLCJ0X29mX3NleHAkMyIsIm9mX2FfMDMxIiwieF8wMzMiLCJzZXhwX29mX3QkMiIsIm9mX2FfMDM0IiwieF8wMzUiLCJ0X29mX3NleHAkNCIsInNleHBfb2ZfdCQzIiwiY3JlYXRlIiwiY3JlYXRlaSIsImYiLCJjcmVhdGVfYm90aCIsIngiLCJjcmVhdGVfZm4iLCJjcmVhdGVfd2l0aCIsImtleSIsInYiLCJ6ZXJvIiwiY29weSIsImV4aXN0cyIsInQiLCJmb3JfYWxsIiwiaXRlcmkiLCJpdGVyIiwibWFwIiwibWFwaSIsImZvbGRpIiwiaW5pdCIsImZvbGQiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsInJlcGxhY2UiLCJyZXBsYWNlX2FsbCJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2FzeW5jX2tlcm5lbC9yZWFkX3dyaXRlX3Bh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LFdBQU5BLEdBQU5pQixxQkFBRlA7R0FBd0Q7WUFDOURRLEtBQUtSLEdBQUVPLE1BQU1qQjtJQUFJLFVBQVpVO0lBQWMsT0FBQSxXQUFOVixHQUFNLFdBQU5BLEdBQU5pQixNQUFGUDtHQUFxQztZQUUxQ1MsSUFBSVQsR0FBRUwsS0FDUixvQkFEUUEsTUFBRkssT0FBQUEsS0FHYTtZQUdqQlUsSUFBSVYsR0FBRUwsS0FBSWdCO0lBQ1osb0JBRFFoQixPQUFGSyxPQUFNVyxhQUFOWCxPQUFNVztHQUdnQjtZQUcxQkMsUUFBUVosR0FBRUwsS0FBS0w7SUFDakIsb0JBRFlLO2VBQUZLLE9BRVcsV0FGSlYsR0FBUFU7ZUFBQUEsT0FHYSxXQUhOVixHQUFQVTtHQUdzQjtZQUc5QmEsWUFBWWIsR0FBR1Y7SUFBSFUsT0FDSixXQURPVixjQUFIVTtJQUFBQSxPQUVILFdBRk1WLGVBQUhVOztHQUVhO0dBR2I7Ozs7Ozs7O1dBckZkakQsV0FBQUYsYUFBQUosV0FNSU87T0FNTk87T0FBQU47Ozs7T0FrQkFpQztPQUFBQztPQUVJQztPQUNBQztPQUNBRTtPQUNBRTtPQUVBQztPQU1BSTtPQUNBQztPQUNBRTtPQUVBQztPQUtBQztPQU1BRTtPQURBRDtPQUVBRTtPQUNBRTtPQUVBQztPQVlBRztPQU1BQztPQVpBSDs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBDb3JlXG5cbm1vZHVsZSBLZXkgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICBbIGBSZWFkXG4gICAgfCBgV3JpdGVcbiAgICBdXG4gIFtAQGRlcml2aW5nIHNleHBdXG5cbiAgbGV0IGZsaXAgPSBmdW5jdGlvblxuICAgIHwgYFJlYWQgLT4gYFdyaXRlXG4gICAgfCBgV3JpdGUgLT4gYFJlYWRcbiAgOztcbmVuZFxuXG50eXBlICgnYSwgKyd6KSBhbnkgPVxuICB7IG11dGFibGUgcmVhZCA6ICdhXG4gIDsgbXV0YWJsZSB3cml0ZSA6ICdhXG4gIH1cbltAQGRlcml2aW5nIHNleHBdXG5cbm1vZHVsZSBJbW11dGFibGUgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gKCdhLCBpbW11dGFibGUpIGFueSBbQEBkZXJpdmluZyBzZXhwXVxuZW5kXG5cbm1vZHVsZSBSZWFkX29ubHkgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gKCdhLCByZWFkKSBhbnkgW0BAZGVyaXZpbmcgc2V4cF1cbmVuZFxuXG5tb2R1bGUgTXV0YWJsZSA9IHN0cnVjdFxuICB0eXBlICdhIHQgPSAoJ2EsIHJlYWRfd3JpdGUpIGFueSBbQEBkZXJpdmluZyBzZXhwXVxuZW5kXG5cbnR5cGUgJ2EgdCA9ICdhIEltbXV0YWJsZS50IFtAQGRlcml2aW5nIHNleHBdXG5cbmxldCBjcmVhdGUgfnJlYWQgfndyaXRlID0geyByZWFkOyB3cml0ZSB9XG5sZXQgY3JlYXRlaSBmID0geyByZWFkID0gZiBgUmVhZDsgd3JpdGUgPSBmIGBXcml0ZSB9XG5sZXQgY3JlYXRlX2JvdGggeCA9IHsgcmVhZCA9IHg7IHdyaXRlID0geCB9XG5sZXQgY3JlYXRlX2ZuIGYgPSB7IHJlYWQgPSBmICgpOyB3cml0ZSA9IGYgKCkgfVxuXG5sZXQgY3JlYXRlX3dpdGgga2V5IHYgfnplcm8gPVxuICBtYXRjaCBrZXkgd2l0aFxuICB8IGBSZWFkIC0+IHsgcmVhZCA9IHY7IHdyaXRlID0gemVybyB9XG4gIHwgYFdyaXRlIC0+IHsgcmVhZCA9IHplcm87IHdyaXRlID0gdiB9XG47O1xuXG5sZXQgY29weSB7IHJlYWQ7IHdyaXRlIH0gPSB7IHJlYWQ7IHdyaXRlIH1cbmxldCBleGlzdHMgdCB+ZiA9IGYgdC5yZWFkIHx8IGYgdC53cml0ZVxubGV0IGZvcl9hbGwgdCB+ZiA9IGYgdC5yZWFkICYmIGYgdC53cml0ZVxuXG5sZXQgaXRlcmkgdCB+ZiA9XG4gIGYgYFJlYWQgdC5yZWFkO1xuICBmIGBXcml0ZSB0LndyaXRlXG47O1xuXG5sZXQgaXRlciB0IH5mID1cbiAgZiB0LnJlYWQ7XG4gIGYgdC53cml0ZVxuOztcblxubGV0IG1hcCB0IH5mID0geyByZWFkID0gZiB0LnJlYWQ7IHdyaXRlID0gZiB0LndyaXRlIH1cbmxldCBtYXBpIHQgfmYgPSB7IHJlYWQgPSBmIGBSZWFkIHQucmVhZDsgd3JpdGUgPSBmIGBXcml0ZSB0LndyaXRlIH1cbmxldCBmb2xkaSB0IGluaXQgfmYgPSBmIChmIGluaXQgKGBSZWFkLCB0LnJlYWQpKSAoYFdyaXRlLCB0LndyaXRlKVxubGV0IGZvbGQgdCBpbml0IH5mID0gZiAoZiBpbml0IHQucmVhZCkgdC53cml0ZVxuXG5sZXQgZ2V0IHQga2V5ID1cbiAgbWF0Y2gga2V5IHdpdGhcbiAgfCBgUmVhZCAtPiB0LnJlYWRcbiAgfCBgV3JpdGUgLT4gdC53cml0ZVxuOztcblxubGV0IHNldCB0IGtleSB2YWx1ZSA9XG4gIG1hdGNoIGtleSB3aXRoXG4gIHwgYFJlYWQgLT4gdC5yZWFkIDwtIHZhbHVlXG4gIHwgYFdyaXRlIC0+IHQud3JpdGUgPC0gdmFsdWVcbjs7XG5cbmxldCByZXBsYWNlIHQga2V5IH5mID1cbiAgbWF0Y2gga2V5IHdpdGhcbiAgfCBgUmVhZCAtPiB0LnJlYWQgPC0gZiB0LnJlYWRcbiAgfCBgV3JpdGUgLT4gdC53cml0ZSA8LSBmIHQud3JpdGVcbjs7XG5cbmxldCByZXBsYWNlX2FsbCB0IH5mID1cbiAgdC5yZWFkIDwtIGYgYFJlYWQgdC5yZWFkO1xuICB0LndyaXRlIDwtIGYgYFdyaXRlIHQud3JpdGVcbjs7XG5cbm1vZHVsZSBFeHBvcnQgPSBzdHJ1Y3RcbiAgdHlwZSAoJ2EsICd6KSByZWFkX3dyaXRlXyA9ICgnYSwgJ3opIGFueSA9XG4gICAgeyBtdXRhYmxlIHJlYWQgOiAnYVxuICAgIDsgbXV0YWJsZSB3cml0ZSA6ICdhXG4gICAgfVxuZW5kXG4iXX0=
