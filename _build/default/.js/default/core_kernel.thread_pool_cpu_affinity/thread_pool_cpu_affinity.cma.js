// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Thread_pool_cpu_affinity__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Thread_pool_cpu_affinity = [0],
    Thread_pool_cpu_affinity$0 = [0, Thread_pool_cpu_affinity];
   runtime.caml_register_global
    (0, Thread_pool_cpu_affinity$0, "Thread_pool_cpu_affinity__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool_cpu_affinity__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_pool_cpu_affinity_I = "Thread_pool_cpu_affinity__Import",
    cst_thread_pool_cpu_affinity = "thread_pool_cpu_affinity";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool_cpu_affinity_I);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool_cpu_affinity);
   caml_call1
    (Ppx_expect_runtime[1][1], "thread_pool_cpu_affinity/src/import.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_thread_pool_cpu_affinity, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_thread_pool_cpu_affinity);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool_cpu_affinity_I);
   var Thread_pool_cpu_affinity_Impor = [0];
   runtime.caml_register_global
    (11, Thread_pool_cpu_affinity_Impor, cst_Thread_pool_cpu_affinity_I);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool_cpu_affinity
//# unitInfo: Requires: Core__Int, Core__List, Core__Set, Core__Validated, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Cpuset = "Cpuset",
    cst_Inherit = "Inherit",
    cst_Thread_pool_cpu_affinity$0 = "Thread_pool_cpu_affinity",
    cst_cpuset = "cpuset",
    cst_inherit = "inherit",
    cst_thread_pool_cpu_affinity$0 = "thread_pool_cpu_affinity",
    cst_thread_pool_cpu_affinity_s =
      "thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    here = [0, cst_thread_pool_cpu_affinity_s, 8, 123, 138],
    error_source_004 =
      "thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml.t",
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Int = global_data.Core__Int,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Validate = global_data.Validate,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Validated = global_data.Core__Validated;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool_cpu_affinity$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool_cpu_affinity$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_thread_pool_cpu_affinity_s);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_thread_pool_cpu_affinity$0,
     "thread_pool_cpu_affinity.ml");
   var
    t_of_sexp = Core_Int[99][27],
    sexp_of_t = Core_Int[99][28],
    _b_ = [0, cst_Cpuset],
    _c_ = [0, cst_Inherit],
    cst_Thread_pool_cpuset = "Thread_pool_cpuset",
    _a_ = [0, 1],
    cst_thread_pool_cpu_affinity = cst_thread_pool_cpu_affinity$0,
    cst_Thread_pool_cpu_affinity = cst_Thread_pool_cpu_affinity$0;
   function validate(t){
    var
     _i_ = Core_Int[110],
     _j_ = caml_call1(Core_Set[39], t),
     _k_ = caml_call2(Core_List[51], _j_, _i_),
     _l_ = caml_call2(Validate[9], cst_Thread_pool_cpuset, _k_),
     _m_ = caml_call1(Core_Set[9], t),
     _n_ = caml_call2(Core_Int[106], _a_, _m_);
    return caml_call2(Validate[30], _n_, _l_);
   }
   var
    include =
      caml_call1(Core_Validated[3], [0, t_of_sexp, sexp_of_t, here, validate]),
    t_of_sexp$0 = include[1],
    sexp_of_t$0 = include[2],
    create = include[3],
    create_exn = include[4],
    raw = include[5],
    raw_local = include[6],
    create_stable_witness = include[7],
    type_equal = include[8];
   function equal(t1, t2){
    var _g_ = caml_call1(raw, t2), _h_ = caml_call1(raw, t1);
    return caml_call2(Core_Int[99][4], _h_, _g_);
   }
   var
    Cpuset =
      [0,
       t_of_sexp$0,
       sexp_of_t$0,
       create,
       create_exn,
       raw,
       raw_local,
       create_stable_witness,
       type_equal,
       equal];
   function t_of_sexp$1(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var _d_ = sexp_006[1];
      b:
      if(caml_string_notequal(_d_, cst_Cpuset)){
       if(caml_string_notequal(_d_, cst_Inherit)){
        if(! caml_string_notequal(_d_, cst_cpuset)) break b;
        if(caml_string_notequal(_d_, cst_inherit)) break a;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_004, sexp_006);
     }
     var _e_ = sexp_006[1];
     if(! _e_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_004, sexp_006);
     var _f_ = _e_[1];
     if(0 !== _f_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_004, sexp_006);
     var tag_007 = _f_[1];
     b:
     if(caml_string_notequal(tag_007, cst_Cpuset)){
      if(caml_string_notequal(tag_007, cst_Inherit)){
       if(! caml_string_notequal(tag_007, cst_cpuset)) break b;
       if(caml_string_notequal(tag_007, cst_inherit)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_004, sexp_006);
     }
     var sexp_args_008 = _e_[2];
     if(sexp_args_008 && ! sexp_args_008[2]){
      var
       arg0_009 = sexp_args_008[1],
       res0_010 = caml_call1(Cpuset[1], arg0_009);
      return [0, res0_010];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_004,
              tag_007,
              sexp_006);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_004, sexp_006);
   }
   function sexp_of_t$1(param){
    if(! param) return _c_;
    var arg0_011 = param[1], res0_012 = caml_call1(Cpuset[2], arg0_011);
    return [1, [0, _b_, [0, res0_012, 0]]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_thread_pool_cpu_affinity);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool_cpu_affinity);
   var Thread_pool_cpu_affinity = [0, Cpuset, t_of_sexp$1, sexp_of_t$1];
   runtime.caml_register_global
    (31, Thread_pool_cpu_affinity, cst_Thread_pool_cpu_affinity$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ0aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImhlcmUiLCJlcnJvcl9zb3VyY2VfMDA0IiwidF9vZl9zZXhwIiwic2V4cF9vZl90IiwidmFsaWRhdGUiLCJ0IiwiZXF1YWwiLCJ0MSIsInQyIiwidF9vZl9zZXhwJDEiLCJzZXhwXzAwNiIsInRhZ18wMDciLCJzZXhwX2FyZ3NfMDA4IiwiYXJnMF8wMDkiLCJyZXMwXzAxMCIsInNleHBfb2ZfdCQxIiwiYXJnMF8wMTEiLCJyZXMwXzAxMiJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2NvcmVfa2VybmVsL3RocmVhZF9wb29sX2NwdV9hZmZpbml0eS90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHlfXy5tbCIsIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2NvcmVfa2VybmVsL3RocmVhZF9wb29sX2NwdV9hZmZpbml0eS90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7R0FLb0M7O0lBQUE7Ozs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7O0lDRTVCQTtJQWNSQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWhCSUM7SUFBQUM7Ozs7Ozs7WUFJSUMsU0FBU0M7SUFDWDtLQUFBO0tBRUcsTUFBQSx5QkFIUUE7S0FHUixNQUFBO0tBQUQsTUFBQTtLQURtQyxNQUFBLHdCQUYxQkE7S0FFVCxNQUFBO0lBQ0EsT0FBQTtHQUU0Qzs7O3dDQVRoREgsV0FBQUMsV0FFSUgsTUFFQUk7Ozs7Ozs7OztZQVNGRSxNQUFNQyxJQUFHQztJQUFLLElBQTBCLE1BQUEsZ0JBQS9CQSxLQUFtQixNQUFBLGdCQUF0QkQ7SUFBa0MsT0FBQTtHQUFXO0dBZnpDOzs7Ozs7Ozs7OztPQWVWRDtZQUdORyxZQUFBQztJQUFBOztjQUFBQTtnQkFBQUE7Ozs7Ozs7T0FDRTs7TUFERixPQUFBOzRDQUFBVCxrQkFBQVM7O2VBQUFBOztNQUFBLE9BQUE7NkNBQUFULGtCQUFBUzs7O01BQUEsT0FBQTs2Q0FBQVQsa0JBQUFTO1NBRUVDOzs2QkFBQUE7OEJBQUFBO2lDQUFBQTsrQkFBQUE7O01BRkYsT0FBQTs0Q0FBQVYsa0JBQUFTOztTQUVFRTtRQUFBQSxtQkFBQUE7TUFBQTtPQUFBQyxXQUFBRDtPQUFBRSxXQUFBLHNCQUFBRDtNQUFBLFdBQUFDOztLQUFBLE9BQUE7O2NBRkZiO2NBRUVVO2NBRkZEOztJQUFBLE9BQUE7MkNBQUFULGtCQUFBUztHQUdpQjtZQUhqQks7SUFBQSxZQUNFO0lBQ0EsSUFBQUMscUJBQUFDLFdBQUEsc0JBQUFEO0lBQUEsd0JBQUFDO0dBQ2U7Ozs7OzhDQUhqQlIsYUFBQU07Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIFRocmVhZF9wb29sX2NwdV9hZmZpbml0eS5JbXBvcnQgKilcbm1vZHVsZSBJbXBvcnQgPSBUaHJlYWRfcG9vbF9jcHVfYWZmaW5pdHlfX0ltcG9ydFxuXG5tb2R1bGUgVGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5X18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgQ3B1c2V0ID0gc3RydWN0XG4gIGluY2x1ZGUgVmFsaWRhdGVkLk1ha2UgKHN0cnVjdFxuICAgIHR5cGUgdCA9IEludC5TZXQudCBbQEBkZXJpdmluZyBzZXhwXVxuXG4gICAgbGV0IGhlcmUgPSBbJWhlcmVdXG5cbiAgICBsZXQgdmFsaWRhdGUgdCA9XG4gICAgICBWYWxpZGF0ZS5maXJzdF9mYWlsdXJlXG4gICAgICAgIChJbnQudmFsaWRhdGVfbGJvdW5kIH5taW46KEluY2wgMSkgKFNldC5sZW5ndGggdCkpXG4gICAgICAgIChTZXQudG9fbGlzdCB0XG4gICAgICAgICB8PiBMaXN0Lm1hcCB+ZjpJbnQudmFsaWRhdGVfbm9uX25lZ2F0aXZlXG4gICAgICAgICB8PiBWYWxpZGF0ZS5uYW1lX2xpc3QgXCJUaHJlYWRfcG9vbF9jcHVzZXRcIilcbiAgICA7O1xuICBlbmQpXG5cbiAgbGV0IGVxdWFsIHQxIHQyID0gSW50LlNldC5lcXVhbCAodDEgfD4gcmF3KSAodDIgfD4gcmF3KVxuZW5kXG5cbnR5cGUgdCA9XG4gIHwgSW5oZXJpdFxuICB8IENwdXNldCBvZiBDcHVzZXQudFxuW0BAZGVyaXZpbmcgc2V4cF1cbiJdfQ==
