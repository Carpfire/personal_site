// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incremental_step_function
//# unitInfo: Requires: Core, Core__List, Core__Sequence, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_step_function$0 = "Incremental_step_function",
    cst_incremental_step_function$0 = "incremental_step_function",
    cst_steps = "steps";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Sequence = global_data.Core__Sequence,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Time_ns = global_data.Core__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_step_function$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental_step_function$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "step_function/src/incremental_step_function.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_incremental_step_function$0,
     "incremental_step_function.ml");
   var
    symbol = Core_Time_ns[19],
    compare = Core_Time_ns[22],
    sexp_of_t = Core_Time_ns[25][12],
    _c_ = [0, cst_steps],
    cst_Step_function_create_exn_g =
      "[Step_function.create_exn] got unsorted times",
    _a_ = [0, cst_steps],
    _b_ = [0, "init"],
    cst_incremental_step_function = cst_incremental_step_function$0,
    cst_Incremental_step_function = cst_Incremental_step_function$0;
   function steps(r){return r[2];}
   function init(r){return r[1];}
   function sexp_of_t$0(of_a_001, param){
    var steps_005 = param[2], init_003 = param[1], bnds_002 = 0;
    function _m_(param){
     var
      arg1_008 = param[2],
      arg0_007 = param[1],
      res0_009 = caml_call1(sexp_of_t, arg0_007),
      res1_010 = caml_call1(of_a_001, arg1_008);
     return [1, [0, res0_009, [0, res1_010, 0]]];
    }
    var
     arg_006 = caml_call2(Core_Sequence[12], _m_, steps_005),
     bnds_002$0 = [0, [1, [0, _a_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call1(of_a_001, init_003),
     bnds_002$1 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function invariant(invariant_a, param){
    var init = param[1];
    return caml_call1(invariant_a, init);
   }
   function value(t$0, at){
    var steps$1 = t$0[2], init$1 = t$0[1], init = init$1, steps = steps$1;
    for(;;){
     var match = caml_call1(Core_Sequence[50], steps);
     if(! match) return init;
     var
      _l_ = match[1],
      steps$0 = _l_[2],
      match$0 = _l_[1],
      init$0 = match$0[2],
      t = match$0[1];
     if(caml_call2(symbol, at, t)) return init;
     var init = init$0, steps = steps$0;
    }
   }
   function constant(init){return [0, init, Core_Sequence[49]];}
   function create_exn(init, steps){
    function _d_(param, _k_){
     var time2 = _k_[1], time1 = param[1];
     return caml_call2(compare, time1, time2);
    }
    if(1 - caml_call2(Core_List[147], steps, _d_)){
     var
      _e_ = 0,
      _f_ = 0,
      _g_ = function(_j_){return _j_[1];},
      x_011 = caml_call2(Core_List[51], steps, _g_),
      _h_ =
        [0,
         [1, [0, _c_, [0, caml_call2(Core[472], sexp_of_t, x_011), _f_]]],
         _e_],
      _i_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Step_function_create_exn_g),
          _h_]];
     caml_call1(Core[261], _i_);
    }
    return [0, init, caml_call1(Core_Sequence[111], steps)];
   }
   function create_from_sequence(init, steps){return [0, init, steps];}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental_step_function);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_step_function);
   var
    Incremental_step_function =
      [0,
       sexp_of_t$0,
       invariant,
       init,
       steps,
       value,
       constant,
       create_exn,
       create_from_sequence];
   runtime.caml_register_global
    (20, Incremental_step_function, cst_Incremental_step_function$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJpbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJzdGVwcyIsInIiLCJpbml0Iiwic2V4cF9vZl90JDAiLCJvZl9hXzAwMSIsInN0ZXBzXzAwNSIsImluaXRfMDAzIiwiYm5kc18wMDIiLCJhcmcxXzAwOCIsImFyZzBfMDA3IiwicmVzMF8wMDkiLCJyZXMxXzAxMCIsImFyZ18wMDYiLCJibmRzXzAwMiQwIiwiYXJnXzAwNCIsImJuZHNfMDAyJDEiLCJpbnZhcmlhbnQiLCJpbnZhcmlhbnRfYSIsInZhbHVlIiwidCQwIiwiYXQiLCJzdGVwcyQxIiwiaW5pdCQxIiwic3RlcHMkMCIsImluaXQkMCIsInQiLCJjb25zdGFudCIsImNyZWF0ZV9leG4iLCJ0aW1lMiIsInRpbWUxIiwieF8wMTEiLCJjcmVhdGVfZnJvbV9zZXF1ZW5jZSJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2luY3JlbWVudGFsL2luY3JlbWVudGFsX3N0ZXBfZnVuY3Rpb24vaW5jcmVtZW50YWxfc3RlcF9mdW5jdGlvbi5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFLTUE7Ozs7Ozs7O0dBR04sU0FFSUMsTUFBQUMsR0FBQSxPQUFBQSxLQUFLO1lBRExDLEtBQUFELEdBQUEsT0FBQUEsS0FBSTtZQURSRSxZQUFLQztJQUFMLElBRUlDLHNCQURBQyxxQkFESkM7OztNQUVhQztNQUFBQztNQUFBQyxzQkFMUFgsV0FLT1U7TUFBQUUsc0JBRlJQLFVBRVFJO29CQUFBRSxjQUFBQzs7SUFBVDtLQUFBQyxVQUFBLG1DQUFBUDtLQUZKUSxrQ0FFSUQsZUFGSkw7S0FDSU8sVUFBQSxXQURDVixVQUNERTtLQURKUyxrQ0FDSUQsZUFESkQ7SUFBQSxXQUFBRTtHQUlxQztZQUVqQ0MsVUFBVUM7UUFBY2Y7SUFBb0IsT0FBQSxXQUFsQ2UsYUFBY2Y7O1lBU3hCZ0IsTUFBTUMsS0FBR0M7SUFBSyxJQVBVQyxVQU9sQkYsUUFQYUcsU0FPYkgsUUFQYWpCLE9BQUFvQixRQUFLdEIsUUFBQXFCO0lBQzFCO0tBQU0sWUFBQSw4QkFEb0JyQjtpQkFFaEIsT0FGV0U7OztNQUFLcUI7O01BQUxDO01BR1pDO0tBQ0osR0FBQSxtQkFHTUwsSUFKRkssSUFDb0IsT0FKUnZCO1NBQUFBLE9BQUFzQixRQUFLeEIsUUFBQXVCOztHQU91QjtZQUMvQ0csU0FBU3hCLE1BQU8sV0FBUEEseUJBQXVDO1lBRWhEeUIsV0FBWXpCLE1BQU1GOztLQUVnQixJQUFpQjRCLGdCQUFYQztLQUNsQyxPQUFBLG9CQURrQ0EsT0FBV0Q7SUFDakI7V0FEL0IsMkJBRmU1QjtLQVFKOzs7MEI7TUFBMkI4QixRQUEzQiwwQkFSSTlCOzs7Z0RBckJoQkQsV0E2QnVDK0I7Ozs7Ozs7S0FIekM7O0lBSUYsV0FUYzVCLE1BU0UsK0JBVElGO0dBU3VCO1lBR3pDK0IscUJBQXNCN0IsTUFBTUYsT0FBUSxXQUFkRSxNQUFNRixPQUF1Qjs7Ozs7Ozs7T0E5QnZERztPQU1JYTtPQUxBZDtPQUNBRjtPQWFBa0I7T0FDQVE7T0FFQUM7T0FZQUk7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4hIENvcmVcblxubW9kdWxlIFRpbWVfbnMgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBUaW1lX25zXG5cbiAgbGV0IHNleHBfb2ZfdCA9IFRpbWVfbnMuQWx0ZXJuYXRlX3NleHAuc2V4cF9vZl90XG5lbmRcblxudHlwZSAnYSB0ID1cbiAgeyBpbml0IDogJ2FcbiAgOyBzdGVwcyA6IChUaW1lX25zLnQgKiAnYSkgU2VxdWVuY2UudFxuICB9XG5bQEBkZXJpdmluZyBmaWVsZHMgfmdldHRlcnMsIHNleHBfb2ZdXG5cbmxldCBpbnZhcmlhbnQgaW52YXJpYW50X2EgeyBpbml0OyBzdGVwcyA9IF8gfSA9IGludmFyaWFudF9hIGluaXRcblxubGV0IHJlYyB2YWx1ZV9pbnRlcm5hbCBpbml0IHN0ZXBzIH5hdCA9XG4gIG1hdGNoIFNlcXVlbmNlLm5leHQgc3RlcHMgd2l0aFxuICB8IE5vbmUgLT4gaW5pdFxuICB8IFNvbWUgKCh0LCBhKSwgc3RlcHMpIC0+XG4gICAgaWYgVGltZV9ucy4oIDwgKSBhdCB0IHRoZW4gaW5pdCBlbHNlIHZhbHVlX2ludGVybmFsIGEgc3RlcHMgfmF0XG47O1xuXG5sZXQgdmFsdWUgdCB+YXQgPSB2YWx1ZV9pbnRlcm5hbCB0LmluaXQgdC5zdGVwcyB+YXRcbmxldCBjb25zdGFudCBpbml0ID0geyBpbml0OyBzdGVwcyA9IFNlcXVlbmNlLmVtcHR5IH1cblxubGV0IGNyZWF0ZV9leG4gfmluaXQgfnN0ZXBzID1cbiAgaWYgbm90XG4gICAgICAgKExpc3QuaXNfc29ydGVkIHN0ZXBzIH5jb21wYXJlOihmdW4gKHRpbWUxLCBfKSAodGltZTIsIF8pIC0+XG4gICAgICAgICAgVGltZV9ucy5jb21wYXJlIHRpbWUxIHRpbWUyKSlcbiAgdGhlblxuICAgIHJhaXNlX3NcbiAgICAgIFslbWVzc2FnZVxuICAgICAgICBcIltTdGVwX2Z1bmN0aW9uLmNyZWF0ZV9leG5dIGdvdCB1bnNvcnRlZCB0aW1lc1wiXG4gICAgICAgICAgfnN0ZXBzOihzdGVwcyB8PiBMaXN0Lm1hcCB+Zjpmc3QgOiBUaW1lX25zLnQgbGlzdCldO1xuICB7IGluaXQ7IHN0ZXBzID0gc3RlcHMgfD4gU2VxdWVuY2Uub2ZfbGlzdCB9XG47O1xuXG5sZXQgY3JlYXRlX2Zyb21fc2VxdWVuY2UgfmluaXQgfnN0ZXBzID0geyBpbml0OyBzdGVwcyB9XG4iXX0=
