// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Logs
//# unitInfo: Requires: Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Map, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst$1 = ": [",
    cst_1 = "<1>",
    cst$3 = "@ ",
    cst$2 = "@,",
    cst_a = "@[%a@]",
    cst$0 = "] ",
    cst_app$0 = "app",
    cst_debug$0 = "debug",
    cst_error$0 = "error",
    cst_info$0 = "info",
    cst_quiet$0 = "quiet",
    cst_undocumented$1 = "undocumented",
    cst_warning$0 = "warning",
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    partial = [17, 0, 0],
    partial$0 =
      [11,
       "(uid ",
       [4,
        0,
        0,
        0,
        [12,
         41,
         [17,
          0,
          [12,
           32,
           [18,
            [1, [0, [11, cst_1, 0], cst_1]],
            [11, "(doc ", [3, 0, [12, 41, [17, 0, [12, 41, partial]]]]]]]]]]],
    partial$1 = [1, [0, [11, cst_1, 0], cst_1]],
    Stdlib = global_data.Stdlib,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Sys = global_data.Stdlib__Sys,
    strf = Stdlib_Format[141],
    _C_ = [0, [18, [1, [0, 0, cst]], [15, [17, 0, 0]]], cst_a],
    _B_ = [0, [18, [1, [0, 0, cst]], [15, [17, 0, 0]]], cst_a],
    _z_ = [0, [17, 0, [17, 4, 0]], "@]@."],
    _A_ = [0, [15, [18, [1, [0, 0, cst]], 0]], "%a@["],
    _w_ = [0, [12, 91, [2, 0, [11, cst$0, 0]]], "[%s] "],
    _x_ = [0, [2, 0, [11, cst$1, [2, 0, [11, cst$0, 0]]]], "%s: [%s] "],
    _y_ = [0, [2, 0, [11, cst$1, [15, [11, cst$0, 0]]]], "%s: [%a] "],
    _u_ = [0, [12, 91, [2, 0, [12, 93, 0]]], "[%s]"],
    _v_ = [0, [12, 91, [15, [12, 93, 0]]], "[%a]"],
    _q_ = [0, [17, [0, cst$2, 0, 0], 0], cst$2],
    _p_ = [0, [15, 0], "%a"],
    _r_ = [0, [18, [1, [0, [11, cst_1, 0], cst_1]], [12, 123, 0]], "@[<1>{"],
    _s_ = [0, [12, 125, [17, 0, 0]], "}@]"],
    _o_ =
      [0,
       [11, "tag named ", [2, 0, [11, " not found in set", 0]]],
       "tag named %s not found in set"],
    _n_ =
      [0,
       [18,
        [1, [0, [11, cst_1, 0], cst_1]],
        [12,
         40,
         [15,
          [17,
           [0, cst$3, 1, 0],
           [18, [1, [0, 0, cst]], [15, [17, 0, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<1>(%a@ @[%a@])@]"],
    _m_ = [0, [11, "tag:", [2, 0, 0]], "tag:%s"],
    cst_undocumented$0 = cst_undocumented$1,
    cst_E = "E",
    _j_ =
      [0,
       [18,
        [1, [0, [11, cst_1, 0], cst_1]],
        [11,
         "(src",
         [17,
          [0, cst$3, 1, 0],
          [18,
           [1, [0, [11, cst_1, 0], cst_1]],
           [11,
            "(name ",
            [3,
             0,
             [12,
              41,
              [17, 0, [17, [0, cst$3, 1, 0], [18, partial$1, partial$0]]]]]]]]]],
       "@[<1>(src@ @[<1>(name %S)@]@ @[<1>(uid %d)@] @[<1>(doc %S)@])@]"],
    cst_undocumented = cst_undocumented$1,
    _c_ = [0, [0, 2]],
    _d_ = [0, 0],
    _e_ = [0, [0, 3]],
    _f_ = [0, [0, 1]],
    _g_ = [0, [0, 4]],
    _h_ = [0, [0, 0]],
    _b_ = [0, [3, 0, [11, ": unknown log level", 0]], "%S: unknown log level"],
    cst_app = cst_app$0,
    cst_error = cst_error$0,
    cst_warning = cst_warning$0,
    cst_info = cst_info$0,
    cst_debug = cst_debug$0,
    cst_quiet = cst_quiet$0,
    cst_ERROR = "ERROR",
    cst_WARNING = "WARNING",
    cst_INFO = "INFO",
    cst_DEBUG = "DEBUG",
    _a_ = [0, 2],
    cst_application = "application",
    _k_ = [0, "The application log"];
   function pp_print_text(ppf, s){
    var len = runtime.caml_ml_string_length(s), left = [0, 0], right = [0, 0];
    function flush(param){
     var
      ___ = caml_call3(Stdlib_String[16], s, left[1], right[1] - left[1] | 0);
     caml_call2(Stdlib_Format[13], ppf, ___);
     right[1]++;
     left[1] = right[1];
     return 0;
    }
    for(;;){
     if(right[1] === len){
      var _Z_ = left[1] !== len ? 1 : 0;
      return _Z_ ? flush(0) : _Z_;
     }
     if(10 === caml_string_get(s, right[1])){
      flush(0);
      caml_call2(Stdlib_Format[34], ppf, 0);
     }
     else if(32 === caml_string_get(s, right[1])){
      flush(0);
      caml_call2(Stdlib_Format[27], ppf, 0);
     }
     else
      right[1]++;
    }
   }
   var level = [0, _a_];
   function level$0(param){return level[1];}
   function pp_level(ppf, param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return caml_call2(Stdlib_Format[13], ppf, cst_ERROR);
      case 2:
       return caml_call2(Stdlib_Format[13], ppf, cst_WARNING);
      case 3:
       return caml_call2(Stdlib_Format[13], ppf, cst_INFO);
      default: return caml_call2(Stdlib_Format[13], ppf, cst_DEBUG);
    }
   }
   function level_to_string(param){
    if(param)
     switch(param[1]){
       case 0:
        return cst_app;
       case 1:
        return cst_error;
       case 2:
        return cst_warning;
       case 3:
        return cst_info;
       default: return cst_debug;
     }
    return cst_quiet;
   }
   function level_of_string(l){
    return caml_string_notequal(l, cst_app$0)
            ? caml_string_notequal
               (l, cst_debug$0)
              ? caml_string_notequal
                 (l, cst_error$0)
                ? caml_string_notequal
                   (l, cst_info$0)
                  ? caml_string_notequal
                     (l, cst_quiet$0)
                    ? caml_string_notequal
                       (l, cst_warning$0)
                      ? [1, [0, 3854881, caml_call2(strf, _b_, l)]]
                      : _c_
                    : _d_
                  : _e_
                : _f_
              : _g_
            : _h_;
   }
   var id = [0, -1], _i_ = [0, 0];
   function create(opt, name){
    if(opt) var sth = opt[1], doc = sth; else var doc = cst_undocumented;
    var _Y_ = level[1];
    id[1]++;
    var src = [0, id[1], name, doc, _Y_];
    _i_[1] = [0, src, _i_[1]];
    return src;
   }
   function name(s){return s[2];}
   function doc(s){return s[3];}
   function level$1(s){return s[4];}
   function set_level(s, l){s[4] = l; return 0;}
   function equal(src0, src1){return src0[1] === src1[1] ? 1 : 0;}
   function compare(src0, src1){return caml_int_compare(src0[1], src1[1]);}
   function pp(ppf, src){
    return caml_call5(Stdlib_Format[137], ppf, _j_, src[2], src[1], src[3]);
   }
   function list(param){return _i_[1];}
   var default$0 = create(_k_, cst_application);
   function set_level$0(opt, l){
    if(opt) var sth = opt[1], all = sth; else var all = 1;
    level[1] = l;
    if(! all) return all;
    var _W_ = list(0);
    function _X_(s){return set_level(s, l);}
    return caml_call2(Stdlib_List[18], _X_, _W_);
   }
   var id$0 = [0, -1], _l_ = 0;
   function def(opt, name, pp){
    if(opt) var sth = opt[1], doc = sth; else var doc = cst_undocumented$0;
    var E = [248, cst_E, runtime.caml_fresh_oo_id(0)];
    function of_univ(param){
     if(param[1] !== E) return 0;
     var x = param[2];
     return x;
    }
    function to_univ(x){return [0, E, [0, x]];}
    id$0[1]++;
    return [0, id$0[1], to_univ, of_univ, name, doc, pp];
   }
   function name$0(d){return d[4];}
   function doc$0(d){return d[5];}
   function printer(d){return d[6];}
   function pp_def(ppf, d){
    return caml_call3(Stdlib_Format[137], ppf, _m_, d[4]);
   }
   function list$0(param){return _l_;}
   function pp$0(ppf, param){
    var v = param[2], d = param[1];
    return caml_call6(Stdlib_Format[137], ppf, _n_, pp_def, d, d[6], v);
   }
   function compare$0(param, _V_){
    var k1 = _V_[1], k0 = param[1];
    return caml_int_compare(k0[1], k1[1]);
   }
   var
    Key = [0, compare$0],
    M = caml_call1(Stdlib_Map[1], Key),
    empty = M[1],
    is_empty = M[31];
   function mem(k, s){return caml_call2(M[32], [0, k], s);}
   function add(k, v, s){return caml_call3(M[2], [0, k], [0, k, v], s);}
   function rem(k, s){return caml_call2(M[6], [0, k], s);}
   function find(k, s){
    try{
     var
      match = caml_call2(M[17], [0, k], s),
      v = match[2],
      k$0 = match[1],
      _S_ = caml_call1(k$0[2], v),
      _T_ = caml_call1(k[3], _S_);
     return _T_;
    }
    catch(_U_){
     var _R_ = caml_wrap_exception(_U_);
     if(_R_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_R_, 0);
    }
   }
   function get(k, s){
    var match = find(k, s);
    if(match){var v = match[1]; return v;}
    var _Q_ = caml_call2(strf, _o_, k[4]);
    return caml_call1(Stdlib[1], _Q_);
   }
   function fold(f, s, acc){
    function _P_(param, t, acc){return caml_call2(f, t, acc);}
    return caml_call3(M[24], _P_, s, acc);
   }
   function pp_set(ppf, s){
    function pp_tag(tag, is_first){
     if(! is_first) caml_call2(Stdlib_Format[137], ppf, _q_);
     caml_call4(Stdlib_Format[137], ppf, _p_, pp$0, tag);
     return 0;
    }
    caml_call2(Stdlib_Format[137], ppf, _r_);
    fold(pp_tag, s, 1);
    caml_call2(Stdlib_Format[137], ppf, _s_);
    return 0;
   }
   function _t_(param){return 0;}
   var reporter_mutex = [0, [0, function(param){return;}, _t_]];
   function set_reporter_mutex(lock, unlock){
    reporter_mutex[1] = [0, lock, unlock];
    return 0;
   }
   var
    nop_reporter =
      [0,
       function(param, _O_, over, k, _N_){
        caml_call1(over, 0);
        return caml_call1(k, 0);
       }],
    reporter = [0, nop_reporter];
   function set_reporter(r){reporter[1] = r; return 0;}
   function reporter$0(param){return reporter[1];}
   function report(src, level, over, k, msgf){
    function over$0(param){
     caml_call1(over, 0);
     return caml_call1(reporter_mutex[1][2], 0);
    }
    caml_call1(reporter_mutex[1][1], 0);
    return caml_call5(reporter[1][1], src, level, over$0, k, msgf);
   }
   function pp_header(ppf, param){
    var h = param[2], l = param[1];
    if(! h)
     return 0 === l
             ? 0
             : caml_call4(Stdlib_Format[137], ppf, _v_, pp_level, l);
    var h$0 = h[1];
    return caml_call3(Stdlib_Format[137], ppf, _u_, h$0);
   }
   var n = caml_sys_argv(0).length - 1;
   if(0 === n)
    var x = caml_call1(Stdlib_Filename[13], Stdlib_Sys[1]);
   else
    var
     _D_ = runtime.caml_check_bound(caml_sys_argv(0), 0)[1],
     x = caml_call1(Stdlib_Filename[13], _D_);
   var pf = Stdlib_Format[137];
   function pp_exec_header(ppf, param){
    var h = param[2], l = param[1];
    if(0 === l){
     if(! h) return 0;
     var h$0 = h[1];
     return caml_call3(pf, ppf, _w_, h$0);
    }
    if(! h) return caml_call5(pf, ppf, _y_, x, pp_level, l);
    var h$1 = h[1];
    return caml_call4(pf, ppf, _x_, x, h$1);
   }
   function format_reporter(opt, _K_, _J_, param){
    if(opt)
     var sth = opt[1], pp_header = sth;
    else
     var pp_header = pp_exec_header;
    if(_K_)
     var sth$0 = _K_[1], app = sth$0;
    else
     var app = Stdlib_Format[110];
    if(_J_)
     var sth$1 = _J_[1], dst = sth$1;
    else
     var dst = Stdlib_Format[112];
    function report(src, level, over, k, msgf){
     function k$0(param){caml_call1(over, 0); return caml_call1(k, 0);}
     return caml_call1
             (msgf,
              function(header, tags, fmt){
               var
                ppf = 0 === level ? app : dst,
                _L_ = caml_call2(Stdlib[98], fmt, _z_),
                _M_ = caml_call2(Stdlib[98], _A_, _L_);
               return caml_call5
                       (Stdlib_Format[144],
                        k$0,
                        ppf,
                        _M_,
                        pp_header,
                        [0, level, header]);
              });
    }
    return [0, report];
   }
   var err_count = [0, 0];
   function err_count$0(param){return err_count[1];}
   function incr_err_count(param){err_count[1]++; return 0;}
   var warn_count = [0, 0];
   function warn_count$0(param){return warn_count[1];}
   function incr_warn_count(param){warn_count[1]++; return 0;}
   function over(param){return 0;}
   function kmsg(k, opt, level, msgf){
    if(opt) var sth = opt[1], src = sth; else var src = default$0;
    var match = src[4];
    if(! match) return caml_call1(k, 0);
    var level$0 = match[1];
    if(level$0 < level){
     if(1 === level) err_count[1]++; else if(2 === level) warn_count[1]++;
     return caml_call1(k, 0);
    }
    if(1 === level) err_count[1]++; else if(2 === level) warn_count[1]++;
    return report(src, level, over, k, msgf);
   }
   function kunit(param){return 0;}
   function msg(src, level, msgf){return kmsg(kunit, src, level, msgf);}
   function app(src, msgf){return kmsg(kunit, src, 0, msgf);}
   function err(src, msgf){return kmsg(kunit, src, 1, msgf);}
   function warn(src, msgf){return kmsg(kunit, src, 2, msgf);}
   function info(src, msgf){return kmsg(kunit, src, 3, msgf);}
   function debug(src, msgf){return kmsg(kunit, src, 4, msgf);}
   function on_error(src, opt, header, tags, pp, use, param){
    if(opt) var sth = opt[1], level = sth; else var level = 1;
    if(0 === param[0]){var v = param[1]; return v;}
    var e = param[1];
    function _I_(m){return caml_call5(m, header, tags, _B_, pp, e);}
    return kmsg(function(param){return caml_call1(use, e);}, src, level, _I_);
   }
   function on_error_msg(src, opt, header, tags, use, param){
    if(opt) var sth = opt[1], level = sth; else var level = 1;
    if(0 === param[0]){var v = param[1]; return v;}
    var msg = param[1][2];
    return kmsg
            (use,
             src,
             level,
             function(m){
              return caml_call5(m, header, tags, _C_, pp_print_text, msg);
             });
   }
   function src_log(src){
    function msg$0(level, msgf){return msg([0, src], level, msgf);}
    function kmsg$0(k, level, msgf){return kmsg(k, [0, src], level, msgf);}
    function app(msgf){return msg$0(0, msgf);}
    function err(msgf){return msg$0(1, msgf);}
    function warn(msgf){return msg$0(2, msgf);}
    function info(msgf){return msg$0(3, msgf);}
    function debug(msgf){return msg$0(4, msgf);}
    function on_error$0(level, header, tags, pp, use){
     var _G_ = [0, src];
     return function(_H_){
      return on_error(_G_, level, header, tags, pp, use, _H_);};
    }
    function on_error_msg$0(level, header, tags, use){
     var _E_ = [0, src];
     return function(_F_){
      return on_error_msg(_E_, level, header, tags, use, _F_);};
    }
    return [0,
            msg$0,
            app,
            err,
            warn,
            info,
            debug,
            kmsg$0,
            on_error$0,
            on_error_msg$0];
   }
   var
    Logs =
      [0,
       level$0,
       set_level$0,
       pp_level,
       level_to_string,
       level_of_string,
       default$0,
       [0, create, name, doc, level$1, set_level, equal, compare, pp, list],
       [0,
        def,
        name$0,
        doc$0,
        printer,
        pp_def,
        list$0,
        pp$0,
        empty,
        is_empty,
        mem,
        add,
        rem,
        find,
        get,
        fold,
        pp_set],
       msg,
       app,
       err,
       warn,
       info,
       debug,
       kmsg,
       on_error,
       on_error_msg,
       src_log,
       nop_reporter,
       format_reporter,
       reporter$0,
       set_reporter,
       set_reporter_mutex,
       report,
       incr_err_count,
       incr_warn_count,
       pp_print_text,
       pp_header,
       err_count$0,
       warn_count$0];
   runtime.caml_register_global(53, Logs, "Logs");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJsb2dzLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJLDRDLGU7O0s7WTtLOzs7O0k7Ozs7OztLLFU7TTtNOztvQjtNO007Ozs7O0c7RzsyQixnQjs7STs7Tzs7TyxPOztPLE87O08sTztlLE87Ozs7STs7O1E7O1E7O1E7O1E7Z0I7O0k7Rzs7STs7Ozs7Ozs7Ozs7eUM7Ozs7Ozs7RztHLEksYzs7STtJOztJOztJO0c7b0IsWTttQixZO3VCLFk7NEIsbUI7OEIsbUM7Z0MsMEM7O0k7Rzt3QixjO0c7O0k7O2M7STtvQix1QjtJLE87RztHLEksZ0I7O0k7STs7SyxtQjs7SztJO3dCLHNCOztJO0c7c0IsWTtxQixZO3VCLFk7O0k7RzswQixXOzs7SSxPOzs7Ozs7RztJOzs7O3NCLE8sNkI7eUIsTyx1QztzQixPLDRCOztJO0s7TSxROzs7TSxNO00sTTtLOzs7OzJCOzs7Rzs7STtnQztJLFU7SSxPO0c7O2dDLE8sc0I7SSxPO0c7OztLLGU7SztLO0k7STtJO0k7STtHO3VCLFM7Ryw2QyxPOztJOztHO0c7STs7O1E7USxPO087STs0QiwwQjs4QixtQjs7O0s7SyxPO0k7STtJLE87Rzs7O0k7OztlOztJLE87Ozs7WTs7STtLO1M7Ozs7STthOztLLE87O1ksTzs7SSxPOzs7STs7OztJOzs7O0k7Ozs7O3lCLHFCLE8saUI7SyxPOzs7ZTs7Z0IsTTtnQixNO2UsTzs7Ozs7OztjO0k7STtHO0c7K0Isb0I7a0MseUI7RztnQyxxQjttQywwQjt3QixTOztJO0k7Z0IsTzs7OztLLE87OztJO0c7eUIsUztrQyxxQzsyQixpQzsyQixpQzs0QixpQzs0QixpQzs2QixpQzs7STtJLHFDOztvQixPLHdDO2dDLDBCOzs7STtJLHFDOzs7Ozs7O2MsTzthOzs7Z0Msa0M7b0Msc0M7dUIsc0I7dUIsc0I7d0Isc0I7d0Isc0I7eUIsc0I7O0s7SztNO0k7O0s7SztNO0k7STs7Ozs7Ozs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6W119
