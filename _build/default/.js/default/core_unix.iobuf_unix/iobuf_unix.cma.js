// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Iobuf_unix
//# unitInfo: Requires: Bigstring_unix, Core, Core__Array, Core__Bigstring, Core__Char, Core__Or_error, Core__Ordered_collection_common, Core__Queue, Core_unix, Core_unix__File_descr, Iobuf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Iobuf_unix$0 = "Iobuf_unix",
    cst = "_",
    cst_iobuf_unix$0 = "iobuf_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Iobuf = global_data.Iobuf,
    Core_Queue = global_data.Core__Queue,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Char = global_data.Core__Char,
    Core_Ordered_collection_common =
      global_data.Core__Ordered_collection_common,
    Core_unix = global_data.Core_unix,
    Bigstring_unix = global_data.Bigstring_unix,
    Core_Array = global_data.Core__Array,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_Or_error = global_data.Core__Or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Iobuf_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_iobuf_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "iobuf_unix/src/iobuf_unix.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_iobuf_unix$0, "iobuf_unix.ml");
   var
    compare_ok_or_eof = runtime.caml_int_compare,
    _d_ = [0, cst],
    _c_ = [0, cst],
    cst_Recvmmsg_context_create_al =
      "Recvmmsg_context.create: all buffers must be reset",
    _a_ = [0, "Eof"],
    _b_ = [0, "Ok"],
    cst_Iobuf_recvmmsg_assume_fd_i = "Iobuf.recvmmsg_assume_fd_is_nonblocking",
    cst_iobuf_unix = cst_iobuf_unix$0,
    cst_Iobuf_unix = cst_Iobuf_unix$0;
   function sexp_of_ok_or_eof(param){return param ? _a_ : _b_;}
   function input(t, ch){
    try{
     var
      _ac_ = caml_call1(Iobuf[78][1], t),
      _ad_ = [0, caml_call1(Iobuf[29], t)],
      _ae_ = [0, caml_call1(Iobuf[78][4], t)],
      n$0 = caml_call5(Bigstring_unix[135], 0, ch, _ae_, _ad_, _ac_);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bigstring_unix[125] && exn[3] === Stdlib[12]){var n = exn[2]; caml_call2(Iobuf[40], t, n); return 1;}
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    caml_call2(Iobuf[40], t, n$0);
    return 0;
   }
   function read(t, fd){
    try{
     var
      _$_ = caml_call1(Iobuf[78][1], t),
      _aa_ = [0, caml_call1(Iobuf[29], t)],
      _ab_ = [0, caml_call1(Iobuf[78][4], t)],
      n$0 = caml_call5(Bigstring_unix[126], 0, fd, _ab_, _aa_, _$_);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bigstring_unix[125] && exn[3] === Stdlib[12]){var n = exn[2]; caml_call2(Iobuf[40], t, n); return 1;}
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    caml_call2(Iobuf[40], t, n$0);
    return 0;
   }
   function read_assume_fd_is_nonblocking(t, fd){
    var
     _X_ = caml_call1(Iobuf[78][1], t),
     _Y_ = [0, caml_call1(Iobuf[29], t)],
     _Z_ = [0, caml_call1(Iobuf[78][4], t)],
     nread = caml_call4(Bigstring_unix[131], fd, _Z_, _Y_, _X_);
    if(caml_call1(Core_unix[5][2][6], nread)){
     var ___ = caml_call1(Core_unix[5][2][9], nread);
     caml_call2(Iobuf[40], t, ___);
    }
    return caml_call1(Core_unix[5][10], nread);
   }
   function pread_assume_fd_is_nonblocking(t, fd, offset){
    var
     _U_ = caml_call1(Iobuf[78][1], t),
     _V_ = [0, caml_call1(Iobuf[29], t)],
     _W_ = [0, caml_call1(Iobuf[78][4], t)],
     nread = caml_call5(Bigstring_unix[134], fd, offset, _W_, _V_, _U_);
    return caml_call2(Iobuf[40], t, nread);
   }
   function recvfrom_assume_fd_is_nonblock(t, fd){
    var
     _R_ = caml_call1(Iobuf[78][1], t),
     _S_ = [0, caml_call1(Iobuf[29], t)],
     _T_ = [0, caml_call1(Iobuf[78][4], t)],
     match = caml_call4(Bigstring_unix[130], fd, _T_, _S_, _R_),
     sockaddr = match[2],
     nread = match[1];
    caml_call2(Iobuf[40], t, nread);
    return sockaddr;
   }
   function create(iobufs){
    function _G_(t){
     var _P_ = caml_call1(Iobuf[28], t), _Q_ = caml_call1(Iobuf[29], t);
     return caml_call2(Core[90], _Q_, _P_);
    }
    if(caml_call2(Core_Array[40], iobufs, _G_))
     var _N_ = runtime.iobuf_recvmmsg_ctx(iobufs);
    else
     var
      _H_ = 0,
      _I_ = function(param){return _c_;},
      _J_ = function(param){return _d_;},
      _K_ = caml_call2(Iobuf[4], _J_, _I_),
      _L_ = [0, caml_call2(Core[301], _K_, iobufs), _H_],
      _M_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Recvmmsg_context_create_al),
          _L_]],
      _N_ = caml_call1(Core[261], _M_);
    function _O_(buf){return caml_call1(Iobuf[78][1], buf);}
    return [0, iobufs, caml_call2(Core_Array[27], iobufs, _O_), _N_];
   }
   function recvmmsg_assume_fd_is_nonblock(fd, param){
    var ctx = param[3], iobufs = param[1];
    return runtime.iobuf_recvmmsg_assume_fd_is_nonblocking_stub
            (fd, iobufs, ctx);
   }
   var
    fd = caml_call1(Core_unix_File_descr[13], -1),
    _e_ = recvmmsg_assume_fd_is_nonblock(fd, create([0])),
    match = caml_call1(Core_unix[5][2][8], _e_);
   a:
   {
    if(1 === match[0]){
     var _f_ = match[1];
     if(typeof _f_ === "number" && 25 === _f_){
      var
       recvmmsg_assume_fd_is_nonblock$0 =
         caml_call1(Core_Or_error[52], cst_Iobuf_recvmmsg_assume_fd_i);
      break a;
     }
    }
    var
     recvmmsg_assume_fd_is_nonblock$0 = [0, recvmmsg_assume_fd_is_nonblock];
   }
   function unsafe_sent(t, result){
    if(! caml_call1(Core_unix[5][2][6], result))
     return caml_call1(Core_unix[5][2][11], result);
    var _F_ = caml_call1(Core_unix[5][2][9], result);
    caml_call2(Iobuf[40], t, _F_);
    return Core_unix[5][6];
   }
   function send_nonblocking_no_sigpipe(param){
    var e = Bigstring_unix[139];
    if(0 !== e[0]) return e;
    var send = e[1];
    return [0,
            function(t, fd){
             var
              _D_ = caml_call1(Iobuf[78][1], t),
              _E_ = [0, caml_call1(Iobuf[29], t)];
             return unsafe_sent
                     (t,
                      caml_call4
                       (send, fd, [0, caml_call1(Iobuf[78][4], t)], _E_, _D_));
            }];
   }
   function sendto_nonblocking_no_sigpipe(param){
    var e = Bigstring_unix[140];
    if(0 !== e[0]) return e;
    var sendto = e[1];
    return [0,
            function(t, fd, addr){
             var
              _B_ = caml_call1(Iobuf[78][1], t),
              _C_ = [0, caml_call1(Iobuf[29], t)];
             return unsafe_sent
                     (t,
                      caml_call5
                       (sendto,
                        fd,
                        [0, caml_call1(Iobuf[78][4], t)],
                        _C_,
                        _B_,
                        addr));
            }];
   }
   function output(t, ch){
    var
     _y_ = caml_call1(Iobuf[78][1], t),
     _z_ = [0, caml_call1(Iobuf[29], t)],
     _A_ = [0, caml_call1(Iobuf[78][4], t)];
    return caml_call5(Bigstring_unix[149], 0, ch, _A_, _z_, _y_);
   }
   function write(t, fd){
    var
     _v_ = caml_call1(Iobuf[78][1], t),
     _w_ = [0, caml_call1(Iobuf[29], t)],
     _x_ = [0, caml_call1(Iobuf[78][4], t)];
    return caml_call4(Bigstring_unix[141], fd, _x_, _w_, _v_);
   }
   function write_assume_fd_is_nonblocking(t, fd){
    var _t_ = caml_call1(Iobuf[78][1], t), _u_ = caml_call1(Iobuf[29], t);
    return runtime.bigstring_write_assume_fd_is_nonblocking_stub
            (fd, caml_call1(Iobuf[78][4], t), _u_, _t_);
   }
   var Peek = [0, output, write, write_assume_fd_is_nonblocking];
   function output$0(t, ch){
    var nwritten = caml_call2(Peek[1], t, ch);
    return caml_call2(Iobuf[40], t, nwritten);
   }
   function write$0(t, fd){
    var nwritten = caml_call2(Peek[2], t, fd);
    return caml_call2(Iobuf[40], t, nwritten);
   }
   function write_assume_fd_is_nonblocking$0(t, fd){
    var nwritten = caml_call2(Peek[3], t, fd);
    return caml_call2(Iobuf[40], t, nwritten);
   }
   function pwrite_assume_fd_is_nonblockin(t, fd, offset){
    var
     _q_ = caml_call1(Iobuf[78][1], t),
     _r_ = [0, caml_call1(Iobuf[29], t)],
     _s_ = [0, caml_call1(Iobuf[78][4], t)],
     nwritten = caml_call5(Bigstring_unix[142], fd, offset, _s_, _r_, _q_);
    return caml_call2(Iobuf[40], t, nwritten);
   }
   function fillf_float(t, c_format, value){
    var
     limit = caml_call1(Iobuf[29], t),
     result =
       runtime.iobuf_unsafe_pokef_double_bytecode
        (t, c_format, caml_call1(Iobuf[29], t), value);
    return caml_call2(Core[88], result, limit)
            ? -312493282
            : caml_call2
               (Core[92], result, 0)
              ? 1067692448
              : (caml_call2(Iobuf[40], t, result), 17724);
   }
   function to_iovec_shared(pos, len, t){
    var
     _n_ = caml_call1(Iobuf[29], t),
     match = caml_call4(Core_Ordered_collection_common[1], pos, len, 0, _n_),
     len$0 = match[2],
     pos$0 = match[1],
     _o_ = caml_call1(Iobuf[78][1], t),
     _p_ = [0, caml_call1(Iobuf[78][4], t) + pos$0 | 0];
    return caml_call3(Core_unix[276][7], _p_, [0, len$0], _o_);
   }
   var Expert = [0, fillf_float, to_iovec_shared];
   function present_line(fix_win_eol, acc, f, buf, len){
    a:
    {
     if(fix_win_eol && caml_call2(Core[91], len, 0)){
      var _m_ = caml_call2(Iobuf[66][3][4], buf, len - 1 | 0);
      if(caml_call2(Core_Char[54], 13, _m_)){
       var len_of_line = len - 1 | 0;
       break a;
      }
     }
     var len_of_line = len;
    }
    caml_call2(Iobuf[42], buf, len_of_line);
    return caml_call2(f, acc, buf);
   }
   function fold_lines_raw(opt, _g_, ch, init, f){
    if(opt) var sth = opt[1], fix_win_eol = sth; else var fix_win_eol = 1;
    if(_g_)
     var sth$0 = _g_[1], buf = sth$0;
    else
     var buf = caml_call1(Iobuf[10], 1024);
    caml_call1(Iobuf[44], buf);
    var acc$1 = [0, init];
    for(;;){
     var result = input(buf, ch);
     caml_call1(Iobuf[45], buf);
     var acc$2 = acc$1[1], acc = acc$2;
     for(;;){
      var
       len = caml_call1(Iobuf[29], buf),
       len$0 = caml_call4(Iobuf[66][3][34], buf, 0, len, 10);
      if(! caml_call2(Core[88], len$0, 0)) break;
      var
       hi = caml_call1(Iobuf[78][3], buf),
       lo = caml_call1(Iobuf[78][4], buf),
       next_line_starts_at = (lo + len$0 | 0) + 1 | 0,
       acc$0 = present_line(fix_win_eol, acc, f, buf, len$0);
      caml_call2(Iobuf[78][9], buf, next_line_starts_at);
      caml_call2(Iobuf[78][8], buf, hi);
      var acc = acc$0;
     }
     acc$1[1] = acc;
     var
      length = caml_call1(Iobuf[29], buf),
      capacity = caml_call1(Iobuf[28], buf);
     if(caml_call2(Core[90], length, capacity)){
      var
       new_capacity = caml_call2(Core[97], 1024, capacity * 2 | 0),
       str = caml_call1(Core_Bigstring[121], new_capacity),
       _h_ = caml_call1(Iobuf[24], buf);
      caml_call5(Iobuf[62][2][1], _h_, 0, str, 0, 0);
      caml_call4(Iobuf[78][12], buf, 0, new_capacity, str);
      caml_call2(Iobuf[41], buf, length);
     }
     caml_call1(Iobuf[47], buf);
     var _i_ = result ? 0 : 1;
     if(! _i_){
      var _j_ = caml_call1(Iobuf[28], buf), _k_ = caml_call1(Iobuf[29], buf);
      if(caml_call2(Core[92], _k_, _j_)){
       caml_call1(Iobuf[45], buf);
       var _l_ = caml_call1(Iobuf[29], buf);
       acc$1[1] = present_line(fix_win_eol, acc$1[1], f, buf, _l_);
      }
      return acc$1[1];
     }
    }
   }
   function fold_lines(fix_win_eol, buf, ch, init, f){
    return fold_lines_raw
            (fix_win_eol,
             buf,
             ch,
             init,
             function(acc, buf){
              return caml_call2
                      (f, acc, caml_call4(Iobuf[66][3][29], 0, 0, buf, 0));
             });
   }
   function iter_lines(fix_win_eol, buf, ch, f){
    return fold_lines
            (fix_win_eol,
             buf,
             ch,
             0,
             function(param, s){return caml_call1(f, s);});
   }
   function input_lines(fix_win_eol, buf, ch){
    var v = caml_call2(Core_Queue[66], 0, 0);
    iter_lines
     (fix_win_eol,
      buf,
      ch,
      function(str){return caml_call2(Core_Queue[43], v, str);});
    return caml_call1(Core_Queue[29], v);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_iobuf_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Iobuf_unix);
   var
    Iobuf_unix =
      [0,
       compare_ok_or_eof,
       sexp_of_ok_or_eof,
       input,
       read,
       read_assume_fd_is_nonblocking,
       pread_assume_fd_is_nonblocking,
       recvfrom_assume_fd_is_nonblock,
       [0, create],
       recvmmsg_assume_fd_is_nonblock$0,
       send_nonblocking_no_sigpipe,
       sendto_nonblocking_no_sigpipe,
       Peek,
       output$0,
       write$0,
       write_assume_fd_is_nonblocking$0,
       pwrite_assume_fd_is_nonblockin,
       [0, fold_lines, iter_lines, input_lines, fold_lines_raw],
       Expert];
   runtime.caml_register_global(30, Iobuf_unix, cst_Iobuf_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
