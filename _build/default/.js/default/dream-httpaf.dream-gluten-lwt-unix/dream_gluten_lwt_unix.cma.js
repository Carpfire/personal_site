// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_gluten_lwt_unix
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_gluten_lwt_unix = [0];
   runtime.caml_register_global
    (0, Dream_gluten_lwt_unix, "Dream_gluten_lwt_unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten_lwt_unix__Tls_io
//# unitInfo: Requires: Lwt, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_TLS_not_available$1 = "TLS not available",
    cst_Tls_not_available$3 = "Tls not available";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib,
    cst_TLS_not_available$0 = cst_TLS_not_available$1,
    cst_TLS_not_available = cst_TLS_not_available$1,
    cst_Tls_not_available$2 = cst_Tls_not_available$3,
    cst_Tls_not_available$1 = cst_Tls_not_available$3,
    cst_Tls_not_available$0 = cst_Tls_not_available$3,
    cst_Tls_not_available = cst_Tls_not_available$3;
   function read(param, bigstring, _d_, _c_){
    return caml_call1(Lwt[44], cst_Tls_not_available);
   }
   function writev(param, iovecs){
    return caml_call1(Lwt[44], cst_Tls_not_available$0);
   }
   function shutdown_receive(param){
    return caml_call1(Stdlib[2], cst_Tls_not_available$1);
   }
   function close(param){return caml_call1(Lwt[44], cst_Tls_not_available$2);}
   var Io = [0, read, writev, shutdown_receive, close];
   function make_client(param, socket){return caml_call1(Lwt[4], -565061191);}
   function make_server(param, _b_, _a_){
    caml_call1(Stdlib[2], cst_TLS_not_available);
    return function(socket){
     return caml_call1(Lwt[44], cst_TLS_not_available$0);};
   }
   var Dream_gluten_lwt_unix_Tls_io = [0, Io, make_client, make_server];
   runtime.caml_register_global
    (8, Dream_gluten_lwt_unix_Tls_io, "Dream_gluten_lwt_unix__Tls_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten_lwt_unix__Ssl_io
//# unitInfo: Requires: Lwt, Lwt_list, Lwt_ssl, Lwt_unix, Ssl, Stdlib, Stdlib__List, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Ssl = global_data.Ssl,
    Lwt_ssl = global_data.Lwt_ssl,
    Lwt = global_data.Lwt,
    Lwt_list = global_data.Lwt_list,
    Unix = global_data.Unix,
    Stdlib = global_data.Stdlib,
    Lwt_unix = global_data.Lwt_unix,
    _b_ = [0, 0, 0],
    _a_ = [0, 0, 0];
   function close(ssl){
    var
     fd = caml_call1(Lwt_ssl[24], ssl),
     match = caml_call1(Lwt_unix[9], fd);
    if(typeof match === "number" && ! match){
     var
      _r_ =
        function(exn){
         if(exn[1] === Unix[1]){
          var _x_ = exn[2];
          if(typeof _x_ === "number" && 59 === _x_) return Lwt[36];
         }
         return caml_call1(Lwt[5], exn);
        },
      _s_ =
        function(param){
         function _t_(shutdown){
          function _v_(param){return caml_call1(Lwt_ssl[18], ssl);}
          var _w_ = caml_call3(Lwt[64], Lwt_ssl[17], ssl, 2);
          return caml_call2(Lwt[33][1], _w_, _v_);
         }
         var _u_ = caml_call1(Lwt_ssl[21], ssl);
         return caml_call2(Lwt[33][1], _u_, _t_);
        };
     return caml_call2(Lwt[7], _s_, _r_);
    }
    return Lwt[36];
   }
   function read(ssl, bigstring, off, len){
    function _m_(exn){
     if(exn[1] === Unix[1]){
      var _q_ = exn[2];
      if(typeof _q_ === "number" && 3 === _q_)
       return caml_call1(Lwt[5], Stdlib[12]);
     }
     return caml_call1(Lwt[5], exn);
    }
    function _n_(param){
     function _o_(n){
      if(0 === n) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      return n;
     }
     var _p_ = caml_call4(Lwt_ssl[13], ssl, bigstring, off, len);
     return caml_call2(Lwt[33][2], _p_, _o_);
    }
    return caml_call2(Lwt[7], _n_, _m_);
   }
   function writev(ssl, iovecs){
    function _d_(exn){
     if(exn[1] === Unix[1]){
      var _l_ = exn[2];
      if
       (typeof _l_ === "number"
        &&
         3 === _l_
         && ! runtime.caml_string_notequal(exn[3], "check_descriptor"))
       return caml_call1(Lwt[4], -1025106484);
     }
     return caml_call1(Lwt[5], exn);
    }
    function _e_(param){
     function _f_(n){return [0, 17724, n];}
     var _g_ = 0;
     function _h_(acc, param){
      var len = param[3], off = param[2], buffer = param[1];
      function _j_(written){return acc + written | 0;}
      var _k_ = caml_call4(Lwt_ssl[14], ssl, buffer, off, len);
      return caml_call2(Lwt[33][2], _k_, _j_);
     }
     var _i_ = caml_call3(Lwt_list[11], _h_, _g_, iovecs);
     return caml_call2(Lwt[33][2], _i_, _f_);
    }
    return caml_call2(Lwt[7], _e_, _d_);
   }
   function shutdown_receive(ssl){return 0;}
   var Io = [0, read, writev, shutdown_receive, close];
   function make_default_client(alpn_protocols, socket){
    var client_ctx = caml_call2(Ssl[22], 0, 0);
    caml_call2(Ssl[39], client_ctx, _a_);
    caml_call1(Ssl[41], client_ctx);
    if(alpn_protocols){
     var protos = alpn_protocols[1];
     caml_call2(Ssl[37], client_ctx, protos);
    }
    return caml_call2(Lwt_ssl[5], socket, client_ctx);
   }
   function first_match(l1, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var x = param$0[1];
     if(caml_call2(Stdlib_List[37], x, l1)) return [0, x];
     var xs = param$0[2], param$0 = xs;
    }
   }
   function make_server(alpn_protocols, certfile, keyfile, socket){
    var server_ctx = caml_call2(Ssl[22], 0, 1);
    caml_call2(Ssl[39], server_ctx, _b_);
    caml_call3(Ssl[29], server_ctx, certfile, keyfile);
    if(alpn_protocols){
     var protos = alpn_protocols[1];
     caml_call2(Ssl[37], server_ctx, protos);
     var
      _c_ =
        function(client_protos){return first_match(client_protos, protos);};
     caml_call2(Ssl[38], server_ctx, _c_);
    }
    return caml_call2(Lwt_ssl[4], socket, server_ctx);
   }
   var
    Dream_gluten_lwt_unix_Ssl_io =
      [0, Io, make_default_client, first_match, make_server];
   runtime.caml_register_global
    (11, Dream_gluten_lwt_unix_Ssl_io, "Dream_gluten_lwt_unix__Ssl_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_gluten_lwt_unix__Gluten_lwt_unix
//# unitInfo: Requires: Dream_gluten_lwt__Gluten_lwt, Dream_gluten_lwt_unix__Ssl_io, Dream_gluten_lwt_unix__Tls_io, Faraday_lwt_unix, Lwt, Lwt_bytes, Lwt_unix, Stdlib, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_gluten_lwt_unix_Ssl_io = global_data.Dream_gluten_lwt_unix__Ssl_io,
    Dream_gluten_lwt_unix_Tls_io = global_data.Dream_gluten_lwt_unix__Tls_io,
    Lwt_unix = global_data.Lwt_unix,
    Unix = global_data.Unix,
    Faraday_lwt_unix = global_data.Faraday_lwt_unix,
    Stdlib = global_data.Stdlib,
    Lwt_bytes = global_data.Lwt_bytes,
    Lwt = global_data.Lwt,
    Dream_gluten_lwt_Gluten_lwt = global_data.Dream_gluten_lwt__Gluten_lwt;
   function close(socket){
    var match = caml_call1(Lwt_unix[9], socket);
    if(typeof match === "number" && match) return Lwt[36];
    function _l_(exn){return Lwt[36];}
    function _m_(param){
     caml_call2(Lwt_unix[99], socket, 2);
     return caml_call1(Lwt_unix[25], socket);
    }
    return caml_call2(Lwt[7], _m_, _l_);
   }
   function read(socket, bigstring, off, len){
    function _f_(exn){
     if(exn[1] === Unix[1]){
      var _j_ = exn[2];
      if(typeof _j_ === "number" && 3 === _j_)
       return caml_call1(Lwt[5], Stdlib[12]);
     }
     function _k_(param){return close(socket);}
     caml_call1(Lwt[11], _k_);
     return caml_call1(Lwt[5], exn);
    }
    function _g_(param){
     function _h_(n){
      if(0 === n) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      return n;
     }
     var _i_ = caml_call4(Lwt_bytes[23], socket, bigstring, off, len);
     return caml_call2(Lwt[33][2], _i_, _h_);
    }
    return caml_call2(Lwt[7], _g_, _f_);
   }
   function writev(socket){return caml_call1(Faraday_lwt_unix[2], socket);}
   function shutdown_receive(socket){
    var _a_ = 1 !== caml_call1(Lwt_unix[9], socket) ? 1 : 0, command = 0;
    if(! _a_) return _a_;
    try{var _d_ = caml_call2(Lwt_unix[99], socket, command); return _d_;}
    catch(_e_){
     var _b_ = caml_wrap_exception(_e_);
     if(_b_[1] === Unix[1]){
      var _c_ = _b_[2];
      if(typeof _c_ === "number" && 59 === _c_) return 0;
     }
     throw caml_maybe_attach_backtrace(_b_, 0);
    }
   }
   var
    Io = [0, read, writev, shutdown_receive, close],
    include = caml_call1(Dream_gluten_lwt_Gluten_lwt[1], Io),
    create_upgradable_connection_h = include[1],
    create_connection_handler = include[2],
    include$0 =
      caml_call1
       (Dream_gluten_lwt_Gluten_lwt[1], Dream_gluten_lwt_unix_Tls_io[1]),
    create_upgradable_connection_h$0 = include$0[1],
    create_connection_handler$0 = include$0[2];
   function create_default(alpn_protocols, certfile, keyfile){
    var
     make_tls_server =
       caml_call3
        (Dream_gluten_lwt_unix_Tls_io[3], alpn_protocols, certfile, keyfile);
    return function(client_addr, socket){
     return caml_call1(make_tls_server, socket);};
   }
   var
    TLS =
      [0,
       create_upgradable_connection_h$0,
       create_connection_handler$0,
       create_default],
    include$1 =
      caml_call1
       (Dream_gluten_lwt_Gluten_lwt[1], Dream_gluten_lwt_unix_Ssl_io[1]),
    create_upgradable_connection_h$1 = include$1[1],
    create_connection_handler$1 = include$1[2];
   function create_default$0(alpn_protocols, certfile, keyfile){
    var
     make_ssl_server =
       caml_call3
        (Dream_gluten_lwt_unix_Ssl_io[4], alpn_protocols, certfile, keyfile);
    return function(client_addr, socket){
     return caml_call1(make_ssl_server, socket);};
   }
   var
    SSL =
      [0,
       create_upgradable_connection_h$1,
       create_connection_handler$1,
       create_default$0],
    Server =
      [0, create_upgradable_connection_h, create_connection_handler, TLS, SSL],
    include$2 = caml_call1(Dream_gluten_lwt_Gluten_lwt[2], Io),
    create = include$2[1],
    upgrade = include$2[2],
    shutdown = include$2[3],
    is_closed = include$2[4],
    socket = include$2[5],
    include$3 =
      caml_call1
       (Dream_gluten_lwt_Gluten_lwt[2], Dream_gluten_lwt_unix_Tls_io[1]),
    create$0 = include$3[1],
    upgrade$0 = include$3[2],
    shutdown$0 = include$3[3],
    is_closed$0 = include$3[4],
    socket$0 = include$3[5];
   function create_default$1(alpn_protocols, socket){
    return caml_call2(Dream_gluten_lwt_unix_Tls_io[2], alpn_protocols, socket);
   }
   var
    TLS$0 =
      [0,
       create$0,
       upgrade$0,
       shutdown$0,
       is_closed$0,
       socket$0,
       create_default$1],
    include$4 =
      caml_call1
       (Dream_gluten_lwt_Gluten_lwt[2], Dream_gluten_lwt_unix_Ssl_io[1]),
    create$1 = include$4[1],
    upgrade$1 = include$4[2],
    shutdown$1 = include$4[3],
    is_closed$1 = include$4[4],
    socket$1 = include$4[5];
   function create_default$2(alpn_protocols, socket){
    return caml_call2(Dream_gluten_lwt_unix_Ssl_io[2], alpn_protocols, socket);
   }
   var
    SSL$0 =
      [0,
       create$1,
       upgrade$1,
       shutdown$1,
       is_closed$1,
       socket$1,
       create_default$2],
    Client = [0, create, upgrade, shutdown, is_closed, socket, TLS$0, SSL$0],
    Dream_gluten_lwt_unix_Gluten_l = [0, Server, Client];
   runtime.caml_register_global
    (9,
     Dream_gluten_lwt_unix_Gluten_l,
     "Dream_gluten_lwt_unix__Gluten_lwt_unix");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
