// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ssl
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Callback, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Buffer_too_short$1 = "Buffer too short",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = cst$2,
    cst$0 = cst$2,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    Unix = global_data.Unix,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Callback = global_data.Stdlib__Callback,
    native_library_version = runtime.ocaml_ssl_get_version(0),
    cst_input_int_failed_to_read_4 = "input_int failed to read 4 bytes",
    cst_output_int_error_all_the_b =
      "output_int error: all the byte were not sent",
    cst_output_char_failed_to_writ = "output_char failed to write",
    cst_output_string_failed_to_wr = "output_string failed to write",
    cst_Ssl_read_into_big_array_st = "Ssl.read_into_big_array: start negative",
    cst_Ssl_read_into_big_array_le =
      "Ssl.read_into_big_array: length negative",
    cst_Buffer_too_short$0 = cst_Buffer_too_short$1,
    cst_Ssl_read_start_negative = "Ssl.read: start negative",
    cst_Ssl_read_length_negative = "Ssl.read: length negative",
    cst_Buffer_too_short = cst_Buffer_too_short$1,
    cst_Ssl_write_bigarray_start_n = "Ssl.write_bigarray: start negative",
    cst_Ssl_write_bigarray_length_ = "Ssl.write_bigarray: length negative",
    cst_Ssl_write_bigarray_Buffer_ = "Ssl.write_bigarray: Buffer too short",
    cst_Ssl_write_substring_start_ = "Ssl.write_substring: start negative",
    cst_Ssl_write_substring_length = "Ssl.write_substring: length negative",
    cst_Ssl_write_substring_Buffer = "Ssl.write_substring: Buffer too short",
    cst_Ssl_write_start_negative = "Ssl.write: start negative",
    cst_Ssl_write_length_negative = "Ssl.write: length negative",
    cst_Ssl_write_Buffer_too_short = "Ssl.write: Buffer too short",
    _c_ = [0, "SSL: Method error"],
    _d_ = [0, "SSL: Context error"],
    cst_SSL_Certificate_error = "SSL: Certificate error: ",
    _e_ = [0, "SSL: Cipher error"],
    _f_ = [0, "SSL: Diffie-Hellman error"],
    _g_ = [0, "SSL: EC curve error"],
    cst_SSL_Private_key_error = "SSL: Private key error: ",
    _h_ = [0, "SSL: Unmatching keys"],
    _i_ = [0, "SSL: Invalid socket"],
    _j_ = [0, "SSL: Handler error"],
    cst_SSL_connection_error = "SSL connection() error: ",
    cst_SSL_accept_error = "SSL accept() error: ",
    cst_SSL_read_error = "SSL read() error: ",
    cst_SSL_write_error = "SSL write() error: ",
    cst_SSL_verify_error = "SSL verify() error: ",
    _k_ =
      [0,
       [11, "SSL flush(", [9, 0, [11, ") error: ", 0]]],
       "SSL flush(%b) error: "],
    cst_lib_0 = "lib(0)",
    cst_reason_0 = "reason(0)",
    _a_ =
      [0,
       [11,
        "error:",
        [5,
         8,
         [0, 2, 2],
         0,
         [12,
          58,
          [5, 8, [0, 2, 6], 0, [12, 58, [2, 0, [11, "::", [2, 0, 0]]]]]]]],
       "error:%02lX:%06lX:%s::%s"],
    cst_Ssl_Method_error = "Ssl.Method_error",
    cst_Ssl_Context_error = "Ssl.Context_error",
    cst_Ssl_Certificate_error = "Ssl.Certificate_error",
    cst_Ssl_Cipher_error = "Ssl.Cipher_error",
    cst_Ssl_Diffie_hellman_error = "Ssl.Diffie_hellman_error",
    cst_Ssl_Ec_curve_error = "Ssl.Ec_curve_error",
    cst_Ssl_Private_key_error = "Ssl.Private_key_error",
    cst_Ssl_Unmatching_keys = "Ssl.Unmatching_keys",
    cst_Ssl_Invalid_socket = "Ssl.Invalid_socket",
    cst_Ssl_Handler_error = "Ssl.Handler_error",
    cst_Ssl_Connection_error = "Ssl.Connection_error",
    cst_Ssl_Accept_error = "Ssl.Accept_error",
    cst_Ssl_Read_error = "Ssl.Read_error",
    cst_Ssl_Write_error = "Ssl.Write_error",
    cst_Ssl_Verify_error = "Ssl.Verify_error",
    cst_Ssl_Flush_error = "Ssl.Flush_error",
    cst_ssl_exn_method_error = "ssl_exn_method_error",
    cst_ssl_exn_context_error = "ssl_exn_context_error",
    cst_ssl_exn_certificate_error = "ssl_exn_certificate_error",
    cst_ssl_exn_cipher_error = "ssl_exn_cipher_error",
    cst_ssl_exn_diffie_hellman_err = "ssl_exn_diffie_hellman_error",
    cst_ssl_exn_ec_curve_error = "ssl_exn_ec_curve_error",
    cst_ssl_exn_private_key_error = "ssl_exn_private_key_error",
    cst_ssl_exn_unmatching_keys = "ssl_exn_unmatching_keys",
    cst_ssl_exn_invalid_socket = "ssl_exn_invalid_socket",
    cst_ssl_exn_handler_error = "ssl_exn_handler_error",
    cst_ssl_exn_connection_error = "ssl_exn_connection_error",
    cst_ssl_exn_accept_error = "ssl_exn_accept_error",
    cst_ssl_exn_read_error = "ssl_exn_read_error",
    cst_ssl_exn_write_error = "ssl_exn_write_error",
    cst_ssl_exn_verify_error = "ssl_exn_verify_error",
    cst_ssl_exn_flush_error = "ssl_exn_flush_error";
   function get_error(param){return runtime.ocaml_ssl_error_struct(0);}
   function peek_error(param){return runtime.ocaml_ssl_error_struct(1);}
   function peek_last_error(param){return runtime.ocaml_ssl_error_struct(2);}
   function peek_last_error_string(param){
    var err = runtime.ocaml_ssl_error_struct(2), match = err[3];
    if(match)
     var lib = match[1], libstring = lib;
    else
     var libstring = cst_lib_0;
    var match$0 = err[4];
    if(match$0)
     var reason = match$0[1], reasonstring = reason;
    else
     var reasonstring = cst_reason_0;
    return caml_call5
            (Stdlib_Printf[4], _a_, err[1], err[2], libstring, reasonstring);
   }
   var
    Method_error = [248, cst_Ssl_Method_error, caml_fresh_oo_id(0)],
    Context_error = [248, cst_Ssl_Context_error, caml_fresh_oo_id(0)],
    Certificate_error = [248, cst_Ssl_Certificate_error, caml_fresh_oo_id(0)],
    Cipher_error = [248, cst_Ssl_Cipher_error, caml_fresh_oo_id(0)],
    Diffie_hellman_error =
      [248, cst_Ssl_Diffie_hellman_error, caml_fresh_oo_id(0)],
    Ec_curve_error = [248, cst_Ssl_Ec_curve_error, caml_fresh_oo_id(0)],
    Private_key_error = [248, cst_Ssl_Private_key_error, caml_fresh_oo_id(0)],
    Unmatching_keys = [248, cst_Ssl_Unmatching_keys, caml_fresh_oo_id(0)],
    Invalid_socket = [248, cst_Ssl_Invalid_socket, caml_fresh_oo_id(0)],
    Handler_error = [248, cst_Ssl_Handler_error, caml_fresh_oo_id(0)],
    Connection_error = [248, cst_Ssl_Connection_error, caml_fresh_oo_id(0)],
    Accept_error = [248, cst_Ssl_Accept_error, caml_fresh_oo_id(0)],
    Read_error = [248, cst_Ssl_Read_error, caml_fresh_oo_id(0)],
    Write_error = [248, cst_Ssl_Write_error, caml_fresh_oo_id(0)],
    Verify_error = [248, cst_Ssl_Verify_error, caml_fresh_oo_id(0)],
    Flush_error = [248, cst_Ssl_Flush_error, caml_fresh_oo_id(0)];
   function _b_(param){
    if(param === Method_error) return _c_;
    if(param === Context_error) return _d_;
    if(param[1] === Certificate_error){
     var s = param[2];
     return [0, caml_call2(Stdlib[28], cst_SSL_Certificate_error, s)];
    }
    if(param === Cipher_error) return _e_;
    if(param === Diffie_hellman_error) return _f_;
    if(param === Ec_curve_error) return _g_;
    if(param[1] === Private_key_error){
     var s$0 = param[2];
     return [0, caml_call2(Stdlib[28], cst_SSL_Private_key_error, s$0)];
    }
    if(param === Unmatching_keys) return _h_;
    if(param === Invalid_socket) return _i_;
    if(param === Handler_error) return _j_;
    if(param[1] === Connection_error){
     var _b$_ = peek_last_error_string(0);
     return [0, caml_call2(Stdlib[28], cst_SSL_connection_error, _b$_)];
    }
    if(param[1] === Accept_error){
     var _ca_ = peek_last_error_string(0);
     return [0, caml_call2(Stdlib[28], cst_SSL_accept_error, _ca_)];
    }
    if(param[1] === Read_error){
     var _cb_ = peek_last_error_string(0);
     return [0, caml_call2(Stdlib[28], cst_SSL_read_error, _cb_)];
    }
    if(param[1] === Write_error){
     var _cc_ = peek_last_error_string(0);
     return [0, caml_call2(Stdlib[28], cst_SSL_write_error, _cc_)];
    }
    if(param[1] === Verify_error){
     var _cd_ = peek_last_error_string(0);
     return [0, caml_call2(Stdlib[28], cst_SSL_verify_error, _cd_)];
    }
    if(param[1] !== Flush_error) return 0;
    var
     b = param[2],
     _ce_ = peek_last_error_string(0),
     _cf_ = caml_call2(Stdlib_Printf[4], _k_, b);
    return [0, caml_call2(Stdlib[28], _cf_, _ce_)];
   }
   caml_call1(Stdlib_Printexc[9], _b_);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_method_error, Method_error);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_context_error, Context_error);
   caml_call2
    (Stdlib_Callback[2],
     cst_ssl_exn_certificate_error,
     [0, Certificate_error, cst]);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_cipher_error, Cipher_error);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_diffie_hellman_err, Diffie_hellman_error);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_ec_curve_error, Ec_curve_error);
   caml_call2
    (Stdlib_Callback[2],
     cst_ssl_exn_private_key_error,
     [0, Private_key_error, cst$0]);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_unmatching_keys, Unmatching_keys);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_invalid_socket, Invalid_socket);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_handler_error, Handler_error);
   caml_call2
    (Stdlib_Callback[2],
     cst_ssl_exn_connection_error,
     [0, Connection_error, 0]);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_accept_error, [0, Accept_error, 0]);
   caml_call2(Stdlib_Callback[2], cst_ssl_exn_read_error, [0, Read_error, 0]);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_write_error, [0, Write_error, 0]);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_verify_error, [0, Verify_error, 31]);
   caml_call2
    (Stdlib_Callback[2], cst_ssl_exn_flush_error, [0, Flush_error, 1]);
   var thread_safe = [0, 0];
   function init(thread_safe$0, param){
    if(thread_safe$0)
     var b = thread_safe$0[1], thread_safe$1 = b;
    else
     var thread_safe$1 = thread_safe[1];
    return runtime.ocaml_ssl_init(thread_safe$1);
   }
   var
    client_verify_callback =
      runtime.ocaml_ssl_get_client_verify_callback_ptr(0);
   function connect(socket){
    var
     ret = runtime.ocaml_ssl_connect_blocking(socket),
     _b__ = 1 !== ret ? 1 : 0;
    if(! _b__) return _b__;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Connection_error, err], 1);
   }
   function accept(socket){
    var
     ret = runtime.ocaml_ssl_accept_blocking(socket),
     _b9_ = 1 !== ret ? 1 : 0;
    if(! _b9_) return _b9_;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Accept_error, err], 1);
   }
   function write(socket, buffer, start, length){
    if(start < 0) caml_call1(Stdlib[1], cst_Ssl_write_start_negative);
    if(length < 0) caml_call1(Stdlib[1], cst_Ssl_write_length_negative);
    if(caml_ml_bytes_length(buffer) < (start + length | 0))
     caml_call1(Stdlib[1], cst_Ssl_write_Buffer_too_short);
    var ret = runtime.ocaml_ssl_write_blocking(socket, buffer, start, length);
    if(ret > 0) return ret;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Write_error, err], 1);
   }
   function write_substring(socket, buffer, start, length){
    if(start < 0) caml_call1(Stdlib[1], cst_Ssl_write_substring_start_);
    if(length < 0) caml_call1(Stdlib[1], cst_Ssl_write_substring_length);
    if(caml_ml_string_length(buffer) < (start + length | 0))
     caml_call1(Stdlib[1], cst_Ssl_write_substring_Buffer);
    var ret = runtime.ocaml_ssl_write_blocking(socket, buffer, start, length);
    if(ret > 0) return ret;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Write_error, err], 1);
   }
   function write_bigarray(socket, buffer, start, length){
    if(start < 0) caml_call1(Stdlib[1], cst_Ssl_write_bigarray_start_n);
    if(length < 0) caml_call1(Stdlib[1], cst_Ssl_write_bigarray_length_);
    if(caml_ba_dim_1(buffer) < (start + length | 0))
     caml_call1(Stdlib[1], cst_Ssl_write_bigarray_Buffer_);
    var
     ret =
       runtime.ocaml_ssl_write_bigarray_blocking
        (socket, buffer, start, length);
    if(ret > 0) return ret;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Write_error, err], 1);
   }
   function read(socket, buffer, start, length){
    if(start < 0) caml_call1(Stdlib[1], cst_Ssl_read_start_negative);
    if(length < 0) caml_call1(Stdlib[1], cst_Ssl_read_length_negative);
    if(caml_ml_bytes_length(buffer) < (start + length | 0))
     caml_call1(Stdlib[1], cst_Buffer_too_short);
    var ret = runtime.ocaml_ssl_read_blocking(socket, buffer, start, length);
    if(ret > 0) return ret;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Read_error, err], 1);
   }
   function read_into_bigarray(socket, buffer, start, length){
    if(start < 0) caml_call1(Stdlib[1], cst_Ssl_read_into_big_array_st);
    if(length < 0) caml_call1(Stdlib[1], cst_Ssl_read_into_big_array_le);
    if(caml_ba_dim_1(buffer) < (start + length | 0))
     caml_call1(Stdlib[1], cst_Buffer_too_short$0);
    var
     ret =
       runtime.ocaml_ssl_read_into_bigarray_blocking
        (socket, buffer, start, length);
    if(ret > 0) return ret;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Read_error, err], 1);
   }
   function flush(socket){
    var
     ret = runtime.ocaml_ssl_flush_blocking(socket),
     _b8_ = 1 !== ret ? 1 : 0;
    if(_b8_)
     throw caml_maybe_attach_backtrace
            ([0, Flush_error, -2 === ret ? 1 : 0], 1);
    return _b8_;
   }
   function ssl_shutdown(socket){
    var ret = runtime.ocaml_ssl_shutdown_blocking(socket);
    if(ret >= 0) return 1 === ret ? 1 : 0;
    var err = runtime.ocaml_ssl_get_error_code(socket, ret);
    throw caml_maybe_attach_backtrace([0, Connection_error, err], 1);
   }
   function Make(Ssl_base){
    var
     connect = Ssl_base[1],
     accept = Ssl_base[2],
     ssl_shutdown = Ssl_base[3],
     flush = Ssl_base[4],
     read = Ssl_base[5],
     read_into_bigarray = Ssl_base[6],
     write = Ssl_base[7],
     write_substring = Ssl_base[8],
     write_bigarray = Ssl_base[9];
    function open_connection_with_context(context, sockaddr){
     var
      domain = caml_call1(Unix[134], sockaddr),
      sock = caml_call4(Unix[133], 0, domain, 0, 0);
     try{
      caml_call2(Unix[138], sock, sockaddr);
      var ssl = runtime.ocaml_ssl_embed_socket(sock, context);
      caml_call1(connect, ssl);
      return ssl;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      caml_call1(Unix[25], sock);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function open_connection(ssl_method, sockaddr){
     return open_connection_with_context
             (runtime.ocaml_ssl_create_context(ssl_method, 0), sockaddr);
    }
    function shutdown(sock){
     var
      _b6_ = 1 - caml_call1(ssl_shutdown, sock),
      _b7_ = _b6_ ? (caml_call1(ssl_shutdown, sock), 0) : _b6_;
     return _b7_;
    }
    function output_string(ssl, s){
     var len = caml_ml_string_length(s), to_write = [0, len], offset = [0, 0];
     for(;;){
      if(0 >= to_write[1]) return 0;
      var
       written = caml_call4(write_substring, ssl, s, offset[1], to_write[1]);
      if(written <= 0) caml_call1(Stdlib[2], cst_output_string_failed_to_wr);
      to_write[1] = to_write[1] - written | 0;
      offset[1] = offset[1] + written | 0;
     }
    }
    function output_char(ssl, c){
     var
      tmp = caml_call2(Stdlib_String[1], 1, c),
      written = caml_call4(write_substring, ssl, tmp, 0, 1),
      _b5_ = written <= 0 ? 1 : 0;
     return _b5_
             ? caml_call1(Stdlib[2], cst_output_char_failed_to_writ)
             : _b5_;
    }
    function output_int(ssl, i){
     var tmp = caml_create_bytes(4);
     caml_bytes_set(tmp, 0, caml_call1(Stdlib[29], i >>> 24 | 0));
     caml_bytes_set(tmp, 1, caml_call1(Stdlib[29], (i >>> 16 | 0) & 255));
     caml_bytes_set(tmp, 2, caml_call1(Stdlib[29], (i >>> 8 | 0) & 255));
     caml_bytes_set(tmp, 3, caml_call1(Stdlib[29], i & 255));
     var _b4_ = 4 !== caml_call4(write, ssl, tmp, 0, 4) ? 1 : 0;
     return _b4_
             ? caml_call1(Stdlib[2], cst_output_int_error_all_the_b)
             : _b4_;
    }
    function input_string(ssl){
     var
      buf = caml_create_bytes(1024),
      ret = [0, cst$1],
      r = [0, 1],
      bufsize = 1024;
     for(;;){
      if(0 === r[1]) return ret[1];
      r[1] = caml_call4(read, ssl, buf, 0, bufsize);
      var _b3_ = caml_call3(Stdlib_Bytes[8], buf, 0, r[1]);
      ret[1] = caml_call2(Stdlib[28], ret[1], _b3_);
     }
    }
    function input_char(ssl){
     var tmp = caml_create_bytes(1);
     if(1 === caml_call4(read, ssl, tmp, 0, 1)) return caml_bytes_get(tmp, 0);
     throw caml_maybe_attach_backtrace(Stdlib[12], 1);
    }
    function input_int(ssl){
     var
      i = [0, 0],
      tmp = caml_create_bytes(4),
      read$0 = caml_call4(read, ssl, tmp, 0, 4);
     if(read$0 < 4) caml_call1(Stdlib[2], cst_input_int_failed_to_read_4);
     i[1] = caml_bytes_get(tmp, 0);
     var _b0_ = caml_bytes_get(tmp, 1);
     i[1] = (i[1] << 8) + _b0_ | 0;
     var _b1_ = caml_bytes_get(tmp, 2);
     i[1] = (i[1] << 8) + _b1_ | 0;
     var _b2_ = caml_bytes_get(tmp, 3);
     i[1] = (i[1] << 8) + _b2_ | 0;
     return i[1];
    }
    return [0,
            connect,
            accept,
            ,
            flush,
            read,
            read_into_bigarray,
            write,
            write_substring,
            write_bigarray,
            open_connection_with_context,
            open_connection,
            ssl_shutdown,
            shutdown,
            shutdown,
            output_string,
            output_char,
            output_int,
            input_string,
            input_char,
            input_int];
   }
   function _l_(_bZ_, _bY_, _bX_, _bW_){
    return runtime.ocaml_ssl_write_bigarray(_bZ_, _bY_, _bX_, _bW_);
   }
   function _m_(_bV_, _bU_, _bT_, _bS_){
    return runtime.ocaml_ssl_write(_bV_, _bU_, _bT_, _bS_);
   }
   function _n_(_bR_, _bQ_, _bP_, _bO_){
    return runtime.ocaml_ssl_write(_bR_, _bQ_, _bP_, _bO_);
   }
   function _o_(_bN_, _bM_, _bL_, _bK_){
    return runtime.ocaml_ssl_read_into_bigarray(_bN_, _bM_, _bL_, _bK_);
   }
   function _p_(_bJ_, _bI_, _bH_, _bG_){
    return runtime.ocaml_ssl_read(_bJ_, _bI_, _bH_, _bG_);
   }
   function _q_(_bF_){return runtime.ocaml_ssl_flush(_bF_);}
   function _r_(_bE_){return runtime.ocaml_ssl_shutdown(_bE_);}
   function _s_(_bD_){return runtime.ocaml_ssl_accept(_bD_);}
   var
    include =
      Make
       ([0,
         function(_bC_){return runtime.ocaml_ssl_connect(_bC_);},
         _s_,
         _r_,
         _q_,
         _p_,
         _o_,
         _n_,
         _m_,
         _l_]),
    connect$0 = include[1],
    accept$0 = include[2],
    flush$0 = include[4],
    read$0 = include[5],
    read_into_bigarray$0 = include[6],
    write$0 = include[7],
    write_substring$0 = include[8],
    write_bigarray$0 = include[9],
    open_connection_with_context = include[10],
    open_connection = include[11],
    close_notify = include[12],
    shutdown = include[13],
    shutdown_connection = include[14],
    output_string = include[15],
    output_char = include[16],
    output_int = include[17],
    input_string = include[18],
    input_char = include[19],
    input_int = include[20],
    Runtime_lock =
      Make
       ([0,
         connect,
         accept,
         ssl_shutdown,
         flush,
         read,
         read_into_bigarray,
         write,
         write_substring,
         write_bigarray]),
    read_into_bigarray_blocking = Runtime_lock[6],
    write_bigarray_blocking = Runtime_lock[9],
    _t_ =
      [0,
       Runtime_lock[1],
       Runtime_lock[2],
       Runtime_lock[11],
       Runtime_lock[10],
       Runtime_lock[12],
       Runtime_lock[14],
       Runtime_lock[13],
       Runtime_lock[4],
       Runtime_lock[5],
       Runtime_lock[6],
       Runtime_lock[7],
       Runtime_lock[8],
       Runtime_lock[9],
       Runtime_lock[18],
       Runtime_lock[15],
       Runtime_lock[19],
       Runtime_lock[16],
       Runtime_lock[20],
       Runtime_lock[17]];
   function _u_(_bB_){return runtime.ocaml_ssl_get_file_descr(_bB_);}
   function _v_(_bA_, _bz_){return runtime.ocaml_ssl_set1_ip(_bA_, _bz_);}
   function _w_(_by_, _bx_){return runtime.ocaml_ssl_set1_host(_by_, _bx_);}
   function _x_(_bw_, _bv_){
    return runtime.ocaml_ssl_set_hostflags(_bw_, _bv_);
   }
   function _y_(_bu_){return runtime.ocaml_ssl_verify(_bu_);}
   function _z_(_bt_){
    return runtime.ocaml_ssl_get_negotiated_alpn_protocol(_bt_);
   }
   function _A_(_bs_, _br_){
    return runtime.ocaml_ssl_set_alpn_protos(_bs_, _br_);
   }
   function _B_(_bq_, _bp_){
    return runtime.ocaml_ssl_set_client_SNI_hostname(_bq_, _bp_);
   }
   function _C_(_bo_, _bn_){
    return runtime.ocaml_ssl_embed_socket(_bo_, _bn_);
   }
   function _D_(_bm_, _bl_){return runtime.ocaml_ssl_digest(_bm_, _bl_);}
   function _E_(_bk_){return runtime.ocaml_ssl_get_verify_error_string(_bk_);}
   function _F_(_bj_){return runtime.ocaml_ssl_get_verify_result(_bj_);}
   function _G_(_bi_){
    return runtime.ocaml_ssl_ctx_set_default_verify_paths(_bi_);
   }
   function _H_(_bh_, _bg_, _bf_){
    return runtime.ocaml_ssl_ctx_load_verify_locations(_bh_, _bg_, _bf_);
   }
   function _I_(_be_){return runtime.ocaml_ssl_get_expiration_date(_be_);}
   function _J_(_bd_){return runtime.ocaml_ssl_get_start_date(_bd_);}
   function _K_(_bc_){return runtime.ocaml_ssl_get_subject(_bc_);}
   function _L_(_bb_){return runtime.ocaml_ssl_get_issuer(_bb_);}
   function _M_(_ba_){return runtime.ocaml_ssl_get_certificate(_ba_);}
   function _N_(_a$_, _a__){
    return runtime.ocaml_ssl_write_certificate(_a$_, _a__);
   }
   function _O_(_a9_){return runtime.ocaml_ssl_read_certificate(_a9_);}
   function _P_(_a8_){return runtime.ocaml_ssl_version(_a8_);}
   function _Q_(_a7_){return runtime.ocaml_ssl_get_cipher_version(_a7_);}
   function _R_(_a6_){return runtime.ocaml_ssl_get_cipher_name(_a6_);}
   function _S_(_a5_){return runtime.ocaml_ssl_get_cipher_description(_a5_);}
   function _T_(_a4_){return runtime.ocaml_ssl_get_current_cipher(_a4_);}
   function _U_(_a3_, _a2_){
    return runtime.ocaml_ssl_ctx_init_ec_from_named_curve(_a3_, _a2_);
   }
   function _V_(_a1_, _a0_){
    return runtime.ocaml_ssl_ctx_init_dh_from_file(_a1_, _a0_);
   }
   function _W_(_aZ_){return runtime.ocaml_ssl_ctx_honor_cipher_order(_aZ_);}
   function _X_(_aY_, _aX_){
    return runtime.ocaml_ssl_ctx_set_cipher_list(_aY_, _aX_);
   }
   function _Y_(_aW_, _aV_){
    return runtime.ocaml_ssl_disable_protocols(_aW_, _aV_);
   }
   function _Z_(_aU_, _aT_){
    return runtime.ocaml_ssl_ctx_set_alpn_select_callback(_aU_, _aT_);
   }
   function ___(_aS_, _aR_){
    return runtime.ocaml_ssl_ctx_set_alpn_protos(_aS_, _aR_);
   }
   function _$_(_aQ_, _aP_){
    return runtime.ocaml_ssl_ctx_set_verify_depth(_aQ_, _aP_);
   }
   function _aa_(_aO_, _aN_, _aM_){
    return runtime.ocaml_ssl_ctx_set_verify(_aO_, _aN_, _aM_);
   }
   function _ab_(_aL_){
    return runtime.ocaml_ssl_set_client_verify_callback_verbose(_aL_);
   }
   function _ac_(_aK_, _aJ_){
    return runtime.ocaml_ssl_ctx_set_client_CA_list_from_file(_aK_, _aJ_);
   }
   function _ad_(_aI_, _aH_){
    return runtime.ocaml_ssl_ctx_set_default_passwd_cb(_aI_, _aH_);
   }
   function _ae_(_aG_, _aF_, _aE_){
    return runtime.ocaml_ssl_ctx_use_certificate_from_string(_aG_, _aF_, _aE_);
   }
   function _af_(_aD_, _aC_, _aB_){
    return runtime.ocaml_ssl_ctx_use_certificate(_aD_, _aC_, _aB_);
   }
   function _ag_(_aA_, _az_){
    return runtime.ocaml_ssl_ctx_add_cert_to_store(_aA_, _az_);
   }
   function _ah_(_ay_, _ax_){
    return runtime.ocaml_ssl_ctx_add_extra_chain_cert(_ay_, _ax_);
   }
   function _ai_(_aw_){
    return runtime.ocaml_ssl_ctx_get_max_proto_version(_aw_);
   }
   function _aj_(_av_){
    return runtime.ocaml_ssl_ctx_get_min_proto_version(_av_);
   }
   function _ak_(_au_, _at_){
    return runtime.ocaml_ssl_ctx_set_max_proto_version(_au_, _at_);
   }
   function _al_(_as_, _ar_){
    return runtime.ocaml_ssl_ctx_set_min_proto_version(_as_, _ar_);
   }
   function _am_(_aq_, _ap_){
    return runtime.ocaml_ssl_create_context(_aq_, _ap_);
   }
   var
    _an_ = [0, get_error, peek_error, peek_last_error],
    Ssl =
      [0,
       native_library_version,
       Method_error,
       Context_error,
       Cipher_error,
       Diffie_hellman_error,
       Ec_curve_error,
       Certificate_error,
       Private_key_error,
       Unmatching_keys,
       Invalid_socket,
       Handler_error,
       Connection_error,
       Accept_error,
       Read_error,
       Write_error,
       Flush_error,
       Verify_error,
       init,
       function(_ao_){return runtime.ocaml_ssl_get_error_string(_ao_);},
       _an_,
       thread_safe,
       _am_,
       _al_,
       _ak_,
       _aj_,
       _ai_,
       _ah_,
       _ag_,
       _af_,
       _ae_,
       _ad_,
       _ac_,
       client_verify_callback,
       _ab_,
       _aa_,
       _$_,
       ___,
       _Z_,
       _Y_,
       _X_,
       _W_,
       _V_,
       _U_,
       _T_,
       _S_,
       _R_,
       _Q_,
       _P_,
       _O_,
       _N_,
       _M_,
       _L_,
       _K_,
       _J_,
       _I_,
       _H_,
       _G_,
       _F_,
       _E_,
       _D_,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       _v_,
       _u_,
       connect$0,
       accept$0,
       open_connection,
       open_connection_with_context,
       close_notify,
       shutdown_connection,
       shutdown,
       flush$0,
       read$0,
       read_into_bigarray$0,
       write$0,
       write_substring$0,
       write_bigarray$0,
       input_string,
       output_string,
       input_char,
       output_char,
       input_int,
       output_int,
       _t_,
       read_into_bigarray_blocking,
       write_bigarray_blocking];
   runtime.caml_register_global(80, Ssl, "Ssl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ssl_threads
//# unitInfo: Requires: Ssl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ssl = global_data.Ssl;
   function init(param){Ssl[21][1] = 1; return 0;}
   var Ssl_threads = [0, init];
   runtime.caml_register_global(1, Ssl_threads, "Ssl_threads");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
