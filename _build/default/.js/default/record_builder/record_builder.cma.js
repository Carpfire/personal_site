// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Record_builder__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Record_builder = [0],
    Record_builder$0 = [0, Record_builder];
   runtime.caml_register_global(0, Record_builder$0, "Record_builder__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Record_builder__Hlist
//# unitInfo: Requires: Base, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Record_builder_Hlist$0 = "Record_builder__Hlist",
    cst_record_builder$0 = "record_builder";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base = global_data.Base;
   caml_call1(Ppx_module_timer_runtime[4], cst_Record_builder_Hlist$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_record_builder$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/hlist.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_record_builder$0, "hlist.ml");
   var
    cst_record_builder = cst_record_builder$0,
    cst_Record_builder_Hlist = cst_Record_builder_Hlist$0,
    empty = 0;
   function cons(x, xs){return [0, x, xs];}
   var head = Base[242], tail = Base[243], whole_list = 0;
   function tail_of(x){return [0, x];}
   var Suffix_index = [0, whole_list, tail_of];
   function follow(t, list){
    var t$0 = t, list$0 = list;
    for(;;){
     if(typeof t$0 === "number")
      return t$0 ? caml_call1(head, list$0) : list$0;
     var
      and_then = t$0[1],
      list$1 = caml_call1(tail, list$0),
      t$0 = and_then,
      list$0 = list$1;
    }
   }
   function within(t, suffix){
    var t$0 = t, suffix$0 = suffix;
    for(;;){
     if(! suffix$0) return t$0;
     var
      suffix$1 = suffix$0[1],
      t$1 = [0, t$0],
      t$0 = t$1,
      suffix$0 = suffix$1;
    }
   }
   function drop(t, suffix){return follow(within(0, suffix), t);}
   function nth(t, path){return follow(path, t);}
   var first_element = 1;
   function of_tail(x){return [0, x];}
   function within$0(t, suffix){return within(t, suffix);}
   var Element_index = [0, first_element, of_tail, within$0];
   caml_call1(Ppx_inline_test_lib[7], cst_record_builder);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Record_builder_Hlist);
   var
    Record_builder_Hlist =
      [0, empty, cons, head, tail, Suffix_index, drop, Element_index, nth];
   runtime.caml_register_global
    (12, Record_builder_Hlist, cst_Record_builder_Hlist$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Record_builder__Record_builder_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Record_builder_Record_buil = "Record_builder__Record_builder_intf",
    cst_record_builder = "record_builder";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Record_builder_Record_buil);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_record_builder);
   caml_call1(Ppx_expect_runtime[1][1], "src/record_builder_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_record_builder, "record_builder_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_record_builder);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Record_builder_Record_buil);
   var Record_builder_Record_builder_ = [0];
   runtime.caml_register_global
    (11, Record_builder_Record_builder_, cst_Record_builder_Record_buil);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Record_builder
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Record_builder__Hlist
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Record_builder$0 = "Record_builder",
    cst_record_builder$0 = "record_builder";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Record_builder_Hlist = global_data.Record_builder__Hlist,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Record_builder$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_record_builder$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/record_builder.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_record_builder$0, "record_builder.ml");
   var
    cst_record_builder = cst_record_builder$0,
    cst_Record_builder = cst_Record_builder$0;
   function Make_internal(F){
    function cons(left, right){
     if(right){
      var right$0 = right[1];
      return [0, caml_call2(F[2], left, right$0)];
     }
     function _f_(x){
      return caml_call2(Record_builder_Hlist[2], x, Record_builder_Hlist[1]);
     }
     return [0, caml_call2(F[1], left, _f_)];
    }
    function unpack(param){var x = param[1]; return x;}
    var Hlist_F = [0, cons, unpack], Make_creator_types = [0];
    function field(applicative, field, param){
     var suffix = param[2], build_hlist = param[1];
     function build_hlist$0(tail){
      return caml_call1(build_hlist, Hlist_F[1].call(null, applicative, tail));
     }
     var
      index =
        caml_call2
         (Record_builder_Hlist[7][3], Record_builder_Hlist[7][1], suffix);
     function get_field(hlist){
      return caml_call2(Record_builder_Hlist[8], hlist, index);
     }
     var suffix$0 = caml_call1(Record_builder_Hlist[5][2], suffix);
     return [0, get_field, [0, build_hlist$0, suffix$0]];
    }
    function build_for_record(folding){
     var
      _b_ = Record_builder_Hlist[5][1],
      _c_ = caml_call1(folding, [0, function(_e_){return _e_;}, _b_]),
      build_up = _c_[2][1],
      from_values = _c_[1],
      _d_ = caml_call1(build_up, 0),
      built = Hlist_F[2].call(null, _d_);
     return caml_call2(F[1], built, from_values);
    }
    return [0, , Make_creator_types, field, build_for_record];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_record_builder);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Record_builder);
   function _a_(F){
    var
     include = Make_internal(F),
     Make_creator_types = include[2],
     field = include[3],
     build_for_record = include[4];
    return [0, Make_creator_types, field, build_for_record];
   }
   var
    Record_builder =
      [0,
       function(F){
        var
         map = F[1],
         both = F[2],
         include = Make_internal([0, map, both]),
         Make_creator_types = include[2],
         field = include[3],
         build_for_record = include[4];
        return [0, Make_creator_types, field, build_for_record];
       },
       _a_];
   runtime.caml_register_global(12, Record_builder, cst_Record_builder$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
