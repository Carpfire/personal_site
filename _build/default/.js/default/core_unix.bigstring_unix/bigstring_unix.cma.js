// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bigstring_unix
//# unitInfo: Requires: Core, Core__Bigstring, Core__Or_error, Core_unix, Core_unix__File_descr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__Bigarray, Stdlib__Callback
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_min_len = ": min_len (",
    cst_Bigstring_unix$0 = "Bigstring_unix",
    cst_bigstring_unix$0 = "bigstring_unix",
    cst_bigstring_unix_src_bigstri = "bigstring_unix/src/bigstring_unix.ml",
    cst_pread = "pread",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    loc$5 = "recvmmsg_assume_fd_is_nonblocking",
    loc$4 = "output",
    loc$3 = "pwrite",
    loc$2 = "input",
    loc$1 = cst_pread,
    loc$0 = cst_pread,
    loc = "read",
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Core_unix = global_data.Core_unix,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Bigstring = global_data.Core__Bigstring,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib = global_data.Stdlib,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Core_Or_error = global_data.Core__Or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bigstring_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bigstring_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_bigstring_unix_src_bigstri);
   caml_call2
    (Ppx_inline_test_lib[6], cst_bigstring_unix$0, "bigstring_unix.ml");
   var
    quickcheck_generator = Core_Bigstring[1],
    quickcheck_observer = Core_Bigstring[2],
    quickcheck_shrinker = Core_Bigstring[3],
    compare = Core_Bigstring[4],
    t_of_sexp = Core_Bigstring[5],
    sexp_of_t = Core_Bigstring[6],
    compare_t_frozen = Core_Bigstring[7],
    hash_fold_t_frozen = Core_Bigstring[8],
    hash_t_frozen = Core_Bigstring[9],
    sexp_of_t_frozen = Core_Bigstring[10],
    t_frozen_of_sexp = Core_Bigstring[11],
    equal = Core_Bigstring[12],
    init = Core_Bigstring[13],
    of_string = Core_Bigstring[14],
    of_bytes = Core_Bigstring[15],
    to_string = Core_Bigstring[16],
    to_bytes = Core_Bigstring[17],
    concat = Core_Bigstring[18],
    check_args = Core_Bigstring[19],
    get_opt_len = Core_Bigstring[20],
    length = Core_Bigstring[21],
    blit = Core_Bigstring[22],
    blito = Core_Bigstring[23],
    unsafe_blit = Core_Bigstring[24],
    sub = Core_Bigstring[25],
    subo = Core_Bigstring[26],
    copy = Core_Bigstring[27],
    memset = Core_Bigstring[32],
    unsafe_memset = Core_Bigstring[33],
    memcmp = Core_Bigstring[34],
    memcmp_bytes = Core_Bigstring[35],
    memcmp_string = Core_Bigstring[36],
    find = Core_Bigstring[37],
    memmem = Core_Bigstring[38],
    get_int8 = Core_Bigstring[39],
    set_int8_exn = Core_Bigstring[40],
    get_uint8 = Core_Bigstring[41],
    set_uint8_exn = Core_Bigstring[42],
    unsafe_get_int8 = Core_Bigstring[43],
    unsafe_set_int8 = Core_Bigstring[44],
    unsafe_get_uint8 = Core_Bigstring[45],
    unsafe_set_uint8 = Core_Bigstring[46],
    get_int16_le = Core_Bigstring[47],
    get_int16_be = Core_Bigstring[48],
    set_int16_le_exn = Core_Bigstring[49],
    set_int16_be_exn = Core_Bigstring[50],
    unsafe_get_int16_le = Core_Bigstring[51],
    unsafe_get_int16_be = Core_Bigstring[52],
    unsafe_set_int16_le = Core_Bigstring[53],
    unsafe_set_int16_be = Core_Bigstring[54],
    get_uint16_le = Core_Bigstring[55],
    get_uint16_be = Core_Bigstring[56],
    set_uint16_le_exn = Core_Bigstring[57],
    set_uint16_be_exn = Core_Bigstring[58],
    unsafe_get_uint16_le = Core_Bigstring[59],
    unsafe_get_uint16_be = Core_Bigstring[60],
    unsafe_set_uint16_le = Core_Bigstring[61],
    unsafe_set_uint16_be = Core_Bigstring[62],
    get_int32_le = Core_Bigstring[63],
    get_int32_be = Core_Bigstring[64],
    set_int32_le_exn = Core_Bigstring[65],
    set_int32_be_exn = Core_Bigstring[66],
    unsafe_get_int32_le = Core_Bigstring[67],
    unsafe_get_int32_be = Core_Bigstring[68],
    unsafe_set_int32_le = Core_Bigstring[69],
    unsafe_set_int32_be = Core_Bigstring[70],
    get_uint32_le = Core_Bigstring[71],
    get_uint32_be = Core_Bigstring[72],
    set_uint32_le_exn = Core_Bigstring[73],
    set_uint32_be_exn = Core_Bigstring[74],
    unsafe_get_uint32_le = Core_Bigstring[75],
    unsafe_get_uint32_be = Core_Bigstring[76],
    unsafe_set_uint32_le = Core_Bigstring[77],
    unsafe_set_uint32_be = Core_Bigstring[78],
    get_int64_le_exn = Core_Bigstring[79],
    get_int64_be_exn = Core_Bigstring[80],
    get_int64_le_trunc = Core_Bigstring[81],
    get_int64_be_trunc = Core_Bigstring[82],
    set_int64_le = Core_Bigstring[83],
    set_int64_be = Core_Bigstring[84],
    unsafe_get_int64_le_exn = Core_Bigstring[85],
    unsafe_get_int64_be_exn = Core_Bigstring[86],
    unsafe_get_int64_le_trunc = Core_Bigstring[87],
    unsafe_get_int64_be_trunc = Core_Bigstring[88],
    unsafe_set_int64_le = Core_Bigstring[89],
    unsafe_set_int64_be = Core_Bigstring[90],
    get_uint64_be_exn = Core_Bigstring[91],
    get_uint64_le_exn = Core_Bigstring[92],
    set_uint64_le_exn = Core_Bigstring[93],
    set_uint64_be_exn = Core_Bigstring[94],
    unsafe_get_uint64_be_exn = Core_Bigstring[95],
    unsafe_get_uint64_le_exn = Core_Bigstring[96],
    unsafe_set_uint64_le = Core_Bigstring[97],
    unsafe_set_uint64_be = Core_Bigstring[98],
    get_int32_t_le = Core_Bigstring[99],
    get_int32_t_be = Core_Bigstring[100],
    set_int32_t_le = Core_Bigstring[101],
    set_int32_t_be = Core_Bigstring[102],
    unsafe_get_int32_t_le = Core_Bigstring[103],
    unsafe_get_int32_t_be = Core_Bigstring[104],
    unsafe_set_int32_t_le = Core_Bigstring[105],
    unsafe_set_int32_t_be = Core_Bigstring[106],
    get_int64_t_le = Core_Bigstring[107],
    get_int64_t_be = Core_Bigstring[108],
    set_int64_t_le = Core_Bigstring[109],
    set_int64_t_be = Core_Bigstring[110],
    unsafe_get_int64_t_le = Core_Bigstring[111],
    unsafe_get_int64_t_be = Core_Bigstring[112],
    unsafe_set_int64_t_le = Core_Bigstring[113],
    unsafe_set_int64_t_be = Core_Bigstring[114],
    get_string = Core_Bigstring[115],
    unsafe_get_string = Core_Bigstring[116],
    create = Core_Bigstring[121],
    sub_shared = Core_Bigstring[122],
    write_bin_prot = Core_Bigstring[123],
    write_bin_prot_known_size = Core_Bigstring[124],
    read_bin_prot = Core_Bigstring[125],
    read_bin_prot_verbose_errors = Core_Bigstring[126],
    get_tail_padded_fixed_string = Core_Bigstring[127],
    get_tail_padded_fixed_string_l = Core_Bigstring[128],
    set_tail_padded_fixed_string = Core_Bigstring[129],
    get_head_padded_fixed_string = Core_Bigstring[130],
    get_head_padded_fixed_string_l = Core_Bigstring[131],
    set_head_padded_fixed_string = Core_Bigstring[132],
    IOError = [248, "Bigstring_unix.IOError", runtime.caml_fresh_oo_id(0)],
    cst_sendmsg_nonblocking_no_sig = "sendmsg_nonblocking_no_sigpipe",
    cst_count_n_srcs = ": count > n_srcs",
    cst_count_n_lens = ": count > n_lens",
    cst_really_output = "really_output",
    cst_writev_nonblocking = "writev_nonblocking",
    cst_writev = "writev",
    cst_count_0 = ": count < 0",
    cst_count_n_iovecs = ": count > n_iovecs",
    cst_write_assume_fd_is_nonbloc = "write_assume_fd_is_nonblocking",
    cst_write = "write",
    cst_sendto_nonblocking_no_sigp = "sendto_nonblocking_no_sigpipe",
    cst_send_nonblocking_no_sigpip = "send_nonblocking_no_sigpipe",
    cst_really_send_no_sigpipe = "really_send_no_sigpipe",
    cst_really_write = "really_write",
    cst_really_input = "really_input",
    cst_read_assume_fd_is_nonblock = "read_assume_fd_is_nonblocking",
    cst_recvfrom_assume_fd_is_nonb = "recvfrom_assume_fd_is_nonblocking",
    cst_recv_peek_assume_fd_is_non = "recv_peek_assume_fd_is_nonblocking",
    cst_really_recv = "really_recv",
    _d_ =
      [0,
       [2,
        0,
        [11,
         cst_min_len,
         [4, 0, 0, 0, [11, ") > len (", [4, 0, 0, 0, [12, 41, 0]]]]]],
       "%s: min_len (%d) > len (%d)"],
    _e_ =
      [0,
       [2, 0, [11, cst_min_len, [4, 0, 0, 0, [11, ") < 0", 0]]]],
       "%s: min_len (%d) < 0"],
    _b_ = [0, "bigstring_unix/src/bigstring_unix.ml.IOError"],
    _c_ = [0, "_none_", 0, -1],
    cst_Bigstring_End_of_file = "Bigstring.End_of_file",
    cst_Bigstring_IOError = "Bigstring.IOError",
    _m_ = [0, cst_bigstring_unix_src_bigstri, 391, 4],
    cst_Bigstring_recvmmsg_assume_ =
      "Bigstring.recvmmsg_assume_fd_is_nonblocking",
    cst_bigstring_unix = cst_bigstring_unix$0,
    cst_Bigstring_unix = cst_Bigstring_unix$0;
   function _a_(param){
    if(param[1] !== IOError)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(Core[389], arg0_001),
     res1_004 = caml_call1(Core[625], arg1_002);
    return [1, [0, _b_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, IOError, _a_);
   caml_call2(Stdlib_Callback[2], cst_Bigstring_End_of_file, Stdlib[12]);
   caml_call2
    (Stdlib_Callback[2], cst_Bigstring_IOError, [0, IOError, 0, Core[7]]);
   runtime.bigstring_init_stub(0);
   function check_min_len(loc, len, param){
    if(! param) return 0;
    var min_len = param[1];
    if(caml_call2(Core[91], min_len, len)){
     var msg = caml_call4(Core[265], _d_, loc, min_len, len);
     caml_call1(Core[5], msg);
    }
    if(caml_call2(Core[92], min_len, 0)){
     var msg$0 = caml_call3(Core[265], _e_, loc, min_len);
     caml_call1(Core[5], msg$0);
    }
    return min_len;
   }
   function read(min_len, fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc, pos, len$0, bstr);
    var min_len$0 = check_min_len(loc, len$0, min_len);
    return runtime.bigstring_read_stub(min_len$0, fd, pos, len$0, bstr);
   }
   function pread(min_len, fd, offset, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc$0, pos, len$0, bstr);
    var min_len$0 = check_min_len(loc$0, len$0, min_len);
    return runtime.bigstring_pread_bytecode
            (min_len$0, fd, offset, pos, len$0, bstr);
   }
   function pread_assume_fd_is_nonblocking(fd, offset, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc$1, pos, len$0, bstr);
    return runtime.bigstring_pread_assume_fd_is_nonblocking_stub
            (fd, offset, pos, len$0, bstr);
   }
   function really_read(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    read([0, len$0], fd, [0, pos], [0, len$0], bstr);
    return 0;
   }
   function really_pread(fd, offset, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    pread([0, len$0], fd, offset, [0, pos], [0, len$0], bstr);
    return 0;
   }
   function really_recv(sock, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_really_recv, pos, len$0, bstr);
    return runtime.bigstring_really_recv_stub(sock, pos, len$0, bstr);
   }
   function recv_peek_assume_fd_is_nonbloc(sock, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    caml_call4(check_args, cst_recv_peek_assume_fd_is_non, pos, len, bstr);
    return runtime.bigstring_recv_peek_assume_fd_is_nonblocking_stub
            (sock, pos, len, bstr);
   }
   function recvfrom_assume_fd_is_nonblock(sock, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_recvfrom_assume_fd_is_nonb, pos, len$0, bstr);
    return runtime.bigstring_recvfrom_assume_fd_is_nonblocking_stub
            (sock, pos, len$0, bstr);
   }
   function read_assume_fd_is_nonblocking(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_read_assume_fd_is_nonblock, pos, len$0, bstr);
    return runtime.bigstring_read_assume_fd_is_nonblocking_stub
            (fd, pos, len$0, bstr);
   }
   function input(min_len, ic, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc$2, pos, len$0, bstr);
    var min_len$0 = check_min_len(loc$2, len$0, min_len);
    return runtime.bigstring_input_stub(min_len$0, ic, pos, len$0, bstr);
   }
   function really_input(ic, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_really_input, pos, len$0, bstr);
    runtime.bigstring_input_stub(len$0, ic, pos, len$0, bstr);
    return 0;
   }
   function really_write(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_really_write, pos, len$0, bstr);
    return runtime.bigstring_really_write_stub(fd, pos, len$0, bstr);
   }
   function pwrite_assume_fd_is_nonblockin(fd, offset, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc$3, pos, len$0, bstr);
    return runtime.bigstring_pwrite_assume_fd_is_nonblocking_stub
            (fd, offset, pos, len$0, bstr);
   }
   function _f_(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_really_send_no_sigpipe, pos, len$0, bstr);
    return runtime.bigstring_really_send_no_sigpipe_stub(fd, pos, len$0, bstr);
   }
   function _g_(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_send_nonblocking_no_sigpip, pos, len$0, bstr);
    return runtime.bigstring_send_nonblocking_no_sigpipe_stub
            (fd, pos, len$0, bstr);
   }
   var
    really_send_no_sigpipe = [0, _f_],
    send_nonblocking_no_sigpipe = [0, _g_],
    sendto_nonblocking_no_sigpipe =
      [0,
       function(fd, opt, len, bstr, sockaddr){
        if(opt) var sth = opt[1], pos = sth; else var pos = 0;
        var len$0 = caml_call3(get_opt_len, bstr, pos, len);
        caml_call4
         (check_args, cst_sendto_nonblocking_no_sigp, pos, len$0, bstr);
        return runtime.bigstring_sendto_nonblocking_no_sigpipe_stub
                (fd, pos, len$0, bstr, sockaddr);
       }],
    unsafe_really_send_no_sigpipe =
      [0,
       function(_F_, _E_, _D_, _C_){
        return runtime.bigstring_really_send_no_sigpipe_stub
                (_F_, _E_, _D_, _C_);
       }],
    unsafe_send_nonblocking_no_sig =
      [0,
       function(_B_, _A_, _z_, _y_){
        return runtime.bigstring_send_nonblocking_no_sigpipe_stub
                (_B_, _A_, _z_, _y_);
       }];
   function write(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_write, pos, len$0, bstr);
    return runtime.bigstring_write_stub(fd, pos, len$0, bstr);
   }
   function write_assume_fd_is_nonblocking(fd, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_write_assume_fd_is_nonbloc, pos, len$0, bstr);
    return runtime.bigstring_write_assume_fd_is_nonblocking_stub
            (fd, pos, len$0, bstr);
   }
   function get_iovec_count(loc, iovecs, param){
    if(! param) return iovecs.length - 1;
    var count = param[1];
    if(caml_call2(Core[92], count, 0)){
     var _w_ = caml_call2(Core[18], loc, cst_count_0);
     caml_call1(Core[5], _w_);
    }
    var n_iovecs = iovecs.length - 1;
    if(caml_call2(Core[91], count, n_iovecs)){
     var _x_ = caml_call2(Core[18], loc, cst_count_n_iovecs);
     caml_call1(Core[5], _x_);
    }
    return count;
   }
   function writev(fd, count, iovecs){
    var count$0 = get_iovec_count(cst_writev, iovecs, count);
    return runtime.bigstring_writev_stub(fd, iovecs, count$0);
   }
   function writev_assume_fd_is_nonblockin(fd, count, iovecs){
    var count$0 = get_iovec_count(cst_writev_nonblocking, iovecs, count);
    return runtime.bigstring_writev_assume_fd_is_nonblocking_stub
            (fd, iovecs, count$0);
   }
   function output(min_len, oc, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, loc$4, pos, len$0, bstr);
    var min_len$0 = check_min_len(loc$4, len$0, min_len);
    return runtime.bigstring_output_stub(min_len$0, oc, pos, len$0, bstr);
   }
   function really_output(oc, opt, len, bstr){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var len$0 = caml_call3(get_opt_len, bstr, pos, len);
    caml_call4(check_args, cst_really_output, pos, len$0, bstr);
    runtime.bigstring_output_stub(len$0, oc, pos, len$0, bstr);
    return 0;
   }
   function recvmmsg_assume_fd_is_nonblock(fd, count, srcs, iovecs, lens){
    var count$0 = get_iovec_count(loc$5, iovecs, count);
    if(srcs){
     var a = srcs[1];
     if(caml_call2(Core[91], count$0, a.length - 1)){
      var _u_ = caml_call2(Core[18], loc$5, cst_count_n_srcs);
      caml_call1(Core[5], _u_);
     }
    }
    if(caml_call2(Core[91], count$0, lens.length - 1)){
     var _v_ = caml_call2(Core[18], loc$5, cst_count_n_lens);
     caml_call1(Core[5], _v_);
    }
    return runtime.bigstring_recvmmsg_assume_fd_is_nonblocking_stub
            (fd, iovecs, count$0, srcs, lens);
   }
   var
    unsafe_recvmmsg_assume_fd_is_n =
      [0,
       function(_t_, _s_, _r_, _q_, _p_){
        return runtime.bigstring_recvmmsg_assume_fd_is_nonblocking_stub
                (_t_, _s_, _r_, _q_, _p_);
       }],
    ok = [0, recvmmsg_assume_fd_is_nonblock];
   try{
    var
     _l_ =
       recvmmsg_assume_fd_is_nonblock
        (caml_call1(Core_unix_File_descr[13], -1), 0, 0, [0], [0]);
    if(! caml_call2(Core[90], _l_, 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
    var recvmmsg_assume_fd_is_nonblock$0 = ok;
   }
   catch(_o_){
    var _h_ = caml_wrap_exception(_o_);
    a:
    {
     if(_h_[1] === Core_unix[4]){
      var _i_ = _h_[2];
      if(typeof _i_ === "number" && 25 === _i_){
       var
        _j_ = caml_call1(Core_Or_error[52], cst_Bigstring_recvmmsg_assume_);
       break a;
      }
     }
     var _j_ = ok;
    }
    var recvmmsg_assume_fd_is_nonblock$0 = _j_;
   }
   function _k_(fd, iovecs, count){
    var
     res =
       runtime.bigstring_sendmsg_nonblocking_no_sigpipe_stub
        (fd, iovecs, count);
    return caml_call2(Core[90], res, -1) ? 0 : [0, res];
   }
   var
    sendmsg_nonblocking_no_sigpipe =
      [0,
       function(fd, count, iovecs){
        var
         count$0 =
           get_iovec_count(cst_sendmsg_nonblocking_no_sig, iovecs, count);
        return _k_(fd, iovecs, count$0);
       }],
    unsafe_sendmsg_nonblocking_no_ = [0, _k_];
   function map_file(shared, fd, size){
    var
     _n_ =
       caml_call6
        (Core_unix[84],
         fd,
         0,
         Stdlib_Bigarray[13],
         Stdlib_Bigarray[15],
         shared,
         [0, size]);
    return caml_call1(Stdlib_Bigarray[23], _n_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bigstring_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bigstring_unix);
   var
    Bigstring_unix =
      [0,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       compare,
       t_of_sexp,
       sexp_of_t,
       compare_t_frozen,
       hash_fold_t_frozen,
       hash_t_frozen,
       sexp_of_t_frozen,
       t_frozen_of_sexp,
       equal,
       init,
       of_string,
       of_bytes,
       to_string,
       to_bytes,
       concat,
       check_args,
       get_opt_len,
       length,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       copy,
       memset,
       unsafe_memset,
       memcmp,
       memcmp_bytes,
       memcmp_string,
       find,
       memmem,
       get_int8,
       set_int8_exn,
       get_uint8,
       set_uint8_exn,
       unsafe_get_int8,
       unsafe_set_int8,
       unsafe_get_uint8,
       unsafe_set_uint8,
       get_int16_le,
       get_int16_be,
       set_int16_le_exn,
       set_int16_be_exn,
       unsafe_get_int16_le,
       unsafe_get_int16_be,
       unsafe_set_int16_le,
       unsafe_set_int16_be,
       get_uint16_le,
       get_uint16_be,
       set_uint16_le_exn,
       set_uint16_be_exn,
       unsafe_get_uint16_le,
       unsafe_get_uint16_be,
       unsafe_set_uint16_le,
       unsafe_set_uint16_be,
       get_int32_le,
       get_int32_be,
       set_int32_le_exn,
       set_int32_be_exn,
       unsafe_get_int32_le,
       unsafe_get_int32_be,
       unsafe_set_int32_le,
       unsafe_set_int32_be,
       get_uint32_le,
       get_uint32_be,
       set_uint32_le_exn,
       set_uint32_be_exn,
       unsafe_get_uint32_le,
       unsafe_get_uint32_be,
       unsafe_set_uint32_le,
       unsafe_set_uint32_be,
       get_int64_le_exn,
       get_int64_be_exn,
       get_int64_le_trunc,
       get_int64_be_trunc,
       set_int64_le,
       set_int64_be,
       unsafe_get_int64_le_exn,
       unsafe_get_int64_be_exn,
       unsafe_get_int64_le_trunc,
       unsafe_get_int64_be_trunc,
       unsafe_set_int64_le,
       unsafe_set_int64_be,
       get_uint64_be_exn,
       get_uint64_le_exn,
       set_uint64_le_exn,
       set_uint64_be_exn,
       unsafe_get_uint64_be_exn,
       unsafe_get_uint64_le_exn,
       unsafe_set_uint64_le,
       unsafe_set_uint64_be,
       get_int32_t_le,
       get_int32_t_be,
       set_int32_t_le,
       set_int32_t_be,
       unsafe_get_int32_t_le,
       unsafe_get_int32_t_be,
       unsafe_set_int32_t_le,
       unsafe_set_int32_t_be,
       get_int64_t_le,
       get_int64_t_be,
       set_int64_t_le,
       set_int64_t_be,
       unsafe_get_int64_t_le,
       unsafe_get_int64_t_be,
       unsafe_set_int64_t_le,
       unsafe_set_int64_t_be,
       get_string,
       unsafe_get_string,
       create,
       sub_shared,
       write_bin_prot,
       write_bin_prot_known_size,
       read_bin_prot,
       read_bin_prot_verbose_errors,
       get_tail_padded_fixed_string,
       get_tail_padded_fixed_string_l,
       set_tail_padded_fixed_string,
       get_head_padded_fixed_string,
       get_head_padded_fixed_string_l,
       set_head_padded_fixed_string,
       IOError,
       read,
       really_read,
       really_recv,
       recv_peek_assume_fd_is_nonbloc,
       recvfrom_assume_fd_is_nonblock,
       read_assume_fd_is_nonblocking,
       pread,
       really_pread,
       pread_assume_fd_is_nonblocking,
       input,
       really_input,
       really_write,
       really_send_no_sigpipe,
       send_nonblocking_no_sigpipe,
       sendto_nonblocking_no_sigpipe,
       write,
       pwrite_assume_fd_is_nonblockin,
       write_assume_fd_is_nonblocking,
       writev,
       writev_assume_fd_is_nonblockin,
       recvmmsg_assume_fd_is_nonblock$0,
       unsafe_recvmmsg_assume_fd_is_n,
       sendmsg_nonblocking_no_sigpipe,
       output,
       really_output,
       unsafe_really_send_no_sigpipe,
       unsafe_send_nonblocking_no_sig,
       unsafe_sendmsg_nonblocking_no_,
       map_file];
   runtime.caml_register_global(56, Bigstring_unix, cst_Bigstring_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
