// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai_introspection_protocol
//# unitInfo: Requires: Base, Base__Sequence, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Core, Core__Error, Core__Int63, Core__Map, Core__Or_error, Core__Quickcheck, Core__Sexp, Core__Time_ns, Nonempty_list, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_Babel = "Babel",
    cst_Babel_polling_state_rpc = "Babel_polling_state_rpc",
    cst_Bonsai_introspection_proto$0 = "Bonsai_introspection_protocol",
    cst_Dispatch = "Dispatch",
    cst_Finished = "Finished",
    cst_No_sexp_of_provided = "No_sexp_of_provided",
    cst_Normal = "Normal",
    cst_Poll = "Poll",
    cst_Poll_until_ok = "Poll_until_ok",
    cst_Polling_state_rpc = "Polling_state_rpc",
    cst_Running = "Running",
    cst_Sexp_of_provided = "Sexp_of_provided",
    cst_Started = "Started",
    cst_Streamable = "Streamable",
    cst_V1 = "V1",
    cst_aborted$0 = "aborted",
    cst_babel = "babel",
    cst_babel_polling_state_rpc = "babel_polling_state_rpc",
    cst_bonsai_introspection_proto$0 = "bonsai_introspection_protocol",
    cst_descriptions$1 = "descriptions",
    cst_dispatch = "dispatch",
    cst_duration$3 = "duration",
    cst_every$1 = "every",
    cst_finished$0 = "finished",
    cst_id$2 = "id",
    cst_interval$4 = "interval",
    cst_name$3 = "name",
    cst_no_sexp_of_provided = "no_sexp_of_provided",
    cst_normal = "normal",
    cst_path$1 = "path",
    cst_poll = "poll",
    cst_poll_until_ok = "poll_until_ok",
    cst_polling_state_rpc = "polling_state_rpc",
    cst_query$1 = "query",
    cst_response$1 = "response",
    cst_retry_interval$0 = "retry_interval",
    cst_rpc_kind$1 = "rpc_kind",
    cst_running = "running",
    cst_sexp_of_provided = "sexp_of_provided",
    cst_start_time$1 = "start_time",
    cst_started = "started",
    cst_status$0 = "status",
    cst_streamable = "streamable",
    cst_v1 = "v1",
    cst_version$3 = "version",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ")",
    error_source_003 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_kind.Interval.t",
    error_source_036 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_kind.Polling_state_rpc_interval.t",
    error_source_057 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_kind.Async_rpc_kernel_rpc_descriptions.t",
    error_source_077 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_kind.t",
    error_source_178 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Or_no_sexp_of_provided.t",
    error_source_217 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_status.t",
    default_262 = [0, 0],
    error_source_257 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Event.V1.t",
    default_287 = [0, 0],
    error_source_333 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Event.Stable.t",
    error_source_350 =
      "src/protocol/introspection/bonsai_introspection_protocol.ml.Rpc_state.t",
    Core_Time_ns = global_data.Core__Time_ns,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_Sequence = global_data.Base__Sequence,
    Base = global_data.Base,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Or_error = global_data.Core__Or_error,
    Nonempty_list = global_data.Nonempty_list,
    Core_Int63 = global_data.Core__Int63,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Error = global_data.Core__Error,
    Core_Quickcheck = global_data.Core__Quickcheck;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_introspection_proto$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_introspection_proto$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "src/protocol/introspection/bonsai_introspection_protocol.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_bonsai_introspection_proto$0,
     "bonsai_introspection_protocol.ml");
   var
    of_int_exn = Core_Int63[4],
    to_int_exn = Core_Int63[5],
    typerep_of_t = Core_Int63[90],
    typename_of_t = Core_Int63[91],
    bin_size_t = Core_Int63[94],
    bin_write_t = Core_Int63[95],
    bin_read_t = Core_Int63[96],
    bin_read_t$0 = Core_Int63[97],
    bin_shape_t = Core_Int63[98],
    bin_writer_t = Core_Int63[99],
    bin_reader_t = Core_Int63[100],
    bin_t = Core_Int63[101],
    t_of_sexp = Core_Int63[102],
    sexp_of_t = Core_Int63[103],
    of_string = Core_Int63[104],
    to_string = Core_Int63[105],
    symbol = Core_Int63[107],
    symbol$0 = Core_Int63[108],
    symbol$1 = Core_Int63[109],
    symbol$2 = Core_Int63[110],
    symbol$3 = Core_Int63[111],
    symbol$4 = Core_Int63[112],
    equal = Core_Int63[113],
    compare = Core_Int63[114],
    min = Core_Int63[115],
    max = Core_Int63[116],
    ascending = Core_Int63[117],
    descending = Core_Int63[118],
    between = Core_Int63[119],
    clamp_exn = Core_Int63[120],
    clamp = Core_Int63[121],
    Replace_polymorphic_compare = Core_Int63[122],
    comparator = Core_Int63[123],
    Map = Core_Int63[124],
    Set = Core_Int63[125],
    hash_fold_t = Core_Int63[126],
    hash = Core_Int63[127],
    hashable = Core_Int63[128],
    Table = Core_Int63[129],
    Hash_set = Core_Int63[130],
    Hash_queue = Core_Int63[131],
    validate_lbound = Core_Int63[132],
    validate_ubound = Core_Int63[133],
    validate_bound = Core_Int63[134],
    quickcheck_generator = Core_Int63[139],
    quickcheck_observer = Core_Int63[140],
    quickcheck_shrinker = Core_Int63[141],
    id = [0, Core_Int63[16]],
    _bc_ = [0, cst_duration$3],
    _bd_ = [0, cst_id$2],
    cst_Saw_abort_message_for_unkn =
      "Saw abort message for unknown rpc id, ignoring abort message.",
    _a$_ = [0, cst_response$1],
    _ba_ = [0, cst_duration$3],
    _bb_ = [0, cst_id$2],
    cst_Saw_finished_message_for_u =
      "Saw finished message for unknown rpc id, ignoring finish message.",
    _a9_ = [0, "rpc_state"],
    _a__ = [0, cst_id$2],
    cst_Saw_started_message_with_d =
      "Saw started message with duplicate ids, ignoring message.",
    cst_finish = "finish",
    cst_abort = "abort",
    cst_event_Ignoring_new_event_i = " event. Ignoring new event. (id ",
    cst_event_for_already = " event for already ",
    cst_Saw = "Saw ",
    cst_finished = cst_finished$0,
    cst_aborted = cst_aborted$0,
    _a4_ = [0, cst_path$1],
    _a5_ = [0, cst_status$0],
    _a6_ = [0, cst_query$1],
    _a7_ = [0, cst_start_time$1],
    _a8_ = [0, cst_rpc_kind$1],
    cst_path$0 = cst_path$1,
    cst_status = cst_status$0,
    cst_query$0 = cst_query$1,
    cst_start_time$0 = cst_start_time$1,
    cst_rpc_kind$0 = cst_rpc_kind$1,
    _aY_ = [0, cst_V1],
    _aC_ = [0, cst_path$1],
    _aH_ = [0, cst_query$1],
    _aD_ = [0, cst_start_time$1],
    _aE_ = [0, cst_rpc_kind$1],
    _aF_ = [0, cst_id$2],
    _aG_ = [0, cst_Started],
    _aL_ = [0, cst_response$1],
    _aI_ = [0, cst_duration$3],
    _aJ_ = [0, cst_id$2],
    _aK_ = [0, cst_Finished],
    _aM_ = [0, cst_duration$3],
    _aN_ = [0, cst_id$2],
    _aO_ = [0, cst_Aborted],
    cst_path = cst_path$1,
    cst_query = cst_query$1,
    cst_start_time = cst_start_time$1,
    cst_rpc_kind = cst_rpc_kind$1,
    cst_id = cst_id$2,
    cst_response$0 = cst_response$1,
    cst_duration$1 = cst_duration$3,
    cst_id$0 = cst_id$2,
    cst_duration$2 = cst_duration$3,
    cst_id$1 = cst_id$2,
    _an_ = [0, cst_Running],
    _ao_ = [0, cst_response$1],
    _ap_ = [0, cst_duration$3],
    _aq_ = [0, cst_Finished],
    _ar_ = [0, cst_duration$3],
    _as_ = [0, cst_Aborted],
    cst_response = cst_response$1,
    cst_duration = cst_duration$3,
    cst_duration$0 = cst_duration$3,
    _ag_ = [0, cst_Sexp_of_provided],
    _ah_ = [0, cst_No_sexp_of_provided],
    _D_ = [0, cst_interval$4],
    _E_ = [0, cst_version$3],
    _F_ = [0, cst_name$3],
    _G_ = [0, cst_Normal],
    _H_ = [0, cst_interval$4],
    _I_ = [0, cst_descriptions$1],
    _J_ = [0, cst_Babel],
    _K_ = [0, cst_interval$4],
    _L_ = [0, cst_version$3],
    _M_ = [0, cst_name$3],
    _N_ = [0, cst_Streamable],
    _O_ = [0, cst_interval$4],
    _P_ = [0, cst_version$3],
    _Q_ = [0, cst_name$3],
    _R_ = [0, cst_Polling_state_rpc],
    _S_ = [0, cst_interval$4],
    _T_ = [0, cst_descriptions$1],
    _U_ = [0, cst_Babel_polling_state_rpc],
    cst_interval$1 = cst_interval$4,
    cst_version$2 = cst_version$3,
    cst_name$2 = cst_name$3,
    cst_interval$3 = cst_interval$4,
    cst_descriptions$0 = cst_descriptions$1,
    cst_interval = cst_interval$4,
    cst_version$0 = cst_version$3,
    cst_name$0 = cst_name$3,
    cst_interval$0 = cst_interval$4,
    cst_version$1 = cst_version$3,
    cst_name$1 = cst_name$3,
    cst_interval$2 = cst_interval$4,
    cst_descriptions = cst_descriptions$1,
    _y_ = [0, cst_version$3],
    _z_ = [0, cst_name$3],
    cst_version = cst_version$3,
    cst_name = cst_name$3,
    _o_ = [0, cst_every$1],
    _p_ = [0, cst_Poll],
    _q_ = [0, cst_Dispatch],
    cst_every$0 = cst_every$1,
    _a_ = [0, cst_Dispatch],
    _b_ = [0, cst_retry_interval$0],
    _c_ = [0, cst_Poll_until_ok],
    _d_ = [0, cst_every$1],
    _e_ = [0, cst_Poll],
    cst_retry_interval = cst_retry_interval$0,
    cst_every = cst_every$1,
    cst_failure = "failure",
    cst_bonsai_introspection_proto = cst_bonsai_introspection_proto$0,
    cst_Bonsai_introspection_proto = cst_Bonsai_introspection_proto$0;
   function create(param){
    var out = id[1];
    caml_call1(Core_Int63[53], id);
    return out;
   }
   function reset_counter(param){id[1] = Core_Int63[16]; return 0;}
   var For_testing = [0, reset_counter];
   function t_of_sexp$0(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _fK_ = sexp_005[1];
      b:
      if(caml_string_notequal(_fK_, cst_Dispatch)){
       c:
       if(caml_string_notequal(_fK_, cst_Poll)){
        if(caml_string_notequal(_fK_, cst_Poll_until_ok)){
         if(! caml_string_notequal(_fK_, cst_dispatch)) break b;
         if(! caml_string_notequal(_fK_, cst_poll)) break c;
         if(caml_string_notequal(_fK_, cst_poll_until_ok)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
      }
      return 0;
     }
     var _fL_ = sexp_005[1];
     if(! _fL_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _fM_ = _fL_[1];
     if(0 !== _fM_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var _fN_ = _fM_[1];
     b:
     if(caml_string_notequal(_fN_, cst_Dispatch)){
      c:
      if(caml_string_notequal(_fN_, cst_Poll)){
       if(caml_string_notequal(_fN_, cst_Poll_until_ok)){
        if(! caml_string_notequal(_fN_, cst_dispatch)) break b;
        if(! caml_string_notequal(_fN_, cst_poll)) break c;
        if(caml_string_notequal(_fN_, cst_poll_until_ok)) break a;
       }
       var
        sexps_006 = _fL_[2],
        _fO_ =
          function(param){
           var retry_interval = param[1];
           return [0, retry_interval];
          },
        _fP_ = 0,
        _fQ_ =
          function(param){
           return caml_string_notequal(param, cst_retry_interval$0) ? -1 : 0;
          };
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_003,
                sexp_005,
                [0, cst_retry_interval, 1, Core_Time_ns[1][9], 0],
                _fQ_,
                _fP_,
                _fO_,
                sexps_006);
      }
      var
       sexps_008 = _fL_[2],
       _fR_ = function(param){var every = param[1]; return [1, every];},
       _fS_ = 0,
       _fT_ =
         function(param){
          return caml_string_notequal(param, cst_every$1) ? -1 : 0;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_003,
               sexp_005,
               [0, cst_every, 1, Core_Time_ns[1][9], 0],
               _fT_,
               _fS_,
               _fR_,
               sexps_008);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return _a_;
    if(0 === param[0]){
     var
      retry_interval_010 = param[1],
      arg_011 = caml_call1(Core_Time_ns[1][10], retry_interval_010),
      bnds_009 = [0, [1, [0, _b_, [0, arg_011, 0]]], 0];
     return [1, [0, _c_, bnds_009]];
    }
    var
     every_013 = param[1],
     arg_014 = caml_call1(Core_Time_ns[1][10], every_013),
     bnds_012 = [0, [1, [0, _d_, [0, arg_014, 0]]], 0];
    return [1, [0, _e_, bnds_012]];
   }
   function equal$0(a_015, b_016){
    if(a_015 === b_016) return 1;
    if(typeof a_015 === "number"){
     if(typeof b_016 === "number") return 1;
     if(1 === b_016[0]) return 0;
    }
    else{
     if(0 === a_015[0]){
      if(typeof b_016 !== "number" && 0 === b_016[0])
       return caml_call2(Core_Time_ns[1][21], a_015[1], b_016[1]);
      return 0;
     }
     if(typeof b_016 === "number") return 0;
     if(1 === b_016[0])
      return caml_call2(Core_Time_ns[1][21], a_015[1], b_016[1]);
    }
    return 0;
   }
   var _f_ = 0;
   function _g_(size_032, random_033){return 0;}
   var
    _h_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _g_)], _f_];
   function _i_(size_030, random_031){
    return [1,
            caml_call3
             (Base_quickcheck_Generator[128],
              Core_Time_ns[1][61],
              size_030,
              random_031)];
   }
   var
    _j_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _i_)], _h_];
   function _k_(size_028, random_029){
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128],
              Core_Time_ns[1][61],
              size_028,
              random_029)];
   }
   var
    _l_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _k_)], _j_],
    quickcheck_generator$0 = caml_call1(Base_quickcheck_Generator[60], _l_);
   function _m_(x_023, size_024, hash_025){
    if(typeof x_023 === "number"){
     var hash_025$0 = caml_call2(Base[133], hash_025, 2);
     return hash_025$0;
    }
    if(0 === x_023[0]){
     var
      x_026 = x_023[1],
      hash_025$1 = caml_call2(Base[133], hash_025, 0),
      hash_025$2 =
        caml_call4
         (Base_quickcheck_Observer[37],
          Core_Time_ns[1][62],
          x_026,
          size_024,
          hash_025$1);
     return hash_025$2;
    }
    var
     x_027 = x_023[1],
     hash_025$3 = caml_call2(Base[133], hash_025, 1),
     hash_025$4 =
       caml_call4
        (Base_quickcheck_Observer[37],
         Core_Time_ns[1][62],
         x_027,
         size_024,
         hash_025$3);
    return hash_025$4;
   }
   var quickcheck_observer$0 = caml_call1(Base_quickcheck_Observer[36], _m_);
   function _n_(param){
    if(typeof param === "number") return caml_call1(Base_Sequence[70], 0);
    if(0 === param[0]){
     var
      x_021 = param[1],
      _fC_ = 0,
      _fD_ = function(x_021){return [0, x_021];},
      _fE_ =
        caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_021),
      _fF_ = [0, caml_call2(Base_Sequence[35], _fE_, _fD_), _fC_];
     return caml_call1(Base_Sequence[70], _fF_);
    }
    var x_022 = param[1], _fG_ = 0;
    function _fH_(x_022){return [1, x_022];}
    var
     _fI_ =
       caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_022),
     _fJ_ = [0, caml_call2(Base_Sequence[35], _fI_, _fH_), _fG_];
    return caml_call1(Base_Sequence[70], _fJ_);
   }
   var quickcheck_shrinker$0 = caml_call1(Base_quickcheck_Shrinker[36], _n_);
   function t_of_sexp$1(sexp_038){
    a:
    {
     if(0 === sexp_038[0]){
      var _fv_ = sexp_038[1];
      b:
      if(caml_string_notequal(_fv_, cst_Dispatch)){
       if(caml_string_notequal(_fv_, cst_Poll)){
        if(! caml_string_notequal(_fv_, cst_dispatch)) break b;
        if(caml_string_notequal(_fv_, cst_poll)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_036, sexp_038);
      }
      return 0;
     }
     var _fw_ = sexp_038[1];
     if(! _fw_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_036, sexp_038);
     var _fx_ = _fw_[1];
     if(0 !== _fx_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_036, sexp_038);
     var _fy_ = _fx_[1];
     b:
     if(caml_string_notequal(_fy_, cst_Dispatch)){
      if(caml_string_notequal(_fy_, cst_Poll)){
       if(! caml_string_notequal(_fy_, cst_dispatch)) break b;
       if(caml_string_notequal(_fy_, cst_poll)) break a;
      }
      var
       sexps_039 = _fw_[2],
       _fz_ = function(param){var every = param[1]; return [0, every];},
       _fA_ = 0,
       _fB_ =
         function(param){
          return caml_string_notequal(param, cst_every$1) ? -1 : 0;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_036,
               sexp_038,
               [0, cst_every$0, 1, Core_Time_ns[1][9], 0],
               _fB_,
               _fA_,
               _fz_,
               sexps_039);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_038);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_036, sexp_038);
   }
   function sexp_of_t$1(param){
    if(! param) return _q_;
    var
     every_041 = param[1],
     arg_042 = caml_call1(Core_Time_ns[1][10], every_041),
     bnds_040 = [0, [1, [0, _o_, [0, arg_042, 0]]], 0];
    return [1, [0, _p_, bnds_040]];
   }
   function equal$1(a_043, b_044){
    return a_043 === b_044
            ? 1
            : a_043
              ? b_044
                ? caml_call2(Core_Time_ns[1][21], a_043[1], b_044[1])
                : 0
              : b_044 ? 0 : 1;
   }
   var _r_ = 0;
   function _s_(size_054, random_055){return 0;}
   var
    _t_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _s_)], _r_];
   function _u_(size_052, random_053){
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128],
              Core_Time_ns[1][61],
              size_052,
              random_053)];
   }
   var
    _v_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _u_)], _t_],
    quickcheck_generator$1 = caml_call1(Base_quickcheck_Generator[60], _v_);
   function _w_(x_048, size_049, hash_050){
    if(x_048){
     var
      x_051 = x_048[1],
      hash_050$0 = caml_call2(Base[133], hash_050, 0),
      hash_050$1 =
        caml_call4
         (Base_quickcheck_Observer[37],
          Core_Time_ns[1][62],
          x_051,
          size_049,
          hash_050$0);
     return hash_050$1;
    }
    var hash_050$2 = caml_call2(Base[133], hash_050, 1);
    return hash_050$2;
   }
   var quickcheck_observer$1 = caml_call1(Base_quickcheck_Observer[36], _w_);
   function _x_(param){
    if(! param) return caml_call1(Base_Sequence[70], 0);
    var x_047 = param[1], _fr_ = 0;
    function _fs_(x_047){return [0, x_047];}
    var
     _ft_ =
       caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_047),
     _fu_ = [0, caml_call2(Base_Sequence[35], _ft_, _fs_), _fr_];
    return caml_call1(Base_Sequence[70], _fu_);
   }
   var quickcheck_shrinker$1 = caml_call1(Base_quickcheck_Shrinker[36], _x_);
   function t_of_sexp$2(x_058){
    function _fo_(param){
     var version = param[2][1], name = param[1];
     return [0, name, version];
    }
    var _fp_ = 0;
    function _fq_(param){
     return caml_string_notequal(param, cst_name$3)
             ? caml_string_notequal(param, cst_version$3) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_057,
             [0, cst_name, 1, Core[559], [0, cst_version, 1, Core[390], 0]],
             _fq_,
             _fp_,
             _fo_,
             x_058);
   }
   function sexp_of_t$2(param){
    var
     version_062 = param[2],
     name_060 = param[1],
     arg_063 = caml_call1(Core[389], version_062),
     bnds_059 = [0, [1, [0, _y_, [0, arg_063, 0]]], 0],
     arg_061 = caml_call1(Core[558], name_060),
     bnds_059$0 = [0, [1, [0, _z_, [0, arg_061, 0]]], bnds_059];
    return [1, bnds_059$0];
   }
   function equal$2(a_064, b_065){
    if(a_064 === b_065) return 1;
    var _fn_ = caml_call2(Core[553], a_064[1], b_065[1]);
    return _fn_ ? caml_call2(Core[384], a_064[2], b_065[2]) : _fn_;
   }
   function _A_(size_073, random_074){
    var
     _fm_ =
       caml_call3
        (Base_quickcheck_Generator[128], Core[103], size_073, random_074);
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128], Core[101], size_073, random_074),
            _fm_];
   }
   var
    quickcheck_generator$2 = caml_call1(Base_quickcheck_Generator[127], _A_);
   function _B_(x_068, size_071, hash_072){
    var
     x_070 = x_068[2],
     x_069 = x_068[1],
     hash_072$0 =
       caml_call4
        (Base_quickcheck_Observer[37], Core[111], x_069, size_071, hash_072),
     hash_072$1 =
       caml_call4
        (Base_quickcheck_Observer[37], Core[113], x_070, size_071, hash_072$0);
    return hash_072$1;
   }
   var quickcheck_observer$2 = caml_call1(Base_quickcheck_Observer[36], _B_);
   function _C_(param){
    var x_067 = param[2], x_066 = param[1], _ff_ = 0;
    function _fg_(x_067){return [0, x_066, x_067];}
    var
     _fh_ = caml_call2(Base_quickcheck_Shrinker[37], Core[123], x_067),
     _fi_ = [0, caml_call2(Base_Sequence[35], _fh_, _fg_), _ff_];
    function _fj_(x_066){return [0, x_066, x_067];}
    var
     _fk_ = caml_call2(Base_quickcheck_Shrinker[37], Core[121], x_066),
     _fl_ = [0, caml_call2(Base_Sequence[35], _fk_, _fj_), _fi_];
    return caml_call1(Base_Sequence[70], _fl_);
   }
   var quickcheck_shrinker$2 = caml_call1(Base_quickcheck_Shrinker[36], _C_);
   function t_of_sexp$3(sexp_079){
    a:
    {
     if(0 === sexp_079[0]){
      var _eR_ = sexp_079[1], _eS_ = caml_string_compare(_eR_, cst_babel);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _eS_){
           if(0 < _eS_){
            if(! caml_string_notequal(_eR_, cst_babel_polling_state_rpc))
             break e;
            if(! caml_string_notequal(_eR_, cst_normal)) break d;
            if(! caml_string_notequal(_eR_, cst_polling_state_rpc)) break c;
            if(caml_string_notequal(_eR_, cst_streamable)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_eR_, cst_Babel)){
           if(! caml_string_notequal(_eR_, cst_Babel_polling_state_rpc))
            break e;
           if(! caml_string_notequal(_eR_, cst_Normal)) break d;
           if(! caml_string_notequal(_eR_, cst_Polling_state_rpc)) break c;
           if(caml_string_notequal(_eR_, cst_Streamable)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_077, sexp_079);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_077, sexp_079);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_077, sexp_079);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_077, sexp_079);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_077, sexp_079);
     }
     var _eT_ = sexp_079[1];
     if(! _eT_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_077, sexp_079);
     var _eU_ = _eT_[1];
     if(0 !== _eU_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_077, sexp_079);
     var _eV_ = _eU_[1], _eW_ = caml_string_compare(_eV_, cst_babel);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= _eW_){
          if(0 < _eW_){
           if(! caml_string_notequal(_eV_, cst_babel_polling_state_rpc))
            break e;
           if(! caml_string_notequal(_eV_, cst_normal)) break d;
           if(! caml_string_notequal(_eV_, cst_polling_state_rpc)) break c;
           if(caml_string_notequal(_eV_, cst_streamable)) break a;
           break b;
          }
         }
         else if(caml_string_notequal(_eV_, cst_Babel)){
          if(! caml_string_notequal(_eV_, cst_Babel_polling_state_rpc))
           break e;
          if(! caml_string_notequal(_eV_, cst_Normal)) break d;
          if(! caml_string_notequal(_eV_, cst_Polling_state_rpc)) break c;
          if(caml_string_notequal(_eV_, cst_Streamable)) break a;
          break b;
         }
         var
          sexps_082 = _eT_[2],
          _e__ =
            function(param){
             var interval = param[2][1], descriptions = param[1];
             return [1, descriptions, interval];
            },
          _e$_ = 0,
          _fa_ =
            function(param){
             return caml_string_notequal(param, cst_descriptions$1)
                     ? caml_string_notequal(param, cst_interval$4) ? -1 : 1
                     : 0;
            },
          _fb_ =
            [0,
             cst_descriptions$0,
             1,
             caml_call1(Nonempty_list[3], t_of_sexp$2),
             [0, cst_interval$3, 1, t_of_sexp$0, 0]];
         return caml_call7
                 (Sexplib0_Sexp_conv_record[4],
                  error_source_077,
                  sexp_079,
                  _fb_,
                  _fa_,
                  _e$_,
                  _e__,
                  sexps_082);
        }
        var
         sexps_088 = _eT_[2],
         _e6_ =
           function(param){
            var interval = param[2][1], descriptions = param[1];
            return [4, descriptions, interval];
           },
         _e7_ = 0,
         _e8_ =
           function(param){
            return caml_string_notequal(param, cst_descriptions$1)
                    ? caml_string_notequal(param, cst_interval$4) ? -1 : 1
                    : 0;
           },
         _e9_ =
           [0,
            cst_descriptions,
            1,
            caml_call1(Nonempty_list[3], t_of_sexp$2),
            [0, cst_interval$2, 1, t_of_sexp$1, 0]];
        return caml_call7
                (Sexplib0_Sexp_conv_record[4],
                 error_source_077,
                 sexp_079,
                 _e9_,
                 _e8_,
                 _e7_,
                 _e6_,
                 sexps_088);
       }
       var
        sexps_080 = _eT_[2],
        _e3_ =
          function(param){
           var
            _fe_ = param[2],
            interval = _fe_[2][1],
            version = _fe_[1],
            name = param[1];
           return [0, name, version, interval];
          },
        _e4_ = 0,
        _e5_ =
          function(param){
           return caml_string_notequal(param, cst_interval$4)
                   ? caml_string_notequal
                      (param, cst_name$3)
                     ? caml_string_notequal(param, cst_version$3) ? -1 : 1
                     : 0
                   : 2;
          };
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_077,
                sexp_079,
                [0,
                 cst_name$2,
                 1,
                 Core[559],
                 [0,
                  cst_version$2,
                  1,
                  Core[390],
                  [0, cst_interval$1, 1, t_of_sexp$0, 0]]],
                _e5_,
                _e4_,
                _e3_,
                sexps_080);
      }
      var
       sexps_086 = _eT_[2],
       _e0_ =
         function(param){
          var
           _fd_ = param[2],
           interval = _fd_[2][1],
           version = _fd_[1],
           name = param[1];
          return [3, name, version, interval];
         },
       _e1_ = 0,
       _e2_ =
         function(param){
          return caml_string_notequal(param, cst_interval$4)
                  ? caml_string_notequal
                     (param, cst_name$3)
                    ? caml_string_notequal(param, cst_version$3) ? -1 : 1
                    : 0
                  : 2;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_077,
               sexp_079,
               [0,
                cst_name$1,
                1,
                Core[559],
                [0,
                 cst_version$1,
                 1,
                 Core[390],
                 [0, cst_interval$0, 1, t_of_sexp$1, 0]]],
               _e2_,
               _e1_,
               _e0_,
               sexps_086);
     }
     var
      sexps_084 = _eT_[2],
      _eX_ =
        function(param){
         var
          _fc_ = param[2],
          interval = _fc_[2][1],
          version = _fc_[1],
          name = param[1];
         return [2, name, version, interval];
        },
      _eY_ = 0,
      _eZ_ =
        function(param){
         return caml_string_notequal(param, cst_interval$4)
                 ? caml_string_notequal
                    (param, cst_name$3)
                   ? caml_string_notequal(param, cst_version$3) ? -1 : 1
                   : 0
                 : 2;
        };
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_077,
              sexp_079,
              [0,
               cst_name$0,
               1,
               Core[559],
               [0,
                cst_version$0,
                1,
                Core[390],
                [0, cst_interval, 1, t_of_sexp$0, 0]]],
              _eZ_,
              _eY_,
              _eX_,
              sexps_084);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_077, sexp_079);
   }
   function sexp_of_t$3(param){
    switch(param[0]){
      case 0:
       var
        interval_094 = param[3],
        version_092 = param[2],
        name_090 = param[1],
        arg_095 = sexp_of_t$0(interval_094),
        bnds_089 = [0, [1, [0, _D_, [0, arg_095, 0]]], 0],
        arg_093 = caml_call1(Core[389], version_092),
        bnds_089$0 = [0, [1, [0, _E_, [0, arg_093, 0]]], bnds_089],
        arg_091 = caml_call1(Core[558], name_090),
        bnds_089$1 = [0, [1, [0, _F_, [0, arg_091, 0]]], bnds_089$0];
       return [1, [0, _G_, bnds_089$1]];
      case 1:
       var
        interval_099 = param[2],
        descriptions_097 = param[1],
        arg_100 = sexp_of_t$0(interval_099),
        bnds_096 = [0, [1, [0, _H_, [0, arg_100, 0]]], 0],
        arg_098 = caml_call2(Nonempty_list[4], sexp_of_t$2, descriptions_097),
        bnds_096$0 = [0, [1, [0, _I_, [0, arg_098, 0]]], bnds_096];
       return [1, [0, _J_, bnds_096$0]];
      case 2:
       var
        interval_106 = param[3],
        version_104 = param[2],
        name_102 = param[1],
        arg_107 = sexp_of_t$0(interval_106),
        bnds_101 = [0, [1, [0, _K_, [0, arg_107, 0]]], 0],
        arg_105 = caml_call1(Core[389], version_104),
        bnds_101$0 = [0, [1, [0, _L_, [0, arg_105, 0]]], bnds_101],
        arg_103 = caml_call1(Core[558], name_102),
        bnds_101$1 = [0, [1, [0, _M_, [0, arg_103, 0]]], bnds_101$0];
       return [1, [0, _N_, bnds_101$1]];
      case 3:
       var
        interval_113 = param[3],
        version_111 = param[2],
        name_109 = param[1],
        arg_114 = sexp_of_t$1(interval_113),
        bnds_108 = [0, [1, [0, _O_, [0, arg_114, 0]]], 0],
        arg_112 = caml_call1(Core[389], version_111),
        bnds_108$0 = [0, [1, [0, _P_, [0, arg_112, 0]]], bnds_108],
        arg_110 = caml_call1(Core[558], name_109),
        bnds_108$1 = [0, [1, [0, _Q_, [0, arg_110, 0]]], bnds_108$0];
       return [1, [0, _R_, bnds_108$1]];
      default:
       var
        interval_118 = param[2],
        descriptions_116 = param[1],
        arg_119 = sexp_of_t$1(interval_118),
        bnds_115 = [0, [1, [0, _S_, [0, arg_119, 0]]], 0],
        arg_117 = caml_call2(Nonempty_list[4], sexp_of_t$2, descriptions_116),
        bnds_115$0 = [0, [1, [0, _T_, [0, arg_117, 0]]], bnds_115];
       return [1, [0, _U_, bnds_115$0]];
    }
   }
   function equal$3(a_120, b_121){
    if(a_120 === b_121) return 1;
    a:
    {
     b:
     {
      switch(a_120[0]){
        case 0:
         if(0 !== b_121[0]) return 0;
         var _eA_ = caml_call2(Core[553], a_120[1], b_121[1]);
         if(_eA_){
          var _eB_ = caml_call2(Core[384], a_120[2], b_121[2]);
          if(_eB_) return equal$0(a_120[3], b_121[3]);
          var _eC_ = _eB_;
         }
         else
          var _eC_ = _eA_;
         return _eC_;
        case 1:
         switch(b_121[0]){
           case 1:
            var
             _eD_ = b_121[1],
             _eE_ = a_120[1],
             _eF_ = function(a_126, b_127){return equal$2(a_126, b_127);},
             _eG_ = caml_call3(Nonempty_list[2], _eF_, _eE_, _eD_);
            return _eG_ ? equal$0(a_120[2], b_121[2]) : _eG_;
           case 0:
            break a;
           default: return 0;
         }
        case 2:
         switch(b_121[0]){
           case 2:
            var _eH_ = caml_call2(Core[553], a_120[1], b_121[1]);
            if(_eH_){
             var _eI_ = caml_call2(Core[384], a_120[2], b_121[2]);
             if(_eI_) return equal$0(a_120[3], b_121[3]);
             var _eJ_ = _eI_;
            }
            else
             var _eJ_ = _eH_;
            return _eJ_;
           case 0:
            break a;
           case 1:
            break b;
           default: return 0;
         }
        case 3:
         switch(b_121[0]){
           case 3:
            var _eK_ = caml_call2(Core[553], a_120[1], b_121[1]);
            if(_eK_){
             var _eL_ = caml_call2(Core[384], a_120[2], b_121[2]);
             if(_eL_) return equal$1(a_120[3], b_121[3]);
             var _eM_ = _eL_;
            }
            else
             var _eM_ = _eK_;
            return _eM_;
           case 4:
            return 0;
           case 0:
            break a;
           case 1:
            break b;
         }
         break;
        default:
         switch(b_121[0]){
           case 3:
            return 0;
           case 4:
            var
             _eN_ = b_121[1],
             _eO_ = a_120[1],
             _eP_ = function(a_134, b_135){return equal$2(a_134, b_135);},
             _eQ_ = caml_call3(Nonempty_list[2], _eP_, _eO_, _eN_);
            return _eQ_ ? equal$1(a_120[2], b_121[2]) : _eQ_;
           case 0:
            break a;
           case 1:
            break b;
         }
      }
      return 0;
     }
     return 0;
    }
    return 0;
   }
   var _V_ = 0;
   function _W_(size_173, random_174){
    var
     _ey_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$1,
         size_173,
         random_174),
     _ez_ = caml_call1(Nonempty_list[7], quickcheck_generator$2);
    return [4,
            caml_call3
             (Base_quickcheck_Generator[128], _ez_, size_173, random_174),
            _ey_];
   }
   var
    _X_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _W_)], _V_];
   function _Y_(size_171, random_172){
    var
     _ew_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$1,
         size_171,
         random_172),
     _ex_ =
       caml_call3
        (Base_quickcheck_Generator[128], Core[103], size_171, random_172);
    return [3,
            caml_call3
             (Base_quickcheck_Generator[128], Core[101], size_171, random_172),
            _ex_,
            _ew_];
   }
   var
    _Z_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _Y_)], _X_];
   function ___(size_169, random_170){
    var
     _eu_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$0,
         size_169,
         random_170),
     _ev_ =
       caml_call3
        (Base_quickcheck_Generator[128], Core[103], size_169, random_170);
    return [2,
            caml_call3
             (Base_quickcheck_Generator[128], Core[101], size_169, random_170),
            _ev_,
            _eu_];
   }
   var
    _$_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], ___)], _Z_];
   function _aa_(size_167, random_168){
    var
     _es_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$0,
         size_167,
         random_168),
     _et_ = caml_call1(Nonempty_list[7], quickcheck_generator$2);
    return [1,
            caml_call3
             (Base_quickcheck_Generator[128], _et_, size_167, random_168),
            _es_];
   }
   var
    _ab_ = [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aa_)], _$_];
   function _ac_(size_165, random_166){
    var
     _eq_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$0,
         size_165,
         random_166),
     _er_ =
       caml_call3
        (Base_quickcheck_Generator[128], Core[103], size_165, random_166);
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128], Core[101], size_165, random_166),
            _er_,
            _eq_];
   }
   var
    _ad_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _ac_)], _ab_],
    quickcheck_generator$3 = caml_call1(Base_quickcheck_Generator[60], _ad_);
   function _ae_(x_149, size_150, hash_151){
    switch(x_149[0]){
      case 0:
       var
        x_154 = x_149[3],
        x_153 = x_149[2],
        x_152 = x_149[1],
        hash_151$0 = caml_call2(Base[133], hash_151, 0),
        hash_151$1 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[111],
            x_152,
            size_150,
            hash_151$0),
        hash_151$2 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[113],
            x_153,
            size_150,
            hash_151$1),
        hash_151$3 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$0,
            x_154,
            size_150,
            hash_151$2);
       return hash_151$3;
      case 1:
       var
        x_156 = x_149[2],
        x_155 = x_149[1],
        hash_151$4 = caml_call2(Base[133], hash_151, 1),
        _eo_ = caml_call1(Nonempty_list[8], quickcheck_observer$2),
        hash_151$5 =
          caml_call4
           (Base_quickcheck_Observer[37], _eo_, x_155, size_150, hash_151$4),
        hash_151$6 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$0,
            x_156,
            size_150,
            hash_151$5);
       return hash_151$6;
      case 2:
       var
        x_159 = x_149[3],
        x_158 = x_149[2],
        x_157 = x_149[1],
        hash_151$7 = caml_call2(Base[133], hash_151, 2),
        hash_151$8 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[111],
            x_157,
            size_150,
            hash_151$7),
        hash_151$9 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[113],
            x_158,
            size_150,
            hash_151$8),
        hash_151$10 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$0,
            x_159,
            size_150,
            hash_151$9);
       return hash_151$10;
      case 3:
       var
        x_162 = x_149[3],
        x_161 = x_149[2],
        x_160 = x_149[1],
        hash_151$11 = caml_call2(Base[133], hash_151, 3),
        hash_151$12 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[111],
            x_160,
            size_150,
            hash_151$11),
        hash_151$13 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[113],
            x_161,
            size_150,
            hash_151$12),
        hash_151$14 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$1,
            x_162,
            size_150,
            hash_151$13);
       return hash_151$14;
      default:
       var
        x_164 = x_149[2],
        x_163 = x_149[1],
        hash_151$15 = caml_call2(Base[133], hash_151, 4),
        _ep_ = caml_call1(Nonempty_list[8], quickcheck_observer$2),
        hash_151$16 =
          caml_call4
           (Base_quickcheck_Observer[37], _ep_, x_163, size_150, hash_151$15),
        hash_151$17 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$1,
            x_164,
            size_150,
            hash_151$16);
       return hash_151$17;
    }
   }
   var quickcheck_observer$3 = caml_call1(Base_quickcheck_Observer[36], _ae_);
   function _af_(param){
    switch(param[0]){
      case 0:
       var
        x_138 = param[3],
        x_137 = param[2],
        x_136 = param[1],
        _dG_ = 0,
        _dH_ = function(x_138){return [0, x_136, x_137, x_138];},
        _dI_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$0, x_138),
        _dJ_ = [0, caml_call2(Base_Sequence[35], _dI_, _dH_), _dG_],
        _dK_ = function(x_137){return [0, x_136, x_137, x_138];},
        _dL_ = caml_call2(Base_quickcheck_Shrinker[37], Core[123], x_137),
        _dM_ = [0, caml_call2(Base_Sequence[35], _dL_, _dK_), _dJ_],
        _dN_ = function(x_136){return [0, x_136, x_137, x_138];},
        _dO_ = caml_call2(Base_quickcheck_Shrinker[37], Core[121], x_136),
        _dP_ = [0, caml_call2(Base_Sequence[35], _dO_, _dN_), _dM_];
       return caml_call1(Base_Sequence[70], _dP_);
      case 1:
       var
        x_140 = param[2],
        x_139 = param[1],
        _dQ_ = 0,
        _dR_ = function(x_140){return [1, x_139, x_140];},
        _dS_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$0, x_140),
        _dT_ = [0, caml_call2(Base_Sequence[35], _dS_, _dR_), _dQ_],
        _dU_ = function(x_139){return [1, x_139, x_140];},
        _dV_ = caml_call1(Nonempty_list[9], quickcheck_shrinker$2),
        _dW_ = caml_call2(Base_quickcheck_Shrinker[37], _dV_, x_139),
        _dX_ = [0, caml_call2(Base_Sequence[35], _dW_, _dU_), _dT_];
       return caml_call1(Base_Sequence[70], _dX_);
      case 2:
       var
        x_143 = param[3],
        x_142 = param[2],
        x_141 = param[1],
        _dY_ = 0,
        _dZ_ = function(x_143){return [2, x_141, x_142, x_143];},
        _d0_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$0, x_143),
        _d1_ = [0, caml_call2(Base_Sequence[35], _d0_, _dZ_), _dY_],
        _d2_ = function(x_142){return [2, x_141, x_142, x_143];},
        _d3_ = caml_call2(Base_quickcheck_Shrinker[37], Core[123], x_142),
        _d4_ = [0, caml_call2(Base_Sequence[35], _d3_, _d2_), _d1_],
        _d5_ = function(x_141){return [2, x_141, x_142, x_143];},
        _d6_ = caml_call2(Base_quickcheck_Shrinker[37], Core[121], x_141),
        _d7_ = [0, caml_call2(Base_Sequence[35], _d6_, _d5_), _d4_];
       return caml_call1(Base_Sequence[70], _d7_);
      case 3:
       var
        x_146 = param[3],
        x_145 = param[2],
        x_144 = param[1],
        _d8_ = 0,
        _d9_ = function(x_146){return [3, x_144, x_145, x_146];},
        _d__ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$1, x_146),
        _d$_ = [0, caml_call2(Base_Sequence[35], _d__, _d9_), _d8_],
        _ea_ = function(x_145){return [3, x_144, x_145, x_146];},
        _eb_ = caml_call2(Base_quickcheck_Shrinker[37], Core[123], x_145),
        _ec_ = [0, caml_call2(Base_Sequence[35], _eb_, _ea_), _d$_],
        _ed_ = function(x_144){return [3, x_144, x_145, x_146];},
        _ee_ = caml_call2(Base_quickcheck_Shrinker[37], Core[121], x_144),
        _ef_ = [0, caml_call2(Base_Sequence[35], _ee_, _ed_), _ec_];
       return caml_call1(Base_Sequence[70], _ef_);
      default:
       var
        x_148 = param[2],
        x_147 = param[1],
        _eg_ = 0,
        _eh_ = function(x_148){return [4, x_147, x_148];},
        _ei_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$1, x_148),
        _ej_ = [0, caml_call2(Base_Sequence[35], _ei_, _eh_), _eg_],
        _ek_ = function(x_147){return [4, x_147, x_148];},
        _el_ = caml_call1(Nonempty_list[9], quickcheck_shrinker$2),
        _em_ = caml_call2(Base_quickcheck_Shrinker[37], _el_, x_147),
        _en_ = [0, caml_call2(Base_Sequence[35], _em_, _ek_), _ej_];
       return caml_call1(Base_Sequence[70], _en_);
    }
   }
   var quickcheck_shrinker$3 = caml_call1(Base_quickcheck_Shrinker[36], _af_);
   function t_of_sexp$4(of_a_175, sexp_180){
    a:
    {
     if(0 === sexp_180[0]){
      var _dD_ = sexp_180[1];
      b:
      if(caml_string_notequal(_dD_, cst_No_sexp_of_provided)){
       if(caml_string_notequal(_dD_, cst_Sexp_of_provided)){
        if(! caml_string_notequal(_dD_, cst_no_sexp_of_provided)) break b;
        if(caml_string_notequal(_dD_, cst_sexp_of_provided)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_178, sexp_180);
      }
      return 0;
     }
     var _dE_ = sexp_180[1];
     if(! _dE_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_178, sexp_180);
     var _dF_ = _dE_[1];
     if(0 !== _dF_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_178, sexp_180);
     var tag_181 = _dF_[1];
     b:
     if(caml_string_notequal(tag_181, cst_No_sexp_of_provided)){
      if(caml_string_notequal(tag_181, cst_Sexp_of_provided)){
       if(! caml_string_notequal(tag_181, cst_no_sexp_of_provided)) break b;
       if(caml_string_notequal(tag_181, cst_sexp_of_provided)) break a;
      }
      var sexp_args_182 = _dE_[2];
      if(sexp_args_182 && ! sexp_args_182[2]){
       var
        arg0_183 = sexp_args_182[1],
        res0_184 = caml_call1(of_a_175, arg0_183);
       return [0, res0_184];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_178,
               tag_181,
               sexp_180);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_178, sexp_180);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_178, sexp_180);
   }
   function sexp_of_t$4(of_a_186, param){
    if(! param) return _ah_;
    var arg0_187 = param[1], res0_188 = caml_call1(of_a_186, arg0_187);
    return [1, [0, _ag_, [0, res0_188, 0]]];
   }
   function equal$4(cmp_a, a_190, b_191){
    if(a_190 === b_191) return 1;
    if(! a_190) return b_191 ? 0 : 1;
    if(! b_191) return 0;
    var b_193 = b_191[1], a_192 = a_190[1];
    return caml_call2(cmp_a, a_192, b_193);
   }
   function quickcheck_generator$4(generator_201){
    var _dy_ = 0;
    function _dz_(size_204, random_205){
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_201,
               size_204,
               random_205)];
    }
    var
     _dA_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _dz_)], _dy_];
    function _dB_(size_202, random_203){return 0;}
    var
     _dC_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _dB_)], _dA_];
    return caml_call1(Base_quickcheck_Generator[60], _dC_);
   }
   function t_of_sexp$5(x_207){
    var _dv_ = Core_Sexp[94];
    function _dw_(_dx_){return t_of_sexp$4(_dv_, _dx_);}
    return caml_call2(Core_Or_error[16], _dw_, x_207);
   }
   function sexp_of_t$5(x_208){
    var _ds_ = Core_Sexp[93];
    function _dt_(_du_){return sexp_of_t$4(_ds_, _du_);}
    return caml_call2(Core_Or_error[17], _dt_, x_208);
   }
   function equal$5(a_209, b_210){
    function _dr_(a_211, b_212){
     return equal$4
             (function(a_213, b_214){
               return caml_call2(Core_Sexp[39], a_213, b_214);
              },
              a_211,
              b_212);
    }
    return caml_call3(Core_Or_error[12], _dr_, a_209, b_210);
   }
   var
    _ai_ = [1, caml_call1(Core_Error[14], cst_failure)],
    _aj_ = [0, caml_call1(Core_Quickcheck[1][9], _ai_), 0];
   function _ak_(x){return [0, x];}
   var
    _al_ = quickcheck_generator$4(Core_Sexp[35]),
    _am_ = [0, caml_call2(Core_Quickcheck[1][15], _al_, _ak_), _aj_],
    quickcheck_generator$5 = caml_call1(Core_Quickcheck[1][36], _am_),
    quickcheck_shrinker$4 = caml_call1(Core_Quickcheck[3][3], 0),
    quickcheck_observer$4 = caml_call1(Core_Quickcheck[2][17], 0);
   function t_of_sexp$6(sexp_219){
    a:
    {
     if(0 === sexp_219[0]){
      var _dh_ = sexp_219[1];
      b:
      if(caml_string_notequal(_dh_, cst_Aborted)){
       c:
       if(caml_string_notequal(_dh_, cst_Finished)){
        if(caml_string_notequal(_dh_, cst_Running)){
         if(! caml_string_notequal(_dh_, cst_aborted$0)) break b;
         if(! caml_string_notequal(_dh_, cst_finished$0)) break c;
         if(caml_string_notequal(_dh_, cst_running)) break a;
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_217, sexp_219);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_217, sexp_219);
     }
     var _di_ = sexp_219[1];
     if(! _di_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_217, sexp_219);
     var _dj_ = _di_[1];
     if(0 !== _dj_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_217, sexp_219);
     var _dk_ = _dj_[1];
     b:
     if(caml_string_notequal(_dk_, cst_Aborted)){
      c:
      if(caml_string_notequal(_dk_, cst_Finished)){
       if(caml_string_notequal(_dk_, cst_Running)){
        if(! caml_string_notequal(_dk_, cst_aborted$0)) break b;
        if(! caml_string_notequal(_dk_, cst_finished$0)) break c;
        if(caml_string_notequal(_dk_, cst_running)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_217, sexp_219);
      }
      var
       sexps_220 = _di_[2],
       _dl_ =
         function(param){
          var response = param[2][1], duration = param[1];
          return [0, duration, response];
         },
       _dm_ = 0,
       _dn_ =
         function(param){
          return caml_string_notequal(param, cst_duration$3)
                  ? caml_string_notequal(param, cst_response$1) ? -1 : 1
                  : 0;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_217,
               sexp_219,
               [0,
                cst_duration,
                1,
                Core_Time_ns[1][9],
                [0, cst_response, 1, t_of_sexp$5, 0]],
               _dn_,
               _dm_,
               _dl_,
               sexps_220);
     }
     var
      sexps_222 = _di_[2],
      _do_ = function(param){var duration = param[1]; return [1, duration];},
      _dp_ = 0,
      _dq_ =
        function(param){
         return caml_string_notequal(param, cst_duration$3) ? -1 : 0;
        };
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_217,
              sexp_219,
              [0, cst_duration$0, 1, Core_Time_ns[1][9], 0],
              _dq_,
              _dp_,
              _do_,
              sexps_222);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_217, sexp_219);
   }
   function sexp_of_t$6(param){
    if(typeof param === "number") return _an_;
    if(0 === param[0]){
     var
      response_226 = param[2],
      duration_224 = param[1],
      arg_227 = sexp_of_t$5(response_226),
      bnds_223 = [0, [1, [0, _ao_, [0, arg_227, 0]]], 0],
      arg_225 = caml_call1(Core_Time_ns[1][10], duration_224),
      bnds_223$0 = [0, [1, [0, _ap_, [0, arg_225, 0]]], bnds_223];
     return [1, [0, _aq_, bnds_223$0]];
    }
    var
     duration_229 = param[1],
     arg_230 = caml_call1(Core_Time_ns[1][10], duration_229),
     bnds_228 = [0, [1, [0, _ar_, [0, arg_230, 0]]], 0];
    return [1, [0, _as_, bnds_228]];
   }
   function equal$6(a_231, b_232){
    if(a_231 === b_232) return 1;
    if(typeof a_231 === "number") return typeof b_232 === "number" ? 1 : 0;
    if(0 === a_231[0]){
     if(typeof b_232 !== "number"){
      if(0 !== b_232[0]) return 0;
      var _dg_ = caml_call2(Core_Time_ns[1][21], a_231[1], b_232[1]);
      return _dg_ ? equal$5(a_231[2], b_232[2]) : _dg_;
     }
    }
    else if(typeof b_232 !== "number")
     return 0 === b_232[0]
             ? 0
             : caml_call2(Core_Time_ns[1][21], a_231[1], b_232[1]);
    return 0;
   }
   var _at_ = 0;
   function _au_(size_250, random_251){
    return [1,
            caml_call3
             (Base_quickcheck_Generator[128],
              Core_Time_ns[1][61],
              size_250,
              random_251)];
   }
   var
    _av_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _au_)], _at_];
   function _aw_(size_248, random_249){
    var
     _df_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$5,
         size_248,
         random_249);
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128],
              Core_Time_ns[1][61],
              size_248,
              random_249),
            _df_];
   }
   var
    _ax_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aw_)], _av_];
   function _ay_(size_246, random_247){return 0;}
   var
    _az_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _ay_)], _ax_];
   caml_call1(Base_quickcheck_Generator[60], _az_);
   function _aA_(x_240, size_241, hash_242){
    if(typeof x_240 === "number"){
     var hash_242$0 = caml_call2(Base[133], hash_242, 0);
     return hash_242$0;
    }
    if(0 === x_240[0]){
     var
      x_244 = x_240[2],
      x_243 = x_240[1],
      hash_242$1 = caml_call2(Base[133], hash_242, 1),
      hash_242$2 =
        caml_call4
         (Base_quickcheck_Observer[37],
          Core_Time_ns[1][62],
          x_243,
          size_241,
          hash_242$1),
      hash_242$3 =
        caml_call4
         (Base_quickcheck_Observer[37],
          quickcheck_observer$4,
          x_244,
          size_241,
          hash_242$2);
     return hash_242$3;
    }
    var
     x_245 = x_240[1],
     hash_242$4 = caml_call2(Base[133], hash_242, 2),
     hash_242$5 =
       caml_call4
        (Base_quickcheck_Observer[37],
         Core_Time_ns[1][62],
         x_245,
         size_241,
         hash_242$4);
    return hash_242$5;
   }
   caml_call1(Base_quickcheck_Observer[36], _aA_);
   function _aB_(param){
    if(typeof param === "number") return caml_call1(Base_Sequence[70], 0);
    if(0 === param[0]){
     var
      x_238 = param[2],
      x_237 = param[1],
      _c6_ = 0,
      _c7_ = function(x_238){return [0, x_237, x_238];},
      _c8_ =
        caml_call2(Base_quickcheck_Shrinker[37], quickcheck_shrinker$4, x_238),
      _c9_ = [0, caml_call2(Base_Sequence[35], _c8_, _c7_), _c6_],
      _c__ = function(x_237){return [0, x_237, x_238];},
      _c$_ =
        caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_237),
      _da_ = [0, caml_call2(Base_Sequence[35], _c$_, _c__), _c9_];
     return caml_call1(Base_Sequence[70], _da_);
    }
    var x_239 = param[1], _db_ = 0;
    function _dc_(x_239){return [1, x_239];}
    var
     _dd_ =
       caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_239),
     _de_ = [0, caml_call2(Base_Sequence[35], _dd_, _dc_), _db_];
    return caml_call1(Base_Sequence[70], _de_);
   }
   caml_call1(Base_quickcheck_Shrinker[36], _aB_);
   var
    t_of_sexp$7 = Core_Time_ns[25][11],
    sexp_of_t$7 = Core_Time_ns[25][12],
    quickcheck_generator$6 = Core_Time_ns[27],
    quickcheck_shrinker$5 = Core_Time_ns[29],
    quickcheck_observer$5 = Core_Time_ns[28],
    default_259 = 0,
    default_275 = 0;
   function sexp_of_t$8(param){
    switch(param[0]){
      case 0:
       var
        path_279 = param[5],
        query_276 = param[4],
        start_time_272 = param[3],
        rpc_kind_270 = param[2],
        id_268 = param[1],
        arg_280 = caml_call1(Core[558], path_279),
        bnds_267 = [0, [1, [0, _aC_, [0, arg_280, 0]]], 0];
       if
        (equal$4
          (function(a_327, b_328){
            return caml_call2(Core_Sexp[39], a_327, b_328);
           },
           default_275,
           query_276))
        var bnds_267$0 = bnds_267;
       else
        var
         arg_278 = sexp_of_t$4(Core_Sexp[93], query_276),
         bnd_277 = [1, [0, _aH_, [0, arg_278, 0]]],
         bnds_267$0 = [0, bnd_277, bnds_267];
       var
        arg_273 = caml_call1(sexp_of_t$7, start_time_272),
        bnds_267$1 = [0, [1, [0, _aD_, [0, arg_273, 0]]], bnds_267$0],
        arg_271 = sexp_of_t$3(rpc_kind_270),
        bnds_267$2 = [0, [1, [0, _aE_, [0, arg_271, 0]]], bnds_267$1],
        arg_269 = caml_call1(sexp_of_t, id_268),
        bnds_267$3 = [0, [1, [0, _aF_, [0, arg_269, 0]]], bnds_267$2];
       return [1, [0, _aG_, bnds_267$3]];
      case 1:
       var
        response_288 = param[3],
        duration_284 = param[2],
        id_282 = param[1],
        bnds_281 = 0;
       if(equal$5(default_287, response_288))
        var bnds_281$0 = bnds_281;
       else
        var
         arg_290 = sexp_of_t$5(response_288),
         bnd_289 = [1, [0, _aL_, [0, arg_290, 0]]],
         bnds_281$0 = [0, bnd_289, bnds_281];
       var
        arg_285 = caml_call1(Core_Time_ns[1][10], duration_284),
        bnds_281$1 = [0, [1, [0, _aI_, [0, arg_285, 0]]], bnds_281$0],
        arg_283 = caml_call1(sexp_of_t, id_282),
        bnds_281$2 = [0, [1, [0, _aJ_, [0, arg_283, 0]]], bnds_281$1];
       return [1, [0, _aK_, bnds_281$2]];
      default:
       var
        duration_294 = param[2],
        id_292 = param[1],
        arg_295 = caml_call1(Core_Time_ns[1][10], duration_294),
        bnds_291 = [0, [1, [0, _aM_, [0, arg_295, 0]]], 0],
        arg_293 = caml_call1(sexp_of_t, id_292),
        bnds_291$0 = [0, [1, [0, _aN_, [0, arg_293, 0]]], bnds_291];
       return [1, [0, _aO_, bnds_291$0]];
    }
   }
   var _aP_ = 0;
   function _aQ_(size_323, random_324){
    var
     _c5_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         Core_Time_ns[1][61],
         size_323,
         random_324);
    return [2,
            caml_call3
             (Base_quickcheck_Generator[128],
              quickcheck_generator,
              size_323,
              random_324),
            _c5_];
   }
   var
    _aR_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aQ_)], _aP_];
   function _aS_(size_321, random_322){
    var
     _c3_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$5,
         size_321,
         random_322),
     _c4_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         Core_Time_ns[1][61],
         size_321,
         random_322);
    return [1,
            caml_call3
             (Base_quickcheck_Generator[128],
              quickcheck_generator,
              size_321,
              random_322),
            _c4_,
            _c3_];
   }
   var
    _aT_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aS_)], _aR_];
   function _aU_(size_319, random_320){
    var
     _cY_ =
       caml_call3
        (Base_quickcheck_Generator[128], Core[101], size_319, random_320),
     _cZ_ = quickcheck_generator$4(Core_Sexp[35]),
     _c0_ =
       caml_call3(Base_quickcheck_Generator[128], _cZ_, size_319, random_320),
     _c1_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$6,
         size_319,
         random_320),
     _c2_ =
       caml_call3
        (Base_quickcheck_Generator[128],
         quickcheck_generator$3,
         size_319,
         random_320);
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128],
              quickcheck_generator,
              size_319,
              random_320),
            _c2_,
            _c1_,
            _c0_,
            _cY_];
   }
   var
    _aV_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _aU_)], _aT_],
    quickcheck_generator$7 = caml_call1(Base_quickcheck_Generator[60], _aV_);
   function _aW_(x_306, size_307, hash_308){
    switch(x_306[0]){
      case 0:
       var
        x_313 = x_306[5],
        x_312 = x_306[4],
        x_311 = x_306[3],
        x_310 = x_306[2],
        x_309 = x_306[1],
        hash_308$0 = caml_call2(Base[133], hash_308, 0),
        hash_308$1 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer,
            x_309,
            size_307,
            hash_308$0),
        hash_308$2 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$3,
            x_310,
            size_307,
            hash_308$1),
        hash_308$3 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$5,
            x_311,
            size_307,
            hash_308$2),
        observer_196 = Core_Sexp[36],
        _cW_ =
          function(x_197, size_198, hash_199){
           if(x_197){
            var
             x_200 = x_197[1],
             hash_199$0 = caml_call2(Base[133], hash_199, 1),
             hash_199$1 =
               caml_call4
                (Base_quickcheck_Observer[37],
                 observer_196,
                 x_200,
                 size_198,
                 hash_199$0);
            return hash_199$1;
           }
           var hash_199$2 = caml_call2(Base[133], hash_199, 0);
           return hash_199$2;
          },
        _cX_ = caml_call1(Base_quickcheck_Observer[36], _cW_),
        hash_308$4 =
          caml_call4
           (Base_quickcheck_Observer[37], _cX_, x_312, size_307, hash_308$3),
        hash_308$5 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core[111],
            x_313,
            size_307,
            hash_308$4);
       return hash_308$5;
      case 1:
       var
        x_316 = x_306[3],
        x_315 = x_306[2],
        x_314 = x_306[1],
        hash_308$6 = caml_call2(Base[133], hash_308, 1),
        hash_308$7 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer,
            x_314,
            size_307,
            hash_308$6),
        hash_308$8 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core_Time_ns[1][62],
            x_315,
            size_307,
            hash_308$7),
        hash_308$9 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer$4,
            x_316,
            size_307,
            hash_308$8);
       return hash_308$9;
      default:
       var
        x_318 = x_306[2],
        x_317 = x_306[1],
        hash_308$10 = caml_call2(Base[133], hash_308, 2),
        hash_308$11 =
          caml_call4
           (Base_quickcheck_Observer[37],
            quickcheck_observer,
            x_317,
            size_307,
            hash_308$10),
        hash_308$12 =
          caml_call4
           (Base_quickcheck_Observer[37],
            Core_Time_ns[1][62],
            x_318,
            size_307,
            hash_308$11);
       return hash_308$12;
    }
   }
   var quickcheck_observer$6 = caml_call1(Base_quickcheck_Observer[36], _aW_);
   function _aX_(param){
    switch(param[0]){
      case 0:
       var
        x_300 = param[5],
        x_299 = param[4],
        x_298 = param[3],
        x_297 = param[2],
        x_296 = param[1],
        _cl_ = 0,
        _cm_ = function(x_300){return [0, x_296, x_297, x_298, x_299, x_300];},
        _cn_ = caml_call2(Base_quickcheck_Shrinker[37], Core[121], x_300),
        _co_ = [0, caml_call2(Base_Sequence[35], _cn_, _cm_), _cl_],
        _cp_ = function(x_299){return [0, x_296, x_297, x_298, x_299, x_300];},
        shrinker_194 = Core_Sexp[37],
        _cj_ =
          function(param){
           if(! param) return caml_call1(Base_Sequence[70], 0);
           var x_195 = param[1], _cS_ = 0;
           function _cT_(x_195){return [0, x_195];}
           var
            _cU_ =
              caml_call2(Base_quickcheck_Shrinker[37], shrinker_194, x_195),
            _cV_ = [0, caml_call2(Base_Sequence[35], _cU_, _cT_), _cS_];
           return caml_call1(Base_Sequence[70], _cV_);
          },
        _ck_ = caml_call1(Base_quickcheck_Shrinker[36], _cj_),
        _cq_ = caml_call2(Base_quickcheck_Shrinker[37], _ck_, x_299),
        _cr_ = [0, caml_call2(Base_Sequence[35], _cq_, _cp_), _co_],
        _cs_ = function(x_298){return [0, x_296, x_297, x_298, x_299, x_300];},
        _ct_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$5, x_298),
        _cu_ = [0, caml_call2(Base_Sequence[35], _ct_, _cs_), _cr_],
        _cv_ = function(x_297){return [0, x_296, x_297, x_298, x_299, x_300];},
        _cw_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$3, x_297),
        _cx_ = [0, caml_call2(Base_Sequence[35], _cw_, _cv_), _cu_],
        _cy_ = function(x_296){return [0, x_296, x_297, x_298, x_299, x_300];},
        _cz_ =
          caml_call2(Base_quickcheck_Shrinker[37], quickcheck_shrinker, x_296),
        _cA_ = [0, caml_call2(Base_Sequence[35], _cz_, _cy_), _cx_];
       return caml_call1(Base_Sequence[70], _cA_);
      case 1:
       var
        x_303 = param[3],
        x_302 = param[2],
        x_301 = param[1],
        _cB_ = 0,
        _cC_ = function(x_303){return [1, x_301, x_302, x_303];},
        _cD_ =
          caml_call2
           (Base_quickcheck_Shrinker[37], quickcheck_shrinker$4, x_303),
        _cE_ = [0, caml_call2(Base_Sequence[35], _cD_, _cC_), _cB_],
        _cF_ = function(x_302){return [1, x_301, x_302, x_303];},
        _cG_ =
          caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_302),
        _cH_ = [0, caml_call2(Base_Sequence[35], _cG_, _cF_), _cE_],
        _cI_ = function(x_301){return [1, x_301, x_302, x_303];},
        _cJ_ =
          caml_call2(Base_quickcheck_Shrinker[37], quickcheck_shrinker, x_301),
        _cK_ = [0, caml_call2(Base_Sequence[35], _cJ_, _cI_), _cH_];
       return caml_call1(Base_Sequence[70], _cK_);
      default:
       var
        x_305 = param[2],
        x_304 = param[1],
        _cL_ = 0,
        _cM_ = function(x_305){return [2, x_304, x_305];},
        _cN_ =
          caml_call2(Base_quickcheck_Shrinker[37], Core_Time_ns[1][63], x_305),
        _cO_ = [0, caml_call2(Base_Sequence[35], _cN_, _cM_), _cL_],
        _cP_ = function(x_304){return [2, x_304, x_305];},
        _cQ_ =
          caml_call2(Base_quickcheck_Shrinker[37], quickcheck_shrinker, x_304),
        _cR_ = [0, caml_call2(Base_Sequence[35], _cQ_, _cP_), _cO_];
       return caml_call1(Base_Sequence[70], _cR_);
    }
   }
   var quickcheck_shrinker$6 = caml_call1(Base_quickcheck_Shrinker[36], _aX_);
   function t_of_sexp$8(sexp_335){
    a:
    {
     if(0 === sexp_335[0]){
      var _cb_ = sexp_335[1];
      if
       (caml_string_notequal(_cb_, cst_V1)
        && caml_string_notequal(_cb_, cst_v1))
       break a;
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_333, sexp_335);
     }
     var _cc_ = sexp_335[1];
     if(! _cc_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_333, sexp_335);
     var _cd_ = _cc_[1];
     if(0 !== _cd_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_333, sexp_335);
     var tag_336 = _cd_[1];
     if
      (caml_string_notequal(tag_336, cst_V1)
       && caml_string_notequal(tag_336, cst_v1))
      break a;
     var sexp_args_337 = _cc_[2];
     if(sexp_args_337 && ! sexp_args_337[2]){
      var arg0_338 = sexp_args_337[1];
      b:
      {
       c:
       {
        if(0 === arg0_338[0]){
         var _bU_ = arg0_338[1];
         d:
         if(caml_string_notequal(_bU_, cst_Aborted)){
          e:
          if(caml_string_notequal(_bU_, cst_Finished)){
           if(caml_string_notequal(_bU_, cst_Started)){
            if(! caml_string_notequal(_bU_, cst_aborted$0)) break d;
            if(! caml_string_notequal(_bU_, cst_finished$0)) break e;
            if(caml_string_notequal(_bU_, cst_started)) break c;
           }
           var
            res0_339 =
              caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_257, arg0_338);
           break b;
          }
          var
           res0_339 =
             caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_257, arg0_338);
          break b;
         }
         var
          res0_339 =
            caml_call2
             (Sexplib0_Sexp_conv_error[9], error_source_257, arg0_338);
         break b;
        }
        var _bV_ = arg0_338[1];
        if(! _bV_){
         var
          res0_339 =
            caml_call2
             (Sexplib0_Sexp_conv_error[11], error_source_257, arg0_338);
         break b;
        }
        var _bW_ = _bV_[1];
        if(0 !== _bW_[0]){
         var
          res0_339 =
            caml_call2
             (Sexplib0_Sexp_conv_error[10], error_source_257, arg0_338);
         break b;
        }
        var _bX_ = _bW_[1];
        d:
        if(caml_string_notequal(_bX_, cst_Aborted)){
         e:
         if(caml_string_notequal(_bX_, cst_Finished)){
          if(caml_string_notequal(_bX_, cst_Started)){
           if(! caml_string_notequal(_bX_, cst_aborted$0)) break d;
           if(! caml_string_notequal(_bX_, cst_finished$0)) break e;
           if(caml_string_notequal(_bX_, cst_started)) break c;
          }
          var
           sexps_261 = _bV_[2],
           _bY_ =
             function(param){
              var
               _cg_ = param[2],
               _ch_ = _cg_[2],
               _ci_ = _ch_[2],
               path = _ci_[2][1],
               query = _ci_[1],
               start_time = _ch_[1],
               rpc_kind = _cg_[1],
               id = param[1];
              return [0, id, rpc_kind, start_time, query, path];
             },
           _bZ_ = 1,
           _b0_ =
             function(param){
              return caml_string_notequal(param, cst_id$2)
                      ? caml_string_notequal
                         (param, cst_path$1)
                        ? caml_string_notequal
                           (param, cst_query$1)
                          ? caml_string_notequal
                             (param, cst_rpc_kind$1)
                            ? caml_string_notequal(param, cst_start_time$1) ? -1 : 2
                            : 1
                          : 3
                        : 4
                      : 0;
             },
           _b1_ = [0, cst_path, 1, Core[559], 0],
           _b2_ = Core_Sexp[94],
           _b3_ = function(_cf_){return t_of_sexp$4(_b2_, _cf_);},
           _b4_ =
             [0,
              cst_id,
              1,
              t_of_sexp,
              [0,
               cst_rpc_kind,
               1,
               t_of_sexp$3,
               [0,
                cst_start_time,
                1,
                t_of_sexp$7,
                [0,
                 cst_query,
                 [0, function(param){return default_259;}],
                 _b3_,
                 _b1_]]]],
           res0_339 =
             caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_257,
               arg0_338,
               _b4_,
               _b0_,
               _bZ_,
               _bY_,
               sexps_261);
          break b;
         }
         var
          sexps_264 = _bV_[2],
          _b5_ =
            function(param){
             var
              _ce_ = param[2],
              response = _ce_[2][1],
              duration = _ce_[1],
              id = param[1];
             return [1, id, duration, response];
            },
          _b6_ = 1,
          _b7_ =
            function(param){
             return caml_string_notequal(param, cst_duration$3)
                     ? caml_string_notequal
                        (param, cst_id$2)
                       ? caml_string_notequal(param, cst_response$1) ? -1 : 2
                       : 0
                     : 1;
            },
          _b8_ = 0,
          _b9_ =
            [0,
             cst_response$0,
             [0, function(param){return default_262;}],
             t_of_sexp$5,
             _b8_],
          res0_339 =
            caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_257,
              arg0_338,
              [0,
               cst_id$0,
               1,
               t_of_sexp,
               [0, cst_duration$1, 1, Core_Time_ns[1][9], _b9_]],
              _b7_,
              _b6_,
              _b5_,
              sexps_264);
         break b;
        }
        var
         sexps_266 = _bV_[2],
         _b__ =
           function(param){
            var duration = param[2][1], id = param[1];
            return [2, id, duration];
           },
         _b$_ = 1,
         _ca_ =
           function(param){
            return caml_string_notequal(param, cst_duration$3)
                    ? caml_string_notequal(param, cst_id$2) ? -1 : 0
                    : 1;
           },
         res0_339 =
           caml_call7
            (Sexplib0_Sexp_conv_record[4],
             error_source_257,
             arg0_338,
             [0,
              cst_id$1,
              1,
              t_of_sexp,
              [0, cst_duration$2, 1, Core_Time_ns[1][9], 0]],
             _ca_,
             _b$_,
             _b__,
             sexps_266);
        break b;
       }
       var
        res0_339 =
          caml_call2(Sexplib0_Sexp_conv_error[12], error_source_257, arg0_338);
      }
      return [0, res0_339];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_333,
              tag_336,
              sexp_335);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_333, sexp_335);
   }
   function sexp_of_t$9(param){
    var arg0_340 = param[1], res0_341 = sexp_of_t$8(arg0_340);
    return [1, [0, _aY_, [0, res0_341, 0]]];
   }
   var _aZ_ = 0;
   function _a0_(size_347, random_348){
    return [0,
            caml_call3
             (Base_quickcheck_Generator[128],
              quickcheck_generator$7,
              size_347,
              random_348)];
   }
   var
    _a1_ =
      [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _a0_)], _aZ_],
    quickcheck_generator$8 = caml_call1(Base_quickcheck_Generator[60], _a1_);
   function _a2_(x_343, size_344, hash_345){
    var
     x_346 = x_343[1],
     hash_345$0 = caml_call2(Base[133], hash_345, 0),
     hash_345$1 =
       caml_call4
        (Base_quickcheck_Observer[37],
         quickcheck_observer$6,
         x_346,
         size_344,
         hash_345$0);
    return hash_345$1;
   }
   var quickcheck_observer$7 = caml_call1(Base_quickcheck_Observer[36], _a2_);
   function _a3_(param){
    var x_342 = param[1], _bQ_ = 0;
    function _bR_(x_342){return [0, x_342];}
    var
     _bS_ =
       caml_call2(Base_quickcheck_Shrinker[37], quickcheck_shrinker$6, x_342),
     _bT_ = [0, caml_call2(Base_Sequence[35], _bS_, _bR_), _bQ_];
    return caml_call1(Base_Sequence[70], _bT_);
   }
   var quickcheck_shrinker$7 = caml_call1(Base_quickcheck_Shrinker[36], _a3_);
   function to_latest(param){var v1 = param[1]; return v1;}
   function of_latest(v1){return [0, v1];}
   var
    Stable =
      [0,
       t_of_sexp$8,
       sexp_of_t$9,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       to_latest,
       of_latest];
   function t_of_sexp$9(x_351){
    function _bG_(param){
     var
      _bN_ = param[2],
      _bO_ = _bN_[2],
      _bP_ = _bO_[2],
      path = _bP_[2][1],
      status = _bP_[1],
      query = _bO_[1],
      start_time = _bN_[1],
      rpc_kind = param[1];
     return [0, rpc_kind, start_time, query, status, path];
    }
    var _bH_ = 0;
    function _bI_(param){
     return caml_string_notequal(param, cst_path$1)
             ? caml_string_notequal
                (param, cst_query$1)
               ? caml_string_notequal
                  (param, cst_rpc_kind$1)
                 ? caml_string_notequal
                    (param, cst_start_time$1)
                   ? caml_string_notequal(param, cst_status$0) ? -1 : 3
                   : 1
                 : 0
               : 2
             : 4;
    }
    var
     _bJ_ = [0, cst_status, 1, t_of_sexp$6, [0, cst_path$0, 1, Core[559], 0]],
     _bK_ = Core_Sexp[94],
     _bL_ =
       [0,
        cst_query$0,
        1,
        function(_bM_){return t_of_sexp$4(_bK_, _bM_);},
        _bJ_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_350,
             [0,
              cst_rpc_kind$0,
              1,
              t_of_sexp$3,
              [0, cst_start_time$0, 1, Core_Time_ns[25][11], _bL_]],
             _bI_,
             _bH_,
             _bG_,
             x_351);
   }
   function sexp_of_t$10(param){
    var
     path_361 = param[5],
     status_359 = param[4],
     query_357 = param[3],
     start_time_355 = param[2],
     rpc_kind_353 = param[1],
     arg_362 = caml_call1(Core[558], path_361),
     bnds_352 = [0, [1, [0, _a4_, [0, arg_362, 0]]], 0],
     arg_360 = sexp_of_t$6(status_359),
     bnds_352$0 = [0, [1, [0, _a5_, [0, arg_360, 0]]], bnds_352],
     arg_358 = sexp_of_t$4(Core_Sexp[93], query_357),
     bnds_352$1 = [0, [1, [0, _a6_, [0, arg_358, 0]]], bnds_352$0],
     arg_356 = caml_call1(Core_Time_ns[25][12], start_time_355),
     bnds_352$2 = [0, [1, [0, _a7_, [0, arg_356, 0]]], bnds_352$1],
     arg_354 = sexp_of_t$3(rpc_kind_353),
     bnds_352$3 = [0, [1, [0, _a8_, [0, arg_354, 0]]], bnds_352$2];
    return [1, bnds_352$3];
   }
   function t_of_sexp$10(x_368){
    return caml_call2(Map[44], t_of_sexp$9, x_368);
   }
   function sexp_of_t$11(x_369){
    return caml_call2(Map[45], sexp_of_t$10, x_369);
   }
   function equal$7(a_370, b_371){
    function _by_(a_372, b_373){
     if(a_372 === b_373) return 1;
     var _bz_ = equal$3(a_372[1], b_373[1]);
     if(_bz_){
      var _bA_ = caml_call2(Core_Time_ns[25][20], a_372[2], b_373[2]);
      if(_bA_){
       var
        _bB_ = b_373[3],
        _bC_ = a_372[3],
        _bD_ =
          equal$4
           (function(a_365, b_366){
             return caml_call2(Core_Sexp[39], a_365, b_366);
            },
            _bC_,
            _bB_);
       if(_bD_){
        var _bE_ = equal$6(a_372[4], b_373[4]);
        if(_bE_) return caml_call2(Core[553], a_372[5], b_373[5]);
        var _bF_ = _bE_;
       }
       else
        var _bF_ = _bD_;
      }
      else
       var _bF_ = _bA_;
     }
     else
      var _bF_ = _bz_;
     return _bF_;
    }
    return caml_call3(Map[4], _by_, a_370, b_371);
   }
   var empty = Map[5];
   function assert_is_running
   (rpc_state, rpc_id, event_kind, on_is_running, original){
    function on_failure(adjective){
     var
      _br_ = [0, caml_call1(Ppx_string_runtime[1][2], cst), 0],
      _bs_ = caml_call1(to_string, rpc_id),
      _bt_ = [0, caml_call1(Ppx_string_runtime[1][3], _bs_), _br_],
      _bu_ =
        [0,
         adjective,
         [0,
          caml_call1(Ppx_string_runtime[1][2], cst_event_Ignoring_new_event_i),
          _bt_]],
      _bv_ =
        [0,
         event_kind,
         [0,
          caml_call1(Ppx_string_runtime[1][2], cst_event_for_already),
          _bu_]],
      _bw_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_Saw), _bv_],
      _bx_ = caml_call1(Ppx_string_runtime[1][4], _bw_);
     return caml_call1(Core[32], _bx_);
    }
    var _bq_ = rpc_state[4];
    return typeof _bq_ === "number"
            ? caml_call1(on_is_running, 0)
            : 0
              === _bq_[0]
              ? (on_failure(cst_finished), original)
              : (on_failure(cst_aborted), original);
   }
   function apply_event(state, event){
    switch(event[0]){
      case 0:
       var
        path = event[5],
        query = event[4],
        start_time = event[3],
        rpc_kind = event[2],
        id = event[1],
        rpc_state = [0, rpc_kind, start_time, query, 0, path],
        match = caml_call3(Core_Map[36], state, id, rpc_state);
       if(typeof match === "number"){
        var
         _bg_ = [0, [1, [0, _a9_, [0, sexp_of_t$10(rpc_state), 0]]], 0],
         _bh_ = [0, [1, [0, _a__, [0, caml_call1(sexp_of_t, id), 0]]], _bg_],
         _bi_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Saw_started_message_with_d),
             _bh_]];
        caml_call2(Core[256], 0, _bi_);
        return state;
       }
       var state$0 = match[2];
       return state$0;
      case 1:
       var
        response = event[3],
        duration = event[2],
        id$0 = event[1],
        match$0 = caml_call2(Core_Map[44], state, id$0);
       if(match$0){
        var rpc_state$0 = match$0[1];
        return assert_is_running
                (rpc_state$0,
                 id$0,
                 cst_finish,
                 function(param){
                  return caml_call3
                          (Core_Map[38],
                           state,
                           id$0,
                           [0,
                            rpc_state$0[1],
                            rpc_state$0[2],
                            rpc_state$0[3],
                            [0, duration, response],
                            rpc_state$0[5]]);
                 },
                 state);
       }
       var
        _bj_ = [0, [1, [0, _a$_, [0, sexp_of_t$5(response), 0]]], 0],
        _bk_ =
          [0,
           [1, [0, _ba_, [0, caml_call1(Core_Time_ns[1][10], duration), 0]]],
           _bj_],
        _bl_ = [0, [1, [0, _bb_, [0, caml_call1(sexp_of_t, id$0), 0]]], _bk_],
        _bm_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_Saw_finished_message_for_u),
            _bl_]];
       caml_call2(Core[256], 0, _bm_);
       return state;
      default:
       var
        duration$0 = event[2],
        id$1 = event[1],
        match$1 = caml_call2(Core_Map[44], state, id$1);
       if(match$1){
        var rpc_state$1 = match$1[1];
        return assert_is_running
                (rpc_state$1,
                 id$1,
                 cst_abort,
                 function(param){
                  return caml_call3
                          (Core_Map[38],
                           state,
                           id$1,
                           [0,
                            rpc_state$1[1],
                            rpc_state$1[2],
                            rpc_state$1[3],
                            [1, duration$0],
                            rpc_state$1[5]]);
                 },
                 state);
       }
       var
        _bn_ =
          [0,
           [1, [0, _bc_, [0, caml_call1(Core_Time_ns[1][10], duration$0), 0]]],
           0],
        _bo_ = [0, [1, [0, _bd_, [0, caml_call1(sexp_of_t, id$1), 0]]], _bn_],
        _bp_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_Saw_abort_message_for_unkn),
            _bo_]];
       caml_call2(Core[256], 0, _bp_);
       return state;
    }
   }
   var of_int = Core_Int63[72];
   function conceal(_bf_){return _bf_;}
   function reveal(_be_){return _be_;}
   var reset_ids_for_testing = For_testing[1];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_introspection_proto);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_introspection_proto);
   var
    Bonsai_introspection_protocol =
      [0,
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        t_of_sexp,
        sexp_of_t,
        typerep_of_t,
        typename_of_t,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        comparator,
        Map,
        Set,
        hash_fold_t,
        hash,
        hashable,
        Table,
        Hash_set,
        Hash_queue,
        of_int_exn,
        to_int_exn,
        of_string,
        to_string,
        create,
        For_testing],
       [0,
        [0, t_of_sexp$0, sexp_of_t$0, equal$0],
        [0, t_of_sexp$1, sexp_of_t$1, equal$1],
        t_of_sexp$3,
        sexp_of_t$3,
        equal$3],
       [0, t_of_sexp$4, sexp_of_t$4, equal$4],
       [0, t_of_sexp$6, sexp_of_t$6, equal$6],
       [0, [0], Stable],
       [0, t_of_sexp$9, sexp_of_t$10],
       [0, t_of_sexp$10, sexp_of_t$11, equal$7, empty, apply_event],
       [0,
        [0, of_int, to_string],
        [0, [0, sexp_of_t$8], conceal, reveal],
        reset_ids_for_testing]];
   runtime.caml_register_global
    (281, Bonsai_introspection_protocol, cst_Bonsai_introspection_proto$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
