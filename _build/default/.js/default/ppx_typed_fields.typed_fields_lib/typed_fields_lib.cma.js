// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Typed_fields_lib__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Typed_fields_lib = [0],
    Typed_fields_lib$0 = [0, Typed_fields_lib];
   runtime.caml_register_global(0, Typed_fields_lib$0, "Typed_fields_lib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_fields_lib__Typed_common_lib_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Typed_fields_lib_Typed_common_ = [0];
   runtime.caml_register_global
    (0,
     Typed_fields_lib_Typed_common_,
     "Typed_fields_lib__Typed_common_lib_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_fields_lib__Typed_fields_lib_intf
//# unitInfo: Requires: Base__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List;
   function S_of_S1(M, T){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     set = M[8],
     _y_ = M[5];
    function create(param){
     var f = param[1];
     function m_creator_f(field){return caml_call1(f, field);}
     var m_creator = [0, m_creator_f];
     return caml_call1(M[9], m_creator);
    }
    var Type_ids = caml_call1(_y_, T);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _C_ = m_of_packed(b), _D_ = m_of_packed(a);
     return caml_call2(M[6][1], _D_, _C_);
    }
    function equal(a, b){
     var _A_ = m_of_packed(b), _B_ = m_of_packed(a);
     return caml_call2(M[6][2], _B_, _A_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _z_ = m_of_packed(t);
     return caml_call1(M[6][3], _z_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            set,
            create];
   }
   function S_of_S2(M, T1, T2){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     set = M[8],
     _s_ = M[5];
    function create(param){
     var f = param[1];
     function m_creator_f(field){return caml_call1(f, field);}
     var m_creator = [0, m_creator_f];
     return caml_call1(M[9], m_creator);
    }
    var Type_ids = caml_call1(caml_call1(_s_, T1), T2);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _w_ = m_of_packed(b), _x_ = m_of_packed(a);
     return caml_call2(M[6][1], _x_, _w_);
    }
    function equal(a, b){
     var _u_ = m_of_packed(b), _v_ = m_of_packed(a);
     return caml_call2(M[6][2], _v_, _u_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _t_ = m_of_packed(t);
     return caml_call1(M[6][3], _t_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            set,
            create];
   }
   function S_of_S3(M, T1, T2, T3){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     set = M[8],
     _m_ = M[5];
    function create(param){
     var f = param[1];
     function m_creator_f(field){return caml_call1(f, field);}
     var m_creator = [0, m_creator_f];
     return caml_call1(M[9], m_creator);
    }
    var Type_ids = caml_call1(caml_call1(caml_call1(_m_, T1), T2), T3);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _q_ = m_of_packed(b), _r_ = m_of_packed(a);
     return caml_call2(M[6][1], _r_, _q_);
    }
    function equal(a, b){
     var _o_ = m_of_packed(b), _p_ = m_of_packed(a);
     return caml_call2(M[6][2], _p_, _o_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _n_ = m_of_packed(t);
     return caml_call1(M[6][3], _n_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            set,
            create];
   }
   function S_of_S4(M, T1, T2, T3, T4){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     set = M[8],
     _g_ = M[5];
    function create(param){
     var f = param[1];
     function m_creator_f(field){return caml_call1(f, field);}
     var m_creator = [0, m_creator_f];
     return caml_call1(M[9], m_creator);
    }
    var
     Type_ids =
       caml_call1(caml_call1(caml_call1(caml_call1(_g_, T1), T2), T3), T4);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _k_ = m_of_packed(b), _l_ = m_of_packed(a);
     return caml_call2(M[6][1], _l_, _k_);
    }
    function equal(a, b){
     var _i_ = m_of_packed(b), _j_ = m_of_packed(a);
     return caml_call2(M[6][2], _j_, _i_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _h_ = m_of_packed(t);
     return caml_call1(M[6][3], _h_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            set,
            create];
   }
   function S_of_S5(M, T1, T2, T3, T4, T5){
    var
     names = M[1],
     name = M[2],
     path = M[3],
     ord = M[4],
     get = M[7],
     set = M[8],
     _a_ = M[5];
    function create(param){
     var f = param[1];
     function m_creator_f(field){return caml_call1(f, field);}
     var m_creator = [0, m_creator_f];
     return caml_call1(M[9], m_creator);
    }
    var
     Type_ids =
       caml_call1
        (caml_call1(caml_call1(caml_call1(caml_call1(_a_, T1), T2), T3), T4),
         T5);
    function m_of_packed(param){
     var field = param[1];
     return caml_call1(M[6][6], field);
    }
    function packed_of_m(param){var field = param[1]; return [0, field];}
    function compare(a, b){
     var _e_ = m_of_packed(b), _f_ = m_of_packed(a);
     return caml_call2(M[6][1], _f_, _e_);
    }
    function equal(a, b){
     var _c_ = m_of_packed(b), _d_ = m_of_packed(a);
     return caml_call2(M[6][2], _d_, _c_);
    }
    var all = caml_call2(Base_List[53], M[6][5], packed_of_m);
    function sexp_of_t(t){
     var _b_ = m_of_packed(t);
     return caml_call1(M[6][3], _b_);
    }
    function t_of_sexp(sexp){return packed_of_m(caml_call1(M[6][4], sexp));}
    function pack(field){return [0, field];}
    return [0,
            names,
            name,
            path,
            ord,
            Type_ids,
            [0, t_of_sexp, sexp_of_t, all, compare, equal, pack],
            get,
            set,
            create];
   }
   var
    Typed_fields_lib_Typed_fields_ =
      [0, S_of_S1, S_of_S2, S_of_S3, S_of_S4, S_of_S5];
   runtime.caml_register_global
    (1,
     Typed_fields_lib_Typed_fields_,
     "Typed_fields_lib__Typed_fields_lib_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typed_fields_lib
//# unitInfo: Requires: Base, Base__Int, Base__List, Base__Type_equal, Typed_fields_lib__Typed_common_lib_intf, Typed_fields_lib__Typed_fields_lib_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_opaque = "<opaque>",
    cst_this$11 = "this",
    cst_typed_fields_lib_typed_fie = "typed_fields_lib/typed_fields_lib.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    names$5 = [0, cst_this$11, 0],
    all$5 = [0, [0, 0], 0],
    names$4 = [0, cst_this$11, 0],
    all$4 = [0, [0, 0], 0],
    names$3 = [0, cst_this$11, 0],
    all$3 = [0, [0, 0], 0],
    names$2 = [0, cst_this$11, 0],
    all$2 = [0, [0, 0], 0],
    names$1 = [0, cst_this$11, 0],
    all$1 = [0, [0, 0], 0],
    names$0 = [0, cst_this$11, 0],
    all$0 = [0, [0, 0], 0],
    Assert_failure = global_data.Assert_failure,
    Base_Type_equal = global_data.Base__Type_equal,
    Base = global_data.Base,
    Match_failure = global_data.Match_failure,
    Base_Int = global_data.Base__Int,
    Base_List = global_data.Base__List,
    Typed_fields_lib_Typed_fields_ =
      global_data.Typed_fields_lib__Typed_fields_lib_intf,
    Typed_fields_lib_Typed_common_ =
      global_data.Typed_fields_lib__Typed_common_lib_intf,
    S_of_S1 = Typed_fields_lib_Typed_fields_[1],
    S_of_S2 = Typed_fields_lib_Typed_fields_[2],
    S_of_S3 = Typed_fields_lib_Typed_fields_[3],
    S_of_S4 = Typed_fields_lib_Typed_fields_[4],
    S_of_S5 = Typed_fields_lib_Typed_fields_[5],
    _H_ = [0, cst_typed_fields_lib_typed_fie, 363, 12],
    _G_ = [0, 0],
    _F_ = [0, 0],
    _E_ = [0, cst_this$11],
    _D_ = [0, cst_opaque],
    cst_this$10 = cst_this$11,
    _C_ = [0, 0, 0],
    cst_this$9 = cst_this$11,
    _B_ = [0, 0],
    _A_ = [0, 0],
    _z_ = [0, cst_this$11],
    _y_ = [0, cst_opaque],
    cst_this$8 = cst_this$11,
    _x_ = [0, 0, 0],
    cst_this$7 = cst_this$11,
    _w_ = [0, 0],
    _v_ = [0, 0],
    _u_ = [0, cst_this$11],
    _t_ = [0, cst_opaque],
    cst_this$6 = cst_this$11,
    _s_ = [0, 0, 0],
    cst_this$5 = cst_this$11,
    _r_ = [0, 0],
    _q_ = [0, 0],
    _p_ = [0, cst_this$11],
    _o_ = [0, cst_opaque],
    cst_this$4 = cst_this$11,
    _n_ = [0, 0, 0],
    cst_this$3 = cst_this$11,
    _m_ = [0, 0],
    _l_ = [0, 0],
    _k_ = [0, cst_this$11],
    _j_ = [0, cst_opaque],
    cst_this$2 = cst_this$11,
    _i_ = [0, 0, 0],
    cst_this$1 = cst_this$11,
    _h_ = [0, 0],
    _g_ = [0, 0],
    _f_ = [0, cst_this$11],
    _e_ = [0, cst_opaque],
    _d_ = [0, 0, 0],
    cst_this = cst_this$11,
    cst_this$0 = cst_this$11,
    _c_ = [0, "Unit has no fields, so cannot convert sexp to field."],
    _b_ = [0, cst_typed_fields_lib_typed_fie, 40, 6],
    _a_ = [0, cst_typed_fields_lib_typed_fie, 9, 25];
   function unreachable_code(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _a_], 1);
   }
   var names = 0;
   function set(t, param, _az_){return unreachable_code(t);}
   function create(param){return 0;}
   var Type_ids = [0, unreachable_code], all = 0;
   function compare(param, _aw_){
    var
     x2 = _aw_[1],
     x1 = param[1],
     _ax_ = unreachable_code(x2),
     _ay_ = unreachable_code(x1);
    return caml_call3(Base_List[1], Base_Int[14], _ay_, _ax_);
   }
   function equal(p1, p2){return 0 === compare(p1, p2) ? 1 : 0;}
   function sexp_of_t(packed){
    throw caml_maybe_attach_backtrace([0, Match_failure, _b_], 1);
   }
   function t_of_sexp(sexp){
    return caml_call1(Base[246], [1, [0, _c_, [0, sexp, 0]]]);
   }
   function list_to_sexp(other){
    if(! other)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
    if(other[2]) return [1, other];
    var some_sexp = other[1];
    return some_sexp;
   }
   var
    Private = [0, list_to_sexp],
    _I_ =
      [0,
       names,
       unreachable_code,
       unreachable_code,
       unreachable_code,
       Type_ids,
       [0, t_of_sexp, sexp_of_t, all, compare, equal, unreachable_code],
       unreachable_code,
       set,
       create];
   function _J_(_aq_){
    function name(param){return cst_this$9;}
    function path(param){return 0;}
    function ord(param){return _C_;}
    function get(param, t){return t;}
    function set(param, _av_, t){return t;}
    function create(param){var f = param[1]; return caml_call1(f, 0);}
    function Type_ids
    (Type_id_T1, Type_id_T2, Type_id_T3, Type_id_T4, Type_id_T5){
     function _at_(param){return _D_;}
     var _au_ = caml_call2(Base_Type_equal[12][4], cst_this$10, _at_);
     function type_id(param){return _au_;}
     return [0, type_id];
    }
    function compare(param, _as_){return 0;}
    function equal(param, _ar_){return 1;}
    function sexp_of_t(param){return _E_;}
    function t_of_sexp(param){return _F_;}
    function pack(param){return _G_;}
    return [0,
            names$5,
            name,
            path,
            ord,
            Type_ids,
            [0, compare, equal, sexp_of_t, t_of_sexp, all$5, pack],
            get,
            set,
            create];
   }
   function _K_(_ak_){
    function name(param){return cst_this$7;}
    function path(param){return 0;}
    function ord(param){return _x_;}
    function get(param, t){return t;}
    function set(param, _ap_, t){return t;}
    function create(param){var f = param[1]; return caml_call1(f, 0);}
    function Type_ids(Type_id_T1, Type_id_T2, Type_id_T3, Type_id_T4){
     function _an_(param){return _y_;}
     var _ao_ = caml_call2(Base_Type_equal[12][4], cst_this$8, _an_);
     function type_id(param){return _ao_;}
     return [0, type_id];
    }
    function compare(param, _am_){return 0;}
    function equal(param, _al_){return 1;}
    function sexp_of_t(param){return _z_;}
    function t_of_sexp(param){return _A_;}
    function pack(param){return _B_;}
    return [0,
            names$4,
            name,
            path,
            ord,
            Type_ids,
            [0, compare, equal, sexp_of_t, t_of_sexp, all$4, pack],
            get,
            set,
            create];
   }
   function _L_(_ae_){
    function name(param){return cst_this$5;}
    function path(param){return 0;}
    function ord(param){return _s_;}
    function get(param, t){return t;}
    function set(param, _aj_, t){return t;}
    function create(param){var f = param[1]; return caml_call1(f, 0);}
    function Type_ids(Type_id_T1, Type_id_T2, Type_id_T3){
     function _ah_(param){return _t_;}
     var _ai_ = caml_call2(Base_Type_equal[12][4], cst_this$6, _ah_);
     function type_id(param){return _ai_;}
     return [0, type_id];
    }
    function compare(param, _ag_){return 0;}
    function equal(param, _af_){return 1;}
    function sexp_of_t(param){return _u_;}
    function t_of_sexp(param){return _v_;}
    function pack(param){return _w_;}
    return [0,
            names$3,
            name,
            path,
            ord,
            Type_ids,
            [0, compare, equal, sexp_of_t, t_of_sexp, all$3, pack],
            get,
            set,
            create];
   }
   function _M_(___){
    function name(param){return cst_this$3;}
    function path(param){return 0;}
    function ord(param){return _n_;}
    function get(param, t){return t;}
    function set(param, _ad_, t){return t;}
    function create(param){var f = param[1]; return caml_call1(f, 0);}
    function Type_ids(Typed_id_T1, Type_id_T2){
     function _ab_(param){return _o_;}
     var _ac_ = caml_call2(Base_Type_equal[12][4], cst_this$4, _ab_);
     function type_id(param){return _ac_;}
     return [0, type_id];
    }
    function compare(param, _aa_){return 0;}
    function equal(param, _$_){return 1;}
    function sexp_of_t(param){return _p_;}
    function t_of_sexp(param){return _q_;}
    function pack(param){return _r_;}
    return [0,
            names$2,
            name,
            path,
            ord,
            Type_ids,
            [0, compare, equal, sexp_of_t, t_of_sexp, all$2, pack],
            get,
            set,
            create];
   }
   function _N_(_U_){
    function name(param){return cst_this$1;}
    function path(param){return 0;}
    function ord(param){return _i_;}
    function get(param, t){return t;}
    function set(param, _Z_, t){return t;}
    function create(param){var f = param[1]; return caml_call1(f, 0);}
    function Type_ids(Type_id_T1){
     function _X_(param){return _j_;}
     var _Y_ = caml_call2(Base_Type_equal[12][4], cst_this$2, _X_);
     function type_id(param){return _Y_;}
     return [0, type_id];
    }
    function compare(param, _W_){return 0;}
    function equal(param, _V_){return 1;}
    function sexp_of_t(param){return _k_;}
    function t_of_sexp(param){return _l_;}
    function pack(param){return _m_;}
    return [0,
            names$1,
            name,
            path,
            ord,
            Type_ids,
            [0, compare, equal, sexp_of_t, t_of_sexp, all$1, pack],
            get,
            set,
            create];
   }
   var
    Typed_fields_lib =
      [0,
       S_of_S1,
       S_of_S2,
       S_of_S3,
       S_of_S4,
       S_of_S5,
       function(_Q_){
        function name(param){return cst_this;}
        function path(param){return 0;}
        function ord(param){return _d_;}
        function get(param, t){return t;}
        function set(param, _T_, t){return t;}
        function create(param){var f = param[1]; return caml_call1(f, 0);}
        function _O_(param){return _e_;}
        var _P_ = caml_call2(Base_Type_equal[12][4], cst_this$0, _O_);
        function type_id(param){return _P_;}
        var Type_ids = [0, type_id];
        function compare(param, _S_){return 0;}
        function equal(param, _R_){return 1;}
        function sexp_of_t(param){return _f_;}
        function t_of_sexp(param){return _g_;}
        function pack(param){return _h_;}
        return [0,
                names$0,
                name,
                path,
                ord,
                Type_ids,
                [0, t_of_sexp, sexp_of_t, all$0, compare, equal, pack],
                get,
                set,
                create];
       },
       _N_,
       _M_,
       _L_,
       _K_,
       _J_,
       _I_,
       Typed_fields_lib_Typed_common_,
       Private];
   runtime.caml_register_global(66, Typed_fields_lib, "Typed_fields_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
