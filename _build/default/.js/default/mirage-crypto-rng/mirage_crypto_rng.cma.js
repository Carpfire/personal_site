// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Mirage_crypto_rng__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Mirage_crypto_rng = [0];
   runtime.caml_register_global(0, Mirage_crypto_rng, "Mirage_crypto_rng__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto_rng__Rng
//# unitInfo: Requires: Stdlib, Stdlib__Atomic, Stdlib__Bytes, Stdlib__Option, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    setup_rng =
      '\nTo initialize the RNG with a default generator, and set up entropy collection and periodic reseeding as a background task, do the following:\n  If you are using MirageOS, use the random device in config.ml: `let main = Mirage.main "Unikernel.Main" (random @-> job)`, and `let () = register "my_unikernel" [main $ default_random]`. \n  If you are using Lwt, execute `Mirage_crypto_rng_lwt.initialize (module Mirage_crypto_rng.Fortuna)` at startup. \n  If you are using Async, execute `Mirage_crypto_rng_async.initialize (module Mirage_crypto_rng.Fortuna)` at startup. \n  If you are using Eio, execute in one of the fibers `Mirage_crypto_rng_eio.run (module Fortuna) env` (`env` from `Eio_main.run`).\n   \n  Otherwise, there is no periodic reseeding. For an initial seed from getrandom(), execute `Mirage_crypto_rng_unix.initialize (module Mirage_crypto_rng.Fortuna)`. You can use `Mirage_crypto_rng.accumulate` and `Mirage_crypto_rng.reseed` to reseed the RNG manually.',
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Unseeded_generator =
      [248, "Mirage_crypto_rng__Rng.Unseeded_generator", caml_fresh_oo_id(0)],
    No_default_generator =
      [248,
       "Mirage_crypto_rng__Rng.No_default_generator",
       caml_fresh_oo_id(0)],
    _b_ = [0, 0],
    cst_buffer_too_short = "buffer too short",
    cst_The_RNG_has_not_been_seede = "The RNG has not been seeded.",
    cst_The_default_generator_is_n =
      "The default generator is not yet initialized. ";
   function _a_(param){
    return param === Unseeded_generator
            ? [0,
              caml_call2
               (Stdlib[28], cst_The_RNG_has_not_been_seede, setup_rng)]
            : param
              === No_default_generator
              ? [0,
                caml_call2
                 (Stdlib[28], cst_The_default_generator_is_n, setup_rng)]
              : 0;
   }
   caml_call1(Stdlib_Printexc[9], _a_);
   function create(g, seed, opt, time, m){
    if(opt) var sth = opt[1], strict = sth; else var strict = 0;
    var
     _d_ = caml_call2(m[2], time, 0),
     g$0 = caml_call2(Stdlib_Option[3], g, _d_),
     _e_ = caml_call1(m[4], g$0);
    caml_call2(Stdlib_Option[9], _e_, seed);
    return [0, [0, g$0, strict, m]];
   }
   var default_generator = caml_call1(Stdlib_Atomic[1], 0);
   function set_default_generator(g){
    return caml_call2(Stdlib_Atomic[3], default_generator, [0, g]);
   }
   function unset_default_generator(param){
    return caml_call2(Stdlib_Atomic[3], default_generator, 0);
   }
   function default_generator$0(param){
    var match = caml_call1(Stdlib_Atomic[2], default_generator);
    if(! match) throw caml_maybe_attach_backtrace(No_default_generator, 1);
    var g = match[1];
    return g;
   }
   function get(param){
    if(! param) return default_generator$0(0);
    var g = param[1];
    return g;
   }
   function generate_into(opt, b, _c_, n){
    if(opt) var sth = opt[1], g = sth; else var g = default_generator$0(0);
    if(_c_) var sth$0 = _c_[1], off = sth$0; else var off = 0;
    var match = g[1], m = match[3], g$0 = match[1];
    if((runtime.caml_ml_bytes_length(b) - off | 0) < n)
     caml_call1(Stdlib[1], cst_buffer_too_short);
    return caml_call4(m[3], g$0, b, off, n);
   }
   function generate(g, n){
    var data = runtime.caml_create_bytes(n);
    generate_into(g, data, _b_, n);
    return caml_call1(Stdlib_Bytes[44], data);
   }
   function reseed(opt, cs){
    if(opt) var sth = opt[1], g = sth; else var g = default_generator$0(0);
    var match = g[1], m = match[3], g$0 = match[1];
    return caml_call2(m[4], g$0, cs);
   }
   function accumulate(g, source){
    var match = get(g)[1], m = match[3], g$0 = match[1];
    return caml_call2(m[5], g$0, source);
   }
   function seeded(g){
    var match = get(g)[1], m = match[3], g$0 = match[1];
    return caml_call1(m[6], g$0);
   }
   function block(g){var m = get(g)[1][3]; return m[1];}
   function pools(g){var m = get(g)[1][3]; return m[7];}
   function strict(g){var s = get(g)[1][2]; return s;}
   var
    Mirage_crypto_rng_Rng =
      [0,
       Unseeded_generator,
       No_default_generator,
       setup_rng,
       create,
       default_generator,
       set_default_generator,
       unset_default_generator,
       default_generator$0,
       get,
       generate_into,
       generate,
       reseed,
       accumulate,
       seeded,
       block,
       pools,
       strict];
   runtime.caml_register_global
    (12, Mirage_crypto_rng_Rng, "Mirage_crypto_rng__Rng");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto_rng__Entropy
//# unitInfo: Requires: Mirage_crypto_rng__Rng, Stdlib, Stdlib__Atomic, Stdlib__Bytes, Stdlib__Format, Stdlib__List, Stdlib__Set, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Mirage_crypto_rng_Rng = global_data.Mirage_crypto_rng__Rng,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Set = global_data.Stdlib__Set,
    match = runtime.mc_cpu_rng_type(0),
    cst_rdseed = "rdseed",
    cst_rdrand = "rdrand",
    cst_timer = "timer",
    cst_Mirage_crypto_rng_Entropy_ =
      "Mirage_crypto_rng.Entropy: 0 is a bad CPU RNG value",
    _b_ = [0, [12, 91, [4, 0, 0, 0, [11, "] ", [2, 0, 0]]]], "[%d] %s"],
    _a_ = [0, "rng/entropy.ml", 43, 11],
    _e_ = [0, 687466103, 0],
    _f_ = [0, 698752579, 0],
    _g_ = [0, 687466103, [0, 698752579, 0]],
    _d_ = [1, 404463778],
    _c_ = [1, 404463778];
   if(3 < match >>> 0)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   switch(match){
     case 0:
      var cpu_rng = 0; break;
     case 1:
      var cpu_rng = _e_; break;
     case 2:
      var cpu_rng = _f_; break;
     default: var cpu_rng = _g_;
   }
   var Cpu_native = [0, cpu_rng];
   function compare(param, _w_){
    var bn = _w_[2], an = param[2];
    return caml_call2(Stdlib_String[10], an, bn);
   }
   var
    S = caml_call1(Stdlib_Set[1], [0, compare]),
    sources = caml_call1(Stdlib_Atomic[1], S[1]);
   function register_source(name){
    for(;;){
     var
      sources$0 = caml_call1(Stdlib_Atomic[2], sources),
      n = caml_call1(S[9], sources$0),
      source = [0, n, name],
      _v_ = caml_call2(S[2], source, sources$0);
     if(caml_call3(Stdlib_Atomic[5], sources, sources$0, _v_)) return source;
    }
   }
   function id(param){var idx = param[1]; return idx;}
   function sources$0(param){
    var _u_ = caml_call1(Stdlib_Atomic[2], sources);
    return caml_call1(S[10], _u_);
   }
   function pp_source(ppf, param){
    var name = param[2], idx = param[1];
    return caml_call4(Stdlib_Format[137], ppf, _b_, idx, name);
   }
   function cpu_rng$0(param){
    return 698752579 <= param
            ? function(_s_){return runtime.mc_cpu_rdseed(_s_);}
            : function(_t_){return runtime.mc_cpu_rdrand(_t_);};
   }
   function random(preferred){
    var xs = Cpu_native[1];
    if(! xs) return 0;
    if(caml_call2(Stdlib_List[37], preferred, xs)) return [0, preferred];
    var y = xs[1];
    return [0, y];
   }
   function write_header(source, data){
    caml_call3(Stdlib_Bytes[73], data, 0, source);
    return caml_call3
            (Stdlib_Bytes[73],
             data,
             1,
             runtime.caml_ml_bytes_length(data) - 2 | 0);
   }
   function header(source, data){
    var hdr = caml_create_bytes(2 + caml_ml_string_length(data) | 0);
    runtime.caml_blit_string(data, 0, hdr, 2, caml_ml_string_length(data));
    write_header(source, hdr);
    return caml_call1(Stdlib_Bytes[44], hdr);
   }
   function whirlwind_bootstrap(id){
    var buf = caml_create_bytes(202), i = 0;
    for(;;){
     var tsc = runtime.mc_cycle_counter(0);
     caml_call3(Stdlib_Bytes[77], buf, (i + 1 | 0) * 2 | 0, tsc);
     var _p_ = tsc % 1024 | 0, _o_ = 1;
     if(_p_ >= 1){
      var j = _o_;
      for(;;){
       runtime.caml_div(tsc, j);
       var _r_ = j + 1 | 0;
       if(_p_ === j) break;
       var j = _r_;
      }
     }
     var _q_ = i + 1 | 0;
     if(99 === i){
      write_header(id, buf);
      return caml_call1(Stdlib_Bytes[44], buf);
     }
     var i = _q_;
    }
   }
   var match$0 = random(698752579);
   if(match$0)
    var
     insn = match$0[1],
     cpu_rng_bootstrap =
       function(id){
        var r = cpu_rng$0(insn)(0);
        if(0 === r) caml_call1(Stdlib[2], cst_Mirage_crypto_rng_Entropy_);
        var buf = caml_create_bytes(10);
        caml_call3(Stdlib_Bytes[86], buf, 2, caml_int64_of_int32(r));
        write_header(id, buf);
        return caml_call1(Stdlib_Bytes[44], buf);
       },
     cpu_rng_bootstrap$0 = [0, cpu_rng_bootstrap];
   else
    var cpu_rng_bootstrap$0 = _d_;
   function bootstrap(id){
    if(0 !== cpu_rng_bootstrap$0[0]) return whirlwind_bootstrap(id);
    var cpu_rng_bootstrap = cpu_rng_bootstrap$0[1];
    try{var _m_ = caml_call1(cpu_rng_bootstrap, id); return _m_;}
    catch(_n_){
     var _l_ = caml_wrap_exception(_n_);
     if(_l_[1] === Stdlib[7]) return whirlwind_bootstrap(id);
     throw caml_maybe_attach_backtrace(_l_, 0);
    }
   }
   function interrupt_hook(param){
    var buf = caml_create_bytes(4), a = runtime.mc_cycle_counter(0);
    caml_call3(Stdlib_Bytes[83], buf, 0, a);
    return caml_call1(Stdlib_Bytes[44], buf);
   }
   function timer_accumulator(g){
    if(g)
     var g$0 = g[1], g$1 = [0, g$0];
    else
     var g$1 = [0, caml_call1(Mirage_crypto_rng_Rng[8], 0)];
    var
     source = register_source(cst_timer),
     handle = caml_call2(Mirage_crypto_rng_Rng[13], g$1, source)[2];
    return function(param){return caml_call1(handle, interrupt_hook(0));};
   }
   function feed_pools(g, source, f){
    if(g)
     var g$0 = g[1], g$1 = [0, g$0];
    else
     var g$1 = [0, caml_call1(Mirage_crypto_rng_Rng[8], 0)];
    var
     handle = caml_call2(Mirage_crypto_rng_Rng[13], g$1, source)[2],
     _j_ = caml_call1(Mirage_crypto_rng_Rng[16], g$1) - 1 | 0,
     _i_ = 0;
    if(_j_ >= 0){
     var i = _i_;
     for(;;){
      caml_call1(handle, caml_call1(f, 0));
      var _k_ = i + 1 | 0;
      if(_j_ === i) break;
      var i = _k_;
     }
    }
    return 0;
   }
   var match$1 = random(687466103);
   if(match$1)
    var
     insn$0 = match$1[1],
     cpu_rng$1 =
       function(g){
        var
         randomf = cpu_rng$0(insn$0),
         s = 698752579 <= insn$0 ? cst_rdseed : cst_rdrand,
         source = register_source(s);
        function f(param){
         var
          buf = caml_create_bytes(8),
          _h_ = caml_int64_of_int32(randomf(0));
         caml_call3(Stdlib_Bytes[86], buf, 0, _h_);
         return caml_call1(Stdlib_Bytes[44], buf);
        }
        return function(param){return feed_pools(g, source, f);};
       },
     cpu_rng$2 = [0, cpu_rng$1];
   else
    var cpu_rng$2 = _c_;
   var
    Mirage_crypto_rng_Entropy =
      [0,
       Cpu_native,
       S,
       sources,
       register_source,
       id,
       sources$0,
       pp_source,
       random,
       write_header,
       header,
       whirlwind_bootstrap,
       cpu_rng_bootstrap$0,
       bootstrap,
       interrupt_hook,
       timer_accumulator,
       feed_pools,
       cpu_rng$2];
   runtime.caml_register_global
    (20, Mirage_crypto_rng_Entropy, "Mirage_crypto_rng__Entropy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto_rng__Fortuna
//# unitInfo: Requires: Digestif, Mirage_crypto, Mirage_crypto_rng__Rng, Stdlib__Array, Stdlib__Bytes, Stdlib__Int64, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    now = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    min_time_duration = runtime.caml_int64_create_lo_mi_hi(10144256, 59, 0),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Mirage_crypto = global_data.Mirage_crypto,
    Mirage_crypto_rng_Rng = global_data.Mirage_crypto_rng__Rng,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Digestif = global_data.Digestif,
    empty = Digestif[4][2],
    _e_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(0, 0, 0)];
   function get(t){
    var
     _A_ = caml_call1(Digestif[4][10], t),
     _B_ = caml_call1(Digestif[4][39], _A_),
     _C_ = caml_call3(Digestif[4][12], 0, 0, _B_);
    return caml_call1(Digestif[4][39], _C_);
   }
   function digest(x){
    var
     _x_ = caml_call3(Digestif[4][12], 0, 0, x),
     _y_ = caml_call1(Digestif[4][39], _x_),
     _z_ = caml_call3(Digestif[4][12], 0, 0, _y_);
    return caml_call1(Digestif[4][39], _z_);
   }
   function digesti(i){
    var
     _u_ = caml_call1(Digestif[4][15], i),
     _v_ = caml_call1(Digestif[4][39], _u_),
     _w_ = caml_call3(Digestif[4][12], 0, 0, _v_);
    return caml_call1(Digestif[4][39], _w_);
   }
   var
    feedi = Digestif[4][8],
    SHAd256 = [0, empty, get, digest, digesti, feedi],
    block = 16,
    min_pool_size = 64,
    pools = 32;
   function create(time, param){
    var
     k = caml_call2(Stdlib_String[1], 32, 0),
     _t_ = runtime.caml_make_vect(32, SHAd256[1]);
    return [0,
            _b_,
            k,
            caml_call1(Mirage_crypto[4][3][1], k),
            _t_,
            0,
            0,
            _a_,
            time];
   }
   function seeded(g){
    var
     match = g[1],
     hi = match[2],
     lo = match[1],
     _r_ = caml_call2(Stdlib_Int64[17], lo, _c_),
     _s_ = _r_ ? caml_call2(Stdlib_Int64[17], hi, _d_) : _r_;
    return 1 - _s_;
   }
   function set_key(g, sec){
    g[2] = sec;
    g[3] = caml_call1(Mirage_crypto[4][3][1], sec);
    return 0;
   }
   function reseedi(g, iter){
    function _q_(f){caml_call1(f, g[2]); return caml_call1(iter, f);}
    set_key(g, caml_call1(SHAd256[4], _q_));
    g[1] = caml_call2(Mirage_crypto[4][3][4], g[1], _e_);
    return 0;
   }
   function iter1(a, f){return caml_call1(f, a);}
   function reseed(g, cs){
    return reseedi(g, function(_p_){return iter1(cs, _p_);});
   }
   function generate_rekey(g, buf, off, len){
    var
     b = caml_call2(Mirage_crypto[1][1], len, block) + 2 | 0,
     n = b * 16 | 0,
     r = caml_call3(Mirage_crypto[4][3][7], g[3], g[1], n);
    runtime.caml_blit_string(r, 0, buf, off, len);
    var r2 = caml_call3(Stdlib_String[16], r, n - 32 | 0, 32);
    set_key(g, r2);
    g[1] =
     caml_call2(Mirage_crypto[4][3][4], g[1], runtime.caml_int64_of_int32(b));
    return 0;
   }
   function add_pool_entropy(g){
    var _l_ = 64 < g[5] ? 1 : 0;
    if(_l_){
     var match = g[8];
     if(match)
      var
       f = match[1],
       now$0 = caml_call1(f, 0),
       now$1 = now$0,
       should_reseed =
         runtime.caml_greaterthan
          (runtime.caml_int64_sub(now$0, g[7]), min_time_duration);
     else
      var now$1 = now, should_reseed = 1;
     if(should_reseed){
      g[6] = g[6] + 1 | 0;
      g[7] = now$1;
      g[5] = 0;
      return reseedi
              (g,
               function(add){
                var i = 0;
                for(;;){
                 if(0 === (g[6] & ((1 << i) - 1 | 0))){
                  var _m_ = caml_check_bound(g[4], i)[1 + i];
                  caml_call1(add, caml_call1(SHAd256[2], _m_));
                  var _n_ = SHAd256[1];
                  caml_check_bound(g[4], i)[1 + i] = _n_;
                 }
                 var _o_ = i + 1 | 0;
                 if(31 === i) return 0;
                 var i = _o_;
                }
               });
     }
     var should_reseed$0 = should_reseed;
    }
    else
     var should_reseed$0 = _l_;
    return should_reseed$0;
   }
   function generate_into(g, buf, off, len){
    add_pool_entropy(g);
    if(1 - seeded(g))
     throw caml_maybe_attach_backtrace(Mirage_crypto_rng_Rng[1], 1);
    var off$0 = off, i = len;
    for(;;){
     if(0 >= i) return 0;
     var n = caml_call2(Mirage_crypto[1][2], i, 65536);
     generate_rekey(g, buf, off$0, n);
     var i$0 = i - n | 0, off$1 = off$0 + n | 0, off$0 = off$1, i = i$0;
    }
   }
   function add(g, param, pool, data){
    var
     source = param[1],
     buf = runtime.caml_create_bytes(2),
     pool$0 = pool & 31,
     source$0 = source & 255;
    caml_call3(Stdlib_Bytes[73], buf, 0, source$0);
    caml_call3(Stdlib_Bytes[73], buf, 1, caml_ml_string_length(data));
    var
     _f_ = caml_call1(Stdlib_Bytes[44], buf),
     _g_ = caml_call2(Mirage_crypto[1][4], _f_, data),
     _h_ = caml_check_bound(g[4], pool$0)[1 + pool$0],
     _i_ = caml_call2(SHAd256[5], _h_, _g_);
    caml_check_bound(g[4], pool$0)[1 + pool$0] = _i_;
    var
     _j_ = 0 === pool$0 ? 1 : 0,
     _k_ = _j_ ? (g[5] = g[5] + caml_ml_string_length(data) | 0, 0) : _j_;
    return _k_;
   }
   function accumulate(g, source){
    var pool = [0, 0];
    return [0,
            3254561,
            function(buf){add(g, source, pool[1], buf); pool[1]++; return 0;}];
   }
   var
    Mirage_crypto_rng_Fortuna =
      [0,
       SHAd256,
       block,
       min_pool_size,
       min_time_duration,
       pools,
       create,
       seeded,
       set_key,
       reseedi,
       iter1,
       reseed,
       generate_rekey,
       add_pool_entropy,
       generate_into,
       add,
       accumulate];
   runtime.caml_register_global
    (13, Mirage_crypto_rng_Fortuna, "Mirage_crypto_rng__Fortuna");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto_rng__Hmac_drbg
//# unitInfo: Requires: Mirage_crypto, Mirage_crypto_rng__Rng, Stdlib, Stdlib__Bytes, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    bx01 = "\x01",
    bx00 = "\0",
    Stdlib = global_data.Stdlib,
    Mirage_crypto_rng_Rng = global_data.Mirage_crypto_rng__Rng,
    Mirage_crypto = global_data.Mirage_crypto,
    Stdlib_String = global_data.Stdlib__String,
    cst_Implement_Hmac_drbg_accumu = "Implement Hmac_drbg.accumulate...";
   function Make(H){
    var
     block = H[1],
     k0 = caml_call2(Stdlib_String[1], H[1], 0),
     v0 = caml_call2(Stdlib_String[1], H[1], 1);
    function create(param, _l_){return [0, k0, v0, 0];}
    function seeded(g){return g[3];}
    function reseed(g, buf){
     var
      v = g[2],
      k = g[1],
      _f_ = caml_call2(Stdlib_String[7], cst, [0, v, [0, bx00, [0, buf, 0]]]),
      _g_ = caml_call3(caml_call1(H[21], k), 0, 0, _f_),
      k$0 = caml_call1(H[39], _g_),
      _h_ = caml_call4(H[21], k$0, 0, 0, v),
      v$0 = caml_call1(H[39], _h_),
      _i_ =
        caml_call2(Stdlib_String[7], cst$0, [0, v$0, [0, bx01, [0, buf, 0]]]),
      _j_ = caml_call3(caml_call1(H[21], k$0), 0, 0, _i_),
      k$1 = caml_call1(H[39], _j_),
      _k_ = caml_call4(H[21], k$1, 0, 0, v$0),
      v$1 = caml_call1(H[39], _k_);
     g[1] = k$1;
     g[2] = v$1;
     g[3] = 1;
     return 0;
    }
    function generate_into(g, buf, off, len){
     if(1 - g[3])
      throw caml_maybe_attach_backtrace(Mirage_crypto_rng_Rng[1], 1);
     var
      i$1 = caml_call2(Mirage_crypto[1][1], len, H[1]),
      v$2 = g[2],
      k = g[1];
     a:
     {
      var off$0 = off, v = v$2, i = i$1;
      for(;;){
       if(0 === i){var v$3 = v; break a;}
       if(1 === i) break;
       var _b_ = caml_call4(H[21], k, 0, 0, v), v$1 = caml_call1(H[39], _b_);
       caml_blit_string(v$1, 0, buf, off$0, H[1]);
       var
        i$0 = i - 1 | 0,
        off$1 = off$0 + H[1] | 0,
        off$0 = off$1,
        v = v$1,
        i = i$0;
      }
      var
       _a_ = caml_call4(H[21], k, 0, 0, v),
       v$0 = caml_call1(H[39], _a_),
       rem = runtime.caml_mod(len, H[1]),
       len$0 = 0 === rem ? H[1] : rem;
      caml_blit_string(v$0, 0, buf, off$0, len$0);
      var v$3 = v$0;
     }
     var
      _c_ = caml_call2(Stdlib[28], v$3, bx00),
      _d_ = caml_call4(H[21], g[1], 0, 0, _c_);
     g[1] = caml_call1(H[39], _d_);
     var _e_ = caml_call4(H[21], g[1], 0, 0, v$3);
     g[2] = caml_call1(H[39], _e_);
     return 0;
    }
    function accumulate(param){
     return caml_call1(Stdlib[1], cst_Implement_Hmac_drbg_accumu);
    }
    return [0,
            block,
            bx00,
            bx01,
            k0,
            v0,
            create,
            seeded,
            reseed,
            generate_into,
            accumulate,
            0];
   }
   var Mirage_crypto_rng_Hmac_drbg = [0, Make];
   runtime.caml_register_global
    (9, Mirage_crypto_rng_Hmac_drbg, "Mirage_crypto_rng__Hmac_drbg");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Mirage_crypto_rng
//# unitInfo: Requires: Mirage_crypto_rng__Entropy, Mirage_crypto_rng__Fortuna, Mirage_crypto_rng__Hmac_drbg, Mirage_crypto_rng__Rng
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Mirage_crypto_rng_Rng = global_data.Mirage_crypto_rng__Rng,
    Mirage_crypto_rng_Hmac_drbg = global_data.Mirage_crypto_rng__Hmac_drbg,
    Mirage_crypto_rng_Fortuna = global_data.Mirage_crypto_rng__Fortuna,
    Mirage_crypto_rng_Entropy = global_data.Mirage_crypto_rng__Entropy,
    Unseeded_generator = Mirage_crypto_rng_Rng[1],
    No_default_generator = Mirage_crypto_rng_Rng[2],
    create = Mirage_crypto_rng_Rng[4],
    set_default_generator = Mirage_crypto_rng_Rng[6],
    unset_default_generator = Mirage_crypto_rng_Rng[7],
    default_generator = Mirage_crypto_rng_Rng[8],
    generate_into = Mirage_crypto_rng_Rng[10],
    generate = Mirage_crypto_rng_Rng[11],
    reseed = Mirage_crypto_rng_Rng[12],
    accumulate = Mirage_crypto_rng_Rng[13],
    seeded = Mirage_crypto_rng_Rng[14],
    block = Mirage_crypto_rng_Rng[15],
    pools = Mirage_crypto_rng_Rng[16],
    strict = Mirage_crypto_rng_Rng[17],
    _a_ = Mirage_crypto_rng_Hmac_drbg[1];
   function _b_(_c_){
    var _d_ = caml_call1(_a_, _c_);
    return [0, _d_[1], _d_[6], _d_[9], _d_[8], _d_[10], _d_[7], _d_[11]];
   }
   var
    Mirage_crypto_rng =
      [0,
       Unseeded_generator,
       No_default_generator,
       [0,
        Mirage_crypto_rng_Entropy[6],
        Mirage_crypto_rng_Entropy[7],
        Mirage_crypto_rng_Entropy[4],
        Mirage_crypto_rng_Entropy[11],
        Mirage_crypto_rng_Entropy[12],
        Mirage_crypto_rng_Entropy[13],
        Mirage_crypto_rng_Entropy[14],
        Mirage_crypto_rng_Entropy[15],
        Mirage_crypto_rng_Entropy[16],
        Mirage_crypto_rng_Entropy[17],
        Mirage_crypto_rng_Entropy[5],
        Mirage_crypto_rng_Entropy[10]],
       [0,
        Mirage_crypto_rng_Fortuna[2],
        Mirage_crypto_rng_Fortuna[6],
        Mirage_crypto_rng_Fortuna[14],
        Mirage_crypto_rng_Fortuna[11],
        Mirage_crypto_rng_Fortuna[16],
        Mirage_crypto_rng_Fortuna[7],
        Mirage_crypto_rng_Fortuna[5]],
       _b_,
       create,
       default_generator,
       set_default_generator,
       unset_default_generator,
       generate_into,
       generate,
       block,
       reseed,
       accumulate,
       seeded,
       pools,
       strict];
   runtime.caml_register_global(4, Mirage_crypto_rng, "Mirage_crypto_rng");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
