// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ui_effect__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ui_effect = [0],
    Ui_effect$0 = [0, Ui_effect];
   runtime.caml_register_global(0, Ui_effect$0, "Ui_effect__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ui_effect__Ui_effect_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_effect_Ui_effect_intf = "Ui_effect__Ui_effect_intf",
    cst_ui_effect = "ui_effect";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_effect_Ui_effect_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_effect);
   caml_call1(Ppx_expect_runtime[1][1], "ui_effect/ui_effect_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ui_effect, "ui_effect_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_ui_effect);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_effect_Ui_effect_intf);
   var Ui_effect_Ui_effect_intf = [0];
   runtime.caml_register_global
    (11, Ui_effect_Ui_effect_intf, cst_Ui_effect_Ui_effect_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ui_effect
//# unitInfo: Requires: Base, Base__Hashtbl, Base__Int, Base__List, Base__Monad, CamlinternalLazy, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdio, Stdlib__Obj, Ui_effect__Ui_effect_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_effect$0 = "Ui_effect",
    cst_Unrecognized_variant$1 = "Unrecognized variant",
    cst_ui_effect$0 = "ui_effect",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_List = global_data.Base__List,
    Stdio = global_data.Stdio,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Int = global_data.Base__Int,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_effect$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_effect$0);
   caml_call1(Ppx_expect_runtime[1][1], "ui_effect/ui_effect.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ui_effect$0, "ui_effect.ml");
   var
    Ignore = [248, "Ui_effect.Ignore", caml_fresh_oo_id(0)],
    Many = [248, "Ui_effect.Many", caml_fresh_oo_id(0)],
    handlers =
      caml_call3
       (Base_Hashtbl[4],
        0,
        [0, 8],
        [0, Base_Int[14], Base_Int[10], Base_Int[8]]),
    cst_Unrecognized_variant$0 = cst_Unrecognized_variant$1,
    cst_on_response_called_multipl = "on_response called multiple times!",
    cst_Ui_effect_Define1_Handler_ = "Ui_effect.Define1(Handler).C",
    cst_Unrecognized_variant = cst_Unrecognized_variant$1,
    cst_Ui_effect_Define_Handler_C = "Ui_effect.Define(Handler).C",
    cst_Ui_effect_Return = "Ui_effect.Return",
    cst_Ui_effect_Lazy = "Ui_effect.Lazy",
    cst_Ui_effect_Bind = "Ui_effect.Bind",
    cst_Ui_effect_Map = "Ui_effect.Map",
    cst_Ui_effect_Never = "Ui_effect.Never",
    cst_Ui_effect_Fun = "Ui_effect.Fun",
    cst_ui_effect = cst_ui_effect$0,
    cst_Ui_effect = cst_Ui_effect$0;
   function Define(Handler){
    var
     C = [248, cst_Ui_effect_Define_Handler_C, caml_fresh_oo_id(0)],
     key = caml_call1(Stdlib_Obj[23][3], C);
    function _w_(inp){
     var _x_ = inp[1], match = _x_[1];
     if(match[1] === C){
      var callback = _x_[2], value = match[2];
      caml_call1(Handler[2], value);
      return caml_call1(callback, 0);
     }
     var _y_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Unrecognized_variant);
     return caml_call1(Base[246], _y_);
    }
    caml_call3(Base_Hashtbl[39], handlers, key, _w_);
    function inject(v){return [0, C, v];}
    return [0, inject];
   }
   function Define1(Handler){
    var
     C = [248, cst_Ui_effect_Define1_Handler_, caml_fresh_oo_id(0)],
     key = caml_call1(Stdlib_Obj[23][3], C);
    function _t_(inp){
     var _u_ = inp[1], match = _u_[1];
     if(match[1] === C){
      var
       callback = _u_[2],
       value = match[2],
       called = [0, 0],
       callback$0 =
         function(a){
          if(called[1])
           caml_call1(Base[244], cst_on_response_called_multipl);
          else
           called[1] = 1;
          return caml_call1(callback, a);
         };
      return caml_call2(Handler[2], value, callback$0);
     }
     var _v_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Unrecognized_variant$0);
     return caml_call1(Base[246], _v_);
    }
    caml_call3(Base_Hashtbl[39], handlers, key, _t_);
    function inject(v){return [0, C, v];}
    return [0, inject];
   }
   function handle(s){return caml_call2(Stdio[5], 0, s);}
   var
    Print_s = Define([0, [0], handle]),
    print_s = Print_s[1],
    Return = [248, cst_Ui_effect_Return, caml_fresh_oo_id(0)],
    Lazy = [248, cst_Ui_effect_Lazy, caml_fresh_oo_id(0)],
    Bind = [248, cst_Ui_effect_Bind, caml_fresh_oo_id(0)],
    Map = [248, cst_Ui_effect_Map, caml_fresh_oo_id(0)],
    Never = [248, cst_Ui_effect_Never, caml_fresh_oo_id(0)],
    Fun = [248, cst_Ui_effect_Fun, caml_fresh_oo_id(0)];
   function return$0(a){return [0, Return, a];}
   function bind(t, f){return [0, Bind, t, f];}
   function _a_(t, f){return [0, Map, t, f];}
   function of_fun(f){return [0, Fun, f];}
   function lazy(a){return [0, Lazy, a];}
   var
    map = [0, -198771759, _a_],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   function eval$0(t, callback){
    var t$0 = t, callback$0 = callback;
    for(;;){
     if(t$0[1] === Fun){var f = t$0[2]; return caml_call1(f, callback$0);}
     if(t$0 === Ignore) return caml_call1(callback$0, 0);
     if(t$0[1] === Return){var a = t$0[2]; return caml_call1(callback$0, a);}
     if(t$0[1] === Lazy){
      var _n_ = t$0[2], _o_ = runtime.caml_obj_tag(_n_);
      a:
      if(250 === _o_)
       var t$1 = _n_[1];
      else{
       if(246 !== _o_ && 244 !== _o_){var t$1 = _n_; break a;}
       var t$1 = caml_call1(CamlinternalLazy[2], _n_);
      }
      var t$0 = t$1;
     }
     else{
      if(t$0[1] === Many){
       var
        l = t$0[2],
        _p_ = function(_s_){return 0;},
        _q_ = function(_r_){return eval$0(_r_, _p_);};
       caml_call2(Base_List[19], l, _q_);
       return caml_call1(callback$0, 0);
      }
      if(t$0[1] === Bind)
       var
        f$0 = t$0[3],
        t$2 = t$0[2],
        callback$3 =
          function(callback, f){
           function callback$0(a){return eval$0(caml_call1(f, a), callback);}
           return callback$0;
          },
        callback$1 = callback$3(callback$0, f$0),
        t$0 = t$2,
        callback$0 = callback$1;
      else{
       if(t$0[1] !== Map){
        if(t$0 === Never) return 0;
        var
         _l_ = caml_call1(Stdlib_Obj[23][1], t$0),
         _m_ = caml_call1(Stdlib_Obj[23][3], _l_);
        return caml_call3
                (Base_Hashtbl[57], handlers, _m_, [0, [0, t$0, callback$0]]);
       }
       var
        f$1 = t$0[3],
        t$3 = t$0[2],
        callback$4 =
          function(callback, f){
           function callback$0(a){
            return caml_call1(callback, caml_call1(f, a));
           }
           return callback$0;
          },
        callback$2 = callback$4(callback$0, f$1),
        t$0 = t$3,
        callback$0 = callback$2;
      }
     }
    }
   }
   function _b_(_k_){return 0;}
   function handle$0(_j_){return eval$0(_j_, _b_);}
   function eval$1(t, f){return eval$0(t, f);}
   var Action = [0];
   function handle$1(param, on_response){
    var f = param[2], a = param[1];
    return caml_call1(on_response, caml_call1(f, a));
   }
   var Sync_fun_arg = [0, Action, handle$1], Sync_fun = Define1(Sync_fun_arg);
   function of_sync_fun(f, a){return caml_call1(Sync_fun[1], [0, a, f]);}
   function of_thunk(f){return of_sync_fun(f, 0);}
   function make(request, on_response){return [0, request, on_response];}
   function request(param){var request = param[1]; return request;}
   function respond_to(param, response){
    var on_response = param[2];
    return caml_call1(on_response, response);
   }
   var Callback = [0, make, request, respond_to];
   function make$0(request, evaluator){
    return of_fun
            (function(callback){
              function _i_(response){
               caml_call1(callback, response);
               return Ignore;
              }
              var callback$0 = caml_call2(Callback[1], request, _i_);
              return caml_call1(evaluator, callback$0);
             });
   }
   var Private = [0, Callback, make$0];
   function create(param){return [0, [0, 0]];}
   function upon(t, handler){
    var match = t[1];
    if(0 === match[0]){match[1] = [0, handler, match[1]]; return 0;}
    var x = match[1];
    return caml_call1(handler, x);
   }
   function fill_if_empty(t, x){
    var match = t[1];
    if(0 !== match[0]) return 0;
    var handlers = match[1];
    function _h_(handler){return caml_call1(handler, x);}
    caml_call2(Base_List[19], handlers, _h_);
    t[1] = [1, x];
    return 0;
   }
   function peek(t){
    var match = t[1];
    if(0 === match[0]) return 0;
    var x = match[1];
    return [0, x];
   }
   var Svar = [0, create, upon, fill_if_empty, peek], Action$0 = [0];
   function handle$2(param, on_response){
    var f = param[2], a = param[1], _g_ = caml_call1(f, a);
    return caml_call2(Svar[2], _g_, on_response);
   }
   var
    Svar_fun_arg = [0, Action$0, handle$2],
    Svar_fun = Define1(Svar_fun_arg);
   function of_svar_fun(f, a){return caml_call1(Svar_fun[1], [0, a, f]);}
   function create$0(param){return [0, 0];}
   function queries_pending_response(t){
    function _f_(param){var query = param[1]; return query;}
    return caml_call2(Base_List[53], t[1], _f_);
   }
   function maybe_respond(t, f){
    function _e_(param){
     var response = param[2], query = param[1], match = caml_call1(f, query);
     if(! match) return 1;
     var resp = match[1];
     caml_call2(Svar[3], response, resp);
     return 0;
    }
    t[1] = caml_call2(Base_List[12], t[1], _e_);
    return 0;
   }
   function of_query_response_tracker(qrt){
    function _c_(query){
     var response = caml_call1(Svar[1], 0);
     qrt[1] = [0, [0, query, response], qrt[1]];
     return response;
    }
    return function(_d_){return of_svar_fun(_c_, _d_);};
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ui_effect);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_effect);
   var
    Ui_effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Never,
       lazy,
       print_s,
       of_sync_fun,
       of_thunk,
       Define,
       Define1,
       [0, eval$1, handle$0, handlers, of_fun],
       Private,
       [0,
        Svar,
        of_svar_fun,
        [0, create$0, maybe_respond, queries_pending_response],
        of_query_response_tracker]];
   runtime.caml_register_global(34, Ui_effect, cst_Ui_effect$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
