// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_httpaf__lwt_unix
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf_lwt_unix = [0];
   runtime.caml_register_global
    (0, Dream_httpaf_lwt_unix, "Dream_httpaf__lwt_unix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf__lwt_unix__Httpaf_lwt_unix
//# unitInfo: Requires: Dream_gluten_lwt_unix__Gluten_lwt_unix, Dream_httpaf__lwt__Httpaf_lwt, Lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_http_1_1 = "http/1.1";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_gluten_lwt_unix_Gluten_l =
      global_data.Dream_gluten_lwt_unix__Gluten_lwt_unix,
    Lwt = global_data.Lwt,
    Dream_httpaf_lwt_Httpaf_lwt = global_data.Dream_httpaf__lwt__Httpaf_lwt,
    _a_ = Dream_gluten_lwt_unix_Gluten_l[1],
    include = caml_call1(Dream_httpaf_lwt_Httpaf_lwt[1], [0, _a_[1], _a_[2]]),
    create_connection_handler = include[1],
    _b_ = Dream_gluten_lwt_unix_Gluten_l[1][3],
    include$0 =
      caml_call1(Dream_httpaf_lwt_Httpaf_lwt[1], [0, _b_[1], _b_[2]]),
    create_connection_handler$0 = include$0[1],
    _j_ = [0, [0, cst_http_1_1, 0]],
    _h_ = [0, [0, cst_http_1_1, 0]],
    _e_ = [0, [0, cst_http_1_1, 0]],
    _c_ = [0, [0, cst_http_1_1, 0]];
   function create_connection_handler_with
   (certfile, keyfile, config, request_handler, error_handler){
    var _r_ = Dream_gluten_lwt_unix_Gluten_l[1][3][3];
    return function(client_addr, socket){
     function _s_(tls_server){
      return caml_call5
              (create_connection_handler$0,
               config,
               request_handler,
               error_handler,
               client_addr,
               tls_server);
     }
     var
      _t_ =
        caml_call2
         (caml_call3(_r_, _c_, certfile, keyfile), client_addr, socket);
     return caml_call2(Lwt[33][1], _t_, _s_);};
   }
   var
    TLS = [0, create_connection_handler$0, create_connection_handler_with],
    _d_ = Dream_gluten_lwt_unix_Gluten_l[1][4],
    include$1 =
      caml_call1(Dream_httpaf_lwt_Httpaf_lwt[1], [0, _d_[1], _d_[2]]),
    create_connection_handler$1 = include$1[1];
   function create_connection_handler_with$0
   (certfile, keyfile, config, request_handler, error_handler){
    var _o_ = Dream_gluten_lwt_unix_Gluten_l[1][4][3];
    return function(client_addr, socket){
     function _p_(ssl_server){
      return caml_call5
              (create_connection_handler$1,
               config,
               request_handler,
               error_handler,
               client_addr,
               ssl_server);
     }
     var
      _q_ =
        caml_call2
         (caml_call3(_o_, _e_, certfile, keyfile), client_addr, socket);
     return caml_call2(Lwt[33][1], _q_, _p_);};
   }
   var
    SSL = [0, create_connection_handler$1, create_connection_handler_with$0],
    Server = [0, create_connection_handler, TLS, SSL],
    _f_ = Dream_gluten_lwt_unix_Gluten_l[2],
    include$2 =
      caml_call1
       (Dream_httpaf_lwt_Httpaf_lwt[2],
        [0, _f_[1], _f_[2], _f_[3], _f_[4], _f_[5]]),
    request = include$2[1],
    shutdown = include$2[2],
    is_closed = include$2[3],
    upgrade = include$2[4],
    create_connection = include$2[5],
    _g_ = Dream_gluten_lwt_unix_Gluten_l[2][6],
    include$3 =
      caml_call1
       (Dream_httpaf_lwt_Httpaf_lwt[2],
        [0, _g_[1], _g_[2], _g_[3], _g_[4], _g_[5]]),
    request$0 = include$3[1],
    shutdown$0 = include$3[2],
    is_closed$0 = include$3[3],
    upgrade$0 = include$3[4],
    create_connection$0 = include$3[5];
   function create_connection_with_default(config, socket){
    function _m_(tls_client){
     return caml_call2(create_connection$0, config, tls_client);
    }
    var
     _n_ = caml_call2(Dream_gluten_lwt_unix_Gluten_l[2][6][6], _h_, socket);
    return caml_call2(Lwt[33][1], _n_, _m_);
   }
   var
    _i_ = Dream_gluten_lwt_unix_Gluten_l[2][7],
    include$4 =
      caml_call1
       (Dream_httpaf_lwt_Httpaf_lwt[2],
        [0, _i_[1], _i_[2], _i_[3], _i_[4], _i_[5]]),
    request$1 = include$4[1],
    shutdown$1 = include$4[2],
    is_closed$1 = include$4[3],
    upgrade$1 = include$4[4],
    create_connection$1 = include$4[5];
   function create_connection_with_default$0(config, socket){
    function _k_(ssl_client){
     return caml_call2(create_connection$1, config, ssl_client);
    }
    var
     _l_ = caml_call2(Dream_gluten_lwt_unix_Gluten_l[2][7][6], _j_, socket);
    return caml_call2(Lwt[33][1], _l_, _k_);
   }
   var
    Dream_httpaf_lwt_unix_Httpaf_l =
      [0,
       Server,
       [0,
        create_connection,
        request,
        shutdown,
        is_closed,
        upgrade,
        [0,
         create_connection$0,
         request$0,
         shutdown$0,
         is_closed$0,
         upgrade$0,
         create_connection_with_default],
        [0,
         create_connection$1,
         request$1,
         shutdown$1,
         is_closed$1,
         upgrade$1,
         create_connection_with_default$0]]];
   runtime.caml_register_global
    (7,
     Dream_httpaf_lwt_unix_Httpaf_l,
     "Dream_httpaf__lwt_unix__Httpaf_lwt_unix");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJkcmVhbV9odHRwYWZfX2x3dF91bml4LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJjcmVhdGVfY29ubmVjdGlvbl9oYW5kbGVyX3dpdGgiLCJjZXJ0ZmlsZSIsImtleWZpbGUiLCJjb25maWciLCJyZXF1ZXN0X2hhbmRsZXIiLCJlcnJvcl9oYW5kbGVyIiwiY2xpZW50X2FkZHIiLCJzb2NrZXQiLCJ0bHNfc2VydmVyIiwiY3JlYXRlX2Nvbm5lY3Rpb25faGFuZGxlcl93aXRoJDAiLCJzc2xfc2VydmVyIiwiY3JlYXRlX2Nvbm5lY3Rpb25fd2l0aF9kZWZhdWx0IiwidGxzX2NsaWVudCIsImNyZWF0ZV9jb25uZWN0aW9uX3dpdGhfZGVmYXVsdCQwIiwic3NsX2NsaWVudCJdLCJzb3VyY2VzIjpbIi9ob21lL2xpYW0tY2FycGVudGVyLy5vcGFtL3BlcnNvbmFsLXNpdGUvbGliL2RyZWFtLWh0dHBhZi9kcmVhbS1odHRwYWZfLWx3dC11bml4L2h0dHBhZl9sd3RfdW5peC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFnRFFBO0lBQ0RDLFVBQ0FDLFNBQ0FDLFFBQ0FDLGlCQUNBQztJQUNEO0lBR0EsZ0JBQUlDLGFBQVlDO2tCQUVOQztNQUNOLE9BQUE7O2VBVEhMO2VBQ0FDO2VBQ0FDO2VBSUdDO2VBRU1FO0tBTU07S0FQZDs7UUFBQTsrQkFURFAsVUFDQUMsVUFPR0ksYUFBWUM7S0FFVixPQUFBLGlDQU1VO0dBQUE7R0FwQlA7SUFBQSx1Q0FHUFA7Ozs7O1lBdUJBUztJQUNEUixVQUNBQyxTQUNBQyxRQUNBQyxpQkFDQUM7SUFDRDtJQUdBLGdCQUFJQyxhQUFZQztrQkFFTkc7TUFDTixPQUFBOztlQVRIUDtlQUNBQztlQUNBQztlQUlHQztlQUVNSTtLQU1NO0tBUGQ7O1FBQUE7K0JBVERULFVBQ0FDLFVBT0dJLGFBQVlDO0tBRVYsT0FBQSxpQ0FNVTtHQUFBO0dBcEJQO0lBQUEsdUNBR1BFO0lBN0JROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUF3RFJFLCtCQUFnQ1IsUUFBT0k7aUJBSWpDSztLQUNOLE9BQUEsZ0NBTGdDVCxRQUkxQlM7SUFDOEI7SUFKdEM7V0FBQSx5REFEeUNMO0lBSXJDLE9BQUE7R0FDa0M7Ozs7Ozs7Ozs7OztZQU1wQ00saUNBQWdDVixRQUFPSTtpQkFJakNPO0tBQ04sT0FBQSxnQ0FMZ0NYLFFBSTFCVztJQUM4QjtJQUp0QztXQUFBLHlEQUR5Q1A7SUFJckMsT0FBQTtHQUNrQzs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FoQnBDSTs7Ozs7OztTQVdBRTs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDb3B5cmlnaHQgKGMpIDIwMTggSW5oYWJpdGVkIFR5cGUgTExDLlxuICAgIENvcHlyaWdodCAoYykgMjAxOCBBbnRvbiBCYWNoaW5cbiAgICBDb3B5cmlnaHQgKGMpIDIwMTkgQW50w7NuaW8gTnVubyBNb250ZWlyb1xuXG4gICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuICAgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xuICAgIGFyZSBtZXQ6XG5cbiAgICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuICAgIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBhdXRob3Igbm9yIHRoZSBuYW1lcyBvZiBoaXMgY29udHJpYnV0b3JzXG4gICAgICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4gICAgICAgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiAgICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT05UUklCVVRPUlMgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTU1xuICAgIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gICAgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICAgIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUlxuICAgIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAgICBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EU1xuICAgIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKVxuICAgIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCxcbiAgICBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU5cbiAgICBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiAgICBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSopXG5cbm1vZHVsZSBHbHV0ZW4gPSBEcmVhbV9nbHV0ZW4uR2x1dGVuXG5tb2R1bGUgR2x1dGVuX2x3dF91bml4ID0gRHJlYW1fZ2x1dGVuX2x3dF91bml4LkdsdXRlbl9sd3RfdW5peFxubW9kdWxlIEh0dHBhZiA9IERyZWFtX2h0dHBhZl8uSHR0cGFmXG5tb2R1bGUgSHR0cGFmX2x3dCA9IERyZWFtX2h0dHBhZl9fbHd0Lkh0dHBhZl9sd3Rcblxub3BlbiBMd3QuSW5maXhcblxubW9kdWxlIFNlcnZlciA9IHN0cnVjdFxuICBpbmNsdWRlIEh0dHBhZl9sd3QuU2VydmVyIChHbHV0ZW5fbHd0X3VuaXguU2VydmVyKVxuXG4gIG1vZHVsZSBUTFMgPSBzdHJ1Y3RcbiAgICBpbmNsdWRlIEh0dHBhZl9sd3QuU2VydmVyIChHbHV0ZW5fbHd0X3VuaXguU2VydmVyLlRMUylcblxuICAgIGxldCBjcmVhdGVfY29ubmVjdGlvbl9oYW5kbGVyX3dpdGhfZGVmYXVsdFxuICAgICAgfmNlcnRmaWxlXG4gICAgICB+a2V5ZmlsZVxuICAgICAgP2NvbmZpZ1xuICAgICAgfnJlcXVlc3RfaGFuZGxlclxuICAgICAgfmVycm9yX2hhbmRsZXIgPVxuICAgICAgbGV0IG1ha2VfdGxzX3NlcnZlciA9XG4gICAgICAgIEdsdXRlbl9sd3RfdW5peC5TZXJ2ZXIuVExTLmNyZWF0ZV9kZWZhdWx0IH5jZXJ0ZmlsZSB+a2V5ZmlsZVxuICAgICAgaW5cbiAgICAgIGZ1biBjbGllbnRfYWRkciBzb2NrZXQgLT5cbiAgICAgICAgbWFrZV90bHNfc2VydmVyIGNsaWVudF9hZGRyIH5hbHBuX3Byb3RvY29sczpbXCJodHRwLzEuMVwiXSBzb2NrZXRcbiAgICAgICAgPj49IGZ1biB0bHNfc2VydmVyIC0+XG4gICAgICAgICAgY3JlYXRlX2Nvbm5lY3Rpb25faGFuZGxlclxuICAgICAgICAgICAgP2NvbmZpZ1xuICAgICAgICAgICAgfnJlcXVlc3RfaGFuZGxlclxuICAgICAgICAgICAgfmVycm9yX2hhbmRsZXJcbiAgICAgICAgICAgIGNsaWVudF9hZGRyXG4gICAgICAgICAgICB0bHNfc2VydmVyXG4gIGVuZFxuXG4gIG1vZHVsZSBTU0wgPSBzdHJ1Y3RcbiAgICBpbmNsdWRlIEh0dHBhZl9sd3QuU2VydmVyIChHbHV0ZW5fbHd0X3VuaXguU2VydmVyLlNTTClcblxuICAgIGxldCBjcmVhdGVfY29ubmVjdGlvbl9oYW5kbGVyX3dpdGhfZGVmYXVsdFxuICAgICAgfmNlcnRmaWxlXG4gICAgICB+a2V5ZmlsZVxuICAgICAgP2NvbmZpZ1xuICAgICAgfnJlcXVlc3RfaGFuZGxlclxuICAgICAgfmVycm9yX2hhbmRsZXIgPVxuICAgICAgbGV0IG1ha2Vfc3NsX3NlcnZlciA9XG4gICAgICAgIEdsdXRlbl9sd3RfdW5peC5TZXJ2ZXIuU1NMLmNyZWF0ZV9kZWZhdWx0IH5jZXJ0ZmlsZSB+a2V5ZmlsZVxuICAgICAgaW5cbiAgICAgIGZ1biBjbGllbnRfYWRkciBzb2NrZXQgLT5cbiAgICAgICAgbWFrZV9zc2xfc2VydmVyIH5hbHBuX3Byb3RvY29sczpbXCJodHRwLzEuMVwiXSBjbGllbnRfYWRkciBzb2NrZXRcbiAgICAgICAgPj49IGZ1biBzc2xfc2VydmVyIC0+XG4gICAgICAgICAgY3JlYXRlX2Nvbm5lY3Rpb25faGFuZGxlclxuICAgICAgICAgICAgP2NvbmZpZ1xuICAgICAgICAgICAgfnJlcXVlc3RfaGFuZGxlclxuICAgICAgICAgICAgfmVycm9yX2hhbmRsZXJcbiAgICAgICAgICAgIGNsaWVudF9hZGRyXG4gICAgICAgICAgICBzc2xfc2VydmVyXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBDbGllbnQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBIdHRwYWZfbHd0LkNsaWVudCAoR2x1dGVuX2x3dF91bml4LkNsaWVudClcblxuICBtb2R1bGUgVExTID0gc3RydWN0XG4gICAgaW5jbHVkZSBIdHRwYWZfbHd0LkNsaWVudCAoR2x1dGVuX2x3dF91bml4LkNsaWVudC5UTFMpXG5cbiAgICBsZXQgY3JlYXRlX2Nvbm5lY3Rpb25fd2l0aF9kZWZhdWx0ID9jb25maWcgc29ja2V0ID1cbiAgICAgIEdsdXRlbl9sd3RfdW5peC5DbGllbnQuVExTLmNyZWF0ZV9kZWZhdWx0XG4gICAgICAgIH5hbHBuX3Byb3RvY29sczpbXCJodHRwLzEuMVwiXVxuICAgICAgICBzb2NrZXRcbiAgICAgID4+PSBmdW4gdGxzX2NsaWVudCAtPlxuICAgICAgICBjcmVhdGVfY29ubmVjdGlvbiA/Y29uZmlnIHRsc19jbGllbnRcbiAgZW5kXG5cbiAgbW9kdWxlIFNTTCA9IHN0cnVjdFxuICAgIGluY2x1ZGUgSHR0cGFmX2x3dC5DbGllbnQgKEdsdXRlbl9sd3RfdW5peC5DbGllbnQuU1NMKVxuXG4gICAgbGV0IGNyZWF0ZV9jb25uZWN0aW9uX3dpdGhfZGVmYXVsdCA/Y29uZmlnIHNvY2tldCA9XG4gICAgICBHbHV0ZW5fbHd0X3VuaXguQ2xpZW50LlNTTC5jcmVhdGVfZGVmYXVsdFxuICAgICAgICB+YWxwbl9wcm90b2NvbHM6W1wiaHR0cC8xLjFcIl1cbiAgICAgICAgc29ja2V0XG4gICAgICA+Pj0gZnVuIHNzbF9jbGllbnQgLT5cbiAgICAgICAgY3JlYXRlX2Nvbm5lY3Rpb24gP2NvbmZpZyBzc2xfY2xpZW50XG4gIGVuZFxuZW5kXG4iXX0=
