// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bounded_int_table
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Array, Core__Binable, Core__Int, Core__List, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bounded_int_table$0 = "Bounded_int_table",
    cst = "_",
    cst_alist$1 = "alist",
    cst_bounded_int_table$0 = "bounded_int_table",
    cst_bounded_int_table_src_boun$5 =
      "bounded_int_table/src/bounded_int_table.ml",
    cst_bounded_int_table_src_boun$6 =
      "bounded_int_table/src/bounded_int_table.ml.Serialized.t",
    cst_data$3 = "data",
    cst_key$1 = "key",
    cst_num_keys$1 = "num_keys",
    cst_t$3 = "t",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_032 = cst_bounded_int_table_src_boun$6,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Core_Int = global_data.Core__Int,
    Core_Binable = global_data.Core__Binable,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Assert_failure = global_data.Assert_failure,
    Core_Array = global_data.Core__Array,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bounded_int_table$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bounded_int_table$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_bounded_int_table_src_boun$5);
   caml_call2
    (Ppx_inline_test_lib[6], cst_bounded_int_table$0, "bounded_int_table.ml");
   var
    cst_t$2 = cst_t$3,
    cst_data$1 = cst_data$3,
    cst_bounded_int_table_src_boun$3 =
      "bounded_int_table/src/bounded_int_table.ml:320:31",
    cst_data$2 = cst_data$3,
    cst_t$1 = cst_t$3,
    cst_bounded_int_table_src_boun$4 =
      "bounded_int_table/src/bounded_int_table.ml:320:8",
    _S_ = [0, cst],
    cst_Bounded_int_table_remove_b = "Bounded_int_table.remove bug",
    _T_ = [0, cst_bounded_int_table_src_boun$5, 253, 7014, 7031],
    cst_Bounded_int_table_add_exn_ =
      "Bounded_int_table.add_exn of key whose index is already present",
    _R_ = [0, cst_bounded_int_table_src_boun$5, 233, 6465, 6477],
    _P_ = [0, cst],
    cst_Bounded_int_table_find_exn =
      "Bounded_int_table.find_exn got unknown key",
    _Q_ = [0, cst_bounded_int_table_src_boun$5, 184, 5252, 5264],
    _N_ = [0, "Should_be_between_0_and"],
    cst_key_s_index_out_of_range = "key's index out of range",
    _O_ = [0, cst_bounded_int_table_src_boun$5, 166, 4816, 4828],
    _L_ = [0, cst_alist$1],
    _M_ = [0, cst_num_keys$1],
    cst_alist$0 = cst_alist$1,
    cst_num_keys$0 = cst_num_keys$1,
    cst_bounded_int_table_src_boun$2 = cst_bounded_int_table_src_boun$6,
    cst_t$0 = cst_t$3,
    _x_ = [0, cst_bounded_int_table_src_boun$5, 135, 14],
    _w_ = [0, cst_bounded_int_table_src_boun$5, 120, 16],
    cst_num_keys_must_be_nonnegati = "num_keys must be nonnegative",
    _v_ = [0, cst_bounded_int_table_src_boun$5, 88, 2872, 2895],
    _j_ = [0, cst],
    _o_ = [0, cst_bounded_int_table_src_boun$5, 60, 28],
    _p_ = [0, cst_bounded_int_table_src_boun$5, 61, 13],
    _n_ = [0, cst_bounded_int_table_src_boun$5, 53, 8],
    _l_ = [0, cst_bounded_int_table_src_boun$5, 56, 26],
    _m_ = [0, cst_bounded_int_table_src_boun$5, 55, 19],
    _u_ = [0, cst_bounded_int_table_src_boun$5, 45, 4],
    _t_ = [0, cst_bounded_int_table_src_boun$5, 46, 4],
    _s_ = [0, cst_bounded_int_table_src_boun$5, 47, 4],
    _r_ = [0, cst_bounded_int_table_src_boun$5, 70, 4],
    _q_ = [0, cst_bounded_int_table_src_boun$5, 71, 4],
    cst_invariant_failed = "invariant failed",
    _k_ = [0, cst_bounded_int_table_src_boun$5, 76, 2577, 2589],
    _d_ = [0, "defined_entries"],
    _e_ = [0, "entries_by_key"],
    _f_ = [0, "length"],
    _g_ = [0, "key_to_int"],
    _h_ = [0, "sexp_of_key"],
    _i_ = [0, cst_num_keys$1],
    _a_ = [0, "defined_entries_index"],
    _b_ = [0, cst_data$3],
    _c_ = [0, cst_key$1],
    cst_data = cst_data$3,
    cst_bounded_int_table_src_boun =
      "bounded_int_table/src/bounded_int_table.ml:146:22",
    cst_key = cst_key$1,
    cst_bounded_int_table_src_boun$0 =
      "bounded_int_table/src/bounded_int_table.ml:146:15",
    cst_alist = cst_alist$1,
    cst_num_keys = cst_num_keys$1,
    cst_data$0 = cst_data$3,
    cst_key$0 = cst_key$1,
    cst_t = cst_t$3,
    cst_bounded_int_table_src_boun$1 =
      "bounded_int_table/src/bounded_int_table.ml:144:2",
    cst_bounded_int_table = cst_bounded_int_table$0,
    cst_Bounded_int_table = cst_Bounded_int_table$0;
   function sexp_of_t(of_key_001, of_data_002, param){
    var
     key_004 = param[1],
     data_006 = param[2],
     defined_entries_index_008 = param[3],
     arg_009 = caml_call1(Core[389], defined_entries_index_008),
     bnds_003 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(of_data_002, data_006),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_003],
     arg_005 = caml_call1(of_key_001, key_004),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003$0];
    return [1, bnds_003$1];
   }
   function length(r){return r[4];}
   function num_keys(r){return r[1];}
   function sexp_of_t_detailed(of_key_010, of_data_011, param){
    var
     sexp_of_key_015 = param[2],
     num_keys_013 = param[1],
     length_019 = param[4],
     defined_entries_023 = param[6],
     entries_by_key_021 = param[5],
     bnds_012 = 0;
    function _be_(_bo_){return sexp_of_t(of_key_010, of_data_011, _bo_);}
    var
     _bf_ = caml_call1(Core[515], _be_),
     arg_024 = caml_call2(Core[301], _bf_, defined_entries_023),
     bnds_012$0 = [0, [1, [0, _d_, [0, arg_024, 0]]], bnds_012];
    function _bg_(_bn_){return sexp_of_t(of_key_010, of_data_011, _bn_);}
    var
     _bh_ = caml_call1(Core[515], _bg_),
     arg_022 = caml_call2(Core[301], _bh_, entries_by_key_021),
     bnds_012$1 = [0, [1, [0, _e_, [0, arg_022, 0]]], bnds_012$0],
     arg_020 = caml_call1(Core[389], length_019),
     bnds_012$2 = [0, [1, [0, _f_, [0, arg_020, 0]]], bnds_012$1];
    function _bi_(_bm_){return 0;}
    var
     arg_018 = caml_call1(Sexplib0_Sexp_conv[24], _bi_),
     bnds_012$3 = [0, [1, [0, _g_, [0, arg_018, 0]]], bnds_012$2];
    function _bj_(param){
     function _bk_(_bl_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _bk_);
    }
    var
     arg_016 = caml_call2(Core[515], _bj_, sexp_of_key_015),
     bnds_012$4 = [0, [1, [0, _h_, [0, arg_016, 0]]], bnds_012$3],
     arg_014 = caml_call1(Core[389], num_keys_013),
     bnds_012$5 = [0, [1, [0, _i_, [0, arg_014, 0]]], bnds_012$4];
    return [1, bnds_012$5];
   }
   function sexp_of_key(t){
    var match = t[2];
    if(! match)
     return function(key){
      var _bd_ = caml_call1(t[3], key);
      return caml_call1(Core_Int[77], _bd_);};
    var f = match[1];
    return f;
   }
   function invariant(invariant_key, invariant_data, t){
    try{
     var num_keys = t[1];
     if(! caml_call2(Core[90], num_keys, t[5].length - 1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
     if(! caml_call2(Core[90], num_keys, t[6].length - 1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
     if(caml_call2(Core[89], 0, t[4]) && caml_call2(Core[89], t[4], num_keys)){
      var
       _a4_ =
         function(i, param){
          if(! param) return 0;
          var entry = param[1];
          caml_call1(invariant_key, entry[1]);
          caml_call1(invariant_data, entry[2]);
          var _bb_ = caml_call1(t[3], entry[1]);
          if(! caml_call2(Core[90], i, _bb_))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
          var _bc_ = entry[3], match = caml_check_bound(t[6], _bc_)[1 + _bc_];
          if(! match)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
          var entry$0 = match[1];
          if(entry === entry$0) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
         };
      caml_call2(Core_Array[50], t[5], _a4_);
      var
       _a5_ =
         function(i, entry_opt){
          if(caml_call2(Core[92], i, t[4])){
           if(entry_opt){
            var entry = entry_opt[1];
            if(caml_call2(Core[90], i, entry[3])) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
           }
          }
          else if(! entry_opt) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
         };
      caml_call2(Core_Array[50], t[6], _a5_);
      var
       get_entries =
         function(array){
          var a = caml_call1(Core_Array[90], array);
          function _a__(entry$0, entry){
           var
            _a$_ = caml_call1(t[3], entry[1]),
            _ba_ = caml_call1(t[3], entry$0[1]);
           return caml_call2(Core_Int[88], _ba_, _a$_);
          }
          caml_call4(Core_Array[81], 0, 0, a, _a__);
          return a;
         },
       entries = get_entries(t[5]),
       entries$0 = get_entries(t[6]);
      if(! caml_call2(Core[90], t[4], entries.length - 1))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
      var _a6_ = function(_a9_, _a8_){return _a9_ === _a8_ ? 1 : 0;};
      if(! caml_call3(Core_Array[120], _a6_, entries, entries$0))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
      var _a7_ = 0;
      return _a7_;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      sexp_of_key$0 = sexp_of_key(t),
      _a3_ =
        function(param){
         var
          arg1_026 = param[2],
          arg0_025 = param[1],
          res0_027 = caml_call1(Core[625], arg0_025),
          res1_028 =
            sexp_of_t_detailed
             (sexp_of_key$0, function(param){return _j_;}, arg1_026);
         return [1, [0, res0_027, [0, res1_028, 0]]];
        };
     return caml_call5
             (Core[247], 0, _k_, cst_invariant_failed, [0, exn, t], _a3_);
    }
   }
   var debug = [0, 0];
   function check_invariant(t){
    var _aZ_ = debug[1];
    if(! _aZ_) return _aZ_;
    function _a0_(_a2_){return 0;}
    return invariant(function(_a1_){return 0;}, _a0_, t);
   }
   function is_empty(t){return caml_call2(Core[90], t[4], 0);}
   function create(sexp_of_key, num_keys, key_to_int, param){
    if(caml_call2(Core[92], num_keys, 0))
     caml_call5
      (Core[247], 0, _v_, cst_num_keys_must_be_nonnegati, num_keys, Core[389]);
    var
     _aY_ = caml_call2(Core_Array[63], num_keys, 0),
     t =
       [0,
        num_keys,
        sexp_of_key,
        key_to_int,
        0,
        caml_call2(Core_Array[63], num_keys, 0),
        _aY_];
    check_invariant(t);
    return t;
   }
   function fold(t, init, f){
    var i = 0, ac = init;
    for(;;){
     if(caml_call2(Core[90], i, t[4])) return ac;
     var match = caml_check_bound(t[6], i)[1 + i];
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
     var
      entry = match[1],
      ac$0 = caml_call3(f, entry[1], entry[2], ac),
      i$0 = i + 1 | 0,
      i = i$0,
      ac = ac$0;
    }
   }
   function iteri(t, f){
    return fold
            (t,
             0,
             function(key, data, param){return caml_call2(f, key, data);});
   }
   function iter(t, f){
    return iteri(t, function(param, data){return caml_call1(f, data);});
   }
   function iter_keys(t, f){
    return iteri(t, function(key, param){return caml_call1(f, key);});
   }
   function map_entries(t, f){
    return fold
            (t,
             0,
             function(key, data, ac){
              return [0, caml_call2(f, key, data), ac];
             });
   }
   function to_alist(t){
    return map_entries(t, function(key, data){return [0, key, data];});
   }
   function clear(t){
    var _aV_ = t[4] - 1 | 0, _aU_ = 0;
    if(_aV_ >= 0){
     var i = _aU_;
     for(;;){
      var match = caml_check_bound(t[6], i)[1 + i];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
      var entry = match[1];
      caml_check_bound(t[6], i)[1 + i] = 0;
      var _aW_ = caml_call1(t[3], entry[1]);
      caml_check_bound(t[5], _aW_)[1 + _aW_] = 0;
      var _aX_ = i + 1 | 0;
      if(_aV_ === i) break;
      var i = _aX_;
     }
    }
    t[4] = 0;
    return 0;
   }
   var
    _y_ = caml_call1(Bin_shape[3][1], cst_data),
    _z_ = caml_call1(Bin_shape[4][1], cst_bounded_int_table_src_boun),
    _A_ = [0, caml_call2(Bin_prot_Shape[11], _z_, _y_), 0],
    _B_ = caml_call1(Bin_shape[3][1], cst_key),
    _C_ = caml_call1(Bin_shape[4][1], cst_bounded_int_table_src_boun$0),
    _D_ = [0, caml_call2(Bin_prot_Shape[11], _C_, _B_), _A_],
    _E_ = caml_call1(Bin_prot_Shape[3], _D_),
    _F_ = [0, [0, cst_alist, caml_call1(Core[456], _E_)], 0],
    _G_ =
      caml_call1(Bin_prot_Shape[4], [0, [0, cst_num_keys, Core[372]], _F_]),
    _H_ = [0, caml_call1(Bin_shape[3][1], cst_data$0), 0],
    _I_ = [0, caml_call1(Bin_shape[3][1], cst_key$0), _H_],
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _I_, _G_], 0],
    _K_ = caml_call1(Bin_shape[4][1], cst_bounded_int_table_src_boun$1),
    group = caml_call2(Bin_prot_Shape[2], _K_, _J_);
   function to_serialized(t){var _aT_ = to_alist(t); return [0, t[1], _aT_];}
   function sexp_of_t$0(sexp_of_key, sexp_of_data, t){
    var
     param = to_serialized(t),
     alist_044 = param[2],
     num_keys_042 = param[1],
     bnds_041 = 0;
    function _aS_(param){
     var
      arg1_047 = param[2],
      arg0_046 = param[1],
      res0_048 = caml_call1(sexp_of_key, arg0_046),
      res1_049 = caml_call1(sexp_of_data, arg1_047);
     return [1, [0, res0_048, [0, res1_049, 0]]];
    }
    var
     arg_045 = caml_call2(Core[472], _aS_, alist_044),
     bnds_041$0 = [0, [1, [0, _L_, [0, arg_045, 0]]], bnds_041],
     arg_043 = caml_call1(Core[389], num_keys_042),
     bnds_041$1 = [0, [1, [0, _M_, [0, arg_043, 0]]], bnds_041$0];
    return [1, bnds_041$1];
   }
   function keys(t){return map_entries(t, function(key, param){return key;});}
   function data(t){
    return map_entries(t, function(param, data){return data;});
   }
   function entry_opt(t, key){
    var index = caml_call1(t[3], key);
    try{var _aQ_ = caml_check_bound(t[5], index)[1 + index]; return _aQ_;}
    catch(_aR_){
     var
      sexp_of_key$0 = sexp_of_key(t),
      _aP_ =
        function(param){
         var
          arg2_053 = param[3],
          arg1_052 = param[2],
          arg0_051 = param[1],
          res0_054 = caml_call1(sexp_of_key$0, arg0_051),
          res1_055 = caml_call1(Core[389], arg1_052),
          v_050 = arg2_053[2],
          res2_056 = [1, [0, _N_, [0, caml_call1(Core[389], v_050), 0]]];
         return [1, [0, res0_054, [0, res1_055, [0, res2_056, 0]]]];
        };
     return caml_call5
             (Core[247],
              0,
              _O_,
              cst_key_s_index_out_of_range,
              [0, key, index, [0, -958795519, t[1] - 1 | 0]],
              _aP_);
    }
   }
   function find(t, key){
    var match = entry_opt(t, key);
    if(! match) return 0;
    var e = match[1];
    return [0, e[2]];
   }
   function find_exn(t, key){
    var match = entry_opt(t, key);
    if(match){var entry = match[1]; return entry[2];}
    var sexp_of_key$0 = sexp_of_key(t);
    function _aO_(param){
     var
      arg1_058 = param[2],
      arg0_057 = param[1],
      res0_059 = caml_call1(sexp_of_key$0, arg0_057),
      res1_060 =
        sexp_of_t$0(sexp_of_key$0, function(param){return _P_;}, arg1_058);
     return [1, [0, res0_059, [0, res1_060, 0]]];
    }
    return caml_call5
            (Core[247],
             0,
             _Q_,
             cst_Bounded_int_table_find_exn,
             [0, key, t],
             _aO_);
   }
   function mem(t, key){
    var _aN_ = entry_opt(t, key);
    return caml_call1(Core[253], _aN_);
   }
   function add_assuming_not_there(t, key, data){
    var
     defined_entries_index = t[4],
     entry_opt = [0, [0, key, data, defined_entries_index]],
     _aM_ = caml_call1(t[3], key);
    caml_check_bound(t[5], _aM_)[1 + _aM_] = entry_opt;
    caml_check_bound(t[6], defined_entries_index)[1 + defined_entries_index] = entry_opt;
    t[4] = t[4] + 1 | 0;
    return check_invariant(t);
   }
   function find_or_add(t, key, default$0){
    var match = entry_opt(t, key);
    if(match){var e = match[1]; return e[2];}
    var data = caml_call1(default$0, 0);
    add_assuming_not_there(t, key, data);
    return data;
   }
   function set(t, key, data){
    var match = entry_opt(t, key);
    if(! match) return add_assuming_not_there(t, key, data);
    var entry = match[1];
    entry[1] = key;
    entry[2] = data;
    return 0;
   }
   function add(t, key, data){
    var match = entry_opt(t, key);
    if(match){var entry = match[1]; return [0, -1024851605, entry[2]];}
    add_assuming_not_there(t, key, data);
    return 17724;
   }
   function add_exn(t, key, data){
    if(typeof add(t, key, data) === "number") return 0;
    var sexp_of_key$0 = sexp_of_key(t);
    function _aK_(param){
     var
      arg1_062 = param[2],
      arg0_061 = param[1],
      res0_063 = caml_call1(sexp_of_key$0, arg0_061),
      res1_064 = caml_call1(Core[389], arg1_062);
     return [1, [0, res0_063, [0, res1_064, 0]]];
    }
    var _aL_ = [0, key, caml_call1(t[3], key)];
    return caml_call5
            (Core[247], 0, _R_, cst_Bounded_int_table_add_exn_, _aL_, _aK_);
   }
   function remove(t, key){
    var match = entry_opt(t, key);
    if(match){
     var entry = match[1];
     t[4] = t[4] - 1 | 0;
     var _aI_ = caml_call1(t[3], key);
     caml_check_bound(t[5], _aI_)[1 + _aI_] = 0;
     var hole = entry[3], last = t[4];
     if(caml_call2(Core[92], hole, last)){
      var entry_to_put_in_hole_opt = caml_check_bound(t[6], last)[1 + last];
      if(entry_to_put_in_hole_opt){
       var entry_to_put_in_hole = entry_to_put_in_hole_opt[1];
       caml_check_bound(t[6], hole)[1 + hole] = entry_to_put_in_hole_opt;
       entry_to_put_in_hole[3] = hole;
      }
      else{
       var
        sexp_of_key$0 = sexp_of_key(t),
        _aJ_ =
          function(param){
           var
            arg2_067 = param[3],
            arg1_066 = param[2],
            arg0_065 = param[1],
            res0_068 = caml_call1(sexp_of_key$0, arg0_065),
            res1_069 = caml_call1(Core[389], arg1_066),
            res2_070 =
              sexp_of_t_detailed
               (sexp_of_key$0, function(param){return _S_;}, arg2_067);
           return [1, [0, res0_068, [0, res1_069, [0, res2_070, 0]]]];
          };
       caml_call5
        (Core[247],
         0,
         _T_,
         cst_Bounded_int_table_remove_b,
         [0, key, last, t],
         _aJ_);
      }
     }
     caml_check_bound(t[6], last)[1 + last] = 0;
    }
    return check_invariant(t);
   }
   function existsi(t, f){
    function _aG_(r){
     iteri
      (t,
       function(key, data){
        var _aH_ = caml_call2(f, key, data);
        return _aH_ ? caml_call1(r, 1) : _aH_;
       });
     return 0;
    }
    return caml_call1(Core[268], _aG_);
   }
   function exists(t, f){
    return existsi(t, function(param, data){return caml_call1(f, data);});
   }
   function for_alli(t, f){
    return 1
           -
            existsi
             (t, function(key, data){return 1 - caml_call2(f, key, data);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, data){return caml_call1(f, data);});
   }
   function equal(key_equal, data_equal, t1, t2){
    var _aE_ = caml_call2(Core[90], t1[4], t2[4]);
    return _aE_
            ? for_alli
              (t1,
               function(key, data){
                var match = entry_opt(t2, key);
                if(! match) return 0;
                var
                 entry = match[1],
                 _aF_ = caml_call2(key_equal, key, entry[1]);
                return _aF_ ? caml_call2(data_equal, data, entry[2]) : _aF_;
               })
            : _aE_;
   }
   function filter_mapi(t, f){
    var
     key_to_int = t[3],
     sexp_of_key = t[2],
     num_keys = t[1],
     result = create(sexp_of_key, num_keys, key_to_int, 0);
    iteri
     (t,
      function(key, data){
       var match = caml_call2(f, key, data);
       if(! match) return 0;
       var data$0 = match[1];
       return add_exn(result, key, data$0);
      });
    return result;
   }
   function ignore_key(f, param, data){return caml_call1(f, data);}
   function filter_map(t, f){
    return filter_mapi
            (t, function(_aC_, _aD_){return ignore_key(f, _aC_, _aD_);});
   }
   function filteri(t, f){
    return filter_mapi
            (t,
             function(key, data){
              return caml_call2(f, key, data) ? [0, data] : 0;
             });
   }
   function filter(t, f){
    return filteri(t, function(_aA_, _aB_){return ignore_key(f, _aA_, _aB_);});
   }
   function filter_keys(t, f){
    return filteri(t, function(key, _az_){return caml_call1(f, key);});
   }
   function mapi(t, f){
    return filter_mapi
            (t, function(key, data){return [0, caml_call2(f, key, data)];});
   }
   function map(t, f){
    return mapi(t, function(_ax_, _ay_){return ignore_key(f, _ax_, _ay_);});
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bounded_int_table);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bounded_int_table);
   var
    Bounded_int_table =
      [0,
       sexp_of_t$0,
       invariant,
       equal,
       create,
       num_keys,
       is_empty,
       keys,
       data,
       find,
       find_exn,
       find_or_add,
       fold,
       iter_keys,
       iter,
       iteri,
       filter_mapi,
       filter_map,
       filter_keys,
       filter,
       filteri,
       mapi,
       map,
       for_alli,
       existsi,
       for_all,
       exists,
       length,
       mem,
       remove,
       set,
       add,
       add_exn,
       to_alist,
       clear,
       function(Key){
        function create$0(num_keys){
         return create([0, Key[10]], num_keys, Key[11], 0);
        }
        function of_alist_exn(alist){
         function _au_(max, param){
          var key = param[1], _aw_ = caml_call1(Key[11], key);
          return caml_call2(Core_Int[90], max, _aw_);
         }
         var
          max_key = caml_call3(Core_List[20], alist, -1, _au_),
          t = create$0(max_key + 1 | 0);
         function _av_(param){
          var data = param[2], key = param[1];
          return add_exn(t, key, data);
         }
         caml_call2(Core_List[19], alist, _av_);
         return t;
        }
        function of_alist(alist){
         function _at_(param){return of_alist_exn(alist);}
         return caml_call2(Core_Or_error[37], 0, _at_);
        }
        function sexp_of_t(sexp_of_data){
         var _ar_ = Key[10];
         return function(_as_){return sexp_of_t$0(_ar_, sexp_of_data, _as_);};
        }
        function of_serialized(param){
         var alist = param[2], num_keys = param[1], t = create$0(num_keys);
         function _aq_(param){
          var data = param[2], key = param[1];
          return add_exn(t, key, data);
         }
         caml_call2(Core_List[19], alist, _aq_);
         return t;
        }
        function t_of_sexp(data_of_sexp, x_038){
         var of_key_029 = Key[9];
         function _ai_(param){
          var alist = param[2][1], num_keys = param[1];
          return [0, num_keys, alist];
         }
         var _aj_ = 0;
         function _ak_(param){
          return caml_string_notequal(param, cst_alist$1)
                  ? caml_string_notequal(param, cst_num_keys$1) ? -1 : 0
                  : 1;
         }
         var _al_ = 0;
         function _am_(sexp_037){
          if(1 === sexp_037[0]){
           var _ao_ = sexp_037[1];
           if(_ao_){
            var _ap_ = _ao_[2];
            if(_ap_ && ! _ap_[2]){
             var
              arg1_034 = _ap_[1],
              arg0_033 = _ao_[1],
              res0_035 = caml_call1(of_key_029, arg0_033),
              res1_036 = caml_call1(data_of_sexp, arg1_034);
             return [0, res0_035, res1_036];
            }
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4], error_source_032, 2, sexp_037);
         }
         var _an_ = [0, cst_alist$0, 1, caml_call1(Core[473], _am_), _al_];
         return of_serialized
                 (caml_call6
                   (Sexplib0_Sexp_conv_record[3],
                    error_source_032,
                    [0, cst_num_keys$0, 1, Core[390], _an_],
                    _ak_,
                    _aj_,
                    _ai_,
                    x_038));
        }
        var
         _X_ = caml_call1(Bin_shape[3][1], cst_data$1),
         _Y_ = caml_call1(Bin_shape[4][1], cst_bounded_int_table_src_boun$3),
         data = caml_call2(Bin_prot_Shape[11], _Y_, _X_),
         key = Key[5],
         _U_ = caml_call1(Bin_shape[2][1], cst_t$0),
         _V_ =
           caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _U_),
             [0, key, [0, data, 0]]),
         _Z_ = [0, caml_call1(Bin_shape[3][1], cst_data$2), 0],
         ___ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _Z_, _V_], 0],
         _$_ = caml_call1(Bin_shape[4][1], cst_bounded_int_table_src_boun$4),
         group$0 = caml_call2(Bin_prot_Shape[2], _$_, ___),
         _W_ = [0, to_serialized, of_serialized];
        function bin_shape_t(data){
         var _ah_ = caml_call1(Bin_shape[2][1], cst_t$2);
         return caml_call1
                 (caml_call2(Bin_prot_Shape[10], group$0, _ah_), [0, data, 0]);
        }
        function bin_size_t(size_of_data, v){
         var
          size_of_key = Key[1],
          v2 = v[2],
          v1 = v[1],
          _ac_ = caml_call1(Core[373], v1),
          size = caml_call2(Bin_prot_Common[23], 0, _ac_);
         function _ad_(param){
          var
           v2 = param[2],
           v1 = param[1],
           _af_ = caml_call1(size_of_key, v1),
           size = caml_call2(Bin_prot_Common[23], 0, _af_),
           _ag_ = caml_call1(size_of_data, v2);
          return caml_call2(Bin_prot_Common[23], size, _ag_);
         }
         var _ae_ = caml_call2(Core[457], _ad_, v2);
         return caml_call2(Bin_prot_Common[23], size, _ae_);
        }
        function bin_write_t(write_data, buf, pos$0, v){
         var
          write_key = Key[2],
          v2 = v[2],
          v1 = v[1],
          pos = caml_call3(Core[375], buf, pos$0, v1);
         function _ab_(buf, pos, param){
          var
           v2 = param[2],
           v1 = param[1],
           pos$0 = caml_call3(write_key, buf, pos, v1);
          return caml_call3(write_data, buf, pos$0, v2);
         }
         return caml_call4(Core[459], _ab_, buf, pos, v2);
        }
        function bin_read_t(of_data, buf, pos_ref, vint){
         return caml_call2
                 (Bin_prot_Common[19],
                  cst_bounded_int_table_src_boun$2,
                  pos_ref[1]);
        }
        function bin_read_t$0(of_data, buf, pos_ref){
         var
          of_key = Key[3],
          v_num_keys = caml_call2(Core[378], buf, pos_ref);
         function _aa_(buf, pos_ref){
          var
           v1 = caml_call2(of_key, buf, pos_ref),
           v2 = caml_call2(of_data, buf, pos_ref);
          return [0, v1, v2];
         }
         var v_alist = caml_call2(caml_call1(Core[462], _aa_), buf, pos_ref);
         return [0, v_num_keys, v_alist];
        }
        var
         include =
           caml_call1
            (caml_call1
              (Core_Binable[7],
               [0,
                bin_shape_t,
                bin_size_t,
                bin_write_t,
                bin_read_t$0,
                bin_read_t]),
             _W_),
         bin_shape_t$0 = include[1],
         bin_size_t$0 = include[2],
         bin_write_t$0 = include[3],
         bin_read_t$1 = include[4],
         bin_read_t$2 = include[5],
         bin_writer_t = include[6],
         bin_reader_t = include[7],
         bin_t = include[8];
        return [0,
                bin_shape_t$0,
                bin_size_t$0,
                bin_write_t$0,
                bin_read_t$1,
                bin_read_t$2,
                bin_writer_t,
                bin_reader_t,
                bin_t,
                t_of_sexp,
                sexp_of_t,
                create$0,
                of_alist,
                of_alist_exn];
       },
       debug];
   runtime.caml_register_global
    (86, Bounded_int_table, cst_Bounded_int_table$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
