// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Sys_unix__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Sys_unix = [0],
    Sys_unix$0 = [0, Sys_unix];
   runtime.caml_register_global(0, Sys_unix$0, "Sys_unix__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sys_unix__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Sys_unix_Import = "Sys_unix__Import",
    cst_sys_unix = "sys_unix";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Sys_unix_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_sys_unix);
   caml_call1(Ppx_expect_runtime[1][1], "sys_unix/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_sys_unix, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_sys_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Sys_unix_Import);
   var Sys_unix_Import = [0];
   runtime.caml_register_global(11, Sys_unix_Import, cst_Sys_unix_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sys_unix
//# unitInfo: Requires: Caml_unix, Core, Core__Arg, Core__Array, Core__Core_sys, Core__Int, Core__Printf, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Sys_unix$0 = "Sys_unix",
    cst_sys_unix$0 = "sys_unix",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_read_directory = runtime.caml_sys_read_directory,
    caml_sys_system_command = runtime.caml_sys_system_command,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    f_str = "Sys.unsafe_getenv_exn",
    Core_Arg = global_data.Core__Arg,
    Core_Core_sys = global_data.Core__Core_sys,
    Caml_unix = global_data.Caml_unix,
    Core_Array = global_data.Core__Array,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Assert_failure = global_data.Assert_failure,
    Core_Printf = global_data.Core__Printf,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Sys_unix$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_sys_unix$0);
   caml_call1(Ppx_expect_runtime[1][1], "sys_unix/src/sys_unix.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_sys_unix$0, "sys_unix.ml");
   var
    f = Caml_unix[7],
    cst_HOME = "HOME",
    _i_ = [0, "sys_unix/src/sys_unix.ml.Command_failed_with_status"],
    _j_ = [0, "_none_", 0, -1],
    _a_ =
      [0,
       [2, 0, [11, ": environment variable ", [2, 0, [11, " is not set", 0]]]],
       "%s: environment variable %s is not set"],
    cst_Sys_unix_Command_failed_wi = "Sys_unix.Command_failed_with_status",
    cst_sys_unix = cst_sys_unix$0,
    cst_Sys_unix = cst_Sys_unix$0;
   function unsafe_getenv(var$0){
    try{var _L_ = [0, caml_call1(f, var$0)]; return _L_;}
    catch(_M_){
     var _K_ = caml_wrap_exception(_M_);
     if(_K_[1] !== Core[627] && _K_ !== Stdlib[8])
      throw caml_maybe_attach_backtrace(_K_, 0);
     return 0;
    }
   }
   function unsafe_getenv_exn(var$0){
    var match = unsafe_getenv(var$0);
    if(! match) return caml_call4(Core_Printf[6], _a_, f_str, var$0, 0);
    var x = match[1];
    return x;
   }
   function stat_check_exn(f, opt, path){
    if(opt)
     var sth = opt[1], follow_symlinks = sth;
    else
     var follow_symlinks = 1;
    for(;;)
     try{
      var
       _H_ =
         follow_symlinks
          ? caml_call1(Caml_unix[43][4], path)
          : caml_call1(Caml_unix[43][5], path),
       _I_ = caml_call1(f, _H_);
      return _I_;
     }
     catch(_J_){
      var _F_ = caml_wrap_exception(_J_);
      if(_F_[1] === Caml_unix[1]){
       var _G_ = _F_[2];
       if(typeof _G_ === "number"){
        var switcher = _G_ - 20 | 0;
        if(6 < switcher >>> 0){
         if(-9 === switcher) continue;
        }
        else if(4 < switcher - 1 >>> 0) return 0;
       }
      }
      throw caml_maybe_attach_backtrace(_F_, 0);
     }
   }
   function stat_check(f, follow_symlinks, path){
    try{
     var _D_ = stat_check_exn(f, follow_symlinks, path) ? 4448519 : 17505;
     return _D_;
    }
    catch(_E_){
     var _B_ = caml_wrap_exception(_E_);
     a:
     if(_B_[1] === Caml_unix[1]){
      var _C_ = _B_[2];
      if(typeof _C_ === "number"){
       if(1 !== _C_ && 66 !== _C_) break a;
       return 785140586;
      }
     }
     throw caml_maybe_attach_backtrace(_B_, 0);
    }
   }
   function _b_(param){return 1;}
   function file_exists(_z_, _A_){return stat_check(_b_, _z_, _A_);}
   function _c_(param){return 1;}
   function file_exists_exn(_x_, _y_){return stat_check_exn(_c_, _x_, _y_);}
   function _d_(stat){return 1 === stat[3] ? 1 : 0;}
   function is_directory(_v_, _w_){return stat_check(_d_, _v_, _w_);}
   function _e_(stat){return 1 === stat[3] ? 1 : 0;}
   function is_directory_exn(_t_, _u_){return stat_check_exn(_e_, _t_, _u_);}
   function _f_(stat){return 0 === stat[3] ? 1 : 0;}
   function is_file(_r_, _s_){return stat_check(_f_, _r_, _s_);}
   function _g_(stat){return 0 === stat[3] ? 1 : 0;}
   function is_file_exn(_p_, _q_){return stat_check_exn(_g_, _p_, _q_);}
   var
    executable_name = Stdlib_Sys[1],
    remove = runtime.caml_sys_remove,
    rename = runtime.caml_sys_rename,
    command = caml_sys_system_command,
    chdir = runtime.caml_sys_chdir;
   function getcwd(_o_){return runtime.caml_sys_getcwd(_o_);}
   var
    readdir = caml_sys_read_directory,
    Break = Stdlib_Sys[44],
    catch_break = Stdlib_Sys[45];
   function with_async_exns(f){return caml_call1(f, 0);}
   var
    Command_failed_with_status =
      [248, cst_Sys_unix_Command_failed_wi, runtime.caml_fresh_oo_id(0)];
   function _h_(param){
    if(param[1] !== Command_failed_with_status)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(Core_Int[77], arg0_001),
     res1_004 = caml_call1(Core_String[135], arg1_002);
    return [1, [0, _i_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Command_failed_with_status, _h_);
   function command_exn(string){
    var
     status = caml_sys_system_command(string),
     _n_ = caml_call2(Core[93], status, 0);
    if(_n_)
     throw caml_maybe_attach_backtrace
            ([0, Command_failed_with_status, status, string], 0);
    return _n_;
   }
   function fold_dir(init, f, directory){
    var _m_ = caml_sys_read_directory(directory);
    return caml_call3(Core_Array[36], _m_, init, f);
   }
   function ls_dir(directory){
    var _l_ = caml_sys_read_directory(directory);
    return caml_call1(Core_Array[45], _l_);
   }
   function execution_mode(param){
    return runtime.executing_bytecode(0, 0, 0, 0, 0, 0)
            ? 826912853
            : -693027401;
   }
   function home_directory(param){
    var match = caml_call1(Core_Core_sys[19], cst_HOME);
    if(match){var home = match[1]; return home;}
    var _k_ = caml_call1(Caml_unix[113], 0);
    return caml_call1(Caml_unix[124], _k_)[6];
   }
   function override_argv(new_argv){
    runtime.caml_sys_modify_argv(new_argv);
    Core_Arg[12][1] = 0;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_sys_unix);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Sys_unix);
   var
    Sys_unix =
      [0,
       executable_name,
       file_exists,
       file_exists_exn,
       is_directory,
       is_file,
       is_directory_exn,
       is_file_exn,
       remove,
       rename,
       unsafe_getenv,
       unsafe_getenv_exn,
       command,
       command_exn,
       chdir,
       getcwd,
       readdir,
       fold_dir,
       ls_dir,
       Break,
       catch_break,
       with_async_exns,
       execution_mode,
       home_directory,
       override_argv];
   runtime.caml_register_global(29, Sys_unix, cst_Sys_unix$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzeXNfdW5peC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZl9zdHIiLCJmIiwidW5zYWZlX2dldGVudiIsInZhciQwIiwidW5zYWZlX2dldGVudl9leG4iLCJ4Iiwic3RhdF9jaGVja19leG4iLCJvcHQiLCJwYXRoIiwic3RoIiwiZm9sbG93X3N5bWxpbmtzIiwic3RhdF9jaGVjayIsImZpbGVfZXhpc3RzIiwiZmlsZV9leGlzdHNfZXhuIiwic3RhdCIsImlzX2RpcmVjdG9yeSIsImlzX2RpcmVjdG9yeV9leG4iLCJpc19maWxlIiwiaXNfZmlsZV9leG4iLCJleGVjdXRhYmxlX25hbWUiLCJyZW1vdmUiLCJyZW5hbWUiLCJjb21tYW5kIiwiY2hkaXIiLCJnZXRjd2QiLCJyZWFkZGlyIiwiY2F0Y2hfYnJlYWsiLCJ3aXRoX2FzeW5jX2V4bnMiLCJjb21tYW5kX2V4biIsInN0cmluZyIsInN0YXR1cyIsImZvbGRfZGlyIiwiaW5pdCIsImRpcmVjdG9yeSIsImxzX2RpciIsImV4ZWN1dGlvbl9tb2RlIiwiaG9tZV9kaXJlY3RvcnkiLCJob21lIiwib3ZlcnJpZGVfYXJndiIsIm5ld19hcmd2Il0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvY29yZV91bml4L3N5c191bml4L3N5c191bml4X18ubWwiLCIvaG9tZS9saWFtLWNhcnBlbnRlci8ub3BhbS9wZXJzb25hbC1zaXRlL2xpYi9jb3JlX3VuaXgvc3lzX3VuaXgvc3lzX3VuaXgubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7R0FLb0I7O0lBQUE7Ozs7RTs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7OztJQ09GQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFQSkM7Ozs7Ozs7Ozs7O0dBS00sU0FFS0MsY0FQVEM7SUFDZCxJQUFJLGNBQUssV0FER0YsR0FBRUUsU0FDVjs7Ozs7S0FDa0M7OztHQVdoQixTQUFwQkMsa0JBTnVCRDtJQUNuQixZQURpQkQsY0FBRUM7Z0JBR2YsT0FBQSxnQ0FITUgsT0FBU0c7UUFFbEJFO0lBQUssT0FBTEE7O1lBTUxDLGVBQWVMLEdBQUlNLEtBQXdCQztJQUM3QyxHQURxQkQ7U0FBa0JFLE1BQWxCRixRQUFBRyxrQkFBa0JEOztTQUFsQkM7O0tBRW5CO01BQUk7O1NBRmVBO1lBRVksNkJBRllGO1lBRWEsNkJBRmJBO09BRXZDLE1BQUEsV0FGV1A7TUFFWDs7Ozs7Ozs7Ozs7d0NBRXNEOzs7OztHQUVyRDtZQUdMVSxXQUFXVixHQUFHUyxpQkFBZ0JGO0lBQ2hDO0tBQU8sVUFWTEYsZUFTV0wsR0FBR1MsaUJBQWdCRjtLQUNtQjs7Ozs7Ozs7O09BQ0s7Ozs7O0dBQVE7dUJBRzNCLFNBQUk7R0FBekIsU0FBZEksc0IsT0FMQUQ7dUJBTTJDLFNBQUk7R0FBN0IsU0FBbEJFLDBCLE9BZkFQO2dCQWdCK0JRLE1BQVEsYUFBUkEsZ0JBQW9EO0dBQXBFLFNBQWZDLHVCLE9BUEFKO2dCQVVrQkcsTUFBUSxhQUFSQSxnQkFBb0Q7R0FBeEUsU0FERUUsMkIsT0FsQkFWO2dCQXNCMEJRLE1BQVEsYUFBUkEsZ0JBQW9EO0dBQXBFLFNBQVZHLGtCLE9BYkFOO2dCQWdCa0JHLE1BQVEsYUFBUkEsZ0JBQW9EO0dBQXhFLFNBREVJLHNCLE9BeEJBWjtHQXlCRjtJQU1JYTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztZQUNBQyxZO0dBQ1U7SUFBVkM7SUFBVTtJQUlWQztZQVFBQyxnQkFBZ0IxQixHQUFJLE9BQUEsV0FBSkEsTUFBUTtHQUs5Qjs7OztJOzs7Ozs7Ozs7OztZQUVJMkIsWUFBWUM7SUFDZDtLQUFJQyxTQUFTLHdCQURDRDtLQUVYLE1BQUEscUJBRENDO0lBQ0Q7S0FBaUIsTUFBQTs2Q0FEaEJBLFFBRFVEO0lBRVg7R0FBb0U7WUFHckVFLFNBQVVDLE1BQU0vQixHQUFFZ0M7SUFBdUIsVUFBQSx3QkFBdkJBO0lBQVksT0FBQSxnQ0FBcEJELE1BQU0vQjtHQUFxRDtZQUNyRWlDLE9BQU9EO0lBQTBCLFVBQUEsd0JBQTFCQTtJQUEwQixPQUFBO0dBQW1CO1lBaUJwREU7SUFDRixPQUFHOzs7R0FBZ0U7WUFNakVDO0lBQ0ksWUFBQTtrQkFDQ0MsaUJBQVEsT0FBUkE7SUFDa0IsVUFBQTtJQUFmLE9BQUE7R0FBd0M7WUFpQmhEQyxjQUFjQztJQUNoQiw2QkFEZ0JBOzs7R0FFQTs7Ozs7Ozs7T0E3RVpwQjtPQWpCRlA7T0FDQUM7T0FDQUU7T0FNQUU7T0FKQUQ7T0FNQUU7T0FRRUU7T0FDQUM7T0F6Q21CbkI7T0FNckJFO09Bb0NFa0I7T0FzQkZNO09BckJFTDtPQUNBQztPQUNBQztPQXdCRk07T0FDQUc7O09BckJFUjtPQVFBQztPQThCRlE7T0FPQUM7T0FvQkFFOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIFN5c191bml4LkltcG9ydCAqKVxubW9kdWxlIEltcG9ydCA9IFN5c191bml4X19JbXBvcnRcblxubW9kdWxlIFN5c191bml4X18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxub3BlbiBDb3JlLlN5c1xubW9kdWxlIExhcmdlRmlsZSA9IFVuaXguTGFyZ2VGaWxlXG5cbmxldCBnZXRlbnZfZiB+ZiB2YXIgPVxuICB0cnkgU29tZSAoZiB2YXIpIHdpdGhcbiAgfCBOb3RfZm91bmRfcyBfIHwgU3RkbGliLk5vdF9mb3VuZCAtPiBOb25lXG47O1xuXG5sZXQgdW5zYWZlX2dldGVudiA9IGdldGVudl9mIH5mOlVuaXgudW5zYWZlX2dldGVudlxuXG5sZXQgZ2V0ZW52X2V4bl9mIH5mX3N0ciB+ZiB2YXIgPVxuICBtYXRjaCBmIHZhciB3aXRoXG4gIHwgU29tZSB4IC0+IHhcbiAgfCBOb25lIC0+IFByaW50Zi5mYWlsd2l0aGYgXCIlczogZW52aXJvbm1lbnQgdmFyaWFibGUgJXMgaXMgbm90IHNldFwiIGZfc3RyIHZhciAoKVxuOztcblxubGV0IHVuc2FmZV9nZXRlbnZfZXhuID0gZ2V0ZW52X2V4bl9mIH5mX3N0cjpcIlN5cy51bnNhZmVfZ2V0ZW52X2V4blwiIH5mOnVuc2FmZV9nZXRlbnZcblxubGV0IHN0YXRfY2hlY2tfZXhuIGYgPyhmb2xsb3dfc3ltbGlua3MgPSB0cnVlKSBwYXRoID1cbiAgbGV0IHJlYyBsb29wICgpID1cbiAgICB0cnkgZiAoaWYgZm9sbG93X3N5bWxpbmtzIHRoZW4gTGFyZ2VGaWxlLnN0YXQgcGF0aCBlbHNlIExhcmdlRmlsZS5sc3RhdCBwYXRoKSB3aXRoXG4gICAgfCBVbml4LlVuaXhfZXJyb3IgKFVuaXguRUlOVFIsIF8sIF8pIC0+IGxvb3AgKClcbiAgICB8IFVuaXguVW5peF9lcnJvciAoKFVuaXguRU5PRU5UIHwgVW5peC5FTk9URElSKSwgXywgXykgLT4gZmFsc2VcbiAgaW5cbiAgbG9vcCAoKVxuOztcblxubGV0IHN0YXRfY2hlY2sgZiA/Zm9sbG93X3N5bWxpbmtzIHBhdGggPVxuICB0cnkgaWYgc3RhdF9jaGVja19leG4gZiA/Zm9sbG93X3N5bWxpbmtzIHBhdGggdGhlbiBgWWVzIGVsc2UgYE5vIHdpdGhcbiAgfCBVbml4LlVuaXhfZXJyb3IgKChVbml4LkVBQ0NFUyB8IFVuaXguRUxPT1ApLCBfLCBfKSAtPiBgVW5rbm93blxuOztcblxubGV0IGZpbGVfZXhpc3RzID0gc3RhdF9jaGVjayAoZnVuIF8gLT4gdHJ1ZSlcbmxldCBmaWxlX2V4aXN0c19leG4gPSBzdGF0X2NoZWNrX2V4biAoZnVuIF8gLT4gdHJ1ZSlcbmxldCBpc19kaXJlY3RvcnkgPSBzdGF0X2NoZWNrIChmdW4gc3RhdCAtPiBQb2x5LmVxdWFsIHN0YXQuTGFyZ2VGaWxlLnN0X2tpbmQgVW5peC5TX0RJUilcblxubGV0IGlzX2RpcmVjdG9yeV9leG4gPVxuICBzdGF0X2NoZWNrX2V4biAoZnVuIHN0YXQgLT4gUG9seS5lcXVhbCBzdGF0LkxhcmdlRmlsZS5zdF9raW5kIFVuaXguU19ESVIpXG47O1xuXG5sZXQgaXNfZmlsZSA9IHN0YXRfY2hlY2sgKGZ1biBzdGF0IC0+IFBvbHkuZXF1YWwgc3RhdC5MYXJnZUZpbGUuc3Rfa2luZCBVbml4LlNfUkVHKVxuXG5sZXQgaXNfZmlsZV9leG4gPVxuICBzdGF0X2NoZWNrX2V4biAoZnVuIHN0YXQgLT4gUG9seS5lcXVhbCBzdGF0LkxhcmdlRmlsZS5zdF9raW5kIFVuaXguU19SRUcpXG47O1xuXG5pbmNsdWRlIHN0cnVjdFxuICBvcGVuIFN0ZGxpYi5TeXNcblxuICBsZXQgZXhlY3V0YWJsZV9uYW1lID0gZXhlY3V0YWJsZV9uYW1lXG4gIGxldCByZW1vdmUgPSByZW1vdmVcbiAgbGV0IHJlbmFtZSA9IHJlbmFtZVxuICBsZXQgY29tbWFuZCA9IGNvbW1hbmRcbiAgbGV0IGNoZGlyID0gY2hkaXJcbiAgbGV0IGdldGN3ZCA9IGdldGN3ZFxuICBsZXQgcmVhZGRpciA9IHJlYWRkaXJcblxuICBleGNlcHRpb24gQnJlYWsgPSBCcmVha1xuXG4gIGxldCBjYXRjaF9icmVhayA9IGNhdGNoX2JyZWFrXG5cbiAgWyUlaWYgZmxhbWJkYV9iYWNrZW5kXVxuXG4gIGxldCB3aXRoX2FzeW5jX2V4bnMgPSB3aXRoX2FzeW5jX2V4bnNcblxuICBbJSVlbHNlXVxuXG4gIGxldCB3aXRoX2FzeW5jX2V4bnMgZiA9IGYgKClcblxuICBbJSVlbmRpZl1cbmVuZFxuXG5leGNlcHRpb24gQ29tbWFuZF9mYWlsZWRfd2l0aF9zdGF0dXMgb2YgSW50LnQgKiBTdHJpbmcudCBbQEBkZXJpdmluZyBzZXhwXVxuXG5sZXQgY29tbWFuZF9leG4gc3RyaW5nID1cbiAgbGV0IHN0YXR1cyA9IGNvbW1hbmQgc3RyaW5nIGluXG4gIGlmIHN0YXR1cyA8PiAwIHRoZW4gcmFpc2UgKENvbW1hbmRfZmFpbGVkX3dpdGhfc3RhdHVzIChzdGF0dXMsIHN0cmluZykpXG47O1xuXG5sZXQgZm9sZF9kaXIgfmluaXQgfmYgZGlyZWN0b3J5ID0gQXJyYXkuZm9sZCAocmVhZGRpciBkaXJlY3RvcnkpIH5mIH5pbml0XG5sZXQgbHNfZGlyIGRpcmVjdG9yeSA9IEFycmF5LnRvX2xpc3QgKHJlYWRkaXIgZGlyZWN0b3J5KVxuXG4oKiBUaGlzIGZ1bmN0aW9uIHRha2VzIHNpeCB1bml0cyB0byBjYXVzZSBvY2FtbCB0byBjYWxsIGEgZGlmZmVyZW50XG4gICBmdW5jdGlvbiB3aGVuIGV4ZWN1dGluZyBieXRlY29kZTpcbiAgIGh0dHA6Ly9jYW1sLmlucmlhLmZyL3B1Yi9kb2NzL21hbnVhbC1vY2FtbC9pbnRmYy5odG1sI3NzOmMtcHJpbS1pbXBsXG4qKVxuZXh0ZXJuYWwgZXhlY3V0aW5nX2J5dGVjb2RlXG4gIDogIHVuaXRcbiAgLT4gdW5pdFxuICAtPiB1bml0XG4gIC0+IHVuaXRcbiAgLT4gdW5pdFxuICAtPiB1bml0XG4gIC0+IGJvb2xcbiAgPSBcImV4ZWN1dGluZ19ieXRlY29kZVwiIFwibm90X2V4ZWN1dGluZ19ieXRlY29kZVwiXG4gIFtAQG5vYWxsb2NdXG5cbmxldCBleGVjdXRpb25fbW9kZSAoKSA9XG4gIGlmIGV4ZWN1dGluZ19ieXRlY29kZSAoKSAoKSAoKSAoKSAoKSAoKSB0aGVuIGBCeXRlY29kZSBlbHNlIGBOYXRpdmVcbjs7XG5cbigqIHJldHVybnMgc2l6ZSwgaW4gYml0cywgb2YgYW4gW2ludF0gdHlwZSBpbiBDICopXG5leHRlcm5hbCBjX2ludF9zaXplIDogdW5pdCAtPiBpbnQgPSBcImNfaW50X3NpemVcIiBbQEBub2FsbG9jXVxuXG5sZXQgaG9tZV9kaXJlY3RvcnkgKCkgPVxuICBtYXRjaCBnZXRlbnYgXCJIT01FXCIgd2l0aFxuICB8IFNvbWUgaG9tZSAtPiBob21lXG4gIHwgTm9uZSAtPiAoVW5peC5nZXRwd3VpZCAoVW5peC5nZXRldWlkICgpKSkucHdfZGlyXG47O1xuXG5bJSVpZiBvY2FtbF92ZXJzaW9uIDwgKDQsIDA5LCAwKV1cblxubGV0IG92ZXJyaWRlX2FyZ3YgYXJncyA9XG4gIGxldCBsZW4gPSBBcnJheS5sZW5ndGggYXJncyBpblxuICBhc3NlcnQgKGxlbiA8PSBBcnJheS5sZW5ndGggU3lzLmFyZ3YpO1xuICBBcnJheS5ibGl0IH5zcmM6YXJncyB+c3JjX3BvczowIH5kc3Q6U3lzLmFyZ3YgfmRzdF9wb3M6MCB+bGVuO1xuICAoU3RkbGliLk9iai50cnVuY2F0ZSBbQG9jYW1sLmFsZXJ0IFwiLWRlcHJlY2F0ZWRcIl0pIChPYmoucmVwciBTeXMuYXJndikgbGVuO1xuICBBcmcuY3VycmVudCA6PSAwXG47O1xuXG5bJSVlbHNlXVxuXG5leHRlcm5hbCBjYW1sX3N5c19tb2RpZnlfYXJndiA6IHN0cmluZyBhcnJheSAtPiB1bml0ID0gXCJjYW1sX3N5c19tb2RpZnlfYXJndlwiXG5cbmxldCBvdmVycmlkZV9hcmd2IG5ld19hcmd2ID1cbiAgY2FtbF9zeXNfbW9kaWZ5X2FyZ3YgbmV3X2FyZ3Y7XG4gIEFyZy5jdXJyZW50IDo9IDBcbjs7XG5cblslJWVuZGlmXVxuIl19
