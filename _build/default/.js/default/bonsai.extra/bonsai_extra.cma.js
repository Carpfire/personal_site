// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai_extra
//# unitInfo: Requires: Bonsai, Core, Core__Bool, Core__Fdeque, Core__Option, Core__Sexp, Core__Time_ns, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_BUG$2 = "BUG",
    cst_Bonsai_extra$0 = "Bonsai_extra",
    cst_Busy = "Busy",
    cst_Idle = "Idle",
    cst_Result = "Result",
    cst_Stable = "Stable",
    cst_Unstable = "Unstable",
    cst_bonsai_extra$0 = "bonsai_extra",
    cst_busy = "busy",
    cst_extra_bonsai_extra_ml = "extra/bonsai_extra.ml",
    cst_idle = "idle",
    cst_previously_stable$0 = "previously_stable",
    cst_result = "result",
    cst_stable = "stable",
    cst_unstable = "unstable",
    cst_unstable_value$0 = "unstable_value",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_086 = "extra/bonsai_extra.ml.Stability.t",
    error_source_135 = "extra/bonsai_extra.ml.One_at_a_time.Status.t",
    error_source_142 = "extra/bonsai_extra.ml.One_at_a_time.Response.t",
    Bonsai = global_data.Bonsai,
    Ui_effect = global_data.Ui_effect,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Unit = global_data.Core__Unit,
    Core_Fdeque = global_data.Core__Fdeque,
    Core_Bool = global_data.Core__Bool,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_extra$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_extra$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_extra_bonsai_extra_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai_extra$0, "bonsai_extra.ml");
   var
    _aV_ = [0, [0, cst_extra_bonsai_extra_ml, 546, 16245, 16247]],
    _aW_ = [0, [0, cst_extra_bonsai_extra_ml, 546, 16245, 16247]],
    _aX_ = [0, [0, cst_extra_bonsai_extra_ml, 546, 16245, 16247]],
    _aP_ = [0, [0, cst_extra_bonsai_extra_ml, 535, 15998, 16000]],
    _aQ_ = [0, [0, cst_extra_bonsai_extra_ml, 535, 15998, 16000]],
    _aM_ = [0, 1, 1],
    _aG_ = [0, [0, cst_extra_bonsai_extra_ml, 519, 15582, 15588]],
    _aH_ = [0, [0, cst_extra_bonsai_extra_ml, 518, 15561, 15565]],
    _aI_ = [0, [0, cst_extra_bonsai_extra_ml, 500, 15041, 15045]],
    _aJ_ = [0, [0, cst_extra_bonsai_extra_ml, 500, 15041, 15045]],
    _aK_ = [0, [0, cst_extra_bonsai_extra_ml, 500, 15041, 15045]],
    _aL_ = [0, [0, cst_extra_bonsai_extra_ml, 500, 15041, 15045]],
    _aN_ = [0, [0, cst_extra_bonsai_extra_ml, 500, 15041, 15045]],
    _aE_ = [0, "Release"],
    _aF_ = [0, "Acquire"],
    _aC_ = [0, cst_Result],
    _aD_ = [0, cst_Busy],
    _aA_ = [0, cst_Idle],
    _aB_ = [0, cst_Busy],
    _aq_ = [0, cst_extra_bonsai_extra_ml, 460, 2],
    cst_value_which_passed_through =
      "value which passed through filter must be true",
    cst_extra_bonsai_extra_ml_468_ = "extra/bonsai_extra.ml:468:33",
    cst_BUG$1 = "BUG:",
    _ap_ = [0, [0, cst_extra_bonsai_extra_ml, 462, 14098, 14102]],
    _au_ = [0, cst_extra_bonsai_extra_ml, 460, 2],
    _at_ = [0, [0, cst_extra_bonsai_extra_ml, 473, 14575, 14579]],
    _ar_ = [0, [0, cst_extra_bonsai_extra_ml, 460, 14013, 14015]],
    _as_ = [0, [0, cst_extra_bonsai_extra_ml, 460, 14013, 14015]],
    _av_ = [0, cst_extra_bonsai_extra_ml, 461, 14058, 14062],
    _aw_ = [0, [0, cst_extra_bonsai_extra_ml, 460, 14013, 14015]],
    _ax_ = [0, [0, cst_extra_bonsai_extra_ml, 447, 13654, 13658]],
    _ay_ = [0, [0, cst_extra_bonsai_extra_ml, 446, 13614, 13616]],
    _az_ = [0, [0, cst_extra_bonsai_extra_ml, 445, 13538, 13540]],
    _al_ = [0, cst_Stable],
    _am_ = [0, cst_unstable_value$0],
    _an_ = [0, cst_previously_stable$0],
    _ao_ = [0, cst_Unstable],
    cst_unstable_value = cst_unstable_value$0,
    cst_previously_stable = cst_previously_stable$0,
    _aa_ = [0, [0, cst_extra_bonsai_extra_ml, 405, 12521, 12526]],
    _ab_ = [0, [0, cst_extra_bonsai_extra_ml, 404, 12451, 12455]],
    _ac_ = [0, [0, cst_extra_bonsai_extra_ml, 400, 12293, 12299]],
    _ad_ = [0, [0, cst_extra_bonsai_extra_ml, 399, 12262, 12266]],
    _ae_ = [0, [0, cst_extra_bonsai_extra_ml, 398, 12186, 12190]],
    _af_ = [0, [0, cst_extra_bonsai_extra_ml, 398, 12186, 12190]],
    _Z_ = [0, [0, cst_extra_bonsai_extra_ml, 394, 12065, 12069]],
    ___ = [0, [0, cst_extra_bonsai_extra_ml, 394, 12065, 12069]],
    cst_Bonsai_extra_is_stable_tim =
      "Bonsai_extra.is_stable: [time_to_stable] should not be negative",
    _Y_ = [0, cst_extra_bonsai_extra_ml, 386, 2],
    _$_ = [0, [0, cst_extra_bonsai_extra_ml, 394, 12065, 12069]],
    _ag_ = [0, [0, cst_extra_bonsai_extra_ml, 398, 12186, 12190]],
    _ah_ = [0, cst_extra_bonsai_extra_ml, 387, 11858, 11862],
    _ai_ = [0, [0, cst_extra_bonsai_extra_ml, 386, 11836, 11838]],
    _aj_ = [0, [0, cst_extra_bonsai_extra_ml, 383, 11747, 11751]],
    _ak_ = [0, [0, cst_extra_bonsai_extra_ml, 382, 11730, 11732]],
    _W_ = [0, [0, cst_extra_bonsai_extra_ml, 377, 11548, 11550]],
    _X_ = [0, [0, cst_extra_bonsai_extra_ml, 376, 11512, 11514]],
    cst_if_both_are_None_then_we_s =
      "if both are None, then we shouldn't be `Unstable ",
    cst_extra_bonsai_extra_ml_306_ = "extra/bonsai_extra.ml:306:24",
    cst_BUG$0 = cst_BUG$2,
    cst_on_change_triggered_when_n =
      "on_change triggered when nothing actually changed?",
    cst_extra_bonsai_extra_ml_339_ = "extra/bonsai_extra.ml:339:24",
    cst_BUG = cst_BUG$2,
    _U_ = [0, "interactive"],
    _V_ = [0, "store"],
    _Q_ = [0, [0, cst_extra_bonsai_extra_ml, 228, 6513, 6515]],
    _R_ = [0, [0, cst_extra_bonsai_extra_ml, 199, 5361, 5363]],
    _S_ = [0, [0, cst_extra_bonsai_extra_ml, 199, 5361, 5363]],
    _T_ = [0, [0, cst_extra_bonsai_extra_ml, 199, 5361, 5363]],
    _E_ = [0, cst_extra_bonsai_extra_ml, 165, 4],
    _H_ = [0, cst_extra_bonsai_extra_ml, 165, 4],
    _F_ = [0, [0, cst_extra_bonsai_extra_ml, 165, 4451, 4455]],
    _G_ = [0, [0, cst_extra_bonsai_extra_ml, 165, 4451, 4455]],
    _I_ = [0, cst_extra_bonsai_extra_ml, 166, 4476, 4482],
    _C_ = [0, [0, cst_extra_bonsai_extra_ml, 170, 4566, 4570]],
    _D_ = [0, [0, cst_extra_bonsai_extra_ml, 169, 4547, 4549]],
    _J_ = [0, [0, cst_extra_bonsai_extra_ml, 165, 4451, 4455]],
    _K_ = [0, [0, cst_extra_bonsai_extra_ml, 164, 4433, 4435]],
    _L_ = [0, [0, cst_extra_bonsai_extra_ml, 163, 4359, 4361]],
    _M_ = [0, [0, cst_extra_bonsai_extra_ml, 163, 4359, 4361]],
    _N_ = [0, [0, cst_extra_bonsai_extra_ml, 163, 4359, 4361]],
    _O_ = [0, [0, cst_extra_bonsai_extra_ml, 163, 4359, 4361]],
    _P_ = [0, [0, cst_extra_bonsai_extra_ml, 163, 4359, 4361]],
    _t_ = [0, cst_extra_bonsai_extra_ml, 148, 4],
    _u_ = [0, cst_extra_bonsai_extra_ml, 149, 4027, 4033],
    _r_ = [0, [0, cst_extra_bonsai_extra_ml, 147, 3987, 3989]],
    _s_ = [0, [0, cst_extra_bonsai_extra_ml, 147, 3987, 3989]],
    _v_ = [0, [0, cst_extra_bonsai_extra_ml, 148, 4002, 4006]],
    _w_ = [0, [0, cst_extra_bonsai_extra_ml, 147, 3987, 3989]],
    _x_ = [0, [0, cst_extra_bonsai_extra_ml, 146, 3913, 3915]],
    _y_ = [0, [0, cst_extra_bonsai_extra_ml, 146, 3913, 3915]],
    _z_ = [0, [0, cst_extra_bonsai_extra_ml, 146, 3913, 3915]],
    _A_ = [0, [0, cst_extra_bonsai_extra_ml, 146, 3913, 3915]],
    _B_ = [0, [0, cst_extra_bonsai_extra_ml, 146, 3913, 3915]],
    _j_ = [0, cst_extra_bonsai_extra_ml, 134, 2],
    _k_ = [0, cst_extra_bonsai_extra_ml, 134, 3624, 3626],
    _l_ = [0, [0, cst_extra_bonsai_extra_ml, 134, 3624, 3626]],
    _m_ = [0, [0, cst_extra_bonsai_extra_ml, 131, 3505, 3507]],
    _n_ = [0, [0, cst_extra_bonsai_extra_ml, 131, 3505, 3507]],
    _o_ = [0, [0, cst_extra_bonsai_extra_ml, 131, 3505, 3507]],
    _p_ = [0, [0, cst_extra_bonsai_extra_ml, 131, 3505, 3507]],
    _q_ = [0, [0, cst_extra_bonsai_extra_ml, 131, 3505, 3507]],
    _h_ = [0, [0, cst_extra_bonsai_extra_ml, 94, 2733, 2735]],
    _g_ = [0, "action"],
    cst_An_action_sent_to_a_state_ =
      "An action sent to a [state_machine1_dynamic_model] has been dropped because its input was not present. This happens when the [state_machine1_dynamic_model] is inactive when it receives a message.",
    cst_extra_bonsai_extra_ml_78_1 = "extra/bonsai_extra.ml:78:10",
    _i_ = [0, [0, cst_extra_bonsai_extra_ml, 85, 2450, 2452]],
    _d_ = [0, [0, cst_extra_bonsai_extra_ml, 38, 1008, 1016]],
    _e_ = [0, [0, cst_extra_bonsai_extra_ml, 37, 958, 966]],
    _f_ = [0, [0, cst_extra_bonsai_extra_ml, 36, 928, 934]],
    _a_ = [0, [0, cst_extra_bonsai_extra_ml, 6, 88, 90]],
    _b_ = [0, [0, cst_extra_bonsai_extra_ml, 6, 88, 90]],
    _c_ = [0, [0, cst_extra_bonsai_extra_ml, 6, 88, 90]],
    _aU_ = [0, [0, cst_extra_bonsai_extra_ml, 535, 15998, 16000]],
    cst_bonsai_extra = cst_bonsai_extra$0,
    cst_Bonsai_extra = cst_Bonsai_extra$0;
   function with_inject_fixed_point(f){
    function _fb_(pattern_syntax_001){
     function _fk_(r){return caml_call1(Bonsai[49][1], r);}
     function _fl_(param){
      var pattern_syntax_002 = param[1];
      return pattern_syntax_002;
     }
     var
      _fm_ = caml_call3(Bonsai[49][5][4], _a_, pattern_syntax_001, _fl_),
      _fn_ = caml_call1(Bonsai[49][5][6], _fm_);
     return caml_call3(Bonsai[49][5][1], _b_, _fn_, _fk_);
    }
    var _fc_ = 0;
    function _fd_(model, inject){return caml_call1(f, inject);}
    function _fe_(context, param, _fi_, action){
     var inject = param[2], _fj_ = caml_call1(inject, action);
     return caml_call2(Bonsai[16][2], context, _fj_);
    }
    var
     _ff_ = 0,
     _fg_ =
       [0,
        function(a_003, b_004){
         return caml_call2(Core_Unit[20], a_003, b_004);
        }],
     _fh_ =
       caml_call7
        (Bonsai[38], 0, [0, Core_Unit[10]], _fg_, _ff_, _fe_, _fd_, _fc_);
    return caml_call3(Bonsai[49][5][1], _c_, _fh_, _fb_);
   }
   function with_self_effect(sexp_of_model, equal, f, param){
    var _eY_ = 0;
    function _eZ_(model, inject){
     function _e4_(current_model){return caml_call1(f, current_model);}
     function _e5_(get_model){
      function _e8_(param){
       var get_model = param[2], inject = param[1];
       function _e__(param){
        function _fa_(model){
         if(model){
          var match = model[1];
          if(match){var v = match[1]; return [0, v];}
         }
         return 0;
        }
        return caml_call2(Ui_effect[13][4][3], get_model, _fa_);
       }
       var _e$_ = caml_call1(inject, 0);
       return caml_call2(Ui_effect[13][4][2], _e$_, _e__);
      }
      var _e9_ = caml_call2(Bonsai[49][5][7], inject, get_model);
      return caml_call3(Bonsai[49][5][8], _d_, _e9_, _e8_);
     }
     var
      _e6_ = caml_call1(Bonsai[41], model),
      _e7_ = caml_call3(Bonsai[49][5][1], _e_, _e6_, _e5_);
     return caml_call3(Bonsai[49][5][1], _f_, _e7_, _e4_);
    }
    function _e0_(param, result, model, _e3_){return [0, result];}
    var
     _e1_ = caml_call2(Core_Option[34], equal, Core_Option[18]),
     _e2_ = caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]);
    return caml_call7(Bonsai[38], 0, _e2_, _e1_, 0, _e0_, _eZ_, _eY_);
   }
   function state_machine1_dynamic_model
   (sexp_of_action, sexp_of_model, equal, model, apply_action, input){
    if(657750365 <= model[1])
     var
      m = model[2],
      _eM_ =
        function(m, param){if(! param) return m; var a = param[1]; return a;},
      model_creator = caml_call2(Bonsai[2][2], m, _eM_);
    else
     var f = model[2], model_creator = f;
    function apply_action$0(context, input, model, action){
     if(input){
      var
       match = input[1],
       model_creator = match[2],
       input$0 = match[1],
       model$0 = caml_call1(model_creator, model);
      return [0, caml_call4(apply_action, context, input$0, model$0, action)];
     }
     var
      sexp_of_action$0 =
        caml_call2(Core_Option[39], sexp_of_action, Core[149]),
      _eU_ = caml_call1(sexp_of_action$0, action),
      _eV_ = [0, [1, [0, _g_, [0, caml_call1(Core_Sexp[93], _eU_), 0]]], 0],
      _eW_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_state_),
         _eV_],
      _eX_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_extra_bonsai_extra_ml_78_1),
          _eW_]];
     caml_call2(Core[257], 0, _eX_);
     return model;
    }
    function _eN_(model_and_inject){
     function _eS_(param){
      var
       model_creator = param[2],
       match = param[1],
       inject = match[2],
       model = match[1];
      return [0, caml_call1(model_creator, model), inject];
     }
     var _eT_ = caml_call2(Bonsai[49][5][7], model_and_inject, model_creator);
     return caml_call3(Bonsai[49][5][8], _h_, _eT_, _eS_);
    }
    var
     _eO_ = caml_call2(Bonsai[2][3], input, model_creator),
     _eP_ = caml_call2(Core_Option[34], equal, Core_Option[18]),
     _eQ_ = caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
     _eR_ =
       caml_call7
        (Bonsai[18], sexp_of_action, 0, _eQ_, _eP_, 0, apply_action$0, _eO_);
    return caml_call3(Bonsai[49][5][1], _i_, _eR_, _eN_);
   }
   function state_machine0_dynamic_model
   (sexp_of_action, sexp_of_model, equal, model, apply_action, param){
    function apply_action$0(context, param, model, action){
     return caml_call3(apply_action, context, model, action);
    }
    return state_machine1_dynamic_model
            (sexp_of_action,
             sexp_of_model,
             equal,
             model,
             apply_action$0,
             caml_call1(Bonsai[2][1], 0));
   }
   function state_dynamic_model(sexp_of_model, equal, model, param){
    function apply_action(param, old_model, new_model){return new_model;}
    return state_machine0_dynamic_model
            (sexp_of_model, sexp_of_model, equal, model, apply_action, 0);
   }
   function exactly_once(effect){
    function _en_(pattern_syntax_016){
     function _er_(set_has_run){
      function _ev_(has_run){
       function _ez_(pattern_syntax_021){
        function _eB_(param){
         if(0 === param) return caml_call1(Bonsai[7], 0);
         if(1 !== param)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
         var _eF_ = 0, _eG_ = 0, _eH_ = 0;
         function _eI_(param){
          var
           event = param[2],
           set_has_run = param[1],
           _eL_ = [0, caml_call1(set_has_run, 1), [0, event, 0]];
          return [0, Ui_effect[2], _eL_];
         }
         var
          _eJ_ = caml_call2(Bonsai[49][5][7], set_has_run, effect),
          _eK_ = [0, caml_call3(Bonsai[49][5][4], 0, _eJ_, _eI_)];
         return caml_call4(Bonsai[44][3], _eK_, _eH_, _eG_, _eF_);
        }
        var _eC_ = 2;
        function _eD_(param){return param ? 0 : 1;}
        var _eE_ = caml_call3(Bonsai[49][5][4], 0, pattern_syntax_021, _eD_);
        return caml_call4(Bonsai[49][5][3], _k_, _eE_, _eC_, _eB_);
       }
       var _eA_ = caml_call1(Bonsai[49][5][6], has_run);
       return caml_call3(Bonsai[49][5][1], _l_, _eA_, _ez_);
      }
      function _ew_(param){
       var pattern_syntax_017 = param[1];
       return pattern_syntax_017;
      }
      var
       _ex_ = caml_call3(Bonsai[49][5][4], _m_, pattern_syntax_016, _ew_),
       _ey_ = caml_call1(Bonsai[49][5][6], _ex_);
      return caml_call3(Bonsai[49][5][1], _n_, _ey_, _ev_);
     }
     function _es_(param){
      var pattern_syntax_018 = param[2];
      return pattern_syntax_018;
     }
     var
      _et_ = caml_call3(Bonsai[49][5][4], _o_, pattern_syntax_016, _es_),
      _eu_ = caml_call1(Bonsai[49][5][6], _et_);
     return caml_call3(Bonsai[49][5][1], _p_, _eu_, _er_);
    }
    var
     _eo_ = 0,
     _ep_ =
       [0,
        function(a_019, b_020){
         return caml_call2(Core_Bool[32], a_019, b_020);
        }],
     _eq_ = caml_call4(Bonsai[11], 0, [0, Core_Bool[22]], _ep_, _eo_);
    return caml_call3(Bonsai[49][5][1], _q_, _eq_, _en_);
   }
   function exactly_once_with_value(sexp_of_model, equal, effect){
    function _dW_(pattern_syntax_025){
     function _dY_(value){
      function _d2_(set_value){
       function _d6_(pattern_syntax_028){
        function _ej_(param){return caml_call1(Bonsai[49][1], value);}
        function _ek_(param){return 0;}
        var
         _el_ = caml_call3(Bonsai[49][5][4], _r_, pattern_syntax_028, _ek_),
         _em_ = caml_call1(Bonsai[49][5][6], _el_);
        return caml_call3(Bonsai[49][5][1], _s_, _em_, _ej_);
       }
       function _d7_(pattern_syntax_029){
        function _d__(param){
         if(0 === param){
          var
           _ec_ = 0,
           _ed_ = 0,
           _ee_ = 0,
           _ef_ =
             function(param){
              var effect = param[2], set_value = param[1];
              function _ei_(r){return caml_call1(set_value, [0, r]);}
              return caml_call2(Ui_effect[13][4][2], effect, _ei_);
             },
           _eg_ = caml_call2(Bonsai[49][5][7], set_value, effect),
           _eh_ = [0, caml_call3(Bonsai[49][5][4], 0, _eg_, _ef_)];
          return caml_call4(Bonsai[44][3], _eh_, _ee_, _ed_, _ec_);
         }
         if(1 === param) return caml_call1(Bonsai[7], 0);
         throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
        }
        var _d$_ = 2;
        function _ea_(param){return param ? 1 : 0;}
        var _eb_ = caml_call3(Bonsai[49][5][4], 0, pattern_syntax_029, _ea_);
        return caml_call4(Bonsai[49][5][3], _u_, _eb_, _d$_, _d__);
       }
       var
        _d8_ = caml_call1(Bonsai[49][5][6], value),
        _d9_ = caml_call3(Bonsai[49][5][1], _v_, _d8_, _d7_);
       return caml_call3(Bonsai[49][5][1], _w_, _d9_, _d6_);
      }
      function _d3_(param){
       var pattern_syntax_026 = param[2];
       return pattern_syntax_026;
      }
      var
       _d4_ = caml_call3(Bonsai[49][5][4], _x_, pattern_syntax_025, _d3_),
       _d5_ = caml_call1(Bonsai[49][5][6], _d4_);
      return caml_call3(Bonsai[49][5][1], _y_, _d5_, _d2_);
     }
     function _dZ_(param){
      var pattern_syntax_027 = param[1];
      return pattern_syntax_027;
     }
     var
      _d0_ = caml_call3(Bonsai[49][5][4], _z_, pattern_syntax_025, _dZ_),
      _d1_ = caml_call1(Bonsai[49][5][6], _d0_);
     return caml_call3(Bonsai[49][5][1], _A_, _d1_, _dY_);
    }
    var _dX_ = caml_call5(Bonsai[12], 0, 0, sexp_of_model, equal, 0);
    return caml_call3(Bonsai[49][5][1], _B_, _dX_, _dW_);
   }
   function value_with_override(sexp_of_model, equal, value){
    function _dw_(pattern_syntax_034){
     function _dy_(state){
      function _dC_(set_state){
       function _dG_(value){
        function _dS_(setter){
         var _dV_ = caml_call2(Bonsai[2][3], value, setter);
         return caml_call1(Bonsai[49][1], _dV_);
        }
        function _dT_(set_state, v){return caml_call1(set_state, [0, v]);}
        var _dU_ = caml_call3(Bonsai[49][5][8], _C_, set_state, _dT_);
        return caml_call3(Bonsai[49][5][1], _D_, _dU_, _dS_);
       }
       function _dH_(pattern_syntax_038){
        function _dK_(param){
         if(0 === param){
          var
           _dO_ =
             function(override){return caml_call1(Bonsai[49][1], override);},
           _dP_ =
             function(param){
              if(! param)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
              var pattern_syntax_039 = param[1];
              return pattern_syntax_039;
             },
           _dQ_ = caml_call3(Bonsai[49][5][4], _F_, pattern_syntax_038, _dP_),
           _dR_ = caml_call1(Bonsai[49][5][6], _dQ_);
          return caml_call3(Bonsai[49][5][1], _G_, _dR_, _dO_);
         }
         if(1 === param) return caml_call1(Bonsai[49][1], value);
         throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
        }
        var _dL_ = 2;
        function _dM_(param){return param ? 0 : 1;}
        var _dN_ = caml_call3(Bonsai[49][5][4], 0, pattern_syntax_038, _dM_);
        return caml_call4(Bonsai[49][5][3], _I_, _dN_, _dL_, _dK_);
       }
       var
        _dI_ = caml_call1(Bonsai[49][5][6], state),
        _dJ_ = caml_call3(Bonsai[49][5][1], _J_, _dI_, _dH_);
       return caml_call3(Bonsai[49][5][1], _K_, _dJ_, _dG_);
      }
      function _dD_(param){
       var pattern_syntax_035 = param[2];
       return pattern_syntax_035;
      }
      var
       _dE_ = caml_call3(Bonsai[49][5][4], _L_, pattern_syntax_034, _dD_),
       _dF_ = caml_call1(Bonsai[49][5][6], _dE_);
      return caml_call3(Bonsai[49][5][1], _M_, _dF_, _dC_);
     }
     function _dz_(param){
      var pattern_syntax_036 = param[1];
      return pattern_syntax_036;
     }
     var
      _dA_ = caml_call3(Bonsai[49][5][4], _N_, pattern_syntax_034, _dz_),
      _dB_ = caml_call1(Bonsai[49][5][6], _dA_);
     return caml_call3(Bonsai[49][5][1], _O_, _dB_, _dy_);
    }
    var _dx_ = caml_call5(Bonsai[12], 0, 0, sexp_of_model, equal, 0);
    return caml_call3(Bonsai[49][5][1], _P_, _dx_, _dw_);
   }
   function pipe(A){
    var default$0 = [0, Core_Fdeque[46], Core_Fdeque[46]];
    function sexp_of_t(param){
     var queued_actions = param[1];
     return caml_call2(Core_Fdeque[13], A[1], queued_actions);
    }
    function sexp_of_t$0(param){
     if(0 === param[0]){var a = param[1]; return caml_call1(A[1], a);}
     var r = param[1];
     return caml_call1(Core[149], r);
    }
    function _di_(pattern_syntax_043){
     function _dp_(inject){
      function _dt_(inject){
       function _du_(r){
        var _dv_ = caml_call1(inject, [1, r]);
        return caml_call1(Ui_effect[21][2], _dv_);
       }
       var request = caml_call2(Ui_effect[22][2], 0, _du_);
       return [0, function(a){return caml_call1(inject, [0, a]);}, request];
      }
      return caml_call3(Bonsai[49][5][8], _Q_, inject, _dt_);
     }
     function _dq_(param){
      var pattern_syntax_044 = param[2];
      return pattern_syntax_044;
     }
     var
      _dr_ = caml_call3(Bonsai[49][5][4], _R_, pattern_syntax_043, _dq_),
      _ds_ = caml_call1(Bonsai[49][5][6], _dr_);
     return caml_call3(Bonsai[49][5][1], _S_, _ds_, _dp_);
    }
    var _dj_ = 0;
    function _dk_(context, model, param){
     if(0 === param[0]){
      var a = param[1], match = caml_call1(Core_Fdeque[67], model[2]);
      if(match){
       var
        match$0 = match[1],
        queued_receivers = match$0[2],
        hd = match$0[1],
        _dn_ = caml_call2(Ui_effect[22][1][3], hd, a);
       caml_call2(Bonsai[16][2], context, _dn_);
       return [0, model[1], queued_receivers];
      }
      var queued_actions = caml_call2(Core_Fdeque[52], model[1], a);
      return [0, queued_actions, model[2]];
     }
     var r = param[1], match$1 = caml_call1(Core_Fdeque[67], model[1]);
     if(match$1){
      var
       match$2 = match$1[1],
       queued_actions$0 = match$2[2],
       hd$0 = match$2[1],
       _do_ = caml_call2(Ui_effect[22][1][3], r, hd$0);
      caml_call2(Bonsai[16][2], context, _do_);
      return [0, queued_actions$0, model[2]];
     }
     var queued_receivers$0 = caml_call2(Core_Fdeque[52], model[2], r);
     return [0, model[1], queued_receivers$0];
    }
    var
     _dl_ = [0, function(a_045, b_046){return a_045 === b_046 ? 1 : 0;}],
     _dm_ =
       caml_call7
        (Bonsai[17],
         0,
         [0, sexp_of_t],
         [0, sexp_of_t$0],
         _dl_,
         default$0,
         _dk_,
         _dj_);
    return caml_call3(Bonsai[49][5][1], _T_, _dm_, _di_);
   }
   function Id_gen(T, _c$_){
    var
     t_sexp_grammar = T[1],
     of_float = T[2],
     to_float = T[3],
     of_int_exn = T[4],
     to_int_exn = T[5],
     is_positive = T[6],
     is_non_negative = T[7],
     is_negative = T[8],
     is_non_positive = T[9],
     sign = T[10],
     compare_local = T[11],
     equal_local = T[12],
     invariant = T[13],
     of_string_opt = T[14],
     to_string_hum = T[15],
     zero = T[16],
     one = T[17],
     minus_one = T[18],
     symbol = T[19],
     symbol$0 = T[20],
     symbol$1 = T[21],
     symbol$2 = T[22],
     neg = T[23],
     symbol$3 = T[24],
     symbol$4 = T[25],
     symbol$5 = T[26],
     symbol$6 = T[27],
     rem = T[28],
     symbol$7 = T[29],
     land = T[30],
     lor = T[31],
     lxor = T[32],
     lnot = T[33],
     lsl = T[34],
     asr = T[35],
     round = T[36],
     round_towards_zero = T[37],
     round_down = T[38],
     round_up = T[39],
     round_nearest = T[40],
     abs = T[41],
     succ = T[42],
     pred = T[43],
     pow = T[44],
     bit_and = T[45],
     bit_or = T[46],
     bit_xor = T[47],
     bit_not = T[48],
     popcount = T[49],
     shift_left = T[50],
     shift_right = T[51],
     decr = T[52],
     incr = T[53],
     of_int32_exn = T[54],
     to_int32_exn = T[55],
     of_int64_exn = T[56],
     to_int64 = T[57],
     of_nativeint_exn = T[58],
     to_nativeint_exn = T[59],
     of_float_unchecked = T[60],
     num_bits = T[61],
     max_value = T[62],
     min_value = T[63],
     lsr = T[64],
     shift_right_logical = T[65],
     ceil_pow2 = T[66],
     floor_pow2 = T[67],
     ceil_log2 = T[68],
     floor_log2 = T[69],
     is_pow2 = T[70],
     clz = T[71],
     ctz = T[72],
     O = T[73],
     typerep_of_t = T[74],
     typename_of_t = T[75],
     Binary = T[76],
     Hex = T[77],
     bin_size_t = T[78],
     bin_write_t = T[79],
     bin_read_t = T[80],
     bin_read_t$0 = T[81],
     bin_shape_t = T[82],
     bin_writer_t = T[83],
     bin_reader_t = T[84],
     bin_t = T[85],
     t_of_sexp = T[86],
     sexp_of_t = T[87],
     of_string = T[88],
     to_string = T[89],
     pp = T[90],
     symbol$8 = T[91],
     symbol$9 = T[92],
     symbol$10 = T[93],
     symbol$11 = T[94],
     symbol$12 = T[95],
     symbol$13 = T[96],
     equal = T[97],
     compare = T[98],
     min = T[99],
     max = T[100],
     ascending = T[101],
     descending = T[102],
     between = T[103],
     clamp_exn = T[104],
     clamp = T[105],
     Replace_polymorphic_compare = T[106],
     comparator = T[107],
     Map = T[108],
     Set = T[109],
     hash_fold_t = T[110],
     hash = T[111],
     hashable = T[112],
     Table = T[113],
     Hash_set = T[114],
     Hash_queue = T[115],
     validate_lbound = T[116],
     validate_ubound = T[117],
     validate_bound = T[118],
     validate_positive = T[119],
     validate_non_negative = T[120],
     validate_negative = T[121],
     validate_non_positive = T[122],
     quickcheck_generator = T[123],
     quickcheck_observer = T[124],
     quickcheck_shrinker = T[125],
     gen_incl = T[126],
     gen_uniform_incl = T[127],
     gen_log_uniform_incl = T[128],
     gen_log_incl = T[129];
    function _da_(param){var fetch = param[2]; return caml_call1(fetch, 0);}
    var _db_ = 0;
    function _dc_(param, _dh_, i, _dg_){
     return [0, caml_call2(T[19], i, T[17]), i];
    }
    var
     _dd_ = T[16],
     _de_ =
       [0, function(a_049, b_050){return caml_call2(T[97], a_049, b_050);}],
     _df_ =
       caml_call7
        (Bonsai[19],
         0,
         [0, T[87]],
         [0, Core_Unit[10]],
         _de_,
         _dd_,
         _dc_,
         _db_),
     component = caml_call2(Bonsai[3][16][6][2], _df_, _da_);
    return [0,
            t_sexp_grammar,
            of_float,
            to_float,
            of_int_exn,
            to_int_exn,
            is_positive,
            is_non_negative,
            is_negative,
            is_non_positive,
            sign,
            compare_local,
            equal_local,
            invariant,
            of_string_opt,
            to_string_hum,
            zero,
            one,
            minus_one,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            neg,
            symbol$3,
            symbol$4,
            symbol$5,
            symbol$6,
            rem,
            symbol$7,
            land,
            lor,
            lxor,
            lnot,
            lsl,
            asr,
            round,
            round_towards_zero,
            round_down,
            round_up,
            round_nearest,
            abs,
            succ,
            pred,
            pow,
            bit_and,
            bit_or,
            bit_xor,
            bit_not,
            popcount,
            shift_left,
            shift_right,
            decr,
            incr,
            of_int32_exn,
            to_int32_exn,
            of_int64_exn,
            to_int64,
            of_nativeint_exn,
            to_nativeint_exn,
            of_float_unchecked,
            num_bits,
            max_value,
            min_value,
            lsr,
            shift_right_logical,
            ceil_pow2,
            floor_pow2,
            ceil_log2,
            floor_log2,
            is_pow2,
            clz,
            ctz,
            O,
            typerep_of_t,
            typename_of_t,
            Binary,
            Hex,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            t_of_sexp,
            sexp_of_t,
            of_string,
            to_string,
            pp,
            symbol$8,
            symbol$9,
            symbol$10,
            symbol$11,
            symbol$12,
            symbol$13,
            equal,
            compare,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            Replace_polymorphic_compare,
            comparator,
            Map,
            Set,
            hash_fold_t,
            hash,
            hashable,
            Table,
            Hash_set,
            Hash_queue,
            validate_lbound,
            validate_ubound,
            validate_bound,
            validate_positive,
            validate_non_negative,
            validate_negative,
            validate_non_positive,
            quickcheck_generator,
            quickcheck_observer,
            quickcheck_shrinker,
            gen_incl,
            gen_uniform_incl,
            gen_log_uniform_incl,
            gen_log_incl,
            component];
   }
   function mirror
   (sexp_of_model,
    equal,
    store_set,
    store_value,
    interactive_set,
    interactive_value,
    param){
    var
     sexp_of_model$0 = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    function sexp_of_t(param){
     var
      interactive_054 = param[2],
      store_052 = param[1],
      arg_055 = caml_call2(Core[515], sexp_of_model$0, interactive_054),
      bnds_051 = [0, [1, [0, _U_, [0, arg_055, 0]]], 0],
      arg_053 = caml_call2(Core[515], sexp_of_model$0, store_052),
      bnds_051$0 = [0, [1, [0, _V_, [0, arg_053, 0]]], bnds_051];
     return [1, bnds_051$0];
    }
    function _cR_(param, old_pair, _c4_){
     var
      interactive_value = _c4_[2],
      store_value = _c4_[1],
      interactive_set = param[2],
      store_set = param[1],
      stability =
        caml_call3(Core_Option[18], equal, store_value, interactive_value)
         ? 981641947
         : -504946188;
     if(981641947 <= stability) return Ui_effect[1];
     if(! old_pair){
      if(store_value){
       var store_value$2 = store_value[1];
       return caml_call1(interactive_set, store_value$2);
      }
      if(interactive_value){
       var interactive_value$2 = interactive_value[1];
       return caml_call1(store_set, interactive_value$2);
      }
      var
       _c8_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_if_both_are_None_then_we_s),
          0],
       _c9_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_extra_bonsai_extra_ml_306_),
          _c8_],
       _c__ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$0), _c9_]];
      caml_call2(Core[257], 0, _c__);
      return Ui_effect[1];
     }
     var
      match = old_pair[1],
      old_interactive_value = match[2],
      old_store_value = match[1],
      store_changed =
        1 - caml_call3(Core_Option[18], equal, old_store_value, store_value),
      interactive_changed =
        1
        -
         caml_call3
          (Core_Option[18], equal, old_interactive_value, interactive_value);
     if(! interactive_changed){
      if(! store_changed){
       var
        _c5_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_on_change_triggered_when_n),
           0],
        _c6_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_extra_bonsai_extra_ml_339_),
           _c5_],
        _c7_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _c6_]];
       caml_call2(Core[257], 0, _c7_);
       return Ui_effect[1];
      }
      if(! store_value) return Ui_effect[1];
      var store_value$1 = store_value[1];
      return caml_call1(interactive_set, store_value$1);
     }
     if(! store_changed){
      if(! interactive_value) return Ui_effect[1];
      var interactive_value$1 = interactive_value[1];
      return caml_call1(store_set, interactive_value$1);
     }
     if(interactive_value){
      var interactive_value$0 = interactive_value[1];
      return caml_call1(store_set, interactive_value$0);
     }
     if(! store_value) return Ui_effect[1];
     var store_value$0 = store_value[1];
     return caml_call1(interactive_set, store_value$0);
    }
    var
     _cS_ = caml_call2(Bonsai[49][5][7], store_set, interactive_set),
     callback = caml_call3(Bonsai[49][5][4], 0, _cS_, _cR_);
    function _cT_(param){
     var interactive = param[2], store = param[1];
     return [0, store, interactive];
    }
    var
     _cU_ = caml_call2(Bonsai[49][5][7], store_value, interactive_value),
     _cV_ = caml_call3(Bonsai[49][5][4], 0, _cU_, _cT_);
    function _cW_(a_065, b_066){
     if(a_065 === b_066) return 1;
     var _cX_ = b_066[1], _cY_ = a_065[1];
     function _cZ_(a_058, b_059){return caml_call2(equal, a_058, b_059);}
     var _c0_ = caml_call3(Core[511], _cZ_, _cY_, _cX_);
     if(! _c0_) return _c0_;
     var _c1_ = b_066[2], _c2_ = a_065[2];
     function _c3_(a_060, b_061){return caml_call2(equal, a_060, b_061);}
     return caml_call3(Core[511], _c3_, _c2_, _c1_);
    }
    return caml_call4(Bonsai[44][2], [0, sexp_of_t], _cW_, _cV_, callback);
   }
   function mirror$0
   (sexp_of_model,
    equal,
    store_set,
    store_value,
    interactive_set,
    interactive_value,
    param){
    var
     store_value$0 = caml_call2(Bonsai[49][2], store_value, Core_Option[58]),
     interactive_value$0 =
       caml_call2(Bonsai[49][2], interactive_value, Core_Option[58]);
    return mirror
            (sexp_of_model,
             equal,
             store_set,
             store_value$0,
             interactive_set,
             interactive_value$0,
             0);
   }
   function with_last_modified_time(equal, input){
    function _cL_(now){
     function _cM_(result){
      function _cP_(param, _cQ_){
       var b = _cQ_[1], a = param[1];
       return caml_call2(equal, a, b);
      }
      return caml_call2(Bonsai[48][1], result, _cP_);
     }
     var
      _cN_ = caml_call2(Bonsai[2][3], input, now),
      _cO_ = caml_call1(Bonsai[49][1], _cN_);
     return caml_call3(Bonsai[49][5][1], _W_, _cO_, _cM_);
    }
    return caml_call3(Bonsai[49][5][1], _X_, Bonsai[43][2], _cL_);
   }
   function is_stable(equal, input, time_to_stable){
    function _cg_(sign){
     function _cj_(pattern_syntax_074){
      function _cl_(param){
       if(2 < param >>> 0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
       switch(param){
         case 0:
          var
           _cp_ =
             function(param){
              var
               _cK_ =
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_Bonsai_extra_is_stable_tim);
              return caml_call2(Core[257], 0, _cK_);
             },
           _cq_ = caml_call1(Ui_effect[18], _cp_),
           on_activate = caml_call1(Bonsai[2][1], _cq_),
           _cr_ =
             function(pattern_syntax_075){
              function _cG_(param){return caml_call1(Bonsai[7], 1);}
              function _cH_(param){return 0;}
              var
               _cI_ =
                 caml_call3(Bonsai[49][5][4], _Z_, pattern_syntax_075, _cH_),
               _cJ_ = caml_call1(Bonsai[49][5][6], _cI_);
              return caml_call3(Bonsai[49][5][1], ___, _cJ_, _cG_);
             },
           _cs_ = caml_call4(Bonsai[44][3], [0, on_activate], 0, 0, 0);
          return caml_call3(Bonsai[49][5][1], _$_, _cs_, _cr_);
         case 1:
          return caml_call1(Bonsai[7], 1);
         default:
          var
           _ct_ =
             function(pattern_syntax_076){
              function _cv_(last_modified_time){
               function _cz_(next_stable_time){
                function _cD_(at_next_stable_time){
                 function _cF_(param){return param ? 1 : 0;}
                 return caml_call3
                         (Bonsai[49][5][8], _aa_, at_next_stable_time, _cF_);
                }
                var _cE_ = caml_call1(Bonsai[43][4], next_stable_time);
                return caml_call3(Bonsai[49][5][1], _ab_, _cE_, _cD_);
               }
               function _cA_(param){
                var time_to_stable = param[2], last_modified_time = param[1];
                return caml_call2
                        (Core_Time_ns[67], last_modified_time, time_to_stable);
               }
               var
                _cB_ =
                  caml_call2
                   (Bonsai[49][5][7], last_modified_time, time_to_stable),
                _cC_ = caml_call3(Bonsai[49][5][8], _ac_, _cB_, _cA_);
               return caml_call3(Bonsai[49][5][1], _ad_, _cC_, _cz_);
              }
              function _cw_(param){
               var pattern_syntax_077 = param[2];
               return pattern_syntax_077;
              }
              var
               _cx_ =
                 caml_call3(Bonsai[49][5][4], _ae_, pattern_syntax_076, _cw_),
               _cy_ = caml_call1(Bonsai[49][5][6], _cx_);
              return caml_call3(Bonsai[49][5][1], _af_, _cy_, _cv_);
             },
           _cu_ = with_last_modified_time(equal, input);
          return caml_call3(Bonsai[49][5][1], _ag_, _cu_, _ct_);
       }
      }
      var _cm_ = 3;
      function _cn_(param){
       switch(param){case 0: return 0;case 1: return 1;default: return 2;
       }
      }
      var _co_ = caml_call3(Bonsai[49][5][4], 0, pattern_syntax_074, _cn_);
      return caml_call4(Bonsai[49][5][3], _ah_, _co_, _cm_, _cl_);
     }
     var _ck_ = caml_call1(Bonsai[49][5][6], sign);
     return caml_call3(Bonsai[49][5][1], _ai_, _ck_, _cj_);
    }
    function _ch_(time_to_stable){
     return caml_call1(Core_Time_ns[1][38], time_to_stable);
    }
    var _ci_ = caml_call3(Bonsai[49][5][8], _aj_, time_to_stable, _ch_);
    return caml_call3(Bonsai[49][5][1], _ak_, _ci_, _cg_);
   }
   function t_of_sexp(of_a_083, sexp_088){
    a:
    {
     if(0 === sexp_088[0]){
      var _b$_ = sexp_088[1];
      b:
      if(caml_string_notequal(_b$_, cst_Stable)){
       if(caml_string_notequal(_b$_, cst_Unstable)){
        if(! caml_string_notequal(_b$_, cst_stable)) break b;
        if(caml_string_notequal(_b$_, cst_unstable)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_086, sexp_088);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_086, sexp_088);
     }
     var _ca_ = sexp_088[1];
     if(! _ca_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_086, sexp_088);
     var _cb_ = _ca_[1];
     if(0 !== _cb_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_086, sexp_088);
     var tag_089 = _cb_[1];
     b:
     if(caml_string_notequal(tag_089, cst_Stable)){
      if(caml_string_notequal(tag_089, cst_Unstable)){
       if(! caml_string_notequal(tag_089, cst_stable)) break b;
       if(caml_string_notequal(tag_089, cst_unstable)) break a;
      }
      var
       sexps_094 = _ca_[2],
       _cc_ =
         function(param){
          var unstable_value = param[2][1], previously_stable = param[1];
          return [1, previously_stable, unstable_value];
         },
       _cd_ = 0,
       _ce_ =
         function(param){
          return caml_string_notequal(param, cst_previously_stable$0)
                  ? caml_string_notequal(param, cst_unstable_value$0) ? -1 : 1
                  : 0;
         },
       _cf_ =
         [0,
          cst_previously_stable,
          1,
          caml_call1(Core[516], of_a_083),
          [0, cst_unstable_value, 1, of_a_083, 0]];
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_086,
               sexp_088,
               _cf_,
               _ce_,
               _cd_,
               _cc_,
               sexps_094);
     }
     var sexp_args_090 = _ca_[2];
     if(sexp_args_090 && ! sexp_args_090[2]){
      var
       arg0_091 = sexp_args_090[1],
       res0_092 = caml_call1(of_a_083, arg0_091);
      return [0, res0_092];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_086,
              tag_089,
              sexp_088);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_086, sexp_088);
   }
   function sexp_of_t(of_a_096, param){
    if(0 === param[0]){
     var arg0_097 = param[1], res0_098 = caml_call1(of_a_096, arg0_097);
     return [1, [0, _al_, [0, res0_098, 0]]];
    }
    var
     unstable_value_102 = param[2],
     previously_stable_100 = param[1],
     arg_103 = caml_call1(of_a_096, unstable_value_102),
     bnds_099 = [0, [1, [0, _am_, [0, arg_103, 0]]], 0],
     arg_101 = caml_call2(Core[515], of_a_096, previously_stable_100),
     bnds_099$0 = [0, [1, [0, _an_, [0, arg_101, 0]]], bnds_099];
    return [1, [0, _ao_, bnds_099$0]];
   }
   function equal(cmp_a, a_105, b_106){
    if(a_105 === b_106) return 1;
    if(0 === a_105[0]){
     var a_107 = a_105[1];
     if(0 !== b_106[0]) return 0;
     var b_108 = b_106[1];
     return caml_call2(cmp_a, a_107, b_108);
    }
    if(0 === b_106[0]) return 0;
    var _b7_ = b_106[1], _b8_ = a_105[1];
    function _b9_(a_111, b_112){return caml_call2(cmp_a, a_111, b_112);}
    var _b__ = caml_call3(Core[511], _b9_, _b8_, _b7_);
    return _b__ ? caml_call2(cmp_a, a_105[2], b_106[2]) : _b__;
   }
   function most_recent_stable_value(param){
    if(0 === param[0]){var a = param[1]; return [0, a];}
    var previously_stable = param[1];
    return previously_stable;
   }
   function prefer_stable_value(param){
    if(0 === param[0]){var a = param[1]; return a;}
    var unstable_value = param[2], previously_stable = param[1];
    if(! previously_stable) return unstable_value;
    var a$0 = previously_stable[1];
    return a$0;
   }
   var
    Stability =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       most_recent_stable_value,
       prefer_stable_value];
   function value_stability(sexp_of_model, input_equal, input, time_to_stable){
    var sexp_of_t = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    function _bG_(is_stable){
     function _bI_(most_recent_stable_and_true){
      function _bP_(pattern_syntax_126){
       function _bR_(param){
        if(0 === param){
         var
          _bV_ =
            function(most_recent_stable_and_true){
             function _b0_(param){
              var
               _b3_ = param[2],
               input = _b3_[2],
               is_stable = _b3_[1],
               match = param[1],
               must_be_true = match[2],
               most_recent_stable = match[1];
              if(! must_be_true){
               var
                _b4_ =
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_value_which_passed_through),
                   0],
                _b5_ =
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_extra_bonsai_extra_ml_468_),
                   _b4_],
                _b6_ =
                  [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$1), _b5_]];
               caml_call2(Core[257], 0, _b6_);
              }
              if
               (caml_call2(input_equal, input, most_recent_stable)
                && is_stable)
               return [0, input];
              return [1, [0, most_recent_stable], input];
             }
             var
              _b1_ = caml_call2(Bonsai[49][5][7], is_stable, input),
              _b2_ =
                caml_call2
                 (Bonsai[49][5][7], most_recent_stable_and_true, _b1_);
             return caml_call3(Bonsai[49][5][8], _ap_, _b2_, _b0_);
            },
          _bW_ =
            function(param){
             if(! param)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _aq_], 1);
             var pattern_syntax_127 = param[1];
             return pattern_syntax_127;
            },
          _bX_ = caml_call3(Bonsai[49][5][4], _ar_, pattern_syntax_126, _bW_),
          _bY_ = caml_call1(Bonsai[49][5][6], _bX_);
         return caml_call3(Bonsai[49][5][1], _as_, _bY_, _bV_);
        }
        if(1 !== param)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
        function _bZ_(input){return [1, 0, input];}
        return caml_call3(Bonsai[49][5][8], _at_, input, _bZ_);
       }
       var _bS_ = 2;
       function _bT_(param){return param ? 0 : 1;}
       var _bU_ = caml_call3(Bonsai[49][5][4], 0, pattern_syntax_126, _bT_);
       return caml_call4(Bonsai[49][5][3], _av_, _bU_, _bS_, _bR_);
      }
      var _bQ_ = caml_call1(Bonsai[49][5][6], most_recent_stable_and_true);
      return caml_call3(Bonsai[49][5][1], _aw_, _bQ_, _bP_);
     }
     function _bJ_(input_and_stability){
      function equal(a_120, b_121){
       var
        t_123 = a_120[2],
        t_122 = a_120[1],
        t_125 = b_121[2],
        t_124 = b_121[1],
        _bO_ = caml_call2(input_equal, t_122, t_124);
       return _bO_ ? caml_call2(Core[318], t_123, t_125) : _bO_;
      }
      var
       sexp_of_model =
         [0,
          function(param){
           var
            arg1_117 = param[2],
            arg0_116 = param[1],
            res0_118 = caml_call1(sexp_of_t, arg0_116),
            res1_119 = caml_call1(Core[323], arg1_117);
           return [1, [0, res0_118, [0, res1_119, 0]]];
          }];
      function _bN_(a){return a[2] ? [0, a] : 0;}
      return caml_call4
              (Bonsai[31], sexp_of_model, equal, input_and_stability, _bN_);
     }
     var
      _bK_ = caml_call2(Bonsai[2][3], input, is_stable),
      _bL_ = caml_call1(Bonsai[49][1], _bK_),
      _bM_ = caml_call3(Bonsai[49][5][1], _ax_, _bL_, _bJ_);
     return caml_call3(Bonsai[49][5][1], _ay_, _bM_, _bI_);
    }
    var _bH_ = is_stable(input_equal, input, time_to_stable);
    return caml_call3(Bonsai[49][5][1], _az_, _bH_, _bG_);
   }
   function t_of_sexp$0(sexp_136){
    a:
    {
     if(0 === sexp_136[0]){
      var _bC_ = sexp_136[1];
      b:
      if(caml_string_notequal(_bC_, cst_Busy)){
       if(caml_string_notequal(_bC_, cst_Idle)){
        if(! caml_string_notequal(_bC_, cst_busy)) break b;
        if(caml_string_notequal(_bC_, cst_idle)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _bD_ = sexp_136[1];
     if(! _bD_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_135, sexp_136);
     var _bE_ = _bD_[1];
     if(0 !== _bE_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_135, sexp_136);
     var _bF_ = _bE_[1];
     b:
     if(caml_string_notequal(_bF_, cst_Busy)){
      if(caml_string_notequal(_bF_, cst_Idle)){
       if(! caml_string_notequal(_bF_, cst_busy)) break b;
       if(caml_string_notequal(_bF_, cst_idle)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_135, sexp_136);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_135, sexp_136);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_135, sexp_136);
   }
   function sexp_of_t$0(param){return param ? _aA_ : _aB_;}
   function t_of_sexp$1(of_a_139, sexp_144){
    a:
    {
     if(0 === sexp_144[0]){
      var _bz_ = sexp_144[1];
      b:
      if(caml_string_notequal(_bz_, cst_Busy)){
       if(caml_string_notequal(_bz_, cst_Result)){
        if(! caml_string_notequal(_bz_, cst_busy)) break b;
        if(caml_string_notequal(_bz_, cst_result)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_142, sexp_144);
      }
      return 0;
     }
     var _bA_ = sexp_144[1];
     if(! _bA_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_142, sexp_144);
     var _bB_ = _bA_[1];
     if(0 !== _bB_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_142, sexp_144);
     var tag_145 = _bB_[1];
     b:
     if(caml_string_notequal(tag_145, cst_Busy)){
      if(caml_string_notequal(tag_145, cst_Result)){
       if(! caml_string_notequal(tag_145, cst_busy)) break b;
       if(caml_string_notequal(tag_145, cst_result)) break a;
      }
      var sexp_args_146 = _bA_[2];
      if(sexp_args_146 && ! sexp_args_146[2]){
       var
        arg0_147 = sexp_args_146[1],
        res0_148 = caml_call1(of_a_139, arg0_147);
       return [0, res0_148];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_142,
               tag_145,
               sexp_144);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_142, sexp_144);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_142, sexp_144);
   }
   function sexp_of_t$1(of_a_150, param){
    if(! param) return _aD_;
    var arg0_151 = param[1], res0_152 = caml_call1(of_a_150, arg0_151);
    return [1, [0, _aC_, [0, res0_152, 0]]];
   }
   var Response = [0, t_of_sexp$1, sexp_of_t$1];
   function sexp_of_t$2(param){return param ? _aE_ : _aF_;}
   function effect(f){
    function _a$_(pattern_syntax_158){
     function _bg_(status){
      function _bk_(inject_status){
       function _bo_(effect){
        var _by_ = caml_call2(Bonsai[2][3], effect, status);
        return caml_call1(Bonsai[49][1], _by_);
       }
       function _bp_(param){
        var f = param[2], inject_status = param[1];
        return function(query){
         function _bs_(param){
          if(! param) return caml_call1(Ui_effect[13][1], 0);
          function _bu_(result){
           function _bw_(param){return [0, result];}
           var _bx_ = caml_call1(inject_status, 1);
           return caml_call2(Ui_effect[13][4][3], _bx_, _bw_);
          }
          var _bv_ = caml_call1(f, query);
          return caml_call2(Ui_effect[13][4][2], _bv_, _bu_);
         }
         var _bt_ = caml_call1(inject_status, 0);
         return caml_call2(Ui_effect[13][4][2], _bt_, _bs_);};
       }
       var
        _bq_ = caml_call2(Bonsai[49][5][7], inject_status, f),
        _br_ = caml_call3(Bonsai[49][5][8], _aG_, _bq_, _bp_);
       return caml_call3(Bonsai[49][5][1], _aH_, _br_, _bo_);
      }
      function _bl_(param){
       var pattern_syntax_159 = param[2];
       return pattern_syntax_159;
      }
      var
       _bm_ = caml_call3(Bonsai[49][5][4], _aI_, pattern_syntax_158, _bl_),
       _bn_ = caml_call1(Bonsai[49][5][6], _bm_);
      return caml_call3(Bonsai[49][5][1], _aJ_, _bn_, _bk_);
     }
     function _bh_(param){
      var pattern_syntax_160 = param[1];
      return pattern_syntax_160;
     }
     var
      _bi_ = caml_call3(Bonsai[49][5][4], _aK_, pattern_syntax_158, _bh_),
      _bj_ = caml_call1(Bonsai[49][5][6], _bi_);
     return caml_call3(Bonsai[49][5][1], _aL_, _bj_, _bg_);
    }
    var _ba_ = 0;
    function _bb_(param, _bf_, model, action){
     if(action) return _aM_;
     var response = model ? 1 : 0;
     return [0, 0, response];
    }
    var
     _bc_ = 1,
     _bd_ = [0, function(a_161, b_162){return a_161 === b_162 ? 1 : 0;}],
     _be_ =
       caml_call7
        (Bonsai[19],
         0,
         [0, sexp_of_t$0],
         [0, sexp_of_t$2],
         _bd_,
         _bc_,
         _bb_,
         _ba_);
    return caml_call3(Bonsai[49][5][1], _aN_, _be_, _a$_);
   }
   function _aO_(pattern_syntax_169){
    function _a7_(bonk){return caml_call1(Bonsai[49][1], bonk);}
    function _a8_(param){
     var pattern_syntax_170 = param[2];
     return pattern_syntax_170;
    }
    var
     _a9_ = caml_call3(Bonsai[49][5][4], _aP_, pattern_syntax_169, _a8_),
     _a__ = caml_call1(Bonsai[49][5][6], _a9_);
    return caml_call3(Bonsai[49][5][1], _aQ_, _a__, _a7_);
   }
   var _aR_ = 0;
   function _aS_(context, param, effect){
    return caml_call2(Bonsai[16][2], context, effect);
   }
   var
    _aT_ = caml_call7(Bonsai[17], 0, 0, 0, 0, 0, _aS_, _aR_),
    bonk = caml_call3(Bonsai[49][5][1], _aU_, _aT_, _aO_);
   function chain_incr_effects(input){
    function _aY_(pattern_syntax_171){
     function _a3_(inject){return caml_call1(Bonsai[49][1], inject);}
     function _a4_(param){
      var pattern_syntax_172 = param[2];
      return pattern_syntax_172;
     }
     var
      _a5_ = caml_call3(Bonsai[49][5][4], _aV_, pattern_syntax_171, _a4_),
      _a6_ = caml_call1(Bonsai[49][5][6], _a5_);
     return caml_call3(Bonsai[49][5][1], _aW_, _a6_, _a3_);
    }
    function _aZ_(ctx, input, model, effect_fns){
     if(input && effect_fns){
      var
       dependents = effect_fns[2],
       effect_fn = effect_fns[1],
       input$0 = input[1],
       _a1_ =
         function(param){return caml_call2(Bonsai[16][1], ctx, dependents);},
       _a2_ = caml_call1(effect_fn, input$0),
       effect = caml_call2(Ui_effect[13][4][2], _a2_, _a1_);
      return caml_call2(Bonsai[16][2], ctx, effect);
     }
     return 0;
    }
    var _a0_ = caml_call7(Bonsai[18], 0, 0, 0, 0, 0, _aZ_, input);
    return caml_call3(Bonsai[49][5][1], _aX_, _a0_, _aY_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_extra);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_extra);
   var
    Bonsai_extra =
      [0,
       with_inject_fixed_point,
       with_self_effect,
       pipe,
       exactly_once,
       exactly_once_with_value,
       value_with_override,
       state_machine0_dynamic_model,
       state_machine1_dynamic_model,
       state_dynamic_model,
       Id_gen,
       mirror$0,
       mirror,
       with_last_modified_time,
       is_stable,
       Stability,
       value_stability,
       [0, [0, t_of_sexp$0, sexp_of_t$0], Response, effect],
       bonk,
       chain_incr_effects];
   runtime.caml_register_global(176, Bonsai_extra, cst_Bonsai_extra$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
