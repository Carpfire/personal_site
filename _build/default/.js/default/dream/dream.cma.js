// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream
//# unitInfo: Requires: Dream__cipher__Cipher, Dream__cipher__Random, Dream__graphql__Graphql, Dream__http__Error_handler, Dream__http__Http, Dream__server__Catch, Dream__server__Cookie, Dream__server__Csrf, Dream__server__Echo, Dream__server__Flash, Dream__server__Form, Dream__server__Helpers, Dream__server__Livereload, Dream__server__Log, Dream__server__Origin_referrer_check, Dream__server__Query, Dream__server__Router, Dream__server__Session, Dream__server__Site_prefix, Dream__server__Tag, Dream__server__Upload, Dream__sql__Session, Dream__sql__Sql, Dream__unix__Static, Dream_pure__Formats, Dream_pure__Message, Dream_pure__Method, Dream_pure__Status, Dream_pure__Stream, Fmt_tty, Logs, Lwt_main, Mirage_crypto_rng, Mirage_crypto_rng_lwt, Ptime, Ptime_clock
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Dream_server_Router = global_data.Dream__server__Router,
    Dream_server_Site_prefix = global_data.Dream__server__Site_prefix,
    Lwt_main = global_data.Lwt_main,
    Mirage_crypto_rng = global_data.Mirage_crypto_rng,
    Mirage_crypto_rng_lwt = global_data.Mirage_crypto_rng_lwt,
    Ptime_clock = global_data.Ptime_clock,
    Ptime = global_data.Ptime,
    Dream_server_Log = global_data.Dream__server__Log,
    Logs = global_data.Logs,
    Fmt_tty = global_data.Fmt_tty,
    Dream_cipher_Random = global_data.Dream__cipher__Random,
    Dream_server_Session = global_data.Dream__server__Session,
    Dream_pure_Method = global_data.Dream_pure__Method,
    Dream_pure_Status = global_data.Dream_pure__Status,
    Dream_server_Helpers = global_data.Dream__server__Helpers,
    Dream_pure_Message = global_data.Dream_pure__Message,
    Dream_server_Query = global_data.Dream__server__Query,
    Dream_server_Cookie = global_data.Dream__server__Cookie,
    Dream_pure_Stream = global_data.Dream_pure__Stream,
    Dream_server_Origin_referrer_c =
      global_data.Dream__server__Origin_referrer_check,
    Dream_server_Form = global_data.Dream__server__Form,
    Dream_server_Upload = global_data.Dream__server__Upload,
    Dream_server_Csrf = global_data.Dream__server__Csrf,
    Dream_server_Tag = global_data.Dream__server__Tag,
    Dream_server_Livereload = global_data.Dream__server__Livereload,
    Dream_unix_Static = global_data.Dream__unix__Static,
    Dream_sql_Session = global_data.Dream__sql__Session,
    Dream_server_Flash = global_data.Dream__server__Flash,
    Dream_graphql_Graphql = global_data.Dream__graphql__Graphql,
    Dream_sql_Sql = global_data.Dream__sql__Sql,
    Dream_http_Error_handler = global_data.Dream__http__Error_handler,
    Dream_server_Catch = global_data.Dream__server__Catch,
    Dream_http_Http = global_data.Dream__http__Http,
    Dream_pure_Formats = global_data.Dream_pure__Formats,
    Dream_cipher_Cipher = global_data.Dream__cipher__Cipher,
    Dream_server_Echo = global_data.Dream__server__Echo,
    sub_log = Dream_server_Log[19],
    convenience_log = Dream_server_Log[20],
    initialize_log = Dream_server_Log[24],
    set_log_level = Dream_server_Log[25],
    include =
      caml_call1
       (Dream_server_Log[26],
        [0, Ptime_clock[4], Ptime_clock[3], Ptime_clock[5]]),
    initialize = include[4],
    logger = include[5],
    default_log = caml_call2(sub_log, 0, caml_call1(Logs[7][2], Logs[6])),
    arg = Fmt_tty[2];
   caml_call1(initialize, function(eta){return caml_call3(arg, 0, 0, eta);});
   function now(param){
    var _g_ = caml_call1(Ptime_clock[4], 0), _h_ = caml_call1(Ptime[2], _g_);
    return caml_call1(Ptime[10], _h_);
   }
   function _a_(param){
    return caml_call3(Mirage_crypto_rng_lwt[1], 0, 0, Mirage_crypto_rng[4]);
   }
   caml_call1(Dream_cipher_Random[3], _a_);
   var
    session = Dream_server_Session[17],
    put_session = Dream_server_Session[18],
    drop_session_field = Dream_server_Session[19],
    all_session_values = Dream_server_Session[20],
    invalidate_session = Dream_server_Session[21],
    session_id = Dream_server_Session[22],
    session_label = Dream_server_Session[23],
    session_expires_at = Dream_server_Session[24],
    include$0 =
      caml_call1
       (Dream_server_Session[16],
        [0, Ptime_clock[4], Ptime_clock[3], Ptime_clock[5]]),
    memory_sessions = include$0[2],
    cookie_sessions = include$0[3],
    method_to_string = Dream_pure_Method[1],
    string_to_method = Dream_pure_Method[2],
    normalize_method = Dream_pure_Method[3],
    methods_equal = Dream_pure_Method[4],
    is_informational = Dream_pure_Status[1],
    is_successful = Dream_pure_Status[2],
    is_redirection = Dream_pure_Status[3],
    is_client_error = Dream_pure_Status[4],
    is_server_error = Dream_pure_Status[5],
    status_to_int = Dream_pure_Status[6],
    int_to_status = Dream_pure_Status[7],
    status_to_reason = Dream_pure_Status[8],
    status_to_string = Dream_pure_Status[9],
    normalize_status = Dream_pure_Status[10],
    status_codes_equal = Dream_pure_Status[11],
    client = Dream_server_Helpers[2],
    tls = Dream_server_Helpers[5],
    method = Dream_pure_Message[2],
    target = Dream_pure_Message[3],
    prefix = Dream_server_Router[16],
    path = Dream_server_Router[15],
    set_client = Dream_server_Helpers[3],
    set_method = Dream_pure_Message[4],
    query = Dream_server_Query[2],
    queries = Dream_server_Query[3],
    all_queries = Dream_server_Query[1],
    response = Dream_server_Helpers[9],
    respond = Dream_server_Helpers[10],
    html = Dream_server_Helpers[11],
    json = Dream_server_Helpers[12],
    redirect = Dream_server_Helpers[13],
    empty = Dream_server_Helpers[15],
    status = Dream_pure_Message[7],
    set_status = Dream_pure_Message[8],
    header = Dream_pure_Message[9],
    headers = Dream_pure_Message[10],
    all_headers = Dream_pure_Message[11],
    has_header = Dream_pure_Message[12],
    add_header = Dream_pure_Message[13],
    drop_header = Dream_pure_Message[14],
    set_header = Dream_pure_Message[15],
    set_cookie = Dream_server_Cookie[4],
    drop_cookie = Dream_server_Cookie[5],
    cookie = Dream_server_Cookie[3],
    all_cookies = Dream_server_Cookie[1],
    body = Dream_pure_Message[19],
    set_body = Dream_pure_Message[20],
    body_stream = Dream_pure_Message[28],
    stream = Dream_server_Helpers[14],
    read = Dream_pure_Message[23],
    write = Dream_pure_Message[24],
    flush = Dream_pure_Message[25],
    close = Dream_pure_Message[26],
    client_stream = Dream_pure_Message[27],
    server_stream = Dream_pure_Message[28],
    set_client_stream = Dream_pure_Message[29],
    set_server_stream = Dream_pure_Message[30],
    read_stream = Dream_pure_Stream[12],
    write_stream = Dream_pure_Stream[15],
    flush_stream = Dream_pure_Stream[16],
    ping_stream = Dream_pure_Stream[17],
    pong_stream = Dream_pure_Stream[18],
    close_stream = Dream_pure_Stream[10],
    abort_stream = Dream_pure_Stream[11],
    websocket = Dream_server_Helpers[17],
    send = Dream_server_Helpers[20],
    receive = Dream_server_Helpers[18],
    receive_fragment = Dream_server_Helpers[19],
    close_websocket = Dream_pure_Message[33],
    origin_referrer_check = Dream_server_Origin_referrer_c[2],
    _b_ = Dream_server_Form[5];
   function form(_f_){return caml_call2(_b_, _f_, now);}
   var _c_ = Dream_server_Upload[11];
   function multipart(_e_){return caml_call2(_c_, _e_, now);}
   var
    upload = Dream_server_Upload[9],
    upload_part = Dream_server_Upload[6],
    csrf_token = caml_call1(Dream_server_Csrf[3], now),
    verify_csrf_token = caml_call1(Dream_server_Csrf[5], now),
    csrf_tag = caml_call1(Dream_server_Tag[2], now),
    no_middleware = Dream_pure_Message[37],
    pipeline = Dream_pure_Message[38],
    livereload = Dream_server_Livereload[4],
    router = Dream_server_Router[13],
    get = Dream_server_Router[1],
    post = Dream_server_Router[2],
    put = Dream_server_Router[3],
    delete$0 = Dream_server_Router[4],
    head = Dream_server_Router[5],
    connect = Dream_server_Router[6],
    options = Dream_server_Router[7],
    trace = Dream_server_Router[8],
    patch = Dream_server_Router[9],
    any = Dream_server_Router[10],
    not_found = Dream_server_Helpers[16],
    scope = Dream_server_Router[12],
    no_route = Dream_server_Router[11],
    static$0 = Dream_unix_Static[4],
    from_filesystem = Dream_unix_Static[2],
    mime_lookup = Dream_unix_Static[1],
    param = Dream_server_Router[14];
   function session_field(request, name){
    return caml_call2(session, name, request);
   }
   function set_session_field(request, name, value){
    return caml_call3(put_session, name, value, request);
   }
   var
    sql_sessions = Dream_sql_Session[16],
    flash = Dream_server_Flash[9],
    flash_messages = Dream_server_Flash[7],
    add_flash_message = Dream_server_Flash[8],
    graphql = Dream_graphql_Graphql[11],
    graphiql = Dream_graphql_Graphql[12],
    sql_pool = Dream_sql_Sql[5],
    sql = Dream_sql_Sql[7],
    error = default_log[1],
    warning = default_log[2],
    info = default_log[3],
    debug = default_log[4],
    error_template = Dream_http_Error_handler[3],
    debug_error_handler = Dream_http_Error_handler[2],
    catch$0 = Dream_server_Catch[1],
    run = Dream_http_Http[22],
    serve = Dream_http_Http[21],
    with_site_prefix = Dream_server_Site_prefix[2],
    html_escape = Dream_pure_Formats[1],
    to_base64url = Dream_pure_Formats[2],
    from_base64url = Dream_pure_Formats[3],
    to_percent_encoded = Dream_pure_Formats[4],
    from_percent_encoded = Dream_pure_Formats[5],
    to_form_urlencoded = Dream_pure_Formats[6],
    from_form_urlencoded = Dream_pure_Formats[7],
    from_cookie = Dream_pure_Formats[8],
    split_target = Dream_pure_Formats[9],
    from_path = Dream_pure_Formats[10],
    to_path = Dream_pure_Formats[11],
    drop_trailing_slash = Dream_pure_Formats[12],
    text_html = Dream_pure_Formats[13],
    application_json = Dream_pure_Formats[14],
    to_set_cookie = Dream_pure_Formats[15],
    set_secret = Dream_cipher_Cipher[3],
    random = Dream_cipher_Random[5],
    encrypt = Dream_cipher_Cipher[7],
    decrypt = Dream_cipher_Cipher[8],
    new_field = Dream_pure_Message[39],
    field = Dream_pure_Message[40],
    set_field = Dream_pure_Message[41],
    request = Dream_server_Helpers[8];
   function test(opt, handler, request){
    if(opt) var sth = opt[1], prefix = sth; else var prefix = cst;
    var
     app =
       caml_call1(caml_call1(Dream_server_Site_prefix[2], prefix), handler),
     _d_ = caml_call1(app, request);
    return caml_call1(Lwt_main[1], _d_);
   }
   var sort_headers = Dream_pure_Message[17], echo = Dream_server_Echo[1];
   function with_path(path, message){
    caml_call2(Dream_server_Router[17], message, path);
    return message;
   }
   var
    Dream =
      [0,
       method_to_string,
       string_to_method,
       methods_equal,
       normalize_method,
       status_to_string,
       status_to_reason,
       status_to_int,
       int_to_status,
       is_informational,
       is_successful,
       is_redirection,
       is_client_error,
       is_server_error,
       status_codes_equal,
       normalize_status,
       client,
       tls,
       method,
       target,
       prefix,
       path,
       set_client,
       set_method,
       with_path,
       query,
       queries,
       all_queries,
       response,
       respond,
       html,
       json,
       redirect,
       empty,
       status,
       set_status,
       header,
       headers,
       all_headers,
       has_header,
       add_header,
       drop_header,
       set_header,
       set_cookie,
       drop_cookie,
       cookie,
       all_cookies,
       body,
       set_body,
       body_stream,
       stream,
       read,
       write,
       flush,
       close,
       read_stream,
       write_stream,
       flush_stream,
       ping_stream,
       pong_stream,
       close_stream,
       abort_stream,
       websocket,
       send,
       receive,
       receive_fragment,
       close_websocket,
       origin_referrer_check,
       form,
       multipart,
       upload,
       upload_part,
       csrf_token,
       verify_csrf_token,
       csrf_tag,
       no_middleware,
       livereload,
       pipeline,
       client_stream,
       server_stream,
       set_client_stream,
       set_server_stream,
       router,
       get,
       post,
       put,
       delete$0,
       head,
       connect,
       options,
       trace,
       patch,
       any,
       not_found,
       param,
       scope,
       no_route,
       static$0,
       from_filesystem,
       mime_lookup,
       session_field,
       set_session_field,
       drop_session_field,
       all_session_values,
       invalidate_session,
       memory_sessions,
       cookie_sessions,
       sql_sessions,
       session_id,
       session_label,
       session_expires_at,
       flash,
       flash_messages,
       add_flash_message,
       graphql,
       graphiql,
       sql_pool,
       sql,
       logger,
       convenience_log,
       error,
       warning,
       info,
       debug,
       sub_log,
       initialize_log,
       set_log_level,
       error_template,
       debug_error_handler,
       catch$0,
       run,
       serve,
       with_site_prefix,
       html_escape,
       to_base64url,
       from_base64url,
       to_percent_encoded,
       from_percent_encoded,
       to_form_urlencoded,
       from_form_urlencoded,
       from_cookie,
       to_set_cookie,
       split_target,
       from_path,
       to_path,
       drop_trailing_slash,
       text_html,
       application_json,
       set_secret,
       random,
       encrypt,
       decrypt,
       new_field,
       field,
       set_field,
       request,
       test,
       sort_headers,
       echo];
   runtime.caml_register_global(37, Dream, "Dream");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
