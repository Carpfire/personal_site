// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Base64_rfc2045
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Format, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    cst_Expected_Await_encode = "Expected `Await encode",
    cst_src_base64_rfc2045_ml = "src/base64_rfc2045.ml",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    default_alphabet = cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Format = global_data.Stdlib__Format,
    _d_ = [0, cst_src_base64_rfc2045_ml, 451, 9],
    _c_ = [0, [11, cst_Expected_Await_encode, 0], cst_Expected_Await_encode],
    _b_ = [0, cst_src_base64_rfc2045_ml, 151, 9],
    _a_ =
      [0,
       [11,
        "Invalid bounds (off: ",
        [4, 0, 0, 0, [11, ", len: ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "Invalid bounds (off: %d, len: %d)"];
   function invalid_arg(fmt){
    function _J_(s){return caml_call1(Stdlib[1], s);}
    return caml_call2(Stdlib_Format[147], _J_, fmt);
   }
   function invalid_bounds(off, len){
    return caml_call2(invalid_arg(_a_), off, len);
   }
   function malformed(chr){
    return [0, 659980059, caml_call2(Stdlib_String[1], 1, chr)];
   }
   function unsafe_byte(source, off, pos){
    return runtime.caml_bytes_unsafe_get(source, off + pos | 0);
   }
   function unsafe_set_chr(source, off, chr){
    runtime.caml_bytes_unsafe_set(source, off, chr);
    return;
   }
   function continue$0(state, param){
    var size = param[2], quantum = param[1];
    return [0, 192584839, [0, quantum, size, state[3]]];
   }
   function r_repr(state, chr){
    var
     size = state[2],
     quantum = state[1],
     code =
       caml_string_get
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?456789:;<=\xff\xff\xff\xff\xff\xff\xff\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0b\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff\xff\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123\xff\xff\xff\xff\xff",
         chr);
    if(3 < size >>> 0) return malformed(chr);
    switch(size){
      case 0:
       return continue$0(state, [0, code, 1]);
      case 1:
       return continue$0(state, [0, quantum << 6 | code, 2]);
      case 2:
       return continue$0(state, [0, quantum << 6 | code, 3]);
      default:
       unsafe_set_chr(state[3], 0, (quantum >>> 10 | 0) & 255);
       unsafe_set_chr(state[3], 1, (quantum >>> 2 | 0) & 255);
       unsafe_set_chr(state[3], 2, (quantum << 6 | code) & 255);
       return [0, 365482660, [0, 0, 0, state[3]]];
    }
   }
   function i_rem(decoder){return (decoder[5] - decoder[4] | 0) + 1 | 0;}
   function end_of_input(decoder){
    decoder[2] = Stdlib_Bytes[3];
    decoder[3] = 0;
    decoder[4] = 0;
    decoder[5] = Stdlib[20];
    return 0;
   }
   function src(decoder, source, off, len){
    if
     (0 <= off && 0 <= len && caml_ml_bytes_length(source) >= (off + len | 0))
     return 0 === len
             ? end_of_input(decoder)
             : (decoder
                [2]
               = source,
               decoder[3] = off,
               decoder[4] = 0,
               decoder[5] = len - 1 | 0,
               0);
    return invalid_bounds(off, len);
   }
   function refill(k, decoder){
    var match = decoder[1];
    if(typeof match === "number"){decoder[12] = k; return 1006505782;}
    if(438511779 <= match[1]){
     var
      ic = match[2],
      len =
        caml_call4
         (Stdlib[84], ic, decoder[2], 0, caml_ml_bytes_length(decoder[2]));
     src(decoder, decoder[2], 0, len);
     return caml_call1(k, decoder);
    }
    end_of_input(decoder);
    return caml_call1(k, decoder);
   }
   function ret(k, v, byte_count, decoder){
    decoder[12] = k;
    decoder[9] = decoder[9] + byte_count | 0;
    decoder[10] = decoder[10] + byte_count | 0;
    if(78 < decoder[10]) decoder[8] = 1;
    return caml_call2(decoder[11], decoder, v);
   }
   function decode_base64_lf_after_cr(decoder){
    var rem = i_rem(decoder);
    return 0 <= rem
            ? 0
              === rem
              ? refill(decode_base64_lf_after_cr, decoder)
              : 10
                === unsafe_byte(decoder[2], decoder[3], decoder[4])
                ? (decoder
                   [4]
                  = decoder[4] + 1 | 0,
                  ret(decode_base64, -879233260, 2, decoder))
                : ret(decode_base64, malformed(13), 1, decoder)
            : ret(decode_base64, malformed(13), 1, decoder);
   }
   function decode_base64(decoder){
    var rem = i_rem(decoder);
    if(0 >= rem){
     if(0 <= rem) return refill(decode_base64, decoder);
     var
      param = decoder[6],
      buffer = param[3],
      size = param[2],
      quantum = param[1],
      _G_ = 0;
     if(2 < size >>> 0){
      if(3 !== size)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
      var quantum$0 = quantum >>> 2 | 0;
      unsafe_set_chr(buffer, 0, (quantum$0 >>> 8 | 0) & 255);
      unsafe_set_chr(buffer, 1, quantum$0 & 255);
      var
       _H_ =
         [0,
          365482660,
          [0, quantum$0, size, caml_call3(Stdlib_Bytes[7], buffer, 0, 2)]];
     }
     else if(2 <= size)
      var
       quantum$1 = quantum >>> 4 | 0,
       _H_ =
         [0,
          365482660,
          [0,
           quantum$1,
           size,
           caml_call2(Stdlib_Bytes[1], 1, quantum$1 & 255)]];
     else
      var _H_ = [0, 365482660, [0, quantum, size, Stdlib_Bytes[3]]];
     return ret
             (function(decoder){
               var padding = decoder[7], size = decoder[6][2];
               a:
               {
                if(3 >= size >>> 0)
                 switch(size){
                   case 0:
                    if(0 === padding){var _I_ = 1; break a;} break;
                   case 1:
                    var _I_ = 0; break a;
                   case 2:
                    if(2 === padding){var _I_ = 1; break a;} break;
                   default: if(1 === padding){var _I_ = 1; break a;}
                 }
                var _I_ = 0;
               }
               if(_I_) return 3455931;
               function k(param){return 3455931;}
               decoder[12] = k;
               return -445616801;
              },
              _H_,
              _G_,
              decoder);
    }
    var chr$0 = unsafe_byte(decoder[2], decoder[3], decoder[4]);
    a:
    {
     b:
     {
      if(44 > chr$0){
       if(14 <= chr$0){
        if(32 !== chr$0){if(43 <= chr$0) break b; break a;}
       }
       else if(9 !== chr$0){
        if(13 > chr$0) break a;
        decoder[4] = decoder[4] + 1 | 0;
        return decode_base64_lf_after_cr(decoder);
       }
       decoder[4] = decoder[4] + 1 | 0;
       return ret(decode_base64, 4352180, 1, decoder);
      }
      if(62 <= chr$0){
       if(91 <= chr$0){
        if(25 < chr$0 - 97 >>> 0) break a;
       }
       else if(65 > chr$0) break a;
      }
      else{
       if(58 <= chr$0){
        if(61 > chr$0) break a;
        decoder[7] = decoder[7] + 1 | 0;
        decoder[4] = decoder[4] + 1 | 0;
        return ret(decode_base64, 500072881, 1, decoder);
       }
       if(47 > chr$0) break a;
      }
     }
     if(0 !== decoder[7]){
      decoder[4] = decoder[4] + 1 | 0;
      return ret(decode_base64, malformed(chr$0), 1, decoder);
     }
     var v$1 = r_repr(decoder[6], chr$0);
     b:
     {
      c:
      {
       var pos = 1, v = v$1;
       for(;;){
        if(365482660 <= v[1]){
         decoder[4] = decoder[4] + pos | 0;
         return ret(decode_base64, v, pos, decoder);
        }
        var state = v[2];
        if(0 >= ((decoder[5] - (decoder[4] + pos | 0) | 0) + 1 | 0)){
         decoder[4] = decoder[4] + pos | 0;
         decoder[9] = decoder[9] + pos | 0;
         decoder[10] = decoder[10] + pos | 0;
         decoder[6] = state;
         return refill(decode_base64, decoder);
        }
        var chr = unsafe_byte(decoder[2], decoder[3], decoder[4] + pos | 0);
        if(44 <= chr)
         if(62 <= chr){
          if(91 <= chr){
           if(25 < chr - 97 >>> 0) break b;
          }
          else if(65 > chr) break b;
         }
         else{
          if(58 <= chr){
           if(61 > chr) break b;
           decoder[7] = decoder[7] + 1 | 0;
           decoder[4] = (decoder[4] + pos | 0) + 1 | 0;
           decoder[6] = state;
           return ret(decode_base64, 500072881, pos + 1 | 0, decoder);
          }
          if(47 > chr) break b;
         }
        else{if(14 > chr) break; if(32 === chr) break c; if(43 > chr) break b;
        }
        var
         v$0 = r_repr(state, chr),
         pos$0 = pos + 1 | 0,
         pos = pos$0,
         v = v$0;
       }
       if(9 !== chr){
        if(13 > chr) break b;
        decoder[4] = (decoder[4] + pos | 0) + 1 | 0;
        decoder[6] = state;
        return decode_base64_lf_after_cr(decoder);
       }
      }
      decoder[4] = (decoder[4] + pos | 0) + 1 | 0;
      decoder[6] = state;
      return ret(decode_base64, 4352180, pos + 1 | 0, decoder);
     }
     decoder[4] = (decoder[4] + pos | 0) + 1 | 0;
     decoder[6] = state;
     return ret(decode_base64, malformed(chr), pos + 1 | 0, decoder);
    }
    decoder[4] = decoder[4] + 1 | 0;
    return ret(decode_base64, malformed(chr$0), 1, decoder);
   }
   function pp_base64(decoder, v){
    if(typeof v === "number")
     return 4352180 <= v
             ? caml_call1(decoder[12], decoder)
             : (decoder[10] = 0, caml_call1(decoder[12], decoder));
    if(659980059 <= v[1]) return v;
    var state = v[2];
    decoder[6] = state;
    return [0, 365482660, caml_call1(Stdlib_Bytes[6], state[3])];
   }
   function decoder(src){
    if(typeof src === "number")
     var i_len = 0, i_pos = 1, i_off = 0, i = Stdlib_Bytes[3];
    else if(438511779 <= src[1])
     var i_len = 0, i_pos = 1, i_off = 0, i = caml_create_bytes(65536);
    else
     var
      s = src[2],
      i_len$0 = runtime.caml_ml_string_length(s) - 1 | 0,
      i$0 = caml_call1(Stdlib_Bytes[45], s),
      i_len = i_len$0,
      i_pos = 0,
      i_off = 0,
      i = i$0;
    return [0,
            src,
            i,
            i_off,
            i_pos,
            i_len,
            [0, 0, 0, caml_create_bytes(3)],
            0,
            0,
            0,
            0,
            pp_base64,
            decode_base64];
   }
   function decode(decoder){return caml_call1(decoder[12], decoder);}
   function decoder_byte_count(decoder){return decoder[9];}
   function decoder_src(decoder){return decoder[1];}
   function decoder_dangerous(decoder){return decoder[8];}
   function o_rem(encoder){return (encoder[5] - encoder[4] | 0) + 1 | 0;}
   function dst(encoder, source, off, len){
    var _D_ = off < 0 ? 1 : 0;
    if(_D_)
     var _E_ = _D_;
    else
     var
      _F_ = len < 0 ? 1 : 0,
      _E_ = _F_ || (caml_ml_bytes_length(source) < (off + len | 0) ? 1 : 0);
    if(_E_) invalid_bounds(off, len);
    encoder[2] = source;
    encoder[3] = off;
    encoder[4] = 0;
    encoder[5] = len - 1 | 0;
    return 0;
   }
   function flush(k, encoder){
    var match = encoder[1];
    if(typeof match === "number"){
     encoder[12] =
      function(encoder, param){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_call1(k, encoder);
       return invalid_arg(_c_);
      };
     return 939392865;
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     caml_call4(Stdlib[68], oc, encoder[2], encoder[3], encoder[4]);
     encoder[4] = 0;
     return caml_call1(k, encoder);
    }
    var b = match[2], o = caml_call1(Stdlib_Bytes[44], encoder[2]);
    caml_call4(Stdlib_Buffer[18], b, o, encoder[3], encoder[4]);
    encoder[4] = 0;
    return caml_call1(k, encoder);
   }
   function t_range(encoder, len){encoder[10] = 0; encoder[11] = len; return;}
   function t_flush(k, encoder){
    function blit(encoder, len){
     runtime.caml_blit_bytes
      (encoder[9], encoder[10], encoder[2], encoder[4], len);
     encoder[4] = encoder[4] + len | 0;
     encoder[10] = encoder[10] + len | 0;
     return;
    }
    var rem = o_rem(encoder), len = (encoder[11] - encoder[10] | 0) + 1 | 0;
    return rem < len
            ? (blit
               (encoder, rem),
              flush(function(_C_){return t_flush(k, _C_);}, encoder))
            : (blit(encoder, len), caml_call1(k, encoder));
   }
   function encode_line_break(k, encoder){
    var rem = o_rem(encoder);
    if(2 <= rem){
     var j = encoder[4];
     encoder[4] = encoder[4] + 2 | 0;
     var
      j$0 = encoder[3] + j | 0,
      s = encoder[2],
      k$0 = k,
      j$1 = j$0,
      s$0 = s;
    }
    else{
     t_range(encoder, 2);
     var
      _A_ = function(_B_){return t_flush(k, _B_);},
      k$0 = _A_,
      j$1 = 0,
      s$0 = encoder[9];
    }
    unsafe_set_chr(s$0, j$1, 13);
    unsafe_set_chr(s$0, j$1 + 1 | 0, 10);
    encoder[6] = 0;
    return caml_call1(k$0, encoder);
   }
   function encode_base64(encoder, v){
    function k$5(col_count, encoder){
     encoder[6] = encoder[6] + col_count | 0;
     encoder[12] = encode_base64;
     return 17724;
    }
    if(typeof v === "number"){
     if(1006505782 <= v) return k$5(0, encoder);
     if(76 === encoder[6])
      return encode_line_break
              (function(encoder){return encode_base64(encoder, v);}, encoder);
     var _i_ = encoder[8];
     if(2 < _i_ >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     switch(_i_){
       case 0:
        return k$5(0, encoder);
       case 1:
        var c$0 = unsafe_byte(encoder[7], 0, 0);
        encoder[8] = 0;
        var
         quantum$0 = c$0 << 4,
         c$1 = (quantum$0 >>> 6 | 0) & 63,
         d$0 = quantum$0 & 63,
         rem$0 = o_rem(encoder);
        if(4 <= rem$0){
         var j$2 = encoder[4];
         encoder[4] = encoder[4] + 4 | 0;
         var
          _j_ = 4,
          k$1 = function(_x_){return k$5(_j_, _x_);},
          j$3 = encoder[3] + j$2 | 0,
          s$1 = encoder[2],
          k$2 = k$1,
          j$4 = j$3,
          s$2 = s$1;
        }
        else{
         t_range(encoder, 4);
         var
          _k_ = 4,
          _l_ = function(_z_){return k$5(_k_, _z_);},
          _m_ = function(_y_){return t_flush(_l_, _y_);},
          k$2 = _m_,
          j$4 = 0,
          s$2 = encoder[9];
        }
        unsafe_set_chr
         (s$2, j$4, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, c$1));
        unsafe_set_chr
         (s$2,
          j$4 + 1 | 0,
          caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, d$0));
        unsafe_set_chr(s$2, j$4 + 2 | 0, 61);
        unsafe_set_chr(s$2, j$4 + 3 | 0, 61);
        return flush(k$2, encoder);
       default:
        var
         c$2 = unsafe_byte(encoder[7], 0, 1),
         b$1 = unsafe_byte(encoder[7], 0, 0);
        encoder[8] = 0;
        var
         quantum$1 = (b$1 << 10) + (c$2 << 2) | 0,
         b$2 = (quantum$1 >>> 12 | 0) & 63,
         c$3 = (quantum$1 >>> 6 | 0) & 63,
         d$1 = quantum$1 & 63,
         rem$1 = o_rem(encoder);
        if(4 <= rem$1){
         var j$5 = encoder[4];
         encoder[4] = encoder[4] + 4 | 0;
         var
          _n_ = 4,
          k$3 = function(_u_){return k$5(_n_, _u_);},
          j$6 = encoder[3] + j$5 | 0,
          s$3 = encoder[2],
          k$4 = k$3,
          j$7 = j$6,
          s$4 = s$3;
        }
        else{
         t_range(encoder, 4);
         var
          _o_ = 4,
          _p_ = function(_w_){return k$5(_o_, _w_);},
          _q_ = function(_v_){return t_flush(_p_, _v_);},
          k$4 = _q_,
          j$7 = 0,
          s$4 = encoder[9];
        }
        unsafe_set_chr
         (s$4, j$7, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, b$2));
        unsafe_set_chr
         (s$4,
          j$7 + 1 | 0,
          caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, c$3));
        unsafe_set_chr
         (s$4,
          j$7 + 2 | 0,
          caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, d$1));
        unsafe_set_chr(s$4, j$7 + 3 | 0, 61);
        return flush(k$4, encoder);
     }
    }
    var chr = v[2], rem$2 = o_rem(encoder);
    if(1 > rem$2)
     return flush
             (function(encoder){return encode_base64(encoder, v);}, encoder);
    if(76 === encoder[6])
     return encode_line_break
             (function(encoder){return encode_base64(encoder, v);}, encoder);
    if(2 > encoder[8]){
     unsafe_set_chr(encoder[7], encoder[8], chr);
     encoder[8] = encoder[8] + 1 | 0;
     return k$5(0, encoder);
    }
    var b = unsafe_byte(encoder[7], 0, 1), a = unsafe_byte(encoder[7], 0, 0);
    encoder[8] = 0;
    var
     quantum = ((a << 16) + (b << 8) | 0) + chr | 0,
     a$0 = quantum >>> 18 | 0,
     b$0 = (quantum >>> 12 | 0) & 63,
     c = (quantum >>> 6 | 0) & 63,
     d = quantum & 63,
     rem = o_rem(encoder);
    if(4 <= rem){
     var j = encoder[4];
     encoder[4] = encoder[4] + 4 | 0;
     var
      _e_ = 4,
      k = function(_r_){return k$5(_e_, _r_);},
      j$0 = encoder[3] + j | 0,
      s = encoder[2],
      k$0 = k,
      j$1 = j$0,
      s$0 = s;
    }
    else{
     t_range(encoder, 4);
     var
      _f_ = 4,
      _g_ = function(_t_){return k$5(_f_, _t_);},
      _h_ = function(_s_){return t_flush(_g_, _s_);},
      k$0 = _h_,
      j$1 = 0,
      s$0 = encoder[9];
    }
    unsafe_set_chr
     (s$0, j$1, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, a$0));
    unsafe_set_chr
     (s$0, j$1 + 1 | 0, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, b$0));
    unsafe_set_chr
     (s$0, j$1 + 2 | 0, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, c));
    unsafe_set_chr
     (s$0, j$1 + 3 | 0, caml_string_get(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ, d));
    return flush(k$0, encoder);
   }
   function encoder(dst){
    if(typeof dst === "number")
     var o_len = 0, o_pos = 0, o_off = 1, o = Stdlib_Bytes[3];
    else
     var
      o$0 = caml_create_bytes(65536),
      o_len = 65535,
      o_pos = 0,
      o_off = 0,
      o = o$0;
    return [0,
            dst,
            o,
            o_off,
            o_pos,
            o_len,
            0,
            caml_create_bytes(3),
            0,
            caml_create_bytes(4),
            1,
            0,
            encode_base64];
   }
   function encode(encoder){return caml_call1(encoder[12], encoder);}
   function encoder_dst(encoder){return encoder[1];}
   var
    Base64_rfc2045 =
      [0,
       default_alphabet,
       src,
       decoder,
       decode,
       decoder_byte_count,
       decoder_src,
       decoder_dangerous,
       encoder,
       encode,
       encoder_dst,
       dst,
       o_rem];
   runtime.caml_register_global(12, Base64_rfc2045, "Base64_rfc2045");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
