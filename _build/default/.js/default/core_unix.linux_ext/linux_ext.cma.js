// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Linux_ext__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Linux_ext = [0],
    Linux_ext$0 = [0, Linux_ext];
   runtime.caml_register_global(0, Linux_ext$0, "Linux_ext__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Linux_ext__Epoll_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Linux_ext_Epoll_intf = "Linux_ext__Epoll_intf",
    cst_linux_ext = "linux_ext";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Linux_ext_Epoll_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][1], "linux_ext/src/epoll_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_linux_ext, "epoll_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Linux_ext_Epoll_intf);
   var Linux_ext_Epoll_intf = [0];
   runtime.caml_register_global
    (11, Linux_ext_Epoll_intf, cst_Linux_ext_Epoll_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Linux_ext__Epoll
//# unitInfo: Requires: Base__Field, Bounded_int_table, Core, Core__Array, Core__Bigstring, Core__Int63, Core__Or_error, Core__Time_ns, Core_unix, Core_unix__File_descr, Flags, Linux_ext__Epoll_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Linux_ext_Epoll$0 = "Linux_ext__Epoll",
    cst_flags_by_fd$0 = "flags_by_fd",
    cst_linux_ext$0 = "linux_ext",
    cst_linux_ext_src_epoll_ml = "linux_ext/src/epoll.ml",
    cst_max_ready_events$0 = "max_ready_events",
    cst_num_ready_events$0 = "num_ready_events",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Int63 = global_data.Core__Int63,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Bounded_int_table = global_data.Bounded_int_table,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Base_Field = global_data.Base__Field,
    Core_unix = global_data.Core_unix,
    Core_Array = global_data.Core__Array,
    Flags = global_data.Flags,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Or_error = global_data.Core__Or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Linux_ext_Epoll$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_linux_ext$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_linux_ext_src_epoll_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_linux_ext$0, "epoll.ml");
   var
    _t_ = [0, cst_linux_ext_src_epoll_ml, 353, 4],
    cst_attempt_to_use_closed_epol = "attempt to use closed epoll set",
    cst_Epoll_create_got_nonpositi =
      "Epoll.create got nonpositive max_ready_events",
    _s_ = [0, cst_linux_ext_src_epoll_ml, 252, 7324, 7338],
    _r_ = [0, cst_linux_ext_src_epoll_ml, 236, 45],
    _q_ = [0, cst_linux_ext_src_epoll_ml, 237, 54],
    cst_Epoll_invariant_failed = "Epoll.invariant failed",
    _p_ = [0, cst_linux_ext_src_epoll_ml, 242, 7097, 7114],
    _n_ = [0, "Closed"],
    _o_ = [0, "In_use"],
    _l_ = [0, "flags"],
    _m_ = [0, "file_descr"],
    _g_ = [0, "ready_events"],
    _h_ = [0, cst_num_ready_events$0],
    _i_ = [0, cst_max_ready_events$0],
    _j_ = [0, cst_flags_by_fd$0],
    _k_ = [0, "epollfd"],
    cst_oneshot = "oneshot",
    cst_et = "et",
    cst_hup = "hup",
    cst_err = "err",
    cst_pri = "pri",
    cst_out = "out",
    cst_in = "in",
    cst_Linux_ext_Epoll_create = "Linux_ext.Epoll.create",
    cst_num_ready_events = cst_num_ready_events$0,
    cst_max_ready_events = cst_max_ready_events$0,
    cst_flags_by_fd = cst_flags_by_fd$0,
    cst_linux_ext = cst_linux_ext$0,
    cst_Linux_ext_Epoll = cst_Linux_ext_Epoll$0;
   function Epoll_flags(Flag_values){
    var
     none = Core_Int63[16],
     in$0 = Flag_values[1],
     out = Flag_values[2],
     pri = Flag_values[3],
     err = Flag_values[4],
     hup = Flag_values[5],
     et = Flag_values[6],
     oneshot = Flag_values[7],
     known =
       [0,
        [0, in$0, cst_in],
        [0,
         [0, out, cst_out],
         [0,
          [0, pri, cst_pri],
          [0,
           [0, err, cst_err],
           [0,
            [0, hup, cst_hup],
            [0, [0, et, cst_et], [0, [0, oneshot, cst_oneshot], 0]]]]]]],
     include = caml_call1(Flags[2], [0, known, 0, 0, 1]),
     t_of_sexp = include[1],
     sexp_of_t = include[2],
     typerep_of_t = include[3],
     typename_of_t = include[4],
     symbol = include[5],
     symbol$0 = include[6],
     symbol$1 = include[7],
     symbol$2 = include[8],
     symbol$3 = include[9],
     symbol$4 = include[10],
     equal = include[11],
     compare = include[12],
     min = include[13],
     max = include[14],
     ascending = include[15],
     descending = include[16],
     between = include[17],
     clamp_exn = include[18],
     clamp = include[19],
     comparator = include[20],
     validate_lbound = include[21],
     validate_ubound = include[22],
     validate_bound = include[23],
     Replace_polymorphic_compare = include[24],
     Map = include[25],
     Set = include[26],
     to_flag_list = include[27],
     of_int = include[28],
     to_int_exn = include[29],
     empty = include[30],
     symbol$5 = include[31],
     symbol$6 = include[32],
     intersect = include[33],
     complement = include[34],
     is_empty = include[35],
     do_intersect = include[36],
     are_disjoint = include[37],
     is_subset = include[38],
     Unstable = include[39];
    return [0,
            none,
            in$0,
            out,
            pri,
            err,
            hup,
            et,
            oneshot,
            t_of_sexp,
            sexp_of_t,
            typerep_of_t,
            typename_of_t,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator,
            validate_lbound,
            validate_ubound,
            validate_bound,
            Replace_polymorphic_compare,
            Map,
            Set,
            to_flag_list,
            of_int,
            to_int_exn,
            empty,
            symbol$5,
            symbol$6,
            intersect,
            complement,
            is_empty,
            do_intersect,
            are_disjoint,
            is_subset,
            Unstable];
   }
   var
    in$0 = caml_call1(Core_Int63[72], 1),
    out = caml_call1(Core_Int63[72], 2),
    pri = caml_call1(Core_Int63[72], 8),
    err = caml_call1(Core_Int63[72], 16),
    hup = caml_call1(Core_Int63[72], 32),
    et = caml_call1(Core_Int63[72], 64),
    oneshot = caml_call1(Core_Int63[72], 128);
   Epoll_flags([0, in$0, out, pri, err, hup, et, oneshot]);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Epoll_create);
   var
    in$1 = runtime.core_linux_epoll_EPOLLIN_flag(0),
    out$0 = runtime.core_linux_epoll_EPOLLOUT_flag(0),
    pri$0 = runtime.core_linux_epoll_EPOLLPRI_flag(0),
    err$0 = runtime.core_linux_epoll_EPOLLERR_flag(0),
    hup$0 = runtime.core_linux_epoll_EPOLLHUP_flag(0),
    et$0 = runtime.core_linux_epoll_EPOLLET_flag(0),
    oneshot$0 = runtime.core_linux_epoll_EPOLLONESHOT_flag(0),
    Flags$0 =
      Epoll_flags([0, in$1, out$0, pri$0, err$0, hup$0, et$0, oneshot$0]),
    sizeof_epoll_event = runtime.core_linux_epoll_sizeof_epoll_event(0),
    offsetof_readyfd = runtime.core_linux_epoll_offsetof_readyfd(0),
    offsetof_readyflags = runtime.core_linux_epoll_offsetof_readyflags(0);
   function num_ready_events(r){return r[4];}
   function set_num_ready_events(r, v){r[4] = v; return 0;}
   function max_ready_events(r){return r[3];}
   function flags_by_fd(r){return r[2];}
   function _a_(r, v){return [0, r[1], r[2], r[3], v, r[5]];}
   var
    _b_ = [0, set_num_ready_events],
    num_ready_events$0 =
      [0,
       function(param){return 0;},
       cst_num_ready_events,
       _b_,
       num_ready_events,
       _a_];
   function _c_(r, v){return [0, r[1], r[2], v, r[4], r[5]];}
   var
    _d_ = 0,
    max_ready_events$0 =
      [0,
       function(param){return 0;},
       cst_max_ready_events,
       _d_,
       max_ready_events,
       _c_];
   function _e_(r, v){return [0, r[1], v, r[3], r[4], r[5]];}
   var
    _f_ = 0,
    flags_by_fd$0 =
      [0, function(param){return 0;}, cst_flags_by_fd, _f_, flags_by_fd, _e_];
   function epoll_readyfd(t, i){
    var
     _aa_ =
       caml_call2
        (Core_Bigstring[67],
         t,
         caml_mul(i, sizeof_epoll_event) + offsetof_readyfd | 0);
    return caml_call1(Core_unix_File_descr[13], _aa_);
   }
   function epoll_readyflags(t, i){
    var
     _$_ =
       caml_call2
        (Core_Bigstring[67],
         t,
         caml_mul(i, sizeof_epoll_event) + offsetof_readyflags | 0);
    return caml_call1(Flags$0[36], _$_);
   }
   function sexp_of_ready_event(param){
    var
     flags_016 = param[2],
     file_descr_014 = param[1],
     arg_017 = caml_call1(Flags$0[10], flags_016),
     bnds_013 = [0, [1, [0, _l_, [0, arg_017, 0]]], 0],
     arg_015 = caml_call1(Core_unix_File_descr[2], file_descr_014),
     bnds_013$0 = [0, [1, [0, _m_, [0, arg_015, 0]]], bnds_013];
    return [1, bnds_013$0];
   }
   function sexp_of_in_use(t){
    function _Z_(i){
     var ___ = epoll_readyflags(t[5], i);
     return [0, epoll_readyfd(t[5], i), ___];
    }
    var
     ready_events_011 = caml_call2(Core_Array[56], t[4], _Z_),
     num_ready_events_009 = t[4],
     max_ready_events_007 = t[3],
     flags_by_fd_005 = t[2],
     epollfd_003 = t[1],
     arg_012 = caml_call2(Core[301], sexp_of_ready_event, ready_events_011),
     bnds_002 = [0, [1, [0, _g_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core[389], num_ready_events_009),
     bnds_002$0 = [0, [1, [0, _h_, [0, arg_010, 0]]], bnds_002],
     arg_008 = caml_call1(Core[389], max_ready_events_007),
     bnds_002$1 = [0, [1, [0, _i_, [0, arg_008, 0]]], bnds_002$0],
     arg_006 =
       caml_call3
        (Bounded_int_table[1],
         Core_unix_File_descr[2],
         Flags$0[10],
         flags_by_fd_005),
     bnds_002$2 = [0, [1, [0, _j_, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = caml_call1(Core_unix_File_descr[2], epollfd_003),
     bnds_002$3 = [0, [1, [0, _k_, [0, arg_004, 0]]], bnds_002$2];
    return [1, bnds_002$3];
   }
   function sexp_of_t(x_021){
    function _Y_(param){
     if(typeof param === "number") return _n_;
     var v_020 = param[2];
     return [1, [0, _o_, [0, sexp_of_in_use(v_020), 0]]];
    }
    return caml_call2(Core[598], _Y_, x_021);
   }
   function close(t){
    var _X_ = t[1];
    if(typeof _X_ === "number") return 0;
    var epollfd = _X_[2][1];
    t[1] = -1025106484;
    return caml_call2(Core_unix[53], 0, epollfd);
   }
   function invariant(t){
    var match = t[1];
    if(typeof match === "number") return 0;
    var t$0 = match[2];
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t$0));
        },
      _R_ =
        function(num_ready){
         if(caml_call2(Core[88], num_ready, 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
        },
      _S_ =
        function(max_ready_events){
         if(caml_call2(Core[91], max_ready_events, 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
        },
      _T_ = function(_W_){return 0;},
      _U_ = function(_V_){return 0;};
     check(caml_call2(Bounded_int_table[2], _U_, _T_), flags_by_fd$0);
     check(_S_, max_ready_events$0);
     check(_R_, num_ready_events$0);
     var _P_ = 0;
     return _P_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _Q_ =
        function(param){
         var
          arg1_023 = param[2],
          arg0_022 = param[1],
          res0_024 = caml_call1(Core[625], arg0_022),
          res1_025 = sexp_of_in_use(arg1_023);
         return [1, [0, res0_024, [0, res1_025, 0]]];
        };
     return caml_call5
             (Core[247],
              0,
              _p_,
              cst_Epoll_invariant_failed,
              [0, exn, t$0],
              _Q_);
    }
   }
   function create(num_file_descrs, max_ready_events){
    if(caml_call2(Core[92], max_ready_events, 0))
     caml_call5
      (Core[247],
       0,
       _s_,
       cst_Epoll_create_got_nonpositi,
       max_ready_events,
       Core[389]);
    var
     _N_ =
       caml_call1
        (Core_Bigstring[121], caml_mul(sizeof_epoll_event, max_ready_events)),
     _O_ =
       caml_call4
        (Bounded_int_table[4],
         [0, Core_unix_File_descr[2]],
         num_file_descrs,
         Core_unix_File_descr[15],
         0);
    return [0,
            [0,
             -985294899,
             [0,
              runtime.core_linux_epoll_create(0),
              _O_,
              max_ready_events,
              0,
              _N_]]];
   }
   function in_use_exn(t){
    var match = t[1];
    if(typeof match === "number")
     return caml_call1(Core[6], cst_attempt_to_use_closed_epol);
    var r = match[2];
    return r;
   }
   function find(t, file_descr){
    var t$0 = in_use_exn(t);
    return caml_call2(Bounded_int_table[9], t$0[2], file_descr);
   }
   function find_exn(t, file_descr){
    var t$0 = in_use_exn(t);
    return caml_call2(Bounded_int_table[10], t$0[2], file_descr);
   }
   function iter(t, f){
    var t$0 = in_use_exn(t);
    function _M_(file_descr, flags){return caml_call2(f, file_descr, flags);}
    return caml_call2(Bounded_int_table[15], t$0[2], _M_);
   }
   function fold(t, init, f){
    var t$0 = in_use_exn(t);
    function _L_(key, data){return caml_call2(f, key, data);}
    return caml_call3(Bounded_int_table[12], t$0[2], init, _L_);
   }
   function set(t, fd, flags){
    var
     t$0 = in_use_exn(t),
     already_present = caml_call2(Bounded_int_table[28], t$0[2], fd);
    if(already_present)
     runtime.core_linux_epoll_ctl_mod(t$0[1], fd, flags);
    else
     runtime.core_linux_epoll_ctl_add(t$0[1], fd, flags);
    return caml_call3(Bounded_int_table[30], t$0[2], fd, flags);
   }
   function remove(t, fd){
    var
     t$0 = in_use_exn(t),
     _J_ = caml_call2(Bounded_int_table[28], t$0[2], fd),
     _K_ =
       _J_
        ? (caml_call2
           (Bounded_int_table[29], t$0[2], fd),
          runtime.core_linux_epoll_ctl_del(t$0[1], fd))
        : _J_;
    return _K_;
   }
   function wait_internal(t, timeout_ms){
    var t$0 = in_use_exn(t);
    t$0[4] = 0;
    t$0[4] = runtime.core_linux_epoll_wait(t$0[1], t$0[5], timeout_ms);
    return caml_call2(Core[90], t$0[4], 0) ? 642269825 : 17724;
   }
   function wait_timeout_after(t, span){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][76]))
     var timeout_ms = 0;
    else
     var
      span$0 = caml_call2(Core_Time_ns[1][24], span, Core_Time_ns[1][70]),
      _D_ = caml_call1(Core_Int63[72], 1000000),
      _E_ = caml_call1(Core_Time_ns[1][137], _D_),
      _F_ = caml_call1(Core_Int63[72], 500000),
      _G_ = caml_call1(Core_Time_ns[1][137], _F_),
      _H_ = caml_call2(Core_Time_ns[1][101], span$0, _G_),
      _I_ = caml_call2(Core_Time_ns[1][135], _H_, _E_),
      timeout_ms = caml_call1(Core_Int63[5], _I_);
    if(caml_call2(Core[88], timeout_ms, 0))
     return wait_internal(t, timeout_ms);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
   }
   function wait(t, timeout){
    if(typeof timeout === "number")
     return 744337004 <= timeout ? wait_internal(t, -1) : wait_internal(t, 0);
    var span = timeout[2];
    return wait_timeout_after(t, span);
   }
   function fold_ready(t, init, f){
    var t$0 = in_use_exn(t), ac = [0, init], _z_ = t$0[4] - 1 | 0, _y_ = 0;
    if(_z_ >= 0){
     var i = _y_;
     for(;;){
      var _A_ = epoll_readyflags(t$0[5], i), _B_ = epoll_readyfd(t$0[5], i);
      ac[1] = caml_call3(f, ac[1], _B_, _A_);
      var _C_ = i + 1 | 0;
      if(_z_ === i) break;
      var i = _C_;
     }
    }
    return ac[1];
   }
   function iter_ready(t, f){
    var t$0 = in_use_exn(t), _v_ = t$0[4] - 1 | 0, _u_ = 0;
    if(_v_ >= 0){
     var i = _u_;
     for(;;){
      var _w_ = epoll_readyflags(t$0[5], i);
      caml_call2(f, epoll_readyfd(t$0[5], i), _w_);
      var _x_ = i + 1 | 0;
      if(_v_ === i) break;
      var i = _x_;
     }
    }
    return 0;
   }
   function clear_ready(t){var t$0 = in_use_exn(t); t$0[4] = 0; return 0;}
   var Expert = [0, clear_ready], create$0 = [0, create];
   caml_call1(Ppx_inline_test_lib[7], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Linux_ext_Epoll);
   var
    Linux_ext_Epoll =
      [0,
       [0,
        [0,
         Flags$0[9],
         Flags$0[10],
         Flags$0[11],
         Flags$0[12],
         Flags$0[13],
         Flags$0[14],
         Flags$0[15],
         Flags$0[16],
         Flags$0[17],
         Flags$0[18],
         Flags$0[19],
         Flags$0[20],
         Flags$0[21],
         Flags$0[22],
         Flags$0[23],
         Flags$0[24],
         Flags$0[25],
         Flags$0[26],
         Flags$0[27],
         Flags$0[28],
         Flags$0[29],
         Flags$0[30],
         Flags$0[31],
         Flags$0[32],
         Flags$0[33],
         Flags$0[34],
         Flags$0[35],
         Flags$0[36],
         Flags$0[37],
         Flags$0[38],
         Flags$0[39],
         Flags$0[40],
         Flags$0[41],
         Flags$0[42],
         Flags$0[43],
         Flags$0[44],
         Flags$0[45],
         Flags$0[46],
         Flags$0[47],
         Flags$0[1],
         Flags$0[2],
         Flags$0[3],
         Flags$0[4],
         Flags$0[5],
         Flags$0[6],
         Flags$0[7],
         Flags$0[8]],
        sexp_of_t,
        invariant,
        create$0,
        close,
        find,
        find_exn,
        set,
        remove,
        iter,
        fold,
        wait,
        wait_timeout_after,
        iter_ready,
        fold_ready,
        Expert]];
   runtime.caml_register_global(67, Linux_ext_Epoll, cst_Linux_ext_Epoll$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Linux_ext__Linux_ext_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Linux_ext_Linux_ext_intf = "Linux_ext__Linux_ext_intf",
    cst_linux_ext = "linux_ext";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Linux_ext_Linux_ext_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][1], "linux_ext/src/linux_ext_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_linux_ext, "linux_ext_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Linux_ext_Linux_ext_intf);
   var Linux_ext_Linux_ext_intf = [0];
   runtime.caml_register_global
    (11, Linux_ext_Linux_ext_intf, cst_Linux_ext_Linux_ext_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Linux_ext
//# unitInfo: Requires: Base__Int63, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Float, Core__Int, Core__Int63, Core__Int64, Core__List, Core__Memo, Core__Option, Core__Or_error, Core__Pid, Core__Result, Core__String, Core__Time_float, Core__Tuple, Core_unix, Core_unix__File_descr, Filename_unix, Flags, Linux_ext__Epoll, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdio__In_channel, Time_ns_unix
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_ENOATTR = "ENOATTR",
    cst_ENOTSUP = "ENOTSUP",
    cst_Linux_ext$0 = "Linux_ext",
    cst_Linux_ext_Timerfd_create$1 = "Linux_ext.Timerfd.create",
    cst_Ok = "Ok",
    cst_TCP_CONGESTION = "TCP_CONGESTION",
    cst_TCP_CORK = "TCP_CORK",
    cst_TCP_QUICKACK = "TCP_QUICKACK",
    cst_allow_sealing$1 = "allow_sealing",
    cst_buffer_ram$0 = "buffer_ram",
    cst_cloexec$5 = "cloexec",
    cst_exec$1 = "exec",
    cst_free_ram$0 = "free_ram",
    cst_free_swap$0 = "free_swap",
    cst_freehigh$0 = "freehigh",
    cst_huge_1gb$1 = "huge_1gb",
    cst_huge_2mb$1 = "huge_2mb",
    cst_hugetlb$1 = "hugetlb",
    cst_linux_ext$0 = "linux_ext",
    cst_linux_ext_src_linux_ext_ml$8 = "linux_ext/src/linux_ext.ml",
    cst_linux_ext_src_linux_ext_ml$11 =
      "linux_ext/src/linux_ext.ml.Sysinfo0.t",
    cst_linux_ext_src_linux_ext_ml$10 =
      "linux_ext/src/linux_ext.ml.tcp_bool_option",
    cst_linux_ext_src_linux_ext_ml$9 =
      "linux_ext/src/linux_ext.ml.tcp_string_option",
    cst_load1$0 = "load1",
    cst_load15$0 = "load15",
    cst_load5$0 = "load5",
    cst_mem_unit$0 = "mem_unit",
    cst_noexec_seal$1 = "noexec_seal",
    cst_nonblock$3 = "nonblock",
    cst_procs$0 = "procs",
    cst_semaphore$1 = "semaphore",
    cst_send_nonblocking_no_sigpip$3 = "send_nonblocking_no_sigpipe: pos < 0",
    cst_shared_ram$0 = "shared_ram",
    cst_t$3 = "t",
    cst_tCP_CONGESTION = "tCP_CONGESTION",
    cst_tCP_CORK = "tCP_CORK",
    cst_tCP_QUICKACK = "tCP_QUICKACK",
    cst_tcp_bool_option$3 = "tcp_bool_option",
    cst_tcp_string_option$3 = "tcp_string_option",
    cst_total_ram$0 = "total_ram",
    cst_total_swap$0 = "total_swap",
    cst_totalhigh$0 = "totalhigh",
    cst_uptime$0 = "uptime",
    caml_int_of_string = runtime.caml_int_of_string,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    error_source_002 = cst_linux_ext_src_linux_ext_ml$11,
    error_source_035 = cst_linux_ext_src_linux_ext_ml$10,
    error_source_039 = cst_linux_ext_src_linux_ext_ml$9,
    Core = global_data.Core,
    Core_unix = global_data.Core_unix,
    Core_Int64 = global_data.Core__Int64,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Pid = global_data.Core__Pid,
    Core_unix_File_descr = global_data.Core_unix__File_descr,
    Filename_unix = global_data.Filename_unix,
    Core_Time_float = global_data.Core__Time_float,
    Time_ns_unix = global_data.Time_ns_unix,
    Core_Int63 = global_data.Core__Int63,
    Base_Int63 = global_data.Base__Int63,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Assert_failure;
   var
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core_Float = global_data.Core__Float,
    Core_Tuple = global_data.Core__Tuple,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Core_Memo = global_data.Core__Memo,
    Core_Or_error = global_data.Core__Or_error,
    Flags = global_data.Flags,
    Linux_ext_Epoll = global_data.Linux_ext__Epoll,
    Core_Result = global_data.Core__Result;
   caml_call1(Ppx_module_timer_runtime[4], cst_Linux_ext$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_linux_ext$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_linux_ext_src_linux_ext_ml$8);
   caml_call2(Ppx_inline_test_lib[6], cst_linux_ext$0, "linux_ext.ml");
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_uptime$0, Core_Time_float[84][5]],
         [0,
          [0, cst_load1$0, Core[372]],
          [0,
           [0, cst_load5$0, Core[372]],
           [0,
            [0, cst_load15$0, Core[372]],
            [0,
             [0, cst_total_ram$0, Core[372]],
             [0,
              [0, cst_free_ram$0, Core[372]],
              [0,
               [0, cst_shared_ram$0, Core[372]],
               [0,
                [0, cst_buffer_ram$0, Core[372]],
                [0,
                 [0, cst_total_swap$0, Core[372]],
                 [0,
                  [0, cst_free_swap$0, Core[372]],
                  [0,
                   [0, cst_procs$0, Core[372]],
                   [0,
                    [0, cst_totalhigh$0, Core[372]],
                    [0,
                     [0, cst_freehigh$0, Core[372]],
                     [0, [0, cst_mem_unit$0, Core[372]], 0]]]]]]]]]]]]]]),
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "linux_ext/src/linux_ext.ml:9:2"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$3),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    _aI_ = [0, cst_Ok],
    _aJ_ = [0, "EEXIST"],
    _aK_ = [0, cst_ENOATTR],
    _aL_ = [0, cst_ENOTSUP],
    _aE_ = [0, cst_ENOATTR],
    _aF_ = [0, "ERANGE"],
    _aG_ = [0, cst_ENOTSUP],
    _aH_ = [0, cst_Ok],
    cst_dev_tty = "/dev/tty",
    _aA_ = [0, 2, 0],
    _aB_ = [0, 0],
    cst_proc_self_fd = "/proc/self/fd/",
    cst_sendmsg_nonblocking_no_sig =
      "sendmsg_nonblocking_no_sigpipe: count < 0",
    cst_sendmsg_nonblocking_no_sig$0 =
      "sendmsg_nonblocking_no_sigpipe: count > n_iovecs",
    cst_send_nonblocking_no_sigpip = cst_send_nonblocking_no_sigpip$3,
    cst_send_nonblocking_no_sigpip$0 =
      "send_nonblocking_no_sigpipe: pos > str_len",
    cst_send_nonblocking_no_sigpip$1 = cst_send_nonblocking_no_sigpip$3,
    cst_send_nonblocking_no_sigpip$2 =
      "send_nonblocking_no_sigpipe: pos + len > str_len",
    cst_Timerfd_set_repeating_at_g =
      "Timerfd.set_repeating_at got time before epoch",
    _av_ = [0, cst_linux_ext_src_linux_ext_ml$8, 565, 17132, 17146],
    cst_Timerfd_set_repeating_at_g$0 =
      "Timerfd.set_repeating_at got invalid interval",
    _aw_ = [0, cst_linux_ext_src_linux_ext_ml$8, 572, 17332, 17346],
    cst_Timerfd_set_repeating_got_ =
      "Timerfd.set_repeating got invalid interval",
    _au_ = [0, cst_linux_ext_src_linux_ext_ml$8, 549, 16677, 16691],
    cst_Timerfd_set_at_got_time_be = "Timerfd.set_at got time before epoch",
    _at_ = [0, cst_linux_ext_src_linux_ext_ml$8, 530, 16191, 16205],
    _aq_ = [0, "interval"],
    _ar_ = [0, "initial"],
    _as_ = [0, "timerfd"],
    cst_timerfd_settime_got_invali =
      "timerfd_settime got invalid parameters (initial < 0 or interval < 0).",
    cst_timerfd_settime = "timerfd_settime",
    _V_ =
      [0,
       [11, "/sys/class/net/", [2, 0, [11, "/device/local_cpulist", 0]]],
       "/sys/class/net/%s/device/local_cpulist"],
    cst_sys_devices_system_cpu_onl = "/sys/devices/system/cpu/online",
    cst_sys_devices_system_cpu_iso = "/sys/devices/system/cpu/isolated",
    _S_ = [0, "part"],
    cst_cpu_list_of_string_exn_exp$0 =
      "cpu_list_of_string_exn: expected integer",
    _Q_ = [0, "stride"],
    _R_ = [0, "amt"],
    cst_cpu_list_of_string_exn_inv =
      "cpu_list_of_string_exn: invalid grouped range stride or amount",
    _O_ = [0, "last"],
    _P_ = [0, "first"],
    cst_cpu_list_of_string_exn_ran =
      "cpu_list_of_string_exn: range start is after end",
    _M_ = [0, "str"],
    _N_ = [0, "sep"],
    cst_cpu_list_of_string_exn_exp =
      "cpu_list_of_string_exn: expected separated integer pair",
    _J_ = [0, "gid"],
    _K_ = [0, "uid"],
    _L_ = [0, "pid"],
    _H_ = [0, "Only"],
    _I_ = [0, "Any"],
    _G_ = [1, cst_linux_ext_src_linux_ext_ml$9],
    cst_linux_ext_src_linux_ext_ml$3 = cst_linux_ext_src_linux_ext_ml$9,
    _A_ = [0, cst_TCP_CONGESTION],
    _z_ = [1, cst_linux_ext_src_linux_ext_ml$10],
    cst_linux_ext_src_linux_ext_ml$1 = cst_linux_ext_src_linux_ext_ml$10,
    _s_ = [0, cst_TCP_QUICKACK],
    _t_ = [0, cst_TCP_CORK],
    _e_ = [0, cst_mem_unit$0],
    _f_ = [0, cst_freehigh$0],
    _g_ = [0, cst_totalhigh$0],
    _h_ = [0, cst_procs$0],
    _i_ = [0, cst_free_swap$0],
    _j_ = [0, cst_total_swap$0],
    _k_ = [0, cst_buffer_ram$0],
    _l_ = [0, cst_shared_ram$0],
    _m_ = [0, cst_free_ram$0],
    _n_ = [0, cst_total_ram$0],
    _o_ = [0, cst_load15$0],
    _p_ = [0, cst_load5$0],
    _q_ = [0, cst_load1$0],
    _r_ = [0, cst_uptime$0],
    cst_mem_unit = cst_mem_unit$0,
    cst_freehigh = cst_freehigh$0,
    cst_totalhigh = cst_totalhigh$0,
    cst_procs = cst_procs$0,
    cst_free_swap = cst_free_swap$0,
    cst_total_swap = cst_total_swap$0,
    cst_buffer_ram = cst_buffer_ram$0,
    cst_shared_ram = cst_shared_ram$0,
    cst_free_ram = cst_free_ram$0,
    cst_total_ram = cst_total_ram$0,
    cst_load15 = cst_load15$0,
    cst_load5 = cst_load5$0,
    cst_load1 = cst_load1$0,
    cst_uptime = cst_uptime$0,
    cst_linux_ext_src_linux_ext_ml = cst_linux_ext_src_linux_ext_ml$11,
    _u_ = [0, [0, cst_TCP_CORK, 0], [0, [0, cst_TCP_QUICKACK, 0], 0]],
    cst_tcp_bool_option = cst_tcp_bool_option$3,
    cst_linux_ext_src_linux_ext_ml$0 = "linux_ext/src/linux_ext.ml:30:0",
    cst_tcp_bool_option$0 = cst_tcp_bool_option$3,
    _B_ = [0, [0, cst_TCP_CONGESTION, 0], 0],
    cst_tcp_string_option = cst_tcp_string_option$3,
    cst_linux_ext_src_linux_ext_ml$2 = "linux_ext/src/linux_ext.ml:35:0",
    cst_tcp_string_option$0 = cst_tcp_string_option$3,
    cst_Linux_ext_Sysinfo_sysinfo = "Linux_ext.Sysinfo.sysinfo",
    cst_Linux_ext_cores = "Linux_ext.cores",
    cst_Linux_ext_isolated_cores = "Linux_ext.isolated_cores",
    cst_Linux_ext_online_cores = "Linux_ext.online_cores",
    cst_Linux_ext_cpus_local_to_ni = "Linux_ext.cpus_local_to_nic",
    cst_Linux_ext_file_descr_realp = "Linux_ext.file_descr_realpath",
    cst_Linux_ext_get_ipv4_address =
      "Linux_ext.get_ipv4_address_for_interface",
    cst_Linux_ext_get_mac_address = "Linux_ext.get_mac_address",
    cst_Linux_ext_bind_to_interfac = "Linux_ext.bind_to_interface",
    cst_Linux_ext_get_bind_to_inte = "Linux_ext.get_bind_to_interface",
    cst_Linux_ext_get_terminal_siz = "Linux_ext.get_terminal_size",
    cst_Linux_ext_gettcpopt_bool = "Linux_ext.gettcpopt_bool",
    cst_Linux_ext_gettcpopt_string = "Linux_ext.gettcpopt_string",
    cst_Linux_ext_setpriority = "Linux_ext.setpriority",
    cst_Linux_ext_getpriority = "Linux_ext.getpriority",
    cst_Linux_ext_in_channel_realp = "Linux_ext.in_channel_realpath",
    cst_Linux_ext_out_channel_real = "Linux_ext.out_channel_realpath",
    cst_Linux_ext_pr_get_name = "Linux_ext.pr_get_name",
    cst_Linux_ext_pr_get_pdeathsig = "Linux_ext.pr_get_pdeathsig",
    cst_Linux_ext_pr_set_name_firs = "Linux_ext.pr_set_name_first16",
    cst_Linux_ext_pr_set_pdeathsig = "Linux_ext.pr_set_pdeathsig",
    cst_Linux_ext_sched_setaffinit = "Linux_ext.sched_setaffinity",
    cst_Linux_ext_sched_getaffinit = "Linux_ext.sched_getaffinity",
    cst_Linux_ext_sched_setaffinit$0 =
      "Linux_ext.sched_setaffinity_this_thread",
    cst_Linux_ext_send_no_sigpipe = "Linux_ext.send_no_sigpipe",
    cst_Linux_ext_send_nonblocking = "Linux_ext.send_nonblocking_no_sigpipe",
    cst_Linux_ext_sendfile = "Linux_ext.sendfile",
    cst_Linux_ext_sendmsg_nonblock =
      "Linux_ext.sendmsg_nonblocking_no_sigpipe",
    cst_Linux_ext_settcpopt_bool = "Linux_ext.settcpopt_bool",
    cst_Linux_ext_settcpopt_string = "Linux_ext.settcpopt_string",
    cst_Linux_ext_peer_credentials = "Linux_ext.peer_credentials",
    _W_ = [0, [0, cst_TCP_CORK, 0], [0, [0, cst_TCP_QUICKACK, 0], 0]],
    cst_tcp_bool_option$1 = cst_tcp_bool_option$3,
    cst_linux_ext_src_linux_ext_ml$4 = "linux_ext/src/linux_ext.ml:219:2",
    cst_tcp_bool_option$2 = cst_tcp_bool_option$3,
    _$_ = [0, [0, cst_TCP_CONGESTION, 0], 0],
    cst_tcp_string_option$1 = cst_tcp_string_option$3,
    cst_linux_ext_src_linux_ext_ml$5 = "linux_ext/src/linux_ext.ml:224:2",
    cst_tcp_string_option$2 = cst_tcp_string_option$3,
    cst_Linux_ext_Clock_get = "Linux_ext.Clock.get",
    cst_Linux_ext_Clock_get_time = "Linux_ext.Clock.get_time",
    cst_Linux_ext_Clock_set_time = "Linux_ext.Clock.set_time",
    cst_Linux_ext_Clock_get_resolu = "Linux_ext.Clock.get_resolution",
    cst_Linux_ext_Clock_get_proces = "Linux_ext.Clock.get_process_clock",
    cst_Linux_ext_Clock_get_thread = "Linux_ext.Clock.get_thread_clock",
    cst_semaphore = cst_semaphore$1,
    cst_cloexec = cst_cloexec$5,
    cst_nonblock = cst_nonblock$3,
    cst_Linux_ext_Eventfd_create = "Linux_ext.Eventfd.create",
    cst_t = cst_t$3,
    cst_linux_ext_src_linux_ext_ml$6 = "linux_ext/src/linux_ext.ml:274:6",
    cst_t$0 = cst_t$3,
    cst_cloexec$0 = cst_cloexec$5,
    cst_nonblock$0 = cst_nonblock$3,
    cst_Linux_ext_Timerfd_create = cst_Linux_ext_Timerfd_create$1,
    cst_huge_1gb = cst_huge_1gb$1,
    cst_huge_2mb = cst_huge_2mb$1,
    cst_exec = cst_exec$1,
    cst_noexec_seal = cst_noexec_seal$1,
    cst_hugetlb = cst_hugetlb$1,
    cst_allow_sealing = cst_allow_sealing$1,
    cst_cloexec$1 = cst_cloexec$5,
    cst_Linux_ext_Memfd_create = "Linux_ext.Memfd.create",
    cst_Linux_ext_Extended_file_at =
      "Linux_ext.Extended_file_attributes.getxattr",
    cst_Linux_ext_Extended_file_at$0 =
      "Linux_ext.Extended_file_attributes.setxattr",
    cst_t$1 = cst_t$3,
    cst_linux_ext_src_linux_ext_ml$7 = "linux_ext/src/linux_ext.ml:439:4",
    cst_t$2 = cst_t$3,
    cst_cloexec$2 = cst_cloexec$5,
    cst_nonblock$1 = cst_nonblock$3,
    cst_Linux_ext_Timerfd_create$0 = cst_Linux_ext_Timerfd_create$1,
    cst_huge_1gb$0 = cst_huge_1gb$1,
    cst_huge_2mb$0 = cst_huge_2mb$1,
    cst_exec$0 = cst_exec$1,
    cst_noexec_seal$0 = cst_noexec_seal$1,
    cst_hugetlb$0 = cst_hugetlb$1,
    cst_allow_sealing$0 = cst_allow_sealing$1,
    cst_cloexec$3 = cst_cloexec$5,
    cst_semaphore$0 = cst_semaphore$1,
    cst_nonblock$2 = cst_nonblock$3,
    cst_cloexec$4 = cst_cloexec$5,
    cst_linux_ext = cst_linux_ext$0,
    cst_Linux_ext = cst_Linux_ext$0;
   function bin_size_t(param){
    var
     v14 = param[14],
     v13 = param[13],
     v12 = param[12],
     v11 = param[11],
     v10 = param[10],
     v9 = param[9],
     v8 = param[8],
     v7 = param[7],
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cM_ = caml_call1(Core_Time_float[84][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cM_),
     _cN_ = caml_call1(Core[373], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cN_),
     _cO_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _cO_),
     _cP_ = caml_call1(Core[373], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _cP_),
     _cQ_ = caml_call1(Core[373], v5),
     size$3 = caml_call2(Bin_prot_Common[23], size$2, _cQ_),
     _cR_ = caml_call1(Core[373], v6),
     size$4 = caml_call2(Bin_prot_Common[23], size$3, _cR_),
     _cS_ = caml_call1(Core[373], v7),
     size$5 = caml_call2(Bin_prot_Common[23], size$4, _cS_),
     _cT_ = caml_call1(Core[373], v8),
     size$6 = caml_call2(Bin_prot_Common[23], size$5, _cT_),
     _cU_ = caml_call1(Core[373], v9),
     size$7 = caml_call2(Bin_prot_Common[23], size$6, _cU_),
     _cV_ = caml_call1(Core[373], v10),
     size$8 = caml_call2(Bin_prot_Common[23], size$7, _cV_),
     _cW_ = caml_call1(Core[373], v11),
     size$9 = caml_call2(Bin_prot_Common[23], size$8, _cW_),
     _cX_ = caml_call1(Core[373], v12),
     size$10 = caml_call2(Bin_prot_Common[23], size$9, _cX_),
     _cY_ = caml_call1(Core[373], v13),
     size$11 = caml_call2(Bin_prot_Common[23], size$10, _cY_),
     _cZ_ = caml_call1(Core[373], v14);
    return caml_call2(Bin_prot_Common[23], size$11, _cZ_);
   }
   function bin_write_t(buf, pos, param){
    var
     v14 = param[14],
     v13 = param[13],
     v12 = param[12],
     v11 = param[11],
     v10 = param[10],
     v9 = param[9],
     v8 = param[8],
     v7 = param[7],
     v6 = param[6],
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_Time_float[84][2], buf, pos, v1),
     pos$1 = caml_call3(Core[375], buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3),
     pos$3 = caml_call3(Core[375], buf, pos$2, v4),
     pos$4 = caml_call3(Core[375], buf, pos$3, v5),
     pos$5 = caml_call3(Core[375], buf, pos$4, v6),
     pos$6 = caml_call3(Core[375], buf, pos$5, v7),
     pos$7 = caml_call3(Core[375], buf, pos$6, v8),
     pos$8 = caml_call3(Core[375], buf, pos$7, v9),
     pos$9 = caml_call3(Core[375], buf, pos$8, v10),
     pos$10 = caml_call3(Core[375], buf, pos$9, v11),
     pos$11 = caml_call3(Core[375], buf, pos$10, v12),
     pos$12 = caml_call3(Core[375], buf, pos$11, v13);
    return caml_call3(Core[375], buf, pos$12, v14);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_linux_ext_src_linux_ext_ml, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_uptime = caml_call2(Core_Time_float[84][3], buf, pos_ref),
     v_load1 = caml_call2(Core[378], buf, pos_ref),
     v_load5 = caml_call2(Core[378], buf, pos_ref),
     v_load15 = caml_call2(Core[378], buf, pos_ref),
     v_total_ram = caml_call2(Core[378], buf, pos_ref),
     v_free_ram = caml_call2(Core[378], buf, pos_ref),
     v_shared_ram = caml_call2(Core[378], buf, pos_ref),
     v_buffer_ram = caml_call2(Core[378], buf, pos_ref),
     v_total_swap = caml_call2(Core[378], buf, pos_ref),
     v_free_swap = caml_call2(Core[378], buf, pos_ref),
     v_procs = caml_call2(Core[378], buf, pos_ref),
     v_totalhigh = caml_call2(Core[378], buf, pos_ref),
     v_freehigh = caml_call2(Core[378], buf, pos_ref),
     v_mem_unit = caml_call2(Core[378], buf, pos_ref);
    return [0,
            v_uptime,
            v_load1,
            v_load5,
            v_load15,
            v_total_ram,
            v_free_ram,
            v_shared_ram,
            v_buffer_ram,
            v_total_swap,
            v_free_swap,
            v_procs,
            v_totalhigh,
            v_freehigh,
            v_mem_unit];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(x_003){
    function _cx_(param){
     var
      _cA_ = param[2],
      _cB_ = _cA_[2],
      _cC_ = _cB_[2],
      _cD_ = _cC_[2],
      _cE_ = _cD_[2],
      _cF_ = _cE_[2],
      _cG_ = _cF_[2],
      _cH_ = _cG_[2],
      _cI_ = _cH_[2],
      _cJ_ = _cI_[2],
      _cK_ = _cJ_[2],
      _cL_ = _cK_[2],
      mem_unit = _cL_[2][1],
      freehigh = _cL_[1],
      totalhigh = _cK_[1],
      procs = _cJ_[1],
      free_swap = _cI_[1],
      total_swap = _cH_[1],
      buffer_ram = _cG_[1],
      shared_ram = _cF_[1],
      free_ram = _cE_[1],
      total_ram = _cD_[1],
      load15 = _cC_[1],
      load5 = _cB_[1],
      load1 = _cA_[1],
      uptime = param[1];
     return [0,
             uptime,
             load1,
             load5,
             load15,
             total_ram,
             free_ram,
             shared_ram,
             buffer_ram,
             total_swap,
             free_swap,
             procs,
             totalhigh,
             freehigh,
             mem_unit];
    }
    var _cy_ = 0;
    function _cz_(param){
     var switch$0 = runtime.caml_string_compare(param, cst_mem_unit$0);
     if(0 <= switch$0){
      if(0 >= switch$0) return 13;
      if(! caml_string_notequal(param, cst_procs$0)) return 10;
      if(! caml_string_notequal(param, cst_shared_ram$0)) return 6;
      if(! caml_string_notequal(param, cst_total_ram$0)) return 4;
      if(! caml_string_notequal(param, cst_total_swap$0)) return 8;
      if(! caml_string_notequal(param, cst_totalhigh$0)) return 11;
      if(! caml_string_notequal(param, cst_uptime$0)) return 0;
     }
     else{
      if(! caml_string_notequal(param, cst_buffer_ram$0)) return 7;
      if(! caml_string_notequal(param, cst_free_ram$0)) return 5;
      if(! caml_string_notequal(param, cst_free_swap$0)) return 9;
      if(! caml_string_notequal(param, cst_freehigh$0)) return 12;
      if(! caml_string_notequal(param, cst_load1$0)) return 1;
      if(! caml_string_notequal(param, cst_load15$0)) return 3;
      if(! caml_string_notequal(param, cst_load5$0)) return 2;
     }
     return -1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_uptime,
              1,
              Core_Time_float[84][9],
              [0,
               cst_load1,
               1,
               Core[390],
               [0,
                cst_load5,
                1,
                Core[390],
                [0,
                 cst_load15,
                 1,
                 Core[390],
                 [0,
                  cst_total_ram,
                  1,
                  Core[390],
                  [0,
                   cst_free_ram,
                   1,
                   Core[390],
                   [0,
                    cst_shared_ram,
                    1,
                    Core[390],
                    [0,
                     cst_buffer_ram,
                     1,
                     Core[390],
                     [0,
                      cst_total_swap,
                      1,
                      Core[390],
                      [0,
                       cst_free_swap,
                       1,
                       Core[390],
                       [0,
                        cst_procs,
                        1,
                        Core[390],
                        [0,
                         cst_totalhigh,
                         1,
                         Core[390],
                         [0,
                          cst_freehigh,
                          1,
                          Core[390],
                          [0, cst_mem_unit, 1, Core[390], 0]]]]]]]]]]]]]],
             _cz_,
             _cy_,
             _cx_,
             x_003);
   }
   function sexp_of_t(param){
    var
     mem_unit_031 = param[14],
     freehigh_029 = param[13],
     totalhigh_027 = param[12],
     procs_025 = param[11],
     free_swap_023 = param[10],
     total_swap_021 = param[9],
     buffer_ram_019 = param[8],
     shared_ram_017 = param[7],
     free_ram_015 = param[6],
     total_ram_013 = param[5],
     load15_011 = param[4],
     load5_009 = param[3],
     load1_007 = param[2],
     uptime_005 = param[1],
     arg_032 = caml_call1(Core[389], mem_unit_031),
     bnds_004 = [0, [1, [0, _e_, [0, arg_032, 0]]], 0],
     arg_030 = caml_call1(Core[389], freehigh_029),
     bnds_004$0 = [0, [1, [0, _f_, [0, arg_030, 0]]], bnds_004],
     arg_028 = caml_call1(Core[389], totalhigh_027),
     bnds_004$1 = [0, [1, [0, _g_, [0, arg_028, 0]]], bnds_004$0],
     arg_026 = caml_call1(Core[389], procs_025),
     bnds_004$2 = [0, [1, [0, _h_, [0, arg_026, 0]]], bnds_004$1],
     arg_024 = caml_call1(Core[389], free_swap_023),
     bnds_004$3 = [0, [1, [0, _i_, [0, arg_024, 0]]], bnds_004$2],
     arg_022 = caml_call1(Core[389], total_swap_021),
     bnds_004$4 = [0, [1, [0, _j_, [0, arg_022, 0]]], bnds_004$3],
     arg_020 = caml_call1(Core[389], buffer_ram_019),
     bnds_004$5 = [0, [1, [0, _k_, [0, arg_020, 0]]], bnds_004$4],
     arg_018 = caml_call1(Core[389], shared_ram_017),
     bnds_004$6 = [0, [1, [0, _l_, [0, arg_018, 0]]], bnds_004$5],
     arg_016 = caml_call1(Core[389], free_ram_015),
     bnds_004$7 = [0, [1, [0, _m_, [0, arg_016, 0]]], bnds_004$6],
     arg_014 = caml_call1(Core[389], total_ram_013),
     bnds_004$8 = [0, [1, [0, _n_, [0, arg_014, 0]]], bnds_004$7],
     arg_012 = caml_call1(Core[389], load15_011),
     bnds_004$9 = [0, [1, [0, _o_, [0, arg_012, 0]]], bnds_004$8],
     arg_010 = caml_call1(Core[389], load5_009),
     bnds_004$10 = [0, [1, [0, _p_, [0, arg_010, 0]]], bnds_004$9],
     arg_008 = caml_call1(Core[389], load1_007),
     bnds_004$11 = [0, [1, [0, _q_, [0, arg_008, 0]]], bnds_004$10],
     arg_006 = caml_call1(Core_Time_float[84][10], uptime_005),
     bnds_004$12 = [0, [1, [0, _r_, [0, arg_006, 0]]], bnds_004$11];
    return [1, bnds_004$12];
   }
   function tcp_bool_option_of_sexp(sexp_036){
    a:
    {
     if(0 === sexp_036[0]){
      var _ct_ = sexp_036[1];
      b:
      if(caml_string_notequal(_ct_, cst_TCP_CORK)){
       if(caml_string_notequal(_ct_, cst_TCP_QUICKACK)){
        if(! caml_string_notequal(_ct_, cst_tCP_CORK)) break b;
        if(caml_string_notequal(_ct_, cst_tCP_QUICKACK)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _cu_ = sexp_036[1];
     if(! _cu_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_035, sexp_036);
     var _cv_ = _cu_[1];
     if(0 !== _cv_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_035, sexp_036);
     var _cw_ = _cv_[1];
     b:
     if(caml_string_notequal(_cw_, cst_TCP_CORK)){
      if(caml_string_notequal(_cw_, cst_TCP_QUICKACK)){
       if(! caml_string_notequal(_cw_, cst_tCP_CORK)) break b;
       if(caml_string_notequal(_cw_, cst_tCP_QUICKACK)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_035, sexp_036);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_035, sexp_036);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_035, sexp_036);
   }
   function sexp_of_tcp_bool_option(param){return param ? _s_ : _t_;}
   var
    _v_ = caml_call1(Bin_prot_Shape[5], _u_),
    _w_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_tcp_bool_option), 0, _v_], 0],
    _x_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$0),
    group$0 = caml_call2(Bin_prot_Shape[2], _x_, _w_),
    _y_ = caml_call1(Bin_shape[2][1], cst_tcp_bool_option$0),
    bin_shape_tcp_bool_option =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _y_), 0);
   function bin_size_tcp_bool_option(param){return 1;}
   function bin_write_tcp_bool_option(buf, pos, param){
    return param
            ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
            : caml_call3(Bin_prot_Write[30], buf, pos, 0);
   }
   var
    bin_writer_tcp_bool_option =
      [0, bin_size_tcp_bool_option, bin_write_tcp_bool_option];
   function bin_read_tcp_bool_option(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_linux_ext_src_linux_ext_ml$1,
             pos_ref[1]);
   }
   function bin_read_tcp_bool_option$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    return 0 === match
            ? 0
            : 1
              === match
              ? 1
              : caml_call2(Bin_prot_Common[18], _z_, pos_ref[1]);
   }
   var
    bin_reader_tcp_bool_option =
      [0, bin_read_tcp_bool_option$0, bin_read_tcp_bool_option],
    bin_tcp_bool_option =
      [0,
       bin_shape_tcp_bool_option,
       bin_writer_tcp_bool_option,
       bin_reader_tcp_bool_option];
   function tcp_string_option_of_sexp(sexp_040){
    a:
    {
     if(0 === sexp_040[0]){
      var _cp_ = sexp_040[1];
      if
       (caml_string_notequal(_cp_, cst_TCP_CONGESTION)
        && caml_string_notequal(_cp_, cst_tCP_CONGESTION))
       break a;
      return 0;
     }
     var _cq_ = sexp_040[1];
     if(! _cq_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_039, sexp_040);
     var _cr_ = _cq_[1];
     if(0 !== _cr_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_039, sexp_040);
     var _cs_ = _cr_[1];
     if
      (caml_string_notequal(_cs_, cst_TCP_CONGESTION)
       && caml_string_notequal(_cs_, cst_tCP_CONGESTION))
      break a;
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_039, sexp_040);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_039, sexp_040);
   }
   function sexp_of_tcp_string_option(param){return _A_;}
   var
    _C_ = caml_call1(Bin_prot_Shape[5], _B_),
    _D_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_tcp_string_option), 0, _C_], 0],
    _E_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$2),
    group$1 = caml_call2(Bin_prot_Shape[2], _E_, _D_),
    _F_ = caml_call1(Bin_shape[2][1], cst_tcp_string_option$0),
    bin_shape_tcp_string_option =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _F_), 0);
   function bin_size_tcp_string_option(param){return 1;}
   function bin_write_tcp_string_option(buf, pos, param){return caml_call3(Bin_prot_Write[30], buf, pos, 0);
   }
   var
    bin_writer_tcp_string_option =
      [0, bin_size_tcp_string_option, bin_write_tcp_string_option];
   function bin_read_tcp_string_option(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_linux_ext_src_linux_ext_ml$3,
             pos_ref[1]);
   }
   function bin_read_tcp_string_option$0(buf, pos_ref){
    return 0 === caml_call2(Bin_prot_Read[29], buf, pos_ref)
            ? 0
            : caml_call2(Bin_prot_Common[18], _G_, pos_ref[1]);
   }
   var
    bin_reader_tcp_string_option =
      [0, bin_read_tcp_string_option$0, bin_read_tcp_string_option],
    bin_tcp_string_option =
      [0,
       bin_shape_tcp_string_option,
       bin_writer_tcp_string_option,
       bin_reader_tcp_string_option];
   function sexp_of_t$0(param){
    if(! param) return _I_;
    var arg0_041 = param[1], res0_042 = caml_call1(Core[558], arg0_041);
    return [1, [0, _H_, [0, res0_042, 0]]];
   }
   var
    Bound_to_interface = [0, sexp_of_t$0],
    t_of_sexp$0 = Core[390],
    sexp_of_t$1 = Core[389];
   function of_int(t){return t;}
   function to_int(t){return t;}
   function incr(t){return t - 1 | 0;}
   function decr(t){return t + 1 | 0;}
   function equal(t$0, t){return caml_call2(Core[90], t$0, t);}
   var
    Priority =
      [0, t_of_sexp$0, sexp_of_t$1, equal, of_int, to_int, incr, decr];
   function sexp_of_t$2(param){
    var
     gid_049 = param[3],
     uid_047 = param[2],
     pid_045 = param[1],
     arg_050 = caml_call1(Core[389], gid_049),
     bnds_044 = [0, [1, [0, _J_, [0, arg_050, 0]]], 0],
     arg_048 = caml_call1(Core[389], uid_047),
     bnds_044$0 = [0, [1, [0, _K_, [0, arg_048, 0]]], bnds_044],
     arg_046 = caml_call1(Core_Pid[13], pid_045),
     bnds_044$1 = [0, [1, [0, _L_, [0, arg_046, 0]]], bnds_044$0];
    return [1, bnds_044$1];
   }
   var Peer_credentials = [0, sexp_of_t$2];
   function cpu_list_of_string_exn(str){
    function parse_int_pair(sep, str){
     try{
      var
       _cm_ = caml_call2(Core_String[74], str, sep),
       _cn_ = caml_call2(Core_Tuple[1][11], _cm_, caml_int_of_string);
      return _cn_;
     }
     catch(_co_){
      var
       _cj_ = [0, [1, [0, _M_, [0, caml_call1(Core[558], str), 0]]], 0],
       _ck_ = [0, [1, [0, _N_, [0, caml_call1(Core[345], sep), 0]]], _cj_],
       _cl_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_cpu_list_of_string_exn_exp),
           _ck_]];
      return caml_call1(Core[261], _cl_);
     }
    }
    function parse_range_pair(str){
     var match = parse_int_pair(45, str), last = match[2], first = match[1];
     if(! caml_call2(Core[91], first, last)) return [0, first, last];
     var
      _cg_ = [0, [1, [0, _O_, [0, caml_call1(Core[389], last), 0]]], 0],
      _ch_ = [0, [1, [0, _P_, [0, caml_call1(Core[389], first), 0]]], _cg_],
      _ci_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_cpu_list_of_string_exn_ran),
          _ch_]];
     return caml_call1(Core[261], _ci_);
    }
    var
     parts =
       caml_call2(Core_String[141], str, cst)
        ? 0
        : caml_call2(Core_String[78], str, 44),
     _bY_ = Core_Int[88];
    function _bZ_(acc, part){
     var
      match = caml_call2(Core_String[76], part, 58),
      match$0 = caml_call2(Core_String[76], part, 45);
     if(! match){
      if(match$0){
       var
        match$4 = parse_range_pair(part),
        last$0 = match$4[2],
        first$0 = match$4[1],
        _b9_ = function(_cf_){return first$0 + _cf_ | 0;},
        rlist$1 =
          caml_call2(Core_List[40], (last$0 - first$0 | 0) + 1 | 0, _b9_);
       return caml_call2(Core[156], acc, rlist$1);
      }
      try{var _ca_ = caml_int_of_string(part), cpu = _ca_;}
      catch(_ce_){
       var
        _b__ = [0, [1, [0, _S_, [0, caml_call1(Core[558], part), 0]]], 0],
        _b$_ =
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7], cst_cpu_list_of_string_exn_exp$0),
            _b__]],
        cpu = caml_call1(Core[261], _b$_);
      }
      return caml_call2(Core[156], acc, [0, cpu, 0]);
     }
     var
      match$1 = match[1],
      amt_stride = match$1[2],
      range = match$1[1],
      match$2 = parse_range_pair(range),
      last = match$2[2],
      first = match$2[1],
      match$3 = parse_int_pair(47, amt_stride),
      stride = match$3[2],
      amt = match$3[1];
     if(! caml_call2(Core[89], amt, 0) && ! caml_call2(Core[89], stride, 0)){
      if(caml_call2(Core[88], amt, stride)){
       var
        _b4_ = function(_cd_){return first + _cd_ | 0;},
        rlist = caml_call2(Core_List[40], (last - first | 0) + 1 | 0, _b4_);
       return caml_call2(Core[156], acc, rlist);
      }
      var
       _b5_ = caml_call2(Core[239], (last - first | 0) + 1 | 0, stride),
       _b6_ = caml_call1(Core_Float[43], _b5_),
       n_sublists = caml_call1(Core_Float[34], _b6_),
       _b7_ = function(li){return first + runtime.caml_mul(li, stride) | 0;},
       starts = caml_call2(Core_List[40], n_sublists, _b7_),
       _b8_ =
         function(start){
          var
           group_end =
             caml_call2(Core_Int[89], start + (amt - 1 | 0) | 0, last);
          function _cb_(_cc_){return start + _cc_ | 0;}
          return caml_call2
                  (Core_List[40], (group_end - start | 0) + 1 | 0, _cb_);
         },
       rlist$0 = caml_call2(Core_List[14], starts, _b8_);
      return caml_call2(Core[156], acc, rlist$0);
     }
     var
      _b1_ = [0, [1, [0, _Q_, [0, caml_call1(Core[389], stride), 0]]], 0],
      _b2_ = [0, [1, [0, _R_, [0, caml_call1(Core[389], amt), 0]]], _b1_],
      _b3_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_cpu_list_of_string_exn_inv),
          _b2_]];
     return caml_call1(Core[261], _b3_);
    }
    var _b0_ = caml_call3(Core_List[20], parts, 0, _bZ_);
    return caml_call2(Core_List[122], _b0_, _bY_);
   }
   function cpu_list_of_file_exn(file){
    var arg = Stdio_In_channel[18];
    function _bW_(eta){return caml_call2(arg, 0, eta);}
    var
     _bX_ = caml_call3(Stdio_In_channel[4], 0, file, _bW_),
     match = caml_call1(Core_List[82], _bX_);
    if(! match) return 0;
    var cpu_list = match[1];
    return cpu_list_of_string_exn(cpu_list);
   }
   function _T_(param){
    return cpu_list_of_file_exn(cst_sys_devices_system_cpu_iso);
   }
   var isolated_cpus = caml_call1(Core_Memo[3], _T_);
   function _U_(param){
    return cpu_list_of_file_exn(cst_sys_devices_system_cpu_onl);
   }
   var online_cpus = caml_call1(Core_Memo[3], _U_);
   function cpus_local_to_nic(ifname){
    return cpu_list_of_file_exn(caml_call2(Core[265], _V_, ifname));
   }
   caml_call1(Core_Or_error[52], cst_Linux_ext_Sysinfo_sysinfo);
   var u = Core_Or_error[52];
   caml_call1(u, cst_Linux_ext_cores);
   caml_call1(u, cst_Linux_ext_isolated_cores);
   caml_call1(u, cst_Linux_ext_online_cores);
   caml_call1(u, cst_Linux_ext_cpus_local_to_ni);
   caml_call1(u, cst_Linux_ext_file_descr_realp);
   caml_call1(u, cst_Linux_ext_get_ipv4_address);
   caml_call1(u, cst_Linux_ext_get_mac_address);
   caml_call1(u, cst_Linux_ext_bind_to_interfac);
   caml_call1(u, cst_Linux_ext_get_bind_to_inte);
   caml_call1(u, cst_Linux_ext_get_terminal_siz);
   caml_call1(u, cst_Linux_ext_gettcpopt_bool);
   caml_call1(u, cst_Linux_ext_gettcpopt_string);
   caml_call1(u, cst_Linux_ext_setpriority);
   caml_call1(u, cst_Linux_ext_getpriority);
   caml_call1(u, cst_Linux_ext_in_channel_realp);
   caml_call1(u, cst_Linux_ext_out_channel_real);
   caml_call1(u, cst_Linux_ext_pr_get_name);
   caml_call1(u, cst_Linux_ext_pr_get_pdeathsig);
   caml_call1(u, cst_Linux_ext_pr_set_name_firs);
   caml_call1(u, cst_Linux_ext_pr_set_pdeathsig);
   caml_call1(u, cst_Linux_ext_sched_setaffinit);
   caml_call1(u, cst_Linux_ext_sched_getaffinit);
   caml_call1(u, cst_Linux_ext_sched_setaffinit$0);
   caml_call1(u, cst_Linux_ext_send_no_sigpipe);
   caml_call1(u, cst_Linux_ext_send_nonblocking);
   caml_call1(u, cst_Linux_ext_sendfile);
   caml_call1(u, cst_Linux_ext_sendmsg_nonblock);
   caml_call1(u, cst_Linux_ext_settcpopt_bool);
   caml_call1(u, cst_Linux_ext_settcpopt_string);
   caml_call1(u, cst_Linux_ext_peer_credentials);
   var
    _X_ = caml_call1(Bin_prot_Shape[5], _W_),
    _Y_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_tcp_bool_option$1), 0, _X_], 0],
    _Z_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$4),
    group$2 = caml_call2(Bin_prot_Shape[2], _Z_, _Y_),
    ___ = caml_call1(Bin_shape[2][1], cst_tcp_bool_option$2);
   caml_call1(caml_call2(Bin_prot_Shape[10], group$2, ___), 0);
   var
    _aa_ = caml_call1(Bin_prot_Shape[5], _$_),
    _ab_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_tcp_string_option$1), 0, _aa_],
       0],
    _ac_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$5),
    group$3 = caml_call2(Bin_prot_Shape[2], _ac_, _ab_),
    _ad_ = caml_call1(Bin_shape[2][1], cst_tcp_string_option$2);
   caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _ad_), 0);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_get);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_get_time);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_set_time);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_get_resolu);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_get_proces);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Clock_get_thread);
   var
    nonblock = caml_call1(Core_Int63[72], 2048),
    cloexec = caml_call1(Core_Int63[72], 524288),
    semaphore = caml_call1(Core_Int63[72], 1),
    known =
      [0,
       [0, nonblock, cst_nonblock],
       [0, [0, cloexec, cst_cloexec], [0, [0, semaphore, cst_semaphore], 0]]];
   caml_call1(Flags[2], [0, known, 0, 1, 1]);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Eventfd_create);
   var
    _ae_ = Core[603],
    _af_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _ae_], 0],
    _ag_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$6),
    group$4 = caml_call2(Bin_prot_Shape[2], _ag_, _af_),
    _ah_ = caml_call1(Bin_shape[2][1], cst_t$0);
   caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _ah_), 0);
   var
    nonblock$0 = caml_call1(Core_Int63[72], 2048),
    cloexec$0 = caml_call1(Core_Int63[72], 524288),
    known$0 =
      caml_call1
       (Core_List[59],
        [0,
         [0, nonblock$0, cst_nonblock$0],
         [0, [0, cloexec$0, cst_cloexec$0], 0]]);
   caml_call1(Flags[2], [0, known$0, 0, 0, 1]);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Timerfd_create);
   var
    i63 = Core_Int63[72],
    cloexec$1 = caml_call1(i63, 1),
    allow_sealing = caml_call1(i63, 2),
    hugetlb = caml_call1(i63, 4),
    noexec_seal = caml_call1(i63, 8),
    exec = caml_call1(i63, 16),
    huge_2mb = caml_call1(i63, 1409286144),
    huge_1gb = caml_call1(i63, 2013265920),
    known$1 =
      [0,
       [0, cloexec$1, cst_cloexec$1],
       [0,
        [0, allow_sealing, cst_allow_sealing],
        [0,
         [0, hugetlb, cst_hugetlb],
         [0,
          [0, noexec_seal, cst_noexec_seal],
          [0,
           [0, exec, cst_exec],
           [0,
            [0, huge_2mb, cst_huge_2mb],
            [0, [0, huge_1gb, cst_huge_1gb], 0]]]]]]];
   caml_call1(Flags[2], [0, known$1, 0, 1, 1]);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Memfd_create);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Extended_file_at);
   caml_call1(Core_Or_error[52], cst_Linux_ext_Extended_file_at$0);
   function _ai_(t){
    var _bV_ = runtime.core_unix_clock_gettime(t);
    return caml_call1(Core_Time_float[84][82], _bV_);
   }
   function _aj_(t, s){
    return runtime.core_unix_clock_settime
            (t, caml_call1(Core_Time_float[84][89], s));
   }
   function _ak_(t){
    var _bU_ = runtime.core_unix_clock_getres(t);
    return caml_call1(Core_Time_float[84][82], _bU_);
   }
   var
    get =
      [0,
       function(_bT_){return runtime.core_unix_pthread_getcpuclockid(_bT_);}],
    get_time = [0, _ai_],
    set_time = [0, _aj_],
    get_resolution = [0, _ak_],
    get_process_clock =
      [0,
       function(_bS_){
        return runtime.core_unix_clock_process_cputime_id_stub(_bS_);
       }],
    get_thread_clock =
      [0,
       function(_bR_){
        return runtime.core_unix_clock_thread_cputime_id_stub(_bR_);
       }],
    Clock =
      [0,
       get,
       get_time,
       set_time,
       get_resolution,
       get_process_clock,
       get_thread_clock],
    _al_ = Core_Int63[98],
    _am_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _al_], 0],
    _an_ = caml_call1(Bin_shape[4][1], cst_linux_ext_src_linux_ext_ml$7),
    group$5 = caml_call2(Bin_prot_Shape[2], _an_, _am_),
    _ao_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _ao_), 0),
    bin_size_t$0 = Core_Int63[94],
    bin_write_t$0 = Core_Int63[95],
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    bin_read_t$1 = Core_Int63[97],
    bin_read_t$2 = Core_Int63[96],
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    compare = Core_Int63[114],
    t_of_sexp$1 = Core_Int63[102],
    sexp_of_t$3 = Core_Int63[103],
    realtime = runtime.core_linux_timerfd_CLOCK_REALTIME(0),
    monotonic = runtime.core_linux_timerfd_CLOCK_MONOTONIC(0),
    Clock$0 =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       compare,
       t_of_sexp$1,
       sexp_of_t$3,
       realtime,
       monotonic],
    nonblock$1 = runtime.core_linux_timerfd_TFD_NONBLOCK(0),
    cloexec$2 = runtime.core_linux_timerfd_TFD_CLOEXEC(0),
    known$2 =
      caml_call1
       (Core_List[59],
        [0,
         [0, nonblock$1, cst_nonblock$1],
         [0, [0, cloexec$2, cst_cloexec$2], 0]]),
    include = caml_call1(Flags[2], [0, known$2, 0, 0, 1]),
    t_of_sexp$2 = include[1],
    sexp_of_t$4 = include[2],
    typerep_of_t = include[3],
    typename_of_t = include[4],
    symbol = include[5],
    symbol$0 = include[6],
    symbol$1 = include[7],
    symbol$2 = include[8],
    symbol$3 = include[9],
    symbol$4 = include[10],
    equal$0 = include[11],
    compare$0 = include[12],
    min = include[13],
    max = include[14],
    ascending = include[15],
    descending = include[16],
    between = include[17],
    clamp_exn = include[18],
    clamp = include[19],
    comparator = include[20],
    validate_lbound = include[21],
    validate_ubound = include[22],
    validate_bound = include[23],
    Replace_polymorphic_compare = include[24],
    Map = include[25],
    Set = include[26],
    to_flag_list = include[27],
    of_int$0 = include[28],
    to_int_exn = include[29],
    empty = include[30],
    symbol$5 = include[31],
    symbol$6 = include[32],
    intersect = include[33],
    complement = include[34],
    is_empty = include[35],
    do_intersect = include[36],
    are_disjoint = include[37],
    is_subset = include[38],
    Unstable = include[39],
    compare$1 = Core_unix_File_descr[4],
    sexp_of_t$5 = Core_unix_File_descr[2];
   function to_file_descr(t){return t;}
   function create(opt, clock){
    if(opt) var sth = opt[1], flags = sth; else var flags = empty;
    var _bQ_ = runtime.core_linux_timerfd_create(clock, flags);
    return caml_call1(Core_unix_File_descr[13], _bQ_);
   }
   function _ap_(param){return create(0, Clock$0[12]);}
   var match = caml_call1(Core_Result[54], _ap_);
   if(0 === match[0]){
    var t = match[1];
    caml_call2(Core_unix[53], 0, t);
    var create$0 = [0, create];
   }
   else{
    var _aS_ = match[1];
    a:
    {
     if(_aS_[1] === Core_unix[4]){
      var _aT_ = _aS_[2];
      if(typeof _aT_ === "number" && 25 === _aT_){
       var
        _aU_ = caml_call1(Core_Or_error[52], cst_Linux_ext_Timerfd_create$0);
       break a;
      }
     }
     var _aU_ = [0, create];
    }
    var create$0 = _aU_;
   }
   function timerfd_settime(t, absolute, initial, interval){
    var
     _bJ_ = caml_call2(Base_Int63[98][11], initial, Base_Int63[98][15]),
     _bK_ =
       _bJ_ || caml_call2(Base_Int63[98][11], interval, Base_Int63[98][15]);
    if(_bK_){
     var
      _bL_ =
        [0, [1, [0, _aq_, [0, caml_call1(Core_Int63[103], interval), 0]]], 0],
      _bM_ =
        [0,
         [1, [0, _ar_, [0, caml_call1(Core_Int63[103], initial), 0]]],
         _bL_],
      _bN_ =
        [0,
         [1, [0, [1, [0, _as_, [0, caml_call1(sexp_of_t$5, t), 0]]], _bM_]],
         0],
      _bO_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_timerfd_settime_got_invali),
          _bN_]];
     caml_call1(Core[261], _bO_);
    }
    var
     _bP_ = runtime.core_linux_timerfd_settime(t, absolute, initial, interval);
    return caml_call2(Core_unix[5][3][12], _bP_, cst_timerfd_settime);
   }
   function initial_of_span(span){
    var
     _bI_ =
       caml_call2(Time_ns_unix[72][16], span, Time_ns_unix[72][76])
        ? Time_ns_unix[72][68]
        : span;
    return caml_call1(Time_ns_unix[72][136], _bI_);
   }
   function set_at(t, at){
    if(caml_call2(Time_ns_unix[90], at, Time_ns_unix[33]))
     caml_call5
      (Core[247],
       0,
       _at_,
       cst_Timerfd_set_at_got_time_be,
       at,
       Time_ns_unix[85]);
    var _bH_ = Core_Int63[16];
    return timerfd_settime(t, 1, caml_call1(Time_ns_unix[51], at), _bH_);
   }
   function set_after(t, span){
    var _bG_ = Core_Int63[16];
    return timerfd_settime(t, 0, initial_of_span(span), _bG_);
   }
   function set_repeating(after, t, interval){
    if(caml_call2(Time_ns_unix[72][16], interval, Time_ns_unix[72][76]))
     caml_call5
      (Core[247],
       0,
       _au_,
       cst_Timerfd_set_repeating_got_,
       interval,
       Time_ns_unix[72][10]);
    var interval$0 = caml_call1(Time_ns_unix[72][136], interval);
    return timerfd_settime
            (t,
             0,
             caml_call3(Core_Option[41], after, interval$0, initial_of_span),
             interval$0);
   }
   function set_repeating_at(t, at, interval){
    if(caml_call2(Time_ns_unix[90], at, Time_ns_unix[33]))
     caml_call5
      (Core[247],
       0,
       _av_,
       cst_Timerfd_set_repeating_at_g,
       at,
       Time_ns_unix[85]);
    if(caml_call2(Time_ns_unix[72][16], interval, Time_ns_unix[72][76]))
     caml_call5
      (Core[247],
       0,
       _aw_,
       cst_Timerfd_set_repeating_at_g$0,
       interval,
       Time_ns_unix[72][10]);
    var interval$0 = caml_call1(Time_ns_unix[72][136], interval);
    return timerfd_settime(t, 1, caml_call1(Time_ns_unix[51], at), interval$0);
   }
   function clear(t){
    return timerfd_settime(t, 0, Core_Int63[16], Core_Int63[16]);
   }
   function get$0(t){
    var spec = runtime.core_linux_timerfd_gettime(t);
    return caml_call2(Time_ns_unix[72][21], spec[2], Time_ns_unix[72][76])
            ? caml_call2
               (Time_ns_unix[72][21], spec[1], Time_ns_unix[72][76])
              ? 194655791
              : [0, 324612531, spec[1]]
            : [0, 990972795, spec];
   }
   function unsafe_timerfd_settime(_bF_, _bE_, _bD_, _bC_){
    return runtime.core_linux_timerfd_settime(_bF_, _bE_, _bD_, _bC_);
   }
   var
    Private = [0, unsafe_timerfd_settime],
    cloexec$3 = runtime.core_linux_memfd_MFD_CLOEXEC(0),
    allow_sealing$0 = runtime.core_linux_memfd_MFD_ALLOW_SEALING(0),
    hugetlb$0 = runtime.core_linux_memfd_MFD_HUGETLB(0),
    noexec_seal$0 = runtime.core_linux_memfd_MFD_NOEXEC_SEAL(0),
    exec$0 = runtime.core_linux_memfd_MFD_EXEC(0),
    huge_2mb$0 = runtime.core_linux_memfd_MFD_HUGE_2MB(0),
    huge_1gb$0 = runtime.core_linux_memfd_MFD_HUGE_1GB(0),
    known$3 =
      [0,
       [0, cloexec$3, cst_cloexec$3],
       [0,
        [0, allow_sealing$0, cst_allow_sealing$0],
        [0,
         [0, hugetlb$0, cst_hugetlb$0],
         [0,
          [0, noexec_seal$0, cst_noexec_seal$0],
          [0,
           [0, exec$0, cst_exec$0],
           [0,
            [0, huge_2mb$0, cst_huge_2mb$0],
            [0, [0, huge_1gb$0, cst_huge_1gb$0], 0]]]]]]],
    include$0 = caml_call1(Flags[2], [0, known$3, 0, 1, 1]),
    t_of_sexp$3 = include$0[1],
    sexp_of_t$6 = include$0[2],
    typerep_of_t$0 = include$0[3],
    typename_of_t$0 = include$0[4],
    symbol$7 = include$0[5],
    symbol$8 = include$0[6],
    symbol$9 = include$0[7],
    symbol$10 = include$0[8],
    symbol$11 = include$0[9],
    symbol$12 = include$0[10],
    equal$1 = include$0[11],
    compare$2 = include$0[12],
    min$0 = include$0[13],
    max$0 = include$0[14],
    ascending$0 = include$0[15],
    descending$0 = include$0[16],
    between$0 = include$0[17],
    clamp_exn$0 = include$0[18],
    clamp$0 = include$0[19],
    comparator$0 = include$0[20],
    validate_lbound$0 = include$0[21],
    validate_ubound$0 = include$0[22],
    validate_bound$0 = include$0[23],
    Replace_polymorphic_compare$0 = include$0[24],
    Map$0 = include$0[25],
    Set$0 = include$0[26],
    to_flag_list$0 = include$0[27],
    of_int$1 = include$0[28],
    to_int_exn$0 = include$0[29],
    empty$0 = include$0[30],
    symbol$13 = include$0[31],
    symbol$14 = include$0[32],
    intersect$0 = include$0[33],
    complement$0 = include$0[34],
    is_empty$0 = include$0[35],
    do_intersect$0 = include$0[36],
    are_disjoint$0 = include$0[37],
    is_subset$0 = include$0[38],
    Unstable$0 = include$0[39],
    sexp_of_t$7 = Core_unix_File_descr[2];
   function create$1(opt, _bB_, name){
    if(opt) var sth = opt[1], flags = sth; else var flags = empty$0;
    if(_bB_)
     var sth$0 = _bB_[1], initial_size = sth$0;
    else
     var initial_size = 0;
    return runtime.core_linux_memfd_create(flags, initial_size, name);
   }
   var create$2 = caml_call1(Core_Or_error[30], create$1);
   function to_file_descr$0(t){return t;}
   var
    cloexec$4 = runtime.core_linux_eventfd_EFD_CLOEXEC(0),
    nonblock$2 = runtime.core_linux_eventfd_EFD_NONBLOCK(0),
    semaphore$0 = runtime.core_linux_eventfd_EFD_SEMAPHORE(0),
    known$4 =
      [0,
       [0, cloexec$4, cst_cloexec$4],
       [0,
        [0, nonblock$2, cst_nonblock$2],
        [0, [0, semaphore$0, cst_semaphore$0], 0]]],
    include$1 = caml_call1(Flags[2], [0, known$4, 0, 1, 1]),
    t_of_sexp$4 = include$1[1],
    sexp_of_t$8 = include$1[2],
    typerep_of_t$1 = include$1[3],
    typename_of_t$1 = include$1[4],
    symbol$15 = include$1[5],
    symbol$16 = include$1[6],
    symbol$17 = include$1[7],
    symbol$18 = include$1[8],
    symbol$19 = include$1[9],
    symbol$20 = include$1[10],
    equal$2 = include$1[11],
    compare$3 = include$1[12],
    min$1 = include$1[13],
    max$1 = include$1[14],
    ascending$1 = include$1[15],
    descending$1 = include$1[16],
    between$1 = include$1[17],
    clamp_exn$1 = include$1[18],
    clamp$1 = include$1[19],
    comparator$1 = include$1[20],
    validate_lbound$1 = include$1[21],
    validate_ubound$1 = include$1[22],
    validate_bound$1 = include$1[23],
    Replace_polymorphic_compare$1 = include$1[24],
    Map$1 = include$1[25],
    Set$1 = include$1[26],
    to_flag_list$1 = include$1[27],
    of_int$2 = include$1[28],
    to_int_exn$1 = include$1[29],
    empty$1 = include$1[30],
    symbol$21 = include$1[31],
    symbol$22 = include$1[32],
    intersect$1 = include$1[33],
    complement$1 = include$1[34],
    is_empty$1 = include$1[35],
    do_intersect$1 = include$1[36],
    are_disjoint$1 = include$1[37],
    is_subset$1 = include$1[38],
    Unstable$1 = include$1[39],
    compare$4 = Core_unix_File_descr[4],
    sexp_of_t$9 = Core_unix_File_descr[2];
   function create$3(opt, init){
    if(opt) var sth = opt[1], flags = sth; else var flags = empty$1;
    return runtime.core_linux_eventfd(init, flags);
   }
   var create$4 = caml_call1(Core_Or_error[30], create$3);
   function to_file_descr$1(t){return t;}
   function sendfile(opt, len, fd, sock){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var
      _bA_ =
        runtime.caml_int64_sub
         (caml_call1(Core_unix[75], fd)[9], runtime.caml_int64_of_int32(pos)),
      len$1 = caml_call1(Core_Int64[6], _bA_);
    return runtime.core_linux_sendfile_stub(sock, fd, pos, len$1);
   }
   var
    sysinfo =
      [0,
       function(param){
        var
         raw = runtime.core_linux_sysinfo(0),
         _bn_ = raw[14],
         _bo_ = raw[13],
         _bp_ = raw[12],
         _bq_ = raw[11],
         _br_ = raw[10],
         _bs_ = raw[9],
         _bt_ = raw[8],
         _bu_ = raw[7],
         _bv_ = raw[6],
         _bw_ = raw[5],
         _bx_ = raw[4],
         _by_ = raw[3],
         _bz_ = raw[2];
        return [0,
                caml_call1(Core_Time_float[84][96], raw[1]),
                _bz_,
                _by_,
                _bx_,
                _bw_,
                _bv_,
                _bu_,
                _bt_,
                _bs_,
                _br_,
                _bq_,
                _bp_,
                _bo_,
                _bn_];
       }];
   function check_send_args(pos, len, buf){
    var str_len = runtime.caml_ml_bytes_length(buf);
    if(pos){
     var pos$0 = pos[1];
     if(caml_call2(Core[92], pos$0, 0))
      caml_call1(Core[5], cst_send_nonblocking_no_sigpip);
     if(caml_call2(Core[91], pos$0, str_len))
      caml_call1(Core[5], cst_send_nonblocking_no_sigpip$0);
     var pos$1 = pos$0;
    }
    else
     var pos$1 = 0;
    if(len){
     var len$0 = len[1];
     if(caml_call2(Core[92], len$0, 0))
      caml_call1(Core[5], cst_send_nonblocking_no_sigpip$1);
     if(caml_call2(Core[91], pos$1 + len$0 | 0, str_len))
      caml_call1(Core[5], cst_send_nonblocking_no_sigpip$2);
     var len$1 = len$0;
    }
    else
     var len$1 = str_len - pos$1 | 0;
    return [0, pos$1, len$1];
   }
   function send_nonblocking_no_sigpipe(sock, pos, len, buf){
    var
     match = check_send_args(pos, len, buf),
     len$0 = match[2],
     pos$0 = match[1],
     res =
       runtime.core_linux_send_nonblocking_no_sigpipe_stub
        (sock, pos$0, len$0, buf);
    return caml_call2(Core[90], res, -1) ? 0 : [0, res];
   }
   function send_no_sigpipe(sock, pos, len, buf){
    var
     match = check_send_args(pos, len, buf),
     len$0 = match[2],
     pos$0 = match[1];
    return runtime.core_linux_send_no_sigpipe_stub(sock, pos$0, len$0, buf);
   }
   function sendmsg_nonblocking_no_sigpipe(sock, count, iovecs){
    if(count){
     var count$0 = count[1];
     if(caml_call2(Core[92], count$0, 0))
      caml_call1(Core[5], cst_sendmsg_nonblocking_no_sig);
     var n_iovecs = iovecs.length - 1;
     if(caml_call2(Core[91], count$0, n_iovecs))
      caml_call1(Core[5], cst_sendmsg_nonblocking_no_sig$0);
     var count$1 = count$0;
    }
    else
     var count$1 = iovecs.length - 1;
    var
     res =
       runtime.core_linux_sendmsg_nonblocking_no_sigpipe_stub
        (sock, iovecs, count$1);
    return caml_call2(Core[90], res, -1) ? 0 : [0, res];
   }
   function file_descr_realpath(fd){
    var
     _bl_ = caml_call1(Core_unix_File_descr[12], fd),
     _bm_ = caml_call2(Core[18], cst_proc_self_fd, _bl_);
    return caml_call1(Filename_unix[1], _bm_);
   }
   function out_channel_realpath(oc){
    return file_descr_realpath(caml_call1(Core_unix[63], oc));
   }
   function in_channel_realpath(ic){
    return file_descr_realpath(caml_call1(Core_unix[62], ic));
   }
   function pid_to_int_or_zero(param){
    if(! param) return 0;
    var pid = param[1];
    return caml_call1(Core_Pid[46], pid);
   }
   function sched_setaffinity(pid, cpuset, param){
    return runtime.core_linux_sched_setaffinity
            (pid_to_int_or_zero(pid), cpuset);
   }
   function sched_getaffinity(pid, param){
    return runtime.core_linux_sched_getaffinity(pid_to_int_or_zero(pid));
   }
   function sched_setaffinity_this_thread(cpuset){
    var _bk_ = runtime.core_unix_gettid(0);
    return sched_setaffinity([0, caml_call1(Core_Pid[45], _bk_)], cpuset, 0);
   }
   function setpriority(pid, priority){
    return runtime.core_linux_setpriority(pid_to_int_or_zero(pid), priority);
   }
   function getpriority(pid, param){
    return runtime.core_linux_getpriority(pid_to_int_or_zero(pid));
   }
   function _ax_(param){
    var
     _bh_ = Core_Int64[62],
     _bi_ = caml_call1(Core_unix[291], 17),
     match = caml_call2(Core_Option[32], _bi_, _bh_);
    if(match){var n = match[1]; return n;}
    var _bj_ = caml_call1(online_cpus, 0);
    return caml_call1(Core_List[45], _bj_);
   }
   var _ay_ = caml_call1(Core_Memo[3], _ax_);
   function _az_(param){
    if(typeof param === "number"){
     var
      arg = Core_unix[53],
      _bd_ = function(eta){return caml_call2(arg, 0, eta);},
      _be_ = caml_call3(Core_unix[49], _aB_, _aA_, cst_dev_tty),
      _bf_ =
        function(_bg_){return runtime.core_linux_get_terminal_size(_bg_);};
     return caml_call3(Core[260], _bf_, _be_, _bd_);
    }
    var fd = param[2];
    return runtime.core_linux_get_terminal_size(fd);
   }
   function _aC_(fd, ifname){
    if(ifname) var name = ifname[1], name$0 = name; else var name$0 = cst$0;
    return runtime.core_linux_bind_to_interface(fd, name$0);
   }
   var
    cores = [0, _ay_],
    isolated_cpus$0 = [0, isolated_cpus],
    online_cpus$0 = [0, online_cpus],
    cpus_local_to_nic$0 = [0, cpus_local_to_nic],
    file_descr_realpath$0 = [0, file_descr_realpath];
   function _aD_(fd){
    var name = runtime.core_linux_get_bind_to_interface(fd);
    return caml_string_notequal(name, cst$1) ? [0, name] : 0;
   }
   var
    get_ipv4_address_for_interface =
      [0,
       function(_bc_){
        return runtime.core_linux_get_ipv4_address_for_interface(_bc_);
       }],
    get_mac_address =
      [0, function(_bb_){return runtime.core_linux_get_mac_address(_bb_);}],
    bind_to_interface = [0, _aC_],
    get_bind_to_interface = [0, _aD_],
    get_terminal_size = [0, _az_],
    gettcpopt_bool =
      [0,
       function(_ba_, _a$_){
        return runtime.core_linux_gettcpopt_bool_stub(_ba_, _a$_);
       }],
    gettcpopt_string =
      [0,
       function(_a__, _a9_){
        return runtime.core_linux_gettcpopt_string_stub(_a__, _a9_);
       }],
    setpriority$0 = [0, setpriority],
    getpriority$0 = [0, getpriority],
    in_channel_realpath$0 = [0, in_channel_realpath],
    out_channel_realpath$0 = [0, out_channel_realpath],
    pr_get_name =
      [0, function(_a8_){return runtime.core_linux_pr_get_name(_a8_);}],
    pr_get_pdeathsig =
      [0,
       function(_a7_){return runtime.core_linux_pr_get_pdeathsig_stub(_a7_);}],
    pr_set_name_first16 =
      [0, function(_a6_){return runtime.core_linux_pr_set_name(_a6_);}],
    pr_set_pdeathsig =
      [0,
       function(_a5_){return runtime.core_linux_pr_set_pdeathsig_stub(_a5_);}],
    sched_setaffinity$0 = [0, sched_setaffinity],
    sched_getaffinity$0 = [0, sched_getaffinity],
    sched_setaffinity_this_thread$0 = [0, sched_setaffinity_this_thread],
    send_no_sigpipe$0 = [0, send_no_sigpipe],
    send_nonblocking_no_sigpipe$0 = [0, send_nonblocking_no_sigpipe],
    sendfile$0 = [0, sendfile],
    sendmsg_nonblocking_no_sigpipe$0 = [0, sendmsg_nonblocking_no_sigpipe],
    settcpopt_bool =
      [0,
       function(_a4_, _a3_, _a2_){
        return runtime.core_linux_settcpopt_bool_stub(_a4_, _a3_, _a2_);
       }],
    settcpopt_string =
      [0,
       function(_a1_, _a0_, _aZ_){
        return runtime.core_linux_settcpopt_string_stub(_a1_, _a0_, _aZ_);
       }],
    peer_credentials =
      [0, function(_aY_){return runtime.core_linux_peer_credentials(_aY_);}],
    set = Core_Int63[16];
   function sexp_of_t$10(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _aE_;
       case 1:
        return _aF_;
       default: return _aG_;
     }
    var arg0_079 = param[1], res0_080 = caml_call1(Core[558], arg0_079);
    return [1, [0, _aH_, [0, res0_080, 0]]];
   }
   var Get_attr_result = [0, sexp_of_t$10];
   function sexp_of_t$11(param){
    switch(param){
      case 0:
       return _aI_;
      case 1:
       return _aJ_;
      case 2:
       return _aK_;
      default: return _aL_;
    }
   }
   var Set_attr_result = [0, sexp_of_t$11];
   function _aM_(follow_symlinks, path, name){
    return runtime.core_linux_getxattr(follow_symlinks, path, name);
   }
   var
    getxattr = [0, _aM_],
    setxattr =
      [0,
       function(opt, follow_symlinks, path, name, value, param){
        if(opt) var sth = opt[1], how = sth; else var how = 4150146;
        var
         flags =
           4150146 === how
            ? set
            : 816044828
              <= how
              ? runtime.core_linux_xattr_XATTR_CREATE_flag(0)
              : runtime.core_linux_xattr_XATTR_REPLACE_flag(0);
        return runtime.core_linux_setxattr
                (follow_symlinks, path, name, value, flags);
       }];
   caml_call1(Ppx_inline_test_lib[7], cst_linux_ext);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Linux_ext);
   var
    _aN_ = [0, Get_attr_result, getxattr, Set_attr_result, setxattr],
    _aO_ = Linux_ext_Epoll[1],
    _aP_ =
      [0,
       [0,
        t_of_sexp$3,
        sexp_of_t$6,
        typerep_of_t$0,
        typename_of_t$0,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol$12,
        equal$1,
        compare$2,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0,
        validate_lbound$0,
        validate_ubound$0,
        validate_bound$0,
        Replace_polymorphic_compare$0,
        Map$0,
        Set$0,
        to_flag_list$0,
        of_int$1,
        to_int_exn$0,
        empty$0,
        symbol$13,
        symbol$14,
        intersect$0,
        complement$0,
        is_empty$0,
        do_intersect$0,
        are_disjoint$0,
        is_subset$0,
        Unstable$0,
        cloexec$3,
        allow_sealing$0,
        hugetlb$0,
        noexec_seal$0,
        exec$0,
        huge_2mb$0,
        huge_1gb$0],
       sexp_of_t$7,
       to_file_descr$0,
       create$2],
    _aQ_ =
      [0,
       Clock$0,
       [0,
        t_of_sexp$2,
        sexp_of_t$4,
        typerep_of_t,
        typename_of_t,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal$0,
        compare$0,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        Map,
        Set,
        to_flag_list,
        of_int$0,
        to_int_exn,
        empty,
        symbol$5,
        symbol$6,
        intersect,
        complement,
        is_empty,
        do_intersect,
        are_disjoint,
        is_subset,
        Unstable,
        nonblock$1,
        cloexec$2],
       compare$1,
       sexp_of_t$5,
       to_file_descr,
       create$0,
       set_at,
       set_after,
       set_repeating,
       set_repeating_at,
       clear,
       get$0,
       Private];
   function _aR_(_aX_, _aW_){
    return runtime.core_linux_eventfd_write(_aX_, _aW_);
   }
   var
    Linux_ext =
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        sysinfo],
       sendfile$0,
       Bound_to_interface,
       sexp_of_tcp_bool_option,
       tcp_bool_option_of_sexp,
       bin_shape_tcp_bool_option,
       bin_size_tcp_bool_option,
       bin_write_tcp_bool_option,
       bin_writer_tcp_bool_option,
       bin_read_tcp_bool_option$0,
       bin_read_tcp_bool_option,
       bin_reader_tcp_bool_option,
       bin_tcp_bool_option,
       sexp_of_tcp_string_option,
       tcp_string_option_of_sexp,
       bin_shape_tcp_string_option,
       bin_size_tcp_string_option,
       bin_write_tcp_string_option,
       bin_writer_tcp_string_option,
       bin_read_tcp_string_option$0,
       bin_read_tcp_string_option,
       bin_reader_tcp_string_option,
       bin_tcp_string_option,
       gettcpopt_bool,
       settcpopt_bool,
       gettcpopt_string,
       settcpopt_string,
       send_nonblocking_no_sigpipe$0,
       send_no_sigpipe$0,
       sendmsg_nonblocking_no_sigpipe$0,
       Peer_credentials,
       peer_credentials,
       Clock,
       [0,
        [0,
         t_of_sexp$4,
         sexp_of_t$8,
         typerep_of_t$1,
         typename_of_t$1,
         symbol$15,
         symbol$16,
         symbol$17,
         symbol$18,
         symbol$19,
         symbol$20,
         equal$2,
         compare$3,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         validate_lbound$1,
         validate_ubound$1,
         validate_bound$1,
         Replace_polymorphic_compare$1,
         Map$1,
         Set$1,
         to_flag_list$1,
         of_int$2,
         to_int_exn$1,
         empty$1,
         symbol$21,
         symbol$22,
         intersect$1,
         complement$1,
         is_empty$1,
         do_intersect$1,
         are_disjoint$1,
         is_subset$1,
         Unstable$1,
         cloexec$4,
         nonblock$2,
         semaphore$0],
        compare$4,
        sexp_of_t$9,
        create$4,
        function(_aV_){return runtime.core_linux_eventfd_read(_aV_);},
        _aR_,
        to_file_descr$1],
       _aQ_,
       _aP_,
       pr_set_pdeathsig,
       pr_get_pdeathsig,
       pr_set_name_first16,
       pr_get_name,
       file_descr_realpath$0,
       out_channel_realpath$0,
       in_channel_realpath$0,
       sched_setaffinity$0,
       sched_getaffinity$0,
       sched_setaffinity_this_thread$0,
       cores,
       cpu_list_of_string_exn,
       isolated_cpus$0,
       online_cpus$0,
       cpus_local_to_nic$0,
       get_terminal_size,
       Priority,
       setpriority$0,
       getpriority$0,
       get_ipv4_address_for_interface,
       get_mac_address,
       bind_to_interface,
       get_bind_to_interface,
       _aO_,
       _aN_];
   runtime.caml_register_global(306, Linux_ext, cst_Linux_ext$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
