// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Markup__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Markup = [0];
   runtime.caml_register_global(0, Markup, "Markup__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Common
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Printf, Stdlib__String, Stdlib__Uchar, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "",
    cst$12 = " ",
    cst_PUBLIC = ' PUBLIC "',
    cst$13 = "?>",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$8 = cst$11,
    cst$7 = cst$11,
    cst$9 = "/>",
    cst$10 = cst$11,
    cst$4 = ":",
    cst = "<\/...>",
    cst$0 = cst$12,
    cst$1 = cst$12,
    cst$2 = cst$11,
    cst$3 = cst$11,
    cst$5 = cst$11,
    cst$6 = cst$13,
    xml_ns = "http://www.w3.org/XML/1998/namespace",
    xmlns_ns = "http://www.w3.org/2000/xmlns/",
    xlink_ns = "http://www.w3.org/1999/xlink",
    html_ns = "http://www.w3.org/1999/xhtml",
    svg_ns = "http://www.w3.org/2000/svg",
    mathml_ns = "http://www.w3.org/1998/Math/MathML",
    whitespace_chars = " \t\n\r",
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Uutf = global_data.Uutf,
    cst_EOF = "EOF",
    _u_ = [0, [11, "<\/", [2, 0, [12, 62, 0]]], "<\/%s>"],
    _n_ = [0, [12, 32, [2, 0, [11, '="', [2, 0, [12, 34, 0]]]]], ' %s="%s"'],
    _j_ =
      [0,
       [12,
        32,
        [2, 0, [11, cst_PUBLIC, [2, 0, [11, '" "', [2, 0, [12, 34, 0]]]]]]],
       ' %s PUBLIC "%s" "%s"'],
    _l_ =
      [0,
       [12, 32, [2, 0, [11, cst_PUBLIC, [2, 0, [12, 34, 0]]]]],
       ' %s PUBLIC "%s"'],
    _m_ =
      [0,
       [12, 32, [2, 0, [11, ' SYSTEM "', [2, 0, [12, 34, 0]]]]],
       ' %s SYSTEM "%s"'],
    _k_ = [0, [11, "<!DOCTYPE", [2, 0, [12, 62, 0]]], "<!DOCTYPE%s>"],
    _o_ = [0, [12, 60, [2, 0, [2, 0, [12, 62, 0]]]], "<%s%s>"],
    _p_ =
      [0,
       [11, '<?xml version="', [2, 0, [11, '">', 0]]],
       '<?xml version="%s">'],
    _q_ =
      [0,
       [2, 0, [11, ' encoding="', [2, 0, [12, 34, 0]]]],
       '%s encoding="%s"'],
    cst_yes = "yes",
    cst_no = "no",
    _r_ =
      [0,
       [2, 0, [11, ' standalone="', [2, 0, [12, 34, 0]]]],
       '%s standalone="%s"'],
    _s_ =
      [0, [11, "<?", [2, 0, [12, 32, [2, 0, [11, cst$13, 0]]]]], "<?%s %s?>"],
    _t_ = [0, [11, "<!--", [2, 0, [11, "-->", 0]]], "<!--%s-->"],
    _a_ = [0, [11, "U+", [4, 8, [0, 2, 4], 0, 0]], "U+%04X"];
   function compare_locations(param, _ai_){
    var
     column = _ai_[2],
     line = _ai_[1],
     column$0 = param[2],
     line$0 = param[1],
     order = line$0 - line | 0;
    return 0 === order ? column$0 - column | 0 : order;
   }
   var Token_tag = [0], u_rep = caml_call1(Stdlib_Uchar[10], Uutf[2]);
   function add_utf_8(buffer, c){
    var _ah_ = caml_call1(Stdlib_Uchar[9], c);
    return caml_call2(Uutf[23][1], buffer, _ah_);
   }
   var format_char = caml_call1(Stdlib_Printf[4], _a_);
   function is_in_range(lower, upper, c){
    var _af_ = lower <= c ? 1 : 0, _ag_ = _af_ ? c <= upper ? 1 : 0 : _af_;
    return _ag_;
   }
   function is_control_character(c){
    return 11 === c
            ? 1
            : is_in_range
               (1, 8, c)
              ? 1
              : is_in_range(14, 31, c) ? 1 : is_in_range(127, 159, c) ? 1 : 0;
   }
   function is_non_character(c){
    if(is_in_range(64976, 65007, c)) return 1;
    if(65535 !== (c & 65535) && 65534 !== (c & 65535)) return 0;
    return 1;
   }
   var _b_ = 57, _c_ = 48;
   function is_digit(_ae_){return is_in_range(_c_, _b_, _ae_);}
   function is_hex_digit(c){
    return is_digit(c)
            ? 1
            : is_in_range(65, 70, c) ? 1 : is_in_range(97, 102, c) ? 1 : 0;
   }
   function is_scalar(c){
    a:
    if(1114111 > c){if(55296 <= c && 57343 >= c) break a; return 1;}
    return 0;
   }
   var _d_ = 90, _e_ = 65;
   function is_uppercase(_ad_){return is_in_range(_e_, _d_, _ad_);}
   var _f_ = 122, _g_ = 97;
   function is_lowercase(_ac_){return is_in_range(_g_, _f_, _ac_);}
   function is_alphabetic(c){
    return is_uppercase(c) ? 1 : is_lowercase(c) ? 1 : 0;
   }
   function is_alphanumeric(c){
    return is_alphabetic(c) ? 1 : is_digit(c) ? 1 : 0;
   }
   function is_whitespace(c){
    var ___ = 32 === c ? 1 : 0;
    if(___)
     var _$_ = ___;
    else{
     var _aa_ = 10 === c ? 1 : 0;
     if(_aa_)
      var _$_ = _aa_;
     else
      var _ab_ = 9 === c ? 1 : 0, _$_ = _ab_ || (13 === c ? 1 : 0);
    }
    return _$_;
   }
   function is_whitespace_only(s){
    try{
     var
      _X_ =
        function(c){
         if(is_whitespace(c)) return 0;
         throw caml_maybe_attach_backtrace(Stdlib[3], 1);
        };
     caml_call1(caml_call1(Stdlib_String[30], _X_), s);
     var _Y_ = 1;
     return _Y_;
    }
    catch(_Z_){
     var _W_ = caml_wrap_exception(_Z_);
     if(_W_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
   }
   function to_lowercase(c){return is_uppercase(c) ? c + 32 | 0 : c;}
   var _h_ = 126, _i_ = 32;
   function is_printable(_V_){return is_in_range(_i_, _h_, _V_);}
   function char$0(c){
    if(! is_printable(c)) return caml_call1(format_char, c);
    var buffer = caml_call1(Stdlib_Buffer[1], 4);
    add_utf_8(buffer, c);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   function is_valid_html_char(c){
    var _T_ = is_control_character(c), _U_ = _T_ || is_non_character(c);
    return 1 - _U_;
   }
   function is_valid_xml_char(c){
    var _N_ = is_in_range(32, 55295, c);
    if(_N_)
     var _O_ = _N_;
    else{
     var _P_ = 9 === c ? 1 : 0;
     if(_P_)
      var _O_ = _P_;
     else{
      var _Q_ = 10 === c ? 1 : 0;
      if(_Q_)
       var _O_ = _Q_;
      else{
       var _R_ = 13 === c ? 1 : 0;
       if(_R_)
        var _O_ = _R_;
       else{
        var _S_ = is_in_range(57344, 65533, c);
        if(! _S_) return is_in_range(65536, 1114111, c);
        var _O_ = _S_;
       }
      }
     }
    }
    return _O_;
   }
   function signal_to_string(param){
    if(typeof param === "number") return cst;
    var _C_ = param[1];
    if(4400567 > _C_){
     if(17913 <= _C_){
      var match$5 = param[2], s$5 = match$5[2], target = match$5[1];
      return caml_call3(Stdlib_Printf[4], _s_, target, s$5);
     }
     var s$6 = param[2];
     return caml_call2(Stdlib_Printf[4], _t_, s$6);
    }
    if(936573133 > _C_){
     if(856096383 <= _C_){
      var
       match$2 = param[2],
       attributes = match$2[2],
       name$0 = match$2[1],
       name_to_string =
         function(param){
          var ns = param[1];
          if(runtime.caml_string_notequal(ns, cst$11)){
           var
            local_name = param[2],
            _M_ = caml_call2(Stdlib[28], cst$4, local_name);
           return caml_call2(Stdlib[28], ns, _M_);
          }
          var local_name$0 = param[2];
          return local_name$0;
         },
       _H_ =
         function(param){
          var value = param[2], name = param[1], _L_ = name_to_string(name);
          return caml_call3(Stdlib_Printf[4], _n_, _L_, value);
         },
       _I_ = caml_call1(caml_call1(Stdlib_List[20], _H_), attributes),
       attributes$0 = caml_call1(caml_call1(Stdlib_String[7], cst$5), _I_),
       _J_ = name_to_string(name$0);
      return caml_call3(Stdlib_Printf[4], _o_, _J_, attributes$0);
     }
     var
      x = param[2],
      s$2 = caml_call2(Stdlib_Printf[4], _p_, x[1]),
      match$3 = x[2];
     if(match$3)
      var
       encoding = match$3[1],
       s$3 = caml_call3(Stdlib_Printf[4], _q_, s$2, encoding);
     else
      var s$3 = s$2;
     var match$4 = x[3];
     if(match$4)
      var
       standalone = match$4[1],
       _K_ = standalone ? cst_yes : cst_no,
       s$4 = caml_call3(Stdlib_Printf[4], _r_, s$3, _K_);
     else
      var s$4 = s$3;
     return caml_call2(Stdlib[28], s$4, cst$6);
    }
    if(990181650 > _C_){
     var ss = param[2];
     return caml_call2(Stdlib_String[7], cst$3, ss);
    }
    var d = param[2], match = d[1];
    if(match){
     var name = match[1], _D_ = d[2], match$0 = d[3];
     if(_D_){
      var p = _D_[1];
      if(match$0)
       var
        s = match$0[1],
        _E_ = caml_call4(Stdlib_Printf[4], _j_, name, p, s);
      else
       var _E_ = caml_call3(Stdlib_Printf[4], _l_, name, p);
      var _F_ = _E_;
     }
     else if(match$0)
      var
       s$0 = match$0[1],
       _F_ = caml_call3(Stdlib_Printf[4], _m_, name, s$0);
     else
      var _F_ = caml_call2(Stdlib[28], cst$0, name);
     var text = _F_;
    }
    else{
     var match$1 = d[4];
     if(match$1)
      var s$1 = match$1[1], _G_ = caml_call2(Stdlib[28], cst$1, s$1);
     else
      var _G_ = cst$2;
     var text = _G_;
    }
    return caml_call2(Stdlib_Printf[4], _k_, text);
   }
   function token_to_string(param){
    if(typeof param === "number") return cst_EOF;
    var _y_ = param[1];
    if(4400567 <= _y_){
     if(748194550 <= _y_){
      if(990181650 <= _y_){
       var d = param[2];
       return signal_to_string([0, 990181650, d]);
      }
      var i = param[2];
      return char$0(i);
     }
     if(389604418 > _y_){
      var x = param[2];
      return signal_to_string([0, 4400567, x]);
     }
     var
      t = param[2],
      name = [0, cst$7, t[1]],
      _z_ = t[2],
      _A_ =
        function(param){
         var v = param[2], n = param[1];
         return [0, [0, cst$8, n], v];
        },
      attributes = caml_call1(caml_call1(Stdlib_List[20], _A_), _z_),
      s = signal_to_string([0, 856096383, [0, name, attributes]]);
     if(! t[3]) return s;
     var
      _B_ =
        caml_call3(Stdlib_String[16], s, 0, caml_ml_string_length(s) - 1 | 0);
     return caml_call2(Stdlib[28], _B_, cst$9);
    }
    if(17913 <= _y_){
     if(3455931 <= _y_){
      var t$0 = param[2];
      return caml_call2(Stdlib_Printf[4], _u_, t$0[1]);
     }
     var v = param[2];
     return signal_to_string([0, 17913, v]);
    }
    if(-656339779 <= _y_){
     var ss = param[2];
     return caml_call2(Stdlib_String[7], cst$10, ss);
    }
    var s$0 = param[2];
    return signal_to_string([0, -826170817, s$0]);
   }
   function whitespace_prefix_length(s){
    var index = 0;
    for(;;){
     if(index === caml_ml_string_length(s)) return index;
     var _x_ = caml_string_get(s, index);
     if(! caml_call2(Stdlib_String[15], whitespace_chars, _x_)) return index;
     var index$0 = index + 1 | 0, index = index$0;
    }
   }
   function whitespace_suffix_length(s){
    var rindex = 0;
    for(;;){
     if(rindex === caml_ml_string_length(s)) return rindex;
     var
      _w_ =
        caml_string_get(s, (caml_ml_string_length(s) - rindex | 0) - 1 | 0);
     if(! caml_call2(Stdlib_String[15], whitespace_chars, _w_)) return rindex;
     var rindex$0 = rindex + 1 | 0, rindex = rindex$0;
    }
   }
   function trim_string_left(s){
    var prefix_length = whitespace_prefix_length(s);
    return caml_call3
            (Stdlib_String[16],
             s,
             prefix_length,
             caml_ml_string_length(s) - prefix_length | 0);
   }
   function trim_string_right(s){
    var suffix_length = whitespace_suffix_length(s);
    return caml_call3
            (Stdlib_String[16],
             s,
             0,
             caml_ml_string_length(s) - suffix_length | 0);
   }
   function trim_string(s){return trim_string_right(trim_string_left(s));}
   function list_mem_string(s, l){
    function _v_(s$0){return runtime.caml_string_equal(s$0, s);}
    return caml_call2(Stdlib_List[34], _v_, l);
   }
   var
    Markup_Common =
      [0,
       compare_locations,
       xml_ns,
       xmlns_ns,
       xlink_ns,
       html_ns,
       svg_ns,
       mathml_ns,
       Token_tag,
       u_rep,
       add_utf_8,
       format_char,
       is_in_range,
       is_control_character,
       is_non_character,
       is_digit,
       is_hex_digit,
       is_scalar,
       is_uppercase,
       is_lowercase,
       is_alphabetic,
       is_alphanumeric,
       is_whitespace,
       is_whitespace_only,
       to_lowercase,
       is_printable,
       char$0,
       is_valid_html_char,
       is_valid_xml_char,
       signal_to_string,
       token_to_string,
       whitespace_chars,
       whitespace_prefix_length,
       whitespace_suffix_length,
       trim_string_left,
       trim_string_right,
       trim_string,
       list_mem_string];
   runtime.caml_register_global(43, Markup_Common, "Markup__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Error
//# unitInfo: Requires: Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_for_encoding = "' for encoding '",
    cst$0 = ": ",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " ",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    _c_ =
      [0,
       [11, "unmatched start tag '", [2, 0, [12, 39, 0]]],
       "unmatched start tag '%s'"],
    _d_ =
      [0,
       [11, "unknown namespace '", [2, 0, [12, 39, 0]]],
       "unknown namespace '%s'"],
    _e_ =
      [0,
       [11, "unexpected end of input in ", [2, 0, 0]],
       "unexpected end of input in %s"],
    _h_ = [0, [11, "0x", [4, 8, [0, 2, 2], 0, 0]], "0x%02X"],
    _i_ =
      [0,
       [11,
        "bad bytes '",
        [2, 0, [11, cst_for_encoding, [2, 0, [12, 39, 0]]]]],
       "bad bytes '%s' for encoding '%s'"],
    _g_ =
      [0,
       [11,
        "bad byte '0x",
        [4, 8, [0, 2, 2], 0, [11, cst_for_encoding, [2, 0, [12, 39, 0]]]]],
       "bad byte '0x%02X' for encoding '%s'"],
    _f_ =
      [0,
       [11, "bad bytes for encoding '", [2, 0, [12, 39, 0]]],
       "bad bytes for encoding '%s'"],
    _a_ =
      [0,
       [11, "misnested tag: '", [2, 0, [11, "' in '", [2, 0, [12, 39, 0]]]]],
       "misnested tag: '%s' in '%s'"],
    _j_ =
      [0,
       [11,
        "bad token '",
        [2, 0, [11, "' in ", [2, 0, [11, cst$0, [2, 0, 0]]]]]],
       "bad token '%s' in %s: %s"],
    _k_ =
      [0,
       [11, "unmatched end tag '", [2, 0, [12, 39, 0]]],
       "unmatched end tag '%s'"],
    _l_ =
      [0,
       [11, "bad content in '", [2, 0, [12, 39, 0]]],
       "bad content in '%s'"],
    _m_ = [0, [11, "bad document: ", [2, 0, 0]], "bad document: %s"],
    _b_ =
      [0,
       [11,
        "line ",
        [4, 3, 0, 0, [11, ", column ", [4, 3, 0, 0, [11, cst$0, [2, 0, 0]]]]]],
       "line %i, column %i: %s"];
   function explode_string(s){
    var index = 0, acc = 0;
    for(;;){
     if(caml_ml_string_length(s) <= index)
      return caml_call1(Stdlib_List[10], acc);
     var
      acc$0 = [0, caml_string_get(s, index), acc],
      index$0 = index + 1 | 0,
      index = index$0,
      acc = acc$0;
    }
   }
   function to_string(location, error){
    var fmt = Stdlib_Printf[4], _p_ = error[1];
    if(-395356332 <= _p_)
     if(-298452471 === _p_)
      var
       match = error[2],
       in$0 = match[2],
       s = match[1],
       message = caml_call3(fmt, _a_, s, in$0);
     else if(-6606783 <= _p_)
      if(551520201 <= _p_)
       var s$0 = error[2], message = caml_call2(fmt, _c_, s$0);
      else
       var s$1 = error[2], message = caml_call2(fmt, _d_, s$1);
     else if(-95440847 <= _p_)
      var in$1 = error[2], message = caml_call2(fmt, _e_, in$1);
     else{
      var
       match$1 = error[2],
       encoding = match$1[2],
       bytes = match$1[1],
       match$2 = caml_ml_string_length(bytes);
      if(0 === match$2)
       var _q_ = caml_call2(fmt, _f_, encoding);
      else if(1 === match$2)
       var _q_ = caml_call3(fmt, _g_, caml_string_get(bytes, 0), encoding);
      else
       var
        _r_ = explode_string(bytes),
        _s_ = function(_w_){return _w_;},
        _t_ = caml_call1(caml_call1(Stdlib_List[20], _s_), _r_),
        _u_ = caml_call1(fmt, _h_),
        _v_ = caml_call1(caml_call1(Stdlib_List[20], _u_), _t_),
        _q_ =
          caml_call3
           (fmt,
            _i_,
            caml_call1(caml_call1(Stdlib_String[7], cst), _v_),
            encoding);
      var message = _q_;
     }
    else if(-622351166 <= _p_)
     if(-590381665 <= _p_)
      var
       match$3 = error[2],
       reason = match$3[3],
       production = match$3[2],
       s$2 = match$3[1],
       message = caml_call4(fmt, _j_, s$2, production, reason);
     else
      var s$3 = error[2], message = caml_call2(fmt, _k_, s$3);
    else if(-821297825 <= _p_)
     var s$4 = error[2], message = caml_call2(fmt, _l_, s$4);
    else
     var reason$0 = error[2], message = caml_call2(fmt, _m_, reason$0);
    if(! location) return message;
    var match$0 = location[1], column = match$0[2], line = match$0[1];
    return caml_call4(fmt, _b_, line, column, message);
   }
   function ignore_errors(param, _o_, _n_, resume){return caml_call1(resume, 0);
   }
   function report_if(report, condition, location, detail, throw$0, k){
    return condition
            ? caml_call4(report, location, caml_call1(detail, 0), throw$0, k)
            : caml_call1(k, 0);
   }
   var
    Markup_Error = [0, explode_string, to_string, ignore_errors, report_if];
   runtime.caml_register_global(17, Markup_Error, "Markup__Error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Kstream
//# unitInfo: Requires: Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_stream_empty$1 = "stream empty";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    cst_stream_empty$0 = cst_stream_empty$1,
    cst_n_is_negative = "n is negative",
    cst_stream_empty = cst_stream_empty$1;
   function make(f){return [0, f];}
   function construct(c){
    var s = [0, 0];
    return [0,
            function(throw$0, e, k){
             var match = s[1];
             if(! match)
              return caml_call2
                      (c,
                       throw$0,
                       function(s$0){
                        s[1] = [0, s$0];
                        return caml_call3(s$0[1], throw$0, e, k);
                       });
             var s$0 = match[1];
             return caml_call3(s$0[1], throw$0, e, k);
            }];
   }
   function empty(param){
    return [0, function(param, e, _q_){return caml_call1(e, 0);}];
   }
   function next(param){
    var f = param[1];
    return function(throw$0, e, k){return caml_call3(f, throw$0, e, k);};
   }
   function next_option(param){
    var f = param[1];
    return function(throw$0, k){
     function _p_(v){return caml_call1(k, [0, v]);}
     return caml_call3
             (f, throw$0, function(param){return caml_call1(k, 0);}, _p_);};
   }
   function next_expected(param){
    var f = param[1];
    return function(throw$0, k){
     return caml_call3
             (f,
              throw$0,
              function(param){
               return caml_call1(throw$0, [0, Stdlib[7], cst_stream_empty]);
              },
              k);};
   }
   function next_n(n, s, throw$0, k){
    if(0 > n) return caml_call1(throw$0, [0, Stdlib[6], cst_n_is_negative]);
    function iterate(acc, n){
     if(0 === n) return caml_call1(k, caml_call1(Stdlib_List[10], acc));
     function _n_(v){return iterate([0, v, acc], n - 1 | 0);}
     function _o_(param){return iterate(acc, 0);}
     return next(s)(throw$0, _o_, _n_);
    }
    return iterate(0, n);
   }
   function push(s){
    var f = s[1];
    return function(v){
     s[1] = function(param, _m_, k){s[1] = f; return caml_call1(k, v);};
     return 0;};
   }
   function push_option(s, param){
    if(! param) return 0;
    var v = param[1];
    return push(s)(v);
   }
   function push_list(s){
    var f = s[1];
    return function(vs){
     if(! vs) return 0;
     var remainder = [0, vs];
     s[1] =
      function(throw$0, e, k){
       var match = remainder[1];
       if(match){
        var vs = match[2], v = match[1];
        remainder[1] = vs;
        return caml_call1(k, v);
       }
       s[1] = f;
       return caml_call3(f, throw$0, e, k);
      };
     return 0;};
   }
   function peek(s, throw$0, e, k){
    function _l_(v){push(s)(v); return caml_call1(k, v);}
    return next(s)(throw$0, e, _l_);
   }
   function peek_option(s, throw$0, k){
    function _k_(v){return caml_call1(k, [0, v]);}
    return peek(s, throw$0, function(param){return caml_call1(k, 0);}, _k_);
   }
   function peek_expected(s, throw$0, k){
    return peek
            (s,
             throw$0,
             function(param){
              return caml_call1(throw$0, [0, Stdlib[7], cst_stream_empty$0]);
             },
             k);
   }
   function peek_n(n, s, throw$0, k){
    return next_n
            (n,
             s,
             throw$0,
             function(vs){push_list(s)(vs); return caml_call1(k, vs);});
   }
   function tap(g, s){
    var f = s[1];
    s[1] =
     function(throw$0, e, k){
      return caml_call3
              (f,
               throw$0,
               e,
               function(v){caml_call1(g, v); return caml_call1(k, v);});
     };
    return function(param){s[1] = f; return 0;};
   }
   function checkpoint(s){
    var
     buffer = [0, 0],
     s$0 =
       [0,
        function(throw$0, e, k){
         function _j_(v){
          buffer[1] = [0, v, buffer[1]];
          return caml_call1(k, v);
         }
         return caml_call3(s[1], throw$0, e, _j_);
        }];
    function restore(param){
     var _i_ = caml_call1(Stdlib_List[10], buffer[1]);
     return push_list(s)(_i_);
    }
    return [0, s$0, restore];
   }
   function transform(f, init, s){
    var current_acc = [0, [0, init]], to_emit = [0, 0];
    function operate(throw$0, e, k){
     var match = to_emit[1];
     if(match){
      var more = match[2], v = match[1];
      to_emit[1] = more;
      return caml_call1(k, v);
     }
     var match$0 = current_acc[1];
     if(! match$0) return caml_call1(e, 0);
     var acc = match$0[1];
     function _h_(v){
      return caml_call4
              (f,
               acc,
               v,
               throw$0,
               function(param){
                var acc = param[2], vs = param[1];
                to_emit[1] = vs;
                current_acc[1] = acc;
                return operate(throw$0, e, k);
               });
     }
     return next(s)(throw$0, e, _h_);
    }
    return [0, operate];
   }
   function map(f, s){
    return [0,
            function(throw$0, e, k){
             function _g_(v){return caml_call3(f, v, throw$0, k);}
             return next(s)(throw$0, e, _g_);
            }];
   }
   function fold(f, v, s, throw$0, k){
    function _e_(v$0){
     return caml_call4
             (f,
              v,
              v$0,
              throw$0,
              function(v){return fold(f, v, s, throw$0, k);});
    }
    function _f_(param){return caml_call1(k, v);}
    return next(s)(throw$0, _f_, _e_);
   }
   function iter(f, s, throw$0, k){
    var _d_ = 0;
    return fold
            (function(param, v, throw$0, k){
              return caml_call3(f, v, throw$0, k);
             },
             _d_,
             s,
             throw$0,
             k);
   }
   function filter_map(f, s){
    function emit(throw$0, e, k){
     function _c_(v){
      return caml_call3
              (f,
               v,
               throw$0,
               function(param){
                if(! param) return emit(throw$0, e, k);
                var v = param[1];
                return caml_call1(k, v);
               });
     }
     return next(s)(throw$0, e, _c_);
    }
    return [0, emit];
   }
   function filter(f, s){
    return filter_map
            (function(v, throw$0, k){
              return caml_call3
                      (f,
                       v,
                       throw$0,
                       function(param){
                        return param ? caml_call1(k, [0, v]) : caml_call1(k, 0);
                       });
             },
             s);
   }
   function of_list(l){
    var l$0 = [0, l];
    return [0,
            function(param, e, k){
             var match = l$0[1];
             if(! match) return caml_call1(e, 0);
             var l = match[2], v = match[1];
             l$0[1] = l;
             return caml_call1(k, v);
            }];
   }
   function to_list(s, throw$0, k){
    function _a_(l){return caml_call1(k, caml_call1(Stdlib_List[10], l));}
    var _b_ = 0;
    return fold
            (function(l, v, param, k){return caml_call1(k, [0, v, l]);},
             _b_,
             s,
             throw$0,
             _a_);
   }
   function enumerate(s){
    var index = [0, 0];
    return map
            (function(v, param, k){
              index[1] = index[1] + 1 | 0;
              return caml_call1(k, [0, index[1] - 1 | 0, v]);
             },
             s);
   }
   var
    Markup_Kstream =
      [0,
       make,
       construct,
       empty,
       next,
       next_option,
       next_expected,
       next_n,
       push,
       push_option,
       push_list,
       peek,
       peek_option,
       peek_expected,
       peek_n,
       tap,
       checkpoint,
       transform,
       map,
       fold,
       iter,
       filter_map,
       filter,
       of_list,
       to_list,
       enumerate];
   runtime.caml_register_global(5, Markup_Kstream, "Markup__Kstream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Namespace
//# unitInfo: Requires: Markup__Common, Stdlib, Stdlib__List, Stdlib__Map, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst_xml$0 = "xml",
    cst_xmlns$2 = "xmlns",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$9,
    cst$8 = cst$9,
    cst$6 = ":",
    cst$5 = cst$9,
    cst$2 = cst$9,
    cst$3 = cst$9,
    cst$4 = cst$9,
    cst$1 = cst$9,
    cst$0 = cst$9,
    cst = cst$9,
    Markup_Common = global_data.Markup__Common,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Map = global_data.Stdlib__Map,
    cst_xmlns$1 = cst_xmlns$2,
    _a_ = [0, cst$9, 0],
    _b_ = [0, cst_xml$0, 0],
    _c_ = [0, cst_xmlns$2, 0],
    cst_xml = cst_xml$0,
    cst_xmlns$0 = cst_xmlns$2,
    cst_xmlns = cst_xmlns$2;
   function list_map_cps(f, l, throw$0, k){
    function loop(accumulator, param){
     if(! param)
      return caml_call1(k, caml_call1(Stdlib_List[10], accumulator));
     var l = param[2], x = param[1];
     return caml_call3
             (f,
              x,
              throw$0,
              function(x){return loop([0, x, accumulator], l);});
    }
    return loop(0, l);
   }
   function parse(qualified_name){
    try{
     var colon_index = caml_call2(Stdlib_String[36], qualified_name, 58);
     if(0 === colon_index) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      prefix = caml_call3(Stdlib_String[16], qualified_name, 0, colon_index),
      suffix =
        caml_call3
         (Stdlib_String[16],
          qualified_name,
          colon_index + 1 | 0,
          (runtime.caml_ml_string_length(qualified_name) - colon_index | 0)
          - 1
          | 0),
      _N_ = [0, prefix, suffix];
     return _N_;
    }
    catch(_O_){
     var _M_ = caml_wrap_exception(_O_);
     if(_M_ === Stdlib[8]) return [0, cst, qualified_name];
     throw caml_maybe_attach_backtrace(_M_, 0);
    }
   }
   function init(top_level){
    function f(s){
     return caml_string_notequal(s, cst_xml$0)
             ? caml_string_notequal
                (s, cst_xmlns$2)
               ? caml_call1(top_level, s)
               : [0, Markup_Common[3]]
             : [0, Markup_Common[2]];
    }
    var entry = [];
    caml_update_dummy(entry, [0, f, entry]);
    return [0, entry];
   }
   function expand_element(report, context, raw_element_name, throw$0, k){
    var
     match = parse(raw_element_name),
     name = match[2],
     ns = match[1],
     match$0 = caml_call1(context[1][1], ns);
    if(! match$0)
     return caml_string_notequal(ns, cst$9)
             ? caml_call4
               (report,
                0,
                [0, -6606783, ns],
                throw$0,
                function(param){return caml_call1(k, [0, ns, name]);})
             : caml_call1(k, [0, cst$0, name]);
    var uri = match$0[1];
    return caml_call1(k, [0, uri, name]);
   }
   function push
   (report, context, raw_element_name, raw_attributes, throw$0, k){
    function _F_(param){
     var value = param[2], name = param[1];
     return [0, parse(name), value];
    }
    var
     parsed_attributes =
       caml_call1(caml_call1(Stdlib_List[20], _F_), raw_attributes),
     _G_ = context[1][1];
    function _H_(f, param){
     var _K_ = param[1], _L_ = _K_[1];
     if(caml_string_notequal(_L_, cst$9)){
      if(! caml_string_notequal(_L_, cst_xmlns$2)){
       var uri = param[2], prefix = _K_[2];
       return function(p){
        return caml_string_equal(p, prefix) ? [0, uri] : caml_call1(f, p);};
      }
     }
     else if(! caml_string_notequal(_K_[2], cst_xmlns$2)){
      var uri$0 = param[2];
      return function(p){
       return caml_string_equal(p, cst$9) ? [0, uri$0] : caml_call1(f, p);};
     }
     return f;
    }
    var
     f = caml_call1(caml_call2(Stdlib_List[26], _H_, _G_), parsed_attributes),
     entry = [0, f, context[1]];
    context[1] = entry;
    return expand_element
            (report,
             context,
             raw_element_name,
             throw$0,
             function(expanded_element_name){
              function _I_(expanded_attributes){
               return caml_call1
                       (k, [0, expanded_element_name, expanded_attributes]);
              }
              return list_map_cps
                      (function(param, _J_, k){
                        var value = param[2], name = param[1], ns = name[1];
                        if(! caml_string_notequal(ns, cst$9)){
                         var name$1 = name[2];
                         return caml_string_notequal(name$1, cst_xmlns$2)
                                 ? caml_call1(k, [0, [0, cst$1, name$1], value])
                                 : caml_call1
                                   (k, [0, [0, Markup_Common[3], cst_xmlns], value]);
                        }
                        var name$0 = name[2], match = caml_call1(f, ns);
                        if(! match)
                         return caml_call4
                                 (report,
                                  0,
                                  [0, -6606783, ns],
                                  throw$0,
                                  function(param){
                                   return caml_call1(k, [0, [0, ns, name$0], value]);
                                  });
                        var uri = match[1];
                        return caml_call1(k, [0, [0, uri, name$0], value]);
                       },
                       parsed_attributes,
                       throw$0,
                       _I_);
             });
   }
   function pop(context){
    var previous = context[1][2];
    context[1] = previous;
    return 0;
   }
   var StringMap = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]);
   function init$0(top_level){
    var
     _z_ = StringMap[1],
     _A_ = caml_call1(caml_call2(StringMap[2], cst$2, _a_), _z_),
     _B_ = caml_call1(caml_call2(StringMap[2], Markup_Common[2], _b_), _A_),
     namespace_to_prefix =
       caml_call1(caml_call2(StringMap[2], Markup_Common[3], _c_), _B_),
     _C_ = StringMap[1],
     _D_ = caml_call1(caml_call2(StringMap[2], cst$4, cst$3), _C_),
     _E_ =
       caml_call1(caml_call2(StringMap[2], cst_xml, Markup_Common[2]), _D_),
     prefix_to_namespace =
       caml_call1
        (caml_call2(StringMap[2], cst_xmlns$0, Markup_Common[3]), _E_),
     entry = [];
    caml_update_dummy
     (entry, [0, namespace_to_prefix, prefix_to_namespace, entry]);
    return [0, [0, entry], top_level];
   }
   function lookup(report, allow_default, context, namespace, throw$0, k){
    try{
     var
      _t_ = caml_call2(StringMap[17], namespace, context[1][1][1]),
      candidate_prefixes = _t_;
    }
    catch(_y_){
     var _n_ = caml_wrap_exception(_y_);
     if(_n_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_n_, 0);
     var candidate_prefixes = 0;
    }
    try{
     var
      _r_ =
        function(prefix){
         var
          allow_default$0 =
            allow_default || caml_string_notequal(prefix, cst$9);
         if(! allow_default$0) return allow_default$0;
         try{
          var
           _w_ =
             caml_string_equal
              (caml_call2(StringMap[17], prefix, context[1][1][2]), namespace);
          return _w_;
         }
         catch(_x_){
          var _v_ = caml_wrap_exception(_x_);
          if(_v_ === Stdlib[8]) return 0;
          throw caml_maybe_attach_backtrace(_v_, 0);
         }
        },
      _s_ =
        [0, caml_call1(caml_call1(Stdlib_List[39], _r_), candidate_prefixes)],
      prefix = _s_;
    }
    catch(_u_){
     var _o_ = caml_wrap_exception(_u_);
     if(_o_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_o_, 0);
     var prefix = 0;
    }
    if(prefix)
     var prefix$0 = prefix;
    else{
     var match = caml_call1(context[2], namespace);
     if(match){
      var prefix$2 = match[1];
      a:
      {
       b:
       {
        if(! allow_default && caml_string_equal(prefix$2, cst$9)) break b;
        if(! caml_call2(StringMap[32], prefix$2, context[1][1][2])){var _p_ = [0, prefix$2]; break a;}
       }
       var _p_ = 0;
      }
      var _q_ = _p_;
     }
     else
      var _q_ = 0;
     var prefix$0 = _q_;
    }
    if(! prefix$0)
     return caml_call4
             (report,
              0,
              [0, -6606783, namespace],
              throw$0,
              function(param){return caml_call1(k, cst$5);});
    var prefix$1 = prefix$0[1];
    return caml_call1(k, prefix$1);
   }
   function format(prefix, name){
    if(! caml_string_notequal(prefix, cst$9)) return name;
    var _m_ = caml_call2(Stdlib[28], cst$6, name);
    return caml_call2(Stdlib[28], prefix, _m_);
   }
   function extend(k, v, map){
    try{var _k_ = caml_call2(StringMap[17], k, map), vs = _k_;}
    catch(_l_){
     var _j_ = caml_wrap_exception(_l_);
     if(_j_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_j_, 0);
     var vs = 0;
    }
    return caml_call3(StringMap[2], k, [0, v, vs], map);
   }
   function push$0(report, context, element_name, attributes, throw$0, k){
    var _d_ = [0, context[1][1][1], context[1][1][2]];
    function _e_(param, _g_){
     var
      prefix_to_ns = param[2],
      ns_to_prefix = param[1],
      match = _g_[1],
      ns = match[1];
     if(! caml_string_notequal(match[2], cst_xmlns$2)){
      var uri$0 = _g_[2];
      if(caml_string_equal(ns, Markup_Common[3])){
       var _i_ = caml_call3(StringMap[2], cst$7, uri$0, prefix_to_ns);
       return [0, extend(uri$0, cst$8, ns_to_prefix), _i_];
      }
     }
     var uri = _g_[2], prefix = match[2];
     if(! caml_string_equal(ns, Markup_Common[3]))
      return [0, ns_to_prefix, prefix_to_ns];
     var _h_ = caml_call3(StringMap[2], prefix, uri, prefix_to_ns);
     return [0, extend(uri, prefix, ns_to_prefix), _h_];
    }
    var
     match = caml_call1(caml_call2(Stdlib_List[26], _e_, _d_), attributes),
     prefix_to_namespace = match[2],
     namespace_to_prefix = match[1],
     entry = [0, namespace_to_prefix, prefix_to_namespace, context[1][1]];
    context[1][1] = entry;
    var name = element_name[2], namespace = element_name[1];
    return lookup
            (report,
             1,
             context,
             namespace,
             throw$0,
             function(prefix){
              var element_name = format(prefix, name);
              function _f_(attributes){
               return caml_call1(k, [0, element_name, attributes]);
              }
              return list_map_cps
                      (function(param, throw$0, k){
                        var
                         value = param[2],
                         match = param[1],
                         name = match[2],
                         namespace = match[1];
                        if(! caml_string_notequal(namespace, cst$9))
                         return caml_call1(k, [0, name, value]);
                        if
                         (caml_string_equal(namespace, Markup_Common[3])
                          && caml_string_equal(name, cst_xmlns$2))
                         return caml_call1(k, [0, cst_xmlns$1, value]);
                        return lookup
                                (report,
                                 0,
                                 context,
                                 namespace,
                                 throw$0,
                                 function(prefix){
                                  return caml_call1(k, [0, format(prefix, name), value]);
                                 });
                       },
                       attributes,
                       throw$0,
                       _f_);
             });
   }
   function pop$0(context){
    var previous = context[1][1][3];
    context[1][1] = previous;
    return 0;
   }
   var
    Markup_Namespace =
      [0,
       [0, init, push, pop, expand_element, parse],
       [0, init$0, push$0, pop$0]];
   runtime.caml_register_global(37, Markup_Namespace, "Markup__Namespace");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Xml_writer
//# unitInfo: Requires: Markup__Kstream, Markup__Namespace, Stdlib__Buffer, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$12 = " ",
    cst$10 = ">",
    cst$11 = "?>",
    cst_standalone = "standalone",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = "/>",
    cst$5 = cst$10,
    cst$4 = "<",
    cst$2 = "<\/",
    cst$6 = cst$11,
    cst$7 = cst$12,
    cst$8 = "<?",
    cst$9 = "<!--",
    cst = '"',
    cst$0 = '="',
    cst$1 = cst$12,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Namespace = global_data.Markup__Namespace,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    _a_ = [0, cst$10, 0],
    _b_ = [0, cst$10, 0],
    cst_DOCTYPE = "<!DOCTYPE ",
    _c_ = [0, [0, cst_standalone, "yes"], 0],
    _d_ = [0, [0, cst_standalone, "no"], 0],
    cst_encoding = "encoding",
    cst_version = "version",
    cst_xml = "<?xml",
    _e_ = [0, cst$11, 0],
    _f_ = [0, "-->", 0],
    cst_lt = "&lt;",
    cst_gt = "&gt;",
    cst_quot = "&quot;",
    cst_amp = "&amp;",
    cst_apos = "&apos;";
   function escape(s){
    var buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s));
    function _y_(c){
     if(40 <= c){
      var switcher = c - 60 | 0;
      if(2 >= switcher >>> 0)
       switch(switcher){
         case 0:
          return caml_call2(Stdlib_Buffer[16], buffer, cst_lt);
         case 1: break;
         default: return caml_call2(Stdlib_Buffer[16], buffer, cst_gt);
       }
     }
     else if(34 <= c)
      switch(c - 34 | 0){
        case 0:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_quot);
        case 4:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_amp);
        case 5:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_apos);
      }
     return caml_call2(Stdlib_Buffer[12], buffer, c);
    }
    caml_call2(Stdlib_String[30], _y_, s);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   function attribute_strings(end, attributes){
    var
     words$1 = [0, end, 0],
     words = words$1,
     param = caml_call1(Stdlib_List[10], attributes);
    for(;;){
     if(! param) return words;
     var
      more = param[2],
      match = param[1],
      value = match[2],
      name = match[1],
      words$0 =
        [0, cst$1, [0, name, [0, cst$0, [0, escape(value), [0, cst, words]]]]],
      words = words$0,
      param = more;
    }
   }
   function write(report, prefix, signals){
    var
     signals$0 = caml_call1(Markup_Kstream[25], signals),
     open_elements = [0, 0],
     namespaces = caml_call1(Markup_Namespace[2][1], prefix),
     queue = [],
     emit_list =
       function _x_(_t_, _u_, _v_, _w_){return _x_.fun(_t_, _u_, _v_, _w_);},
     next_signal = function _s_(_p_, _q_, _r_){return _s_.fun(_p_, _q_, _r_);};
    caml_update_dummy(queue, [0, next_signal]);
    caml_update_dummy
     (emit_list,
      function(l, throw$0, e, k){
       if(! l) return caml_call3(next_signal, throw$0, e, k);
       var more = l[2], s = l[1];
       queue[1] = caml_call1(emit_list, more);
       return caml_call1(k, s);
      });
    caml_update_dummy
     (next_signal,
      function(throw$0, e, k){
       function _h_(param){
        var signal = param[2], i = param[1];
        if(typeof signal === "number"){
         caml_call1(Markup_Namespace[2][3], namespaces);
         var match = open_elements[1];
         if(! match) return caml_call3(next_signal, throw$0, e, k);
         var rest = match[2], name = match[1];
         open_elements[1] = rest;
         return caml_call4
                 (emit_list, [0, cst$2, [0, name, _a_]], throw$0, e, k);
        }
        var _i_ = signal[1];
        if(4400567 > _i_){
         if(17913 <= _i_){
          var match$2 = signal[2], s = match$2[2], target = match$2[1];
          return caml_call4
                  (emit_list,
                   [0, cst$8, [0, target, [0, cst$7, [0, s, _e_]]]],
                   throw$0,
                   e,
                   k);
         }
         var s$0 = signal[2];
         return caml_call4
                 (emit_list, [0, cst$9, [0, s$0, _f_]], throw$0, e, k);
        }
        if(936573133 <= _i_){
         if(990181650 > _i_){
          var
           ss = signal[2],
           _j_ = function(s){return 0 === caml_ml_string_length(s) ? 1 : 0;};
          return caml_call2(Stdlib_List[33], _j_, ss)
                  ? caml_call3(next_signal, throw$0, e, k)
                  : caml_call4
                    (emit_list,
                     caml_call2(Stdlib_List[20], escape, ss),
                     throw$0,
                     e,
                     k);
         }
         var raw_text = signal[2][4];
         if(! raw_text) return caml_call3(next_signal, throw$0, e, k);
         var text = raw_text[1];
         return caml_call4
                 (emit_list, [0, cst_DOCTYPE, [0, text, _b_]], throw$0, e, k);
        }
        if(856096383 <= _i_){
         var
          match$0 = signal[2],
          attributes = match$0[2],
          name$0 = match$0[1],
          k$0 =
            function(self_closing){
             function _n_(param){
              var formatted_attributes = param[2], formatted_name = param[1];
              open_elements[1] = [0, formatted_name, open_elements[1]];
              if(self_closing){
               caml_call1(Markup_Namespace[2][3], namespaces);
               var match = open_elements[1];
               if(match)
                var rest = match[2], rest$0 = rest;
               else
                var rest$0 = 0;
               open_elements[1] = rest$0;
              }
              var
               end = self_closing ? cst$3 : cst$5,
               tag =
                 [0,
                  cst$4,
                  [0,
                   formatted_name,
                   attribute_strings(end, formatted_attributes)]];
              return caml_call4(emit_list, tag, throw$0, e, k);
             }
             function _o_(param){return caml_call1(report, [0, signal, i]);}
             return caml_call6
                     (Markup_Namespace[2][2],
                      _o_,
                      namespaces,
                      name$0,
                      attributes,
                      throw$0,
                      _n_);
            },
          _k_ =
            function(s){
             return typeof s[2] === "number"
                     ? k$0(1)
                     : (caml_call2(Markup_Kstream[8], signals$0, s), k$0(0));
            },
          _l_ = function(param){return k$0(0);};
         return caml_call4(Markup_Kstream[4], signals$0, throw$0, _l_, _k_);
        }
        var
         match$1 = signal[2],
         standalone = match$1[3],
         encoding = match$1[2],
         version = match$1[1];
        if(standalone)
         var _m_ = standalone[1] ? _c_ : _d_, attributes$0 = _m_;
        else
         var attributes$0 = 0;
        if(encoding)
         var
          encoding$0 = encoding[1],
          attributes$1 = [0, [0, cst_encoding, encoding$0], attributes$0];
        else
         var attributes$1 = attributes$0;
        var
         attributes$2 = [0, [0, cst_version, version], attributes$1],
         declaration = [0, cst_xml, attribute_strings(cst$6, attributes$2)];
        return caml_call4(emit_list, declaration, throw$0, e, k);
       }
       return caml_call4(Markup_Kstream[4], signals$0, throw$0, e, _h_);
      });
    function _g_(throw$0, e, k){return caml_call3(queue[1], throw$0, e, k);}
    return caml_call1(Markup_Kstream[1], _g_);
   }
   var Markup_Xml_writer = [0, write];
   runtime.caml_register_global(31, Markup_Xml_writer, "Markup__Xml_writer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Text
//# unitInfo: Requires: Markup__Common, Stdlib__Buffer, Stdlib__List, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Markup_Common = global_data.Markup__Common,
    Stdlib_Sys = global_data.Stdlib__Sys,
    length_limit = [0, Stdlib_Sys[12] / 2 | 0];
   function prepare(param){
    return [0, 0, caml_call1(Stdlib_Buffer[1], 256), 0];
   }
   function note_location(text, location){
    return text[3] ? 0 : (text[3] = [0, location], 0);
   }
   function adding(text, location){
    note_location(text, location);
    var
     _c_ = length_limit[1],
     _d_ = _c_ <= caml_call1(Stdlib_Buffer[7], text[2]) ? 1 : 0;
    if(! _d_) return _d_;
    var _e_ = text[1];
    text[1] = [0, caml_call1(Stdlib_Buffer[2], text[2]), _e_];
    return caml_call1(Stdlib_Buffer[8], text[2]);
   }
   function add(text, location, c){
    adding(text, location);
    return caml_call2(Markup_Common[10], text[2], c);
   }
   function add_string(text, location, s){
    adding(text, location);
    return caml_call2(Stdlib_Buffer[16], text[2], s);
   }
   function emit(text){
    var match = text[3];
    if(! match) return 0;
    var location = match[1];
    text[3] = 0;
    if(0 === caml_call1(Stdlib_Buffer[7], text[2])) return 0;
    var
     _a_ = text[1],
     _b_ = [0, caml_call1(Stdlib_Buffer[2], text[2]), _a_],
     strings = caml_call1(Stdlib_List[10], _b_);
    text[1] = 0;
    caml_call1(Stdlib_Buffer[8], text[2]);
    return [0, [0, location, strings]];
   }
   var
    Markup_Text =
      [0, length_limit, prepare, note_location, adding, add, add_string, emit];
   runtime.caml_register_global(4, Markup_Text, "Markup__Text");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Xml_tokenizer
//# unitInfo: Requires: Markup__Common, Markup__Error, Markup__Kstream, Markup__Text, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = "&",
    cst$7 = "&#",
    cst$4 = "<",
    cst_attribute$5 = "attribute",
    cst_cdata = "cdata",
    cst_comment$0 = "comment",
    cst_doctype = "doctype",
    cst_encoding$0 = "encoding",
    cst_expected_digit$1 = "expected digit",
    cst_invalid_name_character$4 = "invalid name character",
    cst_invalid_start_character$4 = "invalid start character",
    cst_no = "no",
    cst_reference$6 = "reference",
    cst_replace_with_amp$0 = "replace with '&amp;'",
    cst_replace_with_lt = "replace with '&lt;'",
    cst_standalone$0 = "standalone",
    cst_tag$5 = "tag",
    cst_text$0 = "text",
    cst_version$0 = "version",
    cst_xml$0 = "xml",
    cst_yes = "yes",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = "<!-",
    cst$2 = "<!",
    cst$1 = "<?...",
    pi = "processing instruction",
    xml = "xml declaration",
    cst = cst$6,
    cst$0 = cst$6,
    Markup_Common = global_data.Markup__Common,
    Markup_Kstream = global_data.Markup__Kstream,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Markup_Text = global_data.Markup__Text,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Markup_Error = global_data.Markup__Error,
    _I_ = [0, cst_doctype],
    _H_ =
      [0,
       -590381665,
       [0, "<!D", cst_doctype, "should start with '<!DOCTYPE '"]],
    _G_ = [0, cst_cdata],
    _F_ = [0, cst_cdata],
    _E_ = [0, cst_cdata],
    _D_ =
      [0, -590381665, [0, "<![", cst_cdata, "should start with '<![CDATA['"]],
    _C_ =
      [0, -590381665, [0, "--", cst_comment$0, "should be followed by '>'"]],
    _B_ = [0, cst_comment$0],
    cst_should_start_with = "should start with '<!--'",
    cst_comment = cst_comment$0,
    _A_ = [0, cst_tag$5],
    cst_attribute_in_end_tag = "attribute in end tag",
    cst_tag$4 = cst_tag$5,
    _z_ = [0, -95440847, cst_tag$5],
    cst_invalid_name_character$3 = cst_invalid_name_character$4,
    cst_tag$3 = cst_tag$5,
    _y_ = [0, -95440847, cst_tag$5],
    cst_invalid_start_character$3 = cst_invalid_start_character$4,
    cst_tag$2 = cst_tag$5,
    _x_ = [0, cst_tag$5],
    cst_should_be_part_of = "should be part of '/>'",
    cst_tag$1 = cst_tag$5,
    _w_ = [0, cst_tag$5],
    _v_ = [0, 62, [0, 47, 0]],
    _u_ = [0, -95440847, cst_tag$5],
    cst_invalid_name_character$2 = cst_invalid_name_character$4,
    cst_tag$0 = cst_tag$5,
    _t_ = [0, -95440847, cst_tag$5],
    cst_invalid_start_character$2 = cst_invalid_start_character$4,
    cst_tag = cst_tag$5,
    _s_ = [0, -590381665, [0, "]]>", cst_text$0, "must end a CDATA section"]],
    cst_replace_with_amp = cst_replace_with_amp$0,
    cst_text = cst_text$0,
    _r_ = [0, -590381665, [0, cst$4, cst_text$0, cst_replace_with_lt]],
    cst_invalid_start_character$1 = cst_invalid_start_character$4,
    cst_invalid_name_character$1 = cst_invalid_name_character$4,
    _m_ = [0, 63, 0],
    cst_empty = "empty",
    cst_must_be_xml = "must be 'xml'",
    cst_1_0 = "1.0",
    cst_must_be_version = "must be 'version'",
    cst_must_be_first = "must be first",
    cst_must_match_1_x = "must match 1.x",
    cst_version = cst_version$0,
    cst_missing_version = "missing version",
    cst_xml = "<?xml...",
    cst_must_be_encoding = "must be 'encoding'",
    cst_encoding = cst_encoding$0,
    cst_must_be_standalone = "must be 'standalone'",
    cst_must_come_after_encoding = "must come after 'encoding'",
    _n_ = [0, 1],
    _o_ = [0, 0],
    _p_ = [0, 1],
    _q_ = [0, 0],
    cst_must_be_yes_or_no = "must be 'yes' or 'no'",
    cst_standalone = cst_standalone$0,
    cst_not_allowed_here = "not allowed here",
    cst_invalid_start_character$0 = cst_invalid_start_character$4,
    cst_attribute$0 = cst_attribute$5,
    cst_invalid_name_character$0 = cst_invalid_name_character$4,
    cst_attribute$2 = cst_attribute$5,
    cst_attribute$1 = cst_attribute$5,
    cst_attribute$3 = cst_attribute$5,
    cst_unquoted_value = "unquoted value",
    cst_attribute$4 = cst_attribute$5,
    _k_ = [0, -590381665, [0, cst$5, cst_attribute$5, cst_replace_with_amp$0]],
    _l_ = [0, -590381665, [0, cst$4, cst_attribute$5, cst_replace_with_lt]],
    _j_ = [0, -95440847, "attribute value"],
    cst_has_no_value = "has no value",
    cst_attribute = cst_attribute$5,
    cst_whitespace_not_allowed_her = "whitespace not allowed here",
    cst_expected_digit$0 = cst_expected_digit$1,
    cst_reference$2 = cst_reference$6,
    cst_x = "x",
    cst_0x = "0x",
    cst_invalid_name_character = cst_invalid_name_character$4,
    cst_reference$4 = cst_reference$6,
    cst_unknown_entity = "unknown entity",
    cst_reference$3 = cst_reference$6,
    cst_invalid_start_character = cst_invalid_start_character$4,
    cst_reference$5 = cst_reference$6,
    _i_ = [0, -590381665, [0, "&;", cst_reference$6, "empty reference"]],
    cst_expected_digit = cst_expected_digit$1,
    cst_reference$1 = cst_reference$6,
    cst_empty_character_reference = "empty character reference",
    cst_reference = cst_reference$6,
    _g_ = [0, [11, cst$7, [2, 0, [12, 59, 0]]], "&#%s;"],
    cst_number_out_of_range = "number out of range",
    cst_reference$0 = cst_reference$6,
    _h_ = [0, [11, cst$7, [2, 0, [2, 0, [12, 59, 0]]]], "&#%s%s;"],
    _f_ = [0, -95440847, cst_reference$6],
    _a_ = [0, '"'],
    _b_ = [0, cst$4],
    _c_ = [0, ">"],
    _d_ = [0, "'"],
    _e_ = [0, cst$5];
   function is_name_start_char(c){
    var _er_ = caml_call3(Markup_Common[12], 65, 90, c);
    if(_er_)
     var _es_ = _er_;
    else{
     var _et_ = caml_call3(Markup_Common[12], 97, 122, c);
     if(_et_)
      var _es_ = _et_;
     else{
      var _eu_ = 58 === c ? 1 : 0;
      if(_eu_)
       var _es_ = _eu_;
      else{
       var _ev_ = 95 === c ? 1 : 0;
       if(_ev_)
        var _es_ = _ev_;
       else{
        var _ew_ = caml_call3(Markup_Common[12], 192, 214, c);
        if(_ew_)
         var _es_ = _ew_;
        else{
         var _ex_ = caml_call3(Markup_Common[12], 216, 246, c);
         if(_ex_)
          var _es_ = _ex_;
         else{
          var _ey_ = caml_call3(Markup_Common[12], 248, 767, c);
          if(_ey_)
           var _es_ = _ey_;
          else{
           var _ez_ = caml_call3(Markup_Common[12], 880, 893, c);
           if(_ez_)
            var _es_ = _ez_;
           else{
            var _eA_ = caml_call3(Markup_Common[12], 895, 8191, c);
            if(_eA_)
             var _es_ = _eA_;
            else{
             var _eB_ = caml_call3(Markup_Common[12], 8204, 8205, c);
             if(_eB_)
              var _es_ = _eB_;
             else{
              var _eC_ = caml_call3(Markup_Common[12], 8304, 8591, c);
              if(_eC_)
               var _es_ = _eC_;
              else{
               var _eD_ = caml_call3(Markup_Common[12], 11264, 12271, c);
               if(_eD_)
                var _es_ = _eD_;
               else{
                var _eE_ = caml_call3(Markup_Common[12], 12289, 55279, c);
                if(_eE_)
                 var _es_ = _eE_;
                else{
                 var _eF_ = caml_call3(Markup_Common[12], 63744, 64975, c);
                 if(_eF_)
                  var _es_ = _eF_;
                 else{
                  var _eG_ = caml_call3(Markup_Common[12], 65008, 65533, c);
                  if(! _eG_)
                   return caml_call3(Markup_Common[12], 65536, 983039, c);
                  var _es_ = _eG_;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    return _es_;
   }
   function is_name_char(c){
    var _ek_ = is_name_start_char(c);
    if(_ek_)
     var _el_ = _ek_;
    else{
     var _em_ = caml_call3(Markup_Common[12], 48, 57, c);
     if(_em_)
      var _el_ = _em_;
     else{
      var _en_ = 45 === c ? 1 : 0;
      if(_en_)
       var _el_ = _en_;
      else{
       var _eo_ = 46 === c ? 1 : 0;
       if(_eo_)
        var _el_ = _eo_;
       else{
        var _ep_ = 183 === c ? 1 : 0;
        if(_ep_)
         var _el_ = _ep_;
        else{
         var _eq_ = caml_call3(Markup_Common[12], 768, 879, c);
         if(! _eq_) return caml_call3(Markup_Common[12], 8255, 8256, c);
         var _el_ = _eq_;
        }
       }
      }
     }
    }
    return _el_;
   }
   function tokenize(report, resolve_reference, param){
    var
     get_location = param[2],
     input = param[1],
     report_if = caml_call1(Markup_Error[4], report),
     throw$0 = [0, function(param){return 0;}],
     ended = [0, function(param){return 0;}],
     output = [0, function(param){return 0;}];
    function parse_reference(l, k){
     var
      match = caml_call1(Markup_Kstream[16], input),
      restore = match[2],
      input$0 = match[1];
     function unresolved(param){
      caml_call1(restore, 0);
      return caml_call1(k, 0);
     }
     function k$0(s){return caml_call1(k, [0, s]);}
     function unexpected_eoi(param){
      function _ei_(param){return unresolved(0);}
      var _ej_ = throw$0[1];
      return caml_call4(report, caml_call1(get_location, 0), _f_, _ej_, _ei_);
     }
     function character_reference(filter, notation_prefix, reference_prefix){
      var buffer = caml_call1(Stdlib_Buffer[1], 32);
      function read(param){
       function _eb_(param){
        var l$0 = param[1], c = param[2];
        if(59 === c){
         if(0 === caml_call1(Stdlib_Buffer[7], buffer)){
          var _ec_ = throw$0[1];
          return caml_call4
                  (report,
                   l,
                   [0,
                    -590381665,
                    [0,
                     caml_call2(Stdlib_Printf[4], _g_, reference_prefix),
                     cst_reference,
                     cst_empty_character_reference]],
                   _ec_,
                   unresolved);
         }
         var s = caml_call1(Stdlib_Buffer[2], buffer);
         try{
          var
           _ef_ =
             [0,
              runtime.caml_int_of_string
               (caml_call2(Stdlib[28], notation_prefix, s))],
           maybe_n = _ef_;
         }
         catch(_eh_){
          var _ed_ = caml_wrap_exception(_eh_);
          if(_ed_[1] !== Stdlib[7])
           throw caml_maybe_attach_backtrace(_ed_, 0);
          var maybe_n = 0;
         }
         if(maybe_n){
          var n = maybe_n[1], utf_8_encoded = caml_call1(Stdlib_Buffer[1], 8);
          caml_call2(Markup_Common[10], utf_8_encoded, n);
          return k$0(caml_call1(Stdlib_Buffer[2], utf_8_encoded));
         }
         var _ee_ = throw$0[1];
         return caml_call4
                 (report,
                  l,
                  [0,
                   -590381665,
                   [0,
                    caml_call3(Stdlib_Printf[4], _h_, reference_prefix, s),
                    cst_reference$0,
                    cst_number_out_of_range]],
                  _ee_,
                  unresolved);
        }
        if(caml_call1(filter, c)){
         caml_call2(Markup_Common[10], buffer, c);
         return read(0);
        }
        var c$0 = param[2], _eg_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_reference$1,
                   cst_expected_digit]],
                 _eg_,
                 unresolved);
       }
       return caml_call4
               (Markup_Kstream[4], input$0, throw$0[1], unexpected_eoi, _eb_);
      }
      return read(0);
     }
     function _d7_(param){
      var l$0 = param[1], c = param[2];
      if(35 === c){
       var
        _d8_ =
          function(v){
           var l = v[1], c = v[2];
           if(120 === c)
            return character_reference(Markup_Common[16], cst_0x, cst_x);
           if(! caml_call1(Markup_Common[15], c) && 59 !== c){
            var c$0 = v[2], _ea_ = throw$0[1];
            return caml_call4
                    (report,
                     l,
                     [0,
                      -590381665,
                      [0,
                       caml_call1(Markup_Common[26], c$0),
                       cst_reference$2,
                       cst_expected_digit$0]],
                     _ea_,
                     unresolved);
           }
           caml_call2(Markup_Kstream[8], input$0, v);
           return character_reference(Markup_Common[15], cst$0, cst);
          };
       return caml_call4
               (Markup_Kstream[4], input$0, throw$0[1], unexpected_eoi, _d8_);
      }
      if(59 === c) return caml_call4(report, l, _i_, throw$0[1], unresolved);
      if(is_name_start_char(c)){
       var buffer = caml_call1(Stdlib_Buffer[1], 32);
       caml_call2(Markup_Common[10], buffer, c);
       var
        read =
          function(param){
           function _d__(param){
            var l$0 = param[1], c = param[2];
            if(59 === c){
             var
              s = caml_call1(Stdlib_Buffer[2], buffer),
              v =
                caml_string_notequal(s, "amp")
                 ? caml_string_notequal
                    (s, "apos")
                   ? caml_string_notequal
                      (s, "gt")
                     ? caml_string_notequal
                        (s, "lt")
                       ? caml_string_notequal(s, "quot") ? 0 : _a_
                       : _b_
                     : _c_
                   : _d_
                 : _e_,
              match = v || caml_call1(resolve_reference, s);
             if(! match)
              return caml_call4
                      (report,
                       l,
                       [0, -590381665, [0, s, cst_reference$3, cst_unknown_entity]],
                       throw$0[1],
                       unresolved);
             var s$0 = match[1];
             return k$0(s$0);
            }
            if(is_name_char(c)){
             caml_call2(Markup_Common[10], buffer, c);
             return read(0);
            }
            var c$0 = param[2], _d$_ = throw$0[1];
            return caml_call4
                    (report,
                     l$0,
                     [0,
                      -590381665,
                      [0,
                       caml_call1(Markup_Common[26], c$0),
                       cst_reference$4,
                       cst_invalid_name_character]],
                     _d$_,
                     unresolved);
           }
           return caml_call4
                   (Markup_Kstream[4],
                    input$0,
                    throw$0[1],
                    unexpected_eoi,
                    _d__);
          };
       return read(0);
      }
      var c$0 = param[2], _d9_ = throw$0[1];
      return caml_call4
              (report,
               l$0,
               [0,
                -590381665,
                [0,
                 caml_call1(Markup_Common[26], c$0),
                 cst_reference$5,
                 cst_invalid_start_character]],
               _d9_,
               unresolved);
     }
     return caml_call4
             (Markup_Kstream[4], input$0, throw$0[1], unexpected_eoi, _d7_);
    }
    function extra_whitespace(where, l, c, k){
     var _d6_ = throw$0[1];
     return caml_call4
             (report,
              l,
              [0,
               -590381665,
               [0,
                caml_call1(Markup_Common[26], c),
                where,
                cst_whitespace_not_allowed_her]],
              _d6_,
              k);
    }
    function consume_whitespace(k){
     function _d5_(v){
      var c = v[2];
      return caml_call1(Markup_Common[22], c)
              ? consume_whitespace(k)
              : (caml_call2(Markup_Kstream[8], input, v), caml_call1(k, 0));
     }
     return caml_call4(Markup_Kstream[4], input, throw$0[1], k, _d5_);
    }
    function parse_attribute(with_references, terminators, l, k){
     var
      name_buffer = caml_call1(Stdlib_Buffer[1], 32),
      value_buffer = caml_call1(Stdlib_Buffer[1], 256),
      quote_opened = [0, 0],
      quote_closed = [0, 0];
     function finish(param){
      if(0 === caml_call1(Stdlib_Buffer[7], name_buffer))
       return caml_call1(k, 0);
      function emit(param){
       var _d4_ = caml_call1(Stdlib_Buffer[2], value_buffer);
       return caml_call1
               (k, [0, [0, caml_call1(Stdlib_Buffer[2], name_buffer), _d4_]]);
      }
      if(quote_opened[1]){
       if(quote_closed[1]) return emit(0);
       var _d2_ = throw$0[1];
       return caml_call4(report, caml_call1(get_location, 0), _j_, _d2_, emit);
      }
      if(0 !== caml_call1(Stdlib_Buffer[7], value_buffer)) return emit(0);
      var _d3_ = throw$0[1];
      return caml_call4
              (report,
               l,
               [0,
                -590381665,
                [0,
                 caml_call1(Stdlib_Buffer[2], name_buffer),
                 cst_attribute,
                 cst_has_no_value]],
               _d3_,
               emit);
     }
     function next(f){
      function _d1_(v){
       var c = v[2];
       return caml_call2(Stdlib_List[37], c, terminators)
               ? (caml_call2(Markup_Kstream[8], input, v), finish(0))
               : caml_call1(f, v);
      }
      return caml_call4(Markup_Kstream[4], input, throw$0[1], finish, _d1_);
     }
     function name_state(param){
      return next
              (function(param){
                var l = param[1], c = param[2];
                if(61 === c) return value_state(0);
                if(caml_call1(Markup_Common[22], c))
                 return extra_whitespace
                         (cst_attribute$1,
                          l,
                          c,
                          function(param){return consume_whitespace(equals_state);});
                var c$0 = param[2];
                function _dY_(param){
                 caml_call2(Markup_Common[10], name_buffer, c$0);
                 return name_state(0);
                }
                var _dZ_ = throw$0[1];
                function _d0_(param){
                 return [0,
                         -590381665,
                         [0,
                          caml_call1(Markup_Common[26], c$0),
                          cst_attribute$2,
                          cst_invalid_name_character$0]];
                }
                return caml_call5
                        (report_if, 1 - is_name_char(c$0), l, _d0_, _dZ_, _dY_);
               });
     }
     function equals_state(param){
      return next
              (function(v){
                return 61 === v[2]
                        ? value_state(0)
                        : (caml_call2(Markup_Kstream[8], input, v), finish(0));
               });
     }
     function value_state(param){
      return next
              (function(v){
                var l = v[1], c = v[2];
                if(caml_call1(Markup_Common[22], c))
                 return extra_whitespace
                         (cst_attribute$3,
                          l,
                          c,
                          function(param){return consume_whitespace(value_state);});
                if(34 !== c && 39 !== c){
                 var c$0 = v[2];
                 caml_call2(Markup_Kstream[8], input, v);
                 var _dX_ = throw$0[1];
                 return caml_call4
                         (report,
                          l,
                          [0,
                           -590381665,
                           [0,
                            caml_call1(Markup_Common[26], c$0),
                            cst_attribute$4,
                            cst_unquoted_value]],
                          _dX_,
                          unquoted_value_state);
                }
                quote_opened[1] = 1;
                return quoted_value_state(c);
               });
     }
     function handle_ampersand(l, state){
      return parse_reference
              (l,
               function(param){
                if(param){
                 var s = param[1];
                 caml_call2(Stdlib_Buffer[16], value_buffer, s);
                 return caml_call1(state, 0);
                }
                function _dW_(param){
                 caml_call2(Markup_Common[10], value_buffer, 38);
                 return caml_call1(state, 0);
                }
                return caml_call4(report, l, _k_, throw$0[1], _dW_);
               });
     }
     function handle_lt(l, state){
      function _dV_(param){
       caml_call2(Markup_Common[10], value_buffer, 60);
       return caml_call1(state, 0);
      }
      return caml_call4(report, l, _l_, throw$0[1], _dV_);
     }
     function quoted_value_state(quote){
      function _dU_(param){
       var l = param[1], c = param[2];
       if(c === quote){quote_closed[1] = 1; return finish(0);}
       if(38 === c){
        if(with_references)
         return handle_ampersand
                 (l, function(param){return quoted_value_state(quote);});
       }
       else if(60 === c)
        return handle_lt
                (l, function(param){return quoted_value_state(quote);});
       var c$0 = param[2];
       caml_call2(Markup_Common[10], value_buffer, c$0);
       return quoted_value_state(quote);
      }
      return caml_call4(Markup_Kstream[4], input, throw$0[1], finish, _dU_);
     }
     function unquoted_value_state(param){
      return next
              (function(v){
                var l = v[1], c = v[2];
                if(caml_call1(Markup_Common[22], c)){
                 caml_call2(Markup_Kstream[8], input, v);
                 return finish(0);
                }
                if(38 === c){
                 if(with_references)
                  return handle_ampersand(l, unquoted_value_state);
                }
                else if(60 === c) return handle_lt(l, unquoted_value_state);
                var c$0 = v[2];
                caml_call2(Markup_Common[10], value_buffer, c$0);
                return unquoted_value_state(0);
               });
     }
     return next
             (function(param){
               var c = param[2], l = param[1];
               function _dR_(param){
                caml_call2(Markup_Common[10], name_buffer, c);
                return name_state(0);
               }
               var _dS_ = throw$0[1];
               function _dT_(param){
                return [0,
                        -590381665,
                        [0,
                         caml_call1(Markup_Common[26], c),
                         cst_attribute$0,
                         cst_invalid_start_character$0]];
               }
               return caml_call5
                       (report_if, 1 - is_name_start_char(c), l, _dT_, _dS_, _dR_);
              });
    }
    function parse_declaration_or_processin(l, k){
     var
      target_buffer = caml_call1(Stdlib_Buffer[1], 32),
      text_buffer = caml_call1(Stdlib_Buffer[1], 512),
      attributes = [0, 0];
     function next(context, finish, f){
      function _dL_(v){
       if(63 !== v[2]) return caml_call1(f, v);
       var l = v[1];
       function _dO_(v){
        return 62 === v[2]
                ? caml_call1(finish, 0)
                : (caml_call2
                   (Markup_Kstream[8], input, v),
                  caml_call1(f, [0, l, 63]));
       }
       function _dP_(param){
        var _dQ_ = throw$0[1];
        return caml_call4
                (report,
                 caml_call1(get_location, 0),
                 [0, -95440847, context],
                 _dQ_,
                 finish);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _dP_, _dO_);
      }
      function _dM_(param){
       var _dN_ = throw$0[1];
       return caml_call4
               (report,
                caml_call1(get_location, 0),
                [0, -95440847, context],
                _dN_,
                finish);
      }
      return caml_call4(Markup_Kstream[4], input, throw$0[1], _dM_, _dL_);
     }
     function target_start_state(param){
      return next
              (pi,
               finish_pi,
               function(param){
                var l = param[1], c = param[2];
                if(caml_call1(Markup_Common[22], c))
                 return extra_whitespace
                         (pi,
                          l,
                          c,
                          function(param){
                           return consume_whitespace(target_start_state);
                          });
                var c$0 = param[2];
                function _dI_(param){
                 caml_call2(Markup_Common[10], target_buffer, c$0);
                 return target_state(0);
                }
                var _dJ_ = throw$0[1];
                function _dK_(param){
                 return [0,
                         -590381665,
                         [0,
                          caml_call1(Markup_Common[26], c$0),
                          pi,
                          cst_invalid_start_character$1]];
                }
                return caml_call5
                        (report_if,
                         1 - is_name_start_char(c$0),
                         l,
                         _dK_,
                         _dJ_,
                         _dI_);
               });
     }
     function target_state(param){
      return next
              (pi,
               finish_pi,
               function(param){
                var l = param[1], c = param[2];
                if(caml_call1(Markup_Common[22], c)){
                 var _dE_ = caml_call1(Stdlib_Buffer[2], target_buffer);
                 return caml_string_equal
                          (caml_call1(Stdlib_String[27], _dE_), cst_xml$0)
                         ? xml_declaration_state(0)
                         : text_state(0);
                }
                var c$0 = param[2];
                function _dF_(param){
                 caml_call2(Markup_Common[10], target_buffer, c$0);
                 return target_state(0);
                }
                var _dG_ = throw$0[1];
                function _dH_(param){
                 return [0,
                         -590381665,
                         [0,
                          caml_call1(Markup_Common[26], c$0),
                          pi,
                          cst_invalid_name_character$1]];
                }
                return caml_call5
                        (report_if, 1 - is_name_char(c$0), l, _dH_, _dG_, _dF_);
               });
     }
     function text_state(param){
      return next
              (pi,
               finish_pi,
               function(param){
                var c = param[2];
                caml_call2(Markup_Common[10], text_buffer, c);
                return text_state(0);
               });
     }
     function xml_declaration_state(param){
      return next
              (xml,
               finish_xml,
               function(v){
                var l = v[1], c = v[2];
                return caml_call1(Markup_Common[22], c)
                        ? xml_declaration_state(0)
                        : 63
                          === c
                          ? xml_declaration_state(0)
                          : (caml_call2
                             (Markup_Kstream[8], input, v),
                            parse_attribute
                             (0,
                              _m_,
                              l,
                              function(param){
                               if(! param) return xml_declaration_state(0);
                               var match = param[1], value = match[2], name = match[1];
                               attributes[1] = [0, [0, l, name, value], attributes[1]];
                               return xml_declaration_state(0);
                              }));
               });
     }
     function finish_pi(param){
      if(0 === caml_call1(Stdlib_Buffer[7], target_buffer)){
       var _dB_ = function(param){return caml_call1(k, 0);};
       return caml_call4
               (report,
                l,
                [0, -590381665, [0, cst$1, pi, cst_empty]],
                throw$0[1],
                _dB_);
      }
      var _dC_ = caml_call1(Stdlib_Buffer[2], target_buffer);
      if(caml_string_equal(caml_call1(Stdlib_String[27], _dC_), cst_xml$0))
       return finish_xml(0);
      var _dD_ = caml_call1(Stdlib_Buffer[2], text_buffer);
      return caml_call1
              (k,
               [0,
                [0,
                 17913,
                 [0, caml_call1(Stdlib_Buffer[2], target_buffer), _dD_]]]);
     }
     function finish_xml(param){
      function split(f, l){
       var prefix = 0, param = l;
       for(;;){
        if(! param) return 0;
        var x = param[1], suffix = param[2];
        if(caml_call1(f, x))
         return [0, [0, caml_call1(Stdlib_List[10], prefix), x, suffix]];
        var
         suffix$0 = param[2],
         prefix$0 = [0, x, prefix],
         prefix = prefix$0,
         param = suffix$0;
       }
      }
      function matches(s, param){
       var name = param[2];
       return caml_string_equal(caml_call1(Stdlib_String[27], name), s);
      }
      function encoding_state(version, attributes){
       var
        match =
          split
           (function(_dA_){return matches(cst_encoding, _dA_);}, attributes);
       if(! match) return standalone_state(version, 0, 0, attributes);
       var
        _dv_ = match[1],
        suffix = _dv_[3],
        match$0 = _dv_[2],
        value = match$0[3],
        name = match$0[2],
        l = match$0[1],
        prefix = _dv_[1];
       function _dw_(param){
        var _dz_ = caml_call2(Stdlib[37], prefix, suffix);
        return standalone_state
                (version,
                 [0, value],
                 caml_call1(Stdlib_List[1], prefix),
                 _dz_);
       }
       var _dx_ = throw$0[1];
       function _dy_(param){
        return [0, -590381665, [0, name, xml, cst_must_be_encoding]];
       }
       return caml_call5
               (report_if,
                caml_string_notequal(name, cst_encoding$0),
                l,
                _dy_,
                _dx_,
                _dw_);
      }
      function standalone_state(version, encoding, encoding_index, attributes){
       var
        match =
          split
           (function(_du_){return matches(cst_standalone, _du_);}, attributes);
       if(! match) return final_state(version, encoding, 0, attributes);
       var
        _dm_ = match[1],
        suffix = _dm_[3],
        match$0 = _dm_[2],
        value = match$0[3],
        name = match$0[2],
        l = match$0[1],
        prefix = _dm_[1];
       function _dn_(param){
        function _dq_(param){
         function k(v){
          return final_state
                  (version,
                   encoding,
                   v,
                   caml_call2(Stdlib[37], prefix, suffix));
         }
         if(! caml_string_notequal(value, cst_no)) return k(_q_);
         if(! caml_string_notequal(value, cst_yes)) return k(_p_);
         function _dt_(param){
          var match = caml_call1(Stdlib_String[27], value);
          return caml_string_notequal(match, cst_no)
                  ? caml_string_notequal(match, cst_yes) ? k(0) : k(_n_)
                  : k(_o_);
         }
         return caml_call4
                 (report,
                  l,
                  [0, -590381665, [0, value, xml, cst_must_be_yes_or_no]],
                  throw$0[1],
                  _dt_);
        }
        var _dr_ = throw$0[1];
        function _ds_(param){
         return [0, -590381665, [0, name, xml, cst_must_come_after_encoding]];
        }
        return caml_call5
                (report_if,
                 caml_call1(Stdlib_List[1], prefix) < encoding_index ? 1 : 0,
                 l,
                 _ds_,
                 _dr_,
                 _dq_);
       }
       var _do_ = throw$0[1];
       function _dp_(param){
        return [0, -590381665, [0, name, xml, cst_must_be_standalone]];
       }
       return caml_call5
               (report_if,
                caml_string_notequal(name, cst_standalone$0),
                l,
                _dp_,
                _do_,
                _dn_);
      }
      function final_state(version, encoding, standalone, attributes){
       function k$0(param){
        return caml_call1
                (k, [0, [0, 4400567, [0, version, encoding, standalone]]]);
       }
       if(! attributes) return k$0(0);
       var match = attributes[1], name = match[2], l = match[1];
       return caml_call4
               (report,
                l,
                [0, -590381665, [0, name, xml, cst_not_allowed_here]],
                throw$0[1],
                k$0);
      }
      var
       attributes$0 = caml_call1(Stdlib_List[10], attributes[1]),
       target = caml_call1(Stdlib_Buffer[2], target_buffer);
      function _c3_(param){
       var
        match =
          split
           (function(_dl_){return matches(cst_version, _dl_);}, attributes$0);
       if(match){
        var
         _c6_ = match[1],
         suffix = _c6_[3],
         match$0 = _c6_[2],
         value = match$0[3],
         name = match$0[2],
         l$0 = match$0[1],
         prefix = _c6_[1],
         _c7_ =
           function(param){
            function _c$_(param){
             function _dh_(param){
              return encoding_state
                      (value, caml_call2(Stdlib[37], prefix, suffix));
             }
             var
              _di_ = throw$0[1],
              _dc_ = 3 === runtime.caml_ml_string_length(value) ? 1 : 0;
             a:
             {
              var
               _dj_ =
                 function(param){
                  return [0, -590381665, [0, value, xml, cst_must_match_1_x]];
                 };
              if(_dc_){
               var _dd_ = 49 === caml_string_get(value, 0) ? 1 : 0;
               if(_dd_){
                var _de_ = 46 === caml_string_get(value, 1) ? 1 : 0;
                if(_de_){
                 var
                  _df_ = caml_string_get(value, 2),
                  _dk_ = caml_call1(Markup_Common[15], _df_);
                 break a;
                }
                var _dg_ = _de_;
               }
               else
                var _dg_ = _dd_;
              }
              else
               var _dg_ = _dc_;
              var _dk_ = _dg_;
             }
             return caml_call5(report_if, 1 - _dk_, l$0, _dj_, _di_, _dh_);
            }
            var _da_ = throw$0[1];
            function _db_(param){
             return [0, -590381665, [0, name, xml, cst_must_be_first]];
            }
            return caml_call5
                    (report_if,
                     0 !== caml_call1(Stdlib_List[1], prefix) ? 1 : 0,
                     l$0,
                     _db_,
                     _da_,
                     _c$_);
           },
         _c8_ = throw$0[1],
         _c9_ =
           function(param){
            return [0, -590381665, [0, name, xml, cst_must_be_version]];
           };
        return caml_call5
                (report_if,
                 caml_string_notequal(name, cst_version$0),
                 l$0,
                 _c9_,
                 _c8_,
                 _c7_);
       }
       function _c__(param){return encoding_state(cst_1_0, attributes$0);}
       return caml_call4
               (report,
                l,
                [0, -590381665, [0, cst_xml, xml, cst_missing_version]],
                throw$0[1],
                _c__);
      }
      var _c4_ = throw$0[1];
      function _c5_(param){
       return [0, -590381665, [0, target, xml, cst_must_be_xml]];
      }
      return caml_call5
              (report_if,
               caml_string_notequal(target, cst_xml$0),
               l,
               _c5_,
               _c4_,
               _c3_);
     }
     return target_start_state(0);
    }
    var
     text = caml_call1(Markup_Text[2], 0),
     note_character_location = caml_call1(Markup_Text[3], text),
     add_character = caml_call1(Markup_Text[5], text),
     add_string = caml_call1(Markup_Text[6], text),
     current_state = [],
     emit =
       function _c2_(_cZ_, _c0_, _c1_){return _c2_.fun(_cZ_, _c0_, _c1_);},
     emit_chars = function _cY_(_cX_){return _cY_.fun(_cX_);},
     emit$0 =
       function _cW_(_cT_, _cU_, _cV_){return _cW_.fun(_cT_, _cU_, _cV_);},
     emit_eoi = function _cS_(_cQ_, _cR_){return _cS_.fun(_cQ_, _cR_);},
     emit_start =
       function _cP_(_cK_, _cL_, _cM_, _cN_, _cO_){
        return _cP_.fun(_cK_, _cL_, _cM_, _cN_, _cO_);
       },
     emit_end =
       function _cJ_(_cG_, _cH_, _cI_){return _cJ_.fun(_cG_, _cH_, _cI_);},
     emit_doctype =
       function _cF_(_cC_, _cD_, _cE_){return _cF_.fun(_cC_, _cD_, _cE_);},
     lt_in_text = function _cB_(_cz_, _cA_){return _cB_.fun(_cz_, _cA_);},
     initial_state = function _cy_(_cx_){return _cy_.fun(_cx_);},
     one_bracket_state = function _cw_(_cv_){return _cw_.fun(_cv_);},
     two_brackets_state =
       function _cu_(_cs_, _ct_){return _cu_.fun(_cs_, _ct_);},
     begin_markup_state = function _cr_(_cq_){return _cr_.fun(_cq_);},
     start_tag_state = function _cp_(_cn_, _co_){return _cp_.fun(_cn_, _co_);},
     attributes_state =
       function _cm_(_cj_, _ck_, _cl_){return _cm_.fun(_cj_, _ck_, _cl_);},
     close_empty_element_state =
       function _ci_(_ce_, _cf_, _cg_, _ch_){
        return _ci_.fun(_ce_, _cf_, _cg_, _ch_);
       },
     end_tag_state = function _cd_(_cc_){return _cd_.fun(_cc_);},
     end_tag_name_state =
       function _cb_(_b$_, _ca_){return _cb_.fun(_b$_, _ca_);},
     end_tag_whitespace_state =
       function _b__(_b7_, _b8_, _b9_){return _b__.fun(_b7_, _b8_, _b9_);},
     bad_comment_start =
       function _b6_(_b3_, _b4_, _b5_){return _b6_.fun(_b3_, _b4_, _b5_);},
     comment_cdata_or_doctype_state =
       function _b2_(_b1_){return _b2_.fun(_b1_);},
     comment_start_state = function _b0_(_bZ_){return _b0_.fun(_bZ_);},
     unterminated_comment =
       function _bY_(_bW_, _bX_){return _bY_.fun(_bW_, _bX_);},
     comment_state = function _bV_(_bT_, _bU_){return _bV_.fun(_bT_, _bU_);},
     comment_one_dash_state =
       function _bS_(_bP_, _bQ_, _bR_){return _bS_.fun(_bP_, _bQ_, _bR_);},
     comment_two_dashes_state =
       function _bO_(_bK_, _bL_, _bM_, _bN_){
        return _bO_.fun(_bK_, _bL_, _bM_, _bN_);
       },
     cdata_start_state = function _bJ_(_bI_){return _bJ_.fun(_bI_);},
     cdata_state = function _bH_(_bG_){return _bH_.fun(_bG_);},
     cdata_one_bracket_state =
       function _bF_(_bD_, _bE_){return _bF_.fun(_bD_, _bE_);},
     cdata_two_brackets_state =
       function _bC_(_bz_, _bA_, _bB_){return _bC_.fun(_bz_, _bA_, _bB_);},
     doctype_start_state = function _by_(_bx_){return _by_.fun(_bx_);},
     unterminated_doctype =
       function _bw_(_bu_, _bv_){return _bw_.fun(_bu_, _bv_);},
     doctype_state = function _bt_(_br_, _bs_){return _bt_.fun(_br_, _bs_);},
     doctype_quoted_state =
       function _bq_(_bm_, _bn_, _bo_, _bp_){
        return _bq_.fun(_bm_, _bn_, _bo_, _bp_);
       },
     doctype_item_state =
       function _bl_(_bi_, _bj_, _bk_){return _bl_.fun(_bi_, _bj_, _bk_);},
     doctype_declaration_state =
       function _bh_(_be_, _bf_, _bg_){return _bh_.fun(_be_, _bf_, _bg_);};
    caml_update_dummy(current_state, [0, initial_state]);
    caml_update_dummy
     (emit,
      function(l, t, s){
       current_state[1] = s;
       return caml_call1(output[1], [0, l, t]);
      });
    caml_update_dummy
     (emit_chars,
      function(state){
       var match = caml_call1(Markup_Text[7], text);
       if(! match) return caml_call1(state, 0);
       var match$0 = match[1], strings = match$0[2], l = match$0[1];
       return caml_call3(emit, l, [0, -656339779, strings], state);
      });
    caml_update_dummy
     (emit$0,
      function(l, t, state){
       return caml_call1
               (emit_chars,
                function(param){return caml_call3(emit, l, t, state);});
      });
    caml_update_dummy
     (emit_eoi,
      function(during, param){
       var l = caml_call1(get_location, 0);
       return caml_call1
               (emit_chars,
                function(param){
                 function k(param){
                  return caml_call3
                          (emit,
                           l,
                           3448988,
                           function(param){return caml_call1(ended[1], 0);});
                 }
                 if(! during) return k(0);
                 var production = during[1];
                 return caml_call4
                         (report, l, [0, -95440847, production], throw$0[1], k);
                });
      });
    caml_update_dummy
     (emit_start,
      function(l, name, self_closing, attributes, state){
       var
        tag = [0, name, caml_call1(Stdlib_List[10], attributes), self_closing];
       return caml_call3(emit$0, l, [0, 389604418, tag], state);
      });
    caml_update_dummy
     (emit_end,
      function(l, name, state){
       var tag = [0, name, 0, 0];
       return caml_call3(emit$0, l, [0, 3455931, tag], state);
      });
    caml_update_dummy
     (emit_doctype,
      function(l, buffer, s){
       var
        doctype = [0, 0, 0, 0, [0, caml_call1(Stdlib_Buffer[2], buffer)], 0];
       return caml_call3(emit$0, l, [0, 990181650, doctype], s);
      });
    caml_update_dummy
     (lt_in_text,
      function(l, k){return caml_call4(report, l, _r_, throw$0[1], k);});
    caml_update_dummy
     (initial_state,
      function(param){
       function _ba_(param){
        var l = param[1], c = param[2];
        if(38 === c)
         return parse_reference
                 (l,
                  function(param){
                   if(param){
                    var s = param[1];
                    caml_call2(add_string, l, s);
                    return caml_call1(initial_state, 0);
                   }
                   function _bc_(param){
                    caml_call2(add_character, l, c);
                    return caml_call1(initial_state, 0);
                   }
                   var _bd_ = throw$0[1];
                   return caml_call4
                           (report,
                            l,
                            [0,
                             -590381665,
                             [0,
                              caml_call1(Markup_Common[26], c),
                              cst_text,
                              cst_replace_with_amp]],
                            _bd_,
                            _bc_);
                  });
        if(60 === c) return caml_call1(begin_markup_state, l);
        if(93 === c){
         caml_call2(add_character, l, c);
         return caml_call1(one_bracket_state, l);
        }
        var c$0 = param[2];
        caml_call2(add_character, l, c$0);
        return caml_call1(initial_state, 0);
       }
       function _bb_(param){return caml_call2(emit_eoi, 0, 0);}
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _bb_, _ba_);
      });
    caml_update_dummy
     (one_bracket_state,
      function(l){
       function _a$_(v){
        if(v){
         var match = v[1], c = match[2];
         if(93 === c){
          var l$0 = match[1];
          caml_call2(add_character, l$0, c);
          return caml_call2(two_brackets_state, l, l$0);
         }
        }
        caml_call2(Markup_Kstream[9], input, v);
        return caml_call1(initial_state, 0);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _a$_);
      });
    caml_update_dummy
     (two_brackets_state,
      function(l$0, l){
       function _a8_(v){
        if(v){
         var _a9_ = v[1], c = _a9_[2], l$1 = _a9_[1];
         if(62 === c){
          var
           _a__ =
             function(param){
              caml_call2(add_character, l$1, c);
              return caml_call1(initial_state, 0);
             };
          return caml_call4(report, l$0, _s_, throw$0[1], _a__);
         }
         if(93 === c){
          caml_call2(add_character, l$1, c);
          return caml_call2(two_brackets_state, l, l$1);
         }
        }
        caml_call2(Markup_Kstream[9], input, v);
        return caml_call1(initial_state, 0);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _a8_);
      });
    caml_update_dummy
     (begin_markup_state,
      function(l){
       function recover(v){
        return caml_call2
                (lt_in_text,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       function _a2_(v){
        var l$0 = v[1], c = v[2];
        if(33 === c) return caml_call1(comment_cdata_or_doctype_state, l);
        if(47 === c) return caml_call1(end_tag_state, l);
        if(63 === c)
         return parse_declaration_or_processin
                 (l,
                  function(param){
                   if(! param) return caml_call1(initial_state, 0);
                   var token = param[1];
                   return caml_call3(emit$0, l, token, initial_state);
                  });
        if(is_name_start_char(c)){
         var tag_name_buffer = caml_call1(Stdlib_Buffer[1], 32);
         caml_call2(Markup_Common[10], tag_name_buffer, c);
         return caml_call2(start_tag_state, l, tag_name_buffer);
        }
        var c$0 = v[2];
        function _a6_(param){return recover([0, v]);}
        var _a7_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag,
                   cst_invalid_start_character$2]],
                 _a7_,
                 _a6_);
       }
       function _a3_(param){
        function _a4_(param){return recover(0);}
        var _a5_ = throw$0[1];
        return caml_call4
                (report, caml_call1(get_location, 0), _t_, _a5_, _a4_);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _a3_, _a2_);
      });
    caml_update_dummy
     (start_tag_state,
      function(l, buffer){
       function recover(v){
        return caml_call2
                (lt_in_text,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2
                   (add_string, l, caml_call1(Stdlib_Buffer[2], buffer));
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       function _aW_(v){
        var l$0 = v[1], c = v[2];
        if(47 === c)
         return caml_call4
                 (close_empty_element_state,
                  l,
                  l$0,
                  caml_call1(Stdlib_Buffer[2], buffer),
                  0);
        if(62 === c)
         return caml_call5
                 (emit_start,
                  l,
                  caml_call1(Stdlib_Buffer[2], buffer),
                  0,
                  0,
                  initial_state);
        if(caml_call1(Markup_Common[22], c))
         return caml_call3
                 (attributes_state,
                  l,
                  caml_call1(Stdlib_Buffer[2], buffer),
                  0);
        if(is_name_char(c)){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call2(start_tag_state, l, buffer);
        }
        var c$0 = v[2];
        function _a0_(param){return recover([0, v]);}
        var _a1_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$0,
                   cst_invalid_name_character$2]],
                 _a1_,
                 _a0_);
       }
       function _aX_(param){
        function _aY_(param){return recover(0);}
        var _aZ_ = throw$0[1];
        return caml_call4
                (report, caml_call1(get_location, 0), _u_, _aZ_, _aY_);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aX_, _aW_);
      });
    caml_update_dummy
     (attributes_state,
      function(l, tag_name, attributes){
       function _aU_(v){
        var l$0 = v[1], c = v[2];
        return caml_call1(Markup_Common[22], c)
                ? caml_call3(attributes_state, l, tag_name, attributes)
                : 47
                  === c
                  ? caml_call4
                    (close_empty_element_state, l, l$0, tag_name, attributes)
                  : 62
                    === c
                    ? caml_call5
                      (emit_start, l, tag_name, 0, attributes, initial_state)
                    : (caml_call2
                       (Markup_Kstream[8], input, v),
                      parse_attribute
                       (1,
                        _v_,
                        l$0,
                        function(param){
                         if(! param)
                          return caml_call3(attributes_state, l, tag_name, attributes);
                         var match = param[1], value = match[2], name = match[1];
                         return caml_call3
                                 (attributes_state,
                                  l,
                                  tag_name,
                                  [0, [0, name, value], attributes]);
                        }));
       }
       function _aV_(param){
        return caml_call5
                (emit_start,
                 l,
                 tag_name,
                 0,
                 attributes,
                 function(param){return caml_call2(emit_eoi, _w_, 0);});
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aV_, _aU_);
      });
    caml_update_dummy
     (close_empty_element_state,
      function(l$0, l, name, attributes){
       function _aQ_(v){
        if(62 === v[2])
         return caml_call5
                 (emit_start, l$0, name, 1, attributes, initial_state);
        function _aS_(param){
         caml_call2(Markup_Kstream[8], input, v);
         return caml_call3(attributes_state, l$0, name, attributes);
        }
        var _aT_ = throw$0[1];
        return caml_call4
                (report,
                 l,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], 47),
                   cst_tag$1,
                   cst_should_be_part_of]],
                 _aT_,
                 _aS_);
       }
       function _aR_(param){
        return caml_call5
                (emit_start,
                 l$0,
                 name,
                 1,
                 attributes,
                 function(param){return caml_call2(emit_eoi, _x_, 0);});
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aR_, _aQ_);
      });
    caml_update_dummy
     (end_tag_state,
      function(l){
       function recover(v){
        return caml_call2
                (lt_in_text,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2(add_character, l, 47);
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       function _aK_(v){
        var l$0 = v[1], c = v[2];
        if(is_name_start_char(c)){
         var name_buffer = caml_call1(Stdlib_Buffer[1], 32);
         caml_call2(Markup_Common[10], name_buffer, c);
         return caml_call2(end_tag_name_state, l, name_buffer);
        }
        var c$0 = v[2];
        function _aO_(param){return recover([0, v]);}
        var _aP_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$2,
                   cst_invalid_start_character$3]],
                 _aP_,
                 _aO_);
       }
       function _aL_(param){
        function _aM_(param){return recover(0);}
        var _aN_ = throw$0[1];
        return caml_call4
                (report, caml_call1(get_location, 0), _y_, _aN_, _aM_);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aL_, _aK_);
      });
    caml_update_dummy
     (end_tag_name_state,
      function(l, buffer){
       function recover(v){
        return caml_call2
                (lt_in_text,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2(add_character, l, 47);
                  caml_call2
                   (add_string, l, caml_call1(Stdlib_Buffer[2], buffer));
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       function _aE_(v){
        var l$0 = v[1], c = v[2];
        if(62 === c)
         return caml_call3
                 (emit_end,
                  l,
                  caml_call1(Stdlib_Buffer[2], buffer),
                  initial_state);
        if(caml_call1(Markup_Common[22], c))
         return caml_call3
                 (end_tag_whitespace_state,
                  0,
                  l,
                  caml_call1(Stdlib_Buffer[2], buffer));
        if(is_name_char(c)){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call2(end_tag_name_state, l, buffer);
        }
        var c$0 = v[2];
        function _aI_(param){return recover([0, v]);}
        var _aJ_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$3,
                   cst_invalid_name_character$3]],
                 _aJ_,
                 _aI_);
       }
       function _aF_(param){
        function _aG_(param){return recover(0);}
        var _aH_ = throw$0[1];
        return caml_call4
                (report, caml_call1(get_location, 0), _z_, _aH_, _aG_);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aF_, _aE_);
      });
    caml_update_dummy
     (end_tag_whitespace_state,
      function(reported, l, name){
       function _aA_(param){
        var l$0 = param[1], c = param[2];
        if(62 === c) return caml_call3(emit_end, l, name, initial_state);
        if(caml_call1(Markup_Common[22], c))
         return caml_call3(end_tag_whitespace_state, reported, l, name);
        var c$0 = param[2];
        if(reported)
         return caml_call3(end_tag_whitespace_state, reported, l, name);
        function _aC_(param){
         return caml_call3(end_tag_whitespace_state, 1, l, name);
        }
        var _aD_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$4,
                   cst_attribute_in_end_tag]],
                 _aD_,
                 _aC_);
       }
       function _aB_(param){
        return caml_call3
                (emit_end,
                 l,
                 name,
                 function(param){return caml_call2(emit_eoi, _A_, 0);});
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _aB_, _aA_);
      });
    caml_update_dummy
     (bad_comment_start,
      function(s, l, k){
       function _az_(param){return caml_call2(lt_in_text, l, k);}
       return caml_call4
               (report,
                l,
                [0, -590381665, [0, s, cst_comment, cst_should_start_with]],
                throw$0[1],
                _az_);
      });
    caml_update_dummy
     (comment_cdata_or_doctype_state,
      function(l){
       function _ax_(v){
        if(v){
         var _ay_ = v[1][2];
         if(45 === _ay_) return caml_call1(comment_start_state, l);
         if(68 === _ay_) return caml_call1(doctype_start_state, l);
         if(91 === _ay_) return caml_call1(cdata_start_state, l);
        }
        return caml_call3
                (bad_comment_start,
                 cst$2,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2(add_character, l, 33);
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ax_);
      });
    caml_update_dummy
     (comment_start_state,
      function(l){
       function _aw_(v){
        if(v && 45 === v[1][2])
         return caml_call2
                 (comment_state, l, caml_call1(Stdlib_Buffer[1], 256));
        return caml_call3
                (bad_comment_start,
                 cst$3,
                 l,
                 function(param){
                  caml_call2(add_character, l, 60);
                  caml_call2(add_character, l, 33);
                  caml_call2(add_character, l, 45);
                  caml_call2(Markup_Kstream[9], input, v);
                  return caml_call1(initial_state, 0);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _aw_);
      });
    caml_update_dummy
     (unterminated_comment,
      function(l, buffer){
       function _av_(param){return caml_call2(emit_eoi, _B_, 0);}
       return caml_call3
               (emit$0,
                l,
                [0, -826170817, caml_call1(Stdlib_Buffer[2], buffer)],
                _av_);
      });
    caml_update_dummy
     (comment_state,
      function(l, buffer){
       function _at_(param){
        var l$0 = param[1];
        if(45 === param[2])
         return caml_call3(comment_one_dash_state, l, l$0, buffer);
        var c = param[2];
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       function _au_(param){
        return caml_call2(unterminated_comment, l, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _au_, _at_);
      });
    caml_update_dummy
     (comment_one_dash_state,
      function(l$0, l, buffer){
       function _ar_(param){
        if(45 === param[2])
         return caml_call4(comment_two_dashes_state, 0, l$0, l, buffer);
        var c = param[2];
        caml_call2(Markup_Common[10], buffer, 45);
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l$0, buffer);
       }
       function _as_(param){
        return caml_call2(unterminated_comment, l$0, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _as_, _ar_);
      });
    caml_update_dummy
     (comment_two_dashes_state,
      function(reported, l$0, l, buffer){
       function recover(k){
        return reported
                ? caml_call1(k, 0)
                : caml_call4(report, l, _C_, throw$0[1], k);
       }
       function _ao_(param){
        var _aq_ = param[2];
        if(45 === _aq_)
         return recover
                 (function(param){
                   caml_call2(Markup_Common[10], buffer, 45);
                   return caml_call4
                           (comment_two_dashes_state, 1, l$0, l, buffer);
                  });
        if(62 === _aq_)
         return caml_call3
                 (emit$0,
                  l$0,
                  [0, -826170817, caml_call1(Stdlib_Buffer[2], buffer)],
                  initial_state);
        var c = param[2];
        return recover
                (function(param){
                  caml_call2(Markup_Common[10], buffer, 45);
                  caml_call2(Markup_Common[10], buffer, 45);
                  caml_call2(Markup_Common[10], buffer, c);
                  return caml_call2(comment_state, l$0, buffer);
                 });
       }
       function _ap_(param){
        return caml_call2(unterminated_comment, l$0, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _ap_, _ao_);
      });
    caml_update_dummy
     (cdata_start_state,
      function(l){
       function _ah_(cs){
        if(cs && 67 === cs[1][2]){
         var _ai_ = cs[2];
         if(_ai_ && 68 === _ai_[1][2]){
          var _aj_ = _ai_[2];
          if(_aj_ && 65 === _aj_[1][2]){
           var _ak_ = _aj_[2];
           if(_ak_ && 84 === _ak_[1][2]){
            var _al_ = _ak_[2];
            if(_al_ && 65 === _al_[1][2]){
             var _am_ = _al_[2];
             if(_am_ && 91 === _am_[1][2] && ! _am_[2]){
              caml_call1(note_character_location, l);
              return caml_call1(cdata_state, l);
             }
            }
           }
          }
         }
        }
        function _an_(param){
         return caml_call2
                 (lt_in_text,
                  l,
                  function(param){
                   caml_call2(Markup_Kstream[10], input, cs);
                   caml_call2(add_character, l, 60);
                   caml_call2(add_character, l, 33);
                   caml_call2(add_character, l, 91);
                   return caml_call1(initial_state, 0);
                  });
        }
        return caml_call4(report, l, _D_, throw$0[1], _an_);
       }
       return caml_call4(Markup_Kstream[7], 6, input, throw$0[1], _ah_);
      });
    caml_update_dummy
     (cdata_state,
      function(l){
       function _af_(param){
        var l$0 = param[1];
        if(93 === param[2])
         return caml_call2(cdata_one_bracket_state, l, l$0);
        var c = param[2];
        caml_call2(add_character, l$0, c);
        return caml_call1(cdata_state, l);
       }
       function _ag_(param){return caml_call2(emit_eoi, _E_, 0);}
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _ag_, _af_);
      });
    caml_update_dummy
     (cdata_one_bracket_state,
      function(l$0, l){
       function _ad_(param){
        var l$1 = param[1];
        if(93 === param[2])
         return caml_call3(cdata_two_brackets_state, l$0, l, l$1);
        var c = param[2];
        caml_call2(add_character, l, 93);
        caml_call2(add_character, l$1, c);
        return caml_call1(cdata_state, l$0);
       }
       function _ae_(param){return caml_call2(emit_eoi, _F_, 0);}
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _ae_, _ad_);
      });
    caml_update_dummy
     (cdata_two_brackets_state,
      function(l$1, l$0, l){
       function _aa_(param){
        var l$2 = param[1], _ac_ = param[2];
        if(62 === _ac_) return caml_call1(initial_state, 0);
        if(93 === _ac_){
         caml_call2(add_character, l$0, 93);
         return caml_call3(cdata_two_brackets_state, l$1, l, l$2);
        }
        var c = param[2];
        caml_call2(add_character, l$0, 93);
        caml_call2(add_character, l, 93);
        caml_call2(add_character, l$2, c);
        return caml_call1(cdata_state, l$1);
       }
       function _ab_(param){return caml_call2(emit_eoi, _G_, 0);}
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _ab_, _aa_);
      });
    caml_update_dummy
     (doctype_start_state,
      function(l){
       function _U_(cs){
        if(cs && 79 === cs[1][2]){
         var _V_ = cs[2];
         if(_V_ && 67 === _V_[1][2]){
          var _W_ = _V_[2];
          if(_W_ && 84 === _W_[1][2]){
           var _X_ = _W_[2];
           if(_X_ && 89 === _X_[1][2]){
            var _Y_ = _X_[2];
            if(_Y_ && 80 === _Y_[1][2]){
             var _Z_ = _Y_[2];
             if(_Z_ && 69 === _Z_[1][2]){
              var ___ = _Z_[2];
              if(___ && ! ___[2]){
               var c = ___[1][2];
               if(caml_call1(Markup_Common[22], c))
                return caml_call2
                        (doctype_state, l, caml_call1(Stdlib_Buffer[1], 512));
              }
             }
            }
           }
          }
         }
        }
        function _$_(param){
         return caml_call2
                 (lt_in_text,
                  l,
                  function(param){
                   caml_call2(Markup_Kstream[10], input, cs);
                   caml_call2(add_character, l, 60);
                   caml_call2(add_character, l, 33);
                   caml_call2(add_character, l, 68);
                   return caml_call1(initial_state, 0);
                  });
        }
        return caml_call4(report, l, _H_, throw$0[1], _$_);
       }
       return caml_call4(Markup_Kstream[7], 7, input, throw$0[1], _U_);
      });
    caml_update_dummy
     (unterminated_doctype,
      function(l, buffer){
       return caml_call3
               (emit_doctype,
                l,
                buffer,
                function(param){return caml_call2(emit_eoi, _I_, 0);});
      });
    caml_update_dummy
     (doctype_state,
      function(l, buffer){
       function _R_(param){
        var c = param[2], _T_ = c - 34 | 0;
        if(5 < _T_ >>> 0){
         var switcher = _T_ - 26 | 0;
         if(2 >= switcher >>> 0)
          switch(switcher){
            case 0:
             caml_call2(Markup_Common[10], buffer, c);
             return caml_call3
                     (doctype_item_state,
                      function(param){
                       return caml_call2(doctype_state, l, buffer);
                      },
                      l,
                      buffer);
            case 1: break;
            default:
             return caml_call3(emit_doctype, l, buffer, initial_state);
          }
        }
        else if(3 < _T_ - 1 >>> 0){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call4
                 (doctype_quoted_state,
                  function(param){
                   return caml_call2(doctype_state, l, buffer);
                  },
                  c,
                  l,
                  buffer);
        }
        var c$0 = param[2];
        caml_call2(Markup_Common[10], buffer, c$0);
        return caml_call2(doctype_state, l, buffer);
       }
       function _S_(param){
        return caml_call2(unterminated_doctype, l, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _S_, _R_);
      });
    caml_update_dummy
     (doctype_quoted_state,
      function(state, quote, l, buffer){
       function _P_(param){
        var c = param[2];
        if(c === quote){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call1(state, 0);
        }
        var c$0 = param[2];
        caml_call2(Markup_Common[10], buffer, c$0);
        return caml_call4(doctype_quoted_state, state, quote, l, buffer);
       }
       function _Q_(param){
        return caml_call2(unterminated_doctype, l, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _Q_, _P_);
      });
    caml_update_dummy
     (doctype_item_state,
      function(state, l, buffer){
       function _M_(param){
        var l$0 = param[1], c = param[2];
        if(33 === c){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call3(doctype_declaration_state, state, l, buffer);
        }
        if(63 === c){
         caml_call2(Markup_Common[10], buffer, c);
         var
          _O_ =
            function(param){
             var c = param[2];
             return caml_call2(Markup_Common[10], buffer, c);
            },
          undo = caml_call2(Markup_Kstream[15], _O_, input);
         return parse_declaration_or_processin
                 (l$0,
                  function(param){
                   caml_call1(undo, 0);
                   return caml_call1(state, 0);
                  });
        }
        var c$0 = param[2];
        caml_call2(Markup_Common[10], buffer, c$0);
        return caml_call1(state, 0);
       }
       function _N_(param){
        return caml_call2(unterminated_doctype, l, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _N_, _M_);
      });
    caml_update_dummy
     (doctype_declaration_state,
      function(state, l, buffer){
       function _K_(param){
        var c = param[2], switcher = c - 34 | 0;
        if(5 < switcher >>> 0){
         if(28 === switcher){
          caml_call2(Markup_Common[10], buffer, c);
          return caml_call1(state, 0);
         }
        }
        else if(3 < switcher - 1 >>> 0){
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call4
                 (doctype_quoted_state,
                  function(param){
                   return caml_call3
                           (doctype_declaration_state, state, l, buffer);
                  },
                  c,
                  l,
                  buffer);
        }
        var c$0 = param[2];
        caml_call2(Markup_Common[10], buffer, c$0);
        return caml_call3(doctype_declaration_state, state, l, buffer);
       }
       function _L_(param){
        return caml_call2(unterminated_doctype, l, buffer);
       }
       return caml_call4(Markup_Kstream[4], input, throw$0[1], _L_, _K_);
      });
    function _J_(throw$1, e, k){
     throw$0[1] = throw$1;
     ended[1] = e;
     output[1] = k;
     return caml_call1(current_state[1], 0);
    }
    return caml_call1(Markup_Kstream[1], _J_);
   }
   var Markup_Xml_tokenizer = [0, tokenize];
   runtime.caml_register_global
    (127, Markup_Xml_tokenizer, "Markup__Xml_tokenizer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Xml_parser
//# unitInfo: Requires: Markup__Common, Markup__Kstream, Markup__Namespace, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_XML_declaration_must_be_fi = "XML declaration must be first",
    caml_equal = runtime.caml_equal,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Markup_Namespace = global_data.Markup__Namespace,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Common = global_data.Markup__Common,
    cst_impossible = "impossible",
    _g_ = [0, -949968843, "doctype should be at top level"],
    _h_ = [0, -949968843, "XML declaration should be at top level"],
    _f_ = [0, -949968843, "not allowed after root element"],
    _c_ = [0, -95440847, "document before root element"],
    _e_ = [0, -949968843, cst_XML_declaration_must_be_fi],
    _d_ = [0, -949968843, "expected root element"],
    _a_ = [0, -949968843, cst_XML_declaration_must_be_fi],
    _b_ = [0, -949968843, "text at top level"],
    cst_duplicate_attribute = "duplicate attribute",
    cst_tag = "tag";
   function is_whitespace_only(strings){
    return caml_call2(Stdlib_List[33], Markup_Common[23], strings);
   }
   function parse(context, namespace, report, tokens){
    var
     open_elements = [0, 0],
     namespaces = caml_call1(Markup_Namespace[1][1], namespace),
     is_fragment = [0, 0],
     fragment_allowed = [0, 1],
     throw$0 = [0, function(param){return 0;}],
     ended = [0, function(param){return 0;}],
     output = [0, function(param){return 0;}],
     current_state = [],
     emit =
       function _ah_(_ae_, _af_, _ag_){return _ah_.fun(_ae_, _af_, _ag_);},
     push_and_emit =
       function _ad_(_aa_, _ab_, _ac_){return _ad_.fun(_aa_, _ab_, _ac_);},
     pop = function _$_(_Z_, ___){return _$_.fun(_Z_, ___);},
     emit_end = function _Y_(_X_){return _Y_.fun(_X_);},
     initial_state = function _W_(_V_){return _W_.fun(_V_);},
     document_state = function _U_(_T_){return _U_.fun(_T_);},
     doctype_state = function _S_(_R_){return _S_.fun(_R_);},
     root_state = function _Q_(_P_){return _Q_.fun(_P_);},
     after_root_state = function _O_(_N_){return _O_.fun(_N_);},
     content_state = function _M_(_L_){return _M_.fun(_L_);};
    caml_update_dummy
     (current_state,
      [0,
       function(param){
        return context
                ? 127343600
                  <= context[1]
                  ? (is_fragment[1] = 0, caml_call1(content_state, 0))
                  : (fragment_allowed[1] = 0, caml_call1(document_state, 0))
                : caml_call1(initial_state, 0);
       }]);
    caml_update_dummy
     (emit,
      function(l, signal, state){
       current_state[1] = state;
       return caml_call1(output[1], [0, l, signal]);
      });
    caml_update_dummy
     (push_and_emit,
      function(l, param, state){
       var attributes = param[2], raw_name = param[1];
       function _G_(param){
        var attributes = param[2], expanded_name = param[1];
        function deduplicate(acc, attributes, k){
         var acc$0 = acc, attributes$0 = attributes;
         for(;;){
          if(! attributes$0)
           return caml_call1(k, caml_call1(Stdlib_List[10], acc$0));
          var
           attributes$1 = attributes$0[2],
           attr = attributes$0[1],
           n = attr[1],
           _J_ =
             function(n){
               return function(param){
                var n$0 = param[1];
                return caml_equal(n$0, n);};
              }
              (n);
          if(caml_call1(caml_call1(Stdlib_List[34], _J_), acc$0)){
           var
            _K_ = function(param){return deduplicate(acc$0, attributes$1, k);};
           return caml_call4
                   (report,
                    l,
                    [0, -590381665, [0, n[2], cst_tag, cst_duplicate_attribute]],
                    throw$0[1],
                    _K_);
          }
          var
           acc$1 = [0, attr, acc$0],
           acc$0 = acc$1,
           attributes$0 = attributes$1;
         }
        }
        return deduplicate
                (0,
                 attributes,
                 function(attributes){
                  open_elements[1] =
                   [0, [0, l, expanded_name, raw_name], open_elements[1]];
                  return caml_call3
                          (emit,
                           l,
                           [0, 856096383, [0, expanded_name, attributes]],
                           state);
                 });
       }
       var _H_ = throw$0[1];
       function _I_(param){return caml_call1(report, l);}
       return caml_call6
               (Markup_Namespace[1][2],
                _I_,
                namespaces,
                raw_name,
                attributes,
                _H_,
                _G_);
      });
    caml_update_dummy
     (pop,
      function(l, state){
       var match = open_elements[1];
       if(! match) return caml_call1(state, 0);
       var more = match[2];
       caml_call1(Markup_Namespace[1][3], namespaces);
       open_elements[1] = more;
       return caml_call3(emit, l, 38565624, state);
      });
    caml_update_dummy
     (emit_end,
      function(param){
       current_state[1] = function(param){return caml_call1(ended[1], 0);};
       return caml_call1(ended[1], 0);
      });
    caml_update_dummy
     (initial_state,
      function(leading){
       function _C_(v){
        var match = v[2];
        if(typeof match !== "number"){
         var _E_ = match[1];
         if(-656339779 !== _E_){
          if(3455931 > _E_) return caml_call1(initial_state, [0, v, leading]);
          caml_call2(Markup_Kstream[8], tokens, v);
          var _F_ = caml_call1(Stdlib_List[10], leading);
          caml_call2(Markup_Kstream[10], tokens, _F_);
          return caml_call1(document_state, 0);
         }
         var s = match[2];
         if(is_whitespace_only(s))
          return caml_call1(initial_state, [0, v, leading]);
        }
        is_fragment[1] = 1;
        caml_call2(Markup_Kstream[8], tokens, v);
        var _D_ = caml_call1(Stdlib_List[10], leading);
        caml_call2(Markup_Kstream[10], tokens, _D_);
        return caml_call1(content_state, 0);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _C_);
      });
    caml_update_dummy
     (document_state,
      function(param){
       function _B_(v){
        var match = v[2];
        if(typeof match !== "number" && 4400567 === match[1]){
         var declaration = match[2], l = v[1];
         fragment_allowed[1] = 0;
         return caml_call3(emit, l, [0, 4400567, declaration], doctype_state);
        }
        caml_call2(Markup_Kstream[8], tokens, v);
        return caml_call1(doctype_state, 0);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _B_);
      });
    caml_update_dummy
     (doctype_state,
      function(param){
       function _z_(v){
        var match = v[2];
        if(typeof match !== "number"){
         var _A_ = match[1], l = v[1];
         if(17913 <= _A_){
          if(4400567 === _A_)
           return caml_call4(report, l, _a_, throw$0[1], doctype_state);
          if(990181650 === _A_){
           var d = match[2];
           fragment_allowed[1] = 0;
           return caml_call3(emit, l, [0, 990181650, d], root_state);
          }
          if(17914 > _A_){
           var s = match[2];
           return caml_call3(emit, l, [0, 17913, s], doctype_state);
          }
         }
         else{
          if(-826170817 === _A_){
           var s$0 = match[2];
           return caml_call3(emit, l, [0, -826170817, s$0], doctype_state);
          }
          if(-656339779 === _A_){
           var s$1 = match[2];
           return is_whitespace_only(s$1)
                   ? caml_call1(doctype_state, 0)
                   : caml_call4(report, l, _b_, throw$0[1], doctype_state);
          }
         }
        }
        caml_call2(Markup_Kstream[8], tokens, v);
        return caml_call1(root_state, 0);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _z_);
      });
    caml_update_dummy
     (root_state,
      function(param){
       function _x_(param){
        var l = param[1], match = param[2];
        if(typeof match === "number"){
         if(3448988 === match)
          return caml_call4(report, l, _c_, throw$0[1], emit_end);
        }
        else{
         var _y_ = match[1];
         if(17913 <= _y_){
          if(4400567 === _y_)
           return caml_call4(report, l, _e_, throw$0[1], root_state);
          if(389604418 === _y_){
           var t = match[2];
           return t[3]
                   ? caml_call3
                     (push_and_emit,
                      l,
                      t,
                      function(param){
                       return caml_call2(pop, l, after_root_state);
                      })
                   : caml_call3(push_and_emit, l, t, content_state);
          }
          if(17914 > _y_){
           var s = match[2];
           return caml_call3(emit, l, [0, 17913, s], root_state);
          }
         }
         else{
          if(-826170817 === _y_){
           var s$0 = match[2];
           return caml_call3(emit, l, [0, -826170817, s$0], root_state);
          }
          if(-656339779 === _y_){
           var s$1 = match[2];
           if(is_whitespace_only(s$1)) return caml_call1(root_state, 0);
          }
         }
        }
        return caml_call4(report, l, _d_, throw$0[1], root_state);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _x_);
      });
    caml_update_dummy
     (after_root_state,
      function(param){
       function _u_(v){
        var l = v[1], match = v[2];
        a:
        if(typeof match === "number"){
         if(3448988 === match) return caml_call1(emit_end, 0);
        }
        else{
         var _w_ = match[1];
         if(17913 <= _w_){
          if(3455931 !== _w_ && 389604418 !== _w_){
           if(17914 <= _w_) break a;
           var s = match[2];
           return caml_call3(emit, l, [0, 17913, s], after_root_state);
          }
         }
         else{
          if(-826170817 === _w_){
           var s$0 = match[2];
           return caml_call3(emit, l, [0, -826170817, s$0], after_root_state);
          }
          if(-656339779 !== _w_) break a;
          var s$1 = match[2];
          if(is_whitespace_only(s$1)) return caml_call1(after_root_state, 0);
         }
         if(fragment_allowed[1]){
          is_fragment[1] = 1;
          caml_call2(Markup_Kstream[8], tokens, v);
          return caml_call1(content_state, 0);
         }
        }
        function _v_(param){
         is_fragment[1] = 1;
         caml_call2(Markup_Kstream[8], tokens, v);
         return caml_call1(content_state, 0);
        }
        return caml_call4(report, l, _f_, throw$0[1], _v_);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _u_);
      });
    caml_update_dummy
     (content_state,
      function(param){
       function _j_(param){
        var match = param[2], l = param[1];
        if(typeof match === "number"){
         var
          pop_stack =
            function(param){
             var _s_ = open_elements[1];
             if(! _s_) return caml_call1(emit_end, 0);
             var match = _s_[1], raw_name = match[3], l$0 = match[1];
             function _t_(param){return caml_call2(pop, l, pop_stack);}
             return caml_call4
                     (report, l$0, [0, 551520201, raw_name], throw$0[1], _t_);
            };
         return pop_stack(0);
        }
        var _k_ = match[1];
        if(3455931 > _k_){
         if(-656339779 === _k_){
          var s = match[2];
          return caml_call3(emit, l, [0, 936573133, s], content_state);
         }
         if(17913 <= _k_){
          var s$0 = match[2];
          return caml_call3(emit, l, [0, 17913, s$0], content_state);
         }
         var s$1 = match[2];
         return caml_call3(emit, l, [0, -826170817, s$1], content_state);
        }
        if(389604418 <= _k_){
         if(990181650 <= _k_)
          return caml_call4(report, l, _g_, throw$0[1], content_state);
         var t = match[2];
         return t[3]
                 ? caml_call3
                   (push_and_emit,
                    l,
                    t,
                    function(param){return caml_call2(pop, l, content_state);})
                 : caml_call3(push_and_emit, l, t, content_state);
        }
        if(4400567 <= _k_)
         return caml_call4(report, l, _h_, throw$0[1], content_state);
        var raw_name = match[2][1];
        function _l_(expanded_name){
         var _o_ = open_elements[1];
         function _p_(param){
          var name = param[2];
          return caml_equal(name, expanded_name);
         }
         var is_on_stack = caml_call1(caml_call1(Stdlib_List[34], _p_), _o_);
         if(! is_on_stack)
          return caml_call4
                  (report,
                   l,
                   [0, -622351166, raw_name],
                   throw$0[1],
                   content_state);
         function pop_until_match(param){
          var _q_ = open_elements[1];
          if(! _q_) return caml_call1(Stdlib[2], cst_impossible);
          var match = _q_[1], l$0 = match[1], name = match[2];
          if(caml_equal(name, expanded_name))
           return caml_call2
                   (pop,
                    l,
                    function(param){
                     if(! open_elements[1] && ! is_fragment[1])
                      return caml_call1(after_root_state, 0);
                     return caml_call1(content_state, 0);
                    });
          var name$0 = match[3];
          function _r_(param){return caml_call2(pop, l, pop_until_match);}
          return caml_call4
                  (report, l$0, [0, 551520201, name$0], throw$0[1], _r_);
         }
         return pop_until_match(0);
        }
        var _m_ = throw$0[1];
        function _n_(param){return caml_call1(report, l);}
        return caml_call5
                (Markup_Namespace[1][4], _n_, namespaces, raw_name, _m_, _l_);
       }
       return caml_call3(Markup_Kstream[6], tokens, throw$0[1], _j_);
      });
    function _i_(throw$1, e, k){
     throw$0[1] = throw$1;
     ended[1] = e;
     output[1] = k;
     return caml_call1(current_state[1], 0);
    }
    return caml_call1(Markup_Kstream[1], _i_);
   }
   var Markup_Xml_parser = [0, parse];
   runtime.caml_register_global(16, Markup_Xml_parser, "Markup__Xml_parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Entities
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ecir = "ecir",
    cst_frac1 = "frac1",
    cst_ocir = "ocir",
    cst_ord = "ord",
    cst_par = "par",
    cst_sup = "sup",
    entities =
      [0,
        [0, "Aacute", [0, 3953222, 193]],
        [0, "Aacut", [0, 3953222, 193]],
        [0, "aacute", [0, 3953222, 225]],
        [0, "aacut", [0, 3953222, 225]],
        [0, "Abreve", [0, 3953222, 258]],
        [0, "abreve", [0, 3953222, 259]],
        [0, "ac", [0, 3953222, 8766]],
        [0, "acd", [0, 3953222, 8767]],
        [0, "acE", [0, 4203884, [0, 8766, 819]]],
        [0, "Acirc", [0, 3953222, 194]],
        [0, "Acir", [0, 3953222, 194]],
        [0, "acirc", [0, 3953222, 226]],
        [0, "acir", [0, 3953222, 226]],
        [0, "acute", [0, 3953222, 180]],
        [0, "acut", [0, 3953222, 180]],
        [0, "Acy", [0, 3953222, 1040]],
        [0, "acy", [0, 3953222, 1072]],
        [0, "AElig", [0, 3953222, 198]],
        [0, "AEli", [0, 3953222, 198]],
        [0, "aelig", [0, 3953222, 230]],
        [0, "aeli", [0, 3953222, 230]],
        [0, "af", [0, 3953222, 8289]],
        [0, "Afr", [0, 3953222, 120068]],
        [0, "afr", [0, 3953222, 120094]],
        [0, "Agrave", [0, 3953222, 192]],
        [0, "Agrav", [0, 3953222, 192]],
        [0, "agrave", [0, 3953222, 224]],
        [0, "agrav", [0, 3953222, 224]],
        [0, "alefsym", [0, 3953222, 8501]],
        [0, "aleph", [0, 3953222, 8501]],
        [0, "Alpha", [0, 3953222, 913]],
        [0, "alpha", [0, 3953222, 945]],
        [0, "Amacr", [0, 3953222, 256]],
        [0, "amacr", [0, 3953222, 257]],
        [0, "amalg", [0, 3953222, 10815]],
        [0, "AMP", [0, 3953222, 38]],
        [0, "AM", [0, 3953222, 38]],
        [0, "amp", [0, 3953222, 38]],
        [0, "am", [0, 3953222, 38]],
        [0, "And", [0, 3953222, 10835]],
        [0, "and", [0, 3953222, 8743]],
        [0, "andand", [0, 3953222, 10837]],
        [0, "andd", [0, 3953222, 10844]],
        [0, "andslope", [0, 3953222, 10840]],
        [0, "andv", [0, 3953222, 10842]],
        [0, "ang", [0, 3953222, 8736]],
        [0, "ange", [0, 3953222, 10660]],
        [0, "angle", [0, 3953222, 8736]],
        [0, "angmsd", [0, 3953222, 8737]],
        [0, "angmsdaa", [0, 3953222, 10664]],
        [0, "angmsdab", [0, 3953222, 10665]],
        [0, "angmsdac", [0, 3953222, 10666]],
        [0, "angmsdad", [0, 3953222, 10667]],
        [0, "angmsdae", [0, 3953222, 10668]],
        [0, "angmsdaf", [0, 3953222, 10669]],
        [0, "angmsdag", [0, 3953222, 10670]],
        [0, "angmsdah", [0, 3953222, 10671]],
        [0, "angrt", [0, 3953222, 8735]],
        [0, "angrtvb", [0, 3953222, 8894]],
        [0, "angrtvbd", [0, 3953222, 10653]],
        [0, "angsph", [0, 3953222, 8738]],
        [0, "angst", [0, 3953222, 197]],
        [0, "angzarr", [0, 3953222, 9084]],
        [0, "Aogon", [0, 3953222, 260]],
        [0, "aogon", [0, 3953222, 261]],
        [0, "Aopf", [0, 3953222, 120120]],
        [0, "aopf", [0, 3953222, 120146]],
        [0, "ap", [0, 3953222, 8776]],
        [0, "apacir", [0, 3953222, 10863]],
        [0, "apE", [0, 3953222, 10864]],
        [0, "ape", [0, 3953222, 8778]],
        [0, "apid", [0, 3953222, 8779]],
        [0, "apos", [0, 3953222, 39]],
        [0, "ApplyFunction", [0, 3953222, 8289]],
        [0, "approx", [0, 3953222, 8776]],
        [0, "approxeq", [0, 3953222, 8778]],
        [0, "Aring", [0, 3953222, 197]],
        [0, "Arin", [0, 3953222, 197]],
        [0, "aring", [0, 3953222, 229]],
        [0, "arin", [0, 3953222, 229]],
        [0, "Ascr", [0, 3953222, 119964]],
        [0, "ascr", [0, 3953222, 119990]],
        [0, "Assign", [0, 3953222, 8788]],
        [0, "ast", [0, 3953222, 42]],
        [0, "asymp", [0, 3953222, 8776]],
        [0, "asympeq", [0, 3953222, 8781]],
        [0, "Atilde", [0, 3953222, 195]],
        [0, "Atild", [0, 3953222, 195]],
        [0, "atilde", [0, 3953222, 227]],
        [0, "atild", [0, 3953222, 227]],
        [0, "Auml", [0, 3953222, 196]],
        [0, "Aum", [0, 3953222, 196]],
        [0, "auml", [0, 3953222, 228]],
        [0, "aum", [0, 3953222, 228]],
        [0, "awconint", [0, 3953222, 8755]],
        [0, "awint", [0, 3953222, 10769]],
        [0, "backcong", [0, 3953222, 8780]],
        [0, "backepsilon", [0, 3953222, 1014]],
        [0, "backprime", [0, 3953222, 8245]],
        [0, "backsim", [0, 3953222, 8765]],
        [0, "backsimeq", [0, 3953222, 8909]],
        [0, "Backslash", [0, 3953222, 8726]],
        [0, "Barv", [0, 3953222, 10983]],
        [0, "barvee", [0, 3953222, 8893]],
        [0, "Barwed", [0, 3953222, 8966]],
        [0, "barwed", [0, 3953222, 8965]],
        [0, "barwedge", [0, 3953222, 8965]],
        [0, "bbrk", [0, 3953222, 9141]],
        [0, "bbrktbrk", [0, 3953222, 9142]],
        [0, "bcong", [0, 3953222, 8780]],
        [0, "Bcy", [0, 3953222, 1041]],
        [0, "bcy", [0, 3953222, 1073]],
        [0, "bdquo", [0, 3953222, 8222]],
        [0, "becaus", [0, 3953222, 8757]],
        [0, "Because", [0, 3953222, 8757]],
        [0, "because", [0, 3953222, 8757]],
        [0, "bemptyv", [0, 3953222, 10672]],
        [0, "bepsi", [0, 3953222, 1014]],
        [0, "bernou", [0, 3953222, 8492]],
        [0, "Bernoullis", [0, 3953222, 8492]],
        [0, "Beta", [0, 3953222, 914]],
        [0, "beta", [0, 3953222, 946]],
        [0, "beth", [0, 3953222, 8502]],
        [0, "between", [0, 3953222, 8812]],
        [0, "Bfr", [0, 3953222, 120069]],
        [0, "bfr", [0, 3953222, 120095]],
        [0, "bigcap", [0, 3953222, 8898]],
        [0, "bigcirc", [0, 3953222, 9711]],
        [0, "bigcup", [0, 3953222, 8899]],
        [0, "bigodot", [0, 3953222, 10752]],
        [0, "bigoplus", [0, 3953222, 10753]],
        [0, "bigotimes", [0, 3953222, 10754]],
        [0, "bigsqcup", [0, 3953222, 10758]],
        [0, "bigstar", [0, 3953222, 9733]],
        [0, "bigtriangledown", [0, 3953222, 9661]],
        [0, "bigtriangleup", [0, 3953222, 9651]],
        [0, "biguplus", [0, 3953222, 10756]],
        [0, "bigvee", [0, 3953222, 8897]],
        [0, "bigwedge", [0, 3953222, 8896]],
        [0, "bkarow", [0, 3953222, 10509]],
        [0, "blacklozenge", [0, 3953222, 10731]],
        [0, "blacksquare", [0, 3953222, 9642]],
        [0, "blacktriangle", [0, 3953222, 9652]],
        [0, "blacktriangledown", [0, 3953222, 9662]],
        [0, "blacktriangleleft", [0, 3953222, 9666]],
        [0, "blacktriangleright", [0, 3953222, 9656]],
        [0, "blank", [0, 3953222, 9251]],
        [0, "blk12", [0, 3953222, 9618]],
        [0, "blk14", [0, 3953222, 9617]],
        [0, "blk34", [0, 3953222, 9619]],
        [0, "block", [0, 3953222, 9608]],
        [0, "bne", [0, 4203884, [0, 61, 8421]]],
        [0, "bnequiv", [0, 4203884, [0, 8801, 8421]]],
        [0, "bNot", [0, 3953222, 10989]],
        [0, "bnot", [0, 3953222, 8976]],
        [0, "Bopf", [0, 3953222, 120121]],
        [0, "bopf", [0, 3953222, 120147]],
        [0, "bot", [0, 3953222, 8869]],
        [0, "bottom", [0, 3953222, 8869]],
        [0, "bowtie", [0, 3953222, 8904]],
        [0, "boxbox", [0, 3953222, 10697]],
        [0, "boxDL", [0, 3953222, 9559]],
        [0, "boxDl", [0, 3953222, 9558]],
        [0, "boxdL", [0, 3953222, 9557]],
        [0, "boxdl", [0, 3953222, 9488]],
        [0, "boxDR", [0, 3953222, 9556]],
        [0, "boxDr", [0, 3953222, 9555]],
        [0, "boxdR", [0, 3953222, 9554]],
        [0, "boxdr", [0, 3953222, 9484]],
        [0, "boxH", [0, 3953222, 9552]],
        [0, "boxh", [0, 3953222, 9472]],
        [0, "boxHD", [0, 3953222, 9574]],
        [0, "boxHd", [0, 3953222, 9572]],
        [0, "boxhD", [0, 3953222, 9573]],
        [0, "boxhd", [0, 3953222, 9516]],
        [0, "boxHU", [0, 3953222, 9577]],
        [0, "boxHu", [0, 3953222, 9575]],
        [0, "boxhU", [0, 3953222, 9576]],
        [0, "boxhu", [0, 3953222, 9524]],
        [0, "boxminus", [0, 3953222, 8863]],
        [0, "boxplus", [0, 3953222, 8862]],
        [0, "boxtimes", [0, 3953222, 8864]],
        [0, "boxUL", [0, 3953222, 9565]],
        [0, "boxUl", [0, 3953222, 9564]],
        [0, "boxuL", [0, 3953222, 9563]],
        [0, "boxul", [0, 3953222, 9496]],
        [0, "boxUR", [0, 3953222, 9562]],
        [0, "boxUr", [0, 3953222, 9561]],
        [0, "boxuR", [0, 3953222, 9560]],
        [0, "boxur", [0, 3953222, 9492]],
        [0, "boxV", [0, 3953222, 9553]],
        [0, "boxv", [0, 3953222, 9474]],
        [0, "boxVH", [0, 3953222, 9580]],
        [0, "boxVh", [0, 3953222, 9579]],
        [0, "boxvH", [0, 3953222, 9578]],
        [0, "boxvh", [0, 3953222, 9532]],
        [0, "boxVL", [0, 3953222, 9571]],
        [0, "boxVl", [0, 3953222, 9570]],
        [0, "boxvL", [0, 3953222, 9569]],
        [0, "boxvl", [0, 3953222, 9508]],
        [0, "boxVR", [0, 3953222, 9568]],
        [0, "boxVr", [0, 3953222, 9567]],
        [0, "boxvR", [0, 3953222, 9566]],
        [0, "boxvr", [0, 3953222, 9500]],
        [0, "bprime", [0, 3953222, 8245]],
        [0, "Breve", [0, 3953222, 728]],
        [0, "breve", [0, 3953222, 728]],
        [0, "brvbar", [0, 3953222, 166]],
        [0, "brvba", [0, 3953222, 166]],
        [0, "Bscr", [0, 3953222, 8492]],
        [0, "bscr", [0, 3953222, 119991]],
        [0, "bsemi", [0, 3953222, 8271]],
        [0, "bsim", [0, 3953222, 8765]],
        [0, "bsime", [0, 3953222, 8909]],
        [0, "bsol", [0, 3953222, 92]],
        [0, "bsolb", [0, 3953222, 10693]],
        [0, "bsolhsub", [0, 3953222, 10184]],
        [0, "bull", [0, 3953222, 8226]],
        [0, "bullet", [0, 3953222, 8226]],
        [0, "bump", [0, 3953222, 8782]],
        [0, "bumpE", [0, 3953222, 10926]],
        [0, "bumpe", [0, 3953222, 8783]],
        [0, "Bumpeq", [0, 3953222, 8782]],
        [0, "bumpeq", [0, 3953222, 8783]],
        [0, "Cacute", [0, 3953222, 262]],
        [0, "cacute", [0, 3953222, 263]],
        [0, "Cap", [0, 3953222, 8914]],
        [0, "cap", [0, 3953222, 8745]],
        [0, "capand", [0, 3953222, 10820]],
        [0, "capbrcup", [0, 3953222, 10825]],
        [0, "capcap", [0, 3953222, 10827]],
        [0, "capcup", [0, 3953222, 10823]],
        [0, "capdot", [0, 3953222, 10816]],
        [0, "CapitalDifferentialD", [0, 3953222, 8517]],
        [0, "caps", [0, 4203884, [0, 8745, 65024]]],
        [0, "caret", [0, 3953222, 8257]],
        [0, "caron", [0, 3953222, 711]],
        [0, "Cayleys", [0, 3953222, 8493]],
        [0, "ccaps", [0, 3953222, 10829]],
        [0, "Ccaron", [0, 3953222, 268]],
        [0, "ccaron", [0, 3953222, 269]],
        [0, "Ccedil", [0, 3953222, 199]],
        [0, "Ccedi", [0, 3953222, 199]],
        [0, "ccedil", [0, 3953222, 231]],
        [0, "ccedi", [0, 3953222, 231]],
        [0, "Ccirc", [0, 3953222, 264]],
        [0, "ccirc", [0, 3953222, 265]],
        [0, "Cconint", [0, 3953222, 8752]],
        [0, "ccups", [0, 3953222, 10828]],
        [0, "ccupssm", [0, 3953222, 10832]],
        [0, "Cdot", [0, 3953222, 266]],
        [0, "cdot", [0, 3953222, 267]],
        [0, "cedil", [0, 3953222, 184]],
        [0, "cedi", [0, 3953222, 184]],
        [0, "Cedilla", [0, 3953222, 184]],
        [0, "cemptyv", [0, 3953222, 10674]],
        [0, "cent", [0, 3953222, 162]],
        [0, "cen", [0, 3953222, 162]],
        [0, "CenterDot", [0, 3953222, 183]],
        [0, "centerdot", [0, 3953222, 183]],
        [0, "Cfr", [0, 3953222, 8493]],
        [0, "cfr", [0, 3953222, 120096]],
        [0, "CHcy", [0, 3953222, 1063]],
        [0, "chcy", [0, 3953222, 1095]],
        [0, "check", [0, 3953222, 10003]],
        [0, "checkmark", [0, 3953222, 10003]],
        [0, "Chi", [0, 3953222, 935]],
        [0, "chi", [0, 3953222, 967]],
        [0, "cir", [0, 3953222, 9675]],
        [0, "circ", [0, 3953222, 710]],
        [0, "circeq", [0, 3953222, 8791]],
        [0, "circlearrowleft", [0, 3953222, 8634]],
        [0, "circlearrowright", [0, 3953222, 8635]],
        [0, "circledast", [0, 3953222, 8859]],
        [0, "circledcirc", [0, 3953222, 8858]],
        [0, "circleddash", [0, 3953222, 8861]],
        [0, "CircleDot", [0, 3953222, 8857]],
        [0, "circledR", [0, 3953222, 174]],
        [0, "circledS", [0, 3953222, 9416]],
        [0, "CircleMinus", [0, 3953222, 8854]],
        [0, "CirclePlus", [0, 3953222, 8853]],
        [0, "CircleTimes", [0, 3953222, 8855]],
        [0, "cirE", [0, 3953222, 10691]],
        [0, "cire", [0, 3953222, 8791]],
        [0, "cirfnint", [0, 3953222, 10768]],
        [0, "cirmid", [0, 3953222, 10991]],
        [0, "cirscir", [0, 3953222, 10690]],
        [0, "ClockwiseContourIntegral", [0, 3953222, 8754]],
        [0, "CloseCurlyDoubleQuote", [0, 3953222, 8221]],
        [0, "CloseCurlyQuote", [0, 3953222, 8217]],
        [0, "clubs", [0, 3953222, 9827]],
        [0, "clubsuit", [0, 3953222, 9827]],
        [0, "Colon", [0, 3953222, 8759]],
        [0, "colon", [0, 3953222, 58]],
        [0, "Colone", [0, 3953222, 10868]],
        [0, "colone", [0, 3953222, 8788]],
        [0, "coloneq", [0, 3953222, 8788]],
        [0, "comma", [0, 3953222, 44]],
        [0, "commat", [0, 3953222, 64]],
        [0, "comp", [0, 3953222, 8705]],
        [0, "compfn", [0, 3953222, 8728]],
        [0, "complement", [0, 3953222, 8705]],
        [0, "complexes", [0, 3953222, 8450]],
        [0, "cong", [0, 3953222, 8773]],
        [0, "congdot", [0, 3953222, 10861]],
        [0, "Congruent", [0, 3953222, 8801]],
        [0, "Conint", [0, 3953222, 8751]],
        [0, "conint", [0, 3953222, 8750]],
        [0, "ContourIntegral", [0, 3953222, 8750]],
        [0, "Copf", [0, 3953222, 8450]],
        [0, "copf", [0, 3953222, 120148]],
        [0, "coprod", [0, 3953222, 8720]],
        [0, "Coproduct", [0, 3953222, 8720]],
        [0, "COPY", [0, 3953222, 169]],
        [0, "COP", [0, 3953222, 169]],
        [0, "copy", [0, 3953222, 169]],
        [0, "cop", [0, 3953222, 169]],
        [0, "copysr", [0, 3953222, 8471]],
        [0, "CounterClockwiseContourIntegral", [0, 3953222, 8755]],
        [0, "crarr", [0, 3953222, 8629]],
        [0, "Cross", [0, 3953222, 10799]],
        [0, "cross", [0, 3953222, 10007]],
        [0, "Cscr", [0, 3953222, 119966]],
        [0, "cscr", [0, 3953222, 119992]],
        [0, "csub", [0, 3953222, 10959]],
        [0, "csube", [0, 3953222, 10961]],
        [0, "csup", [0, 3953222, 10960]],
        [0, "csupe", [0, 3953222, 10962]],
        [0, "ctdot", [0, 3953222, 8943]],
        [0, "cudarrl", [0, 3953222, 10552]],
        [0, "cudarrr", [0, 3953222, 10549]],
        [0, "cuepr", [0, 3953222, 8926]],
        [0, "cuesc", [0, 3953222, 8927]],
        [0, "cularr", [0, 3953222, 8630]],
        [0, "cularrp", [0, 3953222, 10557]],
        [0, "Cup", [0, 3953222, 8915]],
        [0, "cup", [0, 3953222, 8746]],
        [0, "cupbrcap", [0, 3953222, 10824]],
        [0, "CupCap", [0, 3953222, 8781]],
        [0, "cupcap", [0, 3953222, 10822]],
        [0, "cupcup", [0, 3953222, 10826]],
        [0, "cupdot", [0, 3953222, 8845]],
        [0, "cupor", [0, 3953222, 10821]],
        [0, "cups", [0, 4203884, [0, 8746, 65024]]],
        [0, "curarr", [0, 3953222, 8631]],
        [0, "curarrm", [0, 3953222, 10556]],
        [0, "curlyeqprec", [0, 3953222, 8926]],
        [0, "curlyeqsucc", [0, 3953222, 8927]],
        [0, "curlyvee", [0, 3953222, 8910]],
        [0, "curlywedge", [0, 3953222, 8911]],
        [0, "curren", [0, 3953222, 164]],
        [0, "curre", [0, 3953222, 164]],
        [0, "curvearrowleft", [0, 3953222, 8630]],
        [0, "curvearrowright", [0, 3953222, 8631]],
        [0, "cuvee", [0, 3953222, 8910]],
        [0, "cuwed", [0, 3953222, 8911]],
        [0, "cwconint", [0, 3953222, 8754]],
        [0, "cwint", [0, 3953222, 8753]],
        [0, "cylcty", [0, 3953222, 9005]],
        [0, "Dagger", [0, 3953222, 8225]],
        [0, "dagger", [0, 3953222, 8224]],
        [0, "daleth", [0, 3953222, 8504]],
        [0, "Darr", [0, 3953222, 8609]],
        [0, "dArr", [0, 3953222, 8659]],
        [0, "darr", [0, 3953222, 8595]],
        [0, "dash", [0, 3953222, 8208]],
        [0, "Dashv", [0, 3953222, 10980]],
        [0, "dashv", [0, 3953222, 8867]],
        [0, "dbkarow", [0, 3953222, 10511]],
        [0, "dblac", [0, 3953222, 733]],
        [0, "Dcaron", [0, 3953222, 270]],
        [0, "dcaron", [0, 3953222, 271]],
        [0, "Dcy", [0, 3953222, 1044]],
        [0, "dcy", [0, 3953222, 1076]],
        [0, "DD", [0, 3953222, 8517]],
        [0, "dd", [0, 3953222, 8518]],
        [0, "ddagger", [0, 3953222, 8225]],
        [0, "ddarr", [0, 3953222, 8650]],
        [0, "DDotrahd", [0, 3953222, 10513]],
        [0, "ddotseq", [0, 3953222, 10871]],
        [0, "deg", [0, 3953222, 176]],
        [0, "de", [0, 3953222, 176]],
        [0, "Del", [0, 3953222, 8711]],
        [0, "Delta", [0, 3953222, 916]],
        [0, "delta", [0, 3953222, 948]],
        [0, "demptyv", [0, 3953222, 10673]],
        [0, "dfisht", [0, 3953222, 10623]],
        [0, "Dfr", [0, 3953222, 120071]],
        [0, "dfr", [0, 3953222, 120097]],
        [0, "dHar", [0, 3953222, 10597]],
        [0, "dharl", [0, 3953222, 8643]],
        [0, "dharr", [0, 3953222, 8642]],
        [0, "DiacriticalAcute", [0, 3953222, 180]],
        [0, "DiacriticalDot", [0, 3953222, 729]],
        [0, "DiacriticalDoubleAcute", [0, 3953222, 733]],
        [0, "DiacriticalGrave", [0, 3953222, 96]],
        [0, "DiacriticalTilde", [0, 3953222, 732]],
        [0, "diam", [0, 3953222, 8900]],
        [0, "Diamond", [0, 3953222, 8900]],
        [0, "diamond", [0, 3953222, 8900]],
        [0, "diamondsuit", [0, 3953222, 9830]],
        [0, "diams", [0, 3953222, 9830]],
        [0, "die", [0, 3953222, 168]],
        [0, "DifferentialD", [0, 3953222, 8518]],
        [0, "digamma", [0, 3953222, 989]],
        [0, "disin", [0, 3953222, 8946]],
        [0, "div", [0, 3953222, 247]],
        [0, "divide", [0, 3953222, 247]],
        [0, "divid", [0, 3953222, 247]],
        [0, "divideontimes", [0, 3953222, 8903]],
        [0, "divonx", [0, 3953222, 8903]],
        [0, "DJcy", [0, 3953222, 1026]],
        [0, "djcy", [0, 3953222, 1106]],
        [0, "dlcorn", [0, 3953222, 8990]],
        [0, "dlcrop", [0, 3953222, 8973]],
        [0, "dollar", [0, 3953222, 36]],
        [0, "Dopf", [0, 3953222, 120123]],
        [0, "dopf", [0, 3953222, 120149]],
        [0, "Dot", [0, 3953222, 168]],
        [0, "dot", [0, 3953222, 729]],
        [0, "DotDot", [0, 3953222, 8412]],
        [0, "doteq", [0, 3953222, 8784]],
        [0, "doteqdot", [0, 3953222, 8785]],
        [0, "DotEqual", [0, 3953222, 8784]],
        [0, "dotminus", [0, 3953222, 8760]],
        [0, "dotplus", [0, 3953222, 8724]],
        [0, "dotsquare", [0, 3953222, 8865]],
        [0, "doublebarwedge", [0, 3953222, 8966]],
        [0, "DoubleContourIntegral", [0, 3953222, 8751]],
        [0, "DoubleDot", [0, 3953222, 168]],
        [0, "DoubleDownArrow", [0, 3953222, 8659]],
        [0, "DoubleLeftArrow", [0, 3953222, 8656]],
        [0, "DoubleLeftRightArrow", [0, 3953222, 8660]],
        [0, "DoubleLeftTee", [0, 3953222, 10980]],
        [0, "DoubleLongLeftArrow", [0, 3953222, 10232]],
        [0, "DoubleLongLeftRightArrow", [0, 3953222, 10234]],
        [0, "DoubleLongRightArrow", [0, 3953222, 10233]],
        [0, "DoubleRightArrow", [0, 3953222, 8658]],
        [0, "DoubleRightTee", [0, 3953222, 8872]],
        [0, "DoubleUpArrow", [0, 3953222, 8657]],
        [0, "DoubleUpDownArrow", [0, 3953222, 8661]],
        [0, "DoubleVerticalBar", [0, 3953222, 8741]],
        [0, "DownArrow", [0, 3953222, 8595]],
        [0, "Downarrow", [0, 3953222, 8659]],
        [0, "downarrow", [0, 3953222, 8595]],
        [0, "DownArrowBar", [0, 3953222, 10515]],
        [0, "DownArrowUpArrow", [0, 3953222, 8693]],
        [0, "DownBreve", [0, 3953222, 785]],
        [0, "downdownarrows", [0, 3953222, 8650]],
        [0, "downharpoonleft", [0, 3953222, 8643]],
        [0, "downharpoonright", [0, 3953222, 8642]],
        [0, "DownLeftRightVector", [0, 3953222, 10576]],
        [0, "DownLeftTeeVector", [0, 3953222, 10590]],
        [0, "DownLeftVector", [0, 3953222, 8637]],
        [0, "DownLeftVectorBar", [0, 3953222, 10582]],
        [0, "DownRightTeeVector", [0, 3953222, 10591]],
        [0, "DownRightVector", [0, 3953222, 8641]],
        [0, "DownRightVectorBar", [0, 3953222, 10583]],
        [0, "DownTee", [0, 3953222, 8868]],
        [0, "DownTeeArrow", [0, 3953222, 8615]],
        [0, "drbkarow", [0, 3953222, 10512]],
        [0, "drcorn", [0, 3953222, 8991]],
        [0, "drcrop", [0, 3953222, 8972]],
        [0, "Dscr", [0, 3953222, 119967]],
        [0, "dscr", [0, 3953222, 119993]],
        [0, "DScy", [0, 3953222, 1029]],
        [0, "dscy", [0, 3953222, 1109]],
        [0, "dsol", [0, 3953222, 10742]],
        [0, "Dstrok", [0, 3953222, 272]],
        [0, "dstrok", [0, 3953222, 273]],
        [0, "dtdot", [0, 3953222, 8945]],
        [0, "dtri", [0, 3953222, 9663]],
        [0, "dtrif", [0, 3953222, 9662]],
        [0, "duarr", [0, 3953222, 8693]],
        [0, "duhar", [0, 3953222, 10607]],
        [0, "dwangle", [0, 3953222, 10662]],
        [0, "DZcy", [0, 3953222, 1039]],
        [0, "dzcy", [0, 3953222, 1119]],
        [0, "dzigrarr", [0, 3953222, 10239]],
        [0, "Eacute", [0, 3953222, 201]],
        [0, "Eacut", [0, 3953222, 201]],
        [0, "eacute", [0, 3953222, 233]],
        [0, "eacut", [0, 3953222, 233]],
        [0, "easter", [0, 3953222, 10862]],
        [0, "Ecaron", [0, 3953222, 282]],
        [0, "ecaron", [0, 3953222, 283]],
        [0, cst_ecir, [0, 3953222, 8790]],
        [0, "Ecirc", [0, 3953222, 202]],
        [0, "Ecir", [0, 3953222, 202]],
        [0, "ecirc", [0, 3953222, 234]],
        [0, cst_ecir, [0, 3953222, 234]],
        [0, "ecolon", [0, 3953222, 8789]],
        [0, "Ecy", [0, 3953222, 1069]],
        [0, "ecy", [0, 3953222, 1101]],
        [0, "eDDot", [0, 3953222, 10871]],
        [0, "Edot", [0, 3953222, 278]],
        [0, "eDot", [0, 3953222, 8785]],
        [0, "edot", [0, 3953222, 279]],
        [0, "ee", [0, 3953222, 8519]],
        [0, "efDot", [0, 3953222, 8786]],
        [0, "Efr", [0, 3953222, 120072]],
        [0, "efr", [0, 3953222, 120098]],
        [0, "eg", [0, 3953222, 10906]],
        [0, "Egrave", [0, 3953222, 200]],
        [0, "Egrav", [0, 3953222, 200]],
        [0, "egrave", [0, 3953222, 232]],
        [0, "egrav", [0, 3953222, 232]],
        [0, "egs", [0, 3953222, 10902]],
        [0, "egsdot", [0, 3953222, 10904]],
        [0, "el", [0, 3953222, 10905]],
        [0, "Element", [0, 3953222, 8712]],
        [0, "elinters", [0, 3953222, 9191]],
        [0, "ell", [0, 3953222, 8467]],
        [0, "els", [0, 3953222, 10901]],
        [0, "elsdot", [0, 3953222, 10903]],
        [0, "Emacr", [0, 3953222, 274]],
        [0, "emacr", [0, 3953222, 275]],
        [0, "empty", [0, 3953222, 8709]],
        [0, "emptyset", [0, 3953222, 8709]],
        [0, "EmptySmallSquare", [0, 3953222, 9723]],
        [0, "emptyv", [0, 3953222, 8709]],
        [0, "EmptyVerySmallSquare", [0, 3953222, 9643]],
        [0, "emsp", [0, 3953222, 8195]],
        [0, "emsp13", [0, 3953222, 8196]],
        [0, "emsp14", [0, 3953222, 8197]],
        [0, "ENG", [0, 3953222, 330]],
        [0, "eng", [0, 3953222, 331]],
        [0, "ensp", [0, 3953222, 8194]],
        [0, "Eogon", [0, 3953222, 280]],
        [0, "eogon", [0, 3953222, 281]],
        [0, "Eopf", [0, 3953222, 120124]],
        [0, "eopf", [0, 3953222, 120150]],
        [0, "epar", [0, 3953222, 8917]],
        [0, "eparsl", [0, 3953222, 10723]],
        [0, "eplus", [0, 3953222, 10865]],
        [0, "epsi", [0, 3953222, 949]],
        [0, "Epsilon", [0, 3953222, 917]],
        [0, "epsilon", [0, 3953222, 949]],
        [0, "epsiv", [0, 3953222, 1013]],
        [0, "eqcirc", [0, 3953222, 8790]],
        [0, "eqcolon", [0, 3953222, 8789]],
        [0, "eqsim", [0, 3953222, 8770]],
        [0, "eqslantgtr", [0, 3953222, 10902]],
        [0, "eqslantless", [0, 3953222, 10901]],
        [0, "Equal", [0, 3953222, 10869]],
        [0, "equals", [0, 3953222, 61]],
        [0, "EqualTilde", [0, 3953222, 8770]],
        [0, "equest", [0, 3953222, 8799]],
        [0, "Equilibrium", [0, 3953222, 8652]],
        [0, "equiv", [0, 3953222, 8801]],
        [0, "equivDD", [0, 3953222, 10872]],
        [0, "eqvparsl", [0, 3953222, 10725]],
        [0, "erarr", [0, 3953222, 10609]],
        [0, "erDot", [0, 3953222, 8787]],
        [0, "Escr", [0, 3953222, 8496]],
        [0, "escr", [0, 3953222, 8495]],
        [0, "esdot", [0, 3953222, 8784]],
        [0, "Esim", [0, 3953222, 10867]],
        [0, "esim", [0, 3953222, 8770]],
        [0, "Eta", [0, 3953222, 919]],
        [0, "eta", [0, 3953222, 951]],
        [0, "ETH", [0, 3953222, 208]],
        [0, "ET", [0, 3953222, 208]],
        [0, "eth", [0, 3953222, 240]],
        [0, "et", [0, 3953222, 240]],
        [0, "Euml", [0, 3953222, 203]],
        [0, "Eum", [0, 3953222, 203]],
        [0, "euml", [0, 3953222, 235]],
        [0, "eum", [0, 3953222, 235]],
        [0, "euro", [0, 3953222, 8364]],
        [0, "excl", [0, 3953222, 33]],
        [0, "exist", [0, 3953222, 8707]],
        [0, "Exists", [0, 3953222, 8707]],
        [0, "expectation", [0, 3953222, 8496]],
        [0, "ExponentialE", [0, 3953222, 8519]],
        [0, "exponentiale", [0, 3953222, 8519]],
        [0, "fallingdotseq", [0, 3953222, 8786]],
        [0, "Fcy", [0, 3953222, 1060]],
        [0, "fcy", [0, 3953222, 1092]],
        [0, "female", [0, 3953222, 9792]],
        [0, "ffilig", [0, 3953222, 64259]],
        [0, "fflig", [0, 3953222, 64256]],
        [0, "ffllig", [0, 3953222, 64260]],
        [0, "Ffr", [0, 3953222, 120073]],
        [0, "ffr", [0, 3953222, 120099]],
        [0, "filig", [0, 3953222, 64257]],
        [0, "FilledSmallSquare", [0, 3953222, 9724]],
        [0, "FilledVerySmallSquare", [0, 3953222, 9642]],
        [0, "fjlig", [0, 4203884, [0, 102, 106]]],
        [0, "flat", [0, 3953222, 9837]],
        [0, "fllig", [0, 3953222, 64258]],
        [0, "fltns", [0, 3953222, 9649]],
        [0, "fnof", [0, 3953222, 402]],
        [0, "Fopf", [0, 3953222, 120125]],
        [0, "fopf", [0, 3953222, 120151]],
        [0, "ForAll", [0, 3953222, 8704]],
        [0, "forall", [0, 3953222, 8704]],
        [0, "fork", [0, 3953222, 8916]],
        [0, "forkv", [0, 3953222, 10969]],
        [0, "Fouriertrf", [0, 3953222, 8497]],
        [0, "fpartint", [0, 3953222, 10765]],
        [0, "frac12", [0, 3953222, 189]],
        [0, cst_frac1, [0, 3953222, 189]],
        [0, "frac13", [0, 3953222, 8531]],
        [0, "frac14", [0, 3953222, 188]],
        [0, cst_frac1, [0, 3953222, 188]],
        [0, "frac15", [0, 3953222, 8533]],
        [0, "frac16", [0, 3953222, 8537]],
        [0, "frac18", [0, 3953222, 8539]],
        [0, "frac23", [0, 3953222, 8532]],
        [0, "frac25", [0, 3953222, 8534]],
        [0, "frac34", [0, 3953222, 190]],
        [0, "frac3", [0, 3953222, 190]],
        [0, "frac35", [0, 3953222, 8535]],
        [0, "frac38", [0, 3953222, 8540]],
        [0, "frac45", [0, 3953222, 8536]],
        [0, "frac56", [0, 3953222, 8538]],
        [0, "frac58", [0, 3953222, 8541]],
        [0, "frac78", [0, 3953222, 8542]],
        [0, "frasl", [0, 3953222, 8260]],
        [0, "frown", [0, 3953222, 8994]],
        [0, "Fscr", [0, 3953222, 8497]],
        [0, "fscr", [0, 3953222, 119995]],
        [0, "gacute", [0, 3953222, 501]],
        [0, "Gamma", [0, 3953222, 915]],
        [0, "gamma", [0, 3953222, 947]],
        [0, "Gammad", [0, 3953222, 988]],
        [0, "gammad", [0, 3953222, 989]],
        [0, "gap", [0, 3953222, 10886]],
        [0, "Gbreve", [0, 3953222, 286]],
        [0, "gbreve", [0, 3953222, 287]],
        [0, "Gcedil", [0, 3953222, 290]],
        [0, "Gcirc", [0, 3953222, 284]],
        [0, "gcirc", [0, 3953222, 285]],
        [0, "Gcy", [0, 3953222, 1043]],
        [0, "gcy", [0, 3953222, 1075]],
        [0, "Gdot", [0, 3953222, 288]],
        [0, "gdot", [0, 3953222, 289]],
        [0, "gE", [0, 3953222, 8807]],
        [0, "ge", [0, 3953222, 8805]],
        [0, "gEl", [0, 3953222, 10892]],
        [0, "gel", [0, 3953222, 8923]],
        [0, "geq", [0, 3953222, 8805]],
        [0, "geqq", [0, 3953222, 8807]],
        [0, "geqslant", [0, 3953222, 10878]],
        [0, "ges", [0, 3953222, 10878]],
        [0, "gescc", [0, 3953222, 10921]],
        [0, "gesdot", [0, 3953222, 10880]],
        [0, "gesdoto", [0, 3953222, 10882]],
        [0, "gesdotol", [0, 3953222, 10884]],
        [0, "gesl", [0, 4203884, [0, 8923, 65024]]],
        [0, "gesles", [0, 3953222, 10900]],
        [0, "Gfr", [0, 3953222, 120074]],
        [0, "gfr", [0, 3953222, 120100]],
        [0, "Gg", [0, 3953222, 8921]],
        [0, "gg", [0, 3953222, 8811]],
        [0, "ggg", [0, 3953222, 8921]],
        [0, "gimel", [0, 3953222, 8503]],
        [0, "GJcy", [0, 3953222, 1027]],
        [0, "gjcy", [0, 3953222, 1107]],
        [0, "gl", [0, 3953222, 8823]],
        [0, "gla", [0, 3953222, 10917]],
        [0, "glE", [0, 3953222, 10898]],
        [0, "glj", [0, 3953222, 10916]],
        [0, "gnap", [0, 3953222, 10890]],
        [0, "gnapprox", [0, 3953222, 10890]],
        [0, "gnE", [0, 3953222, 8809]],
        [0, "gne", [0, 3953222, 10888]],
        [0, "gneq", [0, 3953222, 10888]],
        [0, "gneqq", [0, 3953222, 8809]],
        [0, "gnsim", [0, 3953222, 8935]],
        [0, "Gopf", [0, 3953222, 120126]],
        [0, "gopf", [0, 3953222, 120152]],
        [0, "grave", [0, 3953222, 96]],
        [0, "GreaterEqual", [0, 3953222, 8805]],
        [0, "GreaterEqualLess", [0, 3953222, 8923]],
        [0, "GreaterFullEqual", [0, 3953222, 8807]],
        [0, "GreaterGreater", [0, 3953222, 10914]],
        [0, "GreaterLess", [0, 3953222, 8823]],
        [0, "GreaterSlantEqual", [0, 3953222, 10878]],
        [0, "GreaterTilde", [0, 3953222, 8819]],
        [0, "Gscr", [0, 3953222, 119970]],
        [0, "gscr", [0, 3953222, 8458]],
        [0, "gsim", [0, 3953222, 8819]],
        [0, "gsime", [0, 3953222, 10894]],
        [0, "gsiml", [0, 3953222, 10896]],
        [0, "GT", [0, 3953222, 62]],
        [0, "G", [0, 3953222, 62]],
        [0, "Gt", [0, 3953222, 8811]],
        [0, "gt", [0, 3953222, 62]],
        [0, "g", [0, 3953222, 62]],
        [0, "gtcc", [0, 3953222, 10919]],
        [0, "gtcir", [0, 3953222, 10874]],
        [0, "gtdot", [0, 3953222, 8919]],
        [0, "gtlPar", [0, 3953222, 10645]],
        [0, "gtquest", [0, 3953222, 10876]],
        [0, "gtrapprox", [0, 3953222, 10886]],
        [0, "gtrarr", [0, 3953222, 10616]],
        [0, "gtrdot", [0, 3953222, 8919]],
        [0, "gtreqless", [0, 3953222, 8923]],
        [0, "gtreqqless", [0, 3953222, 10892]],
        [0, "gtrless", [0, 3953222, 8823]],
        [0, "gtrsim", [0, 3953222, 8819]],
        [0, "gvertneqq", [0, 4203884, [0, 8809, 65024]]],
        [0, "gvnE", [0, 4203884, [0, 8809, 65024]]],
        [0, "Hacek", [0, 3953222, 711]],
        [0, "hairsp", [0, 3953222, 8202]],
        [0, "half", [0, 3953222, 189]],
        [0, "hamilt", [0, 3953222, 8459]],
        [0, "HARDcy", [0, 3953222, 1066]],
        [0, "hardcy", [0, 3953222, 1098]],
        [0, "hArr", [0, 3953222, 8660]],
        [0, "harr", [0, 3953222, 8596]],
        [0, "harrcir", [0, 3953222, 10568]],
        [0, "harrw", [0, 3953222, 8621]],
        [0, "Hat", [0, 3953222, 94]],
        [0, "hbar", [0, 3953222, 8463]],
        [0, "Hcirc", [0, 3953222, 292]],
        [0, "hcirc", [0, 3953222, 293]],
        [0, "hearts", [0, 3953222, 9829]],
        [0, "heartsuit", [0, 3953222, 9829]],
        [0, "hellip", [0, 3953222, 8230]],
        [0, "hercon", [0, 3953222, 8889]],
        [0, "Hfr", [0, 3953222, 8460]],
        [0, "hfr", [0, 3953222, 120101]],
        [0, "HilbertSpace", [0, 3953222, 8459]],
        [0, "hksearow", [0, 3953222, 10533]],
        [0, "hkswarow", [0, 3953222, 10534]],
        [0, "hoarr", [0, 3953222, 8703]],
        [0, "homtht", [0, 3953222, 8763]],
        [0, "hookleftarrow", [0, 3953222, 8617]],
        [0, "hookrightarrow", [0, 3953222, 8618]],
        [0, "Hopf", [0, 3953222, 8461]],
        [0, "hopf", [0, 3953222, 120153]],
        [0, "horbar", [0, 3953222, 8213]],
        [0, "HorizontalLine", [0, 3953222, 9472]],
        [0, "Hscr", [0, 3953222, 8459]],
        [0, "hscr", [0, 3953222, 119997]],
        [0, "hslash", [0, 3953222, 8463]],
        [0, "Hstrok", [0, 3953222, 294]],
        [0, "hstrok", [0, 3953222, 295]],
        [0, "HumpDownHump", [0, 3953222, 8782]],
        [0, "HumpEqual", [0, 3953222, 8783]],
        [0, "hybull", [0, 3953222, 8259]],
        [0, "hyphen", [0, 3953222, 8208]],
        [0, "Iacute", [0, 3953222, 205]],
        [0, "Iacut", [0, 3953222, 205]],
        [0, "iacute", [0, 3953222, 237]],
        [0, "iacut", [0, 3953222, 237]],
        [0, "ic", [0, 3953222, 8291]],
        [0, "Icirc", [0, 3953222, 206]],
        [0, "Icir", [0, 3953222, 206]],
        [0, "icirc", [0, 3953222, 238]],
        [0, "icir", [0, 3953222, 238]],
        [0, "Icy", [0, 3953222, 1048]],
        [0, "icy", [0, 3953222, 1080]],
        [0, "Idot", [0, 3953222, 304]],
        [0, "IEcy", [0, 3953222, 1045]],
        [0, "iecy", [0, 3953222, 1077]],
        [0, "iexcl", [0, 3953222, 161]],
        [0, "iexc", [0, 3953222, 161]],
        [0, "iff", [0, 3953222, 8660]],
        [0, "Ifr", [0, 3953222, 8465]],
        [0, "ifr", [0, 3953222, 120102]],
        [0, "Igrave", [0, 3953222, 204]],
        [0, "Igrav", [0, 3953222, 204]],
        [0, "igrave", [0, 3953222, 236]],
        [0, "igrav", [0, 3953222, 236]],
        [0, "ii", [0, 3953222, 8520]],
        [0, "iiiint", [0, 3953222, 10764]],
        [0, "iiint", [0, 3953222, 8749]],
        [0, "iinfin", [0, 3953222, 10716]],
        [0, "iiota", [0, 3953222, 8489]],
        [0, "IJlig", [0, 3953222, 306]],
        [0, "ijlig", [0, 3953222, 307]],
        [0, "Im", [0, 3953222, 8465]],
        [0, "Imacr", [0, 3953222, 298]],
        [0, "imacr", [0, 3953222, 299]],
        [0, "image", [0, 3953222, 8465]],
        [0, "ImaginaryI", [0, 3953222, 8520]],
        [0, "imagline", [0, 3953222, 8464]],
        [0, "imagpart", [0, 3953222, 8465]],
        [0, "imath", [0, 3953222, 305]],
        [0, "imof", [0, 3953222, 8887]],
        [0, "imped", [0, 3953222, 437]],
        [0, "Implies", [0, 3953222, 8658]],
        [0, "in", [0, 3953222, 8712]],
        [0, "incare", [0, 3953222, 8453]],
        [0, "infin", [0, 3953222, 8734]],
        [0, "infintie", [0, 3953222, 10717]],
        [0, "inodot", [0, 3953222, 305]],
        [0, "Int", [0, 3953222, 8748]],
        [0, "int", [0, 3953222, 8747]],
        [0, "intcal", [0, 3953222, 8890]],
        [0, "integers", [0, 3953222, 8484]],
        [0, "Integral", [0, 3953222, 8747]],
        [0, "intercal", [0, 3953222, 8890]],
        [0, "Intersection", [0, 3953222, 8898]],
        [0, "intlarhk", [0, 3953222, 10775]],
        [0, "intprod", [0, 3953222, 10812]],
        [0, "InvisibleComma", [0, 3953222, 8291]],
        [0, "InvisibleTimes", [0, 3953222, 8290]],
        [0, "IOcy", [0, 3953222, 1025]],
        [0, "iocy", [0, 3953222, 1105]],
        [0, "Iogon", [0, 3953222, 302]],
        [0, "iogon", [0, 3953222, 303]],
        [0, "Iopf", [0, 3953222, 120128]],
        [0, "iopf", [0, 3953222, 120154]],
        [0, "Iota", [0, 3953222, 921]],
        [0, "iota", [0, 3953222, 953]],
        [0, "iprod", [0, 3953222, 10812]],
        [0, "iquest", [0, 3953222, 191]],
        [0, "iques", [0, 3953222, 191]],
        [0, "Iscr", [0, 3953222, 8464]],
        [0, "iscr", [0, 3953222, 119998]],
        [0, "isin", [0, 3953222, 8712]],
        [0, "isindot", [0, 3953222, 8949]],
        [0, "isinE", [0, 3953222, 8953]],
        [0, "isins", [0, 3953222, 8948]],
        [0, "isinsv", [0, 3953222, 8947]],
        [0, "isinv", [0, 3953222, 8712]],
        [0, "it", [0, 3953222, 8290]],
        [0, "Itilde", [0, 3953222, 296]],
        [0, "itilde", [0, 3953222, 297]],
        [0, "Iukcy", [0, 3953222, 1030]],
        [0, "iukcy", [0, 3953222, 1110]],
        [0, "Iuml", [0, 3953222, 207]],
        [0, "Ium", [0, 3953222, 207]],
        [0, "iuml", [0, 3953222, 239]],
        [0, "ium", [0, 3953222, 239]],
        [0, "Jcirc", [0, 3953222, 308]],
        [0, "jcirc", [0, 3953222, 309]],
        [0, "Jcy", [0, 3953222, 1049]],
        [0, "jcy", [0, 3953222, 1081]],
        [0, "Jfr", [0, 3953222, 120077]],
        [0, "jfr", [0, 3953222, 120103]],
        [0, "jmath", [0, 3953222, 567]],
        [0, "Jopf", [0, 3953222, 120129]],
        [0, "jopf", [0, 3953222, 120155]],
        [0, "Jscr", [0, 3953222, 119973]],
        [0, "jscr", [0, 3953222, 119999]],
        [0, "Jsercy", [0, 3953222, 1032]],
        [0, "jsercy", [0, 3953222, 1112]],
        [0, "Jukcy", [0, 3953222, 1028]],
        [0, "jukcy", [0, 3953222, 1108]],
        [0, "Kappa", [0, 3953222, 922]],
        [0, "kappa", [0, 3953222, 954]],
        [0, "kappav", [0, 3953222, 1008]],
        [0, "Kcedil", [0, 3953222, 310]],
        [0, "kcedil", [0, 3953222, 311]],
        [0, "Kcy", [0, 3953222, 1050]],
        [0, "kcy", [0, 3953222, 1082]],
        [0, "Kfr", [0, 3953222, 120078]],
        [0, "kfr", [0, 3953222, 120104]],
        [0, "kgreen", [0, 3953222, 312]],
        [0, "KHcy", [0, 3953222, 1061]],
        [0, "khcy", [0, 3953222, 1093]],
        [0, "KJcy", [0, 3953222, 1036]],
        [0, "kjcy", [0, 3953222, 1116]],
        [0, "Kopf", [0, 3953222, 120130]],
        [0, "kopf", [0, 3953222, 120156]],
        [0, "Kscr", [0, 3953222, 119974]],
        [0, "kscr", [0, 3953222, 120000]],
        [0, "lAarr", [0, 3953222, 8666]],
        [0, "Lacute", [0, 3953222, 313]],
        [0, "lacute", [0, 3953222, 314]],
        [0, "laemptyv", [0, 3953222, 10676]],
        [0, "lagran", [0, 3953222, 8466]],
        [0, "Lambda", [0, 3953222, 923]],
        [0, "lambda", [0, 3953222, 955]],
        [0, "Lang", [0, 3953222, 10218]],
        [0, "lang", [0, 3953222, 10216]],
        [0, "langd", [0, 3953222, 10641]],
        [0, "langle", [0, 3953222, 10216]],
        [0, "lap", [0, 3953222, 10885]],
        [0, "Laplacetrf", [0, 3953222, 8466]],
        [0, "laquo", [0, 3953222, 171]],
        [0, "laqu", [0, 3953222, 171]],
        [0, "Larr", [0, 3953222, 8606]],
        [0, "lArr", [0, 3953222, 8656]],
        [0, "larr", [0, 3953222, 8592]],
        [0, "larrb", [0, 3953222, 8676]],
        [0, "larrbfs", [0, 3953222, 10527]],
        [0, "larrfs", [0, 3953222, 10525]],
        [0, "larrhk", [0, 3953222, 8617]],
        [0, "larrlp", [0, 3953222, 8619]],
        [0, "larrpl", [0, 3953222, 10553]],
        [0, "larrsim", [0, 3953222, 10611]],
        [0, "larrtl", [0, 3953222, 8610]],
        [0, "lat", [0, 3953222, 10923]],
        [0, "lAtail", [0, 3953222, 10523]],
        [0, "latail", [0, 3953222, 10521]],
        [0, "late", [0, 3953222, 10925]],
        [0, "lates", [0, 4203884, [0, 10925, 65024]]],
        [0, "lBarr", [0, 3953222, 10510]],
        [0, "lbarr", [0, 3953222, 10508]],
        [0, "lbbrk", [0, 3953222, 10098]],
        [0, "lbrace", [0, 3953222, 123]],
        [0, "lbrack", [0, 3953222, 91]],
        [0, "lbrke", [0, 3953222, 10635]],
        [0, "lbrksld", [0, 3953222, 10639]],
        [0, "lbrkslu", [0, 3953222, 10637]],
        [0, "Lcaron", [0, 3953222, 317]],
        [0, "lcaron", [0, 3953222, 318]],
        [0, "Lcedil", [0, 3953222, 315]],
        [0, "lcedil", [0, 3953222, 316]],
        [0, "lceil", [0, 3953222, 8968]],
        [0, "lcub", [0, 3953222, 123]],
        [0, "Lcy", [0, 3953222, 1051]],
        [0, "lcy", [0, 3953222, 1083]],
        [0, "ldca", [0, 3953222, 10550]],
        [0, "ldquo", [0, 3953222, 8220]],
        [0, "ldquor", [0, 3953222, 8222]],
        [0, "ldrdhar", [0, 3953222, 10599]],
        [0, "ldrushar", [0, 3953222, 10571]],
        [0, "ldsh", [0, 3953222, 8626]],
        [0, "lE", [0, 3953222, 8806]],
        [0, "le", [0, 3953222, 8804]],
        [0, "LeftAngleBracket", [0, 3953222, 10216]],
        [0, "LeftArrow", [0, 3953222, 8592]],
        [0, "Leftarrow", [0, 3953222, 8656]],
        [0, "leftarrow", [0, 3953222, 8592]],
        [0, "LeftArrowBar", [0, 3953222, 8676]],
        [0, "LeftArrowRightArrow", [0, 3953222, 8646]],
        [0, "leftarrowtail", [0, 3953222, 8610]],
        [0, "LeftCeiling", [0, 3953222, 8968]],
        [0, "LeftDoubleBracket", [0, 3953222, 10214]],
        [0, "LeftDownTeeVector", [0, 3953222, 10593]],
        [0, "LeftDownVector", [0, 3953222, 8643]],
        [0, "LeftDownVectorBar", [0, 3953222, 10585]],
        [0, "LeftFloor", [0, 3953222, 8970]],
        [0, "leftharpoondown", [0, 3953222, 8637]],
        [0, "leftharpoonup", [0, 3953222, 8636]],
        [0, "leftleftarrows", [0, 3953222, 8647]],
        [0, "LeftRightArrow", [0, 3953222, 8596]],
        [0, "Leftrightarrow", [0, 3953222, 8660]],
        [0, "leftrightarrow", [0, 3953222, 8596]],
        [0, "leftrightarrows", [0, 3953222, 8646]],
        [0, "leftrightharpoons", [0, 3953222, 8651]],
        [0, "leftrightsquigarrow", [0, 3953222, 8621]],
        [0, "LeftRightVector", [0, 3953222, 10574]],
        [0, "LeftTee", [0, 3953222, 8867]],
        [0, "LeftTeeArrow", [0, 3953222, 8612]],
        [0, "LeftTeeVector", [0, 3953222, 10586]],
        [0, "leftthreetimes", [0, 3953222, 8907]],
        [0, "LeftTriangle", [0, 3953222, 8882]],
        [0, "LeftTriangleBar", [0, 3953222, 10703]],
        [0, "LeftTriangleEqual", [0, 3953222, 8884]],
        [0, "LeftUpDownVector", [0, 3953222, 10577]],
        [0, "LeftUpTeeVector", [0, 3953222, 10592]],
        [0, "LeftUpVector", [0, 3953222, 8639]],
        [0, "LeftUpVectorBar", [0, 3953222, 10584]],
        [0, "LeftVector", [0, 3953222, 8636]],
        [0, "LeftVectorBar", [0, 3953222, 10578]],
        [0, "lEg", [0, 3953222, 10891]],
        [0, "leg", [0, 3953222, 8922]],
        [0, "leq", [0, 3953222, 8804]],
        [0, "leqq", [0, 3953222, 8806]],
        [0, "leqslant", [0, 3953222, 10877]],
        [0, "les", [0, 3953222, 10877]],
        [0, "lescc", [0, 3953222, 10920]],
        [0, "lesdot", [0, 3953222, 10879]],
        [0, "lesdoto", [0, 3953222, 10881]],
        [0, "lesdotor", [0, 3953222, 10883]],
        [0, "lesg", [0, 4203884, [0, 8922, 65024]]],
        [0, "lesges", [0, 3953222, 10899]],
        [0, "lessapprox", [0, 3953222, 10885]],
        [0, "lessdot", [0, 3953222, 8918]],
        [0, "lesseqgtr", [0, 3953222, 8922]],
        [0, "lesseqqgtr", [0, 3953222, 10891]],
        [0, "LessEqualGreater", [0, 3953222, 8922]],
        [0, "LessFullEqual", [0, 3953222, 8806]],
        [0, "LessGreater", [0, 3953222, 8822]],
        [0, "lessgtr", [0, 3953222, 8822]],
        [0, "LessLess", [0, 3953222, 10913]],
        [0, "lesssim", [0, 3953222, 8818]],
        [0, "LessSlantEqual", [0, 3953222, 10877]],
        [0, "LessTilde", [0, 3953222, 8818]],
        [0, "lfisht", [0, 3953222, 10620]],
        [0, "lfloor", [0, 3953222, 8970]],
        [0, "Lfr", [0, 3953222, 120079]],
        [0, "lfr", [0, 3953222, 120105]],
        [0, "lg", [0, 3953222, 8822]],
        [0, "lgE", [0, 3953222, 10897]],
        [0, "lHar", [0, 3953222, 10594]],
        [0, "lhard", [0, 3953222, 8637]],
        [0, "lharu", [0, 3953222, 8636]],
        [0, "lharul", [0, 3953222, 10602]],
        [0, "lhblk", [0, 3953222, 9604]],
        [0, "LJcy", [0, 3953222, 1033]],
        [0, "ljcy", [0, 3953222, 1113]],
        [0, "Ll", [0, 3953222, 8920]],
        [0, "ll", [0, 3953222, 8810]],
        [0, "llarr", [0, 3953222, 8647]],
        [0, "llcorner", [0, 3953222, 8990]],
        [0, "Lleftarrow", [0, 3953222, 8666]],
        [0, "llhard", [0, 3953222, 10603]],
        [0, "lltri", [0, 3953222, 9722]],
        [0, "Lmidot", [0, 3953222, 319]],
        [0, "lmidot", [0, 3953222, 320]],
        [0, "lmoust", [0, 3953222, 9136]],
        [0, "lmoustache", [0, 3953222, 9136]],
        [0, "lnap", [0, 3953222, 10889]],
        [0, "lnapprox", [0, 3953222, 10889]],
        [0, "lnE", [0, 3953222, 8808]],
        [0, "lne", [0, 3953222, 10887]],
        [0, "lneq", [0, 3953222, 10887]],
        [0, "lneqq", [0, 3953222, 8808]],
        [0, "lnsim", [0, 3953222, 8934]],
        [0, "loang", [0, 3953222, 10220]],
        [0, "loarr", [0, 3953222, 8701]],
        [0, "lobrk", [0, 3953222, 10214]],
        [0, "LongLeftArrow", [0, 3953222, 10229]],
        [0, "Longleftarrow", [0, 3953222, 10232]],
        [0, "longleftarrow", [0, 3953222, 10229]],
        [0, "LongLeftRightArrow", [0, 3953222, 10231]],
        [0, "Longleftrightarrow", [0, 3953222, 10234]],
        [0, "longleftrightarrow", [0, 3953222, 10231]],
        [0, "longmapsto", [0, 3953222, 10236]],
        [0, "LongRightArrow", [0, 3953222, 10230]],
        [0, "Longrightarrow", [0, 3953222, 10233]],
        [0, "longrightarrow", [0, 3953222, 10230]],
        [0, "looparrowleft", [0, 3953222, 8619]],
        [0, "looparrowright", [0, 3953222, 8620]],
        [0, "lopar", [0, 3953222, 10629]],
        [0, "Lopf", [0, 3953222, 120131]],
        [0, "lopf", [0, 3953222, 120157]],
        [0, "loplus", [0, 3953222, 10797]],
        [0, "lotimes", [0, 3953222, 10804]],
        [0, "lowast", [0, 3953222, 8727]],
        [0, "lowbar", [0, 3953222, 95]],
        [0, "LowerLeftArrow", [0, 3953222, 8601]],
        [0, "LowerRightArrow", [0, 3953222, 8600]],
        [0, "loz", [0, 3953222, 9674]],
        [0, "lozenge", [0, 3953222, 9674]],
        [0, "lozf", [0, 3953222, 10731]],
        [0, "lpar", [0, 3953222, 40]],
        [0, "lparlt", [0, 3953222, 10643]],
        [0, "lrarr", [0, 3953222, 8646]],
        [0, "lrcorner", [0, 3953222, 8991]],
        [0, "lrhar", [0, 3953222, 8651]],
        [0, "lrhard", [0, 3953222, 10605]],
        [0, "lrm", [0, 3953222, 8206]],
        [0, "lrtri", [0, 3953222, 8895]],
        [0, "lsaquo", [0, 3953222, 8249]],
        [0, "Lscr", [0, 3953222, 8466]],
        [0, "lscr", [0, 3953222, 120001]],
        [0, "Lsh", [0, 3953222, 8624]],
        [0, "lsh", [0, 3953222, 8624]],
        [0, "lsim", [0, 3953222, 8818]],
        [0, "lsime", [0, 3953222, 10893]],
        [0, "lsimg", [0, 3953222, 10895]],
        [0, "lsqb", [0, 3953222, 91]],
        [0, "lsquo", [0, 3953222, 8216]],
        [0, "lsquor", [0, 3953222, 8218]],
        [0, "Lstrok", [0, 3953222, 321]],
        [0, "lstrok", [0, 3953222, 322]],
        [0, "LT", [0, 3953222, 60]],
        [0, "L", [0, 3953222, 60]],
        [0, "Lt", [0, 3953222, 8810]],
        [0, "lt", [0, 3953222, 60]],
        [0, "l", [0, 3953222, 60]],
        [0, "ltcc", [0, 3953222, 10918]],
        [0, "ltcir", [0, 3953222, 10873]],
        [0, "ltdot", [0, 3953222, 8918]],
        [0, "lthree", [0, 3953222, 8907]],
        [0, "ltimes", [0, 3953222, 8905]],
        [0, "ltlarr", [0, 3953222, 10614]],
        [0, "ltquest", [0, 3953222, 10875]],
        [0, "ltri", [0, 3953222, 9667]],
        [0, "ltrie", [0, 3953222, 8884]],
        [0, "ltrif", [0, 3953222, 9666]],
        [0, "ltrPar", [0, 3953222, 10646]],
        [0, "lurdshar", [0, 3953222, 10570]],
        [0, "luruhar", [0, 3953222, 10598]],
        [0, "lvertneqq", [0, 4203884, [0, 8808, 65024]]],
        [0, "lvnE", [0, 4203884, [0, 8808, 65024]]],
        [0, "macr", [0, 3953222, 175]],
        [0, "mac", [0, 3953222, 175]],
        [0, "male", [0, 3953222, 9794]],
        [0, "malt", [0, 3953222, 10016]],
        [0, "maltese", [0, 3953222, 10016]],
        [0, "Map", [0, 3953222, 10501]],
        [0, "map", [0, 3953222, 8614]],
        [0, "mapsto", [0, 3953222, 8614]],
        [0, "mapstodown", [0, 3953222, 8615]],
        [0, "mapstoleft", [0, 3953222, 8612]],
        [0, "mapstoup", [0, 3953222, 8613]],
        [0, "marker", [0, 3953222, 9646]],
        [0, "mcomma", [0, 3953222, 10793]],
        [0, "Mcy", [0, 3953222, 1052]],
        [0, "mcy", [0, 3953222, 1084]],
        [0, "mdash", [0, 3953222, 8212]],
        [0, "mDDot", [0, 3953222, 8762]],
        [0, "measuredangle", [0, 3953222, 8737]],
        [0, "MediumSpace", [0, 3953222, 8287]],
        [0, "Mellintrf", [0, 3953222, 8499]],
        [0, "Mfr", [0, 3953222, 120080]],
        [0, "mfr", [0, 3953222, 120106]],
        [0, "mho", [0, 3953222, 8487]],
        [0, "micro", [0, 3953222, 181]],
        [0, "micr", [0, 3953222, 181]],
        [0, "mid", [0, 3953222, 8739]],
        [0, "midast", [0, 3953222, 42]],
        [0, "midcir", [0, 3953222, 10992]],
        [0, "middot", [0, 3953222, 183]],
        [0, "middo", [0, 3953222, 183]],
        [0, "minus", [0, 3953222, 8722]],
        [0, "minusb", [0, 3953222, 8863]],
        [0, "minusd", [0, 3953222, 8760]],
        [0, "minusdu", [0, 3953222, 10794]],
        [0, "MinusPlus", [0, 3953222, 8723]],
        [0, "mlcp", [0, 3953222, 10971]],
        [0, "mldr", [0, 3953222, 8230]],
        [0, "mnplus", [0, 3953222, 8723]],
        [0, "models", [0, 3953222, 8871]],
        [0, "Mopf", [0, 3953222, 120132]],
        [0, "mopf", [0, 3953222, 120158]],
        [0, "mp", [0, 3953222, 8723]],
        [0, "Mscr", [0, 3953222, 8499]],
        [0, "mscr", [0, 3953222, 120002]],
        [0, "mstpos", [0, 3953222, 8766]],
        [0, "Mu", [0, 3953222, 924]],
        [0, "mu", [0, 3953222, 956]],
        [0, "multimap", [0, 3953222, 8888]],
        [0, "mumap", [0, 3953222, 8888]],
        [0, "nabla", [0, 3953222, 8711]],
        [0, "Nacute", [0, 3953222, 323]],
        [0, "nacute", [0, 3953222, 324]],
        [0, "nang", [0, 4203884, [0, 8736, 8402]]],
        [0, "nap", [0, 3953222, 8777]],
        [0, "napE", [0, 4203884, [0, 10864, 824]]],
        [0, "napid", [0, 4203884, [0, 8779, 824]]],
        [0, "napos", [0, 3953222, 329]],
        [0, "napprox", [0, 3953222, 8777]],
        [0, "natur", [0, 3953222, 9838]],
        [0, "natural", [0, 3953222, 9838]],
        [0, "naturals", [0, 3953222, 8469]],
        [0, "nbsp", [0, 3953222, 160]],
        [0, "nbs", [0, 3953222, 160]],
        [0, "nbump", [0, 4203884, [0, 8782, 824]]],
        [0, "nbumpe", [0, 4203884, [0, 8783, 824]]],
        [0, "ncap", [0, 3953222, 10819]],
        [0, "Ncaron", [0, 3953222, 327]],
        [0, "ncaron", [0, 3953222, 328]],
        [0, "Ncedil", [0, 3953222, 325]],
        [0, "ncedil", [0, 3953222, 326]],
        [0, "ncong", [0, 3953222, 8775]],
        [0, "ncongdot", [0, 4203884, [0, 10861, 824]]],
        [0, "ncup", [0, 3953222, 10818]],
        [0, "Ncy", [0, 3953222, 1053]],
        [0, "ncy", [0, 3953222, 1085]],
        [0, "ndash", [0, 3953222, 8211]],
        [0, "ne", [0, 3953222, 8800]],
        [0, "nearhk", [0, 3953222, 10532]],
        [0, "neArr", [0, 3953222, 8663]],
        [0, "nearr", [0, 3953222, 8599]],
        [0, "nearrow", [0, 3953222, 8599]],
        [0, "nedot", [0, 4203884, [0, 8784, 824]]],
        [0, "NegativeMediumSpace", [0, 3953222, 8203]],
        [0, "NegativeThickSpace", [0, 3953222, 8203]],
        [0, "NegativeThinSpace", [0, 3953222, 8203]],
        [0, "NegativeVeryThinSpace", [0, 3953222, 8203]],
        [0, "nequiv", [0, 3953222, 8802]],
        [0, "nesear", [0, 3953222, 10536]],
        [0, "nesim", [0, 4203884, [0, 8770, 824]]],
        [0, "NestedGreaterGreater", [0, 3953222, 8811]],
        [0, "NestedLessLess", [0, 3953222, 8810]],
        [0, "NewLine", [0, 3953222, 10]],
        [0, "nexist", [0, 3953222, 8708]],
        [0, "nexists", [0, 3953222, 8708]],
        [0, "Nfr", [0, 3953222, 120081]],
        [0, "nfr", [0, 3953222, 120107]],
        [0, "ngE", [0, 4203884, [0, 8807, 824]]],
        [0, "nge", [0, 3953222, 8817]],
        [0, "ngeq", [0, 3953222, 8817]],
        [0, "ngeqq", [0, 4203884, [0, 8807, 824]]],
        [0, "ngeqslant", [0, 4203884, [0, 10878, 824]]],
        [0, "nges", [0, 4203884, [0, 10878, 824]]],
        [0, "nGg", [0, 4203884, [0, 8921, 824]]],
        [0, "ngsim", [0, 3953222, 8821]],
        [0, "nGt", [0, 4203884, [0, 8811, 8402]]],
        [0, "ngt", [0, 3953222, 8815]],
        [0, "ngtr", [0, 3953222, 8815]],
        [0, "nGtv", [0, 4203884, [0, 8811, 824]]],
        [0, "nhArr", [0, 3953222, 8654]],
        [0, "nharr", [0, 3953222, 8622]],
        [0, "nhpar", [0, 3953222, 10994]],
        [0, "ni", [0, 3953222, 8715]],
        [0, "nis", [0, 3953222, 8956]],
        [0, "nisd", [0, 3953222, 8954]],
        [0, "niv", [0, 3953222, 8715]],
        [0, "NJcy", [0, 3953222, 1034]],
        [0, "njcy", [0, 3953222, 1114]],
        [0, "nlArr", [0, 3953222, 8653]],
        [0, "nlarr", [0, 3953222, 8602]],
        [0, "nldr", [0, 3953222, 8229]],
        [0, "nlE", [0, 4203884, [0, 8806, 824]]],
        [0, "nle", [0, 3953222, 8816]],
        [0, "nLeftarrow", [0, 3953222, 8653]],
        [0, "nleftarrow", [0, 3953222, 8602]],
        [0, "nLeftrightarrow", [0, 3953222, 8654]],
        [0, "nleftrightarrow", [0, 3953222, 8622]],
        [0, "nleq", [0, 3953222, 8816]],
        [0, "nleqq", [0, 4203884, [0, 8806, 824]]],
        [0, "nleqslant", [0, 4203884, [0, 10877, 824]]],
        [0, "nles", [0, 4203884, [0, 10877, 824]]],
        [0, "nless", [0, 3953222, 8814]],
        [0, "nLl", [0, 4203884, [0, 8920, 824]]],
        [0, "nlsim", [0, 3953222, 8820]],
        [0, "nLt", [0, 4203884, [0, 8810, 8402]]],
        [0, "nlt", [0, 3953222, 8814]],
        [0, "nltri", [0, 3953222, 8938]],
        [0, "nltrie", [0, 3953222, 8940]],
        [0, "nLtv", [0, 4203884, [0, 8810, 824]]],
        [0, "nmid", [0, 3953222, 8740]],
        [0, "NoBreak", [0, 3953222, 8288]],
        [0, "NonBreakingSpace", [0, 3953222, 160]],
        [0, "Nopf", [0, 3953222, 8469]],
        [0, "nopf", [0, 3953222, 120159]],
        [0, "Not", [0, 3953222, 10988]],
        [0, "not", [0, 3953222, 172]],
        [0, "no", [0, 3953222, 172]],
        [0, "NotCongruent", [0, 3953222, 8802]],
        [0, "NotCupCap", [0, 3953222, 8813]],
        [0, "NotDoubleVerticalBar", [0, 3953222, 8742]],
        [0, "NotElement", [0, 3953222, 8713]],
        [0, "NotEqual", [0, 3953222, 8800]],
        [0, "NotEqualTilde", [0, 4203884, [0, 8770, 824]]],
        [0, "NotExists", [0, 3953222, 8708]],
        [0, "NotGreater", [0, 3953222, 8815]],
        [0, "NotGreaterEqual", [0, 3953222, 8817]],
        [0, "NotGreaterFullEqual", [0, 4203884, [0, 8807, 824]]],
        [0, "NotGreaterGreater", [0, 4203884, [0, 8811, 824]]],
        [0, "NotGreaterLess", [0, 3953222, 8825]],
        [0, "NotGreaterSlantEqual", [0, 4203884, [0, 10878, 824]]],
        [0, "NotGreaterTilde", [0, 3953222, 8821]],
        [0, "NotHumpDownHump", [0, 4203884, [0, 8782, 824]]],
        [0, "NotHumpEqual", [0, 4203884, [0, 8783, 824]]],
        [0, "notin", [0, 3953222, 8713]],
        [0, "notindot", [0, 4203884, [0, 8949, 824]]],
        [0, "notinE", [0, 4203884, [0, 8953, 824]]],
        [0, "notinva", [0, 3953222, 8713]],
        [0, "notinvb", [0, 3953222, 8951]],
        [0, "notinvc", [0, 3953222, 8950]],
        [0, "NotLeftTriangle", [0, 3953222, 8938]],
        [0, "NotLeftTriangleBar", [0, 4203884, [0, 10703, 824]]],
        [0, "NotLeftTriangleEqual", [0, 3953222, 8940]],
        [0, "NotLess", [0, 3953222, 8814]],
        [0, "NotLessEqual", [0, 3953222, 8816]],
        [0, "NotLessGreater", [0, 3953222, 8824]],
        [0, "NotLessLess", [0, 4203884, [0, 8810, 824]]],
        [0, "NotLessSlantEqual", [0, 4203884, [0, 10877, 824]]],
        [0, "NotLessTilde", [0, 3953222, 8820]],
        [0, "NotNestedGreaterGreater", [0, 4203884, [0, 10914, 824]]],
        [0, "NotNestedLessLess", [0, 4203884, [0, 10913, 824]]],
        [0, "notni", [0, 3953222, 8716]],
        [0, "notniva", [0, 3953222, 8716]],
        [0, "notnivb", [0, 3953222, 8958]],
        [0, "notnivc", [0, 3953222, 8957]],
        [0, "NotPrecedes", [0, 3953222, 8832]],
        [0, "NotPrecedesEqual", [0, 4203884, [0, 10927, 824]]],
        [0, "NotPrecedesSlantEqual", [0, 3953222, 8928]],
        [0, "NotReverseElement", [0, 3953222, 8716]],
        [0, "NotRightTriangle", [0, 3953222, 8939]],
        [0, "NotRightTriangleBar", [0, 4203884, [0, 10704, 824]]],
        [0, "NotRightTriangleEqual", [0, 3953222, 8941]],
        [0, "NotSquareSubset", [0, 4203884, [0, 8847, 824]]],
        [0, "NotSquareSubsetEqual", [0, 3953222, 8930]],
        [0, "NotSquareSuperset", [0, 4203884, [0, 8848, 824]]],
        [0, "NotSquareSupersetEqual", [0, 3953222, 8931]],
        [0, "NotSubset", [0, 4203884, [0, 8834, 8402]]],
        [0, "NotSubsetEqual", [0, 3953222, 8840]],
        [0, "NotSucceeds", [0, 3953222, 8833]],
        [0, "NotSucceedsEqual", [0, 4203884, [0, 10928, 824]]],
        [0, "NotSucceedsSlantEqual", [0, 3953222, 8929]],
        [0, "NotSucceedsTilde", [0, 4203884, [0, 8831, 824]]],
        [0, "NotSuperset", [0, 4203884, [0, 8835, 8402]]],
        [0, "NotSupersetEqual", [0, 3953222, 8841]],
        [0, "NotTilde", [0, 3953222, 8769]],
        [0, "NotTildeEqual", [0, 3953222, 8772]],
        [0, "NotTildeFullEqual", [0, 3953222, 8775]],
        [0, "NotTildeTilde", [0, 3953222, 8777]],
        [0, "NotVerticalBar", [0, 3953222, 8740]],
        [0, "npar", [0, 3953222, 8742]],
        [0, "nparallel", [0, 3953222, 8742]],
        [0, "nparsl", [0, 4203884, [0, 11005, 8421]]],
        [0, "npart", [0, 4203884, [0, 8706, 824]]],
        [0, "npolint", [0, 3953222, 10772]],
        [0, "npr", [0, 3953222, 8832]],
        [0, "nprcue", [0, 3953222, 8928]],
        [0, "npre", [0, 4203884, [0, 10927, 824]]],
        [0, "nprec", [0, 3953222, 8832]],
        [0, "npreceq", [0, 4203884, [0, 10927, 824]]],
        [0, "nrArr", [0, 3953222, 8655]],
        [0, "nrarr", [0, 3953222, 8603]],
        [0, "nrarrc", [0, 4203884, [0, 10547, 824]]],
        [0, "nrarrw", [0, 4203884, [0, 8605, 824]]],
        [0, "nRightarrow", [0, 3953222, 8655]],
        [0, "nrightarrow", [0, 3953222, 8603]],
        [0, "nrtri", [0, 3953222, 8939]],
        [0, "nrtrie", [0, 3953222, 8941]],
        [0, "nsc", [0, 3953222, 8833]],
        [0, "nsccue", [0, 3953222, 8929]],
        [0, "nsce", [0, 4203884, [0, 10928, 824]]],
        [0, "Nscr", [0, 3953222, 119977]],
        [0, "nscr", [0, 3953222, 120003]],
        [0, "nshortmid", [0, 3953222, 8740]],
        [0, "nshortparallel", [0, 3953222, 8742]],
        [0, "nsim", [0, 3953222, 8769]],
        [0, "nsime", [0, 3953222, 8772]],
        [0, "nsimeq", [0, 3953222, 8772]],
        [0, "nsmid", [0, 3953222, 8740]],
        [0, "nspar", [0, 3953222, 8742]],
        [0, "nsqsube", [0, 3953222, 8930]],
        [0, "nsqsupe", [0, 3953222, 8931]],
        [0, "nsub", [0, 3953222, 8836]],
        [0, "nsubE", [0, 4203884, [0, 10949, 824]]],
        [0, "nsube", [0, 3953222, 8840]],
        [0, "nsubset", [0, 4203884, [0, 8834, 8402]]],
        [0, "nsubseteq", [0, 3953222, 8840]],
        [0, "nsubseteqq", [0, 4203884, [0, 10949, 824]]],
        [0, "nsucc", [0, 3953222, 8833]],
        [0, "nsucceq", [0, 4203884, [0, 10928, 824]]],
        [0, "nsup", [0, 3953222, 8837]],
        [0, "nsupE", [0, 4203884, [0, 10950, 824]]],
        [0, "nsupe", [0, 3953222, 8841]],
        [0, "nsupset", [0, 4203884, [0, 8835, 8402]]],
        [0, "nsupseteq", [0, 3953222, 8841]],
        [0, "nsupseteqq", [0, 4203884, [0, 10950, 824]]],
        [0, "ntgl", [0, 3953222, 8825]],
        [0, "Ntilde", [0, 3953222, 209]],
        [0, "Ntild", [0, 3953222, 209]],
        [0, "ntilde", [0, 3953222, 241]],
        [0, "ntild", [0, 3953222, 241]],
        [0, "ntlg", [0, 3953222, 8824]],
        [0, "ntriangleleft", [0, 3953222, 8938]],
        [0, "ntrianglelefteq", [0, 3953222, 8940]],
        [0, "ntriangleright", [0, 3953222, 8939]],
        [0, "ntrianglerighteq", [0, 3953222, 8941]],
        [0, "Nu", [0, 3953222, 925]],
        [0, "nu", [0, 3953222, 957]],
        [0, "num", [0, 3953222, 35]],
        [0, "numero", [0, 3953222, 8470]],
        [0, "numsp", [0, 3953222, 8199]],
        [0, "nvap", [0, 4203884, [0, 8781, 8402]]],
        [0, "nVDash", [0, 3953222, 8879]],
        [0, "nVdash", [0, 3953222, 8878]],
        [0, "nvDash", [0, 3953222, 8877]],
        [0, "nvdash", [0, 3953222, 8876]],
        [0, "nvge", [0, 4203884, [0, 8805, 8402]]],
        [0, "nvgt", [0, 4203884, [0, 62, 8402]]],
        [0, "nvHarr", [0, 3953222, 10500]],
        [0, "nvinfin", [0, 3953222, 10718]],
        [0, "nvlArr", [0, 3953222, 10498]],
        [0, "nvle", [0, 4203884, [0, 8804, 8402]]],
        [0, "nvlt", [0, 4203884, [0, 60, 8402]]],
        [0, "nvltrie", [0, 4203884, [0, 8884, 8402]]],
        [0, "nvrArr", [0, 3953222, 10499]],
        [0, "nvrtrie", [0, 4203884, [0, 8885, 8402]]],
        [0, "nvsim", [0, 4203884, [0, 8764, 8402]]],
        [0, "nwarhk", [0, 3953222, 10531]],
        [0, "nwArr", [0, 3953222, 8662]],
        [0, "nwarr", [0, 3953222, 8598]],
        [0, "nwarrow", [0, 3953222, 8598]],
        [0, "nwnear", [0, 3953222, 10535]],
        [0, "Oacute", [0, 3953222, 211]],
        [0, "Oacut", [0, 3953222, 211]],
        [0, "oacute", [0, 3953222, 243]],
        [0, "oacut", [0, 3953222, 243]],
        [0, "oast", [0, 3953222, 8859]],
        [0, cst_ocir, [0, 3953222, 8858]],
        [0, "Ocirc", [0, 3953222, 212]],
        [0, "Ocir", [0, 3953222, 212]],
        [0, "ocirc", [0, 3953222, 244]],
        [0, cst_ocir, [0, 3953222, 244]],
        [0, "Ocy", [0, 3953222, 1054]],
        [0, "ocy", [0, 3953222, 1086]],
        [0, "odash", [0, 3953222, 8861]],
        [0, "Odblac", [0, 3953222, 336]],
        [0, "odblac", [0, 3953222, 337]],
        [0, "odiv", [0, 3953222, 10808]],
        [0, "odot", [0, 3953222, 8857]],
        [0, "odsold", [0, 3953222, 10684]],
        [0, "OElig", [0, 3953222, 338]],
        [0, "oelig", [0, 3953222, 339]],
        [0, "ofcir", [0, 3953222, 10687]],
        [0, "Ofr", [0, 3953222, 120082]],
        [0, "ofr", [0, 3953222, 120108]],
        [0, "ogon", [0, 3953222, 731]],
        [0, "Ograve", [0, 3953222, 210]],
        [0, "Ograv", [0, 3953222, 210]],
        [0, "ograve", [0, 3953222, 242]],
        [0, "ograv", [0, 3953222, 242]],
        [0, "ogt", [0, 3953222, 10689]],
        [0, "ohbar", [0, 3953222, 10677]],
        [0, "ohm", [0, 3953222, 937]],
        [0, "oint", [0, 3953222, 8750]],
        [0, "olarr", [0, 3953222, 8634]],
        [0, "olcir", [0, 3953222, 10686]],
        [0, "olcross", [0, 3953222, 10683]],
        [0, "oline", [0, 3953222, 8254]],
        [0, "olt", [0, 3953222, 10688]],
        [0, "Omacr", [0, 3953222, 332]],
        [0, "omacr", [0, 3953222, 333]],
        [0, "Omega", [0, 3953222, 937]],
        [0, "omega", [0, 3953222, 969]],
        [0, "Omicron", [0, 3953222, 927]],
        [0, "omicron", [0, 3953222, 959]],
        [0, "omid", [0, 3953222, 10678]],
        [0, "ominus", [0, 3953222, 8854]],
        [0, "Oopf", [0, 3953222, 120134]],
        [0, "oopf", [0, 3953222, 120160]],
        [0, "opar", [0, 3953222, 10679]],
        [0, "OpenCurlyDoubleQuote", [0, 3953222, 8220]],
        [0, "OpenCurlyQuote", [0, 3953222, 8216]],
        [0, "operp", [0, 3953222, 10681]],
        [0, "oplus", [0, 3953222, 8853]],
        [0, "Or", [0, 3953222, 10836]],
        [0, "or", [0, 3953222, 8744]],
        [0, "orarr", [0, 3953222, 8635]],
        [0, cst_ord, [0, 3953222, 10845]],
        [0, "order", [0, 3953222, 8500]],
        [0, "orderof", [0, 3953222, 8500]],
        [0, "ordf", [0, 3953222, 170]],
        [0, cst_ord, [0, 3953222, 170]],
        [0, "ordm", [0, 3953222, 186]],
        [0, cst_ord, [0, 3953222, 186]],
        [0, "origof", [0, 3953222, 8886]],
        [0, "oror", [0, 3953222, 10838]],
        [0, "orslope", [0, 3953222, 10839]],
        [0, "orv", [0, 3953222, 10843]],
        [0, "oS", [0, 3953222, 9416]],
        [0, "Oscr", [0, 3953222, 119978]],
        [0, "oscr", [0, 3953222, 8500]],
        [0, "Oslash", [0, 3953222, 216]],
        [0, "Oslas", [0, 3953222, 216]],
        [0, "oslash", [0, 3953222, 248]],
        [0, "oslas", [0, 3953222, 248]],
        [0, "osol", [0, 3953222, 8856]],
        [0, "Otilde", [0, 3953222, 213]],
        [0, "Otild", [0, 3953222, 213]],
        [0, "otilde", [0, 3953222, 245]],
        [0, "otild", [0, 3953222, 245]],
        [0, "Otimes", [0, 3953222, 10807]],
        [0, "otimes", [0, 3953222, 8855]],
        [0, "otimesas", [0, 3953222, 10806]],
        [0, "Ouml", [0, 3953222, 214]],
        [0, "Oum", [0, 3953222, 214]],
        [0, "ouml", [0, 3953222, 246]],
        [0, "oum", [0, 3953222, 246]],
        [0, "ovbar", [0, 3953222, 9021]],
        [0, "OverBar", [0, 3953222, 8254]],
        [0, "OverBrace", [0, 3953222, 9182]],
        [0, "OverBracket", [0, 3953222, 9140]],
        [0, "OverParenthesis", [0, 3953222, 9180]],
        [0, cst_par, [0, 3953222, 8741]],
        [0, "para", [0, 3953222, 182]],
        [0, cst_par, [0, 3953222, 182]],
        [0, "parallel", [0, 3953222, 8741]],
        [0, "parsim", [0, 3953222, 10995]],
        [0, "parsl", [0, 3953222, 11005]],
        [0, "part", [0, 3953222, 8706]],
        [0, "PartialD", [0, 3953222, 8706]],
        [0, "Pcy", [0, 3953222, 1055]],
        [0, "pcy", [0, 3953222, 1087]],
        [0, "percnt", [0, 3953222, 37]],
        [0, "period", [0, 3953222, 46]],
        [0, "permil", [0, 3953222, 8240]],
        [0, "perp", [0, 3953222, 8869]],
        [0, "pertenk", [0, 3953222, 8241]],
        [0, "Pfr", [0, 3953222, 120083]],
        [0, "pfr", [0, 3953222, 120109]],
        [0, "Phi", [0, 3953222, 934]],
        [0, "phi", [0, 3953222, 966]],
        [0, "phiv", [0, 3953222, 981]],
        [0, "phmmat", [0, 3953222, 8499]],
        [0, "phone", [0, 3953222, 9742]],
        [0, "Pi", [0, 3953222, 928]],
        [0, "pi", [0, 3953222, 960]],
        [0, "pitchfork", [0, 3953222, 8916]],
        [0, "piv", [0, 3953222, 982]],
        [0, "planck", [0, 3953222, 8463]],
        [0, "planckh", [0, 3953222, 8462]],
        [0, "plankv", [0, 3953222, 8463]],
        [0, "plus", [0, 3953222, 43]],
        [0, "plusacir", [0, 3953222, 10787]],
        [0, "plusb", [0, 3953222, 8862]],
        [0, "pluscir", [0, 3953222, 10786]],
        [0, "plusdo", [0, 3953222, 8724]],
        [0, "plusdu", [0, 3953222, 10789]],
        [0, "pluse", [0, 3953222, 10866]],
        [0, "PlusMinus", [0, 3953222, 177]],
        [0, "plusmn", [0, 3953222, 177]],
        [0, "plusm", [0, 3953222, 177]],
        [0, "plussim", [0, 3953222, 10790]],
        [0, "plustwo", [0, 3953222, 10791]],
        [0, "pm", [0, 3953222, 177]],
        [0, "Poincareplane", [0, 3953222, 8460]],
        [0, "pointint", [0, 3953222, 10773]],
        [0, "Popf", [0, 3953222, 8473]],
        [0, "popf", [0, 3953222, 120161]],
        [0, "pound", [0, 3953222, 163]],
        [0, "poun", [0, 3953222, 163]],
        [0, "Pr", [0, 3953222, 10939]],
        [0, "pr", [0, 3953222, 8826]],
        [0, "prap", [0, 3953222, 10935]],
        [0, "prcue", [0, 3953222, 8828]],
        [0, "prE", [0, 3953222, 10931]],
        [0, "pre", [0, 3953222, 10927]],
        [0, "prec", [0, 3953222, 8826]],
        [0, "precapprox", [0, 3953222, 10935]],
        [0, "preccurlyeq", [0, 3953222, 8828]],
        [0, "Precedes", [0, 3953222, 8826]],
        [0, "PrecedesEqual", [0, 3953222, 10927]],
        [0, "PrecedesSlantEqual", [0, 3953222, 8828]],
        [0, "PrecedesTilde", [0, 3953222, 8830]],
        [0, "preceq", [0, 3953222, 10927]],
        [0, "precnapprox", [0, 3953222, 10937]],
        [0, "precneqq", [0, 3953222, 10933]],
        [0, "precnsim", [0, 3953222, 8936]],
        [0, "precsim", [0, 3953222, 8830]],
        [0, "Prime", [0, 3953222, 8243]],
        [0, "prime", [0, 3953222, 8242]],
        [0, "primes", [0, 3953222, 8473]],
        [0, "prnap", [0, 3953222, 10937]],
        [0, "prnE", [0, 3953222, 10933]],
        [0, "prnsim", [0, 3953222, 8936]],
        [0, "prod", [0, 3953222, 8719]],
        [0, "Product", [0, 3953222, 8719]],
        [0, "profalar", [0, 3953222, 9006]],
        [0, "profline", [0, 3953222, 8978]],
        [0, "profsurf", [0, 3953222, 8979]],
        [0, "prop", [0, 3953222, 8733]],
        [0, "Proportion", [0, 3953222, 8759]],
        [0, "Proportional", [0, 3953222, 8733]],
        [0, "propto", [0, 3953222, 8733]],
        [0, "prsim", [0, 3953222, 8830]],
        [0, "prurel", [0, 3953222, 8880]],
        [0, "Pscr", [0, 3953222, 119979]],
        [0, "pscr", [0, 3953222, 120005]],
        [0, "Psi", [0, 3953222, 936]],
        [0, "psi", [0, 3953222, 968]],
        [0, "puncsp", [0, 3953222, 8200]],
        [0, "Qfr", [0, 3953222, 120084]],
        [0, "qfr", [0, 3953222, 120110]],
        [0, "qint", [0, 3953222, 10764]],
        [0, "Qopf", [0, 3953222, 8474]],
        [0, "qopf", [0, 3953222, 120162]],
        [0, "qprime", [0, 3953222, 8279]],
        [0, "Qscr", [0, 3953222, 119980]],
        [0, "qscr", [0, 3953222, 120006]],
        [0, "quaternions", [0, 3953222, 8461]],
        [0, "quatint", [0, 3953222, 10774]],
        [0, "quest", [0, 3953222, 63]],
        [0, "questeq", [0, 3953222, 8799]],
        [0, "QUOT", [0, 3953222, 34]],
        [0, "QUO", [0, 3953222, 34]],
        [0, "quot", [0, 3953222, 34]],
        [0, "quo", [0, 3953222, 34]],
        [0, "rAarr", [0, 3953222, 8667]],
        [0, "race", [0, 4203884, [0, 8765, 817]]],
        [0, "Racute", [0, 3953222, 340]],
        [0, "racute", [0, 3953222, 341]],
        [0, "radic", [0, 3953222, 8730]],
        [0, "raemptyv", [0, 3953222, 10675]],
        [0, "Rang", [0, 3953222, 10219]],
        [0, "rang", [0, 3953222, 10217]],
        [0, "rangd", [0, 3953222, 10642]],
        [0, "range", [0, 3953222, 10661]],
        [0, "rangle", [0, 3953222, 10217]],
        [0, "raquo", [0, 3953222, 187]],
        [0, "raqu", [0, 3953222, 187]],
        [0, "Rarr", [0, 3953222, 8608]],
        [0, "rArr", [0, 3953222, 8658]],
        [0, "rarr", [0, 3953222, 8594]],
        [0, "rarrap", [0, 3953222, 10613]],
        [0, "rarrb", [0, 3953222, 8677]],
        [0, "rarrbfs", [0, 3953222, 10528]],
        [0, "rarrc", [0, 3953222, 10547]],
        [0, "rarrfs", [0, 3953222, 10526]],
        [0, "rarrhk", [0, 3953222, 8618]],
        [0, "rarrlp", [0, 3953222, 8620]],
        [0, "rarrpl", [0, 3953222, 10565]],
        [0, "rarrsim", [0, 3953222, 10612]],
        [0, "Rarrtl", [0, 3953222, 10518]],
        [0, "rarrtl", [0, 3953222, 8611]],
        [0, "rarrw", [0, 3953222, 8605]],
        [0, "rAtail", [0, 3953222, 10524]],
        [0, "ratail", [0, 3953222, 10522]],
        [0, "ratio", [0, 3953222, 8758]],
        [0, "rationals", [0, 3953222, 8474]],
        [0, "RBarr", [0, 3953222, 10512]],
        [0, "rBarr", [0, 3953222, 10511]],
        [0, "rbarr", [0, 3953222, 10509]],
        [0, "rbbrk", [0, 3953222, 10099]],
        [0, "rbrace", [0, 3953222, 125]],
        [0, "rbrack", [0, 3953222, 93]],
        [0, "rbrke", [0, 3953222, 10636]],
        [0, "rbrksld", [0, 3953222, 10638]],
        [0, "rbrkslu", [0, 3953222, 10640]],
        [0, "Rcaron", [0, 3953222, 344]],
        [0, "rcaron", [0, 3953222, 345]],
        [0, "Rcedil", [0, 3953222, 342]],
        [0, "rcedil", [0, 3953222, 343]],
        [0, "rceil", [0, 3953222, 8969]],
        [0, "rcub", [0, 3953222, 125]],
        [0, "Rcy", [0, 3953222, 1056]],
        [0, "rcy", [0, 3953222, 1088]],
        [0, "rdca", [0, 3953222, 10551]],
        [0, "rdldhar", [0, 3953222, 10601]],
        [0, "rdquo", [0, 3953222, 8221]],
        [0, "rdquor", [0, 3953222, 8221]],
        [0, "rdsh", [0, 3953222, 8627]],
        [0, "Re", [0, 3953222, 8476]],
        [0, "real", [0, 3953222, 8476]],
        [0, "realine", [0, 3953222, 8475]],
        [0, "realpart", [0, 3953222, 8476]],
        [0, "reals", [0, 3953222, 8477]],
        [0, "rect", [0, 3953222, 9645]],
        [0, "REG", [0, 3953222, 174]],
        [0, "RE", [0, 3953222, 174]],
        [0, "reg", [0, 3953222, 174]],
        [0, "re", [0, 3953222, 174]],
        [0, "ReverseElement", [0, 3953222, 8715]],
        [0, "ReverseEquilibrium", [0, 3953222, 8651]],
        [0, "ReverseUpEquilibrium", [0, 3953222, 10607]],
        [0, "rfisht", [0, 3953222, 10621]],
        [0, "rfloor", [0, 3953222, 8971]],
        [0, "Rfr", [0, 3953222, 8476]],
        [0, "rfr", [0, 3953222, 120111]],
        [0, "rHar", [0, 3953222, 10596]],
        [0, "rhard", [0, 3953222, 8641]],
        [0, "rharu", [0, 3953222, 8640]],
        [0, "rharul", [0, 3953222, 10604]],
        [0, "Rho", [0, 3953222, 929]],
        [0, "rho", [0, 3953222, 961]],
        [0, "rhov", [0, 3953222, 1009]],
        [0, "RightAngleBracket", [0, 3953222, 10217]],
        [0, "RightArrow", [0, 3953222, 8594]],
        [0, "Rightarrow", [0, 3953222, 8658]],
        [0, "rightarrow", [0, 3953222, 8594]],
        [0, "RightArrowBar", [0, 3953222, 8677]],
        [0, "RightArrowLeftArrow", [0, 3953222, 8644]],
        [0, "rightarrowtail", [0, 3953222, 8611]],
        [0, "RightCeiling", [0, 3953222, 8969]],
        [0, "RightDoubleBracket", [0, 3953222, 10215]],
        [0, "RightDownTeeVector", [0, 3953222, 10589]],
        [0, "RightDownVector", [0, 3953222, 8642]],
        [0, "RightDownVectorBar", [0, 3953222, 10581]],
        [0, "RightFloor", [0, 3953222, 8971]],
        [0, "rightharpoondown", [0, 3953222, 8641]],
        [0, "rightharpoonup", [0, 3953222, 8640]],
        [0, "rightleftarrows", [0, 3953222, 8644]],
        [0, "rightleftharpoons", [0, 3953222, 8652]],
        [0, "rightrightarrows", [0, 3953222, 8649]],
        [0, "rightsquigarrow", [0, 3953222, 8605]],
        [0, "RightTee", [0, 3953222, 8866]],
        [0, "RightTeeArrow", [0, 3953222, 8614]],
        [0, "RightTeeVector", [0, 3953222, 10587]],
        [0, "rightthreetimes", [0, 3953222, 8908]],
        [0, "RightTriangle", [0, 3953222, 8883]],
        [0, "RightTriangleBar", [0, 3953222, 10704]],
        [0, "RightTriangleEqual", [0, 3953222, 8885]],
        [0, "RightUpDownVector", [0, 3953222, 10575]],
        [0, "RightUpTeeVector", [0, 3953222, 10588]],
        [0, "RightUpVector", [0, 3953222, 8638]],
        [0, "RightUpVectorBar", [0, 3953222, 10580]],
        [0, "RightVector", [0, 3953222, 8640]],
        [0, "RightVectorBar", [0, 3953222, 10579]],
        [0, "ring", [0, 3953222, 730]],
        [0, "risingdotseq", [0, 3953222, 8787]],
        [0, "rlarr", [0, 3953222, 8644]],
        [0, "rlhar", [0, 3953222, 8652]],
        [0, "rlm", [0, 3953222, 8207]],
        [0, "rmoust", [0, 3953222, 9137]],
        [0, "rmoustache", [0, 3953222, 9137]],
        [0, "rnmid", [0, 3953222, 10990]],
        [0, "roang", [0, 3953222, 10221]],
        [0, "roarr", [0, 3953222, 8702]],
        [0, "robrk", [0, 3953222, 10215]],
        [0, "ropar", [0, 3953222, 10630]],
        [0, "Ropf", [0, 3953222, 8477]],
        [0, "ropf", [0, 3953222, 120163]],
        [0, "roplus", [0, 3953222, 10798]],
        [0, "rotimes", [0, 3953222, 10805]],
        [0, "RoundImplies", [0, 3953222, 10608]],
        [0, "rpar", [0, 3953222, 41]],
        [0, "rpargt", [0, 3953222, 10644]],
        [0, "rppolint", [0, 3953222, 10770]],
        [0, "rrarr", [0, 3953222, 8649]],
        [0, "Rrightarrow", [0, 3953222, 8667]],
        [0, "rsaquo", [0, 3953222, 8250]],
        [0, "Rscr", [0, 3953222, 8475]],
        [0, "rscr", [0, 3953222, 120007]],
        [0, "Rsh", [0, 3953222, 8625]],
        [0, "rsh", [0, 3953222, 8625]],
        [0, "rsqb", [0, 3953222, 93]],
        [0, "rsquo", [0, 3953222, 8217]],
        [0, "rsquor", [0, 3953222, 8217]],
        [0, "rthree", [0, 3953222, 8908]],
        [0, "rtimes", [0, 3953222, 8906]],
        [0, "rtri", [0, 3953222, 9657]],
        [0, "rtrie", [0, 3953222, 8885]],
        [0, "rtrif", [0, 3953222, 9656]],
        [0, "rtriltri", [0, 3953222, 10702]],
        [0, "RuleDelayed", [0, 3953222, 10740]],
        [0, "ruluhar", [0, 3953222, 10600]],
        [0, "rx", [0, 3953222, 8478]],
        [0, "Sacute", [0, 3953222, 346]],
        [0, "sacute", [0, 3953222, 347]],
        [0, "sbquo", [0, 3953222, 8218]],
        [0, "Sc", [0, 3953222, 10940]],
        [0, "sc", [0, 3953222, 8827]],
        [0, "scap", [0, 3953222, 10936]],
        [0, "Scaron", [0, 3953222, 352]],
        [0, "scaron", [0, 3953222, 353]],
        [0, "sccue", [0, 3953222, 8829]],
        [0, "scE", [0, 3953222, 10932]],
        [0, "sce", [0, 3953222, 10928]],
        [0, "Scedil", [0, 3953222, 350]],
        [0, "scedil", [0, 3953222, 351]],
        [0, "Scirc", [0, 3953222, 348]],
        [0, "scirc", [0, 3953222, 349]],
        [0, "scnap", [0, 3953222, 10938]],
        [0, "scnE", [0, 3953222, 10934]],
        [0, "scnsim", [0, 3953222, 8937]],
        [0, "scpolint", [0, 3953222, 10771]],
        [0, "scsim", [0, 3953222, 8831]],
        [0, "Scy", [0, 3953222, 1057]],
        [0, "scy", [0, 3953222, 1089]],
        [0, "sdot", [0, 3953222, 8901]],
        [0, "sdotb", [0, 3953222, 8865]],
        [0, "sdote", [0, 3953222, 10854]],
        [0, "searhk", [0, 3953222, 10533]],
        [0, "seArr", [0, 3953222, 8664]],
        [0, "searr", [0, 3953222, 8600]],
        [0, "searrow", [0, 3953222, 8600]],
        [0, "sect", [0, 3953222, 167]],
        [0, "sec", [0, 3953222, 167]],
        [0, "semi", [0, 3953222, 59]],
        [0, "seswar", [0, 3953222, 10537]],
        [0, "setminus", [0, 3953222, 8726]],
        [0, "setmn", [0, 3953222, 8726]],
        [0, "sext", [0, 3953222, 10038]],
        [0, "Sfr", [0, 3953222, 120086]],
        [0, "sfr", [0, 3953222, 120112]],
        [0, "sfrown", [0, 3953222, 8994]],
        [0, "sharp", [0, 3953222, 9839]],
        [0, "SHCHcy", [0, 3953222, 1065]],
        [0, "shchcy", [0, 3953222, 1097]],
        [0, "SHcy", [0, 3953222, 1064]],
        [0, "shcy", [0, 3953222, 1096]],
        [0, "ShortDownArrow", [0, 3953222, 8595]],
        [0, "ShortLeftArrow", [0, 3953222, 8592]],
        [0, "shortmid", [0, 3953222, 8739]],
        [0, "shortparallel", [0, 3953222, 8741]],
        [0, "ShortRightArrow", [0, 3953222, 8594]],
        [0, "ShortUpArrow", [0, 3953222, 8593]],
        [0, "shy", [0, 3953222, 173]],
        [0, "sh", [0, 3953222, 173]],
        [0, "Sigma", [0, 3953222, 931]],
        [0, "sigma", [0, 3953222, 963]],
        [0, "sigmaf", [0, 3953222, 962]],
        [0, "sigmav", [0, 3953222, 962]],
        [0, "sim", [0, 3953222, 8764]],
        [0, "simdot", [0, 3953222, 10858]],
        [0, "sime", [0, 3953222, 8771]],
        [0, "simeq", [0, 3953222, 8771]],
        [0, "simg", [0, 3953222, 10910]],
        [0, "simgE", [0, 3953222, 10912]],
        [0, "siml", [0, 3953222, 10909]],
        [0, "simlE", [0, 3953222, 10911]],
        [0, "simne", [0, 3953222, 8774]],
        [0, "simplus", [0, 3953222, 10788]],
        [0, "simrarr", [0, 3953222, 10610]],
        [0, "slarr", [0, 3953222, 8592]],
        [0, "SmallCircle", [0, 3953222, 8728]],
        [0, "smallsetminus", [0, 3953222, 8726]],
        [0, "smashp", [0, 3953222, 10803]],
        [0, "smeparsl", [0, 3953222, 10724]],
        [0, "smid", [0, 3953222, 8739]],
        [0, "smile", [0, 3953222, 8995]],
        [0, "smt", [0, 3953222, 10922]],
        [0, "smte", [0, 3953222, 10924]],
        [0, "smtes", [0, 4203884, [0, 10924, 65024]]],
        [0, "SOFTcy", [0, 3953222, 1068]],
        [0, "softcy", [0, 3953222, 1100]],
        [0, "sol", [0, 3953222, 47]],
        [0, "solb", [0, 3953222, 10692]],
        [0, "solbar", [0, 3953222, 9023]],
        [0, "Sopf", [0, 3953222, 120138]],
        [0, "sopf", [0, 3953222, 120164]],
        [0, "spades", [0, 3953222, 9824]],
        [0, "spadesuit", [0, 3953222, 9824]],
        [0, "spar", [0, 3953222, 8741]],
        [0, "sqcap", [0, 3953222, 8851]],
        [0, "sqcaps", [0, 4203884, [0, 8851, 65024]]],
        [0, "sqcup", [0, 3953222, 8852]],
        [0, "sqcups", [0, 4203884, [0, 8852, 65024]]],
        [0, "Sqrt", [0, 3953222, 8730]],
        [0, "sqsub", [0, 3953222, 8847]],
        [0, "sqsube", [0, 3953222, 8849]],
        [0, "sqsubset", [0, 3953222, 8847]],
        [0, "sqsubseteq", [0, 3953222, 8849]],
        [0, "sqsup", [0, 3953222, 8848]],
        [0, "sqsupe", [0, 3953222, 8850]],
        [0, "sqsupset", [0, 3953222, 8848]],
        [0, "sqsupseteq", [0, 3953222, 8850]],
        [0, "squ", [0, 3953222, 9633]],
        [0, "Square", [0, 3953222, 9633]],
        [0, "square", [0, 3953222, 9633]],
        [0, "SquareIntersection", [0, 3953222, 8851]],
        [0, "SquareSubset", [0, 3953222, 8847]],
        [0, "SquareSubsetEqual", [0, 3953222, 8849]],
        [0, "SquareSuperset", [0, 3953222, 8848]],
        [0, "SquareSupersetEqual", [0, 3953222, 8850]],
        [0, "SquareUnion", [0, 3953222, 8852]],
        [0, "squarf", [0, 3953222, 9642]],
        [0, "squf", [0, 3953222, 9642]],
        [0, "srarr", [0, 3953222, 8594]],
        [0, "Sscr", [0, 3953222, 119982]],
        [0, "sscr", [0, 3953222, 120008]],
        [0, "ssetmn", [0, 3953222, 8726]],
        [0, "ssmile", [0, 3953222, 8995]],
        [0, "sstarf", [0, 3953222, 8902]],
        [0, "Star", [0, 3953222, 8902]],
        [0, "star", [0, 3953222, 9734]],
        [0, "starf", [0, 3953222, 9733]],
        [0, "straightepsilon", [0, 3953222, 1013]],
        [0, "straightphi", [0, 3953222, 981]],
        [0, "strns", [0, 3953222, 175]],
        [0, "Sub", [0, 3953222, 8912]],
        [0, "sub", [0, 3953222, 8834]],
        [0, "subdot", [0, 3953222, 10941]],
        [0, "subE", [0, 3953222, 10949]],
        [0, "sube", [0, 3953222, 8838]],
        [0, "subedot", [0, 3953222, 10947]],
        [0, "submult", [0, 3953222, 10945]],
        [0, "subnE", [0, 3953222, 10955]],
        [0, "subne", [0, 3953222, 8842]],
        [0, "subplus", [0, 3953222, 10943]],
        [0, "subrarr", [0, 3953222, 10617]],
        [0, "Subset", [0, 3953222, 8912]],
        [0, "subset", [0, 3953222, 8834]],
        [0, "subseteq", [0, 3953222, 8838]],
        [0, "subseteqq", [0, 3953222, 10949]],
        [0, "SubsetEqual", [0, 3953222, 8838]],
        [0, "subsetneq", [0, 3953222, 8842]],
        [0, "subsetneqq", [0, 3953222, 10955]],
        [0, "subsim", [0, 3953222, 10951]],
        [0, "subsub", [0, 3953222, 10965]],
        [0, "subsup", [0, 3953222, 10963]],
        [0, "succ", [0, 3953222, 8827]],
        [0, "succapprox", [0, 3953222, 10936]],
        [0, "succcurlyeq", [0, 3953222, 8829]],
        [0, "Succeeds", [0, 3953222, 8827]],
        [0, "SucceedsEqual", [0, 3953222, 10928]],
        [0, "SucceedsSlantEqual", [0, 3953222, 8829]],
        [0, "SucceedsTilde", [0, 3953222, 8831]],
        [0, "succeq", [0, 3953222, 10928]],
        [0, "succnapprox", [0, 3953222, 10938]],
        [0, "succneqq", [0, 3953222, 10934]],
        [0, "succnsim", [0, 3953222, 8937]],
        [0, "succsim", [0, 3953222, 8831]],
        [0, "SuchThat", [0, 3953222, 8715]],
        [0, "Sum", [0, 3953222, 8721]],
        [0, "sum", [0, 3953222, 8721]],
        [0, "sung", [0, 3953222, 9834]],
        [0, "Sup", [0, 3953222, 8913]],
        [0, cst_sup, [0, 3953222, 8835]],
        [0, "sup1", [0, 3953222, 185]],
        [0, cst_sup, [0, 3953222, 185]],
        [0, "sup2", [0, 3953222, 178]],
        [0, cst_sup, [0, 3953222, 178]],
        [0, "sup3", [0, 3953222, 179]],
        [0, cst_sup, [0, 3953222, 179]],
        [0, "supdot", [0, 3953222, 10942]],
        [0, "supdsub", [0, 3953222, 10968]],
        [0, "supE", [0, 3953222, 10950]],
        [0, "supe", [0, 3953222, 8839]],
        [0, "supedot", [0, 3953222, 10948]],
        [0, "Superset", [0, 3953222, 8835]],
        [0, "SupersetEqual", [0, 3953222, 8839]],
        [0, "suphsol", [0, 3953222, 10185]],
        [0, "suphsub", [0, 3953222, 10967]],
        [0, "suplarr", [0, 3953222, 10619]],
        [0, "supmult", [0, 3953222, 10946]],
        [0, "supnE", [0, 3953222, 10956]],
        [0, "supne", [0, 3953222, 8843]],
        [0, "supplus", [0, 3953222, 10944]],
        [0, "Supset", [0, 3953222, 8913]],
        [0, "supset", [0, 3953222, 8835]],
        [0, "supseteq", [0, 3953222, 8839]],
        [0, "supseteqq", [0, 3953222, 10950]],
        [0, "supsetneq", [0, 3953222, 8843]],
        [0, "supsetneqq", [0, 3953222, 10956]],
        [0, "supsim", [0, 3953222, 10952]],
        [0, "supsub", [0, 3953222, 10964]],
        [0, "supsup", [0, 3953222, 10966]],
        [0, "swarhk", [0, 3953222, 10534]],
        [0, "swArr", [0, 3953222, 8665]],
        [0, "swarr", [0, 3953222, 8601]],
        [0, "swarrow", [0, 3953222, 8601]],
        [0, "swnwar", [0, 3953222, 10538]],
        [0, "szlig", [0, 3953222, 223]],
        [0, "szli", [0, 3953222, 223]],
        [0, "Tab", [0, 3953222, 9]],
        [0, "target", [0, 3953222, 8982]],
        [0, "Tau", [0, 3953222, 932]],
        [0, "tau", [0, 3953222, 964]],
        [0, "tbrk", [0, 3953222, 9140]],
        [0, "Tcaron", [0, 3953222, 356]],
        [0, "tcaron", [0, 3953222, 357]],
        [0, "Tcedil", [0, 3953222, 354]],
        [0, "tcedil", [0, 3953222, 355]],
        [0, "Tcy", [0, 3953222, 1058]],
        [0, "tcy", [0, 3953222, 1090]],
        [0, "tdot", [0, 3953222, 8411]],
        [0, "telrec", [0, 3953222, 8981]],
        [0, "Tfr", [0, 3953222, 120087]],
        [0, "tfr", [0, 3953222, 120113]],
        [0, "there4", [0, 3953222, 8756]],
        [0, "Therefore", [0, 3953222, 8756]],
        [0, "therefore", [0, 3953222, 8756]],
        [0, "Theta", [0, 3953222, 920]],
        [0, "theta", [0, 3953222, 952]],
        [0, "thetasym", [0, 3953222, 977]],
        [0, "thetav", [0, 3953222, 977]],
        [0, "thickapprox", [0, 3953222, 8776]],
        [0, "thicksim", [0, 3953222, 8764]],
        [0, "ThickSpace", [0, 4203884, [0, 8287, 8202]]],
        [0, "thinsp", [0, 3953222, 8201]],
        [0, "ThinSpace", [0, 3953222, 8201]],
        [0, "thkap", [0, 3953222, 8776]],
        [0, "thksim", [0, 3953222, 8764]],
        [0, "THORN", [0, 3953222, 222]],
        [0, "THOR", [0, 3953222, 222]],
        [0, "thorn", [0, 3953222, 254]],
        [0, "thor", [0, 3953222, 254]],
        [0, "Tilde", [0, 3953222, 8764]],
        [0, "tilde", [0, 3953222, 732]],
        [0, "TildeEqual", [0, 3953222, 8771]],
        [0, "TildeFullEqual", [0, 3953222, 8773]],
        [0, "TildeTilde", [0, 3953222, 8776]],
        [0, "times", [0, 3953222, 215]],
        [0, "time", [0, 3953222, 215]],
        [0, "timesb", [0, 3953222, 8864]],
        [0, "timesbar", [0, 3953222, 10801]],
        [0, "timesd", [0, 3953222, 10800]],
        [0, "tint", [0, 3953222, 8749]],
        [0, "toea", [0, 3953222, 10536]],
        [0, "top", [0, 3953222, 8868]],
        [0, "topbot", [0, 3953222, 9014]],
        [0, "topcir", [0, 3953222, 10993]],
        [0, "Topf", [0, 3953222, 120139]],
        [0, "topf", [0, 3953222, 120165]],
        [0, "topfork", [0, 3953222, 10970]],
        [0, "tosa", [0, 3953222, 10537]],
        [0, "tprime", [0, 3953222, 8244]],
        [0, "TRADE", [0, 3953222, 8482]],
        [0, "trade", [0, 3953222, 8482]],
        [0, "triangle", [0, 3953222, 9653]],
        [0, "triangledown", [0, 3953222, 9663]],
        [0, "triangleleft", [0, 3953222, 9667]],
        [0, "trianglelefteq", [0, 3953222, 8884]],
        [0, "triangleq", [0, 3953222, 8796]],
        [0, "triangleright", [0, 3953222, 9657]],
        [0, "trianglerighteq", [0, 3953222, 8885]],
        [0, "tridot", [0, 3953222, 9708]],
        [0, "trie", [0, 3953222, 8796]],
        [0, "triminus", [0, 3953222, 10810]],
        [0, "TripleDot", [0, 3953222, 8411]],
        [0, "triplus", [0, 3953222, 10809]],
        [0, "trisb", [0, 3953222, 10701]],
        [0, "tritime", [0, 3953222, 10811]],
        [0, "trpezium", [0, 3953222, 9186]],
        [0, "Tscr", [0, 3953222, 119983]],
        [0, "tscr", [0, 3953222, 120009]],
        [0, "TScy", [0, 3953222, 1062]],
        [0, "tscy", [0, 3953222, 1094]],
        [0, "TSHcy", [0, 3953222, 1035]],
        [0, "tshcy", [0, 3953222, 1115]],
        [0, "Tstrok", [0, 3953222, 358]],
        [0, "tstrok", [0, 3953222, 359]],
        [0, "twixt", [0, 3953222, 8812]],
        [0, "twoheadleftarrow", [0, 3953222, 8606]],
        [0, "twoheadrightarrow", [0, 3953222, 8608]],
        [0, "Uacute", [0, 3953222, 218]],
        [0, "Uacut", [0, 3953222, 218]],
        [0, "uacute", [0, 3953222, 250]],
        [0, "uacut", [0, 3953222, 250]],
        [0, "Uarr", [0, 3953222, 8607]],
        [0, "uArr", [0, 3953222, 8657]],
        [0, "uarr", [0, 3953222, 8593]],
        [0, "Uarrocir", [0, 3953222, 10569]],
        [0, "Ubrcy", [0, 3953222, 1038]],
        [0, "ubrcy", [0, 3953222, 1118]],
        [0, "Ubreve", [0, 3953222, 364]],
        [0, "ubreve", [0, 3953222, 365]],
        [0, "Ucirc", [0, 3953222, 219]],
        [0, "Ucir", [0, 3953222, 219]],
        [0, "ucirc", [0, 3953222, 251]],
        [0, "ucir", [0, 3953222, 251]],
        [0, "Ucy", [0, 3953222, 1059]],
        [0, "ucy", [0, 3953222, 1091]],
        [0, "udarr", [0, 3953222, 8645]],
        [0, "Udblac", [0, 3953222, 368]],
        [0, "udblac", [0, 3953222, 369]],
        [0, "udhar", [0, 3953222, 10606]],
        [0, "ufisht", [0, 3953222, 10622]],
        [0, "Ufr", [0, 3953222, 120088]],
        [0, "ufr", [0, 3953222, 120114]],
        [0, "Ugrave", [0, 3953222, 217]],
        [0, "Ugrav", [0, 3953222, 217]],
        [0, "ugrave", [0, 3953222, 249]],
        [0, "ugrav", [0, 3953222, 249]],
        [0, "uHar", [0, 3953222, 10595]],
        [0, "uharl", [0, 3953222, 8639]],
        [0, "uharr", [0, 3953222, 8638]],
        [0, "uhblk", [0, 3953222, 9600]],
        [0, "ulcorn", [0, 3953222, 8988]],
        [0, "ulcorner", [0, 3953222, 8988]],
        [0, "ulcrop", [0, 3953222, 8975]],
        [0, "ultri", [0, 3953222, 9720]],
        [0, "Umacr", [0, 3953222, 362]],
        [0, "umacr", [0, 3953222, 363]],
        [0, "uml", [0, 3953222, 168]],
        [0, "um", [0, 3953222, 168]],
        [0, "UnderBar", [0, 3953222, 95]],
        [0, "UnderBrace", [0, 3953222, 9183]],
        [0, "UnderBracket", [0, 3953222, 9141]],
        [0, "UnderParenthesis", [0, 3953222, 9181]],
        [0, "Union", [0, 3953222, 8899]],
        [0, "UnionPlus", [0, 3953222, 8846]],
        [0, "Uogon", [0, 3953222, 370]],
        [0, "uogon", [0, 3953222, 371]],
        [0, "Uopf", [0, 3953222, 120140]],
        [0, "uopf", [0, 3953222, 120166]],
        [0, "UpArrow", [0, 3953222, 8593]],
        [0, "Uparrow", [0, 3953222, 8657]],
        [0, "uparrow", [0, 3953222, 8593]],
        [0, "UpArrowBar", [0, 3953222, 10514]],
        [0, "UpArrowDownArrow", [0, 3953222, 8645]],
        [0, "UpDownArrow", [0, 3953222, 8597]],
        [0, "Updownarrow", [0, 3953222, 8661]],
        [0, "updownarrow", [0, 3953222, 8597]],
        [0, "UpEquilibrium", [0, 3953222, 10606]],
        [0, "upharpoonleft", [0, 3953222, 8639]],
        [0, "upharpoonright", [0, 3953222, 8638]],
        [0, "uplus", [0, 3953222, 8846]],
        [0, "UpperLeftArrow", [0, 3953222, 8598]],
        [0, "UpperRightArrow", [0, 3953222, 8599]],
        [0, "Upsi", [0, 3953222, 978]],
        [0, "upsi", [0, 3953222, 965]],
        [0, "upsih", [0, 3953222, 978]],
        [0, "Upsilon", [0, 3953222, 933]],
        [0, "upsilon", [0, 3953222, 965]],
        [0, "UpTee", [0, 3953222, 8869]],
        [0, "UpTeeArrow", [0, 3953222, 8613]],
        [0, "upuparrows", [0, 3953222, 8648]],
        [0, "urcorn", [0, 3953222, 8989]],
        [0, "urcorner", [0, 3953222, 8989]],
        [0, "urcrop", [0, 3953222, 8974]],
        [0, "Uring", [0, 3953222, 366]],
        [0, "uring", [0, 3953222, 367]],
        [0, "urtri", [0, 3953222, 9721]],
        [0, "Uscr", [0, 3953222, 119984]],
        [0, "uscr", [0, 3953222, 120010]],
        [0, "utdot", [0, 3953222, 8944]],
        [0, "Utilde", [0, 3953222, 360]],
        [0, "utilde", [0, 3953222, 361]],
        [0, "utri", [0, 3953222, 9653]],
        [0, "utrif", [0, 3953222, 9652]],
        [0, "uuarr", [0, 3953222, 8648]],
        [0, "Uuml", [0, 3953222, 220]],
        [0, "Uum", [0, 3953222, 220]],
        [0, "uuml", [0, 3953222, 252]],
        [0, "uum", [0, 3953222, 252]],
        [0, "uwangle", [0, 3953222, 10663]],
        [0, "vangrt", [0, 3953222, 10652]],
        [0, "varepsilon", [0, 3953222, 1013]],
        [0, "varkappa", [0, 3953222, 1008]],
        [0, "varnothing", [0, 3953222, 8709]],
        [0, "varphi", [0, 3953222, 981]],
        [0, "varpi", [0, 3953222, 982]],
        [0, "varpropto", [0, 3953222, 8733]],
        [0, "vArr", [0, 3953222, 8661]],
        [0, "varr", [0, 3953222, 8597]],
        [0, "varrho", [0, 3953222, 1009]],
        [0, "varsigma", [0, 3953222, 962]],
        [0, "varsubsetneq", [0, 4203884, [0, 8842, 65024]]],
        [0, "varsubsetneqq", [0, 4203884, [0, 10955, 65024]]],
        [0, "varsupsetneq", [0, 4203884, [0, 8843, 65024]]],
        [0, "varsupsetneqq", [0, 4203884, [0, 10956, 65024]]],
        [0, "vartheta", [0, 3953222, 977]],
        [0, "vartriangleleft", [0, 3953222, 8882]],
        [0, "vartriangleright", [0, 3953222, 8883]],
        [0, "Vbar", [0, 3953222, 10987]],
        [0, "vBar", [0, 3953222, 10984]],
        [0, "vBarv", [0, 3953222, 10985]],
        [0, "Vcy", [0, 3953222, 1042]],
        [0, "vcy", [0, 3953222, 1074]],
        [0, "VDash", [0, 3953222, 8875]],
        [0, "Vdash", [0, 3953222, 8873]],
        [0, "vDash", [0, 3953222, 8872]],
        [0, "vdash", [0, 3953222, 8866]],
        [0, "Vdashl", [0, 3953222, 10982]],
        [0, "Vee", [0, 3953222, 8897]],
        [0, "vee", [0, 3953222, 8744]],
        [0, "veebar", [0, 3953222, 8891]],
        [0, "veeeq", [0, 3953222, 8794]],
        [0, "vellip", [0, 3953222, 8942]],
        [0, "Verbar", [0, 3953222, 8214]],
        [0, "verbar", [0, 3953222, 124]],
        [0, "Vert", [0, 3953222, 8214]],
        [0, "vert", [0, 3953222, 124]],
        [0, "VerticalBar", [0, 3953222, 8739]],
        [0, "VerticalLine", [0, 3953222, 124]],
        [0, "VerticalSeparator", [0, 3953222, 10072]],
        [0, "VerticalTilde", [0, 3953222, 8768]],
        [0, "VeryThinSpace", [0, 3953222, 8202]],
        [0, "Vfr", [0, 3953222, 120089]],
        [0, "vfr", [0, 3953222, 120115]],
        [0, "vltri", [0, 3953222, 8882]],
        [0, "vnsub", [0, 4203884, [0, 8834, 8402]]],
        [0, "vnsup", [0, 4203884, [0, 8835, 8402]]],
        [0, "Vopf", [0, 3953222, 120141]],
        [0, "vopf", [0, 3953222, 120167]],
        [0, "vprop", [0, 3953222, 8733]],
        [0, "vrtri", [0, 3953222, 8883]],
        [0, "Vscr", [0, 3953222, 119985]],
        [0, "vscr", [0, 3953222, 120011]],
        [0, "vsubnE", [0, 4203884, [0, 10955, 65024]]],
        [0, "vsubne", [0, 4203884, [0, 8842, 65024]]],
        [0, "vsupnE", [0, 4203884, [0, 10956, 65024]]],
        [0, "vsupne", [0, 4203884, [0, 8843, 65024]]],
        [0, "Vvdash", [0, 3953222, 8874]],
        [0, "vzigzag", [0, 3953222, 10650]],
        [0, "Wcirc", [0, 3953222, 372]],
        [0, "wcirc", [0, 3953222, 373]],
        [0, "wedbar", [0, 3953222, 10847]],
        [0, "Wedge", [0, 3953222, 8896]],
        [0, "wedge", [0, 3953222, 8743]],
        [0, "wedgeq", [0, 3953222, 8793]],
        [0, "weierp", [0, 3953222, 8472]],
        [0, "Wfr", [0, 3953222, 120090]],
        [0, "wfr", [0, 3953222, 120116]],
        [0, "Wopf", [0, 3953222, 120142]],
        [0, "wopf", [0, 3953222, 120168]],
        [0, "wp", [0, 3953222, 8472]],
        [0, "wr", [0, 3953222, 8768]],
        [0, "wreath", [0, 3953222, 8768]],
        [0, "Wscr", [0, 3953222, 119986]],
        [0, "wscr", [0, 3953222, 120012]],
        [0, "xcap", [0, 3953222, 8898]],
        [0, "xcirc", [0, 3953222, 9711]],
        [0, "xcup", [0, 3953222, 8899]],
        [0, "xdtri", [0, 3953222, 9661]],
        [0, "Xfr", [0, 3953222, 120091]],
        [0, "xfr", [0, 3953222, 120117]],
        [0, "xhArr", [0, 3953222, 10234]],
        [0, "xharr", [0, 3953222, 10231]],
        [0, "Xi", [0, 3953222, 926]],
        [0, "xi", [0, 3953222, 958]],
        [0, "xlArr", [0, 3953222, 10232]],
        [0, "xlarr", [0, 3953222, 10229]],
        [0, "xmap", [0, 3953222, 10236]],
        [0, "xnis", [0, 3953222, 8955]],
        [0, "xodot", [0, 3953222, 10752]],
        [0, "Xopf", [0, 3953222, 120143]],
        [0, "xopf", [0, 3953222, 120169]],
        [0, "xoplus", [0, 3953222, 10753]],
        [0, "xotime", [0, 3953222, 10754]],
        [0, "xrArr", [0, 3953222, 10233]],
        [0, "xrarr", [0, 3953222, 10230]],
        [0, "Xscr", [0, 3953222, 119987]],
        [0, "xscr", [0, 3953222, 120013]],
        [0, "xsqcup", [0, 3953222, 10758]],
        [0, "xuplus", [0, 3953222, 10756]],
        [0, "xutri", [0, 3953222, 9651]],
        [0, "xvee", [0, 3953222, 8897]],
        [0, "xwedge", [0, 3953222, 8896]],
        [0, "Yacute", [0, 3953222, 221]],
        [0, "Yacut", [0, 3953222, 221]],
        [0, "yacute", [0, 3953222, 253]],
        [0, "yacut", [0, 3953222, 253]],
        [0, "YAcy", [0, 3953222, 1071]],
        [0, "yacy", [0, 3953222, 1103]],
        [0, "Ycirc", [0, 3953222, 374]],
        [0, "ycirc", [0, 3953222, 375]],
        [0, "Ycy", [0, 3953222, 1067]],
        [0, "ycy", [0, 3953222, 1099]],
        [0, "yen", [0, 3953222, 165]],
        [0, "ye", [0, 3953222, 165]],
        [0, "Yfr", [0, 3953222, 120092]],
        [0, "yfr", [0, 3953222, 120118]],
        [0, "YIcy", [0, 3953222, 1031]],
        [0, "yicy", [0, 3953222, 1111]],
        [0, "Yopf", [0, 3953222, 120144]],
        [0, "yopf", [0, 3953222, 120170]],
        [0, "Yscr", [0, 3953222, 119988]],
        [0, "yscr", [0, 3953222, 120014]],
        [0, "YUcy", [0, 3953222, 1070]],
        [0, "yucy", [0, 3953222, 1102]],
        [0, "Yuml", [0, 3953222, 376]],
        [0, "yuml", [0, 3953222, 255]],
        [0, "yum", [0, 3953222, 255]],
        [0, "Zacute", [0, 3953222, 377]],
        [0, "zacute", [0, 3953222, 378]],
        [0, "Zcaron", [0, 3953222, 381]],
        [0, "zcaron", [0, 3953222, 382]],
        [0, "Zcy", [0, 3953222, 1047]],
        [0, "zcy", [0, 3953222, 1079]],
        [0, "Zdot", [0, 3953222, 379]],
        [0, "zdot", [0, 3953222, 380]],
        [0, "zeetrf", [0, 3953222, 8488]],
        [0, "ZeroWidthSpace", [0, 3953222, 8203]],
        [0, "Zeta", [0, 3953222, 918]],
        [0, "zeta", [0, 3953222, 950]],
        [0, "Zfr", [0, 3953222, 8488]],
        [0, "zfr", [0, 3953222, 120119]],
        [0, "ZHcy", [0, 3953222, 1046]],
        [0, "zhcy", [0, 3953222, 1078]],
        [0, "zigrarr", [0, 3953222, 8669]],
        [0, "Zopf", [0, 3953222, 8484]],
        [0, "zopf", [0, 3953222, 120171]],
        [0, "Zscr", [0, 3953222, 119989]],
        [0, "zscr", [0, 3953222, 120015]],
        [0, "zwj", [0, 3953222, 8205]],
        [0, "zwnj", [0, 3953222, 8204]]].slice
       (),
    Markup_Entities = [0, entities];
   runtime.caml_register_global(1, Markup_Entities, "Markup__Entities");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Utility
//# unitInfo: Requires: Markup__Common, Markup__Entities, Markup__Kstream, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst$0 = "\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    Markup_Entities = global_data.Markup__Entities,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Markup_Common = global_data.Markup__Common,
    Markup_Kstream = global_data.Markup__Kstream,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    _k_ = [0, 4400567, [0, "1.0", [0, "utf-8"], 0]],
    cst_http_www_w3_org_TR_xhtml1_ =
      '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"',
    cst_html_PUBLIC_W3C_DTD_XHTML_ =
      'html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" ',
    cst_http_www_w3_org_TR_xhtml1_$0 =
      '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"',
    cst_html_PUBLIC_W3C_DTD_XHTML_$1 =
      'html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ',
    cst_http_www_w3_org_TR_xhtml1_$1 =
      '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"',
    cst_html_PUBLIC_W3C_DTD_XHTML_$2 =
      'html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ',
    cst_http_www_w3_org_TR_xhtml11 =
      '"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"',
    cst_html_PUBLIC_W3C_DTD_XHTML_$0 =
      'html PUBLIC "-//W3C//DTD XHTML 1.1//EN" ',
    _j_ = [0, 990181650, [0, [0, "html"], 0, 0, 0, 0]],
    _i_ = [0, [0, 936573133, [0, cst$0, 0]], 0],
    _f_ = [0, [0, 936573133, [0, cst$0, 0]], 0],
    _g_ = [0, [0, 936573133, [0, cst$0, 0]], 0],
    _e_ = [0, [0, 936573133, [0, cst$0, 0]], 0],
    _h_ = [0, [0, 936573133, [0, cst$0, 0]], 0],
    _d_ = [0, 0],
    _a_ = [0, 0],
    _b_ = [0, 1],
    _c_ = [0, 0];
   function content(s){
    function filter(signal, param, k){
     a:
     if(typeof signal !== "number"){
      var _av_ = signal[1];
      if(856096383 <= _av_ && 990181650 > _av_) break a;
      return caml_call1(k, 0);
     }
     return caml_call1(k, [0, signal]);
    }
    return caml_call2(Markup_Kstream[21], filter, s);
   }
   function strings_to_bytes(strings){
    var current_string = [0, cst], index = [0, 0];
    function emit(throw$0, e, k){
     if(index[1] < caml_ml_string_length(current_string[1])){
      index[1] = index[1] + 1 | 0;
      return caml_call1
              (k,
               runtime.caml_string_get(current_string[1], index[1] - 1 | 0));
     }
     function _au_(s){
      current_string[1] = s;
      index[1] = 0;
      return emit(throw$0, e, k);
     }
     return caml_call4(Markup_Kstream[4], strings, throw$0, e, _au_);
    }
    return caml_call1(Markup_Kstream[1], emit);
   }
   function unwrap_lists(ls){
    var current_list = [0, 0];
    function emit(throw$0, e, k){
     var match = current_list[1];
     if(match){
      var l = match[2], v = match[1];
      current_list[1] = l;
      return caml_call1(k, v);
     }
     function _at_(l){current_list[1] = l; return emit(throw$0, e, k);}
     return caml_call4(Markup_Kstream[4], ls, throw$0, e, _at_);
    }
    return caml_call1(Markup_Kstream[1], emit);
   }
   function trees(text, element, comment, pi, xml, doctype, s){
    function match_node(throw$0, k, none){
     function _ar_(param){
      if(typeof param === "number") return caml_call1(none, 0);
      var _as_ = param[1];
      if(4400567 > _as_){
       if(17913 <= _as_){
        var match$0 = param[2], s = match$0[2], t = match$0[1];
        if(! pi) return match_node(throw$0, k, none);
        var pi$0 = pi[1];
        return caml_call1(k, caml_call2(pi$0, t, s));
       }
       var s$0 = param[2];
       if(! comment) return match_node(throw$0, k, none);
       var comment$0 = comment[1];
       return caml_call1(k, caml_call1(comment$0, s$0));
      }
      if(936573133 > _as_){
       if(856096383 <= _as_){
        var match = param[2], attributes = match[2], name = match[1];
        return match_content
                (0,
                 throw$0,
                 function(children){
                  if(! element) return match_node(throw$0, k, none);
                  var element$0 = element[1];
                  return caml_call1
                          (k, caml_call3(element$0, name, attributes, children));
                 });
       }
       var x = param[2];
       if(! xml) return match_node(throw$0, k, none);
       var xml$0 = xml[1];
       return caml_call1(k, caml_call1(xml$0, x));
      }
      if(990181650 <= _as_){
       var d = param[2];
       if(! doctype) return match_node(throw$0, k, none);
       var doctype$0 = doctype[1];
       return caml_call1(k, caml_call1(doctype$0, d));
      }
      var ss = param[2];
      if(! text) return match_node(throw$0, k, none);
      var text$0 = text[1];
      return caml_call1(k, caml_call1(text$0, ss));
     }
     return caml_call4(Markup_Kstream[4], s, throw$0, none, _ar_);
    }
    function match_content(acc, throw$0, k){
     function _aq_(param){
      return caml_call1(k, caml_call1(Stdlib_List[10], acc));
     }
     return match_node
             (throw$0,
              function(n){return match_content([0, n, acc], throw$0, k);},
              _aq_);
    }
    function _ap_(throw$0, e, k){return match_node(throw$0, k, e);}
    return caml_call1(Markup_Kstream[1], _ap_);
   }
   function tree(text, element, comment, pi, xml, doctype, s, throw$0, k){
    var s$0 = trees(text, element, comment, pi, xml, doctype, s);
    function _an_(t){return caml_call1(k, [0, t]);}
    function _ao_(param){return caml_call1(k, 0);}
    return caml_call4(Markup_Kstream[4], s$0, throw$0, _ao_, _an_);
   }
   function from_tree(f, node){
    function traverse(acc, node){
     var node$0 = caml_call1(f, node), _am_ = node$0[1];
     if(-744106340 === _am_){
      var
       match = node$0[2],
       children = match[3],
       attributes = match[2],
       name = match[1],
       acc$0 =
         caml_call1
          (caml_call2
            (Stdlib_List[26],
             traverse,
             [0, [0, 856096383, [0, name, attributes]], acc]),
           children);
      return [0, 38565624, acc$0];
     }
     if(936573133 !== _am_) return [0, node$0, acc];
     var s = node$0[2];
     return [0, [0, 936573133, [0, s, 0]], acc];
    }
    var _ak_ = traverse(0, node), _al_ = caml_call1(Stdlib_List[10], _ak_);
    return caml_call1(Markup_Kstream[23], _al_);
   }
   function elements(select, s){
    var depth = [0, 0], started = [0, 0], finished = [0, 0];
    function scan(throw$0, e, k){
     function _ah_(signal){
      if(typeof signal === "number"){
       if(finished[1] < started[1]){
        depth[1] = depth[1] - 1 | 0;
        if(0 === depth[1]) finished[1] = started[1];
        return scan(throw$0, e, k);
       }
      }
      else if(856096383 === signal[1]){
       var match = signal[2], name = match[1], attributes = match[2];
       if(started[1] === finished[1] && caml_call2(select, name, attributes)){
        var index = started[1] + 1 | 0;
        started[1] = index;
        depth[1] = 0;
        var
         constructor =
           function(param, k){
            caml_call2(Markup_Kstream[8], s, signal);
            function _ai_(throw$0, e, k){
             if(index <= finished[1]) return caml_call1(e, 0);
             function _aj_(signal){
              if(typeof signal !== "number")
               return 856096383 === signal[1]
                       ? (depth[1] = depth[1] + 1 | 0, caml_call1(k, signal))
                       : caml_call1(k, signal);
              depth[1] = depth[1] - 1 | 0;
              if(0 === depth[1]) finished[1] = index;
              return caml_call1(k, signal);
             }
             return caml_call4(Markup_Kstream[4], s, throw$0, e, _aj_);
            }
            return caml_call1(k, caml_call1(Markup_Kstream[1], _ai_));
           };
        return caml_call1(k, caml_call1(Markup_Kstream[2], constructor));
       }
       if(finished[1] < started[1]){
        depth[1] = depth[1] + 1 | 0;
        return scan(throw$0, e, k);
       }
      }
      return scan(throw$0, e, k);
     }
     return caml_call4(Markup_Kstream[4], s, throw$0, e, _ah_);
    }
    return caml_call1(Markup_Kstream[1], scan);
   }
   function text(s){
    function filter(v, param, k){
     if(typeof v !== "number" && 936573133 === v[1]){var ss = v[2]; return caml_call1(k, [0, ss]);}
     return caml_call1(k, 0);
    }
    return strings_to_bytes
            (unwrap_lists(caml_call2(Markup_Kstream[21], filter, s)));
   }
   function normalize_text(s){
    function match_text(acc, throw$0, e, k){
     function _ad_(v){
      if(v){
       var match = v[1];
       if(typeof match !== "number" && 936573133 === match[1]){
        var ss$0 = match[2];
        return match_text([0, ss$0, acc], throw$0, e, k);
       }
      }
      caml_call2(Markup_Kstream[9], s, v);
      var
       _ae_ = caml_call1(Stdlib_List[10], acc),
       _af_ = caml_call1(Stdlib_List[15], _ae_);
      function _ag_(s){return 0 < caml_ml_string_length(s) ? 1 : 0;}
      var ss = caml_call1(caml_call1(Stdlib_List[44], _ag_), _af_);
      return ss
              ? caml_call1(k, [0, 936573133, ss])
              : match_other(throw$0, e, k);
     }
     return caml_call3(Markup_Kstream[5], s, throw$0, _ad_);
    }
    function match_other(throw$0, e, k){
     function _ac_(signal){
      if(typeof signal !== "number" && 936573133 === signal[1]){
       var ss = signal[2];
       return match_text([0, ss, 0], throw$0, e, k);
      }
      return caml_call1(k, signal);
     }
     return caml_call4(Markup_Kstream[4], s, throw$0, e, _ac_);
    }
    return caml_call1(Markup_Kstream[1], match_other);
   }
   function is_phrasing_element(param){
    var element_name = param[2], namespace = param[1];
    if(caml_string_notequal(namespace, Markup_Common[5])) return 0;
    var _$_ = caml_string_compare(element_name, "pre");
    a:
    {
     if(0 <= _$_){
      if(0 < _$_){
       var _aa_ = caml_string_compare(element_name, "span");
       if(0 <= _aa_){
        if
         (0 < _aa_
          &&
           caml_string_notequal(element_name, "strong")
           &&
            caml_string_notequal(element_name, "sub")
            &&
             caml_string_notequal(element_name, "sup")
             &&
              caml_string_notequal(element_name, "textarea")
              &&
               caml_string_notequal(element_name, "time")
               &&
                caml_string_notequal(element_name, "u")
                &&
                 caml_string_notequal(element_name, "var")
                 && caml_string_notequal(element_name, "wbr"))
         break a;
       }
       else if
        (caml_string_notequal(element_name, "q")
         &&
          caml_string_notequal(element_name, "rb")
          &&
           caml_string_notequal(element_name, "rt")
           &&
            caml_string_notequal(element_name, "ruby")
            &&
             caml_string_notequal(element_name, "s")
             &&
              caml_string_notequal(element_name, "samp")
              &&
               caml_string_notequal(element_name, "select")
               && caml_string_notequal(element_name, "small"))
        break a;
      }
     }
     else{
      var _ab_ = caml_string_compare(element_name, "data");
      if(0 <= _ab_){
       if
        (0 < _ab_
         &&
          caml_string_notequal(element_name, "dfn")
          &&
           caml_string_notequal(element_name, "em")
           &&
            caml_string_notequal(element_name, "i")
            &&
             caml_string_notequal(element_name, "img")
             &&
              caml_string_notequal(element_name, "input")
              &&
               caml_string_notequal(element_name, "kbd")
               &&
                caml_string_notequal(element_name, "label")
                && caml_string_notequal(element_name, "mark"))
        break a;
      }
      else if
       (caml_string_notequal(element_name, "a")
        &&
         caml_string_notequal(element_name, "abbr")
         &&
          caml_string_notequal(element_name, "b")
          &&
           caml_string_notequal(element_name, "bdi")
           &&
            caml_string_notequal(element_name, "bdo")
            &&
             caml_string_notequal(element_name, "br")
             &&
              caml_string_notequal(element_name, "button")
              &&
               caml_string_notequal(element_name, "cite")
               && caml_string_notequal(element_name, "code"))
       break a;
     }
     return 1;
    }
    return 0;
   }
   function trim_string_list(trim, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var more = param$0[2], s = param$0[1], s$0 = caml_call1(trim, s);
     if(caml_string_notequal(s$0, cst$1)) return [0, s$0, more];
     var param$0 = more;
    }
   }
   function trim(signals){
    var signals$0 = normalize_text(signals), _U_ = 0;
    function _V_(phrasing_nesting_level, signal, throw$0, k){
     if(typeof signal === "number"){
      if(38565624 === signal)
       return 0 < phrasing_nesting_level
               ? caml_call1
                 (k,
                  [0,
                   [0, [0, signal, 0], 0],
                   [0, phrasing_nesting_level - 1 | 0]])
               : caml_call1(k, [0, [0, [0, signal, 1], 0], _a_]);
     }
     else if(856096383 === signal[1]){
      var name = signal[2][1];
      return 0 < phrasing_nesting_level
              ? caml_call1
                (k,
                 [0,
                  [0, [0, signal, 0], 0],
                  [0, phrasing_nesting_level + 1 | 0]])
              : is_phrasing_element
                 (name)
                ? caml_call1(k, [0, [0, [0, signal, 0], 0], _b_])
                : caml_call1(k, [0, [0, [0, signal, 1], 0], _c_]);
     }
     return caml_call1
             (k, [0, [0, [0, signal, 0], 0], [0, phrasing_nesting_level]]);
    }
    var
     signals_and_flow = caml_call3(Markup_Kstream[17], _V_, _U_, signals$0),
     _W_ = 1;
    function _X_(saw_flow_tag, param, throw$0, k){
     var is_flow_tag = param[2], signal = param[1];
     if(typeof signal !== "number" && 936573133 === signal[1]){
      var
       ss = signal[2],
       ss$0 = saw_flow_tag ? trim_string_list(Markup_Common[34], ss) : ss,
       _Y_ =
         function(maybe_signal){
          a:
          {
           if(maybe_signal && maybe_signal[1][2]){
            var
             _Z_ = caml_call1(Stdlib_List[10], ss$0),
             ___ = trim_string_list(Markup_Common[35], _Z_),
             ss = caml_call1(Stdlib_List[10], ___);
            break a;
           }
           var ss = ss$0;
          }
          return caml_call1(k, [0, [0, [0, 936573133, ss], 0], _d_]);
         };
      return caml_call3(Markup_Kstream[12], signals_and_flow, throw$0, _Y_);
     }
     return caml_call1(k, [0, [0, signal, 0], [0, is_flow_tag]]);
    }
    var
     signals$1 = caml_call3(Markup_Kstream[17], _X_, _W_, signals_and_flow);
    return normalize_text(signals$1);
   }
   var tab_width = 1;
   function pretty_print(signals){
    var signals$0 = trim(signals);
    function indent(n){
     var n$0 = 0 <= n ? n : 0;
     return caml_call2(Stdlib_String[1], n$0 * 1 | 0, 32);
    }
    var
     current_state = [],
     flow =
       function _T_(_P_, _Q_, _R_, _S_){return _T_.fun(_P_, _Q_, _R_, _S_);},
     phrasing =
       function _O_(_J_, _K_, _L_, _M_, _N_){
        return _O_.fun(_J_, _K_, _L_, _M_, _N_);
       },
     list =
       function _I_(_D_, _E_, _F_, _G_, _H_){
        return _I_.fun(_D_, _E_, _F_, _G_, _H_);
       };
    caml_update_dummy
     (current_state,
      [0, function(throw$0, e, k){return caml_call4(flow, 0, throw$0, e, k);}]);
    caml_update_dummy
     (flow,
      function(indentation, throw$0, e, k){
       function _v_(signal){
        a:
        {
         if(typeof signal !== "number"){
          var _x_ = signal[1];
          if(856096383 === _x_){
           var name = signal[2][1];
           if(! is_phrasing_element(name)){
            var
             _z_ =
               function(next_signal){
                if
                 (typeof next_signal === "number" && 38565624 === next_signal){
                 var
                  _A_ =
                    function(param){
                     var _C_ = caml_call1(flow, indentation);
                     return caml_call5
                             (list,
                              [0,
                               [0, 936573133, [0, indent(indentation), 0]],
                               [0, signal, [0, next_signal, _f_]]],
                              _C_,
                              throw$0,
                              e,
                              k);
                    };
                 return caml_call3(Markup_Kstream[6], signals$0, throw$0, _A_);
                }
                var _B_ = caml_call1(flow, indentation + 1 | 0);
                return caml_call5
                        (list,
                         [0,
                          [0, 936573133, [0, indent(indentation), 0]],
                          [0, signal, _g_]],
                         _B_,
                         throw$0,
                         e,
                         k);
               };
            return caml_call3(Markup_Kstream[13], signals$0, throw$0, _z_);
           }
          }
          else if(936573133 !== _x_){
           if(990181650 === _x_)
            return caml_call5
                    (list,
                     [0, signal, _h_],
                     caml_call1(flow, indentation),
                     throw$0,
                     e,
                     k);
           break a;
          }
          caml_call2(Markup_Kstream[8], signals$0, signal);
          var _y_ = caml_call2(phrasing, indentation, 0);
          return caml_call5
                  (list,
                   [0, [0, 936573133, [0, indent(indentation), 0]], 0],
                   _y_,
                   throw$0,
                   e,
                   k);
         }
         if(38565624 === signal){
          var _w_ = caml_call1(flow, indentation - 1 | 0);
          return caml_call5
                  (list,
                   [0,
                    [0, 936573133, [0, indent(indentation - 1 | 0), 0]],
                    [0, signal, _e_]],
                   _w_,
                   throw$0,
                   e,
                   k);
         }
        }
        return caml_call5
                (list,
                 [0, signal, 0],
                 caml_call1(flow, indentation),
                 throw$0,
                 e,
                 k);
       }
       return caml_call4(Markup_Kstream[4], signals$0, throw$0, e, _v_);
      });
    caml_update_dummy
     (phrasing,
      function(indentation, phrasing_nesting_level, throw$0, e, k){
       function _t_(signal){
        if(typeof signal === "number"){
         if(38565624 === signal && 0 < phrasing_nesting_level)
          return caml_call5
                  (list,
                   [0, signal, 0],
                   caml_call2
                    (phrasing, indentation, phrasing_nesting_level - 1 | 0),
                   throw$0,
                   e,
                   k);
        }
        else{
         var _u_ = signal[1];
         if(856096383 === _u_){
          var name = signal[2][1];
          if(is_phrasing_element(name))
           return caml_call5
                   (list,
                    [0, signal, 0],
                    caml_call2
                     (phrasing, indentation, phrasing_nesting_level + 1 | 0),
                    throw$0,
                    e,
                    k);
         }
         else if(936573133 === _u_)
          return caml_call5
                  (list,
                   [0, signal, 0],
                   caml_call2(phrasing, indentation, phrasing_nesting_level),
                   throw$0,
                   e,
                   k);
        }
        caml_call2(Markup_Kstream[8], signals$0, signal);
        return caml_call5
                (list, _i_, caml_call1(flow, indentation), throw$0, e, k);
       }
       return caml_call4(Markup_Kstream[4], signals$0, throw$0, e, _t_);
      });
    caml_update_dummy
     (list,
      function(signals, state, throw$0, e, k){
       if(! signals) return caml_call3(state, throw$0, e, k);
       var more = signals[2], signal = signals[1];
       current_state[1] = caml_call2(list, more, state);
       return caml_call1(k, signal);
      });
    function _s_(throw$0, e, k){
     return caml_call3(current_state[1], throw$0, e, k);
    }
    return normalize_text(caml_call1(Markup_Kstream[1], _s_));
   }
   function html5(s){
    function remove_markup(v, param, k){
     a:
     if(typeof v !== "number"){
      var _r_ = v[1];
      if(856096383 <= _r_){
       if(990181650 > _r_) break a;
      }
      else if(17913 > _r_) break a;
      return caml_call1(k, 0);
     }
     return caml_call1(k, [0, v]);
    }
    var s$0 = caml_call1(caml_call1(Markup_Kstream[21], remove_markup), s);
    caml_call2(Markup_Kstream[8], s$0, _j_);
    return s$0;
   }
   function xhtml(dtd, s){
    a:
    {
     b:
     if(dtd){
      var _o_ = dtd[1];
      if(319668813 <= _o_){
       if(887602840 > _o_) break b;
       var
        _p_ =
          caml_call2
           (Stdlib[28],
            cst_html_PUBLIC_W3C_DTD_XHTML_,
            cst_http_www_w3_org_TR_xhtml1_);
      }
      else
       var
        _p_ =
          319668812 <= _o_
           ? caml_call2
             (Stdlib[28],
              cst_html_PUBLIC_W3C_DTD_XHTML_$1,
              cst_http_www_w3_org_TR_xhtml1_$0)
           : caml_call2
             (Stdlib[28],
              cst_html_PUBLIC_W3C_DTD_XHTML_$2,
              cst_http_www_w3_org_TR_xhtml1_$1);
      var doctype_text = _p_;
      break a;
     }
     var
      doctype_text =
        caml_call2
         (Stdlib[28],
          cst_html_PUBLIC_W3C_DTD_XHTML_$0,
          cst_http_www_w3_org_TR_xhtml11);
    }
    function remove_markup(v, param, k){
     a:
     if(typeof v !== "number"){
      var _q_ = v[1];
      if(4400567 !== _q_ && 990181650 > _q_) break a;
      return caml_call1(k, 0);
     }
     return caml_call1(k, [0, v]);
    }
    var s$0 = caml_call1(caml_call1(Markup_Kstream[21], remove_markup), s);
    caml_call2
     (Markup_Kstream[8],
      s$0,
      [0, 990181650, [0, 0, 0, 0, [0, doctype_text], 0]]);
    caml_call2(Markup_Kstream[8], s$0, _k_);
    return s$0;
   }
   function xhtml_entity(name){
    try{
     var buffer = caml_call1(Stdlib_Buffer[1], 8), index = 0;
     for(;;){
      if(Markup_Entities[1].length - 1 <= index)
       throw caml_maybe_attach_backtrace(Stdlib[3], 1);
      if
       (!
        caml_string_notequal
         (caml_check_bound(Markup_Entities[1], index)[1 + index][1], name))
       break;
      var index$0 = index + 1 | 0, index = index$0;
     }
     var match = caml_check_bound(Markup_Entities[1], index)[1 + index][2];
     if(4203884 <= match[1]){
      var match$0 = match[2], c = match$0[2], c$0 = match$0[1];
      caml_call2(Markup_Common[10], buffer, c$0);
      caml_call2(Markup_Common[10], buffer, c);
      var _m_ = [0, caml_call1(Stdlib_Buffer[2], buffer)];
     }
     else{
      var c$1 = match[2];
      caml_call2(Markup_Common[10], buffer, c$1);
      var _m_ = [0, caml_call1(Stdlib_Buffer[2], buffer)];
     }
     return _m_;
    }
    catch(_n_){
     var _l_ = caml_wrap_exception(_n_);
     if(_l_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_l_, 0);
    }
   }
   var
    Markup_Utility =
      [0,
       content,
       strings_to_bytes,
       unwrap_lists,
       trees,
       tree,
       from_tree,
       elements,
       text,
       normalize_text,
       is_phrasing_element,
       trim_string_list,
       trim,
       tab_width,
       pretty_print,
       html5,
       xhtml,
       xhtml_entity];
   runtime.caml_register_global(64, Markup_Utility, "Markup__Utility");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Trie
//# unitInfo: Requires: Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    lower_limit = 48,
    upper_limit = 122,
    array_size = 75;
   function create(param){return 0;}
   function edge_index(c){return c - 48 | 0;}
   function add(key, value, trie){
    function traverse(index, trie){
     if(runtime.caml_ml_string_length(key) <= index){
      if(typeof trie !== "number" && 1 === trie[0]){
       var children = trie[2];
       return [1, [0, value], children];
      }
      return [0, value];
     }
     var edge_index = runtime.caml_string_get(key, index) - 48 | 0;
     if(typeof trie === "number")
      var current_child = 0, children$0 = 0, value$0 = 0;
     else if(0 === trie[0])
      var v = trie[1], current_child = 0, children$0 = 0, value$0 = [0, v];
     else
      var
       children$3 = trie[2],
       value$1 = trie[1],
       current_child$0 =
         caml_check_bound(children$3, edge_index)[1 + edge_index],
       children$4 = [0, children$3],
       current_child = current_child$0,
       children$0 = children$4,
       value$0 = value$1;
     var child = traverse(index + 1 | 0, current_child);
     if(children$0){
      var children$1 = children$0[1];
      caml_check_bound(children$1, edge_index)[1 + edge_index] = child;
      var children$2 = children$1;
     }
     else
      var
       _b_ = function(i){return i === edge_index ? child : 0;},
       children$2 = caml_call2(Stdlib_Array[1], array_size, _b_);
     return [1, value$0, children$2];
    }
    return traverse(0, trie);
   }
   function matches(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var v = param[1]; return [0, v];}
    var match = param[1];
    if(! match) return 1;
    var v$0 = match[1];
    return [1, v$0];
   }
   function advance(c, param){
    if(typeof param !== "number" && 1 === param[0]){
     var children = param[2];
     if(c >= 48 && 122 >= c){
      var _a_ = c - 48 | 0;
      return caml_check_bound(children, _a_)[1 + _a_];
     }
     return 0;
    }
    return 0;
   }
   function guess_memory_usage(trie){
    function accumulate(words, param){
     if(typeof param === "number") return words + 1 | 0;
     if(0 === param[0]) return words + 2 | 0;
     var
      children = param[2],
      words$0 = (words + 4 | 0) + (children.length - 1) | 0;
     return caml_call3(Stdlib_Array[17], accumulate, words$0, children);
    }
    return accumulate(0, trie);
   }
   var
    Markup_Trie =
      [0,
       lower_limit,
       upper_limit,
       array_size,
       create,
       edge_index,
       add,
       matches,
       advance,
       guess_memory_usage];
   runtime.caml_register_global(1, Markup_Trie, "Markup__Trie");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Stream_io
//# unitInfo: Requires: Markup__Kstream, Stdlib, Stdlib__Buffer, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Markup_Kstream = global_data.Markup__Kstream,
    Stdlib_Buffer = global_data.Stdlib__Buffer;
   function state_fold(f, initial){
    var state = [0, initial];
    function _l_(throw$0, e, k){
     function _m_(param){
      var new_state = param[2], c = param[1];
      state[1] = new_state;
      return caml_call1(k, c);
     }
     return caml_call4(f, state[1], throw$0, e, _m_);
    }
    return caml_call1(Markup_Kstream[1], _l_);
   }
   function string(s){
    var _k_ = 0;
    return state_fold
            (function(i, param, e, k){
              return runtime.caml_ml_string_length(s) <= i
                      ? caml_call1(e, 0)
                      : caml_call1
                        (k, [0, runtime.caml_string_get(s, i), i + 1 | 0]);
             },
             _k_);
   }
   function buffer(b){
    var _j_ = 0;
    return state_fold
            (function(i, param, e, k){
              return caml_call1(Stdlib_Buffer[7], b) <= i
                      ? caml_call1(e, 0)
                      : caml_call1
                        (k, [0, caml_call2(Stdlib_Buffer[6], b, i), i + 1 | 0]);
             },
             _j_);
   }
   function channel(c){
    var
     ended = [0, 0],
     buffer = runtime.caml_create_bytes(4096),
     position = [0, 0],
     buffered = [0, 0],
     buffer_length = 4096;
    function _h_(throw$0, e, k){
     var position$0 = position[1];
     if(position$0 < buffered[1]){
      position[1] = position$0 + 1 | 0;
      return caml_call1(k, caml_bytes_get(buffer, position$0));
     }
     try{
      var
       _i_ = [0, caml_call4(Stdlib[84], c, buffer, 0, buffer_length)],
       result = _i_;
     }
     catch(exn$0){var exn = caml_wrap_exception(exn$0), result = [1, exn];}
     if(0 === result[0]){
      var n = result[1];
      return 0 === n
              ? (ended[1] = 1, caml_call1(e, 0))
              : (position
                 [1]
                = 1,
                buffered[1] = n,
                caml_call1(k, caml_bytes_get(buffer, 0)));
     }
     var exn$0 = result[1];
     return ended[1] ? caml_call1(e, 0) : caml_call1(throw$0, exn$0);
    }
    return caml_call1(Markup_Kstream[1], _h_);
   }
   function file(f){
    var c = caml_call1(Stdlib[79], f), s = channel(c);
    function _e_(throw$0, e, k){
     function _f_(param){caml_call1(Stdlib[94], c); return caml_call1(e, 0);}
     function _g_(exn){
      caml_call1(Stdlib[94], c);
      return caml_call1(throw$0, exn);
     }
     return caml_call4(Markup_Kstream[4], s, _g_, _f_, k);
    }
    var s$0 = caml_call1(Markup_Kstream[1], _e_);
    return [0, s$0, function(param){return caml_call1(Stdlib[94], c);}];
   }
   function to_buffer(s, throw$0, k){
    var buffer = caml_call1(Stdlib_Buffer[1], 4096);
    function _c_(param){return caml_call1(k, buffer);}
    function _d_(b, param, k){
     caml_call2(Stdlib_Buffer[12], buffer, b);
     return caml_call1(k, 0);
    }
    return caml_call4(Markup_Kstream[20], _d_, s, throw$0, _c_);
   }
   function to_string(s, throw$0, k){
    return to_buffer
            (s,
             throw$0,
             function(buffer){
              return caml_call1(k, caml_call1(Stdlib_Buffer[2], buffer));
             });
   }
   function to_channel(c, s, throw$0, k){
    function write(b, throw$0, k){
     try{caml_call2(Stdlib[65], c, b); var _b_ = 0, exn$0 = _b_;}
     catch(exn$1){var exn = caml_wrap_exception(exn$1), exn$0 = [0, exn];}
     if(! exn$0) return caml_call1(k, 0);
     var exn$1 = exn$0[1];
     return caml_call1(throw$0, exn$1);
    }
    return caml_call4(Markup_Kstream[20], write, s, throw$0, k);
   }
   function to_file(f, s, throw$0, k){
    var c = caml_call1(Stdlib[60], f);
    function _a_(param){caml_call1(Stdlib[77], c); return caml_call1(k, 0);}
    return to_channel
            (c,
             s,
             function(exn){
              caml_call1(Stdlib[77], c);
              return caml_call1(throw$0, exn);
             },
             _a_);
   }
   var
    Markup_Stream_io =
      [0,
       state_fold,
       string,
       buffer,
       channel,
       file,
       to_buffer,
       to_string,
       to_channel,
       to_file];
   runtime.caml_register_global(3, Markup_Stream_io, "Markup__Stream_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Encoding
//# unitInfo: Requires: Markup__Common, Markup__Error, Markup__Kstream, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__Printf, Stdlib__Uchar, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Markup_Kstream = global_data.Markup__Kstream,
    Stdlib = global_data.Stdlib,
    Markup_Common = global_data.Markup__Common,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Uutf = global_data.Uutf,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Markup_Error = global_data.Markup__Error,
    cst_Markup_Encoding_code_page_ =
      "Markup.Encoding.code_page: array does not have 256 entries",
    _b_ = [0, [0, [0, [0, [0, 0]]]], "%c%c%c%c"],
    cst_utf_8 = "utf-8",
    cst_utf_16be = "utf-16be",
    cst_utf_16le = "utf-16le",
    cst_iso_8859_1 = "iso-8859-1",
    cst_us_ascii = "us-ascii",
    cst_ucs_4be = "ucs-4be",
    cst_ucs_4le = "ucs-4le",
    cst_ucs_4be_transposed = "ucs-4be-transposed",
    cst_ucs_4le_transposed = "ucs-4le-transposed",
    _c_ =
      [0,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38,
       39,
       40,
       41,
       42,
       43,
       44,
       45,
       46,
       47,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       58,
       59,
       60,
       61,
       62,
       63,
       64,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       91,
       92,
       93,
       94,
       95,
       96,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       123,
       124,
       125,
       126,
       127,
       1026,
       1027,
       8218,
       1107,
       8222,
       8230,
       8224,
       8225,
       8364,
       8240,
       1033,
       8249,
       1034,
       1036,
       1035,
       1039,
       1106,
       8216,
       8217,
       8220,
       8221,
       8226,
       8211,
       8212,
       65533,
       8482,
       1113,
       8250,
       1114,
       1116,
       1115,
       1119,
       160,
       1038,
       1118,
       1032,
       164,
       1168,
       166,
       167,
       1025,
       169,
       1028,
       171,
       172,
       173,
       174,
       1031,
       176,
       177,
       1030,
       1110,
       1169,
       181,
       182,
       183,
       1105,
       8470,
       1108,
       187,
       1112,
       1029,
       1109,
       1111,
       1040,
       1041,
       1042,
       1043,
       1044,
       1045,
       1046,
       1047,
       1048,
       1049,
       1050,
       1051,
       1052,
       1053,
       1054,
       1055,
       1040,
       1057,
       1058,
       1059,
       1060,
       1061,
       1062,
       1063,
       1064,
       1065,
       1066,
       1067,
       1068,
       1069,
       1070,
       1071,
       1072,
       1073,
       1074,
       1075,
       1076,
       1077,
       1078,
       1079,
       1080,
       1081,
       1082,
       1083,
       1084,
       1085,
       1086,
       1087,
       1088,
       1089,
       1090,
       1091,
       1092,
       1093,
       1094,
       1095,
       1096,
       1097,
       1098,
       1099,
       1100,
       1101,
       1102,
       1103],
    _d_ =
      [0,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38,
       39,
       40,
       41,
       42,
       43,
       44,
       45,
       46,
       47,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       58,
       59,
       60,
       61,
       62,
       63,
       64,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       91,
       92,
       93,
       94,
       95,
       96,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       123,
       124,
       125,
       126,
       127,
       8364,
       129,
       8218,
       402,
       8222,
       8230,
       8224,
       8225,
       710,
       8240,
       352,
       8249,
       338,
       141,
       381,
       143,
       144,
       8216,
       8217,
       8220,
       8221,
       8226,
       8211,
       8212,
       732,
       8482,
       353,
       8250,
       339,
       157,
       382,
       376,
       160,
       161,
       162,
       163,
       164,
       165,
       166,
       167,
       168,
       169,
       170,
       171,
       172,
       173,
       174,
       175,
       176,
       177,
       178,
       179,
       180,
       181,
       182,
       183,
       184,
       185,
       186,
       187,
       188,
       189,
       190,
       191,
       192,
       193,
       194,
       195,
       196,
       197,
       198,
       199,
       200,
       201,
       202,
       203,
       204,
       205,
       206,
       207,
       208,
       209,
       210,
       211,
       212,
       213,
       214,
       215,
       216,
       217,
       218,
       219,
       220,
       221,
       222,
       223,
       224,
       225,
       226,
       227,
       228,
       229,
       230,
       231,
       232,
       233,
       234,
       235,
       236,
       237,
       238,
       239,
       240,
       241,
       242,
       243,
       244,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       252,
       253,
       254,
       255],
    _e_ =
      [0,
       0,
       1,
       2,
       3,
       156,
       9,
       134,
       127,
       151,
       141,
       142,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       157,
       133,
       8,
       135,
       24,
       25,
       146,
       143,
       28,
       29,
       30,
       31,
       128,
       129,
       130,
       131,
       132,
       10,
       23,
       27,
       136,
       137,
       138,
       139,
       140,
       5,
       6,
       7,
       144,
       145,
       22,
       147,
       148,
       149,
       150,
       4,
       152,
       153,
       154,
       155,
       20,
       21,
       158,
       26,
       32,
       160,
       226,
       228,
       224,
       225,
       227,
       229,
       231,
       241,
       162,
       46,
       60,
       40,
       43,
       124,
       38,
       233,
       234,
       235,
       232,
       237,
       238,
       239,
       236,
       223,
       33,
       36,
       42,
       41,
       59,
       172,
       45,
       47,
       194,
       196,
       192,
       193,
       195,
       197,
       199,
       209,
       166,
       44,
       37,
       95,
       62,
       63,
       248,
       201,
       202,
       203,
       200,
       205,
       206,
       207,
       204,
       96,
       58,
       35,
       64,
       39,
       61,
       34,
       216,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       171,
       187,
       240,
       253,
       254,
       177,
       176,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       170,
       186,
       230,
       184,
       198,
       164,
       181,
       126,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       161,
       191,
       208,
       221,
       222,
       174,
       94,
       163,
       165,
       183,
       169,
       167,
       182,
       188,
       189,
       190,
       91,
       93,
       175,
       168,
       180,
       215,
       123,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       173,
       244,
       246,
       242,
       243,
       245,
       125,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       185,
       251,
       252,
       249,
       250,
       255,
       92,
       247,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       178,
       212,
       214,
       210,
       211,
       213,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       179,
       219,
       220,
       217,
       218,
       159],
    _f_ =
      [0,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38,
       39,
       40,
       41,
       42,
       43,
       44,
       45,
       46,
       47,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       58,
       59,
       60,
       61,
       62,
       63,
       64,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       91,
       92,
       93,
       94,
       95,
       96,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       123,
       124,
       125,
       126,
       127,
       128,
       129,
       130,
       131,
       132,
       133,
       134,
       135,
       136,
       137,
       138,
       139,
       140,
       141,
       142,
       143,
       144,
       145,
       146,
       147,
       148,
       149,
       150,
       151,
       152,
       153,
       154,
       155,
       156,
       157,
       158,
       159,
       160,
       161,
       162,
       163,
       8364,
       165,
       352,
       167,
       353,
       169,
       170,
       171,
       172,
       173,
       174,
       175,
       176,
       177,
       178,
       179,
       381,
       181,
       182,
       183,
       382,
       185,
       186,
       187,
       338,
       339,
       376,
       191,
       192,
       193,
       194,
       195,
       196,
       197,
       198,
       199,
       200,
       201,
       202,
       203,
       204,
       205,
       206,
       207,
       208,
       209,
       210,
       211,
       212,
       213,
       214,
       215,
       216,
       217,
       218,
       219,
       220,
       221,
       222,
       223,
       224,
       225,
       226,
       227,
       228,
       229,
       230,
       231,
       232,
       233,
       234,
       235,
       236,
       237,
       238,
       239,
       240,
       241,
       242,
       243,
       244,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       252,
       253,
       254,
       255];
   function wrap(f, opt, s){
    if(opt) var sth = opt[1], report = sth; else var report = Markup_Error[3];
    return caml_call2(f, report, s);
   }
   var bytes_empty = runtime.caml_create_bytes(0);
   function uutf_decoder(encoding, name){
    function _B_(report, bytes){
     var decoder = caml_call3(Uutf[5], 0, [0, encoding], -328752538);
     function _E_(throw$0, empty, k){
      function run(param){
       var match = caml_call1(Uutf[6], decoder);
       if(typeof match === "number"){
        if(1006505782 > match) return caml_call1(empty, 0);
        var
         _F_ =
           function(c){
            var _I_ = caml_call2(Stdlib_Bytes[1], 1, c);
            caml_call4(Uutf[21][1], decoder, _I_, 0, 1);
            return run(0);
           },
         _G_ =
           function(param){
            caml_call4(Uutf[21][1], decoder, bytes_empty, 0, 0);
            return run(0);
           };
        return caml_call4(Markup_Kstream[4], bytes, throw$0, _G_, _F_);
       }
       if(852405675 <= match[1]){
        var c = match[2];
        return caml_call1(k, caml_call1(Stdlib_Uchar[10], c));
       }
       var
        s = match[2],
        _H_ = caml_call1(Uutf[10], decoder),
        location = [0, caml_call1(Uutf[9], decoder), _H_];
       return caml_call4
               (report,
                location,
                [0, -395356332, [0, s, name]],
                throw$0,
                function(param){return caml_call1(k, Markup_Common[9]);});
      }
      return run(0);
     }
     return caml_call1(Markup_Kstream[1], _E_);
    }
    return function(_C_, _D_){return wrap(_B_, _C_, _D_);};
   }
   var
    utf_8 = uutf_decoder(684370880, cst_utf_8),
    utf_16be = uutf_decoder(-211558048, cst_utf_16be),
    utf_16le = uutf_decoder(-211555818, cst_utf_16le),
    iso_8859_1 = uutf_decoder(338302576, cst_iso_8859_1),
    us_ascii = uutf_decoder(423112016, cst_us_ascii);
   function _a_(report, bytes){
    function constructor(throw$0, k){
     function _z_(param){
      if(param && 254 === param[1]){
       var _A_ = param[2];
       if(_A_ && 255 <= _A_[1] && ! _A_[2])
        return caml_call1(k, utf_16be([0, report], bytes));
      }
      return caml_call1(k, utf_16le([0, report], bytes));
     }
     return caml_call4(Markup_Kstream[14], 2, bytes, throw$0, _z_);
    }
    return caml_call1(Markup_Kstream[2], constructor);
   }
   function utf_16(_x_, _y_){return wrap(_a_, _x_, _y_);}
   function ucs_4_decoder(arrange, name){
    function _l_(report, bytes){
     var first = [0, 1], line = [0, 1], column = [0, 1];
     function char$0(k, c){
      column[1] = column[1] + 1 | 0;
      return caml_call1(k, c);
     }
     function _o_(throw$0, empty, k){
      function run(param){
       function _p_(l){
        if(! l) return caml_call1(empty, 0);
        var _q_ = l[2];
        if(_q_){
         var _r_ = _q_[2];
         if(_r_){
          var _s_ = _r_[2];
          if(_s_ && ! _s_[2]){
           var
            b4 = _s_[1],
            b3 = _r_[1],
            b2 = _q_[1],
            b1 = l[1],
            match = caml_call1(arrange, [0, b1, b2, b3, b4]),
            high = match[4],
            b3$0 = match[3],
            b2$0 = match[2],
            low = match[1];
           if(0 === (high & 128)){
            var
             scalar = high << 24 | b3$0 << 16 | b2$0 << 8 | low,
             skip =
               first[1]
                ? (first
                   [1]
                  = 0,
                  scalar === caml_call1(Stdlib_Uchar[10], Uutf[1]) ? 1 : 0)
                : 0;
            return skip
                    ? run(0)
                    : 10
                      === scalar
                      ? (column
                         [1]
                        = 1,
                        line[1] = line[1] + 1 | 0,
                        caml_call1(k, scalar))
                      : char$0(k, scalar);
           }
           var
            s = caml_call5(Stdlib_Printf[4], _b_, b1, b2, b3, b4),
            _w_ = function(param){return char$0(k, Markup_Common[9]);};
           return caml_call4
                   (report,
                    [0, line[1], column[1]],
                    [0, -395356332, [0, s, name]],
                    throw$0,
                    _w_);
          }
         }
        }
        var
         buffer = caml_call1(Stdlib_Buffer[1], 4),
         _t_ = caml_call1(Stdlib_Buffer[12], buffer);
        caml_call1(caml_call1(Stdlib_List[18], _t_), l);
        function _u_(param){return char$0(k, Markup_Common[9]);}
        var
         _v_ =
           [0, -395356332, [0, caml_call1(Stdlib_Buffer[2], buffer), name]];
        return caml_call4(report, [0, line[1], column[1]], _v_, throw$0, _u_);
       }
       return caml_call4(Markup_Kstream[7], 4, bytes, throw$0, _p_);
      }
      return run(0);
     }
     return caml_call1(Markup_Kstream[1], _o_);
    }
    return function(_m_, _n_){return wrap(_l_, _m_, _n_);};
   }
   var
    ucs_4be =
      ucs_4_decoder
       (function(param){
         var b4 = param[4], b3 = param[3], b2 = param[2], b1 = param[1];
         return [0, b4, b3, b2, b1];
        },
        cst_ucs_4be),
    ucs_4le = ucs_4_decoder(function(bs){return bs;}, cst_ucs_4le),
    ucs_4be_transposed =
      ucs_4_decoder
       (function(param){
         var b4 = param[4], b3 = param[3], b2 = param[2], b1 = param[1];
         return [0, b3, b4, b1, b2];
        },
        cst_ucs_4be_transposed),
    ucs_4le_transposed =
      ucs_4_decoder
       (function(param){
         var b4 = param[4], b3 = param[3], b2 = param[2], b1 = param[1];
         return [0, b2, b1, b4, b3];
        },
        cst_ucs_4le_transposed);
   function code_page(table){
    if(table.length - 1 < 256)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Markup_Encoding_code_page_], 1);
    function _g_(param, bytes){
     function _j_(throw$0, empty, k){
      function _k_(c){
       return caml_call1(k, runtime.caml_check_bound(table, c)[1 + c]);
      }
      return caml_call4(Markup_Kstream[4], bytes, throw$0, empty, _k_);
     }
     return caml_call1(Markup_Kstream[1], _j_);
    }
    return function(_h_, _i_){return wrap(_g_, _h_, _i_);};
   }
   var
    windows_1251_table = _c_.slice(),
    windows_1251 = code_page(windows_1251_table),
    windows_1252_table = _d_.slice(),
    windows_1252 = code_page(windows_1252_table),
    ebcdic_37_table = _e_.slice(),
    ebcdic = code_page(ebcdic_37_table),
    iso_8859_15_table = _f_.slice(),
    iso_8859_15 = code_page(iso_8859_15_table),
    Markup_Encoding =
      [0,
       wrap,
       bytes_empty,
       uutf_decoder,
       utf_8,
       utf_16be,
       utf_16le,
       iso_8859_1,
       us_ascii,
       utf_16,
       ucs_4_decoder,
       ucs_4be,
       ucs_4le,
       ucs_4be_transposed,
       ucs_4le_transposed,
       code_page,
       windows_1251_table,
       windows_1251,
       windows_1252_table,
       windows_1252,
       ebcdic_37_table,
       ebcdic,
       iso_8859_15_table,
       iso_8859_15];
   runtime.caml_register_global(25, Markup_Encoding, "Markup__Encoding");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Input
//# unitInfo: Requires: Markup__Common, Markup__Kstream
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Common = global_data.Markup__Common,
    cst_out_of_range = "out of range",
    cst_input = "input";
   function preprocess(is_valid_char, report, source){
    var first_char = [0, 1], line = [0, 1], column = [0, 1];
    function get_location(param){return [0, line[1], column[1]];}
    function _a_(throw$0, empty, k){
     function newline(param){
      var location = [0, line[1], column[1]];
      line[1] = line[1] + 1 | 0;
      column[1] = 1;
      return caml_call1(k, [0, location, 10]);
     }
     function symbol(c){
      var location = [0, line[1], column[1]];
      column[1] = column[1] + 1 | 0;
      return caml_call1(k, [0, location, c]);
     }
     function iterate(param){
      function _b_(c){
       if(10 === c) return newline(0);
       if(13 === c){
        var
         _c_ =
           function(c){
            return 10 === c
                    ? newline(0)
                    : (caml_call2(Markup_Kstream[8], source, c), newline(0));
           };
        return caml_call4(Markup_Kstream[4], source, throw$0, newline, _c_);
       }
       if(65279 === c && first_char[1]){first_char[1] = 0; return iterate(0);}
       if(caml_call1(is_valid_char, c)) return symbol(c);
       function _d_(param){return symbol(c);}
       var
        _e_ =
          [0,
           -590381665,
           [0, caml_call1(Markup_Common[11], c), cst_input, cst_out_of_range]];
       return caml_call4(report, [0, line[1], column[1]], _e_, throw$0, _d_);
      }
      return caml_call4(Markup_Kstream[4], source, throw$0, empty, _b_);
     }
     return iterate(0);
    }
    var stream = caml_call1(Markup_Kstream[1], _a_);
    return [0, stream, get_location];
   }
   var Markup_Input = [0, preprocess];
   runtime.caml_register_global(4, Markup_Input, "Markup__Input");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Detect
//# unitInfo: Requires: Markup__Common, Markup__Encoding, Markup__Error, Markup__Input, Markup__Kstream, Markup__Stream_io, Markup__Xml_tokenizer, Stdlib__Buffer, Stdlib__Char, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_big5$0 = "big5",
    cst_euc_jp$0 = "euc-jp",
    cst_euc_kr$0 = "euc-kr",
    cst_gb18030$0 = "gb18030",
    cst_gbk$0 = "gbk",
    cst_ibm866$0 = "ibm866",
    cst_iso_2022_jp$0 = "iso-2022-jp",
    cst_iso_8859_1$0 = "iso-8859-1",
    cst_iso_8859_10$0 = "iso-8859-10",
    cst_iso_8859_13$0 = "iso-8859-13",
    cst_iso_8859_14$0 = "iso-8859-14",
    cst_iso_8859_15$0 = "iso-8859-15",
    cst_iso_8859_16$0 = "iso-8859-16",
    cst_iso_8859_2$0 = "iso-8859-2",
    cst_iso_8859_3$0 = "iso-8859-3",
    cst_iso_8859_4$0 = "iso-8859-4",
    cst_iso_8859_5$0 = "iso-8859-5",
    cst_iso_8859_6$0 = "iso-8859-6",
    cst_iso_8859_7$0 = "iso-8859-7",
    cst_iso_8859_8$0 = "iso-8859-8",
    cst_iso_8859_8_i$0 = "iso-8859-8-i",
    cst_koi8_r$0 = "koi8-r",
    cst_koi8_u$0 = "koi8-u",
    cst_macintosh$0 = "macintosh",
    cst_shift_jis$0 = "shift_jis",
    cst_ucs_4be = "ucs-4be",
    cst_ucs_4be_transposed = "ucs-4be-transposed",
    cst_ucs_4le = "ucs-4le",
    cst_ucs_4le_transposed = "ucs-4le-transposed",
    cst_us_ascii$0 = "us-ascii",
    cst_utf_16 = "utf-16",
    cst_utf_16be$0 = "utf-16be",
    cst_utf_16le$0 = "utf-16le",
    cst_utf_8$2 = "utf-8",
    cst_windows_1250$0 = "windows-1250",
    cst_windows_1251$0 = "windows-1251",
    cst_windows_1252$2 = "windows-1252",
    cst_windows_1253$0 = "windows-1253",
    cst_windows_1254$0 = "windows-1254",
    cst_windows_1255$0 = "windows-1255",
    cst_windows_1256$0 = "windows-1256",
    cst_windows_1257$0 = "windows-1257",
    cst_windows_1258$0 = "windows-1258",
    cst_windows_874$0 = "windows-874",
    cst_x_mac_cyrillic$0 = "x-mac-cyrillic",
    cst_x_user_defined$0 = "x-user-defined",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$1 = cst$3,
    cst$0 = cst$3,
    cst = "\t\n\r\f ",
    Markup_Encoding = global_data.Markup__Encoding,
    Markup_Common = global_data.Markup__Common,
    Stdlib_List = global_data.Stdlib__List,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Error = global_data.Markup__Error,
    Markup_Input = global_data.Markup__Input,
    Markup_Xml_tokenizer = global_data.Markup__Xml_tokenizer,
    Stdlib_Char = global_data.Stdlib__Char,
    Markup_Stream_io = global_data.Markup__Stream_io,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    cst_utf_8$1 = cst_utf_8$2,
    cst_utf_8$0 = cst_utf_8$2,
    _s_ = [0, 1],
    _t_ = [0, 0],
    cst_iso_8859_16 = cst_iso_8859_16$0,
    cst_gb18030 = cst_gb18030$0,
    cst_utf_16be = cst_utf_16be$0,
    cst_x_user_defined = cst_x_user_defined$0,
    cst_utf_8 = cst_utf_8$2,
    cst_ibm866 = cst_ibm866$0,
    cst_iso_8859_2 = cst_iso_8859_2$0,
    cst_iso_8859_3 = cst_iso_8859_3$0,
    cst_iso_8859_4 = cst_iso_8859_4$0,
    cst_iso_8859_5 = cst_iso_8859_5$0,
    cst_iso_8859_6 = cst_iso_8859_6$0,
    cst_iso_8859_7 = cst_iso_8859_7$0,
    cst_iso_8859_8 = cst_iso_8859_8$0,
    cst_iso_8859_8_i = cst_iso_8859_8_i$0,
    cst_iso_8859_10 = cst_iso_8859_10$0,
    cst_iso_8859_13 = cst_iso_8859_13$0,
    cst_iso_8859_14 = cst_iso_8859_14$0,
    cst_iso_8859_15 = cst_iso_8859_15$0,
    cst_koi8_r = cst_koi8_r$0,
    cst_koi8_u = cst_koi8_u$0,
    cst_macintosh = cst_macintosh$0,
    cst_windows_874 = cst_windows_874$0,
    cst_windows_1250 = cst_windows_1250$0,
    cst_windows_1251 = cst_windows_1251$0,
    cst_windows_1252$0 = cst_windows_1252$2,
    cst_us_ascii = cst_us_ascii$0,
    cst_windows_1252$1 = cst_windows_1252$2,
    cst_iso_8859_1 = cst_iso_8859_1$0,
    cst_windows_1252 = cst_windows_1252$2,
    cst_windows_1253 = cst_windows_1253$0,
    cst_windows_1254 = cst_windows_1254$0,
    cst_windows_1255 = cst_windows_1255$0,
    cst_windows_1256 = cst_windows_1256$0,
    cst_windows_1257 = cst_windows_1257$0,
    cst_windows_1258 = cst_windows_1258$0,
    cst_x_mac_cyrillic = cst_x_mac_cyrillic$0,
    cst_gbk = cst_gbk$0,
    cst_big5 = cst_big5$0,
    cst_euc_jp = cst_euc_jp$0,
    cst_iso_2022_jp = cst_iso_2022_jp$0,
    cst_shift_jis = cst_shift_jis$0,
    cst_euc_kr = cst_euc_kr$0,
    cst_replacement = "replacement",
    cst_utf_16le = cst_utf_16le$0,
    _r_ = [0, cst_ucs_4be],
    _q_ = [0, cst_ucs_4be_transposed],
    _p_ = [0, cst_ucs_4le_transposed],
    _o_ = [0, cst_utf_16be$0],
    _n_ = [0, "ebcdic"],
    _m_ = [0, cst_ucs_4le],
    _l_ = [0, cst_utf_16le$0],
    _k_ = [0, cst_utf_8$2],
    _f_ = [0, cst_ucs_4le],
    _e_ = [0, cst_utf_16le$0],
    _h_ = [0, cst_ucs_4le_transposed],
    _g_ = [0, cst_utf_16be$0],
    _j_ = [0, cst_ucs_4be_transposed],
    _i_ = [0, cst_ucs_4be],
    _d_ = [0, cst_utf_8$2],
    _a_ = [0, cst_utf_16le$0],
    _b_ = [0, cst_utf_16be$0],
    _c_ = [0, cst_utf_8$2];
   function guess_from_bom_html(source, throw$0, k){
    function _bL_(param){
     if(param){
      var _bM_ = param[1];
      if(254 <= _bM_)
       if(255 <= _bM_){
        var _bN_ = param[2];
        if(_bN_ && 254 === _bN_[1]) return caml_call1(k, _a_);
       }
       else{
        var _bO_ = param[2];
        if(_bO_ && 255 <= _bO_[1]) return caml_call1(k, _b_);
       }
      else if(239 === _bM_){
       var _bP_ = param[2];
       if(_bP_ && 187 === _bP_[1]){
        var _bQ_ = _bP_[2];
        if(_bQ_ && 191 === _bQ_[1] && ! _bQ_[2]) return caml_call1(k, _c_);
       }
      }
     }
     return caml_call1(k, 0);
    }
    return caml_call4(Markup_Kstream[14], 3, source, throw$0, _bL_);
   }
   function guess_from_bom_xml(source, throw$0, k){
    function _bw_(param){
     if(param){
      var _bx_ = param[1];
      if(239 === _bx_){
       var _by_ = param[2];
       if(_by_ && 187 === _by_[1]){
        var _bz_ = _by_[2];
        if(_bz_ && 191 === _bz_[1]) return caml_call1(k, _d_);
       }
      }
      else if(254 <= _bx_)
       if(255 <= _bx_){
        var _bA_ = param[2];
        if(_bA_ && 254 === _bA_[1]){
         var _bB_ = _bA_[2];
         if(_bB_ && ! _bB_[1]){
          var _bC_ = _bB_[2];
          if(_bC_ && ! _bC_[1] && ! _bC_[2]) return caml_call1(k, _f_);
         }
         return caml_call1(k, _e_);
        }
       }
       else{
        var _bD_ = param[2];
        if(_bD_ && 255 <= _bD_[1]){
         var _bE_ = _bD_[2];
         if(_bE_ && ! _bE_[1]){
          var _bF_ = _bE_[2];
          if(_bF_ && ! _bF_[1] && ! _bF_[2]) return caml_call1(k, _h_);
         }
         return caml_call1(k, _g_);
        }
       }
      else if(! _bx_){
       var _bG_ = param[2];
       if(_bG_ && ! _bG_[1]){
        var _bH_ = _bG_[2];
        if(_bH_){
         var _bI_ = _bH_[1];
         if(254 === _bI_){
          var _bJ_ = _bH_[2];
          if(_bJ_ && 255 <= _bJ_[1] && ! _bJ_[2]) return caml_call1(k, _i_);
         }
         else if(255 <= _bI_){
          var _bK_ = _bH_[2];
          if(_bK_ && 254 === _bK_[1] && ! _bK_[2]) return caml_call1(k, _j_);
         }
        }
       }
      }
     }
     return caml_call1(k, 0);
    }
    return caml_call4(Markup_Kstream[14], 4, source, throw$0, _bw_);
   }
   function guess_family_xml(source, throw$0, k){
    function _ba_(param){
     if(param){
      var _bb_ = param[1];
      if(60 === _bb_){
       var _bc_ = param[2];
       if(_bc_){
        var _bd_ = _bc_[1];
        if(63 === _bd_){
         var _be_ = _bc_[2];
         if(_be_ && 120 === _be_[1]){
          var _bf_ = _be_[2];
          if(_bf_ && 109 === _bf_[1] && ! _bf_[2]) return caml_call1(k, _k_);
         }
        }
        else if(! _bd_){
         var _bg_ = _bc_[2];
         if(_bg_){
          var _bh_ = _bg_[1];
          if(63 === _bh_){
           var _bi_ = _bg_[2];
           if(_bi_ && ! _bi_[1] && ! _bi_[2]) return caml_call1(k, _l_);
          }
          else if(! _bh_){
           var _bj_ = _bg_[2];
           if(_bj_ && ! _bj_[1] && ! _bj_[2]) return caml_call1(k, _m_);
          }
         }
        }
       }
      }
      else if(76 === _bb_){
       var _bk_ = param[2];
       if(_bk_ && 111 === _bk_[1]){
        var _bl_ = _bk_[2];
        if(_bl_ && 167 === _bl_[1]){
         var _bm_ = _bl_[2];
         if(_bm_ && 148 === _bm_[1] && ! _bm_[2]) return caml_call1(k, _n_);
        }
       }
      }
      else if(! _bb_){
       var _bn_ = param[2];
       if(_bn_){
        var _bo_ = _bn_[1];
        if(60 === _bo_){
         var _bp_ = _bn_[2];
         if(_bp_ && ! _bp_[1]){
          var _bq_ = _bp_[2];
          if(_bq_){
           var _br_ = _bq_[1];
           if(63 === _br_){
            if(! _bq_[2]) return caml_call1(k, _o_);
           }
           else if(! _br_ && ! _bq_[2]) return caml_call1(k, _p_);
          }
         }
        }
        else if(! _bo_){
         var _bs_ = _bn_[2];
         if(_bs_){
          var _bt_ = _bs_[1];
          if(60 === _bt_){
           var _bu_ = _bs_[2];
           if(_bu_ && ! _bu_[1] && ! _bu_[2]) return caml_call1(k, _q_);
          }
          else if(! _bt_){
           var _bv_ = _bs_[2];
           if(_bv_ && 60 === _bv_[1] && ! _bv_[2]) return caml_call1(k, _r_);
          }
         }
        }
       }
      }
     }
     return caml_call1(k, 0);
    }
    return caml_call4(Markup_Kstream[14], 4, source, throw$0, _ba_);
   }
   function normalize_name(for_html, s){
    var
     _aK_ = caml_call1(Markup_Common[36], s),
     s$0 = caml_call1(Stdlib_String[27], _aK_),
     _aL_ = caml_string_compare(s$0, "iso8859-5");
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    if(0 > _aL_){
                                     var switch$2 = caml_string_compare(s$0, cst_gb18030$0);
                                     G:
                                     {
                                      H:
                                      {
                                       if(0 <= switch$2){
                                        if(0 >= switch$2) return cst_gb18030;
                                        var _aZ_ = caml_string_compare(s$0, "iso-8859-6-i");
                                        if(0 <= _aZ_){
                                         if(0 >= _aZ_) break c;
                                         var _a0_ = caml_string_compare(s$0, "iso-ir-148");
                                         if(0 <= _a0_){
                                          if(0 >= _a0_) break q;
                                          var _a1_ = caml_string_compare(s$0, "iso8859-13");
                                          if(0 <= _a1_){
                                           if(0 >= _a1_) break F;
                                           if(! caml_string_notequal(s$0, "iso8859-14")) break E;
                                           if(! caml_string_notequal(s$0, "iso8859-15")) break v;
                                           if(! caml_string_notequal(s$0, "iso8859-2")) break r;
                                           if(! caml_string_notequal(s$0, "iso8859-3")) break y;
                                           if(caml_string_notequal(s$0, "iso8859-4")) break a;
                                           break x;
                                          }
                                          if(! caml_string_notequal(s$0, "iso-ir-149")) break p;
                                          if(! caml_string_notequal(s$0, "iso-ir-157")) break w;
                                          if(! caml_string_notequal(s$0, "iso-ir-58")) break i;
                                          if(! caml_string_notequal(s$0, "iso8859-1")) break j;
                                          if(! caml_string_notequal(s$0, "iso8859-10")) break w;
                                          if(caml_string_notequal(s$0, "iso8859-11")) break a;
                                          break D;
                                         }
                                         var _a2_ = caml_string_compare(s$0, "iso-ir-101");
                                         if(0 <= _a2_){
                                          if(0 >= _a2_) break r;
                                          if(! caml_string_notequal(s$0, "iso-ir-109")) break y;
                                          if(! caml_string_notequal(s$0, "iso-ir-110")) break x;
                                          if(! caml_string_notequal(s$0, "iso-ir-126")) break C;
                                          if(! caml_string_notequal(s$0, "iso-ir-127")) break c;
                                          if(! caml_string_notequal(s$0, "iso-ir-138")) break t;
                                          if(caml_string_notequal(s$0, "iso-ir-144")) break a;
                                          break u;
                                         }
                                         if(! caml_string_notequal(s$0, cst_iso_8859_7$0)) break C;
                                         if(! caml_string_notequal(s$0, cst_iso_8859_8$0)) break t;
                                         if(! caml_string_notequal(s$0, "iso-8859-8-e")) break t;
                                         if(! caml_string_notequal(s$0, cst_iso_8859_8_i$0)) break s;
                                         if(! caml_string_notequal(s$0, "iso-8859-9")) break q;
                                         if(caml_string_notequal(s$0, "iso-ir-100")) break a;
                                         break j;
                                        }
                                        var _a3_ = caml_string_compare(s$0, "iso-2022-kr");
                                        if(0 <= _a3_){
                                         if(0 >= _a3_) break H;
                                         var switch$3 = caml_string_compare(s$0, cst_iso_8859_16$0);
                                         if(0 <= switch$3){
                                          if(0 >= switch$3) return cst_iso_8859_16;
                                          if(! caml_string_notequal(s$0, cst_iso_8859_2$0)) break r;
                                          if(! caml_string_notequal(s$0, cst_iso_8859_3$0)) break y;
                                          if(! caml_string_notequal(s$0, cst_iso_8859_4$0)) break x;
                                          if(! caml_string_notequal(s$0, cst_iso_8859_5$0)) break u;
                                          if(! caml_string_notequal(s$0, cst_iso_8859_6$0)) break c;
                                          if(caml_string_notequal(s$0, "iso-8859-6-e")) break a;
                                          break c;
                                         }
                                         if(! caml_string_notequal(s$0, cst_iso_8859_1$0)) break j;
                                         if(! caml_string_notequal(s$0, cst_iso_8859_10$0)) break w;
                                         if(! caml_string_notequal(s$0, "iso-8859-11")) break D;
                                         if(! caml_string_notequal(s$0, cst_iso_8859_13$0)) break F;
                                         if(! caml_string_notequal(s$0, cst_iso_8859_14$0)) break E;
                                         if(caml_string_notequal(s$0, cst_iso_8859_15$0)) break a;
                                         break v;
                                        }
                                        var _a4_ = caml_string_compare(s$0, "hebrew");
                                        if(0 > _a4_){
                                         if(! caml_string_notequal(s$0, "gb2312")) break i;
                                         if(! caml_string_notequal(s$0, "gb_2312")) break i;
                                         if(! caml_string_notequal(s$0, "gb_2312-80")) break i;
                                         if(! caml_string_notequal(s$0, cst_gbk$0)) break i;
                                         if(! caml_string_notequal(s$0, "greek")) break C;
                                         if(caml_string_notequal(s$0, "greek8")) break a;
                                         break C;
                                        }
                                        if(0 >= _a4_) break t;
                                        if(! caml_string_notequal(s$0, "hz-gb-2312")) break H;
                                        if(! caml_string_notequal(s$0, "ibm819")) break j;
                                        if(! caml_string_notequal(s$0, cst_ibm866$0)) break G;
                                        if(! caml_string_notequal(s$0, "iso-2022-cn")) break H;
                                        if(! caml_string_notequal(s$0, "iso-2022-cn-ext")) break H;
                                        if(caml_string_notequal(s$0, cst_iso_2022_jp$0)) break a;
                                       }
                                       else{
                                        var _a5_ = caml_string_compare(s$0, "csiso58gb231280");
                                        if(0 <= _a5_){
                                         if(0 >= _a5_) break i;
                                         var _a6_ = caml_string_compare(s$0, "csisolatingreek");
                                         if(0 <= _a6_){
                                          if(0 >= _a6_) break C;
                                          var _a7_ = caml_string_compare(s$0, "dos-874");
                                          if(0 <= _a7_){
                                           if(0 >= _a7_) break D;
                                           if(! caml_string_notequal(s$0, "ecma-114")) break c;
                                           if(! caml_string_notequal(s$0, "ecma-118")) break C;
                                           if(! caml_string_notequal(s$0, "elot_928")) break C;
                                           if(! caml_string_notequal(s$0, cst_euc_jp$0)) break o;
                                           if(caml_string_notequal(s$0, cst_euc_kr$0)) break a;
                                           break p;
                                          }
                                          if(! caml_string_notequal(s$0, "csisolatinhebrew")) break t;
                                          if(! caml_string_notequal(s$0, "cskoi8r")) break B;
                                          if(! caml_string_notequal(s$0, "csksc56011987")) break p;
                                          if(! caml_string_notequal(s$0, "csmacintosh")) break A;
                                          if(! caml_string_notequal(s$0, "csshiftjis")) break z;
                                          if(caml_string_notequal(s$0, "cyrillic")) break a;
                                          break u;
                                         }
                                         var _a8_ = caml_string_compare(s$0, "csisolatin3");
                                         if(0 <= _a8_){
                                          if(0 >= _a8_) break y;
                                          if(! caml_string_notequal(s$0, "csisolatin4")) break x;
                                          if(! caml_string_notequal(s$0, "csisolatin5")) break q;
                                          if(! caml_string_notequal(s$0, "csisolatin6")) break w;
                                          if(! caml_string_notequal(s$0, "csisolatin9")) break v;
                                          if(! caml_string_notequal(s$0, "csisolatinarabic")) break c;
                                          if(caml_string_notequal(s$0, "csisolatincyrillic")) break a;
                                          break u;
                                         }
                                         if(! caml_string_notequal(s$0, "csiso88596e")) break c;
                                         if(! caml_string_notequal(s$0, "csiso88596i")) break c;
                                         if(! caml_string_notequal(s$0, "csiso88598e")) break t;
                                         if(! caml_string_notequal(s$0, "csiso88598i")) break s;
                                         if(! caml_string_notequal(s$0, "csisolatin1")) break j;
                                         if(caml_string_notequal(s$0, "csisolatin2")) break a;
                                         break r;
                                        }
                                        var _a9_ = caml_string_compare(s$0, "cp1254");
                                        if(0 > _a9_){
                                         var _a$_ = caml_string_compare(s$0, "big5-hkscs");
                                         if(0 <= _a$_){
                                          if(0 >= _a$_) break b;
                                          if(! caml_string_notequal(s$0, "chinese")) break i;
                                          if(! caml_string_notequal(s$0, "cn-big5")) break b;
                                          if(! caml_string_notequal(s$0, "cp1250")) break h;
                                          if(! caml_string_notequal(s$0, "cp1251")) break g;
                                          if(! caml_string_notequal(s$0, "cp1252")) break f;
                                          if(caml_string_notequal(s$0, "cp1253")) break a;
                                          break e;
                                         }
                                         if(! caml_string_notequal(s$0, "866")) break G;
                                         if(! caml_string_notequal(s$0, "ansi_x3.4-1968")) break d;
                                         if(! caml_string_notequal(s$0, "arabic")) break c;
                                         if(! caml_string_notequal(s$0, "ascii")) break d;
                                         if(! caml_string_notequal(s$0, "asmo-708")) break c;
                                         if(caml_string_notequal(s$0, cst_big5$0)) break a;
                                         break b;
                                        }
                                        if(0 >= _a9_) break q;
                                        var _a__ = caml_string_compare(s$0, "csbig5");
                                        if(0 > _a__){
                                         if(! caml_string_notequal(s$0, "cp1255")) break n;
                                         if(! caml_string_notequal(s$0, "cp1256")) break m;
                                         if(! caml_string_notequal(s$0, "cp1257")) break l;
                                         if(! caml_string_notequal(s$0, "cp1258")) break k;
                                         if(! caml_string_notequal(s$0, "cp819")) break j;
                                         if(caml_string_notequal(s$0, "cp866")) break a;
                                         break G;
                                        }
                                        if(0 >= _a__) break b;
                                        if(! caml_string_notequal(s$0, "cseuckr")) break p;
                                        if(! caml_string_notequal(s$0, "cseucpkdfmtjapanese"))
                                         break o;
                                        if(! caml_string_notequal(s$0, "csgb2312")) break i;
                                        if(! caml_string_notequal(s$0, "csibm866")) break G;
                                        if(caml_string_notequal(s$0, "csiso2022jp")){
                                         if(caml_string_notequal(s$0, "csiso2022kr")) break a;
                                         break H;
                                        }
                                       }
                                       return cst_iso_2022_jp;
                                      }
                                      return cst_replacement;
                                     }
                                     return cst_ibm866;
                                    }
                                    if(0 >= _aL_) break u;
                                    var _aM_ = caml_string_compare(s$0, "l9");
                                    if(0 <= _aM_){
                                     if(0 >= _aM_) break v;
                                     var _aN_ = caml_string_compare(s$0, cst_windows_1252$2);
                                     if(0 <= _aN_){
                                      if(0 >= _aN_) break f;
                                      var _aO_ = caml_string_compare(s$0, "x-cp1254");
                                      if(0 > _aO_){
                                       var _aP_ = caml_string_compare(s$0, "windows-31j");
                                       if(0 <= _aP_){
                                        if(0 >= _aP_) break z;
                                        if(! caml_string_notequal(s$0, cst_windows_874$0)) break D;
                                        if(! caml_string_notequal(s$0, "windows-949")) break p;
                                        if(! caml_string_notequal(s$0, "x-cp1250")) break h;
                                        if(! caml_string_notequal(s$0, "x-cp1251")) break g;
                                        if(! caml_string_notequal(s$0, "x-cp1252")) break f;
                                        if(caml_string_notequal(s$0, "x-cp1253")) break a;
                                        break e;
                                       }
                                       if(! caml_string_notequal(s$0, cst_windows_1253$0)) break e;
                                       if(! caml_string_notequal(s$0, cst_windows_1254$0)) break q;
                                       if(! caml_string_notequal(s$0, cst_windows_1255$0)) break n;
                                       if(! caml_string_notequal(s$0, cst_windows_1256$0)) break m;
                                       if(! caml_string_notequal(s$0, cst_windows_1257$0)) break l;
                                       if(caml_string_notequal(s$0, cst_windows_1258$0)) break a;
                                       break k;
                                      }
                                      if(0 >= _aO_) break q;
                                      var
                                       switch$0 = caml_string_compare(s$0, cst_x_mac_cyrillic$0);
                                      if(0 > switch$0){
                                       if(! caml_string_notequal(s$0, "x-cp1255")) break n;
                                       if(! caml_string_notequal(s$0, "x-cp1256")) break m;
                                       if(! caml_string_notequal(s$0, "x-cp1257")) break l;
                                       if(! caml_string_notequal(s$0, "x-cp1258")) break k;
                                       if(! caml_string_notequal(s$0, "x-euc-jp")) break o;
                                       if(caml_string_notequal(s$0, "x-gbk")) break a;
                                       break i;
                                      }
                                      if(0 < switch$0){
                                       if(! caml_string_notequal(s$0, "x-mac-roman")) break A;
                                       if(caml_string_notequal(s$0, "x-mac-ukrainian")){
                                        if(! caml_string_notequal(s$0, "x-sjis")) break z;
                                        if(! caml_string_notequal(s$0, cst_x_user_defined$0))
                                         return cst_x_user_defined;
                                        if(caml_string_notequal(s$0, "x-x-big5")) break a;
                                        break b;
                                       }
                                      }
                                      return cst_x_mac_cyrillic;
                                     }
                                     var _aQ_ = caml_string_compare(s$0, "sjis");
                                     if(0 > _aQ_){
                                      var _aR_ = caml_string_compare(s$0, "logical");
                                      if(0 <= _aR_){
                                       if(0 >= _aR_) break s;
                                       if(! caml_string_notequal(s$0, "mac")) break A;
                                       if(! caml_string_notequal(s$0, cst_macintosh$0)) break A;
                                       if(! caml_string_notequal(s$0, "ms932")) break z;
                                       if(! caml_string_notequal(s$0, "ms_kanji")) break z;
                                       if(! caml_string_notequal(s$0, "shift-jis")) break z;
                                       if(caml_string_notequal(s$0, cst_shift_jis$0)) break a;
                                       break z;
                                      }
                                      if(! caml_string_notequal(s$0, "latin1")) break j;
                                      if(! caml_string_notequal(s$0, "latin2")) break r;
                                      if(! caml_string_notequal(s$0, "latin3")) break y;
                                      if(! caml_string_notequal(s$0, "latin4")) break x;
                                      if(! caml_string_notequal(s$0, "latin5")) break q;
                                      if(caml_string_notequal(s$0, "latin6")) break a;
                                      break w;
                                     }
                                     if(0 >= _aQ_) break z;
                                     var switch$1 = caml_string_compare(s$0, cst_utf_16le$0);
                                     G:
                                     {
                                      if(0 <= switch$1){
                                       if(0 >= switch$1) break G;
                                       if
                                        (caml_string_notequal(s$0, cst_utf_8$2)
                                         && caml_string_notequal(s$0, "utf8")){
                                        if(! caml_string_notequal(s$0, "visual")) break t;
                                        if(! caml_string_notequal(s$0, cst_windows_1250$0)) break h;
                                        if(caml_string_notequal(s$0, cst_windows_1251$0)) break a;
                                        break g;
                                       }
                                      }
                                      else{
                                       if(! caml_string_notequal(s$0, "sun_eu_greek")) break C;
                                       if(! caml_string_notequal(s$0, "tis-620")) break D;
                                       if(caml_string_notequal(s$0, "unicode-1-1-utf-8")){
                                        if(! caml_string_notequal(s$0, cst_us_ascii$0)) break d;
                                        if(! caml_string_notequal(s$0, cst_utf_16)) break G;
                                        if(caml_string_notequal(s$0, cst_utf_16be$0)) break a;
                                        return cst_utf_16be;
                                       }
                                      }
                                      return cst_utf_8;
                                     }
                                     return cst_utf_16le;
                                    }
                                    var _aS_ = caml_string_compare(s$0, "iso_8859-5");
                                    if(0 <= _aS_){
                                     if(0 >= _aS_) break u;
                                     var _aT_ = caml_string_compare(s$0, cst_koi8_u$0);
                                     if(0 <= _aT_){
                                      if(0 < _aT_){
                                       var _aU_ = caml_string_compare(s$0, "l1");
                                       if(0 <= _aU_){
                                        if(0 >= _aU_) break j;
                                        if(! caml_string_notequal(s$0, "l2")) break r;
                                        if(! caml_string_notequal(s$0, "l3")) break y;
                                        if(! caml_string_notequal(s$0, "l4")) break x;
                                        if(! caml_string_notequal(s$0, "l5")) break q;
                                        if(caml_string_notequal(s$0, "l6")) break a;
                                        break w;
                                       }
                                       if(! caml_string_notequal(s$0, "koi8_r")) break B;
                                       if(! caml_string_notequal(s$0, "korean")) break p;
                                       if(! caml_string_notequal(s$0, "ks_c_5601-1987")) break p;
                                       if(! caml_string_notequal(s$0, "ks_c_5601-1989")) break p;
                                       if(! caml_string_notequal(s$0, "ksc5601")) break p;
                                       if(caml_string_notequal(s$0, "ksc_5601")) break a;
                                       break p;
                                      }
                                     }
                                     else{
                                      var _aV_ = caml_string_compare(s$0, "iso_8859-8:1988");
                                      if(0 > _aV_){
                                       if(! caml_string_notequal(s$0, "iso_8859-5:1988")) break u;
                                       if(! caml_string_notequal(s$0, "iso_8859-6")) break c;
                                       if(! caml_string_notequal(s$0, "iso_8859-6:1987")) break c;
                                       if(! caml_string_notequal(s$0, "iso_8859-7")) break C;
                                       if(! caml_string_notequal(s$0, "iso_8859-7:1987")) break C;
                                       if(caml_string_notequal(s$0, "iso_8859-8")) break a;
                                       break t;
                                      }
                                      if(0 >= _aV_) break t;
                                      if(! caml_string_notequal(s$0, "iso_8859-9")) break q;
                                      if(! caml_string_notequal(s$0, "iso_8859-9:1989")) break q;
                                      if(! caml_string_notequal(s$0, "koi")) break B;
                                      if(! caml_string_notequal(s$0, "koi8")) break B;
                                      if(! caml_string_notequal(s$0, cst_koi8_r$0)) break B;
                                      if(caml_string_notequal(s$0, "koi8-ru")) break a;
                                     }
                                     return cst_koi8_u;
                                    }
                                    var _aW_ = caml_string_compare(s$0, "iso88595");
                                    if(0 <= _aW_){
                                     if(0 >= _aW_) break u;
                                     var _aX_ = caml_string_compare(s$0, "iso_8859-1:1987");
                                     if(0 <= _aX_){
                                      if(0 >= _aX_) break j;
                                      if(! caml_string_notequal(s$0, "iso_8859-2")) break r;
                                      if(! caml_string_notequal(s$0, "iso_8859-2:1987")) break r;
                                      if(! caml_string_notequal(s$0, "iso_8859-3")) break y;
                                      if(! caml_string_notequal(s$0, "iso_8859-3:1988")) break y;
                                      if(! caml_string_notequal(s$0, "iso_8859-4")) break x;
                                      if(caml_string_notequal(s$0, "iso_8859-4:1988")) break a;
                                      break x;
                                     }
                                     if(! caml_string_notequal(s$0, "iso88596")) break c;
                                     if(! caml_string_notequal(s$0, "iso88597")) break C;
                                     if(! caml_string_notequal(s$0, "iso88598")) break t;
                                     if(! caml_string_notequal(s$0, "iso88599")) break q;
                                     if(! caml_string_notequal(s$0, "iso_8859-1")) break j;
                                     if(caml_string_notequal(s$0, "iso_8859-15")) break a;
                                     break v;
                                    }
                                    var _aY_ = caml_string_compare(s$0, "iso885911");
                                    if(0 > _aY_){
                                     if(! caml_string_notequal(s$0, "iso8859-6")) break c;
                                     if(! caml_string_notequal(s$0, "iso8859-7")) break C;
                                     if(! caml_string_notequal(s$0, "iso8859-8")) break t;
                                     if(! caml_string_notequal(s$0, "iso8859-9")) break q;
                                     if(! caml_string_notequal(s$0, "iso88591")) break j;
                                     if(caml_string_notequal(s$0, "iso885910")) break a;
                                     break w;
                                    }
                                    if(0 >= _aY_) break D;
                                    if(caml_string_notequal(s$0, "iso885913")){
                                     if(! caml_string_notequal(s$0, "iso885914")) break E;
                                     if(! caml_string_notequal(s$0, "iso885915")) break v;
                                     if(! caml_string_notequal(s$0, "iso88592")) break r;
                                     if(! caml_string_notequal(s$0, "iso88593")) break y;
                                     if(caml_string_notequal(s$0, "iso88594")) break a;
                                     break x;
                                    }
                                   }
                                   return cst_iso_8859_13;
                                  }
                                  return cst_iso_8859_14;
                                 }
                                 return cst_windows_874;
                                }
                                return cst_iso_8859_7;
                               }
                               return cst_koi8_r;
                              }
                              return cst_macintosh;
                             }
                             return cst_shift_jis;
                            }
                            return cst_iso_8859_3;
                           }
                           return cst_iso_8859_4;
                          }
                          return cst_iso_8859_10;
                         }
                         return cst_iso_8859_15;
                        }
                        return cst_iso_8859_5;
                       }
                       return cst_iso_8859_8;
                      }
                      return cst_iso_8859_8_i;
                     }
                     return cst_iso_8859_2;
                    }
                    return cst_windows_1254;
                   }
                   return cst_euc_kr;
                  }
                  return cst_euc_jp;
                 }
                 return cst_windows_1255;
                }
                return cst_windows_1256;
               }
               return cst_windows_1257;
              }
              return cst_windows_1258;
             }
             return for_html ? cst_windows_1252$1 : cst_iso_8859_1;
            }
            return cst_gbk;
           }
           return cst_windows_1250;
          }
          return cst_windows_1251;
         }
         return cst_windows_1252;
        }
        return cst_windows_1253;
       }
       return for_html ? cst_windows_1252$0 : cst_us_ascii;
      }
      return cst_iso_8859_6;
     }
     return cst_big5;
    }
    return s$0;
   }
   function is_letter(c){
    var _aG_ = 65 <= c ? 1 : 0, _aH_ = _aG_ ? c <= 90 ? 1 : 0 : _aG_;
    if(_aH_) return _aH_;
    var _aI_ = 97 <= c ? 1 : 0, _aJ_ = _aI_ ? c <= 122 ? 1 : 0 : _aI_;
    return _aJ_;
   }
   function is_whitespace(c){return caml_call2(Stdlib_String[15], cst, c);}
   function skip_whitespace(source, throw$0, k){
    function _aF_(c){
     return is_whitespace(c)
             ? skip_whitespace(source, throw$0, k)
             : (caml_call2(Markup_Kstream[8], source, c), caml_call1(k, 0));
    }
    return caml_call4(Markup_Kstream[4], source, throw$0, k, _aF_);
   }
   function read_quoted_value(quote, source, throw$0, k){
    var buffer = caml_call1(Stdlib_Buffer[1], 32);
    function iterate(param){
     function _aC_(c){
      if(c === quote)
       return caml_call1(k, caml_call1(Stdlib_Buffer[2], buffer));
      var _aE_ = caml_call1(Stdlib_Char[3], c);
      caml_call2(Markup_Common[10], buffer, _aE_);
      return iterate(0);
     }
     function _aD_(param){return caml_call1(k, cst$0);}
     return caml_call4(Markup_Kstream[4], source, throw$0, _aD_, _aC_);
    }
    return iterate(0);
   }
   function read_unquoted_value(terminator, source, throw$0, k){
    var buffer = caml_call1(Stdlib_Buffer[1], 32);
    function iterate(param){
     function _az_(c){
      if(! is_whitespace(c) && c !== terminator){
       var _aB_ = caml_call1(Stdlib_Char[3], c);
       caml_call2(Markup_Common[10], buffer, _aB_);
       return iterate(0);
      }
      caml_call2(Markup_Kstream[8], source, c);
      return caml_call1(k, caml_call1(Stdlib_Buffer[2], buffer));
     }
     function _aA_(param){
      return caml_call1(k, caml_call1(Stdlib_Buffer[2], buffer));
     }
     return caml_call4(Markup_Kstream[4], source, throw$0, _aA_, _az_);
    }
    return iterate(0);
   }
   function everything(param, k){return caml_call1(k, 1);}
   function meta_tag_prescan(opt, _A_, source, throw$0, k){
    if(opt)
     var sth = opt[1], supported = sth;
    else
     var supported = everything;
    if(_A_) var sth$0 = _A_[1], limit = sth$0; else var limit = 1024;
    var
     match = caml_call1(Markup_Kstream[16], source),
     restore = match[2],
     source$0 = match[1];
    function finish(result){
     caml_call1(restore, 0);
     return caml_call1(k, result);
    }
    var count = [0, 0];
    function _B_(throw$0, empty, k){
     if(limit <= count[1]) return caml_call1(empty, 0);
     function _ay_(c){count[1] = count[1] + 1 | 0; return caml_call1(k, c);}
     return caml_call4(Markup_Kstream[4], source$0, throw$0, empty, _ay_);
    }
    var source$1 = caml_call1(Markup_Kstream[1], _B_);
    function get_attribute(k){
     function skip_leading(k$0){
      function _aw_(c){
       if(! is_whitespace(c) && 47 !== c){
        caml_call2(Markup_Kstream[8], source$1, c);
        return caml_call1(k$0, 0);
       }
       return skip_leading(k$0);
      }
      function _ax_(param){return caml_call1(k, 0);}
      return caml_call4(Markup_Kstream[4], source$1, throw$0, _ax_, _aw_);
     }
     return skip_leading
             (function(param){
               function k$0(name){
                return skip_whitespace
                        (source$1,
                         throw$0,
                         function(param){
                          function _ao_(c){
                           if(c && 61 === c[1])
                            return skip_whitespace
                                    (source$1,
                                     throw$0,
                                     function(param){
                                      function _ap_(maybe_c){
                                       if(maybe_c){
                                        var c = maybe_c[1];
                                        a:
                                        {
                                         if(34 !== c && 39 !== c){
                                          caml_call2(Markup_Kstream[8], source$1, c);
                                          var
                                           _ar_ = 62,
                                           _aq_ =
                                             function(_au_){
                                              return read_unquoted_value(_ar_, source$1, throw$0, _au_);
                                             };
                                          break a;
                                         }
                                         var
                                          _aq_ =
                                            function(_at_){
                                             return read_quoted_value(c, source$1, throw$0, _at_);
                                            };
                                        }
                                        var continue_with = _aq_;
                                       }
                                       else
                                        var
                                         _as_ = 62,
                                         continue_with =
                                           function(_av_){
                                            return read_unquoted_value(_as_, source$1, throw$0, _av_);
                                           };
                                       return continue_with
                                               (function(value){
                                                 return caml_call1(k, [0, [0, name, value]]);
                                                });
                                      }
                                      return caml_call3
                                              (Markup_Kstream[5], source$1, throw$0, _ap_);
                                     });
                           caml_call2(Markup_Kstream[9], source$1, c);
                           return caml_call1(k, [0, [0, name, cst$2]]);
                          }
                          return caml_call3
                                  (Markup_Kstream[5], source$1, throw$0, _ao_);
                         });
               }
               var buffer = caml_call1(Stdlib_Buffer[1], 32);
               function iterate(param){
                function _am_(c){
                 a:
                 if(c){
                  var c$0 = c[1], switcher = c$0 - 61 | 0;
                  if(1 < switcher >>> 0){
                   if(-14 === switcher) break a;
                  }
                  else{
                   if(switcher) break a;
                   if(0 < caml_call1(Stdlib_Buffer[7], buffer)){
                    caml_call2(Markup_Kstream[8], source$1, c$0);
                    return k$0(caml_call1(Stdlib_Buffer[2], buffer));
                   }
                  }
                  if(is_whitespace(c$0))
                   return k$0(caml_call1(Stdlib_Buffer[2], buffer));
                  var _an_ = caml_call1(Stdlib_Char[3], c$0);
                  caml_call2(Markup_Common[10], buffer, _an_);
                  return iterate(0);
                 }
                 caml_call2(Markup_Kstream[9], source$1, c);
                 return 0 === caml_call1(Stdlib_Buffer[7], buffer)
                         ? caml_call1(k, 0)
                         : caml_call1
                           (k, [0, [0, caml_call1(Stdlib_Buffer[2], buffer), cst$1]]);
                }
                return caml_call3(Markup_Kstream[5], source$1, throw$0, _am_);
               }
               return iterate(0);
              });
    }
    function close_comment(k){
     function _ai_(param){
      if(45 !== param) return close_comment(k);
      function _ak_(l){
       if(l && 45 === l[1]){
        var _al_ = l[2];
        if(_al_ && 62 === _al_[1] && ! _al_[2]) return caml_call1(k, 0);
       }
       caml_call2(Markup_Kstream[10], source$1, l);
       return close_comment(k);
      }
      return caml_call4(Markup_Kstream[7], 2, source$1, throw$0, _ak_);
     }
     function _aj_(param){return finish(0);}
     return caml_call4(Markup_Kstream[4], source$1, throw$0, _aj_, _ai_);
    }
    function close_tag(k){
     function skip(param){
      function _ag_(c){
       if(! is_whitespace(c) && 62 !== c) return skip(0);
       caml_call2(Markup_Kstream[8], source$1, c);
       function drain_attributes(param){
        return get_attribute
                (function(param){
                  return param ? drain_attributes(0) : caml_call1(k, 0);
                 });
       }
       return drain_attributes(0);
      }
      function _ah_(param){return finish(0);}
      return caml_call4(Markup_Kstream[4], source$1, throw$0, _ah_, _ag_);
     }
     return skip(0);
    }
    function close_tag_like(k){
     function _ae_(param){
      return 62 === param ? caml_call1(k, 0) : close_tag_like(k);
     }
     function _af_(param){return finish(0);}
     return caml_call4(Markup_Kstream[4], source$1, throw$0, _af_, _ae_);
    }
    function scan(param){
     function _C_(param){
      if(60 !== param) return scan(0);
      function _E_(c){
       if(48 <= c){
        if(63 === c) return close_tag_like(scan);
        if(109 === c){
         var
          _G_ =
            function(l){
             var match = caml_call2(Stdlib_List[20], Stdlib_Char[3], l);
             a:
             if(match && 109 === match[1]){
              var _J_ = match[2];
              if(_J_ && 101 === _J_[1]){
               var _K_ = _J_[2];
               if(_K_ && 116 === _K_[1]){
                var _L_ = _K_[2];
                if(_L_ && 97 === _L_[1]){
                 var _M_ = _L_[2];
                 if(_M_ && ! _M_[2]){
                  var c = _M_[1];
                  if(! is_whitespace(c) && 47 !== c) break a;
                  var
                   _N_ =
                     function(param){
                      function iterate(names, got_pragma, need_pragma, charset){
                       return get_attribute
                               (function(param){
                                 if(param){
                                  var match = param[1], value = match[2], name = match[1];
                                  if(caml_call2(Markup_Common[37], name, names))
                                   return iterate(names, got_pragma, need_pragma, charset);
                                  var names$0 = [0, name, names];
                                  if(! caml_string_notequal(name, "charset"))
                                   return caml_string_equal(value, cst$3)
                                           ? iterate(names$0, got_pragma, need_pragma, charset)
                                           : iterate(names$0, got_pragma, _t_, [0, value]);
                                  if(caml_string_notequal(name, "content"))
                                   return caml_string_notequal(name, "http-equiv")
                                           ? iterate(names$0, got_pragma, need_pragma, charset)
                                           : caml_string_equal
                                              (value, "content-type")
                                             ? iterate(names$0, 1, need_pragma, charset)
                                             : iterate(names$0, got_pragma, need_pragma, charset);
                                  if(0 !== charset)
                                   return iterate(names$0, got_pragma, need_pragma, charset);
                                  var
                                   k =
                                     function(param){
                                      if(! param)
                                       return iterate(names$0, got_pragma, need_pragma, charset);
                                      var encoding = param[1];
                                      return iterate(names$0, got_pragma, _s_, [0, encoding]);
                                     },
                                   source = caml_call1(Markup_Stream_io[2], value),
                                   scan$0 =
                                     function(param){
                                      function _O_(param){
                                       if(99 !== param) return scan$0(0);
                                       function _Q_(l){
                                        var match = caml_call2(Stdlib_List[20], Stdlib_Char[3], l);
                                        if(match && 104 === match[1]){
                                         var _R_ = match[2];
                                         if(_R_ && 97 === _R_[1]){
                                          var _S_ = _R_[2];
                                          if(_S_ && 114 === _S_[1]){
                                           var _T_ = _S_[2];
                                           if(_T_ && 115 === _T_[1]){
                                            var _U_ = _T_[2];
                                            if(_U_ && 101 === _U_[1]){
                                             var _V_ = _U_[2];
                                             if(_V_ && 116 === _V_[1] && ! _V_[2])
                                              return skip_whitespace
                                                      (source,
                                                       throw$0,
                                                       function(param){
                                                        function _W_(c){
                                                         return 61 === c
                                                                 ? skip_whitespace
                                                                   (source,
                                                                    throw$0,
                                                                    function(param){
                                                                     function _Y_(c){
                                                                      a:
                                                                      {
                                                                       if(34 !== c && 39 !== c){
                                                                        caml_call2(Markup_Kstream[8], source, c);
                                                                        var
                                                                         ___ = 59,
                                                                         continue_with =
                                                                           function(_aa_){
                                                                            return read_unquoted_value(___, source, throw$0, _aa_);
                                                                           };
                                                                        break a;
                                                                       }
                                                                       var
                                                                        continue_with =
                                                                          function(_$_){
                                                                           return read_quoted_value(c, source, throw$0, _$_);
                                                                          };
                                                                      }
                                                                      return continue_with
                                                                              (function(s){
                                                                                return caml_string_notequal(s, cst$3) ? k([0, s]) : k(0);
                                                                               });
                                                                     }
                                                                     function _Z_(param){return k(0);}
                                                                     return caml_call4
                                                                             (Markup_Kstream[4], source, throw$0, _Z_, _Y_);
                                                                    })
                                                                 : (caml_call2(Markup_Kstream[8], source, c), scan$0(0));
                                                        }
                                                        function _X_(param){return k(0);}
                                                        return caml_call4
                                                                (Markup_Kstream[4], source, throw$0, _X_, _W_);
                                                       });
                                            }
                                           }
                                          }
                                         }
                                        }
                                        return scan$0(0);
                                       }
                                       return caml_call4
                                               (Markup_Kstream[7], 6, source, throw$0, _Q_);
                                      }
                                      function _P_(param){return k(0);}
                                      return caml_call4
                                              (Markup_Kstream[4], source, throw$0, _P_, _O_);
                                     };
                                  return scan$0(0);
                                 }
                                 function k$0(v){return v ? finish(v) : scan(0);}
                                 if(! need_pragma) return k$0(0);
                                 var need_pragma$0 = need_pragma[1];
                                 if(need_pragma$0 && ! got_pragma) return k$0(0);
                                 if(! charset) return k$0(0);
                                 var
                                  charset$0 = charset[1],
                                  s = normalize_name(1, charset$0);
                                 a:
                                 {
                                  if
                                   (caml_string_notequal(s, cst_utf_16)
                                    &&
                                     caml_string_notequal(s, cst_utf_16be$0)
                                     && caml_string_notequal(s, cst_utf_16le$0)){var charset$1 = s; break a;}
                                  var charset$1 = cst_utf_8$0;
                                 }
                                 return caml_call2
                                         (supported,
                                          charset$1,
                                          function(param){
                                           return param ? k$0([0, charset$1]) : k$0(0);
                                          });
                                });
                      }
                      return iterate(0, 0, 0, 0);
                     };
                  return caml_call4
                          (Markup_Kstream[7], 4, source$1, throw$0, _N_);
                 }
                }
               }
              }
             }
             return close_tag(scan);
            };
         return caml_call4(Markup_Kstream[14], 5, source$1, throw$0, _G_);
        }
       }
       else{
        if(33 === c){
         var
          _H_ =
            function(param){
             if(param && 33 === param[1]){
              var _ac_ = param[2];
              if(_ac_ && 45 === _ac_[1]){
               var _ad_ = _ac_[2];
               if(_ad_ && 45 === _ad_[1] && ! _ad_[2])
                return close_comment(scan);
              }
             }
             return close_tag_like(scan);
            };
         return caml_call4(Markup_Kstream[14], 3, source$1, throw$0, _H_);
        }
        if(47 <= c){
         var
          _I_ =
            function(param){
             if(param && 47 === param[1]){
              var _ab_ = param[2];
              if(_ab_ && ! _ab_[2]){
               var c = _ab_[1];
               if(is_letter(c)) return close_tag(scan);
              }
             }
             return close_tag_like(scan);
            };
         return caml_call4(Markup_Kstream[14], 2, source$1, throw$0, _I_);
        }
       }
       return is_letter(c) ? close_tag(scan) : scan(0);
      }
      function _F_(param){return finish(0);}
      return caml_call4(Markup_Kstream[11], source$1, throw$0, _F_, _E_);
     }
     function _D_(param){return finish(0);}
     return caml_call4(Markup_Kstream[4], source$1, throw$0, _D_, _C_);
    }
    return scan(0);
   }
   function read_xml_encoding_declaration(bytes, family, throw$0, k){
    var
     match = caml_call1(Markup_Kstream[16], bytes),
     restore = match[2],
     bytes$0 = match[1];
    function k$0(v){caml_call1(restore, 0); return caml_call1(k, v);}
    var
     _u_ = caml_call2(family, 0, bytes$0),
     _v_ =
       caml_call1
        (caml_call2(Markup_Input[1], Markup_Common[28], Markup_Error[3]), _u_);
    function _w_(param){return 0;}
    var
     tokens =
       caml_call1
        (caml_call2(Markup_Xml_tokenizer[1], Markup_Error[3], _w_), _v_);
    function prescan(param){
     function _x_(param){
      var match = param[2];
      if(typeof match !== "number"){
       var _z_ = match[1];
       if(-826170817 === _z_) return prescan(0);
       if(-656339779 === _z_){
        var s = match[2];
        if(caml_call2(Stdlib_List[33], Markup_Common[23], s))
         return prescan(0);
       }
       else if(4400567 === _z_){
        var encoding = match[2][2];
        return k$0(encoding);
       }
      }
      return k$0(0);
     }
     function _y_(param){return k$0(0);}
     return caml_call4(Markup_Kstream[4], tokens, throw$0, _y_, _x_);
    }
    return prescan(0);
   }
   function name_to_encoding_or_utf_8(encoding){
    var switch$0 = caml_string_compare(encoding, cst_utf_16be$0);
    a:
    {
     if(0 <= switch$0){
      if(0 >= switch$0){var match = [0, Markup_Encoding[5]]; break a;}
      if(! caml_string_notequal(encoding, cst_utf_16le$0)){var match = [0, Markup_Encoding[6]]; break a;}
      if(! caml_string_notequal(encoding, cst_utf_8$2)){var match = [0, Markup_Encoding[4]]; break a;}
      if(! caml_string_notequal(encoding, cst_windows_1251$0)){var match = [0, Markup_Encoding[17]]; break a;}
      if(! caml_string_notequal(encoding, cst_windows_1252$2)){var match = [0, Markup_Encoding[19]]; break a;}
     }
     else{
      if(! caml_string_notequal(encoding, cst_iso_8859_1$0)){var match = [0, Markup_Encoding[7]]; break a;}
      if(! caml_string_notequal(encoding, cst_iso_8859_15$0)){var match = [0, Markup_Encoding[23]]; break a;}
      if(! caml_string_notequal(encoding, cst_ucs_4be)){var match = [0, Markup_Encoding[11]]; break a;}
      if(! caml_string_notequal(encoding, cst_ucs_4le)){var match = [0, Markup_Encoding[12]]; break a;}
      if(! caml_string_notequal(encoding, cst_us_ascii$0)){var match = [0, Markup_Encoding[8]]; break a;}
     }
     var match = 0;
    }
    if(! match) return Markup_Encoding[4];
    var e = match[1];
    return e;
   }
   function select_html(limit, bytes, throw$0, k){
    return guess_from_bom_html
            (bytes,
             throw$0,
             function(param){
              if(! param)
               return meta_tag_prescan
                       (0,
                        limit,
                        bytes,
                        throw$0,
                        function(param){
                         if(! param) return caml_call1(k, Markup_Encoding[4]);
                         var encoding = param[1];
                         return caml_call1(k, name_to_encoding_or_utf_8(encoding));
                        });
              var encoding = param[1];
              return caml_call1(k, name_to_encoding_or_utf_8(encoding));
             });
   }
   function select_xml(bytes, throw$0, k){
    return guess_from_bom_xml
            (bytes,
             throw$0,
             function(param){
              if(param){
               var encoding = param[1];
               return caml_call1(k, name_to_encoding_or_utf_8(encoding));
              }
              function k$0(name, family){
               return read_xml_encoding_declaration
                       (bytes,
                        family,
                        throw$0,
                        function(param){
                         if(! param)
                          return caml_call1(k, name_to_encoding_or_utf_8(name));
                         var
                          encoding = param[1],
                          match = normalize_name(0, encoding);
                         if(! caml_string_notequal(name, cst_utf_8$2)){
                          if(! caml_string_notequal(match, cst_iso_8859_1$0))
                           return caml_call1(k, Markup_Encoding[7]);
                          if(! caml_string_notequal(match, cst_us_ascii$0))
                           return caml_call1(k, Markup_Encoding[8]);
                          if(! caml_string_notequal(match, cst_windows_1251$0))
                           return caml_call1(k, Markup_Encoding[17]);
                          if(! caml_string_notequal(match, cst_windows_1252$2))
                           return caml_call1(k, Markup_Encoding[19]);
                         }
                         return caml_call1(k, name_to_encoding_or_utf_8(name));
                        });
              }
              return guess_family_xml
                      (bytes,
                       throw$0,
                       function(param){
                        if(! param) return k$0(cst_utf_8$1, Markup_Encoding[4]);
                        var family = param[1];
                        return k$0(family, name_to_encoding_or_utf_8(family));
                       });
             });
   }
   var
    Markup_Detect =
      [0,
       select_html,
       select_xml,
       normalize_name,
       guess_from_bom_html,
       guess_from_bom_xml,
       guess_family_xml,
       meta_tag_prescan,
       read_xml_encoding_declaration];
   runtime.caml_register_global(323, Markup_Detect, "Markup__Detect");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Html_tokenizer
//# unitInfo: Requires: CamlinternalLazy, Markup__Common, Markup__Entities, Markup__Kstream, Markup__Trie, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Char, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$21 = "",
    cst$24 = "&",
    cst$22 = "&#",
    cst_should_be_in$0 = "'--' should be in '-->'",
    cst_overlaps = "'-->' overlaps '<!--'",
    cst$20 = "--",
    cst$19 = "--!",
    cst$23 = ";",
    cst$18 = ">",
    cst_U_0000 = "U+0000",
    cst_attribute_name$2 = "attribute name",
    cst_attribute_value$1 = "attribute value",
    cst_character_reference$6 = "character reference",
    cst_comment$0 = "comment",
    cst_content = "content",
    cst_doctype$11 = "doctype",
    cst_entity_reference$1 = "entity reference",
    cst_expected_digits$1 = "expected digits",
    cst_expected_public_identifier = "expected public identifier",
    cst_expected_system_identifier = "expected system identifier",
    cst_expected_whitespace$5 = "expected whitespace",
    cst_invalid_start_character$4 = "invalid start character",
    cst_missing_at_end$1 = "missing ';' at end",
    cst_null = "null",
    cst_out_of_range$1 = "out of range",
    cst_script = "script",
    cst_system_identifier_must_be_$2 = "system identifier must be quoted",
    cst_tag$5 = "tag",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$15 = cst$19,
    cst$17 = cst$19,
    cst$16 = cst$19,
    cst$12 = cst$20,
    cst$14 = cst$20,
    cst$13 = cst$20,
    cst$11 = cst$21,
    cst$9 = cst$21,
    cst$10 = cst$21,
    cst$8 = cst$21,
    cst$6 = cst$21,
    cst$7 = cst$21,
    prefix = cst$22,
    cst$0 = cst$21,
    cst = cst$23,
    cst$4 = cst$23,
    cst$5 = cst$24,
    cst$1 = cst$24,
    cst$2 = "=",
    cst$3 = cst$24,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Common = global_data.Markup__Common,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Markup_Trie = global_data.Markup__Trie,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Markup_Entities = global_data.Markup__Entities,
    Stdlib_Array = global_data.Stdlib__Array,
    _aW_ = [0, 748194550, 93],
    _aU_ = [0, 1],
    cst_junk_after_system_identifi = "junk after system identifier",
    cst_doctype$10 = cst_doctype$11,
    _aV_ = [0, -95440847, cst_doctype$11],
    _aS_ = [0, 1],
    _aQ_ = [0, 1],
    _aR_ =
      [0,
       -590381665,
       [0, cst$18, cst_doctype$11, cst_expected_system_identifier]],
    cst_system_identifier_must_be_$1 = cst_system_identifier_must_be_$2,
    cst_doctype$9 = cst_doctype$11,
    _aT_ = [0, -95440847, cst_doctype$11],
    _aO_ = [0, 1],
    _aM_ = [0, 1],
    _aN_ =
      [0,
       -590381665,
       [0, cst$18, cst_doctype$11, cst_expected_system_identifier]],
    cst_expected_whitespace$4 = cst_expected_whitespace$5,
    cst_doctype$8 = cst_doctype$11,
    cst_expected_whitespace$3 = cst_expected_whitespace$5,
    cst_doctype$7 = cst_doctype$11,
    _aP_ = [0, -95440847, cst_doctype$11],
    _aK_ = [0, 1],
    cst_system_identifier_must_be_$0 = cst_system_identifier_must_be_$2,
    cst_doctype$6 = cst_doctype$11,
    _aL_ = [0, -95440847, cst_doctype$11],
    _aI_ = [0, 1],
    cst_expected_whitespace$2 = cst_expected_whitespace$5,
    cst_doctype$5 = cst_doctype$11,
    cst_system_identifier_must_be_ = cst_system_identifier_must_be_$2,
    cst_doctype$4 = cst_doctype$11,
    _aJ_ = [0, -95440847, cst_doctype$11],
    _aG_ = [0, 1],
    _aE_ = [0, 1],
    _aF_ = [0, -590381665, [0, cst$18, cst_doctype$11, "'>' in identifier"]],
    _aD_ = [0, -590381665, [0, cst_U_0000, cst_doctype$11, cst_null]],
    _aH_ = [0, -95440847, cst_doctype$11],
    _aB_ = [0, 1],
    _az_ = [0, 1],
    _aA_ =
      [0,
       -590381665,
       [0, cst$18, cst_doctype$11, cst_expected_public_identifier]],
    cst_public_identifier_must_be_ = "public identifier must be quoted",
    cst_doctype$3 = cst_doctype$11,
    _aC_ = [0, -95440847, cst_doctype$11],
    _ax_ = [0, 1],
    _av_ = [0, 1],
    _aw_ =
      [0,
       -590381665,
       [0, cst$18, cst_doctype$11, cst_expected_public_identifier]],
    cst_expected_whitespace$1 = cst_expected_whitespace$5,
    cst_doctype$2 = cst_doctype$11,
    cst_expected_whitespace$0 = cst_expected_whitespace$5,
    cst_doctype$1 = cst_doctype$11,
    _ay_ = [0, -95440847, cst_doctype$11],
    _at_ = [0, 1],
    cst_expected_PUBLIC_or_SYSTEM = "expected 'PUBLIC' or 'SYSTEM'",
    cst_doctype$0 = cst_doctype$11,
    _au_ = [0, -95440847, cst_doctype$11],
    _ar_ = [0, 1],
    _aq_ = [0, -590381665, [0, cst_U_0000, cst_doctype$11, cst_null]],
    _as_ = [0, -95440847, cst_doctype$11],
    _ao_ = [0, 1],
    _al_ = [0, 1],
    _am_ = [0, -590381665, [0, cst$18, cst_doctype$11, "expected name"]],
    _an_ = [0, -590381665, [0, cst_U_0000, cst_doctype$11, cst_null]],
    _ap_ = [0, -95440847, cst_doctype$11],
    _aj_ = [0, 1],
    cst_expected_whitespace = cst_expected_whitespace$5,
    cst_doctype = cst_doctype$11,
    _ak_ = [0, -95440847, cst_doctype$11],
    _ah_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    _ai_ = [0, -95440847, cst_comment$0],
    _ad_ = [0, -590381665, [0, "---", cst_comment$0, cst_should_be_in$0]],
    _af_ = [0, -590381665, [0, cst$19, cst_comment$0, cst_should_be_in$0]],
    _ae_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    cst_should_be_in = cst_should_be_in$0,
    cst_comment = cst_comment$0,
    _ag_ = [0, -95440847, cst_comment$0],
    _ab_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    _ac_ = [0, -95440847, cst_comment$0],
    _$_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    _aa_ = [0, -95440847, cst_comment$0],
    _Z_ = [0, -590381665, [0, "<!--->", cst_comment$0, cst_overlaps]],
    _Y_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    ___ = [0, -95440847, cst_comment$0],
    _W_ = [0, -590381665, [0, "<!-->", cst_comment$0, cst_overlaps]],
    _V_ = [0, -590381665, [0, cst_U_0000, cst_comment$0, cst_null]],
    _X_ = [0, -95440847, cst_comment$0],
    _U_ =
      [0,
       -590381665,
       [0, "<![CDATA[", cst_content, "CDATA sections not allowed in HTML"]],
    _T_ =
      [0, -590381665, [0, "<!", cst_comment$0, "should begin with '<!--'"]],
    cst_expected = "expected '/>'",
    cst_tag$4 = cst_tag$5,
    _S_ = [0, -95440847, cst_tag$5],
    cst_expected_whitespace_before = "expected whitespace before attribute",
    cst_tag$3 = cst_tag$5,
    _R_ = [0, -95440847, cst_tag$5],
    _P_ = [0, -590381665, [0, cst_U_0000, cst_attribute_value$1, cst_null]],
    cst_invalid_character = "invalid character",
    cst_attribute_value$0 = cst_attribute_value$1,
    _Q_ = [0, -95440847, cst_tag$5],
    _N_ = [0, -590381665, [0, cst_U_0000, cst_attribute_value$1, cst_null]],
    _O_ = [0, -95440847, cst_attribute_value$1],
    _K_ =
      [0,
       -590381665,
       [0, cst$18, cst_tag$5, "expected attribute value after '='"]],
    _L_ = [0, -590381665, [0, cst_U_0000, cst_attribute_value$1, cst_null]],
    cst_invalid_start_character$3 = cst_invalid_start_character$4,
    cst_attribute_value = cst_attribute_value$1,
    _M_ = [0, -95440847, cst_tag$5],
    _I_ = [0, -590381665, [0, cst_U_0000, cst_attribute_name$2, cst_null]],
    cst_invalid_start_character$2 = cst_invalid_start_character$4,
    cst_attribute_name$1 = cst_attribute_name$2,
    _J_ = [0, -95440847, cst_tag$5],
    _G_ = [0, -590381665, [0, cst_U_0000, cst_attribute_name$2, cst_null]],
    cst_invalid_name_character = "invalid name character",
    cst_attribute_name$0 = cst_attribute_name$2,
    _H_ = [0, -95440847, cst_tag$5],
    _E_ = [0, -590381665, [0, cst_U_0000, cst_attribute_name$2, cst_null]],
    cst_invalid_start_character$1 = cst_invalid_start_character$4,
    cst_attribute_name = cst_attribute_name$2,
    _F_ = [0, -95440847, cst_tag$5],
    _C_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _D_ = [0, -95440847, cst_script],
    _A_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _B_ = [0, -95440847, cst_script],
    _y_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _z_ = [0, -95440847, cst_script],
    _w_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _x_ = [0, -95440847, cst_script],
    _u_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _v_ = [0, -95440847, cst_script],
    _s_ = [0, -590381665, [0, cst_U_0000, cst_script, cst_null]],
    _t_ = [0, -95440847, cst_script],
    _q_ = [0, -590381665, [0, cst_U_0000, "tag name", cst_null]],
    _r_ = [0, -95440847, cst_tag$5],
    _n_ = [0, 748194550, 47],
    _o_ = [0, 748194550, 60],
    cst_invalid_start_character$0 = cst_invalid_start_character$4,
    cst_tag$2 = cst_tag$5,
    _m_ = [0, -590381665, [0, "<\/>", cst_tag$5, "no tag name"]],
    _p_ = [0, -95440847, cst_tag$5],
    cst_invalid_start_character = cst_invalid_start_character$4,
    cst_tag$1 = cst_tag$5,
    _k_ =
      [0,
       -590381665,
       [0, "<?", cst_content, "HTML does not have processing instructions"]],
    _l_ = [0, -95440847, cst_tag$5],
    _j_ = [0, -590381665, [0, cst_U_0000, cst_content, cst_null]],
    _i_ = [0, -590381665, [0, cst_U_0000, cst_content, cst_null]],
    _h_ = [0, -590381665, [0, cst_U_0000, cst_content, cst_null]],
    _g_ = [0, -590381665, [0, cst_U_0000, cst_content, cst_null]],
    _f_ = [0, 748194550, 38],
    _d_ = [0, 748194550, 0],
    _e_ = [0, -590381665, [0, cst_U_0000, cst_content, cst_null]],
    cst_expected_digits$0 = cst_expected_digits$1,
    cst_character_reference$5 = cst_character_reference$6,
    cst_0x = "0x",
    cst_expected_digits = cst_expected_digits$1,
    cst_character_reference$4 = cst_character_reference$6,
    _c_ = [0, [11, cst$22, [0, 0]], "&#%c"],
    cst_Windows_1252_character = "Windows-1252 character",
    cst_character_reference$1 = cst_character_reference$6,
    cst_out_of_range$0 = cst_out_of_range$1,
    cst_character_reference$2 = cst_character_reference$6,
    cst_invalid_HTML_character = "invalid HTML character",
    cst_character_reference$3 = cst_character_reference$6,
    cst_out_of_range = cst_out_of_range$1,
    cst_character_reference$0 = cst_character_reference$6,
    cst_missing_at_end = cst_missing_at_end$1,
    cst_character_reference = cst_character_reference$6,
    cst_no_such_entity = "no such entity",
    cst_entity_reference$0 = cst_entity_reference$1,
    cst_missing_at_end$0 = cst_missing_at_end$1,
    cst_entity_reference = cst_entity_reference$1,
    cst_unterminated_entity_refere =
      "unterminated entity reference followed by '='",
    cst_attribute = "attribute",
    cst_duplicate_attribute = "duplicate attribute",
    cst_tag = cst_tag$5,
    cst_end_tag_with_attributes = "end tag with attributes",
    cst_tag$0 = cst_tag$5,
    _b_ =
      [0, -590381665, [0, "/>", cst_tag$5, "end tag cannot be self-closing"]],
    named_entity_trie =
      [246,
       function(param){
        var trie = caml_call1(Markup_Trie[4], 0), _jE_ = Markup_Entities[1];
        function _jF_(trie, param){
         var characters = param[2], name = param[1];
         return caml_call3(Markup_Trie[6], name, characters, trie);
        }
        return caml_call3(Stdlib_Array[17], _jF_, trie, _jE_);
       }];
   function add_doctype_char(buffer, c){
    if(buffer)
     var buffer$0 = buffer[1], buffer$1 = buffer$0;
    else
     var buffer$1 = caml_call1(Stdlib_Buffer[1], 32);
    caml_call2(Markup_Common[10], buffer$1, c);
    return [0, buffer$1];
   }
   function _a_(param){
    var c = param[2], l = param[1];
    return [0, l, caml_call1(Markup_Common[24], c)];
   }
   var sequence_to_lowercase = caml_call1(Stdlib_List[20], _a_);
   function tokenize(report, param){
    var
     get_location = param[2],
     input = param[1],
     foreign = [0, function(param){return 0;}],
     last_start_tag_name = [0, 0];
    function is_appropriate_end_tag(name_buffer){
     var match = last_start_tag_name[1];
     if(! match) return 0;
     var name = match[1];
     return caml_string_equal(caml_call1(Stdlib_Buffer[2], name_buffer), name);
    }
    var
     throw$0 = [0, function(param){return 0;}],
     ended = [0, function(param){return 0;}],
     output = [0, function(param){return 0;}],
     current_state = [],
     emit = function _jD_(_jB_, _jC_){return _jD_.fun(_jB_, _jC_);},
     emit_character =
       function _jA_(_jx_, _jy_, _jz_){return _jA_.fun(_jx_, _jy_, _jz_);},
     emit_characters = function _jw_(_ju_, _jv_){return _jw_.fun(_ju_, _jv_);},
     emit_eof = function _jt_(_js_){return _jt_.fun(_js_);},
     emit_tag = function _jr_(_jp_, _jq_){return _jr_.fun(_jp_, _jq_);},
     emit_comment = function _jo_(_jm_, _jn_){return _jo_.fun(_jm_, _jn_);},
     emit_doctype =
       function _jl_(_ji_, _jj_, _jk_){return _jl_.fun(_ji_, _jj_, _jk_);},
     consume_character_reference =
       function _jh_(_jd_, _je_, _jf_, _jg_){
        return _jh_.fun(_jd_, _je_, _jf_, _jg_);
       },
     data_state = function _jc_(_jb_){return _jc_.fun(_jb_);},
     character_reference_state =
       function _ja_(_i__, _i$_){return _ja_.fun(_i__, _i$_);},
     rcdata_state = function _i9_(_i8_){return _i9_.fun(_i8_);},
     rawtext_state = function _i7_(_i6_){return _i7_.fun(_i6_);},
     script_data_state = function _i5_(_i4_){return _i5_.fun(_i4_);},
     plaintext_state = function _i3_(_i2_){return _i3_.fun(_i2_);},
     tag_open_state = function _i1_(_i0_){return _i1_.fun(_i0_);},
     end_tag_open_state =
       function _iZ_(_iX_, _iY_){return _iZ_.fun(_iX_, _iY_);},
     tag_name_state = function _iW_(_iU_, _iV_){return _iW_.fun(_iU_, _iV_);},
     text_less_than_sign_state =
       function _iT_(_iQ_, _iR_, _iS_){return _iT_.fun(_iQ_, _iR_, _iS_);},
     text_end_tag_open_state =
       function _iP_(_iM_, _iN_, _iO_){return _iP_.fun(_iM_, _iN_, _iO_);},
     text_end_tag_name_state =
       function _iL_(_iH_, _iI_, _iJ_, _iK_){
        return _iL_.fun(_iH_, _iI_, _iJ_, _iK_);
       },
     script_data_less_than_sign_sta =
       function _iG_(_iE_, _iF_){return _iG_.fun(_iE_, _iF_);},
     script_data_escape_start_state =
       function _iD_(_iC_){return _iD_.fun(_iC_);},
     script_data_escape_start_dash_ =
       function _iB_(_iA_){return _iB_.fun(_iA_);},
     script_data_escaped_state = function _iz_(_iy_){return _iz_.fun(_iy_);},
     script_data_escaped_dash_state =
       function _ix_(_iw_){return _ix_.fun(_iw_);},
     script_data_escaped_dash_dash_ =
       function _iv_(_iu_){return _iv_.fun(_iu_);},
     script_data_escaped_less_than_ =
       function _it_(_iq_, _ir_, _is_){return _it_.fun(_iq_, _ir_, _is_);},
     script_data_double_escape_star =
       function _ip_(_in_, _io_){return _ip_.fun(_in_, _io_);},
     script_data_double_escaped_sta =
       function _im_(_il_){return _im_.fun(_il_);},
     script_data_double_escaped_das =
       function _ik_(_ij_){return _ik_.fun(_ij_);},
     script_data_double_escaped_das$0 =
       function _ii_(_ih_){return _ii_.fun(_ih_);},
     script_data_double_escaped_les =
       function _ig_(_if_){return _ig_.fun(_if_);},
     script_data_double_escape_end_ =
       function _ie_(_ic_, _id_){return _ie_.fun(_ic_, _id_);},
     before_attribute_name_state =
       function _ib_(_h$_, _ia_){return _ib_.fun(_h$_, _ia_);},
     attribute_name_state =
       function _h__(_h7_, _h8_, _h9_){return _h__.fun(_h7_, _h8_, _h9_);},
     after_attribute_name_state =
       function _h6_(_h3_, _h4_, _h5_){return _h6_.fun(_h3_, _h4_, _h5_);},
     before_attribute_value_state =
       function _h2_(_hZ_, _h0_, _h1_){return _h2_.fun(_hZ_, _h0_, _h1_);},
     attribute_value_quoted_state =
       function _hY_(_hT_, _hU_, _hV_, _hW_, _hX_){
        return _hY_.fun(_hT_, _hU_, _hV_, _hW_, _hX_);
       },
     attribute_value_unquoted_state =
       function _hS_(_hO_, _hP_, _hQ_, _hR_){
        return _hS_.fun(_hO_, _hP_, _hQ_, _hR_);
       },
     character_reference_in_attribu =
       function _hN_(_hJ_, _hK_, _hL_, _hM_){
        return _hN_.fun(_hJ_, _hK_, _hL_, _hM_);
       },
     after_attribute_value_quoted_s =
       function _hI_(_hG_, _hH_){return _hI_.fun(_hG_, _hH_);},
     self_closing_start_tag_state =
       function _hF_(_hD_, _hE_){return _hF_.fun(_hD_, _hE_);},
     bogus_comment_state = function _hC_(_hB_){return _hC_.fun(_hB_);},
     markup_declaration_open_state =
       function _hA_(_hz_){return _hA_.fun(_hz_);},
     comment_start_state =
       function _hy_(_hw_, _hx_){return _hy_.fun(_hw_, _hx_);},
     comment_start_dash_state =
       function _hv_(_ht_, _hu_){return _hv_.fun(_ht_, _hu_);},
     comment_state = function _hs_(_hq_, _hr_){return _hs_.fun(_hq_, _hr_);},
     comment_end_dash_state =
       function _hp_(_hn_, _ho_){return _hp_.fun(_hn_, _ho_);},
     comment_end_state =
       function _hm_(_hk_, _hl_){return _hm_.fun(_hk_, _hl_);},
     comment_end_bang_state =
       function _hj_(_hh_, _hi_){return _hj_.fun(_hh_, _hi_);},
     doctype_state = function _hg_(_hf_){return _hg_.fun(_hf_);},
     before_doctype_name_state =
       function _he_(_hc_, _hd_){return _he_.fun(_hc_, _hd_);},
     doctype_name_state =
       function _hb_(_g$_, _ha_){return _hb_.fun(_g$_, _ha_);},
     after_doctype_name_state =
       function _g__(_g8_, _g9_){return _g__.fun(_g8_, _g9_);},
     begin_public_identifier =
       function _g7_(_g4_, _g5_, _g6_){return _g7_.fun(_g4_, _g5_, _g6_);},
     begin_system_identifier =
       function _g3_(_g0_, _g1_, _g2_){return _g3_.fun(_g0_, _g1_, _g2_);},
     after_doctype_public_keyword_s =
       function _gZ_(_gX_, _gY_){return _gZ_.fun(_gX_, _gY_);},
     before_doctype_public_identifi =
       function _gW_(_gU_, _gV_){return _gW_.fun(_gU_, _gV_);},
     doctype_identifier_quoted_stat =
       function _gT_(_gO_, _gP_, _gQ_, _gR_, _gS_){
        return _gT_.fun(_gO_, _gP_, _gQ_, _gR_, _gS_);
       },
     after_doctype_public_identifie =
       function _gN_(_gL_, _gM_){return _gN_.fun(_gL_, _gM_);},
     between_doctype_public_and_sys =
       function _gK_(_gI_, _gJ_){return _gK_.fun(_gI_, _gJ_);},
     after_doctype_system_keyword_s =
       function _gH_(_gF_, _gG_){return _gH_.fun(_gF_, _gG_);},
     before_doctype_system_identifi =
       function _gE_(_gC_, _gD_){return _gE_.fun(_gC_, _gD_);},
     after_doctype_system_identifie =
       function _gB_(_gz_, _gA_){return _gB_.fun(_gz_, _gA_);},
     bogus_doctype_state =
       function _gy_(_gw_, _gx_){return _gy_.fun(_gw_, _gx_);},
     cdata_section_state = function _gv_(_gu_){return _gv_.fun(_gu_);};
    caml_update_dummy(current_state, [0, data_state]);
    caml_update_dummy
     (emit,
      function(t, s){current_state[1] = s; return caml_call1(output[1], t);});
    caml_update_dummy
     (emit_character,
      function(l, c, s){
       return caml_call2(emit, [0, l, [0, 748194550, c]], s);
      });
    caml_update_dummy
     (emit_characters,
      function(cs, s){
       if(! cs) return caml_call1(s, 0);
       var cs$0 = cs[2], match = cs[1], c = match[2], l = match[1];
       return caml_call3
               (emit_character,
                l,
                c,
                function(param){return caml_call2(emit_characters, cs$0, s);});
      });
    caml_update_dummy
     (emit_eof,
      function(param){
       function _gt_(param){return caml_call1(ended[1], 0);}
       return caml_call2
               (emit, [0, caml_call1(get_location, 0), 3448988], _gt_);
      });
    caml_update_dummy
     (emit_tag,
      function(l, tag){
       function rev_deduplicate(accumulator, seen, attributes, k){
        var
         accumulator$0 = accumulator,
         seen$0 = seen,
         attributes$0 = attributes;
        for(;;){
         if(! attributes$0) return caml_call1(k, accumulator$0);
         var
          attributes$1 = attributes$0[2],
          match = attributes$0[1],
          v = match[2],
          n = match[1];
         if(caml_call2(Markup_Common[37], n, seen$0)){
          var
           _gs_ =
             function(param){
              return rev_deduplicate(accumulator$0, seen$0, attributes$1, k);
             };
          return caml_call4
                  (report,
                   l,
                   [0, -590381665, [0, n, cst_tag, cst_duplicate_attribute]],
                   throw$0[1],
                   _gs_);
         }
         var
          seen$1 = [0, n, seen$0],
          accumulator$1 = [0, [0, n, v], accumulator$0],
          accumulator$0 = accumulator$1,
          seen$0 = seen$1,
          attributes$0 = attributes$1;
        }
       }
       function _go_(attributes){
        var
         _gp_ = tag[3],
         _gq_ = caml_call1(Stdlib_List[10], attributes),
         tag$0 = [0, caml_call1(Stdlib_Buffer[2], tag[2]), _gq_, _gp_];
        function k(token){return caml_call2(emit, [0, l, token], data_state);}
        if(tag[1]){
         last_start_tag_name[1] = [0, tag$0[1]];
         return k([0, 389604418, tag$0]);
        }
        function k$0(param){return k([0, 3455931, tag$0]);}
        function k$1(_gr_){
         return tag$0[3]
                 ? caml_call4(report, l, _b_, throw$0[1], k$0)
                 : k$0(0);
        }
        if(! attributes) return k$1(0);
        var n = attributes[1][1];
        return caml_call4
                (report,
                 l,
                 [0,
                  -590381665,
                  [0, n, cst_tag$0, cst_end_tag_with_attributes]],
                 throw$0[1],
                 k$1);
       }
       return rev_deduplicate(0, 0, caml_call1(Stdlib_List[10], tag[4]), _go_);
      });
    caml_update_dummy
     (emit_comment,
      function(l, buffer){
       return caml_call2
               (emit,
                [0, l, [0, -826170817, caml_call1(Stdlib_Buffer[2], buffer)]],
                data_state);
      });
    caml_update_dummy
     (emit_doctype,
      function(opt, l, doctype){
       if(opt) var sth = opt[1], quirks = sth; else var quirks = 0;
       if(quirks) doctype[4] = 1;
       function if_not_missing(param){
        if(! param) return 0;
        var buffer = param[1];
        return [0, caml_call1(Stdlib_Buffer[2], buffer)];
       }
       var
        _gl_ = doctype[4],
        _gm_ = if_not_missing(doctype[3]),
        _gn_ = if_not_missing(doctype[2]),
        doctype$0 = [0, if_not_missing(doctype[1]), _gn_, _gm_, 0, _gl_];
       return caml_call2(emit, [0, l, [0, 990181650, doctype$0]], data_state);
      });
    caml_update_dummy
     (consume_character_reference,
      function(in_attribute, additional, location, k){
       function _fA_(param){
        a:
        if(param){
         var pound = param[1], c = pound[2];
         if(32 <= c){
          var _fB_ = c - 33 | 0;
          if(26 < _fB_ >>> 0){
           if(28 > _fB_) break a;
          }
          else if(5 === _fB_) break a;
         }
         else
          if(11 <= c){if(12 === c) break a;} else if(9 <= c) break a;
         if(runtime.caml_equal([0, c], additional)) return caml_call1(k, 0);
         if(35 === c){
          var
           consume_digits =
             function(filter, k){
              var buffer = caml_call1(Stdlib_Buffer[1], 8);
              function iterate(param){
               function _gj_(v){
                if(v){
                 var c = v[1][2];
                 if(caml_call1(filter, c)){
                  var _gk_ = caml_call1(Stdlib_Char[1], c);
                  caml_call2(Stdlib_Buffer[12], buffer, _gk_);
                  return iterate(0);
                 }
                }
                caml_call2(Markup_Kstream[9], input, v);
                return 0 === caml_call1(Stdlib_Buffer[7], buffer)
                        ? caml_call1(k, 0)
                        : caml_call1(k, [0, caml_call1(Stdlib_Buffer[2], buffer)]);
               }
               return caml_call3(Markup_Kstream[5], input, throw$0[1], _gj_);
              }
              return iterate(0);
             },
           finish_digits =
             function(prefix, text, s){
              function k$0(semicolon){
               try{
                var _f__ = [0, runtime.caml_int_of_string(s)], maybe_n = _f__;
               }
               catch(_gi_){
                var _f6_ = caml_wrap_exception(_gi_);
                if(_f6_[1] !== Stdlib[7])
                 throw caml_maybe_attach_backtrace(_f6_, 0);
                var maybe_n = 0;
               }
               if(! maybe_n){
                var
                 _f7_ =
                   function(param){
                    return caml_call1(k, [0, [0, 3953222, Markup_Common[9]]]);
                   },
                 _f8_ = throw$0[1],
                 _f9_ = caml_call2(Stdlib[28], text, semicolon);
                return caml_call4
                        (report,
                         location,
                         [0,
                          -590381665,
                          [0,
                           caml_call2(Stdlib[28], prefix, _f9_),
                           cst_character_reference$0,
                           cst_out_of_range]],
                         _f8_,
                         _f7_);
               }
               var n = maybe_n[1], switcher = n - 128 | 0;
               a:
               {
                if(31 >= switcher >>> 0)
                 switch(switcher){
                   case 0:
                    var n$0 = 8364; break a;
                   case 2:
                    var n$0 = 8218; break a;
                   case 3:
                    var n$0 = 402; break a;
                   case 4:
                    var n$0 = 8222; break a;
                   case 5:
                    var n$0 = 8230; break a;
                   case 6:
                    var n$0 = 8224; break a;
                   case 7:
                    var n$0 = 8225; break a;
                   case 8:
                    var n$0 = 710; break a;
                   case 9:
                    var n$0 = 8240; break a;
                   case 10:
                    var n$0 = 352; break a;
                   case 11:
                    var n$0 = 8249; break a;
                   case 12:
                    var n$0 = 338; break a;
                   case 14:
                    var n$0 = 381; break a;
                   case 17:
                    var n$0 = 8216; break a;
                   case 18:
                    var n$0 = 8217; break a;
                   case 19:
                    var n$0 = 8220; break a;
                   case 20:
                    var n$0 = 8221; break a;
                   case 21:
                    var n$0 = 8226; break a;
                   case 22:
                    var n$0 = 8211; break a;
                   case 23:
                    var n$0 = 8212; break a;
                   case 24:
                    var n$0 = 732; break a;
                   case 25:
                    var n$0 = 8482; break a;
                   case 26:
                    var n$0 = 353; break a;
                   case 27:
                    var n$0 = 8250; break a;
                   case 28:
                    var n$0 = 339; break a;
                   case 30:
                    var n$0 = 382; break a;
                   case 31:
                    var n$0 = 376; break a;
                 }
                var n$0 = n;
               }
               if(n$0 !== n){
                var
                 _f$_ =
                   function(param){
                    return caml_call1(k, [0, [0, 3953222, n$0]]);
                   },
                 _ga_ = throw$0[1],
                 _gb_ = caml_call2(Stdlib[28], text, semicolon);
                return caml_call4
                        (report,
                         location,
                         [0,
                          -590381665,
                          [0,
                           caml_call2(Stdlib[28], prefix, _gb_),
                           cst_character_reference$1,
                           cst_Windows_1252_character]],
                         _ga_,
                         _f$_);
               }
               if(caml_call1(Markup_Common[17], n$0) && 0 !== n$0){
                if
                 (!
                  caml_call1(Markup_Common[13], n$0)
                  && ! caml_call1(Markup_Common[14], n$0))
                 return caml_call1(k, [0, [0, 3953222, n$0]]);
                var
                 _gf_ =
                   function(param){
                    return caml_call1(k, [0, [0, 3953222, n$0]]);
                   },
                 _gg_ = throw$0[1],
                 _gh_ = caml_call2(Stdlib[28], text, semicolon);
                return caml_call4
                        (report,
                         location,
                         [0,
                          -590381665,
                          [0,
                           caml_call2(Stdlib[28], prefix, _gh_),
                           cst_character_reference$3,
                           cst_invalid_HTML_character]],
                         _gg_,
                         _gf_);
               }
               function _gc_(param){
                return caml_call1(k, [0, [0, 3953222, Markup_Common[9]]]);
               }
               var
                _gd_ = throw$0[1],
                _ge_ = caml_call2(Stdlib[28], text, semicolon);
               return caml_call4
                       (report,
                        location,
                        [0,
                         -590381665,
                         [0,
                          caml_call2(Stdlib[28], prefix, _ge_),
                          cst_character_reference$2,
                          cst_out_of_range$0]],
                        _gd_,
                        _gc_);
              }
              function _f3_(v){
               if(v && 59 === v[1][2]) return k$0(cst);
               caml_call2(Markup_Kstream[9], input, v);
               function _f4_(param){return k$0(cst$0);}
               var _f5_ = throw$0[1];
               return caml_call4
                       (report,
                        location,
                        [0,
                         -590381665,
                         [0,
                          caml_call2(Stdlib[28], prefix, text),
                          cst_character_reference,
                          cst_missing_at_end]],
                        _f5_,
                        _f4_);
              }
              return caml_call3(Markup_Kstream[5], input, throw$0[1], _f3_);
             },
           _fC_ =
             function(param){
              function _fW_(param){
               a:
               if(param){
                var x = param[1], c = x[2];
                if(88 !== c && 120 !== c) break a;
                var
                 _fX_ = caml_call1(Stdlib_Char[1], c),
                 prefix$0 = caml_call2(Stdlib_Printf[4], _c_, _fX_),
                 _fY_ =
                   function(param){
                    function _f1_(param){
                     if(param){
                      var s = param[1];
                      return finish_digits
                              (prefix$0, s, caml_call2(Stdlib[28], cst_0x, s));
                     }
                     caml_call2(Markup_Kstream[10], input, [0, pound, [0, x, 0]]);
                     function _f2_(param){return caml_call1(k, 0);}
                     return caml_call4
                             (report,
                              location,
                              [0,
                               -590381665,
                               [0,
                                prefix$0,
                                cst_character_reference$4,
                                cst_expected_digits]],
                              throw$0[1],
                              _f2_);
                    }
                    return consume_digits(Markup_Common[16], _f1_);
                   };
                return caml_call3(Markup_Kstream[6], input, throw$0[1], _fY_);
               }
               function _fZ_(param){
                if(param){
                 var s = param[1];
                 return finish_digits(prefix, s, s);
                }
                caml_call2(Markup_Kstream[8], input, pound);
                function _f0_(param){return caml_call1(k, 0);}
                return caml_call4
                        (report,
                         location,
                         [0,
                          -590381665,
                          [0,
                           prefix,
                           cst_character_reference$5,
                           cst_expected_digits$0]],
                         throw$0[1],
                         _f0_);
               }
               return consume_digits(Markup_Common[15], _fZ_);
              }
              return caml_call3(Markup_Kstream[12], input, throw$0[1], _fW_);
             };
          return caml_call3(Markup_Kstream[6], input, throw$0[1], _fC_);
         }
         var
          finish =
            function(best, matched, replace){
             var _fH_ = caml_call1(Stdlib_List[10], replace);
             caml_call2(Markup_Kstream[10], input, _fH_);
             if(best){
              var
               match = best[1],
               code_points = match[2],
               text = match[1],
               _fI_ =
                 function(maybe_v){
                  if(maybe_v && 59 === maybe_v[1][2])
                   return caml_call1(k, [0, code_points]);
                  function unterminated(param){
                   caml_call2(Markup_Kstream[9], input, maybe_v);
                   function _fU_(param){
                    return caml_call1(k, [0, code_points]);
                   }
                   var _fV_ = throw$0[1];
                   return caml_call4
                           (report,
                            location,
                            [0,
                             -590381665,
                             [0,
                              caml_call2(Stdlib[28], cst$1, text),
                              cst_entity_reference,
                              cst_missing_at_end$0]],
                            _fV_,
                            _fU_);
                  }
                  if(! in_attribute) return unterminated(0);
                  if(maybe_v){
                   var v = maybe_v[1], c = v[2];
                   if(caml_call1(Markup_Common[21], c)){
                    var _fP_ = caml_call1(Stdlib_List[10], [0, v, matched]);
                    caml_call2(Markup_Kstream[10], input, _fP_);
                    return caml_call1(k, 0);
                   }
                   if(61 === c){
                    var _fQ_ = caml_call1(Stdlib_List[10], [0, v, matched]);
                    caml_call2(Markup_Kstream[10], input, _fQ_);
                    var
                     _fR_ = function(param){return caml_call1(k, 0);},
                     _fS_ = throw$0[1],
                     _fT_ = caml_call2(Stdlib[28], text, cst$2);
                    return caml_call4
                            (report,
                             location,
                             [0,
                              -590381665,
                              [0,
                               caml_call2(Stdlib[28], cst$3, _fT_),
                               cst_attribute,
                               cst_unterminated_entity_refere]],
                             _fS_,
                             _fR_);
                   }
                  }
                  return unterminated(0);
                 };
              return caml_call3(Markup_Kstream[5], input, throw$0[1], _fI_);
             }
             function finish(replace, text){
              var _fL_ = caml_call1(Stdlib_List[10], replace);
              caml_call2(Markup_Kstream[10], input, _fL_);
              if(! text) return caml_call1(k, 0);
              var s = text[1];
              function _fM_(param){return caml_call1(k, 0);}
              var _fN_ = throw$0[1], _fO_ = caml_call2(Stdlib[28], s, cst$4);
              return caml_call4
                      (report,
                       location,
                       [0,
                        -590381665,
                        [0,
                         caml_call2(Stdlib[28], cst$5, _fO_),
                         cst_entity_reference$0,
                         cst_no_such_entity]],
                       _fN_,
                       _fM_);
             }
             var buffer = caml_call1(Stdlib_Buffer[1], 16);
             function iterate(replace){
              function _fJ_(param){
               if(! param) return finish(replace, 0);
               var v = param[1], c = v[2];
               if(! caml_call1(Markup_Common[21], c))
                return 59 === c
                        ? finish
                          ([0, v, replace], [0, caml_call1(Stdlib_Buffer[2], buffer)])
                        : finish([0, v, replace], 0);
               var _fK_ = caml_call1(Stdlib_Char[1], c);
               caml_call2(Stdlib_Buffer[12], buffer, _fK_);
               return iterate([0, v, replace]);
              }
              return caml_call3(Markup_Kstream[5], input, throw$0[1], _fJ_);
             }
             return iterate(0);
            },
          match_named =
            function(best, matched, replace, trie, text){
             function _fG_(param){
              if(! param) return finish(best, matched, replace);
              var
               v = param[1],
               c = v[2],
               trie$0 = caml_call2(Markup_Trie[8], c, trie);
              caml_call2(Markup_Common[10], text, c);
              var match = caml_call1(Markup_Trie[7], trie$0);
              if(typeof match === "number")
               return 0 === match
                       ? finish(best, matched, [0, v, replace])
                       : match_named(best, matched, [0, v, replace], trie$0, text);
              if(0 === match[0]){
               var m = match[1], w = caml_call1(Stdlib_Buffer[2], text);
               return finish
                       ([0, [0, w, m]],
                        [0, v, caml_call2(Stdlib[37], replace, matched)],
                        0);
              }
              var m$0 = match[1], w$0 = caml_call1(Stdlib_Buffer[2], text);
              return match_named
                      ([0, [0, w$0, m$0]],
                       [0, v, caml_call2(Stdlib[37], replace, matched)],
                       0,
                       trie$0,
                       text);
             }
             return caml_call3(Markup_Kstream[5], input, throw$0[1], _fG_);
            },
          _fD_ = caml_call1(Stdlib_Buffer[1], 16),
          _fE_ = runtime.caml_obj_tag(named_entity_trie);
         b:
         if(250 === _fE_)
          var _fF_ = named_entity_trie[1];
         else{
          if(246 !== _fE_ && 244 !== _fE_){
           var _fF_ = named_entity_trie;
           break b;
          }
          var _fF_ = caml_call1(CamlinternalLazy[2], named_entity_trie);
         }
         return match_named(0, 0, 0, _fF_, _fD_);
        }
        return caml_call1(k, 0);
       }
       return caml_call3(Markup_Kstream[12], input, throw$0[1], _fA_);
      });
    caml_update_dummy
     (data_state,
      function(param){
       function _fw_(param){
        if(! param) return caml_call1(emit_eof, 0);
        var _fx_ = param[1], l = _fx_[1], _fy_ = _fx_[2];
        if(0 === _fy_){
         var
          _fz_ =
            function(param){return caml_call2(emit, [0, l, _d_], data_state);};
         return caml_call4(report, l, _e_, throw$0[1], _fz_);
        }
        if(38 === _fy_)
         return caml_call2(character_reference_state, data_state, l);
        if(60 === _fy_) return caml_call1(tag_open_state, l);
        var c = _fx_[2];
        return caml_call2(emit, [0, l, [0, 748194550, c]], data_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _fw_);
      });
    caml_update_dummy
     (character_reference_state,
      function(state, l){
       return caml_call4
               (consume_character_reference,
                0,
                0,
                l,
                function(param){
                 if(! param) return caml_call2(emit, [0, l, _f_], state);
                 var match = param[1];
                 if(4203884 <= match[1]){
                  var match$0 = match[2], c = match$0[2], c$0 = match$0[1];
                  return caml_call2
                          (emit,
                           [0, l, [0, 748194550, c$0]],
                           function(param){
                            return caml_call2(emit, [0, l, [0, 748194550, c]], state);
                           });
                 }
                 var c$1 = match[2];
                 return caml_call2(emit, [0, l, [0, 748194550, c$1]], state);
                });
      });
    caml_update_dummy
     (rcdata_state,
      function(param){
       function _ft_(param){
        if(! param) return caml_call1(emit_eof, 0);
        var v = param[1], l = v[1], _fu_ = v[2];
        if(0 === _fu_){
         var
          _fv_ =
            function(param){
             return caml_call2
                     (emit,
                      [0, l, [0, 748194550, Markup_Common[9]]],
                      rcdata_state);
            };
         return caml_call4(report, l, _g_, throw$0[1], _fv_);
        }
        if(38 === _fu_)
         return caml_call2(character_reference_state, rcdata_state, l);
        if(60 === _fu_)
         return caml_call3
                 (text_less_than_sign_state, rcdata_state, l, [0, v, 0]);
        var c = v[2];
        return caml_call2(emit, [0, l, [0, 748194550, c]], rcdata_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ft_);
      });
    caml_update_dummy
     (rawtext_state,
      function(param){
       function _fq_(param){
        if(! param) return caml_call1(emit_eof, 0);
        var v = param[1], l = v[1], _fr_ = v[2];
        if(0 === _fr_){
         var
          _fs_ =
            function(param){
             return caml_call2
                     (emit,
                      [0, l, [0, 748194550, Markup_Common[9]]],
                      rawtext_state);
            };
         return caml_call4(report, l, _h_, throw$0[1], _fs_);
        }
        if(60 === _fr_)
         return caml_call3
                 (text_less_than_sign_state, rawtext_state, l, [0, v, 0]);
        var c = v[2];
        return caml_call2(emit, [0, l, [0, 748194550, c]], rawtext_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _fq_);
      });
    caml_update_dummy
     (script_data_state,
      function(param){
       function _fn_(param){
        if(! param) return caml_call1(emit_eof, 0);
        var v = param[1], l = v[1], _fo_ = v[2];
        if(0 === _fo_){
         var
          _fp_ =
            function(param){
             return caml_call3
                     (emit_character, l, Markup_Common[9], script_data_state);
            };
         return caml_call4(report, l, _i_, throw$0[1], _fp_);
        }
        if(60 === _fo_)
         return caml_call2(script_data_less_than_sign_sta, l, [0, v, 0]);
        var c = v[2];
        return caml_call3(emit_character, l, c, script_data_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _fn_);
      });
    caml_update_dummy
     (plaintext_state,
      function(param){
       function _fk_(param){
        if(! param) return caml_call1(emit_eof, 0);
        var _fl_ = param[1], l = _fl_[1];
        if(0 === _fl_[2]){
         var
          _fm_ =
            function(param){
             return caml_call2
                     (emit,
                      [0, l, [0, 748194550, Markup_Common[9]]],
                      plaintext_state);
            };
         return caml_call4(report, l, _j_, throw$0[1], _fm_);
        }
        var c = _fl_[2];
        return caml_call2(emit, [0, l, [0, 748194550, c]], plaintext_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _fk_);
      });
    caml_update_dummy
     (tag_open_state,
      function(l){
       var tag = [0, 1, caml_call1(Stdlib_Buffer[1], 16), 0, 0];
       function _fd_(param){
        if(! param){
         var
          _fi_ =
            function(param){
             return caml_call3(emit_character, l, 60, data_state);
            },
          _fj_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _l_, _fj_, _fi_);
        }
        var v = param[1], l$0 = v[1], c = v[2];
        if(33 === c) return caml_call1(markup_declaration_open_state, l);
        if(47 === c) return caml_call2(end_tag_open_state, l, tag);
        if(caml_call1(Markup_Common[20], c)){
         var _fe_ = caml_call1(Markup_Common[24], c);
         caml_call2(Markup_Common[10], tag[2], _fe_);
         return caml_call2(tag_name_state, l, tag);
        }
        if(63 === c){
         var
          _ff_ = function(param){return caml_call1(bogus_comment_state, l);};
         return caml_call4(report, l, _k_, throw$0[1], _ff_);
        }
        var c$0 = v[2];
        function _fg_(param){
         caml_call2(Markup_Kstream[8], input, v);
         return caml_call3(emit_character, l, 60, data_state);
        }
        var _fh_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$1,
                   cst_invalid_start_character]],
                 _fh_,
                 _fg_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _fd_);
      });
    caml_update_dummy
     (end_tag_open_state,
      function(l, tag){
       tag[1] = 0;
       function _e9_(param){
        if(! param){
         var
          _fb_ =
            function(param){
             var column = l[2], line = l[1];
             return caml_call2
                     (emit,
                      [0, l, _o_],
                      function(param){
                       return caml_call2
                               (emit, [0, [0, line, column + 1 | 0], _n_], data_state);
                      });
            },
          _fc_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _p_, _fc_, _fb_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        if(caml_call1(Markup_Common[20], c)){
         var _e__ = caml_call1(Markup_Common[24], c);
         caml_call2(Markup_Common[10], tag[2], _e__);
         return caml_call2(tag_name_state, l, tag);
        }
        if(62 === c)
         return caml_call4(report, l, _m_, throw$0[1], data_state);
        var c$0 = match[2];
        function _e$_(param){return caml_call1(bogus_comment_state, l);}
        var _fa_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_tag$2,
                   cst_invalid_start_character$0]],
                 _fa_,
                 _e$_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _e9_);
      });
    caml_update_dummy
     (tag_name_state,
      function(l, tag){
       function _e4_(param){
        if(! param){
         var _e8_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _r_, _e8_, data_state);
        }
        var match = param[1], l$0 = match[1], _e5_ = match[2];
        a:
        {
         if(33 > _e5_){
          if(12 < _e5_ >>> 0){
           if(32 > _e5_) break a;
          }
          else if(12 > _e5_)
           switch(_e5_){
             case 0:
              var
               _e7_ =
                 function(param){
                  caml_call2(Markup_Common[10], tag[2], Markup_Common[9]);
                  return caml_call2(tag_name_state, l, tag);
                 };
              return caml_call4(report, l$0, _q_, throw$0[1], _e7_);
             case 9:
             case 10: break;
             default: break a;
           }
          return caml_call2(before_attribute_name_state, l, tag);
         }
         if(47 === _e5_)
          return caml_call2(self_closing_start_tag_state, l, tag);
         if(62 === _e5_) return caml_call2(emit_tag, l, tag);
        }
        var c = match[2], _e6_ = caml_call1(Markup_Common[24], c);
        caml_call2(Markup_Common[10], tag[2], _e6_);
        return caml_call2(tag_name_state, l, tag);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _e4_);
      });
    caml_update_dummy
     (text_less_than_sign_state,
      function(state, l, cs){
       function _e3_(maybe_v){
        if(maybe_v){
         var v = maybe_v[1];
         if(47 === v[2])
          return caml_call3(text_end_tag_open_state, state, l, [0, v, cs]);
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call2(emit_characters, cs, state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _e3_);
      });
    caml_update_dummy
     (text_end_tag_open_state,
      function(state, l, cs){
       function _e1_(maybe_v){
        if(maybe_v){
         var v = maybe_v[1], c = v[2];
         if(caml_call1(Markup_Common[20], c)){
          var
           name_buffer = caml_call1(Stdlib_Buffer[1], 32),
           _e2_ = caml_call1(Markup_Common[24], c);
          caml_call2(Markup_Common[10], name_buffer, _e2_);
          return caml_call4
                  (text_end_tag_name_state, state, l, [0, v, cs], name_buffer);
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call2
                (emit_characters, caml_call1(Stdlib_List[10], cs), state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _e1_);
      });
    caml_update_dummy
     (text_end_tag_name_state,
      function(state, l, cs, name_buffer){
       function create_tag(param){return [0, 0, name_buffer, 0, 0];}
       function _eY_(maybe_v){
        if(maybe_v){
         var v = maybe_v[1], _eZ_ = v[2];
         a:
         {
          if(32 <= _eZ_){
           if(47 === _eZ_){
            if(is_appropriate_end_tag(name_buffer))
             return caml_call2(self_closing_start_tag_state, l, create_tag(0));
            break a;
           }
           if(62 === _eZ_){
            if(is_appropriate_end_tag(name_buffer))
             return caml_call2(emit_tag, l, create_tag(0));
            break a;
           }
           if(33 <= _eZ_) break a;
          }
          else
           if(11 <= _eZ_){if(12 !== _eZ_) break a;} else if(9 > _eZ_) break a;
          if(is_appropriate_end_tag(name_buffer))
           return caml_call2(before_attribute_name_state, l, create_tag(0));
         }
         var c = v[2];
         if(caml_call1(Markup_Common[20], c)){
          var _e0_ = caml_call1(Markup_Common[24], c);
          caml_call2(Markup_Common[10], name_buffer, _e0_);
          return caml_call4
                  (text_end_tag_name_state, state, l, [0, v, cs], name_buffer);
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call2
                (emit_characters, caml_call1(Stdlib_List[10], cs), state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eY_);
      });
    caml_update_dummy
     (script_data_less_than_sign_sta,
      function(l, cs){
       function _eV_(maybe_v){
        if(maybe_v){
         var v = maybe_v[1], _eW_ = v[2];
         if(33 === _eW_){
          var
           _eX_ =
             function(param){
              return caml_call1(script_data_escape_start_state, l);
             };
          return caml_call2
                  (emit_characters,
                   caml_call1(Stdlib_List[10], [0, v, cs]),
                   _eX_);
         }
         if(47 === _eW_)
          return caml_call3
                  (text_end_tag_open_state, script_data_state, l, [0, v, cs]);
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call2(emit_characters, cs, script_data_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eV_);
      });
    caml_update_dummy
     (script_data_escape_start_state,
      function(l){
       function _eT_(maybe_v){
        if(maybe_v){
         var _eU_ = maybe_v[1];
         if(45 === _eU_[2]){
          var l$0 = _eU_[1];
          return caml_call3
                  (emit_character,
                   l$0,
                   45,
                   function(param){
                    return caml_call1(script_data_escape_start_dash_, l);
                   });
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call1(script_data_state, 0);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eT_);
      });
    caml_update_dummy
     (script_data_escape_start_dash_,
      function(l){
       function _eR_(maybe_v){
        if(maybe_v){
         var _eS_ = maybe_v[1];
         if(45 === _eS_[2]){
          var l$0 = _eS_[1];
          return caml_call3
                  (emit_character,
                   l$0,
                   45,
                   function(param){
                    return caml_call1(script_data_escaped_dash_dash_, l);
                   });
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call1(script_data_state, 0);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eR_);
      });
    caml_update_dummy
     (script_data_escaped_state,
      function(l){
       function _eM_(param){
        if(! param){
         var _eP_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _t_, _eP_, data_state);
        }
        var v = param[1], l$0 = v[1], _eN_ = v[2];
        if(0 === _eN_){
         var
          _eO_ =
            function(param){
             function _eQ_(param){
              return caml_call1(script_data_escaped_state, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _eQ_);
            };
         return caml_call4(report, l$0, _s_, throw$0[1], _eO_);
        }
        if(45 === _eN_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_escaped_dash_state, l);
                  });
        if(60 === _eN_)
         return caml_call3(script_data_escaped_less_than_, l, l$0, [0, v, 0]);
        var c = v[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_escaped_state, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eM_);
      });
    caml_update_dummy
     (script_data_escaped_dash_state,
      function(l){
       function _eH_(param){
        if(! param){
         var _eK_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _v_, _eK_, data_state);
        }
        var v = param[1], l$0 = v[1], _eI_ = v[2];
        if(0 === _eI_){
         var
          _eJ_ =
            function(param){
             function _eL_(param){
              return caml_call1(script_data_escaped_state, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _eL_);
            };
         return caml_call4(report, l$0, _u_, throw$0[1], _eJ_);
        }
        if(45 === _eI_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_escaped_dash_dash_, l);
                  });
        if(60 === _eI_)
         return caml_call3(script_data_escaped_less_than_, l, l$0, [0, v, 0]);
        var c = v[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_escaped_state, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eH_);
      });
    caml_update_dummy
     (script_data_escaped_dash_dash_,
      function(l){
       function _eC_(param){
        if(! param){
         var _eF_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _x_, _eF_, data_state);
        }
        var v = param[1], l$0 = v[1], _eD_ = v[2];
        if(0 === _eD_){
         var
          _eE_ =
            function(param){
             function _eG_(param){
              return caml_call1(script_data_escaped_state, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _eG_);
            };
         return caml_call4(report, l$0, _w_, throw$0[1], _eE_);
        }
        if(60 <= _eD_){
         if(63 > _eD_)
          switch(_eD_ - 60 | 0){
            case 0:
             return caml_call3
                     (script_data_escaped_less_than_, l, l$0, [0, v, 0]);
            case 1: break;
            default:
             return caml_call3(emit_character, l$0, 62, script_data_state);
          }
        }
        else if(45 === _eD_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_escaped_dash_dash_, l);
                  });
        var c = v[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_escaped_state, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _eC_);
      });
    caml_update_dummy
     (script_data_escaped_less_than_,
      function(l$0, l, cs){
       function _ey_(maybe_v){
        if(maybe_v){
         var v = maybe_v[1];
         if(47 === v[2]){
          var _ez_ = [0, v, cs];
          return caml_call3
                  (text_end_tag_open_state,
                   function(param){
                    return caml_call1(script_data_escaped_state, l$0);
                   },
                   l,
                   _ez_);
         }
         var c = v[2];
         if(caml_call1(Markup_Common[20], c)){
          var
           tag_buffer = caml_call1(Stdlib_Buffer[1], 32),
           _eA_ = caml_call1(Markup_Common[24], c);
          caml_call2(Markup_Common[10], tag_buffer, _eA_);
          var
           _eB_ =
             function(param){
              return caml_call2
                      (script_data_double_escape_star, l$0, tag_buffer);
             };
          return caml_call2
                  (emit_characters,
                   caml_call1(Stdlib_List[10], [0, v, cs]),
                   _eB_);
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call2
                (emit_characters,
                 cs,
                 function(param){
                  return caml_call1(script_data_escaped_state, l$0);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ey_);
      });
    caml_update_dummy
     (script_data_double_escape_star,
      function(l, tag_buffer){
       function _ev_(maybe_v){
        if(maybe_v){
         var match = maybe_v[1], l$0 = match[1], c = match[2];
         a:
         {
          if(32 <= c){
           var _ew_ = c - 33 | 0;
           if(28 < _ew_ >>> 0){
            if(30 <= _ew_) break a;
           }
           else if(14 !== _ew_) break a;
          }
          else
           if(11 <= c){if(12 !== c) break a;} else if(9 > c) break a;
          return caml_call3
                  (emit_character,
                   l$0,
                   c,
                   function(param){
                    return caml_string_equal
                             (caml_call1(Stdlib_Buffer[2], tag_buffer), cst_script)
                            ? caml_call1(script_data_double_escaped_sta, l)
                            : caml_call1(script_data_escaped_state, l);
                   });
         }
         var c$0 = match[2];
         if(caml_call1(Markup_Common[20], c$0)){
          var _ex_ = caml_call1(Markup_Common[24], c$0);
          caml_call2(Markup_Common[10], tag_buffer, _ex_);
          return caml_call3
                  (emit_character,
                   l$0,
                   c$0,
                   function(param){
                    return caml_call2
                            (script_data_double_escape_star, l, tag_buffer);
                   });
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call1(script_data_escaped_state, l);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ev_);
      });
    caml_update_dummy
     (script_data_double_escaped_sta,
      function(l){
       function _ep_(param){
        if(! param){
         var _et_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _z_, _et_, data_state);
        }
        var _eq_ = param[1], l$0 = _eq_[1], _er_ = _eq_[2];
        if(0 === _er_){
         var
          _es_ =
            function(param){
             function _eu_(param){
              return caml_call1(script_data_double_escaped_sta, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _eu_);
            };
         return caml_call4(report, l$0, _y_, throw$0[1], _es_);
        }
        if(45 === _er_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_double_escaped_das, l);
                  });
        if(60 === _er_)
         return caml_call3
                 (emit_character,
                  l$0,
                  60,
                  function(param){
                   return caml_call1(script_data_double_escaped_les, l);
                  });
        var c = _eq_[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_double_escaped_sta, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ep_);
      });
    caml_update_dummy
     (script_data_double_escaped_das,
      function(l){
       function _ej_(param){
        if(! param){
         var _en_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _B_, _en_, data_state);
        }
        var _ek_ = param[1], l$0 = _ek_[1], _el_ = _ek_[2];
        if(0 === _el_){
         var
          _em_ =
            function(param){
             function _eo_(param){
              return caml_call1(script_data_double_escaped_sta, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _eo_);
            };
         return caml_call4(report, l$0, _A_, throw$0[1], _em_);
        }
        if(45 === _el_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_double_escaped_das$0, l);
                  });
        if(60 === _el_)
         return caml_call3
                 (emit_character,
                  l$0,
                  60,
                  function(param){
                   return caml_call1(script_data_double_escaped_les, l);
                  });
        var c = _ek_[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_double_escaped_sta, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ej_);
      });
    caml_update_dummy
     (script_data_double_escaped_das$0,
      function(l){
       function _ee_(param){
        if(! param){
         var _eh_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _D_, _eh_, data_state);
        }
        var match = param[1], l$0 = match[1], _ef_ = match[2];
        if(0 === _ef_){
         var
          _eg_ =
            function(param){
             function _ei_(param){
              return caml_call1(script_data_double_escaped_sta, l);
             }
             return caml_call3(emit_character, l$0, Markup_Common[9], _ei_);
            };
         return caml_call4(report, l$0, _C_, throw$0[1], _eg_);
        }
        if(60 <= _ef_){
         if(63 > _ef_)
          switch(_ef_ - 60 | 0){
            case 0:
             return caml_call3
                     (emit_character,
                      l$0,
                      60,
                      function(param){
                       return caml_call1(script_data_double_escaped_les, l);
                      });
            case 1: break;
            default:
             return caml_call3(emit_character, l$0, 62, script_data_state);
          }
        }
        else if(45 === _ef_)
         return caml_call3
                 (emit_character,
                  l$0,
                  45,
                  function(param){
                   return caml_call1(script_data_double_escaped_das$0, l);
                  });
        var c = match[2];
        return caml_call3
                (emit_character,
                 l$0,
                 c,
                 function(param){
                  return caml_call1(script_data_double_escaped_sta, l);
                 });
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ee_);
      });
    caml_update_dummy
     (script_data_double_escaped_les,
      function(l){
       function _ec_(maybe_v){
        if(maybe_v){
         var _ed_ = maybe_v[1];
         if(47 === _ed_[2]){
          var l$0 = _ed_[1], tag_buffer = caml_call1(Stdlib_Buffer[1], 32);
          return caml_call3
                  (emit_character,
                   l$0,
                   47,
                   function(param){
                    return caml_call2
                            (script_data_double_escape_end_, l, tag_buffer);
                   });
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call1(script_data_double_escaped_sta, l);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ec_);
      });
    caml_update_dummy
     (script_data_double_escape_end_,
      function(l, tag_buffer){
       function _d$_(maybe_v){
        if(maybe_v){
         var match = maybe_v[1], l$0 = match[1], c = match[2];
         a:
         {
          if(32 <= c){
           var _ea_ = c - 33 | 0;
           if(28 < _ea_ >>> 0){
            if(30 <= _ea_) break a;
           }
           else if(14 !== _ea_) break a;
          }
          else
           if(11 <= c){if(12 !== c) break a;} else if(9 > c) break a;
          return caml_call3
                  (emit_character,
                   l$0,
                   c,
                   function(param){
                    return caml_string_equal
                             (caml_call1(Stdlib_Buffer[2], tag_buffer), cst_script)
                            ? caml_call1(script_data_escaped_state, l)
                            : caml_call1(script_data_double_escaped_sta, l);
                   });
         }
         var c$0 = match[2];
         if(caml_call1(Markup_Common[20], c$0)){
          var _eb_ = caml_call1(Markup_Common[24], c$0);
          caml_call2(Markup_Common[10], tag_buffer, _eb_);
          return caml_call3
                  (emit_character,
                   l$0,
                   c$0,
                   function(param){
                    return caml_call2
                            (script_data_double_escape_end_, l, tag_buffer);
                   });
         }
        }
        caml_call2(Markup_Kstream[9], input, maybe_v);
        return caml_call1(script_data_double_escaped_sta, l);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _d$_);
      });
    caml_update_dummy
     (before_attribute_name_state,
      function(l, tag){
       function start_attribute(c){
        var name_buffer = caml_call1(Stdlib_Buffer[1], 32);
        caml_call2(Markup_Common[10], name_buffer, c);
        return caml_call3(attribute_name_state, l, tag, name_buffer);
       }
       function _d6_(param){
        if(! param){
         var _d__ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _F_, _d__, data_state);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         b:
         {
          if(32 <= c){
           var switcher = c - 60 | 0;
           if(2 < switcher >>> 0){
            if(-12 <= switcher) break a;
            switch(switcher + 28 | 0){
              case 0:
               break b;
              case 15:
               return caml_call2(self_closing_start_tag_state, l, tag);
              case 2:
              case 7: break;
              default: break a;
            }
           }
           else if(2 <= switcher) return caml_call2(emit_tag, l, tag);
           var
            _d7_ = function(param){return start_attribute(c);},
            _d8_ = throw$0[1];
           return caml_call4
                   (report,
                    l$0,
                    [0,
                     -590381665,
                     [0,
                      caml_call1(Markup_Common[26], c),
                      cst_attribute_name,
                      cst_invalid_start_character$1]],
                    _d8_,
                    _d7_);
          }
          if(12 <= c){
           if(13 <= c) break a;
          }
          else{
           if(0 > c) break a;
           switch(c){
             case 0:
              var
               _d9_ =
                 function(param){return start_attribute(Markup_Common[9]);};
              return caml_call4(report, l$0, _E_, throw$0[1], _d9_);
             case 9:
             case 10: break;
             default: break a;
           }
          }
         }
         return caml_call2(before_attribute_name_state, l, tag);
        }
        var c$0 = match[2];
        return start_attribute(caml_call1(Markup_Common[24], c$0));
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _d6_);
      });
    caml_update_dummy
     (attribute_name_state,
      function(l, tag, name_buffer){
       function _dY_(param){
        if(! param){
         var _d5_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _H_, _d5_, data_state);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(12 < c >>> 0){
          var switcher = c - 32 | 0;
          if(30 < switcher >>> 0) break a;
          switch(switcher){
            case 0: break;
            case 15:
             var _d2_ = tag[4];
             tag[4] =
              [0, [0, caml_call1(Stdlib_Buffer[2], name_buffer), cst$6], _d2_];
             return caml_call2(self_closing_start_tag_state, l, tag);
            case 29:
             return caml_call3
                     (before_attribute_value_state,
                      l,
                      tag,
                      caml_call1(Stdlib_Buffer[2], name_buffer));
            case 30:
             var _d3_ = tag[4];
             tag[4] =
              [0, [0, caml_call1(Stdlib_Buffer[2], name_buffer), cst$7], _d3_];
             return caml_call2(emit_tag, l, tag);
            case 2:
            case 7:
            case 28:
             var
              _d0_ =
                function(param){
                 caml_call2(Markup_Common[10], name_buffer, c);
                 return caml_call3(attribute_name_state, l, tag, name_buffer);
                },
              _d1_ = throw$0[1];
             return caml_call4
                     (report,
                      l$0,
                      [0,
                       -590381665,
                       [0,
                        caml_call1(Markup_Common[26], c),
                        cst_attribute_name$0,
                        cst_invalid_name_character]],
                      _d1_,
                      _d0_);
            default: break a;
          }
         }
         else if(12 > c)
          switch(c){
            case 0:
             var
              _d4_ =
                function(param){
                 caml_call2(Markup_Common[10], name_buffer, Markup_Common[9]);
                 return caml_call3(attribute_name_state, l, tag, name_buffer);
                };
             return caml_call4(report, l$0, _G_, throw$0[1], _d4_);
            case 9:
            case 10: break;
            default: break a;
          }
         return caml_call3
                 (after_attribute_name_state,
                  l,
                  tag,
                  caml_call1(Stdlib_Buffer[2], name_buffer));
        }
        var c$0 = match[2], _dZ_ = caml_call1(Markup_Common[24], c$0);
        caml_call2(Markup_Common[10], name_buffer, _dZ_);
        return caml_call3(attribute_name_state, l, tag, name_buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dY_);
      });
    caml_update_dummy
     (after_attribute_name_state,
      function(l, tag, name){
       function start_next_attribute(c){
        tag[4] = [0, [0, name, cst$8], tag[4]];
        var name_buffer = caml_call1(Stdlib_Buffer[1], 32);
        caml_call2(Markup_Common[10], name_buffer, c);
        return caml_call3(attribute_name_state, l, tag, name_buffer);
       }
       function _dT_(param){
        if(! param){
         var _dX_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _J_, _dX_, data_state);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(12 < c >>> 0){
          var switcher = c - 32 | 0;
          if(30 < switcher >>> 0) break a;
          switch(switcher){
            case 0: break;
            case 15:
             tag[4] = [0, [0, name, cst$9], tag[4]];
             return caml_call2(self_closing_start_tag_state, l, tag);
            case 29:
             return caml_call3(before_attribute_value_state, l, tag, name);
            case 30:
             tag[4] = [0, [0, name, cst$10], tag[4]];
             return caml_call2(emit_tag, l, tag);
            case 2:
            case 7:
            case 28:
             var
              _dU_ = function(param){return start_next_attribute(c);},
              _dV_ = throw$0[1];
             return caml_call4
                     (report,
                      l$0,
                      [0,
                       -590381665,
                       [0,
                        caml_call1(Markup_Common[26], c),
                        cst_attribute_name$1,
                        cst_invalid_start_character$2]],
                      _dV_,
                      _dU_);
            default: break a;
          }
         }
         else if(12 > c)
          switch(c){
            case 0:
             var
              _dW_ =
                function(param){
                 return start_next_attribute(Markup_Common[9]);
                };
             return caml_call4(report, l$0, _I_, throw$0[1], _dW_);
            case 9:
            case 10: break;
            default: break a;
          }
         return caml_call3(after_attribute_name_state, l, tag, name);
        }
        var c$0 = match[2];
        return start_next_attribute(caml_call1(Markup_Common[24], c$0));
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dT_);
      });
    caml_update_dummy
     (before_attribute_value_state,
      function(l, tag, name){
       function start_value(state, maybe_c){
        var value_buffer = caml_call1(Stdlib_Buffer[1], 32);
        if(maybe_c){
         var c = maybe_c[1];
         caml_call2(Markup_Common[10], value_buffer, c);
        }
        return caml_call4(state, l, tag, name, value_buffer);
       }
       function _dN_(param){
        if(! param){
         var _dS_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _M_, _dS_, data_state);
        }
        var v = param[1], l$0 = v[1], c = v[2];
        a:
        {
         if(40 <= c){
          var switcher = c - 60 | 0;
          if(2 < switcher >>> 0){
           if(36 !== switcher) break a;
          }
          else if(2 <= switcher){
           var
            _dQ_ =
              function(param){
               tag[4] = [0, [0, name, cst$11], tag[4]];
               return caml_call2(emit_tag, l, tag);
              };
           return caml_call4(report, l$0, _K_, throw$0[1], _dQ_);
          }
          var
           _dO_ =
             function(param){
              return start_value(attribute_value_unquoted_state, [0, c]);
             },
           _dP_ = throw$0[1];
          return caml_call4
                  (report,
                   l$0,
                   [0,
                    -590381665,
                    [0,
                     caml_call1(Markup_Common[26], c),
                     cst_attribute_value,
                     cst_invalid_start_character$3]],
                   _dP_,
                   _dO_);
         }
         if(12 < c >>> 0){
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 6:
             caml_call2(Markup_Kstream[8], input, v);
             return start_value(attribute_value_unquoted_state, 0);
            case 2:
            case 7:
             return start_value
                     (caml_call1(attribute_value_quoted_state, c), 0);
            default: break a;
          }
         }
         else if(12 > c)
          switch(c){
            case 0:
             var
              _dR_ =
                function(param){
                 return start_value
                         (attribute_value_unquoted_state, [0, Markup_Common[9]]);
                };
             return caml_call4(report, l$0, _L_, throw$0[1], _dR_);
            case 9:
            case 10: break;
            default: break a;
          }
         return caml_call3(before_attribute_value_state, l, tag, name);
        }
        var c$0 = v[2];
        return start_value(attribute_value_unquoted_state, [0, c$0]);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dN_);
      });
    caml_update_dummy
     (attribute_value_quoted_state,
      function(quote, l, tag, name, value_buffer){
       function _dJ_(param){
        if(! param){
         var _dM_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _O_, _dM_, data_state);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        if(c === quote){
         var _dK_ = tag[4];
         tag[4] =
          [0, [0, name, caml_call1(Stdlib_Buffer[2], value_buffer)], _dK_];
         return caml_call2(after_attribute_value_quoted_s, l, tag);
        }
        if(0 === c){
         var
          _dL_ =
            function(param){
             caml_call2(Markup_Common[10], value_buffer, Markup_Common[9]);
             return caml_call5
                     (attribute_value_quoted_state,
                      quote,
                      l,
                      tag,
                      name,
                      value_buffer);
            };
         return caml_call4(report, l$0, _N_, throw$0[1], _dL_);
        }
        if(38 === c)
         return caml_call4
                 (character_reference_in_attribu,
                  quote,
                  l$0,
                  value_buffer,
                  function(param){
                   return caml_call5
                           (attribute_value_quoted_state,
                            quote,
                            l,
                            tag,
                            name,
                            value_buffer);
                  });
        var c$0 = match[2];
        caml_call2(Markup_Common[10], value_buffer, c$0);
        return caml_call5
                (attribute_value_quoted_state,
                 quote,
                 l,
                 tag,
                 name,
                 value_buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dJ_);
      });
    caml_update_dummy
     (attribute_value_unquoted_state,
      function(l, tag, name, value_buffer){
       function _dC_(param){
        if(! param){
         var _dI_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _Q_, _dI_, data_state);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         b:
         {
          if(40 > c){
           if(12 < c >>> 0){
            if(32 > c) break a;
            switch(c - 32 | 0){
              case 0: break;
              case 6:
               return caml_call4
                       (character_reference_in_attribu,
                        62,
                        l$0,
                        value_buffer,
                        function(param){
                         return caml_call4
                                 (attribute_value_unquoted_state, l, tag, name, value_buffer);
                        });
              case 2:
              case 7:
               break b;
              default: break a;
            }
           }
           else if(12 > c)
            switch(c){
              case 0:
               var
                _dH_ =
                  function(param){
                   caml_call2
                    (Markup_Common[10], value_buffer, Markup_Common[9]);
                   return caml_call4
                           (attribute_value_unquoted_state, l, tag, name, value_buffer);
                  };
               return caml_call4(report, l$0, _P_, throw$0[1], _dH_);
              case 9:
              case 10: break;
              default: break a;
            }
           var _dG_ = tag[4];
           tag[4] =
            [0, [0, name, caml_call1(Stdlib_Buffer[2], value_buffer)], _dG_];
           return caml_call2(before_attribute_name_state, l, tag);
          }
          var switcher = c - 60 | 0;
          if(2 < switcher >>> 0){
           if(36 !== switcher) break a;
          }
          else if(2 <= switcher){
           var _dF_ = tag[4];
           tag[4] =
            [0, [0, name, caml_call1(Stdlib_Buffer[2], value_buffer)], _dF_];
           return caml_call2(emit_tag, l, tag);
          }
         }
         var
          _dD_ =
            function(param){
             caml_call2(Markup_Common[10], value_buffer, c);
             return caml_call4
                     (attribute_value_unquoted_state, l, tag, name, value_buffer);
            },
          _dE_ = throw$0[1];
         return caml_call4
                 (report,
                  l$0,
                  [0,
                   -590381665,
                   [0,
                    caml_call1(Markup_Common[26], c),
                    cst_attribute_value$0,
                    cst_invalid_character]],
                  _dE_,
                  _dD_);
        }
        var c$0 = match[2];
        caml_call2(Markup_Common[10], value_buffer, c$0);
        return caml_call4
                (attribute_value_unquoted_state, l, tag, name, value_buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dC_);
      });
    caml_update_dummy
     (character_reference_in_attribu,
      function(allowed, l, value_buffer, k){
       return caml_call4
               (consume_character_reference,
                1,
                [0, allowed],
                l,
                function(param){
                 if(! param){
                  caml_call2(Markup_Common[10], value_buffer, 38);
                  return caml_call1(k, 0);
                 }
                 var match = param[1];
                 if(4203884 <= match[1]){
                  var match$0 = match[2], c = match$0[2], c$0 = match$0[1];
                  caml_call2(Markup_Common[10], value_buffer, c$0);
                  caml_call2(Markup_Common[10], value_buffer, c);
                  return caml_call1(k, 0);
                 }
                 var c$1 = match[2];
                 caml_call2(Markup_Common[10], value_buffer, c$1);
                 return caml_call1(k, 0);
                });
      });
    caml_update_dummy
     (after_attribute_value_quoted_s,
      function(l, tag){
       function _dx_(param){
        if(! param){
         var _dB_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _R_, _dB_, data_state);
        }
        var v = param[1], l$0 = v[1], _dy_ = v[2];
        a:
        {
         if(32 <= _dy_){
          if(47 === _dy_)
           return caml_call2(self_closing_start_tag_state, l, tag);
          if(62 === _dy_) return caml_call2(emit_tag, l, tag);
          if(33 <= _dy_) break a;
         }
         else
          if(11 <= _dy_){if(12 !== _dy_) break a;} else if(9 > _dy_) break a;
         return caml_call2(before_attribute_name_state, l, tag);
        }
        var c = v[2];
        caml_call2(Markup_Kstream[8], input, v);
        function _dz_(param){
         return caml_call2(before_attribute_name_state, l, tag);
        }
        var _dA_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c),
                   cst_tag$3,
                   cst_expected_whitespace_before]],
                 _dA_,
                 _dz_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dx_);
      });
    caml_update_dummy
     (self_closing_start_tag_state,
      function(l, tag){
       function _dt_(param){
        if(! param){
         var _dw_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _S_, _dw_, data_state);
        }
        var v = param[1], l$0 = v[1];
        if(62 === v[2]){tag[3] = 1; return caml_call2(emit_tag, l, tag);}
        var c = v[2];
        caml_call2(Markup_Kstream[8], input, v);
        function _du_(param){
         return caml_call2(before_attribute_name_state, l, tag);
        }
        var _dv_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c),
                   cst_tag$4,
                   cst_expected]],
                 _dv_,
                 _du_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _dt_);
      });
    caml_update_dummy
     (bogus_comment_state,
      function(l){
       var buffer = caml_call1(Stdlib_Buffer[1], 256);
       function consume(param){
        function _dq_(param){
         if(! param) return caml_call2(emit_comment, l, buffer);
         var _dr_ = param[1], _ds_ = _dr_[2];
         if(0 === _ds_){
          caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
          return consume(0);
         }
         if(62 === _ds_) return caml_call2(emit_comment, l, buffer);
         var c = _dr_[2];
         caml_call2(Markup_Common[10], buffer, c);
         return consume(0);
        }
        return caml_call3(Markup_Kstream[5], input, throw$0[1], _dq_);
       }
       return consume(0);
      });
    caml_update_dummy
     (markup_declaration_open_state,
      function(l){
       function _c7_(param){
        if(param && 45 === param[1][2]){
         var _c8_ = param[2];
         if(_c8_ && 45 === _c8_[1][2] && ! _c8_[2]){
          var
           _c__ =
             function(param){
              return caml_call2
                      (comment_start_state, l, caml_call1(Stdlib_Buffer[1], 64));
             };
          return caml_call4(Markup_Kstream[7], 2, input, throw$0[1], _c__);
         }
        }
        function _c9_(l$0){
         var match = caml_call1(sequence_to_lowercase, l$0);
         if(match && 100 === match[1][2]){
          var _c$_ = match[2];
          if(_c$_ && 111 === _c$_[1][2]){
           var _da_ = _c$_[2];
           if(_da_ && 99 === _da_[1][2]){
            var _db_ = _da_[2];
            if(_db_ && 116 === _db_[1][2]){
             var _dc_ = _db_[2];
             if(_dc_ && 121 === _dc_[1][2]){
              var _dd_ = _dc_[2];
              if(_dd_ && 112 === _dd_[1][2]){
               var _de_ = _dd_[2];
               if(_de_ && 101 === _de_[1][2] && ! _de_[2]){
                var
                 _dg_ = function(param){return caml_call1(doctype_state, l);};
                return caml_call4
                        (Markup_Kstream[7], 7, input, throw$0[1], _dg_);
               }
              }
             }
            }
           }
          }
         }
         function _df_(param){
          if(param && 91 === param[1][2]){
           var _dh_ = param[2];
           if(_dh_ && 67 === _dh_[1][2]){
            var _di_ = _dh_[2];
            if(_di_ && 68 === _di_[1][2]){
             var _dj_ = _di_[2];
             if(_dj_ && 65 === _dj_[1][2]){
              var _dk_ = _dj_[2];
              if(_dk_ && 84 === _dk_[1][2]){
               var _dl_ = _dk_[2];
               if(_dl_ && 65 === _dl_[1][2]){
                var _dm_ = _dl_[2];
                if(_dm_ && 91 === _dm_[1][2] && ! _dm_[2]){
                 if(caml_call1(foreign[1], 0)){
                  var
                   _do_ =
                     function(param){return caml_call1(cdata_section_state, 0);};
                  return caml_call4
                          (Markup_Kstream[7], 7, input, throw$0[1], _do_);
                 }
                 var
                  _dp_ =
                    function(param){return caml_call1(bogus_comment_state, l);};
                 return caml_call4(report, l, _U_, throw$0[1], _dp_);
                }
               }
              }
             }
            }
           }
          }
          function _dn_(param){return caml_call1(bogus_comment_state, l);}
          return caml_call4(report, l, _T_, throw$0[1], _dn_);
         }
         return caml_call4(Markup_Kstream[14], 7, input, throw$0[1], _df_);
        }
        return caml_call4(Markup_Kstream[14], 7, input, throw$0[1], _c9_);
       }
       return caml_call4(Markup_Kstream[14], 2, input, throw$0[1], _c7_);
      });
    caml_update_dummy
     (comment_start_state,
      function(l, buffer){
       function _c0_(param){
        if(! param){
         var
          _c5_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _c6_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _X_, _c6_, _c5_);
        }
        var _c1_ = param[1], l$0 = _c1_[1], _c2_ = _c1_[2];
        if(0 === _c2_){
         var
          _c3_ =
            function(param){
             caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
             return caml_call2(comment_state, l, buffer);
            };
         return caml_call4(report, l$0, _V_, throw$0[1], _c3_);
        }
        if(45 === _c2_)
         return caml_call2(comment_start_dash_state, l, buffer);
        if(62 === _c2_){
         var
          _c4_ = function(param){return caml_call2(emit_comment, l, buffer);};
         return caml_call4(report, l, _W_, throw$0[1], _c4_);
        }
        var c = _c1_[2];
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _c0_);
      });
    caml_update_dummy
     (comment_start_dash_state,
      function(l, buffer){
       function _cT_(param){
        if(! param){
         var
          _cY_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _cZ_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), ___, _cZ_, _cY_);
        }
        var _cU_ = param[1], l$0 = _cU_[1], _cV_ = _cU_[2];
        if(0 === _cV_){
         var
          _cW_ =
            function(param){
             caml_call2(Stdlib_Buffer[12], buffer, 45);
             caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
             return caml_call2(comment_state, l, buffer);
            };
         return caml_call4(report, l$0, _Y_, throw$0[1], _cW_);
        }
        if(45 === _cV_) return caml_call2(comment_end_state, l, buffer);
        if(62 === _cV_){
         var
          _cX_ = function(param){return caml_call2(emit_comment, l, buffer);};
         return caml_call4(report, l, _Z_, throw$0[1], _cX_);
        }
        var c = _cU_[2];
        caml_call2(Stdlib_Buffer[12], buffer, 45);
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cT_);
      });
    caml_update_dummy
     (comment_state,
      function(l, buffer){
       function _cN_(param){
        if(! param){
         var
          _cR_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _cS_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aa_, _cS_, _cR_);
        }
        var _cO_ = param[1], l$0 = _cO_[1], _cP_ = _cO_[2];
        if(0 === _cP_){
         var
          _cQ_ =
            function(param){
             caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
             return caml_call2(comment_state, l, buffer);
            };
         return caml_call4(report, l$0, _$_, throw$0[1], _cQ_);
        }
        if(45 === _cP_) return caml_call2(comment_end_dash_state, l, buffer);
        var c = _cO_[2];
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cN_);
      });
    caml_update_dummy
     (comment_end_dash_state,
      function(l, buffer){
       function _cH_(param){
        if(! param){
         var
          _cL_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _cM_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ac_, _cM_, _cL_);
        }
        var _cI_ = param[1], l$0 = _cI_[1], _cJ_ = _cI_[2];
        if(0 === _cJ_){
         var
          _cK_ =
            function(param){
             caml_call2(Stdlib_Buffer[12], buffer, 45);
             caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
             return caml_call2(comment_state, l, buffer);
            };
         return caml_call4(report, l$0, _ab_, throw$0[1], _cK_);
        }
        if(45 === _cJ_) return caml_call2(comment_end_state, l, buffer);
        var c = _cI_[2];
        caml_call2(Stdlib_Buffer[12], buffer, 45);
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cH_);
      });
    caml_update_dummy
     (comment_end_state,
      function(l, buffer){
       function _cx_(param){
        if(! param){
         var
          _cF_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _cG_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ag_, _cG_, _cF_);
        }
        var match = param[1], l$0 = match[1], _cy_ = match[2];
        if(34 <= _cy_){
         if(45 === _cy_){
          var
           _cz_ =
             function(param){
              caml_call2(Stdlib_Buffer[12], buffer, 45);
              return caml_call2(comment_end_state, l, buffer);
             };
          return caml_call4(report, l$0, _ad_, throw$0[1], _cz_);
         }
         if(62 === _cy_) return caml_call2(emit_comment, l, buffer);
        }
        else{
         if(0 === _cy_){
          var
           _cD_ =
             function(param){
              caml_call2(Stdlib_Buffer[16], buffer, cst$14);
              caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
              return caml_call2(comment_state, l, buffer);
             };
          return caml_call4(report, l$0, _ae_, throw$0[1], _cD_);
         }
         if(33 <= _cy_){
          var
           _cE_ =
             function(param){
              return caml_call2(comment_end_bang_state, l, buffer);
             };
          return caml_call4(report, l$0, _af_, throw$0[1], _cE_);
         }
        }
        var c = match[2];
        function _cA_(param){
         caml_call2(Stdlib_Buffer[16], buffer, cst$12);
         caml_call2(Markup_Common[10], buffer, c);
         return caml_call2(comment_state, l, buffer);
        }
        var _cB_ = throw$0[1], _cC_ = caml_call1(Markup_Common[26], c);
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call2(Stdlib[28], cst$13, _cC_),
                   cst_comment,
                   cst_should_be_in]],
                 _cB_,
                 _cA_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cx_);
      });
    caml_update_dummy
     (comment_end_bang_state,
      function(l, buffer){
       function _cr_(param){
        if(! param){
         var
          _cv_ = function(param){return caml_call2(emit_comment, l, buffer);},
          _cw_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ai_, _cw_, _cv_);
        }
        var _cs_ = param[1], l$0 = _cs_[1], _ct_ = _cs_[2];
        if(0 === _ct_){
         var
          _cu_ =
            function(param){
             caml_call2(Stdlib_Buffer[16], buffer, cst$15);
             caml_call2(Markup_Common[10], buffer, Markup_Common[9]);
             return caml_call2(comment_state, l, buffer);
            };
         return caml_call4(report, l$0, _ah_, throw$0[1], _cu_);
        }
        if(45 === _ct_){
         caml_call2(Stdlib_Buffer[16], buffer, cst$16);
         return caml_call2(comment_end_dash_state, l, buffer);
        }
        if(62 === _ct_) return caml_call2(emit_comment, l, buffer);
        var c = _cs_[2];
        caml_call2(Stdlib_Buffer[16], buffer, cst$17);
        caml_call2(Markup_Common[10], buffer, c);
        return caml_call2(comment_state, l, buffer);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cr_);
      });
    caml_update_dummy
     (doctype_state,
      function(l){
       var doctype = [0, 0, 0, 0, 0];
       function _cl_(param){
        if(! param){
         var
          _cp_ =
            function(param){
             return caml_call3(emit_doctype, _aj_, l, doctype);
            },
          _cq_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ak_, _cq_, _cp_);
        }
        var v = param[1], l$0 = v[1], _cm_ = v[2] - 9 | 0;
        a:
        {
         if(3 < _cm_ >>> 0){
          if(23 !== _cm_) break a;
         }
         else if(2 === _cm_) break a;
         return caml_call2(before_doctype_name_state, l, doctype);
        }
        var c = v[2];
        function _cn_(param){
         caml_call2(Markup_Kstream[8], input, v);
         return caml_call2(before_doctype_name_state, l, doctype);
        }
        var _co_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c),
                   cst_doctype,
                   cst_expected_whitespace]],
                 _co_,
                 _cn_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _cl_);
      });
    caml_update_dummy
     (before_doctype_name_state,
      function(l, doctype){
       function _ce_(param){
        if(! param){
         var
          _cj_ =
            function(param){
             return caml_call3(emit_doctype, _ao_, l, doctype);
            },
          _ck_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ap_, _ck_, _cj_);
        }
        var match = param[1], l$0 = match[1], _cf_ = match[2];
        a:
        {
         if(32 <= _cf_){
          if(62 === _cf_){
           var
            _cg_ =
              function(param){
               return caml_call3(emit_doctype, _al_, l, doctype);
              };
           return caml_call4(report, l$0, _am_, throw$0[1], _cg_);
          }
          if(33 <= _cf_) break a;
         }
         else
          if(12 <= _cf_){
           if(13 <= _cf_) break a;
          }
          else{
           if(0 > _cf_) break a;
           switch(_cf_){
             case 0:
              var
               _ci_ =
                 function(param){
                  doctype[1] = add_doctype_char(doctype[1], Markup_Common[9]);
                  return caml_call2(doctype_name_state, l, doctype);
                 };
              return caml_call4(report, l$0, _an_, throw$0[1], _ci_);
             case 9:
             case 10: break;
             default: break a;
           }
          }
         return caml_call2(before_doctype_name_state, l, doctype);
        }
        var c = match[2], _ch_ = caml_call1(Markup_Common[24], c);
        doctype[1] = add_doctype_char(doctype[1], _ch_);
        return caml_call2(doctype_name_state, l, doctype);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _ce_);
      });
    caml_update_dummy
     (doctype_name_state,
      function(l, doctype){
       function _b__(param){
        if(! param){
         var
          _cc_ =
            function(param){
             return caml_call3(emit_doctype, _ar_, l, doctype);
            },
          _cd_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _as_, _cd_, _cc_);
        }
        var match = param[1], l$0 = match[1], _b$_ = match[2];
        a:
        {
         if(32 <= _b$_){
          if(62 === _b$_) return caml_call3(emit_doctype, 0, l, doctype);
          if(33 <= _b$_) break a;
         }
         else
          if(12 <= _b$_){
           if(13 <= _b$_) break a;
          }
          else{
           if(0 > _b$_) break a;
           switch(_b$_){
             case 0:
              var
               _cb_ =
                 function(param){
                  doctype[1] = add_doctype_char(doctype[1], Markup_Common[9]);
                  return caml_call2(doctype_name_state, l, doctype);
                 };
              return caml_call4(report, l$0, _aq_, throw$0[1], _cb_);
             case 9:
             case 10: break;
             default: break a;
           }
          }
         return caml_call2(after_doctype_name_state, l, doctype);
        }
        var c = match[2], _ca_ = caml_call1(Markup_Common[24], c);
        doctype[1] = add_doctype_char(doctype[1], _ca_);
        return caml_call2(doctype_name_state, l, doctype);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _b__);
      });
    caml_update_dummy
     (after_doctype_name_state,
      function(l, doctype){
       function _bS_(param){
        if(! param){
         var
          _bV_ =
            function(param){
             return caml_call3(emit_doctype, _at_, l, doctype);
            },
          _bW_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _au_, _bW_, _bV_);
        }
        var v = param[1], l$0 = v[1], _bT_ = v[2];
        a:
        {
         if(13 <= _bT_){
          if(32 !== _bT_){
           if(62 === _bT_) return caml_call3(emit_doctype, 0, l, doctype);
           break a;
          }
         }
         else if(11 === _bT_ || 9 > _bT_) break a;
         return caml_call2(after_doctype_name_state, l, doctype);
        }
        var c = v[2];
        caml_call2(Markup_Kstream[8], input, v);
        function _bU_(l$1){
         var vs = caml_call1(sequence_to_lowercase, l$1);
         if(vs){
          var _bX_ = vs[1][2];
          if(112 === _bX_){
           var _bY_ = vs[2];
           if(_bY_ && 117 === _bY_[1][2]){
            var _bZ_ = _bY_[2];
            if(_bZ_ && 98 === _bZ_[1][2]){
             var _b0_ = _bZ_[2];
             if(_b0_ && 108 === _b0_[1][2]){
              var _b1_ = _b0_[2];
              if(_b1_ && 105 === _b1_[1][2]){
               var _b2_ = _b1_[2];
               if(_b2_ && 99 === _b2_[1][2] && ! _b2_[2])
                return caml_call2(after_doctype_public_keyword_s, l, doctype);
              }
             }
            }
           }
          }
          else if(115 === _bX_){
           var _b5_ = vs[2];
           if(_b5_ && 121 === _b5_[1][2]){
            var _b6_ = _b5_[2];
            if(_b6_ && 115 === _b6_[1][2]){
             var _b7_ = _b6_[2];
             if(_b7_ && 116 === _b7_[1][2]){
              var _b8_ = _b7_[2];
              if(_b8_ && 101 === _b8_[1][2]){
               var _b9_ = _b8_[2];
               if(_b9_ && 109 === _b9_[1][2] && ! _b9_[2])
                return caml_call2(after_doctype_system_keyword_s, l, doctype);
              }
             }
            }
           }
          }
         }
         caml_call2(Markup_Kstream[10], input, vs);
         function _b3_(param){
          doctype[4] = 1;
          return caml_call2(bogus_doctype_state, l, doctype);
         }
         var _b4_ = throw$0[1];
         return caml_call4
                 (report,
                  l$0,
                  [0,
                   -590381665,
                   [0,
                    caml_call1(Markup_Common[26], c),
                    cst_doctype$0,
                    cst_expected_PUBLIC_or_SYSTEM]],
                  _b4_,
                  _b3_);
        }
        return caml_call4(Markup_Kstream[7], 6, input, throw$0[1], _bU_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bS_);
      });
    caml_update_dummy
     (begin_public_identifier,
      function(quote, l, doctype){
       doctype[2] = [0, caml_call1(Stdlib_Buffer[1], 32)];
       return caml_call5
               (doctype_identifier_quoted_stat,
                function(doctype, c){
                 doctype[2] = add_doctype_char(doctype[2], c);
                 return 0;
                },
                quote,
                after_doctype_public_identifie,
                l,
                doctype);
      });
    caml_update_dummy
     (begin_system_identifier,
      function(quote, l, doctype){
       doctype[3] = [0, caml_call1(Stdlib_Buffer[1], 32)];
       return caml_call5
               (doctype_identifier_quoted_stat,
                function(doctype, c){
                 doctype[3] = add_doctype_char(doctype[3], c);
                 return 0;
                },
                quote,
                after_doctype_system_identifie,
                l,
                doctype);
      });
    caml_update_dummy
     (after_doctype_public_keyword_s,
      function(l, doctype){
       function _bK_(param){
        if(! param){
         var
          _bQ_ =
            function(param){
             return caml_call3(emit_doctype, _ax_, l, doctype);
            },
          _bR_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _ay_, _bR_, _bQ_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 !== c) break a;
           var
            _bL_ =
              function(param){
               return caml_call3(emit_doctype, _av_, l, doctype);
              };
           return caml_call4(report, l$0, _aw_, throw$0[1], _bL_);
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             var
              _bO_ =
                function(param){
                 return caml_call3(begin_public_identifier, c, l, doctype);
                },
              _bP_ = throw$0[1];
             return caml_call4
                     (report,
                      l$0,
                      [0,
                       -590381665,
                       [0,
                        caml_call1(Markup_Common[26], c),
                        cst_doctype$2,
                        cst_expected_whitespace$1]],
                      _bP_,
                      _bO_);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(before_doctype_public_identifi, l, doctype);
        }
        var c$0 = match[2];
        function _bM_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bN_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$1,
                   cst_expected_whitespace$0]],
                 _bN_,
                 _bM_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bK_);
      });
    caml_update_dummy
     (before_doctype_public_identifi,
      function(l, doctype){
       function _bE_(param){
        if(! param){
         var
          _bI_ =
            function(param){
             return caml_call3(emit_doctype, _aB_, l, doctype);
            },
          _bJ_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aC_, _bJ_, _bI_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 !== c) break a;
           var
            _bF_ =
              function(param){
               return caml_call3(emit_doctype, _az_, l, doctype);
              };
           return caml_call4(report, l$0, _aA_, throw$0[1], _bF_);
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             return caml_call3(begin_public_identifier, c, l, doctype);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(before_doctype_public_identifi, l, doctype);
        }
        var c$0 = match[2];
        function _bG_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bH_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$3,
                   cst_public_identifier_must_be_]],
                 _bH_,
                 _bG_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bE_);
      });
    caml_update_dummy
     (doctype_identifier_quoted_stat,
      function(add, quote, next_state, l, doctype){
       function _bz_(param){
        if(! param){
         var
          _bC_ =
            function(param){
             return caml_call3(emit_doctype, _aG_, l, doctype);
            },
          _bD_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aH_, _bD_, _bC_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        if(c === quote) return caml_call2(next_state, l, doctype);
        if(0 === c){
         var
          _bA_ =
            function(param){
             caml_call2(add, doctype, Markup_Common[9]);
             return caml_call5
                     (doctype_identifier_quoted_stat,
                      add,
                      quote,
                      next_state,
                      l,
                      doctype);
            };
         return caml_call4(report, l$0, _aD_, throw$0[1], _bA_);
        }
        if(62 === c){
         var
          _bB_ =
            function(param){
             return caml_call3(emit_doctype, _aE_, l, doctype);
            };
         return caml_call4(report, l$0, _aF_, throw$0[1], _bB_);
        }
        var c$0 = match[2];
        caml_call2(add, doctype, c$0);
        return caml_call5
                (doctype_identifier_quoted_stat,
                 add,
                 quote,
                 next_state,
                 l,
                 doctype);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bz_);
      });
    caml_update_dummy
     (after_doctype_public_identifie,
      function(l, doctype){
       function _bs_(param){
        if(! param){
         var
          _bx_ =
            function(param){
             return caml_call3(emit_doctype, _aI_, l, doctype);
            },
          _by_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aJ_, _by_, _bx_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 === c) return caml_call3(emit_doctype, 0, l, doctype);
           break a;
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             var
              _bv_ =
                function(param){
                 return caml_call3(begin_system_identifier, c, l, doctype);
                },
              _bw_ = throw$0[1];
             return caml_call4
                     (report,
                      l$0,
                      [0,
                       -590381665,
                       [0,
                        caml_call1(Markup_Common[26], c),
                        cst_doctype$5,
                        cst_expected_whitespace$2]],
                      _bw_,
                      _bv_);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(between_doctype_public_and_sys, l, doctype);
        }
        var c$0 = match[2];
        function _bt_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bu_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$4,
                   cst_system_identifier_must_be_]],
                 _bu_,
                 _bt_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bs_);
      });
    caml_update_dummy
     (between_doctype_public_and_sys,
      function(l, doctype){
       function _bn_(param){
        if(! param){
         var
          _bq_ =
            function(param){
             return caml_call3(emit_doctype, _aK_, l, doctype);
            },
          _br_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aL_, _br_, _bq_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 === c) return caml_call3(emit_doctype, 0, l, doctype);
           break a;
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             return caml_call3(begin_system_identifier, c, l, doctype);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(between_doctype_public_and_sys, l, doctype);
        }
        var c$0 = match[2];
        function _bo_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bp_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$6,
                   cst_system_identifier_must_be_$0]],
                 _bp_,
                 _bo_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bn_);
      });
    caml_update_dummy
     (after_doctype_system_keyword_s,
      function(l, doctype){
       function _bf_(param){
        if(! param){
         var
          _bl_ =
            function(param){
             return caml_call3(emit_doctype, _aO_, l, doctype);
            },
          _bm_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aP_, _bm_, _bl_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 !== c) break a;
           var
            _bg_ =
              function(param){
               return caml_call3(emit_doctype, _aM_, l, doctype);
              };
           return caml_call4(report, l$0, _aN_, throw$0[1], _bg_);
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             var
              _bj_ =
                function(param){
                 return caml_call3(begin_system_identifier, c, l, doctype);
                },
              _bk_ = throw$0[1];
             return caml_call4
                     (report,
                      l$0,
                      [0,
                       -590381665,
                       [0,
                        caml_call1(Markup_Common[26], c),
                        cst_doctype$8,
                        cst_expected_whitespace$4]],
                      _bk_,
                      _bj_);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(before_doctype_system_identifi, l, doctype);
        }
        var c$0 = match[2];
        function _bh_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bi_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$7,
                   cst_expected_whitespace$3]],
                 _bi_,
                 _bh_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _bf_);
      });
    caml_update_dummy
     (before_doctype_system_identifi,
      function(l, doctype){
       function _a$_(param){
        if(! param){
         var
          _bd_ =
            function(param){
             return caml_call3(emit_doctype, _aS_, l, doctype);
            },
          _be_ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aT_, _be_, _bd_);
        }
        var match = param[1], l$0 = match[1], c = match[2];
        a:
        {
         if(13 <= c){
          if(40 <= c){
           if(62 !== c) break a;
           var
            _ba_ =
              function(param){
               return caml_call3(emit_doctype, _aQ_, l, doctype);
              };
           return caml_call4(report, l$0, _aR_, throw$0[1], _ba_);
          }
          if(32 > c) break a;
          switch(c - 32 | 0){
            case 0: break;
            case 2:
            case 7:
             return caml_call3(begin_system_identifier, c, l, doctype);
            default: break a;
          }
         }
         else if(11 === c || 9 > c) break a;
         return caml_call2(before_doctype_system_identifi, l, doctype);
        }
        var c$0 = match[2];
        function _bb_(param){
         doctype[4] = 1;
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _bc_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c$0),
                   cst_doctype$9,
                   cst_system_identifier_must_be_$1]],
                 _bc_,
                 _bb_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _a$_);
      });
    caml_update_dummy
     (after_doctype_system_identifie,
      function(l, doctype){
       function _a5_(param){
        if(! param){
         var
          _a9_ =
            function(param){
             return caml_call3(emit_doctype, _aU_, l, doctype);
            },
          _a__ = throw$0[1];
         return caml_call4
                 (report, caml_call1(get_location, 0), _aV_, _a__, _a9_);
        }
        var match = param[1], l$0 = match[1], _a6_ = match[2];
        a:
        {
         if(13 <= _a6_){
          if(32 !== _a6_){
           if(62 === _a6_) return caml_call3(emit_doctype, 0, l, doctype);
           break a;
          }
         }
         else if(11 === _a6_ || 9 > _a6_) break a;
         return caml_call2(after_doctype_system_identifie, l, doctype);
        }
        var c = match[2];
        function _a7_(param){
         return caml_call2(bogus_doctype_state, l, doctype);
        }
        var _a8_ = throw$0[1];
        return caml_call4
                (report,
                 l$0,
                 [0,
                  -590381665,
                  [0,
                   caml_call1(Markup_Common[26], c),
                   cst_doctype$10,
                   cst_junk_after_system_identifi]],
                 _a8_,
                 _a7_);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _a5_);
      });
    caml_update_dummy
     (bogus_doctype_state,
      function(l, doctype){
       function _a4_(param){
        return param
                ? 62
                  === param[1][2]
                  ? caml_call3(emit_doctype, 0, l, doctype)
                  : caml_call2(bogus_doctype_state, l, doctype)
                : caml_call3(emit_doctype, 0, l, doctype);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _a4_);
      });
    caml_update_dummy
     (cdata_section_state,
      function(param){
       function _aZ_(param){
        if(! param) return caml_call1(data_state, 0);
        var _a0_ = param[1], l = _a0_[1];
        if(93 === _a0_[2]){
         var
          _a1_ =
            function(param){
             if(param && 93 === param[1][2]){
              var _a2_ = param[2];
              if(_a2_ && 62 === _a2_[1][2] && ! _a2_[2]){
               var _a3_ = function(param){return caml_call1(data_state, 0);};
               return caml_call4
                       (Markup_Kstream[7], 2, input, throw$0[1], _a3_);
              }
             }
             return caml_call2(emit, [0, l, _aW_], cdata_section_state);
            };
         return caml_call4(Markup_Kstream[14], 2, input, throw$0[1], _a1_);
        }
        var c = _a0_[2];
        return caml_call2
                (emit, [0, l, [0, 748194550, c]], cdata_section_state);
       }
       return caml_call3(Markup_Kstream[5], input, throw$0[1], _aZ_);
      });
    function _aX_(throw$1, e, k){
     throw$0[1] = throw$1;
     ended[1] = e;
     output[1] = k;
     return caml_call1(current_state[1], 0);
    }
    var stream = caml_call1(Markup_Kstream[1], _aX_);
    function set_state(param){
     return 172003931 === param
             ? (current_state[1] = rcdata_state, 0)
             : 514427509
               <= param
               ? 758940234
                 <= param
                 ? (current_state[1] = data_state, 0)
                 : (current_state[1] = rawtext_state, 0)
               : 307819518
                 <= param
                 ? (current_state[1] = script_data_state, 0)
                 : (current_state[1] = plaintext_state, 0);
    }
    function set_foreign(_aY_){foreign[1] = _aY_; return 0;}
    return [0, stream, set_state, set_foreign];
   }
   var Markup_Html_tokenizer = [0, tokenize];
   runtime.caml_register_global
    (204, Markup_Html_tokenizer, "Markup__Html_tokenizer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Html_parser
//# unitInfo: Requires: Markup__Common, Markup__Error, Markup__Kstream, Markup__Namespace, Markup__Text, Stdlib, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_U_0000 = "U+0000",
    cst_a$1 = "a",
    cst_address = "address",
    cst_altglyph = "altglyph",
    cst_altglyphdef = "altglyphdef",
    cst_altglyphitem = "altglyphitem",
    cst_animatecolor = "animatecolor",
    cst_animatemotion = "animatemotion",
    cst_animatetransform = "animatetransform",
    cst_annotation_xml = "annotation-xml",
    cst_applet = "applet",
    cst_area = "area",
    cst_article = "article",
    cst_aside = "aside",
    cst_b = "b",
    cst_base = "base",
    cst_basefont = "basefont",
    cst_bgsound = "bgsound",
    cst_big = "big",
    cst_blockquote = "blockquote",
    cst_body$3 = "body",
    cst_br = "br",
    cst_button$2 = "button",
    cst_caption$7 = "caption",
    cst_center = "center",
    cst_clippath = "clippath",
    cst_code = "code",
    cst_col = "col",
    cst_colgroup$2 = "colgroup",
    cst_dd = "dd",
    cst_desc = "desc",
    cst_details = "details",
    cst_dialog = "dialog",
    cst_dir = "dir",
    cst_div = "div",
    cst_dl = "dl",
    cst_doctype_should_be_first = "doctype should be first",
    cst_dt = "dt",
    cst_em = "em",
    cst_embed = "embed",
    cst_feblend = "feblend",
    cst_fecolormatrix = "fecolormatrix",
    cst_fecomponenttransfer = "fecomponenttransfer",
    cst_fecomposite = "fecomposite",
    cst_fediffuselighting = "fediffuselighting",
    cst_fedisplacementmap = "fedisplacementmap",
    cst_fedistantlight = "fedistantlight",
    cst_feflood = "feflood",
    cst_fefunca = "fefunca",
    cst_fefuncb = "fefuncb",
    cst_fefuncg = "fefuncg",
    cst_fefuncr = "fefuncr",
    cst_fegaussianblur = "fegaussianblur",
    cst_feimage = "feimage",
    cst_femerge = "femerge",
    cst_femergenode = "femergenode",
    cst_femorphology = "femorphology",
    cst_feoffset = "feoffset",
    cst_fepointlight = "fepointlight",
    cst_fespecularlighting = "fespecularlighting",
    cst_fespotlight = "fespotlight",
    cst_fetile = "fetile",
    cst_feturbulence = "feturbulence",
    cst_fieldset = "fieldset",
    cst_figcaption = "figcaption",
    cst_figure = "figure",
    cst_font = "font",
    cst_footer = "footer",
    cst_foreignObject$0 = "foreignObject",
    cst_foreignobject = "foreignobject",
    cst_form$2 = "form",
    cst_frame = "frame",
    cst_frameset$0 = "frameset",
    cst_glyphRef$1 = "glyphRef",
    cst_glyphref = "glyphref",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_head$2 = "head",
    cst_header = "header",
    cst_hgroup = "hgroup",
    cst_hr = "hr",
    cst_html$9 = "html",
    cst_i = "i",
    cst_iframe = "iframe",
    cst_image = "image",
    cst_img$0 = "img",
    cst_input = "input",
    cst_keygen = "keygen",
    cst_li$1 = "li",
    cst_lineargradient = "lineargradient",
    cst_link = "link",
    cst_listing = "listing",
    cst_main = "main",
    cst_malignmark = "malignmark",
    cst_marquee = "marquee",
    cst_math = "math",
    cst_meta = "meta",
    cst_mglyph = "mglyph",
    cst_mi = "mi",
    cst_mn = "mn",
    cst_mo = "mo",
    cst_ms = "ms",
    cst_mtext = "mtext",
    cst_nav = "nav",
    cst_nobr$2 = "nobr",
    cst_noembed = "noembed",
    cst_noframes = "noframes",
    cst_noscript$1 = "noscript",
    cst_null = "null",
    cst_object = "object",
    cst_ol = "ol",
    cst_optgroup = "optgroup",
    cst_option = "option",
    cst_p$4 = "p",
    cst_param = "param",
    cst_plaintext = "plaintext",
    cst_pre = "pre",
    cst_radialgradient = "radialgradient",
    cst_rb = "rb",
    cst_rp = "rp",
    cst_rt = "rt",
    cst_rtc = "rtc",
    cst_ruby$1 = "ruby",
    cst_s = "s",
    cst_script = "script",
    cst_section = "section",
    cst_select$10 = "select",
    cst_small = "small",
    cst_source = "source",
    cst_strike = "strike",
    cst_strong = "strong",
    cst_style = "style",
    cst_summary = "summary",
    cst_svg = "svg",
    cst_table$11 = "table",
    cst_tag = "tag",
    cst_tbody$0 = "tbody",
    cst_td$0 = "td",
    cst_template$7 = "template",
    cst_textarea = "textarea",
    cst_textpath = "textpath",
    cst_tfoot = "tfoot",
    cst_th = "th",
    cst_thead = "thead",
    cst_title = "title",
    cst_tr$4 = "tr",
    cst_track = "track",
    cst_tt = "tt",
    cst_u = "u",
    cst_ul = "ul",
    cst_wbr = "wbr",
    cst_xmp = "xmp",
    caml_equal = runtime.caml_equal,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name = cst_a$1,
    names =
      [0,
       cst_h1,
       [0, cst_h2, [0, cst_h3, [0, cst_h4, [0, cst_h5, [0, cst_h6, 0]]]]]],
    cst$0 = cst$1,
    cst = cst$1,
    scope_delimiters =
      caml_list_of_js_array
       ([[0, 802643307, cst_applet],
         [0, 802643307, cst_caption$7],
         [0, 802643307, cst_html$9],
         [0, 802643307, cst_table$11],
         [0, 802643307, cst_td$0],
         [0, 802643307, cst_th],
         [0, 802643307, cst_marquee],
         [0, 802643307, cst_object],
         [0, 802643307, cst_template$7],
         [0, -262866105, cst_mi],
         [0, -262866105, cst_mo],
         [0, -262866105, cst_mn],
         [0, -262866105, cst_ms],
         [0, -262866105, cst_mtext],
         [0, -262866105, cst_annotation_xml],
         [0, 4146756, cst_foreignObject$0],
         [0, 4146756, cst_desc],
         [0, 4146756, cst_title]]),
    Stdlib_String = global_data.Stdlib__String,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Common = global_data.Markup__Common,
    Stdlib_List = global_data.Stdlib__List,
    Markup_Namespace = global_data.Markup__Namespace,
    Markup_Text = global_data.Markup__Text,
    Assert_failure = global_data.Assert_failure,
    Markup_Error = global_data.Markup__Error,
    Stdlib = global_data.Stdlib,
    _bu_ = [0, -949968843, cst_doctype_should_be_first],
    _bv_ = [0, -590381665, [0, cst_U_0000, "foreign content", cst_null]],
    cst_xml_tag = "xml tag",
    _bt_ = [0, 1],
    _bs_ = [0, -821297825, cst_html$9],
    cst_html$8 = cst_html$9,
    _br_ = [0, -821297825, cst_html$9],
    cst_html$7 = cst_html$9,
    _bq_ = [0, -949968843, cst_doctype_should_be_first],
    cst_html$6 = cst_html$9,
    cst_html$5 = cst_html$9,
    _bp_ = [0, -821297825, cst_html$9],
    _bl_ = [0, cst_html$9, 0],
    _bm_ = [0, -622351166, cst_frameset$0],
    _bk_ = [0, cst_frameset$0, 0],
    _bh_ = [0, cst_html$9, 0],
    _bi_ = [0, -95440847, cst_frameset$0],
    _bn_ = [0, -949968843, cst_doctype_should_be_first],
    cst_frameset = cst_frameset$0,
    _bo_ = [0, 1],
    _bj_ = [0, -821297825, cst_frameset$0],
    _bg_ = [0, -949968843, cst_doctype_should_be_first],
    cst_html$3 = cst_html$9,
    cst_html$4 = cst_html$9,
    _bf_ = [0, -949968843, "content after body"],
    cst_template$5 = cst_template$7,
    cst_template$4 = cst_template$7,
    _be_ = [0, -622351166, cst_template$7],
    cst_template$6 = cst_template$7,
    cst_select$8 = cst_select$10,
    cst_select$9 = cst_select$10,
    cst_table$10 = cst_table$11,
    _bd_ = [0, -622351166, "name"],
    _a8_ = [0, cst_optgroup, 0],
    _a9_ = [0, -622351166, cst_optgroup],
    cst_select$2 = cst_select$10,
    cst_select$3 = cst_select$10,
    _bc_ = [0, cst_option, 0],
    _bb_ = [0, cst_optgroup, 0],
    _ba_ = [0, cst_option, 0],
    cst_select$5 = cst_select$10,
    cst_select = cst_select$10,
    _a__ = [0, -949968843, cst_doctype_should_be_first],
    _a$_ = [0, -590381665, [0, cst_U_0000, cst_select$10, cst_null]],
    cst_select$6 = cst_select$10,
    cst_select$7 = cst_select$10,
    cst_select$4 = cst_select$10,
    cst_select$0 = cst_select$10,
    _a5_ = [0, -622351166, cst_select$10],
    cst_select$1 = cst_select$10,
    _a6_ = [0, cst_option, 0],
    _a7_ = [0, -622351166, cst_option],
    _a4_ = [0, -821297825, cst_select$10],
    _a3_ = [0, cst_td$0, [0, cst_th, 0]],
    cst_td_th = "td/th",
    cst_td = cst_td$0,
    cst_tr$0 = cst_tr$4,
    _a2_ = [0, -622351166, cst_tr$4],
    cst_tr$1 = cst_tr$4,
    cst_tr$2 = cst_tr$4,
    cst_tr$3 = cst_tr$4,
    cst_tr = cst_tr$4,
    cst_table$9 = cst_table$11,
    _a1_ = [0, cst_tbody$0, [0, cst_thead, [0, cst_tfoot, 0]]],
    cst_table$8 = cst_table$11,
    _a0_ = [0, cst_tbody$0, [0, cst_thead, [0, cst_tfoot, 0]]],
    cst_colgroup$0 = cst_colgroup$2,
    _aY_ = [0, -949968843, cst_doctype_should_be_first],
    cst_colgroup$1 = cst_colgroup$2,
    _aZ_ = [0, 1],
    _aV_ = [0, cst_colgroup$2, 0],
    _aW_ = [0, -622351166, cst_colgroup$2],
    _aX_ = [0, -622351166, cst_col],
    _aT_ = [0, cst_colgroup$2, 0],
    _aU_ = [0, -821297825, cst_colgroup$2],
    cst_caption$0 = cst_caption$7,
    cst_caption$1 = cst_caption$7,
    cst_caption$4 = cst_caption$7,
    cst_caption$5 = cst_caption$7,
    cst_caption$6 = cst_caption$7,
    _aR_ = [0, -622351166, cst_table$11],
    cst_caption$2 = cst_caption$7,
    _aS_ = [0, -622351166, cst_caption$7],
    cst_caption$3 = cst_caption$7,
    cst_caption = cst_caption$7,
    _aQ_ = [0, -590381665, [0, cst_U_0000, cst_table$11, cst_null]],
    cst_tbody = cst_tbody$0,
    cst_table$3 = cst_table$11,
    cst_table$4 = cst_table$11,
    cst_colgroup = cst_colgroup$2,
    _aP_ = [0, 1],
    cst_table$0 = cst_table$11,
    _aN_ = [0, -949968843, cst_doctype_should_be_first],
    _aO_ =
      [0,
       cst_table$11,
       [0, cst_tbody$0, [0, cst_tfoot, [0, cst_thead, [0, cst_tr$4, 0]]]]],
    cst_table$6 = cst_table$11,
    cst_table$7 = cst_table$11,
    cst_table$5 = cst_table$11,
    cst_table$1 = cst_table$11,
    _aM_ = [0, -622351166, cst_table$11],
    cst_table$2 = cst_table$11,
    cst_table = cst_table$11,
    _aL_ = [0, -821297825, cst_table$11],
    _aK_ = [0, -95440847, "content"],
    _ai_ =
      [0,
       cst_h1,
       [0, cst_h2, [0, cst_h3, [0, cst_h4, [0, cst_h5, [0, cst_h6, 0]]]]]],
    _ah_ =
      [0,
       cst_h1,
       [0, cst_h2, [0, cst_h3, [0, cst_h4, [0, cst_h5, [0, cst_h6, 0]]]]]],
    cst_p$3 = cst_p$4,
    cst_p$2 = cst_p$4,
    _ad_ = [0, -622351166, cst_p$4],
    cst_p$1 = cst_p$4,
    _ak_ = [0, 551520201, cst_form$2],
    _am_ = [0, 389604418, [0, cst_br, 0, 0]],
    _ay_ = [0, cst_ruby$1, [0, cst_rtc, 0]],
    cst_ruby$0 = cst_ruby$1,
    _az_ = [0, cst_rtc],
    _ax_ = [0, cst_ruby$1, 0],
    cst_ruby = cst_ruby$1,
    _aA_ = [0, cst_option, 0],
    _as_ = [0, 1],
    _at_ = [0, 1],
    _aF_ = [0, 1],
    _av_ = [0, 4146756],
    _aw_ = [0, 1],
    _aC_ = [0, -262866105],
    _aD_ = [0, 1],
    cst_nobr$0 = cst_nobr$2,
    cst_nobr = cst_nobr$2,
    cst_nobr$1 = cst_nobr$2,
    _aB_ = [0, 1],
    _aH_ = [0, 1],
    cst_img = cst_img$0,
    cst_template$2 = cst_template$7,
    cst_button$0 = cst_button$2,
    cst_button = cst_button$2,
    cst_button$1 = cst_button$2,
    cst_a = cst_a$1,
    cst_a$0 = cst_a$1,
    _aJ_ = [0, 1],
    _ac_ =
      caml_list_of_js_array
       ([cst_dd,
         cst_dt,
         cst_li$1,
         cst_p$4,
         cst_tbody$0,
         cst_td$0,
         cst_tfoot,
         cst_th,
         cst_thead,
         cst_tr$4,
         cst_body$3,
         cst_html$9]),
    _aq_ = [0, -949968843, cst_doctype_should_be_first],
    _ar_ = [0, -590381665, [0, cst_U_0000, cst_body$3, cst_null]],
    cst_template$3 = cst_template$7,
    cst_form$1 = cst_form$2,
    _aG_ = [0, -590381665, [0, cst_image, cst_tag, "should be 'img'"]],
    _aE_ = [0, cst_li$1, 0],
    _aI_ = [0, cst_dd, [0, cst_dt, 0]],
    _au_ = [0, 1],
    _an_ = [0, -622351166, cst_br],
    cst_body$2 = cst_body$3,
    _ap_ = [0, -622351166, cst_body$3],
    _ao_ =
      caml_list_of_js_array
       ([cst_dd,
         cst_dt,
         cst_li$1,
         cst_optgroup,
         cst_option,
         cst_p$4,
         cst_rb,
         cst_rp,
         cst_rt,
         cst_rtc,
         cst_tbody$0,
         cst_td$0,
         cst_tfoot,
         cst_th,
         cst_thead,
         cst_tr$4,
         cst_body$3,
         cst_html$9]),
    cst_template$1 = cst_template$7,
    _al_ = [0, -622351166, cst_form$2],
    cst_form = cst_form$2,
    _aj_ = [0, -622351166, cst_form$2],
    cst_form$0 = cst_form$2,
    cst_body$1 = cst_body$3,
    _ag_ = [0, -622351166, cst_html$9],
    _af_ =
      caml_list_of_js_array
       ([cst_dd,
         cst_dt,
         cst_li$1,
         cst_optgroup,
         cst_option,
         cst_p$4,
         cst_rb,
         cst_rp,
         cst_rt,
         cst_rtc,
         cst_tbody$0,
         cst_td$0,
         cst_tfoot,
         cst_th,
         cst_thead,
         cst_tr$4,
         cst_body$3,
         cst_html$9]),
    cst_li = cst_li$1,
    _ae_ = [0, -622351166, cst_li$1],
    cst_li$0 = cst_li$1,
    cst_body$0 = cst_body$3,
    _Z_ = [0, 127343600, [0, 802643307, cst_html$9]],
    ___ = [0, 127343600, [0, 802643307, cst_head$2]],
    _aa_ = [0, -949968843, cst_doctype_should_be_first],
    cst_html$2 = cst_html$9,
    _ab_ = [0, -949968843, "duplicate head element"],
    cst_html$1 = cst_html$9,
    _$_ = [0, cst_body$3, [0, cst_html$9, [0, cst_br, 0]]],
    cst_body = cst_body$3,
    cst_noscript$0 = cst_noscript$1,
    cst_noscript = cst_noscript$1,
    _Y_ = [0, -949968843, cst_doctype_should_be_first],
    _X_ = [0, -821297825, cst_noscript$1],
    cst_head$0 = cst_head$2,
    cst_head$1 = cst_head$2,
    _U_ = [0, 1],
    _T_ = [0, -949968843, cst_doctype_should_be_first],
    cst_template = cst_template$7,
    _W_ = [0, -622351166, cst_template$7],
    cst_template$0 = cst_template$7,
    _V_ = [0, cst_body$3, [0, cst_html$9, [0, cst_br, 0]]],
    cst_html$0 = cst_html$9,
    _R_ = [0, -949968843, cst_doctype_should_be_first],
    _S_ = [0, cst_head$2, [0, cst_body$3, [0, cst_html$9, [0, cst_br, 0]]]],
    cst_head = cst_head$2,
    _P_ = [0, -949968843, cst_doctype_should_be_first],
    _Q_ = [0, cst_head$2, [0, cst_body$3, [0, cst_html$9, [0, cst_br, 0]]]],
    cst_html = cst_html$9,
    _O_ = [0, 1],
    _N_ =
      [0,
       [0, 802643307, cst_address],
       [0, [0, 802643307, cst_div], [0, [0, 802643307, cst_p$4], 0]]],
    cst_p = cst_p$4,
    cst_p$0 = cst_p$4,
    _M_ =
      [0,
       cst_dd,
       [0,
        cst_dt,
        [0,
         cst_li$1,
         [0,
          cst_option,
          [0,
           cst_optgroup,
           [0,
            cst_p$4,
            [0, cst_rb, [0, cst_rp, [0, cst_rt, [0, cst_rtc, 0]]]]]]]]]],
    _L_ = [0, -590381665, [0, "/>", cst_tag, "should not be self-closing"]],
    _K_ = [0, "src/html_parser.ml", 1115, 23],
    _H_ = [0, 1, 1],
    _I_ = [0, 802643307, cst_html$9],
    _J_ = [0, 1],
    cst_above_in_stack_not_found = "above_in_stack: not found",
    cst_above_node_not_found = "above_node: not found",
    _G_ = [0, 1, 0],
    _F_ =
      [0,
       [0, 802643307, cst_html$9],
       [0,
        [0, 802643307, cst_table$11],
        [0, [0, 802643307, cst_template$7], 0]]],
    cst_require_current_element_No = "require_current_element: None",
    cst_feColorMatrix = "feColorMatrix",
    cst_feBlend = "feBlend",
    cst_clipPath = "clipPath",
    cst_animateTransform = "animateTransform",
    cst_animateMotion = "animateMotion",
    cst_animateColor = "animateColor",
    cst_altGlyphItem = "altGlyphItem",
    cst_altGlyphDef = "altGlyphDef",
    cst_altGlyph = "altGlyph",
    cst_feFuncA = "feFuncA",
    cst_feFlood = "feFlood",
    cst_feDropShadow = "feDropShadow",
    cst_feDistantLight = "feDistantLight",
    cst_feDisplacementMap = "feDisplacementMap",
    cst_feDiffuseLighting = "feDiffuseLighting",
    cst_feConvolveMatrix = "feConvolveMatrix",
    cst_feComposite = "feComposite",
    cst_feComponentTransfer = "feComponentTransfer",
    cst_fePointLight = "fePointLight",
    cst_feOffset = "feOffset",
    cst_feMorphology = "feMorphology",
    cst_feMergeNode = "feMergeNode",
    cst_feMerge = "feMerge",
    cst_feImage = "feImage",
    cst_feGaussianBlur = "feGaussianBlur",
    cst_feFuncR = "feFuncR",
    cst_feFuncG = "feFuncG",
    cst_textPath = "textPath",
    cst_radialGradient = "radialGradient",
    cst_linearGradient = "linearGradient",
    cst_glyphRef$0 = cst_glyphRef$1,
    cst_foreignObject = cst_foreignObject$0,
    cst_feTurbulence = "feTurbulence",
    cst_feTile = "feTile",
    cst_feSpotLight = "feSpotLight",
    cst_feSpecularLighting = "feSpecularLighting",
    cst_feFuncB = "feFuncB",
    cst_contentScriptType = "contentScriptType",
    cst_clipPathUnits = "clipPathUnits",
    cst_calcMode = "calcMode",
    cst_baseProfile = "baseProfile",
    cst_baseFrequency = "baseFrequency",
    cst_attributeType = "attributeType",
    cst_attributeName = "attributeName",
    cst_gradientTransform = "gradientTransform",
    cst_glyphRef = cst_glyphRef$1,
    cst_filterUnits = "filterUnits",
    cst_filterRes = "filterRes",
    cst_externalResourcesRequired = "externalResourcesRequired",
    cst_edgeMode = "edgeMode",
    cst_diffuseConstant = "diffuseConstant",
    cst_contentStyleType = "contentStyleType",
    cst_limitingConeAngle = "limitingConeAngle",
    cst_lengthAdjust = "lengthAdjust",
    cst_keyTimes = "keyTimes",
    cst_keySplines = "keySplines",
    cst_keyPoints = "keyPoints",
    cst_kernelUnitLength = "kernelUnitLength",
    cst_kernelMatrix = "kernelMatrix",
    cst_patternContentUnits = "patternContentUnits",
    cst_pathLength = "pathLength",
    cst_numOctaves = "numOctaves",
    cst_maskUnits = "maskUnits",
    cst_maskContentUnits = "maskContentUnits",
    cst_markerWidth = "markerWidth",
    cst_markerUnits = "markerUnits",
    cst_markerHeight = "markerHeight",
    cst_gradientUnits = "gradientUnits",
    cst_primitiveUnits = "primitiveUnits",
    cst_preserveAspectRatio = "preserveAspectRatio",
    cst_preserveAlpha = "preserveAlpha",
    cst_pointsAtZ = "pointsAtZ",
    cst_pointsAtY = "pointsAtY",
    cst_pointsAtX = "pointsAtX",
    cst_patternUnits = "patternUnits",
    cst_specularExponent = "specularExponent",
    cst_specularConstant = "specularConstant",
    cst_requiredFeatures = "requiredFeatures",
    cst_requiredExtensions = "requiredExtensions",
    cst_repeatDur = "repeatDur",
    cst_repeatCount = "repeatCount",
    cst_refY = "refY",
    cst_refX = "refX",
    cst_targetX = "targetX",
    cst_tableValues = "tableValues",
    cst_systemLanguage = "systemLanguage",
    cst_surfaceScale = "surfaceScale",
    cst_stitchTiles = "stitchTiles",
    cst_stdDeviation = "stdDeviation",
    cst_startOffset = "startOffset",
    cst_zoomAndPan = "zoomAndPan",
    cst_yChannelSelector = "yChannelSelector",
    cst_xChannelSelector = "xChannelSelector",
    cst_viewTarget = "viewTarget",
    cst_viewBox = "viewBox",
    cst_textLength = "textLength",
    cst_targetY = "targetY",
    cst_spreadMethod = "spreadMethod",
    cst_patternTransform = "patternTransform",
    cst_definitionURL = "definitionURL",
    _y_ = [0, cst_foreignObject$0, [0, cst_desc, [0, cst_title, 0]]],
    _x_ =
      [0,
       [0, -262866105, cst_mi],
       [0,
        [0, -262866105, cst_mo],
        [0,
         [0, -262866105, cst_mn],
         [0, [0, -262866105, cst_ms], [0, [0, -262866105, cst_mtext], 0]]]]],
    _v_ = [0, 127343600, [0, 4146756, cst_svg]],
    _w_ = [0, 127343600, [0, -262866105, cst_math]],
    _t_ = [0, 1, 1],
    _u_ = [0, 1],
    _s_ = [0, -188437701, 0, 0],
    _f_ = [0, 127343600, cst_body$3],
    _g_ = [0, 127343600, cst_body$3],
    _r_ = [0, 127343600, cst_frameset$0],
    _p_ = [0, 127343600, cst_ul],
    _j_ = [0, 127343600, cst_tbody$0],
    _q_ = [0, 127343600, cst_html$9],
    _k_ = [0, 127343600, cst_head$2],
    _l_ = [0, 127343600, cst_table$11],
    _m_ = [0, 127343600, cst_tr$4],
    _o_ = [0, 127343600, cst_select$10],
    _i_ = [0, 127343600, cst_svg],
    _n_ = [0, 127343600, cst_math],
    _h_ = [0, 127343600, cst_body$3],
    _e_ =
      caml_list_of_js_array
       ([[0, 802643307, cst_address],
         [0, 802643307, cst_applet],
         [0, 802643307, cst_area],
         [0, 802643307, cst_article],
         [0, 802643307, cst_aside],
         [0, 802643307, cst_base],
         [0, 802643307, cst_basefont],
         [0, 802643307, cst_bgsound],
         [0, 802643307, cst_blockquote],
         [0, 802643307, cst_body$3],
         [0, 802643307, cst_br],
         [0, 802643307, cst_button$2],
         [0, 802643307, cst_caption$7],
         [0, 802643307, cst_center],
         [0, 802643307, cst_col],
         [0, 802643307, cst_colgroup$2],
         [0, 802643307, cst_dd],
         [0, 802643307, cst_details],
         [0, 802643307, cst_dir],
         [0, 802643307, cst_div],
         [0, 802643307, cst_dl],
         [0, 802643307, cst_dt],
         [0, 802643307, cst_embed],
         [0, 802643307, cst_fieldset],
         [0, 802643307, cst_figcaption],
         [0, 802643307, cst_figure],
         [0, 802643307, cst_footer],
         [0, 802643307, cst_form$2],
         [0, 802643307, cst_frame],
         [0, 802643307, cst_frameset$0],
         [0, 802643307, cst_h1],
         [0, 802643307, cst_h2],
         [0, 802643307, cst_h3],
         [0, 802643307, cst_h4],
         [0, 802643307, cst_h5],
         [0, 802643307, cst_h6],
         [0, 802643307, cst_head$2],
         [0, 802643307, cst_header],
         [0, 802643307, cst_hgroup],
         [0, 802643307, cst_hr],
         [0, 802643307, cst_html$9],
         [0, 802643307, cst_iframe],
         [0, 802643307, cst_img$0],
         [0, 802643307, cst_input],
         [0, 802643307, "isindex"],
         [0, 802643307, cst_li$1],
         [0, 802643307, cst_link],
         [0, 802643307, cst_listing],
         [0, 802643307, cst_main],
         [0, 802643307, cst_marquee],
         [0, 802643307, cst_meta],
         [0, 802643307, cst_nav],
         [0, 802643307, cst_noembed],
         [0, 802643307, cst_noframes],
         [0, 802643307, cst_noscript$1],
         [0, 802643307, cst_object],
         [0, 802643307, cst_ol],
         [0, 802643307, cst_p$4],
         [0, 802643307, cst_param],
         [0, 802643307, cst_plaintext],
         [0, 802643307, cst_pre],
         [0, 802643307, cst_script],
         [0, 802643307, cst_section],
         [0, 802643307, cst_select$10],
         [0, 802643307, cst_source],
         [0, 802643307, cst_style],
         [0, 802643307, cst_summary],
         [0, 802643307, cst_table$11],
         [0, 802643307, cst_tbody$0],
         [0, 802643307, cst_td$0],
         [0, 802643307, cst_template$7],
         [0, 802643307, cst_textarea],
         [0, 802643307, cst_tfoot],
         [0, 802643307, cst_th],
         [0, 802643307, cst_thead],
         [0, 802643307, cst_title],
         [0, 802643307, cst_tr$4],
         [0, 802643307, cst_track],
         [0, 802643307, cst_ul],
         [0, 802643307, cst_wbr],
         [0, 802643307, cst_xmp],
         [0, -262866105, cst_mi],
         [0, -262866105, cst_mo],
         [0, -262866105, cst_mn],
         [0, -262866105, cst_ms],
         [0, -262866105, cst_mtext],
         [0, -262866105, cst_annotation_xml],
         [0, 4146756, cst_foreignObject$0],
         [0, 4146756, cst_desc],
         [0, 4146756, cst_title]]),
    _d_ = [0, 1, 1],
    _a_ = [0, 1, 1],
    _b_ = [0, 1, 1],
    _c_ = [0, 802643307, "dummy"],
    _z_ = [0, 802643307, cst_button$2],
    _B_ = [0, 802643307, cst_ul],
    _C_ = [0, 802643307, cst_ol],
    _E_ =
      [0,
       [0, 802643307, cst_html$9],
       [0,
        [0, 802643307, cst_table$11],
        [0, [0, 802643307, cst_template$7], 0]]];
   function to_string(param){
    if(typeof param === "number")
     return 4146756 === param
             ? Markup_Common[6]
             : 802643307 <= param ? Markup_Common[5] : Markup_Common[7];
    var s = param[2];
    return s;
   }
   function list_mem_qname(param, l){
    var tag = param[2], ns = param[1], param$0 = l;
    for(;;){
     if(! param$0) return 0;
     var match = param$0[1], tag$0 = match[2], ns$0 = match[1];
     if(caml_equal(ns$0, ns) && caml_string_equal(tag$0, tag)) return 1;
     var rest = param$0[2], param$0 = rest;
    }
   }
   var dummy = [];
   caml_update_dummy(dummy, [0, _c_, _b_, 0, 1, 0, 0, 0, _a_, 0, dummy]);
   function create(opt, _ir_, name, location){
    if(opt)
     var sth = opt[1], is_html_integration_point = sth;
    else
     var is_html_integration_point = 0;
    if(_ir_) var sth$0 = _ir_[1], suppress = sth$0; else var suppress = 0;
    return [0,
            name,
            location,
            is_html_integration_point,
            suppress,
            0,
            1,
            0,
            _d_,
            0,
            dummy];
   }
   function is_special(name){return list_mem_qname(name, _e_);}
   function is_not_hidden(tag){
    var _in_ = tag[2];
    function _io_(param){
     var
      value = param[2],
      name = param[1],
      _ip_ = caml_string_equal(name, "type"),
      _iq_ = _ip_ ? caml_string_notequal(value, "hidden") : _ip_;
     return _iq_;
    }
    return caml_call1(caml_call1(Stdlib_List[34], _io_), _in_);
   }
   function the_context(param){var c = param[1][1]; return c;}
   function is_mathml_text_integration_poi(qname){return list_mem_qname(qname, _x_);
   }
   function current_element(open_elements){
    var match = open_elements[1];
    if(! match) return 0;
    var element = match[1];
    return [0, element];
   }
   function require_current_element(open_elements){
    var match = current_element(open_elements);
    if(! match) return caml_call1(Stdlib[2], cst_require_current_element_No);
    var element = match[1];
    return element;
   }
   function adjusted_current_element(context, open_elements){
    var match = open_elements[1], e = context[1][2];
    if(! match) return 0;
    var element = match[1];
    if(! match[2] && e){var element$0 = e[1]; return [0, element$0];}
    return [0, element];
   }
   function current_element_is(open_elements, names){
    var _ik_ = open_elements[1];
    if(_ik_){
     var _il_ = _ik_[1][1], _im_ = _il_[1];
     if(typeof _im_ === "number" && 802643307 === _im_){
      var name = _il_[2];
      return caml_call2(Markup_Common[37], name, names);
     }
    }
    return 0;
   }
   function has(open_elements, name){
    var _ig_ = open_elements[1];
    function _ih_(param){
     var
      match = param[1],
      name$0 = match[2],
      ns = match[1],
      _ii_ = 802643307 === ns ? 1 : 0,
      _ij_ = _ii_ ? caml_string_equal(name$0, name) : _ii_;
     return _ij_;
    }
    return caml_call2(Stdlib_List[34], _ih_, _ig_);
   }
   function in_scope_general(scope_delimiters, open_elements, name){
    var param = open_elements[1];
    for(;;){
     if(! param) return 0;
     var
      name$0 = param[1][1],
      name$1 = name$0[2],
      ns = name$0[1],
      more = param[2];
     if(802643307 === ns && caml_string_equal(name$1, name)) return 1;
     if(list_mem_qname(name$0, scope_delimiters)) return 0;
     var param = more;
    }
   }
   function in_scope(_ie_, _if_){
    return in_scope_general(scope_delimiters, _ie_, _if_);
   }
   var _A_ = [0, _z_, scope_delimiters];
   function in_button_scope(_ic_, _id_){
    return in_scope_general(_A_, _ic_, _id_);
   }
   var _D_ = [0, _C_, [0, _B_, scope_delimiters]];
   function in_table_scope(_ia_, _ib_){
    return in_scope_general(_E_, _ia_, _ib_);
   }
   function in_select_scope(open_elements, name){
    var param = open_elements[1];
    for(;;){
     if(! param) return 0;
     var
      match = param[1][1],
      name$0 = match[2],
      ns = match[1],
      more = param[2];
     if(802643307 !== ns) return 0;
     if(caml_string_equal(name$0, name)) return 1;
     if
      (!
       caml_string_equal(name$0, cst_optgroup)
       && ! caml_string_equal(name$0, cst_option))
      return 0;
     var param = more;
    }
   }
   function one_in_table_scope(open_elements, names){
    var param = open_elements[1];
    for(;;){
     if(! param) return 0;
     var name = param[1][1], name$0 = name[2], ns = name[1], more = param[2];
     if(802643307 === ns && caml_call2(Markup_Common[37], name$0, names))
      return 1;
     if(list_mem_qname(name, _F_)) return 0;
     var param = more;
    }
   }
   function target_in_scope(open_elements, node){
    var param = open_elements[1];
    for(;;){
     if(! param) return 0;
     var more = param[2], e = param[1];
     if(e === node) return 1;
     if(list_mem_qname(node[1], scope_delimiters)) return 0;
     var param = more;
    }
   }
   function remove(open_elements, element){
    var _h9_ = open_elements[1];
    function _h__(_h$_){return element !== _h$_ ? 1 : 0;}
    open_elements[1] = caml_call2(Stdlib_List[44], _h__, _h9_);
    element[6] = 0;
    return;
   }
   function add_marker(active_formatting_elements){
    active_formatting_elements[1] = [0, 0, active_formatting_elements[1]];
    return;
   }
   function clear_until_marker(active_formatting_elements){
    var param = active_formatting_elements[1];
    for(;;){
     if(param){
      if(param[1]){var rest = param[2], param = rest; continue;}
      var rest$0 = param[2], _h8_ = rest$0;
     }
     else
      var _h8_ = 0;
     active_formatting_elements[1] = _h8_;
     return;
    }
   }
   function remove$0(active_formatting_elements, element){
    var _h6_ = active_formatting_elements[1];
    function _h7_(param){
     if(param){var e = param[1]; if(e === element) return 0;}
     return 1;
    }
    active_formatting_elements[1] =
     caml_call1(caml_call1(Stdlib_List[44], _h7_), _h6_);
    return;
   }
   function replace(active_formatting_elements, old, new$0){
    var _h4_ = active_formatting_elements[1];
    function _h5_(e){
     if(e){
      var t = e[3], l = e[2], e$0 = e[1];
      if(e$0 === old) return [0, new$0, l, t];
     }
     return e;
    }
    active_formatting_elements[1] =
     caml_call1(caml_call1(Stdlib_List[20], _h5_), _h4_);
    return;
   }
   function push(template_insertion_modes, mode){
    template_insertion_modes[1] = [0, mode, template_insertion_modes[1]];
    return;
   }
   function pop(template_insertion_modes){
    var match = template_insertion_modes[1];
    if(! match) return;
    var rest = match[2];
    template_insertion_modes[1] = rest;
    return;
   }
   function enable(subtree_buffer){
    if(subtree_buffer[2]) return;
    var match = current_element(subtree_buffer[1]);
    if(! match) return;
    var element = match[1];
    element[5] = 1;
    subtree_buffer[3] = element;
    subtree_buffer[2] = 1;
    return;
   }
   function parse(requested_context, report, param){
    var
     set_foreign = param[3],
     set_tokenizer_state = param[2],
     tokens = param[1],
     context = [0, _s_],
     throw$0 = [0, function(param){return 0;}],
     ended = [0, function(param){return 0;}],
     output = [0, function(param){return 0;}],
     report_if = caml_call1(Markup_Error[4], report);
    function unmatched_end_tag(l, name, k){
     return caml_call4(report, l, [0, -622351166, name], throw$0[1], k);
    }
    function misnested_tag(l, t, context_name, k){
     return caml_call4
             (report,
              l,
              [0, -298452471, [0, t[1], context_name, t[2]]],
              throw$0[1],
              k);
    }
    var
     open_elements = [0, 0],
     active_formatting_elements = [0, 0],
     subtree_buffer = [0, open_elements, 0, dummy],
     text = caml_call1(Markup_Text[2], 0),
     template_insertion_modes = [0, 0],
     frameset_ok = [0, 1],
     head_seen = [0, 0],
     form_element_pointer = [0, 0],
     add_character = caml_call1(Markup_Text[5], text);
    caml_call1
     (set_foreign,
      function(param){
       var match = adjusted_current_element(context, open_elements);
       if(match){var ns = match[1][1][1]; if(802643307 !== ns) return 1;}
       return 0;
      });
    function report_if_stack_has_other_than(names, k){
     function iterate(param){
      if(! param) return caml_call1(k, 0);
      var
       _hY_ = param[1],
       location = _hY_[2],
       match = _hY_[1],
       name = match[2],
       ns = match[1],
       more = param[2];
      function _hZ_(param){return iterate(more);}
      var _h0_ = throw$0[1], _h2_ = 802643307 === ns ? 1 : 0;
      function _h1_(param){return [0, 551520201, name];}
      var _h3_ = _h2_ ? caml_call2(Markup_Common[37], name, names) : _h2_;
      return caml_call5(report_if, 1 - _h3_, location, _h1_, _h0_, _hZ_);
     }
     return iterate(open_elements[1]);
    }
    var
     current_mode = [],
     constructor = function _hX_(_hV_, _hW_){return _hX_.fun(_hV_, _hW_);},
     reset_mode = function _hU_(_hT_){return _hU_.fun(_hT_);},
     emit =
       function _hS_(_hP_, _hQ_, _hR_){return _hS_.fun(_hP_, _hQ_, _hR_);},
     emit_list = function _hO_(_hM_, _hN_){return _hO_.fun(_hM_, _hN_);},
     emit_text = function _hL_(_hK_){return _hL_.fun(_hK_);},
     emit$0 =
       function _hJ_(_hG_, _hH_, _hI_){return _hJ_.fun(_hG_, _hH_, _hI_);},
     push_and_emit =
       function _hF_(_hz_, _hA_, _hB_, _hC_, _hD_, _hE_){
        return _hF_.fun(_hz_, _hA_, _hB_, _hC_, _hD_, _hE_);
       },
     push_implicit =
       function _hy_(_hv_, _hw_, _hx_){return _hy_.fun(_hv_, _hw_, _hx_);},
     pop$0 = function _hu_(_hs_, _ht_){return _hu_.fun(_hs_, _ht_);},
     pop_until =
       function _hr_(_ho_, _hp_, _hq_){return _hr_.fun(_ho_, _hp_, _hq_);},
     close_element =
       function _hn_(_hj_, _hk_, _hl_, _hm_){
        return _hn_.fun(_hj_, _hk_, _hl_, _hm_);
       },
     pop_until_and_raise_errors =
       function _hi_(_hf_, _hg_, _hh_){return _hi_.fun(_hf_, _hg_, _hh_);},
     pop_implied =
       function _he_(_hb_, _hc_, _hd_){return _he_.fun(_hb_, _hc_, _hd_);},
     pop_to_table_context =
       function _ha_(_g__, _g$_){return _ha_.fun(_g__, _g$_);},
     pop_to_table_body_context =
       function _g9_(_g7_, _g8_){return _g9_.fun(_g7_, _g8_);},
     pop_to_table_row_context =
       function _g6_(_g4_, _g5_){return _g6_.fun(_g4_, _g5_);},
     close_element_with_implied =
       function _g3_(_g0_, _g1_, _g2_){return _g3_.fun(_g0_, _g1_, _g2_);},
     close_cell = function _gZ_(_gX_, _gY_){return _gZ_.fun(_gX_, _gY_);},
     close_current_p_element =
       function _gW_(_gU_, _gV_){return _gW_.fun(_gU_, _gV_);},
     close_preceding_tag =
       function _gT_(_gQ_, _gR_, _gS_){return _gT_.fun(_gQ_, _gR_, _gS_);},
     emit_end = function _gP_(_gO_){return _gP_.fun(_gO_);},
     reconstruct_active_formatting_ =
       function _gN_(_gM_){return _gN_.fun(_gM_);},
     dispatch = function _gL_(_gJ_, _gK_){return _gL_.fun(_gJ_, _gK_);},
     initial_mode = function _gI_(_gH_){return _gI_.fun(_gH_);},
     before_html_mode = function _gG_(_gF_){return _gG_.fun(_gF_);},
     before_head_mode = function _gE_(_gD_){return _gE_.fun(_gD_);},
     in_head_mode = function _gC_(_gB_){return _gC_.fun(_gB_);},
     in_head_mode_rules =
       function _gA_(_gy_, _gz_){return _gA_.fun(_gy_, _gz_);},
     in_head_noscript_mode = function _gx_(_gw_){return _gx_.fun(_gw_);},
     after_head_mode = function _gv_(_gu_){return _gv_.fun(_gu_);},
     in_body_mode = function _gt_(_gs_){return _gt_.fun(_gs_);},
     in_body_mode_rules =
       function _gr_(_go_, _gp_, _gq_){return _gr_.fun(_go_, _gp_, _gq_);},
     any_other_end_tag_in_body =
       function _gn_(_gk_, _gl_, _gm_){return _gn_.fun(_gk_, _gl_, _gm_);},
     adoption_agency_algorithm =
       function _gj_(_gg_, _gh_, _gi_){return _gj_.fun(_gg_, _gh_, _gi_);},
     select_in_body =
       function _gf_(_gc_, _gd_, _ge_){return _gf_.fun(_gc_, _gd_, _ge_);},
     text_mode = function _gb_(_ga_){return _gb_.fun(_ga_);},
     parse_rcdata = function _f$_(_f__){return _f$_.fun(_f__);},
     parse_rawtext = function _f9_(_f8_){return _f9_.fun(_f8_);},
     anything_else_in_table =
       function _f7_(_f5_, _f6_){return _f7_.fun(_f5_, _f6_);},
     in_table_mode = function _f4_(_f3_){return _f4_.fun(_f3_);},
     in_table_mode_rules =
       function _f2_(_f0_, _f1_){return _f2_.fun(_f0_, _f1_);},
     in_table_text_mode =
       function _fZ_(_fW_, _fX_, _fY_){return _fZ_.fun(_fW_, _fX_, _fY_);},
     in_caption_mode = function _fV_(_fU_){return _fV_.fun(_fU_);},
     in_column_group_mode = function _fT_(_fS_){return _fT_.fun(_fS_);},
     in_table_body_mode = function _fR_(_fQ_){return _fR_.fun(_fQ_);},
     in_row_mode = function _fP_(_fO_){return _fP_.fun(_fO_);},
     in_cell_mode = function _fN_(_fM_){return _fN_.fun(_fM_);},
     in_select_mode = function _fL_(_fK_){return _fL_.fun(_fK_);},
     in_select_mode_rules =
       function _fJ_(_fH_, _fI_){return _fJ_.fun(_fH_, _fI_);},
     in_select_in_table_mode = function _fG_(_fF_){return _fG_.fun(_fF_);},
     in_template_mode = function _fE_(_fD_){return _fE_.fun(_fD_);},
     in_template_mode_rules =
       function _fC_(_fA_, _fB_){return _fC_.fun(_fA_, _fB_);},
     after_body_mode = function _fz_(_fy_){return _fz_.fun(_fy_);},
     in_frameset_mode = function _fx_(_fw_){return _fx_.fun(_fw_);},
     after_frameset_mode = function _fv_(_fu_){return _fv_.fun(_fu_);},
     after_after_body_mode = function _ft_(_fs_){return _ft_.fun(_fs_);},
     after_after_frameset_mode = function _fr_(_fq_){return _fr_.fun(_fq_);},
     foreign_start_tag =
       function _fp_(_fm_, _fn_, _fo_){return _fp_.fun(_fm_, _fn_, _fo_);},
     is_html_font_tag = function _fl_(_fk_){return _fl_.fun(_fk_);},
     foreign_content =
       function _fj_(_fg_, _fh_, _fi_){return _fj_.fun(_fg_, _fh_, _fi_);};
    caml_update_dummy(current_mode, [0, initial_mode]);
    caml_update_dummy
     (constructor,
      function(throw$1, k$1){
       function k$0(param){
        var deciding_token = param[2], detected_context = param[1];
        if(typeof detected_context === "number")
         var context$0 = -188437701;
        else
         var
          name$0 = detected_context[2],
          _e8_ =
            caml_string_notequal(name$0, cst_math)
             ? caml_string_notequal
                (name$0, cst_svg)
               ? [0, 127343600, [0, 802643307, name$0]]
               : _v_
             : _w_,
          context$0 = _e8_;
        if(typeof context$0 === "number")
         var context_element = 0;
        else{
         var name = context$0[2], _e6_ = name[1];
         a:
         {
          b:
          if(typeof _e6_ === "number" && 4146756 === _e6_){
           var _e7_ = name[2];
           if
            (caml_string_notequal(_e7_, cst_desc)
             &&
              caml_string_notequal(_e7_, cst_foreignObject$0)
              && caml_string_notequal(_e7_, cst_title))
            break b;
           var is_html_integration_point = 1;
           break a;
          }
          var is_html_integration_point = 0;
         }
         var
          context_element =
            [0, create([0, is_html_integration_point], _u_, name, _t_)];
        }
        context[1] = [0, context$0, context_element, deciding_token];
        var match = the_context(context);
        a:
        {
         b:
         if(typeof match !== "number" && 127343600 === match[1]){
          var _fc_ = match[2], _fd_ = _fc_[1];
          if(typeof _fd_ === "number" && 802643307 === _fd_){
           var _fe_ = _fc_[2];
           c:
           {
            d:
            if
             (caml_string_notequal(_fe_, cst_iframe)
              &&
               caml_string_notequal(_fe_, cst_noembed)
               && caml_string_notequal(_fe_, cst_noframes)){
             if(! caml_string_notequal(_fe_, cst_plaintext)){var _ff_ = -966327401; break c;}
             if(! caml_string_notequal(_fe_, cst_script)){var _ff_ = 307819518; break c;}
             if(caml_string_notequal(_fe_, cst_style)){
              if
               (caml_string_notequal(_fe_, cst_textarea)
                && caml_string_notequal(_fe_, cst_title)){
               if(caml_string_notequal(_fe_, cst_xmp)) break b;
               break d;
              }
              var _ff_ = 172003931;
              break c;
             }
            }
            var _ff_ = 514427509;
           }
           var initial_tokenizer_state = _ff_;
           break a;
          }
         }
         var initial_tokenizer_state = 758940234;
        }
        caml_call1(set_tokenizer_state, initial_tokenizer_state);
        if(typeof the_context(context) !== "number"){
         var notional_root = create(0, _J_, _I_, _H_);
         open_elements[1] = [0, notional_root, 0];
        }
        var match$0 = the_context(context);
        a:
        if(typeof match$0 !== "number" && 127343600 === match$0[1]){
         var _fa_ = match$0[2], _fb_ = _fa_[1];
         if
          (typeof _fb_ === "number"
           &&
            802643307 === _fb_
            && ! caml_string_notequal(_fa_[2], cst_template$7)){
          push(template_insertion_modes, in_template_mode);
          break a;
         }
        }
        var t = context[1][3];
        a:
        b:
        if(t){
         var _e9_ = t[1];
         if
          (caml_string_notequal(_e9_, cst_body$3)
           && caml_string_notequal(_e9_, cst_frameset$0))
          break b;
         head_seen[1] = 1;
         break a;
        }
        var
         _e__ =
           typeof the_context(context) === "number"
            ? initial_mode
            : caml_call1(reset_mode, 0);
        current_mode[1] = _e__;
        function _e$_(throw$1, e, k){
         throw$0[1] = throw$1;
         ended[1] = e;
         output[1] = k;
         return caml_call1(current_mode[1], 0);
        }
        return caml_call1(k$1, caml_call1(Markup_Kstream[1], _e$_));
       }
       if(! requested_context){
        var
         match = caml_call1(Markup_Kstream[16], tokens),
         restore = match[2],
         tokens$0 = match[1],
         last_name = [0, 0],
         k =
           function(context){
            caml_call1(restore, 0);
            return k$0([0, context, last_name[1]]);
           },
         scan =
           function(param){
            function k$0(param){
             var match = param[2];
             if(typeof match === "number") return k(_f_);
             var _eR_ = match[1];
             if(748194550 <= _eR_){
              if(990181650 <= _eR_) return k(-188437701);
              var c = match[2];
              return caml_call1(Markup_Common[22], c) ? scan(0) : k(_g_);
             }
             if(389604418 > _eR_) return scan(0);
             var
              _eS_ = match[2][1],
              _eT_ = caml_string_compare(_eS_, "marker");
             a:
             {
              b:
              {
               c:
               {
                d:
                {
                 e:
                 {
                  if(0 > _eT_){
                   var _e0_ = caml_string_compare(_eS_, cst_fefuncr);
                   if(0 <= _e0_){
                    if(0 >= _e0_) break c;
                    var _e1_ = caml_string_compare(_eS_, cst_foreignobject);
                    if(0 > _e1_){
                     var _e2_ = caml_string_compare(_eS_, cst_fespotlight);
                     if(0 <= _e2_){
                      if(0 >= _e2_) break c;
                      if(! caml_string_notequal(_eS_, cst_fetile)) break c;
                      if(! caml_string_notequal(_eS_, cst_feturbulence)) break c;
                      if(! caml_string_notequal(_eS_, "filter")) break c;
                      if(! caml_string_notequal(_eS_, "font-face")) break c;
                      if(! caml_string_notequal(_eS_, "font-face-format"))
                       break c;
                      if(! caml_string_notequal(_eS_, "font-face-name")) break c;
                      if(! caml_string_notequal(_eS_, "font-face-src")) break c;
                      if(caml_string_notequal(_eS_, "font-face-uri")) break a;
                      break c;
                     }
                     if(! caml_string_notequal(_eS_, cst_fegaussianblur))
                      break c;
                     if(! caml_string_notequal(_eS_, cst_feimage)) break c;
                     if(! caml_string_notequal(_eS_, cst_femerge)) break c;
                     if(! caml_string_notequal(_eS_, cst_femergenode)) break c;
                     if(! caml_string_notequal(_eS_, cst_femorphology)) break c;
                     if(! caml_string_notequal(_eS_, cst_feoffset)) break c;
                     if(! caml_string_notequal(_eS_, cst_fepointlight)) break c;
                     if(caml_string_notequal(_eS_, cst_fespecularlighting))
                      break a;
                     break c;
                    }
                    if(0 >= _e1_) break c;
                    var switch$1 = caml_string_compare(_eS_, cst_image);
                    if(0 <= switch$1){
                     if(0 >= switch$1) break c;
                     if(! caml_string_notequal(_eS_, cst_li$1)) return k(_p_);
                     if(! caml_string_notequal(_eS_, "line")) break c;
                     if(! caml_string_notequal(_eS_, cst_lineargradient))
                      break c;
                     if(! caml_string_notequal(_eS_, cst_link)) break e;
                     if(! caml_string_notequal(_eS_, "maction")) break b;
                     if(! caml_string_notequal(_eS_, "maligngroup")) break b;
                     if(caml_string_notequal(_eS_, cst_malignmark)) break a;
                     break b;
                    }
                    if(! caml_string_notequal(_eS_, cst_frame)) return k(_r_);
                    if(caml_string_notequal(_eS_, cst_frameset$0)){
                     if(! caml_string_notequal(_eS_, "g")) break c;
                     if(! caml_string_notequal(_eS_, "glyph")) break c;
                     if(! caml_string_notequal(_eS_, cst_glyphref)) break c;
                     if(caml_string_notequal(_eS_, cst_head$2)){
                      if(! caml_string_notequal(_eS_, "hkern")) break c;
                      if(caml_string_notequal(_eS_, cst_html$9)) break a;
                      return k(-188437701);
                     }
                    }
                   }
                   else{
                    var _e3_ = caml_string_compare(_eS_, cst_colgroup$2);
                    if(0 <= _e3_){
                     if(0 >= _e3_) break d;
                     var _e4_ = caml_string_compare(_eS_, cst_fecomposite);
                     if(0 <= _e4_){
                      if(0 >= _e4_) break c;
                      if(! caml_string_notequal(_eS_, cst_fediffuselighting))
                       break c;
                      if(! caml_string_notequal(_eS_, cst_fedisplacementmap))
                       break c;
                      if(! caml_string_notequal(_eS_, cst_fedistantlight))
                       break c;
                      if(! caml_string_notequal(_eS_, cst_feflood)) break c;
                      if(! caml_string_notequal(_eS_, cst_fefunca)) break c;
                      if(! caml_string_notequal(_eS_, cst_fefuncb)) break c;
                      if(caml_string_notequal(_eS_, cst_fefuncg)) break a;
                      break c;
                     }
                     if(! caml_string_notequal(_eS_, "color-profile")) break c;
                     if(! caml_string_notequal(_eS_, "cursor")) break c;
                     if(! caml_string_notequal(_eS_, "defs")) break c;
                     if(! caml_string_notequal(_eS_, cst_desc)) break c;
                     if(! caml_string_notequal(_eS_, "ellipse")) break c;
                     if(! caml_string_notequal(_eS_, cst_feblend)) break c;
                     if(! caml_string_notequal(_eS_, cst_fecolormatrix)) break c;
                     if(caml_string_notequal(_eS_, cst_fecomponenttransfer))
                      break a;
                     break c;
                    }
                    var _e5_ = caml_string_compare(_eS_, cst_annotation_xml);
                    if(0 > _e5_){
                     if(! caml_string_notequal(_eS_, cst_altglyph)) break c;
                     if(! caml_string_notequal(_eS_, cst_altglyphdef)) break c;
                     if(! caml_string_notequal(_eS_, cst_altglyphitem)) break c;
                     if(! caml_string_notequal(_eS_, "animate")) break c;
                     if(! caml_string_notequal(_eS_, cst_animatecolor)) break c;
                     if(! caml_string_notequal(_eS_, cst_animatemotion)) break c;
                     if(! caml_string_notequal(_eS_, cst_animatetransform))
                      break c;
                     if(caml_string_notequal(_eS_, "annotation")) break a;
                     break b;
                    }
                    if(0 >= _e5_) break b;
                    if(! caml_string_notequal(_eS_, cst_base)) break e;
                    if(! caml_string_notequal(_eS_, cst_basefont)) break e;
                    if(! caml_string_notequal(_eS_, cst_bgsound)) break e;
                    if(caml_string_notequal(_eS_, cst_body$3)){
                     if(! caml_string_notequal(_eS_, cst_caption$7)) break d;
                     if(! caml_string_notequal(_eS_, "circle")) break c;
                     if(! caml_string_notequal(_eS_, cst_clippath)) break c;
                     if(caml_string_notequal(_eS_, cst_col)) break a;
                     break d;
                    }
                   }
                   return k(_q_);
                  }
                  if(0 >= _eT_) break c;
                  var _eU_ = caml_string_compare(_eS_, "mtable");
                  if(0 <= _eU_){
                   if(0 >= _eU_) break b;
                   var _eV_ = caml_string_compare(_eS_, "stop");
                   if(0 <= _eV_){
                    if(0 >= _eV_) break c;
                    var switch$0 = caml_string_compare(_eS_, cst_tfoot);
                    if(0 <= switch$0){
                     if(0 >= switch$0) break d;
                     if(caml_string_notequal(_eS_, cst_th)){
                      if(! caml_string_notequal(_eS_, cst_thead)) break d;
                      if(! caml_string_notequal(_eS_, cst_title)) break e;
                      if(! caml_string_notequal(_eS_, cst_tr$4)) return k(_j_);
                      if(! caml_string_notequal(_eS_, "tref")) break c;
                      if(! caml_string_notequal(_eS_, "tspan")) break c;
                      if(caml_string_notequal(_eS_, "use")) break a;
                      break c;
                     }
                    }
                    else{
                     if(! caml_string_notequal(_eS_, cst_style)) break e;
                     if(! caml_string_notequal(_eS_, "switch")) break c;
                     if(! caml_string_notequal(_eS_, "symbol")) break c;
                     if(! caml_string_notequal(_eS_, cst_tbody$0)) break d;
                     if(caml_string_notequal(_eS_, cst_td$0)){
                      if(! caml_string_notequal(_eS_, cst_template$7)) break e;
                      if(! caml_string_notequal(_eS_, "text")) break c;
                      if(caml_string_notequal(_eS_, cst_textpath)) break a;
                      break c;
                     }
                    }
                    return k(_m_);
                   }
                   var _eW_ = caml_string_compare(_eS_, "path");
                   if(0 <= _eW_){
                    if(0 >= _eW_) break c;
                    if(! caml_string_notequal(_eS_, "pattern")) break c;
                    if(! caml_string_notequal(_eS_, "polygon")) break c;
                    if(! caml_string_notequal(_eS_, "polyline")) break c;
                    if(! caml_string_notequal(_eS_, cst_radialgradient))
                     break c;
                    if(! caml_string_notequal(_eS_, "rect")) break c;
                    if(! caml_string_notequal(_eS_, "semantics")) break b;
                    if(caml_string_notequal(_eS_, "set")) break a;
                    break c;
                   }
                   if(! caml_string_notequal(_eS_, "mtd")) break b;
                   if(! caml_string_notequal(_eS_, cst_mtext)) break b;
                   if(! caml_string_notequal(_eS_, "mtr")) break b;
                   if(! caml_string_notequal(_eS_, "munder")) break b;
                   if(! caml_string_notequal(_eS_, "munderover")) break b;
                   if(caml_string_notequal(_eS_, cst_noframes)){
                    if
                     (caml_string_notequal(_eS_, cst_optgroup)
                      && caml_string_notequal(_eS_, cst_option))
                     break a;
                    return k(_o_);
                   }
                  }
                  else{
                   var _eX_ = caml_string_compare(_eS_, "mpath");
                   if(0 <= _eX_){
                    if(0 >= _eX_) break c;
                    var _eY_ = caml_string_compare(_eS_, "mspace");
                    if(0 <= _eY_){
                     if(0 >= _eY_) break b;
                     if(! caml_string_notequal(_eS_, "msqrt")) break b;
                     if(! caml_string_notequal(_eS_, "msrow")) break b;
                     if(! caml_string_notequal(_eS_, "mstack")) break b;
                     if(! caml_string_notequal(_eS_, "mstyle")) break b;
                     if(! caml_string_notequal(_eS_, "msub")) break b;
                     if(! caml_string_notequal(_eS_, "msubsup")) break b;
                     if(caml_string_notequal(_eS_, "msup")) break a;
                     break b;
                    }
                    if(! caml_string_notequal(_eS_, "mphantom")) break b;
                    if(! caml_string_notequal(_eS_, "mroot")) break b;
                    if(! caml_string_notequal(_eS_, "mrow")) break b;
                    if(! caml_string_notequal(_eS_, cst_ms)) break b;
                    if(! caml_string_notequal(_eS_, "mscarries")) break b;
                    if(! caml_string_notequal(_eS_, "mscarry")) break b;
                    if(! caml_string_notequal(_eS_, "msgroup")) break b;
                    if(caml_string_notequal(_eS_, "msline")) break a;
                    break b;
                   }
                   var _eZ_ = caml_string_compare(_eS_, cst_mi);
                   if(0 <= _eZ_){
                    if(0 >= _eZ_) break b;
                    if(! caml_string_notequal(_eS_, "missing-glyph")) break c;
                    if(! caml_string_notequal(_eS_, "mlabeledtr")) break b;
                    if(! caml_string_notequal(_eS_, "mlongdiv")) break b;
                    if(! caml_string_notequal(_eS_, "mmultiscripts")) break b;
                    if(! caml_string_notequal(_eS_, cst_mn)) break b;
                    if(! caml_string_notequal(_eS_, cst_mo)) break b;
                    if(! caml_string_notequal(_eS_, "mover")) break b;
                    if(caml_string_notequal(_eS_, "mpadded")) break a;
                    break b;
                   }
                   if(! caml_string_notequal(_eS_, "mask")) break c;
                   if(! caml_string_notequal(_eS_, "menclose")) break b;
                   if(! caml_string_notequal(_eS_, "merror")) break b;
                   if(caml_string_notequal(_eS_, cst_meta)){
                    if(! caml_string_notequal(_eS_, "metadata")) break c;
                    if(! caml_string_notequal(_eS_, "mfenced")) break b;
                    if(! caml_string_notequal(_eS_, "mfrac")) break b;
                    if(caml_string_notequal(_eS_, cst_mglyph)) break a;
                    break b;
                   }
                  }
                 }
                 return k(_k_);
                }
                return k(_l_);
               }
               return k(_i_);
              }
              return k(_n_);
             }
             return k(_h_);
            }
            function _eP_(token){
             var _eQ_ = token[2];
             a:
             if(typeof _eQ_ !== "number" && 389604418 === _eQ_[1]){
              var name = _eQ_[2][1];
              last_name[1] = [0, name];
              break a;
             }
             return k$0(token);
            }
            return caml_call3(Markup_Kstream[6], tokens$0, throw$1, _eP_);
           };
        return scan(0);
       }
       var c = requested_context[1];
       if(typeof c === "number") return k$0([0, c, 0]);
       var element = c[2];
       return k$0
               ([0, [0, 127343600, caml_call1(Stdlib_String[27], element)], 0]);
      });
    caml_update_dummy
     (reset_mode,
      function(param){
       var last = 0, param$0 = open_elements[1];
       for(;;){
        if(! param$0) return in_body_mode;
        var e = param$0[1];
        if(! param$0[2] && ! last && -188437701 !== the_context(context)){
         var match$0 = the_context(context);
         if(typeof match$0 === "number")
          throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
         var
          name = match$0[2],
          last = 1,
          param$0 =
            [0,
             [0, name, e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10]],
             0];
         continue;
        }
        var
         _eN_ = e[1][2],
         switch$0 = caml_string_compare(_eN_, cst_table$11);
        a:
        {
         if(0 <= switch$0){
          if(0 >= switch$0) return in_table_mode;
          b:
          if(caml_string_notequal(_eN_, cst_tbody$0)){
           if(! caml_string_notequal(_eN_, cst_template$7)){
            var match = template_insertion_modes[1];
            if(! match) return initial_mode;
            var mode = match[1];
            return mode;
           }
           if(caml_string_notequal(_eN_, cst_tfoot)){
            if(caml_string_notequal(_eN_, cst_th)){
             if(! caml_string_notequal(_eN_, cst_thead)) break b;
             if(caml_string_notequal(_eN_, cst_tr$4)) break a;
            }
            if(param$0[2]) return in_cell_mode;
            break a;
           }
          }
          return in_table_body_mode;
         }
         if(! caml_string_notequal(_eN_, cst_body$3)) return in_body_mode;
         if(! caml_string_notequal(_eN_, cst_caption$7))
          return in_caption_mode;
         if(! caml_string_notequal(_eN_, cst_colgroup$2))
          return in_column_group_mode;
         if(! caml_string_notequal(_eN_, cst_frameset$0))
          return in_frameset_mode;
         if(! caml_string_notequal(_eN_, cst_head$2)) return in_head_mode;
         if(! caml_string_notequal(_eN_, cst_html$9))
          return head_seen[1] ? after_head_mode : before_head_mode;
         if(! caml_string_notequal(_eN_, cst_select$10)) break;
        }
        if(! caml_string_notequal(_eN_, cst_tr$4)) return in_row_mode;
        var rest = param$0[2], param$0 = rest;
       }
       var ancestors = param$0[2], param$1 = ancestors;
       for(;;){
        if(! param$1) return in_select_mode;
        var _eO_ = param$1[1][1][2];
        if(! caml_string_notequal(_eO_, cst_table$11))
         return in_select_in_table_mode;
        if(! caml_string_notequal(_eO_, cst_template$7))
         return in_select_mode;
        var ancestors$0 = param$1[2], param$1 = ancestors$0;
       }
      });
    caml_update_dummy
     (emit,
      function(l, s$1, m){
       if(subtree_buffer[2]){
        if(typeof s$1 === "number"){
         subtree_buffer[3][8] = l;
         subtree_buffer[3] = require_current_element(subtree_buffer[1]);
        }
        else{
         var _eL_ = s$1[1];
         if(856096383 === _eL_){
          var
           attributes = s$1[2][2],
           parent = subtree_buffer[3],
           child = require_current_element(subtree_buffer[1]);
          child[7] = attributes;
          child[10] = parent;
          parent[9] = [0, [0, l, [0, child]], parent[9]];
          subtree_buffer[3] = child;
         }
         else
          if(4400567 <= _eL_){
           if(936573133 === _eL_){
            var ss = s$1[2];
            subtree_buffer[3][9] = [0, [0, l, [1, ss]], subtree_buffer[3][9]];
           }
          }
          else if(17913 <= _eL_){
           var match = s$1[2], s = match[2], t = match[1];
           subtree_buffer[3][9] = [0, [0, l, [2, t, s]], subtree_buffer[3][9]];
          }
          else{
           var s$0 = s$1[2];
           subtree_buffer[3][9] = [0, [0, l, [3, s$0]], subtree_buffer[3][9]];
          }
        }
        var _eM_ = 0;
       }
       else
        var _eM_ = 1;
       return _eM_
               ? (current_mode[1] = m, caml_call1(output[1], [0, l, s$1]))
               : caml_call1(m, 0);
      });
    caml_update_dummy
     (emit_list,
      function(ss, m){
       if(! ss) return caml_call1(m, 0);
       var more = ss[2], match = ss[1], s = match[2], l = match[1];
       return caml_call3
               (emit,
                l,
                s,
                function(param){return caml_call2(emit_list, more, m);});
      });
    caml_update_dummy
     (emit_text,
      function(m){
       var match = caml_call1(Markup_Text[7], text);
       if(! match) return caml_call1(m, 0);
       var match$0 = match[1], strings = match$0[2], l = match$0[1];
       return caml_call3(emit, l, [0, 936573133, strings], m);
      });
    caml_update_dummy
     (emit$0,
      function(l, s, m){
       return caml_call1
               (emit_text, function(param){return caml_call3(emit, l, s, m);});
      });
    caml_update_dummy
     (push_and_emit,
      function(opt, _es_, _er_, _eq_, location, tag){
       if(opt) var sth = opt[1], formatting = sth; else var formatting = 0;
       if(_es_)
        var sth$0 = _es_[1], acknowledge = sth$0;
       else
        var acknowledge = 0;
       if(_er_)
        var sth$1 = _er_[1], namespace = sth$1;
       else
        var namespace = 802643307;
       if(_eq_)
        var sth$2 = _eq_[1], set_form_element_pointer = sth$2;
       else
        var set_form_element_pointer = 0;
       var self_closing = tag[3], attributes = tag[2], name = tag[1];
       return function(mode){
        function _et_(param){
         var namespace_string = to_string(namespace);
         a:
         {
          if(typeof namespace === "number" && 4146756 === namespace){
           var switch$0 = caml_string_compare(name, cst_fefuncb);
           b:
           {
            if(0 <= switch$0){
             if(0 >= switch$0){var _eB_ = cst_feFuncB; break b;}
             var switch$1 = caml_string_compare(name, cst_fespecularlighting);
             if(0 <= switch$1){
              if(0 >= switch$1){var _eB_ = cst_feSpecularLighting; break b;}
              if(! caml_string_notequal(name, cst_fespotlight)){var _eB_ = cst_feSpotLight; break b;}
              if(! caml_string_notequal(name, cst_fetile)){var _eB_ = cst_feTile; break b;}
              if(! caml_string_notequal(name, cst_feturbulence)){var _eB_ = cst_feTurbulence; break b;}
              if(! caml_string_notequal(name, cst_foreignobject)){var _eB_ = cst_foreignObject; break b;}
              if(! caml_string_notequal(name, cst_glyphref)){var _eB_ = cst_glyphRef$0; break b;}
              if(! caml_string_notequal(name, cst_lineargradient)){var _eB_ = cst_linearGradient; break b;}
              if(! caml_string_notequal(name, cst_radialgradient)){var _eB_ = cst_radialGradient; break b;}
              if(! caml_string_notequal(name, cst_textpath)){var _eB_ = cst_textPath; break b;}
             }
             else{
              if(! caml_string_notequal(name, cst_fefuncg)){var _eB_ = cst_feFuncG; break b;}
              if(! caml_string_notequal(name, cst_fefuncr)){var _eB_ = cst_feFuncR; break b;}
              if(! caml_string_notequal(name, cst_fegaussianblur)){var _eB_ = cst_feGaussianBlur; break b;}
              if(! caml_string_notequal(name, cst_feimage)){var _eB_ = cst_feImage; break b;}
              if(! caml_string_notequal(name, cst_femerge)){var _eB_ = cst_feMerge; break b;}
              if(! caml_string_notequal(name, cst_femergenode)){var _eB_ = cst_feMergeNode; break b;}
              if(! caml_string_notequal(name, cst_femorphology)){var _eB_ = cst_feMorphology; break b;}
              if(! caml_string_notequal(name, cst_feoffset)){var _eB_ = cst_feOffset; break b;}
              if(! caml_string_notequal(name, cst_fepointlight)){var _eB_ = cst_fePointLight; break b;}
             }
            }
            else{
             var
              switch$2 = caml_string_compare(name, cst_fecomponenttransfer);
             if(0 <= switch$2){
              if(0 >= switch$2){var _eB_ = cst_feComponentTransfer; break b;}
              if(! caml_string_notequal(name, cst_fecomposite)){var _eB_ = cst_feComposite; break b;}
              if(! caml_string_notequal(name, "feconvolvematrix")){var _eB_ = cst_feConvolveMatrix; break b;}
              if(! caml_string_notequal(name, cst_fediffuselighting)){var _eB_ = cst_feDiffuseLighting; break b;}
              if(! caml_string_notequal(name, cst_fedisplacementmap)){var _eB_ = cst_feDisplacementMap; break b;}
              if(! caml_string_notequal(name, cst_fedistantlight)){var _eB_ = cst_feDistantLight; break b;}
              if(! caml_string_notequal(name, "fedropshadow")){var _eB_ = cst_feDropShadow; break b;}
              if(! caml_string_notequal(name, cst_feflood)){var _eB_ = cst_feFlood; break b;}
              if(! caml_string_notequal(name, cst_fefunca)){var _eB_ = cst_feFuncA; break b;}
             }
             else{
              if(! caml_string_notequal(name, cst_altglyph)){var _eB_ = cst_altGlyph; break b;}
              if(! caml_string_notequal(name, cst_altglyphdef)){var _eB_ = cst_altGlyphDef; break b;}
              if(! caml_string_notequal(name, cst_altglyphitem)){var _eB_ = cst_altGlyphItem; break b;}
              if(! caml_string_notequal(name, cst_animatecolor)){var _eB_ = cst_animateColor; break b;}
              if(! caml_string_notequal(name, cst_animatemotion)){var _eB_ = cst_animateMotion; break b;}
              if(! caml_string_notequal(name, cst_animatetransform)){var _eB_ = cst_animateTransform; break b;}
              if(! caml_string_notequal(name, cst_clippath)){var _eB_ = cst_clipPath; break b;}
              if(! caml_string_notequal(name, cst_feblend)){var _eB_ = cst_feBlend; break b;}
              if(! caml_string_notequal(name, cst_fecolormatrix)){var _eB_ = cst_feColorMatrix; break b;}
             }
            }
            var _eB_ = name;
           }
           var tag_name = _eB_;
           break a;
          }
          var tag_name = name;
         }
         a:
         {
          if(typeof namespace === "number"){
           if(4146756 === namespace){
            var
             is_html_integration_point =
               caml_call2(Markup_Common[37], tag_name, _y_);
            break a;
           }
           if(802643307 > namespace){
            var _ex_ = caml_string_equal(tag_name, cst_annotation_xml);
            if(_ex_){
             var
              _ey_ =
                function(param){
                 if(! caml_string_notequal(param[1], "encoding")){
                  var _eK_ = param[2];
                  if(! caml_string_notequal(_eK_, "application/xhtml+xml"))
                   return 1;
                  if(! caml_string_notequal(_eK_, "text/html")) return 1;
                 }
                 return 0;
                },
              is_html_integration_point =
                caml_call1(caml_call1(Stdlib_List[34], _ey_), attributes);
             break a;
            }
            var is_html_integration_point = _ex_;
            break a;
           }
          }
          var is_html_integration_point = 0;
         }
         function _eC_(param){
          var v = param[2], n = param[1];
          return [0, caml_call1(Markup_Namespace[1][5], n), v];
         }
         var attributes$0 = caml_call2(Stdlib_List[20], _eC_, attributes);
         a:
         {
          if(typeof namespace === "number"){
           if(4146756 === namespace){
            var
             _eA_ =
               function(param){
                var
                 value = param[2],
                 match = param[1],
                 name = match[2],
                 ns = match[1];
                if(caml_string_notequal(ns, Markup_Common[6]))
                 return [0, [0, ns, name], value];
                var switch$0 = caml_string_compare(name, "patterntransform");
                a:
                {
                 b:
                 {
                  if(0 <= switch$0)
                   if(0 < switch$0){
                    var switch$1 = caml_string_compare(name, "spreadmethod");
                    if(0 <= switch$1)
                     if(0 < switch$1){
                      var switch$2 = caml_string_compare(name, "targety");
                      if(0 <= switch$2)
                       if(0 < switch$2)
                        if(caml_string_notequal(name, "textlength"))
                         if(caml_string_notequal(name, "viewbox"))
                          if(caml_string_notequal(name, "viewtarget"))
                           if(caml_string_notequal(name, "xchannelselector"))
                            if(caml_string_notequal(name, "ychannelselector")){
                             if(caml_string_notequal(name, "zoomandpan")) break b;
                             var _eD_ = cst_zoomAndPan;
                            }
                            else
                             var _eD_ = cst_yChannelSelector;
                           else
                            var _eD_ = cst_xChannelSelector;
                          else
                           var _eD_ = cst_viewTarget;
                         else
                          var _eD_ = cst_viewBox;
                        else
                         var _eD_ = cst_textLength;
                       else
                        var _eD_ = cst_targetY;
                      else if(caml_string_notequal(name, "startoffset"))
                       if(caml_string_notequal(name, "stddeviation"))
                        if(caml_string_notequal(name, "stitchtiles"))
                         if(caml_string_notequal(name, "surfacescale"))
                          if(caml_string_notequal(name, "systemlanguage"))
                           if(caml_string_notequal(name, "tablevalues")){
                            if(caml_string_notequal(name, "targetx")) break b;
                            var _eD_ = cst_targetX;
                           }
                           else
                            var _eD_ = cst_tableValues;
                          else
                           var _eD_ = cst_systemLanguage;
                         else
                          var _eD_ = cst_surfaceScale;
                        else
                         var _eD_ = cst_stitchTiles;
                       else
                        var _eD_ = cst_stdDeviation;
                      else
                       var _eD_ = cst_startOffset;
                      var _eE_ = _eD_;
                     }
                     else
                      var _eE_ = cst_spreadMethod;
                    else{
                     var switch$3 = caml_string_compare(name, "refx");
                     if(0 <= switch$3)
                      if(0 < switch$3)
                       if(caml_string_notequal(name, "refy"))
                        if(caml_string_notequal(name, "repeatcount"))
                         if(caml_string_notequal(name, "repeatdur"))
                          if(caml_string_notequal(name, "requiredextensions"))
                           if(caml_string_notequal(name, "requiredfeatures"))
                            if(caml_string_notequal(name, "specularconstant")){
                             if(caml_string_notequal(name, "specularexponent")) break b;
                             var _eG_ = cst_specularExponent;
                            }
                            else
                             var _eG_ = cst_specularConstant;
                           else
                            var _eG_ = cst_requiredFeatures;
                          else
                           var _eG_ = cst_requiredExtensions;
                         else
                          var _eG_ = cst_repeatDur;
                        else
                         var _eG_ = cst_repeatCount;
                       else
                        var _eG_ = cst_refY;
                      else
                       var _eG_ = cst_refX;
                     else if(caml_string_notequal(name, "patternunits"))
                      if(caml_string_notequal(name, "pointsatx"))
                       if(caml_string_notequal(name, "pointsaty"))
                        if(caml_string_notequal(name, "pointsatz"))
                         if(caml_string_notequal(name, "preservealpha"))
                          if(caml_string_notequal(name, "preserveaspectratio")){
                           if(caml_string_notequal(name, "primitiveunits")) break b;
                           var _eG_ = cst_primitiveUnits;
                          }
                          else
                           var _eG_ = cst_preserveAspectRatio;
                         else
                          var _eG_ = cst_preserveAlpha;
                        else
                         var _eG_ = cst_pointsAtZ;
                       else
                        var _eG_ = cst_pointsAtY;
                      else
                       var _eG_ = cst_pointsAtX;
                     else
                      var _eG_ = cst_patternUnits;
                     var _eE_ = _eG_;
                    }
                    var _eF_ = _eE_;
                   }
                   else
                    var _eF_ = cst_patternTransform;
                  else{
                   var switch$4 = caml_string_compare(name, "gradientunits");
                   if(0 <= switch$4)
                    if(0 < switch$4){
                     var switch$5 = caml_string_compare(name, "markerheight");
                     if(0 <= switch$5)
                      if(0 < switch$5)
                       if(caml_string_notequal(name, "markerunits"))
                        if(caml_string_notequal(name, "markerwidth"))
                         if(caml_string_notequal(name, "maskcontentunits"))
                          if(caml_string_notequal(name, "maskunits"))
                           if(caml_string_notequal(name, "numoctaves"))
                            if(caml_string_notequal(name, "pathlength")){
                             if(caml_string_notequal(name, "patterncontentunits"))
                              break b;
                             var _eH_ = cst_patternContentUnits;
                            }
                            else
                             var _eH_ = cst_pathLength;
                           else
                            var _eH_ = cst_numOctaves;
                          else
                           var _eH_ = cst_maskUnits;
                         else
                          var _eH_ = cst_maskContentUnits;
                        else
                         var _eH_ = cst_markerWidth;
                       else
                        var _eH_ = cst_markerUnits;
                      else
                       var _eH_ = cst_markerHeight;
                     else if(caml_string_notequal(name, "kernelmatrix"))
                      if(caml_string_notequal(name, "kernelunitlength"))
                       if(caml_string_notequal(name, "keypoints"))
                        if(caml_string_notequal(name, "keysplines"))
                         if(caml_string_notequal(name, "keytimes"))
                          if(caml_string_notequal(name, "lengthadjust")){
                           if(caml_string_notequal(name, "limitingconeangle")) break b;
                           var _eH_ = cst_limitingConeAngle;
                          }
                          else
                           var _eH_ = cst_lengthAdjust;
                         else
                          var _eH_ = cst_keyTimes;
                        else
                         var _eH_ = cst_keySplines;
                       else
                        var _eH_ = cst_keyPoints;
                      else
                       var _eH_ = cst_kernelUnitLength;
                     else
                      var _eH_ = cst_kernelMatrix;
                     var _eI_ = _eH_;
                    }
                    else
                     var _eI_ = cst_gradientUnits;
                   else{
                    var
                     switch$6 = caml_string_compare(name, "contentstyletype");
                    if(0 <= switch$6)
                     if(0 < switch$6)
                      if(caml_string_notequal(name, "diffuseconstant"))
                       if(caml_string_notequal(name, "edgemode"))
                        if(caml_string_notequal(name, "externalresourcesrequired"))
                         if(caml_string_notequal(name, "filterres"))
                          if(caml_string_notequal(name, "filterunits"))
                           if(caml_string_notequal(name, cst_glyphref)){
                            if(caml_string_notequal(name, "gradienttransform")) break b;
                            var _eJ_ = cst_gradientTransform;
                           }
                           else
                            var _eJ_ = cst_glyphRef;
                          else
                           var _eJ_ = cst_filterUnits;
                         else
                          var _eJ_ = cst_filterRes;
                        else
                         var _eJ_ = cst_externalResourcesRequired;
                       else
                        var _eJ_ = cst_edgeMode;
                      else
                       var _eJ_ = cst_diffuseConstant;
                     else
                      var _eJ_ = cst_contentStyleType;
                    else if(caml_string_notequal(name, "attributename"))
                     if(caml_string_notequal(name, "attributetype"))
                      if(caml_string_notequal(name, "basefrequency"))
                       if(caml_string_notequal(name, "baseprofile"))
                        if(caml_string_notequal(name, "calcmode"))
                         if(caml_string_notequal(name, "clippathunits")){
                          if(caml_string_notequal(name, "contentscripttype")) break b;
                          var _eJ_ = cst_contentScriptType;
                         }
                         else
                          var _eJ_ = cst_clipPathUnits;
                        else
                         var _eJ_ = cst_calcMode;
                       else
                        var _eJ_ = cst_baseProfile;
                      else
                       var _eJ_ = cst_baseFrequency;
                     else
                      var _eJ_ = cst_attributeType;
                    else
                     var _eJ_ = cst_attributeName;
                    var _eI_ = _eJ_;
                   }
                   var _eF_ = _eI_;
                  }
                  var name$0 = _eF_;
                  break a;
                 }
                 var name$0 = name;
                }
                return [0, [0, ns, name$0], value];
               },
             attributes$1 =
               caml_call1(caml_call1(Stdlib_List[20], _eA_), attributes$0);
            break a;
           }
           if(802643307 > namespace){
            var
             _ez_ =
               function(param){
                var
                 value = param[2],
                 match = param[1],
                 name = match[2],
                 ns = match[1];
                a:
                {
                 if
                  (caml_string_equal(ns, Markup_Common[7])
                   && caml_string_equal(name, "definitionurl")){var name$0 = cst_definitionURL; break a;}
                 var name$0 = name;
                }
                return [0, [0, ns, name$0], value];
               },
             attributes$1 =
               caml_call1(caml_call1(Stdlib_List[20], _ez_), attributes$0);
            break a;
           }
          }
          var attributes$1 = attributes$0;
         }
         var
          element_entry =
            create
             ([0, is_html_integration_point],
              0,
              [0, namespace, name],
              location);
         open_elements[1] = [0, element_entry, open_elements[1]];
         if(set_form_element_pointer)
          form_element_pointer[1] = [0, element_entry];
         if(formatting)
          active_formatting_elements[1] =
           [0,
            [0, element_entry, location, tag],
            active_formatting_elements[1]];
         return caml_call3
                 (emit$0,
                  location,
                  [0,
                   856096383,
                   [0, [0, namespace_string, tag_name], attributes$1]],
                  mode);
        }
        var _eu_ = throw$0[1];
        function _ev_(param){return _L_;}
        var _ew_ = self_closing ? 1 - acknowledge : self_closing;
        return caml_call5(report_if, _ew_, location, _ev_, _eu_, _et_);};
      });
    caml_update_dummy
     (push_implicit,
      function(location, name, mode){
       return caml_call7
               (push_and_emit, 0, 0, 0, 0, location, [0, name, 0, 0], mode);
      });
    caml_update_dummy
     (pop$0,
      function(location, mode){
       var match = open_elements[1];
       if(! match) return caml_call1(mode, 0);
       var more = match[2], element = match[1];
       return caml_call1
               (emit_text,
                function(param){
                 function k(param){
                  open_elements[1] = more;
                  element[6] = 0;
                  return element[4]
                          ? caml_call1(mode, 0)
                          : caml_call3(emit, location, 38565624, mode);
                 }
                 if(! element[5]) return k(0);
                 function traverse(acc, param){
                  var match = param[2], l = param[1];
                  switch(match[0]){
                    case 0:
                     var
                      match$0 = match[1],
                      element_name = match$0[1],
                      attributes = match$0[7],
                      end_location = match$0[8],
                      children = match$0[9],
                      _ep_ = element_name[2],
                      name = [0, to_string(element_name[1]), _ep_],
                      start_signal = [0, l, [0, 856096383, [0, name, attributes]]],
                      end_signal = [0, end_location, 38565624];
                     return [0,
                             start_signal,
                             caml_call3
                              (Stdlib_List[26], traverse, [0, end_signal, acc], children)];
                    case 1:
                     var ss = match[1];
                     if(acc){
                      var match$1 = acc[1][2];
                      if(typeof match$1 !== "number" && 936573133 === match$1[1]){
                       var rest = acc[2], ss$0 = match$1[2];
                       return [0,
                               [0, l, [0, 936573133, caml_call2(Stdlib[37], ss, ss$0)]],
                               rest];
                      }
                     }
                     return [0, [0, l, [0, 936573133, ss]], acc];
                    case 2:
                     var s = match[2], t = match[1];
                     return [0, [0, l, [0, 17913, [0, t, s]]], acc];
                    default:
                     var s$0 = match[1];
                     return [0, [0, l, [0, -826170817, s$0]], acc];
                  }
                 }
                 var
                  _eo_ = require_current_element(subtree_buffer[1])[9],
                  result = caml_call3(Stdlib_List[26], traverse, 0, _eo_);
                 subtree_buffer[2] = 0;
                 return caml_call2(emit_list, result, k);
                });
      });
    caml_update_dummy
     (pop_until,
      function(condition, location, mode){
       function iterate(param){
        var match = open_elements[1];
        if(! match) return caml_call1(mode, 0);
        var element = match[1];
        return caml_call1(condition, element)
                ? caml_call1(mode, 0)
                : caml_call2(pop$0, location, iterate);
       }
       return iterate(0);
      });
    caml_update_dummy
     (close_element,
      function(opt, l, name, mode){
       if(opt) var sth = opt[1], ns = sth; else var ns = 802643307;
       function _el_(param){return caml_call2(pop$0, l, mode);}
       return caml_call3
               (pop_until,
                function(param){
                 var
                  match = param[1],
                  name$0 = match[2],
                  ns$0 = match[1],
                  _em_ = caml_equal(ns$0, ns),
                  _en_ = _em_ ? caml_string_equal(name$0, name) : _em_;
                 return _en_;
                },
                l,
                _el_);
      });
    caml_update_dummy
     (pop_until_and_raise_errors,
      function(names, location, mode){
       function iterate(param){
        var _ej_ = open_elements[1];
        if(! _ej_) return caml_call1(mode, 0);
        var match = _ej_[1][1], name = match[2], ns = match[1];
        if(802643307 === ns && caml_call2(Markup_Common[37], name, names))
         return caml_call2(pop$0, location, mode);
        function _ek_(param){return caml_call2(pop$0, location, iterate);}
        return caml_call4
                (report, location, [0, 551520201, name], throw$0[1], _ek_);
       }
       return iterate(0);
      });
    caml_update_dummy
     (pop_implied,
      function(opt, location, mode){
       if(opt) var sth = opt[1], except = sth; else var except = cst;
       return caml_call3
               (pop_until,
                function(param){
                 var
                  name = param[1][2],
                  _eh_ = caml_string_equal(name, except),
                  _ei_ = _eh_ || 1 - caml_call2(Markup_Common[37], name, _M_);
                 return _ei_;
                },
                location,
                mode);
      });
    caml_update_dummy
     (pop_to_table_context,
      function(location, mode){
       return caml_call3
               (pop_until,
                function(param){
                 var _ee_ = param[1], _ef_ = _ee_[1];
                 a:
                 if(typeof _ef_ === "number" && 802643307 === _ef_){
                  var _eg_ = _ee_[2];
                  if
                   (caml_string_notequal(_eg_, cst_html$9)
                    &&
                     caml_string_notequal(_eg_, cst_table$11)
                     && caml_string_notequal(_eg_, cst_template$7))
                   break a;
                  return 1;
                 }
                 return 0;
                },
                location,
                mode);
      });
    caml_update_dummy
     (pop_to_table_body_context,
      function(location, mode){
       return caml_call3
               (pop_until,
                function(param){
                 var _eb_ = param[1], _ec_ = _eb_[1];
                 a:
                 if(typeof _ec_ === "number" && 802643307 === _ec_){
                  var _ed_ = _eb_[2];
                  if
                   (caml_string_notequal(_ed_, cst_html$9)
                    &&
                     caml_string_notequal(_ed_, cst_tbody$0)
                     &&
                      caml_string_notequal(_ed_, cst_template$7)
                      &&
                       caml_string_notequal(_ed_, cst_tfoot)
                       && caml_string_notequal(_ed_, cst_thead))
                   break a;
                  return 1;
                 }
                 return 0;
                },
                location,
                mode);
      });
    caml_update_dummy
     (pop_to_table_row_context,
      function(location, mode){
       return caml_call3
               (pop_until,
                function(param){
                 var _d__ = param[1], _d$_ = _d__[1];
                 a:
                 if(typeof _d$_ === "number" && 802643307 === _d$_){
                  var _ea_ = _d__[2];
                  if
                   (caml_string_notequal(_ea_, cst_html$9)
                    &&
                     caml_string_notequal(_ea_, cst_template$7)
                     && caml_string_notequal(_ea_, cst_tr$4))
                   break a;
                  return 1;
                 }
                 return 0;
                },
                location,
                mode);
      });
    caml_update_dummy
     (close_element_with_implied,
      function(name, location, mode){
       return caml_call3
               (pop_implied,
                [0, name],
                location,
                function(param){
                 function k(param){
                  return caml_call4(close_element, 0, location, name, mode);
                 }
                 var match = current_element(open_elements);
                 if(! match) return unmatched_end_tag(location, name, k);
                 var _d7_ = match[1], _d8_ = _d7_[1], _d9_ = _d8_[1];
                 if(typeof _d9_ === "number" && 802643307 === _d9_){
                  var name$0 = _d8_[2];
                  if(caml_string_equal(name$0, name)) return k(0);
                 }
                 var location$0 = _d7_[2], name$1 = _d8_[2];
                 return caml_call4
                         (report, location$0, [0, 551520201, name$1], throw$0[1], k);
                });
      });
    caml_update_dummy
     (close_cell,
      function(location, mode){
       return caml_call3
               (pop_implied,
                0,
                location,
                function(param){
                 function mode$0(param){
                  function _d3_(param){
                   return caml_call2(pop$0, location, mode);
                  }
                  return caml_call3
                          (pop_until,
                           function(param){
                            var _d4_ = param[1], _d5_ = _d4_[1];
                            a:
                            if(typeof _d5_ === "number" && 802643307 === _d5_){
                             var _d6_ = _d4_[2];
                             if
                              (caml_string_notequal(_d6_, cst_td$0)
                               && caml_string_notequal(_d6_, cst_th))
                              break a;
                             return 1;
                            }
                            return 0;
                           },
                           location,
                           _d3_);
                 }
                 var match = current_element(open_elements);
                 if(! match)
                  return unmatched_end_tag(location, cst$0, mode$0);
                 var _d0_ = match[1][1], _d1_ = _d0_[1];
                 a:
                 if(typeof _d1_ === "number" && 802643307 === _d1_){
                  var _d2_ = _d0_[2];
                  if
                   (caml_string_notequal(_d2_, cst_td$0)
                    && caml_string_notequal(_d2_, cst_th))
                   break a;
                  return mode$0(0);
                 }
                 var name = _d0_[2];
                 return unmatched_end_tag(location, name, mode$0);
                });
      });
    caml_update_dummy
     (close_current_p_element,
      function(l, mode){
       return in_button_scope(open_elements, cst_p)
               ? caml_call3(close_element_with_implied, cst_p$0, l, mode)
               : caml_call1(mode, 0);
      });
    caml_update_dummy
     (close_preceding_tag,
      function(names, l, mode){
       var param = open_elements[1];
       for(;;){
        if(! param) return caml_call1(mode, 0);
        var
         name = param[1][1],
         name$0 = name[2],
         ns = name[1],
         more = param[2];
        if(802643307 === ns && caml_call2(Markup_Common[37], name$0, names))
         return caml_call3(close_element_with_implied, name$0, l, mode);
        if(is_special(name) && ! list_mem_qname(name, _N_))
         return caml_call1(mode, 0);
        var param = more;
       }
      });
    caml_update_dummy
     (emit_end,
      function(l){
       function _dZ_(param){
        return caml_call1
                (emit_text, function(param){return caml_call1(ended[1], 0);});
       }
       return caml_call3(pop_until, function(param){return 0;}, l, _dZ_);
      });
    caml_update_dummy
     (reconstruct_active_formatting_,
      function(mode){
       var l$1 = active_formatting_elements[1], to_reopen = 0, l = l$1;
       for(;;){
        if(l){
         var _dY_ = l[1];
         if(_dY_){
          if(! _dY_[1][6]){
           var
            more = l[2],
            tag = _dY_[3],
            l$0 = _dY_[2],
            prefix = [0, [0, l$0, tag], to_reopen],
            to_reopen = prefix,
            l = more;
           continue;
          }
          var match = [0, , l];
         }
         else
          var match = [0, , l];
        }
        else
         var match = [0, , 0];
        var remainder = match[2];
        active_formatting_elements[1] = remainder;
        if(to_reopen) enable(subtree_buffer);
        var
         reopen =
           function(param){
            if(! param) return caml_call1(mode, 0);
            var
             more = param[2],
             match = param[1],
             tag = match[2],
             l = match[1];
            return caml_call7
                    (push_and_emit,
                     _O_,
                     0,
                     0,
                     0,
                     l,
                     tag,
                     function(param){return reopen(more);});
           };
        return reopen(to_reopen);
       }
      });
    caml_update_dummy
     (dispatch,
      function(tokens, rules){
       function _dQ_(v){
        var
         t = v[2],
         match = adjusted_current_element(context, open_elements);
        a:
        if(match){
         var _dS_ = match[1], element_name = _dS_[1], _dT_ = element_name[1];
         b:
         {
          if(typeof _dT_ === "number" && 802643307 === _dT_){var _dU_ = 0; break b;}
          c:
          {
           d:
           {
            var _dW_ = _dS_[3];
            if(typeof t !== "number" && 389604418 === t[1]){
             var name = t[2][1];
             if
              (is_mathml_text_integration_poi(element_name)
               &&
                caml_string_notequal(name, cst_mglyph)
                && caml_string_notequal(name, cst_malignmark)){var _dX_ = 0; break d;}
             break c;
            }
            if(! _dW_) break c;
            if(typeof t === "number") break c;
            if(748194550 !== t[1]) break c;
            var _dX_ = 0;
           }
           var _dU_ = _dX_;
           break b;
          }
          if
           (typeof _dT_ === "number"
            &&
             -262866105 === _dT_
             &&
              !
              caml_string_notequal(element_name[2], cst_annotation_xml)
              &&
               typeof t !== "number"
               &&
                389604418 === t[1] && ! caml_string_notequal(t[2][1], cst_svg)){var _dU_ = 0; break b;}
          if(_dS_[3] && typeof t !== "number" && 389604418 === t[1]){var _dU_ = 0; break b;}
          if(typeof t === "number" && 3448988 === t){var foreign = 0; break a;}
          var foreign = 1;
          break a;
         }
         var foreign = _dU_;
        }
        else
         var foreign = 0;
        if(! foreign) return caml_call1(rules, v);
        function _dV_(param){return caml_call1(rules, v);}
        return caml_call3(foreign_content, current_mode[1], _dV_, v);
       }
       function _dR_(param){return caml_call1(ended[1], 0);}
       return caml_call4(Markup_Kstream[4], tokens, throw$0[1], _dR_, _dQ_);
      });
    caml_update_dummy
     (initial_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var match = v[2];
                 a:
                 if(typeof match !== "number"){
                  var _dO_ = match[1], l = v[1];
                  if(-826170817 === _dO_){
                   var s = match[2];
                   return caml_call3
                           (emit$0, l, [0, -826170817, s], initial_mode);
                  }
                  if(748194550 === _dO_){
                   var _dP_ = match[2] - 9 | 0;
                   if(4 < _dP_ >>> 0){
                    if(23 !== _dP_) break a;
                   }
                   else if(2 === _dP_) break a;
                   return caml_call1(initial_mode, 0);
                  }
                  if(990181650 === _dO_){
                   var d = match[2];
                   return caml_call3
                           (emit$0, l, [0, 990181650, d], before_html_mode);
                  }
                 }
                 caml_call2(Markup_Kstream[8], tokens, v);
                 return caml_call1(before_html_mode, 0);
                });
      });
    caml_update_dummy
     (before_html_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 a:
                 if(typeof match !== "number"){
                  var _dM_ = match[1];
                  if(389604418 <= _dM_){
                   if(748194550 === _dM_){
                    var _dN_ = match[2] - 9 | 0;
                    if(4 < _dN_ >>> 0){
                     if(23 !== _dN_) break a;
                    }
                    else if(2 === _dN_) break a;
                    return caml_call1(before_html_mode, 0);
                   }
                   if(990181650 === _dM_)
                    return caml_call4
                            (report, l, _P_, throw$0[1], before_html_mode);
                   if(389604419 > _dM_){
                    var t = match[2];
                    if(! caml_string_notequal(t[1], cst_html$9))
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, before_head_mode);
                   }
                  }
                  else{
                   if(-826170817 === _dM_){
                    var s = match[2];
                    return caml_call3
                            (emit$0, l, [0, -826170817, s], before_html_mode);
                   }
                   if(3455931 === _dM_){
                    var name = match[2][1];
                    if(! caml_call2(Markup_Common[37], name, _Q_))
                     return unmatched_end_tag(l, name, before_html_mode);
                   }
                  }
                 }
                 caml_call2(Markup_Kstream[8], tokens, v);
                 return caml_call3
                         (push_implicit, l, cst_html, before_head_mode);
                });
      });
    caml_update_dummy
     (before_head_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 a:
                 if(typeof match !== "number"){
                  var _dJ_ = match[1];
                  if(389604418 <= _dJ_){
                   if(748194550 === _dJ_){
                    var _dK_ = match[2] - 9 | 0;
                    if(4 < _dK_ >>> 0){
                     if(23 !== _dK_) break a;
                    }
                    else if(2 === _dK_) break a;
                    return caml_call1(before_head_mode, 0);
                   }
                   if(990181650 === _dJ_)
                    return caml_call4
                            (report, l, _R_, throw$0[1], before_head_mode);
                   if(389604419 > _dJ_){
                    var t = match[2], _dL_ = t[1];
                    if(! caml_string_notequal(_dL_, cst_head$2)){
                     head_seen[1] = 1;
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_head_mode);
                    }
                    if(! caml_string_notequal(_dL_, cst_html$9))
                     return caml_call3
                             (in_body_mode_rules, cst_html$0, before_head_mode, v);
                   }
                  }
                  else{
                   if(-826170817 === _dJ_){
                    var s = match[2];
                    return caml_call3
                            (emit$0, l, [0, -826170817, s], before_head_mode);
                   }
                   if(3455931 === _dJ_){
                    var name = match[2][1];
                    if(! caml_call2(Markup_Common[37], name, _S_))
                     return caml_call4
                             (report,
                              l,
                              [0, -622351166, name],
                              throw$0[1],
                              before_head_mode);
                   }
                  }
                 }
                 head_seen[1] = 1;
                 caml_call2(Markup_Kstream[8], tokens, v);
                 return caml_call3(push_implicit, l, cst_head, in_head_mode);
                });
      });
    caml_update_dummy
     (in_head_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 return caml_call2(in_head_mode_rules, in_head_mode, v);
                });
      });
    caml_update_dummy
     (in_head_mode_rules,
      function(mode, v){
       var l = v[1], match = v[2];
       a:
       if(typeof match !== "number"){
        var _dG_ = match[1];
        if(389604418 <= _dG_){
         if(748194550 === _dG_){
          var c = match[2], _dH_ = c - 9 | 0;
          if(4 < _dH_ >>> 0){
           if(23 !== _dH_) break a;
          }
          else if(2 === _dH_) break a;
          caml_call2(add_character, l, c);
          return caml_call1(mode, 0);
         }
         if(990181650 === _dG_)
          return caml_call4(report, l, _T_, throw$0[1], mode);
         if(389604419 > _dG_){
          var
           t = match[2],
           _dI_ = t[1],
           switch$0 = caml_string_compare(_dI_, cst_meta);
          if(0 <= switch$0){
           if(0 < switch$0){
            if(caml_string_notequal(_dI_, cst_noframes)){
             if(! caml_string_notequal(_dI_, cst_noscript$1))
              return caml_call7
                      (push_and_emit, 0, 0, 0, 0, l, t, in_head_noscript_mode);
             if(! caml_string_notequal(_dI_, cst_script))
              return caml_call7
                      (push_and_emit,
                       0,
                       0,
                       0,
                       0,
                       l,
                       t,
                       function(param){
                        caml_call1(set_tokenizer_state, 307819518);
                        return caml_call1(text_mode, mode);
                       });
             if(caml_string_notequal(_dI_, cst_style)){
              if(! caml_string_notequal(_dI_, cst_template$7)){
               add_marker(active_formatting_elements);
               frameset_ok[1] = 0;
               push(template_insertion_modes, in_template_mode);
               return caml_call7
                       (push_and_emit, 0, 0, 0, 0, l, t, in_template_mode);
              }
              if(caml_string_notequal(_dI_, cst_title)) break a;
              return caml_call7
                      (push_and_emit,
                       0,
                       0,
                       0,
                       0,
                       l,
                       t,
                       function(param){return caml_call1(parse_rcdata, mode);});
             }
            }
            return caml_call7
                    (push_and_emit,
                     0,
                     0,
                     0,
                     0,
                     l,
                     t,
                     function(param){return caml_call1(parse_rawtext, mode);});
           }
          }
          else if
           (caml_string_notequal(_dI_, cst_base)
            &&
             caml_string_notequal(_dI_, cst_basefont)
             && caml_string_notequal(_dI_, cst_bgsound)){
           if(! caml_string_notequal(_dI_, cst_head$2))
            return misnested_tag(l, t, cst_head$1, mode);
           if(! caml_string_notequal(_dI_, cst_html$9))
            return caml_call3(in_body_mode_rules, cst_head$0, in_head_mode, v);
           if(caml_string_notequal(_dI_, cst_link)) break a;
          }
          return caml_call7
                  (push_and_emit,
                   0,
                   _U_,
                   0,
                   0,
                   l,
                   t,
                   function(param){return caml_call2(pop$0, l, mode);});
         }
        }
        else{
         if(-826170817 === _dG_){
          var s = match[2];
          return caml_call3(emit$0, l, [0, -826170817, s], mode);
         }
         if(3455931 === _dG_){
          var name = match[2][1];
          if(! caml_string_notequal(name, cst_head$2))
           return caml_call2(pop$0, l, after_head_mode);
          if(! caml_string_notequal(name, cst_template$7))
           return has(open_elements, cst_template)
                   ? (clear_until_marker
                      (active_formatting_elements),
                     pop(template_insertion_modes),
                     caml_call3
                      (close_element_with_implied,
                       cst_template$0,
                       l,
                       function(param){return caml_call2(reset_mode, 0, 0);}))
                   : caml_call4(report, l, _W_, throw$0[1], mode);
          if(! caml_call2(Markup_Common[37], name, _V_))
           return caml_call4
                   (report, l, [0, -622351166, name], throw$0[1], mode);
         }
        }
       }
       caml_call2(Markup_Kstream[8], tokens, v);
       return caml_call2(pop$0, l, after_head_mode);
      });
    caml_update_dummy
     (in_head_noscript_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], _dB_ = v[2];
                 a:
                 if(typeof _dB_ !== "number"){
                  var _dD_ = _dB_[1];
                  if(389604418 <= _dD_)
                   if(748194550 === _dD_){
                    var _dE_ = _dB_[2] - 9 | 0;
                    if(4 < _dE_ >>> 0){
                     if(23 !== _dE_) break a;
                    }
                    else if(2 === _dE_) break a;
                   }
                   else{
                    if(990181650 === _dD_)
                     return caml_call4
                             (report, l, _Y_, throw$0[1], in_head_noscript_mode);
                    if(389604419 <= _dD_) break a;
                    var t = _dB_[2], _dF_ = t[1];
                    b:
                    if
                     (caml_string_notequal(_dF_, cst_basefont)
                      && caml_string_notequal(_dF_, cst_bgsound)){
                     if(caml_string_notequal(_dF_, cst_head$2)){
                      if(! caml_string_notequal(_dF_, cst_html$9))
                       return caml_call3
                               (in_body_mode_rules,
                                cst_noscript$0,
                                in_head_noscript_mode,
                                v);
                      if(! caml_string_notequal(_dF_, cst_link)) break b;
                      if(! caml_string_notequal(_dF_, cst_meta)) break b;
                      if(! caml_string_notequal(_dF_, cst_noframes)) break b;
                      if(caml_string_notequal(_dF_, cst_noscript$1)){
                       if(caml_string_notequal(_dF_, cst_style)) break a;
                       break b;
                      }
                     }
                     return misnested_tag
                             (l, t, cst_noscript, in_head_noscript_mode);
                    }
                   }
                  else if(-826170817 !== _dD_){
                   if(3455931 !== _dD_) break a;
                   var name = _dB_[2][1];
                   if(! caml_string_notequal(name, cst_noscript$1))
                    return caml_call2(pop$0, l, in_head_mode);
                   if(caml_string_notequal(name, cst_br))
                    return caml_call4
                            (report,
                             l,
                             [0, -622351166, name],
                             throw$0[1],
                             in_head_noscript_mode);
                   break a;
                  }
                  return caml_call2
                          (in_head_mode_rules, in_head_noscript_mode, v);
                 }
                 function _dC_(param){
                  caml_call2(Markup_Kstream[8], tokens, v);
                  return caml_call2(pop$0, l, in_head_mode);
                 }
                 return caml_call4(report, l, _X_, throw$0[1], _dC_);
                });
      });
    caml_update_dummy
     (after_head_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 a:
                 {
                  if(typeof match === "number"){
                   if
                    (!
                     caml_equal(the_context(context), _Z_)
                     && ! caml_equal(the_context(context), ___))
                    break a;
                   return caml_call1(emit_end, l);
                  }
                  var _dy_ = match[1];
                  if(3455931 !== _dy_){
                   if(748194550 <= _dy_){
                    if(990181650 <= _dy_)
                     return caml_call4
                             (report, l, _aa_, throw$0[1], after_head_mode);
                    var c = match[2], _dz_ = c - 9 | 0;
                    if(4 < _dz_ >>> 0){
                     if(23 !== _dz_) break a;
                    }
                    else if(2 === _dz_) break a;
                    caml_call2(add_character, l, c);
                    return caml_call1(after_head_mode, 0);
                   }
                   if(389604418 > _dy_){
                    var s = match[2];
                    return caml_call3
                            (emit$0, l, [0, -826170817, s], after_head_mode);
                   }
                   var
                    t = match[2],
                    _dA_ = t[1],
                    switch$0 = caml_string_compare(_dA_, cst_link);
                   if(0 <= switch$0){
                    if
                     (0 < switch$0
                      &&
                       caml_string_notequal(_dA_, cst_meta)
                       &&
                        caml_string_notequal(_dA_, cst_noframes)
                        &&
                         caml_string_notequal(_dA_, cst_script)
                         &&
                          caml_string_notequal(_dA_, cst_style)
                          &&
                           caml_string_notequal(_dA_, cst_template$7)
                           && caml_string_notequal(_dA_, cst_title))
                     break a;
                   }
                   else if
                    (caml_string_notequal(_dA_, cst_base)
                     &&
                      caml_string_notequal(_dA_, cst_basefont)
                      && caml_string_notequal(_dA_, cst_bgsound)){
                    if(! caml_string_notequal(_dA_, cst_body$3)){
                     frameset_ok[1] = 0;
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_body_mode);
                    }
                    if(! caml_string_notequal(_dA_, cst_frameset$0))
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_frameset_mode);
                    if(! caml_string_notequal(_dA_, cst_head$2))
                     return caml_call4
                             (report, l, _ab_, throw$0[1], after_head_mode);
                    if(caml_string_notequal(_dA_, cst_html$9)) break a;
                    return caml_call3
                            (in_body_mode_rules, cst_html$2, after_head_mode, v);
                   }
                   return misnested_tag
                           (l,
                            t,
                            cst_html$1,
                            function(param){
                             return caml_call2(in_head_mode_rules, after_head_mode, v);
                            });
                  }
                  var name = match[2][1];
                  if(! caml_string_notequal(name, cst_template$7))
                   return caml_call2(in_head_mode_rules, after_head_mode, v);
                  if(! caml_call2(Markup_Common[37], name, _$_))
                   return caml_call4
                           (report,
                            l,
                            [0, -622351166, name],
                            throw$0[1],
                            after_head_mode);
                 }
                 caml_call2(Markup_Kstream[8], tokens, v);
                 return caml_call3(push_implicit, l, cst_body, in_body_mode);
                });
      });
    caml_update_dummy
     (in_body_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 return caml_call3
                         (in_body_mode_rules, cst_body$0, in_body_mode, v);
                });
      });
    caml_update_dummy
     (in_body_mode_rules,
      function(context_name, mode, v){
       var match$1 = v[2], l = v[1];
       if(typeof match$1 === "number")
        return report_if_stack_has_other_than
                (_ac_,
                 function(param){
                  return template_insertion_modes[1]
                          ? caml_call2(in_template_mode_rules, mode, v)
                          : caml_call1(emit_end, l);
                 });
       var _c5_ = match$1[1];
       a:
       {
        if(3455931 === _c5_){
         var
          name$2 = match$1[2][1],
          _c6_ = caml_string_compare(name$2, cst_h2);
         b:
         {
          c:
          {
           d:
           {
            e:
            {
             f:
             {
              if(0 > _c6_){
               var _c9_ = caml_string_compare(name$2, cst_details);
               if(0 <= _c9_){
                if(0 >= _c9_) break d;
                var switch$2 = caml_string_compare(name$2, cst_fieldset);
                if(0 <= switch$2){
                 if(0 >= switch$2) break d;
                 if(! caml_string_notequal(name$2, cst_figcaption)) break d;
                 if(! caml_string_notequal(name$2, cst_figure)) break d;
                 if(! caml_string_notequal(name$2, cst_font)) break c;
                 if(! caml_string_notequal(name$2, cst_footer)) break d;
                 if(caml_string_notequal(name$2, cst_form$2)){
                  if(caml_string_notequal(name$2, cst_h1)) break b;
                  break f;
                 }
                 if(has(open_elements, cst_template$1))
                  return in_scope(open_elements, cst_form)
                          ? caml_call3
                            (close_element_with_implied, cst_form$0, l, mode)
                          : caml_call4(report, l, _aj_, throw$0[1], mode);
                 var form_element = form_element_pointer[1];
                 form_element_pointer[1] = 0;
                 if(form_element){
                  var element = form_element[1];
                  if(target_in_scope(open_elements, element))
                   return caml_call3
                           (pop_implied,
                            0,
                            l,
                            function(param){
                             var match = current_element(open_elements);
                             if(match){
                              var element$0 = match[1];
                              if(element$0 === element) return caml_call2(pop$0, l, mode);
                             }
                             function _dw_(param){
                              function _dx_(param){return caml_call2(pop$0, l, mode);}
                              return caml_call3
                                      (pop_until,
                                       function(element$0){return element$0 === element ? 1 : 0;},
                                       l,
                                       _dx_);
                             }
                             return caml_call4
                                     (report, element[2], _ak_, throw$0[1], _dw_);
                            });
                 }
                 return caml_call4(report, l, _al_, throw$0[1], mode);
                }
                if(! caml_string_notequal(name$2, cst_dialog)) break d;
                if(! caml_string_notequal(name$2, cst_dir)) break d;
                if(! caml_string_notequal(name$2, cst_div)) break d;
                if(! caml_string_notequal(name$2, cst_dl)) break d;
                if(caml_string_notequal(name$2, cst_dt)){
                 if(caml_string_notequal(name$2, cst_em)) break b;
                 break c;
                }
               }
               else{
                var switch$3 = caml_string_compare(name$2, cst_blockquote);
                if(0 > switch$3){
                 if(! caml_string_notequal(name$2, cst_a$1)) break c;
                 if(! caml_string_notequal(name$2, cst_address)) break d;
                 if(! caml_string_notequal(name$2, cst_applet)) break e;
                 if(! caml_string_notequal(name$2, cst_article)) break d;
                 if(! caml_string_notequal(name$2, cst_aside)) break d;
                 if(! caml_string_notequal(name$2, cst_b)) break c;
                 if(caml_string_notequal(name$2, cst_big)) break b;
                 break c;
                }
                if(0 >= switch$3) break d;
                if(! caml_string_notequal(name$2, cst_body$3))
                 return in_scope(open_elements, cst_body$2)
                         ? report_if_stack_has_other_than
                           (_ao_,
                            function(param){return caml_call1(after_body_mode, 0);})
                         : caml_call4(report, l, _ap_, throw$0[1], mode);
                if(! caml_string_notequal(name$2, cst_br)){
                 var
                  _c__ =
                    function(param){
                     return caml_call3
                             (in_body_mode_rules, context_name, mode, [0, l, _am_]);
                    };
                 return caml_call4(report, l, _an_, throw$0[1], _c__);
                }
                if(! caml_string_notequal(name$2, cst_button$2)) break d;
                if(! caml_string_notequal(name$2, cst_center)) break d;
                if(! caml_string_notequal(name$2, cst_code)) break c;
                if(caml_string_notequal(name$2, cst_dd)) break b;
               }
               return in_scope(open_elements, name$2)
                       ? caml_call3(close_element_with_implied, name$2, l, mode)
                       : caml_call4
                         (report, l, [0, -622351166, name$2], throw$0[1], mode);
              }
              if(0 < _c6_){
               var _c7_ = caml_string_compare(name$2, cst_object);
               if(0 <= _c7_){
                if(0 >= _c7_) break e;
                var switch$0 = caml_string_compare(name$2, cst_strike);
                if(0 <= switch$0){
                 if(0 >= switch$0) break c;
                 if(! caml_string_notequal(name$2, cst_strong)) break c;
                 if(! caml_string_notequal(name$2, cst_summary)) break d;
                 if(! caml_string_notequal(name$2, cst_template$7)) break a;
                 if(! caml_string_notequal(name$2, cst_tt)) break c;
                 if(! caml_string_notequal(name$2, cst_u)) break c;
                 if(caml_string_notequal(name$2, cst_ul)) break b;
                 break d;
                }
                if(! caml_string_notequal(name$2, cst_ol)) break d;
                if(caml_string_notequal(name$2, cst_p$4)){
                 if(! caml_string_notequal(name$2, cst_pre)) break d;
                 if(! caml_string_notequal(name$2, cst_s)) break c;
                 if(! caml_string_notequal(name$2, cst_section)) break d;
                 if(caml_string_notequal(name$2, cst_small)) break b;
                 break c;
                }
                var
                 mode$0 =
                   function(param){
                    return caml_call3
                            (close_element_with_implied, cst_p$1, l, mode);
                   };
                if(in_button_scope(open_elements, cst_p$2)) return mode$0(0);
                var
                 _c8_ =
                   function(param){
                    return caml_call3(push_implicit, l, cst_p$3, mode$0);
                   };
                return caml_call4(report, l, _ad_, throw$0[1], _c8_);
               }
               var switch$1 = caml_string_compare(name$2, cst_i);
               if(0 <= switch$1){
                if(0 >= switch$1) break c;
                if(! caml_string_notequal(name$2, cst_li$1))
                 return in_scope_general(_D_, open_elements, cst_li)
                         ? caml_call3(close_element_with_implied, cst_li$0, l, mode)
                         : caml_call4(report, l, _ae_, throw$0[1], mode);
                if(! caml_string_notequal(name$2, cst_listing)) break d;
                if(! caml_string_notequal(name$2, cst_main)) break d;
                if(! caml_string_notequal(name$2, cst_marquee)) break e;
                if(! caml_string_notequal(name$2, cst_nav)) break d;
                if(caml_string_notequal(name$2, cst_nobr$2)) break b;
                break c;
               }
               if
                (caml_string_notequal(name$2, cst_h3)
                 &&
                  caml_string_notequal(name$2, cst_h4)
                  &&
                   caml_string_notequal(name$2, cst_h5)
                   && caml_string_notequal(name$2, cst_h6)){
                if(! caml_string_notequal(name$2, cst_header)) break d;
                if(! caml_string_notequal(name$2, cst_hgroup)) break d;
                if(caml_string_notequal(name$2, cst_html$9)) break b;
                return in_scope(open_elements, cst_body$1)
                        ? report_if_stack_has_other_than
                          (_af_,
                           function(param){
                            caml_call2(Markup_Kstream[8], tokens, v);
                            return caml_call1(after_body_mode, 0);
                           })
                        : caml_call4(report, l, _ag_, throw$0[1], mode);
               }
              }
             }
             var param = open_elements[1];
             for(;;){
              f:
              if(param){
               var
                name$0 = param[1][1],
                name$1 = name$0[2],
                ns = name$0[1],
                more = param[2];
               if
                (802643307 === ns
                 && caml_call2(Markup_Common[37], name$1, names)){var _c4_ = 1; break f;}
               if(! list_mem_qname(name$0, scope_delimiters)){var param = more; continue;}
               var _c4_ = 0;
              }
              else
               var _c4_ = 0;
              return _c4_
                      ? caml_call3
                        (pop_implied,
                         0,
                         l,
                         function(param){
                          function next(param){
                           return caml_call3(pop_until_and_raise_errors, _ah_, l, mode);
                          }
                          var match = current_element(open_elements);
                          if(match){
                           var _du_ = match[1][1], _dv_ = _du_[1];
                           if(typeof _dv_ === "number" && 802643307 === _dv_){
                            var name = _du_[2];
                            if(caml_call2(Markup_Common[37], name, _ai_))
                             return next(0);
                           }
                          }
                          return caml_call4
                                  (report, l, [0, -622351166, name$2], throw$0[1], next);
                         })
                      : caml_call4
                        (report, l, [0, -622351166, name$2], throw$0[1], mode);
             }
            }
            return in_scope(open_elements, name$2)
                    ? (clear_until_marker
                       (active_formatting_elements),
                      caml_call3(close_element_with_implied, name$2, l, mode))
                    : caml_call4
                      (report, l, [0, -622351166, name$2], throw$0[1], mode);
           }
           return in_scope(open_elements, name$2)
                   ? caml_call3(close_element_with_implied, name$2, l, mode)
                   : caml_call4
                     (report, l, [0, -622351166, name$2], throw$0[1], mode);
          }
          return caml_call3(adoption_agency_algorithm, l, name$2, mode);
         }
         return caml_call3(any_other_end_tag_in_body, l, name$2, mode);
        }
        if(748194550 <= _c5_){
         if(990181650 <= _c5_)
          return caml_call4(report, l, _aq_, throw$0[1], mode);
         var c = match$1[2];
         b:
         {
          if(13 < c >>> 0){
           if(32 === c) break b;
          }
          else{
           if(12 <= c) break b;
           switch(c){
             case 0:
              return caml_call4(report, l, _ar_, throw$0[1], mode);
             case 9:
             case 10:
              break b;
           }
          }
          frameset_ok[1] = 0;
          return caml_call1
                  (reconstruct_active_formatting_,
                   function(param){
                    caml_call2(add_character, l, c);
                    return caml_call1(mode, 0);
                   });
         }
         return caml_call1
                 (reconstruct_active_formatting_,
                  function(param){
                   caml_call2(add_character, l, c);
                   return caml_call1(mode, 0);
                  });
        }
        if(389604418 > _c5_){
         var s = match$1[2];
         return caml_call3(emit$0, l, [0, -826170817, s], mode);
        }
        var
         t = match$1[2],
         _c$_ = t[1],
         switch$4 = caml_string_compare(_c$_, cst_input);
        b:
        {
         c:
         {
          d:
          {
           e:
           {
            f:
            {
             g:
             {
              h:
              {
               if(0 <= switch$4){
                if(0 >= switch$4){
                 if(is_not_hidden(t)) frameset_ok[1] = 0;
                 return caml_call1
                         (reconstruct_active_formatting_,
                          function(param){
                           return caml_call7
                                   (push_and_emit,
                                    0,
                                    _aF_,
                                    0,
                                    0,
                                    l,
                                    t,
                                    function(param){return caml_call2(pop$0, l, mode);});
                          });
                }
                var _da_ = caml_string_compare(_c$_, cst_script);
                i:
                {
                 if(0 > _da_){
                  var _dc_ = caml_string_compare(_c$_, cst_object);
                  if(0 <= _dc_){
                   if(0 >= _dc_) break e;
                   var switch$7 = caml_string_compare(_c$_, cst_pre);
                   if(0 > switch$7){
                    if(! caml_string_notequal(_c$_, cst_ol)) break c;
                    if
                     (caml_string_notequal(_c$_, cst_optgroup)
                      && caml_string_notequal(_c$_, cst_option)){
                     if(! caml_string_notequal(_c$_, cst_p$4)) break c;
                     if(! caml_string_notequal(_c$_, cst_param)) break i;
                     if(caml_string_notequal(_c$_, cst_plaintext)) break b;
                     return caml_call2
                             (close_current_p_element,
                              l,
                              function(param){
                               caml_call1(set_tokenizer_state, -966327401);
                               return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                              });
                    }
                    var
                     mode$3 =
                       function(param){
                        return caml_call1
                                (reconstruct_active_formatting_,
                                 function(param){
                                  return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                                 });
                       };
                    return current_element_is(open_elements, _aA_)
                            ? caml_call2(pop$0, l, mode$3)
                            : mode$3(0);
                   }
                   if(0 < switch$7){
                    j:
                    if(caml_string_notequal(_c$_, cst_rb)){
                     if
                      (caml_string_notequal(_c$_, cst_rp)
                       && caml_string_notequal(_c$_, cst_rt)){
                      if(! caml_string_notequal(_c$_, cst_rtc)) break j;
                      if(caml_string_notequal(_c$_, cst_s)) break b;
                      break f;
                     }
                     var
                      mode$2 =
                        function(param){
                         return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                        },
                      finish$0 =
                        function(param){
                         return current_element_is(open_elements, _ay_)
                                 ? mode$2(0)
                                 : misnested_tag(l, t, context_name, mode$2);
                        };
                     return in_scope(open_elements, cst_ruby$0)
                             ? caml_call3(pop_implied, _az_, l, finish$0)
                             : finish$0(0);
                    }
                    var
                     mode$1 =
                       function(param){
                        return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                       },
                     finish =
                       function(param){
                        return current_element_is(open_elements, _ax_)
                                ? mode$1(0)
                                : misnested_tag(l, t, context_name, mode$1);
                       };
                    return in_scope(open_elements, cst_ruby)
                            ? caml_call3(pop_implied, 0, l, finish)
                            : finish(0);
                   }
                  }
                  else{
                   var switch$8 = caml_string_compare(_c$_, cst_math);
                   if(0 <= switch$8){
                    if(0 >= switch$8)
                     return caml_call1
                             (reconstruct_active_formatting_,
                              function(param){
                               return caml_call7
                                       (push_and_emit,
                                        0,
                                        _aD_,
                                        _aC_,
                                        0,
                                        l,
                                        t,
                                        function(param){
                                         return t[3]
                                                 ? caml_call2(pop$0, l, mode)
                                                 : caml_call1(mode, 0);
                                        });
                              });
                    if(! caml_string_notequal(_c$_, cst_meta)) break g;
                    if(! caml_string_notequal(_c$_, cst_nav)) break c;
                    if(! caml_string_notequal(_c$_, cst_nobr$2)){
                     enable(subtree_buffer);
                     return caml_call1
                             (reconstruct_active_formatting_,
                              function(param){
                               function k(param){
                                return caml_call7(push_and_emit, _aB_, 0, 0, 0, l, t, mode);
                               }
                               return in_scope(open_elements, cst_nobr)
                                       ? misnested_tag
                                         (l,
                                          t,
                                          cst_nobr$1,
                                          function(param){
                                           return caml_call3
                                                   (adoption_agency_algorithm,
                                                    l,
                                                    cst_nobr$0,
                                                    function(param){
                                                     return caml_call1(reconstruct_active_formatting_, k);
                                                    });
                                          })
                                       : k(0);
                              });
                    }
                    if(! caml_string_notequal(_c$_, cst_noembed))
                     return caml_call7
                             (push_and_emit,
                              0,
                              0,
                              0,
                              0,
                              l,
                              t,
                              function(param){return caml_call1(parse_rawtext, mode);});
                    if(caml_string_notequal(_c$_, cst_noframes)) break b;
                    break g;
                   }
                   if(! caml_string_notequal(_c$_, cst_keygen)) break d;
                   if(! caml_string_notequal(_c$_, cst_li$1)){
                    frameset_ok[1] = 0;
                    return caml_call3
                            (close_preceding_tag,
                             _aE_,
                             l,
                             function(param){
                              return caml_call2
                                      (close_current_p_element,
                                       l,
                                       function(param){
                                        return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                                       });
                             });
                   }
                   if(! caml_string_notequal(_c$_, cst_link)) break g;
                   if(caml_string_notequal(_c$_, cst_listing)){
                    if(! caml_string_notequal(_c$_, cst_main)) break c;
                    if(caml_string_notequal(_c$_, cst_marquee)) break b;
                    break e;
                   }
                  }
                  frameset_ok[1] = 0;
                  return caml_call2
                          (close_current_p_element,
                           l,
                           function(param){
                            return caml_call7
                                    (push_and_emit,
                                     0,
                                     0,
                                     0,
                                     0,
                                     l,
                                     t,
                                     function(param){
                                      function _ds_(v){
                                       var _dt_ = v[2];
                                       if
                                        (typeof _dt_ !== "number"
                                         && 748194550 === _dt_[1] && 10 === _dt_[2])
                                        return caml_call1(mode, 0);
                                       caml_call2(Markup_Kstream[8], tokens, v);
                                       return caml_call1(mode, 0);
                                      }
                                      return caml_call3
                                              (Markup_Kstream[6], tokens, throw$0[1], _ds_);
                                     });
                           });
                 }
                 if(0 >= _da_) break g;
                 var _db_ = caml_string_compare(_c$_, cst_template$7);
                 if(0 <= _db_){
                  if(0 >= _db_) break g;
                  var switch$5 = caml_string_compare(_c$_, cst_track);
                  if(0 > switch$5){
                   if(! caml_string_notequal(_c$_, cst_textarea)){
                    frameset_ok[1] = 0;
                    return caml_call7
                            (push_and_emit,
                             0,
                             0,
                             0,
                             0,
                             l,
                             t,
                             function(param){
                              caml_call1(set_tokenizer_state, 172003931);
                              function _dq_(v){
                               var _dr_ = v[2];
                               if
                                (typeof _dr_ !== "number"
                                 && 748194550 === _dr_[1] && 10 === _dr_[2])
                                return caml_call1(text_mode, mode);
                               caml_call2(Markup_Kstream[8], tokens, v);
                               return caml_call1(text_mode, mode);
                              }
                              return caml_call3
                                      (Markup_Kstream[6], tokens, throw$0[1], _dq_);
                             });
                   }
                   if(! caml_string_notequal(_c$_, cst_tfoot)) break h;
                   if(! caml_string_notequal(_c$_, cst_th)) break h;
                   if(! caml_string_notequal(_c$_, cst_thead)) break h;
                   if(! caml_string_notequal(_c$_, cst_title)) break g;
                   if(caml_string_notequal(_c$_, cst_tr$4)) break b;
                   break h;
                  }
                  if(0 < switch$5){
                   if(! caml_string_notequal(_c$_, cst_tt)) break f;
                   if(! caml_string_notequal(_c$_, cst_u)) break f;
                   if(! caml_string_notequal(_c$_, cst_ul)) break c;
                   if(! caml_string_notequal(_c$_, cst_wbr)) break d;
                   if(caml_string_notequal(_c$_, cst_xmp)) break b;
                   frameset_ok[1] = 0;
                   return caml_call2
                           (close_current_p_element,
                            l,
                            function(param){
                             return caml_call1
                                     (reconstruct_active_formatting_,
                                      function(param){return caml_call1(parse_rawtext, mode);});
                            });
                  }
                 }
                 else{
                  var switch$6 = caml_string_compare(_c$_, cst_style);
                  if(0 <= switch$6){
                   if(0 >= switch$6) break g;
                   if(! caml_string_notequal(_c$_, cst_summary)) break c;
                   if(! caml_string_notequal(_c$_, cst_svg))
                    return caml_call1
                            (reconstruct_active_formatting_,
                             function(param){
                              return caml_call7
                                      (push_and_emit,
                                       0,
                                       _aw_,
                                       _av_,
                                       0,
                                       l,
                                       t,
                                       function(param){
                                        return t[3]
                                                ? caml_call2(pop$0, l, mode)
                                                : caml_call1(mode, 0);
                                       });
                             });
                   if(! caml_string_notequal(_c$_, cst_table$11)){
                    frameset_ok[1] = 0;
                    return caml_call2
                            (close_current_p_element,
                             l,
                             function(param){
                              return caml_call7
                                      (push_and_emit, 0, 0, 0, 0, l, t, in_table_mode);
                             });
                   }
                   if(! caml_string_notequal(_c$_, cst_tbody$0)) break h;
                   if(caml_string_notequal(_c$_, cst_td$0)) break b;
                   break h;
                  }
                  if(! caml_string_notequal(_c$_, cst_section)) break c;
                  if(! caml_string_notequal(_c$_, cst_select$10)){
                   frameset_ok[1] = 0;
                   return caml_call3(select_in_body, l, t, in_select_mode);
                  }
                  if(! caml_string_notequal(_c$_, cst_small)) break f;
                  if(caml_string_notequal(_c$_, cst_source)){
                   if(! caml_string_notequal(_c$_, cst_strike)) break f;
                   if(caml_string_notequal(_c$_, cst_strong)) break b;
                   break f;
                  }
                 }
                }
                return caml_call7
                        (push_and_emit,
                         0,
                         _au_,
                         0,
                         0,
                         l,
                         t,
                         function(param){return caml_call2(pop$0, l, mode);});
               }
               var _dd_ = caml_string_compare(_c$_, cst_dt);
               if(0 <= _dd_){
                if(0 < _dd_){
                 var _de_ = caml_string_compare(_c$_, cst_h3);
                 if(0 <= _de_){
                  if(0 < _de_){
                   var switch$9 = caml_string_compare(_c$_, cst_hr);
                   if(0 <= switch$9){
                    if(0 >= switch$9){
                     frameset_ok[1] = 0;
                     return caml_call2
                             (close_current_p_element,
                              l,
                              function(param){
                               return caml_call7
                                       (push_and_emit,
                                        0,
                                        _aH_,
                                        0,
                                        0,
                                        l,
                                        t,
                                        function(param){return caml_call2(pop$0, l, mode);});
                              });
                    }
                    if(! caml_string_notequal(_c$_, cst_html$9))
                     return misnested_tag(l, t, context_name, mode);
                    if(! caml_string_notequal(_c$_, cst_i)) break f;
                    if(! caml_string_notequal(_c$_, cst_iframe)){
                     frameset_ok[1] = 0;
                     return caml_call7
                             (push_and_emit,
                              0,
                              0,
                              0,
                              0,
                              l,
                              t,
                              function(param){return caml_call1(parse_rawtext, mode);});
                    }
                    if(! caml_string_notequal(_c$_, cst_image)){
                     var
                      _df_ =
                        function(param){
                         caml_call2
                          (Markup_Kstream[8],
                           tokens,
                           [0, l, [0, 389604418, [0, cst_img, t[2], t[3]]]]);
                         return caml_call1(mode, 0);
                        };
                     return caml_call4(report, l, _aG_, throw$0[1], _df_);
                    }
                    if(caml_string_notequal(_c$_, cst_img$0)) break b;
                    break d;
                   }
                   if
                    (caml_string_notequal(_c$_, cst_h4)
                     &&
                      caml_string_notequal(_c$_, cst_h5)
                      && caml_string_notequal(_c$_, cst_h6)){
                    if(! caml_string_notequal(_c$_, cst_head$2)) break h;
                    if(! caml_string_notequal(_c$_, cst_header)) break c;
                    if(caml_string_notequal(_c$_, cst_hgroup)) break b;
                    break c;
                   }
                  }
                 }
                 else{
                  var switch$10 = caml_string_compare(_c$_, cst_footer);
                  if(0 > switch$10){
                   if(! caml_string_notequal(_c$_, cst_em)) break f;
                   if(! caml_string_notequal(_c$_, cst_embed)) break d;
                   if(! caml_string_notequal(_c$_, cst_fieldset)) break c;
                   if(! caml_string_notequal(_c$_, cst_figcaption)) break c;
                   if(! caml_string_notequal(_c$_, cst_figure)) break c;
                   if(caml_string_notequal(_c$_, cst_font)) break b;
                   break f;
                  }
                  if(0 >= switch$10) break c;
                  if(! caml_string_notequal(_c$_, cst_form$2)){
                   if
                    (0 !== form_element_pointer[1]
                     && ! has(open_elements, cst_template$3))
                    return misnested_tag(l, t, cst_form$1, mode);
                   return caml_call2
                           (close_current_p_element,
                            l,
                            function(param){
                             var in_template = has(open_elements, cst_template$2);
                             return caml_call7
                                     (push_and_emit, 0, 0, 0, [0, 1 - in_template], l, t, mode);
                            });
                  }
                  if(! caml_string_notequal(_c$_, cst_frame)) break h;
                  if(! caml_string_notequal(_c$_, cst_frameset$0))
                   return misnested_tag
                           (l,
                            t,
                            context_name,
                            function(param){
                             var _dj_ = open_elements[1];
                             if(_dj_ && ! _dj_[2]) return caml_call1(mode, 0);
                             var param$0 = open_elements[1];
                             for(;;){
                              a:
                              {
                               if(param$0){
                                var _dk_ = param$0[1][1], _dl_ = _dk_[1];
                                if
                                 (typeof _dl_ === "number"
                                  &&
                                   802643307 === _dl_
                                   && ! caml_string_notequal(_dk_[2], cst_body$3)){
                                 var _dm_ = param$0[2];
                                 if(_dm_ && ! _dm_[2]){var _dn_ = 1; break a;}
                                }
                                var more = param$0[2], param$0 = more;
                                continue;
                               }
                               var _dn_ = 0;
                              }
                              if(! _dn_) return caml_call1(mode, 0);
                              if(! frameset_ok[1]) return caml_call1(mode, 0);
                              var
                               _do_ =
                                 function(param){
                                  return caml_call7
                                          (push_and_emit, 0, 0, 0, 0, l, t, in_frameset_mode);
                                 };
                              return caml_call3
                                      (pop_until,
                                       function(param){
                                        var _dp_ = open_elements[1];
                                        if(_dp_ && ! _dp_[2]) return 1;
                                        return 0;
                                       },
                                       l,
                                       _do_);
                             }
                            });
                  if
                   (caml_string_notequal(_c$_, cst_h1)
                    && caml_string_notequal(_c$_, cst_h2))
                   break b;
                 }
                 return caml_call2
                         (close_current_p_element,
                          l,
                          function(param){
                           function mode$0(param){
                            return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                           }
                           var match = current_element(open_elements);
                           a:
                           if(match){
                            var _dh_ = match[1][1], _di_ = _dh_[1];
                            if(typeof _di_ === "number" && 802643307 === _di_){
                             var name = _dh_[2];
                             if
                              (caml_string_notequal(name, cst_h1)
                               &&
                                caml_string_notequal(name, cst_h2)
                                &&
                                 caml_string_notequal(name, cst_h3)
                                 &&
                                  caml_string_notequal(name, cst_h4)
                                  &&
                                   caml_string_notequal(name, cst_h5)
                                   && caml_string_notequal(name, cst_h6))
                              break a;
                             return misnested_tag
                                     (l,
                                      t,
                                      name,
                                      function(param){return caml_call2(pop$0, l, mode$0);});
                            }
                           }
                           return mode$0(0);
                          });
                }
               }
               else{
                var _dg_ = caml_string_compare(_c$_, cst_br);
                if(0 > _dg_){
                 var switch$12 = caml_string_compare(_c$_, cst_b);
                 if(0 <= switch$12){
                  if(0 >= switch$12) break f;
                  if(! caml_string_notequal(_c$_, cst_base)) break g;
                  if(! caml_string_notequal(_c$_, cst_basefont)) break g;
                  if(! caml_string_notequal(_c$_, cst_bgsound)) break g;
                  if(! caml_string_notequal(_c$_, cst_big)) break f;
                  if(! caml_string_notequal(_c$_, cst_blockquote)) break c;
                  if(caml_string_notequal(_c$_, cst_body$3)) break b;
                  return misnested_tag(l, t, context_name, mode);
                 }
                 if(caml_string_notequal(_c$_, cst_a$1)){
                  if(! caml_string_notequal(_c$_, cst_address)) break c;
                  if(! caml_string_notequal(_c$_, cst_applet)) break e;
                  if(! caml_string_notequal(_c$_, cst_area)) break d;
                  if(! caml_string_notequal(_c$_, cst_article)) break c;
                  if(caml_string_notequal(_c$_, cst_aside)) break b;
                  break c;
                 }
                 var
                  k =
                    function(param){
                     enable(subtree_buffer);
                     return caml_call1
                             (reconstruct_active_formatting_,
                              function(param){
                               return caml_call7(push_and_emit, _aJ_, 0, 0, 0, l, t, mode);
                              });
                    },
                  param$0 = active_formatting_elements[1];
                 for(;;){
                  i:
                  {
                   if(param$0){
                    var match = param$0[1];
                    if(match){
                     var n = match[1];
                     if(caml_equal(n[1], [0, 802643307, name])){var match$0 = [0, n]; break i;}
                     var more$0 = param$0[2], param$0 = more$0;
                     continue;
                    }
                   }
                   var match$0 = 0;
                  }
                  if(! match$0) return k(0);
                  var existing = match$0[1];
                  return misnested_tag
                          (l,
                           t,
                           cst_a$0,
                           function(param){
                            return caml_call3
                                    (adoption_agency_algorithm,
                                     l,
                                     cst_a,
                                     function(param){
                                      remove(open_elements, existing);
                                      remove$0(active_formatting_elements, existing);
                                      return k(0);
                                     });
                           });
                 }
                }
                if(0 >= _dg_) break d;
                var switch$11 = caml_string_compare(_c$_, cst_dd);
                if(0 > switch$11){
                 if(! caml_string_notequal(_c$_, cst_button$2)){
                  var
                   mode$4 =
                     function(param){
                      frameset_ok[1] = 0;
                      return caml_call1
                              (reconstruct_active_formatting_,
                               function(param){
                                return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                               });
                     };
                  return in_scope(open_elements, cst_button)
                          ? misnested_tag
                            (l,
                             t,
                             cst_button$1,
                             function(param){
                              return caml_call3
                                      (close_element_with_implied, cst_button$0, l, mode$4);
                             })
                          : mode$4(0);
                 }
                 if(! caml_string_notequal(_c$_, cst_caption$7)) break h;
                 if(! caml_string_notequal(_c$_, cst_center)) break c;
                 if(! caml_string_notequal(_c$_, cst_code)) break f;
                 if(! caml_string_notequal(_c$_, cst_col)) break h;
                 if(caml_string_notequal(_c$_, cst_colgroup$2)) break b;
                 break h;
                }
                if(0 < switch$11){
                 if(! caml_string_notequal(_c$_, cst_details)) break c;
                 if(! caml_string_notequal(_c$_, cst_dialog)) break c;
                 if(! caml_string_notequal(_c$_, cst_dir)) break c;
                 if(! caml_string_notequal(_c$_, cst_div)) break c;
                 if(caml_string_notequal(_c$_, cst_dl)) break b;
                 break c;
                }
               }
               frameset_ok[1] = 0;
               return caml_call3
                       (close_preceding_tag,
                        _aI_,
                        l,
                        function(param){
                         return caml_call2
                                 (close_current_p_element,
                                  l,
                                  function(param){
                                   return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                                  });
                        });
              }
              return misnested_tag(l, t, context_name, mode);
             }
             break a;
            }
            enable(subtree_buffer);
            return caml_call1
                    (reconstruct_active_formatting_,
                     function(param){
                      return caml_call7(push_and_emit, _at_, 0, 0, 0, l, t, mode);
                     });
           }
           frameset_ok[1] = 0;
           return caml_call1
                   (reconstruct_active_formatting_,
                    function(param){
                     add_marker(active_formatting_elements);
                     return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                    });
          }
          frameset_ok[1] = 0;
          return caml_call1
                  (reconstruct_active_formatting_,
                   function(param){
                    return caml_call7
                            (push_and_emit,
                             0,
                             _as_,
                             0,
                             0,
                             l,
                             t,
                             function(param){return caml_call2(pop$0, l, mode);});
                   });
         }
         return caml_call2
                 (close_current_p_element,
                  l,
                  function(param){
                   return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                  });
        }
        return caml_call1
                (reconstruct_active_formatting_,
                 function(param){
                  return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
                 });
       }
       return caml_call2(in_head_mode_rules, mode, v);
      });
    caml_update_dummy
     (any_other_end_tag_in_body,
      function(l, name, mode){
       var param = open_elements[1];
       for(;;){
        if(! param) return caml_call1(mode, 0);
        var
         name$0 = param[1][1],
         name$1 = name$0[2],
         ns = name$0[1],
         rest = param[2];
        if(802643307 === ns && caml_string_equal(name$1, name))
         return caml_call3
                 (pop_implied,
                  [0, name],
                  l,
                  function(param){return caml_call2(pop$0, l, mode);});
        if(is_special(name$0))
         return caml_call4(report, l, [0, -622351166, name], throw$0[1], mode);
        var param = rest;
       }
      });
    caml_update_dummy
     (adoption_agency_algorithm,
      function(l, subject, mode){
       enable(subtree_buffer);
       return caml_call1
               (emit_text,
                function(param){
                 var
                  open_elements = subtree_buffer[1],
                  above_removed_nodes = [0, 0];
                 function above_in_stack(node, param){
                  var param$0 = param;
                  for(;;){
                   if(! param$0)
                    return caml_call1(Stdlib[2], cst_above_in_stack_not_found);
                   var e = param$0[1], match = param$0[2];
                   if(match){var e$0 = match[1]; if(e === node) return e$0;}
                   var more = param$0[2], param$0 = more;
                  }
                 }
                 function reparent(node, new_parent){
                  var
                   old_parent = node[10],
                   prefix = 0,
                   param = old_parent[9];
                  for(;;){
                   a:
                   {
                    if(param){
                     var entry = param[1], match = entry[2];
                     if(0 === match[0]){
                      var rest = param[2], e = match[1];
                      if(e === node){
                       var
                        _c3_ = caml_call1(Stdlib_List[10], prefix),
                        match$0 = [0, entry, caml_call2(Stdlib[37], _c3_, rest)];
                       break a;
                      }
                     }
                     var
                      rest$0 = param[2],
                      prefix$0 = [0, entry, prefix],
                      prefix = prefix$0,
                      param = rest$0;
                     continue;
                    }
                    var match$0 = [0, [0, node[2], [0, node]], old_parent[9]];
                   }
                   var filtered_children = match$0[2], entry$0 = match$0[1];
                   old_parent[9] = filtered_children;
                   new_parent[9] = [0, entry$0, new_parent[9]];
                   node[10] = new_parent;
                   return;
                  }
                 }
                 function outer_loop(outer_loop_counter, errors){
                  var
                   outer_loop_counter$0 = outer_loop_counter,
                   errors$0 = errors;
                  for(;;){
                   var outer_loop_counter$1 = outer_loop_counter$0 + 1 | 0;
                   if(8 <= outer_loop_counter$1)
                    return [0, 1, caml_call1(Stdlib_List[10], errors$0)];
                   a:
                   {
                    b:
                    {
                     c:
                     {
                      var param$1 = active_formatting_elements[1];
                      for(;;){
                       if(! param$1) break;
                       var _cX_ = param$1[1];
                       if(! _cX_) break c;
                       var e$1 = _cX_[1], _cY_ = e$1[1], _cZ_ = _cY_[1];
                       if(typeof _cZ_ === "number" && 802643307 === _cZ_){
                        var n = _cY_[2];
                        if(caml_string_equal(n, subject)) break b;
                       }
                       var rest = param$1[2], param$1 = rest;
                      }
                      var match$0 = 0;
                      break a;
                     }
                     var match$0 = 0;
                     break a;
                    }
                    var match$0 = [0, e$1];
                   }
                   if(! match$0)
                    return [0, 0, caml_call1(Stdlib_List[10], errors$0)];
                   var formatting_element = match$0[1];
                   if(! formatting_element[6]){
                    remove$0(active_formatting_elements, formatting_element);
                    return [0,
                            1,
                            caml_call1
                             (Stdlib_List[10],
                              [0, [0, l, [0, -622351166, subject]], errors$0])];
                   }
                   if(! target_in_scope(open_elements, formatting_element))
                    return [0,
                            1,
                            caml_call1
                             (Stdlib_List[10],
                              [0, [0, l, [0, -622351166, subject]], errors$0])];
                   var
                    errors$1 =
                      require_current_element(open_elements)
                       === formatting_element
                       ? errors$0
                       : [0, [0, l, [0, -622351166, subject]], errors$0];
                   a:
                   b:
                   {
                    var furthest = 0, param$2 = open_elements[1];
                    for(;;){
                     if(! param$2) break;
                     var e$2 = param$2[1], more$3 = param$2[2];
                     if(e$2 === formatting_element) break b;
                     if(is_special(e$2[1]))
                      var
                       furthest$0 = [0, e$2],
                       furthest = furthest$0,
                       param$2 = more$3;
                     else
                      var more$4 = param$2[2], param$2 = more$4;
                    }
                    break a;
                   }
                   if(! furthest)
                    for(;;){
                     var match = open_elements[1];
                     if(match){
                      var more$5 = match[2], e$3 = match[1];
                      open_elements[1] = more$5;
                      e$3[6] = 0;
                      e$3[8] = l;
                      if(e$3 !== formatting_element) continue;
                     }
                     subtree_buffer[3] = require_current_element(open_elements);
                     remove$0(active_formatting_elements, formatting_element);
                     return [0, 1, caml_call1(Stdlib_List[10], errors$1)];
                    }
                   var furthest_block = furthest[1];
                   formatting_element[8] = l;
                   var
                    common_ancestor =
                      above_in_stack(formatting_element, open_elements[1]),
                    inner_loop_counter = 1,
                    node = furthest_block,
                    last_node = furthest_block,
                    bookmark = 0;
                   for(;;){
                    if(node[6])
                     var element = above_in_stack(node, open_elements[1]);
                    else
                     try{
                      var
                       _cT_ = above_removed_nodes[1],
                       _cU_ =
                         function(node){
                           return function(param){
                            var e = param[1];
                            return e === node ? 1 : 0;};
                          }
                          (node),
                       _cV_ = caml_call2(Stdlib_List[39], _cU_, _cT_)[2],
                       element = _cV_;
                     }
                     catch(_c2_){
                      var _cS_ = caml_wrap_exception(_c2_);
                      if(_cS_ !== Stdlib[8])
                       throw caml_maybe_attach_backtrace(_cS_, 0);
                      var
                       element = caml_call1(Stdlib[2], cst_above_node_not_found);
                     }
                    if(element === formatting_element) break;
                    if(3 < inner_loop_counter)
                     remove$0(active_formatting_elements, element);
                    var
                     _cO_ = active_formatting_elements[1],
                     _cP_ =
                       function(element){
                         return function(param){
                          if(param){var e = param[1]; if(e === element) return 1;}
                          return 0;};
                        }
                        (element);
                    if(caml_call1(caml_call1(Stdlib_List[34], _cP_), _cO_)){
                     var
                      last_node$0 =
                        [0,
                         element[1],
                         element[2],
                         element[3],
                         element[4],
                         element[5],
                         1,
                         element[7],
                         element[8],
                         0,
                         dummy];
                     element[8] = l;
                     var
                      _cK_ = open_elements[1],
                      _cL_ =
                        function(element, last_node){
                          return function(e){
                           return e === element ? (e[6] = 0, last_node) : e;};
                         }
                         (element, last_node$0);
                     open_elements[1] = caml_call2(Stdlib_List[20], _cL_, _cK_);
                     replace(active_formatting_elements, element, last_node$0);
                     reparent(last_node, last_node$0);
                     var
                      bookmark$0 =
                        last_node === furthest_block ? [0, last_node$0] : bookmark,
                      inner_loop_counter$0 = inner_loop_counter + 1 | 0,
                      inner_loop_counter = inner_loop_counter$0,
                      node = last_node$0,
                      last_node = last_node$0,
                      bookmark = bookmark$0;
                    }
                    else{
                     var _cW_ = above_removed_nodes[1];
                     above_removed_nodes[1] =
                      [0,
                       [0, element, above_in_stack(element, open_elements[1])],
                       _cW_];
                     remove(open_elements, element);
                     var
                      inner_loop_counter$1 = inner_loop_counter + 1 | 0,
                      inner_loop_counter = inner_loop_counter$1,
                      node = element;
                    }
                   }
                   reparent(last_node, common_ancestor);
                   var
                    new_node =
                      [0,
                       formatting_element[1],
                       formatting_element[2],
                       formatting_element[3],
                       formatting_element[4],
                       formatting_element[5],
                       1,
                       formatting_element[7],
                       formatting_element[8],
                       0,
                       dummy];
                   new_node[9] = furthest_block[9];
                   furthest_block[9] = 0;
                   var
                    _c0_ = new_node[9],
                    _c1_ =
                      function(new_node){
                        return function(param){
                         var match = param[2];
                         if(0 !== match[0]) return 0;
                         var child = match[1];
                         child[10] = new_node;
                         return 0;};
                       }
                       (new_node);
                   caml_call1(caml_call1(Stdlib_List[18], _c1_), _c0_);
                   reparent(new_node, furthest_block);
                   if(bookmark){
                    var anchor = bookmark[1];
                    remove$0(active_formatting_elements, formatting_element);
                    a:
                    {
                     b:
                     {
                      var prefix$1 = 0, param$0 = active_formatting_elements[1];
                      for(;;){
                       if(! param$0) break;
                       var v = param$0[1];
                       if(v){
                        var more$1 = param$0[2], t = v[3], l$0 = v[2], e$0 = v[1];
                        if(e$0 === anchor) break b;
                       }
                       var
                        more$2 = param$0[2],
                        prefix$2 = [0, v, prefix$1],
                        prefix$1 = prefix$2,
                        param$0 = more$2;
                      }
                      var _cR_ = caml_call1(Stdlib_List[10], prefix$1);
                      break a;
                     }
                     var
                      new_entry = [0, new_node, l$0, t],
                      _cQ_ = caml_call1(Stdlib_List[10], prefix$1),
                      _cR_ =
                        caml_call2(Stdlib[37], _cQ_, [0, v, [0, new_entry, more$1]]);
                    }
                    active_formatting_elements[1] = _cR_;
                   }
                   else
                    replace
                     (active_formatting_elements, formatting_element, new_node);
                   remove(open_elements, formatting_element);
                   a:
                   {
                    b:
                    {
                     var prefix = 0, param = open_elements[1];
                     for(;;){
                      if(! param) break;
                      var e = param[1], more = param[2];
                      if(e === furthest_block) break b;
                      var
                       more$0 = param[2],
                       prefix$0 = [0, e, prefix],
                       prefix = prefix$0,
                       param = more$0;
                     }
                     var _cN_ = caml_call1(Stdlib_List[10], prefix);
                     break a;
                    }
                    var
                     _cM_ = caml_call1(Stdlib_List[10], prefix),
                     _cN_ =
                       caml_call2(Stdlib[37], _cM_, [0, new_node, [0, e, more]]);
                   }
                   open_elements[1] = _cN_;
                   var
                    outer_loop_counter$0 = outer_loop_counter$1,
                    errors$0 = errors$1;
                  }
                 }
                 var
                  current_node = require_current_element(open_elements),
                  match =
                    caml_equal(current_node[1], [0, 802643307, subject])
                     ? (open_elements
                        [1]
                       = caml_call1(Stdlib_List[7], open_elements[1]),
                       current_node[6] = 0,
                       current_node[8] = l,
                       subtree_buffer[3] = require_current_element(open_elements),
                       remove$0(active_formatting_elements, current_node),
                       _G_)
                     : outer_loop(0, 0),
                  errors = match[2],
                  handled = match[1];
                 function report_all(errors, k){
                  if(! errors) return caml_call1(k, 0);
                  var
                   more = errors[2],
                   match = errors[1],
                   error = match[2],
                   l = match[1];
                  function _cJ_(param){return report_all(more, k);}
                  return caml_call4(report, l, error, throw$0[1], _cJ_);
                 }
                 return report_all
                         (errors,
                          function(param){
                           return handled
                                   ? caml_call1(mode, 0)
                                   : caml_call3(any_other_end_tag_in_body, l, subject, mode);
                          });
                });
      });
    caml_update_dummy
     (select_in_body,
      function(l, t, next_mode){
       frameset_ok[1] = 0;
       return caml_call1
               (reconstruct_active_formatting_,
                function(param){
                 return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, next_mode);
                });
      });
    caml_update_dummy
     (text_mode,
      function(original_mode){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var match = v[2], l = v[1];
                 if(typeof match === "number"){
                  if(3448988 === match){
                   var
                    _cH_ =
                      function(param){
                       caml_call2(Markup_Kstream[8], tokens, v);
                       return caml_call2(pop$0, l, original_mode);
                      };
                   return caml_call4(report, l, _aK_, throw$0[1], _cH_);
                  }
                 }
                 else{
                  var _cI_ = match[1];
                  if(3455931 === _cI_)
                   return caml_call2(pop$0, l, original_mode);
                  if(748194550 === _cI_){
                   var c = match[2];
                   caml_call2(add_character, l, c);
                   return caml_call1(text_mode, original_mode);
                  }
                 }
                 return caml_call1(text_mode, original_mode);
                });
      });
    caml_update_dummy
     (parse_rcdata,
      function(original_mode){
       caml_call1(set_tokenizer_state, 172003931);
       return caml_call1(text_mode, original_mode);
      });
    caml_update_dummy
     (parse_rawtext,
      function(original_mode){
       caml_call1(set_tokenizer_state, 514427509);
       return caml_call1(text_mode, original_mode);
      });
    caml_update_dummy
     (anything_else_in_table,
      function(mode, v){
       var l = v[1];
       function _cG_(param){
        return caml_call3(in_body_mode_rules, cst_table, mode, v);
       }
       return caml_call4(report, l, _aL_, throw$0[1], _cG_);
      });
    caml_update_dummy
     (in_table_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 return caml_call2(in_table_mode_rules, in_table_mode, v);
                });
      });
    caml_update_dummy
     (in_table_mode_rules,
      function(mode, v){
       var match = v[2], l = v[1];
       if(typeof match === "number")
        return caml_call3(in_body_mode_rules, cst_table$0, mode, v);
       var _cE_ = match[1];
       a:
       {
        b:
        {
         if(3455931 === _cE_){
          var
           name = match[2][1],
           switch$0 = caml_string_compare(name, cst_tbody$0);
          if(0 <= switch$0){
           if(0 < switch$0 && caml_string_notequal(name, cst_td$0)){
            if(! caml_string_notequal(name, cst_template$7)) break b;
            if
             (caml_string_notequal(name, cst_tfoot)
              &&
               caml_string_notequal(name, cst_th)
               &&
                caml_string_notequal(name, cst_thead)
                && caml_string_notequal(name, cst_tr$4))
             break a;
           }
          }
          else if
           (caml_string_notequal(name, cst_body$3)
            &&
             caml_string_notequal(name, cst_caption$7)
             &&
              caml_string_notequal(name, cst_col)
              &&
               caml_string_notequal(name, cst_colgroup$2)
               && caml_string_notequal(name, cst_html$9)){
           if(caml_string_notequal(name, cst_table$11)) break a;
           return in_table_scope(open_elements, cst_table$1)
                   ? caml_call4
                     (close_element,
                      0,
                      l,
                      cst_table$2,
                      function(param){return caml_call2(reset_mode, 0, 0);})
                   : caml_call4(report, l, _aM_, throw$0[1], mode);
          }
          return caml_call4
                  (report, l, [0, -622351166, name], throw$0[1], mode);
         }
         if(748194550 <= _cE_){
          if(990181650 <= _cE_)
           return caml_call4(report, l, _aN_, throw$0[1], mode);
          if(! current_element_is(open_elements, _aO_)) break a;
          caml_call2(Markup_Kstream[8], tokens, v);
          return caml_call3(in_table_text_mode, 1, 0, mode);
         }
         if(389604418 > _cE_){
          var s = match[2];
          return caml_call3(emit$0, l, [0, -826170817, s], mode);
         }
         var
          t = match[2],
          _cF_ = t[1],
          switch$1 = caml_string_compare(_cF_, cst_table$11);
         c:
         {
          if(0 <= switch$1){
           if(0 >= switch$1)
            return misnested_tag
                    (l,
                     t,
                     cst_table$5,
                     function(param){
                      return has(open_elements, cst_table$3)
                              ? (caml_call2
                                 (Markup_Kstream[8], tokens, v),
                                caml_call4
                                 (close_element,
                                  0,
                                  l,
                                  cst_table$4,
                                  function(param){return caml_call2(reset_mode, 0, 0);}))
                              : caml_call1(mode, 0);
                     });
           d:
           if(caml_string_notequal(_cF_, cst_tbody$0)){
            if(caml_string_notequal(_cF_, cst_td$0)){
             if(! caml_string_notequal(_cF_, cst_template$7)) break c;
             if(! caml_string_notequal(_cF_, cst_tfoot)) break d;
             if(caml_string_notequal(_cF_, cst_th)){
              if(! caml_string_notequal(_cF_, cst_thead)) break d;
              if(caml_string_notequal(_cF_, cst_tr$4)) break a;
             }
            }
            return caml_call2
                    (pop_to_table_context,
                     l,
                     function(param){
                      caml_call2(Markup_Kstream[8], tokens, v);
                      return caml_call3
                              (push_implicit, l, cst_tbody, in_table_body_mode);
                     });
           }
           return caml_call2
                   (pop_to_table_context,
                    l,
                    function(param){
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_table_body_mode);
                    });
          }
          if(! caml_string_notequal(_cF_, cst_caption$7))
           return caml_call2
                   (pop_to_table_context,
                    l,
                    function(param){
                     add_marker(active_formatting_elements);
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_caption_mode);
                    });
          if(! caml_string_notequal(_cF_, cst_col))
           return caml_call2
                   (pop_to_table_context,
                    l,
                    function(param){
                     caml_call2(Markup_Kstream[8], tokens, v);
                     return caml_call3
                             (push_implicit, l, cst_colgroup, in_column_group_mode);
                    });
          if(! caml_string_notequal(_cF_, cst_colgroup$2))
           return caml_call2
                   (pop_to_table_context,
                    l,
                    function(param){
                     return caml_call7
                             (push_and_emit, 0, 0, 0, 0, l, t, in_column_group_mode);
                    });
          if(! caml_string_notequal(_cF_, cst_form$2))
           return misnested_tag
                   (l,
                    t,
                    cst_table$7,
                    function(param){
                     return caml_call7
                             (push_and_emit,
                              0,
                              0,
                              0,
                              0,
                              l,
                              t,
                              function(param){return caml_call2(pop$0, l, mode);});
                    });
          if(! caml_string_notequal(_cF_, cst_input)){
           if(is_not_hidden(t))
            return misnested_tag
                    (l,
                     t,
                     cst_table$6,
                     function(param){
                      return caml_call7
                              (push_and_emit,
                               0,
                               _aP_,
                               0,
                               0,
                               l,
                               t,
                               function(param){return caml_call2(pop$0, l, mode);});
                     });
           break a;
          }
          if
           (caml_string_notequal(_cF_, cst_script)
            && caml_string_notequal(_cF_, cst_style))
           break a;
         }
        }
        return caml_call2(in_head_mode_rules, mode, v);
       }
       return caml_call2(anything_else_in_table, mode, v);
      });
    caml_update_dummy
     (in_table_text_mode,
      function(only_space, cs, mode){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _cz_ = v[2];
                 if(typeof _cz_ !== "number" && 748194550 === _cz_[1]){
                  var _cC_ = _cz_[2], l = v[1];
                  a:
                  {
                   if(13 < _cC_ >>> 0){
                    if(32 === _cC_) break a;
                   }
                   else{
                    if(12 <= _cC_) break a;
                    switch(_cC_){
                      case 0:
                       var
                        _cD_ =
                          function(param){
                           return caml_call3(in_table_text_mode, only_space, cs, mode);
                          };
                       return caml_call4(report, l, _aQ_, throw$0[1], _cD_);
                      case 9:
                      case 10:
                       break a;
                    }
                   }
                   return caml_call3(in_table_text_mode, 0, [0, v, cs], mode);
                  }
                  return caml_call3
                          (in_table_text_mode, only_space, [0, v, cs], mode);
                 }
                 caml_call2(Markup_Kstream[8], tokens, v);
                 if(only_space){
                  var
                   _cA_ = caml_call1(Stdlib_List[10], cs),
                   _cB_ =
                     function(param){
                      var match = param[2];
                      if(typeof match !== "number" && 748194550 === match[1]){
                       var c = match[2], l = param[1];
                       return caml_call2(add_character, l, c);
                      }
                      return 0;
                     };
                  caml_call1(caml_call1(Stdlib_List[18], _cB_), _cA_);
                  return caml_call1(mode, 0);
                 }
                 function reprocess(param){
                  if(! param) return caml_call1(mode, 0);
                  var more = param[2], v = param[1];
                  return caml_call2
                          (anything_else_in_table,
                           function(param){return reprocess(more);},
                           v);
                 }
                 return reprocess(caml_call1(Stdlib_List[10], cs));
                });
      });
    caml_update_dummy
     (in_caption_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _cv_ = v[2];
                 a:
                 if(typeof _cv_ !== "number"){
                  var _cw_ = _cv_[1], l = v[1];
                  if(3455931 === _cw_){
                   var
                    name = _cv_[2][1],
                    switch$0 = caml_string_compare(name, cst_tbody$0);
                   if(0 <= switch$0){
                    if
                     (0 < switch$0
                      &&
                       caml_string_notequal(name, cst_td$0)
                       &&
                        caml_string_notequal(name, cst_tfoot)
                        &&
                         caml_string_notequal(name, cst_th)
                         &&
                          caml_string_notequal(name, cst_thead)
                          && caml_string_notequal(name, cst_tr$4))
                     break a;
                   }
                   else if(caml_string_notequal(name, cst_body$3)){
                    if(! caml_string_notequal(name, cst_caption$7))
                     return in_table_scope(open_elements, cst_caption$2)
                             ? (clear_until_marker
                                (active_formatting_elements),
                               caml_call3
                                (close_element_with_implied,
                                 cst_caption$3,
                                 l,
                                 in_table_mode))
                             : caml_call4(report, l, _aS_, throw$0[1], in_caption_mode);
                    if
                     (caml_string_notequal(name, cst_col)
                      &&
                       caml_string_notequal(name, cst_colgroup$2)
                       && caml_string_notequal(name, cst_html$9)){
                     if(caml_string_notequal(name, cst_table$11)) break a;
                     var
                      _cx_ =
                        function(param){
                         return in_table_scope(open_elements, cst_caption$0)
                                 ? (clear_until_marker
                                    (active_formatting_elements),
                                   caml_call2(Markup_Kstream[8], tokens, v),
                                   caml_call4
                                    (close_element, 0, l, cst_caption$1, in_table_mode))
                                 : caml_call1(in_caption_mode, 0);
                        };
                     return caml_call4(report, l, _aR_, throw$0[1], _cx_);
                    }
                   }
                   return caml_call4
                           (report,
                            l,
                            [0, -622351166, name],
                            throw$0[1],
                            in_caption_mode);
                  }
                  if(389604418 === _cw_){
                   var
                    t = _cv_[2],
                    _cy_ = t[1],
                    switch$1 = caml_string_compare(_cy_, cst_td$0);
                   if(0 <= switch$1){
                    if
                     (0 < switch$1
                      &&
                       caml_string_notequal(_cy_, cst_tfoot)
                       &&
                        caml_string_notequal(_cy_, cst_th)
                        &&
                         caml_string_notequal(_cy_, cst_thead)
                         && caml_string_notequal(_cy_, cst_tr$4))
                     break a;
                   }
                   else if
                    (caml_string_notequal(_cy_, cst_caption$7)
                     &&
                      caml_string_notequal(_cy_, cst_col)
                      && caml_string_notequal(_cy_, cst_colgroup$2)){
                    if(! caml_string_notequal(_cy_, cst_select$10))
                     return caml_call3
                             (select_in_body, l, t, in_select_in_table_mode);
                    if(caml_string_notequal(_cy_, cst_tbody$0)) break a;
                   }
                   return misnested_tag
                           (l,
                            t,
                            cst_caption$6,
                            function(param){
                             return in_table_scope(open_elements, cst_caption$4)
                                     ? (clear_until_marker
                                        (active_formatting_elements),
                                       caml_call2(Markup_Kstream[8], tokens, v),
                                       caml_call4
                                        (close_element, 0, l, cst_caption$5, in_table_mode))
                                     : caml_call1(in_caption_mode, 0);
                            });
                  }
                 }
                 return caml_call3
                         (in_body_mode_rules, cst_caption, in_caption_mode, v);
                });
      });
    caml_update_dummy
     (in_column_group_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 if(typeof match === "number")
                  return caml_call3
                          (in_body_mode_rules,
                           cst_colgroup$0,
                           in_column_group_mode,
                           v);
                 var _cr_ = match[1];
                 a:
                 {
                  if(3455931 === _cr_){
                   var _cs_ = match[2][1];
                   if(! caml_string_notequal(_cs_, cst_col))
                    return caml_call4
                            (report, l, _aX_, throw$0[1], in_column_group_mode);
                   if(! caml_string_notequal(_cs_, cst_colgroup$2))
                    return current_element_is(open_elements, _aV_)
                            ? caml_call2(pop$0, l, in_table_mode)
                            : caml_call4
                              (report, l, _aW_, throw$0[1], in_column_group_mode);
                   if(caml_string_notequal(_cs_, cst_template$7)) break a;
                  }
                  else{
                   if(748194550 <= _cr_){
                    if(990181650 <= _cr_)
                     return caml_call4
                             (report, l, _aY_, throw$0[1], in_column_group_mode);
                    var c = match[2], _ct_ = c - 9 | 0;
                    if(4 < _ct_ >>> 0){
                     if(23 !== _ct_) break a;
                    }
                    else if(2 === _ct_) break a;
                    caml_call2(add_character, l, c);
                    return caml_call1(in_column_group_mode, 0);
                   }
                   if(389604418 > _cr_){
                    var s = match[2];
                    return caml_call3
                            (emit$0, l, [0, -826170817, s], in_column_group_mode);
                   }
                   var t = match[2], _cu_ = t[1];
                   if(! caml_string_notequal(_cu_, cst_col))
                    return caml_call7
                            (push_and_emit,
                             0,
                             _aZ_,
                             0,
                             0,
                             l,
                             t,
                             function(param){
                              return caml_call2(pop$0, l, in_column_group_mode);
                             });
                   if(! caml_string_notequal(_cu_, cst_html$9))
                    return caml_call3
                            (in_body_mode_rules,
                             cst_colgroup$1,
                             in_column_group_mode,
                             v);
                   if(caml_string_notequal(_cu_, cst_template$7)) break a;
                  }
                  return caml_call2
                          (in_head_mode_rules, in_column_group_mode, v);
                 }
                 return current_element_is(open_elements, _aT_)
                         ? (caml_call2
                            (Markup_Kstream[8], tokens, v),
                           caml_call2(pop$0, l, in_table_mode))
                         : caml_call4(report, l, _aU_, throw$0[1], in_table_mode);
                });
      });
    caml_update_dummy
     (in_table_body_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _co_ = v[2];
                 a:
                 if(typeof _co_ !== "number"){
                  var _cp_ = _co_[1], l = v[1];
                  if(3455931 === _cp_){
                   var
                    name = _co_[2][1],
                    switch$0 = caml_string_compare(name, cst_tbody$0);
                   b:
                   {
                    if(0 <= switch$0){
                     if(0 < switch$0){
                      if(! caml_string_notequal(name, cst_td$0)) break b;
                      if(caml_string_notequal(name, cst_tfoot)){
                       if(! caml_string_notequal(name, cst_th)) break b;
                       if(caml_string_notequal(name, cst_thead)){
                        if(caml_string_notequal(name, cst_tr$4)) break a;
                        break b;
                       }
                      }
                     }
                     return in_table_scope(open_elements, name)
                             ? caml_call2
                               (pop_to_table_body_context,
                                l,
                                function(param){return caml_call2(pop$0, l, in_table_mode);})
                             : caml_call4
                               (report,
                                l,
                                [0, -622351166, name],
                                throw$0[1],
                                in_table_body_mode);
                    }
                    if
                     (caml_string_notequal(name, cst_body$3)
                      &&
                       caml_string_notequal(name, cst_caption$7)
                       &&
                        caml_string_notequal(name, cst_col)
                        &&
                         caml_string_notequal(name, cst_colgroup$2)
                         && caml_string_notequal(name, cst_html$9)){
                     if(caml_string_notequal(name, cst_table$11)) break a;
                     return one_in_table_scope(open_elements, _a0_)
                             ? (caml_call2
                                (Markup_Kstream[8], tokens, v),
                               caml_call2
                                (pop_to_table_body_context,
                                 l,
                                 function(param){return caml_call2(pop$0, l, in_table_mode);}))
                             : caml_call4
                               (report,
                                l,
                                [0, -622351166, name],
                                throw$0[1],
                                in_table_body_mode);
                    }
                   }
                   return caml_call4
                           (report,
                            l,
                            [0, -622351166, name],
                            throw$0[1],
                            in_table_body_mode);
                  }
                  if(389604418 === _cp_){
                   var t = _co_[2], _cq_ = t[1];
                   b:
                   if
                    (caml_string_notequal(_cq_, cst_caption$7)
                     &&
                      caml_string_notequal(_cq_, cst_col)
                      &&
                       caml_string_notequal(_cq_, cst_colgroup$2)
                       && caml_string_notequal(_cq_, cst_tbody$0)){
                    if(caml_string_notequal(_cq_, cst_td$0)){
                     if(! caml_string_notequal(_cq_, cst_tfoot)) break b;
                     if(caml_string_notequal(_cq_, cst_th)){
                      if(! caml_string_notequal(_cq_, cst_thead)) break b;
                      if(caml_string_notequal(_cq_, cst_tr$4)) break a;
                      return caml_call2
                              (pop_to_table_body_context,
                               l,
                               function(param){
                                return caml_call7
                                        (push_and_emit, 0, 0, 0, 0, l, t, in_row_mode);
                               });
                     }
                    }
                    return misnested_tag
                            (l,
                             t,
                             cst_table$9,
                             function(param){
                              return caml_call2
                                      (pop_to_table_body_context,
                                       l,
                                       function(param){
                                        caml_call2(Markup_Kstream[8], tokens, v);
                                        return caml_call3(push_implicit, l, cst_tr, in_row_mode);
                                       });
                             });
                   }
                   return one_in_table_scope(open_elements, _a1_)
                           ? (caml_call2
                              (Markup_Kstream[8], tokens, v),
                             caml_call2
                              (pop_to_table_body_context,
                               l,
                               function(param){return caml_call2(pop$0, l, in_table_mode);}))
                           : misnested_tag(l, t, cst_table$8, in_table_body_mode);
                  }
                 }
                 return caml_call2(in_table_mode_rules, in_table_body_mode, v);
                });
      });
    caml_update_dummy
     (in_row_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _cl_ = v[2];
                 a:
                 if(typeof _cl_ !== "number"){
                  var _cm_ = _cl_[1], l = v[1];
                  b:
                  {
                   if(3455931 === _cm_){
                    var
                     name = _cl_[2][1],
                     switch$0 = caml_string_compare(name, cst_tbody$0);
                    c:
                    {
                     if(0 <= switch$0){
                      if(0 < switch$0){
                       if(! caml_string_notequal(name, cst_td$0)) break c;
                       if(caml_string_notequal(name, cst_tfoot)){
                        if(! caml_string_notequal(name, cst_th)) break c;
                        if(caml_string_notequal(name, cst_thead)){
                         if(caml_string_notequal(name, cst_tr$4)) break a;
                         return in_table_scope(open_elements, cst_tr$0)
                                 ? caml_call2
                                   (pop_to_table_row_context,
                                    l,
                                    function(param){
                                     return caml_call2(pop$0, l, in_table_body_mode);
                                    })
                                 : caml_call4(report, l, _a2_, throw$0[1], in_row_mode);
                        }
                       }
                      }
                      return in_table_scope(open_elements, name)
                              ? in_table_scope
                                 (open_elements, cst_tr$1)
                                ? caml_call2
                                  (pop_to_table_row_context,
                                   l,
                                   function(param){
                                    caml_call2(Markup_Kstream[8], tokens, v);
                                    return caml_call2(pop$0, l, in_table_body_mode);
                                   })
                                : caml_call1(in_row_mode, 0)
                              : caml_call4
                                (report, l, [0, -622351166, name], throw$0[1], in_row_mode);
                     }
                     if
                      (caml_string_notequal(name, cst_body$3)
                       &&
                        caml_string_notequal(name, cst_caption$7)
                        &&
                         caml_string_notequal(name, cst_col)
                         &&
                          caml_string_notequal(name, cst_colgroup$2)
                          && caml_string_notequal(name, cst_html$9)){
                      if(caml_string_notequal(name, cst_table$11)) break a;
                      break b;
                     }
                    }
                    return caml_call4
                            (report, l, [0, -622351166, name], throw$0[1], in_row_mode);
                   }
                   if(389604418 !== _cm_) break a;
                   var t$0 = _cl_[2], _cn_ = t$0[1];
                   c:
                   if
                    (caml_string_notequal(_cn_, cst_caption$7)
                     &&
                      caml_string_notequal(_cn_, cst_col)
                      &&
                       caml_string_notequal(_cn_, cst_colgroup$2)
                       && caml_string_notequal(_cn_, cst_tbody$0)){
                    if(caml_string_notequal(_cn_, cst_td$0)){
                     if(! caml_string_notequal(_cn_, cst_tfoot)) break c;
                     if(caml_string_notequal(_cn_, cst_th)){
                      if(! caml_string_notequal(_cn_, cst_thead)) break c;
                      if(caml_string_notequal(_cn_, cst_tr$4)) break a;
                      break c;
                     }
                    }
                    add_marker(active_formatting_elements);
                    return caml_call2
                            (pop_to_table_row_context,
                             l,
                             function(param){
                              return caml_call7
                                      (push_and_emit, 0, 0, 0, 0, l, t$0, in_cell_mode);
                             });
                   }
                  }
                  if(in_table_scope(open_elements, cst_tr$2))
                   return caml_call2
                           (pop_to_table_row_context,
                            l,
                            function(param){
                             caml_call2(Markup_Kstream[8], tokens, v);
                             return caml_call2(pop$0, l, in_table_body_mode);
                            });
                  var match = v[2];
                  if(389604418 <= match[1]){
                   var t = match[2];
                   return misnested_tag(l, t, cst_tr$3, in_row_mode);
                  }
                  var name$0 = match[2][1];
                  return caml_call4
                          (report,
                           l,
                           [0, -622351166, name$0],
                           throw$0[1],
                           in_row_mode);
                 }
                 return caml_call2(in_table_mode_rules, in_row_mode, v);
                });
      });
    caml_update_dummy
     (in_cell_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _ch_ = v[2];
                 a:
                 if(typeof _ch_ !== "number"){
                  var _ci_ = _ch_[1], l = v[1];
                  if(3455931 === _ci_){
                   var
                    name = _ch_[2][1],
                    _cj_ = caml_string_compare(name, cst_tbody$0);
                   b:
                   {
                    if(0 > _cj_){
                     if
                      (caml_string_notequal(name, cst_body$3)
                       &&
                        caml_string_notequal(name, cst_caption$7)
                        &&
                         caml_string_notequal(name, cst_col)
                         &&
                          caml_string_notequal(name, cst_colgroup$2)
                          && caml_string_notequal(name, cst_html$9)){
                      if(caml_string_notequal(name, cst_table$11)) break a;
                      break b;
                     }
                     return caml_call4
                             (report, l, [0, -622351166, name], throw$0[1], in_cell_mode);
                    }
                    if(0 < _cj_){
                     if(caml_string_notequal(name, cst_td$0)){
                      if(! caml_string_notequal(name, cst_tfoot)) break b;
                      if(caml_string_notequal(name, cst_th)){
                       if(! caml_string_notequal(name, cst_thead)) break b;
                       if(caml_string_notequal(name, cst_tr$4)) break a;
                       break b;
                      }
                     }
                     return in_table_scope(open_elements, name)
                             ? caml_call3
                               (close_element_with_implied,
                                name,
                                l,
                                function(param){
                                 clear_until_marker(active_formatting_elements);
                                 return caml_call1(in_row_mode, 0);
                                })
                             : caml_call4
                               (report, l, [0, -622351166, name], throw$0[1], in_cell_mode);
                    }
                   }
                   return in_table_scope(open_elements, name)
                           ? caml_call2
                             (close_cell,
                              l,
                              function(param){
                               clear_until_marker(active_formatting_elements);
                               caml_call2(Markup_Kstream[8], tokens, v);
                               return caml_call1(in_row_mode, 0);
                              })
                           : caml_call4
                             (report, l, [0, -622351166, name], throw$0[1], in_cell_mode);
                  }
                  if(389604418 === _ci_){
                   var
                    t = _ch_[2],
                    _ck_ = t[1],
                    switch$0 = caml_string_compare(_ck_, cst_td$0);
                   if(0 <= switch$0){
                    if
                     (0 < switch$0
                      &&
                       caml_string_notequal(_ck_, cst_tfoot)
                       &&
                        caml_string_notequal(_ck_, cst_th)
                        &&
                         caml_string_notequal(_ck_, cst_thead)
                         && caml_string_notequal(_ck_, cst_tr$4))
                     break a;
                   }
                   else if
                    (caml_string_notequal(_ck_, cst_caption$7)
                     &&
                      caml_string_notequal(_ck_, cst_col)
                      && caml_string_notequal(_ck_, cst_colgroup$2)){
                    if(! caml_string_notequal(_ck_, cst_select$10))
                     return caml_call3
                             (select_in_body, l, t, in_select_in_table_mode);
                    if(caml_string_notequal(_ck_, cst_tbody$0)) break a;
                   }
                   return one_in_table_scope(open_elements, _a3_)
                           ? caml_call2
                             (close_cell,
                              l,
                              function(param){
                               clear_until_marker(active_formatting_elements);
                               caml_call2(Markup_Kstream[8], tokens, v);
                               return caml_call1(in_row_mode, 0);
                              })
                           : misnested_tag(l, t, cst_td_th, in_cell_mode);
                  }
                 }
                 return caml_call3
                         (in_body_mode_rules, cst_td, in_cell_mode, v);
                });
      });
    caml_update_dummy
     (in_select_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 return caml_call2(in_select_mode_rules, in_select_mode, v);
                });
      });
    caml_update_dummy
     (in_select_mode_rules,
      function(mode, v){
       var l = v[1], match = v[2];
       if(typeof match === "number")
        return caml_call3(in_body_mode_rules, cst_select, mode, v);
       var _b9_ = match[1];
       a:
       {
        b:
        {
         if(3455931 !== _b9_){
          if(748194550 <= _b9_){
           if(990181650 <= _b9_)
            return caml_call4(report, l, _a__, throw$0[1], mode);
           var c = match[2];
           return 0 === c
                   ? caml_call4(report, l, _a$_, throw$0[1], mode)
                   : (caml_call2(add_character, l, c), caml_call1(mode, 0));
          }
          if(389604418 > _b9_){
           var s = match[2];
           return caml_call3(emit$0, l, [0, -826170817, s], mode);
          }
          var t = match[2], _cf_ = t[1];
          if(! caml_string_notequal(_cf_, cst_html$9))
           return caml_call3(in_body_mode_rules, cst_select$7, mode, v);
          c:
          if
           (caml_string_notequal(_cf_, cst_input)
            && caml_string_notequal(_cf_, cst_keygen)){
           if(! caml_string_notequal(_cf_, cst_optgroup)){
            var
             mode$2 =
               function(param){
                return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
               },
             mode$3 =
               function(_cg_){
                return current_element_is(open_elements, _bb_)
                        ? caml_call2(pop$0, l, mode$2)
                        : mode$2(0);
               };
            return current_element_is(open_elements, _bc_)
                    ? caml_call2(pop$0, l, mode$3)
                    : mode$3(0);
           }
           if(! caml_string_notequal(_cf_, cst_option)){
            var
             mode$1 =
               function(param){
                return caml_call7(push_and_emit, 0, 0, 0, 0, l, t, mode);
               };
            return current_element_is(open_elements, _ba_)
                    ? caml_call2(pop$0, l, mode$1)
                    : mode$1(0);
           }
           if(caml_string_notequal(_cf_, cst_script)){
            if(! caml_string_notequal(_cf_, cst_select$10))
             return misnested_tag
                     (l,
                      t,
                      cst_select$6,
                      function(param){
                       return caml_call4
                               (close_element,
                                0,
                                l,
                                cst_select$5,
                                function(param){return caml_call2(reset_mode, 0, 0);});
                      });
            if(caml_string_notequal(_cf_, cst_template$7)){
             if(caml_string_notequal(_cf_, cst_textarea)) break a;
             break c;
            }
           }
           break b;
          }
          return misnested_tag
                  (l,
                   t,
                   cst_select$4,
                   function(param){
                    return in_select_scope(open_elements, cst_select$2)
                            ? (caml_call2
                               (Markup_Kstream[8], tokens, v),
                              caml_call4
                               (close_element,
                                0,
                                l,
                                cst_select$3,
                                function(param){return caml_call2(reset_mode, 0, 0);}))
                            : caml_call1(mode, 0);
                   });
         }
         var _b__ = match[2][1];
         if(! caml_string_notequal(_b__, cst_optgroup)){
          var
           mode$0 =
             function(param){
              return current_element_is(open_elements, _a8_)
                      ? caml_call2(pop$0, l, mode)
                      : caml_call4(report, l, _a9_, throw$0[1], mode);
             },
           _b$_ = open_elements[1];
          if(_b$_){
           var _ca_ = _b$_[1][1], _cb_ = _ca_[1];
           if
            (typeof _cb_ === "number"
             &&
              802643307 === _cb_
              && ! caml_string_notequal(_ca_[2], cst_option)){
            var _cc_ = _b$_[2];
            if(_cc_){
             var _cd_ = _cc_[1][1], _ce_ = _cd_[1];
             if
              (typeof _ce_ === "number"
               &&
                802643307 === _ce_
                && ! caml_string_notequal(_cd_[2], cst_optgroup))
              return caml_call2(pop$0, l, mode$0);
            }
           }
          }
          return mode$0(0);
         }
         if(! caml_string_notequal(_b__, cst_option))
          return current_element_is(open_elements, _a6_)
                  ? caml_call2(pop$0, l, mode)
                  : caml_call4(report, l, _a7_, throw$0[1], mode);
         if(! caml_string_notequal(_b__, cst_select$10))
          return in_select_scope(open_elements, cst_select$0)
                  ? caml_call4
                    (close_element,
                     0,
                     l,
                     cst_select$1,
                     function(param){return caml_call2(reset_mode, 0, 0);})
                  : caml_call4(report, l, _a5_, throw$0[1], mode);
         if(caml_string_notequal(_b__, cst_template$7)) break a;
        }
        return caml_call2(in_head_mode_rules, mode, v);
       }
       return caml_call4(report, l, _a4_, throw$0[1], mode);
      });
    caml_update_dummy
     (in_select_in_table_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var _b5_ = v[2];
                 a:
                 if(typeof _b5_ !== "number"){
                  var _b6_ = _b5_[1], l = v[1];
                  if(3455931 === _b6_){
                   var name = _b5_[2][1];
                   if
                    (caml_string_notequal(name, cst_caption$7)
                     &&
                      caml_string_notequal(name, cst_table$11)
                      &&
                       caml_string_notequal(name, cst_tbody$0)
                       &&
                        caml_string_notequal(name, cst_td$0)
                        &&
                         caml_string_notequal(name, cst_tfoot)
                         &&
                          caml_string_notequal(name, cst_th)
                          &&
                           caml_string_notequal(name, cst_thead)
                           && caml_string_notequal(name, cst_tr$4))
                    break a;
                   var
                    _b7_ =
                      function(param){
                       return in_table_scope(open_elements, name)
                               ? (caml_call2
                                  (Markup_Kstream[8], tokens, v),
                                 caml_call4
                                  (close_element,
                                   0,
                                   l,
                                   cst_select$8,
                                   function(param){return caml_call2(reset_mode, 0, 0);}))
                               : caml_call1(in_select_in_table_mode, 0);
                      };
                   return caml_call4(report, l, _bd_, throw$0[1], _b7_);
                  }
                  if(389604418 === _b6_){
                   var t = _b5_[2], _b8_ = t[1];
                   if
                    (caml_string_notequal(_b8_, cst_caption$7)
                     &&
                      caml_string_notequal(_b8_, cst_table$11)
                      &&
                       caml_string_notequal(_b8_, cst_tbody$0)
                       &&
                        caml_string_notequal(_b8_, cst_td$0)
                        &&
                         caml_string_notequal(_b8_, cst_tfoot)
                         &&
                          caml_string_notequal(_b8_, cst_th)
                          &&
                           caml_string_notequal(_b8_, cst_thead)
                           && caml_string_notequal(_b8_, cst_tr$4))
                    break a;
                   return misnested_tag
                           (l,
                            t,
                            cst_table$10,
                            function(param){
                             caml_call2(Markup_Kstream[8], tokens, v);
                             return caml_call4
                                     (close_element,
                                      0,
                                      l,
                                      cst_select$9,
                                      function(param){return caml_call2(reset_mode, 0, 0);});
                            });
                  }
                 }
                 return caml_call2
                         (in_select_mode_rules, in_select_in_table_mode, v);
                });
      });
    caml_update_dummy
     (in_template_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 return caml_call2(in_table_mode_rules, in_template_mode, v);
                });
      });
    caml_update_dummy
     (in_template_mode_rules,
      function(mode, v){
       var _b1_ = v[2], l = v[1];
       if(typeof _b1_ === "number"){
        if(! has(open_elements, cst_template$4))
         return caml_call1(emit_end, l);
        var
         _b2_ =
           function(param){
            clear_until_marker(active_formatting_elements);
            pop(template_insertion_modes);
            caml_call2(Markup_Kstream[8], tokens, v);
            return caml_call4
                    (close_element,
                     0,
                     l,
                     cst_template$5,
                     function(param){return caml_call2(reset_mode, 0, 0);});
           };
        return caml_call4(report, l, _be_, throw$0[1], _b2_);
       }
       var _b3_ = _b1_[1];
       a:
       {
        if(3455931 !== _b3_){
         if(389604418 !== _b3_)
          return caml_call3(in_body_mode_rules, cst_template$6, mode, v);
         var
          _b4_ = _b1_[2][1],
          switch$0 = caml_string_compare(_b4_, cst_script);
         b:
         {
          c:
          {
           d:
           if(0 <= switch$0){
            if(0 >= switch$0) break c;
            if(! caml_string_notequal(_b4_, cst_style)) break c;
            if(caml_string_notequal(_b4_, cst_tbody$0)){
             if(caml_string_notequal(_b4_, cst_td$0)){
              if(! caml_string_notequal(_b4_, cst_template$7)) break c;
              if(! caml_string_notequal(_b4_, cst_tfoot)) break d;
              if(caml_string_notequal(_b4_, cst_th)){
               if(! caml_string_notequal(_b4_, cst_thead)) break d;
               if(! caml_string_notequal(_b4_, cst_title)) break c;
               if(caml_string_notequal(_b4_, cst_tr$4)) break b;
               pop(template_insertion_modes);
               push(template_insertion_modes, in_table_body_mode);
               caml_call2(Markup_Kstream[8], tokens, v);
               return caml_call1(in_table_body_mode, 0);
              }
             }
             pop(template_insertion_modes);
             push(template_insertion_modes, in_row_mode);
             caml_call2(Markup_Kstream[8], tokens, v);
             return caml_call1(in_row_mode, 0);
            }
           }
           else{
            if(! caml_string_notequal(_b4_, cst_base)) break c;
            if(! caml_string_notequal(_b4_, cst_basefont)) break c;
            if(! caml_string_notequal(_b4_, cst_bgsound)) break c;
            if(caml_string_notequal(_b4_, cst_caption$7)){
             if(! caml_string_notequal(_b4_, cst_col)){
              pop(template_insertion_modes);
              push(template_insertion_modes, in_column_group_mode);
              caml_call2(Markup_Kstream[8], tokens, v);
              return caml_call1(in_column_group_mode, 0);
             }
             if(caml_string_notequal(_b4_, cst_colgroup$2)){
              if(! caml_string_notequal(_b4_, cst_link)) break c;
              if(! caml_string_notequal(_b4_, cst_meta)) break c;
              if(caml_string_notequal(_b4_, cst_noframes)) break b;
              break c;
             }
            }
           }
           pop(template_insertion_modes);
           push(template_insertion_modes, in_table_mode);
           caml_call2(Markup_Kstream[8], tokens, v);
           return caml_call1(in_table_mode, 0);
          }
          break a;
         }
         pop(template_insertion_modes);
         push(template_insertion_modes, in_body_mode);
         caml_call2(Markup_Kstream[8], tokens, v);
         return caml_call1(in_body_mode, 0);
        }
        var name = _b1_[2][1];
        if(caml_string_notequal(name, cst_template$7))
         return caml_call4(report, l, [0, -622351166, name], throw$0[1], mode);
       }
       return caml_call2(in_head_mode_rules, mode, v);
      });
    caml_update_dummy
     (after_body_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 if(typeof match === "number") return caml_call1(emit_end, l);
                 var _bY_ = match[1];
                 a:
                 if(3455931 === _bY_){
                  if(! caml_string_notequal(match[2][1], cst_html$9))
                   return caml_call1(after_after_body_mode, 0);
                 }
                 else{
                  if(748194550 <= _bY_){
                   if(990181650 <= _bY_)
                    return caml_call4
                            (report, l, _bg_, throw$0[1], after_body_mode);
                   var _b0_ = match[2] - 9 | 0;
                   if(4 < _b0_ >>> 0){
                    if(23 !== _b0_) break a;
                   }
                   else if(2 === _b0_) break a;
                   return caml_call3
                           (in_body_mode_rules, cst_html$3, after_body_mode, v);
                  }
                  if(389604418 > _bY_){
                   var s = match[2];
                   return caml_call3
                           (emit$0, l, [0, -826170817, s], after_body_mode);
                  }
                  if(! caml_string_notequal(match[2][1], cst_html$9))
                   return caml_call3
                           (in_body_mode_rules, cst_html$4, after_body_mode, v);
                 }
                 function _bZ_(param){
                  caml_call2(Markup_Kstream[8], tokens, v);
                  return caml_call1(in_body_mode, 0);
                 }
                 return caml_call4(report, l, _bf_, throw$0[1], _bZ_);
                });
      });
    caml_update_dummy
     (in_frameset_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 if(typeof match === "number"){
                  var mode = function(param){return caml_call1(emit_end, l);};
                  return current_element_is(open_elements, _bh_)
                          ? mode(0)
                          : caml_call4(report, l, _bi_, throw$0[1], mode);
                 }
                 var _bV_ = match[1];
                 a:
                 if(3455931 === _bV_){
                  if(! caml_string_notequal(match[2][1], cst_frameset$0)){
                   var
                    mode$0 =
                      function(param){
                       return current_element_is(open_elements, _bk_)
                               ? caml_call1(in_frameset_mode, 0)
                               : caml_call1(after_frameset_mode, 0);
                      };
                   return current_element_is(open_elements, _bl_)
                           ? caml_call4(report, l, _bm_, throw$0[1], mode$0)
                           : caml_call2(pop$0, l, mode$0);
                  }
                 }
                 else{
                  if(748194550 <= _bV_){
                   if(990181650 <= _bV_)
                    return caml_call4
                            (report, l, _bn_, throw$0[1], in_frameset_mode);
                   var c = match[2], _bW_ = c - 9 | 0;
                   if(4 < _bW_ >>> 0){
                    if(23 !== _bW_) break a;
                   }
                   else if(2 === _bW_) break a;
                   caml_call2(add_character, l, c);
                   return caml_call1(in_frameset_mode, 0);
                  }
                  if(389604418 > _bV_){
                   var s = match[2];
                   return caml_call3
                           (emit$0, l, [0, -826170817, s], in_frameset_mode);
                  }
                  var t = match[2], _bX_ = t[1];
                  if(! caml_string_notequal(_bX_, cst_frame))
                   return caml_call7
                           (push_and_emit,
                            0,
                            _bo_,
                            0,
                            0,
                            l,
                            t,
                            function(param){
                             return caml_call2(pop$0, l, in_frameset_mode);
                            });
                  if(! caml_string_notequal(_bX_, cst_frameset$0))
                   return caml_call7
                           (push_and_emit, 0, 0, 0, 0, l, t, in_frameset_mode);
                  if(! caml_string_notequal(_bX_, cst_html$9))
                   return caml_call3
                           (in_body_mode_rules, cst_frameset, in_frameset_mode, v);
                  if(! caml_string_notequal(_bX_, cst_noframes))
                   return caml_call2(in_head_mode_rules, in_frameset_mode, v);
                 }
                 return caml_call4
                         (report, l, _bj_, throw$0[1], in_frameset_mode);
                });
      });
    caml_update_dummy
     (after_frameset_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 if(typeof match === "number") return caml_call1(emit_end, l);
                 var _bS_ = match[1];
                 a:
                 if(3455931 === _bS_){
                  if(! caml_string_notequal(match[2][1], cst_html$9))
                   return caml_call4
                           (close_element, 0, l, cst_html$5, after_after_frameset_mode);
                 }
                 else{
                  if(748194550 <= _bS_){
                   if(990181650 <= _bS_)
                    return caml_call4
                            (report, l, _bq_, throw$0[1], after_frameset_mode);
                   var c = match[2], _bT_ = c - 9 | 0;
                   if(4 < _bT_ >>> 0){
                    if(23 !== _bT_) break a;
                   }
                   else if(2 === _bT_) break a;
                   caml_call2(add_character, l, c);
                   return caml_call1(after_frameset_mode, 0);
                  }
                  if(389604418 > _bS_){
                   var s = match[2];
                   return caml_call3
                           (emit$0, l, [0, -826170817, s], after_frameset_mode);
                  }
                  var _bU_ = match[2][1];
                  if(! caml_string_notequal(_bU_, cst_html$9))
                   return caml_call3
                           (in_body_mode_rules, cst_html$6, after_frameset_mode, v);
                  if(! caml_string_notequal(_bU_, cst_noframes))
                   return caml_call2
                           (in_head_mode_rules, after_frameset_mode, v);
                 }
                 return caml_call4
                         (report, l, _bp_, throw$0[1], after_frameset_mode);
                });
      });
    caml_update_dummy
     (after_after_body_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 a:
                 {
                  if(typeof match !== "number"){
                   var _bQ_ = match[1];
                   if(389604419 <= _bQ_){
                    if(748194550 === _bQ_){
                     var _bR_ = match[2] - 9 | 0;
                     if(4 < _bR_ >>> 0){
                      if(23 !== _bR_) break a;
                     }
                     else if(2 === _bR_) break a;
                    }
                    else if(990181650 !== _bQ_) break a;
                   }
                   else{
                    if(-826170817 === _bQ_){
                     var s = match[2];
                     return caml_call3
                             (emit$0, l, [0, -826170817, s], after_after_body_mode);
                    }
                    if
                     (389604418 > _bQ_
                      || caml_string_notequal(match[2][1], cst_html$9))
                     break a;
                   }
                   return caml_call3
                           (in_body_mode_rules, cst_html$7, after_after_body_mode, v);
                  }
                  if(3448988 === match) return caml_call1(emit_end, l);
                 }
                 caml_call2(Markup_Kstream[8], tokens, v);
                 return caml_call4(report, l, _br_, throw$0[1], in_body_mode);
                });
      });
    caml_update_dummy
     (after_after_frameset_mode,
      function(param){
       return caml_call2
               (dispatch,
                tokens,
                function(v){
                 var l = v[1], match = v[2];
                 a:
                 {
                  if(typeof match !== "number"){
                   var _bN_ = match[1];
                   if(389604419 <= _bN_){
                    if(748194550 === _bN_){
                     var _bO_ = match[2] - 9 | 0;
                     if(4 < _bO_ >>> 0){
                      if(23 !== _bO_) break a;
                     }
                     else if(2 === _bO_) break a;
                    }
                    else if(990181650 !== _bN_) break a;
                   }
                   else{
                    if(-826170817 === _bN_){
                     var s = match[2];
                     return caml_call3
                             (emit$0, l, [0, -826170817, s], after_after_frameset_mode);
                    }
                    if(389604418 > _bN_) break a;
                    var _bP_ = match[2][1];
                    if(caml_string_notequal(_bP_, cst_html$9)){
                     if(caml_string_notequal(_bP_, cst_noframes)) break a;
                     return caml_call2
                             (in_head_mode_rules, after_after_frameset_mode, v);
                    }
                   }
                   return caml_call3
                           (in_body_mode_rules,
                            cst_html$8,
                            after_after_frameset_mode,
                            v);
                  }
                  if(3448988 === match) return caml_call1(emit_end, l);
                 }
                 return caml_call4
                         (report, l, _bs_, throw$0[1], after_after_frameset_mode);
                });
      });
    caml_update_dummy
     (foreign_start_tag,
      function(mode, l, tag){
       var match = adjusted_current_element(context, open_elements);
       if(match)
        var ns = match[1][1][1], namespace = ns;
       else
        var namespace = 802643307;
       return caml_call7
               (push_and_emit,
                0,
                _bt_,
                [0, namespace],
                0,
                l,
                tag,
                function(param){
                 return tag[3]
                         ? caml_call2(pop$0, l, mode)
                         : caml_call1(mode, 0);
                });
      });
    caml_update_dummy
     (is_html_font_tag,
      function(tag){
       var _bK_ = tag[2];
       function _bL_(param){
        var _bM_ = param[1];
        if
         (caml_string_notequal(_bM_, "color")
          &&
           caml_string_notequal(_bM_, "face")
           && caml_string_notequal(_bM_, "size"))
         return 0;
        return 1;
       }
       return caml_call1(caml_call1(Stdlib_List[34], _bL_), _bK_);
      });
    caml_update_dummy
     (foreign_content,
      function(mode, force_html, v){
       var match = v[2], l = v[1];
       if(typeof match === "number") return caml_call1(force_html, 0);
       var _bw_ = match[1];
       if(3455931 === _bw_){
        var name = match[2][1];
        if(! caml_string_notequal(name, cst_script)){
         var match$1 = current_element(open_elements);
         a:
         {
          if(match$1){
           var _by_ = match$1[1][1], _bz_ = _by_[1];
           if
            (typeof _bz_ === "number"
             &&
              4146756 === _bz_ && ! caml_string_notequal(_by_[2], cst_script)){var _bA_ = 1; break a;}
          }
          var _bA_ = 0;
         }
         if(_bA_) return caml_call2(pop$0, l, mode);
        }
        var
         mode$0 =
           function(param){
            var param$0 = open_elements[1];
            for(;;){
             if(! param$0) return caml_call1(mode, 0);
             var match = param$0[1][1], ns = match[1], name$0 = match[2];
             if
              (caml_string_equal(caml_call1(Stdlib_String[27], name$0), name))
              return caml_call4(close_element, [0, ns], l, name, mode);
             if(typeof ns === "number" && 802643307 === ns)
              return caml_call1(force_html, 0);
             var rest = param$0[2], param$0 = rest;
            }
           },
         match$0 = current_element(open_elements);
        if(match$0){
         var name$0 = match$0[1][1][2];
         if(caml_string_equal(caml_call1(Stdlib_String[27], name$0), name))
          return mode$0(0);
        }
        var _bx_ = function(param){return mode$0(0);};
        return caml_call4(report, l, [0, -622351166, name], throw$0[1], _bx_);
       }
       if(748194550 <= _bw_){
        if(990181650 <= _bw_)
         return caml_call4(report, l, _bu_, throw$0[1], mode);
        var c = match[2];
        a:
        {
         if(13 < c >>> 0){
          if(32 === c) break a;
         }
         else{
          if(12 <= c) break a;
          switch(c){
            case 0:
             var
              _bB_ =
                function(param){
                 caml_call2(add_character, l, Markup_Common[9]);
                 return caml_call1(mode, 0);
                };
             return caml_call4(report, l, _bv_, throw$0[1], _bB_);
            case 9:
            case 10:
             break a;
          }
         }
         frameset_ok[1] = 0;
         caml_call2(add_character, l, c);
         return caml_call1(mode, 0);
        }
        caml_call2(add_character, l, c);
        return caml_call1(mode, 0);
       }
       if(389604418 > _bw_){
        var s = match[2];
        return caml_call3(emit$0, l, [0, -826170817, s], mode);
       }
       var
        t = match[2],
        name$1 = t[1],
        _bC_ = caml_string_compare(name$1, cst_i);
       a:
       {
        if(0 <= _bC_){
         if(0 < _bC_){
          var _bD_ = caml_string_compare(name$1, cst_small);
          if(0 <= _bD_){
           if(0 < _bD_){
            var _bE_ = caml_string_compare(name$1, cst_table$11);
            if(0 <= _bE_){
             if
              (0 < _bE_
               &&
                caml_string_notequal(name$1, cst_tt)
                &&
                 caml_string_notequal(name$1, cst_u)
                 &&
                  caml_string_notequal(name$1, cst_ul)
                  && caml_string_notequal(name$1, "var"))
              break a;
            }
            else if
             (caml_string_notequal(name$1, "span")
              &&
               caml_string_notequal(name$1, cst_strike)
               &&
                caml_string_notequal(name$1, cst_strong)
                &&
                 caml_string_notequal(name$1, "sub")
                 && caml_string_notequal(name$1, "sup"))
             break a;
           }
          }
          else{
           var _bF_ = caml_string_compare(name$1, cst_nobr$2);
           if(0 <= _bF_){
            if
             (0 < _bF_
              &&
               caml_string_notequal(name$1, cst_ol)
               &&
                caml_string_notequal(name$1, cst_p$4)
                &&
                 caml_string_notequal(name$1, cst_pre)
                 &&
                  caml_string_notequal(name$1, cst_ruby$1)
                  && caml_string_notequal(name$1, cst_s))
             break a;
           }
           else if
            (caml_string_notequal(name$1, cst_img$0)
             &&
              caml_string_notequal(name$1, cst_li$1)
              &&
               caml_string_notequal(name$1, cst_listing)
               &&
                caml_string_notequal(name$1, cst_main)
                && caml_string_notequal(name$1, cst_meta))
            break a;
          }
         }
        }
        else{
         var _bG_ = caml_string_compare(name$1, cst_em);
         if(0 <= _bG_){
          if(0 < _bG_){
           var _bH_ = caml_string_compare(name$1, cst_h4);
           if(0 <= _bH_){
            if
             (0 < _bH_
              &&
               caml_string_notequal(name$1, cst_h5)
               &&
                caml_string_notequal(name$1, cst_h6)
                &&
                 caml_string_notequal(name$1, cst_head$2)
                 && caml_string_notequal(name$1, cst_hr))
             break a;
           }
           else if
            (caml_string_notequal(name$1, cst_embed)
             &&
              caml_string_notequal(name$1, cst_font)
              &&
               caml_string_notequal(name$1, cst_h1)
               &&
                caml_string_notequal(name$1, cst_h2)
                && caml_string_notequal(name$1, cst_h3))
            break a;
          }
         }
         else{
          var _bI_ = caml_string_compare(name$1, cst_center);
          if(0 <= _bI_){
           if
            (0 < _bI_
             &&
              caml_string_notequal(name$1, cst_code)
              &&
               caml_string_notequal(name$1, cst_dd)
               &&
                caml_string_notequal(name$1, cst_div)
                &&
                 caml_string_notequal(name$1, cst_dl)
                 && caml_string_notequal(name$1, cst_dt))
            break a;
          }
          else if
           (caml_string_notequal(name$1, cst_b)
            &&
             caml_string_notequal(name$1, cst_big)
             &&
              caml_string_notequal(name$1, cst_blockquote)
              &&
               caml_string_notequal(name$1, cst_body$3)
               && caml_string_notequal(name$1, cst_br))
           break a;
         }
        }
        if
         (caml_string_equal(name$1, cst_font)
          && ! caml_call1(is_html_font_tag, t))
         return caml_call3(foreign_start_tag, mode, l, t);
        return misnested_tag
                (l,
                 t,
                 cst_xml_tag,
                 function(param){
                  caml_call2(Markup_Kstream[8], tokens, v);
                  return caml_call2
                          (pop$0,
                           l,
                           function(param){
                            return caml_call3
                                    (pop_until,
                                     function(param){
                                      var element_name = param[1], _bJ_ = element_name[1];
                                      if(typeof _bJ_ === "number" && 802643307 === _bJ_) return 1;
                                      return param[3]
                                              ? 1
                                              : is_mathml_text_integration_poi(element_name);
                                     },
                                     l,
                                     mode);
                           });
                 });
       }
       return caml_call3(foreign_start_tag, mode, l, t);
      });
    return caml_call1(Markup_Kstream[2], constructor);
   }
   var Markup_Html_parser = [0, parse];
   runtime.caml_register_global
    (1093, Markup_Html_parser, "Markup__Html_parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup__Html_writer
//# unitInfo: Requires: Markup__Common, Markup__Kstream, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Uchar, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = " ",
    cst_amp$1 = "&amp;",
    cst_nbsp$1 = "&nbsp;",
    cst$8 = ">",
    cst_xlink$1 = "xlink:",
    cst_xml$1 = "xml:",
    cst_xmlns$2 = "xmlns",
    cst_xmlns$3 = "xmlns:",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = '"',
    cst$1 = '="',
    cst$2 = cst$7,
    cst = "<\/",
    words = [0, cst$8, 0],
    cst$3 = "<",
    cst$4 = cst$7,
    cst$5 = "<?",
    cst$6 = "<!--",
    void_elements =
      caml_list_of_js_array
       (["area",
         "base",
         "basefont",
         "bgsound",
         "br",
         "col",
         "embed",
         "frame",
         "hr",
         "img",
         "input",
         "keygen",
         "link",
         "meta",
         "param",
         "source",
         "track",
         "wbr"]),
    prepend_newline_for = [0, "pre", [0, "textarea", [0, "listing", 0]]],
    literal_text_elements =
      [0,
       "style",
       [0,
        "script",
        [0,
         "xmp",
         [0, "iframe", [0, "noembed", [0, "noframes", [0, "plaintext", 0]]]]]]],
    Stdlib = global_data.Stdlib,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Common = global_data.Markup__Common,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Uutf = global_data.Uutf,
    _b_ = [0, "\n", 0],
    cst_xml = cst_xml$1,
    cst_xmlns$0 = cst_xmlns$2,
    cst_xmlns = cst_xmlns$3,
    cst_xlink = cst_xlink$1,
    _a_ = [0, cst$8, 0],
    cst_xml$0 = cst_xml$1,
    cst_xmlns$1 = cst_xmlns$3,
    cst_xlink$0 = cst_xlink$1,
    _c_ = [0, cst$8, 0],
    _d_ = [0, "-->", 0],
    cst_nbsp$0 = cst_nbsp$1,
    cst_lt = "&lt;",
    cst_gt = "&gt;",
    cst_amp$0 = cst_amp$1,
    cst_nbsp = cst_nbsp$1,
    cst_amp = cst_amp$1,
    cst_quot = "&quot;";
   function escape_attribute(s){
    var
     buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s)),
     _I_ = 0;
    function _J_(param, _L_, _K_){
     if(852405675 > _K_[1]) return 0;
     var c = _K_[2], c$0 = caml_call1(Stdlib_Uchar[10], c);
     return 34 === c$0
             ? caml_call2(Stdlib_Buffer[16], buffer, cst_quot)
             : 38
               === c$0
               ? caml_call2(Stdlib_Buffer[16], buffer, cst_amp)
               : 160
                 === c$0
                 ? caml_call2(Stdlib_Buffer[16], buffer, cst_nbsp)
                 : caml_call2(Markup_Common[10], buffer, c$0);
    }
    caml_call5(Uutf[22][2], 0, 0, _J_, _I_, s);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   function escape_text(s){
    var
     buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s)),
     _E_ = 0;
    function _F_(param, _H_, _G_){
     if(852405675 > _G_[1]) return 0;
     var c = _G_[2], c$0 = caml_call1(Stdlib_Uchar[10], c);
     if(38 === c$0) return caml_call2(Stdlib_Buffer[16], buffer, cst_amp$0);
     if(63 <= c$0){
      if(160 === c$0)
       return caml_call2(Stdlib_Buffer[16], buffer, cst_nbsp$0);
     }
     else if(60 <= c$0)
      switch(c$0 - 60 | 0){
        case 0:
         return caml_call2(Stdlib_Buffer[16], buffer, cst_lt);
        case 1: break;
        default: return caml_call2(Stdlib_Buffer[16], buffer, cst_gt);
      }
     return caml_call2(Markup_Common[10], buffer, c$0);
    }
    caml_call5(Uutf[22][2], 0, 0, _F_, _E_, s);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   function write(opt, _e_, signals){
    if(opt)
     var sth = opt[1], escape_attribute$0 = sth;
    else
     var escape_attribute$0 = escape_attribute;
    if(_e_)
     var sth$0 = _e_[1], escape_text$0 = sth$0;
    else
     var escape_text$0 = escape_text;
    var
     open_elements = [0, 0],
     queue = [],
     emit_list =
       function _D_(_z_, _A_, _B_, _C_){return _D_.fun(_z_, _A_, _B_, _C_);},
     next_signal = function _y_(_v_, _w_, _x_){return _y_.fun(_v_, _w_, _x_);};
    caml_update_dummy(queue, [0, next_signal]);
    caml_update_dummy
     (emit_list,
      function(l, throw$0, e, k){
       if(! l) return caml_call3(next_signal, throw$0, e, k);
       var more = l[2], s = l[1];
       queue[1] = caml_call1(emit_list, more);
       return caml_call1(k, s);
      });
    caml_update_dummy
     (next_signal,
      function(throw$0, e, k){
       function _g_(doctype){
        if(typeof doctype === "number"){
         var match$0 = open_elements[1];
         if(! match$0) return caml_call3(next_signal, throw$0, e, k);
         var rest = match$0[2], name = match$0[1];
         open_elements[1] = rest;
         return caml_call4(emit_list, [0, cst, [0, name, _a_]], throw$0, e, k);
        }
        var _h_ = doctype[1];
        if(4400567 > _h_){
         if(17913 <= _h_){
          var match$3 = doctype[2], s = match$3[2], target = match$3[1];
          return caml_call4
                  (emit_list,
                   [0, cst$5, [0, target, [0, cst$4, [0, s, _c_]]]],
                   throw$0,
                   e,
                   k);
         }
         var s$0 = doctype[2];
         return caml_call4
                 (emit_list, [0, cst$6, [0, s$0, _d_]], throw$0, e, k);
        }
        if(936573133 <= _h_){
         if(990181650 <= _h_)
          return caml_call4
                  (emit_list,
                   [0, caml_call1(Markup_Common[29], doctype), 0],
                   throw$0,
                   e,
                   k);
         var
          ss = doctype[2],
          _i_ = function(s){return 0 === caml_ml_string_length(s) ? 1 : 0;};
         if(caml_call2(Stdlib_List[33], _i_, ss))
          return caml_call3(next_signal, throw$0, e, k);
         var match = open_elements[1];
         if(match)
          var
           element = match[1],
           _j_ = caml_call2(Stdlib_List[37], element, literal_text_elements);
         else
          var _j_ = 0;
         return _j_
                 ? caml_call4(emit_list, ss, throw$0, e, k)
                 : caml_call4
                   (emit_list,
                    caml_call2(Stdlib_List[20], escape_text$0, ss),
                    throw$0,
                    e,
                    k);
        }
        if(856096383 > _h_) return caml_call3(next_signal, throw$0, e, k);
        var
         match$1 = doctype[2],
         attributes = match$1[2],
         name$0 = match$1[1],
         name$1 = name$0[2],
         ns = name$0[1],
         ns$0 = name$0[1],
         local_name = name$0[2];
        if
         (caml_call2
           (Markup_Common[37],
            ns$0,
            [0,
             Markup_Common[5],
             [0, Markup_Common[6], [0, Markup_Common[7], 0]]]))
         var tag_name = local_name;
        else{
         if(caml_string_equal(ns$0, Markup_Common[2]))
          var _p_ = caml_call2(Stdlib[28], cst_xml$0, local_name);
         else{
          if(caml_string_equal(ns$0, Markup_Common[3]))
           var _q_ = caml_call2(Stdlib[28], cst_xmlns$1, local_name);
          else{
           if(caml_string_equal(ns$0, Markup_Common[4]))
            var _r_ = caml_call2(Stdlib[28], cst_xlink$0, local_name);
           else
            var local_name$0 = name$0[2], _r_ = local_name$0;
           var _q_ = _r_;
          }
          var _p_ = _q_;
         }
         var tag_name = _p_;
        }
        function _k_(param){
         var
          value = param[2],
          name = param[1],
          local_name = name[2],
          ns = name[1];
         if(caml_string_notequal(name[1], "")){
          a:
          {
           var match = name[2];
           if(caml_string_equal(ns, Markup_Common[2]))
            var _u_ = caml_call2(Stdlib[28], cst_xml, local_name);
           else{
            if
             (!
              caml_string_notequal(match, cst_xmlns$2)
              && caml_string_equal(ns, Markup_Common[3])){var _u_ = cst_xmlns$0; break a;}
            var
             _u_ =
               caml_string_equal(ns, Markup_Common[3])
                ? caml_call2(Stdlib[28], cst_xmlns, local_name)
                : caml_string_equal
                   (ns, Markup_Common[4])
                  ? caml_call2(Stdlib[28], cst_xlink, local_name)
                  : local_name;
           }
          }
          var name$0 = _u_;
         }
         else
          var name$0 = local_name;
         return [0, name$0, value];
        }
        var
         attributes$0 =
           caml_call1(caml_call1(Stdlib_List[20], _k_), attributes),
         words$0 = words,
         param = caml_call1(Stdlib_List[10], attributes$0);
        for(;;){
         if(! param) break;
         var
          more = param[2],
          match$2 = param[1],
          value = match$2[2],
          name$2 = match$2[1],
          words$1 =
            [0,
             cst$2,
             [0,
              name$2,
              [0,
               cst$1,
               [0, caml_call1(escape_attribute$0, value), [0, cst$0, words$0]]]]],
          words$0 = words$1,
          param = more;
        }
        var
         tag = [0, cst$3, [0, tag_name, words$0]],
         _l_ = caml_string_equal(ns, Markup_Common[5]),
         is_void =
           _l_ ? caml_call2(Markup_Common[37], name$1, void_elements) : _l_;
        if(is_void){
         var
          _m_ =
            function(param){
             if(typeof param === "number"){
              var
               _t_ =
                 function(param){
                  return caml_call4(emit_list, tag, throw$0, e, k);
                 };
              return caml_call3(Markup_Kstream[5], signals, throw$0, _t_);
             }
             open_elements[1] = [0, tag_name, open_elements[1]];
             return caml_call4(emit_list, tag, throw$0, e, k);
            },
          _n_ =
            function(param){return caml_call4(emit_list, tag, throw$0, e, k);};
         return caml_call4(Markup_Kstream[11], signals, throw$0, _n_, _m_);
        }
        open_elements[1] = [0, tag_name, open_elements[1]];
        if
         (caml_string_equal(ns, Markup_Common[5])
          && caml_call2(Markup_Common[37], name$1, prepend_newline_for)){
         var
          _o_ =
            function(param$0){
             if(param$0){
              var match = param$0[1];
              if(typeof match !== "number" && 936573133 === match[1]){
               var ss = match[2], param = ss;
               for(;;){
                if(param){
                 var more = param[2], s = param[1];
                 if(0 === caml_ml_string_length(s)){var param = more; continue;}
                 var _s_ = 10 === runtime.caml_string_get(s, 0) ? 1 : 0;
                }
                else
                 var _s_ = 0;
                if(_s_)
                 return caml_call4
                         (emit_list, caml_call2(Stdlib[37], tag, _b_), throw$0, e, k);
                break;
               }
              }
             }
             return caml_call4(emit_list, tag, throw$0, e, k);
            };
         return caml_call3(Markup_Kstream[12], signals, throw$0, _o_);
        }
        return caml_call4(emit_list, tag, throw$0, e, k);
       }
       return caml_call4(Markup_Kstream[4], signals, throw$0, e, _g_);
      });
    function _f_(throw$0, e, k){return caml_call3(queue[1], throw$0, e, k);}
    return caml_call1(Markup_Kstream[1], _f_);
   }
   var Markup_Html_writer = [0, write];
   runtime.caml_register_global(39, Markup_Html_writer, "Markup__Html_writer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Markup
//# unitInfo: Requires: Markup__Common, Markup__Detect, Markup__Encoding, Markup__Error, Markup__Html_parser, Markup__Html_tokenizer, Markup__Html_writer, Markup__Input, Markup__Kstream, Markup__Stream_io, Markup__Utility, Markup__Xml_parser, Markup__Xml_tokenizer, Markup__Xml_writer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Markup_Utility = global_data.Markup__Utility,
    Markup_Kstream = global_data.Markup__Kstream,
    Markup_Stream_io = global_data.Markup__Stream_io,
    Markup_Encoding = global_data.Markup__Encoding,
    Markup_Error = global_data.Markup__Error,
    Markup_Input = global_data.Markup__Input,
    Markup_Html_writer = global_data.Markup__Html_writer,
    Markup_Detect = global_data.Markup__Detect,
    Markup_Common = global_data.Markup__Common,
    Markup_Html_tokenizer = global_data.Markup__Html_tokenizer,
    Markup_Html_parser = global_data.Markup__Html_parser,
    Markup_Xml_writer = global_data.Markup__Xml_writer,
    Markup_Xml_tokenizer = global_data.Markup__Xml_tokenizer,
    Markup_Xml_parser = global_data.Markup__Xml_parser,
    Not_synchronous =
      [248, "Markup.Synchronous.Not_synchronous", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, 1, 1];
   function return$0(x){return x;}
   function of_cps(f){
    var result = [0, 0];
    function _af_(v){result[1] = [0, v]; return 0;}
    caml_call2
     (f, function(_ag_){throw caml_maybe_attach_backtrace(_ag_, 1);}, _af_);
    var match = result[1];
    if(! match) throw caml_maybe_attach_backtrace(Not_synchronous, 1);
    var v = match[1];
    return v;
   }
   function to_cps(f, throw$0, k){
    try{var v = caml_call1(f, 0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return caml_call1(throw$0, exn);
    }
    return caml_call1(k, v);
   }
   var Synchronous = [0, return$0, of_cps, to_cps];
   function kstream(s){return s;}
   function of_kstream(s){return s;}
   var
    of_list = Markup_Kstream[23],
    compare_locations = Markup_Common[1],
    signal_to_string = Markup_Common[29];
   function signals(parser){return parser[2];}
   function location(parser){return parser[1];}
   function stream_to_parser(s){
    var parser = [0, _a_, caml_call1(Markup_Kstream[3], 0)];
    function _ad_(param, _ae_, k){
     var v = param[2], l = param[1];
     parser[1] = l;
     return caml_call1(k, v);
    }
    parser[2] = caml_call1(caml_call1(Markup_Kstream[18], _ad_), s);
    return parser;
   }
   var
    string = Markup_Stream_io[2],
    buffer = Markup_Stream_io[3],
    channel = Markup_Stream_io[4],
    file = Markup_Stream_io[5];
   function to_channel(c, bytes){
    var _ac_ = caml_call2(Markup_Stream_io[8], c, bytes);
    return caml_call1(Synchronous[2], _ac_);
   }
   function to_file(f, bytes){
    var _ab_ = caml_call2(Markup_Stream_io[9], f, bytes);
    return caml_call1(Synchronous[2], _ab_);
   }
   function preprocess_input_stream(source){
    var _$_ = Markup_Error[3];
    function _aa_(param){return 1;}
    return caml_call3(Markup_Input[1], _aa_, _$_, source);
   }
   var
    content = Markup_Utility[1],
    strings_to_bytes = Markup_Utility[2],
    trees = Markup_Utility[4],
    from_tree = Markup_Utility[6],
    elements = Markup_Utility[7],
    text = Markup_Utility[8],
    normalize_text = Markup_Utility[9],
    trim = Markup_Utility[12],
    pretty_print = Markup_Utility[14],
    html5 = Markup_Utility[15],
    xhtml = Markup_Utility[16],
    xhtml_entity = Markup_Utility[17],
    html = Markup_Common[5],
    svg = Markup_Common[6],
    mathml = Markup_Common[7],
    xml = Markup_Common[2],
    xmlns = Markup_Common[3],
    xlink = Markup_Common[4],
    Ns = [0, html, svg, mathml, xml, xmlns, xlink];
   function Asynchronous(IO){
    function wrap_report(report, l, e){
     function ___(param){return caml_call2(report, l, e);}
     return caml_call1(IO[3], ___);
    }
    var
     wrap = Markup_Encoding[1],
     bytes_empty = Markup_Encoding[2],
     uutf_decoder = Markup_Encoding[3],
     utf_8 = Markup_Encoding[4],
     utf_16be = Markup_Encoding[5],
     utf_16le = Markup_Encoding[6],
     iso_8859_1 = Markup_Encoding[7],
     us_ascii = Markup_Encoding[8],
     utf_16 = Markup_Encoding[9],
     ucs_4_decoder = Markup_Encoding[10],
     ucs_4be = Markup_Encoding[11],
     ucs_4le = Markup_Encoding[12],
     ucs_4be_transposed = Markup_Encoding[13],
     ucs_4le_transposed = Markup_Encoding[14],
     code_page = Markup_Encoding[15],
     windows_1251_table = Markup_Encoding[16],
     windows_1251 = Markup_Encoding[17],
     windows_1252_table = Markup_Encoding[18],
     windows_1252 = Markup_Encoding[19],
     ebcdic_37_table = Markup_Encoding[20],
     ebcdic = Markup_Encoding[21],
     iso_8859_15_table = Markup_Encoding[22],
     iso_8859_15 = Markup_Encoding[23];
    function decode(opt, f, s){
     if(opt)
      var sth = opt[1], report = sth;
     else
      var report = function(param, _Z_){return caml_call1(IO[1], 0);};
     return caml_call2
             (f,
              [0, function(_X_, _Y_){return wrap_report(report, _X_, _Y_);}],
              s);
    }
    var
     Encoding =
       [0,
        wrap,
        bytes_empty,
        uutf_decoder,
        utf_8,
        utf_16be,
        utf_16le,
        iso_8859_1,
        us_ascii,
        utf_16,
        ucs_4_decoder,
        ucs_4be,
        ucs_4le,
        ucs_4be_transposed,
        ucs_4le_transposed,
        code_page,
        windows_1251_table,
        windows_1251,
        windows_1252_table,
        windows_1252,
        ebcdic_37_table,
        ebcdic,
        iso_8859_15_table,
        iso_8859_15,
        decode];
    function parse_xml(opt, encoding, _P_, _O_, context, source){
     if(opt)
      var sth = opt[1], report = sth;
     else
      var report = function(param, _W_){return caml_call1(IO[1], 0);};
     if(_P_)
      var sth$0 = _P_[1], namespace = sth$0;
     else
      var namespace = function(param){return 0;};
     if(_O_)
      var sth$1 = _O_[1], entity = sth$1;
     else
      var entity = function(param){return 0;};
     function report$0(_U_, _V_){return wrap_report(report, _U_, _V_);}
     function with_encoding(encoding, k){
      var
       _R_ = caml_call1(caml_call1(encoding, [0, report$0]), source),
       _S_ =
         caml_call1
          (caml_call2(Markup_Input[1], Markup_Common[28], report$0), _R_),
       _T_ =
         caml_call1
          (caml_call2(Markup_Xml_tokenizer[1], report$0, entity), _S_);
      return caml_call1
              (k,
               caml_call1
                (caml_call3
                  (Markup_Xml_parser[1], context, namespace, report$0),
                 _T_));
     }
     function constructor(throw$0, k){
      if(encoding){
       var encoding$0 = encoding[1];
       return with_encoding(encoding$0, k);
      }
      function _Q_(encoding){return with_encoding(encoding, k);}
      return caml_call3(Markup_Detect[2], source, throw$0, _Q_);
     }
     return stream_to_parser(caml_call1(Markup_Kstream[2], constructor));
    }
    function write_xml(opt, _K_, signals){
     if(opt)
      var sth = opt[1], report = sth;
     else
      var report = function(param, _N_){return caml_call1(IO[1], 0);};
     if(_K_)
      var sth$0 = _K_[1], prefix = sth$0;
     else
      var prefix = function(param){return 0;};
     function report$0(_L_, _M_){return wrap_report(report, _L_, _M_);}
     var
      _J_ =
        caml_call1
         (caml_call2(Markup_Xml_writer[1], report$0, prefix), signals);
     return caml_call1(Markup_Utility[2], _J_);
    }
    function parse_html(opt, encoding, context, source){
     if(opt)
      var sth = opt[1], report = sth;
     else
      var report = function(param, _I_){return caml_call1(IO[1], 0);};
     function report$0(_G_, _H_){return wrap_report(report, _G_, _H_);}
     function with_encoding(encoding, k){
      var
       _D_ = caml_call1(caml_call1(encoding, [0, report$0]), source),
       _E_ =
         caml_call1
          (caml_call2(Markup_Input[1], Markup_Common[27], report$0), _D_),
       _F_ = caml_call1(caml_call1(Markup_Html_tokenizer[1], report$0), _E_);
      return caml_call1
              (k,
               caml_call1
                (caml_call2(Markup_Html_parser[1], context, report$0), _F_));
     }
     function constructor(throw$0, k){
      if(encoding){
       var encoding$0 = encoding[1];
       return with_encoding(encoding$0, k);
      }
      function _C_(encoding){return with_encoding(encoding, k);}
      return caml_call4(Markup_Detect[1], 0, source, throw$0, _C_);
     }
     return stream_to_parser(caml_call1(Markup_Kstream[2], constructor));
    }
    function write_html(escape_attribute, escape_text, signals){
     var
      _B_ =
        caml_call1
         (caml_call2(Markup_Html_writer[1], escape_attribute, escape_text),
          signals);
     return caml_call1(Markup_Utility[2], _B_);
    }
    function to_string(bytes){
     var _A_ = caml_call1(Markup_Stream_io[7], bytes);
     return caml_call1(IO[2], _A_);
    }
    function to_buffer(bytes){
     var _z_ = caml_call1(Markup_Stream_io[6], bytes);
     return caml_call1(IO[2], _z_);
    }
    function stream(f){
     var f$0 = caml_call1(IO[3], f);
     function _y_(throw$0, e, k){
      return caml_call2
              (f$0,
               throw$0,
               function(param){
                if(! param) return caml_call1(e, 0);
                var v = param[1];
                return caml_call1(k, v);
               });
     }
     return caml_call1(Markup_Kstream[1], _y_);
    }
    function next(s){
     var _x_ = caml_call1(Markup_Kstream[5], s);
     return caml_call1(IO[2], _x_);
    }
    function peek(s){
     var _w_ = caml_call1(Markup_Kstream[12], s);
     return caml_call1(IO[2], _w_);
    }
    function transform(f, v, s){
     function _u_(v, s){
      function _v_(param){return caml_call2(f, v, s);}
      return caml_call1(IO[3], _v_);
     }
     return caml_call3(Markup_Kstream[17], _u_, v, s);
    }
    function fold(f, v, s){
     function _r_(v$0, v){
      function _t_(param){return caml_call2(f, v$0, v);}
      return caml_call1(IO[3], _t_);
     }
     var _s_ = caml_call3(Markup_Kstream[19], _r_, v, s);
     return caml_call1(IO[2], _s_);
    }
    function map(f, s){
     function _p_(v){
      function _q_(param){return caml_call1(f, v);}
      return caml_call1(IO[3], _q_);
     }
     return caml_call2(Markup_Kstream[18], _p_, s);
    }
    function filter(f, s){
     function _n_(v){
      function _o_(param){return caml_call1(f, v);}
      return caml_call1(IO[3], _o_);
     }
     return caml_call2(Markup_Kstream[22], _n_, s);
    }
    function filter_map(f, s){
     function _l_(v){
      function _m_(param){return caml_call1(f, v);}
      return caml_call1(IO[3], _m_);
     }
     return caml_call2(Markup_Kstream[21], _l_, s);
    }
    function iter(f, s){
     function _i_(v){
      function _k_(param){return caml_call1(f, v);}
      return caml_call1(IO[3], _k_);
     }
     var _j_ = caml_call2(Markup_Kstream[20], _i_, s);
     return caml_call1(IO[2], _j_);
    }
    function drain(s){
     return iter(function(param){return caml_call1(IO[1], 0);}, s);
    }
    function to_list(s){
     var _h_ = caml_call1(Markup_Kstream[24], s);
     return caml_call1(IO[2], _h_);
    }
    function load(s){
     function _f_(throw$0, k){
      function _g_(l){
       return caml_call1(k, caml_call1(Markup_Kstream[23], l));
      }
      return caml_call3(Markup_Kstream[24], s, throw$0, _g_);
     }
     return caml_call1(IO[2], _f_);
    }
    function tree(text, element, comment, pi, xml, doctype, s){
     var
      _e_ =
        caml_call7
         (Markup_Utility[5], text, element, comment, pi, xml, doctype, s);
     return caml_call1(IO[2], _e_);
    }
    return [0,
            ,
            Encoding,
            parse_xml,
            write_xml,
            parse_html,
            write_html,
            to_string,
            to_buffer,
            stream,
            stream,
            next,
            peek,
            transform,
            fold,
            map,
            filter,
            filter_map,
            iter,
            drain,
            to_list,
            load,
            tree];
   }
   var
    include = Asynchronous(Synchronous),
    Encoding = include[2],
    parse_xml = include[3],
    write_xml = include[4],
    parse_html = include[5],
    write_html = include[6],
    to_string = include[7],
    to_buffer = include[8],
    stream = include[9],
    fn = include[10],
    next = include[11],
    peek = include[12],
    transform = include[13],
    fold = include[14],
    map = include[15],
    filter = include[16],
    filter_map = include[17],
    iter = include[18],
    drain = include[19],
    to_list = include[20],
    tree = include[22];
   function _b_(_c_){
    var _d_ = Asynchronous(_c_);
    return [0,
            [0, _d_[2][24]],
            _d_[3],
            _d_[4],
            _d_[5],
            _d_[6],
            _d_[10],
            _d_[7],
            _d_[8],
            _d_[9],
            _d_[11],
            _d_[12],
            _d_[13],
            _d_[14],
            _d_[15],
            _d_[16],
            _d_[17],
            _d_[18],
            _d_[19],
            _d_[20],
            _d_[21],
            _d_[22]];
   }
   var
    Markup =
      [0,
       [0, Markup_Error[2]],
       [0,
        Encoding[24],
        Encoding[4],
        Encoding[5],
        Encoding[6],
        Encoding[9],
        Encoding[7],
        Encoding[8],
        Encoding[17],
        Encoding[19],
        Encoding[11],
        Encoding[12],
        Encoding[13],
        Encoding[14],
        Encoding[21]],
       signal_to_string,
       signals,
       location,
       parse_xml,
       write_xml,
       parse_html,
       write_html,
       string,
       buffer,
       channel,
       file,
       fn,
       to_string,
       to_buffer,
       to_channel,
       to_file,
       stream,
       next,
       peek,
       transform,
       fold,
       map,
       filter,
       filter_map,
       iter,
       drain,
       of_list,
       to_list,
       content,
       tree,
       trees,
       from_tree,
       elements,
       text,
       trim,
       normalize_text,
       pretty_print,
       html5,
       xhtml,
       xhtml_entity,
       strings_to_bytes,
       compare_locations,
       Ns,
       _b_,
       kstream,
       of_kstream,
       preprocess_input_stream];
   runtime.caml_register_global(16, Markup, "Markup");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
