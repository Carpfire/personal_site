// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dream_httpaf__lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dream_httpaf_lwt = [0];
   runtime.caml_register_global(0, Dream_httpaf_lwt, "Dream_httpaf__lwt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf__lwt__Httpaf_lwt_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Dream_httpaf_lwt_Httpaf_lwt_in = [0];
   runtime.caml_register_global
    (0, Dream_httpaf_lwt_Httpaf_lwt_in, "Dream_httpaf__lwt__Httpaf_lwt_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dream_httpaf__lwt__Httpaf_lwt
//# unitInfo: Requires: Dream_httpaf___Httpaf, Dream_httpaf__lwt__Httpaf_lwt_intf, Lwt
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dream_httpaf_Httpaf = global_data.Dream_httpaf___Httpaf,
    Lwt = global_data.Lwt;
   function Server(Server_runtime){
    function create_connection_handler
    (opt, request_handler, error_handler, client_addr, socket){
     if(opt)
      var sth = opt[1], config = sth;
     else
      var config = Dream_httpaf_Httpaf[10][1];
     var
      _d_ = [0, caml_call1(error_handler, client_addr)],
      create_connection =
        caml_call2(Dream_httpaf_Httpaf[11][1], [0, config], _d_),
      _e_ = Dream_httpaf_Httpaf[11];
     return caml_call6
             (Server_runtime[1],
              config[1],
              [0,
               _e_[2],
               _e_[3],
               _e_[4],
               _e_[5],
               _e_[6],
               _e_[7],
               _e_[8],
               _e_[9],
               _e_[10],
               _e_[12]],
              create_connection,
              request_handler,
              client_addr,
              socket);
    }
    return [0, create_connection_handler];
   }
   var
    Dream_httpaf_lwt_Httpaf_lwt =
      [0,
       Server,
       function(Client_runtime){
        function create_connection(opt, socket){
         if(opt)
          var sth = opt[1], config = sth;
         else
          var config = Dream_httpaf_Httpaf[10][1];
         var
          connection = caml_call2(Dream_httpaf_Httpaf[12][1], [0, config], 0);
         function _a_(runtime){return [0, connection, runtime];}
         var
          _b_ = Dream_httpaf_Httpaf[12],
          _c_ =
            caml_call4
             (Client_runtime[1],
              config[1],
              [0,
               _b_[3],
               _b_[4],
               _b_[5],
               _b_[8],
               _b_[6],
               _b_[7],
               _b_[9],
               _b_[10],
               _b_[11],
               _b_[12]],
              connection,
              socket);
         return caml_call2(Lwt[33][2], _c_, _a_);
        }
        function request(t){
         return caml_call1(Dream_httpaf_Httpaf[12][2], t[1]);
        }
        function shutdown(t){return caml_call1(Client_runtime[3], t[2]);}
        function is_closed(t){return caml_call1(Client_runtime[4], t[2]);}
        function upgrade(t, protocol){
         return caml_call2(Client_runtime[2], t[2], protocol);
        }
        return [0, request, shutdown, is_closed, upgrade, create_connection];
       }];
   runtime.caml_register_global
    (2, Dream_httpaf_lwt_Httpaf_lwt, "Dream_httpaf__lwt__Httpaf_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJkcmVhbV9odHRwYWZfX2x3dC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiY3JlYXRlX2Nvbm5lY3Rpb25faGFuZGxlciIsIm9wdCIsInJlcXVlc3RfaGFuZGxlciIsImVycm9yX2hhbmRsZXIiLCJjbGllbnRfYWRkciIsInNvY2tldCIsInN0aCIsImNvbmZpZyIsImNyZWF0ZV9jb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsInJ1bnRpbWUiLCJyZXF1ZXN0IiwidCIsInNodXRkb3duIiwiaXNfY2xvc2VkIiwidXBncmFkZSIsInByb3RvY29sIl0sInNvdXJjZXMiOlsiL2hvbWUvbGlhbS1jYXJwZW50ZXIvLm9wYW0vcGVyc29uYWwtc2l0ZS9saWIvZHJlYW0taHR0cGFmL2RyZWFtLWh0dHBhZl8tbHd0L2h0dHBhZl9sd3QubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7OztFOzs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7OzthQTZDTUE7S0FDQUMsS0FDREMsaUJBQ0FDLGVBQ0dDLGFBQVlDO0tBQ2QsR0FKQUo7VUFBT0ssTUFBUEwsUUFBQU0sU0FBT0Q7O1VBQVBDO0tBT21CO01BQUEsVUFBQSxXQUxwQkosZUFDR0M7TUFDRUk7UUFDRiwyQ0FMRkQ7O0tBU0EsT0FBQTs7Y0FUQUE7Ozs7Ozs7Ozs7OztjQUlJQztjQUhMTjtjQUVHRTtjQUFZQztJQVlOO0lBckJzQyxXQUs5Q0w7Ozs7Ozs7aUJBK0JBUSxrQkFBb0JQLEtBQThCSTtTQUNwRCxHQURzQko7Y0FBT0ssTUFBUEwsUUFBQU0sU0FBT0Q7O2NBQVBDO1NBRUw7VUFBYkUsYUFBYSwyQ0FGS0Y7U0FHdEIsYUFLUUcsU0FDTixXQVBFRCxZQU1JQyxTQUNpQjtTQU56Qjs7VUFBQTtZQUFBOztjQUhzQkg7Ozs7Ozs7Ozs7OztjQUVsQkU7Y0FGZ0RKO1NBUWhELE9BQUE7UUFDcUI7aUJBRXZCTSxRQUFRQztTQUFJLDhDQUFKQTtRQUFpRDtpQkFFekRDLFNBQVNELEdBQUkscUNBQUpBLE1BQXFDO2lCQUU5Q0UsVUFBVUYsR0FBSSxxQ0FBSkEsTUFBc0M7aUJBRWhERyxRQUFRSCxHQUFFSTtTQUFXLE9BQUEsOEJBQWJKLE1BQUVJO1FBQW9EO21CQU45REwsU0FFQUUsVUFFQUMsV0FFQUMsU0FqQkFQOzs7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ29weXJpZ2h0IChjKSAyMDE4IEluaGFiaXRlZCBUeXBlIExMQy5cbiAgICBDb3B5cmlnaHQgKGMpIDIwMTggQW50b24gQmFjaGluXG4gICAgQ29weXJpZ2h0IChjKSAyMDE5IEFudMOzbmlvIE51bm8gTW9udGVpcm9cblxuICAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnNcbiAgICBhcmUgbWV0OlxuXG4gICAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAgICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gICAgMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgYXV0aG9yIG5vciB0aGUgbmFtZXMgb2YgaGlzIGNvbnRyaWJ1dG9yc1xuICAgICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuICAgICAgIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09OVFJJQlVUT1JTIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NcbiAgICBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICAgIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAgICBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1JcbiAgICBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gICAgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFNcbiAgICBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTilcbiAgICBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXG4gICAgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gICAgQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gICAgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qKVxuXG5tb2R1bGUgR2x1dGVuX2x3dCA9IERyZWFtX2dsdXRlbl9sd3QuR2x1dGVuX2x3dFxubW9kdWxlIEh0dHBhZiA9IERyZWFtX2h0dHBhZl8uSHR0cGFmXG5cbmluY2x1ZGUgSHR0cGFmX2x3dF9pbnRmXG5cbm1vZHVsZSBTZXJ2ZXIgKFNlcnZlcl9ydW50aW1lOiBHbHV0ZW5fbHd0LlNlcnZlcikgPSBzdHJ1Y3RcbiAgbW9kdWxlIEh0dHBhZiA9IERyZWFtX2h0dHBhZl8uSHR0cGFmXG5cbiAgdHlwZSBzb2NrZXQgPSBTZXJ2ZXJfcnVudGltZS5zb2NrZXRcblxuICBsZXQgY3JlYXRlX2Nvbm5lY3Rpb25faGFuZGxlclxuICAgID8oY29uZmlnPUh0dHBhZi5Db25maWcuZGVmYXVsdClcbiAgICB+cmVxdWVzdF9oYW5kbGVyXG4gICAgfmVycm9yX2hhbmRsZXIgPVxuICAgIGZ1biBjbGllbnRfYWRkciBzb2NrZXQgLT5cbiAgICAgIGxldCBjcmVhdGVfY29ubmVjdGlvbiA9XG4gICAgICAgIEh0dHBhZi5TZXJ2ZXJfY29ubmVjdGlvbi5jcmVhdGVcbiAgICAgICAgICB+Y29uZmlnXG4gICAgICAgICAgfmVycm9yX2hhbmRsZXI6KGVycm9yX2hhbmRsZXIgY2xpZW50X2FkZHIpXG4gICAgICBpblxuICAgICAgU2VydmVyX3J1bnRpbWUuY3JlYXRlX3VwZ3JhZGFibGVfY29ubmVjdGlvbl9oYW5kbGVyXG4gICAgICAgIH5yZWFkX2J1ZmZlcl9zaXplOmNvbmZpZy5yZWFkX2J1ZmZlcl9zaXplXG4gICAgICAgIH5wcm90b2NvbDoobW9kdWxlIEh0dHBhZi5TZXJ2ZXJfY29ubmVjdGlvbilcbiAgICAgICAgfmNyZWF0ZV9wcm90b2NvbDpjcmVhdGVfY29ubmVjdGlvblxuICAgICAgICB+cmVxdWVzdF9oYW5kbGVyXG4gICAgICAgIGNsaWVudF9hZGRyXG4gICAgICAgIHNvY2tldFxuZW5kXG5cbm1vZHVsZSBDbGllbnQgKENsaWVudF9ydW50aW1lOiBHbHV0ZW5fbHd0LkNsaWVudCkgPSBzdHJ1Y3RcbiAgbW9kdWxlIEh0dHBhZiA9IERyZWFtX2h0dHBhZl8uSHR0cGFmXG5cbiAgdHlwZSBzb2NrZXQgPSBDbGllbnRfcnVudGltZS5zb2NrZXRcblxuICB0eXBlIHJ1bnRpbWUgPSBDbGllbnRfcnVudGltZS50XG5cbiAgdHlwZSB0ID1cbiAgICB7IGNvbm5lY3Rpb246IEh0dHBhZi5DbGllbnRfY29ubmVjdGlvbi50XG4gICAgOyBydW50aW1lOiBydW50aW1lXG4gICAgfVxuXG4gIGxldCBjcmVhdGVfY29ubmVjdGlvbiA/KGNvbmZpZz1IdHRwYWYuQ29uZmlnLmRlZmF1bHQpIHNvY2tldCA9XG4gICAgbGV0IG9wZW4gTHd0LkluZml4IGluXG4gICAgbGV0IGNvbm5lY3Rpb24gPSBIdHRwYWYuQ2xpZW50X2Nvbm5lY3Rpb24uY3JlYXRlIH5jb25maWcgKCkgaW5cbiAgICBDbGllbnRfcnVudGltZS5jcmVhdGVcbiAgICAgIH5yZWFkX2J1ZmZlcl9zaXplOmNvbmZpZy5yZWFkX2J1ZmZlcl9zaXplXG4gICAgICB+cHJvdG9jb2w6KG1vZHVsZSBIdHRwYWYuQ2xpZW50X2Nvbm5lY3Rpb24pXG4gICAgICBjb25uZWN0aW9uXG4gICAgICBzb2NrZXRcbiAgICA+fD0gZnVuIHJ1bnRpbWUgLT5cbiAgICAgIHsgcnVudGltZTsgY29ubmVjdGlvbiB9XG5cbiAgbGV0IHJlcXVlc3QgdCA9IEh0dHBhZi5DbGllbnRfY29ubmVjdGlvbi5yZXF1ZXN0IHQuY29ubmVjdGlvblxuXG4gIGxldCBzaHV0ZG93biB0ID0gQ2xpZW50X3J1bnRpbWUuc2h1dGRvd24gdC5ydW50aW1lXG5cbiAgbGV0IGlzX2Nsb3NlZCB0ID0gQ2xpZW50X3J1bnRpbWUuaXNfY2xvc2VkIHQucnVudGltZVxuXG4gIGxldCB1cGdyYWRlIHQgcHJvdG9jb2wgPSBDbGllbnRfcnVudGltZS51cGdyYWRlIHQucnVudGltZSBwcm90b2NvbFxuZW5kXG4iXX0=
