// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Rresult
//# unitInfo: Requires: Stdlib, Stdlib__Format, Stdlib__Printexc, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_2 = "<2>",
    cst = "@ ",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_error = "result value is (Error _)",
    err_ok = "result value is (Ok _)",
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    _e_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "Ok",
         [17,
          [0, cst, 1, 0],
          [18, [1, [0, 0, cst$0]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Ok@ @[%a@]@]"],
    _f_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "Error",
         [17,
          [0, cst, 1, 0],
          [18, [1, [0, 0, cst$0]], [15, [17, 0, [17, 0, 0]]]]]]],
       "@[<2>Error@ @[%a@]@]"],
    _d_ =
      [0,
       [11, "Unexpected exception:", [17, 3, [15, 0]]],
       "Unexpected exception:@\n%a"],
    _c_ = [0, [2, 0, [17, 3, 0]], "%s@\n"],
    _b_ = [0, [15, 0], "%a"],
    _a_ = [0, [2, 0, [12, 10, [2, 0, 0]]], "%s\n%s"];
   function ok(v){return [0, v];}
   function error(e){return [1, e];}
   function get_ok(param){
    if(0 !== param[0]) return caml_call1(Stdlib[1], err_error);
    var v = param[1];
    return v;
   }
   function get_error(param){
    if(0 === param[0]) return caml_call1(Stdlib[1], err_ok);
    var e = param[1];
    return e;
   }
   function reword_error(reword, r){
    if(0 === r[0]) return r;
    var e = r[1];
    return [1, caml_call1(reword, e)];
   }
   function bind(v, f){
    if(0 !== v[0]) return v;
    var v$0 = v[1];
    return caml_call1(f, v$0);
   }
   function map(f, v){
    if(0 !== v[0]) return v;
    var v$0 = v[1];
    return [0, caml_call1(f, v$0)];
   }
   function join(r){if(0 !== r[0]) return r; var v = r[1]; return v;}
   function symbol_map(v, f){
    if(0 !== v[0]) return v;
    var v$0 = v[1];
    return [0, caml_call1(f, v$0)];
   }
   var include = [0, bind, symbol_map];
   function pp_lines(ppf, s){
    var left = [0, 0], right = [0, 0], len = runtime.caml_ml_string_length(s);
    function flush(param){
     var
      _j_ = caml_call3(Stdlib_String[16], s, left[1], right[1] - left[1] | 0);
     caml_call2(Stdlib_Format[13], ppf, _j_);
     right[1]++;
     left[1] = right[1];
     return 0;
    }
    for(;;){
     if(right[1] === len){
      var _i_ = left[1] !== len ? 1 : 0;
      return _i_ ? flush(0) : _i_;
     }
     if(10 === runtime.caml_string_get(s, right[1])){
      flush(0);
      caml_call2(Stdlib_Format[34], ppf, 0);
     }
     else
      right[1]++;
    }
   }
   function msg(s){return [0, 3854881, s];}
   function msgf(fmt){
    function kmsg(param){
     return [0, 3854881, caml_call1(Stdlib_Format[119], 0)];
    }
    return caml_call3(Stdlib_Format[144], kmsg, Stdlib_Format[117], fmt);
   }
   function pp_msg(ppf, param){var msg = param[2]; return pp_lines(ppf, msg);}
   function error_msg(s){return [1, [0, 3854881, s]];}
   function error_msgf(fmt){
    function kerr(param){
     return [1, [0, 3854881, caml_call1(Stdlib_Format[119], 0)]];
    }
    return caml_call3(Stdlib_Format[144], kerr, Stdlib_Format[117], fmt);
   }
   function reword_error_msg(opt, reword, r){
    if(opt) var sth = opt[1], replace = sth; else var replace = 0;
    if(0 === r[0]) return r;
    var e = r[1][2], v = caml_call1(reword, e), e$0 = v[2];
    return replace ? [1, v] : caml_call2(error_msgf(_a_), e, e$0);
   }
   function error_to_msg(pp_error, r){
    if(0 === r[0]) return r;
    var e = r[1];
    return caml_call2(error_msgf(_b_), pp_error, e);
   }
   function error_msg_to_invalid_arg(param){
    if(0 === param[0]){var v = param[1]; return v;}
    var m = param[1][2];
    return caml_call1(Stdlib[1], m);
   }
   function open_error_msg(r){return 0 === r[0] ? r : r;}
   function failwith_error_msg(param){
    if(0 === param[0]){var v = param[1]; return v;}
    var m = param[1][2];
    return caml_call1(Stdlib[2], m);
   }
   function pp_exn_trap(ppf, param){
    var
     match = param[2],
     bt = match[2],
     exn = match[1],
     _h_ = caml_call1(Stdlib_Printexc[1], exn);
    caml_call3(Stdlib_Format[137], ppf, _c_, _h_);
    return pp_lines(ppf, caml_call1(Stdlib_Printexc[14], bt));
   }
   function trap_exn(f, v){
    try{var _g_ = [0, caml_call1(f, v)]; return _g_;}
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      bt = caml_call1(Stdlib_Printexc[12], 0);
     return [1, [0, -469840015, [0, e, bt]]];
    }
   }
   function error_exn_trap_to_msg(r){
    if(0 === r[0]) return r;
    var trap = r[1];
    return caml_call2(error_msgf(_d_), pp_exn_trap, trap);
   }
   function open_error_exn_trap(r){return 0 === r[0] ? r : r;}
   function pp(ok, error, ppf, param){
    if(0 === param[0]){var v = param[1]; return caml_call2(ok, ppf, v);}
    var e = param[1];
    return caml_call2(error, ppf, e);
   }
   function dump(ok, error, ppf, param){
    if(0 === param[0]){
     var v = param[1];
     return caml_call4(Stdlib_Format[137], ppf, _e_, ok, v);
    }
    var e = param[1];
    return caml_call4(Stdlib_Format[137], ppf, _f_, error, e);
   }
   function is_ok(param){return 0 === param[0] ? 1 : 0;}
   function is_error(param){return 0 === param[0] ? 0 : 1;}
   function equal(ok, error, r$0, r){
    if(0 === r$0[0]){
     var v = r$0[1];
     if(0 === r[0]){var v$0 = r[1]; return caml_call2(ok, v, v$0);}
    }
    else{
     var e = r$0[1];
     if(0 !== r[0]){var e$0 = r[1]; return caml_call2(error, e, e$0);}
    }
    return 0;
   }
   function compare(ok, error, r$0, r){
    if(0 === r$0[0]){
     var v = r$0[1];
     if(0 !== r[0]) return -1;
     var v$0 = r[1];
     return caml_call2(ok, v, v$0);
    }
    var v$1 = r$0[1];
    if(0 === r[0]) return 1;
    var v$2 = r[1];
    return caml_call2(error, v$1, v$2);
   }
   function to_option(param){
    if(0 !== param[0]) return 0;
    var v = param[1];
    return [0, v];
   }
   function of_option(none, param){
    if(! param) return caml_call1(none, 0);
    var v = param[1];
    return [0, v];
   }
   function to_presult(param){
    if(0 === param[0]){var v = param[1]; return [0, 17724, v];}
    var e = param[1];
    return [0, 106380200, e];
   }
   function of_presult(param){
    if(106380200 <= param[1]){var e = param[2]; return [1, e];}
    var v = param[2];
    return [0, v];
   }
   function ignore_error(use, param){
    if(0 === param[0]){var v = param[1]; return v;}
    var e = param[1];
    return caml_call1(use, e);
   }
   function kignore_error(use, r){
    if(0 === r[0]) return r;
    var e = r[1];
    return caml_call1(use, e);
   }
   var
    symbol_bind = include[1],
    symbol_map$0 = include[2],
    Rresult =
      [0,
       symbol_bind,
       symbol_map$0,
       [0,
        ok,
        error,
        reword_error,
        get_ok,
        get_error,
        ok,
        error,
        bind,
        map,
        join,
        bind,
        symbol_map,
        include,
        msg,
        msgf,
        pp_msg,
        error_msg,
        error_msgf,
        reword_error_msg,
        error_to_msg,
        error_msg_to_invalid_arg,
        open_error_msg,
        failwith_error_msg,
        pp_exn_trap,
        trap_exn,
        error_exn_trap_to_msg,
        open_error_exn_trap,
        pp,
        dump,
        is_ok,
        is_error,
        equal,
        compare,
        to_option,
        of_option,
        to_presult,
        of_presult,
        ignore_error,
        kignore_error]];
   runtime.caml_register_global(12, Rresult, "Rresult");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJycmVzdWx0LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQixjO3FCLGM7O0k7O0k7Rzs7SSxtQixPOztJO0c7O0ksZTs7SSxXOzs7SSxlOztJLE87Rzs7SSxlOztJLFc7RztvQixlLHdCLFM7O0ksZTs7SSxXO0c7Rzs7SSxJLGU7O0s7WTtLOzs7O0k7Ozs7OztLLFU7TTtNOzs7OztHO21CLHVCOztJO0ssb0I7STtJLE87RzttRDt5Qiw0Qjs7STtLLHdCO0k7SSxPO0c7O0k7SSxlO0ksaUIsSTtJLDBCO0c7O0ksZTs7SSxPOzs7SSxxQzs7SSxPO0c7OEIsMEI7O0kscUM7O0ksTztHOztJOzs7O0ssTTtJO0kscUI7OztJLEksYyxtQjs7Szs7TSxLO0s7O0c7O0ksZTs7SSxPO0c7bUMsMEI7O0kscUMsTzs7SSxPOzs7STs7SyxPOzs7SSxPOzt5Qiw4Qjs0Qiw4Qjs7STs7b0MsTzs7OztvQyxPOztJO0c7O0k7O29COztLLE87OzttQjs7SSxPO0c7O0ksbUI7O0k7Rzs7SSxZLE87O0k7OztJLHFDOztJO0c7O0ksNEM7O0k7Rzs7SSxxQzs7SSxPOzs7SSxlOztJLE87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOltdfQ==
